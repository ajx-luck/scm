

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Jul 18 17:56:39 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	swtext1,local,class=CONST,delta=2
    34                           	psect	pa_nodes0,global,class=CODE,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 1.45
    38                           ; Generated 16/11/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F887 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	nvBANK0
    73  006A                     __pnvBANK0:	
    74  006A                     _firstTime:	
    75  006A                     	ds	1
    76  001F                     _PWM01DT	set	31
    77  001E                     _PWMD01H	set	30
    78  001D                     _PWMCON2	set	29
    79  001A                     _PWMD1L	set	26
    80  0019                     _PWMD0L	set	25
    81  0018                     _PWMTH	set	24
    82  0017                     _PWMTL	set	23
    83  0016                     _PWMCON1	set	22
    84  0015                     _PWMCON0	set	21
    85  0014                     _OSCCON	set	20
    86  0013                     _T2CON	set	19
    87  0011                     _PR2	set	17
    88  000E                     _PIE1	set	14
    89  000D                     _PIR1	set	13
    90  000B                     _INTCON	set	11
    91  0009                     _IOCB	set	9
    92  0008                     _WPUB	set	8
    93  0006                     _PORTB	set	6
    94  0005                     _TRISB	set	5
    95  0001                     _OPTION_REG	set	1
    96  0071                     _TMR2IE	set	113
    97  0073                     _RAIE	set	115
    98  0069                     _TMR2IF	set	105
    99  006B                     _RAIF	set	107
   100  0058                     _RBIF	set	88
   101  005B                     _RBIE	set	91
   102  005E                     _PEIE	set	94
   103  005F                     _GIE	set	95
   104  0030                     _RB0	set	48
   105  0031                     _RB1	set	49
   106  0099                     _ADRESH	set	153
   107  0098                     _ADRESL	set	152
   108  0096                     _ADCON1	set	150
   109  0095                     _ADCON0	set	149
   110  0093                     _ANSEL0	set	147
   111  0089                     _IOCA	set	137
   112  0088                     _WPUA	set	136
   113  0087                     _WPDA	set	135
   114  0086                     _PORTA	set	134
   115  0085                     _TRISA	set	133
   116  04B2                     _LDO_EN	set	1202
   117  04B6                     _CHS4	set	1206
   118  04A9                     _GODONE	set	1193
   119                           
   120                           	psect	cinit
   121  000D                     start_initialization:	
   122                           ; #config settings
   123                           
   124  000D                     __initialization:	
   125                           
   126                           ; Clear objects allocated to COMMON
   127  000D  3077               	movlw	low __pbssCOMMON
   128  000E  0084               	movwf	4
   129  000F  307B               	movlw	low (__pbssCOMMON+4)
   130  0010  25B6               	fcall	clear_ram0
   131  0011  3020               	movlw	low __pbssBANK0
   132                           
   133                           ; Clear objects allocated to BANK0
   134  0012  1383               	bcf	3,7	;select IRP bank0
   135  0013  0084               	movwf	4
   136  0014  3057               	movlw	low (__pbssBANK0+55)
   137  0015  25B6               	fcall	clear_ram0
   138  0016                     end_of_initialization:	
   139                           ;End of C runtime variable initialization code
   140                           
   141  0016                     __end_of__initialization:	
   142  0016  0183               	clrf	3
   143  0017  2C4B               	ljmp	_main	;jump to C main() function
   144                           
   145                           	psect	bssCOMMON
   146  0077                     __pbssCOMMON:	
   147  0077                     _prePwStep:	
   148  0077                     	ds	1
   149  0078                     _ledStep:	
   150  0078                     	ds	1
   151  0079                     _workStep:	
   152  0079                     	ds	1
   153  007A                     _chrgFlag:	
   154  007A                     	ds	1
   155                           
   156                           	psect	bssBANK0
   157  0020                     __pbssBANK0:	
   158  0020                     _count900s:	
   159  0020                     	ds	2
   160  0022                     _count8s:	
   161  0022                     	ds	2
   162  0024                     _overWorkTime:	
   163  0024                     	ds	2
   164  0026                     _count5s:	
   165  0026                     	ds	2
   166  0028                     _fullCount:	
   167  0028                     	ds	2
   168  002A                     _count50s:	
   169  002A                     	ds	2
   170  002C                     _batADValue:	
   171  002C                     	ds	2
   172  002E                     _outADValue:	
   173  002E                     	ds	2
   174  0030                     _power_ad:	
   175  0030                     	ds	2
   176  0032                     _result:	
   177  0032                     	ds	2
   178  0034                     _adresult:	
   179  0034                     	ds	2
   180  0036                     _sleepTime:	
   181  0036                     	ds	1
   182  0037                     _lowBatFlag:	
   183  0037                     	ds	1
   184  0038                     _preLedStep:	
   185  0038                     	ds	1
   186  0039                     _ledCntTime:	
   187  0039                     	ds	1
   188  003A                     _chrgMaxDuty:	
   189  003A                     	ds	1
   190  003B                     _chrgWaitTime:	
   191  003B                     	ds	1
   192  003C                     _subTime:	
   193  003C                     	ds	1
   194  003D                     _addTime:	
   195  003D                     	ds	1
   196  003E                     _lockCount:	
   197  003E                     	ds	1
   198  003F                     _chrgMaxAD:	
   199  003F                     	ds	1
   200  0040                     _chrgMode:	
   201  0040                     	ds	1
   202  0041                     _showBatTime:	
   203  0041                     	ds	1
   204  0042                     _lockLedStep:	
   205  0042                     	ds	1
   206  0043                     _reChrgCount:	
   207  0043                     	ds	1
   208  0044                     _pwStep:	
   209  0044                     	ds	1
   210  0045                     _overChrgTime:	
   211  0045                     	ds	1
   212  0046                     _startTime:	
   213  0046                     	ds	1
   214  0047                     _tempDuty:	
   215  0047                     	ds	1
   216  0048                     _addPowerCount:	
   217  0048                     	ds	1
   218  0049                     _overCount:	
   219  0049                     	ds	1
   220  004A                     _maxDuty:	
   221  004A                     	ds	1
   222  004B                     _longPressFlag:	
   223  004B                     	ds	1
   224  004C                     _keyCount:	
   225  004C                     	ds	1
   226  004D                     _ledCnt:	
   227  004D                     	ds	1
   228  004E                     _workOverOutTime:	
   229  004E                     	ds	1
   230  004F                     _protectFlag:	
   231  004F                     	ds	1
   232  0050                     _countHalfFull:	
   233  0050                     	ds	1
   234  0051                     _intCount10:	
   235  0051                     	ds	1
   236  0052                     _chrgFullFlag:	
   237  0052                     	ds	1
   238  0053                     _IntFlag:	
   239  0053                     	ds	1
   240  0054                     _count1s:	
   241  0054                     	ds	1
   242  0055                     _intCount:	
   243  0055                     	ds	1
   244  0056                     _test_adc:	
   245  0056                     	ds	1
   246                           
   247                           	psect	clrtext
   248  05B6                     clear_ram0:	
   249                           ;	Called with FSR containing the base address, and
   250                           ;	W with the last address+1
   251                           
   252  05B6  0064               	clrwdt	;clear the watchdog before getting into this loop
   253  05B7                     clrloop0:	
   254  05B7  0180               	clrf	0	;clear RAM location pointed to by FSR
   255  05B8  0A84               	incf	4,f	;increment pointer
   256  05B9  0604               	xorwf	4,w	;XOR with final address
   257  05BA  1903               	btfsc	3,2	;have we reached the end yet?
   258  05BB  3400               	retlw	0	;all done for this memory range, return
   259  05BC  0604               	xorwf	4,w	;XOR again to restore value
   260  05BD  2DB7               	goto	clrloop0	;do the next byte
   261                           
   262                           	psect	cstackCOMMON
   263  0070                     __pcstackCOMMON:	
   264  0070                     ?_ledShow:	
   265  0070                     ??_ledShow:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_Init_System:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ?_AD_Init:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_checkOutA:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_chrgCtr:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_checkBatAD:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ?_keyCtr:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ?_workCtr:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ?_ledCtr:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ?_Sleep_Mode:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0070                     ?_chrgPwmStop:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0070                     ?_chrgPwmInit:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ?_pwmInit:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ?_pwmStop:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?_Isr_Timer:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ??_Isr_Timer:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_main:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_keyRead:	
   317                           ; 1 bytes @ 0x0
   318                           
   319                           
   320                           ; 1 bytes @ 0x0
   321  0070                     	ds	3
   322  0073                     ??_Init_System:	
   323  0073                     ??_AD_Init:	
   324                           ; 1 bytes @ 0x3
   325                           
   326  0073                     ??_workCtr:	
   327                           ; 1 bytes @ 0x3
   328                           
   329  0073                     ??_Sleep_Mode:	
   330                           ; 1 bytes @ 0x3
   331                           
   332  0073                     ??_chrgPwmStop:	
   333                           ; 1 bytes @ 0x3
   334                           
   335  0073                     ??_chrgPwmInit:	
   336                           ; 1 bytes @ 0x3
   337                           
   338  0073                     ??_pwmInit:	
   339                           ; 1 bytes @ 0x3
   340                           
   341  0073                     ??_pwmStop:	
   342                           ; 1 bytes @ 0x3
   343                           
   344  0073                     ?_ADC_Sample:	
   345                           ; 1 bytes @ 0x3
   346                           
   347  0073                     ??_keyRead:	
   348                           ; 1 bytes @ 0x3
   349                           
   350  0073                     ?___lbdiv:	
   351                           ; 1 bytes @ 0x3
   352                           
   353  0073                     ?___lbmod:	
   354                           ; 1 bytes @ 0x3
   355                           
   356  0073                     ?___lwmod:	
   357                           ; 1 bytes @ 0x3
   358                           
   359  0073                     keyRead@keyStatus:	
   360                           ; 2 bytes @ 0x3
   361                           
   362  0073                     ADC_Sample@adldo:	
   363                           ; 1 bytes @ 0x3
   364                           
   365  0073                     ___lbdiv@divisor:	
   366                           ; 1 bytes @ 0x3
   367                           
   368  0073                     ___lbmod@divisor:	
   369                           ; 1 bytes @ 0x3
   370                           
   371  0073                     ___lwmod@divisor:	
   372                           ; 1 bytes @ 0x3
   373                           
   374                           
   375                           ; 2 bytes @ 0x3
   376  0073                     	ds	1
   377  0074                     ??_checkOutA:	
   378  0074                     ??_checkBatAD:	
   379                           ; 1 bytes @ 0x4
   380                           
   381  0074                     ??_keyCtr:	
   382                           ; 1 bytes @ 0x4
   383                           
   384  0074                     ??___lbdiv:	
   385                           ; 1 bytes @ 0x4
   386                           
   387  0074                     ??___lbmod:	
   388                           ; 1 bytes @ 0x4
   389                           
   390  0074                     keyCtr@kclick:	
   391                           ; 1 bytes @ 0x4
   392                           
   393  0074                     ___lbdiv@dividend:	
   394                           ; 1 bytes @ 0x4
   395                           
   396                           
   397                           ; 1 bytes @ 0x4
   398  0074                     	ds	1
   399  0075                     ___lbdiv@counter:	
   400  0075                     ___lwmod@dividend:	
   401                           ; 1 bytes @ 0x5
   402                           
   403                           
   404                           ; 2 bytes @ 0x5
   405  0075                     	ds	1
   406  0076                     ___lbdiv@quotient:	
   407                           
   408                           ; 1 bytes @ 0x6
   409  0076                     	ds	1
   410  0077                     ??_ledCtr:	
   411  0077                     ??_main:	
   412                           ; 1 bytes @ 0x7
   413                           
   414  0077                     ??___lwmod:	
   415                           ; 1 bytes @ 0x7
   416                           
   417                           
   418                           	psect	cstackBANK0
   419  0057                     __pcstackBANK0:	
   420                           ; 1 bytes @ 0x7
   421                           
   422  0057                     ??_chrgCtr:	
   423  0057                     ??_ADC_Sample:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0057                     ___lbmod@dividend:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0057                     ___lwmod@counter:	
   430                           ; 1 bytes @ 0x0
   431                           
   432                           
   433                           ; 1 bytes @ 0x0
   434  0057                     	ds	1
   435  0058                     ___lbmod@counter:	
   436                           
   437                           ; 1 bytes @ 0x1
   438  0058                     	ds	1
   439  0059                     ___lbmod@rem:	
   440                           
   441                           ; 1 bytes @ 0x2
   442  0059                     	ds	2
   443  005B                     ADC_Sample@j:	
   444                           
   445                           ; 1 bytes @ 0x4
   446  005B                     	ds	1
   447  005C                     ADC_Sample@adch:	
   448                           
   449                           ; 1 bytes @ 0x5
   450  005C                     	ds	1
   451  005D                     ADC_Sample@i:	
   452                           
   453                           ; 1 bytes @ 0x6
   454  005D                     	ds	1
   455  005E                     ADC_Sample@adsum:	
   456                           
   457                           ; 4 bytes @ 0x7
   458  005E                     	ds	4
   459  0062                     ADC_Sample@admin:	
   460                           
   461                           ; 2 bytes @ 0xB
   462  0062                     	ds	2
   463  0064                     ADC_Sample@admax:	
   464                           
   465                           ; 2 bytes @ 0xD
   466  0064                     	ds	2
   467  0066                     ADC_Sample@ad_temp:	
   468                           
   469                           ; 2 bytes @ 0xF
   470  0066                     	ds	3
   471  0069                     checkOutA@maxAout:	
   472                           
   473                           ; 1 bytes @ 0x12
   474  0069                     	ds	1
   475                           
   476                           	psect	maintext
   477  044B                     __pmaintext:	
   478 ;;
   479 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   480 ;;
   481 ;; *************** function _main *****************
   482 ;; Defined at:
   483 ;;		line 124 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;		None
   488 ;; Return value:  Size  Location     Type
   489 ;;                  1    wreg      void 
   490 ;; Registers used:
   491 ;;		wreg, status,2, status,0, pclath, cstack
   492 ;; Tracked objects:
   493 ;;		On entry : B00/0
   494 ;;		On exit  : 100/0
   495 ;;		Unchanged: 0/0
   496 ;; Data sizes:     COMMON   BANK0   BANK1
   497 ;;      Params:         0       0       0
   498 ;;      Locals:         0       0       0
   499 ;;      Temps:          0       0       0
   500 ;;      Totals:         0       0       0
   501 ;;Total ram usage:        0 bytes
   502 ;; Hardware stack levels required when called:    4
   503 ;; This function calls:
   504 ;;		_AD_Init
   505 ;;		_Init_System
   506 ;;		_Sleep_Mode
   507 ;;		_checkBatAD
   508 ;;		_checkOutA
   509 ;;		_chrgCtr
   510 ;;		_keyCtr
   511 ;;		_ledCtr
   512 ;;		_workCtr
   513 ;; This function is called by:
   514 ;;		Startup code after reset
   515 ;; This function uses a non-reentrant model
   516 ;;
   517                           
   518                           
   519                           ;psect for function _main
   520  044B                     _main:	
   521                           
   522                           ;main.c: 126: Init_System();
   523                           
   524                           ;incstack = 0
   525                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   526  044B  2515               	fcall	_Init_System
   527                           
   528                           ;main.c: 127: AD_Init();
   529  044C  25C6               	fcall	_AD_Init
   530                           
   531                           ;main.c: 128: firstTime = 100;
   532  044D  3064               	movlw	100
   533  044E  1283               	bcf	3,5	;RP0=0, select bank0
   534  044F  00EA               	movwf	_firstTime
   535  0450                     l661:	
   536                           ;main.c: 129: while (1)
   537                           
   538  0450  0064               	clrwdt	;# 
   539                           
   540                           ;main.c: 132: if(intCount10 > 10)
   541  0451  300B               	movlw	11
   542  0452  1283               	bcf	3,5	;RP0=0, select bank0
   543  0453  0251               	subwf	_intCount10,w
   544  0454  1C03               	skipc
   545  0455  2C58               	goto	l3487
   546                           
   547                           ;main.c: 133: {
   548                           ;main.c: 134: intCount10 = 0;
   549  0456  01D1               	clrf	_intCount10
   550                           
   551                           ;main.c: 135: checkOutA();
   552  0457  2201               	fcall	_checkOutA
   553  0458                     l3487:	
   554                           
   555                           ;main.c: 136: }
   556                           ;main.c: 137: if(!IntFlag)
   557  0458  1283               	bcf	3,5	;RP0=0, select bank0
   558  0459  0853               	movf	_IntFlag,w
   559  045A  1903               	btfsc	3,2
   560  045B  2C50               	goto	l661
   561                           
   562                           ;main.c: 139: IntFlag = 0;
   563  045C  01D3               	clrf	_IntFlag
   564                           
   565                           ;main.c: 140: chrgCtr();
   566  045D  2018               	fcall	_chrgCtr
   567                           
   568                           ;main.c: 141: checkBatAD();
   569  045E  22B1               	fcall	_checkBatAD
   570                           
   571                           ;main.c: 142: if(chrgFlag == 0 && lowBatFlag == 0)
   572  045F  087A               	movf	_chrgFlag,w
   573  0460  1D03               	btfss	3,2
   574  0461  2C67               	goto	l665
   575  0462  1283               	bcf	3,5	;RP0=0, select bank0
   576  0463  0837               	movf	_lowBatFlag,w
   577  0464  1D03               	btfss	3,2
   578  0465  2C67               	goto	l665
   579                           
   580                           ;main.c: 143: {
   581                           ;main.c: 144: keyCtr();
   582  0466  24C0               	fcall	_keyCtr
   583  0467                     l665:	
   584                           
   585                           ;main.c: 145: }
   586                           ;main.c: 146: workCtr();
   587  0467  2486               	fcall	_workCtr
   588                           
   589                           ;main.c: 147: ledCtr();
   590  0468  235C               	fcall	_ledCtr
   591                           
   592                           ;main.c: 148: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 && overWorkTime == 0)
   593  0469  087A               	movf	_chrgFlag,w
   594  046A  1D03               	btfss	3,2
   595  046B  2C84               	goto	l3521
   596  046C  0879               	movf	_workStep,w
   597  046D  1D03               	btfss	3,2
   598  046E  2C84               	goto	l3521
   599  046F  084C               	movf	_keyCount,w
   600  0470  1D03               	btfss	3,2
   601  0471  2C84               	goto	l3521
   602  0472  086A               	movf	_firstTime,w
   603  0473  1D03               	btfss	3,2
   604  0474  2C84               	goto	l3521
   605  0475  0841               	movf	_showBatTime,w
   606  0476  1D03               	btfss	3,2
   607  0477  2C84               	goto	l3521
   608  0478  0824               	movf	_overWorkTime,w
   609  0479  0425               	iorwf	_overWorkTime+1,w
   610  047A  1D03               	btfss	3,2
   611  047B  2C84               	goto	l3521
   612                           
   613                           ;main.c: 149: {
   614                           ;main.c: 150: if(++sleepTime >= 200)
   615  047C  30C8               	movlw	200
   616  047D  0AB6               	incf	_sleepTime,f
   617  047E  0236               	subwf	_sleepTime,w
   618  047F  1C03               	skipc
   619  0480  2C50               	goto	l661
   620                           
   621                           ;main.c: 151: {
   622                           ;main.c: 152: sleepTime = 0;
   623  0481  01B6               	clrf	_sleepTime
   624                           
   625                           ;main.c: 153: Sleep_Mode();
   626  0482  240D               	fcall	_Sleep_Mode
   627  0483  2C50               	goto	l661
   628  0484                     l3521:	
   629                           
   630                           ;main.c: 156: else
   631                           ;main.c: 157: {
   632                           ;main.c: 158: sleepTime = 0;
   633  0484  01B6               	clrf	_sleepTime
   634  0485  2C50               	goto	l661
   635  0486                     __end_of_main:	
   636                           
   637                           	psect	text1
   638  0486                     __ptext1:	
   639 ;; *************** function _workCtr *****************
   640 ;; Defined at:
   641 ;;		line 539 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
   642 ;; Parameters:    Size  Location     Type
   643 ;;		None
   644 ;; Auto vars:     Size  Location     Type
   645 ;;		None
   646 ;; Return value:  Size  Location     Type
   647 ;;                  1    wreg      void 
   648 ;; Registers used:
   649 ;;		wreg, status,2, status,0, pclath, cstack
   650 ;; Tracked objects:
   651 ;;		On entry : 0/0
   652 ;;		On exit  : 100/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMMON   BANK0   BANK1
   655 ;;      Params:         0       0       0
   656 ;;      Locals:         0       0       0
   657 ;;      Temps:          0       0       0
   658 ;;      Totals:         0       0       0
   659 ;;Total ram usage:        0 bytes
   660 ;; Hardware stack levels used:    1
   661 ;; Hardware stack levels required when called:    3
   662 ;; This function calls:
   663 ;;		_pwmInit
   664 ;;		_pwmStop
   665 ;; This function is called by:
   666 ;;		_main
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           
   671                           ;psect for function _workCtr
   672  0486                     _workCtr:	
   673                           
   674                           ;main.c: 542: if(startTime > 0)
   675                           
   676                           ;incstack = 0
   677                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   678  0486  1283               	bcf	3,5	;RP0=0, select bank0
   679  0487  0846               	movf	_startTime,w
   680  0488  1D03               	btfss	3,2
   681                           
   682                           ;main.c: 543: {
   683                           ;main.c: 544: startTime--;
   684  0489  03C6               	decf	_startTime,f
   685                           
   686                           ;main.c: 545: }
   687                           ;main.c: 546: if(workStep > 0)
   688  048A  0879               	movf	_workStep,w
   689  048B  1903               	btfsc	3,2
   690  048C  2CBC               	goto	l2797
   691                           
   692                           ;main.c: 547: {
   693                           ;main.c: 548: if((PWMCON0 & 0x02) == 0)
   694  048D  1895               	btfsc	21,1	;volatile
   695  048E  2C90               	goto	l2777
   696                           
   697                           ;main.c: 549: {
   698                           ;main.c: 550: pwmInit();
   699  048F  25BE               	fcall	_pwmInit
   700  0490                     l2777:	
   701                           
   702                           ;main.c: 551: }
   703                           ;main.c: 552: maxDuty = 43 + (workStep*2);
   704  0490  1003               	clrc
   705  0491  0D79               	rlf	_workStep,w
   706  0492  3E2B               	addlw	43
   707  0493  00CA               	movwf	_maxDuty
   708                           
   709                           ;main.c: 553: if(overCount >= 5)
   710  0494  3005               	movlw	5
   711  0495  0249               	subwf	_overCount,w
   712  0496  1C03               	skipc
   713  0497  2CAC               	goto	l2789
   714                           
   715                           ;main.c: 554: {
   716                           ;main.c: 555: if(++count5s > 500)
   717  0498  0AA6               	incf	_count5s,f
   718  0499  1903               	skipnz
   719  049A  0AA7               	incf	_count5s+1,f
   720  049B  3001               	movlw	1
   721  049C  0227               	subwf	_count5s+1,w
   722  049D  30F5               	movlw	245
   723  049E  1903               	skipnz
   724  049F  0226               	subwf	_count5s,w
   725  04A0  1C03               	skipc
   726  04A1  2CAE               	goto	l2791
   727  04A2  30E8               	movlw	232
   728                           
   729                           ;main.c: 556: {
   730                           ;main.c: 557: count5s = 0;
   731  04A3  01A6               	clrf	_count5s
   732  04A4  01A7               	clrf	_count5s+1
   733                           
   734                           ;main.c: 558: overWorkTime = 1000;
   735  04A5  00A4               	movwf	_overWorkTime
   736  04A6  3003               	movlw	3
   737  04A7  00A5               	movwf	_overWorkTime+1
   738                           
   739                           ;main.c: 559: preLedStep = workStep;
   740  04A8  0879               	movf	_workStep,w
   741  04A9  00B8               	movwf	_preLedStep
   742                           
   743                           ;main.c: 560: workStep = 0;
   744  04AA  01F9               	clrf	_workStep
   745  04AB  2CAE               	goto	l2791
   746  04AC                     l2789:	
   747                           
   748                           ;main.c: 564: else
   749                           ;main.c: 565: {
   750                           ;main.c: 566: count5s = 0;
   751  04AC  01A6               	clrf	_count5s
   752  04AD  01A7               	clrf	_count5s+1
   753  04AE                     l2791:	
   754                           
   755                           ;main.c: 567: }
   756                           ;main.c: 568: if(count1s == 0 && ++count900s >= 900)
   757  04AE  0854               	movf	_count1s,w
   758  04AF  1D03               	btfss	3,2
   759  04B0  0008               	return
   760  04B1  0AA0               	incf	_count900s,f
   761  04B2  1903               	skipnz
   762  04B3  0AA1               	incf	_count900s+1,f
   763  04B4  3003               	movlw	3
   764  04B5  0221               	subwf	_count900s+1,w
   765  04B6  3084               	movlw	132
   766  04B7  1903               	skipnz
   767  04B8  0220               	subwf	_count900s,w
   768  04B9  1803               	btfsc	3,0
   769                           
   770                           ;main.c: 569: {
   771                           ;main.c: 570: workStep = 0;
   772  04BA  01F9               	clrf	_workStep
   773  04BB  0008               	return
   774  04BC                     l2797:	
   775                           
   776                           ;main.c: 573: else
   777                           ;main.c: 574: {
   778                           ;main.c: 575: pwmStop();
   779  04BC  25D3               	fcall	_pwmStop
   780                           
   781                           ;main.c: 576: count900s = 0;
   782  04BD  01A0               	clrf	_count900s
   783  04BE  01A1               	clrf	_count900s+1
   784  04BF  0008               	return
   785  04C0                     __end_of_workCtr:	
   786                           
   787                           	psect	text2
   788  05D3                     __ptext2:	
   789 ;; *************** function _pwmStop *****************
   790 ;; Defined at:
   791 ;;		line 925 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
   792 ;; Parameters:    Size  Location     Type
   793 ;;		None
   794 ;; Auto vars:     Size  Location     Type
   795 ;;		None
   796 ;; Return value:  Size  Location     Type
   797 ;;                  1    wreg      void 
   798 ;; Registers used:
   799 ;;		None
   800 ;; Tracked objects:
   801 ;;		On entry : 100/0
   802 ;;		On exit  : 100/0
   803 ;;		Unchanged: 0/0
   804 ;; Data sizes:     COMMON   BANK0   BANK1
   805 ;;      Params:         0       0       0
   806 ;;      Locals:         0       0       0
   807 ;;      Temps:          0       0       0
   808 ;;      Totals:         0       0       0
   809 ;;Total ram usage:        0 bytes
   810 ;; Hardware stack levels used:    1
   811 ;; Hardware stack levels required when called:    2
   812 ;; This function calls:
   813 ;;		Nothing
   814 ;; This function is called by:
   815 ;;		_workCtr
   816 ;; This function uses a non-reentrant model
   817 ;;
   818                           
   819                           
   820                           ;psect for function _pwmStop
   821  05D3                     _pwmStop:	
   822                           
   823                           ;main.c: 927: PWMCON0 &= 0XFD;
   824                           
   825                           ;incstack = 0
   826                           ; Regs used in _pwmStop: []
   827  05D3  1095               	bcf	21,1	;volatile
   828                           
   829                           ;main.c: 928: RB1 = 0;
   830  05D4  1086               	bcf	6,1	;volatile
   831  05D5  0008               	return
   832  05D6                     __end_of_pwmStop:	
   833                           
   834                           	psect	text3
   835  05BE                     __ptext3:	
   836 ;; *************** function _pwmInit *****************
   837 ;; Defined at:
   838 ;;		line 910 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;		None
   841 ;; Auto vars:     Size  Location     Type
   842 ;;		None
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg, status,2
   847 ;; Tracked objects:
   848 ;;		On entry : 100/0
   849 ;;		On exit  : 100/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMMON   BANK0   BANK1
   852 ;;      Params:         0       0       0
   853 ;;      Locals:         0       0       0
   854 ;;      Temps:          0       0       0
   855 ;;      Totals:         0       0       0
   856 ;;Total ram usage:        0 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; Hardware stack levels required when called:    2
   859 ;; This function calls:
   860 ;;		Nothing
   861 ;; This function is called by:
   862 ;;		_workCtr
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           
   867                           ;psect for function _pwmInit
   868  05BE                     _pwmInit:	
   869                           
   870                           ;main.c: 912: PWMCON1 = 0B00000000;
   871                           
   872                           ;incstack = 0
   873                           ; Regs used in _pwmInit: [wreg+status,2]
   874                           
   875                           ;main.c: 913: PWMTH = 0X00;
   876                           
   877                           ;main.c: 914: PWMTL = 100;
   878                           
   879                           ;main.c: 917: PWMD01H = 0;
   880  05BE  25B0               	fcall	PL8	;call to abstracted procedure
   881                           
   882                           ;main.c: 918: PWMD1L = 50;
   883  05BF  3032               	movlw	50
   884  05C0  009A               	movwf	26	;volatile
   885                           
   886                           ;main.c: 919: PWM01DT = 0X00;
   887  05C1  019F               	clrf	31	;volatile
   888                           
   889                           ;main.c: 921: PWMCON0 = 0X62;
   890  05C2  3062               	movlw	98
   891  05C3  0095               	movwf	21	;volatile
   892                           
   893                           ;main.c: 922: PWMCON2 =0X00;
   894  05C4  019D               	clrf	29	;volatile
   895  05C5  0008               	return
   896  05C6                     __end_of_pwmInit:	
   897                           
   898                           	psect	text4
   899  035C                     __ptext4:	
   900 ;; *************** function _ledCtr *****************
   901 ;; Defined at:
   902 ;;		line 231 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;		None
   905 ;; Auto vars:     Size  Location     Type
   906 ;;		None
   907 ;; Return value:  Size  Location     Type
   908 ;;                  1    wreg      void 
   909 ;; Registers used:
   910 ;;		wreg, status,2, status,0, pclath, cstack
   911 ;; Tracked objects:
   912 ;;		On entry : 100/0
   913 ;;		On exit  : 100/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMMON   BANK0   BANK1
   916 ;;      Params:         0       0       0
   917 ;;      Locals:         0       0       0
   918 ;;      Temps:          0       0       0
   919 ;;      Totals:         0       0       0
   920 ;;Total ram usage:        0 bytes
   921 ;; Hardware stack levels used:    1
   922 ;; Hardware stack levels required when called:    3
   923 ;; This function calls:
   924 ;;		___lbdiv
   925 ;;		___lbmod
   926 ;;		___lwmod
   927 ;; This function is called by:
   928 ;;		_main
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           
   933                           ;psect for function _ledCtr
   934  035C                     _ledCtr:	
   935                           
   936                           ;main.c: 233: if(firstTime > 0)
   937                           
   938                           ;incstack = 0
   939                           ; Regs used in _ledCtr: [wreg+status,2+status,0+pclath+cstack]
   940  035C  086A               	movf	_firstTime,w
   941  035D  1903               	btfsc	3,2
   942  035E  2B69               	goto	l3435
   943  035F  3006               	movlw	6
   944                           
   945                           ;main.c: 234: {
   946                           ;main.c: 235: firstTime--;
   947  0360  03EA               	decf	_firstTime,f
   948                           
   949                           ;main.c: 236: ledStep = 6;
   950  0361  00F8               	movwf	_ledStep
   951                           
   952                           ;main.c: 237: if(prePwStep < pwStep)
   953  0362  0844               	movf	_pwStep,w
   954  0363  0277               	subwf	_prePwStep,w
   955  0364  1803               	skipnc
   956  0365  0008               	return
   957                           
   958                           ;main.c: 238: {
   959                           ;main.c: 239: prePwStep = pwStep;
   960  0366  0844               	movf	_pwStep,w
   961  0367  00F7               	movwf	_prePwStep
   962  0368  0008               	return
   963  0369                     l3435:	
   964                           
   965                           ;main.c: 242: else if(overWorkTime > 0)
   966  0369  0824               	movf	_overWorkTime,w
   967  036A  0425               	iorwf	_overWorkTime+1,w
   968  036B  1903               	btfsc	3,2
   969  036C  2B87               	goto	l3445
   970                           
   971                           ;main.c: 243: {
   972                           ;main.c: 244: overWorkTime--;
   973  036D  3001               	movlw	1
   974  036E  02A4               	subwf	_overWorkTime,f
   975  036F  3000               	movlw	0
   976  0370  1C03               	skipc
   977  0371  03A5               	decf	_overWorkTime+1,f
   978  0372  02A5               	subwf	_overWorkTime+1,f
   979                           
   980                           ;main.c: 245: if(overWorkTime % 40 < 20)
   981  0373  3028               	movlw	40
   982  0374  00F3               	movwf	___lwmod@divisor
   983  0375  01F4               	clrf	___lwmod@divisor+1
   984  0376  0825               	movf	_overWorkTime+1,w
   985  0377  00F6               	movwf	___lwmod@dividend+1
   986  0378  0824               	movf	_overWorkTime,w
   987  0379  00F5               	movwf	___lwmod@dividend
   988  037A  24F1               	fcall	___lwmod
   989  037B  3000               	movlw	0
   990  037C  0274               	subwf	?___lwmod+1,w
   991  037D  3014               	movlw	20
   992  037E  1903               	skipnz
   993  037F  0273               	subwf	?___lwmod,w
   994  0380  1803               	skipnc
   995  0381  2B85               	goto	l3443
   996                           
   997                           ;main.c: 246: {
   998                           ;main.c: 247: ledStep = preLedStep;
   999  0382  0838               	movf	_preLedStep,w
  1000  0383  00F8               	movwf	_ledStep
  1001                           
  1002                           ;main.c: 248: }
  1003  0384  0008               	return
  1004  0385                     l3443:	
  1005                           
  1006                           ;main.c: 249: else
  1007                           ;main.c: 250: {
  1008                           ;main.c: 251: ledStep = 0;
  1009  0385  01F8               	clrf	_ledStep
  1010  0386  0008               	return
  1011  0387                     l3445:	
  1012                           
  1013                           ;main.c: 254: else if(showBatTime > 0)
  1014  0387  0841               	movf	_showBatTime,w
  1015  0388  1903               	btfsc	3,2
  1016  0389  2BA1               	goto	l3463
  1017  038A  300E               	movlw	14
  1018                           
  1019                           ;main.c: 255: {
  1020                           ;main.c: 256: showBatTime--;
  1021  038B  03C1               	decf	_showBatTime,f
  1022                           
  1023                           ;main.c: 257: if(prePwStep >= 14)
  1024  038C  0277               	subwf	_prePwStep,w
  1025  038D  1C03               	skipc
  1026  038E  2B95               	goto	l3453
  1027                           
  1028                           ;main.c: 258: {
  1029                           ;main.c: 259: ledStep = prePwStep/14;
  1030  038F  300E               	movlw	14
  1031  0390  00F3               	movwf	___lbdiv@divisor
  1032  0391  0877               	movf	_prePwStep,w
  1033  0392  258E               	fcall	___lbdiv
  1034  0393  00F8               	movwf	_ledStep
  1035                           
  1036                           ;main.c: 260: }
  1037  0394  0008               	return
  1038  0395                     l3453:	
  1039                           
  1040                           ;main.c: 261: else if(prePwStep > 5)
  1041  0395  3006               	movlw	6
  1042  0396  0277               	subwf	_prePwStep,w
  1043  0397  1C03               	skipc
  1044  0398  2B9C               	goto	l3457
  1045  0399                     l3455:	
  1046                           
  1047                           ;main.c: 262: {
  1048                           ;main.c: 263: ledStep = 1;
  1049  0399  01F8               	clrf	_ledStep
  1050  039A  0AF8               	incf	_ledStep,f
  1051                           
  1052                           ;main.c: 264: }
  1053  039B  0008               	return
  1054  039C                     l3457:	
  1055                           
  1056                           ;main.c: 265: else
  1057                           ;main.c: 266: {
  1058                           ;main.c: 267: if(count1s < 50)
  1059  039C  3032               	movlw	50
  1060  039D  0254               	subwf	_count1s,w
  1061  039E  1C03               	btfss	3,0
  1062  039F  2B99               	goto	l3455
  1063  03A0  2B85               	goto	l3443
  1064  03A1                     l3463:	
  1065                           ;main.c: 274: }
  1066                           ;main.c: 275: }
  1067                           ;main.c: 276: }
  1068                           
  1069                           
  1070                           ;main.c: 277: else if(workStep > 0)
  1071  03A1  0879               	movf	_workStep,w
  1072  03A2  1903               	btfsc	3,2
  1073  03A3  2BA7               	goto	l3467
  1074                           
  1075                           ;main.c: 278: {
  1076                           ;main.c: 279: ledStep = workStep;
  1077  03A4  0879               	movf	_workStep,w
  1078  03A5  00F8               	movwf	_ledStep
  1079                           
  1080                           ;main.c: 280: }
  1081  03A6  0008               	return
  1082  03A7                     l3467:	
  1083                           
  1084                           ;main.c: 281: else if(chrgFlag)
  1085  03A7  087A               	movf	_chrgFlag,w
  1086  03A8  1903               	btfsc	3,2
  1087  03A9  2B85               	goto	l3443
  1088                           
  1089                           ;main.c: 282: {
  1090                           ;main.c: 283: if(count1s % 50 == 0)
  1091  03AA  3032               	movlw	50
  1092  03AB  00F3               	movwf	___lbmod@divisor
  1093  03AC  0854               	movf	_count1s,w
  1094  03AD  2572               	fcall	___lbmod
  1095  03AE  3A00               	xorlw	0
  1096  03AF  1D03               	skipz
  1097  03B0  0008               	return
  1098                           
  1099                           ;main.c: 284: {
  1100                           ;main.c: 285: if(++ledStep > 6)
  1101  03B1  3007               	movlw	7
  1102  03B2  0AF8               	incf	_ledStep,f
  1103  03B3  0278               	subwf	_ledStep,w
  1104  03B4  1C03               	skipc
  1105  03B5  0008               	return
  1106                           
  1107                           ;main.c: 286: {
  1108                           ;main.c: 287: ledStep = lockLedStep;
  1109  03B6  0842               	movf	_lockLedStep,w
  1110  03B7  00F8               	movwf	_ledStep
  1111  03B8  0008               	return
  1112  03B9                     __end_of_ledCtr:	
  1113                           
  1114                           	psect	text5
  1115  04F1                     __ptext5:	
  1116 ;; *************** function ___lwmod *****************
  1117 ;; Defined at:
  1118 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;  divisor         2    3[COMMON] unsigned int 
  1121 ;;  dividend        2    5[COMMON] unsigned int 
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;  counter         1    0[BANK0 ] unsigned char 
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  2    3[COMMON] unsigned int 
  1126 ;; Registers used:
  1127 ;;		wreg, status,2, status,0
  1128 ;; Tracked objects:
  1129 ;;		On entry : 100/0
  1130 ;;		On exit  : 100/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMMON   BANK0   BANK1
  1133 ;;      Params:         4       0       0
  1134 ;;      Locals:         0       1       0
  1135 ;;      Temps:          0       0       0
  1136 ;;      Totals:         4       1       0
  1137 ;;Total ram usage:        5 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; Hardware stack levels required when called:    2
  1140 ;; This function calls:
  1141 ;;		Nothing
  1142 ;; This function is called by:
  1143 ;;		_ledCtr
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           
  1148                           ;psect for function ___lwmod
  1149  04F1                     ___lwmod:	
  1150                           
  1151                           ;incstack = 0
  1152                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1153  04F1  0873               	movf	___lwmod@divisor,w
  1154  04F2  0474               	iorwf	___lwmod@divisor+1,w
  1155  04F3  1903               	btfsc	3,2
  1156  04F4  2D10               	goto	l3097
  1157  04F5  01D7               	clrf	___lwmod@counter
  1158  04F6                     L1:	
  1159  04F6  0AD7               	incf	___lwmod@counter,f
  1160  04F7  1BF4               	btfsc	___lwmod@divisor+1,7
  1161  04F8  2CFD               	goto	l3089
  1162  04F9  1003               	clrc
  1163  04FA  0DF3               	rlf	___lwmod@divisor,f
  1164  04FB  0DF4               	rlf	___lwmod@divisor+1,f
  1165  04FC  2CF6               	goto	L1
  1166  04FD                     l3089:	
  1167  04FD  0874               	movf	___lwmod@divisor+1,w
  1168  04FE  0276               	subwf	___lwmod@dividend+1,w
  1169  04FF  1D03               	skipz
  1170  0500  2D03               	goto	u3255
  1171  0501  0873               	movf	___lwmod@divisor,w
  1172  0502  0275               	subwf	___lwmod@dividend,w
  1173  0503                     u3255:	
  1174  0503  1C03               	skipc
  1175  0504  2D0C               	goto	L2
  1176  0505  0873               	movf	___lwmod@divisor,w
  1177  0506  02F5               	subwf	___lwmod@dividend,f
  1178  0507  0874               	movf	___lwmod@divisor+1,w
  1179  0508  1C03               	skipc
  1180  0509  03F6               	decf	___lwmod@dividend+1,f
  1181  050A  02F6               	subwf	___lwmod@dividend+1,f
  1182  050B  1003               	clrc
  1183  050C                     L2:	
  1184  050C  0CF4               	rrf	___lwmod@divisor+1,f
  1185  050D  0CF3               	rrf	___lwmod@divisor,f
  1186  050E  0BD7               	decfsz	___lwmod@counter,f
  1187  050F  2CFD               	goto	l3089
  1188  0510                     l3097:	
  1189  0510  0876               	movf	___lwmod@dividend+1,w
  1190  0511  00F4               	movwf	?___lwmod+1
  1191  0512  0875               	movf	___lwmod@dividend,w
  1192  0513  00F3               	movwf	?___lwmod
  1193  0514  0008               	return
  1194  0515                     __end_of___lwmod:	
  1195                           
  1196                           	psect	text6
  1197  0572                     __ptext6:	
  1198 ;; *************** function ___lbmod *****************
  1199 ;; Defined at:
  1200 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;  dividend        1    wreg     unsigned char 
  1203 ;;  divisor         1    3[COMMON] unsigned char 
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;  dividend        1    0[BANK0 ] unsigned char 
  1206 ;;  rem             1    2[BANK0 ] unsigned char 
  1207 ;;  counter         1    1[BANK0 ] unsigned char 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      unsigned char 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0
  1212 ;; Tracked objects:
  1213 ;;		On entry : 100/0
  1214 ;;		On exit  : 100/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMMON   BANK0   BANK1
  1217 ;;      Params:         1       0       0
  1218 ;;      Locals:         0       3       0
  1219 ;;      Temps:          1       0       0
  1220 ;;      Totals:         2       3       0
  1221 ;;Total ram usage:        5 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    2
  1224 ;; This function calls:
  1225 ;;		Nothing
  1226 ;; This function is called by:
  1227 ;;		_ledCtr
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           
  1232                           ;psect for function ___lbmod
  1233  0572                     ___lbmod:	
  1234                           
  1235                           ;incstack = 0
  1236                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1237                           ;___lbmod@dividend stored from wreg
  1238  0572  00D7               	movwf	___lbmod@dividend
  1239  0573  3008               	movlw	8
  1240  0574  00D8               	movwf	___lbmod@counter
  1241  0575  01D9               	clrf	___lbmod@rem
  1242  0576                     l3067:	
  1243  0576  0857               	movf	___lbmod@dividend,w
  1244  0577  00F4               	movwf	??___lbmod
  1245  0578  3007               	movlw	7
  1246  0579  1003               	clrc
  1247  057A                     L3:	
  1248  057A  0CF4               	rrf	??___lbmod,f
  1249  057B  3EFF               	addlw	-1
  1250  057C  1003               	clrc
  1251  057D  1D03               	skipz
  1252  057E  2D7A               	goto	L3
  1253  057F  0D59               	rlf	___lbmod@rem,w
  1254  0580  0474               	iorwf	??___lbmod,w
  1255  0581  00D9               	movwf	___lbmod@rem
  1256  0582  1003               	clrc
  1257  0583  0DD7               	rlf	___lbmod@dividend,f
  1258  0584  0873               	movf	___lbmod@divisor,w
  1259  0585  0259               	subwf	___lbmod@rem,w
  1260  0586  1C03               	skipc
  1261  0587  2D8A               	goto	l3075
  1262  0588  0873               	movf	___lbmod@divisor,w
  1263  0589  02D9               	subwf	___lbmod@rem,f
  1264  058A                     l3075:	
  1265  058A  0BD8               	decfsz	___lbmod@counter,f
  1266  058B  2D76               	goto	l3067
  1267  058C  0859               	movf	___lbmod@rem,w
  1268  058D  0008               	return
  1269  058E                     __end_of___lbmod:	
  1270                           
  1271                           	psect	text7
  1272  04C0                     __ptext7:	
  1273 ;; *************** function _keyCtr *****************
  1274 ;; Defined at:
  1275 ;;		line 497 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;		None
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;  kclick          1    4[COMMON] unsigned char 
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  1    wreg      void 
  1282 ;; Registers used:
  1283 ;;		wreg, status,2, status,0, pclath, cstack
  1284 ;; Tracked objects:
  1285 ;;		On entry : 100/0
  1286 ;;		On exit  : 100/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMMON   BANK0   BANK1
  1289 ;;      Params:         0       0       0
  1290 ;;      Locals:         1       0       0
  1291 ;;      Temps:          0       0       0
  1292 ;;      Totals:         1       0       0
  1293 ;;Total ram usage:        1 bytes
  1294 ;; Hardware stack levels used:    1
  1295 ;; Hardware stack levels required when called:    3
  1296 ;; This function calls:
  1297 ;;		_keyRead
  1298 ;; This function is called by:
  1299 ;;		_main
  1300 ;; This function uses a non-reentrant model
  1301 ;;
  1302                           
  1303                           
  1304                           ;psect for function _keyCtr
  1305  04C0                     _keyCtr:	
  1306                           
  1307                           ;main.c: 499: char kclick = keyRead(0x04 & (~PORTB));
  1308                           
  1309                           ;incstack = 0
  1310                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1311  04C0  0906               	comf	6,w	;volatile
  1312  04C1  3904               	andlw	4
  1313  04C2  2537               	fcall	_keyRead
  1314  04C3  00F4               	movwf	keyCtr@kclick
  1315                           
  1316                           ;main.c: 500: if(kclick == 1)
  1317  04C4  0B74               	decfsz	keyCtr@kclick,w
  1318  04C5  2CE3               	goto	l2757
  1319                           
  1320                           ;main.c: 501: {
  1321                           ;main.c: 502: if(workStep > 0)
  1322  04C6  0879               	movf	_workStep,w
  1323  04C7  1903               	btfsc	3,2
  1324  04C8  2CD1               	goto	l2743
  1325                           
  1326                           ;main.c: 503: {
  1327                           ;main.c: 504: if(++workStep > 6)
  1328  04C9  3007               	movlw	7
  1329  04CA  0AF9               	incf	_workStep,f
  1330  04CB  0279               	subwf	_workStep,w
  1331  04CC  1C03               	skipc
  1332  04CD  0008               	return
  1333                           
  1334                           ;main.c: 505: {
  1335                           ;main.c: 506: workStep = 1;
  1336  04CE  01F9               	clrf	_workStep
  1337  04CF  0AF9               	incf	_workStep,f
  1338  04D0  0008               	return
  1339  04D1                     l2743:	
  1340                           
  1341                           ;main.c: 509: else if(overWorkTime > 0)
  1342  04D1  0824               	movf	_overWorkTime,w
  1343  04D2  0425               	iorwf	_overWorkTime+1,w
  1344  04D3  1903               	btfsc	3,2
  1345  04D4  2CDA               	goto	l2749
  1346                           
  1347                           ;main.c: 510: {
  1348                           ;main.c: 511: overWorkTime = 0;
  1349  04D5  01A4               	clrf	_overWorkTime
  1350  04D6  01A5               	clrf	_overWorkTime+1
  1351                           
  1352                           ;main.c: 512: workStep = preLedStep;
  1353  04D7  0838               	movf	_preLedStep,w
  1354  04D8  00F9               	movwf	_workStep
  1355                           
  1356                           ;main.c: 513: }
  1357  04D9  0008               	return
  1358  04DA                     l2749:	
  1359                           
  1360                           ;main.c: 514: else if(showBatTime > 0)
  1361  04DA  0841               	movf	_showBatTime,w
  1362  04DB  1903               	btfsc	3,2
  1363  04DC  2CDF               	goto	l2753
  1364  04DD                     l2751:	
  1365                           
  1366                           ;main.c: 515: {
  1367                           ;main.c: 516: showBatTime = 0;
  1368  04DD  01C1               	clrf	_showBatTime
  1369                           
  1370                           ;main.c: 517: }
  1371  04DE  0008               	return
  1372  04DF                     l2753:	
  1373                           
  1374                           ;main.c: 518: else
  1375                           ;main.c: 519: {
  1376                           ;main.c: 520: showBatTime = 200;
  1377  04DF  30C8               	movlw	200
  1378  04E0  00C1               	movwf	_showBatTime
  1379                           
  1380                           ;main.c: 521: count1s = 0;
  1381  04E1  01D4               	clrf	_count1s
  1382  04E2  0008               	return
  1383  04E3                     l2757:	
  1384                           
  1385                           ;main.c: 524: else if(kclick == 2)
  1386  04E3  3002               	movlw	2
  1387  04E4  0674               	xorwf	keyCtr@kclick,w
  1388  04E5  1D03               	btfss	3,2
  1389  04E6  0008               	return
  1390                           
  1391                           ;main.c: 525: {
  1392                           ;main.c: 526: if(workStep > 0)
  1393  04E7  0879               	movf	_workStep,w
  1394  04E8  1903               	btfsc	3,2
  1395  04E9  2CEC               	goto	l778
  1396                           
  1397                           ;main.c: 527: {
  1398                           ;main.c: 528: workStep = 0;
  1399  04EA  01F9               	clrf	_workStep
  1400                           
  1401                           ;main.c: 529: }
  1402  04EB  0008               	return
  1403  04EC                     l778:	
  1404  04EC  301E               	movlw	30
  1405                           
  1406                           ;main.c: 530: else
  1407                           ;main.c: 531: {
  1408                           ;main.c: 532: workStep = 1;
  1409  04ED  01F9               	clrf	_workStep
  1410  04EE  0AF9               	incf	_workStep,f
  1411                           
  1412                           ;main.c: 533: startTime = 30;
  1413  04EF  00C6               	movwf	_startTime
  1414  04F0  2CDD               	goto	l2751
  1415  04F1                     __end_of_keyCtr:	
  1416                           
  1417                           	psect	text8
  1418  0537                     __ptext8:	
  1419 ;; *************** function _keyRead *****************
  1420 ;; Defined at:
  1421 ;;		line 464 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;  keyStatus       1    wreg     unsigned char 
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;  keyStatus       1    3[COMMON] unsigned char 
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      unsigned char 
  1428 ;; Registers used:
  1429 ;;		wreg, status,2, status,0
  1430 ;; Tracked objects:
  1431 ;;		On entry : 100/0
  1432 ;;		On exit  : 100/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMMON   BANK0   BANK1
  1435 ;;      Params:         0       0       0
  1436 ;;      Locals:         1       0       0
  1437 ;;      Temps:          0       0       0
  1438 ;;      Totals:         1       0       0
  1439 ;;Total ram usage:        1 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    2
  1442 ;; This function calls:
  1443 ;;		Nothing
  1444 ;; This function is called by:
  1445 ;;		_keyCtr
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           
  1450                           ;psect for function _keyRead
  1451  0537                     _keyRead:	
  1452                           
  1453                           ;incstack = 0
  1454                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1455                           ;keyRead@keyStatus stored from wreg
  1456  0537  00F3               	movwf	keyRead@keyStatus
  1457                           
  1458                           ;main.c: 466: if(keyStatus)
  1459  0538  0873               	movf	keyRead@keyStatus,w
  1460  0539  3064               	movlw	100
  1461  053A  1903               	btfsc	3,2
  1462  053B  2D49               	goto	L5
  1463                           
  1464                           ;main.c: 467: {
  1465                           ;main.c: 468: keyCount++;
  1466  053C  0ACC               	incf	_keyCount,f
  1467                           
  1468                           ;main.c: 469: if(keyCount >= 100)
  1469  053D  024C               	subwf	_keyCount,w
  1470  053E  1C03               	skipc
  1471  053F  3400               	retlw	0
  1472                           
  1473                           ;main.c: 470: {
  1474                           ;main.c: 471: keyCount = 100;
  1475  0540  3064               	movlw	100
  1476  0541  00CC               	movwf	_keyCount
  1477                           
  1478                           ;main.c: 472: if(!longPressFlag)
  1479  0542  084B               	movf	_longPressFlag,w
  1480  0543  1D03               	btfss	3,2
  1481  0544  3400               	retlw	0
  1482  0545  3002               	movlw	2
  1483                           
  1484                           ;main.c: 473: {
  1485                           ;main.c: 474: longPressFlag = 1;
  1486  0546  01CB               	clrf	_longPressFlag
  1487  0547  0ACB               	incf	_longPressFlag,f
  1488                           
  1489                           ;main.c: 475: return 2;
  1490  0548  0008               	return
  1491  0549                     L5:	
  1492                           ;main.c: 479: else
  1493                           ;main.c: 480: {
  1494                           ;main.c: 481: if(keyCount >= 100)
  1495                           
  1496  0549  024C               	subwf	_keyCount,w
  1497  054A  1C03               	skipc
  1498  054B  2D4F               	goto	l2193
  1499                           
  1500                           ;main.c: 482: {
  1501                           ;main.c: 483: keyCount = 0;
  1502  054C  01CC               	clrf	_keyCount
  1503                           
  1504                           ;main.c: 484: longPressFlag = 0;
  1505  054D  01CB               	clrf	_longPressFlag
  1506                           
  1507                           ;main.c: 485: return 0;
  1508  054E  3400               	retlw	0
  1509  054F                     l2193:	
  1510                           
  1511                           ;main.c: 487: else if(keyCount >= 6)
  1512  054F  3006               	movlw	6
  1513  0550  024C               	subwf	_keyCount,w
  1514                           
  1515                           ;main.c: 488: {
  1516                           ;main.c: 489: keyCount = 0;
  1517  0551  01CC               	clrf	_keyCount
  1518  0552  1803               	btfsc	3,0
  1519                           
  1520                           ;main.c: 490: return 1;
  1521  0553  3401               	retlw	1
  1522  0554  3400               	retlw	0
  1523  0555                     __end_of_keyRead:	
  1524                           ;main.c: 491: }
  1525                           ;main.c: 492: keyCount = 0;
  1526                           
  1527                           
  1528                           	psect	text9
  1529  0018                     __ptext9:	
  1530 ;; *************** function _chrgCtr *****************
  1531 ;; Defined at:
  1532 ;;		line 299 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;		None
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;		None
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  1    wreg      void 
  1539 ;; Registers used:
  1540 ;;		wreg, status,2, status,0, pclath, cstack
  1541 ;; Tracked objects:
  1542 ;;		On entry : 100/0
  1543 ;;		On exit  : 100/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMMON   BANK0   BANK1
  1546 ;;      Params:         0       0       0
  1547 ;;      Locals:         0       0       0
  1548 ;;      Temps:          0       2       0
  1549 ;;      Totals:         0       2       0
  1550 ;;Total ram usage:        2 bytes
  1551 ;; Hardware stack levels used:    1
  1552 ;; Hardware stack levels required when called:    3
  1553 ;; This function calls:
  1554 ;;		___lbdiv
  1555 ;;		_chrgPwmInit
  1556 ;;		_chrgPwmStop
  1557 ;; This function is called by:
  1558 ;;		_main
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           
  1563                           ;psect for function _chrgCtr
  1564  0018                     _chrgCtr:	
  1565                           
  1566                           ;main.c: 301: if(PORTA & 0x02)
  1567                           
  1568                           ;incstack = 0
  1569                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1570  0018  1683               	bsf	3,5	;RP0=1, select bank1
  1571  0019  1C86               	btfss	6,1	;volatile
  1572  001A  28F3               	goto	l3339
  1573                           
  1574                           ;main.c: 302: {
  1575                           ;main.c: 303: if(chrgFlag == 0)
  1576  001B  087A               	movf	_chrgFlag,w
  1577  001C  1D03               	btfss	3,2
  1578  001D  2824               	goto	l3215
  1579                           
  1580                           ;main.c: 304: {
  1581                           ;main.c: 305: chrgFlag = 1;
  1582  001E  01FA               	clrf	_chrgFlag
  1583  001F  0AFA               	incf	_chrgFlag,f
  1584                           
  1585                           ;main.c: 306: ledStep = 0;
  1586  0020  01F8               	clrf	_ledStep
  1587                           
  1588                           ;main.c: 307: chrgMaxDuty = 0;
  1589  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1590  0022  01BA               	clrf	_chrgMaxDuty
  1591                           
  1592                           ;main.c: 308: chrgPwmStop();
  1593  0023  25D6               	fcall	_chrgPwmStop
  1594  0024                     l3215:	
  1595                           
  1596                           ;main.c: 309: }
  1597                           ;main.c: 310: workStep = 0;
  1598  0024  01F9               	clrf	_workStep
  1599                           
  1600                           ;main.c: 311: lowBatFlag = 0;
  1601  0025  1283               	bcf	3,5	;RP0=0, select bank0
  1602  0026  01B7               	clrf	_lowBatFlag
  1603                           
  1604                           ;main.c: 312: if(prePwStep < pwStep)
  1605  0027  0844               	movf	_pwStep,w
  1606  0028  0277               	subwf	_prePwStep,w
  1607  0029  1803               	skipnc
  1608  002A  2834               	goto	l3227
  1609                           
  1610                           ;main.c: 313: {
  1611                           ;main.c: 314: if(++count50s > 2000)
  1612  002B  2112               	fcall	PL6	;call to abstracted procedure
  1613  002C  1903               	skipnz
  1614  002D  022A               	subwf	_count50s,w
  1615  002E  1C03               	skipc
  1616  002F  2836               	goto	l3229
  1617                           
  1618                           ;main.c: 315: {
  1619                           ;main.c: 316: count50s = 0;
  1620  0030  01AA               	clrf	_count50s
  1621  0031  01AB               	clrf	_count50s+1
  1622                           
  1623                           ;main.c: 317: prePwStep++;
  1624  0032  0AF7               	incf	_prePwStep,f
  1625  0033  2836               	goto	l3229
  1626  0034                     l3227:	
  1627                           
  1628                           ;main.c: 320: else
  1629                           ;main.c: 321: {
  1630                           ;main.c: 322: count50s = 0;
  1631  0034  01AA               	clrf	_count50s
  1632  0035  01AB               	clrf	_count50s+1
  1633  0036                     l3229:	
  1634                           
  1635                           ;main.c: 323: }
  1636                           ;main.c: 324: if(protectFlag)
  1637  0036  084F               	movf	_protectFlag,w
  1638  0037  1903               	btfsc	3,2
  1639  0038  2859               	goto	l3253
  1640                           
  1641                           ;main.c: 325: {
  1642                           ;main.c: 326: chrgPwmStop();
  1643  0039  25D6               	fcall	_chrgPwmStop
  1644                           
  1645                           ;main.c: 327: ledStep = 6;
  1646  003A  3006               	movlw	6
  1647  003B  00F8               	movwf	_ledStep
  1648                           
  1649                           ;main.c: 328: if(prePwStep < 99 && protectFlag == 1)
  1650  003C  3063               	movlw	99
  1651  003D  0277               	subwf	_prePwStep,w
  1652  003E  1803               	skipnc
  1653  003F  2857               	goto	l3249
  1654  0040  0B4F               	decfsz	_protectFlag,w
  1655  0041  2857               	goto	l3249
  1656                           
  1657                           ;main.c: 329: {
  1658                           ;main.c: 330: if(++reChrgCount > 250)
  1659  0042  30FB               	movlw	251
  1660  0043  0AC3               	incf	_reChrgCount,f
  1661  0044  0243               	subwf	_reChrgCount,w
  1662  0045  1C03               	skipc
  1663  0046  0008               	return
  1664  0047  300F               	movlw	15
  1665                           
  1666                           ;main.c: 331: {
  1667                           ;main.c: 332: reChrgCount = 0;
  1668  0048  01C3               	clrf	_reChrgCount
  1669                           
  1670                           ;main.c: 333: chrgFullFlag = 0;
  1671  0049  01D2               	clrf	_chrgFullFlag
  1672                           
  1673                           ;main.c: 334: protectFlag = 0;
  1674  004A  01CF               	clrf	_protectFlag
  1675                           
  1676                           ;main.c: 335: if(prePwStep > 14)
  1677  004B  0277               	subwf	_prePwStep,w
  1678  004C  1C03               	skipc
  1679  004D  2855               	goto	l3247
  1680                           
  1681                           ;main.c: 336: {
  1682                           ;main.c: 337: lockLedStep = (prePwStep/14) - 1;
  1683  004E  300E               	movlw	14
  1684  004F  00F3               	movwf	___lbdiv@divisor
  1685  0050  0877               	movf	_prePwStep,w
  1686  0051  258E               	fcall	___lbdiv
  1687  0052  3EFF               	addlw	255
  1688  0053  00C2               	movwf	_lockLedStep
  1689                           
  1690                           ;main.c: 338: }
  1691  0054  0008               	return
  1692  0055                     l3247:	
  1693                           
  1694                           ;main.c: 339: else
  1695                           ;main.c: 340: {
  1696                           ;main.c: 341: lockLedStep = 0;
  1697  0055  01C2               	clrf	_lockLedStep
  1698  0056  0008               	return
  1699  0057                     l3249:	
  1700                           
  1701                           ;main.c: 345: else
  1702                           ;main.c: 346: {
  1703                           ;main.c: 347: reChrgCount = 0;
  1704  0057  01C3               	clrf	_reChrgCount
  1705  0058  0008               	return
  1706  0059                     l3253:	
  1707                           
  1708                           ;main.c: 350: }
  1709                           ;main.c: 351: if(batADValue < 1118)
  1710  0059  3004               	movlw	4
  1711  005A  022D               	subwf	_batADValue+1,w
  1712  005B  305E               	movlw	94
  1713  005C  1903               	skipnz
  1714  005D  022C               	subwf	_batADValue,w
  1715  005E  1803               	skipnc
  1716  005F  2863               	goto	l3259
  1717  0060  300F               	movlw	15
  1718                           
  1719                           ;main.c: 352: {
  1720                           ;main.c: 353: chrgMode = 0;
  1721  0061  01C0               	clrf	_chrgMode
  1722                           
  1723                           ;main.c: 354: chrgMaxAD = 15;
  1724  0062  287C               	goto	L6
  1725  0063                     l3259:	
  1726                           ;main.c: 355: }
  1727                           
  1728                           
  1729                           ;main.c: 356: else if(batADValue < 1530)
  1730  0063  3005               	movlw	5
  1731  0064  022D               	subwf	_batADValue+1,w
  1732  0065  30FA               	movlw	250
  1733  0066  1903               	skipnz
  1734  0067  022C               	subwf	_batADValue,w
  1735  0068  1803               	skipnc
  1736  0069  2870               	goto	l3267
  1737  006A  3019               	movlw	25
  1738                           
  1739                           ;main.c: 357: {
  1740                           ;main.c: 358: chrgMode = 1;
  1741  006B  01C0               	clrf	_chrgMode
  1742  006C  0AC0               	incf	_chrgMode,f
  1743                           
  1744                           ;main.c: 359: chrgMaxAD = 25;
  1745  006D  00BF               	movwf	_chrgMaxAD
  1746                           
  1747                           ;main.c: 360: lockCount = 0;
  1748  006E  01BE               	clrf	_lockCount
  1749                           
  1750                           ;main.c: 361: }
  1751  006F  287D               	goto	l3277
  1752  0070                     l3267:	
  1753                           
  1754                           ;main.c: 362: else if(count1s == 0)
  1755  0070  0854               	movf	_count1s,w
  1756  0071  1D03               	btfss	3,2
  1757  0072  287D               	goto	l3277
  1758                           
  1759                           ;main.c: 363: {
  1760                           ;main.c: 364: if(++lockCount > 200)
  1761  0073  30C9               	movlw	201
  1762  0074  0ABE               	incf	_lockCount,f
  1763  0075  023E               	subwf	_lockCount,w
  1764  0076  1C03               	skipc
  1765  0077  287B               	goto	l3275
  1766  0078  3002               	movlw	2
  1767                           
  1768                           ;main.c: 365: {
  1769                           ;main.c: 366: lockCount = 0;
  1770  0079  01BE               	clrf	_lockCount
  1771                           
  1772                           ;main.c: 367: chrgMode = 2;
  1773  007A  00C0               	movwf	_chrgMode
  1774  007B                     l3275:	
  1775                           
  1776                           ;main.c: 368: }
  1777                           ;main.c: 370: chrgMaxAD = 25;
  1778  007B  3019               	movlw	25
  1779  007C                     L6:	
  1780  007C  00BF               	movwf	_chrgMaxAD
  1781  007D                     l3277:	
  1782                           
  1783                           ;main.c: 371: }
  1784                           ;main.c: 372: if(chrgMode == 2 && outADValue < 5)
  1785  007D  3002               	movlw	2
  1786  007E  0640               	xorwf	_chrgMode,w
  1787  007F  1D03               	btfss	3,2
  1788  0080  2897               	goto	l3287
  1789  0081  3000               	movlw	0
  1790  0082  022F               	subwf	_outADValue+1,w
  1791  0083  3005               	movlw	5
  1792  0084  1903               	skipnz
  1793  0085  022E               	subwf	_outADValue,w
  1794  0086  1803               	skipnc
  1795  0087  2897               	goto	l3287
  1796                           
  1797                           ;main.c: 373: {
  1798                           ;main.c: 374: if(++fullCount >= 200)
  1799  0088  0AA8               	incf	_fullCount,f
  1800  0089  1903               	skipnz
  1801  008A  0AA9               	incf	_fullCount+1,f
  1802  008B  3000               	movlw	0
  1803  008C  0229               	subwf	_fullCount+1,w
  1804  008D  30C8               	movlw	200
  1805  008E  1903               	skipnz
  1806  008F  0228               	subwf	_fullCount,w
  1807  0090  1C03               	skipc
  1808  0091  2899               	goto	l3289
  1809                           
  1810                           ;main.c: 375: {
  1811                           ;main.c: 376: fullCount = 0;
  1812  0092  01A8               	clrf	_fullCount
  1813  0093  01A9               	clrf	_fullCount+1
  1814                           
  1815                           ;main.c: 377: chrgFullFlag = 1;
  1816  0094  01D2               	clrf	_chrgFullFlag
  1817  0095  0AD2               	incf	_chrgFullFlag,f
  1818  0096  2899               	goto	l3289
  1819  0097                     l3287:	
  1820                           
  1821                           ;main.c: 380: else
  1822                           ;main.c: 381: {
  1823                           ;main.c: 382: fullCount = 0;
  1824  0097  01A8               	clrf	_fullCount
  1825  0098  01A9               	clrf	_fullCount+1
  1826  0099                     l3289:	
  1827                           
  1828                           ;main.c: 383: }
  1829                           ;main.c: 384: if(chrgFullFlag)
  1830  0099  0852               	movf	_chrgFullFlag,w
  1831  009A  1903               	btfsc	3,2
  1832  009B  289F               	goto	l3295
  1833                           
  1834                           ;main.c: 385: {
  1835                           ;main.c: 386: lockLedStep = 6;
  1836  009C  3006               	movlw	6
  1837  009D  00C2               	movwf	_lockLedStep
  1838                           
  1839                           ;main.c: 387: chrgPwmStop();
  1840  009E  2DD6               	ljmp	l2155
  1841  009F                     l3295:	
  1842                           ;main.c: 388: }
  1843                           
  1844                           
  1845                           ;main.c: 389: else
  1846                           ;main.c: 390: {
  1847                           ;main.c: 391: if(prePwStep < 15)
  1848  009F  300F               	movlw	15
  1849  00A0  0277               	subwf	_prePwStep,w
  1850  00A1  1803               	skipnc
  1851  00A2  28A5               	goto	l3299
  1852                           
  1853                           ;main.c: 392: {
  1854                           ;main.c: 393: lockLedStep = 0;
  1855  00A3  01C2               	clrf	_lockLedStep
  1856                           
  1857                           ;main.c: 394: }
  1858  00A4  28AB               	goto	l3301
  1859  00A5                     l3299:	
  1860                           
  1861                           ;main.c: 395: else
  1862                           ;main.c: 396: {
  1863                           ;main.c: 397: lockLedStep = (prePwStep/14) - 1;
  1864  00A5  300E               	movlw	14
  1865  00A6  00F3               	movwf	___lbdiv@divisor
  1866  00A7  0877               	movf	_prePwStep,w
  1867  00A8  258E               	fcall	___lbdiv
  1868  00A9  3EFF               	addlw	255
  1869  00AA  00C2               	movwf	_lockLedStep
  1870  00AB                     l3301:	
  1871                           
  1872                           ;main.c: 398: }
  1873                           ;main.c: 399: if(batADValue > 1545 || outADValue > (chrgMaxAD))
  1874  00AB  3006               	movlw	6
  1875  00AC  022D               	subwf	_batADValue+1,w
  1876  00AD  300A               	movlw	10
  1877  00AE  1903               	skipnz
  1878  00AF  022C               	subwf	_batADValue,w
  1879  00B0  1803               	skipnc
  1880  00B1  28BD               	goto	l3305
  1881  00B2  083F               	movf	_chrgMaxAD,w
  1882  00B3  00D7               	movwf	??_chrgCtr
  1883  00B4  01D8               	clrf	??_chrgCtr+1
  1884  00B5  082F               	movf	_outADValue+1,w
  1885  00B6  0258               	subwf	??_chrgCtr+1,w
  1886  00B7  1D03               	skipz
  1887  00B8  28BB               	goto	u3715
  1888  00B9  082E               	movf	_outADValue,w
  1889  00BA  0257               	subwf	??_chrgCtr,w
  1890  00BB                     u3715:	
  1891  00BB  1803               	skipnc
  1892  00BC  28CC               	goto	l3317
  1893  00BD                     l3305:	
  1894                           
  1895                           ;main.c: 400: {
  1896                           ;main.c: 401: if(++subTime > chrgWaitTime)
  1897  00BD  0ABC               	incf	_subTime,f
  1898  00BE  083C               	movf	_subTime,w
  1899  00BF  023B               	subwf	_chrgWaitTime,w
  1900  00C0  1803               	skipnc
  1901  00C1  28CA               	goto	l3315
  1902                           
  1903                           ;main.c: 402: {
  1904                           ;main.c: 403: if(chrgMaxDuty > 1)
  1905  00C2  3002               	movlw	2
  1906  00C3  023A               	subwf	_chrgMaxDuty,w
  1907  00C4  1C03               	skipc
  1908  00C5  28C7               	goto	l3311
  1909                           
  1910                           ;main.c: 404: {
  1911                           ;main.c: 405: chrgMaxDuty--;
  1912  00C6  03BA               	decf	_chrgMaxDuty,f
  1913  00C7                     l3311:	
  1914  00C7  3032               	movlw	50
  1915                           
  1916                           ;main.c: 406: }
  1917                           ;main.c: 407: subTime = 0;
  1918  00C8  01BC               	clrf	_subTime
  1919                           
  1920                           ;main.c: 408: chrgWaitTime = 50;
  1921  00C9  00BB               	movwf	_chrgWaitTime
  1922  00CA                     l3315:	
  1923                           
  1924                           ;main.c: 409: }
  1925                           ;main.c: 410: addTime = 0;
  1926  00CA  01BD               	clrf	_addTime
  1927                           
  1928                           ;main.c: 411: }
  1929  00CB  28EC               	goto	l3331
  1930  00CC                     l3317:	
  1931                           
  1932                           ;main.c: 412: else if(batADValue < 1545 && outADValue < (chrgMaxAD - 4))
  1933  00CC  3006               	movlw	6
  1934  00CD  022D               	subwf	_batADValue+1,w
  1935  00CE  3009               	movlw	9
  1936  00CF  1903               	skipnz
  1937  00D0  022C               	subwf	_batADValue,w
  1938  00D1  1803               	skipnc
  1939  00D2  28EC               	goto	l3331
  1940  00D3  083F               	movf	_chrgMaxAD,w
  1941  00D4  3EFC               	addlw	252
  1942  00D5  00D7               	movwf	??_chrgCtr
  1943  00D6  30FF               	movlw	255
  1944  00D7  1803               	skipnc
  1945  00D8  3000               	movlw	0
  1946  00D9  00D8               	movwf	??_chrgCtr+1
  1947  00DA  022F               	subwf	_outADValue+1,w
  1948  00DB  1D03               	skipz
  1949  00DC  28DF               	goto	u3755
  1950  00DD  0857               	movf	??_chrgCtr,w
  1951  00DE  022E               	subwf	_outADValue,w
  1952  00DF                     u3755:	
  1953  00DF  1803               	skipnc
  1954  00E0  28EC               	goto	l3331
  1955                           
  1956                           ;main.c: 413: {
  1957                           ;main.c: 414: if(++addTime > chrgWaitTime)
  1958  00E1  0ABD               	incf	_addTime,f
  1959  00E2  083D               	movf	_addTime,w
  1960  00E3  023B               	subwf	_chrgWaitTime,w
  1961  00E4  1803               	skipnc
  1962  00E5  28EB               	goto	l3329
  1963  00E6  304B               	movlw	75
  1964                           
  1965                           ;main.c: 415: {
  1966                           ;main.c: 416: addTime = 0;
  1967  00E7  01BD               	clrf	_addTime
  1968                           
  1969                           ;main.c: 417: if(chrgMaxDuty < 75)
  1970  00E8  023A               	subwf	_chrgMaxDuty,w
  1971  00E9  1C03               	btfss	3,0
  1972                           
  1973                           ;main.c: 418: {
  1974                           ;main.c: 419: chrgMaxDuty++;
  1975  00EA  0ABA               	incf	_chrgMaxDuty,f
  1976  00EB                     l3329:	
  1977                           
  1978                           ;main.c: 420: }
  1979                           ;main.c: 421: }
  1980                           ;main.c: 422: subTime = 0;
  1981  00EB  01BC               	clrf	_subTime
  1982  00EC                     l3331:	
  1983                           
  1984                           ;main.c: 423: }
  1985                           ;main.c: 426: if((PWMCON0 & 0x01) == 0)
  1986  00EC  1815               	btfsc	21,0	;volatile
  1987  00ED  28EF               	goto	l3335
  1988                           
  1989                           ;main.c: 427: {
  1990                           ;main.c: 428: chrgPwmInit();
  1991  00EE  25A9               	fcall	_chrgPwmInit
  1992  00EF                     l3335:	
  1993                           
  1994                           ;main.c: 429: }
  1995                           ;main.c: 430: PWMD01H = 0X00;
  1996  00EF  019E               	clrf	30	;volatile
  1997                           
  1998                           ;main.c: 431: PWMD0L = chrgMaxDuty;
  1999  00F0  083A               	movf	_chrgMaxDuty,w
  2000  00F1  0099               	movwf	25	;volatile
  2001  00F2  0008               	return
  2002  00F3                     l3339:	
  2003  00F3  3014               	movlw	20
  2004                           
  2005                           ;main.c: 437: chrgFlag = 0;
  2006  00F4  01FA               	clrf	_chrgFlag
  2007                           
  2008                           ;main.c: 438: chrgFullFlag = 0;
  2009  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  2010  00F6  01D2               	clrf	_chrgFullFlag
  2011                           
  2012                           ;main.c: 439: protectFlag = 0;
  2013  00F7  01CF               	clrf	_protectFlag
  2014                           
  2015                           ;main.c: 440: chrgMode = 0;
  2016  00F8  01C0               	clrf	_chrgMode
  2017                           
  2018                           ;main.c: 441: chrgMaxAD = 0;
  2019  00F9  01BF               	clrf	_chrgMaxAD
  2020                           
  2021                           ;main.c: 442: chrgMaxDuty = 0;
  2022  00FA  01BA               	clrf	_chrgMaxDuty
  2023                           
  2024                           ;main.c: 443: lockCount = 0;
  2025  00FB  01BE               	clrf	_lockCount
  2026                           
  2027                           ;main.c: 444: lockLedStep = 0;
  2028  00FC  01C2               	clrf	_lockLedStep
  2029                           
  2030                           ;main.c: 445: chrgWaitTime = 20;
  2031  00FD  00BB               	movwf	_chrgWaitTime
  2032                           
  2033                           ;main.c: 446: chrgPwmStop();
  2034  00FE  25D6               	fcall	_chrgPwmStop
  2035                           
  2036                           ;main.c: 447: if(prePwStep > 0 && prePwStep > pwStep)
  2037  00FF  0877               	movf	_prePwStep,w
  2038  0100  1903               	btfsc	3,2
  2039  0101  290F               	goto	l3355
  2040  0102  0877               	movf	_prePwStep,w
  2041  0103  0244               	subwf	_pwStep,w
  2042  0104  1803               	skipnc
  2043  0105  290F               	goto	l3355
  2044                           
  2045                           ;main.c: 448: {
  2046                           ;main.c: 449: if(++count50s > 2000)
  2047  0106  2112               	fcall	PL6	;call to abstracted procedure
  2048  0107  1903               	skipnz
  2049  0108  022A               	subwf	_count50s,w
  2050  0109  1C03               	skipc
  2051  010A  0008               	return
  2052                           
  2053                           ;main.c: 450: {
  2054                           ;main.c: 451: count50s = 0;
  2055  010B  01AA               	clrf	_count50s
  2056  010C  01AB               	clrf	_count50s+1
  2057                           
  2058                           ;main.c: 452: prePwStep--;
  2059  010D  03F7               	decf	_prePwStep,f
  2060  010E  0008               	return
  2061  010F                     l3355:	
  2062                           
  2063                           ;main.c: 455: else
  2064                           ;main.c: 456: {
  2065                           ;main.c: 457: count50s = 0;
  2066  010F  01AA               	clrf	_count50s
  2067  0110  01AB               	clrf	_count50s+1
  2068  0111  0008               	return
  2069  0112                     __end_of_chrgCtr:	
  2070  0112                     PL6:	
  2071  0112  0AAA               	incf	_count50s,f
  2072  0113  1903               	skipnz
  2073  0114  0AAB               	incf	_count50s+1,f
  2074  0115  3007               	movlw	7
  2075  0116  022B               	subwf	_count50s+1,w
  2076  0117  34D1               	retlw	209
  2077  0118                     __end_ofPL6:	
  2078                           
  2079                           	psect	text10
  2080  05D6                     __ptext10:	
  2081 ;; *************** function _chrgPwmStop *****************
  2082 ;; Defined at:
  2083 ;;		line 904 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;		None
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;		None
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		None
  2092 ;; Tracked objects:
  2093 ;;		On entry : 100/0
  2094 ;;		On exit  : 100/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMMON   BANK0   BANK1
  2097 ;;      Params:         0       0       0
  2098 ;;      Locals:         0       0       0
  2099 ;;      Temps:          0       0       0
  2100 ;;      Totals:         0       0       0
  2101 ;;Total ram usage:        0 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    2
  2104 ;; This function calls:
  2105 ;;		Nothing
  2106 ;; This function is called by:
  2107 ;;		_chrgCtr
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           
  2112                           ;psect for function _chrgPwmStop
  2113  05D6                     _chrgPwmStop:	
  2114  05D6                     l2155:	
  2115                           ;incstack = 0
  2116                           ; Regs used in _chrgPwmStop: []
  2117                           
  2118                           
  2119                           ;main.c: 906: PWMCON0 &= 0xFE;
  2120  05D6  1015               	bcf	21,0	;volatile
  2121                           
  2122                           ;main.c: 907: RB0 = 0;
  2123  05D7  1006               	bcf	6,0	;volatile
  2124  05D8  0008               	return
  2125  05D9                     __end_of_chrgPwmStop:	
  2126                           
  2127                           	psect	text11
  2128  05A9                     __ptext11:	
  2129 ;; *************** function _chrgPwmInit *****************
  2130 ;; Defined at:
  2131 ;;		line 887 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;		None
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;		None
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      void 
  2138 ;; Registers used:
  2139 ;;		wreg, status,2
  2140 ;; Tracked objects:
  2141 ;;		On entry : 100/0
  2142 ;;		On exit  : 100/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMMON   BANK0   BANK1
  2145 ;;      Params:         0       0       0
  2146 ;;      Locals:         0       0       0
  2147 ;;      Temps:          0       0       0
  2148 ;;      Totals:         0       0       0
  2149 ;;Total ram usage:        0 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    2
  2152 ;; This function calls:
  2153 ;;		Nothing
  2154 ;; This function is called by:
  2155 ;;		_chrgCtr
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           
  2160                           ;psect for function _chrgPwmInit
  2161  05A9                     _chrgPwmInit:	
  2162                           
  2163                           ;main.c: 889: PWMCON1 = 0B00000000;
  2164                           
  2165                           ;incstack = 0
  2166                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2167                           
  2168                           ;main.c: 891: PWMTH = 0X00;
  2169                           
  2170                           ;main.c: 892: PWMTL = 100;
  2171                           
  2172                           ;main.c: 896: PWMD01H = 0;
  2173  05A9  25B0               	fcall	PL8	;call to abstracted procedure
  2174                           
  2175                           ;main.c: 897: PWMD0L = 1;
  2176  05AA  3001               	movlw	1
  2177  05AB  0099               	movwf	25	;volatile
  2178                           
  2179                           ;main.c: 898: PWM01DT = 0X00;
  2180  05AC  019F               	clrf	31	;volatile
  2181                           
  2182                           ;main.c: 900: PWMCON0 = 0X01;
  2183  05AD  0095               	movwf	21	;volatile
  2184                           
  2185                           ;main.c: 901: PWMCON2 =0X00;
  2186  05AE  019D               	clrf	29	;volatile
  2187  05AF  0008               	return
  2188  05B0                     __end_of_chrgPwmInit:	
  2189  05B0                     PL8:	
  2190  05B0  0196               	clrf	22	;volatile
  2191  05B1  0198               	clrf	24	;volatile
  2192  05B2  3064               	movlw	100
  2193  05B3  0097               	movwf	23	;volatile
  2194  05B4  019E               	clrf	30	;volatile
  2195  05B5  0008               	return
  2196  05B6                     __end_ofPL8:	
  2197                           
  2198                           	psect	text12
  2199  058E                     __ptext12:	
  2200 ;; *************** function ___lbdiv *****************
  2201 ;; Defined at:
  2202 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;  dividend        1    wreg     unsigned char 
  2205 ;;  divisor         1    3[COMMON] unsigned char 
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;  dividend        1    4[COMMON] unsigned char 
  2208 ;;  quotient        1    6[COMMON] unsigned char 
  2209 ;;  counter         1    5[COMMON] unsigned char 
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  1    wreg      unsigned char 
  2212 ;; Registers used:
  2213 ;;		wreg, status,2, status,0
  2214 ;; Tracked objects:
  2215 ;;		On entry : 100/0
  2216 ;;		On exit  : 100/0
  2217 ;;		Unchanged: 100/0
  2218 ;; Data sizes:     COMMON   BANK0   BANK1
  2219 ;;      Params:         1       0       0
  2220 ;;      Locals:         3       0       0
  2221 ;;      Temps:          0       0       0
  2222 ;;      Totals:         4       0       0
  2223 ;;Total ram usage:        4 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    2
  2226 ;; This function calls:
  2227 ;;		Nothing
  2228 ;; This function is called by:
  2229 ;;		_ledCtr
  2230 ;;		_chrgCtr
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           
  2235                           ;psect for function ___lbdiv
  2236  058E                     ___lbdiv:	
  2237                           
  2238                           ;incstack = 0
  2239                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2240                           ;___lbdiv@dividend stored from wreg
  2241  058E  00F4               	movwf	___lbdiv@dividend
  2242  058F  01F6               	clrf	___lbdiv@quotient
  2243  0590  0873               	movf	___lbdiv@divisor,w
  2244  0591  1903               	btfsc	3,2
  2245  0592  2DA7               	goto	l2311
  2246  0593  01F5               	clrf	___lbdiv@counter
  2247  0594                     l2297:	
  2248  0594  0AF5               	incf	___lbdiv@counter,f
  2249  0595  1BF3               	btfsc	___lbdiv@divisor,7
  2250  0596  2D9A               	goto	l1159
  2251  0597  1003               	clrc
  2252  0598  0DF3               	rlf	___lbdiv@divisor,f
  2253  0599  2D94               	goto	l2297
  2254  059A                     l1159:	
  2255  059A  1003               	clrc
  2256  059B  0DF6               	rlf	___lbdiv@quotient,f
  2257  059C  0873               	movf	___lbdiv@divisor,w
  2258  059D  0274               	subwf	___lbdiv@dividend,w
  2259  059E  1C03               	skipc
  2260  059F  2DA4               	goto	L7
  2261  05A0  0873               	movf	___lbdiv@divisor,w
  2262  05A1  02F4               	subwf	___lbdiv@dividend,f
  2263  05A2  1476               	bsf	___lbdiv@quotient,0
  2264  05A3  1003               	clrc
  2265  05A4                     L7:	
  2266  05A4  0CF3               	rrf	___lbdiv@divisor,f
  2267  05A5  0BF5               	decfsz	___lbdiv@counter,f
  2268  05A6  2D9A               	goto	l1159
  2269  05A7                     l2311:	
  2270  05A7  0876               	movf	___lbdiv@quotient,w
  2271  05A8  0008               	return
  2272  05A9                     __end_of___lbdiv:	
  2273                           
  2274                           	psect	text13
  2275  0201                     __ptext13:	
  2276 ;; *************** function _checkOutA *****************
  2277 ;; Defined at:
  2278 ;;		line 580 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;		None
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;  maxAout         1   18[BANK0 ] unsigned char 
  2283 ;;  maxtempV        1    0        unsigned char 
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  1    wreg      void 
  2286 ;; Registers used:
  2287 ;;		wreg, status,2, status,0, pclath, cstack
  2288 ;; Tracked objects:
  2289 ;;		On entry : 100/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMMON   BANK0   BANK1
  2293 ;;      Params:         0       0       0
  2294 ;;      Locals:         0       2       0
  2295 ;;      Temps:          2       0       0
  2296 ;;      Totals:         2       2       0
  2297 ;;Total ram usage:        4 bytes
  2298 ;; Hardware stack levels used:    1
  2299 ;; Hardware stack levels required when called:    3
  2300 ;; This function calls:
  2301 ;;		_ADC_Sample
  2302 ;; This function is called by:
  2303 ;;		_main
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           
  2308                           ;psect for function _checkOutA
  2309  0201                     _checkOutA:	
  2310                           
  2311                           ;main.c: 582: if(chrgFlag)
  2312                           
  2313                           ;incstack = 0
  2314                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2315  0201  087A               	movf	_chrgFlag,w
  2316                           
  2317                           ;main.c: 583: {
  2318                           ;main.c: 584: test_adc = ADC_Sample(4, 5);
  2319  0202  3005               	movlw	5
  2320  0203  00F3               	movwf	ADC_Sample@adldo
  2321  0204  1903               	btfsc	3,2
  2322  0205  2A08               	goto	L16
  2323  0206  3004               	movlw	4
  2324  0207  2A09               	goto	L9
  2325  0208                     L16:	
  2326                           ;main.c: 586: else
  2327                           ;main.c: 587: {
  2328                           ;main.c: 588: test_adc = ADC_Sample(0, 5);
  2329                           
  2330                           ;main.c: 585: }
  2331                           
  2332  0208  3000               	movlw	0
  2333  0209                     L9:	
  2334  0209  2118               	fcall	_ADC_Sample
  2335  020A  00D6               	movwf	_test_adc	;volatile
  2336                           
  2337                           ;main.c: 589: }
  2338                           ;main.c: 590: if (0xA5 == test_adc)
  2339  020B  30A5               	movlw	165
  2340  020C  0656               	xorwf	_test_adc,w	;volatile
  2341  020D  1D03               	btfss	3,2
  2342  020E  2AA9               	goto	l3201
  2343                           
  2344                           ;main.c: 591: {
  2345                           ;main.c: 592: if(chrgFlag && adresult > 210)
  2346  020F  087A               	movf	_chrgFlag,w
  2347  0210  1903               	btfsc	3,2
  2348  0211  2A22               	goto	l3119
  2349  0212  3000               	movlw	0
  2350  0213  0235               	subwf	_adresult+1,w	;volatile
  2351  0214  30D3               	movlw	211
  2352  0215  1903               	skipnz
  2353  0216  0234               	subwf	_adresult,w	;volatile
  2354  0217  1C03               	skipc
  2355  0218  2A22               	goto	l3119
  2356                           
  2357                           ;main.c: 593: {
  2358                           ;main.c: 594: if(++overChrgTime > 10)
  2359  0219  300B               	movlw	11
  2360  021A  0AC5               	incf	_overChrgTime,f
  2361  021B  0245               	subwf	_overChrgTime,w
  2362  021C  1C03               	skipc
  2363  021D  2A23               	goto	l3121
  2364  021E  3002               	movlw	2
  2365                           
  2366                           ;main.c: 595: {
  2367                           ;main.c: 596: overChrgTime = 0;
  2368  021F  01C5               	clrf	_overChrgTime
  2369                           
  2370                           ;main.c: 597: protectFlag = 2;
  2371  0220  00CF               	movwf	_protectFlag
  2372  0221  2A23               	goto	l3121
  2373  0222                     l3119:	
  2374                           
  2375                           ;main.c: 601: else
  2376                           ;main.c: 602: {
  2377                           ;main.c: 603: overChrgTime = 0;
  2378  0222  01C5               	clrf	_overChrgTime
  2379  0223                     l3121:	
  2380                           
  2381                           ;main.c: 604: }
  2382                           ;main.c: 605: outADValue = adresult;
  2383  0223  0835               	movf	_adresult+1,w	;volatile
  2384  0224  00AF               	movwf	_outADValue+1
  2385  0225  0834               	movf	_adresult,w	;volatile
  2386  0226  00AE               	movwf	_outADValue
  2387                           
  2388                           ;main.c: 607: if(workStep && (outADValue > 220))
  2389  0227  0879               	movf	_workStep,w
  2390  0228  1903               	btfsc	3,2
  2391  0229  2A39               	goto	l3131
  2392  022A  3000               	movlw	0
  2393  022B  022F               	subwf	_outADValue+1,w
  2394  022C  30DD               	movlw	221
  2395  022D  1903               	skipnz
  2396  022E  022E               	subwf	_outADValue,w
  2397  022F  1C03               	skipc
  2398  0230  2A39               	goto	l3131
  2399                           
  2400                           ;main.c: 608: {
  2401                           ;main.c: 609: if(++workOverOutTime > 50)
  2402  0231  3033               	movlw	51
  2403  0232  0ACE               	incf	_workOverOutTime,f
  2404  0233  024E               	subwf	_workOverOutTime,w
  2405  0234  1C03               	skipc
  2406  0235  2A3A               	goto	l3135
  2407                           
  2408                           ;main.c: 610: {
  2409                           ;main.c: 611: workOverOutTime = 0;
  2410  0236  01CE               	clrf	_workOverOutTime
  2411                           
  2412                           ;main.c: 612: workStep = 0;
  2413  0237  01F9               	clrf	_workStep
  2414  0238  2A3A               	goto	l3135
  2415  0239                     l3131:	
  2416                           
  2417                           ;main.c: 615: else
  2418                           ;main.c: 616: {
  2419                           ;main.c: 617: workOverOutTime = 0;
  2420  0239  01CE               	clrf	_workOverOutTime
  2421  023A                     l3135:	
  2422                           
  2423                           ;main.c: 620: if(workStep < 6 && outADValue > maxtempV)
  2424  023A  3006               	movlw	6
  2425  023B  0279               	subwf	_workStep,w
  2426  023C  3000               	movlw	0
  2427  023D  1803               	skipnc
  2428  023E  2A4E               	goto	L17
  2429  023F  022F               	subwf	_outADValue+1,w
  2430  0240  3029               	movlw	41
  2431  0241  1903               	skipnz
  2432  0242  022E               	subwf	_outADValue,w
  2433  0243  1C03               	skipc
  2434  0244  2A4D               	goto	l3143
  2435  0245                     l3139:	
  2436                           
  2437                           ;main.c: 621: {
  2438                           ;main.c: 622: if(++overCount > 5)
  2439  0245  3006               	movlw	6
  2440  0246  0AC9               	incf	_overCount,f
  2441  0247  0249               	subwf	_overCount,w
  2442  0248  1C03               	skipc
  2443  0249  2AA5               	goto	l3197
  2444                           
  2445                           ;main.c: 623: {
  2446                           ;main.c: 624: overCount = 5;
  2447  024A  3005               	movlw	5
  2448  024B  00C9               	movwf	_overCount
  2449  024C  2AA5               	goto	l3197
  2450  024D                     l3143:	
  2451                           
  2452                           ;main.c: 627: else if(outADValue > (maxtempV+3))
  2453  024D  3000               	movlw	0
  2454  024E                     L17:	
  2455  024E  022F               	subwf	_outADValue+1,w
  2456  024F  302C               	movlw	44
  2457  0250  1903               	skipnz
  2458  0251  022E               	subwf	_outADValue,w
  2459  0252  1803               	btfsc	3,0
  2460  0253  2A45               	goto	l3139
  2461                           
  2462                           ;main.c: 634: else
  2463                           ;main.c: 635: {
  2464                           ;main.c: 636: unsigned char maxAout = 11;
  2465                           
  2466                           ;main.c: 628: {
  2467                           ;main.c: 629: if(++overCount > 5)
  2468  0254  300B               	movlw	11
  2469  0255  00E9               	movwf	checkOutA@maxAout
  2470                           
  2471                           ;main.c: 637: if(workStep == 1)
  2472  0256  0B79               	decfsz	_workStep,w
  2473  0257  2A5A               	goto	l3155
  2474                           
  2475                           ;main.c: 638: {
  2476                           ;main.c: 639: maxAout = maxAout + 5;
  2477  0258  3005               	movlw	5
  2478  0259  2A77               	goto	L14
  2479  025A                     l3155:	
  2480                           ;main.c: 640: }
  2481                           
  2482                           
  2483                           ;main.c: 641: else if(workStep == 2)
  2484  025A  3002               	movlw	2
  2485  025B  0679               	xorwf	_workStep,w
  2486  025C  1D03               	btfss	3,2
  2487  025D  2A60               	goto	l3159
  2488                           
  2489                           ;main.c: 642: {
  2490                           ;main.c: 643: maxAout = maxAout + 6;
  2491  025E  3006               	movlw	6
  2492  025F  2A77               	goto	L14
  2493  0260                     l3159:	
  2494                           ;main.c: 644: }
  2495                           
  2496                           
  2497                           ;main.c: 645: else if(workStep == 3)
  2498  0260  3003               	movlw	3
  2499  0261  0679               	xorwf	_workStep,w
  2500  0262  1D03               	btfss	3,2
  2501  0263  2A66               	goto	l3163
  2502                           
  2503                           ;main.c: 646: {
  2504                           ;main.c: 647: maxAout = maxAout + 7;
  2505  0264  3007               	movlw	7
  2506  0265  2A77               	goto	L14
  2507  0266                     l3163:	
  2508                           ;main.c: 648: }
  2509                           
  2510                           
  2511                           ;main.c: 649: else if(workStep == 4)
  2512  0266  3004               	movlw	4
  2513  0267  0679               	xorwf	_workStep,w
  2514  0268  1D03               	btfss	3,2
  2515  0269  2A6C               	goto	l3167
  2516                           
  2517                           ;main.c: 650: {
  2518                           ;main.c: 651: maxAout = maxAout + 8;
  2519  026A  3008               	movlw	8
  2520  026B  2A77               	goto	L14
  2521  026C                     l3167:	
  2522                           ;main.c: 652: }
  2523                           
  2524                           
  2525                           ;main.c: 653: else if(workStep == 5)
  2526  026C  3005               	movlw	5
  2527  026D  0679               	xorwf	_workStep,w
  2528  026E  1D03               	btfss	3,2
  2529  026F  2A72               	goto	l3171
  2530                           
  2531                           ;main.c: 654: {
  2532                           ;main.c: 655: maxAout = maxAout + 9;
  2533  0270  3009               	movlw	9
  2534  0271  2A77               	goto	L14
  2535  0272                     l3171:	
  2536                           ;main.c: 656: }
  2537                           
  2538                           
  2539                           ;main.c: 657: else if(workStep == 6)
  2540  0272  3006               	movlw	6
  2541  0273  0679               	xorwf	_workStep,w
  2542  0274  1D03               	btfss	3,2
  2543  0275  2A78               	goto	l810
  2544                           
  2545                           ;main.c: 658: {
  2546                           ;main.c: 659: maxAout = maxAout + 10;
  2547  0276  300A               	movlw	10
  2548  0277                     L14:	
  2549  0277  07E9               	addwf	checkOutA@maxAout,f
  2550  0278                     l810:	
  2551                           
  2552                           ;main.c: 660: }
  2553                           ;main.c: 661: if(overCount > 0)
  2554  0278  0849               	movf	_overCount,w
  2555  0279  1D03               	btfss	3,2
  2556                           
  2557                           ;main.c: 662: {
  2558                           ;main.c: 663: overCount--;
  2559  027A  03C9               	decf	_overCount,f
  2560                           
  2561                           ;main.c: 664: }
  2562                           ;main.c: 665: if(outADValue > maxAout)
  2563  027B  0869               	movf	checkOutA@maxAout,w
  2564  027C  00F4               	movwf	??_checkOutA
  2565  027D  01F5               	clrf	??_checkOutA+1
  2566  027E  082F               	movf	_outADValue+1,w
  2567  027F  0275               	subwf	??_checkOutA+1,w
  2568  0280  1D03               	skipz
  2569  0281  2A84               	goto	u3475
  2570  0282  082E               	movf	_outADValue,w
  2571  0283  0274               	subwf	??_checkOutA,w
  2572  0284                     u3475:	
  2573  0284  1803               	skipnc
  2574  0285  2A9F               	goto	l3189
  2575                           
  2576                           ;main.c: 666: {
  2577                           ;main.c: 667: if(++addPowerCount > 3)
  2578  0286  3004               	movlw	4
  2579  0287  0AC8               	incf	_addPowerCount,f
  2580  0288  0248               	subwf	_addPowerCount,w
  2581  0289  1C03               	skipc
  2582  028A  2AA5               	goto	l3197
  2583                           
  2584                           ;main.c: 668: {
  2585                           ;main.c: 669: addPowerCount = 3;
  2586  028B  3003               	movlw	3
  2587  028C  00C8               	movwf	_addPowerCount
  2588                           
  2589                           ;main.c: 670: if(startTime == 0)
  2590  028D  0846               	movf	_startTime,w
  2591  028E  1D03               	btfss	3,2
  2592  028F  2A9C               	goto	l3187
  2593                           
  2594                           ;main.c: 671: {
  2595                           ;main.c: 672: tempDuty = 72 + (workStep*4);
  2596  0290  0879               	movf	_workStep,w
  2597  0291  00F4               	movwf	??_checkOutA
  2598  0292  3001               	movlw	1
  2599  0293  1003               	clrc
  2600  0294                     L8:	
  2601  0294  0DF4               	rlf	??_checkOutA,f
  2602  0295  3EFF               	addlw	-1
  2603  0296  1003               	clrc
  2604  0297  1D03               	skipz
  2605  0298  2A94               	goto	L8
  2606  0299  0D74               	rlf	??_checkOutA,w
  2607  029A  3E48               	addlw	72
  2608  029B  2A9D               	goto	L15
  2609  029C                     l3187:	
  2610                           ;main.c: 674: }
  2611                           
  2612                           
  2613                           ;main.c: 675: else
  2614                           ;main.c: 676: {
  2615                           ;main.c: 677: tempDuty = maxDuty;
  2616  029C  084A               	movf	_maxDuty,w
  2617  029D                     L15:	
  2618  029D  00C7               	movwf	_tempDuty
  2619  029E  2AA5               	goto	l3197
  2620  029F                     l3189:	
  2621                           
  2622                           ;main.c: 682: else
  2623                           ;main.c: 683: {
  2624                           ;main.c: 684: addPowerCount = 0;
  2625  029F  01C8               	clrf	_addPowerCount
  2626                           
  2627                           ;main.c: 685: if(tempDuty > maxDuty)
  2628  02A0  0847               	movf	_tempDuty,w
  2629  02A1  024A               	subwf	_maxDuty,w
  2630  02A2  1803               	skipnc
  2631  02A3  2A9C               	goto	l3187
  2632                           
  2633                           ;main.c: 686: {
  2634                           ;main.c: 687: tempDuty--;
  2635  02A4  03C7               	decf	_tempDuty,f
  2636  02A5                     l3197:	
  2637                           ;main.c: 688: }
  2638                           
  2639                           
  2640                           ;main.c: 692: }
  2641                           ;main.c: 694: }
  2642                           ;main.c: 696: }
  2643                           ;main.c: 697: PWMD01H = 0X00;
  2644  02A5  019E               	clrf	30	;volatile
  2645                           
  2646                           ;main.c: 698: PWMD1L = tempDuty;
  2647  02A6  0847               	movf	_tempDuty,w
  2648  02A7  009A               	movwf	26	;volatile
  2649                           
  2650                           ;main.c: 699: }
  2651  02A8  0008               	return
  2652  02A9                     l3201:	
  2653                           
  2654                           ;main.c: 700: else
  2655                           ;main.c: 701: {
  2656                           ;main.c: 702: ADCON0 = 0;
  2657  02A9  1683               	bsf	3,5	;RP0=1, select bank1
  2658  02AA  0195               	clrf	21	;volatile
  2659                           
  2660                           ;main.c: 703: ADCON1 = 0;
  2661  02AB  0196               	clrf	22	;volatile
  2662                           
  2663                           ;main.c: 704: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2664  02AC  3085               	movlw	133
  2665  02AD  00F4               	movwf	??_checkOutA
  2666  02AE                     u4207:	
  2667  02AE  0BF4               	decfsz	??_checkOutA,f
  2668  02AF  2AAE               	goto	u4207
  2669  02B0  0008               	return
  2670  02B1                     __end_of_checkOutA:	
  2671                           
  2672                           	psect	text14
  2673  02B1                     __ptext14:	
  2674 ;; *************** function _checkBatAD *****************
  2675 ;; Defined at:
  2676 ;;		line 708 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
  2677 ;; Parameters:    Size  Location     Type
  2678 ;;		None
  2679 ;; Auto vars:     Size  Location     Type
  2680 ;;		None
  2681 ;; Return value:  Size  Location     Type
  2682 ;;                  1    wreg      void 
  2683 ;; Registers used:
  2684 ;;		wreg, status,2, status,0, pclath, cstack
  2685 ;; Tracked objects:
  2686 ;;		On entry : 100/0
  2687 ;;		On exit  : 0/0
  2688 ;;		Unchanged: 0/0
  2689 ;; Data sizes:     COMMON   BANK0   BANK1
  2690 ;;      Params:         0       0       0
  2691 ;;      Locals:         0       0       0
  2692 ;;      Temps:          2       0       0
  2693 ;;      Totals:         2       0       0
  2694 ;;Total ram usage:        2 bytes
  2695 ;; Hardware stack levels used:    1
  2696 ;; Hardware stack levels required when called:    3
  2697 ;; This function calls:
  2698 ;;		_ADC_Sample
  2699 ;; This function is called by:
  2700 ;;		_main
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           
  2705                           ;psect for function _checkBatAD
  2706  02B1                     _checkBatAD:	
  2707                           
  2708                           ;main.c: 710: test_adc = ADC_Sample(2, 5);
  2709                           
  2710                           ;incstack = 0
  2711                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2712  02B1  3005               	movlw	5
  2713  02B2  00F3               	movwf	ADC_Sample@adldo
  2714  02B3  3002               	movlw	2
  2715  02B4  2118               	fcall	_ADC_Sample
  2716  02B5  00D6               	movwf	_test_adc	;volatile
  2717                           
  2718                           ;main.c: 711: if (0xA5 == test_adc)
  2719  02B6  30A5               	movlw	165
  2720  02B7  0656               	xorwf	_test_adc,w	;volatile
  2721  02B8  1D03               	btfss	3,2
  2722  02B9  2B19               	goto	l3397
  2723                           
  2724                           ;main.c: 712: {
  2725                           ;main.c: 713: batADValue = adresult;
  2726  02BA  0835               	movf	_adresult+1,w	;volatile
  2727  02BB  00AD               	movwf	_batADValue+1
  2728  02BC  0834               	movf	_adresult,w	;volatile
  2729  02BD  00AC               	movwf	_batADValue
  2730                           
  2731                           ;main.c: 714: if(batADValue < 1117)
  2732  02BE  3004               	movlw	4
  2733  02BF  022D               	subwf	_batADValue+1,w
  2734  02C0  305D               	movlw	93
  2735  02C1  1903               	skipnz
  2736  02C2  022C               	subwf	_batADValue,w
  2737  02C3  1803               	skipnc
  2738  02C4  2ADF               	goto	l3379
  2739                           
  2740                           ;main.c: 715: {
  2741                           ;main.c: 716: pwStep = 0;
  2742  02C5  01C4               	clrf	_pwStep
  2743                           
  2744                           ;main.c: 717: if(++count8s > 800)
  2745  02C6  0AA2               	incf	_count8s,f
  2746  02C7  1903               	skipnz
  2747  02C8  0AA3               	incf	_count8s+1,f
  2748  02C9  3003               	movlw	3
  2749  02CA  0223               	subwf	_count8s+1,w
  2750  02CB  3021               	movlw	33
  2751  02CC  1903               	skipnz
  2752  02CD  0222               	subwf	_count8s,w
  2753  02CE  1C03               	skipc
  2754  02CF  2B0C               	goto	l3391
  2755                           
  2756                           ;main.c: 718: {
  2757                           ;main.c: 719: count8s = 0;
  2758  02D0  01A2               	clrf	_count8s
  2759  02D1  01A3               	clrf	_count8s+1
  2760                           
  2761                           ;main.c: 720: lowBatFlag = 1;
  2762  02D2  01B7               	clrf	_lowBatFlag
  2763  02D3  0AB7               	incf	_lowBatFlag,f
  2764                           
  2765                           ;main.c: 721: if(workStep > 0)
  2766  02D4  0879               	movf	_workStep,w
  2767  02D5  1903               	btfsc	3,2
  2768  02D6  2ADC               	goto	l3375
  2769                           
  2770                           ;main.c: 722: {
  2771                           ;main.c: 723: overWorkTime = 120;
  2772  02D7  3078               	movlw	120
  2773  02D8  00A4               	movwf	_overWorkTime
  2774  02D9  01A5               	clrf	_overWorkTime+1
  2775                           
  2776                           ;main.c: 724: preLedStep = workStep;
  2777  02DA  0879               	movf	_workStep,w
  2778  02DB  00B8               	movwf	_preLedStep
  2779  02DC                     l3375:	
  2780                           
  2781                           ;main.c: 725: }
  2782                           ;main.c: 726: prePwStep = 0;
  2783  02DC  01F7               	clrf	_prePwStep
  2784                           
  2785                           ;main.c: 727: workStep = 0;
  2786  02DD  01F9               	clrf	_workStep
  2787  02DE  2B0C               	goto	l3391
  2788  02DF                     l3379:	
  2789  02DF  3005               	movlw	5
  2790                           
  2791                           ;main.c: 730: else
  2792                           ;main.c: 731: {
  2793                           ;main.c: 732: count8s = 0;
  2794  02E0  01A2               	clrf	_count8s
  2795  02E1  01A3               	clrf	_count8s+1
  2796                           
  2797                           ;main.c: 733: if(batADValue >= 1340)
  2798  02E2  022D               	subwf	_batADValue+1,w
  2799  02E3  303C               	movlw	60
  2800  02E4  1903               	skipnz
  2801  02E5  022C               	subwf	_batADValue,w
  2802                           
  2803                           ;main.c: 734: {
  2804                           ;main.c: 735: pwStep = ((batADValue - 1340) /2) + 13;
  2805  02E6  082C               	movf	_batADValue,w
  2806  02E7  1C03               	skipc
  2807  02E8  2AF6               	goto	L19
  2808  02E9  3EC4               	addlw	196
  2809  02EA  00F4               	movwf	??_checkBatAD
  2810  02EB  082D               	movf	_batADValue+1,w
  2811  02EC  1803               	skipnc
  2812  02ED  3E01               	addlw	1
  2813  02EE  3EFA               	addlw	250
  2814  02EF  00F5               	movwf	??_checkBatAD+1
  2815  02F0  1003               	clrc
  2816  02F1  0CF5               	rrf	??_checkBatAD+1,f
  2817  02F2  0CF4               	rrf	??_checkBatAD,f
  2818  02F3  0874               	movf	??_checkBatAD,w
  2819  02F4  3E0D               	addlw	13
  2820  02F5  2B05               	goto	L18
  2821  02F6                     L19:	
  2822                           ;main.c: 737: else
  2823                           ;main.c: 738: {
  2824                           ;main.c: 739: pwStep = (batADValue - 1117) / 16;
  2825                           
  2826                           ;main.c: 736: }
  2827                           
  2828  02F6  3EA3               	addlw	163
  2829  02F7  00F4               	movwf	??_checkBatAD
  2830  02F8  082D               	movf	_batADValue+1,w
  2831  02F9  1803               	skipnc
  2832  02FA  3E01               	addlw	1
  2833  02FB  3EFB               	addlw	251
  2834  02FC  00F5               	movwf	??_checkBatAD+1
  2835  02FD  3004               	movlw	4
  2836  02FE                     u3875:	
  2837  02FE  1003               	clrc
  2838  02FF  0CF5               	rrf	??_checkBatAD+1,f
  2839  0300  0CF4               	rrf	??_checkBatAD,f
  2840  0301  3EFF               	addlw	-1
  2841  0302  1D03               	skipz
  2842  0303  2AFE               	goto	u3875
  2843  0304  0874               	movf	??_checkBatAD,w
  2844  0305                     L18:	
  2845  0305  00C4               	movwf	_pwStep
  2846                           
  2847                           ;main.c: 740: }
  2848                           ;main.c: 741: if(pwStep > 99)
  2849  0306  3064               	movlw	100
  2850  0307  0244               	subwf	_pwStep,w
  2851  0308  1C03               	skipc
  2852  0309  2B0C               	goto	l3391
  2853                           
  2854                           ;main.c: 742: {
  2855                           ;main.c: 743: pwStep = 99;
  2856  030A  3063               	movlw	99
  2857  030B  00C4               	movwf	_pwStep
  2858  030C                     l3391:	
  2859                           
  2860                           ;main.c: 744: }
  2861                           ;main.c: 745: }
  2862                           ;main.c: 746: if(chrgFlag && batADValue > 1861)
  2863  030C  087A               	movf	_chrgFlag,w
  2864  030D  1903               	btfsc	3,2
  2865  030E  2B20               	goto	l3401
  2866  030F  3007               	movlw	7
  2867  0310  022D               	subwf	_batADValue+1,w
  2868  0311  3046               	movlw	70
  2869  0312  1903               	skipnz
  2870  0313  022C               	subwf	_batADValue,w
  2871  0314  1C03               	skipc
  2872  0315  2B20               	goto	l3401
  2873                           
  2874                           ;main.c: 747: {
  2875                           ;main.c: 748: protectFlag = 1;
  2876  0316  01CF               	clrf	_protectFlag
  2877  0317  0ACF               	incf	_protectFlag,f
  2878  0318  2B20               	goto	l3401
  2879  0319                     l3397:	
  2880                           
  2881                           ;main.c: 751: else
  2882                           ;main.c: 752: {
  2883                           ;main.c: 753: ADCON0 = 0;
  2884  0319  1683               	bsf	3,5	;RP0=1, select bank1
  2885  031A  0195               	clrf	21	;volatile
  2886                           
  2887                           ;main.c: 754: ADCON1 = 0;
  2888  031B  0196               	clrf	22	;volatile
  2889                           
  2890                           ;main.c: 755: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2891  031C  3085               	movlw	133
  2892  031D  00F4               	movwf	??_checkBatAD
  2893  031E                     u4217:	
  2894  031E  0BF4               	decfsz	??_checkBatAD,f
  2895  031F  2B1E               	goto	u4217
  2896  0320                     l3401:	
  2897                           
  2898                           ;main.c: 756: }
  2899                           ;main.c: 757: test_adc = ADC_Sample(3, 5);
  2900  0320  3005               	movlw	5
  2901  0321  00F3               	movwf	ADC_Sample@adldo
  2902  0322  3003               	movlw	3
  2903  0323  2118               	fcall	_ADC_Sample
  2904  0324  00D6               	movwf	_test_adc	;volatile
  2905                           
  2906                           ;main.c: 758: if (0xA5 == test_adc)
  2907  0325  30A5               	movlw	165
  2908  0326  0656               	xorwf	_test_adc,w	;volatile
  2909  0327  1D03               	btfss	3,2
  2910  0328  2B54               	goto	l3421
  2911                           
  2912                           ;main.c: 759: {
  2913                           ;main.c: 760: if(chrgFlag && adresult > 100)
  2914  0329  087A               	movf	_chrgFlag,w
  2915  032A  1903               	btfsc	3,2
  2916  032B  0008               	return
  2917  032C  3000               	movlw	0
  2918  032D  0235               	subwf	_adresult+1,w	;volatile
  2919  032E  3065               	movlw	101
  2920  032F  1903               	skipnz
  2921  0330  0234               	subwf	_adresult,w	;volatile
  2922  0331  1C03               	skipc
  2923  0332  0008               	return
  2924                           
  2925                           ;main.c: 761: {
  2926                           ;main.c: 763: if(adresult > 810 || (batADValue - adresult) > 810)
  2927  0333  3003               	movlw	3
  2928  0334  0235               	subwf	_adresult+1,w	;volatile
  2929  0335  302B               	movlw	43
  2930  0336  1903               	skipnz
  2931  0337  0234               	subwf	_adresult,w	;volatile
  2932  0338  1803               	skipnc
  2933  0339  2B49               	goto	l3413
  2934  033A  0834               	movf	_adresult,w	;volatile
  2935  033B  022C               	subwf	_batADValue,w
  2936  033C  00F4               	movwf	??_checkBatAD
  2937  033D  0835               	movf	_adresult+1,w	;volatile
  2938  033E  1C03               	skipc
  2939  033F  0A35               	incf	_adresult+1,w	;volatile
  2940  0340  022D               	subwf	_batADValue+1,w
  2941  0341  00F5               	movwf	??_checkBatAD+1
  2942  0342  3003               	movlw	3
  2943  0343  0275               	subwf	??_checkBatAD+1,w
  2944  0344  302B               	movlw	43
  2945  0345  1903               	skipnz
  2946  0346  0274               	subwf	??_checkBatAD,w
  2947  0347  1C03               	skipc
  2948  0348  2B52               	goto	l3419
  2949  0349                     l3413:	
  2950                           
  2951                           ;main.c: 764: {
  2952                           ;main.c: 766: if(++countHalfFull > 250)
  2953  0349  30FB               	movlw	251
  2954  034A  0AD0               	incf	_countHalfFull,f
  2955  034B  0250               	subwf	_countHalfFull,w
  2956  034C  1C03               	skipc
  2957  034D  0008               	return
  2958  034E  3002               	movlw	2
  2959                           
  2960                           ;main.c: 767: {
  2961                           ;main.c: 768: countHalfFull = 0;
  2962  034F  01D0               	clrf	_countHalfFull
  2963                           
  2964                           ;main.c: 769: protectFlag = 2;
  2965  0350  00CF               	movwf	_protectFlag
  2966  0351  0008               	return
  2967  0352                     l3419:	
  2968                           
  2969                           ;main.c: 772: else
  2970                           ;main.c: 773: {
  2971                           ;main.c: 774: countHalfFull = 0;
  2972  0352  01D0               	clrf	_countHalfFull
  2973                           
  2974                           ;main.c: 775: }
  2975                           ;main.c: 776: }
  2976                           ;main.c: 777: }
  2977  0353  0008               	return
  2978  0354                     l3421:	
  2979                           
  2980                           ;main.c: 778: else
  2981                           ;main.c: 779: {
  2982                           ;main.c: 780: ADCON0 = 0;
  2983  0354  1683               	bsf	3,5	;RP0=1, select bank1
  2984  0355  0195               	clrf	21	;volatile
  2985                           
  2986                           ;main.c: 781: ADCON1 = 0;
  2987  0356  0196               	clrf	22	;volatile
  2988                           
  2989                           ;main.c: 782: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2990  0357  3085               	movlw	133
  2991  0358  00F4               	movwf	??_checkBatAD
  2992  0359                     u4227:	
  2993  0359  0BF4               	decfsz	??_checkBatAD,f
  2994  035A  2B59               	goto	u4227
  2995  035B  0008               	return
  2996  035C                     __end_of_checkBatAD:	
  2997                           
  2998                           	psect	text15
  2999  0118                     __ptext15:	
  3000 ;; *************** function _ADC_Sample *****************
  3001 ;; Defined at:
  3002 ;;		line 1015 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;  adch            1    wreg     unsigned char 
  3005 ;;  adldo           1    3[COMMON] unsigned char 
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;  adch            1    5[BANK0 ] unsigned char 
  3008 ;;  j               1    4[BANK0 ] unsigned char 
  3009 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  3010 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  3011 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  3012 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  3013 ;;  i               1    6[BANK0 ] unsigned char 
  3014 ;; Return value:  Size  Location     Type
  3015 ;;                  1    wreg      unsigned char 
  3016 ;; Registers used:
  3017 ;;		wreg, status,2, status,0
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 100/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMMON   BANK0   BANK1
  3023 ;;      Params:         1       0       0
  3024 ;;      Locals:         0      13       0
  3025 ;;      Temps:          0       4       0
  3026 ;;      Totals:         1      17       0
  3027 ;;Total ram usage:       18 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:    2
  3030 ;; This function calls:
  3031 ;;		Nothing
  3032 ;; This function is called by:
  3033 ;;		_checkOutA
  3034 ;;		_checkBatAD
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           
  3039                           ;psect for function _ADC_Sample
  3040  0118                     _ADC_Sample:	
  3041                           
  3042                           ;incstack = 0
  3043                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3044                           ;ADC_Sample@adch stored from wreg
  3045  0118  1283               	bcf	3,5	;RP0=0, select bank0
  3046  0119  00DC               	movwf	ADC_Sample@adch
  3047                           
  3048                           ;main.c: 1017: volatile unsigned long adsum = 0;
  3049                           
  3050                           ;main.c: 1018: volatile unsigned int admin = 0, admax = 0;
  3051  011A  21F3               	fcall	PL4	;call to abstracted procedure
  3052                           
  3053                           ;main.c: 1019: volatile unsigned int ad_temp = 0;
  3054  011B  01E6               	clrf	ADC_Sample@ad_temp	;volatile
  3055  011C  01E7               	clrf	ADC_Sample@ad_temp+1	;volatile
  3056                           
  3057                           ;main.c: 1021: if ((!LDO_EN) && (adldo & 0x04) )
  3058  011D  1683               	bsf	3,5	;RP0=1, select bank1
  3059  011E  1D16               	btfss	22,2	;volatile
  3060  011F  1D73               	btfss	ADC_Sample@adldo,2
  3061  0120  292A               	goto	l3001
  3062                           
  3063                           ;main.c: 1022: {
  3064                           ;main.c: 1024: ADCON1 = adldo;
  3065  0121  0873               	movf	ADC_Sample@adldo,w
  3066  0122  0096               	movwf	22	;volatile
  3067                           
  3068                           ;main.c: 1025: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3069  0123  3084               	movlw	132
  3070  0124  1283               	bcf	3,5	;RP0=0, select bank0
  3071  0125  00D7               	movwf	??_ADC_Sample
  3072  0126                     u4237:	
  3073  0126  0BD7               	decfsz	??_ADC_Sample,f
  3074  0127  2926               	goto	u4237
  3075  0128  2929               	nop2
  3076                           
  3077                           ;main.c: 1026: }
  3078  0129  292C               	goto	l3003
  3079  012A                     l3001:	
  3080                           
  3081                           ;main.c: 1027: else
  3082                           ;main.c: 1028: ADCON1 = adldo;
  3083  012A  0873               	movf	ADC_Sample@adldo,w
  3084  012B  0096               	movwf	22	;volatile
  3085  012C                     l3003:	
  3086                           
  3087                           ;main.c: 1030: if(adch & 0x10)
  3088  012C  1283               	bcf	3,5	;RP0=0, select bank0
  3089  012D  1E5C               	btfss	ADC_Sample@adch,4
  3090  012E  2934               	goto	l3011
  3091                           
  3092                           ;main.c: 1031: {
  3093                           ;main.c: 1032: CHS4 = 1;
  3094  012F  1683               	bsf	3,5	;RP0=1, select bank1
  3095  0130  1716               	bsf	22,6	;volatile
  3096                           
  3097                           ;main.c: 1033: adch &= 0x0f;
  3098  0131  300F               	movlw	15
  3099  0132  1283               	bcf	3,5	;RP0=0, select bank0
  3100  0133  05DC               	andwf	ADC_Sample@adch,f
  3101  0134                     l3011:	
  3102                           
  3103                           ;main.c: 1036: for (i = 0; i < 10; i++)
  3104  0134  01DD               	clrf	ADC_Sample@i
  3105  0135                     l3017:	
  3106                           
  3107                           ;main.c: 1037: {
  3108                           ;main.c: 1038: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3109  0135  085C               	movf	ADC_Sample@adch,w
  3110  0136  00D7               	movwf	??_ADC_Sample
  3111  0137  3001               	movlw	1
  3112  0138  1003               	clrc
  3113  0139                     L20:	
  3114  0139  0DD7               	rlf	??_ADC_Sample,f
  3115  013A  3EFF               	addlw	-1
  3116  013B  1003               	clrc
  3117  013C  1D03               	skipz
  3118  013D  2939               	goto	L20
  3119  013E  0D57               	rlf	??_ADC_Sample,w
  3120  013F  3841               	iorlw	65
  3121  0140  1683               	bsf	3,5	;RP0=1, select bank1
  3122  0141  0095               	movwf	21	;volatile
  3123  0142  0000               	nop	;# 
  3124  0143  0000               	nop	;# 
  3125  0144  0000               	nop	;# 
  3126  0145  0000               	nop	;# 
  3127                           
  3128                           ;main.c: 1043: GODONE = 1;
  3129  0146  1683               	bsf	3,5	;RP0=1, select bank1
  3130  0147  1495               	bsf	21,1	;volatile
  3131                           
  3132                           ;main.c: 1045: unsigned char j = 0;
  3133  0148  1283               	bcf	3,5	;RP0=0, select bank0
  3134  0149  01DB               	clrf	ADC_Sample@j
  3135  014A                     l882:	
  3136                           ;main.c: 1046: while (GODONE)
  3137                           
  3138  014A  1683               	bsf	3,5	;RP0=1, select bank1
  3139  014B  1C95               	btfss	21,1	;volatile
  3140  014C  2955               	goto	l3027
  3141                           
  3142                           ;main.c: 1047: {
  3143                           ;main.c: 1048: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3144  014D  294E               	nop2	;2 cycle nop
  3145  014E  294F               	nop2	;2 cycle nop
  3146  014F  2950               	nop2	;2 cycle nop
  3147  0150  2951               	nop2	;2 cycle nop
  3148                           
  3149                           ;main.c: 1050: if (0 == (--j))
  3150  0151  1283               	bcf	3,5	;RP0=0, select bank0
  3151  0152  0BDB               	decfsz	ADC_Sample@j,f
  3152  0153  294A               	goto	l882
  3153                           
  3154                           ;main.c: 1051: return 0;
  3155  0154  3400               	retlw	0
  3156  0155                     l3027:	
  3157                           
  3158                           ;main.c: 1052: }
  3159                           ;main.c: 1054: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3160  0155  0819               	movf	25,w	;volatile
  3161  0156  1283               	bcf	3,5	;RP0=0, select bank0
  3162  0157  00E6               	movwf	ADC_Sample@ad_temp	;volatile
  3163  0158  01E7               	clrf	ADC_Sample@ad_temp+1	;volatile
  3164  0159  0EE6               	swapf	ADC_Sample@ad_temp,f	;volatile
  3165  015A  0EE7               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3166  015B  30F0               	movlw	240
  3167  015C  05E7               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3168  015D  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3169  015E  390F               	andlw	15
  3170  015F  04E7               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3171  0160  30F0               	movlw	240
  3172  0161  05E6               	andwf	ADC_Sample@ad_temp,f	;volatile
  3173  0162  1683               	bsf	3,5	;RP0=1, select bank1
  3174  0163  0E18               	swapf	24,w	;volatile
  3175  0164  390F               	andlw	15
  3176  0165  1283               	bcf	3,5	;RP0=0, select bank0
  3177  0166  07E6               	addwf	ADC_Sample@ad_temp,f	;volatile
  3178  0167  1803               	skipnc
  3179  0168  0AE7               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3180                           
  3181                           ;main.c: 1056: if (0 == admax)
  3182  0169  0864               	movf	ADC_Sample@admax,w	;volatile
  3183  016A  0465               	iorwf	ADC_Sample@admax+1,w	;volatile
  3184  016B  1D03               	btfss	3,2
  3185  016C  296F               	goto	l3035
  3186                           
  3187                           ;main.c: 1057: {
  3188                           ;main.c: 1058: admax = ad_temp;
  3189  016D  21FC               	fcall	PL10	;call to abstracted procedure
  3190  016E  2981               	goto	l3041
  3191  016F                     l3035:	
  3192                           ;main.c: 1060: }
  3193                           
  3194                           ;main.c: 1059: admin = ad_temp;
  3195                           
  3196                           
  3197                           ;main.c: 1061: else if (ad_temp > admax)
  3198  016F  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3199  0170  0265               	subwf	ADC_Sample@admax+1,w	;volatile
  3200  0171  1D03               	skipz
  3201  0172  2975               	goto	u3125
  3202  0173  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3203  0174  0264               	subwf	ADC_Sample@admax,w	;volatile
  3204  0175                     u3125:	
  3205  0175  1803               	skipnc
  3206  0176  2979               	goto	l3039
  3207                           
  3208                           ;main.c: 1062: admax = ad_temp;
  3209  0177  21FC               	fcall	PL10	;call to abstracted procedure
  3210  0178  2985               	goto	l888
  3211  0179                     l3039:	
  3212                           
  3213                           ;main.c: 1063: else if (ad_temp < admin)
  3214  0179  0863               	movf	ADC_Sample@admin+1,w	;volatile
  3215  017A  0267               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3216  017B  1D03               	skipz
  3217  017C  297F               	goto	u3135
  3218  017D  0862               	movf	ADC_Sample@admin,w	;volatile
  3219  017E  0266               	subwf	ADC_Sample@ad_temp,w	;volatile
  3220  017F                     u3135:	
  3221  017F  1803               	skipnc
  3222  0180  2985               	goto	l888
  3223  0181                     l3041:	
  3224                           
  3225                           ;main.c: 1064: admin = ad_temp;
  3226  0181  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3227  0182  00E3               	movwf	ADC_Sample@admin+1	;volatile
  3228  0183  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3229  0184  00E2               	movwf	ADC_Sample@admin	;volatile
  3230  0185                     l888:	
  3231                           
  3232                           ;main.c: 1066: adsum += ad_temp;
  3233  0185  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3234  0186  00D7               	movwf	??_ADC_Sample
  3235  0187  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3236  0188  00D8               	movwf	??_ADC_Sample+1
  3237  0189  01D9               	clrf	??_ADC_Sample+2
  3238  018A  01DA               	clrf	??_ADC_Sample+3
  3239  018B  0857               	movf	??_ADC_Sample,w
  3240  018C  07DE               	addwf	ADC_Sample@adsum,f	;volatile
  3241  018D  0858               	movf	??_ADC_Sample+1,w
  3242  018E  1103               	clrz
  3243  018F  1803               	skipnc
  3244  0190  3E01               	addlw	1
  3245  0191  1D03               	btfss	3,2
  3246  0192  07DF               	addwf	ADC_Sample@adsum+1,f	;volatile
  3247  0193  0859               	movf	??_ADC_Sample+2,w
  3248  0194  1103               	clrz
  3249  0195  1803               	skipnc
  3250  0196  3E01               	addlw	1
  3251  0197  1D03               	btfss	3,2
  3252  0198  07E0               	addwf	ADC_Sample@adsum+2,f	;volatile
  3253  0199  085A               	movf	??_ADC_Sample+3,w
  3254  019A  1103               	clrz
  3255  019B  1803               	skipnc
  3256  019C  3E01               	addlw	1
  3257  019D  1D03               	btfss	3,2
  3258  019E  07E1               	addwf	ADC_Sample@adsum+3,f	;volatile
  3259  019F  300A               	movlw	10
  3260  01A0  0ADD               	incf	ADC_Sample@i,f
  3261  01A1  025D               	subwf	ADC_Sample@i,w
  3262  01A2  1C03               	skipc
  3263  01A3  2935               	goto	l3017
  3264                           
  3265                           ;main.c: 1067: }
  3266                           ;main.c: 1068: adsum -= admax;
  3267  01A4  0864               	movf	ADC_Sample@admax,w	;volatile
  3268  01A5  00D7               	movwf	??_ADC_Sample
  3269  01A6  0865               	movf	ADC_Sample@admax+1,w	;volatile
  3270  01A7  21E4               	fcall	PL2	;call to abstracted procedure
  3271  01A8  1C03               	skipc
  3272  01A9  0F5A               	incfsz	??_ADC_Sample+3,w
  3273  01AA  02E1               	subwf	ADC_Sample@adsum+3,f	;volatile
  3274                           
  3275                           ;main.c: 1069: if (adsum >= admin)
  3276  01AB  0862               	movf	ADC_Sample@admin,w	;volatile
  3277  01AC  00D7               	movwf	??_ADC_Sample
  3278  01AD  0863               	movf	ADC_Sample@admin+1,w	;volatile
  3279  01AE  00D8               	movwf	??_ADC_Sample+1
  3280  01AF  01D9               	clrf	??_ADC_Sample+2
  3281  01B0  01DA               	clrf	??_ADC_Sample+3
  3282  01B1  085A               	movf	??_ADC_Sample+3,w
  3283  01B2  0261               	subwf	ADC_Sample@adsum+3,w	;volatile
  3284  01B3  1D03               	skipz
  3285  01B4  29BF               	goto	u3175
  3286  01B5  0859               	movf	??_ADC_Sample+2,w
  3287  01B6  0260               	subwf	ADC_Sample@adsum+2,w	;volatile
  3288  01B7  1D03               	skipz
  3289  01B8  29BF               	goto	u3175
  3290  01B9  0858               	movf	??_ADC_Sample+1,w
  3291  01BA  025F               	subwf	ADC_Sample@adsum+1,w	;volatile
  3292  01BB  1D03               	skipz
  3293  01BC  29BF               	goto	u3175
  3294  01BD  0857               	movf	??_ADC_Sample,w
  3295  01BE  025E               	subwf	ADC_Sample@adsum,w	;volatile
  3296  01BF                     u3175:	
  3297  01BF  1C03               	skipc
  3298  01C0  29C9               	goto	l892
  3299                           
  3300                           ;main.c: 1070: adsum -= admin;
  3301  01C1  0862               	movf	ADC_Sample@admin,w	;volatile
  3302  01C2  00D7               	movwf	??_ADC_Sample
  3303  01C3  0863               	movf	ADC_Sample@admin+1,w	;volatile
  3304  01C4  21E4               	fcall	PL2	;call to abstracted procedure
  3305  01C5  1C03               	skipc
  3306  01C6  0F5A               	incfsz	??_ADC_Sample+3,w
  3307  01C7  02E1               	subwf	ADC_Sample@adsum+3,f	;volatile
  3308  01C8  29CD               	goto	l3051
  3309  01C9                     l892:	
  3310                           
  3311                           ;main.c: 1071: else
  3312                           ;main.c: 1072: adsum = 0;
  3313  01C9  01DE               	clrf	ADC_Sample@adsum	;volatile
  3314  01CA  01DF               	clrf	ADC_Sample@adsum+1	;volatile
  3315  01CB  01E0               	clrf	ADC_Sample@adsum+2	;volatile
  3316  01CC  01E1               	clrf	ADC_Sample@adsum+3	;volatile
  3317  01CD                     l3051:	
  3318                           
  3319                           ;main.c: 1074: adresult = adsum >> 3;
  3320  01CD  085E               	movf	ADC_Sample@adsum,w	;volatile
  3321  01CE  00D7               	movwf	??_ADC_Sample
  3322  01CF  085F               	movf	ADC_Sample@adsum+1,w	;volatile
  3323  01D0  00D8               	movwf	??_ADC_Sample+1
  3324  01D1  0860               	movf	ADC_Sample@adsum+2,w	;volatile
  3325  01D2  00D9               	movwf	??_ADC_Sample+2
  3326  01D3  0861               	movf	ADC_Sample@adsum+3,w	;volatile
  3327  01D4  00DA               	movwf	??_ADC_Sample+3
  3328  01D5  3003               	movlw	3
  3329  01D6                     u3195:	
  3330  01D6  1003               	clrc
  3331  01D7  0CDA               	rrf	??_ADC_Sample+3,f
  3332  01D8  0CD9               	rrf	??_ADC_Sample+2,f
  3333  01D9  0CD8               	rrf	??_ADC_Sample+1,f
  3334  01DA  0CD7               	rrf	??_ADC_Sample,f
  3335  01DB  3EFF               	addlw	-1
  3336  01DC  1D03               	skipz
  3337  01DD  29D6               	goto	u3195
  3338  01DE  0858               	movf	??_ADC_Sample+1,w
  3339  01DF  00B5               	movwf	_adresult+1	;volatile
  3340  01E0  0857               	movf	??_ADC_Sample,w
  3341  01E1  00B4               	movwf	_adresult	;volatile
  3342                           
  3343                           ;main.c: 1076: adsum = 0;
  3344                           
  3345                           ;main.c: 1077: admin = 0;
  3346                           
  3347                           ;main.c: 1078: admax = 0;
  3348  01E2  21F3               	fcall	PL4	;call to abstracted procedure
  3349                           
  3350                           ;main.c: 1079: return 0xA5;
  3351  01E3  34A5               	retlw	165
  3352  01E4                     __end_of_ADC_Sample:	
  3353  01E4                     PL2:	
  3354  01E4  00D8               	movwf	??_ADC_Sample+1
  3355  01E5  01D9               	clrf	??_ADC_Sample+2
  3356  01E6  01DA               	clrf	??_ADC_Sample+3
  3357  01E7  0857               	movf	??_ADC_Sample,w
  3358  01E8  02DE               	subwf	ADC_Sample@adsum,f	;volatile
  3359  01E9  0858               	movf	??_ADC_Sample+1,w
  3360  01EA  1C03               	skipc
  3361  01EB  0F58               	incfsz	??_ADC_Sample+1,w
  3362  01EC  02DF               	subwf	ADC_Sample@adsum+1,f	;volatile
  3363  01ED  0859               	movf	??_ADC_Sample+2,w
  3364  01EE  1C03               	skipc
  3365  01EF  0F59               	incfsz	??_ADC_Sample+2,w
  3366  01F0  02E0               	subwf	ADC_Sample@adsum+2,f	;volatile
  3367  01F1  085A               	movf	??_ADC_Sample+3,w
  3368  01F2  0008               	return
  3369  01F3                     __end_ofPL2:	
  3370  01F3                     PL4:	
  3371  01F3  01DE               	clrf	ADC_Sample@adsum	;volatile
  3372  01F4  01DF               	clrf	ADC_Sample@adsum+1	;volatile
  3373  01F5  01E0               	clrf	ADC_Sample@adsum+2	;volatile
  3374  01F6  01E1               	clrf	ADC_Sample@adsum+3	;volatile
  3375  01F7  01E2               	clrf	ADC_Sample@admin	;volatile
  3376  01F8  01E3               	clrf	ADC_Sample@admin+1	;volatile
  3377  01F9  01E4               	clrf	ADC_Sample@admax	;volatile
  3378  01FA  01E5               	clrf	ADC_Sample@admax+1	;volatile
  3379  01FB  0008               	return
  3380  01FC                     __end_ofPL4:	
  3381  01FC                     PL10:	
  3382  01FC  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3383  01FD  00E5               	movwf	ADC_Sample@admax+1	;volatile
  3384  01FE  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3385  01FF  00E4               	movwf	ADC_Sample@admax	;volatile
  3386  0200  0008               	return
  3387  0201                     __end_ofPL10:	
  3388                           
  3389                           	psect	text16
  3390  040D                     __ptext16:	
  3391 ;; *************** function _Sleep_Mode *****************
  3392 ;; Defined at:
  3393 ;;		line 939 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;		None
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;		None
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  1    wreg      void 
  3400 ;; Registers used:
  3401 ;;		wreg, status,2, status,0, pclath, cstack
  3402 ;; Tracked objects:
  3403 ;;		On entry : 100/0
  3404 ;;		On exit  : 100/100
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMMON   BANK0   BANK1
  3407 ;;      Params:         0       0       0
  3408 ;;      Locals:         0       0       0
  3409 ;;      Temps:          0       0       0
  3410 ;;      Totals:         0       0       0
  3411 ;;Total ram usage:        0 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; Hardware stack levels required when called:    3
  3414 ;; This function calls:
  3415 ;;		_AD_Init
  3416 ;;		_Init_System
  3417 ;; This function is called by:
  3418 ;;		_main
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           
  3423                           ;psect for function _Sleep_Mode
  3424  040D                     _Sleep_Mode:	
  3425                           
  3426                           ;main.c: 941: INTCON = 0;
  3427                           
  3428                           ;incstack = 0
  3429                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3430  040D  018B               	clrf	11	;volatile
  3431                           
  3432                           ;main.c: 943: OPTION_REG = 0;
  3433  040E  0181               	clrf	1	;volatile
  3434                           
  3435                           ;main.c: 945: TRISA = 0x1F;
  3436  040F  301F               	movlw	31
  3437  0410  1683               	bsf	3,5	;RP0=1, select bank1
  3438  0411  0085               	movwf	5	;volatile
  3439                           
  3440                           ;main.c: 946: WPUA = 0B00000000;
  3441  0412  0188               	clrf	8	;volatile
  3442                           
  3443                           ;main.c: 947: PORTA = 0x00;
  3444  0413  0186               	clrf	6	;volatile
  3445                           
  3446                           ;main.c: 948: TRISB = 0B00000100;
  3447  0414  3004               	movlw	4
  3448  0415  1283               	bcf	3,5	;RP0=0, select bank0
  3449  0416  0085               	movwf	5	;volatile
  3450                           
  3451                           ;main.c: 949: PORTB = 0B00000000;
  3452  0417  0186               	clrf	6	;volatile
  3453                           
  3454                           ;main.c: 950: WPUB = 0B00000100;
  3455  0418  0088               	movwf	8	;volatile
  3456                           
  3457                           ;main.c: 952: ADCON0 = 0;
  3458  0419  1683               	bsf	3,5	;RP0=1, select bank1
  3459  041A  0195               	clrf	21	;volatile
  3460                           
  3461                           ;main.c: 953: ADCON1 = 0;
  3462  041B  0196               	clrf	22	;volatile
  3463                           
  3464                           ;main.c: 955: PWMCON0 = 0;
  3465  041C  1283               	bcf	3,5	;RP0=0, select bank0
  3466  041D  0195               	clrf	21	;volatile
  3467                           
  3468                           ;main.c: 957: OSCCON = 0X70;
  3469  041E  3070               	movlw	112
  3470  041F  0094               	movwf	20	;volatile
  3471                           
  3472                           ;main.c: 959: IOCA = 0B00000010;
  3473  0420  3002               	movlw	2
  3474  0421  1683               	bsf	3,5	;RP0=1, select bank1
  3475  0422  0089               	movwf	9	;volatile
  3476                           
  3477                           ;main.c: 960: IOCB = 0B00000100;
  3478  0423  3004               	movlw	4
  3479  0424  1283               	bcf	3,5	;RP0=0, select bank0
  3480  0425  0089               	movwf	9	;volatile
  3481                           
  3482                           ;main.c: 962: RAIE = 1;
  3483  0426  158E               	bsf	14,3	;volatile
  3484                           
  3485                           ;main.c: 963: PEIE = 1;
  3486  0427  170B               	bsf	11,6	;volatile
  3487                           
  3488                           ;main.c: 964: RBIE = 1;
  3489  0428  158B               	bsf	11,3	;volatile
  3490                           
  3491                           ;main.c: 965: GIE = 0;
  3492  0429  138B               	bcf	11,7	;volatile
  3493                           
  3494                           ;main.c: 967: PIE1 &= 0X08;
  3495  042A  3008               	movlw	8
  3496  042B  058E               	andwf	14,f	;volatile
  3497                           
  3498                           ;main.c: 968: PIR1 = 0;
  3499  042C  018D               	clrf	13	;volatile
  3500                           
  3501                           ;main.c: 969: INTCON &= 0XC8;
  3502  042D  30C8               	movlw	200
  3503  042E  058B               	andwf	11,f	;volatile
  3504                           
  3505                           ;main.c: 971: PORTA;
  3506  042F  1683               	bsf	3,5	;RP0=1, select bank1
  3507  0430  0806               	movf	6,w	;volatile
  3508                           
  3509                           ;main.c: 972: RAIF = 0;
  3510  0431  1283               	bcf	3,5	;RP0=0, select bank0
  3511  0432  118D               	bcf	13,3	;volatile
  3512                           
  3513                           ;main.c: 973: PORTB;
  3514  0433  0806               	movf	6,w	;volatile
  3515                           
  3516                           ;main.c: 974: RBIF = 0;
  3517  0434  100B               	bcf	11,0	;volatile
  3518  0435  0064               	clrwdt	;# 
  3519  0436  0063               	sleep	;# 
  3520  0437  0000               	nop	;# 
  3521  0438  0064               	clrwdt	;# 
  3522  0439  0000               	nop	;# 
  3523  043A  0000               	nop	;# 
  3524  043B  0000               	nop	;# 
  3525  043C  0000               	nop	;# 
  3526  043D  0000               	nop	;# 
  3527                           
  3528                           ;main.c: 986: if(RAIF) RAIF = 0;
  3529  043E  1283               	bcf	3,5	;RP0=0, select bank0
  3530  043F  198D               	btfsc	13,3	;volatile
  3531  0440  118D               	bcf	13,3	;volatile
  3532                           
  3533                           ;main.c: 987: if(RBIF) RBIF = 0;
  3534  0441  180B               	btfsc	11,0	;volatile
  3535  0442  100B               	bcf	11,0	;volatile
  3536                           
  3537                           ;main.c: 988: if(TMR2IF) TMR2IF = 0;
  3538  0443  188D               	btfsc	13,1	;volatile
  3539  0444  108D               	bcf	13,1	;volatile
  3540                           
  3541                           ;main.c: 989: IOCA = 0B00000000;
  3542  0445  1683               	bsf	3,5	;RP0=1, select bank1
  3543  0446  0189               	clrf	9	;volatile
  3544                           
  3545                           ;main.c: 990: IOCB = 0B00000000;
  3546  0447  1283               	bcf	3,5	;RP0=0, select bank0
  3547  0448  0189               	clrf	9	;volatile
  3548                           
  3549                           ;main.c: 991: Init_System();
  3550  0449  2515               	fcall	_Init_System
  3551                           
  3552                           ;main.c: 992: AD_Init();
  3553  044A  2DC6               	ljmp	l2149
  3554  044B                     __end_of_Sleep_Mode:	
  3555                           
  3556                           	psect	text17
  3557  0515                     __ptext17:	
  3558 ;; *************** function _Init_System *****************
  3559 ;; Defined at:
  3560 ;;		line 795 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
  3561 ;; Parameters:    Size  Location     Type
  3562 ;;		None
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;		None
  3565 ;; Return value:  Size  Location     Type
  3566 ;;                  1    wreg      void 
  3567 ;; Registers used:
  3568 ;;		wreg, status,2
  3569 ;; Tracked objects:
  3570 ;;		On entry : 100/0
  3571 ;;		On exit  : 100/0
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMMON   BANK0   BANK1
  3574 ;;      Params:         0       0       0
  3575 ;;      Locals:         0       0       0
  3576 ;;      Temps:          0       0       0
  3577 ;;      Totals:         0       0       0
  3578 ;;Total ram usage:        0 bytes
  3579 ;; Hardware stack levels used:    1
  3580 ;; Hardware stack levels required when called:    2
  3581 ;; This function calls:
  3582 ;;		Nothing
  3583 ;; This function is called by:
  3584 ;;		_main
  3585 ;;		_Sleep_Mode
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           
  3590                           ;psect for function _Init_System
  3591  0515                     _Init_System:	
  3592                           
  3593                           ;incstack = 0
  3594                           ; Regs used in _Init_System: [wreg+status,2]
  3595  0515  0000               	nop	;# 
  3596  0516  0064               	clrwdt	;# 
  3597                           
  3598                           ;main.c: 799: OPTION_REG = 0;
  3599  0517  1283               	bcf	3,5	;RP0=0, select bank0
  3600  0518  0181               	clrf	1	;volatile
  3601  0519  0064               	clrwdt	;# 
  3602                           
  3603                           ;main.c: 801: OSCCON = 0X72;
  3604  051A  3072               	movlw	114
  3605  051B  1283               	bcf	3,5	;RP0=0, select bank0
  3606  051C  0094               	movwf	20	;volatile
  3607                           
  3608                           ;main.c: 803: WPUA = 0B00000000;
  3609  051D  1683               	bsf	3,5	;RP0=1, select bank1
  3610  051E  0188               	clrf	8	;volatile
  3611                           
  3612                           ;main.c: 804: WPDA = 0x02;
  3613  051F  3002               	movlw	2
  3614  0520  0087               	movwf	7	;volatile
  3615                           
  3616                           ;main.c: 805: WPUB = 0B00000100;
  3617  0521  3004               	movlw	4
  3618  0522  1283               	bcf	3,5	;RP0=0, select bank0
  3619  0523  0088               	movwf	8	;volatile
  3620                           
  3621                           ;main.c: 807: TRISA = 0x1F;
  3622  0524  301F               	movlw	31
  3623  0525  1683               	bsf	3,5	;RP0=1, select bank1
  3624  0526  0085               	movwf	5	;volatile
  3625                           
  3626                           ;main.c: 808: TRISB = 0B00000100;
  3627  0527  3004               	movlw	4
  3628  0528  1283               	bcf	3,5	;RP0=0, select bank0
  3629  0529  0085               	movwf	5	;volatile
  3630                           
  3631                           ;main.c: 810: PORTA = 0X00;
  3632  052A  1683               	bsf	3,5	;RP0=1, select bank1
  3633  052B  0186               	clrf	6	;volatile
  3634                           
  3635                           ;main.c: 811: PORTB = 0X00;
  3636  052C  1283               	bcf	3,5	;RP0=0, select bank0
  3637  052D  0186               	clrf	6	;volatile
  3638                           
  3639                           ;main.c: 815: PR2 = 249;
  3640  052E  30F9               	movlw	249
  3641  052F  0091               	movwf	17	;volatile
  3642                           
  3643                           ;main.c: 816: TMR2IF = 0;
  3644  0530  108D               	bcf	13,1	;volatile
  3645                           
  3646                           ;main.c: 817: TMR2IE = 1;
  3647  0531  148E               	bsf	14,1	;volatile
  3648                           
  3649                           ;main.c: 819: T2CON = 0B00000100;
  3650  0532  3004               	movlw	4
  3651  0533  0093               	movwf	19	;volatile
  3652                           
  3653                           ;main.c: 820: INTCON = 0XC0;
  3654  0534  30C0               	movlw	192
  3655  0535  008B               	movwf	11	;volatile
  3656  0536  0008               	return
  3657  0537                     __end_of_Init_System:	
  3658                           
  3659                           	psect	text18
  3660  05C6                     __ptext18:	
  3661 ;; *************** function _AD_Init *****************
  3662 ;; Defined at:
  3663 ;;		line 832 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;		None
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;		None
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  1    wreg      void 
  3670 ;; Registers used:
  3671 ;;		wreg, status,2
  3672 ;; Tracked objects:
  3673 ;;		On entry : 100/0
  3674 ;;		On exit  : 100/100
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMMON   BANK0   BANK1
  3677 ;;      Params:         0       0       0
  3678 ;;      Locals:         0       0       0
  3679 ;;      Temps:          0       0       0
  3680 ;;      Totals:         0       0       0
  3681 ;;Total ram usage:        0 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    2
  3684 ;; This function calls:
  3685 ;;		Nothing
  3686 ;; This function is called by:
  3687 ;;		_main
  3688 ;;		_Sleep_Mode
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           
  3693                           ;psect for function _AD_Init
  3694  05C6                     _AD_Init:	
  3695  05C6                     l2149:	
  3696                           ;incstack = 0
  3697                           ; Regs used in _AD_Init: [wreg+status,2]
  3698                           
  3699                           
  3700                           ;main.c: 865: ADCON0 = 0X41;
  3701  05C6  3041               	movlw	65
  3702  05C7  1683               	bsf	3,5	;RP0=1, select bank1
  3703  05C8  0095               	movwf	21	;volatile
  3704                           
  3705                           ;main.c: 882: ADCON1 = 0;
  3706  05C9  0196               	clrf	22	;volatile
  3707                           
  3708                           ;main.c: 883: ANSEL0 = 0X1D;
  3709  05CA  301D               	movlw	29
  3710  05CB  0093               	movwf	19	;volatile
  3711  05CC  0008               	return
  3712  05CD                     __end_of_AD_Init:	
  3713                           
  3714                           	psect	text19
  3715  0555                     __ptext19:	
  3716 ;; *************** function _Isr_Timer *****************
  3717 ;; Defined at:
  3718 ;;		line 100 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;		None
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;		None
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  1    wreg      void 
  3725 ;; Registers used:
  3726 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 100/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMMON   BANK0   BANK1
  3732 ;;      Params:         0       0       0
  3733 ;;      Locals:         0       0       0
  3734 ;;      Temps:          3       0       0
  3735 ;;      Totals:         3       0       0
  3736 ;;Total ram usage:        3 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    1
  3739 ;; This function calls:
  3740 ;;		_ledShow
  3741 ;; This function is called by:
  3742 ;;		Interrupt level 1
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           
  3747                           ;psect for function _Isr_Timer
  3748  0555                     _Isr_Timer:	
  3749                           
  3750                           ;main.c: 102: if(TMR2IF)
  3751  0555  1283               	bcf	3,5	;RP0=0, select bank0
  3752  0556  1C8D               	btfss	13,1	;volatile
  3753  0557  2D69               	goto	i1l656
  3754                           
  3755                           ;main.c: 103: {
  3756                           ;main.c: 104: TMR2IF = 0;
  3757  0558  108D               	bcf	13,1	;volatile
  3758                           
  3759                           ;main.c: 105: if(++intCount >= 160)
  3760  0559  30A0               	movlw	160
  3761  055A  0AD5               	incf	_intCount,f
  3762  055B  0255               	subwf	_intCount,w
  3763  055C  1C03               	skipc
  3764  055D  2D66               	goto	i1l2921
  3765  055E  3064               	movlw	100
  3766                           
  3767                           ;main.c: 106: {
  3768                           ;main.c: 107: intCount = 0;
  3769  055F  01D5               	clrf	_intCount
  3770                           
  3771                           ;main.c: 108: IntFlag = 1;
  3772  0560  01D3               	clrf	_IntFlag
  3773  0561  0AD3               	incf	_IntFlag,f
  3774                           
  3775                           ;main.c: 109: if(++count1s >= 100)
  3776  0562  0AD4               	incf	_count1s,f
  3777  0563  0254               	subwf	_count1s,w
  3778  0564  1803               	btfsc	3,0
  3779                           
  3780                           ;main.c: 110: {
  3781                           ;main.c: 111: count1s = 0;
  3782  0565  01D4               	clrf	_count1s
  3783  0566                     i1l2921:	
  3784                           
  3785                           ;main.c: 112: }
  3786                           ;main.c: 113: }
  3787                           ;main.c: 114: ledShow();
  3788  0566  23B9               	fcall	_ledShow
  3789                           
  3790                           ;main.c: 115: intCount10++;
  3791  0567  1283               	bcf	3,5	;RP0=0, select bank0
  3792  0568  0AD1               	incf	_intCount10,f
  3793  0569                     i1l656:	
  3794  0569  0872               	movf	??_Isr_Timer+2,w
  3795  056A  008A               	movwf	10
  3796  056B  0871               	movf	??_Isr_Timer+1,w
  3797  056C  0084               	movwf	4
  3798  056D  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3799  056E  0083               	movwf	3
  3800  056F  0EFE               	swapf	126,f
  3801  0570  0E7E               	swapf	126,w
  3802  0571  0009               	retfie
  3803  0572                     __end_of_Isr_Timer:	
  3804                           
  3805                           	psect	intentry
  3806  0004                     __pintentry:	
  3807                           ;incstack = 0
  3808                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3809                           
  3810  0004                     interrupt_function:	
  3811  007E                     saved_w	set	btemp
  3812  0004  00FE               	movwf	btemp
  3813  0005  0E03               	swapf	3,w
  3814  0006  00F0               	movwf	??_Isr_Timer
  3815  0007  0804               	movf	4,w
  3816  0008  00F1               	movwf	??_Isr_Timer+1
  3817  0009  080A               	movf	10,w
  3818  000A  00F2               	movwf	??_Isr_Timer+2
  3819  000B  2D55               	ljmp	_Isr_Timer
  3820                           
  3821                           	psect	text20
  3822  03B9                     __ptext20:	
  3823 ;; *************** function _ledShow *****************
  3824 ;; Defined at:
  3825 ;;		line 163 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_µçÁ÷±äÐ¡\main.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;		None
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;		None
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  1    wreg      void 
  3832 ;; Registers used:
  3833 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3834 ;; Tracked objects:
  3835 ;;		On entry : 100/0
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMMON   BANK0   BANK1
  3839 ;;      Params:         0       0       0
  3840 ;;      Locals:         0       0       0
  3841 ;;      Temps:          0       0       0
  3842 ;;      Totals:         0       0       0
  3843 ;;Total ram usage:        0 bytes
  3844 ;; Hardware stack levels used:    1
  3845 ;; This function calls:
  3846 ;;		Nothing
  3847 ;; This function is called by:
  3848 ;;		_Isr_Timer
  3849 ;; This function uses a non-reentrant model
  3850 ;;
  3851                           
  3852                           
  3853                           ;psect for function _ledShow
  3854  03B9                     _ledShow:	
  3855                           
  3856                           ;main.c: 165: if(++ledCntTime > 30)
  3857                           
  3858                           ;incstack = 0
  3859                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3860  03B9  301F               	movlw	31
  3861  03BA  0AB9               	incf	_ledCntTime,f
  3862  03BB  0239               	subwf	_ledCntTime,w
  3863  03BC  1C03               	skipc
  3864  03BD  0008               	return
  3865  03BE  3006               	movlw	6
  3866                           
  3867                           ;main.c: 166: {
  3868                           ;main.c: 167: ledCntTime = 0;
  3869  03BF  01B9               	clrf	_ledCntTime
  3870                           
  3871                           ;main.c: 168: if(++ledCnt > 5)
  3872  03C0  0ACD               	incf	_ledCnt,f
  3873  03C1  024D               	subwf	_ledCnt,w
  3874  03C2  1803               	btfsc	3,0
  3875                           
  3876                           ;main.c: 169: {
  3877                           ;main.c: 170: ledCnt = 0;
  3878  03C3  01CD               	clrf	_ledCnt
  3879                           
  3880                           ;main.c: 171: }
  3881                           ;main.c: 172: PORTA &= 0xDF;
  3882  03C4  1683               	bsf	3,5	;RP0=1, select bank1
  3883  03C5  1286               	bcf	6,5	;volatile
  3884                           
  3885                           ;main.c: 173: PORTB &= 0xC7;
  3886  03C6  30C7               	movlw	199
  3887  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  3888  03C8  0586               	andwf	6,f	;volatile
  3889                           
  3890                           ;main.c: 174: TRISA |= 0x20;
  3891  03C9  1683               	bsf	3,5	;RP0=1, select bank1
  3892  03CA  1685               	bsf	5,5	;volatile
  3893                           
  3894                           ;main.c: 175: TRISB |= 0x38;
  3895  03CB  3038               	movlw	56
  3896  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  3897  03CD  0485               	iorwf	5,f	;volatile
  3898                           
  3899                           ;main.c: 176: switch(ledCnt)
  3900  03CE  2C01               	goto	i1l2403
  3901  03CF                     i1l2369:	
  3902                           
  3903                           ;main.c: 179: if(ledStep > 0)
  3904  03CF  0878               	movf	_ledStep,w
  3905  03D0  1903               	btfsc	3,2
  3906  03D1  0008               	return
  3907                           
  3908                           ;main.c: 180: {
  3909                           ;main.c: 181: TRISB &= 0xE7;
  3910  03D2  30E7               	movlw	231
  3911  03D3                     L21:	
  3912  03D3  0585               	andwf	5,f	;volatile
  3913                           
  3914                           ;main.c: 182: PORTB |= 0x10;
  3915  03D4  1606               	bsf	6,4	;volatile
  3916  03D5  0008               	return
  3917  03D6                     i1l2375:	
  3918                           
  3919                           ;main.c: 186: if(ledStep > 1)
  3920  03D6  3002               	movlw	2
  3921  03D7  0278               	subwf	_ledStep,w
  3922  03D8  1C03               	skipc
  3923  03D9  0008               	return
  3924                           
  3925                           ;main.c: 187: {
  3926                           ;main.c: 188: TRISB &= 0xCF;
  3927  03DA  30CF               	movlw	207
  3928  03DB  0585               	andwf	5,f	;volatile
  3929                           
  3930                           ;main.c: 189: PORTB |= 0x20;
  3931  03DC  1686               	bsf	6,5	;volatile
  3932  03DD  0008               	return
  3933  03DE                     i1l2381:	
  3934                           
  3935                           ;main.c: 193: if(ledStep > 2)
  3936  03DE  3003               	movlw	3
  3937  03DF  0278               	subwf	_ledStep,w
  3938  03E0  1C03               	skipc
  3939  03E1  0008               	return
  3940                           
  3941                           ;main.c: 194: {
  3942                           ;main.c: 195: TRISB &= 0xE7;
  3943  03E2  30E7               	movlw	231
  3944  03E3  0585               	andwf	5,f	;volatile
  3945                           
  3946                           ;main.c: 196: PORTB |= 0x08;
  3947  03E4  1586               	bsf	6,3	;volatile
  3948  03E5  0008               	return
  3949  03E6                     i1l2387:	
  3950                           
  3951                           ;main.c: 200: if(ledStep > 3)
  3952  03E6  3004               	movlw	4
  3953  03E7  0278               	subwf	_ledStep,w
  3954  03E8  1C03               	skipc
  3955  03E9  0008               	return
  3956                           
  3957                           ;main.c: 201: {
  3958                           ;main.c: 202: TRISB &= 0xCF;
  3959  03EA  30CF               	movlw	207
  3960  03EB  2BD3               	goto	L21
  3961  03EC                     i1l2393:	
  3962                           
  3963                           ;main.c: 207: if(ledStep > 4)
  3964  03EC  3005               	movlw	5
  3965  03ED  0278               	subwf	_ledStep,w
  3966  03EE  1C03               	skipc
  3967  03EF  0008               	return
  3968                           
  3969                           ;main.c: 208: {
  3970                           ;main.c: 209: TRISA &= 0xDF;
  3971  03F0  1683               	bsf	3,5	;RP0=1, select bank1
  3972  03F1  1285               	bcf	5,5	;volatile
  3973                           
  3974                           ;main.c: 210: TRISB &= 0xDF;
  3975  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  3976  03F3  1285               	bcf	5,5	;volatile
  3977                           
  3978                           ;main.c: 211: PORTB |= 0x20;
  3979  03F4  1686               	bsf	6,5	;volatile
  3980  03F5  0008               	return
  3981  03F6                     i1l2397:	
  3982                           
  3983                           ;main.c: 215: if(ledStep > 5)
  3984  03F6  3006               	movlw	6
  3985  03F7  0278               	subwf	_ledStep,w
  3986  03F8  1C03               	skipc
  3987  03F9  0008               	return
  3988                           
  3989                           ;main.c: 216: {
  3990                           ;main.c: 217: TRISA &= 0xDF;
  3991  03FA  1683               	bsf	3,5	;RP0=1, select bank1
  3992  03FB  1285               	bcf	5,5	;volatile
  3993                           
  3994                           ;main.c: 218: TRISB &= 0xDF;
  3995  03FC  1283               	bcf	3,5	;RP0=0, select bank0
  3996  03FD  1285               	bcf	5,5	;volatile
  3997                           
  3998                           ;main.c: 219: PORTA |= 0x20;
  3999  03FE  1683               	bsf	3,5	;RP0=1, select bank1
  4000  03FF  1686               	bsf	6,5	;volatile
  4001  0400  0008               	return
  4002  0401                     i1l2403:	
  4003  0401  084D               	movf	_ledCnt,w
  4004                           
  4005                           ; Switch size 1, requested type "space"
  4006                           ; Number of cases is 6, Range of values is 0 to 5
  4007                           ; switch strategies available:
  4008                           ; Name         Instructions Cycles
  4009                           ; direct_byte           12     6 (fixed)
  4010                           ; simple_byte           19    10 (average)
  4011                           ; jumptable            260     6 (fixed)
  4012                           ;	Chosen strategy is direct_byte
  4013  0402  0084               	movwf	4
  4014  0403  3006               	movlw	6
  4015  0404  0204               	subwf	4,w
  4016  0405  1803               	skipnc
  4017  0406  0008               	return
  4018  0407  3005               	movlw	high i1S3543
  4019  0408  008A               	movwf	10
  4020  0409  30CD               	movlw	low i1S3543
  4021  040A  0704               	addwf	4,w
  4022  040B  0082               	movwf	2
  4023  040C  0008               	return
  4024  040D                     __end_of_ledShow:	
  4025  007E                     btemp	set	126	;btemp
  4026  007E                     wtemp0	set	126
  4027                           
  4028                           	psect	swtext1
  4029  05CD                     __pswtext1:	
  4030  05CD                     i1S3543:	
  4031  05CD  2BF6               	ljmp	i1l2397
  4032  05CE  2BCF               	ljmp	i1l2369
  4033  05CF  2BD6               	ljmp	i1l2375
  4034  05D0  2BDE               	ljmp	i1l2381
  4035  05D1  2BE6               	ljmp	i1l2387
  4036  05D2  2BEC               	ljmp	i1l2393


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         59
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     19      75
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ledCtr->___lbdiv
    _ledCtr->___lwmod
    _keyCtr->_keyRead
    _chrgCtr->___lbdiv
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkOutA
    _ledCtr->___lbmod
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3569
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               0     0      0     980
                            ___lbdiv
                            ___lbmod
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                              3 COMMON     4     0      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     297
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0     321
                                              0 BANK0      2     2      0
                            ___lbdiv
                        _chrgPwmInit
                        _chrgPwmStop
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     321
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            4     4      0    1159
                                              4 COMMON     2     2      0
                                             17 BANK0      2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0    1042
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1    1042
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
   _chrgCtr
     ___lbdiv
     _chrgPwmInit
     _chrgPwmStop
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
     ___lwmod
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     13      4B       4       93.8%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      56       7        0.0%
DATA                 0      0      56       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Jul 18 17:56:39 2025

            _protectFlag 004F                        pc 0002                       PL2 01E4  
                     PL4 01F3                       PL6 0112                       PL8 05B0  
                     fsr 0004                      PL10 01FC                      l810 0278  
                    l661 0450                      l665 0467                      l882 014A  
                    l778 04EC                      l892 01C9                      l888 0185  
                    _GIE 005F                      _RB0 0030                      _RB1 0031  
                    _PR2 0011      __size_of_ADC_Sample 00CC                      fsr0 0004  
                    indf 0000          __end_of_AD_Init 05CD                     l3001 012A  
                   l3011 0134                     l3003 012C                     l1159 059A  
                   l2311 05A7                     l3041 0181                     l3017 0135  
                   l3121 0223                     l3201 02A9                     l3051 01CD  
                   l3035 016F                     l3027 0155                     l3131 0239  
                   l2155 05D6                     l2149 05C6                     l3301 00AB  
                   l3039 0179                     l3143 024D                     l3135 023A  
                   l3119 0222                     l3311 00C7                     l3215 0024  
                   l3401 0320                     l3305 00BD                     l2193 054F  
                   l3171 0272                     l3163 0266                     l3155 025A  
                   l3139 0245                     l3331 00EC                     l3315 00CA  
                   l3227 0034                     l3075 058A                     l3067 0576  
                   l3413 0349                     l3421 0354                     l3317 00CC  
                   l3253 0059                     l3229 0036                     l3167 026C  
                   l3159 0260                     l3335 00EF                     l3247 0055  
                   l2297 0594                     l3329 00EB                     l3249 0057  
                   l3089 04FD                     l3097 0510                     l3521 0484  
                   l3419 0352                     l3187 029C                     l3355 010F  
                   l3275 007B                     l3267 0070                     l3259 0063  
                   l3339 00F3                     l3443 0385                     l3435 0369  
                   l3189 029F                     l3197 02A5                     l3277 007D  
                   l3453 0395                     l3445 0387                     l3375 02DC  
                   l3391 030C                     l3295 009F                     l3287 0097  
                   l2751 04DD                     l2743 04D1                     l3455 0399  
                   l3463 03A1                     l3289 0099                     l2753 04DF  
                   l3457 039C                     l3379 02DF                     l3299 00A5  
                   l3467 03A7                     l3397 0319                     l2749 04DA  
                   l2757 04E3                     l2791 04AE                     l3487 0458  
                   l2777 0490                     l2789 04AC                     l2797 04BC  
                   _CHS4 04B6                     _IOCA 0089                     _IOCB 0009  
                   u3125 0175                     u3135 017F                     u3175 01BF  
                   u4207 02AE                     u3255 0503                     _PIE1 000E  
                   u4217 031E                     u3195 01D6                     u4227 0359  
                   u4237 0126                     u3475 0284                     u3715 00BB  
                   _PEIE 005E                     _RAIE 0073                     _RAIF 006B  
                   _RBIE 005B                     _RBIF 0058                     u3755 00DF  
                   _PIR1 000D                     u3875 02FE                     _WPDA 0087  
                   _WPUA 0088                     _WPUB 0008                     _main 044B  
                   btemp 007E                     start 000C            ??_Init_System 0073  
                  ?_main 0070          __end_of___lbdiv 05A9          __end_of___lbmod 058E  
                  _T2CON 0013          __end_of___lwmod 0515                    i1l656 0569  
          _countHalfFull 0050                    _PORTA 0086                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0005                    _PWMTH 0018  
                  _PWMTL 0017          __end_of_chrgCtr 0112          __end_of_ledShow 040D  
        __end_of_keyRead 0555                    pclath 000A          __end_of_pwmInit 05C6  
        __end_of_pwmStop 05D6                    status 0003                    wtemp0 007E  
        __end_of_workCtr 04C0          ___lbdiv@divisor 0073            _addPowerCount 0048  
        ___lbdiv@counter 0075          __initialization 000D             __end_of_main 0486  
   __size_of_chrgPwmInit 0007     __size_of_chrgPwmStop 0003                   ??_main 0077  
              ??_AD_Init 0073      __end_of_Init_System 0537                   _ADCON0 0095  
                 _ADCON1 0096                   i1S3543 05CD                   _ADRESH 0099  
                 _ADRESL 0098                   _ANSEL0 0093                   _GODONE 04A9  
                 i1l2403 0401                   i1l2381 03DE                   i1l2375 03D6  
                 i1l2393 03EC                   i1l2369 03CF                   i1l2387 03E6  
                 i1l2397 03F6                   i1l2921 0566                   _LDO_EN 04B2  
                 _INTCON 000B                   _OSCCON 0014                   _TMR2IE 0071  
                 _TMR2IF 0069                   _PWMD0L 0019                   _PWMD1L 001A  
           ??_ADC_Sample 0057             keyCtr@kclick 0074       __size_of_Isr_Timer 001D  
             _Sleep_Mode 040D                ??___lbdiv 0074                ??___lbmod 0074  
                 _ledCnt 004D                   _ledCtr 035C                ??___lwmod 0077  
                 _keyCtr 04C0                ??_chrgCtr 0057                   _pwStep 0044  
                 _result 0032                ??_ledShow 0070                ??_keyRead 0073  
     __end_of_ADC_Sample 01E4                   saved_w 007E                ??_pwmInit 0073  
              ??_pwmStop 0073                ??_workCtr 0073         ___lbdiv@dividend 0074  
             _batADValue 002C          ___lbmod@divisor 0073  __end_of__initialization 0016  
        ___lbmod@counter 0058          _workOverOutTime 004E           __pcstackCOMMON 0070  
     __size_of_checkOutA 00B0              _Init_System 0515               __end_ofPL2 01F3  
             __end_ofPL4 01FC               __end_ofPL6 0118               __end_ofPL8 05B6  
       ___lbdiv@quotient 0076        __end_of_Isr_Timer 0572               _checkBatAD 02B1  
             __pbssBANK0 0020             _chrgFullFlag 0052              ?_Sleep_Mode 0070  
             __pmaintext 044B               __pintentry 0004                  ?_ledCtr 0070  
           _chrgWaitTime 003B                  ?_keyCtr 0070               _ledCntTime 0039  
                _AD_Init 05C6                  _PWM01DT 001F                  _PWMD01H 001E  
                _PWMCON0 0015                  _PWMCON1 0016                  _PWMCON2 001D  
      __end_of_checkOutA 02B1                  _IntFlag 0053               _intCount10 0051  
        ADC_Sample@adldo 0073          ADC_Sample@admax 0064          ADC_Sample@admin 0062  
        ADC_Sample@adsum 005E                  ___lbdiv 058E                  ___lbmod 0572  
                _addTime 003D                  ___lwmod 04F1          __size_of_ledCtr 005D  
        __size_of_keyCtr 0031                  _chrgCtr 0018               _lowBatFlag 0037  
                __ptext1 0486                  __ptext2 05D3                  __ptext3 05BE  
                __ptext4 035C                  __ptext5 04F1                  __ptext6 0572  
                __ptext7 04C0                  __ptext8 0537                  __ptext9 0018  
                _ledShow 03B9                  _ledStep 0078                  _count1s 0054  
                _count5s 0026                  _count8s 0022                  _maxDuty 004A  
                _keyRead 0537      __size_of_Sleep_Mode 003E                  _pwmInit 05BE  
                _subTime 003C              ?_checkBatAD 0070                  _pwmStop 05D3  
             _preLedStep 0038                  clrloop0 05B7                  _workCtr 0486  
             _outADValue 002E     end_of_initialization 0016            _longPressFlag 004B  
          ??_chrgPwmInit 0073            ??_chrgPwmStop 0073         ___lbmod@dividend 0057  
            ___lbmod@rem 0059      __size_of_checkBatAD 00AB             ?_Init_System 0070  
         __end_of_ledCtr 03B9           __end_of_keyCtr 04F1      __end_of_chrgPwmInit 05B0  
    __end_of_chrgPwmStop 05D9              __end_ofPL10 0201      start_initialization 000D  
              _Isr_Timer 0555             ??_Sleep_Mode 0073                 ??_ledCtr 0077  
      ADC_Sample@ad_temp 0066                 ??_keyCtr 0074                 ?_AD_Init 0070  
            __pbssCOMMON 0077                ___latbits 0000            __pcstackBANK0 0057  
     __end_of_Sleep_Mode 044B               ?_Isr_Timer 0070                _checkOutA 0201  
              __pnvBANK0 006A              _chrgMaxDuty 003A                _chrgMaxAD 003F  
            _chrgPwmInit 05A9                 ?___lbdiv 0073                 ?___lbmod 0073  
            _chrgPwmStop 05D6                 ?___lwmod 0073                 ?_chrgCtr 0070  
              __pswtext1 05CD                _count900s 0020                 ?_ledShow 0070  
               ?_keyRead 0070                _firstTime 006A           ADC_Sample@adch 005C  
               ?_pwmInit 0070                _fullCount 0028             ??_checkBatAD 0074  
               ?_pwmStop 0070                _lockCount 003E                 ?_workCtr 0070  
            ADC_Sample@i 005D              ADC_Sample@j 005B        interrupt_function 0004  
             ?_checkOutA 0070                clear_ram0 05B6                _prePwStep 0077  
            _reChrgCount 0043                _sleepTime 0036                _overCount 0049  
     __end_of_checkBatAD 035C     __size_of_Init_System 0022                _startTime 0046  
       __size_of_AD_Init 0007         keyRead@keyStatus 0073              ??_Isr_Timer 0070  
             _ADC_Sample 0118         __size_of___lbdiv 001B         __size_of___lbmod 001C  
       __size_of___lwmod 0024              _lockLedStep 0042         __size_of_chrgCtr 00FA  
       __size_of_ledShow 0054         __size_of_keyRead 001E                 _adresult 0034  
               _chrgFlag 007A                 _chrgMode 0040                 __ptext10 05D6  
               __ptext11 05A9                 __ptext20 03B9                 __ptext12 058E  
               __ptext13 0201                 __ptext14 02B1                 __ptext15 0118  
               __ptext16 040D                 __ptext17 0515                 __ptext18 05C6  
               __ptext19 0555         __size_of_pwmInit 0008         __size_of_pwmStop 0003  
               _count50s 002A         __size_of_workCtr 003A                 _keyCount 004C  
               _intCount 0055            __size_of_main 003B              ??_checkOutA 0074  
       checkOutA@maxAout 0069                 _tempDuty 0047                 _test_adc 0056  
               _power_ad 0030                 _workStep 0079             _overChrgTime 0045  
               intlevel1 0000         ___lwmod@dividend 0075              ?_ADC_Sample 0073  
           ?_chrgPwmInit 0070             _overWorkTime 0024             ?_chrgPwmStop 0070  
            _showBatTime 0041               _OPTION_REG 0001          ___lwmod@divisor 0073  
        ___lwmod@counter 0057  
