

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 14 11:18:05 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	swtext1,local,class=CONST,delta=2
    38                           	psect	pa_nodes0,global,class=CODE,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     
    41                           ; Version 1.45
    42                           ; Generated 16/11/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16F887 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	strings
    77  0600                     __pstrings:	
    78  0600                     stringtab:	
    79  0600                     __stringtab:	
    80  0600                     stringcode:	
    81                           ;	String table - string pointers are 1 byte each
    82                           
    83  0600                     stringdir:	
    84  0600  3006               	movlw	high stringdir
    85  0601  008A               	movwf	10
    86  0602  0804               	movf	4,w
    87  0603  0A84               	incf	4,f
    88  0604  0782               	addwf	2,f
    89  0605                     __stringbase:	
    90  0605  3400               	retlw	0
    91  0606                     __end_of__stringtab:	
    92  0606                     _numArray:	
    93  0606  343F               	retlw	63
    94  0607  3406               	retlw	6
    95  0608  345B               	retlw	91
    96  0609  344F               	retlw	79
    97  060A  3466               	retlw	102
    98  060B  346D               	retlw	109
    99  060C  347D               	retlw	125
   100  060D  3407               	retlw	7
   101  060E  347F               	retlw	127
   102  060F  346F               	retlw	111
   103  0610  3471               	retlw	113
   104  0611  3479               	retlw	121
   105  0612  3450               	retlw	80
   106  0613  3476               	retlw	118
   107  0614                     __end_of_numArray:	
   108                           
   109                           	psect	nvBANK0
   110  006D                     __pnvBANK0:	
   111  006D                     _geweiNum:	
   112  006D                     	ds	1
   113  006E                     _shiweiNum:	
   114  006E                     	ds	1
   115  006F                     _firstTime:	
   116  006F                     	ds	1
   117  001D                     _PWMCON2	set	29
   118  0018                     _PWMTH	set	24
   119  0017                     _PWMTL	set	23
   120  0016                     _PWMCON1	set	22
   121  0015                     _PWMCON0	set	21
   122  0014                     _OSCCON	set	20
   123  0013                     _T2CON	set	19
   124  0011                     _PR2	set	17
   125  000E                     _PIE1	set	14
   126  000D                     _PIR1	set	13
   127  000B                     _INTCON	set	11
   128  0009                     _IOCB	set	9
   129  0008                     _WPUB	set	8
   130  0006                     _PORTB	set	6
   131  0005                     _TRISB	set	5
   132  0001                     _OPTION_REG	set	1
   133  0071                     _TMR2IE	set	113
   134  0073                     _RAIE	set	115
   135  0069                     _TMR2IF	set	105
   136  006B                     _RAIF	set	107
   137  0058                     _RBIF	set	88
   138  005B                     _RBIE	set	91
   139  005E                     _PEIE	set	94
   140  005F                     _GIE	set	95
   141  0033                     _RB3	set	51
   142  0034                     _RB4	set	52
   143  0035                     _RB5	set	53
   144  0036                     _RB6	set	54
   145  009E                     _PWMD23H	set	158
   146  009D                     _PWM23DT	set	157
   147  009B                     _PWMD2L	set	155
   148  0099                     _ADRESH	set	153
   149  0098                     _ADRESL	set	152
   150  0096                     _ADCON1	set	150
   151  0095                     _ADCON0	set	149
   152  0094                     _ANSEL1	set	148
   153  0093                     _ANSEL0	set	147
   154  0089                     _IOCA	set	137
   155  0088                     _WPUA	set	136
   156  0087                     _WPDA	set	135
   157  0086                     _PORTA	set	134
   158  0085                     _TRISA	set	133
   159  04B2                     _LDO_EN	set	1202
   160  04B6                     _CHS4	set	1206
   161  04A9                     _GODONE	set	1193
   162  0432                     _RA2	set	1074
   163  0433                     _RA3	set	1075
   164  0434                     _RA4	set	1076
   165  0435                     _RA5	set	1077
   166                           
   167                           	psect	cinit
   168  000D                     start_initialization:	
   169                           ; #config settings
   170                           
   171  000D                     __initialization:	
   172  000D  3020               	movlw	low __pbssBANK0
   173                           
   174                           ; Clear objects allocated to COMMON
   175  000E  01F8               	clrf	__pbssCOMMON& (0+127)
   176  000F  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   177  0010  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   178                           
   179                           ; Clear objects allocated to BANK0
   180  0011  1383               	bcf	3,7	;select IRP bank0
   181  0012  0084               	movwf	4
   182  0013  3060               	movlw	low (__pbssBANK0+64)
   183  0014  2668               	fcall	clear_ram0
   184  0015                     end_of_initialization:	
   185                           ;End of C runtime variable initialization code
   186                           
   187  0015                     __end_of__initialization:	
   188  0015  0183               	clrf	3
   189  0016  2CBF               	ljmp	_main	;jump to C main() function
   190                           
   191                           	psect	bssCOMMON
   192  0078                     __pbssCOMMON:	
   193  0078                     _jrStep:	
   194  0078                     	ds	1
   195  0079                     _prePwStep:	
   196  0079                     	ds	1
   197  007A                     _workStep:	
   198  007A                     	ds	1
   199                           
   200                           	psect	bssBANK0
   201  0020                     __pbssBANK0:	
   202  0020                     _jrStartTime:	
   203  0020                     	ds	2
   204  0022                     _count900s:	
   205  0022                     	ds	2
   206  0024                     _count8s:	
   207  0024                     	ds	2
   208  0026                     _overWorkTime:	
   209  0026                     	ds	2
   210  0028                     _count5s:	
   211  0028                     	ds	2
   212  002A                     _fullCount:	
   213  002A                     	ds	2
   214  002C                     _count50s:	
   215  002C                     	ds	2
   216  002E                     _batADValue:	
   217  002E                     	ds	2
   218  0030                     _outADValue:	
   219  0030                     	ds	2
   220  0032                     _power_ad:	
   221  0032                     	ds	2
   222  0034                     _result:	
   223  0034                     	ds	2
   224  0036                     _adresult:	
   225  0036                     	ds	2
   226  0038                     _jrWaitTime:	
   227  0038                     	ds	1
   228  0039                     _jrDutyFX:	
   229  0039                     	ds	1
   230  003A                     _jrDuty:	
   231  003A                     	ds	1
   232  003B                     _jrPwmTime:	
   233  003B                     	ds	1
   234  003C                     _jrShowTime:	
   235  003C                     	ds	1
   236  003D                     _motorPwmFlag:	
   237  003D                     	ds	1
   238  003E                     _chrgPwmFlag:	
   239  003E                     	ds	1
   240  003F                     _prejrStep:	
   241  003F                     	ds	1
   242  0040                     _preWorkStep:	
   243  0040                     	ds	1
   244  0041                     _sleepTime:	
   245  0041                     	ds	1
   246  0042                     _lowBatFlag:	
   247  0042                     	ds	1
   248  0043                     _ledCntTime:	
   249  0043                     	ds	1
   250  0044                     _chrgMaxDuty:	
   251  0044                     	ds	1
   252  0045                     _chrgWaitTime:	
   253  0045                     	ds	1
   254  0046                     _subTime:	
   255  0046                     	ds	1
   256  0047                     _addTime:	
   257  0047                     	ds	1
   258  0048                     _lockCount:	
   259  0048                     	ds	1
   260  0049                     _chrgMaxAD:	
   261  0049                     	ds	1
   262  004A                     _chrgMode:	
   263  004A                     	ds	1
   264  004B                     _showBatTime:	
   265  004B                     	ds	1
   266  004C                     _reChrgCount:	
   267  004C                     	ds	1
   268  004D                     _pwStep:	
   269  004D                     	ds	1
   270  004E                     _overChrgTime:	
   271  004E                     	ds	1
   272  004F                     _startTime:	
   273  004F                     	ds	1
   274  0050                     _overCount:	
   275  0050                     	ds	1
   276  0051                     _maxDuty:	
   277  0051                     	ds	1
   278  0052                     _longPressFlag2:	
   279  0052                     	ds	1
   280  0053                     _longPressFlag:	
   281  0053                     	ds	1
   282  0054                     _keyCount2:	
   283  0054                     	ds	1
   284  0055                     _keyCount:	
   285  0055                     	ds	1
   286  0056                     _ledCnt:	
   287  0056                     	ds	1
   288  0057                     _workOverOutTime:	
   289  0057                     	ds	1
   290  0058                     _protectFlag:	
   291  0058                     	ds	1
   292  0059                     _intCount10:	
   293  0059                     	ds	1
   294  005A                     _chrgFullFlag:	
   295  005A                     	ds	1
   296  005B                     _chrgFlag:	
   297  005B                     	ds	1
   298  005C                     _IntFlag:	
   299  005C                     	ds	1
   300  005D                     _count1s:	
   301  005D                     	ds	1
   302  005E                     _intCount:	
   303  005E                     	ds	1
   304  005F                     _test_adc:	
   305  005F                     	ds	1
   306                           
   307                           	psect	clrtext
   308  0668                     clear_ram0:	
   309                           ;	Called with FSR containing the base address, and
   310                           ;	W with the last address+1
   311                           
   312  0668  0064               	clrwdt	;clear the watchdog before getting into this loop
   313  0669                     clrloop0:	
   314  0669  0180               	clrf	0	;clear RAM location pointed to by FSR
   315  066A  0A84               	incf	4,f	;increment pointer
   316  066B  0604               	xorwf	4,w	;XOR with final address
   317  066C  1903               	btfsc	3,2	;have we reached the end yet?
   318  066D  3400               	retlw	0	;all done for this memory range, return
   319  066E  0604               	xorwf	4,w	;XOR again to restore value
   320  066F  2E69               	goto	clrloop0	;do the next byte
   321                           
   322                           	psect	cstackBANK1
   323  00A0                     __pcstackBANK1:	
   324  00A0                     ??_checkOutA:	
   325  00A0                     ??_checkBatAD:	
   326                           ; 1 bytes @ 0x0
   327                           
   328                           
   329                           ; 1 bytes @ 0x0
   330  00A0                     	ds	2
   331  00A2                     checkOutA@maxtempV:	
   332                           
   333                           ; 1 bytes @ 0x2
   334  00A2                     	ds	1
   335                           
   336                           	psect	cstackCOMMON
   337  0070                     __pcstackCOMMON:	
   338  0070                     ?_ledShow:	
   339  0070                     ??_ledShow:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_Init_System:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ?_AD_Init:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_checkOutA:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_jrPwm:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_chrgCtr:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_checkBatAD:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_keyCtr:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_workCtr:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_ledCtr:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_Sleep_Mode:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_chrgPwmStop:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_pwmStop:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_chrgPwmInit:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_pwmInit:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_Isr_Timer:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ??_Isr_Timer:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_main:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_keyRead:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_keyRead2:	
   397                           ; 1 bytes @ 0x0
   398                           
   399                           
   400                           ; 1 bytes @ 0x0
   401  0070                     	ds	3
   402  0073                     ??_Init_System:	
   403  0073                     ??_AD_Init:	
   404                           ; 1 bytes @ 0x3
   405                           
   406  0073                     ??_jrPwm:	
   407                           ; 1 bytes @ 0x3
   408                           
   409  0073                     ??_chrgCtr:	
   410                           ; 1 bytes @ 0x3
   411                           
   412  0073                     ??_workCtr:	
   413                           ; 1 bytes @ 0x3
   414                           
   415  0073                     ??_Sleep_Mode:	
   416                           ; 1 bytes @ 0x3
   417                           
   418  0073                     ??_chrgPwmStop:	
   419                           ; 1 bytes @ 0x3
   420                           
   421  0073                     ??_pwmStop:	
   422                           ; 1 bytes @ 0x3
   423                           
   424  0073                     ??_chrgPwmInit:	
   425                           ; 1 bytes @ 0x3
   426                           
   427  0073                     ??_pwmInit:	
   428                           ; 1 bytes @ 0x3
   429                           
   430  0073                     ?_ADC_Sample:	
   431                           ; 1 bytes @ 0x3
   432                           
   433  0073                     ??_keyRead:	
   434                           ; 1 bytes @ 0x3
   435                           
   436  0073                     ??_keyRead2:	
   437                           ; 1 bytes @ 0x3
   438                           
   439  0073                     ?___bmul:	
   440                           ; 1 bytes @ 0x3
   441                           
   442  0073                     ?___lbdiv:	
   443                           ; 1 bytes @ 0x3
   444                           
   445  0073                     ?___lbmod:	
   446                           ; 1 bytes @ 0x3
   447                           
   448  0073                     keyRead@keyStatus:	
   449                           ; 1 bytes @ 0x3
   450                           
   451  0073                     keyRead2@keyStatus:	
   452                           ; 1 bytes @ 0x3
   453                           
   454  0073                     ADC_Sample@adldo:	
   455                           ; 1 bytes @ 0x3
   456                           
   457  0073                     ___bmul@multiplicand:	
   458                           ; 1 bytes @ 0x3
   459                           
   460  0073                     ___lbdiv@divisor:	
   461                           ; 1 bytes @ 0x3
   462                           
   463  0073                     ___lbmod@divisor:	
   464                           ; 1 bytes @ 0x3
   465                           
   466                           
   467                           ; 1 bytes @ 0x3
   468  0073                     	ds	1
   469  0074                     ??_keyCtr:	
   470  0074                     ??_ADC_Sample:	
   471                           ; 1 bytes @ 0x4
   472                           
   473  0074                     ??___bmul:	
   474                           ; 1 bytes @ 0x4
   475                           
   476  0074                     ??___lbdiv:	
   477                           ; 1 bytes @ 0x4
   478                           
   479  0074                     ??___lbmod:	
   480                           ; 1 bytes @ 0x4
   481                           
   482  0074                     keyCtr@kclick:	
   483                           ; 1 bytes @ 0x4
   484                           
   485  0074                     ___bmul@product:	
   486                           ; 1 bytes @ 0x4
   487                           
   488  0074                     ___lbdiv@dividend:	
   489                           ; 1 bytes @ 0x4
   490                           
   491                           
   492                           ; 1 bytes @ 0x4
   493  0074                     	ds	1
   494  0075                     keyCtr@kclick2:	
   495  0075                     ___bmul@multiplier:	
   496                           ; 1 bytes @ 0x5
   497                           
   498  0075                     ___lbdiv@counter:	
   499                           ; 1 bytes @ 0x5
   500                           
   501  0075                     ___lbmod@dividend:	
   502                           ; 1 bytes @ 0x5
   503                           
   504                           
   505                           ; 1 bytes @ 0x5
   506  0075                     	ds	1
   507  0076                     ___lbdiv@quotient:	
   508  0076                     ___lbmod@counter:	
   509                           ; 1 bytes @ 0x6
   510                           
   511                           
   512                           ; 1 bytes @ 0x6
   513  0076                     	ds	1
   514  0077                     ___lbmod@rem:	
   515                           
   516                           ; 1 bytes @ 0x7
   517  0077                     	ds	1
   518  0078                     ??_ledCtr:	
   519  0078                     ??_main:	
   520                           ; 1 bytes @ 0x8
   521                           
   522                           
   523                           	psect	cstackBANK0
   524  0060                     __pcstackBANK0:	
   525                           ; 1 bytes @ 0x8
   526                           
   527  0060                     ADC_Sample@j:	
   528                           
   529                           ; 1 bytes @ 0x0
   530  0060                     	ds	1
   531  0061                     ADC_Sample@adch:	
   532                           
   533                           ; 1 bytes @ 0x1
   534  0061                     	ds	1
   535  0062                     ADC_Sample@i:	
   536                           
   537                           ; 1 bytes @ 0x2
   538  0062                     	ds	1
   539  0063                     ADC_Sample@adsum:	
   540                           
   541                           ; 4 bytes @ 0x3
   542  0063                     	ds	4
   543  0067                     ADC_Sample@admin:	
   544                           
   545                           ; 2 bytes @ 0x7
   546  0067                     	ds	2
   547  0069                     ADC_Sample@admax:	
   548                           
   549                           ; 2 bytes @ 0x9
   550  0069                     	ds	2
   551  006B                     ADC_Sample@ad_temp:	
   552                           
   553                           ; 2 bytes @ 0xB
   554  006B                     	ds	2
   555                           
   556                           	psect	maintext
   557  04BF                     __pmaintext:	
   558 ;;
   559 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   560 ;;
   561 ;; *************** function _main *****************
   562 ;; Defined at:
   563 ;;		line 155 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
   564 ;; Parameters:    Size  Location     Type
   565 ;;		None
   566 ;; Auto vars:     Size  Location     Type
   567 ;;		None
   568 ;; Return value:  Size  Location     Type
   569 ;;                  1    wreg      void 
   570 ;; Registers used:
   571 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   572 ;; Tracked objects:
   573 ;;		On entry : B00/0
   574 ;;		On exit  : 100/0
   575 ;;		Unchanged: 0/0
   576 ;; Data sizes:     COMMON   BANK0   BANK1
   577 ;;      Params:         0       0       0
   578 ;;      Locals:         0       0       0
   579 ;;      Temps:          0       0       0
   580 ;;      Totals:         0       0       0
   581 ;;Total ram usage:        0 bytes
   582 ;; Hardware stack levels required when called:    4
   583 ;; This function calls:
   584 ;;		_AD_Init
   585 ;;		_Init_System
   586 ;;		_Sleep_Mode
   587 ;;		_checkBatAD
   588 ;;		_checkOutA
   589 ;;		_chrgCtr
   590 ;;		_jrPwm
   591 ;;		_keyCtr
   592 ;;		_ledCtr
   593 ;;		_workCtr
   594 ;; This function is called by:
   595 ;;		Startup code after reset
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           
   600                           ;psect for function _main
   601  04BF                     _main:	
   602                           
   603                           ;main.c: 157: Init_System();
   604                           
   605                           ;incstack = 0
   606                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   607  04BF  25DD               	fcall	_Init_System
   608                           
   609                           ;main.c: 158: AD_Init();
   610  04C0  265F               	fcall	_AD_Init
   611                           
   612                           ;main.c: 159: shiweiNum = geweiNum = numArray[8];
   613  04C1  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   614  04C2  0084               	movwf	4
   615  04C3  2600               	fcall	stringdir
   616  04C4  1283               	bcf	3,5	;RP0=0, select bank0
   617  04C5  00ED               	movwf	_geweiNum
   618  04C6  00EE               	movwf	_shiweiNum
   619                           
   620                           ;main.c: 160: firstTime = 200;
   621  04C7  30C8               	movlw	200
   622  04C8  00EF               	movwf	_firstTime
   623  04C9                     l695:	
   624                           ;main.c: 161: while (1)
   625                           
   626  04C9  0064               	clrwdt	;# 
   627                           
   628                           ;main.c: 164: if(intCount10 > 10)
   629  04CA  300B               	movlw	11
   630  04CB  1283               	bcf	3,5	;RP0=0, select bank0
   631  04CC  0259               	subwf	_intCount10,w
   632  04CD  1C03               	skipc
   633  04CE  2CD1               	goto	l3308
   634                           
   635                           ;main.c: 165: {
   636                           ;main.c: 166: intCount10 = 0;
   637  04CF  01D9               	clrf	_intCount10
   638                           
   639                           ;main.c: 167: checkOutA();
   640  04D0  2393               	fcall	_checkOutA
   641  04D1                     l3308:	
   642                           
   643                           ;main.c: 168: }
   644                           ;main.c: 169: if(jrStartTime == 0 && jrStep > 0)
   645  04D1  1283               	bcf	3,5	;RP0=0, select bank0
   646  04D2  0820               	movf	_jrStartTime,w
   647  04D3  0421               	iorwf	_jrStartTime+1,w
   648  04D4  1D03               	btfss	3,2
   649  04D5  2CDA               	goto	l3314
   650  04D6  0878               	movf	_jrStep,w
   651  04D7  1903               	btfsc	3,2
   652  04D8  2CDA               	goto	l3314
   653                           
   654                           ;main.c: 170: {
   655                           ;main.c: 171: jrPwm();
   656  04D9  2627               	fcall	_jrPwm
   657  04DA                     l3314:	
   658                           
   659                           ;main.c: 172: }
   660                           ;main.c: 173: if(!IntFlag)
   661  04DA  085C               	movf	_IntFlag,w
   662  04DB  1903               	btfsc	3,2
   663  04DC  2CC9               	goto	l695
   664                           
   665                           ;main.c: 175: IntFlag = 0;
   666  04DD  01DC               	clrf	_IntFlag
   667                           
   668                           ;main.c: 176: chrgCtr();
   669  04DE  2017               	fcall	_chrgCtr
   670                           
   671                           ;main.c: 177: checkBatAD();
   672  04DF  2321               	fcall	_checkBatAD
   673                           
   674                           ;main.c: 178: if(chrgFlag == 0 && lowBatFlag == 0 && firstTime == 0)
   675  04E0  1283               	bcf	3,5	;RP0=0, select bank0
   676  04E1  085B               	movf	_chrgFlag,w
   677  04E2  1D03               	btfss	3,2
   678  04E3  2CEB               	goto	l700
   679  04E4  0842               	movf	_lowBatFlag,w
   680  04E5  1D03               	btfss	3,2
   681  04E6  2CEB               	goto	l700
   682  04E7  086F               	movf	_firstTime,w
   683  04E8  1D03               	btfss	3,2
   684  04E9  2CEB               	goto	l700
   685                           
   686                           ;main.c: 179: {
   687                           ;main.c: 180: keyCtr();
   688  04EA  246B               	fcall	_keyCtr
   689  04EB                     l700:	
   690                           
   691                           ;main.c: 181: }
   692                           ;main.c: 182: workCtr();
   693  04EB  22A4               	fcall	_workCtr
   694                           
   695                           ;main.c: 183: ledCtr();
   696  04EC  2400               	fcall	_ledCtr
   697                           
   698                           ;main.c: 184: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 && overWorkTime == 0)
   699  04ED  085B               	movf	_chrgFlag,w
   700  04EE  1D03               	btfss	3,2
   701  04EF  2D0A               	goto	l3354
   702  04F0  087A               	movf	_workStep,w
   703  04F1  1D03               	btfss	3,2
   704  04F2  2D0A               	goto	l3354
   705  04F3  0855               	movf	_keyCount,w
   706  04F4  1D03               	btfss	3,2
   707  04F5  2D0A               	goto	l3354
   708  04F6  086F               	movf	_firstTime,w
   709  04F7  1D03               	btfss	3,2
   710  04F8  2D0A               	goto	l3354
   711  04F9  084B               	movf	_showBatTime,w
   712  04FA  1D03               	btfss	3,2
   713  04FB  2D0A               	goto	l3354
   714  04FC  0826               	movf	_overWorkTime,w
   715  04FD  0427               	iorwf	_overWorkTime+1,w
   716  04FE  1D03               	btfss	3,2
   717  04FF  2D0A               	goto	l3354
   718  0500  30C8               	movlw	200
   719                           
   720                           ;main.c: 185: {
   721                           ;main.c: 186: shiweiNum = geweiNum = 0;
   722  0501  01ED               	clrf	_geweiNum
   723  0502  01EE               	clrf	_shiweiNum
   724                           
   725                           ;main.c: 187: if(++sleepTime >= 200)
   726  0503  0AC1               	incf	_sleepTime,f
   727  0504  0241               	subwf	_sleepTime,w
   728  0505  1C03               	skipc
   729  0506  2CC9               	goto	l695
   730                           
   731                           ;main.c: 188: {
   732                           ;main.c: 189: sleepTime = 0;
   733  0507  01C1               	clrf	_sleepTime
   734                           
   735                           ;main.c: 190: Sleep_Mode();
   736  0508  250C               	fcall	_Sleep_Mode
   737  0509  2CC9               	goto	l695
   738  050A                     l3354:	
   739                           
   740                           ;main.c: 193: else
   741                           ;main.c: 194: {
   742                           ;main.c: 195: sleepTime = 0;
   743  050A  01C1               	clrf	_sleepTime
   744  050B  2CC9               	goto	l695
   745  050C                     __end_of_main:	
   746                           
   747                           	psect	text1
   748  02A4                     __ptext1:	
   749 ;; *************** function _workCtr *****************
   750 ;; Defined at:
   751 ;;		line 720 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;		None
   754 ;; Auto vars:     Size  Location     Type
   755 ;;		None
   756 ;; Return value:  Size  Location     Type
   757 ;;                  1    wreg      void 
   758 ;; Registers used:
   759 ;;		wreg, status,2, status,0, pclath, cstack
   760 ;; Tracked objects:
   761 ;;		On entry : 100/0
   762 ;;		On exit  : 100/0
   763 ;;		Unchanged: 0/0
   764 ;; Data sizes:     COMMON   BANK0   BANK1
   765 ;;      Params:         0       0       0
   766 ;;      Locals:         0       0       0
   767 ;;      Temps:          1       0       0
   768 ;;      Totals:         1       0       0
   769 ;;Total ram usage:        1 bytes
   770 ;; Hardware stack levels used:    1
   771 ;; Hardware stack levels required when called:    3
   772 ;; This function calls:
   773 ;;		_pwmInit
   774 ;;		_pwmStop
   775 ;; This function is called by:
   776 ;;		_main
   777 ;; This function uses a non-reentrant model
   778 ;;
   779                           
   780                           
   781                           ;psect for function _workCtr
   782  02A4                     _workCtr:	
   783                           
   784                           ;main.c: 723: if(startTime > 0)
   785                           
   786                           ;incstack = 0
   787                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   788  02A4  084F               	movf	_startTime,w
   789  02A5  1D03               	btfss	3,2
   790                           
   791                           ;main.c: 724: {
   792                           ;main.c: 725: startTime--;
   793  02A6  03CF               	decf	_startTime,f
   794                           
   795                           ;main.c: 726: }
   796                           ;main.c: 727: if(workStep > 0)
   797  02A7  087A               	movf	_workStep,w
   798  02A8  1903               	btfsc	3,2
   799  02A9  2AEE               	goto	l2894
   800                           
   801                           ;main.c: 728: {
   802                           ;main.c: 729: if(motorPwmFlag == 0)
   803  02AA  083D               	movf	_motorPwmFlag,w
   804  02AB  1D03               	btfss	3,2
   805  02AC  2AAE               	goto	l2864
   806                           
   807                           ;main.c: 730: {
   808                           ;main.c: 731: pwmInit();
   809  02AD  2655               	fcall	_pwmInit
   810  02AE                     l2864:	
   811                           
   812                           ;main.c: 733: }
   813                           ;main.c: 734: maxDuty = 69 + (workStep*4);
   814  02AE  087A               	movf	_workStep,w
   815  02AF  00F3               	movwf	??_workCtr
   816  02B0  3001               	movlw	1
   817  02B1  1003               	clrc
   818  02B2                     L1:	
   819  02B2  0DF3               	rlf	??_workCtr,f
   820  02B3  3EFF               	addlw	-1
   821  02B4  1003               	clrc
   822  02B5  1D03               	skipz
   823  02B6  2AB2               	goto	L1
   824  02B7  0D73               	rlf	??_workCtr,w
   825  02B8  3E45               	addlw	69
   826  02B9  00D1               	movwf	_maxDuty
   827                           
   828                           ;main.c: 735: PWMD23H = 0X00;
   829  02BA  1683               	bsf	3,5	;RP0=1, select bank1
   830  02BB  019E               	clrf	30	;volatile
   831                           
   832                           ;main.c: 736: PWMD2L = maxDuty;
   833  02BC  1283               	bcf	3,5	;RP0=0, select bank0
   834  02BD  0851               	movf	_maxDuty,w
   835  02BE  1683               	bsf	3,5	;RP0=1, select bank1
   836  02BF  009B               	movwf	27	;volatile
   837                           
   838                           ;main.c: 737: if(overCount >= 5)
   839  02C0  3005               	movlw	5
   840  02C1  1283               	bcf	3,5	;RP0=0, select bank0
   841  02C2  0250               	subwf	_overCount,w
   842  02C3  1C03               	skipc
   843  02C4  2ADC               	goto	l2886
   844                           
   845                           ;main.c: 738: {
   846                           ;main.c: 739: if(++count5s > 300)
   847  02C5  0AA8               	incf	_count5s,f
   848  02C6  1903               	skipnz
   849  02C7  0AA9               	incf	_count5s+1,f
   850  02C8  3001               	movlw	1
   851  02C9  0229               	subwf	_count5s+1,w
   852  02CA  302D               	movlw	45
   853  02CB  1903               	skipnz
   854  02CC  0228               	subwf	_count5s,w
   855  02CD  1C03               	skipc
   856  02CE  2ADE               	goto	l2888
   857  02CF  30E8               	movlw	232
   858                           
   859                           ;main.c: 740: {
   860                           ;main.c: 741: count5s = 0;
   861  02D0  01A8               	clrf	_count5s
   862  02D1  01A9               	clrf	_count5s+1
   863                           
   864                           ;main.c: 742: overWorkTime = 1000;
   865  02D2  00A6               	movwf	_overWorkTime
   866  02D3  3003               	movlw	3
   867  02D4  00A7               	movwf	_overWorkTime+1
   868                           
   869                           ;main.c: 743: preWorkStep = workStep;
   870  02D5  087A               	movf	_workStep,w
   871  02D6  00C0               	movwf	_preWorkStep
   872                           
   873                           ;main.c: 744: prejrStep = jrStep;
   874  02D7  0878               	movf	_jrStep,w
   875  02D8  00BF               	movwf	_prejrStep
   876                           
   877                           ;main.c: 745: workStep = 0;
   878  02D9  01FA               	clrf	_workStep
   879                           
   880                           ;main.c: 746: jrStep = 0;
   881  02DA  01F8               	clrf	_jrStep
   882  02DB  2ADE               	goto	l2888
   883  02DC                     l2886:	
   884                           
   885                           ;main.c: 749: else
   886                           ;main.c: 750: {
   887                           ;main.c: 751: count5s = 0;
   888  02DC  01A8               	clrf	_count5s
   889  02DD  01A9               	clrf	_count5s+1
   890  02DE                     l2888:	
   891                           
   892                           ;main.c: 752: }
   893                           ;main.c: 753: if(count1s == 0 && ++count900s >= 900)
   894  02DE  085D               	movf	_count1s,w
   895  02DF  1D03               	btfss	3,2
   896  02E0  2AF2               	goto	l2898
   897  02E1  0AA2               	incf	_count900s,f
   898  02E2  1903               	skipnz
   899  02E3  0AA3               	incf	_count900s+1,f
   900  02E4  3003               	movlw	3
   901  02E5  0223               	subwf	_count900s+1,w
   902  02E6  3084               	movlw	132
   903  02E7  1903               	skipnz
   904  02E8  0222               	subwf	_count900s,w
   905  02E9  1C03               	skipc
   906  02EA  2AF2               	goto	l2898
   907                           
   908                           ;main.c: 754: {
   909                           ;main.c: 755: workStep = 0;
   910  02EB  01FA               	clrf	_workStep
   911                           
   912                           ;main.c: 756: jrStep = 0;
   913  02EC  01F8               	clrf	_jrStep
   914  02ED  2AF2               	goto	l2898
   915  02EE                     l2894:	
   916                           
   917                           ;main.c: 759: else
   918                           ;main.c: 760: {
   919                           ;main.c: 761: pwmStop();
   920  02EE  2670               	fcall	_pwmStop
   921                           
   922                           ;main.c: 762: count900s = 0;
   923  02EF  1283               	bcf	3,5	;RP0=0, select bank0
   924  02F0  01A2               	clrf	_count900s
   925  02F1  01A3               	clrf	_count900s+1
   926  02F2                     l2898:	
   927                           
   928                           ;main.c: 763: }
   929                           ;main.c: 764: if(jrStep == 0)
   930  02F2  0878               	movf	_jrStep,w
   931  02F3  1D03               	btfss	3,2
   932  02F4  2AF8               	goto	l2904
   933                           
   934                           ;main.c: 765: {
   935                           ;main.c: 766: jrDuty = 0;
   936  02F5  01BA               	clrf	_jrDuty
   937                           
   938                           ;main.c: 767: RB4 = 0;
   939  02F6  1206               	bcf	6,4	;volatile
   940                           
   941                           ;main.c: 768: }
   942  02F7  0008               	return
   943  02F8                     l2904:	
   944                           
   945                           ;main.c: 769: else if(jrStartTime > 0)
   946  02F8  0820               	movf	_jrStartTime,w
   947  02F9  0421               	iorwf	_jrStartTime+1,w
   948  02FA  1903               	btfsc	3,2
   949  02FB  2AFE               	goto	l2908
   950                           
   951                           ;main.c: 770: {
   952                           ;main.c: 771: RB4 = 1;
   953  02FC  1606               	bsf	6,4	;volatile
   954                           
   955                           ;main.c: 772: }
   956  02FD  0008               	return
   957  02FE                     l2908:	
   958                           
   959                           ;main.c: 773: else if(jrStep > 0)
   960  02FE  0878               	movf	_jrStep,w
   961  02FF  1903               	btfsc	3,2
   962  0300  0008               	return
   963                           
   964                           ;main.c: 774: {
   965                           ;main.c: 775: if(jrDutyFX)
   966  0301  0839               	movf	_jrDutyFX,w
   967  0302  1903               	btfsc	3,2
   968  0303  2B12               	goto	l2920
   969                           
   970                           ;main.c: 776: {
   971                           ;main.c: 777: if(jrDuty > 30)
   972  0304  301F               	movlw	31
   973  0305  023A               	subwf	_jrDuty,w
   974  0306  1C03               	skipc
   975  0307  2B0A               	goto	l2916
   976                           
   977                           ;main.c: 778: {
   978                           ;main.c: 779: jrDuty--;
   979  0308  03BA               	decf	_jrDuty,f
   980                           
   981                           ;main.c: 780: }
   982  0309  0008               	return
   983  030A                     l2916:	
   984                           
   985                           ;main.c: 781: else
   986                           ;main.c: 782: {
   987                           ;main.c: 783: if(++jrWaitTime > 21)
   988  030A  3016               	movlw	22
   989  030B  0AB8               	incf	_jrWaitTime,f
   990  030C  0238               	subwf	_jrWaitTime,w
   991  030D  1C03               	skipc
   992  030E  0008               	return
   993                           
   994                           ;main.c: 784: {
   995                           ;main.c: 785: jrWaitTime = 0;
   996  030F  01B8               	clrf	_jrWaitTime
   997                           
   998                           ;main.c: 786: jrDutyFX = 0;
   999  0310  01B9               	clrf	_jrDutyFX
  1000  0311  0008               	return
  1001  0312                     l2920:	
  1002                           
  1003                           ;main.c: 790: else
  1004                           ;main.c: 791: {
  1005                           ;main.c: 792: if(jrDuty < 100)
  1006  0312  3064               	movlw	100
  1007  0313  023A               	subwf	_jrDuty,w
  1008  0314  1803               	skipnc
  1009  0315  2B18               	goto	l2924
  1010                           
  1011                           ;main.c: 793: {
  1012                           ;main.c: 794: jrDuty++;
  1013  0316  0ABA               	incf	_jrDuty,f
  1014                           
  1015                           ;main.c: 795: }
  1016  0317  0008               	return
  1017  0318                     l2924:	
  1018                           
  1019                           ;main.c: 796: else
  1020                           ;main.c: 797: {
  1021                           ;main.c: 798: if(++jrWaitTime > 3)
  1022  0318  3004               	movlw	4
  1023  0319  0AB8               	incf	_jrWaitTime,f
  1024  031A  0238               	subwf	_jrWaitTime,w
  1025  031B  1C03               	skipc
  1026  031C  0008               	return
  1027                           
  1028                           ;main.c: 799: {
  1029                           ;main.c: 800: jrWaitTime = 0;
  1030  031D  01B8               	clrf	_jrWaitTime
  1031                           
  1032                           ;main.c: 801: jrDutyFX = 1;
  1033  031E  01B9               	clrf	_jrDutyFX
  1034  031F  0AB9               	incf	_jrDutyFX,f
  1035  0320  0008               	return
  1036  0321                     __end_of_workCtr:	
  1037                           
  1038                           	psect	text2
  1039  0655                     __ptext2:	
  1040 ;; *************** function _pwmInit *****************
  1041 ;; Defined at:
  1042 ;;		line 1081 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  1043 ;; Parameters:    Size  Location     Type
  1044 ;;		None
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;		None
  1047 ;; Return value:  Size  Location     Type
  1048 ;;                  1    wreg      void 
  1049 ;; Registers used:
  1050 ;;		wreg, status,2
  1051 ;; Tracked objects:
  1052 ;;		On entry : 100/0
  1053 ;;		On exit  : 100/0
  1054 ;;		Unchanged: 0/0
  1055 ;; Data sizes:     COMMON   BANK0   BANK1
  1056 ;;      Params:         0       0       0
  1057 ;;      Locals:         0       0       0
  1058 ;;      Temps:          0       0       0
  1059 ;;      Totals:         0       0       0
  1060 ;;Total ram usage:        0 bytes
  1061 ;; Hardware stack levels used:    1
  1062 ;; Hardware stack levels required when called:    2
  1063 ;; This function calls:
  1064 ;;		Nothing
  1065 ;; This function is called by:
  1066 ;;		_workCtr
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           
  1071                           ;psect for function _pwmInit
  1072  0655                     _pwmInit:	
  1073  0655  30C0               	movlw	192
  1074                           
  1075                           ;main.c: 1083: motorPwmFlag = 1;
  1076                           
  1077                           ;incstack = 0
  1078                           ; Regs used in _pwmInit: [wreg+status,2]
  1079  0656  01BD               	clrf	_motorPwmFlag
  1080  0657  0ABD               	incf	_motorPwmFlag,f
  1081                           
  1082                           ;main.c: 1084: PWMCON1 = 0B11000000;
  1083  0658  0096               	movwf	22	;volatile
  1084                           
  1085                           ;main.c: 1085: PWMTH = 0X00;
  1086                           
  1087                           ;main.c: 1086: PWMTL = 100;
  1088                           
  1089                           ;main.c: 1089: PWMD23H = 0;
  1090  0659  261D               	fcall	PL10	;call to abstracted procedure
  1091                           
  1092                           ;main.c: 1090: PWMD2L = 50;
  1093  065A  3032               	movlw	50
  1094  065B  009B               	movwf	27	;volatile
  1095                           
  1096                           ;main.c: 1091: PWM23DT = 0X00;
  1097  065C  019D               	clrf	29	;volatile
  1098                           
  1099                           ;main.c: 1093: PWMCON0 = 0X64;
  1100  065D  3064               	movlw	100
  1101                           
  1102                           ;main.c: 1094: PWMCON2 =0X00;
  1103  065E  2E23               	ljmp	PL14	;call to abstracted procedure
  1104  065F                     __end_of_pwmInit:	
  1105                           
  1106                           	psect	text3
  1107  0400                     __ptext3:	
  1108 ;; *************** function _ledCtr *****************
  1109 ;; Defined at:
  1110 ;;		line 368 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;		None
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;		None
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  1    wreg      void 
  1117 ;; Registers used:
  1118 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1119 ;; Tracked objects:
  1120 ;;		On entry : 100/0
  1121 ;;		On exit  : 100/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMMON   BANK0   BANK1
  1124 ;;      Params:         0       0       0
  1125 ;;      Locals:         0       0       0
  1126 ;;      Temps:          0       0       0
  1127 ;;      Totals:         0       0       0
  1128 ;;Total ram usage:        0 bytes
  1129 ;; Hardware stack levels used:    1
  1130 ;; Hardware stack levels required when called:    3
  1131 ;; This function calls:
  1132 ;;		___lbdiv
  1133 ;;		___lbmod
  1134 ;; This function is called by:
  1135 ;;		_main
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139                           
  1140                           ;psect for function _ledCtr
  1141  0400                     _ledCtr:	
  1142                           
  1143                           ;main.c: 370: if(firstTime > 0)
  1144                           
  1145                           ;incstack = 0
  1146                           ; Regs used in _ledCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1147  0400  086F               	movf	_firstTime,w
  1148  0401  1903               	btfsc	3,2
  1149  0402  2C0B               	goto	l2938
  1150                           
  1151                           ;main.c: 371: {
  1152                           ;main.c: 372: firstTime--;
  1153  0403  03EF               	decf	_firstTime,f
  1154                           
  1155                           ;main.c: 373: if(prePwStep < pwStep)
  1156  0404  084D               	movf	_pwStep,w
  1157  0405  0279               	subwf	_prePwStep,w
  1158  0406  1803               	skipnc
  1159  0407  0008               	return
  1160                           
  1161                           ;main.c: 374: {
  1162                           ;main.c: 375: prePwStep = pwStep;
  1163  0408  084D               	movf	_pwStep,w
  1164  0409  00F9               	movwf	_prePwStep
  1165  040A  0008               	return
  1166  040B                     l2938:	
  1167                           
  1168                           ;main.c: 378: else if(overWorkTime > 0)
  1169  040B  0826               	movf	_overWorkTime,w
  1170  040C  0427               	iorwf	_overWorkTime+1,w
  1171  040D  1903               	btfsc	3,2
  1172  040E  2C1E               	goto	l2946
  1173                           
  1174                           ;main.c: 379: {
  1175                           ;main.c: 380: overWorkTime--;
  1176  040F  3001               	movlw	1
  1177  0410  02A6               	subwf	_overWorkTime,f
  1178  0411  3000               	movlw	0
  1179  0412  1C03               	skipc
  1180  0413  03A7               	decf	_overWorkTime+1,f
  1181  0414  02A7               	subwf	_overWorkTime+1,f
  1182                           
  1183                           ;main.c: 381: shiweiNum = numArray[11];
  1184  0415  300C               	movlw	low (((_numArray+11)-__stringbase)| (0+32768))
  1185  0416  0084               	movwf	4
  1186  0417  2600               	fcall	stringdir
  1187  0418  00EE               	movwf	_shiweiNum
  1188                           
  1189                           ;main.c: 382: geweiNum = numArray[12];
  1190  0419  300D               	movlw	low (((_numArray+12)-__stringbase)| (0+32768))
  1191  041A  0084               	movwf	4
  1192  041B  2600               	fcall	stringdir
  1193  041C  00ED               	movwf	_geweiNum
  1194                           
  1195                           ;main.c: 383: }
  1196  041D  0008               	return
  1197  041E                     l2946:	
  1198                           
  1199                           ;main.c: 384: else if(showBatTime > 0)
  1200  041E  084B               	movf	_showBatTime,w
  1201  041F  1903               	btfsc	3,2
  1202  0420  2C30               	goto	l2954
  1203  0421  300A               	movlw	10
  1204                           
  1205                           ;main.c: 385: {
  1206                           ;main.c: 386: showBatTime--;
  1207  0422  03CB               	decf	_showBatTime,f
  1208                           
  1209                           ;main.c: 387: shiweiNum = numArray[prePwStep/10];
  1210  0423  00F3               	movwf	___lbdiv@divisor
  1211  0424  0879               	movf	_prePwStep,w
  1212  0425  25C2               	fcall	___lbdiv
  1213  0426  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1214  0427  0084               	movwf	4
  1215  0428  2600               	fcall	stringdir
  1216                           
  1217                           ;main.c: 388: geweiNum = numArray[prePwStep%10];
  1218  0429  2466               	fcall	PL12	;call to abstracted procedure
  1219  042A  25A6               	fcall	___lbmod
  1220  042B  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1221  042C  0084               	movwf	4
  1222  042D  2600               	fcall	stringdir
  1223  042E  00ED               	movwf	_geweiNum
  1224                           
  1225                           ;main.c: 389: }
  1226  042F  0008               	return
  1227  0430                     l2954:	
  1228                           
  1229                           ;main.c: 390: else if(workStep > 0)
  1230  0430  087A               	movf	_workStep,w
  1231  0431  1903               	btfsc	3,2
  1232  0432  2C52               	goto	l2972
  1233                           
  1234                           ;main.c: 391: {
  1235                           ;main.c: 392: if(jrShowTime > 0)
  1236  0433  083C               	movf	_jrShowTime,w
  1237  0434  1903               	btfsc	3,2
  1238  0435  2C48               	goto	l2968
  1239  0436  300E               	movlw	low (((_numArray+13)-__stringbase)| (0+32768))
  1240                           
  1241                           ;main.c: 393: {
  1242                           ;main.c: 394: jrShowTime--;
  1243  0437  03BC               	decf	_jrShowTime,f
  1244                           
  1245                           ;main.c: 395: shiweiNum = numArray[13];
  1246  0438  0084               	movwf	4
  1247  0439  2600               	fcall	stringdir
  1248  043A  00EE               	movwf	_shiweiNum
  1249                           
  1250                           ;main.c: 396: if(jrStep > 0)
  1251  043B  0878               	movf	_jrStep,w
  1252  043C  1903               	btfsc	3,2
  1253  043D  2C43               	goto	l2966
  1254                           
  1255                           ;main.c: 397: {
  1256                           ;main.c: 398: geweiNum = numArray[13];
  1257  043E  300E               	movlw	low (((_numArray+13)-__stringbase)| (0+32768))
  1258  043F  0084               	movwf	4
  1259  0440  2600               	fcall	stringdir
  1260  0441  00ED               	movwf	_geweiNum
  1261                           
  1262                           ;main.c: 399: }
  1263  0442  0008               	return
  1264  0443                     l2966:	
  1265                           
  1266                           ;main.c: 400: else
  1267                           ;main.c: 401: {
  1268                           ;main.c: 402: geweiNum = numArray[0];
  1269  0443  3001               	movlw	low (_numArray-__stringbase)
  1270  0444  0084               	movwf	4
  1271  0445  2600               	fcall	stringdir
  1272  0446  00ED               	movwf	_geweiNum
  1273  0447  0008               	return
  1274  0448                     l2968:	
  1275                           
  1276                           ;main.c: 405: else
  1277                           ;main.c: 406: {
  1278                           ;main.c: 407: shiweiNum = numArray[0];
  1279  0448  3001               	movlw	low (_numArray-__stringbase)
  1280  0449  0084               	movwf	4
  1281  044A  2600               	fcall	stringdir
  1282  044B  00EE               	movwf	_shiweiNum
  1283                           
  1284                           ;main.c: 408: geweiNum = numArray[workStep];
  1285  044C  087A               	movf	_workStep,w
  1286  044D  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1287  044E  0084               	movwf	4
  1288  044F  2600               	fcall	stringdir
  1289  0450  00ED               	movwf	_geweiNum
  1290  0451  0008               	return
  1291  0452                     l2972:	
  1292                           
  1293                           ;main.c: 411: else if(chrgFlag)
  1294  0452  085B               	movf	_chrgFlag,w
  1295  0453  1903               	btfsc	3,2
  1296  0454  2C63               	goto	l2976
  1297                           
  1298                           ;main.c: 412: {
  1299                           ;main.c: 413: shiweiNum = numArray[prePwStep/10];
  1300  0455  300A               	movlw	10
  1301  0456  00F3               	movwf	___lbdiv@divisor
  1302  0457  0879               	movf	_prePwStep,w
  1303  0458  25C2               	fcall	___lbdiv
  1304  0459  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1305  045A  0084               	movwf	4
  1306  045B  2600               	fcall	stringdir
  1307                           
  1308                           ;main.c: 414: geweiNum = numArray[prePwStep%10];
  1309  045C  2466               	fcall	PL12	;call to abstracted procedure
  1310  045D  25A6               	fcall	___lbmod
  1311  045E  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1312  045F  0084               	movwf	4
  1313  0460  2600               	fcall	stringdir
  1314  0461  00ED               	movwf	_geweiNum
  1315                           
  1316                           ;main.c: 415: }
  1317  0462  0008               	return
  1318  0463                     l2976:	
  1319                           
  1320                           ;main.c: 416: else
  1321                           ;main.c: 417: {
  1322                           ;main.c: 418: shiweiNum = 0;
  1323  0463  01EE               	clrf	_shiweiNum
  1324                           
  1325                           ;main.c: 419: geweiNum = 0;
  1326  0464  01ED               	clrf	_geweiNum
  1327  0465  0008               	return
  1328  0466                     __end_of_ledCtr:	
  1329  0466                     PL12:	
  1330  0466  00EE               	movwf	_shiweiNum
  1331  0467  300A               	movlw	10
  1332  0468  00F3               	movwf	___lbmod@divisor
  1333  0469  0879               	movf	_prePwStep,w
  1334  046A  0008               	return
  1335  046B                     __end_ofPL12:	
  1336                           
  1337                           	psect	text4
  1338  05A6                     __ptext4:	
  1339 ;; *************** function ___lbmod *****************
  1340 ;; Defined at:
  1341 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1342 ;; Parameters:    Size  Location     Type
  1343 ;;  dividend        1    wreg     unsigned char 
  1344 ;;  divisor         1    3[COMMON] unsigned char 
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;  dividend        1    5[COMMON] unsigned char 
  1347 ;;  rem             1    7[COMMON] unsigned char 
  1348 ;;  counter         1    6[COMMON] unsigned char 
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  1    wreg      unsigned char 
  1351 ;; Registers used:
  1352 ;;		wreg, status,2, status,0
  1353 ;; Tracked objects:
  1354 ;;		On entry : 100/0
  1355 ;;		On exit  : 100/0
  1356 ;;		Unchanged: 100/0
  1357 ;; Data sizes:     COMMON   BANK0   BANK1
  1358 ;;      Params:         1       0       0
  1359 ;;      Locals:         3       0       0
  1360 ;;      Temps:          1       0       0
  1361 ;;      Totals:         5       0       0
  1362 ;;Total ram usage:        5 bytes
  1363 ;; Hardware stack levels used:    1
  1364 ;; Hardware stack levels required when called:    2
  1365 ;; This function calls:
  1366 ;;		Nothing
  1367 ;; This function is called by:
  1368 ;;		_ledCtr
  1369 ;; This function uses a non-reentrant model
  1370 ;;
  1371                           
  1372                           
  1373                           ;psect for function ___lbmod
  1374  05A6                     ___lbmod:	
  1375                           
  1376                           ;incstack = 0
  1377                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1378                           ;___lbmod@dividend stored from wreg
  1379  05A6  00F5               	movwf	___lbmod@dividend
  1380  05A7  3008               	movlw	8
  1381  05A8  00F6               	movwf	___lbmod@counter
  1382  05A9  01F7               	clrf	___lbmod@rem
  1383  05AA                     l2488:	
  1384  05AA  0875               	movf	___lbmod@dividend,w
  1385  05AB  00F4               	movwf	??___lbmod
  1386  05AC  3007               	movlw	7
  1387  05AD  1003               	clrc
  1388  05AE                     L2:	
  1389  05AE  0CF4               	rrf	??___lbmod,f
  1390  05AF  3EFF               	addlw	-1
  1391  05B0  1003               	clrc
  1392  05B1  1D03               	skipz
  1393  05B2  2DAE               	goto	L2
  1394  05B3  0D77               	rlf	___lbmod@rem,w
  1395  05B4  0474               	iorwf	??___lbmod,w
  1396  05B5  00F7               	movwf	___lbmod@rem
  1397  05B6  1003               	clrc
  1398  05B7  0DF5               	rlf	___lbmod@dividend,f
  1399  05B8  0873               	movf	___lbmod@divisor,w
  1400  05B9  0277               	subwf	___lbmod@rem,w
  1401  05BA  1C03               	skipc
  1402  05BB  2DBE               	goto	l2496
  1403  05BC  0873               	movf	___lbmod@divisor,w
  1404  05BD  02F7               	subwf	___lbmod@rem,f
  1405  05BE                     l2496:	
  1406  05BE  0BF6               	decfsz	___lbmod@counter,f
  1407  05BF  2DAA               	goto	l2488
  1408  05C0  0877               	movf	___lbmod@rem,w
  1409  05C1  0008               	return
  1410  05C2                     __end_of___lbmod:	
  1411                           
  1412                           	psect	text5
  1413  05C2                     __ptext5:	
  1414 ;; *************** function ___lbdiv *****************
  1415 ;; Defined at:
  1416 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;  dividend        1    wreg     unsigned char 
  1419 ;;  divisor         1    3[COMMON] unsigned char 
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;  dividend        1    4[COMMON] unsigned char 
  1422 ;;  quotient        1    6[COMMON] unsigned char 
  1423 ;;  counter         1    5[COMMON] unsigned char 
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  1    wreg      unsigned char 
  1426 ;; Registers used:
  1427 ;;		wreg, status,2, status,0
  1428 ;; Tracked objects:
  1429 ;;		On entry : 100/0
  1430 ;;		On exit  : 100/0
  1431 ;;		Unchanged: 100/0
  1432 ;; Data sizes:     COMMON   BANK0   BANK1
  1433 ;;      Params:         1       0       0
  1434 ;;      Locals:         3       0       0
  1435 ;;      Temps:          0       0       0
  1436 ;;      Totals:         4       0       0
  1437 ;;Total ram usage:        4 bytes
  1438 ;; Hardware stack levels used:    1
  1439 ;; Hardware stack levels required when called:    2
  1440 ;; This function calls:
  1441 ;;		Nothing
  1442 ;; This function is called by:
  1443 ;;		_ledCtr
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447                           
  1448                           ;psect for function ___lbdiv
  1449  05C2                     ___lbdiv:	
  1450                           
  1451                           ;incstack = 0
  1452                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1453                           ;___lbdiv@dividend stored from wreg
  1454  05C2  00F4               	movwf	___lbdiv@dividend
  1455  05C3  01F6               	clrf	___lbdiv@quotient
  1456  05C4  0873               	movf	___lbdiv@divisor,w
  1457  05C5  1903               	btfsc	3,2
  1458  05C6  2DDB               	goto	l2480
  1459  05C7  01F5               	clrf	___lbdiv@counter
  1460  05C8                     l2466:	
  1461  05C8  0AF5               	incf	___lbdiv@counter,f
  1462  05C9  1BF3               	btfsc	___lbdiv@divisor,7
  1463  05CA  2DCE               	goto	l1210
  1464  05CB  1003               	clrc
  1465  05CC  0DF3               	rlf	___lbdiv@divisor,f
  1466  05CD  2DC8               	goto	l2466
  1467  05CE                     l1210:	
  1468  05CE  1003               	clrc
  1469  05CF  0DF6               	rlf	___lbdiv@quotient,f
  1470  05D0  0873               	movf	___lbdiv@divisor,w
  1471  05D1  0274               	subwf	___lbdiv@dividend,w
  1472  05D2  1C03               	skipc
  1473  05D3  2DD8               	goto	L3
  1474  05D4  0873               	movf	___lbdiv@divisor,w
  1475  05D5  02F4               	subwf	___lbdiv@dividend,f
  1476  05D6  1476               	bsf	___lbdiv@quotient,0
  1477  05D7  1003               	clrc
  1478  05D8                     L3:	
  1479  05D8  0CF3               	rrf	___lbdiv@divisor,f
  1480  05D9  0BF5               	decfsz	___lbdiv@counter,f
  1481  05DA  2DCE               	goto	l1210
  1482  05DB                     l2480:	
  1483  05DB  0876               	movf	___lbdiv@quotient,w
  1484  05DC  0008               	return
  1485  05DD                     __end_of___lbdiv:	
  1486                           
  1487                           	psect	text6
  1488  046B                     __ptext6:	
  1489 ;; *************** function _keyCtr *****************
  1490 ;; Defined at:
  1491 ;;		line 641 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  1492 ;; Parameters:    Size  Location     Type
  1493 ;;		None
  1494 ;; Auto vars:     Size  Location     Type
  1495 ;;  kclick2         1    5[COMMON] unsigned char 
  1496 ;;  kclick          1    4[COMMON] unsigned char 
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  1    wreg      void 
  1499 ;; Registers used:
  1500 ;;		wreg, status,2, status,0, pclath, cstack
  1501 ;; Tracked objects:
  1502 ;;		On entry : 100/0
  1503 ;;		On exit  : 100/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMMON   BANK0   BANK1
  1506 ;;      Params:         0       0       0
  1507 ;;      Locals:         2       0       0
  1508 ;;      Temps:          0       0       0
  1509 ;;      Totals:         2       0       0
  1510 ;;Total ram usage:        2 bytes
  1511 ;; Hardware stack levels used:    1
  1512 ;; Hardware stack levels required when called:    3
  1513 ;; This function calls:
  1514 ;;		_keyRead
  1515 ;;		_keyRead2
  1516 ;; This function is called by:
  1517 ;;		_main
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           
  1522                           ;psect for function _keyCtr
  1523  046B                     _keyCtr:	
  1524                           
  1525                           ;main.c: 643: char kclick = keyRead(0x01 & (~PORTB));
  1526                           
  1527                           ;incstack = 0
  1528                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1529  046B  0906               	comf	6,w	;volatile
  1530  046C  3901               	andlw	1
  1531  046D  256B               	fcall	_keyRead
  1532  046E  00F4               	movwf	keyCtr@kclick
  1533                           
  1534                           ;main.c: 644: if(kclick == 1)
  1535  046F  0B74               	decfsz	keyCtr@kclick,w
  1536  0470  2C8E               	goto	l2822
  1537                           
  1538                           ;main.c: 645: {
  1539                           ;main.c: 646: if(workStep > 0)
  1540  0471  087A               	movf	_workStep,w
  1541  0472  1903               	btfsc	3,2
  1542  0473  2C7C               	goto	l2808
  1543                           
  1544                           ;main.c: 647: {
  1545                           ;main.c: 648: if(++workStep > 6)
  1546  0474  3007               	movlw	7
  1547  0475  0AFA               	incf	_workStep,f
  1548  0476  027A               	subwf	_workStep,w
  1549  0477  1C03               	skipc
  1550  0478  2C9F               	goto	l2834
  1551                           
  1552                           ;main.c: 649: {
  1553                           ;main.c: 650: workStep = 1;
  1554  0479  01FA               	clrf	_workStep
  1555  047A  0AFA               	incf	_workStep,f
  1556  047B  2C9F               	goto	l2834
  1557  047C                     l2808:	
  1558                           
  1559                           ;main.c: 653: else if(overWorkTime > 0)
  1560  047C  0826               	movf	_overWorkTime,w
  1561  047D  0427               	iorwf	_overWorkTime+1,w
  1562  047E  1903               	btfsc	3,2
  1563  047F  2C85               	goto	l2814
  1564                           
  1565                           ;main.c: 654: {
  1566                           ;main.c: 655: workStep = preWorkStep;
  1567  0480  0840               	movf	_preWorkStep,w
  1568  0481  00FA               	movwf	_workStep
  1569                           
  1570                           ;main.c: 656: jrStep = prejrStep;
  1571  0482  083F               	movf	_prejrStep,w
  1572  0483  00F8               	movwf	_jrStep
  1573                           
  1574                           ;main.c: 658: }
  1575  0484  2C9D               	goto	l2812
  1576  0485                     l2814:	
  1577                           
  1578                           ;main.c: 659: else if(showBatTime > 0)
  1579  0485  084B               	movf	_showBatTime,w
  1580  0486  1903               	btfsc	3,2
  1581  0487  2C8A               	goto	l2818
  1582                           
  1583                           ;main.c: 660: {
  1584                           ;main.c: 661: showBatTime = 0;
  1585  0488  01CB               	clrf	_showBatTime
  1586                           
  1587                           ;main.c: 662: }
  1588  0489  2C9F               	goto	l2834
  1589  048A                     l2818:	
  1590                           
  1591                           ;main.c: 663: else
  1592                           ;main.c: 664: {
  1593                           ;main.c: 665: showBatTime = 200;
  1594  048A  30C8               	movlw	200
  1595  048B  00CB               	movwf	_showBatTime
  1596                           
  1597                           ;main.c: 666: count1s = 0;
  1598  048C  01DD               	clrf	_count1s
  1599  048D  2C9F               	goto	l2834
  1600  048E                     l2822:	
  1601                           
  1602                           ;main.c: 669: else if(kclick == 2)
  1603  048E  3002               	movlw	2
  1604  048F  0674               	xorwf	keyCtr@kclick,w
  1605  0490  1D03               	btfss	3,2
  1606  0491  2C9F               	goto	l2834
  1607                           
  1608                           ;main.c: 670: {
  1609                           ;main.c: 671: if(workStep > 0)
  1610  0492  087A               	movf	_workStep,w
  1611  0493  1903               	btfsc	3,2
  1612  0494  2C98               	goto	l833
  1613                           
  1614                           ;main.c: 672: {
  1615                           ;main.c: 673: workStep = 0;
  1616  0495  01FA               	clrf	_workStep
  1617                           
  1618                           ;main.c: 674: jrStep = 0;
  1619  0496  01F8               	clrf	_jrStep
  1620                           
  1621                           ;main.c: 675: }
  1622  0497  2C9F               	goto	l2834
  1623  0498                     l833:	
  1624  0498  301E               	movlw	30
  1625                           
  1626                           ;main.c: 676: else
  1627                           ;main.c: 677: {
  1628                           ;main.c: 678: workStep = 1;
  1629  0499  01FA               	clrf	_workStep
  1630  049A  0AFA               	incf	_workStep,f
  1631                           
  1632                           ;main.c: 679: startTime = 30;
  1633  049B  00CF               	movwf	_startTime
  1634                           
  1635                           ;main.c: 680: showBatTime = 0;
  1636  049C  01CB               	clrf	_showBatTime
  1637  049D                     l2812:	
  1638                           
  1639                           ;main.c: 657: overWorkTime = 0;
  1640  049D  01A6               	clrf	_overWorkTime
  1641  049E  01A7               	clrf	_overWorkTime+1
  1642  049F                     l2834:	
  1643                           
  1644                           ;main.c: 682: }
  1645                           ;main.c: 683: }
  1646                           ;main.c: 684: char kclick2 = keyRead2(0x04 & (~PORTB));
  1647  049F  0906               	comf	6,w	;volatile
  1648  04A0  3904               	andlw	4
  1649  04A1  254D               	fcall	_keyRead2
  1650  04A2  00F5               	movwf	keyCtr@kclick2
  1651                           
  1652                           ;main.c: 685: if(kclick2 == 2 && workStep > 0)
  1653  04A3  3A02               	xorlw	2
  1654  04A4  1D03               	btfss	3,2
  1655  04A5  2CB7               	goto	l2848
  1656  04A6  087A               	movf	_workStep,w
  1657  04A7  1903               	btfsc	3,2
  1658  04A8  2CB7               	goto	l2848
  1659                           
  1660                           ;main.c: 686: {
  1661                           ;main.c: 687: jrShowTime = 100;
  1662  04A9  3064               	movlw	100
  1663  04AA  00BC               	movwf	_jrShowTime
  1664                           
  1665                           ;main.c: 688: if(jrStep > 0)
  1666  04AB  0878               	movf	_jrStep,w
  1667  04AC  1903               	btfsc	3,2
  1668  04AD  2CB0               	goto	l836
  1669                           
  1670                           ;main.c: 689: {
  1671                           ;main.c: 690: jrStep = 0;
  1672  04AE  01F8               	clrf	_jrStep
  1673                           
  1674                           ;main.c: 691: }
  1675  04AF  0008               	return
  1676  04B0                     l836:	
  1677  04B0  30D0               	movlw	208
  1678                           
  1679                           ;main.c: 692: else
  1680                           ;main.c: 693: {
  1681                           ;main.c: 694: jrStep = 1;
  1682  04B1  01F8               	clrf	_jrStep
  1683  04B2  0AF8               	incf	_jrStep,f
  1684                           
  1685                           ;main.c: 695: jrStartTime = 2000;
  1686  04B3  00A0               	movwf	_jrStartTime
  1687  04B4  3007               	movlw	7
  1688  04B5  00A1               	movwf	_jrStartTime+1
  1689  04B6  0008               	return
  1690  04B7                     l2848:	
  1691                           
  1692                           ;main.c: 698: else if(kclick2 == 1 && jrStep > 0)
  1693  04B7  0B75               	decfsz	keyCtr@kclick2,w
  1694  04B8  0008               	return
  1695  04B9  0878               	movf	_jrStep,w
  1696  04BA  1903               	btfsc	3,2
  1697  04BB  0008               	return
  1698                           
  1699                           ;main.c: 699: {
  1700                           ;main.c: 700: jrShowTime = 100;
  1701  04BC  3064               	movlw	100
  1702  04BD  00BC               	movwf	_jrShowTime
  1703  04BE  0008               	return
  1704  04BF                     __end_of_keyCtr:	
  1705                           
  1706                           	psect	text7
  1707  054D                     __ptext7:	
  1708 ;; *************** function _keyRead2 *****************
  1709 ;; Defined at:
  1710 ;;		line 607 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  keyStatus       1    wreg     unsigned char 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  keyStatus       1    3[COMMON] unsigned char 
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  1    wreg      unsigned char 
  1717 ;; Registers used:
  1718 ;;		wreg, status,2, status,0
  1719 ;; Tracked objects:
  1720 ;;		On entry : 100/0
  1721 ;;		On exit  : 100/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMMON   BANK0   BANK1
  1724 ;;      Params:         0       0       0
  1725 ;;      Locals:         1       0       0
  1726 ;;      Temps:          0       0       0
  1727 ;;      Totals:         1       0       0
  1728 ;;Total ram usage:        1 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; Hardware stack levels required when called:    2
  1731 ;; This function calls:
  1732 ;;		Nothing
  1733 ;; This function is called by:
  1734 ;;		_keyCtr
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           
  1739                           ;psect for function _keyRead2
  1740  054D                     _keyRead2:	
  1741                           
  1742                           ;incstack = 0
  1743                           ; Regs used in _keyRead2: [wreg+status,2+status,0]
  1744                           ;keyRead2@keyStatus stored from wreg
  1745  054D  00F3               	movwf	keyRead2@keyStatus
  1746                           
  1747                           ;main.c: 609: if(keyStatus)
  1748  054E  0873               	movf	keyRead2@keyStatus,w
  1749  054F  3064               	movlw	100
  1750  0550  1903               	btfsc	3,2
  1751  0551  2D5F               	goto	L5
  1752                           
  1753                           ;main.c: 610: {
  1754                           ;main.c: 611: keyCount2++;
  1755  0552  0AD4               	incf	_keyCount2,f
  1756                           
  1757                           ;main.c: 612: if(keyCount2 >= 100)
  1758  0553  0254               	subwf	_keyCount2,w
  1759  0554  1C03               	skipc
  1760  0555  3400               	retlw	0
  1761                           
  1762                           ;main.c: 613: {
  1763                           ;main.c: 614: keyCount2 = 100;
  1764  0556  3064               	movlw	100
  1765  0557  00D4               	movwf	_keyCount2
  1766                           
  1767                           ;main.c: 615: if(!longPressFlag2)
  1768  0558  0852               	movf	_longPressFlag2,w
  1769  0559  1D03               	btfss	3,2
  1770  055A  3400               	retlw	0
  1771  055B  3002               	movlw	2
  1772                           
  1773                           ;main.c: 616: {
  1774                           ;main.c: 617: longPressFlag2 = 1;
  1775  055C  01D2               	clrf	_longPressFlag2
  1776  055D  0AD2               	incf	_longPressFlag2,f
  1777                           
  1778                           ;main.c: 618: return 2;
  1779  055E  0008               	return
  1780  055F                     L5:	
  1781                           ;main.c: 622: else
  1782                           ;main.c: 623: {
  1783                           ;main.c: 624: if(keyCount2 >= 100)
  1784                           
  1785  055F  0254               	subwf	_keyCount2,w
  1786  0560  1C03               	skipc
  1787  0561  2D65               	goto	l2346
  1788                           
  1789                           ;main.c: 625: {
  1790                           ;main.c: 626: keyCount2 = 0;
  1791  0562  01D4               	clrf	_keyCount2
  1792                           
  1793                           ;main.c: 627: longPressFlag2 = 0;
  1794  0563  01D2               	clrf	_longPressFlag2
  1795                           
  1796                           ;main.c: 628: return 0;
  1797  0564  3400               	retlw	0
  1798  0565                     l2346:	
  1799                           
  1800                           ;main.c: 630: else if(keyCount2 >= 5)
  1801  0565  3005               	movlw	5
  1802  0566  0254               	subwf	_keyCount2,w
  1803                           
  1804                           ;main.c: 631: {
  1805                           ;main.c: 632: keyCount2 = 0;
  1806  0567  01D4               	clrf	_keyCount2
  1807  0568  1803               	btfsc	3,0
  1808                           
  1809                           ;main.c: 633: return 1;
  1810  0569  3401               	retlw	1
  1811  056A  3400               	retlw	0
  1812  056B                     __end_of_keyRead2:	
  1813                           ;main.c: 634: }
  1814                           ;main.c: 635: keyCount2 = 0;
  1815                           
  1816                           
  1817                           	psect	text8
  1818  056B                     __ptext8:	
  1819 ;; *************** function _keyRead *****************
  1820 ;; Defined at:
  1821 ;;		line 573 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  1822 ;; Parameters:    Size  Location     Type
  1823 ;;  keyStatus       1    wreg     unsigned char 
  1824 ;; Auto vars:     Size  Location     Type
  1825 ;;  keyStatus       1    3[COMMON] unsigned char 
  1826 ;; Return value:  Size  Location     Type
  1827 ;;                  1    wreg      unsigned char 
  1828 ;; Registers used:
  1829 ;;		wreg, status,2, status,0
  1830 ;; Tracked objects:
  1831 ;;		On entry : 100/0
  1832 ;;		On exit  : 100/0
  1833 ;;		Unchanged: 0/0
  1834 ;; Data sizes:     COMMON   BANK0   BANK1
  1835 ;;      Params:         0       0       0
  1836 ;;      Locals:         1       0       0
  1837 ;;      Temps:          0       0       0
  1838 ;;      Totals:         1       0       0
  1839 ;;Total ram usage:        1 bytes
  1840 ;; Hardware stack levels used:    1
  1841 ;; Hardware stack levels required when called:    2
  1842 ;; This function calls:
  1843 ;;		Nothing
  1844 ;; This function is called by:
  1845 ;;		_keyCtr
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           
  1850                           ;psect for function _keyRead
  1851  056B                     _keyRead:	
  1852                           
  1853                           ;incstack = 0
  1854                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1855                           ;keyRead@keyStatus stored from wreg
  1856  056B  00F3               	movwf	keyRead@keyStatus
  1857                           
  1858                           ;main.c: 575: if(keyStatus)
  1859  056C  0873               	movf	keyRead@keyStatus,w
  1860  056D  3064               	movlw	100
  1861  056E  1903               	btfsc	3,2
  1862  056F  2D7D               	goto	L7
  1863                           
  1864                           ;main.c: 576: {
  1865                           ;main.c: 577: keyCount++;
  1866  0570  0AD5               	incf	_keyCount,f
  1867                           
  1868                           ;main.c: 578: if(keyCount >= 100)
  1869  0571  0255               	subwf	_keyCount,w
  1870  0572  1C03               	skipc
  1871  0573  3400               	retlw	0
  1872                           
  1873                           ;main.c: 579: {
  1874                           ;main.c: 580: keyCount = 100;
  1875  0574  3064               	movlw	100
  1876  0575  00D5               	movwf	_keyCount
  1877                           
  1878                           ;main.c: 581: if(!longPressFlag)
  1879  0576  0853               	movf	_longPressFlag,w
  1880  0577  1D03               	btfss	3,2
  1881  0578  3400               	retlw	0
  1882  0579  3002               	movlw	2
  1883                           
  1884                           ;main.c: 582: {
  1885                           ;main.c: 583: longPressFlag = 1;
  1886  057A  01D3               	clrf	_longPressFlag
  1887  057B  0AD3               	incf	_longPressFlag,f
  1888                           
  1889                           ;main.c: 584: return 2;
  1890  057C  0008               	return
  1891  057D                     L7:	
  1892                           ;main.c: 588: else
  1893                           ;main.c: 589: {
  1894                           ;main.c: 590: if(keyCount >= 100)
  1895                           
  1896  057D  0255               	subwf	_keyCount,w
  1897  057E  1C03               	skipc
  1898  057F  2D83               	goto	l2306
  1899                           
  1900                           ;main.c: 591: {
  1901                           ;main.c: 592: keyCount = 0;
  1902  0580  01D5               	clrf	_keyCount
  1903                           
  1904                           ;main.c: 593: longPressFlag = 0;
  1905  0581  01D3               	clrf	_longPressFlag
  1906                           
  1907                           ;main.c: 594: return 0;
  1908  0582  3400               	retlw	0
  1909  0583                     l2306:	
  1910                           
  1911                           ;main.c: 596: else if(keyCount >= 6)
  1912  0583  3006               	movlw	6
  1913  0584  0255               	subwf	_keyCount,w
  1914                           
  1915                           ;main.c: 597: {
  1916                           ;main.c: 598: keyCount = 0;
  1917  0585  01D5               	clrf	_keyCount
  1918  0586  1803               	btfsc	3,0
  1919                           
  1920                           ;main.c: 599: return 1;
  1921  0587  3401               	retlw	1
  1922  0588  3400               	retlw	0
  1923  0589                     __end_of_keyRead:	
  1924                           ;main.c: 600: }
  1925                           ;main.c: 601: keyCount = 0;
  1926                           
  1927                           
  1928                           	psect	text9
  1929  0627                     __ptext9:	
  1930 ;; *************** function _jrPwm *****************
  1931 ;; Defined at:
  1932 ;;		line 704 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;		None
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;		None
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, status,2, status,0
  1941 ;; Tracked objects:
  1942 ;;		On entry : 100/0
  1943 ;;		On exit  : 100/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMMON   BANK0   BANK1
  1946 ;;      Params:         0       0       0
  1947 ;;      Locals:         0       0       0
  1948 ;;      Temps:          0       0       0
  1949 ;;      Totals:         0       0       0
  1950 ;;Total ram usage:        0 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    2
  1953 ;; This function calls:
  1954 ;;		Nothing
  1955 ;; This function is called by:
  1956 ;;		_main
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           
  1961                           ;psect for function _jrPwm
  1962  0627                     _jrPwm:	
  1963                           
  1964                           ;main.c: 706: if(++jrPwmTime >= 100)
  1965                           
  1966                           ;incstack = 0
  1967                           ; Regs used in _jrPwm: [wreg+status,2+status,0]
  1968  0627  3064               	movlw	100
  1969  0628  0ABB               	incf	_jrPwmTime,f
  1970  0629  023B               	subwf	_jrPwmTime,w
  1971  062A  1803               	btfsc	3,0
  1972                           
  1973                           ;main.c: 707: {
  1974                           ;main.c: 708: jrPwmTime = 0;
  1975  062B  01BB               	clrf	_jrPwmTime
  1976                           
  1977                           ;main.c: 709: }
  1978                           ;main.c: 710: if(jrDuty > jrPwmTime && jrStep > 0)
  1979  062C  083A               	movf	_jrDuty,w
  1980  062D  023B               	subwf	_jrPwmTime,w
  1981  062E  1803               	skipnc
  1982  062F  2E35               	goto	l844
  1983  0630  0878               	movf	_jrStep,w
  1984  0631  1903               	btfsc	3,2
  1985  0632  2E35               	goto	l844
  1986                           
  1987                           ;main.c: 711: {
  1988                           ;main.c: 712: RB4 = 1;
  1989  0633  1606               	bsf	6,4	;volatile
  1990                           
  1991                           ;main.c: 713: }
  1992  0634  0008               	return
  1993  0635                     l844:	
  1994                           
  1995                           ;main.c: 714: else
  1996                           ;main.c: 715: {
  1997                           ;main.c: 716: RB4 = 0;
  1998  0635  1206               	bcf	6,4	;volatile
  1999  0636  0008               	return
  2000  0637                     __end_of_jrPwm:	
  2001                           
  2002                           	psect	text10
  2003  0017                     __ptext10:	
  2004 ;; *************** function _chrgCtr *****************
  2005 ;; Defined at:
  2006 ;;		line 425 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  2007 ;; Parameters:    Size  Location     Type
  2008 ;;		None
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;		None
  2011 ;; Return value:  Size  Location     Type
  2012 ;;                  1    wreg      void 
  2013 ;; Registers used:
  2014 ;;		wreg, status,2, status,0, pclath, cstack
  2015 ;; Tracked objects:
  2016 ;;		On entry : 100/0
  2017 ;;		On exit  : 0/0
  2018 ;;		Unchanged: 0/0
  2019 ;; Data sizes:     COMMON   BANK0   BANK1
  2020 ;;      Params:         0       0       0
  2021 ;;      Locals:         0       0       0
  2022 ;;      Temps:          2       0       0
  2023 ;;      Totals:         2       0       0
  2024 ;;Total ram usage:        2 bytes
  2025 ;; Hardware stack levels used:    1
  2026 ;; Hardware stack levels required when called:    3
  2027 ;; This function calls:
  2028 ;;		_chrgPwmInit
  2029 ;;		_chrgPwmStop
  2030 ;;		_pwmStop
  2031 ;; This function is called by:
  2032 ;;		_main
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           
  2037                           ;psect for function _chrgCtr
  2038  0017                     _chrgCtr:	
  2039                           
  2040                           ;main.c: 427: if(PORTB & 0x02)
  2041                           
  2042                           ;incstack = 0
  2043                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  2044  0017  1C86               	btfss	6,1	;volatile
  2045  0018  28DD               	goto	l2744
  2046                           
  2047                           ;main.c: 428: {
  2048                           ;main.c: 429: if(chrgFlag == 0)
  2049  0019  085B               	movf	_chrgFlag,w
  2050  001A  1D03               	btfss	3,2
  2051  001B  2820               	goto	l2634
  2052                           
  2053                           ;main.c: 430: {
  2054                           ;main.c: 431: chrgFlag = 1;
  2055  001C  01DB               	clrf	_chrgFlag
  2056  001D  0ADB               	incf	_chrgFlag,f
  2057                           
  2058                           ;main.c: 432: chrgMaxDuty = 0;
  2059  001E  01C4               	clrf	_chrgMaxDuty
  2060                           
  2061                           ;main.c: 433: chrgPwmStop();
  2062  001F  2678               	fcall	_chrgPwmStop
  2063  0020                     l2634:	
  2064                           
  2065                           ;main.c: 434: }
  2066                           ;main.c: 435: jrStep = 0;
  2067  0020  01F8               	clrf	_jrStep
  2068                           
  2069                           ;main.c: 436: workStep = 0;
  2070  0021  01FA               	clrf	_workStep
  2071                           
  2072                           ;main.c: 437: pwmStop();
  2073  0022  2670               	fcall	_pwmStop
  2074                           
  2075                           ;main.c: 438: lowBatFlag = 0;
  2076  0023  1283               	bcf	3,5	;RP0=0, select bank0
  2077  0024  01C2               	clrf	_lowBatFlag
  2078                           
  2079                           ;main.c: 439: if(prePwStep < pwStep)
  2080  0025  084D               	movf	_pwStep,w
  2081  0026  0279               	subwf	_prePwStep,w
  2082  0027  1803               	skipnc
  2083  0028  2832               	goto	l2648
  2084                           
  2085                           ;main.c: 440: {
  2086                           ;main.c: 441: if(++count50s > 3000)
  2087  0029  20FA               	fcall	PL8	;call to abstracted procedure
  2088  002A  1903               	skipnz
  2089  002B  022C               	subwf	_count50s,w
  2090  002C  1C03               	skipc
  2091  002D  2834               	goto	l2650
  2092                           
  2093                           ;main.c: 442: {
  2094                           ;main.c: 443: count50s = 0;
  2095  002E  01AC               	clrf	_count50s
  2096  002F  01AD               	clrf	_count50s+1
  2097                           
  2098                           ;main.c: 444: prePwStep++;
  2099  0030  0AF9               	incf	_prePwStep,f
  2100  0031  2834               	goto	l2650
  2101  0032                     l2648:	
  2102                           
  2103                           ;main.c: 447: else
  2104                           ;main.c: 448: {
  2105                           ;main.c: 449: count50s = 0;
  2106  0032  01AC               	clrf	_count50s
  2107  0033  01AD               	clrf	_count50s+1
  2108  0034                     l2650:	
  2109                           
  2110                           ;main.c: 450: }
  2111                           ;main.c: 451: if(protectFlag)
  2112  0034  0858               	movf	_protectFlag,w
  2113  0035  1903               	btfsc	3,2
  2114  0036  2849               	goto	l2666
  2115                           
  2116                           ;main.c: 452: {
  2117                           ;main.c: 453: chrgPwmStop();
  2118  0037  2678               	fcall	_chrgPwmStop
  2119                           
  2120                           ;main.c: 454: if(prePwStep < 99 && protectFlag == 1)
  2121  0038  3063               	movlw	99
  2122  0039  0279               	subwf	_prePwStep,w
  2123  003A  1803               	skipnc
  2124  003B  2847               	goto	l2662
  2125  003C  0B58               	decfsz	_protectFlag,w
  2126  003D  2847               	goto	l2662
  2127                           
  2128                           ;main.c: 455: {
  2129                           ;main.c: 456: if(++reChrgCount > 250)
  2130  003E  30FB               	movlw	251
  2131  003F  0ACC               	incf	_reChrgCount,f
  2132  0040  024C               	subwf	_reChrgCount,w
  2133  0041  1C03               	skipc
  2134  0042  0008               	return
  2135                           
  2136                           ;main.c: 457: {
  2137                           ;main.c: 458: reChrgCount = 0;
  2138  0043  01CC               	clrf	_reChrgCount
  2139                           
  2140                           ;main.c: 459: chrgFullFlag = 0;
  2141  0044  01DA               	clrf	_chrgFullFlag
  2142                           
  2143                           ;main.c: 460: protectFlag = 0;
  2144  0045  01D8               	clrf	_protectFlag
  2145  0046  0008               	return
  2146  0047                     l2662:	
  2147                           
  2148                           ;main.c: 463: else
  2149                           ;main.c: 464: {
  2150                           ;main.c: 465: reChrgCount = 0;
  2151  0047  01CC               	clrf	_reChrgCount
  2152  0048  0008               	return
  2153  0049                     l2666:	
  2154                           
  2155                           ;main.c: 468: }
  2156                           ;main.c: 469: if(batADValue < 1118)
  2157  0049  3004               	movlw	4
  2158  004A  022F               	subwf	_batADValue+1,w
  2159  004B  305E               	movlw	94
  2160  004C  1903               	skipnz
  2161  004D  022E               	subwf	_batADValue,w
  2162  004E  1803               	skipnc
  2163  004F  2853               	goto	l2672
  2164  0050  300F               	movlw	15
  2165                           
  2166                           ;main.c: 470: {
  2167                           ;main.c: 471: chrgMode = 0;
  2168  0051  01CA               	clrf	_chrgMode
  2169                           
  2170                           ;main.c: 472: chrgMaxAD = 15;
  2171  0052  286C               	goto	L8
  2172  0053                     l2672:	
  2173                           ;main.c: 473: }
  2174                           
  2175                           
  2176                           ;main.c: 474: else if(batADValue < 1530)
  2177  0053  3005               	movlw	5
  2178  0054  022F               	subwf	_batADValue+1,w
  2179  0055  30FA               	movlw	250
  2180  0056  1903               	skipnz
  2181  0057  022E               	subwf	_batADValue,w
  2182  0058  1803               	skipnc
  2183  0059  2860               	goto	l2680
  2184  005A  303C               	movlw	60
  2185                           
  2186                           ;main.c: 475: {
  2187                           ;main.c: 476: chrgMode = 1;
  2188  005B  01CA               	clrf	_chrgMode
  2189  005C  0ACA               	incf	_chrgMode,f
  2190                           
  2191                           ;main.c: 477: chrgMaxAD = 60;
  2192  005D  00C9               	movwf	_chrgMaxAD
  2193                           
  2194                           ;main.c: 478: lockCount = 0;
  2195  005E  01C8               	clrf	_lockCount
  2196                           
  2197                           ;main.c: 479: }
  2198  005F  286D               	goto	l2690
  2199  0060                     l2680:	
  2200                           
  2201                           ;main.c: 480: else if(count1s == 0)
  2202  0060  085D               	movf	_count1s,w
  2203  0061  1D03               	btfss	3,2
  2204  0062  286D               	goto	l2690
  2205                           
  2206                           ;main.c: 481: {
  2207                           ;main.c: 482: if(++lockCount > 200)
  2208  0063  30C9               	movlw	201
  2209  0064  0AC8               	incf	_lockCount,f
  2210  0065  0248               	subwf	_lockCount,w
  2211  0066  1C03               	skipc
  2212  0067  286B               	goto	l2688
  2213  0068  3002               	movlw	2
  2214                           
  2215                           ;main.c: 483: {
  2216                           ;main.c: 484: lockCount = 0;
  2217  0069  01C8               	clrf	_lockCount
  2218                           
  2219                           ;main.c: 485: chrgMode = 2;
  2220  006A  00CA               	movwf	_chrgMode
  2221  006B                     l2688:	
  2222                           
  2223                           ;main.c: 486: }
  2224                           ;main.c: 488: chrgMaxAD = 60;
  2225  006B  303C               	movlw	60
  2226  006C                     L8:	
  2227  006C  00C9               	movwf	_chrgMaxAD
  2228  006D                     l2690:	
  2229                           
  2230                           ;main.c: 489: }
  2231                           ;main.c: 490: if(chrgMode == 2 && outADValue < 8)
  2232  006D  3002               	movlw	2
  2233  006E  064A               	xorwf	_chrgMode,w
  2234  006F  1D03               	btfss	3,2
  2235  0070  2887               	goto	l2700
  2236  0071  3000               	movlw	0
  2237  0072  0231               	subwf	_outADValue+1,w
  2238  0073  3008               	movlw	8
  2239  0074  1903               	skipnz
  2240  0075  0230               	subwf	_outADValue,w
  2241  0076  1803               	skipnc
  2242  0077  2887               	goto	l2700
  2243                           
  2244                           ;main.c: 491: {
  2245                           ;main.c: 492: if(++fullCount >= 200)
  2246  0078  0AAA               	incf	_fullCount,f
  2247  0079  1903               	skipnz
  2248  007A  0AAB               	incf	_fullCount+1,f
  2249  007B  3000               	movlw	0
  2250  007C  022B               	subwf	_fullCount+1,w
  2251  007D  30C8               	movlw	200
  2252  007E  1903               	skipnz
  2253  007F  022A               	subwf	_fullCount,w
  2254  0080  1C03               	skipc
  2255  0081  2889               	goto	l2702
  2256                           
  2257                           ;main.c: 493: {
  2258                           ;main.c: 494: fullCount = 0;
  2259  0082  01AA               	clrf	_fullCount
  2260  0083  01AB               	clrf	_fullCount+1
  2261                           
  2262                           ;main.c: 495: chrgFullFlag = 1;
  2263  0084  01DA               	clrf	_chrgFullFlag
  2264  0085  0ADA               	incf	_chrgFullFlag,f
  2265  0086  2889               	goto	l2702
  2266  0087                     l2700:	
  2267                           
  2268                           ;main.c: 498: else
  2269                           ;main.c: 499: {
  2270                           ;main.c: 500: fullCount = 0;
  2271  0087  01AA               	clrf	_fullCount
  2272  0088  01AB               	clrf	_fullCount+1
  2273  0089                     l2702:	
  2274                           
  2275                           ;main.c: 501: }
  2276                           ;main.c: 502: if(chrgFullFlag)
  2277  0089  085A               	movf	_chrgFullFlag,w
  2278  008A  1903               	btfsc	3,2
  2279  008B  288D               	goto	l2706
  2280                           
  2281                           ;main.c: 503: {
  2282                           ;main.c: 504: chrgPwmStop();
  2283  008C  2E78               	ljmp	l2252
  2284  008D                     l2706:	
  2285                           ;main.c: 505: }
  2286                           
  2287                           
  2288                           ;main.c: 506: else
  2289                           ;main.c: 507: {
  2290                           ;main.c: 508: if(batADValue > 1550 || outADValue > (chrgMaxAD + 2))
  2291  008D  3006               	movlw	6
  2292  008E  022F               	subwf	_batADValue+1,w
  2293  008F  300F               	movlw	15
  2294  0090  1903               	skipnz
  2295  0091  022E               	subwf	_batADValue,w
  2296  0092  1803               	skipnc
  2297  0093  28A3               	goto	l2710
  2298  0094  0849               	movf	_chrgMaxAD,w
  2299  0095  3E02               	addlw	2
  2300  0096  00F3               	movwf	??_chrgCtr
  2301  0097  3000               	movlw	0
  2302  0098  1803               	skipnc
  2303  0099  3001               	movlw	1
  2304  009A  00F4               	movwf	??_chrgCtr+1
  2305  009B  0831               	movf	_outADValue+1,w
  2306  009C  0274               	subwf	??_chrgCtr+1,w
  2307  009D  1D03               	skipz
  2308  009E  28A1               	goto	u2485
  2309  009F  0830               	movf	_outADValue,w
  2310  00A0  0273               	subwf	??_chrgCtr,w
  2311  00A1                     u2485:	
  2312  00A1  1803               	skipnc
  2313  00A2  28B2               	goto	l2722
  2314  00A3                     l2710:	
  2315                           
  2316                           ;main.c: 509: {
  2317                           ;main.c: 510: if(++subTime > chrgWaitTime)
  2318  00A3  0AC6               	incf	_subTime,f
  2319  00A4  0846               	movf	_subTime,w
  2320  00A5  0245               	subwf	_chrgWaitTime,w
  2321  00A6  1803               	skipnc
  2322  00A7  28B0               	goto	l2720
  2323                           
  2324                           ;main.c: 511: {
  2325                           ;main.c: 512: if(chrgMaxDuty > 1)
  2326  00A8  3002               	movlw	2
  2327  00A9  0244               	subwf	_chrgMaxDuty,w
  2328  00AA  1C03               	skipc
  2329  00AB  28AD               	goto	l2716
  2330                           
  2331                           ;main.c: 513: {
  2332                           ;main.c: 514: chrgMaxDuty--;
  2333  00AC  03C4               	decf	_chrgMaxDuty,f
  2334  00AD                     l2716:	
  2335  00AD  3032               	movlw	50
  2336                           
  2337                           ;main.c: 515: }
  2338                           ;main.c: 516: subTime = 0;
  2339  00AE  01C6               	clrf	_subTime
  2340                           
  2341                           ;main.c: 517: chrgWaitTime = 50;
  2342  00AF  00C5               	movwf	_chrgWaitTime
  2343  00B0                     l2720:	
  2344                           
  2345                           ;main.c: 518: }
  2346                           ;main.c: 519: addTime = 0;
  2347  00B0  01C7               	clrf	_addTime
  2348                           
  2349                           ;main.c: 520: }
  2350  00B1  28D2               	goto	l2736
  2351  00B2                     l2722:	
  2352                           
  2353                           ;main.c: 521: else if(batADValue < 1550 && outADValue < (chrgMaxAD - 4))
  2354  00B2  3006               	movlw	6
  2355  00B3  022F               	subwf	_batADValue+1,w
  2356  00B4  300E               	movlw	14
  2357  00B5  1903               	skipnz
  2358  00B6  022E               	subwf	_batADValue,w
  2359  00B7  1803               	skipnc
  2360  00B8  28D2               	goto	l2736
  2361  00B9  0849               	movf	_chrgMaxAD,w
  2362  00BA  3EFC               	addlw	252
  2363  00BB  00F3               	movwf	??_chrgCtr
  2364  00BC  30FF               	movlw	255
  2365  00BD  1803               	skipnc
  2366  00BE  3000               	movlw	0
  2367  00BF  00F4               	movwf	??_chrgCtr+1
  2368  00C0  0231               	subwf	_outADValue+1,w
  2369  00C1  1D03               	skipz
  2370  00C2  28C5               	goto	u2525
  2371  00C3  0873               	movf	??_chrgCtr,w
  2372  00C4  0230               	subwf	_outADValue,w
  2373  00C5                     u2525:	
  2374  00C5  1803               	skipnc
  2375  00C6  28D2               	goto	l2736
  2376                           
  2377                           ;main.c: 522: {
  2378                           ;main.c: 523: if(++addTime > chrgWaitTime)
  2379  00C7  0AC7               	incf	_addTime,f
  2380  00C8  0847               	movf	_addTime,w
  2381  00C9  0245               	subwf	_chrgWaitTime,w
  2382  00CA  1803               	skipnc
  2383  00CB  28D1               	goto	l2734
  2384  00CC  304B               	movlw	75
  2385                           
  2386                           ;main.c: 524: {
  2387                           ;main.c: 525: addTime = 0;
  2388  00CD  01C7               	clrf	_addTime
  2389                           
  2390                           ;main.c: 526: if(chrgMaxDuty < 75)
  2391  00CE  0244               	subwf	_chrgMaxDuty,w
  2392  00CF  1C03               	btfss	3,0
  2393                           
  2394                           ;main.c: 527: {
  2395                           ;main.c: 528: chrgMaxDuty++;
  2396  00D0  0AC4               	incf	_chrgMaxDuty,f
  2397  00D1                     l2734:	
  2398                           
  2399                           ;main.c: 529: }
  2400                           ;main.c: 530: }
  2401                           ;main.c: 531: subTime = 0;
  2402  00D1  01C6               	clrf	_subTime
  2403  00D2                     l2736:	
  2404                           
  2405                           ;main.c: 532: }
  2406                           ;main.c: 535: if(chrgPwmFlag == 0)
  2407  00D2  083E               	movf	_chrgPwmFlag,w
  2408  00D3  1D03               	btfss	3,2
  2409  00D4  28D6               	goto	l2740
  2410                           
  2411                           ;main.c: 536: {
  2412                           ;main.c: 537: chrgPwmInit();
  2413  00D5  2614               	fcall	_chrgPwmInit
  2414  00D6                     l2740:	
  2415                           
  2416                           ;main.c: 538: }
  2417                           ;main.c: 539: PWMD23H = 0X00;
  2418  00D6  1683               	bsf	3,5	;RP0=1, select bank1
  2419  00D7  019E               	clrf	30	;volatile
  2420                           
  2421                           ;main.c: 540: PWMD2L = chrgMaxDuty;
  2422  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  2423  00D9  0844               	movf	_chrgMaxDuty,w
  2424  00DA  1683               	bsf	3,5	;RP0=1, select bank1
  2425  00DB  009B               	movwf	27	;volatile
  2426  00DC  0008               	return
  2427  00DD                     l2744:	
  2428  00DD  3014               	movlw	20
  2429                           
  2430                           ;main.c: 546: chrgFlag = 0;
  2431  00DE  01DB               	clrf	_chrgFlag
  2432                           
  2433                           ;main.c: 547: chrgFullFlag = 0;
  2434  00DF  01DA               	clrf	_chrgFullFlag
  2435                           
  2436                           ;main.c: 548: protectFlag = 0;
  2437  00E0  01D8               	clrf	_protectFlag
  2438                           
  2439                           ;main.c: 549: chrgMode = 0;
  2440  00E1  01CA               	clrf	_chrgMode
  2441                           
  2442                           ;main.c: 550: chrgMaxAD = 0;
  2443  00E2  01C9               	clrf	_chrgMaxAD
  2444                           
  2445                           ;main.c: 551: chrgMaxDuty = 0;
  2446  00E3  01C4               	clrf	_chrgMaxDuty
  2447                           
  2448                           ;main.c: 553: lockLedStep = 0;
  2449  00E4  01C8               	clrf	_lockCount
  2450                           
  2451                           ;main.c: 554: chrgWaitTime = 20;
  2452  00E5  00C5               	movwf	_chrgWaitTime
  2453                           
  2454                           ;main.c: 555: chrgPwmStop();
  2455  00E6  2678               	fcall	_chrgPwmStop
  2456                           
  2457                           ;main.c: 556: if(prePwStep > 0 && prePwStep > pwStep)
  2458  00E7  0879               	movf	_prePwStep,w
  2459  00E8  1903               	btfsc	3,2
  2460  00E9  28F7               	goto	l2760
  2461  00EA  0879               	movf	_prePwStep,w
  2462  00EB  024D               	subwf	_pwStep,w
  2463  00EC  1803               	skipnc
  2464  00ED  28F7               	goto	l2760
  2465                           
  2466                           ;main.c: 557: {
  2467                           ;main.c: 558: if(++count50s > 3000)
  2468  00EE  20FA               	fcall	PL8	;call to abstracted procedure
  2469  00EF  1903               	skipnz
  2470  00F0  022C               	subwf	_count50s,w
  2471  00F1  1C03               	skipc
  2472  00F2  0008               	return
  2473                           
  2474                           ;main.c: 559: {
  2475                           ;main.c: 560: count50s = 0;
  2476  00F3  01AC               	clrf	_count50s
  2477  00F4  01AD               	clrf	_count50s+1
  2478                           
  2479                           ;main.c: 561: prePwStep--;
  2480  00F5  03F9               	decf	_prePwStep,f
  2481  00F6  0008               	return
  2482  00F7                     l2760:	
  2483                           
  2484                           ;main.c: 564: else
  2485                           ;main.c: 565: {
  2486                           ;main.c: 566: count50s = 0;
  2487  00F7  01AC               	clrf	_count50s
  2488  00F8  01AD               	clrf	_count50s+1
  2489  00F9  0008               	return
  2490  00FA                     __end_of_chrgCtr:	
  2491  00FA                     PL8:	
  2492  00FA  0AAC               	incf	_count50s,f
  2493  00FB  1903               	skipnz
  2494  00FC  0AAD               	incf	_count50s+1,f
  2495  00FD  300B               	movlw	11
  2496  00FE  022D               	subwf	_count50s+1,w
  2497  00FF  34B9               	retlw	185
  2498  0100                     __end_ofPL8:	
  2499                           
  2500                           	psect	text11
  2501  0670                     __ptext11:	
  2502 ;; *************** function _pwmStop *****************
  2503 ;; Defined at:
  2504 ;;		line 1097 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;		None
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;		None
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      void 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0
  2513 ;; Tracked objects:
  2514 ;;		On entry : 100/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMMON   BANK0   BANK1
  2518 ;;      Params:         0       0       0
  2519 ;;      Locals:         0       0       0
  2520 ;;      Temps:          0       0       0
  2521 ;;      Totals:         0       0       0
  2522 ;;Total ram usage:        0 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    2
  2525 ;; This function calls:
  2526 ;;		Nothing
  2527 ;; This function is called by:
  2528 ;;		_chrgCtr
  2529 ;;		_workCtr
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           
  2534                           ;psect for function _pwmStop
  2535  0670                     _pwmStop:	
  2536                           
  2537                           ;main.c: 1099: if(motorPwmFlag)
  2538                           
  2539                           ;incstack = 0
  2540                           ; Regs used in _pwmStop: [wreg+status,2+status,0]
  2541  0670  083D               	movf	_motorPwmFlag,w
  2542  0671  1903               	btfsc	3,2
  2543  0672  0008               	return
  2544                           
  2545                           ;main.c: 1100: {
  2546                           ;main.c: 1101: motorPwmFlag = 0;
  2547  0673  01BD               	clrf	_motorPwmFlag
  2548                           
  2549                           ;main.c: 1102: PWMCON0 &= 0XFB;
  2550  0674  1115               	bcf	21,2	;volatile
  2551                           
  2552                           ;main.c: 1103: RA2 = 0;
  2553  0675  1683               	bsf	3,5	;RP0=1, select bank1
  2554  0676  1106               	bcf	6,2	;volatile
  2555  0677  0008               	return
  2556  0678                     __end_of_pwmStop:	
  2557                           
  2558                           	psect	text12
  2559  0678                     __ptext12:	
  2560 ;; *************** function _chrgPwmStop *****************
  2561 ;; Defined at:
  2562 ;;		line 1071 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;		None
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;		None
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  1    wreg      void 
  2569 ;; Registers used:
  2570 ;;		wreg, status,2, status,0
  2571 ;; Tracked objects:
  2572 ;;		On entry : 100/0
  2573 ;;		On exit  : 100/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMMON   BANK0   BANK1
  2576 ;;      Params:         0       0       0
  2577 ;;      Locals:         0       0       0
  2578 ;;      Temps:          0       0       0
  2579 ;;      Totals:         0       0       0
  2580 ;;Total ram usage:        0 bytes
  2581 ;; Hardware stack levels used:    1
  2582 ;; Hardware stack levels required when called:    2
  2583 ;; This function calls:
  2584 ;;		Nothing
  2585 ;; This function is called by:
  2586 ;;		_chrgCtr
  2587 ;; This function uses a non-reentrant model
  2588 ;;
  2589                           
  2590                           
  2591                           ;psect for function _chrgPwmStop
  2592  0678                     _chrgPwmStop:	
  2593  0678                     l2252:	
  2594                           ;incstack = 0
  2595                           ; Regs used in _chrgPwmStop: [wreg+status,2+status,0]
  2596                           
  2597                           
  2598                           ;main.c: 1073: if(chrgPwmFlag)
  2599  0678  083E               	movf	_chrgPwmFlag,w
  2600  0679  1903               	btfsc	3,2
  2601  067A  0008               	return
  2602                           
  2603                           ;main.c: 1074: {
  2604                           ;main.c: 1075: chrgPwmFlag = 0;
  2605  067B  01BE               	clrf	_chrgPwmFlag
  2606                           
  2607                           ;main.c: 1076: PWMCON0 &= 0xFB;
  2608  067C  1115               	bcf	21,2	;volatile
  2609                           
  2610                           ;main.c: 1077: RB3 = 0;
  2611  067D  1186               	bcf	6,3	;volatile
  2612  067E  0008               	return
  2613  067F                     __end_of_chrgPwmStop:	
  2614                           
  2615                           	psect	text13
  2616  0614                     __ptext13:	
  2617 ;; *************** function _chrgPwmInit *****************
  2618 ;; Defined at:
  2619 ;;		line 1053 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;		None
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;		None
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  1    wreg      void 
  2626 ;; Registers used:
  2627 ;;		wreg, status,2
  2628 ;; Tracked objects:
  2629 ;;		On entry : 100/0
  2630 ;;		On exit  : 100/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMMON   BANK0   BANK1
  2633 ;;      Params:         0       0       0
  2634 ;;      Locals:         0       0       0
  2635 ;;      Temps:          0       0       0
  2636 ;;      Totals:         0       0       0
  2637 ;;Total ram usage:        0 bytes
  2638 ;; Hardware stack levels used:    1
  2639 ;; Hardware stack levels required when called:    2
  2640 ;; This function calls:
  2641 ;;		Nothing
  2642 ;; This function is called by:
  2643 ;;		_chrgCtr
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646                           
  2647                           
  2648                           ;psect for function _chrgPwmInit
  2649  0614                     _chrgPwmInit:	
  2650                           
  2651                           ;main.c: 1055: chrgPwmFlag = 1;
  2652                           
  2653                           ;incstack = 0
  2654                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2655  0614  01BE               	clrf	_chrgPwmFlag
  2656  0615  0ABE               	incf	_chrgPwmFlag,f
  2657                           
  2658                           ;main.c: 1056: PWMCON1 = 0B00000000;
  2659  0616  0196               	clrf	22	;volatile
  2660                           
  2661                           ;main.c: 1058: PWMTH = 0X00;
  2662                           
  2663                           ;main.c: 1059: PWMTL = 100;
  2664                           
  2665                           ;main.c: 1063: PWMD23H = 0;
  2666  0617  261D               	fcall	PL10	;call to abstracted procedure
  2667                           
  2668                           ;main.c: 1064: PWMD2L = 10;
  2669  0618  300A               	movlw	10
  2670  0619  009B               	movwf	27	;volatile
  2671                           
  2672                           ;main.c: 1065: PWM23DT = 0X00;
  2673  061A  019D               	clrf	29	;volatile
  2674                           
  2675                           ;main.c: 1067: PWMCON0 = 0X04;
  2676  061B  3004               	movlw	4
  2677                           
  2678                           ;main.c: 1068: PWMCON2 =0X00;
  2679  061C  2E23               	ljmp	PL14	;call to abstracted procedure
  2680  061D                     __end_of_chrgPwmInit:	
  2681  061D                     PL10:	
  2682  061D  0198               	clrf	24	;volatile
  2683  061E  3064               	movlw	100
  2684  061F  0097               	movwf	23	;volatile
  2685  0620  1683               	bsf	3,5	;RP0=1, select bank1
  2686  0621  019E               	clrf	30	;volatile
  2687  0622  0008               	return
  2688  0623                     __end_ofPL10:	
  2689  0623                     PL14:	
  2690  0623  1283               	bcf	3,5	;RP0=0, select bank0
  2691  0624  0095               	movwf	21	;volatile
  2692  0625  019D               	clrf	29	;volatile
  2693  0626  0008               	return
  2694  0627                     __end_ofPL14:	
  2695                           
  2696                           	psect	text14
  2697  0393                     __ptext14:	
  2698 ;; *************** function _checkOutA *****************
  2699 ;; Defined at:
  2700 ;;		line 808 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;		None
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;  maxtempV        1    2[BANK1 ] unsigned char 
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  1    wreg      void 
  2707 ;; Registers used:
  2708 ;;		wreg, status,2, status,0, pclath, cstack
  2709 ;; Tracked objects:
  2710 ;;		On entry : 100/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMMON   BANK0   BANK1
  2714 ;;      Params:         0       0       0
  2715 ;;      Locals:         0       0       1
  2716 ;;      Temps:          0       0       2
  2717 ;;      Totals:         0       0       3
  2718 ;;Total ram usage:        3 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; Hardware stack levels required when called:    3
  2721 ;; This function calls:
  2722 ;;		_ADC_Sample
  2723 ;;		___bmul
  2724 ;; This function is called by:
  2725 ;;		_main
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           
  2730                           ;psect for function _checkOutA
  2731  0393                     _checkOutA:	
  2732                           
  2733                           ;main.c: 810: test_adc = ADC_Sample(0, 5);
  2734                           
  2735                           ;incstack = 0
  2736                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2737  0393  3005               	movlw	5
  2738  0394  00F3               	movwf	ADC_Sample@adldo
  2739  0395  3000               	movlw	0
  2740  0396  2100               	fcall	_ADC_Sample
  2741  0397  00DF               	movwf	_test_adc	;volatile
  2742                           
  2743                           ;main.c: 811: if (0xA5 == test_adc)
  2744  0398  30A5               	movlw	165
  2745  0399  065F               	xorwf	_test_adc,w	;volatile
  2746  039A  1D03               	btfss	3,2
  2747  039B  2BF6               	goto	l3256
  2748                           
  2749                           ;main.c: 812: {
  2750                           ;main.c: 813: if(chrgFlag && adresult > 210)
  2751  039C  085B               	movf	_chrgFlag,w
  2752  039D  1903               	btfsc	3,2
  2753  039E  2BAF               	goto	l3222
  2754  039F  3000               	movlw	0
  2755  03A0  0237               	subwf	_adresult+1,w	;volatile
  2756  03A1  30D3               	movlw	211
  2757  03A2  1903               	skipnz
  2758  03A3  0236               	subwf	_adresult,w	;volatile
  2759  03A4  1C03               	skipc
  2760  03A5  2BAF               	goto	l3222
  2761                           
  2762                           ;main.c: 814: {
  2763                           ;main.c: 815: if(++overChrgTime > 10)
  2764  03A6  300B               	movlw	11
  2765  03A7  0ACE               	incf	_overChrgTime,f
  2766  03A8  024E               	subwf	_overChrgTime,w
  2767  03A9  1C03               	skipc
  2768  03AA  2BB0               	goto	l3224
  2769  03AB  3002               	movlw	2
  2770                           
  2771                           ;main.c: 816: {
  2772                           ;main.c: 817: overChrgTime = 0;
  2773  03AC  01CE               	clrf	_overChrgTime
  2774                           
  2775                           ;main.c: 818: protectFlag = 2;
  2776  03AD  00D8               	movwf	_protectFlag
  2777  03AE  2BB0               	goto	l3224
  2778  03AF                     l3222:	
  2779                           
  2780                           ;main.c: 822: else
  2781                           ;main.c: 823: {
  2782                           ;main.c: 824: overChrgTime = 0;
  2783  03AF  01CE               	clrf	_overChrgTime
  2784  03B0                     l3224:	
  2785                           
  2786                           ;main.c: 825: }
  2787                           ;main.c: 826: outADValue = adresult;
  2788  03B0  0837               	movf	_adresult+1,w	;volatile
  2789  03B1  00B1               	movwf	_outADValue+1
  2790  03B2  0836               	movf	_adresult,w	;volatile
  2791  03B3  00B0               	movwf	_outADValue
  2792                           
  2793                           ;main.c: 828: if(workStep && (outADValue > 600))
  2794  03B4  087A               	movf	_workStep,w
  2795  03B5  1903               	btfsc	3,2
  2796  03B6  2BC6               	goto	l3234
  2797  03B7  3002               	movlw	2
  2798  03B8  0231               	subwf	_outADValue+1,w
  2799  03B9  3059               	movlw	89
  2800  03BA  1903               	skipnz
  2801  03BB  0230               	subwf	_outADValue,w
  2802  03BC  1C03               	skipc
  2803  03BD  2BC6               	goto	l3234
  2804                           
  2805                           ;main.c: 829: {
  2806                           ;main.c: 830: if(++workOverOutTime > 50)
  2807  03BE  3033               	movlw	51
  2808  03BF  0AD7               	incf	_workOverOutTime,f
  2809  03C0  0257               	subwf	_workOverOutTime,w
  2810  03C1  1C03               	skipc
  2811  03C2  2BC7               	goto	l3236
  2812                           
  2813                           ;main.c: 831: {
  2814                           ;main.c: 832: workOverOutTime = 0;
  2815  03C3  01D7               	clrf	_workOverOutTime
  2816                           
  2817                           ;main.c: 833: workStep = 0;
  2818  03C4  01FA               	clrf	_workStep
  2819  03C5  2BC7               	goto	l3236
  2820  03C6                     l3234:	
  2821                           
  2822                           ;main.c: 836: else
  2823                           ;main.c: 837: {
  2824                           ;main.c: 838: workOverOutTime = 0;
  2825  03C6  01D7               	clrf	_workOverOutTime
  2826  03C7                     l3236:	
  2827                           
  2828                           ;main.c: 839: }
  2829                           ;main.c: 840: unsigned char maxtempV = 130 + (workStep * 10);
  2830  03C7  300A               	movlw	10
  2831  03C8  00F3               	movwf	___bmul@multiplicand
  2832  03C9  087A               	movf	_workStep,w
  2833  03CA  2647               	fcall	___bmul
  2834  03CB  3E82               	addlw	130
  2835  03CC  1683               	bsf	3,5	;RP0=1, select bank1
  2836  03CD  00A2               	movwf	checkOutA@maxtempV^(0+128)
  2837                           
  2838                           ;main.c: 841: if(jrStep > 0)
  2839  03CE  0878               	movf	_jrStep,w
  2840  03CF  1903               	btfsc	3,2
  2841  03D0  2BD9               	goto	l3246
  2842                           
  2843                           ;main.c: 842: {
  2844                           ;main.c: 843: maxtempV = maxtempV - 40;
  2845  03D1  30D8               	movlw	216
  2846  03D2  07A2               	addwf	checkOutA@maxtempV^(0+128),f
  2847                           
  2848                           ;main.c: 844: if(workStep < 5)
  2849  03D3  3005               	movlw	5
  2850  03D4  027A               	subwf	_workStep,w
  2851  03D5  1803               	skipnc
  2852  03D6  2BD9               	goto	l3246
  2853                           
  2854                           ;main.c: 845: {
  2855                           ;main.c: 846: maxtempV = maxtempV - 30;
  2856  03D7  30E2               	movlw	226
  2857  03D8  07A2               	addwf	checkOutA@maxtempV^(0+128),f
  2858  03D9                     l3246:	
  2859                           
  2860                           ;main.c: 847: }
  2861                           ;main.c: 848: }
  2862                           ;main.c: 849: if(outADValue > maxtempV)
  2863  03D9  0822               	movf	checkOutA@maxtempV^(0+128),w
  2864  03DA  00A0               	movwf	??_checkOutA^(0+128)
  2865  03DB  01A1               	clrf	(??_checkOutA^(0+128)+1)
  2866  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  2867  03DD  0831               	movf	_outADValue+1,w
  2868  03DE  1683               	bsf	3,5	;RP0=1, select bank1
  2869  03DF  0221               	subwf	(??_checkOutA+1)^(0+128),w
  2870  03E0  1D03               	skipz
  2871  03E1  2BE6               	goto	u3495
  2872  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  2873  03E3  0830               	movf	_outADValue,w
  2874  03E4  1683               	bsf	3,5	;RP0=1, select bank1
  2875  03E5  0220               	subwf	??_checkOutA^(0+128),w
  2876  03E6                     u3495:	
  2877  03E6  1803               	skipnc
  2878  03E7  2BF1               	goto	l3252
  2879                           
  2880                           ;main.c: 850: {
  2881                           ;main.c: 851: if(++overCount > 5)
  2882  03E8  3006               	movlw	6
  2883  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  2884  03EA  0AD0               	incf	_overCount,f
  2885  03EB  0250               	subwf	_overCount,w
  2886  03EC  1C03               	skipc
  2887  03ED  0008               	return
  2888                           
  2889                           ;main.c: 852: {
  2890                           ;main.c: 853: overCount = 5;
  2891  03EE  3005               	movlw	5
  2892  03EF  00D0               	movwf	_overCount
  2893  03F0  0008               	return
  2894  03F1                     l3252:	
  2895                           
  2896                           ;main.c: 856: else
  2897                           ;main.c: 857: {
  2898                           ;main.c: 859: if(overCount > 0)
  2899  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  2900  03F2  0850               	movf	_overCount,w
  2901  03F3  1D03               	btfss	3,2
  2902                           
  2903                           ;main.c: 860: {
  2904                           ;main.c: 861: overCount--;
  2905  03F4  03D0               	decf	_overCount,f
  2906  03F5  0008               	return
  2907  03F6                     l3256:	
  2908                           
  2909                           ;main.c: 867: else
  2910                           ;main.c: 868: {
  2911                           ;main.c: 869: ADCON0 = 0;
  2912  03F6  1683               	bsf	3,5	;RP0=1, select bank1
  2913  03F7  0195               	clrf	21	;volatile
  2914                           
  2915                           ;main.c: 870: ADCON1 = 0;
  2916  03F8  0196               	clrf	22	;volatile
  2917                           
  2918                           ;main.c: 871: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2919  03F9  3084               	movlw	132
  2920  03FA  1683               	bsf	3,5	;RP0=1, select bank1
  2921  03FB  00A0               	movwf	??_checkOutA^(0+128)
  2922  03FC                     u3747:	
  2923  03FC  0BA0               	decfsz	??_checkOutA^(0+128),f
  2924  03FD  2BFC               	goto	u3747
  2925  03FE  2BFF               	nop2
  2926  03FF  0008               	return
  2927  0400                     __end_of_checkOutA:	
  2928                           
  2929                           	psect	text15
  2930  0647                     __ptext15:	
  2931 ;; *************** function ___bmul *****************
  2932 ;; Defined at:
  2933 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul8.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  multiplier      1    wreg     unsigned char 
  2936 ;;  multiplicand    1    3[COMMON] unsigned char 
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;  multiplier      1    5[COMMON] unsigned char 
  2939 ;;  product         1    4[COMMON] unsigned char 
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      unsigned char 
  2942 ;; Registers used:
  2943 ;;		wreg, status,2, status,0
  2944 ;; Tracked objects:
  2945 ;;		On entry : 100/0
  2946 ;;		On exit  : 100/0
  2947 ;;		Unchanged: 100/0
  2948 ;; Data sizes:     COMMON   BANK0   BANK1
  2949 ;;      Params:         1       0       0
  2950 ;;      Locals:         2       0       0
  2951 ;;      Temps:          0       0       0
  2952 ;;      Totals:         3       0       0
  2953 ;;Total ram usage:        3 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    2
  2956 ;; This function calls:
  2957 ;;		Nothing
  2958 ;; This function is called by:
  2959 ;;		_checkOutA
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           
  2964                           ;psect for function ___bmul
  2965  0647                     ___bmul:	
  2966                           
  2967                           ;incstack = 0
  2968                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2969                           ;___bmul@multiplier stored from wreg
  2970  0647  00F5               	movwf	___bmul@multiplier
  2971  0648  01F4               	clrf	___bmul@product
  2972  0649                     l3196:	
  2973  0649  0873               	movf	___bmul@multiplicand,w
  2974  064A  1875               	btfsc	___bmul@multiplier,0
  2975  064B  07F4               	addwf	___bmul@product,f
  2976  064C  1003               	clrc
  2977  064D  0DF3               	rlf	___bmul@multiplicand,f
  2978  064E  1003               	clrc
  2979  064F  0CF5               	rrf	___bmul@multiplier,f
  2980  0650  0875               	movf	___bmul@multiplier,w
  2981  0651  1D03               	btfss	3,2
  2982  0652  2E49               	goto	l3196
  2983  0653  0874               	movf	___bmul@product,w
  2984  0654  0008               	return
  2985  0655                     __end_of___bmul:	
  2986                           
  2987                           	psect	text16
  2988  0321                     __ptext16:	
  2989 ;; *************** function _checkBatAD *****************
  2990 ;; Defined at:
  2991 ;;		line 875 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;		None
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;		None
  2996 ;; Return value:  Size  Location     Type
  2997 ;;                  1    wreg      void 
  2998 ;; Registers used:
  2999 ;;		wreg, status,2, status,0, pclath, cstack
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMMON   BANK0   BANK1
  3005 ;;      Params:         0       0       0
  3006 ;;      Locals:         0       0       0
  3007 ;;      Temps:          0       0       2
  3008 ;;      Totals:         0       0       2
  3009 ;;Total ram usage:        2 bytes
  3010 ;; Hardware stack levels used:    1
  3011 ;; Hardware stack levels required when called:    3
  3012 ;; This function calls:
  3013 ;;		_ADC_Sample
  3014 ;; This function is called by:
  3015 ;;		_main
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           
  3020                           ;psect for function _checkBatAD
  3021  0321                     _checkBatAD:	
  3022                           
  3023                           ;main.c: 877: test_adc = ADC_Sample(1, 5);
  3024                           
  3025                           ;incstack = 0
  3026                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  3027  0321  3005               	movlw	5
  3028  0322  00F3               	movwf	ADC_Sample@adldo
  3029  0323  3001               	movlw	1
  3030  0324  2100               	fcall	_ADC_Sample
  3031  0325  00DF               	movwf	_test_adc	;volatile
  3032                           
  3033                           ;main.c: 878: if (0xA5 == test_adc)
  3034  0326  30A5               	movlw	165
  3035  0327  065F               	xorwf	_test_adc,w	;volatile
  3036  0328  1D03               	btfss	3,2
  3037  0329  2B89               	goto	l3292
  3038                           
  3039                           ;main.c: 879: {
  3040                           ;main.c: 880: batADValue = adresult;
  3041  032A  0837               	movf	_adresult+1,w	;volatile
  3042  032B  00AF               	movwf	_batADValue+1
  3043  032C  0836               	movf	_adresult,w	;volatile
  3044  032D  00AE               	movwf	_batADValue
  3045                           
  3046                           ;main.c: 881: if(batADValue < 1117)
  3047  032E  3004               	movlw	4
  3048  032F  022F               	subwf	_batADValue+1,w
  3049  0330  305D               	movlw	93
  3050  0331  1903               	skipnz
  3051  0332  022E               	subwf	_batADValue,w
  3052  0333  1803               	skipnc
  3053  0334  2B48               	goto	l3274
  3054                           
  3055                           ;main.c: 882: {
  3056                           ;main.c: 883: pwStep = 0;
  3057  0335  01CD               	clrf	_pwStep
  3058                           
  3059                           ;main.c: 884: if(++count8s > 800)
  3060  0336  0AA4               	incf	_count8s,f
  3061  0337  1903               	skipnz
  3062  0338  0AA5               	incf	_count8s+1,f
  3063  0339  3003               	movlw	3
  3064  033A  0225               	subwf	_count8s+1,w
  3065  033B  3021               	movlw	33
  3066  033C  1903               	skipnz
  3067  033D  0224               	subwf	_count8s,w
  3068  033E  1C03               	skipc
  3069  033F  2B7C               	goto	l3286
  3070                           
  3071                           ;main.c: 885: {
  3072                           ;main.c: 886: count8s = 0;
  3073  0340  01A4               	clrf	_count8s
  3074  0341  01A5               	clrf	_count8s+1
  3075                           
  3076                           ;main.c: 887: lowBatFlag = 1;
  3077  0342  01C2               	clrf	_lowBatFlag
  3078  0343  0AC2               	incf	_lowBatFlag,f
  3079                           
  3080                           ;main.c: 888: prePwStep = 0;
  3081  0344  01F9               	clrf	_prePwStep
  3082                           
  3083                           ;main.c: 889: workStep = 0;
  3084  0345  01FA               	clrf	_workStep
  3085                           
  3086                           ;main.c: 890: jrStep = 0;
  3087  0346  01F8               	clrf	_jrStep
  3088  0347  2B7C               	goto	l3286
  3089  0348                     l3274:	
  3090  0348  3005               	movlw	5
  3091                           
  3092                           ;main.c: 893: else
  3093                           ;main.c: 894: {
  3094                           ;main.c: 895: count8s = 0;
  3095  0349  01A4               	clrf	_count8s
  3096  034A  01A5               	clrf	_count8s+1
  3097                           
  3098                           ;main.c: 896: if(batADValue >= 1340)
  3099  034B  022F               	subwf	_batADValue+1,w
  3100  034C  303C               	movlw	60
  3101  034D  1903               	skipnz
  3102  034E  022E               	subwf	_batADValue,w
  3103                           
  3104                           ;main.c: 897: {
  3105                           ;main.c: 898: pwStep = ((batADValue - 1340) /2) + 13;
  3106  034F  082E               	movf	_batADValue,w
  3107  0350  1C03               	skipc
  3108  0351  2B62               	goto	L10
  3109  0352  3EC4               	addlw	196
  3110  0353  1683               	bsf	3,5	;RP0=1, select bank1
  3111  0354  00A0               	movwf	??_checkBatAD^(0+128)
  3112  0355  1283               	bcf	3,5	;RP0=0, select bank0
  3113  0356  082F               	movf	_batADValue+1,w
  3114  0357  1803               	skipnc
  3115  0358  3E01               	addlw	1
  3116  0359  3EFA               	addlw	250
  3117  035A  1683               	bsf	3,5	;RP0=1, select bank1
  3118  035B  00A1               	movwf	(??_checkBatAD+1)^(0+128)
  3119  035C  1003               	clrc
  3120  035D  0CA1               	rrf	(??_checkBatAD^(0+128)+1),f
  3121  035E  0CA0               	rrf	??_checkBatAD^(0+128),f
  3122  035F  0820               	movf	??_checkBatAD^(0+128),w
  3123  0360  3E0D               	addlw	13
  3124  0361  2B74               	goto	L9
  3125  0362                     L10:	
  3126                           ;main.c: 900: else
  3127                           ;main.c: 901: {
  3128                           ;main.c: 902: pwStep = (batADValue - 1117) / 16;
  3129                           
  3130                           ;main.c: 899: }
  3131                           
  3132  0362  3EA3               	addlw	163
  3133  0363  1683               	bsf	3,5	;RP0=1, select bank1
  3134  0364  00A0               	movwf	??_checkBatAD^(0+128)
  3135  0365  1283               	bcf	3,5	;RP0=0, select bank0
  3136  0366  082F               	movf	_batADValue+1,w
  3137  0367  1803               	skipnc
  3138  0368  3E01               	addlw	1
  3139  0369  3EFB               	addlw	251
  3140  036A  1683               	bsf	3,5	;RP0=1, select bank1
  3141  036B  00A1               	movwf	(??_checkBatAD+1)^(0+128)
  3142  036C  3004               	movlw	4
  3143  036D                     u3565:	
  3144  036D  1003               	clrc
  3145  036E  0CA1               	rrf	(??_checkBatAD^(0+128)+1),f
  3146  036F  0CA0               	rrf	??_checkBatAD^(0+128),f
  3147  0370  3EFF               	addlw	-1
  3148  0371  1D03               	skipz
  3149  0372  2B6D               	goto	u3565
  3150  0373  0820               	movf	??_checkBatAD^(0+128),w
  3151  0374                     L9:	
  3152  0374  1283               	bcf	3,5	;RP0=0, select bank0
  3153  0375  00CD               	movwf	_pwStep
  3154                           
  3155                           ;main.c: 903: }
  3156                           ;main.c: 904: if(pwStep > 99)
  3157  0376  3064               	movlw	100
  3158  0377  024D               	subwf	_pwStep,w
  3159  0378  1C03               	skipc
  3160  0379  2B7C               	goto	l3286
  3161                           
  3162                           ;main.c: 905: {
  3163                           ;main.c: 906: pwStep = 99;
  3164  037A  3063               	movlw	99
  3165  037B  00CD               	movwf	_pwStep
  3166  037C                     l3286:	
  3167                           
  3168                           ;main.c: 907: }
  3169                           ;main.c: 908: }
  3170                           ;main.c: 909: if(chrgFlag && batADValue > 1861)
  3171  037C  085B               	movf	_chrgFlag,w
  3172  037D  1903               	btfsc	3,2
  3173  037E  0008               	return
  3174  037F  3007               	movlw	7
  3175  0380  022F               	subwf	_batADValue+1,w
  3176  0381  3046               	movlw	70
  3177  0382  1903               	skipnz
  3178  0383  022E               	subwf	_batADValue,w
  3179  0384  1C03               	skipc
  3180  0385  0008               	return
  3181                           
  3182                           ;main.c: 910: {
  3183                           ;main.c: 911: protectFlag = 1;
  3184  0386  01D8               	clrf	_protectFlag
  3185  0387  0AD8               	incf	_protectFlag,f
  3186  0388  0008               	return
  3187  0389                     l3292:	
  3188                           
  3189                           ;main.c: 914: else
  3190                           ;main.c: 915: {
  3191                           ;main.c: 916: ADCON0 = 0;
  3192  0389  1683               	bsf	3,5	;RP0=1, select bank1
  3193  038A  0195               	clrf	21	;volatile
  3194                           
  3195                           ;main.c: 917: ADCON1 = 0;
  3196  038B  0196               	clrf	22	;volatile
  3197                           
  3198                           ;main.c: 918: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3199  038C  3084               	movlw	132
  3200  038D  1683               	bsf	3,5	;RP0=1, select bank1
  3201  038E  00A0               	movwf	??_checkBatAD^(0+128)
  3202  038F                     u3757:	
  3203  038F  0BA0               	decfsz	??_checkBatAD^(0+128),f
  3204  0390  2B8F               	goto	u3757
  3205  0391  2B92               	nop2
  3206  0392  0008               	return
  3207  0393                     __end_of_checkBatAD:	
  3208                           
  3209                           	psect	text17
  3210  0100                     __ptext17:	
  3211 ;; *************** function _ADC_Sample *****************
  3212 ;; Defined at:
  3213 ;;		line 1192 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;  adch            1    wreg     unsigned char 
  3216 ;;  adldo           1    3[COMMON] unsigned char 
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;  adch            1    1[BANK0 ] unsigned char 
  3219 ;;  j               1    0[BANK0 ] unsigned char 
  3220 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  3221 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  3222 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  3223 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  3224 ;;  i               1    2[BANK0 ] unsigned char 
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  1    wreg      unsigned char 
  3227 ;; Registers used:
  3228 ;;		wreg, status,2, status,0
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 100/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMMON   BANK0   BANK1
  3234 ;;      Params:         1       0       0
  3235 ;;      Locals:         0      13       0
  3236 ;;      Temps:          4       0       0
  3237 ;;      Totals:         5      13       0
  3238 ;;Total ram usage:       18 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    2
  3241 ;; This function calls:
  3242 ;;		Nothing
  3243 ;; This function is called by:
  3244 ;;		_checkOutA
  3245 ;;		_checkBatAD
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           
  3250                           ;psect for function _ADC_Sample
  3251  0100                     _ADC_Sample:	
  3252                           
  3253                           ;incstack = 0
  3254                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3255                           ;ADC_Sample@adch stored from wreg
  3256  0100  1283               	bcf	3,5	;RP0=0, select bank0
  3257  0101  00E1               	movwf	ADC_Sample@adch
  3258                           
  3259                           ;main.c: 1194: volatile unsigned long adsum = 0;
  3260                           
  3261                           ;main.c: 1195: volatile unsigned int admin = 0, admax = 0;
  3262  0102  21D9               	fcall	PL6	;call to abstracted procedure
  3263                           
  3264                           ;main.c: 1196: volatile unsigned int ad_temp = 0;
  3265  0103  01EB               	clrf	ADC_Sample@ad_temp	;volatile
  3266  0104  01EC               	clrf	ADC_Sample@ad_temp+1	;volatile
  3267                           
  3268                           ;main.c: 1198: if ((!LDO_EN) && (adldo & 0x04) )
  3269  0105  1683               	bsf	3,5	;RP0=1, select bank1
  3270  0106  1D16               	btfss	22,2	;volatile
  3271  0107  1D73               	btfss	ADC_Sample@adldo,2
  3272  0108  2910               	goto	l3132
  3273                           
  3274                           ;main.c: 1199: {
  3275                           ;main.c: 1201: ADCON1 = adldo;
  3276  0109  0873               	movf	ADC_Sample@adldo,w
  3277  010A  0096               	movwf	22	;volatile
  3278                           
  3279                           ;main.c: 1202: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3280  010B  3085               	movlw	133
  3281  010C  00F4               	movwf	??_ADC_Sample
  3282  010D                     u3767:	
  3283  010D  0BF4               	decfsz	??_ADC_Sample,f
  3284  010E  290D               	goto	u3767
  3285                           
  3286                           ;main.c: 1203: }
  3287  010F  2912               	goto	l3134
  3288  0110                     l3132:	
  3289                           
  3290                           ;main.c: 1204: else
  3291                           ;main.c: 1205: ADCON1 = adldo;
  3292  0110  0873               	movf	ADC_Sample@adldo,w
  3293  0111  0096               	movwf	22	;volatile
  3294  0112                     l3134:	
  3295                           
  3296                           ;main.c: 1207: if(adch & 0x10)
  3297  0112  1283               	bcf	3,5	;RP0=0, select bank0
  3298  0113  1E61               	btfss	ADC_Sample@adch,4
  3299  0114  291A               	goto	l3142
  3300                           
  3301                           ;main.c: 1208: {
  3302                           ;main.c: 1209: CHS4 = 1;
  3303  0115  1683               	bsf	3,5	;RP0=1, select bank1
  3304  0116  1716               	bsf	22,6	;volatile
  3305                           
  3306                           ;main.c: 1210: adch &= 0x0f;
  3307  0117  300F               	movlw	15
  3308  0118  1283               	bcf	3,5	;RP0=0, select bank0
  3309  0119  05E1               	andwf	ADC_Sample@adch,f
  3310  011A                     l3142:	
  3311                           
  3312                           ;main.c: 1213: for (i = 0; i < 10; i++)
  3313  011A  01E2               	clrf	ADC_Sample@i
  3314  011B                     l3148:	
  3315                           
  3316                           ;main.c: 1214: {
  3317                           ;main.c: 1215: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3318  011B  0861               	movf	ADC_Sample@adch,w
  3319  011C  00F4               	movwf	??_ADC_Sample
  3320  011D  3001               	movlw	1
  3321  011E  1003               	clrc
  3322  011F                     L11:	
  3323  011F  0DF4               	rlf	??_ADC_Sample,f
  3324  0120  3EFF               	addlw	-1
  3325  0121  1003               	clrc
  3326  0122  1D03               	skipz
  3327  0123  291F               	goto	L11
  3328  0124  0D74               	rlf	??_ADC_Sample,w
  3329  0125  3841               	iorlw	65
  3330  0126  1683               	bsf	3,5	;RP0=1, select bank1
  3331  0127  0095               	movwf	21	;volatile
  3332  0128  0000               	nop	;# 
  3333  0129  0000               	nop	;# 
  3334  012A  0000               	nop	;# 
  3335  012B  0000               	nop	;# 
  3336                           
  3337                           ;main.c: 1220: GODONE = 1;
  3338  012C  1683               	bsf	3,5	;RP0=1, select bank1
  3339  012D  1495               	bsf	21,1	;volatile
  3340                           
  3341                           ;main.c: 1222: unsigned char j = 0;
  3342  012E  1283               	bcf	3,5	;RP0=0, select bank0
  3343  012F  01E0               	clrf	ADC_Sample@j
  3344  0130                     l933:	
  3345                           ;main.c: 1223: while (GODONE)
  3346                           
  3347  0130  1683               	bsf	3,5	;RP0=1, select bank1
  3348  0131  1C95               	btfss	21,1	;volatile
  3349  0132  293B               	goto	l3158
  3350                           
  3351                           ;main.c: 1224: {
  3352                           ;main.c: 1225: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3353  0133  2934               	nop2	;2 cycle nop
  3354  0134  2935               	nop2	;2 cycle nop
  3355  0135  2936               	nop2	;2 cycle nop
  3356  0136  2937               	nop2	;2 cycle nop
  3357                           
  3358                           ;main.c: 1227: if (0 == (--j))
  3359  0137  1283               	bcf	3,5	;RP0=0, select bank0
  3360  0138  0BE0               	decfsz	ADC_Sample@j,f
  3361  0139  2930               	goto	l933
  3362                           
  3363                           ;main.c: 1228: return 0;
  3364  013A  3400               	retlw	0
  3365  013B                     l3158:	
  3366                           
  3367                           ;main.c: 1229: }
  3368                           ;main.c: 1231: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3369  013B  0819               	movf	25,w	;volatile
  3370  013C  1283               	bcf	3,5	;RP0=0, select bank0
  3371  013D  00EB               	movwf	ADC_Sample@ad_temp	;volatile
  3372  013E  01EC               	clrf	ADC_Sample@ad_temp+1	;volatile
  3373  013F  0EEB               	swapf	ADC_Sample@ad_temp,f	;volatile
  3374  0140  0EEC               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3375  0141  30F0               	movlw	240
  3376  0142  05EC               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3377  0143  086B               	movf	ADC_Sample@ad_temp,w	;volatile
  3378  0144  390F               	andlw	15
  3379  0145  04EC               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3380  0146  30F0               	movlw	240
  3381  0147  05EB               	andwf	ADC_Sample@ad_temp,f	;volatile
  3382  0148  1683               	bsf	3,5	;RP0=1, select bank1
  3383  0149  0E18               	swapf	24,w	;volatile
  3384  014A  390F               	andlw	15
  3385  014B  1283               	bcf	3,5	;RP0=0, select bank0
  3386  014C  07EB               	addwf	ADC_Sample@ad_temp,f	;volatile
  3387  014D  1803               	skipnc
  3388  014E  0AEC               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3389                           
  3390                           ;main.c: 1233: if (0 == admax)
  3391  014F  0869               	movf	ADC_Sample@admax,w	;volatile
  3392  0150  046A               	iorwf	ADC_Sample@admax+1,w	;volatile
  3393  0151  1D03               	btfss	3,2
  3394  0152  2955               	goto	l3166
  3395                           
  3396                           ;main.c: 1234: {
  3397                           ;main.c: 1235: admax = ad_temp;
  3398  0153  21E2               	fcall	PL16	;call to abstracted procedure
  3399  0154  2967               	goto	l3172
  3400  0155                     l3166:	
  3401                           ;main.c: 1237: }
  3402                           
  3403                           ;main.c: 1236: admin = ad_temp;
  3404                           
  3405                           
  3406                           ;main.c: 1238: else if (ad_temp > admax)
  3407  0155  086C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3408  0156  026A               	subwf	ADC_Sample@admax+1,w	;volatile
  3409  0157  1D03               	skipz
  3410  0158  295B               	goto	u3305
  3411  0159  086B               	movf	ADC_Sample@ad_temp,w	;volatile
  3412  015A  0269               	subwf	ADC_Sample@admax,w	;volatile
  3413  015B                     u3305:	
  3414  015B  1803               	skipnc
  3415  015C  295F               	goto	l3170
  3416                           
  3417                           ;main.c: 1239: admax = ad_temp;
  3418  015D  21E2               	fcall	PL16	;call to abstracted procedure
  3419  015E  296B               	goto	l939
  3420  015F                     l3170:	
  3421                           
  3422                           ;main.c: 1240: else if (ad_temp < admin)
  3423  015F  0868               	movf	ADC_Sample@admin+1,w	;volatile
  3424  0160  026C               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3425  0161  1D03               	skipz
  3426  0162  2965               	goto	u3315
  3427  0163  0867               	movf	ADC_Sample@admin,w	;volatile
  3428  0164  026B               	subwf	ADC_Sample@ad_temp,w	;volatile
  3429  0165                     u3315:	
  3430  0165  1803               	skipnc
  3431  0166  296B               	goto	l939
  3432  0167                     l3172:	
  3433                           
  3434                           ;main.c: 1241: admin = ad_temp;
  3435  0167  086C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3436  0168  00E8               	movwf	ADC_Sample@admin+1	;volatile
  3437  0169  086B               	movf	ADC_Sample@ad_temp,w	;volatile
  3438  016A  00E7               	movwf	ADC_Sample@admin	;volatile
  3439  016B                     l939:	
  3440                           
  3441                           ;main.c: 1243: adsum += ad_temp;
  3442  016B  086B               	movf	ADC_Sample@ad_temp,w	;volatile
  3443  016C  00F4               	movwf	??_ADC_Sample
  3444  016D  086C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3445  016E  00F5               	movwf	??_ADC_Sample+1
  3446  016F  01F6               	clrf	??_ADC_Sample+2
  3447  0170  01F7               	clrf	??_ADC_Sample+3
  3448  0171  0874               	movf	??_ADC_Sample,w
  3449  0172  07E3               	addwf	ADC_Sample@adsum,f	;volatile
  3450  0173  0875               	movf	??_ADC_Sample+1,w
  3451  0174  1103               	clrz
  3452  0175  1803               	skipnc
  3453  0176  3E01               	addlw	1
  3454  0177  1D03               	btfss	3,2
  3455  0178  07E4               	addwf	ADC_Sample@adsum+1,f	;volatile
  3456  0179  0876               	movf	??_ADC_Sample+2,w
  3457  017A  1103               	clrz
  3458  017B  1803               	skipnc
  3459  017C  3E01               	addlw	1
  3460  017D  1D03               	btfss	3,2
  3461  017E  07E5               	addwf	ADC_Sample@adsum+2,f	;volatile
  3462  017F  0877               	movf	??_ADC_Sample+3,w
  3463  0180  1103               	clrz
  3464  0181  1803               	skipnc
  3465  0182  3E01               	addlw	1
  3466  0183  1D03               	btfss	3,2
  3467  0184  07E6               	addwf	ADC_Sample@adsum+3,f	;volatile
  3468  0185  300A               	movlw	10
  3469  0186  0AE2               	incf	ADC_Sample@i,f
  3470  0187  0262               	subwf	ADC_Sample@i,w
  3471  0188  1C03               	skipc
  3472  0189  291B               	goto	l3148
  3473                           
  3474                           ;main.c: 1244: }
  3475                           ;main.c: 1245: adsum -= admax;
  3476  018A  0869               	movf	ADC_Sample@admax,w	;volatile
  3477  018B  00F4               	movwf	??_ADC_Sample
  3478  018C  086A               	movf	ADC_Sample@admax+1,w	;volatile
  3479  018D  21CA               	fcall	PL2	;call to abstracted procedure
  3480  018E  1C03               	skipc
  3481  018F  0F77               	incfsz	??_ADC_Sample+3,w
  3482  0190  02E6               	subwf	ADC_Sample@adsum+3,f	;volatile
  3483                           
  3484                           ;main.c: 1246: if (adsum >= admin)
  3485  0191  0867               	movf	ADC_Sample@admin,w	;volatile
  3486  0192  00F4               	movwf	??_ADC_Sample
  3487  0193  0868               	movf	ADC_Sample@admin+1,w	;volatile
  3488  0194  00F5               	movwf	??_ADC_Sample+1
  3489  0195  01F6               	clrf	??_ADC_Sample+2
  3490  0196  01F7               	clrf	??_ADC_Sample+3
  3491  0197  0877               	movf	??_ADC_Sample+3,w
  3492  0198  0266               	subwf	ADC_Sample@adsum+3,w	;volatile
  3493  0199  1D03               	skipz
  3494  019A  29A5               	goto	u3355
  3495  019B  0876               	movf	??_ADC_Sample+2,w
  3496  019C  0265               	subwf	ADC_Sample@adsum+2,w	;volatile
  3497  019D  1D03               	skipz
  3498  019E  29A5               	goto	u3355
  3499  019F  0875               	movf	??_ADC_Sample+1,w
  3500  01A0  0264               	subwf	ADC_Sample@adsum+1,w	;volatile
  3501  01A1  1D03               	skipz
  3502  01A2  29A5               	goto	u3355
  3503  01A3  0874               	movf	??_ADC_Sample,w
  3504  01A4  0263               	subwf	ADC_Sample@adsum,w	;volatile
  3505  01A5                     u3355:	
  3506  01A5  1C03               	skipc
  3507  01A6  29AF               	goto	l943
  3508                           
  3509                           ;main.c: 1247: adsum -= admin;
  3510  01A7  0867               	movf	ADC_Sample@admin,w	;volatile
  3511  01A8  00F4               	movwf	??_ADC_Sample
  3512  01A9  0868               	movf	ADC_Sample@admin+1,w	;volatile
  3513  01AA  21CA               	fcall	PL2	;call to abstracted procedure
  3514  01AB  1C03               	skipc
  3515  01AC  0F77               	incfsz	??_ADC_Sample+3,w
  3516  01AD  02E6               	subwf	ADC_Sample@adsum+3,f	;volatile
  3517  01AE  29B3               	goto	l3182
  3518  01AF                     l943:	
  3519                           
  3520                           ;main.c: 1248: else
  3521                           ;main.c: 1249: adsum = 0;
  3522  01AF  01E3               	clrf	ADC_Sample@adsum	;volatile
  3523  01B0  01E4               	clrf	ADC_Sample@adsum+1	;volatile
  3524  01B1  01E5               	clrf	ADC_Sample@adsum+2	;volatile
  3525  01B2  01E6               	clrf	ADC_Sample@adsum+3	;volatile
  3526  01B3                     l3182:	
  3527                           
  3528                           ;main.c: 1251: adresult = adsum >> 3;
  3529  01B3  0863               	movf	ADC_Sample@adsum,w	;volatile
  3530  01B4  00F4               	movwf	??_ADC_Sample
  3531  01B5  0864               	movf	ADC_Sample@adsum+1,w	;volatile
  3532  01B6  00F5               	movwf	??_ADC_Sample+1
  3533  01B7  0865               	movf	ADC_Sample@adsum+2,w	;volatile
  3534  01B8  00F6               	movwf	??_ADC_Sample+2
  3535  01B9  0866               	movf	ADC_Sample@adsum+3,w	;volatile
  3536  01BA  00F7               	movwf	??_ADC_Sample+3
  3537  01BB  3003               	movlw	3
  3538  01BC                     u3375:	
  3539  01BC  1003               	clrc
  3540  01BD  0CF7               	rrf	??_ADC_Sample+3,f
  3541  01BE  0CF6               	rrf	??_ADC_Sample+2,f
  3542  01BF  0CF5               	rrf	??_ADC_Sample+1,f
  3543  01C0  0CF4               	rrf	??_ADC_Sample,f
  3544  01C1  3EFF               	addlw	-1
  3545  01C2  1D03               	skipz
  3546  01C3  29BC               	goto	u3375
  3547  01C4  0875               	movf	??_ADC_Sample+1,w
  3548  01C5  00B7               	movwf	_adresult+1	;volatile
  3549  01C6  0874               	movf	??_ADC_Sample,w
  3550  01C7  00B6               	movwf	_adresult	;volatile
  3551                           
  3552                           ;main.c: 1253: adsum = 0;
  3553                           
  3554                           ;main.c: 1254: admin = 0;
  3555                           
  3556                           ;main.c: 1255: admax = 0;
  3557  01C8  21D9               	fcall	PL6	;call to abstracted procedure
  3558                           
  3559                           ;main.c: 1256: return 0xA5;
  3560  01C9  34A5               	retlw	165
  3561  01CA                     __end_of_ADC_Sample:	
  3562  01CA                     PL2:	
  3563  01CA  00F5               	movwf	??_ADC_Sample+1
  3564  01CB  01F6               	clrf	??_ADC_Sample+2
  3565  01CC  01F7               	clrf	??_ADC_Sample+3
  3566  01CD  0874               	movf	??_ADC_Sample,w
  3567  01CE  02E3               	subwf	ADC_Sample@adsum,f	;volatile
  3568  01CF  0875               	movf	??_ADC_Sample+1,w
  3569  01D0  1C03               	skipc
  3570  01D1  0F75               	incfsz	??_ADC_Sample+1,w
  3571  01D2  02E4               	subwf	ADC_Sample@adsum+1,f	;volatile
  3572  01D3  0876               	movf	??_ADC_Sample+2,w
  3573  01D4  1C03               	skipc
  3574  01D5  0F76               	incfsz	??_ADC_Sample+2,w
  3575  01D6  02E5               	subwf	ADC_Sample@adsum+2,f	;volatile
  3576  01D7  0877               	movf	??_ADC_Sample+3,w
  3577  01D8  0008               	return
  3578  01D9                     __end_ofPL2:	
  3579  01D9                     PL6:	
  3580  01D9  01E3               	clrf	ADC_Sample@adsum	;volatile
  3581  01DA  01E4               	clrf	ADC_Sample@adsum+1	;volatile
  3582  01DB  01E5               	clrf	ADC_Sample@adsum+2	;volatile
  3583  01DC  01E6               	clrf	ADC_Sample@adsum+3	;volatile
  3584  01DD  01E7               	clrf	ADC_Sample@admin	;volatile
  3585  01DE  01E8               	clrf	ADC_Sample@admin+1	;volatile
  3586  01DF  01E9               	clrf	ADC_Sample@admax	;volatile
  3587  01E0  01EA               	clrf	ADC_Sample@admax+1	;volatile
  3588  01E1  0008               	return
  3589  01E2                     __end_ofPL6:	
  3590  01E2                     PL16:	
  3591  01E2  086C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3592  01E3  00EA               	movwf	ADC_Sample@admax+1	;volatile
  3593  01E4  086B               	movf	ADC_Sample@ad_temp,w	;volatile
  3594  01E5  00E9               	movwf	ADC_Sample@admax	;volatile
  3595  01E6  0008               	return
  3596  01E7                     __end_ofPL16:	
  3597                           
  3598                           	psect	text18
  3599  050C                     __ptext18:	
  3600 ;; *************** function _Sleep_Mode *****************
  3601 ;; Defined at:
  3602 ;;		line 1115 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;		None
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;		None
  3607 ;; Return value:  Size  Location     Type
  3608 ;;                  1    wreg      void 
  3609 ;; Registers used:
  3610 ;;		wreg, status,2, status,0, pclath, cstack
  3611 ;; Tracked objects:
  3612 ;;		On entry : 100/0
  3613 ;;		On exit  : 100/100
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMMON   BANK0   BANK1
  3616 ;;      Params:         0       0       0
  3617 ;;      Locals:         0       0       0
  3618 ;;      Temps:          0       0       0
  3619 ;;      Totals:         0       0       0
  3620 ;;Total ram usage:        0 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; Hardware stack levels required when called:    3
  3623 ;; This function calls:
  3624 ;;		_AD_Init
  3625 ;;		_Init_System
  3626 ;; This function is called by:
  3627 ;;		_main
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           
  3632                           ;psect for function _Sleep_Mode
  3633  050C                     _Sleep_Mode:	
  3634                           
  3635                           ;main.c: 1117: INTCON = 0;
  3636                           
  3637                           ;incstack = 0
  3638                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3639  050C  018B               	clrf	11	;volatile
  3640                           
  3641                           ;main.c: 1119: OPTION_REG = 0;
  3642  050D  0181               	clrf	1	;volatile
  3643                           
  3644                           ;main.c: 1121: WPUA = 0B00000000;
  3645  050E  1683               	bsf	3,5	;RP0=1, select bank1
  3646  050F  0188               	clrf	8	;volatile
  3647                           
  3648                           ;main.c: 1122: TRISA = 0x03;
  3649  0510  3003               	movlw	3
  3650                           
  3651                           ;main.c: 1123: TRISB = 0x87;
  3652                           
  3653                           ;main.c: 1125: PORTA = 0X00;
  3654                           
  3655                           ;main.c: 1126: PORTB = 0X00;
  3656  0511  2544               	fcall	PL4	;call to abstracted procedure
  3657                           
  3658                           ;main.c: 1127: WPUB = 0B00000000;
  3659  0512  0188               	clrf	8	;volatile
  3660                           
  3661                           ;main.c: 1129: ADCON0 = 0;
  3662  0513  1683               	bsf	3,5	;RP0=1, select bank1
  3663  0514  0195               	clrf	21	;volatile
  3664                           
  3665                           ;main.c: 1130: ADCON1 = 0;
  3666  0515  0196               	clrf	22	;volatile
  3667                           
  3668                           ;main.c: 1132: PWMCON0 = 0;
  3669  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3670  0517  0195               	clrf	21	;volatile
  3671                           
  3672                           ;main.c: 1134: OSCCON = 0X70;
  3673  0518  3070               	movlw	112
  3674  0519  0094               	movwf	20	;volatile
  3675                           
  3676                           ;main.c: 1136: IOCA = 0B00000000;
  3677  051A  1683               	bsf	3,5	;RP0=1, select bank1
  3678  051B  0189               	clrf	9	;volatile
  3679                           
  3680                           ;main.c: 1137: IOCB = 0B00000111;
  3681  051C  3007               	movlw	7
  3682  051D  1283               	bcf	3,5	;RP0=0, select bank0
  3683  051E  0089               	movwf	9	;volatile
  3684                           
  3685                           ;main.c: 1139: RAIE = 1;
  3686  051F  158E               	bsf	14,3	;volatile
  3687                           
  3688                           ;main.c: 1140: PEIE = 1;
  3689  0520  170B               	bsf	11,6	;volatile
  3690                           
  3691                           ;main.c: 1141: RBIE = 1;
  3692  0521  158B               	bsf	11,3	;volatile
  3693                           
  3694                           ;main.c: 1142: GIE = 0;
  3695  0522  138B               	bcf	11,7	;volatile
  3696                           
  3697                           ;main.c: 1144: PIE1 &= 0X08;
  3698  0523  3008               	movlw	8
  3699  0524  058E               	andwf	14,f	;volatile
  3700                           
  3701                           ;main.c: 1145: PIR1 = 0;
  3702  0525  018D               	clrf	13	;volatile
  3703                           
  3704                           ;main.c: 1146: INTCON &= 0XC8;
  3705  0526  30C8               	movlw	200
  3706  0527  058B               	andwf	11,f	;volatile
  3707                           
  3708                           ;main.c: 1148: PORTA;
  3709  0528  1683               	bsf	3,5	;RP0=1, select bank1
  3710  0529  0806               	movf	6,w	;volatile
  3711                           
  3712                           ;main.c: 1149: RAIF = 0;
  3713  052A  1283               	bcf	3,5	;RP0=0, select bank0
  3714  052B  118D               	bcf	13,3	;volatile
  3715                           
  3716                           ;main.c: 1150: PORTB;
  3717  052C  0806               	movf	6,w	;volatile
  3718                           
  3719                           ;main.c: 1151: RBIF = 0;
  3720  052D  100B               	bcf	11,0	;volatile
  3721  052E  0064               	clrwdt	;# 
  3722  052F  0063               	sleep	;# 
  3723  0530  0000               	nop	;# 
  3724  0531  0064               	clrwdt	;# 
  3725  0532  0000               	nop	;# 
  3726  0533  0000               	nop	;# 
  3727  0534  0000               	nop	;# 
  3728  0535  0000               	nop	;# 
  3729  0536  0000               	nop	;# 
  3730                           
  3731                           ;main.c: 1163: if(RAIF) RAIF = 0;
  3732  0537  1283               	bcf	3,5	;RP0=0, select bank0
  3733  0538  198D               	btfsc	13,3	;volatile
  3734  0539  118D               	bcf	13,3	;volatile
  3735                           
  3736                           ;main.c: 1164: if(RBIF) RBIF = 0;
  3737  053A  180B               	btfsc	11,0	;volatile
  3738  053B  100B               	bcf	11,0	;volatile
  3739                           
  3740                           ;main.c: 1165: if(TMR2IF) TMR2IF = 0;
  3741  053C  188D               	btfsc	13,1	;volatile
  3742  053D  108D               	bcf	13,1	;volatile
  3743                           
  3744                           ;main.c: 1166: IOCA = 0B00000000;
  3745  053E  1683               	bsf	3,5	;RP0=1, select bank1
  3746  053F  0189               	clrf	9	;volatile
  3747                           
  3748                           ;main.c: 1167: IOCB = 0B00000000;
  3749  0540  1283               	bcf	3,5	;RP0=0, select bank0
  3750  0541  0189               	clrf	9	;volatile
  3751                           
  3752                           ;main.c: 1168: Init_System();
  3753  0542  25DD               	fcall	_Init_System
  3754                           
  3755                           ;main.c: 1169: AD_Init();
  3756  0543  2E5F               	ljmp	l2244
  3757  0544                     __end_of_Sleep_Mode:	
  3758  0544                     PL4:	
  3759  0544  0085               	movwf	5	;volatile
  3760  0545  3087               	movlw	135
  3761  0546  1283               	bcf	3,5	;RP0=0, select bank0
  3762  0547  0085               	movwf	5	;volatile
  3763  0548  1683               	bsf	3,5	;RP0=1, select bank1
  3764  0549  0186               	clrf	6	;volatile
  3765  054A  1283               	bcf	3,5	;RP0=0, select bank0
  3766  054B  0186               	clrf	6	;volatile
  3767  054C  0008               	return
  3768  054D                     __end_ofPL4:	
  3769                           
  3770                           	psect	text19
  3771  05DD                     __ptext19:	
  3772 ;; *************** function _Init_System *****************
  3773 ;; Defined at:
  3774 ;;		line 960 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;		None
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;		None
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2
  3783 ;; Tracked objects:
  3784 ;;		On entry : 100/0
  3785 ;;		On exit  : 100/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMMON   BANK0   BANK1
  3788 ;;      Params:         0       0       0
  3789 ;;      Locals:         0       0       0
  3790 ;;      Temps:          0       0       0
  3791 ;;      Totals:         0       0       0
  3792 ;;Total ram usage:        0 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    2
  3795 ;; This function calls:
  3796 ;;		Nothing
  3797 ;; This function is called by:
  3798 ;;		_main
  3799 ;;		_Sleep_Mode
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803                           
  3804                           ;psect for function _Init_System
  3805  05DD                     _Init_System:	
  3806                           
  3807                           ;incstack = 0
  3808                           ; Regs used in _Init_System: [wreg+status,2]
  3809  05DD  0000               	nop	;# 
  3810  05DE  0064               	clrwdt	;# 
  3811                           
  3812                           ;main.c: 964: OPTION_REG = 0;
  3813  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  3814  05E0  0181               	clrf	1	;volatile
  3815  05E1  0064               	clrwdt	;# 
  3816                           
  3817                           ;main.c: 966: OSCCON = 0X72;
  3818  05E2  3072               	movlw	114
  3819  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  3820  05E4  0094               	movwf	20	;volatile
  3821                           
  3822                           ;main.c: 968: WPUA = 0B00000000;
  3823  05E5  1683               	bsf	3,5	;RP0=1, select bank1
  3824  05E6  0188               	clrf	8	;volatile
  3825                           
  3826                           ;main.c: 969: WPDA = 0x00;
  3827  05E7  0187               	clrf	7	;volatile
  3828                           
  3829                           ;main.c: 970: WPUB = 0B00000000;
  3830  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  3831  05E9  0188               	clrf	8	;volatile
  3832                           
  3833                           ;main.c: 972: TRISA = 0x03;
  3834  05EA  3003               	movlw	3
  3835  05EB  1683               	bsf	3,5	;RP0=1, select bank1
  3836                           
  3837                           ;main.c: 973: TRISB = 0x87;
  3838                           
  3839                           ;main.c: 975: PORTA = 0X00;
  3840                           
  3841                           ;main.c: 976: PORTB = 0X00;
  3842  05EC  2544               	fcall	PL4	;call to abstracted procedure
  3843                           
  3844                           ;main.c: 980: PR2 = 249;
  3845  05ED  30F9               	movlw	249
  3846  05EE  0091               	movwf	17	;volatile
  3847                           
  3848                           ;main.c: 981: TMR2IF = 0;
  3849  05EF  108D               	bcf	13,1	;volatile
  3850                           
  3851                           ;main.c: 982: TMR2IE = 1;
  3852  05F0  148E               	bsf	14,1	;volatile
  3853                           
  3854                           ;main.c: 984: T2CON = 0B00000100;
  3855  05F1  3004               	movlw	4
  3856  05F2  0093               	movwf	19	;volatile
  3857                           
  3858                           ;main.c: 985: INTCON = 0XC0;
  3859  05F3  30C0               	movlw	192
  3860  05F4  008B               	movwf	11	;volatile
  3861  05F5  0008               	return
  3862  05F6                     __end_of_Init_System:	
  3863                           
  3864                           	psect	text20
  3865  065F                     __ptext20:	
  3866 ;; *************** function _AD_Init *****************
  3867 ;; Defined at:
  3868 ;;		line 997 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;		None
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;		None
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  1    wreg      void 
  3875 ;; Registers used:
  3876 ;;		wreg, status,2
  3877 ;; Tracked objects:
  3878 ;;		On entry : 100/0
  3879 ;;		On exit  : 100/100
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMMON   BANK0   BANK1
  3882 ;;      Params:         0       0       0
  3883 ;;      Locals:         0       0       0
  3884 ;;      Temps:          0       0       0
  3885 ;;      Totals:         0       0       0
  3886 ;;Total ram usage:        0 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    2
  3889 ;; This function calls:
  3890 ;;		Nothing
  3891 ;; This function is called by:
  3892 ;;		_main
  3893 ;;		_Sleep_Mode
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           
  3898                           ;psect for function _AD_Init
  3899  065F                     _AD_Init:	
  3900  065F                     l2244:	
  3901                           ;incstack = 0
  3902                           ; Regs used in _AD_Init: [wreg+status,2]
  3903                           
  3904                           
  3905                           ;main.c: 1030: ADCON0 = 0X41;
  3906  065F  3041               	movlw	65
  3907  0660  1683               	bsf	3,5	;RP0=1, select bank1
  3908  0661  0095               	movwf	21	;volatile
  3909                           
  3910                           ;main.c: 1047: ADCON1 = 0;
  3911  0662  0196               	clrf	22	;volatile
  3912                           
  3913                           ;main.c: 1048: ANSEL0 = 0X03;
  3914  0663  3003               	movlw	3
  3915  0664  0093               	movwf	19	;volatile
  3916                           
  3917                           ;main.c: 1049: ANSEL1 = 0x80;
  3918  0665  3080               	movlw	128
  3919  0666  0094               	movwf	20	;volatile
  3920  0667  0008               	return
  3921  0668                     __end_of_AD_Init:	
  3922                           
  3923                           	psect	text21
  3924  0589                     __ptext21:	
  3925 ;; *************** function _Isr_Timer *****************
  3926 ;; Defined at:
  3927 ;;		line 131 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;		None
  3930 ;; Auto vars:     Size  Location     Type
  3931 ;;		None
  3932 ;; Return value:  Size  Location     Type
  3933 ;;                  1    wreg      void 
  3934 ;; Registers used:
  3935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3936 ;; Tracked objects:
  3937 ;;		On entry : 0/0
  3938 ;;		On exit  : 100/0
  3939 ;;		Unchanged: 0/0
  3940 ;; Data sizes:     COMMON   BANK0   BANK1
  3941 ;;      Params:         0       0       0
  3942 ;;      Locals:         0       0       0
  3943 ;;      Temps:          3       0       0
  3944 ;;      Totals:         3       0       0
  3945 ;;Total ram usage:        3 bytes
  3946 ;; Hardware stack levels used:    1
  3947 ;; Hardware stack levels required when called:    1
  3948 ;; This function calls:
  3949 ;;		_ledShow
  3950 ;; This function is called by:
  3951 ;;		Interrupt level 1
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954                           
  3955                           
  3956                           ;psect for function _Isr_Timer
  3957  0589                     _Isr_Timer:	
  3958                           
  3959                           ;main.c: 133: if(TMR2IF)
  3960  0589  1283               	bcf	3,5	;RP0=0, select bank0
  3961  058A  1C8D               	btfss	13,1	;volatile
  3962  058B  2D9D               	goto	i1l690
  3963                           
  3964                           ;main.c: 134: {
  3965                           ;main.c: 135: TMR2IF = 0;
  3966  058C  108D               	bcf	13,1	;volatile
  3967                           
  3968                           ;main.c: 136: if(++intCount >= 160)
  3969  058D  30A0               	movlw	160
  3970  058E  0ADE               	incf	_intCount,f
  3971  058F  025E               	subwf	_intCount,w
  3972  0590  1C03               	skipc
  3973  0591  2D9A               	goto	i1l3038
  3974  0592  3064               	movlw	100
  3975                           
  3976                           ;main.c: 137: {
  3977                           ;main.c: 138: intCount = 0;
  3978  0593  01DE               	clrf	_intCount
  3979                           
  3980                           ;main.c: 139: IntFlag = 1;
  3981  0594  01DC               	clrf	_IntFlag
  3982  0595  0ADC               	incf	_IntFlag,f
  3983                           
  3984                           ;main.c: 140: if(++count1s >= 100)
  3985  0596  0ADD               	incf	_count1s,f
  3986  0597  025D               	subwf	_count1s,w
  3987  0598  1803               	btfsc	3,0
  3988                           
  3989                           ;main.c: 141: {
  3990                           ;main.c: 142: count1s = 0;
  3991  0599  01DD               	clrf	_count1s
  3992  059A                     i1l3038:	
  3993                           
  3994                           ;main.c: 143: }
  3995                           ;main.c: 144: }
  3996                           ;main.c: 145: ledShow();
  3997  059A  21E7               	fcall	_ledShow
  3998                           
  3999                           ;main.c: 146: intCount10++;
  4000  059B  1283               	bcf	3,5	;RP0=0, select bank0
  4001  059C  0AD9               	incf	_intCount10,f
  4002  059D                     i1l690:	
  4003  059D  0872               	movf	??_Isr_Timer+2,w
  4004  059E  008A               	movwf	10
  4005  059F  0871               	movf	??_Isr_Timer+1,w
  4006  05A0  0084               	movwf	4
  4007  05A1  0E70               	swapf	??_Isr_Timer^(0+-128),w
  4008  05A2  0083               	movwf	3
  4009  05A3  0EFE               	swapf	126,f
  4010  05A4  0E7E               	swapf	126,w
  4011  05A5  0009               	retfie
  4012  05A6                     __end_of_Isr_Timer:	
  4013                           
  4014                           	psect	intentry
  4015  0004                     __pintentry:	
  4016                           ;incstack = 0
  4017                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4018                           
  4019  0004                     interrupt_function:	
  4020  007E                     saved_w	set	btemp
  4021  0004  00FE               	movwf	btemp
  4022  0005  0E03               	swapf	3,w
  4023  0006  00F0               	movwf	??_Isr_Timer
  4024  0007  0804               	movf	4,w
  4025  0008  00F1               	movwf	??_Isr_Timer+1
  4026  0009  080A               	movf	10,w
  4027  000A  00F2               	movwf	??_Isr_Timer+2
  4028  000B  2D89               	ljmp	_Isr_Timer
  4029                           
  4030                           	psect	text22
  4031  01E7                     __ptext22:	
  4032 ;; *************** function _ledShow *****************
  4033 ;; Defined at:
  4034 ;;		line 200 in file "C:\mcuproject\scm\zdt\A208_062B_SOP16\main.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;		None
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;		None
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  1    wreg      void 
  4041 ;; Registers used:
  4042 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4043 ;; Tracked objects:
  4044 ;;		On entry : 100/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMMON   BANK0   BANK1
  4048 ;;      Params:         0       0       0
  4049 ;;      Locals:         0       0       0
  4050 ;;      Temps:          0       0       0
  4051 ;;      Totals:         0       0       0
  4052 ;;Total ram usage:        0 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; This function calls:
  4055 ;;		Nothing
  4056 ;; This function is called by:
  4057 ;;		_Isr_Timer
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           
  4062                           ;psect for function _ledShow
  4063  01E7                     _ledShow:	
  4064                           
  4065                           ;main.c: 202: if(++ledCntTime > 5)
  4066                           
  4067                           ;incstack = 0
  4068                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  4069  01E7  3006               	movlw	6
  4070  01E8  0AC3               	incf	_ledCntTime,f
  4071  01E9  0243               	subwf	_ledCntTime,w
  4072  01EA  1C03               	skipc
  4073  01EB  0008               	return
  4074  01EC  3010               	movlw	16
  4075                           
  4076                           ;main.c: 203: {
  4077                           ;main.c: 204: ledCntTime = 0;
  4078  01ED  01C3               	clrf	_ledCntTime
  4079                           
  4080                           ;main.c: 205: if(++ledCnt > 15)
  4081  01EE  0AD6               	incf	_ledCnt,f
  4082  01EF  0256               	subwf	_ledCnt,w
  4083  01F0  1803               	btfsc	3,0
  4084                           
  4085                           ;main.c: 206: {
  4086                           ;main.c: 207: ledCnt = 0;
  4087  01F1  01D6               	clrf	_ledCnt
  4088                           
  4089                           ;main.c: 208: }
  4090                           ;main.c: 209: PORTA &= 0xC7;
  4091  01F2  30C7               	movlw	199
  4092  01F3  1683               	bsf	3,5	;RP0=1, select bank1
  4093  01F4  0586               	andwf	6,f	;volatile
  4094                           
  4095                           ;main.c: 210: PORTB &= 0x9F;
  4096  01F5  309F               	movlw	159
  4097  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  4098  01F7  0586               	andwf	6,f	;volatile
  4099                           
  4100                           ;main.c: 211: TRISA |= 0x38;
  4101  01F8  3038               	movlw	56
  4102  01F9  1683               	bsf	3,5	;RP0=1, select bank1
  4103  01FA  0485               	iorwf	5,f	;volatile
  4104                           
  4105                           ;main.c: 212: TRISB |= 0x60;
  4106  01FB  3060               	movlw	96
  4107  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  4108  01FD  0485               	iorwf	5,f	;volatile
  4109                           
  4110                           ;main.c: 213: switch(ledCnt)
  4111  01FE  2A98               	goto	i1l2556
  4112  01FF                     i1l711:	
  4113                           ;main.c: 214: {
  4114                           ;main.c: 215: case 1:
  4115                           
  4116                           
  4117                           ;main.c: 216: if(shiweiNum & 0x01)
  4118  01FF  1C6E               	btfss	_shiweiNum,0
  4119  0200  0008               	return
  4120                           
  4121                           ;main.c: 217: {
  4122                           ;main.c: 218: TRISA &= 0xF7;
  4123  0201  1683               	bsf	3,5	;RP0=1, select bank1
  4124  0202  1185               	bcf	5,3	;volatile
  4125                           
  4126                           ;main.c: 219: TRISA &= 0xEF;
  4127  0203  1205               	bcf	5,4	;volatile
  4128                           
  4129                           ;main.c: 220: RA3 = 1;
  4130  0204  1586               	bsf	6,3	;volatile
  4131                           
  4132                           ;main.c: 221: RA4 = 0;
  4133  0205  1206               	bcf	6,4	;volatile
  4134  0206  0008               	return
  4135  0207                     i1l714:	
  4136                           ;main.c: 224: case 2:
  4137                           
  4138                           
  4139                           ;main.c: 225: if(shiweiNum & 0x02)
  4140  0207  1CEE               	btfss	_shiweiNum,1
  4141  0208  0008               	return
  4142                           
  4143                           ;main.c: 226: {
  4144                           ;main.c: 227: TRISA &= 0xF7;
  4145  0209  1683               	bsf	3,5	;RP0=1, select bank1
  4146  020A  1185               	bcf	5,3	;volatile
  4147                           
  4148                           ;main.c: 228: TRISA &= 0xEF;
  4149  020B  1205               	bcf	5,4	;volatile
  4150                           
  4151                           ;main.c: 229: RA4 = 1;
  4152  020C  1606               	bsf	6,4	;volatile
  4153                           
  4154                           ;main.c: 230: RA3 = 0;
  4155  020D  1186               	bcf	6,3	;volatile
  4156  020E  0008               	return
  4157  020F                     i1l716:	
  4158                           ;main.c: 233: case 3:
  4159                           
  4160                           
  4161                           ;main.c: 234: if(shiweiNum & 0x04)
  4162  020F  1D6E               	btfss	_shiweiNum,2
  4163  0210  0008               	return
  4164                           
  4165                           ;main.c: 235: {
  4166                           ;main.c: 236: TRISA &= 0xF7;
  4167  0211  1683               	bsf	3,5	;RP0=1, select bank1
  4168  0212  1185               	bcf	5,3	;volatile
  4169                           
  4170                           ;main.c: 237: TRISB &= 0xBF;
  4171  0213  1283               	bcf	3,5	;RP0=0, select bank0
  4172  0214  1305               	bcf	5,6	;volatile
  4173                           
  4174                           ;main.c: 238: RA3 = 1;
  4175  0215  1683               	bsf	3,5	;RP0=1, select bank1
  4176  0216  1586               	bsf	6,3	;volatile
  4177                           
  4178                           ;main.c: 239: RB6 = 0;
  4179  0217  1283               	bcf	3,5	;RP0=0, select bank0
  4180  0218  1306               	bcf	6,6	;volatile
  4181  0219  0008               	return
  4182  021A                     i1l718:	
  4183                           ;main.c: 242: case 4:
  4184                           
  4185                           
  4186                           ;main.c: 243: if(shiweiNum & 0x08)
  4187  021A  1DEE               	btfss	_shiweiNum,3
  4188  021B  0008               	return
  4189                           
  4190                           ;main.c: 244: {
  4191                           ;main.c: 245: TRISA &= 0xEF;
  4192  021C  1683               	bsf	3,5	;RP0=1, select bank1
  4193  021D  1205               	bcf	5,4	;volatile
  4194                           
  4195                           ;main.c: 246: TRISB &= 0xBF;
  4196  021E  1283               	bcf	3,5	;RP0=0, select bank0
  4197  021F  1305               	bcf	5,6	;volatile
  4198                           
  4199                           ;main.c: 247: RA4 = 1;
  4200  0220  1683               	bsf	3,5	;RP0=1, select bank1
  4201  0221  1606               	bsf	6,4	;volatile
  4202                           
  4203                           ;main.c: 248: RB6 = 0;
  4204  0222  1283               	bcf	3,5	;RP0=0, select bank0
  4205  0223  1306               	bcf	6,6	;volatile
  4206  0224  0008               	return
  4207  0225                     i1l720:	
  4208                           ;main.c: 251: case 5:
  4209                           
  4210                           
  4211                           ;main.c: 252: if(shiweiNum & 0x10)
  4212  0225  1E6E               	btfss	_shiweiNum,4
  4213  0226  0008               	return
  4214                           
  4215                           ;main.c: 253: {
  4216                           ;main.c: 254: TRISA &= 0xEF;
  4217  0227  1683               	bsf	3,5	;RP0=1, select bank1
  4218  0228  1205               	bcf	5,4	;volatile
  4219                           
  4220                           ;main.c: 255: TRISB &= 0xDF;
  4221  0229  1283               	bcf	3,5	;RP0=0, select bank0
  4222  022A  1285               	bcf	5,5	;volatile
  4223                           
  4224                           ;main.c: 256: RA4 = 1;
  4225  022B  1683               	bsf	3,5	;RP0=1, select bank1
  4226  022C  1606               	bsf	6,4	;volatile
  4227                           
  4228                           ;main.c: 257: RB5 = 0;
  4229  022D  1283               	bcf	3,5	;RP0=0, select bank0
  4230  022E  1286               	bcf	6,5	;volatile
  4231  022F  0008               	return
  4232  0230                     i1l722:	
  4233                           ;main.c: 260: case 6:
  4234                           
  4235                           
  4236                           ;main.c: 261: if(shiweiNum & 0x20)
  4237  0230  1EEE               	btfss	_shiweiNum,5
  4238  0231  0008               	return
  4239                           
  4240                           ;main.c: 262: {
  4241                           ;main.c: 263: TRISA &= 0xF7;
  4242  0232  1683               	bsf	3,5	;RP0=1, select bank1
  4243  0233  1185               	bcf	5,3	;volatile
  4244                           
  4245                           ;main.c: 264: TRISB &= 0xDF;
  4246  0234  1283               	bcf	3,5	;RP0=0, select bank0
  4247  0235  1285               	bcf	5,5	;volatile
  4248                           
  4249                           ;main.c: 265: RA3 = 1;
  4250  0236  1683               	bsf	3,5	;RP0=1, select bank1
  4251  0237  1586               	bsf	6,3	;volatile
  4252                           
  4253                           ;main.c: 266: RB5 = 0;
  4254  0238  1283               	bcf	3,5	;RP0=0, select bank0
  4255  0239  1286               	bcf	6,5	;volatile
  4256  023A  0008               	return
  4257  023B                     i1l724:	
  4258                           ;main.c: 269: case 7:
  4259                           
  4260                           
  4261                           ;main.c: 270: if(shiweiNum & 0x40)
  4262  023B  1F6E               	btfss	_shiweiNum,6
  4263  023C  0008               	return
  4264                           
  4265                           ;main.c: 271: {
  4266                           ;main.c: 272: TRISB &= 0xBF;
  4267  023D  1305               	bcf	5,6	;volatile
  4268                           
  4269                           ;main.c: 273: TRISB &= 0xDF;
  4270  023E  1285               	bcf	5,5	;volatile
  4271                           
  4272                           ;main.c: 274: RB6 = 1;
  4273  023F  1706               	bsf	6,6	;volatile
  4274                           
  4275                           ;main.c: 275: RB5 = 0;
  4276  0240  1286               	bcf	6,5	;volatile
  4277  0241  0008               	return
  4278  0242                     i1l726:	
  4279                           ;main.c: 278: case 8:
  4280                           
  4281                           
  4282                           ;main.c: 279: if(geweiNum & 0x01)
  4283  0242  1C6D               	btfss	_geweiNum,0
  4284  0243  0008               	return
  4285                           
  4286                           ;main.c: 280: {
  4287                           ;main.c: 281: TRISA &= 0xDF;
  4288  0244  1683               	bsf	3,5	;RP0=1, select bank1
  4289  0245  1285               	bcf	5,5	;volatile
  4290                           
  4291                           ;main.c: 282: TRISA &= 0xEF;
  4292  0246  1205               	bcf	5,4	;volatile
  4293                           
  4294                           ;main.c: 283: RA4 = 1;
  4295  0247  1606               	bsf	6,4	;volatile
  4296                           
  4297                           ;main.c: 284: RA5 = 0;
  4298  0248  1286               	bcf	6,5	;volatile
  4299  0249  0008               	return
  4300  024A                     i1l728:	
  4301                           ;main.c: 287: case 9:
  4302                           
  4303                           
  4304                           ;main.c: 288: if(geweiNum & 0x02)
  4305  024A  1CED               	btfss	_geweiNum,1
  4306  024B  0008               	return
  4307                           
  4308                           ;main.c: 289: {
  4309                           ;main.c: 290: TRISA &= 0xDF;
  4310  024C  1683               	bsf	3,5	;RP0=1, select bank1
  4311  024D  1285               	bcf	5,5	;volatile
  4312                           
  4313                           ;main.c: 291: TRISA &= 0xEF;
  4314  024E  1205               	bcf	5,4	;volatile
  4315                           
  4316                           ;main.c: 292: RA5 = 1;
  4317  024F  1686               	bsf	6,5	;volatile
  4318                           
  4319                           ;main.c: 293: RA4 = 0;
  4320  0250  1206               	bcf	6,4	;volatile
  4321  0251  0008               	return
  4322  0252                     i1l730:	
  4323                           ;main.c: 296: case 10:
  4324                           
  4325                           
  4326                           ;main.c: 297: if(geweiNum & 0x04)
  4327  0252  1D6D               	btfss	_geweiNum,2
  4328  0253  0008               	return
  4329                           
  4330                           ;main.c: 298: {
  4331                           ;main.c: 299: TRISA &= 0xDF;
  4332  0254  1683               	bsf	3,5	;RP0=1, select bank1
  4333  0255  1285               	bcf	5,5	;volatile
  4334                           
  4335                           ;main.c: 300: TRISA &= 0xF7;
  4336  0256  1185               	bcf	5,3	;volatile
  4337                           
  4338                           ;main.c: 301: RA3 = 1;
  4339  0257  1586               	bsf	6,3	;volatile
  4340                           
  4341                           ;main.c: 302: RA5 = 0;
  4342  0258  1286               	bcf	6,5	;volatile
  4343  0259  0008               	return
  4344  025A                     i1l732:	
  4345                           ;main.c: 305: case 11:
  4346                           
  4347                           
  4348                           ;main.c: 306: if(geweiNum & 0x08)
  4349  025A  1DED               	btfss	_geweiNum,3
  4350  025B  0008               	return
  4351                           
  4352                           ;main.c: 307: {
  4353                           ;main.c: 308: TRISA &= 0xDF;
  4354  025C  1683               	bsf	3,5	;RP0=1, select bank1
  4355  025D  1285               	bcf	5,5	;volatile
  4356                           
  4357                           ;main.c: 309: TRISA &= 0xF7;
  4358  025E  1185               	bcf	5,3	;volatile
  4359                           
  4360                           ;main.c: 310: RA5 = 1;
  4361  025F  1686               	bsf	6,5	;volatile
  4362                           
  4363                           ;main.c: 311: RA3 = 0;
  4364  0260  1186               	bcf	6,3	;volatile
  4365  0261  0008               	return
  4366  0262                     i1l734:	
  4367                           ;main.c: 314: case 12:
  4368                           
  4369                           
  4370                           ;main.c: 315: if(geweiNum & 0x10)
  4371  0262  1E6D               	btfss	_geweiNum,4
  4372  0263  0008               	return
  4373                           
  4374                           ;main.c: 316: {
  4375                           ;main.c: 317: TRISA &= 0xDF;
  4376  0264  1683               	bsf	3,5	;RP0=1, select bank1
  4377  0265  1285               	bcf	5,5	;volatile
  4378                           
  4379                           ;main.c: 318: TRISB &= 0xBF;
  4380  0266  1283               	bcf	3,5	;RP0=0, select bank0
  4381  0267  1305               	bcf	5,6	;volatile
  4382                           
  4383                           ;main.c: 319: RB6 = 1;
  4384  0268  1706               	bsf	6,6	;volatile
  4385                           
  4386                           ;main.c: 320: RA5 = 0;
  4387  0269  1683               	bsf	3,5	;RP0=1, select bank1
  4388  026A  1286               	bcf	6,5	;volatile
  4389  026B  0008               	return
  4390  026C                     i1l736:	
  4391                           ;main.c: 323: case 13:
  4392                           
  4393                           
  4394                           ;main.c: 324: if(geweiNum & 0x20)
  4395  026C  1EED               	btfss	_geweiNum,5
  4396  026D  0008               	return
  4397                           
  4398                           ;main.c: 325: {
  4399                           ;main.c: 326: TRISA &= 0xDF;
  4400  026E  1683               	bsf	3,5	;RP0=1, select bank1
  4401  026F  1285               	bcf	5,5	;volatile
  4402                           
  4403                           ;main.c: 327: TRISB &= 0xBF;
  4404  0270  1283               	bcf	3,5	;RP0=0, select bank0
  4405  0271  1305               	bcf	5,6	;volatile
  4406                           
  4407                           ;main.c: 328: RA5 = 1;
  4408  0272  1683               	bsf	3,5	;RP0=1, select bank1
  4409  0273  1686               	bsf	6,5	;volatile
  4410                           
  4411                           ;main.c: 329: RB6 = 0;
  4412  0274  1283               	bcf	3,5	;RP0=0, select bank0
  4413  0275  1306               	bcf	6,6	;volatile
  4414  0276  0008               	return
  4415  0277                     i1l738:	
  4416                           ;main.c: 332: case 14:
  4417                           
  4418                           
  4419                           ;main.c: 333: if(geweiNum & 0x40)
  4420  0277  1F6D               	btfss	_geweiNum,6
  4421  0278  0008               	return
  4422                           
  4423                           ;main.c: 334: {
  4424                           ;main.c: 335: TRISA &= 0xDF;
  4425  0279  1683               	bsf	3,5	;RP0=1, select bank1
  4426  027A  1285               	bcf	5,5	;volatile
  4427                           
  4428                           ;main.c: 336: TRISB &= 0xDF;
  4429  027B  1283               	bcf	3,5	;RP0=0, select bank0
  4430  027C  1285               	bcf	5,5	;volatile
  4431                           
  4432                           ;main.c: 337: RA5 = 1;
  4433  027D  1683               	bsf	3,5	;RP0=1, select bank1
  4434  027E  1686               	bsf	6,5	;volatile
  4435                           
  4436                           ;main.c: 338: RB5 = 0;
  4437  027F  1283               	bcf	3,5	;RP0=0, select bank0
  4438  0280  1286               	bcf	6,5	;volatile
  4439  0281  0008               	return
  4440  0282                     i1l2546:	
  4441                           
  4442                           ;main.c: 342: if(workStep > 0)
  4443  0282  087A               	movf	_workStep,w
  4444  0283  1903               	btfsc	3,2
  4445  0284  0008               	return
  4446                           
  4447                           ;main.c: 343: {
  4448                           ;main.c: 344: TRISA &= 0xEF;
  4449  0285  1683               	bsf	3,5	;RP0=1, select bank1
  4450  0286  1205               	bcf	5,4	;volatile
  4451                           
  4452                           ;main.c: 345: TRISB &= 0xDF;
  4453  0287  1283               	bcf	3,5	;RP0=0, select bank0
  4454  0288  1285               	bcf	5,5	;volatile
  4455                           
  4456                           ;main.c: 346: RB5 = 1;
  4457  0289  1686               	bsf	6,5	;volatile
  4458                           
  4459                           ;main.c: 347: RA4 = 0;
  4460  028A  1683               	bsf	3,5	;RP0=1, select bank1
  4461  028B  1206               	bcf	6,4	;volatile
  4462  028C  0008               	return
  4463  028D                     i1l2550:	
  4464                           
  4465                           ;main.c: 351: if(jrStep > 0)
  4466  028D  0878               	movf	_jrStep,w
  4467  028E  1903               	btfsc	3,2
  4468  028F  0008               	return
  4469                           
  4470                           ;main.c: 352: {
  4471                           ;main.c: 353: TRISA &= 0xDF;
  4472  0290  1683               	bsf	3,5	;RP0=1, select bank1
  4473  0291  1285               	bcf	5,5	;volatile
  4474                           
  4475                           ;main.c: 354: TRISB &= 0xDF;
  4476  0292  1283               	bcf	3,5	;RP0=0, select bank0
  4477  0293  1285               	bcf	5,5	;volatile
  4478                           
  4479                           ;main.c: 355: RB5 = 1;
  4480  0294  1686               	bsf	6,5	;volatile
  4481                           
  4482                           ;main.c: 356: RA5 = 0;
  4483  0295  1683               	bsf	3,5	;RP0=1, select bank1
  4484  0296  1286               	bcf	6,5	;volatile
  4485  0297  0008               	return
  4486  0298                     i1l2556:	
  4487  0298  0856               	movf	_ledCnt,w
  4488                           
  4489                           ; Switch size 1, requested type "space"
  4490                           ; Number of cases is 16, Range of values is 0 to 15
  4491                           ; switch strategies available:
  4492                           ; Name         Instructions Cycles
  4493                           ; direct_byte           22     6 (fixed)
  4494                           ; simple_byte           49    25 (average)
  4495                           ; jumptable            260     6 (fixed)
  4496                           ;	Chosen strategy is direct_byte
  4497  0299  0084               	movwf	4
  4498  029A  3010               	movlw	16
  4499  029B  0204               	subwf	4,w
  4500  029C  1803               	skipnc
  4501  029D  0008               	return
  4502  029E  3006               	movlw	high i1S3376
  4503  029F  008A               	movwf	10
  4504  02A0  3037               	movlw	low i1S3376
  4505  02A1  0704               	addwf	4,w
  4506  02A2  0082               	movwf	2
  4507  02A3  0008               	return
  4508  02A4                     __end_of_ledShow:	
  4509  007E                     btemp	set	126	;btemp
  4510  007E                     wtemp0	set	126
  4511                           
  4512                           	psect	swtext1
  4513  0637                     __pswtext1:	
  4514  0637                     i1S3376:	
  4515  0637  2A8D               	ljmp	i1l2550
  4516  0638  29FF               	ljmp	i1l711
  4517  0639  2A07               	ljmp	i1l714
  4518  063A  2A0F               	ljmp	i1l716
  4519  063B  2A1A               	ljmp	i1l718
  4520  063C  2A25               	ljmp	i1l720
  4521  063D  2A30               	ljmp	i1l722
  4522  063E  2A3B               	ljmp	i1l724
  4523  063F  2A42               	ljmp	i1l726
  4524  0640  2A4A               	ljmp	i1l728
  4525  0641  2A52               	ljmp	i1l730
  4526  0642  2A5A               	ljmp	i1l732
  4527  0643  2A62               	ljmp	i1l734
  4528  0644  2A6C               	ljmp	i1l736
  4529  0645  2A77               	ljmp	i1l738
  4530  0646  2A82               	ljmp	i1l2546


Data Sizes:
    Strings     0
    Constant    14
    Data        0
    BSS         67
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     13      80
    BANK1            80      3       3

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ledCtr->___lbmod
    _keyCtr->_keyRead
    _keyCtr->_keyRead2
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_checkOutA

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2732
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                              _jrPwm
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              1     1      0       0
                                              3 COMMON     1     1      0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               0     0      0     533
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     265
                                              3 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     268
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               2     2      0     134
                                              4 COMMON     2     2      0
                            _keyRead
                           _keyRead2
 ---------------------------------------------------------------------------------
 (2) _keyRead2                                             1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _jrPwm                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0       0
                                              3 COMMON     2     2      0
                        _chrgPwmInit
                        _chrgPwmStop
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            3     3      0    1153
                                              0 BANK1      3     3      0
                         _ADC_Sample
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     201
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0     912
                                              0 BANK1      2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     912
                                              3 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
     ___bmul
   _chrgCtr
     _chrgPwmInit
     _chrgPwmStop
     _pwmStop
   _jrPwm
   _keyCtr
     _keyRead
     _keyRead2
   _ledCtr
     ___lbdiv
     ___lbmod
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      D      50       4      100.0%
BITBANK1            50      0       0       5        0.0%
BANK1               50      3       3       6        3.8%
ABS                  0      0      5E       7        0.0%
DATA                 0      0      5E       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 14 11:18:05 2025

            _protectFlag 0058                        pc 0002           ___bmul@product 0074  
                     PL2 01CA                       PL4 0544                       PL6 01D9  
                     PL8 00FA                       fsr 0004                      PL10 061D  
                    PL12 0466                      PL14 0623                      PL16 01E2  
                    l700 04EB                      l833 0498                      l844 0635  
                    l836 04B0                      l933 0130                      l943 01AF  
                    l695 04C9                      l939 016B                      _GIE 005F  
                    _RA2 0432                      _RA3 0433                      _RA4 0434  
                    _RA5 0435                      _RB3 0033                      _RB4 0034  
                    _RB5 0035                      _RB6 0036                      _PR2 0011  
    __size_of_ADC_Sample 00CA                      fsr0 0004                      indf 0000  
        __end_of_AD_Init 0668                     l1210 05CE                     l2306 0583  
                   l2244 065F                     l3132 0110                     l2252 0678  
                   l3142 011A                     l3134 0112                     l3222 03AF  
                   l3224 03B0                     l3170 015F                     l3234 03C6  
                   l2346 0565                     l3314 04DA                     l3172 0167  
                   l3148 011B                     l3252 03F1                     l3236 03C7  
                   l2700 0087                     l3308 04D1                     l3182 01B3  
                   l3166 0155                     l3158 013B                     l3246 03D9  
                   l2710 00A3                     l2702 0089                     l3256 03F6  
                   l2720 00B0                     l2480 05DB                     l3274 0348  
                   l2722 00B2                     l2706 008D                     l2650 0034  
                   l2634 0020                     l2466 05C8                     l3354 050A  
                   l3292 0389                     l3196 0649                     l2740 00D6  
                   l2716 00AD                     l2812 049D                     l3286 037C  
                   l2734 00D1                     l2662 0047                     l2814 0485  
                   l2822 048E                     l2760 00F7                     l2736 00D2  
                   l2680 0060                     l2672 0053                     l2648 0032  
                   l2744 00DD                     l2808 047C                     l2496 05BE  
                   l2488 05AA                     l2920 0312                     l2904 02F8  
                   l2690 006D                     l2666 0049                     l2818 048A  
                   l2834 049F                     l2924 0318                     l2916 030A  
                   l2908 02FE                     l2688 006B                     l2848 04B7  
                   l2864 02AE                     l2954 0430                     l2946 041E  
                   l2938 040B                     l2972 0452                     l2966 0443  
                   l2886 02DC                     l2894 02EE                     l2976 0463  
                   l2968 0448                     l2888 02DE                     l2898 02F2  
                   _CHS4 04B6                     _IOCA 0089                     _IOCB 0009  
                   u3305 015B                     u3315 0165                     u2525 00C5  
                   _PIE1 000E                     u3355 01A5                     u2485 00A1  
                   u3375 01BC                     _PEIE 005E                     _RAIE 0073  
                   _RAIF 006B                     u3565 036D                     u3495 03E6  
                   _RBIE 005B                     _RBIF 0058                     u3747 03FC  
                   u3757 038F                     u3767 010D                     _PIR1 000D  
                   _WPDA 0087                     _WPUA 0088                     _WPUB 0008  
                   _main 04BF                     btemp 007E                     start 000C  
      ___bmul@multiplier 0075            ??_Init_System 0073                    ?_main 0070  
        __end_of___lbdiv 05DD          __end_of___lbmod 05C2                    _T2CON 0013  
                  i1l711 01FF                    i1l720 0225                    i1l730 0252  
                  i1l722 0230                    i1l714 0207                    i1l732 025A  
                  i1l724 023B                    i1l716 020F                    i1l734 0262  
                  i1l726 0242                    i1l718 021A                    i1l736 026C  
                  i1l728 024A                    i1l738 0277                    i1l690 059D  
                  _PORTA 0086                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0005                    _PWMTH 0018                    _PWMTL 0017  
        __end_of_chrgCtr 00FA          __end_of_ledShow 02A4          __end_of_keyRead 0589  
                  _jrPwm 0627                    pclath 000A          __end_of_pwmInit 065F  
        __end_of_pwmStop 0678                    status 0003                    wtemp0 007E  
        __end_of_workCtr 0321          ___lbdiv@divisor 0073          ___lbdiv@counter 0075  
        __initialization 000D             __end_of_main 050C     __size_of_chrgPwmInit 0009  
   __size_of_chrgPwmStop 0007                   ??_main 0078                ??_AD_Init 0073  
    __end_of_Init_System 05F6                   _ADCON0 0095                   _ADCON1 0096  
                 ?_jrPwm 0070                   i1S3376 0637                   _ADRESH 0099  
                 _ADRESL 0098                   _ANSEL0 0093                   _ANSEL1 0094  
                 _GODONE 04A9                   i1l3038 059A                   i1l2550 028D  
                 i1l2546 0282                   i1l2556 0298                   _LDO_EN 04B2  
                 _INTCON 000B                   _OSCCON 0014                   _TMR2IE 0071  
                 _TMR2IF 0069                   _PWMD2L 009B             ??_ADC_Sample 0074  
           keyCtr@kclick 0074       __size_of_Isr_Timer 001D               _Sleep_Mode 050C  
                 ___bmul 0647                ??___lbdiv 0074         __end_of_keyRead2 056B  
              ??___lbmod 0074                   _ledCnt 0056                   _ledCtr 0400  
                 _jrDuty 003A                   _keyCtr 046B                   _jrStep 0078  
              ??_chrgCtr 0073                   _pwStep 004D                   _result 0034  
              ??_ledShow 0070         __end_of_numArray 0614                ??_keyRead 0073  
     __end_of_ADC_Sample 01CA                   saved_w 007E                ??_pwmInit 0073  
              ??_pwmStop 0073                ??_workCtr 0073         ___lbdiv@dividend 0074  
             _batADValue 002E          ___lbmod@divisor 0073  __end_of__initialization 0015  
        ___lbmod@counter 0076      ___bmul@multiplicand 0073          _workOverOutTime 0057  
         __pcstackCOMMON 0070       __size_of_checkOutA 006D            __end_of_jrPwm 0637  
            _Init_System 05DD               __end_ofPL2 01D9               __end_ofPL4 054D  
             __end_ofPL6 01E2               __end_ofPL8 0100         ___lbdiv@quotient 0076  
      __end_of_Isr_Timer 05A6               _checkBatAD 0321                  ??_jrPwm 0073  
             __pbssBANK0 0020             _chrgFullFlag 005A              ?_Sleep_Mode 0070  
             __pmaintext 04BF                  ?___bmul 0073               __pintentry 0004  
                ?_ledCtr 0070             _chrgWaitTime 0045                  ?_keyCtr 0070  
             _ledCntTime 0043                  _AD_Init 065F                  _PWM23DT 009D  
                _PWMD23H 009E                  _PWMCON0 0015                  _PWMCON1 0016  
                _PWMCON2 001D        __end_of_checkOutA 0400               __stringtab 0600  
          keyCtr@kclick2 0075                ?_keyRead2 0070               _jrWaitTime 0038  
             _jrShowTime 003C                  _IntFlag 005C               _intCount10 0059  
        ADC_Sample@adldo 0073          ADC_Sample@admax 0069          ADC_Sample@admin 0067  
        ADC_Sample@adsum 0063          __size_of___bmul 000E                  ___lbdiv 05C2  
                ___lbmod 05A6                  _addTime 0047          __size_of_ledCtr 0066  
        __size_of_keyCtr 0054                  _chrgCtr 0017               _lowBatFlag 0042  
                __ptext1 02A4                  __ptext2 0655                  __ptext3 0400  
                __ptext4 05A6                  __ptext5 05C2                  __ptext6 046B  
                __ptext7 054D                  __ptext8 056B                  __ptext9 0627  
                _ledShow 01E7                  _count1s 005D                  _count5s 0028  
                _count8s 0024                  _maxDuty 0051                  _keyRead 056B  
    __size_of_Sleep_Mode 0038                  _pwmInit 0655                  _subTime 0046  
            ?_checkBatAD 0070                  _pwmStop 0670                  clrloop0 0669  
                _workCtr 02A4               _outADValue 0030     end_of_initialization 0015  
             ??_keyRead2 0073            _longPressFlag 0053            ??_chrgPwmInit 0073  
          ??_chrgPwmStop 0073         ___lbmod@dividend 0075              ___lbmod@rem 0077  
    __size_of_checkBatAD 0072           __end_of___bmul 0655             ?_Init_System 0070  
         __end_of_ledCtr 0466           __end_of_keyCtr 04BF      __end_of_chrgPwmInit 061D  
    __end_of_chrgPwmStop 067F              __end_ofPL10 0623              __end_ofPL12 046B  
            __end_ofPL14 0627              __end_ofPL16 01E7      start_initialization 000D  
              _Isr_Timer 0589             ??_Sleep_Mode 0073                 ??___bmul 0074  
               ??_ledCtr 0078        ADC_Sample@ad_temp 006B                 ??_keyCtr 0074  
               ?_AD_Init 0070              __pbssCOMMON 0078                ___latbits 0000  
          __pcstackBANK0 0060            __pcstackBANK1 00A0       __end_of_Sleep_Mode 0544  
             ?_Isr_Timer 0070                _checkOutA 0393        __size_of_keyRead2 001E  
              __pnvBANK0 006D              _chrgMaxDuty 0044                _chrgMaxAD 0049  
            _chrgPwmFlag 003E              _chrgPwmInit 0614                 ?___lbdiv 0073  
               ?___lbmod 0073              _chrgPwmStop 0678                 ?_chrgCtr 0070  
              __pstrings 0600                __pswtext1 0637                _count900s 0022  
               ?_ledShow 0070                 ?_keyRead 0070                _keyCount2 0054  
              _firstTime 006F                _jrPwmTime 003B           ADC_Sample@adch 0061  
               ?_pwmInit 0070                _fullCount 002A             ??_checkBatAD 00A0  
               ?_pwmStop 0070                _lockCount 0048           __size_of_jrPwm 0010  
               ?_workCtr 0070              ADC_Sample@i 0062              ADC_Sample@j 0060  
      interrupt_function 0004               ?_checkOutA 0070                clear_ram0 0668  
              _prePwStep 0079              _reChrgCount 004C                _sleepTime 0041  
              _prejrStep 003F                _shiweiNum 006E                _overCount 0050  
      checkOutA@maxtempV 00A2       __end_of_checkBatAD 0393              __stringbase 0605  
   __size_of_Init_System 0019                _startTime 004F         __size_of_AD_Init 0009  
       keyRead@keyStatus 0073              ??_Isr_Timer 0070               _ADC_Sample 0100  
            _jrStartTime 0020         __size_of___lbdiv 001B         __size_of___lbmod 001C  
     __end_of__stringtab 0606         __size_of_chrgCtr 00E3         __size_of_ledShow 00BD  
       __size_of_keyRead 001E                 _adresult 0036                 _chrgFlag 005B  
               _chrgMode 004A                 __ptext10 0017                 __ptext11 0670  
               __ptext20 065F                 __ptext12 0678                 __ptext21 0589  
               __ptext13 0614                 __ptext22 01E7                 __ptext14 0393  
               __ptext15 0647                 __ptext16 0321                 __ptext17 0100  
               __ptext18 050C                 __ptext19 05DD         __size_of_pwmInit 000A  
       __size_of_pwmStop 0008                 _jrDutyFX 0039                 _geweiNum 006D  
               _count50s 002C         __size_of_workCtr 007D                 _keyRead2 054D  
               _keyCount 0055                 _intCount 005E            __size_of_main 004D  
            ??_checkOutA 00A0                 _numArray 0606                 _test_adc 005F  
               _power_ad 0032                 _workStep 007A             _overChrgTime 004E  
           _motorPwmFlag 003D                 intlevel1 0000              ?_ADC_Sample 0073  
            _preWorkStep 0040        keyRead2@keyStatus 0073                stringcode 0600  
           ?_chrgPwmInit 0070           _longPressFlag2 0052             _overWorkTime 0026  
           ?_chrgPwmStop 0070              _showBatTime 004B               _OPTION_REG 0001  
               stringdir 0600                 stringtab 0600  
