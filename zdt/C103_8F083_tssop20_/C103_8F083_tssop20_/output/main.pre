
# 1 "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"

# 26 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\htc.h"
extern const char __xc8_OPTIM_SPEED;

extern double __fpnormalize(double);


# 13 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 5 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\sc8f083.h"
volatile unsigned char INDF @ 0x00;
volatile unsigned char OPTION_REG @ 0x01;
volatile unsigned char PCL @ 0x02;
volatile unsigned char STATUS @ 0x03;
volatile unsigned char FSR @ 0x04;
volatile unsigned char TRISB @ 0x05;
volatile unsigned char PORTB @ 0x06;
volatile unsigned char WPDB @ 0x07;
volatile unsigned char WPUB @ 0x08;
volatile unsigned char IOCB @ 0x09;
volatile unsigned char PCLATH @ 0x0A;
volatile unsigned char INTCON @ 0x0B;
volatile unsigned char ODCONB @ 0x0C;
volatile unsigned char PIR1 @ 0x0D;
volatile unsigned char PIE1 @ 0x0E;
volatile unsigned char CMP1CON0 @ 0x0F;
volatile unsigned char CMP1CON1 @ 0x10;
volatile unsigned char PR2 @ 0x11;
volatile unsigned char TMR2 @ 0x12;
volatile unsigned char T2CON @ 0x13;
volatile unsigned char OSCCON @ 0x14;
volatile unsigned char PWMCON0 @ 0x15;
volatile unsigned char PWMCON1 @ 0x16;
volatile unsigned char PWMTL @ 0x17;
volatile unsigned char PWMTH @ 0x18;
volatile unsigned char PWMD0L @ 0x19;
volatile unsigned char PWMD1L @ 0x1A;
volatile unsigned char PWMD4L @ 0x1B;
volatile unsigned char PWMT4L @ 0x1C;
volatile unsigned char PWMCON2 @ 0x1D;
volatile unsigned char PWMD01H @ 0x1E;
volatile unsigned char PWM01DT @ 0x1F;
volatile unsigned char TMR0 @ 0x81;
volatile unsigned char TRISA @ 0x85;
volatile unsigned char PORTA @ 0x86;
volatile unsigned char WPDA @ 0x87;
volatile unsigned char WPUA @ 0x88;
volatile unsigned char IOCA @ 0x89;
volatile unsigned char ODCONA @ 0x8C;
volatile unsigned char EECON1 @ 0x8D;
volatile unsigned char EECON2 @ 0x8E;
volatile unsigned char EEDAT @ 0x8F;
volatile unsigned char EEDATH @ 0x90;
volatile unsigned char EEADR @ 0x91;
volatile unsigned char EEADRH @ 0x92;
volatile unsigned char ANSEL0 @ 0x93;
volatile unsigned char ANSEL1 @ 0x94;
volatile unsigned char ADCON0 @ 0x95;
volatile unsigned char ADCON1 @ 0x96;
volatile unsigned char ADRESL @ 0x98;
volatile unsigned char ADRESH @ 0x99;
volatile unsigned char CMP2CON0 @ 0x9A;
volatile unsigned char PWMD2L @ 0x9B;
volatile unsigned char PWMD3L @ 0x9C;
volatile unsigned char PWM23DT @ 0x9D;
volatile unsigned char PWMD23H @ 0x9E;
volatile unsigned char CMP2CON1 @ 0x9F;
volatile unsigned char TRISC @ 0x105;
volatile unsigned char PORTC @ 0x106;
volatile unsigned char WPUC @ 0x108;
volatile unsigned char ANSEL2 @ 0x109;
volatile unsigned char TMR1L @ 0x10C;
volatile unsigned char TMR1H @ 0x10D;
volatile unsigned char T1CON @ 0x10E;
volatile unsigned char PIR2 @ 0x10F;
volatile unsigned char PIE2 @ 0x110;
volatile unsigned char KEYCON0 @ 0x111;
volatile unsigned char KEYCON1 @ 0x112;
volatile unsigned char KEYCON2 @ 0x113;
volatile unsigned char KEYDATAL @ 0x116;
volatile unsigned char KEYDATAH @ 0x117;
volatile unsigned char TXSTA @ 0x118;
volatile unsigned char RCSTA @ 0x119;
volatile unsigned char SPBRG @ 0x11A;
volatile unsigned char TXREG @ 0x11B;
volatile unsigned char RCREG @ 0x11C;

volatile bit T0LSE_EN @ ((unsigned)&OPTION_REG*8)+7;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;


volatile bit IRP @ ((unsigned)&STATUS*8)+7;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit Z @ ((unsigned)&STATUS*8)+2;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit C @ ((unsigned)&STATUS*8)+0;


volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;


volatile bit RB7 @ ((unsigned)&PORTB*8)+7;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB0 @ ((unsigned)&PORTB*8)+0;


volatile bit WPDB7 @ ((unsigned)&WPDB*8)+7;
volatile bit WPDB6 @ ((unsigned)&WPDB*8)+6;
volatile bit WPDB5 @ ((unsigned)&WPDB*8)+5;
volatile bit WPDB4 @ ((unsigned)&WPDB*8)+4;
volatile bit WPDB3 @ ((unsigned)&WPDB*8)+3;
volatile bit WPDB2 @ ((unsigned)&WPDB*8)+2;
volatile bit WPDB1 @ ((unsigned)&WPDB*8)+1;
volatile bit WPDB0 @ ((unsigned)&WPDB*8)+0;


volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;
volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;


volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;
volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;


volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit RBIF @ ((unsigned)&INTCON*8)+0;


volatile bit ODCONB7 @ ((unsigned)&ODCONB*8)+7;
volatile bit ODCONB6 @ ((unsigned)&ODCONB*8)+6;
volatile bit ODCONB5 @ ((unsigned)&ODCONB*8)+5;
volatile bit ODCONB4 @ ((unsigned)&ODCONB*8)+4;
volatile bit ODCONB3 @ ((unsigned)&ODCONB*8)+3;
volatile bit ODCONB2 @ ((unsigned)&ODCONB*8)+2;
volatile bit ODCONB1 @ ((unsigned)&ODCONB*8)+1;
volatile bit ODCONB0 @ ((unsigned)&ODCONB*8)+0;


volatile bit RCIF @ ((unsigned)&PIR1*8)+7;
volatile bit TXIF @ ((unsigned)&PIR1*8)+6;
volatile bit CMP1IF @ ((unsigned)&PIR1*8)+5;
volatile bit PWMIF @ ((unsigned)&PIR1*8)+4;
volatile bit RAIF @ ((unsigned)&PIR1*8)+3;
volatile bit TMR1IF @ ((unsigned)&PIR1*8)+2;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit ADIF @ ((unsigned)&PIR1*8)+0;


volatile bit RCIE @ ((unsigned)&PIE1*8)+7;
volatile bit TXIE @ ((unsigned)&PIE1*8)+6;
volatile bit CMP1IE @ ((unsigned)&PIE1*8)+5;
volatile bit PWMIE @ ((unsigned)&PIE1*8)+4;
volatile bit RAIE @ ((unsigned)&PIE1*8)+3;
volatile bit TMR1IE @ ((unsigned)&PIE1*8)+2;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit ADIE @ ((unsigned)&PIE1*8)+0;


volatile bit CMP1EN @ ((unsigned)&CMP1CON0*8)+7;
volatile bit CMP1PS @ ((unsigned)&CMP1CON0*8)+6;
volatile bit CMP1NS2 @ ((unsigned)&CMP1CON0*8)+5;
volatile bit CMP1NS1 @ ((unsigned)&CMP1CON0*8)+4;
volatile bit CMP1NS0 @ ((unsigned)&CMP1CON0*8)+3;
volatile bit CMP1NV @ ((unsigned)&CMP1CON0*8)+2;
volatile bit CMP1OUT @ ((unsigned)&CMP1CON0*8)+1;
volatile bit CMP1OEN @ ((unsigned)&CMP1CON0*8)+0;


volatile bit CMP1IM @ ((unsigned)&CMP1CON1*8)+7;
volatile bit AN1_EN @ ((unsigned)&CMP1CON1*8)+6;
volatile bit RBIAS1_H @ ((unsigned)&CMP1CON1*8)+5;
volatile bit RBIAS1_L @ ((unsigned)&CMP1CON1*8)+4;
volatile bit LVDS13 @ ((unsigned)&CMP1CON1*8)+3;
volatile bit LVDS12 @ ((unsigned)&CMP1CON1*8)+2;
volatile bit LVDS11 @ ((unsigned)&CMP1CON1*8)+1;
volatile bit LVDS10 @ ((unsigned)&CMP1CON1*8)+0;


volatile bit CLK_SEL @ ((unsigned)&T2CON*8)+7;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;


volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
volatile bit SWDTEN @ ((unsigned)&OSCCON*8)+1;


volatile bit CLKDIV2 @ ((unsigned)&PWMCON0*8)+7;
volatile bit CLKDIV1 @ ((unsigned)&PWMCON0*8)+6;
volatile bit CLKDIV0 @ ((unsigned)&PWMCON0*8)+5;
volatile bit PWM4EN @ ((unsigned)&PWMCON0*8)+4;
volatile bit PWM3EN @ ((unsigned)&PWMCON0*8)+3;
volatile bit PWM2EN @ ((unsigned)&PWMCON0*8)+2;
volatile bit PWM1EN @ ((unsigned)&PWMCON0*8)+1;
volatile bit PWM0EN @ ((unsigned)&PWMCON0*8)+0;


volatile bit PWMIO_SEL1 @ ((unsigned)&PWMCON1*8)+7;
volatile bit PWMIO_SEL0 @ ((unsigned)&PWMCON1*8)+6;
volatile bit PWM2DTEN @ ((unsigned)&PWMCON1*8)+5;
volatile bit PWM0DTEN @ ((unsigned)&PWMCON1*8)+4;
volatile bit DT_DIV1 @ ((unsigned)&PWMCON1*8)+1;
volatile bit DT_DIV0 @ ((unsigned)&PWMCON1*8)+0;


volatile bit PWM4D9 @ ((unsigned)&PWMTH*8)+5;
volatile bit PWM4D8 @ ((unsigned)&PWMTH*8)+4;
volatile bit PWM4T9 @ ((unsigned)&PWMTH*8)+3;
volatile bit PWM4T8 @ ((unsigned)&PWMTH*8)+2;
volatile bit PWMT9 @ ((unsigned)&PWMTH*8)+1;
volatile bit PWMT8 @ ((unsigned)&PWMTH*8)+0;


volatile bit PWM4DIR @ ((unsigned)&PWMCON2*8)+4;
volatile bit PWM3DIR @ ((unsigned)&PWMCON2*8)+3;
volatile bit PWM2DIR @ ((unsigned)&PWMCON2*8)+2;
volatile bit PWM1DIR @ ((unsigned)&PWMCON2*8)+1;
volatile bit PWM0DIR @ ((unsigned)&PWMCON2*8)+0;


volatile bit PWMD19 @ ((unsigned)&PWMD01H*8)+5;
volatile bit PWMD18 @ ((unsigned)&PWMD01H*8)+4;
volatile bit PWMD09 @ ((unsigned)&PWMD01H*8)+1;
volatile bit PWMD08 @ ((unsigned)&PWMD01H*8)+0;


volatile bit PWM01DT5 @ ((unsigned)&PWM01DT*8)+5;
volatile bit PWM01DT4 @ ((unsigned)&PWM01DT*8)+4;
volatile bit PWM01DT3 @ ((unsigned)&PWM01DT*8)+3;
volatile bit PWM01DT2 @ ((unsigned)&PWM01DT*8)+2;
volatile bit PWM01DT1 @ ((unsigned)&PWM01DT*8)+1;
volatile bit PWM01DT0 @ ((unsigned)&PWM01DT*8)+0;


volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;


volatile bit RA7 @ ((unsigned)&PORTA*8)+7;
volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA0 @ ((unsigned)&PORTA*8)+0;


volatile bit WPDA7 @ ((unsigned)&WPDA*8)+7;
volatile bit WPDA6 @ ((unsigned)&WPDA*8)+6;
volatile bit WPDA5 @ ((unsigned)&WPDA*8)+5;
volatile bit WPDA4 @ ((unsigned)&WPDA*8)+4;
volatile bit WPDA3 @ ((unsigned)&WPDA*8)+3;
volatile bit WPDA2 @ ((unsigned)&WPDA*8)+2;
volatile bit WPDA1 @ ((unsigned)&WPDA*8)+1;
volatile bit WPDA0 @ ((unsigned)&WPDA*8)+0;


volatile bit WPUA7 @ ((unsigned)&WPUA*8)+7;
volatile bit WPUA6 @ ((unsigned)&WPUA*8)+6;
volatile bit WPUA5 @ ((unsigned)&WPUA*8)+5;
volatile bit WPUA4 @ ((unsigned)&WPUA*8)+4;
volatile bit WPUA3 @ ((unsigned)&WPUA*8)+3;
volatile bit WPUA2 @ ((unsigned)&WPUA*8)+2;
volatile bit WPUA1 @ ((unsigned)&WPUA*8)+1;
volatile bit WPUA0 @ ((unsigned)&WPUA*8)+0;


volatile bit IOCA7 @ ((unsigned)&IOCA*8)+7;
volatile bit IOCA6 @ ((unsigned)&IOCA*8)+6;
volatile bit IOCA5 @ ((unsigned)&IOCA*8)+5;
volatile bit IOCA4 @ ((unsigned)&IOCA*8)+4;
volatile bit IOCA3 @ ((unsigned)&IOCA*8)+3;
volatile bit IOCA2 @ ((unsigned)&IOCA*8)+2;
volatile bit IOCA1 @ ((unsigned)&IOCA*8)+1;
volatile bit IOCA0 @ ((unsigned)&IOCA*8)+0;


volatile bit ODCONA7 @ ((unsigned)&ODCONA*8)+7;
volatile bit ODCONA6 @ ((unsigned)&ODCONA*8)+6;
volatile bit ODCONA5 @ ((unsigned)&ODCONA*8)+5;
volatile bit ODCONA4 @ ((unsigned)&ODCONA*8)+4;
volatile bit ODCONA3 @ ((unsigned)&ODCONA*8)+3;
volatile bit ODCONA2 @ ((unsigned)&ODCONA*8)+2;
volatile bit ODCONA1 @ ((unsigned)&ODCONA*8)+1;
volatile bit ODCONA0 @ ((unsigned)&ODCONA*8)+0;


volatile bit EEPGD @ ((unsigned)&EECON1*8)+7;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit RD @ ((unsigned)&EECON1*8)+0;


volatile bit EEDAT7 @ ((unsigned)&EEDAT*8)+7;
volatile bit EEDAT6 @ ((unsigned)&EEDAT*8)+6;
volatile bit EEDAT5 @ ((unsigned)&EEDAT*8)+5;
volatile bit EEDAT4 @ ((unsigned)&EEDAT*8)+4;
volatile bit EEDAT3 @ ((unsigned)&EEDAT*8)+3;
volatile bit EEDAT2 @ ((unsigned)&EEDAT*8)+2;
volatile bit EEDAT1 @ ((unsigned)&EEDAT*8)+1;
volatile bit EEDAT0 @ ((unsigned)&EEDAT*8)+0;


volatile bit EEDATH7 @ ((unsigned)&EEDATH*8)+7;
volatile bit EEDATH6 @ ((unsigned)&EEDATH*8)+6;
volatile bit EEDATH5 @ ((unsigned)&EEDATH*8)+5;
volatile bit EEDATH4 @ ((unsigned)&EEDATH*8)+4;
volatile bit EEDATH3 @ ((unsigned)&EEDATH*8)+3;
volatile bit EEDATH2 @ ((unsigned)&EEDATH*8)+2;
volatile bit EEDATH1 @ ((unsigned)&EEDATH*8)+1;
volatile bit EEDATH0 @ ((unsigned)&EEDATH*8)+0;


volatile bit EEADR7 @ ((unsigned)&EEADR*8)+7;
volatile bit EEADR6 @ ((unsigned)&EEADR*8)+6;
volatile bit EEADR5 @ ((unsigned)&EEADR*8)+5;
volatile bit EEADR4 @ ((unsigned)&EEADR*8)+4;
volatile bit EEADR3 @ ((unsigned)&EEADR*8)+3;
volatile bit EEADR2 @ ((unsigned)&EEADR*8)+2;
volatile bit EEADR1 @ ((unsigned)&EEADR*8)+1;
volatile bit EEADR0 @ ((unsigned)&EEADR*8)+0;


volatile bit EEADRH3 @ ((unsigned)&EEADRH*8)+3;
volatile bit EEADRH2 @ ((unsigned)&EEADRH*8)+2;
volatile bit EEADRH1 @ ((unsigned)&EEADRH*8)+1;
volatile bit EEADRH0 @ ((unsigned)&EEADRH*8)+0;


volatile bit ANS7 @ ((unsigned)&ANSEL0*8)+7;
volatile bit ANS6 @ ((unsigned)&ANSEL0*8)+6;
volatile bit ANS5 @ ((unsigned)&ANSEL0*8)+5;
volatile bit ANS4 @ ((unsigned)&ANSEL0*8)+4;
volatile bit ANS3 @ ((unsigned)&ANSEL0*8)+3;
volatile bit ANS2 @ ((unsigned)&ANSEL0*8)+2;
volatile bit ANS1 @ ((unsigned)&ANSEL0*8)+1;
volatile bit ANS0 @ ((unsigned)&ANSEL0*8)+0;


volatile bit ANS15 @ ((unsigned)&ANSEL1*8)+7;
volatile bit ANS14 @ ((unsigned)&ANSEL1*8)+6;
volatile bit ANS13 @ ((unsigned)&ANSEL1*8)+5;
volatile bit ANS12 @ ((unsigned)&ANSEL1*8)+4;
volatile bit ANS11 @ ((unsigned)&ANSEL1*8)+3;
volatile bit ANS10 @ ((unsigned)&ANSEL1*8)+2;
volatile bit ANS9 @ ((unsigned)&ANSEL1*8)+1;
volatile bit ANS8 @ ((unsigned)&ANSEL1*8)+0;


volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
volatile bit ADON @ ((unsigned)&ADCON0*8)+0;


volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;
volatile bit CHS4 @ ((unsigned)&ADCON1*8)+6;
volatile bit LDO_EN @ ((unsigned)&ADCON1*8)+2;
volatile bit LDO_SEL1 @ ((unsigned)&ADCON1*8)+1;
volatile bit LDO_SEL0 @ ((unsigned)&ADCON1*8)+0;


volatile bit CMP2EN @ ((unsigned)&CMP2CON0*8)+7;
volatile bit CMP2PS @ ((unsigned)&CMP2CON0*8)+6;
volatile bit CMP2NS2 @ ((unsigned)&CMP2CON0*8)+5;
volatile bit CMP2NS1 @ ((unsigned)&CMP2CON0*8)+4;
volatile bit CMP2NS0 @ ((unsigned)&CMP2CON0*8)+3;
volatile bit CMP2NV @ ((unsigned)&CMP2CON0*8)+2;
volatile bit CMP2OUT @ ((unsigned)&CMP2CON0*8)+1;
volatile bit CMP2OEN @ ((unsigned)&CMP2CON0*8)+0;


volatile bit PWMD39 @ ((unsigned)&PWMD23H*8)+5;
volatile bit PWMD38 @ ((unsigned)&PWMD23H*8)+4;
volatile bit PWMD29 @ ((unsigned)&PWMD23H*8)+1;
volatile bit PWMD28 @ ((unsigned)&PWMD23H*8)+0;


volatile bit CMP2IM @ ((unsigned)&CMP2CON1*8)+7;
volatile bit AN2_EN @ ((unsigned)&CMP2CON1*8)+6;
volatile bit RBIAS2_H @ ((unsigned)&CMP2CON1*8)+5;
volatile bit RBIAS2_L @ ((unsigned)&CMP2CON1*8)+4;
volatile bit LVDS23 @ ((unsigned)&CMP2CON1*8)+3;
volatile bit LVDS22 @ ((unsigned)&CMP2CON1*8)+2;
volatile bit LVDS21 @ ((unsigned)&CMP2CON1*8)+1;
volatile bit LVDS20 @ ((unsigned)&CMP2CON1*8)+0;


volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;


volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC0 @ ((unsigned)&PORTC*8)+0;


volatile bit WPUC1 @ ((unsigned)&WPUC*8)+1;
volatile bit WPUC0 @ ((unsigned)&WPUC*8)+0;


volatile bit ANS17 @ ((unsigned)&ANSEL2*8)+1;
volatile bit ANS16 @ ((unsigned)&ANSEL2*8)+0;


volatile bit T1GINV @ ((unsigned)&T1CON*8)+7;
volatile bit TMR1GE @ ((unsigned)&T1CON*8)+6;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;


volatile bit TKIF @ ((unsigned)&PIR2*8)+6;
volatile bit CMP2IF @ ((unsigned)&PIR2*8)+5;


volatile bit TKIE @ ((unsigned)&PIE2*8)+6;
volatile bit CMP2IE @ ((unsigned)&PIE2*8)+5;


volatile bit KDONE @ ((unsigned)&KEYCON0*8)+7;
volatile bit KTOUT @ ((unsigned)&KEYCON0*8)+2;
volatile bit KCAP @ ((unsigned)&KEYCON0*8)+1;
volatile bit KEN @ ((unsigned)&KEYCON0*8)+0;


volatile bit KVREF1 @ ((unsigned)&KEYCON1*8)+7;
volatile bit KVREF0 @ ((unsigned)&KEYCON1*8)+6;
volatile bit KCLK1 @ ((unsigned)&KEYCON1*8)+5;
volatile bit KCLK0 @ ((unsigned)&KEYCON1*8)+4;
volatile bit KCHS3 @ ((unsigned)&KEYCON1*8)+3;
volatile bit KCHS2 @ ((unsigned)&KEYCON1*8)+2;
volatile bit KCHS1 @ ((unsigned)&KEYCON1*8)+1;
volatile bit KCHS0 @ ((unsigned)&KEYCON1*8)+0;


volatile bit CAP_LVBO2 @ ((unsigned)&KEYCON2*8)+7;
volatile bit CAP_LVBO1 @ ((unsigned)&KEYCON2*8)+6;
volatile bit CAP_LVBO0 @ ((unsigned)&KEYCON2*8)+5;
volatile bit TP_EN @ ((unsigned)&KEYCON2*8)+4;
volatile bit TKLDOEN @ ((unsigned)&KEYCON2*8)+3;
volatile bit TKLDO_SEL @ ((unsigned)&KEYCON2*8)+1;
volatile bit TKEN @ ((unsigned)&KEYCON2*8)+0;


volatile bit CSRC @ ((unsigned)&TXSTA*8)+7;
volatile bit TX9EN @ ((unsigned)&TXSTA*8)+6;
volatile bit TXEN @ ((unsigned)&TXSTA*8)+5;
volatile bit SYNC @ ((unsigned)&TXSTA*8)+4;
volatile bit SCKP @ ((unsigned)&TXSTA*8)+3;
volatile bit TRMT @ ((unsigned)&TXSTA*8)+1;
volatile bit TX9D @ ((unsigned)&TXSTA*8)+0;


volatile bit SPEN @ ((unsigned)&RCSTA*8)+7;
volatile bit RX9EN @ ((unsigned)&RCSTA*8)+6;
volatile bit SREN @ ((unsigned)&RCSTA*8)+5;
volatile bit CREN @ ((unsigned)&RCSTA*8)+4;
volatile bit RCIDL @ ((unsigned)&RCSTA*8)+3;
volatile bit FERR @ ((unsigned)&RCSTA*8)+2;
volatile bit OERR @ ((unsigned)&RCSTA*8)+1;
volatile bit RX9D @ ((unsigned)&RCSTA*8)+0;


# 27 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\sc.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 76
extern unsigned int flash_read(unsigned short addr);


# 149
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);

# 184
extern unsigned char __resetbits;
extern __bit __powerdown;
extern __bit __timeout;

# 35 "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.h"
unsigned char ledCnt = 0;
unsigned char showNumAShi = 0x7F;
unsigned char showNumAge = 0x7F;
unsigned char showNumBShi = 0x7F;
unsigned char showNumBge = 0x7F;

unsigned char modeStep = 0;


void A1();
void A2();
void A3();
void A4();
void A5();
void A6();
void A7();

void B1();
void B2();
void B3();
void B4();
void B5();
void B6();
void B7();

void C1();
void C2();
void C3();
void C4();
void C5();
void C6();
void C7();

void D1();
void D2();
void D3();
void D4();
void D5();
void D6();
void D7();

void led1();
void led2();
void led3();
void led4();
void led5();
void led6();
void led7();
void led8();
void led9();
void led10();
void led11();
void led12();

void refreshLed();
void DelayUs(unsigned char Time);
void DelayMs(unsigned char Time);
void DelayS(unsigned char Time);

# 13 "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
volatile unsigned char MainTime;
volatile bit B_MainLoop,B_OnOff;
unsigned int count1s = 0;
unsigned char workStep = 0;
unsigned char firstTime = 0;

unsigned char intFlag = 0;
unsigned int wait30s = 0;
unsigned char count10ms = 0;
unsigned char keyCount2 = 0;
unsigned char keyCount = 0;
unsigned char longPressFlag = 0;
unsigned char longPressFlag2 = 0;
unsigned char startTime = 0;
unsigned char chrgFlag = 0;
unsigned char chrgFullFlag = 0;
unsigned char chrgFullTime = 0;
unsigned int batValue = 0;
unsigned int R_AIN2_DATA = 0;
unsigned int R_AIN6_DATA = 0;
unsigned int sleepTime = 0;
unsigned char refreshFlag = 0;
unsigned char keyNum = 0;
unsigned char preKeyNum = 0;
unsigned char pwmFlag = 0;
unsigned int count10s = 0;
unsigned char pwmDuty = 0;
unsigned char showBatValue = 0;
unsigned char showFlag = 0;
unsigned char addPowerTime = 0;
unsigned char subPowerTime = 0;
unsigned char count10 = 0;
unsigned char keyTime = 0;
unsigned char count2s = 0;
unsigned char chrgStep = 0;
unsigned char count900s = 0;
unsigned char lowBatFlag = 0;
unsigned int batAddCount = 0;
unsigned int batSubCount = 0;
unsigned int batSubMaxTime = 3000;
unsigned int count30s = 0;
unsigned int chrgMaxData = 0;
unsigned char overTime = 0;
unsigned char showBatValueAddTime = 0;
unsigned char chrgTime = 0;
unsigned char lowBatTime = 0;
const static unsigned char numArray[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x00,0x71};

volatile unsigned int adresult;
volatile unsigned int result;
volatile unsigned char test_adc;
volatile unsigned int power_ad;

void chrgCtr();
void Sleep_Mode();
void pwmStop();
void pwmInit();
void updateLed();
unsigned char ADC_Sample(unsigned char adch, unsigned char adldo);


void Init_System()
{
asm("nop");
asm("clrwdt");
INTCON = 0;
OSCCON = 0X72;
OPTION_REG = 0;




TRISA = 0x8D;
PORTA = 0x10;
TRISB = 0x00;
PORTB = 0;
WPUB = 0x00;
TRISC = 0x02;
PORTC = 0;

PIE1 = 2;
PR2 = 250;
T2CON = 4;

INTCON = 0XC0;
ADCON0 = 0X41;
ADON = 1;
ADCON1 = 0x00;
}

# 111
void Refurbish_Sfr()
{

PIE1 = 2;
PR2 = 250;
INTCON = 0XC0;
if (4 != T2CON)
T2CON = 4;
}

# 125
void interrupt Isr_Timer()
{
if(TMR2IF)
{
TMR2IF = 0;
updateLed();
if(++MainTime >= 158)
{
MainTime = 0;
B_MainLoop = 1;
if(++count1s >= 3000)
{
count1s = 0;
wait30s = 1;
}
}
}
else
{
PIR1 = 0;
}

}

# 156
void Sleep_Mode()
{
INTCON = 0;

OPTION_REG = 0;

TRISA = 0B10001101;
PORTA = 0B00010000;
WPUA = 0B00000000;

TRISB = 0B00000000;
PORTB = 0B00000000;
WPUB = 0B00000000;

TRISC = 0B00000010;
PORTC = 0B00000000;

ADCON0 = 0;
ADCON1 = 0;

PWMCON0 = 0;

OSCCON = 0X70;
T2CON = 0;
IOCA = 0B10000001;
IOCB = 0B00000000;

RAIE = 1;
PEIE = 1;

GIE = 0;


PORTA;
RAIF = 0;
PORTB;

asm("clrwdt");

asm("sleep");

asm("nop");
asm("clrwdt");
if(RAIF) RAIF = 0;

Init_System();
}

# 224
unsigned char ADC_Sample(unsigned char adch, unsigned char adldo)
{
volatile unsigned long adsum = 0;
volatile unsigned int admin = 0, admax = 0;
volatile unsigned int ad_temp = 0;

if ((!LDO_EN) && (adldo & 0x04) )
{

ADCON1 = adldo;
_delay((unsigned long)((100)*(8000000/4000000.0)));
}
else
ADCON1 = adldo;

if(adch & 0x10)
{
CHS4 = 1;
adch &= 0x0f;
}
unsigned char i = 0;
for (i = 0; i < 10; i++)
{
ADCON0 = (unsigned char)(0X41 | (adch << 2));
asm("nop");
asm("nop");
asm("nop");
asm("nop");
GODONE = 1;

unsigned char j = 0;
while (GODONE)
{
_delay((unsigned long)((2)*(8000000/4000000.0)));

if (0 == (--j))
return 0;
}

ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));

if (0 == admax)
{
admax = ad_temp;
admin = ad_temp;
}
else if (ad_temp > admax)
admax = ad_temp;
else if (ad_temp < admin)
admin = ad_temp;

adsum += ad_temp;
}
adsum -= admax;
if (adsum >= admin)
adsum -= admin;
else
adsum = 0;

adresult = adsum >> 3;

adsum = 0;
admin = 0;
admax = 0;
return 0xA5;

}



void pwmInit()
{

PWMTH = 0x00;
PWMTL = 200;
PWMD01H = 0x00;
PWMD1L = 32;
PWMCON1 = 0xC0;
PWMCON2 = 0x00;
PWMCON0 |= 0x62;
}

void pwmStop()
{
PWMD1L = 0;
PWMCON0 &= 0xFD;
PORTA &= 0xFD;
}


char keyRead(char keyStatus)
{

if(keyStatus)
{
keyCount++;
if(keyStatus == 0x03)
{
keyNum = 3;
}
else if(keyStatus == 0x01)
{
keyNum = 2;
}
else if(keyStatus == 0x02)
{
keyNum = 1;
}
if(keyNum != preKeyNum)
{
preKeyNum = keyNum;
keyCount = 0;
}

if(keyCount >= 150)
{
keyCount = 150;
if(keyNum == 2)
{
if(!longPressFlag)
{
longPressFlag = 1;
return 2;
}
}
}
if(keyCount > 25 && (++keyTime) > 15)
{
keyTime = 0;
return 3;
}
}
else
{
if(keyNum == 2 && keyCount >= 100)
{
keyCount = 0;
longPressFlag = 0;
return 0;
}
else if(keyCount >= 4)
{
keyCount = 0;
return 1;
}
longPressFlag = 0;
keyCount = 0;
keyNum = 0;
}
return 0;
}


void keyCtr()
{
unsigned char keyStatus = (0x01 & PORTA) | (0x02 & PORTC);
unsigned char keyClick = keyRead(keyStatus);

if(keyNum == 1)
{
if(keyClick == 1)
{
if(modeStep == 2 || modeStep == 3)
{
if(++workStep > 3)
{
workStep = 3;
}
}
else if(modeStep == 1)
{
if(++workStep > 99)
{
workStep = 99;
}
}
}
else if(keyClick == 3 && modeStep == 1)
{
if(++workStep > 99)
{
workStep = 99;
}
}
}
else if(keyNum == 2)
{

if(keyClick == 2)
{
if(modeStep > 0)
{
modeStep = 0;
workStep = 0;
count900s = 0;
}
else if(lowBatFlag == 0)
{
modeStep = 1;
workStep = 50;
count900s = 0;
}
}
else if(keyClick == 1 && workStep > 0)
{
if(++modeStep > 3)
{
modeStep = 1;
workStep = 50;
}
else
{
workStep = 1;
pwmDuty = 69;
}

}
}
else if(keyNum == 3)
{
if((keyClick == 1 || keyClick == 3) && workStep > 1)
{
workStep--;
}

}

}

void updateLed()
{
if(showFlag)
{
refreshLed();
}
else
{
TRISB |= 0xFF;
TRISA |= 0x60;
PORTB &= 0x00;
PORTA &= 0x9F;
}

}


void workCtr()
{
if(firstTime > 0)
{
firstTime--;
showFlag = 1;
lowBatFlag = 0;
if(firstTime < 120 && showBatValue < batValue)
{
showBatValue++;
}
showNumAShi = 0x7F;
showNumAge = 0x7F;
showNumBShi = 0x7F;
showNumBge = 0x7F;
}
else if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0)
{
showFlag = 0;
PORTA |= 0x10;
count900s = 0;
pwmStop();
if(++sleepTime > 200)
{
sleepTime = 0;
Sleep_Mode();
}
}
else
{
sleepTime = 0;
if(modeStep == 1)
{
showFlag = 1;
RA4 = 0;
pwmInit();
PWMD1L= 99 + workStep;
}
else if(modeStep == 2)
{
showFlag = 1;
RA4 = 0;
if(++count10s >= 600)
{
count10s = 0;
}
if(count10s % 3 == 0)
{
if(count10s < 400)
{
if(pwmDuty < (169 + (workStep*10)))
{
pwmDuty++;
}
}
else
{
if(pwmDuty > 69)
{
pwmDuty--;
}
}
}
pwmInit();
PWMD1L = pwmDuty;
}
else if(modeStep == 3)
{
showFlag = 1;
RA4 = 0;
if(++count10s > 125)
{
count10s = 0;
}
if(count10s < 100)
{
pwmInit();
PWMD1L= 139 + (workStep*20);
}
else if(count10s < 125)
{
pwmStop();
}

}
else
{
pwmStop();
RA4 = 1;
if(chrgFlag)
{
showFlag = 1;
}
else
{
showFlag = 0;
}
}
}


}


void chrgCtr()
{
if(PORTA & 0X80)
{

workStep = 0;
modeStep = 0;
lowBatFlag = 0;
if(chrgFlag == 0)
{
chrgFlag = 1;

}
if(showBatValue >= 99)
{
chrgFullFlag = 1;
}
if(R_AIN2_DATA > 1526)
{
if(chrgMaxData >= R_AIN2_DATA)
{
if(++count30s > 3000)
{
count30s = 0;
if(showBatValue < 99)
{
showBatValue++;
}
}
}
else
{
chrgMaxData = R_AIN2_DATA;
count30s = 0;
}
}
}
else
{
chrgMaxData = 0;
count30s = 0;
chrgFullFlag = 0;
chrgFlag = 0;

# 624
}
}

void showCtr()
{

if(showBatValue >= 99)
{
showNumAShi = 0x6F;
showNumAge = 0x6F;
}
else
{
showNumAShi = numArray[(showBatValue / 10)];
showNumAge = numArray[(showBatValue % 10)];
}
if(chrgFlag)
{
if(showBatValue >= 99)
{
showNumBShi = 0x39;
showNumBge = 0x0F;
}
else
{
if(++count2s >= 50)
{
count2s = 0;
if(++chrgStep >= 8)
{
chrgStep = 0;
}
}
switch(chrgStep)
{
case 0:
showNumBShi = 0x01;
showNumBge = 0x00;
break;
case 1:
showNumBShi = 0x01;
showNumBge = 0x01;
break;
case 2:
showNumBShi = 0x01;
showNumBge = 0x03;
break;
case 3:
showNumBShi = 0x01;
showNumBge = 0x07;
break;
case 4:
showNumBShi = 0x01;
showNumBge = 0x0F;
break;
case 5:
showNumBShi = 0x09;
showNumBge = 0x0F;
break;
case 6:
showNumBShi = 0x19;
showNumBge = 0x0F;
break;
case 7:
showNumBShi = 0x39;
showNumBge = 0x0F;
break;
case 8:
showNumBShi = 0x79;
showNumBge = 0x0F;
break;
case 9:
showNumBShi = 0x79;
showNumBge = 0x4F;
break;
default:
break;
}

}

}
else
{
showNumBShi = numArray[workStep/10];
showNumBge = numArray[workStep%10];
}
}

void checkOutA()
{

test_adc = ADC_Sample(3, 5);
if (0xA5 == test_adc)
{
R_AIN6_DATA = adresult;
if(R_AIN6_DATA > 1200)
{
if(++overTime > 10)
{
overTime = 0;
workStep = 0;
}
}
else
{
overTime = 0;
}
}
}


void checkBatValue()
{

test_adc = ADC_Sample(2, 5);
if (0xA5 == test_adc)
{
R_AIN2_DATA = adresult;
if(R_AIN2_DATA < 1220)
{
batValue = 0;
if(++lowBatTime > 200)
{
lowBatTime = 0;
count900s = 0;
modeStep = 0;
workStep = 0;
count900s = 0;
lowBatFlag = 1;
showBatValue = 0;
}
}
else if(R_AIN2_DATA < 1330)
{
batValue = (R_AIN2_DATA - 1220)/11;
lowBatTime = 0;
}
else if(R_AIN2_DATA < 1390)
{
batValue = 10 + ((R_AIN2_DATA - 1330)/3);
}
else
{
batValue = 30 + ((R_AIN2_DATA - 1390)/2);
if(batValue >= 100)
{
batValue = 100;
}
}

}

}


void taskSecond()
{
if(wait30s == 1)
{
wait30s = 0;
if(modeStep > 0)
{
if(++count900s > 30)
{
count900s = 0;
modeStep = 0;
workStep = 0;
count900s = 0;
}
}
else
{
count900s = 0;
}

if(chrgFlag)
{
if(++showBatValueAddTime > 4 && showBatValue < 99)
{
showBatValueAddTime = 0;
showBatValue++;
}
if(showBatValue < batValue)
{
if(++chrgTime > 3)
{
chrgTime = 0;
showBatValueAddTime = 0;
showBatValue++;

}
}
else
{
chrgTime = 0;
}
}
}
}


void batCtr()
{
if(chrgFlag == 0)
{
if(batValue > 40)
{
batSubMaxTime = 4500;
}
else if(batValue > 25)
{
batSubMaxTime = 2500;
}
else
{
batSubMaxTime = 1000;
}
if(showBatValue > batValue)
{
if(++batSubCount > batSubMaxTime)
{
batSubCount = 0;
showBatValue--;
}

}
else
{
batSubCount = 0;
}
if(showBatValue == 0)
{
count900s = 0;
modeStep = 0;
workStep = 0;
count900s = 0;
lowBatFlag = 1;
}
}

}

# 872
void main()
{
Init_System();

firstTime = 200;
while(1)
{

if(B_MainLoop)
{
B_MainLoop = 0;
asm("clrwdt");
if(chrgFlag == 0)
{
keyCtr();
}
checkBatValue();
workCtr();
chrgCtr();
batCtr();
taskSecond();
if(firstTime == 0)
{
showCtr();
}
checkOutA();


}
}
}
