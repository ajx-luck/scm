

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jun 19 18:02:21 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text12,local,class=CODE,merge=1,delta=2
    19                           	psect	swtext1,local,class=CONST,delta=2
    20                           	psect	swtext2,local,class=CONST,delta=2
    21                           	psect	text17,local,class=CODE,merge=1,delta=2
    22                           	psect	text21,local,class=CODE,merge=1,delta=2
    23                           	psect	text22,local,class=CODE,merge=1,delta=2
    24                           	psect	text35,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	psect	pa_nodes0,global,class=CODE,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 1.45
    30                           ; Generated 16/11/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F887 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	strings
    65  0800                     __pstrings:	
    66  0800                     stringtab:	
    67  0800                     __stringtab:	
    68  0800                     stringcode:	
    69                           ;	String table - string pointers are 1 byte each
    70                           
    71  0800                     stringdir:	
    72  0800  3008               	movlw	high stringdir
    73  0801  008A               	movwf	10
    74  0802  0804               	movf	4,w
    75  0803  0A84               	incf	4,f
    76  0804  0782               	addwf	2,f
    77  0805                     __stringbase:	
    78  0805  3400               	retlw	0
    79  0806                     __end_of__stringtab:	
    80  0806                     _Table_KeyFalg:	
    81  0806  3401               	retlw	1
    82  0807  3402               	retlw	2
    83  0808  3404               	retlw	4
    84  0809  3408               	retlw	8
    85  080A  3410               	retlw	16
    86  080B  3420               	retlw	32
    87  080C  3440               	retlw	64
    88  080D  3480               	retlw	128
    89  080E                     __end_of_Table_KeyFalg:	
    90  080E                     _Table_KeyDown:	
    91  080E  340A               	retlw	10
    92  080F  340A               	retlw	10
    93  0810  340A               	retlw	10
    94  0811                     __end_of_Table_KeyDown:	
    95  0811                     _Table_KeyCap:	
    96  0811  3402               	retlw	2
    97  0812  3402               	retlw	2
    98  0813  3402               	retlw	2
    99  0814                     __end_of_Table_KeyCap:	
   100  0814                     _Table_KeyChannel:	
   101  0814  3444               	retlw	68
   102  0815  3443               	retlw	67
   103  0816  3442               	retlw	66
   104  0817                     __end_of_Table_KeyChannel:	
   105                           
   106                           	psect	nvBANK1
   107  00CB                     __pnvBANK1:	
   108  00CB                     _firstLock:	
   109  00CB                     	ds	1
   110  00CC                     _firstTime:	
   111  00CC                     	ds	1
   112  001D                     _PWMCON2	set	29
   113  001C                     _PWMT4L	set	28
   114  001B                     _PWMD4L	set	27
   115  0018                     _PWMTH	set	24
   116  0017                     _PWMTL	set	23
   117  0016                     _PWMCON1	set	22
   118  0015                     _PWMCON0	set	21
   119  0014                     _OSCCON	set	20
   120  0013                     _T2CON	set	19
   121  0011                     _PR2	set	17
   122  000E                     _PIE1	set	14
   123  000D                     _PIR1	set	13
   124  000B                     _INTCON	set	11
   125  0008                     _WPUB	set	8
   126  0006                     _PORTB	set	6
   127  0005                     _TRISB	set	5
   128  0001                     _OPTION_REG	set	1
   129  0069                     _TMR2IF	set	105
   130  006B                     _RAIF	set	107
   131  0058                     _RBIF	set	88
   132  0059                     _INTF	set	89
   133  005B                     _RBIE	set	91
   134  004D                     _IOCB5	set	77
   135  0036                     _RB6	set	54
   136  0037                     _RB7	set	55
   137  002D                     _TRISB5	set	45
   138  002E                     _TRISB6	set	46
   139  009E                     _PWMD23H	set	158
   140  009C                     _PWMD3L	set	156
   141  0099                     _ADRESH	set	153
   142  0098                     _ADRESL	set	152
   143  0096                     _ADCON1	set	150
   144  0095                     _ADCON0	set	149
   145  0086                     _PORTA	set	134
   146  0085                     _TRISA	set	133
   147  0081                     _TMR0	set	129
   148  04B2                     _LDO_EN	set	1202
   149  04B6                     _CHS4	set	1206
   150  04A8                     _ADON	set	1192
   151  04A9                     _GODONE	set	1193
   152  0435                     _RA5	set	1077
   153  0436                     _RA6	set	1078
   154  0437                     _RA7	set	1079
   155  0117                     _KEYDATAH	set	279
   156  0116                     _KEYDATAL	set	278
   157  0113                     _KEYCON2	set	275
   158  0112                     _KEYCON1	set	274
   159  0111                     _KEYCON0	set	273
   160  0110                     _PIE2	set	272
   161  010F                     _PIR2	set	271
   162  0106                     _PORTC	set	262
   163  0105                     _TRISC	set	261
   164                           
   165                           	psect	cinit
   166  000D                     start_initialization:	
   167                           ; #config settings
   168                           
   169  000D                     __initialization:	
   170  000D  3020               	movlw	low __pbssBANK0
   171                           
   172                           ; Clear objects allocated to BITCOMMON
   173  000E  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   174                           
   175                           ; Clear objects allocated to COMMON
   176  000F  01F9               	clrf	__pbssCOMMON& (0+127)
   177  0010  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   178  0011  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   179                           
   180                           ; Clear objects allocated to BANK0
   181  0012  1383               	bcf	3,7	;select IRP bank0
   182  0013  0084               	movwf	4
   183  0014  304D               	movlw	low (__pbssBANK0+45)
   184  0015  158A  265A  118A   	fcall	clear_ram0
   185                           
   186                           ; Clear objects allocated to BANK1
   187  0018  30A0               	movlw	low __pbssBANK1
   188  0019  0084               	movwf	4
   189  001A  30C7               	movlw	low (__pbssBANK1+39)
   190  001B  158A  265A         	fcall	clear_ram0
   191  001D                     end_of_initialization:	
   192                           ;End of C runtime variable initialization code
   193                           
   194  001D                     __end_of__initialization:	
   195  001D  0183               	clrf	3
   196  001E  158A  2EBA         	ljmp	_main	;jump to C main() function
   197                           
   198                           	psect	bitbssCOMMON
   199  03C0                     __pbitbssCOMMON:	
   200  03C0                     _b_ksleep:	
   201  03C0                     	ds	1
   202  03C1                     _b_kerr:	
   203  03C1                     	ds	1
   204  03C2                     _b_kclr:	
   205  03C2                     	ds	1
   206  03C3                     _b_kover1:	
   207  03C3                     	ds	1
   208  03C4                     _b_kover:	
   209  03C4                     	ds	1
   210  03C5                     _B_OnOff:	
   211  03C5                     	ds	1
   212  03C6                     _B_MainLoop:	
   213  03C6                     	ds	1
   214                           
   215                           	psect	bssCOMMON
   216  0079                     __pbssCOMMON:	
   217  0079                     _KeyData:	
   218  0079                     	ds	2
   219  007B                     _workStep:	
   220  007B                     	ds	1
   221                           
   222                           	psect	bssBANK0
   223  0020                     __pbssBANK0:	
   224  0020                     _KeyOldData:	
   225  0020                     	ds	2
   226  0022                     _power_ad:	
   227  0022                     	ds	2
   228  0024                     _keyCount:	
   229  0024                     	ds	2
   230  0026                     _maxMotorStep:	
   231  0026                     	ds	2
   232  0028                     _motorStep:	
   233  0028                     	ds	2
   234  002A                     _fanValue:	
   235  002A                     	ds	2
   236  002C                     _shanshuoTime3:	
   237  002C                     	ds	2
   238  002E                     _shanshuoTime2:	
   239  002E                     	ds	2
   240  0030                     _shanshuoTime:	
   241  0030                     	ds	2
   242  0032                     _KeyFlag:	
   243  0032                     	ds	2
   244  0034                     TurnKeyFlags@F84:	
   245  0034                     	ds	1
   246  0035                     TurnKeyFlags@F83:	
   247  0035                     	ds	1
   248  0036                     CheckKeyOldValue@F77:	
   249  0036                     	ds	1
   250  0037                     _KeyMaxSub:	
   251  0037                     	ds	1
   252  0038                     _KeyCounter:	
   253  0038                     	ds	1
   254  0039                     WorkSleep@time:	
   255  0039                     	ds	1
   256  003A                     KeyServer@KeyOldFlag:	
   257  003A                     	ds	1
   258  003B                     _test_adc:	
   259  003B                     	ds	1
   260  003C                     _closeTime:	
   261  003C                     	ds	1
   262  003D                     _longKeyFlag:	
   263  003D                     	ds	1
   264  003E                     _powerFlag:	
   265  003E                     	ds	1
   266  003F                     _bujinFlag:	
   267  003F                     	ds	1
   268  0040                     _lowFanTime:	
   269  0040                     	ds	1
   270  0041                     _lowBatLock:	
   271  0041                     	ds	1
   272  0042                     _chrgFullTime:	
   273  0042                     	ds	1
   274  0043                     _chrgFullFlag:	
   275  0043                     	ds	1
   276  0044                     _chrgFlag:	
   277  0044                     	ds	1
   278  0045                     _fanOverTime:	
   279  0045                     	ds	1
   280  0046                     _count10s:	
   281  0046                     	ds	1
   282  0047                     _fanDuty:	
   283  0047                     	ds	1
   284  0048                     _wuhuaFlag:	
   285  0048                     	ds	1
   286  0049                     _count1s:	
   287  0049                     	ds	1
   288  004A                     _MainTime:	
   289  004A                     	ds	1
   290  004B                     _adresult:	
   291  004B                     	ds	2
   292                           
   293                           	psect	bssBANK1
   294  00A0                     __pbssBANK1:	
   295  00A0                     _KeyReference:	
   296  00A0                     	ds	6
   297  00A6                     _KeyOldValue2:	
   298  00A6                     	ds	6
   299  00AC                     _KeyOldValue1:	
   300  00AC                     	ds	6
   301  00B2                     _KeyOldValue0:	
   302  00B2                     	ds	6
   303  00B8                     _KeyResSum:	
   304  00B8                     	ds	6
   305  00BE                     _KeyUpShake:	
   306  00BE                     	ds	3
   307  00C1                     CheckValidTime@F87:	
   308  00C1                     	ds	2
   309  00C3                     _result:	
   310  00C3                     	ds	2
   311  00C5                     _lowBatTime:	
   312  00C5                     	ds	2
   313                           
   314                           	psect	clrtext
   315  0E5A                     clear_ram0:	
   316                           ;	Called with FSR containing the base address, and
   317                           ;	W with the last address+1
   318                           
   319  0E5A  0064               	clrwdt	;clear the watchdog before getting into this loop
   320  0E5B                     clrloop0:	
   321  0E5B  0180               	clrf	0	;clear RAM location pointed to by FSR
   322  0E5C  0A84               	incf	4,f	;increment pointer
   323  0E5D  0604               	xorwf	4,w	;XOR with final address
   324  0E5E  1903               	btfsc	3,2	;have we reached the end yet?
   325  0E5F  3400               	retlw	0	;all done for this memory range, return
   326  0E60  0604               	xorwf	4,w	;XOR again to restore value
   327  0E61  2E5B               	goto	clrloop0	;do the next byte
   328                           
   329                           	psect	cstackBANK1
   330  00C7                     __pcstackBANK1:	
   331  00C7                     workCtr@power_temp:	
   332                           
   333                           ; 4 bytes @ 0x0
   334  00C7                     	ds	4
   335                           
   336                           	psect	cstackCOMMON
   337  0070                     __pcstackCOMMON:	
   338  0070                     ?_SystemEnterSleep:	
   339  0070                     ?_CheckTouchKey:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_Init_System:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ?_Refurbish_Sfr:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_KeyServer:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_Isr_Timer:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ??_Isr_Timer:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_WorkSleep:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_chrgCtr:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_keyLedCtr:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_pwmInit:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_pwmStop:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_fanInit:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_fanStop:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_fanCtr:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_wuhuaCtr:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_bujinCtr:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_workCtr:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_main:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_KeyIsIn:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_KeyClearOne:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_KeyClearIn:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_KeyStopClear:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?_ClearResSum:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?_GetTouchKeyValue:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ?_CheckOnceResult:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ?_CheckKeyOldValue:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     ?_TurnKeyFlags:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ?_CheckValidTime:	
   421                           ; 1 bytes @ 0x0
   422                           
   423                           
   424                           ; 1 bytes @ 0x0
   425  0070                     	ds	2
   426  0072                     ??_Init_System:	
   427  0072                     ??_Refurbish_Sfr:	
   428                           ; 1 bytes @ 0x2
   429                           
   430  0072                     ??_KeyServer:	
   431                           ; 1 bytes @ 0x2
   432                           
   433  0072                     ?_ADC_Sample:	
   434                           ; 1 bytes @ 0x2
   435                           
   436  0072                     ??_chrgCtr:	
   437                           ; 1 bytes @ 0x2
   438                           
   439  0072                     ??_pwmInit:	
   440                           ; 1 bytes @ 0x2
   441                           
   442  0072                     ??_pwmStop:	
   443                           ; 1 bytes @ 0x2
   444                           
   445  0072                     ??_fanInit:	
   446                           ; 1 bytes @ 0x2
   447                           
   448  0072                     ??_fanStop:	
   449                           ; 1 bytes @ 0x2
   450                           
   451  0072                     ??_wuhuaCtr:	
   452                           ; 1 bytes @ 0x2
   453                           
   454  0072                     ??_bujinCtr:	
   455                           ; 1 bytes @ 0x2
   456                           
   457  0072                     ??_KeyIsIn:	
   458                           ; 1 bytes @ 0x2
   459                           
   460  0072                     ??_KeyClearOne:	
   461                           ; 1 bytes @ 0x2
   462                           
   463  0072                     ??_ClearResSum:	
   464                           ; 1 bytes @ 0x2
   465                           
   466  0072                     ?_KeyHave:	
   467                           ; 1 bytes @ 0x2
   468                           
   469  0072                     ??_CheckValidTime:	
   470                           ; 1 bytes @ 0x2
   471                           
   472  0072                     ??___lmul:	
   473                           ; 1 bytes @ 0x2
   474                           
   475  0072                     ?___lwmod:	
   476                           ; 1 bytes @ 0x2
   477                           
   478  0072                     ?___ftpack:	
   479                           ; 2 bytes @ 0x2
   480                           
   481  0072                     ADC_Sample@adldo:	
   482                           ; 3 bytes @ 0x2
   483                           
   484  0072                     KeyIsIn@46:	
   485                           ; 1 bytes @ 0x2
   486                           
   487  0072                     KeyClearOne@49:	
   488                           ; 1 bytes @ 0x2
   489                           
   490  0072                     ClearResSum@56:	
   491                           ; 1 bytes @ 0x2
   492                           
   493  0072                     KeyHave@59:	
   494                           ; 1 bytes @ 0x2
   495                           
   496  0072                     ___lwmod@divisor:	
   497                           ; 2 bytes @ 0x2
   498                           
   499  0072                     ___ftpack@arg:	
   500                           ; 2 bytes @ 0x2
   501                           
   502  0072                     ___lmul@product:	
   503                           ; 3 bytes @ 0x2
   504                           
   505                           
   506                           ; 4 bytes @ 0x2
   507  0072                     	ds	1
   508  0073                     ??_ADC_Sample:	
   509  0073                     ??_KeyStopClear:	
   510                           ; 1 bytes @ 0x3
   511                           
   512  0073                     ??_GetTouchKeyValue:	
   513                           ; 1 bytes @ 0x3
   514                           
   515  0073                     KeyIsIn@45:	
   516                           ; 1 bytes @ 0x3
   517                           
   518  0073                     KeyStopClear@53:	
   519                           ; 1 bytes @ 0x3
   520                           
   521  0073                     GetTouchKeyValue@64:	
   522                           ; 1 bytes @ 0x3
   523                           
   524                           
   525                           ; 2 bytes @ 0x3
   526  0073                     	ds	1
   527  0074                     ??_KeyClearIn:	
   528  0074                     ??_KeyHave:	
   529                           ; 1 bytes @ 0x4
   530                           
   531  0074                     ??_CheckKeyOldValue:	
   532                           ; 1 bytes @ 0x4
   533                           
   534  0074                     bujinCtr@tempStep:	
   535                           ; 1 bytes @ 0x4
   536                           
   537  0074                     KeyClearIn@51:	
   538                           ; 1 bytes @ 0x4
   539                           
   540  0074                     KeyHave@58:	
   541                           ; 1 bytes @ 0x4
   542                           
   543  0074                     ___lwmod@dividend:	
   544                           ; 1 bytes @ 0x4
   545                           
   546                           
   547                           ; 2 bytes @ 0x4
   548  0074                     	ds	1
   549  0075                     ??_TurnKeyFlags:	
   550  0075                     ___ftpack@exp:	
   551                           ; 1 bytes @ 0x5
   552                           
   553  0075                     GetTouchKeyValue@63:	
   554                           ; 1 bytes @ 0x5
   555                           
   556                           
   557                           ; 2 bytes @ 0x5
   558  0075                     	ds	1
   559  0076                     ??___lwmod:	
   560  0076                     ___ftpack@sign:	
   561                           ; 1 bytes @ 0x6
   562                           
   563  0076                     ___lwmod@counter:	
   564                           ; 1 bytes @ 0x6
   565                           
   566                           
   567                           ; 1 bytes @ 0x6
   568  0076                     	ds	1
   569  0077                     ??_keyLedCtr:	
   570  0077                     ??_fanCtr:	
   571                           ; 1 bytes @ 0x7
   572                           
   573  0077                     ??_workCtr:	
   574                           ; 1 bytes @ 0x7
   575                           
   576  0077                     ??___lwtoft:	
   577                           ; 1 bytes @ 0x7
   578                           
   579  0077                     GetTouchKeyValue@62:	
   580                           ; 1 bytes @ 0x7
   581                           
   582                           
   583                           ; 1 bytes @ 0x7
   584  0077                     	ds	1
   585  0078                     ??_CheckTouchKey:	
   586  0078                     ??_WorkSleep:	
   587                           ; 1 bytes @ 0x8
   588                           
   589  0078                     ??_main:	
   590                           ; 1 bytes @ 0x8
   591                           
   592                           
   593                           	psect	cstackBANK0
   594  004D                     __pcstackBANK0:	
   595                           ; 1 bytes @ 0x8
   596                           
   597  004D                     ??_SystemEnterSleep:	
   598  004D                     ??___ftpack:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  004D                     ??_CheckOnceResult:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  004D                     ?___lmul:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  004D                     ADC_Sample@j:	
   608                           ; 4 bytes @ 0x0
   609                           
   610  004D                     CheckKeyOldValue@79:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  004D                     ___lmul@multiplier:	
   614                           ; 2 bytes @ 0x0
   615                           
   616                           
   617                           ; 4 bytes @ 0x0
   618  004D                     	ds	1
   619  004E                     ADC_Sample@adch:	
   620                           
   621                           ; 1 bytes @ 0x1
   622  004E                     	ds	1
   623  004F                     ADC_Sample@i:	
   624  004F                     CheckKeyOldValue@80:	
   625                           ; 1 bytes @ 0x2
   626                           
   627  004F                     SystemEnterSleep@94:	
   628                           ; 2 bytes @ 0x2
   629                           
   630                           
   631                           ; 2 bytes @ 0x2
   632  004F                     	ds	1
   633  0050                     ?___lwtoft:	
   634  0050                     ___lwtoft@c:	
   635                           ; 3 bytes @ 0x3
   636                           
   637  0050                     ADC_Sample@adsum:	
   638                           ; 2 bytes @ 0x3
   639                           
   640                           
   641                           ; 4 bytes @ 0x3
   642  0050                     	ds	1
   643  0051                     CheckKeyOldValue@78:	
   644  0051                     CheckOnceResult@73:	
   645                           ; 1 bytes @ 0x4
   646                           
   647  0051                     SystemEnterSleep@93:	
   648                           ; 2 bytes @ 0x4
   649                           
   650  0051                     ___lmul@multiplicand:	
   651                           ; 2 bytes @ 0x4
   652                           
   653                           
   654                           ; 4 bytes @ 0x4
   655  0051                     	ds	2
   656  0053                     ?___ftdiv:	
   657  0053                     CheckOnceResult@70:	
   658                           ; 3 bytes @ 0x6
   659                           
   660  0053                     SystemEnterSleep@92:	
   661                           ; 1 bytes @ 0x6
   662                           
   663  0053                     ___ftdiv@f2:	
   664                           ; 2 bytes @ 0x6
   665                           
   666                           
   667                           ; 3 bytes @ 0x6
   668  0053                     	ds	1
   669  0054                     ADC_Sample@admin:	
   670  0054                     CheckOnceResult@72:	
   671                           ; 2 bytes @ 0x7
   672                           
   673                           
   674                           ; 2 bytes @ 0x7
   675  0054                     	ds	1
   676  0055                     SystemEnterSleep@91:	
   677                           
   678                           ; 1 bytes @ 0x8
   679  0055                     	ds	1
   680  0056                     CheckOnceResult@69:	
   681  0056                     ADC_Sample@admax:	
   682                           ; 1 bytes @ 0x9
   683                           
   684  0056                     ___ftdiv@f1:	
   685                           ; 2 bytes @ 0x9
   686                           
   687                           
   688                           ; 3 bytes @ 0x9
   689  0056                     	ds	1
   690  0057                     CheckOnceResult@71:	
   691                           
   692                           ; 2 bytes @ 0xA
   693  0057                     	ds	1
   694  0058                     ADC_Sample@ad_temp:	
   695                           
   696                           ; 2 bytes @ 0xB
   697  0058                     	ds	1
   698  0059                     ??___ftdiv:	
   699  0059                     CheckOnceResult@68:	
   700                           ; 1 bytes @ 0xC
   701                           
   702                           
   703                           ; 1 bytes @ 0xC
   704  0059                     	ds	1
   705  005A                     fanCtr@maxFanValue:	
   706                           
   707                           ; 1 bytes @ 0xD
   708  005A                     	ds	1
   709  005B                     fanCtr@fan_temp:	
   710                           
   711                           ; 4 bytes @ 0xE
   712  005B                     	ds	1
   713  005C                     ___ftdiv@cntr:	
   714                           
   715                           ; 1 bytes @ 0xF
   716  005C                     	ds	1
   717  005D                     ___ftdiv@f3:	
   718                           
   719                           ; 3 bytes @ 0x10
   720  005D                     	ds	3
   721  0060                     ___ftdiv@exp:	
   722                           
   723                           ; 1 bytes @ 0x13
   724  0060                     	ds	1
   725  0061                     ___ftdiv@sign:	
   726                           
   727                           ; 1 bytes @ 0x14
   728  0061                     	ds	1
   729  0062                     ?___fttol:	
   730  0062                     ___fttol@f1:	
   731                           ; 4 bytes @ 0x15
   732                           
   733                           
   734                           ; 3 bytes @ 0x15
   735  0062                     	ds	4
   736  0066                     ??___fttol:	
   737                           
   738                           ; 1 bytes @ 0x19
   739  0066                     	ds	3
   740  0069                     ___fttol@sign1:	
   741                           
   742                           ; 1 bytes @ 0x1C
   743  0069                     	ds	1
   744  006A                     ___fttol@lval:	
   745                           
   746                           ; 4 bytes @ 0x1D
   747  006A                     	ds	4
   748  006E                     ___fttol@exp1:	
   749                           
   750                           ; 1 bytes @ 0x21
   751  006E                     	ds	1
   752                           
   753                           	psect	maintext
   754  0EBA                     __pmaintext:	
   755 ;;
   756 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   757 ;;
   758 ;; *************** function _main *****************
   759 ;; Defined at:
   760 ;;		line 781 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
   761 ;; Parameters:    Size  Location     Type
   762 ;;		None
   763 ;; Auto vars:     Size  Location     Type
   764 ;;		None
   765 ;; Return value:  Size  Location     Type
   766 ;;                  1    wreg      void 
   767 ;; Registers used:
   768 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   769 ;; Tracked objects:
   770 ;;		On entry : B00/0
   771 ;;		On exit  : 200/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   774 ;;      Params:         0       0       0       0
   775 ;;      Locals:         0       0       0       0
   776 ;;      Temps:          0       0       0       0
   777 ;;      Totals:         0       0       0       0
   778 ;;Total ram usage:        0 bytes
   779 ;; Hardware stack levels required when called:    6
   780 ;; This function calls:
   781 ;;		_CheckTouchKey
   782 ;;		_Init_System
   783 ;;		_KeyServer
   784 ;;		_Refurbish_Sfr
   785 ;;		_WorkSleep
   786 ;;		_chrgCtr
   787 ;;		_workCtr
   788 ;; This function is called by:
   789 ;;		Startup code after reset
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793                           
   794                           ;psect for function _main
   795  0EBA                     _main:	
   796                           
   797                           ;main.c: 783: Init_System();
   798                           
   799                           ;incstack = 0
   800                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   801  0EBA  118A  2020  158A   	fcall	_Init_System
   802  0EBD  30C8               	movlw	200
   803                           
   804                           ;main.c: 784: firstLock = 1;
   805  0EBE  01CB               	clrf	_firstLock^(0+128)
   806  0EBF  0ACB               	incf	_firstLock^(0+128),f
   807                           
   808                           ;main.c: 785: firstTime = 200;
   809  0EC0  00CC               	movwf	_firstTime^(0+128)
   810  0EC1                     l4681:	
   811                           
   812                           ;main.c: 787: {
   813                           ;main.c: 788: if(B_MainLoop)
   814  0EC1  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   815  0EC2  2EC1               	goto	l4681
   816                           
   817                           ;main.c: 789: {
   818                           ;main.c: 790: B_MainLoop = 0;
   819  0EC3  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   820  0EC4  0064               	clrwdt	;# 
   821                           
   822                           ;main.c: 793: CheckTouchKey();
   823  0EC5  118A  206D  158A   	fcall	_CheckTouchKey
   824                           
   825                           ;main.c: 794: chrgCtr();
   826  0EC8  118A  27CC  158A   	fcall	_chrgCtr
   827                           
   828                           ;main.c: 795: Refurbish_Sfr();
   829  0ECB  118A  2384  158A   	fcall	_Refurbish_Sfr
   830                           
   831                           ;main.c: 796: KeyServer();
   832  0ECE  158A  26F8  158A   	fcall	_KeyServer
   833                           
   834                           ;main.c: 797: workCtr();
   835  0ED1  118A  23FA  158A   	fcall	_workCtr
   836                           
   837                           ;main.c: 798: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && powerFlag == 0 && k
      +                          eyCount == 0 && wuhuaFlag == 0 && bujinFlag == 0 && shanshuoTime == 0 && shanshuoTime2 =
      +                          = 0)
   838  0ED4  1683               	bsf	3,5	;RP0=1, select bank1
   839  0ED5  084C               	movf	_firstTime^(0+128),w
   840  0ED6  1D03               	btfss	3,2
   841  0ED7  2EC1               	goto	l4681
   842  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
   843  0ED9  0844               	movf	_chrgFlag,w
   844  0EDA  1D03               	btfss	3,2
   845  0EDB  2EC1               	goto	l4681
   846  0EDC  087B               	movf	_workStep,w
   847  0EDD  1D03               	btfss	3,2
   848  0EDE  2EC1               	goto	l4681
   849  0EDF  083E               	movf	_powerFlag,w
   850  0EE0  1D03               	btfss	3,2
   851  0EE1  2EC1               	goto	l4681
   852  0EE2  0824               	movf	_keyCount,w
   853  0EE3  0425               	iorwf	_keyCount+1,w
   854  0EE4  1D03               	btfss	3,2
   855  0EE5  2EC1               	goto	l4681
   856  0EE6  0848               	movf	_wuhuaFlag,w
   857  0EE7  1D03               	btfss	3,2
   858  0EE8  2EC1               	goto	l4681
   859  0EE9  083F               	movf	_bujinFlag,w
   860  0EEA  1D03               	btfss	3,2
   861  0EEB  2EC1               	goto	l4681
   862  0EEC  0830               	movf	_shanshuoTime,w
   863  0EED  0431               	iorwf	_shanshuoTime+1,w
   864  0EEE  1D03               	btfss	3,2
   865  0EEF  2EC1               	goto	l4681
   866  0EF0  082E               	movf	_shanshuoTime2,w
   867  0EF1  042F               	iorwf	_shanshuoTime2+1,w
   868  0EF2  1D03               	btfss	3,2
   869  0EF3  2EC1               	goto	l4681
   870                           
   871                           ;main.c: 799: {
   872                           ;main.c: 800: WorkSleep();
   873  0EF4  118A  203E  158A   	fcall	_WorkSleep
   874  0EF7  2EC1               	goto	l4681
   875  0EF8                     __end_of_main:	
   876                           
   877                           	psect	text1
   878  03FA                     __ptext1:	
   879 ;; *************** function _workCtr *****************
   880 ;; Defined at:
   881 ;;		line 725 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      void 
   888 ;; Registers used:
   889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   890 ;; Tracked objects:
   891 ;;		On entry : 200/0
   892 ;;		On exit  : 200/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   895 ;;      Params:         0       0       0       0
   896 ;;      Locals:         0       0       4       0
   897 ;;      Temps:          0       0       0       0
   898 ;;      Totals:         0       0       4       0
   899 ;;Total ram usage:        4 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; Hardware stack levels required when called:    3
   902 ;; This function calls:
   903 ;;		_ADC_Sample
   904 ;;		___ftdiv
   905 ;;		___fttol
   906 ;;		___lwtoft
   907 ;;		_bujinCtr
   908 ;;		_fanCtr
   909 ;;		_keyLedCtr
   910 ;;		_wuhuaCtr
   911 ;; This function is called by:
   912 ;;		_main
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           
   917                           ;psect for function _workCtr
   918  03FA                     _workCtr:	
   919                           
   920                           ;incstack = 0
   921                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   922  03FA  301F               	movlw	31
   923                           
   924                           ;main.c: 727: test_adc = ADC_Sample(31, 0);
   925  03FB  01F2               	clrf	ADC_Sample@adldo
   926  03FC  2582  118A         	fcall	_ADC_Sample
   927  03FE  00BB               	movwf	_test_adc	;volatile
   928                           
   929                           ;main.c: 728: if (0xA5 == test_adc)
   930  03FF  30A5               	movlw	165
   931  0400  063B               	xorwf	_test_adc,w	;volatile
   932  0401  1D03               	btfss	3,2
   933  0402  2C34               	goto	l4605
   934                           
   935                           ;main.c: 729: {
   936                           ;main.c: 730: volatile unsigned long power_temp;
   937                           ;main.c: 732: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
   938  0403  3096               	movlw	150
   939  0404  01D6               	clrf	___ftdiv@f1
   940  0405  00D7               	movwf	___ftdiv@f1+1
   941  0406  304A               	movlw	74
   942  0407  00D8               	movwf	___ftdiv@f1+2
   943  0408  084C               	movf	_adresult+1,w	;volatile
   944  0409  00D1               	movwf	___lwtoft@c+1
   945  040A  084B               	movf	_adresult,w	;volatile
   946  040B  00D0               	movwf	___lwtoft@c
   947  040C  2534  118A         	fcall	___lwtoft
   948  040E  0850               	movf	?___lwtoft,w
   949  040F  00D3               	movwf	___ftdiv@f2
   950  0410  0851               	movf	?___lwtoft+1,w
   951  0411  00D4               	movwf	___ftdiv@f2+1
   952  0412  0852               	movf	?___lwtoft+2,w
   953  0413  00D5               	movwf	___ftdiv@f2+2
   954  0414  2479  118A         	fcall	___ftdiv
   955  0416  0853               	movf	?___ftdiv,w
   956  0417  00E2               	movwf	___fttol@f1
   957  0418  0854               	movf	?___ftdiv+1,w
   958  0419  00E3               	movwf	___fttol@f1+1
   959  041A  0855               	movf	?___ftdiv+2,w
   960  041B  00E4               	movwf	___fttol@f1+2
   961  041C  24DB  118A         	fcall	___fttol
   962  041E  0865               	movf	?___fttol+3,w
   963  041F  1683               	bsf	3,5	;RP0=1, select bank1
   964  0420  00CA               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
   965  0421  1283               	bcf	3,5	;RP0=0, select bank0
   966  0422  0864               	movf	?___fttol+2,w
   967  0423  1683               	bsf	3,5	;RP0=1, select bank1
   968  0424  00C9               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
   969  0425  1283               	bcf	3,5	;RP0=0, select bank0
   970  0426  0863               	movf	?___fttol+1,w
   971  0427  1683               	bsf	3,5	;RP0=1, select bank1
   972  0428  00C8               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
   973  0429  1283               	bcf	3,5	;RP0=0, select bank0
   974  042A  0862               	movf	?___fttol,w
   975  042B  1683               	bsf	3,5	;RP0=1, select bank1
   976  042C  00C7               	movwf	workCtr@power_temp^(0+128)	;volatile
   977                           
   978                           ;main.c: 733: power_ad = (unsigned int)(power_temp);
   979  042D  0848               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
   980  042E  1283               	bcf	3,5	;RP0=0, select bank0
   981  042F  00A3               	movwf	_power_ad+1	;volatile
   982  0430  1683               	bsf	3,5	;RP0=1, select bank1
   983  0431  0847               	movf	workCtr@power_temp^(0+128),w	;volatile
   984  0432  1283               	bcf	3,5	;RP0=0, select bank0
   985  0433  00A2               	movwf	_power_ad	;volatile
   986  0434                     l4605:	
   987                           
   988                           ;main.c: 734: }
   989                           ;main.c: 735: if(workStep == 2 && power_ad < 3300)
   990  0434  3002               	movlw	2
   991  0435  067B               	xorwf	_workStep,w
   992  0436  1D03               	btfss	3,2
   993  0437  2C48               	goto	l4615
   994  0438  300C               	movlw	12
   995  0439  0223               	subwf	_power_ad+1,w	;volatile
   996  043A  30E4               	movlw	228
   997  043B  1903               	skipnz
   998  043C  0222               	subwf	_power_ad,w	;volatile
   999  043D  1803               	skipnc
  1000  043E  2C48               	goto	l4615
  1001                           
  1002                           ;main.c: 736: {
  1003                           ;main.c: 737: if(++lowFanTime > 200)
  1004  043F  30C9               	movlw	201
  1005  0440  0AC0               	incf	_lowFanTime,f
  1006  0441  0240               	subwf	_lowFanTime,w
  1007  0442  1C03               	skipc
  1008  0443  2C49               	goto	l4617
  1009                           
  1010                           ;main.c: 738: {
  1011                           ;main.c: 739: lowFanTime = 0;
  1012  0444  01C0               	clrf	_lowFanTime
  1013                           
  1014                           ;main.c: 740: workStep = 1;
  1015  0445  01FB               	clrf	_workStep
  1016  0446  0AFB               	incf	_workStep,f
  1017  0447  2C49               	goto	l4617
  1018  0448                     l4615:	
  1019                           
  1020                           ;main.c: 743: else
  1021                           ;main.c: 744: {
  1022                           ;main.c: 745: lowFanTime = 0;
  1023  0448  01C0               	clrf	_lowFanTime
  1024  0449                     l4617:	
  1025                           
  1026                           ;main.c: 746: }
  1027                           ;main.c: 747: if(power_ad < 2900)
  1028  0449  300B               	movlw	11
  1029  044A  0223               	subwf	_power_ad+1,w	;volatile
  1030  044B  3054               	movlw	84
  1031  044C  1903               	skipnz
  1032  044D  0222               	subwf	_power_ad,w	;volatile
  1033  044E  1803               	skipnc
  1034  044F  2C64               	goto	l4625
  1035                           
  1036                           ;main.c: 748: {
  1037                           ;main.c: 749: if(++lowBatTime > 1000)
  1038  0450  1683               	bsf	3,5	;RP0=1, select bank1
  1039  0451  0AC5               	incf	_lowBatTime^(0+128),f
  1040  0452  1903               	skipnz
  1041  0453  0AC6               	incf	(_lowBatTime+1)^(0+128),f
  1042  0454  3003               	movlw	3
  1043  0455  0246               	subwf	(_lowBatTime+1)^(0+128),w
  1044  0456  30E9               	movlw	233
  1045  0457  1903               	skipnz
  1046  0458  0245               	subwf	_lowBatTime^(0+128),w
  1047  0459  1C03               	skipc
  1048  045A  2C67               	goto	l4627
  1049                           
  1050                           ;main.c: 750: {
  1051                           ;main.c: 751: lowBatTime = 0;
  1052  045B  01C5               	clrf	_lowBatTime^(0+128)
  1053  045C  01C6               	clrf	(_lowBatTime+1)^(0+128)
  1054                           
  1055                           ;main.c: 752: lowBatLock = 1;
  1056  045D  1283               	bcf	3,5	;RP0=0, select bank0
  1057  045E  01C1               	clrf	_lowBatLock
  1058  045F  0AC1               	incf	_lowBatLock,f
  1059                           
  1060                           ;main.c: 753: workStep = 0;
  1061  0460  01FB               	clrf	_workStep
  1062                           
  1063                           ;main.c: 754: wuhuaFlag = 0;
  1064  0461  01C8               	clrf	_wuhuaFlag
  1065                           
  1066                           ;main.c: 755: bujinFlag = 0;
  1067  0462  01BF               	clrf	_bujinFlag
  1068  0463  2C67               	goto	l4627
  1069  0464                     l4625:	
  1070                           
  1071                           ;main.c: 758: else
  1072                           ;main.c: 759: {
  1073                           ;main.c: 760: lowBatTime = 0;
  1074  0464  1683               	bsf	3,5	;RP0=1, select bank1
  1075  0465  01C5               	clrf	_lowBatTime^(0+128)
  1076  0466  01C6               	clrf	(_lowBatTime+1)^(0+128)
  1077  0467                     l4627:	
  1078                           
  1079                           ;main.c: 761: }
  1080                           ;main.c: 762: if(firstTime > 0)
  1081  0467  1683               	bsf	3,5	;RP0=1, select bank1
  1082  0468  084C               	movf	_firstTime^(0+128),w
  1083  0469  1903               	btfsc	3,2
  1084  046A  2C71               	goto	l4635
  1085                           
  1086                           ;main.c: 763: {
  1087                           ;main.c: 764: firstTime--;
  1088  046B  03CC               	decf	_firstTime^(0+128),f
  1089                           
  1090                           ;main.c: 765: PORTB = 0x00;
  1091  046C  1283               	bcf	3,5	;RP0=0, select bank0
  1092  046D  0186               	clrf	6	;volatile
  1093                           
  1094                           ;main.c: 766: PORTA = 0x00;
  1095  046E  1683               	bsf	3,5	;RP0=1, select bank1
  1096  046F  0186               	clrf	6	;volatile
  1097                           
  1098                           ;main.c: 767: }
  1099  0470  0008               	return
  1100  0471                     l4635:	
  1101                           
  1102                           ;main.c: 768: else
  1103                           ;main.c: 769: {
  1104                           ;main.c: 770: keyLedCtr();
  1105  0471  26F5  118A         	fcall	_keyLedCtr
  1106                           
  1107                           ;main.c: 771: fanCtr();
  1108  0473  2653               	fcall	_fanCtr
  1109                           
  1110                           ;main.c: 772: wuhuaCtr();
  1111  0474  158A  267D  118A   	fcall	_wuhuaCtr
  1112                           
  1113                           ;main.c: 773: bujinCtr();
  1114  0477  158A  2F76         	ljmp	l4353
  1115  0479                     __end_of_workCtr:	
  1116  0479                     __ptext15:	
  1117 ;; *************** function ___ftdiv *****************
  1118 ;; Defined at:
  1119 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;  f2              3    6[BANK0 ] float 
  1122 ;;  f1              3    9[BANK0 ] float 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  f3              3   16[BANK0 ] float 
  1125 ;;  sign            1   20[BANK0 ] unsigned char 
  1126 ;;  exp             1   19[BANK0 ] unsigned char 
  1127 ;;  cntr            1   15[BANK0 ] unsigned char 
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  3    6[BANK0 ] float 
  1130 ;; Registers used:
  1131 ;;		wreg, status,2, status,0, pclath, cstack
  1132 ;; Tracked objects:
  1133 ;;		On entry : 300/0
  1134 ;;		On exit  : 300/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1137 ;;      Params:         0       6       0       0
  1138 ;;      Locals:         0       6       0       0
  1139 ;;      Temps:          0       3       0       0
  1140 ;;      Totals:         0      15       0       0
  1141 ;;Total ram usage:       15 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; Hardware stack levels required when called:    2
  1144 ;; This function calls:
  1145 ;;		___ftpack
  1146 ;; This function is called by:
  1147 ;;		_workCtr
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151                           
  1152                           ;psect for function ___ftdiv
  1153  0479                     ___ftdiv:	
  1154                           
  1155                           ;incstack = 0
  1156                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1157  0479  0856               	movf	___ftdiv@f1,w
  1158  047A  00D9               	movwf	??___ftdiv
  1159  047B  0857               	movf	___ftdiv@f1+1,w
  1160  047C  00DA               	movwf	??___ftdiv+1
  1161  047D  0858               	movf	___ftdiv@f1+2,w
  1162  047E  00DB               	movwf	??___ftdiv+2
  1163  047F  1003               	clrc
  1164  0480  0D5A               	rlf	??___ftdiv+1,w
  1165  0481  0D5B               	rlf	??___ftdiv+2,w
  1166  0482  00E0               	movwf	___ftdiv@exp
  1167  0483  0860               	movf	___ftdiv@exp,w
  1168  0484  1D03               	btfss	3,2
  1169  0485  2C87               	goto	l4475
  1170  0486  2FC8               	ljmp	PL40	;call to abstracted procedure
  1171  0487                     l4475:	
  1172  0487  0853               	movf	___ftdiv@f2,w
  1173  0488  00D9               	movwf	??___ftdiv
  1174  0489  0854               	movf	___ftdiv@f2+1,w
  1175  048A  00DA               	movwf	??___ftdiv+1
  1176  048B  0855               	movf	___ftdiv@f2+2,w
  1177  048C  00DB               	movwf	??___ftdiv+2
  1178  048D  1003               	clrc
  1179  048E  0D5A               	rlf	??___ftdiv+1,w
  1180  048F  0D5B               	rlf	??___ftdiv+2,w
  1181  0490  00E1               	movwf	___ftdiv@sign
  1182  0491  0861               	movf	___ftdiv@sign,w
  1183  0492  1D03               	btfss	3,2
  1184  0493  2C95               	goto	l1571
  1185  0494  2FC8               	ljmp	PL40	;call to abstracted procedure
  1186  0495                     l1571:	
  1187  0495  3089               	movlw	137
  1188  0496  01DD               	clrf	___ftdiv@f3
  1189  0497  01DE               	clrf	___ftdiv@f3+1
  1190  0498  01DF               	clrf	___ftdiv@f3+2
  1191  0499  0761               	addwf	___ftdiv@sign,w
  1192  049A  00D9               	movwf	??___ftdiv
  1193  049B  02E0               	subwf	___ftdiv@exp,f
  1194  049C  0858               	movf	___ftdiv@f1+2,w
  1195  049D  00E1               	movwf	___ftdiv@sign
  1196  049E  0855               	movf	___ftdiv@f2+2,w
  1197  049F  06E1               	xorwf	___ftdiv@sign,f
  1198  04A0  3080               	movlw	128
  1199  04A1  05E1               	andwf	___ftdiv@sign,f
  1200  04A2  3018               	movlw	24
  1201  04A3  17D7               	bsf	___ftdiv@f1+1,7
  1202  04A4  01D8               	clrf	___ftdiv@f1+2
  1203  04A5  17D4               	bsf	___ftdiv@f2+1,7
  1204  04A6  01D5               	clrf	___ftdiv@f2+2
  1205  04A7  00DC               	movwf	___ftdiv@cntr
  1206  04A8                     l4497:	
  1207  04A8  1003               	clrc
  1208  04A9  0DDD               	rlf	___ftdiv@f3,f
  1209  04AA  0DDE               	rlf	___ftdiv@f3+1,f
  1210  04AB  0DDF               	rlf	___ftdiv@f3+2,f
  1211  04AC  0855               	movf	___ftdiv@f2+2,w
  1212  04AD  0258               	subwf	___ftdiv@f1+2,w
  1213  04AE  1D03               	skipz
  1214  04AF  2CB6               	goto	u4575
  1215  04B0  0854               	movf	___ftdiv@f2+1,w
  1216  04B1  0257               	subwf	___ftdiv@f1+1,w
  1217  04B2  1D03               	skipz
  1218  04B3  2CB6               	goto	u4575
  1219  04B4  0853               	movf	___ftdiv@f2,w
  1220  04B5  0256               	subwf	___ftdiv@f1,w
  1221  04B6                     u4575:	
  1222  04B6  1C03               	skipc
  1223  04B7  2CC4               	goto	L6
  1224  04B8  0853               	movf	___ftdiv@f2,w
  1225  04B9  02D6               	subwf	___ftdiv@f1,f
  1226  04BA  0854               	movf	___ftdiv@f2+1,w
  1227  04BB  1C03               	skipc
  1228  04BC  0F54               	incfsz	___ftdiv@f2+1,w
  1229  04BD  02D7               	subwf	___ftdiv@f1+1,f
  1230  04BE  0855               	movf	___ftdiv@f2+2,w
  1231  04BF  1C03               	skipc
  1232  04C0  0A55               	incf	___ftdiv@f2+2,w
  1233  04C1  02D8               	subwf	___ftdiv@f1+2,f
  1234  04C2  145D               	bsf	___ftdiv@f3,0
  1235  04C3  1003               	clrc
  1236  04C4                     L6:	
  1237  04C4  0DD6               	rlf	___ftdiv@f1,f
  1238  04C5  0DD7               	rlf	___ftdiv@f1+1,f
  1239  04C6  0DD8               	rlf	___ftdiv@f1+2,f
  1240  04C7  0BDC               	decfsz	___ftdiv@cntr,f
  1241  04C8  2CA8               	goto	l4497
  1242  04C9  085D               	movf	___ftdiv@f3,w
  1243  04CA  00F2               	movwf	___ftpack@arg
  1244  04CB  085E               	movf	___ftdiv@f3+1,w
  1245  04CC  00F3               	movwf	___ftpack@arg+1
  1246  04CD  085F               	movf	___ftdiv@f3+2,w
  1247  04CE  00F4               	movwf	___ftpack@arg+2
  1248  04CF  0860               	movf	___ftdiv@exp,w
  1249  04D0  00F5               	movwf	___ftpack@exp
  1250  04D1  0861               	movf	___ftdiv@sign,w
  1251  04D2  00F6               	movwf	___ftpack@sign
  1252  04D3  2544               	fcall	___ftpack
  1253  04D4  0872               	movf	?___ftpack,w
  1254  04D5  00D3               	movwf	?___ftdiv
  1255  04D6  0873               	movf	?___ftpack+1,w
  1256  04D7  00D4               	movwf	?___ftdiv+1
  1257  04D8  0874               	movf	?___ftpack+2,w
  1258  04D9  00D5               	movwf	?___ftdiv+2
  1259  04DA  0008               	return
  1260  04DB                     __end_of___ftdiv:	
  1261  04DB                     __ptext14:	
  1262 ;; *************** function ___fttol *****************
  1263 ;; Defined at:
  1264 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;  f1              3   21[BANK0 ] float 
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;  lval            4   29[BANK0 ] unsigned long 
  1269 ;;  exp1            1   33[BANK0 ] unsigned char 
  1270 ;;  sign1           1   28[BANK0 ] unsigned char 
  1271 ;; Return value:  Size  Location     Type
  1272 ;;                  4   21[BANK0 ] long 
  1273 ;; Registers used:
  1274 ;;		wreg, status,2, status,0
  1275 ;; Tracked objects:
  1276 ;;		On entry : 300/0
  1277 ;;		On exit  : 300/0
  1278 ;;		Unchanged: 0/0
  1279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1280 ;;      Params:         0       4       0       0
  1281 ;;      Locals:         0       6       0       0
  1282 ;;      Temps:          0       3       0       0
  1283 ;;      Totals:         0      13       0       0
  1284 ;;Total ram usage:       13 bytes
  1285 ;; Hardware stack levels used:    1
  1286 ;; Hardware stack levels required when called:    1
  1287 ;; This function calls:
  1288 ;;		Nothing
  1289 ;; This function is called by:
  1290 ;;		_workCtr
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294                           
  1295                           ;psect for function ___fttol
  1296  04DB                     ___fttol:	
  1297                           
  1298                           ;incstack = 0
  1299                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1300  04DB  27B7  118A         	fcall	PL24	;call to abstracted procedure
  1301  04DD  1003               	clrc
  1302  04DE  0D67               	rlf	??___fttol+1,w
  1303  04DF  0D68               	rlf	??___fttol+2,w
  1304  04E0  00EE               	movwf	___fttol@exp1
  1305  04E1  086E               	movf	___fttol@exp1,w
  1306  04E2  1D03               	btfss	3,2
  1307  04E3  2CE9               	goto	l4515
  1308  04E4                     l4513:	
  1309  04E4  01E2               	clrf	?___fttol
  1310  04E5  01E3               	clrf	?___fttol+1
  1311  04E6  01E4               	clrf	?___fttol+2
  1312  04E7  01E5               	clrf	?___fttol+3
  1313  04E8  0008               	return
  1314  04E9                     l4515:	
  1315  04E9  27B7  118A         	fcall	PL24	;call to abstracted procedure
  1316  04EB  3017               	movlw	23
  1317  04EC                     u4605:	
  1318  04EC  1003               	clrc
  1319  04ED  0CE8               	rrf	??___fttol+2,f
  1320  04EE  0CE7               	rrf	??___fttol+1,f
  1321  04EF  0CE6               	rrf	??___fttol,f
  1322  04F0  3EFF               	addlw	-1
  1323  04F1  1D03               	skipz
  1324  04F2  2CEC               	goto	u4605
  1325  04F3  0866               	movf	??___fttol,w
  1326  04F4  00E9               	movwf	___fttol@sign1
  1327  04F5  17E3               	bsf	___fttol@f1+1,7
  1328  04F6  01E4               	clrf	___fttol@f1+2
  1329  04F7  0862               	movf	___fttol@f1,w
  1330  04F8  00EA               	movwf	___fttol@lval
  1331  04F9  0863               	movf	___fttol@f1+1,w
  1332  04FA  00EB               	movwf	___fttol@lval+1
  1333  04FB  0864               	movf	___fttol@f1+2,w
  1334  04FC  00EC               	movwf	___fttol@lval+2
  1335  04FD  308E               	movlw	142
  1336  04FE  01ED               	clrf	___fttol@lval+3
  1337  04FF  02EE               	subwf	___fttol@exp1,f
  1338  0500  1FEE               	btfss	___fttol@exp1,7
  1339  0501  2D0F               	goto	l4535
  1340  0502  086E               	movf	___fttol@exp1,w
  1341  0503  3A80               	xorlw	128
  1342  0504  3E8F               	addlw	143
  1343  0505  1C03               	btfss	3,0
  1344  0506  2CE4               	goto	l4513
  1345  0507                     l4531:	
  1346  0507  1003               	clrc
  1347  0508  0CED               	rrf	___fttol@lval+3,f
  1348  0509  0CEC               	rrf	___fttol@lval+2,f
  1349  050A  0CEB               	rrf	___fttol@lval+1,f
  1350  050B  0CEA               	rrf	___fttol@lval,f
  1351  050C  0FEE               	incfsz	___fttol@exp1,f
  1352  050D  2D07               	goto	l4531
  1353  050E  2D1D               	goto	l4543
  1354  050F                     l4535:	
  1355  050F  3018               	movlw	24
  1356  0510  026E               	subwf	___fttol@exp1,w
  1357  0511  1803               	btfsc	3,0
  1358  0512  2CE4               	goto	l4513
  1359  0513                     l4541:	
  1360  0513  086E               	movf	___fttol@exp1,w
  1361  0514  1903               	btfsc	3,2
  1362  0515  2D1D               	goto	l4543
  1363  0516  1003               	clrc
  1364  0517  0DEA               	rlf	___fttol@lval,f
  1365  0518  0DEB               	rlf	___fttol@lval+1,f
  1366  0519  0DEC               	rlf	___fttol@lval+2,f
  1367  051A  0DED               	rlf	___fttol@lval+3,f
  1368  051B  03EE               	decf	___fttol@exp1,f
  1369  051C  2D13               	goto	l4541
  1370  051D                     l4543:	
  1371  051D  0869               	movf	___fttol@sign1,w
  1372  051E  1903               	btfsc	3,2
  1373  051F  2D2B               	goto	l4547
  1374  0520  09EA               	comf	___fttol@lval,f
  1375  0521  09EB               	comf	___fttol@lval+1,f
  1376  0522  09EC               	comf	___fttol@lval+2,f
  1377  0523  09ED               	comf	___fttol@lval+3,f
  1378  0524  0AEA               	incf	___fttol@lval,f
  1379  0525  1903               	skipnz
  1380  0526  0AEB               	incf	___fttol@lval+1,f
  1381  0527  1903               	skipnz
  1382  0528  0AEC               	incf	___fttol@lval+2,f
  1383  0529  1903               	skipnz
  1384  052A  0AED               	incf	___fttol@lval+3,f
  1385  052B                     l4547:	
  1386  052B  086D               	movf	___fttol@lval+3,w
  1387  052C  00E5               	movwf	?___fttol+3
  1388  052D  086C               	movf	___fttol@lval+2,w
  1389  052E  00E4               	movwf	?___fttol+2
  1390  052F  086B               	movf	___fttol@lval+1,w
  1391  0530  00E3               	movwf	?___fttol+1
  1392  0531  086A               	movf	___fttol@lval,w
  1393  0532  00E2               	movwf	?___fttol
  1394  0533  0008               	return
  1395  0534                     __end_of___fttol:	
  1396  0534                     __ptext13:	
  1397 ;; *************** function ___lwtoft *****************
  1398 ;; Defined at:
  1399 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;  c               2    3[BANK0 ] unsigned int 
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;		None
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  3    3[BANK0 ] float 
  1406 ;; Registers used:
  1407 ;;		wreg, status,2, status,0, pclath, cstack
  1408 ;; Tracked objects:
  1409 ;;		On entry : 300/0
  1410 ;;		On exit  : 300/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1413 ;;      Params:         0       3       0       0
  1414 ;;      Locals:         0       0       0       0
  1415 ;;      Temps:          0       0       0       0
  1416 ;;      Totals:         0       3       0       0
  1417 ;;Total ram usage:        3 bytes
  1418 ;; Hardware stack levels used:    1
  1419 ;; Hardware stack levels required when called:    2
  1420 ;; This function calls:
  1421 ;;		___ftpack
  1422 ;; This function is called by:
  1423 ;;		_workCtr
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           
  1428                           ;psect for function ___lwtoft
  1429  0534                     ___lwtoft:	
  1430                           
  1431                           ;incstack = 0
  1432                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1433  0534  0850               	movf	___lwtoft@c,w
  1434  0535  00F2               	movwf	___ftpack@arg
  1435  0536  0851               	movf	___lwtoft@c+1,w
  1436  0537  00F3               	movwf	___ftpack@arg+1
  1437  0538  308E               	movlw	142
  1438  0539  01F4               	clrf	___ftpack@arg+2
  1439  053A  00F5               	movwf	___ftpack@exp
  1440  053B  01F6               	clrf	___ftpack@sign
  1441  053C  2544               	fcall	___ftpack
  1442  053D  0872               	movf	?___ftpack,w
  1443  053E  00D0               	movwf	?___lwtoft
  1444  053F  0873               	movf	?___ftpack+1,w
  1445  0540  00D1               	movwf	?___lwtoft+1
  1446  0541  0874               	movf	?___ftpack+2,w
  1447  0542  00D2               	movwf	?___lwtoft+2
  1448  0543  0008               	return
  1449  0544                     __end_of___lwtoft:	
  1450  0544                     __ptext16:	
  1451 ;; *************** function ___ftpack *****************
  1452 ;; Defined at:
  1453 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;  arg             3    2[COMMON] unsigned um
  1456 ;;  exp             1    5[COMMON] unsigned char 
  1457 ;;  sign            1    6[COMMON] unsigned char 
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;		None
  1460 ;; Return value:  Size  Location     Type
  1461 ;;                  3    2[COMMON] float 
  1462 ;; Registers used:
  1463 ;;		wreg, status,2, status,0
  1464 ;; Tracked objects:
  1465 ;;		On entry : 300/0
  1466 ;;		On exit  : 300/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1469 ;;      Params:         5       0       0       0
  1470 ;;      Locals:         0       0       0       0
  1471 ;;      Temps:          0       3       0       0
  1472 ;;      Totals:         5       3       0       0
  1473 ;;Total ram usage:        8 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    1
  1476 ;; This function calls:
  1477 ;;		Nothing
  1478 ;; This function is called by:
  1479 ;;		___ftdiv
  1480 ;;		___lwtoft
  1481 ;; This function uses a non-reentrant model
  1482 ;;
  1483                           
  1484                           
  1485                           ;psect for function ___ftpack
  1486  0544                     ___ftpack:	
  1487                           
  1488                           ;incstack = 0
  1489                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1490  0544  0875               	movf	___ftpack@exp,w
  1491  0545  1903               	btfsc	3,2
  1492  0546  2D4C               	goto	l1517
  1493  0547  0874               	movf	___ftpack@arg+2,w
  1494  0548  0473               	iorwf	___ftpack@arg+1,w
  1495  0549  0472               	iorwf	___ftpack@arg,w
  1496  054A  1D03               	skipz
  1497  054B  2D53               	goto	l4105
  1498  054C                     l1517:	
  1499  054C  01F2               	clrf	?___ftpack
  1500  054D  01F3               	clrf	?___ftpack+1
  1501  054E  01F4               	clrf	?___ftpack+2
  1502  054F  0008               	return
  1503  0550                     l4103:	
  1504  0550  0AF5               	incf	___ftpack@exp,f
  1505  0551  27BE  118A         	fcall	PL34	;call to abstracted procedure
  1506  0553                     l4105:	
  1507  0553  30FE               	movlw	254
  1508  0554  0574               	andwf	___ftpack@arg+2,w
  1509  0555  1903               	btfsc	3,2
  1510  0556  2D60               	goto	l4109
  1511  0557  2D50               	goto	l4103
  1512  0558                     l4107:	
  1513  0558  0AF5               	incf	___ftpack@exp,f
  1514  0559  0AF2               	incf	___ftpack@arg,f
  1515  055A  1903               	skipnz
  1516  055B  0AF3               	incf	___ftpack@arg+1,f
  1517  055C  1903               	skipnz
  1518  055D  0AF4               	incf	___ftpack@arg+2,f
  1519  055E  27BE  118A         	fcall	PL34	;call to abstracted procedure
  1520  0560                     l4109:	
  1521  0560  30FF               	movlw	255
  1522  0561  0574               	andwf	___ftpack@arg+2,w
  1523  0562  1903               	btfsc	3,2
  1524  0563  2D6E               	goto	l4113
  1525  0564  2D58               	goto	l4107
  1526  0565                     l4115:	
  1527  0565  3002               	movlw	2
  1528  0566  0275               	subwf	___ftpack@exp,w
  1529  0567  1C03               	btfss	3,0
  1530  0568  2D70               	goto	l1529
  1531  0569  03F5               	decf	___ftpack@exp,f
  1532  056A  1003               	clrc
  1533  056B  0DF2               	rlf	___ftpack@arg,f
  1534  056C  0DF3               	rlf	___ftpack@arg+1,f
  1535  056D  0DF4               	rlf	___ftpack@arg+2,f
  1536  056E                     l4113:	
  1537  056E  1FF3               	btfss	___ftpack@arg+1,7
  1538  056F  2D65               	goto	l4115
  1539  0570                     l1529:	
  1540  0570  1C75               	btfss	___ftpack@exp,0
  1541  0571  13F3               	bcf	___ftpack@arg+1,7
  1542  0572  1003               	clrc
  1543  0573  0CF5               	rrf	___ftpack@exp,f
  1544  0574  0875               	movf	___ftpack@exp,w
  1545  0575  00CF               	movwf	??___ftpack+2
  1546  0576  01CE               	clrf	??___ftpack+1
  1547  0577  01CD               	clrf	??___ftpack
  1548  0578  084D               	movf	??___ftpack,w
  1549  0579  04F2               	iorwf	___ftpack@arg,f
  1550  057A  084E               	movf	??___ftpack+1,w
  1551  057B  04F3               	iorwf	___ftpack@arg+1,f
  1552  057C  084F               	movf	??___ftpack+2,w
  1553  057D  04F4               	iorwf	___ftpack@arg+2,f
  1554  057E  0876               	movf	___ftpack@sign,w
  1555  057F  1D03               	btfss	3,2
  1556  0580  17F4               	bsf	___ftpack@arg+2,7
  1557  0581  0008               	return
  1558  0582                     __end_of___ftpack:	
  1559  0582                     __ptext11:	
  1560 ;; *************** function _ADC_Sample *****************
  1561 ;; Defined at:
  1562 ;;		line 302 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;  adch            1    wreg     unsigned char 
  1565 ;;  adldo           1    2[COMMON] unsigned char 
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;  adch            1    1[BANK0 ] unsigned char 
  1568 ;;  j               1    0[BANK0 ] unsigned char 
  1569 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1570 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1571 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1572 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1573 ;;  i               1    2[BANK0 ] unsigned char 
  1574 ;; Return value:  Size  Location     Type
  1575 ;;                  1    wreg      unsigned char 
  1576 ;; Registers used:
  1577 ;;		wreg, status,2, status,0
  1578 ;; Tracked objects:
  1579 ;;		On entry : 200/0
  1580 ;;		On exit  : 300/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1583 ;;      Params:         1       0       0       0
  1584 ;;      Locals:         0      13       0       0
  1585 ;;      Temps:          4       0       0       0
  1586 ;;      Totals:         5      13       0       0
  1587 ;;Total ram usage:       18 bytes
  1588 ;; Hardware stack levels used:    1
  1589 ;; Hardware stack levels required when called:    1
  1590 ;; This function calls:
  1591 ;;		Nothing
  1592 ;; This function is called by:
  1593 ;;		_fanCtr
  1594 ;;		_workCtr
  1595 ;; This function uses a non-reentrant model
  1596 ;;
  1597                           
  1598                           
  1599                           ;psect for function _ADC_Sample
  1600  0582                     _ADC_Sample:	
  1601                           
  1602                           ;incstack = 0
  1603                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1604                           ;ADC_Sample@adch stored from wreg
  1605  0582  1283               	bcf	3,5	;RP0=0, select bank0
  1606  0583  00CE               	movwf	ADC_Sample@adch
  1607                           
  1608                           ;main.c: 304: volatile unsigned long adsum = 0;
  1609                           
  1610                           ;main.c: 305: volatile unsigned int admin = 0, admax = 0;
  1611  0584  27AE  118A         	fcall	PL16	;call to abstracted procedure
  1612                           
  1613                           ;main.c: 306: volatile unsigned int ad_temp = 0;
  1614  0586  01D8               	clrf	ADC_Sample@ad_temp	;volatile
  1615  0587  01D9               	clrf	ADC_Sample@ad_temp+1	;volatile
  1616                           
  1617                           ;main.c: 308: if ((!LDO_EN) && (adldo & 0x04) )
  1618  0588  1683               	bsf	3,5	;RP0=1, select bank1
  1619  0589  1D16               	btfss	22,2	;volatile
  1620  058A  1D72               	btfss	ADC_Sample@adldo,2
  1621  058B  2D94               	goto	l3991
  1622                           
  1623                           ;main.c: 309: {
  1624                           ;main.c: 311: ADCON1 = adldo;
  1625  058C  0872               	movf	ADC_Sample@adldo,w
  1626  058D  0096               	movwf	22	;volatile
  1627                           
  1628                           ;main.c: 312: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1629  058E  3042               	movlw	66
  1630  058F  00F3               	movwf	??_ADC_Sample
  1631  0590                     u4927:	
  1632  0590  0BF3               	decfsz	??_ADC_Sample,f
  1633  0591  2D90               	goto	u4927
  1634  0592  0000               	nop
  1635                           
  1636                           ;main.c: 313: }
  1637  0593  2D96               	goto	l3993
  1638  0594                     l3991:	
  1639                           
  1640                           ;main.c: 314: else
  1641                           ;main.c: 315: ADCON1 = adldo;
  1642  0594  0872               	movf	ADC_Sample@adldo,w
  1643  0595  0096               	movwf	22	;volatile
  1644  0596                     l3993:	
  1645                           
  1646                           ;main.c: 317: if(adch & 0x10)
  1647  0596  1283               	bcf	3,5	;RP0=0, select bank0
  1648  0597  1303               	bcf	3,6	;RP1=0, select bank0
  1649  0598  1E4E               	btfss	ADC_Sample@adch,4
  1650  0599  2D9F               	goto	l4001
  1651                           
  1652                           ;main.c: 318: {
  1653                           ;main.c: 319: CHS4 = 1;
  1654  059A  1683               	bsf	3,5	;RP0=1, select bank1
  1655  059B  1716               	bsf	22,6	;volatile
  1656                           
  1657                           ;main.c: 320: adch &= 0x0f;
  1658  059C  300F               	movlw	15
  1659  059D  1283               	bcf	3,5	;RP0=0, select bank0
  1660  059E  05CE               	andwf	ADC_Sample@adch,f
  1661  059F                     l4001:	
  1662                           
  1663                           ;main.c: 323: for (i = 0; i < 10; i++)
  1664  059F  01CF               	clrf	ADC_Sample@i
  1665  05A0                     l4007:	
  1666                           
  1667                           ;main.c: 324: {
  1668                           ;main.c: 325: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1669  05A0  084E               	movf	ADC_Sample@adch,w
  1670  05A1  00F3               	movwf	??_ADC_Sample
  1671  05A2  3001               	movlw	1
  1672  05A3  1003               	clrc
  1673  05A4                     L3:	
  1674  05A4  0DF3               	rlf	??_ADC_Sample,f
  1675  05A5  3EFF               	addlw	-1
  1676  05A6  1003               	clrc
  1677  05A7  1D03               	skipz
  1678  05A8  2DA4               	goto	L3
  1679  05A9  0D73               	rlf	??_ADC_Sample,w
  1680  05AA  3841               	iorlw	65
  1681  05AB  1683               	bsf	3,5	;RP0=1, select bank1
  1682  05AC  0095               	movwf	21	;volatile
  1683  05AD  0000               	nop	;# 
  1684  05AE  0000               	nop	;# 
  1685  05AF  0000               	nop	;# 
  1686  05B0  0000               	nop	;# 
  1687                           
  1688                           ;main.c: 330: GODONE = 1;
  1689  05B1  1683               	bsf	3,5	;RP0=1, select bank1
  1690  05B2  1303               	bcf	3,6	;RP1=0, select bank1
  1691  05B3  1495               	bsf	21,1	;volatile
  1692                           
  1693                           ;main.c: 332: unsigned char j = 0;
  1694  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  1695  05B5  01CD               	clrf	ADC_Sample@j
  1696  05B6                     l989:	
  1697                           ;main.c: 333: while (GODONE)
  1698                           
  1699  05B6  1683               	bsf	3,5	;RP0=1, select bank1
  1700  05B7  1C95               	btfss	21,1	;volatile
  1701  05B8  2DC0               	goto	l4017
  1702                           
  1703                           ;main.c: 334: {
  1704                           ;main.c: 335: _delay((unsigned long)((2)*(8000000/4000000.0)));
  1705  05B9  2DBA               	nop2	;2 cycle nop
  1706  05BA  2DBB               	nop2	;2 cycle nop
  1707                           
  1708                           ;main.c: 337: if (0 == (--j))
  1709  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  1710  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  1711  05BD  0BCD               	decfsz	ADC_Sample@j,f
  1712  05BE  2DB6               	goto	l989
  1713                           
  1714                           ;main.c: 338: return 0;
  1715  05BF  3400               	retlw	0
  1716  05C0                     l4017:	
  1717                           
  1718                           ;main.c: 339: }
  1719                           ;main.c: 341: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  1720  05C0  0819               	movf	25,w	;volatile
  1721  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  1722  05C2  00D8               	movwf	ADC_Sample@ad_temp	;volatile
  1723  05C3  01D9               	clrf	ADC_Sample@ad_temp+1	;volatile
  1724  05C4  0ED8               	swapf	ADC_Sample@ad_temp,f	;volatile
  1725  05C5  0ED9               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  1726  05C6  30F0               	movlw	240
  1727  05C7  05D9               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  1728  05C8  0858               	movf	ADC_Sample@ad_temp,w	;volatile
  1729  05C9  390F               	andlw	15
  1730  05CA  04D9               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  1731  05CB  30F0               	movlw	240
  1732  05CC  05D8               	andwf	ADC_Sample@ad_temp,f	;volatile
  1733  05CD  1683               	bsf	3,5	;RP0=1, select bank1
  1734  05CE  0E18               	swapf	24,w	;volatile
  1735  05CF  390F               	andlw	15
  1736  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  1737  05D1  07D8               	addwf	ADC_Sample@ad_temp,f	;volatile
  1738  05D2  1803               	skipnc
  1739  05D3  0AD9               	incf	ADC_Sample@ad_temp+1,f	;volatile
  1740                           
  1741                           ;main.c: 343: if (0 == admax)
  1742  05D4  0856               	movf	ADC_Sample@admax,w	;volatile
  1743  05D5  0457               	iorwf	ADC_Sample@admax+1,w	;volatile
  1744  05D6  1D03               	btfss	3,2
  1745  05D7  2DDB               	goto	l4025
  1746                           
  1747                           ;main.c: 344: {
  1748                           ;main.c: 345: admax = ad_temp;
  1749  05D8  27C3  118A         	fcall	PL38	;call to abstracted procedure
  1750  05DA  2DEE               	goto	l4031
  1751  05DB                     l4025:	
  1752                           ;main.c: 347: }
  1753                           
  1754                           ;main.c: 346: admin = ad_temp;
  1755                           
  1756                           
  1757                           ;main.c: 348: else if (ad_temp > admax)
  1758  05DB  0859               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1759  05DC  0257               	subwf	ADC_Sample@admax+1,w	;volatile
  1760  05DD  1D03               	skipz
  1761  05DE  2DE1               	goto	u3715
  1762  05DF  0858               	movf	ADC_Sample@ad_temp,w	;volatile
  1763  05E0  0256               	subwf	ADC_Sample@admax,w	;volatile
  1764  05E1                     u3715:	
  1765  05E1  1803               	skipnc
  1766  05E2  2DE6               	goto	l4029
  1767                           
  1768                           ;main.c: 349: admax = ad_temp;
  1769  05E3  27C3  118A         	fcall	PL38	;call to abstracted procedure
  1770  05E5  2DF2               	goto	l995
  1771  05E6                     l4029:	
  1772                           
  1773                           ;main.c: 350: else if (ad_temp < admin)
  1774  05E6  0855               	movf	ADC_Sample@admin+1,w	;volatile
  1775  05E7  0259               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1776  05E8  1D03               	skipz
  1777  05E9  2DEC               	goto	u3725
  1778  05EA  0854               	movf	ADC_Sample@admin,w	;volatile
  1779  05EB  0258               	subwf	ADC_Sample@ad_temp,w	;volatile
  1780  05EC                     u3725:	
  1781  05EC  1803               	skipnc
  1782  05ED  2DF2               	goto	l995
  1783  05EE                     l4031:	
  1784                           
  1785                           ;main.c: 351: admin = ad_temp;
  1786  05EE  0859               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1787  05EF  00D5               	movwf	ADC_Sample@admin+1	;volatile
  1788  05F0  0858               	movf	ADC_Sample@ad_temp,w	;volatile
  1789  05F1  00D4               	movwf	ADC_Sample@admin	;volatile
  1790  05F2                     l995:	
  1791                           
  1792                           ;main.c: 353: adsum += ad_temp;
  1793  05F2  0858               	movf	ADC_Sample@ad_temp,w	;volatile
  1794  05F3  00F3               	movwf	??_ADC_Sample
  1795  05F4  0859               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1796  05F5  00F4               	movwf	??_ADC_Sample+1
  1797  05F6  01F5               	clrf	??_ADC_Sample+2
  1798  05F7  01F6               	clrf	??_ADC_Sample+3
  1799  05F8  0873               	movf	??_ADC_Sample,w
  1800  05F9  07D0               	addwf	ADC_Sample@adsum,f	;volatile
  1801  05FA  0874               	movf	??_ADC_Sample+1,w
  1802  05FB  1103               	clrz
  1803  05FC  1803               	skipnc
  1804  05FD  3E01               	addlw	1
  1805  05FE  1D03               	btfss	3,2
  1806  05FF  07D1               	addwf	ADC_Sample@adsum+1,f	;volatile
  1807  0600  0875               	movf	??_ADC_Sample+2,w
  1808  0601  1103               	clrz
  1809  0602  1803               	skipnc
  1810  0603  3E01               	addlw	1
  1811  0604  1D03               	btfss	3,2
  1812  0605  07D2               	addwf	ADC_Sample@adsum+2,f	;volatile
  1813  0606  0876               	movf	??_ADC_Sample+3,w
  1814  0607  1103               	clrz
  1815  0608  1803               	skipnc
  1816  0609  3E01               	addlw	1
  1817  060A  1D03               	btfss	3,2
  1818  060B  07D3               	addwf	ADC_Sample@adsum+3,f	;volatile
  1819  060C  300A               	movlw	10
  1820  060D  0ACF               	incf	ADC_Sample@i,f
  1821  060E  024F               	subwf	ADC_Sample@i,w
  1822  060F  1C03               	skipc
  1823  0610  2DA0               	goto	l4007
  1824                           
  1825                           ;main.c: 354: }
  1826                           ;main.c: 355: adsum -= admax;
  1827  0611  0856               	movf	ADC_Sample@admax,w	;volatile
  1828  0612  00F3               	movwf	??_ADC_Sample
  1829  0613  0857               	movf	ADC_Sample@admax+1,w	;volatile
  1830  0614  279F  118A         	fcall	PL6	;call to abstracted procedure
  1831  0616  1C03               	skipc
  1832  0617  0F76               	incfsz	??_ADC_Sample+3,w
  1833  0618  02D3               	subwf	ADC_Sample@adsum+3,f	;volatile
  1834                           
  1835                           ;main.c: 356: if (adsum >= admin)
  1836  0619  0854               	movf	ADC_Sample@admin,w	;volatile
  1837  061A  00F3               	movwf	??_ADC_Sample
  1838  061B  0855               	movf	ADC_Sample@admin+1,w	;volatile
  1839  061C  00F4               	movwf	??_ADC_Sample+1
  1840  061D  01F5               	clrf	??_ADC_Sample+2
  1841  061E  01F6               	clrf	??_ADC_Sample+3
  1842  061F  0876               	movf	??_ADC_Sample+3,w
  1843  0620  0253               	subwf	ADC_Sample@adsum+3,w	;volatile
  1844  0621  1D03               	skipz
  1845  0622  2E2D               	goto	u3765
  1846  0623  0875               	movf	??_ADC_Sample+2,w
  1847  0624  0252               	subwf	ADC_Sample@adsum+2,w	;volatile
  1848  0625  1D03               	skipz
  1849  0626  2E2D               	goto	u3765
  1850  0627  0874               	movf	??_ADC_Sample+1,w
  1851  0628  0251               	subwf	ADC_Sample@adsum+1,w	;volatile
  1852  0629  1D03               	skipz
  1853  062A  2E2D               	goto	u3765
  1854  062B  0873               	movf	??_ADC_Sample,w
  1855  062C  0250               	subwf	ADC_Sample@adsum,w	;volatile
  1856  062D                     u3765:	
  1857  062D  1C03               	skipc
  1858  062E  2E38               	goto	l999
  1859                           
  1860                           ;main.c: 357: adsum -= admin;
  1861  062F  0854               	movf	ADC_Sample@admin,w	;volatile
  1862  0630  00F3               	movwf	??_ADC_Sample
  1863  0631  0855               	movf	ADC_Sample@admin+1,w	;volatile
  1864  0632  279F  118A         	fcall	PL6	;call to abstracted procedure
  1865  0634  1C03               	skipc
  1866  0635  0F76               	incfsz	??_ADC_Sample+3,w
  1867  0636  02D3               	subwf	ADC_Sample@adsum+3,f	;volatile
  1868  0637  2E3C               	goto	l4041
  1869  0638                     l999:	
  1870                           
  1871                           ;main.c: 358: else
  1872                           ;main.c: 359: adsum = 0;
  1873  0638  01D0               	clrf	ADC_Sample@adsum	;volatile
  1874  0639  01D1               	clrf	ADC_Sample@adsum+1	;volatile
  1875  063A  01D2               	clrf	ADC_Sample@adsum+2	;volatile
  1876  063B  01D3               	clrf	ADC_Sample@adsum+3	;volatile
  1877  063C                     l4041:	
  1878                           
  1879                           ;main.c: 361: adresult = adsum >> 3;
  1880  063C  0850               	movf	ADC_Sample@adsum,w	;volatile
  1881  063D  00F3               	movwf	??_ADC_Sample
  1882  063E  0851               	movf	ADC_Sample@adsum+1,w	;volatile
  1883  063F  00F4               	movwf	??_ADC_Sample+1
  1884  0640  0852               	movf	ADC_Sample@adsum+2,w	;volatile
  1885  0641  00F5               	movwf	??_ADC_Sample+2
  1886  0642  0853               	movf	ADC_Sample@adsum+3,w	;volatile
  1887  0643  00F6               	movwf	??_ADC_Sample+3
  1888  0644  3003               	movlw	3
  1889  0645                     u3785:	
  1890  0645  1003               	clrc
  1891  0646  0CF6               	rrf	??_ADC_Sample+3,f
  1892  0647  0CF5               	rrf	??_ADC_Sample+2,f
  1893  0648  0CF4               	rrf	??_ADC_Sample+1,f
  1894  0649  0CF3               	rrf	??_ADC_Sample,f
  1895  064A  3EFF               	addlw	-1
  1896  064B  1D03               	skipz
  1897  064C  2E45               	goto	u3785
  1898  064D  0874               	movf	??_ADC_Sample+1,w
  1899  064E  00CC               	movwf	_adresult+1	;volatile
  1900  064F  0873               	movf	??_ADC_Sample,w
  1901  0650  00CB               	movwf	_adresult	;volatile
  1902                           
  1903                           ;main.c: 363: adsum = 0;
  1904                           
  1905                           ;main.c: 364: admin = 0;
  1906                           
  1907                           ;main.c: 365: admax = 0;
  1908  0651  27AE               	fcall	PL16	;call to abstracted procedure
  1909                           
  1910                           ;main.c: 366: return 0xA5;
  1911  0652  34A5               	retlw	165
  1912  0653                     __end_of_ADC_Sample:	
  1913  0653                     __ptext7:	
  1914 ;; *************** function _fanCtr *****************
  1915 ;; Defined at:
  1916 ;;		line 515 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;		None
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
  1921 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      void 
  1924 ;; Registers used:
  1925 ;;		wreg, status,2, status,0, pclath, cstack
  1926 ;; Tracked objects:
  1927 ;;		On entry : 300/100
  1928 ;;		On exit  : 200/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1931 ;;      Params:         0       0       0       0
  1932 ;;      Locals:         0       5       0       0
  1933 ;;      Temps:          0       0       0       0
  1934 ;;      Totals:         0       5       0       0
  1935 ;;Total ram usage:        5 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; Hardware stack levels required when called:    2
  1938 ;; This function calls:
  1939 ;;		_ADC_Sample
  1940 ;;		___lmul
  1941 ;;		_fanInit
  1942 ;;		_fanStop
  1943 ;; This function is called by:
  1944 ;;		_workCtr
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           
  1949                           ;psect for function _fanCtr
  1950  0653                     _fanCtr:	
  1951                           
  1952                           ;main.c: 517: if(workStep > 0)
  1953                           
  1954                           ;incstack = 0
  1955                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1956  0653  087B               	movf	_workStep,w
  1957  0654  1903               	btfsc	3,2
  1958  0655  2EBC               	goto	l4319
  1959                           
  1960                           ;main.c: 518: {
  1961                           ;main.c: 519: PORTA |= 0x02;
  1962  0656  1486               	bsf	6,1	;volatile
  1963                           
  1964                           ;main.c: 520: unsigned char maxFanValue = 52;
  1965  0657  3034               	movlw	52
  1966  0658  1283               	bcf	3,5	;RP0=0, select bank0
  1967  0659  00DA               	movwf	fanCtr@maxFanValue
  1968                           
  1969                           ;main.c: 521: if(workStep == 1)
  1970  065A  0B7B               	decfsz	_workStep,w
  1971  065B  2E5E               	goto	l1051
  1972                           
  1973                           ;main.c: 522: {
  1974                           ;main.c: 523: maxFanValue = 40;
  1975  065C  3028               	movlw	40
  1976  065D  00DA               	movwf	fanCtr@maxFanValue
  1977  065E                     l1051:	
  1978                           
  1979                           ;main.c: 524: }
  1980                           ;main.c: 525: if(power_ad < 3150)
  1981  065E  300C               	movlw	12
  1982  065F  0223               	subwf	_power_ad+1,w	;volatile
  1983  0660  304E               	movlw	78
  1984  0661  1903               	skipnz
  1985  0662  0222               	subwf	_power_ad,w	;volatile
  1986  0663  1803               	skipnc
  1987  0664  2E67               	goto	l4283
  1988                           
  1989                           ;main.c: 526: {
  1990                           ;main.c: 527: maxFanValue = 32;
  1991  0665  3020               	movlw	32
  1992  0666  00DA               	movwf	fanCtr@maxFanValue
  1993  0667                     l4283:	
  1994                           
  1995                           ;main.c: 528: }
  1996                           ;main.c: 529: if(workStep == 3)
  1997  0667  3003               	movlw	3
  1998  0668  067B               	xorwf	_workStep,w
  1999  0669  1D03               	btfss	3,2
  2000  066A  2E6D               	goto	l4287
  2001                           
  2002                           ;main.c: 530: {
  2003                           ;main.c: 531: maxFanValue = 10;
  2004  066B  300A               	movlw	10
  2005  066C  00DA               	movwf	fanCtr@maxFanValue
  2006  066D                     l4287:	
  2007  066D  3002               	movlw	2
  2008                           
  2009                           ;main.c: 532: }
  2010                           ;main.c: 533: test_adc = ADC_Sample(2, 0);
  2011  066E  01F2               	clrf	ADC_Sample@adldo
  2012  066F  2582  118A         	fcall	_ADC_Sample
  2013  0671  00BB               	movwf	_test_adc	;volatile
  2014                           
  2015                           ;main.c: 534: if (0xA5 == test_adc)
  2016  0672  30A5               	movlw	165
  2017  0673  063B               	xorwf	_test_adc,w	;volatile
  2018  0674  1D03               	btfss	3,2
  2019  0675  2E9D               	goto	l4299
  2020                           
  2021                           ;main.c: 535: {
  2022                           ;main.c: 536: volatile unsigned long fan_temp;
  2023                           ;main.c: 537: if(power_ad > 0)
  2024  0676  0822               	movf	_power_ad,w	;volatile
  2025  0677  0423               	iorwf	_power_ad+1,w	;volatile
  2026  0678  1903               	btfsc	3,2
  2027  0679  2E9D               	goto	l4299
  2028                           
  2029                           ;main.c: 538: {
  2030                           ;main.c: 539: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  2031  067A  084B               	movf	_adresult,w	;volatile
  2032  067B  00CD               	movwf	___lmul@multiplier
  2033  067C  084C               	movf	_adresult+1,w	;volatile
  2034  067D  00CE               	movwf	___lmul@multiplier+1
  2035  067E  01CF               	clrf	___lmul@multiplier+2
  2036  067F  01D0               	clrf	___lmul@multiplier+3
  2037  0680  0822               	movf	_power_ad,w	;volatile
  2038  0681  00D1               	movwf	___lmul@multiplicand
  2039  0682  0823               	movf	_power_ad+1,w	;volatile
  2040  0683  00D2               	movwf	___lmul@multiplicand+1
  2041  0684  01D3               	clrf	___lmul@multiplicand+2
  2042  0685  01D4               	clrf	___lmul@multiplicand+3
  2043  0686  26C2  118A         	fcall	___lmul
  2044  0688  0850               	movf	?___lmul+3,w
  2045  0689  00DE               	movwf	fanCtr@fan_temp+3	;volatile
  2046  068A  084F               	movf	?___lmul+2,w
  2047  068B  00DD               	movwf	fanCtr@fan_temp+2	;volatile
  2048  068C  084E               	movf	?___lmul+1,w
  2049  068D  00DC               	movwf	fanCtr@fan_temp+1	;volatile
  2050  068E  084D               	movf	?___lmul,w
  2051  068F  00DB               	movwf	fanCtr@fan_temp	;volatile
  2052  0690  300C               	movlw	12
  2053  0691                     u4215:	
  2054  0691  1003               	clrc
  2055  0692  0CDE               	rrf	fanCtr@fan_temp+3,f	;volatile
  2056  0693  0CDD               	rrf	fanCtr@fan_temp+2,f	;volatile
  2057  0694  0CDC               	rrf	fanCtr@fan_temp+1,f	;volatile
  2058  0695  0CDB               	rrf	fanCtr@fan_temp,f	;volatile
  2059  0696  3EFF               	addlw	-1
  2060  0697  1D03               	skipz
  2061  0698  2E91               	goto	u4215
  2062                           
  2063                           ;main.c: 540: fanValue = (unsigned int)(fan_temp);
  2064  0699  085C               	movf	fanCtr@fan_temp+1,w	;volatile
  2065  069A  00AB               	movwf	_fanValue+1
  2066  069B  085B               	movf	fanCtr@fan_temp,w	;volatile
  2067  069C  00AA               	movwf	_fanValue
  2068  069D                     l4299:	
  2069                           
  2070                           ;main.c: 541: }
  2071                           ;main.c: 542: }
  2072                           ;main.c: 543: if(fanValue > 1300)
  2073  069D  3005               	movlw	5
  2074  069E  022B               	subwf	_fanValue+1,w
  2075  069F  3015               	movlw	21
  2076  06A0  1903               	skipnz
  2077  06A1  022A               	subwf	_fanValue,w
  2078  06A2  1C03               	skipc
  2079  06A3  2EB0               	goto	l4307
  2080                           
  2081                           ;main.c: 544: {
  2082                           ;main.c: 545: if(++fanOverTime > 50)
  2083  06A4  3033               	movlw	51
  2084  06A5  0AC5               	incf	_fanOverTime,f
  2085  06A6  0245               	subwf	_fanOverTime,w
  2086  06A7  1C03               	skipc
  2087  06A8  2EB1               	goto	l4309
  2088  06A9  30C2               	movlw	194
  2089                           
  2090                           ;main.c: 546: {
  2091                           ;main.c: 547: fanOverTime = 0;
  2092  06AA  01C5               	clrf	_fanOverTime
  2093                           
  2094                           ;main.c: 548: workStep = 0;
  2095  06AB  01FB               	clrf	_workStep
  2096                           
  2097                           ;main.c: 549: shanshuoTime = 450;
  2098  06AC  00B0               	movwf	_shanshuoTime
  2099  06AD  3001               	movlw	1
  2100  06AE  00B1               	movwf	_shanshuoTime+1
  2101  06AF  2EB1               	goto	l4309
  2102  06B0                     l4307:	
  2103                           
  2104                           ;main.c: 552: else
  2105                           ;main.c: 553: {
  2106                           ;main.c: 554: fanOverTime = 0;
  2107  06B0  01C5               	clrf	_fanOverTime
  2108  06B1                     l4309:	
  2109                           
  2110                           ;main.c: 555: }
  2111                           ;main.c: 556: if(fanDuty < maxFanValue)
  2112  06B1  085A               	movf	fanCtr@maxFanValue,w
  2113  06B2  0247               	subwf	_fanDuty,w
  2114  06B3  1803               	skipnc
  2115  06B4  2EB7               	goto	l4313
  2116                           
  2117                           ;main.c: 557: {
  2118                           ;main.c: 558: fanDuty++;
  2119  06B5  0AC7               	incf	_fanDuty,f
  2120                           
  2121                           ;main.c: 559: }
  2122  06B6  2EBB               	goto	l4317
  2123  06B7                     l4313:	
  2124                           
  2125                           ;main.c: 560: else if(fanDuty > maxFanValue)
  2126  06B7  0847               	movf	_fanDuty,w
  2127  06B8  025A               	subwf	fanCtr@maxFanValue,w
  2128  06B9  1C03               	btfss	3,0
  2129                           
  2130                           ;main.c: 561: {
  2131                           ;main.c: 562: fanDuty--;
  2132  06BA  03C7               	decf	_fanDuty,f
  2133  06BB                     l4317:	
  2134                           
  2135                           ;main.c: 563: }
  2136                           ;main.c: 564: fanInit();
  2137  06BB  2F8E               	ljmp	l4069
  2138  06BC                     l4319:	
  2139                           ;main.c: 565: }
  2140                           
  2141                           
  2142                           ;main.c: 566: else
  2143                           ;main.c: 567: {
  2144                           ;main.c: 568: fanStop();
  2145  06BC  2799               	fcall	_fanStop
  2146                           
  2147                           ;main.c: 569: fanDuty = 0;
  2148  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  2149  06BE  01C7               	clrf	_fanDuty
  2150                           
  2151                           ;main.c: 570: PORTA &= 0xFD;
  2152  06BF  1683               	bsf	3,5	;RP0=1, select bank1
  2153  06C0  1086               	bcf	6,1	;volatile
  2154  06C1  0008               	return
  2155  06C2                     __end_of_fanCtr:	
  2156  06C2                     __ptext10:	
  2157 ;; *************** function ___lmul *****************
  2158 ;; Defined at:
  2159 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2162 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;  product         4    2[COMMON] unsigned long 
  2165 ;; Return value:  Size  Location     Type
  2166 ;;                  4    0[BANK0 ] unsigned long 
  2167 ;; Registers used:
  2168 ;;		wreg, status,2, status,0
  2169 ;; Tracked objects:
  2170 ;;		On entry : 300/0
  2171 ;;		On exit  : 300/0
  2172 ;;		Unchanged: 0/0
  2173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2174 ;;      Params:         0       8       0       0
  2175 ;;      Locals:         4       0       0       0
  2176 ;;      Temps:          0       0       0       0
  2177 ;;      Totals:         4       8       0       0
  2178 ;;Total ram usage:       12 bytes
  2179 ;; Hardware stack levels used:    1
  2180 ;; Hardware stack levels required when called:    1
  2181 ;; This function calls:
  2182 ;;		Nothing
  2183 ;; This function is called by:
  2184 ;;		_fanCtr
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           
  2189                           ;psect for function ___lmul
  2190  06C2                     ___lmul:	
  2191                           
  2192                           ;incstack = 0
  2193                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2194  06C2  01F2               	clrf	___lmul@product
  2195  06C3  01F3               	clrf	___lmul@product+1
  2196  06C4  01F4               	clrf	___lmul@product+2
  2197  06C5  01F5               	clrf	___lmul@product+3
  2198  06C6                     l1372:	
  2199  06C6  1C4D               	btfss	___lmul@multiplier,0
  2200  06C7  2EDC               	goto	l4091
  2201  06C8  0851               	movf	___lmul@multiplicand,w
  2202  06C9  07F2               	addwf	___lmul@product,f
  2203  06CA  0852               	movf	___lmul@multiplicand+1,w
  2204  06CB  1103               	clrz
  2205  06CC  1803               	skipnc
  2206  06CD  3E01               	addlw	1
  2207  06CE  1D03               	btfss	3,2
  2208  06CF  07F3               	addwf	___lmul@product+1,f
  2209  06D0  0853               	movf	___lmul@multiplicand+2,w
  2210  06D1  1103               	clrz
  2211  06D2  1803               	skipnc
  2212  06D3  3E01               	addlw	1
  2213  06D4  1D03               	btfss	3,2
  2214  06D5  07F4               	addwf	___lmul@product+2,f
  2215  06D6  0854               	movf	___lmul@multiplicand+3,w
  2216  06D7  1103               	clrz
  2217  06D8  1803               	skipnc
  2218  06D9  3E01               	addlw	1
  2219  06DA  1D03               	btfss	3,2
  2220  06DB  07F5               	addwf	___lmul@product+3,f
  2221  06DC                     l4091:	
  2222  06DC  1003               	clrc
  2223  06DD  0DD1               	rlf	___lmul@multiplicand,f
  2224  06DE  0DD2               	rlf	___lmul@multiplicand+1,f
  2225  06DF  0DD3               	rlf	___lmul@multiplicand+2,f
  2226  06E0  0DD4               	rlf	___lmul@multiplicand+3,f
  2227  06E1  1003               	clrc
  2228  06E2  0CD0               	rrf	___lmul@multiplier+3,f
  2229  06E3  0CCF               	rrf	___lmul@multiplier+2,f
  2230  06E4  0CCE               	rrf	___lmul@multiplier+1,f
  2231  06E5  0CCD               	rrf	___lmul@multiplier,f
  2232  06E6  0850               	movf	___lmul@multiplier+3,w
  2233  06E7  044F               	iorwf	___lmul@multiplier+2,w
  2234  06E8  044E               	iorwf	___lmul@multiplier+1,w
  2235  06E9  044D               	iorwf	___lmul@multiplier,w
  2236  06EA  1D03               	skipz
  2237  06EB  2EC6               	goto	l1372
  2238  06EC  0875               	movf	___lmul@product+3,w
  2239  06ED  00D0               	movwf	?___lmul+3
  2240  06EE  0874               	movf	___lmul@product+2,w
  2241  06EF  00CF               	movwf	?___lmul+2
  2242  06F0  0873               	movf	___lmul@product+1,w
  2243  06F1  00CE               	movwf	?___lmul+1
  2244  06F2  0872               	movf	___lmul@product,w
  2245  06F3  00CD               	movwf	?___lmul
  2246  06F4  0008               	return
  2247  06F5                     __end_of___lmul:	
  2248  06F5                     __ptext5:	
  2249 ;; *************** function _keyLedCtr *****************
  2250 ;; Defined at:
  2251 ;;		line 401 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;		None
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;		None
  2256 ;; Return value:  Size  Location     Type
  2257 ;;                  1    wreg      void 
  2258 ;; Registers used:
  2259 ;;		wreg, status,2, status,0, pclath, cstack
  2260 ;; Tracked objects:
  2261 ;;		On entry : 300/100
  2262 ;;		On exit  : 300/100
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2265 ;;      Params:         0       0       0       0
  2266 ;;      Locals:         0       0       0       0
  2267 ;;      Temps:          0       0       0       0
  2268 ;;      Totals:         0       0       0       0
  2269 ;;Total ram usage:        0 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:    2
  2272 ;; This function calls:
  2273 ;;		___lwmod
  2274 ;; This function is called by:
  2275 ;;		_workCtr
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279                           
  2280                           ;psect for function _keyLedCtr
  2281  06F5                     _keyLedCtr:	
  2282                           
  2283                           ;main.c: 403: if(shanshuoTime > 0)
  2284                           
  2285                           ;incstack = 0
  2286                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2287  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  2288  06F6  0830               	movf	_shanshuoTime,w
  2289  06F7  0431               	iorwf	_shanshuoTime+1,w
  2290  06F8  1903               	btfsc	3,2
  2291  06F9  2F13               	goto	l4237
  2292                           
  2293                           ;main.c: 404: {
  2294                           ;main.c: 405: shanshuoTime--;
  2295  06FA  3001               	movlw	1
  2296  06FB  02B0               	subwf	_shanshuoTime,f
  2297  06FC  3000               	movlw	0
  2298  06FD  1C03               	skipc
  2299  06FE  03B1               	decf	_shanshuoTime+1,f
  2300  06FF  02B1               	subwf	_shanshuoTime+1,f
  2301                           
  2302                           ;main.c: 406: if((shanshuoTime % 150) < 75)
  2303  0700  3096               	movlw	150
  2304  0701  00F2               	movwf	___lwmod@divisor
  2305  0702  01F3               	clrf	___lwmod@divisor+1
  2306  0703  0831               	movf	_shanshuoTime+1,w
  2307  0704  00F5               	movwf	___lwmod@dividend+1
  2308  0705  0830               	movf	_shanshuoTime,w
  2309  0706  00F4               	movwf	___lwmod@dividend
  2310  0707  276A  118A         	fcall	___lwmod
  2311  0709  3000               	movlw	0
  2312  070A  0273               	subwf	?___lwmod+1,w
  2313  070B  304B               	movlw	75
  2314  070C  1903               	skipnz
  2315  070D  0272               	subwf	?___lwmod,w
  2316  070E  1803               	skipnc
  2317  070F  2F16               	goto	l1012
  2318  0710                     l4235:	
  2319                           
  2320                           ;main.c: 407: {
  2321                           ;main.c: 408: PORTC |= 0x01;
  2322  0710  1703               	bsf	3,6	;RP1=1, select bank2
  2323  0711  1406               	bsf	6,0	;volatile
  2324                           
  2325                           ;main.c: 409: }
  2326  0712  2F18               	goto	l4241
  2327  0713                     l4237:	
  2328                           
  2329                           ;main.c: 415: else if(workStep > 0)
  2330  0713  087B               	movf	_workStep,w
  2331  0714  1903               	btfsc	3,2
  2332  0715  2F10               	goto	l4235
  2333  0716                     l1012:	
  2334                           
  2335                           ;main.c: 410: else
  2336                           ;main.c: 411: {
  2337                           ;main.c: 412: PORTC &= 0xFE;
  2338  0716  1703               	bsf	3,6	;RP1=1, select bank2
  2339  0717  1006               	bcf	6,0	;volatile
  2340  0718                     l4241:	
  2341                           
  2342                           ;main.c: 422: }
  2343                           ;main.c: 424: if(shanshuoTime2 > 0)
  2344  0718  1303               	bcf	3,6	;RP1=0, select bank0
  2345  0719  082E               	movf	_shanshuoTime2,w
  2346  071A  042F               	iorwf	_shanshuoTime2+1,w
  2347  071B  1903               	btfsc	3,2
  2348  071C  2F36               	goto	l4249
  2349                           
  2350                           ;main.c: 425: {
  2351                           ;main.c: 426: shanshuoTime2--;
  2352  071D  3001               	movlw	1
  2353  071E  02AE               	subwf	_shanshuoTime2,f
  2354  071F  3000               	movlw	0
  2355  0720  1C03               	skipc
  2356  0721  03AF               	decf	_shanshuoTime2+1,f
  2357  0722  02AF               	subwf	_shanshuoTime2+1,f
  2358                           
  2359                           ;main.c: 427: if((shanshuoTime2 % 150) < 75)
  2360  0723  3096               	movlw	150
  2361  0724  00F2               	movwf	___lwmod@divisor
  2362  0725  01F3               	clrf	___lwmod@divisor+1
  2363  0726  082F               	movf	_shanshuoTime2+1,w
  2364  0727  00F5               	movwf	___lwmod@dividend+1
  2365  0728  082E               	movf	_shanshuoTime2,w
  2366  0729  00F4               	movwf	___lwmod@dividend
  2367  072A  276A  118A         	fcall	___lwmod
  2368  072C  3000               	movlw	0
  2369  072D  0273               	subwf	?___lwmod+1,w
  2370  072E  304B               	movlw	75
  2371  072F  1903               	skipnz
  2372  0730  0272               	subwf	?___lwmod,w
  2373  0731  1803               	skipnc
  2374  0732  2F39               	goto	l1018
  2375  0733                     l4247:	
  2376                           
  2377                           ;main.c: 428: {
  2378                           ;main.c: 429: PORTC |= 0x02;
  2379  0733  1703               	bsf	3,6	;RP1=1, select bank2
  2380  0734  1486               	bsf	6,1	;volatile
  2381                           
  2382                           ;main.c: 430: }
  2383  0735  2F3B               	goto	l4253
  2384  0736                     l4249:	
  2385                           
  2386                           ;main.c: 436: else if(wuhuaFlag > 0)
  2387  0736  0848               	movf	_wuhuaFlag,w
  2388  0737  1903               	btfsc	3,2
  2389  0738  2F33               	goto	l4247
  2390  0739                     l1018:	
  2391                           
  2392                           ;main.c: 431: else
  2393                           ;main.c: 432: {
  2394                           ;main.c: 433: PORTC &= 0xFD;
  2395  0739  1703               	bsf	3,6	;RP1=1, select bank2
  2396  073A  1086               	bcf	6,1	;volatile
  2397  073B                     l4253:	
  2398                           
  2399                           ;main.c: 443: }
  2400                           ;main.c: 444: if(shanshuoTime3 > 0)
  2401  073B  1303               	bcf	3,6	;RP1=0, select bank0
  2402  073C  082C               	movf	_shanshuoTime3,w
  2403  073D  042D               	iorwf	_shanshuoTime3+1,w
  2404  073E  1903               	btfsc	3,2
  2405  073F  2F5C               	goto	l4261
  2406                           
  2407                           ;main.c: 445: {
  2408                           ;main.c: 446: shanshuoTime3--;
  2409  0740  3001               	movlw	1
  2410  0741  02AC               	subwf	_shanshuoTime3,f
  2411  0742  3000               	movlw	0
  2412  0743  1C03               	skipc
  2413  0744  03AD               	decf	_shanshuoTime3+1,f
  2414  0745  02AD               	subwf	_shanshuoTime3+1,f
  2415                           
  2416                           ;main.c: 447: if((shanshuoTime3 % 150) < 75)
  2417  0746  3096               	movlw	150
  2418  0747  00F2               	movwf	___lwmod@divisor
  2419  0748  01F3               	clrf	___lwmod@divisor+1
  2420  0749  082D               	movf	_shanshuoTime3+1,w
  2421  074A  00F5               	movwf	___lwmod@dividend+1
  2422  074B  082C               	movf	_shanshuoTime3,w
  2423  074C  00F4               	movwf	___lwmod@dividend
  2424  074D  276A  118A         	fcall	___lwmod
  2425  074F  3000               	movlw	0
  2426  0750  0273               	subwf	?___lwmod+1,w
  2427  0751  304B               	movlw	75
  2428  0752  1903               	skipnz
  2429  0753  0272               	subwf	?___lwmod,w
  2430  0754  1803               	skipnc
  2431  0755  2F59               	goto	l1024
  2432  0756                     l4259:	
  2433                           
  2434                           ;main.c: 448: {
  2435                           ;main.c: 449: PORTA |= 0x01;
  2436  0756  1683               	bsf	3,5	;RP0=1, select bank1
  2437  0757  1406               	bsf	6,0	;volatile
  2438                           
  2439                           ;main.c: 450: }
  2440  0758  0008               	return
  2441  0759                     l1024:	
  2442                           
  2443                           ;main.c: 451: else
  2444                           ;main.c: 452: {
  2445                           ;main.c: 453: PORTA &= 0xFE;
  2446  0759  1683               	bsf	3,5	;RP0=1, select bank1
  2447  075A  1006               	bcf	6,0	;volatile
  2448  075B  0008               	return
  2449  075C                     l4261:	
  2450                           
  2451                           ;main.c: 456: else if(powerFlag)
  2452  075C  083E               	movf	_powerFlag,w
  2453  075D  1D03               	btfss	3,2
  2454  075E  2F59               	goto	l1024
  2455                           
  2456                           ;main.c: 460: else if(chrgFlag)
  2457  075F  0844               	movf	_chrgFlag,w
  2458  0760  1903               	btfsc	3,2
  2459  0761  2F56               	goto	l4259
  2460                           
  2461                           ;main.c: 461: {
  2462                           ;main.c: 462: if(chrgFullFlag || count1s < 50)
  2463  0762  0843               	movf	_chrgFullFlag,w
  2464  0763  1D03               	btfss	3,2
  2465  0764  2F59               	goto	l1024
  2466  0765  3032               	movlw	50
  2467  0766  0249               	subwf	_count1s,w
  2468  0767  1C03               	btfss	3,0
  2469  0768  2F59               	goto	l1024
  2470  0769  2F56               	goto	l4259
  2471  076A                     __end_of_keyLedCtr:	
  2472  076A                     __ptext6:	
  2473 ;; *************** function ___lwmod *****************
  2474 ;; Defined at:
  2475 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2476 ;; Parameters:    Size  Location     Type
  2477 ;;  divisor         2    2[COMMON] unsigned int 
  2478 ;;  dividend        2    4[COMMON] unsigned int 
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;  counter         1    6[COMMON] unsigned char 
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  2    2[COMMON] unsigned int 
  2483 ;; Registers used:
  2484 ;;		wreg, status,2, status,0
  2485 ;; Tracked objects:
  2486 ;;		On entry : 300/0
  2487 ;;		On exit  : 300/0
  2488 ;;		Unchanged: 300/0
  2489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2490 ;;      Params:         4       0       0       0
  2491 ;;      Locals:         1       0       0       0
  2492 ;;      Temps:          0       0       0       0
  2493 ;;      Totals:         5       0       0       0
  2494 ;;Total ram usage:        5 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    1
  2497 ;; This function calls:
  2498 ;;		Nothing
  2499 ;; This function is called by:
  2500 ;;		_keyLedCtr
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           
  2505                           ;psect for function ___lwmod
  2506  076A                     ___lwmod:	
  2507                           
  2508                           ;incstack = 0
  2509                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2510  076A  0872               	movf	___lwmod@divisor,w
  2511  076B  0473               	iorwf	___lwmod@divisor+1,w
  2512  076C  1903               	btfsc	3,2
  2513  076D  2F89               	goto	l4139
  2514  076E  01F6               	clrf	___lwmod@counter
  2515  076F                     L1:	
  2516  076F  0AF6               	incf	___lwmod@counter,f
  2517  0770  1BF3               	btfsc	___lwmod@divisor+1,7
  2518  0771  2F76               	goto	l4131
  2519  0772  1003               	clrc
  2520  0773  0DF2               	rlf	___lwmod@divisor,f
  2521  0774  0DF3               	rlf	___lwmod@divisor+1,f
  2522  0775  2F6F               	goto	L1
  2523  0776                     l4131:	
  2524  0776  0873               	movf	___lwmod@divisor+1,w
  2525  0777  0275               	subwf	___lwmod@dividend+1,w
  2526  0778  1D03               	skipz
  2527  0779  2F7C               	goto	u3925
  2528  077A  0872               	movf	___lwmod@divisor,w
  2529  077B  0274               	subwf	___lwmod@dividend,w
  2530  077C                     u3925:	
  2531  077C  1C03               	skipc
  2532  077D  2F85               	goto	L2
  2533  077E  0872               	movf	___lwmod@divisor,w
  2534  077F  02F4               	subwf	___lwmod@dividend,f
  2535  0780  0873               	movf	___lwmod@divisor+1,w
  2536  0781  1C03               	skipc
  2537  0782  03F5               	decf	___lwmod@dividend+1,f
  2538  0783  02F5               	subwf	___lwmod@dividend+1,f
  2539  0784  1003               	clrc
  2540  0785                     L2:	
  2541  0785  0CF3               	rrf	___lwmod@divisor+1,f
  2542  0786  0CF2               	rrf	___lwmod@divisor,f
  2543  0787  0BF6               	decfsz	___lwmod@counter,f
  2544  0788  2F76               	goto	l4131
  2545  0789                     l4139:	
  2546  0789  0875               	movf	___lwmod@dividend+1,w
  2547  078A  00F3               	movwf	?___lwmod+1
  2548  078B  0874               	movf	___lwmod@dividend,w
  2549  078C  00F2               	movwf	?___lwmod
  2550  078D  0008               	return
  2551  078E                     __end_of___lwmod:	
  2552  078E                     __ptext9:	
  2553 ;; *************** function _fanInit *****************
  2554 ;; Defined at:
  2555 ;;		line 497 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2556 ;; Parameters:    Size  Location     Type
  2557 ;;		None
  2558 ;; Auto vars:     Size  Location     Type
  2559 ;;		None
  2560 ;; Return value:  Size  Location     Type
  2561 ;;                  1    wreg      void 
  2562 ;; Registers used:
  2563 ;;		wreg, status,2, status,0
  2564 ;; Tracked objects:
  2565 ;;		On entry : 300/0
  2566 ;;		On exit  : 300/0
  2567 ;;		Unchanged: 0/0
  2568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2569 ;;      Params:         0       0       0       0
  2570 ;;      Locals:         0       0       0       0
  2571 ;;      Temps:          0       0       0       0
  2572 ;;      Totals:         0       0       0       0
  2573 ;;Total ram usage:        0 bytes
  2574 ;; Hardware stack levels used:    1
  2575 ;; Hardware stack levels required when called:    1
  2576 ;; This function calls:
  2577 ;;		Nothing
  2578 ;; This function is called by:
  2579 ;;		_fanCtr
  2580 ;; This function uses a non-reentrant model
  2581 ;;
  2582                           
  2583                           
  2584                           ;psect for function _fanInit
  2585  078E                     _fanInit:	
  2586  078E                     l4069:	
  2587                           ;incstack = 0
  2588                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2589                           
  2590                           
  2591                           ;main.c: 500: PWMTH = 0x00;
  2592  078E  0198               	clrf	24	;volatile
  2593                           
  2594                           ;main.c: 501: PWMT4L = 73;
  2595  078F  3049               	movlw	73
  2596  0790  009C               	movwf	28	;volatile
  2597                           
  2598                           ;main.c: 502: PWMD4L = fanDuty;
  2599  0791  0847               	movf	_fanDuty,w
  2600  0792  009B               	movwf	27	;volatile
  2601                           
  2602                           ;main.c: 503: PWMCON1 = 0xC0;
  2603  0793  30C0               	movlw	192
  2604  0794  0096               	movwf	22	;volatile
  2605                           
  2606                           ;main.c: 504: PWMCON2 = 0x00;
  2607  0795  019D               	clrf	29	;volatile
  2608                           
  2609                           ;main.c: 505: PWMCON0 |= 0x30;
  2610  0796  3030               	movlw	48
  2611  0797  0495               	iorwf	21,f	;volatile
  2612  0798  0008               	return
  2613  0799                     __end_of_fanInit:	
  2614  0799                     __ptext8:	
  2615 ;; *************** function _fanStop *****************
  2616 ;; Defined at:
  2617 ;;		line 508 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;		None
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      void 
  2624 ;; Registers used:
  2625 ;;		status,2
  2626 ;; Tracked objects:
  2627 ;;		On entry : 300/100
  2628 ;;		On exit  : 300/100
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2631 ;;      Params:         0       0       0       0
  2632 ;;      Locals:         0       0       0       0
  2633 ;;      Temps:          0       0       0       0
  2634 ;;      Totals:         0       0       0       0
  2635 ;;Total ram usage:        0 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    1
  2638 ;; This function calls:
  2639 ;;		Nothing
  2640 ;; This function is called by:
  2641 ;;		_fanCtr
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           
  2646                           ;psect for function _fanStop
  2647  0799                     _fanStop:	
  2648                           
  2649                           ;main.c: 510: PWMD4L = 0;
  2650                           
  2651                           ;incstack = 0
  2652                           ; Regs used in _fanStop: [status,2]
  2653  0799  1283               	bcf	3,5	;RP0=0, select bank0
  2654  079A  019B               	clrf	27	;volatile
  2655                           
  2656                           ;main.c: 511: PWMCON0 &= 0xEF;
  2657  079B  1215               	bcf	21,4	;volatile
  2658                           
  2659                           ;main.c: 512: PORTA &= 0xEF;
  2660  079C  1683               	bsf	3,5	;RP0=1, select bank1
  2661  079D  1206               	bcf	6,4	;volatile
  2662  079E  0008               	return
  2663  079F                     __end_of_fanStop:	
  2664  079F                     PL6:	
  2665  079F  00F4               	movwf	??_ADC_Sample+1
  2666  07A0  01F5               	clrf	??_ADC_Sample+2
  2667  07A1  01F6               	clrf	??_ADC_Sample+3
  2668  07A2  0873               	movf	??_ADC_Sample,w
  2669  07A3  02D0               	subwf	ADC_Sample@adsum,f	;volatile
  2670  07A4  0874               	movf	??_ADC_Sample+1,w
  2671  07A5  1C03               	skipc
  2672  07A6  0F74               	incfsz	??_ADC_Sample+1,w
  2673  07A7  02D1               	subwf	ADC_Sample@adsum+1,f	;volatile
  2674  07A8  0875               	movf	??_ADC_Sample+2,w
  2675  07A9  1C03               	skipc
  2676  07AA  0F75               	incfsz	??_ADC_Sample+2,w
  2677  07AB  02D2               	subwf	ADC_Sample@adsum+2,f	;volatile
  2678  07AC  0876               	movf	??_ADC_Sample+3,w
  2679  07AD  0008               	return
  2680  07AE                     __end_ofPL6:	
  2681  07AE                     PL16:	
  2682  07AE  01D0               	clrf	ADC_Sample@adsum	;volatile
  2683  07AF  01D1               	clrf	ADC_Sample@adsum+1	;volatile
  2684  07B0  01D2               	clrf	ADC_Sample@adsum+2	;volatile
  2685  07B1  01D3               	clrf	ADC_Sample@adsum+3	;volatile
  2686  07B2  01D4               	clrf	ADC_Sample@admin	;volatile
  2687  07B3  01D5               	clrf	ADC_Sample@admin+1	;volatile
  2688  07B4  01D6               	clrf	ADC_Sample@admax	;volatile
  2689  07B5  01D7               	clrf	ADC_Sample@admax+1	;volatile
  2690  07B6  0008               	return
  2691  07B7                     __end_ofPL16:	
  2692  07B7                     PL24:	
  2693  07B7  0862               	movf	___fttol@f1,w
  2694  07B8  00E6               	movwf	??___fttol
  2695  07B9  0863               	movf	___fttol@f1+1,w
  2696  07BA  00E7               	movwf	??___fttol+1
  2697  07BB  0864               	movf	___fttol@f1+2,w
  2698  07BC  00E8               	movwf	??___fttol+2
  2699  07BD  0008               	return
  2700  07BE                     __end_ofPL24:	
  2701  07BE                     PL34:	
  2702  07BE  1003               	clrc
  2703  07BF  0CF4               	rrf	___ftpack@arg+2,f
  2704  07C0  0CF3               	rrf	___ftpack@arg+1,f
  2705  07C1  0CF2               	rrf	___ftpack@arg,f
  2706  07C2  0008               	return
  2707  07C3                     __end_ofPL34:	
  2708  07C3                     PL38:	
  2709  07C3  0859               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2710  07C4  00D7               	movwf	ADC_Sample@admax+1	;volatile
  2711  07C5  0858               	movf	ADC_Sample@ad_temp,w	;volatile
  2712  07C6  00D6               	movwf	ADC_Sample@admax	;volatile
  2713  07C7  0008               	return
  2714  07C8                     __end_ofPL38:	
  2715  07C8                     PL40:	
  2716  07C8  01D3               	clrf	?___ftdiv
  2717  07C9  01D4               	clrf	?___ftdiv+1
  2718  07CA  01D5               	clrf	?___ftdiv+2
  2719  07CB  0008               	return
  2720  07CC                     __end_ofPL40:	
  2721                           
  2722                           	psect	text2
  2723  0E7D                     __ptext2:	
  2724 ;; *************** function _wuhuaCtr *****************
  2725 ;; Defined at:
  2726 ;;		line 574 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;		None
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;		None
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  1    wreg      void 
  2733 ;; Registers used:
  2734 ;;		wreg, status,2, status,0, pclath, cstack
  2735 ;; Tracked objects:
  2736 ;;		On entry : 200/100
  2737 ;;		On exit  : 200/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2740 ;;      Params:         0       0       0       0
  2741 ;;      Locals:         0       0       0       0
  2742 ;;      Temps:          0       0       0       0
  2743 ;;      Totals:         0       0       0       0
  2744 ;;Total ram usage:        0 bytes
  2745 ;; Hardware stack levels used:    1
  2746 ;; Hardware stack levels required when called:    2
  2747 ;; This function calls:
  2748 ;;		_pwmInit
  2749 ;;		_pwmStop
  2750 ;; This function is called by:
  2751 ;;		_workCtr
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           
  2756                           ;psect for function _wuhuaCtr
  2757  0E7D                     _wuhuaCtr:	
  2758                           
  2759                           ;main.c: 576: if(count1s == 0)
  2760                           
  2761                           ;incstack = 0
  2762                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
  2763  0E7D  1283               	bcf	3,5	;RP0=0, select bank0
  2764  0E7E  0849               	movf	_count1s,w
  2765  0E7F  1D03               	btfss	3,2
  2766  0E80  2E98               	goto	l4343
  2767                           
  2768                           ;main.c: 577: {
  2769                           ;main.c: 578: if(++count10s >= 20)
  2770  0E81  3014               	movlw	20
  2771  0E82  0AC6               	incf	_count10s,f
  2772  0E83  0246               	subwf	_count10s,w
  2773  0E84  1803               	btfsc	3,0
  2774                           
  2775                           ;main.c: 579: {
  2776                           ;main.c: 580: count10s = 0;
  2777  0E85  01C6               	clrf	_count10s
  2778                           
  2779                           ;main.c: 581: }
  2780                           ;main.c: 582: if(workStep == 0 && wuhuaFlag == 0 && powerFlag > 0)
  2781  0E86  087B               	movf	_workStep,w
  2782  0E87  1D03               	btfss	3,2
  2783  0E88  2E97               	goto	l4341
  2784  0E89  0848               	movf	_wuhuaFlag,w
  2785  0E8A  1D03               	btfss	3,2
  2786  0E8B  2E97               	goto	l4341
  2787  0E8C  083E               	movf	_powerFlag,w
  2788  0E8D  1903               	btfsc	3,2
  2789  0E8E  2E97               	goto	l4341
  2790                           
  2791                           ;main.c: 583: {
  2792                           ;main.c: 584: if(++closeTime > 200)
  2793  0E8F  30C9               	movlw	201
  2794  0E90  0ABC               	incf	_closeTime,f
  2795  0E91  023C               	subwf	_closeTime,w
  2796  0E92  1C03               	skipc
  2797  0E93  2E98               	goto	l4343
  2798                           
  2799                           ;main.c: 585: {
  2800                           ;main.c: 586: closeTime = 0;
  2801  0E94  01BC               	clrf	_closeTime
  2802                           
  2803                           ;main.c: 587: powerFlag = 0;
  2804  0E95  01BE               	clrf	_powerFlag
  2805  0E96  2E98               	goto	l4343
  2806  0E97                     l4341:	
  2807                           
  2808                           ;main.c: 590: else
  2809                           ;main.c: 591: {
  2810                           ;main.c: 592: closeTime = 0;
  2811  0E97  01BC               	clrf	_closeTime
  2812  0E98                     l4343:	
  2813                           
  2814                           ;main.c: 593: }
  2815                           ;main.c: 594: }
  2816                           ;main.c: 595: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 10))
  2817  0E98  0348               	decf	_wuhuaFlag,w
  2818  0E99  1903               	btfsc	3,2
  2819  0E9A  2EA3               	goto	l4349
  2820  0E9B  3002               	movlw	2
  2821  0E9C  0648               	xorwf	_wuhuaFlag,w
  2822  0E9D  1D03               	btfss	3,2
  2823  0E9E  2EA4               	goto	l4351
  2824  0E9F  300A               	movlw	10
  2825  0EA0  0246               	subwf	_count10s,w
  2826  0EA1  1803               	skipnc
  2827  0EA2  2EA4               	goto	l4351
  2828  0EA3                     l4349:	
  2829                           
  2830                           ;main.c: 596: {
  2831                           ;main.c: 597: pwmInit();
  2832  0EA3  2EA5               	ljmp	l4053
  2833  0EA4                     l4351:	
  2834                           ;main.c: 626: }
  2835                           
  2836                           
  2837                           ;main.c: 627: else
  2838                           ;main.c: 628: {
  2839                           ;main.c: 629: pwmStop();
  2840  0EA4  2EB3               	ljmp	l4063
  2841  0EA5                     __end_of_wuhuaCtr:	
  2842  0EA5                     __ptext4:	
  2843 ;; *************** function _pwmInit *****************
  2844 ;; Defined at:
  2845 ;;		line 478 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;		None
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;		None
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      void 
  2852 ;; Registers used:
  2853 ;;		wreg, status,2, status,0
  2854 ;; Tracked objects:
  2855 ;;		On entry : 300/0
  2856 ;;		On exit  : 300/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2859 ;;      Params:         0       0       0       0
  2860 ;;      Locals:         0       0       0       0
  2861 ;;      Temps:          0       0       0       0
  2862 ;;      Totals:         0       0       0       0
  2863 ;;Total ram usage:        0 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    1
  2866 ;; This function calls:
  2867 ;;		Nothing
  2868 ;; This function is called by:
  2869 ;;		_wuhuaCtr
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           
  2874                           ;psect for function _pwmInit
  2875  0EA5                     _pwmInit:	
  2876  0EA5                     l4053:	
  2877                           ;incstack = 0
  2878                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2879                           
  2880                           
  2881                           ;main.c: 481: PWMTH = 0x00;
  2882  0EA5  0198               	clrf	24	;volatile
  2883                           
  2884                           ;main.c: 482: PWMTL = 73;
  2885  0EA6  3049               	movlw	73
  2886  0EA7  0097               	movwf	23	;volatile
  2887                           
  2888                           ;main.c: 483: PWMD23H = 0x00;
  2889  0EA8  1683               	bsf	3,5	;RP0=1, select bank1
  2890  0EA9  019E               	clrf	30	;volatile
  2891                           
  2892                           ;main.c: 484: PWMD3L = 32;
  2893  0EAA  3020               	movlw	32
  2894  0EAB  009C               	movwf	28	;volatile
  2895                           
  2896                           ;main.c: 485: PWMCON1 = 0xC0;
  2897  0EAC  30C0               	movlw	192
  2898  0EAD  1283               	bcf	3,5	;RP0=0, select bank0
  2899  0EAE  0096               	movwf	22	;volatile
  2900                           
  2901                           ;main.c: 486: PWMCON2 = 0x00;
  2902  0EAF  019D               	clrf	29	;volatile
  2903                           
  2904                           ;main.c: 487: PWMCON0 |= 0x28;
  2905  0EB0  3028               	movlw	40
  2906  0EB1  0495               	iorwf	21,f	;volatile
  2907  0EB2  0008               	return
  2908  0EB3                     __end_of_pwmInit:	
  2909  0EB3                     __ptext3:	
  2910 ;; *************** function _pwmStop *****************
  2911 ;; Defined at:
  2912 ;;		line 490 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;		None
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;		None
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  1    wreg      void 
  2919 ;; Registers used:
  2920 ;;		status,2
  2921 ;; Tracked objects:
  2922 ;;		On entry : 300/0
  2923 ;;		On exit  : 300/100
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2926 ;;      Params:         0       0       0       0
  2927 ;;      Locals:         0       0       0       0
  2928 ;;      Temps:          0       0       0       0
  2929 ;;      Totals:         0       0       0       0
  2930 ;;Total ram usage:        0 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    1
  2933 ;; This function calls:
  2934 ;;		Nothing
  2935 ;; This function is called by:
  2936 ;;		_wuhuaCtr
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           
  2941                           ;psect for function _pwmStop
  2942  0EB3                     _pwmStop:	
  2943  0EB3                     l4063:	
  2944                           ;incstack = 0
  2945                           ; Regs used in _pwmStop: [status,2]
  2946                           
  2947                           
  2948                           ;main.c: 492: PWMD3L = 0;
  2949  0EB3  1683               	bsf	3,5	;RP0=1, select bank1
  2950  0EB4  019C               	clrf	28	;volatile
  2951                           
  2952                           ;main.c: 493: PWMCON0 &= 0xF7;
  2953  0EB5  1283               	bcf	3,5	;RP0=0, select bank0
  2954  0EB6  1195               	bcf	21,3	;volatile
  2955                           
  2956                           ;main.c: 494: PORTA &= 0xF7;
  2957  0EB7  1683               	bsf	3,5	;RP0=1, select bank1
  2958  0EB8  1186               	bcf	6,3	;volatile
  2959  0EB9  0008               	return
  2960  0EBA                     __end_of_pwmStop:	
  2961                           
  2962                           	psect	text12
  2963  0F76                     __ptext12:	
  2964 ;; *************** function _bujinCtr *****************
  2965 ;; Defined at:
  2966 ;;		line 633 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;		None
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;  tempStep        1    4[COMMON] unsigned char 
  2971 ;; Return value:  Size  Location     Type
  2972 ;;                  1    wreg      void 
  2973 ;; Registers used:
  2974 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2975 ;; Tracked objects:
  2976 ;;		On entry : 200/100
  2977 ;;		On exit  : 300/0
  2978 ;;		Unchanged: 0/0
  2979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2980 ;;      Params:         0       0       0       0
  2981 ;;      Locals:         1       0       0       0
  2982 ;;      Temps:          2       0       0       0
  2983 ;;      Totals:         3       0       0       0
  2984 ;;Total ram usage:        3 bytes
  2985 ;; Hardware stack levels used:    1
  2986 ;; Hardware stack levels required when called:    1
  2987 ;; This function calls:
  2988 ;;		Nothing
  2989 ;; This function is called by:
  2990 ;;		_workCtr
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           
  2995                           ;psect for function _bujinCtr
  2996  0F76                     _bujinCtr:	
  2997  0F76                     l4353:	
  2998                           ;incstack = 0
  2999                           ; Regs used in _bujinCtr: [wreg-fsr0h+status,2+status,0]
  3000                           
  3001                           
  3002                           ;main.c: 635: if(bujinFlag || motorStep > 0)
  3003  0F76  1283               	bcf	3,5	;RP0=0, select bank0
  3004  0F77  083F               	movf	_bujinFlag,w
  3005  0F78  1D03               	btfss	3,2
  3006  0F79  2F7E               	goto	l4357
  3007  0F7A  0828               	movf	_motorStep,w
  3008  0F7B  0429               	iorwf	_motorStep+1,w
  3009  0F7C  1903               	btfsc	3,2
  3010  0F7D  2FEA               	goto	l4389
  3011  0F7E                     l4357:	
  3012                           
  3013                           ;main.c: 636: {
  3014                           ;main.c: 637: if(bujinFlag == 1)
  3015  0F7E  0B3F               	decfsz	_bujinFlag,w
  3016  0F7F  2F82               	goto	l4361
  3017                           
  3018                           ;main.c: 638: {
  3019                           ;main.c: 639: maxMotorStep = 512;
  3020  0F80  3002               	movlw	2
  3021  0F81  2F87               	goto	L5
  3022  0F82                     l4361:	
  3023                           ;main.c: 640: }
  3024                           
  3025                           
  3026                           ;main.c: 641: else if(bujinFlag == 2)
  3027  0F82  3002               	movlw	2
  3028  0F83  063F               	xorwf	_bujinFlag,w
  3029  0F84  1D03               	btfss	3,2
  3030  0F85  2F89               	goto	l4365
  3031                           
  3032                           ;main.c: 642: {
  3033                           ;main.c: 643: maxMotorStep = 1024;
  3034  0F86  3004               	movlw	4
  3035  0F87                     L5:	
  3036  0F87  01A6               	clrf	_maxMotorStep
  3037  0F88  2F90               	goto	L4
  3038  0F89                     l4365:	
  3039                           ;main.c: 644: }
  3040                           
  3041                           
  3042                           ;main.c: 645: else if(bujinFlag == 3)
  3043  0F89  3003               	movlw	3
  3044  0F8A  063F               	xorwf	_bujinFlag,w
  3045  0F8B  1D03               	btfss	3,2
  3046  0F8C  2F91               	goto	l4369
  3047                           
  3048                           ;main.c: 646: {
  3049                           ;main.c: 647: maxMotorStep = 1360;
  3050  0F8D  3050               	movlw	80
  3051  0F8E  00A6               	movwf	_maxMotorStep
  3052  0F8F  3005               	movlw	5
  3053  0F90                     L4:	
  3054  0F90  00A7               	movwf	_maxMotorStep+1
  3055  0F91                     l4369:	
  3056                           
  3057                           ;main.c: 648: }
  3058                           ;main.c: 649: if(++motorStep >= (maxMotorStep*2))
  3059  0F91  0827               	movf	_maxMotorStep+1,w
  3060  0F92  00F3               	movwf	??_bujinCtr+1
  3061  0F93  0826               	movf	_maxMotorStep,w
  3062  0F94  00F2               	movwf	??_bujinCtr
  3063  0F95  1003               	clrc
  3064  0F96  0DF2               	rlf	??_bujinCtr,f
  3065  0F97  0DF3               	rlf	??_bujinCtr+1,f
  3066  0F98  0AA8               	incf	_motorStep,f
  3067  0F99  1903               	skipnz
  3068  0F9A  0AA9               	incf	_motorStep+1,f
  3069  0F9B  0873               	movf	??_bujinCtr+1,w
  3070  0F9C  0229               	subwf	_motorStep+1,w
  3071  0F9D  1D03               	skipz
  3072  0F9E  2FA1               	goto	u4405
  3073  0F9F  0872               	movf	??_bujinCtr,w
  3074  0FA0  0228               	subwf	_motorStep,w
  3075  0FA1                     u4405:	
  3076  0FA1  1C03               	skipc
  3077  0FA2  2FA5               	goto	l4373
  3078                           
  3079                           ;main.c: 650: {
  3080                           ;main.c: 651: motorStep = 0;
  3081  0FA3  01A8               	clrf	_motorStep
  3082  0FA4  01A9               	clrf	_motorStep+1
  3083  0FA5                     l4373:	
  3084                           
  3085                           ;main.c: 652: }
  3086                           ;main.c: 653: unsigned char tempStep = motorStep % 8;
  3087  0FA5  0828               	movf	_motorStep,w
  3088  0FA6  00F4               	movwf	bujinCtr@tempStep
  3089  0FA7  3007               	movlw	7
  3090  0FA8  05F4               	andwf	bujinCtr@tempStep,f
  3091                           
  3092                           ;main.c: 654: if(motorStep < maxMotorStep)
  3093  0FA9  0827               	movf	_maxMotorStep+1,w
  3094  0FAA  0229               	subwf	_motorStep+1,w
  3095  0FAB  1D03               	skipz
  3096  0FAC  2FAF               	goto	u4415
  3097  0FAD  0826               	movf	_maxMotorStep,w
  3098  0FAE  0228               	subwf	_motorStep,w
  3099  0FAF                     u4415:	
  3100  0FAF  1C03               	btfss	3,0
  3101  0FB0  2FD2               	goto	l4383
  3102  0FB1  2FDE               	goto	l4387
  3103  0FB2                     l1089:	
  3104                           ;main.c: 658: {
  3105                           ;main.c: 659: case 0:
  3106                           
  3107                           
  3108                           ;main.c: 660: RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 0;
  3109  0FB2  1683               	bsf	3,5	;RP0=1, select bank1
  3110  0FB3  1686               	bsf	6,5	;volatile
  3111  0FB4  1306               	bcf	6,6	;volatile
  3112  0FB5  1386               	bcf	6,7	;volatile
  3113  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  3114  0FB7  1386               	bcf	6,7	;volatile
  3115                           
  3116                           ;main.c: 661: break;
  3117  0FB8  0008               	return
  3118  0FB9                     l1091:	
  3119                           ;main.c: 662: case 1:
  3120                           
  3121                           
  3122                           ;main.c: 663: RA5 = 1;RA6 = 1;RA7 = 0;RB7 = 0;
  3123  0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  3124  0FBA  1686               	bsf	6,5	;volatile
  3125                           
  3126                           ;main.c: 664: break;
  3127  0FBB  2FF5               	ljmp	PL28	;call to abstracted procedure
  3128  0FBC                     l1092:	
  3129                           ;main.c: 665: case 2:
  3130                           
  3131                           
  3132                           ;main.c: 666: RA5 = 0;RA6 = 1;RA7 = 0;RB7 = 0;
  3133  0FBC  1683               	bsf	3,5	;RP0=1, select bank1
  3134  0FBD  1286               	bcf	6,5	;volatile
  3135                           
  3136                           ;main.c: 667: break;
  3137  0FBE  2FF5               	ljmp	PL28	;call to abstracted procedure
  3138  0FBF                     l1093:	
  3139                           ;main.c: 668: case 3:
  3140                           
  3141                           
  3142                           ;main.c: 669: RA5 = 0;RA6 = 1;RA7 = 1;RB7 = 0;
  3143  0FBF  1683               	bsf	3,5	;RP0=1, select bank1
  3144  0FC0  1286               	bcf	6,5	;volatile
  3145  0FC1  1706               	bsf	6,6	;volatile
  3146  0FC2  1786               	bsf	6,7	;volatile
  3147  0FC3  1283               	bcf	3,5	;RP0=0, select bank0
  3148  0FC4  1386               	bcf	6,7	;volatile
  3149                           
  3150                           ;main.c: 670: break;
  3151  0FC5  0008               	return
  3152  0FC6                     l1094:	
  3153                           ;main.c: 671: case 4:
  3154                           
  3155                           
  3156                           ;main.c: 672: RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 0;
  3157  0FC6  27FA               	fcall	PL32	;call to abstracted procedure
  3158  0FC7  1386               	bcf	6,7	;volatile
  3159                           
  3160                           ;main.c: 673: break;
  3161  0FC8  0008               	return
  3162  0FC9                     l1095:	
  3163                           ;main.c: 674: case 5:
  3164                           
  3165                           
  3166                           ;main.c: 675: RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 1;
  3167  0FC9  27FA               	fcall	PL32	;call to abstracted procedure
  3168  0FCA  1786               	bsf	6,7	;volatile
  3169                           
  3170                           ;main.c: 676: break;
  3171  0FCB  0008               	return
  3172  0FCC                     l1096:	
  3173                           ;main.c: 677: case 6:
  3174                           
  3175                           
  3176                           ;main.c: 678: RA5 = 0;RA6 = 0;RA7 = 0;RB7 = 1;
  3177  0FCC  1683               	bsf	3,5	;RP0=1, select bank1
  3178  0FCD  1286               	bcf	6,5	;volatile
  3179                           
  3180                           ;main.c: 679: break;
  3181  0FCE  2FF0               	ljmp	PL26	;call to abstracted procedure
  3182  0FCF                     l1097:	
  3183                           ;main.c: 680: case 7:
  3184                           
  3185                           
  3186                           ;main.c: 681: RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 1;
  3187  0FCF  1683               	bsf	3,5	;RP0=1, select bank1
  3188  0FD0  1686               	bsf	6,5	;volatile
  3189                           
  3190                           ;main.c: 682: break;
  3191  0FD1  2FF0               	ljmp	PL26	;call to abstracted procedure
  3192  0FD2                     l4383:	
  3193  0FD2  0874               	movf	bujinCtr@tempStep,w
  3194                           
  3195                           ; Switch size 1, requested type "space"
  3196                           ; Number of cases is 8, Range of values is 0 to 7
  3197                           ; switch strategies available:
  3198                           ; Name         Instructions Cycles
  3199                           ; direct_byte           23     7 (fixed)
  3200                           ; simple_byte           25    13 (average)
  3201                           ; jumptable            260     6 (fixed)
  3202                           ;	Chosen strategy is direct_byte
  3203  0FD3  0084               	movwf	4
  3204  0FD4  3008               	movlw	8
  3205  0FD5  0204               	subwf	4,w
  3206  0FD6  1803               	skipnc
  3207  0FD7  0008               	return
  3208  0FD8  3007               	movlw	high S4755
  3209  0FD9  008A               	movwf	10
  3210  0FDA  1003               	clrc
  3211  0FDB  0D04               	rlf	4,w
  3212  0FDC  3EEC               	addlw	low S4755
  3213  0FDD  0082               	movwf	2
  3214  0FDE                     l4387:	
  3215  0FDE  0874               	movf	bujinCtr@tempStep,w
  3216                           
  3217                           ; Switch size 1, requested type "space"
  3218                           ; Number of cases is 8, Range of values is 0 to 7
  3219                           ; switch strategies available:
  3220                           ; Name         Instructions Cycles
  3221                           ; direct_byte           23     7 (fixed)
  3222                           ; simple_byte           25    13 (average)
  3223                           ; jumptable            260     6 (fixed)
  3224                           ;	Chosen strategy is direct_byte
  3225  0FDF  0084               	movwf	4
  3226  0FE0  3008               	movlw	8
  3227  0FE1  0204               	subwf	4,w
  3228  0FE2  1803               	skipnc
  3229  0FE3  0008               	return
  3230  0FE4  3008               	movlw	high S4757
  3231  0FE5  008A               	movwf	10
  3232  0FE6  1003               	clrc
  3233  0FE7  0D04               	rlf	4,w
  3234  0FE8  3E17               	addlw	low S4757
  3235  0FE9  0082               	movwf	2
  3236  0FEA                     l4389:	
  3237                           
  3238                           ;main.c: 717: else
  3239                           ;main.c: 718: {
  3240                           ;main.c: 719: PORTA &= 0x1F;
  3241  0FEA  301F               	movlw	31
  3242  0FEB  1683               	bsf	3,5	;RP0=1, select bank1
  3243  0FEC  0586               	andwf	6,f	;volatile
  3244                           
  3245                           ;main.c: 720: PORTB &= 0x7F;
  3246  0FED  1283               	bcf	3,5	;RP0=0, select bank0
  3247  0FEE  1386               	bcf	6,7	;volatile
  3248  0FEF  0008               	return
  3249  0FF0                     __end_of_bujinCtr:	
  3250  0FF0                     PL26:	
  3251  0FF0  1306               	bcf	6,6	;volatile
  3252  0FF1  1386               	bcf	6,7	;volatile
  3253  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  3254  0FF3  1786               	bsf	6,7	;volatile
  3255  0FF4  0008               	return
  3256  0FF5                     __end_ofPL26:	
  3257  0FF5                     PL28:	
  3258  0FF5  1706               	bsf	6,6	;volatile
  3259  0FF6  1386               	bcf	6,7	;volatile
  3260  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  3261  0FF8  1386               	bcf	6,7	;volatile
  3262  0FF9  0008               	return
  3263  0FFA                     __end_ofPL28:	
  3264  0FFA                     PL32:	
  3265  0FFA  1683               	bsf	3,5	;RP0=1, select bank1
  3266  0FFB  1286               	bcf	6,5	;volatile
  3267  0FFC  1306               	bcf	6,6	;volatile
  3268  0FFD  1786               	bsf	6,7	;volatile
  3269  0FFE  1283               	bcf	3,5	;RP0=0, select bank0
  3270  0FFF  0008               	return
  3271  1000                     __end_ofPL32:	
  3272                           
  3273                           	psect	swtext1
  3274  07EC                     __pswtext1:	
  3275  07EC                     S4755:	
  3276  07EC  158A  2FB2         	ljmp	l1089
  3277  07EE  158A  2FB9         	ljmp	l1091
  3278  07F0  158A  2FBC         	ljmp	l1092
  3279  07F2  158A  2FBF         	ljmp	l1093
  3280  07F4  158A  2FC6         	ljmp	l1094
  3281  07F6  158A  2FC9         	ljmp	l1095
  3282  07F8  158A  2FCC         	ljmp	l1096
  3283  07FA  158A  2FCF         	ljmp	l1097
  3284                           
  3285                           	psect	swtext2
  3286  0817                     __pswtext2:	
  3287  0817                     S4757:	
  3288  0817  158A  2FCF         	ljmp	l1097
  3289  0819  158A  2FCC         	ljmp	l1096
  3290  081B  158A  2FC9         	ljmp	l1095
  3291  081D  158A  2FC6         	ljmp	l1094
  3292  081F  158A  2FBF         	ljmp	l1093
  3293  0821  158A  2FBC         	ljmp	l1092
  3294  0823  158A  2FB9         	ljmp	l1091
  3295  0825  158A  2FB2         	ljmp	l1089
  3296                           
  3297                           	psect	text17
  3298  07CC                     __ptext17:	
  3299 ;; *************** function _chrgCtr *****************
  3300 ;; Defined at:
  3301 ;;		line 371 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;		None
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;		None
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  1    wreg      void 
  3308 ;; Registers used:
  3309 ;;		wreg, status,2, status,0
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/100
  3312 ;;		On exit  : 300/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3315 ;;      Params:         0       0       0       0
  3316 ;;      Locals:         0       0       0       0
  3317 ;;      Temps:          0       0       0       0
  3318 ;;      Totals:         0       0       0       0
  3319 ;;Total ram usage:        0 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; Hardware stack levels required when called:    1
  3322 ;; This function calls:
  3323 ;;		Nothing
  3324 ;; This function is called by:
  3325 ;;		_main
  3326 ;; This function uses a non-reentrant model
  3327 ;;
  3328                           
  3329                           
  3330                           ;psect for function _chrgCtr
  3331  07CC                     _chrgCtr:	
  3332                           
  3333                           ;main.c: 373: if(PORTB & 0x20)
  3334                           
  3335                           ;incstack = 0
  3336                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  3337  07CC  1283               	bcf	3,5	;RP0=0, select bank0
  3338  07CD  1303               	bcf	3,6	;RP1=0, select bank0
  3339  07CE  1E86               	btfss	6,5	;volatile
  3340  07CF  2FE8               	goto	l3805
  3341                           
  3342                           ;main.c: 374: {
  3343                           ;main.c: 375: chrgFlag = 1;
  3344  07D0  01C4               	clrf	_chrgFlag
  3345  07D1  0AC4               	incf	_chrgFlag,f
  3346                           
  3347                           ;main.c: 376: firstLock = 0;
  3348  07D2  1683               	bsf	3,5	;RP0=1, select bank1
  3349  07D3  01CB               	clrf	_firstLock^(0+128)
  3350                           
  3351                           ;main.c: 377: lowBatLock = 0;
  3352  07D4  1283               	bcf	3,5	;RP0=0, select bank0
  3353  07D5  3010               	movlw	16
  3354  07D6  01C1               	clrf	_lowBatLock
  3355                           
  3356                           ;main.c: 378: if(power_ad > 4140)
  3357  07D7  0223               	subwf	_power_ad+1,w	;volatile
  3358  07D8  302D               	movlw	45
  3359  07D9  1903               	skipnz
  3360  07DA  0222               	subwf	_power_ad,w	;volatile
  3361  07DB  1C03               	skipc
  3362  07DC  2FE6               	goto	l3803
  3363                           
  3364                           ;main.c: 379: {
  3365                           ;main.c: 380: if(++chrgFullTime > 200)
  3366  07DD  30C9               	movlw	201
  3367  07DE  0AC2               	incf	_chrgFullTime,f
  3368  07DF  0242               	subwf	_chrgFullTime,w
  3369  07E0  1C03               	skipc
  3370  07E1  0008               	return
  3371                           
  3372                           ;main.c: 381: {
  3373                           ;main.c: 382: chrgFullTime = 0;
  3374  07E2  01C2               	clrf	_chrgFullTime
  3375                           
  3376                           ;main.c: 383: chrgFullFlag = 1;
  3377  07E3  01C3               	clrf	_chrgFullFlag
  3378  07E4  0AC3               	incf	_chrgFullFlag,f
  3379  07E5  0008               	return
  3380  07E6                     l3803:	
  3381                           
  3382                           ;main.c: 386: else
  3383                           ;main.c: 387: {
  3384                           ;main.c: 388: chrgFullTime = 0;
  3385  07E6  01C2               	clrf	_chrgFullTime
  3386  07E7  0008               	return
  3387  07E8                     l3805:	
  3388                           
  3389                           ;main.c: 392: else
  3390                           ;main.c: 393: {
  3391                           ;main.c: 394: chrgFlag = 0;
  3392  07E8  01C4               	clrf	_chrgFlag
  3393                           
  3394                           ;main.c: 395: chrgFullTime = 0;
  3395  07E9  01C2               	clrf	_chrgFullTime
  3396                           
  3397                           ;main.c: 396: chrgFullFlag = 0;
  3398  07EA  01C3               	clrf	_chrgFullFlag
  3399  07EB  0008               	return
  3400  07EC                     __end_of_chrgCtr:	
  3401                           
  3402                           	psect	text21
  3403  0EF8                     __ptext21:	
  3404 ;; *************** function _KeyServer *****************
  3405 ;; Defined at:
  3406 ;;		line 111 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;		None
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;		None
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  1    wreg      void 
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0
  3415 ;; Tracked objects:
  3416 ;;		On entry : 300/0
  3417 ;;		On exit  : 200/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3420 ;;      Params:         0       0       0       0
  3421 ;;      Locals:         0       0       0       0
  3422 ;;      Temps:          0       0       0       0
  3423 ;;      Totals:         0       0       0       0
  3424 ;;Total ram usage:        0 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    1
  3427 ;; This function calls:
  3428 ;;		Nothing
  3429 ;; This function is called by:
  3430 ;;		_main
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           
  3435                           ;psect for function _KeyServer
  3436  0EF8                     _KeyServer:	
  3437                           
  3438                           ;main.c: 113: static unsigned char KeyOldFlag = 0;
  3439                           ;main.c: 114: if (KeyFlag[0])
  3440                           
  3441                           ;incstack = 0
  3442                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3443  0EF8  0832               	movf	_KeyFlag,w	;volatile
  3444  0EF9  1903               	btfsc	3,2
  3445  0EFA  2F6C               	goto	l3745
  3446                           
  3447                           ;main.c: 115: {
  3448                           ;main.c: 116: if (KeyFlag[0] != KeyOldFlag)
  3449  0EFB  0832               	movf	_KeyFlag,w	;volatile
  3450  0EFC  063A               	xorwf	KeyServer@KeyOldFlag,w
  3451  0EFD  1903               	skipnz
  3452  0EFE  2F48               	goto	l3729
  3453                           
  3454                           ;main.c: 117: {
  3455                           ;main.c: 119: KeyOldFlag ^= KeyFlag[0];
  3456  0EFF  0832               	movf	_KeyFlag,w	;volatile
  3457  0F00  06BA               	xorwf	KeyServer@KeyOldFlag,f
  3458                           
  3459                           ;main.c: 120: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0 && powerFla
      +                          g > 0)
  3460  0F01  183A               	btfsc	KeyServer@KeyOldFlag,0
  3461  0F02  1C32               	btfss	_KeyFlag,0	;volatile
  3462  0F03  2F24               	goto	l3705
  3463  0F04  1683               	bsf	3,5	;RP0=1, select bank1
  3464  0F05  084B               	movf	_firstLock^(0+128),w
  3465  0F06  1D03               	btfss	3,2
  3466  0F07  2F24               	goto	l3705
  3467  0F08  1283               	bcf	3,5	;RP0=0, select bank0
  3468  0F09  083E               	movf	_powerFlag,w
  3469  0F0A  1903               	btfsc	3,2
  3470  0F0B  2F24               	goto	l3705
  3471                           
  3472                           ;main.c: 121: {
  3473                           ;main.c: 123: if(lowBatLock == 1)
  3474  0F0C  0B41               	decfsz	_lowBatLock,w
  3475  0F0D  2F13               	goto	l3693
  3476                           
  3477                           ;main.c: 124: {
  3478                           ;main.c: 125: shanshuoTime2 = 450;
  3479  0F0E  30C2               	movlw	194
  3480  0F0F  00AE               	movwf	_shanshuoTime2
  3481  0F10  3001               	movlw	1
  3482  0F11  00AF               	movwf	_shanshuoTime2+1
  3483                           
  3484                           ;main.c: 126: }
  3485  0F12  2F18               	goto	l3697
  3486  0F13                     l3693:	
  3487                           
  3488                           ;main.c: 127: else if(++wuhuaFlag > 2)
  3489  0F13  3003               	movlw	3
  3490  0F14  0AC8               	incf	_wuhuaFlag,f
  3491  0F15  0248               	subwf	_wuhuaFlag,w
  3492  0F16  1803               	btfsc	3,0
  3493                           
  3494                           ;main.c: 128: {
  3495                           ;main.c: 129: wuhuaFlag = 0;
  3496  0F17  01C8               	clrf	_wuhuaFlag
  3497  0F18                     l3697:	
  3498                           
  3499                           ;main.c: 130: }
  3500                           ;main.c: 131: if(wuhuaFlag >= 2)
  3501  0F18  3002               	movlw	2
  3502  0F19  0248               	subwf	_wuhuaFlag,w
  3503  0F1A  1C03               	skipc
  3504  0F1B  2F22               	goto	l3703
  3505                           
  3506                           ;main.c: 132: {
  3507                           ;main.c: 133: shanshuoTime2 = 450;
  3508  0F1C  30C2               	movlw	194
  3509  0F1D  00AE               	movwf	_shanshuoTime2
  3510  0F1E  3001               	movlw	1
  3511  0F1F  00AF               	movwf	_shanshuoTime2+1
  3512                           
  3513                           ;main.c: 134: count10s = 0;
  3514  0F20  01C6               	clrf	_count10s
  3515                           
  3516                           ;main.c: 135: }
  3517  0F21  2F24               	goto	l3705
  3518  0F22                     l3703:	
  3519                           
  3520                           ;main.c: 136: else
  3521                           ;main.c: 137: {
  3522                           ;main.c: 138: shanshuoTime2 = 0;
  3523  0F22  01AE               	clrf	_shanshuoTime2
  3524  0F23  01AF               	clrf	_shanshuoTime2+1
  3525  0F24                     l3705:	
  3526                           
  3527                           ;main.c: 139: }
  3528                           ;main.c: 140: }
  3529                           ;main.c: 141: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0 && powerFla
      +                          g > 0)
  3530  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  3531  0F25  18BA               	btfsc	KeyServer@KeyOldFlag,1
  3532  0F26  1CB2               	btfss	_KeyFlag,1	;volatile
  3533  0F27  2F45               	goto	l3727
  3534  0F28  1683               	bsf	3,5	;RP0=1, select bank1
  3535  0F29  084B               	movf	_firstLock^(0+128),w
  3536  0F2A  1D03               	btfss	3,2
  3537  0F2B  2F45               	goto	l3727
  3538  0F2C  1283               	bcf	3,5	;RP0=0, select bank0
  3539  0F2D  083E               	movf	_powerFlag,w
  3540  0F2E  1903               	btfsc	3,2
  3541  0F2F  2F45               	goto	l3727
  3542                           
  3543                           ;main.c: 142: {
  3544                           ;main.c: 144: if(lowBatLock == 1)
  3545  0F30  0B41               	decfsz	_lowBatLock,w
  3546  0F31  2F35               	goto	l3717
  3547                           
  3548                           ;main.c: 145: {
  3549                           ;main.c: 146: shanshuoTime = 450;
  3550  0F32  2771  158A         	fcall	PL36	;call to abstracted procedure
  3551                           
  3552                           ;main.c: 147: }
  3553  0F34  2F3C               	goto	l3721
  3554  0F35                     l3717:	
  3555                           
  3556                           ;main.c: 148: else if(++workStep > 3)
  3557  0F35  3004               	movlw	4
  3558  0F36  0AFB               	incf	_workStep,f
  3559  0F37  027B               	subwf	_workStep,w
  3560  0F38  1C03               	skipc
  3561  0F39  2F3C               	goto	l3721
  3562                           
  3563                           ;main.c: 149: {
  3564                           ;main.c: 150: workStep = 0;
  3565  0F3A  01FB               	clrf	_workStep
  3566                           
  3567                           ;main.c: 151: bujinFlag = 0;
  3568  0F3B  01BF               	clrf	_bujinFlag
  3569  0F3C                     l3721:	
  3570                           
  3571                           ;main.c: 152: }
  3572                           ;main.c: 153: if(workStep >= 2)
  3573  0F3C  3002               	movlw	2
  3574  0F3D  027B               	subwf	_workStep,w
  3575  0F3E  1C03               	skipc
  3576  0F3F  2F43               	goto	l3725
  3577                           
  3578                           ;main.c: 154: {
  3579                           ;main.c: 155: shanshuoTime = 450;
  3580  0F40  2771  158A         	fcall	PL36	;call to abstracted procedure
  3581                           
  3582                           ;main.c: 156: }
  3583  0F42  2F45               	goto	l3727
  3584  0F43                     l3725:	
  3585                           
  3586                           ;main.c: 157: else
  3587                           ;main.c: 158: {
  3588                           ;main.c: 159: shanshuoTime = 0;
  3589  0F43  01B0               	clrf	_shanshuoTime
  3590  0F44  01B1               	clrf	_shanshuoTime+1
  3591  0F45                     l3727:	
  3592                           
  3593                           ;main.c: 160: }
  3594                           ;main.c: 162: }
  3595                           ;main.c: 164: KeyOldFlag = KeyFlag[0];
  3596  0F45  1283               	bcf	3,5	;RP0=0, select bank0
  3597  0F46  0832               	movf	_KeyFlag,w	;volatile
  3598  0F47  00BA               	movwf	KeyServer@KeyOldFlag
  3599  0F48                     l3729:	
  3600                           
  3601                           ;main.c: 165: }
  3602                           ;main.c: 166: if(firstLock == 0 && KeyOldFlag & 0x4)
  3603  0F48  1683               	bsf	3,5	;RP0=1, select bank1
  3604  0F49  084B               	movf	_firstLock^(0+128),w
  3605  0F4A  1D03               	btfss	3,2
  3606  0F4B  0008               	return
  3607  0F4C  1283               	bcf	3,5	;RP0=0, select bank0
  3608  0F4D  1D3A               	btfss	KeyServer@KeyOldFlag,2
  3609  0F4E  0008               	return
  3610                           
  3611                           ;main.c: 167: {
  3612                           ;main.c: 168: if(++keyCount >= 400)
  3613  0F4F  0AA4               	incf	_keyCount,f
  3614  0F50  1903               	skipnz
  3615  0F51  0AA5               	incf	_keyCount+1,f
  3616  0F52  3001               	movlw	1
  3617  0F53  0225               	subwf	_keyCount+1,w
  3618  0F54  3090               	movlw	144
  3619  0F55  1903               	skipnz
  3620  0F56  0224               	subwf	_keyCount,w
  3621  0F57  1C03               	skipc
  3622  0F58  0008               	return
  3623                           
  3624                           ;main.c: 169: {
  3625                           ;main.c: 170: keyCount = 0;
  3626  0F59  01A4               	clrf	_keyCount
  3627  0F5A  01A5               	clrf	_keyCount+1
  3628                           
  3629                           ;main.c: 171: if(longKeyFlag == 0)
  3630  0F5B  083D               	movf	_longKeyFlag,w
  3631  0F5C  1D03               	btfss	3,2
  3632  0F5D  0008               	return
  3633                           
  3634                           ;main.c: 172: {
  3635                           ;main.c: 173: longKeyFlag = 1;
  3636  0F5E  01BD               	clrf	_longKeyFlag
  3637  0F5F  0ABD               	incf	_longKeyFlag,f
  3638                           
  3639                           ;main.c: 174: if(powerFlag > 0)
  3640  0F60  083E               	movf	_powerFlag,w
  3641  0F61  1903               	btfsc	3,2
  3642  0F62  2F67               	goto	l961
  3643                           
  3644                           ;main.c: 175: {
  3645                           ;main.c: 176: powerFlag = 0;
  3646  0F63  01BE               	clrf	_powerFlag
  3647                           
  3648                           ;main.c: 177: workStep = 0;
  3649  0F64  01FB               	clrf	_workStep
  3650                           
  3651                           ;main.c: 178: wuhuaFlag = 0;
  3652  0F65  01C8               	clrf	_wuhuaFlag
  3653                           
  3654                           ;main.c: 179: }
  3655  0F66  0008               	return
  3656  0F67                     l961:	
  3657                           
  3658                           ;main.c: 180: else
  3659                           ;main.c: 181: {
  3660                           ;main.c: 182: powerFlag = 1;
  3661  0F67  01BE               	clrf	_powerFlag
  3662  0F68  0ABE               	incf	_powerFlag,f
  3663                           
  3664                           ;main.c: 183: workStep = 1;
  3665  0F69  01FB               	clrf	_workStep
  3666  0F6A  0AFB               	incf	_workStep,f
  3667  0F6B  0008               	return
  3668  0F6C                     l3745:	
  3669                           
  3670                           ;main.c: 189: else
  3671                           ;main.c: 190: {
  3672                           ;main.c: 191: KeyOldFlag = 0;
  3673  0F6C  01BA               	clrf	KeyServer@KeyOldFlag
  3674                           
  3675                           ;main.c: 192: longKeyFlag = 0;
  3676  0F6D  01BD               	clrf	_longKeyFlag
  3677                           
  3678                           ;main.c: 193: keyCount = 0;
  3679  0F6E  01A4               	clrf	_keyCount
  3680  0F6F  01A5               	clrf	_keyCount+1
  3681  0F70  0008               	return
  3682  0F71                     __end_of_KeyServer:	
  3683  0F71                     PL36:	
  3684  0F71  30C2               	movlw	194
  3685  0F72  00B0               	movwf	_shanshuoTime
  3686  0F73  3001               	movlw	1
  3687  0F74  00B1               	movwf	_shanshuoTime+1
  3688  0F75  0008               	return
  3689  0F76                     __end_ofPL36:	
  3690                           
  3691                           	psect	text22
  3692  0020                     __ptext22:	
  3693 ;; *************** function _Init_System *****************
  3694 ;; Defined at:
  3695 ;;		line 60 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  3696 ;; Parameters:    Size  Location     Type
  3697 ;;		None
  3698 ;; Auto vars:     Size  Location     Type
  3699 ;;		None
  3700 ;; Return value:  Size  Location     Type
  3701 ;;                  1    wreg      void 
  3702 ;; Registers used:
  3703 ;;		wreg, status,2
  3704 ;; Tracked objects:
  3705 ;;		On entry : B00/0
  3706 ;;		On exit  : 300/100
  3707 ;;		Unchanged: 0/0
  3708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3709 ;;      Params:         0       0       0       0
  3710 ;;      Locals:         0       0       0       0
  3711 ;;      Temps:          0       0       0       0
  3712 ;;      Totals:         0       0       0       0
  3713 ;;Total ram usage:        0 bytes
  3714 ;; Hardware stack levels used:    1
  3715 ;; Hardware stack levels required when called:    1
  3716 ;; This function calls:
  3717 ;;		Nothing
  3718 ;; This function is called by:
  3719 ;;		_main
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           
  3724                           ;psect for function _Init_System
  3725  0020                     _Init_System:	
  3726                           
  3727                           ;incstack = 0
  3728                           ; Regs used in _Init_System: [wreg+status,2]
  3729  0020  0000               	nop	;# 
  3730  0021  0064               	clrwdt	;# 
  3731                           
  3732                           ;main.c: 64: INTCON = 0;
  3733  0022  018B               	clrf	11	;volatile
  3734                           
  3735                           ;main.c: 65: OSCCON = 0X72;
  3736  0023  3072               	movlw	114
  3737  0024  1283               	bcf	3,5	;RP0=0, select bank0
  3738  0025  1303               	bcf	3,6	;RP1=0, select bank0
  3739  0026  0094               	movwf	20	;volatile
  3740                           
  3741                           ;main.c: 66: OPTION_REG = 0;
  3742  0027  0181               	clrf	1	;volatile
  3743                           
  3744                           ;main.c: 71: TRISA = 0x04;
  3745  0028  3004               	movlw	4
  3746  0029  1683               	bsf	3,5	;RP0=1, select bank1
  3747  002A  0085               	movwf	5	;volatile
  3748                           
  3749                           ;main.c: 72: PORTA = 0;
  3750  002B  0186               	clrf	6	;volatile
  3751                           
  3752                           ;main.c: 73: TRISB = 0x20;
  3753  002C  3020               	movlw	32
  3754  002D  1283               	bcf	3,5	;RP0=0, select bank0
  3755  002E  0085               	movwf	5	;volatile
  3756                           
  3757                           ;main.c: 74: PORTB = 0;
  3758  002F  0186               	clrf	6	;volatile
  3759                           
  3760                           ;main.c: 75: WPUB = 0x00;
  3761  0030  0188               	clrf	8	;volatile
  3762                           
  3763                           ;main.c: 76: TRISC = 0;
  3764  0031  1703               	bsf	3,6	;RP1=1, select bank2
  3765  0032  0185               	clrf	5	;volatile
  3766                           
  3767                           ;main.c: 77: PORTC = 0;
  3768  0033  0186               	clrf	6	;volatile
  3769                           
  3770                           ;main.c: 79: PIE1 = 2;
  3771  0034  3002               	movlw	2
  3772  0035  1303               	bcf	3,6	;RP1=0, select bank0
  3773  0036  008E               	movwf	14	;volatile
  3774                           
  3775                           ;main.c: 80: PR2 = 250;
  3776  0037  30FA               	movlw	250
  3777  0038  0091               	movwf	17	;volatile
  3778                           
  3779                           ;main.c: 81: T2CON = 4;
  3780  0039  3004               	movlw	4
  3781  003A  0093               	movwf	19	;volatile
  3782                           
  3783                           ;main.c: 83: INTCON = 0XC0;
  3784  003B  30C0               	movlw	192
  3785  003C  008B               	movwf	11	;volatile
  3786                           
  3787                           ;main.c: 84: ADCON0 = 0X41;
  3788                           
  3789                           ;main.c: 85: ADON = 1;
  3790                           
  3791                           ;main.c: 86: ADCON1 = 0x00;
  3792  003D  2BE4               	ljmp	PL22	;call to abstracted procedure
  3793  003E                     __end_of_Init_System:	
  3794  003E                     __ptext18:	
  3795 ;; *************** function _WorkSleep *****************
  3796 ;; Defined at:
  3797 ;;		line 223 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;		None
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;		None
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      void 
  3804 ;; Registers used:
  3805 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 300/0
  3808 ;;		On exit  : 200/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3811 ;;      Params:         0       0       0       0
  3812 ;;      Locals:         0       0       0       0
  3813 ;;      Temps:          0       0       0       0
  3814 ;;      Totals:         0       0       0       0
  3815 ;;Total ram usage:        0 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    4
  3818 ;; This function calls:
  3819 ;;		_Refurbish_Sfr
  3820 ;;		_SystemEnterSleep
  3821 ;; This function is called by:
  3822 ;;		_main
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           
  3827                           ;psect for function _WorkSleep
  3828  003E                     _WorkSleep:	
  3829                           
  3830                           ;main.c: 226: static unsigned char time;
  3831                           ;main.c: 228: if(B_OnOff)time = 0;
  3832                           
  3833                           ;incstack = 0
  3834                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3835  003E  1AF8               	btfsc	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  3836  003F  01B9               	clrf	WorkSleep@time
  3837                           
  3838                           ;main.c: 230: if(++time >= 125)
  3839  0040  307D               	movlw	125
  3840  0041  0AB9               	incf	WorkSleep@time,f
  3841  0042  0239               	subwf	WorkSleep@time,w
  3842  0043  1C03               	skipc
  3843  0044  0008               	return
  3844                           
  3845                           ;main.c: 231: {
  3846                           ;main.c: 232: time = 0;
  3847  0045  01B9               	clrf	WorkSleep@time
  3848                           
  3849                           ;main.c: 233: INTCON = 0;
  3850  0046  018B               	clrf	11	;volatile
  3851                           
  3852                           ;main.c: 234: PIE1 = 0;
  3853  0047  018E               	clrf	14	;volatile
  3854                           
  3855                           ;main.c: 235: PIE2 = 0;
  3856  0048  1703               	bsf	3,6	;RP1=1, select bank2
  3857  0049  0190               	clrf	16	;volatile
  3858                           
  3859                           ;main.c: 236: PIR1 = 0;
  3860  004A  1303               	bcf	3,6	;RP1=0, select bank0
  3861  004B  018D               	clrf	13	;volatile
  3862                           
  3863                           ;main.c: 237: PIR2 = 0;
  3864  004C  1703               	bsf	3,6	;RP1=1, select bank2
  3865  004D  018F               	clrf	15	;volatile
  3866                           
  3867                           ;main.c: 238: T2CON = 0;
  3868  004E  1303               	bcf	3,6	;RP1=0, select bank0
  3869  004F  0193               	clrf	19	;volatile
  3870                           
  3871                           ;main.c: 239: ADCON1 = 0;
  3872  0050  1683               	bsf	3,5	;RP0=1, select bank1
  3873  0051  0196               	clrf	22	;volatile
  3874                           
  3875                           ;main.c: 242: ADCON0 = 0;
  3876  0052  0195               	clrf	21	;volatile
  3877                           
  3878                           ;main.c: 245: PORTA = 0x01;
  3879  0053  3001               	movlw	1
  3880  0054  0086               	movwf	6	;volatile
  3881                           
  3882                           ;main.c: 246: PORTB = 0x02;
  3883  0055  3002               	movlw	2
  3884  0056  1283               	bcf	3,5	;RP0=0, select bank0
  3885  0057  0086               	movwf	6	;volatile
  3886                           
  3887                           ;main.c: 247: TRISC = 0;
  3888  0058  1703               	bsf	3,6	;RP1=1, select bank2
  3889  0059  0185               	clrf	5	;volatile
  3890                           
  3891                           ;main.c: 248: PORTC = 0x03;
  3892  005A  3003               	movlw	3
  3893  005B  0086               	movwf	6	;volatile
  3894                           
  3895                           ;main.c: 250: TRISB5 =1;
  3896  005C  1303               	bcf	3,6	;RP1=0, select bank0
  3897  005D  1685               	bsf	5,5	;volatile
  3898                           
  3899                           ;main.c: 252: RBIF = 0;
  3900  005E  100B               	bcf	11,0	;volatile
  3901                           
  3902                           ;main.c: 253: RBIE = 1;
  3903  005F  158B               	bsf	11,3	;volatile
  3904                           
  3905                           ;main.c: 254: IOCB5= 1;
  3906  0060  1689               	bsf	9,5	;volatile
  3907                           
  3908                           ;main.c: 255: PORTB;
  3909  0061  0806               	movf	6,w	;volatile
  3910                           
  3911                           ;main.c: 256: PORTB &= 0xFD;
  3912  0062  1086               	bcf	6,1	;volatile
  3913                           
  3914                           ;main.c: 268: SystemEnterSleep();
  3915  0063  209A  118A         	fcall	_SystemEnterSleep
  3916                           
  3917                           ;main.c: 269: if(RAIF)
  3918  0065  1D8D               	btfss	13,3	;volatile
  3919  0066  286A               	goto	l4589
  3920                           
  3921                           ;main.c: 270: {
  3922                           ;main.c: 271: RAIF = 0;
  3923  0067  118D               	bcf	13,3	;volatile
  3924                           
  3925                           ;main.c: 272: PORTA;
  3926  0068  1683               	bsf	3,5	;RP0=1, select bank1
  3927  0069  0806               	movf	6,w	;volatile
  3928  006A                     l4589:	
  3929                           
  3930                           ;main.c: 273: }
  3931                           ;main.c: 275: Refurbish_Sfr();
  3932  006A  2384  118A         	fcall	_Refurbish_Sfr
  3933                           
  3934                           ;main.c: 276: ADCON0 = 0X41;
  3935                           
  3936                           ;main.c: 277: ADON = 1;
  3937                           
  3938                           ;main.c: 278: ADCON1 = 0x00;
  3939  006C  2BE4               	ljmp	PL22	;call to abstracted procedure
  3940  006D                     __end_of_WorkSleep:	
  3941  006D                     __ptext23:	
  3942 ;; *************** function _CheckTouchKey *****************
  3943 ;; Defined at:
  3944 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;		None
  3947 ;; Auto vars:     Size  Location     Type
  3948 ;;		None
  3949 ;; Return value:  Size  Location     Type
  3950 ;;                  1    wreg      void 
  3951 ;; Registers used:
  3952 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3953 ;; Tracked objects:
  3954 ;;		On entry : 0/100
  3955 ;;		On exit  : 0/0
  3956 ;;		Unchanged: 0/0
  3957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3958 ;;      Params:         0       0       0       0
  3959 ;;      Locals:         0       0       0       0
  3960 ;;      Temps:          0       0       0       0
  3961 ;;      Totals:         0       0       0       0
  3962 ;;Total ram usage:        0 bytes
  3963 ;; Hardware stack levels used:    1
  3964 ;; Hardware stack levels required when called:    5
  3965 ;; This function calls:
  3966 ;;		_CheckKeyOldValue
  3967 ;;		_CheckOnceResult
  3968 ;;		_CheckValidTime
  3969 ;;		_ClearResSum
  3970 ;;		_GetTouchKeyValue
  3971 ;;		_KeyStopClear
  3972 ;;		_TurnKeyFlags
  3973 ;; This function is called by:
  3974 ;;		_main
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           
  3979                           ;psect for function _CheckTouchKey
  3980  006D                     _CheckTouchKey:	
  3981                           
  3982                           ;incstack = 0
  3983                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3984  006D  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3985  006E  287B               	goto	l1330
  3986  006F  212A  118A         	fcall	_GetTouchKeyValue
  3987  0071  3008               	movlw	8
  3988  0072  1283               	bcf	3,5	;RP0=0, select bank0
  3989  0073  1303               	bcf	3,6	;RP1=0, select bank0
  3990  0074  0AB8               	incf	_KeyCounter,f
  3991  0075  0238               	subwf	_KeyCounter,w
  3992  0076  1C03               	skipc
  3993  0077  2899               	goto	l4673
  3994  0078  01B8               	clrf	_KeyCounter
  3995  0079  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3996  007A  2899               	goto	l4673
  3997  007B                     l1330:	
  3998  007B  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3999  007C  2893               	goto	l4667
  4000  007D  2199  118A         	fcall	_CheckOnceResult
  4001  007F  232B  118A         	fcall	_TurnKeyFlags
  4002  0081  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4003  0082  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4004  0083  288A               	goto	l4657
  4005  0084  3002               	movlw	2
  4006  0085  1283               	bcf	3,5	;RP0=0, select bank0
  4007  0086  1303               	bcf	3,6	;RP1=0, select bank0
  4008  0087  0238               	subwf	_KeyCounter,w
  4009  0088  1C03               	skipc
  4010  0089  288F               	goto	l4665
  4011  008A                     l4657:	
  4012  008A  2315  118A         	fcall	_KeyStopClear
  4013  008C  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4014  008D  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4015  008E  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4016  008F                     l4665:	
  4017  008F  1283               	bcf	3,5	;RP0=0, select bank0
  4018  0090  1303               	bcf	3,6	;RP1=0, select bank0
  4019  0091  01B8               	clrf	_KeyCounter
  4020  0092  2899               	goto	l4673
  4021  0093                     l4667:	
  4022  0093  22B1  118A         	fcall	_CheckKeyOldValue
  4023  0095  218A  118A         	fcall	_ClearResSum
  4024  0097  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4025  0098  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4026  0099                     l4673:	
  4027  0099  2B5E               	ljmp	l3555	;# 
  4028  009A                     __end_of_CheckTouchKey:	
  4029  009A                     __ptext19:	
  4030 ;; *************** function _SystemEnterSleep *****************
  4031 ;; Defined at:
  4032 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;		None
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;  92              2    6[BANK0 ] unsigned int 
  4037 ;;  93              2    4[BANK0 ] unsigned int 
  4038 ;;  94              2    2[BANK0 ] unsigned int 
  4039 ;;  91              1    8[BANK0 ] unsigned char 
  4040 ;; Return value:  Size  Location     Type
  4041 ;;                  1    wreg      void 
  4042 ;; Registers used:
  4043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4044 ;; Tracked objects:
  4045 ;;		On entry : 300/0
  4046 ;;		On exit  : 300/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4049 ;;      Params:         0       0       0       0
  4050 ;;      Locals:         0       7       0       0
  4051 ;;      Temps:          0       2       0       0
  4052 ;;      Totals:         0       9       0       0
  4053 ;;Total ram usage:        9 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; Hardware stack levels required when called:    3
  4056 ;; This function calls:
  4057 ;;		_ClearResSum
  4058 ;;		_GetTouchKeyValue
  4059 ;;		_KeyClearOne
  4060 ;; This function is called by:
  4061 ;;		_WorkSleep
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           
  4066                           ;psect for function _SystemEnterSleep
  4067  009A                     _SystemEnterSleep:	
  4068  009A                     l1342:	
  4069                           ;incstack = 0
  4070                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4071                           
  4072  009A  0064               	clrwdt	;# 
  4073  009B  1683               	bsf	3,5	;RP0=1, select bank1
  4074  009C  1303               	bcf	3,6	;RP1=0, select bank1
  4075  009D  0181               	clrf	1	;volatile
  4076  009E  3007               	movlw	7
  4077  009F  1283               	bcf	3,5	;RP0=0, select bank0
  4078  00A0  0481               	iorwf	1,f	;volatile
  4079  00A1  1581               	bsf	1,3	;volatile
  4080  00A2  0064               	clrwdt	;# 
  4081  00A3  300A               	movlw	10
  4082  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  4083  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  4084  00A6  0081               	movwf	1	;volatile
  4085  00A7  0064               	clrwdt	;# 
  4086  00A8  1283               	bcf	3,5	;RP0=0, select bank2
  4087  00A9  1703               	bsf	3,6	;RP1=1, select bank2
  4088  00AA  0191               	clrf	17	;volatile
  4089  00AB  0193               	clrf	19	;volatile
  4090  00AC  3002               	movlw	2
  4091  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  4092  00AE  0094               	movwf	20	;volatile
  4093  00AF  0063               	sleep	;# 
  4094  00B0  0000               	nop	;# 
  4095  00B1  0064               	clrwdt	;# 
  4096  00B2  3072               	movlw	114
  4097  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  4098  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  4099  00B5  0094               	movwf	20	;volatile
  4100  00B6  3079               	movlw	121
  4101  00B7  1703               	bsf	3,6	;RP1=1, select bank2
  4102  00B8  0093               	movwf	19	;volatile
  4103  00B9  218A  118A         	fcall	_ClearResSum
  4104  00BB  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4105  00BC  212A  118A         	fcall	_GetTouchKeyValue
  4106  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  4107  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  4108  00C0  23F0  118A         	fcall	PL42	;call to abstracted procedure
  4109  00C2  1C0B               	btfss	11,0	;volatile
  4110  00C3  188B               	btfsc	11,1	;volatile
  4111  00C4  28C7               	goto	l4179
  4112  00C5  1D8D               	btfss	13,3	;volatile
  4113  00C6  28CE               	goto	l4191
  4114  00C7                     l4179:	
  4115  00C7  218A               	fcall	_ClearResSum
  4116  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  4117  00C9  1303               	bcf	3,6	;RP1=0, select bank0
  4118  00CA  01B8               	clrf	_KeyCounter
  4119  00CB  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4120  00CC  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4121  00CD  0008               	return
  4122  00CE                     l4191:	
  4123  00CE  0853               	movf	SystemEnterSleep@92,w
  4124  00CF  3907               	andlw	7
  4125  00D0  1003               	clrc
  4126  00D1  1903               	btfsc	3,2
  4127  00D2  2924               	goto	L8
  4128  00D3  0D55               	rlf	SystemEnterSleep@91,w
  4129  00D4  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4130  00D5  0084               	movwf	4
  4131  00D6  1383               	bcf	3,7	;select IRP bank1
  4132  00D7  0800               	movf	0,w
  4133  00D8  00D1               	movwf	SystemEnterSleep@93
  4134  00D9  0A84               	incf	4,f
  4135  00DA  0800               	movf	0,w
  4136  00DB  00D2               	movwf	SystemEnterSleep@93+1
  4137  00DC  00D0               	movwf	SystemEnterSleep@94+1
  4138  00DD  0851               	movf	SystemEnterSleep@93,w
  4139  00DE  00CF               	movwf	SystemEnterSleep@94
  4140  00DF  0851               	movf	SystemEnterSleep@93,w
  4141  00E0  0452               	iorwf	SystemEnterSleep@93+1,w
  4142  00E1  1903               	btfsc	3,2
  4143  00E2  2923               	goto	l4225
  4144  00E3  0855               	movf	SystemEnterSleep@91,w
  4145  00E4  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4146  00E5  0084               	movwf	4
  4147  00E6  158A  2000  118A   	fcall	stringdir
  4148  00E9  07CF               	addwf	SystemEnterSleep@94,f
  4149  00EA  1803               	skipnc
  4150  00EB  0AD0               	incf	SystemEnterSleep@94+1,f
  4151  00EC  1003               	clrc
  4152  00ED  0D55               	rlf	SystemEnterSleep@91,w
  4153  00EE  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4154  00EF  23CF  118A         	fcall	PL14	;call to abstracted procedure
  4155  00F1  0850               	movf	SystemEnterSleep@94+1,w
  4156  00F2  024E               	subwf	??_SystemEnterSleep+1,w
  4157  00F3  1D03               	skipz
  4158  00F4  28F7               	goto	u3995
  4159  00F5  084F               	movf	SystemEnterSleep@94,w
  4160  00F6  024D               	subwf	??_SystemEnterSleep,w
  4161  00F7                     u3995:	
  4162  00F7  1C03               	skipc
  4163  00F8  290B               	goto	L7
  4164  00F9  23F0  118A         	fcall	PL42	;call to abstracted procedure
  4165  00FB                     l4205:	
  4166  00FB  0853               	movf	SystemEnterSleep@92,w
  4167  00FC  3907               	andlw	7
  4168  00FD  1D03               	btfss	3,2
  4169  00FE  2902               	goto	l4209
  4170  00FF  0855               	movf	SystemEnterSleep@91,w
  4171  0100  228E  118A         	fcall	_KeyClearOne
  4172  0102                     l4209:	
  4173  0102  1283               	bcf	3,5	;RP0=0, select bank0
  4174  0103  3003               	movlw	3
  4175  0104  1303               	bcf	3,6	;RP1=0, select bank0
  4176  0105  1003               	clrc
  4177  0106  23F5  118A         	fcall	PL44	;call to abstracted procedure
  4178  0108  1803               	btfsc	3,0
  4179  0109  28C7               	goto	l4179
  4180  010A  28FB               	goto	l4205
  4181  010B                     L7:	
  4182  010B  0D55               	rlf	SystemEnterSleep@91,w
  4183  010C  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4184  010D  23CF  118A         	fcall	PL14	;call to abstracted procedure
  4185  010F  1003               	clrc
  4186  0110  0D55               	rlf	SystemEnterSleep@91,w
  4187  0111  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4188  0112  23B9  118A         	fcall	PL10	;call to abstracted procedure
  4189  0114  0800               	movf	0,w
  4190  0115  00CD               	movwf	??_SystemEnterSleep
  4191  0116  0A84               	incf	4,f
  4192  0117  0800               	movf	0,w
  4193  0118  00CE               	movwf	??_SystemEnterSleep+1
  4194  0119  1003               	clrc
  4195  011A  0D55               	rlf	SystemEnterSleep@91,w
  4196  011B  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4197  011C  23B9  118A         	fcall	PL10	;call to abstracted procedure
  4198  011E  0851               	movf	SystemEnterSleep@93,w
  4199  011F  0080               	movwf	0
  4200  0120  0A84               	incf	4,f
  4201  0121  0852               	movf	SystemEnterSleep@93+1,w
  4202  0122  0080               	movwf	0
  4203  0123                     l4225:	
  4204  0123  1003               	clrc
  4205  0124                     L8:	
  4206  0124  3003               	movlw	3
  4207  0125  23F5  118A         	fcall	PL44	;call to abstracted procedure
  4208  0127  1803               	btfsc	3,0
  4209  0128  289A               	goto	l1342
  4210  0129  28CE               	goto	l4191
  4211  012A                     __end_of_SystemEnterSleep:	
  4212  012A                     __ptext27:	
  4213 ;; *************** function _GetTouchKeyValue *****************
  4214 ;; Defined at:
  4215 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;		None
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  63              2    5[COMMON] unsigned int 
  4220 ;;  64              2    3[COMMON] unsigned int 
  4221 ;;  62              1    7[COMMON] unsigned char 
  4222 ;; Return value:  Size  Location     Type
  4223 ;;                  1    wreg      void 
  4224 ;; Registers used:
  4225 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4226 ;; Tracked objects:
  4227 ;;		On entry : 0/200
  4228 ;;		On exit  : 0/0
  4229 ;;		Unchanged: 0/0
  4230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4231 ;;      Params:         0       0       0       0
  4232 ;;      Locals:         5       0       0       0
  4233 ;;      Temps:          0       0       0       0
  4234 ;;      Totals:         5       0       0       0
  4235 ;;Total ram usage:        5 bytes
  4236 ;; Hardware stack levels used:    1
  4237 ;; Hardware stack levels required when called:    2
  4238 ;; This function calls:
  4239 ;;		_ClearResSum
  4240 ;; This function is called by:
  4241 ;;		_CheckTouchKey
  4242 ;;		_SystemEnterSleep
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           
  4247                           ;psect for function _GetTouchKeyValue
  4248  012A                     _GetTouchKeyValue:	
  4249                           
  4250                           ;incstack = 0
  4251                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4252  012A  01F7               	clrf	GetTouchKeyValue@62
  4253  012B  01F5               	clrf	GetTouchKeyValue@63
  4254  012C  0AF5               	incf	GetTouchKeyValue@63,f
  4255  012D  01F6               	clrf	GetTouchKeyValue@63+1
  4256  012E                     l3033:	
  4257  012E  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4258  012F  2934               	goto	l3037
  4259  0130  0875               	movf	GetTouchKeyValue@63,w
  4260  0131  3907               	andlw	7
  4261  0132  1903               	btfsc	3,2
  4262  0133  2980               	goto	l3065
  4263  0134                     l3037:	
  4264  0134  1283               	bcf	3,5	;RP0=0, select bank2
  4265  0135  1703               	bsf	3,6	;RP1=1, select bank2
  4266  0136  0191               	clrf	17	;volatile
  4267  0137  0192               	clrf	18	;volatile
  4268  0138  3079               	movlw	121
  4269  0139  0093               	movwf	19	;volatile
  4270  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4271  013B  1305               	bcf	5,6	;volatile
  4272  013C  1306               	bcf	6,6	;volatile
  4273  013D  0000               	nop	;# 
  4274  013E  0000               	nop	;# 
  4275  013F  0000               	nop	;# 
  4276  0140  0000               	nop	;# 
  4277  0141  0000               	nop	;# 
  4278  0142  0000               	nop	;# 
  4279  0143  0000               	nop	;# 
  4280  0144  0000               	nop	;# 
  4281  0145  1283               	bcf	3,5	;RP0=0, select bank0
  4282  0146  1303               	bcf	3,6	;RP1=0, select bank0
  4283  0147  1705               	bsf	5,6	;volatile
  4284  0148  0877               	movf	GetTouchKeyValue@62,w
  4285  0149  3E0C               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  4286  014A  0084               	movwf	4
  4287  014B  158A  2000  118A   	fcall	stringdir
  4288  014E  1703               	bsf	3,6	;RP1=1, select bank2
  4289  014F  0091               	movwf	17	;volatile
  4290  0150  0877               	movf	GetTouchKeyValue@62,w
  4291  0151  3E0F               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  4292  0152  0084               	movwf	4
  4293  0153  158A  2000  118A   	fcall	stringdir
  4294  0156  0092               	movwf	18	;volatile
  4295  0157  0000               	nop	;# 
  4296  0158  0000               	nop	;# 
  4297  0159  0000               	nop	;# 
  4298  015A  0000               	nop	;# 
  4299  015B  1283               	bcf	3,5	;RP0=0, select bank2
  4300  015C  1703               	bsf	3,6	;RP1=1, select bank2
  4301  015D  1411               	bsf	17,0	;volatile
  4302  015E  30D0               	movlw	208
  4303  015F  00F3               	movwf	GetTouchKeyValue@64
  4304  0160  3007               	movlw	7
  4305  0161  00F4               	movwf	GetTouchKeyValue@64+1
  4306  0162                     l1252:	
  4307  0162  1B91               	btfsc	17,7	;volatile
  4308  0163  2970               	goto	l3063
  4309  0164  3001               	movlw	1
  4310  0165  02F3               	subwf	GetTouchKeyValue@64,f
  4311  0166  1C03               	skipc
  4312  0167  03F4               	decf	GetTouchKeyValue@64+1,f
  4313  0168  0873               	movf	GetTouchKeyValue@64,w
  4314  0169  0474               	iorwf	GetTouchKeyValue@64+1,w
  4315  016A  1D03               	btfss	3,2
  4316  016B  2962               	goto	l1252
  4317  016C  30FF               	movlw	255
  4318  016D  1303               	bcf	3,6	;RP1=0, select bank0
  4319  016E  00B8               	movwf	_KeyCounter
  4320  016F  298A               	ljmp	l2881
  4321  0170                     l3063:	
  4322  0170  1003               	clrc
  4323  0171  0D77               	rlf	GetTouchKeyValue@62,w
  4324  0172  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4325  0173  0084               	movwf	4
  4326  0174  0816               	movf	22,w	;volatile
  4327  0175  1383               	bcf	3,7	;select IRP bank1
  4328  0176  0780               	addwf	0,f
  4329  0177  0F84               	incfsz	4,f
  4330  0178  0800               	movf	0,w
  4331  0179  1803               	skipnc
  4332  017A  0A00               	incf	0,w
  4333  017B  00FF               	movwf	127
  4334  017C  0817               	movf	23,w	;volatile
  4335  017D  077F               	addwf	127,w
  4336  017E  0080               	movwf	0
  4337  017F  0384               	decf	4,f
  4338  0180                     l3065:	
  4339  0180  3003               	movlw	3
  4340  0181  1003               	clrc
  4341  0182  0DF5               	rlf	GetTouchKeyValue@63,f
  4342  0183  0DF6               	rlf	GetTouchKeyValue@63+1,f
  4343  0184  0AF7               	incf	GetTouchKeyValue@62,f
  4344  0185  0277               	subwf	GetTouchKeyValue@62,w
  4345  0186  1C03               	skipc
  4346  0187  292E               	goto	l3033
  4347  0188  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  4348  0189  0008               	return
  4349  018A                     __end_of_GetTouchKeyValue:	
  4350  018A                     __ptext28:	
  4351 ;; *************** function _ClearResSum *****************
  4352 ;; Defined at:
  4353 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;		None
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;  56              1    2[COMMON] unsigned char 
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  1    wreg      void 
  4360 ;; Registers used:
  4361 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/200
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4367 ;;      Params:         0       0       0       0
  4368 ;;      Locals:         1       0       0       0
  4369 ;;      Temps:          0       0       0       0
  4370 ;;      Totals:         1       0       0       0
  4371 ;;Total ram usage:        1 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    1
  4374 ;; This function calls:
  4375 ;;		Nothing
  4376 ;; This function is called by:
  4377 ;;		_GetTouchKeyValue
  4378 ;;		_CheckTouchKey
  4379 ;;		_SystemEnterSleep
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           
  4384                           ;psect for function _ClearResSum
  4385  018A                     _ClearResSum:	
  4386  018A                     l2881:	
  4387                           ;incstack = 0
  4388                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  4389                           
  4390  018A  01F2               	clrf	ClearResSum@56
  4391  018B                     l2883:	
  4392  018B  1003               	clrc
  4393  018C  0D72               	rlf	ClearResSum@56,w
  4394  018D  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4395  018E  0084               	movwf	4
  4396  018F  3003               	movlw	3
  4397  0190  1383               	bcf	3,7	;select IRP bank1
  4398  0191  0180               	clrf	0
  4399  0192  0A84               	incf	4,f
  4400  0193  0180               	clrf	0
  4401  0194  0AF2               	incf	ClearResSum@56,f
  4402  0195  0272               	subwf	ClearResSum@56,w
  4403  0196  1803               	btfsc	3,0
  4404  0197  0008               	return
  4405  0198  298B               	goto	l2883
  4406  0199                     __end_of_ClearResSum:	
  4407  0199                     __ptext30:	
  4408 ;; *************** function _CheckOnceResult *****************
  4409 ;; Defined at:
  4410 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;		None
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;  71              2   10[BANK0 ] unsigned int 
  4415 ;;  72              2    7[BANK0 ] unsigned int 
  4416 ;;  73              2    4[BANK0 ] unsigned int 
  4417 ;;  68              1   12[BANK0 ] unsigned char 
  4418 ;;  69              1    9[BANK0 ] unsigned char 
  4419 ;;  70              1    6[BANK0 ] unsigned char 
  4420 ;; Return value:  Size  Location     Type
  4421 ;;                  1    wreg      void 
  4422 ;; Registers used:
  4423 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/100
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4429 ;;      Params:         0       0       0       0
  4430 ;;      Locals:         0       9       0       0
  4431 ;;      Temps:          0       4       0       0
  4432 ;;      Totals:         0      13       0       0
  4433 ;;Total ram usage:       13 bytes
  4434 ;; Hardware stack levels used:    1
  4435 ;; Hardware stack levels required when called:    3
  4436 ;; This function calls:
  4437 ;;		_KeyClearOne
  4438 ;;		_KeyHave
  4439 ;;		_KeyIsIn
  4440 ;; This function is called by:
  4441 ;;		_CheckTouchKey
  4442 ;; This function uses a non-reentrant model
  4443 ;;
  4444                           
  4445                           
  4446                           ;psect for function _CheckOnceResult
  4447  0199                     _CheckOnceResult:	
  4448                           
  4449                           ;incstack = 0
  4450                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4451  0199  1283               	bcf	3,5	;RP0=0, select bank0
  4452  019A  1303               	bcf	3,6	;RP1=0, select bank0
  4453  019B  01D9               	clrf	CheckOnceResult@68
  4454  019C  01F9               	clrf	_KeyData	;volatile
  4455  019D  01FA               	clrf	_KeyData+1	;volatile
  4456  019E  01B7               	clrf	_KeyMaxSub
  4457  019F                     l4405:	
  4458  019F  0859               	movf	CheckOnceResult@68,w
  4459  01A0  3907               	andlw	7
  4460  01A1  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4461  01A2  0084               	movwf	4
  4462  01A3  158A  2000  118A   	fcall	stringdir
  4463  01A6  00D3               	movwf	CheckOnceResult@70
  4464  01A7  1003               	clrc
  4465  01A8  0D59               	rlf	CheckOnceResult@68,w
  4466  01A9  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4467  01AA  0084               	movwf	4
  4468  01AB  3003               	movlw	3
  4469  01AC                     u4425:	
  4470  01AC  0A84               	incf	4,f
  4471  01AD  1003               	clrc
  4472  01AE  1383               	bcf	3,7	;select IRP bank1
  4473  01AF  0C80               	rrf	0,f
  4474  01B0  0384               	decf	4,f
  4475  01B1  0C80               	rrf	0,f
  4476  01B2  3EFF               	addlw	-1
  4477  01B3  1D03               	skipz
  4478  01B4  29AC               	goto	u4425
  4479  01B5  1003               	clrc
  4480  01B6  0D59               	rlf	CheckOnceResult@68,w
  4481  01B7  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4482  01B8  0084               	movwf	4
  4483  01B9  0800               	movf	0,w
  4484  01BA  00D7               	movwf	CheckOnceResult@71
  4485  01BB  0A84               	incf	4,f
  4486  01BC  0800               	movf	0,w
  4487  01BD  00D8               	movwf	CheckOnceResult@71+1
  4488  01BE  0859               	movf	CheckOnceResult@68,w
  4489  01BF  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4490  01C0  0084               	movwf	4
  4491  01C1  158A  2000  118A   	fcall	stringdir
  4492  01C4  00D6               	movwf	CheckOnceResult@69
  4493  01C5  00D4               	movwf	CheckOnceResult@72
  4494  01C6  01D5               	clrf	CheckOnceResult@72+1
  4495  01C7  0857               	movf	CheckOnceResult@71,w
  4496  01C8  07D4               	addwf	CheckOnceResult@72,f
  4497  01C9  1803               	skipnc
  4498  01CA  0AD5               	incf	CheckOnceResult@72+1,f
  4499  01CB  0858               	movf	CheckOnceResult@71+1,w
  4500  01CC  07D5               	addwf	CheckOnceResult@72+1,f
  4501  01CD  0859               	movf	CheckOnceResult@68,w
  4502  01CE  227A  118A         	fcall	_KeyIsIn
  4503  01D0  3A00               	xorlw	0
  4504  01D1  1003               	clrc
  4505  01D2  1D03               	skipz
  4506  01D3  2A2E               	goto	L11
  4507  01D4  0D59               	rlf	CheckOnceResult@68,w
  4508  01D5  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4509  01D6  0084               	movwf	4
  4510  01D7  1383               	bcf	3,7	;select IRP bank1
  4511  01D8  0800               	movf	0,w
  4512  01D9  00D1               	movwf	CheckOnceResult@73
  4513  01DA  0A84               	incf	4,f
  4514  01DB  0800               	movf	0,w
  4515  01DC  00D2               	movwf	CheckOnceResult@73+1
  4516  01DD  1003               	clrc
  4517  01DE  0D59               	rlf	CheckOnceResult@68,w
  4518  01DF  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4519  01E0  23B2  118A         	fcall	PL8	;call to abstracted procedure
  4520  01E2  0255               	subwf	CheckOnceResult@72+1,w
  4521  01E3  1D03               	skipz
  4522  01E4  29E7               	goto	u4445
  4523  01E5  084D               	movf	??_CheckOnceResult,w
  4524  01E6  0254               	subwf	CheckOnceResult@72,w
  4525  01E7                     u4445:	
  4526  01E7  1803               	skipnc
  4527  01E8  29F6               	goto	l4423
  4528  01E9  1003               	clrc
  4529  01EA  0D59               	rlf	CheckOnceResult@68,w
  4530  01EB  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4531  01EC  23B2  118A         	fcall	PL8	;call to abstracted procedure
  4532  01EE  0857               	movf	CheckOnceResult@71,w
  4533  01EF  024D               	subwf	??_CheckOnceResult,w
  4534  01F0  00D7               	movwf	CheckOnceResult@71
  4535  01F1  0858               	movf	CheckOnceResult@71+1,w
  4536  01F2  1C03               	skipc
  4537  01F3  0A58               	incf	CheckOnceResult@71+1,w
  4538  01F4  024E               	subwf	??_CheckOnceResult+1,w
  4539  01F5  2A1A               	goto	L9
  4540  01F6                     l4423:	
  4541  01F6  0852               	movf	CheckOnceResult@73+1,w
  4542  01F7  0255               	subwf	CheckOnceResult@72+1,w
  4543  01F8  1D03               	skipz
  4544  01F9  29FC               	goto	u4455
  4545  01FA  0851               	movf	CheckOnceResult@73,w
  4546  01FB  0254               	subwf	CheckOnceResult@72,w
  4547  01FC                     u4455:	
  4548  01FC  1803               	skipnc
  4549  01FD  2A72               	goto	l4469
  4550  01FE  1003               	clrc
  4551  01FF  0D59               	rlf	CheckOnceResult@68,w
  4552  0200  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4553  0201  23B2  118A         	fcall	PL8	;call to abstracted procedure
  4554  0203  0255               	subwf	CheckOnceResult@72+1,w
  4555  0204  1D03               	skipz
  4556  0205  2A08               	goto	u4465
  4557  0206  084D               	movf	??_CheckOnceResult,w
  4558  0207  0254               	subwf	CheckOnceResult@72,w
  4559  0208                     u4465:	
  4560  0208  1803               	skipnc
  4561  0209  2A72               	goto	l4469
  4562  020A  1003               	clrc
  4563  020B  0D59               	rlf	CheckOnceResult@68,w
  4564  020C  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4565  020D  0084               	movwf	4
  4566  020E  0851               	movf	CheckOnceResult@73,w
  4567  020F  0080               	movwf	0
  4568  0210  0A84               	incf	4,f
  4569  0211  0852               	movf	CheckOnceResult@73+1,w
  4570  0212  0080               	movwf	0
  4571  0213  0857               	movf	CheckOnceResult@71,w
  4572  0214  0251               	subwf	CheckOnceResult@73,w
  4573  0215  00D7               	movwf	CheckOnceResult@71
  4574  0216  0858               	movf	CheckOnceResult@71+1,w
  4575  0217  1C03               	skipc
  4576  0218  0A58               	incf	CheckOnceResult@71+1,w
  4577  0219  0252               	subwf	CheckOnceResult@73+1,w
  4578  021A                     L9:	
  4579  021A  00D8               	movwf	CheckOnceResult@71+1
  4580  021B  0859               	movf	CheckOnceResult@68,w
  4581  021C  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4582  021D  0084               	movwf	4
  4583  021E  0180               	clrf	0
  4584  021F  0858               	movf	CheckOnceResult@71+1,w
  4585  0220  1903               	btfsc	3,2
  4586  0221  2A24               	goto	l4437
  4587  0222  30FF               	movlw	255
  4588  0223  2A25               	goto	L10
  4589  0224                     l4437:	
  4590  0224  0857               	movf	CheckOnceResult@71,w
  4591  0225                     L10:	
  4592  0225  00D6               	movwf	CheckOnceResult@69
  4593  0226  0237               	subwf	_KeyMaxSub,w
  4594  0227  1803               	skipnc
  4595  0228  2A2C               	goto	l4443
  4596  0229  0856               	movf	CheckOnceResult@69,w
  4597  022A  00B7               	movwf	_KeyMaxSub
  4598  022B  2A6C               	goto	l4467
  4599  022C                     l4443:	
  4600  022C  0AB8               	incf	_KeyCounter,f
  4601  022D  2A72               	goto	l4469
  4602  022E                     L11:	
  4603  022E  0D59               	rlf	CheckOnceResult@68,w
  4604  022F  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4605  0230  0084               	movwf	4
  4606  0231  1383               	bcf	3,7	;select IRP bank1
  4607  0232  0800               	movf	0,w
  4608  0233  00CD               	movwf	??_CheckOnceResult
  4609  0234  0A84               	incf	4,f
  4610  0235  0800               	movf	0,w
  4611  0236  00CE               	movwf	??_CheckOnceResult+1
  4612  0237  084D               	movf	??_CheckOnceResult,w
  4613  0238  3E01               	addlw	1
  4614  0239  00CF               	movwf	??_CheckOnceResult+2
  4615  023A  084E               	movf	??_CheckOnceResult+1,w
  4616  023B  1803               	skipnc
  4617  023C  3E01               	addlw	1
  4618  023D  00D0               	movwf	??_CheckOnceResult+3
  4619  023E  0855               	movf	CheckOnceResult@72+1,w
  4620  023F  0250               	subwf	??_CheckOnceResult+3,w
  4621  0240  1D03               	skipz
  4622  0241  2A44               	goto	u4495
  4623  0242  0854               	movf	CheckOnceResult@72,w
  4624  0243  024F               	subwf	??_CheckOnceResult+2,w
  4625  0244                     u4495:	
  4626  0244  1C03               	btfss	3,0
  4627  0245  2A72               	goto	l4469
  4628  0246  1003               	clrc
  4629  0247  0D59               	rlf	CheckOnceResult@68,w
  4630  0248  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4631  0249  0084               	movwf	4
  4632  024A  0800               	movf	0,w
  4633  024B  23A0  118A         	fcall	PL4	;call to abstracted procedure
  4634  024D  1C03               	skipc
  4635  024E  2A58               	goto	l4457
  4636  024F  1003               	clrc
  4637  0250  0D59               	rlf	CheckOnceResult@68,w
  4638  0251  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4639  0252  0084               	movwf	4
  4640  0253  0800               	movf	0,w
  4641  0254  23A0  118A         	fcall	PL4	;call to abstracted procedure
  4642  0256  1803               	skipnc
  4643  0257  2A64               	goto	l4461
  4644  0258                     l4457:	
  4645  0258  0859               	movf	CheckOnceResult@68,w
  4646  0259  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4647  025A  0084               	movwf	4
  4648  025B  3009               	movlw	9
  4649  025C  0A80               	incf	0,f
  4650  025D  0200               	subwf	0,w
  4651  025E  1C03               	skipc
  4652  025F  2A68               	goto	l4465
  4653  0260  0859               	movf	CheckOnceResult@68,w
  4654  0261  228E  118A         	fcall	_KeyClearOne
  4655  0263  2A72               	goto	l4469
  4656  0264                     l4461:	
  4657  0264  0859               	movf	CheckOnceResult@68,w
  4658  0265  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4659  0266  0084               	movwf	4
  4660  0267  0180               	clrf	0
  4661  0268                     l4465:	
  4662  0268  087A               	movf	_KeyData+1,w	;volatile
  4663  0269  0479               	iorwf	_KeyData,w	;volatile
  4664  026A  1D03               	btfss	3,2
  4665  026B  2A72               	goto	l4469
  4666  026C                     l4467:	
  4667  026C  0853               	movf	CheckOnceResult@70,w
  4668  026D  00F2               	movwf	KeyHave@59
  4669  026E  01F3               	clrf	KeyHave@59+1
  4670  026F  0859               	movf	CheckOnceResult@68,w
  4671  0270  22A3  118A         	fcall	_KeyHave
  4672  0272                     l4469:	
  4673  0272  3003               	movlw	3
  4674  0273  1283               	bcf	3,5	;RP0=0, select bank0
  4675  0274  1303               	bcf	3,6	;RP1=0, select bank0
  4676  0275  0AD9               	incf	CheckOnceResult@68,f
  4677  0276  0259               	subwf	CheckOnceResult@68,w
  4678  0277  1803               	btfsc	3,0
  4679  0278  0008               	return
  4680  0279  299F               	goto	l4405
  4681  027A                     __end_of_CheckOnceResult:	
  4682  027A                     __ptext34:	
  4683 ;; *************** function _KeyIsIn *****************
  4684 ;; Defined at:
  4685 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;  45              1    wreg     unsigned char 
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;  45              1    3[COMMON] unsigned char 
  4690 ;;  46              1    2[COMMON] unsigned char 
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  1    wreg      unsigned char 
  4693 ;; Registers used:
  4694 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 300/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4700 ;;      Params:         0       0       0       0
  4701 ;;      Locals:         2       0       0       0
  4702 ;;      Temps:          0       0       0       0
  4703 ;;      Totals:         2       0       0       0
  4704 ;;Total ram usage:        2 bytes
  4705 ;; Hardware stack levels used:    2
  4706 ;; Hardware stack levels required when called:    1
  4707 ;; This function calls:
  4708 ;;		Nothing
  4709 ;; This function is called by:
  4710 ;;		_KeyClearIn
  4711 ;;		_CheckOnceResult
  4712 ;;		_CheckKeyOldValue
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           
  4717                           ;psect for function _KeyIsIn
  4718  027A                     _KeyIsIn:	
  4719                           
  4720                           ;incstack = 0
  4721                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4722                           ;KeyIsIn@45 stored from wreg
  4723  027A  00F3               	movwf	KeyIsIn@45
  4724  027B  3907               	andlw	7
  4725  027C  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4726  027D  0084               	movwf	4
  4727  027E  158A  2000  118A   	fcall	stringdir
  4728  0281  00F2               	movwf	KeyIsIn@46
  4729  0282  1DF3               	btfss	KeyIsIn@45,3
  4730  0283  2A88               	goto	l2867
  4731  0284  1283               	bcf	3,5	;RP0=0, select bank0
  4732  0285  1303               	bcf	3,6	;RP1=0, select bank0
  4733  0286  0833               	movf	_KeyFlag+1,w	;volatile
  4734  0287  2A8B               	goto	L16
  4735  0288                     l2867:	
  4736  0288  1283               	bcf	3,5	;RP0=0, select bank0
  4737  0289  1303               	bcf	3,6	;RP1=0, select bank0
  4738  028A  0832               	movf	_KeyFlag,w	;volatile
  4739  028B                     L16:	
  4740  028B  05F2               	andwf	KeyIsIn@46,f
  4741  028C  0872               	movf	KeyIsIn@46,w
  4742  028D  0008               	return
  4743  028E                     __end_of_KeyIsIn:	
  4744  028E                     __ptext32:	
  4745 ;; *************** function _KeyClearOne *****************
  4746 ;; Defined at:
  4747 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;  49              1    wreg     unsigned char 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;  49              1    2[COMMON] unsigned char 
  4752 ;; Return value:  Size  Location     Type
  4753 ;;                  1    wreg      void 
  4754 ;; Registers used:
  4755 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4761 ;;      Params:         0       0       0       0
  4762 ;;      Locals:         1       0       0       0
  4763 ;;      Temps:          0       0       0       0
  4764 ;;      Totals:         1       0       0       0
  4765 ;;Total ram usage:        1 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:    1
  4768 ;; This function calls:
  4769 ;;		Nothing
  4770 ;; This function is called by:
  4771 ;;		_KeyClearIn
  4772 ;;		_KeyStopClear
  4773 ;;		_CheckOnceResult
  4774 ;;		_SystemEnterSleep
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           
  4779                           ;psect for function _KeyClearOne
  4780  028E                     _KeyClearOne:	
  4781                           
  4782                           ;incstack = 0
  4783                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  4784                           ;KeyClearOne@49 stored from wreg
  4785  028E  00F2               	movwf	KeyClearOne@49
  4786  028F  1003               	clrc
  4787  0290  0D72               	rlf	KeyClearOne@49,w
  4788  0291  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4789  0292  0084               	movwf	4
  4790  0293  1383               	bcf	3,7	;select IRP bank1
  4791  0294  23DE  118A         	fcall	PL20	;call to abstracted procedure
  4792  0296  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4793  0297  0084               	movwf	4
  4794  0298  23DE  118A         	fcall	PL20	;call to abstracted procedure
  4795  029A  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4796  029B  0084               	movwf	4
  4797  029C  23DE               	fcall	PL20	;call to abstracted procedure
  4798  029D  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4799  029E  0084               	movwf	4
  4800  029F  0180               	clrf	0
  4801  02A0  0A84               	incf	4,f
  4802  02A1  0180               	clrf	0	;# 
  4803  02A2  0008               	return
  4804  02A3                     __end_of_KeyClearOne:	
  4805  02A3                     __ptext31:	
  4806 ;; *************** function _KeyHave *****************
  4807 ;; Defined at:
  4808 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;  58              1    wreg     unsigned char 
  4811 ;;  59              2    2[COMMON] unsigned int 
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;  58              1    4[COMMON] unsigned char 
  4814 ;; Return value:  Size  Location     Type
  4815 ;;                  1    wreg      void 
  4816 ;; Registers used:
  4817 ;;		wreg, status,2, status,0
  4818 ;; Tracked objects:
  4819 ;;		On entry : B00/0
  4820 ;;		On exit  : 0/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4823 ;;      Params:         2       0       0       0
  4824 ;;      Locals:         1       0       0       0
  4825 ;;      Temps:          0       0       0       0
  4826 ;;      Totals:         3       0       0       0
  4827 ;;Total ram usage:        3 bytes
  4828 ;; Hardware stack levels used:    1
  4829 ;; Hardware stack levels required when called:    1
  4830 ;; This function calls:
  4831 ;;		Nothing
  4832 ;; This function is called by:
  4833 ;;		_CheckOnceResult
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           
  4838                           ;psect for function _KeyHave
  4839  02A3                     _KeyHave:	
  4840                           
  4841                           ;incstack = 0
  4842                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  4843                           ;KeyHave@58 stored from wreg
  4844  02A3  00F4               	movwf	KeyHave@58
  4845  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  4846  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  4847  02A6  0AB8               	incf	_KeyCounter,f
  4848  02A7  01F9               	clrf	_KeyData	;volatile
  4849  02A8  01FA               	clrf	_KeyData+1	;volatile
  4850  02A9  1DF4               	btfss	KeyHave@58,3
  4851  02AA  2AAE               	goto	l3021
  4852  02AB  0872               	movf	KeyHave@59,w
  4853  02AC  00FA               	movwf	_KeyData+1	;volatile
  4854  02AD  0008               	return
  4855  02AE                     l3021:	
  4856  02AE  0872               	movf	KeyHave@59,w
  4857  02AF  00F9               	movwf	_KeyData	;volatile
  4858  02B0  0008               	return
  4859  02B1                     __end_of_KeyHave:	
  4860  02B1                     __ptext33:	
  4861 ;; *************** function _CheckKeyOldValue *****************
  4862 ;; Defined at:
  4863 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;		None
  4866 ;; Auto vars:     Size  Location     Type
  4867 ;;  80              2    2[BANK0 ] unsigned int 
  4868 ;;  79              2    0[BANK0 ] unsigned int 
  4869 ;;  78              1    4[BANK0 ] unsigned char 
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  1    wreg      void 
  4872 ;; Registers used:
  4873 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/100
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4879 ;;      Params:         0       0       0       0
  4880 ;;      Locals:         0       5       0       0
  4881 ;;      Temps:          2       0       0       0
  4882 ;;      Totals:         2       5       0       0
  4883 ;;Total ram usage:        7 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; Hardware stack levels required when called:    3
  4886 ;; This function calls:
  4887 ;;		_KeyIsIn
  4888 ;; This function is called by:
  4889 ;;		_CheckTouchKey
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           
  4894                           ;psect for function _CheckKeyOldValue
  4895  02B1                     _CheckKeyOldValue:	
  4896                           
  4897                           ;incstack = 0
  4898                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4899  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  4900  02B2  3004               	movlw	4
  4901  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  4902  02B4  01D1               	clrf	CheckKeyOldValue@78
  4903  02B5  0AB6               	incf	CheckKeyOldValue@F77,f
  4904  02B6  0236               	subwf	CheckKeyOldValue@F77,w
  4905  02B7  1C03               	btfss	3,0
  4906  02B8  0008               	return
  4907  02B9  01B6               	clrf	CheckKeyOldValue@F77
  4908  02BA                     l3485:	
  4909  02BA  1003               	clrc
  4910  02BB  0D51               	rlf	CheckKeyOldValue@78,w
  4911  02BC  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4912  02BD  0084               	movwf	4
  4913  02BE  1383               	bcf	3,7	;select IRP bank1
  4914  02BF  0800               	movf	0,w
  4915  02C0  00CD               	movwf	CheckKeyOldValue@79
  4916  02C1  0A84               	incf	4,f
  4917  02C2  0800               	movf	0,w
  4918  02C3  00CE               	movwf	CheckKeyOldValue@79+1
  4919  02C4  0851               	movf	CheckKeyOldValue@78,w
  4920  02C5  227A  118A         	fcall	_KeyIsIn
  4921  02C7  3A00               	xorlw	0
  4922  02C8  1003               	clrc
  4923  02C9  1D03               	skipz
  4924  02CA  2AFF               	goto	L15
  4925  02CB  0D51               	rlf	CheckKeyOldValue@78,w
  4926  02CC  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4927  02CD  0084               	movwf	4
  4928  02CE  1383               	bcf	3,7	;select IRP bank1
  4929  02CF  2392  118A         	fcall	PL2	;call to abstracted procedure
  4930  02D1  1903               	skipnz
  4931  02D2  024F               	subwf	CheckKeyOldValue@80,w
  4932  02D3  1C03               	skipc
  4933  02D4  2ADB               	goto	L12
  4934  02D5  0F4F               	incfsz	CheckKeyOldValue@80,w
  4935  02D6  2AFE               	goto	l1293
  4936  02D7  0A50               	incf	CheckKeyOldValue@80+1,w
  4937  02D8  1003               	clrc
  4938  02D9  1D03               	btfss	3,2
  4939  02DA  2AFF               	goto	L15
  4940  02DB                     L12:	
  4941  02DB  0D51               	rlf	CheckKeyOldValue@78,w
  4942  02DC  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4943  02DD  0084               	movwf	4
  4944  02DE  2392  118A         	fcall	PL2	;call to abstracted procedure
  4945  02E0  1903               	skipnz
  4946  02E1  024F               	subwf	CheckKeyOldValue@80,w
  4947  02E2  1C03               	skipc
  4948  02E3  2AEA               	goto	L13
  4949  02E4  0F4F               	incfsz	CheckKeyOldValue@80,w
  4950  02E5  2AFE               	goto	l1293
  4951  02E6  0A50               	incf	CheckKeyOldValue@80+1,w
  4952  02E7  1003               	clrc
  4953  02E8  1D03               	btfss	3,2
  4954  02E9  2AFF               	goto	L15
  4955  02EA                     L13:	
  4956  02EA  0D51               	rlf	CheckKeyOldValue@78,w
  4957  02EB  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4958  02EC  0084               	movwf	4
  4959  02ED  2392  118A         	fcall	PL2	;call to abstracted procedure
  4960  02EF  1903               	skipnz
  4961  02F0  024F               	subwf	CheckKeyOldValue@80,w
  4962  02F1  1C03               	skipc
  4963  02F2  2AF9               	goto	L14
  4964  02F3  0F4F               	incfsz	CheckKeyOldValue@80,w
  4965  02F4  2AFE               	goto	l1293
  4966  02F5  0A50               	incf	CheckKeyOldValue@80+1,w
  4967  02F6  1003               	clrc
  4968  02F7  1D03               	btfss	3,2
  4969  02F8  2AFF               	goto	L15
  4970  02F9                     L14:	
  4971  02F9  0D51               	rlf	CheckKeyOldValue@78,w
  4972  02FA  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4973  02FB  0084               	movwf	4
  4974  02FC  23EA  118A         	fcall	PL30	;call to abstracted procedure
  4975  02FE                     l1293:	
  4976  02FE  1003               	clrc
  4977  02FF                     L15:	
  4978  02FF  0D51               	rlf	CheckKeyOldValue@78,w
  4979  0300  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4980  0301  0084               	movwf	4
  4981  0302  1383               	bcf	3,7	;select IRP bank1
  4982  0303  23D6  118A         	fcall	PL18	;call to abstracted procedure
  4983  0305  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4984  0306  23C4  118A         	fcall	PL12	;call to abstracted procedure
  4985  0308  23D6  118A         	fcall	PL18	;call to abstracted procedure
  4986  030A  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4987  030B  23C4  118A         	fcall	PL12	;call to abstracted procedure
  4988  030D  23EA  118A         	fcall	PL30	;call to abstracted procedure
  4989  030F  3003               	movlw	3
  4990  0310  0AD1               	incf	CheckKeyOldValue@78,f
  4991  0311  0251               	subwf	CheckKeyOldValue@78,w
  4992  0312  1803               	btfsc	3,0
  4993  0313  0008               	return
  4994  0314  2ABA               	goto	l3485
  4995  0315                     __end_of_CheckKeyOldValue:	
  4996  0315                     __ptext26:	
  4997 ;; *************** function _KeyStopClear *****************
  4998 ;; Defined at:
  4999 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;		None
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;  53              1    3[COMMON] unsigned char 
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      void 
  5006 ;; Registers used:
  5007 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/100
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5013 ;;      Params:         0       0       0       0
  5014 ;;      Locals:         1       0       0       0
  5015 ;;      Temps:          0       0       0       0
  5016 ;;      Totals:         1       0       0       0
  5017 ;;Total ram usage:        1 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    2
  5020 ;; This function calls:
  5021 ;;		_KeyClearOne
  5022 ;; This function is called by:
  5023 ;;		_CheckTouchKey
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           
  5028                           ;psect for function _KeyStopClear
  5029  0315                     _KeyStopClear:	
  5030                           
  5031                           ;incstack = 0
  5032                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5033  0315  1283               	bcf	3,5	;RP0=0, select bank0
  5034  0316  1303               	bcf	3,6	;RP1=0, select bank0
  5035  0317  01B2               	clrf	_KeyFlag	;volatile
  5036  0318  01B3               	clrf	_KeyFlag+1	;volatile
  5037  0319  01F3               	clrf	KeyStopClear@53
  5038  031A                     l3397:	
  5039  031A  1003               	clrc
  5040  031B  0D73               	rlf	KeyStopClear@53,w
  5041  031C  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  5042  031D  0084               	movwf	4
  5043  031E  1383               	bcf	3,7	;select IRP bank1
  5044  031F  0180               	clrf	0
  5045  0320  0A84               	incf	4,f
  5046  0321  0180               	clrf	0
  5047  0322  0873               	movf	KeyStopClear@53,w
  5048  0323  228E  118A         	fcall	_KeyClearOne
  5049  0325  3003               	movlw	3
  5050  0326  0AF3               	incf	KeyStopClear@53,f
  5051  0327  0273               	subwf	KeyStopClear@53,w
  5052  0328  1803               	btfsc	3,0
  5053  0329  0008               	return
  5054  032A  2B1A               	goto	l3397
  5055  032B                     __end_of_KeyStopClear:	
  5056  032B                     __ptext24:	
  5057 ;; *************** function _TurnKeyFlags *****************
  5058 ;; Defined at:
  5059 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;		None
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;		None
  5064 ;; Return value:  Size  Location     Type
  5065 ;;                  1    wreg      void 
  5066 ;; Registers used:
  5067 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5068 ;; Tracked objects:
  5069 ;;		On entry : 0/100
  5070 ;;		On exit  : 0/0
  5071 ;;		Unchanged: 0/0
  5072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5073 ;;      Params:         0       0       0       0
  5074 ;;      Locals:         0       0       0       0
  5075 ;;      Temps:          0       0       0       0
  5076 ;;      Totals:         0       0       0       0
  5077 ;;Total ram usage:        0 bytes
  5078 ;; Hardware stack levels used:    1
  5079 ;; Hardware stack levels required when called:    4
  5080 ;; This function calls:
  5081 ;;		_KeyClearIn
  5082 ;; This function is called by:
  5083 ;;		_CheckTouchKey
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           
  5088                           ;psect for function _TurnKeyFlags
  5089  032B                     _TurnKeyFlags:	
  5090                           
  5091                           ;incstack = 0
  5092                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5093  032B  087A               	movf	_KeyData+1,w	;volatile
  5094  032C  0479               	iorwf	_KeyData,w	;volatile
  5095  032D  1903               	btfsc	3,2
  5096  032E  2B4F               	goto	l3545
  5097  032F  1283               	bcf	3,5	;RP0=0, select bank0
  5098  0330  1303               	bcf	3,6	;RP1=0, select bank0
  5099  0331  01B4               	clrf	TurnKeyFlags@F84
  5100  0332  0879               	movf	_KeyData,w	;volatile
  5101  0333  0620               	xorwf	_KeyOldData,w	;volatile
  5102  0334  1D03               	skipz
  5103  0335  2B48               	goto	l1311
  5104  0336  087A               	movf	_KeyData+1,w	;volatile
  5105  0337  0621               	xorwf	_KeyOldData+1,w	;volatile
  5106  0338  1D03               	skipz
  5107  0339  2B48               	goto	l1311
  5108  033A  3002               	movlw	2
  5109  033B  0AB5               	incf	TurnKeyFlags@F83,f
  5110  033C  0235               	subwf	TurnKeyFlags@F83,w
  5111  033D  1C03               	skipc
  5112  033E  0008               	return
  5113  033F  01B5               	clrf	TurnKeyFlags@F83
  5114  0340  0879               	movf	_KeyData,w	;volatile
  5115  0341  00B2               	movwf	_KeyFlag	;volatile
  5116  0342  087A               	movf	_KeyData+1,w	;volatile
  5117  0343  00B3               	movwf	_KeyFlag+1	;volatile
  5118  0344  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5119  0345  0008               	return
  5120  0346  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5121  0347  2B74               	ljmp	l2995
  5122  0348                     l1311:	
  5123  0348  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5124  0349  0879               	movf	_KeyData,w	;volatile
  5125  034A  00A0               	movwf	_KeyOldData	;volatile
  5126  034B  087A               	movf	_KeyData+1,w	;volatile
  5127  034C  00A1               	movwf	_KeyOldData+1	;volatile
  5128  034D  01B5               	clrf	TurnKeyFlags@F83
  5129  034E  0008               	return
  5130  034F                     l3545:	
  5131  034F  1283               	bcf	3,5	;RP0=0, select bank0
  5132  0350  1303               	bcf	3,6	;RP1=0, select bank0
  5133  0351  01B5               	clrf	TurnKeyFlags@F83
  5134  0352  01A0               	clrf	_KeyOldData	;volatile
  5135  0353  01A1               	clrf	_KeyOldData+1	;volatile
  5136  0354  3002               	movlw	2
  5137  0355  0AB4               	incf	TurnKeyFlags@F84,f
  5138  0356  0234               	subwf	TurnKeyFlags@F84,w
  5139  0357  1C03               	skipc
  5140  0358  0008               	return
  5141  0359  01B4               	clrf	TurnKeyFlags@F84
  5142  035A  01B2               	clrf	_KeyFlag	;volatile
  5143  035B  01B3               	clrf	_KeyFlag+1	;volatile
  5144  035C  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5145  035D  0008               	return
  5146  035E                     __end_of_TurnKeyFlags:	
  5147  035E                     __ptext29:	
  5148 ;; *************** function _CheckValidTime *****************
  5149 ;; Defined at:
  5150 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;		None
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;		None
  5155 ;; Return value:  Size  Location     Type
  5156 ;;                  1    wreg      void 
  5157 ;; Registers used:
  5158 ;;		wreg, status,2, status,0
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5164 ;;      Params:         0       0       0       0
  5165 ;;      Locals:         0       0       0       0
  5166 ;;      Temps:          0       0       0       0
  5167 ;;      Totals:         0       0       0       0
  5168 ;;Total ram usage:        0 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:    1
  5171 ;; This function calls:
  5172 ;;		Nothing
  5173 ;; This function is called by:
  5174 ;;		_CheckTouchKey
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178                           
  5179                           ;psect for function _CheckValidTime
  5180  035E                     _CheckValidTime:	
  5181  035E                     l3555:	
  5182                           ;incstack = 0
  5183                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  5184                           
  5185  035E  1283               	bcf	3,5	;RP0=0, select bank0
  5186  035F  1303               	bcf	3,6	;RP1=0, select bank0
  5187  0360  0833               	movf	_KeyFlag+1,w	;volatile
  5188  0361  0432               	iorwf	_KeyFlag,w	;volatile
  5189  0362  1903               	btfsc	3,2
  5190  0363  2B70               	goto	l3561
  5191  0364  1683               	bsf	3,5	;RP0=1, select bank1
  5192  0365  0AC1               	incf	CheckValidTime@F87^(0+128),f
  5193  0366  1903               	skipnz
  5194  0367  0AC2               	incf	(CheckValidTime@F87+1)^(0+128),f
  5195  0368  303A               	movlw	58
  5196  0369  0242               	subwf	(CheckValidTime@F87+1)^(0+128),w
  5197  036A  3098               	movlw	152
  5198  036B  1903               	skipnz
  5199  036C  0241               	subwf	CheckValidTime@F87^(0+128),w
  5200  036D  1C03               	skipc
  5201  036E  0008               	return
  5202  036F  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  5203  0370                     l3561:	
  5204  0370  1683               	bsf	3,5	;RP0=1, select bank1
  5205  0371  01C1               	clrf	CheckValidTime@F87^(0+128)
  5206  0372  01C2               	clrf	(CheckValidTime@F87+1)^(0+128)
  5207  0373  0008               	return
  5208  0374                     __end_of_CheckValidTime:	
  5209  0374                     __ptext25:	
  5210 ;; *************** function _KeyClearIn *****************
  5211 ;; Defined at:
  5212 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;		None
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;  51              1    4[COMMON] unsigned char 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  1    wreg      void 
  5219 ;; Registers used:
  5220 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5221 ;; Tracked objects:
  5222 ;;		On entry : 300/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5226 ;;      Params:         0       0       0       0
  5227 ;;      Locals:         1       0       0       0
  5228 ;;      Temps:          0       0       0       0
  5229 ;;      Totals:         1       0       0       0
  5230 ;;Total ram usage:        1 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    3
  5233 ;; This function calls:
  5234 ;;		_KeyClearOne
  5235 ;;		_KeyIsIn
  5236 ;; This function is called by:
  5237 ;;		_TurnKeyFlags
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241                           
  5242                           ;psect for function _KeyClearIn
  5243  0374                     _KeyClearIn:	
  5244  0374                     l2995:	
  5245                           ;incstack = 0
  5246                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5247                           
  5248  0374  01F4               	clrf	KeyClearIn@51
  5249  0375                     l3001:	
  5250  0375  0874               	movf	KeyClearIn@51,w
  5251  0376  227A  118A         	fcall	_KeyIsIn
  5252  0378  3A00               	xorlw	0
  5253  0379  1D03               	skipz
  5254  037A  2B7E               	goto	l3005
  5255  037B  0874               	movf	KeyClearIn@51,w
  5256  037C  228E  118A         	fcall	_KeyClearOne
  5257  037E                     l3005:	
  5258  037E  3003               	movlw	3
  5259  037F  0AF4               	incf	KeyClearIn@51,f
  5260  0380  0274               	subwf	KeyClearIn@51,w
  5261  0381  1803               	btfsc	3,0
  5262  0382  0008               	return
  5263  0383  2B75               	goto	l3001
  5264  0384                     __end_of_KeyClearIn:	
  5265  0384                     __ptext20:	
  5266 ;; *************** function _Refurbish_Sfr *****************
  5267 ;; Defined at:
  5268 ;;		line 97 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  5269 ;; Parameters:    Size  Location     Type
  5270 ;;		None
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;		None
  5273 ;; Return value:  Size  Location     Type
  5274 ;;                  1    wreg      void 
  5275 ;; Registers used:
  5276 ;;		wreg, status,2, status,0
  5277 ;; Tracked objects:
  5278 ;;		On entry : 200/0
  5279 ;;		On exit  : 300/0
  5280 ;;		Unchanged: 0/0
  5281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5282 ;;      Params:         0       0       0       0
  5283 ;;      Locals:         0       0       0       0
  5284 ;;      Temps:          0       0       0       0
  5285 ;;      Totals:         0       0       0       0
  5286 ;;Total ram usage:        0 bytes
  5287 ;; Hardware stack levels used:    1
  5288 ;; Hardware stack levels required when called:    1
  5289 ;; This function calls:
  5290 ;;		Nothing
  5291 ;; This function is called by:
  5292 ;;		_WorkSleep
  5293 ;;		_main
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           
  5298                           ;psect for function _Refurbish_Sfr
  5299  0384                     _Refurbish_Sfr:	
  5300                           
  5301                           ;main.c: 100: PIE1 = 2;
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  5305  0384  3002               	movlw	2
  5306  0385  1283               	bcf	3,5	;RP0=0, select bank0
  5307  0386  008E               	movwf	14	;volatile
  5308                           
  5309                           ;main.c: 101: PR2 = 250;
  5310  0387  30FA               	movlw	250
  5311  0388  0091               	movwf	17	;volatile
  5312                           
  5313                           ;main.c: 102: INTCON = 0XC0;
  5314  0389  30C0               	movlw	192
  5315  038A  008B               	movwf	11	;volatile
  5316                           
  5317                           ;main.c: 103: if (4 != T2CON)
  5318  038B  3004               	movlw	4
  5319  038C  0613               	xorwf	19,w	;volatile
  5320  038D  1903               	btfsc	3,2
  5321  038E  0008               	return
  5322                           
  5323                           ;main.c: 104: T2CON = 4;
  5324  038F  3004               	movlw	4
  5325  0390  0093               	movwf	19	;volatile
  5326  0391  0008               	return
  5327  0392                     __end_of_Refurbish_Sfr:	
  5328  0392                     PL2:	
  5329  0392  0800               	movf	0,w
  5330  0393  00CF               	movwf	CheckKeyOldValue@80
  5331  0394  0A84               	incf	4,f
  5332  0395  0800               	movf	0,w
  5333  0396  00D0               	movwf	CheckKeyOldValue@80+1
  5334  0397  084D               	movf	CheckKeyOldValue@79,w
  5335  0398  02CF               	subwf	CheckKeyOldValue@80,f
  5336  0399  084E               	movf	CheckKeyOldValue@79+1,w
  5337  039A  1C03               	skipc
  5338  039B  03D0               	decf	CheckKeyOldValue@80+1,f
  5339  039C  02D0               	subwf	CheckKeyOldValue@80+1,f
  5340  039D  3000               	movlw	0
  5341  039E  0250               	subwf	CheckKeyOldValue@80+1,w
  5342  039F  3402               	retlw	2
  5343  03A0                     __end_ofPL2:	
  5344  03A0                     PL4:	
  5345  03A0  00CD               	movwf	??_CheckOnceResult
  5346  03A1  0A84               	incf	4,f
  5347  03A2  0800               	movf	0,w
  5348  03A3  00CE               	movwf	??_CheckOnceResult+1
  5349  03A4  0856               	movf	CheckOnceResult@69,w
  5350  03A5  074D               	addwf	??_CheckOnceResult,w
  5351  03A6  00CF               	movwf	??_CheckOnceResult+2
  5352  03A7  084E               	movf	??_CheckOnceResult+1,w
  5353  03A8  1803               	skipnc
  5354  03A9  0A4E               	incf	??_CheckOnceResult+1,w
  5355  03AA  00D0               	movwf	??_CheckOnceResult+3
  5356  03AB  0858               	movf	CheckOnceResult@71+1,w
  5357  03AC  0250               	subwf	??_CheckOnceResult+3,w
  5358  03AD  1D03               	skipz
  5359  03AE  0008               	return
  5360  03AF  0857               	movf	CheckOnceResult@71,w
  5361  03B0  024F               	subwf	??_CheckOnceResult+2,w
  5362  03B1  0008               	return
  5363  03B2                     __end_ofPL4:	
  5364  03B2                     PL8:	
  5365  03B2  0084               	movwf	4
  5366  03B3  0800               	movf	0,w
  5367  03B4  00CD               	movwf	??_CheckOnceResult
  5368  03B5  0A84               	incf	4,f
  5369  03B6  0800               	movf	0,w
  5370  03B7  00CE               	movwf	??_CheckOnceResult+1
  5371  03B8  0008               	return
  5372  03B9                     __end_ofPL8:	
  5373  03B9                     PL10:	
  5374  03B9  0084               	movwf	4
  5375  03BA  084D               	movf	??_SystemEnterSleep,w
  5376  03BB  0080               	movwf	0
  5377  03BC  0A84               	incf	4,f
  5378  03BD  084E               	movf	??_SystemEnterSleep+1,w
  5379  03BE  0080               	movwf	0
  5380  03BF  1003               	clrc
  5381  03C0  0D55               	rlf	SystemEnterSleep@91,w
  5382  03C1  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5383  03C2  0084               	movwf	4
  5384  03C3  0008               	return
  5385  03C4                     __end_ofPL10:	
  5386  03C4                     PL12:	
  5387  03C4  0084               	movwf	4
  5388  03C5  0874               	movf	??_CheckKeyOldValue,w
  5389  03C6  0080               	movwf	0
  5390  03C7  0A84               	incf	4,f
  5391  03C8  0875               	movf	??_CheckKeyOldValue+1,w
  5392  03C9  0080               	movwf	0
  5393  03CA  1003               	clrc
  5394  03CB  0D51               	rlf	CheckKeyOldValue@78,w
  5395  03CC  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5396  03CD  0084               	movwf	4
  5397  03CE  0008               	return
  5398  03CF                     __end_ofPL12:	
  5399  03CF                     PL14:	
  5400  03CF  0084               	movwf	4
  5401  03D0  0800               	movf	0,w
  5402  03D1  00CD               	movwf	??_SystemEnterSleep
  5403  03D2  0A84               	incf	4,f
  5404  03D3  0800               	movf	0,w
  5405  03D4  00CE               	movwf	??_SystemEnterSleep+1
  5406  03D5  0008               	return
  5407  03D6                     __end_ofPL14:	
  5408  03D6                     PL18:	
  5409  03D6  0800               	movf	0,w
  5410  03D7  00F4               	movwf	??_CheckKeyOldValue
  5411  03D8  0A84               	incf	4,f
  5412  03D9  0800               	movf	0,w
  5413  03DA  00F5               	movwf	??_CheckKeyOldValue+1
  5414  03DB  1003               	clrc
  5415  03DC  0D51               	rlf	CheckKeyOldValue@78,w
  5416  03DD  0008               	return
  5417  03DE                     __end_ofPL18:	
  5418  03DE                     PL20:	
  5419  03DE  0180               	clrf	0
  5420  03DF  0A84               	incf	4,f
  5421  03E0  0180               	clrf	0
  5422  03E1  1003               	clrc
  5423  03E2  0D72               	rlf	KeyClearOne@49,w
  5424  03E3  0008               	return
  5425  03E4                     __end_ofPL20:	
  5426  03E4                     PL22:	
  5427  03E4  3041               	movlw	65
  5428  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  5429  03E6  0095               	movwf	21	;volatile
  5430  03E7  1415               	bsf	21,0	;volatile
  5431  03E8  0196               	clrf	22	;volatile
  5432  03E9  0008               	return
  5433  03EA                     __end_ofPL22:	
  5434  03EA                     PL30:	
  5435  03EA  084D               	movf	CheckKeyOldValue@79,w
  5436  03EB  0080               	movwf	0
  5437  03EC  0A84               	incf	4,f
  5438  03ED  084E               	movf	CheckKeyOldValue@79+1,w
  5439  03EE  0080               	movwf	0
  5440  03EF  0008               	return
  5441  03F0                     __end_ofPL30:	
  5442  03F0                     PL42:	
  5443  03F0  01D5               	clrf	SystemEnterSleep@91
  5444  03F1  01D3               	clrf	SystemEnterSleep@92
  5445  03F2  0AD3               	incf	SystemEnterSleep@92,f
  5446  03F3  01D4               	clrf	SystemEnterSleep@92+1
  5447  03F4  0008               	return
  5448  03F5                     __end_ofPL42:	
  5449  03F5                     PL44:	
  5450  03F5  0DD3               	rlf	SystemEnterSleep@92,f
  5451  03F6  0DD4               	rlf	SystemEnterSleep@92+1,f
  5452  03F7  0AD5               	incf	SystemEnterSleep@91,f
  5453  03F8  0255               	subwf	SystemEnterSleep@91,w
  5454  03F9  0008               	return
  5455  03FA                     __end_ofPL44:	
  5456                           
  5457                           	psect	text35
  5458  0E62                     __ptext35:	
  5459 ;; *************** function _Isr_Timer *****************
  5460 ;; Defined at:
  5461 ;;		line 201 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;		None
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;		None
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  1    wreg      void 
  5468 ;; Registers used:
  5469 ;;		wreg, status,2, status,0
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 300/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5475 ;;      Params:         0       0       0       0
  5476 ;;      Locals:         0       0       0       0
  5477 ;;      Temps:          2       0       0       0
  5478 ;;      Totals:         2       0       0       0
  5479 ;;Total ram usage:        2 bytes
  5480 ;; Hardware stack levels used:    1
  5481 ;; This function calls:
  5482 ;;		Nothing
  5483 ;; This function is called by:
  5484 ;;		Interrupt level 1
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           
  5489                           ;psect for function _Isr_Timer
  5490  0E62                     _Isr_Timer:	
  5491                           
  5492                           ;main.c: 203: if(TMR2IF)
  5493  0E62  1283               	bcf	3,5	;RP0=0, select bank0
  5494  0E63  1303               	bcf	3,6	;RP1=0, select bank0
  5495  0E64  1C8D               	btfss	13,1	;volatile
  5496  0E65  2E75               	goto	i1l3899
  5497                           
  5498                           ;main.c: 204: {
  5499                           ;main.c: 205: TMR2IF = 0;
  5500  0E66  108D               	bcf	13,1	;volatile
  5501                           
  5502                           ;main.c: 206: if(++MainTime >= 32)
  5503  0E67  3020               	movlw	32
  5504  0E68  0ACA               	incf	_MainTime,f	;volatile
  5505  0E69  024A               	subwf	_MainTime,w	;volatile
  5506  0E6A  1C03               	skipc
  5507  0E6B  2E76               	goto	i1l973
  5508                           
  5509                           ;main.c: 207: {
  5510                           ;main.c: 208: MainTime = 0;
  5511  0E6C  01CA               	clrf	_MainTime	;volatile
  5512                           
  5513                           ;main.c: 209: B_MainLoop = 1;
  5514  0E6D  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5515                           
  5516                           ;main.c: 210: if(++count1s >= 250)
  5517  0E6E  30FA               	movlw	250
  5518  0E6F  0AC9               	incf	_count1s,f
  5519  0E70  0249               	subwf	_count1s,w
  5520  0E71  1C03               	skipc
  5521  0E72  2E76               	goto	i1l973
  5522                           
  5523                           ;main.c: 211: {
  5524                           ;main.c: 212: count1s = 0;
  5525  0E73  01C9               	clrf	_count1s
  5526  0E74  2E76               	goto	i1l973
  5527  0E75                     i1l3899:	
  5528                           
  5529                           ;main.c: 216: else
  5530                           ;main.c: 217: {
  5531                           ;main.c: 218: PIR1 = 0;
  5532  0E75  018D               	clrf	13	;volatile
  5533  0E76                     i1l973:	
  5534  0E76  0871               	movf	??_Isr_Timer+1,w
  5535  0E77  008A               	movwf	10
  5536  0E78  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5537  0E79  0083               	movwf	3
  5538  0E7A  0EFE               	swapf	126,f
  5539  0E7B  0E7E               	swapf	126,w
  5540  0E7C  0009               	retfie
  5541  0E7D                     __end_of_Isr_Timer:	
  5542  007E                     btemp	set	126	;btemp
  5543  007E                     wtemp0	set	126
  5544                           
  5545                           	psect	intentry
  5546  0004                     __pintentry:	
  5547                           ;incstack = 0
  5548                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  5549                           
  5550  0004                     interrupt_function:	
  5551  007E                     saved_w	set	btemp
  5552  0004  00FE               	movwf	btemp
  5553  0005  0E03               	swapf	3,w
  5554  0006  00F0               	movwf	??_Isr_Timer
  5555  0007  080A               	movf	10,w
  5556  0008  00F1               	movwf	??_Isr_Timer+1
  5557  0009  158A  2E62         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    17
    Data        0
    BSS         87
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     34      79
    BANK1            80      4      45
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_GetTouchKeyValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11912
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    7909
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                           _bujinCtr
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     622
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     622
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1289
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     266
                                              2 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     912
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) _bujinCtr                                             3     3      0      68
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     837
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     837
                                              0 BANK0      9     9      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3166
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     181
                                              3 COMMON     5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _bujinCtr
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     22      4F       4       98.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      4      2D       6       56.3%
BANK2               50      0       0       7        0.0%
ABS                  0      0      88       8        0.0%
DATA                 0      0      88       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jun 19 18:02:21 2025

                        pc 0002                         PL2 0392                         PL4 03A0  
                       PL6 079F                         PL8 03B2              ??_KeyClearOne 0072  
    __size_of_TurnKeyFlags 0033                         fsr 0004           ??_CheckValidTime 0072  
                      PL10 03B9                        PL20 03DE                        PL12 03C4  
                      PL30 03EA                        PL22 03E4                        PL14 03CF  
                      PL40 07C8                        PL32 0FFA                        PL24 07B7  
                      PL16 07AE                        PL42 03F0                        PL34 07BE  
                      PL26 0FF0                        PL18 03D6                        PL44 03F5  
                      PL36 0F71                        PL28 0FF5                        PL38 07C3  
                      l961 0F67                        l995 05F2                        l989 05B6  
                      l999 0638                        _RA5 0435                        _RA6 0436  
                      _RA7 0437                        _RB6 0036                        _RB7 0037  
                      _PR2 0011        __size_of_ADC_Sample 00D1                        fsr0 0004  
                      indf 0000          ?_GetTouchKeyValue 0070   __end_of_Table_KeyChannel 0817  
                     S4755 07EC                       S4757 0817         ??_GetTouchKeyValue 0073  
             ___ftdiv@cntr 005C               ___ftdiv@sign 0061                       l1012 0716  
                     l1024 0759                       l1018 0739                       l1051 065E  
                     l1311 0348                       l3001 0375                       l1330 007B  
                     l1091 0FB9                       l1252 0162                       l1092 0FBC  
                     l3021 02AE                       l3005 037E                       l1093 0FBF  
                     l1342 009A                       l1094 0FC6                       l1095 0FC9  
                     l1096 0FCC                       l3033 012E                       l1097 0FCF  
                     l1089 0FB2                       l4001 059F                       l1372 06C6  
                     l1293 02FE                       l3037 0134                       l1517 054C  
                     l3063 0170                       l4103 0550                       l4031 05EE  
                     l4007 05A0                       l3065 0180                       l1529 0570  
                     l4113 056E                       l4105 0553                       l4041 063C  
                     l4025 05DB                       l4017 05C0                       l4115 0565  
                     l4107 0558                       l1571 0495                       l4131 0776  
                     l4205 00FB                       l4109 0560                       l4029 05E6  
                     l4053 0EA5                       l4063 0EB3                       l4209 0102  
                     l4225 0123                       l4313 06B7                       l4241 0718  
                     l4091 06DC                       l4307 06B0                       l4139 0789  
                     l4235 0710                       l4405 019F                       l4069 078E  
                     l4317 06BB                       l4309 06B1                       l4261 075C  
                     l4253 073B                       l4237 0713                       l4341 0E97  
                     l4423 01F6                       l3703 0F22                       l4191 00CE  
                     l4319 06BC                       l4247 0733                       l4351 0EA4  
                     l4343 0E98                       l3561 0370                       l3545 034F  
                     l3721 0F3C                       l3705 0F24                       l4513 04E4  
                     l4361 0F82                       l4353 0F76                       l4249 0736  
                     l4443 022C                       l3555 035E                       l4179 00C7  
                     l3803 07E6                       l4531 0507                       l4515 04E9  
                     l4283 0667                       l4259 0756                       l3485 02BA  
                     l4461 0264                       l4437 0224                       l3397 031A  
                     l3725 0F43                       l3717 0F35                       l3805 07E8  
                     l4541 0513                       l4373 0FA5                       l4365 0F89  
                     l4357 0F7E                       l4349 0EA3                       l4605 0434  
                     l3727 0F45                       l4543 051D                       l4535 050F  
                     l4383 0FD2                       l4287 066D                       l4615 0448  
                     l4465 0268                       l4457 0258                       l2881 018A  
                     l3729 0F48                       l3745 0F6C                       l4369 0F91  
                     l4625 0464                       l4617 0449                       l2867 0288  
                     l4467 026C                       l2883 018B                       l4475 0487  
                     l4547 052B                       l4387 0FDE                       l4299 069D  
                     l4635 0471                       l4627 0467                       l4469 0272  
                     l3693 0F13                       l4389 0FEA                       l4665 008F  
                     l4657 008A                       l4673 0099                       l3697 0F18  
                     l4497 04A8                       l4681 0EC1                       l2995 0374  
                     l4667 0093                       l4589 006A                       l3991 0594  
                     l3993 0596                       _ADON 04A8                       _CHS4 04B6  
                     u4215 0691                       _PIE1 000E                       _PIE2 0110  
                     u4405 0FA1                       u4415 0FAF                       u4425 01AC  
                     u3715 05E1                       _RAIF 006B                       u4445 01E7  
                     u4605 04EC                       u3725 05EC                       _INTF 0059  
                     u4455 01FC                       _RBIE 005B                       _RBIF 0058  
                     u4465 0208                       u3765 062D                       u3925 077C  
                     u4495 0244                       u4575 04B6                       u3785 0645  
                     _PIR1 000D                       _PIR2 010F                       u4927 0590  
                     u3995 00F7                       _TMR0 0081                       _WPUB 0008  
                     _main 0EBA               ___ftpack@arg 0072               ___ftpack@exp 0075  
                     btemp 007E              ?_KeyStopClear 0070                       start 000B  
             _TurnKeyFlags 032B            __end_of_KeyIsIn 028E            __end_of_KeyHave 02B1  
             ___fttol@exp1 006E              ??_Init_System 0072               ___fttol@lval 006A  
          TurnKeyFlags@F83 0035            TurnKeyFlags@F84 0034                      ?_main 0070  
          __end_of___ftdiv 04DB            __end_of___fttol 0534                      _T2CON 0013  
                    _IOCB5 004D   __end_of_SystemEnterSleep 012A            __end_of___lwmod 078E  
                    i1l973 0E76                      _PORTA 0086                      _PORTB 0006  
                    _PORTC 0106            __end_of_fanInit 0799                      _TRISA 0085  
                    _TRISB 0005                      _PWMTH 0018                      _TRISC 0105  
                    _PWMTL 0017            __end_of_fanStop 079F            __end_of_chrgCtr 07EC  
      ___lmul@multiplicand 0051        __end_of_KeyClearOne 02A3                 _KeyClearIn 0374  
           fanCtr@fan_temp 005B              ___ftpack@sign 0076             __pbitbssCOMMON 03C0  
                    pclath 000A            __end_of_pwmInit 0EB3                _ClearResSum 018A  
               _KeyCounter 0038                 _KeyOldData 0020            __end_of_pwmStop 0EBA  
           ??_KeyStopClear 0073                      status 0003                      wtemp0 007E  
          __end_of_workCtr 0479                 _KeyUpShake 00BE            __initialization 000D  
             __end_of_main 0EF8                     ??_main 0078              ___fttol@sign1 0069  
      __end_of_Init_System 003E                     _ADCON0 0095                     _ADCON1 0096  
                   _ADRESH 0099                     _ADRESL 0098           __end_of___ftpack 0582  
                   _GODONE 04A9                     i1l3899 0E75                     _LDO_EN 04B2  
                   _INTCON 000B           __end_of___lwtoft 0544         __size_of_KeyServer 0079  
                   _OSCCON 0014                     _TMR2IF 0069                     _PWMD3L 009C  
                   _PWMD4L 001B               ??_ADC_Sample 0073                     _PWMT4L 001C  
                   _TRISB5 002D                     _TRISB6 002E                  ??_KeyIsIn 0072  
                ??_KeyHave 0074              ClearResSum@56 0072         __size_of_Isr_Timer 001B  
         __end_of_bujinCtr 0FF0  __size_of_CheckKeyOldValue 0064                     ___lmul 06C2  
                   _b_kclr 03C2                     _b_kerr 03C1                     _fanCtr 0653  
                ??___ftdiv 0059                  ??___fttol 0066                  ??___lwmod 0076  
                ??_fanInit 0072                  ??_fanStop 0072                _KeyClearOne 028E  
                ??_chrgCtr 0072                     _result 00C3              _Table_KeyFalg 0806  
            _Table_KeyDown 080E         __end_of_ADC_Sample 0653                     saved_w 007E  
   __size_of_CheckTouchKey 002D                  ??_pwmInit 0072                  ??_pwmStop 0072  
              ?_KeyClearIn 0070                  ??_workCtr 0077            _CheckOnceResult 0199  
         __end_of_wuhuaCtr 0EA5    __end_of__initialization 001D         __size_of_WorkSleep 002F  
        CheckOnceResult@70 0053          CheckOnceResult@71 0057          CheckOnceResult@72 0054  
        CheckOnceResult@73 0051          CheckOnceResult@68 0059          CheckOnceResult@69 0056  
               ___ftdiv@f1 0056                 ___ftdiv@f2 0053                 ___ftdiv@f3 005D  
               ___fttol@f1 0062             __pcstackCOMMON 0070                _Init_System 0020  
               __end_ofPL2 03A0                 __end_ofPL4 03B2                 __end_ofPL6 07AE  
               __end_ofPL8 03B9          __end_of_KeyServer 0F71                 ___lwtoft@c 0050  
     __end_of_KeyStopClear 032B          __end_of_Isr_Timer 0E7D         __size_of_keyLedCtr 0075  
               __pbssBANK0 0020                 __pbssBANK1 00A0               _chrgFullFlag 0043  
__size_of_GetTouchKeyValue 0060               _chrgFullTime 0042              _CheckTouchKey 006D  
               __pmaintext 0EBA                    ?___lmul 004D                    ?_fanCtr 0070  
               __pintentry 0004        __size_of_KeyClearIn 0010             ___lmul@product 0072  
                ?___ftpack 0072          __end_of_WorkSleep 006D                  ?___lwtoft 0050  
        ?_SystemEnterSleep 0070    __end_of_CheckOnceResult 027A                    _KEYCON0 0111  
                  _KEYCON1 0112                    _KEYCON2 0113         ??_SystemEnterSleep 004D  
                  _B_OnOff 03C5                    _PWMD23H 009E     __size_of_Refurbish_Sfr 000E  
                  _PWMCON0 0015                    _PWMCON1 0016                    _PWMCON2 001D  
                ?_bujinCtr 0070       __end_of_Table_KeyCap 0814                 __stringtab 0800  
             ?_ClearResSum 0070                    _KeyData 0079                    _KeyFlag 0032  
                  _KeyIsIn 027A                    _KeyHave 02A3             ?_CheckTouchKey 0070  
          ADC_Sample@adldo 0072            ADC_Sample@admax 0056            ADC_Sample@admin 0054  
          ADC_Sample@adsum 0050           _CheckKeyOldValue 02B1            __size_of___lmul 0033  
                  ___ftdiv 0479            __size_of_fanCtr 006F                    ___fttol 04DB  
                  ___lwmod 076A          __end_of_keyLedCtr 076A                    _b_kover 03C4  
                  _fanInit 078E                    _fanDuty 0047                    _fanStop 0799  
               ??___ftpack 004D                    _chrgCtr 07CC                    __ptext1 03FA  
                  __ptext2 0E7D                    __ptext3 0EB3                    __ptext4 0EA5  
                  __ptext5 06F5                    __ptext6 076A                    __ptext7 0653  
                  __ptext8 0799                    __ptext9 078E                 _lowBatLock 0041  
               _lowBatTime 00C5                  ?_wuhuaCtr 0070                 ??___lwtoft 0077  
                  _count1s 0049                 _lowFanTime 0040                    _pwmInit 0EA5  
                  _pwmStop 0EB3    __size_of_CheckValidTime 0016                    clrloop0 0E5B  
                  _workCtr 03FA                 ??_bujinCtr 0072       end_of_initialization 001D  
            _Refurbish_Sfr 0384               _KeyOldValue0 00B2               _KeyOldValue1 00AC  
             _KeyOldValue2 00A6      __size_of_KeyStopClear 0016         SystemEnterSleep@91 0055  
       SystemEnterSleep@92 0053         SystemEnterSleep@93 0051         SystemEnterSleep@94 004F  
             ?_KeyClearOne 0070               _KeyReference 00A0                 ??_wuhuaCtr 0072  
        CheckValidTime@F87 00C1           ?_CheckOnceResult 0070                  KeyIsIn@45 0073  
                KeyIsIn@46 0072                  KeyHave@58 0074                  KeyHave@59 0072  
             ??_KeyClearIn 0074                ___ftdiv@exp 0060            ??_CheckTouchKey 0078  
             _KeyStopClear 0315           _GetTouchKeyValue 012A             ?_Refurbish_Sfr 0070  
             ?_Init_System 0070             __end_of___lmul 06F5             __end_of_fanCtr 06C2  
       __end_of_KeyClearIn 0384              WorkSleep@time 0039                  _KeyMaxSub 0037  
                _KeyResSum 00B8                __end_ofPL10 03C4                __end_ofPL20 03E4  
              __end_ofPL12 03CF                __end_ofPL30 03F0                __end_ofPL22 03EA  
              __end_ofPL14 03D6                __end_ofPL40 07CC                __end_ofPL32 1000  
              __end_ofPL24 07BE                __end_ofPL16 07B7                __end_ofPL42 03F5  
              __end_ofPL34 07C3                __end_ofPL26 0FF5                __end_ofPL18 03DE  
              __end_ofPL44 03FA                __end_ofPL36 0F76                __end_ofPL28 0FFA  
              __end_ofPL38 07C8        start_initialization 000D                  _KeyServer 0EF8  
                _Isr_Timer 0E62               _maxMotorStep 0026          workCtr@power_temp 00C7  
     __size_of_ClearResSum 000F              ?_TurnKeyFlags 0070                   ??___lmul 0072  
                 ??_fanCtr 0077          ADC_Sample@ad_temp 0058               _Table_KeyCap 0811  
        __size_of___ftpack 003E                __pbssCOMMON 0079                _fanOverTime 0045  
               ?_KeyServer 0070                  ___latbits 0001          __size_of___lwtoft 0010  
            __pcstackBANK0 004D              __pcstackBANK1 00C7                  _WorkSleep 003E  
           _CheckValidTime 035E   __end_of_CheckKeyOldValue 0315                 ?_Isr_Timer 0070  
      KeyServer@KeyOldFlag 003A          __size_of_bujinCtr 007A                   ?_KeyIsIn 0070  
                 ?_KeyHave 0072  __size_of_SystemEnterSleep 0090            ??_Refurbish_Sfr 0072  
           ??_TurnKeyFlags 0075                  __pnvBANK1 00CB                   ?___ftdiv 0053  
                 ?___fttol 0062                   ?___lwmod 0072                   ?_fanInit 0070  
                _closeTime 003C                   ?_fanStop 0070                   ?_chrgCtr 0070  
            _shanshuoTime2 002E              _shanshuoTime3 002C                  __pstrings 0800  
                __pswtext1 07EC                  __pswtext2 0817                  _bujinFlag 003F  
     __size_of_KeyClearOne 0015                  _keyLedCtr 06F5                  _firstLock 00CB  
   __end_of_CheckValidTime 0374                  _firstTime 00CC          __size_of_wuhuaCtr 0028  
               ?_WorkSleep 0070             ADC_Sample@adch 004E                   ?_pwmInit 0070  
                 ?_pwmStop 0070                   ?_workCtr 0070                ADC_Sample@i 004F  
              ADC_Sample@j 004D                   _KEYDATAH 0117                   _KEYDATAL 0116  
        interrupt_function 0004                  clear_ram0 0E5A             KeyStopClear@53 0073  
                _motorStep 0028        CheckKeyOldValue@F77 0036                  _powerFlag 003E  
              __stringbase 0805       __size_of_Init_System 001E      __end_of_Table_KeyFalg 080E  
    __end_of_Table_KeyDown 0811                 ?_keyLedCtr 0070   __end_of_GetTouchKeyValue 018A  
          ?_CheckValidTime 0070                ??_KeyServer 0072          ___lmul@multiplier 004D  
                _wuhuaFlag 0048                ??_Isr_Timer 0070                   _MainTime 004A  
               _ADC_Sample 0582           __size_of_KeyIsIn 0014           __size_of_KeyHave 000E  
         _Table_KeyChannel 0814           __size_of___ftdiv 0062           __size_of___fttol 0059  
         __size_of___lwmod 0024                   ___ftpack 0544           __size_of_fanInit 000B  
       __end_of__stringtab 0806           __size_of_fanStop 0006           __size_of_chrgCtr 0020  
                 ___lwtoft 0534                   _b_kover1 03C3                   _b_ksleep 03C0  
     __end_of_TurnKeyFlags 035E                   _fanValue 002A                   _adresult 004B  
                 _chrgFlag 0044                ??_WorkSleep 0078                   __ptext10 06C2  
                 __ptext11 0582                   __ptext20 0384                   __ptext12 0F76  
                 __ptext21 0EF8                   __ptext13 0534                   __ptext30 0199  
                 __ptext22 0020                   __ptext14 04DB                   __ptext31 02A3  
                 __ptext23 006D                   __ptext15 0479                   __ptext32 028E  
                 __ptext24 032B                   __ptext16 0544                   __ptext33 02B1  
                 __ptext25 0374                   __ptext17 07CC                   __ptext34 027A  
                 __ptext26 0315                   __ptext18 003E                   __ptext35 0E62  
                 __ptext27 012A                   __ptext19 009A                   __ptext28 018A  
                 __ptext29 035E           __size_of_pwmInit 000E           __size_of_pwmStop 0007  
             _shanshuoTime 0030                   _bujinCtr 0F76                   _count10s 0046  
         __size_of_workCtr 007F                   _keyCount 0024   __size_of_CheckOnceResult 00E1  
       GetTouchKeyValue@62 0077         GetTouchKeyValue@63 0075         GetTouchKeyValue@64 0073  
            __size_of_main 003E                _longKeyFlag 003D           _SystemEnterSleep 009A  
         bujinCtr@tempStep 0074      __end_of_CheckTouchKey 009A         CheckKeyOldValue@80 004F  
       CheckKeyOldValue@78 0051         CheckKeyOldValue@79 004D                   _test_adc 003B  
                 _power_ad 0022                   _workStep 007B                   _wuhuaCtr 0E7D  
              ??_keyLedCtr 0077          ?_CheckKeyOldValue 0070                   intlevel1 0000  
            ??_ClearResSum 0072         ??_CheckKeyOldValue 0074           ___lwmod@dividend 0074  
              ?_ADC_Sample 0072                  stringcode 0800                 _B_MainLoop 03C6  
        fanCtr@maxFanValue 005A                 _OPTION_REG 0001            ___lwmod@divisor 0072  
          ___lwmod@counter 0076                   stringdir 0800                   stringtab 0800  
            KeyClearOne@49 0072               KeyClearIn@51 0074      __end_of_Refurbish_Sfr 0392  
      __end_of_ClearResSum 0199          ??_CheckOnceResult 004D  
