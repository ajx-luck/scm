

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jun 10 14:13:51 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	swtext1,local,class=CONST,delta=2
    31                           	psect	pa_nodes0,global,class=CODE,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 1.45
    35                           ; Generated 16/11/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	strings
    70  041B                     __pstrings:	
    71  041B                     stringtab:	
    72  041B                     __stringtab:	
    73  041B                     stringcode:	
    74                           ;	String table - string pointers are 1 byte each
    75                           
    76  041B                     stringdir:	
    77  041B  3004               	movlw	high stringdir
    78  041C  008A               	movwf	10
    79  041D  0804               	movf	4,w
    80  041E  0A84               	incf	4,f
    81  041F  0782               	addwf	2,f
    82  0420                     __stringbase:	
    83  0420  3400               	retlw	0
    84  0421                     __end_of__stringtab:	
    85  0421                     _numArray:	
    86  0421  343F               	retlw	63
    87  0422  3406               	retlw	6
    88  0423  345B               	retlw	91
    89  0424  344F               	retlw	79
    90  0425  3466               	retlw	102
    91  0426  346D               	retlw	109
    92  0427  347D               	retlw	125
    93  0428  3407               	retlw	7
    94  0429  347F               	retlw	127
    95  042A  346F               	retlw	111
    96  042B  3473               	retlw	115
    97  042C  3476               	retlw	118
    98  042D                     __end_of_numArray:	
    99                           
   100                           	psect	nvBANK0
   101  0049                     __pnvBANK0:	
   102  0049                     _geweiNum:	
   103  0049                     	ds	1
   104  004A                     _shiweiNum:	
   105  004A                     	ds	1
   106  004B                     _firstTime:	
   107  004B                     	ds	1
   108  001D                     _PWMCON2	set	29
   109  0018                     _PWMTH	set	24
   110  0017                     _PWMTL	set	23
   111  0016                     _PWMCON1	set	22
   112  0015                     _PWMCON0	set	21
   113  0014                     _OSCCON	set	20
   114  0013                     _T2CON	set	19
   115  0011                     _PR2	set	17
   116  000E                     _PIE1	set	14
   117  000D                     _PIR1	set	13
   118  000B                     _INTCON	set	11
   119  0009                     _IOCB	set	9
   120  0008                     _WPUB	set	8
   121  0006                     _PORTB	set	6
   122  0005                     _TRISB	set	5
   123  0001                     _OPTION_REG	set	1
   124  0071                     _TMR2IE	set	113
   125  0073                     _RAIE	set	115
   126  0069                     _TMR2IF	set	105
   127  006B                     _RAIF	set	107
   128  0058                     _RBIF	set	88
   129  005B                     _RBIE	set	91
   130  005E                     _PEIE	set	94
   131  005F                     _GIE	set	95
   132  0033                     _RB3	set	51
   133  009E                     _PWMD23H	set	158
   134  009D                     _PWM23DT	set	157
   135  009B                     _PWMD2L	set	155
   136  0099                     _ADRESH	set	153
   137  0098                     _ADRESL	set	152
   138  0096                     _ADCON1	set	150
   139  0095                     _ADCON0	set	149
   140  0094                     _ANSEL1	set	148
   141  0093                     _ANSEL0	set	147
   142  0089                     _IOCA	set	137
   143  0088                     _WPUA	set	136
   144  0087                     _WPDA	set	135
   145  0086                     _PORTA	set	134
   146  0085                     _TRISA	set	133
   147  04B2                     _LDO_EN	set	1202
   148  04B6                     _CHS4	set	1206
   149  04A9                     _GODONE	set	1193
   150  0431                     _RA1	set	1073
   151  0432                     _RA2	set	1074
   152  0433                     _RA3	set	1075
   153  0434                     _RA4	set	1076
   154  0435                     _RA5	set	1077
   155                           
   156                           	psect	cinit
   157  000D                     start_initialization:	
   158                           ; #config settings
   159                           
   160  000D                     __initialization:	
   161                           
   162                           ; Clear objects allocated to COMMON
   163  000D  3077               	movlw	low __pbssCOMMON
   164  000E  0084               	movwf	4
   165  000F  307B               	movlw	low (__pbssCOMMON+4)
   166  0010  2457               	fcall	clear_ram0
   167  0011  3020               	movlw	low __pbssBANK0
   168                           
   169                           ; Clear objects allocated to BANK0
   170  0012  1383               	bcf	3,7	;select IRP bank0
   171  0013  0084               	movwf	4
   172  0014  3038               	movlw	low (__pbssBANK0+24)
   173  0015  2457               	fcall	clear_ram0
   174  0016                     end_of_initialization:	
   175                           ;End of C runtime variable initialization code
   176                           
   177  0016                     __end_of__initialization:	
   178  0016  0183               	clrf	3
   179  0017  2B08               	ljmp	_main	;jump to C main() function
   180                           
   181                           	psect	bssCOMMON
   182  0077                     __pbssCOMMON:	
   183  0077                     _power_ad:	
   184  0077                     	ds	2
   185  0079                     _showBatStep:	
   186  0079                     	ds	1
   187  007A                     _chrgFlag:	
   188  007A                     	ds	1
   189                           
   190                           	psect	bssBANK0
   191  0020                     __pbssBANK0:	
   192  0020                     _count30s:	
   193  0020                     	ds	2
   194  0022                     _lowShanTime:	
   195  0022                     	ds	2
   196  0024                     _result:	
   197  0024                     	ds	2
   198  0026                     _adresult:	
   199  0026                     	ds	2
   200  0028                     _lowBatTime:	
   201  0028                     	ds	1
   202  0029                     _curBatStep:	
   203  0029                     	ds	1
   204  002A                     _motorPwmFlag:	
   205  002A                     	ds	1
   206  002B                     _sleepTime:	
   207  002B                     	ds	1
   208  002C                     _lowBatFlag:	
   209  002C                     	ds	1
   210  002D                     _ledCntTime:	
   211  002D                     	ds	1
   212  002E                     _showBatTime:	
   213  002E                     	ds	1
   214  002F                     _ledCnt:	
   215  002F                     	ds	1
   216  0030                     _workStep:	
   217  0030                     	ds	1
   218  0031                     _chrgFullTime:	
   219  0031                     	ds	1
   220  0032                     _intCount10:	
   221  0032                     	ds	1
   222  0033                     _chrgFullFlag:	
   223  0033                     	ds	1
   224  0034                     _IntFlag:	
   225  0034                     	ds	1
   226  0035                     _count1s:	
   227  0035                     	ds	1
   228  0036                     _intCount:	
   229  0036                     	ds	1
   230  0037                     _test_adc:	
   231  0037                     	ds	1
   232                           
   233                           	psect	clrtext
   234  0457                     clear_ram0:	
   235                           ;	Called with FSR containing the base address, and
   236                           ;	W with the last address+1
   237                           
   238  0457  0064               	clrwdt	;clear the watchdog before getting into this loop
   239  0458                     clrloop0:	
   240  0458  0180               	clrf	0	;clear RAM location pointed to by FSR
   241  0459  0A84               	incf	4,f	;increment pointer
   242  045A  0604               	xorwf	4,w	;XOR with final address
   243  045B  1903               	btfsc	3,2	;have we reached the end yet?
   244  045C  3400               	retlw	0	;all done for this memory range, return
   245  045D  0604               	xorwf	4,w	;XOR again to restore value
   246  045E  2C58               	goto	clrloop0	;do the next byte
   247                           
   248                           	psect	cstackCOMMON
   249  0070                     __pcstackCOMMON:	
   250  0070                     ?_ledShow:	
   251  0070                     ??_ledShow:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     ?_Init_System:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     ?_AD_Init:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ?_chrgCtr:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0070                     ?_checkBatAD:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ?_setBatStep:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ?_keyCtr:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     ?_workCtr:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     ?_Sleep_Mode:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0070                     ?_pwmStop:	
   279                           ; 1 bytes @ 0x0
   280                           
   281  0070                     ?_pwmInit:	
   282                           ; 1 bytes @ 0x0
   283                           
   284  0070                     ?_Isr_Timer:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     ??_Isr_Timer:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0070                     ?_main:	
   291                           ; 1 bytes @ 0x0
   292                           
   293                           
   294                           ; 1 bytes @ 0x0
   295  0070                     	ds	3
   296  0073                     ??_Init_System:	
   297  0073                     ??_AD_Init:	
   298                           ; 1 bytes @ 0x3
   299                           
   300  0073                     ??_chrgCtr:	
   301                           ; 1 bytes @ 0x3
   302                           
   303  0073                     ??_keyCtr:	
   304                           ; 1 bytes @ 0x3
   305                           
   306  0073                     ??_Sleep_Mode:	
   307                           ; 1 bytes @ 0x3
   308                           
   309  0073                     ??_pwmStop:	
   310                           ; 1 bytes @ 0x3
   311                           
   312  0073                     ??_pwmInit:	
   313                           ; 1 bytes @ 0x3
   314                           
   315  0073                     ?_ADC_Sample:	
   316                           ; 1 bytes @ 0x3
   317                           
   318  0073                     ?___lbdiv:	
   319                           ; 1 bytes @ 0x3
   320                           
   321  0073                     ?___lbmod:	
   322                           ; 1 bytes @ 0x3
   323                           
   324  0073                     ?___lwdiv:	
   325                           ; 1 bytes @ 0x3
   326                           
   327  0073                     ADC_Sample@adldo:	
   328                           ; 2 bytes @ 0x3
   329                           
   330  0073                     ___lbdiv@divisor:	
   331                           ; 1 bytes @ 0x3
   332                           
   333  0073                     ___lbmod@divisor:	
   334                           ; 1 bytes @ 0x3
   335                           
   336  0073                     ___lwdiv@divisor:	
   337                           ; 1 bytes @ 0x3
   338                           
   339                           
   340                           ; 2 bytes @ 0x3
   341  0073                     	ds	1
   342  0074                     ??_checkBatAD:	
   343  0074                     ??___lbdiv:	
   344                           ; 1 bytes @ 0x4
   345                           
   346  0074                     ??___lbmod:	
   347                           ; 1 bytes @ 0x4
   348                           
   349  0074                     ___lbdiv@dividend:	
   350                           ; 1 bytes @ 0x4
   351                           
   352                           
   353                           ; 1 bytes @ 0x4
   354  0074                     	ds	1
   355  0075                     ___lbdiv@counter:	
   356  0075                     ___lwdiv@dividend:	
   357                           ; 1 bytes @ 0x5
   358                           
   359                           
   360                           ; 2 bytes @ 0x5
   361  0075                     	ds	1
   362  0076                     ___lbdiv@quotient:	
   363                           
   364                           ; 1 bytes @ 0x6
   365  0076                     	ds	1
   366  0077                     ??_setBatStep:	
   367  0077                     ??_workCtr:	
   368                           ; 1 bytes @ 0x7
   369                           
   370  0077                     ??_main:	
   371                           ; 1 bytes @ 0x7
   372                           
   373  0077                     ??___lwdiv:	
   374                           ; 1 bytes @ 0x7
   375                           
   376                           
   377                           	psect	cstackBANK0
   378  0038                     __pcstackBANK0:	
   379                           ; 1 bytes @ 0x7
   380                           
   381  0038                     ??_ADC_Sample:	
   382  0038                     ___lbmod@dividend:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0038                     ___lwdiv@counter:	
   386                           ; 1 bytes @ 0x0
   387                           
   388                           
   389                           ; 1 bytes @ 0x0
   390  0038                     	ds	1
   391  0039                     ___lbmod@counter:	
   392  0039                     ___lwdiv@quotient:	
   393                           ; 1 bytes @ 0x1
   394                           
   395                           
   396                           ; 2 bytes @ 0x1
   397  0039                     	ds	1
   398  003A                     ___lbmod@rem:	
   399                           
   400                           ; 1 bytes @ 0x2
   401  003A                     	ds	2
   402  003C                     ADC_Sample@j:	
   403                           
   404                           ; 1 bytes @ 0x4
   405  003C                     	ds	1
   406  003D                     ADC_Sample@adch:	
   407                           
   408                           ; 1 bytes @ 0x5
   409  003D                     	ds	1
   410  003E                     ADC_Sample@i:	
   411                           
   412                           ; 1 bytes @ 0x6
   413  003E                     	ds	1
   414  003F                     ADC_Sample@adsum:	
   415                           
   416                           ; 4 bytes @ 0x7
   417  003F                     	ds	4
   418  0043                     ADC_Sample@admin:	
   419                           
   420                           ; 2 bytes @ 0xB
   421  0043                     	ds	2
   422  0045                     ADC_Sample@admax:	
   423                           
   424                           ; 2 bytes @ 0xD
   425  0045                     	ds	2
   426  0047                     ADC_Sample@ad_temp:	
   427                           
   428                           ; 2 bytes @ 0xF
   429  0047                     	ds	2
   430                           
   431                           	psect	maintext
   432  0308                     __pmaintext:	
   433 ;;
   434 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   435 ;;
   436 ;; *************** function _main *****************
   437 ;; Defined at:
   438 ;;		line 117 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
   439 ;; Parameters:    Size  Location     Type
   440 ;;		None
   441 ;; Auto vars:     Size  Location     Type
   442 ;;		None
   443 ;; Return value:  Size  Location     Type
   444 ;;                  1    wreg      void 
   445 ;; Registers used:
   446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   447 ;; Tracked objects:
   448 ;;		On entry : B00/0
   449 ;;		On exit  : 100/0
   450 ;;		Unchanged: 0/0
   451 ;; Data sizes:     COMMON   BANK0   BANK1
   452 ;;      Params:         0       0       0
   453 ;;      Locals:         0       0       0
   454 ;;      Temps:          0       0       0
   455 ;;      Totals:         0       0       0
   456 ;;Total ram usage:        0 bytes
   457 ;; Hardware stack levels required when called:    4
   458 ;; This function calls:
   459 ;;		_AD_Init
   460 ;;		_Init_System
   461 ;;		_Sleep_Mode
   462 ;;		_checkBatAD
   463 ;;		_chrgCtr
   464 ;;		_keyCtr
   465 ;;		_setBatStep
   466 ;;		_workCtr
   467 ;; This function is called by:
   468 ;;		Startup code after reset
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472                           
   473                           ;psect for function _main
   474  0308                     _main:	
   475                           
   476                           ;main.c: 119: Init_System();
   477                           
   478                           ;incstack = 0
   479                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   480  0308  23EB               	fcall	_Init_System
   481                           
   482                           ;main.c: 120: AD_Init();
   483  0309  245F               	fcall	_AD_Init
   484                           
   485                           ;main.c: 122: baiweiNum = 1;
   486  030A  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   487  030B  0084               	movwf	4
   488  030C  241B               	fcall	stringdir
   489  030D  1283               	bcf	3,5	;RP0=0, select bank0
   490  030E  00C9               	movwf	_geweiNum
   491  030F  00CA               	movwf	_shiweiNum
   492                           
   493                           ;main.c: 123: firstTime = 250;
   494  0310  30FA               	movlw	250
   495  0311  00CB               	movwf	_firstTime
   496  0312                     l617:	
   497                           ;main.c: 124: while (1)
   498                           
   499  0312  0064               	clrwdt	;# 
   500                           
   501                           ;main.c: 127: if(intCount10 > 10)
   502  0313  300B               	movlw	11
   503  0314  1283               	bcf	3,5	;RP0=0, select bank0
   504  0315  0232               	subwf	_intCount10,w
   505  0316  1803               	btfsc	3,0
   506                           
   507                           ;main.c: 128: {
   508                           ;main.c: 129: intCount10 = 0;
   509  0317  01B2               	clrf	_intCount10
   510                           
   511                           ;main.c: 130: }
   512                           ;main.c: 131: if(!IntFlag)
   513  0318  0834               	movf	_IntFlag,w
   514  0319  1903               	btfsc	3,2
   515  031A  2B12               	goto	l617
   516                           
   517                           ;main.c: 133: IntFlag = 0;
   518  031B  01B4               	clrf	_IntFlag
   519                           
   520                           ;main.c: 134: chrgCtr();
   521  031C  2342               	fcall	_chrgCtr
   522                           
   523                           ;main.c: 135: checkBatAD();
   524  031D  2405               	fcall	_checkBatAD
   525                           
   526                           ;main.c: 136: setBatStep();
   527  031E  21A3               	fcall	_setBatStep
   528                           
   529                           ;main.c: 137: if(lowBatFlag == 0 && firstTime == 0 && chrgFlag == 0)
   530  031F  082C               	movf	_lowBatFlag,w
   531  0320  1D03               	btfss	3,2
   532  0321  2B29               	goto	l2658
   533  0322  084B               	movf	_firstTime,w
   534  0323  1D03               	btfss	3,2
   535  0324  2B29               	goto	l2658
   536  0325  087A               	movf	_chrgFlag,w
   537  0326  1D03               	btfss	3,2
   538  0327  2B29               	goto	l2658
   539                           
   540                           ;main.c: 138: {
   541                           ;main.c: 139: keyCtr();
   542  0328  244B               	fcall	_keyCtr
   543  0329                     l2658:	
   544                           
   545                           ;main.c: 140: }
   546                           ;main.c: 141: workCtr();
   547  0329  2100               	fcall	_workCtr
   548                           
   549                           ;main.c: 142: if(chrgFlag == 0 && workStep == 0 && firstTime == 0 && showBatTime == 0)
   550  032A  087A               	movf	_chrgFlag,w
   551  032B  1D03               	btfss	3,2
   552  032C  2B40               	goto	l2676
   553  032D  0830               	movf	_workStep,w
   554  032E  1D03               	btfss	3,2
   555  032F  2B40               	goto	l2676
   556  0330  084B               	movf	_firstTime,w
   557  0331  1D03               	btfss	3,2
   558  0332  2B40               	goto	l2676
   559                           
   560                           ;main.c: 143: {
   561                           ;main.c: 144: baiweiNum = 0;
   562  0333  082E               	movf	_showBatTime,w
   563  0334  1D03               	btfss	3,2
   564  0335  2B40               	goto	l2676
   565  0336  30C8               	movlw	200
   566                           
   567                           ;main.c: 145: shiweiNum = geweiNum = 0;
   568  0337  01C9               	clrf	_geweiNum
   569  0338  01CA               	clrf	_shiweiNum
   570                           
   571                           ;main.c: 146: if(++sleepTime >= 200)
   572  0339  0AAB               	incf	_sleepTime,f
   573  033A  022B               	subwf	_sleepTime,w
   574  033B  1C03               	skipc
   575  033C  2B12               	goto	l617
   576                           
   577                           ;main.c: 147: {
   578                           ;main.c: 148: sleepTime = 0;
   579  033D  01AB               	clrf	_sleepTime
   580                           
   581                           ;main.c: 149: Sleep_Mode();
   582  033E  22C6               	fcall	_Sleep_Mode
   583  033F  2B12               	goto	l617
   584  0340                     l2676:	
   585                           
   586                           ;main.c: 152: else
   587                           ;main.c: 153: {
   588                           ;main.c: 154: sleepTime = 0;
   589  0340  01AB               	clrf	_sleepTime
   590  0341  2B12               	goto	l617
   591  0342                     __end_of_main:	
   592                           
   593                           	psect	text1
   594  0100                     __ptext1:	
   595 ;; *************** function _workCtr *****************
   596 ;; Defined at:
   597 ;;		line 410 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;		None
   600 ;; Auto vars:     Size  Location     Type
   601 ;;		None
   602 ;; Return value:  Size  Location     Type
   603 ;;                  1    wreg      void 
   604 ;; Registers used:
   605 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   606 ;; Tracked objects:
   607 ;;		On entry : 100/0
   608 ;;		On exit  : 100/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMMON   BANK0   BANK1
   611 ;;      Params:         0       0       0
   612 ;;      Locals:         0       0       0
   613 ;;      Temps:          0       0       0
   614 ;;      Totals:         0       0       0
   615 ;;Total ram usage:        0 bytes
   616 ;; Hardware stack levels used:    1
   617 ;; Hardware stack levels required when called:    3
   618 ;; This function calls:
   619 ;;		___lbdiv
   620 ;;		___lbmod
   621 ;;		_pwmInit
   622 ;;		_pwmStop
   623 ;; This function is called by:
   624 ;;		_main
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           
   629                           ;psect for function _workCtr
   630  0100                     _workCtr:	
   631                           
   632                           ;main.c: 419: if(lowShanTime > 0)
   633                           
   634                           ;incstack = 0
   635                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   636  0100  0822               	movf	_lowShanTime,w
   637  0101  0423               	iorwf	_lowShanTime+1,w
   638  0102  1903               	btfsc	3,2
   639  0103  290E               	goto	l2544
   640                           
   641                           ;main.c: 420: {
   642                           ;main.c: 421: if(--lowShanTime == 0)
   643  0104  3001               	movlw	1
   644  0105  02A2               	subwf	_lowShanTime,f
   645  0106  3000               	movlw	0
   646  0107  1C03               	skipc
   647  0108  03A3               	decf	_lowShanTime+1,f
   648  0109  02A3               	subwf	_lowShanTime+1,f
   649  010A  0822               	movf	_lowShanTime,w
   650  010B  0423               	iorwf	_lowShanTime+1,w
   651  010C  1903               	btfsc	3,2
   652                           
   653                           ;main.c: 422: {
   654                           ;main.c: 423: workStep = 0;
   655  010D  01B0               	clrf	_workStep
   656  010E                     l2544:	
   657                           
   658                           ;main.c: 424: }
   659                           ;main.c: 425: }
   660                           ;main.c: 426: if(showBatTime > 0)
   661  010E  082E               	movf	_showBatTime,w
   662  010F  1D03               	btfss	3,2
   663                           
   664                           ;main.c: 427: {
   665                           ;main.c: 428: showBatTime--;
   666  0110  03AE               	decf	_showBatTime,f
   667                           
   668                           ;main.c: 429: }
   669                           ;main.c: 430: if(firstTime > 0)
   670  0111  084B               	movf	_firstTime,w
   671  0112  1903               	btfsc	3,2
   672  0113  2924               	goto	l2560
   673                           
   674                           ;main.c: 431: {
   675                           ;main.c: 432: firstTime--;
   676  0114  03CB               	decf	_firstTime,f
   677                           
   678                           ;main.c: 433: if(showBatStep < curBatStep)
   679  0115  0829               	movf	_curBatStep,w
   680  0116  0279               	subwf	_showBatStep,w
   681  0117  1803               	skipnc
   682  0118  291B               	goto	l2556
   683                           
   684                           ;main.c: 434: {
   685                           ;main.c: 435: showBatStep = curBatStep;
   686  0119  0829               	movf	_curBatStep,w
   687  011A  00F9               	movwf	_showBatStep
   688  011B                     l2556:	
   689                           
   690                           ;main.c: 436: }
   691                           ;main.c: 437: shiweiNum = numArray[8];
   692  011B  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   693  011C  0084               	movwf	4
   694  011D  241B               	fcall	stringdir
   695  011E  00CA               	movwf	_shiweiNum
   696                           
   697                           ;main.c: 438: geweiNum = numArray[8];
   698  011F  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   699  0120  0084               	movwf	4
   700  0121  241B               	fcall	stringdir
   701  0122  00C9               	movwf	_geweiNum
   702                           
   703                           ;main.c: 439: }
   704  0123  295F               	goto	l2598
   705  0124                     l2560:	
   706                           
   707                           ;main.c: 440: else if(workStep == 0 || (lowShanTime > 0 && count1s < 50))
   708  0124  0830               	movf	_workStep,w
   709  0125  1903               	btfsc	3,2
   710  0126  292F               	goto	l2566
   711  0127  0822               	movf	_lowShanTime,w
   712  0128  0423               	iorwf	_lowShanTime+1,w
   713  0129  1903               	btfsc	3,2
   714  012A  2933               	goto	l2570
   715  012B  3032               	movlw	50
   716  012C  0235               	subwf	_count1s,w
   717  012D  1803               	skipnc
   718  012E  2933               	goto	l2570
   719  012F                     l2566:	
   720                           
   721                           ;main.c: 441: {
   722                           ;main.c: 442: shiweiNum = 0;
   723  012F  01CA               	clrf	_shiweiNum
   724                           
   725                           ;main.c: 443: geweiNum = 0;
   726  0130  01C9               	clrf	_geweiNum
   727                           
   728                           ;main.c: 445: count900s = 0;
   729  0131  2467               	fcall	_pwmStop
   730                           
   731                           ;main.c: 446: }
   732  0132  295F               	goto	l2598
   733  0133                     l2570:	
   734                           
   735                           ;main.c: 447: else if(workStep == 1)
   736  0133  0B30               	decfsz	_workStep,w
   737  0134  2948               	goto	l2584
   738                           
   739                           ;main.c: 448: {
   740                           ;main.c: 449: if(chrgFlag == 0)
   741  0135  087A               	movf	_chrgFlag,w
   742  0136  1D03               	btfss	3,2
   743  0137  2940               	goto	l2576
   744                           
   745                           ;main.c: 450: {
   746                           ;main.c: 451: shiweiNum = numArray[10];
   747  0138  300B               	movlw	low (((_numArray+10)-__stringbase)| (0+32768))
   748  0139  0084               	movwf	4
   749  013A  241B               	fcall	stringdir
   750  013B  00CA               	movwf	_shiweiNum
   751                           
   752                           ;main.c: 452: geweiNum = numArray[1];
   753  013C  3002               	movlw	low (((_numArray+1)-__stringbase)| (0+32768))
   754  013D  0084               	movwf	4
   755  013E  241B               	fcall	stringdir
   756  013F  00C9               	movwf	_geweiNum
   757  0140                     l2576:	
   758                           
   759                           ;main.c: 453: }
   760                           ;main.c: 454: if(motorPwmFlag == 0)
   761  0140  082A               	movf	_motorPwmFlag,w
   762  0141  1D03               	btfss	3,2
   763  0142  2944               	goto	l2580
   764                           
   765                           ;main.c: 455: {
   766                           ;main.c: 456: pwmInit();
   767  0143  242D               	fcall	_pwmInit
   768  0144                     l2580:	
   769                           
   770                           ;main.c: 457: }
   771                           ;main.c: 458: PWMD23H = 0X00;
   772  0144  1683               	bsf	3,5	;RP0=1, select bank1
   773  0145  019E               	clrf	30	;volatile
   774                           
   775                           ;main.c: 459: PWMD2L = 60;
   776  0146  303C               	movlw	60
   777  0147  295E               	goto	L1
   778  0148                     l2584:	
   779                           ;main.c: 460: }
   780                           
   781                           
   782                           ;main.c: 461: else if(workStep == 2)
   783  0148  3002               	movlw	2
   784  0149  0630               	xorwf	_workStep,w
   785  014A  1D03               	btfss	3,2
   786  014B  295F               	goto	l2598
   787                           
   788                           ;main.c: 462: {
   789                           ;main.c: 463: if(chrgFlag == 0)
   790  014C  087A               	movf	_chrgFlag,w
   791  014D  1D03               	btfss	3,2
   792  014E  2957               	goto	l2590
   793                           
   794                           ;main.c: 464: {
   795                           ;main.c: 465: shiweiNum = numArray[10];
   796  014F  300B               	movlw	low (((_numArray+10)-__stringbase)| (0+32768))
   797  0150  0084               	movwf	4
   798  0151  241B               	fcall	stringdir
   799  0152  00CA               	movwf	_shiweiNum
   800                           
   801                           ;main.c: 466: geweiNum = numArray[2];
   802  0153  3003               	movlw	low (((_numArray+2)-__stringbase)| (0+32768))
   803  0154  0084               	movwf	4
   804  0155  241B               	fcall	stringdir
   805  0156  00C9               	movwf	_geweiNum
   806  0157                     l2590:	
   807                           
   808                           ;main.c: 467: }
   809                           ;main.c: 468: if(motorPwmFlag == 0)
   810  0157  082A               	movf	_motorPwmFlag,w
   811  0158  1D03               	btfss	3,2
   812  0159  295B               	goto	l2594
   813                           
   814                           ;main.c: 469: {
   815                           ;main.c: 470: pwmInit();
   816  015A  242D               	fcall	_pwmInit
   817  015B                     l2594:	
   818                           
   819                           ;main.c: 471: }
   820                           ;main.c: 472: PWMD23H = 0X00;
   821  015B  1683               	bsf	3,5	;RP0=1, select bank1
   822  015C  019E               	clrf	30	;volatile
   823                           
   824                           ;main.c: 473: PWMD2L = 99;
   825  015D  3063               	movlw	99
   826  015E                     L1:	
   827  015E  009B               	movwf	27	;volatile
   828  015F                     l2598:	
   829                           
   830                           ;main.c: 475: }
   831                           ;main.c: 476: if(chrgFlag || showBatTime > 0)
   832  015F  087A               	movf	_chrgFlag,w
   833  0160  1D03               	btfss	3,2
   834  0161  2966               	goto	l2602
   835  0162  1283               	bcf	3,5	;RP0=0, select bank0
   836  0163  082E               	movf	_showBatTime,w
   837  0164  1903               	btfsc	3,2
   838  0165  0008               	return
   839  0166                     l2602:	
   840                           
   841                           ;main.c: 477: {
   842                           ;main.c: 478: if(showBatStep >=99)
   843  0166  3063               	movlw	99
   844  0167  0279               	subwf	_showBatStep,w
   845  0168  1C03               	skipc
   846  0169  2974               	goto	l2606
   847                           
   848                           ;main.c: 479: {
   849                           ;main.c: 480: shiweiNum = numArray[9];
   850  016A  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
   851  016B  0084               	movwf	4
   852  016C  241B               	fcall	stringdir
   853  016D  1283               	bcf	3,5	;RP0=0, select bank0
   854  016E  00CA               	movwf	_shiweiNum
   855                           
   856                           ;main.c: 481: geweiNum = numArray[9];
   857  016F  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
   858  0170  0084               	movwf	4
   859  0171  241B               	fcall	stringdir
   860  0172  00C9               	movwf	_geweiNum
   861                           
   862                           ;main.c: 482: }
   863  0173  0008               	return
   864  0174                     l2606:	
   865                           
   866                           ;main.c: 484: {
   867                           ;main.c: 485: baiweiNum = 0;
   868  0174  300A               	movlw	10
   869  0175  0279               	subwf	_showBatStep,w
   870  0176  1C03               	skipc
   871  0177  2998               	goto	l2618
   872                           
   873                           ;main.c: 486: shiweiNum = numArray[showBatStep/10];
   874  0178  300A               	movlw	10
   875  0179  00F3               	movwf	___lbdiv@divisor
   876  017A  0879               	movf	_showBatStep,w
   877  017B  23D0               	fcall	___lbdiv
   878  017C  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
   879  017D  0084               	movwf	4
   880  017E  241B               	fcall	stringdir
   881  017F  1283               	bcf	3,5	;RP0=0, select bank0
   882  0180  00CA               	movwf	_shiweiNum
   883                           
   884                           ;main.c: 487: if(chrgFlag && count1s < 50)
   885  0181  087A               	movf	_chrgFlag,w
   886  0182  1903               	btfsc	3,2
   887  0183  298F               	goto	l2616
   888  0184  3032               	movlw	50
   889  0185  0235               	subwf	_count1s,w
   890  0186  1C03               	btfss	3,0
   891  0187  298D               	goto	l2614
   892  0188  298F               	goto	l2616
   893  0189                     l2622:	
   894  0189  3032               	movlw	50
   895  018A  0235               	subwf	_count1s,w
   896  018B  1803               	skipnc
   897  018C  299D               	goto	l2626
   898  018D                     l2614:	
   899                           
   900                           ;main.c: 488: {
   901                           ;main.c: 489: geweiNum = 0;
   902  018D  01C9               	clrf	_geweiNum
   903                           
   904                           ;main.c: 490: }
   905  018E  0008               	return
   906  018F                     l2616:	
   907                           
   908                           ;main.c: 491: else
   909                           ;main.c: 492: {
   910                           ;main.c: 493: geweiNum = numArray[showBatStep%10];
   911  018F  300A               	movlw	10
   912  0190  00F3               	movwf	___lbmod@divisor
   913  0191  0879               	movf	_showBatStep,w
   914  0192  23B4               	fcall	___lbmod
   915  0193  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
   916  0194  0084               	movwf	4
   917  0195  241B               	fcall	stringdir
   918  0196  00C9               	movwf	_geweiNum
   919  0197  0008               	return
   920  0198                     l2618:	
   921                           
   922                           ;main.c: 499: shiweiNum = 0;
   923  0198  1283               	bcf	3,5	;RP0=0, select bank0
   924  0199  01CA               	clrf	_shiweiNum
   925                           
   926                           ;main.c: 500: if(chrgFlag && count1s < 50)
   927  019A  087A               	movf	_chrgFlag,w
   928  019B  1D03               	btfss	3,2
   929  019C  2989               	goto	l2622
   930  019D                     l2626:	
   931                           
   932                           ;main.c: 504: else
   933                           ;main.c: 505: {
   934                           ;main.c: 506: geweiNum = numArray[showBatStep];
   935  019D  0879               	movf	_showBatStep,w
   936  019E  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
   937  019F  0084               	movwf	4
   938  01A0  241B               	fcall	stringdir
   939  01A1  00C9               	movwf	_geweiNum
   940  01A2  0008               	return
   941  01A3                     __end_of_workCtr:	
   942                           
   943                           	psect	text2
   944  0467                     __ptext2:	
   945 ;; *************** function _pwmStop *****************
   946 ;; Defined at:
   947 ;;		line 734 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
   948 ;; Parameters:    Size  Location     Type
   949 ;;		None
   950 ;; Auto vars:     Size  Location     Type
   951 ;;		None
   952 ;; Return value:  Size  Location     Type
   953 ;;                  1    wreg      void 
   954 ;; Registers used:
   955 ;;		status,2
   956 ;; Tracked objects:
   957 ;;		On entry : 100/0
   958 ;;		On exit  : 100/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMMON   BANK0   BANK1
   961 ;;      Params:         0       0       0
   962 ;;      Locals:         0       0       0
   963 ;;      Temps:          0       0       0
   964 ;;      Totals:         0       0       0
   965 ;;Total ram usage:        0 bytes
   966 ;; Hardware stack levels used:    1
   967 ;; Hardware stack levels required when called:    2
   968 ;; This function calls:
   969 ;;		Nothing
   970 ;; This function is called by:
   971 ;;		_workCtr
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           
   976                           ;psect for function _pwmStop
   977  0467                     _pwmStop:	
   978                           
   979                           ;main.c: 736: PWMCON0 &= 0XFB;
   980                           
   981                           ;incstack = 0
   982                           ; Regs used in _pwmStop: [status,2]
   983  0467  1115               	bcf	21,2	;volatile
   984                           
   985                           ;main.c: 737: RB3 = 0;
   986  0468  1186               	bcf	6,3	;volatile
   987                           
   988                           ;main.c: 738: motorPwmFlag = 0;
   989  0469  01AA               	clrf	_motorPwmFlag
   990  046A  0008               	return
   991  046B                     __end_of_pwmStop:	
   992                           
   993                           	psect	text3
   994  042D                     __ptext3:	
   995 ;; *************** function _pwmInit *****************
   996 ;; Defined at:
   997 ;;		line 718 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
   998 ;; Parameters:    Size  Location     Type
   999 ;;		None
  1000 ;; Auto vars:     Size  Location     Type
  1001 ;;		None
  1002 ;; Return value:  Size  Location     Type
  1003 ;;                  1    wreg      void 
  1004 ;; Registers used:
  1005 ;;		wreg, status,2
  1006 ;; Tracked objects:
  1007 ;;		On entry : 100/0
  1008 ;;		On exit  : 100/0
  1009 ;;		Unchanged: 0/0
  1010 ;; Data sizes:     COMMON   BANK0   BANK1
  1011 ;;      Params:         0       0       0
  1012 ;;      Locals:         0       0       0
  1013 ;;      Temps:          0       0       0
  1014 ;;      Totals:         0       0       0
  1015 ;;Total ram usage:        0 bytes
  1016 ;; Hardware stack levels used:    1
  1017 ;; Hardware stack levels required when called:    2
  1018 ;; This function calls:
  1019 ;;		Nothing
  1020 ;; This function is called by:
  1021 ;;		_workCtr
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           
  1026                           ;psect for function _pwmInit
  1027  042D                     _pwmInit:	
  1028                           
  1029                           ;main.c: 720: PWMCON1 = 0B00000000;
  1030                           
  1031                           ;incstack = 0
  1032                           ; Regs used in _pwmInit: [wreg+status,2]
  1033  042D  0196               	clrf	22	;volatile
  1034                           
  1035                           ;main.c: 721: PWMTH = 0X00;
  1036  042E  0198               	clrf	24	;volatile
  1037                           
  1038                           ;main.c: 722: PWMTL = 100;
  1039  042F  3064               	movlw	100
  1040  0430  0097               	movwf	23	;volatile
  1041                           
  1042                           ;main.c: 725: PWMD23H = 0;
  1043  0431  1683               	bsf	3,5	;RP0=1, select bank1
  1044  0432  019E               	clrf	30	;volatile
  1045                           
  1046                           ;main.c: 726: PWMD2L = 60;
  1047  0433  303C               	movlw	60
  1048  0434  009B               	movwf	27	;volatile
  1049                           
  1050                           ;main.c: 727: PWM23DT = 0X00;
  1051  0435  019D               	clrf	29	;volatile
  1052                           
  1053                           ;main.c: 729: PWMCON0 = 0X64;
  1054  0436  3064               	movlw	100
  1055  0437  1283               	bcf	3,5	;RP0=0, select bank0
  1056  0438  0095               	movwf	21	;volatile
  1057                           
  1058                           ;main.c: 730: PWMCON2 =0X00;
  1059  0439  019D               	clrf	29	;volatile
  1060                           
  1061                           ;main.c: 731: motorPwmFlag = 1;
  1062  043A  01AA               	clrf	_motorPwmFlag
  1063  043B  0AAA               	incf	_motorPwmFlag,f
  1064  043C  0008               	return
  1065  043D                     __end_of_pwmInit:	
  1066                           
  1067                           	psect	text4
  1068  03B4                     __ptext4:	
  1069 ;; *************** function ___lbmod *****************
  1070 ;; Defined at:
  1071 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;  dividend        1    wreg     unsigned char 
  1074 ;;  divisor         1    3[COMMON] unsigned char 
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  dividend        1    0[BANK0 ] unsigned char 
  1077 ;;  rem             1    2[BANK0 ] unsigned char 
  1078 ;;  counter         1    1[BANK0 ] unsigned char 
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  1    wreg      unsigned char 
  1081 ;; Registers used:
  1082 ;;		wreg, status,2, status,0
  1083 ;; Tracked objects:
  1084 ;;		On entry : 100/0
  1085 ;;		On exit  : 100/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMMON   BANK0   BANK1
  1088 ;;      Params:         1       0       0
  1089 ;;      Locals:         0       3       0
  1090 ;;      Temps:          1       0       0
  1091 ;;      Totals:         2       3       0
  1092 ;;Total ram usage:        5 bytes
  1093 ;; Hardware stack levels used:    1
  1094 ;; Hardware stack levels required when called:    2
  1095 ;; This function calls:
  1096 ;;		Nothing
  1097 ;; This function is called by:
  1098 ;;		_workCtr
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           
  1103                           ;psect for function ___lbmod
  1104  03B4                     ___lbmod:	
  1105                           
  1106                           ;incstack = 0
  1107                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1108                           ;___lbmod@dividend stored from wreg
  1109  03B4  00B8               	movwf	___lbmod@dividend
  1110  03B5  3008               	movlw	8
  1111  03B6  00B9               	movwf	___lbmod@counter
  1112  03B7  01BA               	clrf	___lbmod@rem
  1113  03B8                     l2420:	
  1114  03B8  0838               	movf	___lbmod@dividend,w
  1115  03B9  00F4               	movwf	??___lbmod
  1116  03BA  3007               	movlw	7
  1117  03BB  1003               	clrc
  1118  03BC                     L2:	
  1119  03BC  0CF4               	rrf	??___lbmod,f
  1120  03BD  3EFF               	addlw	-1
  1121  03BE  1003               	clrc
  1122  03BF  1D03               	skipz
  1123  03C0  2BBC               	goto	L2
  1124  03C1  0D3A               	rlf	___lbmod@rem,w
  1125  03C2  0474               	iorwf	??___lbmod,w
  1126  03C3  00BA               	movwf	___lbmod@rem
  1127  03C4  1003               	clrc
  1128  03C5  0DB8               	rlf	___lbmod@dividend,f
  1129  03C6  0873               	movf	___lbmod@divisor,w
  1130  03C7  023A               	subwf	___lbmod@rem,w
  1131  03C8  1C03               	skipc
  1132  03C9  2BCC               	goto	l2428
  1133  03CA  0873               	movf	___lbmod@divisor,w
  1134  03CB  02BA               	subwf	___lbmod@rem,f
  1135  03CC                     l2428:	
  1136  03CC  0BB9               	decfsz	___lbmod@counter,f
  1137  03CD  2BB8               	goto	l2420
  1138  03CE  083A               	movf	___lbmod@rem,w
  1139  03CF  0008               	return
  1140  03D0                     __end_of___lbmod:	
  1141                           
  1142                           	psect	text5
  1143  03D0                     __ptext5:	
  1144 ;; *************** function ___lbdiv *****************
  1145 ;; Defined at:
  1146 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;  dividend        1    wreg     unsigned char 
  1149 ;;  divisor         1    3[COMMON] unsigned char 
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;  dividend        1    4[COMMON] unsigned char 
  1152 ;;  quotient        1    6[COMMON] unsigned char 
  1153 ;;  counter         1    5[COMMON] unsigned char 
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  1    wreg      unsigned char 
  1156 ;; Registers used:
  1157 ;;		wreg, status,2, status,0
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMMON   BANK0   BANK1
  1163 ;;      Params:         1       0       0
  1164 ;;      Locals:         3       0       0
  1165 ;;      Temps:          0       0       0
  1166 ;;      Totals:         4       0       0
  1167 ;;Total ram usage:        4 bytes
  1168 ;; Hardware stack levels used:    1
  1169 ;; Hardware stack levels required when called:    2
  1170 ;; This function calls:
  1171 ;;		Nothing
  1172 ;; This function is called by:
  1173 ;;		_workCtr
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177                           
  1178                           ;psect for function ___lbdiv
  1179  03D0                     ___lbdiv:	
  1180                           
  1181                           ;incstack = 0
  1182                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1183                           ;___lbdiv@dividend stored from wreg
  1184  03D0  00F4               	movwf	___lbdiv@dividend
  1185  03D1  01F6               	clrf	___lbdiv@quotient
  1186  03D2  0873               	movf	___lbdiv@divisor,w
  1187  03D3  1903               	btfsc	3,2
  1188  03D4  2BE9               	goto	l1902
  1189  03D5  01F5               	clrf	___lbdiv@counter
  1190  03D6                     l1888:	
  1191  03D6  0AF5               	incf	___lbdiv@counter,f
  1192  03D7  1BF3               	btfsc	___lbdiv@divisor,7
  1193  03D8  2BDC               	goto	l1054
  1194  03D9  1003               	clrc
  1195  03DA  0DF3               	rlf	___lbdiv@divisor,f
  1196  03DB  2BD6               	goto	l1888
  1197  03DC                     l1054:	
  1198  03DC  1003               	clrc
  1199  03DD  0DF6               	rlf	___lbdiv@quotient,f
  1200  03DE  0873               	movf	___lbdiv@divisor,w
  1201  03DF  0274               	subwf	___lbdiv@dividend,w
  1202  03E0  1C03               	skipc
  1203  03E1  2BE6               	goto	L3
  1204  03E2  0873               	movf	___lbdiv@divisor,w
  1205  03E3  02F4               	subwf	___lbdiv@dividend,f
  1206  03E4  1476               	bsf	___lbdiv@quotient,0
  1207  03E5  1003               	clrc
  1208  03E6                     L3:	
  1209  03E6  0CF3               	rrf	___lbdiv@divisor,f
  1210  03E7  0BF5               	decfsz	___lbdiv@counter,f
  1211  03E8  2BDC               	goto	l1054
  1212  03E9                     l1902:	
  1213  03E9  0876               	movf	___lbdiv@quotient,w
  1214  03EA  0008               	return
  1215  03EB                     __end_of___lbdiv:	
  1216                           
  1217                           	psect	text6
  1218  01A3                     __ptext6:	
  1219 ;; *************** function _setBatStep *****************
  1220 ;; Defined at:
  1221 ;;		line 514 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;		None
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;		None
  1226 ;; Return value:  Size  Location     Type
  1227 ;;                  1    wreg      void 
  1228 ;; Registers used:
  1229 ;;		wreg, status,2, status,0, pclath, cstack
  1230 ;; Tracked objects:
  1231 ;;		On entry : 0/0
  1232 ;;		On exit  : 100/0
  1233 ;;		Unchanged: 0/0
  1234 ;; Data sizes:     COMMON   BANK0   BANK1
  1235 ;;      Params:         0       0       0
  1236 ;;      Locals:         0       0       0
  1237 ;;      Temps:          0       0       0
  1238 ;;      Totals:         0       0       0
  1239 ;;Total ram usage:        0 bytes
  1240 ;; Hardware stack levels used:    1
  1241 ;; Hardware stack levels required when called:    3
  1242 ;; This function calls:
  1243 ;;		___lwdiv
  1244 ;; This function is called by:
  1245 ;;		_main
  1246 ;; This function uses a non-reentrant model
  1247 ;;
  1248                           
  1249                           
  1250                           ;psect for function _setBatStep
  1251  01A3                     _setBatStep:	
  1252                           
  1253                           ;main.c: 516: if(lowBatFlag == 1 && lowShanTime == 0 && workStep > 0)
  1254                           
  1255                           ;incstack = 0
  1256                           ; Regs used in _setBatStep: [wreg+status,2+status,0+pclath+cstack]
  1257  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  1258  01A4  0B2C               	decfsz	_lowBatFlag,w
  1259  01A5  29B4               	goto	l2480
  1260  01A6  0822               	movf	_lowShanTime,w
  1261  01A7  0423               	iorwf	_lowShanTime+1,w
  1262  01A8  1D03               	btfss	3,2
  1263  01A9  29B4               	goto	l2480
  1264  01AA  0830               	movf	_workStep,w
  1265  01AB  1903               	btfsc	3,2
  1266  01AC  29B4               	goto	l2480
  1267  01AD  302C               	movlw	44
  1268                           
  1269                           ;main.c: 517: {
  1270                           ;main.c: 518: showBatStep = 0;
  1271  01AE  01F9               	clrf	_showBatStep
  1272                           
  1273                           ;main.c: 519: curBatStep = 0;
  1274  01AF  01A9               	clrf	_curBatStep
  1275                           
  1276                           ;main.c: 520: lowShanTime = 300;
  1277  01B0  00A2               	movwf	_lowShanTime
  1278  01B1  3001               	movlw	1
  1279  01B2  00A3               	movwf	_lowShanTime+1
  1280                           
  1281                           ;main.c: 521: }
  1282  01B3  0008               	return
  1283  01B4                     l2480:	
  1284                           
  1285                           ;main.c: 522: else if(power_ad < 1675)
  1286  01B4  3006               	movlw	6
  1287  01B5  0278               	subwf	_power_ad+1,w	;volatile
  1288  01B6  308B               	movlw	139
  1289  01B7  1903               	skipnz
  1290  01B8  0277               	subwf	_power_ad,w	;volatile
  1291  01B9  1803               	skipnc
  1292  01BA  29CE               	goto	l2490
  1293                           
  1294                           ;main.c: 523: {
  1295                           ;main.c: 524: if(count1s == 0)
  1296  01BB  0835               	movf	_count1s,w
  1297  01BC  1D03               	btfss	3,2
  1298  01BD  29CB               	goto	l727
  1299                           
  1300                           ;main.c: 525: {
  1301                           ;main.c: 526: if(showBatStep > 1)
  1302  01BE  3002               	movlw	2
  1303  01BF  0279               	subwf	_showBatStep,w
  1304  01C0  1C03               	skipc
  1305  01C1  29C7               	goto	l728
  1306                           
  1307                           ;main.c: 527: {
  1308                           ;main.c: 528: if(chrgFlag == 0)
  1309  01C2  087A               	movf	_chrgFlag,w
  1310  01C3  1D03               	btfss	3,2
  1311  01C4  29C9               	goto	l730
  1312                           
  1313                           ;main.c: 529: showBatStep--;
  1314  01C5  03F9               	decf	_showBatStep,f
  1315  01C6  29C9               	goto	l730
  1316  01C7                     l728:	
  1317                           
  1318                           ;main.c: 531: else
  1319                           ;main.c: 532: {
  1320                           ;main.c: 533: showBatStep = 1;
  1321  01C7  01F9               	clrf	_showBatStep
  1322  01C8  0AF9               	incf	_showBatStep,f
  1323  01C9                     l730:	
  1324                           
  1325                           ;main.c: 534: }
  1326                           ;main.c: 535: curBatStep = 1;
  1327  01C9  01A9               	clrf	_curBatStep
  1328  01CA  0AA9               	incf	_curBatStep,f
  1329  01CB                     l727:	
  1330                           
  1331                           ;main.c: 536: }
  1332                           ;main.c: 537: curBatStep = 1;
  1333  01CB  01A9               	clrf	_curBatStep
  1334  01CC  0AA9               	incf	_curBatStep,f
  1335                           
  1336                           ;main.c: 538: }
  1337  01CD  0008               	return
  1338  01CE                     l2490:	
  1339                           
  1340                           ;main.c: 539: else
  1341                           ;main.c: 540: {
  1342                           ;main.c: 541: if(power_ad < 1875)
  1343  01CE  3007               	movlw	7
  1344  01CF  0278               	subwf	_power_ad+1,w	;volatile
  1345  01D0  3053               	movlw	83
  1346  01D1  1903               	skipnz
  1347  01D2  0277               	subwf	_power_ad,w	;volatile
  1348  01D3  1803               	skipnc
  1349  01D4  29E3               	goto	l2494
  1350                           
  1351                           ;main.c: 542: {
  1352                           ;main.c: 543: curBatStep = (power_ad - 1675)/10;
  1353  01D5  300A               	movlw	10
  1354  01D6  00F3               	movwf	___lwdiv@divisor
  1355  01D7  01F4               	clrf	___lwdiv@divisor+1
  1356  01D8  0877               	movf	_power_ad,w	;volatile
  1357  01D9  3E75               	addlw	117
  1358  01DA  00F5               	movwf	___lwdiv@dividend
  1359  01DB  0878               	movf	_power_ad+1,w	;volatile
  1360  01DC  1803               	skipnc
  1361  01DD  3E01               	addlw	1
  1362  01DE  3EF9               	addlw	249
  1363  01DF  00F6               	movwf	___lwdiv@dividend+1
  1364  01E0  236D               	fcall	___lwdiv
  1365  01E1  0873               	movf	?___lwdiv,w
  1366  01E2  29F1               	goto	L4
  1367  01E3                     l2494:	
  1368                           ;main.c: 544: }
  1369                           
  1370                           
  1371                           ;main.c: 545: else
  1372                           ;main.c: 546: {
  1373                           ;main.c: 547: curBatStep = 10 + ((power_ad - 1875)/5);
  1374  01E3  3005               	movlw	5
  1375  01E4  00F3               	movwf	___lwdiv@divisor
  1376  01E5  01F4               	clrf	___lwdiv@divisor+1
  1377  01E6  0877               	movf	_power_ad,w	;volatile
  1378  01E7  3EAD               	addlw	173
  1379  01E8  00F5               	movwf	___lwdiv@dividend
  1380  01E9  0878               	movf	_power_ad+1,w	;volatile
  1381  01EA  1803               	skipnc
  1382  01EB  3E01               	addlw	1
  1383  01EC  3EF8               	addlw	248
  1384  01ED  00F6               	movwf	___lwdiv@dividend+1
  1385  01EE  236D               	fcall	___lwdiv
  1386  01EF  0873               	movf	?___lwdiv,w
  1387  01F0  3E0A               	addlw	10
  1388  01F1                     L4:	
  1389  01F1  00A9               	movwf	_curBatStep
  1390                           
  1391                           ;main.c: 548: }
  1392                           ;main.c: 549: if(curBatStep > 99)
  1393  01F2  3064               	movlw	100
  1394  01F3  0229               	subwf	_curBatStep,w
  1395  01F4  1C03               	skipc
  1396  01F5  29F8               	goto	l2500
  1397                           
  1398                           ;main.c: 550: {
  1399                           ;main.c: 551: curBatStep = 99;
  1400  01F6  3063               	movlw	99
  1401  01F7  00A9               	movwf	_curBatStep
  1402  01F8                     l2500:	
  1403                           
  1404                           ;main.c: 552: }
  1405                           ;main.c: 554: if(chrgFlag)
  1406  01F8  087A               	movf	_chrgFlag,w
  1407  01F9  1903               	btfsc	3,2
  1408  01FA  2A1E               	goto	l2524
  1409                           
  1410                           ;main.c: 555: {
  1411                           ;main.c: 556: if(chrgFullFlag)
  1412  01FB  0833               	movf	_chrgFullFlag,w
  1413  01FC  1903               	btfsc	3,2
  1414  01FD  2A17               	goto	l2512
  1415                           
  1416                           ;main.c: 557: {
  1417                           ;main.c: 558: if(++count30s >= 3000 && showBatStep < 99)
  1418  01FE  0AA0               	incf	_count30s,f
  1419  01FF  1903               	skipnz
  1420  0200  0AA1               	incf	_count30s+1,f
  1421  0201  300B               	movlw	11
  1422  0202  0221               	subwf	_count30s+1,w
  1423  0203  30B8               	movlw	184
  1424  0204  2A0B               	goto	L5
  1425  0205                     l2514:	
  1426                           
  1427                           ;main.c: 565: {
  1428                           ;main.c: 566: if(++count30s >= 30000 && showBatStep < 99)
  1429  0205  0AA0               	incf	_count30s,f
  1430  0206  1903               	skipnz
  1431  0207  0AA1               	incf	_count30s+1,f
  1432  0208  3075               	movlw	117
  1433  0209  0221               	subwf	_count30s+1,w
  1434  020A  3030               	movlw	48
  1435  020B                     L5:	
  1436  020B  1903               	skipnz
  1437  020C  0220               	subwf	_count30s,w
  1438  020D  1C03               	skipc
  1439  020E  0008               	return
  1440  020F  3063               	movlw	99
  1441  0210  0279               	subwf	_showBatStep,w
  1442  0211  1803               	skipnc
  1443  0212  0008               	return
  1444                           
  1445                           ;main.c: 559: {
  1446                           ;main.c: 560: count30s = 0;
  1447  0213  01A0               	clrf	_count30s
  1448  0214  01A1               	clrf	_count30s+1
  1449                           
  1450                           ;main.c: 561: showBatStep++;
  1451  0215  0AF9               	incf	_showBatStep,f
  1452  0216  0008               	return
  1453  0217                     l2512:	
  1454                           
  1455                           ;main.c: 564: else if(curBatStep > showBatStep)
  1456  0217  0829               	movf	_curBatStep,w
  1457  0218  0279               	subwf	_showBatStep,w
  1458  0219  1C03               	btfss	3,0
  1459  021A  2A05               	goto	l2514
  1460  021B                     l2522:	
  1461                           
  1462                           ;main.c: 573: else
  1463                           ;main.c: 574: {
  1464                           ;main.c: 575: count30s = 0;
  1465  021B  01A0               	clrf	_count30s
  1466  021C  01A1               	clrf	_count30s+1
  1467  021D  0008               	return
  1468  021E                     l2524:	
  1469                           
  1470                           ;main.c: 578: else
  1471                           ;main.c: 579: {
  1472                           ;main.c: 580: if(curBatStep < showBatStep && showBatStep > 1)
  1473  021E  0879               	movf	_showBatStep,w
  1474  021F  0229               	subwf	_curBatStep,w
  1475  0220  1803               	skipnc
  1476  0221  2A1B               	goto	l2522
  1477  0222  3002               	movlw	2
  1478  0223  0279               	subwf	_showBatStep,w
  1479  0224  1C03               	skipc
  1480  0225  2A1B               	goto	l2522
  1481                           
  1482                           ;main.c: 581: {
  1483                           ;main.c: 582: if(++count30s >= 1500 && showBatStep > 1)
  1484  0226  0AA0               	incf	_count30s,f
  1485  0227  1903               	skipnz
  1486  0228  0AA1               	incf	_count30s+1,f
  1487  0229  3005               	movlw	5
  1488  022A  0221               	subwf	_count30s+1,w
  1489  022B  30DC               	movlw	220
  1490  022C  1903               	skipnz
  1491  022D  0220               	subwf	_count30s,w
  1492  022E  1C03               	skipc
  1493  022F  0008               	return
  1494  0230  3002               	movlw	2
  1495  0231  0279               	subwf	_showBatStep,w
  1496  0232  1C03               	skipc
  1497  0233  0008               	return
  1498                           
  1499                           ;main.c: 583: {
  1500                           ;main.c: 584: count30s = 0;
  1501  0234  01A0               	clrf	_count30s
  1502  0235  01A1               	clrf	_count30s+1
  1503                           
  1504                           ;main.c: 585: showBatStep--;
  1505  0236  03F9               	decf	_showBatStep,f
  1506  0237  0008               	return
  1507  0238                     __end_of_setBatStep:	
  1508                           
  1509                           	psect	text7
  1510  036D                     __ptext7:	
  1511 ;; *************** function ___lwdiv *****************
  1512 ;; Defined at:
  1513 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;  divisor         2    3[COMMON] unsigned int 
  1516 ;;  dividend        2    5[COMMON] unsigned int 
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;  quotient        2    1[BANK0 ] unsigned int 
  1519 ;;  counter         1    0[BANK0 ] unsigned char 
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  2    3[COMMON] unsigned int 
  1522 ;; Registers used:
  1523 ;;		wreg, status,2, status,0
  1524 ;; Tracked objects:
  1525 ;;		On entry : 100/0
  1526 ;;		On exit  : 100/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMMON   BANK0   BANK1
  1529 ;;      Params:         4       0       0
  1530 ;;      Locals:         0       3       0
  1531 ;;      Temps:          0       0       0
  1532 ;;      Totals:         4       3       0
  1533 ;;Total ram usage:        7 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; Hardware stack levels required when called:    2
  1536 ;; This function calls:
  1537 ;;		Nothing
  1538 ;; This function is called by:
  1539 ;;		_setBatStep
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           
  1544                           ;psect for function ___lwdiv
  1545  036D                     ___lwdiv:	
  1546                           
  1547                           ;incstack = 0
  1548                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1549  036D  01B9               	clrf	___lwdiv@quotient
  1550  036E  01BA               	clrf	___lwdiv@quotient+1
  1551  036F  0873               	movf	___lwdiv@divisor,w
  1552  0370  0474               	iorwf	___lwdiv@divisor+1,w
  1553  0371  1903               	btfsc	3,2
  1554  0372  2B92               	goto	l2456
  1555  0373  01B8               	clrf	___lwdiv@counter
  1556  0374                     L6:	
  1557  0374  0AB8               	incf	___lwdiv@counter,f
  1558  0375  1BF4               	btfsc	___lwdiv@divisor+1,7
  1559  0376  2B7B               	goto	l2444
  1560  0377  1003               	clrc
  1561  0378  0DF3               	rlf	___lwdiv@divisor,f
  1562  0379  0DF4               	rlf	___lwdiv@divisor+1,f
  1563  037A  2B74               	goto	L6
  1564  037B                     l2444:	
  1565  037B  1003               	clrc
  1566  037C  0DB9               	rlf	___lwdiv@quotient,f
  1567  037D  0DBA               	rlf	___lwdiv@quotient+1,f
  1568  037E  0874               	movf	___lwdiv@divisor+1,w
  1569  037F  0276               	subwf	___lwdiv@dividend+1,w
  1570  0380  1D03               	skipz
  1571  0381  2B84               	goto	u2375
  1572  0382  0873               	movf	___lwdiv@divisor,w
  1573  0383  0275               	subwf	___lwdiv@dividend,w
  1574  0384                     u2375:	
  1575  0384  1C03               	skipc
  1576  0385  2B8E               	goto	L7
  1577  0386  0873               	movf	___lwdiv@divisor,w
  1578  0387  02F5               	subwf	___lwdiv@dividend,f
  1579  0388  0874               	movf	___lwdiv@divisor+1,w
  1580  0389  1C03               	skipc
  1581  038A  03F6               	decf	___lwdiv@dividend+1,f
  1582  038B  02F6               	subwf	___lwdiv@dividend+1,f
  1583  038C  1439               	bsf	___lwdiv@quotient,0
  1584  038D  1003               	clrc
  1585  038E                     L7:	
  1586  038E  0CF4               	rrf	___lwdiv@divisor+1,f
  1587  038F  0CF3               	rrf	___lwdiv@divisor,f
  1588  0390  0BB8               	decfsz	___lwdiv@counter,f
  1589  0391  2B7B               	goto	l2444
  1590  0392                     l2456:	
  1591  0392  083A               	movf	___lwdiv@quotient+1,w
  1592  0393  00F4               	movwf	?___lwdiv+1
  1593  0394  0839               	movf	___lwdiv@quotient,w
  1594  0395  00F3               	movwf	?___lwdiv
  1595  0396  0008               	return
  1596  0397                     __end_of___lwdiv:	
  1597                           
  1598                           	psect	text8
  1599  044B                     __ptext8:	
  1600 ;; *************** function _keyCtr *****************
  1601 ;; Defined at:
  1602 ;;		line 388 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;		None
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;		None
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, status,2
  1611 ;; Tracked objects:
  1612 ;;		On entry : 100/0
  1613 ;;		On exit  : 100/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMMON   BANK0   BANK1
  1616 ;;      Params:         0       0       0
  1617 ;;      Locals:         0       0       0
  1618 ;;      Temps:          0       0       0
  1619 ;;      Totals:         0       0       0
  1620 ;;Total ram usage:        0 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    2
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           
  1631                           ;psect for function _keyCtr
  1632  044B                     _keyCtr:	
  1633                           
  1634                           ;main.c: 390: if(PORTB & 0x02)
  1635                           
  1636                           ;incstack = 0
  1637                           ; Regs used in _keyCtr: [wreg+status,2]
  1638  044B  1C86               	btfss	6,1	;volatile
  1639  044C  2C55               	goto	l2112
  1640                           
  1641                           ;main.c: 391: {
  1642                           ;main.c: 392: if(PORTB & 0x04)
  1643  044D  1D06               	btfss	6,2	;volatile
  1644  044E  2C52               	goto	l2110
  1645                           
  1646                           ;main.c: 393: {
  1647                           ;main.c: 394: workStep = 1;
  1648  044F  01B0               	clrf	_workStep
  1649  0450  0AB0               	incf	_workStep,f
  1650                           
  1651                           ;main.c: 395: }
  1652  0451  0008               	return
  1653  0452                     l2110:	
  1654                           
  1655                           ;main.c: 396: else
  1656                           ;main.c: 397: {
  1657                           ;main.c: 398: workStep = 2;
  1658  0452  3002               	movlw	2
  1659  0453  00B0               	movwf	_workStep
  1660  0454  0008               	return
  1661  0455                     l2112:	
  1662                           
  1663                           ;main.c: 401: else
  1664                           ;main.c: 402: {
  1665                           ;main.c: 403: workStep = 0;
  1666  0455  01B0               	clrf	_workStep
  1667  0456  0008               	return
  1668  0457                     __end_of_keyCtr:	
  1669                           
  1670                           	psect	text9
  1671  0342                     __ptext9:	
  1672 ;; *************** function _chrgCtr *****************
  1673 ;; Defined at:
  1674 ;;		line 311 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;		None
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;		None
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      void 
  1681 ;; Registers used:
  1682 ;;		wreg, status,2, status,0
  1683 ;; Tracked objects:
  1684 ;;		On entry : 100/0
  1685 ;;		On exit  : 100/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMMON   BANK0   BANK1
  1688 ;;      Params:         0       0       0
  1689 ;;      Locals:         0       0       0
  1690 ;;      Temps:          0       0       0
  1691 ;;      Totals:         0       0       0
  1692 ;;Total ram usage:        0 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    2
  1695 ;; This function calls:
  1696 ;;		Nothing
  1697 ;; This function is called by:
  1698 ;;		_main
  1699 ;; This function uses a non-reentrant model
  1700 ;;
  1701                           
  1702                           
  1703                           ;psect for function _chrgCtr
  1704  0342                     _chrgCtr:	
  1705                           
  1706                           ;main.c: 313: if(PORTB & 0x01)
  1707                           
  1708                           ;incstack = 0
  1709                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  1710  0342  1C06               	btfss	6,0	;volatile
  1711  0343  2B58               	goto	l2014
  1712                           
  1713                           ;main.c: 314: {
  1714                           ;main.c: 315: chrgFlag = 1;
  1715  0344  01FA               	clrf	_chrgFlag
  1716  0345  0AFA               	incf	_chrgFlag,f
  1717                           
  1718                           ;main.c: 316: workStep = 0;
  1719  0346  01B0               	clrf	_workStep
  1720                           
  1721                           ;main.c: 317: lowBatFlag = 0;
  1722  0347  01AC               	clrf	_lowBatFlag
  1723                           
  1724                           ;main.c: 318: if(PORTA & 0x01)
  1725  0348  1683               	bsf	3,5	;RP0=1, select bank1
  1726  0349  1C06               	btfss	6,0	;volatile
  1727  034A  2B4E               	goto	l2008
  1728                           
  1729                           ;main.c: 319: {
  1730                           ;main.c: 320: chrgFullTime = 0;
  1731  034B  1283               	bcf	3,5	;RP0=0, select bank0
  1732  034C  01B1               	clrf	_chrgFullTime
  1733                           
  1734                           ;main.c: 321: }
  1735  034D  0008               	return
  1736  034E                     l2008:	
  1737                           
  1738                           ;main.c: 322: else
  1739                           ;main.c: 323: {
  1740                           ;main.c: 324: if(++chrgFullTime >= 200)
  1741  034E  30C8               	movlw	200
  1742  034F  1283               	bcf	3,5	;RP0=0, select bank0
  1743  0350  0AB1               	incf	_chrgFullTime,f
  1744  0351  0231               	subwf	_chrgFullTime,w
  1745  0352  1C03               	skipc
  1746  0353  0008               	return
  1747                           
  1748                           ;main.c: 325: {
  1749                           ;main.c: 326: chrgFullTime = 0;
  1750  0354  01B1               	clrf	_chrgFullTime
  1751                           
  1752                           ;main.c: 327: chrgFullFlag = 1;
  1753  0355  01B3               	clrf	_chrgFullFlag
  1754  0356  0AB3               	incf	_chrgFullFlag,f
  1755  0357  0008               	return
  1756  0358                     l2014:	
  1757  0358  3006               	movlw	6
  1758                           
  1759                           ;main.c: 331: else
  1760                           ;main.c: 332: {
  1761                           ;main.c: 333: chrgFlag = 0;
  1762  0359  01FA               	clrf	_chrgFlag
  1763                           
  1764                           ;main.c: 334: chrgFullFlag = 0;
  1765  035A  01B3               	clrf	_chrgFullFlag
  1766                           
  1767                           ;main.c: 335: chrgFullTime = 0;
  1768  035B  01B1               	clrf	_chrgFullTime
  1769                           
  1770                           ;main.c: 336: if(power_ad < 1563)
  1771  035C  0278               	subwf	_power_ad+1,w	;volatile
  1772  035D  301B               	movlw	27
  1773  035E  1903               	skipnz
  1774  035F  0277               	subwf	_power_ad,w	;volatile
  1775  0360  1803               	skipnc
  1776  0361  2B6B               	goto	l2024
  1777                           
  1778                           ;main.c: 337: {
  1779                           ;main.c: 338: if(++lowBatTime > 200)
  1780  0362  30C9               	movlw	201
  1781  0363  0AA8               	incf	_lowBatTime,f
  1782  0364  0228               	subwf	_lowBatTime,w
  1783  0365  1C03               	skipc
  1784  0366  0008               	return
  1785                           
  1786                           ;main.c: 339: {
  1787                           ;main.c: 340: lowBatTime = 0;
  1788  0367  01A8               	clrf	_lowBatTime
  1789                           
  1790                           ;main.c: 341: lowBatFlag = 1;
  1791  0368  01AC               	clrf	_lowBatFlag
  1792  0369  0AAC               	incf	_lowBatFlag,f
  1793  036A  0008               	return
  1794  036B                     l2024:	
  1795                           
  1796                           ;main.c: 344: else
  1797                           ;main.c: 345: {
  1798                           ;main.c: 346: lowBatTime = 0;
  1799  036B  01A8               	clrf	_lowBatTime
  1800  036C  0008               	return
  1801  036D                     __end_of_chrgCtr:	
  1802                           
  1803                           	psect	text10
  1804  0405                     __ptext10:	
  1805 ;; *************** function _checkBatAD *****************
  1806 ;; Defined at:
  1807 ;;		line 598 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;		None
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;  power_temp      4    0        volatile unsigned long 
  1812 ;; Return value:  Size  Location     Type
  1813 ;;                  1    wreg      void 
  1814 ;; Registers used:
  1815 ;;		wreg, status,2, status,0, pclath, cstack
  1816 ;; Tracked objects:
  1817 ;;		On entry : 100/0
  1818 ;;		On exit  : 0/0
  1819 ;;		Unchanged: 0/0
  1820 ;; Data sizes:     COMMON   BANK0   BANK1
  1821 ;;      Params:         0       0       0
  1822 ;;      Locals:         0       0       0
  1823 ;;      Temps:          1       0       0
  1824 ;;      Totals:         1       0       0
  1825 ;;Total ram usage:        1 bytes
  1826 ;; Hardware stack levels used:    1
  1827 ;; Hardware stack levels required when called:    3
  1828 ;; This function calls:
  1829 ;;		_ADC_Sample
  1830 ;; This function is called by:
  1831 ;;		_main
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           
  1836                           ;psect for function _checkBatAD
  1837  0405                     _checkBatAD:	
  1838                           
  1839                           ;main.c: 600: test_adc = ADC_Sample(12, 5);
  1840                           
  1841                           ;incstack = 0
  1842                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  1843  0405  3005               	movlw	5
  1844  0406  00F3               	movwf	ADC_Sample@adldo
  1845  0407  300C               	movlw	12
  1846  0408  2018               	fcall	_ADC_Sample
  1847  0409  00B7               	movwf	_test_adc	;volatile
  1848                           
  1849                           ;main.c: 601: if (0xA5 == test_adc)
  1850  040A  30A5               	movlw	165
  1851  040B  0637               	xorwf	_test_adc,w	;volatile
  1852  040C  1D03               	btfss	3,2
  1853  040D  2C13               	goto	l2466
  1854                           
  1855                           ;main.c: 602: {
  1856                           ;main.c: 603: volatile unsigned long power_temp;
  1857                           ;main.c: 605: power_ad = adresult;
  1858  040E  0827               	movf	_adresult+1,w	;volatile
  1859  040F  00F8               	movwf	_power_ad+1	;volatile
  1860  0410  0826               	movf	_adresult,w	;volatile
  1861  0411  00F7               	movwf	_power_ad	;volatile
  1862                           
  1863                           ;main.c: 606: }
  1864  0412  0008               	return
  1865  0413                     l2466:	
  1866                           
  1867                           ;main.c: 607: else
  1868                           ;main.c: 608: {
  1869                           ;main.c: 609: ADCON0 = 0;
  1870  0413  1683               	bsf	3,5	;RP0=1, select bank1
  1871  0414  0195               	clrf	21	;volatile
  1872                           
  1873                           ;main.c: 610: ADCON1 = 0;
  1874  0415  0196               	clrf	22	;volatile
  1875                           
  1876                           ;main.c: 611: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1877  0416  3085               	movlw	133
  1878  0417  00F4               	movwf	??_checkBatAD
  1879  0418                     u2927:	
  1880  0418  0BF4               	decfsz	??_checkBatAD,f
  1881  0419  2C18               	goto	u2927
  1882  041A  0008               	return
  1883  041B                     __end_of_checkBatAD:	
  1884                           
  1885                           	psect	text11
  1886  0018                     __ptext11:	
  1887 ;; *************** function _ADC_Sample *****************
  1888 ;; Defined at:
  1889 ;;		line 826 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1890 ;; Parameters:    Size  Location     Type
  1891 ;;  adch            1    wreg     unsigned char 
  1892 ;;  adldo           1    3[COMMON] unsigned char 
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;  adch            1    5[BANK0 ] unsigned char 
  1895 ;;  j               1    4[BANK0 ] unsigned char 
  1896 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  1897 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  1898 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  1899 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  1900 ;;  i               1    6[BANK0 ] unsigned char 
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      unsigned char 
  1903 ;; Registers used:
  1904 ;;		wreg, status,2, status,0
  1905 ;; Tracked objects:
  1906 ;;		On entry : 100/0
  1907 ;;		On exit  : 100/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMMON   BANK0   BANK1
  1910 ;;      Params:         1       0       0
  1911 ;;      Locals:         0      13       0
  1912 ;;      Temps:          0       4       0
  1913 ;;      Totals:         1      17       0
  1914 ;;Total ram usage:       18 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    2
  1917 ;; This function calls:
  1918 ;;		Nothing
  1919 ;; This function is called by:
  1920 ;;		_checkBatAD
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           
  1925                           ;psect for function _ADC_Sample
  1926  0018                     _ADC_Sample:	
  1927                           
  1928                           ;incstack = 0
  1929                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1930                           ;ADC_Sample@adch stored from wreg
  1931  0018  00BD               	movwf	ADC_Sample@adch
  1932                           
  1933                           ;main.c: 828: volatile unsigned long adsum = 0;
  1934                           
  1935                           ;main.c: 829: volatile unsigned int admin = 0, admax = 0;
  1936  0019  20F2               	fcall	PL6	;call to abstracted procedure
  1937                           
  1938                           ;main.c: 830: volatile unsigned int ad_temp = 0;
  1939  001A  01C7               	clrf	ADC_Sample@ad_temp	;volatile
  1940  001B  01C8               	clrf	ADC_Sample@ad_temp+1	;volatile
  1941                           
  1942                           ;main.c: 832: if ((!LDO_EN) && (adldo & 0x04) )
  1943  001C  1683               	bsf	3,5	;RP0=1, select bank1
  1944  001D  1D16               	btfss	22,2	;volatile
  1945  001E  1D73               	btfss	ADC_Sample@adldo,2
  1946  001F  2829               	goto	l2354
  1947                           
  1948                           ;main.c: 833: {
  1949                           ;main.c: 835: ADCON1 = adldo;
  1950  0020  0873               	movf	ADC_Sample@adldo,w
  1951  0021  0096               	movwf	22	;volatile
  1952                           
  1953                           ;main.c: 836: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1954  0022  3084               	movlw	132
  1955  0023  1283               	bcf	3,5	;RP0=0, select bank0
  1956  0024  00B8               	movwf	??_ADC_Sample
  1957  0025                     u2937:	
  1958  0025  0BB8               	decfsz	??_ADC_Sample,f
  1959  0026  2825               	goto	u2937
  1960  0027  2828               	nop2
  1961                           
  1962                           ;main.c: 837: }
  1963  0028  282B               	goto	l2356
  1964  0029                     l2354:	
  1965                           
  1966                           ;main.c: 838: else
  1967                           ;main.c: 839: ADCON1 = adldo;
  1968  0029  0873               	movf	ADC_Sample@adldo,w
  1969  002A  0096               	movwf	22	;volatile
  1970  002B                     l2356:	
  1971                           
  1972                           ;main.c: 841: if(adch & 0x10)
  1973  002B  1283               	bcf	3,5	;RP0=0, select bank0
  1974  002C  1E3D               	btfss	ADC_Sample@adch,4
  1975  002D  2833               	goto	l2364
  1976                           
  1977                           ;main.c: 842: {
  1978                           ;main.c: 843: CHS4 = 1;
  1979  002E  1683               	bsf	3,5	;RP0=1, select bank1
  1980  002F  1716               	bsf	22,6	;volatile
  1981                           
  1982                           ;main.c: 844: adch &= 0x0f;
  1983  0030  300F               	movlw	15
  1984  0031  1283               	bcf	3,5	;RP0=0, select bank0
  1985  0032  05BD               	andwf	ADC_Sample@adch,f
  1986  0033                     l2364:	
  1987                           
  1988                           ;main.c: 847: for (i = 0; i < 10; i++)
  1989  0033  01BE               	clrf	ADC_Sample@i
  1990  0034                     l2370:	
  1991                           
  1992                           ;main.c: 848: {
  1993                           ;main.c: 849: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1994  0034  083D               	movf	ADC_Sample@adch,w
  1995  0035  00B8               	movwf	??_ADC_Sample
  1996  0036  3001               	movlw	1
  1997  0037  1003               	clrc
  1998  0038                     L8:	
  1999  0038  0DB8               	rlf	??_ADC_Sample,f
  2000  0039  3EFF               	addlw	-1
  2001  003A  1003               	clrc
  2002  003B  1D03               	skipz
  2003  003C  2838               	goto	L8
  2004  003D  0D38               	rlf	??_ADC_Sample,w
  2005  003E  3841               	iorlw	65
  2006  003F  1683               	bsf	3,5	;RP0=1, select bank1
  2007  0040  0095               	movwf	21	;volatile
  2008  0041  0000               	nop	;# 
  2009  0042  0000               	nop	;# 
  2010  0043  0000               	nop	;# 
  2011  0044  0000               	nop	;# 
  2012                           
  2013                           ;main.c: 854: GODONE = 1;
  2014  0045  1683               	bsf	3,5	;RP0=1, select bank1
  2015  0046  1495               	bsf	21,1	;volatile
  2016                           
  2017                           ;main.c: 856: unsigned char j = 0;
  2018  0047  1283               	bcf	3,5	;RP0=0, select bank0
  2019  0048  01BC               	clrf	ADC_Sample@j
  2020  0049                     l777:	
  2021                           ;main.c: 857: while (GODONE)
  2022                           
  2023  0049  1683               	bsf	3,5	;RP0=1, select bank1
  2024  004A  1C95               	btfss	21,1	;volatile
  2025  004B  2854               	goto	l2380
  2026                           
  2027                           ;main.c: 858: {
  2028                           ;main.c: 859: _delay((unsigned long)((2)*(16000000/4000000.0)));
  2029  004C  284D               	nop2	;2 cycle nop
  2030  004D  284E               	nop2	;2 cycle nop
  2031  004E  284F               	nop2	;2 cycle nop
  2032  004F  2850               	nop2	;2 cycle nop
  2033                           
  2034                           ;main.c: 861: if (0 == (--j))
  2035  0050  1283               	bcf	3,5	;RP0=0, select bank0
  2036  0051  0BBC               	decfsz	ADC_Sample@j,f
  2037  0052  2849               	goto	l777
  2038                           
  2039                           ;main.c: 862: return 0;
  2040  0053  3400               	retlw	0
  2041  0054                     l2380:	
  2042                           
  2043                           ;main.c: 863: }
  2044                           ;main.c: 865: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2045  0054  0819               	movf	25,w	;volatile
  2046  0055  1283               	bcf	3,5	;RP0=0, select bank0
  2047  0056  00C7               	movwf	ADC_Sample@ad_temp	;volatile
  2048  0057  01C8               	clrf	ADC_Sample@ad_temp+1	;volatile
  2049  0058  0EC7               	swapf	ADC_Sample@ad_temp,f	;volatile
  2050  0059  0EC8               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2051  005A  30F0               	movlw	240
  2052  005B  05C8               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2053  005C  0847               	movf	ADC_Sample@ad_temp,w	;volatile
  2054  005D  390F               	andlw	15
  2055  005E  04C8               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2056  005F  30F0               	movlw	240
  2057  0060  05C7               	andwf	ADC_Sample@ad_temp,f	;volatile
  2058  0061  1683               	bsf	3,5	;RP0=1, select bank1
  2059  0062  0E18               	swapf	24,w	;volatile
  2060  0063  390F               	andlw	15
  2061  0064  1283               	bcf	3,5	;RP0=0, select bank0
  2062  0065  07C7               	addwf	ADC_Sample@ad_temp,f	;volatile
  2063  0066  1803               	skipnc
  2064  0067  0AC8               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2065                           
  2066                           ;main.c: 867: if (0 == admax)
  2067  0068  0845               	movf	ADC_Sample@admax,w	;volatile
  2068  0069  0446               	iorwf	ADC_Sample@admax+1,w	;volatile
  2069  006A  1D03               	btfss	3,2
  2070  006B  286E               	goto	l2388
  2071                           
  2072                           ;main.c: 868: {
  2073                           ;main.c: 869: admax = ad_temp;
  2074  006C  20FB               	fcall	PL8	;call to abstracted procedure
  2075  006D  2880               	goto	l2394
  2076  006E                     l2388:	
  2077                           ;main.c: 871: }
  2078                           
  2079                           ;main.c: 870: admin = ad_temp;
  2080                           
  2081                           
  2082                           ;main.c: 872: else if (ad_temp > admax)
  2083  006E  0848               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2084  006F  0246               	subwf	ADC_Sample@admax+1,w	;volatile
  2085  0070  1D03               	skipz
  2086  0071  2874               	goto	u2245
  2087  0072  0847               	movf	ADC_Sample@ad_temp,w	;volatile
  2088  0073  0245               	subwf	ADC_Sample@admax,w	;volatile
  2089  0074                     u2245:	
  2090  0074  1803               	skipnc
  2091  0075  2878               	goto	l2392
  2092                           
  2093                           ;main.c: 873: admax = ad_temp;
  2094  0076  20FB               	fcall	PL8	;call to abstracted procedure
  2095  0077  2884               	goto	l783
  2096  0078                     l2392:	
  2097                           
  2098                           ;main.c: 874: else if (ad_temp < admin)
  2099  0078  0844               	movf	ADC_Sample@admin+1,w	;volatile
  2100  0079  0248               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2101  007A  1D03               	skipz
  2102  007B  287E               	goto	u2255
  2103  007C  0843               	movf	ADC_Sample@admin,w	;volatile
  2104  007D  0247               	subwf	ADC_Sample@ad_temp,w	;volatile
  2105  007E                     u2255:	
  2106  007E  1803               	skipnc
  2107  007F  2884               	goto	l783
  2108  0080                     l2394:	
  2109                           
  2110                           ;main.c: 875: admin = ad_temp;
  2111  0080  0848               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2112  0081  00C4               	movwf	ADC_Sample@admin+1	;volatile
  2113  0082  0847               	movf	ADC_Sample@ad_temp,w	;volatile
  2114  0083  00C3               	movwf	ADC_Sample@admin	;volatile
  2115  0084                     l783:	
  2116                           
  2117                           ;main.c: 877: adsum += ad_temp;
  2118  0084  0847               	movf	ADC_Sample@ad_temp,w	;volatile
  2119  0085  00B8               	movwf	??_ADC_Sample
  2120  0086  0848               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2121  0087  00B9               	movwf	??_ADC_Sample+1
  2122  0088  01BA               	clrf	??_ADC_Sample+2
  2123  0089  01BB               	clrf	??_ADC_Sample+3
  2124  008A  0838               	movf	??_ADC_Sample,w
  2125  008B  07BF               	addwf	ADC_Sample@adsum,f	;volatile
  2126  008C  0839               	movf	??_ADC_Sample+1,w
  2127  008D  1103               	clrz
  2128  008E  1803               	skipnc
  2129  008F  3E01               	addlw	1
  2130  0090  1D03               	btfss	3,2
  2131  0091  07C0               	addwf	ADC_Sample@adsum+1,f	;volatile
  2132  0092  083A               	movf	??_ADC_Sample+2,w
  2133  0093  1103               	clrz
  2134  0094  1803               	skipnc
  2135  0095  3E01               	addlw	1
  2136  0096  1D03               	btfss	3,2
  2137  0097  07C1               	addwf	ADC_Sample@adsum+2,f	;volatile
  2138  0098  083B               	movf	??_ADC_Sample+3,w
  2139  0099  1103               	clrz
  2140  009A  1803               	skipnc
  2141  009B  3E01               	addlw	1
  2142  009C  1D03               	btfss	3,2
  2143  009D  07C2               	addwf	ADC_Sample@adsum+3,f	;volatile
  2144  009E  300A               	movlw	10
  2145  009F  0ABE               	incf	ADC_Sample@i,f
  2146  00A0  023E               	subwf	ADC_Sample@i,w
  2147  00A1  1C03               	skipc
  2148  00A2  2834               	goto	l2370
  2149                           
  2150                           ;main.c: 878: }
  2151                           ;main.c: 879: adsum -= admax;
  2152  00A3  0845               	movf	ADC_Sample@admax,w	;volatile
  2153  00A4  00B8               	movwf	??_ADC_Sample
  2154  00A5  0846               	movf	ADC_Sample@admax+1,w	;volatile
  2155  00A6  20E3               	fcall	PL2	;call to abstracted procedure
  2156  00A7  1C03               	skipc
  2157  00A8  0F3B               	incfsz	??_ADC_Sample+3,w
  2158  00A9  02C2               	subwf	ADC_Sample@adsum+3,f	;volatile
  2159                           
  2160                           ;main.c: 880: if (adsum >= admin)
  2161  00AA  0843               	movf	ADC_Sample@admin,w	;volatile
  2162  00AB  00B8               	movwf	??_ADC_Sample
  2163  00AC  0844               	movf	ADC_Sample@admin+1,w	;volatile
  2164  00AD  00B9               	movwf	??_ADC_Sample+1
  2165  00AE  01BA               	clrf	??_ADC_Sample+2
  2166  00AF  01BB               	clrf	??_ADC_Sample+3
  2167  00B0  083B               	movf	??_ADC_Sample+3,w
  2168  00B1  0242               	subwf	ADC_Sample@adsum+3,w	;volatile
  2169  00B2  1D03               	skipz
  2170  00B3  28BE               	goto	u2295
  2171  00B4  083A               	movf	??_ADC_Sample+2,w
  2172  00B5  0241               	subwf	ADC_Sample@adsum+2,w	;volatile
  2173  00B6  1D03               	skipz
  2174  00B7  28BE               	goto	u2295
  2175  00B8  0839               	movf	??_ADC_Sample+1,w
  2176  00B9  0240               	subwf	ADC_Sample@adsum+1,w	;volatile
  2177  00BA  1D03               	skipz
  2178  00BB  28BE               	goto	u2295
  2179  00BC  0838               	movf	??_ADC_Sample,w
  2180  00BD  023F               	subwf	ADC_Sample@adsum,w	;volatile
  2181  00BE                     u2295:	
  2182  00BE  1C03               	skipc
  2183  00BF  28C8               	goto	l787
  2184                           
  2185                           ;main.c: 881: adsum -= admin;
  2186  00C0  0843               	movf	ADC_Sample@admin,w	;volatile
  2187  00C1  00B8               	movwf	??_ADC_Sample
  2188  00C2  0844               	movf	ADC_Sample@admin+1,w	;volatile
  2189  00C3  20E3               	fcall	PL2	;call to abstracted procedure
  2190  00C4  1C03               	skipc
  2191  00C5  0F3B               	incfsz	??_ADC_Sample+3,w
  2192  00C6  02C2               	subwf	ADC_Sample@adsum+3,f	;volatile
  2193  00C7  28CC               	goto	l2404
  2194  00C8                     l787:	
  2195                           
  2196                           ;main.c: 882: else
  2197                           ;main.c: 883: adsum = 0;
  2198  00C8  01BF               	clrf	ADC_Sample@adsum	;volatile
  2199  00C9  01C0               	clrf	ADC_Sample@adsum+1	;volatile
  2200  00CA  01C1               	clrf	ADC_Sample@adsum+2	;volatile
  2201  00CB  01C2               	clrf	ADC_Sample@adsum+3	;volatile
  2202  00CC                     l2404:	
  2203                           
  2204                           ;main.c: 885: adresult = adsum >> 3;
  2205  00CC  083F               	movf	ADC_Sample@adsum,w	;volatile
  2206  00CD  00B8               	movwf	??_ADC_Sample
  2207  00CE  0840               	movf	ADC_Sample@adsum+1,w	;volatile
  2208  00CF  00B9               	movwf	??_ADC_Sample+1
  2209  00D0  0841               	movf	ADC_Sample@adsum+2,w	;volatile
  2210  00D1  00BA               	movwf	??_ADC_Sample+2
  2211  00D2  0842               	movf	ADC_Sample@adsum+3,w	;volatile
  2212  00D3  00BB               	movwf	??_ADC_Sample+3
  2213  00D4  3003               	movlw	3
  2214  00D5                     u2315:	
  2215  00D5  1003               	clrc
  2216  00D6  0CBB               	rrf	??_ADC_Sample+3,f
  2217  00D7  0CBA               	rrf	??_ADC_Sample+2,f
  2218  00D8  0CB9               	rrf	??_ADC_Sample+1,f
  2219  00D9  0CB8               	rrf	??_ADC_Sample,f
  2220  00DA  3EFF               	addlw	-1
  2221  00DB  1D03               	skipz
  2222  00DC  28D5               	goto	u2315
  2223  00DD  0839               	movf	??_ADC_Sample+1,w
  2224  00DE  00A7               	movwf	_adresult+1	;volatile
  2225  00DF  0838               	movf	??_ADC_Sample,w
  2226  00E0  00A6               	movwf	_adresult	;volatile
  2227                           
  2228                           ;main.c: 887: adsum = 0;
  2229                           
  2230                           ;main.c: 888: admin = 0;
  2231                           
  2232                           ;main.c: 889: admax = 0;
  2233  00E1  20F2               	fcall	PL6	;call to abstracted procedure
  2234                           
  2235                           ;main.c: 890: return 0xA5;
  2236  00E2  34A5               	retlw	165
  2237  00E3                     __end_of_ADC_Sample:	
  2238  00E3                     PL2:	
  2239  00E3  00B9               	movwf	??_ADC_Sample+1
  2240  00E4  01BA               	clrf	??_ADC_Sample+2
  2241  00E5  01BB               	clrf	??_ADC_Sample+3
  2242  00E6  0838               	movf	??_ADC_Sample,w
  2243  00E7  02BF               	subwf	ADC_Sample@adsum,f	;volatile
  2244  00E8  0839               	movf	??_ADC_Sample+1,w
  2245  00E9  1C03               	skipc
  2246  00EA  0F39               	incfsz	??_ADC_Sample+1,w
  2247  00EB  02C0               	subwf	ADC_Sample@adsum+1,f	;volatile
  2248  00EC  083A               	movf	??_ADC_Sample+2,w
  2249  00ED  1C03               	skipc
  2250  00EE  0F3A               	incfsz	??_ADC_Sample+2,w
  2251  00EF  02C1               	subwf	ADC_Sample@adsum+2,f	;volatile
  2252  00F0  083B               	movf	??_ADC_Sample+3,w
  2253  00F1  0008               	return
  2254  00F2                     __end_ofPL2:	
  2255  00F2                     PL6:	
  2256  00F2  01BF               	clrf	ADC_Sample@adsum	;volatile
  2257  00F3  01C0               	clrf	ADC_Sample@adsum+1	;volatile
  2258  00F4  01C1               	clrf	ADC_Sample@adsum+2	;volatile
  2259  00F5  01C2               	clrf	ADC_Sample@adsum+3	;volatile
  2260  00F6  01C3               	clrf	ADC_Sample@admin	;volatile
  2261  00F7  01C4               	clrf	ADC_Sample@admin+1	;volatile
  2262  00F8  01C5               	clrf	ADC_Sample@admax	;volatile
  2263  00F9  01C6               	clrf	ADC_Sample@admax+1	;volatile
  2264  00FA  0008               	return
  2265  00FB                     __end_ofPL6:	
  2266  00FB                     PL8:	
  2267  00FB  0848               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2268  00FC  00C6               	movwf	ADC_Sample@admax+1	;volatile
  2269  00FD  0847               	movf	ADC_Sample@ad_temp,w	;volatile
  2270  00FE  00C5               	movwf	ADC_Sample@admax	;volatile
  2271  00FF  0008               	return
  2272  0100                     __end_ofPL8:	
  2273                           
  2274                           	psect	text12
  2275  02C6                     __ptext12:	
  2276 ;; *************** function _Sleep_Mode *****************
  2277 ;; Defined at:
  2278 ;;		line 749 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;		None
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;		None
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  1    wreg      void 
  2285 ;; Registers used:
  2286 ;;		wreg, status,2, status,0, pclath, cstack
  2287 ;; Tracked objects:
  2288 ;;		On entry : 100/0
  2289 ;;		On exit  : 100/100
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMMON   BANK0   BANK1
  2292 ;;      Params:         0       0       0
  2293 ;;      Locals:         0       0       0
  2294 ;;      Temps:          0       0       0
  2295 ;;      Totals:         0       0       0
  2296 ;;Total ram usage:        0 bytes
  2297 ;; Hardware stack levels used:    1
  2298 ;; Hardware stack levels required when called:    3
  2299 ;; This function calls:
  2300 ;;		_AD_Init
  2301 ;;		_Init_System
  2302 ;; This function is called by:
  2303 ;;		_main
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           
  2308                           ;psect for function _Sleep_Mode
  2309  02C6                     _Sleep_Mode:	
  2310                           
  2311                           ;main.c: 751: INTCON = 0;
  2312                           
  2313                           ;incstack = 0
  2314                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  2315  02C6  018B               	clrf	11	;volatile
  2316                           
  2317                           ;main.c: 753: OPTION_REG = 0;
  2318  02C7  0181               	clrf	1	;volatile
  2319                           
  2320                           ;main.c: 755: WPUA = 0x00;
  2321  02C8  1683               	bsf	3,5	;RP0=1, select bank1
  2322  02C9  0188               	clrf	8	;volatile
  2323                           
  2324                           ;main.c: 756: TRISA = 0x01;
  2325  02CA  3001               	movlw	1
  2326                           
  2327                           ;main.c: 757: TRISB = 0x37;
  2328                           
  2329                           ;main.c: 759: PORTA = 0X00;
  2330                           
  2331                           ;main.c: 760: PORTB = 0X00;
  2332  02CB  22FF               	fcall	PL4	;call to abstracted procedure
  2333                           
  2334                           ;main.c: 761: WPUB = 0x04;
  2335  02CC  3004               	movlw	4
  2336  02CD  0088               	movwf	8	;volatile
  2337                           
  2338                           ;main.c: 763: ADCON0 = 0;
  2339  02CE  1683               	bsf	3,5	;RP0=1, select bank1
  2340  02CF  0195               	clrf	21	;volatile
  2341                           
  2342                           ;main.c: 764: ADCON1 = 0;
  2343  02D0  0196               	clrf	22	;volatile
  2344                           
  2345                           ;main.c: 766: PWMCON0 = 0;
  2346  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  2347  02D2  0195               	clrf	21	;volatile
  2348                           
  2349                           ;main.c: 768: OSCCON = 0X70;
  2350  02D3  3070               	movlw	112
  2351  02D4  0094               	movwf	20	;volatile
  2352                           
  2353                           ;main.c: 770: IOCA = 0B00000000;
  2354  02D5  1683               	bsf	3,5	;RP0=1, select bank1
  2355  02D6  0189               	clrf	9	;volatile
  2356                           
  2357                           ;main.c: 771: IOCB = 0x07;
  2358  02D7  3007               	movlw	7
  2359  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  2360  02D9  0089               	movwf	9	;volatile
  2361                           
  2362                           ;main.c: 773: RAIE = 1;
  2363  02DA  158E               	bsf	14,3	;volatile
  2364                           
  2365                           ;main.c: 774: PEIE = 1;
  2366  02DB  170B               	bsf	11,6	;volatile
  2367                           
  2368                           ;main.c: 775: RBIE = 1;
  2369  02DC  158B               	bsf	11,3	;volatile
  2370                           
  2371                           ;main.c: 776: GIE = 0;
  2372  02DD  138B               	bcf	11,7	;volatile
  2373                           
  2374                           ;main.c: 778: PIE1 &= 0X08;
  2375  02DE  3008               	movlw	8
  2376  02DF  058E               	andwf	14,f	;volatile
  2377                           
  2378                           ;main.c: 779: PIR1 = 0;
  2379  02E0  018D               	clrf	13	;volatile
  2380                           
  2381                           ;main.c: 780: INTCON &= 0XC8;
  2382  02E1  30C8               	movlw	200
  2383  02E2  058B               	andwf	11,f	;volatile
  2384                           
  2385                           ;main.c: 782: PORTA;
  2386  02E3  1683               	bsf	3,5	;RP0=1, select bank1
  2387  02E4  0806               	movf	6,w	;volatile
  2388                           
  2389                           ;main.c: 783: RAIF = 0;
  2390  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  2391  02E6  118D               	bcf	13,3	;volatile
  2392                           
  2393                           ;main.c: 784: PORTB;
  2394  02E7  0806               	movf	6,w	;volatile
  2395                           
  2396                           ;main.c: 785: RBIF = 0;
  2397  02E8  100B               	bcf	11,0	;volatile
  2398  02E9  0064               	clrwdt	;# 
  2399  02EA  0063               	sleep	;# 
  2400  02EB  0000               	nop	;# 
  2401  02EC  0064               	clrwdt	;# 
  2402  02ED  0000               	nop	;# 
  2403  02EE  0000               	nop	;# 
  2404  02EF  0000               	nop	;# 
  2405  02F0  0000               	nop	;# 
  2406  02F1  0000               	nop	;# 
  2407                           
  2408                           ;main.c: 797: if(RAIF) RAIF = 0;
  2409  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  2410  02F3  198D               	btfsc	13,3	;volatile
  2411  02F4  118D               	bcf	13,3	;volatile
  2412                           
  2413                           ;main.c: 798: if(RBIF) RBIF = 0;
  2414  02F5  180B               	btfsc	11,0	;volatile
  2415  02F6  100B               	bcf	11,0	;volatile
  2416                           
  2417                           ;main.c: 799: if(TMR2IF) TMR2IF = 0;
  2418  02F7  188D               	btfsc	13,1	;volatile
  2419  02F8  108D               	bcf	13,1	;volatile
  2420                           
  2421                           ;main.c: 800: IOCA = 0B00000000;
  2422  02F9  1683               	bsf	3,5	;RP0=1, select bank1
  2423  02FA  0189               	clrf	9	;volatile
  2424                           
  2425                           ;main.c: 801: IOCB = 0B00000000;
  2426  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  2427  02FC  0189               	clrf	9	;volatile
  2428                           
  2429                           ;main.c: 802: Init_System();
  2430  02FD  23EB               	fcall	_Init_System
  2431                           
  2432                           ;main.c: 803: AD_Init();
  2433  02FE  2C5F               	ljmp	l1788
  2434  02FF                     __end_of_Sleep_Mode:	
  2435  02FF                     PL4:	
  2436  02FF  0085               	movwf	5	;volatile
  2437  0300  3037               	movlw	55
  2438  0301  1283               	bcf	3,5	;RP0=0, select bank0
  2439  0302  0085               	movwf	5	;volatile
  2440  0303  1683               	bsf	3,5	;RP0=1, select bank1
  2441  0304  0186               	clrf	6	;volatile
  2442  0305  1283               	bcf	3,5	;RP0=0, select bank0
  2443  0306  0186               	clrf	6	;volatile
  2444  0307  0008               	return
  2445  0308                     __end_ofPL4:	
  2446                           
  2447                           	psect	text13
  2448  03EB                     __ptext13:	
  2449 ;; *************** function _Init_System *****************
  2450 ;; Defined at:
  2451 ;;		line 625 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;		None
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      void 
  2458 ;; Registers used:
  2459 ;;		wreg, status,2
  2460 ;; Tracked objects:
  2461 ;;		On entry : 100/0
  2462 ;;		On exit  : 100/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMMON   BANK0   BANK1
  2465 ;;      Params:         0       0       0
  2466 ;;      Locals:         0       0       0
  2467 ;;      Temps:          0       0       0
  2468 ;;      Totals:         0       0       0
  2469 ;;Total ram usage:        0 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    2
  2472 ;; This function calls:
  2473 ;;		Nothing
  2474 ;; This function is called by:
  2475 ;;		_main
  2476 ;;		_Sleep_Mode
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           
  2481                           ;psect for function _Init_System
  2482  03EB                     _Init_System:	
  2483                           
  2484                           ;incstack = 0
  2485                           ; Regs used in _Init_System: [wreg+status,2]
  2486  03EB  0000               	nop	;# 
  2487  03EC  0064               	clrwdt	;# 
  2488                           
  2489                           ;main.c: 629: OPTION_REG = 0;
  2490  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  2491  03EE  0181               	clrf	1	;volatile
  2492  03EF  0064               	clrwdt	;# 
  2493                           
  2494                           ;main.c: 631: OSCCON = 0X72;
  2495  03F0  3072               	movlw	114
  2496  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  2497  03F2  0094               	movwf	20	;volatile
  2498                           
  2499                           ;main.c: 633: WPUA = 0x00;
  2500  03F3  1683               	bsf	3,5	;RP0=1, select bank1
  2501  03F4  0188               	clrf	8	;volatile
  2502                           
  2503                           ;main.c: 634: WPDA = 0x00;
  2504  03F5  0187               	clrf	7	;volatile
  2505                           
  2506                           ;main.c: 635: WPUB = 0x04;
  2507  03F6  3004               	movlw	4
  2508  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2509  03F8  0088               	movwf	8	;volatile
  2510                           
  2511                           ;main.c: 637: TRISA = 0x01;
  2512  03F9  3001               	movlw	1
  2513  03FA  1683               	bsf	3,5	;RP0=1, select bank1
  2514                           
  2515                           ;main.c: 638: TRISB = 0x37;
  2516                           
  2517                           ;main.c: 640: PORTA = 0X00;
  2518                           
  2519                           ;main.c: 641: PORTB = 0X00;
  2520  03FB  22FF               	fcall	PL4	;call to abstracted procedure
  2521                           
  2522                           ;main.c: 645: PR2 = 249;
  2523  03FC  30F9               	movlw	249
  2524  03FD  0091               	movwf	17	;volatile
  2525                           
  2526                           ;main.c: 646: TMR2IF = 0;
  2527  03FE  108D               	bcf	13,1	;volatile
  2528                           
  2529                           ;main.c: 647: TMR2IE = 1;
  2530  03FF  148E               	bsf	14,1	;volatile
  2531                           
  2532                           ;main.c: 649: T2CON = 0B00000100;
  2533  0400  3004               	movlw	4
  2534  0401  0093               	movwf	19	;volatile
  2535                           
  2536                           ;main.c: 650: INTCON = 0XC0;
  2537  0402  30C0               	movlw	192
  2538  0403  008B               	movwf	11	;volatile
  2539  0404  0008               	return
  2540  0405                     __end_of_Init_System:	
  2541                           
  2542                           	psect	text14
  2543  045F                     __ptext14:	
  2544 ;; *************** function _AD_Init *****************
  2545 ;; Defined at:
  2546 ;;		line 662 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;		None
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;		None
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		wreg, status,2
  2555 ;; Tracked objects:
  2556 ;;		On entry : 100/0
  2557 ;;		On exit  : 100/100
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMMON   BANK0   BANK1
  2560 ;;      Params:         0       0       0
  2561 ;;      Locals:         0       0       0
  2562 ;;      Temps:          0       0       0
  2563 ;;      Totals:         0       0       0
  2564 ;;Total ram usage:        0 bytes
  2565 ;; Hardware stack levels used:    1
  2566 ;; Hardware stack levels required when called:    2
  2567 ;; This function calls:
  2568 ;;		Nothing
  2569 ;; This function is called by:
  2570 ;;		_main
  2571 ;;		_Sleep_Mode
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           
  2576                           ;psect for function _AD_Init
  2577  045F                     _AD_Init:	
  2578  045F                     l1788:	
  2579                           ;incstack = 0
  2580                           ; Regs used in _AD_Init: [wreg+status,2]
  2581                           
  2582                           
  2583                           ;main.c: 695: ADCON0 = 0X41;
  2584  045F  3041               	movlw	65
  2585  0460  1683               	bsf	3,5	;RP0=1, select bank1
  2586  0461  0095               	movwf	21	;volatile
  2587                           
  2588                           ;main.c: 712: ADCON1 = 0;
  2589  0462  0196               	clrf	22	;volatile
  2590                           
  2591                           ;main.c: 713: ANSEL0 = 0X00;
  2592  0463  0193               	clrf	19	;volatile
  2593                           
  2594                           ;main.c: 714: ANSEL1 = 0x30;
  2595  0464  3030               	movlw	48
  2596  0465  0094               	movwf	20	;volatile
  2597  0466  0008               	return
  2598  0467                     __end_of_AD_Init:	
  2599                           
  2600                           	psect	text15
  2601  0397                     __ptext15:	
  2602 ;; *************** function _Isr_Timer *****************
  2603 ;; Defined at:
  2604 ;;		line 93 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;		None
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;		None
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      void 
  2611 ;; Registers used:
  2612 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 100/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMMON   BANK0   BANK1
  2618 ;;      Params:         0       0       0
  2619 ;;      Locals:         0       0       0
  2620 ;;      Temps:          3       0       0
  2621 ;;      Totals:         3       0       0
  2622 ;;Total ram usage:        3 bytes
  2623 ;; Hardware stack levels used:    1
  2624 ;; Hardware stack levels required when called:    1
  2625 ;; This function calls:
  2626 ;;		_ledShow
  2627 ;; This function is called by:
  2628 ;;		Interrupt level 1
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           
  2633                           ;psect for function _Isr_Timer
  2634  0397                     _Isr_Timer:	
  2635                           
  2636                           ;main.c: 95: if(TMR2IF)
  2637  0397  1283               	bcf	3,5	;RP0=0, select bank0
  2638  0398  1C8D               	btfss	13,1	;volatile
  2639  0399  2BAB               	goto	i1l612
  2640                           
  2641                           ;main.c: 96: {
  2642                           ;main.c: 97: TMR2IF = 0;
  2643  039A  108D               	bcf	13,1	;volatile
  2644                           
  2645                           ;main.c: 98: if(++intCount >= 160)
  2646  039B  30A0               	movlw	160
  2647  039C  0AB6               	incf	_intCount,f
  2648  039D  0236               	subwf	_intCount,w
  2649  039E  1C03               	skipc
  2650  039F  2BA8               	goto	i1l2270
  2651  03A0  3064               	movlw	100
  2652                           
  2653                           ;main.c: 99: {
  2654                           ;main.c: 100: intCount = 0;
  2655  03A1  01B6               	clrf	_intCount
  2656                           
  2657                           ;main.c: 101: IntFlag = 1;
  2658  03A2  01B4               	clrf	_IntFlag
  2659  03A3  0AB4               	incf	_IntFlag,f
  2660                           
  2661                           ;main.c: 102: if(++count1s >= 100)
  2662  03A4  0AB5               	incf	_count1s,f
  2663  03A5  0235               	subwf	_count1s,w
  2664  03A6  1803               	btfsc	3,0
  2665                           
  2666                           ;main.c: 103: {
  2667                           ;main.c: 104: count1s = 0;
  2668  03A7  01B5               	clrf	_count1s
  2669  03A8                     i1l2270:	
  2670                           
  2671                           ;main.c: 105: }
  2672                           ;main.c: 106: }
  2673                           ;main.c: 107: ledShow();
  2674  03A8  2238               	fcall	_ledShow
  2675                           
  2676                           ;main.c: 108: intCount10++;
  2677  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  2678  03AA  0AB2               	incf	_intCount10,f
  2679  03AB                     i1l612:	
  2680  03AB  0872               	movf	??_Isr_Timer+2,w
  2681  03AC  008A               	movwf	10
  2682  03AD  0871               	movf	??_Isr_Timer+1,w
  2683  03AE  0084               	movwf	4
  2684  03AF  0E70               	swapf	??_Isr_Timer^(0+-128),w
  2685  03B0  0083               	movwf	3
  2686  03B1  0EFE               	swapf	126,f
  2687  03B2  0E7E               	swapf	126,w
  2688  03B3  0009               	retfie
  2689  03B4                     __end_of_Isr_Timer:	
  2690                           
  2691                           	psect	intentry
  2692  0004                     __pintentry:	
  2693                           ;incstack = 0
  2694                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2695                           
  2696  0004                     interrupt_function:	
  2697  007E                     saved_w	set	btemp
  2698  0004  00FE               	movwf	btemp
  2699  0005  0E03               	swapf	3,w
  2700  0006  00F0               	movwf	??_Isr_Timer
  2701  0007  0804               	movf	4,w
  2702  0008  00F1               	movwf	??_Isr_Timer+1
  2703  0009  080A               	movf	10,w
  2704  000A  00F2               	movwf	??_Isr_Timer+2
  2705  000B  2B97               	ljmp	_Isr_Timer
  2706                           
  2707                           	psect	text16
  2708  0238                     __ptext16:	
  2709 ;; *************** function _ledShow *****************
  2710 ;; Defined at:
  2711 ;;		line 159 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;		None
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;		None
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  1    wreg      void 
  2718 ;; Registers used:
  2719 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2720 ;; Tracked objects:
  2721 ;;		On entry : 100/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMMON   BANK0   BANK1
  2725 ;;      Params:         0       0       0
  2726 ;;      Locals:         0       0       0
  2727 ;;      Temps:          0       0       0
  2728 ;;      Totals:         0       0       0
  2729 ;;Total ram usage:        0 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_Isr_Timer
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           
  2739                           ;psect for function _ledShow
  2740  0238                     _ledShow:	
  2741                           
  2742                           ;main.c: 161: if(++ledCntTime > 5)
  2743                           
  2744                           ;incstack = 0
  2745                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  2746  0238  3006               	movlw	6
  2747  0239  0AAD               	incf	_ledCntTime,f
  2748  023A  022D               	subwf	_ledCntTime,w
  2749  023B  1C03               	skipc
  2750  023C  0008               	return
  2751  023D  300E               	movlw	14
  2752                           
  2753                           ;main.c: 162: {
  2754                           ;main.c: 163: ledCntTime = 0;
  2755  023E  01AD               	clrf	_ledCntTime
  2756                           
  2757                           ;main.c: 164: if(++ledCnt > 13)
  2758  023F  0AAF               	incf	_ledCnt,f
  2759  0240  022F               	subwf	_ledCnt,w
  2760  0241  1803               	btfsc	3,0
  2761                           
  2762                           ;main.c: 165: {
  2763                           ;main.c: 166: ledCnt = 0;
  2764  0242  01AF               	clrf	_ledCnt
  2765                           
  2766                           ;main.c: 167: }
  2767                           ;main.c: 168: PORTA &= 0xC1;
  2768  0243  30C1               	movlw	193
  2769  0244  1683               	bsf	3,5	;RP0=1, select bank1
  2770  0245  0586               	andwf	6,f	;volatile
  2771                           
  2772                           ;main.c: 169: TRISA |= 0x3E;
  2773  0246  303E               	movlw	62
  2774  0247  0485               	iorwf	5,f	;volatile
  2775                           
  2776                           ;main.c: 170: switch(ledCnt)
  2777  0248  2AB9               	goto	i1l1992
  2778  0249                     i1l632:	
  2779                           ;main.c: 171: {
  2780                           ;main.c: 172: case 1:
  2781                           
  2782                           
  2783                           ;main.c: 173: if(geweiNum & 0x08)
  2784  0249  1DC9               	btfss	_geweiNum,3
  2785  024A  0008               	return
  2786                           
  2787                           ;main.c: 174: {
  2788                           ;main.c: 175: TRISA &= 0xFD;
  2789  024B  1683               	bsf	3,5	;RP0=1, select bank1
  2790  024C  1085               	bcf	5,1	;volatile
  2791                           
  2792                           ;main.c: 176: TRISA &= 0xDF;
  2793  024D  1285               	bcf	5,5	;volatile
  2794                           
  2795                           ;main.c: 177: RA1 = 1;
  2796  024E  1486               	bsf	6,1	;volatile
  2797                           
  2798                           ;main.c: 178: RA5 = 0;
  2799  024F  1286               	bcf	6,5	;volatile
  2800  0250  0008               	return
  2801  0251                     i1l635:	
  2802                           ;main.c: 181: case 2:
  2803                           
  2804                           
  2805                           ;main.c: 182: if(geweiNum & 0x10)
  2806  0251  1E49               	btfss	_geweiNum,4
  2807  0252  0008               	return
  2808                           
  2809                           ;main.c: 183: {
  2810                           ;main.c: 184: TRISA &= 0xF7;
  2811  0253  1683               	bsf	3,5	;RP0=1, select bank1
  2812  0254  1185               	bcf	5,3	;volatile
  2813                           
  2814                           ;main.c: 185: TRISA &= 0xFD;
  2815  0255  1085               	bcf	5,1	;volatile
  2816                           
  2817                           ;main.c: 186: RA1 = 1;
  2818  0256  1486               	bsf	6,1	;volatile
  2819                           
  2820                           ;main.c: 187: RA3 = 0;
  2821  0257  1186               	bcf	6,3	;volatile
  2822  0258  0008               	return
  2823  0259                     i1l637:	
  2824                           ;main.c: 190: case 3:
  2825                           
  2826                           
  2827                           ;main.c: 191: if(geweiNum & 0x20)
  2828  0259  1EC9               	btfss	_geweiNum,5
  2829  025A  0008               	return
  2830                           
  2831                           ;main.c: 192: {
  2832                           ;main.c: 193: TRISA &= 0xF7;
  2833  025B  1683               	bsf	3,5	;RP0=1, select bank1
  2834  025C  1185               	bcf	5,3	;volatile
  2835                           
  2836                           ;main.c: 194: TRISA &= 0xEF;
  2837  025D  1205               	bcf	5,4	;volatile
  2838                           
  2839                           ;main.c: 195: RA4 = 1;
  2840  025E  1606               	bsf	6,4	;volatile
  2841                           
  2842                           ;main.c: 196: RA3 = 0;
  2843  025F  1186               	bcf	6,3	;volatile
  2844  0260  0008               	return
  2845  0261                     i1l639:	
  2846                           ;main.c: 199: case 4:
  2847                           
  2848                           
  2849                           ;main.c: 200: if(geweiNum & 0x01)
  2850  0261  1C49               	btfss	_geweiNum,0
  2851  0262  0008               	return
  2852                           
  2853                           ;main.c: 201: {
  2854                           ;main.c: 202: TRISA &= 0xEF;
  2855  0263  1683               	bsf	3,5	;RP0=1, select bank1
  2856  0264  1205               	bcf	5,4	;volatile
  2857                           
  2858                           ;main.c: 203: TRISA &= 0xDF;
  2859  0265  1285               	bcf	5,5	;volatile
  2860                           
  2861                           ;main.c: 204: RA5 = 1;
  2862  0266  1686               	bsf	6,5	;volatile
  2863                           
  2864                           ;main.c: 205: RA4 = 0;
  2865  0267  1206               	bcf	6,4	;volatile
  2866  0268  0008               	return
  2867  0269                     i1l641:	
  2868                           ;main.c: 208: case 5:
  2869                           
  2870                           
  2871                           ;main.c: 209: if(geweiNum & 0x02)
  2872  0269  1CC9               	btfss	_geweiNum,1
  2873  026A  0008               	return
  2874                           
  2875                           ;main.c: 210: {
  2876                           ;main.c: 211: TRISA &= 0xDF;
  2877  026B  1683               	bsf	3,5	;RP0=1, select bank1
  2878  026C  1285               	bcf	5,5	;volatile
  2879                           
  2880                           ;main.c: 212: TRISA &= 0xF7;
  2881  026D  1185               	bcf	5,3	;volatile
  2882                           
  2883                           ;main.c: 213: RA3 = 1;
  2884  026E  1586               	bsf	6,3	;volatile
  2885                           
  2886                           ;main.c: 214: RA5 = 0;
  2887  026F  1286               	bcf	6,5	;volatile
  2888  0270  0008               	return
  2889  0271                     i1l643:	
  2890                           ;main.c: 217: case 6:
  2891                           
  2892                           
  2893                           ;main.c: 218: if(geweiNum & 0x04)
  2894  0271  1D49               	btfss	_geweiNum,2
  2895  0272  0008               	return
  2896                           
  2897                           ;main.c: 219: {
  2898                           ;main.c: 220: TRISA &= 0xDF;
  2899  0273  1683               	bsf	3,5	;RP0=1, select bank1
  2900  0274  1285               	bcf	5,5	;volatile
  2901                           
  2902                           ;main.c: 221: TRISA &= 0xFD;
  2903  0275  1085               	bcf	5,1	;volatile
  2904                           
  2905                           ;main.c: 222: RA5 = 1;
  2906  0276  1686               	bsf	6,5	;volatile
  2907                           
  2908                           ;main.c: 223: RA1 = 0;
  2909  0277  1086               	bcf	6,1	;volatile
  2910  0278  0008               	return
  2911  0279                     i1l645:	
  2912                           ;main.c: 226: case 7:
  2913                           
  2914                           
  2915                           ;main.c: 227: if(geweiNum & 0x40)
  2916  0279  1F49               	btfss	_geweiNum,6
  2917  027A  0008               	return
  2918                           
  2919                           ;main.c: 228: {
  2920                           ;main.c: 229: TRISA &= 0xDF;
  2921  027B  1683               	bsf	3,5	;RP0=1, select bank1
  2922  027C  1285               	bcf	5,5	;volatile
  2923                           
  2924                           ;main.c: 230: TRISA &= 0xF7;
  2925  027D  1185               	bcf	5,3	;volatile
  2926                           
  2927                           ;main.c: 231: RA5 = 1;
  2928  027E  1686               	bsf	6,5	;volatile
  2929                           
  2930                           ;main.c: 232: RA3 = 0;
  2931  027F  1186               	bcf	6,3	;volatile
  2932  0280  0008               	return
  2933  0281                     i1l647:	
  2934                           ;main.c: 235: case 8:
  2935                           
  2936                           
  2937                           ;main.c: 236: if(shiweiNum & 0x08)
  2938  0281  1DCA               	btfss	_shiweiNum,3
  2939  0282  0008               	return
  2940                           
  2941                           ;main.c: 237: {
  2942                           ;main.c: 238: TRISA &= 0xFB;
  2943  0283  1683               	bsf	3,5	;RP0=1, select bank1
  2944  0284  1105               	bcf	5,2	;volatile
  2945                           
  2946                           ;main.c: 239: TRISA &= 0xFD;
  2947  0285  1085               	bcf	5,1	;volatile
  2948                           
  2949                           ;main.c: 240: RA2 = 1;
  2950  0286  1506               	bsf	6,2	;volatile
  2951                           
  2952                           ;main.c: 241: RA1 = 0;
  2953  0287  1086               	bcf	6,1	;volatile
  2954  0288  0008               	return
  2955  0289                     i1l649:	
  2956                           ;main.c: 244: case 9:
  2957                           
  2958                           
  2959                           ;main.c: 245: if(shiweiNum & 0x10)
  2960  0289  1E4A               	btfss	_shiweiNum,4
  2961  028A  0008               	return
  2962                           
  2963                           ;main.c: 246: {
  2964                           ;main.c: 247: TRISA &= 0xFD;
  2965  028B  1683               	bsf	3,5	;RP0=1, select bank1
  2966  028C  1085               	bcf	5,1	;volatile
  2967                           
  2968                           ;main.c: 248: TRISA &= 0xFB;
  2969  028D  1105               	bcf	5,2	;volatile
  2970                           
  2971                           ;main.c: 249: RA1 = 1;
  2972  028E  1486               	bsf	6,1	;volatile
  2973                           
  2974                           ;main.c: 250: RA2 = 0;
  2975  028F  1106               	bcf	6,2	;volatile
  2976  0290  0008               	return
  2977  0291                     i1l651:	
  2978                           ;main.c: 253: case 10:
  2979                           
  2980                           
  2981                           ;main.c: 254: if(shiweiNum & 0x20)
  2982  0291  1ECA               	btfss	_shiweiNum,5
  2983  0292  0008               	return
  2984                           
  2985                           ;main.c: 255: {
  2986                           ;main.c: 256: TRISA &= 0xFB;
  2987  0293  1683               	bsf	3,5	;RP0=1, select bank1
  2988  0294  1105               	bcf	5,2	;volatile
  2989                           
  2990                           ;main.c: 257: TRISA &= 0xF7;
  2991  0295  1185               	bcf	5,3	;volatile
  2992                           
  2993                           ;main.c: 258: RA3 = 1;
  2994  0296  1586               	bsf	6,3	;volatile
  2995                           
  2996                           ;main.c: 259: RA2 = 0;
  2997  0297  1106               	bcf	6,2	;volatile
  2998  0298  0008               	return
  2999  0299                     i1l653:	
  3000                           ;main.c: 262: case 11:
  3001                           
  3002                           
  3003                           ;main.c: 263: if(shiweiNum & 0x01)
  3004  0299  1C4A               	btfss	_shiweiNum,0
  3005  029A  0008               	return
  3006                           
  3007                           ;main.c: 264: {
  3008                           ;main.c: 265: TRISA &= 0xDF;
  3009  029B  1683               	bsf	3,5	;RP0=1, select bank1
  3010  029C  1285               	bcf	5,5	;volatile
  3011                           
  3012                           ;main.c: 266: TRISA &= 0xEF;
  3013  029D  1205               	bcf	5,4	;volatile
  3014                           
  3015                           ;main.c: 267: RA4 = 1;
  3016  029E  1606               	bsf	6,4	;volatile
  3017                           
  3018                           ;main.c: 268: RA5 = 0;
  3019  029F  1286               	bcf	6,5	;volatile
  3020  02A0  0008               	return
  3021  02A1                     i1l655:	
  3022                           ;main.c: 271: case 12:
  3023                           
  3024                           
  3025                           ;main.c: 272: if(shiweiNum & 0x02)
  3026  02A1  1CCA               	btfss	_shiweiNum,1
  3027  02A2  0008               	return
  3028                           
  3029                           ;main.c: 273: {
  3030                           ;main.c: 274: TRISA &= 0xF7;
  3031  02A3  1683               	bsf	3,5	;RP0=1, select bank1
  3032  02A4  1185               	bcf	5,3	;volatile
  3033                           
  3034                           ;main.c: 275: TRISA &= 0xEF;
  3035  02A5  1205               	bcf	5,4	;volatile
  3036                           
  3037                           ;main.c: 276: RA3 = 1;
  3038  02A6  1586               	bsf	6,3	;volatile
  3039                           
  3040                           ;main.c: 277: RA4 = 0;
  3041  02A7  1206               	bcf	6,4	;volatile
  3042  02A8  0008               	return
  3043  02A9                     i1l657:	
  3044                           ;main.c: 280: case 13:
  3045                           
  3046                           
  3047                           ;main.c: 281: if(shiweiNum & 0x04)
  3048  02A9  1D4A               	btfss	_shiweiNum,2
  3049  02AA  0008               	return
  3050                           
  3051                           ;main.c: 282: {
  3052                           ;main.c: 283: TRISA &= 0xF7;
  3053  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  3054  02AC  1185               	bcf	5,3	;volatile
  3055                           
  3056                           ;main.c: 284: TRISA &= 0xFD;
  3057  02AD  1085               	bcf	5,1	;volatile
  3058                           
  3059                           ;main.c: 285: RA3 = 1;
  3060  02AE  1586               	bsf	6,3	;volatile
  3061                           
  3062                           ;main.c: 286: RA1 = 0;
  3063  02AF  1086               	bcf	6,1	;volatile
  3064  02B0  0008               	return
  3065  02B1                     i1l659:	
  3066                           ;main.c: 289: case 0:
  3067                           
  3068                           
  3069                           ;main.c: 290: if(shiweiNum & 0x40)
  3070  02B1  1F4A               	btfss	_shiweiNum,6
  3071  02B2  0008               	return
  3072                           
  3073                           ;main.c: 291: {
  3074                           ;main.c: 292: TRISA &= 0xFB;
  3075  02B3  1683               	bsf	3,5	;RP0=1, select bank1
  3076  02B4  1105               	bcf	5,2	;volatile
  3077                           
  3078                           ;main.c: 293: TRISA &= 0xF7;
  3079  02B5  1185               	bcf	5,3	;volatile
  3080                           
  3081                           ;main.c: 294: RA2 = 1;
  3082  02B6  1506               	bsf	6,2	;volatile
  3083                           
  3084                           ;main.c: 295: RA3 = 0;
  3085  02B7  1186               	bcf	6,3	;volatile
  3086  02B8  0008               	return
  3087  02B9                     i1l1992:	
  3088  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  3089  02BA  082F               	movf	_ledCnt,w
  3090                           
  3091                           ; Switch size 1, requested type "space"
  3092                           ; Number of cases is 14, Range of values is 0 to 13
  3093                           ; switch strategies available:
  3094                           ; Name         Instructions Cycles
  3095                           ; direct_byte           20     6 (fixed)
  3096                           ; simple_byte           43    22 (average)
  3097                           ; jumptable            260     6 (fixed)
  3098                           ;	Chosen strategy is direct_byte
  3099  02BB  0084               	movwf	4
  3100  02BC  300E               	movlw	14
  3101  02BD  0204               	subwf	4,w
  3102  02BE  1803               	skipnc
  3103  02BF  0008               	return
  3104  02C0  3004               	movlw	high i1S2698
  3105  02C1  008A               	movwf	10
  3106  02C2  303D               	movlw	low i1S2698
  3107  02C3  0704               	addwf	4,w
  3108  02C4  0082               	movwf	2
  3109  02C5  0008               	return
  3110  02C6                     __end_of_ledShow:	
  3111  007E                     btemp	set	126	;btemp
  3112  007E                     wtemp0	set	126
  3113                           
  3114                           	psect	swtext1
  3115  043D                     __pswtext1:	
  3116  043D                     i1S2698:	
  3117  043D  2AB1               	ljmp	i1l659
  3118  043E  2A49               	ljmp	i1l632
  3119  043F  2A51               	ljmp	i1l635
  3120  0440  2A59               	ljmp	i1l637
  3121  0441  2A61               	ljmp	i1l639
  3122  0442  2A69               	ljmp	i1l641
  3123  0443  2A71               	ljmp	i1l643
  3124  0444  2A79               	ljmp	i1l645
  3125  0445  2A81               	ljmp	i1l647
  3126  0446  2A89               	ljmp	i1l649
  3127  0447  2A91               	ljmp	i1l651
  3128  0448  2A99               	ljmp	i1l653
  3129  0449  2AA1               	ljmp	i1l655
  3130  044A  2AA9               	ljmp	i1l657


Data Sizes:
    Strings     0
    Constant    12
    Data        0
    BSS         28
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     17      44
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->___lbdiv
    _setBatStep->___lwdiv
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___lbmod
    _setBatStep->___lwdiv
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1860
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                            _chrgCtr
                             _keyCtr
                         _setBatStep
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0     512
                            ___lbdiv
                            ___lbmod
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     297
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     215
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _setBatStep                                           0     0      0     501
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           5     5      0     847
                                              4 COMMON     1     1      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     847
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _chrgCtr
   _keyCtr
   _setBatStep
     ___lwdiv
   _workCtr
     ___lbdiv
     ___lbmod
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     11      2C       4       55.0%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      37       7        0.0%
DATA                 0      0      37       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jun 10 14:13:51 2025

                      pc 0002                       PL2 00E3                       PL4 02FF  
                     PL6 00F2                       PL8 00FB                       fsr 0004  
                    l617 0312                      l730 01C9                      l727 01CB  
                    l728 01C7                      l783 0084                      l777 0049  
                    l787 00C8                      _GIE 005F                      _RA1 0431  
                    _RA2 0432                      _RA3 0433                      _RA4 0434  
                    _RA5 0435                      _RB3 0033                      _PR2 0011  
    __size_of_ADC_Sample 00CB                      fsr0 0004                      indf 0000  
        __end_of_AD_Init 0467                     l2014 0358                     l2110 0452  
                   l1054 03DC                     l2024 036B                     l2008 034E  
                   l2112 0455                     l2404 00CC                     l2500 01F8  
                   l2420 03B8                     l2512 0217                     l2370 0034  
                   l2354 0029                     l2514 0205                     l2522 021B  
                   l2602 0166                     l2380 0054                     l2364 0033  
                   l2356 002B                     l2444 037B                     l2524 021E  
                   l2428 03CC                     l1902 03E9                     l2622 0189  
                   l2614 018D                     l2606 0174                     l2392 0078  
                   l2456 0392                     l2480 01B4                     l2616 018F  
                   l2560 0124                     l2544 010E                     l2394 0080  
                   l2466 0413                     l2490 01CE                     l2626 019D  
                   l2618 0198                     l2570 0133                     l2388 006E  
                   l2580 0144                     l2556 011B                     l2494 01E3  
                   l2590 0157                     l2566 012F                     l2576 0140  
                   l2584 0148                     l2594 015B                     l2658 0329  
                   l1788 045F                     l2676 0340                     l2598 015F  
                   l1888 03D6                     _CHS4 04B6                     _IOCA 0089  
                   _IOCB 0009                     u2315 00D5                     u2245 0074  
                   u2255 007E                     u2295 00BE                     u2375 0384  
                   _PIE1 000E                     _PEIE 005E                     _RAIE 0073  
                   _RAIF 006B                     u2927 0418                     _RBIE 005B  
                   _RBIF 0058                     u2937 0025                     _PIR1 000D  
                   _WPDA 0087                     _WPUA 0088                     _WPUB 0008  
                   _main 0308                     btemp 007E                     start 000C  
          ??_Init_System 0073                    ?_main 0070          __end_of___lbdiv 03EB  
        __end_of___lbmod 03D0                    _T2CON 0013          __end_of___lwdiv 0397  
                  i1l612 03AB                    i1l632 0249                    i1l641 0269  
                  i1l651 0291                    i1l643 0271                    i1l635 0251  
                  i1l653 0299                    i1l645 0279                    i1l637 0259  
                  i1l655 02A1                    i1l647 0281                    i1l639 0261  
                  i1l657 02A9                    i1l649 0289                    i1l659 02B1  
                  _PORTA 0086                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0005                    _PWMTH 0018                    _PWMTL 0017  
        __end_of_chrgCtr 036D          __end_of_ledShow 02C6                    pclath 000A  
        __end_of_pwmInit 043D          __end_of_pwmStop 046B                    status 0003  
                  wtemp0 007E          __end_of_workCtr 01A3          ___lbdiv@divisor 0073  
        ___lbdiv@counter 0075          __initialization 000D             __end_of_main 0342  
                 ??_main 0077                ??_AD_Init 0073      __end_of_Init_System 0405  
                 _ADCON0 0095                   _ADCON1 0096                   i1S2698 043D  
                 _ADRESH 0099                   _ADRESL 0098                   _ANSEL0 0093  
                 _ANSEL1 0094                   _GODONE 04A9                   i1l2270 03A8  
                 i1l1992 02B9                   _LDO_EN 04B2                   _INTCON 000B  
                 _OSCCON 0014                   _TMR2IE 0071                   _TMR2IF 0069  
                 _PWMD2L 009B             ??_ADC_Sample 0038       __size_of_Isr_Timer 001D  
             _Sleep_Mode 02C6                ??___lbdiv 0074                ??___lbmod 0074  
                 _ledCnt 002F                ??___lwdiv 0077                   _keyCtr 044B  
              ??_chrgCtr 0073                   _result 0024                ??_ledShow 0070  
       __end_of_numArray 042D       __end_of_ADC_Sample 00E3                   saved_w 007E  
              ??_pwmInit 0073                ??_pwmStop 0073                ??_workCtr 0077  
       ___lbdiv@dividend 0074          ___lbmod@divisor 0073  __end_of__initialization 0016  
        ___lbmod@counter 0039           __pcstackCOMMON 0070              _Init_System 03EB  
             __end_ofPL2 00F2               __end_ofPL4 0308               __end_ofPL6 00FB  
             __end_ofPL8 0100         ___lbdiv@quotient 0076        __end_of_Isr_Timer 03B4  
             _checkBatAD 0405               __pbssBANK0 0020             _chrgFullFlag 0033  
           _chrgFullTime 0031              ?_Sleep_Mode 0070               __pmaintext 0308  
             __pintentry 0004                  ?_keyCtr 0070               _ledCntTime 002D  
                _AD_Init 045F               _curBatStep 0029                  _PWM23DT 009D  
                _PWMD23H 009E                  _PWMCON0 0015                  _PWMCON1 0016  
                _PWMCON2 001D               __stringtab 041B                  _IntFlag 0034  
             _intCount10 0032          ADC_Sample@adldo 0073          ADC_Sample@admax 0045  
        ADC_Sample@admin 0043          ADC_Sample@adsum 003F                  ___lbdiv 03D0  
                ___lbmod 03B4                  ___lwdiv 036D          __size_of_keyCtr 000C  
                _chrgCtr 0342               _lowBatFlag 002C                  __ptext1 0100  
                __ptext2 0467                  __ptext3 042D                  __ptext4 03B4  
                __ptext5 03D0                  __ptext6 01A3                  __ptext7 036D  
                __ptext8 044B                  __ptext9 0342                  _ledShow 0238  
             _lowBatTime 0028                  _count1s 0035               _setBatStep 01A3  
    __size_of_Sleep_Mode 0039                  _pwmInit 042D              ?_checkBatAD 0070  
                _pwmStop 0467                  clrloop0 0458                  _workCtr 0100  
   end_of_initialization 0016         ___lbmod@dividend 0038              ___lbmod@rem 003A  
    __size_of_checkBatAD 0016             ?_Init_System 0070           __end_of_keyCtr 0457  
    start_initialization 000D              ?_setBatStep 0070                _Isr_Timer 0397  
           ??_Sleep_Mode 0073        ADC_Sample@ad_temp 0047                 ??_keyCtr 0073  
               ?_AD_Init 0070              __pbssCOMMON 0077                ___latbits 0000  
          __pcstackBANK0 0038       __end_of_Sleep_Mode 02FF               ?_Isr_Timer 0070  
              __pnvBANK0 0049         ___lwdiv@dividend 0075      __size_of_setBatStep 0095  
               ?___lbdiv 0073                 ?___lbmod 0073                 ?___lwdiv 0073  
               ?_chrgCtr 0070                __pstrings 041B                __pswtext1 043D  
               ?_ledShow 0070                _firstTime 004B           ADC_Sample@adch 003D  
               ?_pwmInit 0070             ??_checkBatAD 0074                 ?_pwmStop 0070  
       ___lwdiv@quotient 0039                 ?_workCtr 0070              ADC_Sample@i 003E  
            ADC_Sample@j 003C        interrupt_function 0004                clear_ram0 0457  
              _sleepTime 002B                _shiweiNum 004A       __end_of_checkBatAD 041B  
            __stringbase 0420     __size_of_Init_System 001A         __size_of_AD_Init 0008  
            ??_Isr_Timer 0070               _ADC_Sample 0018         __size_of___lbdiv 001B  
       __size_of___lbmod 001C         __size_of___lwdiv 002A       __end_of__stringtab 0421  
       __size_of_chrgCtr 002B         __size_of_ledShow 008E                 _adresult 0026  
           ??_setBatStep 0077                 _chrgFlag 007A          ___lwdiv@divisor 0073  
        ___lwdiv@counter 0038                 __ptext10 0405                 __ptext11 0018  
               __ptext12 02C6                 __ptext13 03EB                 __ptext14 045F  
               __ptext15 0397                 __ptext16 0238         __size_of_pwmInit 0010  
       __size_of_pwmStop 0004                 _geweiNum 0049                 _count30s 0020  
       __size_of_workCtr 00A3                 _intCount 0036            __size_of_main 003A  
               _numArray 0421                 _test_adc 0037       __end_of_setBatStep 0238  
               _power_ad 0077              _lowShanTime 0022                 _workStep 0030  
           _motorPwmFlag 002A                 intlevel1 0000              ?_ADC_Sample 0073  
              stringcode 041B              _showBatTime 002E              _showBatStep 0079  
             _OPTION_REG 0001                 stringdir 041B                 stringtab 041B  
