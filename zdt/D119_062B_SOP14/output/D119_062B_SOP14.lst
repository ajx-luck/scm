

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jul 10 15:02:10 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	swtext1,local,class=CONST,delta=2
    32                           	psect	pa_nodes0,global,class=CODE,delta=2
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 1.45
    36                           ; Generated 16/11/2017 GMT
    37                           ; 
    38                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F887 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	strings
    71  04A9                     __pstrings:	
    72  04A9                     stringtab:	
    73  04A9                     __stringtab:	
    74  04A9                     stringcode:	
    75                           ;	String table - string pointers are 1 byte each
    76                           
    77  04A9                     stringdir:	
    78  04A9  3004               	movlw	high stringdir
    79  04AA  008A               	movwf	10
    80  04AB  0804               	movf	4,w
    81  04AC  0A84               	incf	4,f
    82  04AD  0782               	addwf	2,f
    83  04AE                     __stringbase:	
    84  04AE  3400               	retlw	0
    85  04AF                     __end_of__stringtab:	
    86  04AF                     _numArray:	
    87  04AF  343F               	retlw	63
    88  04B0  3406               	retlw	6
    89  04B1  345B               	retlw	91
    90  04B2  344F               	retlw	79
    91  04B3  3466               	retlw	102
    92  04B4  346D               	retlw	109
    93  04B5  347D               	retlw	125
    94  04B6  3407               	retlw	7
    95  04B7  347F               	retlw	127
    96  04B8  346F               	retlw	111
    97  04B9  3473               	retlw	115
    98  04BA  3476               	retlw	118
    99  04BB                     __end_of_numArray:	
   100                           
   101                           	psect	nvBANK0
   102  004F                     __pnvBANK0:	
   103  004F                     _startLockFlag:	
   104  004F                     	ds	1
   105  0050                     _geweiNum:	
   106  0050                     	ds	1
   107  0051                     _shiweiNum:	
   108  0051                     	ds	1
   109  0052                     _firstTime:	
   110  0052                     	ds	1
   111  001D                     _PWMCON2	set	29
   112  0018                     _PWMTH	set	24
   113  0017                     _PWMTL	set	23
   114  0016                     _PWMCON1	set	22
   115  0015                     _PWMCON0	set	21
   116  0014                     _OSCCON	set	20
   117  0013                     _T2CON	set	19
   118  0011                     _PR2	set	17
   119  000E                     _PIE1	set	14
   120  000D                     _PIR1	set	13
   121  000B                     _INTCON	set	11
   122  0009                     _IOCB	set	9
   123  0008                     _WPUB	set	8
   124  0006                     _PORTB	set	6
   125  0005                     _TRISB	set	5
   126  0001                     _OPTION_REG	set	1
   127  0071                     _TMR2IE	set	113
   128  0073                     _RAIE	set	115
   129  0069                     _TMR2IF	set	105
   130  006B                     _RAIF	set	107
   131  0058                     _RBIF	set	88
   132  005B                     _RBIE	set	91
   133  005E                     _PEIE	set	94
   134  005F                     _GIE	set	95
   135  0033                     _RB3	set	51
   136  009E                     _PWMD23H	set	158
   137  009D                     _PWM23DT	set	157
   138  009B                     _PWMD2L	set	155
   139  0099                     _ADRESH	set	153
   140  0098                     _ADRESL	set	152
   141  0096                     _ADCON1	set	150
   142  0095                     _ADCON0	set	149
   143  0094                     _ANSEL1	set	148
   144  0093                     _ANSEL0	set	147
   145  0089                     _IOCA	set	137
   146  0088                     _WPUA	set	136
   147  0087                     _WPDA	set	135
   148  0086                     _PORTA	set	134
   149  0085                     _TRISA	set	133
   150  04B2                     _LDO_EN	set	1202
   151  04B6                     _CHS4	set	1206
   152  04A9                     _GODONE	set	1193
   153  0431                     _RA1	set	1073
   154  0432                     _RA2	set	1074
   155  0433                     _RA3	set	1075
   156  0434                     _RA4	set	1076
   157  0435                     _RA5	set	1077
   158                           
   159                           	psect	cinit
   160  000D                     start_initialization:	
   161                           ; #config settings
   162                           
   163  000D                     __initialization:	
   164                           
   165                           ; Clear objects allocated to COMMON
   166  000D  3077               	movlw	low __pbssCOMMON
   167  000E  0084               	movwf	4
   168  000F  307B               	movlw	low (__pbssCOMMON+4)
   169  0010  24D9               	fcall	clear_ram0
   170  0011  3020               	movlw	low __pbssBANK0
   171                           
   172                           ; Clear objects allocated to BANK0
   173  0012  1383               	bcf	3,7	;select IRP bank0
   174  0013  0084               	movwf	4
   175  0014  303E               	movlw	low (__pbssBANK0+30)
   176  0015  24D9               	fcall	clear_ram0
   177  0016                     end_of_initialization:	
   178                           ;End of C runtime variable initialization code
   179                           
   180  0016                     __end_of__initialization:	
   181  0016  0183               	clrf	3
   182  0017  2B57               	ljmp	_main	;jump to C main() function
   183                           
   184                           	psect	bssCOMMON
   185  0077                     __pbssCOMMON:	
   186  0077                     _power_ad:	
   187  0077                     	ds	2
   188  0079                     _showBatStep:	
   189  0079                     	ds	1
   190  007A                     _chrgFlag:	
   191  007A                     	ds	1
   192                           
   193                           	psect	bssBANK0
   194  0020                     __pbssBANK0:	
   195  0020                     _out_ad:	
   196  0020                     	ds	2
   197  0022                     _count30s:	
   198  0022                     	ds	2
   199  0024                     _lowShanTime:	
   200  0024                     	ds	2
   201  0026                     _result:	
   202  0026                     	ds	2
   203  0028                     _adresult:	
   204  0028                     	ds	2
   205  002A                     _maxDuty:	
   206  002A                     	ds	1
   207  002B                     _curDuty:	
   208  002B                     	ds	1
   209  002C                     _overTime:	
   210  002C                     	ds	1
   211  002D                     _lockTime:	
   212  002D                     	ds	1
   213  002E                     _lowBatTime:	
   214  002E                     	ds	1
   215  002F                     _curBatStep:	
   216  002F                     	ds	1
   217  0030                     _motorPwmFlag:	
   218  0030                     	ds	1
   219  0031                     _sleepTime:	
   220  0031                     	ds	1
   221  0032                     _lowBatFlag:	
   222  0032                     	ds	1
   223  0033                     _ledCntTime:	
   224  0033                     	ds	1
   225  0034                     _showBatTime:	
   226  0034                     	ds	1
   227  0035                     _ledCnt:	
   228  0035                     	ds	1
   229  0036                     _workStep:	
   230  0036                     	ds	1
   231  0037                     _chrgFullTime:	
   232  0037                     	ds	1
   233  0038                     _intCount10:	
   234  0038                     	ds	1
   235  0039                     _chrgFullFlag:	
   236  0039                     	ds	1
   237  003A                     _IntFlag:	
   238  003A                     	ds	1
   239  003B                     _count1s:	
   240  003B                     	ds	1
   241  003C                     _intCount:	
   242  003C                     	ds	1
   243  003D                     _test_adc:	
   244  003D                     	ds	1
   245                           
   246                           	psect	clrtext
   247  04D9                     clear_ram0:	
   248                           ;	Called with FSR containing the base address, and
   249                           ;	W with the last address+1
   250                           
   251  04D9  0064               	clrwdt	;clear the watchdog before getting into this loop
   252  04DA                     clrloop0:	
   253  04DA  0180               	clrf	0	;clear RAM location pointed to by FSR
   254  04DB  0A84               	incf	4,f	;increment pointer
   255  04DC  0604               	xorwf	4,w	;XOR with final address
   256  04DD  1903               	btfsc	3,2	;have we reached the end yet?
   257  04DE  3400               	retlw	0	;all done for this memory range, return
   258  04DF  0604               	xorwf	4,w	;XOR again to restore value
   259  04E0  2CDA               	goto	clrloop0	;do the next byte
   260                           
   261                           	psect	cstackCOMMON
   262  0070                     __pcstackCOMMON:	
   263  0070                     ?_ledShow:	
   264  0070                     ??_ledShow:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_Init_System:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ?_AD_Init:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_chrgCtr:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?_checkBatAD:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ?_setBatStep:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?_keyCtr:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ?_workCtr:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_checkOutAD:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_Sleep_Mode:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_pwmStop:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_pwmInit:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_Isr_Timer:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ??_Isr_Timer:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_main:	
   307                           ; 1 bytes @ 0x0
   308                           
   309                           
   310                           ; 1 bytes @ 0x0
   311  0070                     	ds	3
   312  0073                     ??_Init_System:	
   313  0073                     ??_AD_Init:	
   314                           ; 1 bytes @ 0x3
   315                           
   316  0073                     ??_chrgCtr:	
   317                           ; 1 bytes @ 0x3
   318                           
   319  0073                     ??_keyCtr:	
   320                           ; 1 bytes @ 0x3
   321                           
   322  0073                     ??_Sleep_Mode:	
   323                           ; 1 bytes @ 0x3
   324                           
   325  0073                     ??_pwmStop:	
   326                           ; 1 bytes @ 0x3
   327                           
   328  0073                     ??_pwmInit:	
   329                           ; 1 bytes @ 0x3
   330                           
   331  0073                     ?_ADC_Sample:	
   332                           ; 1 bytes @ 0x3
   333                           
   334  0073                     ?___lbdiv:	
   335                           ; 1 bytes @ 0x3
   336                           
   337  0073                     ?___lbmod:	
   338                           ; 1 bytes @ 0x3
   339                           
   340  0073                     ?___lwdiv:	
   341                           ; 1 bytes @ 0x3
   342                           
   343  0073                     ADC_Sample@adldo:	
   344                           ; 2 bytes @ 0x3
   345                           
   346  0073                     ___lbdiv@divisor:	
   347                           ; 1 bytes @ 0x3
   348                           
   349  0073                     ___lbmod@divisor:	
   350                           ; 1 bytes @ 0x3
   351                           
   352  0073                     ___lwdiv@divisor:	
   353                           ; 1 bytes @ 0x3
   354                           
   355                           
   356                           ; 2 bytes @ 0x3
   357  0073                     	ds	1
   358  0074                     ??_checkBatAD:	
   359  0074                     ??_checkOutAD:	
   360                           ; 1 bytes @ 0x4
   361                           
   362  0074                     ??___lbdiv:	
   363                           ; 1 bytes @ 0x4
   364                           
   365  0074                     ??___lbmod:	
   366                           ; 1 bytes @ 0x4
   367                           
   368  0074                     ___lbdiv@dividend:	
   369                           ; 1 bytes @ 0x4
   370                           
   371                           
   372                           ; 1 bytes @ 0x4
   373  0074                     	ds	1
   374  0075                     ___lbdiv@counter:	
   375  0075                     ___lwdiv@dividend:	
   376                           ; 1 bytes @ 0x5
   377                           
   378                           
   379                           ; 2 bytes @ 0x5
   380  0075                     	ds	1
   381  0076                     ___lbdiv@quotient:	
   382                           
   383                           ; 1 bytes @ 0x6
   384  0076                     	ds	1
   385  0077                     ??_workCtr:	
   386  0077                     ??_main:	
   387                           ; 1 bytes @ 0x7
   388                           
   389  0077                     ??___lwdiv:	
   390                           ; 1 bytes @ 0x7
   391                           
   392                           
   393                           	psect	cstackBANK0
   394  003E                     __pcstackBANK0:	
   395                           ; 1 bytes @ 0x7
   396                           
   397  003E                     ??_ADC_Sample:	
   398  003E                     ___lbmod@dividend:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  003E                     ___lwdiv@counter:	
   402                           ; 1 bytes @ 0x0
   403                           
   404                           
   405                           ; 1 bytes @ 0x0
   406  003E                     	ds	1
   407  003F                     ___lbmod@counter:	
   408  003F                     ___lwdiv@quotient:	
   409                           ; 1 bytes @ 0x1
   410                           
   411                           
   412                           ; 2 bytes @ 0x1
   413  003F                     	ds	1
   414  0040                     ___lbmod@rem:	
   415                           
   416                           ; 1 bytes @ 0x2
   417  0040                     	ds	1
   418  0041                     ??_setBatStep:	
   419                           
   420                           ; 1 bytes @ 0x3
   421  0041                     	ds	1
   422  0042                     ADC_Sample@j:	
   423                           
   424                           ; 1 bytes @ 0x4
   425  0042                     	ds	1
   426  0043                     ADC_Sample@adch:	
   427                           
   428                           ; 1 bytes @ 0x5
   429  0043                     	ds	1
   430  0044                     ADC_Sample@i:	
   431                           
   432                           ; 1 bytes @ 0x6
   433  0044                     	ds	1
   434  0045                     ADC_Sample@adsum:	
   435                           
   436                           ; 4 bytes @ 0x7
   437  0045                     	ds	4
   438  0049                     ADC_Sample@admin:	
   439                           
   440                           ; 2 bytes @ 0xB
   441  0049                     	ds	2
   442  004B                     ADC_Sample@admax:	
   443                           
   444                           ; 2 bytes @ 0xD
   445  004B                     	ds	2
   446  004D                     ADC_Sample@ad_temp:	
   447                           
   448                           ; 2 bytes @ 0xF
   449  004D                     	ds	2
   450                           
   451                           	psect	maintext
   452  0357                     __pmaintext:	
   453 ;;
   454 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   455 ;;
   456 ;; *************** function _main *****************
   457 ;; Defined at:
   458 ;;		line 124 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
   459 ;; Parameters:    Size  Location     Type
   460 ;;		None
   461 ;; Auto vars:     Size  Location     Type
   462 ;;		None
   463 ;; Return value:  Size  Location     Type
   464 ;;                  1    wreg      void 
   465 ;; Registers used:
   466 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   467 ;; Tracked objects:
   468 ;;		On entry : B00/0
   469 ;;		On exit  : 100/0
   470 ;;		Unchanged: 0/0
   471 ;; Data sizes:     COMMON   BANK0   BANK1
   472 ;;      Params:         0       0       0
   473 ;;      Locals:         0       0       0
   474 ;;      Temps:          0       0       0
   475 ;;      Totals:         0       0       0
   476 ;;Total ram usage:        0 bytes
   477 ;; Hardware stack levels required when called:    4
   478 ;; This function calls:
   479 ;;		_AD_Init
   480 ;;		_Init_System
   481 ;;		_Sleep_Mode
   482 ;;		_checkBatAD
   483 ;;		_checkOutAD
   484 ;;		_chrgCtr
   485 ;;		_keyCtr
   486 ;;		_setBatStep
   487 ;;		_workCtr
   488 ;; This function is called by:
   489 ;;		Startup code after reset
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493                           
   494                           ;psect for function _main
   495  0357                     _main:	
   496                           
   497                           ;main.c: 126: Init_System();
   498                           
   499                           ;incstack = 0
   500                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   501  0357  2463               	fcall	_Init_System
   502                           
   503                           ;main.c: 127: AD_Init();
   504  0358  24E1               	fcall	_AD_Init
   505                           
   506                           ;main.c: 129: baiweiNum = 1;
   507  0359  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   508  035A  0084               	movwf	4
   509  035B  24A9               	fcall	stringdir
   510  035C  1283               	bcf	3,5	;RP0=0, select bank0
   511  035D  00D0               	movwf	_geweiNum
   512  035E  00D1               	movwf	_shiweiNum
   513                           
   514                           ;main.c: 130: firstTime = 250;
   515  035F  30FA               	movlw	250
   516  0360  00D2               	movwf	_firstTime
   517                           
   518                           ;main.c: 131: startLockFlag = 1;
   519  0361  01CF               	clrf	_startLockFlag
   520  0362  0ACF               	incf	_startLockFlag,f
   521  0363                     l631:	
   522                           ;main.c: 132: while (1)
   523                           
   524  0363  0064               	clrwdt	;# 
   525                           
   526                           ;main.c: 135: if(intCount10 > 10)
   527  0364  300B               	movlw	11
   528  0365  1283               	bcf	3,5	;RP0=0, select bank0
   529  0366  0238               	subwf	_intCount10,w
   530  0367  1803               	btfsc	3,0
   531                           
   532                           ;main.c: 136: {
   533                           ;main.c: 137: intCount10 = 0;
   534  0368  01B8               	clrf	_intCount10
   535                           
   536                           ;main.c: 138: }
   537                           ;main.c: 139: if(!IntFlag)
   538  0369  083A               	movf	_IntFlag,w
   539  036A  1903               	btfsc	3,2
   540  036B  2B63               	goto	l631
   541                           
   542                           ;main.c: 141: IntFlag = 0;
   543  036C  01BA               	clrf	_IntFlag
   544                           
   545                           ;main.c: 142: chrgCtr();
   546  036D  2396               	fcall	_chrgCtr
   547                           
   548                           ;main.c: 143: checkBatAD();
   549  036E  2493               	fcall	_checkBatAD
   550                           
   551                           ;main.c: 144: setBatStep();
   552  036F  21DD               	fcall	_setBatStep
   553                           
   554                           ;main.c: 145: if(lowBatFlag == 0 && firstTime == 0 && chrgFlag == 0)
   555  0370  0832               	movf	_lowBatFlag,w
   556  0371  1D03               	btfss	3,2
   557  0372  2B7A               	goto	l2900
   558  0373  0852               	movf	_firstTime,w
   559  0374  1D03               	btfss	3,2
   560  0375  2B7A               	goto	l2900
   561  0376  087A               	movf	_chrgFlag,w
   562  0377  1D03               	btfss	3,2
   563  0378  2B7A               	goto	l2900
   564                           
   565                           ;main.c: 146: {
   566                           ;main.c: 147: keyCtr();
   567  0379  242C               	fcall	_keyCtr
   568  037A                     l2900:	
   569                           
   570                           ;main.c: 148: }
   571                           ;main.c: 149: workCtr();
   572  037A  2100               	fcall	_workCtr
   573                           
   574                           ;main.c: 150: checkOutAD();
   575  037B  247D               	fcall	_checkOutAD
   576                           
   577                           ;main.c: 151: if(chrgFlag == 0 && workStep == 0 && firstTime == 0 && showBatTime == 0)
   578  037C  087A               	movf	_chrgFlag,w
   579  037D  1283               	bcf	3,5	;RP0=0, select bank0
   580  037E  1D03               	btfss	3,2
   581  037F  2B94               	goto	L1
   582  0380  0836               	movf	_workStep,w
   583  0381  1D03               	btfss	3,2
   584  0382  2B93               	goto	l2920
   585  0383  0852               	movf	_firstTime,w
   586  0384  1D03               	btfss	3,2
   587  0385  2B93               	goto	l2920
   588                           
   589                           ;main.c: 152: {
   590                           ;main.c: 153: baiweiNum = 0;
   591  0386  0834               	movf	_showBatTime,w
   592  0387  1D03               	btfss	3,2
   593  0388  2B93               	goto	l2920
   594  0389  30C8               	movlw	200
   595                           
   596                           ;main.c: 154: shiweiNum = geweiNum = 0;
   597  038A  01D0               	clrf	_geweiNum
   598  038B  01D1               	clrf	_shiweiNum
   599                           
   600                           ;main.c: 155: if(++sleepTime >= 200)
   601  038C  0AB1               	incf	_sleepTime,f
   602  038D  0231               	subwf	_sleepTime,w
   603  038E  1C03               	skipc
   604  038F  2B63               	goto	l631
   605                           
   606                           ;main.c: 156: {
   607                           ;main.c: 157: sleepTime = 0;
   608  0390  01B1               	clrf	_sleepTime
   609                           
   610                           ;main.c: 158: Sleep_Mode();
   611  0391  2315               	fcall	_Sleep_Mode
   612  0392  2B63               	goto	l631
   613  0393                     l2920:	
   614                           
   615                           ;main.c: 161: else
   616                           ;main.c: 162: {
   617                           ;main.c: 163: sleepTime = 0;
   618  0393  1283               	bcf	3,5	;RP0=0, select bank0
   619  0394                     L1:	
   620  0394  01B1               	clrf	_sleepTime
   621  0395  2B63               	goto	l631
   622  0396                     __end_of_main:	
   623                           
   624                           	psect	text1
   625  0100                     __ptext1:	
   626 ;; *************** function _workCtr *****************
   627 ;; Defined at:
   628 ;;		line 435 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;		None
   633 ;; Return value:  Size  Location     Type
   634 ;;                  1    wreg      void 
   635 ;; Registers used:
   636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   637 ;; Tracked objects:
   638 ;;		On entry : 100/0
   639 ;;		On exit  : 100/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMMON   BANK0   BANK1
   642 ;;      Params:         0       0       0
   643 ;;      Locals:         0       0       0
   644 ;;      Temps:          0       0       0
   645 ;;      Totals:         0       0       0
   646 ;;Total ram usage:        0 bytes
   647 ;; Hardware stack levels used:    1
   648 ;; Hardware stack levels required when called:    3
   649 ;; This function calls:
   650 ;;		___lbdiv
   651 ;;		___lbmod
   652 ;;		_pwmInit
   653 ;;		_pwmStop
   654 ;; This function is called by:
   655 ;;		_main
   656 ;; This function uses a non-reentrant model
   657 ;;
   658                           
   659                           
   660                           ;psect for function _workCtr
   661  0100                     _workCtr:	
   662                           
   663                           ;main.c: 444: if(curDuty < maxDuty)
   664                           
   665                           ;incstack = 0
   666                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   667  0100  082A               	movf	_maxDuty,w
   668  0101  022B               	subwf	_curDuty,w
   669  0102  1803               	skipnc
   670  0103  2906               	goto	l2728
   671                           
   672                           ;main.c: 445: {
   673                           ;main.c: 446: curDuty++;
   674  0104  0AAB               	incf	_curDuty,f
   675                           
   676                           ;main.c: 447: }
   677  0105  290A               	goto	l2732
   678  0106                     l2728:	
   679                           
   680                           ;main.c: 448: else if(curDuty > maxDuty)
   681  0106  082B               	movf	_curDuty,w
   682  0107  022A               	subwf	_maxDuty,w
   683  0108  1C03               	btfss	3,0
   684                           
   685                           ;main.c: 449: {
   686                           ;main.c: 450: curDuty--;
   687  0109  03AB               	decf	_curDuty,f
   688  010A                     l2732:	
   689                           
   690                           ;main.c: 451: }
   691                           ;main.c: 452: if(lowShanTime > 0)
   692  010A  0824               	movf	_lowShanTime,w
   693  010B  0425               	iorwf	_lowShanTime+1,w
   694  010C  1903               	btfsc	3,2
   695  010D  2918               	goto	l2738
   696                           
   697                           ;main.c: 453: {
   698                           ;main.c: 454: if(--lowShanTime == 0)
   699  010E  3001               	movlw	1
   700  010F  02A4               	subwf	_lowShanTime,f
   701  0110  3000               	movlw	0
   702  0111  1C03               	skipc
   703  0112  03A5               	decf	_lowShanTime+1,f
   704  0113  02A5               	subwf	_lowShanTime+1,f
   705  0114  0824               	movf	_lowShanTime,w
   706  0115  0425               	iorwf	_lowShanTime+1,w
   707  0116  1903               	btfsc	3,2
   708                           
   709                           ;main.c: 455: {
   710                           ;main.c: 456: workStep = 0;
   711  0117  01B6               	clrf	_workStep
   712  0118                     l2738:	
   713                           
   714                           ;main.c: 457: }
   715                           ;main.c: 458: }
   716                           ;main.c: 459: if(showBatTime > 0)
   717  0118  0834               	movf	_showBatTime,w
   718  0119  1D03               	btfss	3,2
   719                           
   720                           ;main.c: 460: {
   721                           ;main.c: 461: showBatTime--;
   722  011A  03B4               	decf	_showBatTime,f
   723                           
   724                           ;main.c: 462: }
   725                           ;main.c: 463: if(firstTime > 0)
   726  011B  0852               	movf	_firstTime,w
   727  011C  1903               	btfsc	3,2
   728  011D  292E               	goto	l2754
   729                           
   730                           ;main.c: 464: {
   731                           ;main.c: 465: firstTime--;
   732  011E  03D2               	decf	_firstTime,f
   733                           
   734                           ;main.c: 466: if(showBatStep < curBatStep)
   735  011F  082F               	movf	_curBatStep,w
   736  0120  0279               	subwf	_showBatStep,w
   737  0121  1803               	skipnc
   738  0122  2925               	goto	l2750
   739                           
   740                           ;main.c: 467: {
   741                           ;main.c: 468: showBatStep = curBatStep;
   742  0123  082F               	movf	_curBatStep,w
   743  0124  00F9               	movwf	_showBatStep
   744  0125                     l2750:	
   745                           
   746                           ;main.c: 469: }
   747                           ;main.c: 470: shiweiNum = numArray[8];
   748  0125  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   749  0126  0084               	movwf	4
   750  0127  24A9               	fcall	stringdir
   751  0128  00D1               	movwf	_shiweiNum
   752                           
   753                           ;main.c: 471: geweiNum = numArray[8];
   754  0129  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   755  012A  0084               	movwf	4
   756  012B  24A9               	fcall	stringdir
   757  012C  00D0               	movwf	_geweiNum
   758                           
   759                           ;main.c: 472: }
   760  012D  2997               	goto	l2828
   761  012E                     l2754:	
   762                           
   763                           ;main.c: 473: else if(workStep == 0 || (lowShanTime > 0 && count1s < 50))
   764  012E  0836               	movf	_workStep,w
   765  012F  1903               	btfsc	3,2
   766  0130  2939               	goto	l2760
   767  0131  0824               	movf	_lowShanTime,w
   768  0132  0425               	iorwf	_lowShanTime+1,w
   769  0133  1903               	btfsc	3,2
   770  0134  2946               	goto	l2768
   771  0135  3032               	movlw	50
   772  0136  023B               	subwf	_count1s,w
   773  0137  1803               	skipnc
   774  0138  2946               	goto	l2768
   775  0139                     l2760:	
   776                           
   777                           ;main.c: 474: {
   778                           ;main.c: 475: shiweiNum = 0;
   779  0139  01D1               	clrf	_shiweiNum
   780                           
   781                           ;main.c: 476: geweiNum = 0;
   782  013A  01D0               	clrf	_geweiNum
   783                           
   784                           ;main.c: 477: maxDuty = 0;
   785  013B  01AA               	clrf	_maxDuty
   786                           
   787                           ;main.c: 478: PWMD2L = curDuty;
   788  013C  082B               	movf	_curDuty,w
   789  013D  1683               	bsf	3,5	;RP0=1, select bank1
   790  013E  009B               	movwf	27	;volatile
   791                           
   792                           ;main.c: 479: if(curDuty < 40)
   793  013F  3028               	movlw	40
   794  0140  1283               	bcf	3,5	;RP0=0, select bank0
   795  0141  022B               	subwf	_curDuty,w
   796  0142  1803               	skipnc
   797  0143  2997               	goto	l2828
   798                           
   799                           ;main.c: 480: {
   800                           ;main.c: 481: pwmStop();
   801  0144  24E9               	fcall	_pwmStop
   802  0145  2997               	goto	l2828
   803  0146                     l2768:	
   804                           
   805                           ;main.c: 485: else if(workStep == 1)
   806  0146  0B36               	decfsz	_workStep,w
   807  0147  2967               	goto	l2798
   808                           
   809                           ;main.c: 486: {
   810                           ;main.c: 487: if(chrgFlag == 0)
   811  0148  087A               	movf	_chrgFlag,w
   812  0149  1D03               	btfss	3,2
   813  014A  2953               	goto	l2774
   814                           
   815                           ;main.c: 488: {
   816                           ;main.c: 489: shiweiNum = numArray[10];
   817  014B  300B               	movlw	low (((_numArray+10)-__stringbase)| (0+32768))
   818  014C  0084               	movwf	4
   819  014D  24A9               	fcall	stringdir
   820  014E  00D1               	movwf	_shiweiNum
   821                           
   822                           ;main.c: 490: geweiNum = numArray[1];
   823  014F  3002               	movlw	low (((_numArray+1)-__stringbase)| (0+32768))
   824  0150  0084               	movwf	4
   825  0151  24A9               	fcall	stringdir
   826  0152  00D0               	movwf	_geweiNum
   827  0153                     l2774:	
   828                           
   829                           ;main.c: 491: }
   830                           ;main.c: 492: if(motorPwmFlag == 0)
   831  0153  0830               	movf	_motorPwmFlag,w
   832  0154  1D03               	btfss	3,2
   833  0155  2958               	goto	l2784
   834                           
   835                           ;main.c: 493: {
   836                           ;main.c: 494: pwmInit();
   837  0156  24BB               	fcall	_pwmInit
   838                           
   839                           ;main.c: 495: PWMD23H = 0X00;
   840                           
   841                           ;main.c: 496: PWMD2L = 40;
   842                           
   843                           ;main.c: 497: curDuty = 40;
   844  0157  21D6               	fcall	PL10	;call to abstracted procedure
   845  0158                     l2784:	
   846                           
   847                           ;main.c: 498: }
   848                           ;main.c: 499: PWMD2L = curDuty;
   849  0158  082B               	movf	_curDuty,w
   850  0159  1683               	bsf	3,5	;RP0=1, select bank1
   851  015A  009B               	movwf	27	;volatile
   852                           
   853                           ;main.c: 500: maxDuty = 70;
   854  015B  3046               	movlw	70
   855  015C  1283               	bcf	3,5	;RP0=0, select bank0
   856  015D  00AA               	movwf	_maxDuty
   857                           
   858                           ;main.c: 501: if(out_ad > 200)
   859  015E  3000               	movlw	0
   860  015F  0221               	subwf	_out_ad+1,w
   861  0160  30C9               	movlw	201
   862  0161  1903               	skipnz
   863  0162  0220               	subwf	_out_ad,w
   864  0163  1803               	btfsc	3,0
   865  0164  298E               	goto	l2820
   866  0165                     l2796:	
   867                           ;main.c: 502: {
   868                           ;main.c: 503: if(++overTime > 10)
   869                           
   870                           
   871                           ;main.c: 510: else
   872                           ;main.c: 511: {
   873                           ;main.c: 512: overTime = 0;
   874  0165  01AC               	clrf	_overTime
   875  0166  2997               	goto	l2828
   876  0167                     l2798:	
   877                           
   878                           ;main.c: 515: else if(workStep == 2)
   879  0167  3002               	movlw	2
   880  0168  0636               	xorwf	_workStep,w
   881  0169  1D03               	btfss	3,2
   882  016A  2997               	goto	l2828
   883                           
   884                           ;main.c: 516: {
   885                           ;main.c: 517: if(chrgFlag == 0)
   886  016B  087A               	movf	_chrgFlag,w
   887  016C  1D03               	btfss	3,2
   888  016D  2976               	goto	l2804
   889                           
   890                           ;main.c: 518: {
   891                           ;main.c: 519: shiweiNum = numArray[10];
   892  016E  300B               	movlw	low (((_numArray+10)-__stringbase)| (0+32768))
   893  016F  0084               	movwf	4
   894  0170  24A9               	fcall	stringdir
   895  0171  00D1               	movwf	_shiweiNum
   896                           
   897                           ;main.c: 520: geweiNum = numArray[2];
   898  0172  3003               	movlw	low (((_numArray+2)-__stringbase)| (0+32768))
   899  0173  0084               	movwf	4
   900  0174  24A9               	fcall	stringdir
   901  0175  00D0               	movwf	_geweiNum
   902  0176                     l2804:	
   903                           
   904                           ;main.c: 521: }
   905                           ;main.c: 522: if(motorPwmFlag == 0)
   906  0176  0830               	movf	_motorPwmFlag,w
   907  0177  1D03               	btfss	3,2
   908  0178  297B               	goto	l2814
   909                           
   910                           ;main.c: 523: {
   911                           ;main.c: 524: pwmInit();
   912  0179  24BB               	fcall	_pwmInit
   913                           
   914                           ;main.c: 525: PWMD23H = 0X00;
   915                           
   916                           ;main.c: 526: PWMD2L = 40;
   917                           
   918                           ;main.c: 527: curDuty = 40;
   919  017A  21D6               	fcall	PL10	;call to abstracted procedure
   920  017B                     l2814:	
   921                           
   922                           ;main.c: 528: }
   923                           ;main.c: 529: if(curDuty >= 99)
   924  017B  3063               	movlw	99
   925  017C  022B               	subwf	_curDuty,w
   926  017D  1C03               	skipc
   927  017E  2981               	goto	l2818
   928                           
   929                           ;main.c: 530: {
   930                           ;main.c: 531: PWMD2L = 102;
   931  017F  3066               	movlw	102
   932  0180  2982               	goto	L2
   933  0181                     l2818:	
   934                           ;main.c: 532: }
   935                           
   936                           
   937                           ;main.c: 533: else
   938                           ;main.c: 534: {
   939                           ;main.c: 535: PWMD2L = curDuty;
   940  0181  082B               	movf	_curDuty,w
   941  0182                     L2:	
   942  0182  1683               	bsf	3,5	;RP0=1, select bank1
   943  0183  009B               	movwf	27	;volatile
   944                           
   945                           ;main.c: 536: }
   946                           ;main.c: 537: maxDuty = 85;
   947  0184  3055               	movlw	85
   948  0185  1283               	bcf	3,5	;RP0=0, select bank0
   949  0186  00AA               	movwf	_maxDuty
   950                           
   951                           ;main.c: 538: if(out_ad > 220)
   952  0187  3000               	movlw	0
   953  0188  0221               	subwf	_out_ad+1,w
   954  0189  30DD               	movlw	221
   955  018A  1903               	skipnz
   956  018B  0220               	subwf	_out_ad,w
   957  018C  1C03               	skipc
   958  018D  2965               	goto	l2796
   959  018E                     l2820:	
   960                           
   961                           ;main.c: 539: {
   962                           ;main.c: 540: if(++overTime > 10)
   963  018E  300B               	movlw	11
   964  018F  0AAC               	incf	_overTime,f
   965  0190  022C               	subwf	_overTime,w
   966  0191  1C03               	skipc
   967  0192  2997               	goto	l2828
   968                           
   969                           ;main.c: 504: {
   970                           ;main.c: 505: overTime = 0;
   971  0193  01AC               	clrf	_overTime
   972                           
   973                           ;main.c: 506: workStep = 0;
   974  0194  01B6               	clrf	_workStep
   975                           
   976                           ;main.c: 507: startLockFlag = 1;
   977  0195  01CF               	clrf	_startLockFlag
   978  0196  0ACF               	incf	_startLockFlag,f
   979  0197                     l2828:	
   980                           
   981                           ;main.c: 550: }
   982                           ;main.c: 551: }
   983                           ;main.c: 552: if(chrgFlag || showBatTime > 0)
   984  0197  087A               	movf	_chrgFlag,w
   985  0198  1903               	btfsc	3,2
   986  0199  0834               	movf	_showBatTime,w
   987  019A  1903               	btfsc	3,2
   988  019B  0008               	return
   989                           
   990                           ;main.c: 553: {
   991                           ;main.c: 554: if(showBatStep >=99)
   992  019C  3063               	movlw	99
   993  019D  0279               	subwf	_showBatStep,w
   994  019E  1C03               	skipc
   995  019F  29A9               	goto	l2836
   996                           
   997                           ;main.c: 555: {
   998                           ;main.c: 556: shiweiNum = numArray[9];
   999  01A0  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
  1000  01A1  0084               	movwf	4
  1001  01A2  24A9               	fcall	stringdir
  1002  01A3  00D1               	movwf	_shiweiNum
  1003                           
  1004                           ;main.c: 557: geweiNum = numArray[9];
  1005  01A4  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
  1006  01A5  0084               	movwf	4
  1007  01A6  24A9               	fcall	stringdir
  1008  01A7  00D0               	movwf	_geweiNum
  1009                           
  1010                           ;main.c: 558: }
  1011  01A8  0008               	return
  1012  01A9                     l2836:	
  1013                           
  1014                           ;main.c: 560: {
  1015                           ;main.c: 561: baiweiNum = 0;
  1016  01A9  300A               	movlw	10
  1017  01AA  0279               	subwf	_showBatStep,w
  1018  01AB  1C03               	skipc
  1019  01AC  29CC               	goto	l2848
  1020                           
  1021                           ;main.c: 562: shiweiNum = numArray[showBatStep/10];
  1022  01AD  300A               	movlw	10
  1023  01AE  00F3               	movwf	___lbdiv@divisor
  1024  01AF  0879               	movf	_showBatStep,w
  1025  01B0  2448               	fcall	___lbdiv
  1026  01B1  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1027  01B2  0084               	movwf	4
  1028  01B3  24A9               	fcall	stringdir
  1029  01B4  00D1               	movwf	_shiweiNum
  1030                           
  1031                           ;main.c: 563: if(chrgFlag && count1s < 50)
  1032  01B5  087A               	movf	_chrgFlag,w
  1033  01B6  1903               	btfsc	3,2
  1034  01B7  29C3               	goto	l2846
  1035  01B8  3032               	movlw	50
  1036  01B9  023B               	subwf	_count1s,w
  1037  01BA  1C03               	btfss	3,0
  1038  01BB  29C1               	goto	l2844
  1039  01BC  29C3               	goto	l2846
  1040  01BD                     l2852:	
  1041  01BD  3032               	movlw	50
  1042  01BE  023B               	subwf	_count1s,w
  1043  01BF  1803               	skipnc
  1044  01C0  29D0               	goto	l2856
  1045  01C1                     l2844:	
  1046                           
  1047                           ;main.c: 564: {
  1048                           ;main.c: 565: geweiNum = 0;
  1049  01C1  01D0               	clrf	_geweiNum
  1050                           
  1051                           ;main.c: 566: }
  1052  01C2  0008               	return
  1053  01C3                     l2846:	
  1054                           
  1055                           ;main.c: 567: else
  1056                           ;main.c: 568: {
  1057                           ;main.c: 569: geweiNum = numArray[showBatStep%10];
  1058  01C3  300A               	movlw	10
  1059  01C4  00F3               	movwf	___lbmod@divisor
  1060  01C5  0879               	movf	_showBatStep,w
  1061  01C6  2410               	fcall	___lbmod
  1062  01C7  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1063  01C8  0084               	movwf	4
  1064  01C9  24A9               	fcall	stringdir
  1065  01CA  00D0               	movwf	_geweiNum
  1066  01CB  0008               	return
  1067  01CC                     l2848:	
  1068                           
  1069                           ;main.c: 575: shiweiNum = 0;
  1070  01CC  01D1               	clrf	_shiweiNum
  1071                           
  1072                           ;main.c: 576: if(chrgFlag && count1s < 50)
  1073  01CD  087A               	movf	_chrgFlag,w
  1074  01CE  1D03               	btfss	3,2
  1075  01CF  29BD               	goto	l2852
  1076  01D0                     l2856:	
  1077                           
  1078                           ;main.c: 580: else
  1079                           ;main.c: 581: {
  1080                           ;main.c: 582: geweiNum = numArray[showBatStep];
  1081  01D0  0879               	movf	_showBatStep,w
  1082  01D1  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1083  01D2  0084               	movwf	4
  1084  01D3  24A9               	fcall	stringdir
  1085  01D4  00D0               	movwf	_geweiNum
  1086  01D5  0008               	return
  1087  01D6                     __end_of_workCtr:	
  1088  01D6                     PL10:	
  1089  01D6  1683               	bsf	3,5	;RP0=1, select bank1
  1090  01D7  019E               	clrf	30	;volatile
  1091  01D8  3028               	movlw	40
  1092  01D9  009B               	movwf	27	;volatile
  1093  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  1094  01DB  00AB               	movwf	_curDuty
  1095  01DC  0008               	return
  1096  01DD                     __end_ofPL10:	
  1097                           
  1098                           	psect	text2
  1099  04E9                     __ptext2:	
  1100 ;; *************** function _pwmStop *****************
  1101 ;; Defined at:
  1102 ;;		line 832 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;		None
  1105 ;; Auto vars:     Size  Location     Type
  1106 ;;		None
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  1    wreg      void 
  1109 ;; Registers used:
  1110 ;;		status,2
  1111 ;; Tracked objects:
  1112 ;;		On entry : 100/0
  1113 ;;		On exit  : 100/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMMON   BANK0   BANK1
  1116 ;;      Params:         0       0       0
  1117 ;;      Locals:         0       0       0
  1118 ;;      Temps:          0       0       0
  1119 ;;      Totals:         0       0       0
  1120 ;;Total ram usage:        0 bytes
  1121 ;; Hardware stack levels used:    1
  1122 ;; Hardware stack levels required when called:    2
  1123 ;; This function calls:
  1124 ;;		Nothing
  1125 ;; This function is called by:
  1126 ;;		_workCtr
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           
  1131                           ;psect for function _pwmStop
  1132  04E9                     _pwmStop:	
  1133                           
  1134                           ;main.c: 834: PWMCON0 &= 0XFB;
  1135                           
  1136                           ;incstack = 0
  1137                           ; Regs used in _pwmStop: [status,2]
  1138  04E9  1115               	bcf	21,2	;volatile
  1139                           
  1140                           ;main.c: 835: RB3 = 0;
  1141  04EA  1186               	bcf	6,3	;volatile
  1142                           
  1143                           ;main.c: 836: motorPwmFlag = 0;
  1144  04EB  01B0               	clrf	_motorPwmFlag
  1145  04EC  0008               	return
  1146  04ED                     __end_of_pwmStop:	
  1147                           
  1148                           	psect	text3
  1149  04BB                     __ptext3:	
  1150 ;; *************** function _pwmInit *****************
  1151 ;; Defined at:
  1152 ;;		line 816 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;		None
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;		None
  1157 ;; Return value:  Size  Location     Type
  1158 ;;                  1    wreg      void 
  1159 ;; Registers used:
  1160 ;;		wreg, status,2
  1161 ;; Tracked objects:
  1162 ;;		On entry : 100/0
  1163 ;;		On exit  : 100/0
  1164 ;;		Unchanged: 0/0
  1165 ;; Data sizes:     COMMON   BANK0   BANK1
  1166 ;;      Params:         0       0       0
  1167 ;;      Locals:         0       0       0
  1168 ;;      Temps:          0       0       0
  1169 ;;      Totals:         0       0       0
  1170 ;;Total ram usage:        0 bytes
  1171 ;; Hardware stack levels used:    1
  1172 ;; Hardware stack levels required when called:    2
  1173 ;; This function calls:
  1174 ;;		Nothing
  1175 ;; This function is called by:
  1176 ;;		_workCtr
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           
  1181                           ;psect for function _pwmInit
  1182  04BB                     _pwmInit:	
  1183                           
  1184                           ;main.c: 818: PWMCON1 = 0B00000000;
  1185                           
  1186                           ;incstack = 0
  1187                           ; Regs used in _pwmInit: [wreg+status,2]
  1188  04BB  0196               	clrf	22	;volatile
  1189                           
  1190                           ;main.c: 819: PWMTH = 0X00;
  1191  04BC  0198               	clrf	24	;volatile
  1192                           
  1193                           ;main.c: 820: PWMTL = 100;
  1194  04BD  3064               	movlw	100
  1195  04BE  0097               	movwf	23	;volatile
  1196                           
  1197                           ;main.c: 823: PWMD23H = 0;
  1198  04BF  1683               	bsf	3,5	;RP0=1, select bank1
  1199  04C0  019E               	clrf	30	;volatile
  1200                           
  1201                           ;main.c: 824: PWMD2L = 60;
  1202  04C1  303C               	movlw	60
  1203  04C2  009B               	movwf	27	;volatile
  1204                           
  1205                           ;main.c: 825: PWM23DT = 0X00;
  1206  04C3  019D               	clrf	29	;volatile
  1207                           
  1208                           ;main.c: 827: PWMCON0 = 0X64;
  1209  04C4  3064               	movlw	100
  1210  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  1211  04C6  0095               	movwf	21	;volatile
  1212                           
  1213                           ;main.c: 828: PWMCON2 =0X00;
  1214  04C7  019D               	clrf	29	;volatile
  1215                           
  1216                           ;main.c: 829: motorPwmFlag = 1;
  1217  04C8  01B0               	clrf	_motorPwmFlag
  1218  04C9  0AB0               	incf	_motorPwmFlag,f
  1219  04CA  0008               	return
  1220  04CB                     __end_of_pwmInit:	
  1221                           
  1222                           	psect	text4
  1223  0410                     __ptext4:	
  1224 ;; *************** function ___lbmod *****************
  1225 ;; Defined at:
  1226 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;  dividend        1    wreg     unsigned char 
  1229 ;;  divisor         1    3[COMMON] unsigned char 
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;  dividend        1    0[BANK0 ] unsigned char 
  1232 ;;  rem             1    2[BANK0 ] unsigned char 
  1233 ;;  counter         1    1[BANK0 ] unsigned char 
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  1    wreg      unsigned char 
  1236 ;; Registers used:
  1237 ;;		wreg, status,2, status,0
  1238 ;; Tracked objects:
  1239 ;;		On entry : 100/0
  1240 ;;		On exit  : 100/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMMON   BANK0   BANK1
  1243 ;;      Params:         1       0       0
  1244 ;;      Locals:         0       3       0
  1245 ;;      Temps:          1       0       0
  1246 ;;      Totals:         2       3       0
  1247 ;;Total ram usage:        5 bytes
  1248 ;; Hardware stack levels used:    1
  1249 ;; Hardware stack levels required when called:    2
  1250 ;; This function calls:
  1251 ;;		Nothing
  1252 ;; This function is called by:
  1253 ;;		_workCtr
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           
  1258                           ;psect for function ___lbmod
  1259  0410                     ___lbmod:	
  1260                           
  1261                           ;incstack = 0
  1262                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1263                           ;___lbmod@dividend stored from wreg
  1264  0410  00BE               	movwf	___lbmod@dividend
  1265  0411  3008               	movlw	8
  1266  0412  00BF               	movwf	___lbmod@counter
  1267  0413  01C0               	clrf	___lbmod@rem
  1268  0414                     l2602:	
  1269  0414  083E               	movf	___lbmod@dividend,w
  1270  0415  00F4               	movwf	??___lbmod
  1271  0416  3007               	movlw	7
  1272  0417  1003               	clrc
  1273  0418                     L3:	
  1274  0418  0CF4               	rrf	??___lbmod,f
  1275  0419  3EFF               	addlw	-1
  1276  041A  1003               	clrc
  1277  041B  1D03               	skipz
  1278  041C  2C18               	goto	L3
  1279  041D  0D40               	rlf	___lbmod@rem,w
  1280  041E  0474               	iorwf	??___lbmod,w
  1281  041F  00C0               	movwf	___lbmod@rem
  1282  0420  1003               	clrc
  1283  0421  0DBE               	rlf	___lbmod@dividend,f
  1284  0422  0873               	movf	___lbmod@divisor,w
  1285  0423  0240               	subwf	___lbmod@rem,w
  1286  0424  1C03               	skipc
  1287  0425  2C28               	goto	l2610
  1288  0426  0873               	movf	___lbmod@divisor,w
  1289  0427  02C0               	subwf	___lbmod@rem,f
  1290  0428                     l2610:	
  1291  0428  0BBF               	decfsz	___lbmod@counter,f
  1292  0429  2C14               	goto	l2602
  1293  042A  0840               	movf	___lbmod@rem,w
  1294  042B  0008               	return
  1295  042C                     __end_of___lbmod:	
  1296                           
  1297                           	psect	text5
  1298  0448                     __ptext5:	
  1299 ;; *************** function ___lbdiv *****************
  1300 ;; Defined at:
  1301 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;  dividend        1    wreg     unsigned char 
  1304 ;;  divisor         1    3[COMMON] unsigned char 
  1305 ;; Auto vars:     Size  Location     Type
  1306 ;;  dividend        1    4[COMMON] unsigned char 
  1307 ;;  quotient        1    6[COMMON] unsigned char 
  1308 ;;  counter         1    5[COMMON] unsigned char 
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  1    wreg      unsigned char 
  1311 ;; Registers used:
  1312 ;;		wreg, status,2, status,0
  1313 ;; Tracked objects:
  1314 ;;		On entry : 100/0
  1315 ;;		On exit  : 100/0
  1316 ;;		Unchanged: 100/0
  1317 ;; Data sizes:     COMMON   BANK0   BANK1
  1318 ;;      Params:         1       0       0
  1319 ;;      Locals:         3       0       0
  1320 ;;      Temps:          0       0       0
  1321 ;;      Totals:         4       0       0
  1322 ;;Total ram usage:        4 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    2
  1325 ;; This function calls:
  1326 ;;		Nothing
  1327 ;; This function is called by:
  1328 ;;		_workCtr
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           
  1333                           ;psect for function ___lbdiv
  1334  0448                     ___lbdiv:	
  1335                           
  1336                           ;incstack = 0
  1337                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1338                           ;___lbdiv@dividend stored from wreg
  1339  0448  00F4               	movwf	___lbdiv@dividend
  1340  0449  01F6               	clrf	___lbdiv@quotient
  1341  044A  0873               	movf	___lbdiv@divisor,w
  1342  044B  1903               	btfsc	3,2
  1343  044C  2C61               	goto	l2012
  1344  044D  01F5               	clrf	___lbdiv@counter
  1345  044E                     l1998:	
  1346  044E  0AF5               	incf	___lbdiv@counter,f
  1347  044F  1BF3               	btfsc	___lbdiv@divisor,7
  1348  0450  2C54               	goto	l1092
  1349  0451  1003               	clrc
  1350  0452  0DF3               	rlf	___lbdiv@divisor,f
  1351  0453  2C4E               	goto	l1998
  1352  0454                     l1092:	
  1353  0454  1003               	clrc
  1354  0455  0DF6               	rlf	___lbdiv@quotient,f
  1355  0456  0873               	movf	___lbdiv@divisor,w
  1356  0457  0274               	subwf	___lbdiv@dividend,w
  1357  0458  1C03               	skipc
  1358  0459  2C5E               	goto	L4
  1359  045A  0873               	movf	___lbdiv@divisor,w
  1360  045B  02F4               	subwf	___lbdiv@dividend,f
  1361  045C  1476               	bsf	___lbdiv@quotient,0
  1362  045D  1003               	clrc
  1363  045E                     L4:	
  1364  045E  0CF3               	rrf	___lbdiv@divisor,f
  1365  045F  0BF5               	decfsz	___lbdiv@counter,f
  1366  0460  2C54               	goto	l1092
  1367  0461                     l2012:	
  1368  0461  0876               	movf	___lbdiv@quotient,w
  1369  0462  0008               	return
  1370  0463                     __end_of___lbdiv:	
  1371                           
  1372                           	psect	text6
  1373  01DD                     __ptext6:	
  1374 ;; *************** function _setBatStep *****************
  1375 ;; Defined at:
  1376 ;;		line 590 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;		None
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;		None
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg, status,2, status,0, pclath, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 100/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMMON   BANK0   BANK1
  1390 ;;      Params:         0       0       0
  1391 ;;      Locals:         0       0       0
  1392 ;;      Temps:          0       2       0
  1393 ;;      Totals:         0       2       0
  1394 ;;Total ram usage:        2 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    3
  1397 ;; This function calls:
  1398 ;;		___lwdiv
  1399 ;; This function is called by:
  1400 ;;		_main
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           
  1405                           ;psect for function _setBatStep
  1406  01DD                     _setBatStep:	
  1407                           
  1408                           ;main.c: 592: if(lowBatFlag == 1 && lowShanTime == 0 && workStep > 0)
  1409                           
  1410                           ;incstack = 0
  1411                           ; Regs used in _setBatStep: [wreg+status,2+status,0+pclath+cstack]
  1412  01DD  1283               	bcf	3,5	;RP0=0, select bank0
  1413  01DE  0B32               	decfsz	_lowBatFlag,w
  1414  01DF  29EE               	goto	l2662
  1415  01E0  0824               	movf	_lowShanTime,w
  1416  01E1  0425               	iorwf	_lowShanTime+1,w
  1417  01E2  1D03               	btfss	3,2
  1418  01E3  29EE               	goto	l2662
  1419  01E4  0836               	movf	_workStep,w
  1420  01E5  1903               	btfsc	3,2
  1421  01E6  29EE               	goto	l2662
  1422  01E7  302C               	movlw	44
  1423                           
  1424                           ;main.c: 593: {
  1425                           ;main.c: 594: showBatStep = 0;
  1426  01E8  01F9               	clrf	_showBatStep
  1427                           
  1428                           ;main.c: 595: curBatStep = 0;
  1429  01E9  01AF               	clrf	_curBatStep
  1430                           
  1431                           ;main.c: 596: lowShanTime = 300;
  1432  01EA  00A4               	movwf	_lowShanTime
  1433  01EB  3001               	movlw	1
  1434  01EC  00A5               	movwf	_lowShanTime+1
  1435                           
  1436                           ;main.c: 597: }
  1437  01ED  0008               	return
  1438  01EE                     l2662:	
  1439                           
  1440                           ;main.c: 598: else if(power_ad < 1830)
  1441  01EE  3007               	movlw	7
  1442  01EF  0278               	subwf	_power_ad+1,w	;volatile
  1443  01F0  3026               	movlw	38
  1444  01F1  1903               	skipnz
  1445  01F2  0277               	subwf	_power_ad,w	;volatile
  1446  01F3  1803               	skipnc
  1447  01F4  2A08               	goto	l2672
  1448                           
  1449                           ;main.c: 599: {
  1450                           ;main.c: 600: if(count1s == 0)
  1451  01F5  083B               	movf	_count1s,w
  1452  01F6  1D03               	btfss	3,2
  1453  01F7  2A05               	goto	l758
  1454                           
  1455                           ;main.c: 601: {
  1456                           ;main.c: 602: if(showBatStep > 1)
  1457  01F8  3002               	movlw	2
  1458  01F9  0279               	subwf	_showBatStep,w
  1459  01FA  1C03               	skipc
  1460  01FB  2A01               	goto	l759
  1461                           
  1462                           ;main.c: 603: {
  1463                           ;main.c: 604: if(chrgFlag == 0)
  1464  01FC  087A               	movf	_chrgFlag,w
  1465  01FD  1D03               	btfss	3,2
  1466  01FE  2A03               	goto	l761
  1467                           
  1468                           ;main.c: 605: showBatStep--;
  1469  01FF  03F9               	decf	_showBatStep,f
  1470  0200  2A03               	goto	l761
  1471  0201                     l759:	
  1472                           
  1473                           ;main.c: 607: else
  1474                           ;main.c: 608: {
  1475                           ;main.c: 609: showBatStep = 1;
  1476  0201  01F9               	clrf	_showBatStep
  1477  0202  0AF9               	incf	_showBatStep,f
  1478  0203                     l761:	
  1479                           
  1480                           ;main.c: 610: }
  1481                           ;main.c: 611: curBatStep = 1;
  1482  0203  01AF               	clrf	_curBatStep
  1483  0204  0AAF               	incf	_curBatStep,f
  1484  0205                     l758:	
  1485                           
  1486                           ;main.c: 612: }
  1487                           ;main.c: 613: curBatStep = 1;
  1488  0205  01AF               	clrf	_curBatStep
  1489  0206  0AAF               	incf	_curBatStep,f
  1490                           
  1491                           ;main.c: 614: }
  1492  0207  0008               	return
  1493  0208                     l2672:	
  1494                           
  1495                           ;main.c: 615: else
  1496                           ;main.c: 616: {
  1497                           ;main.c: 617: if(power_ad < 1990)
  1498  0208  3007               	movlw	7
  1499  0209  0278               	subwf	_power_ad+1,w	;volatile
  1500  020A  30C6               	movlw	198
  1501  020B  1903               	skipnz
  1502  020C  0277               	subwf	_power_ad,w	;volatile
  1503  020D  1803               	skipnc
  1504  020E  2A20               	goto	l2676
  1505                           
  1506                           ;main.c: 618: {
  1507                           ;main.c: 619: curBatStep = (power_ad - 1830)/16;
  1508  020F  0877               	movf	_power_ad,w	;volatile
  1509  0210  3EDA               	addlw	218
  1510  0211  00C1               	movwf	??_setBatStep
  1511  0212  0878               	movf	_power_ad+1,w	;volatile
  1512  0213  1803               	skipnc
  1513  0214  3E01               	addlw	1
  1514  0215  3EF8               	addlw	248
  1515  0216  00C2               	movwf	??_setBatStep+1
  1516  0217  3004               	movlw	4
  1517  0218                     u2785:	
  1518  0218  1003               	clrc
  1519  0219  0CC2               	rrf	??_setBatStep+1,f
  1520  021A  0CC1               	rrf	??_setBatStep,f
  1521  021B  3EFF               	addlw	-1
  1522  021C  1D03               	skipz
  1523  021D  2A18               	goto	u2785
  1524  021E  0841               	movf	??_setBatStep,w
  1525  021F  2A44               	goto	L5
  1526  0220                     l2676:	
  1527                           ;main.c: 620: }
  1528                           
  1529                           
  1530                           ;main.c: 621: else if(power_ad < 2090)
  1531  0220  3008               	movlw	8
  1532  0221  0278               	subwf	_power_ad+1,w	;volatile
  1533  0222  302A               	movlw	42
  1534  0223  1903               	skipnz
  1535  0224  0277               	subwf	_power_ad,w	;volatile
  1536  0225  1803               	skipnc
  1537  0226  2A36               	goto	l2680
  1538                           
  1539                           ;main.c: 622: {
  1540                           ;main.c: 623: curBatStep = 10 + ((power_ad - 1990)/5);
  1541  0227  3005               	movlw	5
  1542  0228  00F3               	movwf	___lwdiv@divisor
  1543  0229  01F4               	clrf	___lwdiv@divisor+1
  1544  022A  0877               	movf	_power_ad,w	;volatile
  1545  022B  3E3A               	addlw	58
  1546  022C  00F5               	movwf	___lwdiv@dividend
  1547  022D  0878               	movf	_power_ad+1,w	;volatile
  1548  022E  1803               	skipnc
  1549  022F  3E01               	addlw	1
  1550  0230  3EF8               	addlw	248
  1551  0231  00F6               	movwf	___lwdiv@dividend+1
  1552  0232  23C9               	fcall	___lwdiv
  1553  0233  0873               	movf	?___lwdiv,w
  1554  0234  3E0A               	addlw	10
  1555  0235  2A44               	goto	L5
  1556  0236                     l2680:	
  1557                           ;main.c: 624: }
  1558                           
  1559                           
  1560                           ;main.c: 625: else
  1561                           ;main.c: 626: {
  1562                           ;main.c: 627: curBatStep = 30 + ((power_ad - 2090)/3);
  1563  0236  3003               	movlw	3
  1564  0237  00F3               	movwf	___lwdiv@divisor
  1565  0238  01F4               	clrf	___lwdiv@divisor+1
  1566  0239  0877               	movf	_power_ad,w	;volatile
  1567  023A  3ED6               	addlw	214
  1568  023B  00F5               	movwf	___lwdiv@dividend
  1569  023C  0878               	movf	_power_ad+1,w	;volatile
  1570  023D  1803               	skipnc
  1571  023E  3E01               	addlw	1
  1572  023F  3EF7               	addlw	247
  1573  0240  00F6               	movwf	___lwdiv@dividend+1
  1574  0241  23C9               	fcall	___lwdiv
  1575  0242  0873               	movf	?___lwdiv,w
  1576  0243  3E1E               	addlw	30
  1577  0244                     L5:	
  1578  0244  00AF               	movwf	_curBatStep
  1579                           
  1580                           ;main.c: 628: }
  1581                           ;main.c: 629: if(curBatStep > 99)
  1582  0245  3064               	movlw	100
  1583  0246  022F               	subwf	_curBatStep,w
  1584  0247  1C03               	skipc
  1585  0248  2A4B               	goto	l2686
  1586                           
  1587                           ;main.c: 630: {
  1588                           ;main.c: 631: curBatStep = 99;
  1589  0249  3063               	movlw	99
  1590  024A  00AF               	movwf	_curBatStep
  1591  024B                     l2686:	
  1592                           
  1593                           ;main.c: 632: }
  1594                           ;main.c: 634: if(chrgFlag)
  1595  024B  087A               	movf	_chrgFlag,w
  1596  024C  1903               	btfsc	3,2
  1597  024D  2A6C               	goto	l2710
  1598                           
  1599                           ;main.c: 635: {
  1600                           ;main.c: 636: if(chrgFullFlag)
  1601  024E  0839               	movf	_chrgFullFlag,w
  1602  024F  1903               	btfsc	3,2
  1603  0250  2A65               	goto	l2698
  1604                           
  1605                           ;main.c: 637: {
  1606                           ;main.c: 638: if(++count30s >= 1000 && showBatStep < 99)
  1607  0251  2281               	fcall	PL8	;call to abstracted procedure
  1608  0252  2A59               	goto	L6
  1609  0253                     l2700:	
  1610                           
  1611                           ;main.c: 645: {
  1612                           ;main.c: 646: if(++count30s >= 3000 && showBatStep < 99)
  1613  0253  0AA2               	incf	_count30s,f
  1614  0254  1903               	skipnz
  1615  0255  0AA3               	incf	_count30s+1,f
  1616  0256  300B               	movlw	11
  1617  0257  0223               	subwf	_count30s+1,w
  1618  0258  30B8               	movlw	184
  1619  0259                     L6:	
  1620  0259  1903               	skipnz
  1621  025A  0222               	subwf	_count30s,w
  1622  025B  1C03               	skipc
  1623  025C  0008               	return
  1624  025D  3063               	movlw	99
  1625  025E  0279               	subwf	_showBatStep,w
  1626  025F  1803               	skipnc
  1627  0260  0008               	return
  1628                           
  1629                           ;main.c: 639: {
  1630                           ;main.c: 640: count30s = 0;
  1631  0261  01A2               	clrf	_count30s
  1632  0262  01A3               	clrf	_count30s+1
  1633                           
  1634                           ;main.c: 641: showBatStep++;
  1635  0263  0AF9               	incf	_showBatStep,f
  1636  0264  0008               	return
  1637  0265                     l2698:	
  1638                           
  1639                           ;main.c: 644: else if(curBatStep > showBatStep)
  1640  0265  082F               	movf	_curBatStep,w
  1641  0266  0279               	subwf	_showBatStep,w
  1642  0267  1C03               	btfss	3,0
  1643  0268  2A53               	goto	l2700
  1644  0269                     l2708:	
  1645                           
  1646                           ;main.c: 653: else
  1647                           ;main.c: 654: {
  1648                           ;main.c: 655: count30s = 0;
  1649  0269  01A2               	clrf	_count30s
  1650  026A  01A3               	clrf	_count30s+1
  1651  026B  0008               	return
  1652  026C                     l2710:	
  1653                           
  1654                           ;main.c: 658: else
  1655                           ;main.c: 659: {
  1656                           ;main.c: 660: if(curBatStep < showBatStep && showBatStep > 1)
  1657  026C  0879               	movf	_showBatStep,w
  1658  026D  022F               	subwf	_curBatStep,w
  1659  026E  1803               	skipnc
  1660  026F  2A69               	goto	l2708
  1661  0270  3002               	movlw	2
  1662  0271  0279               	subwf	_showBatStep,w
  1663  0272  1C03               	skipc
  1664  0273  2A69               	goto	l2708
  1665                           
  1666                           ;main.c: 661: {
  1667                           ;main.c: 662: if(++count30s >= 1000 && showBatStep > 1)
  1668  0274  2281               	fcall	PL8	;call to abstracted procedure
  1669  0275  1903               	skipnz
  1670  0276  0222               	subwf	_count30s,w
  1671  0277  1C03               	skipc
  1672  0278  0008               	return
  1673  0279  3002               	movlw	2
  1674  027A  0279               	subwf	_showBatStep,w
  1675  027B  1C03               	skipc
  1676  027C  0008               	return
  1677                           
  1678                           ;main.c: 663: {
  1679                           ;main.c: 664: count30s = 0;
  1680  027D  01A2               	clrf	_count30s
  1681  027E  01A3               	clrf	_count30s+1
  1682                           
  1683                           ;main.c: 665: showBatStep--;
  1684  027F  03F9               	decf	_showBatStep,f
  1685  0280  0008               	return
  1686  0281                     __end_of_setBatStep:	
  1687  0281                     PL8:	
  1688  0281  0AA2               	incf	_count30s,f
  1689  0282  1903               	skipnz
  1690  0283  0AA3               	incf	_count30s+1,f
  1691  0284  3003               	movlw	3
  1692  0285  0223               	subwf	_count30s+1,w
  1693  0286  34E8               	retlw	232
  1694  0287                     __end_ofPL8:	
  1695                           
  1696                           	psect	text7
  1697  03C9                     __ptext7:	
  1698 ;; *************** function ___lwdiv *****************
  1699 ;; Defined at:
  1700 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;  divisor         2    3[COMMON] unsigned int 
  1703 ;;  dividend        2    5[COMMON] unsigned int 
  1704 ;; Auto vars:     Size  Location     Type
  1705 ;;  quotient        2    1[BANK0 ] unsigned int 
  1706 ;;  counter         1    0[BANK0 ] unsigned char 
  1707 ;; Return value:  Size  Location     Type
  1708 ;;                  2    3[COMMON] unsigned int 
  1709 ;; Registers used:
  1710 ;;		wreg, status,2, status,0
  1711 ;; Tracked objects:
  1712 ;;		On entry : 100/0
  1713 ;;		On exit  : 100/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMMON   BANK0   BANK1
  1716 ;;      Params:         4       0       0
  1717 ;;      Locals:         0       3       0
  1718 ;;      Temps:          0       0       0
  1719 ;;      Totals:         4       3       0
  1720 ;;Total ram usage:        7 bytes
  1721 ;; Hardware stack levels used:    1
  1722 ;; Hardware stack levels required when called:    2
  1723 ;; This function calls:
  1724 ;;		Nothing
  1725 ;; This function is called by:
  1726 ;;		_setBatStep
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           
  1731                           ;psect for function ___lwdiv
  1732  03C9                     ___lwdiv:	
  1733                           
  1734                           ;incstack = 0
  1735                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1736  03C9  01BF               	clrf	___lwdiv@quotient
  1737  03CA  01C0               	clrf	___lwdiv@quotient+1
  1738  03CB  0873               	movf	___lwdiv@divisor,w
  1739  03CC  0474               	iorwf	___lwdiv@divisor+1,w
  1740  03CD  1903               	btfsc	3,2
  1741  03CE  2BEE               	goto	l2638
  1742  03CF  01BE               	clrf	___lwdiv@counter
  1743  03D0                     L7:	
  1744  03D0  0ABE               	incf	___lwdiv@counter,f
  1745  03D1  1BF4               	btfsc	___lwdiv@divisor+1,7
  1746  03D2  2BD7               	goto	l2626
  1747  03D3  1003               	clrc
  1748  03D4  0DF3               	rlf	___lwdiv@divisor,f
  1749  03D5  0DF4               	rlf	___lwdiv@divisor+1,f
  1750  03D6  2BD0               	goto	L7
  1751  03D7                     l2626:	
  1752  03D7  1003               	clrc
  1753  03D8  0DBF               	rlf	___lwdiv@quotient,f
  1754  03D9  0DC0               	rlf	___lwdiv@quotient+1,f
  1755  03DA  0874               	movf	___lwdiv@divisor+1,w
  1756  03DB  0276               	subwf	___lwdiv@dividend+1,w
  1757  03DC  1D03               	skipz
  1758  03DD  2BE0               	goto	u2675
  1759  03DE  0873               	movf	___lwdiv@divisor,w
  1760  03DF  0275               	subwf	___lwdiv@dividend,w
  1761  03E0                     u2675:	
  1762  03E0  1C03               	skipc
  1763  03E1  2BEA               	goto	L8
  1764  03E2  0873               	movf	___lwdiv@divisor,w
  1765  03E3  02F5               	subwf	___lwdiv@dividend,f
  1766  03E4  0874               	movf	___lwdiv@divisor+1,w
  1767  03E5  1C03               	skipc
  1768  03E6  03F6               	decf	___lwdiv@dividend+1,f
  1769  03E7  02F6               	subwf	___lwdiv@dividend+1,f
  1770  03E8  143F               	bsf	___lwdiv@quotient,0
  1771  03E9  1003               	clrc
  1772  03EA                     L8:	
  1773  03EA  0CF4               	rrf	___lwdiv@divisor+1,f
  1774  03EB  0CF3               	rrf	___lwdiv@divisor,f
  1775  03EC  0BBE               	decfsz	___lwdiv@counter,f
  1776  03ED  2BD7               	goto	l2626
  1777  03EE                     l2638:	
  1778  03EE  0840               	movf	___lwdiv@quotient+1,w
  1779  03EF  00F4               	movwf	?___lwdiv+1
  1780  03F0  083F               	movf	___lwdiv@quotient,w
  1781  03F1  00F3               	movwf	?___lwdiv
  1782  03F2  0008               	return
  1783  03F3                     __end_of___lwdiv:	
  1784                           
  1785                           	psect	text8
  1786  042C                     __ptext8:	
  1787 ;; *************** function _keyCtr *****************
  1788 ;; Defined at:
  1789 ;;		line 403 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;		None
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;		None
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      void 
  1796 ;; Registers used:
  1797 ;;		wreg, status,2, status,0
  1798 ;; Tracked objects:
  1799 ;;		On entry : 100/0
  1800 ;;		On exit  : 100/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMMON   BANK0   BANK1
  1803 ;;      Params:         0       0       0
  1804 ;;      Locals:         0       0       0
  1805 ;;      Temps:          0       0       0
  1806 ;;      Totals:         0       0       0
  1807 ;;Total ram usage:        0 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:    2
  1810 ;; This function calls:
  1811 ;;		Nothing
  1812 ;; This function is called by:
  1813 ;;		_main
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           
  1818                           ;psect for function _keyCtr
  1819  042C                     _keyCtr:	
  1820                           
  1821                           ;main.c: 405: if(PORTB & 0x02)
  1822                           
  1823                           ;incstack = 0
  1824                           ; Regs used in _keyCtr: [wreg+status,2+status,0]
  1825  042C  1C86               	btfss	6,1	;volatile
  1826  042D  2C3F               	goto	l2232
  1827                           
  1828                           ;main.c: 406: {
  1829                           ;main.c: 407: lockTime = 0;
  1830  042E  01AD               	clrf	_lockTime
  1831                           
  1832                           ;main.c: 408: if(workStep > 0 || startLockFlag == 0)
  1833  042F  0836               	movf	_workStep,w
  1834  0430  1D03               	btfss	3,2
  1835  0431  2C35               	goto	l704
  1836  0432  084F               	movf	_startLockFlag,w
  1837  0433  1D03               	btfss	3,2
  1838  0434  0008               	return
  1839  0435                     l704:	
  1840                           
  1841                           ;main.c: 409: {
  1842                           ;main.c: 410: startLockFlag = 1;
  1843  0435  01CF               	clrf	_startLockFlag
  1844  0436  0ACF               	incf	_startLockFlag,f
  1845                           
  1846                           ;main.c: 411: if(PORTB & 0x04)
  1847  0437  1D06               	btfss	6,2	;volatile
  1848  0438  2C3C               	goto	l2230
  1849                           
  1850                           ;main.c: 412: {
  1851                           ;main.c: 413: workStep = 1;
  1852  0439  01B6               	clrf	_workStep
  1853  043A  0AB6               	incf	_workStep,f
  1854                           
  1855                           ;main.c: 414: }
  1856  043B  0008               	return
  1857  043C                     l2230:	
  1858                           
  1859                           ;main.c: 415: else
  1860                           ;main.c: 416: {
  1861                           ;main.c: 417: workStep = 2;
  1862  043C  3002               	movlw	2
  1863  043D  00B6               	movwf	_workStep
  1864  043E  0008               	return
  1865  043F                     l2232:	
  1866  043F  3015               	movlw	21
  1867                           
  1868                           ;main.c: 421: else
  1869                           ;main.c: 422: {
  1870                           ;main.c: 423: workStep = 0;
  1871  0440  01B6               	clrf	_workStep
  1872                           
  1873                           ;main.c: 424: if(++lockTime > 20)
  1874  0441  0AAD               	incf	_lockTime,f
  1875  0442  022D               	subwf	_lockTime,w
  1876  0443  1C03               	skipc
  1877  0444  0008               	return
  1878                           
  1879                           ;main.c: 425: {
  1880                           ;main.c: 426: lockTime = 0;
  1881  0445  01AD               	clrf	_lockTime
  1882                           
  1883                           ;main.c: 427: startLockFlag = 0;
  1884  0446  01CF               	clrf	_startLockFlag
  1885  0447  0008               	return
  1886  0448                     __end_of_keyCtr:	
  1887                           
  1888                           	psect	text9
  1889  0396                     __ptext9:	
  1890 ;; *************** function _chrgCtr *****************
  1891 ;; Defined at:
  1892 ;;		line 320 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;		None
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;		None
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  1    wreg      void 
  1899 ;; Registers used:
  1900 ;;		wreg, status,2, status,0
  1901 ;; Tracked objects:
  1902 ;;		On entry : 100/0
  1903 ;;		On exit  : 100/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMMON   BANK0   BANK1
  1906 ;;      Params:         0       0       0
  1907 ;;      Locals:         0       0       0
  1908 ;;      Temps:          0       0       0
  1909 ;;      Totals:         0       0       0
  1910 ;;Total ram usage:        0 bytes
  1911 ;; Hardware stack levels used:    1
  1912 ;; Hardware stack levels required when called:    2
  1913 ;; This function calls:
  1914 ;;		Nothing
  1915 ;; This function is called by:
  1916 ;;		_main
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           
  1921                           ;psect for function _chrgCtr
  1922  0396                     _chrgCtr:	
  1923                           
  1924                           ;main.c: 322: if(PORTB & 0x01)
  1925                           
  1926                           ;incstack = 0
  1927                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  1928  0396  1C06               	btfss	6,0	;volatile
  1929  0397  2BB3               	goto	l2126
  1930                           
  1931                           ;main.c: 323: {
  1932                           ;main.c: 324: chrgFlag = 1;
  1933  0398  01FA               	clrf	_chrgFlag
  1934  0399  0AFA               	incf	_chrgFlag,f
  1935                           
  1936                           ;main.c: 325: startLockFlag = 1;
  1937  039A  01CF               	clrf	_startLockFlag
  1938  039B  0ACF               	incf	_startLockFlag,f
  1939                           
  1940                           ;main.c: 326: workStep = 0;
  1941  039C  01B6               	clrf	_workStep
  1942                           
  1943                           ;main.c: 327: lowBatFlag = 0;
  1944  039D  01B2               	clrf	_lowBatFlag
  1945                           
  1946                           ;main.c: 328: if(showBatStep == 0)
  1947  039E  0879               	movf	_showBatStep,w
  1948  039F  1D03               	btfss	3,2
  1949  03A0  2BA3               	goto	l680
  1950                           
  1951                           ;main.c: 329: {
  1952                           ;main.c: 330: showBatStep = 1;
  1953  03A1  01F9               	clrf	_showBatStep
  1954  03A2  0AF9               	incf	_showBatStep,f
  1955  03A3                     l680:	
  1956                           
  1957                           ;main.c: 331: }
  1958                           ;main.c: 332: if(PORTA & 0x01)
  1959  03A3  1683               	bsf	3,5	;RP0=1, select bank1
  1960  03A4  1C06               	btfss	6,0	;volatile
  1961  03A5  2BA9               	goto	l2120
  1962                           
  1963                           ;main.c: 333: {
  1964                           ;main.c: 334: chrgFullTime = 0;
  1965  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  1966  03A7  01B7               	clrf	_chrgFullTime
  1967                           
  1968                           ;main.c: 335: }
  1969  03A8  0008               	return
  1970  03A9                     l2120:	
  1971                           
  1972                           ;main.c: 336: else
  1973                           ;main.c: 337: {
  1974                           ;main.c: 338: if(++chrgFullTime >= 200)
  1975  03A9  30C8               	movlw	200
  1976  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  1977  03AB  0AB7               	incf	_chrgFullTime,f
  1978  03AC  0237               	subwf	_chrgFullTime,w
  1979  03AD  1C03               	skipc
  1980  03AE  0008               	return
  1981                           
  1982                           ;main.c: 339: {
  1983                           ;main.c: 340: chrgFullTime = 0;
  1984  03AF  01B7               	clrf	_chrgFullTime
  1985                           
  1986                           ;main.c: 341: chrgFullFlag = 1;
  1987  03B0  01B9               	clrf	_chrgFullFlag
  1988  03B1  0AB9               	incf	_chrgFullFlag,f
  1989  03B2  0008               	return
  1990  03B3                     l2126:	
  1991  03B3  3006               	movlw	6
  1992                           
  1993                           ;main.c: 345: else
  1994                           ;main.c: 346: {
  1995                           ;main.c: 347: chrgFlag = 0;
  1996  03B4  01FA               	clrf	_chrgFlag
  1997                           
  1998                           ;main.c: 348: chrgFullFlag = 0;
  1999  03B5  01B9               	clrf	_chrgFullFlag
  2000                           
  2001                           ;main.c: 349: chrgFullTime = 0;
  2002  03B6  01B7               	clrf	_chrgFullTime
  2003                           
  2004                           ;main.c: 350: if(power_ad < 1650)
  2005  03B7  0278               	subwf	_power_ad+1,w	;volatile
  2006  03B8  3072               	movlw	114
  2007  03B9  1903               	skipnz
  2008  03BA  0277               	subwf	_power_ad,w	;volatile
  2009  03BB  1803               	skipnc
  2010  03BC  2BC7               	goto	l2136
  2011                           
  2012                           ;main.c: 351: {
  2013                           ;main.c: 352: if(++lowBatTime > 200)
  2014  03BD  30C9               	movlw	201
  2015  03BE  0AAE               	incf	_lowBatTime,f
  2016  03BF  022E               	subwf	_lowBatTime,w
  2017  03C0  1C03               	skipc
  2018  03C1  0008               	return
  2019                           
  2020                           ;main.c: 353: {
  2021                           ;main.c: 354: lowBatTime = 0;
  2022  03C2  01AE               	clrf	_lowBatTime
  2023                           
  2024                           ;main.c: 355: lowBatFlag = 1;
  2025  03C3  01B2               	clrf	_lowBatFlag
  2026  03C4  0AB2               	incf	_lowBatFlag,f
  2027                           
  2028                           ;main.c: 356: showBatStep = 0;
  2029  03C5  01F9               	clrf	_showBatStep
  2030  03C6  0008               	return
  2031  03C7                     l2136:	
  2032                           
  2033                           ;main.c: 359: else
  2034                           ;main.c: 360: {
  2035                           ;main.c: 361: lowBatTime = 0;
  2036  03C7  01AE               	clrf	_lowBatTime
  2037  03C8  0008               	return
  2038  03C9                     __end_of_chrgCtr:	
  2039                           
  2040                           	psect	text10
  2041  047D                     __ptext10:	
  2042 ;; *************** function _checkOutAD *****************
  2043 ;; Defined at:
  2044 ;;		line 696 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2045 ;; Parameters:    Size  Location     Type
  2046 ;;		None
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;  power_temp      4    0        volatile unsigned long 
  2049 ;; Return value:  Size  Location     Type
  2050 ;;                  1    wreg      void 
  2051 ;; Registers used:
  2052 ;;		wreg, status,2, status,0, pclath, cstack
  2053 ;; Tracked objects:
  2054 ;;		On entry : 100/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMMON   BANK0   BANK1
  2058 ;;      Params:         0       0       0
  2059 ;;      Locals:         0       0       0
  2060 ;;      Temps:          1       0       0
  2061 ;;      Totals:         1       0       0
  2062 ;;Total ram usage:        1 bytes
  2063 ;; Hardware stack levels used:    1
  2064 ;; Hardware stack levels required when called:    3
  2065 ;; This function calls:
  2066 ;;		_ADC_Sample
  2067 ;; This function is called by:
  2068 ;;		_main
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           
  2073                           ;psect for function _checkOutAD
  2074  047D                     _checkOutAD:	
  2075                           
  2076                           ;main.c: 698: test_adc = ADC_Sample(13, 5);
  2077                           
  2078                           ;incstack = 0
  2079                           ; Regs used in _checkOutAD: [wreg+status,2+status,0+pclath+cstack]
  2080  047D  3005               	movlw	5
  2081  047E  00F3               	movwf	ADC_Sample@adldo
  2082  047F  300D               	movlw	13
  2083  0480  2018               	fcall	_ADC_Sample
  2084  0481  00BD               	movwf	_test_adc	;volatile
  2085                           
  2086                           ;main.c: 699: if (0xA5 == test_adc)
  2087  0482  30A5               	movlw	165
  2088  0483  063D               	xorwf	_test_adc,w	;volatile
  2089  0484  1D03               	btfss	3,2
  2090  0485  2C8B               	goto	l2864
  2091                           
  2092                           ;main.c: 700: {
  2093                           ;main.c: 701: volatile unsigned long power_temp;
  2094                           ;main.c: 703: out_ad = adresult;
  2095  0486  0829               	movf	_adresult+1,w	;volatile
  2096  0487  00A1               	movwf	_out_ad+1
  2097  0488  0828               	movf	_adresult,w	;volatile
  2098  0489  00A0               	movwf	_out_ad
  2099                           
  2100                           ;main.c: 704: }
  2101  048A  0008               	return
  2102  048B                     l2864:	
  2103                           
  2104                           ;main.c: 705: else
  2105                           ;main.c: 706: {
  2106                           ;main.c: 707: ADCON0 = 0;
  2107  048B  1683               	bsf	3,5	;RP0=1, select bank1
  2108  048C  0195               	clrf	21	;volatile
  2109                           
  2110                           ;main.c: 708: ADCON1 = 0;
  2111  048D  0196               	clrf	22	;volatile
  2112                           
  2113                           ;main.c: 709: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2114  048E  3085               	movlw	133
  2115  048F  00F4               	movwf	??_checkOutAD
  2116  0490                     u3337:	
  2117  0490  0BF4               	decfsz	??_checkOutAD,f
  2118  0491  2C90               	goto	u3337
  2119  0492  0008               	return
  2120  0493                     __end_of_checkOutAD:	
  2121                           
  2122                           	psect	text11
  2123  0493                     __ptext11:	
  2124 ;; *************** function _checkBatAD *****************
  2125 ;; Defined at:
  2126 ;;		line 678 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2127 ;; Parameters:    Size  Location     Type
  2128 ;;		None
  2129 ;; Auto vars:     Size  Location     Type
  2130 ;;  power_temp      4    0        volatile unsigned long 
  2131 ;; Return value:  Size  Location     Type
  2132 ;;                  1    wreg      void 
  2133 ;; Registers used:
  2134 ;;		wreg, status,2, status,0, pclath, cstack
  2135 ;; Tracked objects:
  2136 ;;		On entry : 100/0
  2137 ;;		On exit  : 0/0
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMMON   BANK0   BANK1
  2140 ;;      Params:         0       0       0
  2141 ;;      Locals:         0       0       0
  2142 ;;      Temps:          1       0       0
  2143 ;;      Totals:         1       0       0
  2144 ;;Total ram usage:        1 bytes
  2145 ;; Hardware stack levels used:    1
  2146 ;; Hardware stack levels required when called:    3
  2147 ;; This function calls:
  2148 ;;		_ADC_Sample
  2149 ;; This function is called by:
  2150 ;;		_main
  2151 ;; This function uses a non-reentrant model
  2152 ;;
  2153                           
  2154                           
  2155                           ;psect for function _checkBatAD
  2156  0493                     _checkBatAD:	
  2157                           
  2158                           ;main.c: 680: test_adc = ADC_Sample(12, 5);
  2159                           
  2160                           ;incstack = 0
  2161                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2162  0493  3005               	movlw	5
  2163  0494  00F3               	movwf	ADC_Sample@adldo
  2164  0495  300C               	movlw	12
  2165  0496  2018               	fcall	_ADC_Sample
  2166  0497  00BD               	movwf	_test_adc	;volatile
  2167                           
  2168                           ;main.c: 681: if (0xA5 == test_adc)
  2169  0498  30A5               	movlw	165
  2170  0499  063D               	xorwf	_test_adc,w	;volatile
  2171  049A  1D03               	btfss	3,2
  2172  049B  2CA1               	goto	l2648
  2173                           
  2174                           ;main.c: 682: {
  2175                           ;main.c: 683: volatile unsigned long power_temp;
  2176                           ;main.c: 685: power_ad = adresult;
  2177  049C  0829               	movf	_adresult+1,w	;volatile
  2178  049D  00F8               	movwf	_power_ad+1	;volatile
  2179  049E  0828               	movf	_adresult,w	;volatile
  2180  049F  00F7               	movwf	_power_ad	;volatile
  2181                           
  2182                           ;main.c: 686: }
  2183  04A0  0008               	return
  2184  04A1                     l2648:	
  2185                           
  2186                           ;main.c: 687: else
  2187                           ;main.c: 688: {
  2188                           ;main.c: 689: ADCON0 = 0;
  2189  04A1  1683               	bsf	3,5	;RP0=1, select bank1
  2190  04A2  0195               	clrf	21	;volatile
  2191                           
  2192                           ;main.c: 690: ADCON1 = 0;
  2193  04A3  0196               	clrf	22	;volatile
  2194                           
  2195                           ;main.c: 691: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2196  04A4  3085               	movlw	133
  2197  04A5  00F4               	movwf	??_checkBatAD
  2198  04A6                     u3347:	
  2199  04A6  0BF4               	decfsz	??_checkBatAD,f
  2200  04A7  2CA6               	goto	u3347
  2201  04A8  0008               	return
  2202  04A9                     __end_of_checkBatAD:	
  2203                           
  2204                           	psect	text12
  2205  0018                     __ptext12:	
  2206 ;; *************** function _ADC_Sample *****************
  2207 ;; Defined at:
  2208 ;;		line 924 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;  adch            1    wreg     unsigned char 
  2211 ;;  adldo           1    3[COMMON] unsigned char 
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  adch            1    5[BANK0 ] unsigned char 
  2214 ;;  j               1    4[BANK0 ] unsigned char 
  2215 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  2216 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  2217 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  2218 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  2219 ;;  i               1    6[BANK0 ] unsigned char 
  2220 ;; Return value:  Size  Location     Type
  2221 ;;                  1    wreg      unsigned char 
  2222 ;; Registers used:
  2223 ;;		wreg, status,2, status,0
  2224 ;; Tracked objects:
  2225 ;;		On entry : 100/0
  2226 ;;		On exit  : 100/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMMON   BANK0   BANK1
  2229 ;;      Params:         1       0       0
  2230 ;;      Locals:         0      13       0
  2231 ;;      Temps:          0       4       0
  2232 ;;      Totals:         1      17       0
  2233 ;;Total ram usage:       18 bytes
  2234 ;; Hardware stack levels used:    1
  2235 ;; Hardware stack levels required when called:    2
  2236 ;; This function calls:
  2237 ;;		Nothing
  2238 ;; This function is called by:
  2239 ;;		_checkBatAD
  2240 ;;		_checkOutAD
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           
  2245                           ;psect for function _ADC_Sample
  2246  0018                     _ADC_Sample:	
  2247                           
  2248                           ;incstack = 0
  2249                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2250                           ;ADC_Sample@adch stored from wreg
  2251  0018  00C3               	movwf	ADC_Sample@adch
  2252                           
  2253                           ;main.c: 926: volatile unsigned long adsum = 0;
  2254                           
  2255                           ;main.c: 927: volatile unsigned int admin = 0, admax = 0;
  2256  0019  20F2               	fcall	PL4	;call to abstracted procedure
  2257                           
  2258                           ;main.c: 928: volatile unsigned int ad_temp = 0;
  2259  001A  01CD               	clrf	ADC_Sample@ad_temp	;volatile
  2260  001B  01CE               	clrf	ADC_Sample@ad_temp+1	;volatile
  2261                           
  2262                           ;main.c: 930: if ((!LDO_EN) && (adldo & 0x04) )
  2263  001C  1683               	bsf	3,5	;RP0=1, select bank1
  2264  001D  1D16               	btfss	22,2	;volatile
  2265  001E  1D73               	btfss	ADC_Sample@adldo,2
  2266  001F  2829               	goto	l2536
  2267                           
  2268                           ;main.c: 931: {
  2269                           ;main.c: 933: ADCON1 = adldo;
  2270  0020  0873               	movf	ADC_Sample@adldo,w
  2271  0021  0096               	movwf	22	;volatile
  2272                           
  2273                           ;main.c: 934: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2274  0022  3084               	movlw	132
  2275  0023  1283               	bcf	3,5	;RP0=0, select bank0
  2276  0024  00BE               	movwf	??_ADC_Sample
  2277  0025                     u3357:	
  2278  0025  0BBE               	decfsz	??_ADC_Sample,f
  2279  0026  2825               	goto	u3357
  2280  0027  2828               	nop2
  2281                           
  2282                           ;main.c: 935: }
  2283  0028  282B               	goto	l2538
  2284  0029                     l2536:	
  2285                           
  2286                           ;main.c: 936: else
  2287                           ;main.c: 937: ADCON1 = adldo;
  2288  0029  0873               	movf	ADC_Sample@adldo,w
  2289  002A  0096               	movwf	22	;volatile
  2290  002B                     l2538:	
  2291                           
  2292                           ;main.c: 939: if(adch & 0x10)
  2293  002B  1283               	bcf	3,5	;RP0=0, select bank0
  2294  002C  1E43               	btfss	ADC_Sample@adch,4
  2295  002D  2833               	goto	l2546
  2296                           
  2297                           ;main.c: 940: {
  2298                           ;main.c: 941: CHS4 = 1;
  2299  002E  1683               	bsf	3,5	;RP0=1, select bank1
  2300  002F  1716               	bsf	22,6	;volatile
  2301                           
  2302                           ;main.c: 942: adch &= 0x0f;
  2303  0030  300F               	movlw	15
  2304  0031  1283               	bcf	3,5	;RP0=0, select bank0
  2305  0032  05C3               	andwf	ADC_Sample@adch,f
  2306  0033                     l2546:	
  2307                           
  2308                           ;main.c: 945: for (i = 0; i < 10; i++)
  2309  0033  01C4               	clrf	ADC_Sample@i
  2310  0034                     l2552:	
  2311                           
  2312                           ;main.c: 946: {
  2313                           ;main.c: 947: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2314  0034  0843               	movf	ADC_Sample@adch,w
  2315  0035  00BE               	movwf	??_ADC_Sample
  2316  0036  3001               	movlw	1
  2317  0037  1003               	clrc
  2318  0038                     L9:	
  2319  0038  0DBE               	rlf	??_ADC_Sample,f
  2320  0039  3EFF               	addlw	-1
  2321  003A  1003               	clrc
  2322  003B  1D03               	skipz
  2323  003C  2838               	goto	L9
  2324  003D  0D3E               	rlf	??_ADC_Sample,w
  2325  003E  3841               	iorlw	65
  2326  003F  1683               	bsf	3,5	;RP0=1, select bank1
  2327  0040  0095               	movwf	21	;volatile
  2328  0041  0000               	nop	;# 
  2329  0042  0000               	nop	;# 
  2330  0043  0000               	nop	;# 
  2331  0044  0000               	nop	;# 
  2332                           
  2333                           ;main.c: 952: GODONE = 1;
  2334  0045  1683               	bsf	3,5	;RP0=1, select bank1
  2335  0046  1495               	bsf	21,1	;volatile
  2336                           
  2337                           ;main.c: 954: unsigned char j = 0;
  2338  0047  1283               	bcf	3,5	;RP0=0, select bank0
  2339  0048  01C2               	clrf	ADC_Sample@j
  2340  0049                     l815:	
  2341                           ;main.c: 955: while (GODONE)
  2342                           
  2343  0049  1683               	bsf	3,5	;RP0=1, select bank1
  2344  004A  1C95               	btfss	21,1	;volatile
  2345  004B  2854               	goto	l2562
  2346                           
  2347                           ;main.c: 956: {
  2348                           ;main.c: 957: _delay((unsigned long)((2)*(16000000/4000000.0)));
  2349  004C  284D               	nop2	;2 cycle nop
  2350  004D  284E               	nop2	;2 cycle nop
  2351  004E  284F               	nop2	;2 cycle nop
  2352  004F  2850               	nop2	;2 cycle nop
  2353                           
  2354                           ;main.c: 959: if (0 == (--j))
  2355  0050  1283               	bcf	3,5	;RP0=0, select bank0
  2356  0051  0BC2               	decfsz	ADC_Sample@j,f
  2357  0052  2849               	goto	l815
  2358                           
  2359                           ;main.c: 960: return 0;
  2360  0053  3400               	retlw	0
  2361  0054                     l2562:	
  2362                           
  2363                           ;main.c: 961: }
  2364                           ;main.c: 963: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2365  0054  0819               	movf	25,w	;volatile
  2366  0055  1283               	bcf	3,5	;RP0=0, select bank0
  2367  0056  00CD               	movwf	ADC_Sample@ad_temp	;volatile
  2368  0057  01CE               	clrf	ADC_Sample@ad_temp+1	;volatile
  2369  0058  0ECD               	swapf	ADC_Sample@ad_temp,f	;volatile
  2370  0059  0ECE               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2371  005A  30F0               	movlw	240
  2372  005B  05CE               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2373  005C  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  2374  005D  390F               	andlw	15
  2375  005E  04CE               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2376  005F  30F0               	movlw	240
  2377  0060  05CD               	andwf	ADC_Sample@ad_temp,f	;volatile
  2378  0061  1683               	bsf	3,5	;RP0=1, select bank1
  2379  0062  0E18               	swapf	24,w	;volatile
  2380  0063  390F               	andlw	15
  2381  0064  1283               	bcf	3,5	;RP0=0, select bank0
  2382  0065  07CD               	addwf	ADC_Sample@ad_temp,f	;volatile
  2383  0066  1803               	skipnc
  2384  0067  0ACE               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2385                           
  2386                           ;main.c: 965: if (0 == admax)
  2387  0068  084B               	movf	ADC_Sample@admax,w	;volatile
  2388  0069  044C               	iorwf	ADC_Sample@admax+1,w	;volatile
  2389  006A  1D03               	btfss	3,2
  2390  006B  286E               	goto	l2570
  2391                           
  2392                           ;main.c: 966: {
  2393                           ;main.c: 967: admax = ad_temp;
  2394  006C  20FB               	fcall	PL12	;call to abstracted procedure
  2395  006D  2880               	goto	l2576
  2396  006E                     l2570:	
  2397                           ;main.c: 969: }
  2398                           
  2399                           ;main.c: 968: admin = ad_temp;
  2400                           
  2401                           
  2402                           ;main.c: 970: else if (ad_temp > admax)
  2403  006E  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2404  006F  024C               	subwf	ADC_Sample@admax+1,w	;volatile
  2405  0070  1D03               	skipz
  2406  0071  2874               	goto	u2545
  2407  0072  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  2408  0073  024B               	subwf	ADC_Sample@admax,w	;volatile
  2409  0074                     u2545:	
  2410  0074  1803               	skipnc
  2411  0075  2878               	goto	l2574
  2412                           
  2413                           ;main.c: 971: admax = ad_temp;
  2414  0076  20FB               	fcall	PL12	;call to abstracted procedure
  2415  0077  2884               	goto	l821
  2416  0078                     l2574:	
  2417                           
  2418                           ;main.c: 972: else if (ad_temp < admin)
  2419  0078  084A               	movf	ADC_Sample@admin+1,w	;volatile
  2420  0079  024E               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2421  007A  1D03               	skipz
  2422  007B  287E               	goto	u2555
  2423  007C  0849               	movf	ADC_Sample@admin,w	;volatile
  2424  007D  024D               	subwf	ADC_Sample@ad_temp,w	;volatile
  2425  007E                     u2555:	
  2426  007E  1803               	skipnc
  2427  007F  2884               	goto	l821
  2428  0080                     l2576:	
  2429                           
  2430                           ;main.c: 973: admin = ad_temp;
  2431  0080  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2432  0081  00CA               	movwf	ADC_Sample@admin+1	;volatile
  2433  0082  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  2434  0083  00C9               	movwf	ADC_Sample@admin	;volatile
  2435  0084                     l821:	
  2436                           
  2437                           ;main.c: 975: adsum += ad_temp;
  2438  0084  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  2439  0085  00BE               	movwf	??_ADC_Sample
  2440  0086  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2441  0087  00BF               	movwf	??_ADC_Sample+1
  2442  0088  01C0               	clrf	??_ADC_Sample+2
  2443  0089  01C1               	clrf	??_ADC_Sample+3
  2444  008A  083E               	movf	??_ADC_Sample,w
  2445  008B  07C5               	addwf	ADC_Sample@adsum,f	;volatile
  2446  008C  083F               	movf	??_ADC_Sample+1,w
  2447  008D  1103               	clrz
  2448  008E  1803               	skipnc
  2449  008F  3E01               	addlw	1
  2450  0090  1D03               	btfss	3,2
  2451  0091  07C6               	addwf	ADC_Sample@adsum+1,f	;volatile
  2452  0092  0840               	movf	??_ADC_Sample+2,w
  2453  0093  1103               	clrz
  2454  0094  1803               	skipnc
  2455  0095  3E01               	addlw	1
  2456  0096  1D03               	btfss	3,2
  2457  0097  07C7               	addwf	ADC_Sample@adsum+2,f	;volatile
  2458  0098  0841               	movf	??_ADC_Sample+3,w
  2459  0099  1103               	clrz
  2460  009A  1803               	skipnc
  2461  009B  3E01               	addlw	1
  2462  009C  1D03               	btfss	3,2
  2463  009D  07C8               	addwf	ADC_Sample@adsum+3,f	;volatile
  2464  009E  300A               	movlw	10
  2465  009F  0AC4               	incf	ADC_Sample@i,f
  2466  00A0  0244               	subwf	ADC_Sample@i,w
  2467  00A1  1C03               	skipc
  2468  00A2  2834               	goto	l2552
  2469                           
  2470                           ;main.c: 976: }
  2471                           ;main.c: 977: adsum -= admax;
  2472  00A3  084B               	movf	ADC_Sample@admax,w	;volatile
  2473  00A4  00BE               	movwf	??_ADC_Sample
  2474  00A5  084C               	movf	ADC_Sample@admax+1,w	;volatile
  2475  00A6  20E3               	fcall	PL2	;call to abstracted procedure
  2476  00A7  1C03               	skipc
  2477  00A8  0F41               	incfsz	??_ADC_Sample+3,w
  2478  00A9  02C8               	subwf	ADC_Sample@adsum+3,f	;volatile
  2479                           
  2480                           ;main.c: 978: if (adsum >= admin)
  2481  00AA  0849               	movf	ADC_Sample@admin,w	;volatile
  2482  00AB  00BE               	movwf	??_ADC_Sample
  2483  00AC  084A               	movf	ADC_Sample@admin+1,w	;volatile
  2484  00AD  00BF               	movwf	??_ADC_Sample+1
  2485  00AE  01C0               	clrf	??_ADC_Sample+2
  2486  00AF  01C1               	clrf	??_ADC_Sample+3
  2487  00B0  0841               	movf	??_ADC_Sample+3,w
  2488  00B1  0248               	subwf	ADC_Sample@adsum+3,w	;volatile
  2489  00B2  1D03               	skipz
  2490  00B3  28BE               	goto	u2595
  2491  00B4  0840               	movf	??_ADC_Sample+2,w
  2492  00B5  0247               	subwf	ADC_Sample@adsum+2,w	;volatile
  2493  00B6  1D03               	skipz
  2494  00B7  28BE               	goto	u2595
  2495  00B8  083F               	movf	??_ADC_Sample+1,w
  2496  00B9  0246               	subwf	ADC_Sample@adsum+1,w	;volatile
  2497  00BA  1D03               	skipz
  2498  00BB  28BE               	goto	u2595
  2499  00BC  083E               	movf	??_ADC_Sample,w
  2500  00BD  0245               	subwf	ADC_Sample@adsum,w	;volatile
  2501  00BE                     u2595:	
  2502  00BE  1C03               	skipc
  2503  00BF  28C8               	goto	l825
  2504                           
  2505                           ;main.c: 979: adsum -= admin;
  2506  00C0  0849               	movf	ADC_Sample@admin,w	;volatile
  2507  00C1  00BE               	movwf	??_ADC_Sample
  2508  00C2  084A               	movf	ADC_Sample@admin+1,w	;volatile
  2509  00C3  20E3               	fcall	PL2	;call to abstracted procedure
  2510  00C4  1C03               	skipc
  2511  00C5  0F41               	incfsz	??_ADC_Sample+3,w
  2512  00C6  02C8               	subwf	ADC_Sample@adsum+3,f	;volatile
  2513  00C7  28CC               	goto	l2586
  2514  00C8                     l825:	
  2515                           
  2516                           ;main.c: 980: else
  2517                           ;main.c: 981: adsum = 0;
  2518  00C8  01C5               	clrf	ADC_Sample@adsum	;volatile
  2519  00C9  01C6               	clrf	ADC_Sample@adsum+1	;volatile
  2520  00CA  01C7               	clrf	ADC_Sample@adsum+2	;volatile
  2521  00CB  01C8               	clrf	ADC_Sample@adsum+3	;volatile
  2522  00CC                     l2586:	
  2523                           
  2524                           ;main.c: 983: adresult = adsum >> 3;
  2525  00CC  0845               	movf	ADC_Sample@adsum,w	;volatile
  2526  00CD  00BE               	movwf	??_ADC_Sample
  2527  00CE  0846               	movf	ADC_Sample@adsum+1,w	;volatile
  2528  00CF  00BF               	movwf	??_ADC_Sample+1
  2529  00D0  0847               	movf	ADC_Sample@adsum+2,w	;volatile
  2530  00D1  00C0               	movwf	??_ADC_Sample+2
  2531  00D2  0848               	movf	ADC_Sample@adsum+3,w	;volatile
  2532  00D3  00C1               	movwf	??_ADC_Sample+3
  2533  00D4  3003               	movlw	3
  2534  00D5                     u2615:	
  2535  00D5  1003               	clrc
  2536  00D6  0CC1               	rrf	??_ADC_Sample+3,f
  2537  00D7  0CC0               	rrf	??_ADC_Sample+2,f
  2538  00D8  0CBF               	rrf	??_ADC_Sample+1,f
  2539  00D9  0CBE               	rrf	??_ADC_Sample,f
  2540  00DA  3EFF               	addlw	-1
  2541  00DB  1D03               	skipz
  2542  00DC  28D5               	goto	u2615
  2543  00DD  083F               	movf	??_ADC_Sample+1,w
  2544  00DE  00A9               	movwf	_adresult+1	;volatile
  2545  00DF  083E               	movf	??_ADC_Sample,w
  2546  00E0  00A8               	movwf	_adresult	;volatile
  2547                           
  2548                           ;main.c: 985: adsum = 0;
  2549                           
  2550                           ;main.c: 986: admin = 0;
  2551                           
  2552                           ;main.c: 987: admax = 0;
  2553  00E1  20F2               	fcall	PL4	;call to abstracted procedure
  2554                           
  2555                           ;main.c: 988: return 0xA5;
  2556  00E2  34A5               	retlw	165
  2557  00E3                     __end_of_ADC_Sample:	
  2558  00E3                     PL2:	
  2559  00E3  00BF               	movwf	??_ADC_Sample+1
  2560  00E4  01C0               	clrf	??_ADC_Sample+2
  2561  00E5  01C1               	clrf	??_ADC_Sample+3
  2562  00E6  083E               	movf	??_ADC_Sample,w
  2563  00E7  02C5               	subwf	ADC_Sample@adsum,f	;volatile
  2564  00E8  083F               	movf	??_ADC_Sample+1,w
  2565  00E9  1C03               	skipc
  2566  00EA  0F3F               	incfsz	??_ADC_Sample+1,w
  2567  00EB  02C6               	subwf	ADC_Sample@adsum+1,f	;volatile
  2568  00EC  0840               	movf	??_ADC_Sample+2,w
  2569  00ED  1C03               	skipc
  2570  00EE  0F40               	incfsz	??_ADC_Sample+2,w
  2571  00EF  02C7               	subwf	ADC_Sample@adsum+2,f	;volatile
  2572  00F0  0841               	movf	??_ADC_Sample+3,w
  2573  00F1  0008               	return
  2574  00F2                     __end_ofPL2:	
  2575  00F2                     PL4:	
  2576  00F2  01C5               	clrf	ADC_Sample@adsum	;volatile
  2577  00F3  01C6               	clrf	ADC_Sample@adsum+1	;volatile
  2578  00F4  01C7               	clrf	ADC_Sample@adsum+2	;volatile
  2579  00F5  01C8               	clrf	ADC_Sample@adsum+3	;volatile
  2580  00F6  01C9               	clrf	ADC_Sample@admin	;volatile
  2581  00F7  01CA               	clrf	ADC_Sample@admin+1	;volatile
  2582  00F8  01CB               	clrf	ADC_Sample@admax	;volatile
  2583  00F9  01CC               	clrf	ADC_Sample@admax+1	;volatile
  2584  00FA  0008               	return
  2585  00FB                     __end_ofPL4:	
  2586  00FB                     PL12:	
  2587  00FB  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2588  00FC  00CC               	movwf	ADC_Sample@admax+1	;volatile
  2589  00FD  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  2590  00FE  00CB               	movwf	ADC_Sample@admax	;volatile
  2591  00FF  0008               	return
  2592  0100                     __end_ofPL12:	
  2593                           
  2594                           	psect	text13
  2595  0315                     __ptext13:	
  2596 ;; *************** function _Sleep_Mode *****************
  2597 ;; Defined at:
  2598 ;;		line 847 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;		None
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;		None
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      void 
  2605 ;; Registers used:
  2606 ;;		wreg, status,2, status,0, pclath, cstack
  2607 ;; Tracked objects:
  2608 ;;		On entry : 100/0
  2609 ;;		On exit  : 100/100
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMMON   BANK0   BANK1
  2612 ;;      Params:         0       0       0
  2613 ;;      Locals:         0       0       0
  2614 ;;      Temps:          0       0       0
  2615 ;;      Totals:         0       0       0
  2616 ;;Total ram usage:        0 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    3
  2619 ;; This function calls:
  2620 ;;		_AD_Init
  2621 ;;		_Init_System
  2622 ;; This function is called by:
  2623 ;;		_main
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           
  2628                           ;psect for function _Sleep_Mode
  2629  0315                     _Sleep_Mode:	
  2630                           
  2631                           ;main.c: 849: INTCON = 0;
  2632                           
  2633                           ;incstack = 0
  2634                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  2635  0315  018B               	clrf	11	;volatile
  2636                           
  2637                           ;main.c: 851: OPTION_REG = 0;
  2638  0316  0181               	clrf	1	;volatile
  2639                           
  2640                           ;main.c: 853: WPUA = 0x00;
  2641  0317  1683               	bsf	3,5	;RP0=1, select bank1
  2642  0318  0188               	clrf	8	;volatile
  2643                           
  2644                           ;main.c: 854: TRISA = 0x01;
  2645  0319  3001               	movlw	1
  2646                           
  2647                           ;main.c: 855: TRISB = 0x37;
  2648                           
  2649                           ;main.c: 857: PORTA = 0X00;
  2650                           
  2651                           ;main.c: 858: PORTB = 0X00;
  2652  031A  234E               	fcall	PL6	;call to abstracted procedure
  2653                           
  2654                           ;main.c: 859: WPUB = 0x04;
  2655  031B  3004               	movlw	4
  2656  031C  0088               	movwf	8	;volatile
  2657                           
  2658                           ;main.c: 861: ADCON0 = 0;
  2659  031D  1683               	bsf	3,5	;RP0=1, select bank1
  2660  031E  0195               	clrf	21	;volatile
  2661                           
  2662                           ;main.c: 862: ADCON1 = 0;
  2663  031F  0196               	clrf	22	;volatile
  2664                           
  2665                           ;main.c: 864: PWMCON0 = 0;
  2666  0320  1283               	bcf	3,5	;RP0=0, select bank0
  2667  0321  0195               	clrf	21	;volatile
  2668                           
  2669                           ;main.c: 866: OSCCON = 0X70;
  2670  0322  3070               	movlw	112
  2671  0323  0094               	movwf	20	;volatile
  2672                           
  2673                           ;main.c: 868: IOCA = 0B00000000;
  2674  0324  1683               	bsf	3,5	;RP0=1, select bank1
  2675  0325  0189               	clrf	9	;volatile
  2676                           
  2677                           ;main.c: 869: IOCB = 0x07;
  2678  0326  3007               	movlw	7
  2679  0327  1283               	bcf	3,5	;RP0=0, select bank0
  2680  0328  0089               	movwf	9	;volatile
  2681                           
  2682                           ;main.c: 871: RAIE = 1;
  2683  0329  158E               	bsf	14,3	;volatile
  2684                           
  2685                           ;main.c: 872: PEIE = 1;
  2686  032A  170B               	bsf	11,6	;volatile
  2687                           
  2688                           ;main.c: 873: RBIE = 1;
  2689  032B  158B               	bsf	11,3	;volatile
  2690                           
  2691                           ;main.c: 874: GIE = 0;
  2692  032C  138B               	bcf	11,7	;volatile
  2693                           
  2694                           ;main.c: 876: PIE1 &= 0X08;
  2695  032D  3008               	movlw	8
  2696  032E  058E               	andwf	14,f	;volatile
  2697                           
  2698                           ;main.c: 877: PIR1 = 0;
  2699  032F  018D               	clrf	13	;volatile
  2700                           
  2701                           ;main.c: 878: INTCON &= 0XC8;
  2702  0330  30C8               	movlw	200
  2703  0331  058B               	andwf	11,f	;volatile
  2704                           
  2705                           ;main.c: 880: PORTA;
  2706  0332  1683               	bsf	3,5	;RP0=1, select bank1
  2707  0333  0806               	movf	6,w	;volatile
  2708                           
  2709                           ;main.c: 881: RAIF = 0;
  2710  0334  1283               	bcf	3,5	;RP0=0, select bank0
  2711  0335  118D               	bcf	13,3	;volatile
  2712                           
  2713                           ;main.c: 882: PORTB;
  2714  0336  0806               	movf	6,w	;volatile
  2715                           
  2716                           ;main.c: 883: RBIF = 0;
  2717  0337  100B               	bcf	11,0	;volatile
  2718  0338  0064               	clrwdt	;# 
  2719  0339  0063               	sleep	;# 
  2720  033A  0000               	nop	;# 
  2721  033B  0064               	clrwdt	;# 
  2722  033C  0000               	nop	;# 
  2723  033D  0000               	nop	;# 
  2724  033E  0000               	nop	;# 
  2725  033F  0000               	nop	;# 
  2726  0340  0000               	nop	;# 
  2727                           
  2728                           ;main.c: 895: if(RAIF) RAIF = 0;
  2729  0341  1283               	bcf	3,5	;RP0=0, select bank0
  2730  0342  198D               	btfsc	13,3	;volatile
  2731  0343  118D               	bcf	13,3	;volatile
  2732                           
  2733                           ;main.c: 896: if(RBIF) RBIF = 0;
  2734  0344  180B               	btfsc	11,0	;volatile
  2735  0345  100B               	bcf	11,0	;volatile
  2736                           
  2737                           ;main.c: 897: if(TMR2IF) TMR2IF = 0;
  2738  0346  188D               	btfsc	13,1	;volatile
  2739  0347  108D               	bcf	13,1	;volatile
  2740                           
  2741                           ;main.c: 898: IOCA = 0B00000000;
  2742  0348  1683               	bsf	3,5	;RP0=1, select bank1
  2743  0349  0189               	clrf	9	;volatile
  2744                           
  2745                           ;main.c: 899: IOCB = 0B00000000;
  2746  034A  1283               	bcf	3,5	;RP0=0, select bank0
  2747  034B  0189               	clrf	9	;volatile
  2748                           
  2749                           ;main.c: 900: Init_System();
  2750  034C  2463               	fcall	_Init_System
  2751                           
  2752                           ;main.c: 901: AD_Init();
  2753  034D  2CE1               	ljmp	l1898
  2754  034E                     __end_of_Sleep_Mode:	
  2755  034E                     PL6:	
  2756  034E  0085               	movwf	5	;volatile
  2757  034F  3037               	movlw	55
  2758  0350  1283               	bcf	3,5	;RP0=0, select bank0
  2759  0351  0085               	movwf	5	;volatile
  2760  0352  1683               	bsf	3,5	;RP0=1, select bank1
  2761  0353  0186               	clrf	6	;volatile
  2762  0354  1283               	bcf	3,5	;RP0=0, select bank0
  2763  0355  0186               	clrf	6	;volatile
  2764  0356  0008               	return
  2765  0357                     __end_ofPL6:	
  2766                           
  2767                           	psect	text14
  2768  0463                     __ptext14:	
  2769 ;; *************** function _Init_System *****************
  2770 ;; Defined at:
  2771 ;;		line 723 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;		None
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      void 
  2778 ;; Registers used:
  2779 ;;		wreg, status,2
  2780 ;; Tracked objects:
  2781 ;;		On entry : 100/0
  2782 ;;		On exit  : 100/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMMON   BANK0   BANK1
  2785 ;;      Params:         0       0       0
  2786 ;;      Locals:         0       0       0
  2787 ;;      Temps:          0       0       0
  2788 ;;      Totals:         0       0       0
  2789 ;;Total ram usage:        0 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    2
  2792 ;; This function calls:
  2793 ;;		Nothing
  2794 ;; This function is called by:
  2795 ;;		_main
  2796 ;;		_Sleep_Mode
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           
  2801                           ;psect for function _Init_System
  2802  0463                     _Init_System:	
  2803                           
  2804                           ;incstack = 0
  2805                           ; Regs used in _Init_System: [wreg+status,2]
  2806  0463  0000               	nop	;# 
  2807  0464  0064               	clrwdt	;# 
  2808                           
  2809                           ;main.c: 727: OPTION_REG = 0;
  2810  0465  1283               	bcf	3,5	;RP0=0, select bank0
  2811  0466  0181               	clrf	1	;volatile
  2812  0467  0064               	clrwdt	;# 
  2813                           
  2814                           ;main.c: 729: OSCCON = 0X72;
  2815  0468  3072               	movlw	114
  2816  0469  1283               	bcf	3,5	;RP0=0, select bank0
  2817  046A  0094               	movwf	20	;volatile
  2818                           
  2819                           ;main.c: 731: WPUA = 0x00;
  2820  046B  1683               	bsf	3,5	;RP0=1, select bank1
  2821  046C  0188               	clrf	8	;volatile
  2822                           
  2823                           ;main.c: 732: WPDA = 0x00;
  2824  046D  0187               	clrf	7	;volatile
  2825                           
  2826                           ;main.c: 733: WPUB = 0x04;
  2827  046E  3004               	movlw	4
  2828  046F  1283               	bcf	3,5	;RP0=0, select bank0
  2829  0470  0088               	movwf	8	;volatile
  2830                           
  2831                           ;main.c: 735: TRISA = 0x01;
  2832  0471  3001               	movlw	1
  2833  0472  1683               	bsf	3,5	;RP0=1, select bank1
  2834                           
  2835                           ;main.c: 736: TRISB = 0x37;
  2836                           
  2837                           ;main.c: 738: PORTA = 0X00;
  2838                           
  2839                           ;main.c: 739: PORTB = 0X00;
  2840  0473  234E               	fcall	PL6	;call to abstracted procedure
  2841                           
  2842                           ;main.c: 743: PR2 = 249;
  2843  0474  30F9               	movlw	249
  2844  0475  0091               	movwf	17	;volatile
  2845                           
  2846                           ;main.c: 744: TMR2IF = 0;
  2847  0476  108D               	bcf	13,1	;volatile
  2848                           
  2849                           ;main.c: 745: TMR2IE = 1;
  2850  0477  148E               	bsf	14,1	;volatile
  2851                           
  2852                           ;main.c: 747: T2CON = 0B00000100;
  2853  0478  3004               	movlw	4
  2854  0479  0093               	movwf	19	;volatile
  2855                           
  2856                           ;main.c: 748: INTCON = 0XC0;
  2857  047A  30C0               	movlw	192
  2858  047B  008B               	movwf	11	;volatile
  2859  047C  0008               	return
  2860  047D                     __end_of_Init_System:	
  2861                           
  2862                           	psect	text15
  2863  04E1                     __ptext15:	
  2864 ;; *************** function _AD_Init *****************
  2865 ;; Defined at:
  2866 ;;		line 760 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;		None
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;		None
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  1    wreg      void 
  2873 ;; Registers used:
  2874 ;;		wreg, status,2
  2875 ;; Tracked objects:
  2876 ;;		On entry : 100/0
  2877 ;;		On exit  : 100/100
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMMON   BANK0   BANK1
  2880 ;;      Params:         0       0       0
  2881 ;;      Locals:         0       0       0
  2882 ;;      Temps:          0       0       0
  2883 ;;      Totals:         0       0       0
  2884 ;;Total ram usage:        0 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    2
  2887 ;; This function calls:
  2888 ;;		Nothing
  2889 ;; This function is called by:
  2890 ;;		_main
  2891 ;;		_Sleep_Mode
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           
  2896                           ;psect for function _AD_Init
  2897  04E1                     _AD_Init:	
  2898  04E1                     l1898:	
  2899                           ;incstack = 0
  2900                           ; Regs used in _AD_Init: [wreg+status,2]
  2901                           
  2902                           
  2903                           ;main.c: 793: ADCON0 = 0X41;
  2904  04E1  3041               	movlw	65
  2905  04E2  1683               	bsf	3,5	;RP0=1, select bank1
  2906  04E3  0095               	movwf	21	;volatile
  2907                           
  2908                           ;main.c: 810: ADCON1 = 0;
  2909  04E4  0196               	clrf	22	;volatile
  2910                           
  2911                           ;main.c: 811: ANSEL0 = 0X00;
  2912  04E5  0193               	clrf	19	;volatile
  2913                           
  2914                           ;main.c: 812: ANSEL1 = 0x30;
  2915  04E6  3030               	movlw	48
  2916  04E7  0094               	movwf	20	;volatile
  2917  04E8  0008               	return
  2918  04E9                     __end_of_AD_Init:	
  2919                           
  2920                           	psect	text16
  2921  03F3                     __ptext16:	
  2922 ;; *************** function _Isr_Timer *****************
  2923 ;; Defined at:
  2924 ;;		line 100 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;		None
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;		None
  2929 ;; Return value:  Size  Location     Type
  2930 ;;                  1    wreg      void 
  2931 ;; Registers used:
  2932 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2933 ;; Tracked objects:
  2934 ;;		On entry : 0/0
  2935 ;;		On exit  : 100/0
  2936 ;;		Unchanged: 0/0
  2937 ;; Data sizes:     COMMON   BANK0   BANK1
  2938 ;;      Params:         0       0       0
  2939 ;;      Locals:         0       0       0
  2940 ;;      Temps:          3       0       0
  2941 ;;      Totals:         3       0       0
  2942 ;;Total ram usage:        3 bytes
  2943 ;; Hardware stack levels used:    1
  2944 ;; Hardware stack levels required when called:    1
  2945 ;; This function calls:
  2946 ;;		_ledShow
  2947 ;; This function is called by:
  2948 ;;		Interrupt level 1
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           
  2953                           ;psect for function _Isr_Timer
  2954  03F3                     _Isr_Timer:	
  2955                           
  2956                           ;main.c: 102: if(TMR2IF)
  2957  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  2958  03F4  1C8D               	btfss	13,1	;volatile
  2959  03F5  2C07               	goto	i1l626
  2960                           
  2961                           ;main.c: 103: {
  2962                           ;main.c: 104: TMR2IF = 0;
  2963  03F6  108D               	bcf	13,1	;volatile
  2964                           
  2965                           ;main.c: 105: if(++intCount >= 160)
  2966  03F7  30A0               	movlw	160
  2967  03F8  0ABC               	incf	_intCount,f
  2968  03F9  023C               	subwf	_intCount,w
  2969  03FA  1C03               	skipc
  2970  03FB  2C04               	goto	i1l2448
  2971  03FC  3064               	movlw	100
  2972                           
  2973                           ;main.c: 106: {
  2974                           ;main.c: 107: intCount = 0;
  2975  03FD  01BC               	clrf	_intCount
  2976                           
  2977                           ;main.c: 108: IntFlag = 1;
  2978  03FE  01BA               	clrf	_IntFlag
  2979  03FF  0ABA               	incf	_IntFlag,f
  2980                           
  2981                           ;main.c: 109: if(++count1s >= 100)
  2982  0400  0ABB               	incf	_count1s,f
  2983  0401  023B               	subwf	_count1s,w
  2984  0402  1803               	btfsc	3,0
  2985                           
  2986                           ;main.c: 110: {
  2987                           ;main.c: 111: count1s = 0;
  2988  0403  01BB               	clrf	_count1s
  2989  0404                     i1l2448:	
  2990                           
  2991                           ;main.c: 112: }
  2992                           ;main.c: 113: }
  2993                           ;main.c: 114: ledShow();
  2994  0404  2287               	fcall	_ledShow
  2995                           
  2996                           ;main.c: 115: intCount10++;
  2997  0405  1283               	bcf	3,5	;RP0=0, select bank0
  2998  0406  0AB8               	incf	_intCount10,f
  2999  0407                     i1l626:	
  3000  0407  0872               	movf	??_Isr_Timer+2,w
  3001  0408  008A               	movwf	10
  3002  0409  0871               	movf	??_Isr_Timer+1,w
  3003  040A  0084               	movwf	4
  3004  040B  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3005  040C  0083               	movwf	3
  3006  040D  0EFE               	swapf	126,f
  3007  040E  0E7E               	swapf	126,w
  3008  040F  0009               	retfie
  3009  0410                     __end_of_Isr_Timer:	
  3010                           
  3011                           	psect	intentry
  3012  0004                     __pintentry:	
  3013                           ;incstack = 0
  3014                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3015                           
  3016  0004                     interrupt_function:	
  3017  007E                     saved_w	set	btemp
  3018  0004  00FE               	movwf	btemp
  3019  0005  0E03               	swapf	3,w
  3020  0006  00F0               	movwf	??_Isr_Timer
  3021  0007  0804               	movf	4,w
  3022  0008  00F1               	movwf	??_Isr_Timer+1
  3023  0009  080A               	movf	10,w
  3024  000A  00F2               	movwf	??_Isr_Timer+2
  3025  000B  2BF3               	ljmp	_Isr_Timer
  3026                           
  3027                           	psect	text17
  3028  0287                     __ptext17:	
  3029 ;; *************** function _ledShow *****************
  3030 ;; Defined at:
  3031 ;;		line 168 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;		None
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;		None
  3036 ;; Return value:  Size  Location     Type
  3037 ;;                  1    wreg      void 
  3038 ;; Registers used:
  3039 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3040 ;; Tracked objects:
  3041 ;;		On entry : 100/0
  3042 ;;		On exit  : 0/0
  3043 ;;		Unchanged: 0/0
  3044 ;; Data sizes:     COMMON   BANK0   BANK1
  3045 ;;      Params:         0       0       0
  3046 ;;      Locals:         0       0       0
  3047 ;;      Temps:          0       0       0
  3048 ;;      Totals:         0       0       0
  3049 ;;Total ram usage:        0 bytes
  3050 ;; Hardware stack levels used:    1
  3051 ;; This function calls:
  3052 ;;		Nothing
  3053 ;; This function is called by:
  3054 ;;		_Isr_Timer
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           
  3059                           ;psect for function _ledShow
  3060  0287                     _ledShow:	
  3061                           
  3062                           ;main.c: 170: if(++ledCntTime > 5)
  3063                           
  3064                           ;incstack = 0
  3065                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3066  0287  3006               	movlw	6
  3067  0288  0AB3               	incf	_ledCntTime,f
  3068  0289  0233               	subwf	_ledCntTime,w
  3069  028A  1C03               	skipc
  3070  028B  0008               	return
  3071  028C  300E               	movlw	14
  3072                           
  3073                           ;main.c: 171: {
  3074                           ;main.c: 172: ledCntTime = 0;
  3075  028D  01B3               	clrf	_ledCntTime
  3076                           
  3077                           ;main.c: 173: if(++ledCnt > 13)
  3078  028E  0AB5               	incf	_ledCnt,f
  3079  028F  0235               	subwf	_ledCnt,w
  3080  0290  1803               	btfsc	3,0
  3081                           
  3082                           ;main.c: 174: {
  3083                           ;main.c: 175: ledCnt = 0;
  3084  0291  01B5               	clrf	_ledCnt
  3085                           
  3086                           ;main.c: 176: }
  3087                           ;main.c: 177: PORTA &= 0xC1;
  3088  0292  30C1               	movlw	193
  3089  0293  1683               	bsf	3,5	;RP0=1, select bank1
  3090  0294  0586               	andwf	6,f	;volatile
  3091                           
  3092                           ;main.c: 178: TRISA |= 0x3E;
  3093  0295  303E               	movlw	62
  3094  0296  0485               	iorwf	5,f	;volatile
  3095                           
  3096                           ;main.c: 179: switch(ledCnt)
  3097  0297  2B08               	goto	i1l2102
  3098  0298                     i1l646:	
  3099                           ;main.c: 180: {
  3100                           ;main.c: 181: case 1:
  3101                           
  3102                           
  3103                           ;main.c: 182: if(shiweiNum & 0x01)
  3104  0298  1C51               	btfss	_shiweiNum,0
  3105  0299  0008               	return
  3106                           
  3107                           ;main.c: 183: {
  3108                           ;main.c: 184: TRISA &= 0xEF;
  3109  029A  1683               	bsf	3,5	;RP0=1, select bank1
  3110  029B  1205               	bcf	5,4	;volatile
  3111                           
  3112                           ;main.c: 185: TRISA &= 0xDF;
  3113  029C  1285               	bcf	5,5	;volatile
  3114                           
  3115                           ;main.c: 186: RA4 = 1;
  3116  029D  1606               	bsf	6,4	;volatile
  3117                           
  3118                           ;main.c: 187: RA5 = 0;
  3119  029E  1286               	bcf	6,5	;volatile
  3120  029F  0008               	return
  3121  02A0                     i1l649:	
  3122                           ;main.c: 190: case 2:
  3123                           
  3124                           
  3125                           ;main.c: 191: if(shiweiNum & 0x02)
  3126  02A0  1CD1               	btfss	_shiweiNum,1
  3127  02A1  0008               	return
  3128                           
  3129                           ;main.c: 192: {
  3130                           ;main.c: 193: TRISA &= 0xF7;
  3131  02A2  1683               	bsf	3,5	;RP0=1, select bank1
  3132  02A3  1185               	bcf	5,3	;volatile
  3133                           
  3134                           ;main.c: 194: TRISA &= 0xEF;
  3135  02A4  1205               	bcf	5,4	;volatile
  3136                           
  3137                           ;main.c: 195: RA4 = 1;
  3138  02A5  1606               	bsf	6,4	;volatile
  3139                           
  3140                           ;main.c: 196: RA3 = 0;
  3141  02A6  1186               	bcf	6,3	;volatile
  3142  02A7  0008               	return
  3143  02A8                     i1l651:	
  3144                           ;main.c: 199: case 3:
  3145                           
  3146                           
  3147                           ;main.c: 200: if(shiweiNum & 0x04)
  3148  02A8  1D51               	btfss	_shiweiNum,2
  3149  02A9  0008               	return
  3150                           
  3151                           ;main.c: 201: {
  3152                           ;main.c: 202: TRISA &= 0xF7;
  3153  02AA  1683               	bsf	3,5	;RP0=1, select bank1
  3154  02AB  1185               	bcf	5,3	;volatile
  3155                           
  3156                           ;main.c: 203: TRISA &= 0xFD;
  3157  02AC  1085               	bcf	5,1	;volatile
  3158                           
  3159                           ;main.c: 204: RA1 = 1;
  3160  02AD  1486               	bsf	6,1	;volatile
  3161                           
  3162                           ;main.c: 205: RA3 = 0;
  3163  02AE  1186               	bcf	6,3	;volatile
  3164  02AF  0008               	return
  3165  02B0                     i1l653:	
  3166                           ;main.c: 208: case 4:
  3167                           
  3168                           
  3169                           ;main.c: 209: if(shiweiNum & 0x08)
  3170  02B0  1DD1               	btfss	_shiweiNum,3
  3171  02B1  0008               	return
  3172                           
  3173                           ;main.c: 210: {
  3174                           ;main.c: 211: TRISA &= 0xFB;
  3175  02B2  1683               	bsf	3,5	;RP0=1, select bank1
  3176  02B3  1105               	bcf	5,2	;volatile
  3177                           
  3178                           ;main.c: 212: TRISA &= 0xFD;
  3179  02B4  1085               	bcf	5,1	;volatile
  3180                           
  3181                           ;main.c: 213: RA2 = 1;
  3182  02B5  1506               	bsf	6,2	;volatile
  3183                           
  3184                           ;main.c: 214: RA1 = 0;
  3185  02B6  1086               	bcf	6,1	;volatile
  3186  02B7  0008               	return
  3187  02B8                     i1l655:	
  3188                           ;main.c: 217: case 5:
  3189                           
  3190                           
  3191                           ;main.c: 218: if(shiweiNum & 0x10)
  3192  02B8  1E51               	btfss	_shiweiNum,4
  3193  02B9  0008               	return
  3194                           
  3195                           ;main.c: 219: {
  3196                           ;main.c: 220: TRISA &= 0xFD;
  3197  02BA  1683               	bsf	3,5	;RP0=1, select bank1
  3198  02BB  1085               	bcf	5,1	;volatile
  3199                           
  3200                           ;main.c: 221: TRISA &= 0xFB;
  3201  02BC  1105               	bcf	5,2	;volatile
  3202                           
  3203                           ;main.c: 222: RA1 = 1;
  3204  02BD  1486               	bsf	6,1	;volatile
  3205                           
  3206                           ;main.c: 223: RA2 = 0;
  3207  02BE  1106               	bcf	6,2	;volatile
  3208  02BF  0008               	return
  3209  02C0                     i1l657:	
  3210                           ;main.c: 226: case 6:
  3211                           
  3212                           
  3213                           ;main.c: 227: if(shiweiNum & 0x20)
  3214  02C0  1ED1               	btfss	_shiweiNum,5
  3215  02C1  0008               	return
  3216                           
  3217                           ;main.c: 228: {
  3218                           ;main.c: 229: TRISA &= 0xF7;
  3219  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  3220  02C3  1185               	bcf	5,3	;volatile
  3221                           
  3222                           ;main.c: 230: TRISA &= 0xFB;
  3223  02C4  1105               	bcf	5,2	;volatile
  3224                           
  3225                           ;main.c: 231: RA3 = 1;
  3226  02C5  1586               	bsf	6,3	;volatile
  3227                           
  3228                           ;main.c: 232: RA2 = 0;
  3229  02C6  1106               	bcf	6,2	;volatile
  3230  02C7  0008               	return
  3231  02C8                     i1l659:	
  3232                           ;main.c: 235: case 7:
  3233                           
  3234                           
  3235                           ;main.c: 236: if(shiweiNum & 0x40)
  3236  02C8  1F51               	btfss	_shiweiNum,6
  3237  02C9  0008               	return
  3238                           
  3239                           ;main.c: 237: {
  3240                           ;main.c: 238: TRISA &= 0xFB;
  3241  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  3242  02CB  1105               	bcf	5,2	;volatile
  3243                           
  3244                           ;main.c: 239: TRISA &= 0xF7;
  3245  02CC  1185               	bcf	5,3	;volatile
  3246                           
  3247                           ;main.c: 240: RA2 = 1;
  3248  02CD  1506               	bsf	6,2	;volatile
  3249                           
  3250                           ;main.c: 241: RA3 = 0;
  3251  02CE  1186               	bcf	6,3	;volatile
  3252  02CF  0008               	return
  3253  02D0                     i1l661:	
  3254                           ;main.c: 244: case 8:
  3255                           
  3256                           
  3257                           ;main.c: 245: if(geweiNum & 0x01)
  3258  02D0  1C50               	btfss	_geweiNum,0
  3259  02D1  0008               	return
  3260                           
  3261                           ;main.c: 246: {
  3262                           ;main.c: 247: TRISA &= 0xDF;
  3263  02D2  1683               	bsf	3,5	;RP0=1, select bank1
  3264  02D3  1285               	bcf	5,5	;volatile
  3265                           
  3266                           ;main.c: 248: TRISA &= 0xEF;
  3267  02D4  1205               	bcf	5,4	;volatile
  3268                           
  3269                           ;main.c: 249: RA5 = 1;
  3270  02D5  1686               	bsf	6,5	;volatile
  3271                           
  3272                           ;main.c: 250: RA4 = 0;
  3273  02D6  1206               	bcf	6,4	;volatile
  3274  02D7  0008               	return
  3275  02D8                     i1l663:	
  3276                           ;main.c: 253: case 9:
  3277                           
  3278                           
  3279                           ;main.c: 254: if(geweiNum & 0x02)
  3280  02D8  1CD0               	btfss	_geweiNum,1
  3281  02D9  0008               	return
  3282                           
  3283                           ;main.c: 255: {
  3284                           ;main.c: 256: TRISA &= 0xF7;
  3285  02DA  1683               	bsf	3,5	;RP0=1, select bank1
  3286  02DB  1185               	bcf	5,3	;volatile
  3287                           
  3288                           ;main.c: 257: TRISA &= 0xDF;
  3289  02DC  1285               	bcf	5,5	;volatile
  3290                           
  3291                           ;main.c: 258: RA3 = 1;
  3292  02DD  1586               	bsf	6,3	;volatile
  3293                           
  3294                           ;main.c: 259: RA5 = 0;
  3295  02DE  1286               	bcf	6,5	;volatile
  3296  02DF  0008               	return
  3297  02E0                     i1l665:	
  3298                           ;main.c: 262: case 10:
  3299                           
  3300                           
  3301                           ;main.c: 263: if(geweiNum & 0x04)
  3302  02E0  1D50               	btfss	_geweiNum,2
  3303  02E1  0008               	return
  3304                           
  3305                           ;main.c: 264: {
  3306                           ;main.c: 265: TRISA &= 0xDF;
  3307  02E2  1683               	bsf	3,5	;RP0=1, select bank1
  3308  02E3  1285               	bcf	5,5	;volatile
  3309                           
  3310                           ;main.c: 266: TRISA &= 0xFD;
  3311  02E4  1085               	bcf	5,1	;volatile
  3312                           
  3313                           ;main.c: 267: RA5 = 1;
  3314  02E5  1686               	bsf	6,5	;volatile
  3315                           
  3316                           ;main.c: 268: RA1 = 0;
  3317  02E6  1086               	bcf	6,1	;volatile
  3318  02E7  0008               	return
  3319  02E8                     i1l667:	
  3320                           ;main.c: 271: case 11:
  3321                           
  3322                           
  3323                           ;main.c: 272: if(geweiNum & 0x08)
  3324  02E8  1DD0               	btfss	_geweiNum,3
  3325  02E9  0008               	return
  3326                           
  3327                           ;main.c: 273: {
  3328                           ;main.c: 274: TRISA &= 0xDF;
  3329  02EA  1683               	bsf	3,5	;RP0=1, select bank1
  3330  02EB  1285               	bcf	5,5	;volatile
  3331                           
  3332                           ;main.c: 275: TRISA &= 0xFD;
  3333  02EC  1085               	bcf	5,1	;volatile
  3334                           
  3335                           ;main.c: 276: RA1 = 1;
  3336  02ED  1486               	bsf	6,1	;volatile
  3337                           
  3338                           ;main.c: 277: RA5 = 0;
  3339  02EE  1286               	bcf	6,5	;volatile
  3340  02EF  0008               	return
  3341  02F0                     i1l669:	
  3342                           ;main.c: 280: case 12:
  3343                           
  3344                           
  3345                           ;main.c: 281: if(geweiNum & 0x10)
  3346  02F0  1E50               	btfss	_geweiNum,4
  3347  02F1  0008               	return
  3348                           
  3349                           ;main.c: 282: {
  3350                           ;main.c: 283: TRISA &= 0xF7;
  3351  02F2  1683               	bsf	3,5	;RP0=1, select bank1
  3352  02F3  1185               	bcf	5,3	;volatile
  3353                           
  3354                           ;main.c: 284: TRISA &= 0xFD;
  3355  02F4  1085               	bcf	5,1	;volatile
  3356                           
  3357                           ;main.c: 285: RA3 = 1;
  3358  02F5  1586               	bsf	6,3	;volatile
  3359                           
  3360                           ;main.c: 286: RA1 = 0;
  3361  02F6  1086               	bcf	6,1	;volatile
  3362  02F7  0008               	return
  3363  02F8                     i1l671:	
  3364                           ;main.c: 289: case 13:
  3365                           
  3366                           
  3367                           ;main.c: 290: if(geweiNum & 0x20)
  3368  02F8  1ED0               	btfss	_geweiNum,5
  3369  02F9  0008               	return
  3370                           
  3371                           ;main.c: 291: {
  3372                           ;main.c: 292: TRISA &= 0xF7;
  3373  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  3374  02FB  1185               	bcf	5,3	;volatile
  3375                           
  3376                           ;main.c: 293: TRISA &= 0xEF;
  3377  02FC  1205               	bcf	5,4	;volatile
  3378                           
  3379                           ;main.c: 294: RA3 = 1;
  3380  02FD  1586               	bsf	6,3	;volatile
  3381                           
  3382                           ;main.c: 295: RA4 = 0;
  3383  02FE  1206               	bcf	6,4	;volatile
  3384  02FF  0008               	return
  3385  0300                     i1l673:	
  3386                           ;main.c: 298: case 0:
  3387                           
  3388                           
  3389                           ;main.c: 299: if(geweiNum & 0x40)
  3390  0300  1F50               	btfss	_geweiNum,6
  3391  0301  0008               	return
  3392                           
  3393                           ;main.c: 300: {
  3394                           ;main.c: 301: TRISA &= 0xDF;
  3395  0302  1683               	bsf	3,5	;RP0=1, select bank1
  3396  0303  1285               	bcf	5,5	;volatile
  3397                           
  3398                           ;main.c: 302: TRISA &= 0xF7;
  3399  0304  1185               	bcf	5,3	;volatile
  3400                           
  3401                           ;main.c: 303: RA5 = 1;
  3402  0305  1686               	bsf	6,5	;volatile
  3403                           
  3404                           ;main.c: 304: RA3 = 0;
  3405  0306  1186               	bcf	6,3	;volatile
  3406  0307  0008               	return
  3407  0308                     i1l2102:	
  3408  0308  1283               	bcf	3,5	;RP0=0, select bank0
  3409  0309  0835               	movf	_ledCnt,w
  3410                           
  3411                           ; Switch size 1, requested type "space"
  3412                           ; Number of cases is 14, Range of values is 0 to 13
  3413                           ; switch strategies available:
  3414                           ; Name         Instructions Cycles
  3415                           ; direct_byte           20     6 (fixed)
  3416                           ; simple_byte           43    22 (average)
  3417                           ; jumptable            260     6 (fixed)
  3418                           ;	Chosen strategy is direct_byte
  3419  030A  0084               	movwf	4
  3420  030B  300E               	movlw	14
  3421  030C  0204               	subwf	4,w
  3422  030D  1803               	skipnc
  3423  030E  0008               	return
  3424  030F  3004               	movlw	high i1S2942
  3425  0310  008A               	movwf	10
  3426  0311  30CB               	movlw	low i1S2942
  3427  0312  0704               	addwf	4,w
  3428  0313  0082               	movwf	2
  3429  0314  0008               	return
  3430  0315                     __end_of_ledShow:	
  3431  007E                     btemp	set	126	;btemp
  3432  007E                     wtemp0	set	126
  3433                           
  3434                           	psect	swtext1
  3435  04CB                     __pswtext1:	
  3436  04CB                     i1S2942:	
  3437  04CB  2B00               	ljmp	i1l673
  3438  04CC  2A98               	ljmp	i1l646
  3439  04CD  2AA0               	ljmp	i1l649
  3440  04CE  2AA8               	ljmp	i1l651
  3441  04CF  2AB0               	ljmp	i1l653
  3442  04D0  2AB8               	ljmp	i1l655
  3443  04D1  2AC0               	ljmp	i1l657
  3444  04D2  2AC8               	ljmp	i1l659
  3445  04D3  2AD0               	ljmp	i1l661
  3446  04D4  2AD8               	ljmp	i1l663
  3447  04D5  2AE0               	ljmp	i1l665
  3448  04D6  2AE8               	ljmp	i1l667
  3449  04D7  2AF0               	ljmp	i1l669
  3450  04D8  2AF8               	ljmp	i1l671


Data Sizes:
    Strings     0
    Constant    12
    Data        0
    BSS         34
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     17      51
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->___lbdiv
    _setBatStep->___lwdiv
    _checkOutAD->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___lbmod
    _setBatStep->___lwdiv
    _checkOutAD->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2837
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                         _checkOutAD
                            _chrgCtr
                             _keyCtr
                         _setBatStep
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0     512
                            ___lbdiv
                            ___lbmod
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     297
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     215
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _setBatStep                                           2     2      0     501
                                              3 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkOutAD                                           5     5      0     912
                                              4 COMMON     1     1      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           5     5      0     912
                                              4 COMMON     1     1      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     912
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutAD
     _ADC_Sample
   _chrgCtr
   _keyCtr
   _setBatStep
     ___lwdiv
   _workCtr
     ___lbdiv
     ___lbmod
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     11      33       4       63.8%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      3E       7        0.0%
DATA                 0      0      3E       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jul 10 15:02:10 2025

                      pc 0002                       PL2 00E3                       PL4 00F2  
                     PL6 034E                       PL8 0281                       fsr 0004  
                    PL10 01D6                      PL12 00FB                      l631 0363  
                    l704 0435                      l821 0084                      l815 0049  
                    l680 03A3                      l825 00C8                      l761 0203  
                    l758 0205                      l759 0201                      _GIE 005F  
                    _RA1 0431                      _RA2 0432                      _RA3 0433  
                    _RA4 0434                      _RA5 0435                      _RB3 0033  
                    _PR2 0011      __size_of_ADC_Sample 00CB                      fsr0 0004  
                    indf 0000          __end_of_AD_Init 04E9                     l2012 0461  
                   l2120 03A9                     l1092 0454                     l2126 03B3  
                   l2230 043C                     l2136 03C7                     l2232 043F  
                   l2610 0428                     l2602 0414                     l2700 0253  
                   l2710 026C                     l2552 0034                     l2536 0029  
                   l2570 006E                     l2562 0054                     l2546 0033  
                   l2538 002B                     l2626 03D7                     l2708 0269  
                   l2820 018E                     l2804 0176                     l2732 010A  
                   l2900 037A                     l2574 0078                     l2638 03EE  
                   l2662 01EE                     l2814 017B                     l2750 0125  
                   l2576 0080                     l2648 04A1                     l2680 0236  
                   l2672 0208                     l2760 0139                     l2728 0106  
                   l2920 0393                     l2586 00CC                     l2818 0181  
                   l2754 012E                     l2738 0118                     l2676 0220  
                   l2852 01BD                     l2844 01C1                     l2836 01A9  
                   l2828 0197                     l2686 024B                     l2846 01C3  
                   l2774 0153                     l2864 048B                     l2856 01D0  
                   l2848 01CC                     l2784 0158                     l2768 0146  
                   l1898 04E1                     l2698 0265                     l2796 0165  
                   l1998 044E                     l2798 0167                     _CHS4 04B6  
                   _IOCA 0089                     _IOCB 0009                     u2615 00D5  
                   _PIE1 000E                     u2545 0074                     u3337 0490  
                   u2555 007E                     u3347 04A6                     u3357 0025  
                   u2595 00BE                     u2675 03E0                     _PEIE 005E  
                   _RAIE 0073                     _RAIF 006B                     _RBIE 005B  
                   _RBIF 0058                     u2785 0218                     _PIR1 000D  
                   _WPDA 0087                     _WPUA 0088                     _WPUB 0008  
                   _main 0357                     btemp 007E            _startLockFlag 004F  
                   start 000C            ??_Init_System 0073                    ?_main 0070  
        __end_of___lbdiv 0463          __end_of___lbmod 042C                    _T2CON 0013  
        __end_of___lwdiv 03F3                    i1l626 0407                    i1l651 02A8  
                  i1l661 02D0                    i1l653 02B0                    i1l646 0298  
                  i1l671 02F8                    i1l663 02D8                    i1l655 02B8  
                  i1l673 0300                    i1l665 02E0                    i1l657 02C0  
                  i1l649 02A0                    i1l667 02E8                    i1l659 02C8  
                  i1l669 02F0                    _PORTA 0086                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0005                    _PWMTH 0018  
                  _PWMTL 0017          __end_of_chrgCtr 03C9          __end_of_ledShow 0315  
                  pclath 000A          __end_of_pwmInit 04CB          __end_of_pwmStop 04ED  
                  status 0003                    wtemp0 007E          __end_of_workCtr 01D6  
        ___lbdiv@divisor 0073          ___lbdiv@counter 0075          __initialization 000D  
           __end_of_main 0396                   ??_main 0077                ??_AD_Init 0073  
    __end_of_Init_System 047D                   _ADCON0 0095                   _ADCON1 0096  
                 i1S2942 04CB                   _ADRESH 0099                   _ADRESL 0098  
                 _ANSEL0 0093                   _ANSEL1 0094                   _GODONE 04A9  
                 i1l2102 0308                   i1l2448 0404                   _LDO_EN 04B2  
                 _INTCON 000B                   _OSCCON 0014                   _TMR2IE 0071  
                 _TMR2IF 0069                   _PWMD2L 009B             ??_ADC_Sample 003E  
     __size_of_Isr_Timer 001D               _Sleep_Mode 0315                ??___lbdiv 0074  
              ??___lbmod 0074                   _ledCnt 0035                ??___lwdiv 0077  
                 _keyCtr 042C                ??_chrgCtr 0073                   _result 0026  
                 _out_ad 0020                ??_ledShow 0070         __end_of_numArray 04BB  
     __end_of_ADC_Sample 00E3                   saved_w 007E                ??_pwmInit 0073  
              ??_pwmStop 0073                ??_workCtr 0077         ___lbdiv@dividend 0074  
        ___lbmod@divisor 0073  __end_of__initialization 0016          ___lbmod@counter 003F  
         __pcstackCOMMON 0070              _Init_System 0463               __end_ofPL2 00F2  
             __end_ofPL4 00FB               __end_ofPL6 0357               __end_ofPL8 0287  
       ___lbdiv@quotient 0076        __end_of_Isr_Timer 0410               _checkBatAD 0493  
             _checkOutAD 047D               __pbssBANK0 0020             _chrgFullFlag 0039  
           _chrgFullTime 0037              ?_Sleep_Mode 0070               __pmaintext 0357  
             __pintentry 0004                  ?_keyCtr 0070               _ledCntTime 0033  
                _AD_Init 04E1               _curBatStep 002F                  _PWM23DT 009D  
                _PWMD23H 009E                  _PWMCON0 0015                  _PWMCON1 0016  
                _PWMCON2 001D               __stringtab 04A9                  _IntFlag 003A  
             _intCount10 0038          ADC_Sample@adldo 0073          ADC_Sample@admax 004B  
        ADC_Sample@admin 0049          ADC_Sample@adsum 0045                  ___lbdiv 0448  
                ___lbmod 0410                  ___lwdiv 03C9          __size_of_keyCtr 001C  
                _chrgCtr 0396               _lowBatFlag 0032                  __ptext1 0100  
                __ptext2 04E9                  __ptext3 04BB                  __ptext4 0410  
                __ptext5 0448                  __ptext6 01DD                  __ptext7 03C9  
                __ptext8 042C                  __ptext9 0396                  _ledShow 0287  
             _lowBatTime 002E                  _curDuty 002B                  _count1s 003B  
                _maxDuty 002A               _setBatStep 01DD      __size_of_Sleep_Mode 0039  
                _pwmInit 04BB              ?_checkBatAD 0070                  _pwmStop 04E9  
                clrloop0 04DA                  _workCtr 0100              ?_checkOutAD 0070  
   end_of_initialization 0016         ___lbmod@dividend 003E              ___lbmod@rem 0040  
    __size_of_checkBatAD 0016             ?_Init_System 0070      __size_of_checkOutAD 0016  
         __end_of_keyCtr 0448              __end_ofPL10 01DD              __end_ofPL12 0100  
    start_initialization 000D              ?_setBatStep 0070                _Isr_Timer 03F3  
           ??_Sleep_Mode 0073        ADC_Sample@ad_temp 004D                 ??_keyCtr 0073  
               ?_AD_Init 0070              __pbssCOMMON 0077                ___latbits 0000  
          __pcstackBANK0 003E       __end_of_Sleep_Mode 034E               ?_Isr_Timer 0070  
              __pnvBANK0 004F         ___lwdiv@dividend 0075      __size_of_setBatStep 00A4  
               ?___lbdiv 0073                 ?___lbmod 0073                 ?___lwdiv 0073  
               ?_chrgCtr 0070                __pstrings 04A9                __pswtext1 04CB  
               ?_ledShow 0070                _firstTime 0052           ADC_Sample@adch 0043  
               ?_pwmInit 0070             ??_checkBatAD 0074                 ?_pwmStop 0070  
       ___lwdiv@quotient 003F                 ?_workCtr 0070             ??_checkOutAD 0074  
            ADC_Sample@i 0044              ADC_Sample@j 0042        interrupt_function 0004  
              clear_ram0 04D9                _sleepTime 0031                _shiweiNum 0051  
     __end_of_checkBatAD 04A9       __end_of_checkOutAD 0493              __stringbase 04AE  
   __size_of_Init_System 001A         __size_of_AD_Init 0008              ??_Isr_Timer 0070  
             _ADC_Sample 0018         __size_of___lbdiv 001B         __size_of___lbmod 001C  
       __size_of___lwdiv 002A       __end_of__stringtab 04AF         __size_of_chrgCtr 0033  
       __size_of_ledShow 008E                 _adresult 0028             ??_setBatStep 0041  
               _chrgFlag 007A          ___lwdiv@divisor 0073          ___lwdiv@counter 003E  
               __ptext10 047D                 __ptext11 0493                 __ptext12 0018  
               __ptext13 0315                 __ptext14 0463                 __ptext15 04E1  
               __ptext16 03F3                 __ptext17 0287         __size_of_pwmInit 0010  
       __size_of_pwmStop 0004                 _geweiNum 0050                 _count30s 0022  
       __size_of_workCtr 00D6                 _intCount 003C            __size_of_main 003F  
               _lockTime 002D                 _numArray 04AF                 _overTime 002C  
               _test_adc 003D       __end_of_setBatStep 0281                 _power_ad 0077  
            _lowShanTime 0024                 _workStep 0036             _motorPwmFlag 0030  
               intlevel1 0000              ?_ADC_Sample 0073                stringcode 04A9  
            _showBatTime 0034              _showBatStep 0079               _OPTION_REG 0001  
               stringdir 04A9                 stringtab 04A9  
