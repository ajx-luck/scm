

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 28 16:52:34 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	swtext1,local,class=CONST,delta=2
    31                           	psect	pa_nodes0,global,class=CODE,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 1.45
    35                           ; Generated 16/11/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	strings
    70  0417                     __pstrings:	
    71  0417                     stringtab:	
    72  0417                     __stringtab:	
    73  0417                     stringcode:	
    74                           ;	String table - string pointers are 1 byte each
    75                           
    76  0417                     stringdir:	
    77  0417  3004               	movlw	high stringdir
    78  0418  008A               	movwf	10
    79  0419  0804               	movf	4,w
    80  041A  0A84               	incf	4,f
    81  041B  0782               	addwf	2,f
    82  041C                     __stringbase:	
    83  041C  3400               	retlw	0
    84  041D                     __end_of__stringtab:	
    85  041D                     _numArray:	
    86  041D  343F               	retlw	63
    87  041E  3406               	retlw	6
    88  041F  345B               	retlw	91
    89  0420  344F               	retlw	79
    90  0421  3466               	retlw	102
    91  0422  346D               	retlw	109
    92  0423  347D               	retlw	125
    93  0424  3407               	retlw	7
    94  0425  347F               	retlw	127
    95  0426  346F               	retlw	111
    96  0427  3473               	retlw	115
    97  0428  3476               	retlw	118
    98  0429                     __end_of_numArray:	
    99                           
   100                           	psect	nvBANK0
   101  0049                     __pnvBANK0:	
   102  0049                     _geweiNum:	
   103  0049                     	ds	1
   104  004A                     _shiweiNum:	
   105  004A                     	ds	1
   106  004B                     _firstTime:	
   107  004B                     	ds	1
   108  001D                     _PWMCON2	set	29
   109  0018                     _PWMTH	set	24
   110  0017                     _PWMTL	set	23
   111  0016                     _PWMCON1	set	22
   112  0015                     _PWMCON0	set	21
   113  0014                     _OSCCON	set	20
   114  0013                     _T2CON	set	19
   115  0011                     _PR2	set	17
   116  000E                     _PIE1	set	14
   117  000D                     _PIR1	set	13
   118  000B                     _INTCON	set	11
   119  0009                     _IOCB	set	9
   120  0008                     _WPUB	set	8
   121  0006                     _PORTB	set	6
   122  0005                     _TRISB	set	5
   123  0001                     _OPTION_REG	set	1
   124  0071                     _TMR2IE	set	113
   125  0073                     _RAIE	set	115
   126  0069                     _TMR2IF	set	105
   127  006B                     _RAIF	set	107
   128  0058                     _RBIF	set	88
   129  005B                     _RBIE	set	91
   130  005E                     _PEIE	set	94
   131  005F                     _GIE	set	95
   132  0033                     _RB3	set	51
   133  009E                     _PWMD23H	set	158
   134  009D                     _PWM23DT	set	157
   135  009B                     _PWMD2L	set	155
   136  0099                     _ADRESH	set	153
   137  0098                     _ADRESL	set	152
   138  0096                     _ADCON1	set	150
   139  0095                     _ADCON0	set	149
   140  0094                     _ANSEL1	set	148
   141  0093                     _ANSEL0	set	147
   142  0089                     _IOCA	set	137
   143  0088                     _WPUA	set	136
   144  0087                     _WPDA	set	135
   145  0086                     _PORTA	set	134
   146  0085                     _TRISA	set	133
   147  04B2                     _LDO_EN	set	1202
   148  04B6                     _CHS4	set	1206
   149  04A9                     _GODONE	set	1193
   150  0431                     _RA1	set	1073
   151  0432                     _RA2	set	1074
   152  0433                     _RA3	set	1075
   153  0434                     _RA4	set	1076
   154  0435                     _RA5	set	1077
   155                           
   156                           	psect	cinit
   157  000D                     start_initialization:	
   158                           ; #config settings
   159                           
   160  000D                     __initialization:	
   161                           
   162                           ; Clear objects allocated to COMMON
   163  000D  3077               	movlw	low __pbssCOMMON
   164  000E  0084               	movwf	4
   165  000F  307B               	movlw	low (__pbssCOMMON+4)
   166  0010  2453               	fcall	clear_ram0
   167  0011  3020               	movlw	low __pbssBANK0
   168                           
   169                           ; Clear objects allocated to BANK0
   170  0012  1383               	bcf	3,7	;select IRP bank0
   171  0013  0084               	movwf	4
   172  0014  3038               	movlw	low (__pbssBANK0+24)
   173  0015  2453               	fcall	clear_ram0
   174  0016                     end_of_initialization:	
   175                           ;End of C runtime variable initialization code
   176                           
   177  0016                     __end_of__initialization:	
   178  0016  0183               	clrf	3
   179  0017  2B08               	ljmp	_main	;jump to C main() function
   180                           
   181                           	psect	bssCOMMON
   182  0077                     __pbssCOMMON:	
   183  0077                     _power_ad:	
   184  0077                     	ds	2
   185  0079                     _showBatStep:	
   186  0079                     	ds	1
   187  007A                     _chrgFlag:	
   188  007A                     	ds	1
   189                           
   190                           	psect	bssBANK0
   191  0020                     __pbssBANK0:	
   192  0020                     _count30s:	
   193  0020                     	ds	2
   194  0022                     _lowShanTime:	
   195  0022                     	ds	2
   196  0024                     _result:	
   197  0024                     	ds	2
   198  0026                     _adresult:	
   199  0026                     	ds	2
   200  0028                     _lowBatTime:	
   201  0028                     	ds	1
   202  0029                     _curBatStep:	
   203  0029                     	ds	1
   204  002A                     _motorPwmFlag:	
   205  002A                     	ds	1
   206  002B                     _sleepTime:	
   207  002B                     	ds	1
   208  002C                     _lowBatFlag:	
   209  002C                     	ds	1
   210  002D                     _ledCntTime:	
   211  002D                     	ds	1
   212  002E                     _showBatTime:	
   213  002E                     	ds	1
   214  002F                     _ledCnt:	
   215  002F                     	ds	1
   216  0030                     _workStep:	
   217  0030                     	ds	1
   218  0031                     _chrgFullTime:	
   219  0031                     	ds	1
   220  0032                     _intCount10:	
   221  0032                     	ds	1
   222  0033                     _chrgFullFlag:	
   223  0033                     	ds	1
   224  0034                     _IntFlag:	
   225  0034                     	ds	1
   226  0035                     _count1s:	
   227  0035                     	ds	1
   228  0036                     _intCount:	
   229  0036                     	ds	1
   230  0037                     _test_adc:	
   231  0037                     	ds	1
   232                           
   233                           	psect	clrtext
   234  0453                     clear_ram0:	
   235                           ;	Called with FSR containing the base address, and
   236                           ;	W with the last address+1
   237                           
   238  0453  0064               	clrwdt	;clear the watchdog before getting into this loop
   239  0454                     clrloop0:	
   240  0454  0180               	clrf	0	;clear RAM location pointed to by FSR
   241  0455  0A84               	incf	4,f	;increment pointer
   242  0456  0604               	xorwf	4,w	;XOR with final address
   243  0457  1903               	btfsc	3,2	;have we reached the end yet?
   244  0458  3400               	retlw	0	;all done for this memory range, return
   245  0459  0604               	xorwf	4,w	;XOR again to restore value
   246  045A  2C54               	goto	clrloop0	;do the next byte
   247                           
   248                           	psect	cstackCOMMON
   249  0070                     __pcstackCOMMON:	
   250  0070                     ?_ledShow:	
   251  0070                     ??_ledShow:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     ?_Init_System:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     ?_AD_Init:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ?_chrgCtr:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0070                     ?_checkBatAD:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ?_setBatStep:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ?_keyCtr:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     ?_workCtr:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     ?_Sleep_Mode:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0070                     ?_pwmStop:	
   279                           ; 1 bytes @ 0x0
   280                           
   281  0070                     ?_pwmInit:	
   282                           ; 1 bytes @ 0x0
   283                           
   284  0070                     ?_Isr_Timer:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     ??_Isr_Timer:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0070                     ?_main:	
   291                           ; 1 bytes @ 0x0
   292                           
   293                           
   294                           ; 1 bytes @ 0x0
   295  0070                     	ds	3
   296  0073                     ??_Init_System:	
   297  0073                     ??_AD_Init:	
   298                           ; 1 bytes @ 0x3
   299                           
   300  0073                     ??_chrgCtr:	
   301                           ; 1 bytes @ 0x3
   302                           
   303  0073                     ??_keyCtr:	
   304                           ; 1 bytes @ 0x3
   305                           
   306  0073                     ??_Sleep_Mode:	
   307                           ; 1 bytes @ 0x3
   308                           
   309  0073                     ??_pwmStop:	
   310                           ; 1 bytes @ 0x3
   311                           
   312  0073                     ??_pwmInit:	
   313                           ; 1 bytes @ 0x3
   314                           
   315  0073                     ?_ADC_Sample:	
   316                           ; 1 bytes @ 0x3
   317                           
   318  0073                     ?___lbdiv:	
   319                           ; 1 bytes @ 0x3
   320                           
   321  0073                     ?___lbmod:	
   322                           ; 1 bytes @ 0x3
   323                           
   324  0073                     ?___lwdiv:	
   325                           ; 1 bytes @ 0x3
   326                           
   327  0073                     ADC_Sample@adldo:	
   328                           ; 2 bytes @ 0x3
   329                           
   330  0073                     ___lbdiv@divisor:	
   331                           ; 1 bytes @ 0x3
   332                           
   333  0073                     ___lbmod@divisor:	
   334                           ; 1 bytes @ 0x3
   335                           
   336  0073                     ___lwdiv@divisor:	
   337                           ; 1 bytes @ 0x3
   338                           
   339                           
   340                           ; 2 bytes @ 0x3
   341  0073                     	ds	1
   342  0074                     ??_checkBatAD:	
   343  0074                     ??___lbdiv:	
   344                           ; 1 bytes @ 0x4
   345                           
   346  0074                     ??___lbmod:	
   347                           ; 1 bytes @ 0x4
   348                           
   349  0074                     ___lbdiv@dividend:	
   350                           ; 1 bytes @ 0x4
   351                           
   352                           
   353                           ; 1 bytes @ 0x4
   354  0074                     	ds	1
   355  0075                     ___lbdiv@counter:	
   356  0075                     ___lwdiv@dividend:	
   357                           ; 1 bytes @ 0x5
   358                           
   359                           
   360                           ; 2 bytes @ 0x5
   361  0075                     	ds	1
   362  0076                     ___lbdiv@quotient:	
   363                           
   364                           ; 1 bytes @ 0x6
   365  0076                     	ds	1
   366  0077                     ??_setBatStep:	
   367  0077                     ??_workCtr:	
   368                           ; 1 bytes @ 0x7
   369                           
   370  0077                     ??_main:	
   371                           ; 1 bytes @ 0x7
   372                           
   373  0077                     ??___lwdiv:	
   374                           ; 1 bytes @ 0x7
   375                           
   376                           
   377                           	psect	cstackBANK0
   378  0038                     __pcstackBANK0:	
   379                           ; 1 bytes @ 0x7
   380                           
   381  0038                     ??_ADC_Sample:	
   382  0038                     ___lbmod@dividend:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0038                     ___lwdiv@counter:	
   386                           ; 1 bytes @ 0x0
   387                           
   388                           
   389                           ; 1 bytes @ 0x0
   390  0038                     	ds	1
   391  0039                     ___lbmod@counter:	
   392  0039                     ___lwdiv@quotient:	
   393                           ; 1 bytes @ 0x1
   394                           
   395                           
   396                           ; 2 bytes @ 0x1
   397  0039                     	ds	1
   398  003A                     ___lbmod@rem:	
   399                           
   400                           ; 1 bytes @ 0x2
   401  003A                     	ds	2
   402  003C                     ADC_Sample@j:	
   403                           
   404                           ; 1 bytes @ 0x4
   405  003C                     	ds	1
   406  003D                     ADC_Sample@adch:	
   407                           
   408                           ; 1 bytes @ 0x5
   409  003D                     	ds	1
   410  003E                     ADC_Sample@i:	
   411                           
   412                           ; 1 bytes @ 0x6
   413  003E                     	ds	1
   414  003F                     ADC_Sample@adsum:	
   415                           
   416                           ; 4 bytes @ 0x7
   417  003F                     	ds	4
   418  0043                     ADC_Sample@admin:	
   419                           
   420                           ; 2 bytes @ 0xB
   421  0043                     	ds	2
   422  0045                     ADC_Sample@admax:	
   423                           
   424                           ; 2 bytes @ 0xD
   425  0045                     	ds	2
   426  0047                     ADC_Sample@ad_temp:	
   427                           
   428                           ; 2 bytes @ 0xF
   429  0047                     	ds	2
   430                           
   431                           	psect	maintext
   432  0308                     __pmaintext:	
   433 ;;
   434 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   435 ;;
   436 ;; *************** function _main *****************
   437 ;; Defined at:
   438 ;;		line 117 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
   439 ;; Parameters:    Size  Location     Type
   440 ;;		None
   441 ;; Auto vars:     Size  Location     Type
   442 ;;		None
   443 ;; Return value:  Size  Location     Type
   444 ;;                  1    wreg      void 
   445 ;; Registers used:
   446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   447 ;; Tracked objects:
   448 ;;		On entry : B00/0
   449 ;;		On exit  : 100/0
   450 ;;		Unchanged: 0/0
   451 ;; Data sizes:     COMMON   BANK0   BANK1
   452 ;;      Params:         0       0       0
   453 ;;      Locals:         0       0       0
   454 ;;      Temps:          0       0       0
   455 ;;      Totals:         0       0       0
   456 ;;Total ram usage:        0 bytes
   457 ;; Hardware stack levels required when called:    4
   458 ;; This function calls:
   459 ;;		_AD_Init
   460 ;;		_Init_System
   461 ;;		_Sleep_Mode
   462 ;;		_checkBatAD
   463 ;;		_chrgCtr
   464 ;;		_keyCtr
   465 ;;		_setBatStep
   466 ;;		_workCtr
   467 ;; This function is called by:
   468 ;;		Startup code after reset
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472                           
   473                           ;psect for function _main
   474  0308                     _main:	
   475                           
   476                           ;main.c: 119: Init_System();
   477                           
   478                           ;incstack = 0
   479                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   480  0308  23E7               	fcall	_Init_System
   481                           
   482                           ;main.c: 120: AD_Init();
   483  0309  245B               	fcall	_AD_Init
   484                           
   485                           ;main.c: 122: baiweiNum = 1;
   486  030A  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   487  030B  0084               	movwf	4
   488  030C  2417               	fcall	stringdir
   489  030D  1283               	bcf	3,5	;RP0=0, select bank0
   490  030E  00C9               	movwf	_geweiNum
   491  030F  00CA               	movwf	_shiweiNum
   492                           
   493                           ;main.c: 123: firstTime = 250;
   494  0310  30FA               	movlw	250
   495  0311  00CB               	movwf	_firstTime
   496  0312                     l617:	
   497                           ;main.c: 124: while (1)
   498                           
   499  0312  0064               	clrwdt	;# 
   500                           
   501                           ;main.c: 127: if(intCount10 > 10)
   502  0313  300B               	movlw	11
   503  0314  1283               	bcf	3,5	;RP0=0, select bank0
   504  0315  0232               	subwf	_intCount10,w
   505  0316  1803               	btfsc	3,0
   506                           
   507                           ;main.c: 128: {
   508                           ;main.c: 129: intCount10 = 0;
   509  0317  01B2               	clrf	_intCount10
   510                           
   511                           ;main.c: 130: }
   512                           ;main.c: 131: if(!IntFlag)
   513  0318  0834               	movf	_IntFlag,w
   514  0319  1903               	btfsc	3,2
   515  031A  2B12               	goto	l617
   516                           
   517                           ;main.c: 133: IntFlag = 0;
   518  031B  01B4               	clrf	_IntFlag
   519                           
   520                           ;main.c: 134: chrgCtr();
   521  031C  2369               	fcall	_chrgCtr
   522                           
   523                           ;main.c: 135: checkBatAD();
   524  031D  2401               	fcall	_checkBatAD
   525                           
   526                           ;main.c: 136: setBatStep();
   527  031E  21A3               	fcall	_setBatStep
   528                           
   529                           ;main.c: 137: if(lowBatFlag == 0 && firstTime == 0)
   530  031F  082C               	movf	_lowBatFlag,w
   531  0320  1D03               	btfss	3,2
   532  0321  2B26               	goto	l2652
   533  0322  084B               	movf	_firstTime,w
   534  0323  1D03               	btfss	3,2
   535  0324  2B26               	goto	l2652
   536                           
   537                           ;main.c: 138: {
   538                           ;main.c: 139: keyCtr();
   539  0325  2447               	fcall	_keyCtr
   540  0326                     l2652:	
   541                           
   542                           ;main.c: 140: }
   543                           ;main.c: 141: workCtr();
   544  0326  2100               	fcall	_workCtr
   545                           
   546                           ;main.c: 142: if(chrgFlag == 0 && workStep == 0 && firstTime == 0 && showBatTime == 0)
   547  0327  087A               	movf	_chrgFlag,w
   548  0328  1D03               	btfss	3,2
   549  0329  2B3D               	goto	l2670
   550  032A  0830               	movf	_workStep,w
   551  032B  1D03               	btfss	3,2
   552  032C  2B3D               	goto	l2670
   553  032D  084B               	movf	_firstTime,w
   554  032E  1D03               	btfss	3,2
   555  032F  2B3D               	goto	l2670
   556                           
   557                           ;main.c: 143: {
   558                           ;main.c: 144: baiweiNum = 0;
   559  0330  082E               	movf	_showBatTime,w
   560  0331  1D03               	btfss	3,2
   561  0332  2B3D               	goto	l2670
   562  0333  30C8               	movlw	200
   563                           
   564                           ;main.c: 145: shiweiNum = geweiNum = 0;
   565  0334  01C9               	clrf	_geweiNum
   566  0335  01CA               	clrf	_shiweiNum
   567                           
   568                           ;main.c: 146: if(++sleepTime >= 200)
   569  0336  0AAB               	incf	_sleepTime,f
   570  0337  022B               	subwf	_sleepTime,w
   571  0338  1C03               	skipc
   572  0339  2B12               	goto	l617
   573                           
   574                           ;main.c: 147: {
   575                           ;main.c: 148: sleepTime = 0;
   576  033A  01AB               	clrf	_sleepTime
   577                           
   578                           ;main.c: 149: Sleep_Mode();
   579  033B  22C6               	fcall	_Sleep_Mode
   580  033C  2B12               	goto	l617
   581  033D                     l2670:	
   582                           
   583                           ;main.c: 152: else
   584                           ;main.c: 153: {
   585                           ;main.c: 154: sleepTime = 0;
   586  033D  01AB               	clrf	_sleepTime
   587  033E  2B12               	goto	l617
   588  033F                     __end_of_main:	
   589                           
   590                           	psect	text1
   591  0100                     __ptext1:	
   592 ;; *************** function _workCtr *****************
   593 ;; Defined at:
   594 ;;		line 409 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
   595 ;; Parameters:    Size  Location     Type
   596 ;;		None
   597 ;; Auto vars:     Size  Location     Type
   598 ;;		None
   599 ;; Return value:  Size  Location     Type
   600 ;;                  1    wreg      void 
   601 ;; Registers used:
   602 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   603 ;; Tracked objects:
   604 ;;		On entry : 100/0
   605 ;;		On exit  : 100/0
   606 ;;		Unchanged: 0/0
   607 ;; Data sizes:     COMMON   BANK0   BANK1
   608 ;;      Params:         0       0       0
   609 ;;      Locals:         0       0       0
   610 ;;      Temps:          0       0       0
   611 ;;      Totals:         0       0       0
   612 ;;Total ram usage:        0 bytes
   613 ;; Hardware stack levels used:    1
   614 ;; Hardware stack levels required when called:    3
   615 ;; This function calls:
   616 ;;		___lbdiv
   617 ;;		___lbmod
   618 ;;		_pwmInit
   619 ;;		_pwmStop
   620 ;; This function is called by:
   621 ;;		_main
   622 ;; This function uses a non-reentrant model
   623 ;;
   624                           
   625                           
   626                           ;psect for function _workCtr
   627  0100                     _workCtr:	
   628                           
   629                           ;main.c: 418: if(lowShanTime > 0)
   630                           
   631                           ;incstack = 0
   632                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   633  0100  0822               	movf	_lowShanTime,w
   634  0101  0423               	iorwf	_lowShanTime+1,w
   635  0102  1903               	btfsc	3,2
   636  0103  290E               	goto	l2540
   637                           
   638                           ;main.c: 419: {
   639                           ;main.c: 420: if(--lowShanTime == 0)
   640  0104  3001               	movlw	1
   641  0105  02A2               	subwf	_lowShanTime,f
   642  0106  3000               	movlw	0
   643  0107  1C03               	skipc
   644  0108  03A3               	decf	_lowShanTime+1,f
   645  0109  02A3               	subwf	_lowShanTime+1,f
   646  010A  0822               	movf	_lowShanTime,w
   647  010B  0423               	iorwf	_lowShanTime+1,w
   648  010C  1903               	btfsc	3,2
   649                           
   650                           ;main.c: 421: {
   651                           ;main.c: 422: workStep = 0;
   652  010D  01B0               	clrf	_workStep
   653  010E                     l2540:	
   654                           
   655                           ;main.c: 423: }
   656                           ;main.c: 424: }
   657                           ;main.c: 425: if(showBatTime > 0)
   658  010E  082E               	movf	_showBatTime,w
   659  010F  1D03               	btfss	3,2
   660                           
   661                           ;main.c: 426: {
   662                           ;main.c: 427: showBatTime--;
   663  0110  03AE               	decf	_showBatTime,f
   664                           
   665                           ;main.c: 428: }
   666                           ;main.c: 429: if(firstTime > 0)
   667  0111  084B               	movf	_firstTime,w
   668  0112  1903               	btfsc	3,2
   669  0113  2924               	goto	l2556
   670                           
   671                           ;main.c: 430: {
   672                           ;main.c: 431: firstTime--;
   673  0114  03CB               	decf	_firstTime,f
   674                           
   675                           ;main.c: 432: if(showBatStep < curBatStep)
   676  0115  0829               	movf	_curBatStep,w
   677  0116  0279               	subwf	_showBatStep,w
   678  0117  1803               	skipnc
   679  0118  291B               	goto	l2552
   680                           
   681                           ;main.c: 433: {
   682                           ;main.c: 434: showBatStep = curBatStep;
   683  0119  0829               	movf	_curBatStep,w
   684  011A  00F9               	movwf	_showBatStep
   685  011B                     l2552:	
   686                           
   687                           ;main.c: 435: }
   688                           ;main.c: 436: shiweiNum = numArray[8];
   689  011B  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   690  011C  0084               	movwf	4
   691  011D  2417               	fcall	stringdir
   692  011E  00CA               	movwf	_shiweiNum
   693                           
   694                           ;main.c: 437: geweiNum = numArray[8];
   695  011F  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   696  0120  0084               	movwf	4
   697  0121  2417               	fcall	stringdir
   698  0122  00C9               	movwf	_geweiNum
   699                           
   700                           ;main.c: 438: }
   701  0123  295F               	goto	l2594
   702  0124                     l2556:	
   703                           
   704                           ;main.c: 439: else if(workStep == 0 || (lowShanTime > 0 && count1s < 50))
   705  0124  0830               	movf	_workStep,w
   706  0125  1903               	btfsc	3,2
   707  0126  292F               	goto	l2562
   708  0127  0822               	movf	_lowShanTime,w
   709  0128  0423               	iorwf	_lowShanTime+1,w
   710  0129  1903               	btfsc	3,2
   711  012A  2933               	goto	l2566
   712  012B  3032               	movlw	50
   713  012C  0235               	subwf	_count1s,w
   714  012D  1803               	skipnc
   715  012E  2933               	goto	l2566
   716  012F                     l2562:	
   717                           
   718                           ;main.c: 440: {
   719                           ;main.c: 441: shiweiNum = 0;
   720  012F  01CA               	clrf	_shiweiNum
   721                           
   722                           ;main.c: 442: geweiNum = 0;
   723  0130  01C9               	clrf	_geweiNum
   724                           
   725                           ;main.c: 444: count900s = 0;
   726  0131  2463               	fcall	_pwmStop
   727                           
   728                           ;main.c: 445: }
   729  0132  295F               	goto	l2594
   730  0133                     l2566:	
   731                           
   732                           ;main.c: 446: else if(workStep == 1)
   733  0133  0B30               	decfsz	_workStep,w
   734  0134  2948               	goto	l2580
   735                           
   736                           ;main.c: 447: {
   737                           ;main.c: 448: if(chrgFlag == 0)
   738  0135  087A               	movf	_chrgFlag,w
   739  0136  1D03               	btfss	3,2
   740  0137  2940               	goto	l2572
   741                           
   742                           ;main.c: 449: {
   743                           ;main.c: 450: shiweiNum = numArray[10];
   744  0138  300B               	movlw	low (((_numArray+10)-__stringbase)| (0+32768))
   745  0139  0084               	movwf	4
   746  013A  2417               	fcall	stringdir
   747  013B  00CA               	movwf	_shiweiNum
   748                           
   749                           ;main.c: 451: geweiNum = numArray[1];
   750  013C  3002               	movlw	low (((_numArray+1)-__stringbase)| (0+32768))
   751  013D  0084               	movwf	4
   752  013E  2417               	fcall	stringdir
   753  013F  00C9               	movwf	_geweiNum
   754  0140                     l2572:	
   755                           
   756                           ;main.c: 452: }
   757                           ;main.c: 453: if(motorPwmFlag == 0)
   758  0140  082A               	movf	_motorPwmFlag,w
   759  0141  1D03               	btfss	3,2
   760  0142  2944               	goto	l2576
   761                           
   762                           ;main.c: 454: {
   763                           ;main.c: 455: pwmInit();
   764  0143  2429               	fcall	_pwmInit
   765  0144                     l2576:	
   766                           
   767                           ;main.c: 456: }
   768                           ;main.c: 457: PWMD23H = 0X00;
   769  0144  1683               	bsf	3,5	;RP0=1, select bank1
   770  0145  019E               	clrf	30	;volatile
   771                           
   772                           ;main.c: 458: PWMD2L = 60;
   773  0146  303C               	movlw	60
   774  0147  295E               	goto	L1
   775  0148                     l2580:	
   776                           ;main.c: 459: }
   777                           
   778                           
   779                           ;main.c: 460: else if(workStep == 2)
   780  0148  3002               	movlw	2
   781  0149  0630               	xorwf	_workStep,w
   782  014A  1D03               	btfss	3,2
   783  014B  295F               	goto	l2594
   784                           
   785                           ;main.c: 461: {
   786                           ;main.c: 462: if(chrgFlag == 0)
   787  014C  087A               	movf	_chrgFlag,w
   788  014D  1D03               	btfss	3,2
   789  014E  2957               	goto	l2586
   790                           
   791                           ;main.c: 463: {
   792                           ;main.c: 464: shiweiNum = numArray[10];
   793  014F  300B               	movlw	low (((_numArray+10)-__stringbase)| (0+32768))
   794  0150  0084               	movwf	4
   795  0151  2417               	fcall	stringdir
   796  0152  00CA               	movwf	_shiweiNum
   797                           
   798                           ;main.c: 465: geweiNum = numArray[2];
   799  0153  3003               	movlw	low (((_numArray+2)-__stringbase)| (0+32768))
   800  0154  0084               	movwf	4
   801  0155  2417               	fcall	stringdir
   802  0156  00C9               	movwf	_geweiNum
   803  0157                     l2586:	
   804                           
   805                           ;main.c: 466: }
   806                           ;main.c: 467: if(motorPwmFlag == 0)
   807  0157  082A               	movf	_motorPwmFlag,w
   808  0158  1D03               	btfss	3,2
   809  0159  295B               	goto	l2590
   810                           
   811                           ;main.c: 468: {
   812                           ;main.c: 469: pwmInit();
   813  015A  2429               	fcall	_pwmInit
   814  015B                     l2590:	
   815                           
   816                           ;main.c: 470: }
   817                           ;main.c: 471: PWMD23H = 0X00;
   818  015B  1683               	bsf	3,5	;RP0=1, select bank1
   819  015C  019E               	clrf	30	;volatile
   820                           
   821                           ;main.c: 472: PWMD2L = 99;
   822  015D  3063               	movlw	99
   823  015E                     L1:	
   824  015E  009B               	movwf	27	;volatile
   825  015F                     l2594:	
   826                           
   827                           ;main.c: 474: }
   828                           ;main.c: 475: if(chrgFlag || showBatTime > 0)
   829  015F  087A               	movf	_chrgFlag,w
   830  0160  1D03               	btfss	3,2
   831  0161  2966               	goto	l2598
   832  0162  1283               	bcf	3,5	;RP0=0, select bank0
   833  0163  082E               	movf	_showBatTime,w
   834  0164  1903               	btfsc	3,2
   835  0165  0008               	return
   836  0166                     l2598:	
   837                           
   838                           ;main.c: 476: {
   839                           ;main.c: 477: if(showBatStep >=99)
   840  0166  3063               	movlw	99
   841  0167  0279               	subwf	_showBatStep,w
   842  0168  1C03               	skipc
   843  0169  2974               	goto	l2602
   844                           
   845                           ;main.c: 478: {
   846                           ;main.c: 479: shiweiNum = numArray[9];
   847  016A  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
   848  016B  0084               	movwf	4
   849  016C  2417               	fcall	stringdir
   850  016D  1283               	bcf	3,5	;RP0=0, select bank0
   851  016E  00CA               	movwf	_shiweiNum
   852                           
   853                           ;main.c: 480: geweiNum = numArray[9];
   854  016F  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
   855  0170  0084               	movwf	4
   856  0171  2417               	fcall	stringdir
   857  0172  00C9               	movwf	_geweiNum
   858                           
   859                           ;main.c: 481: }
   860  0173  0008               	return
   861  0174                     l2602:	
   862                           
   863                           ;main.c: 483: {
   864                           ;main.c: 484: baiweiNum = 0;
   865  0174  300A               	movlw	10
   866  0175  0279               	subwf	_showBatStep,w
   867  0176  1C03               	skipc
   868  0177  2998               	goto	l2614
   869                           
   870                           ;main.c: 485: shiweiNum = numArray[showBatStep/10];
   871  0178  300A               	movlw	10
   872  0179  00F3               	movwf	___lbdiv@divisor
   873  017A  0879               	movf	_showBatStep,w
   874  017B  23CC               	fcall	___lbdiv
   875  017C  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
   876  017D  0084               	movwf	4
   877  017E  2417               	fcall	stringdir
   878  017F  1283               	bcf	3,5	;RP0=0, select bank0
   879  0180  00CA               	movwf	_shiweiNum
   880                           
   881                           ;main.c: 486: if(chrgFlag && count1s < 50)
   882  0181  087A               	movf	_chrgFlag,w
   883  0182  1903               	btfsc	3,2
   884  0183  298F               	goto	l2612
   885  0184  3032               	movlw	50
   886  0185  0235               	subwf	_count1s,w
   887  0186  1C03               	btfss	3,0
   888  0187  298D               	goto	l2610
   889  0188  298F               	goto	l2612
   890  0189                     l2618:	
   891  0189  3032               	movlw	50
   892  018A  0235               	subwf	_count1s,w
   893  018B  1803               	skipnc
   894  018C  299D               	goto	l2622
   895  018D                     l2610:	
   896                           
   897                           ;main.c: 487: {
   898                           ;main.c: 488: geweiNum = 0;
   899  018D  01C9               	clrf	_geweiNum
   900                           
   901                           ;main.c: 489: }
   902  018E  0008               	return
   903  018F                     l2612:	
   904                           
   905                           ;main.c: 490: else
   906                           ;main.c: 491: {
   907                           ;main.c: 492: geweiNum = numArray[showBatStep%10];
   908  018F  300A               	movlw	10
   909  0190  00F3               	movwf	___lbmod@divisor
   910  0191  0879               	movf	_showBatStep,w
   911  0192  23B0               	fcall	___lbmod
   912  0193  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
   913  0194  0084               	movwf	4
   914  0195  2417               	fcall	stringdir
   915  0196  00C9               	movwf	_geweiNum
   916  0197  0008               	return
   917  0198                     l2614:	
   918                           
   919                           ;main.c: 498: shiweiNum = 0;
   920  0198  1283               	bcf	3,5	;RP0=0, select bank0
   921  0199  01CA               	clrf	_shiweiNum
   922                           
   923                           ;main.c: 499: if(chrgFlag && count1s < 50)
   924  019A  087A               	movf	_chrgFlag,w
   925  019B  1D03               	btfss	3,2
   926  019C  2989               	goto	l2618
   927  019D                     l2622:	
   928                           
   929                           ;main.c: 503: else
   930                           ;main.c: 504: {
   931                           ;main.c: 505: geweiNum = numArray[showBatStep];
   932  019D  0879               	movf	_showBatStep,w
   933  019E  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
   934  019F  0084               	movwf	4
   935  01A0  2417               	fcall	stringdir
   936  01A1  00C9               	movwf	_geweiNum
   937  01A2  0008               	return
   938  01A3                     __end_of_workCtr:	
   939                           
   940                           	psect	text2
   941  0463                     __ptext2:	
   942 ;; *************** function _pwmStop *****************
   943 ;; Defined at:
   944 ;;		line 733 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;		None
   947 ;; Auto vars:     Size  Location     Type
   948 ;;		None
   949 ;; Return value:  Size  Location     Type
   950 ;;                  1    wreg      void 
   951 ;; Registers used:
   952 ;;		status,2
   953 ;; Tracked objects:
   954 ;;		On entry : 100/0
   955 ;;		On exit  : 100/0
   956 ;;		Unchanged: 0/0
   957 ;; Data sizes:     COMMON   BANK0   BANK1
   958 ;;      Params:         0       0       0
   959 ;;      Locals:         0       0       0
   960 ;;      Temps:          0       0       0
   961 ;;      Totals:         0       0       0
   962 ;;Total ram usage:        0 bytes
   963 ;; Hardware stack levels used:    1
   964 ;; Hardware stack levels required when called:    2
   965 ;; This function calls:
   966 ;;		Nothing
   967 ;; This function is called by:
   968 ;;		_workCtr
   969 ;; This function uses a non-reentrant model
   970 ;;
   971                           
   972                           
   973                           ;psect for function _pwmStop
   974  0463                     _pwmStop:	
   975                           
   976                           ;main.c: 735: PWMCON0 &= 0XFB;
   977                           
   978                           ;incstack = 0
   979                           ; Regs used in _pwmStop: [status,2]
   980  0463  1115               	bcf	21,2	;volatile
   981                           
   982                           ;main.c: 736: RB3 = 0;
   983  0464  1186               	bcf	6,3	;volatile
   984                           
   985                           ;main.c: 737: motorPwmFlag = 0;
   986  0465  01AA               	clrf	_motorPwmFlag
   987  0466  0008               	return
   988  0467                     __end_of_pwmStop:	
   989                           
   990                           	psect	text3
   991  0429                     __ptext3:	
   992 ;; *************** function _pwmInit *****************
   993 ;; Defined at:
   994 ;;		line 717 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
   995 ;; Parameters:    Size  Location     Type
   996 ;;		None
   997 ;; Auto vars:     Size  Location     Type
   998 ;;		None
   999 ;; Return value:  Size  Location     Type
  1000 ;;                  1    wreg      void 
  1001 ;; Registers used:
  1002 ;;		wreg, status,2
  1003 ;; Tracked objects:
  1004 ;;		On entry : 100/0
  1005 ;;		On exit  : 100/0
  1006 ;;		Unchanged: 0/0
  1007 ;; Data sizes:     COMMON   BANK0   BANK1
  1008 ;;      Params:         0       0       0
  1009 ;;      Locals:         0       0       0
  1010 ;;      Temps:          0       0       0
  1011 ;;      Totals:         0       0       0
  1012 ;;Total ram usage:        0 bytes
  1013 ;; Hardware stack levels used:    1
  1014 ;; Hardware stack levels required when called:    2
  1015 ;; This function calls:
  1016 ;;		Nothing
  1017 ;; This function is called by:
  1018 ;;		_workCtr
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022                           
  1023                           ;psect for function _pwmInit
  1024  0429                     _pwmInit:	
  1025                           
  1026                           ;main.c: 719: PWMCON1 = 0B00000000;
  1027                           
  1028                           ;incstack = 0
  1029                           ; Regs used in _pwmInit: [wreg+status,2]
  1030  0429  0196               	clrf	22	;volatile
  1031                           
  1032                           ;main.c: 720: PWMTH = 0X00;
  1033  042A  0198               	clrf	24	;volatile
  1034                           
  1035                           ;main.c: 721: PWMTL = 100;
  1036  042B  3064               	movlw	100
  1037  042C  0097               	movwf	23	;volatile
  1038                           
  1039                           ;main.c: 724: PWMD23H = 0;
  1040  042D  1683               	bsf	3,5	;RP0=1, select bank1
  1041  042E  019E               	clrf	30	;volatile
  1042                           
  1043                           ;main.c: 725: PWMD2L = 60;
  1044  042F  303C               	movlw	60
  1045  0430  009B               	movwf	27	;volatile
  1046                           
  1047                           ;main.c: 726: PWM23DT = 0X00;
  1048  0431  019D               	clrf	29	;volatile
  1049                           
  1050                           ;main.c: 728: PWMCON0 = 0X64;
  1051  0432  3064               	movlw	100
  1052  0433  1283               	bcf	3,5	;RP0=0, select bank0
  1053  0434  0095               	movwf	21	;volatile
  1054                           
  1055                           ;main.c: 729: PWMCON2 =0X00;
  1056  0435  019D               	clrf	29	;volatile
  1057                           
  1058                           ;main.c: 730: motorPwmFlag = 1;
  1059  0436  01AA               	clrf	_motorPwmFlag
  1060  0437  0AAA               	incf	_motorPwmFlag,f
  1061  0438  0008               	return
  1062  0439                     __end_of_pwmInit:	
  1063                           
  1064                           	psect	text4
  1065  03B0                     __ptext4:	
  1066 ;; *************** function ___lbmod *****************
  1067 ;; Defined at:
  1068 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1069 ;; Parameters:    Size  Location     Type
  1070 ;;  dividend        1    wreg     unsigned char 
  1071 ;;  divisor         1    3[COMMON] unsigned char 
  1072 ;; Auto vars:     Size  Location     Type
  1073 ;;  dividend        1    0[BANK0 ] unsigned char 
  1074 ;;  rem             1    2[BANK0 ] unsigned char 
  1075 ;;  counter         1    1[BANK0 ] unsigned char 
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  1    wreg      unsigned char 
  1078 ;; Registers used:
  1079 ;;		wreg, status,2, status,0
  1080 ;; Tracked objects:
  1081 ;;		On entry : 100/0
  1082 ;;		On exit  : 100/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMMON   BANK0   BANK1
  1085 ;;      Params:         1       0       0
  1086 ;;      Locals:         0       3       0
  1087 ;;      Temps:          1       0       0
  1088 ;;      Totals:         2       3       0
  1089 ;;Total ram usage:        5 bytes
  1090 ;; Hardware stack levels used:    1
  1091 ;; Hardware stack levels required when called:    2
  1092 ;; This function calls:
  1093 ;;		Nothing
  1094 ;; This function is called by:
  1095 ;;		_workCtr
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099                           
  1100                           ;psect for function ___lbmod
  1101  03B0                     ___lbmod:	
  1102                           
  1103                           ;incstack = 0
  1104                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1105                           ;___lbmod@dividend stored from wreg
  1106  03B0  00B8               	movwf	___lbmod@dividend
  1107  03B1  3008               	movlw	8
  1108  03B2  00B9               	movwf	___lbmod@counter
  1109  03B3  01BA               	clrf	___lbmod@rem
  1110  03B4                     l2416:	
  1111  03B4  0838               	movf	___lbmod@dividend,w
  1112  03B5  00F4               	movwf	??___lbmod
  1113  03B6  3007               	movlw	7
  1114  03B7  1003               	clrc
  1115  03B8                     L2:	
  1116  03B8  0CF4               	rrf	??___lbmod,f
  1117  03B9  3EFF               	addlw	-1
  1118  03BA  1003               	clrc
  1119  03BB  1D03               	skipz
  1120  03BC  2BB8               	goto	L2
  1121  03BD  0D3A               	rlf	___lbmod@rem,w
  1122  03BE  0474               	iorwf	??___lbmod,w
  1123  03BF  00BA               	movwf	___lbmod@rem
  1124  03C0  1003               	clrc
  1125  03C1  0DB8               	rlf	___lbmod@dividend,f
  1126  03C2  0873               	movf	___lbmod@divisor,w
  1127  03C3  023A               	subwf	___lbmod@rem,w
  1128  03C4  1C03               	skipc
  1129  03C5  2BC8               	goto	l2424
  1130  03C6  0873               	movf	___lbmod@divisor,w
  1131  03C7  02BA               	subwf	___lbmod@rem,f
  1132  03C8                     l2424:	
  1133  03C8  0BB9               	decfsz	___lbmod@counter,f
  1134  03C9  2BB4               	goto	l2416
  1135  03CA  083A               	movf	___lbmod@rem,w
  1136  03CB  0008               	return
  1137  03CC                     __end_of___lbmod:	
  1138                           
  1139                           	psect	text5
  1140  03CC                     __ptext5:	
  1141 ;; *************** function ___lbdiv *****************
  1142 ;; Defined at:
  1143 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;  dividend        1    wreg     unsigned char 
  1146 ;;  divisor         1    3[COMMON] unsigned char 
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;  dividend        1    4[COMMON] unsigned char 
  1149 ;;  quotient        1    6[COMMON] unsigned char 
  1150 ;;  counter         1    5[COMMON] unsigned char 
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      unsigned char 
  1153 ;; Registers used:
  1154 ;;		wreg, status,2, status,0
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMMON   BANK0   BANK1
  1160 ;;      Params:         1       0       0
  1161 ;;      Locals:         3       0       0
  1162 ;;      Temps:          0       0       0
  1163 ;;      Totals:         4       0       0
  1164 ;;Total ram usage:        4 bytes
  1165 ;; Hardware stack levels used:    1
  1166 ;; Hardware stack levels required when called:    2
  1167 ;; This function calls:
  1168 ;;		Nothing
  1169 ;; This function is called by:
  1170 ;;		_workCtr
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           
  1175                           ;psect for function ___lbdiv
  1176  03CC                     ___lbdiv:	
  1177                           
  1178                           ;incstack = 0
  1179                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1180                           ;___lbdiv@dividend stored from wreg
  1181  03CC  00F4               	movwf	___lbdiv@dividend
  1182  03CD  01F6               	clrf	___lbdiv@quotient
  1183  03CE  0873               	movf	___lbdiv@divisor,w
  1184  03CF  1903               	btfsc	3,2
  1185  03D0  2BE5               	goto	l1900
  1186  03D1  01F5               	clrf	___lbdiv@counter
  1187  03D2                     l1886:	
  1188  03D2  0AF5               	incf	___lbdiv@counter,f
  1189  03D3  1BF3               	btfsc	___lbdiv@divisor,7
  1190  03D4  2BD8               	goto	l1054
  1191  03D5  1003               	clrc
  1192  03D6  0DF3               	rlf	___lbdiv@divisor,f
  1193  03D7  2BD2               	goto	l1886
  1194  03D8                     l1054:	
  1195  03D8  1003               	clrc
  1196  03D9  0DF6               	rlf	___lbdiv@quotient,f
  1197  03DA  0873               	movf	___lbdiv@divisor,w
  1198  03DB  0274               	subwf	___lbdiv@dividend,w
  1199  03DC  1C03               	skipc
  1200  03DD  2BE2               	goto	L3
  1201  03DE  0873               	movf	___lbdiv@divisor,w
  1202  03DF  02F4               	subwf	___lbdiv@dividend,f
  1203  03E0  1476               	bsf	___lbdiv@quotient,0
  1204  03E1  1003               	clrc
  1205  03E2                     L3:	
  1206  03E2  0CF3               	rrf	___lbdiv@divisor,f
  1207  03E3  0BF5               	decfsz	___lbdiv@counter,f
  1208  03E4  2BD8               	goto	l1054
  1209  03E5                     l1900:	
  1210  03E5  0876               	movf	___lbdiv@quotient,w
  1211  03E6  0008               	return
  1212  03E7                     __end_of___lbdiv:	
  1213                           
  1214                           	psect	text6
  1215  01A3                     __ptext6:	
  1216 ;; *************** function _setBatStep *****************
  1217 ;; Defined at:
  1218 ;;		line 513 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;		None
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;		None
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      void 
  1225 ;; Registers used:
  1226 ;;		wreg, status,2, status,0, pclath, cstack
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 100/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMMON   BANK0   BANK1
  1232 ;;      Params:         0       0       0
  1233 ;;      Locals:         0       0       0
  1234 ;;      Temps:          0       0       0
  1235 ;;      Totals:         0       0       0
  1236 ;;Total ram usage:        0 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; Hardware stack levels required when called:    3
  1239 ;; This function calls:
  1240 ;;		___lwdiv
  1241 ;; This function is called by:
  1242 ;;		_main
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           
  1247                           ;psect for function _setBatStep
  1248  01A3                     _setBatStep:	
  1249                           
  1250                           ;main.c: 515: if(lowBatFlag == 1 && lowShanTime == 0 && workStep > 0)
  1251                           
  1252                           ;incstack = 0
  1253                           ; Regs used in _setBatStep: [wreg+status,2+status,0+pclath+cstack]
  1254  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  1255  01A4  0B2C               	decfsz	_lowBatFlag,w
  1256  01A5  29B4               	goto	l2476
  1257  01A6  0822               	movf	_lowShanTime,w
  1258  01A7  0423               	iorwf	_lowShanTime+1,w
  1259  01A8  1D03               	btfss	3,2
  1260  01A9  29B4               	goto	l2476
  1261  01AA  0830               	movf	_workStep,w
  1262  01AB  1903               	btfsc	3,2
  1263  01AC  29B4               	goto	l2476
  1264  01AD  302C               	movlw	44
  1265                           
  1266                           ;main.c: 516: {
  1267                           ;main.c: 517: showBatStep = 0;
  1268  01AE  01F9               	clrf	_showBatStep
  1269                           
  1270                           ;main.c: 518: curBatStep = 0;
  1271  01AF  01A9               	clrf	_curBatStep
  1272                           
  1273                           ;main.c: 519: lowShanTime = 300;
  1274  01B0  00A2               	movwf	_lowShanTime
  1275  01B1  3001               	movlw	1
  1276  01B2  00A3               	movwf	_lowShanTime+1
  1277                           
  1278                           ;main.c: 520: }
  1279  01B3  0008               	return
  1280  01B4                     l2476:	
  1281                           
  1282                           ;main.c: 521: else if(power_ad < 1675)
  1283  01B4  3006               	movlw	6
  1284  01B5  0278               	subwf	_power_ad+1,w	;volatile
  1285  01B6  308B               	movlw	139
  1286  01B7  1903               	skipnz
  1287  01B8  0277               	subwf	_power_ad,w	;volatile
  1288  01B9  1803               	skipnc
  1289  01BA  29CE               	goto	l2486
  1290                           
  1291                           ;main.c: 522: {
  1292                           ;main.c: 523: if(count1s == 0)
  1293  01BB  0835               	movf	_count1s,w
  1294  01BC  1D03               	btfss	3,2
  1295  01BD  29CB               	goto	l727
  1296                           
  1297                           ;main.c: 524: {
  1298                           ;main.c: 525: if(showBatStep > 1)
  1299  01BE  3002               	movlw	2
  1300  01BF  0279               	subwf	_showBatStep,w
  1301  01C0  1C03               	skipc
  1302  01C1  29C7               	goto	l728
  1303                           
  1304                           ;main.c: 526: {
  1305                           ;main.c: 527: if(chrgFlag == 0)
  1306  01C2  087A               	movf	_chrgFlag,w
  1307  01C3  1D03               	btfss	3,2
  1308  01C4  29C9               	goto	l730
  1309                           
  1310                           ;main.c: 528: showBatStep--;
  1311  01C5  03F9               	decf	_showBatStep,f
  1312  01C6  29C9               	goto	l730
  1313  01C7                     l728:	
  1314                           
  1315                           ;main.c: 530: else
  1316                           ;main.c: 531: {
  1317                           ;main.c: 532: showBatStep = 1;
  1318  01C7  01F9               	clrf	_showBatStep
  1319  01C8  0AF9               	incf	_showBatStep,f
  1320  01C9                     l730:	
  1321                           
  1322                           ;main.c: 533: }
  1323                           ;main.c: 534: curBatStep = 1;
  1324  01C9  01A9               	clrf	_curBatStep
  1325  01CA  0AA9               	incf	_curBatStep,f
  1326  01CB                     l727:	
  1327                           
  1328                           ;main.c: 535: }
  1329                           ;main.c: 536: curBatStep = 1;
  1330  01CB  01A9               	clrf	_curBatStep
  1331  01CC  0AA9               	incf	_curBatStep,f
  1332                           
  1333                           ;main.c: 537: }
  1334  01CD  0008               	return
  1335  01CE                     l2486:	
  1336                           
  1337                           ;main.c: 538: else
  1338                           ;main.c: 539: {
  1339                           ;main.c: 540: if(power_ad < 1875)
  1340  01CE  3007               	movlw	7
  1341  01CF  0278               	subwf	_power_ad+1,w	;volatile
  1342  01D0  3053               	movlw	83
  1343  01D1  1903               	skipnz
  1344  01D2  0277               	subwf	_power_ad,w	;volatile
  1345  01D3  1803               	skipnc
  1346  01D4  29E3               	goto	l2490
  1347                           
  1348                           ;main.c: 541: {
  1349                           ;main.c: 542: curBatStep = (power_ad - 1675)/10;
  1350  01D5  300A               	movlw	10
  1351  01D6  00F3               	movwf	___lwdiv@divisor
  1352  01D7  01F4               	clrf	___lwdiv@divisor+1
  1353  01D8  0877               	movf	_power_ad,w	;volatile
  1354  01D9  3E75               	addlw	117
  1355  01DA  00F5               	movwf	___lwdiv@dividend
  1356  01DB  0878               	movf	_power_ad+1,w	;volatile
  1357  01DC  1803               	skipnc
  1358  01DD  3E01               	addlw	1
  1359  01DE  3EF9               	addlw	249
  1360  01DF  00F6               	movwf	___lwdiv@dividend+1
  1361  01E0  233F               	fcall	___lwdiv
  1362  01E1  0873               	movf	?___lwdiv,w
  1363  01E2  29F1               	goto	L4
  1364  01E3                     l2490:	
  1365                           ;main.c: 543: }
  1366                           
  1367                           
  1368                           ;main.c: 544: else
  1369                           ;main.c: 545: {
  1370                           ;main.c: 546: curBatStep = 10 + ((power_ad - 1875)/5);
  1371  01E3  3005               	movlw	5
  1372  01E4  00F3               	movwf	___lwdiv@divisor
  1373  01E5  01F4               	clrf	___lwdiv@divisor+1
  1374  01E6  0877               	movf	_power_ad,w	;volatile
  1375  01E7  3EAD               	addlw	173
  1376  01E8  00F5               	movwf	___lwdiv@dividend
  1377  01E9  0878               	movf	_power_ad+1,w	;volatile
  1378  01EA  1803               	skipnc
  1379  01EB  3E01               	addlw	1
  1380  01EC  3EF8               	addlw	248
  1381  01ED  00F6               	movwf	___lwdiv@dividend+1
  1382  01EE  233F               	fcall	___lwdiv
  1383  01EF  0873               	movf	?___lwdiv,w
  1384  01F0  3E0A               	addlw	10
  1385  01F1                     L4:	
  1386  01F1  00A9               	movwf	_curBatStep
  1387                           
  1388                           ;main.c: 547: }
  1389                           ;main.c: 548: if(curBatStep > 99)
  1390  01F2  3064               	movlw	100
  1391  01F3  0229               	subwf	_curBatStep,w
  1392  01F4  1C03               	skipc
  1393  01F5  29F8               	goto	l2496
  1394                           
  1395                           ;main.c: 549: {
  1396                           ;main.c: 550: curBatStep = 99;
  1397  01F6  3063               	movlw	99
  1398  01F7  00A9               	movwf	_curBatStep
  1399  01F8                     l2496:	
  1400                           
  1401                           ;main.c: 551: }
  1402                           ;main.c: 553: if(chrgFlag)
  1403  01F8  087A               	movf	_chrgFlag,w
  1404  01F9  1903               	btfsc	3,2
  1405  01FA  2A1E               	goto	l2520
  1406                           
  1407                           ;main.c: 554: {
  1408                           ;main.c: 555: if(chrgFullFlag)
  1409  01FB  0833               	movf	_chrgFullFlag,w
  1410  01FC  1903               	btfsc	3,2
  1411  01FD  2A17               	goto	l2508
  1412                           
  1413                           ;main.c: 556: {
  1414                           ;main.c: 557: if(++count30s >= 3000 && showBatStep < 99)
  1415  01FE  0AA0               	incf	_count30s,f
  1416  01FF  1903               	skipnz
  1417  0200  0AA1               	incf	_count30s+1,f
  1418  0201  300B               	movlw	11
  1419  0202  0221               	subwf	_count30s+1,w
  1420  0203  30B8               	movlw	184
  1421  0204  2A0B               	goto	L5
  1422  0205                     l2510:	
  1423                           
  1424                           ;main.c: 564: {
  1425                           ;main.c: 565: if(++count30s >= 30000 && showBatStep < 99)
  1426  0205  0AA0               	incf	_count30s,f
  1427  0206  1903               	skipnz
  1428  0207  0AA1               	incf	_count30s+1,f
  1429  0208  3075               	movlw	117
  1430  0209  0221               	subwf	_count30s+1,w
  1431  020A  3030               	movlw	48
  1432  020B                     L5:	
  1433  020B  1903               	skipnz
  1434  020C  0220               	subwf	_count30s,w
  1435  020D  1C03               	skipc
  1436  020E  0008               	return
  1437  020F  3063               	movlw	99
  1438  0210  0279               	subwf	_showBatStep,w
  1439  0211  1803               	skipnc
  1440  0212  0008               	return
  1441                           
  1442                           ;main.c: 558: {
  1443                           ;main.c: 559: count30s = 0;
  1444  0213  01A0               	clrf	_count30s
  1445  0214  01A1               	clrf	_count30s+1
  1446                           
  1447                           ;main.c: 560: showBatStep++;
  1448  0215  0AF9               	incf	_showBatStep,f
  1449  0216  0008               	return
  1450  0217                     l2508:	
  1451                           
  1452                           ;main.c: 563: else if(curBatStep > showBatStep)
  1453  0217  0829               	movf	_curBatStep,w
  1454  0218  0279               	subwf	_showBatStep,w
  1455  0219  1C03               	btfss	3,0
  1456  021A  2A05               	goto	l2510
  1457  021B                     l2518:	
  1458                           
  1459                           ;main.c: 572: else
  1460                           ;main.c: 573: {
  1461                           ;main.c: 574: count30s = 0;
  1462  021B  01A0               	clrf	_count30s
  1463  021C  01A1               	clrf	_count30s+1
  1464  021D  0008               	return
  1465  021E                     l2520:	
  1466                           
  1467                           ;main.c: 577: else
  1468                           ;main.c: 578: {
  1469                           ;main.c: 579: if(curBatStep < showBatStep && showBatStep > 1)
  1470  021E  0879               	movf	_showBatStep,w
  1471  021F  0229               	subwf	_curBatStep,w
  1472  0220  1803               	skipnc
  1473  0221  2A1B               	goto	l2518
  1474  0222  3002               	movlw	2
  1475  0223  0279               	subwf	_showBatStep,w
  1476  0224  1C03               	skipc
  1477  0225  2A1B               	goto	l2518
  1478                           
  1479                           ;main.c: 580: {
  1480                           ;main.c: 581: if(++count30s >= 1500 && showBatStep > 1)
  1481  0226  0AA0               	incf	_count30s,f
  1482  0227  1903               	skipnz
  1483  0228  0AA1               	incf	_count30s+1,f
  1484  0229  3005               	movlw	5
  1485  022A  0221               	subwf	_count30s+1,w
  1486  022B  30DC               	movlw	220
  1487  022C  1903               	skipnz
  1488  022D  0220               	subwf	_count30s,w
  1489  022E  1C03               	skipc
  1490  022F  0008               	return
  1491  0230  3002               	movlw	2
  1492  0231  0279               	subwf	_showBatStep,w
  1493  0232  1C03               	skipc
  1494  0233  0008               	return
  1495                           
  1496                           ;main.c: 582: {
  1497                           ;main.c: 583: count30s = 0;
  1498  0234  01A0               	clrf	_count30s
  1499  0235  01A1               	clrf	_count30s+1
  1500                           
  1501                           ;main.c: 584: showBatStep--;
  1502  0236  03F9               	decf	_showBatStep,f
  1503  0237  0008               	return
  1504  0238                     __end_of_setBatStep:	
  1505                           
  1506                           	psect	text7
  1507  033F                     __ptext7:	
  1508 ;; *************** function ___lwdiv *****************
  1509 ;; Defined at:
  1510 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  1511 ;; Parameters:    Size  Location     Type
  1512 ;;  divisor         2    3[COMMON] unsigned int 
  1513 ;;  dividend        2    5[COMMON] unsigned int 
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;  quotient        2    1[BANK0 ] unsigned int 
  1516 ;;  counter         1    0[BANK0 ] unsigned char 
  1517 ;; Return value:  Size  Location     Type
  1518 ;;                  2    3[COMMON] unsigned int 
  1519 ;; Registers used:
  1520 ;;		wreg, status,2, status,0
  1521 ;; Tracked objects:
  1522 ;;		On entry : 100/0
  1523 ;;		On exit  : 100/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMMON   BANK0   BANK1
  1526 ;;      Params:         4       0       0
  1527 ;;      Locals:         0       3       0
  1528 ;;      Temps:          0       0       0
  1529 ;;      Totals:         4       3       0
  1530 ;;Total ram usage:        7 bytes
  1531 ;; Hardware stack levels used:    1
  1532 ;; Hardware stack levels required when called:    2
  1533 ;; This function calls:
  1534 ;;		Nothing
  1535 ;; This function is called by:
  1536 ;;		_setBatStep
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           
  1541                           ;psect for function ___lwdiv
  1542  033F                     ___lwdiv:	
  1543                           
  1544                           ;incstack = 0
  1545                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1546  033F  01B9               	clrf	___lwdiv@quotient
  1547  0340  01BA               	clrf	___lwdiv@quotient+1
  1548  0341  0873               	movf	___lwdiv@divisor,w
  1549  0342  0474               	iorwf	___lwdiv@divisor+1,w
  1550  0343  1903               	btfsc	3,2
  1551  0344  2B64               	goto	l2452
  1552  0345  01B8               	clrf	___lwdiv@counter
  1553  0346                     L6:	
  1554  0346  0AB8               	incf	___lwdiv@counter,f
  1555  0347  1BF4               	btfsc	___lwdiv@divisor+1,7
  1556  0348  2B4D               	goto	l2440
  1557  0349  1003               	clrc
  1558  034A  0DF3               	rlf	___lwdiv@divisor,f
  1559  034B  0DF4               	rlf	___lwdiv@divisor+1,f
  1560  034C  2B46               	goto	L6
  1561  034D                     l2440:	
  1562  034D  1003               	clrc
  1563  034E  0DB9               	rlf	___lwdiv@quotient,f
  1564  034F  0DBA               	rlf	___lwdiv@quotient+1,f
  1565  0350  0874               	movf	___lwdiv@divisor+1,w
  1566  0351  0276               	subwf	___lwdiv@dividend+1,w
  1567  0352  1D03               	skipz
  1568  0353  2B56               	goto	u2355
  1569  0354  0873               	movf	___lwdiv@divisor,w
  1570  0355  0275               	subwf	___lwdiv@dividend,w
  1571  0356                     u2355:	
  1572  0356  1C03               	skipc
  1573  0357  2B60               	goto	L7
  1574  0358  0873               	movf	___lwdiv@divisor,w
  1575  0359  02F5               	subwf	___lwdiv@dividend,f
  1576  035A  0874               	movf	___lwdiv@divisor+1,w
  1577  035B  1C03               	skipc
  1578  035C  03F6               	decf	___lwdiv@dividend+1,f
  1579  035D  02F6               	subwf	___lwdiv@dividend+1,f
  1580  035E  1439               	bsf	___lwdiv@quotient,0
  1581  035F  1003               	clrc
  1582  0360                     L7:	
  1583  0360  0CF4               	rrf	___lwdiv@divisor+1,f
  1584  0361  0CF3               	rrf	___lwdiv@divisor,f
  1585  0362  0BB8               	decfsz	___lwdiv@counter,f
  1586  0363  2B4D               	goto	l2440
  1587  0364                     l2452:	
  1588  0364  083A               	movf	___lwdiv@quotient+1,w
  1589  0365  00F4               	movwf	?___lwdiv+1
  1590  0366  0839               	movf	___lwdiv@quotient,w
  1591  0367  00F3               	movwf	?___lwdiv
  1592  0368  0008               	return
  1593  0369                     __end_of___lwdiv:	
  1594                           
  1595                           	psect	text8
  1596  0447                     __ptext8:	
  1597 ;; *************** function _keyCtr *****************
  1598 ;; Defined at:
  1599 ;;		line 387 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;		None
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		wreg, status,2
  1608 ;; Tracked objects:
  1609 ;;		On entry : 100/0
  1610 ;;		On exit  : 100/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMMON   BANK0   BANK1
  1613 ;;      Params:         0       0       0
  1614 ;;      Locals:         0       0       0
  1615 ;;      Temps:          0       0       0
  1616 ;;      Totals:         0       0       0
  1617 ;;Total ram usage:        0 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    2
  1620 ;; This function calls:
  1621 ;;		Nothing
  1622 ;; This function is called by:
  1623 ;;		_main
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627                           
  1628                           ;psect for function _keyCtr
  1629  0447                     _keyCtr:	
  1630                           
  1631                           ;main.c: 389: if(PORTB & 0x02)
  1632                           
  1633                           ;incstack = 0
  1634                           ; Regs used in _keyCtr: [wreg+status,2]
  1635  0447  1C86               	btfss	6,1	;volatile
  1636  0448  2C51               	goto	l2110
  1637                           
  1638                           ;main.c: 390: {
  1639                           ;main.c: 391: if(PORTB & 0x04)
  1640  0449  1D06               	btfss	6,2	;volatile
  1641  044A  2C4E               	goto	l2108
  1642                           
  1643                           ;main.c: 392: {
  1644                           ;main.c: 393: workStep = 1;
  1645  044B  01B0               	clrf	_workStep
  1646  044C  0AB0               	incf	_workStep,f
  1647                           
  1648                           ;main.c: 394: }
  1649  044D  0008               	return
  1650  044E                     l2108:	
  1651                           
  1652                           ;main.c: 395: else
  1653                           ;main.c: 396: {
  1654                           ;main.c: 397: workStep = 2;
  1655  044E  3002               	movlw	2
  1656  044F  00B0               	movwf	_workStep
  1657  0450  0008               	return
  1658  0451                     l2110:	
  1659                           
  1660                           ;main.c: 400: else
  1661                           ;main.c: 401: {
  1662                           ;main.c: 402: workStep = 0;
  1663  0451  01B0               	clrf	_workStep
  1664  0452  0008               	return
  1665  0453                     __end_of_keyCtr:	
  1666                           
  1667                           	psect	text9
  1668  0369                     __ptext9:	
  1669 ;; *************** function _chrgCtr *****************
  1670 ;; Defined at:
  1671 ;;		line 311 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;		None
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;		None
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  1    wreg      void 
  1678 ;; Registers used:
  1679 ;;		wreg, status,2, status,0
  1680 ;; Tracked objects:
  1681 ;;		On entry : 100/0
  1682 ;;		On exit  : 100/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMMON   BANK0   BANK1
  1685 ;;      Params:         0       0       0
  1686 ;;      Locals:         0       0       0
  1687 ;;      Temps:          0       0       0
  1688 ;;      Totals:         0       0       0
  1689 ;;Total ram usage:        0 bytes
  1690 ;; Hardware stack levels used:    1
  1691 ;; Hardware stack levels required when called:    2
  1692 ;; This function calls:
  1693 ;;		Nothing
  1694 ;; This function is called by:
  1695 ;;		_main
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           
  1700                           ;psect for function _chrgCtr
  1701  0369                     _chrgCtr:	
  1702                           
  1703                           ;main.c: 313: if(PORTB & 0x01)
  1704                           
  1705                           ;incstack = 0
  1706                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  1707  0369  1C06               	btfss	6,0	;volatile
  1708  036A  2B7E               	goto	l2012
  1709                           
  1710                           ;main.c: 314: {
  1711                           ;main.c: 315: chrgFlag = 1;
  1712  036B  01FA               	clrf	_chrgFlag
  1713  036C  0AFA               	incf	_chrgFlag,f
  1714                           
  1715                           ;main.c: 316: lowBatFlag = 0;
  1716  036D  01AC               	clrf	_lowBatFlag
  1717                           
  1718                           ;main.c: 317: if(PORTA & 0x01)
  1719  036E  1683               	bsf	3,5	;RP0=1, select bank1
  1720  036F  1C06               	btfss	6,0	;volatile
  1721  0370  2B74               	goto	l2006
  1722                           
  1723                           ;main.c: 318: {
  1724                           ;main.c: 319: chrgFullTime = 0;
  1725  0371  1283               	bcf	3,5	;RP0=0, select bank0
  1726  0372  01B1               	clrf	_chrgFullTime
  1727                           
  1728                           ;main.c: 320: }
  1729  0373  0008               	return
  1730  0374                     l2006:	
  1731                           
  1732                           ;main.c: 321: else
  1733                           ;main.c: 322: {
  1734                           ;main.c: 323: if(++chrgFullTime >= 200)
  1735  0374  30C8               	movlw	200
  1736  0375  1283               	bcf	3,5	;RP0=0, select bank0
  1737  0376  0AB1               	incf	_chrgFullTime,f
  1738  0377  0231               	subwf	_chrgFullTime,w
  1739  0378  1C03               	skipc
  1740  0379  0008               	return
  1741                           
  1742                           ;main.c: 324: {
  1743                           ;main.c: 325: chrgFullTime = 0;
  1744  037A  01B1               	clrf	_chrgFullTime
  1745                           
  1746                           ;main.c: 326: chrgFullFlag = 1;
  1747  037B  01B3               	clrf	_chrgFullFlag
  1748  037C  0AB3               	incf	_chrgFullFlag,f
  1749  037D  0008               	return
  1750  037E                     l2012:	
  1751  037E  3006               	movlw	6
  1752                           
  1753                           ;main.c: 330: else
  1754                           ;main.c: 331: {
  1755                           ;main.c: 332: chrgFlag = 0;
  1756  037F  01FA               	clrf	_chrgFlag
  1757                           
  1758                           ;main.c: 333: chrgFullFlag = 0;
  1759  0380  01B3               	clrf	_chrgFullFlag
  1760                           
  1761                           ;main.c: 334: chrgFullTime = 0;
  1762  0381  01B1               	clrf	_chrgFullTime
  1763                           
  1764                           ;main.c: 335: if(power_ad < 1563)
  1765  0382  0278               	subwf	_power_ad+1,w	;volatile
  1766  0383  301B               	movlw	27
  1767  0384  1903               	skipnz
  1768  0385  0277               	subwf	_power_ad,w	;volatile
  1769  0386  1803               	skipnc
  1770  0387  2B91               	goto	l2022
  1771                           
  1772                           ;main.c: 336: {
  1773                           ;main.c: 337: if(++lowBatTime > 200)
  1774  0388  30C9               	movlw	201
  1775  0389  0AA8               	incf	_lowBatTime,f
  1776  038A  0228               	subwf	_lowBatTime,w
  1777  038B  1C03               	skipc
  1778  038C  0008               	return
  1779                           
  1780                           ;main.c: 338: {
  1781                           ;main.c: 339: lowBatTime = 0;
  1782  038D  01A8               	clrf	_lowBatTime
  1783                           
  1784                           ;main.c: 340: lowBatFlag = 1;
  1785  038E  01AC               	clrf	_lowBatFlag
  1786  038F  0AAC               	incf	_lowBatFlag,f
  1787  0390  0008               	return
  1788  0391                     l2022:	
  1789                           
  1790                           ;main.c: 343: else
  1791                           ;main.c: 344: {
  1792                           ;main.c: 345: lowBatTime = 0;
  1793  0391  01A8               	clrf	_lowBatTime
  1794  0392  0008               	return
  1795  0393                     __end_of_chrgCtr:	
  1796                           
  1797                           	psect	text10
  1798  0401                     __ptext10:	
  1799 ;; *************** function _checkBatAD *****************
  1800 ;; Defined at:
  1801 ;;		line 597 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;		None
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;  power_temp      4    0        volatile unsigned long 
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  1    wreg      void 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2, status,0, pclath, cstack
  1810 ;; Tracked objects:
  1811 ;;		On entry : 100/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMMON   BANK0   BANK1
  1815 ;;      Params:         0       0       0
  1816 ;;      Locals:         0       0       0
  1817 ;;      Temps:          1       0       0
  1818 ;;      Totals:         1       0       0
  1819 ;;Total ram usage:        1 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; Hardware stack levels required when called:    3
  1822 ;; This function calls:
  1823 ;;		_ADC_Sample
  1824 ;; This function is called by:
  1825 ;;		_main
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           
  1830                           ;psect for function _checkBatAD
  1831  0401                     _checkBatAD:	
  1832                           
  1833                           ;main.c: 599: test_adc = ADC_Sample(12, 5);
  1834                           
  1835                           ;incstack = 0
  1836                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  1837  0401  3005               	movlw	5
  1838  0402  00F3               	movwf	ADC_Sample@adldo
  1839  0403  300C               	movlw	12
  1840  0404  2018               	fcall	_ADC_Sample
  1841  0405  00B7               	movwf	_test_adc	;volatile
  1842                           
  1843                           ;main.c: 600: if (0xA5 == test_adc)
  1844  0406  30A5               	movlw	165
  1845  0407  0637               	xorwf	_test_adc,w	;volatile
  1846  0408  1D03               	btfss	3,2
  1847  0409  2C0F               	goto	l2462
  1848                           
  1849                           ;main.c: 601: {
  1850                           ;main.c: 602: volatile unsigned long power_temp;
  1851                           ;main.c: 604: power_ad = adresult;
  1852  040A  0827               	movf	_adresult+1,w	;volatile
  1853  040B  00F8               	movwf	_power_ad+1	;volatile
  1854  040C  0826               	movf	_adresult,w	;volatile
  1855  040D  00F7               	movwf	_power_ad	;volatile
  1856                           
  1857                           ;main.c: 605: }
  1858  040E  0008               	return
  1859  040F                     l2462:	
  1860                           
  1861                           ;main.c: 606: else
  1862                           ;main.c: 607: {
  1863                           ;main.c: 608: ADCON0 = 0;
  1864  040F  1683               	bsf	3,5	;RP0=1, select bank1
  1865  0410  0195               	clrf	21	;volatile
  1866                           
  1867                           ;main.c: 609: ADCON1 = 0;
  1868  0411  0196               	clrf	22	;volatile
  1869                           
  1870                           ;main.c: 610: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1871  0412  3085               	movlw	133
  1872  0413  00F4               	movwf	??_checkBatAD
  1873  0414                     u2897:	
  1874  0414  0BF4               	decfsz	??_checkBatAD,f
  1875  0415  2C14               	goto	u2897
  1876  0416  0008               	return
  1877  0417                     __end_of_checkBatAD:	
  1878                           
  1879                           	psect	text11
  1880  0018                     __ptext11:	
  1881 ;; *************** function _ADC_Sample *****************
  1882 ;; Defined at:
  1883 ;;		line 825 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  adch            1    wreg     unsigned char 
  1886 ;;  adldo           1    3[COMMON] unsigned char 
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  adch            1    5[BANK0 ] unsigned char 
  1889 ;;  j               1    4[BANK0 ] unsigned char 
  1890 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  1891 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  1892 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  1893 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  1894 ;;  i               1    6[BANK0 ] unsigned char 
  1895 ;; Return value:  Size  Location     Type
  1896 ;;                  1    wreg      unsigned char 
  1897 ;; Registers used:
  1898 ;;		wreg, status,2, status,0
  1899 ;; Tracked objects:
  1900 ;;		On entry : 100/0
  1901 ;;		On exit  : 100/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMMON   BANK0   BANK1
  1904 ;;      Params:         1       0       0
  1905 ;;      Locals:         0      13       0
  1906 ;;      Temps:          0       4       0
  1907 ;;      Totals:         1      17       0
  1908 ;;Total ram usage:       18 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; Hardware stack levels required when called:    2
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		_checkBatAD
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           
  1919                           ;psect for function _ADC_Sample
  1920  0018                     _ADC_Sample:	
  1921                           
  1922                           ;incstack = 0
  1923                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1924                           ;ADC_Sample@adch stored from wreg
  1925  0018  00BD               	movwf	ADC_Sample@adch
  1926                           
  1927                           ;main.c: 827: volatile unsigned long adsum = 0;
  1928                           
  1929                           ;main.c: 828: volatile unsigned int admin = 0, admax = 0;
  1930  0019  20F2               	fcall	PL4	;call to abstracted procedure
  1931                           
  1932                           ;main.c: 829: volatile unsigned int ad_temp = 0;
  1933  001A  01C7               	clrf	ADC_Sample@ad_temp	;volatile
  1934  001B  01C8               	clrf	ADC_Sample@ad_temp+1	;volatile
  1935                           
  1936                           ;main.c: 831: if ((!LDO_EN) && (adldo & 0x04) )
  1937  001C  1683               	bsf	3,5	;RP0=1, select bank1
  1938  001D  1D16               	btfss	22,2	;volatile
  1939  001E  1D73               	btfss	ADC_Sample@adldo,2
  1940  001F  2829               	goto	l2350
  1941                           
  1942                           ;main.c: 832: {
  1943                           ;main.c: 834: ADCON1 = adldo;
  1944  0020  0873               	movf	ADC_Sample@adldo,w
  1945  0021  0096               	movwf	22	;volatile
  1946                           
  1947                           ;main.c: 835: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1948  0022  3084               	movlw	132
  1949  0023  1283               	bcf	3,5	;RP0=0, select bank0
  1950  0024  00B8               	movwf	??_ADC_Sample
  1951  0025                     u2907:	
  1952  0025  0BB8               	decfsz	??_ADC_Sample,f
  1953  0026  2825               	goto	u2907
  1954  0027  2828               	nop2
  1955                           
  1956                           ;main.c: 836: }
  1957  0028  282B               	goto	l2352
  1958  0029                     l2350:	
  1959                           
  1960                           ;main.c: 837: else
  1961                           ;main.c: 838: ADCON1 = adldo;
  1962  0029  0873               	movf	ADC_Sample@adldo,w
  1963  002A  0096               	movwf	22	;volatile
  1964  002B                     l2352:	
  1965                           
  1966                           ;main.c: 840: if(adch & 0x10)
  1967  002B  1283               	bcf	3,5	;RP0=0, select bank0
  1968  002C  1E3D               	btfss	ADC_Sample@adch,4
  1969  002D  2833               	goto	l2360
  1970                           
  1971                           ;main.c: 841: {
  1972                           ;main.c: 842: CHS4 = 1;
  1973  002E  1683               	bsf	3,5	;RP0=1, select bank1
  1974  002F  1716               	bsf	22,6	;volatile
  1975                           
  1976                           ;main.c: 843: adch &= 0x0f;
  1977  0030  300F               	movlw	15
  1978  0031  1283               	bcf	3,5	;RP0=0, select bank0
  1979  0032  05BD               	andwf	ADC_Sample@adch,f
  1980  0033                     l2360:	
  1981                           
  1982                           ;main.c: 846: for (i = 0; i < 10; i++)
  1983  0033  01BE               	clrf	ADC_Sample@i
  1984  0034                     l2366:	
  1985                           
  1986                           ;main.c: 847: {
  1987                           ;main.c: 848: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1988  0034  083D               	movf	ADC_Sample@adch,w
  1989  0035  00B8               	movwf	??_ADC_Sample
  1990  0036  3001               	movlw	1
  1991  0037  1003               	clrc
  1992  0038                     L8:	
  1993  0038  0DB8               	rlf	??_ADC_Sample,f
  1994  0039  3EFF               	addlw	-1
  1995  003A  1003               	clrc
  1996  003B  1D03               	skipz
  1997  003C  2838               	goto	L8
  1998  003D  0D38               	rlf	??_ADC_Sample,w
  1999  003E  3841               	iorlw	65
  2000  003F  1683               	bsf	3,5	;RP0=1, select bank1
  2001  0040  0095               	movwf	21	;volatile
  2002  0041  0000               	nop	;# 
  2003  0042  0000               	nop	;# 
  2004  0043  0000               	nop	;# 
  2005  0044  0000               	nop	;# 
  2006                           
  2007                           ;main.c: 853: GODONE = 1;
  2008  0045  1683               	bsf	3,5	;RP0=1, select bank1
  2009  0046  1495               	bsf	21,1	;volatile
  2010                           
  2011                           ;main.c: 855: unsigned char j = 0;
  2012  0047  1283               	bcf	3,5	;RP0=0, select bank0
  2013  0048  01BC               	clrf	ADC_Sample@j
  2014  0049                     l777:	
  2015                           ;main.c: 856: while (GODONE)
  2016                           
  2017  0049  1683               	bsf	3,5	;RP0=1, select bank1
  2018  004A  1C95               	btfss	21,1	;volatile
  2019  004B  2854               	goto	l2376
  2020                           
  2021                           ;main.c: 857: {
  2022                           ;main.c: 858: _delay((unsigned long)((2)*(16000000/4000000.0)));
  2023  004C  284D               	nop2	;2 cycle nop
  2024  004D  284E               	nop2	;2 cycle nop
  2025  004E  284F               	nop2	;2 cycle nop
  2026  004F  2850               	nop2	;2 cycle nop
  2027                           
  2028                           ;main.c: 860: if (0 == (--j))
  2029  0050  1283               	bcf	3,5	;RP0=0, select bank0
  2030  0051  0BBC               	decfsz	ADC_Sample@j,f
  2031  0052  2849               	goto	l777
  2032                           
  2033                           ;main.c: 861: return 0;
  2034  0053  3400               	retlw	0
  2035  0054                     l2376:	
  2036                           
  2037                           ;main.c: 862: }
  2038                           ;main.c: 864: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2039  0054  0819               	movf	25,w	;volatile
  2040  0055  1283               	bcf	3,5	;RP0=0, select bank0
  2041  0056  00C7               	movwf	ADC_Sample@ad_temp	;volatile
  2042  0057  01C8               	clrf	ADC_Sample@ad_temp+1	;volatile
  2043  0058  0EC7               	swapf	ADC_Sample@ad_temp,f	;volatile
  2044  0059  0EC8               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2045  005A  30F0               	movlw	240
  2046  005B  05C8               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2047  005C  0847               	movf	ADC_Sample@ad_temp,w	;volatile
  2048  005D  390F               	andlw	15
  2049  005E  04C8               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2050  005F  30F0               	movlw	240
  2051  0060  05C7               	andwf	ADC_Sample@ad_temp,f	;volatile
  2052  0061  1683               	bsf	3,5	;RP0=1, select bank1
  2053  0062  0E18               	swapf	24,w	;volatile
  2054  0063  390F               	andlw	15
  2055  0064  1283               	bcf	3,5	;RP0=0, select bank0
  2056  0065  07C7               	addwf	ADC_Sample@ad_temp,f	;volatile
  2057  0066  1803               	skipnc
  2058  0067  0AC8               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2059                           
  2060                           ;main.c: 866: if (0 == admax)
  2061  0068  0845               	movf	ADC_Sample@admax,w	;volatile
  2062  0069  0446               	iorwf	ADC_Sample@admax+1,w	;volatile
  2063  006A  1D03               	btfss	3,2
  2064  006B  286E               	goto	l2384
  2065                           
  2066                           ;main.c: 867: {
  2067                           ;main.c: 868: admax = ad_temp;
  2068  006C  20FB               	fcall	PL8	;call to abstracted procedure
  2069  006D  2880               	goto	l2390
  2070  006E                     l2384:	
  2071                           ;main.c: 870: }
  2072                           
  2073                           ;main.c: 869: admin = ad_temp;
  2074                           
  2075                           
  2076                           ;main.c: 871: else if (ad_temp > admax)
  2077  006E  0848               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2078  006F  0246               	subwf	ADC_Sample@admax+1,w	;volatile
  2079  0070  1D03               	skipz
  2080  0071  2874               	goto	u2225
  2081  0072  0847               	movf	ADC_Sample@ad_temp,w	;volatile
  2082  0073  0245               	subwf	ADC_Sample@admax,w	;volatile
  2083  0074                     u2225:	
  2084  0074  1803               	skipnc
  2085  0075  2878               	goto	l2388
  2086                           
  2087                           ;main.c: 872: admax = ad_temp;
  2088  0076  20FB               	fcall	PL8	;call to abstracted procedure
  2089  0077  2884               	goto	l783
  2090  0078                     l2388:	
  2091                           
  2092                           ;main.c: 873: else if (ad_temp < admin)
  2093  0078  0844               	movf	ADC_Sample@admin+1,w	;volatile
  2094  0079  0248               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2095  007A  1D03               	skipz
  2096  007B  287E               	goto	u2235
  2097  007C  0843               	movf	ADC_Sample@admin,w	;volatile
  2098  007D  0247               	subwf	ADC_Sample@ad_temp,w	;volatile
  2099  007E                     u2235:	
  2100  007E  1803               	skipnc
  2101  007F  2884               	goto	l783
  2102  0080                     l2390:	
  2103                           
  2104                           ;main.c: 874: admin = ad_temp;
  2105  0080  0848               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2106  0081  00C4               	movwf	ADC_Sample@admin+1	;volatile
  2107  0082  0847               	movf	ADC_Sample@ad_temp,w	;volatile
  2108  0083  00C3               	movwf	ADC_Sample@admin	;volatile
  2109  0084                     l783:	
  2110                           
  2111                           ;main.c: 876: adsum += ad_temp;
  2112  0084  0847               	movf	ADC_Sample@ad_temp,w	;volatile
  2113  0085  00B8               	movwf	??_ADC_Sample
  2114  0086  0848               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2115  0087  00B9               	movwf	??_ADC_Sample+1
  2116  0088  01BA               	clrf	??_ADC_Sample+2
  2117  0089  01BB               	clrf	??_ADC_Sample+3
  2118  008A  0838               	movf	??_ADC_Sample,w
  2119  008B  07BF               	addwf	ADC_Sample@adsum,f	;volatile
  2120  008C  0839               	movf	??_ADC_Sample+1,w
  2121  008D  1103               	clrz
  2122  008E  1803               	skipnc
  2123  008F  3E01               	addlw	1
  2124  0090  1D03               	btfss	3,2
  2125  0091  07C0               	addwf	ADC_Sample@adsum+1,f	;volatile
  2126  0092  083A               	movf	??_ADC_Sample+2,w
  2127  0093  1103               	clrz
  2128  0094  1803               	skipnc
  2129  0095  3E01               	addlw	1
  2130  0096  1D03               	btfss	3,2
  2131  0097  07C1               	addwf	ADC_Sample@adsum+2,f	;volatile
  2132  0098  083B               	movf	??_ADC_Sample+3,w
  2133  0099  1103               	clrz
  2134  009A  1803               	skipnc
  2135  009B  3E01               	addlw	1
  2136  009C  1D03               	btfss	3,2
  2137  009D  07C2               	addwf	ADC_Sample@adsum+3,f	;volatile
  2138  009E  300A               	movlw	10
  2139  009F  0ABE               	incf	ADC_Sample@i,f
  2140  00A0  023E               	subwf	ADC_Sample@i,w
  2141  00A1  1C03               	skipc
  2142  00A2  2834               	goto	l2366
  2143                           
  2144                           ;main.c: 877: }
  2145                           ;main.c: 878: adsum -= admax;
  2146  00A3  0845               	movf	ADC_Sample@admax,w	;volatile
  2147  00A4  00B8               	movwf	??_ADC_Sample
  2148  00A5  0846               	movf	ADC_Sample@admax+1,w	;volatile
  2149  00A6  20E3               	fcall	PL2	;call to abstracted procedure
  2150  00A7  1C03               	skipc
  2151  00A8  0F3B               	incfsz	??_ADC_Sample+3,w
  2152  00A9  02C2               	subwf	ADC_Sample@adsum+3,f	;volatile
  2153                           
  2154                           ;main.c: 879: if (adsum >= admin)
  2155  00AA  0843               	movf	ADC_Sample@admin,w	;volatile
  2156  00AB  00B8               	movwf	??_ADC_Sample
  2157  00AC  0844               	movf	ADC_Sample@admin+1,w	;volatile
  2158  00AD  00B9               	movwf	??_ADC_Sample+1
  2159  00AE  01BA               	clrf	??_ADC_Sample+2
  2160  00AF  01BB               	clrf	??_ADC_Sample+3
  2161  00B0  083B               	movf	??_ADC_Sample+3,w
  2162  00B1  0242               	subwf	ADC_Sample@adsum+3,w	;volatile
  2163  00B2  1D03               	skipz
  2164  00B3  28BE               	goto	u2275
  2165  00B4  083A               	movf	??_ADC_Sample+2,w
  2166  00B5  0241               	subwf	ADC_Sample@adsum+2,w	;volatile
  2167  00B6  1D03               	skipz
  2168  00B7  28BE               	goto	u2275
  2169  00B8  0839               	movf	??_ADC_Sample+1,w
  2170  00B9  0240               	subwf	ADC_Sample@adsum+1,w	;volatile
  2171  00BA  1D03               	skipz
  2172  00BB  28BE               	goto	u2275
  2173  00BC  0838               	movf	??_ADC_Sample,w
  2174  00BD  023F               	subwf	ADC_Sample@adsum,w	;volatile
  2175  00BE                     u2275:	
  2176  00BE  1C03               	skipc
  2177  00BF  28C8               	goto	l787
  2178                           
  2179                           ;main.c: 880: adsum -= admin;
  2180  00C0  0843               	movf	ADC_Sample@admin,w	;volatile
  2181  00C1  00B8               	movwf	??_ADC_Sample
  2182  00C2  0844               	movf	ADC_Sample@admin+1,w	;volatile
  2183  00C3  20E3               	fcall	PL2	;call to abstracted procedure
  2184  00C4  1C03               	skipc
  2185  00C5  0F3B               	incfsz	??_ADC_Sample+3,w
  2186  00C6  02C2               	subwf	ADC_Sample@adsum+3,f	;volatile
  2187  00C7  28CC               	goto	l2400
  2188  00C8                     l787:	
  2189                           
  2190                           ;main.c: 881: else
  2191                           ;main.c: 882: adsum = 0;
  2192  00C8  01BF               	clrf	ADC_Sample@adsum	;volatile
  2193  00C9  01C0               	clrf	ADC_Sample@adsum+1	;volatile
  2194  00CA  01C1               	clrf	ADC_Sample@adsum+2	;volatile
  2195  00CB  01C2               	clrf	ADC_Sample@adsum+3	;volatile
  2196  00CC                     l2400:	
  2197                           
  2198                           ;main.c: 884: adresult = adsum >> 3;
  2199  00CC  083F               	movf	ADC_Sample@adsum,w	;volatile
  2200  00CD  00B8               	movwf	??_ADC_Sample
  2201  00CE  0840               	movf	ADC_Sample@adsum+1,w	;volatile
  2202  00CF  00B9               	movwf	??_ADC_Sample+1
  2203  00D0  0841               	movf	ADC_Sample@adsum+2,w	;volatile
  2204  00D1  00BA               	movwf	??_ADC_Sample+2
  2205  00D2  0842               	movf	ADC_Sample@adsum+3,w	;volatile
  2206  00D3  00BB               	movwf	??_ADC_Sample+3
  2207  00D4  3003               	movlw	3
  2208  00D5                     u2295:	
  2209  00D5  1003               	clrc
  2210  00D6  0CBB               	rrf	??_ADC_Sample+3,f
  2211  00D7  0CBA               	rrf	??_ADC_Sample+2,f
  2212  00D8  0CB9               	rrf	??_ADC_Sample+1,f
  2213  00D9  0CB8               	rrf	??_ADC_Sample,f
  2214  00DA  3EFF               	addlw	-1
  2215  00DB  1D03               	skipz
  2216  00DC  28D5               	goto	u2295
  2217  00DD  0839               	movf	??_ADC_Sample+1,w
  2218  00DE  00A7               	movwf	_adresult+1	;volatile
  2219  00DF  0838               	movf	??_ADC_Sample,w
  2220  00E0  00A6               	movwf	_adresult	;volatile
  2221                           
  2222                           ;main.c: 886: adsum = 0;
  2223                           
  2224                           ;main.c: 887: admin = 0;
  2225                           
  2226                           ;main.c: 888: admax = 0;
  2227  00E1  20F2               	fcall	PL4	;call to abstracted procedure
  2228                           
  2229                           ;main.c: 889: return 0xA5;
  2230  00E2  34A5               	retlw	165
  2231  00E3                     __end_of_ADC_Sample:	
  2232  00E3                     PL2:	
  2233  00E3  00B9               	movwf	??_ADC_Sample+1
  2234  00E4  01BA               	clrf	??_ADC_Sample+2
  2235  00E5  01BB               	clrf	??_ADC_Sample+3
  2236  00E6  0838               	movf	??_ADC_Sample,w
  2237  00E7  02BF               	subwf	ADC_Sample@adsum,f	;volatile
  2238  00E8  0839               	movf	??_ADC_Sample+1,w
  2239  00E9  1C03               	skipc
  2240  00EA  0F39               	incfsz	??_ADC_Sample+1,w
  2241  00EB  02C0               	subwf	ADC_Sample@adsum+1,f	;volatile
  2242  00EC  083A               	movf	??_ADC_Sample+2,w
  2243  00ED  1C03               	skipc
  2244  00EE  0F3A               	incfsz	??_ADC_Sample+2,w
  2245  00EF  02C1               	subwf	ADC_Sample@adsum+2,f	;volatile
  2246  00F0  083B               	movf	??_ADC_Sample+3,w
  2247  00F1  0008               	return
  2248  00F2                     __end_ofPL2:	
  2249  00F2                     PL4:	
  2250  00F2  01BF               	clrf	ADC_Sample@adsum	;volatile
  2251  00F3  01C0               	clrf	ADC_Sample@adsum+1	;volatile
  2252  00F4  01C1               	clrf	ADC_Sample@adsum+2	;volatile
  2253  00F5  01C2               	clrf	ADC_Sample@adsum+3	;volatile
  2254  00F6  01C3               	clrf	ADC_Sample@admin	;volatile
  2255  00F7  01C4               	clrf	ADC_Sample@admin+1	;volatile
  2256  00F8  01C5               	clrf	ADC_Sample@admax	;volatile
  2257  00F9  01C6               	clrf	ADC_Sample@admax+1	;volatile
  2258  00FA  0008               	return
  2259  00FB                     __end_ofPL4:	
  2260  00FB                     PL8:	
  2261  00FB  0848               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2262  00FC  00C6               	movwf	ADC_Sample@admax+1	;volatile
  2263  00FD  0847               	movf	ADC_Sample@ad_temp,w	;volatile
  2264  00FE  00C5               	movwf	ADC_Sample@admax	;volatile
  2265  00FF  0008               	return
  2266  0100                     __end_ofPL8:	
  2267                           
  2268                           	psect	text12
  2269  02C6                     __ptext12:	
  2270 ;; *************** function _Sleep_Mode *****************
  2271 ;; Defined at:
  2272 ;;		line 748 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;		None
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;		None
  2277 ;; Return value:  Size  Location     Type
  2278 ;;                  1    wreg      void 
  2279 ;; Registers used:
  2280 ;;		wreg, status,2, status,0, pclath, cstack
  2281 ;; Tracked objects:
  2282 ;;		On entry : 100/0
  2283 ;;		On exit  : 100/100
  2284 ;;		Unchanged: 0/0
  2285 ;; Data sizes:     COMMON   BANK0   BANK1
  2286 ;;      Params:         0       0       0
  2287 ;;      Locals:         0       0       0
  2288 ;;      Temps:          0       0       0
  2289 ;;      Totals:         0       0       0
  2290 ;;Total ram usage:        0 bytes
  2291 ;; Hardware stack levels used:    1
  2292 ;; Hardware stack levels required when called:    3
  2293 ;; This function calls:
  2294 ;;		_AD_Init
  2295 ;;		_Init_System
  2296 ;; This function is called by:
  2297 ;;		_main
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           
  2302                           ;psect for function _Sleep_Mode
  2303  02C6                     _Sleep_Mode:	
  2304                           
  2305                           ;main.c: 750: INTCON = 0;
  2306                           
  2307                           ;incstack = 0
  2308                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  2309  02C6  018B               	clrf	11	;volatile
  2310                           
  2311                           ;main.c: 752: OPTION_REG = 0;
  2312  02C7  0181               	clrf	1	;volatile
  2313                           
  2314                           ;main.c: 754: WPUA = 0x00;
  2315  02C8  1683               	bsf	3,5	;RP0=1, select bank1
  2316  02C9  0188               	clrf	8	;volatile
  2317                           
  2318                           ;main.c: 755: TRISA = 0x01;
  2319  02CA  3001               	movlw	1
  2320                           
  2321                           ;main.c: 756: TRISB = 0x37;
  2322                           
  2323                           ;main.c: 758: PORTA = 0X00;
  2324                           
  2325                           ;main.c: 759: PORTB = 0X00;
  2326  02CB  22FF               	fcall	PL6	;call to abstracted procedure
  2327                           
  2328                           ;main.c: 760: WPUB = 0x04;
  2329  02CC  3004               	movlw	4
  2330  02CD  0088               	movwf	8	;volatile
  2331                           
  2332                           ;main.c: 762: ADCON0 = 0;
  2333  02CE  1683               	bsf	3,5	;RP0=1, select bank1
  2334  02CF  0195               	clrf	21	;volatile
  2335                           
  2336                           ;main.c: 763: ADCON1 = 0;
  2337  02D0  0196               	clrf	22	;volatile
  2338                           
  2339                           ;main.c: 765: PWMCON0 = 0;
  2340  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  2341  02D2  0195               	clrf	21	;volatile
  2342                           
  2343                           ;main.c: 767: OSCCON = 0X70;
  2344  02D3  3070               	movlw	112
  2345  02D4  0094               	movwf	20	;volatile
  2346                           
  2347                           ;main.c: 769: IOCA = 0B00000000;
  2348  02D5  1683               	bsf	3,5	;RP0=1, select bank1
  2349  02D6  0189               	clrf	9	;volatile
  2350                           
  2351                           ;main.c: 770: IOCB = 0x07;
  2352  02D7  3007               	movlw	7
  2353  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  2354  02D9  0089               	movwf	9	;volatile
  2355                           
  2356                           ;main.c: 772: RAIE = 1;
  2357  02DA  158E               	bsf	14,3	;volatile
  2358                           
  2359                           ;main.c: 773: PEIE = 1;
  2360  02DB  170B               	bsf	11,6	;volatile
  2361                           
  2362                           ;main.c: 774: RBIE = 1;
  2363  02DC  158B               	bsf	11,3	;volatile
  2364                           
  2365                           ;main.c: 775: GIE = 0;
  2366  02DD  138B               	bcf	11,7	;volatile
  2367                           
  2368                           ;main.c: 777: PIE1 &= 0X08;
  2369  02DE  3008               	movlw	8
  2370  02DF  058E               	andwf	14,f	;volatile
  2371                           
  2372                           ;main.c: 778: PIR1 = 0;
  2373  02E0  018D               	clrf	13	;volatile
  2374                           
  2375                           ;main.c: 779: INTCON &= 0XC8;
  2376  02E1  30C8               	movlw	200
  2377  02E2  058B               	andwf	11,f	;volatile
  2378                           
  2379                           ;main.c: 781: PORTA;
  2380  02E3  1683               	bsf	3,5	;RP0=1, select bank1
  2381  02E4  0806               	movf	6,w	;volatile
  2382                           
  2383                           ;main.c: 782: RAIF = 0;
  2384  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  2385  02E6  118D               	bcf	13,3	;volatile
  2386                           
  2387                           ;main.c: 783: PORTB;
  2388  02E7  0806               	movf	6,w	;volatile
  2389                           
  2390                           ;main.c: 784: RBIF = 0;
  2391  02E8  100B               	bcf	11,0	;volatile
  2392  02E9  0064               	clrwdt	;# 
  2393  02EA  0063               	sleep	;# 
  2394  02EB  0000               	nop	;# 
  2395  02EC  0064               	clrwdt	;# 
  2396  02ED  0000               	nop	;# 
  2397  02EE  0000               	nop	;# 
  2398  02EF  0000               	nop	;# 
  2399  02F0  0000               	nop	;# 
  2400  02F1  0000               	nop	;# 
  2401                           
  2402                           ;main.c: 796: if(RAIF) RAIF = 0;
  2403  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  2404  02F3  198D               	btfsc	13,3	;volatile
  2405  02F4  118D               	bcf	13,3	;volatile
  2406                           
  2407                           ;main.c: 797: if(RBIF) RBIF = 0;
  2408  02F5  180B               	btfsc	11,0	;volatile
  2409  02F6  100B               	bcf	11,0	;volatile
  2410                           
  2411                           ;main.c: 798: if(TMR2IF) TMR2IF = 0;
  2412  02F7  188D               	btfsc	13,1	;volatile
  2413  02F8  108D               	bcf	13,1	;volatile
  2414                           
  2415                           ;main.c: 799: IOCA = 0B00000000;
  2416  02F9  1683               	bsf	3,5	;RP0=1, select bank1
  2417  02FA  0189               	clrf	9	;volatile
  2418                           
  2419                           ;main.c: 800: IOCB = 0B00000000;
  2420  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  2421  02FC  0189               	clrf	9	;volatile
  2422                           
  2423                           ;main.c: 801: Init_System();
  2424  02FD  23E7               	fcall	_Init_System
  2425                           
  2426                           ;main.c: 802: AD_Init();
  2427  02FE  2C5B               	ljmp	l1786
  2428  02FF                     __end_of_Sleep_Mode:	
  2429  02FF                     PL6:	
  2430  02FF  0085               	movwf	5	;volatile
  2431  0300  3037               	movlw	55
  2432  0301  1283               	bcf	3,5	;RP0=0, select bank0
  2433  0302  0085               	movwf	5	;volatile
  2434  0303  1683               	bsf	3,5	;RP0=1, select bank1
  2435  0304  0186               	clrf	6	;volatile
  2436  0305  1283               	bcf	3,5	;RP0=0, select bank0
  2437  0306  0186               	clrf	6	;volatile
  2438  0307  0008               	return
  2439  0308                     __end_ofPL6:	
  2440                           
  2441                           	psect	text13
  2442  03E7                     __ptext13:	
  2443 ;; *************** function _Init_System *****************
  2444 ;; Defined at:
  2445 ;;		line 624 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;		None
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;		None
  2450 ;; Return value:  Size  Location     Type
  2451 ;;                  1    wreg      void 
  2452 ;; Registers used:
  2453 ;;		wreg, status,2
  2454 ;; Tracked objects:
  2455 ;;		On entry : 100/0
  2456 ;;		On exit  : 100/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMMON   BANK0   BANK1
  2459 ;;      Params:         0       0       0
  2460 ;;      Locals:         0       0       0
  2461 ;;      Temps:          0       0       0
  2462 ;;      Totals:         0       0       0
  2463 ;;Total ram usage:        0 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    2
  2466 ;; This function calls:
  2467 ;;		Nothing
  2468 ;; This function is called by:
  2469 ;;		_main
  2470 ;;		_Sleep_Mode
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           
  2475                           ;psect for function _Init_System
  2476  03E7                     _Init_System:	
  2477                           
  2478                           ;incstack = 0
  2479                           ; Regs used in _Init_System: [wreg+status,2]
  2480  03E7  0000               	nop	;# 
  2481  03E8  0064               	clrwdt	;# 
  2482                           
  2483                           ;main.c: 628: OPTION_REG = 0;
  2484  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  2485  03EA  0181               	clrf	1	;volatile
  2486  03EB  0064               	clrwdt	;# 
  2487                           
  2488                           ;main.c: 630: OSCCON = 0X72;
  2489  03EC  3072               	movlw	114
  2490  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  2491  03EE  0094               	movwf	20	;volatile
  2492                           
  2493                           ;main.c: 632: WPUA = 0x00;
  2494  03EF  1683               	bsf	3,5	;RP0=1, select bank1
  2495  03F0  0188               	clrf	8	;volatile
  2496                           
  2497                           ;main.c: 633: WPDA = 0x00;
  2498  03F1  0187               	clrf	7	;volatile
  2499                           
  2500                           ;main.c: 634: WPUB = 0x04;
  2501  03F2  3004               	movlw	4
  2502  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  2503  03F4  0088               	movwf	8	;volatile
  2504                           
  2505                           ;main.c: 636: TRISA = 0x01;
  2506  03F5  3001               	movlw	1
  2507  03F6  1683               	bsf	3,5	;RP0=1, select bank1
  2508                           
  2509                           ;main.c: 637: TRISB = 0x37;
  2510                           
  2511                           ;main.c: 639: PORTA = 0X00;
  2512                           
  2513                           ;main.c: 640: PORTB = 0X00;
  2514  03F7  22FF               	fcall	PL6	;call to abstracted procedure
  2515                           
  2516                           ;main.c: 644: PR2 = 249;
  2517  03F8  30F9               	movlw	249
  2518  03F9  0091               	movwf	17	;volatile
  2519                           
  2520                           ;main.c: 645: TMR2IF = 0;
  2521  03FA  108D               	bcf	13,1	;volatile
  2522                           
  2523                           ;main.c: 646: TMR2IE = 1;
  2524  03FB  148E               	bsf	14,1	;volatile
  2525                           
  2526                           ;main.c: 648: T2CON = 0B00000100;
  2527  03FC  3004               	movlw	4
  2528  03FD  0093               	movwf	19	;volatile
  2529                           
  2530                           ;main.c: 649: INTCON = 0XC0;
  2531  03FE  30C0               	movlw	192
  2532  03FF  008B               	movwf	11	;volatile
  2533  0400  0008               	return
  2534  0401                     __end_of_Init_System:	
  2535                           
  2536                           	psect	text14
  2537  045B                     __ptext14:	
  2538 ;; *************** function _AD_Init *****************
  2539 ;; Defined at:
  2540 ;;		line 661 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;		None
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;		None
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg, status,2
  2549 ;; Tracked objects:
  2550 ;;		On entry : 100/0
  2551 ;;		On exit  : 100/100
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMMON   BANK0   BANK1
  2554 ;;      Params:         0       0       0
  2555 ;;      Locals:         0       0       0
  2556 ;;      Temps:          0       0       0
  2557 ;;      Totals:         0       0       0
  2558 ;;Total ram usage:        0 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; Hardware stack levels required when called:    2
  2561 ;; This function calls:
  2562 ;;		Nothing
  2563 ;; This function is called by:
  2564 ;;		_main
  2565 ;;		_Sleep_Mode
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569                           
  2570                           ;psect for function _AD_Init
  2571  045B                     _AD_Init:	
  2572  045B                     l1786:	
  2573                           ;incstack = 0
  2574                           ; Regs used in _AD_Init: [wreg+status,2]
  2575                           
  2576                           
  2577                           ;main.c: 694: ADCON0 = 0X41;
  2578  045B  3041               	movlw	65
  2579  045C  1683               	bsf	3,5	;RP0=1, select bank1
  2580  045D  0095               	movwf	21	;volatile
  2581                           
  2582                           ;main.c: 711: ADCON1 = 0;
  2583  045E  0196               	clrf	22	;volatile
  2584                           
  2585                           ;main.c: 712: ANSEL0 = 0X00;
  2586  045F  0193               	clrf	19	;volatile
  2587                           
  2588                           ;main.c: 713: ANSEL1 = 0x30;
  2589  0460  3030               	movlw	48
  2590  0461  0094               	movwf	20	;volatile
  2591  0462  0008               	return
  2592  0463                     __end_of_AD_Init:	
  2593                           
  2594                           	psect	text15
  2595  0393                     __ptext15:	
  2596 ;; *************** function _Isr_Timer *****************
  2597 ;; Defined at:
  2598 ;;		line 93 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;		None
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;		None
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      void 
  2605 ;; Registers used:
  2606 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 100/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMMON   BANK0   BANK1
  2612 ;;      Params:         0       0       0
  2613 ;;      Locals:         0       0       0
  2614 ;;      Temps:          3       0       0
  2615 ;;      Totals:         3       0       0
  2616 ;;Total ram usage:        3 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    1
  2619 ;; This function calls:
  2620 ;;		_ledShow
  2621 ;; This function is called by:
  2622 ;;		Interrupt level 1
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           
  2627                           ;psect for function _Isr_Timer
  2628  0393                     _Isr_Timer:	
  2629                           
  2630                           ;main.c: 95: if(TMR2IF)
  2631  0393  1283               	bcf	3,5	;RP0=0, select bank0
  2632  0394  1C8D               	btfss	13,1	;volatile
  2633  0395  2BA7               	goto	i1l612
  2634                           
  2635                           ;main.c: 96: {
  2636                           ;main.c: 97: TMR2IF = 0;
  2637  0396  108D               	bcf	13,1	;volatile
  2638                           
  2639                           ;main.c: 98: if(++intCount >= 160)
  2640  0397  30A0               	movlw	160
  2641  0398  0AB6               	incf	_intCount,f
  2642  0399  0236               	subwf	_intCount,w
  2643  039A  1C03               	skipc
  2644  039B  2BA4               	goto	i1l2268
  2645  039C  3064               	movlw	100
  2646                           
  2647                           ;main.c: 99: {
  2648                           ;main.c: 100: intCount = 0;
  2649  039D  01B6               	clrf	_intCount
  2650                           
  2651                           ;main.c: 101: IntFlag = 1;
  2652  039E  01B4               	clrf	_IntFlag
  2653  039F  0AB4               	incf	_IntFlag,f
  2654                           
  2655                           ;main.c: 102: if(++count1s >= 100)
  2656  03A0  0AB5               	incf	_count1s,f
  2657  03A1  0235               	subwf	_count1s,w
  2658  03A2  1803               	btfsc	3,0
  2659                           
  2660                           ;main.c: 103: {
  2661                           ;main.c: 104: count1s = 0;
  2662  03A3  01B5               	clrf	_count1s
  2663  03A4                     i1l2268:	
  2664                           
  2665                           ;main.c: 105: }
  2666                           ;main.c: 106: }
  2667                           ;main.c: 107: ledShow();
  2668  03A4  2238               	fcall	_ledShow
  2669                           
  2670                           ;main.c: 108: intCount10++;
  2671  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  2672  03A6  0AB2               	incf	_intCount10,f
  2673  03A7                     i1l612:	
  2674  03A7  0872               	movf	??_Isr_Timer+2,w
  2675  03A8  008A               	movwf	10
  2676  03A9  0871               	movf	??_Isr_Timer+1,w
  2677  03AA  0084               	movwf	4
  2678  03AB  0E70               	swapf	??_Isr_Timer^(0+-128),w
  2679  03AC  0083               	movwf	3
  2680  03AD  0EFE               	swapf	126,f
  2681  03AE  0E7E               	swapf	126,w
  2682  03AF  0009               	retfie
  2683  03B0                     __end_of_Isr_Timer:	
  2684                           
  2685                           	psect	intentry
  2686  0004                     __pintentry:	
  2687                           ;incstack = 0
  2688                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2689                           
  2690  0004                     interrupt_function:	
  2691  007E                     saved_w	set	btemp
  2692  0004  00FE               	movwf	btemp
  2693  0005  0E03               	swapf	3,w
  2694  0006  00F0               	movwf	??_Isr_Timer
  2695  0007  0804               	movf	4,w
  2696  0008  00F1               	movwf	??_Isr_Timer+1
  2697  0009  080A               	movf	10,w
  2698  000A  00F2               	movwf	??_Isr_Timer+2
  2699  000B  2B93               	ljmp	_Isr_Timer
  2700                           
  2701                           	psect	text16
  2702  0238                     __ptext16:	
  2703 ;; *************** function _ledShow *****************
  2704 ;; Defined at:
  2705 ;;		line 159 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;		None
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;		None
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      void 
  2712 ;; Registers used:
  2713 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2714 ;; Tracked objects:
  2715 ;;		On entry : 100/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMMON   BANK0   BANK1
  2719 ;;      Params:         0       0       0
  2720 ;;      Locals:         0       0       0
  2721 ;;      Temps:          0       0       0
  2722 ;;      Totals:         0       0       0
  2723 ;;Total ram usage:        0 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; This function calls:
  2726 ;;		Nothing
  2727 ;; This function is called by:
  2728 ;;		_Isr_Timer
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           
  2733                           ;psect for function _ledShow
  2734  0238                     _ledShow:	
  2735                           
  2736                           ;main.c: 161: if(++ledCntTime > 5)
  2737                           
  2738                           ;incstack = 0
  2739                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  2740  0238  3006               	movlw	6
  2741  0239  0AAD               	incf	_ledCntTime,f
  2742  023A  022D               	subwf	_ledCntTime,w
  2743  023B  1C03               	skipc
  2744  023C  0008               	return
  2745  023D  300E               	movlw	14
  2746                           
  2747                           ;main.c: 162: {
  2748                           ;main.c: 163: ledCntTime = 0;
  2749  023E  01AD               	clrf	_ledCntTime
  2750                           
  2751                           ;main.c: 164: if(++ledCnt > 13)
  2752  023F  0AAF               	incf	_ledCnt,f
  2753  0240  022F               	subwf	_ledCnt,w
  2754  0241  1803               	btfsc	3,0
  2755                           
  2756                           ;main.c: 165: {
  2757                           ;main.c: 166: ledCnt = 0;
  2758  0242  01AF               	clrf	_ledCnt
  2759                           
  2760                           ;main.c: 167: }
  2761                           ;main.c: 168: PORTA &= 0xC1;
  2762  0243  30C1               	movlw	193
  2763  0244  1683               	bsf	3,5	;RP0=1, select bank1
  2764  0245  0586               	andwf	6,f	;volatile
  2765                           
  2766                           ;main.c: 169: TRISA |= 0x3E;
  2767  0246  303E               	movlw	62
  2768  0247  0485               	iorwf	5,f	;volatile
  2769                           
  2770                           ;main.c: 170: switch(ledCnt)
  2771  0248  2AB9               	goto	i1l1990
  2772  0249                     i1l632:	
  2773                           ;main.c: 171: {
  2774                           ;main.c: 172: case 1:
  2775                           
  2776                           
  2777                           ;main.c: 173: if(shiweiNum & 0x01)
  2778  0249  1C4A               	btfss	_shiweiNum,0
  2779  024A  0008               	return
  2780                           
  2781                           ;main.c: 174: {
  2782                           ;main.c: 175: TRISA &= 0xFD;
  2783  024B  1683               	bsf	3,5	;RP0=1, select bank1
  2784  024C  1085               	bcf	5,1	;volatile
  2785                           
  2786                           ;main.c: 176: TRISA &= 0xDF;
  2787  024D  1285               	bcf	5,5	;volatile
  2788                           
  2789                           ;main.c: 177: RA1 = 1;
  2790  024E  1486               	bsf	6,1	;volatile
  2791                           
  2792                           ;main.c: 178: RA5 = 0;
  2793  024F  1286               	bcf	6,5	;volatile
  2794  0250  0008               	return
  2795  0251                     i1l635:	
  2796                           ;main.c: 181: case 2:
  2797                           
  2798                           
  2799                           ;main.c: 182: if(shiweiNum & 0x02)
  2800  0251  1CCA               	btfss	_shiweiNum,1
  2801  0252  0008               	return
  2802                           
  2803                           ;main.c: 183: {
  2804                           ;main.c: 184: TRISA &= 0xF7;
  2805  0253  1683               	bsf	3,5	;RP0=1, select bank1
  2806  0254  1185               	bcf	5,3	;volatile
  2807                           
  2808                           ;main.c: 185: TRISA &= 0xFD;
  2809  0255  1085               	bcf	5,1	;volatile
  2810                           
  2811                           ;main.c: 186: RA1 = 1;
  2812  0256  1486               	bsf	6,1	;volatile
  2813                           
  2814                           ;main.c: 187: RA3 = 0;
  2815  0257  1186               	bcf	6,3	;volatile
  2816  0258  0008               	return
  2817  0259                     i1l637:	
  2818                           ;main.c: 190: case 3:
  2819                           
  2820                           
  2821                           ;main.c: 191: if(shiweiNum & 0x04)
  2822  0259  1D4A               	btfss	_shiweiNum,2
  2823  025A  0008               	return
  2824                           
  2825                           ;main.c: 192: {
  2826                           ;main.c: 193: TRISA &= 0xF7;
  2827  025B  1683               	bsf	3,5	;RP0=1, select bank1
  2828  025C  1185               	bcf	5,3	;volatile
  2829                           
  2830                           ;main.c: 194: TRISA &= 0xEF;
  2831  025D  1205               	bcf	5,4	;volatile
  2832                           
  2833                           ;main.c: 195: RA4 = 1;
  2834  025E  1606               	bsf	6,4	;volatile
  2835                           
  2836                           ;main.c: 196: RA3 = 0;
  2837  025F  1186               	bcf	6,3	;volatile
  2838  0260  0008               	return
  2839  0261                     i1l639:	
  2840                           ;main.c: 199: case 4:
  2841                           
  2842                           
  2843                           ;main.c: 200: if(shiweiNum & 0x08)
  2844  0261  1DCA               	btfss	_shiweiNum,3
  2845  0262  0008               	return
  2846                           
  2847                           ;main.c: 201: {
  2848                           ;main.c: 202: TRISA &= 0xEF;
  2849  0263  1683               	bsf	3,5	;RP0=1, select bank1
  2850  0264  1205               	bcf	5,4	;volatile
  2851                           
  2852                           ;main.c: 203: TRISA &= 0xDF;
  2853  0265  1285               	bcf	5,5	;volatile
  2854                           
  2855                           ;main.c: 204: RA5 = 1;
  2856  0266  1686               	bsf	6,5	;volatile
  2857                           
  2858                           ;main.c: 205: RA4 = 0;
  2859  0267  1206               	bcf	6,4	;volatile
  2860  0268  0008               	return
  2861  0269                     i1l641:	
  2862                           ;main.c: 208: case 5:
  2863                           
  2864                           
  2865                           ;main.c: 209: if(shiweiNum & 0x10)
  2866  0269  1E4A               	btfss	_shiweiNum,4
  2867  026A  0008               	return
  2868                           
  2869                           ;main.c: 210: {
  2870                           ;main.c: 211: TRISA &= 0xDF;
  2871  026B  1683               	bsf	3,5	;RP0=1, select bank1
  2872  026C  1285               	bcf	5,5	;volatile
  2873                           
  2874                           ;main.c: 212: TRISA &= 0xF7;
  2875  026D  1185               	bcf	5,3	;volatile
  2876                           
  2877                           ;main.c: 213: RA3 = 1;
  2878  026E  1586               	bsf	6,3	;volatile
  2879                           
  2880                           ;main.c: 214: RA5 = 0;
  2881  026F  1286               	bcf	6,5	;volatile
  2882  0270  0008               	return
  2883  0271                     i1l643:	
  2884                           ;main.c: 217: case 6:
  2885                           
  2886                           
  2887                           ;main.c: 218: if(shiweiNum & 0x20)
  2888  0271  1ECA               	btfss	_shiweiNum,5
  2889  0272  0008               	return
  2890                           
  2891                           ;main.c: 219: {
  2892                           ;main.c: 220: TRISA &= 0xDF;
  2893  0273  1683               	bsf	3,5	;RP0=1, select bank1
  2894  0274  1285               	bcf	5,5	;volatile
  2895                           
  2896                           ;main.c: 221: TRISA &= 0xFD;
  2897  0275  1085               	bcf	5,1	;volatile
  2898                           
  2899                           ;main.c: 222: RA5 = 1;
  2900  0276  1686               	bsf	6,5	;volatile
  2901                           
  2902                           ;main.c: 223: RA1 = 0;
  2903  0277  1086               	bcf	6,1	;volatile
  2904  0278  0008               	return
  2905  0279                     i1l645:	
  2906                           ;main.c: 226: case 7:
  2907                           
  2908                           
  2909                           ;main.c: 227: if(shiweiNum & 0x40)
  2910  0279  1F4A               	btfss	_shiweiNum,6
  2911  027A  0008               	return
  2912                           
  2913                           ;main.c: 228: {
  2914                           ;main.c: 229: TRISA &= 0xDF;
  2915  027B  1683               	bsf	3,5	;RP0=1, select bank1
  2916  027C  1285               	bcf	5,5	;volatile
  2917                           
  2918                           ;main.c: 230: TRISA &= 0xF7;
  2919  027D  1185               	bcf	5,3	;volatile
  2920                           
  2921                           ;main.c: 231: RA5 = 1;
  2922  027E  1686               	bsf	6,5	;volatile
  2923                           
  2924                           ;main.c: 232: RA3 = 0;
  2925  027F  1186               	bcf	6,3	;volatile
  2926  0280  0008               	return
  2927  0281                     i1l647:	
  2928                           ;main.c: 235: case 8:
  2929                           
  2930                           
  2931                           ;main.c: 236: if(geweiNum & 0x01)
  2932  0281  1C49               	btfss	_geweiNum,0
  2933  0282  0008               	return
  2934                           
  2935                           ;main.c: 237: {
  2936                           ;main.c: 238: TRISA &= 0xFB;
  2937  0283  1683               	bsf	3,5	;RP0=1, select bank1
  2938  0284  1105               	bcf	5,2	;volatile
  2939                           
  2940                           ;main.c: 239: TRISA &= 0xFD;
  2941  0285  1085               	bcf	5,1	;volatile
  2942                           
  2943                           ;main.c: 240: RA2 = 1;
  2944  0286  1506               	bsf	6,2	;volatile
  2945                           
  2946                           ;main.c: 241: RA1 = 0;
  2947  0287  1086               	bcf	6,1	;volatile
  2948  0288  0008               	return
  2949  0289                     i1l649:	
  2950                           ;main.c: 244: case 9:
  2951                           
  2952                           
  2953                           ;main.c: 245: if(geweiNum & 0x02)
  2954  0289  1CC9               	btfss	_geweiNum,1
  2955  028A  0008               	return
  2956                           
  2957                           ;main.c: 246: {
  2958                           ;main.c: 247: TRISA &= 0xFD;
  2959  028B  1683               	bsf	3,5	;RP0=1, select bank1
  2960  028C  1085               	bcf	5,1	;volatile
  2961                           
  2962                           ;main.c: 248: TRISA &= 0xFB;
  2963  028D  1105               	bcf	5,2	;volatile
  2964                           
  2965                           ;main.c: 249: RA1 = 1;
  2966  028E  1486               	bsf	6,1	;volatile
  2967                           
  2968                           ;main.c: 250: RA2 = 0;
  2969  028F  1106               	bcf	6,2	;volatile
  2970  0290  0008               	return
  2971  0291                     i1l651:	
  2972                           ;main.c: 253: case 10:
  2973                           
  2974                           
  2975                           ;main.c: 254: if(geweiNum & 0x04)
  2976  0291  1D49               	btfss	_geweiNum,2
  2977  0292  0008               	return
  2978                           
  2979                           ;main.c: 255: {
  2980                           ;main.c: 256: TRISA &= 0xFB;
  2981  0293  1683               	bsf	3,5	;RP0=1, select bank1
  2982  0294  1105               	bcf	5,2	;volatile
  2983                           
  2984                           ;main.c: 257: TRISA &= 0xF7;
  2985  0295  1185               	bcf	5,3	;volatile
  2986                           
  2987                           ;main.c: 258: RA3 = 1;
  2988  0296  1586               	bsf	6,3	;volatile
  2989                           
  2990                           ;main.c: 259: RA2 = 0;
  2991  0297  1106               	bcf	6,2	;volatile
  2992  0298  0008               	return
  2993  0299                     i1l653:	
  2994                           ;main.c: 262: case 11:
  2995                           
  2996                           
  2997                           ;main.c: 263: if(geweiNum & 0x08)
  2998  0299  1DC9               	btfss	_geweiNum,3
  2999  029A  0008               	return
  3000                           
  3001                           ;main.c: 264: {
  3002                           ;main.c: 265: TRISA &= 0xDF;
  3003  029B  1683               	bsf	3,5	;RP0=1, select bank1
  3004  029C  1285               	bcf	5,5	;volatile
  3005                           
  3006                           ;main.c: 266: TRISA &= 0xEF;
  3007  029D  1205               	bcf	5,4	;volatile
  3008                           
  3009                           ;main.c: 267: RA4 = 1;
  3010  029E  1606               	bsf	6,4	;volatile
  3011                           
  3012                           ;main.c: 268: RA5 = 0;
  3013  029F  1286               	bcf	6,5	;volatile
  3014  02A0  0008               	return
  3015  02A1                     i1l655:	
  3016                           ;main.c: 271: case 12:
  3017                           
  3018                           
  3019                           ;main.c: 272: if(geweiNum & 0x10)
  3020  02A1  1E49               	btfss	_geweiNum,4
  3021  02A2  0008               	return
  3022                           
  3023                           ;main.c: 273: {
  3024                           ;main.c: 274: TRISA &= 0xF7;
  3025  02A3  1683               	bsf	3,5	;RP0=1, select bank1
  3026  02A4  1185               	bcf	5,3	;volatile
  3027                           
  3028                           ;main.c: 275: TRISA &= 0xEF;
  3029  02A5  1205               	bcf	5,4	;volatile
  3030                           
  3031                           ;main.c: 276: RA3 = 1;
  3032  02A6  1586               	bsf	6,3	;volatile
  3033                           
  3034                           ;main.c: 277: RA4 = 0;
  3035  02A7  1206               	bcf	6,4	;volatile
  3036  02A8  0008               	return
  3037  02A9                     i1l657:	
  3038                           ;main.c: 280: case 13:
  3039                           
  3040                           
  3041                           ;main.c: 281: if(geweiNum & 0x20)
  3042  02A9  1EC9               	btfss	_geweiNum,5
  3043  02AA  0008               	return
  3044                           
  3045                           ;main.c: 282: {
  3046                           ;main.c: 283: TRISA &= 0xF7;
  3047  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  3048  02AC  1185               	bcf	5,3	;volatile
  3049                           
  3050                           ;main.c: 284: TRISA &= 0xFD;
  3051  02AD  1085               	bcf	5,1	;volatile
  3052                           
  3053                           ;main.c: 285: RA3 = 1;
  3054  02AE  1586               	bsf	6,3	;volatile
  3055                           
  3056                           ;main.c: 286: RA1 = 0;
  3057  02AF  1086               	bcf	6,1	;volatile
  3058  02B0  0008               	return
  3059  02B1                     i1l659:	
  3060                           ;main.c: 289: case 0:
  3061                           
  3062                           
  3063                           ;main.c: 290: if(geweiNum & 0x40)
  3064  02B1  1F49               	btfss	_geweiNum,6
  3065  02B2  0008               	return
  3066                           
  3067                           ;main.c: 291: {
  3068                           ;main.c: 292: TRISA &= 0xFB;
  3069  02B3  1683               	bsf	3,5	;RP0=1, select bank1
  3070  02B4  1105               	bcf	5,2	;volatile
  3071                           
  3072                           ;main.c: 293: TRISA &= 0xF7;
  3073  02B5  1185               	bcf	5,3	;volatile
  3074                           
  3075                           ;main.c: 294: RA2 = 1;
  3076  02B6  1506               	bsf	6,2	;volatile
  3077                           
  3078                           ;main.c: 295: RA3 = 0;
  3079  02B7  1186               	bcf	6,3	;volatile
  3080  02B8  0008               	return
  3081  02B9                     i1l1990:	
  3082  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  3083  02BA  082F               	movf	_ledCnt,w
  3084                           
  3085                           ; Switch size 1, requested type "space"
  3086                           ; Number of cases is 14, Range of values is 0 to 13
  3087                           ; switch strategies available:
  3088                           ; Name         Instructions Cycles
  3089                           ; direct_byte           20     6 (fixed)
  3090                           ; simple_byte           43    22 (average)
  3091                           ; jumptable            260     6 (fixed)
  3092                           ;	Chosen strategy is direct_byte
  3093  02BB  0084               	movwf	4
  3094  02BC  300E               	movlw	14
  3095  02BD  0204               	subwf	4,w
  3096  02BE  1803               	skipnc
  3097  02BF  0008               	return
  3098  02C0  3004               	movlw	high i1S2692
  3099  02C1  008A               	movwf	10
  3100  02C2  3039               	movlw	low i1S2692
  3101  02C3  0704               	addwf	4,w
  3102  02C4  0082               	movwf	2
  3103  02C5  0008               	return
  3104  02C6                     __end_of_ledShow:	
  3105  007E                     btemp	set	126	;btemp
  3106  007E                     wtemp0	set	126
  3107                           
  3108                           	psect	swtext1
  3109  0439                     __pswtext1:	
  3110  0439                     i1S2692:	
  3111  0439  2AB1               	ljmp	i1l659
  3112  043A  2A49               	ljmp	i1l632
  3113  043B  2A51               	ljmp	i1l635
  3114  043C  2A59               	ljmp	i1l637
  3115  043D  2A61               	ljmp	i1l639
  3116  043E  2A69               	ljmp	i1l641
  3117  043F  2A71               	ljmp	i1l643
  3118  0440  2A79               	ljmp	i1l645
  3119  0441  2A81               	ljmp	i1l647
  3120  0442  2A89               	ljmp	i1l649
  3121  0443  2A91               	ljmp	i1l651
  3122  0444  2A99               	ljmp	i1l653
  3123  0445  2AA1               	ljmp	i1l655
  3124  0446  2AA9               	ljmp	i1l657


Data Sizes:
    Strings     0
    Constant    12
    Data        0
    BSS         28
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     17      44
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->___lbdiv
    _setBatStep->___lwdiv
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___lbmod
    _setBatStep->___lwdiv
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1860
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                            _chrgCtr
                             _keyCtr
                         _setBatStep
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0     512
                            ___lbdiv
                            ___lbmod
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     297
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     215
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _setBatStep                                           0     0      0     501
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           5     5      0     847
                                              4 COMMON     1     1      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     847
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _chrgCtr
   _keyCtr
   _setBatStep
     ___lwdiv
   _workCtr
     ___lbdiv
     ___lbmod
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     11      2C       4       55.0%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      37       7        0.0%
DATA                 0      0      37       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 28 16:52:34 2025

                      pc 0002                       PL2 00E3                       PL4 00F2  
                     PL6 02FF                       PL8 00FB                       fsr 0004  
                    l617 0312                      l730 01C9                      l727 01CB  
                    l728 01C7                      l783 0084                      l777 0049  
                    l787 00C8                      _GIE 005F                      _RA1 0431  
                    _RA2 0432                      _RA3 0433                      _RA4 0434  
                    _RA5 0435                      _RB3 0033                      _PR2 0011  
    __size_of_ADC_Sample 00CB                      fsr0 0004                      indf 0000  
        __end_of_AD_Init 0463                     l2012 037E                     l2022 0391  
                   l2006 0374                     l2110 0451                     l1054 03D8  
                   l2108 044E                     l2400 00CC                     l2350 0029  
                   l2510 0205                     l2360 0033                     l2352 002B  
                   l2440 034D                     l2520 021E                     l2424 03C8  
                   l2416 03B4                     l2610 018D                     l2602 0174  
                   l2452 0364                     l2508 0217                     l1900 03E5  
                   l2612 018F                     l2540 010E                     l2390 0080  
                   l2366 0034                     l2462 040F                     l2518 021B  
                   l2622 019D                     l2614 0198                     l2384 006E  
                   l2376 0054                     l2552 011B                     l2490 01E3  
                   l2618 0189                     l2562 012F                     l2388 0078  
                   l2476 01B4                     l2572 0140                     l2580 0148  
                   l2556 0124                     l2652 0326                     l2486 01CE  
                   l2590 015B                     l2566 0133                     l2670 033D  
                   l2496 01F8                     l2576 0144                     l1786 045B  
                   l2586 0157                     l2594 015F                     l1886 03D2  
                   l2598 0166                     _CHS4 04B6                     _IOCA 0089  
                   _IOCB 0009                     u2225 0074                     u2235 007E  
                   u2275 00BE                     u2355 0356                     u2295 00D5  
                   _PIE1 000E                     u2907 0025                     _PEIE 005E  
                   _RAIE 0073                     _RAIF 006B                     _RBIE 005B  
                   _RBIF 0058                     u2897 0414                     _PIR1 000D  
                   _WPDA 0087                     _WPUA 0088                     _WPUB 0008  
                   _main 0308                     btemp 007E                     start 000C  
          ??_Init_System 0073                    ?_main 0070          __end_of___lbdiv 03E7  
        __end_of___lbmod 03CC                    _T2CON 0013          __end_of___lwdiv 0369  
                  i1l612 03A7                    i1l632 0249                    i1l641 0269  
                  i1l651 0291                    i1l643 0271                    i1l635 0251  
                  i1l653 0299                    i1l645 0279                    i1l637 0259  
                  i1l655 02A1                    i1l647 0281                    i1l639 0261  
                  i1l657 02A9                    i1l649 0289                    i1l659 02B1  
                  _PORTA 0086                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0005                    _PWMTH 0018                    _PWMTL 0017  
        __end_of_chrgCtr 0393          __end_of_ledShow 02C6                    pclath 000A  
        __end_of_pwmInit 0439          __end_of_pwmStop 0467                    status 0003  
                  wtemp0 007E          __end_of_workCtr 01A3          ___lbdiv@divisor 0073  
        ___lbdiv@counter 0075          __initialization 000D             __end_of_main 033F  
                 ??_main 0077                ??_AD_Init 0073      __end_of_Init_System 0401  
                 _ADCON0 0095                   _ADCON1 0096                   i1S2692 0439  
                 _ADRESH 0099                   _ADRESL 0098                   _ANSEL0 0093  
                 _ANSEL1 0094                   _GODONE 04A9                   i1l2268 03A4  
                 i1l1990 02B9                   _LDO_EN 04B2                   _INTCON 000B  
                 _OSCCON 0014                   _TMR2IE 0071                   _TMR2IF 0069  
                 _PWMD2L 009B             ??_ADC_Sample 0038       __size_of_Isr_Timer 001D  
             _Sleep_Mode 02C6                ??___lbdiv 0074                ??___lbmod 0074  
                 _ledCnt 002F                ??___lwdiv 0077                   _keyCtr 0447  
              ??_chrgCtr 0073                   _result 0024                ??_ledShow 0070  
       __end_of_numArray 0429       __end_of_ADC_Sample 00E3                   saved_w 007E  
              ??_pwmInit 0073                ??_pwmStop 0073                ??_workCtr 0077  
       ___lbdiv@dividend 0074          ___lbmod@divisor 0073  __end_of__initialization 0016  
        ___lbmod@counter 0039           __pcstackCOMMON 0070              _Init_System 03E7  
             __end_ofPL2 00F2               __end_ofPL4 00FB               __end_ofPL6 0308  
             __end_ofPL8 0100         ___lbdiv@quotient 0076        __end_of_Isr_Timer 03B0  
             _checkBatAD 0401               __pbssBANK0 0020             _chrgFullFlag 0033  
           _chrgFullTime 0031              ?_Sleep_Mode 0070               __pmaintext 0308  
             __pintentry 0004                  ?_keyCtr 0070               _ledCntTime 002D  
                _AD_Init 045B               _curBatStep 0029                  _PWM23DT 009D  
                _PWMD23H 009E                  _PWMCON0 0015                  _PWMCON1 0016  
                _PWMCON2 001D               __stringtab 0417                  _IntFlag 0034  
             _intCount10 0032          ADC_Sample@adldo 0073          ADC_Sample@admax 0045  
        ADC_Sample@admin 0043          ADC_Sample@adsum 003F                  ___lbdiv 03CC  
                ___lbmod 03B0                  ___lwdiv 033F          __size_of_keyCtr 000C  
                _chrgCtr 0369               _lowBatFlag 002C                  __ptext1 0100  
                __ptext2 0463                  __ptext3 0429                  __ptext4 03B0  
                __ptext5 03CC                  __ptext6 01A3                  __ptext7 033F  
                __ptext8 0447                  __ptext9 0369                  _ledShow 0238  
             _lowBatTime 0028                  _count1s 0035               _setBatStep 01A3  
    __size_of_Sleep_Mode 0039                  _pwmInit 0429              ?_checkBatAD 0070  
                _pwmStop 0463                  clrloop0 0454                  _workCtr 0100  
   end_of_initialization 0016         ___lbmod@dividend 0038              ___lbmod@rem 003A  
    __size_of_checkBatAD 0016             ?_Init_System 0070           __end_of_keyCtr 0453  
    start_initialization 000D              ?_setBatStep 0070                _Isr_Timer 0393  
           ??_Sleep_Mode 0073        ADC_Sample@ad_temp 0047                 ??_keyCtr 0073  
               ?_AD_Init 0070              __pbssCOMMON 0077                ___latbits 0000  
          __pcstackBANK0 0038       __end_of_Sleep_Mode 02FF               ?_Isr_Timer 0070  
              __pnvBANK0 0049         ___lwdiv@dividend 0075      __size_of_setBatStep 0095  
               ?___lbdiv 0073                 ?___lbmod 0073                 ?___lwdiv 0073  
               ?_chrgCtr 0070                __pstrings 0417                __pswtext1 0439  
               ?_ledShow 0070                _firstTime 004B           ADC_Sample@adch 003D  
               ?_pwmInit 0070             ??_checkBatAD 0074                 ?_pwmStop 0070  
       ___lwdiv@quotient 0039                 ?_workCtr 0070              ADC_Sample@i 003E  
            ADC_Sample@j 003C        interrupt_function 0004                clear_ram0 0453  
              _sleepTime 002B                _shiweiNum 004A       __end_of_checkBatAD 0417  
            __stringbase 041C     __size_of_Init_System 001A         __size_of_AD_Init 0008  
            ??_Isr_Timer 0070               _ADC_Sample 0018         __size_of___lbdiv 001B  
       __size_of___lbmod 001C         __size_of___lwdiv 002A       __end_of__stringtab 041D  
       __size_of_chrgCtr 002A         __size_of_ledShow 008E                 _adresult 0026  
           ??_setBatStep 0077                 _chrgFlag 007A          ___lwdiv@divisor 0073  
        ___lwdiv@counter 0038                 __ptext10 0401                 __ptext11 0018  
               __ptext12 02C6                 __ptext13 03E7                 __ptext14 045B  
               __ptext15 0393                 __ptext16 0238         __size_of_pwmInit 0010  
       __size_of_pwmStop 0004                 _geweiNum 0049                 _count30s 0020  
       __size_of_workCtr 00A3                 _intCount 0036            __size_of_main 0037  
               _numArray 041D                 _test_adc 0037       __end_of_setBatStep 0238  
               _power_ad 0077              _lowShanTime 0022                 _workStep 0030  
           _motorPwmFlag 002A                 intlevel1 0000              ?_ADC_Sample 0073  
              stringcode 0417              _showBatTime 002E              _showBatStep 0079  
             _OPTION_REG 0001                 stringdir 0417                 stringtab 0417  
