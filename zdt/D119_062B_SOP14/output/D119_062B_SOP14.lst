

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 21 15:36:30 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	swtext1,local,class=CONST,delta=2
    32                           	psect	pa_nodes0,global,class=CODE,delta=2
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 1.45
    36                           ; Generated 16/11/2017 GMT
    37                           ; 
    38                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F887 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	strings
    71  0476                     __pstrings:	
    72  0476                     stringtab:	
    73  0476                     __stringtab:	
    74  0476                     stringcode:	
    75                           ;	String table - string pointers are 1 byte each
    76                           
    77  0476                     stringdir:	
    78  0476  3004               	movlw	high stringdir
    79  0477  008A               	movwf	10
    80  0478  0804               	movf	4,w
    81  0479  0A84               	incf	4,f
    82  047A  0782               	addwf	2,f
    83  047B                     __stringbase:	
    84  047B  3400               	retlw	0
    85  047C                     __end_of__stringtab:	
    86  047C                     _numArray:	
    87  047C  343F               	retlw	63
    88  047D  3406               	retlw	6
    89  047E  345B               	retlw	91
    90  047F  344F               	retlw	79
    91  0480  3466               	retlw	102
    92  0481  346D               	retlw	109
    93  0482  347D               	retlw	125
    94  0483  3407               	retlw	7
    95  0484  347F               	retlw	127
    96  0485  346F               	retlw	111
    97  0486  3438               	retlw	56
    98  0487  3476               	retlw	118
    99  0488                     __end_of_numArray:	
   100                           
   101                           	psect	nvBANK0
   102  004D                     __pnvBANK0:	
   103  004D                     _geweiNum:	
   104  004D                     	ds	1
   105  004E                     _shiweiNum:	
   106  004E                     	ds	1
   107  004F                     _firstTime:	
   108  004F                     	ds	1
   109  001D                     _PWMCON2	set	29
   110  0018                     _PWMTH	set	24
   111  0017                     _PWMTL	set	23
   112  0016                     _PWMCON1	set	22
   113  0015                     _PWMCON0	set	21
   114  0014                     _OSCCON	set	20
   115  0013                     _T2CON	set	19
   116  0011                     _PR2	set	17
   117  000E                     _PIE1	set	14
   118  000D                     _PIR1	set	13
   119  000B                     _INTCON	set	11
   120  0009                     _IOCB	set	9
   121  0008                     _WPUB	set	8
   122  0006                     _PORTB	set	6
   123  0005                     _TRISB	set	5
   124  0001                     _OPTION_REG	set	1
   125  0071                     _TMR2IE	set	113
   126  0073                     _RAIE	set	115
   127  0069                     _TMR2IF	set	105
   128  006B                     _RAIF	set	107
   129  0058                     _RBIF	set	88
   130  005B                     _RBIE	set	91
   131  005E                     _PEIE	set	94
   132  005F                     _GIE	set	95
   133  0033                     _RB3	set	51
   134  009E                     _PWMD23H	set	158
   135  009D                     _PWM23DT	set	157
   136  009B                     _PWMD2L	set	155
   137  0099                     _ADRESH	set	153
   138  0098                     _ADRESL	set	152
   139  0096                     _ADCON1	set	150
   140  0095                     _ADCON0	set	149
   141  0094                     _ANSEL1	set	148
   142  0093                     _ANSEL0	set	147
   143  0089                     _IOCA	set	137
   144  0088                     _WPUA	set	136
   145  0087                     _WPDA	set	135
   146  0086                     _PORTA	set	134
   147  0085                     _TRISA	set	133
   148  04B2                     _LDO_EN	set	1202
   149  04B6                     _CHS4	set	1206
   150  04A9                     _GODONE	set	1193
   151  0431                     _RA1	set	1073
   152  0432                     _RA2	set	1074
   153  0433                     _RA3	set	1075
   154  0434                     _RA4	set	1076
   155  0435                     _RA5	set	1077
   156                           
   157                           	psect	cinit
   158  000D                     start_initialization:	
   159                           ; #config settings
   160                           
   161  000D                     __initialization:	
   162                           
   163                           ; Clear objects allocated to COMMON
   164  000D  3077               	movlw	low __pbssCOMMON
   165  000E  0084               	movwf	4
   166  000F  307B               	movlw	low (__pbssCOMMON+4)
   167  0010  24A6               	fcall	clear_ram0
   168  0011  3020               	movlw	low __pbssBANK0
   169                           
   170                           ; Clear objects allocated to BANK0
   171  0012  1383               	bcf	3,7	;select IRP bank0
   172  0013  0084               	movwf	4
   173  0014  303C               	movlw	low (__pbssBANK0+28)
   174  0015  24A6               	fcall	clear_ram0
   175  0016                     end_of_initialization:	
   176                           ;End of C runtime variable initialization code
   177                           
   178  0016                     __end_of__initialization:	
   179  0016  0183               	clrf	3
   180  0017  2B1D               	ljmp	_main	;jump to C main() function
   181                           
   182                           	psect	bssCOMMON
   183  0077                     __pbssCOMMON:	
   184  0077                     _showBatStep:	
   185  0077                     	ds	1
   186  0078                     _workStep:	
   187  0078                     	ds	1
   188  0079                     _chrgFlag:	
   189  0079                     	ds	1
   190  007A                     _count1s:	
   191  007A                     	ds	1
   192                           
   193                           	psect	bssBANK0
   194  0020                     __pbssBANK0:	
   195  0020                     _count30s:	
   196  0020                     	ds	2
   197  0022                     _count900s:	
   198  0022                     	ds	2
   199  0024                     _lowShanTime:	
   200  0024                     	ds	2
   201  0026                     _power_ad:	
   202  0026                     	ds	2
   203  0028                     _result:	
   204  0028                     	ds	2
   205  002A                     _adresult:	
   206  002A                     	ds	2
   207  002C                     _lowBatTime:	
   208  002C                     	ds	1
   209  002D                     _curBatStep:	
   210  002D                     	ds	1
   211  002E                     _motorPwmFlag:	
   212  002E                     	ds	1
   213  002F                     _sleepTime:	
   214  002F                     	ds	1
   215  0030                     _lowBatFlag:	
   216  0030                     	ds	1
   217  0031                     _ledCntTime:	
   218  0031                     	ds	1
   219  0032                     _showBatTime:	
   220  0032                     	ds	1
   221  0033                     _longPressFlag:	
   222  0033                     	ds	1
   223  0034                     _keyCount:	
   224  0034                     	ds	1
   225  0035                     _ledCnt:	
   226  0035                     	ds	1
   227  0036                     _chrgFullTime:	
   228  0036                     	ds	1
   229  0037                     _intCount10:	
   230  0037                     	ds	1
   231  0038                     _chrgFullFlag:	
   232  0038                     	ds	1
   233  0039                     _IntFlag:	
   234  0039                     	ds	1
   235  003A                     _intCount:	
   236  003A                     	ds	1
   237  003B                     _test_adc:	
   238  003B                     	ds	1
   239                           
   240                           	psect	clrtext
   241  04A6                     clear_ram0:	
   242                           ;	Called with FSR containing the base address, and
   243                           ;	W with the last address+1
   244                           
   245  04A6  0064               	clrwdt	;clear the watchdog before getting into this loop
   246  04A7                     clrloop0:	
   247  04A7  0180               	clrf	0	;clear RAM location pointed to by FSR
   248  04A8  0A84               	incf	4,f	;increment pointer
   249  04A9  0604               	xorwf	4,w	;XOR with final address
   250  04AA  1903               	btfsc	3,2	;have we reached the end yet?
   251  04AB  3400               	retlw	0	;all done for this memory range, return
   252  04AC  0604               	xorwf	4,w	;XOR again to restore value
   253  04AD  2CA7               	goto	clrloop0	;do the next byte
   254                           
   255                           	psect	cstackCOMMON
   256  0070                     __pcstackCOMMON:	
   257  0070                     ?_ledShow:	
   258  0070                     ??_ledShow:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_Init_System:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?_AD_Init:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_chrgCtr:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ?_checkBatAD:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_setBatStep:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?_keyCtr:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ?_workCtr:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?_Sleep_Mode:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ?_pwmStop:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_pwmInit:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_Isr_Timer:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ??_Isr_Timer:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_main:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_keyRead:	
   301                           ; 1 bytes @ 0x0
   302                           
   303                           
   304                           ; 1 bytes @ 0x0
   305  0070                     	ds	3
   306  0073                     ??_Init_System:	
   307  0073                     ??_AD_Init:	
   308                           ; 1 bytes @ 0x3
   309                           
   310  0073                     ??_chrgCtr:	
   311                           ; 1 bytes @ 0x3
   312                           
   313  0073                     ??_Sleep_Mode:	
   314                           ; 1 bytes @ 0x3
   315                           
   316  0073                     ??_pwmStop:	
   317                           ; 1 bytes @ 0x3
   318                           
   319  0073                     ??_pwmInit:	
   320                           ; 1 bytes @ 0x3
   321                           
   322  0073                     ?_ADC_Sample:	
   323                           ; 1 bytes @ 0x3
   324                           
   325  0073                     ??_keyRead:	
   326                           ; 1 bytes @ 0x3
   327                           
   328  0073                     ?___lbdiv:	
   329                           ; 1 bytes @ 0x3
   330                           
   331  0073                     ?___lbmod:	
   332                           ; 1 bytes @ 0x3
   333                           
   334  0073                     ?___lwdiv:	
   335                           ; 1 bytes @ 0x3
   336                           
   337  0073                     keyRead@keyStatus:	
   338                           ; 2 bytes @ 0x3
   339                           
   340  0073                     ADC_Sample@adldo:	
   341                           ; 1 bytes @ 0x3
   342                           
   343  0073                     ___lbdiv@divisor:	
   344                           ; 1 bytes @ 0x3
   345                           
   346  0073                     ___lbmod@divisor:	
   347                           ; 1 bytes @ 0x3
   348                           
   349  0073                     ___lwdiv@divisor:	
   350                           ; 1 bytes @ 0x3
   351                           
   352                           
   353                           ; 2 bytes @ 0x3
   354  0073                     	ds	1
   355  0074                     ??_checkBatAD:	
   356  0074                     ??_keyCtr:	
   357                           ; 1 bytes @ 0x4
   358                           
   359  0074                     ??___lbdiv:	
   360                           ; 1 bytes @ 0x4
   361                           
   362  0074                     ??___lbmod:	
   363                           ; 1 bytes @ 0x4
   364                           
   365  0074                     keyCtr@kclick:	
   366                           ; 1 bytes @ 0x4
   367                           
   368  0074                     ___lbdiv@dividend:	
   369                           ; 1 bytes @ 0x4
   370                           
   371                           
   372                           ; 1 bytes @ 0x4
   373  0074                     	ds	1
   374  0075                     ___lbdiv@counter:	
   375  0075                     ___lwdiv@dividend:	
   376                           ; 1 bytes @ 0x5
   377                           
   378                           
   379                           ; 2 bytes @ 0x5
   380  0075                     	ds	1
   381  0076                     ___lbdiv@quotient:	
   382                           
   383                           ; 1 bytes @ 0x6
   384  0076                     	ds	1
   385  0077                     ??_setBatStep:	
   386  0077                     ??_workCtr:	
   387                           ; 1 bytes @ 0x7
   388                           
   389  0077                     ??_main:	
   390                           ; 1 bytes @ 0x7
   391                           
   392  0077                     ??___lwdiv:	
   393                           ; 1 bytes @ 0x7
   394                           
   395                           
   396                           	psect	cstackBANK0
   397  003C                     __pcstackBANK0:	
   398                           ; 1 bytes @ 0x7
   399                           
   400  003C                     ??_ADC_Sample:	
   401  003C                     ___lbmod@dividend:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  003C                     ___lwdiv@counter:	
   405                           ; 1 bytes @ 0x0
   406                           
   407                           
   408                           ; 1 bytes @ 0x0
   409  003C                     	ds	1
   410  003D                     ___lbmod@counter:	
   411  003D                     ___lwdiv@quotient:	
   412                           ; 1 bytes @ 0x1
   413                           
   414                           
   415                           ; 2 bytes @ 0x1
   416  003D                     	ds	1
   417  003E                     ___lbmod@rem:	
   418                           
   419                           ; 1 bytes @ 0x2
   420  003E                     	ds	2
   421  0040                     ADC_Sample@j:	
   422                           
   423                           ; 1 bytes @ 0x4
   424  0040                     	ds	1
   425  0041                     ADC_Sample@adch:	
   426                           
   427                           ; 1 bytes @ 0x5
   428  0041                     	ds	1
   429  0042                     ADC_Sample@i:	
   430                           
   431                           ; 1 bytes @ 0x6
   432  0042                     	ds	1
   433  0043                     ADC_Sample@adsum:	
   434                           
   435                           ; 4 bytes @ 0x7
   436  0043                     	ds	4
   437  0047                     ADC_Sample@admin:	
   438                           
   439                           ; 2 bytes @ 0xB
   440  0047                     	ds	2
   441  0049                     ADC_Sample@admax:	
   442                           
   443                           ; 2 bytes @ 0xD
   444  0049                     	ds	2
   445  004B                     ADC_Sample@ad_temp:	
   446                           
   447                           ; 2 bytes @ 0xF
   448  004B                     	ds	2
   449                           
   450                           	psect	maintext
   451  031D                     __pmaintext:	
   452 ;;
   453 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   454 ;;
   455 ;; *************** function _main *****************
   456 ;; Defined at:
   457 ;;		line 117 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
   458 ;; Parameters:    Size  Location     Type
   459 ;;		None
   460 ;; Auto vars:     Size  Location     Type
   461 ;;		None
   462 ;; Return value:  Size  Location     Type
   463 ;;                  1    wreg      void 
   464 ;; Registers used:
   465 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   466 ;; Tracked objects:
   467 ;;		On entry : B00/0
   468 ;;		On exit  : 100/0
   469 ;;		Unchanged: 0/0
   470 ;; Data sizes:     COMMON   BANK0   BANK1
   471 ;;      Params:         0       0       0
   472 ;;      Locals:         0       0       0
   473 ;;      Temps:          0       0       0
   474 ;;      Totals:         0       0       0
   475 ;;Total ram usage:        0 bytes
   476 ;; Hardware stack levels required when called:    4
   477 ;; This function calls:
   478 ;;		_AD_Init
   479 ;;		_Init_System
   480 ;;		_Sleep_Mode
   481 ;;		_checkBatAD
   482 ;;		_chrgCtr
   483 ;;		_keyCtr
   484 ;;		_setBatStep
   485 ;;		_workCtr
   486 ;; This function is called by:
   487 ;;		Startup code after reset
   488 ;; This function uses a non-reentrant model
   489 ;;
   490                           
   491                           
   492                           ;psect for function _main
   493  031D                     _main:	
   494                           
   495                           ;main.c: 119: Init_System();
   496                           
   497                           ;incstack = 0
   498                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   499  031D  2446               	fcall	_Init_System
   500                           
   501                           ;main.c: 120: AD_Init();
   502  031E  24AE               	fcall	_AD_Init
   503                           
   504                           ;main.c: 122: baiweiNum = 1;
   505  031F  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   506  0320  0084               	movwf	4
   507  0321  2476               	fcall	stringdir
   508  0322  1283               	bcf	3,5	;RP0=0, select bank0
   509  0323  00CD               	movwf	_geweiNum
   510  0324  00CE               	movwf	_shiweiNum
   511                           
   512                           ;main.c: 123: firstTime = 250;
   513  0325  30FA               	movlw	250
   514  0326  00CF               	movwf	_firstTime
   515  0327                     l617:	
   516                           ;main.c: 124: while (1)
   517                           
   518  0327  0064               	clrwdt	;# 
   519                           
   520                           ;main.c: 127: if(intCount10 > 10)
   521  0328  300B               	movlw	11
   522  0329  1283               	bcf	3,5	;RP0=0, select bank0
   523  032A  0237               	subwf	_intCount10,w
   524  032B  1803               	btfsc	3,0
   525                           
   526                           ;main.c: 128: {
   527                           ;main.c: 129: intCount10 = 0;
   528  032C  01B7               	clrf	_intCount10
   529                           
   530                           ;main.c: 130: }
   531                           ;main.c: 131: if(!IntFlag)
   532  032D  0839               	movf	_IntFlag,w
   533  032E  1903               	btfsc	3,2
   534  032F  2B27               	goto	l617
   535                           
   536                           ;main.c: 133: IntFlag = 0;
   537  0330  01B9               	clrf	_IntFlag
   538                           
   539                           ;main.c: 134: chrgCtr();
   540  0331  2381               	fcall	_chrgCtr
   541                           
   542                           ;main.c: 135: checkBatAD();
   543  0332  2460               	fcall	_checkBatAD
   544                           
   545                           ;main.c: 136: setBatStep();
   546  0333  21B8               	fcall	_setBatStep
   547                           
   548                           ;main.c: 137: if(lowBatFlag == 0 && firstTime == 0)
   549  0334  0830               	movf	_lowBatFlag,w
   550  0335  1D03               	btfss	3,2
   551  0336  2B3B               	goto	l2805
   552  0337  084F               	movf	_firstTime,w
   553  0338  1D03               	btfss	3,2
   554  0339  2B3B               	goto	l2805
   555                           
   556                           ;main.c: 138: {
   557                           ;main.c: 139: keyCtr();
   558  033A  23AB               	fcall	_keyCtr
   559  033B                     l2805:	
   560                           
   561                           ;main.c: 140: }
   562                           ;main.c: 141: workCtr();
   563  033B  2100               	fcall	_workCtr
   564                           
   565                           ;main.c: 142: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 )
   566  033C  0879               	movf	_chrgFlag,w
   567  033D  1D03               	btfss	3,2
   568  033E  2B55               	goto	l2825
   569  033F  0878               	movf	_workStep,w
   570  0340  1D03               	btfss	3,2
   571  0341  2B55               	goto	l2825
   572  0342  0834               	movf	_keyCount,w
   573  0343  1D03               	btfss	3,2
   574  0344  2B55               	goto	l2825
   575  0345  084F               	movf	_firstTime,w
   576  0346  1D03               	btfss	3,2
   577  0347  2B55               	goto	l2825
   578                           
   579                           ;main.c: 143: {
   580                           ;main.c: 144: baiweiNum = 0;
   581  0348  0832               	movf	_showBatTime,w
   582  0349  1D03               	btfss	3,2
   583  034A  2B55               	goto	l2825
   584  034B  30C8               	movlw	200
   585                           
   586                           ;main.c: 145: shiweiNum = geweiNum = 0;
   587  034C  01CD               	clrf	_geweiNum
   588  034D  01CE               	clrf	_shiweiNum
   589                           
   590                           ;main.c: 146: if(++sleepTime >= 200)
   591  034E  0AAF               	incf	_sleepTime,f
   592  034F  022F               	subwf	_sleepTime,w
   593  0350  1C03               	skipc
   594  0351  2B27               	goto	l617
   595                           
   596                           ;main.c: 147: {
   597                           ;main.c: 148: sleepTime = 0;
   598  0352  01AF               	clrf	_sleepTime
   599                           
   600                           ;main.c: 149: Sleep_Mode();
   601  0353  22DB               	fcall	_Sleep_Mode
   602  0354  2B27               	goto	l617
   603  0355                     l2825:	
   604                           
   605                           ;main.c: 152: else
   606                           ;main.c: 153: {
   607                           ;main.c: 154: sleepTime = 0;
   608  0355  01AF               	clrf	_sleepTime
   609  0356  2B27               	goto	l617
   610  0357                     __end_of_main:	
   611                           
   612                           	psect	text1
   613  0100                     __ptext1:	
   614 ;; *************** function _workCtr *****************
   615 ;; Defined at:
   616 ;;		line 426 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;		None
   619 ;; Auto vars:     Size  Location     Type
   620 ;;		None
   621 ;; Return value:  Size  Location     Type
   622 ;;                  1    wreg      void 
   623 ;; Registers used:
   624 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   625 ;; Tracked objects:
   626 ;;		On entry : 100/0
   627 ;;		On exit  : 100/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMMON   BANK0   BANK1
   630 ;;      Params:         0       0       0
   631 ;;      Locals:         0       0       0
   632 ;;      Temps:          0       0       0
   633 ;;      Totals:         0       0       0
   634 ;;Total ram usage:        0 bytes
   635 ;; Hardware stack levels used:    1
   636 ;; Hardware stack levels required when called:    3
   637 ;; This function calls:
   638 ;;		___lbdiv
   639 ;;		___lbmod
   640 ;;		_pwmInit
   641 ;;		_pwmStop
   642 ;; This function is called by:
   643 ;;		_main
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647                           
   648                           ;psect for function _workCtr
   649  0100                     _workCtr:	
   650                           
   651                           ;main.c: 428: if(workStep > 0 && count1s == 0 && ++count900s >= 900)
   652                           
   653                           ;incstack = 0
   654                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   655  0100  0878               	movf	_workStep,w
   656  0101  1903               	btfsc	3,2
   657  0102  2913               	goto	l2685
   658  0103  087A               	movf	_count1s,w
   659  0104  1D03               	btfss	3,2
   660  0105  2913               	goto	l2685
   661  0106  0AA2               	incf	_count900s,f
   662  0107  1903               	skipnz
   663  0108  0AA3               	incf	_count900s+1,f
   664  0109  3003               	movlw	3
   665  010A  0223               	subwf	_count900s+1,w
   666  010B  3084               	movlw	132
   667  010C  1903               	skipnz
   668  010D  0222               	subwf	_count900s,w
   669  010E  1C03               	skipc
   670  010F  2913               	goto	l2685
   671                           
   672                           ;main.c: 429: {
   673                           ;main.c: 430: count900s = 0;
   674  0110  01A2               	clrf	_count900s
   675  0111  01A3               	clrf	_count900s+1
   676                           
   677                           ;main.c: 431: workStep = 0;
   678  0112  01F8               	clrf	_workStep
   679  0113                     l2685:	
   680                           
   681                           ;main.c: 432: }
   682                           ;main.c: 433: if(lowShanTime > 0)
   683  0113  0824               	movf	_lowShanTime,w
   684  0114  0425               	iorwf	_lowShanTime+1,w
   685  0115  1903               	btfsc	3,2
   686  0116  2921               	goto	l2691
   687                           
   688                           ;main.c: 434: {
   689                           ;main.c: 435: if(--lowShanTime == 0)
   690  0117  3001               	movlw	1
   691  0118  02A4               	subwf	_lowShanTime,f
   692  0119  3000               	movlw	0
   693  011A  1C03               	skipc
   694  011B  03A5               	decf	_lowShanTime+1,f
   695  011C  02A5               	subwf	_lowShanTime+1,f
   696  011D  0824               	movf	_lowShanTime,w
   697  011E  0425               	iorwf	_lowShanTime+1,w
   698  011F  1903               	btfsc	3,2
   699                           
   700                           ;main.c: 436: {
   701                           ;main.c: 437: workStep = 0;
   702  0120  01F8               	clrf	_workStep
   703  0121                     l2691:	
   704                           
   705                           ;main.c: 438: }
   706                           ;main.c: 439: }
   707                           ;main.c: 440: if(showBatTime > 0)
   708  0121  0832               	movf	_showBatTime,w
   709  0122  1D03               	btfss	3,2
   710                           
   711                           ;main.c: 441: {
   712                           ;main.c: 442: showBatTime--;
   713  0123  03B2               	decf	_showBatTime,f
   714                           
   715                           ;main.c: 443: }
   716                           ;main.c: 444: if(firstTime > 0)
   717  0124  084F               	movf	_firstTime,w
   718  0125  1903               	btfsc	3,2
   719  0126  2937               	goto	l2707
   720                           
   721                           ;main.c: 445: {
   722                           ;main.c: 446: firstTime--;
   723  0127  03CF               	decf	_firstTime,f
   724                           
   725                           ;main.c: 447: if(showBatStep < curBatStep)
   726  0128  082D               	movf	_curBatStep,w
   727  0129  0277               	subwf	_showBatStep,w
   728  012A  1803               	skipnc
   729  012B  292E               	goto	l2703
   730                           
   731                           ;main.c: 448: {
   732                           ;main.c: 449: showBatStep = curBatStep;
   733  012C  082D               	movf	_curBatStep,w
   734  012D  00F7               	movwf	_showBatStep
   735  012E                     l2703:	
   736                           
   737                           ;main.c: 450: }
   738                           ;main.c: 451: shiweiNum = numArray[8];
   739  012E  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   740  012F  0084               	movwf	4
   741  0130  2476               	fcall	stringdir
   742  0131  00CE               	movwf	_shiweiNum
   743                           
   744                           ;main.c: 452: geweiNum = numArray[8];
   745  0132  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   746  0133  0084               	movwf	4
   747  0134  2476               	fcall	stringdir
   748  0135  00CD               	movwf	_geweiNum
   749                           
   750                           ;main.c: 453: }
   751  0136  2974               	goto	l2747
   752  0137                     l2707:	
   753                           
   754                           ;main.c: 454: else if(workStep == 0 || (lowShanTime > 0 && count1s < 50))
   755  0137  0878               	movf	_workStep,w
   756  0138  1903               	btfsc	3,2
   757  0139  2942               	goto	l2713
   758  013A  0824               	movf	_lowShanTime,w
   759  013B  0425               	iorwf	_lowShanTime+1,w
   760  013C  1903               	btfsc	3,2
   761  013D  2948               	goto	l2719
   762  013E  3032               	movlw	50
   763  013F  027A               	subwf	_count1s,w
   764  0140  1803               	skipnc
   765  0141  2948               	goto	l2719
   766  0142                     l2713:	
   767                           
   768                           ;main.c: 455: {
   769                           ;main.c: 456: shiweiNum = 0;
   770  0142  01CE               	clrf	_shiweiNum
   771                           
   772                           ;main.c: 457: geweiNum = 0;
   773  0143  01CD               	clrf	_geweiNum
   774                           
   775                           ;main.c: 458: pwmStop();
   776  0144  24B6               	fcall	_pwmStop
   777                           
   778                           ;main.c: 459: count900s = 0;
   779  0145  01A2               	clrf	_count900s
   780  0146  01A3               	clrf	_count900s+1
   781                           
   782                           ;main.c: 460: }
   783  0147  2974               	goto	l2747
   784  0148                     l2719:	
   785                           
   786                           ;main.c: 461: else if(workStep == 1)
   787  0148  0B78               	decfsz	_workStep,w
   788  0149  295D               	goto	l2733
   789                           
   790                           ;main.c: 462: {
   791                           ;main.c: 463: if(chrgFlag == 0)
   792  014A  0879               	movf	_chrgFlag,w
   793  014B  1D03               	btfss	3,2
   794  014C  2955               	goto	l2725
   795                           
   796                           ;main.c: 464: {
   797                           ;main.c: 465: shiweiNum = numArray[10];
   798  014D  300B               	movlw	low (((_numArray+10)-__stringbase)| (0+32768))
   799  014E  0084               	movwf	4
   800  014F  2476               	fcall	stringdir
   801  0150  00CE               	movwf	_shiweiNum
   802                           
   803                           ;main.c: 466: geweiNum = numArray[10];
   804  0151  300B               	movlw	low (((_numArray+10)-__stringbase)| (0+32768))
   805  0152  0084               	movwf	4
   806  0153  2476               	fcall	stringdir
   807  0154  00CD               	movwf	_geweiNum
   808  0155                     l2725:	
   809                           
   810                           ;main.c: 467: }
   811                           ;main.c: 468: if(motorPwmFlag == 0)
   812  0155  082E               	movf	_motorPwmFlag,w
   813  0156  1D03               	btfss	3,2
   814  0157  2959               	goto	l2729
   815                           
   816                           ;main.c: 469: {
   817                           ;main.c: 470: pwmInit();
   818  0158  2488               	fcall	_pwmInit
   819  0159                     l2729:	
   820                           
   821                           ;main.c: 471: }
   822                           ;main.c: 472: PWMD23H = 0X00;
   823  0159  1683               	bsf	3,5	;RP0=1, select bank1
   824  015A  019E               	clrf	30	;volatile
   825                           
   826                           ;main.c: 473: PWMD2L = 60;
   827  015B  303C               	movlw	60
   828  015C  2973               	goto	L1
   829  015D                     l2733:	
   830                           ;main.c: 474: }
   831                           
   832                           
   833                           ;main.c: 475: else if(workStep == 2)
   834  015D  3002               	movlw	2
   835  015E  0678               	xorwf	_workStep,w
   836  015F  1D03               	btfss	3,2
   837  0160  2974               	goto	l2747
   838                           
   839                           ;main.c: 476: {
   840                           ;main.c: 477: if(chrgFlag == 0)
   841  0161  0879               	movf	_chrgFlag,w
   842  0162  1D03               	btfss	3,2
   843  0163  296C               	goto	l2739
   844                           
   845                           ;main.c: 478: {
   846                           ;main.c: 479: shiweiNum = numArray[11];
   847  0164  300C               	movlw	low (((_numArray+11)-__stringbase)| (0+32768))
   848  0165  0084               	movwf	4
   849  0166  2476               	fcall	stringdir
   850  0167  00CE               	movwf	_shiweiNum
   851                           
   852                           ;main.c: 480: geweiNum = numArray[11];
   853  0168  300C               	movlw	low (((_numArray+11)-__stringbase)| (0+32768))
   854  0169  0084               	movwf	4
   855  016A  2476               	fcall	stringdir
   856  016B  00CD               	movwf	_geweiNum
   857  016C                     l2739:	
   858                           
   859                           ;main.c: 481: }
   860                           ;main.c: 482: if(motorPwmFlag == 0)
   861  016C  082E               	movf	_motorPwmFlag,w
   862  016D  1D03               	btfss	3,2
   863  016E  2970               	goto	l2743
   864                           
   865                           ;main.c: 483: {
   866                           ;main.c: 484: pwmInit();
   867  016F  2488               	fcall	_pwmInit
   868  0170                     l2743:	
   869                           
   870                           ;main.c: 485: }
   871                           ;main.c: 486: PWMD23H = 0X00;
   872  0170  1683               	bsf	3,5	;RP0=1, select bank1
   873  0171  019E               	clrf	30	;volatile
   874                           
   875                           ;main.c: 487: PWMD2L = 99;
   876  0172  3063               	movlw	99
   877  0173                     L1:	
   878  0173  009B               	movwf	27	;volatile
   879  0174                     l2747:	
   880                           
   881                           ;main.c: 489: }
   882                           ;main.c: 490: if(chrgFlag || showBatTime > 0)
   883  0174  0879               	movf	_chrgFlag,w
   884  0175  1D03               	btfss	3,2
   885  0176  297B               	goto	l2751
   886  0177  1283               	bcf	3,5	;RP0=0, select bank0
   887  0178  0832               	movf	_showBatTime,w
   888  0179  1903               	btfsc	3,2
   889  017A  0008               	return
   890  017B                     l2751:	
   891                           
   892                           ;main.c: 491: {
   893                           ;main.c: 492: if(showBatStep >=99)
   894  017B  3063               	movlw	99
   895  017C  0277               	subwf	_showBatStep,w
   896  017D  1C03               	skipc
   897  017E  2989               	goto	l2755
   898                           
   899                           ;main.c: 493: {
   900                           ;main.c: 494: shiweiNum = numArray[9];
   901  017F  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
   902  0180  0084               	movwf	4
   903  0181  2476               	fcall	stringdir
   904  0182  1283               	bcf	3,5	;RP0=0, select bank0
   905  0183  00CE               	movwf	_shiweiNum
   906                           
   907                           ;main.c: 495: geweiNum = numArray[9];
   908  0184  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
   909  0185  0084               	movwf	4
   910  0186  2476               	fcall	stringdir
   911  0187  00CD               	movwf	_geweiNum
   912                           
   913                           ;main.c: 496: }
   914  0188  0008               	return
   915  0189                     l2755:	
   916                           
   917                           ;main.c: 498: {
   918                           ;main.c: 499: baiweiNum = 0;
   919  0189  300A               	movlw	10
   920  018A  0277               	subwf	_showBatStep,w
   921  018B  1C03               	skipc
   922  018C  29AD               	goto	l2767
   923                           
   924                           ;main.c: 500: shiweiNum = numArray[showBatStep/10];
   925  018D  300A               	movlw	10
   926  018E  00F3               	movwf	___lbdiv@divisor
   927  018F  0877               	movf	_showBatStep,w
   928  0190  242B               	fcall	___lbdiv
   929  0191  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
   930  0192  0084               	movwf	4
   931  0193  2476               	fcall	stringdir
   932  0194  1283               	bcf	3,5	;RP0=0, select bank0
   933  0195  00CE               	movwf	_shiweiNum
   934                           
   935                           ;main.c: 501: if(chrgFlag && count1s < 50)
   936  0196  0879               	movf	_chrgFlag,w
   937  0197  1903               	btfsc	3,2
   938  0198  29A4               	goto	l2765
   939  0199  3032               	movlw	50
   940  019A  027A               	subwf	_count1s,w
   941  019B  1C03               	btfss	3,0
   942  019C  29A2               	goto	l2763
   943  019D  29A4               	goto	l2765
   944  019E                     l2771:	
   945  019E  3032               	movlw	50
   946  019F  027A               	subwf	_count1s,w
   947  01A0  1803               	skipnc
   948  01A1  29B2               	goto	l2775
   949  01A2                     l2763:	
   950                           
   951                           ;main.c: 502: {
   952                           ;main.c: 503: geweiNum = 0;
   953  01A2  01CD               	clrf	_geweiNum
   954                           
   955                           ;main.c: 504: }
   956  01A3  0008               	return
   957  01A4                     l2765:	
   958                           
   959                           ;main.c: 505: else
   960                           ;main.c: 506: {
   961                           ;main.c: 507: geweiNum = numArray[showBatStep%10];
   962  01A4  300A               	movlw	10
   963  01A5  00F3               	movwf	___lbmod@divisor
   964  01A6  0877               	movf	_showBatStep,w
   965  01A7  240F               	fcall	___lbmod
   966  01A8  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
   967  01A9  0084               	movwf	4
   968  01AA  2476               	fcall	stringdir
   969  01AB  00CD               	movwf	_geweiNum
   970  01AC  0008               	return
   971  01AD                     l2767:	
   972                           
   973                           ;main.c: 513: shiweiNum = 0;
   974  01AD  1283               	bcf	3,5	;RP0=0, select bank0
   975  01AE  01CE               	clrf	_shiweiNum
   976                           
   977                           ;main.c: 514: if(chrgFlag && count1s < 50)
   978  01AF  0879               	movf	_chrgFlag,w
   979  01B0  1D03               	btfss	3,2
   980  01B1  299E               	goto	l2771
   981  01B2                     l2775:	
   982                           
   983                           ;main.c: 518: else
   984                           ;main.c: 519: {
   985                           ;main.c: 520: geweiNum = numArray[showBatStep];
   986  01B2  0877               	movf	_showBatStep,w
   987  01B3  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
   988  01B4  0084               	movwf	4
   989  01B5  2476               	fcall	stringdir
   990  01B6  00CD               	movwf	_geweiNum
   991  01B7  0008               	return
   992  01B8                     __end_of_workCtr:	
   993                           
   994                           	psect	text2
   995  04B6                     __ptext2:	
   996 ;; *************** function _pwmStop *****************
   997 ;; Defined at:
   998 ;;		line 748 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;		None
  1001 ;; Auto vars:     Size  Location     Type
  1002 ;;		None
  1003 ;; Return value:  Size  Location     Type
  1004 ;;                  1    wreg      void 
  1005 ;; Registers used:
  1006 ;;		status,2
  1007 ;; Tracked objects:
  1008 ;;		On entry : 100/0
  1009 ;;		On exit  : 100/0
  1010 ;;		Unchanged: 0/0
  1011 ;; Data sizes:     COMMON   BANK0   BANK1
  1012 ;;      Params:         0       0       0
  1013 ;;      Locals:         0       0       0
  1014 ;;      Temps:          0       0       0
  1015 ;;      Totals:         0       0       0
  1016 ;;Total ram usage:        0 bytes
  1017 ;; Hardware stack levels used:    1
  1018 ;; Hardware stack levels required when called:    2
  1019 ;; This function calls:
  1020 ;;		Nothing
  1021 ;; This function is called by:
  1022 ;;		_workCtr
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           
  1027                           ;psect for function _pwmStop
  1028  04B6                     _pwmStop:	
  1029                           
  1030                           ;main.c: 750: PWMCON0 &= 0XFB;
  1031                           
  1032                           ;incstack = 0
  1033                           ; Regs used in _pwmStop: [status,2]
  1034  04B6  1115               	bcf	21,2	;volatile
  1035                           
  1036                           ;main.c: 751: RB3 = 0;
  1037  04B7  1186               	bcf	6,3	;volatile
  1038                           
  1039                           ;main.c: 752: motorPwmFlag = 0;
  1040  04B8  01AE               	clrf	_motorPwmFlag
  1041  04B9  0008               	return
  1042  04BA                     __end_of_pwmStop:	
  1043                           
  1044                           	psect	text3
  1045  0488                     __ptext3:	
  1046 ;; *************** function _pwmInit *****************
  1047 ;; Defined at:
  1048 ;;		line 732 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;		None
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;		None
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  1    wreg      void 
  1055 ;; Registers used:
  1056 ;;		wreg, status,2
  1057 ;; Tracked objects:
  1058 ;;		On entry : 100/0
  1059 ;;		On exit  : 100/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMMON   BANK0   BANK1
  1062 ;;      Params:         0       0       0
  1063 ;;      Locals:         0       0       0
  1064 ;;      Temps:          0       0       0
  1065 ;;      Totals:         0       0       0
  1066 ;;Total ram usage:        0 bytes
  1067 ;; Hardware stack levels used:    1
  1068 ;; Hardware stack levels required when called:    2
  1069 ;; This function calls:
  1070 ;;		Nothing
  1071 ;; This function is called by:
  1072 ;;		_workCtr
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075                           
  1076                           
  1077                           ;psect for function _pwmInit
  1078  0488                     _pwmInit:	
  1079                           
  1080                           ;main.c: 734: PWMCON1 = 0B00000000;
  1081                           
  1082                           ;incstack = 0
  1083                           ; Regs used in _pwmInit: [wreg+status,2]
  1084  0488  0196               	clrf	22	;volatile
  1085                           
  1086                           ;main.c: 735: PWMTH = 0X00;
  1087  0489  0198               	clrf	24	;volatile
  1088                           
  1089                           ;main.c: 736: PWMTL = 100;
  1090  048A  3064               	movlw	100
  1091  048B  0097               	movwf	23	;volatile
  1092                           
  1093                           ;main.c: 739: PWMD23H = 0;
  1094  048C  1683               	bsf	3,5	;RP0=1, select bank1
  1095  048D  019E               	clrf	30	;volatile
  1096                           
  1097                           ;main.c: 740: PWMD2L = 60;
  1098  048E  303C               	movlw	60
  1099  048F  009B               	movwf	27	;volatile
  1100                           
  1101                           ;main.c: 741: PWM23DT = 0X00;
  1102  0490  019D               	clrf	29	;volatile
  1103                           
  1104                           ;main.c: 743: PWMCON0 = 0X64;
  1105  0491  3064               	movlw	100
  1106  0492  1283               	bcf	3,5	;RP0=0, select bank0
  1107  0493  0095               	movwf	21	;volatile
  1108                           
  1109                           ;main.c: 744: PWMCON2 =0X00;
  1110  0494  019D               	clrf	29	;volatile
  1111                           
  1112                           ;main.c: 745: motorPwmFlag = 1;
  1113  0495  01AE               	clrf	_motorPwmFlag
  1114  0496  0AAE               	incf	_motorPwmFlag,f
  1115  0497  0008               	return
  1116  0498                     __end_of_pwmInit:	
  1117                           
  1118                           	psect	text4
  1119  040F                     __ptext4:	
  1120 ;; *************** function ___lbmod *****************
  1121 ;; Defined at:
  1122 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;  dividend        1    wreg     unsigned char 
  1125 ;;  divisor         1    3[COMMON] unsigned char 
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;  dividend        1    0[BANK0 ] unsigned char 
  1128 ;;  rem             1    2[BANK0 ] unsigned char 
  1129 ;;  counter         1    1[BANK0 ] unsigned char 
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      unsigned char 
  1132 ;; Registers used:
  1133 ;;		wreg, status,2, status,0
  1134 ;; Tracked objects:
  1135 ;;		On entry : 100/0
  1136 ;;		On exit  : 100/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMMON   BANK0   BANK1
  1139 ;;      Params:         1       0       0
  1140 ;;      Locals:         0       3       0
  1141 ;;      Temps:          1       0       0
  1142 ;;      Totals:         2       3       0
  1143 ;;Total ram usage:        5 bytes
  1144 ;; Hardware stack levels used:    1
  1145 ;; Hardware stack levels required when called:    2
  1146 ;; This function calls:
  1147 ;;		Nothing
  1148 ;; This function is called by:
  1149 ;;		_workCtr
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           
  1154                           ;psect for function ___lbmod
  1155  040F                     ___lbmod:	
  1156                           
  1157                           ;incstack = 0
  1158                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1159                           ;___lbmod@dividend stored from wreg
  1160  040F  00BC               	movwf	___lbmod@dividend
  1161  0410  3008               	movlw	8
  1162  0411  00BD               	movwf	___lbmod@counter
  1163  0412  01BE               	clrf	___lbmod@rem
  1164  0413                     l2559:	
  1165  0413  083C               	movf	___lbmod@dividend,w
  1166  0414  00F4               	movwf	??___lbmod
  1167  0415  3007               	movlw	7
  1168  0416  1003               	clrc
  1169  0417                     L2:	
  1170  0417  0CF4               	rrf	??___lbmod,f
  1171  0418  3EFF               	addlw	-1
  1172  0419  1003               	clrc
  1173  041A  1D03               	skipz
  1174  041B  2C17               	goto	L2
  1175  041C  0D3E               	rlf	___lbmod@rem,w
  1176  041D  0474               	iorwf	??___lbmod,w
  1177  041E  00BE               	movwf	___lbmod@rem
  1178  041F  1003               	clrc
  1179  0420  0DBC               	rlf	___lbmod@dividend,f
  1180  0421  0873               	movf	___lbmod@divisor,w
  1181  0422  023E               	subwf	___lbmod@rem,w
  1182  0423  1C03               	skipc
  1183  0424  2C27               	goto	l2567
  1184  0425  0873               	movf	___lbmod@divisor,w
  1185  0426  02BE               	subwf	___lbmod@rem,f
  1186  0427                     l2567:	
  1187  0427  0BBD               	decfsz	___lbmod@counter,f
  1188  0428  2C13               	goto	l2559
  1189  0429  083E               	movf	___lbmod@rem,w
  1190  042A  0008               	return
  1191  042B                     __end_of___lbmod:	
  1192                           
  1193                           	psect	text5
  1194  042B                     __ptext5:	
  1195 ;; *************** function ___lbdiv *****************
  1196 ;; Defined at:
  1197 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  dividend        1    wreg     unsigned char 
  1200 ;;  divisor         1    3[COMMON] unsigned char 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  dividend        1    4[COMMON] unsigned char 
  1203 ;;  quotient        1    6[COMMON] unsigned char 
  1204 ;;  counter         1    5[COMMON] unsigned char 
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      unsigned char 
  1207 ;; Registers used:
  1208 ;;		wreg, status,2, status,0
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMMON   BANK0   BANK1
  1214 ;;      Params:         1       0       0
  1215 ;;      Locals:         3       0       0
  1216 ;;      Temps:          0       0       0
  1217 ;;      Totals:         4       0       0
  1218 ;;Total ram usage:        4 bytes
  1219 ;; Hardware stack levels used:    1
  1220 ;; Hardware stack levels required when called:    2
  1221 ;; This function calls:
  1222 ;;		Nothing
  1223 ;; This function is called by:
  1224 ;;		_workCtr
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           
  1229                           ;psect for function ___lbdiv
  1230  042B                     ___lbdiv:	
  1231                           
  1232                           ;incstack = 0
  1233                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1234                           ;___lbdiv@dividend stored from wreg
  1235  042B  00F4               	movwf	___lbdiv@dividend
  1236  042C  01F6               	clrf	___lbdiv@quotient
  1237  042D  0873               	movf	___lbdiv@divisor,w
  1238  042E  1903               	btfsc	3,2
  1239  042F  2C44               	goto	l2015
  1240  0430  01F5               	clrf	___lbdiv@counter
  1241  0431                     l2001:	
  1242  0431  0AF5               	incf	___lbdiv@counter,f
  1243  0432  1BF3               	btfsc	___lbdiv@divisor,7
  1244  0433  2C37               	goto	l1061
  1245  0434  1003               	clrc
  1246  0435  0DF3               	rlf	___lbdiv@divisor,f
  1247  0436  2C31               	goto	l2001
  1248  0437                     l1061:	
  1249  0437  1003               	clrc
  1250  0438  0DF6               	rlf	___lbdiv@quotient,f
  1251  0439  0873               	movf	___lbdiv@divisor,w
  1252  043A  0274               	subwf	___lbdiv@dividend,w
  1253  043B  1C03               	skipc
  1254  043C  2C41               	goto	L3
  1255  043D  0873               	movf	___lbdiv@divisor,w
  1256  043E  02F4               	subwf	___lbdiv@dividend,f
  1257  043F  1476               	bsf	___lbdiv@quotient,0
  1258  0440  1003               	clrc
  1259  0441                     L3:	
  1260  0441  0CF3               	rrf	___lbdiv@divisor,f
  1261  0442  0BF5               	decfsz	___lbdiv@counter,f
  1262  0443  2C37               	goto	l1061
  1263  0444                     l2015:	
  1264  0444  0876               	movf	___lbdiv@quotient,w
  1265  0445  0008               	return
  1266  0446                     __end_of___lbdiv:	
  1267                           
  1268                           	psect	text6
  1269  01B8                     __ptext6:	
  1270 ;; *************** function _setBatStep *****************
  1271 ;; Defined at:
  1272 ;;		line 528 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;		None
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;		None
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  1    wreg      void 
  1279 ;; Registers used:
  1280 ;;		wreg, status,2, status,0, pclath, cstack
  1281 ;; Tracked objects:
  1282 ;;		On entry : 0/0
  1283 ;;		On exit  : 100/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMMON   BANK0   BANK1
  1286 ;;      Params:         0       0       0
  1287 ;;      Locals:         0       0       0
  1288 ;;      Temps:          0       0       0
  1289 ;;      Totals:         0       0       0
  1290 ;;Total ram usage:        0 bytes
  1291 ;; Hardware stack levels used:    1
  1292 ;; Hardware stack levels required when called:    3
  1293 ;; This function calls:
  1294 ;;		___lwdiv
  1295 ;; This function is called by:
  1296 ;;		_main
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           
  1301                           ;psect for function _setBatStep
  1302  01B8                     _setBatStep:	
  1303                           
  1304                           ;main.c: 530: if(lowBatFlag == 1 && lowShanTime == 0 && workStep > 0)
  1305                           
  1306                           ;incstack = 0
  1307                           ; Regs used in _setBatStep: [wreg+status,2+status,0+pclath+cstack]
  1308  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  1309  01B9  0B30               	decfsz	_lowBatFlag,w
  1310  01BA  29C9               	goto	l2619
  1311  01BB  0824               	movf	_lowShanTime,w
  1312  01BC  0425               	iorwf	_lowShanTime+1,w
  1313  01BD  1D03               	btfss	3,2
  1314  01BE  29C9               	goto	l2619
  1315  01BF  0878               	movf	_workStep,w
  1316  01C0  1903               	btfsc	3,2
  1317  01C1  29C9               	goto	l2619
  1318  01C2  302C               	movlw	44
  1319                           
  1320                           ;main.c: 531: {
  1321                           ;main.c: 532: showBatStep = 0;
  1322  01C3  01F7               	clrf	_showBatStep
  1323                           
  1324                           ;main.c: 533: curBatStep = 0;
  1325  01C4  01AD               	clrf	_curBatStep
  1326                           
  1327                           ;main.c: 534: lowShanTime = 300;
  1328  01C5  00A4               	movwf	_lowShanTime
  1329  01C6  3001               	movlw	1
  1330  01C7  00A5               	movwf	_lowShanTime+1
  1331                           
  1332                           ;main.c: 535: }
  1333  01C8  0008               	return
  1334  01C9                     l2619:	
  1335                           
  1336                           ;main.c: 536: else if(power_ad < 1675)
  1337  01C9  3006               	movlw	6
  1338  01CA  0227               	subwf	_power_ad+1,w	;volatile
  1339  01CB  308B               	movlw	139
  1340  01CC  1903               	skipnz
  1341  01CD  0226               	subwf	_power_ad,w	;volatile
  1342  01CE  1803               	skipnc
  1343  01CF  29E3               	goto	l2629
  1344                           
  1345                           ;main.c: 537: {
  1346                           ;main.c: 538: if(count1s == 0)
  1347  01D0  087A               	movf	_count1s,w
  1348  01D1  1D03               	btfss	3,2
  1349  01D2  29E0               	goto	l734
  1350                           
  1351                           ;main.c: 539: {
  1352                           ;main.c: 540: if(showBatStep > 1)
  1353  01D3  3002               	movlw	2
  1354  01D4  0277               	subwf	_showBatStep,w
  1355  01D5  1C03               	skipc
  1356  01D6  29DC               	goto	l735
  1357                           
  1358                           ;main.c: 541: {
  1359                           ;main.c: 542: if(chrgFlag == 0)
  1360  01D7  0879               	movf	_chrgFlag,w
  1361  01D8  1D03               	btfss	3,2
  1362  01D9  29DE               	goto	l737
  1363                           
  1364                           ;main.c: 543: showBatStep--;
  1365  01DA  03F7               	decf	_showBatStep,f
  1366  01DB  29DE               	goto	l737
  1367  01DC                     l735:	
  1368                           
  1369                           ;main.c: 545: else
  1370                           ;main.c: 546: {
  1371                           ;main.c: 547: showBatStep = 1;
  1372  01DC  01F7               	clrf	_showBatStep
  1373  01DD  0AF7               	incf	_showBatStep,f
  1374  01DE                     l737:	
  1375                           
  1376                           ;main.c: 548: }
  1377                           ;main.c: 549: curBatStep = 1;
  1378  01DE  01AD               	clrf	_curBatStep
  1379  01DF  0AAD               	incf	_curBatStep,f
  1380  01E0                     l734:	
  1381                           
  1382                           ;main.c: 550: }
  1383                           ;main.c: 551: curBatStep = 1;
  1384  01E0  01AD               	clrf	_curBatStep
  1385  01E1  0AAD               	incf	_curBatStep,f
  1386                           
  1387                           ;main.c: 552: }
  1388  01E2  0008               	return
  1389  01E3                     l2629:	
  1390                           
  1391                           ;main.c: 553: else
  1392                           ;main.c: 554: {
  1393                           ;main.c: 555: if(power_ad < 1875)
  1394  01E3  3007               	movlw	7
  1395  01E4  0227               	subwf	_power_ad+1,w	;volatile
  1396  01E5  3053               	movlw	83
  1397  01E6  1903               	skipnz
  1398  01E7  0226               	subwf	_power_ad,w	;volatile
  1399  01E8  1803               	skipnc
  1400  01E9  29F8               	goto	l2633
  1401                           
  1402                           ;main.c: 556: {
  1403                           ;main.c: 557: curBatStep = (power_ad - 1675)/10;
  1404  01EA  300A               	movlw	10
  1405  01EB  00F3               	movwf	___lwdiv@divisor
  1406  01EC  01F4               	clrf	___lwdiv@divisor+1
  1407  01ED  0826               	movf	_power_ad,w	;volatile
  1408  01EE  3E75               	addlw	117
  1409  01EF  00F5               	movwf	___lwdiv@dividend
  1410  01F0  0827               	movf	_power_ad+1,w	;volatile
  1411  01F1  1803               	skipnc
  1412  01F2  3E01               	addlw	1
  1413  01F3  3EF9               	addlw	249
  1414  01F4  00F6               	movwf	___lwdiv@dividend+1
  1415  01F5  2357               	fcall	___lwdiv
  1416  01F6  0873               	movf	?___lwdiv,w
  1417  01F7  2A06               	goto	L4
  1418  01F8                     l2633:	
  1419                           ;main.c: 558: }
  1420                           
  1421                           
  1422                           ;main.c: 559: else
  1423                           ;main.c: 560: {
  1424                           ;main.c: 561: curBatStep = 10 + ((power_ad - 1875)/5);
  1425  01F8  3005               	movlw	5
  1426  01F9  00F3               	movwf	___lwdiv@divisor
  1427  01FA  01F4               	clrf	___lwdiv@divisor+1
  1428  01FB  0826               	movf	_power_ad,w	;volatile
  1429  01FC  3EAD               	addlw	173
  1430  01FD  00F5               	movwf	___lwdiv@dividend
  1431  01FE  0827               	movf	_power_ad+1,w	;volatile
  1432  01FF  1803               	skipnc
  1433  0200  3E01               	addlw	1
  1434  0201  3EF8               	addlw	248
  1435  0202  00F6               	movwf	___lwdiv@dividend+1
  1436  0203  2357               	fcall	___lwdiv
  1437  0204  0873               	movf	?___lwdiv,w
  1438  0205  3E0A               	addlw	10
  1439  0206                     L4:	
  1440  0206  00AD               	movwf	_curBatStep
  1441                           
  1442                           ;main.c: 562: }
  1443                           ;main.c: 563: if(curBatStep > 99)
  1444  0207  3064               	movlw	100
  1445  0208  022D               	subwf	_curBatStep,w
  1446  0209  1C03               	skipc
  1447  020A  2A0D               	goto	l2639
  1448                           
  1449                           ;main.c: 564: {
  1450                           ;main.c: 565: curBatStep = 99;
  1451  020B  3063               	movlw	99
  1452  020C  00AD               	movwf	_curBatStep
  1453  020D                     l2639:	
  1454                           
  1455                           ;main.c: 566: }
  1456                           ;main.c: 568: if(chrgFlag)
  1457  020D  0879               	movf	_chrgFlag,w
  1458  020E  1903               	btfsc	3,2
  1459  020F  2A33               	goto	l2663
  1460                           
  1461                           ;main.c: 569: {
  1462                           ;main.c: 570: if(chrgFullFlag)
  1463  0210  0838               	movf	_chrgFullFlag,w
  1464  0211  1903               	btfsc	3,2
  1465  0212  2A2C               	goto	l2651
  1466                           
  1467                           ;main.c: 571: {
  1468                           ;main.c: 572: if(++count30s >= 3000 && showBatStep < 99)
  1469  0213  0AA0               	incf	_count30s,f
  1470  0214  1903               	skipnz
  1471  0215  0AA1               	incf	_count30s+1,f
  1472  0216  300B               	movlw	11
  1473  0217  0221               	subwf	_count30s+1,w
  1474  0218  30B8               	movlw	184
  1475  0219  2A20               	goto	L5
  1476  021A                     l2653:	
  1477                           
  1478                           ;main.c: 579: {
  1479                           ;main.c: 580: if(++count30s >= 30000 && showBatStep < 99)
  1480  021A  0AA0               	incf	_count30s,f
  1481  021B  1903               	skipnz
  1482  021C  0AA1               	incf	_count30s+1,f
  1483  021D  3075               	movlw	117
  1484  021E  0221               	subwf	_count30s+1,w
  1485  021F  3030               	movlw	48
  1486  0220                     L5:	
  1487  0220  1903               	skipnz
  1488  0221  0220               	subwf	_count30s,w
  1489  0222  1C03               	skipc
  1490  0223  0008               	return
  1491  0224  3063               	movlw	99
  1492  0225  0277               	subwf	_showBatStep,w
  1493  0226  1803               	skipnc
  1494  0227  0008               	return
  1495                           
  1496                           ;main.c: 573: {
  1497                           ;main.c: 574: count30s = 0;
  1498  0228  01A0               	clrf	_count30s
  1499  0229  01A1               	clrf	_count30s+1
  1500                           
  1501                           ;main.c: 575: showBatStep++;
  1502  022A  0AF7               	incf	_showBatStep,f
  1503  022B  0008               	return
  1504  022C                     l2651:	
  1505                           
  1506                           ;main.c: 578: else if(curBatStep > showBatStep)
  1507  022C  082D               	movf	_curBatStep,w
  1508  022D  0277               	subwf	_showBatStep,w
  1509  022E  1C03               	btfss	3,0
  1510  022F  2A1A               	goto	l2653
  1511  0230                     l2661:	
  1512                           
  1513                           ;main.c: 587: else
  1514                           ;main.c: 588: {
  1515                           ;main.c: 589: count30s = 0;
  1516  0230  01A0               	clrf	_count30s
  1517  0231  01A1               	clrf	_count30s+1
  1518  0232  0008               	return
  1519  0233                     l2663:	
  1520                           
  1521                           ;main.c: 592: else
  1522                           ;main.c: 593: {
  1523                           ;main.c: 594: if(curBatStep < showBatStep && showBatStep > 1)
  1524  0233  0877               	movf	_showBatStep,w
  1525  0234  022D               	subwf	_curBatStep,w
  1526  0235  1803               	skipnc
  1527  0236  2A30               	goto	l2661
  1528  0237  3002               	movlw	2
  1529  0238  0277               	subwf	_showBatStep,w
  1530  0239  1C03               	skipc
  1531  023A  2A30               	goto	l2661
  1532                           
  1533                           ;main.c: 595: {
  1534                           ;main.c: 596: if(++count30s >= 1500 && showBatStep > 1)
  1535  023B  0AA0               	incf	_count30s,f
  1536  023C  1903               	skipnz
  1537  023D  0AA1               	incf	_count30s+1,f
  1538  023E  3005               	movlw	5
  1539  023F  0221               	subwf	_count30s+1,w
  1540  0240  30DC               	movlw	220
  1541  0241  1903               	skipnz
  1542  0242  0220               	subwf	_count30s,w
  1543  0243  1C03               	skipc
  1544  0244  0008               	return
  1545  0245  3002               	movlw	2
  1546  0246  0277               	subwf	_showBatStep,w
  1547  0247  1C03               	skipc
  1548  0248  0008               	return
  1549                           
  1550                           ;main.c: 597: {
  1551                           ;main.c: 598: count30s = 0;
  1552  0249  01A0               	clrf	_count30s
  1553  024A  01A1               	clrf	_count30s+1
  1554                           
  1555                           ;main.c: 599: showBatStep--;
  1556  024B  03F7               	decf	_showBatStep,f
  1557  024C  0008               	return
  1558  024D                     __end_of_setBatStep:	
  1559                           
  1560                           	psect	text7
  1561  0357                     __ptext7:	
  1562 ;; *************** function ___lwdiv *****************
  1563 ;; Defined at:
  1564 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;  divisor         2    3[COMMON] unsigned int 
  1567 ;;  dividend        2    5[COMMON] unsigned int 
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;  quotient        2    1[BANK0 ] unsigned int 
  1570 ;;  counter         1    0[BANK0 ] unsigned char 
  1571 ;; Return value:  Size  Location     Type
  1572 ;;                  2    3[COMMON] unsigned int 
  1573 ;; Registers used:
  1574 ;;		wreg, status,2, status,0
  1575 ;; Tracked objects:
  1576 ;;		On entry : 100/0
  1577 ;;		On exit  : 100/0
  1578 ;;		Unchanged: 0/0
  1579 ;; Data sizes:     COMMON   BANK0   BANK1
  1580 ;;      Params:         4       0       0
  1581 ;;      Locals:         0       3       0
  1582 ;;      Temps:          0       0       0
  1583 ;;      Totals:         4       3       0
  1584 ;;Total ram usage:        7 bytes
  1585 ;; Hardware stack levels used:    1
  1586 ;; Hardware stack levels required when called:    2
  1587 ;; This function calls:
  1588 ;;		Nothing
  1589 ;; This function is called by:
  1590 ;;		_setBatStep
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           
  1595                           ;psect for function ___lwdiv
  1596  0357                     ___lwdiv:	
  1597                           
  1598                           ;incstack = 0
  1599                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1600  0357  01BD               	clrf	___lwdiv@quotient
  1601  0358  01BE               	clrf	___lwdiv@quotient+1
  1602  0359  0873               	movf	___lwdiv@divisor,w
  1603  035A  0474               	iorwf	___lwdiv@divisor+1,w
  1604  035B  1903               	btfsc	3,2
  1605  035C  2B7C               	goto	l2595
  1606  035D  01BC               	clrf	___lwdiv@counter
  1607  035E                     L6:	
  1608  035E  0ABC               	incf	___lwdiv@counter,f
  1609  035F  1BF4               	btfsc	___lwdiv@divisor+1,7
  1610  0360  2B65               	goto	l2583
  1611  0361  1003               	clrc
  1612  0362  0DF3               	rlf	___lwdiv@divisor,f
  1613  0363  0DF4               	rlf	___lwdiv@divisor+1,f
  1614  0364  2B5E               	goto	L6
  1615  0365                     l2583:	
  1616  0365  1003               	clrc
  1617  0366  0DBD               	rlf	___lwdiv@quotient,f
  1618  0367  0DBE               	rlf	___lwdiv@quotient+1,f
  1619  0368  0874               	movf	___lwdiv@divisor+1,w
  1620  0369  0276               	subwf	___lwdiv@dividend+1,w
  1621  036A  1D03               	skipz
  1622  036B  2B6E               	goto	u2615
  1623  036C  0873               	movf	___lwdiv@divisor,w
  1624  036D  0275               	subwf	___lwdiv@dividend,w
  1625  036E                     u2615:	
  1626  036E  1C03               	skipc
  1627  036F  2B78               	goto	L7
  1628  0370  0873               	movf	___lwdiv@divisor,w
  1629  0371  02F5               	subwf	___lwdiv@dividend,f
  1630  0372  0874               	movf	___lwdiv@divisor+1,w
  1631  0373  1C03               	skipc
  1632  0374  03F6               	decf	___lwdiv@dividend+1,f
  1633  0375  02F6               	subwf	___lwdiv@dividend+1,f
  1634  0376  143D               	bsf	___lwdiv@quotient,0
  1635  0377  1003               	clrc
  1636  0378                     L7:	
  1637  0378  0CF4               	rrf	___lwdiv@divisor+1,f
  1638  0379  0CF3               	rrf	___lwdiv@divisor,f
  1639  037A  0BBC               	decfsz	___lwdiv@counter,f
  1640  037B  2B65               	goto	l2583
  1641  037C                     l2595:	
  1642  037C  083E               	movf	___lwdiv@quotient+1,w
  1643  037D  00F4               	movwf	?___lwdiv+1
  1644  037E  083D               	movf	___lwdiv@quotient,w
  1645  037F  00F3               	movwf	?___lwdiv
  1646  0380  0008               	return
  1647  0381                     __end_of___lwdiv:	
  1648                           
  1649                           	psect	text8
  1650  03AB                     __ptext8:	
  1651 ;; *************** function _keyCtr *****************
  1652 ;; Defined at:
  1653 ;;		line 387 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;		None
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;  kclick          1    4[COMMON] unsigned char 
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  1    wreg      void 
  1660 ;; Registers used:
  1661 ;;		wreg, status,2, status,0, pclath, cstack
  1662 ;; Tracked objects:
  1663 ;;		On entry : 100/0
  1664 ;;		On exit  : 100/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMMON   BANK0   BANK1
  1667 ;;      Params:         0       0       0
  1668 ;;      Locals:         1       0       0
  1669 ;;      Temps:          0       0       0
  1670 ;;      Totals:         1       0       0
  1671 ;;Total ram usage:        1 bytes
  1672 ;; Hardware stack levels used:    1
  1673 ;; Hardware stack levels required when called:    3
  1674 ;; This function calls:
  1675 ;;		_keyRead
  1676 ;; This function is called by:
  1677 ;;		_main
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           
  1682                           ;psect for function _keyCtr
  1683  03AB                     _keyCtr:	
  1684                           
  1685                           ;main.c: 389: char kclick = keyRead(0x04 & (~PORTB));
  1686                           
  1687                           ;incstack = 0
  1688                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1689  03AB  0906               	comf	6,w	;volatile
  1690  03AC  3904               	andlw	4
  1691  03AD  23D4               	fcall	_keyRead
  1692  03AE  00F4               	movwf	keyCtr@kclick
  1693                           
  1694                           ;main.c: 390: if(kclick == 1)
  1695  03AF  0B74               	decfsz	keyCtr@kclick,w
  1696  03B0  2BC5               	goto	l2235
  1697                           
  1698                           ;main.c: 391: {
  1699                           ;main.c: 392: if(workStep > 0)
  1700  03B1  0878               	movf	_workStep,w
  1701  03B2  1903               	btfsc	3,2
  1702  03B3  2BBC               	goto	l2227
  1703                           
  1704                           ;main.c: 393: {
  1705                           ;main.c: 394: if(++workStep > 2)
  1706  03B4  3003               	movlw	3
  1707  03B5  0AF8               	incf	_workStep,f
  1708  03B6  0278               	subwf	_workStep,w
  1709  03B7  1C03               	skipc
  1710  03B8  0008               	return
  1711                           
  1712                           ;main.c: 395: {
  1713                           ;main.c: 396: workStep = 1;
  1714  03B9  01F8               	clrf	_workStep
  1715  03BA  0AF8               	incf	_workStep,f
  1716  03BB  0008               	return
  1717  03BC                     l2227:	
  1718                           
  1719                           ;main.c: 399: else if(showBatTime > 0)
  1720  03BC  0832               	movf	_showBatTime,w
  1721  03BD  1903               	btfsc	3,2
  1722  03BE  2BC1               	goto	l2231
  1723                           
  1724                           ;main.c: 400: {
  1725                           ;main.c: 401: showBatTime = 0;
  1726  03BF  01B2               	clrf	_showBatTime
  1727                           
  1728                           ;main.c: 402: }
  1729  03C0  0008               	return
  1730  03C1                     l2231:	
  1731                           
  1732                           ;main.c: 403: else
  1733                           ;main.c: 404: {
  1734                           ;main.c: 405: showBatTime = 200;
  1735  03C1  30C8               	movlw	200
  1736  03C2  00B2               	movwf	_showBatTime
  1737                           
  1738                           ;main.c: 406: count1s = 0;
  1739  03C3  01FA               	clrf	_count1s
  1740  03C4  0008               	return
  1741  03C5                     l2235:	
  1742                           
  1743                           ;main.c: 409: else if(kclick == 2)
  1744  03C5  3002               	movlw	2
  1745  03C6  0674               	xorwf	keyCtr@kclick,w
  1746  03C7  1D03               	btfss	3,2
  1747  03C8  0008               	return
  1748                           
  1749                           ;main.c: 410: {
  1750                           ;main.c: 411: if(workStep > 0)
  1751  03C9  0878               	movf	_workStep,w
  1752  03CA  1903               	btfsc	3,2
  1753  03CB  2BCE               	goto	l694
  1754                           
  1755                           ;main.c: 412: {
  1756                           ;main.c: 413: workStep = 0;
  1757  03CC  01F8               	clrf	_workStep
  1758                           
  1759                           ;main.c: 414: }
  1760  03CD  0008               	return
  1761  03CE                     l694:	
  1762                           
  1763                           ;main.c: 415: else
  1764                           ;main.c: 416: {
  1765                           ;main.c: 417: workStep = 1;
  1766  03CE  01F8               	clrf	_workStep
  1767  03CF  0AF8               	incf	_workStep,f
  1768                           
  1769                           ;main.c: 418: showBatTime = 0;
  1770  03D0  01B2               	clrf	_showBatTime
  1771                           
  1772                           ;main.c: 419: count900s = 0;
  1773  03D1  01A2               	clrf	_count900s
  1774  03D2  01A3               	clrf	_count900s+1
  1775  03D3  0008               	return
  1776  03D4                     __end_of_keyCtr:	
  1777                           
  1778                           	psect	text9
  1779  03D4                     __ptext9:	
  1780 ;; *************** function _keyRead *****************
  1781 ;; Defined at:
  1782 ;;		line 352 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;  keyStatus       1    wreg     unsigned char 
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;  keyStatus       1    3[COMMON] unsigned char 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      unsigned char 
  1789 ;; Registers used:
  1790 ;;		wreg, status,2, status,0
  1791 ;; Tracked objects:
  1792 ;;		On entry : 100/0
  1793 ;;		On exit  : 100/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMMON   BANK0   BANK1
  1796 ;;      Params:         0       0       0
  1797 ;;      Locals:         1       0       0
  1798 ;;      Temps:          0       0       0
  1799 ;;      Totals:         1       0       0
  1800 ;;Total ram usage:        1 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    2
  1803 ;; This function calls:
  1804 ;;		Nothing
  1805 ;; This function is called by:
  1806 ;;		_keyCtr
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           
  1811                           ;psect for function _keyRead
  1812  03D4                     _keyRead:	
  1813                           
  1814                           ;incstack = 0
  1815                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1816                           ;keyRead@keyStatus stored from wreg
  1817  03D4  00F3               	movwf	keyRead@keyStatus
  1818                           
  1819                           ;main.c: 354: if(keyStatus)
  1820  03D5  0873               	movf	keyRead@keyStatus,w
  1821  03D6  3064               	movlw	100
  1822  03D7  1903               	btfsc	3,2
  1823  03D8  2BE6               	goto	L9
  1824                           
  1825                           ;main.c: 355: {
  1826                           ;main.c: 356: keyCount++;
  1827  03D9  0AB4               	incf	_keyCount,f
  1828                           
  1829                           ;main.c: 357: if(keyCount >= 100)
  1830  03DA  0234               	subwf	_keyCount,w
  1831  03DB  1C03               	skipc
  1832  03DC  3400               	retlw	0
  1833                           
  1834                           ;main.c: 358: {
  1835                           ;main.c: 359: keyCount = 100;
  1836  03DD  3064               	movlw	100
  1837  03DE  00B4               	movwf	_keyCount
  1838                           
  1839                           ;main.c: 360: if(!longPressFlag)
  1840  03DF  0833               	movf	_longPressFlag,w
  1841  03E0  1D03               	btfss	3,2
  1842  03E1  3400               	retlw	0
  1843  03E2  3002               	movlw	2
  1844                           
  1845                           ;main.c: 361: {
  1846                           ;main.c: 362: longPressFlag = 1;
  1847  03E3  01B3               	clrf	_longPressFlag
  1848  03E4  0AB3               	incf	_longPressFlag,f
  1849                           
  1850                           ;main.c: 363: return 2;
  1851  03E5  0008               	return
  1852  03E6                     L9:	
  1853                           ;main.c: 367: else
  1854                           ;main.c: 368: {
  1855                           ;main.c: 369: if(keyCount >= 100)
  1856                           
  1857  03E6  0234               	subwf	_keyCount,w
  1858  03E7  1C03               	skipc
  1859  03E8  2BEC               	goto	l1893
  1860                           
  1861                           ;main.c: 370: {
  1862                           ;main.c: 371: keyCount = 0;
  1863  03E9  01B4               	clrf	_keyCount
  1864                           
  1865                           ;main.c: 372: longPressFlag = 0;
  1866  03EA  01B3               	clrf	_longPressFlag
  1867                           
  1868                           ;main.c: 373: return 0;
  1869  03EB  3400               	retlw	0
  1870  03EC                     l1893:	
  1871                           
  1872                           ;main.c: 375: else if(keyCount >= 6)
  1873  03EC  3006               	movlw	6
  1874  03ED  0234               	subwf	_keyCount,w
  1875                           
  1876                           ;main.c: 376: {
  1877                           ;main.c: 377: keyCount = 0;
  1878  03EE  01B4               	clrf	_keyCount
  1879  03EF  1803               	btfsc	3,0
  1880                           
  1881                           ;main.c: 378: return 1;
  1882  03F0  3401               	retlw	1
  1883  03F1  3400               	retlw	0
  1884  03F2                     __end_of_keyRead:	
  1885                           ;main.c: 379: }
  1886                           ;main.c: 380: keyCount = 0;
  1887                           
  1888                           
  1889                           	psect	text10
  1890  0381                     __ptext10:	
  1891 ;; *************** function _chrgCtr *****************
  1892 ;; Defined at:
  1893 ;;		line 311 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1894 ;; Parameters:    Size  Location     Type
  1895 ;;		None
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;		None
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, status,2, status,0
  1902 ;; Tracked objects:
  1903 ;;		On entry : 100/0
  1904 ;;		On exit  : 100/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMMON   BANK0   BANK1
  1907 ;;      Params:         0       0       0
  1908 ;;      Locals:         0       0       0
  1909 ;;      Temps:          0       0       0
  1910 ;;      Totals:         0       0       0
  1911 ;;Total ram usage:        0 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    2
  1914 ;; This function calls:
  1915 ;;		Nothing
  1916 ;; This function is called by:
  1917 ;;		_main
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           
  1922                           ;psect for function _chrgCtr
  1923  0381                     _chrgCtr:	
  1924                           
  1925                           ;main.c: 313: if(PORTB & 0x01)
  1926                           
  1927                           ;incstack = 0
  1928                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  1929  0381  1C06               	btfss	6,0	;volatile
  1930  0382  2B96               	goto	l2127
  1931                           
  1932                           ;main.c: 314: {
  1933                           ;main.c: 315: chrgFlag = 1;
  1934  0383  01F9               	clrf	_chrgFlag
  1935  0384  0AF9               	incf	_chrgFlag,f
  1936                           
  1937                           ;main.c: 316: lowBatFlag = 0;
  1938  0385  01B0               	clrf	_lowBatFlag
  1939                           
  1940                           ;main.c: 317: if(PORTA & 0x01)
  1941  0386  1683               	bsf	3,5	;RP0=1, select bank1
  1942  0387  1C06               	btfss	6,0	;volatile
  1943  0388  2B8C               	goto	l2121
  1944                           
  1945                           ;main.c: 318: {
  1946                           ;main.c: 319: chrgFullTime = 0;
  1947  0389  1283               	bcf	3,5	;RP0=0, select bank0
  1948  038A  01B6               	clrf	_chrgFullTime
  1949                           
  1950                           ;main.c: 320: }
  1951  038B  0008               	return
  1952  038C                     l2121:	
  1953                           
  1954                           ;main.c: 321: else
  1955                           ;main.c: 322: {
  1956                           ;main.c: 323: if(++chrgFullTime >= 200)
  1957  038C  30C8               	movlw	200
  1958  038D  1283               	bcf	3,5	;RP0=0, select bank0
  1959  038E  0AB6               	incf	_chrgFullTime,f
  1960  038F  0236               	subwf	_chrgFullTime,w
  1961  0390  1C03               	skipc
  1962  0391  0008               	return
  1963                           
  1964                           ;main.c: 324: {
  1965                           ;main.c: 325: chrgFullTime = 0;
  1966  0392  01B6               	clrf	_chrgFullTime
  1967                           
  1968                           ;main.c: 326: chrgFullFlag = 1;
  1969  0393  01B8               	clrf	_chrgFullFlag
  1970  0394  0AB8               	incf	_chrgFullFlag,f
  1971  0395  0008               	return
  1972  0396                     l2127:	
  1973  0396  3006               	movlw	6
  1974                           
  1975                           ;main.c: 330: else
  1976                           ;main.c: 331: {
  1977                           ;main.c: 332: chrgFlag = 0;
  1978  0397  01F9               	clrf	_chrgFlag
  1979                           
  1980                           ;main.c: 333: chrgFullFlag = 0;
  1981  0398  01B8               	clrf	_chrgFullFlag
  1982                           
  1983                           ;main.c: 334: chrgFullTime = 0;
  1984  0399  01B6               	clrf	_chrgFullTime
  1985                           
  1986                           ;main.c: 335: if(power_ad < 1563)
  1987  039A  0227               	subwf	_power_ad+1,w	;volatile
  1988  039B  301B               	movlw	27
  1989  039C  1903               	skipnz
  1990  039D  0226               	subwf	_power_ad,w	;volatile
  1991  039E  1803               	skipnc
  1992  039F  2BA9               	goto	l2137
  1993                           
  1994                           ;main.c: 336: {
  1995                           ;main.c: 337: if(++lowBatTime > 200)
  1996  03A0  30C9               	movlw	201
  1997  03A1  0AAC               	incf	_lowBatTime,f
  1998  03A2  022C               	subwf	_lowBatTime,w
  1999  03A3  1C03               	skipc
  2000  03A4  0008               	return
  2001                           
  2002                           ;main.c: 338: {
  2003                           ;main.c: 339: lowBatTime = 0;
  2004  03A5  01AC               	clrf	_lowBatTime
  2005                           
  2006                           ;main.c: 340: lowBatFlag = 1;
  2007  03A6  01B0               	clrf	_lowBatFlag
  2008  03A7  0AB0               	incf	_lowBatFlag,f
  2009  03A8  0008               	return
  2010  03A9                     l2137:	
  2011                           
  2012                           ;main.c: 343: else
  2013                           ;main.c: 344: {
  2014                           ;main.c: 345: lowBatTime = 0;
  2015  03A9  01AC               	clrf	_lowBatTime
  2016  03AA  0008               	return
  2017  03AB                     __end_of_chrgCtr:	
  2018                           
  2019                           	psect	text11
  2020  0460                     __ptext11:	
  2021 ;; *************** function _checkBatAD *****************
  2022 ;; Defined at:
  2023 ;;		line 612 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2024 ;; Parameters:    Size  Location     Type
  2025 ;;		None
  2026 ;; Auto vars:     Size  Location     Type
  2027 ;;  power_temp      4    0        volatile unsigned long 
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  1    wreg      void 
  2030 ;; Registers used:
  2031 ;;		wreg, status,2, status,0, pclath, cstack
  2032 ;; Tracked objects:
  2033 ;;		On entry : 100/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMMON   BANK0   BANK1
  2037 ;;      Params:         0       0       0
  2038 ;;      Locals:         0       0       0
  2039 ;;      Temps:          1       0       0
  2040 ;;      Totals:         1       0       0
  2041 ;;Total ram usage:        1 bytes
  2042 ;; Hardware stack levels used:    1
  2043 ;; Hardware stack levels required when called:    3
  2044 ;; This function calls:
  2045 ;;		_ADC_Sample
  2046 ;; This function is called by:
  2047 ;;		_main
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           
  2052                           ;psect for function _checkBatAD
  2053  0460                     _checkBatAD:	
  2054                           
  2055                           ;main.c: 614: test_adc = ADC_Sample(12, 5);
  2056                           
  2057                           ;incstack = 0
  2058                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2059  0460  3005               	movlw	5
  2060  0461  00F3               	movwf	ADC_Sample@adldo
  2061  0462  300C               	movlw	12
  2062  0463  2018               	fcall	_ADC_Sample
  2063  0464  00BB               	movwf	_test_adc	;volatile
  2064                           
  2065                           ;main.c: 615: if (0xA5 == test_adc)
  2066  0465  30A5               	movlw	165
  2067  0466  063B               	xorwf	_test_adc,w	;volatile
  2068  0467  1D03               	btfss	3,2
  2069  0468  2C6E               	goto	l2605
  2070                           
  2071                           ;main.c: 616: {
  2072                           ;main.c: 617: volatile unsigned long power_temp;
  2073                           ;main.c: 619: power_ad = adresult;
  2074  0469  082B               	movf	_adresult+1,w	;volatile
  2075  046A  00A7               	movwf	_power_ad+1	;volatile
  2076  046B  082A               	movf	_adresult,w	;volatile
  2077  046C  00A6               	movwf	_power_ad	;volatile
  2078                           
  2079                           ;main.c: 620: }
  2080  046D  0008               	return
  2081  046E                     l2605:	
  2082                           
  2083                           ;main.c: 621: else
  2084                           ;main.c: 622: {
  2085                           ;main.c: 623: ADCON0 = 0;
  2086  046E  1683               	bsf	3,5	;RP0=1, select bank1
  2087  046F  0195               	clrf	21	;volatile
  2088                           
  2089                           ;main.c: 624: ADCON1 = 0;
  2090  0470  0196               	clrf	22	;volatile
  2091                           
  2092                           ;main.c: 625: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2093  0471  3085               	movlw	133
  2094  0472  00F4               	movwf	??_checkBatAD
  2095  0473                     u3197:	
  2096  0473  0BF4               	decfsz	??_checkBatAD,f
  2097  0474  2C73               	goto	u3197
  2098  0475  0008               	return
  2099  0476                     __end_of_checkBatAD:	
  2100                           
  2101                           	psect	text12
  2102  0018                     __ptext12:	
  2103 ;; *************** function _ADC_Sample *****************
  2104 ;; Defined at:
  2105 ;;		line 840 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;  adch            1    wreg     unsigned char 
  2108 ;;  adldo           1    3[COMMON] unsigned char 
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;  adch            1    5[BANK0 ] unsigned char 
  2111 ;;  j               1    4[BANK0 ] unsigned char 
  2112 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  2113 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  2114 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  2115 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  2116 ;;  i               1    6[BANK0 ] unsigned char 
  2117 ;; Return value:  Size  Location     Type
  2118 ;;                  1    wreg      unsigned char 
  2119 ;; Registers used:
  2120 ;;		wreg, status,2, status,0
  2121 ;; Tracked objects:
  2122 ;;		On entry : 100/0
  2123 ;;		On exit  : 100/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMMON   BANK0   BANK1
  2126 ;;      Params:         1       0       0
  2127 ;;      Locals:         0      13       0
  2128 ;;      Temps:          0       4       0
  2129 ;;      Totals:         1      17       0
  2130 ;;Total ram usage:       18 bytes
  2131 ;; Hardware stack levels used:    1
  2132 ;; Hardware stack levels required when called:    2
  2133 ;; This function calls:
  2134 ;;		Nothing
  2135 ;; This function is called by:
  2136 ;;		_checkBatAD
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           
  2141                           ;psect for function _ADC_Sample
  2142  0018                     _ADC_Sample:	
  2143                           
  2144                           ;incstack = 0
  2145                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2146                           ;ADC_Sample@adch stored from wreg
  2147  0018  00C1               	movwf	ADC_Sample@adch
  2148                           
  2149                           ;main.c: 842: volatile unsigned long adsum = 0;
  2150                           
  2151                           ;main.c: 843: volatile unsigned int admin = 0, admax = 0;
  2152  0019  20F2               	fcall	PL4	;call to abstracted procedure
  2153                           
  2154                           ;main.c: 844: volatile unsigned int ad_temp = 0;
  2155  001A  01CB               	clrf	ADC_Sample@ad_temp	;volatile
  2156  001B  01CC               	clrf	ADC_Sample@ad_temp+1	;volatile
  2157                           
  2158                           ;main.c: 846: if ((!LDO_EN) && (adldo & 0x04) )
  2159  001C  1683               	bsf	3,5	;RP0=1, select bank1
  2160  001D  1D16               	btfss	22,2	;volatile
  2161  001E  1D73               	btfss	ADC_Sample@adldo,2
  2162  001F  2829               	goto	l2493
  2163                           
  2164                           ;main.c: 847: {
  2165                           ;main.c: 849: ADCON1 = adldo;
  2166  0020  0873               	movf	ADC_Sample@adldo,w
  2167  0021  0096               	movwf	22	;volatile
  2168                           
  2169                           ;main.c: 850: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2170  0022  3084               	movlw	132
  2171  0023  1283               	bcf	3,5	;RP0=0, select bank0
  2172  0024  00BC               	movwf	??_ADC_Sample
  2173  0025                     u3207:	
  2174  0025  0BBC               	decfsz	??_ADC_Sample,f
  2175  0026  2825               	goto	u3207
  2176  0027  2828               	nop2
  2177                           
  2178                           ;main.c: 851: }
  2179  0028  282B               	goto	l2495
  2180  0029                     l2493:	
  2181                           
  2182                           ;main.c: 852: else
  2183                           ;main.c: 853: ADCON1 = adldo;
  2184  0029  0873               	movf	ADC_Sample@adldo,w
  2185  002A  0096               	movwf	22	;volatile
  2186  002B                     l2495:	
  2187                           
  2188                           ;main.c: 855: if(adch & 0x10)
  2189  002B  1283               	bcf	3,5	;RP0=0, select bank0
  2190  002C  1E41               	btfss	ADC_Sample@adch,4
  2191  002D  2833               	goto	l2503
  2192                           
  2193                           ;main.c: 856: {
  2194                           ;main.c: 857: CHS4 = 1;
  2195  002E  1683               	bsf	3,5	;RP0=1, select bank1
  2196  002F  1716               	bsf	22,6	;volatile
  2197                           
  2198                           ;main.c: 858: adch &= 0x0f;
  2199  0030  300F               	movlw	15
  2200  0031  1283               	bcf	3,5	;RP0=0, select bank0
  2201  0032  05C1               	andwf	ADC_Sample@adch,f
  2202  0033                     l2503:	
  2203                           
  2204                           ;main.c: 861: for (i = 0; i < 10; i++)
  2205  0033  01C2               	clrf	ADC_Sample@i
  2206  0034                     l2509:	
  2207                           
  2208                           ;main.c: 862: {
  2209                           ;main.c: 863: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2210  0034  0841               	movf	ADC_Sample@adch,w
  2211  0035  00BC               	movwf	??_ADC_Sample
  2212  0036  3001               	movlw	1
  2213  0037  1003               	clrc
  2214  0038                     L10:	
  2215  0038  0DBC               	rlf	??_ADC_Sample,f
  2216  0039  3EFF               	addlw	-1
  2217  003A  1003               	clrc
  2218  003B  1D03               	skipz
  2219  003C  2838               	goto	L10
  2220  003D  0D3C               	rlf	??_ADC_Sample,w
  2221  003E  3841               	iorlw	65
  2222  003F  1683               	bsf	3,5	;RP0=1, select bank1
  2223  0040  0095               	movwf	21	;volatile
  2224  0041  0000               	nop	;# 
  2225  0042  0000               	nop	;# 
  2226  0043  0000               	nop	;# 
  2227  0044  0000               	nop	;# 
  2228                           
  2229                           ;main.c: 868: GODONE = 1;
  2230  0045  1683               	bsf	3,5	;RP0=1, select bank1
  2231  0046  1495               	bsf	21,1	;volatile
  2232                           
  2233                           ;main.c: 870: unsigned char j = 0;
  2234  0047  1283               	bcf	3,5	;RP0=0, select bank0
  2235  0048  01C0               	clrf	ADC_Sample@j
  2236  0049                     l784:	
  2237                           ;main.c: 871: while (GODONE)
  2238                           
  2239  0049  1683               	bsf	3,5	;RP0=1, select bank1
  2240  004A  1C95               	btfss	21,1	;volatile
  2241  004B  2854               	goto	l2519
  2242                           
  2243                           ;main.c: 872: {
  2244                           ;main.c: 873: _delay((unsigned long)((2)*(16000000/4000000.0)));
  2245  004C  284D               	nop2	;2 cycle nop
  2246  004D  284E               	nop2	;2 cycle nop
  2247  004E  284F               	nop2	;2 cycle nop
  2248  004F  2850               	nop2	;2 cycle nop
  2249                           
  2250                           ;main.c: 875: if (0 == (--j))
  2251  0050  1283               	bcf	3,5	;RP0=0, select bank0
  2252  0051  0BC0               	decfsz	ADC_Sample@j,f
  2253  0052  2849               	goto	l784
  2254                           
  2255                           ;main.c: 876: return 0;
  2256  0053  3400               	retlw	0
  2257  0054                     l2519:	
  2258                           
  2259                           ;main.c: 877: }
  2260                           ;main.c: 879: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2261  0054  0819               	movf	25,w	;volatile
  2262  0055  1283               	bcf	3,5	;RP0=0, select bank0
  2263  0056  00CB               	movwf	ADC_Sample@ad_temp	;volatile
  2264  0057  01CC               	clrf	ADC_Sample@ad_temp+1	;volatile
  2265  0058  0ECB               	swapf	ADC_Sample@ad_temp,f	;volatile
  2266  0059  0ECC               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2267  005A  30F0               	movlw	240
  2268  005B  05CC               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2269  005C  084B               	movf	ADC_Sample@ad_temp,w	;volatile
  2270  005D  390F               	andlw	15
  2271  005E  04CC               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2272  005F  30F0               	movlw	240
  2273  0060  05CB               	andwf	ADC_Sample@ad_temp,f	;volatile
  2274  0061  1683               	bsf	3,5	;RP0=1, select bank1
  2275  0062  0E18               	swapf	24,w	;volatile
  2276  0063  390F               	andlw	15
  2277  0064  1283               	bcf	3,5	;RP0=0, select bank0
  2278  0065  07CB               	addwf	ADC_Sample@ad_temp,f	;volatile
  2279  0066  1803               	skipnc
  2280  0067  0ACC               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2281                           
  2282                           ;main.c: 881: if (0 == admax)
  2283  0068  0849               	movf	ADC_Sample@admax,w	;volatile
  2284  0069  044A               	iorwf	ADC_Sample@admax+1,w	;volatile
  2285  006A  1D03               	btfss	3,2
  2286  006B  286E               	goto	l2527
  2287                           
  2288                           ;main.c: 882: {
  2289                           ;main.c: 883: admax = ad_temp;
  2290  006C  20FB               	fcall	PL8	;call to abstracted procedure
  2291  006D  2880               	goto	l2533
  2292  006E                     l2527:	
  2293                           ;main.c: 885: }
  2294                           
  2295                           ;main.c: 884: admin = ad_temp;
  2296                           
  2297                           
  2298                           ;main.c: 886: else if (ad_temp > admax)
  2299  006E  084C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2300  006F  024A               	subwf	ADC_Sample@admax+1,w	;volatile
  2301  0070  1D03               	skipz
  2302  0071  2874               	goto	u2485
  2303  0072  084B               	movf	ADC_Sample@ad_temp,w	;volatile
  2304  0073  0249               	subwf	ADC_Sample@admax,w	;volatile
  2305  0074                     u2485:	
  2306  0074  1803               	skipnc
  2307  0075  2878               	goto	l2531
  2308                           
  2309                           ;main.c: 887: admax = ad_temp;
  2310  0076  20FB               	fcall	PL8	;call to abstracted procedure
  2311  0077  2884               	goto	l790
  2312  0078                     l2531:	
  2313                           
  2314                           ;main.c: 888: else if (ad_temp < admin)
  2315  0078  0848               	movf	ADC_Sample@admin+1,w	;volatile
  2316  0079  024C               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2317  007A  1D03               	skipz
  2318  007B  287E               	goto	u2495
  2319  007C  0847               	movf	ADC_Sample@admin,w	;volatile
  2320  007D  024B               	subwf	ADC_Sample@ad_temp,w	;volatile
  2321  007E                     u2495:	
  2322  007E  1803               	skipnc
  2323  007F  2884               	goto	l790
  2324  0080                     l2533:	
  2325                           
  2326                           ;main.c: 889: admin = ad_temp;
  2327  0080  084C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2328  0081  00C8               	movwf	ADC_Sample@admin+1	;volatile
  2329  0082  084B               	movf	ADC_Sample@ad_temp,w	;volatile
  2330  0083  00C7               	movwf	ADC_Sample@admin	;volatile
  2331  0084                     l790:	
  2332                           
  2333                           ;main.c: 891: adsum += ad_temp;
  2334  0084  084B               	movf	ADC_Sample@ad_temp,w	;volatile
  2335  0085  00BC               	movwf	??_ADC_Sample
  2336  0086  084C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2337  0087  00BD               	movwf	??_ADC_Sample+1
  2338  0088  01BE               	clrf	??_ADC_Sample+2
  2339  0089  01BF               	clrf	??_ADC_Sample+3
  2340  008A  083C               	movf	??_ADC_Sample,w
  2341  008B  07C3               	addwf	ADC_Sample@adsum,f	;volatile
  2342  008C  083D               	movf	??_ADC_Sample+1,w
  2343  008D  1103               	clrz
  2344  008E  1803               	skipnc
  2345  008F  3E01               	addlw	1
  2346  0090  1D03               	btfss	3,2
  2347  0091  07C4               	addwf	ADC_Sample@adsum+1,f	;volatile
  2348  0092  083E               	movf	??_ADC_Sample+2,w
  2349  0093  1103               	clrz
  2350  0094  1803               	skipnc
  2351  0095  3E01               	addlw	1
  2352  0096  1D03               	btfss	3,2
  2353  0097  07C5               	addwf	ADC_Sample@adsum+2,f	;volatile
  2354  0098  083F               	movf	??_ADC_Sample+3,w
  2355  0099  1103               	clrz
  2356  009A  1803               	skipnc
  2357  009B  3E01               	addlw	1
  2358  009C  1D03               	btfss	3,2
  2359  009D  07C6               	addwf	ADC_Sample@adsum+3,f	;volatile
  2360  009E  300A               	movlw	10
  2361  009F  0AC2               	incf	ADC_Sample@i,f
  2362  00A0  0242               	subwf	ADC_Sample@i,w
  2363  00A1  1C03               	skipc
  2364  00A2  2834               	goto	l2509
  2365                           
  2366                           ;main.c: 892: }
  2367                           ;main.c: 893: adsum -= admax;
  2368  00A3  0849               	movf	ADC_Sample@admax,w	;volatile
  2369  00A4  00BC               	movwf	??_ADC_Sample
  2370  00A5  084A               	movf	ADC_Sample@admax+1,w	;volatile
  2371  00A6  20E3               	fcall	PL2	;call to abstracted procedure
  2372  00A7  1C03               	skipc
  2373  00A8  0F3F               	incfsz	??_ADC_Sample+3,w
  2374  00A9  02C6               	subwf	ADC_Sample@adsum+3,f	;volatile
  2375                           
  2376                           ;main.c: 894: if (adsum >= admin)
  2377  00AA  0847               	movf	ADC_Sample@admin,w	;volatile
  2378  00AB  00BC               	movwf	??_ADC_Sample
  2379  00AC  0848               	movf	ADC_Sample@admin+1,w	;volatile
  2380  00AD  00BD               	movwf	??_ADC_Sample+1
  2381  00AE  01BE               	clrf	??_ADC_Sample+2
  2382  00AF  01BF               	clrf	??_ADC_Sample+3
  2383  00B0  083F               	movf	??_ADC_Sample+3,w
  2384  00B1  0246               	subwf	ADC_Sample@adsum+3,w	;volatile
  2385  00B2  1D03               	skipz
  2386  00B3  28BE               	goto	u2535
  2387  00B4  083E               	movf	??_ADC_Sample+2,w
  2388  00B5  0245               	subwf	ADC_Sample@adsum+2,w	;volatile
  2389  00B6  1D03               	skipz
  2390  00B7  28BE               	goto	u2535
  2391  00B8  083D               	movf	??_ADC_Sample+1,w
  2392  00B9  0244               	subwf	ADC_Sample@adsum+1,w	;volatile
  2393  00BA  1D03               	skipz
  2394  00BB  28BE               	goto	u2535
  2395  00BC  083C               	movf	??_ADC_Sample,w
  2396  00BD  0243               	subwf	ADC_Sample@adsum,w	;volatile
  2397  00BE                     u2535:	
  2398  00BE  1C03               	skipc
  2399  00BF  28C8               	goto	l794
  2400                           
  2401                           ;main.c: 895: adsum -= admin;
  2402  00C0  0847               	movf	ADC_Sample@admin,w	;volatile
  2403  00C1  00BC               	movwf	??_ADC_Sample
  2404  00C2  0848               	movf	ADC_Sample@admin+1,w	;volatile
  2405  00C3  20E3               	fcall	PL2	;call to abstracted procedure
  2406  00C4  1C03               	skipc
  2407  00C5  0F3F               	incfsz	??_ADC_Sample+3,w
  2408  00C6  02C6               	subwf	ADC_Sample@adsum+3,f	;volatile
  2409  00C7  28CC               	goto	l2543
  2410  00C8                     l794:	
  2411                           
  2412                           ;main.c: 896: else
  2413                           ;main.c: 897: adsum = 0;
  2414  00C8  01C3               	clrf	ADC_Sample@adsum	;volatile
  2415  00C9  01C4               	clrf	ADC_Sample@adsum+1	;volatile
  2416  00CA  01C5               	clrf	ADC_Sample@adsum+2	;volatile
  2417  00CB  01C6               	clrf	ADC_Sample@adsum+3	;volatile
  2418  00CC                     l2543:	
  2419                           
  2420                           ;main.c: 899: adresult = adsum >> 3;
  2421  00CC  0843               	movf	ADC_Sample@adsum,w	;volatile
  2422  00CD  00BC               	movwf	??_ADC_Sample
  2423  00CE  0844               	movf	ADC_Sample@adsum+1,w	;volatile
  2424  00CF  00BD               	movwf	??_ADC_Sample+1
  2425  00D0  0845               	movf	ADC_Sample@adsum+2,w	;volatile
  2426  00D1  00BE               	movwf	??_ADC_Sample+2
  2427  00D2  0846               	movf	ADC_Sample@adsum+3,w	;volatile
  2428  00D3  00BF               	movwf	??_ADC_Sample+3
  2429  00D4  3003               	movlw	3
  2430  00D5                     u2555:	
  2431  00D5  1003               	clrc
  2432  00D6  0CBF               	rrf	??_ADC_Sample+3,f
  2433  00D7  0CBE               	rrf	??_ADC_Sample+2,f
  2434  00D8  0CBD               	rrf	??_ADC_Sample+1,f
  2435  00D9  0CBC               	rrf	??_ADC_Sample,f
  2436  00DA  3EFF               	addlw	-1
  2437  00DB  1D03               	skipz
  2438  00DC  28D5               	goto	u2555
  2439  00DD  083D               	movf	??_ADC_Sample+1,w
  2440  00DE  00AB               	movwf	_adresult+1	;volatile
  2441  00DF  083C               	movf	??_ADC_Sample,w
  2442  00E0  00AA               	movwf	_adresult	;volatile
  2443                           
  2444                           ;main.c: 901: adsum = 0;
  2445                           
  2446                           ;main.c: 902: admin = 0;
  2447                           
  2448                           ;main.c: 903: admax = 0;
  2449  00E1  20F2               	fcall	PL4	;call to abstracted procedure
  2450                           
  2451                           ;main.c: 904: return 0xA5;
  2452  00E2  34A5               	retlw	165
  2453  00E3                     __end_of_ADC_Sample:	
  2454  00E3                     PL2:	
  2455  00E3  00BD               	movwf	??_ADC_Sample+1
  2456  00E4  01BE               	clrf	??_ADC_Sample+2
  2457  00E5  01BF               	clrf	??_ADC_Sample+3
  2458  00E6  083C               	movf	??_ADC_Sample,w
  2459  00E7  02C3               	subwf	ADC_Sample@adsum,f	;volatile
  2460  00E8  083D               	movf	??_ADC_Sample+1,w
  2461  00E9  1C03               	skipc
  2462  00EA  0F3D               	incfsz	??_ADC_Sample+1,w
  2463  00EB  02C4               	subwf	ADC_Sample@adsum+1,f	;volatile
  2464  00EC  083E               	movf	??_ADC_Sample+2,w
  2465  00ED  1C03               	skipc
  2466  00EE  0F3E               	incfsz	??_ADC_Sample+2,w
  2467  00EF  02C5               	subwf	ADC_Sample@adsum+2,f	;volatile
  2468  00F0  083F               	movf	??_ADC_Sample+3,w
  2469  00F1  0008               	return
  2470  00F2                     __end_ofPL2:	
  2471  00F2                     PL4:	
  2472  00F2  01C3               	clrf	ADC_Sample@adsum	;volatile
  2473  00F3  01C4               	clrf	ADC_Sample@adsum+1	;volatile
  2474  00F4  01C5               	clrf	ADC_Sample@adsum+2	;volatile
  2475  00F5  01C6               	clrf	ADC_Sample@adsum+3	;volatile
  2476  00F6  01C7               	clrf	ADC_Sample@admin	;volatile
  2477  00F7  01C8               	clrf	ADC_Sample@admin+1	;volatile
  2478  00F8  01C9               	clrf	ADC_Sample@admax	;volatile
  2479  00F9  01CA               	clrf	ADC_Sample@admax+1	;volatile
  2480  00FA  0008               	return
  2481  00FB                     __end_ofPL4:	
  2482  00FB                     PL8:	
  2483  00FB  084C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2484  00FC  00CA               	movwf	ADC_Sample@admax+1	;volatile
  2485  00FD  084B               	movf	ADC_Sample@ad_temp,w	;volatile
  2486  00FE  00C9               	movwf	ADC_Sample@admax	;volatile
  2487  00FF  0008               	return
  2488  0100                     __end_ofPL8:	
  2489                           
  2490                           	psect	text13
  2491  02DB                     __ptext13:	
  2492 ;; *************** function _Sleep_Mode *****************
  2493 ;; Defined at:
  2494 ;;		line 763 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;		None
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;		None
  2499 ;; Return value:  Size  Location     Type
  2500 ;;                  1    wreg      void 
  2501 ;; Registers used:
  2502 ;;		wreg, status,2, status,0, pclath, cstack
  2503 ;; Tracked objects:
  2504 ;;		On entry : 100/0
  2505 ;;		On exit  : 100/100
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMMON   BANK0   BANK1
  2508 ;;      Params:         0       0       0
  2509 ;;      Locals:         0       0       0
  2510 ;;      Temps:          0       0       0
  2511 ;;      Totals:         0       0       0
  2512 ;;Total ram usage:        0 bytes
  2513 ;; Hardware stack levels used:    1
  2514 ;; Hardware stack levels required when called:    3
  2515 ;; This function calls:
  2516 ;;		_AD_Init
  2517 ;;		_Init_System
  2518 ;; This function is called by:
  2519 ;;		_main
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           
  2524                           ;psect for function _Sleep_Mode
  2525  02DB                     _Sleep_Mode:	
  2526                           
  2527                           ;main.c: 765: INTCON = 0;
  2528                           
  2529                           ;incstack = 0
  2530                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  2531  02DB  018B               	clrf	11	;volatile
  2532                           
  2533                           ;main.c: 767: OPTION_REG = 0;
  2534  02DC  0181               	clrf	1	;volatile
  2535                           
  2536                           ;main.c: 769: WPUA = 0x00;
  2537  02DD  1683               	bsf	3,5	;RP0=1, select bank1
  2538  02DE  0188               	clrf	8	;volatile
  2539                           
  2540                           ;main.c: 770: TRISA = 0x01;
  2541  02DF  3001               	movlw	1
  2542                           
  2543                           ;main.c: 771: TRISB = 0x37;
  2544                           
  2545                           ;main.c: 773: PORTA = 0X00;
  2546                           
  2547                           ;main.c: 774: PORTB = 0X00;
  2548  02E0  2314               	fcall	PL6	;call to abstracted procedure
  2549                           
  2550                           ;main.c: 775: WPUB = 0x06;
  2551  02E1  3006               	movlw	6
  2552  02E2  0088               	movwf	8	;volatile
  2553                           
  2554                           ;main.c: 777: ADCON0 = 0;
  2555  02E3  1683               	bsf	3,5	;RP0=1, select bank1
  2556  02E4  0195               	clrf	21	;volatile
  2557                           
  2558                           ;main.c: 778: ADCON1 = 0;
  2559  02E5  0196               	clrf	22	;volatile
  2560                           
  2561                           ;main.c: 780: PWMCON0 = 0;
  2562  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  2563  02E7  0195               	clrf	21	;volatile
  2564                           
  2565                           ;main.c: 782: OSCCON = 0X70;
  2566  02E8  3070               	movlw	112
  2567  02E9  0094               	movwf	20	;volatile
  2568                           
  2569                           ;main.c: 784: IOCA = 0B00000000;
  2570  02EA  1683               	bsf	3,5	;RP0=1, select bank1
  2571  02EB  0189               	clrf	9	;volatile
  2572                           
  2573                           ;main.c: 785: IOCB = 0x07;
  2574  02EC  3007               	movlw	7
  2575  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  2576  02EE  0089               	movwf	9	;volatile
  2577                           
  2578                           ;main.c: 787: RAIE = 1;
  2579  02EF  158E               	bsf	14,3	;volatile
  2580                           
  2581                           ;main.c: 788: PEIE = 1;
  2582  02F0  170B               	bsf	11,6	;volatile
  2583                           
  2584                           ;main.c: 789: RBIE = 1;
  2585  02F1  158B               	bsf	11,3	;volatile
  2586                           
  2587                           ;main.c: 790: GIE = 0;
  2588  02F2  138B               	bcf	11,7	;volatile
  2589                           
  2590                           ;main.c: 792: PIE1 &= 0X08;
  2591  02F3  3008               	movlw	8
  2592  02F4  058E               	andwf	14,f	;volatile
  2593                           
  2594                           ;main.c: 793: PIR1 = 0;
  2595  02F5  018D               	clrf	13	;volatile
  2596                           
  2597                           ;main.c: 794: INTCON &= 0XC8;
  2598  02F6  30C8               	movlw	200
  2599  02F7  058B               	andwf	11,f	;volatile
  2600                           
  2601                           ;main.c: 796: PORTA;
  2602  02F8  1683               	bsf	3,5	;RP0=1, select bank1
  2603  02F9  0806               	movf	6,w	;volatile
  2604                           
  2605                           ;main.c: 797: RAIF = 0;
  2606  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  2607  02FB  118D               	bcf	13,3	;volatile
  2608                           
  2609                           ;main.c: 798: PORTB;
  2610  02FC  0806               	movf	6,w	;volatile
  2611                           
  2612                           ;main.c: 799: RBIF = 0;
  2613  02FD  100B               	bcf	11,0	;volatile
  2614  02FE  0064               	clrwdt	;# 
  2615  02FF  0063               	sleep	;# 
  2616  0300  0000               	nop	;# 
  2617  0301  0064               	clrwdt	;# 
  2618  0302  0000               	nop	;# 
  2619  0303  0000               	nop	;# 
  2620  0304  0000               	nop	;# 
  2621  0305  0000               	nop	;# 
  2622  0306  0000               	nop	;# 
  2623                           
  2624                           ;main.c: 811: if(RAIF) RAIF = 0;
  2625  0307  1283               	bcf	3,5	;RP0=0, select bank0
  2626  0308  198D               	btfsc	13,3	;volatile
  2627  0309  118D               	bcf	13,3	;volatile
  2628                           
  2629                           ;main.c: 812: if(RBIF) RBIF = 0;
  2630  030A  180B               	btfsc	11,0	;volatile
  2631  030B  100B               	bcf	11,0	;volatile
  2632                           
  2633                           ;main.c: 813: if(TMR2IF) TMR2IF = 0;
  2634  030C  188D               	btfsc	13,1	;volatile
  2635  030D  108D               	bcf	13,1	;volatile
  2636                           
  2637                           ;main.c: 814: IOCA = 0B00000000;
  2638  030E  1683               	bsf	3,5	;RP0=1, select bank1
  2639  030F  0189               	clrf	9	;volatile
  2640                           
  2641                           ;main.c: 815: IOCB = 0B00000000;
  2642  0310  1283               	bcf	3,5	;RP0=0, select bank0
  2643  0311  0189               	clrf	9	;volatile
  2644                           
  2645                           ;main.c: 816: Init_System();
  2646  0312  2446               	fcall	_Init_System
  2647                           
  2648                           ;main.c: 817: AD_Init();
  2649  0313  2CAE               	ljmp	l1861
  2650  0314                     __end_of_Sleep_Mode:	
  2651  0314                     PL6:	
  2652  0314  0085               	movwf	5	;volatile
  2653  0315  3037               	movlw	55
  2654  0316  1283               	bcf	3,5	;RP0=0, select bank0
  2655  0317  0085               	movwf	5	;volatile
  2656  0318  1683               	bsf	3,5	;RP0=1, select bank1
  2657  0319  0186               	clrf	6	;volatile
  2658  031A  1283               	bcf	3,5	;RP0=0, select bank0
  2659  031B  0186               	clrf	6	;volatile
  2660  031C  0008               	return
  2661  031D                     __end_ofPL6:	
  2662                           
  2663                           	psect	text14
  2664  0446                     __ptext14:	
  2665 ;; *************** function _Init_System *****************
  2666 ;; Defined at:
  2667 ;;		line 639 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;		None
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  1    wreg      void 
  2674 ;; Registers used:
  2675 ;;		wreg, status,2
  2676 ;; Tracked objects:
  2677 ;;		On entry : 100/0
  2678 ;;		On exit  : 100/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMMON   BANK0   BANK1
  2681 ;;      Params:         0       0       0
  2682 ;;      Locals:         0       0       0
  2683 ;;      Temps:          0       0       0
  2684 ;;      Totals:         0       0       0
  2685 ;;Total ram usage:        0 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:    2
  2688 ;; This function calls:
  2689 ;;		Nothing
  2690 ;; This function is called by:
  2691 ;;		_main
  2692 ;;		_Sleep_Mode
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           
  2697                           ;psect for function _Init_System
  2698  0446                     _Init_System:	
  2699                           
  2700                           ;incstack = 0
  2701                           ; Regs used in _Init_System: [wreg+status,2]
  2702  0446  0000               	nop	;# 
  2703  0447  0064               	clrwdt	;# 
  2704                           
  2705                           ;main.c: 643: OPTION_REG = 0;
  2706  0448  1283               	bcf	3,5	;RP0=0, select bank0
  2707  0449  0181               	clrf	1	;volatile
  2708  044A  0064               	clrwdt	;# 
  2709                           
  2710                           ;main.c: 645: OSCCON = 0X72;
  2711  044B  3072               	movlw	114
  2712  044C  1283               	bcf	3,5	;RP0=0, select bank0
  2713  044D  0094               	movwf	20	;volatile
  2714                           
  2715                           ;main.c: 647: WPUA = 0x00;
  2716  044E  1683               	bsf	3,5	;RP0=1, select bank1
  2717  044F  0188               	clrf	8	;volatile
  2718                           
  2719                           ;main.c: 648: WPDA = 0x00;
  2720  0450  0187               	clrf	7	;volatile
  2721                           
  2722                           ;main.c: 649: WPUB = 0x06;
  2723  0451  3006               	movlw	6
  2724  0452  1283               	bcf	3,5	;RP0=0, select bank0
  2725  0453  0088               	movwf	8	;volatile
  2726                           
  2727                           ;main.c: 651: TRISA = 0x01;
  2728  0454  3001               	movlw	1
  2729  0455  1683               	bsf	3,5	;RP0=1, select bank1
  2730                           
  2731                           ;main.c: 652: TRISB = 0x37;
  2732                           
  2733                           ;main.c: 654: PORTA = 0X00;
  2734                           
  2735                           ;main.c: 655: PORTB = 0X00;
  2736  0456  2314               	fcall	PL6	;call to abstracted procedure
  2737                           
  2738                           ;main.c: 659: PR2 = 249;
  2739  0457  30F9               	movlw	249
  2740  0458  0091               	movwf	17	;volatile
  2741                           
  2742                           ;main.c: 660: TMR2IF = 0;
  2743  0459  108D               	bcf	13,1	;volatile
  2744                           
  2745                           ;main.c: 661: TMR2IE = 1;
  2746  045A  148E               	bsf	14,1	;volatile
  2747                           
  2748                           ;main.c: 663: T2CON = 0B00000100;
  2749  045B  3004               	movlw	4
  2750  045C  0093               	movwf	19	;volatile
  2751                           
  2752                           ;main.c: 664: INTCON = 0XC0;
  2753  045D  30C0               	movlw	192
  2754  045E  008B               	movwf	11	;volatile
  2755  045F  0008               	return
  2756  0460                     __end_of_Init_System:	
  2757                           
  2758                           	psect	text15
  2759  04AE                     __ptext15:	
  2760 ;; *************** function _AD_Init *****************
  2761 ;; Defined at:
  2762 ;;		line 676 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;		None
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;		None
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		wreg, status,2
  2771 ;; Tracked objects:
  2772 ;;		On entry : 100/0
  2773 ;;		On exit  : 100/100
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMMON   BANK0   BANK1
  2776 ;;      Params:         0       0       0
  2777 ;;      Locals:         0       0       0
  2778 ;;      Temps:          0       0       0
  2779 ;;      Totals:         0       0       0
  2780 ;;Total ram usage:        0 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; Hardware stack levels required when called:    2
  2783 ;; This function calls:
  2784 ;;		Nothing
  2785 ;; This function is called by:
  2786 ;;		_main
  2787 ;;		_Sleep_Mode
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           
  2792                           ;psect for function _AD_Init
  2793  04AE                     _AD_Init:	
  2794  04AE                     l1861:	
  2795                           ;incstack = 0
  2796                           ; Regs used in _AD_Init: [wreg+status,2]
  2797                           
  2798                           
  2799                           ;main.c: 709: ADCON0 = 0X41;
  2800  04AE  3041               	movlw	65
  2801  04AF  1683               	bsf	3,5	;RP0=1, select bank1
  2802  04B0  0095               	movwf	21	;volatile
  2803                           
  2804                           ;main.c: 726: ADCON1 = 0;
  2805  04B1  0196               	clrf	22	;volatile
  2806                           
  2807                           ;main.c: 727: ANSEL0 = 0X00;
  2808  04B2  0193               	clrf	19	;volatile
  2809                           
  2810                           ;main.c: 728: ANSEL1 = 0x30;
  2811  04B3  3030               	movlw	48
  2812  04B4  0094               	movwf	20	;volatile
  2813  04B5  0008               	return
  2814  04B6                     __end_of_AD_Init:	
  2815                           
  2816                           	psect	text16
  2817  03F2                     __ptext16:	
  2818 ;; *************** function _Isr_Timer *****************
  2819 ;; Defined at:
  2820 ;;		line 93 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;		None
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;		None
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      void 
  2827 ;; Registers used:
  2828 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 100/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMMON   BANK0   BANK1
  2834 ;;      Params:         0       0       0
  2835 ;;      Locals:         0       0       0
  2836 ;;      Temps:          3       0       0
  2837 ;;      Totals:         3       0       0
  2838 ;;Total ram usage:        3 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    1
  2841 ;; This function calls:
  2842 ;;		_ledShow
  2843 ;; This function is called by:
  2844 ;;		Interrupt level 1
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           
  2849                           ;psect for function _Isr_Timer
  2850  03F2                     _Isr_Timer:	
  2851                           
  2852                           ;main.c: 95: if(TMR2IF)
  2853  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  2854  03F3  1C8D               	btfss	13,1	;volatile
  2855  03F4  2C06               	goto	i1l612
  2856                           
  2857                           ;main.c: 96: {
  2858                           ;main.c: 97: TMR2IF = 0;
  2859  03F5  108D               	bcf	13,1	;volatile
  2860                           
  2861                           ;main.c: 98: if(++intCount >= 160)
  2862  03F6  30A0               	movlw	160
  2863  03F7  0ABA               	incf	_intCount,f
  2864  03F8  023A               	subwf	_intCount,w
  2865  03F9  1C03               	skipc
  2866  03FA  2C03               	goto	i1l2409
  2867  03FB  3064               	movlw	100
  2868                           
  2869                           ;main.c: 99: {
  2870                           ;main.c: 100: intCount = 0;
  2871  03FC  01BA               	clrf	_intCount
  2872                           
  2873                           ;main.c: 101: IntFlag = 1;
  2874  03FD  01B9               	clrf	_IntFlag
  2875  03FE  0AB9               	incf	_IntFlag,f
  2876                           
  2877                           ;main.c: 102: if(++count1s >= 100)
  2878  03FF  0AFA               	incf	_count1s,f
  2879  0400  027A               	subwf	_count1s,w
  2880  0401  1803               	btfsc	3,0
  2881                           
  2882                           ;main.c: 103: {
  2883                           ;main.c: 104: count1s = 0;
  2884  0402  01FA               	clrf	_count1s
  2885  0403                     i1l2409:	
  2886                           
  2887                           ;main.c: 105: }
  2888                           ;main.c: 106: }
  2889                           ;main.c: 107: ledShow();
  2890  0403  224D               	fcall	_ledShow
  2891                           
  2892                           ;main.c: 108: intCount10++;
  2893  0404  1283               	bcf	3,5	;RP0=0, select bank0
  2894  0405  0AB7               	incf	_intCount10,f
  2895  0406                     i1l612:	
  2896  0406  0872               	movf	??_Isr_Timer+2,w
  2897  0407  008A               	movwf	10
  2898  0408  0871               	movf	??_Isr_Timer+1,w
  2899  0409  0084               	movwf	4
  2900  040A  0E70               	swapf	??_Isr_Timer^(0+-128),w
  2901  040B  0083               	movwf	3
  2902  040C  0EFE               	swapf	126,f
  2903  040D  0E7E               	swapf	126,w
  2904  040E  0009               	retfie
  2905  040F                     __end_of_Isr_Timer:	
  2906                           
  2907                           	psect	intentry
  2908  0004                     __pintentry:	
  2909                           ;incstack = 0
  2910                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2911                           
  2912  0004                     interrupt_function:	
  2913  007E                     saved_w	set	btemp
  2914  0004  00FE               	movwf	btemp
  2915  0005  0E03               	swapf	3,w
  2916  0006  00F0               	movwf	??_Isr_Timer
  2917  0007  0804               	movf	4,w
  2918  0008  00F1               	movwf	??_Isr_Timer+1
  2919  0009  080A               	movf	10,w
  2920  000A  00F2               	movwf	??_Isr_Timer+2
  2921  000B  2BF2               	ljmp	_Isr_Timer
  2922                           
  2923                           	psect	text17
  2924  024D                     __ptext17:	
  2925 ;; *************** function _ledShow *****************
  2926 ;; Defined at:
  2927 ;;		line 159 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;		None
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;		None
  2932 ;; Return value:  Size  Location     Type
  2933 ;;                  1    wreg      void 
  2934 ;; Registers used:
  2935 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2936 ;; Tracked objects:
  2937 ;;		On entry : 100/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMMON   BANK0   BANK1
  2941 ;;      Params:         0       0       0
  2942 ;;      Locals:         0       0       0
  2943 ;;      Temps:          0       0       0
  2944 ;;      Totals:         0       0       0
  2945 ;;Total ram usage:        0 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; This function calls:
  2948 ;;		Nothing
  2949 ;; This function is called by:
  2950 ;;		_Isr_Timer
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           
  2955                           ;psect for function _ledShow
  2956  024D                     _ledShow:	
  2957                           
  2958                           ;main.c: 161: if(++ledCntTime > 5)
  2959                           
  2960                           ;incstack = 0
  2961                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  2962  024D  3006               	movlw	6
  2963  024E  0AB1               	incf	_ledCntTime,f
  2964  024F  0231               	subwf	_ledCntTime,w
  2965  0250  1C03               	skipc
  2966  0251  0008               	return
  2967  0252  300E               	movlw	14
  2968                           
  2969                           ;main.c: 162: {
  2970                           ;main.c: 163: ledCntTime = 0;
  2971  0253  01B1               	clrf	_ledCntTime
  2972                           
  2973                           ;main.c: 164: if(++ledCnt > 13)
  2974  0254  0AB5               	incf	_ledCnt,f
  2975  0255  0235               	subwf	_ledCnt,w
  2976  0256  1803               	btfsc	3,0
  2977                           
  2978                           ;main.c: 165: {
  2979                           ;main.c: 166: ledCnt = 0;
  2980  0257  01B5               	clrf	_ledCnt
  2981                           
  2982                           ;main.c: 167: }
  2983                           ;main.c: 168: PORTA &= 0xC1;
  2984  0258  30C1               	movlw	193
  2985  0259  1683               	bsf	3,5	;RP0=1, select bank1
  2986  025A  0586               	andwf	6,f	;volatile
  2987                           
  2988                           ;main.c: 169: TRISA |= 0x3E;
  2989  025B  303E               	movlw	62
  2990  025C  0485               	iorwf	5,f	;volatile
  2991                           
  2992                           ;main.c: 170: switch(ledCnt)
  2993  025D  2ACE               	goto	i1l2105
  2994  025E                     i1l632:	
  2995                           ;main.c: 171: {
  2996                           ;main.c: 172: case 1:
  2997                           
  2998                           
  2999                           ;main.c: 173: if(shiweiNum & 0x01)
  3000  025E  1C4E               	btfss	_shiweiNum,0
  3001  025F  0008               	return
  3002                           
  3003                           ;main.c: 174: {
  3004                           ;main.c: 175: TRISA &= 0xFD;
  3005  0260  1683               	bsf	3,5	;RP0=1, select bank1
  3006  0261  1085               	bcf	5,1	;volatile
  3007                           
  3008                           ;main.c: 176: TRISA &= 0xDF;
  3009  0262  1285               	bcf	5,5	;volatile
  3010                           
  3011                           ;main.c: 177: RA1 = 1;
  3012  0263  1486               	bsf	6,1	;volatile
  3013                           
  3014                           ;main.c: 178: RA5 = 0;
  3015  0264  1286               	bcf	6,5	;volatile
  3016  0265  0008               	return
  3017  0266                     i1l635:	
  3018                           ;main.c: 181: case 2:
  3019                           
  3020                           
  3021                           ;main.c: 182: if(shiweiNum & 0x02)
  3022  0266  1CCE               	btfss	_shiweiNum,1
  3023  0267  0008               	return
  3024                           
  3025                           ;main.c: 183: {
  3026                           ;main.c: 184: TRISA &= 0xF7;
  3027  0268  1683               	bsf	3,5	;RP0=1, select bank1
  3028  0269  1185               	bcf	5,3	;volatile
  3029                           
  3030                           ;main.c: 185: TRISA &= 0xFD;
  3031  026A  1085               	bcf	5,1	;volatile
  3032                           
  3033                           ;main.c: 186: RA1 = 1;
  3034  026B  1486               	bsf	6,1	;volatile
  3035                           
  3036                           ;main.c: 187: RA3 = 0;
  3037  026C  1186               	bcf	6,3	;volatile
  3038  026D  0008               	return
  3039  026E                     i1l637:	
  3040                           ;main.c: 190: case 3:
  3041                           
  3042                           
  3043                           ;main.c: 191: if(shiweiNum & 0x04)
  3044  026E  1D4E               	btfss	_shiweiNum,2
  3045  026F  0008               	return
  3046                           
  3047                           ;main.c: 192: {
  3048                           ;main.c: 193: TRISA &= 0xF7;
  3049  0270  1683               	bsf	3,5	;RP0=1, select bank1
  3050  0271  1185               	bcf	5,3	;volatile
  3051                           
  3052                           ;main.c: 194: TRISA &= 0xEF;
  3053  0272  1205               	bcf	5,4	;volatile
  3054                           
  3055                           ;main.c: 195: RA4 = 1;
  3056  0273  1606               	bsf	6,4	;volatile
  3057                           
  3058                           ;main.c: 196: RA3 = 0;
  3059  0274  1186               	bcf	6,3	;volatile
  3060  0275  0008               	return
  3061  0276                     i1l639:	
  3062                           ;main.c: 199: case 4:
  3063                           
  3064                           
  3065                           ;main.c: 200: if(shiweiNum & 0x08)
  3066  0276  1DCE               	btfss	_shiweiNum,3
  3067  0277  0008               	return
  3068                           
  3069                           ;main.c: 201: {
  3070                           ;main.c: 202: TRISA &= 0xEF;
  3071  0278  1683               	bsf	3,5	;RP0=1, select bank1
  3072  0279  1205               	bcf	5,4	;volatile
  3073                           
  3074                           ;main.c: 203: TRISA &= 0xDF;
  3075  027A  1285               	bcf	5,5	;volatile
  3076                           
  3077                           ;main.c: 204: RA5 = 1;
  3078  027B  1686               	bsf	6,5	;volatile
  3079                           
  3080                           ;main.c: 205: RA4 = 0;
  3081  027C  1206               	bcf	6,4	;volatile
  3082  027D  0008               	return
  3083  027E                     i1l641:	
  3084                           ;main.c: 208: case 5:
  3085                           
  3086                           
  3087                           ;main.c: 209: if(shiweiNum & 0x10)
  3088  027E  1E4E               	btfss	_shiweiNum,4
  3089  027F  0008               	return
  3090                           
  3091                           ;main.c: 210: {
  3092                           ;main.c: 211: TRISA &= 0xDF;
  3093  0280  1683               	bsf	3,5	;RP0=1, select bank1
  3094  0281  1285               	bcf	5,5	;volatile
  3095                           
  3096                           ;main.c: 212: TRISA &= 0xF7;
  3097  0282  1185               	bcf	5,3	;volatile
  3098                           
  3099                           ;main.c: 213: RA3 = 1;
  3100  0283  1586               	bsf	6,3	;volatile
  3101                           
  3102                           ;main.c: 214: RA5 = 0;
  3103  0284  1286               	bcf	6,5	;volatile
  3104  0285  0008               	return
  3105  0286                     i1l643:	
  3106                           ;main.c: 217: case 6:
  3107                           
  3108                           
  3109                           ;main.c: 218: if(shiweiNum & 0x20)
  3110  0286  1ECE               	btfss	_shiweiNum,5
  3111  0287  0008               	return
  3112                           
  3113                           ;main.c: 219: {
  3114                           ;main.c: 220: TRISA &= 0xDF;
  3115  0288  1683               	bsf	3,5	;RP0=1, select bank1
  3116  0289  1285               	bcf	5,5	;volatile
  3117                           
  3118                           ;main.c: 221: TRISA &= 0xFD;
  3119  028A  1085               	bcf	5,1	;volatile
  3120                           
  3121                           ;main.c: 222: RA5 = 1;
  3122  028B  1686               	bsf	6,5	;volatile
  3123                           
  3124                           ;main.c: 223: RA1 = 0;
  3125  028C  1086               	bcf	6,1	;volatile
  3126  028D  0008               	return
  3127  028E                     i1l645:	
  3128                           ;main.c: 226: case 7:
  3129                           
  3130                           
  3131                           ;main.c: 227: if(shiweiNum & 0x40)
  3132  028E  1F4E               	btfss	_shiweiNum,6
  3133  028F  0008               	return
  3134                           
  3135                           ;main.c: 228: {
  3136                           ;main.c: 229: TRISA &= 0xDF;
  3137  0290  1683               	bsf	3,5	;RP0=1, select bank1
  3138  0291  1285               	bcf	5,5	;volatile
  3139                           
  3140                           ;main.c: 230: TRISA &= 0xF7;
  3141  0292  1185               	bcf	5,3	;volatile
  3142                           
  3143                           ;main.c: 231: RA5 = 1;
  3144  0293  1686               	bsf	6,5	;volatile
  3145                           
  3146                           ;main.c: 232: RA3 = 0;
  3147  0294  1186               	bcf	6,3	;volatile
  3148  0295  0008               	return
  3149  0296                     i1l647:	
  3150                           ;main.c: 235: case 8:
  3151                           
  3152                           
  3153                           ;main.c: 236: if(geweiNum & 0x01)
  3154  0296  1C4D               	btfss	_geweiNum,0
  3155  0297  0008               	return
  3156                           
  3157                           ;main.c: 237: {
  3158                           ;main.c: 238: TRISA &= 0xFB;
  3159  0298  1683               	bsf	3,5	;RP0=1, select bank1
  3160  0299  1105               	bcf	5,2	;volatile
  3161                           
  3162                           ;main.c: 239: TRISA &= 0xFD;
  3163  029A  1085               	bcf	5,1	;volatile
  3164                           
  3165                           ;main.c: 240: RA2 = 1;
  3166  029B  1506               	bsf	6,2	;volatile
  3167                           
  3168                           ;main.c: 241: RA1 = 0;
  3169  029C  1086               	bcf	6,1	;volatile
  3170  029D  0008               	return
  3171  029E                     i1l649:	
  3172                           ;main.c: 244: case 9:
  3173                           
  3174                           
  3175                           ;main.c: 245: if(geweiNum & 0x02)
  3176  029E  1CCD               	btfss	_geweiNum,1
  3177  029F  0008               	return
  3178                           
  3179                           ;main.c: 246: {
  3180                           ;main.c: 247: TRISA &= 0xFD;
  3181  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  3182  02A1  1085               	bcf	5,1	;volatile
  3183                           
  3184                           ;main.c: 248: TRISA &= 0xFB;
  3185  02A2  1105               	bcf	5,2	;volatile
  3186                           
  3187                           ;main.c: 249: RA1 = 1;
  3188  02A3  1486               	bsf	6,1	;volatile
  3189                           
  3190                           ;main.c: 250: RA2 = 0;
  3191  02A4  1106               	bcf	6,2	;volatile
  3192  02A5  0008               	return
  3193  02A6                     i1l651:	
  3194                           ;main.c: 253: case 10:
  3195                           
  3196                           
  3197                           ;main.c: 254: if(geweiNum & 0x04)
  3198  02A6  1D4D               	btfss	_geweiNum,2
  3199  02A7  0008               	return
  3200                           
  3201                           ;main.c: 255: {
  3202                           ;main.c: 256: TRISA &= 0xFB;
  3203  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  3204  02A9  1105               	bcf	5,2	;volatile
  3205                           
  3206                           ;main.c: 257: TRISA &= 0xF7;
  3207  02AA  1185               	bcf	5,3	;volatile
  3208                           
  3209                           ;main.c: 258: RA3 = 1;
  3210  02AB  1586               	bsf	6,3	;volatile
  3211                           
  3212                           ;main.c: 259: RA2 = 0;
  3213  02AC  1106               	bcf	6,2	;volatile
  3214  02AD  0008               	return
  3215  02AE                     i1l653:	
  3216                           ;main.c: 262: case 11:
  3217                           
  3218                           
  3219                           ;main.c: 263: if(geweiNum & 0x08)
  3220  02AE  1DCD               	btfss	_geweiNum,3
  3221  02AF  0008               	return
  3222                           
  3223                           ;main.c: 264: {
  3224                           ;main.c: 265: TRISA &= 0xDF;
  3225  02B0  1683               	bsf	3,5	;RP0=1, select bank1
  3226  02B1  1285               	bcf	5,5	;volatile
  3227                           
  3228                           ;main.c: 266: TRISA &= 0xEF;
  3229  02B2  1205               	bcf	5,4	;volatile
  3230                           
  3231                           ;main.c: 267: RA4 = 1;
  3232  02B3  1606               	bsf	6,4	;volatile
  3233                           
  3234                           ;main.c: 268: RA5 = 0;
  3235  02B4  1286               	bcf	6,5	;volatile
  3236  02B5  0008               	return
  3237  02B6                     i1l655:	
  3238                           ;main.c: 271: case 12:
  3239                           
  3240                           
  3241                           ;main.c: 272: if(geweiNum & 0x10)
  3242  02B6  1E4D               	btfss	_geweiNum,4
  3243  02B7  0008               	return
  3244                           
  3245                           ;main.c: 273: {
  3246                           ;main.c: 274: TRISA &= 0xF7;
  3247  02B8  1683               	bsf	3,5	;RP0=1, select bank1
  3248  02B9  1185               	bcf	5,3	;volatile
  3249                           
  3250                           ;main.c: 275: TRISA &= 0xEF;
  3251  02BA  1205               	bcf	5,4	;volatile
  3252                           
  3253                           ;main.c: 276: RA3 = 1;
  3254  02BB  1586               	bsf	6,3	;volatile
  3255                           
  3256                           ;main.c: 277: RA4 = 0;
  3257  02BC  1206               	bcf	6,4	;volatile
  3258  02BD  0008               	return
  3259  02BE                     i1l657:	
  3260                           ;main.c: 280: case 13:
  3261                           
  3262                           
  3263                           ;main.c: 281: if(geweiNum & 0x20)
  3264  02BE  1ECD               	btfss	_geweiNum,5
  3265  02BF  0008               	return
  3266                           
  3267                           ;main.c: 282: {
  3268                           ;main.c: 283: TRISA &= 0xF7;
  3269  02C0  1683               	bsf	3,5	;RP0=1, select bank1
  3270  02C1  1185               	bcf	5,3	;volatile
  3271                           
  3272                           ;main.c: 284: TRISA &= 0xFD;
  3273  02C2  1085               	bcf	5,1	;volatile
  3274                           
  3275                           ;main.c: 285: RA3 = 1;
  3276  02C3  1586               	bsf	6,3	;volatile
  3277                           
  3278                           ;main.c: 286: RA1 = 0;
  3279  02C4  1086               	bcf	6,1	;volatile
  3280  02C5  0008               	return
  3281  02C6                     i1l659:	
  3282                           ;main.c: 289: case 0:
  3283                           
  3284                           
  3285                           ;main.c: 290: if(geweiNum & 0x40)
  3286  02C6  1F4D               	btfss	_geweiNum,6
  3287  02C7  0008               	return
  3288                           
  3289                           ;main.c: 291: {
  3290                           ;main.c: 292: TRISA &= 0xFB;
  3291  02C8  1683               	bsf	3,5	;RP0=1, select bank1
  3292  02C9  1105               	bcf	5,2	;volatile
  3293                           
  3294                           ;main.c: 293: TRISA &= 0xF7;
  3295  02CA  1185               	bcf	5,3	;volatile
  3296                           
  3297                           ;main.c: 294: RA2 = 1;
  3298  02CB  1506               	bsf	6,2	;volatile
  3299                           
  3300                           ;main.c: 295: RA3 = 0;
  3301  02CC  1186               	bcf	6,3	;volatile
  3302  02CD  0008               	return
  3303  02CE                     i1l2105:	
  3304  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  3305  02CF  0835               	movf	_ledCnt,w
  3306                           
  3307                           ; Switch size 1, requested type "space"
  3308                           ; Number of cases is 14, Range of values is 0 to 13
  3309                           ; switch strategies available:
  3310                           ; Name         Instructions Cycles
  3311                           ; direct_byte           20     6 (fixed)
  3312                           ; simple_byte           43    22 (average)
  3313                           ; jumptable            260     6 (fixed)
  3314                           ;	Chosen strategy is direct_byte
  3315  02D0  0084               	movwf	4
  3316  02D1  300E               	movlw	14
  3317  02D2  0204               	subwf	4,w
  3318  02D3  1803               	skipnc
  3319  02D4  0008               	return
  3320  02D5  3004               	movlw	high i1S2847
  3321  02D6  008A               	movwf	10
  3322  02D7  3098               	movlw	low i1S2847
  3323  02D8  0704               	addwf	4,w
  3324  02D9  0082               	movwf	2
  3325  02DA  0008               	return
  3326  02DB                     __end_of_ledShow:	
  3327  007E                     btemp	set	126	;btemp
  3328  007E                     wtemp0	set	126
  3329                           
  3330                           	psect	swtext1
  3331  0498                     __pswtext1:	
  3332  0498                     i1S2847:	
  3333  0498  2AC6               	ljmp	i1l659
  3334  0499  2A5E               	ljmp	i1l632
  3335  049A  2A66               	ljmp	i1l635
  3336  049B  2A6E               	ljmp	i1l637
  3337  049C  2A76               	ljmp	i1l639
  3338  049D  2A7E               	ljmp	i1l641
  3339  049E  2A86               	ljmp	i1l643
  3340  049F  2A8E               	ljmp	i1l645
  3341  04A0  2A96               	ljmp	i1l647
  3342  04A1  2A9E               	ljmp	i1l649
  3343  04A2  2AA6               	ljmp	i1l651
  3344  04A3  2AAE               	ljmp	i1l653
  3345  04A4  2AB6               	ljmp	i1l655
  3346  04A5  2ABE               	ljmp	i1l657


Data Sizes:
    Strings     0
    Constant    12
    Data        0
    BSS         32
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     17      48
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->___lbdiv
    _setBatStep->___lwdiv
    _keyCtr->_keyRead
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___lbmod
    _setBatStep->___lwdiv
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1927
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                            _chrgCtr
                             _keyCtr
                         _setBatStep
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0     512
                            ___lbdiv
                            ___lbmod
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     297
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     215
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _setBatStep                                           0     0      0     501
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           5     5      0     847
                                              4 COMMON     1     1      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     847
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _chrgCtr
   _keyCtr
     _keyRead
   _setBatStep
     ___lwdiv
   _workCtr
     ___lbdiv
     ___lbmod
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     11      30       4       60.0%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      3B       7        0.0%
DATA                 0      0      3B       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 21 15:36:30 2025

                      pc 0002                       PL2 00E3                       PL4 00F2  
                     PL6 0314                       PL8 00FB                       fsr 0004  
                    l617 0327                      l734 01E0                      l735 01DC  
                    l737 01DE                      l790 0084                      l694 03CE  
                    l784 0049                      l794 00C8                      _GIE 005F  
                    _RA1 0431                      _RA2 0432                      _RA3 0433  
                    _RA4 0434                      _RA5 0435                      _RB3 0033  
                    _PR2 0011      __size_of_ADC_Sample 00CB                      fsr0 0004  
                    indf 0000          __end_of_AD_Init 04B6                     l2001 0431  
                   l1061 0437                     l2015 0444                     l2121 038C  
                   l2127 0396                     l2231 03C1                     l2137 03A9  
                   l2227 03BC                     l2235 03C5                     l2503 0033  
                   l2531 0078                     l2533 0080                     l2509 0034  
                   l2605 046E                     l2543 00CC                     l2527 006E  
                   l2519 0054                     l2703 012E                     l2633 01F8  
                   l2713 0142                     l2651 022C                     l2619 01C9  
                   l2707 0137                     l1861 04AE                     l2493 0029  
                   l2653 021A                     l2661 0230                     l2629 01E3  
                   l2725 0155                     l2733 015D                     l2805 033B  
                   l2495 002B                     l2583 0365                     l2663 0233  
                   l2639 020D                     l2567 0427                     l2559 0413  
                   l2751 017B                     l2743 0170                     l2719 0148  
                   l2729 0159                     l2825 0355                     l2595 037C  
                   l2771 019E                     l2763 01A2                     l2755 0189  
                   l2739 016C                     l2747 0174                     l2691 0121  
                   l1893 03EC                     l2765 01A4                     l2685 0113  
                   l2775 01B2                     l2767 01AD                     _CHS4 04B6  
                   _IOCA 0089                     _IOCB 0009                     u3207 0025  
                   u2535 00BE                     u2615 036E                     _PIE1 000E  
                   u2555 00D5                     u2485 0074                     u3197 0473  
                   u2495 007E                     _PEIE 005E                     _RAIE 0073  
                   _RAIF 006B                     _RBIE 005B                     _RBIF 0058  
                   _PIR1 000D                     _WPDA 0087                     _WPUA 0088  
                   _WPUB 0008                     _main 031D                     btemp 007E  
                   start 000C            ??_Init_System 0073                    ?_main 0070  
        __end_of___lbdiv 0446          __end_of___lbmod 042B                    _T2CON 0013  
        __end_of___lwdiv 0381                    i1l612 0406                    i1l632 025E  
                  i1l641 027E                    i1l651 02A6                    i1l643 0286  
                  i1l635 0266                    i1l653 02AE                    i1l645 028E  
                  i1l637 026E                    i1l655 02B6                    i1l647 0296  
                  i1l639 0276                    i1l657 02BE                    i1l649 029E  
                  i1l659 02C6                    _PORTA 0086                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0005                    _PWMTH 0018  
                  _PWMTL 0017          __end_of_chrgCtr 03AB          __end_of_ledShow 02DB  
        __end_of_keyRead 03F2                    pclath 000A          __end_of_pwmInit 0498  
        __end_of_pwmStop 04BA                    status 0003                    wtemp0 007E  
        __end_of_workCtr 01B8          ___lbdiv@divisor 0073          ___lbdiv@counter 0075  
        __initialization 000D             __end_of_main 0357                   ??_main 0077  
              ??_AD_Init 0073      __end_of_Init_System 0460                   _ADCON0 0095  
                 _ADCON1 0096                   i1S2847 0498                   _ADRESH 0099  
                 _ADRESL 0098                   _ANSEL0 0093                   _ANSEL1 0094  
                 _GODONE 04A9                   i1l2105 02CE                   i1l2409 0403  
                 _LDO_EN 04B2                   _INTCON 000B                   _OSCCON 0014  
                 _TMR2IE 0071                   _TMR2IF 0069                   _PWMD2L 009B  
           ??_ADC_Sample 003C             keyCtr@kclick 0074       __size_of_Isr_Timer 001D  
             _Sleep_Mode 02DB                ??___lbdiv 0074                ??___lbmod 0074  
                 _ledCnt 0035                ??___lwdiv 0077                   _keyCtr 03AB  
              ??_chrgCtr 0073                   _result 0028                ??_ledShow 0070  
       __end_of_numArray 0488                ??_keyRead 0073       __end_of_ADC_Sample 00E3  
                 saved_w 007E                ??_pwmInit 0073                ??_pwmStop 0073  
              ??_workCtr 0077         ___lbdiv@dividend 0074          ___lbmod@divisor 0073  
__end_of__initialization 0016          ___lbmod@counter 003D           __pcstackCOMMON 0070  
            _Init_System 0446               __end_ofPL2 00F2               __end_ofPL4 00FB  
             __end_ofPL6 031D               __end_ofPL8 0100         ___lbdiv@quotient 0076  
      __end_of_Isr_Timer 040F               _checkBatAD 0460               __pbssBANK0 0020  
           _chrgFullFlag 0038             _chrgFullTime 0036              ?_Sleep_Mode 0070  
             __pmaintext 031D               __pintentry 0004                  ?_keyCtr 0070  
             _ledCntTime 0031                  _AD_Init 04AE               _curBatStep 002D  
                _PWM23DT 009D                  _PWMD23H 009E                  _PWMCON0 0015  
                _PWMCON1 0016                  _PWMCON2 001D               __stringtab 0476  
                _IntFlag 0039               _intCount10 0037          ADC_Sample@adldo 0073  
        ADC_Sample@admax 0049          ADC_Sample@admin 0047          ADC_Sample@adsum 0043  
                ___lbdiv 042B                  ___lbmod 040F                  ___lwdiv 0357  
        __size_of_keyCtr 0029                  _chrgCtr 0381               _lowBatFlag 0030  
                __ptext1 0100                  __ptext2 04B6                  __ptext3 0488  
                __ptext4 040F                  __ptext5 042B                  __ptext6 01B8  
                __ptext7 0357                  __ptext8 03AB                  __ptext9 03D4  
                _ledShow 024D               _lowBatTime 002C                  _count1s 007A  
                _keyRead 03D4               _setBatStep 01B8      __size_of_Sleep_Mode 0039  
                _pwmInit 0488              ?_checkBatAD 0070                  _pwmStop 04B6  
                clrloop0 04A7                  _workCtr 0100     end_of_initialization 0016  
          _longPressFlag 0033         ___lbmod@dividend 003C              ___lbmod@rem 003E  
    __size_of_checkBatAD 0016             ?_Init_System 0070           __end_of_keyCtr 03D4  
    start_initialization 000D              ?_setBatStep 0070                _Isr_Timer 03F2  
           ??_Sleep_Mode 0073        ADC_Sample@ad_temp 004B                 ??_keyCtr 0074  
               ?_AD_Init 0070              __pbssCOMMON 0077                ___latbits 0000  
          __pcstackBANK0 003C       __end_of_Sleep_Mode 0314               ?_Isr_Timer 0070  
              __pnvBANK0 004D         ___lwdiv@dividend 0075      __size_of_setBatStep 0095  
               ?___lbdiv 0073                 ?___lbmod 0073                 ?___lwdiv 0073  
               ?_chrgCtr 0070                __pstrings 0476                __pswtext1 0498  
              _count900s 0022                 ?_ledShow 0070                 ?_keyRead 0070  
              _firstTime 004F           ADC_Sample@adch 0041                 ?_pwmInit 0070  
           ??_checkBatAD 0074                 ?_pwmStop 0070         ___lwdiv@quotient 003D  
               ?_workCtr 0070              ADC_Sample@i 0042              ADC_Sample@j 0040  
      interrupt_function 0004                clear_ram0 04A6                _sleepTime 002F  
              _shiweiNum 004E       __end_of_checkBatAD 0476              __stringbase 047B  
   __size_of_Init_System 001A         __size_of_AD_Init 0008         keyRead@keyStatus 0073  
            ??_Isr_Timer 0070               _ADC_Sample 0018         __size_of___lbdiv 001B  
       __size_of___lbmod 001C         __size_of___lwdiv 002A       __end_of__stringtab 047C  
       __size_of_chrgCtr 002A         __size_of_ledShow 008E         __size_of_keyRead 001E  
               _adresult 002A             ??_setBatStep 0077                 _chrgFlag 0079  
        ___lwdiv@divisor 0073          ___lwdiv@counter 003C                 __ptext10 0381  
               __ptext11 0460                 __ptext12 0018                 __ptext13 02DB  
               __ptext14 0446                 __ptext15 04AE                 __ptext16 03F2  
               __ptext17 024D         __size_of_pwmInit 0010         __size_of_pwmStop 0004  
               _geweiNum 004D                 _count30s 0020         __size_of_workCtr 00B8  
               _keyCount 0034                 _intCount 003A            __size_of_main 003A  
               _numArray 047C                 _test_adc 003B       __end_of_setBatStep 024D  
               _power_ad 0026              _lowShanTime 0024                 _workStep 0078  
           _motorPwmFlag 002E                 intlevel1 0000              ?_ADC_Sample 0073  
              stringcode 0476              _showBatTime 0032              _showBatStep 0077  
             _OPTION_REG 0001                 stringdir 0476                 stringtab 0476  
