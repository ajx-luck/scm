

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jul 03 14:12:48 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	swtext1,local,class=CONST,delta=2
    32                           	psect	pa_nodes0,global,class=CODE,delta=2
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 1.45
    36                           ; Generated 16/11/2017 GMT
    37                           ; 
    38                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F887 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	strings
    71  04A4                     __pstrings:	
    72  04A4                     stringtab:	
    73  04A4                     __stringtab:	
    74  04A4                     stringcode:	
    75                           ;	String table - string pointers are 1 byte each
    76                           
    77  04A4                     stringdir:	
    78  04A4  3004               	movlw	high stringdir
    79  04A5  008A               	movwf	10
    80  04A6  0804               	movf	4,w
    81  04A7  0A84               	incf	4,f
    82  04A8  0782               	addwf	2,f
    83  04A9                     __stringbase:	
    84  04A9  3400               	retlw	0
    85  04AA                     __end_of__stringtab:	
    86  04AA                     _numArray:	
    87  04AA  343F               	retlw	63
    88  04AB  3406               	retlw	6
    89  04AC  345B               	retlw	91
    90  04AD  344F               	retlw	79
    91  04AE  3466               	retlw	102
    92  04AF  346D               	retlw	109
    93  04B0  347D               	retlw	125
    94  04B1  3407               	retlw	7
    95  04B2  347F               	retlw	127
    96  04B3  346F               	retlw	111
    97  04B4  3473               	retlw	115
    98  04B5  3476               	retlw	118
    99  04B6                     __end_of_numArray:	
   100                           
   101                           	psect	nvBANK0
   102  004F                     __pnvBANK0:	
   103  004F                     _startLockFlag:	
   104  004F                     	ds	1
   105  0050                     _geweiNum:	
   106  0050                     	ds	1
   107  0051                     _shiweiNum:	
   108  0051                     	ds	1
   109  0052                     _firstTime:	
   110  0052                     	ds	1
   111  001D                     _PWMCON2	set	29
   112  0018                     _PWMTH	set	24
   113  0017                     _PWMTL	set	23
   114  0016                     _PWMCON1	set	22
   115  0015                     _PWMCON0	set	21
   116  0014                     _OSCCON	set	20
   117  0013                     _T2CON	set	19
   118  0011                     _PR2	set	17
   119  000E                     _PIE1	set	14
   120  000D                     _PIR1	set	13
   121  000B                     _INTCON	set	11
   122  0009                     _IOCB	set	9
   123  0008                     _WPUB	set	8
   124  0006                     _PORTB	set	6
   125  0005                     _TRISB	set	5
   126  0001                     _OPTION_REG	set	1
   127  0071                     _TMR2IE	set	113
   128  0073                     _RAIE	set	115
   129  0069                     _TMR2IF	set	105
   130  006B                     _RAIF	set	107
   131  0058                     _RBIF	set	88
   132  005B                     _RBIE	set	91
   133  005E                     _PEIE	set	94
   134  005F                     _GIE	set	95
   135  0033                     _RB3	set	51
   136  009E                     _PWMD23H	set	158
   137  009D                     _PWM23DT	set	157
   138  009B                     _PWMD2L	set	155
   139  0099                     _ADRESH	set	153
   140  0098                     _ADRESL	set	152
   141  0096                     _ADCON1	set	150
   142  0095                     _ADCON0	set	149
   143  0094                     _ANSEL1	set	148
   144  0093                     _ANSEL0	set	147
   145  0089                     _IOCA	set	137
   146  0088                     _WPUA	set	136
   147  0087                     _WPDA	set	135
   148  0086                     _PORTA	set	134
   149  0085                     _TRISA	set	133
   150  04B2                     _LDO_EN	set	1202
   151  04B6                     _CHS4	set	1206
   152  04A9                     _GODONE	set	1193
   153  0431                     _RA1	set	1073
   154  0432                     _RA2	set	1074
   155  0433                     _RA3	set	1075
   156  0434                     _RA4	set	1076
   157  0435                     _RA5	set	1077
   158                           
   159                           	psect	cinit
   160  000D                     start_initialization:	
   161                           ; #config settings
   162                           
   163  000D                     __initialization:	
   164                           
   165                           ; Clear objects allocated to COMMON
   166  000D  3077               	movlw	low __pbssCOMMON
   167  000E  0084               	movwf	4
   168  000F  307B               	movlw	low (__pbssCOMMON+4)
   169  0010  24D4               	fcall	clear_ram0
   170  0011  3020               	movlw	low __pbssBANK0
   171                           
   172                           ; Clear objects allocated to BANK0
   173  0012  1383               	bcf	3,7	;select IRP bank0
   174  0013  0084               	movwf	4
   175  0014  303E               	movlw	low (__pbssBANK0+30)
   176  0015  24D4               	fcall	clear_ram0
   177  0016                     end_of_initialization:	
   178                           ;End of C runtime variable initialization code
   179                           
   180  0016                     __end_of__initialization:	
   181  0016  0183               	clrf	3
   182  0017  2B51               	ljmp	_main	;jump to C main() function
   183                           
   184                           	psect	bssCOMMON
   185  0077                     __pbssCOMMON:	
   186  0077                     _power_ad:	
   187  0077                     	ds	2
   188  0079                     _showBatStep:	
   189  0079                     	ds	1
   190  007A                     _chrgFlag:	
   191  007A                     	ds	1
   192                           
   193                           	psect	bssBANK0
   194  0020                     __pbssBANK0:	
   195  0020                     _out_ad:	
   196  0020                     	ds	2
   197  0022                     _count30s:	
   198  0022                     	ds	2
   199  0024                     _lowShanTime:	
   200  0024                     	ds	2
   201  0026                     _result:	
   202  0026                     	ds	2
   203  0028                     _adresult:	
   204  0028                     	ds	2
   205  002A                     _maxDuty:	
   206  002A                     	ds	1
   207  002B                     _curDuty:	
   208  002B                     	ds	1
   209  002C                     _overTime:	
   210  002C                     	ds	1
   211  002D                     _lockTime:	
   212  002D                     	ds	1
   213  002E                     _lowBatTime:	
   214  002E                     	ds	1
   215  002F                     _curBatStep:	
   216  002F                     	ds	1
   217  0030                     _motorPwmFlag:	
   218  0030                     	ds	1
   219  0031                     _sleepTime:	
   220  0031                     	ds	1
   221  0032                     _lowBatFlag:	
   222  0032                     	ds	1
   223  0033                     _ledCntTime:	
   224  0033                     	ds	1
   225  0034                     _showBatTime:	
   226  0034                     	ds	1
   227  0035                     _ledCnt:	
   228  0035                     	ds	1
   229  0036                     _workStep:	
   230  0036                     	ds	1
   231  0037                     _chrgFullTime:	
   232  0037                     	ds	1
   233  0038                     _intCount10:	
   234  0038                     	ds	1
   235  0039                     _chrgFullFlag:	
   236  0039                     	ds	1
   237  003A                     _IntFlag:	
   238  003A                     	ds	1
   239  003B                     _count1s:	
   240  003B                     	ds	1
   241  003C                     _intCount:	
   242  003C                     	ds	1
   243  003D                     _test_adc:	
   244  003D                     	ds	1
   245                           
   246                           	psect	clrtext
   247  04D4                     clear_ram0:	
   248                           ;	Called with FSR containing the base address, and
   249                           ;	W with the last address+1
   250                           
   251  04D4  0064               	clrwdt	;clear the watchdog before getting into this loop
   252  04D5                     clrloop0:	
   253  04D5  0180               	clrf	0	;clear RAM location pointed to by FSR
   254  04D6  0A84               	incf	4,f	;increment pointer
   255  04D7  0604               	xorwf	4,w	;XOR with final address
   256  04D8  1903               	btfsc	3,2	;have we reached the end yet?
   257  04D9  3400               	retlw	0	;all done for this memory range, return
   258  04DA  0604               	xorwf	4,w	;XOR again to restore value
   259  04DB  2CD5               	goto	clrloop0	;do the next byte
   260                           
   261                           	psect	cstackCOMMON
   262  0070                     __pcstackCOMMON:	
   263  0070                     ?_ledShow:	
   264  0070                     ??_ledShow:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_Init_System:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ?_AD_Init:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_chrgCtr:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?_checkBatAD:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ?_setBatStep:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?_keyCtr:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ?_workCtr:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_checkOutAD:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_Sleep_Mode:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_pwmStop:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_pwmInit:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_Isr_Timer:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ??_Isr_Timer:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_main:	
   307                           ; 1 bytes @ 0x0
   308                           
   309                           
   310                           ; 1 bytes @ 0x0
   311  0070                     	ds	3
   312  0073                     ??_Init_System:	
   313  0073                     ??_AD_Init:	
   314                           ; 1 bytes @ 0x3
   315                           
   316  0073                     ??_chrgCtr:	
   317                           ; 1 bytes @ 0x3
   318                           
   319  0073                     ??_keyCtr:	
   320                           ; 1 bytes @ 0x3
   321                           
   322  0073                     ??_Sleep_Mode:	
   323                           ; 1 bytes @ 0x3
   324                           
   325  0073                     ??_pwmStop:	
   326                           ; 1 bytes @ 0x3
   327                           
   328  0073                     ??_pwmInit:	
   329                           ; 1 bytes @ 0x3
   330                           
   331  0073                     ?_ADC_Sample:	
   332                           ; 1 bytes @ 0x3
   333                           
   334  0073                     ?___lbdiv:	
   335                           ; 1 bytes @ 0x3
   336                           
   337  0073                     ?___lbmod:	
   338                           ; 1 bytes @ 0x3
   339                           
   340  0073                     ?___lwdiv:	
   341                           ; 1 bytes @ 0x3
   342                           
   343  0073                     ADC_Sample@adldo:	
   344                           ; 2 bytes @ 0x3
   345                           
   346  0073                     ___lbdiv@divisor:	
   347                           ; 1 bytes @ 0x3
   348                           
   349  0073                     ___lbmod@divisor:	
   350                           ; 1 bytes @ 0x3
   351                           
   352  0073                     ___lwdiv@divisor:	
   353                           ; 1 bytes @ 0x3
   354                           
   355                           
   356                           ; 2 bytes @ 0x3
   357  0073                     	ds	1
   358  0074                     ??_checkBatAD:	
   359  0074                     ??_checkOutAD:	
   360                           ; 1 bytes @ 0x4
   361                           
   362  0074                     ??___lbdiv:	
   363                           ; 1 bytes @ 0x4
   364                           
   365  0074                     ??___lbmod:	
   366                           ; 1 bytes @ 0x4
   367                           
   368  0074                     ___lbdiv@dividend:	
   369                           ; 1 bytes @ 0x4
   370                           
   371                           
   372                           ; 1 bytes @ 0x4
   373  0074                     	ds	1
   374  0075                     ___lbdiv@counter:	
   375  0075                     ___lwdiv@dividend:	
   376                           ; 1 bytes @ 0x5
   377                           
   378                           
   379                           ; 2 bytes @ 0x5
   380  0075                     	ds	1
   381  0076                     ___lbdiv@quotient:	
   382                           
   383                           ; 1 bytes @ 0x6
   384  0076                     	ds	1
   385  0077                     ??_workCtr:	
   386  0077                     ??_main:	
   387                           ; 1 bytes @ 0x7
   388                           
   389  0077                     ??___lwdiv:	
   390                           ; 1 bytes @ 0x7
   391                           
   392                           
   393                           	psect	cstackBANK0
   394  003E                     __pcstackBANK0:	
   395                           ; 1 bytes @ 0x7
   396                           
   397  003E                     ??_ADC_Sample:	
   398  003E                     ___lbmod@dividend:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  003E                     ___lwdiv@counter:	
   402                           ; 1 bytes @ 0x0
   403                           
   404                           
   405                           ; 1 bytes @ 0x0
   406  003E                     	ds	1
   407  003F                     ___lbmod@counter:	
   408  003F                     ___lwdiv@quotient:	
   409                           ; 1 bytes @ 0x1
   410                           
   411                           
   412                           ; 2 bytes @ 0x1
   413  003F                     	ds	1
   414  0040                     ___lbmod@rem:	
   415                           
   416                           ; 1 bytes @ 0x2
   417  0040                     	ds	1
   418  0041                     ??_setBatStep:	
   419                           
   420                           ; 1 bytes @ 0x3
   421  0041                     	ds	1
   422  0042                     ADC_Sample@j:	
   423                           
   424                           ; 1 bytes @ 0x4
   425  0042                     	ds	1
   426  0043                     ADC_Sample@adch:	
   427                           
   428                           ; 1 bytes @ 0x5
   429  0043                     	ds	1
   430  0044                     ADC_Sample@i:	
   431                           
   432                           ; 1 bytes @ 0x6
   433  0044                     	ds	1
   434  0045                     ADC_Sample@adsum:	
   435                           
   436                           ; 4 bytes @ 0x7
   437  0045                     	ds	4
   438  0049                     ADC_Sample@admin:	
   439                           
   440                           ; 2 bytes @ 0xB
   441  0049                     	ds	2
   442  004B                     ADC_Sample@admax:	
   443                           
   444                           ; 2 bytes @ 0xD
   445  004B                     	ds	2
   446  004D                     ADC_Sample@ad_temp:	
   447                           
   448                           ; 2 bytes @ 0xF
   449  004D                     	ds	2
   450                           
   451                           	psect	maintext
   452  0351                     __pmaintext:	
   453 ;;
   454 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   455 ;;
   456 ;; *************** function _main *****************
   457 ;; Defined at:
   458 ;;		line 124 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
   459 ;; Parameters:    Size  Location     Type
   460 ;;		None
   461 ;; Auto vars:     Size  Location     Type
   462 ;;		None
   463 ;; Return value:  Size  Location     Type
   464 ;;                  1    wreg      void 
   465 ;; Registers used:
   466 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   467 ;; Tracked objects:
   468 ;;		On entry : B00/0
   469 ;;		On exit  : 100/0
   470 ;;		Unchanged: 0/0
   471 ;; Data sizes:     COMMON   BANK0   BANK1
   472 ;;      Params:         0       0       0
   473 ;;      Locals:         0       0       0
   474 ;;      Temps:          0       0       0
   475 ;;      Totals:         0       0       0
   476 ;;Total ram usage:        0 bytes
   477 ;; Hardware stack levels required when called:    4
   478 ;; This function calls:
   479 ;;		_AD_Init
   480 ;;		_Init_System
   481 ;;		_Sleep_Mode
   482 ;;		_checkBatAD
   483 ;;		_checkOutAD
   484 ;;		_chrgCtr
   485 ;;		_keyCtr
   486 ;;		_setBatStep
   487 ;;		_workCtr
   488 ;; This function is called by:
   489 ;;		Startup code after reset
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493                           
   494                           ;psect for function _main
   495  0351                     _main:	
   496                           
   497                           ;main.c: 126: Init_System();
   498                           
   499                           ;incstack = 0
   500                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   501  0351  245E               	fcall	_Init_System
   502                           
   503                           ;main.c: 127: AD_Init();
   504  0352  24DC               	fcall	_AD_Init
   505                           
   506                           ;main.c: 129: baiweiNum = 1;
   507  0353  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   508  0354  0084               	movwf	4
   509  0355  24A4               	fcall	stringdir
   510  0356  1283               	bcf	3,5	;RP0=0, select bank0
   511  0357  00D0               	movwf	_geweiNum
   512  0358  00D1               	movwf	_shiweiNum
   513                           
   514                           ;main.c: 130: firstTime = 250;
   515  0359  30FA               	movlw	250
   516  035A  00D2               	movwf	_firstTime
   517                           
   518                           ;main.c: 131: startLockFlag = 1;
   519  035B  01CF               	clrf	_startLockFlag
   520  035C  0ACF               	incf	_startLockFlag,f
   521  035D                     l631:	
   522                           ;main.c: 132: while (1)
   523                           
   524  035D  0064               	clrwdt	;# 
   525                           
   526                           ;main.c: 135: if(intCount10 > 10)
   527  035E  300B               	movlw	11
   528  035F  1283               	bcf	3,5	;RP0=0, select bank0
   529  0360  0238               	subwf	_intCount10,w
   530  0361  1803               	btfsc	3,0
   531                           
   532                           ;main.c: 136: {
   533                           ;main.c: 137: intCount10 = 0;
   534  0362  01B8               	clrf	_intCount10
   535                           
   536                           ;main.c: 138: }
   537                           ;main.c: 139: if(!IntFlag)
   538  0363  083A               	movf	_IntFlag,w
   539  0364  1903               	btfsc	3,2
   540  0365  2B5D               	goto	l631
   541                           
   542                           ;main.c: 141: IntFlag = 0;
   543  0366  01BA               	clrf	_IntFlag
   544                           
   545                           ;main.c: 142: chrgCtr();
   546  0367  2390               	fcall	_chrgCtr
   547                           
   548                           ;main.c: 143: checkBatAD();
   549  0368  248E               	fcall	_checkBatAD
   550                           
   551                           ;main.c: 144: setBatStep();
   552  0369  21D7               	fcall	_setBatStep
   553                           
   554                           ;main.c: 145: if(lowBatFlag == 0 && firstTime == 0 && chrgFlag == 0)
   555  036A  0832               	movf	_lowBatFlag,w
   556  036B  1D03               	btfss	3,2
   557  036C  2B74               	goto	l2898
   558  036D  0852               	movf	_firstTime,w
   559  036E  1D03               	btfss	3,2
   560  036F  2B74               	goto	l2898
   561  0370  087A               	movf	_chrgFlag,w
   562  0371  1D03               	btfss	3,2
   563  0372  2B74               	goto	l2898
   564                           
   565                           ;main.c: 146: {
   566                           ;main.c: 147: keyCtr();
   567  0373  2427               	fcall	_keyCtr
   568  0374                     l2898:	
   569                           
   570                           ;main.c: 148: }
   571                           ;main.c: 149: workCtr();
   572  0374  2100               	fcall	_workCtr
   573                           
   574                           ;main.c: 150: checkOutAD();
   575  0375  2478               	fcall	_checkOutAD
   576                           
   577                           ;main.c: 151: if(chrgFlag == 0 && workStep == 0 && firstTime == 0 && showBatTime == 0)
   578  0376  087A               	movf	_chrgFlag,w
   579  0377  1283               	bcf	3,5	;RP0=0, select bank0
   580  0378  1D03               	btfss	3,2
   581  0379  2B8E               	goto	L1
   582  037A  0836               	movf	_workStep,w
   583  037B  1D03               	btfss	3,2
   584  037C  2B8D               	goto	l2918
   585  037D  0852               	movf	_firstTime,w
   586  037E  1D03               	btfss	3,2
   587  037F  2B8D               	goto	l2918
   588                           
   589                           ;main.c: 152: {
   590                           ;main.c: 153: baiweiNum = 0;
   591  0380  0834               	movf	_showBatTime,w
   592  0381  1D03               	btfss	3,2
   593  0382  2B8D               	goto	l2918
   594  0383  30C8               	movlw	200
   595                           
   596                           ;main.c: 154: shiweiNum = geweiNum = 0;
   597  0384  01D0               	clrf	_geweiNum
   598  0385  01D1               	clrf	_shiweiNum
   599                           
   600                           ;main.c: 155: if(++sleepTime >= 200)
   601  0386  0AB1               	incf	_sleepTime,f
   602  0387  0231               	subwf	_sleepTime,w
   603  0388  1C03               	skipc
   604  0389  2B5D               	goto	l631
   605                           
   606                           ;main.c: 156: {
   607                           ;main.c: 157: sleepTime = 0;
   608  038A  01B1               	clrf	_sleepTime
   609                           
   610                           ;main.c: 158: Sleep_Mode();
   611  038B  230F               	fcall	_Sleep_Mode
   612  038C  2B5D               	goto	l631
   613  038D                     l2918:	
   614                           
   615                           ;main.c: 161: else
   616                           ;main.c: 162: {
   617                           ;main.c: 163: sleepTime = 0;
   618  038D  1283               	bcf	3,5	;RP0=0, select bank0
   619  038E                     L1:	
   620  038E  01B1               	clrf	_sleepTime
   621  038F  2B5D               	goto	l631
   622  0390                     __end_of_main:	
   623                           
   624                           	psect	text1
   625  0100                     __ptext1:	
   626 ;; *************** function _workCtr *****************
   627 ;; Defined at:
   628 ;;		line 436 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;		None
   633 ;; Return value:  Size  Location     Type
   634 ;;                  1    wreg      void 
   635 ;; Registers used:
   636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   637 ;; Tracked objects:
   638 ;;		On entry : 100/0
   639 ;;		On exit  : 100/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMMON   BANK0   BANK1
   642 ;;      Params:         0       0       0
   643 ;;      Locals:         0       0       0
   644 ;;      Temps:          0       0       0
   645 ;;      Totals:         0       0       0
   646 ;;Total ram usage:        0 bytes
   647 ;; Hardware stack levels used:    1
   648 ;; Hardware stack levels required when called:    3
   649 ;; This function calls:
   650 ;;		___lbdiv
   651 ;;		___lbmod
   652 ;;		_pwmInit
   653 ;;		_pwmStop
   654 ;; This function is called by:
   655 ;;		_main
   656 ;; This function uses a non-reentrant model
   657 ;;
   658                           
   659                           
   660                           ;psect for function _workCtr
   661  0100                     _workCtr:	
   662                           
   663                           ;main.c: 445: if(curDuty < maxDuty)
   664                           
   665                           ;incstack = 0
   666                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   667  0100  082A               	movf	_maxDuty,w
   668  0101  022B               	subwf	_curDuty,w
   669  0102  1803               	skipnc
   670  0103  2906               	goto	l2726
   671                           
   672                           ;main.c: 446: {
   673                           ;main.c: 447: curDuty++;
   674  0104  0AAB               	incf	_curDuty,f
   675                           
   676                           ;main.c: 448: }
   677  0105  290A               	goto	l2730
   678  0106                     l2726:	
   679                           
   680                           ;main.c: 449: else if(curDuty > maxDuty)
   681  0106  082B               	movf	_curDuty,w
   682  0107  022A               	subwf	_maxDuty,w
   683  0108  1C03               	btfss	3,0
   684                           
   685                           ;main.c: 450: {
   686                           ;main.c: 451: curDuty--;
   687  0109  03AB               	decf	_curDuty,f
   688  010A                     l2730:	
   689                           
   690                           ;main.c: 452: }
   691                           ;main.c: 453: if(lowShanTime > 0)
   692  010A  0824               	movf	_lowShanTime,w
   693  010B  0425               	iorwf	_lowShanTime+1,w
   694  010C  1903               	btfsc	3,2
   695  010D  2918               	goto	l2736
   696                           
   697                           ;main.c: 454: {
   698                           ;main.c: 455: if(--lowShanTime == 0)
   699  010E  3001               	movlw	1
   700  010F  02A4               	subwf	_lowShanTime,f
   701  0110  3000               	movlw	0
   702  0111  1C03               	skipc
   703  0112  03A5               	decf	_lowShanTime+1,f
   704  0113  02A5               	subwf	_lowShanTime+1,f
   705  0114  0824               	movf	_lowShanTime,w
   706  0115  0425               	iorwf	_lowShanTime+1,w
   707  0116  1903               	btfsc	3,2
   708                           
   709                           ;main.c: 456: {
   710                           ;main.c: 457: workStep = 0;
   711  0117  01B6               	clrf	_workStep
   712  0118                     l2736:	
   713                           
   714                           ;main.c: 458: }
   715                           ;main.c: 459: }
   716                           ;main.c: 460: if(showBatTime > 0)
   717  0118  0834               	movf	_showBatTime,w
   718  0119  1D03               	btfss	3,2
   719                           
   720                           ;main.c: 461: {
   721                           ;main.c: 462: showBatTime--;
   722  011A  03B4               	decf	_showBatTime,f
   723                           
   724                           ;main.c: 463: }
   725                           ;main.c: 464: if(firstTime > 0)
   726  011B  0852               	movf	_firstTime,w
   727  011C  1903               	btfsc	3,2
   728  011D  292E               	goto	l2752
   729                           
   730                           ;main.c: 465: {
   731                           ;main.c: 466: firstTime--;
   732  011E  03D2               	decf	_firstTime,f
   733                           
   734                           ;main.c: 467: if(showBatStep < curBatStep)
   735  011F  082F               	movf	_curBatStep,w
   736  0120  0279               	subwf	_showBatStep,w
   737  0121  1803               	skipnc
   738  0122  2925               	goto	l2748
   739                           
   740                           ;main.c: 468: {
   741                           ;main.c: 469: showBatStep = curBatStep;
   742  0123  082F               	movf	_curBatStep,w
   743  0124  00F9               	movwf	_showBatStep
   744  0125                     l2748:	
   745                           
   746                           ;main.c: 470: }
   747                           ;main.c: 471: shiweiNum = numArray[8];
   748  0125  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   749  0126  0084               	movwf	4
   750  0127  24A4               	fcall	stringdir
   751  0128  00D1               	movwf	_shiweiNum
   752                           
   753                           ;main.c: 472: geweiNum = numArray[8];
   754  0129  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   755  012A  0084               	movwf	4
   756  012B  24A4               	fcall	stringdir
   757  012C  00D0               	movwf	_geweiNum
   758                           
   759                           ;main.c: 473: }
   760  012D  2991               	goto	l2826
   761  012E                     l2752:	
   762                           
   763                           ;main.c: 474: else if(workStep == 0 || (lowShanTime > 0 && count1s < 50))
   764  012E  0836               	movf	_workStep,w
   765  012F  1903               	btfsc	3,2
   766  0130  2939               	goto	l2758
   767  0131  0824               	movf	_lowShanTime,w
   768  0132  0425               	iorwf	_lowShanTime+1,w
   769  0133  1903               	btfsc	3,2
   770  0134  2946               	goto	l2766
   771  0135  3032               	movlw	50
   772  0136  023B               	subwf	_count1s,w
   773  0137  1803               	skipnc
   774  0138  2946               	goto	l2766
   775  0139                     l2758:	
   776                           
   777                           ;main.c: 475: {
   778                           ;main.c: 476: shiweiNum = 0;
   779  0139  01D1               	clrf	_shiweiNum
   780                           
   781                           ;main.c: 477: geweiNum = 0;
   782  013A  01D0               	clrf	_geweiNum
   783                           
   784                           ;main.c: 478: maxDuty = 0;
   785  013B  01AA               	clrf	_maxDuty
   786                           
   787                           ;main.c: 479: PWMD2L = curDuty;
   788  013C  082B               	movf	_curDuty,w
   789  013D  1683               	bsf	3,5	;RP0=1, select bank1
   790  013E  009B               	movwf	27	;volatile
   791                           
   792                           ;main.c: 480: if(curDuty < 40)
   793  013F  3028               	movlw	40
   794  0140  1283               	bcf	3,5	;RP0=0, select bank0
   795  0141  022B               	subwf	_curDuty,w
   796  0142  1803               	skipnc
   797  0143  2991               	goto	l2826
   798                           
   799                           ;main.c: 481: {
   800                           ;main.c: 482: pwmStop();
   801  0144  24E4               	fcall	_pwmStop
   802  0145  2991               	goto	l2826
   803  0146                     l2766:	
   804                           
   805                           ;main.c: 486: else if(workStep == 1)
   806  0146  0B36               	decfsz	_workStep,w
   807  0147  2967               	goto	l2796
   808                           
   809                           ;main.c: 487: {
   810                           ;main.c: 488: if(chrgFlag == 0)
   811  0148  087A               	movf	_chrgFlag,w
   812  0149  1D03               	btfss	3,2
   813  014A  2953               	goto	l2772
   814                           
   815                           ;main.c: 489: {
   816                           ;main.c: 490: shiweiNum = numArray[10];
   817  014B  300B               	movlw	low (((_numArray+10)-__stringbase)| (0+32768))
   818  014C  0084               	movwf	4
   819  014D  24A4               	fcall	stringdir
   820  014E  00D1               	movwf	_shiweiNum
   821                           
   822                           ;main.c: 491: geweiNum = numArray[1];
   823  014F  3002               	movlw	low (((_numArray+1)-__stringbase)| (0+32768))
   824  0150  0084               	movwf	4
   825  0151  24A4               	fcall	stringdir
   826  0152  00D0               	movwf	_geweiNum
   827  0153                     l2772:	
   828                           
   829                           ;main.c: 492: }
   830                           ;main.c: 493: if(motorPwmFlag == 0)
   831  0153  0830               	movf	_motorPwmFlag,w
   832  0154  1D03               	btfss	3,2
   833  0155  2958               	goto	l2782
   834                           
   835                           ;main.c: 494: {
   836                           ;main.c: 495: pwmInit();
   837  0156  24B6               	fcall	_pwmInit
   838                           
   839                           ;main.c: 496: PWMD23H = 0X00;
   840                           
   841                           ;main.c: 497: PWMD2L = 40;
   842                           
   843                           ;main.c: 498: curDuty = 40;
   844  0157  21D0               	fcall	PL8	;call to abstracted procedure
   845  0158                     l2782:	
   846                           
   847                           ;main.c: 499: }
   848                           ;main.c: 500: PWMD2L = curDuty;
   849  0158  082B               	movf	_curDuty,w
   850  0159  1683               	bsf	3,5	;RP0=1, select bank1
   851  015A  009B               	movwf	27	;volatile
   852                           
   853                           ;main.c: 501: maxDuty = 60;
   854  015B  303C               	movlw	60
   855  015C  1283               	bcf	3,5	;RP0=0, select bank0
   856  015D  00AA               	movwf	_maxDuty
   857                           
   858                           ;main.c: 502: if(out_ad > 200)
   859  015E  3000               	movlw	0
   860  015F  0221               	subwf	_out_ad+1,w
   861  0160  30C9               	movlw	201
   862  0161  1903               	skipnz
   863  0162  0220               	subwf	_out_ad,w
   864  0163  1803               	btfsc	3,0
   865  0164  2988               	goto	l2818
   866  0165                     l2794:	
   867                           ;main.c: 503: {
   868                           ;main.c: 504: if(++overTime > 10)
   869                           
   870                           
   871                           ;main.c: 511: else
   872                           ;main.c: 512: {
   873                           ;main.c: 513: overTime = 0;
   874  0165  01AC               	clrf	_overTime
   875  0166  2991               	goto	l2826
   876  0167                     l2796:	
   877                           
   878                           ;main.c: 516: else if(workStep == 2)
   879  0167  3002               	movlw	2
   880  0168  0636               	xorwf	_workStep,w
   881  0169  1D03               	btfss	3,2
   882  016A  2991               	goto	l2826
   883                           
   884                           ;main.c: 517: {
   885                           ;main.c: 518: if(chrgFlag == 0)
   886  016B  087A               	movf	_chrgFlag,w
   887  016C  1D03               	btfss	3,2
   888  016D  2976               	goto	l2802
   889                           
   890                           ;main.c: 519: {
   891                           ;main.c: 520: shiweiNum = numArray[10];
   892  016E  300B               	movlw	low (((_numArray+10)-__stringbase)| (0+32768))
   893  016F  0084               	movwf	4
   894  0170  24A4               	fcall	stringdir
   895  0171  00D1               	movwf	_shiweiNum
   896                           
   897                           ;main.c: 521: geweiNum = numArray[2];
   898  0172  3003               	movlw	low (((_numArray+2)-__stringbase)| (0+32768))
   899  0173  0084               	movwf	4
   900  0174  24A4               	fcall	stringdir
   901  0175  00D0               	movwf	_geweiNum
   902  0176                     l2802:	
   903                           
   904                           ;main.c: 522: }
   905                           ;main.c: 523: if(motorPwmFlag == 0)
   906  0176  0830               	movf	_motorPwmFlag,w
   907  0177  1D03               	btfss	3,2
   908  0178  297B               	goto	l2812
   909                           
   910                           ;main.c: 524: {
   911                           ;main.c: 525: pwmInit();
   912  0179  24B6               	fcall	_pwmInit
   913                           
   914                           ;main.c: 526: PWMD23H = 0X00;
   915                           
   916                           ;main.c: 527: PWMD2L = 40;
   917                           
   918                           ;main.c: 528: curDuty = 40;
   919  017A  21D0               	fcall	PL8	;call to abstracted procedure
   920  017B                     l2812:	
   921                           
   922                           ;main.c: 529: }
   923                           ;main.c: 530: PWMD2L = curDuty;
   924  017B  082B               	movf	_curDuty,w
   925  017C  1683               	bsf	3,5	;RP0=1, select bank1
   926  017D  009B               	movwf	27	;volatile
   927                           
   928                           ;main.c: 531: maxDuty = 99;
   929  017E  3063               	movlw	99
   930  017F  1283               	bcf	3,5	;RP0=0, select bank0
   931  0180  00AA               	movwf	_maxDuty
   932                           
   933                           ;main.c: 532: if(out_ad > 220)
   934  0181  3000               	movlw	0
   935  0182  0221               	subwf	_out_ad+1,w
   936  0183  30DD               	movlw	221
   937  0184  1903               	skipnz
   938  0185  0220               	subwf	_out_ad,w
   939  0186  1C03               	skipc
   940  0187  2965               	goto	l2794
   941  0188                     l2818:	
   942                           
   943                           ;main.c: 533: {
   944                           ;main.c: 534: if(++overTime > 10)
   945  0188  300B               	movlw	11
   946  0189  0AAC               	incf	_overTime,f
   947  018A  022C               	subwf	_overTime,w
   948  018B  1C03               	skipc
   949  018C  2991               	goto	l2826
   950                           
   951                           ;main.c: 505: {
   952                           ;main.c: 506: overTime = 0;
   953  018D  01AC               	clrf	_overTime
   954                           
   955                           ;main.c: 507: workStep = 0;
   956  018E  01B6               	clrf	_workStep
   957                           
   958                           ;main.c: 508: startLockFlag = 1;
   959  018F  01CF               	clrf	_startLockFlag
   960  0190  0ACF               	incf	_startLockFlag,f
   961  0191                     l2826:	
   962                           
   963                           ;main.c: 544: }
   964                           ;main.c: 545: }
   965                           ;main.c: 546: if(chrgFlag || showBatTime > 0)
   966  0191  087A               	movf	_chrgFlag,w
   967  0192  1903               	btfsc	3,2
   968  0193  0834               	movf	_showBatTime,w
   969  0194  1903               	btfsc	3,2
   970  0195  0008               	return
   971                           
   972                           ;main.c: 547: {
   973                           ;main.c: 548: if(showBatStep >=99)
   974  0196  3063               	movlw	99
   975  0197  0279               	subwf	_showBatStep,w
   976  0198  1C03               	skipc
   977  0199  29A3               	goto	l2834
   978                           
   979                           ;main.c: 549: {
   980                           ;main.c: 550: shiweiNum = numArray[9];
   981  019A  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
   982  019B  0084               	movwf	4
   983  019C  24A4               	fcall	stringdir
   984  019D  00D1               	movwf	_shiweiNum
   985                           
   986                           ;main.c: 551: geweiNum = numArray[9];
   987  019E  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
   988  019F  0084               	movwf	4
   989  01A0  24A4               	fcall	stringdir
   990  01A1  00D0               	movwf	_geweiNum
   991                           
   992                           ;main.c: 552: }
   993  01A2  0008               	return
   994  01A3                     l2834:	
   995                           
   996                           ;main.c: 554: {
   997                           ;main.c: 555: baiweiNum = 0;
   998  01A3  300A               	movlw	10
   999  01A4  0279               	subwf	_showBatStep,w
  1000  01A5  1C03               	skipc
  1001  01A6  29C6               	goto	l2846
  1002                           
  1003                           ;main.c: 556: shiweiNum = numArray[showBatStep/10];
  1004  01A7  300A               	movlw	10
  1005  01A8  00F3               	movwf	___lbdiv@divisor
  1006  01A9  0879               	movf	_showBatStep,w
  1007  01AA  2443               	fcall	___lbdiv
  1008  01AB  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1009  01AC  0084               	movwf	4
  1010  01AD  24A4               	fcall	stringdir
  1011  01AE  00D1               	movwf	_shiweiNum
  1012                           
  1013                           ;main.c: 557: if(chrgFlag && count1s < 50)
  1014  01AF  087A               	movf	_chrgFlag,w
  1015  01B0  1903               	btfsc	3,2
  1016  01B1  29BD               	goto	l2844
  1017  01B2  3032               	movlw	50
  1018  01B3  023B               	subwf	_count1s,w
  1019  01B4  1C03               	btfss	3,0
  1020  01B5  29BB               	goto	l2842
  1021  01B6  29BD               	goto	l2844
  1022  01B7                     l2850:	
  1023  01B7  3032               	movlw	50
  1024  01B8  023B               	subwf	_count1s,w
  1025  01B9  1803               	skipnc
  1026  01BA  29CA               	goto	l2854
  1027  01BB                     l2842:	
  1028                           
  1029                           ;main.c: 558: {
  1030                           ;main.c: 559: geweiNum = 0;
  1031  01BB  01D0               	clrf	_geweiNum
  1032                           
  1033                           ;main.c: 560: }
  1034  01BC  0008               	return
  1035  01BD                     l2844:	
  1036                           
  1037                           ;main.c: 561: else
  1038                           ;main.c: 562: {
  1039                           ;main.c: 563: geweiNum = numArray[showBatStep%10];
  1040  01BD  300A               	movlw	10
  1041  01BE  00F3               	movwf	___lbmod@divisor
  1042  01BF  0879               	movf	_showBatStep,w
  1043  01C0  240B               	fcall	___lbmod
  1044  01C1  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1045  01C2  0084               	movwf	4
  1046  01C3  24A4               	fcall	stringdir
  1047  01C4  00D0               	movwf	_geweiNum
  1048  01C5  0008               	return
  1049  01C6                     l2846:	
  1050                           
  1051                           ;main.c: 569: shiweiNum = 0;
  1052  01C6  01D1               	clrf	_shiweiNum
  1053                           
  1054                           ;main.c: 570: if(chrgFlag && count1s < 50)
  1055  01C7  087A               	movf	_chrgFlag,w
  1056  01C8  1D03               	btfss	3,2
  1057  01C9  29B7               	goto	l2850
  1058  01CA                     l2854:	
  1059                           
  1060                           ;main.c: 574: else
  1061                           ;main.c: 575: {
  1062                           ;main.c: 576: geweiNum = numArray[showBatStep];
  1063  01CA  0879               	movf	_showBatStep,w
  1064  01CB  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1065  01CC  0084               	movwf	4
  1066  01CD  24A4               	fcall	stringdir
  1067  01CE  00D0               	movwf	_geweiNum
  1068  01CF  0008               	return
  1069  01D0                     __end_of_workCtr:	
  1070  01D0                     PL8:	
  1071  01D0  1683               	bsf	3,5	;RP0=1, select bank1
  1072  01D1  019E               	clrf	30	;volatile
  1073  01D2  3028               	movlw	40
  1074  01D3  009B               	movwf	27	;volatile
  1075  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  1076  01D5  00AB               	movwf	_curDuty
  1077  01D6  0008               	return
  1078  01D7                     __end_ofPL8:	
  1079                           
  1080                           	psect	text2
  1081  04E4                     __ptext2:	
  1082 ;; *************** function _pwmStop *****************
  1083 ;; Defined at:
  1084 ;;		line 826 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1085 ;; Parameters:    Size  Location     Type
  1086 ;;		None
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;		None
  1089 ;; Return value:  Size  Location     Type
  1090 ;;                  1    wreg      void 
  1091 ;; Registers used:
  1092 ;;		status,2
  1093 ;; Tracked objects:
  1094 ;;		On entry : 100/0
  1095 ;;		On exit  : 100/0
  1096 ;;		Unchanged: 0/0
  1097 ;; Data sizes:     COMMON   BANK0   BANK1
  1098 ;;      Params:         0       0       0
  1099 ;;      Locals:         0       0       0
  1100 ;;      Temps:          0       0       0
  1101 ;;      Totals:         0       0       0
  1102 ;;Total ram usage:        0 bytes
  1103 ;; Hardware stack levels used:    1
  1104 ;; Hardware stack levels required when called:    2
  1105 ;; This function calls:
  1106 ;;		Nothing
  1107 ;; This function is called by:
  1108 ;;		_workCtr
  1109 ;; This function uses a non-reentrant model
  1110 ;;
  1111                           
  1112                           
  1113                           ;psect for function _pwmStop
  1114  04E4                     _pwmStop:	
  1115                           
  1116                           ;main.c: 828: PWMCON0 &= 0XFB;
  1117                           
  1118                           ;incstack = 0
  1119                           ; Regs used in _pwmStop: [status,2]
  1120  04E4  1115               	bcf	21,2	;volatile
  1121                           
  1122                           ;main.c: 829: RB3 = 0;
  1123  04E5  1186               	bcf	6,3	;volatile
  1124                           
  1125                           ;main.c: 830: motorPwmFlag = 0;
  1126  04E6  01B0               	clrf	_motorPwmFlag
  1127  04E7  0008               	return
  1128  04E8                     __end_of_pwmStop:	
  1129                           
  1130                           	psect	text3
  1131  04B6                     __ptext3:	
  1132 ;; *************** function _pwmInit *****************
  1133 ;; Defined at:
  1134 ;;		line 810 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1135 ;; Parameters:    Size  Location     Type
  1136 ;;		None
  1137 ;; Auto vars:     Size  Location     Type
  1138 ;;		None
  1139 ;; Return value:  Size  Location     Type
  1140 ;;                  1    wreg      void 
  1141 ;; Registers used:
  1142 ;;		wreg, status,2
  1143 ;; Tracked objects:
  1144 ;;		On entry : 100/0
  1145 ;;		On exit  : 100/0
  1146 ;;		Unchanged: 0/0
  1147 ;; Data sizes:     COMMON   BANK0   BANK1
  1148 ;;      Params:         0       0       0
  1149 ;;      Locals:         0       0       0
  1150 ;;      Temps:          0       0       0
  1151 ;;      Totals:         0       0       0
  1152 ;;Total ram usage:        0 bytes
  1153 ;; Hardware stack levels used:    1
  1154 ;; Hardware stack levels required when called:    2
  1155 ;; This function calls:
  1156 ;;		Nothing
  1157 ;; This function is called by:
  1158 ;;		_workCtr
  1159 ;; This function uses a non-reentrant model
  1160 ;;
  1161                           
  1162                           
  1163                           ;psect for function _pwmInit
  1164  04B6                     _pwmInit:	
  1165                           
  1166                           ;main.c: 812: PWMCON1 = 0B00000000;
  1167                           
  1168                           ;incstack = 0
  1169                           ; Regs used in _pwmInit: [wreg+status,2]
  1170  04B6  0196               	clrf	22	;volatile
  1171                           
  1172                           ;main.c: 813: PWMTH = 0X00;
  1173  04B7  0198               	clrf	24	;volatile
  1174                           
  1175                           ;main.c: 814: PWMTL = 100;
  1176  04B8  3064               	movlw	100
  1177  04B9  0097               	movwf	23	;volatile
  1178                           
  1179                           ;main.c: 817: PWMD23H = 0;
  1180  04BA  1683               	bsf	3,5	;RP0=1, select bank1
  1181  04BB  019E               	clrf	30	;volatile
  1182                           
  1183                           ;main.c: 818: PWMD2L = 60;
  1184  04BC  303C               	movlw	60
  1185  04BD  009B               	movwf	27	;volatile
  1186                           
  1187                           ;main.c: 819: PWM23DT = 0X00;
  1188  04BE  019D               	clrf	29	;volatile
  1189                           
  1190                           ;main.c: 821: PWMCON0 = 0X64;
  1191  04BF  3064               	movlw	100
  1192  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  1193  04C1  0095               	movwf	21	;volatile
  1194                           
  1195                           ;main.c: 822: PWMCON2 =0X00;
  1196  04C2  019D               	clrf	29	;volatile
  1197                           
  1198                           ;main.c: 823: motorPwmFlag = 1;
  1199  04C3  01B0               	clrf	_motorPwmFlag
  1200  04C4  0AB0               	incf	_motorPwmFlag,f
  1201  04C5  0008               	return
  1202  04C6                     __end_of_pwmInit:	
  1203                           
  1204                           	psect	text4
  1205  040B                     __ptext4:	
  1206 ;; *************** function ___lbmod *****************
  1207 ;; Defined at:
  1208 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;  dividend        1    wreg     unsigned char 
  1211 ;;  divisor         1    3[COMMON] unsigned char 
  1212 ;; Auto vars:     Size  Location     Type
  1213 ;;  dividend        1    0[BANK0 ] unsigned char 
  1214 ;;  rem             1    2[BANK0 ] unsigned char 
  1215 ;;  counter         1    1[BANK0 ] unsigned char 
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      unsigned char 
  1218 ;; Registers used:
  1219 ;;		wreg, status,2, status,0
  1220 ;; Tracked objects:
  1221 ;;		On entry : 100/0
  1222 ;;		On exit  : 100/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1
  1225 ;;      Params:         1       0       0
  1226 ;;      Locals:         0       3       0
  1227 ;;      Temps:          1       0       0
  1228 ;;      Totals:         2       3       0
  1229 ;;Total ram usage:        5 bytes
  1230 ;; Hardware stack levels used:    1
  1231 ;; Hardware stack levels required when called:    2
  1232 ;; This function calls:
  1233 ;;		Nothing
  1234 ;; This function is called by:
  1235 ;;		_workCtr
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           
  1240                           ;psect for function ___lbmod
  1241  040B                     ___lbmod:	
  1242                           
  1243                           ;incstack = 0
  1244                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1245                           ;___lbmod@dividend stored from wreg
  1246  040B  00BE               	movwf	___lbmod@dividend
  1247  040C  3008               	movlw	8
  1248  040D  00BF               	movwf	___lbmod@counter
  1249  040E  01C0               	clrf	___lbmod@rem
  1250  040F                     l2600:	
  1251  040F  083E               	movf	___lbmod@dividend,w
  1252  0410  00F4               	movwf	??___lbmod
  1253  0411  3007               	movlw	7
  1254  0412  1003               	clrc
  1255  0413                     L2:	
  1256  0413  0CF4               	rrf	??___lbmod,f
  1257  0414  3EFF               	addlw	-1
  1258  0415  1003               	clrc
  1259  0416  1D03               	skipz
  1260  0417  2C13               	goto	L2
  1261  0418  0D40               	rlf	___lbmod@rem,w
  1262  0419  0474               	iorwf	??___lbmod,w
  1263  041A  00C0               	movwf	___lbmod@rem
  1264  041B  1003               	clrc
  1265  041C  0DBE               	rlf	___lbmod@dividend,f
  1266  041D  0873               	movf	___lbmod@divisor,w
  1267  041E  0240               	subwf	___lbmod@rem,w
  1268  041F  1C03               	skipc
  1269  0420  2C23               	goto	l2608
  1270  0421  0873               	movf	___lbmod@divisor,w
  1271  0422  02C0               	subwf	___lbmod@rem,f
  1272  0423                     l2608:	
  1273  0423  0BBF               	decfsz	___lbmod@counter,f
  1274  0424  2C0F               	goto	l2600
  1275  0425  0840               	movf	___lbmod@rem,w
  1276  0426  0008               	return
  1277  0427                     __end_of___lbmod:	
  1278                           
  1279                           	psect	text5
  1280  0443                     __ptext5:	
  1281 ;; *************** function ___lbdiv *****************
  1282 ;; Defined at:
  1283 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;  dividend        1    wreg     unsigned char 
  1286 ;;  divisor         1    3[COMMON] unsigned char 
  1287 ;; Auto vars:     Size  Location     Type
  1288 ;;  dividend        1    4[COMMON] unsigned char 
  1289 ;;  quotient        1    6[COMMON] unsigned char 
  1290 ;;  counter         1    5[COMMON] unsigned char 
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      unsigned char 
  1293 ;; Registers used:
  1294 ;;		wreg, status,2, status,0
  1295 ;; Tracked objects:
  1296 ;;		On entry : 100/0
  1297 ;;		On exit  : 100/0
  1298 ;;		Unchanged: 100/0
  1299 ;; Data sizes:     COMMON   BANK0   BANK1
  1300 ;;      Params:         1       0       0
  1301 ;;      Locals:         3       0       0
  1302 ;;      Temps:          0       0       0
  1303 ;;      Totals:         4       0       0
  1304 ;;Total ram usage:        4 bytes
  1305 ;; Hardware stack levels used:    1
  1306 ;; Hardware stack levels required when called:    2
  1307 ;; This function calls:
  1308 ;;		Nothing
  1309 ;; This function is called by:
  1310 ;;		_workCtr
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           
  1315                           ;psect for function ___lbdiv
  1316  0443                     ___lbdiv:	
  1317                           
  1318                           ;incstack = 0
  1319                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1320                           ;___lbdiv@dividend stored from wreg
  1321  0443  00F4               	movwf	___lbdiv@dividend
  1322  0444  01F6               	clrf	___lbdiv@quotient
  1323  0445  0873               	movf	___lbdiv@divisor,w
  1324  0446  1903               	btfsc	3,2
  1325  0447  2C5C               	goto	l2010
  1326  0448  01F5               	clrf	___lbdiv@counter
  1327  0449                     l1996:	
  1328  0449  0AF5               	incf	___lbdiv@counter,f
  1329  044A  1BF3               	btfsc	___lbdiv@divisor,7
  1330  044B  2C4F               	goto	l1090
  1331  044C  1003               	clrc
  1332  044D  0DF3               	rlf	___lbdiv@divisor,f
  1333  044E  2C49               	goto	l1996
  1334  044F                     l1090:	
  1335  044F  1003               	clrc
  1336  0450  0DF6               	rlf	___lbdiv@quotient,f
  1337  0451  0873               	movf	___lbdiv@divisor,w
  1338  0452  0274               	subwf	___lbdiv@dividend,w
  1339  0453  1C03               	skipc
  1340  0454  2C59               	goto	L3
  1341  0455  0873               	movf	___lbdiv@divisor,w
  1342  0456  02F4               	subwf	___lbdiv@dividend,f
  1343  0457  1476               	bsf	___lbdiv@quotient,0
  1344  0458  1003               	clrc
  1345  0459                     L3:	
  1346  0459  0CF3               	rrf	___lbdiv@divisor,f
  1347  045A  0BF5               	decfsz	___lbdiv@counter,f
  1348  045B  2C4F               	goto	l1090
  1349  045C                     l2010:	
  1350  045C  0876               	movf	___lbdiv@quotient,w
  1351  045D  0008               	return
  1352  045E                     __end_of___lbdiv:	
  1353                           
  1354                           	psect	text6
  1355  01D7                     __ptext6:	
  1356 ;; *************** function _setBatStep *****************
  1357 ;; Defined at:
  1358 ;;		line 584 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  1    wreg      void 
  1365 ;; Registers used:
  1366 ;;		wreg, status,2, status,0, pclath, cstack
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 100/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMMON   BANK0   BANK1
  1372 ;;      Params:         0       0       0
  1373 ;;      Locals:         0       0       0
  1374 ;;      Temps:          0       2       0
  1375 ;;      Totals:         0       2       0
  1376 ;;Total ram usage:        2 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; Hardware stack levels required when called:    3
  1379 ;; This function calls:
  1380 ;;		___lwdiv
  1381 ;; This function is called by:
  1382 ;;		_main
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           
  1387                           ;psect for function _setBatStep
  1388  01D7                     _setBatStep:	
  1389                           
  1390                           ;main.c: 586: if(lowBatFlag == 1 && lowShanTime == 0 && workStep > 0)
  1391                           
  1392                           ;incstack = 0
  1393                           ; Regs used in _setBatStep: [wreg+status,2+status,0+pclath+cstack]
  1394  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  1395  01D8  0B32               	decfsz	_lowBatFlag,w
  1396  01D9  29E8               	goto	l2660
  1397  01DA  0824               	movf	_lowShanTime,w
  1398  01DB  0425               	iorwf	_lowShanTime+1,w
  1399  01DC  1D03               	btfss	3,2
  1400  01DD  29E8               	goto	l2660
  1401  01DE  0836               	movf	_workStep,w
  1402  01DF  1903               	btfsc	3,2
  1403  01E0  29E8               	goto	l2660
  1404  01E1  302C               	movlw	44
  1405                           
  1406                           ;main.c: 587: {
  1407                           ;main.c: 588: showBatStep = 0;
  1408  01E2  01F9               	clrf	_showBatStep
  1409                           
  1410                           ;main.c: 589: curBatStep = 0;
  1411  01E3  01AF               	clrf	_curBatStep
  1412                           
  1413                           ;main.c: 590: lowShanTime = 300;
  1414  01E4  00A4               	movwf	_lowShanTime
  1415  01E5  3001               	movlw	1
  1416  01E6  00A5               	movwf	_lowShanTime+1
  1417                           
  1418                           ;main.c: 591: }
  1419  01E7  0008               	return
  1420  01E8                     l2660:	
  1421                           
  1422                           ;main.c: 592: else if(power_ad < 1830)
  1423  01E8  3007               	movlw	7
  1424  01E9  0278               	subwf	_power_ad+1,w	;volatile
  1425  01EA  3026               	movlw	38
  1426  01EB  1903               	skipnz
  1427  01EC  0277               	subwf	_power_ad,w	;volatile
  1428  01ED  1803               	skipnc
  1429  01EE  2A02               	goto	l2670
  1430                           
  1431                           ;main.c: 593: {
  1432                           ;main.c: 594: if(count1s == 0)
  1433  01EF  083B               	movf	_count1s,w
  1434  01F0  1D03               	btfss	3,2
  1435  01F1  29FF               	goto	l756
  1436                           
  1437                           ;main.c: 595: {
  1438                           ;main.c: 596: if(showBatStep > 1)
  1439  01F2  3002               	movlw	2
  1440  01F3  0279               	subwf	_showBatStep,w
  1441  01F4  1C03               	skipc
  1442  01F5  29FB               	goto	l757
  1443                           
  1444                           ;main.c: 597: {
  1445                           ;main.c: 598: if(chrgFlag == 0)
  1446  01F6  087A               	movf	_chrgFlag,w
  1447  01F7  1D03               	btfss	3,2
  1448  01F8  29FD               	goto	l759
  1449                           
  1450                           ;main.c: 599: showBatStep--;
  1451  01F9  03F9               	decf	_showBatStep,f
  1452  01FA  29FD               	goto	l759
  1453  01FB                     l757:	
  1454                           
  1455                           ;main.c: 601: else
  1456                           ;main.c: 602: {
  1457                           ;main.c: 603: showBatStep = 1;
  1458  01FB  01F9               	clrf	_showBatStep
  1459  01FC  0AF9               	incf	_showBatStep,f
  1460  01FD                     l759:	
  1461                           
  1462                           ;main.c: 604: }
  1463                           ;main.c: 605: curBatStep = 1;
  1464  01FD  01AF               	clrf	_curBatStep
  1465  01FE  0AAF               	incf	_curBatStep,f
  1466  01FF                     l756:	
  1467                           
  1468                           ;main.c: 606: }
  1469                           ;main.c: 607: curBatStep = 1;
  1470  01FF  01AF               	clrf	_curBatStep
  1471  0200  0AAF               	incf	_curBatStep,f
  1472                           
  1473                           ;main.c: 608: }
  1474  0201  0008               	return
  1475  0202                     l2670:	
  1476                           
  1477                           ;main.c: 609: else
  1478                           ;main.c: 610: {
  1479                           ;main.c: 611: if(power_ad < 1990)
  1480  0202  3007               	movlw	7
  1481  0203  0278               	subwf	_power_ad+1,w	;volatile
  1482  0204  30C6               	movlw	198
  1483  0205  1903               	skipnz
  1484  0206  0277               	subwf	_power_ad,w	;volatile
  1485  0207  1803               	skipnc
  1486  0208  2A1A               	goto	l2674
  1487                           
  1488                           ;main.c: 612: {
  1489                           ;main.c: 613: curBatStep = (power_ad - 1830)/16;
  1490  0209  0877               	movf	_power_ad,w	;volatile
  1491  020A  3EDA               	addlw	218
  1492  020B  00C1               	movwf	??_setBatStep
  1493  020C  0878               	movf	_power_ad+1,w	;volatile
  1494  020D  1803               	skipnc
  1495  020E  3E01               	addlw	1
  1496  020F  3EF8               	addlw	248
  1497  0210  00C2               	movwf	??_setBatStep+1
  1498  0211  3004               	movlw	4
  1499  0212                     u2765:	
  1500  0212  1003               	clrc
  1501  0213  0CC2               	rrf	??_setBatStep+1,f
  1502  0214  0CC1               	rrf	??_setBatStep,f
  1503  0215  3EFF               	addlw	-1
  1504  0216  1D03               	skipz
  1505  0217  2A12               	goto	u2765
  1506  0218  0841               	movf	??_setBatStep,w
  1507  0219  2A3E               	goto	L4
  1508  021A                     l2674:	
  1509                           ;main.c: 614: }
  1510                           
  1511                           
  1512                           ;main.c: 615: else if(power_ad < 2090)
  1513  021A  3008               	movlw	8
  1514  021B  0278               	subwf	_power_ad+1,w	;volatile
  1515  021C  302A               	movlw	42
  1516  021D  1903               	skipnz
  1517  021E  0277               	subwf	_power_ad,w	;volatile
  1518  021F  1803               	skipnc
  1519  0220  2A30               	goto	l2678
  1520                           
  1521                           ;main.c: 616: {
  1522                           ;main.c: 617: curBatStep = 10 + ((power_ad - 1990)/5);
  1523  0221  3005               	movlw	5
  1524  0222  00F3               	movwf	___lwdiv@divisor
  1525  0223  01F4               	clrf	___lwdiv@divisor+1
  1526  0224  0877               	movf	_power_ad,w	;volatile
  1527  0225  3E3A               	addlw	58
  1528  0226  00F5               	movwf	___lwdiv@dividend
  1529  0227  0878               	movf	_power_ad+1,w	;volatile
  1530  0228  1803               	skipnc
  1531  0229  3E01               	addlw	1
  1532  022A  3EF8               	addlw	248
  1533  022B  00F6               	movwf	___lwdiv@dividend+1
  1534  022C  23C4               	fcall	___lwdiv
  1535  022D  0873               	movf	?___lwdiv,w
  1536  022E  3E0A               	addlw	10
  1537  022F  2A3E               	goto	L4
  1538  0230                     l2678:	
  1539                           ;main.c: 618: }
  1540                           
  1541                           
  1542                           ;main.c: 619: else
  1543                           ;main.c: 620: {
  1544                           ;main.c: 621: curBatStep = 30 + ((power_ad - 2090)/3);
  1545  0230  3003               	movlw	3
  1546  0231  00F3               	movwf	___lwdiv@divisor
  1547  0232  01F4               	clrf	___lwdiv@divisor+1
  1548  0233  0877               	movf	_power_ad,w	;volatile
  1549  0234  3ED6               	addlw	214
  1550  0235  00F5               	movwf	___lwdiv@dividend
  1551  0236  0878               	movf	_power_ad+1,w	;volatile
  1552  0237  1803               	skipnc
  1553  0238  3E01               	addlw	1
  1554  0239  3EF7               	addlw	247
  1555  023A  00F6               	movwf	___lwdiv@dividend+1
  1556  023B  23C4               	fcall	___lwdiv
  1557  023C  0873               	movf	?___lwdiv,w
  1558  023D  3E1E               	addlw	30
  1559  023E                     L4:	
  1560  023E  00AF               	movwf	_curBatStep
  1561                           
  1562                           ;main.c: 622: }
  1563                           ;main.c: 623: if(curBatStep > 99)
  1564  023F  3064               	movlw	100
  1565  0240  022F               	subwf	_curBatStep,w
  1566  0241  1C03               	skipc
  1567  0242  2A45               	goto	l2684
  1568                           
  1569                           ;main.c: 624: {
  1570                           ;main.c: 625: curBatStep = 99;
  1571  0243  3063               	movlw	99
  1572  0244  00AF               	movwf	_curBatStep
  1573  0245                     l2684:	
  1574                           
  1575                           ;main.c: 626: }
  1576                           ;main.c: 628: if(chrgFlag)
  1577  0245  087A               	movf	_chrgFlag,w
  1578  0246  1903               	btfsc	3,2
  1579  0247  2A66               	goto	l2708
  1580                           
  1581                           ;main.c: 629: {
  1582                           ;main.c: 630: if(chrgFullFlag)
  1583  0248  0839               	movf	_chrgFullFlag,w
  1584  0249  1903               	btfsc	3,2
  1585  024A  2A5F               	goto	l2696
  1586                           
  1587                           ;main.c: 631: {
  1588                           ;main.c: 632: if(++count30s >= 1000 && showBatStep < 99)
  1589  024B  227B               	fcall	PL10	;call to abstracted procedure
  1590  024C  2A53               	goto	L5
  1591  024D                     l2698:	
  1592                           
  1593                           ;main.c: 639: {
  1594                           ;main.c: 640: if(++count30s >= 3000 && showBatStep < 99)
  1595  024D  0AA2               	incf	_count30s,f
  1596  024E  1903               	skipnz
  1597  024F  0AA3               	incf	_count30s+1,f
  1598  0250  300B               	movlw	11
  1599  0251  0223               	subwf	_count30s+1,w
  1600  0252  30B8               	movlw	184
  1601  0253                     L5:	
  1602  0253  1903               	skipnz
  1603  0254  0222               	subwf	_count30s,w
  1604  0255  1C03               	skipc
  1605  0256  0008               	return
  1606  0257  3063               	movlw	99
  1607  0258  0279               	subwf	_showBatStep,w
  1608  0259  1803               	skipnc
  1609  025A  0008               	return
  1610                           
  1611                           ;main.c: 633: {
  1612                           ;main.c: 634: count30s = 0;
  1613  025B  01A2               	clrf	_count30s
  1614  025C  01A3               	clrf	_count30s+1
  1615                           
  1616                           ;main.c: 635: showBatStep++;
  1617  025D  0AF9               	incf	_showBatStep,f
  1618  025E  0008               	return
  1619  025F                     l2696:	
  1620                           
  1621                           ;main.c: 638: else if(curBatStep > showBatStep)
  1622  025F  082F               	movf	_curBatStep,w
  1623  0260  0279               	subwf	_showBatStep,w
  1624  0261  1C03               	btfss	3,0
  1625  0262  2A4D               	goto	l2698
  1626  0263                     l2706:	
  1627                           
  1628                           ;main.c: 647: else
  1629                           ;main.c: 648: {
  1630                           ;main.c: 649: count30s = 0;
  1631  0263  01A2               	clrf	_count30s
  1632  0264  01A3               	clrf	_count30s+1
  1633  0265  0008               	return
  1634  0266                     l2708:	
  1635                           
  1636                           ;main.c: 652: else
  1637                           ;main.c: 653: {
  1638                           ;main.c: 654: if(curBatStep < showBatStep && showBatStep > 1)
  1639  0266  0879               	movf	_showBatStep,w
  1640  0267  022F               	subwf	_curBatStep,w
  1641  0268  1803               	skipnc
  1642  0269  2A63               	goto	l2706
  1643  026A  3002               	movlw	2
  1644  026B  0279               	subwf	_showBatStep,w
  1645  026C  1C03               	skipc
  1646  026D  2A63               	goto	l2706
  1647                           
  1648                           ;main.c: 655: {
  1649                           ;main.c: 656: if(++count30s >= 1000 && showBatStep > 1)
  1650  026E  227B               	fcall	PL10	;call to abstracted procedure
  1651  026F  1903               	skipnz
  1652  0270  0222               	subwf	_count30s,w
  1653  0271  1C03               	skipc
  1654  0272  0008               	return
  1655  0273  3002               	movlw	2
  1656  0274  0279               	subwf	_showBatStep,w
  1657  0275  1C03               	skipc
  1658  0276  0008               	return
  1659                           
  1660                           ;main.c: 657: {
  1661                           ;main.c: 658: count30s = 0;
  1662  0277  01A2               	clrf	_count30s
  1663  0278  01A3               	clrf	_count30s+1
  1664                           
  1665                           ;main.c: 659: showBatStep--;
  1666  0279  03F9               	decf	_showBatStep,f
  1667  027A  0008               	return
  1668  027B                     __end_of_setBatStep:	
  1669  027B                     PL10:	
  1670  027B  0AA2               	incf	_count30s,f
  1671  027C  1903               	skipnz
  1672  027D  0AA3               	incf	_count30s+1,f
  1673  027E  3003               	movlw	3
  1674  027F  0223               	subwf	_count30s+1,w
  1675  0280  34E8               	retlw	232
  1676  0281                     __end_ofPL10:	
  1677                           
  1678                           	psect	text7
  1679  03C4                     __ptext7:	
  1680 ;; *************** function ___lwdiv *****************
  1681 ;; Defined at:
  1682 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;  divisor         2    3[COMMON] unsigned int 
  1685 ;;  dividend        2    5[COMMON] unsigned int 
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;  quotient        2    1[BANK0 ] unsigned int 
  1688 ;;  counter         1    0[BANK0 ] unsigned char 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  2    3[COMMON] unsigned int 
  1691 ;; Registers used:
  1692 ;;		wreg, status,2, status,0
  1693 ;; Tracked objects:
  1694 ;;		On entry : 100/0
  1695 ;;		On exit  : 100/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMMON   BANK0   BANK1
  1698 ;;      Params:         4       0       0
  1699 ;;      Locals:         0       3       0
  1700 ;;      Temps:          0       0       0
  1701 ;;      Totals:         4       3       0
  1702 ;;Total ram usage:        7 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:    2
  1705 ;; This function calls:
  1706 ;;		Nothing
  1707 ;; This function is called by:
  1708 ;;		_setBatStep
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           
  1713                           ;psect for function ___lwdiv
  1714  03C4                     ___lwdiv:	
  1715                           
  1716                           ;incstack = 0
  1717                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1718  03C4  01BF               	clrf	___lwdiv@quotient
  1719  03C5  01C0               	clrf	___lwdiv@quotient+1
  1720  03C6  0873               	movf	___lwdiv@divisor,w
  1721  03C7  0474               	iorwf	___lwdiv@divisor+1,w
  1722  03C8  1903               	btfsc	3,2
  1723  03C9  2BE9               	goto	l2636
  1724  03CA  01BE               	clrf	___lwdiv@counter
  1725  03CB                     L6:	
  1726  03CB  0ABE               	incf	___lwdiv@counter,f
  1727  03CC  1BF4               	btfsc	___lwdiv@divisor+1,7
  1728  03CD  2BD2               	goto	l2624
  1729  03CE  1003               	clrc
  1730  03CF  0DF3               	rlf	___lwdiv@divisor,f
  1731  03D0  0DF4               	rlf	___lwdiv@divisor+1,f
  1732  03D1  2BCB               	goto	L6
  1733  03D2                     l2624:	
  1734  03D2  1003               	clrc
  1735  03D3  0DBF               	rlf	___lwdiv@quotient,f
  1736  03D4  0DC0               	rlf	___lwdiv@quotient+1,f
  1737  03D5  0874               	movf	___lwdiv@divisor+1,w
  1738  03D6  0276               	subwf	___lwdiv@dividend+1,w
  1739  03D7  1D03               	skipz
  1740  03D8  2BDB               	goto	u2655
  1741  03D9  0873               	movf	___lwdiv@divisor,w
  1742  03DA  0275               	subwf	___lwdiv@dividend,w
  1743  03DB                     u2655:	
  1744  03DB  1C03               	skipc
  1745  03DC  2BE5               	goto	L7
  1746  03DD  0873               	movf	___lwdiv@divisor,w
  1747  03DE  02F5               	subwf	___lwdiv@dividend,f
  1748  03DF  0874               	movf	___lwdiv@divisor+1,w
  1749  03E0  1C03               	skipc
  1750  03E1  03F6               	decf	___lwdiv@dividend+1,f
  1751  03E2  02F6               	subwf	___lwdiv@dividend+1,f
  1752  03E3  143F               	bsf	___lwdiv@quotient,0
  1753  03E4  1003               	clrc
  1754  03E5                     L7:	
  1755  03E5  0CF4               	rrf	___lwdiv@divisor+1,f
  1756  03E6  0CF3               	rrf	___lwdiv@divisor,f
  1757  03E7  0BBE               	decfsz	___lwdiv@counter,f
  1758  03E8  2BD2               	goto	l2624
  1759  03E9                     l2636:	
  1760  03E9  0840               	movf	___lwdiv@quotient+1,w
  1761  03EA  00F4               	movwf	?___lwdiv+1
  1762  03EB  083F               	movf	___lwdiv@quotient,w
  1763  03EC  00F3               	movwf	?___lwdiv
  1764  03ED  0008               	return
  1765  03EE                     __end_of___lwdiv:	
  1766                           
  1767                           	psect	text8
  1768  0427                     __ptext8:	
  1769 ;; *************** function _keyCtr *****************
  1770 ;; Defined at:
  1771 ;;		line 404 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;		None
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;		None
  1776 ;; Return value:  Size  Location     Type
  1777 ;;                  1    wreg      void 
  1778 ;; Registers used:
  1779 ;;		wreg, status,2, status,0
  1780 ;; Tracked objects:
  1781 ;;		On entry : 100/0
  1782 ;;		On exit  : 100/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMMON   BANK0   BANK1
  1785 ;;      Params:         0       0       0
  1786 ;;      Locals:         0       0       0
  1787 ;;      Temps:          0       0       0
  1788 ;;      Totals:         0       0       0
  1789 ;;Total ram usage:        0 bytes
  1790 ;; Hardware stack levels used:    1
  1791 ;; Hardware stack levels required when called:    2
  1792 ;; This function calls:
  1793 ;;		Nothing
  1794 ;; This function is called by:
  1795 ;;		_main
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           
  1800                           ;psect for function _keyCtr
  1801  0427                     _keyCtr:	
  1802                           
  1803                           ;main.c: 406: if(PORTB & 0x02)
  1804                           
  1805                           ;incstack = 0
  1806                           ; Regs used in _keyCtr: [wreg+status,2+status,0]
  1807  0427  1C86               	btfss	6,1	;volatile
  1808  0428  2C3A               	goto	l2230
  1809                           
  1810                           ;main.c: 407: {
  1811                           ;main.c: 408: lockTime = 0;
  1812  0429  01AD               	clrf	_lockTime
  1813                           
  1814                           ;main.c: 409: if(workStep > 0 || startLockFlag == 0)
  1815  042A  0836               	movf	_workStep,w
  1816  042B  1D03               	btfss	3,2
  1817  042C  2C30               	goto	l704
  1818  042D  084F               	movf	_startLockFlag,w
  1819  042E  1D03               	btfss	3,2
  1820  042F  0008               	return
  1821  0430                     l704:	
  1822                           
  1823                           ;main.c: 410: {
  1824                           ;main.c: 411: startLockFlag = 1;
  1825  0430  01CF               	clrf	_startLockFlag
  1826  0431  0ACF               	incf	_startLockFlag,f
  1827                           
  1828                           ;main.c: 412: if(PORTB & 0x04)
  1829  0432  1D06               	btfss	6,2	;volatile
  1830  0433  2C37               	goto	l2228
  1831                           
  1832                           ;main.c: 413: {
  1833                           ;main.c: 414: workStep = 1;
  1834  0434  01B6               	clrf	_workStep
  1835  0435  0AB6               	incf	_workStep,f
  1836                           
  1837                           ;main.c: 415: }
  1838  0436  0008               	return
  1839  0437                     l2228:	
  1840                           
  1841                           ;main.c: 416: else
  1842                           ;main.c: 417: {
  1843                           ;main.c: 418: workStep = 2;
  1844  0437  3002               	movlw	2
  1845  0438  00B6               	movwf	_workStep
  1846  0439  0008               	return
  1847  043A                     l2230:	
  1848  043A  3015               	movlw	21
  1849                           
  1850                           ;main.c: 422: else
  1851                           ;main.c: 423: {
  1852                           ;main.c: 424: workStep = 0;
  1853  043B  01B6               	clrf	_workStep
  1854                           
  1855                           ;main.c: 425: if(++lockTime > 20)
  1856  043C  0AAD               	incf	_lockTime,f
  1857  043D  022D               	subwf	_lockTime,w
  1858  043E  1C03               	skipc
  1859  043F  0008               	return
  1860                           
  1861                           ;main.c: 426: {
  1862                           ;main.c: 427: lockTime = 0;
  1863  0440  01AD               	clrf	_lockTime
  1864                           
  1865                           ;main.c: 428: startLockFlag = 0;
  1866  0441  01CF               	clrf	_startLockFlag
  1867  0442  0008               	return
  1868  0443                     __end_of_keyCtr:	
  1869                           
  1870                           	psect	text9
  1871  0390                     __ptext9:	
  1872 ;; *************** function _chrgCtr *****************
  1873 ;; Defined at:
  1874 ;;		line 320 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;		None
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;		None
  1879 ;; Return value:  Size  Location     Type
  1880 ;;                  1    wreg      void 
  1881 ;; Registers used:
  1882 ;;		wreg, status,2, status,0
  1883 ;; Tracked objects:
  1884 ;;		On entry : 100/0
  1885 ;;		On exit  : 100/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMMON   BANK0   BANK1
  1888 ;;      Params:         0       0       0
  1889 ;;      Locals:         0       0       0
  1890 ;;      Temps:          0       0       0
  1891 ;;      Totals:         0       0       0
  1892 ;;Total ram usage:        0 bytes
  1893 ;; Hardware stack levels used:    1
  1894 ;; Hardware stack levels required when called:    2
  1895 ;; This function calls:
  1896 ;;		Nothing
  1897 ;; This function is called by:
  1898 ;;		_main
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           
  1903                           ;psect for function _chrgCtr
  1904  0390                     _chrgCtr:	
  1905                           
  1906                           ;main.c: 322: if(PORTB & 0x01)
  1907                           
  1908                           ;incstack = 0
  1909                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  1910  0390  1C06               	btfss	6,0	;volatile
  1911  0391  2BAD               	goto	l2124
  1912                           
  1913                           ;main.c: 323: {
  1914                           ;main.c: 324: chrgFlag = 1;
  1915  0392  01FA               	clrf	_chrgFlag
  1916  0393  0AFA               	incf	_chrgFlag,f
  1917                           
  1918                           ;main.c: 325: startLockFlag = 1;
  1919  0394  01CF               	clrf	_startLockFlag
  1920  0395  0ACF               	incf	_startLockFlag,f
  1921                           
  1922                           ;main.c: 326: workStep = 0;
  1923  0396  01B6               	clrf	_workStep
  1924                           
  1925                           ;main.c: 327: lowBatFlag = 0;
  1926  0397  01B2               	clrf	_lowBatFlag
  1927                           
  1928                           ;main.c: 328: if(showBatStep == 0)
  1929  0398  0879               	movf	_showBatStep,w
  1930  0399  1D03               	btfss	3,2
  1931  039A  2B9D               	goto	l680
  1932                           
  1933                           ;main.c: 329: {
  1934                           ;main.c: 330: showBatStep = 1;
  1935  039B  01F9               	clrf	_showBatStep
  1936  039C  0AF9               	incf	_showBatStep,f
  1937  039D                     l680:	
  1938                           
  1939                           ;main.c: 331: }
  1940                           ;main.c: 332: if(PORTA & 0x01)
  1941  039D  1683               	bsf	3,5	;RP0=1, select bank1
  1942  039E  1C06               	btfss	6,0	;volatile
  1943  039F  2BA3               	goto	l2118
  1944                           
  1945                           ;main.c: 333: {
  1946                           ;main.c: 334: chrgFullTime = 0;
  1947  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  1948  03A1  01B7               	clrf	_chrgFullTime
  1949                           
  1950                           ;main.c: 335: }
  1951  03A2  0008               	return
  1952  03A3                     l2118:	
  1953                           
  1954                           ;main.c: 336: else
  1955                           ;main.c: 337: {
  1956                           ;main.c: 338: if(++chrgFullTime >= 200)
  1957  03A3  30C8               	movlw	200
  1958  03A4  1283               	bcf	3,5	;RP0=0, select bank0
  1959  03A5  0AB7               	incf	_chrgFullTime,f
  1960  03A6  0237               	subwf	_chrgFullTime,w
  1961  03A7  1C03               	skipc
  1962  03A8  0008               	return
  1963                           
  1964                           ;main.c: 339: {
  1965                           ;main.c: 340: chrgFullTime = 0;
  1966  03A9  01B7               	clrf	_chrgFullTime
  1967                           
  1968                           ;main.c: 341: chrgFullFlag = 1;
  1969  03AA  01B9               	clrf	_chrgFullFlag
  1970  03AB  0AB9               	incf	_chrgFullFlag,f
  1971  03AC  0008               	return
  1972  03AD                     l2124:	
  1973  03AD  3006               	movlw	6
  1974                           
  1975                           ;main.c: 345: else
  1976                           ;main.c: 346: {
  1977                           ;main.c: 347: chrgFlag = 0;
  1978  03AE  01FA               	clrf	_chrgFlag
  1979                           
  1980                           ;main.c: 348: chrgFullFlag = 0;
  1981  03AF  01B9               	clrf	_chrgFullFlag
  1982                           
  1983                           ;main.c: 349: chrgFullTime = 0;
  1984  03B0  01B7               	clrf	_chrgFullTime
  1985                           
  1986                           ;main.c: 350: if(power_ad < 1650)
  1987  03B1  0278               	subwf	_power_ad+1,w	;volatile
  1988  03B2  3072               	movlw	114
  1989  03B3  1903               	skipnz
  1990  03B4  0277               	subwf	_power_ad,w	;volatile
  1991  03B5  1803               	skipnc
  1992  03B6  2BC2               	goto	l2134
  1993                           
  1994                           ;main.c: 351: {
  1995                           ;main.c: 352: if(++lowBatTime > 200)
  1996  03B7  30C9               	movlw	201
  1997  03B8  0AAE               	incf	_lowBatTime,f
  1998  03B9  022E               	subwf	_lowBatTime,w
  1999  03BA  1C03               	skipc
  2000  03BB  0008               	return
  2001                           
  2002                           ;main.c: 353: {
  2003                           ;main.c: 354: lowBatTime = 0;
  2004  03BC  01AE               	clrf	_lowBatTime
  2005                           
  2006                           ;main.c: 355: lowBatFlag = 1;
  2007  03BD  01B2               	clrf	_lowBatFlag
  2008  03BE  0AB2               	incf	_lowBatFlag,f
  2009                           
  2010                           ;main.c: 356: workStep = 0;
  2011  03BF  01B6               	clrf	_workStep
  2012                           
  2013                           ;main.c: 357: showBatStep = 0;
  2014  03C0  01F9               	clrf	_showBatStep
  2015  03C1  0008               	return
  2016  03C2                     l2134:	
  2017                           
  2018                           ;main.c: 360: else
  2019                           ;main.c: 361: {
  2020                           ;main.c: 362: lowBatTime = 0;
  2021  03C2  01AE               	clrf	_lowBatTime
  2022  03C3  0008               	return
  2023  03C4                     __end_of_chrgCtr:	
  2024                           
  2025                           	psect	text10
  2026  0478                     __ptext10:	
  2027 ;; *************** function _checkOutAD *****************
  2028 ;; Defined at:
  2029 ;;		line 690 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2030 ;; Parameters:    Size  Location     Type
  2031 ;;		None
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;  power_temp      4    0        volatile unsigned long 
  2034 ;; Return value:  Size  Location     Type
  2035 ;;                  1    wreg      void 
  2036 ;; Registers used:
  2037 ;;		wreg, status,2, status,0, pclath, cstack
  2038 ;; Tracked objects:
  2039 ;;		On entry : 100/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMMON   BANK0   BANK1
  2043 ;;      Params:         0       0       0
  2044 ;;      Locals:         0       0       0
  2045 ;;      Temps:          1       0       0
  2046 ;;      Totals:         1       0       0
  2047 ;;Total ram usage:        1 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; Hardware stack levels required when called:    3
  2050 ;; This function calls:
  2051 ;;		_ADC_Sample
  2052 ;; This function is called by:
  2053 ;;		_main
  2054 ;; This function uses a non-reentrant model
  2055 ;;
  2056                           
  2057                           
  2058                           ;psect for function _checkOutAD
  2059  0478                     _checkOutAD:	
  2060                           
  2061                           ;main.c: 692: test_adc = ADC_Sample(13, 5);
  2062                           
  2063                           ;incstack = 0
  2064                           ; Regs used in _checkOutAD: [wreg+status,2+status,0+pclath+cstack]
  2065  0478  3005               	movlw	5
  2066  0479  00F3               	movwf	ADC_Sample@adldo
  2067  047A  300D               	movlw	13
  2068  047B  2018               	fcall	_ADC_Sample
  2069  047C  00BD               	movwf	_test_adc	;volatile
  2070                           
  2071                           ;main.c: 693: if (0xA5 == test_adc)
  2072  047D  30A5               	movlw	165
  2073  047E  063D               	xorwf	_test_adc,w	;volatile
  2074  047F  1D03               	btfss	3,2
  2075  0480  2C86               	goto	l2862
  2076                           
  2077                           ;main.c: 694: {
  2078                           ;main.c: 695: volatile unsigned long power_temp;
  2079                           ;main.c: 697: out_ad = adresult;
  2080  0481  0829               	movf	_adresult+1,w	;volatile
  2081  0482  00A1               	movwf	_out_ad+1
  2082  0483  0828               	movf	_adresult,w	;volatile
  2083  0484  00A0               	movwf	_out_ad
  2084                           
  2085                           ;main.c: 698: }
  2086  0485  0008               	return
  2087  0486                     l2862:	
  2088                           
  2089                           ;main.c: 699: else
  2090                           ;main.c: 700: {
  2091                           ;main.c: 701: ADCON0 = 0;
  2092  0486  1683               	bsf	3,5	;RP0=1, select bank1
  2093  0487  0195               	clrf	21	;volatile
  2094                           
  2095                           ;main.c: 702: ADCON1 = 0;
  2096  0488  0196               	clrf	22	;volatile
  2097                           
  2098                           ;main.c: 703: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2099  0489  3085               	movlw	133
  2100  048A  00F4               	movwf	??_checkOutAD
  2101  048B                     u3307:	
  2102  048B  0BF4               	decfsz	??_checkOutAD,f
  2103  048C  2C8B               	goto	u3307
  2104  048D  0008               	return
  2105  048E                     __end_of_checkOutAD:	
  2106                           
  2107                           	psect	text11
  2108  048E                     __ptext11:	
  2109 ;; *************** function _checkBatAD *****************
  2110 ;; Defined at:
  2111 ;;		line 672 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;		None
  2114 ;; Auto vars:     Size  Location     Type
  2115 ;;  power_temp      4    0        volatile unsigned long 
  2116 ;; Return value:  Size  Location     Type
  2117 ;;                  1    wreg      void 
  2118 ;; Registers used:
  2119 ;;		wreg, status,2, status,0, pclath, cstack
  2120 ;; Tracked objects:
  2121 ;;		On entry : 100/0
  2122 ;;		On exit  : 0/0
  2123 ;;		Unchanged: 0/0
  2124 ;; Data sizes:     COMMON   BANK0   BANK1
  2125 ;;      Params:         0       0       0
  2126 ;;      Locals:         0       0       0
  2127 ;;      Temps:          1       0       0
  2128 ;;      Totals:         1       0       0
  2129 ;;Total ram usage:        1 bytes
  2130 ;; Hardware stack levels used:    1
  2131 ;; Hardware stack levels required when called:    3
  2132 ;; This function calls:
  2133 ;;		_ADC_Sample
  2134 ;; This function is called by:
  2135 ;;		_main
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           
  2140                           ;psect for function _checkBatAD
  2141  048E                     _checkBatAD:	
  2142                           
  2143                           ;main.c: 674: test_adc = ADC_Sample(12, 5);
  2144                           
  2145                           ;incstack = 0
  2146                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2147  048E  3005               	movlw	5
  2148  048F  00F3               	movwf	ADC_Sample@adldo
  2149  0490  300C               	movlw	12
  2150  0491  2018               	fcall	_ADC_Sample
  2151  0492  00BD               	movwf	_test_adc	;volatile
  2152                           
  2153                           ;main.c: 675: if (0xA5 == test_adc)
  2154  0493  30A5               	movlw	165
  2155  0494  063D               	xorwf	_test_adc,w	;volatile
  2156  0495  1D03               	btfss	3,2
  2157  0496  2C9C               	goto	l2646
  2158                           
  2159                           ;main.c: 676: {
  2160                           ;main.c: 677: volatile unsigned long power_temp;
  2161                           ;main.c: 679: power_ad = adresult;
  2162  0497  0829               	movf	_adresult+1,w	;volatile
  2163  0498  00F8               	movwf	_power_ad+1	;volatile
  2164  0499  0828               	movf	_adresult,w	;volatile
  2165  049A  00F7               	movwf	_power_ad	;volatile
  2166                           
  2167                           ;main.c: 680: }
  2168  049B  0008               	return
  2169  049C                     l2646:	
  2170                           
  2171                           ;main.c: 681: else
  2172                           ;main.c: 682: {
  2173                           ;main.c: 683: ADCON0 = 0;
  2174  049C  1683               	bsf	3,5	;RP0=1, select bank1
  2175  049D  0195               	clrf	21	;volatile
  2176                           
  2177                           ;main.c: 684: ADCON1 = 0;
  2178  049E  0196               	clrf	22	;volatile
  2179                           
  2180                           ;main.c: 685: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2181  049F  3085               	movlw	133
  2182  04A0  00F4               	movwf	??_checkBatAD
  2183  04A1                     u3317:	
  2184  04A1  0BF4               	decfsz	??_checkBatAD,f
  2185  04A2  2CA1               	goto	u3317
  2186  04A3  0008               	return
  2187  04A4                     __end_of_checkBatAD:	
  2188                           
  2189                           	psect	text12
  2190  0018                     __ptext12:	
  2191 ;; *************** function _ADC_Sample *****************
  2192 ;; Defined at:
  2193 ;;		line 918 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;  adch            1    wreg     unsigned char 
  2196 ;;  adldo           1    3[COMMON] unsigned char 
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;  adch            1    5[BANK0 ] unsigned char 
  2199 ;;  j               1    4[BANK0 ] unsigned char 
  2200 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  2201 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  2202 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  2203 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  2204 ;;  i               1    6[BANK0 ] unsigned char 
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  1    wreg      unsigned char 
  2207 ;; Registers used:
  2208 ;;		wreg, status,2, status,0
  2209 ;; Tracked objects:
  2210 ;;		On entry : 100/0
  2211 ;;		On exit  : 100/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMMON   BANK0   BANK1
  2214 ;;      Params:         1       0       0
  2215 ;;      Locals:         0      13       0
  2216 ;;      Temps:          0       4       0
  2217 ;;      Totals:         1      17       0
  2218 ;;Total ram usage:       18 bytes
  2219 ;; Hardware stack levels used:    1
  2220 ;; Hardware stack levels required when called:    2
  2221 ;; This function calls:
  2222 ;;		Nothing
  2223 ;; This function is called by:
  2224 ;;		_checkBatAD
  2225 ;;		_checkOutAD
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           
  2230                           ;psect for function _ADC_Sample
  2231  0018                     _ADC_Sample:	
  2232                           
  2233                           ;incstack = 0
  2234                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2235                           ;ADC_Sample@adch stored from wreg
  2236  0018  00C3               	movwf	ADC_Sample@adch
  2237                           
  2238                           ;main.c: 920: volatile unsigned long adsum = 0;
  2239                           
  2240                           ;main.c: 921: volatile unsigned int admin = 0, admax = 0;
  2241  0019  20F2               	fcall	PL4	;call to abstracted procedure
  2242                           
  2243                           ;main.c: 922: volatile unsigned int ad_temp = 0;
  2244  001A  01CD               	clrf	ADC_Sample@ad_temp	;volatile
  2245  001B  01CE               	clrf	ADC_Sample@ad_temp+1	;volatile
  2246                           
  2247                           ;main.c: 924: if ((!LDO_EN) && (adldo & 0x04) )
  2248  001C  1683               	bsf	3,5	;RP0=1, select bank1
  2249  001D  1D16               	btfss	22,2	;volatile
  2250  001E  1D73               	btfss	ADC_Sample@adldo,2
  2251  001F  2829               	goto	l2534
  2252                           
  2253                           ;main.c: 925: {
  2254                           ;main.c: 927: ADCON1 = adldo;
  2255  0020  0873               	movf	ADC_Sample@adldo,w
  2256  0021  0096               	movwf	22	;volatile
  2257                           
  2258                           ;main.c: 928: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2259  0022  3084               	movlw	132
  2260  0023  1283               	bcf	3,5	;RP0=0, select bank0
  2261  0024  00BE               	movwf	??_ADC_Sample
  2262  0025                     u3327:	
  2263  0025  0BBE               	decfsz	??_ADC_Sample,f
  2264  0026  2825               	goto	u3327
  2265  0027  2828               	nop2
  2266                           
  2267                           ;main.c: 929: }
  2268  0028  282B               	goto	l2536
  2269  0029                     l2534:	
  2270                           
  2271                           ;main.c: 930: else
  2272                           ;main.c: 931: ADCON1 = adldo;
  2273  0029  0873               	movf	ADC_Sample@adldo,w
  2274  002A  0096               	movwf	22	;volatile
  2275  002B                     l2536:	
  2276                           
  2277                           ;main.c: 933: if(adch & 0x10)
  2278  002B  1283               	bcf	3,5	;RP0=0, select bank0
  2279  002C  1E43               	btfss	ADC_Sample@adch,4
  2280  002D  2833               	goto	l2544
  2281                           
  2282                           ;main.c: 934: {
  2283                           ;main.c: 935: CHS4 = 1;
  2284  002E  1683               	bsf	3,5	;RP0=1, select bank1
  2285  002F  1716               	bsf	22,6	;volatile
  2286                           
  2287                           ;main.c: 936: adch &= 0x0f;
  2288  0030  300F               	movlw	15
  2289  0031  1283               	bcf	3,5	;RP0=0, select bank0
  2290  0032  05C3               	andwf	ADC_Sample@adch,f
  2291  0033                     l2544:	
  2292                           
  2293                           ;main.c: 939: for (i = 0; i < 10; i++)
  2294  0033  01C4               	clrf	ADC_Sample@i
  2295  0034                     l2550:	
  2296                           
  2297                           ;main.c: 940: {
  2298                           ;main.c: 941: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2299  0034  0843               	movf	ADC_Sample@adch,w
  2300  0035  00BE               	movwf	??_ADC_Sample
  2301  0036  3001               	movlw	1
  2302  0037  1003               	clrc
  2303  0038                     L8:	
  2304  0038  0DBE               	rlf	??_ADC_Sample,f
  2305  0039  3EFF               	addlw	-1
  2306  003A  1003               	clrc
  2307  003B  1D03               	skipz
  2308  003C  2838               	goto	L8
  2309  003D  0D3E               	rlf	??_ADC_Sample,w
  2310  003E  3841               	iorlw	65
  2311  003F  1683               	bsf	3,5	;RP0=1, select bank1
  2312  0040  0095               	movwf	21	;volatile
  2313  0041  0000               	nop	;# 
  2314  0042  0000               	nop	;# 
  2315  0043  0000               	nop	;# 
  2316  0044  0000               	nop	;# 
  2317                           
  2318                           ;main.c: 946: GODONE = 1;
  2319  0045  1683               	bsf	3,5	;RP0=1, select bank1
  2320  0046  1495               	bsf	21,1	;volatile
  2321                           
  2322                           ;main.c: 948: unsigned char j = 0;
  2323  0047  1283               	bcf	3,5	;RP0=0, select bank0
  2324  0048  01C2               	clrf	ADC_Sample@j
  2325  0049                     l813:	
  2326                           ;main.c: 949: while (GODONE)
  2327                           
  2328  0049  1683               	bsf	3,5	;RP0=1, select bank1
  2329  004A  1C95               	btfss	21,1	;volatile
  2330  004B  2854               	goto	l2560
  2331                           
  2332                           ;main.c: 950: {
  2333                           ;main.c: 951: _delay((unsigned long)((2)*(16000000/4000000.0)));
  2334  004C  284D               	nop2	;2 cycle nop
  2335  004D  284E               	nop2	;2 cycle nop
  2336  004E  284F               	nop2	;2 cycle nop
  2337  004F  2850               	nop2	;2 cycle nop
  2338                           
  2339                           ;main.c: 953: if (0 == (--j))
  2340  0050  1283               	bcf	3,5	;RP0=0, select bank0
  2341  0051  0BC2               	decfsz	ADC_Sample@j,f
  2342  0052  2849               	goto	l813
  2343                           
  2344                           ;main.c: 954: return 0;
  2345  0053  3400               	retlw	0
  2346  0054                     l2560:	
  2347                           
  2348                           ;main.c: 955: }
  2349                           ;main.c: 957: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2350  0054  0819               	movf	25,w	;volatile
  2351  0055  1283               	bcf	3,5	;RP0=0, select bank0
  2352  0056  00CD               	movwf	ADC_Sample@ad_temp	;volatile
  2353  0057  01CE               	clrf	ADC_Sample@ad_temp+1	;volatile
  2354  0058  0ECD               	swapf	ADC_Sample@ad_temp,f	;volatile
  2355  0059  0ECE               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2356  005A  30F0               	movlw	240
  2357  005B  05CE               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2358  005C  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  2359  005D  390F               	andlw	15
  2360  005E  04CE               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2361  005F  30F0               	movlw	240
  2362  0060  05CD               	andwf	ADC_Sample@ad_temp,f	;volatile
  2363  0061  1683               	bsf	3,5	;RP0=1, select bank1
  2364  0062  0E18               	swapf	24,w	;volatile
  2365  0063  390F               	andlw	15
  2366  0064  1283               	bcf	3,5	;RP0=0, select bank0
  2367  0065  07CD               	addwf	ADC_Sample@ad_temp,f	;volatile
  2368  0066  1803               	skipnc
  2369  0067  0ACE               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2370                           
  2371                           ;main.c: 959: if (0 == admax)
  2372  0068  084B               	movf	ADC_Sample@admax,w	;volatile
  2373  0069  044C               	iorwf	ADC_Sample@admax+1,w	;volatile
  2374  006A  1D03               	btfss	3,2
  2375  006B  286E               	goto	l2568
  2376                           
  2377                           ;main.c: 960: {
  2378                           ;main.c: 961: admax = ad_temp;
  2379  006C  20FB               	fcall	PL12	;call to abstracted procedure
  2380  006D  2880               	goto	l2574
  2381  006E                     l2568:	
  2382                           ;main.c: 963: }
  2383                           
  2384                           ;main.c: 962: admin = ad_temp;
  2385                           
  2386                           
  2387                           ;main.c: 964: else if (ad_temp > admax)
  2388  006E  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2389  006F  024C               	subwf	ADC_Sample@admax+1,w	;volatile
  2390  0070  1D03               	skipz
  2391  0071  2874               	goto	u2525
  2392  0072  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  2393  0073  024B               	subwf	ADC_Sample@admax,w	;volatile
  2394  0074                     u2525:	
  2395  0074  1803               	skipnc
  2396  0075  2878               	goto	l2572
  2397                           
  2398                           ;main.c: 965: admax = ad_temp;
  2399  0076  20FB               	fcall	PL12	;call to abstracted procedure
  2400  0077  2884               	goto	l819
  2401  0078                     l2572:	
  2402                           
  2403                           ;main.c: 966: else if (ad_temp < admin)
  2404  0078  084A               	movf	ADC_Sample@admin+1,w	;volatile
  2405  0079  024E               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2406  007A  1D03               	skipz
  2407  007B  287E               	goto	u2535
  2408  007C  0849               	movf	ADC_Sample@admin,w	;volatile
  2409  007D  024D               	subwf	ADC_Sample@ad_temp,w	;volatile
  2410  007E                     u2535:	
  2411  007E  1803               	skipnc
  2412  007F  2884               	goto	l819
  2413  0080                     l2574:	
  2414                           
  2415                           ;main.c: 967: admin = ad_temp;
  2416  0080  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2417  0081  00CA               	movwf	ADC_Sample@admin+1	;volatile
  2418  0082  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  2419  0083  00C9               	movwf	ADC_Sample@admin	;volatile
  2420  0084                     l819:	
  2421                           
  2422                           ;main.c: 969: adsum += ad_temp;
  2423  0084  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  2424  0085  00BE               	movwf	??_ADC_Sample
  2425  0086  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2426  0087  00BF               	movwf	??_ADC_Sample+1
  2427  0088  01C0               	clrf	??_ADC_Sample+2
  2428  0089  01C1               	clrf	??_ADC_Sample+3
  2429  008A  083E               	movf	??_ADC_Sample,w
  2430  008B  07C5               	addwf	ADC_Sample@adsum,f	;volatile
  2431  008C  083F               	movf	??_ADC_Sample+1,w
  2432  008D  1103               	clrz
  2433  008E  1803               	skipnc
  2434  008F  3E01               	addlw	1
  2435  0090  1D03               	btfss	3,2
  2436  0091  07C6               	addwf	ADC_Sample@adsum+1,f	;volatile
  2437  0092  0840               	movf	??_ADC_Sample+2,w
  2438  0093  1103               	clrz
  2439  0094  1803               	skipnc
  2440  0095  3E01               	addlw	1
  2441  0096  1D03               	btfss	3,2
  2442  0097  07C7               	addwf	ADC_Sample@adsum+2,f	;volatile
  2443  0098  0841               	movf	??_ADC_Sample+3,w
  2444  0099  1103               	clrz
  2445  009A  1803               	skipnc
  2446  009B  3E01               	addlw	1
  2447  009C  1D03               	btfss	3,2
  2448  009D  07C8               	addwf	ADC_Sample@adsum+3,f	;volatile
  2449  009E  300A               	movlw	10
  2450  009F  0AC4               	incf	ADC_Sample@i,f
  2451  00A0  0244               	subwf	ADC_Sample@i,w
  2452  00A1  1C03               	skipc
  2453  00A2  2834               	goto	l2550
  2454                           
  2455                           ;main.c: 970: }
  2456                           ;main.c: 971: adsum -= admax;
  2457  00A3  084B               	movf	ADC_Sample@admax,w	;volatile
  2458  00A4  00BE               	movwf	??_ADC_Sample
  2459  00A5  084C               	movf	ADC_Sample@admax+1,w	;volatile
  2460  00A6  20E3               	fcall	PL2	;call to abstracted procedure
  2461  00A7  1C03               	skipc
  2462  00A8  0F41               	incfsz	??_ADC_Sample+3,w
  2463  00A9  02C8               	subwf	ADC_Sample@adsum+3,f	;volatile
  2464                           
  2465                           ;main.c: 972: if (adsum >= admin)
  2466  00AA  0849               	movf	ADC_Sample@admin,w	;volatile
  2467  00AB  00BE               	movwf	??_ADC_Sample
  2468  00AC  084A               	movf	ADC_Sample@admin+1,w	;volatile
  2469  00AD  00BF               	movwf	??_ADC_Sample+1
  2470  00AE  01C0               	clrf	??_ADC_Sample+2
  2471  00AF  01C1               	clrf	??_ADC_Sample+3
  2472  00B0  0841               	movf	??_ADC_Sample+3,w
  2473  00B1  0248               	subwf	ADC_Sample@adsum+3,w	;volatile
  2474  00B2  1D03               	skipz
  2475  00B3  28BE               	goto	u2575
  2476  00B4  0840               	movf	??_ADC_Sample+2,w
  2477  00B5  0247               	subwf	ADC_Sample@adsum+2,w	;volatile
  2478  00B6  1D03               	skipz
  2479  00B7  28BE               	goto	u2575
  2480  00B8  083F               	movf	??_ADC_Sample+1,w
  2481  00B9  0246               	subwf	ADC_Sample@adsum+1,w	;volatile
  2482  00BA  1D03               	skipz
  2483  00BB  28BE               	goto	u2575
  2484  00BC  083E               	movf	??_ADC_Sample,w
  2485  00BD  0245               	subwf	ADC_Sample@adsum,w	;volatile
  2486  00BE                     u2575:	
  2487  00BE  1C03               	skipc
  2488  00BF  28C8               	goto	l823
  2489                           
  2490                           ;main.c: 973: adsum -= admin;
  2491  00C0  0849               	movf	ADC_Sample@admin,w	;volatile
  2492  00C1  00BE               	movwf	??_ADC_Sample
  2493  00C2  084A               	movf	ADC_Sample@admin+1,w	;volatile
  2494  00C3  20E3               	fcall	PL2	;call to abstracted procedure
  2495  00C4  1C03               	skipc
  2496  00C5  0F41               	incfsz	??_ADC_Sample+3,w
  2497  00C6  02C8               	subwf	ADC_Sample@adsum+3,f	;volatile
  2498  00C7  28CC               	goto	l2584
  2499  00C8                     l823:	
  2500                           
  2501                           ;main.c: 974: else
  2502                           ;main.c: 975: adsum = 0;
  2503  00C8  01C5               	clrf	ADC_Sample@adsum	;volatile
  2504  00C9  01C6               	clrf	ADC_Sample@adsum+1	;volatile
  2505  00CA  01C7               	clrf	ADC_Sample@adsum+2	;volatile
  2506  00CB  01C8               	clrf	ADC_Sample@adsum+3	;volatile
  2507  00CC                     l2584:	
  2508                           
  2509                           ;main.c: 977: adresult = adsum >> 3;
  2510  00CC  0845               	movf	ADC_Sample@adsum,w	;volatile
  2511  00CD  00BE               	movwf	??_ADC_Sample
  2512  00CE  0846               	movf	ADC_Sample@adsum+1,w	;volatile
  2513  00CF  00BF               	movwf	??_ADC_Sample+1
  2514  00D0  0847               	movf	ADC_Sample@adsum+2,w	;volatile
  2515  00D1  00C0               	movwf	??_ADC_Sample+2
  2516  00D2  0848               	movf	ADC_Sample@adsum+3,w	;volatile
  2517  00D3  00C1               	movwf	??_ADC_Sample+3
  2518  00D4  3003               	movlw	3
  2519  00D5                     u2595:	
  2520  00D5  1003               	clrc
  2521  00D6  0CC1               	rrf	??_ADC_Sample+3,f
  2522  00D7  0CC0               	rrf	??_ADC_Sample+2,f
  2523  00D8  0CBF               	rrf	??_ADC_Sample+1,f
  2524  00D9  0CBE               	rrf	??_ADC_Sample,f
  2525  00DA  3EFF               	addlw	-1
  2526  00DB  1D03               	skipz
  2527  00DC  28D5               	goto	u2595
  2528  00DD  083F               	movf	??_ADC_Sample+1,w
  2529  00DE  00A9               	movwf	_adresult+1	;volatile
  2530  00DF  083E               	movf	??_ADC_Sample,w
  2531  00E0  00A8               	movwf	_adresult	;volatile
  2532                           
  2533                           ;main.c: 979: adsum = 0;
  2534                           
  2535                           ;main.c: 980: admin = 0;
  2536                           
  2537                           ;main.c: 981: admax = 0;
  2538  00E1  20F2               	fcall	PL4	;call to abstracted procedure
  2539                           
  2540                           ;main.c: 982: return 0xA5;
  2541  00E2  34A5               	retlw	165
  2542  00E3                     __end_of_ADC_Sample:	
  2543  00E3                     PL2:	
  2544  00E3  00BF               	movwf	??_ADC_Sample+1
  2545  00E4  01C0               	clrf	??_ADC_Sample+2
  2546  00E5  01C1               	clrf	??_ADC_Sample+3
  2547  00E6  083E               	movf	??_ADC_Sample,w
  2548  00E7  02C5               	subwf	ADC_Sample@adsum,f	;volatile
  2549  00E8  083F               	movf	??_ADC_Sample+1,w
  2550  00E9  1C03               	skipc
  2551  00EA  0F3F               	incfsz	??_ADC_Sample+1,w
  2552  00EB  02C6               	subwf	ADC_Sample@adsum+1,f	;volatile
  2553  00EC  0840               	movf	??_ADC_Sample+2,w
  2554  00ED  1C03               	skipc
  2555  00EE  0F40               	incfsz	??_ADC_Sample+2,w
  2556  00EF  02C7               	subwf	ADC_Sample@adsum+2,f	;volatile
  2557  00F0  0841               	movf	??_ADC_Sample+3,w
  2558  00F1  0008               	return
  2559  00F2                     __end_ofPL2:	
  2560  00F2                     PL4:	
  2561  00F2  01C5               	clrf	ADC_Sample@adsum	;volatile
  2562  00F3  01C6               	clrf	ADC_Sample@adsum+1	;volatile
  2563  00F4  01C7               	clrf	ADC_Sample@adsum+2	;volatile
  2564  00F5  01C8               	clrf	ADC_Sample@adsum+3	;volatile
  2565  00F6  01C9               	clrf	ADC_Sample@admin	;volatile
  2566  00F7  01CA               	clrf	ADC_Sample@admin+1	;volatile
  2567  00F8  01CB               	clrf	ADC_Sample@admax	;volatile
  2568  00F9  01CC               	clrf	ADC_Sample@admax+1	;volatile
  2569  00FA  0008               	return
  2570  00FB                     __end_ofPL4:	
  2571  00FB                     PL12:	
  2572  00FB  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2573  00FC  00CC               	movwf	ADC_Sample@admax+1	;volatile
  2574  00FD  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  2575  00FE  00CB               	movwf	ADC_Sample@admax	;volatile
  2576  00FF  0008               	return
  2577  0100                     __end_ofPL12:	
  2578                           
  2579                           	psect	text13
  2580  030F                     __ptext13:	
  2581 ;; *************** function _Sleep_Mode *****************
  2582 ;; Defined at:
  2583 ;;		line 841 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;		None
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;		None
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  1    wreg      void 
  2590 ;; Registers used:
  2591 ;;		wreg, status,2, status,0, pclath, cstack
  2592 ;; Tracked objects:
  2593 ;;		On entry : 100/0
  2594 ;;		On exit  : 100/100
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMMON   BANK0   BANK1
  2597 ;;      Params:         0       0       0
  2598 ;;      Locals:         0       0       0
  2599 ;;      Temps:          0       0       0
  2600 ;;      Totals:         0       0       0
  2601 ;;Total ram usage:        0 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:    3
  2604 ;; This function calls:
  2605 ;;		_AD_Init
  2606 ;;		_Init_System
  2607 ;; This function is called by:
  2608 ;;		_main
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           
  2613                           ;psect for function _Sleep_Mode
  2614  030F                     _Sleep_Mode:	
  2615                           
  2616                           ;main.c: 843: INTCON = 0;
  2617                           
  2618                           ;incstack = 0
  2619                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  2620  030F  018B               	clrf	11	;volatile
  2621                           
  2622                           ;main.c: 845: OPTION_REG = 0;
  2623  0310  0181               	clrf	1	;volatile
  2624                           
  2625                           ;main.c: 847: WPUA = 0x00;
  2626  0311  1683               	bsf	3,5	;RP0=1, select bank1
  2627  0312  0188               	clrf	8	;volatile
  2628                           
  2629                           ;main.c: 848: TRISA = 0x01;
  2630  0313  3001               	movlw	1
  2631                           
  2632                           ;main.c: 849: TRISB = 0x37;
  2633                           
  2634                           ;main.c: 851: PORTA = 0X00;
  2635                           
  2636                           ;main.c: 852: PORTB = 0X00;
  2637  0314  2348               	fcall	PL6	;call to abstracted procedure
  2638                           
  2639                           ;main.c: 853: WPUB = 0x04;
  2640  0315  3004               	movlw	4
  2641  0316  0088               	movwf	8	;volatile
  2642                           
  2643                           ;main.c: 855: ADCON0 = 0;
  2644  0317  1683               	bsf	3,5	;RP0=1, select bank1
  2645  0318  0195               	clrf	21	;volatile
  2646                           
  2647                           ;main.c: 856: ADCON1 = 0;
  2648  0319  0196               	clrf	22	;volatile
  2649                           
  2650                           ;main.c: 858: PWMCON0 = 0;
  2651  031A  1283               	bcf	3,5	;RP0=0, select bank0
  2652  031B  0195               	clrf	21	;volatile
  2653                           
  2654                           ;main.c: 860: OSCCON = 0X70;
  2655  031C  3070               	movlw	112
  2656  031D  0094               	movwf	20	;volatile
  2657                           
  2658                           ;main.c: 862: IOCA = 0B00000000;
  2659  031E  1683               	bsf	3,5	;RP0=1, select bank1
  2660  031F  0189               	clrf	9	;volatile
  2661                           
  2662                           ;main.c: 863: IOCB = 0x07;
  2663  0320  3007               	movlw	7
  2664  0321  1283               	bcf	3,5	;RP0=0, select bank0
  2665  0322  0089               	movwf	9	;volatile
  2666                           
  2667                           ;main.c: 865: RAIE = 1;
  2668  0323  158E               	bsf	14,3	;volatile
  2669                           
  2670                           ;main.c: 866: PEIE = 1;
  2671  0324  170B               	bsf	11,6	;volatile
  2672                           
  2673                           ;main.c: 867: RBIE = 1;
  2674  0325  158B               	bsf	11,3	;volatile
  2675                           
  2676                           ;main.c: 868: GIE = 0;
  2677  0326  138B               	bcf	11,7	;volatile
  2678                           
  2679                           ;main.c: 870: PIE1 &= 0X08;
  2680  0327  3008               	movlw	8
  2681  0328  058E               	andwf	14,f	;volatile
  2682                           
  2683                           ;main.c: 871: PIR1 = 0;
  2684  0329  018D               	clrf	13	;volatile
  2685                           
  2686                           ;main.c: 872: INTCON &= 0XC8;
  2687  032A  30C8               	movlw	200
  2688  032B  058B               	andwf	11,f	;volatile
  2689                           
  2690                           ;main.c: 874: PORTA;
  2691  032C  1683               	bsf	3,5	;RP0=1, select bank1
  2692  032D  0806               	movf	6,w	;volatile
  2693                           
  2694                           ;main.c: 875: RAIF = 0;
  2695  032E  1283               	bcf	3,5	;RP0=0, select bank0
  2696  032F  118D               	bcf	13,3	;volatile
  2697                           
  2698                           ;main.c: 876: PORTB;
  2699  0330  0806               	movf	6,w	;volatile
  2700                           
  2701                           ;main.c: 877: RBIF = 0;
  2702  0331  100B               	bcf	11,0	;volatile
  2703  0332  0064               	clrwdt	;# 
  2704  0333  0063               	sleep	;# 
  2705  0334  0000               	nop	;# 
  2706  0335  0064               	clrwdt	;# 
  2707  0336  0000               	nop	;# 
  2708  0337  0000               	nop	;# 
  2709  0338  0000               	nop	;# 
  2710  0339  0000               	nop	;# 
  2711  033A  0000               	nop	;# 
  2712                           
  2713                           ;main.c: 889: if(RAIF) RAIF = 0;
  2714  033B  1283               	bcf	3,5	;RP0=0, select bank0
  2715  033C  198D               	btfsc	13,3	;volatile
  2716  033D  118D               	bcf	13,3	;volatile
  2717                           
  2718                           ;main.c: 890: if(RBIF) RBIF = 0;
  2719  033E  180B               	btfsc	11,0	;volatile
  2720  033F  100B               	bcf	11,0	;volatile
  2721                           
  2722                           ;main.c: 891: if(TMR2IF) TMR2IF = 0;
  2723  0340  188D               	btfsc	13,1	;volatile
  2724  0341  108D               	bcf	13,1	;volatile
  2725                           
  2726                           ;main.c: 892: IOCA = 0B00000000;
  2727  0342  1683               	bsf	3,5	;RP0=1, select bank1
  2728  0343  0189               	clrf	9	;volatile
  2729                           
  2730                           ;main.c: 893: IOCB = 0B00000000;
  2731  0344  1283               	bcf	3,5	;RP0=0, select bank0
  2732  0345  0189               	clrf	9	;volatile
  2733                           
  2734                           ;main.c: 894: Init_System();
  2735  0346  245E               	fcall	_Init_System
  2736                           
  2737                           ;main.c: 895: AD_Init();
  2738  0347  2CDC               	ljmp	l1896
  2739  0348                     __end_of_Sleep_Mode:	
  2740  0348                     PL6:	
  2741  0348  0085               	movwf	5	;volatile
  2742  0349  3037               	movlw	55
  2743  034A  1283               	bcf	3,5	;RP0=0, select bank0
  2744  034B  0085               	movwf	5	;volatile
  2745  034C  1683               	bsf	3,5	;RP0=1, select bank1
  2746  034D  0186               	clrf	6	;volatile
  2747  034E  1283               	bcf	3,5	;RP0=0, select bank0
  2748  034F  0186               	clrf	6	;volatile
  2749  0350  0008               	return
  2750  0351                     __end_ofPL6:	
  2751                           
  2752                           	psect	text14
  2753  045E                     __ptext14:	
  2754 ;; *************** function _Init_System *****************
  2755 ;; Defined at:
  2756 ;;		line 717 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;		None
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;		None
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  1    wreg      void 
  2763 ;; Registers used:
  2764 ;;		wreg, status,2
  2765 ;; Tracked objects:
  2766 ;;		On entry : 100/0
  2767 ;;		On exit  : 100/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMMON   BANK0   BANK1
  2770 ;;      Params:         0       0       0
  2771 ;;      Locals:         0       0       0
  2772 ;;      Temps:          0       0       0
  2773 ;;      Totals:         0       0       0
  2774 ;;Total ram usage:        0 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    2
  2777 ;; This function calls:
  2778 ;;		Nothing
  2779 ;; This function is called by:
  2780 ;;		_main
  2781 ;;		_Sleep_Mode
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           
  2786                           ;psect for function _Init_System
  2787  045E                     _Init_System:	
  2788                           
  2789                           ;incstack = 0
  2790                           ; Regs used in _Init_System: [wreg+status,2]
  2791  045E  0000               	nop	;# 
  2792  045F  0064               	clrwdt	;# 
  2793                           
  2794                           ;main.c: 721: OPTION_REG = 0;
  2795  0460  1283               	bcf	3,5	;RP0=0, select bank0
  2796  0461  0181               	clrf	1	;volatile
  2797  0462  0064               	clrwdt	;# 
  2798                           
  2799                           ;main.c: 723: OSCCON = 0X72;
  2800  0463  3072               	movlw	114
  2801  0464  1283               	bcf	3,5	;RP0=0, select bank0
  2802  0465  0094               	movwf	20	;volatile
  2803                           
  2804                           ;main.c: 725: WPUA = 0x00;
  2805  0466  1683               	bsf	3,5	;RP0=1, select bank1
  2806  0467  0188               	clrf	8	;volatile
  2807                           
  2808                           ;main.c: 726: WPDA = 0x00;
  2809  0468  0187               	clrf	7	;volatile
  2810                           
  2811                           ;main.c: 727: WPUB = 0x04;
  2812  0469  3004               	movlw	4
  2813  046A  1283               	bcf	3,5	;RP0=0, select bank0
  2814  046B  0088               	movwf	8	;volatile
  2815                           
  2816                           ;main.c: 729: TRISA = 0x01;
  2817  046C  3001               	movlw	1
  2818  046D  1683               	bsf	3,5	;RP0=1, select bank1
  2819                           
  2820                           ;main.c: 730: TRISB = 0x37;
  2821                           
  2822                           ;main.c: 732: PORTA = 0X00;
  2823                           
  2824                           ;main.c: 733: PORTB = 0X00;
  2825  046E  2348               	fcall	PL6	;call to abstracted procedure
  2826                           
  2827                           ;main.c: 737: PR2 = 249;
  2828  046F  30F9               	movlw	249
  2829  0470  0091               	movwf	17	;volatile
  2830                           
  2831                           ;main.c: 738: TMR2IF = 0;
  2832  0471  108D               	bcf	13,1	;volatile
  2833                           
  2834                           ;main.c: 739: TMR2IE = 1;
  2835  0472  148E               	bsf	14,1	;volatile
  2836                           
  2837                           ;main.c: 741: T2CON = 0B00000100;
  2838  0473  3004               	movlw	4
  2839  0474  0093               	movwf	19	;volatile
  2840                           
  2841                           ;main.c: 742: INTCON = 0XC0;
  2842  0475  30C0               	movlw	192
  2843  0476  008B               	movwf	11	;volatile
  2844  0477  0008               	return
  2845  0478                     __end_of_Init_System:	
  2846                           
  2847                           	psect	text15
  2848  04DC                     __ptext15:	
  2849 ;; *************** function _AD_Init *****************
  2850 ;; Defined at:
  2851 ;;		line 754 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;		None
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;		None
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  1    wreg      void 
  2858 ;; Registers used:
  2859 ;;		wreg, status,2
  2860 ;; Tracked objects:
  2861 ;;		On entry : 100/0
  2862 ;;		On exit  : 100/100
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMMON   BANK0   BANK1
  2865 ;;      Params:         0       0       0
  2866 ;;      Locals:         0       0       0
  2867 ;;      Temps:          0       0       0
  2868 ;;      Totals:         0       0       0
  2869 ;;Total ram usage:        0 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    2
  2872 ;; This function calls:
  2873 ;;		Nothing
  2874 ;; This function is called by:
  2875 ;;		_main
  2876 ;;		_Sleep_Mode
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           
  2881                           ;psect for function _AD_Init
  2882  04DC                     _AD_Init:	
  2883  04DC                     l1896:	
  2884                           ;incstack = 0
  2885                           ; Regs used in _AD_Init: [wreg+status,2]
  2886                           
  2887                           
  2888                           ;main.c: 787: ADCON0 = 0X41;
  2889  04DC  3041               	movlw	65
  2890  04DD  1683               	bsf	3,5	;RP0=1, select bank1
  2891  04DE  0095               	movwf	21	;volatile
  2892                           
  2893                           ;main.c: 804: ADCON1 = 0;
  2894  04DF  0196               	clrf	22	;volatile
  2895                           
  2896                           ;main.c: 805: ANSEL0 = 0X00;
  2897  04E0  0193               	clrf	19	;volatile
  2898                           
  2899                           ;main.c: 806: ANSEL1 = 0x30;
  2900  04E1  3030               	movlw	48
  2901  04E2  0094               	movwf	20	;volatile
  2902  04E3  0008               	return
  2903  04E4                     __end_of_AD_Init:	
  2904                           
  2905                           	psect	text16
  2906  03EE                     __ptext16:	
  2907 ;; *************** function _Isr_Timer *****************
  2908 ;; Defined at:
  2909 ;;		line 100 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;		None
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;		None
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 100/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMMON   BANK0   BANK1
  2923 ;;      Params:         0       0       0
  2924 ;;      Locals:         0       0       0
  2925 ;;      Temps:          3       0       0
  2926 ;;      Totals:         3       0       0
  2927 ;;Total ram usage:        3 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    1
  2930 ;; This function calls:
  2931 ;;		_ledShow
  2932 ;; This function is called by:
  2933 ;;		Interrupt level 1
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           
  2938                           ;psect for function _Isr_Timer
  2939  03EE                     _Isr_Timer:	
  2940                           
  2941                           ;main.c: 102: if(TMR2IF)
  2942  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  2943  03EF  1C8D               	btfss	13,1	;volatile
  2944  03F0  2C02               	goto	i1l626
  2945                           
  2946                           ;main.c: 103: {
  2947                           ;main.c: 104: TMR2IF = 0;
  2948  03F1  108D               	bcf	13,1	;volatile
  2949                           
  2950                           ;main.c: 105: if(++intCount >= 160)
  2951  03F2  30A0               	movlw	160
  2952  03F3  0ABC               	incf	_intCount,f
  2953  03F4  023C               	subwf	_intCount,w
  2954  03F5  1C03               	skipc
  2955  03F6  2BFF               	goto	i1l2446
  2956  03F7  3064               	movlw	100
  2957                           
  2958                           ;main.c: 106: {
  2959                           ;main.c: 107: intCount = 0;
  2960  03F8  01BC               	clrf	_intCount
  2961                           
  2962                           ;main.c: 108: IntFlag = 1;
  2963  03F9  01BA               	clrf	_IntFlag
  2964  03FA  0ABA               	incf	_IntFlag,f
  2965                           
  2966                           ;main.c: 109: if(++count1s >= 100)
  2967  03FB  0ABB               	incf	_count1s,f
  2968  03FC  023B               	subwf	_count1s,w
  2969  03FD  1803               	btfsc	3,0
  2970                           
  2971                           ;main.c: 110: {
  2972                           ;main.c: 111: count1s = 0;
  2973  03FE  01BB               	clrf	_count1s
  2974  03FF                     i1l2446:	
  2975                           
  2976                           ;main.c: 112: }
  2977                           ;main.c: 113: }
  2978                           ;main.c: 114: ledShow();
  2979  03FF  2281               	fcall	_ledShow
  2980                           
  2981                           ;main.c: 115: intCount10++;
  2982  0400  1283               	bcf	3,5	;RP0=0, select bank0
  2983  0401  0AB8               	incf	_intCount10,f
  2984  0402                     i1l626:	
  2985  0402  0872               	movf	??_Isr_Timer+2,w
  2986  0403  008A               	movwf	10
  2987  0404  0871               	movf	??_Isr_Timer+1,w
  2988  0405  0084               	movwf	4
  2989  0406  0E70               	swapf	??_Isr_Timer^(0+-128),w
  2990  0407  0083               	movwf	3
  2991  0408  0EFE               	swapf	126,f
  2992  0409  0E7E               	swapf	126,w
  2993  040A  0009               	retfie
  2994  040B                     __end_of_Isr_Timer:	
  2995                           
  2996                           	psect	intentry
  2997  0004                     __pintentry:	
  2998                           ;incstack = 0
  2999                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3000                           
  3001  0004                     interrupt_function:	
  3002  007E                     saved_w	set	btemp
  3003  0004  00FE               	movwf	btemp
  3004  0005  0E03               	swapf	3,w
  3005  0006  00F0               	movwf	??_Isr_Timer
  3006  0007  0804               	movf	4,w
  3007  0008  00F1               	movwf	??_Isr_Timer+1
  3008  0009  080A               	movf	10,w
  3009  000A  00F2               	movwf	??_Isr_Timer+2
  3010  000B  2BEE               	ljmp	_Isr_Timer
  3011                           
  3012                           	psect	text17
  3013  0281                     __ptext17:	
  3014 ;; *************** function _ledShow *****************
  3015 ;; Defined at:
  3016 ;;		line 168 in file "C:\mcuproject\scm\zdt\D119_062B_SOP14\main.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;		None
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;		None
  3021 ;; Return value:  Size  Location     Type
  3022 ;;                  1    wreg      void 
  3023 ;; Registers used:
  3024 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3025 ;; Tracked objects:
  3026 ;;		On entry : 100/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMMON   BANK0   BANK1
  3030 ;;      Params:         0       0       0
  3031 ;;      Locals:         0       0       0
  3032 ;;      Temps:          0       0       0
  3033 ;;      Totals:         0       0       0
  3034 ;;Total ram usage:        0 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; This function calls:
  3037 ;;		Nothing
  3038 ;; This function is called by:
  3039 ;;		_Isr_Timer
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           
  3044                           ;psect for function _ledShow
  3045  0281                     _ledShow:	
  3046                           
  3047                           ;main.c: 170: if(++ledCntTime > 5)
  3048                           
  3049                           ;incstack = 0
  3050                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3051  0281  3006               	movlw	6
  3052  0282  0AB3               	incf	_ledCntTime,f
  3053  0283  0233               	subwf	_ledCntTime,w
  3054  0284  1C03               	skipc
  3055  0285  0008               	return
  3056  0286  300E               	movlw	14
  3057                           
  3058                           ;main.c: 171: {
  3059                           ;main.c: 172: ledCntTime = 0;
  3060  0287  01B3               	clrf	_ledCntTime
  3061                           
  3062                           ;main.c: 173: if(++ledCnt > 13)
  3063  0288  0AB5               	incf	_ledCnt,f
  3064  0289  0235               	subwf	_ledCnt,w
  3065  028A  1803               	btfsc	3,0
  3066                           
  3067                           ;main.c: 174: {
  3068                           ;main.c: 175: ledCnt = 0;
  3069  028B  01B5               	clrf	_ledCnt
  3070                           
  3071                           ;main.c: 176: }
  3072                           ;main.c: 177: PORTA &= 0xC1;
  3073  028C  30C1               	movlw	193
  3074  028D  1683               	bsf	3,5	;RP0=1, select bank1
  3075  028E  0586               	andwf	6,f	;volatile
  3076                           
  3077                           ;main.c: 178: TRISA |= 0x3E;
  3078  028F  303E               	movlw	62
  3079  0290  0485               	iorwf	5,f	;volatile
  3080                           
  3081                           ;main.c: 179: switch(ledCnt)
  3082  0291  2B02               	goto	i1l2100
  3083  0292                     i1l646:	
  3084                           ;main.c: 180: {
  3085                           ;main.c: 181: case 1:
  3086                           
  3087                           
  3088                           ;main.c: 182: if(shiweiNum & 0x01)
  3089  0292  1C51               	btfss	_shiweiNum,0
  3090  0293  0008               	return
  3091                           
  3092                           ;main.c: 183: {
  3093                           ;main.c: 184: TRISA &= 0xEF;
  3094  0294  1683               	bsf	3,5	;RP0=1, select bank1
  3095  0295  1205               	bcf	5,4	;volatile
  3096                           
  3097                           ;main.c: 185: TRISA &= 0xDF;
  3098  0296  1285               	bcf	5,5	;volatile
  3099                           
  3100                           ;main.c: 186: RA4 = 1;
  3101  0297  1606               	bsf	6,4	;volatile
  3102                           
  3103                           ;main.c: 187: RA5 = 0;
  3104  0298  1286               	bcf	6,5	;volatile
  3105  0299  0008               	return
  3106  029A                     i1l649:	
  3107                           ;main.c: 190: case 2:
  3108                           
  3109                           
  3110                           ;main.c: 191: if(shiweiNum & 0x02)
  3111  029A  1CD1               	btfss	_shiweiNum,1
  3112  029B  0008               	return
  3113                           
  3114                           ;main.c: 192: {
  3115                           ;main.c: 193: TRISA &= 0xF7;
  3116  029C  1683               	bsf	3,5	;RP0=1, select bank1
  3117  029D  1185               	bcf	5,3	;volatile
  3118                           
  3119                           ;main.c: 194: TRISA &= 0xEF;
  3120  029E  1205               	bcf	5,4	;volatile
  3121                           
  3122                           ;main.c: 195: RA4 = 1;
  3123  029F  1606               	bsf	6,4	;volatile
  3124                           
  3125                           ;main.c: 196: RA3 = 0;
  3126  02A0  1186               	bcf	6,3	;volatile
  3127  02A1  0008               	return
  3128  02A2                     i1l651:	
  3129                           ;main.c: 199: case 3:
  3130                           
  3131                           
  3132                           ;main.c: 200: if(shiweiNum & 0x04)
  3133  02A2  1D51               	btfss	_shiweiNum,2
  3134  02A3  0008               	return
  3135                           
  3136                           ;main.c: 201: {
  3137                           ;main.c: 202: TRISA &= 0xF7;
  3138  02A4  1683               	bsf	3,5	;RP0=1, select bank1
  3139  02A5  1185               	bcf	5,3	;volatile
  3140                           
  3141                           ;main.c: 203: TRISA &= 0xFD;
  3142  02A6  1085               	bcf	5,1	;volatile
  3143                           
  3144                           ;main.c: 204: RA1 = 1;
  3145  02A7  1486               	bsf	6,1	;volatile
  3146                           
  3147                           ;main.c: 205: RA3 = 0;
  3148  02A8  1186               	bcf	6,3	;volatile
  3149  02A9  0008               	return
  3150  02AA                     i1l653:	
  3151                           ;main.c: 208: case 4:
  3152                           
  3153                           
  3154                           ;main.c: 209: if(shiweiNum & 0x08)
  3155  02AA  1DD1               	btfss	_shiweiNum,3
  3156  02AB  0008               	return
  3157                           
  3158                           ;main.c: 210: {
  3159                           ;main.c: 211: TRISA &= 0xFB;
  3160  02AC  1683               	bsf	3,5	;RP0=1, select bank1
  3161  02AD  1105               	bcf	5,2	;volatile
  3162                           
  3163                           ;main.c: 212: TRISA &= 0xFD;
  3164  02AE  1085               	bcf	5,1	;volatile
  3165                           
  3166                           ;main.c: 213: RA2 = 1;
  3167  02AF  1506               	bsf	6,2	;volatile
  3168                           
  3169                           ;main.c: 214: RA1 = 0;
  3170  02B0  1086               	bcf	6,1	;volatile
  3171  02B1  0008               	return
  3172  02B2                     i1l655:	
  3173                           ;main.c: 217: case 5:
  3174                           
  3175                           
  3176                           ;main.c: 218: if(shiweiNum & 0x10)
  3177  02B2  1E51               	btfss	_shiweiNum,4
  3178  02B3  0008               	return
  3179                           
  3180                           ;main.c: 219: {
  3181                           ;main.c: 220: TRISA &= 0xFD;
  3182  02B4  1683               	bsf	3,5	;RP0=1, select bank1
  3183  02B5  1085               	bcf	5,1	;volatile
  3184                           
  3185                           ;main.c: 221: TRISA &= 0xFB;
  3186  02B6  1105               	bcf	5,2	;volatile
  3187                           
  3188                           ;main.c: 222: RA1 = 1;
  3189  02B7  1486               	bsf	6,1	;volatile
  3190                           
  3191                           ;main.c: 223: RA2 = 0;
  3192  02B8  1106               	bcf	6,2	;volatile
  3193  02B9  0008               	return
  3194  02BA                     i1l657:	
  3195                           ;main.c: 226: case 6:
  3196                           
  3197                           
  3198                           ;main.c: 227: if(shiweiNum & 0x20)
  3199  02BA  1ED1               	btfss	_shiweiNum,5
  3200  02BB  0008               	return
  3201                           
  3202                           ;main.c: 228: {
  3203                           ;main.c: 229: TRISA &= 0xF7;
  3204  02BC  1683               	bsf	3,5	;RP0=1, select bank1
  3205  02BD  1185               	bcf	5,3	;volatile
  3206                           
  3207                           ;main.c: 230: TRISA &= 0xFB;
  3208  02BE  1105               	bcf	5,2	;volatile
  3209                           
  3210                           ;main.c: 231: RA3 = 1;
  3211  02BF  1586               	bsf	6,3	;volatile
  3212                           
  3213                           ;main.c: 232: RA2 = 0;
  3214  02C0  1106               	bcf	6,2	;volatile
  3215  02C1  0008               	return
  3216  02C2                     i1l659:	
  3217                           ;main.c: 235: case 7:
  3218                           
  3219                           
  3220                           ;main.c: 236: if(shiweiNum & 0x40)
  3221  02C2  1F51               	btfss	_shiweiNum,6
  3222  02C3  0008               	return
  3223                           
  3224                           ;main.c: 237: {
  3225                           ;main.c: 238: TRISA &= 0xFB;
  3226  02C4  1683               	bsf	3,5	;RP0=1, select bank1
  3227  02C5  1105               	bcf	5,2	;volatile
  3228                           
  3229                           ;main.c: 239: TRISA &= 0xF7;
  3230  02C6  1185               	bcf	5,3	;volatile
  3231                           
  3232                           ;main.c: 240: RA2 = 1;
  3233  02C7  1506               	bsf	6,2	;volatile
  3234                           
  3235                           ;main.c: 241: RA3 = 0;
  3236  02C8  1186               	bcf	6,3	;volatile
  3237  02C9  0008               	return
  3238  02CA                     i1l661:	
  3239                           ;main.c: 244: case 8:
  3240                           
  3241                           
  3242                           ;main.c: 245: if(geweiNum & 0x01)
  3243  02CA  1C50               	btfss	_geweiNum,0
  3244  02CB  0008               	return
  3245                           
  3246                           ;main.c: 246: {
  3247                           ;main.c: 247: TRISA &= 0xDF;
  3248  02CC  1683               	bsf	3,5	;RP0=1, select bank1
  3249  02CD  1285               	bcf	5,5	;volatile
  3250                           
  3251                           ;main.c: 248: TRISA &= 0xEF;
  3252  02CE  1205               	bcf	5,4	;volatile
  3253                           
  3254                           ;main.c: 249: RA5 = 1;
  3255  02CF  1686               	bsf	6,5	;volatile
  3256                           
  3257                           ;main.c: 250: RA4 = 0;
  3258  02D0  1206               	bcf	6,4	;volatile
  3259  02D1  0008               	return
  3260  02D2                     i1l663:	
  3261                           ;main.c: 253: case 9:
  3262                           
  3263                           
  3264                           ;main.c: 254: if(geweiNum & 0x02)
  3265  02D2  1CD0               	btfss	_geweiNum,1
  3266  02D3  0008               	return
  3267                           
  3268                           ;main.c: 255: {
  3269                           ;main.c: 256: TRISA &= 0xF7;
  3270  02D4  1683               	bsf	3,5	;RP0=1, select bank1
  3271  02D5  1185               	bcf	5,3	;volatile
  3272                           
  3273                           ;main.c: 257: TRISA &= 0xDF;
  3274  02D6  1285               	bcf	5,5	;volatile
  3275                           
  3276                           ;main.c: 258: RA3 = 1;
  3277  02D7  1586               	bsf	6,3	;volatile
  3278                           
  3279                           ;main.c: 259: RA5 = 0;
  3280  02D8  1286               	bcf	6,5	;volatile
  3281  02D9  0008               	return
  3282  02DA                     i1l665:	
  3283                           ;main.c: 262: case 10:
  3284                           
  3285                           
  3286                           ;main.c: 263: if(geweiNum & 0x04)
  3287  02DA  1D50               	btfss	_geweiNum,2
  3288  02DB  0008               	return
  3289                           
  3290                           ;main.c: 264: {
  3291                           ;main.c: 265: TRISA &= 0xDF;
  3292  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  3293  02DD  1285               	bcf	5,5	;volatile
  3294                           
  3295                           ;main.c: 266: TRISA &= 0xFD;
  3296  02DE  1085               	bcf	5,1	;volatile
  3297                           
  3298                           ;main.c: 267: RA5 = 1;
  3299  02DF  1686               	bsf	6,5	;volatile
  3300                           
  3301                           ;main.c: 268: RA1 = 0;
  3302  02E0  1086               	bcf	6,1	;volatile
  3303  02E1  0008               	return
  3304  02E2                     i1l667:	
  3305                           ;main.c: 271: case 11:
  3306                           
  3307                           
  3308                           ;main.c: 272: if(geweiNum & 0x08)
  3309  02E2  1DD0               	btfss	_geweiNum,3
  3310  02E3  0008               	return
  3311                           
  3312                           ;main.c: 273: {
  3313                           ;main.c: 274: TRISA &= 0xDF;
  3314  02E4  1683               	bsf	3,5	;RP0=1, select bank1
  3315  02E5  1285               	bcf	5,5	;volatile
  3316                           
  3317                           ;main.c: 275: TRISA &= 0xFD;
  3318  02E6  1085               	bcf	5,1	;volatile
  3319                           
  3320                           ;main.c: 276: RA1 = 1;
  3321  02E7  1486               	bsf	6,1	;volatile
  3322                           
  3323                           ;main.c: 277: RA5 = 0;
  3324  02E8  1286               	bcf	6,5	;volatile
  3325  02E9  0008               	return
  3326  02EA                     i1l669:	
  3327                           ;main.c: 280: case 12:
  3328                           
  3329                           
  3330                           ;main.c: 281: if(geweiNum & 0x10)
  3331  02EA  1E50               	btfss	_geweiNum,4
  3332  02EB  0008               	return
  3333                           
  3334                           ;main.c: 282: {
  3335                           ;main.c: 283: TRISA &= 0xF7;
  3336  02EC  1683               	bsf	3,5	;RP0=1, select bank1
  3337  02ED  1185               	bcf	5,3	;volatile
  3338                           
  3339                           ;main.c: 284: TRISA &= 0xFD;
  3340  02EE  1085               	bcf	5,1	;volatile
  3341                           
  3342                           ;main.c: 285: RA3 = 1;
  3343  02EF  1586               	bsf	6,3	;volatile
  3344                           
  3345                           ;main.c: 286: RA1 = 0;
  3346  02F0  1086               	bcf	6,1	;volatile
  3347  02F1  0008               	return
  3348  02F2                     i1l671:	
  3349                           ;main.c: 289: case 13:
  3350                           
  3351                           
  3352                           ;main.c: 290: if(geweiNum & 0x20)
  3353  02F2  1ED0               	btfss	_geweiNum,5
  3354  02F3  0008               	return
  3355                           
  3356                           ;main.c: 291: {
  3357                           ;main.c: 292: TRISA &= 0xF7;
  3358  02F4  1683               	bsf	3,5	;RP0=1, select bank1
  3359  02F5  1185               	bcf	5,3	;volatile
  3360                           
  3361                           ;main.c: 293: TRISA &= 0xEF;
  3362  02F6  1205               	bcf	5,4	;volatile
  3363                           
  3364                           ;main.c: 294: RA3 = 1;
  3365  02F7  1586               	bsf	6,3	;volatile
  3366                           
  3367                           ;main.c: 295: RA4 = 0;
  3368  02F8  1206               	bcf	6,4	;volatile
  3369  02F9  0008               	return
  3370  02FA                     i1l673:	
  3371                           ;main.c: 298: case 0:
  3372                           
  3373                           
  3374                           ;main.c: 299: if(geweiNum & 0x40)
  3375  02FA  1F50               	btfss	_geweiNum,6
  3376  02FB  0008               	return
  3377                           
  3378                           ;main.c: 300: {
  3379                           ;main.c: 301: TRISA &= 0xDF;
  3380  02FC  1683               	bsf	3,5	;RP0=1, select bank1
  3381  02FD  1285               	bcf	5,5	;volatile
  3382                           
  3383                           ;main.c: 302: TRISA &= 0xF7;
  3384  02FE  1185               	bcf	5,3	;volatile
  3385                           
  3386                           ;main.c: 303: RA5 = 1;
  3387  02FF  1686               	bsf	6,5	;volatile
  3388                           
  3389                           ;main.c: 304: RA3 = 0;
  3390  0300  1186               	bcf	6,3	;volatile
  3391  0301  0008               	return
  3392  0302                     i1l2100:	
  3393  0302  1283               	bcf	3,5	;RP0=0, select bank0
  3394  0303  0835               	movf	_ledCnt,w
  3395                           
  3396                           ; Switch size 1, requested type "space"
  3397                           ; Number of cases is 14, Range of values is 0 to 13
  3398                           ; switch strategies available:
  3399                           ; Name         Instructions Cycles
  3400                           ; direct_byte           20     6 (fixed)
  3401                           ; simple_byte           43    22 (average)
  3402                           ; jumptable            260     6 (fixed)
  3403                           ;	Chosen strategy is direct_byte
  3404  0304  0084               	movwf	4
  3405  0305  300E               	movlw	14
  3406  0306  0204               	subwf	4,w
  3407  0307  1803               	skipnc
  3408  0308  0008               	return
  3409  0309  3004               	movlw	high i1S2940
  3410  030A  008A               	movwf	10
  3411  030B  30C6               	movlw	low i1S2940
  3412  030C  0704               	addwf	4,w
  3413  030D  0082               	movwf	2
  3414  030E  0008               	return
  3415  030F                     __end_of_ledShow:	
  3416  007E                     btemp	set	126	;btemp
  3417  007E                     wtemp0	set	126
  3418                           
  3419                           	psect	swtext1
  3420  04C6                     __pswtext1:	
  3421  04C6                     i1S2940:	
  3422  04C6  2AFA               	ljmp	i1l673
  3423  04C7  2A92               	ljmp	i1l646
  3424  04C8  2A9A               	ljmp	i1l649
  3425  04C9  2AA2               	ljmp	i1l651
  3426  04CA  2AAA               	ljmp	i1l653
  3427  04CB  2AB2               	ljmp	i1l655
  3428  04CC  2ABA               	ljmp	i1l657
  3429  04CD  2AC2               	ljmp	i1l659
  3430  04CE  2ACA               	ljmp	i1l661
  3431  04CF  2AD2               	ljmp	i1l663
  3432  04D0  2ADA               	ljmp	i1l665
  3433  04D1  2AE2               	ljmp	i1l667
  3434  04D2  2AEA               	ljmp	i1l669
  3435  04D3  2AF2               	ljmp	i1l671


Data Sizes:
    Strings     0
    Constant    12
    Data        0
    BSS         34
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     17      51
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->___lbdiv
    _setBatStep->___lwdiv
    _checkOutAD->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___lbmod
    _setBatStep->___lwdiv
    _checkOutAD->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2837
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                         _checkOutAD
                            _chrgCtr
                             _keyCtr
                         _setBatStep
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0     512
                            ___lbdiv
                            ___lbmod
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     297
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     215
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _setBatStep                                           2     2      0     501
                                              3 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkOutAD                                           5     5      0     912
                                              4 COMMON     1     1      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           5     5      0     912
                                              4 COMMON     1     1      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     912
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutAD
     _ADC_Sample
   _chrgCtr
   _keyCtr
   _setBatStep
     ___lwdiv
   _workCtr
     ___lbdiv
     ___lbmod
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     11      33       4       63.8%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      3E       7        0.0%
DATA                 0      0      3E       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jul 03 14:12:48 2025

                      pc 0002                       PL2 00E3                       PL4 00F2  
                     PL6 0348                       PL8 01D0                       fsr 0004  
                    PL10 027B                      PL12 00FB                      l631 035D  
                    l704 0430                      l813 0049                      l823 00C8  
                    l680 039D                      l819 0084                      l756 01FF  
                    l757 01FB                      l759 01FD                      _GIE 005F  
                    _RA1 0431                      _RA2 0432                      _RA3 0433  
                    _RA4 0434                      _RA5 0435                      _RB3 0033  
                    _PR2 0011      __size_of_ADC_Sample 00CB                      fsr0 0004  
                    indf 0000          __end_of_AD_Init 04E4                     l2010 045C  
                   l1090 044F                     l2124 03AD                     l2134 03C2  
                   l2118 03A3                     l2230 043A                     l2228 0437  
                   l2600 040F                     l2550 0034                     l2534 0029  
                   l2560 0054                     l2544 0033                     l2536 002B  
                   l2624 03D2                     l2608 0423                     l2706 0263  
                   l2802 0176                     l2730 010A                     l2572 0078  
                   l2636 03E9                     l2708 0266                     l2660 01E8  
                   l2812 017B                     l2574 0080                     l2646 049C  
                   l2670 0202                     l2726 0106                     l2584 00CC  
                   l2568 006E                     l2752 012E                     l2736 0118  
                   l2674 021A                     l2850 01B7                     l2842 01BB  
                   l2834 01A3                     l2818 0188                     l2826 0191  
                   l2684 0245                     l2844 01BD                     l2772 0153  
                   l2748 0125                     l2862 0486                     l2678 0230  
                   l2854 01CA                     l2846 01C6                     l2782 0158  
                   l2766 0146                     l2758 0139                     l2918 038D  
                   l1896 04DC                     l2696 025F                     l2698 024D  
                   l2794 0165                     l1996 0449                     l2796 0167  
                   l2898 0374                     _CHS4 04B6                     _IOCA 0089  
                   _IOCB 0009                     u3307 048B                     u2525 0074  
                   u3317 04A1                     u2535 007E                     u3327 0025  
                   _PIE1 000E                     u2575 00BE                     u2655 03DB  
                   u2595 00D5                     _PEIE 005E                     _RAIE 0073  
                   _RAIF 006B                     u2765 0212                     _RBIE 005B  
                   _RBIF 0058                     _PIR1 000D                     _WPDA 0087  
                   _WPUA 0088                     _WPUB 0008                     _main 0351  
                   btemp 007E            _startLockFlag 004F                     start 000C  
          ??_Init_System 0073                    ?_main 0070          __end_of___lbdiv 045E  
        __end_of___lbmod 0427                    _T2CON 0013          __end_of___lwdiv 03EE  
                  i1l626 0402                    i1l651 02A2                    i1l661 02CA  
                  i1l653 02AA                    i1l646 0292                    i1l671 02F2  
                  i1l663 02D2                    i1l655 02B2                    i1l673 02FA  
                  i1l665 02DA                    i1l657 02BA                    i1l649 029A  
                  i1l667 02E2                    i1l659 02C2                    i1l669 02EA  
                  _PORTA 0086                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0005                    _PWMTH 0018                    _PWMTL 0017  
        __end_of_chrgCtr 03C4          __end_of_ledShow 030F                    pclath 000A  
        __end_of_pwmInit 04C6          __end_of_pwmStop 04E8                    status 0003  
                  wtemp0 007E          __end_of_workCtr 01D0          ___lbdiv@divisor 0073  
        ___lbdiv@counter 0075          __initialization 000D             __end_of_main 0390  
                 ??_main 0077                ??_AD_Init 0073      __end_of_Init_System 0478  
                 _ADCON0 0095                   _ADCON1 0096                   i1S2940 04C6  
                 _ADRESH 0099                   _ADRESL 0098                   _ANSEL0 0093  
                 _ANSEL1 0094                   _GODONE 04A9                   i1l2100 0302  
                 i1l2446 03FF                   _LDO_EN 04B2                   _INTCON 000B  
                 _OSCCON 0014                   _TMR2IE 0071                   _TMR2IF 0069  
                 _PWMD2L 009B             ??_ADC_Sample 003E       __size_of_Isr_Timer 001D  
             _Sleep_Mode 030F                ??___lbdiv 0074                ??___lbmod 0074  
                 _ledCnt 0035                ??___lwdiv 0077                   _keyCtr 0427  
              ??_chrgCtr 0073                   _result 0026                   _out_ad 0020  
              ??_ledShow 0070         __end_of_numArray 04B6       __end_of_ADC_Sample 00E3  
                 saved_w 007E                ??_pwmInit 0073                ??_pwmStop 0073  
              ??_workCtr 0077         ___lbdiv@dividend 0074          ___lbmod@divisor 0073  
__end_of__initialization 0016          ___lbmod@counter 003F           __pcstackCOMMON 0070  
            _Init_System 045E               __end_ofPL2 00F2               __end_ofPL4 00FB  
             __end_ofPL6 0351               __end_ofPL8 01D7         ___lbdiv@quotient 0076  
      __end_of_Isr_Timer 040B               _checkBatAD 048E               _checkOutAD 0478  
             __pbssBANK0 0020             _chrgFullFlag 0039             _chrgFullTime 0037  
            ?_Sleep_Mode 0070               __pmaintext 0351               __pintentry 0004  
                ?_keyCtr 0070               _ledCntTime 0033                  _AD_Init 04DC  
             _curBatStep 002F                  _PWM23DT 009D                  _PWMD23H 009E  
                _PWMCON0 0015                  _PWMCON1 0016                  _PWMCON2 001D  
             __stringtab 04A4                  _IntFlag 003A               _intCount10 0038  
        ADC_Sample@adldo 0073          ADC_Sample@admax 004B          ADC_Sample@admin 0049  
        ADC_Sample@adsum 0045                  ___lbdiv 0443                  ___lbmod 040B  
                ___lwdiv 03C4          __size_of_keyCtr 001C                  _chrgCtr 0390  
             _lowBatFlag 0032                  __ptext1 0100                  __ptext2 04E4  
                __ptext3 04B6                  __ptext4 040B                  __ptext5 0443  
                __ptext6 01D7                  __ptext7 03C4                  __ptext8 0427  
                __ptext9 0390                  _ledShow 0281               _lowBatTime 002E  
                _curDuty 002B                  _count1s 003B                  _maxDuty 002A  
             _setBatStep 01D7      __size_of_Sleep_Mode 0039                  _pwmInit 04B6  
            ?_checkBatAD 0070                  _pwmStop 04E4                  clrloop0 04D5  
                _workCtr 0100              ?_checkOutAD 0070     end_of_initialization 0016  
       ___lbmod@dividend 003E              ___lbmod@rem 0040      __size_of_checkBatAD 0016  
           ?_Init_System 0070      __size_of_checkOutAD 0016           __end_of_keyCtr 0443  
            __end_ofPL10 0281              __end_ofPL12 0100      start_initialization 000D  
            ?_setBatStep 0070                _Isr_Timer 03EE             ??_Sleep_Mode 0073  
      ADC_Sample@ad_temp 004D                 ??_keyCtr 0073                 ?_AD_Init 0070  
            __pbssCOMMON 0077                ___latbits 0000            __pcstackBANK0 003E  
     __end_of_Sleep_Mode 0348               ?_Isr_Timer 0070                __pnvBANK0 004F  
       ___lwdiv@dividend 0075      __size_of_setBatStep 00A4                 ?___lbdiv 0073  
               ?___lbmod 0073                 ?___lwdiv 0073                 ?_chrgCtr 0070  
              __pstrings 04A4                __pswtext1 04C6                 ?_ledShow 0070  
              _firstTime 0052           ADC_Sample@adch 0043                 ?_pwmInit 0070  
           ??_checkBatAD 0074                 ?_pwmStop 0070         ___lwdiv@quotient 003F  
               ?_workCtr 0070             ??_checkOutAD 0074              ADC_Sample@i 0044  
            ADC_Sample@j 0042        interrupt_function 0004                clear_ram0 04D4  
              _sleepTime 0031                _shiweiNum 0051       __end_of_checkBatAD 04A4  
     __end_of_checkOutAD 048E              __stringbase 04A9     __size_of_Init_System 001A  
       __size_of_AD_Init 0008              ??_Isr_Timer 0070               _ADC_Sample 0018  
       __size_of___lbdiv 001B         __size_of___lbmod 001C         __size_of___lwdiv 002A  
     __end_of__stringtab 04AA         __size_of_chrgCtr 0034         __size_of_ledShow 008E  
               _adresult 0028             ??_setBatStep 0041                 _chrgFlag 007A  
        ___lwdiv@divisor 0073          ___lwdiv@counter 003E                 __ptext10 0478  
               __ptext11 048E                 __ptext12 0018                 __ptext13 030F  
               __ptext14 045E                 __ptext15 04DC                 __ptext16 03EE  
               __ptext17 0281         __size_of_pwmInit 0010         __size_of_pwmStop 0004  
               _geweiNum 0050                 _count30s 0022         __size_of_workCtr 00D0  
               _intCount 003C            __size_of_main 003F                 _lockTime 002D  
               _numArray 04AA                 _overTime 002C                 _test_adc 003D  
     __end_of_setBatStep 027B                 _power_ad 0077              _lowShanTime 0024  
               _workStep 0036             _motorPwmFlag 0030                 intlevel1 0000  
            ?_ADC_Sample 0073                stringcode 04A4              _showBatTime 0034  
            _showBatStep 0079               _OPTION_REG 0001                 stringdir 04A4  
               stringtab 04A4  
