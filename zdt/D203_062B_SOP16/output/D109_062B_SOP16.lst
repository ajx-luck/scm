

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 18 17:44:58 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	swtext1,local,class=CONST,delta=2
    31                           	psect	pa_nodes0,global,class=CODE,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 1.45
    35                           ; Generated 16/11/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	nvBANK0
    70  005B                     __pnvBANK0:	
    71  005B                     _firstTime:	
    72  005B                     	ds	1
    73  001D                     _PWMCON2	set	29
    74  0018                     _PWMTH	set	24
    75  0017                     _PWMTL	set	23
    76  0016                     _PWMCON1	set	22
    77  0015                     _PWMCON0	set	21
    78  0014                     _OSCCON	set	20
    79  0013                     _T2CON	set	19
    80  0011                     _PR2	set	17
    81  000E                     _PIE1	set	14
    82  000D                     _PIR1	set	13
    83  000B                     _INTCON	set	11
    84  0009                     _IOCB	set	9
    85  0008                     _WPUB	set	8
    86  0006                     _PORTB	set	6
    87  0005                     _TRISB	set	5
    88  0001                     _OPTION_REG	set	1
    89  0071                     _TMR2IE	set	113
    90  0073                     _RAIE	set	115
    91  0069                     _TMR2IF	set	105
    92  006B                     _RAIF	set	107
    93  0058                     _RBIF	set	88
    94  005B                     _RBIE	set	91
    95  005E                     _PEIE	set	94
    96  005F                     _GIE	set	95
    97  0030                     _RB0	set	48
    98  0031                     _RB1	set	49
    99  0034                     _RB4	set	52
   100  0037                     _RB7	set	55
   101  009E                     _PWMD23H	set	158
   102  009D                     _PWM23DT	set	157
   103  009C                     _PWMD3L	set	156
   104  0099                     _ADRESH	set	153
   105  0098                     _ADRESL	set	152
   106  0096                     _ADCON1	set	150
   107  0095                     _ADCON0	set	149
   108  0093                     _ANSEL0	set	147
   109  0089                     _IOCA	set	137
   110  0088                     _WPUA	set	136
   111  0087                     _WPDA	set	135
   112  0086                     _PORTA	set	134
   113  0085                     _TRISA	set	133
   114  04B2                     _LDO_EN	set	1202
   115  04B6                     _CHS4	set	1206
   116  04A9                     _GODONE	set	1193
   117  0433                     _RA3	set	1075
   118                           
   119                           	psect	cinit
   120  000D                     start_initialization:	
   121                           ; #config settings
   122                           
   123  000D                     __initialization:	
   124                           
   125                           ; Clear objects allocated to COMMON
   126  000D  3077               	movlw	low __pbssCOMMON
   127  000E  0084               	movwf	4
   128  000F  307B               	movlw	low (__pbssCOMMON+4)
   129  0010  248A               	fcall	clear_ram0
   130  0011  3020               	movlw	low __pbssBANK0
   131                           
   132                           ; Clear objects allocated to BANK0
   133  0012  1383               	bcf	3,7	;select IRP bank0
   134  0013  0084               	movwf	4
   135  0014  3048               	movlw	low (__pbssBANK0+40)
   136  0015  248A               	fcall	clear_ram0
   137  0016                     end_of_initialization:	
   138                           ;End of C runtime variable initialization code
   139                           
   140  0016                     __end_of__initialization:	
   141  0016  0183               	clrf	3
   142  0017  2B8B               	ljmp	_main	;jump to C main() function
   143                           
   144                           	psect	bssCOMMON
   145  0077                     __pbssCOMMON:	
   146  0077                     _prePwStep:	
   147  0077                     	ds	1
   148  0078                     _ledStep:	
   149  0078                     	ds	1
   150  0079                     _workStep:	
   151  0079                     	ds	1
   152  007A                     _chrgFlag:	
   153  007A                     	ds	1
   154                           
   155                           	psect	bssBANK0
   156  0020                     __pbssBANK0:	
   157  0020                     _count900s:	
   158  0020                     	ds	2
   159  0022                     _count8s:	
   160  0022                     	ds	2
   161  0024                     _count5s:	
   162  0024                     	ds	2
   163  0026                     _count50s:	
   164  0026                     	ds	2
   165  0028                     _batADValue:	
   166  0028                     	ds	2
   167  002A                     _outADValue:	
   168  002A                     	ds	2
   169  002C                     _power_ad:	
   170  002C                     	ds	2
   171  002E                     _result:	
   172  002E                     	ds	2
   173  0030                     _adresult:	
   174  0030                     	ds	2
   175  0032                     _sleepTime:	
   176  0032                     	ds	1
   177  0033                     _lowBatFlag:	
   178  0033                     	ds	1
   179  0034                     _preLedStep:	
   180  0034                     	ds	1
   181  0035                     _overWorkTime:	
   182  0035                     	ds	1
   183  0036                     _ledCntTime:	
   184  0036                     	ds	1
   185  0037                     _showBatTime:	
   186  0037                     	ds	1
   187  0038                     _lockLedStep:	
   188  0038                     	ds	1
   189  0039                     _pwStep:	
   190  0039                     	ds	1
   191  003A                     _startTime:	
   192  003A                     	ds	1
   193  003B                     _tempDuty:	
   194  003B                     	ds	1
   195  003C                     _overCount:	
   196  003C                     	ds	1
   197  003D                     _maxDuty:	
   198  003D                     	ds	1
   199  003E                     _longPressFlag:	
   200  003E                     	ds	1
   201  003F                     _keyCount:	
   202  003F                     	ds	1
   203  0040                     _ledCnt:	
   204  0040                     	ds	1
   205  0041                     _workOverOutTime:	
   206  0041                     	ds	1
   207  0042                     _countHalfFull:	
   208  0042                     	ds	1
   209  0043                     _intCount10:	
   210  0043                     	ds	1
   211  0044                     _IntFlag:	
   212  0044                     	ds	1
   213  0045                     _count1s:	
   214  0045                     	ds	1
   215  0046                     _intCount:	
   216  0046                     	ds	1
   217  0047                     _test_adc:	
   218  0047                     	ds	1
   219                           
   220                           	psect	clrtext
   221  048A                     clear_ram0:	
   222                           ;	Called with FSR containing the base address, and
   223                           ;	W with the last address+1
   224                           
   225  048A  0064               	clrwdt	;clear the watchdog before getting into this loop
   226  048B                     clrloop0:	
   227  048B  0180               	clrf	0	;clear RAM location pointed to by FSR
   228  048C  0A84               	incf	4,f	;increment pointer
   229  048D  0604               	xorwf	4,w	;XOR with final address
   230  048E  1903               	btfsc	3,2	;have we reached the end yet?
   231  048F  3400               	retlw	0	;all done for this memory range, return
   232  0490  0604               	xorwf	4,w	;XOR again to restore value
   233  0491  2C8B               	goto	clrloop0	;do the next byte
   234                           
   235                           	psect	cstackCOMMON
   236  0070                     __pcstackCOMMON:	
   237  0070                     ?_ledShow:	
   238  0070                     ??_ledShow:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ?_Init_System:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_AD_Init:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_checkOutA:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_chrgCtr:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_checkBatAD:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_keyCtr:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_workCtr:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ?_ledCtr:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?_Sleep_Mode:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_pwmInit:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ?_pwmStop:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_Isr_Timer:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ??_Isr_Timer:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_main:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ?_keyRead:	
   284                           ; 1 bytes @ 0x0
   285                           
   286                           
   287                           ; 1 bytes @ 0x0
   288  0070                     	ds	3
   289  0073                     ??_Init_System:	
   290  0073                     ??_AD_Init:	
   291                           ; 1 bytes @ 0x3
   292                           
   293  0073                     ??_workCtr:	
   294                           ; 1 bytes @ 0x3
   295                           
   296  0073                     ??_Sleep_Mode:	
   297                           ; 1 bytes @ 0x3
   298                           
   299  0073                     ??_pwmInit:	
   300                           ; 1 bytes @ 0x3
   301                           
   302  0073                     ??_pwmStop:	
   303                           ; 1 bytes @ 0x3
   304                           
   305  0073                     ?_ADC_Sample:	
   306                           ; 1 bytes @ 0x3
   307                           
   308  0073                     ??_keyRead:	
   309                           ; 1 bytes @ 0x3
   310                           
   311  0073                     ?___lbdiv:	
   312                           ; 1 bytes @ 0x3
   313                           
   314  0073                     ?___lbmod:	
   315                           ; 1 bytes @ 0x3
   316                           
   317  0073                     keyRead@keyStatus:	
   318                           ; 1 bytes @ 0x3
   319                           
   320  0073                     ADC_Sample@adldo:	
   321                           ; 1 bytes @ 0x3
   322                           
   323  0073                     ___lbdiv@divisor:	
   324                           ; 1 bytes @ 0x3
   325                           
   326  0073                     ___lbmod@divisor:	
   327                           ; 1 bytes @ 0x3
   328                           
   329                           
   330                           ; 1 bytes @ 0x3
   331  0073                     	ds	1
   332  0074                     ??_checkOutA:	
   333  0074                     ??_checkBatAD:	
   334                           ; 1 bytes @ 0x4
   335                           
   336  0074                     ??_keyCtr:	
   337                           ; 1 bytes @ 0x4
   338                           
   339  0074                     ??___lbdiv:	
   340                           ; 1 bytes @ 0x4
   341                           
   342  0074                     ??___lbmod:	
   343                           ; 1 bytes @ 0x4
   344                           
   345  0074                     keyCtr@kclick:	
   346                           ; 1 bytes @ 0x4
   347                           
   348  0074                     ___lbdiv@dividend:	
   349                           ; 1 bytes @ 0x4
   350                           
   351                           
   352                           ; 1 bytes @ 0x4
   353  0074                     	ds	1
   354  0075                     ___lbdiv@counter:	
   355                           
   356                           ; 1 bytes @ 0x5
   357  0075                     	ds	1
   358  0076                     ___lbdiv@quotient:	
   359                           
   360                           ; 1 bytes @ 0x6
   361  0076                     	ds	1
   362  0077                     ??_chrgCtr:	
   363  0077                     ??_main:	
   364                           ; 1 bytes @ 0x7
   365                           
   366                           
   367                           	psect	cstackBANK0
   368  0048                     __pcstackBANK0:	
   369                           ; 1 bytes @ 0x7
   370                           
   371  0048                     ??_ADC_Sample:	
   372  0048                     ___lbmod@dividend:	
   373                           ; 1 bytes @ 0x0
   374                           
   375                           
   376                           ; 1 bytes @ 0x0
   377  0048                     	ds	1
   378  0049                     ___lbmod@counter:	
   379                           
   380                           ; 1 bytes @ 0x1
   381  0049                     	ds	1
   382  004A                     ___lbmod@rem:	
   383                           
   384                           ; 1 bytes @ 0x2
   385  004A                     	ds	1
   386  004B                     ??_ledCtr:	
   387                           
   388                           ; 1 bytes @ 0x3
   389  004B                     	ds	1
   390  004C                     ADC_Sample@j:	
   391                           
   392                           ; 1 bytes @ 0x4
   393  004C                     	ds	1
   394  004D                     ADC_Sample@adch:	
   395                           
   396                           ; 1 bytes @ 0x5
   397  004D                     	ds	1
   398  004E                     ADC_Sample@i:	
   399                           
   400                           ; 1 bytes @ 0x6
   401  004E                     	ds	1
   402  004F                     ADC_Sample@adsum:	
   403                           
   404                           ; 4 bytes @ 0x7
   405  004F                     	ds	4
   406  0053                     ADC_Sample@admin:	
   407                           
   408                           ; 2 bytes @ 0xB
   409  0053                     	ds	2
   410  0055                     ADC_Sample@admax:	
   411                           
   412                           ; 2 bytes @ 0xD
   413  0055                     	ds	2
   414  0057                     ADC_Sample@ad_temp:	
   415                           
   416                           ; 2 bytes @ 0xF
   417  0057                     	ds	3
   418  005A                     checkOutA@maxAout:	
   419                           
   420                           ; 1 bytes @ 0x12
   421  005A                     	ds	1
   422                           
   423                           	psect	maintext
   424  038B                     __pmaintext:	
   425 ;;
   426 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   427 ;;
   428 ;; *************** function _main *****************
   429 ;; Defined at:
   430 ;;		line 136 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
   431 ;; Parameters:    Size  Location     Type
   432 ;;		None
   433 ;; Auto vars:     Size  Location     Type
   434 ;;		None
   435 ;; Return value:  Size  Location     Type
   436 ;;                  1    wreg      void 
   437 ;; Registers used:
   438 ;;		wreg, status,2, status,0, pclath, cstack
   439 ;; Tracked objects:
   440 ;;		On entry : B00/0
   441 ;;		On exit  : 100/0
   442 ;;		Unchanged: 0/0
   443 ;; Data sizes:     COMMON   BANK0   BANK1
   444 ;;      Params:         0       0       0
   445 ;;      Locals:         0       0       0
   446 ;;      Temps:          0       0       0
   447 ;;      Totals:         0       0       0
   448 ;;Total ram usage:        0 bytes
   449 ;; Hardware stack levels required when called:    4
   450 ;; This function calls:
   451 ;;		_AD_Init
   452 ;;		_Init_System
   453 ;;		_Sleep_Mode
   454 ;;		_checkBatAD
   455 ;;		_checkOutA
   456 ;;		_chrgCtr
   457 ;;		_keyCtr
   458 ;;		_ledCtr
   459 ;;		_workCtr
   460 ;; This function is called by:
   461 ;;		Startup code after reset
   462 ;; This function uses a non-reentrant model
   463 ;;
   464                           
   465                           
   466                           ;psect for function _main
   467  038B                     _main:	
   468                           
   469                           ;main.c: 138: Init_System();
   470                           
   471                           ;incstack = 0
   472                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   473  038B  23EA               	fcall	_Init_System
   474                           
   475                           ;main.c: 139: AD_Init();
   476  038C  2492               	fcall	_AD_Init
   477                           
   478                           ;main.c: 140: firstTime = 100;
   479  038D  3064               	movlw	100
   480  038E  1283               	bcf	3,5	;RP0=0, select bank0
   481  038F  00DB               	movwf	_firstTime
   482  0390                     l663:	
   483                           ;main.c: 141: while (1)
   484                           
   485  0390  0064               	clrwdt	;# 
   486                           
   487                           ;main.c: 144: if(intCount10 > 10)
   488  0391  300B               	movlw	11
   489  0392  1283               	bcf	3,5	;RP0=0, select bank0
   490  0393  0243               	subwf	_intCount10,w
   491  0394  1C03               	skipc
   492  0395  2B98               	goto	l2897
   493                           
   494                           ;main.c: 145: {
   495                           ;main.c: 146: intCount10 = 0;
   496  0396  01C3               	clrf	_intCount10
   497                           
   498                           ;main.c: 147: checkOutA();
   499  0397  219B               	fcall	_checkOutA
   500  0398                     l2897:	
   501                           
   502                           ;main.c: 148: }
   503                           ;main.c: 149: if(!IntFlag)
   504  0398  1283               	bcf	3,5	;RP0=0, select bank0
   505  0399  0844               	movf	_IntFlag,w
   506  039A  1903               	btfsc	3,2
   507  039B  2B90               	goto	l663
   508                           
   509                           ;main.c: 151: IntFlag = 0;
   510  039C  01C4               	clrf	_IntFlag
   511                           
   512                           ;main.c: 152: chrgCtr();
   513  039D  22CB               	fcall	_chrgCtr
   514                           
   515                           ;main.c: 153: checkBatAD();
   516  039E  2101               	fcall	_checkBatAD
   517                           
   518                           ;main.c: 154: if(chrgFlag == 0 && lowBatFlag == 0)
   519  039F  087A               	movf	_chrgFlag,w
   520  03A0  1D03               	btfss	3,2
   521  03A1  2BA7               	goto	l667
   522  03A2  1283               	bcf	3,5	;RP0=0, select bank0
   523  03A3  0833               	movf	_lowBatFlag,w
   524  03A4  1D03               	btfss	3,2
   525  03A5  2BA7               	goto	l667
   526                           
   527                           ;main.c: 155: {
   528                           ;main.c: 156: keyCtr();
   529  03A6  23C2               	fcall	_keyCtr
   530  03A7                     l667:	
   531                           
   532                           ;main.c: 157: }
   533                           ;main.c: 158: workCtr();
   534  03A7  234E               	fcall	_workCtr
   535                           
   536                           ;main.c: 159: ledCtr();
   537  03A8  2229               	fcall	_ledCtr
   538                           
   539                           ;main.c: 160: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0)
   540  03A9  087A               	movf	_chrgFlag,w
   541  03AA  1D03               	btfss	3,2
   542  03AB  2BC0               	goto	l2929
   543  03AC  0879               	movf	_workStep,w
   544  03AD  1D03               	btfss	3,2
   545  03AE  2BC0               	goto	l2929
   546  03AF  083F               	movf	_keyCount,w
   547  03B0  1D03               	btfss	3,2
   548  03B1  2BC0               	goto	l2929
   549  03B2  085B               	movf	_firstTime,w
   550  03B3  1D03               	btfss	3,2
   551  03B4  2BC0               	goto	l2929
   552  03B5  0837               	movf	_showBatTime,w
   553  03B6  1D03               	btfss	3,2
   554  03B7  2BC0               	goto	l2929
   555                           
   556                           ;main.c: 161: {
   557                           ;main.c: 162: if(++sleepTime >= 200)
   558  03B8  30C8               	movlw	200
   559  03B9  0AB2               	incf	_sleepTime,f
   560  03BA  0232               	subwf	_sleepTime,w
   561  03BB  1C03               	skipc
   562  03BC  2B90               	goto	l663
   563                           
   564                           ;main.c: 163: {
   565                           ;main.c: 164: sleepTime = 0;
   566  03BD  01B2               	clrf	_sleepTime
   567                           
   568                           ;main.c: 165: Sleep_Mode();
   569  03BE  2310               	fcall	_Sleep_Mode
   570  03BF  2B90               	goto	l663
   571  03C0                     l2929:	
   572                           
   573                           ;main.c: 168: else
   574                           ;main.c: 169: {
   575                           ;main.c: 170: sleepTime = 0;
   576  03C0  01B2               	clrf	_sleepTime
   577  03C1  2B90               	goto	l663
   578  03C2                     __end_of_main:	
   579                           
   580                           	psect	text1
   581  034E                     __ptext1:	
   582 ;; *************** function _workCtr *****************
   583 ;; Defined at:
   584 ;;		line 452 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
   585 ;; Parameters:    Size  Location     Type
   586 ;;		None
   587 ;; Auto vars:     Size  Location     Type
   588 ;;		None
   589 ;; Return value:  Size  Location     Type
   590 ;;                  1    wreg      void 
   591 ;; Registers used:
   592 ;;		wreg, status,2, status,0, pclath, cstack
   593 ;; Tracked objects:
   594 ;;		On entry : 0/0
   595 ;;		On exit  : 100/0
   596 ;;		Unchanged: 0/0
   597 ;; Data sizes:     COMMON   BANK0   BANK1
   598 ;;      Params:         0       0       0
   599 ;;      Locals:         0       0       0
   600 ;;      Temps:          0       0       0
   601 ;;      Totals:         0       0       0
   602 ;;Total ram usage:        0 bytes
   603 ;; Hardware stack levels used:    1
   604 ;; Hardware stack levels required when called:    3
   605 ;; This function calls:
   606 ;;		_pwmInit
   607 ;;		_pwmStop
   608 ;; This function is called by:
   609 ;;		_main
   610 ;; This function uses a non-reentrant model
   611 ;;
   612                           
   613                           
   614                           ;psect for function _workCtr
   615  034E                     _workCtr:	
   616                           
   617                           ;main.c: 455: if(startTime > 0)
   618                           
   619                           ;incstack = 0
   620                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   621  034E  1283               	bcf	3,5	;RP0=0, select bank0
   622  034F  083A               	movf	_startTime,w
   623  0350  1D03               	btfss	3,2
   624                           
   625                           ;main.c: 456: {
   626                           ;main.c: 457: startTime--;
   627  0351  03BA               	decf	_startTime,f
   628                           
   629                           ;main.c: 458: }
   630                           ;main.c: 459: if(workStep > 0)
   631  0352  0879               	movf	_workStep,w
   632                           
   633                           ;main.c: 460: {
   634                           ;main.c: 461: RA3 = 1;
   635  0353  1683               	bsf	3,5	;RP0=1, select bank1
   636  0354  1903               	btfsc	3,2
   637  0355  2B86               	goto	L1
   638  0356  1586               	bsf	6,3	;volatile
   639                           
   640                           ;main.c: 462: if((PWMCON0 & 0x08) == 0)
   641  0357  1283               	bcf	3,5	;RP0=0, select bank0
   642  0358  1995               	btfsc	21,3	;volatile
   643  0359  2B5B               	goto	l2383
   644                           
   645                           ;main.c: 463: {
   646                           ;main.c: 464: pwmInit();
   647  035A  247C               	fcall	_pwmInit
   648  035B                     l2383:	
   649                           
   650                           ;main.c: 465: }
   651                           ;main.c: 466: maxDuty = 40 + (workStep*3);
   652  035B  0879               	movf	_workStep,w
   653  035C  0779               	addwf	_workStep,w
   654  035D  0779               	addwf	_workStep,w
   655  035E  3E28               	addlw	40
   656  035F  00BD               	movwf	_maxDuty
   657                           
   658                           ;main.c: 467: if(overCount >= 5)
   659  0360  3005               	movlw	5
   660  0361  023C               	subwf	_overCount,w
   661  0362  1C03               	skipc
   662  0363  2B76               	goto	l2395
   663                           
   664                           ;main.c: 468: {
   665                           ;main.c: 469: if(++count5s > 500)
   666  0364  0AA4               	incf	_count5s,f
   667  0365  1903               	skipnz
   668  0366  0AA5               	incf	_count5s+1,f
   669  0367  3001               	movlw	1
   670  0368  0225               	subwf	_count5s+1,w
   671  0369  30F5               	movlw	245
   672  036A  1903               	skipnz
   673  036B  0224               	subwf	_count5s,w
   674  036C  1C03               	skipc
   675  036D  2B78               	goto	l2397
   676  036E  30B4               	movlw	180
   677                           
   678                           ;main.c: 470: {
   679                           ;main.c: 471: count5s = 0;
   680  036F  01A4               	clrf	_count5s
   681  0370  01A5               	clrf	_count5s+1
   682                           
   683                           ;main.c: 472: overWorkTime = 180;
   684  0371  00B5               	movwf	_overWorkTime
   685                           
   686                           ;main.c: 473: preLedStep = workStep;
   687  0372  0879               	movf	_workStep,w
   688  0373  00B4               	movwf	_preLedStep
   689                           
   690                           ;main.c: 474: workStep = 0;
   691  0374  01F9               	clrf	_workStep
   692  0375  2B78               	goto	l2397
   693  0376                     l2395:	
   694                           
   695                           ;main.c: 478: else
   696                           ;main.c: 479: {
   697                           ;main.c: 480: count5s = 0;
   698  0376  01A4               	clrf	_count5s
   699  0377  01A5               	clrf	_count5s+1
   700  0378                     l2397:	
   701                           
   702                           ;main.c: 481: }
   703                           ;main.c: 482: if(count1s == 0 && ++count900s >= 900)
   704  0378  0845               	movf	_count1s,w
   705  0379  1D03               	btfss	3,2
   706  037A  0008               	return
   707  037B  0AA0               	incf	_count900s,f
   708  037C  1903               	skipnz
   709  037D  0AA1               	incf	_count900s+1,f
   710  037E  3003               	movlw	3
   711  037F  0221               	subwf	_count900s+1,w
   712  0380  3084               	movlw	132
   713  0381  1903               	skipnz
   714  0382  0220               	subwf	_count900s,w
   715  0383  1803               	btfsc	3,0
   716                           
   717                           ;main.c: 483: {
   718                           ;main.c: 484: workStep = 0;
   719  0384  01F9               	clrf	_workStep
   720  0385  0008               	return
   721  0386                     L1:	
   722                           ;main.c: 487: else
   723                           ;main.c: 488: {
   724                           ;main.c: 489: RA3 = 0;
   725                           
   726  0386  1186               	bcf	6,3	;volatile
   727                           
   728                           ;main.c: 490: pwmStop();
   729  0387  249F               	fcall	_pwmStop
   730                           
   731                           ;main.c: 491: count900s = 0;
   732  0388  01A0               	clrf	_count900s
   733  0389  01A1               	clrf	_count900s+1
   734  038A  0008               	return
   735  038B                     __end_of_workCtr:	
   736                           
   737                           	psect	text2
   738  049F                     __ptext2:	
   739 ;; *************** function _pwmStop *****************
   740 ;; Defined at:
   741 ;;		line 799 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
   742 ;; Parameters:    Size  Location     Type
   743 ;;		None
   744 ;; Auto vars:     Size  Location     Type
   745 ;;		None
   746 ;; Return value:  Size  Location     Type
   747 ;;                  1    wreg      void 
   748 ;; Registers used:
   749 ;;		None
   750 ;; Tracked objects:
   751 ;;		On entry : 100/100
   752 ;;		On exit  : 100/0
   753 ;;		Unchanged: 0/0
   754 ;; Data sizes:     COMMON   BANK0   BANK1
   755 ;;      Params:         0       0       0
   756 ;;      Locals:         0       0       0
   757 ;;      Temps:          0       0       0
   758 ;;      Totals:         0       0       0
   759 ;;Total ram usage:        0 bytes
   760 ;; Hardware stack levels used:    1
   761 ;; Hardware stack levels required when called:    2
   762 ;; This function calls:
   763 ;;		Nothing
   764 ;; This function is called by:
   765 ;;		_workCtr
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769                           
   770                           ;psect for function _pwmStop
   771  049F                     _pwmStop:	
   772                           
   773                           ;main.c: 801: PWMCON0 &= 0XF7;
   774                           
   775                           ;incstack = 0
   776                           ; Regs used in _pwmStop: []
   777  049F  1283               	bcf	3,5	;RP0=0, select bank0
   778  04A0  1195               	bcf	21,3	;volatile
   779                           
   780                           ;main.c: 802: RB4 = 0;
   781  04A1  1206               	bcf	6,4	;volatile
   782  04A2  0008               	return
   783  04A3                     __end_of_pwmStop:	
   784                           
   785                           	psect	text3
   786  047C                     __ptext3:	
   787 ;; *************** function _pwmInit *****************
   788 ;; Defined at:
   789 ;;		line 784 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;		None
   792 ;; Auto vars:     Size  Location     Type
   793 ;;		None
   794 ;; Return value:  Size  Location     Type
   795 ;;                  1    wreg      void 
   796 ;; Registers used:
   797 ;;		wreg, status,2
   798 ;; Tracked objects:
   799 ;;		On entry : 100/0
   800 ;;		On exit  : 100/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMMON   BANK0   BANK1
   803 ;;      Params:         0       0       0
   804 ;;      Locals:         0       0       0
   805 ;;      Temps:          0       0       0
   806 ;;      Totals:         0       0       0
   807 ;;Total ram usage:        0 bytes
   808 ;; Hardware stack levels used:    1
   809 ;; Hardware stack levels required when called:    2
   810 ;; This function calls:
   811 ;;		Nothing
   812 ;; This function is called by:
   813 ;;		_workCtr
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           
   818                           ;psect for function _pwmInit
   819  047C                     _pwmInit:	
   820                           
   821                           ;main.c: 786: PWMCON1 = 0B00000000;
   822                           
   823                           ;incstack = 0
   824                           ; Regs used in _pwmInit: [wreg+status,2]
   825  047C  0196               	clrf	22	;volatile
   826                           
   827                           ;main.c: 787: PWMTH = 0X00;
   828  047D  0198               	clrf	24	;volatile
   829                           
   830                           ;main.c: 788: PWMTL = 100;
   831  047E  3064               	movlw	100
   832  047F  0097               	movwf	23	;volatile
   833                           
   834                           ;main.c: 791: PWMD23H = 0;
   835  0480  1683               	bsf	3,5	;RP0=1, select bank1
   836  0481  019E               	clrf	30	;volatile
   837                           
   838                           ;main.c: 792: PWMD3L = 50;
   839  0482  3032               	movlw	50
   840  0483  009C               	movwf	28	;volatile
   841                           
   842                           ;main.c: 793: PWM23DT = 0X00;
   843  0484  019D               	clrf	29	;volatile
   844                           
   845                           ;main.c: 795: PWMCON0 = 0X68;
   846  0485  3068               	movlw	104
   847  0486  1283               	bcf	3,5	;RP0=0, select bank0
   848  0487  0095               	movwf	21	;volatile
   849                           
   850                           ;main.c: 796: PWMCON2 =0X00;
   851  0488  019D               	clrf	29	;volatile
   852  0489  0008               	return
   853  048A                     __end_of_pwmInit:	
   854                           
   855                           	psect	text4
   856  0229                     __ptext4:	
   857 ;; *************** function _ledCtr *****************
   858 ;; Defined at:
   859 ;;		line 252 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;		None
   862 ;; Auto vars:     Size  Location     Type
   863 ;;		None
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, status,2, status,0, pclath, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 100/0
   870 ;;		On exit  : 100/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMMON   BANK0   BANK1
   873 ;;      Params:         0       0       0
   874 ;;      Locals:         0       0       0
   875 ;;      Temps:          0       1       0
   876 ;;      Totals:         0       1       0
   877 ;;Total ram usage:        1 bytes
   878 ;; Hardware stack levels used:    1
   879 ;; Hardware stack levels required when called:    3
   880 ;; This function calls:
   881 ;;		___lbdiv
   882 ;;		___lbmod
   883 ;; This function is called by:
   884 ;;		_main
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           
   889                           ;psect for function _ledCtr
   890  0229                     _ledCtr:	
   891                           
   892                           ;main.c: 254: if(firstTime > 0)
   893                           
   894                           ;incstack = 0
   895                           ; Regs used in _ledCtr: [wreg+status,2+status,0+pclath+cstack]
   896  0229  085B               	movf	_firstTime,w
   897  022A  1903               	btfsc	3,2
   898  022B  2A36               	goto	l2845
   899  022C  3006               	movlw	6
   900                           
   901                           ;main.c: 255: {
   902                           ;main.c: 256: firstTime--;
   903  022D  03DB               	decf	_firstTime,f
   904                           
   905                           ;main.c: 257: ledStep = 6;
   906  022E  00F8               	movwf	_ledStep
   907                           
   908                           ;main.c: 258: if(prePwStep < pwStep)
   909  022F  0839               	movf	_pwStep,w
   910  0230  0277               	subwf	_prePwStep,w
   911  0231  1803               	skipnc
   912  0232  0008               	return
   913                           
   914                           ;main.c: 259: {
   915                           ;main.c: 260: prePwStep = pwStep;
   916  0233  0839               	movf	_pwStep,w
   917  0234  00F7               	movwf	_prePwStep
   918  0235  0008               	return
   919  0236                     l2845:	
   920                           
   921                           ;main.c: 263: else if(overWorkTime > 0)
   922  0236  0835               	movf	_overWorkTime,w
   923  0237  1903               	btfsc	3,2
   924  0238  2A48               	goto	l2855
   925  0239  303C               	movlw	60
   926                           
   927                           ;main.c: 264: {
   928                           ;main.c: 265: overWorkTime--;
   929  023A  03B5               	decf	_overWorkTime,f
   930                           
   931                           ;main.c: 266: if(overWorkTime % 60 < 30)
   932  023B  00F3               	movwf	___lbmod@divisor
   933  023C  0835               	movf	_overWorkTime,w
   934  023D  2429               	fcall	___lbmod
   935  023E  00CB               	movwf	??_ledCtr
   936  023F  301E               	movlw	30
   937  0240  024B               	subwf	??_ledCtr,w
   938  0241  1803               	skipnc
   939  0242  2A46               	goto	l2853
   940                           
   941                           ;main.c: 267: {
   942                           ;main.c: 268: ledStep = preLedStep;
   943  0243  0834               	movf	_preLedStep,w
   944  0244  00F8               	movwf	_ledStep
   945                           
   946                           ;main.c: 269: }
   947  0245  0008               	return
   948  0246                     l2853:	
   949                           
   950                           ;main.c: 270: else
   951                           ;main.c: 271: {
   952                           ;main.c: 272: ledStep = 0;
   953  0246  01F8               	clrf	_ledStep
   954  0247  0008               	return
   955  0248                     l2855:	
   956                           
   957                           ;main.c: 275: else if(showBatTime > 0)
   958  0248  0837               	movf	_showBatTime,w
   959  0249  1903               	btfsc	3,2
   960  024A  2A62               	goto	l2873
   961  024B  300E               	movlw	14
   962                           
   963                           ;main.c: 276: {
   964                           ;main.c: 277: showBatTime--;
   965  024C  03B7               	decf	_showBatTime,f
   966                           
   967                           ;main.c: 278: if(prePwStep >= 14)
   968  024D  0277               	subwf	_prePwStep,w
   969  024E  1C03               	skipc
   970  024F  2A56               	goto	l2863
   971                           
   972                           ;main.c: 279: {
   973                           ;main.c: 280: ledStep = prePwStep/14;
   974  0250  300E               	movlw	14
   975  0251  00F3               	movwf	___lbdiv@divisor
   976  0252  0877               	movf	_prePwStep,w
   977  0253  2461               	fcall	___lbdiv
   978  0254  00F8               	movwf	_ledStep
   979                           
   980                           ;main.c: 281: }
   981  0255  0008               	return
   982  0256                     l2863:	
   983                           
   984                           ;main.c: 282: else if(prePwStep > 5)
   985  0256  3006               	movlw	6
   986  0257  0277               	subwf	_prePwStep,w
   987  0258  1C03               	skipc
   988  0259  2A5D               	goto	l2867
   989  025A                     l2865:	
   990                           
   991                           ;main.c: 283: {
   992                           ;main.c: 284: ledStep = 1;
   993  025A  01F8               	clrf	_ledStep
   994  025B  0AF8               	incf	_ledStep,f
   995                           
   996                           ;main.c: 285: }
   997  025C  0008               	return
   998  025D                     l2867:	
   999                           
  1000                           ;main.c: 286: else
  1001                           ;main.c: 287: {
  1002                           ;main.c: 288: if(count1s < 50)
  1003  025D  3032               	movlw	50
  1004  025E  0245               	subwf	_count1s,w
  1005  025F  1C03               	btfss	3,0
  1006  0260  2A5A               	goto	l2865
  1007  0261  2A46               	goto	l2853
  1008  0262                     l2873:	
  1009                           ;main.c: 295: }
  1010                           ;main.c: 296: }
  1011                           ;main.c: 297: }
  1012                           
  1013                           
  1014                           ;main.c: 298: else if(workStep > 0)
  1015  0262  0879               	movf	_workStep,w
  1016  0263  1903               	btfsc	3,2
  1017  0264  2A68               	goto	l2877
  1018                           
  1019                           ;main.c: 299: {
  1020                           ;main.c: 300: ledStep = workStep;
  1021  0265  0879               	movf	_workStep,w
  1022  0266  00F8               	movwf	_ledStep
  1023                           
  1024                           ;main.c: 301: }
  1025  0267  0008               	return
  1026  0268                     l2877:	
  1027                           
  1028                           ;main.c: 302: else if(chrgFlag)
  1029  0268  087A               	movf	_chrgFlag,w
  1030  0269  1903               	btfsc	3,2
  1031  026A  2A46               	goto	l2853
  1032                           
  1033                           ;main.c: 303: {
  1034                           ;main.c: 304: if(count1s % 50 == 0)
  1035  026B  3032               	movlw	50
  1036  026C  00F3               	movwf	___lbmod@divisor
  1037  026D  0845               	movf	_count1s,w
  1038  026E  2429               	fcall	___lbmod
  1039  026F  3A00               	xorlw	0
  1040  0270  1D03               	skipz
  1041  0271  0008               	return
  1042                           
  1043                           ;main.c: 305: {
  1044                           ;main.c: 306: if(++ledStep > 6)
  1045  0272  3007               	movlw	7
  1046  0273  0AF8               	incf	_ledStep,f
  1047  0274  0278               	subwf	_ledStep,w
  1048  0275  1C03               	skipc
  1049  0276  0008               	return
  1050                           
  1051                           ;main.c: 307: {
  1052                           ;main.c: 308: ledStep = lockLedStep;
  1053  0277  0838               	movf	_lockLedStep,w
  1054  0278  00F8               	movwf	_ledStep
  1055  0279  0008               	return
  1056  027A                     __end_of_ledCtr:	
  1057                           
  1058                           	psect	text5
  1059  0429                     __ptext5:	
  1060 ;; *************** function ___lbmod *****************
  1061 ;; Defined at:
  1062 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;  dividend        1    wreg     unsigned char 
  1065 ;;  divisor         1    3[COMMON] unsigned char 
  1066 ;; Auto vars:     Size  Location     Type
  1067 ;;  dividend        1    0[BANK0 ] unsigned char 
  1068 ;;  rem             1    2[BANK0 ] unsigned char 
  1069 ;;  counter         1    1[BANK0 ] unsigned char 
  1070 ;; Return value:  Size  Location     Type
  1071 ;;                  1    wreg      unsigned char 
  1072 ;; Registers used:
  1073 ;;		wreg, status,2, status,0
  1074 ;; Tracked objects:
  1075 ;;		On entry : 100/0
  1076 ;;		On exit  : 100/0
  1077 ;;		Unchanged: 0/0
  1078 ;; Data sizes:     COMMON   BANK0   BANK1
  1079 ;;      Params:         1       0       0
  1080 ;;      Locals:         0       3       0
  1081 ;;      Temps:          1       0       0
  1082 ;;      Totals:         2       3       0
  1083 ;;Total ram usage:        5 bytes
  1084 ;; Hardware stack levels used:    1
  1085 ;; Hardware stack levels required when called:    2
  1086 ;; This function calls:
  1087 ;;		Nothing
  1088 ;; This function is called by:
  1089 ;;		_ledCtr
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           
  1094                           ;psect for function ___lbmod
  1095  0429                     ___lbmod:	
  1096                           
  1097                           ;incstack = 0
  1098                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1099                           ;___lbmod@dividend stored from wreg
  1100  0429  00C8               	movwf	___lbmod@dividend
  1101  042A  3008               	movlw	8
  1102  042B  00C9               	movwf	___lbmod@counter
  1103  042C  01CA               	clrf	___lbmod@rem
  1104  042D                     l2673:	
  1105  042D  0848               	movf	___lbmod@dividend,w
  1106  042E  00F4               	movwf	??___lbmod
  1107  042F  3007               	movlw	7
  1108  0430  1003               	clrc
  1109  0431                     L2:	
  1110  0431  0CF4               	rrf	??___lbmod,f
  1111  0432  3EFF               	addlw	-1
  1112  0433  1003               	clrc
  1113  0434  1D03               	skipz
  1114  0435  2C31               	goto	L2
  1115  0436  0D4A               	rlf	___lbmod@rem,w
  1116  0437  0474               	iorwf	??___lbmod,w
  1117  0438  00CA               	movwf	___lbmod@rem
  1118  0439  1003               	clrc
  1119  043A  0DC8               	rlf	___lbmod@dividend,f
  1120  043B  0873               	movf	___lbmod@divisor,w
  1121  043C  024A               	subwf	___lbmod@rem,w
  1122  043D  1C03               	skipc
  1123  043E  2C41               	goto	l2681
  1124  043F  0873               	movf	___lbmod@divisor,w
  1125  0440  02CA               	subwf	___lbmod@rem,f
  1126  0441                     l2681:	
  1127  0441  0BC9               	decfsz	___lbmod@counter,f
  1128  0442  2C2D               	goto	l2673
  1129  0443  084A               	movf	___lbmod@rem,w
  1130  0444  0008               	return
  1131  0445                     __end_of___lbmod:	
  1132                           
  1133                           	psect	text6
  1134  03C2                     __ptext6:	
  1135 ;; *************** function _keyCtr *****************
  1136 ;; Defined at:
  1137 ;;		line 415 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;		None
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;  kclick          1    4[COMMON] unsigned char 
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  1    wreg      void 
  1144 ;; Registers used:
  1145 ;;		wreg, status,2, status,0, pclath, cstack
  1146 ;; Tracked objects:
  1147 ;;		On entry : 100/0
  1148 ;;		On exit  : 100/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMMON   BANK0   BANK1
  1151 ;;      Params:         0       0       0
  1152 ;;      Locals:         1       0       0
  1153 ;;      Temps:          0       0       0
  1154 ;;      Totals:         1       0       0
  1155 ;;Total ram usage:        1 bytes
  1156 ;; Hardware stack levels used:    1
  1157 ;; Hardware stack levels required when called:    3
  1158 ;; This function calls:
  1159 ;;		_keyRead
  1160 ;; This function is called by:
  1161 ;;		_main
  1162 ;; This function uses a non-reentrant model
  1163 ;;
  1164                           
  1165                           
  1166                           ;psect for function _keyCtr
  1167  03C2                     _keyCtr:	
  1168                           
  1169                           ;main.c: 417: char kclick = keyRead(0x20 & (~PORTB));
  1170                           
  1171                           ;incstack = 0
  1172                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1173  03C2  0906               	comf	6,w	;volatile
  1174  03C3  3920               	andlw	32
  1175  03C4  240B               	fcall	_keyRead
  1176  03C5  00F4               	movwf	keyCtr@kclick
  1177                           
  1178                           ;main.c: 418: if(kclick == 1)
  1179  03C6  0B74               	decfsz	keyCtr@kclick,w
  1180  03C7  2BDC               	goto	l2363
  1181                           
  1182                           ;main.c: 419: {
  1183                           ;main.c: 420: if(workStep > 0)
  1184  03C8  0879               	movf	_workStep,w
  1185  03C9  1903               	btfsc	3,2
  1186  03CA  2BD3               	goto	l2355
  1187                           
  1188                           ;main.c: 421: {
  1189                           ;main.c: 422: if(++workStep > 6)
  1190  03CB  3007               	movlw	7
  1191  03CC  0AF9               	incf	_workStep,f
  1192  03CD  0279               	subwf	_workStep,w
  1193  03CE  1C03               	skipc
  1194  03CF  0008               	return
  1195                           
  1196                           ;main.c: 423: {
  1197                           ;main.c: 424: workStep = 1;
  1198  03D0  01F9               	clrf	_workStep
  1199  03D1  0AF9               	incf	_workStep,f
  1200  03D2  0008               	return
  1201  03D3                     l2355:	
  1202                           
  1203                           ;main.c: 427: else if(showBatTime > 0)
  1204  03D3  0837               	movf	_showBatTime,w
  1205  03D4  1903               	btfsc	3,2
  1206  03D5  2BD8               	goto	l2359
  1207  03D6                     l2357:	
  1208                           
  1209                           ;main.c: 428: {
  1210                           ;main.c: 429: showBatTime = 0;
  1211  03D6  01B7               	clrf	_showBatTime
  1212                           
  1213                           ;main.c: 430: }
  1214  03D7  0008               	return
  1215  03D8                     l2359:	
  1216                           
  1217                           ;main.c: 431: else
  1218                           ;main.c: 432: {
  1219                           ;main.c: 433: showBatTime = 200;
  1220  03D8  30C8               	movlw	200
  1221  03D9  00B7               	movwf	_showBatTime
  1222                           
  1223                           ;main.c: 434: count1s = 0;
  1224  03DA  01C5               	clrf	_count1s
  1225  03DB  0008               	return
  1226  03DC                     l2363:	
  1227                           
  1228                           ;main.c: 437: else if(kclick == 2)
  1229  03DC  3002               	movlw	2
  1230  03DD  0674               	xorwf	keyCtr@kclick,w
  1231  03DE  1D03               	btfss	3,2
  1232  03DF  0008               	return
  1233                           
  1234                           ;main.c: 438: {
  1235                           ;main.c: 439: if(workStep > 0)
  1236  03E0  0879               	movf	_workStep,w
  1237  03E1  1903               	btfsc	3,2
  1238  03E2  2BE5               	goto	l751
  1239                           
  1240                           ;main.c: 440: {
  1241                           ;main.c: 441: workStep = 0;
  1242  03E3  01F9               	clrf	_workStep
  1243                           
  1244                           ;main.c: 442: }
  1245  03E4  0008               	return
  1246  03E5                     l751:	
  1247  03E5  301E               	movlw	30
  1248                           
  1249                           ;main.c: 443: else
  1250                           ;main.c: 444: {
  1251                           ;main.c: 445: workStep = 1;
  1252  03E6  01F9               	clrf	_workStep
  1253  03E7  0AF9               	incf	_workStep,f
  1254                           
  1255                           ;main.c: 446: startTime = 30;
  1256  03E8  00BA               	movwf	_startTime
  1257  03E9  2BD6               	goto	l2357
  1258  03EA                     __end_of_keyCtr:	
  1259                           
  1260                           	psect	text7
  1261  040B                     __ptext7:	
  1262 ;; *************** function _keyRead *****************
  1263 ;; Defined at:
  1264 ;;		line 382 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;  keyStatus       1    wreg     unsigned char 
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;  keyStatus       1    3[COMMON] unsigned char 
  1269 ;; Return value:  Size  Location     Type
  1270 ;;                  1    wreg      unsigned char 
  1271 ;; Registers used:
  1272 ;;		wreg, status,2, status,0
  1273 ;; Tracked objects:
  1274 ;;		On entry : 100/0
  1275 ;;		On exit  : 100/0
  1276 ;;		Unchanged: 0/0
  1277 ;; Data sizes:     COMMON   BANK0   BANK1
  1278 ;;      Params:         0       0       0
  1279 ;;      Locals:         1       0       0
  1280 ;;      Temps:          0       0       0
  1281 ;;      Totals:         1       0       0
  1282 ;;Total ram usage:        1 bytes
  1283 ;; Hardware stack levels used:    1
  1284 ;; Hardware stack levels required when called:    2
  1285 ;; This function calls:
  1286 ;;		Nothing
  1287 ;; This function is called by:
  1288 ;;		_keyCtr
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292                           
  1293                           ;psect for function _keyRead
  1294  040B                     _keyRead:	
  1295                           
  1296                           ;incstack = 0
  1297                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1298                           ;keyRead@keyStatus stored from wreg
  1299  040B  00F3               	movwf	keyRead@keyStatus
  1300                           
  1301                           ;main.c: 384: if(keyStatus)
  1302  040C  0873               	movf	keyRead@keyStatus,w
  1303  040D  3064               	movlw	100
  1304  040E  1903               	btfsc	3,2
  1305  040F  2C1D               	goto	L4
  1306                           
  1307                           ;main.c: 385: {
  1308                           ;main.c: 386: keyCount++;
  1309  0410  0ABF               	incf	_keyCount,f
  1310                           
  1311                           ;main.c: 387: if(keyCount >= 100)
  1312  0411  023F               	subwf	_keyCount,w
  1313  0412  1C03               	skipc
  1314  0413  3400               	retlw	0
  1315                           
  1316                           ;main.c: 388: {
  1317                           ;main.c: 389: keyCount = 100;
  1318  0414  3064               	movlw	100
  1319  0415  00BF               	movwf	_keyCount
  1320                           
  1321                           ;main.c: 390: if(!longPressFlag)
  1322  0416  083E               	movf	_longPressFlag,w
  1323  0417  1D03               	btfss	3,2
  1324  0418  3400               	retlw	0
  1325  0419  3002               	movlw	2
  1326                           
  1327                           ;main.c: 391: {
  1328                           ;main.c: 392: longPressFlag = 1;
  1329  041A  01BE               	clrf	_longPressFlag
  1330  041B  0ABE               	incf	_longPressFlag,f
  1331                           
  1332                           ;main.c: 393: return 2;
  1333  041C  0008               	return
  1334  041D                     L4:	
  1335                           ;main.c: 397: else
  1336                           ;main.c: 398: {
  1337                           ;main.c: 399: if(keyCount >= 100)
  1338                           
  1339  041D  023F               	subwf	_keyCount,w
  1340  041E  1C03               	skipc
  1341  041F  2C23               	goto	l1975
  1342                           
  1343                           ;main.c: 400: {
  1344                           ;main.c: 401: keyCount = 0;
  1345  0420  01BF               	clrf	_keyCount
  1346                           
  1347                           ;main.c: 402: longPressFlag = 0;
  1348  0421  01BE               	clrf	_longPressFlag
  1349                           
  1350                           ;main.c: 403: return 0;
  1351  0422  3400               	retlw	0
  1352  0423                     l1975:	
  1353                           
  1354                           ;main.c: 405: else if(keyCount >= 4)
  1355  0423  3004               	movlw	4
  1356  0424  023F               	subwf	_keyCount,w
  1357                           
  1358                           ;main.c: 406: {
  1359                           ;main.c: 407: keyCount = 0;
  1360  0425  01BF               	clrf	_keyCount
  1361  0426  1803               	btfsc	3,0
  1362                           
  1363                           ;main.c: 408: return 1;
  1364  0427  3401               	retlw	1
  1365  0428  3400               	retlw	0
  1366  0429                     __end_of_keyRead:	
  1367                           ;main.c: 409: }
  1368                           ;main.c: 410: keyCount = 0;
  1369                           
  1370                           
  1371                           	psect	text8
  1372  02CB                     __ptext8:	
  1373 ;; *************** function _chrgCtr *****************
  1374 ;; Defined at:
  1375 ;;		line 320 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;		None
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;		None
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  1    wreg      void 
  1382 ;; Registers used:
  1383 ;;		wreg, status,2, status,0, pclath, cstack
  1384 ;; Tracked objects:
  1385 ;;		On entry : 100/0
  1386 ;;		On exit  : 100/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMMON   BANK0   BANK1
  1389 ;;      Params:         0       0       0
  1390 ;;      Locals:         0       0       0
  1391 ;;      Temps:          0       0       0
  1392 ;;      Totals:         0       0       0
  1393 ;;Total ram usage:        0 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; Hardware stack levels required when called:    3
  1396 ;; This function calls:
  1397 ;;		___lbdiv
  1398 ;; This function is called by:
  1399 ;;		_main
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           
  1404                           ;psect for function _chrgCtr
  1405  02CB                     _chrgCtr:	
  1406                           
  1407                           ;main.c: 322: if(PORTB & 0x04)
  1408                           
  1409                           ;incstack = 0
  1410                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1411  02CB  1D06               	btfss	6,2	;volatile
  1412  02CC  2AF6               	goto	l2267
  1413                           
  1414                           ;main.c: 323: {
  1415                           ;main.c: 324: if(chrgFlag == 0)
  1416  02CD  087A               	movf	_chrgFlag,w
  1417  02CE  1D03               	btfss	3,2
  1418  02CF  2AD3               	goto	l720
  1419                           
  1420                           ;main.c: 325: {
  1421                           ;main.c: 326: chrgFlag = 1;
  1422  02D0  01FA               	clrf	_chrgFlag
  1423  02D1  0AFA               	incf	_chrgFlag,f
  1424                           
  1425                           ;main.c: 328: chrgMaxDuty = 0;
  1426  02D2  01F8               	clrf	_ledStep
  1427  02D3                     l720:	
  1428                           
  1429                           ;main.c: 329: }
  1430                           ;main.c: 330: workStep = 0;
  1431  02D3  01F9               	clrf	_workStep
  1432                           
  1433                           ;main.c: 331: lowBatFlag = 0;
  1434  02D4  01B3               	clrf	_lowBatFlag
  1435                           
  1436                           ;main.c: 332: if(prePwStep < pwStep)
  1437  02D5  0839               	movf	_pwStep,w
  1438  02D6  0277               	subwf	_prePwStep,w
  1439  02D7  1803               	skipnc
  1440  02D8  2AE7               	goto	l2259
  1441                           
  1442                           ;main.c: 333: {
  1443                           ;main.c: 334: if(++count50s > 7200)
  1444  02D9  0AA6               	incf	_count50s,f
  1445  02DA  1903               	skipnz
  1446  02DB  0AA7               	incf	_count50s+1,f
  1447  02DC  301C               	movlw	28
  1448  02DD  0227               	subwf	_count50s+1,w
  1449  02DE  3021               	movlw	33
  1450  02DF  1903               	skipnz
  1451  02E0  0226               	subwf	_count50s,w
  1452  02E1  1C03               	skipc
  1453  02E2  2AE9               	goto	l2261
  1454                           
  1455                           ;main.c: 335: {
  1456                           ;main.c: 336: count50s = 0;
  1457  02E3  01A6               	clrf	_count50s
  1458  02E4  01A7               	clrf	_count50s+1
  1459                           
  1460                           ;main.c: 337: prePwStep++;
  1461  02E5  0AF7               	incf	_prePwStep,f
  1462  02E6  2AE9               	goto	l2261
  1463  02E7                     l2259:	
  1464                           
  1465                           ;main.c: 340: else
  1466                           ;main.c: 341: {
  1467                           ;main.c: 342: count50s = 0;
  1468  02E7  01A6               	clrf	_count50s
  1469  02E8  01A7               	clrf	_count50s+1
  1470  02E9                     l2261:	
  1471                           
  1472                           ;main.c: 343: }
  1473                           ;main.c: 344: if(prePwStep < 15)
  1474  02E9  300F               	movlw	15
  1475  02EA  0277               	subwf	_prePwStep,w
  1476  02EB  1803               	skipnc
  1477  02EC  2AEF               	goto	l2265
  1478                           
  1479                           ;main.c: 345: {
  1480                           ;main.c: 346: lockLedStep = 0;
  1481  02ED  01B8               	clrf	_lockLedStep
  1482                           
  1483                           ;main.c: 347: }
  1484  02EE  0008               	return
  1485  02EF                     l2265:	
  1486                           
  1487                           ;main.c: 348: else
  1488                           ;main.c: 349: {
  1489                           ;main.c: 350: lockLedStep = (prePwStep/14) - 1;
  1490  02EF  300E               	movlw	14
  1491  02F0  00F3               	movwf	___lbdiv@divisor
  1492  02F1  0877               	movf	_prePwStep,w
  1493  02F2  2461               	fcall	___lbdiv
  1494  02F3  3EFF               	addlw	255
  1495  02F4  00B8               	movwf	_lockLedStep
  1496  02F5  0008               	return
  1497  02F6                     l2267:	
  1498                           
  1499                           ;main.c: 362: lockCount = 0;
  1500  02F6  01FA               	clrf	_chrgFlag
  1501                           
  1502                           ;main.c: 364: chrgWaitTime = 20;
  1503  02F7  01B8               	clrf	_lockLedStep
  1504                           
  1505                           ;main.c: 365: if(prePwStep > 0 && prePwStep > pwStep)
  1506  02F8  0877               	movf	_prePwStep,w
  1507  02F9  1903               	btfsc	3,2
  1508  02FA  2B0D               	goto	l2279
  1509  02FB  0877               	movf	_prePwStep,w
  1510  02FC  0239               	subwf	_pwStep,w
  1511  02FD  1803               	skipnc
  1512  02FE  2B0D               	goto	l2279
  1513                           
  1514                           ;main.c: 366: {
  1515                           ;main.c: 367: if(++count50s > 2000)
  1516  02FF  0AA6               	incf	_count50s,f
  1517  0300  1903               	skipnz
  1518  0301  0AA7               	incf	_count50s+1,f
  1519  0302  3007               	movlw	7
  1520  0303  0227               	subwf	_count50s+1,w
  1521  0304  30D1               	movlw	209
  1522  0305  1903               	skipnz
  1523  0306  0226               	subwf	_count50s,w
  1524  0307  1C03               	skipc
  1525  0308  0008               	return
  1526                           
  1527                           ;main.c: 368: {
  1528                           ;main.c: 369: count50s = 0;
  1529  0309  01A6               	clrf	_count50s
  1530  030A  01A7               	clrf	_count50s+1
  1531                           
  1532                           ;main.c: 370: prePwStep--;
  1533  030B  03F7               	decf	_prePwStep,f
  1534  030C  0008               	return
  1535  030D                     l2279:	
  1536                           
  1537                           ;main.c: 373: else
  1538                           ;main.c: 374: {
  1539                           ;main.c: 375: count50s = 0;
  1540  030D  01A6               	clrf	_count50s
  1541  030E  01A7               	clrf	_count50s+1
  1542  030F  0008               	return
  1543  0310                     __end_of_chrgCtr:	
  1544                           
  1545                           	psect	text9
  1546  0461                     __ptext9:	
  1547 ;; *************** function ___lbdiv *****************
  1548 ;; Defined at:
  1549 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  1550 ;; Parameters:    Size  Location     Type
  1551 ;;  dividend        1    wreg     unsigned char 
  1552 ;;  divisor         1    3[COMMON] unsigned char 
  1553 ;; Auto vars:     Size  Location     Type
  1554 ;;  dividend        1    4[COMMON] unsigned char 
  1555 ;;  quotient        1    6[COMMON] unsigned char 
  1556 ;;  counter         1    5[COMMON] unsigned char 
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  1    wreg      unsigned char 
  1559 ;; Registers used:
  1560 ;;		wreg, status,2, status,0
  1561 ;; Tracked objects:
  1562 ;;		On entry : 100/0
  1563 ;;		On exit  : 100/0
  1564 ;;		Unchanged: 100/0
  1565 ;; Data sizes:     COMMON   BANK0   BANK1
  1566 ;;      Params:         1       0       0
  1567 ;;      Locals:         3       0       0
  1568 ;;      Temps:          0       0       0
  1569 ;;      Totals:         4       0       0
  1570 ;;Total ram usage:        4 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    2
  1573 ;; This function calls:
  1574 ;;		Nothing
  1575 ;; This function is called by:
  1576 ;;		_ledCtr
  1577 ;;		_chrgCtr
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           
  1582                           ;psect for function ___lbdiv
  1583  0461                     ___lbdiv:	
  1584                           
  1585                           ;incstack = 0
  1586                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1587                           ;___lbdiv@dividend stored from wreg
  1588  0461  00F4               	movwf	___lbdiv@dividend
  1589  0462  01F6               	clrf	___lbdiv@quotient
  1590  0463  0873               	movf	___lbdiv@divisor,w
  1591  0464  1903               	btfsc	3,2
  1592  0465  2C7A               	goto	l2093
  1593  0466  01F5               	clrf	___lbdiv@counter
  1594  0467                     l2079:	
  1595  0467  0AF5               	incf	___lbdiv@counter,f
  1596  0468  1BF3               	btfsc	___lbdiv@divisor,7
  1597  0469  2C6D               	goto	l1121
  1598  046A  1003               	clrc
  1599  046B  0DF3               	rlf	___lbdiv@divisor,f
  1600  046C  2C67               	goto	l2079
  1601  046D                     l1121:	
  1602  046D  1003               	clrc
  1603  046E  0DF6               	rlf	___lbdiv@quotient,f
  1604  046F  0873               	movf	___lbdiv@divisor,w
  1605  0470  0274               	subwf	___lbdiv@dividend,w
  1606  0471  1C03               	skipc
  1607  0472  2C77               	goto	L5
  1608  0473  0873               	movf	___lbdiv@divisor,w
  1609  0474  02F4               	subwf	___lbdiv@dividend,f
  1610  0475  1476               	bsf	___lbdiv@quotient,0
  1611  0476  1003               	clrc
  1612  0477                     L5:	
  1613  0477  0CF3               	rrf	___lbdiv@divisor,f
  1614  0478  0BF5               	decfsz	___lbdiv@counter,f
  1615  0479  2C6D               	goto	l1121
  1616  047A                     l2093:	
  1617  047A  0876               	movf	___lbdiv@quotient,w
  1618  047B  0008               	return
  1619  047C                     __end_of___lbdiv:	
  1620                           
  1621                           	psect	text10
  1622  019B                     __ptext10:	
  1623 ;; *************** function _checkOutA *****************
  1624 ;; Defined at:
  1625 ;;		line 495 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;		None
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;  maxAout         1   18[BANK0 ] unsigned char 
  1630 ;;  maxtempV        1    0        unsigned char 
  1631 ;; Return value:  Size  Location     Type
  1632 ;;                  1    wreg      void 
  1633 ;; Registers used:
  1634 ;;		wreg, status,2, status,0, pclath, cstack
  1635 ;; Tracked objects:
  1636 ;;		On entry : 100/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMMON   BANK0   BANK1
  1640 ;;      Params:         0       0       0
  1641 ;;      Locals:         0       2       0
  1642 ;;      Temps:          2       0       0
  1643 ;;      Totals:         2       2       0
  1644 ;;Total ram usage:        4 bytes
  1645 ;; Hardware stack levels used:    1
  1646 ;; Hardware stack levels required when called:    3
  1647 ;; This function calls:
  1648 ;;		_ADC_Sample
  1649 ;; This function is called by:
  1650 ;;		_main
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654                           
  1655                           ;psect for function _checkOutA
  1656  019B                     _checkOutA:	
  1657                           
  1658                           ;main.c: 497: test_adc = ADC_Sample(0, 5);
  1659                           
  1660                           ;incstack = 0
  1661                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  1662  019B  3005               	movlw	5
  1663  019C  00F3               	movwf	ADC_Sample@adldo
  1664  019D  3000               	movlw	0
  1665  019E  2018               	fcall	_ADC_Sample
  1666  019F  00C7               	movwf	_test_adc	;volatile
  1667                           
  1668                           ;main.c: 498: if (0xA5 == test_adc)
  1669  01A0  30A5               	movlw	165
  1670  01A1  0647               	xorwf	_test_adc,w	;volatile
  1671  01A2  1D03               	btfss	3,2
  1672  01A3  2A21               	goto	l2767
  1673                           
  1674                           ;main.c: 499: {
  1675                           ;main.c: 501: outADValue = adresult;
  1676  01A4  0831               	movf	_adresult+1,w	;volatile
  1677  01A5  00AB               	movwf	_outADValue+1
  1678  01A6  0830               	movf	_adresult,w	;volatile
  1679  01A7  00AA               	movwf	_outADValue
  1680                           
  1681                           ;main.c: 503: if(workStep && (outADValue > 600))
  1682  01A8  0879               	movf	_workStep,w
  1683  01A9  1903               	btfsc	3,2
  1684  01AA  29BA               	goto	l2701
  1685  01AB  3002               	movlw	2
  1686  01AC  022B               	subwf	_outADValue+1,w
  1687  01AD  3059               	movlw	89
  1688  01AE  1903               	skipnz
  1689  01AF  022A               	subwf	_outADValue,w
  1690  01B0  1C03               	skipc
  1691  01B1  29BA               	goto	l2701
  1692                           
  1693                           ;main.c: 504: {
  1694                           ;main.c: 505: if(++workOverOutTime > 50)
  1695  01B2  3033               	movlw	51
  1696  01B3  0AC1               	incf	_workOverOutTime,f
  1697  01B4  0241               	subwf	_workOverOutTime,w
  1698  01B5  1C03               	skipc
  1699  01B6  29BB               	goto	l2705
  1700                           
  1701                           ;main.c: 506: {
  1702                           ;main.c: 507: workOverOutTime = 0;
  1703  01B7  01C1               	clrf	_workOverOutTime
  1704                           
  1705                           ;main.c: 508: workStep = 0;
  1706  01B8  01F9               	clrf	_workStep
  1707  01B9  29BB               	goto	l2705
  1708  01BA                     l2701:	
  1709                           
  1710                           ;main.c: 511: else
  1711                           ;main.c: 512: {
  1712                           ;main.c: 513: workOverOutTime = 0;
  1713  01BA  01C1               	clrf	_workOverOutTime
  1714  01BB                     l2705:	
  1715                           
  1716                           ;main.c: 516: if(workStep < 6 && outADValue > maxtempV)
  1717  01BB  3006               	movlw	6
  1718  01BC  0279               	subwf	_workStep,w
  1719  01BD  1803               	skipnc
  1720  01BE  29CE               	goto	l2713
  1721  01BF  3000               	movlw	0
  1722  01C0  022B               	subwf	_outADValue+1,w
  1723  01C1  30C9               	movlw	201
  1724  01C2  1903               	skipnz
  1725  01C3  022A               	subwf	_outADValue,w
  1726  01C4  1C03               	skipc
  1727  01C5  29CE               	goto	l2713
  1728  01C6                     l2709:	
  1729                           
  1730                           ;main.c: 517: {
  1731                           ;main.c: 518: if(++overCount > 5)
  1732  01C6  3006               	movlw	6
  1733  01C7  0ABC               	incf	_overCount,f
  1734  01C8  023C               	subwf	_overCount,w
  1735  01C9  1C03               	skipc
  1736  01CA  2A1A               	goto	l2763
  1737                           
  1738                           ;main.c: 519: {
  1739                           ;main.c: 520: overCount = 5;
  1740  01CB  3005               	movlw	5
  1741  01CC  00BC               	movwf	_overCount
  1742  01CD  2A1A               	goto	l2763
  1743  01CE                     l2713:	
  1744                           
  1745                           ;main.c: 523: else if(outADValue > (maxtempV+100))
  1746  01CE  3001               	movlw	1
  1747  01CF  022B               	subwf	_outADValue+1,w
  1748  01D0  302D               	movlw	45
  1749  01D1  1903               	skipnz
  1750  01D2  022A               	subwf	_outADValue,w
  1751  01D3  1803               	btfsc	3,0
  1752  01D4  29C6               	goto	l2709
  1753                           
  1754                           ;main.c: 530: else
  1755                           ;main.c: 531: {
  1756                           ;main.c: 532: unsigned char maxAout = 40;
  1757                           
  1758                           ;main.c: 524: {
  1759                           ;main.c: 525: if(++overCount > 5)
  1760  01D5  3028               	movlw	40
  1761  01D6  00DA               	movwf	checkOutA@maxAout
  1762                           
  1763                           ;main.c: 533: if(pwStep < 40)
  1764  01D7  0239               	subwf	_pwStep,w
  1765  01D8  1803               	skipnc
  1766  01D9  29DC               	goto	l2723
  1767                           
  1768                           ;main.c: 534: {
  1769                           ;main.c: 535: maxAout = 37;
  1770  01DA  3025               	movlw	37
  1771  01DB  00DA               	movwf	checkOutA@maxAout
  1772  01DC                     l2723:	
  1773                           
  1774                           ;main.c: 536: }
  1775                           ;main.c: 537: if(workStep == 1)
  1776  01DC  0B79               	decfsz	_workStep,w
  1777  01DD  29E0               	goto	l2727
  1778                           
  1779                           ;main.c: 538: {
  1780                           ;main.c: 539: maxAout = maxAout + 1;
  1781  01DE  0ADA               	incf	checkOutA@maxAout,f
  1782                           
  1783                           ;main.c: 540: }
  1784  01DF  29FC               	goto	l779
  1785  01E0                     l2727:	
  1786                           
  1787                           ;main.c: 541: else if(workStep == 2)
  1788  01E0  3002               	movlw	2
  1789  01E1  0679               	xorwf	_workStep,w
  1790                           
  1791                           ;main.c: 542: {
  1792                           ;main.c: 543: maxAout = maxAout + 3;
  1793  01E2  3003               	movlw	3
  1794  01E3  1903               	btfsc	3,2
  1795  01E4  29FB               	goto	L9
  1796                           
  1797                           ;main.c: 545: else if(workStep == 3)
  1798                           
  1799                           ;main.c: 544: }
  1800  01E5  0679               	xorwf	_workStep,w
  1801  01E6  1D03               	btfss	3,2
  1802  01E7  29EA               	goto	l2735
  1803                           
  1804                           ;main.c: 546: {
  1805                           ;main.c: 547: maxAout = maxAout + 5;
  1806  01E8  3005               	movlw	5
  1807  01E9  29FB               	goto	L9
  1808  01EA                     l2735:	
  1809                           ;main.c: 548: }
  1810                           
  1811                           
  1812                           ;main.c: 549: else if(workStep == 4)
  1813  01EA  3004               	movlw	4
  1814  01EB  0679               	xorwf	_workStep,w
  1815  01EC  1D03               	btfss	3,2
  1816  01ED  29F0               	goto	l2739
  1817                           
  1818                           ;main.c: 550: {
  1819                           ;main.c: 551: maxAout = maxAout + 7;
  1820  01EE  3007               	movlw	7
  1821  01EF  29FB               	goto	L9
  1822  01F0                     l2739:	
  1823                           ;main.c: 552: }
  1824                           
  1825                           
  1826                           ;main.c: 553: else if(workStep == 5)
  1827  01F0  3005               	movlw	5
  1828  01F1  0679               	xorwf	_workStep,w
  1829  01F2  1D03               	btfss	3,2
  1830  01F3  29F6               	goto	l2743
  1831                           
  1832                           ;main.c: 554: {
  1833                           ;main.c: 555: maxAout = maxAout + 9;
  1834  01F4  3009               	movlw	9
  1835  01F5  29FB               	goto	L9
  1836  01F6                     l2743:	
  1837                           ;main.c: 556: }
  1838                           
  1839                           
  1840                           ;main.c: 557: else if(workStep == 6)
  1841  01F6  3006               	movlw	6
  1842  01F7  0679               	xorwf	_workStep,w
  1843  01F8  1D03               	btfss	3,2
  1844  01F9  29FC               	goto	l779
  1845                           
  1846                           ;main.c: 558: {
  1847                           ;main.c: 559: maxAout = maxAout + 12;
  1848  01FA  300C               	movlw	12
  1849  01FB                     L9:	
  1850  01FB  07DA               	addwf	checkOutA@maxAout,f
  1851  01FC                     l779:	
  1852                           
  1853                           ;main.c: 560: }
  1854                           ;main.c: 561: if(overCount > 0)
  1855  01FC  083C               	movf	_overCount,w
  1856  01FD  1D03               	btfss	3,2
  1857                           
  1858                           ;main.c: 562: {
  1859                           ;main.c: 563: overCount--;
  1860  01FE  03BC               	decf	_overCount,f
  1861                           
  1862                           ;main.c: 564: }
  1863                           ;main.c: 565: if(outADValue > maxAout)
  1864  01FF  085A               	movf	checkOutA@maxAout,w
  1865  0200  00F4               	movwf	??_checkOutA
  1866  0201  01F5               	clrf	??_checkOutA+1
  1867  0202  082B               	movf	_outADValue+1,w
  1868  0203  0275               	subwf	??_checkOutA+1,w
  1869  0204  1D03               	skipz
  1870  0205  2A08               	goto	u2705
  1871  0206  082A               	movf	_outADValue,w
  1872  0207  0274               	subwf	??_checkOutA,w
  1873  0208                     u2705:	
  1874  0208  1803               	skipnc
  1875  0209  2A15               	goto	l2757
  1876                           
  1877                           ;main.c: 566: {
  1878                           ;main.c: 568: if(startTime == 0)
  1879  020A  083A               	movf	_startTime,w
  1880  020B  1D03               	btfss	3,2
  1881  020C  2A12               	goto	l2755
  1882                           
  1883                           ;main.c: 569: {
  1884                           ;main.c: 570: tempDuty = 81 + (workStep*3);
  1885  020D  0879               	movf	_workStep,w
  1886  020E  0779               	addwf	_workStep,w
  1887  020F  0779               	addwf	_workStep,w
  1888  0210  3E51               	addlw	81
  1889  0211  2A13               	goto	L10
  1890  0212                     l2755:	
  1891                           ;main.c: 571: }
  1892                           
  1893                           
  1894                           ;main.c: 572: else
  1895                           ;main.c: 573: {
  1896                           ;main.c: 574: tempDuty = maxDuty;
  1897  0212  083D               	movf	_maxDuty,w
  1898  0213                     L10:	
  1899  0213  00BB               	movwf	_tempDuty
  1900  0214  2A1A               	goto	l2763
  1901  0215                     l2757:	
  1902                           
  1903                           ;main.c: 582: if(tempDuty > maxDuty)
  1904  0215  083B               	movf	_tempDuty,w
  1905  0216  023D               	subwf	_maxDuty,w
  1906  0217  1803               	skipnc
  1907  0218  2A12               	goto	l2755
  1908                           
  1909                           ;main.c: 583: {
  1910                           ;main.c: 584: tempDuty--;
  1911  0219  03BB               	decf	_tempDuty,f
  1912  021A                     l2763:	
  1913                           ;main.c: 585: }
  1914                           
  1915                           
  1916                           ;main.c: 589: }
  1917                           ;main.c: 591: }
  1918                           ;main.c: 593: }
  1919                           ;main.c: 594: PWMD23H = 0X00;
  1920  021A  1683               	bsf	3,5	;RP0=1, select bank1
  1921  021B  019E               	clrf	30	;volatile
  1922                           
  1923                           ;main.c: 595: PWMD3L = tempDuty;
  1924  021C  1283               	bcf	3,5	;RP0=0, select bank0
  1925  021D  083B               	movf	_tempDuty,w
  1926  021E  1683               	bsf	3,5	;RP0=1, select bank1
  1927  021F  009C               	movwf	28	;volatile
  1928                           
  1929                           ;main.c: 596: }
  1930  0220  0008               	return
  1931  0221                     l2767:	
  1932                           
  1933                           ;main.c: 597: else
  1934                           ;main.c: 598: {
  1935                           ;main.c: 599: ADCON0 = 0;
  1936  0221  1683               	bsf	3,5	;RP0=1, select bank1
  1937  0222  0195               	clrf	21	;volatile
  1938                           
  1939                           ;main.c: 600: ADCON1 = 0;
  1940  0223  0196               	clrf	22	;volatile
  1941                           
  1942                           ;main.c: 601: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1943  0224  3085               	movlw	133
  1944  0225  00F4               	movwf	??_checkOutA
  1945  0226                     u3087:	
  1946  0226  0BF4               	decfsz	??_checkOutA,f
  1947  0227  2A26               	goto	u3087
  1948  0228  0008               	return
  1949  0229                     __end_of_checkOutA:	
  1950                           
  1951                           	psect	text11
  1952  0101                     __ptext11:	
  1953 ;; *************** function _checkBatAD *****************
  1954 ;; Defined at:
  1955 ;;		line 605 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;		None
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;		None
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  1    wreg      void 
  1962 ;; Registers used:
  1963 ;;		wreg, status,2, status,0, pclath, cstack
  1964 ;; Tracked objects:
  1965 ;;		On entry : 100/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMMON   BANK0   BANK1
  1969 ;;      Params:         0       0       0
  1970 ;;      Locals:         0       0       0
  1971 ;;      Temps:          2       0       0
  1972 ;;      Totals:         2       0       0
  1973 ;;Total ram usage:        2 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    3
  1976 ;; This function calls:
  1977 ;;		_ADC_Sample
  1978 ;; This function is called by:
  1979 ;;		_main
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           
  1984                           ;psect for function _checkBatAD
  1985  0101                     _checkBatAD:	
  1986                           
  1987                           ;main.c: 607: test_adc = ADC_Sample(1, 5);
  1988                           
  1989                           ;incstack = 0
  1990                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  1991  0101  3005               	movlw	5
  1992  0102  00F3               	movwf	ADC_Sample@adldo
  1993  0103  3001               	movlw	1
  1994  0104  2018               	fcall	_ADC_Sample
  1995  0105  00C7               	movwf	_test_adc	;volatile
  1996                           
  1997                           ;main.c: 608: if (0xA5 == test_adc)
  1998  0106  30A5               	movlw	165
  1999  0107  0647               	xorwf	_test_adc,w	;volatile
  2000  0108  1D03               	btfss	3,2
  2001  0109  295C               	goto	l2809
  2002                           
  2003                           ;main.c: 609: {
  2004                           ;main.c: 610: batADValue = adresult;
  2005  010A  0831               	movf	_adresult+1,w	;volatile
  2006  010B  00A9               	movwf	_batADValue+1
  2007  010C  0830               	movf	_adresult,w	;volatile
  2008  010D  00A8               	movwf	_batADValue
  2009                           
  2010                           ;main.c: 611: if(batADValue < 1117)
  2011  010E  3004               	movlw	4
  2012  010F  0229               	subwf	_batADValue+1,w
  2013  0110  305D               	movlw	93
  2014  0111  1903               	skipnz
  2015  0112  0228               	subwf	_batADValue,w
  2016  0113  1803               	skipnc
  2017  0114  292E               	goto	l2793
  2018                           
  2019                           ;main.c: 612: {
  2020                           ;main.c: 613: pwStep = 0;
  2021  0115  01B9               	clrf	_pwStep
  2022                           
  2023                           ;main.c: 614: if(++count8s > 800)
  2024  0116  0AA2               	incf	_count8s,f
  2025  0117  1903               	skipnz
  2026  0118  0AA3               	incf	_count8s+1,f
  2027  0119  3003               	movlw	3
  2028  011A  0223               	subwf	_count8s+1,w
  2029  011B  3021               	movlw	33
  2030  011C  1903               	skipnz
  2031  011D  0222               	subwf	_count8s,w
  2032  011E  1C03               	skipc
  2033  011F  2963               	goto	l2813
  2034                           
  2035                           ;main.c: 615: {
  2036                           ;main.c: 616: count8s = 0;
  2037  0120  01A2               	clrf	_count8s
  2038  0121  01A3               	clrf	_count8s+1
  2039                           
  2040                           ;main.c: 617: lowBatFlag = 1;
  2041  0122  01B3               	clrf	_lowBatFlag
  2042  0123  0AB3               	incf	_lowBatFlag,f
  2043                           
  2044                           ;main.c: 618: if(workStep > 0)
  2045  0124  0879               	movf	_workStep,w
  2046  0125  1903               	btfsc	3,2
  2047  0126  292B               	goto	l2789
  2048                           
  2049                           ;main.c: 619: {
  2050                           ;main.c: 620: overWorkTime = 180;
  2051  0127  30B4               	movlw	180
  2052  0128  00B5               	movwf	_overWorkTime
  2053                           
  2054                           ;main.c: 621: preLedStep = workStep;
  2055  0129  0879               	movf	_workStep,w
  2056  012A  00B4               	movwf	_preLedStep
  2057  012B                     l2789:	
  2058                           
  2059                           ;main.c: 622: }
  2060                           ;main.c: 623: prePwStep = 0;
  2061  012B  01F7               	clrf	_prePwStep
  2062                           
  2063                           ;main.c: 624: workStep = 0;
  2064  012C  01F9               	clrf	_workStep
  2065  012D  2963               	goto	l2813
  2066  012E                     l2793:	
  2067  012E  3005               	movlw	5
  2068                           
  2069                           ;main.c: 627: else
  2070                           ;main.c: 628: {
  2071                           ;main.c: 629: count8s = 0;
  2072  012F  01A2               	clrf	_count8s
  2073  0130  01A3               	clrf	_count8s+1
  2074                           
  2075                           ;main.c: 630: if(batADValue >= 1340)
  2076  0131  0229               	subwf	_batADValue+1,w
  2077  0132  303C               	movlw	60
  2078  0133  1903               	skipnz
  2079  0134  0228               	subwf	_batADValue,w
  2080                           
  2081                           ;main.c: 631: {
  2082                           ;main.c: 632: pwStep = ((batADValue - 1340) /2) + 13;
  2083  0135  0828               	movf	_batADValue,w
  2084  0136  1C03               	skipc
  2085  0137  2945               	goto	L13
  2086  0138  3EC4               	addlw	196
  2087  0139  00F4               	movwf	??_checkBatAD
  2088  013A  0829               	movf	_batADValue+1,w
  2089  013B  1803               	skipnc
  2090  013C  3E01               	addlw	1
  2091  013D  3EFA               	addlw	250
  2092  013E  00F5               	movwf	??_checkBatAD+1
  2093  013F  1003               	clrc
  2094  0140  0CF5               	rrf	??_checkBatAD+1,f
  2095  0141  0CF4               	rrf	??_checkBatAD,f
  2096  0142  0874               	movf	??_checkBatAD,w
  2097  0143  3E0D               	addlw	13
  2098  0144  2954               	goto	L12
  2099  0145                     L13:	
  2100                           ;main.c: 634: else
  2101                           ;main.c: 635: {
  2102                           ;main.c: 636: pwStep = (batADValue - 1117) / 16;
  2103                           
  2104                           ;main.c: 633: }
  2105                           
  2106  0145  3EA3               	addlw	163
  2107  0146  00F4               	movwf	??_checkBatAD
  2108  0147  0829               	movf	_batADValue+1,w
  2109  0148  1803               	skipnc
  2110  0149  3E01               	addlw	1
  2111  014A  3EFB               	addlw	251
  2112  014B  00F5               	movwf	??_checkBatAD+1
  2113  014C  3004               	movlw	4
  2114  014D                     u2785:	
  2115  014D  1003               	clrc
  2116  014E  0CF5               	rrf	??_checkBatAD+1,f
  2117  014F  0CF4               	rrf	??_checkBatAD,f
  2118  0150  3EFF               	addlw	-1
  2119  0151  1D03               	skipz
  2120  0152  294D               	goto	u2785
  2121  0153  0874               	movf	??_checkBatAD,w
  2122  0154                     L12:	
  2123  0154  00B9               	movwf	_pwStep
  2124                           
  2125                           ;main.c: 637: }
  2126                           ;main.c: 638: if(pwStep > 99)
  2127  0155  3064               	movlw	100
  2128  0156  0239               	subwf	_pwStep,w
  2129  0157  1C03               	skipc
  2130  0158  2963               	goto	l2813
  2131                           
  2132                           ;main.c: 639: {
  2133                           ;main.c: 640: pwStep = 99;
  2134  0159  3063               	movlw	99
  2135  015A  00B9               	movwf	_pwStep
  2136  015B  2963               	goto	l2813
  2137  015C                     l2809:	
  2138                           
  2139                           ;main.c: 648: else
  2140                           ;main.c: 649: {
  2141                           ;main.c: 650: ADCON0 = 0;
  2142  015C  1683               	bsf	3,5	;RP0=1, select bank1
  2143  015D  0195               	clrf	21	;volatile
  2144                           
  2145                           ;main.c: 651: ADCON1 = 0;
  2146  015E  0196               	clrf	22	;volatile
  2147                           
  2148                           ;main.c: 652: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2149  015F  3085               	movlw	133
  2150  0160  00F4               	movwf	??_checkBatAD
  2151  0161                     u3097:	
  2152  0161  0BF4               	decfsz	??_checkBatAD,f
  2153  0162  2961               	goto	u3097
  2154  0163                     l2813:	
  2155                           
  2156                           ;main.c: 653: }
  2157                           ;main.c: 654: test_adc = ADC_Sample(2, 5);
  2158  0163  3005               	movlw	5
  2159  0164  00F3               	movwf	ADC_Sample@adldo
  2160  0165  3002               	movlw	2
  2161  0166  2018               	fcall	_ADC_Sample
  2162  0167  00C7               	movwf	_test_adc	;volatile
  2163                           
  2164                           ;main.c: 655: if (0xA5 == test_adc)
  2165  0168  30A5               	movlw	165
  2166  0169  0647               	xorwf	_test_adc,w	;volatile
  2167  016A  1D03               	btfss	3,2
  2168  016B  2993               	goto	l2831
  2169                           
  2170                           ;main.c: 656: {
  2171                           ;main.c: 657: if(chrgFlag && adresult > 100)
  2172  016C  087A               	movf	_chrgFlag,w
  2173  016D  1903               	btfsc	3,2
  2174  016E  0008               	return
  2175  016F  3000               	movlw	0
  2176  0170  0231               	subwf	_adresult+1,w	;volatile
  2177  0171  3065               	movlw	101
  2178  0172  1903               	skipnz
  2179  0173  0230               	subwf	_adresult,w	;volatile
  2180  0174  1C03               	skipc
  2181  0175  0008               	return
  2182                           
  2183                           ;main.c: 658: {
  2184                           ;main.c: 660: if(adresult > 810 || (batADValue - adresult) > 810)
  2185  0176  3003               	movlw	3
  2186  0177  0231               	subwf	_adresult+1,w	;volatile
  2187  0178  302B               	movlw	43
  2188  0179  1903               	skipnz
  2189  017A  0230               	subwf	_adresult,w	;volatile
  2190  017B  1803               	skipnc
  2191  017C  298C               	goto	l2825
  2192  017D  0830               	movf	_adresult,w	;volatile
  2193  017E  0228               	subwf	_batADValue,w
  2194  017F  00F4               	movwf	??_checkBatAD
  2195  0180  0831               	movf	_adresult+1,w	;volatile
  2196  0181  1C03               	skipc
  2197  0182  0A31               	incf	_adresult+1,w	;volatile
  2198  0183  0229               	subwf	_batADValue+1,w
  2199  0184  00F5               	movwf	??_checkBatAD+1
  2200  0185  3003               	movlw	3
  2201  0186  0275               	subwf	??_checkBatAD+1,w
  2202  0187  302B               	movlw	43
  2203  0188  1903               	skipnz
  2204  0189  0274               	subwf	??_checkBatAD,w
  2205  018A  1C03               	skipc
  2206  018B  2991               	goto	l2827
  2207  018C                     l2825:	
  2208                           
  2209                           ;main.c: 661: {
  2210                           ;main.c: 663: if(++countHalfFull > 250)
  2211  018C  30FB               	movlw	251
  2212  018D  0AC2               	incf	_countHalfFull,f
  2213  018E  0242               	subwf	_countHalfFull,w
  2214  018F  1C03               	skipc
  2215  0190  0008               	return
  2216  0191                     l2827:	
  2217                           
  2218                           ;main.c: 666: protectFlag = 2;
  2219  0191  01C2               	clrf	_countHalfFull
  2220                           
  2221                           ;main.c: 672: }
  2222                           ;main.c: 673: }
  2223                           ;main.c: 674: }
  2224  0192  0008               	return
  2225  0193                     l2831:	
  2226                           
  2227                           ;main.c: 675: else
  2228                           ;main.c: 676: {
  2229                           ;main.c: 677: ADCON0 = 0;
  2230  0193  1683               	bsf	3,5	;RP0=1, select bank1
  2231  0194  0195               	clrf	21	;volatile
  2232                           
  2233                           ;main.c: 678: ADCON1 = 0;
  2234  0195  0196               	clrf	22	;volatile
  2235                           
  2236                           ;main.c: 679: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2237  0196  3085               	movlw	133
  2238  0197  00F4               	movwf	??_checkBatAD
  2239  0198                     u3107:	
  2240  0198  0BF4               	decfsz	??_checkBatAD,f
  2241  0199  2998               	goto	u3107
  2242  019A  0008               	return
  2243  019B                     __end_of_checkBatAD:	
  2244                           
  2245                           	psect	text12
  2246  0018                     __ptext12:	
  2247 ;; *************** function _ADC_Sample *****************
  2248 ;; Defined at:
  2249 ;;		line 889 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;  adch            1    wreg     unsigned char 
  2252 ;;  adldo           1    3[COMMON] unsigned char 
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;  adch            1    5[BANK0 ] unsigned char 
  2255 ;;  j               1    4[BANK0 ] unsigned char 
  2256 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  2257 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  2258 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  2259 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  2260 ;;  i               1    6[BANK0 ] unsigned char 
  2261 ;; Return value:  Size  Location     Type
  2262 ;;                  1    wreg      unsigned char 
  2263 ;; Registers used:
  2264 ;;		wreg, status,2, status,0
  2265 ;; Tracked objects:
  2266 ;;		On entry : 0/0
  2267 ;;		On exit  : 100/0
  2268 ;;		Unchanged: 0/0
  2269 ;; Data sizes:     COMMON   BANK0   BANK1
  2270 ;;      Params:         1       0       0
  2271 ;;      Locals:         0      13       0
  2272 ;;      Temps:          0       4       0
  2273 ;;      Totals:         1      17       0
  2274 ;;Total ram usage:       18 bytes
  2275 ;; Hardware stack levels used:    1
  2276 ;; Hardware stack levels required when called:    2
  2277 ;; This function calls:
  2278 ;;		Nothing
  2279 ;; This function is called by:
  2280 ;;		_checkOutA
  2281 ;;		_checkBatAD
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           
  2286                           ;psect for function _ADC_Sample
  2287  0018                     _ADC_Sample:	
  2288                           
  2289                           ;incstack = 0
  2290                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2291                           ;ADC_Sample@adch stored from wreg
  2292  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2293  0019  00CD               	movwf	ADC_Sample@adch
  2294                           
  2295                           ;main.c: 891: volatile unsigned long adsum = 0;
  2296                           
  2297                           ;main.c: 892: volatile unsigned int admin = 0, admax = 0;
  2298  001A  20F3               	fcall	PL4	;call to abstracted procedure
  2299                           
  2300                           ;main.c: 893: volatile unsigned int ad_temp = 0;
  2301  001B  01D7               	clrf	ADC_Sample@ad_temp	;volatile
  2302  001C  01D8               	clrf	ADC_Sample@ad_temp+1	;volatile
  2303                           
  2304                           ;main.c: 895: if ((!LDO_EN) && (adldo & 0x04) )
  2305  001D  1683               	bsf	3,5	;RP0=1, select bank1
  2306  001E  1D16               	btfss	22,2	;volatile
  2307  001F  1D73               	btfss	ADC_Sample@adldo,2
  2308  0020  282A               	goto	l2607
  2309                           
  2310                           ;main.c: 896: {
  2311                           ;main.c: 898: ADCON1 = adldo;
  2312  0021  0873               	movf	ADC_Sample@adldo,w
  2313  0022  0096               	movwf	22	;volatile
  2314                           
  2315                           ;main.c: 899: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2316  0023  3084               	movlw	132
  2317  0024  1283               	bcf	3,5	;RP0=0, select bank0
  2318  0025  00C8               	movwf	??_ADC_Sample
  2319  0026                     u3117:	
  2320  0026  0BC8               	decfsz	??_ADC_Sample,f
  2321  0027  2826               	goto	u3117
  2322  0028  2829               	nop2
  2323                           
  2324                           ;main.c: 900: }
  2325  0029  282C               	goto	l2609
  2326  002A                     l2607:	
  2327                           
  2328                           ;main.c: 901: else
  2329                           ;main.c: 902: ADCON1 = adldo;
  2330  002A  0873               	movf	ADC_Sample@adldo,w
  2331  002B  0096               	movwf	22	;volatile
  2332  002C                     l2609:	
  2333                           
  2334                           ;main.c: 904: if(adch & 0x10)
  2335  002C  1283               	bcf	3,5	;RP0=0, select bank0
  2336  002D  1E4D               	btfss	ADC_Sample@adch,4
  2337  002E  2834               	goto	l2617
  2338                           
  2339                           ;main.c: 905: {
  2340                           ;main.c: 906: CHS4 = 1;
  2341  002F  1683               	bsf	3,5	;RP0=1, select bank1
  2342  0030  1716               	bsf	22,6	;volatile
  2343                           
  2344                           ;main.c: 907: adch &= 0x0f;
  2345  0031  300F               	movlw	15
  2346  0032  1283               	bcf	3,5	;RP0=0, select bank0
  2347  0033  05CD               	andwf	ADC_Sample@adch,f
  2348  0034                     l2617:	
  2349                           
  2350                           ;main.c: 910: for (i = 0; i < 10; i++)
  2351  0034  01CE               	clrf	ADC_Sample@i
  2352  0035                     l2623:	
  2353                           
  2354                           ;main.c: 911: {
  2355                           ;main.c: 912: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2356  0035  084D               	movf	ADC_Sample@adch,w
  2357  0036  00C8               	movwf	??_ADC_Sample
  2358  0037  3001               	movlw	1
  2359  0038  1003               	clrc
  2360  0039                     L14:	
  2361  0039  0DC8               	rlf	??_ADC_Sample,f
  2362  003A  3EFF               	addlw	-1
  2363  003B  1003               	clrc
  2364  003C  1D03               	skipz
  2365  003D  2839               	goto	L14
  2366  003E  0D48               	rlf	??_ADC_Sample,w
  2367  003F  3841               	iorlw	65
  2368  0040  1683               	bsf	3,5	;RP0=1, select bank1
  2369  0041  0095               	movwf	21	;volatile
  2370  0042  0000               	nop	;# 
  2371  0043  0000               	nop	;# 
  2372  0044  0000               	nop	;# 
  2373  0045  0000               	nop	;# 
  2374                           
  2375                           ;main.c: 917: GODONE = 1;
  2376  0046  1683               	bsf	3,5	;RP0=1, select bank1
  2377  0047  1495               	bsf	21,1	;volatile
  2378                           
  2379                           ;main.c: 919: unsigned char j = 0;
  2380  0048  1283               	bcf	3,5	;RP0=0, select bank0
  2381  0049  01CC               	clrf	ADC_Sample@j
  2382  004A                     l844:	
  2383                           ;main.c: 920: while (GODONE)
  2384                           
  2385  004A  1683               	bsf	3,5	;RP0=1, select bank1
  2386  004B  1C95               	btfss	21,1	;volatile
  2387  004C  2855               	goto	l2633
  2388                           
  2389                           ;main.c: 921: {
  2390                           ;main.c: 922: _delay((unsigned long)((2)*(16000000/4000000.0)));
  2391  004D  284E               	nop2	;2 cycle nop
  2392  004E  284F               	nop2	;2 cycle nop
  2393  004F  2850               	nop2	;2 cycle nop
  2394  0050  2851               	nop2	;2 cycle nop
  2395                           
  2396                           ;main.c: 924: if (0 == (--j))
  2397  0051  1283               	bcf	3,5	;RP0=0, select bank0
  2398  0052  0BCC               	decfsz	ADC_Sample@j,f
  2399  0053  284A               	goto	l844
  2400                           
  2401                           ;main.c: 925: return 0;
  2402  0054  3400               	retlw	0
  2403  0055                     l2633:	
  2404                           
  2405                           ;main.c: 926: }
  2406                           ;main.c: 928: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2407  0055  0819               	movf	25,w	;volatile
  2408  0056  1283               	bcf	3,5	;RP0=0, select bank0
  2409  0057  00D7               	movwf	ADC_Sample@ad_temp	;volatile
  2410  0058  01D8               	clrf	ADC_Sample@ad_temp+1	;volatile
  2411  0059  0ED7               	swapf	ADC_Sample@ad_temp,f	;volatile
  2412  005A  0ED8               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2413  005B  30F0               	movlw	240
  2414  005C  05D8               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2415  005D  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2416  005E  390F               	andlw	15
  2417  005F  04D8               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2418  0060  30F0               	movlw	240
  2419  0061  05D7               	andwf	ADC_Sample@ad_temp,f	;volatile
  2420  0062  1683               	bsf	3,5	;RP0=1, select bank1
  2421  0063  0E18               	swapf	24,w	;volatile
  2422  0064  390F               	andlw	15
  2423  0065  1283               	bcf	3,5	;RP0=0, select bank0
  2424  0066  07D7               	addwf	ADC_Sample@ad_temp,f	;volatile
  2425  0067  1803               	skipnc
  2426  0068  0AD8               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2427                           
  2428                           ;main.c: 930: if (0 == admax)
  2429  0069  0855               	movf	ADC_Sample@admax,w	;volatile
  2430  006A  0456               	iorwf	ADC_Sample@admax+1,w	;volatile
  2431  006B  1D03               	btfss	3,2
  2432  006C  286F               	goto	l2641
  2433                           
  2434                           ;main.c: 931: {
  2435                           ;main.c: 932: admax = ad_temp;
  2436  006D  20FC               	fcall	PL6	;call to abstracted procedure
  2437  006E  2881               	goto	l2647
  2438  006F                     l2641:	
  2439                           ;main.c: 934: }
  2440                           
  2441                           ;main.c: 933: admin = ad_temp;
  2442                           
  2443                           
  2444                           ;main.c: 935: else if (ad_temp > admax)
  2445  006F  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2446  0070  0256               	subwf	ADC_Sample@admax+1,w	;volatile
  2447  0071  1D03               	skipz
  2448  0072  2875               	goto	u2425
  2449  0073  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2450  0074  0255               	subwf	ADC_Sample@admax,w	;volatile
  2451  0075                     u2425:	
  2452  0075  1803               	skipnc
  2453  0076  2879               	goto	l2645
  2454                           
  2455                           ;main.c: 936: admax = ad_temp;
  2456  0077  20FC               	fcall	PL6	;call to abstracted procedure
  2457  0078  2885               	goto	l850
  2458  0079                     l2645:	
  2459                           
  2460                           ;main.c: 937: else if (ad_temp < admin)
  2461  0079  0854               	movf	ADC_Sample@admin+1,w	;volatile
  2462  007A  0258               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2463  007B  1D03               	skipz
  2464  007C  287F               	goto	u2435
  2465  007D  0853               	movf	ADC_Sample@admin,w	;volatile
  2466  007E  0257               	subwf	ADC_Sample@ad_temp,w	;volatile
  2467  007F                     u2435:	
  2468  007F  1803               	skipnc
  2469  0080  2885               	goto	l850
  2470  0081                     l2647:	
  2471                           
  2472                           ;main.c: 938: admin = ad_temp;
  2473  0081  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2474  0082  00D4               	movwf	ADC_Sample@admin+1	;volatile
  2475  0083  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2476  0084  00D3               	movwf	ADC_Sample@admin	;volatile
  2477  0085                     l850:	
  2478                           
  2479                           ;main.c: 940: adsum += ad_temp;
  2480  0085  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2481  0086  00C8               	movwf	??_ADC_Sample
  2482  0087  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2483  0088  00C9               	movwf	??_ADC_Sample+1
  2484  0089  01CA               	clrf	??_ADC_Sample+2
  2485  008A  01CB               	clrf	??_ADC_Sample+3
  2486  008B  0848               	movf	??_ADC_Sample,w
  2487  008C  07CF               	addwf	ADC_Sample@adsum,f	;volatile
  2488  008D  0849               	movf	??_ADC_Sample+1,w
  2489  008E  1103               	clrz
  2490  008F  1803               	skipnc
  2491  0090  3E01               	addlw	1
  2492  0091  1D03               	btfss	3,2
  2493  0092  07D0               	addwf	ADC_Sample@adsum+1,f	;volatile
  2494  0093  084A               	movf	??_ADC_Sample+2,w
  2495  0094  1103               	clrz
  2496  0095  1803               	skipnc
  2497  0096  3E01               	addlw	1
  2498  0097  1D03               	btfss	3,2
  2499  0098  07D1               	addwf	ADC_Sample@adsum+2,f	;volatile
  2500  0099  084B               	movf	??_ADC_Sample+3,w
  2501  009A  1103               	clrz
  2502  009B  1803               	skipnc
  2503  009C  3E01               	addlw	1
  2504  009D  1D03               	btfss	3,2
  2505  009E  07D2               	addwf	ADC_Sample@adsum+3,f	;volatile
  2506  009F  300A               	movlw	10
  2507  00A0  0ACE               	incf	ADC_Sample@i,f
  2508  00A1  024E               	subwf	ADC_Sample@i,w
  2509  00A2  1C03               	skipc
  2510  00A3  2835               	goto	l2623
  2511                           
  2512                           ;main.c: 941: }
  2513                           ;main.c: 942: adsum -= admax;
  2514  00A4  0855               	movf	ADC_Sample@admax,w	;volatile
  2515  00A5  00C8               	movwf	??_ADC_Sample
  2516  00A6  0856               	movf	ADC_Sample@admax+1,w	;volatile
  2517  00A7  20E4               	fcall	PL2	;call to abstracted procedure
  2518  00A8  1C03               	skipc
  2519  00A9  0F4B               	incfsz	??_ADC_Sample+3,w
  2520  00AA  02D2               	subwf	ADC_Sample@adsum+3,f	;volatile
  2521                           
  2522                           ;main.c: 943: if (adsum >= admin)
  2523  00AB  0853               	movf	ADC_Sample@admin,w	;volatile
  2524  00AC  00C8               	movwf	??_ADC_Sample
  2525  00AD  0854               	movf	ADC_Sample@admin+1,w	;volatile
  2526  00AE  00C9               	movwf	??_ADC_Sample+1
  2527  00AF  01CA               	clrf	??_ADC_Sample+2
  2528  00B0  01CB               	clrf	??_ADC_Sample+3
  2529  00B1  084B               	movf	??_ADC_Sample+3,w
  2530  00B2  0252               	subwf	ADC_Sample@adsum+3,w	;volatile
  2531  00B3  1D03               	skipz
  2532  00B4  28BF               	goto	u2475
  2533  00B5  084A               	movf	??_ADC_Sample+2,w
  2534  00B6  0251               	subwf	ADC_Sample@adsum+2,w	;volatile
  2535  00B7  1D03               	skipz
  2536  00B8  28BF               	goto	u2475
  2537  00B9  0849               	movf	??_ADC_Sample+1,w
  2538  00BA  0250               	subwf	ADC_Sample@adsum+1,w	;volatile
  2539  00BB  1D03               	skipz
  2540  00BC  28BF               	goto	u2475
  2541  00BD  0848               	movf	??_ADC_Sample,w
  2542  00BE  024F               	subwf	ADC_Sample@adsum,w	;volatile
  2543  00BF                     u2475:	
  2544  00BF  1C03               	skipc
  2545  00C0  28C9               	goto	l854
  2546                           
  2547                           ;main.c: 944: adsum -= admin;
  2548  00C1  0853               	movf	ADC_Sample@admin,w	;volatile
  2549  00C2  00C8               	movwf	??_ADC_Sample
  2550  00C3  0854               	movf	ADC_Sample@admin+1,w	;volatile
  2551  00C4  20E4               	fcall	PL2	;call to abstracted procedure
  2552  00C5  1C03               	skipc
  2553  00C6  0F4B               	incfsz	??_ADC_Sample+3,w
  2554  00C7  02D2               	subwf	ADC_Sample@adsum+3,f	;volatile
  2555  00C8  28CD               	goto	l2657
  2556  00C9                     l854:	
  2557                           
  2558                           ;main.c: 945: else
  2559                           ;main.c: 946: adsum = 0;
  2560  00C9  01CF               	clrf	ADC_Sample@adsum	;volatile
  2561  00CA  01D0               	clrf	ADC_Sample@adsum+1	;volatile
  2562  00CB  01D1               	clrf	ADC_Sample@adsum+2	;volatile
  2563  00CC  01D2               	clrf	ADC_Sample@adsum+3	;volatile
  2564  00CD                     l2657:	
  2565                           
  2566                           ;main.c: 948: adresult = adsum >> 3;
  2567  00CD  084F               	movf	ADC_Sample@adsum,w	;volatile
  2568  00CE  00C8               	movwf	??_ADC_Sample
  2569  00CF  0850               	movf	ADC_Sample@adsum+1,w	;volatile
  2570  00D0  00C9               	movwf	??_ADC_Sample+1
  2571  00D1  0851               	movf	ADC_Sample@adsum+2,w	;volatile
  2572  00D2  00CA               	movwf	??_ADC_Sample+2
  2573  00D3  0852               	movf	ADC_Sample@adsum+3,w	;volatile
  2574  00D4  00CB               	movwf	??_ADC_Sample+3
  2575  00D5  3003               	movlw	3
  2576  00D6                     u2495:	
  2577  00D6  1003               	clrc
  2578  00D7  0CCB               	rrf	??_ADC_Sample+3,f
  2579  00D8  0CCA               	rrf	??_ADC_Sample+2,f
  2580  00D9  0CC9               	rrf	??_ADC_Sample+1,f
  2581  00DA  0CC8               	rrf	??_ADC_Sample,f
  2582  00DB  3EFF               	addlw	-1
  2583  00DC  1D03               	skipz
  2584  00DD  28D6               	goto	u2495
  2585  00DE  0849               	movf	??_ADC_Sample+1,w
  2586  00DF  00B1               	movwf	_adresult+1	;volatile
  2587  00E0  0848               	movf	??_ADC_Sample,w
  2588  00E1  00B0               	movwf	_adresult	;volatile
  2589                           
  2590                           ;main.c: 950: adsum = 0;
  2591                           
  2592                           ;main.c: 951: admin = 0;
  2593                           
  2594                           ;main.c: 952: admax = 0;
  2595  00E2  20F3               	fcall	PL4	;call to abstracted procedure
  2596                           
  2597                           ;main.c: 953: return 0xA5;
  2598  00E3  34A5               	retlw	165
  2599  00E4                     __end_of_ADC_Sample:	
  2600  00E4                     PL2:	
  2601  00E4  00C9               	movwf	??_ADC_Sample+1
  2602  00E5  01CA               	clrf	??_ADC_Sample+2
  2603  00E6  01CB               	clrf	??_ADC_Sample+3
  2604  00E7  0848               	movf	??_ADC_Sample,w
  2605  00E8  02CF               	subwf	ADC_Sample@adsum,f	;volatile
  2606  00E9  0849               	movf	??_ADC_Sample+1,w
  2607  00EA  1C03               	skipc
  2608  00EB  0F49               	incfsz	??_ADC_Sample+1,w
  2609  00EC  02D0               	subwf	ADC_Sample@adsum+1,f	;volatile
  2610  00ED  084A               	movf	??_ADC_Sample+2,w
  2611  00EE  1C03               	skipc
  2612  00EF  0F4A               	incfsz	??_ADC_Sample+2,w
  2613  00F0  02D1               	subwf	ADC_Sample@adsum+2,f	;volatile
  2614  00F1  084B               	movf	??_ADC_Sample+3,w
  2615  00F2  0008               	return
  2616  00F3                     __end_ofPL2:	
  2617  00F3                     PL4:	
  2618  00F3  01CF               	clrf	ADC_Sample@adsum	;volatile
  2619  00F4  01D0               	clrf	ADC_Sample@adsum+1	;volatile
  2620  00F5  01D1               	clrf	ADC_Sample@adsum+2	;volatile
  2621  00F6  01D2               	clrf	ADC_Sample@adsum+3	;volatile
  2622  00F7  01D3               	clrf	ADC_Sample@admin	;volatile
  2623  00F8  01D4               	clrf	ADC_Sample@admin+1	;volatile
  2624  00F9  01D5               	clrf	ADC_Sample@admax	;volatile
  2625  00FA  01D6               	clrf	ADC_Sample@admax+1	;volatile
  2626  00FB  0008               	return
  2627  00FC                     __end_ofPL4:	
  2628  00FC                     PL6:	
  2629  00FC  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2630  00FD  00D6               	movwf	ADC_Sample@admax+1	;volatile
  2631  00FE  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2632  00FF  00D5               	movwf	ADC_Sample@admax	;volatile
  2633  0100  0008               	return
  2634  0101                     __end_ofPL6:	
  2635                           
  2636                           	psect	text13
  2637  0310                     __ptext13:	
  2638 ;; *************** function _Sleep_Mode *****************
  2639 ;; Defined at:
  2640 ;;		line 813 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
  2641 ;; Parameters:    Size  Location     Type
  2642 ;;		None
  2643 ;; Auto vars:     Size  Location     Type
  2644 ;;		None
  2645 ;; Return value:  Size  Location     Type
  2646 ;;                  1    wreg      void 
  2647 ;; Registers used:
  2648 ;;		wreg, status,2, status,0, pclath, cstack
  2649 ;; Tracked objects:
  2650 ;;		On entry : 100/0
  2651 ;;		On exit  : 100/100
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMMON   BANK0   BANK1
  2654 ;;      Params:         0       0       0
  2655 ;;      Locals:         0       0       0
  2656 ;;      Temps:          0       0       0
  2657 ;;      Totals:         0       0       0
  2658 ;;Total ram usage:        0 bytes
  2659 ;; Hardware stack levels used:    1
  2660 ;; Hardware stack levels required when called:    3
  2661 ;; This function calls:
  2662 ;;		_AD_Init
  2663 ;;		_Init_System
  2664 ;; This function is called by:
  2665 ;;		_main
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669                           
  2670                           ;psect for function _Sleep_Mode
  2671  0310                     _Sleep_Mode:	
  2672                           
  2673                           ;main.c: 815: INTCON = 0;
  2674                           
  2675                           ;incstack = 0
  2676                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  2677  0310  018B               	clrf	11	;volatile
  2678                           
  2679                           ;main.c: 817: OPTION_REG = 0;
  2680  0311  0181               	clrf	1	;volatile
  2681                           
  2682                           ;main.c: 819: TRISA = 0x07;
  2683  0312  3007               	movlw	7
  2684  0313  1683               	bsf	3,5	;RP0=1, select bank1
  2685  0314  0085               	movwf	5	;volatile
  2686                           
  2687                           ;main.c: 820: WPUA = 0B00000000;
  2688  0315  0188               	clrf	8	;volatile
  2689                           
  2690                           ;main.c: 821: PORTA = 0x00;
  2691  0316  0186               	clrf	6	;volatile
  2692                           
  2693                           ;main.c: 822: TRISB = 0x24;
  2694  0317  3024               	movlw	36
  2695  0318  1283               	bcf	3,5	;RP0=0, select bank0
  2696  0319  0085               	movwf	5	;volatile
  2697                           
  2698                           ;main.c: 823: PORTB = 0B00000000;
  2699  031A  0186               	clrf	6	;volatile
  2700                           
  2701                           ;main.c: 824: WPUB = 0x20;
  2702  031B  3020               	movlw	32
  2703  031C  0088               	movwf	8	;volatile
  2704                           
  2705                           ;main.c: 826: ADCON0 = 0;
  2706  031D  1683               	bsf	3,5	;RP0=1, select bank1
  2707  031E  0195               	clrf	21	;volatile
  2708                           
  2709                           ;main.c: 827: ADCON1 = 0;
  2710  031F  0196               	clrf	22	;volatile
  2711                           
  2712                           ;main.c: 829: PWMCON0 = 0;
  2713  0320  1283               	bcf	3,5	;RP0=0, select bank0
  2714  0321  0195               	clrf	21	;volatile
  2715                           
  2716                           ;main.c: 831: OSCCON = 0X70;
  2717  0322  3070               	movlw	112
  2718  0323  0094               	movwf	20	;volatile
  2719                           
  2720                           ;main.c: 833: IOCA = 0B00000000;
  2721  0324  1683               	bsf	3,5	;RP0=1, select bank1
  2722  0325  0189               	clrf	9	;volatile
  2723                           
  2724                           ;main.c: 834: IOCB = 0x24;
  2725  0326  3024               	movlw	36
  2726  0327  1283               	bcf	3,5	;RP0=0, select bank0
  2727  0328  0089               	movwf	9	;volatile
  2728                           
  2729                           ;main.c: 836: RAIE = 1;
  2730  0329  158E               	bsf	14,3	;volatile
  2731                           
  2732                           ;main.c: 837: PEIE = 1;
  2733  032A  170B               	bsf	11,6	;volatile
  2734                           
  2735                           ;main.c: 838: RBIE = 1;
  2736  032B  158B               	bsf	11,3	;volatile
  2737                           
  2738                           ;main.c: 839: GIE = 0;
  2739  032C  138B               	bcf	11,7	;volatile
  2740                           
  2741                           ;main.c: 841: PIE1 &= 0X08;
  2742  032D  3008               	movlw	8
  2743  032E  058E               	andwf	14,f	;volatile
  2744                           
  2745                           ;main.c: 842: PIR1 = 0;
  2746  032F  018D               	clrf	13	;volatile
  2747                           
  2748                           ;main.c: 843: INTCON &= 0XC8;
  2749  0330  30C8               	movlw	200
  2750  0331  058B               	andwf	11,f	;volatile
  2751                           
  2752                           ;main.c: 845: PORTA;
  2753  0332  1683               	bsf	3,5	;RP0=1, select bank1
  2754  0333  0806               	movf	6,w	;volatile
  2755                           
  2756                           ;main.c: 846: RAIF = 0;
  2757  0334  1283               	bcf	3,5	;RP0=0, select bank0
  2758  0335  118D               	bcf	13,3	;volatile
  2759                           
  2760                           ;main.c: 847: PORTB;
  2761  0336  0806               	movf	6,w	;volatile
  2762                           
  2763                           ;main.c: 848: RBIF = 0;
  2764  0337  100B               	bcf	11,0	;volatile
  2765  0338  0064               	clrwdt	;# 
  2766  0339  0063               	sleep	;# 
  2767  033A  0000               	nop	;# 
  2768  033B  0064               	clrwdt	;# 
  2769  033C  0000               	nop	;# 
  2770  033D  0000               	nop	;# 
  2771  033E  0000               	nop	;# 
  2772  033F  0000               	nop	;# 
  2773  0340  0000               	nop	;# 
  2774                           
  2775                           ;main.c: 860: if(RAIF) RAIF = 0;
  2776  0341  1283               	bcf	3,5	;RP0=0, select bank0
  2777  0342  198D               	btfsc	13,3	;volatile
  2778  0343  118D               	bcf	13,3	;volatile
  2779                           
  2780                           ;main.c: 861: if(RBIF) RBIF = 0;
  2781  0344  180B               	btfsc	11,0	;volatile
  2782  0345  100B               	bcf	11,0	;volatile
  2783                           
  2784                           ;main.c: 862: if(TMR2IF) TMR2IF = 0;
  2785  0346  188D               	btfsc	13,1	;volatile
  2786  0347  108D               	bcf	13,1	;volatile
  2787                           
  2788                           ;main.c: 863: IOCA = 0B00000000;
  2789  0348  1683               	bsf	3,5	;RP0=1, select bank1
  2790  0349  0189               	clrf	9	;volatile
  2791                           
  2792                           ;main.c: 864: IOCB = 0B00000000;
  2793  034A  1283               	bcf	3,5	;RP0=0, select bank0
  2794  034B  0189               	clrf	9	;volatile
  2795                           
  2796                           ;main.c: 865: Init_System();
  2797  034C  23EA               	fcall	_Init_System
  2798                           
  2799                           ;main.c: 866: AD_Init();
  2800  034D  2C92               	ljmp	l1943
  2801  034E                     __end_of_Sleep_Mode:	
  2802                           
  2803                           	psect	text14
  2804  03EA                     __ptext14:	
  2805 ;; *************** function _Init_System *****************
  2806 ;; Defined at:
  2807 ;;		line 692 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;		None
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;		None
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      void 
  2814 ;; Registers used:
  2815 ;;		wreg, status,2
  2816 ;; Tracked objects:
  2817 ;;		On entry : 100/0
  2818 ;;		On exit  : 100/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMMON   BANK0   BANK1
  2821 ;;      Params:         0       0       0
  2822 ;;      Locals:         0       0       0
  2823 ;;      Temps:          0       0       0
  2824 ;;      Totals:         0       0       0
  2825 ;;Total ram usage:        0 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:    2
  2828 ;; This function calls:
  2829 ;;		Nothing
  2830 ;; This function is called by:
  2831 ;;		_main
  2832 ;;		_Sleep_Mode
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           
  2837                           ;psect for function _Init_System
  2838  03EA                     _Init_System:	
  2839                           
  2840                           ;incstack = 0
  2841                           ; Regs used in _Init_System: [wreg+status,2]
  2842  03EA  0000               	nop	;# 
  2843  03EB  0064               	clrwdt	;# 
  2844                           
  2845                           ;main.c: 696: OPTION_REG = 0;
  2846  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  2847  03ED  0181               	clrf	1	;volatile
  2848  03EE  0064               	clrwdt	;# 
  2849                           
  2850                           ;main.c: 698: OSCCON = 0X72;
  2851  03EF  3072               	movlw	114
  2852  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  2853  03F1  0094               	movwf	20	;volatile
  2854                           
  2855                           ;main.c: 700: WPUA = 0B00000000;
  2856  03F2  1683               	bsf	3,5	;RP0=1, select bank1
  2857  03F3  0188               	clrf	8	;volatile
  2858                           
  2859                           ;main.c: 701: WPDA = 0x00;
  2860  03F4  0187               	clrf	7	;volatile
  2861                           
  2862                           ;main.c: 702: WPUB = 0x20;
  2863  03F5  3020               	movlw	32
  2864  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  2865  03F7  0088               	movwf	8	;volatile
  2866                           
  2867                           ;main.c: 704: TRISA = 0x07;
  2868  03F8  3007               	movlw	7
  2869  03F9  1683               	bsf	3,5	;RP0=1, select bank1
  2870  03FA  0085               	movwf	5	;volatile
  2871                           
  2872                           ;main.c: 705: TRISB = 0x24;
  2873  03FB  3024               	movlw	36
  2874  03FC  1283               	bcf	3,5	;RP0=0, select bank0
  2875  03FD  0085               	movwf	5	;volatile
  2876                           
  2877                           ;main.c: 707: PORTA = 0X00;
  2878  03FE  1683               	bsf	3,5	;RP0=1, select bank1
  2879  03FF  0186               	clrf	6	;volatile
  2880                           
  2881                           ;main.c: 708: PORTB = 0X00;
  2882  0400  1283               	bcf	3,5	;RP0=0, select bank0
  2883  0401  0186               	clrf	6	;volatile
  2884                           
  2885                           ;main.c: 712: PR2 = 249;
  2886  0402  30F9               	movlw	249
  2887  0403  0091               	movwf	17	;volatile
  2888                           
  2889                           ;main.c: 713: TMR2IF = 0;
  2890  0404  108D               	bcf	13,1	;volatile
  2891                           
  2892                           ;main.c: 714: TMR2IE = 1;
  2893  0405  148E               	bsf	14,1	;volatile
  2894                           
  2895                           ;main.c: 716: T2CON = 0B00000100;
  2896  0406  3004               	movlw	4
  2897  0407  0093               	movwf	19	;volatile
  2898                           
  2899                           ;main.c: 717: INTCON = 0XC0;
  2900  0408  30C0               	movlw	192
  2901  0409  008B               	movwf	11	;volatile
  2902  040A  0008               	return
  2903  040B                     __end_of_Init_System:	
  2904                           
  2905                           	psect	text15
  2906  0492                     __ptext15:	
  2907 ;; *************** function _AD_Init *****************
  2908 ;; Defined at:
  2909 ;;		line 729 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;		None
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;		None
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, status,2
  2918 ;; Tracked objects:
  2919 ;;		On entry : 100/0
  2920 ;;		On exit  : 100/100
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMMON   BANK0   BANK1
  2923 ;;      Params:         0       0       0
  2924 ;;      Locals:         0       0       0
  2925 ;;      Temps:          0       0       0
  2926 ;;      Totals:         0       0       0
  2927 ;;Total ram usage:        0 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    2
  2930 ;; This function calls:
  2931 ;;		Nothing
  2932 ;; This function is called by:
  2933 ;;		_main
  2934 ;;		_Sleep_Mode
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           
  2939                           ;psect for function _AD_Init
  2940  0492                     _AD_Init:	
  2941  0492                     l1943:	
  2942                           ;incstack = 0
  2943                           ; Regs used in _AD_Init: [wreg+status,2]
  2944                           
  2945                           
  2946                           ;main.c: 762: ADCON0 = 0X41;
  2947  0492  3041               	movlw	65
  2948  0493  1683               	bsf	3,5	;RP0=1, select bank1
  2949  0494  0095               	movwf	21	;volatile
  2950                           
  2951                           ;main.c: 779: ADCON1 = 0;
  2952  0495  0196               	clrf	22	;volatile
  2953                           
  2954                           ;main.c: 780: ANSEL0 = 0X07;
  2955  0496  3007               	movlw	7
  2956  0497  0093               	movwf	19	;volatile
  2957  0498  0008               	return
  2958  0499                     __end_of_AD_Init:	
  2959                           
  2960                           	psect	text16
  2961  0445                     __ptext16:	
  2962 ;; *************** function _Isr_Timer *****************
  2963 ;; Defined at:
  2964 ;;		line 112 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;		None
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;		None
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  1    wreg      void 
  2971 ;; Registers used:
  2972 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 100/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMMON   BANK0   BANK1
  2978 ;;      Params:         0       0       0
  2979 ;;      Locals:         0       0       0
  2980 ;;      Temps:          3       0       0
  2981 ;;      Totals:         3       0       0
  2982 ;;Total ram usage:        3 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:    1
  2985 ;; This function calls:
  2986 ;;		_ledShow
  2987 ;; This function is called by:
  2988 ;;		Interrupt level 1
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           
  2993                           ;psect for function _Isr_Timer
  2994  0445                     _Isr_Timer:	
  2995                           
  2996                           ;main.c: 114: if(TMR2IF)
  2997  0445  1283               	bcf	3,5	;RP0=0, select bank0
  2998  0446  1C8D               	btfss	13,1	;volatile
  2999  0447  2C58               	goto	i1l658
  3000                           
  3001                           ;main.c: 115: {
  3002                           ;main.c: 116: TMR2IF = 0;
  3003  0448  108D               	bcf	13,1	;volatile
  3004                           
  3005                           ;main.c: 117: if(++intCount >= 160)
  3006  0449  30A0               	movlw	160
  3007  044A  0AC6               	incf	_intCount,f
  3008  044B  0246               	subwf	_intCount,w
  3009  044C  1C03               	skipc
  3010  044D  2C56               	goto	i1l2529
  3011  044E  3064               	movlw	100
  3012                           
  3013                           ;main.c: 118: {
  3014                           ;main.c: 119: intCount = 0;
  3015  044F  01C6               	clrf	_intCount
  3016                           
  3017                           ;main.c: 120: IntFlag = 1;
  3018  0450  01C4               	clrf	_IntFlag
  3019  0451  0AC4               	incf	_IntFlag,f
  3020                           
  3021                           ;main.c: 121: if(++count1s >= 100)
  3022  0452  0AC5               	incf	_count1s,f
  3023  0453  0245               	subwf	_count1s,w
  3024  0454  1803               	btfsc	3,0
  3025                           
  3026                           ;main.c: 122: {
  3027                           ;main.c: 123: count1s = 0;
  3028  0455  01C5               	clrf	_count1s
  3029  0456                     i1l2529:	
  3030                           
  3031                           ;main.c: 124: }
  3032                           ;main.c: 125: }
  3033                           ;main.c: 126: ledShow();
  3034  0456  227A               	fcall	_ledShow
  3035                           
  3036                           ;main.c: 127: intCount10++;
  3037  0457  0AC3               	incf	_intCount10,f
  3038  0458                     i1l658:	
  3039  0458  0872               	movf	??_Isr_Timer+2,w
  3040  0459  008A               	movwf	10
  3041  045A  0871               	movf	??_Isr_Timer+1,w
  3042  045B  0084               	movwf	4
  3043  045C  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3044  045D  0083               	movwf	3
  3045  045E  0EFE               	swapf	126,f
  3046  045F  0E7E               	swapf	126,w
  3047  0460  0009               	retfie
  3048  0461                     __end_of_Isr_Timer:	
  3049                           
  3050                           	psect	intentry
  3051  0004                     __pintentry:	
  3052                           ;incstack = 0
  3053                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3054                           
  3055  0004                     interrupt_function:	
  3056  007E                     saved_w	set	btemp
  3057  0004  00FE               	movwf	btemp
  3058  0005  0E03               	swapf	3,w
  3059  0006  00F0               	movwf	??_Isr_Timer
  3060  0007  0804               	movf	4,w
  3061  0008  00F1               	movwf	??_Isr_Timer+1
  3062  0009  080A               	movf	10,w
  3063  000A  00F2               	movwf	??_Isr_Timer+2
  3064  000B  2C45               	ljmp	_Isr_Timer
  3065                           
  3066                           	psect	text17
  3067  027A                     __ptext17:	
  3068 ;; *************** function _ledShow *****************
  3069 ;; Defined at:
  3070 ;;		line 175 in file "C:\mcuproject\scm\zdt\D109_062B_SOP16\main.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;		None
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;		None
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  1    wreg      void 
  3077 ;; Registers used:
  3078 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3079 ;; Tracked objects:
  3080 ;;		On entry : 100/0
  3081 ;;		On exit  : 100/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMMON   BANK0   BANK1
  3084 ;;      Params:         0       0       0
  3085 ;;      Locals:         0       0       0
  3086 ;;      Temps:          0       0       0
  3087 ;;      Totals:         0       0       0
  3088 ;;Total ram usage:        0 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; This function calls:
  3091 ;;		Nothing
  3092 ;; This function is called by:
  3093 ;;		_Isr_Timer
  3094 ;; This function uses a non-reentrant model
  3095 ;;
  3096                           
  3097                           
  3098                           ;psect for function _ledShow
  3099  027A                     _ledShow:	
  3100                           
  3101                           ;main.c: 178: if(++ledCntTime > 30)
  3102                           
  3103                           ;incstack = 0
  3104                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3105  027A  301F               	movlw	31
  3106  027B  0AB6               	incf	_ledCntTime,f
  3107  027C  0236               	subwf	_ledCntTime,w
  3108  027D  1C03               	skipc
  3109  027E  0008               	return
  3110  027F  3006               	movlw	6
  3111                           
  3112                           ;main.c: 179: {
  3113                           ;main.c: 180: ledCntTime = 0;
  3114  0280  01B6               	clrf	_ledCntTime
  3115                           
  3116                           ;main.c: 181: if(++ledCnt > 5)
  3117  0281  0AC0               	incf	_ledCnt,f
  3118  0282  0240               	subwf	_ledCnt,w
  3119  0283  1803               	btfsc	3,0
  3120                           
  3121                           ;main.c: 182: {
  3122                           ;main.c: 183: ledCnt = 0;
  3123  0284  01C0               	clrf	_ledCnt
  3124                           
  3125                           ;main.c: 184: }
  3126                           ;main.c: 185: PORTB &= 0x7C;
  3127  0285  307C               	movlw	124
  3128  0286  0586               	andwf	6,f	;volatile
  3129                           
  3130                           ;main.c: 186: TRISB |= 0x83;
  3131  0287  3083               	movlw	131
  3132  0288  0485               	iorwf	5,f	;volatile
  3133                           
  3134                           ;main.c: 187: switch(ledCnt)
  3135  0289  2ABF               	goto	i1l2153
  3136  028A                     i1l2127:	
  3137                           
  3138                           ;main.c: 190: if(ledStep > 0)
  3139  028A  0878               	movf	_ledStep,w
  3140  028B  1903               	btfsc	3,2
  3141  028C  0008               	return
  3142                           
  3143                           ;main.c: 191: {
  3144                           ;main.c: 192: TRISB &= 0xFD;
  3145  028D  1085               	bcf	5,1	;volatile
  3146                           
  3147                           ;main.c: 193: TRISB &= 0xFE;
  3148  028E  1005               	bcf	5,0	;volatile
  3149                           
  3150                           ;main.c: 194: RB1 = 1;
  3151  028F  1486               	bsf	6,1	;volatile
  3152                           
  3153                           ;main.c: 195: RB0 = 0;
  3154  0290  1006               	bcf	6,0	;volatile
  3155  0291  0008               	return
  3156  0292                     i1l2131:	
  3157                           
  3158                           ;main.c: 199: if(ledStep > 1)
  3159  0292  3002               	movlw	2
  3160  0293  0278               	subwf	_ledStep,w
  3161  0294  1C03               	skipc
  3162  0295  0008               	return
  3163                           
  3164                           ;main.c: 200: {
  3165                           ;main.c: 201: TRISB &= 0xFE;
  3166  0296  1005               	bcf	5,0	;volatile
  3167                           
  3168                           ;main.c: 202: TRISB &= 0x7F;
  3169  0297  1385               	bcf	5,7	;volatile
  3170                           
  3171                           ;main.c: 203: RB7 = 1;
  3172  0298  1786               	bsf	6,7	;volatile
  3173                           
  3174                           ;main.c: 204: RB0 = 0;
  3175  0299  1006               	bcf	6,0	;volatile
  3176  029A  0008               	return
  3177  029B                     i1l2135:	
  3178                           
  3179                           ;main.c: 208: if(ledStep > 2)
  3180  029B  3003               	movlw	3
  3181  029C  0278               	subwf	_ledStep,w
  3182  029D  1C03               	skipc
  3183  029E  0008               	return
  3184                           
  3185                           ;main.c: 209: {
  3186                           ;main.c: 210: TRISB &= 0xFE;
  3187  029F  1005               	bcf	5,0	;volatile
  3188                           
  3189                           ;main.c: 211: TRISB &= 0x7F;
  3190  02A0  1385               	bcf	5,7	;volatile
  3191                           
  3192                           ;main.c: 212: RB0 = 1;
  3193  02A1  1406               	bsf	6,0	;volatile
  3194                           
  3195                           ;main.c: 213: RB7 = 0;
  3196  02A2  1386               	bcf	6,7	;volatile
  3197  02A3  0008               	return
  3198  02A4                     i1l2139:	
  3199                           
  3200                           ;main.c: 217: if(ledStep > 3)
  3201  02A4  3004               	movlw	4
  3202  02A5  0278               	subwf	_ledStep,w
  3203  02A6  1C03               	skipc
  3204  02A7  0008               	return
  3205                           
  3206                           ;main.c: 218: {
  3207                           ;main.c: 219: TRISB &= 0xFD;
  3208  02A8  1085               	bcf	5,1	;volatile
  3209                           
  3210                           ;main.c: 220: TRISB &= 0x7F;
  3211  02A9  1385               	bcf	5,7	;volatile
  3212                           
  3213                           ;main.c: 221: RB1 = 1;
  3214  02AA  1486               	bsf	6,1	;volatile
  3215                           
  3216                           ;main.c: 222: RB7 = 0;
  3217  02AB  1386               	bcf	6,7	;volatile
  3218  02AC  0008               	return
  3219  02AD                     i1l2143:	
  3220                           
  3221                           ;main.c: 226: if(ledStep > 4)
  3222  02AD  3005               	movlw	5
  3223  02AE  0278               	subwf	_ledStep,w
  3224  02AF  1C03               	skipc
  3225  02B0  0008               	return
  3226                           
  3227                           ;main.c: 227: {
  3228                           ;main.c: 228: TRISB &= 0xFD;
  3229  02B1  1085               	bcf	5,1	;volatile
  3230                           
  3231                           ;main.c: 229: TRISB &= 0xFE;
  3232  02B2  1005               	bcf	5,0	;volatile
  3233                           
  3234                           ;main.c: 230: RB0 = 1;
  3235  02B3  1406               	bsf	6,0	;volatile
  3236                           
  3237                           ;main.c: 231: RB1 = 0;
  3238  02B4  1086               	bcf	6,1	;volatile
  3239  02B5  0008               	return
  3240  02B6                     i1l2147:	
  3241                           
  3242                           ;main.c: 235: if(ledStep > 5)
  3243  02B6  3006               	movlw	6
  3244  02B7  0278               	subwf	_ledStep,w
  3245  02B8  1C03               	skipc
  3246  02B9  0008               	return
  3247                           
  3248                           ;main.c: 236: {
  3249                           ;main.c: 237: TRISB &= 0xFD;
  3250  02BA  1085               	bcf	5,1	;volatile
  3251                           
  3252                           ;main.c: 238: TRISB &= 0x7F;
  3253  02BB  1385               	bcf	5,7	;volatile
  3254                           
  3255                           ;main.c: 239: RB7 = 1;
  3256  02BC  1786               	bsf	6,7	;volatile
  3257                           
  3258                           ;main.c: 240: RB1 = 0;
  3259  02BD  1086               	bcf	6,1	;volatile
  3260  02BE  0008               	return
  3261  02BF                     i1l2153:	
  3262  02BF  0840               	movf	_ledCnt,w
  3263                           
  3264                           ; Switch size 1, requested type "space"
  3265                           ; Number of cases is 6, Range of values is 0 to 5
  3266                           ; switch strategies available:
  3267                           ; Name         Instructions Cycles
  3268                           ; direct_byte           12     6 (fixed)
  3269                           ; simple_byte           19    10 (average)
  3270                           ; jumptable            260     6 (fixed)
  3271                           ;	Chosen strategy is direct_byte
  3272  02C0  0084               	movwf	4
  3273  02C1  3006               	movlw	6
  3274  02C2  0204               	subwf	4,w
  3275  02C3  1803               	skipnc
  3276  02C4  0008               	return
  3277  02C5  3004               	movlw	high i1S2951
  3278  02C6  008A               	movwf	10
  3279  02C7  3099               	movlw	low i1S2951
  3280  02C8  0704               	addwf	4,w
  3281  02C9  0082               	movwf	2
  3282  02CA  0008               	return
  3283  02CB                     __end_of_ledShow:	
  3284  007E                     btemp	set	126	;btemp
  3285  007E                     wtemp0	set	126
  3286                           
  3287                           	psect	swtext1
  3288  0499                     __pswtext1:	
  3289  0499                     i1S2951:	
  3290  0499  2AB6               	ljmp	i1l2147
  3291  049A  2A8A               	ljmp	i1l2127
  3292  049B  2A92               	ljmp	i1l2131
  3293  049C  2A9B               	ljmp	i1l2135
  3294  049D  2AA4               	ljmp	i1l2139
  3295  049E  2AAD               	ljmp	i1l2143


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         44
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     19      60
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ledCtr->___lbdiv
    _keyCtr->_keyRead
    _chrgCtr->___lbdiv
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkOutA
    _ledCtr->___lbmod
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3039
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               1     1      0     630
                                              3 BANK0      1     1      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     362
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0     268
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     268
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            4     4      0    1097
                                              4 COMMON     2     2      0
                                             17 BANK0      2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0     977
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     977
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
   _chrgCtr
     ___lbdiv
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     13      3C       4       75.0%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      47       7        0.0%
DATA                 0      0      47       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 18 17:44:58 2025

                      pc 0002                       PL2 00E4                       PL4 00F3  
                     PL6 00FC                       fsr 0004                      l720 02D3  
                    l751 03E5                      l663 0390                      l850 0085  
                    l667 03A7                      l844 004A                      l854 00C9  
                    l779 01FC                      _GIE 005F                      _RB0 0030  
                    _RA3 0433                      _RB1 0031                      _RB4 0034  
                    _RB7 0037                      _PR2 0011      __size_of_ADC_Sample 00CC  
                    fsr0 0004                      indf 0000          __end_of_AD_Init 0499  
                   l1121 046D                     l2093 047A                     l2261 02E9  
                   l2079 0467                     l2265 02EF                     l2259 02E7  
                   l2267 02F6                     l2355 03D3                     l2363 03DC  
                   l2701 01BA                     l2357 03D6                     l2623 0035  
                   l2607 002A                     l2279 030D                     l2359 03D8  
                   l2383 035B                     l2641 006F                     l2633 0055  
                   l2617 0034                     l2609 002C                     l2713 01CE  
                   l2705 01BB                     l2723 01DC                     l2395 0376  
                   l2645 0079                     l2813 0163                     l2709 01C6  
                   l2397 0378                     l1943 0492                     l2647 0081  
                   l2831 0193                     l2743 01F6                     l2735 01EA  
                   l2727 01E0                     l2657 00CD                     l2825 018C  
                   l2809 015C                     l2681 0441                     l2673 042D  
                   l2827 0191                     l2755 0212                     l2739 01F0  
                   l2763 021A                     l2757 0215                     l2853 0246  
                   l2845 0236                     l2767 0221                     l1975 0423  
                   l2863 0256                     l2855 0248                     l2793 012E  
                   l2865 025A                     l2873 0262                     l2929 03C0  
                   l2867 025D                     l2789 012B                     l2877 0268  
                   l2897 0398                     _CHS4 04B6                     _IOCA 0089  
                   _IOCB 0009                     u3107 0198                     u3117 0026  
                   u2425 0075                     u2435 007F                     u3087 0226  
                   _PIE1 000E                     u3097 0161                     u2705 0208  
                   u2475 00BF                     u2495 00D6                     _PEIE 005E  
                   _RAIE 0073                     _RAIF 006B                     _RBIE 005B  
                   _RBIF 0058                     u2785 014D                     _PIR1 000D  
                   _WPDA 0087                     _WPUA 0088                     _WPUB 0008  
                   _main 038B                     btemp 007E                     start 000C  
          ??_Init_System 0073                    ?_main 0070          __end_of___lbdiv 047C  
        __end_of___lbmod 0445                    _T2CON 0013                    i1l658 0458  
          _countHalfFull 0042                    _PORTA 0086                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0005                    _PWMTH 0018  
                  _PWMTL 0017          __end_of_chrgCtr 0310          __end_of_ledShow 02CB  
        __end_of_keyRead 0429                    pclath 000A          __end_of_pwmInit 048A  
        __end_of_pwmStop 04A3                    status 0003                    wtemp0 007E  
        __end_of_workCtr 038B          ___lbdiv@divisor 0073          ___lbdiv@counter 0075  
        __initialization 000D             __end_of_main 03C2                   ??_main 0077  
              ??_AD_Init 0073      __end_of_Init_System 040B                   _ADCON0 0095  
                 _ADCON1 0096                   i1S2951 0499                   _ADRESH 0099  
                 _ADRESL 0098                   _ANSEL0 0093                   _GODONE 04A9  
                 i1l2131 0292                   i1l2143 02AD                   i1l2135 029B  
                 i1l2127 028A                   i1l2153 02BF                   i1l2147 02B6  
                 i1l2139 02A4                   i1l2529 0456                   _LDO_EN 04B2  
                 _INTCON 000B                   _OSCCON 0014                   _TMR2IE 0071  
                 _TMR2IF 0069                   _PWMD3L 009C             ??_ADC_Sample 0048  
           keyCtr@kclick 0074       __size_of_Isr_Timer 001C               _Sleep_Mode 0310  
              ??___lbdiv 0074                ??___lbmod 0074                   _ledCnt 0040  
                 _ledCtr 0229                   _keyCtr 03C2                ??_chrgCtr 0077  
                 _pwStep 0039                   _result 002E                ??_ledShow 0070  
              ??_keyRead 0073       __end_of_ADC_Sample 00E4                   saved_w 007E  
              ??_pwmInit 0073                ??_pwmStop 0073                ??_workCtr 0073  
       ___lbdiv@dividend 0074               _batADValue 0028          ___lbmod@divisor 0073  
__end_of__initialization 0016          ___lbmod@counter 0049          _workOverOutTime 0041  
         __pcstackCOMMON 0070       __size_of_checkOutA 008E              _Init_System 03EA  
             __end_ofPL2 00F3               __end_ofPL4 00FC               __end_ofPL6 0101  
       ___lbdiv@quotient 0076        __end_of_Isr_Timer 0461               _checkBatAD 0101  
             __pbssBANK0 0020              ?_Sleep_Mode 0070               __pmaintext 038B  
             __pintentry 0004                  ?_ledCtr 0070                  ?_keyCtr 0070  
             _ledCntTime 0036                  _AD_Init 0492                  _PWM23DT 009D  
                _PWMD23H 009E                  _PWMCON0 0015                  _PWMCON1 0016  
                _PWMCON2 001D        __end_of_checkOutA 0229                  _IntFlag 0044  
             _intCount10 0043          ADC_Sample@adldo 0073          ADC_Sample@admax 0055  
        ADC_Sample@admin 0053          ADC_Sample@adsum 004F                  ___lbdiv 0461  
                ___lbmod 0429          __size_of_ledCtr 0051          __size_of_keyCtr 0028  
                _chrgCtr 02CB               _lowBatFlag 0033                  __ptext1 034E  
                __ptext2 049F                  __ptext3 047C                  __ptext4 0229  
                __ptext5 0429                  __ptext6 03C2                  __ptext7 040B  
                __ptext8 02CB                  __ptext9 0461                  _ledShow 027A  
                _ledStep 0078                  _count1s 0045                  _count5s 0024  
                _count8s 0022                  _maxDuty 003D                  _keyRead 040B  
    __size_of_Sleep_Mode 003E                  _pwmInit 047C              ?_checkBatAD 0070  
                _pwmStop 049F               _preLedStep 0034                  clrloop0 048B  
                _workCtr 034E               _outADValue 002A     end_of_initialization 0016  
          _longPressFlag 003E         ___lbmod@dividend 0048              ___lbmod@rem 004A  
    __size_of_checkBatAD 009A             ?_Init_System 0070           __end_of_ledCtr 027A  
         __end_of_keyCtr 03EA      start_initialization 000D                _Isr_Timer 0445  
           ??_Sleep_Mode 0073                 ??_ledCtr 004B        ADC_Sample@ad_temp 0057  
               ??_keyCtr 0074                 ?_AD_Init 0070              __pbssCOMMON 0077  
              ___latbits 0000            __pcstackBANK0 0048       __end_of_Sleep_Mode 034E  
             ?_Isr_Timer 0070                _checkOutA 019B                __pnvBANK0 005B  
               ?___lbdiv 0073                 ?___lbmod 0073                 ?_chrgCtr 0070  
              __pswtext1 0499                _count900s 0020                 ?_ledShow 0070  
               ?_keyRead 0070                _firstTime 005B           ADC_Sample@adch 004D  
               ?_pwmInit 0070             ??_checkBatAD 0074                 ?_pwmStop 0070  
               ?_workCtr 0070              ADC_Sample@i 004E              ADC_Sample@j 004C  
      interrupt_function 0004               ?_checkOutA 0070                clear_ram0 048A  
              _prePwStep 0077                _sleepTime 0032                _overCount 003C  
     __end_of_checkBatAD 019B     __size_of_Init_System 0021                _startTime 003A  
       __size_of_AD_Init 0007         keyRead@keyStatus 0073              ??_Isr_Timer 0070  
             _ADC_Sample 0018         __size_of___lbdiv 001B         __size_of___lbmod 001C  
            _lockLedStep 0038         __size_of_chrgCtr 0045         __size_of_ledShow 0051  
       __size_of_keyRead 001E                 _adresult 0030                 _chrgFlag 007A  
               __ptext10 019B                 __ptext11 0101                 __ptext12 0018  
               __ptext13 0310                 __ptext14 03EA                 __ptext15 0492  
               __ptext16 0445                 __ptext17 027A         __size_of_pwmInit 000E  
       __size_of_pwmStop 0004                 _count50s 0026         __size_of_workCtr 003D  
               _keyCount 003F                 _intCount 0046            __size_of_main 0037  
            ??_checkOutA 0074         checkOutA@maxAout 005A                 _tempDuty 003B  
               _test_adc 0047                 _power_ad 002C                 _workStep 0079  
               intlevel1 0000              ?_ADC_Sample 0073             _overWorkTime 0035  
            _showBatTime 0037               _OPTION_REG 0001  
