

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 28 09:33:48 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	pa_nodes0,global,class=CODE,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 1.45
    29                           ; Generated 16/11/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F887 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	nvBANK0
    64  0047                     __pnvBANK0:	
    65  0047                     _firstTime:	
    66  0047                     	ds	1
    67  001D                     _PWMCON2	set	29
    68  0018                     _PWMTH	set	24
    69  0017                     _PWMTL	set	23
    70  0016                     _PWMCON1	set	22
    71  0015                     _PWMCON0	set	21
    72  0014                     _OSCCON	set	20
    73  0013                     _T2CON	set	19
    74  0011                     _PR2	set	17
    75  000E                     _PIE1	set	14
    76  000D                     _PIR1	set	13
    77  000B                     _INTCON	set	11
    78  0009                     _IOCB	set	9
    79  0008                     _WPUB	set	8
    80  0006                     _PORTB	set	6
    81  0005                     _TRISB	set	5
    82  0001                     _OPTION_REG	set	1
    83  0071                     _TMR2IE	set	113
    84  0073                     _RAIE	set	115
    85  0069                     _TMR2IF	set	105
    86  006B                     _RAIF	set	107
    87  0058                     _RBIF	set	88
    88  005B                     _RBIE	set	91
    89  005E                     _PEIE	set	94
    90  005F                     _GIE	set	95
    91  0034                     _RB4	set	52
    92  009E                     _PWMD23H	set	158
    93  009D                     _PWM23DT	set	157
    94  009C                     _PWMD3L	set	156
    95  0099                     _ADRESH	set	153
    96  0098                     _ADRESL	set	152
    97  0096                     _ADCON1	set	150
    98  0095                     _ADCON0	set	149
    99  0093                     _ANSEL0	set	147
   100  0089                     _IOCA	set	137
   101  0088                     _WPUA	set	136
   102  0087                     _WPDA	set	135
   103  0086                     _PORTA	set	134
   104  0085                     _TRISA	set	133
   105  04B2                     _LDO_EN	set	1202
   106  04B6                     _CHS4	set	1206
   107  04A9                     _GODONE	set	1193
   108                           
   109                           	psect	cinit
   110  000B                     start_initialization:	
   111                           ; #config settings
   112                           
   113  000B                     __initialization:	
   114                           
   115                           ; Clear objects allocated to COMMON
   116  000B  3077               	movlw	low __pbssCOMMON
   117  000C  0084               	movwf	4
   118  000D  307C               	movlw	low (__pbssCOMMON+5)
   119  000E  2304               	fcall	clear_ram0
   120  000F  3020               	movlw	low __pbssBANK0
   121                           
   122                           ; Clear objects allocated to BANK0
   123  0010  1383               	bcf	3,7	;select IRP bank0
   124  0011  0084               	movwf	4
   125  0012  3038               	movlw	low (__pbssBANK0+24)
   126  0013  2304               	fcall	clear_ram0
   127  0014                     end_of_initialization:	
   128                           ;End of C runtime variable initialization code
   129                           
   130  0014                     __end_of__initialization:	
   131  0014  0183               	clrf	3
   132  0015  2A64               	ljmp	_main	;jump to C main() function
   133                           
   134                           	psect	bssCOMMON
   135  0077                     __pbssCOMMON:	
   136  0077                     _adresult:	
   137  0077                     	ds	2
   138  0079                     _cDuty:	
   139  0079                     	ds	1
   140  007A                     _workStep:	
   141  007A                     	ds	1
   142  007B                     _chrgFlag:	
   143  007B                     	ds	1
   144                           
   145                           	psect	bssBANK0
   146  0020                     __pbssBANK0:	
   147  0020                     _count900s:	
   148  0020                     	ds	2
   149  0022                     _count8s:	
   150  0022                     	ds	2
   151  0024                     _count50s:	
   152  0024                     	ds	2
   153  0026                     _batADValue:	
   154  0026                     	ds	2
   155  0028                     _power_ad:	
   156  0028                     	ds	2
   157  002A                     _result:	
   158  002A                     	ds	2
   159  002C                     _count2:	
   160  002C                     	ds	1
   161  002D                     _sleepTime:	
   162  002D                     	ds	1
   163  002E                     _lowBatFlag:	
   164  002E                     	ds	1
   165  002F                     _prePwStep:	
   166  002F                     	ds	1
   167  0030                     _pwStep:	
   168  0030                     	ds	1
   169  0031                     _maxDuty:	
   170  0031                     	ds	1
   171  0032                     _keyCount:	
   172  0032                     	ds	1
   173  0033                     _countHalfFull:	
   174  0033                     	ds	1
   175  0034                     _IntFlag:	
   176  0034                     	ds	1
   177  0035                     _count1s:	
   178  0035                     	ds	1
   179  0036                     _intCount:	
   180  0036                     	ds	1
   181  0037                     _test_adc:	
   182  0037                     	ds	1
   183                           
   184                           	psect	clrtext
   185  0304                     clear_ram0:	
   186                           ;	Called with FSR containing the base address, and
   187                           ;	W with the last address+1
   188                           
   189  0304  0064               	clrwdt	;clear the watchdog before getting into this loop
   190  0305                     clrloop0:	
   191  0305  0180               	clrf	0	;clear RAM location pointed to by FSR
   192  0306  0A84               	incf	4,f	;increment pointer
   193  0307  0604               	xorwf	4,w	;XOR with final address
   194  0308  1903               	btfsc	3,2	;have we reached the end yet?
   195  0309  3400               	retlw	0	;all done for this memory range, return
   196  030A  0604               	xorwf	4,w	;XOR again to restore value
   197  030B  2B05               	goto	clrloop0	;do the next byte
   198                           
   199                           	psect	cstackCOMMON
   200  0070                     __pcstackCOMMON:	
   201  0070                     ?_Init_System:	
   202  0070                     ?_AD_Init:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  0070                     ?_chrgCtr:	
   206                           ; 1 bytes @ 0x0
   207                           
   208  0070                     ?_checkBatAD:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0070                     ?_keyCtr:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0070                     ?_workCtr:	
   215                           ; 1 bytes @ 0x0
   216                           
   217  0070                     ?_Sleep_Mode:	
   218                           ; 1 bytes @ 0x0
   219                           
   220  0070                     ?_pwmInit:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0070                     ?_pwmStop:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0070                     ?_Isr_Timer:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ??_Isr_Timer:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     ?_main:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ?_keyRead:	
   236                           ; 1 bytes @ 0x0
   237                           
   238                           
   239                           ; 1 bytes @ 0x0
   240  0070                     	ds	2
   241  0072                     ??_Init_System:	
   242  0072                     ??_AD_Init:	
   243                           ; 1 bytes @ 0x2
   244                           
   245  0072                     ??_chrgCtr:	
   246                           ; 1 bytes @ 0x2
   247                           
   248  0072                     ??_workCtr:	
   249                           ; 1 bytes @ 0x2
   250                           
   251  0072                     ??_Sleep_Mode:	
   252                           ; 1 bytes @ 0x2
   253                           
   254  0072                     ??_pwmInit:	
   255                           ; 1 bytes @ 0x2
   256                           
   257  0072                     ??_pwmStop:	
   258                           ; 1 bytes @ 0x2
   259                           
   260  0072                     ?_ADC_Sample:	
   261                           ; 1 bytes @ 0x2
   262                           
   263  0072                     ??_keyRead:	
   264                           ; 1 bytes @ 0x2
   265                           
   266  0072                     keyRead@keyStatus:	
   267                           ; 1 bytes @ 0x2
   268                           
   269  0072                     ADC_Sample@adldo:	
   270                           ; 1 bytes @ 0x2
   271                           
   272                           
   273                           ; 1 bytes @ 0x2
   274  0072                     	ds	1
   275  0073                     ??_keyCtr:	
   276  0073                     ??_ADC_Sample:	
   277                           ; 1 bytes @ 0x3
   278                           
   279                           
   280                           ; 1 bytes @ 0x3
   281  0073                     	ds	1
   282  0074                     keyCtr@kclick:	
   283                           
   284                           ; 1 bytes @ 0x4
   285  0074                     	ds	3
   286  0077                     ??_main:	
   287                           
   288                           	psect	cstackBANK0
   289  0038                     __pcstackBANK0:	
   290                           ; 1 bytes @ 0x7
   291                           
   292  0038                     ADC_Sample@j:	
   293                           
   294                           ; 1 bytes @ 0x0
   295  0038                     	ds	1
   296  0039                     ADC_Sample@adch:	
   297                           
   298                           ; 1 bytes @ 0x1
   299  0039                     	ds	1
   300  003A                     ADC_Sample@i:	
   301                           
   302                           ; 1 bytes @ 0x2
   303  003A                     	ds	1
   304  003B                     ADC_Sample@adsum:	
   305                           
   306                           ; 4 bytes @ 0x3
   307  003B                     	ds	4
   308  003F                     ADC_Sample@admin:	
   309                           
   310                           ; 2 bytes @ 0x7
   311  003F                     	ds	2
   312  0041                     ADC_Sample@admax:	
   313                           
   314                           ; 2 bytes @ 0x9
   315  0041                     	ds	2
   316  0043                     ADC_Sample@ad_temp:	
   317                           
   318                           ; 2 bytes @ 0xB
   319  0043                     	ds	2
   320  0045                     ??_checkBatAD:	
   321                           
   322                           ; 1 bytes @ 0xD
   323  0045                     	ds	2
   324                           
   325                           	psect	maintext
   326  0264                     __pmaintext:	
   327 ;;
   328 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   329 ;;
   330 ;; *************** function _main *****************
   331 ;; Defined at:
   332 ;;		line 126 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
   333 ;; Parameters:    Size  Location     Type
   334 ;;		None
   335 ;; Auto vars:     Size  Location     Type
   336 ;;		None
   337 ;; Return value:  Size  Location     Type
   338 ;;                  1    wreg      void 
   339 ;; Registers used:
   340 ;;		wreg, status,2, status,0, pclath, cstack
   341 ;; Tracked objects:
   342 ;;		On entry : B00/0
   343 ;;		On exit  : 100/0
   344 ;;		Unchanged: 0/0
   345 ;; Data sizes:     COMMON   BANK0   BANK1
   346 ;;      Params:         0       0       0
   347 ;;      Locals:         0       0       0
   348 ;;      Temps:          0       0       0
   349 ;;      Totals:         0       0       0
   350 ;;Total ram usage:        0 bytes
   351 ;; Hardware stack levels required when called:    3
   352 ;; This function calls:
   353 ;;		_AD_Init
   354 ;;		_Init_System
   355 ;;		_Sleep_Mode
   356 ;;		_checkBatAD
   357 ;;		_chrgCtr
   358 ;;		_keyCtr
   359 ;;		_workCtr
   360 ;; This function is called by:
   361 ;;		Startup code after reset
   362 ;; This function uses a non-reentrant model
   363 ;;
   364                           
   365                           
   366                           ;psect for function _main
   367  0264                     _main:	
   368                           
   369                           ;main.c: 128: Init_System();
   370                           
   371                           ;incstack = 0
   372                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   373  0264  2290               	fcall	_Init_System
   374                           
   375                           ;main.c: 129: AD_Init();
   376  0265  230C               	fcall	_AD_Init
   377                           
   378                           ;main.c: 130: firstTime = 100;
   379  0266  3064               	movlw	100
   380  0267  1283               	bcf	3,5	;RP0=0, select bank0
   381  0268  00C7               	movwf	_firstTime
   382  0269                     l659:	
   383                           ;main.c: 131: while (1)
   384                           
   385  0269  0064               	clrwdt	;# 
   386                           
   387                           ;main.c: 134: if(!IntFlag)
   388  026A  1283               	bcf	3,5	;RP0=0, select bank0
   389  026B  0834               	movf	_IntFlag,w
   390  026C  1903               	btfsc	3,2
   391  026D  2A69               	goto	l659
   392                           
   393                           ;main.c: 136: IntFlag = 0;
   394  026E  01B4               	clrf	_IntFlag
   395                           
   396                           ;main.c: 137: chrgCtr();
   397  026F  21E4               	fcall	_chrgCtr
   398                           
   399                           ;main.c: 138: checkBatAD();
   400  0270  20FD               	fcall	_checkBatAD
   401                           
   402                           ;main.c: 139: if(chrgFlag == 0 && lowBatFlag == 0)
   403  0271  087B               	movf	_chrgFlag,w
   404  0272  1D03               	btfss	3,2
   405  0273  2A79               	goto	l662
   406  0274  1283               	bcf	3,5	;RP0=0, select bank0
   407  0275  082E               	movf	_lowBatFlag,w
   408  0276  1D03               	btfss	3,2
   409  0277  2A79               	goto	l662
   410                           
   411                           ;main.c: 140: {
   412                           ;main.c: 141: keyCtr();
   413  0278  22B2               	fcall	_keyCtr
   414  0279                     l662:	
   415                           
   416                           ;main.c: 142: }
   417                           ;main.c: 143: workCtr();
   418  0279  2194               	fcall	_workCtr
   419                           
   420                           ;main.c: 144: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0)
   421  027A  087B               	movf	_chrgFlag,w
   422  027B  1D03               	btfss	3,2
   423  027C  2A8E               	goto	l2064
   424  027D  087A               	movf	_workStep,w
   425  027E  1D03               	btfss	3,2
   426  027F  2A8E               	goto	l2064
   427  0280  0832               	movf	_keyCount,w
   428  0281  1D03               	btfss	3,2
   429  0282  2A8E               	goto	l2064
   430  0283  0847               	movf	_firstTime,w
   431  0284  1D03               	btfss	3,2
   432  0285  2A8E               	goto	l2064
   433                           
   434                           ;main.c: 145: {
   435                           ;main.c: 146: if(++sleepTime >= 200)
   436  0286  30C8               	movlw	200
   437  0287  0AAD               	incf	_sleepTime,f
   438  0288  022D               	subwf	_sleepTime,w
   439  0289  1C03               	skipc
   440  028A  2A69               	goto	l659
   441                           
   442                           ;main.c: 147: {
   443                           ;main.c: 148: sleepTime = 0;
   444  028B  01AD               	clrf	_sleepTime
   445                           
   446                           ;main.c: 149: Sleep_Mode();
   447  028C  2225               	fcall	_Sleep_Mode
   448  028D  2A69               	goto	l659
   449  028E                     l2064:	
   450                           
   451                           ;main.c: 152: else
   452                           ;main.c: 153: {
   453                           ;main.c: 154: sleepTime = 0;
   454  028E  01AD               	clrf	_sleepTime
   455  028F  2A69               	goto	l659
   456  0290                     __end_of_main:	
   457                           
   458                           	psect	text1
   459  0194                     __ptext1:	
   460 ;; *************** function _workCtr *****************
   461 ;; Defined at:
   462 ;;		line 255 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
   463 ;; Parameters:    Size  Location     Type
   464 ;;		None
   465 ;; Auto vars:     Size  Location     Type
   466 ;;		None
   467 ;; Return value:  Size  Location     Type
   468 ;;                  1    wreg      void 
   469 ;; Registers used:
   470 ;;		wreg, status,2, status,0, pclath, cstack
   471 ;; Tracked objects:
   472 ;;		On entry : 0/0
   473 ;;		On exit  : 100/0
   474 ;;		Unchanged: 0/0
   475 ;; Data sizes:     COMMON   BANK0   BANK1
   476 ;;      Params:         0       0       0
   477 ;;      Locals:         0       0       0
   478 ;;      Temps:          0       0       0
   479 ;;      Totals:         0       0       0
   480 ;;Total ram usage:        0 bytes
   481 ;; Hardware stack levels used:    1
   482 ;; Hardware stack levels required when called:    2
   483 ;; This function calls:
   484 ;;		_pwmInit
   485 ;;		_pwmStop
   486 ;; This function is called by:
   487 ;;		_main
   488 ;; This function uses a non-reentrant model
   489 ;;
   490                           
   491                           
   492                           ;psect for function _workCtr
   493  0194                     _workCtr:	
   494                           
   495                           ;main.c: 257: if(firstTime > 0)
   496                           
   497                           ;incstack = 0
   498                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   499  0194  1283               	bcf	3,5	;RP0=0, select bank0
   500  0195  0847               	movf	_firstTime,w
   501  0196  1903               	btfsc	3,2
   502  0197  299F               	goto	l1822
   503                           
   504                           ;main.c: 258: {
   505                           ;main.c: 259: firstTime--;
   506  0198  03C7               	decf	_firstTime,f
   507                           
   508                           ;main.c: 260: if(prePwStep < pwStep)
   509  0199  0830               	movf	_pwStep,w
   510  019A  022F               	subwf	_prePwStep,w
   511  019B  1803               	skipnc
   512  019C  299F               	goto	l1822
   513                           
   514                           ;main.c: 261: {
   515                           ;main.c: 262: prePwStep = pwStep;
   516  019D  0830               	movf	_pwStep,w
   517  019E  00AF               	movwf	_prePwStep
   518  019F                     l1822:	
   519                           
   520                           ;main.c: 263: }
   521                           ;main.c: 264: }
   522                           ;main.c: 265: if(++count2 > 2)
   523  019F  3003               	movlw	3
   524  01A0  0AAC               	incf	_count2,f
   525  01A1  022C               	subwf	_count2,w
   526  01A2  1C03               	skipc
   527  01A3  29BA               	goto	l700
   528                           
   529                           ;main.c: 266: {
   530                           ;main.c: 267: count2 = 0;
   531  01A4  01AC               	clrf	_count2
   532                           
   533                           ;main.c: 268: if(workStep > 0 && maxDuty >= 45)
   534  01A5  087A               	movf	_workStep,w
   535  01A6  1903               	btfsc	3,2
   536  01A7  29BA               	goto	l700
   537  01A8  302D               	movlw	45
   538  01A9  0231               	subwf	_maxDuty,w
   539  01AA  1C03               	skipc
   540  01AB  29BA               	goto	l700
   541                           
   542                           ;main.c: 269: {
   543                           ;main.c: 270: if(cDuty > maxDuty)
   544  01AC  0879               	movf	_cDuty,w
   545  01AD  0231               	subwf	_maxDuty,w
   546  01AE  1803               	skipnc
   547  01AF  29B2               	goto	l1836
   548                           
   549                           ;main.c: 271: {
   550                           ;main.c: 272: cDuty--;
   551  01B0  03F9               	decf	_cDuty,f
   552                           
   553                           ;main.c: 274: }
   554  01B1  29B7               	goto	l1834
   555  01B2                     l1836:	
   556                           
   557                           ;main.c: 275: else if(cDuty < maxDuty)
   558  01B2  0831               	movf	_maxDuty,w
   559  01B3  0279               	subwf	_cDuty,w
   560  01B4  1803               	skipnc
   561  01B5  29BA               	goto	l700
   562                           
   563                           ;main.c: 276: {
   564                           ;main.c: 277: cDuty++;
   565  01B6  0AF9               	incf	_cDuty,f
   566  01B7                     l1834:	
   567                           
   568                           ;main.c: 273: PWMD3L = cDuty;
   569  01B7  0879               	movf	_cDuty,w
   570  01B8  1683               	bsf	3,5	;RP0=1, select bank1
   571  01B9  009C               	movwf	28	;volatile
   572  01BA                     l700:	
   573                           
   574                           ;main.c: 279: }
   575                           ;main.c: 280: }
   576                           ;main.c: 282: }
   577                           ;main.c: 283: if(workStep > 0)
   578  01BA  087A               	movf	_workStep,w
   579  01BB  1903               	btfsc	3,2
   580  01BC  29D1               	goto	l1854
   581                           
   582                           ;main.c: 284: {
   583                           ;main.c: 285: PORTB &= 0xFC;
   584  01BD  30FC               	movlw	252
   585  01BE  1283               	bcf	3,5	;RP0=0, select bank0
   586  01BF  0586               	andwf	6,f	;volatile
   587                           
   588                           ;main.c: 286: if((PWMCON0 & 0x08) == 0)
   589  01C0  1995               	btfsc	21,3	;volatile
   590  01C1  29C3               	goto	l1848
   591                           
   592                           ;main.c: 287: {
   593                           ;main.c: 288: pwmInit();
   594  01C2  22F6               	fcall	_pwmInit
   595  01C3                     l1848:	
   596                           
   597                           ;main.c: 289: }
   598                           ;main.c: 290: if(count1s == 0 && ++count900s >= 900)
   599  01C3  0835               	movf	_count1s,w
   600  01C4  1D03               	btfss	3,2
   601  01C5  0008               	return
   602  01C6  0AA0               	incf	_count900s,f
   603  01C7  1903               	skipnz
   604  01C8  0AA1               	incf	_count900s+1,f
   605  01C9  3003               	movlw	3
   606  01CA  0221               	subwf	_count900s+1,w
   607  01CB  3084               	movlw	132
   608  01CC  1903               	skipnz
   609  01CD  0220               	subwf	_count900s,w
   610  01CE  1803               	btfsc	3,0
   611                           
   612                           ;main.c: 291: {
   613                           ;main.c: 292: workStep = 0;
   614  01CF  01FA               	clrf	_workStep
   615  01D0  0008               	return
   616  01D1                     l1854:	
   617                           
   618                           ;main.c: 295: else
   619                           ;main.c: 296: {
   620                           ;main.c: 297: if(chrgFlag == 0)
   621  01D1  087B               	movf	_chrgFlag,w
   622  01D2  1D03               	btfss	3,2
   623  01D3  29D7               	goto	l709
   624                           
   625                           ;main.c: 298: {
   626                           ;main.c: 299: PORTB |= 0x03;
   627  01D4  3003               	movlw	3
   628  01D5  1283               	bcf	3,5	;RP0=0, select bank0
   629  01D6  0486               	iorwf	6,f	;volatile
   630  01D7                     l709:	
   631                           
   632                           ;main.c: 300: }
   633                           ;main.c: 301: if(cDuty > 0)
   634  01D7  0879               	movf	_cDuty,w
   635  01D8  1903               	btfsc	3,2
   636  01D9  29E0               	goto	l1864
   637                           
   638                           ;main.c: 302: {
   639                           ;main.c: 303: if(--cDuty == 0)
   640  01DA  0BF9               	decfsz	_cDuty,f
   641  01DB  29DD               	goto	l1862
   642                           
   643                           ;main.c: 304: {
   644                           ;main.c: 305: pwmStop();
   645  01DC  2313               	fcall	_pwmStop
   646  01DD                     l1862:	
   647                           
   648                           ;main.c: 306: }
   649                           ;main.c: 307: PWMD3L = cDuty;
   650  01DD  0879               	movf	_cDuty,w
   651  01DE  1683               	bsf	3,5	;RP0=1, select bank1
   652  01DF  009C               	movwf	28	;volatile
   653  01E0                     l1864:	
   654                           
   655                           ;main.c: 308: }
   656                           ;main.c: 309: count900s = 0;
   657  01E0  1283               	bcf	3,5	;RP0=0, select bank0
   658  01E1  01A0               	clrf	_count900s
   659  01E2  01A1               	clrf	_count900s+1
   660  01E3  0008               	return
   661  01E4                     __end_of_workCtr:	
   662                           
   663                           	psect	text2
   664  0313                     __ptext2:	
   665 ;; *************** function _pwmStop *****************
   666 ;; Defined at:
   667 ;;		line 507 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
   668 ;; Parameters:    Size  Location     Type
   669 ;;		None
   670 ;; Auto vars:     Size  Location     Type
   671 ;;		None
   672 ;; Return value:  Size  Location     Type
   673 ;;                  1    wreg      void 
   674 ;; Registers used:
   675 ;;		None
   676 ;; Tracked objects:
   677 ;;		On entry : 0/0
   678 ;;		On exit  : 100/0
   679 ;;		Unchanged: 0/0
   680 ;; Data sizes:     COMMON   BANK0   BANK1
   681 ;;      Params:         0       0       0
   682 ;;      Locals:         0       0       0
   683 ;;      Temps:          0       0       0
   684 ;;      Totals:         0       0       0
   685 ;;Total ram usage:        0 bytes
   686 ;; Hardware stack levels used:    1
   687 ;; Hardware stack levels required when called:    1
   688 ;; This function calls:
   689 ;;		Nothing
   690 ;; This function is called by:
   691 ;;		_workCtr
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695                           
   696                           ;psect for function _pwmStop
   697  0313                     _pwmStop:	
   698                           
   699                           ;main.c: 509: PWMCON0 &= 0XF7;
   700                           
   701                           ;incstack = 0
   702                           ; Regs used in _pwmStop: []
   703  0313  1283               	bcf	3,5	;RP0=0, select bank0
   704  0314  1195               	bcf	21,3	;volatile
   705                           
   706                           ;main.c: 510: RB4 = 0;
   707  0315  1206               	bcf	6,4	;volatile
   708  0316  0008               	return
   709  0317                     __end_of_pwmStop:	
   710                           
   711                           	psect	text3
   712  02F6                     __ptext3:	
   713 ;; *************** function _pwmInit *****************
   714 ;; Defined at:
   715 ;;		line 492 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
   716 ;; Parameters:    Size  Location     Type
   717 ;;		None
   718 ;; Auto vars:     Size  Location     Type
   719 ;;		None
   720 ;; Return value:  Size  Location     Type
   721 ;;                  1    wreg      void 
   722 ;; Registers used:
   723 ;;		wreg, status,2
   724 ;; Tracked objects:
   725 ;;		On entry : 100/0
   726 ;;		On exit  : 100/0
   727 ;;		Unchanged: 0/0
   728 ;; Data sizes:     COMMON   BANK0   BANK1
   729 ;;      Params:         0       0       0
   730 ;;      Locals:         0       0       0
   731 ;;      Temps:          0       0       0
   732 ;;      Totals:         0       0       0
   733 ;;Total ram usage:        0 bytes
   734 ;; Hardware stack levels used:    1
   735 ;; Hardware stack levels required when called:    1
   736 ;; This function calls:
   737 ;;		Nothing
   738 ;; This function is called by:
   739 ;;		_workCtr
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           
   744                           ;psect for function _pwmInit
   745  02F6                     _pwmInit:	
   746                           
   747                           ;main.c: 494: PWMCON1 = 0B00000000;
   748                           
   749                           ;incstack = 0
   750                           ; Regs used in _pwmInit: [wreg+status,2]
   751  02F6  0196               	clrf	22	;volatile
   752                           
   753                           ;main.c: 495: PWMTH = 0X00;
   754  02F7  0198               	clrf	24	;volatile
   755                           
   756                           ;main.c: 496: PWMTL = 100;
   757  02F8  3064               	movlw	100
   758  02F9  0097               	movwf	23	;volatile
   759                           
   760                           ;main.c: 499: PWMD23H = 0;
   761  02FA  1683               	bsf	3,5	;RP0=1, select bank1
   762  02FB  019E               	clrf	30	;volatile
   763                           
   764                           ;main.c: 500: PWMD3L = 45;
   765  02FC  302D               	movlw	45
   766  02FD  009C               	movwf	28	;volatile
   767                           
   768                           ;main.c: 501: PWM23DT = 0X00;
   769  02FE  019D               	clrf	29	;volatile
   770                           
   771                           ;main.c: 503: PWMCON0 = 0X68;
   772  02FF  3068               	movlw	104
   773  0300  1283               	bcf	3,5	;RP0=0, select bank0
   774  0301  0095               	movwf	21	;volatile
   775                           
   776                           ;main.c: 504: PWMCON2 =0X00;
   777  0302  019D               	clrf	29	;volatile
   778  0303  0008               	return
   779  0304                     __end_of_pwmInit:	
   780                           
   781                           	psect	text4
   782  02B2                     __ptext4:	
   783 ;; *************** function _keyCtr *****************
   784 ;; Defined at:
   785 ;;		line 238 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
   786 ;; Parameters:    Size  Location     Type
   787 ;;		None
   788 ;; Auto vars:     Size  Location     Type
   789 ;;  kclick          1    4[COMMON] unsigned char 
   790 ;; Return value:  Size  Location     Type
   791 ;;                  1    wreg      void 
   792 ;; Registers used:
   793 ;;		wreg, status,2, status,0, pclath, cstack
   794 ;; Tracked objects:
   795 ;;		On entry : 100/0
   796 ;;		On exit  : 100/0
   797 ;;		Unchanged: 0/0
   798 ;; Data sizes:     COMMON   BANK0   BANK1
   799 ;;      Params:         0       0       0
   800 ;;      Locals:         1       0       0
   801 ;;      Temps:          1       0       0
   802 ;;      Totals:         2       0       0
   803 ;;Total ram usage:        2 bytes
   804 ;; Hardware stack levels used:    1
   805 ;; Hardware stack levels required when called:    2
   806 ;; This function calls:
   807 ;;		_keyRead
   808 ;; This function is called by:
   809 ;;		_main
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           
   814                           ;psect for function _keyCtr
   815  02B2                     _keyCtr:	
   816                           
   817                           ;main.c: 240: char kclick = keyRead(0x20 & (~PORTB));
   818                           
   819                           ;incstack = 0
   820                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
   821  02B2  0906               	comf	6,w	;volatile
   822  02B3  3920               	andlw	32
   823  02B4  22E4               	fcall	_keyRead
   824  02B5  00F4               	movwf	keyCtr@kclick
   825                           
   826                           ;main.c: 241: if(kclick == 1)
   827  02B6  0B74               	decfsz	keyCtr@kclick,w
   828  02B7  0008               	return
   829                           
   830                           ;main.c: 242: {
   831                           ;main.c: 243: if(++workStep > 2)
   832  02B8  3003               	movlw	3
   833  02B9  0AFA               	incf	_workStep,f
   834  02BA  027A               	subwf	_workStep,w
   835  02BB  1803               	btfsc	3,0
   836                           
   837                           ;main.c: 244: {
   838                           ;main.c: 245: workStep = 0;
   839  02BC  01FA               	clrf	_workStep
   840                           
   841                           ;main.c: 246: }
   842                           ;main.c: 247: if(workStep == 1)
   843  02BD  0B7A               	decfsz	_workStep,w
   844  02BE  2AC1               	goto	l1812
   845                           
   846                           ;main.c: 248: {
   847                           ;main.c: 249: cDuty = 45;
   848  02BF  302D               	movlw	45
   849  02C0  00F9               	movwf	_cDuty
   850  02C1                     l1812:	
   851                           
   852                           ;main.c: 250: }
   853                           ;main.c: 251: maxDuty = 50 + workStep*20;
   854  02C1  0E7A               	swapf	_workStep,w
   855  02C2  39F0               	andlw	240
   856  02C3  00F3               	movwf	??_keyCtr
   857  02C4  087A               	movf	_workStep,w
   858  02C5  077A               	addwf	_workStep,w
   859  02C6  07F3               	addwf	??_keyCtr,f
   860  02C7  07F3               	addwf	??_keyCtr,f
   861  02C8  0873               	movf	??_keyCtr,w
   862  02C9  3E32               	addlw	50
   863  02CA  00B1               	movwf	_maxDuty
   864  02CB  0008               	return
   865  02CC                     __end_of_keyCtr:	
   866                           
   867                           	psect	text5
   868  02E4                     __ptext5:	
   869 ;; *************** function _keyRead *****************
   870 ;; Defined at:
   871 ;;		line 216 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;  keyStatus       1    wreg     unsigned char 
   874 ;; Auto vars:     Size  Location     Type
   875 ;;  keyStatus       1    2[COMMON] unsigned char 
   876 ;; Return value:  Size  Location     Type
   877 ;;                  1    wreg      unsigned char 
   878 ;; Registers used:
   879 ;;		wreg, status,2, status,0
   880 ;; Tracked objects:
   881 ;;		On entry : 100/0
   882 ;;		On exit  : 100/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMMON   BANK0   BANK1
   885 ;;      Params:         0       0       0
   886 ;;      Locals:         1       0       0
   887 ;;      Temps:          0       0       0
   888 ;;      Totals:         1       0       0
   889 ;;Total ram usage:        1 bytes
   890 ;; Hardware stack levels used:    1
   891 ;; Hardware stack levels required when called:    1
   892 ;; This function calls:
   893 ;;		Nothing
   894 ;; This function is called by:
   895 ;;		_keyCtr
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899                           
   900                           ;psect for function _keyRead
   901  02E4                     _keyRead:	
   902                           
   903                           ;incstack = 0
   904                           ; Regs used in _keyRead: [wreg+status,2+status,0]
   905                           ;keyRead@keyStatus stored from wreg
   906  02E4  00F2               	movwf	keyRead@keyStatus
   907                           
   908                           ;main.c: 218: if(keyStatus)
   909  02E5  0872               	movf	keyRead@keyStatus,w
   910  02E6  1903               	btfsc	3,2
   911  02E7  2AF0               	goto	l1602
   912  02E8  3064               	movlw	100
   913                           
   914                           ;main.c: 219: {
   915                           ;main.c: 220: keyCount++;
   916  02E9  0AB2               	incf	_keyCount,f
   917                           
   918                           ;main.c: 221: if(keyCount >= 100)
   919  02EA  0232               	subwf	_keyCount,w
   920  02EB  1C03               	skipc
   921  02EC  3400               	retlw	0
   922                           
   923                           ;main.c: 222: {
   924                           ;main.c: 223: keyCount = 100;
   925  02ED  3064               	movlw	100
   926  02EE  00B2               	movwf	_keyCount
   927  02EF  3400               	retlw	0
   928  02F0                     l1602:	
   929                           
   930                           ;main.c: 226: else
   931                           ;main.c: 227: {
   932                           ;main.c: 228: if(keyCount >= 4)
   933  02F0  3004               	movlw	4
   934  02F1  0232               	subwf	_keyCount,w
   935                           
   936                           ;main.c: 229: {
   937                           ;main.c: 230: keyCount = 0;
   938  02F2  01B2               	clrf	_keyCount
   939  02F3  1803               	btfsc	3,0
   940                           
   941                           ;main.c: 231: return 1;
   942  02F4  3401               	retlw	1
   943  02F5  3400               	retlw	0
   944  02F6                     __end_of_keyRead:	
   945                           ;main.c: 234: }
   946                           ;main.c: 235: return 0;
   947                           
   948                           ;main.c: 232: }
   949                           ;main.c: 233: keyCount = 0;
   950                           
   951                           
   952                           	psect	text6
   953  01E4                     __ptext6:	
   954 ;; *************** function _chrgCtr *****************
   955 ;; Defined at:
   956 ;;		line 160 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
   957 ;; Parameters:    Size  Location     Type
   958 ;;		None
   959 ;; Auto vars:     Size  Location     Type
   960 ;;		None
   961 ;; Return value:  Size  Location     Type
   962 ;;                  1    wreg      void 
   963 ;; Registers used:
   964 ;;		wreg, status,2, status,0
   965 ;; Tracked objects:
   966 ;;		On entry : 100/0
   967 ;;		On exit  : 100/0
   968 ;;		Unchanged: 0/0
   969 ;; Data sizes:     COMMON   BANK0   BANK1
   970 ;;      Params:         0       0       0
   971 ;;      Locals:         0       0       0
   972 ;;      Temps:          0       0       0
   973 ;;      Totals:         0       0       0
   974 ;;Total ram usage:        0 bytes
   975 ;; Hardware stack levels used:    1
   976 ;; Hardware stack levels required when called:    1
   977 ;; This function calls:
   978 ;;		Nothing
   979 ;; This function is called by:
   980 ;;		_main
   981 ;; This function uses a non-reentrant model
   982 ;;
   983                           
   984                           
   985                           ;psect for function _chrgCtr
   986  01E4                     _chrgCtr:	
   987                           
   988                           ;main.c: 162: if(PORTB & 0x04)
   989                           
   990                           ;incstack = 0
   991                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
   992  01E4  1D06               	btfss	6,2	;volatile
   993  01E5  2A0C               	goto	l1726
   994                           
   995                           ;main.c: 163: {
   996                           ;main.c: 164: chrgFlag = 1;
   997  01E6  01FB               	clrf	_chrgFlag
   998  01E7  0AFB               	incf	_chrgFlag,f
   999                           
  1000                           ;main.c: 165: workStep = 0;
  1001  01E8  01FA               	clrf	_workStep
  1002                           
  1003                           ;main.c: 166: lowBatFlag = 0;
  1004  01E9  01AE               	clrf	_lowBatFlag
  1005                           
  1006                           ;main.c: 167: if(prePwStep < pwStep)
  1007  01EA  0830               	movf	_pwStep,w
  1008  01EB  022F               	subwf	_prePwStep,w
  1009  01EC  1803               	skipnc
  1010  01ED  29FC               	goto	l1714
  1011                           
  1012                           ;main.c: 168: {
  1013                           ;main.c: 169: if(++count50s > 7200)
  1014  01EE  0AA4               	incf	_count50s,f
  1015  01EF  1903               	skipnz
  1016  01F0  0AA5               	incf	_count50s+1,f
  1017  01F1  301C               	movlw	28
  1018  01F2  0225               	subwf	_count50s+1,w
  1019  01F3  3021               	movlw	33
  1020  01F4  1903               	skipnz
  1021  01F5  0224               	subwf	_count50s,w
  1022  01F6  1C03               	skipc
  1023  01F7  29FE               	goto	l1716
  1024                           
  1025                           ;main.c: 170: {
  1026                           ;main.c: 171: count50s = 0;
  1027  01F8  01A4               	clrf	_count50s
  1028  01F9  01A5               	clrf	_count50s+1
  1029                           
  1030                           ;main.c: 172: prePwStep++;
  1031  01FA  0AAF               	incf	_prePwStep,f
  1032  01FB  29FE               	goto	l1716
  1033  01FC                     l1714:	
  1034                           
  1035                           ;main.c: 175: else
  1036                           ;main.c: 176: {
  1037                           ;main.c: 177: count50s = 0;
  1038  01FC  01A4               	clrf	_count50s
  1039  01FD  01A5               	clrf	_count50s+1
  1040  01FE                     l1716:	
  1041                           
  1042                           ;main.c: 178: }
  1043                           ;main.c: 179: if(prePwStep >= 99)
  1044  01FE  3063               	movlw	99
  1045  01FF  022F               	subwf	_prePwStep,w
  1046  0200  1C03               	skipc
  1047  0201  2A05               	goto	l1720
  1048  0202                     l1718:	
  1049                           
  1050                           ;main.c: 180: {
  1051                           ;main.c: 181: PORTB &= 0xFC;
  1052  0202  30FC               	movlw	252
  1053  0203  0586               	andwf	6,f	;volatile
  1054                           
  1055                           ;main.c: 182: }
  1056  0204  0008               	return
  1057  0205                     l1720:	
  1058                           
  1059                           ;main.c: 183: else
  1060                           ;main.c: 184: {
  1061                           ;main.c: 185: if(count1s < 50)
  1062  0205  3032               	movlw	50
  1063  0206  0235               	subwf	_count1s,w
  1064  0207  1C03               	btfss	3,0
  1065  0208  2A02               	goto	l1718
  1066                           
  1067                           ;main.c: 189: else
  1068                           ;main.c: 190: {
  1069                           ;main.c: 191: PORTB |= 0x03;
  1070  0209  3003               	movlw	3
  1071  020A  0486               	iorwf	6,f	;volatile
  1072  020B  0008               	return
  1073  020C                     l1726:	
  1074                           
  1075                           ;main.c: 198: chrgFullFlag = 0;
  1076  020C  01FB               	clrf	_chrgFlag
  1077                           
  1078                           ;main.c: 199: if(prePwStep > 0 && prePwStep > pwStep)
  1079  020D  082F               	movf	_prePwStep,w
  1080  020E  1903               	btfsc	3,2
  1081  020F  2A22               	goto	l1738
  1082  0210  082F               	movf	_prePwStep,w
  1083  0211  0230               	subwf	_pwStep,w
  1084  0212  1803               	skipnc
  1085  0213  2A22               	goto	l1738
  1086                           
  1087                           ;main.c: 200: {
  1088                           ;main.c: 201: if(++count50s > 2000)
  1089  0214  0AA4               	incf	_count50s,f
  1090  0215  1903               	skipnz
  1091  0216  0AA5               	incf	_count50s+1,f
  1092  0217  3007               	movlw	7
  1093  0218  0225               	subwf	_count50s+1,w
  1094  0219  30D1               	movlw	209
  1095  021A  1903               	skipnz
  1096  021B  0224               	subwf	_count50s,w
  1097  021C  1C03               	skipc
  1098  021D  0008               	return
  1099                           
  1100                           ;main.c: 202: {
  1101                           ;main.c: 203: count50s = 0;
  1102  021E  01A4               	clrf	_count50s
  1103  021F  01A5               	clrf	_count50s+1
  1104                           
  1105                           ;main.c: 204: prePwStep--;
  1106  0220  03AF               	decf	_prePwStep,f
  1107  0221  0008               	return
  1108  0222                     l1738:	
  1109                           
  1110                           ;main.c: 207: else
  1111                           ;main.c: 208: {
  1112                           ;main.c: 209: count50s = 0;
  1113  0222  01A4               	clrf	_count50s
  1114  0223  01A5               	clrf	_count50s+1
  1115  0224  0008               	return
  1116  0225                     __end_of_chrgCtr:	
  1117                           
  1118                           	psect	text7
  1119  00FD                     __ptext7:	
  1120 ;; *************** function _checkBatAD *****************
  1121 ;; Defined at:
  1122 ;;		line 313 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;		None
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;		None
  1127 ;; Return value:  Size  Location     Type
  1128 ;;                  1    wreg      void 
  1129 ;; Registers used:
  1130 ;;		wreg, status,2, status,0, pclath, cstack
  1131 ;; Tracked objects:
  1132 ;;		On entry : 100/0
  1133 ;;		On exit  : 0/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMMON   BANK0   BANK1
  1136 ;;      Params:         0       0       0
  1137 ;;      Locals:         0       0       0
  1138 ;;      Temps:          0       2       0
  1139 ;;      Totals:         0       2       0
  1140 ;;Total ram usage:        2 bytes
  1141 ;; Hardware stack levels used:    1
  1142 ;; Hardware stack levels required when called:    2
  1143 ;; This function calls:
  1144 ;;		_ADC_Sample
  1145 ;; This function is called by:
  1146 ;;		_main
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150                           
  1151                           ;psect for function _checkBatAD
  1152  00FD                     _checkBatAD:	
  1153                           
  1154                           ;main.c: 315: test_adc = ADC_Sample(1, 5);
  1155                           
  1156                           ;incstack = 0
  1157                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  1158  00FD  3005               	movlw	5
  1159  00FE  00F2               	movwf	ADC_Sample@adldo
  1160  00FF  3001               	movlw	1
  1161  0100  2016               	fcall	_ADC_Sample
  1162  0101  00B7               	movwf	_test_adc	;volatile
  1163                           
  1164                           ;main.c: 316: if (0xA5 == test_adc)
  1165  0102  30A5               	movlw	165
  1166  0103  0637               	xorwf	_test_adc,w	;volatile
  1167  0104  1D03               	btfss	3,2
  1168  0105  2951               	goto	l2004
  1169                           
  1170                           ;main.c: 317: {
  1171                           ;main.c: 318: batADValue = adresult;
  1172  0106  0878               	movf	_adresult+1,w	;volatile
  1173  0107  00A7               	movwf	_batADValue+1
  1174  0108  0877               	movf	_adresult,w	;volatile
  1175  0109  00A6               	movwf	_batADValue
  1176                           
  1177                           ;main.c: 319: if(batADValue < 1117)
  1178  010A  3004               	movlw	4
  1179  010B  0227               	subwf	_batADValue+1,w
  1180  010C  305D               	movlw	93
  1181  010D  1903               	skipnz
  1182  010E  0226               	subwf	_batADValue,w
  1183  010F  1803               	skipnc
  1184  0110  2923               	goto	l1988
  1185                           
  1186                           ;main.c: 320: {
  1187                           ;main.c: 321: pwStep = 0;
  1188  0111  01B0               	clrf	_pwStep
  1189                           
  1190                           ;main.c: 322: if(++count8s > 800)
  1191  0112  0AA2               	incf	_count8s,f
  1192  0113  1903               	skipnz
  1193  0114  0AA3               	incf	_count8s+1,f
  1194  0115  3003               	movlw	3
  1195  0116  0223               	subwf	_count8s+1,w
  1196  0117  3021               	movlw	33
  1197  0118  1903               	skipnz
  1198  0119  0222               	subwf	_count8s,w
  1199  011A  1C03               	skipc
  1200  011B  295A               	goto	l2008
  1201                           
  1202                           ;main.c: 323: {
  1203                           ;main.c: 324: count8s = 0;
  1204  011C  01A2               	clrf	_count8s
  1205  011D  01A3               	clrf	_count8s+1
  1206                           
  1207                           ;main.c: 325: lowBatFlag = 1;
  1208  011E  01AE               	clrf	_lowBatFlag
  1209  011F  0AAE               	incf	_lowBatFlag,f
  1210                           
  1211                           ;main.c: 330: }
  1212                           ;main.c: 331: prePwStep = 0;
  1213  0120  01AF               	clrf	_prePwStep
  1214                           
  1215                           ;main.c: 332: workStep = 0;
  1216  0121  01FA               	clrf	_workStep
  1217  0122  295A               	goto	l2008
  1218  0123                     l1988:	
  1219  0123  3005               	movlw	5
  1220                           
  1221                           ;main.c: 335: else
  1222                           ;main.c: 336: {
  1223                           ;main.c: 337: count8s = 0;
  1224  0124  01A2               	clrf	_count8s
  1225  0125  01A3               	clrf	_count8s+1
  1226                           
  1227                           ;main.c: 338: if(batADValue >= 1340)
  1228  0126  0227               	subwf	_batADValue+1,w
  1229  0127  303C               	movlw	60
  1230  0128  1903               	skipnz
  1231  0129  0226               	subwf	_batADValue,w
  1232                           
  1233                           ;main.c: 339: {
  1234                           ;main.c: 340: pwStep = ((batADValue - 1340) /2) + 13;
  1235  012A  0826               	movf	_batADValue,w
  1236  012B  1C03               	skipc
  1237  012C  293A               	goto	L2
  1238  012D  3EC4               	addlw	196
  1239  012E  00C5               	movwf	??_checkBatAD
  1240  012F  0827               	movf	_batADValue+1,w
  1241  0130  1803               	skipnc
  1242  0131  3E01               	addlw	1
  1243  0132  3EFA               	addlw	250
  1244  0133  00C6               	movwf	??_checkBatAD+1
  1245  0134  1003               	clrc
  1246  0135  0CC6               	rrf	??_checkBatAD+1,f
  1247  0136  0CC5               	rrf	??_checkBatAD,f
  1248  0137  0845               	movf	??_checkBatAD,w
  1249  0138  3E0D               	addlw	13
  1250  0139  2949               	goto	L1
  1251  013A                     L2:	
  1252                           ;main.c: 342: else
  1253                           ;main.c: 343: {
  1254                           ;main.c: 344: pwStep = (batADValue - 1117) / 16;
  1255                           
  1256                           ;main.c: 341: }
  1257                           
  1258  013A  3EA3               	addlw	163
  1259  013B  00C5               	movwf	??_checkBatAD
  1260  013C  0827               	movf	_batADValue+1,w
  1261  013D  1803               	skipnc
  1262  013E  3E01               	addlw	1
  1263  013F  3EFB               	addlw	251
  1264  0140  00C6               	movwf	??_checkBatAD+1
  1265  0141  3004               	movlw	4
  1266  0142                     u1435:	
  1267  0142  1003               	clrc
  1268  0143  0CC6               	rrf	??_checkBatAD+1,f
  1269  0144  0CC5               	rrf	??_checkBatAD,f
  1270  0145  3EFF               	addlw	-1
  1271  0146  1D03               	skipz
  1272  0147  2942               	goto	u1435
  1273  0148  0845               	movf	??_checkBatAD,w
  1274  0149                     L1:	
  1275  0149  00B0               	movwf	_pwStep
  1276                           
  1277                           ;main.c: 345: }
  1278                           ;main.c: 346: if(pwStep > 99)
  1279  014A  3064               	movlw	100
  1280  014B  0230               	subwf	_pwStep,w
  1281  014C  1C03               	skipc
  1282  014D  295A               	goto	l2008
  1283                           
  1284                           ;main.c: 347: {
  1285                           ;main.c: 348: pwStep = 99;
  1286  014E  3063               	movlw	99
  1287  014F  00B0               	movwf	_pwStep
  1288  0150  295A               	goto	l2008
  1289  0151                     l2004:	
  1290                           
  1291                           ;main.c: 356: else
  1292                           ;main.c: 357: {
  1293                           ;main.c: 358: ADCON0 = 0;
  1294  0151  1683               	bsf	3,5	;RP0=1, select bank1
  1295  0152  0195               	clrf	21	;volatile
  1296                           
  1297                           ;main.c: 359: ADCON1 = 0;
  1298  0153  0196               	clrf	22	;volatile
  1299                           
  1300                           ;main.c: 360: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1301  0154  3084               	movlw	132
  1302  0155  1283               	bcf	3,5	;RP0=0, select bank0
  1303  0156  00C5               	movwf	??_checkBatAD
  1304  0157                     u1597:	
  1305  0157  0BC5               	decfsz	??_checkBatAD,f
  1306  0158  2957               	goto	u1597
  1307  0159  295A               	nop2
  1308  015A                     l2008:	
  1309                           
  1310                           ;main.c: 361: }
  1311                           ;main.c: 362: test_adc = ADC_Sample(2, 5);
  1312  015A  3005               	movlw	5
  1313  015B  00F2               	movwf	ADC_Sample@adldo
  1314  015C  3002               	movlw	2
  1315  015D  2016               	fcall	_ADC_Sample
  1316  015E  00B7               	movwf	_test_adc	;volatile
  1317                           
  1318                           ;main.c: 363: if (0xA5 == test_adc)
  1319  015F  30A5               	movlw	165
  1320  0160  0637               	xorwf	_test_adc,w	;volatile
  1321  0161  1D03               	btfss	3,2
  1322  0162  298A               	goto	l2026
  1323                           
  1324                           ;main.c: 364: {
  1325                           ;main.c: 365: if(chrgFlag && adresult > 100)
  1326  0163  087B               	movf	_chrgFlag,w
  1327  0164  1903               	btfsc	3,2
  1328  0165  0008               	return
  1329  0166  3000               	movlw	0
  1330  0167  0278               	subwf	_adresult+1,w	;volatile
  1331  0168  3065               	movlw	101
  1332  0169  1903               	skipnz
  1333  016A  0277               	subwf	_adresult,w	;volatile
  1334  016B  1C03               	skipc
  1335  016C  0008               	return
  1336                           
  1337                           ;main.c: 366: {
  1338                           ;main.c: 368: if(adresult > 810 || (batADValue - adresult) > 810)
  1339  016D  3003               	movlw	3
  1340  016E  0278               	subwf	_adresult+1,w	;volatile
  1341  016F  302B               	movlw	43
  1342  0170  1903               	skipnz
  1343  0171  0277               	subwf	_adresult,w	;volatile
  1344  0172  1803               	skipnc
  1345  0173  2983               	goto	l2020
  1346  0174  0877               	movf	_adresult,w	;volatile
  1347  0175  0226               	subwf	_batADValue,w
  1348  0176  00C5               	movwf	??_checkBatAD
  1349  0177  0878               	movf	_adresult+1,w	;volatile
  1350  0178  1C03               	skipc
  1351  0179  0A78               	incf	_adresult+1,w	;volatile
  1352  017A  0227               	subwf	_batADValue+1,w
  1353  017B  00C6               	movwf	??_checkBatAD+1
  1354  017C  3003               	movlw	3
  1355  017D  0246               	subwf	??_checkBatAD+1,w
  1356  017E  302B               	movlw	43
  1357  017F  1903               	skipnz
  1358  0180  0245               	subwf	??_checkBatAD,w
  1359  0181  1C03               	skipc
  1360  0182  2988               	goto	l2022
  1361  0183                     l2020:	
  1362                           
  1363                           ;main.c: 369: {
  1364                           ;main.c: 371: if(++countHalfFull > 250)
  1365  0183  30FB               	movlw	251
  1366  0184  0AB3               	incf	_countHalfFull,f
  1367  0185  0233               	subwf	_countHalfFull,w
  1368  0186  1C03               	skipc
  1369  0187  0008               	return
  1370  0188                     l2022:	
  1371                           
  1372                           ;main.c: 374: protectFlag = 2;
  1373  0188  01B3               	clrf	_countHalfFull
  1374                           
  1375                           ;main.c: 380: }
  1376                           ;main.c: 381: }
  1377                           ;main.c: 382: }
  1378  0189  0008               	return
  1379  018A                     l2026:	
  1380                           
  1381                           ;main.c: 383: else
  1382                           ;main.c: 384: {
  1383                           ;main.c: 385: ADCON0 = 0;
  1384  018A  1683               	bsf	3,5	;RP0=1, select bank1
  1385  018B  0195               	clrf	21	;volatile
  1386                           
  1387                           ;main.c: 386: ADCON1 = 0;
  1388  018C  0196               	clrf	22	;volatile
  1389                           
  1390                           ;main.c: 387: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1391  018D  3084               	movlw	132
  1392  018E  1283               	bcf	3,5	;RP0=0, select bank0
  1393  018F  00C5               	movwf	??_checkBatAD
  1394  0190                     u1607:	
  1395  0190  0BC5               	decfsz	??_checkBatAD,f
  1396  0191  2990               	goto	u1607
  1397  0192  2993               	nop2
  1398  0193  0008               	return
  1399  0194                     __end_of_checkBatAD:	
  1400                           
  1401                           	psect	text8
  1402  0016                     __ptext8:	
  1403 ;; *************** function _ADC_Sample *****************
  1404 ;; Defined at:
  1405 ;;		line 597 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;  adch            1    wreg     unsigned char 
  1408 ;;  adldo           1    2[COMMON] unsigned char 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  adch            1    1[BANK0 ] unsigned char 
  1411 ;;  j               1    0[BANK0 ] unsigned char 
  1412 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1413 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1414 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1415 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1416 ;;  i               1    2[BANK0 ] unsigned char 
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  1    wreg      unsigned char 
  1419 ;; Registers used:
  1420 ;;		wreg, status,2, status,0
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 100/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMMON   BANK0   BANK1
  1426 ;;      Params:         1       0       0
  1427 ;;      Locals:         0      13       0
  1428 ;;      Temps:          4       0       0
  1429 ;;      Totals:         5      13       0
  1430 ;;Total ram usage:       18 bytes
  1431 ;; Hardware stack levels used:    1
  1432 ;; Hardware stack levels required when called:    1
  1433 ;; This function calls:
  1434 ;;		Nothing
  1435 ;; This function is called by:
  1436 ;;		_checkBatAD
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           
  1441                           ;psect for function _ADC_Sample
  1442  0016                     _ADC_Sample:	
  1443                           
  1444                           ;incstack = 0
  1445                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1446                           ;ADC_Sample@adch stored from wreg
  1447  0016  1283               	bcf	3,5	;RP0=0, select bank0
  1448  0017  00B9               	movwf	ADC_Sample@adch
  1449                           
  1450                           ;main.c: 599: volatile unsigned long adsum = 0;
  1451                           
  1452                           ;main.c: 600: volatile unsigned int admin = 0, admax = 0;
  1453  0018  20EF               	fcall	PL4	;call to abstracted procedure
  1454                           
  1455                           ;main.c: 601: volatile unsigned int ad_temp = 0;
  1456  0019  01C3               	clrf	ADC_Sample@ad_temp	;volatile
  1457  001A  01C4               	clrf	ADC_Sample@ad_temp+1	;volatile
  1458                           
  1459                           ;main.c: 603: if ((!LDO_EN) && (adldo & 0x04) )
  1460  001B  1683               	bsf	3,5	;RP0=1, select bank1
  1461  001C  1D16               	btfss	22,2	;volatile
  1462  001D  1D72               	btfss	ADC_Sample@adldo,2
  1463  001E  2826               	goto	l1638
  1464                           
  1465                           ;main.c: 604: {
  1466                           ;main.c: 606: ADCON1 = adldo;
  1467  001F  0872               	movf	ADC_Sample@adldo,w
  1468  0020  0096               	movwf	22	;volatile
  1469                           
  1470                           ;main.c: 607: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1471  0021  3085               	movlw	133
  1472  0022  00F3               	movwf	??_ADC_Sample
  1473  0023                     u1617:	
  1474  0023  0BF3               	decfsz	??_ADC_Sample,f
  1475  0024  2823               	goto	u1617
  1476                           
  1477                           ;main.c: 608: }
  1478  0025  2828               	goto	l1640
  1479  0026                     l1638:	
  1480                           
  1481                           ;main.c: 609: else
  1482                           ;main.c: 610: ADCON1 = adldo;
  1483  0026  0872               	movf	ADC_Sample@adldo,w
  1484  0027  0096               	movwf	22	;volatile
  1485  0028                     l1640:	
  1486                           
  1487                           ;main.c: 612: if(adch & 0x10)
  1488  0028  1283               	bcf	3,5	;RP0=0, select bank0
  1489  0029  1E39               	btfss	ADC_Sample@adch,4
  1490  002A  2830               	goto	l1648
  1491                           
  1492                           ;main.c: 613: {
  1493                           ;main.c: 614: CHS4 = 1;
  1494  002B  1683               	bsf	3,5	;RP0=1, select bank1
  1495  002C  1716               	bsf	22,6	;volatile
  1496                           
  1497                           ;main.c: 615: adch &= 0x0f;
  1498  002D  300F               	movlw	15
  1499  002E  1283               	bcf	3,5	;RP0=0, select bank0
  1500  002F  05B9               	andwf	ADC_Sample@adch,f
  1501  0030                     l1648:	
  1502                           
  1503                           ;main.c: 618: for (i = 0; i < 10; i++)
  1504  0030  01BA               	clrf	ADC_Sample@i
  1505  0031                     l1654:	
  1506                           
  1507                           ;main.c: 619: {
  1508                           ;main.c: 620: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1509  0031  0839               	movf	ADC_Sample@adch,w
  1510  0032  00F3               	movwf	??_ADC_Sample
  1511  0033  3001               	movlw	1
  1512  0034  1003               	clrc
  1513  0035                     L3:	
  1514  0035  0DF3               	rlf	??_ADC_Sample,f
  1515  0036  3EFF               	addlw	-1
  1516  0037  1003               	clrc
  1517  0038  1D03               	skipz
  1518  0039  2835               	goto	L3
  1519  003A  0D73               	rlf	??_ADC_Sample,w
  1520  003B  3841               	iorlw	65
  1521  003C  1683               	bsf	3,5	;RP0=1, select bank1
  1522  003D  0095               	movwf	21	;volatile
  1523  003E  0000               	nop	;# 
  1524  003F  0000               	nop	;# 
  1525  0040  0000               	nop	;# 
  1526  0041  0000               	nop	;# 
  1527                           
  1528                           ;main.c: 625: GODONE = 1;
  1529  0042  1683               	bsf	3,5	;RP0=1, select bank1
  1530  0043  1495               	bsf	21,1	;volatile
  1531                           
  1532                           ;main.c: 627: unsigned char j = 0;
  1533  0044  1283               	bcf	3,5	;RP0=0, select bank0
  1534  0045  01B8               	clrf	ADC_Sample@j
  1535  0046                     l759:	
  1536                           ;main.c: 628: while (GODONE)
  1537                           
  1538  0046  1683               	bsf	3,5	;RP0=1, select bank1
  1539  0047  1C95               	btfss	21,1	;volatile
  1540  0048  2851               	goto	l1664
  1541                           
  1542                           ;main.c: 629: {
  1543                           ;main.c: 630: _delay((unsigned long)((2)*(16000000/4000000.0)));
  1544  0049  284A               	nop2	;2 cycle nop
  1545  004A  284B               	nop2	;2 cycle nop
  1546  004B  284C               	nop2	;2 cycle nop
  1547  004C  284D               	nop2	;2 cycle nop
  1548                           
  1549                           ;main.c: 632: if (0 == (--j))
  1550  004D  1283               	bcf	3,5	;RP0=0, select bank0
  1551  004E  0BB8               	decfsz	ADC_Sample@j,f
  1552  004F  2846               	goto	l759
  1553                           
  1554                           ;main.c: 633: return 0;
  1555  0050  3400               	retlw	0
  1556  0051                     l1664:	
  1557                           
  1558                           ;main.c: 634: }
  1559                           ;main.c: 636: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  1560  0051  0819               	movf	25,w	;volatile
  1561  0052  1283               	bcf	3,5	;RP0=0, select bank0
  1562  0053  00C3               	movwf	ADC_Sample@ad_temp	;volatile
  1563  0054  01C4               	clrf	ADC_Sample@ad_temp+1	;volatile
  1564  0055  0EC3               	swapf	ADC_Sample@ad_temp,f	;volatile
  1565  0056  0EC4               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  1566  0057  30F0               	movlw	240
  1567  0058  05C4               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  1568  0059  0843               	movf	ADC_Sample@ad_temp,w	;volatile
  1569  005A  390F               	andlw	15
  1570  005B  04C4               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  1571  005C  30F0               	movlw	240
  1572  005D  05C3               	andwf	ADC_Sample@ad_temp,f	;volatile
  1573  005E  1683               	bsf	3,5	;RP0=1, select bank1
  1574  005F  0E18               	swapf	24,w	;volatile
  1575  0060  390F               	andlw	15
  1576  0061  1283               	bcf	3,5	;RP0=0, select bank0
  1577  0062  07C3               	addwf	ADC_Sample@ad_temp,f	;volatile
  1578  0063  1803               	skipnc
  1579  0064  0AC4               	incf	ADC_Sample@ad_temp+1,f	;volatile
  1580                           
  1581                           ;main.c: 638: if (0 == admax)
  1582  0065  0841               	movf	ADC_Sample@admax,w	;volatile
  1583  0066  0442               	iorwf	ADC_Sample@admax+1,w	;volatile
  1584  0067  1D03               	btfss	3,2
  1585  0068  286B               	goto	l1672
  1586                           
  1587                           ;main.c: 639: {
  1588                           ;main.c: 640: admax = ad_temp;
  1589  0069  20F8               	fcall	PL6	;call to abstracted procedure
  1590  006A  287D               	goto	l1678
  1591  006B                     l1672:	
  1592                           ;main.c: 642: }
  1593                           
  1594                           ;main.c: 641: admin = ad_temp;
  1595                           
  1596                           
  1597                           ;main.c: 643: else if (ad_temp > admax)
  1598  006B  0844               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1599  006C  0242               	subwf	ADC_Sample@admax+1,w	;volatile
  1600  006D  1D03               	skipz
  1601  006E  2871               	goto	u805
  1602  006F  0843               	movf	ADC_Sample@ad_temp,w	;volatile
  1603  0070  0241               	subwf	ADC_Sample@admax,w	;volatile
  1604  0071                     u805:	
  1605  0071  1803               	skipnc
  1606  0072  2875               	goto	l1676
  1607                           
  1608                           ;main.c: 644: admax = ad_temp;
  1609  0073  20F8               	fcall	PL6	;call to abstracted procedure
  1610  0074  2881               	goto	l765
  1611  0075                     l1676:	
  1612                           
  1613                           ;main.c: 645: else if (ad_temp < admin)
  1614  0075  0840               	movf	ADC_Sample@admin+1,w	;volatile
  1615  0076  0244               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1616  0077  1D03               	skipz
  1617  0078  287B               	goto	u815
  1618  0079  083F               	movf	ADC_Sample@admin,w	;volatile
  1619  007A  0243               	subwf	ADC_Sample@ad_temp,w	;volatile
  1620  007B                     u815:	
  1621  007B  1803               	skipnc
  1622  007C  2881               	goto	l765
  1623  007D                     l1678:	
  1624                           
  1625                           ;main.c: 646: admin = ad_temp;
  1626  007D  0844               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1627  007E  00C0               	movwf	ADC_Sample@admin+1	;volatile
  1628  007F  0843               	movf	ADC_Sample@ad_temp,w	;volatile
  1629  0080  00BF               	movwf	ADC_Sample@admin	;volatile
  1630  0081                     l765:	
  1631                           
  1632                           ;main.c: 648: adsum += ad_temp;
  1633  0081  0843               	movf	ADC_Sample@ad_temp,w	;volatile
  1634  0082  00F3               	movwf	??_ADC_Sample
  1635  0083  0844               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1636  0084  00F4               	movwf	??_ADC_Sample+1
  1637  0085  01F5               	clrf	??_ADC_Sample+2
  1638  0086  01F6               	clrf	??_ADC_Sample+3
  1639  0087  0873               	movf	??_ADC_Sample,w
  1640  0088  07BB               	addwf	ADC_Sample@adsum,f	;volatile
  1641  0089  0874               	movf	??_ADC_Sample+1,w
  1642  008A  1103               	clrz
  1643  008B  1803               	skipnc
  1644  008C  3E01               	addlw	1
  1645  008D  1D03               	btfss	3,2
  1646  008E  07BC               	addwf	ADC_Sample@adsum+1,f	;volatile
  1647  008F  0875               	movf	??_ADC_Sample+2,w
  1648  0090  1103               	clrz
  1649  0091  1803               	skipnc
  1650  0092  3E01               	addlw	1
  1651  0093  1D03               	btfss	3,2
  1652  0094  07BD               	addwf	ADC_Sample@adsum+2,f	;volatile
  1653  0095  0876               	movf	??_ADC_Sample+3,w
  1654  0096  1103               	clrz
  1655  0097  1803               	skipnc
  1656  0098  3E01               	addlw	1
  1657  0099  1D03               	btfss	3,2
  1658  009A  07BE               	addwf	ADC_Sample@adsum+3,f	;volatile
  1659  009B  300A               	movlw	10
  1660  009C  0ABA               	incf	ADC_Sample@i,f
  1661  009D  023A               	subwf	ADC_Sample@i,w
  1662  009E  1C03               	skipc
  1663  009F  2831               	goto	l1654
  1664                           
  1665                           ;main.c: 649: }
  1666                           ;main.c: 650: adsum -= admax;
  1667  00A0  0841               	movf	ADC_Sample@admax,w	;volatile
  1668  00A1  00F3               	movwf	??_ADC_Sample
  1669  00A2  0842               	movf	ADC_Sample@admax+1,w	;volatile
  1670  00A3  20E0               	fcall	PL2	;call to abstracted procedure
  1671  00A4  1C03               	skipc
  1672  00A5  0F76               	incfsz	??_ADC_Sample+3,w
  1673  00A6  02BE               	subwf	ADC_Sample@adsum+3,f	;volatile
  1674                           
  1675                           ;main.c: 651: if (adsum >= admin)
  1676  00A7  083F               	movf	ADC_Sample@admin,w	;volatile
  1677  00A8  00F3               	movwf	??_ADC_Sample
  1678  00A9  0840               	movf	ADC_Sample@admin+1,w	;volatile
  1679  00AA  00F4               	movwf	??_ADC_Sample+1
  1680  00AB  01F5               	clrf	??_ADC_Sample+2
  1681  00AC  01F6               	clrf	??_ADC_Sample+3
  1682  00AD  0876               	movf	??_ADC_Sample+3,w
  1683  00AE  023E               	subwf	ADC_Sample@adsum+3,w	;volatile
  1684  00AF  1D03               	skipz
  1685  00B0  28BB               	goto	u855
  1686  00B1  0875               	movf	??_ADC_Sample+2,w
  1687  00B2  023D               	subwf	ADC_Sample@adsum+2,w	;volatile
  1688  00B3  1D03               	skipz
  1689  00B4  28BB               	goto	u855
  1690  00B5  0874               	movf	??_ADC_Sample+1,w
  1691  00B6  023C               	subwf	ADC_Sample@adsum+1,w	;volatile
  1692  00B7  1D03               	skipz
  1693  00B8  28BB               	goto	u855
  1694  00B9  0873               	movf	??_ADC_Sample,w
  1695  00BA  023B               	subwf	ADC_Sample@adsum,w	;volatile
  1696  00BB                     u855:	
  1697  00BB  1C03               	skipc
  1698  00BC  28C5               	goto	l769
  1699                           
  1700                           ;main.c: 652: adsum -= admin;
  1701  00BD  083F               	movf	ADC_Sample@admin,w	;volatile
  1702  00BE  00F3               	movwf	??_ADC_Sample
  1703  00BF  0840               	movf	ADC_Sample@admin+1,w	;volatile
  1704  00C0  20E0               	fcall	PL2	;call to abstracted procedure
  1705  00C1  1C03               	skipc
  1706  00C2  0F76               	incfsz	??_ADC_Sample+3,w
  1707  00C3  02BE               	subwf	ADC_Sample@adsum+3,f	;volatile
  1708  00C4  28C9               	goto	l1688
  1709  00C5                     l769:	
  1710                           
  1711                           ;main.c: 653: else
  1712                           ;main.c: 654: adsum = 0;
  1713  00C5  01BB               	clrf	ADC_Sample@adsum	;volatile
  1714  00C6  01BC               	clrf	ADC_Sample@adsum+1	;volatile
  1715  00C7  01BD               	clrf	ADC_Sample@adsum+2	;volatile
  1716  00C8  01BE               	clrf	ADC_Sample@adsum+3	;volatile
  1717  00C9                     l1688:	
  1718                           
  1719                           ;main.c: 656: adresult = adsum >> 3;
  1720  00C9  083B               	movf	ADC_Sample@adsum,w	;volatile
  1721  00CA  00F3               	movwf	??_ADC_Sample
  1722  00CB  083C               	movf	ADC_Sample@adsum+1,w	;volatile
  1723  00CC  00F4               	movwf	??_ADC_Sample+1
  1724  00CD  083D               	movf	ADC_Sample@adsum+2,w	;volatile
  1725  00CE  00F5               	movwf	??_ADC_Sample+2
  1726  00CF  083E               	movf	ADC_Sample@adsum+3,w	;volatile
  1727  00D0  00F6               	movwf	??_ADC_Sample+3
  1728  00D1  3003               	movlw	3
  1729  00D2                     u875:	
  1730  00D2  1003               	clrc
  1731  00D3  0CF6               	rrf	??_ADC_Sample+3,f
  1732  00D4  0CF5               	rrf	??_ADC_Sample+2,f
  1733  00D5  0CF4               	rrf	??_ADC_Sample+1,f
  1734  00D6  0CF3               	rrf	??_ADC_Sample,f
  1735  00D7  3EFF               	addlw	-1
  1736  00D8  1D03               	skipz
  1737  00D9  28D2               	goto	u875
  1738  00DA  0874               	movf	??_ADC_Sample+1,w
  1739  00DB  00F8               	movwf	_adresult+1	;volatile
  1740  00DC  0873               	movf	??_ADC_Sample,w
  1741  00DD  00F7               	movwf	_adresult	;volatile
  1742                           
  1743                           ;main.c: 658: adsum = 0;
  1744                           
  1745                           ;main.c: 659: admin = 0;
  1746                           
  1747                           ;main.c: 660: admax = 0;
  1748  00DE  20EF               	fcall	PL4	;call to abstracted procedure
  1749                           
  1750                           ;main.c: 661: return 0xA5;
  1751  00DF  34A5               	retlw	165
  1752  00E0                     __end_of_ADC_Sample:	
  1753  00E0                     PL2:	
  1754  00E0  00F4               	movwf	??_ADC_Sample+1
  1755  00E1  01F5               	clrf	??_ADC_Sample+2
  1756  00E2  01F6               	clrf	??_ADC_Sample+3
  1757  00E3  0873               	movf	??_ADC_Sample,w
  1758  00E4  02BB               	subwf	ADC_Sample@adsum,f	;volatile
  1759  00E5  0874               	movf	??_ADC_Sample+1,w
  1760  00E6  1C03               	skipc
  1761  00E7  0F74               	incfsz	??_ADC_Sample+1,w
  1762  00E8  02BC               	subwf	ADC_Sample@adsum+1,f	;volatile
  1763  00E9  0875               	movf	??_ADC_Sample+2,w
  1764  00EA  1C03               	skipc
  1765  00EB  0F75               	incfsz	??_ADC_Sample+2,w
  1766  00EC  02BD               	subwf	ADC_Sample@adsum+2,f	;volatile
  1767  00ED  0876               	movf	??_ADC_Sample+3,w
  1768  00EE  0008               	return
  1769  00EF                     __end_ofPL2:	
  1770  00EF                     PL4:	
  1771  00EF  01BB               	clrf	ADC_Sample@adsum	;volatile
  1772  00F0  01BC               	clrf	ADC_Sample@adsum+1	;volatile
  1773  00F1  01BD               	clrf	ADC_Sample@adsum+2	;volatile
  1774  00F2  01BE               	clrf	ADC_Sample@adsum+3	;volatile
  1775  00F3  01BF               	clrf	ADC_Sample@admin	;volatile
  1776  00F4  01C0               	clrf	ADC_Sample@admin+1	;volatile
  1777  00F5  01C1               	clrf	ADC_Sample@admax	;volatile
  1778  00F6  01C2               	clrf	ADC_Sample@admax+1	;volatile
  1779  00F7  0008               	return
  1780  00F8                     __end_ofPL4:	
  1781  00F8                     PL6:	
  1782  00F8  0844               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1783  00F9  00C2               	movwf	ADC_Sample@admax+1	;volatile
  1784  00FA  0843               	movf	ADC_Sample@ad_temp,w	;volatile
  1785  00FB  00C1               	movwf	ADC_Sample@admax	;volatile
  1786  00FC  0008               	return
  1787  00FD                     __end_ofPL6:	
  1788                           
  1789                           	psect	text9
  1790  0225                     __ptext9:	
  1791 ;; *************** function _Sleep_Mode *****************
  1792 ;; Defined at:
  1793 ;;		line 521 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
  1794 ;; Parameters:    Size  Location     Type
  1795 ;;		None
  1796 ;; Auto vars:     Size  Location     Type
  1797 ;;		None
  1798 ;; Return value:  Size  Location     Type
  1799 ;;                  1    wreg      void 
  1800 ;; Registers used:
  1801 ;;		wreg, status,2, status,0, pclath, cstack
  1802 ;; Tracked objects:
  1803 ;;		On entry : 100/0
  1804 ;;		On exit  : 100/100
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMMON   BANK0   BANK1
  1807 ;;      Params:         0       0       0
  1808 ;;      Locals:         0       0       0
  1809 ;;      Temps:          0       0       0
  1810 ;;      Totals:         0       0       0
  1811 ;;Total ram usage:        0 bytes
  1812 ;; Hardware stack levels used:    1
  1813 ;; Hardware stack levels required when called:    2
  1814 ;; This function calls:
  1815 ;;		_AD_Init
  1816 ;;		_Init_System
  1817 ;; This function is called by:
  1818 ;;		_main
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           
  1823                           ;psect for function _Sleep_Mode
  1824  0225                     _Sleep_Mode:	
  1825                           
  1826                           ;main.c: 523: INTCON = 0;
  1827                           
  1828                           ;incstack = 0
  1829                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  1830  0225  018B               	clrf	11	;volatile
  1831                           
  1832                           ;main.c: 525: OPTION_REG = 0;
  1833  0226  0181               	clrf	1	;volatile
  1834                           
  1835                           ;main.c: 527: TRISA = 0x06;
  1836  0227  3006               	movlw	6
  1837  0228  1683               	bsf	3,5	;RP0=1, select bank1
  1838  0229  0085               	movwf	5	;volatile
  1839                           
  1840                           ;main.c: 528: WPUA = 0B00000000;
  1841  022A  0188               	clrf	8	;volatile
  1842                           
  1843                           ;main.c: 529: PORTA = 0x00;
  1844  022B  0186               	clrf	6	;volatile
  1845                           
  1846                           ;main.c: 530: TRISB = 0x24;
  1847  022C  3024               	movlw	36
  1848  022D  1283               	bcf	3,5	;RP0=0, select bank0
  1849  022E  0085               	movwf	5	;volatile
  1850                           
  1851                           ;main.c: 531: PORTB = 0x03;
  1852  022F  3003               	movlw	3
  1853  0230  0086               	movwf	6	;volatile
  1854                           
  1855                           ;main.c: 532: WPUB = 0x20;
  1856  0231  3020               	movlw	32
  1857  0232  0088               	movwf	8	;volatile
  1858                           
  1859                           ;main.c: 534: ADCON0 = 0;
  1860  0233  1683               	bsf	3,5	;RP0=1, select bank1
  1861  0234  0195               	clrf	21	;volatile
  1862                           
  1863                           ;main.c: 535: ADCON1 = 0;
  1864  0235  0196               	clrf	22	;volatile
  1865                           
  1866                           ;main.c: 537: PWMCON0 = 0;
  1867  0236  1283               	bcf	3,5	;RP0=0, select bank0
  1868  0237  0195               	clrf	21	;volatile
  1869                           
  1870                           ;main.c: 539: OSCCON = 0X70;
  1871  0238  3070               	movlw	112
  1872  0239  0094               	movwf	20	;volatile
  1873                           
  1874                           ;main.c: 541: IOCA = 0B00000000;
  1875  023A  1683               	bsf	3,5	;RP0=1, select bank1
  1876  023B  0189               	clrf	9	;volatile
  1877                           
  1878                           ;main.c: 542: IOCB = 0x24;
  1879  023C  3024               	movlw	36
  1880  023D  1283               	bcf	3,5	;RP0=0, select bank0
  1881  023E  0089               	movwf	9	;volatile
  1882                           
  1883                           ;main.c: 544: RAIE = 1;
  1884  023F  158E               	bsf	14,3	;volatile
  1885                           
  1886                           ;main.c: 545: PEIE = 1;
  1887  0240  170B               	bsf	11,6	;volatile
  1888                           
  1889                           ;main.c: 546: RBIE = 1;
  1890  0241  158B               	bsf	11,3	;volatile
  1891                           
  1892                           ;main.c: 547: GIE = 0;
  1893  0242  138B               	bcf	11,7	;volatile
  1894                           
  1895                           ;main.c: 549: PIE1 &= 0X08;
  1896  0243  3008               	movlw	8
  1897  0244  058E               	andwf	14,f	;volatile
  1898                           
  1899                           ;main.c: 550: PIR1 = 0;
  1900  0245  018D               	clrf	13	;volatile
  1901                           
  1902                           ;main.c: 551: INTCON &= 0XC8;
  1903  0246  30C8               	movlw	200
  1904  0247  058B               	andwf	11,f	;volatile
  1905                           
  1906                           ;main.c: 553: PORTA;
  1907  0248  1683               	bsf	3,5	;RP0=1, select bank1
  1908  0249  0806               	movf	6,w	;volatile
  1909                           
  1910                           ;main.c: 554: RAIF = 0;
  1911  024A  1283               	bcf	3,5	;RP0=0, select bank0
  1912  024B  118D               	bcf	13,3	;volatile
  1913                           
  1914                           ;main.c: 555: PORTB;
  1915  024C  0806               	movf	6,w	;volatile
  1916                           
  1917                           ;main.c: 556: RBIF = 0;
  1918  024D  100B               	bcf	11,0	;volatile
  1919  024E  0064               	clrwdt	;# 
  1920  024F  0063               	sleep	;# 
  1921  0250  0000               	nop	;# 
  1922  0251  0064               	clrwdt	;# 
  1923  0252  0000               	nop	;# 
  1924  0253  0000               	nop	;# 
  1925  0254  0000               	nop	;# 
  1926  0255  0000               	nop	;# 
  1927  0256  0000               	nop	;# 
  1928                           
  1929                           ;main.c: 568: if(RAIF) RAIF = 0;
  1930  0257  1283               	bcf	3,5	;RP0=0, select bank0
  1931  0258  198D               	btfsc	13,3	;volatile
  1932  0259  118D               	bcf	13,3	;volatile
  1933                           
  1934                           ;main.c: 569: if(RBIF) RBIF = 0;
  1935  025A  180B               	btfsc	11,0	;volatile
  1936  025B  100B               	bcf	11,0	;volatile
  1937                           
  1938                           ;main.c: 570: if(TMR2IF) TMR2IF = 0;
  1939  025C  188D               	btfsc	13,1	;volatile
  1940  025D  108D               	bcf	13,1	;volatile
  1941                           
  1942                           ;main.c: 571: IOCA = 0B00000000;
  1943  025E  1683               	bsf	3,5	;RP0=1, select bank1
  1944  025F  0189               	clrf	9	;volatile
  1945                           
  1946                           ;main.c: 572: IOCB = 0B00000000;
  1947  0260  1283               	bcf	3,5	;RP0=0, select bank0
  1948  0261  0189               	clrf	9	;volatile
  1949                           
  1950                           ;main.c: 573: Init_System();
  1951  0262  2290               	fcall	_Init_System
  1952                           
  1953                           ;main.c: 574: AD_Init();
  1954  0263  2B0C               	ljmp	l1588
  1955  0264                     __end_of_Sleep_Mode:	
  1956                           
  1957                           	psect	text10
  1958  0290                     __ptext10:	
  1959 ;; *************** function _Init_System *****************
  1960 ;; Defined at:
  1961 ;;		line 400 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;		None
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;		None
  1966 ;; Return value:  Size  Location     Type
  1967 ;;                  1    wreg      void 
  1968 ;; Registers used:
  1969 ;;		wreg, status,2
  1970 ;; Tracked objects:
  1971 ;;		On entry : 100/0
  1972 ;;		On exit  : 100/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMMON   BANK0   BANK1
  1975 ;;      Params:         0       0       0
  1976 ;;      Locals:         0       0       0
  1977 ;;      Temps:          0       0       0
  1978 ;;      Totals:         0       0       0
  1979 ;;Total ram usage:        0 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    1
  1982 ;; This function calls:
  1983 ;;		Nothing
  1984 ;; This function is called by:
  1985 ;;		_main
  1986 ;;		_Sleep_Mode
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           
  1991                           ;psect for function _Init_System
  1992  0290                     _Init_System:	
  1993                           
  1994                           ;incstack = 0
  1995                           ; Regs used in _Init_System: [wreg+status,2]
  1996  0290  0000               	nop	;# 
  1997  0291  0064               	clrwdt	;# 
  1998                           
  1999                           ;main.c: 404: OPTION_REG = 0;
  2000  0292  1283               	bcf	3,5	;RP0=0, select bank0
  2001  0293  0181               	clrf	1	;volatile
  2002  0294  0064               	clrwdt	;# 
  2003                           
  2004                           ;main.c: 406: OSCCON = 0X72;
  2005  0295  3072               	movlw	114
  2006  0296  1283               	bcf	3,5	;RP0=0, select bank0
  2007  0297  0094               	movwf	20	;volatile
  2008                           
  2009                           ;main.c: 408: WPUA = 0B00000000;
  2010  0298  1683               	bsf	3,5	;RP0=1, select bank1
  2011  0299  0188               	clrf	8	;volatile
  2012                           
  2013                           ;main.c: 409: WPDA = 0x00;
  2014  029A  0187               	clrf	7	;volatile
  2015                           
  2016                           ;main.c: 410: WPUB = 0x20;
  2017  029B  3020               	movlw	32
  2018  029C  1283               	bcf	3,5	;RP0=0, select bank0
  2019  029D  0088               	movwf	8	;volatile
  2020                           
  2021                           ;main.c: 412: TRISA = 0x06;
  2022  029E  3006               	movlw	6
  2023  029F  1683               	bsf	3,5	;RP0=1, select bank1
  2024  02A0  0085               	movwf	5	;volatile
  2025                           
  2026                           ;main.c: 413: TRISB = 0x24;
  2027  02A1  3024               	movlw	36
  2028  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  2029  02A3  0085               	movwf	5	;volatile
  2030                           
  2031                           ;main.c: 415: PORTA = 0X00;
  2032  02A4  1683               	bsf	3,5	;RP0=1, select bank1
  2033  02A5  0186               	clrf	6	;volatile
  2034                           
  2035                           ;main.c: 416: PORTB = 0X03;
  2036  02A6  3003               	movlw	3
  2037  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2038  02A8  0086               	movwf	6	;volatile
  2039                           
  2040                           ;main.c: 420: PR2 = 249;
  2041  02A9  30F9               	movlw	249
  2042  02AA  0091               	movwf	17	;volatile
  2043                           
  2044                           ;main.c: 421: TMR2IF = 0;
  2045  02AB  108D               	bcf	13,1	;volatile
  2046                           
  2047                           ;main.c: 422: TMR2IE = 1;
  2048  02AC  148E               	bsf	14,1	;volatile
  2049                           
  2050                           ;main.c: 424: T2CON = 0B00000100;
  2051  02AD  3004               	movlw	4
  2052  02AE  0093               	movwf	19	;volatile
  2053                           
  2054                           ;main.c: 425: INTCON = 0XC0;
  2055  02AF  30C0               	movlw	192
  2056  02B0  008B               	movwf	11	;volatile
  2057  02B1  0008               	return
  2058  02B2                     __end_of_Init_System:	
  2059                           
  2060                           	psect	text11
  2061  030C                     __ptext11:	
  2062 ;; *************** function _AD_Init *****************
  2063 ;; Defined at:
  2064 ;;		line 437 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
  2065 ;; Parameters:    Size  Location     Type
  2066 ;;		None
  2067 ;; Auto vars:     Size  Location     Type
  2068 ;;		None
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  1    wreg      void 
  2071 ;; Registers used:
  2072 ;;		wreg, status,2
  2073 ;; Tracked objects:
  2074 ;;		On entry : 100/0
  2075 ;;		On exit  : 100/100
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMMON   BANK0   BANK1
  2078 ;;      Params:         0       0       0
  2079 ;;      Locals:         0       0       0
  2080 ;;      Temps:          0       0       0
  2081 ;;      Totals:         0       0       0
  2082 ;;Total ram usage:        0 bytes
  2083 ;; Hardware stack levels used:    1
  2084 ;; Hardware stack levels required when called:    1
  2085 ;; This function calls:
  2086 ;;		Nothing
  2087 ;; This function is called by:
  2088 ;;		_main
  2089 ;;		_Sleep_Mode
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           
  2094                           ;psect for function _AD_Init
  2095  030C                     _AD_Init:	
  2096  030C                     l1588:	
  2097                           ;incstack = 0
  2098                           ; Regs used in _AD_Init: [wreg+status,2]
  2099                           
  2100                           
  2101                           ;main.c: 470: ADCON0 = 0X41;
  2102  030C  3041               	movlw	65
  2103  030D  1683               	bsf	3,5	;RP0=1, select bank1
  2104  030E  0095               	movwf	21	;volatile
  2105                           
  2106                           ;main.c: 487: ADCON1 = 0;
  2107  030F  0196               	clrf	22	;volatile
  2108                           
  2109                           ;main.c: 488: ANSEL0 = 0X06;
  2110  0310  3006               	movlw	6
  2111  0311  0093               	movwf	19	;volatile
  2112  0312  0008               	return
  2113  0313                     __end_of_AD_Init:	
  2114                           
  2115                           	psect	text12
  2116  02CC                     __ptext12:	
  2117 ;; *************** function _Isr_Timer *****************
  2118 ;; Defined at:
  2119 ;;		line 103 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;		None
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;		None
  2124 ;; Return value:  Size  Location     Type
  2125 ;;                  1    wreg      void 
  2126 ;; Registers used:
  2127 ;;		wreg, status,2, status,0
  2128 ;; Tracked objects:
  2129 ;;		On entry : 0/0
  2130 ;;		On exit  : 100/0
  2131 ;;		Unchanged: 0/0
  2132 ;; Data sizes:     COMMON   BANK0   BANK1
  2133 ;;      Params:         0       0       0
  2134 ;;      Locals:         0       0       0
  2135 ;;      Temps:          2       0       0
  2136 ;;      Totals:         2       0       0
  2137 ;;Total ram usage:        2 bytes
  2138 ;; Hardware stack levels used:    1
  2139 ;; This function calls:
  2140 ;;		Nothing
  2141 ;; This function is called by:
  2142 ;;		Interrupt level 1
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           
  2147                           ;psect for function _Isr_Timer
  2148  02CC                     _Isr_Timer:	
  2149                           
  2150                           ;main.c: 105: if(TMR2IF)
  2151  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  2152  02CD  1C8D               	btfss	13,1	;volatile
  2153  02CE  2ADD               	goto	i1l654
  2154                           
  2155                           ;main.c: 106: {
  2156                           ;main.c: 107: TMR2IF = 0;
  2157  02CF  108D               	bcf	13,1	;volatile
  2158                           
  2159                           ;main.c: 108: if(++intCount >= 160)
  2160  02D0  30A0               	movlw	160
  2161  02D1  0AB6               	incf	_intCount,f
  2162  02D2  0236               	subwf	_intCount,w
  2163  02D3  1C03               	skipc
  2164  02D4  2ADD               	goto	i1l654
  2165  02D5  3064               	movlw	100
  2166                           
  2167                           ;main.c: 109: {
  2168                           ;main.c: 110: intCount = 0;
  2169  02D6  01B6               	clrf	_intCount
  2170                           
  2171                           ;main.c: 111: IntFlag = 1;
  2172  02D7  01B4               	clrf	_IntFlag
  2173  02D8  0AB4               	incf	_IntFlag,f
  2174                           
  2175                           ;main.c: 112: if(++count1s >= 100)
  2176  02D9  0AB5               	incf	_count1s,f
  2177  02DA  0235               	subwf	_count1s,w
  2178  02DB  1803               	btfsc	3,0
  2179                           
  2180                           ;main.c: 113: {
  2181                           ;main.c: 114: count1s = 0;
  2182  02DC  01B5               	clrf	_count1s
  2183  02DD                     i1l654:	
  2184  02DD  0871               	movf	??_Isr_Timer+1,w
  2185  02DE  008A               	movwf	10
  2186  02DF  0E70               	swapf	??_Isr_Timer^(0+-128),w
  2187  02E0  0083               	movwf	3
  2188  02E1  0EFE               	swapf	126,f
  2189  02E2  0E7E               	swapf	126,w
  2190  02E3  0009               	retfie
  2191  02E4                     __end_of_Isr_Timer:	
  2192  007E                     btemp	set	126	;btemp
  2193  007E                     wtemp0	set	126
  2194                           
  2195                           	psect	intentry
  2196  0004                     __pintentry:	
  2197                           ;incstack = 0
  2198                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  2199                           
  2200  0004                     interrupt_function:	
  2201  007E                     saved_w	set	btemp
  2202  0004  00FE               	movwf	btemp
  2203  0005  0E03               	swapf	3,w
  2204  0006  00F0               	movwf	??_Isr_Timer
  2205  0007  080A               	movf	10,w
  2206  0008  00F1               	movwf	??_Isr_Timer+1
  2207  0009  2ACC               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         29
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      12
    BANK0            80     15      40
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _keyCtr->_keyRead
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkBatAD
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     680
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                            _chrgCtr
                             _keyCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               2     2      0      45
                                              3 COMMON     2     2      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0     635
                                             13 BANK0      2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     635
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _chrgCtr
   _keyCtr
     _keyRead
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      F      28       4       50.0%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      34       7        0.0%
DATA                 0      0      34       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 28 09:33:48 2025

                     PL2 00E0                       PL4 00EF                       PL6 00F8  
                     fsr 0004                      l700 01BA                      l709 01D7  
                    l662 0279                      l659 0269                      l765 0081  
                    l759 0046                      l769 00C5                      _GIE 005F  
                    _RB4 0034                      _PR2 0011                      u805 0071  
                    u815 007B                      u855 00BB                      u875 00D2  
    __size_of_ADC_Sample 00CA                      indf 0000          __end_of_AD_Init 0313  
                   l2020 0183                     l2004 0151                     l2022 0188  
                   l2008 015A                     l2026 018A                     l2064 028E  
                   l1602 02F0                     l1640 0028                     l1720 0205  
                   l1714 01FC                     l1716 01FE                     l1812 02C1  
                   l1654 0031                     l1638 0026                     l1718 0202  
                   l1726 020C                     l1822 019F                     l1672 006B  
                   l1664 0051                     l1648 0030                     l1738 0222  
                   l1834 01B7                     l1588 030C                     l1676 0075  
                   l1836 01B2                     l1678 007D                     l1862 01DD  
                   l1854 01D1                     l1688 00C9                     l1864 01E0  
                   l1848 01C3                     l1988 0123                     _CHS4 04B6  
                   _IOCA 0089                     _IOCB 0009                     u1435 0142  
                   u1607 0190                     u1617 0023                     _PIE1 000E  
                   u1597 0157                     _PEIE 005E                     _RAIE 0073  
                   _RAIF 006B                     _RBIE 005B                     _RBIF 0058  
                   _PIR1 000D                     _WPDA 0087                     _WPUA 0088  
                   _WPUB 0008                     _main 0264                     btemp 007E  
                   start 000A            ??_Init_System 0072                    ?_main 0070  
                  _T2CON 0013                    i1l654 02DD            _countHalfFull 0033  
                  _PORTA 0086                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0005                    _PWMTH 0018                    _PWMTL 0017  
        __end_of_chrgCtr 0225                    _cDuty 0079          __end_of_keyRead 02F6  
                  pclath 000A          __end_of_pwmInit 0304          __end_of_pwmStop 0317  
                  status 0003                    wtemp0 007E          __end_of_workCtr 01E4  
        __initialization 000B             __end_of_main 0290                   ??_main 0077  
              ??_AD_Init 0072      __end_of_Init_System 02B2                   _ADCON0 0095  
                 _ADCON1 0096                   _ADRESH 0099                   _ADRESL 0098  
                 _ANSEL0 0093                   _GODONE 04A9                   _LDO_EN 04B2  
                 _INTCON 000B                   _OSCCON 0014                   _TMR2IE 0071  
                 _TMR2IF 0069                   _PWMD3L 009C             ??_ADC_Sample 0073  
           keyCtr@kclick 0074       __size_of_Isr_Timer 0018               _Sleep_Mode 0225  
                 _count2 002C                   _keyCtr 02B2                ??_chrgCtr 0072  
                 _pwStep 0030                   _result 002A                ??_keyRead 0072  
     __end_of_ADC_Sample 00E0                   saved_w 007E                ??_pwmInit 0072  
              ??_pwmStop 0072                ??_workCtr 0072               _batADValue 0026  
__end_of__initialization 0014           __pcstackCOMMON 0070              _Init_System 0290  
             __end_ofPL2 00EF               __end_ofPL4 00F8               __end_ofPL6 00FD  
      __end_of_Isr_Timer 02E4               _checkBatAD 00FD               __pbssBANK0 0020  
            ?_Sleep_Mode 0070               __pmaintext 0264               __pintentry 0004  
                ?_keyCtr 0070                  _AD_Init 030C                  _PWM23DT 009D  
                _PWMD23H 009E                  _PWMCON0 0015                  _PWMCON1 0016  
                _PWMCON2 001D                  _IntFlag 0034          ADC_Sample@adldo 0072  
        ADC_Sample@admax 0041          ADC_Sample@admin 003F          ADC_Sample@adsum 003B  
        __size_of_keyCtr 001A                  _chrgCtr 01E4               _lowBatFlag 002E  
                __ptext1 0194                  __ptext2 0313                  __ptext3 02F6  
                __ptext4 02B2                  __ptext5 02E4                  __ptext6 01E4  
                __ptext7 00FD                  __ptext8 0016                  __ptext9 0225  
                _count1s 0035                  _count8s 0022                  _maxDuty 0031  
                _keyRead 02E4      __size_of_Sleep_Mode 003F                  _pwmInit 02F6  
            ?_checkBatAD 0070                  _pwmStop 0313                  clrloop0 0305  
                _workCtr 0194     end_of_initialization 0014      __size_of_checkBatAD 0097  
           ?_Init_System 0070           __end_of_keyCtr 02CC      start_initialization 000B  
              _Isr_Timer 02CC             ??_Sleep_Mode 0072        ADC_Sample@ad_temp 0043  
               ??_keyCtr 0073                 ?_AD_Init 0070              __pbssCOMMON 0077  
              ___latbits 0000            __pcstackBANK0 0038       __end_of_Sleep_Mode 0264  
             ?_Isr_Timer 0070                __pnvBANK0 0047                 ?_chrgCtr 0070  
              _count900s 0020                 ?_keyRead 0070                _firstTime 0047  
         ADC_Sample@adch 0039                 ?_pwmInit 0070             ??_checkBatAD 0045  
               ?_pwmStop 0070                 ?_workCtr 0070              ADC_Sample@i 003A  
            ADC_Sample@j 0038        interrupt_function 0004                clear_ram0 0304  
              _prePwStep 002F                _sleepTime 002D       __end_of_checkBatAD 0194  
   __size_of_Init_System 0022         __size_of_AD_Init 0007         keyRead@keyStatus 0072  
            ??_Isr_Timer 0070               _ADC_Sample 0016         __size_of_chrgCtr 0041  
       __size_of_keyRead 0012                 _adresult 0077                 _chrgFlag 007B  
               __ptext10 0290                 __ptext11 030C                 __ptext12 02CC  
       __size_of_pwmInit 000E         __size_of_pwmStop 0004                 _count50s 0024  
       __size_of_workCtr 0050                 _keyCount 0032                 _intCount 0036  
          __size_of_main 002C                 _test_adc 0037                 _power_ad 0028  
               _workStep 007A                 intlevel1 0000              ?_ADC_Sample 0072  
             _OPTION_REG 0001  
