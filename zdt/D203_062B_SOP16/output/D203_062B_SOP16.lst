

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Aug 07 16:21:55 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	pa_nodes0,global,class=CODE,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 1.45
    31                           ; Generated 16/11/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F887 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	nvBANK0
    66  004B                     __pnvBANK0:	
    67  004B                     _firstTime:	
    68  004B                     	ds	1
    69  001D                     _PWMCON2	set	29
    70  0018                     _PWMTH	set	24
    71  0017                     _PWMTL	set	23
    72  0016                     _PWMCON1	set	22
    73  0015                     _PWMCON0	set	21
    74  0014                     _OSCCON	set	20
    75  0013                     _T2CON	set	19
    76  0011                     _PR2	set	17
    77  000E                     _PIE1	set	14
    78  000D                     _PIR1	set	13
    79  000B                     _INTCON	set	11
    80  0009                     _IOCB	set	9
    81  0008                     _WPUB	set	8
    82  0006                     _PORTB	set	6
    83  0005                     _TRISB	set	5
    84  0001                     _OPTION_REG	set	1
    85  0071                     _TMR2IE	set	113
    86  0073                     _RAIE	set	115
    87  0069                     _TMR2IF	set	105
    88  006B                     _RAIF	set	107
    89  0058                     _RBIF	set	88
    90  005B                     _RBIE	set	91
    91  005E                     _PEIE	set	94
    92  005F                     _GIE	set	95
    93  0034                     _RB4	set	52
    94  009E                     _PWMD23H	set	158
    95  009D                     _PWM23DT	set	157
    96  009C                     _PWMD3L	set	156
    97  0099                     _ADRESH	set	153
    98  0098                     _ADRESL	set	152
    99  0096                     _ADCON1	set	150
   100  0095                     _ADCON0	set	149
   101  0093                     _ANSEL0	set	147
   102  0089                     _IOCA	set	137
   103  0088                     _WPUA	set	136
   104  0087                     _WPDA	set	135
   105  0086                     _PORTA	set	134
   106  0085                     _TRISA	set	133
   107  04B2                     _LDO_EN	set	1202
   108  04B6                     _CHS4	set	1206
   109  04A9                     _GODONE	set	1193
   110                           
   111                           	psect	cinit
   112  000B                     start_initialization:	
   113                           ; #config settings
   114                           
   115  000B                     __initialization:	
   116                           
   117                           ; Clear objects allocated to COMMON
   118  000B  3077               	movlw	low __pbssCOMMON
   119  000C  0084               	movwf	4
   120  000D  307C               	movlw	low (__pbssCOMMON+5)
   121  000E  2365               	fcall	clear_ram0
   122  000F  3020               	movlw	low __pbssBANK0
   123                           
   124                           ; Clear objects allocated to BANK0
   125  0010  1383               	bcf	3,7	;select IRP bank0
   126  0011  0084               	movwf	4
   127  0012  303C               	movlw	low (__pbssBANK0+28)
   128  0013  2365               	fcall	clear_ram0
   129  0014                     end_of_initialization:	
   130                           ;End of C runtime variable initialization code
   131                           
   132  0014                     __end_of__initialization:	
   133  0014  0183               	clrf	3
   134  0015  2A91               	ljmp	_main	;jump to C main() function
   135                           
   136                           	psect	bssCOMMON
   137  0077                     __pbssCOMMON:	
   138  0077                     _adresult:	
   139  0077                     	ds	2
   140  0079                     _cDuty:	
   141  0079                     	ds	1
   142  007A                     _workStep:	
   143  007A                     	ds	1
   144  007B                     _test_adc:	
   145  007B                     	ds	1
   146                           
   147                           	psect	bssBANK0
   148  0020                     __pbssBANK0:	
   149  0020                     _out_ad:	
   150  0020                     	ds	2
   151  0022                     _count900s:	
   152  0022                     	ds	2
   153  0024                     _count8s:	
   154  0024                     	ds	2
   155  0026                     _count50s:	
   156  0026                     	ds	2
   157  0028                     _batADValue:	
   158  0028                     	ds	2
   159  002A                     _power_ad:	
   160  002A                     	ds	2
   161  002C                     _result:	
   162  002C                     	ds	2
   163  002E                     _lowBatHintTime:	
   164  002E                     	ds	1
   165  002F                     _overTime:	
   166  002F                     	ds	1
   167  0030                     _count2:	
   168  0030                     	ds	1
   169  0031                     _sleepTime:	
   170  0031                     	ds	1
   171  0032                     _lowBatFlag:	
   172  0032                     	ds	1
   173  0033                     _prePwStep:	
   174  0033                     	ds	1
   175  0034                     _pwStep:	
   176  0034                     	ds	1
   177  0035                     _maxDuty:	
   178  0035                     	ds	1
   179  0036                     _keyCount:	
   180  0036                     	ds	1
   181  0037                     _countHalfFull:	
   182  0037                     	ds	1
   183  0038                     _chrgFlag:	
   184  0038                     	ds	1
   185  0039                     _IntFlag:	
   186  0039                     	ds	1
   187  003A                     _count1s:	
   188  003A                     	ds	1
   189  003B                     _intCount:	
   190  003B                     	ds	1
   191                           
   192                           	psect	clrtext
   193  0365                     clear_ram0:	
   194                           ;	Called with FSR containing the base address, and
   195                           ;	W with the last address+1
   196                           
   197  0365  0064               	clrwdt	;clear the watchdog before getting into this loop
   198  0366                     clrloop0:	
   199  0366  0180               	clrf	0	;clear RAM location pointed to by FSR
   200  0367  0A84               	incf	4,f	;increment pointer
   201  0368  0604               	xorwf	4,w	;XOR with final address
   202  0369  1903               	btfsc	3,2	;have we reached the end yet?
   203  036A  3400               	retlw	0	;all done for this memory range, return
   204  036B  0604               	xorwf	4,w	;XOR again to restore value
   205  036C  2B66               	goto	clrloop0	;do the next byte
   206                           
   207                           	psect	cstackCOMMON
   208  0070                     __pcstackCOMMON:	
   209  0070                     ?_Init_System:	
   210  0070                     ?_AD_Init:	
   211                           ; 1 bytes @ 0x0
   212                           
   213  0070                     ?_chrgCtr:	
   214                           ; 1 bytes @ 0x0
   215                           
   216  0070                     ?_checkBatAD:	
   217                           ; 1 bytes @ 0x0
   218                           
   219  0070                     ?_keyCtr:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ?_workCtr:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     ?_checkOutAD:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ?_Sleep_Mode:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_pwmInit:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ?_pwmStop:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ?_Isr_Timer:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ??_Isr_Timer:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_main:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     ?_keyRead:	
   247                           ; 1 bytes @ 0x0
   248                           
   249                           
   250                           ; 1 bytes @ 0x0
   251  0070                     	ds	2
   252  0072                     ??_Init_System:	
   253  0072                     ??_AD_Init:	
   254                           ; 1 bytes @ 0x2
   255                           
   256  0072                     ??_workCtr:	
   257                           ; 1 bytes @ 0x2
   258                           
   259  0072                     ??_Sleep_Mode:	
   260                           ; 1 bytes @ 0x2
   261                           
   262  0072                     ??_pwmInit:	
   263                           ; 1 bytes @ 0x2
   264                           
   265  0072                     ??_pwmStop:	
   266                           ; 1 bytes @ 0x2
   267                           
   268  0072                     ?_ADC_Sample:	
   269                           ; 1 bytes @ 0x2
   270                           
   271  0072                     ??_keyRead:	
   272                           ; 1 bytes @ 0x2
   273                           
   274  0072                     ?___lbmod:	
   275                           ; 1 bytes @ 0x2
   276                           
   277  0072                     keyRead@keyStatus:	
   278                           ; 1 bytes @ 0x2
   279                           
   280  0072                     ADC_Sample@adldo:	
   281                           ; 1 bytes @ 0x2
   282                           
   283  0072                     ___lbmod@divisor:	
   284                           ; 1 bytes @ 0x2
   285                           
   286                           
   287                           ; 1 bytes @ 0x2
   288  0072                     	ds	1
   289  0073                     ??_keyCtr:	
   290  0073                     ??_ADC_Sample:	
   291                           ; 1 bytes @ 0x3
   292                           
   293  0073                     ??___lbmod:	
   294                           ; 1 bytes @ 0x3
   295                           
   296  0073                     keyCtr@kclick:	
   297                           ; 1 bytes @ 0x3
   298                           
   299                           
   300                           ; 1 bytes @ 0x3
   301  0073                     	ds	1
   302  0074                     ___lbmod@dividend:	
   303                           
   304                           ; 1 bytes @ 0x4
   305  0074                     	ds	1
   306  0075                     ___lbmod@counter:	
   307                           
   308                           ; 1 bytes @ 0x5
   309  0075                     	ds	1
   310  0076                     ___lbmod@rem:	
   311                           
   312                           ; 1 bytes @ 0x6
   313  0076                     	ds	1
   314  0077                     ??_main:	
   315                           
   316                           	psect	cstackBANK0
   317  003C                     __pcstackBANK0:	
   318                           ; 1 bytes @ 0x7
   319                           
   320  003C                     ??_chrgCtr:	
   321  003C                     ADC_Sample@j:	
   322                           ; 1 bytes @ 0x0
   323                           
   324                           
   325                           ; 1 bytes @ 0x0
   326  003C                     	ds	1
   327  003D                     ADC_Sample@adch:	
   328                           
   329                           ; 1 bytes @ 0x1
   330  003D                     	ds	1
   331  003E                     ADC_Sample@i:	
   332                           
   333                           ; 1 bytes @ 0x2
   334  003E                     	ds	1
   335  003F                     ADC_Sample@adsum:	
   336                           
   337                           ; 4 bytes @ 0x3
   338  003F                     	ds	4
   339  0043                     ADC_Sample@admin:	
   340                           
   341                           ; 2 bytes @ 0x7
   342  0043                     	ds	2
   343  0045                     ADC_Sample@admax:	
   344                           
   345                           ; 2 bytes @ 0x9
   346  0045                     	ds	2
   347  0047                     ADC_Sample@ad_temp:	
   348                           
   349                           ; 2 bytes @ 0xB
   350  0047                     	ds	2
   351  0049                     ??_checkBatAD:	
   352  0049                     ??_checkOutAD:	
   353                           ; 1 bytes @ 0xD
   354                           
   355                           
   356                           ; 1 bytes @ 0xD
   357  0049                     	ds	2
   358                           
   359                           	psect	maintext
   360  0291                     __pmaintext:	
   361 ;;
   362 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   363 ;;
   364 ;; *************** function _main *****************
   365 ;; Defined at:
   366 ;;		line 128 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
   367 ;; Parameters:    Size  Location     Type
   368 ;;		None
   369 ;; Auto vars:     Size  Location     Type
   370 ;;		None
   371 ;; Return value:  Size  Location     Type
   372 ;;                  1    wreg      void 
   373 ;; Registers used:
   374 ;;		wreg, status,2, status,0, pclath, cstack
   375 ;; Tracked objects:
   376 ;;		On entry : B00/0
   377 ;;		On exit  : 100/0
   378 ;;		Unchanged: 0/0
   379 ;; Data sizes:     COMMON   BANK0   BANK1
   380 ;;      Params:         0       0       0
   381 ;;      Locals:         0       0       0
   382 ;;      Temps:          0       0       0
   383 ;;      Totals:         0       0       0
   384 ;;Total ram usage:        0 bytes
   385 ;; Hardware stack levels required when called:    3
   386 ;; This function calls:
   387 ;;		_AD_Init
   388 ;;		_Init_System
   389 ;;		_Sleep_Mode
   390 ;;		_checkBatAD
   391 ;;		_checkOutAD
   392 ;;		_chrgCtr
   393 ;;		_keyCtr
   394 ;;		_workCtr
   395 ;; This function is called by:
   396 ;;		Startup code after reset
   397 ;; This function uses a non-reentrant model
   398 ;;
   399                           
   400                           
   401                           ;psect for function _main
   402  0291                     _main:	
   403                           
   404                           ;main.c: 130: Init_System();
   405                           
   406                           ;incstack = 0
   407                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   408  0291  22BF               	fcall	_Init_System
   409                           
   410                           ;main.c: 131: AD_Init();
   411  0292  236D               	fcall	_AD_Init
   412                           
   413                           ;main.c: 132: firstTime = 100;
   414  0293  3064               	movlw	100
   415  0294  1283               	bcf	3,5	;RP0=0, select bank0
   416  0295  00CB               	movwf	_firstTime
   417  0296                     l665:	
   418                           ;main.c: 133: while (1)
   419                           
   420  0296  0064               	clrwdt	;# 
   421                           
   422                           ;main.c: 136: if(!IntFlag)
   423  0297  1283               	bcf	3,5	;RP0=0, select bank0
   424  0298  0839               	movf	_IntFlag,w
   425  0299  1903               	btfsc	3,2
   426  029A  2A96               	goto	l665
   427                           
   428                           ;main.c: 138: IntFlag = 0;
   429  029B  01B9               	clrf	_IntFlag
   430                           
   431                           ;main.c: 139: chrgCtr();
   432  029C  21FD               	fcall	_chrgCtr
   433                           
   434                           ;main.c: 140: checkBatAD();
   435  029D  20FD               	fcall	_checkBatAD
   436                           
   437                           ;main.c: 141: if(chrgFlag == 0)
   438  029E  1283               	bcf	3,5	;RP0=0, select bank0
   439  029F  0838               	movf	_chrgFlag,w
   440  02A0  1D03               	btfss	3,2
   441  02A1  2AA3               	goto	l668
   442                           
   443                           ;main.c: 142: {
   444                           ;main.c: 143: keyCtr();
   445  02A2  232E               	fcall	_keyCtr
   446  02A3                     l668:	
   447                           
   448                           ;main.c: 144: }
   449                           ;main.c: 145: workCtr();
   450  02A3  2199               	fcall	_workCtr
   451                           
   452                           ;main.c: 146: checkOutAD();
   453  02A4  22FE               	fcall	_checkOutAD
   454                           
   455                           ;main.c: 147: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && lo
      +                          wBatHintTime == 0)
   456  02A5  1283               	bcf	3,5	;RP0=0, select bank0
   457  02A6  0838               	movf	_chrgFlag,w
   458  02A7  1D03               	btfss	3,2
   459  02A8  2ABD               	goto	l2254
   460  02A9  087A               	movf	_workStep,w
   461  02AA  1D03               	btfss	3,2
   462  02AB  2ABD               	goto	l2254
   463  02AC  0836               	movf	_keyCount,w
   464  02AD  1D03               	btfss	3,2
   465  02AE  2ABD               	goto	l2254
   466  02AF  084B               	movf	_firstTime,w
   467  02B0  1D03               	btfss	3,2
   468  02B1  2ABD               	goto	l2254
   469  02B2  082E               	movf	_lowBatHintTime,w
   470  02B3  1D03               	btfss	3,2
   471  02B4  2ABD               	goto	l2254
   472                           
   473                           ;main.c: 148: {
   474                           ;main.c: 149: if(++sleepTime >= 200)
   475  02B5  30C8               	movlw	200
   476  02B6  0AB1               	incf	_sleepTime,f
   477  02B7  0231               	subwf	_sleepTime,w
   478  02B8  1C03               	skipc
   479  02B9  2A96               	goto	l665
   480                           
   481                           ;main.c: 150: {
   482                           ;main.c: 151: sleepTime = 0;
   483  02BA  01B1               	clrf	_sleepTime
   484                           
   485                           ;main.c: 152: Sleep_Mode();
   486  02BB  2251               	fcall	_Sleep_Mode
   487  02BC  2A96               	goto	l665
   488  02BD                     l2254:	
   489                           
   490                           ;main.c: 155: else
   491                           ;main.c: 156: {
   492                           ;main.c: 157: sleepTime = 0;
   493  02BD  01B1               	clrf	_sleepTime
   494  02BE  2A96               	goto	l665
   495  02BF                     __end_of_main:	
   496                           
   497                           	psect	text1
   498  0199                     __ptext1:	
   499 ;; *************** function _workCtr *****************
   500 ;; Defined at:
   501 ;;		line 282 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
   502 ;; Parameters:    Size  Location     Type
   503 ;;		None
   504 ;; Auto vars:     Size  Location     Type
   505 ;;		None
   506 ;; Return value:  Size  Location     Type
   507 ;;                  1    wreg      void 
   508 ;; Registers used:
   509 ;;		wreg, status,2, status,0, pclath, cstack
   510 ;; Tracked objects:
   511 ;;		On entry : 100/0
   512 ;;		On exit  : 100/0
   513 ;;		Unchanged: 0/0
   514 ;; Data sizes:     COMMON   BANK0   BANK1
   515 ;;      Params:         0       0       0
   516 ;;      Locals:         0       0       0
   517 ;;      Temps:          0       0       0
   518 ;;      Totals:         0       0       0
   519 ;;Total ram usage:        0 bytes
   520 ;; Hardware stack levels used:    1
   521 ;; Hardware stack levels required when called:    2
   522 ;; This function calls:
   523 ;;		_pwmInit
   524 ;;		_pwmStop
   525 ;; This function is called by:
   526 ;;		_main
   527 ;; This function uses a non-reentrant model
   528 ;;
   529                           
   530                           
   531                           ;psect for function _workCtr
   532  0199                     _workCtr:	
   533                           
   534                           ;main.c: 284: if(firstTime > 0)
   535                           
   536                           ;incstack = 0
   537                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   538  0199  084B               	movf	_firstTime,w
   539  019A  1903               	btfsc	3,2
   540  019B  29A3               	goto	l1932
   541                           
   542                           ;main.c: 285: {
   543                           ;main.c: 286: firstTime--;
   544  019C  03CB               	decf	_firstTime,f
   545                           
   546                           ;main.c: 287: if(prePwStep < pwStep)
   547  019D  0834               	movf	_pwStep,w
   548  019E  0233               	subwf	_prePwStep,w
   549  019F  1803               	skipnc
   550  01A0  29A3               	goto	l1932
   551                           
   552                           ;main.c: 288: {
   553                           ;main.c: 289: prePwStep = pwStep;
   554  01A1  0834               	movf	_pwStep,w
   555  01A2  00B3               	movwf	_prePwStep
   556  01A3                     l1932:	
   557                           
   558                           ;main.c: 290: }
   559                           ;main.c: 291: }
   560                           ;main.c: 292: if(++count2 > 2)
   561  01A3  3003               	movlw	3
   562  01A4  0AB0               	incf	_count2,f
   563  01A5  0230               	subwf	_count2,w
   564  01A6  1C03               	skipc
   565  01A7  29BE               	goto	l712
   566                           
   567                           ;main.c: 293: {
   568                           ;main.c: 294: count2 = 0;
   569  01A8  01B0               	clrf	_count2
   570                           
   571                           ;main.c: 295: if(workStep > 0 && maxDuty >= 45)
   572  01A9  087A               	movf	_workStep,w
   573  01AA  1903               	btfsc	3,2
   574  01AB  29BE               	goto	l712
   575  01AC  302D               	movlw	45
   576  01AD  0235               	subwf	_maxDuty,w
   577  01AE  1C03               	skipc
   578  01AF  29BE               	goto	l712
   579                           
   580                           ;main.c: 296: {
   581                           ;main.c: 297: if(cDuty > maxDuty)
   582  01B0  0879               	movf	_cDuty,w
   583  01B1  0235               	subwf	_maxDuty,w
   584  01B2  1803               	skipnc
   585  01B3  29B6               	goto	l1946
   586                           
   587                           ;main.c: 298: {
   588                           ;main.c: 299: cDuty--;
   589  01B4  03F9               	decf	_cDuty,f
   590                           
   591                           ;main.c: 301: }
   592  01B5  29BB               	goto	l1944
   593  01B6                     l1946:	
   594                           
   595                           ;main.c: 302: else if(cDuty < maxDuty)
   596  01B6  0835               	movf	_maxDuty,w
   597  01B7  0279               	subwf	_cDuty,w
   598  01B8  1803               	skipnc
   599  01B9  29BE               	goto	l712
   600                           
   601                           ;main.c: 303: {
   602                           ;main.c: 304: cDuty++;
   603  01BA  0AF9               	incf	_cDuty,f
   604  01BB                     l1944:	
   605                           
   606                           ;main.c: 300: PWMD3L = cDuty;
   607  01BB  0879               	movf	_cDuty,w
   608  01BC  1683               	bsf	3,5	;RP0=1, select bank1
   609  01BD  009C               	movwf	28	;volatile
   610  01BE                     l712:	
   611                           
   612                           ;main.c: 306: }
   613                           ;main.c: 307: }
   614                           ;main.c: 309: }
   615                           ;main.c: 310: if(workStep > 0)
   616  01BE  087A               	movf	_workStep,w
   617  01BF  1903               	btfsc	3,2
   618  01C0  29E8               	goto	l717
   619                           
   620                           ;main.c: 311: {
   621                           ;main.c: 313: PORTB |= 0x03;
   622  01C1  3003               	movlw	3
   623  01C2  1283               	bcf	3,5	;RP0=0, select bank0
   624  01C3  0486               	iorwf	6,f	;volatile
   625                           
   626                           ;main.c: 314: PORTA &= 0xF7;
   627  01C4  1683               	bsf	3,5	;RP0=1, select bank1
   628  01C5  1186               	bcf	6,3	;volatile
   629                           
   630                           ;main.c: 315: if(out_ad > 450)
   631  01C6  3001               	movlw	1
   632  01C7  1283               	bcf	3,5	;RP0=0, select bank0
   633  01C8  0221               	subwf	_out_ad+1,w
   634  01C9  30C3               	movlw	195
   635  01CA  1903               	skipnz
   636  01CB  0220               	subwf	_out_ad,w
   637  01CC  1C03               	skipc
   638  01CD  29D6               	goto	l1962
   639                           
   640                           ;main.c: 316: {
   641                           ;main.c: 317: if(++overTime > 10)
   642  01CE  300B               	movlw	11
   643  01CF  0AAF               	incf	_overTime,f
   644  01D0  022F               	subwf	_overTime,w
   645  01D1  1C03               	skipc
   646  01D2  29D7               	goto	l1964
   647                           
   648                           ;main.c: 318: {
   649                           ;main.c: 319: overTime = 0;
   650  01D3  01AF               	clrf	_overTime
   651                           
   652                           ;main.c: 320: workStep = 0;
   653  01D4  01FA               	clrf	_workStep
   654  01D5  29D7               	goto	l1964
   655  01D6                     l1962:	
   656                           
   657                           ;main.c: 323: else
   658                           ;main.c: 324: {
   659                           ;main.c: 325: overTime = 0;
   660  01D6  01AF               	clrf	_overTime
   661  01D7                     l1964:	
   662                           
   663                           ;main.c: 326: }
   664                           ;main.c: 327: if((PWMCON0 & 0x08) == 0)
   665  01D7  1995               	btfsc	21,3	;volatile
   666  01D8  29DA               	goto	l1968
   667                           
   668                           ;main.c: 328: {
   669                           ;main.c: 329: pwmInit();
   670  01D9  2357               	fcall	_pwmInit
   671  01DA                     l1968:	
   672                           
   673                           ;main.c: 330: }
   674                           ;main.c: 331: if(count1s == 0 && ++count900s >= 900)
   675  01DA  083A               	movf	_count1s,w
   676  01DB  1D03               	btfss	3,2
   677  01DC  0008               	return
   678  01DD  0AA2               	incf	_count900s,f
   679  01DE  1903               	skipnz
   680  01DF  0AA3               	incf	_count900s+1,f
   681  01E0  3003               	movlw	3
   682  01E1  0223               	subwf	_count900s+1,w
   683  01E2  3084               	movlw	132
   684  01E3  1903               	skipnz
   685  01E4  0222               	subwf	_count900s,w
   686  01E5  1803               	btfsc	3,0
   687                           
   688                           ;main.c: 332: {
   689                           ;main.c: 333: workStep = 0;
   690  01E6  01FA               	clrf	_workStep
   691  01E7  0008               	return
   692  01E8                     l717:	
   693                           
   694                           ;main.c: 336: else
   695                           ;main.c: 337: {
   696                           ;main.c: 338: PORTA |= 0x08;
   697  01E8  1683               	bsf	3,5	;RP0=1, select bank1
   698  01E9  1586               	bsf	6,3	;volatile
   699                           
   700                           ;main.c: 339: if(chrgFlag == 0)
   701  01EA  1283               	bcf	3,5	;RP0=0, select bank0
   702  01EB  0838               	movf	_chrgFlag,w
   703  01EC  1D03               	btfss	3,2
   704  01ED  29F0               	goto	l724
   705                           
   706                           ;main.c: 340: {
   707                           ;main.c: 341: PORTB |= 0x03;
   708  01EE  3003               	movlw	3
   709  01EF  0486               	iorwf	6,f	;volatile
   710  01F0                     l724:	
   711                           
   712                           ;main.c: 342: }
   713                           ;main.c: 343: if(cDuty > 0)
   714  01F0  0879               	movf	_cDuty,w
   715  01F1  1903               	btfsc	3,2
   716  01F2  29F9               	goto	l1984
   717                           
   718                           ;main.c: 344: {
   719                           ;main.c: 345: if(--cDuty == 0)
   720  01F3  0BF9               	decfsz	_cDuty,f
   721  01F4  29F6               	goto	l1982
   722                           
   723                           ;main.c: 346: {
   724                           ;main.c: 347: pwmStop();
   725  01F5  2374               	fcall	_pwmStop
   726  01F6                     l1982:	
   727                           
   728                           ;main.c: 348: }
   729                           ;main.c: 349: PWMD3L = cDuty;
   730  01F6  0879               	movf	_cDuty,w
   731  01F7  1683               	bsf	3,5	;RP0=1, select bank1
   732  01F8  009C               	movwf	28	;volatile
   733  01F9                     l1984:	
   734                           
   735                           ;main.c: 350: }
   736                           ;main.c: 351: count900s = 0;
   737  01F9  1283               	bcf	3,5	;RP0=0, select bank0
   738  01FA  01A2               	clrf	_count900s
   739  01FB  01A3               	clrf	_count900s+1
   740  01FC  0008               	return
   741  01FD                     __end_of_workCtr:	
   742                           
   743                           	psect	text2
   744  0374                     __ptext2:	
   745 ;; *************** function _pwmStop *****************
   746 ;; Defined at:
   747 ;;		line 569 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;		None
   750 ;; Auto vars:     Size  Location     Type
   751 ;;		None
   752 ;; Return value:  Size  Location     Type
   753 ;;                  1    wreg      void 
   754 ;; Registers used:
   755 ;;		None
   756 ;; Tracked objects:
   757 ;;		On entry : 100/0
   758 ;;		On exit  : 100/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMMON   BANK0   BANK1
   761 ;;      Params:         0       0       0
   762 ;;      Locals:         0       0       0
   763 ;;      Temps:          0       0       0
   764 ;;      Totals:         0       0       0
   765 ;;Total ram usage:        0 bytes
   766 ;; Hardware stack levels used:    1
   767 ;; Hardware stack levels required when called:    1
   768 ;; This function calls:
   769 ;;		Nothing
   770 ;; This function is called by:
   771 ;;		_workCtr
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775                           
   776                           ;psect for function _pwmStop
   777  0374                     _pwmStop:	
   778                           
   779                           ;main.c: 571: PWMCON0 &= 0XF7;
   780                           
   781                           ;incstack = 0
   782                           ; Regs used in _pwmStop: []
   783  0374  1195               	bcf	21,3	;volatile
   784                           
   785                           ;main.c: 572: RB4 = 0;
   786  0375  1206               	bcf	6,4	;volatile
   787  0376  0008               	return
   788  0377                     __end_of_pwmStop:	
   789                           
   790                           	psect	text3
   791  0357                     __ptext3:	
   792 ;; *************** function _pwmInit *****************
   793 ;; Defined at:
   794 ;;		line 554 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;		None
   797 ;; Auto vars:     Size  Location     Type
   798 ;;		None
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      void 
   801 ;; Registers used:
   802 ;;		wreg, status,2
   803 ;; Tracked objects:
   804 ;;		On entry : 100/0
   805 ;;		On exit  : 100/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMMON   BANK0   BANK1
   808 ;;      Params:         0       0       0
   809 ;;      Locals:         0       0       0
   810 ;;      Temps:          0       0       0
   811 ;;      Totals:         0       0       0
   812 ;;Total ram usage:        0 bytes
   813 ;; Hardware stack levels used:    1
   814 ;; Hardware stack levels required when called:    1
   815 ;; This function calls:
   816 ;;		Nothing
   817 ;; This function is called by:
   818 ;;		_workCtr
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           
   823                           ;psect for function _pwmInit
   824  0357                     _pwmInit:	
   825                           
   826                           ;main.c: 556: PWMCON1 = 0B00000000;
   827                           
   828                           ;incstack = 0
   829                           ; Regs used in _pwmInit: [wreg+status,2]
   830  0357  0196               	clrf	22	;volatile
   831                           
   832                           ;main.c: 557: PWMTH = 0X00;
   833  0358  0198               	clrf	24	;volatile
   834                           
   835                           ;main.c: 558: PWMTL = 100;
   836  0359  3064               	movlw	100
   837  035A  0097               	movwf	23	;volatile
   838                           
   839                           ;main.c: 561: PWMD23H = 0;
   840  035B  1683               	bsf	3,5	;RP0=1, select bank1
   841  035C  019E               	clrf	30	;volatile
   842                           
   843                           ;main.c: 562: PWMD3L = 45;
   844  035D  302D               	movlw	45
   845  035E  009C               	movwf	28	;volatile
   846                           
   847                           ;main.c: 563: PWM23DT = 0X00;
   848  035F  019D               	clrf	29	;volatile
   849                           
   850                           ;main.c: 565: PWMCON0 = 0X68;
   851  0360  3068               	movlw	104
   852  0361  1283               	bcf	3,5	;RP0=0, select bank0
   853  0362  0095               	movwf	21	;volatile
   854                           
   855                           ;main.c: 566: PWMCON2 =0X00;
   856  0363  019D               	clrf	29	;volatile
   857  0364  0008               	return
   858  0365                     __end_of_pwmInit:	
   859                           
   860                           	psect	text4
   861  032E                     __ptext4:	
   862 ;; *************** function _keyCtr *****************
   863 ;; Defined at:
   864 ;;		line 258 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
   865 ;; Parameters:    Size  Location     Type
   866 ;;		None
   867 ;; Auto vars:     Size  Location     Type
   868 ;;  kclick          1    3[COMMON] unsigned char 
   869 ;; Return value:  Size  Location     Type
   870 ;;                  1    wreg      void 
   871 ;; Registers used:
   872 ;;		wreg, status,2, status,0, pclath, cstack
   873 ;; Tracked objects:
   874 ;;		On entry : 100/0
   875 ;;		On exit  : 100/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMMON   BANK0   BANK1
   878 ;;      Params:         0       0       0
   879 ;;      Locals:         1       0       0
   880 ;;      Temps:          0       0       0
   881 ;;      Totals:         1       0       0
   882 ;;Total ram usage:        1 bytes
   883 ;; Hardware stack levels used:    1
   884 ;; Hardware stack levels required when called:    2
   885 ;; This function calls:
   886 ;;		_keyRead
   887 ;; This function is called by:
   888 ;;		_main
   889 ;; This function uses a non-reentrant model
   890 ;;
   891                           
   892                           
   893                           ;psect for function _keyCtr
   894  032E                     _keyCtr:	
   895                           
   896                           ;main.c: 260: char kclick = keyRead(0x20 & (~PORTB));
   897                           
   898                           ;incstack = 0
   899                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
   900  032E  0906               	comf	6,w	;volatile
   901  032F  3920               	andlw	32
   902  0330  2345               	fcall	_keyRead
   903  0331  00F3               	movwf	keyCtr@kclick
   904                           
   905                           ;main.c: 261: if(kclick == 1)
   906  0332  0B73               	decfsz	keyCtr@kclick,w
   907  0333  0008               	return
   908                           
   909                           ;main.c: 262: {
   910                           ;main.c: 263: if(lowBatFlag == 1)
   911  0334  0B32               	decfsz	_lowBatFlag,w
   912  0335  2B39               	goto	l1916
   913                           
   914                           ;main.c: 264: {
   915                           ;main.c: 265: lowBatHintTime = 250;
   916  0336  30FA               	movlw	250
   917  0337  00AE               	movwf	_lowBatHintTime
   918                           
   919                           ;main.c: 266: }
   920  0338  0008               	return
   921  0339                     l1916:	
   922                           
   923                           ;main.c: 267: else
   924                           ;main.c: 268: {
   925                           ;main.c: 269: if(++workStep > 1)
   926  0339  3002               	movlw	2
   927  033A  0AFA               	incf	_workStep,f
   928  033B  027A               	subwf	_workStep,w
   929  033C  1803               	btfsc	3,0
   930                           
   931                           ;main.c: 270: {
   932                           ;main.c: 271: workStep = 0;
   933  033D  01FA               	clrf	_workStep
   934                           
   935                           ;main.c: 272: }
   936                           ;main.c: 273: if(workStep == 1)
   937  033E  0B7A               	decfsz	_workStep,w
   938  033F  2B42               	goto	l706
   939                           
   940                           ;main.c: 274: {
   941                           ;main.c: 275: cDuty = 45;
   942  0340  302D               	movlw	45
   943  0341  00F9               	movwf	_cDuty
   944  0342                     l706:	
   945                           
   946                           ;main.c: 276: }
   947                           ;main.c: 277: maxDuty = 99;
   948  0342  3063               	movlw	99
   949  0343  00B5               	movwf	_maxDuty
   950  0344  0008               	return
   951  0345                     __end_of_keyCtr:	
   952                           
   953                           	psect	text5
   954  0345                     __ptext5:	
   955 ;; *************** function _keyRead *****************
   956 ;; Defined at:
   957 ;;		line 236 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;  keyStatus       1    wreg     unsigned char 
   960 ;; Auto vars:     Size  Location     Type
   961 ;;  keyStatus       1    2[COMMON] unsigned char 
   962 ;; Return value:  Size  Location     Type
   963 ;;                  1    wreg      unsigned char 
   964 ;; Registers used:
   965 ;;		wreg, status,2, status,0
   966 ;; Tracked objects:
   967 ;;		On entry : 100/0
   968 ;;		On exit  : 100/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMMON   BANK0   BANK1
   971 ;;      Params:         0       0       0
   972 ;;      Locals:         1       0       0
   973 ;;      Temps:          0       0       0
   974 ;;      Totals:         1       0       0
   975 ;;Total ram usage:        1 bytes
   976 ;; Hardware stack levels used:    1
   977 ;; Hardware stack levels required when called:    1
   978 ;; This function calls:
   979 ;;		Nothing
   980 ;; This function is called by:
   981 ;;		_keyCtr
   982 ;; This function uses a non-reentrant model
   983 ;;
   984                           
   985                           
   986                           ;psect for function _keyRead
   987  0345                     _keyRead:	
   988                           
   989                           ;incstack = 0
   990                           ; Regs used in _keyRead: [wreg+status,2+status,0]
   991                           ;keyRead@keyStatus stored from wreg
   992  0345  00F2               	movwf	keyRead@keyStatus
   993                           
   994                           ;main.c: 238: if(keyStatus)
   995  0346  0872               	movf	keyRead@keyStatus,w
   996  0347  1903               	btfsc	3,2
   997  0348  2B51               	goto	l1676
   998  0349  3064               	movlw	100
   999                           
  1000                           ;main.c: 239: {
  1001                           ;main.c: 240: keyCount++;
  1002  034A  0AB6               	incf	_keyCount,f
  1003                           
  1004                           ;main.c: 241: if(keyCount >= 100)
  1005  034B  0236               	subwf	_keyCount,w
  1006  034C  1C03               	skipc
  1007  034D  3400               	retlw	0
  1008                           
  1009                           ;main.c: 242: {
  1010                           ;main.c: 243: keyCount = 100;
  1011  034E  3064               	movlw	100
  1012  034F  00B6               	movwf	_keyCount
  1013  0350  3400               	retlw	0
  1014  0351                     l1676:	
  1015                           
  1016                           ;main.c: 246: else
  1017                           ;main.c: 247: {
  1018                           ;main.c: 248: if(keyCount >= 4)
  1019  0351  3004               	movlw	4
  1020  0352  0236               	subwf	_keyCount,w
  1021                           
  1022                           ;main.c: 249: {
  1023                           ;main.c: 250: keyCount = 0;
  1024  0353  01B6               	clrf	_keyCount
  1025  0354  1803               	btfsc	3,0
  1026                           
  1027                           ;main.c: 251: return 1;
  1028  0355  3401               	retlw	1
  1029  0356  3400               	retlw	0
  1030  0357                     __end_of_keyRead:	
  1031                           ;main.c: 254: }
  1032                           ;main.c: 255: return 0;
  1033                           
  1034                           ;main.c: 252: }
  1035                           ;main.c: 253: keyCount = 0;
  1036                           
  1037                           
  1038                           	psect	text6
  1039  01FD                     __ptext6:	
  1040 ;; *************** function _chrgCtr *****************
  1041 ;; Defined at:
  1042 ;;		line 163 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
  1043 ;; Parameters:    Size  Location     Type
  1044 ;;		None
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;		None
  1047 ;; Return value:  Size  Location     Type
  1048 ;;                  1    wreg      void 
  1049 ;; Registers used:
  1050 ;;		wreg, status,2, status,0, pclath, cstack
  1051 ;; Tracked objects:
  1052 ;;		On entry : 100/0
  1053 ;;		On exit  : 100/0
  1054 ;;		Unchanged: 0/0
  1055 ;; Data sizes:     COMMON   BANK0   BANK1
  1056 ;;      Params:         0       0       0
  1057 ;;      Locals:         0       0       0
  1058 ;;      Temps:          0       1       0
  1059 ;;      Totals:         0       1       0
  1060 ;;Total ram usage:        1 bytes
  1061 ;; Hardware stack levels used:    1
  1062 ;; Hardware stack levels required when called:    2
  1063 ;; This function calls:
  1064 ;;		___lbmod
  1065 ;; This function is called by:
  1066 ;;		_main
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           
  1071                           ;psect for function _chrgCtr
  1072  01FD                     _chrgCtr:	
  1073                           
  1074                           ;main.c: 165: if(PORTB & 0x04)
  1075                           
  1076                           ;incstack = 0
  1077                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1078  01FD  1D06               	btfss	6,2	;volatile
  1079  01FE  2A27               	goto	l2120
  1080                           
  1081                           ;main.c: 166: {
  1082                           ;main.c: 167: chrgFlag = 1;
  1083  01FF  01B8               	clrf	_chrgFlag
  1084  0200  0AB8               	incf	_chrgFlag,f
  1085                           
  1086                           ;main.c: 168: workStep = 0;
  1087  0201  01FA               	clrf	_workStep
  1088                           
  1089                           ;main.c: 169: lowBatFlag = 0;
  1090  0202  01B2               	clrf	_lowBatFlag
  1091                           
  1092                           ;main.c: 170: if(prePwStep < pwStep)
  1093  0203  0834               	movf	_pwStep,w
  1094  0204  0233               	subwf	_prePwStep,w
  1095  0205  1803               	skipnc
  1096  0206  2A15               	goto	l2108
  1097                           
  1098                           ;main.c: 171: {
  1099                           ;main.c: 172: if(++count50s > 7200)
  1100  0207  0AA6               	incf	_count50s,f
  1101  0208  1903               	skipnz
  1102  0209  0AA7               	incf	_count50s+1,f
  1103  020A  301C               	movlw	28
  1104  020B  0227               	subwf	_count50s+1,w
  1105  020C  3021               	movlw	33
  1106  020D  1903               	skipnz
  1107  020E  0226               	subwf	_count50s,w
  1108  020F  1C03               	skipc
  1109  0210  2A17               	goto	l2110
  1110                           
  1111                           ;main.c: 173: {
  1112                           ;main.c: 174: count50s = 0;
  1113  0211  01A6               	clrf	_count50s
  1114  0212  01A7               	clrf	_count50s+1
  1115                           
  1116                           ;main.c: 175: prePwStep++;
  1117  0213  0AB3               	incf	_prePwStep,f
  1118  0214  2A17               	goto	l2110
  1119  0215                     l2108:	
  1120                           
  1121                           ;main.c: 178: else
  1122                           ;main.c: 179: {
  1123                           ;main.c: 180: count50s = 0;
  1124  0215  01A6               	clrf	_count50s
  1125  0216  01A7               	clrf	_count50s+1
  1126  0217                     l2110:	
  1127                           
  1128                           ;main.c: 181: }
  1129                           ;main.c: 182: if(prePwStep >= 99)
  1130  0217  3063               	movlw	99
  1131  0218  0233               	subwf	_prePwStep,w
  1132  0219  1C03               	skipc
  1133  021A  2A1E               	goto	l2114
  1134                           
  1135                           ;main.c: 183: {
  1136                           ;main.c: 184: PORTB &= 0xFE;
  1137  021B  1006               	bcf	6,0	;volatile
  1138                           
  1139                           ;main.c: 185: PORTB |= 0x02;
  1140  021C  1486               	bsf	6,1	;volatile
  1141                           
  1142                           ;main.c: 186: }
  1143  021D  0008               	return
  1144  021E                     l2114:	
  1145                           
  1146                           ;main.c: 187: else
  1147                           ;main.c: 188: {
  1148                           ;main.c: 189: if(count1s < 50)
  1149  021E  3032               	movlw	50
  1150  021F  023A               	subwf	_count1s,w
  1151  0220  1803               	skipnc
  1152  0221  2A24               	goto	l2118
  1153                           
  1154                           ;main.c: 190: {
  1155                           ;main.c: 191: PORTB &= 0xFD;
  1156  0222  1086               	bcf	6,1	;volatile
  1157                           
  1158                           ;main.c: 192: }
  1159  0223  0008               	return
  1160  0224                     l2118:	
  1161                           
  1162                           ;main.c: 193: else
  1163                           ;main.c: 194: {
  1164                           ;main.c: 195: PORTB |= 0x03;
  1165  0224  3003               	movlw	3
  1166  0225  0486               	iorwf	6,f	;volatile
  1167  0226  0008               	return
  1168  0227                     l2120:	
  1169                           
  1170                           ;main.c: 202: chrgFullFlag = 0;
  1171  0227  01B8               	clrf	_chrgFlag
  1172                           
  1173                           ;main.c: 203: if(prePwStep > 0 && prePwStep > pwStep)
  1174  0228  0833               	movf	_prePwStep,w
  1175  0229  1903               	btfsc	3,2
  1176  022A  2A3D               	goto	l2132
  1177  022B  0833               	movf	_prePwStep,w
  1178  022C  0234               	subwf	_pwStep,w
  1179  022D  1803               	skipnc
  1180  022E  2A3D               	goto	l2132
  1181                           
  1182                           ;main.c: 204: {
  1183                           ;main.c: 205: if(++count50s > 2000)
  1184  022F  0AA6               	incf	_count50s,f
  1185  0230  1903               	skipnz
  1186  0231  0AA7               	incf	_count50s+1,f
  1187  0232  3007               	movlw	7
  1188  0233  0227               	subwf	_count50s+1,w
  1189  0234  30D1               	movlw	209
  1190  0235  1903               	skipnz
  1191  0236  0226               	subwf	_count50s,w
  1192  0237  1C03               	skipc
  1193  0238  2A3F               	goto	l2134
  1194                           
  1195                           ;main.c: 206: {
  1196                           ;main.c: 207: count50s = 0;
  1197  0239  01A6               	clrf	_count50s
  1198  023A  01A7               	clrf	_count50s+1
  1199                           
  1200                           ;main.c: 208: prePwStep--;
  1201  023B  03B3               	decf	_prePwStep,f
  1202  023C  2A3F               	goto	l2134
  1203  023D                     l2132:	
  1204                           
  1205                           ;main.c: 211: else
  1206                           ;main.c: 212: {
  1207                           ;main.c: 213: count50s = 0;
  1208  023D  01A6               	clrf	_count50s
  1209  023E  01A7               	clrf	_count50s+1
  1210  023F                     l2134:	
  1211                           
  1212                           ;main.c: 214: }
  1213                           ;main.c: 215: if(lowBatHintTime > 0)
  1214  023F  082E               	movf	_lowBatHintTime,w
  1215  0240  1903               	btfsc	3,2
  1216  0241  2A24               	goto	l2118
  1217                           
  1218                           ;main.c: 216: {
  1219                           ;main.c: 217: if(lowBatHintTime % 100 > 50)
  1220  0242  3064               	movlw	100
  1221  0243  00F2               	movwf	___lbmod@divisor
  1222  0244  082E               	movf	_lowBatHintTime,w
  1223  0245  22E2               	fcall	___lbmod
  1224  0246  00BC               	movwf	??_chrgCtr
  1225  0247  3033               	movlw	51
  1226  0248  023C               	subwf	??_chrgCtr,w
  1227  0249  1C03               	skipc
  1228  024A  2A4D               	goto	l2140
  1229                           
  1230                           ;main.c: 218: {
  1231                           ;main.c: 219: PORTB &= 0xFD;
  1232  024B  1086               	bcf	6,1	;volatile
  1233                           
  1234                           ;main.c: 220: }
  1235  024C  2A4F               	goto	l2142
  1236  024D                     l2140:	
  1237                           
  1238                           ;main.c: 221: else
  1239                           ;main.c: 222: {
  1240                           ;main.c: 223: PORTB |= 0x03;
  1241  024D  3003               	movlw	3
  1242  024E  0486               	iorwf	6,f	;volatile
  1243  024F                     l2142:	
  1244                           
  1245                           ;main.c: 224: }
  1246                           ;main.c: 225: lowBatHintTime--;
  1247  024F  03AE               	decf	_lowBatHintTime,f
  1248                           
  1249                           ;main.c: 226: }
  1250  0250  0008               	return
  1251  0251                     __end_of_chrgCtr:	
  1252                           
  1253                           	psect	text7
  1254  02E2                     __ptext7:	
  1255 ;; *************** function ___lbmod *****************
  1256 ;; Defined at:
  1257 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;  dividend        1    wreg     unsigned char 
  1260 ;;  divisor         1    2[COMMON] unsigned char 
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;  dividend        1    4[COMMON] unsigned char 
  1263 ;;  rem             1    6[COMMON] unsigned char 
  1264 ;;  counter         1    5[COMMON] unsigned char 
  1265 ;; Return value:  Size  Location     Type
  1266 ;;                  1    wreg      unsigned char 
  1267 ;; Registers used:
  1268 ;;		wreg, status,2, status,0
  1269 ;; Tracked objects:
  1270 ;;		On entry : 100/0
  1271 ;;		On exit  : 100/0
  1272 ;;		Unchanged: 100/0
  1273 ;; Data sizes:     COMMON   BANK0   BANK1
  1274 ;;      Params:         1       0       0
  1275 ;;      Locals:         3       0       0
  1276 ;;      Temps:          1       0       0
  1277 ;;      Totals:         5       0       0
  1278 ;;Total ram usage:        5 bytes
  1279 ;; Hardware stack levels used:    1
  1280 ;; Hardware stack levels required when called:    1
  1281 ;; This function calls:
  1282 ;;		Nothing
  1283 ;; This function is called by:
  1284 ;;		_chrgCtr
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288                           
  1289                           ;psect for function ___lbmod
  1290  02E2                     ___lbmod:	
  1291                           
  1292                           ;incstack = 0
  1293                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1294                           ;___lbmod@dividend stored from wreg
  1295  02E2  00F4               	movwf	___lbmod@dividend
  1296  02E3  3008               	movlw	8
  1297  02E4  00F5               	movwf	___lbmod@counter
  1298  02E5  01F6               	clrf	___lbmod@rem
  1299  02E6                     l1778:	
  1300  02E6  0874               	movf	___lbmod@dividend,w
  1301  02E7  00F3               	movwf	??___lbmod
  1302  02E8  3007               	movlw	7
  1303  02E9  1003               	clrc
  1304  02EA                     L1:	
  1305  02EA  0CF3               	rrf	??___lbmod,f
  1306  02EB  3EFF               	addlw	-1
  1307  02EC  1003               	clrc
  1308  02ED  1D03               	skipz
  1309  02EE  2AEA               	goto	L1
  1310  02EF  0D76               	rlf	___lbmod@rem,w
  1311  02F0  0473               	iorwf	??___lbmod,w
  1312  02F1  00F6               	movwf	___lbmod@rem
  1313  02F2  1003               	clrc
  1314  02F3  0DF4               	rlf	___lbmod@dividend,f
  1315  02F4  0872               	movf	___lbmod@divisor,w
  1316  02F5  0276               	subwf	___lbmod@rem,w
  1317  02F6  1C03               	skipc
  1318  02F7  2AFA               	goto	l1786
  1319  02F8  0872               	movf	___lbmod@divisor,w
  1320  02F9  02F6               	subwf	___lbmod@rem,f
  1321  02FA                     l1786:	
  1322  02FA  0BF5               	decfsz	___lbmod@counter,f
  1323  02FB  2AE6               	goto	l1778
  1324  02FC  0876               	movf	___lbmod@rem,w
  1325  02FD  0008               	return
  1326  02FE                     __end_of___lbmod:	
  1327                           
  1328                           	psect	text8
  1329  02FE                     __ptext8:	
  1330 ;; *************** function _checkOutAD *****************
  1331 ;; Defined at:
  1332 ;;		line 356 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;		None
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;  power_temp      4    0        volatile unsigned long 
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  1    wreg      void 
  1339 ;; Registers used:
  1340 ;;		wreg, status,2, status,0, pclath, cstack
  1341 ;; Tracked objects:
  1342 ;;		On entry : 100/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMMON   BANK0   BANK1
  1346 ;;      Params:         0       0       0
  1347 ;;      Locals:         0       0       0
  1348 ;;      Temps:          0       1       0
  1349 ;;      Totals:         0       1       0
  1350 ;;Total ram usage:        1 bytes
  1351 ;; Hardware stack levels used:    1
  1352 ;; Hardware stack levels required when called:    2
  1353 ;; This function calls:
  1354 ;;		_ADC_Sample
  1355 ;; This function is called by:
  1356 ;;		_main
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360                           
  1361                           ;psect for function _checkOutAD
  1362  02FE                     _checkOutAD:	
  1363                           
  1364                           ;main.c: 358: test_adc = ADC_Sample(0, 5);
  1365                           
  1366                           ;incstack = 0
  1367                           ; Regs used in _checkOutAD: [wreg+status,2+status,0+pclath+cstack]
  1368  02FE  3005               	movlw	5
  1369  02FF  00F2               	movwf	ADC_Sample@adldo
  1370  0300  3000               	movlw	0
  1371  0301  2016               	fcall	_ADC_Sample
  1372  0302  00FB               	movwf	_test_adc	;volatile
  1373                           
  1374                           ;main.c: 359: if (0xA5 == test_adc)
  1375  0303  30A5               	movlw	165
  1376  0304  067B               	xorwf	_test_adc,w	;volatile
  1377  0305  1D03               	btfss	3,2
  1378  0306  2B0C               	goto	l2216
  1379                           
  1380                           ;main.c: 360: {
  1381                           ;main.c: 361: volatile unsigned long power_temp;
  1382                           ;main.c: 363: out_ad = adresult;
  1383  0307  0878               	movf	_adresult+1,w	;volatile
  1384  0308  00A1               	movwf	_out_ad+1
  1385  0309  0877               	movf	_adresult,w	;volatile
  1386  030A  00A0               	movwf	_out_ad
  1387                           
  1388                           ;main.c: 364: }
  1389  030B  0008               	return
  1390  030C                     l2216:	
  1391                           
  1392                           ;main.c: 365: else
  1393                           ;main.c: 366: {
  1394                           ;main.c: 367: ADCON0 = 0;
  1395  030C  1683               	bsf	3,5	;RP0=1, select bank1
  1396  030D  0195               	clrf	21	;volatile
  1397                           
  1398                           ;main.c: 368: ADCON1 = 0;
  1399  030E  0196               	clrf	22	;volatile
  1400                           
  1401                           ;main.c: 369: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1402  030F  3084               	movlw	132
  1403  0310  1283               	bcf	3,5	;RP0=0, select bank0
  1404  0311  00C9               	movwf	??_checkOutAD
  1405  0312                     u1917:	
  1406  0312  0BC9               	decfsz	??_checkOutAD,f
  1407  0313  2B12               	goto	u1917
  1408  0314  2B15               	nop2
  1409  0315  0008               	return
  1410  0316                     __end_of_checkOutAD:	
  1411                           
  1412                           	psect	text9
  1413  00FD                     __ptext9:	
  1414 ;; *************** function _checkBatAD *****************
  1415 ;; Defined at:
  1416 ;;		line 375 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;		None
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;		None
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, status,2, status,0, pclath, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 100/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMMON   BANK0   BANK1
  1430 ;;      Params:         0       0       0
  1431 ;;      Locals:         0       0       0
  1432 ;;      Temps:          0       2       0
  1433 ;;      Totals:         0       2       0
  1434 ;;Total ram usage:        2 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    2
  1437 ;; This function calls:
  1438 ;;		_ADC_Sample
  1439 ;; This function is called by:
  1440 ;;		_main
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           
  1445                           ;psect for function _checkBatAD
  1446  00FD                     _checkBatAD:	
  1447                           
  1448                           ;main.c: 377: test_adc = ADC_Sample(1, 5);
  1449                           
  1450                           ;incstack = 0
  1451                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  1452  00FD  3005               	movlw	5
  1453  00FE  00F2               	movwf	ADC_Sample@adldo
  1454  00FF  3001               	movlw	1
  1455  0100  2016               	fcall	_ADC_Sample
  1456  0101  00FB               	movwf	_test_adc	;volatile
  1457                           
  1458                           ;main.c: 378: if (0xA5 == test_adc)
  1459  0102  30A5               	movlw	165
  1460  0103  067B               	xorwf	_test_adc,w	;volatile
  1461  0104  1D03               	btfss	3,2
  1462  0105  2956               	goto	l2184
  1463                           
  1464                           ;main.c: 379: {
  1465                           ;main.c: 380: batADValue = adresult;
  1466  0106  0878               	movf	_adresult+1,w	;volatile
  1467  0107  00A9               	movwf	_batADValue+1
  1468  0108  0877               	movf	_adresult,w	;volatile
  1469  0109  00A8               	movwf	_batADValue
  1470                           
  1471                           ;main.c: 381: if(batADValue < 1155)
  1472  010A  3004               	movlw	4
  1473  010B  0229               	subwf	_batADValue+1,w
  1474  010C  3083               	movlw	131
  1475  010D  1903               	skipnz
  1476  010E  0228               	subwf	_batADValue,w
  1477  010F  1803               	skipnc
  1478  0110  2928               	goto	l2168
  1479                           
  1480                           ;main.c: 382: {
  1481                           ;main.c: 383: pwStep = 0;
  1482  0111  01B4               	clrf	_pwStep
  1483                           
  1484                           ;main.c: 384: if(++count8s > 200)
  1485  0112  0AA4               	incf	_count8s,f
  1486  0113  1903               	skipnz
  1487  0114  0AA5               	incf	_count8s+1,f
  1488  0115  3000               	movlw	0
  1489  0116  0225               	subwf	_count8s+1,w
  1490  0117  30C9               	movlw	201
  1491  0118  1903               	skipnz
  1492  0119  0224               	subwf	_count8s,w
  1493  011A  1C03               	skipc
  1494  011B  295F               	goto	l2188
  1495                           
  1496                           ;main.c: 385: {
  1497                           ;main.c: 386: count8s = 0;
  1498  011C  01A4               	clrf	_count8s
  1499  011D  01A5               	clrf	_count8s+1
  1500                           
  1501                           ;main.c: 387: lowBatFlag = 1;
  1502  011E  01B2               	clrf	_lowBatFlag
  1503  011F  0AB2               	incf	_lowBatFlag,f
  1504                           
  1505                           ;main.c: 389: {
  1506                           ;main.c: 390: preLedStep = workStep;
  1507  0120  087A               	movf	_workStep,w
  1508  0121  1903               	btfsc	3,2
  1509  0122  2925               	goto	l2164
  1510                           
  1511                           ;main.c: 391: lowBatHintTime = 250;
  1512  0123  30FA               	movlw	250
  1513  0124  00AE               	movwf	_lowBatHintTime
  1514  0125                     l2164:	
  1515                           
  1516                           ;main.c: 392: }
  1517                           ;main.c: 393: prePwStep = 0;
  1518  0125  01B3               	clrf	_prePwStep
  1519                           
  1520                           ;main.c: 394: workStep = 0;
  1521  0126  01FA               	clrf	_workStep
  1522  0127  295F               	goto	l2188
  1523  0128                     l2168:	
  1524  0128  3005               	movlw	5
  1525                           
  1526                           ;main.c: 397: else
  1527                           ;main.c: 398: {
  1528                           ;main.c: 399: count8s = 0;
  1529  0129  01A4               	clrf	_count8s
  1530  012A  01A5               	clrf	_count8s+1
  1531                           
  1532                           ;main.c: 400: if(batADValue >= 1340)
  1533  012B  0229               	subwf	_batADValue+1,w
  1534  012C  303C               	movlw	60
  1535  012D  1903               	skipnz
  1536  012E  0228               	subwf	_batADValue,w
  1537                           
  1538                           ;main.c: 401: {
  1539                           ;main.c: 402: pwStep = ((batADValue - 1340) /2) + 13;
  1540  012F  0828               	movf	_batADValue,w
  1541  0130  1C03               	skipc
  1542  0131  293F               	goto	L3
  1543  0132  3EC4               	addlw	196
  1544  0133  00C9               	movwf	??_checkBatAD
  1545  0134  0829               	movf	_batADValue+1,w
  1546  0135  1803               	skipnc
  1547  0136  3E01               	addlw	1
  1548  0137  3EFA               	addlw	250
  1549  0138  00CA               	movwf	??_checkBatAD+1
  1550  0139  1003               	clrc
  1551  013A  0CCA               	rrf	??_checkBatAD+1,f
  1552  013B  0CC9               	rrf	??_checkBatAD,f
  1553  013C  0849               	movf	??_checkBatAD,w
  1554  013D  3E0D               	addlw	13
  1555  013E  294E               	goto	L2
  1556  013F                     L3:	
  1557                           ;main.c: 404: else
  1558                           ;main.c: 405: {
  1559                           ;main.c: 406: pwStep = (batADValue - 1117) / 16;
  1560                           
  1561                           ;main.c: 403: }
  1562                           
  1563  013F  3EA3               	addlw	163
  1564  0140  00C9               	movwf	??_checkBatAD
  1565  0141  0829               	movf	_batADValue+1,w
  1566  0142  1803               	skipnc
  1567  0143  3E01               	addlw	1
  1568  0144  3EFB               	addlw	251
  1569  0145  00CA               	movwf	??_checkBatAD+1
  1570  0146  3004               	movlw	4
  1571  0147                     u1745:	
  1572  0147  1003               	clrc
  1573  0148  0CCA               	rrf	??_checkBatAD+1,f
  1574  0149  0CC9               	rrf	??_checkBatAD,f
  1575  014A  3EFF               	addlw	-1
  1576  014B  1D03               	skipz
  1577  014C  2947               	goto	u1745
  1578  014D  0849               	movf	??_checkBatAD,w
  1579  014E                     L2:	
  1580  014E  00B4               	movwf	_pwStep
  1581                           
  1582                           ;main.c: 407: }
  1583                           ;main.c: 408: if(pwStep > 99)
  1584  014F  3064               	movlw	100
  1585  0150  0234               	subwf	_pwStep,w
  1586  0151  1C03               	skipc
  1587  0152  295F               	goto	l2188
  1588                           
  1589                           ;main.c: 409: {
  1590                           ;main.c: 410: pwStep = 99;
  1591  0153  3063               	movlw	99
  1592  0154  00B4               	movwf	_pwStep
  1593  0155  295F               	goto	l2188
  1594  0156                     l2184:	
  1595                           
  1596                           ;main.c: 418: else
  1597                           ;main.c: 419: {
  1598                           ;main.c: 420: ADCON0 = 0;
  1599  0156  1683               	bsf	3,5	;RP0=1, select bank1
  1600  0157  0195               	clrf	21	;volatile
  1601                           
  1602                           ;main.c: 421: ADCON1 = 0;
  1603  0158  0196               	clrf	22	;volatile
  1604                           
  1605                           ;main.c: 422: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1606  0159  3084               	movlw	132
  1607  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1608  015B  00C9               	movwf	??_checkBatAD
  1609  015C                     u1927:	
  1610  015C  0BC9               	decfsz	??_checkBatAD,f
  1611  015D  295C               	goto	u1927
  1612  015E  295F               	nop2
  1613  015F                     l2188:	
  1614                           
  1615                           ;main.c: 423: }
  1616                           ;main.c: 424: test_adc = ADC_Sample(2, 5);
  1617  015F  3005               	movlw	5
  1618  0160  00F2               	movwf	ADC_Sample@adldo
  1619  0161  3002               	movlw	2
  1620  0162  2016               	fcall	_ADC_Sample
  1621  0163  00FB               	movwf	_test_adc	;volatile
  1622                           
  1623                           ;main.c: 425: if (0xA5 == test_adc)
  1624  0164  30A5               	movlw	165
  1625  0165  067B               	xorwf	_test_adc,w	;volatile
  1626  0166  1D03               	btfss	3,2
  1627  0167  298F               	goto	l2206
  1628                           
  1629                           ;main.c: 426: {
  1630                           ;main.c: 427: if(chrgFlag && adresult > 100)
  1631  0168  0838               	movf	_chrgFlag,w
  1632  0169  1903               	btfsc	3,2
  1633  016A  0008               	return
  1634  016B  3000               	movlw	0
  1635  016C  0278               	subwf	_adresult+1,w	;volatile
  1636  016D  3065               	movlw	101
  1637  016E  1903               	skipnz
  1638  016F  0277               	subwf	_adresult,w	;volatile
  1639  0170  1C03               	skipc
  1640  0171  0008               	return
  1641                           
  1642                           ;main.c: 428: {
  1643                           ;main.c: 430: if(adresult > 810 || (batADValue - adresult) > 810)
  1644  0172  3003               	movlw	3
  1645  0173  0278               	subwf	_adresult+1,w	;volatile
  1646  0174  302B               	movlw	43
  1647  0175  1903               	skipnz
  1648  0176  0277               	subwf	_adresult,w	;volatile
  1649  0177  1803               	skipnc
  1650  0178  2988               	goto	l2200
  1651  0179  0877               	movf	_adresult,w	;volatile
  1652  017A  0228               	subwf	_batADValue,w
  1653  017B  00C9               	movwf	??_checkBatAD
  1654  017C  0878               	movf	_adresult+1,w	;volatile
  1655  017D  1C03               	skipc
  1656  017E  0A78               	incf	_adresult+1,w	;volatile
  1657  017F  0229               	subwf	_batADValue+1,w
  1658  0180  00CA               	movwf	??_checkBatAD+1
  1659  0181  3003               	movlw	3
  1660  0182  024A               	subwf	??_checkBatAD+1,w
  1661  0183  302B               	movlw	43
  1662  0184  1903               	skipnz
  1663  0185  0249               	subwf	??_checkBatAD,w
  1664  0186  1C03               	skipc
  1665  0187  298D               	goto	l2202
  1666  0188                     l2200:	
  1667                           
  1668                           ;main.c: 431: {
  1669                           ;main.c: 433: if(++countHalfFull > 250)
  1670  0188  30FB               	movlw	251
  1671  0189  0AB7               	incf	_countHalfFull,f
  1672  018A  0237               	subwf	_countHalfFull,w
  1673  018B  1C03               	skipc
  1674  018C  0008               	return
  1675  018D                     l2202:	
  1676                           
  1677                           ;main.c: 436: protectFlag = 2;
  1678  018D  01B7               	clrf	_countHalfFull
  1679                           
  1680                           ;main.c: 442: }
  1681                           ;main.c: 443: }
  1682                           ;main.c: 444: }
  1683  018E  0008               	return
  1684  018F                     l2206:	
  1685                           
  1686                           ;main.c: 445: else
  1687                           ;main.c: 446: {
  1688                           ;main.c: 447: ADCON0 = 0;
  1689  018F  1683               	bsf	3,5	;RP0=1, select bank1
  1690  0190  0195               	clrf	21	;volatile
  1691                           
  1692                           ;main.c: 448: ADCON1 = 0;
  1693  0191  0196               	clrf	22	;volatile
  1694                           
  1695                           ;main.c: 449: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1696  0192  3084               	movlw	132
  1697  0193  1283               	bcf	3,5	;RP0=0, select bank0
  1698  0194  00C9               	movwf	??_checkBatAD
  1699  0195                     u1937:	
  1700  0195  0BC9               	decfsz	??_checkBatAD,f
  1701  0196  2995               	goto	u1937
  1702  0197  2998               	nop2
  1703  0198  0008               	return
  1704  0199                     __end_of_checkBatAD:	
  1705                           
  1706                           	psect	text10
  1707  0016                     __ptext10:	
  1708 ;; *************** function _ADC_Sample *****************
  1709 ;; Defined at:
  1710 ;;		line 659 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  adch            1    wreg     unsigned char 
  1713 ;;  adldo           1    2[COMMON] unsigned char 
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  adch            1    1[BANK0 ] unsigned char 
  1716 ;;  j               1    0[BANK0 ] unsigned char 
  1717 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1718 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1719 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1720 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1721 ;;  i               1    2[BANK0 ] unsigned char 
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      unsigned char 
  1724 ;; Registers used:
  1725 ;;		wreg, status,2, status,0
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 100/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMMON   BANK0   BANK1
  1731 ;;      Params:         1       0       0
  1732 ;;      Locals:         0      13       0
  1733 ;;      Temps:          4       0       0
  1734 ;;      Totals:         5      13       0
  1735 ;;Total ram usage:       18 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:    1
  1738 ;; This function calls:
  1739 ;;		Nothing
  1740 ;; This function is called by:
  1741 ;;		_checkOutAD
  1742 ;;		_checkBatAD
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           
  1747                           ;psect for function _ADC_Sample
  1748  0016                     _ADC_Sample:	
  1749                           
  1750                           ;incstack = 0
  1751                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1752                           ;ADC_Sample@adch stored from wreg
  1753  0016  1283               	bcf	3,5	;RP0=0, select bank0
  1754  0017  00BD               	movwf	ADC_Sample@adch
  1755                           
  1756                           ;main.c: 661: volatile unsigned long adsum = 0;
  1757                           
  1758                           ;main.c: 662: volatile unsigned int admin = 0, admax = 0;
  1759  0018  20EF               	fcall	PL4	;call to abstracted procedure
  1760                           
  1761                           ;main.c: 663: volatile unsigned int ad_temp = 0;
  1762  0019  01C7               	clrf	ADC_Sample@ad_temp	;volatile
  1763  001A  01C8               	clrf	ADC_Sample@ad_temp+1	;volatile
  1764                           
  1765                           ;main.c: 665: if ((!LDO_EN) && (adldo & 0x04) )
  1766  001B  1683               	bsf	3,5	;RP0=1, select bank1
  1767  001C  1D16               	btfss	22,2	;volatile
  1768  001D  1D72               	btfss	ADC_Sample@adldo,2
  1769  001E  2826               	goto	l1712
  1770                           
  1771                           ;main.c: 666: {
  1772                           ;main.c: 668: ADCON1 = adldo;
  1773  001F  0872               	movf	ADC_Sample@adldo,w
  1774  0020  0096               	movwf	22	;volatile
  1775                           
  1776                           ;main.c: 669: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1777  0021  3085               	movlw	133
  1778  0022  00F3               	movwf	??_ADC_Sample
  1779  0023                     u1947:	
  1780  0023  0BF3               	decfsz	??_ADC_Sample,f
  1781  0024  2823               	goto	u1947
  1782                           
  1783                           ;main.c: 670: }
  1784  0025  2828               	goto	l1714
  1785  0026                     l1712:	
  1786                           
  1787                           ;main.c: 671: else
  1788                           ;main.c: 672: ADCON1 = adldo;
  1789  0026  0872               	movf	ADC_Sample@adldo,w
  1790  0027  0096               	movwf	22	;volatile
  1791  0028                     l1714:	
  1792                           
  1793                           ;main.c: 674: if(adch & 0x10)
  1794  0028  1283               	bcf	3,5	;RP0=0, select bank0
  1795  0029  1E3D               	btfss	ADC_Sample@adch,4
  1796  002A  2830               	goto	l1722
  1797                           
  1798                           ;main.c: 675: {
  1799                           ;main.c: 676: CHS4 = 1;
  1800  002B  1683               	bsf	3,5	;RP0=1, select bank1
  1801  002C  1716               	bsf	22,6	;volatile
  1802                           
  1803                           ;main.c: 677: adch &= 0x0f;
  1804  002D  300F               	movlw	15
  1805  002E  1283               	bcf	3,5	;RP0=0, select bank0
  1806  002F  05BD               	andwf	ADC_Sample@adch,f
  1807  0030                     l1722:	
  1808                           
  1809                           ;main.c: 680: for (i = 0; i < 10; i++)
  1810  0030  01BE               	clrf	ADC_Sample@i
  1811  0031                     l1728:	
  1812                           
  1813                           ;main.c: 681: {
  1814                           ;main.c: 682: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1815  0031  083D               	movf	ADC_Sample@adch,w
  1816  0032  00F3               	movwf	??_ADC_Sample
  1817  0033  3001               	movlw	1
  1818  0034  1003               	clrc
  1819  0035                     L4:	
  1820  0035  0DF3               	rlf	??_ADC_Sample,f
  1821  0036  3EFF               	addlw	-1
  1822  0037  1003               	clrc
  1823  0038  1D03               	skipz
  1824  0039  2835               	goto	L4
  1825  003A  0D73               	rlf	??_ADC_Sample,w
  1826  003B  3841               	iorlw	65
  1827  003C  1683               	bsf	3,5	;RP0=1, select bank1
  1828  003D  0095               	movwf	21	;volatile
  1829  003E  0000               	nop	;# 
  1830  003F  0000               	nop	;# 
  1831  0040  0000               	nop	;# 
  1832  0041  0000               	nop	;# 
  1833                           
  1834                           ;main.c: 687: GODONE = 1;
  1835  0042  1683               	bsf	3,5	;RP0=1, select bank1
  1836  0043  1495               	bsf	21,1	;volatile
  1837                           
  1838                           ;main.c: 689: unsigned char j = 0;
  1839  0044  1283               	bcf	3,5	;RP0=0, select bank0
  1840  0045  01BC               	clrf	ADC_Sample@j
  1841  0046                     l779:	
  1842                           ;main.c: 690: while (GODONE)
  1843                           
  1844  0046  1683               	bsf	3,5	;RP0=1, select bank1
  1845  0047  1C95               	btfss	21,1	;volatile
  1846  0048  2851               	goto	l1738
  1847                           
  1848                           ;main.c: 691: {
  1849                           ;main.c: 692: _delay((unsigned long)((2)*(16000000/4000000.0)));
  1850  0049  284A               	nop2	;2 cycle nop
  1851  004A  284B               	nop2	;2 cycle nop
  1852  004B  284C               	nop2	;2 cycle nop
  1853  004C  284D               	nop2	;2 cycle nop
  1854                           
  1855                           ;main.c: 694: if (0 == (--j))
  1856  004D  1283               	bcf	3,5	;RP0=0, select bank0
  1857  004E  0BBC               	decfsz	ADC_Sample@j,f
  1858  004F  2846               	goto	l779
  1859                           
  1860                           ;main.c: 695: return 0;
  1861  0050  3400               	retlw	0
  1862  0051                     l1738:	
  1863                           
  1864                           ;main.c: 696: }
  1865                           ;main.c: 698: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  1866  0051  0819               	movf	25,w	;volatile
  1867  0052  1283               	bcf	3,5	;RP0=0, select bank0
  1868  0053  00C7               	movwf	ADC_Sample@ad_temp	;volatile
  1869  0054  01C8               	clrf	ADC_Sample@ad_temp+1	;volatile
  1870  0055  0EC7               	swapf	ADC_Sample@ad_temp,f	;volatile
  1871  0056  0EC8               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  1872  0057  30F0               	movlw	240
  1873  0058  05C8               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  1874  0059  0847               	movf	ADC_Sample@ad_temp,w	;volatile
  1875  005A  390F               	andlw	15
  1876  005B  04C8               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  1877  005C  30F0               	movlw	240
  1878  005D  05C7               	andwf	ADC_Sample@ad_temp,f	;volatile
  1879  005E  1683               	bsf	3,5	;RP0=1, select bank1
  1880  005F  0E18               	swapf	24,w	;volatile
  1881  0060  390F               	andlw	15
  1882  0061  1283               	bcf	3,5	;RP0=0, select bank0
  1883  0062  07C7               	addwf	ADC_Sample@ad_temp,f	;volatile
  1884  0063  1803               	skipnc
  1885  0064  0AC8               	incf	ADC_Sample@ad_temp+1,f	;volatile
  1886                           
  1887                           ;main.c: 700: if (0 == admax)
  1888  0065  0845               	movf	ADC_Sample@admax,w	;volatile
  1889  0066  0446               	iorwf	ADC_Sample@admax+1,w	;volatile
  1890  0067  1D03               	btfss	3,2
  1891  0068  286B               	goto	l1746
  1892                           
  1893                           ;main.c: 701: {
  1894                           ;main.c: 702: admax = ad_temp;
  1895  0069  20F8               	fcall	PL6	;call to abstracted procedure
  1896  006A  287D               	goto	l1752
  1897  006B                     l1746:	
  1898                           ;main.c: 704: }
  1899                           
  1900                           ;main.c: 703: admin = ad_temp;
  1901                           
  1902                           
  1903                           ;main.c: 705: else if (ad_temp > admax)
  1904  006B  0848               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1905  006C  0246               	subwf	ADC_Sample@admax+1,w	;volatile
  1906  006D  1D03               	skipz
  1907  006E  2871               	goto	u905
  1908  006F  0847               	movf	ADC_Sample@ad_temp,w	;volatile
  1909  0070  0245               	subwf	ADC_Sample@admax,w	;volatile
  1910  0071                     u905:	
  1911  0071  1803               	skipnc
  1912  0072  2875               	goto	l1750
  1913                           
  1914                           ;main.c: 706: admax = ad_temp;
  1915  0073  20F8               	fcall	PL6	;call to abstracted procedure
  1916  0074  2881               	goto	l785
  1917  0075                     l1750:	
  1918                           
  1919                           ;main.c: 707: else if (ad_temp < admin)
  1920  0075  0844               	movf	ADC_Sample@admin+1,w	;volatile
  1921  0076  0248               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1922  0077  1D03               	skipz
  1923  0078  287B               	goto	u915
  1924  0079  0843               	movf	ADC_Sample@admin,w	;volatile
  1925  007A  0247               	subwf	ADC_Sample@ad_temp,w	;volatile
  1926  007B                     u915:	
  1927  007B  1803               	skipnc
  1928  007C  2881               	goto	l785
  1929  007D                     l1752:	
  1930                           
  1931                           ;main.c: 708: admin = ad_temp;
  1932  007D  0848               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1933  007E  00C4               	movwf	ADC_Sample@admin+1	;volatile
  1934  007F  0847               	movf	ADC_Sample@ad_temp,w	;volatile
  1935  0080  00C3               	movwf	ADC_Sample@admin	;volatile
  1936  0081                     l785:	
  1937                           
  1938                           ;main.c: 710: adsum += ad_temp;
  1939  0081  0847               	movf	ADC_Sample@ad_temp,w	;volatile
  1940  0082  00F3               	movwf	??_ADC_Sample
  1941  0083  0848               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1942  0084  00F4               	movwf	??_ADC_Sample+1
  1943  0085  01F5               	clrf	??_ADC_Sample+2
  1944  0086  01F6               	clrf	??_ADC_Sample+3
  1945  0087  0873               	movf	??_ADC_Sample,w
  1946  0088  07BF               	addwf	ADC_Sample@adsum,f	;volatile
  1947  0089  0874               	movf	??_ADC_Sample+1,w
  1948  008A  1103               	clrz
  1949  008B  1803               	skipnc
  1950  008C  3E01               	addlw	1
  1951  008D  1D03               	btfss	3,2
  1952  008E  07C0               	addwf	ADC_Sample@adsum+1,f	;volatile
  1953  008F  0875               	movf	??_ADC_Sample+2,w
  1954  0090  1103               	clrz
  1955  0091  1803               	skipnc
  1956  0092  3E01               	addlw	1
  1957  0093  1D03               	btfss	3,2
  1958  0094  07C1               	addwf	ADC_Sample@adsum+2,f	;volatile
  1959  0095  0876               	movf	??_ADC_Sample+3,w
  1960  0096  1103               	clrz
  1961  0097  1803               	skipnc
  1962  0098  3E01               	addlw	1
  1963  0099  1D03               	btfss	3,2
  1964  009A  07C2               	addwf	ADC_Sample@adsum+3,f	;volatile
  1965  009B  300A               	movlw	10
  1966  009C  0ABE               	incf	ADC_Sample@i,f
  1967  009D  023E               	subwf	ADC_Sample@i,w
  1968  009E  1C03               	skipc
  1969  009F  2831               	goto	l1728
  1970                           
  1971                           ;main.c: 711: }
  1972                           ;main.c: 712: adsum -= admax;
  1973  00A0  0845               	movf	ADC_Sample@admax,w	;volatile
  1974  00A1  00F3               	movwf	??_ADC_Sample
  1975  00A2  0846               	movf	ADC_Sample@admax+1,w	;volatile
  1976  00A3  20E0               	fcall	PL2	;call to abstracted procedure
  1977  00A4  1C03               	skipc
  1978  00A5  0F76               	incfsz	??_ADC_Sample+3,w
  1979  00A6  02C2               	subwf	ADC_Sample@adsum+3,f	;volatile
  1980                           
  1981                           ;main.c: 713: if (adsum >= admin)
  1982  00A7  0843               	movf	ADC_Sample@admin,w	;volatile
  1983  00A8  00F3               	movwf	??_ADC_Sample
  1984  00A9  0844               	movf	ADC_Sample@admin+1,w	;volatile
  1985  00AA  00F4               	movwf	??_ADC_Sample+1
  1986  00AB  01F5               	clrf	??_ADC_Sample+2
  1987  00AC  01F6               	clrf	??_ADC_Sample+3
  1988  00AD  0876               	movf	??_ADC_Sample+3,w
  1989  00AE  0242               	subwf	ADC_Sample@adsum+3,w	;volatile
  1990  00AF  1D03               	skipz
  1991  00B0  28BB               	goto	u955
  1992  00B1  0875               	movf	??_ADC_Sample+2,w
  1993  00B2  0241               	subwf	ADC_Sample@adsum+2,w	;volatile
  1994  00B3  1D03               	skipz
  1995  00B4  28BB               	goto	u955
  1996  00B5  0874               	movf	??_ADC_Sample+1,w
  1997  00B6  0240               	subwf	ADC_Sample@adsum+1,w	;volatile
  1998  00B7  1D03               	skipz
  1999  00B8  28BB               	goto	u955
  2000  00B9  0873               	movf	??_ADC_Sample,w
  2001  00BA  023F               	subwf	ADC_Sample@adsum,w	;volatile
  2002  00BB                     u955:	
  2003  00BB  1C03               	skipc
  2004  00BC  28C5               	goto	l789
  2005                           
  2006                           ;main.c: 714: adsum -= admin;
  2007  00BD  0843               	movf	ADC_Sample@admin,w	;volatile
  2008  00BE  00F3               	movwf	??_ADC_Sample
  2009  00BF  0844               	movf	ADC_Sample@admin+1,w	;volatile
  2010  00C0  20E0               	fcall	PL2	;call to abstracted procedure
  2011  00C1  1C03               	skipc
  2012  00C2  0F76               	incfsz	??_ADC_Sample+3,w
  2013  00C3  02C2               	subwf	ADC_Sample@adsum+3,f	;volatile
  2014  00C4  28C9               	goto	l1762
  2015  00C5                     l789:	
  2016                           
  2017                           ;main.c: 715: else
  2018                           ;main.c: 716: adsum = 0;
  2019  00C5  01BF               	clrf	ADC_Sample@adsum	;volatile
  2020  00C6  01C0               	clrf	ADC_Sample@adsum+1	;volatile
  2021  00C7  01C1               	clrf	ADC_Sample@adsum+2	;volatile
  2022  00C8  01C2               	clrf	ADC_Sample@adsum+3	;volatile
  2023  00C9                     l1762:	
  2024                           
  2025                           ;main.c: 718: adresult = adsum >> 3;
  2026  00C9  083F               	movf	ADC_Sample@adsum,w	;volatile
  2027  00CA  00F3               	movwf	??_ADC_Sample
  2028  00CB  0840               	movf	ADC_Sample@adsum+1,w	;volatile
  2029  00CC  00F4               	movwf	??_ADC_Sample+1
  2030  00CD  0841               	movf	ADC_Sample@adsum+2,w	;volatile
  2031  00CE  00F5               	movwf	??_ADC_Sample+2
  2032  00CF  0842               	movf	ADC_Sample@adsum+3,w	;volatile
  2033  00D0  00F6               	movwf	??_ADC_Sample+3
  2034  00D1  3003               	movlw	3
  2035  00D2                     u975:	
  2036  00D2  1003               	clrc
  2037  00D3  0CF6               	rrf	??_ADC_Sample+3,f
  2038  00D4  0CF5               	rrf	??_ADC_Sample+2,f
  2039  00D5  0CF4               	rrf	??_ADC_Sample+1,f
  2040  00D6  0CF3               	rrf	??_ADC_Sample,f
  2041  00D7  3EFF               	addlw	-1
  2042  00D8  1D03               	skipz
  2043  00D9  28D2               	goto	u975
  2044  00DA  0874               	movf	??_ADC_Sample+1,w
  2045  00DB  00F8               	movwf	_adresult+1	;volatile
  2046  00DC  0873               	movf	??_ADC_Sample,w
  2047  00DD  00F7               	movwf	_adresult	;volatile
  2048                           
  2049                           ;main.c: 720: adsum = 0;
  2050                           
  2051                           ;main.c: 721: admin = 0;
  2052                           
  2053                           ;main.c: 722: admax = 0;
  2054  00DE  20EF               	fcall	PL4	;call to abstracted procedure
  2055                           
  2056                           ;main.c: 723: return 0xA5;
  2057  00DF  34A5               	retlw	165
  2058  00E0                     __end_of_ADC_Sample:	
  2059  00E0                     PL2:	
  2060  00E0  00F4               	movwf	??_ADC_Sample+1
  2061  00E1  01F5               	clrf	??_ADC_Sample+2
  2062  00E2  01F6               	clrf	??_ADC_Sample+3
  2063  00E3  0873               	movf	??_ADC_Sample,w
  2064  00E4  02BF               	subwf	ADC_Sample@adsum,f	;volatile
  2065  00E5  0874               	movf	??_ADC_Sample+1,w
  2066  00E6  1C03               	skipc
  2067  00E7  0F74               	incfsz	??_ADC_Sample+1,w
  2068  00E8  02C0               	subwf	ADC_Sample@adsum+1,f	;volatile
  2069  00E9  0875               	movf	??_ADC_Sample+2,w
  2070  00EA  1C03               	skipc
  2071  00EB  0F75               	incfsz	??_ADC_Sample+2,w
  2072  00EC  02C1               	subwf	ADC_Sample@adsum+2,f	;volatile
  2073  00ED  0876               	movf	??_ADC_Sample+3,w
  2074  00EE  0008               	return
  2075  00EF                     __end_ofPL2:	
  2076  00EF                     PL4:	
  2077  00EF  01BF               	clrf	ADC_Sample@adsum	;volatile
  2078  00F0  01C0               	clrf	ADC_Sample@adsum+1	;volatile
  2079  00F1  01C1               	clrf	ADC_Sample@adsum+2	;volatile
  2080  00F2  01C2               	clrf	ADC_Sample@adsum+3	;volatile
  2081  00F3  01C3               	clrf	ADC_Sample@admin	;volatile
  2082  00F4  01C4               	clrf	ADC_Sample@admin+1	;volatile
  2083  00F5  01C5               	clrf	ADC_Sample@admax	;volatile
  2084  00F6  01C6               	clrf	ADC_Sample@admax+1	;volatile
  2085  00F7  0008               	return
  2086  00F8                     __end_ofPL4:	
  2087  00F8                     PL6:	
  2088  00F8  0848               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2089  00F9  00C6               	movwf	ADC_Sample@admax+1	;volatile
  2090  00FA  0847               	movf	ADC_Sample@ad_temp,w	;volatile
  2091  00FB  00C5               	movwf	ADC_Sample@admax	;volatile
  2092  00FC  0008               	return
  2093  00FD                     __end_ofPL6:	
  2094                           
  2095                           	psect	text11
  2096  0251                     __ptext11:	
  2097 ;; *************** function _Sleep_Mode *****************
  2098 ;; Defined at:
  2099 ;;		line 583 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;		None
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;		None
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  1    wreg      void 
  2106 ;; Registers used:
  2107 ;;		wreg, status,2, status,0, pclath, cstack
  2108 ;; Tracked objects:
  2109 ;;		On entry : 100/0
  2110 ;;		On exit  : 100/100
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMMON   BANK0   BANK1
  2113 ;;      Params:         0       0       0
  2114 ;;      Locals:         0       0       0
  2115 ;;      Temps:          0       0       0
  2116 ;;      Totals:         0       0       0
  2117 ;;Total ram usage:        0 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:    2
  2120 ;; This function calls:
  2121 ;;		_AD_Init
  2122 ;;		_Init_System
  2123 ;; This function is called by:
  2124 ;;		_main
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           
  2129                           ;psect for function _Sleep_Mode
  2130  0251                     _Sleep_Mode:	
  2131                           
  2132                           ;main.c: 585: INTCON = 0;
  2133                           
  2134                           ;incstack = 0
  2135                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  2136  0251  018B               	clrf	11	;volatile
  2137                           
  2138                           ;main.c: 587: OPTION_REG = 0;
  2139  0252  0181               	clrf	1	;volatile
  2140                           
  2141                           ;main.c: 589: TRISA = 0x07;
  2142  0253  3007               	movlw	7
  2143  0254  1683               	bsf	3,5	;RP0=1, select bank1
  2144  0255  0085               	movwf	5	;volatile
  2145                           
  2146                           ;main.c: 590: WPUA = 0B00000000;
  2147  0256  0188               	clrf	8	;volatile
  2148                           
  2149                           ;main.c: 591: PORTA = 0x08;
  2150  0257  3008               	movlw	8
  2151  0258  0086               	movwf	6	;volatile
  2152                           
  2153                           ;main.c: 592: TRISB = 0x24;
  2154  0259  3024               	movlw	36
  2155  025A  1283               	bcf	3,5	;RP0=0, select bank0
  2156  025B  0085               	movwf	5	;volatile
  2157                           
  2158                           ;main.c: 593: PORTB = 0x03;
  2159  025C  3003               	movlw	3
  2160  025D  0086               	movwf	6	;volatile
  2161                           
  2162                           ;main.c: 594: WPUB = 0x20;
  2163  025E  3020               	movlw	32
  2164  025F  0088               	movwf	8	;volatile
  2165                           
  2166                           ;main.c: 596: ADCON0 = 0;
  2167  0260  1683               	bsf	3,5	;RP0=1, select bank1
  2168  0261  0195               	clrf	21	;volatile
  2169                           
  2170                           ;main.c: 597: ADCON1 = 0;
  2171  0262  0196               	clrf	22	;volatile
  2172                           
  2173                           ;main.c: 599: PWMCON0 = 0;
  2174  0263  1283               	bcf	3,5	;RP0=0, select bank0
  2175  0264  0195               	clrf	21	;volatile
  2176                           
  2177                           ;main.c: 601: OSCCON = 0X70;
  2178  0265  3070               	movlw	112
  2179  0266  0094               	movwf	20	;volatile
  2180                           
  2181                           ;main.c: 603: IOCA = 0B00000000;
  2182  0267  1683               	bsf	3,5	;RP0=1, select bank1
  2183  0268  0189               	clrf	9	;volatile
  2184                           
  2185                           ;main.c: 604: IOCB = 0x24;
  2186  0269  3024               	movlw	36
  2187  026A  1283               	bcf	3,5	;RP0=0, select bank0
  2188  026B  0089               	movwf	9	;volatile
  2189                           
  2190                           ;main.c: 606: RAIE = 1;
  2191  026C  158E               	bsf	14,3	;volatile
  2192                           
  2193                           ;main.c: 607: PEIE = 1;
  2194  026D  170B               	bsf	11,6	;volatile
  2195                           
  2196                           ;main.c: 608: RBIE = 1;
  2197  026E  158B               	bsf	11,3	;volatile
  2198                           
  2199                           ;main.c: 609: GIE = 0;
  2200  026F  138B               	bcf	11,7	;volatile
  2201                           
  2202                           ;main.c: 611: PIE1 &= 0X08;
  2203  0270  3008               	movlw	8
  2204  0271  058E               	andwf	14,f	;volatile
  2205                           
  2206                           ;main.c: 612: PIR1 = 0;
  2207  0272  018D               	clrf	13	;volatile
  2208                           
  2209                           ;main.c: 613: INTCON &= 0XC8;
  2210  0273  30C8               	movlw	200
  2211  0274  058B               	andwf	11,f	;volatile
  2212                           
  2213                           ;main.c: 615: PORTA;
  2214  0275  1683               	bsf	3,5	;RP0=1, select bank1
  2215  0276  0806               	movf	6,w	;volatile
  2216                           
  2217                           ;main.c: 616: RAIF = 0;
  2218  0277  1283               	bcf	3,5	;RP0=0, select bank0
  2219  0278  118D               	bcf	13,3	;volatile
  2220                           
  2221                           ;main.c: 617: PORTB;
  2222  0279  0806               	movf	6,w	;volatile
  2223                           
  2224                           ;main.c: 618: RBIF = 0;
  2225  027A  100B               	bcf	11,0	;volatile
  2226  027B  0064               	clrwdt	;# 
  2227  027C  0063               	sleep	;# 
  2228  027D  0000               	nop	;# 
  2229  027E  0064               	clrwdt	;# 
  2230  027F  0000               	nop	;# 
  2231  0280  0000               	nop	;# 
  2232  0281  0000               	nop	;# 
  2233  0282  0000               	nop	;# 
  2234  0283  0000               	nop	;# 
  2235                           
  2236                           ;main.c: 630: if(RAIF) RAIF = 0;
  2237  0284  1283               	bcf	3,5	;RP0=0, select bank0
  2238  0285  198D               	btfsc	13,3	;volatile
  2239  0286  118D               	bcf	13,3	;volatile
  2240                           
  2241                           ;main.c: 631: if(RBIF) RBIF = 0;
  2242  0287  180B               	btfsc	11,0	;volatile
  2243  0288  100B               	bcf	11,0	;volatile
  2244                           
  2245                           ;main.c: 632: if(TMR2IF) TMR2IF = 0;
  2246  0289  188D               	btfsc	13,1	;volatile
  2247  028A  108D               	bcf	13,1	;volatile
  2248                           
  2249                           ;main.c: 633: IOCA = 0B00000000;
  2250  028B  1683               	bsf	3,5	;RP0=1, select bank1
  2251  028C  0189               	clrf	9	;volatile
  2252                           
  2253                           ;main.c: 634: IOCB = 0B00000000;
  2254  028D  1283               	bcf	3,5	;RP0=0, select bank0
  2255  028E  0189               	clrf	9	;volatile
  2256                           
  2257                           ;main.c: 635: Init_System();
  2258  028F  22BF               	fcall	_Init_System
  2259                           
  2260                           ;main.c: 636: AD_Init();
  2261  0290  2B6D               	ljmp	l1662
  2262  0291                     __end_of_Sleep_Mode:	
  2263                           
  2264                           	psect	text12
  2265  02BF                     __ptext12:	
  2266 ;; *************** function _Init_System *****************
  2267 ;; Defined at:
  2268 ;;		line 462 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;		None
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;		None
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  1    wreg      void 
  2275 ;; Registers used:
  2276 ;;		wreg, status,2
  2277 ;; Tracked objects:
  2278 ;;		On entry : 100/0
  2279 ;;		On exit  : 100/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMMON   BANK0   BANK1
  2282 ;;      Params:         0       0       0
  2283 ;;      Locals:         0       0       0
  2284 ;;      Temps:          0       0       0
  2285 ;;      Totals:         0       0       0
  2286 ;;Total ram usage:        0 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:    1
  2289 ;; This function calls:
  2290 ;;		Nothing
  2291 ;; This function is called by:
  2292 ;;		_main
  2293 ;;		_Sleep_Mode
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           
  2298                           ;psect for function _Init_System
  2299  02BF                     _Init_System:	
  2300                           
  2301                           ;incstack = 0
  2302                           ; Regs used in _Init_System: [wreg+status,2]
  2303  02BF  0000               	nop	;# 
  2304  02C0  0064               	clrwdt	;# 
  2305                           
  2306                           ;main.c: 466: OPTION_REG = 0;
  2307  02C1  1283               	bcf	3,5	;RP0=0, select bank0
  2308  02C2  0181               	clrf	1	;volatile
  2309  02C3  0064               	clrwdt	;# 
  2310                           
  2311                           ;main.c: 468: OSCCON = 0X72;
  2312  02C4  3072               	movlw	114
  2313  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  2314  02C6  0094               	movwf	20	;volatile
  2315                           
  2316                           ;main.c: 470: WPUA = 0B00000000;
  2317  02C7  1683               	bsf	3,5	;RP0=1, select bank1
  2318  02C8  0188               	clrf	8	;volatile
  2319                           
  2320                           ;main.c: 471: WPDA = 0x00;
  2321  02C9  0187               	clrf	7	;volatile
  2322                           
  2323                           ;main.c: 472: WPUB = 0x20;
  2324  02CA  3020               	movlw	32
  2325  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  2326  02CC  0088               	movwf	8	;volatile
  2327                           
  2328                           ;main.c: 474: TRISA = 0x07;
  2329  02CD  3007               	movlw	7
  2330  02CE  1683               	bsf	3,5	;RP0=1, select bank1
  2331  02CF  0085               	movwf	5	;volatile
  2332                           
  2333                           ;main.c: 475: TRISB = 0x24;
  2334  02D0  3024               	movlw	36
  2335  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  2336  02D2  0085               	movwf	5	;volatile
  2337                           
  2338                           ;main.c: 477: PORTA = 0X08;
  2339  02D3  3008               	movlw	8
  2340  02D4  1683               	bsf	3,5	;RP0=1, select bank1
  2341  02D5  0086               	movwf	6	;volatile
  2342                           
  2343                           ;main.c: 478: PORTB = 0X03;
  2344  02D6  3003               	movlw	3
  2345  02D7  1283               	bcf	3,5	;RP0=0, select bank0
  2346  02D8  0086               	movwf	6	;volatile
  2347                           
  2348                           ;main.c: 482: PR2 = 249;
  2349  02D9  30F9               	movlw	249
  2350  02DA  0091               	movwf	17	;volatile
  2351                           
  2352                           ;main.c: 483: TMR2IF = 0;
  2353  02DB  108D               	bcf	13,1	;volatile
  2354                           
  2355                           ;main.c: 484: TMR2IE = 1;
  2356  02DC  148E               	bsf	14,1	;volatile
  2357                           
  2358                           ;main.c: 486: T2CON = 0B00000100;
  2359  02DD  3004               	movlw	4
  2360  02DE  0093               	movwf	19	;volatile
  2361                           
  2362                           ;main.c: 487: INTCON = 0XC0;
  2363  02DF  30C0               	movlw	192
  2364  02E0  008B               	movwf	11	;volatile
  2365  02E1  0008               	return
  2366  02E2                     __end_of_Init_System:	
  2367                           
  2368                           	psect	text13
  2369  036D                     __ptext13:	
  2370 ;; *************** function _AD_Init *****************
  2371 ;; Defined at:
  2372 ;;		line 499 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
  2373 ;; Parameters:    Size  Location     Type
  2374 ;;		None
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;		None
  2377 ;; Return value:  Size  Location     Type
  2378 ;;                  1    wreg      void 
  2379 ;; Registers used:
  2380 ;;		wreg, status,2
  2381 ;; Tracked objects:
  2382 ;;		On entry : 100/0
  2383 ;;		On exit  : 100/100
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMMON   BANK0   BANK1
  2386 ;;      Params:         0       0       0
  2387 ;;      Locals:         0       0       0
  2388 ;;      Temps:          0       0       0
  2389 ;;      Totals:         0       0       0
  2390 ;;Total ram usage:        0 bytes
  2391 ;; Hardware stack levels used:    1
  2392 ;; Hardware stack levels required when called:    1
  2393 ;; This function calls:
  2394 ;;		Nothing
  2395 ;; This function is called by:
  2396 ;;		_main
  2397 ;;		_Sleep_Mode
  2398 ;; This function uses a non-reentrant model
  2399 ;;
  2400                           
  2401                           
  2402                           ;psect for function _AD_Init
  2403  036D                     _AD_Init:	
  2404  036D                     l1662:	
  2405                           ;incstack = 0
  2406                           ; Regs used in _AD_Init: [wreg+status,2]
  2407                           
  2408                           
  2409                           ;main.c: 532: ADCON0 = 0X41;
  2410  036D  3041               	movlw	65
  2411  036E  1683               	bsf	3,5	;RP0=1, select bank1
  2412  036F  0095               	movwf	21	;volatile
  2413                           
  2414                           ;main.c: 549: ADCON1 = 0;
  2415  0370  0196               	clrf	22	;volatile
  2416                           
  2417                           ;main.c: 550: ANSEL0 = 0X07;
  2418  0371  3007               	movlw	7
  2419  0372  0093               	movwf	19	;volatile
  2420  0373  0008               	return
  2421  0374                     __end_of_AD_Init:	
  2422                           
  2423                           	psect	text14
  2424  0316                     __ptext14:	
  2425 ;; *************** function _Isr_Timer *****************
  2426 ;; Defined at:
  2427 ;;		line 105 in file "C:\mcuproject\scm\zdt\D203_062B_SOP16\main.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;		None
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;		None
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  1    wreg      void 
  2434 ;; Registers used:
  2435 ;;		wreg, status,2, status,0
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 100/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMMON   BANK0   BANK1
  2441 ;;      Params:         0       0       0
  2442 ;;      Locals:         0       0       0
  2443 ;;      Temps:          2       0       0
  2444 ;;      Totals:         2       0       0
  2445 ;;Total ram usage:        2 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; This function calls:
  2448 ;;		Nothing
  2449 ;; This function is called by:
  2450 ;;		Interrupt level 1
  2451 ;; This function uses a non-reentrant model
  2452 ;;
  2453                           
  2454                           
  2455                           ;psect for function _Isr_Timer
  2456  0316                     _Isr_Timer:	
  2457                           
  2458                           ;main.c: 107: if(TMR2IF)
  2459  0316  1283               	bcf	3,5	;RP0=0, select bank0
  2460  0317  1C8D               	btfss	13,1	;volatile
  2461  0318  2B27               	goto	i1l660
  2462                           
  2463                           ;main.c: 108: {
  2464                           ;main.c: 109: TMR2IF = 0;
  2465  0319  108D               	bcf	13,1	;volatile
  2466                           
  2467                           ;main.c: 110: if(++intCount >= 160)
  2468  031A  30A0               	movlw	160
  2469  031B  0ABB               	incf	_intCount,f
  2470  031C  023B               	subwf	_intCount,w
  2471  031D  1C03               	skipc
  2472  031E  2B27               	goto	i1l660
  2473  031F  3064               	movlw	100
  2474                           
  2475                           ;main.c: 111: {
  2476                           ;main.c: 112: intCount = 0;
  2477  0320  01BB               	clrf	_intCount
  2478                           
  2479                           ;main.c: 113: IntFlag = 1;
  2480  0321  01B9               	clrf	_IntFlag
  2481  0322  0AB9               	incf	_IntFlag,f
  2482                           
  2483                           ;main.c: 114: if(++count1s >= 100)
  2484  0323  0ABA               	incf	_count1s,f
  2485  0324  023A               	subwf	_count1s,w
  2486  0325  1803               	btfsc	3,0
  2487                           
  2488                           ;main.c: 115: {
  2489                           ;main.c: 116: count1s = 0;
  2490  0326  01BA               	clrf	_count1s
  2491  0327                     i1l660:	
  2492  0327  0871               	movf	??_Isr_Timer+1,w
  2493  0328  008A               	movwf	10
  2494  0329  0E70               	swapf	??_Isr_Timer^(0+-128),w
  2495  032A  0083               	movwf	3
  2496  032B  0EFE               	swapf	126,f
  2497  032C  0E7E               	swapf	126,w
  2498  032D  0009               	retfie
  2499  032E                     __end_of_Isr_Timer:	
  2500  007E                     btemp	set	126	;btemp
  2501  007E                     wtemp0	set	126
  2502                           
  2503                           	psect	intentry
  2504  0004                     __pintentry:	
  2505                           ;incstack = 0
  2506                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  2507                           
  2508  0004                     interrupt_function:	
  2509  007E                     saved_w	set	btemp
  2510  0004  00FE               	movwf	btemp
  2511  0005  0E03               	swapf	3,w
  2512  0006  00F0               	movwf	??_Isr_Timer
  2513  0007  080A               	movf	10,w
  2514  0008  00F1               	movwf	??_Isr_Timer+1
  2515  0009  2B16               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         33
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      12
    BANK0            80     15      44
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _keyCtr->_keyRead
    _chrgCtr->___lbmod
    _checkOutAD->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkBatAD
    _checkOutAD->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1633
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                         _checkOutAD
                            _chrgCtr
                             _keyCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      45
                                              3 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              1     1      0     212
                                              0 BANK0      1     1      0
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     212
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _checkOutAD                                           5     5      0     688
                                             13 BANK0      1     1      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0     688
                                             13 BANK0      2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     688
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutAD
     _ADC_Sample
   _chrgCtr
     ___lbmod
   _keyCtr
     _keyRead
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      F      2C       4       55.0%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      38       7        0.0%
DATA                 0      0      38       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Aug 07 16:21:55 2025

                     PL2 00E0                       PL4 00EF                       PL6 00F8  
                     fsr 0004                      l712 01BE                      l706 0342  
                    l724 01F0                      l717 01E8                      l665 0296  
                    l668 02A3                      l785 0081                      l779 0046  
                    l789 00C5                      _GIE 005F                      _RB4 0034  
                    _PR2 0011                      u905 0071                      u915 007B  
                    u955 00BB                      u975 00D2      __size_of_ADC_Sample 00CA  
                    indf 0000          __end_of_AD_Init 0374                     l2110 0217  
                   l2200 0188                     l2120 0227                     l2202 018D  
                   l2114 021E                     l2140 024D                     l2132 023D  
                   l2108 0215                     l2206 018F                     l2142 024F  
                   l2134 023F                     l2118 0224                     l2216 030C  
                   l2164 0125                     l2254 02BD                     l1712 0026  
                   l2168 0128                     l2184 0156                     l1722 0030  
                   l1714 0028                     l2188 015F                     l1662 036D  
                   l1750 0075                     l1752 007D                     l1728 0031  
                   l1762 00C9                     l1746 006B                     l1738 0051  
                   l1676 0351                     l1916 0339                     l1932 01A3  
                   l1944 01BB                     l1786 02FA                     l1778 02E6  
                   l1962 01D6                     l1946 01B6                     l1964 01D7  
                   l1982 01F6                     l1984 01F9                     l1968 01DA  
                   _CHS4 04B6                     _IOCA 0089                     _IOCB 0009  
                   _PIE1 000E                     u1745 0147                     u1917 0312  
                   u1927 015C                     u1937 0195                     u1947 0023  
                   _PEIE 005E                     _RAIE 0073                     _RAIF 006B  
                   _RBIE 005B                     _RBIF 0058                     _PIR1 000D  
                   _WPDA 0087                     _WPUA 0088                     _WPUB 0008  
                   _main 0291                     btemp 007E                     start 000A  
          ??_Init_System 0072                    ?_main 0070          __end_of___lbmod 02FE  
                  _T2CON 0013                    i1l660 0327            _countHalfFull 0037  
                  _PORTA 0086                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0005                    _PWMTH 0018                    _PWMTL 0017  
        __end_of_chrgCtr 0251                    _cDuty 0079          __end_of_keyRead 0357  
                  pclath 000A          __end_of_pwmInit 0365          __end_of_pwmStop 0377  
                  status 0003                    wtemp0 007E          __end_of_workCtr 01FD  
        __initialization 000B             __end_of_main 02BF                   ??_main 0077  
              ??_AD_Init 0072      __end_of_Init_System 02E2                   _ADCON0 0095  
                 _ADCON1 0096                   _ADRESH 0099                   _ADRESL 0098  
                 _ANSEL0 0093                   _GODONE 04A9                   _LDO_EN 04B2  
                 _INTCON 000B                   _OSCCON 0014                   _TMR2IE 0071  
                 _TMR2IF 0069                   _PWMD3L 009C             ??_ADC_Sample 0073  
           keyCtr@kclick 0073       __size_of_Isr_Timer 0018               _Sleep_Mode 0251  
              ??___lbmod 0073                   _count2 0030                   _keyCtr 032E  
              ??_chrgCtr 003C                   _pwStep 0034                   _result 002C  
                 _out_ad 0020                ??_keyRead 0072       __end_of_ADC_Sample 00E0  
                 saved_w 007E                ??_pwmInit 0072                ??_pwmStop 0072  
              ??_workCtr 0072               _batADValue 0028          ___lbmod@divisor 0072  
__end_of__initialization 0014          ___lbmod@counter 0075           __pcstackCOMMON 0070  
            _Init_System 02BF               __end_ofPL2 00EF               __end_ofPL4 00F8  
             __end_ofPL6 00FD        __end_of_Isr_Timer 032E               _checkBatAD 00FD  
             _checkOutAD 02FE               __pbssBANK0 0020              ?_Sleep_Mode 0070  
             __pmaintext 0291               __pintentry 0004                  ?_keyCtr 0070  
                _AD_Init 036D                  _PWM23DT 009D                  _PWMD23H 009E  
                _PWMCON0 0015                  _PWMCON1 0016                  _PWMCON2 001D  
                _IntFlag 0039          ADC_Sample@adldo 0072          ADC_Sample@admax 0045  
        ADC_Sample@admin 0043          ADC_Sample@adsum 003F                  ___lbmod 02E2  
        __size_of_keyCtr 0017                  _chrgCtr 01FD               _lowBatFlag 0032  
                __ptext1 0199                  __ptext2 0374                  __ptext3 0357  
                __ptext4 032E                  __ptext5 0345                  __ptext6 01FD  
                __ptext7 02E2                  __ptext8 02FE                  __ptext9 00FD  
                _count1s 003A                  _count8s 0024                  _maxDuty 0035  
                _keyRead 0345      __size_of_Sleep_Mode 0040                  _pwmInit 0357  
            ?_checkBatAD 0070                  _pwmStop 0374                  clrloop0 0366  
                _workCtr 0199              ?_checkOutAD 0070     end_of_initialization 0014  
       ___lbmod@dividend 0074              ___lbmod@rem 0076      __size_of_checkBatAD 009C  
           ?_Init_System 0070      __size_of_checkOutAD 0018           __end_of_keyCtr 0345  
    start_initialization 000B                _Isr_Timer 0316             ??_Sleep_Mode 0072  
      ADC_Sample@ad_temp 0047                 ??_keyCtr 0073                 ?_AD_Init 0070  
            __pbssCOMMON 0077                ___latbits 0000            __pcstackBANK0 003C  
     __end_of_Sleep_Mode 0291               ?_Isr_Timer 0070                __pnvBANK0 004B  
               ?___lbmod 0072                 ?_chrgCtr 0070                _count900s 0022  
               ?_keyRead 0070                _firstTime 004B           ADC_Sample@adch 003D  
               ?_pwmInit 0070             ??_checkBatAD 0049                 ?_pwmStop 0070  
         _lowBatHintTime 002E                 ?_workCtr 0070             ??_checkOutAD 0049  
            ADC_Sample@i 003E              ADC_Sample@j 003C        interrupt_function 0004  
              clear_ram0 0365                _prePwStep 0033                _sleepTime 0031  
     __end_of_checkBatAD 0199       __end_of_checkOutAD 0316     __size_of_Init_System 0023  
       __size_of_AD_Init 0007         keyRead@keyStatus 0072              ??_Isr_Timer 0070  
             _ADC_Sample 0016         __size_of___lbmod 001C         __size_of_chrgCtr 0054  
       __size_of_keyRead 0012                 _adresult 0077                 _chrgFlag 0038  
               __ptext10 0016                 __ptext11 0251                 __ptext12 02BF  
               __ptext13 036D                 __ptext14 0316         __size_of_pwmInit 000E  
       __size_of_pwmStop 0003                 _count50s 0026         __size_of_workCtr 0064  
               _keyCount 0036                 _intCount 003B            __size_of_main 002E  
               _overTime 002F                 _test_adc 007B                 _power_ad 002A  
               _workStep 007A                 intlevel1 0000              ?_ADC_Sample 0072  
             _OPTION_REG 0001  
