

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Jan 10 11:32:22 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	swtext1,local,class=CONST,delta=2
    33                           	psect	pa_nodes0,global,class=CODE,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 1.45
    37                           ; Generated 16/11/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F887 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71                           	psect	nvBANK0
    72  0069                     __pnvBANK0:	
    73  0069                     _firstTime:	
    74  0069                     	ds	1
    75  001F                     _PWM01DT	set	31
    76  001E                     _PWMD01H	set	30
    77  001D                     _PWMCON2	set	29
    78  001A                     _PWMD1L	set	26
    79  0019                     _PWMD0L	set	25
    80  0018                     _PWMTH	set	24
    81  0017                     _PWMTL	set	23
    82  0016                     _PWMCON1	set	22
    83  0015                     _PWMCON0	set	21
    84  0014                     _OSCCON	set	20
    85  0013                     _T2CON	set	19
    86  0011                     _PR2	set	17
    87  000E                     _PIE1	set	14
    88  000D                     _PIR1	set	13
    89  000B                     _INTCON	set	11
    90  0009                     _IOCB	set	9
    91  0008                     _WPUB	set	8
    92  0006                     _PORTB	set	6
    93  0005                     _TRISB	set	5
    94  0001                     _OPTION_REG	set	1
    95  0071                     _TMR2IE	set	113
    96  0073                     _RAIE	set	115
    97  0069                     _TMR2IF	set	105
    98  006B                     _RAIF	set	107
    99  0058                     _RBIF	set	88
   100  005B                     _RBIE	set	91
   101  005E                     _PEIE	set	94
   102  005F                     _GIE	set	95
   103  0030                     _RB0	set	48
   104  0031                     _RB1	set	49
   105  0099                     _ADRESH	set	153
   106  0098                     _ADRESL	set	152
   107  0096                     _ADCON1	set	150
   108  0095                     _ADCON0	set	149
   109  0093                     _ANSEL0	set	147
   110  0089                     _IOCA	set	137
   111  0088                     _WPUA	set	136
   112  0087                     _WPDA	set	135
   113  0086                     _PORTA	set	134
   114  0085                     _TRISA	set	133
   115  04B2                     _LDO_EN	set	1202
   116  04B6                     _CHS4	set	1206
   117  04A9                     _GODONE	set	1193
   118                           
   119                           	psect	cinit
   120  000D                     start_initialization:	
   121                           ; #config settings
   122                           
   123  000D                     __initialization:	
   124                           
   125                           ; Clear objects allocated to COMMON
   126  000D  3077               	movlw	low __pbssCOMMON
   127  000E  0084               	movwf	4
   128  000F  307B               	movlw	low (__pbssCOMMON+4)
   129  0010  257A               	fcall	clear_ram0
   130  0011  3020               	movlw	low __pbssBANK0
   131                           
   132                           ; Clear objects allocated to BANK0
   133  0012  1383               	bcf	3,7	;select IRP bank0
   134  0013  0084               	movwf	4
   135  0014  3056               	movlw	low (__pbssBANK0+54)
   136  0015  257A               	fcall	clear_ram0
   137  0016                     end_of_initialization:	
   138                           ;End of C runtime variable initialization code
   139                           
   140  0016                     __end_of__initialization:	
   141  0016  0183               	clrf	3
   142  0017  2C7A               	ljmp	_main	;jump to C main() function
   143                           
   144                           	psect	bssCOMMON
   145  0077                     __pbssCOMMON:	
   146  0077                     _prePwStep:	
   147  0077                     	ds	1
   148  0078                     _ledStep:	
   149  0078                     	ds	1
   150  0079                     _workStep:	
   151  0079                     	ds	1
   152  007A                     _chrgFlag:	
   153  007A                     	ds	1
   154                           
   155                           	psect	bssBANK0
   156  0020                     __pbssBANK0:	
   157  0020                     _count900s:	
   158  0020                     	ds	2
   159  0022                     _count8s:	
   160  0022                     	ds	2
   161  0024                     _count5s:	
   162  0024                     	ds	2
   163  0026                     _fullCount:	
   164  0026                     	ds	2
   165  0028                     _count50s:	
   166  0028                     	ds	2
   167  002A                     _batADValue:	
   168  002A                     	ds	2
   169  002C                     _outADValue:	
   170  002C                     	ds	2
   171  002E                     _power_ad:	
   172  002E                     	ds	2
   173  0030                     _result:	
   174  0030                     	ds	2
   175  0032                     _adresult:	
   176  0032                     	ds	2
   177  0034                     _sleepTime:	
   178  0034                     	ds	1
   179  0035                     _lowBatFlag:	
   180  0035                     	ds	1
   181  0036                     _preLedStep:	
   182  0036                     	ds	1
   183  0037                     _overWorkTime:	
   184  0037                     	ds	1
   185  0038                     _ledCntTime:	
   186  0038                     	ds	1
   187  0039                     _chrgMaxDuty:	
   188  0039                     	ds	1
   189  003A                     _chrgWaitTime:	
   190  003A                     	ds	1
   191  003B                     _subTime:	
   192  003B                     	ds	1
   193  003C                     _addTime:	
   194  003C                     	ds	1
   195  003D                     _lockCount:	
   196  003D                     	ds	1
   197  003E                     _chrgMaxAD:	
   198  003E                     	ds	1
   199  003F                     _chrgMode:	
   200  003F                     	ds	1
   201  0040                     _showBatTime:	
   202  0040                     	ds	1
   203  0041                     _lockLedStep:	
   204  0041                     	ds	1
   205  0042                     _reChrgCount:	
   206  0042                     	ds	1
   207  0043                     _pwStep:	
   208  0043                     	ds	1
   209  0044                     _overChrgTime:	
   210  0044                     	ds	1
   211  0045                     _startTime:	
   212  0045                     	ds	1
   213  0046                     _tempDuty:	
   214  0046                     	ds	1
   215  0047                     _addPowerCount:	
   216  0047                     	ds	1
   217  0048                     _overCount:	
   218  0048                     	ds	1
   219  0049                     _maxDuty:	
   220  0049                     	ds	1
   221  004A                     _longPressFlag:	
   222  004A                     	ds	1
   223  004B                     _keyCount:	
   224  004B                     	ds	1
   225  004C                     _ledCnt:	
   226  004C                     	ds	1
   227  004D                     _workOverOutTime:	
   228  004D                     	ds	1
   229  004E                     _protectFlag:	
   230  004E                     	ds	1
   231  004F                     _countHalfFull:	
   232  004F                     	ds	1
   233  0050                     _intCount10:	
   234  0050                     	ds	1
   235  0051                     _chrgFullFlag:	
   236  0051                     	ds	1
   237  0052                     _IntFlag:	
   238  0052                     	ds	1
   239  0053                     _count1s:	
   240  0053                     	ds	1
   241  0054                     _intCount:	
   242  0054                     	ds	1
   243  0055                     _test_adc:	
   244  0055                     	ds	1
   245                           
   246                           	psect	clrtext
   247  057A                     clear_ram0:	
   248                           ;	Called with FSR containing the base address, and
   249                           ;	W with the last address+1
   250                           
   251  057A  0064               	clrwdt	;clear the watchdog before getting into this loop
   252  057B                     clrloop0:	
   253  057B  0180               	clrf	0	;clear RAM location pointed to by FSR
   254  057C  0A84               	incf	4,f	;increment pointer
   255  057D  0604               	xorwf	4,w	;XOR with final address
   256  057E  1903               	btfsc	3,2	;have we reached the end yet?
   257  057F  3400               	retlw	0	;all done for this memory range, return
   258  0580  0604               	xorwf	4,w	;XOR again to restore value
   259  0581  2D7B               	goto	clrloop0	;do the next byte
   260                           
   261                           	psect	cstackCOMMON
   262  0070                     __pcstackCOMMON:	
   263  0070                     ?_ledShow:	
   264  0070                     ??_ledShow:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_Init_System:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ?_AD_Init:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_checkOutA:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?_chrgCtr:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ?_checkBatAD:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?_keyCtr:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ?_workCtr:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_ledCtr:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_Sleep_Mode:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_chrgPwmStop:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_chrgPwmInit:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_pwmInit:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_pwmStop:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_Isr_Timer:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ??_Isr_Timer:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?_main:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_keyRead:	
   316                           ; 1 bytes @ 0x0
   317                           
   318                           
   319                           ; 1 bytes @ 0x0
   320  0070                     	ds	3
   321  0073                     ??_Init_System:	
   322  0073                     ??_AD_Init:	
   323                           ; 1 bytes @ 0x3
   324                           
   325  0073                     ??_workCtr:	
   326                           ; 1 bytes @ 0x3
   327                           
   328  0073                     ??_Sleep_Mode:	
   329                           ; 1 bytes @ 0x3
   330                           
   331  0073                     ??_chrgPwmStop:	
   332                           ; 1 bytes @ 0x3
   333                           
   334  0073                     ??_chrgPwmInit:	
   335                           ; 1 bytes @ 0x3
   336                           
   337  0073                     ??_pwmInit:	
   338                           ; 1 bytes @ 0x3
   339                           
   340  0073                     ??_pwmStop:	
   341                           ; 1 bytes @ 0x3
   342                           
   343  0073                     ?_ADC_Sample:	
   344                           ; 1 bytes @ 0x3
   345                           
   346  0073                     ??_keyRead:	
   347                           ; 1 bytes @ 0x3
   348                           
   349  0073                     ?___lbdiv:	
   350                           ; 1 bytes @ 0x3
   351                           
   352  0073                     ?___lbmod:	
   353                           ; 1 bytes @ 0x3
   354                           
   355  0073                     keyRead@keyStatus:	
   356                           ; 1 bytes @ 0x3
   357                           
   358  0073                     ADC_Sample@adldo:	
   359                           ; 1 bytes @ 0x3
   360                           
   361  0073                     ___lbdiv@divisor:	
   362                           ; 1 bytes @ 0x3
   363                           
   364  0073                     ___lbmod@divisor:	
   365                           ; 1 bytes @ 0x3
   366                           
   367                           
   368                           ; 1 bytes @ 0x3
   369  0073                     	ds	1
   370  0074                     ??_checkOutA:	
   371  0074                     ??_checkBatAD:	
   372                           ; 1 bytes @ 0x4
   373                           
   374  0074                     ??_keyCtr:	
   375                           ; 1 bytes @ 0x4
   376                           
   377  0074                     ??___lbdiv:	
   378                           ; 1 bytes @ 0x4
   379                           
   380  0074                     ??___lbmod:	
   381                           ; 1 bytes @ 0x4
   382                           
   383  0074                     keyCtr@kclick:	
   384                           ; 1 bytes @ 0x4
   385                           
   386  0074                     ___lbdiv@dividend:	
   387                           ; 1 bytes @ 0x4
   388                           
   389                           
   390                           ; 1 bytes @ 0x4
   391  0074                     	ds	1
   392  0075                     ___lbdiv@counter:	
   393                           
   394                           ; 1 bytes @ 0x5
   395  0075                     	ds	1
   396  0076                     ___lbdiv@quotient:	
   397                           
   398                           ; 1 bytes @ 0x6
   399  0076                     	ds	1
   400  0077                     ??_main:	
   401                           
   402                           	psect	cstackBANK0
   403  0056                     __pcstackBANK0:	
   404                           ; 1 bytes @ 0x7
   405                           
   406  0056                     ??_chrgCtr:	
   407  0056                     ??_ADC_Sample:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0056                     ___lbmod@dividend:	
   411                           ; 1 bytes @ 0x0
   412                           
   413                           
   414                           ; 1 bytes @ 0x0
   415  0056                     	ds	1
   416  0057                     ___lbmod@counter:	
   417                           
   418                           ; 1 bytes @ 0x1
   419  0057                     	ds	1
   420  0058                     ___lbmod@rem:	
   421                           
   422                           ; 1 bytes @ 0x2
   423  0058                     	ds	1
   424  0059                     ??_ledCtr:	
   425                           
   426                           ; 1 bytes @ 0x3
   427  0059                     	ds	1
   428  005A                     ADC_Sample@j:	
   429                           
   430                           ; 1 bytes @ 0x4
   431  005A                     	ds	1
   432  005B                     ADC_Sample@adch:	
   433                           
   434                           ; 1 bytes @ 0x5
   435  005B                     	ds	1
   436  005C                     ADC_Sample@i:	
   437                           
   438                           ; 1 bytes @ 0x6
   439  005C                     	ds	1
   440  005D                     ADC_Sample@adsum:	
   441                           
   442                           ; 4 bytes @ 0x7
   443  005D                     	ds	4
   444  0061                     ADC_Sample@admin:	
   445                           
   446                           ; 2 bytes @ 0xB
   447  0061                     	ds	2
   448  0063                     ADC_Sample@admax:	
   449                           
   450                           ; 2 bytes @ 0xD
   451  0063                     	ds	2
   452  0065                     ADC_Sample@ad_temp:	
   453                           
   454                           ; 2 bytes @ 0xF
   455  0065                     	ds	3
   456  0068                     checkOutA@maxAout:	
   457                           
   458                           ; 1 bytes @ 0x12
   459  0068                     	ds	1
   460                           
   461                           	psect	maintext
   462  047A                     __pmaintext:	
   463 ;;
   464 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   465 ;;
   466 ;; *************** function _main *****************
   467 ;; Defined at:
   468 ;;		line 124 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;		None
   471 ;; Auto vars:     Size  Location     Type
   472 ;;		None
   473 ;; Return value:  Size  Location     Type
   474 ;;                  1    wreg      void 
   475 ;; Registers used:
   476 ;;		wreg, status,2, status,0, pclath, cstack
   477 ;; Tracked objects:
   478 ;;		On entry : B00/0
   479 ;;		On exit  : 100/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMMON   BANK0   BANK1
   482 ;;      Params:         0       0       0
   483 ;;      Locals:         0       0       0
   484 ;;      Temps:          0       0       0
   485 ;;      Totals:         0       0       0
   486 ;;Total ram usage:        0 bytes
   487 ;; Hardware stack levels required when called:    4
   488 ;; This function calls:
   489 ;;		_AD_Init
   490 ;;		_Init_System
   491 ;;		_Sleep_Mode
   492 ;;		_checkBatAD
   493 ;;		_checkOutA
   494 ;;		_chrgCtr
   495 ;;		_keyCtr
   496 ;;		_ledCtr
   497 ;;		_workCtr
   498 ;; This function is called by:
   499 ;;		Startup code after reset
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503                           
   504                           ;psect for function _main
   505  047A                     _main:	
   506                           
   507                           ;main.c: 126: Init_System();
   508                           
   509                           ;incstack = 0
   510                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   511  047A  24D9               	fcall	_Init_System
   512                           
   513                           ;main.c: 127: AD_Init();
   514  047B  258A               	fcall	_AD_Init
   515                           
   516                           ;main.c: 128: firstTime = 100;
   517  047C  3064               	movlw	100
   518  047D  1283               	bcf	3,5	;RP0=0, select bank0
   519  047E  00E9               	movwf	_firstTime
   520  047F                     l661:	
   521                           ;main.c: 129: while (1)
   522                           
   523  047F  0064               	clrwdt	;# 
   524                           
   525                           ;main.c: 132: if(intCount10 > 10)
   526  0480  300B               	movlw	11
   527  0481  1283               	bcf	3,5	;RP0=0, select bank0
   528  0482  0250               	subwf	_intCount10,w
   529  0483  1C03               	skipc
   530  0484  2C87               	goto	l3409
   531                           
   532                           ;main.c: 133: {
   533                           ;main.c: 134: intCount10 = 0;
   534  0485  01D0               	clrf	_intCount10
   535                           
   536                           ;main.c: 135: checkOutA();
   537  0486  2205               	fcall	_checkOutA
   538  0487                     l3409:	
   539                           
   540                           ;main.c: 136: }
   541                           ;main.c: 137: if(!IntFlag)
   542  0487  1283               	bcf	3,5	;RP0=0, select bank0
   543  0488  0852               	movf	_IntFlag,w
   544  0489  1903               	btfsc	3,2
   545  048A  2C7F               	goto	l661
   546                           
   547                           ;main.c: 139: IntFlag = 0;
   548  048B  01D2               	clrf	_IntFlag
   549                           
   550                           ;main.c: 140: chrgCtr();
   551  048C  2018               	fcall	_chrgCtr
   552                           
   553                           ;main.c: 141: checkBatAD();
   554  048D  22B5               	fcall	_checkBatAD
   555                           
   556                           ;main.c: 142: if(chrgFlag == 0 && lowBatFlag == 0)
   557  048E  087A               	movf	_chrgFlag,w
   558  048F  1D03               	btfss	3,2
   559  0490  2C96               	goto	l665
   560  0491  1283               	bcf	3,5	;RP0=0, select bank0
   561  0492  0835               	movf	_lowBatFlag,w
   562  0493  1D03               	btfss	3,2
   563  0494  2C96               	goto	l665
   564                           
   565                           ;main.c: 143: {
   566                           ;main.c: 144: keyCtr();
   567  0495  24B1               	fcall	_keyCtr
   568  0496                     l665:	
   569                           
   570                           ;main.c: 145: }
   571                           ;main.c: 146: workCtr();
   572  0496  2442               	fcall	_workCtr
   573                           
   574                           ;main.c: 147: ledCtr();
   575  0497  23B3               	fcall	_ledCtr
   576                           
   577                           ;main.c: 148: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0)
   578  0498  087A               	movf	_chrgFlag,w
   579  0499  1D03               	btfss	3,2
   580  049A  2CAF               	goto	l3441
   581  049B  0879               	movf	_workStep,w
   582  049C  1D03               	btfss	3,2
   583  049D  2CAF               	goto	l3441
   584  049E  084B               	movf	_keyCount,w
   585  049F  1D03               	btfss	3,2
   586  04A0  2CAF               	goto	l3441
   587  04A1  0869               	movf	_firstTime,w
   588  04A2  1D03               	btfss	3,2
   589  04A3  2CAF               	goto	l3441
   590  04A4  0840               	movf	_showBatTime,w
   591  04A5  1D03               	btfss	3,2
   592  04A6  2CAF               	goto	l3441
   593                           
   594                           ;main.c: 149: {
   595                           ;main.c: 150: if(++sleepTime >= 200)
   596  04A7  30C8               	movlw	200
   597  04A8  0AB4               	incf	_sleepTime,f
   598  04A9  0234               	subwf	_sleepTime,w
   599  04AA  1C03               	skipc
   600  04AB  2C7F               	goto	l661
   601                           
   602                           ;main.c: 151: {
   603                           ;main.c: 152: sleepTime = 0;
   604  04AC  01B4               	clrf	_sleepTime
   605                           
   606                           ;main.c: 153: Sleep_Mode();
   607  04AD  2404               	fcall	_Sleep_Mode
   608  04AE  2C7F               	goto	l661
   609  04AF                     l3441:	
   610                           
   611                           ;main.c: 156: else
   612                           ;main.c: 157: {
   613                           ;main.c: 158: sleepTime = 0;
   614  04AF  01B4               	clrf	_sleepTime
   615  04B0  2C7F               	goto	l661
   616  04B1                     __end_of_main:	
   617                           
   618                           	psect	text1
   619  0442                     __ptext1:	
   620 ;; *************** function _workCtr *****************
   621 ;; Defined at:
   622 ;;		line 534 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;		None
   625 ;; Auto vars:     Size  Location     Type
   626 ;;		None
   627 ;; Return value:  Size  Location     Type
   628 ;;                  1    wreg      void 
   629 ;; Registers used:
   630 ;;		wreg, status,2, status,0, pclath, cstack
   631 ;; Tracked objects:
   632 ;;		On entry : 0/0
   633 ;;		On exit  : 100/0
   634 ;;		Unchanged: 0/0
   635 ;; Data sizes:     COMMON   BANK0   BANK1
   636 ;;      Params:         0       0       0
   637 ;;      Locals:         0       0       0
   638 ;;      Temps:          0       0       0
   639 ;;      Totals:         0       0       0
   640 ;;Total ram usage:        0 bytes
   641 ;; Hardware stack levels used:    1
   642 ;; Hardware stack levels required when called:    3
   643 ;; This function calls:
   644 ;;		_pwmInit
   645 ;;		_pwmStop
   646 ;; This function is called by:
   647 ;;		_main
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651                           
   652                           ;psect for function _workCtr
   653  0442                     _workCtr:	
   654                           
   655                           ;main.c: 537: if(startTime > 0)
   656                           
   657                           ;incstack = 0
   658                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   659  0442  1283               	bcf	3,5	;RP0=0, select bank0
   660  0443  0845               	movf	_startTime,w
   661  0444  1D03               	btfss	3,2
   662                           
   663                           ;main.c: 538: {
   664                           ;main.c: 539: startTime--;
   665  0445  03C5               	decf	_startTime,f
   666                           
   667                           ;main.c: 540: }
   668                           ;main.c: 541: if(workStep > 0)
   669  0446  0879               	movf	_workStep,w
   670  0447  1903               	btfsc	3,2
   671  0448  2C76               	goto	l2741
   672                           
   673                           ;main.c: 542: {
   674                           ;main.c: 543: if((PWMCON0 & 0x02) == 0)
   675  0449  1895               	btfsc	21,1	;volatile
   676  044A  2C4C               	goto	l2721
   677                           
   678                           ;main.c: 544: {
   679                           ;main.c: 545: pwmInit();
   680  044B  2582               	fcall	_pwmInit
   681  044C                     l2721:	
   682                           
   683                           ;main.c: 546: }
   684                           ;main.c: 547: maxDuty = 43 + (workStep*2);
   685  044C  1003               	clrc
   686  044D  0D79               	rlf	_workStep,w
   687  044E  3E2B               	addlw	43
   688  044F  00C9               	movwf	_maxDuty
   689                           
   690                           ;main.c: 548: if(overCount >= 5)
   691  0450  3005               	movlw	5
   692  0451  0248               	subwf	_overCount,w
   693  0452  1C03               	skipc
   694  0453  2C66               	goto	l2733
   695                           
   696                           ;main.c: 549: {
   697                           ;main.c: 550: if(++count5s > 500)
   698  0454  0AA4               	incf	_count5s,f
   699  0455  1903               	skipnz
   700  0456  0AA5               	incf	_count5s+1,f
   701  0457  3001               	movlw	1
   702  0458  0225               	subwf	_count5s+1,w
   703  0459  30F5               	movlw	245
   704  045A  1903               	skipnz
   705  045B  0224               	subwf	_count5s,w
   706  045C  1C03               	skipc
   707  045D  2C68               	goto	l2735
   708  045E  30B4               	movlw	180
   709                           
   710                           ;main.c: 551: {
   711                           ;main.c: 552: count5s = 0;
   712  045F  01A4               	clrf	_count5s
   713  0460  01A5               	clrf	_count5s+1
   714                           
   715                           ;main.c: 553: overWorkTime = 180;
   716  0461  00B7               	movwf	_overWorkTime
   717                           
   718                           ;main.c: 554: preLedStep = workStep;
   719  0462  0879               	movf	_workStep,w
   720  0463  00B6               	movwf	_preLedStep
   721                           
   722                           ;main.c: 555: workStep = 0;
   723  0464  01F9               	clrf	_workStep
   724  0465  2C68               	goto	l2735
   725  0466                     l2733:	
   726                           
   727                           ;main.c: 559: else
   728                           ;main.c: 560: {
   729                           ;main.c: 561: count5s = 0;
   730  0466  01A4               	clrf	_count5s
   731  0467  01A5               	clrf	_count5s+1
   732  0468                     l2735:	
   733                           
   734                           ;main.c: 562: }
   735                           ;main.c: 563: if(count1s == 0 && ++count900s >= 900)
   736  0468  0853               	movf	_count1s,w
   737  0469  1D03               	btfss	3,2
   738  046A  0008               	return
   739  046B  0AA0               	incf	_count900s,f
   740  046C  1903               	skipnz
   741  046D  0AA1               	incf	_count900s+1,f
   742  046E  3003               	movlw	3
   743  046F  0221               	subwf	_count900s+1,w
   744  0470  3084               	movlw	132
   745  0471  1903               	skipnz
   746  0472  0220               	subwf	_count900s,w
   747  0473  1803               	btfsc	3,0
   748                           
   749                           ;main.c: 564: {
   750                           ;main.c: 565: workStep = 0;
   751  0474  01F9               	clrf	_workStep
   752  0475  0008               	return
   753  0476                     l2741:	
   754                           
   755                           ;main.c: 568: else
   756                           ;main.c: 569: {
   757                           ;main.c: 570: pwmStop();
   758  0476  2597               	fcall	_pwmStop
   759                           
   760                           ;main.c: 571: count900s = 0;
   761  0477  01A0               	clrf	_count900s
   762  0478  01A1               	clrf	_count900s+1
   763  0479  0008               	return
   764  047A                     __end_of_workCtr:	
   765                           
   766                           	psect	text2
   767  0597                     __ptext2:	
   768 ;; *************** function _pwmStop *****************
   769 ;; Defined at:
   770 ;;		line 920 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;		None
   773 ;; Auto vars:     Size  Location     Type
   774 ;;		None
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		None
   779 ;; Tracked objects:
   780 ;;		On entry : 100/0
   781 ;;		On exit  : 100/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMMON   BANK0   BANK1
   784 ;;      Params:         0       0       0
   785 ;;      Locals:         0       0       0
   786 ;;      Temps:          0       0       0
   787 ;;      Totals:         0       0       0
   788 ;;Total ram usage:        0 bytes
   789 ;; Hardware stack levels used:    1
   790 ;; Hardware stack levels required when called:    2
   791 ;; This function calls:
   792 ;;		Nothing
   793 ;; This function is called by:
   794 ;;		_workCtr
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           
   799                           ;psect for function _pwmStop
   800  0597                     _pwmStop:	
   801                           
   802                           ;main.c: 922: PWMCON0 &= 0XFD;
   803                           
   804                           ;incstack = 0
   805                           ; Regs used in _pwmStop: []
   806  0597  1095               	bcf	21,1	;volatile
   807                           
   808                           ;main.c: 923: RB1 = 0;
   809  0598  1086               	bcf	6,1	;volatile
   810  0599  0008               	return
   811  059A                     __end_of_pwmStop:	
   812                           
   813                           	psect	text3
   814  0582                     __ptext3:	
   815 ;; *************** function _pwmInit *****************
   816 ;; Defined at:
   817 ;;		line 905 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;		None
   820 ;; Auto vars:     Size  Location     Type
   821 ;;		None
   822 ;; Return value:  Size  Location     Type
   823 ;;                  1    wreg      void 
   824 ;; Registers used:
   825 ;;		wreg, status,2
   826 ;; Tracked objects:
   827 ;;		On entry : 100/0
   828 ;;		On exit  : 100/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMMON   BANK0   BANK1
   831 ;;      Params:         0       0       0
   832 ;;      Locals:         0       0       0
   833 ;;      Temps:          0       0       0
   834 ;;      Totals:         0       0       0
   835 ;;Total ram usage:        0 bytes
   836 ;; Hardware stack levels used:    1
   837 ;; Hardware stack levels required when called:    2
   838 ;; This function calls:
   839 ;;		Nothing
   840 ;; This function is called by:
   841 ;;		_workCtr
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           
   846                           ;psect for function _pwmInit
   847  0582                     _pwmInit:	
   848                           
   849                           ;main.c: 907: PWMCON1 = 0B00000000;
   850                           
   851                           ;incstack = 0
   852                           ; Regs used in _pwmInit: [wreg+status,2]
   853                           
   854                           ;main.c: 908: PWMTH = 0X00;
   855                           
   856                           ;main.c: 909: PWMTL = 100;
   857                           
   858                           ;main.c: 912: PWMD01H = 0;
   859  0582  2574               	fcall	PL8	;call to abstracted procedure
   860                           
   861                           ;main.c: 913: PWMD1L = 50;
   862  0583  3032               	movlw	50
   863  0584  009A               	movwf	26	;volatile
   864                           
   865                           ;main.c: 914: PWM01DT = 0X00;
   866  0585  019F               	clrf	31	;volatile
   867                           
   868                           ;main.c: 916: PWMCON0 = 0X62;
   869  0586  3062               	movlw	98
   870  0587  0095               	movwf	21	;volatile
   871                           
   872                           ;main.c: 917: PWMCON2 =0X00;
   873  0588  019D               	clrf	29	;volatile
   874  0589  0008               	return
   875  058A                     __end_of_pwmInit:	
   876                           
   877                           	psect	text4
   878  03B3                     __ptext4:	
   879 ;; *************** function _ledCtr *****************
   880 ;; Defined at:
   881 ;;		line 231 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;		None
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      void 
   888 ;; Registers used:
   889 ;;		wreg, status,2, status,0, pclath, cstack
   890 ;; Tracked objects:
   891 ;;		On entry : 100/0
   892 ;;		On exit  : 100/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMMON   BANK0   BANK1
   895 ;;      Params:         0       0       0
   896 ;;      Locals:         0       0       0
   897 ;;      Temps:          0       1       0
   898 ;;      Totals:         0       1       0
   899 ;;Total ram usage:        1 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; Hardware stack levels required when called:    3
   902 ;; This function calls:
   903 ;;		___lbdiv
   904 ;;		___lbmod
   905 ;; This function is called by:
   906 ;;		_main
   907 ;; This function uses a non-reentrant model
   908 ;;
   909                           
   910                           
   911                           ;psect for function _ledCtr
   912  03B3                     _ledCtr:	
   913                           
   914                           ;main.c: 233: if(firstTime > 0)
   915                           
   916                           ;incstack = 0
   917                           ; Regs used in _ledCtr: [wreg+status,2+status,0+pclath+cstack]
   918  03B3  0869               	movf	_firstTime,w
   919  03B4  1903               	btfsc	3,2
   920  03B5  2BC0               	goto	l3357
   921  03B6  3006               	movlw	6
   922                           
   923                           ;main.c: 234: {
   924                           ;main.c: 235: firstTime--;
   925  03B7  03E9               	decf	_firstTime,f
   926                           
   927                           ;main.c: 236: ledStep = 6;
   928  03B8  00F8               	movwf	_ledStep
   929                           
   930                           ;main.c: 237: if(prePwStep < pwStep)
   931  03B9  0843               	movf	_pwStep,w
   932  03BA  0277               	subwf	_prePwStep,w
   933  03BB  1803               	skipnc
   934  03BC  0008               	return
   935                           
   936                           ;main.c: 238: {
   937                           ;main.c: 239: prePwStep = pwStep;
   938  03BD  0843               	movf	_pwStep,w
   939  03BE  00F7               	movwf	_prePwStep
   940  03BF  0008               	return
   941  03C0                     l3357:	
   942                           
   943                           ;main.c: 242: else if(overWorkTime > 0)
   944  03C0  0837               	movf	_overWorkTime,w
   945  03C1  1903               	btfsc	3,2
   946  03C2  2BD2               	goto	l3367
   947  03C3  303C               	movlw	60
   948                           
   949                           ;main.c: 243: {
   950                           ;main.c: 244: overWorkTime--;
   951  03C4  03B7               	decf	_overWorkTime,f
   952                           
   953                           ;main.c: 245: if(overWorkTime % 60 < 30)
   954  03C5  00F3               	movwf	___lbmod@divisor
   955  03C6  0837               	movf	_overWorkTime,w
   956  03C7  2536               	fcall	___lbmod
   957  03C8  00D9               	movwf	??_ledCtr
   958  03C9  301E               	movlw	30
   959  03CA  0259               	subwf	??_ledCtr,w
   960  03CB  1803               	skipnc
   961  03CC  2BD0               	goto	l3365
   962                           
   963                           ;main.c: 246: {
   964                           ;main.c: 247: ledStep = preLedStep;
   965  03CD  0836               	movf	_preLedStep,w
   966  03CE  00F8               	movwf	_ledStep
   967                           
   968                           ;main.c: 248: }
   969  03CF  0008               	return
   970  03D0                     l3365:	
   971                           
   972                           ;main.c: 249: else
   973                           ;main.c: 250: {
   974                           ;main.c: 251: ledStep = 0;
   975  03D0  01F8               	clrf	_ledStep
   976  03D1  0008               	return
   977  03D2                     l3367:	
   978                           
   979                           ;main.c: 254: else if(showBatTime > 0)
   980  03D2  0840               	movf	_showBatTime,w
   981  03D3  1903               	btfsc	3,2
   982  03D4  2BEC               	goto	l3385
   983  03D5  300E               	movlw	14
   984                           
   985                           ;main.c: 255: {
   986                           ;main.c: 256: showBatTime--;
   987  03D6  03C0               	decf	_showBatTime,f
   988                           
   989                           ;main.c: 257: if(prePwStep >= 14)
   990  03D7  0277               	subwf	_prePwStep,w
   991  03D8  1C03               	skipc
   992  03D9  2BE0               	goto	l3375
   993                           
   994                           ;main.c: 258: {
   995                           ;main.c: 259: ledStep = prePwStep/14;
   996  03DA  300E               	movlw	14
   997  03DB  00F3               	movwf	___lbdiv@divisor
   998  03DC  0877               	movf	_prePwStep,w
   999  03DD  2552               	fcall	___lbdiv
  1000  03DE  00F8               	movwf	_ledStep
  1001                           
  1002                           ;main.c: 260: }
  1003  03DF  0008               	return
  1004  03E0                     l3375:	
  1005                           
  1006                           ;main.c: 261: else if(prePwStep > 5)
  1007  03E0  3006               	movlw	6
  1008  03E1  0277               	subwf	_prePwStep,w
  1009  03E2  1C03               	skipc
  1010  03E3  2BE7               	goto	l3379
  1011  03E4                     l3377:	
  1012                           
  1013                           ;main.c: 262: {
  1014                           ;main.c: 263: ledStep = 1;
  1015  03E4  01F8               	clrf	_ledStep
  1016  03E5  0AF8               	incf	_ledStep,f
  1017                           
  1018                           ;main.c: 264: }
  1019  03E6  0008               	return
  1020  03E7                     l3379:	
  1021                           
  1022                           ;main.c: 265: else
  1023                           ;main.c: 266: {
  1024                           ;main.c: 267: if(count1s < 50)
  1025  03E7  3032               	movlw	50
  1026  03E8  0253               	subwf	_count1s,w
  1027  03E9  1C03               	btfss	3,0
  1028  03EA  2BE4               	goto	l3377
  1029  03EB  2BD0               	goto	l3365
  1030  03EC                     l3385:	
  1031                           ;main.c: 274: }
  1032                           ;main.c: 275: }
  1033                           ;main.c: 276: }
  1034                           
  1035                           
  1036                           ;main.c: 277: else if(workStep > 0)
  1037  03EC  0879               	movf	_workStep,w
  1038  03ED  1903               	btfsc	3,2
  1039  03EE  2BF2               	goto	l3389
  1040                           
  1041                           ;main.c: 278: {
  1042                           ;main.c: 279: ledStep = workStep;
  1043  03EF  0879               	movf	_workStep,w
  1044  03F0  00F8               	movwf	_ledStep
  1045                           
  1046                           ;main.c: 280: }
  1047  03F1  0008               	return
  1048  03F2                     l3389:	
  1049                           
  1050                           ;main.c: 281: else if(chrgFlag)
  1051  03F2  087A               	movf	_chrgFlag,w
  1052  03F3  1903               	btfsc	3,2
  1053  03F4  2BD0               	goto	l3365
  1054                           
  1055                           ;main.c: 282: {
  1056                           ;main.c: 283: if(count1s % 50 == 0)
  1057  03F5  3032               	movlw	50
  1058  03F6  00F3               	movwf	___lbmod@divisor
  1059  03F7  0853               	movf	_count1s,w
  1060  03F8  2536               	fcall	___lbmod
  1061  03F9  3A00               	xorlw	0
  1062  03FA  1D03               	skipz
  1063  03FB  0008               	return
  1064                           
  1065                           ;main.c: 284: {
  1066                           ;main.c: 285: if(++ledStep > 6)
  1067  03FC  3007               	movlw	7
  1068  03FD  0AF8               	incf	_ledStep,f
  1069  03FE  0278               	subwf	_ledStep,w
  1070  03FF  1C03               	skipc
  1071  0400  0008               	return
  1072                           
  1073                           ;main.c: 286: {
  1074                           ;main.c: 287: ledStep = lockLedStep;
  1075  0401  0841               	movf	_lockLedStep,w
  1076  0402  00F8               	movwf	_ledStep
  1077  0403  0008               	return
  1078  0404                     __end_of_ledCtr:	
  1079                           
  1080                           	psect	text5
  1081  0536                     __ptext5:	
  1082 ;; *************** function ___lbmod *****************
  1083 ;; Defined at:
  1084 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1085 ;; Parameters:    Size  Location     Type
  1086 ;;  dividend        1    wreg     unsigned char 
  1087 ;;  divisor         1    3[COMMON] unsigned char 
  1088 ;; Auto vars:     Size  Location     Type
  1089 ;;  dividend        1    0[BANK0 ] unsigned char 
  1090 ;;  rem             1    2[BANK0 ] unsigned char 
  1091 ;;  counter         1    1[BANK0 ] unsigned char 
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  1    wreg      unsigned char 
  1094 ;; Registers used:
  1095 ;;		wreg, status,2, status,0
  1096 ;; Tracked objects:
  1097 ;;		On entry : 100/0
  1098 ;;		On exit  : 100/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMMON   BANK0   BANK1
  1101 ;;      Params:         1       0       0
  1102 ;;      Locals:         0       3       0
  1103 ;;      Temps:          1       0       0
  1104 ;;      Totals:         2       3       0
  1105 ;;Total ram usage:        5 bytes
  1106 ;; Hardware stack levels used:    1
  1107 ;; Hardware stack levels required when called:    2
  1108 ;; This function calls:
  1109 ;;		Nothing
  1110 ;; This function is called by:
  1111 ;;		_ledCtr
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114                           
  1115                           
  1116                           ;psect for function ___lbmod
  1117  0536                     ___lbmod:	
  1118                           
  1119                           ;incstack = 0
  1120                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1121                           ;___lbmod@dividend stored from wreg
  1122  0536  00D6               	movwf	___lbmod@dividend
  1123  0537  3008               	movlw	8
  1124  0538  00D7               	movwf	___lbmod@counter
  1125  0539  01D8               	clrf	___lbmod@rem
  1126  053A                     l3009:	
  1127  053A  0856               	movf	___lbmod@dividend,w
  1128  053B  00F4               	movwf	??___lbmod
  1129  053C  3007               	movlw	7
  1130  053D  1003               	clrc
  1131  053E                     L1:	
  1132  053E  0CF4               	rrf	??___lbmod,f
  1133  053F  3EFF               	addlw	-1
  1134  0540  1003               	clrc
  1135  0541  1D03               	skipz
  1136  0542  2D3E               	goto	L1
  1137  0543  0D58               	rlf	___lbmod@rem,w
  1138  0544  0474               	iorwf	??___lbmod,w
  1139  0545  00D8               	movwf	___lbmod@rem
  1140  0546  1003               	clrc
  1141  0547  0DD6               	rlf	___lbmod@dividend,f
  1142  0548  0873               	movf	___lbmod@divisor,w
  1143  0549  0258               	subwf	___lbmod@rem,w
  1144  054A  1C03               	skipc
  1145  054B  2D4E               	goto	l3017
  1146  054C  0873               	movf	___lbmod@divisor,w
  1147  054D  02D8               	subwf	___lbmod@rem,f
  1148  054E                     l3017:	
  1149  054E  0BD7               	decfsz	___lbmod@counter,f
  1150  054F  2D3A               	goto	l3009
  1151  0550  0858               	movf	___lbmod@rem,w
  1152  0551  0008               	return
  1153  0552                     __end_of___lbmod:	
  1154                           
  1155                           	psect	text6
  1156  04B1                     __ptext6:	
  1157 ;; *************** function _keyCtr *****************
  1158 ;; Defined at:
  1159 ;;		line 497 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;		None
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;  kclick          1    4[COMMON] unsigned char 
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      void 
  1166 ;; Registers used:
  1167 ;;		wreg, status,2, status,0, pclath, cstack
  1168 ;; Tracked objects:
  1169 ;;		On entry : 100/0
  1170 ;;		On exit  : 100/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMMON   BANK0   BANK1
  1173 ;;      Params:         0       0       0
  1174 ;;      Locals:         1       0       0
  1175 ;;      Temps:          0       0       0
  1176 ;;      Totals:         1       0       0
  1177 ;;Total ram usage:        1 bytes
  1178 ;; Hardware stack levels used:    1
  1179 ;; Hardware stack levels required when called:    3
  1180 ;; This function calls:
  1181 ;;		_keyRead
  1182 ;; This function is called by:
  1183 ;;		_main
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           
  1188                           ;psect for function _keyCtr
  1189  04B1                     _keyCtr:	
  1190                           
  1191                           ;main.c: 499: char kclick = keyRead(0x04 & (~PORTB));
  1192                           
  1193                           ;incstack = 0
  1194                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1195  04B1  0906               	comf	6,w	;volatile
  1196  04B2  3904               	andlw	4
  1197  04B3  24FB               	fcall	_keyRead
  1198  04B4  00F4               	movwf	keyCtr@kclick
  1199                           
  1200                           ;main.c: 500: if(kclick == 1)
  1201  04B5  0B74               	decfsz	keyCtr@kclick,w
  1202  04B6  2CCB               	goto	l2701
  1203                           
  1204                           ;main.c: 501: {
  1205                           ;main.c: 502: if(workStep > 0)
  1206  04B7  0879               	movf	_workStep,w
  1207  04B8  1903               	btfsc	3,2
  1208  04B9  2CC2               	goto	l2693
  1209                           
  1210                           ;main.c: 503: {
  1211                           ;main.c: 504: if(++workStep > 6)
  1212  04BA  3007               	movlw	7
  1213  04BB  0AF9               	incf	_workStep,f
  1214  04BC  0279               	subwf	_workStep,w
  1215  04BD  1C03               	skipc
  1216  04BE  0008               	return
  1217                           
  1218                           ;main.c: 505: {
  1219                           ;main.c: 506: workStep = 1;
  1220  04BF  01F9               	clrf	_workStep
  1221  04C0  0AF9               	incf	_workStep,f
  1222  04C1  0008               	return
  1223  04C2                     l2693:	
  1224                           
  1225                           ;main.c: 509: else if(showBatTime > 0)
  1226  04C2  0840               	movf	_showBatTime,w
  1227  04C3  1903               	btfsc	3,2
  1228  04C4  2CC7               	goto	l2697
  1229  04C5                     l2695:	
  1230                           
  1231                           ;main.c: 510: {
  1232                           ;main.c: 511: showBatTime = 0;
  1233  04C5  01C0               	clrf	_showBatTime
  1234                           
  1235                           ;main.c: 512: }
  1236  04C6  0008               	return
  1237  04C7                     l2697:	
  1238                           
  1239                           ;main.c: 513: else
  1240                           ;main.c: 514: {
  1241                           ;main.c: 515: showBatTime = 200;
  1242  04C7  30C8               	movlw	200
  1243  04C8  00C0               	movwf	_showBatTime
  1244                           
  1245                           ;main.c: 516: count1s = 0;
  1246  04C9  01D3               	clrf	_count1s
  1247  04CA  0008               	return
  1248  04CB                     l2701:	
  1249                           
  1250                           ;main.c: 519: else if(kclick == 2)
  1251  04CB  3002               	movlw	2
  1252  04CC  0674               	xorwf	keyCtr@kclick,w
  1253  04CD  1D03               	btfss	3,2
  1254  04CE  0008               	return
  1255                           
  1256                           ;main.c: 520: {
  1257                           ;main.c: 521: if(workStep > 0)
  1258  04CF  0879               	movf	_workStep,w
  1259  04D0  1903               	btfsc	3,2
  1260  04D1  2CD4               	goto	l776
  1261                           
  1262                           ;main.c: 522: {
  1263                           ;main.c: 523: workStep = 0;
  1264  04D2  01F9               	clrf	_workStep
  1265                           
  1266                           ;main.c: 524: }
  1267  04D3  0008               	return
  1268  04D4                     l776:	
  1269  04D4  301E               	movlw	30
  1270                           
  1271                           ;main.c: 525: else
  1272                           ;main.c: 526: {
  1273                           ;main.c: 527: workStep = 1;
  1274  04D5  01F9               	clrf	_workStep
  1275  04D6  0AF9               	incf	_workStep,f
  1276                           
  1277                           ;main.c: 528: startTime = 30;
  1278  04D7  00C5               	movwf	_startTime
  1279  04D8  2CC5               	goto	l2695
  1280  04D9                     __end_of_keyCtr:	
  1281                           
  1282                           	psect	text7
  1283  04FB                     __ptext7:	
  1284 ;; *************** function _keyRead *****************
  1285 ;; Defined at:
  1286 ;;		line 464 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;  keyStatus       1    wreg     unsigned char 
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;  keyStatus       1    3[COMMON] unsigned char 
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      unsigned char 
  1293 ;; Registers used:
  1294 ;;		wreg, status,2, status,0
  1295 ;; Tracked objects:
  1296 ;;		On entry : 100/0
  1297 ;;		On exit  : 100/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMMON   BANK0   BANK1
  1300 ;;      Params:         0       0       0
  1301 ;;      Locals:         1       0       0
  1302 ;;      Temps:          0       0       0
  1303 ;;      Totals:         1       0       0
  1304 ;;Total ram usage:        1 bytes
  1305 ;; Hardware stack levels used:    1
  1306 ;; Hardware stack levels required when called:    2
  1307 ;; This function calls:
  1308 ;;		Nothing
  1309 ;; This function is called by:
  1310 ;;		_keyCtr
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           
  1315                           ;psect for function _keyRead
  1316  04FB                     _keyRead:	
  1317                           
  1318                           ;incstack = 0
  1319                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1320                           ;keyRead@keyStatus stored from wreg
  1321  04FB  00F3               	movwf	keyRead@keyStatus
  1322                           
  1323                           ;main.c: 466: if(keyStatus)
  1324  04FC  0873               	movf	keyRead@keyStatus,w
  1325  04FD  3064               	movlw	100
  1326  04FE  1903               	btfsc	3,2
  1327  04FF  2D0D               	goto	L3
  1328                           
  1329                           ;main.c: 467: {
  1330                           ;main.c: 468: keyCount++;
  1331  0500  0ACB               	incf	_keyCount,f
  1332                           
  1333                           ;main.c: 469: if(keyCount >= 100)
  1334  0501  024B               	subwf	_keyCount,w
  1335  0502  1C03               	skipc
  1336  0503  3400               	retlw	0
  1337                           
  1338                           ;main.c: 470: {
  1339                           ;main.c: 471: keyCount = 100;
  1340  0504  3064               	movlw	100
  1341  0505  00CB               	movwf	_keyCount
  1342                           
  1343                           ;main.c: 472: if(!longPressFlag)
  1344  0506  084A               	movf	_longPressFlag,w
  1345  0507  1D03               	btfss	3,2
  1346  0508  3400               	retlw	0
  1347  0509  3002               	movlw	2
  1348                           
  1349                           ;main.c: 473: {
  1350                           ;main.c: 474: longPressFlag = 1;
  1351  050A  01CA               	clrf	_longPressFlag
  1352  050B  0ACA               	incf	_longPressFlag,f
  1353                           
  1354                           ;main.c: 475: return 2;
  1355  050C  0008               	return
  1356  050D                     L3:	
  1357                           ;main.c: 479: else
  1358                           ;main.c: 480: {
  1359                           ;main.c: 481: if(keyCount >= 100)
  1360                           
  1361  050D  024B               	subwf	_keyCount,w
  1362  050E  1C03               	skipc
  1363  050F  2D13               	goto	l2163
  1364                           
  1365                           ;main.c: 482: {
  1366                           ;main.c: 483: keyCount = 0;
  1367  0510  01CB               	clrf	_keyCount
  1368                           
  1369                           ;main.c: 484: longPressFlag = 0;
  1370  0511  01CA               	clrf	_longPressFlag
  1371                           
  1372                           ;main.c: 485: return 0;
  1373  0512  3400               	retlw	0
  1374  0513                     l2163:	
  1375                           
  1376                           ;main.c: 487: else if(keyCount >= 6)
  1377  0513  3006               	movlw	6
  1378  0514  024B               	subwf	_keyCount,w
  1379                           
  1380                           ;main.c: 488: {
  1381                           ;main.c: 489: keyCount = 0;
  1382  0515  01CB               	clrf	_keyCount
  1383  0516  1803               	btfsc	3,0
  1384                           
  1385                           ;main.c: 490: return 1;
  1386  0517  3401               	retlw	1
  1387  0518  3400               	retlw	0
  1388  0519                     __end_of_keyRead:	
  1389                           ;main.c: 491: }
  1390                           ;main.c: 492: keyCount = 0;
  1391                           
  1392                           
  1393                           	psect	text8
  1394  0018                     __ptext8:	
  1395 ;; *************** function _chrgCtr *****************
  1396 ;; Defined at:
  1397 ;;		line 299 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;		None
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;		None
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  1    wreg      void 
  1404 ;; Registers used:
  1405 ;;		wreg, status,2, status,0, pclath, cstack
  1406 ;; Tracked objects:
  1407 ;;		On entry : 100/0
  1408 ;;		On exit  : 100/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMMON   BANK0   BANK1
  1411 ;;      Params:         0       0       0
  1412 ;;      Locals:         0       0       0
  1413 ;;      Temps:          0       2       0
  1414 ;;      Totals:         0       2       0
  1415 ;;Total ram usage:        2 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; Hardware stack levels required when called:    3
  1418 ;; This function calls:
  1419 ;;		___lbdiv
  1420 ;;		_chrgPwmInit
  1421 ;;		_chrgPwmStop
  1422 ;; This function is called by:
  1423 ;;		_main
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           
  1428                           ;psect for function _chrgCtr
  1429  0018                     _chrgCtr:	
  1430                           
  1431                           ;main.c: 301: if(PORTA & 0x02)
  1432                           
  1433                           ;incstack = 0
  1434                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1435  0018  1683               	bsf	3,5	;RP0=1, select bank1
  1436  0019  1C86               	btfss	6,1	;volatile
  1437  001A  28F7               	goto	l3261
  1438                           
  1439                           ;main.c: 302: {
  1440                           ;main.c: 303: if(chrgFlag == 0)
  1441  001B  087A               	movf	_chrgFlag,w
  1442  001C  1D03               	btfss	3,2
  1443  001D  2824               	goto	l3137
  1444                           
  1445                           ;main.c: 304: {
  1446                           ;main.c: 305: chrgFlag = 1;
  1447  001E  01FA               	clrf	_chrgFlag
  1448  001F  0AFA               	incf	_chrgFlag,f
  1449                           
  1450                           ;main.c: 306: ledStep = 0;
  1451  0020  01F8               	clrf	_ledStep
  1452                           
  1453                           ;main.c: 307: chrgMaxDuty = 0;
  1454  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1455  0022  01B9               	clrf	_chrgMaxDuty
  1456                           
  1457                           ;main.c: 308: chrgPwmStop();
  1458  0023  259A               	fcall	_chrgPwmStop
  1459  0024                     l3137:	
  1460                           
  1461                           ;main.c: 309: }
  1462                           ;main.c: 310: workStep = 0;
  1463  0024  01F9               	clrf	_workStep
  1464                           
  1465                           ;main.c: 311: lowBatFlag = 0;
  1466  0025  1283               	bcf	3,5	;RP0=0, select bank0
  1467  0026  01B5               	clrf	_lowBatFlag
  1468                           
  1469                           ;main.c: 312: if(prePwStep < pwStep)
  1470  0027  0843               	movf	_pwStep,w
  1471  0028  0277               	subwf	_prePwStep,w
  1472  0029  1803               	skipnc
  1473  002A  2834               	goto	l3149
  1474                           
  1475                           ;main.c: 313: {
  1476                           ;main.c: 314: if(++count50s > 2000)
  1477  002B  2116               	fcall	PL6	;call to abstracted procedure
  1478  002C  1903               	skipnz
  1479  002D  0228               	subwf	_count50s,w
  1480  002E  1C03               	skipc
  1481  002F  2836               	goto	l3151
  1482                           
  1483                           ;main.c: 315: {
  1484                           ;main.c: 316: count50s = 0;
  1485  0030  01A8               	clrf	_count50s
  1486  0031  01A9               	clrf	_count50s+1
  1487                           
  1488                           ;main.c: 317: prePwStep++;
  1489  0032  0AF7               	incf	_prePwStep,f
  1490  0033  2836               	goto	l3151
  1491  0034                     l3149:	
  1492                           
  1493                           ;main.c: 320: else
  1494                           ;main.c: 321: {
  1495                           ;main.c: 322: count50s = 0;
  1496  0034  01A8               	clrf	_count50s
  1497  0035  01A9               	clrf	_count50s+1
  1498  0036                     l3151:	
  1499                           
  1500                           ;main.c: 323: }
  1501                           ;main.c: 324: if(protectFlag)
  1502  0036  084E               	movf	_protectFlag,w
  1503  0037  1903               	btfsc	3,2
  1504  0038  2859               	goto	l3175
  1505                           
  1506                           ;main.c: 325: {
  1507                           ;main.c: 326: chrgPwmStop();
  1508  0039  259A               	fcall	_chrgPwmStop
  1509                           
  1510                           ;main.c: 327: ledStep = 6;
  1511  003A  3006               	movlw	6
  1512  003B  00F8               	movwf	_ledStep
  1513                           
  1514                           ;main.c: 328: if(prePwStep < 99 && protectFlag == 1)
  1515  003C  3063               	movlw	99
  1516  003D  0277               	subwf	_prePwStep,w
  1517  003E  1803               	skipnc
  1518  003F  2857               	goto	l3171
  1519  0040  0B4E               	decfsz	_protectFlag,w
  1520  0041  2857               	goto	l3171
  1521                           
  1522                           ;main.c: 329: {
  1523                           ;main.c: 330: if(++reChrgCount > 250)
  1524  0042  30FB               	movlw	251
  1525  0043  0AC2               	incf	_reChrgCount,f
  1526  0044  0242               	subwf	_reChrgCount,w
  1527  0045  1C03               	skipc
  1528  0046  0008               	return
  1529  0047  300F               	movlw	15
  1530                           
  1531                           ;main.c: 331: {
  1532                           ;main.c: 332: reChrgCount = 0;
  1533  0048  01C2               	clrf	_reChrgCount
  1534                           
  1535                           ;main.c: 333: chrgFullFlag = 0;
  1536  0049  01D1               	clrf	_chrgFullFlag
  1537                           
  1538                           ;main.c: 334: protectFlag = 0;
  1539  004A  01CE               	clrf	_protectFlag
  1540                           
  1541                           ;main.c: 335: if(prePwStep > 14)
  1542  004B  0277               	subwf	_prePwStep,w
  1543  004C  1C03               	skipc
  1544  004D  2855               	goto	l3169
  1545                           
  1546                           ;main.c: 336: {
  1547                           ;main.c: 337: lockLedStep = (prePwStep/14) - 1;
  1548  004E  300E               	movlw	14
  1549  004F  00F3               	movwf	___lbdiv@divisor
  1550  0050  0877               	movf	_prePwStep,w
  1551  0051  2552               	fcall	___lbdiv
  1552  0052  3EFF               	addlw	255
  1553  0053  00C1               	movwf	_lockLedStep
  1554                           
  1555                           ;main.c: 338: }
  1556  0054  0008               	return
  1557  0055                     l3169:	
  1558                           
  1559                           ;main.c: 339: else
  1560                           ;main.c: 340: {
  1561                           ;main.c: 341: lockLedStep = 0;
  1562  0055  01C1               	clrf	_lockLedStep
  1563  0056  0008               	return
  1564  0057                     l3171:	
  1565                           
  1566                           ;main.c: 345: else
  1567                           ;main.c: 346: {
  1568                           ;main.c: 347: reChrgCount = 0;
  1569  0057  01C2               	clrf	_reChrgCount
  1570  0058  0008               	return
  1571  0059                     l3175:	
  1572                           
  1573                           ;main.c: 350: }
  1574                           ;main.c: 351: if(batADValue < 1118)
  1575  0059  3004               	movlw	4
  1576  005A  022B               	subwf	_batADValue+1,w
  1577  005B  305E               	movlw	94
  1578  005C  1903               	skipnz
  1579  005D  022A               	subwf	_batADValue,w
  1580  005E  1803               	skipnc
  1581  005F  2863               	goto	l3181
  1582  0060  300F               	movlw	15
  1583                           
  1584                           ;main.c: 352: {
  1585                           ;main.c: 353: chrgMode = 0;
  1586  0061  01BF               	clrf	_chrgMode
  1587                           
  1588                           ;main.c: 354: chrgMaxAD = 15;
  1589  0062  287C               	goto	L4
  1590  0063                     l3181:	
  1591                           ;main.c: 355: }
  1592                           
  1593                           
  1594                           ;main.c: 356: else if(batADValue < 1530)
  1595  0063  3005               	movlw	5
  1596  0064  022B               	subwf	_batADValue+1,w
  1597  0065  30FA               	movlw	250
  1598  0066  1903               	skipnz
  1599  0067  022A               	subwf	_batADValue,w
  1600  0068  1803               	skipnc
  1601  0069  2870               	goto	l3189
  1602  006A  3028               	movlw	40
  1603                           
  1604                           ;main.c: 357: {
  1605                           ;main.c: 358: chrgMode = 1;
  1606  006B  01BF               	clrf	_chrgMode
  1607  006C  0ABF               	incf	_chrgMode,f
  1608                           
  1609                           ;main.c: 359: chrgMaxAD = 40;
  1610  006D  00BE               	movwf	_chrgMaxAD
  1611                           
  1612                           ;main.c: 360: lockCount = 0;
  1613  006E  01BD               	clrf	_lockCount
  1614                           
  1615                           ;main.c: 361: }
  1616  006F  287D               	goto	l3199
  1617  0070                     l3189:	
  1618                           
  1619                           ;main.c: 362: else if(count1s == 0)
  1620  0070  0853               	movf	_count1s,w
  1621  0071  1D03               	btfss	3,2
  1622  0072  287D               	goto	l3199
  1623                           
  1624                           ;main.c: 363: {
  1625                           ;main.c: 364: if(++lockCount > 200)
  1626  0073  30C9               	movlw	201
  1627  0074  0ABD               	incf	_lockCount,f
  1628  0075  023D               	subwf	_lockCount,w
  1629  0076  1C03               	skipc
  1630  0077  287B               	goto	l3197
  1631  0078  3002               	movlw	2
  1632                           
  1633                           ;main.c: 365: {
  1634                           ;main.c: 366: lockCount = 0;
  1635  0079  01BD               	clrf	_lockCount
  1636                           
  1637                           ;main.c: 367: chrgMode = 2;
  1638  007A  00BF               	movwf	_chrgMode
  1639  007B                     l3197:	
  1640                           
  1641                           ;main.c: 368: }
  1642                           ;main.c: 370: chrgMaxAD = 40;
  1643  007B  3028               	movlw	40
  1644  007C                     L4:	
  1645  007C  00BE               	movwf	_chrgMaxAD
  1646  007D                     l3199:	
  1647                           
  1648                           ;main.c: 371: }
  1649                           ;main.c: 372: if(chrgMode == 2 && outADValue < 5)
  1650  007D  3002               	movlw	2
  1651  007E  063F               	xorwf	_chrgMode,w
  1652  007F  1D03               	btfss	3,2
  1653  0080  2897               	goto	l3209
  1654  0081  3000               	movlw	0
  1655  0082  022D               	subwf	_outADValue+1,w
  1656  0083  3005               	movlw	5
  1657  0084  1903               	skipnz
  1658  0085  022C               	subwf	_outADValue,w
  1659  0086  1803               	skipnc
  1660  0087  2897               	goto	l3209
  1661                           
  1662                           ;main.c: 373: {
  1663                           ;main.c: 374: if(++fullCount >= 200)
  1664  0088  0AA6               	incf	_fullCount,f
  1665  0089  1903               	skipnz
  1666  008A  0AA7               	incf	_fullCount+1,f
  1667  008B  3000               	movlw	0
  1668  008C  0227               	subwf	_fullCount+1,w
  1669  008D  30C8               	movlw	200
  1670  008E  1903               	skipnz
  1671  008F  0226               	subwf	_fullCount,w
  1672  0090  1C03               	skipc
  1673  0091  2899               	goto	l3211
  1674                           
  1675                           ;main.c: 375: {
  1676                           ;main.c: 376: fullCount = 0;
  1677  0092  01A6               	clrf	_fullCount
  1678  0093  01A7               	clrf	_fullCount+1
  1679                           
  1680                           ;main.c: 377: chrgFullFlag = 1;
  1681  0094  01D1               	clrf	_chrgFullFlag
  1682  0095  0AD1               	incf	_chrgFullFlag,f
  1683  0096  2899               	goto	l3211
  1684  0097                     l3209:	
  1685                           
  1686                           ;main.c: 380: else
  1687                           ;main.c: 381: {
  1688                           ;main.c: 382: fullCount = 0;
  1689  0097  01A6               	clrf	_fullCount
  1690  0098  01A7               	clrf	_fullCount+1
  1691  0099                     l3211:	
  1692                           
  1693                           ;main.c: 383: }
  1694                           ;main.c: 384: if(chrgFullFlag)
  1695  0099  0851               	movf	_chrgFullFlag,w
  1696  009A  1903               	btfsc	3,2
  1697  009B  289F               	goto	l3217
  1698                           
  1699                           ;main.c: 385: {
  1700                           ;main.c: 386: lockLedStep = 6;
  1701  009C  3006               	movlw	6
  1702  009D  00C1               	movwf	_lockLedStep
  1703                           
  1704                           ;main.c: 387: chrgPwmStop();
  1705  009E  2D9A               	ljmp	l2125
  1706  009F                     l3217:	
  1707                           ;main.c: 388: }
  1708                           
  1709                           
  1710                           ;main.c: 389: else
  1711                           ;main.c: 390: {
  1712                           ;main.c: 391: if(prePwStep < 15)
  1713  009F  300F               	movlw	15
  1714  00A0  0277               	subwf	_prePwStep,w
  1715  00A1  1803               	skipnc
  1716  00A2  28A5               	goto	l3221
  1717                           
  1718                           ;main.c: 392: {
  1719                           ;main.c: 393: lockLedStep = 0;
  1720  00A3  01C1               	clrf	_lockLedStep
  1721                           
  1722                           ;main.c: 394: }
  1723  00A4  28AB               	goto	l3223
  1724  00A5                     l3221:	
  1725                           
  1726                           ;main.c: 395: else
  1727                           ;main.c: 396: {
  1728                           ;main.c: 397: lockLedStep = (prePwStep/14) - 1;
  1729  00A5  300E               	movlw	14
  1730  00A6  00F3               	movwf	___lbdiv@divisor
  1731  00A7  0877               	movf	_prePwStep,w
  1732  00A8  2552               	fcall	___lbdiv
  1733  00A9  3EFF               	addlw	255
  1734  00AA  00C1               	movwf	_lockLedStep
  1735  00AB                     l3223:	
  1736                           
  1737                           ;main.c: 398: }
  1738                           ;main.c: 399: if(batADValue > 1545 || outADValue > (chrgMaxAD + 2))
  1739  00AB  3006               	movlw	6
  1740  00AC  022B               	subwf	_batADValue+1,w
  1741  00AD  300A               	movlw	10
  1742  00AE  1903               	skipnz
  1743  00AF  022A               	subwf	_batADValue,w
  1744  00B0  1803               	skipnc
  1745  00B1  28C1               	goto	l3227
  1746  00B2  083E               	movf	_chrgMaxAD,w
  1747  00B3  3E02               	addlw	2
  1748  00B4  00D6               	movwf	??_chrgCtr
  1749  00B5  3000               	movlw	0
  1750  00B6  1803               	skipnc
  1751  00B7  3001               	movlw	1
  1752  00B8  00D7               	movwf	??_chrgCtr+1
  1753  00B9  082D               	movf	_outADValue+1,w
  1754  00BA  0257               	subwf	??_chrgCtr+1,w
  1755  00BB  1D03               	skipz
  1756  00BC  28BF               	goto	u3555
  1757  00BD  082C               	movf	_outADValue,w
  1758  00BE  0256               	subwf	??_chrgCtr,w
  1759  00BF                     u3555:	
  1760  00BF  1803               	skipnc
  1761  00C0  28D0               	goto	l3239
  1762  00C1                     l3227:	
  1763                           
  1764                           ;main.c: 400: {
  1765                           ;main.c: 401: if(++subTime > chrgWaitTime)
  1766  00C1  0ABB               	incf	_subTime,f
  1767  00C2  083B               	movf	_subTime,w
  1768  00C3  023A               	subwf	_chrgWaitTime,w
  1769  00C4  1803               	skipnc
  1770  00C5  28CE               	goto	l3237
  1771                           
  1772                           ;main.c: 402: {
  1773                           ;main.c: 403: if(chrgMaxDuty > 1)
  1774  00C6  3002               	movlw	2
  1775  00C7  0239               	subwf	_chrgMaxDuty,w
  1776  00C8  1C03               	skipc
  1777  00C9  28CB               	goto	l3233
  1778                           
  1779                           ;main.c: 404: {
  1780                           ;main.c: 405: chrgMaxDuty--;
  1781  00CA  03B9               	decf	_chrgMaxDuty,f
  1782  00CB                     l3233:	
  1783  00CB  3032               	movlw	50
  1784                           
  1785                           ;main.c: 406: }
  1786                           ;main.c: 407: subTime = 0;
  1787  00CC  01BB               	clrf	_subTime
  1788                           
  1789                           ;main.c: 408: chrgWaitTime = 50;
  1790  00CD  00BA               	movwf	_chrgWaitTime
  1791  00CE                     l3237:	
  1792                           
  1793                           ;main.c: 409: }
  1794                           ;main.c: 410: addTime = 0;
  1795  00CE  01BC               	clrf	_addTime
  1796                           
  1797                           ;main.c: 411: }
  1798  00CF  28F0               	goto	l3253
  1799  00D0                     l3239:	
  1800                           
  1801                           ;main.c: 412: else if(batADValue < 1545 && outADValue < (chrgMaxAD - 4))
  1802  00D0  3006               	movlw	6
  1803  00D1  022B               	subwf	_batADValue+1,w
  1804  00D2  3009               	movlw	9
  1805  00D3  1903               	skipnz
  1806  00D4  022A               	subwf	_batADValue,w
  1807  00D5  1803               	skipnc
  1808  00D6  28F0               	goto	l3253
  1809  00D7  083E               	movf	_chrgMaxAD,w
  1810  00D8  3EFC               	addlw	252
  1811  00D9  00D6               	movwf	??_chrgCtr
  1812  00DA  30FF               	movlw	255
  1813  00DB  1803               	skipnc
  1814  00DC  3000               	movlw	0
  1815  00DD  00D7               	movwf	??_chrgCtr+1
  1816  00DE  022D               	subwf	_outADValue+1,w
  1817  00DF  1D03               	skipz
  1818  00E0  28E3               	goto	u3595
  1819  00E1  0856               	movf	??_chrgCtr,w
  1820  00E2  022C               	subwf	_outADValue,w
  1821  00E3                     u3595:	
  1822  00E3  1803               	skipnc
  1823  00E4  28F0               	goto	l3253
  1824                           
  1825                           ;main.c: 413: {
  1826                           ;main.c: 414: if(++addTime > chrgWaitTime)
  1827  00E5  0ABC               	incf	_addTime,f
  1828  00E6  083C               	movf	_addTime,w
  1829  00E7  023A               	subwf	_chrgWaitTime,w
  1830  00E8  1803               	skipnc
  1831  00E9  28EF               	goto	l3251
  1832  00EA  304B               	movlw	75
  1833                           
  1834                           ;main.c: 415: {
  1835                           ;main.c: 416: addTime = 0;
  1836  00EB  01BC               	clrf	_addTime
  1837                           
  1838                           ;main.c: 417: if(chrgMaxDuty < 75)
  1839  00EC  0239               	subwf	_chrgMaxDuty,w
  1840  00ED  1C03               	btfss	3,0
  1841                           
  1842                           ;main.c: 418: {
  1843                           ;main.c: 419: chrgMaxDuty++;
  1844  00EE  0AB9               	incf	_chrgMaxDuty,f
  1845  00EF                     l3251:	
  1846                           
  1847                           ;main.c: 420: }
  1848                           ;main.c: 421: }
  1849                           ;main.c: 422: subTime = 0;
  1850  00EF  01BB               	clrf	_subTime
  1851  00F0                     l3253:	
  1852                           
  1853                           ;main.c: 423: }
  1854                           ;main.c: 426: if((PWMCON0 & 0x01) == 0)
  1855  00F0  1815               	btfsc	21,0	;volatile
  1856  00F1  28F3               	goto	l3257
  1857                           
  1858                           ;main.c: 427: {
  1859                           ;main.c: 428: chrgPwmInit();
  1860  00F2  256D               	fcall	_chrgPwmInit
  1861  00F3                     l3257:	
  1862                           
  1863                           ;main.c: 429: }
  1864                           ;main.c: 430: PWMD01H = 0X00;
  1865  00F3  019E               	clrf	30	;volatile
  1866                           
  1867                           ;main.c: 431: PWMD0L = chrgMaxDuty;
  1868  00F4  0839               	movf	_chrgMaxDuty,w
  1869  00F5  0099               	movwf	25	;volatile
  1870  00F6  0008               	return
  1871  00F7                     l3261:	
  1872  00F7  3014               	movlw	20
  1873                           
  1874                           ;main.c: 437: chrgFlag = 0;
  1875  00F8  01FA               	clrf	_chrgFlag
  1876                           
  1877                           ;main.c: 438: chrgFullFlag = 0;
  1878  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  1879  00FA  01D1               	clrf	_chrgFullFlag
  1880                           
  1881                           ;main.c: 439: protectFlag = 0;
  1882  00FB  01CE               	clrf	_protectFlag
  1883                           
  1884                           ;main.c: 440: chrgMode = 0;
  1885  00FC  01BF               	clrf	_chrgMode
  1886                           
  1887                           ;main.c: 441: chrgMaxAD = 0;
  1888  00FD  01BE               	clrf	_chrgMaxAD
  1889                           
  1890                           ;main.c: 442: chrgMaxDuty = 0;
  1891  00FE  01B9               	clrf	_chrgMaxDuty
  1892                           
  1893                           ;main.c: 443: lockCount = 0;
  1894  00FF  01BD               	clrf	_lockCount
  1895                           
  1896                           ;main.c: 444: lockLedStep = 0;
  1897  0100  01C1               	clrf	_lockLedStep
  1898                           
  1899                           ;main.c: 445: chrgWaitTime = 20;
  1900  0101  00BA               	movwf	_chrgWaitTime
  1901                           
  1902                           ;main.c: 446: chrgPwmStop();
  1903  0102  259A               	fcall	_chrgPwmStop
  1904                           
  1905                           ;main.c: 447: if(prePwStep > 0 && prePwStep > pwStep)
  1906  0103  0877               	movf	_prePwStep,w
  1907  0104  1903               	btfsc	3,2
  1908  0105  2913               	goto	l3277
  1909  0106  0877               	movf	_prePwStep,w
  1910  0107  0243               	subwf	_pwStep,w
  1911  0108  1803               	skipnc
  1912  0109  2913               	goto	l3277
  1913                           
  1914                           ;main.c: 448: {
  1915                           ;main.c: 449: if(++count50s > 2000)
  1916  010A  2116               	fcall	PL6	;call to abstracted procedure
  1917  010B  1903               	skipnz
  1918  010C  0228               	subwf	_count50s,w
  1919  010D  1C03               	skipc
  1920  010E  0008               	return
  1921                           
  1922                           ;main.c: 450: {
  1923                           ;main.c: 451: count50s = 0;
  1924  010F  01A8               	clrf	_count50s
  1925  0110  01A9               	clrf	_count50s+1
  1926                           
  1927                           ;main.c: 452: prePwStep--;
  1928  0111  03F7               	decf	_prePwStep,f
  1929  0112  0008               	return
  1930  0113                     l3277:	
  1931                           
  1932                           ;main.c: 455: else
  1933                           ;main.c: 456: {
  1934                           ;main.c: 457: count50s = 0;
  1935  0113  01A8               	clrf	_count50s
  1936  0114  01A9               	clrf	_count50s+1
  1937  0115  0008               	return
  1938  0116                     __end_of_chrgCtr:	
  1939  0116                     PL6:	
  1940  0116  0AA8               	incf	_count50s,f
  1941  0117  1903               	skipnz
  1942  0118  0AA9               	incf	_count50s+1,f
  1943  0119  3007               	movlw	7
  1944  011A  0229               	subwf	_count50s+1,w
  1945  011B  34D1               	retlw	209
  1946  011C                     __end_ofPL6:	
  1947                           
  1948                           	psect	text9
  1949  059A                     __ptext9:	
  1950 ;; *************** function _chrgPwmStop *****************
  1951 ;; Defined at:
  1952 ;;		line 899 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;		None
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;		None
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      void 
  1959 ;; Registers used:
  1960 ;;		None
  1961 ;; Tracked objects:
  1962 ;;		On entry : 100/0
  1963 ;;		On exit  : 100/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMMON   BANK0   BANK1
  1966 ;;      Params:         0       0       0
  1967 ;;      Locals:         0       0       0
  1968 ;;      Temps:          0       0       0
  1969 ;;      Totals:         0       0       0
  1970 ;;Total ram usage:        0 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    2
  1973 ;; This function calls:
  1974 ;;		Nothing
  1975 ;; This function is called by:
  1976 ;;		_chrgCtr
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           
  1981                           ;psect for function _chrgPwmStop
  1982  059A                     _chrgPwmStop:	
  1983  059A                     l2125:	
  1984                           ;incstack = 0
  1985                           ; Regs used in _chrgPwmStop: []
  1986                           
  1987                           
  1988                           ;main.c: 901: PWMCON0 &= 0xFE;
  1989  059A  1015               	bcf	21,0	;volatile
  1990                           
  1991                           ;main.c: 902: RB0 = 0;
  1992  059B  1006               	bcf	6,0	;volatile
  1993  059C  0008               	return
  1994  059D                     __end_of_chrgPwmStop:	
  1995                           
  1996                           	psect	text10
  1997  056D                     __ptext10:	
  1998 ;; *************** function _chrgPwmInit *****************
  1999 ;; Defined at:
  2000 ;;		line 882 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;		None
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;		None
  2005 ;; Return value:  Size  Location     Type
  2006 ;;                  1    wreg      void 
  2007 ;; Registers used:
  2008 ;;		wreg, status,2
  2009 ;; Tracked objects:
  2010 ;;		On entry : 100/0
  2011 ;;		On exit  : 100/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMMON   BANK0   BANK1
  2014 ;;      Params:         0       0       0
  2015 ;;      Locals:         0       0       0
  2016 ;;      Temps:          0       0       0
  2017 ;;      Totals:         0       0       0
  2018 ;;Total ram usage:        0 bytes
  2019 ;; Hardware stack levels used:    1
  2020 ;; Hardware stack levels required when called:    2
  2021 ;; This function calls:
  2022 ;;		Nothing
  2023 ;; This function is called by:
  2024 ;;		_chrgCtr
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           
  2029                           ;psect for function _chrgPwmInit
  2030  056D                     _chrgPwmInit:	
  2031                           
  2032                           ;main.c: 884: PWMCON1 = 0B00000000;
  2033                           
  2034                           ;incstack = 0
  2035                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2036                           
  2037                           ;main.c: 886: PWMTH = 0X00;
  2038                           
  2039                           ;main.c: 887: PWMTL = 100;
  2040                           
  2041                           ;main.c: 891: PWMD01H = 0;
  2042  056D  2574               	fcall	PL8	;call to abstracted procedure
  2043                           
  2044                           ;main.c: 892: PWMD0L = 1;
  2045  056E  3001               	movlw	1
  2046  056F  0099               	movwf	25	;volatile
  2047                           
  2048                           ;main.c: 893: PWM01DT = 0X00;
  2049  0570  019F               	clrf	31	;volatile
  2050                           
  2051                           ;main.c: 895: PWMCON0 = 0X01;
  2052  0571  0095               	movwf	21	;volatile
  2053                           
  2054                           ;main.c: 896: PWMCON2 =0X00;
  2055  0572  019D               	clrf	29	;volatile
  2056  0573  0008               	return
  2057  0574                     __end_of_chrgPwmInit:	
  2058  0574                     PL8:	
  2059  0574  0196               	clrf	22	;volatile
  2060  0575  0198               	clrf	24	;volatile
  2061  0576  3064               	movlw	100
  2062  0577  0097               	movwf	23	;volatile
  2063  0578  019E               	clrf	30	;volatile
  2064  0579  0008               	return
  2065  057A                     __end_ofPL8:	
  2066                           
  2067                           	psect	text11
  2068  0552                     __ptext11:	
  2069 ;; *************** function ___lbdiv *****************
  2070 ;; Defined at:
  2071 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;  dividend        1    wreg     unsigned char 
  2074 ;;  divisor         1    3[COMMON] unsigned char 
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  dividend        1    4[COMMON] unsigned char 
  2077 ;;  quotient        1    6[COMMON] unsigned char 
  2078 ;;  counter         1    5[COMMON] unsigned char 
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  1    wreg      unsigned char 
  2081 ;; Registers used:
  2082 ;;		wreg, status,2, status,0
  2083 ;; Tracked objects:
  2084 ;;		On entry : 100/0
  2085 ;;		On exit  : 100/0
  2086 ;;		Unchanged: 100/0
  2087 ;; Data sizes:     COMMON   BANK0   BANK1
  2088 ;;      Params:         1       0       0
  2089 ;;      Locals:         3       0       0
  2090 ;;      Temps:          0       0       0
  2091 ;;      Totals:         4       0       0
  2092 ;;Total ram usage:        4 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    2
  2095 ;; This function calls:
  2096 ;;		Nothing
  2097 ;; This function is called by:
  2098 ;;		_ledCtr
  2099 ;;		_chrgCtr
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           
  2104                           ;psect for function ___lbdiv
  2105  0552                     ___lbdiv:	
  2106                           
  2107                           ;incstack = 0
  2108                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2109                           ;___lbdiv@dividend stored from wreg
  2110  0552  00F4               	movwf	___lbdiv@dividend
  2111  0553  01F6               	clrf	___lbdiv@quotient
  2112  0554  0873               	movf	___lbdiv@divisor,w
  2113  0555  1903               	btfsc	3,2
  2114  0556  2D6B               	goto	l2281
  2115  0557  01F5               	clrf	___lbdiv@counter
  2116  0558                     l2267:	
  2117  0558  0AF5               	incf	___lbdiv@counter,f
  2118  0559  1BF3               	btfsc	___lbdiv@divisor,7
  2119  055A  2D5E               	goto	l1157
  2120  055B  1003               	clrc
  2121  055C  0DF3               	rlf	___lbdiv@divisor,f
  2122  055D  2D58               	goto	l2267
  2123  055E                     l1157:	
  2124  055E  1003               	clrc
  2125  055F  0DF6               	rlf	___lbdiv@quotient,f
  2126  0560  0873               	movf	___lbdiv@divisor,w
  2127  0561  0274               	subwf	___lbdiv@dividend,w
  2128  0562  1C03               	skipc
  2129  0563  2D68               	goto	L5
  2130  0564  0873               	movf	___lbdiv@divisor,w
  2131  0565  02F4               	subwf	___lbdiv@dividend,f
  2132  0566  1476               	bsf	___lbdiv@quotient,0
  2133  0567  1003               	clrc
  2134  0568                     L5:	
  2135  0568  0CF3               	rrf	___lbdiv@divisor,f
  2136  0569  0BF5               	decfsz	___lbdiv@counter,f
  2137  056A  2D5E               	goto	l1157
  2138  056B                     l2281:	
  2139  056B  0876               	movf	___lbdiv@quotient,w
  2140  056C  0008               	return
  2141  056D                     __end_of___lbdiv:	
  2142                           
  2143                           	psect	text12
  2144  0205                     __ptext12:	
  2145 ;; *************** function _checkOutA *****************
  2146 ;; Defined at:
  2147 ;;		line 575 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;		None
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;  maxAout         1   18[BANK0 ] unsigned char 
  2152 ;;  maxtempV        1    0        unsigned char 
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  1    wreg      void 
  2155 ;; Registers used:
  2156 ;;		wreg, status,2, status,0, pclath, cstack
  2157 ;; Tracked objects:
  2158 ;;		On entry : 100/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMMON   BANK0   BANK1
  2162 ;;      Params:         0       0       0
  2163 ;;      Locals:         0       2       0
  2164 ;;      Temps:          2       0       0
  2165 ;;      Totals:         2       2       0
  2166 ;;Total ram usage:        4 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    3
  2169 ;; This function calls:
  2170 ;;		_ADC_Sample
  2171 ;; This function is called by:
  2172 ;;		_main
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           
  2177                           ;psect for function _checkOutA
  2178  0205                     _checkOutA:	
  2179                           
  2180                           ;main.c: 577: if(chrgFlag)
  2181                           
  2182                           ;incstack = 0
  2183                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2184  0205  087A               	movf	_chrgFlag,w
  2185                           
  2186                           ;main.c: 578: {
  2187                           ;main.c: 579: test_adc = ADC_Sample(4, 5);
  2188  0206  3005               	movlw	5
  2189  0207  00F3               	movwf	ADC_Sample@adldo
  2190  0208  1903               	btfsc	3,2
  2191  0209  2A0C               	goto	L14
  2192  020A  3004               	movlw	4
  2193  020B  2A0D               	goto	L7
  2194  020C                     L14:	
  2195                           ;main.c: 581: else
  2196                           ;main.c: 582: {
  2197                           ;main.c: 583: test_adc = ADC_Sample(0, 5);
  2198                           
  2199                           ;main.c: 580: }
  2200                           
  2201  020C  3000               	movlw	0
  2202  020D                     L7:	
  2203  020D  211C               	fcall	_ADC_Sample
  2204  020E  00D5               	movwf	_test_adc	;volatile
  2205                           
  2206                           ;main.c: 584: }
  2207                           ;main.c: 585: if (0xA5 == test_adc)
  2208  020F  30A5               	movlw	165
  2209  0210  0655               	xorwf	_test_adc,w	;volatile
  2210  0211  1D03               	btfss	3,2
  2211  0212  2AAD               	goto	l3123
  2212                           
  2213                           ;main.c: 586: {
  2214                           ;main.c: 587: if(chrgFlag && adresult > 210)
  2215  0213  087A               	movf	_chrgFlag,w
  2216  0214  1903               	btfsc	3,2
  2217  0215  2A26               	goto	l3041
  2218  0216  3000               	movlw	0
  2219  0217  0233               	subwf	_adresult+1,w	;volatile
  2220  0218  30D3               	movlw	211
  2221  0219  1903               	skipnz
  2222  021A  0232               	subwf	_adresult,w	;volatile
  2223  021B  1C03               	skipc
  2224  021C  2A26               	goto	l3041
  2225                           
  2226                           ;main.c: 588: {
  2227                           ;main.c: 589: if(++overChrgTime > 10)
  2228  021D  300B               	movlw	11
  2229  021E  0AC4               	incf	_overChrgTime,f
  2230  021F  0244               	subwf	_overChrgTime,w
  2231  0220  1C03               	skipc
  2232  0221  2A27               	goto	l3043
  2233  0222  3002               	movlw	2
  2234                           
  2235                           ;main.c: 590: {
  2236                           ;main.c: 591: overChrgTime = 0;
  2237  0223  01C4               	clrf	_overChrgTime
  2238                           
  2239                           ;main.c: 592: protectFlag = 2;
  2240  0224  00CE               	movwf	_protectFlag
  2241  0225  2A27               	goto	l3043
  2242  0226                     l3041:	
  2243                           
  2244                           ;main.c: 596: else
  2245                           ;main.c: 597: {
  2246                           ;main.c: 598: overChrgTime = 0;
  2247  0226  01C4               	clrf	_overChrgTime
  2248  0227                     l3043:	
  2249                           
  2250                           ;main.c: 599: }
  2251                           ;main.c: 600: outADValue = adresult;
  2252  0227  0833               	movf	_adresult+1,w	;volatile
  2253  0228  00AD               	movwf	_outADValue+1
  2254  0229  0832               	movf	_adresult,w	;volatile
  2255  022A  00AC               	movwf	_outADValue
  2256                           
  2257                           ;main.c: 602: if(workStep && (outADValue > 220))
  2258  022B  0879               	movf	_workStep,w
  2259  022C  1903               	btfsc	3,2
  2260  022D  2A3D               	goto	l3053
  2261  022E  3000               	movlw	0
  2262  022F  022D               	subwf	_outADValue+1,w
  2263  0230  30DD               	movlw	221
  2264  0231  1903               	skipnz
  2265  0232  022C               	subwf	_outADValue,w
  2266  0233  1C03               	skipc
  2267  0234  2A3D               	goto	l3053
  2268                           
  2269                           ;main.c: 603: {
  2270                           ;main.c: 604: if(++workOverOutTime > 50)
  2271  0235  3033               	movlw	51
  2272  0236  0ACD               	incf	_workOverOutTime,f
  2273  0237  024D               	subwf	_workOverOutTime,w
  2274  0238  1C03               	skipc
  2275  0239  2A3E               	goto	l3057
  2276                           
  2277                           ;main.c: 605: {
  2278                           ;main.c: 606: workOverOutTime = 0;
  2279  023A  01CD               	clrf	_workOverOutTime
  2280                           
  2281                           ;main.c: 607: workStep = 0;
  2282  023B  01F9               	clrf	_workStep
  2283  023C  2A3E               	goto	l3057
  2284  023D                     l3053:	
  2285                           
  2286                           ;main.c: 610: else
  2287                           ;main.c: 611: {
  2288                           ;main.c: 612: workOverOutTime = 0;
  2289  023D  01CD               	clrf	_workOverOutTime
  2290  023E                     l3057:	
  2291                           
  2292                           ;main.c: 615: if(workStep < 6 && outADValue > maxtempV)
  2293  023E  3006               	movlw	6
  2294  023F  0279               	subwf	_workStep,w
  2295  0240  3000               	movlw	0
  2296  0241  1803               	skipnc
  2297  0242  2A52               	goto	L15
  2298  0243  022D               	subwf	_outADValue+1,w
  2299  0244  3029               	movlw	41
  2300  0245  1903               	skipnz
  2301  0246  022C               	subwf	_outADValue,w
  2302  0247  1C03               	skipc
  2303  0248  2A51               	goto	l3065
  2304  0249                     l3061:	
  2305                           
  2306                           ;main.c: 616: {
  2307                           ;main.c: 617: if(++overCount > 5)
  2308  0249  3006               	movlw	6
  2309  024A  0AC8               	incf	_overCount,f
  2310  024B  0248               	subwf	_overCount,w
  2311  024C  1C03               	skipc
  2312  024D  2AA9               	goto	l3119
  2313                           
  2314                           ;main.c: 618: {
  2315                           ;main.c: 619: overCount = 5;
  2316  024E  3005               	movlw	5
  2317  024F  00C8               	movwf	_overCount
  2318  0250  2AA9               	goto	l3119
  2319  0251                     l3065:	
  2320                           
  2321                           ;main.c: 622: else if(outADValue > (maxtempV+3))
  2322  0251  3000               	movlw	0
  2323  0252                     L15:	
  2324  0252  022D               	subwf	_outADValue+1,w
  2325  0253  302C               	movlw	44
  2326  0254  1903               	skipnz
  2327  0255  022C               	subwf	_outADValue,w
  2328  0256  1803               	btfsc	3,0
  2329  0257  2A49               	goto	l3061
  2330                           
  2331                           ;main.c: 629: else
  2332                           ;main.c: 630: {
  2333                           ;main.c: 631: unsigned char maxAout = 11;
  2334                           
  2335                           ;main.c: 623: {
  2336                           ;main.c: 624: if(++overCount > 5)
  2337  0258  300B               	movlw	11
  2338  0259  00E8               	movwf	checkOutA@maxAout
  2339                           
  2340                           ;main.c: 632: if(workStep == 1)
  2341  025A  0B79               	decfsz	_workStep,w
  2342  025B  2A5E               	goto	l3077
  2343                           
  2344                           ;main.c: 633: {
  2345                           ;main.c: 634: maxAout = maxAout + 5;
  2346  025C  3005               	movlw	5
  2347  025D  2A7B               	goto	L12
  2348  025E                     l3077:	
  2349                           ;main.c: 635: }
  2350                           
  2351                           
  2352                           ;main.c: 636: else if(workStep == 2)
  2353  025E  3002               	movlw	2
  2354  025F  0679               	xorwf	_workStep,w
  2355  0260  1D03               	btfss	3,2
  2356  0261  2A64               	goto	l3081
  2357                           
  2358                           ;main.c: 637: {
  2359                           ;main.c: 638: maxAout = maxAout + 6;
  2360  0262  3006               	movlw	6
  2361  0263  2A7B               	goto	L12
  2362  0264                     l3081:	
  2363                           ;main.c: 639: }
  2364                           
  2365                           
  2366                           ;main.c: 640: else if(workStep == 3)
  2367  0264  3003               	movlw	3
  2368  0265  0679               	xorwf	_workStep,w
  2369  0266  1D03               	btfss	3,2
  2370  0267  2A6A               	goto	l3085
  2371                           
  2372                           ;main.c: 641: {
  2373                           ;main.c: 642: maxAout = maxAout + 7;
  2374  0268  3007               	movlw	7
  2375  0269  2A7B               	goto	L12
  2376  026A                     l3085:	
  2377                           ;main.c: 643: }
  2378                           
  2379                           
  2380                           ;main.c: 644: else if(workStep == 4)
  2381  026A  3004               	movlw	4
  2382  026B  0679               	xorwf	_workStep,w
  2383  026C  1D03               	btfss	3,2
  2384  026D  2A70               	goto	l3089
  2385                           
  2386                           ;main.c: 645: {
  2387                           ;main.c: 646: maxAout = maxAout + 8;
  2388  026E  3008               	movlw	8
  2389  026F  2A7B               	goto	L12
  2390  0270                     l3089:	
  2391                           ;main.c: 647: }
  2392                           
  2393                           
  2394                           ;main.c: 648: else if(workStep == 5)
  2395  0270  3005               	movlw	5
  2396  0271  0679               	xorwf	_workStep,w
  2397  0272  1D03               	btfss	3,2
  2398  0273  2A76               	goto	l3093
  2399                           
  2400                           ;main.c: 649: {
  2401                           ;main.c: 650: maxAout = maxAout + 9;
  2402  0274  3009               	movlw	9
  2403  0275  2A7B               	goto	L12
  2404  0276                     l3093:	
  2405                           ;main.c: 651: }
  2406                           
  2407                           
  2408                           ;main.c: 652: else if(workStep == 6)
  2409  0276  3006               	movlw	6
  2410  0277  0679               	xorwf	_workStep,w
  2411  0278  1D03               	btfss	3,2
  2412  0279  2A7C               	goto	l808
  2413                           
  2414                           ;main.c: 653: {
  2415                           ;main.c: 654: maxAout = maxAout + 10;
  2416  027A  300A               	movlw	10
  2417  027B                     L12:	
  2418  027B  07E8               	addwf	checkOutA@maxAout,f
  2419  027C                     l808:	
  2420                           
  2421                           ;main.c: 655: }
  2422                           ;main.c: 656: if(overCount > 0)
  2423  027C  0848               	movf	_overCount,w
  2424  027D  1D03               	btfss	3,2
  2425                           
  2426                           ;main.c: 657: {
  2427                           ;main.c: 658: overCount--;
  2428  027E  03C8               	decf	_overCount,f
  2429                           
  2430                           ;main.c: 659: }
  2431                           ;main.c: 660: if(outADValue > maxAout)
  2432  027F  0868               	movf	checkOutA@maxAout,w
  2433  0280  00F4               	movwf	??_checkOutA
  2434  0281  01F5               	clrf	??_checkOutA+1
  2435  0282  082D               	movf	_outADValue+1,w
  2436  0283  0275               	subwf	??_checkOutA+1,w
  2437  0284  1D03               	skipz
  2438  0285  2A88               	goto	u3315
  2439  0286  082C               	movf	_outADValue,w
  2440  0287  0274               	subwf	??_checkOutA,w
  2441  0288                     u3315:	
  2442  0288  1803               	skipnc
  2443  0289  2AA3               	goto	l3111
  2444                           
  2445                           ;main.c: 661: {
  2446                           ;main.c: 662: if(++addPowerCount > 3)
  2447  028A  3004               	movlw	4
  2448  028B  0AC7               	incf	_addPowerCount,f
  2449  028C  0247               	subwf	_addPowerCount,w
  2450  028D  1C03               	skipc
  2451  028E  2AA9               	goto	l3119
  2452                           
  2453                           ;main.c: 663: {
  2454                           ;main.c: 664: addPowerCount = 3;
  2455  028F  3003               	movlw	3
  2456  0290  00C7               	movwf	_addPowerCount
  2457                           
  2458                           ;main.c: 665: if(startTime == 0)
  2459  0291  0845               	movf	_startTime,w
  2460  0292  1D03               	btfss	3,2
  2461  0293  2AA0               	goto	l3109
  2462                           
  2463                           ;main.c: 666: {
  2464                           ;main.c: 667: tempDuty = 72 + (workStep*4);
  2465  0294  0879               	movf	_workStep,w
  2466  0295  00F4               	movwf	??_checkOutA
  2467  0296  3001               	movlw	1
  2468  0297  1003               	clrc
  2469  0298                     L6:	
  2470  0298  0DF4               	rlf	??_checkOutA,f
  2471  0299  3EFF               	addlw	-1
  2472  029A  1003               	clrc
  2473  029B  1D03               	skipz
  2474  029C  2A98               	goto	L6
  2475  029D  0D74               	rlf	??_checkOutA,w
  2476  029E  3E48               	addlw	72
  2477  029F  2AA1               	goto	L13
  2478  02A0                     l3109:	
  2479                           ;main.c: 669: }
  2480                           
  2481                           
  2482                           ;main.c: 670: else
  2483                           ;main.c: 671: {
  2484                           ;main.c: 672: tempDuty = maxDuty;
  2485  02A0  0849               	movf	_maxDuty,w
  2486  02A1                     L13:	
  2487  02A1  00C6               	movwf	_tempDuty
  2488  02A2  2AA9               	goto	l3119
  2489  02A3                     l3111:	
  2490                           
  2491                           ;main.c: 677: else
  2492                           ;main.c: 678: {
  2493                           ;main.c: 679: addPowerCount = 0;
  2494  02A3  01C7               	clrf	_addPowerCount
  2495                           
  2496                           ;main.c: 680: if(tempDuty > maxDuty)
  2497  02A4  0846               	movf	_tempDuty,w
  2498  02A5  0249               	subwf	_maxDuty,w
  2499  02A6  1803               	skipnc
  2500  02A7  2AA0               	goto	l3109
  2501                           
  2502                           ;main.c: 681: {
  2503                           ;main.c: 682: tempDuty--;
  2504  02A8  03C6               	decf	_tempDuty,f
  2505  02A9                     l3119:	
  2506                           ;main.c: 683: }
  2507                           
  2508                           
  2509                           ;main.c: 687: }
  2510                           ;main.c: 689: }
  2511                           ;main.c: 691: }
  2512                           ;main.c: 692: PWMD01H = 0X00;
  2513  02A9  019E               	clrf	30	;volatile
  2514                           
  2515                           ;main.c: 693: PWMD1L = tempDuty;
  2516  02AA  0846               	movf	_tempDuty,w
  2517  02AB  009A               	movwf	26	;volatile
  2518                           
  2519                           ;main.c: 694: }
  2520  02AC  0008               	return
  2521  02AD                     l3123:	
  2522                           
  2523                           ;main.c: 695: else
  2524                           ;main.c: 696: {
  2525                           ;main.c: 697: ADCON0 = 0;
  2526  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  2527  02AE  0195               	clrf	21	;volatile
  2528                           
  2529                           ;main.c: 698: ADCON1 = 0;
  2530  02AF  0196               	clrf	22	;volatile
  2531                           
  2532                           ;main.c: 699: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2533  02B0  3085               	movlw	133
  2534  02B1  00F4               	movwf	??_checkOutA
  2535  02B2                     u4037:	
  2536  02B2  0BF4               	decfsz	??_checkOutA,f
  2537  02B3  2AB2               	goto	u4037
  2538  02B4  0008               	return
  2539  02B5                     __end_of_checkOutA:	
  2540                           
  2541                           	psect	text13
  2542  02B5                     __ptext13:	
  2543 ;; *************** function _checkBatAD *****************
  2544 ;; Defined at:
  2545 ;;		line 703 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;		None
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  1    wreg      void 
  2552 ;; Registers used:
  2553 ;;		wreg, status,2, status,0, pclath, cstack
  2554 ;; Tracked objects:
  2555 ;;		On entry : 100/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMMON   BANK0   BANK1
  2559 ;;      Params:         0       0       0
  2560 ;;      Locals:         0       0       0
  2561 ;;      Temps:          2       0       0
  2562 ;;      Totals:         2       0       0
  2563 ;;Total ram usage:        2 bytes
  2564 ;; Hardware stack levels used:    1
  2565 ;; Hardware stack levels required when called:    3
  2566 ;; This function calls:
  2567 ;;		_ADC_Sample
  2568 ;; This function is called by:
  2569 ;;		_main
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           
  2574                           ;psect for function _checkBatAD
  2575  02B5                     _checkBatAD:	
  2576                           
  2577                           ;main.c: 705: test_adc = ADC_Sample(2, 5);
  2578                           
  2579                           ;incstack = 0
  2580                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2581  02B5  3005               	movlw	5
  2582  02B6  00F3               	movwf	ADC_Sample@adldo
  2583  02B7  3002               	movlw	2
  2584  02B8  211C               	fcall	_ADC_Sample
  2585  02B9  00D5               	movwf	_test_adc	;volatile
  2586                           
  2587                           ;main.c: 706: if (0xA5 == test_adc)
  2588  02BA  30A5               	movlw	165
  2589  02BB  0655               	xorwf	_test_adc,w	;volatile
  2590  02BC  1D03               	btfss	3,2
  2591  02BD  2B1C               	goto	l3319
  2592                           
  2593                           ;main.c: 707: {
  2594                           ;main.c: 708: batADValue = adresult;
  2595  02BE  0833               	movf	_adresult+1,w	;volatile
  2596  02BF  00AB               	movwf	_batADValue+1
  2597  02C0  0832               	movf	_adresult,w	;volatile
  2598  02C1  00AA               	movwf	_batADValue
  2599                           
  2600                           ;main.c: 709: if(batADValue < 1117)
  2601  02C2  3004               	movlw	4
  2602  02C3  022B               	subwf	_batADValue+1,w
  2603  02C4  305D               	movlw	93
  2604  02C5  1903               	skipnz
  2605  02C6  022A               	subwf	_batADValue,w
  2606  02C7  1803               	skipnc
  2607  02C8  2AE2               	goto	l3301
  2608                           
  2609                           ;main.c: 710: {
  2610                           ;main.c: 711: pwStep = 0;
  2611  02C9  01C3               	clrf	_pwStep
  2612                           
  2613                           ;main.c: 712: if(++count8s > 800)
  2614  02CA  0AA2               	incf	_count8s,f
  2615  02CB  1903               	skipnz
  2616  02CC  0AA3               	incf	_count8s+1,f
  2617  02CD  3003               	movlw	3
  2618  02CE  0223               	subwf	_count8s+1,w
  2619  02CF  3021               	movlw	33
  2620  02D0  1903               	skipnz
  2621  02D1  0222               	subwf	_count8s,w
  2622  02D2  1C03               	skipc
  2623  02D3  2B0F               	goto	l3313
  2624                           
  2625                           ;main.c: 713: {
  2626                           ;main.c: 714: count8s = 0;
  2627  02D4  01A2               	clrf	_count8s
  2628  02D5  01A3               	clrf	_count8s+1
  2629                           
  2630                           ;main.c: 715: lowBatFlag = 1;
  2631  02D6  01B5               	clrf	_lowBatFlag
  2632  02D7  0AB5               	incf	_lowBatFlag,f
  2633                           
  2634                           ;main.c: 716: if(workStep > 0)
  2635  02D8  0879               	movf	_workStep,w
  2636  02D9  1903               	btfsc	3,2
  2637  02DA  2ADF               	goto	l3297
  2638                           
  2639                           ;main.c: 717: {
  2640                           ;main.c: 718: overWorkTime = 180;
  2641  02DB  30B4               	movlw	180
  2642  02DC  00B7               	movwf	_overWorkTime
  2643                           
  2644                           ;main.c: 719: preLedStep = workStep;
  2645  02DD  0879               	movf	_workStep,w
  2646  02DE  00B6               	movwf	_preLedStep
  2647  02DF                     l3297:	
  2648                           
  2649                           ;main.c: 720: }
  2650                           ;main.c: 721: prePwStep = 0;
  2651  02DF  01F7               	clrf	_prePwStep
  2652                           
  2653                           ;main.c: 722: workStep = 0;
  2654  02E0  01F9               	clrf	_workStep
  2655  02E1  2B0F               	goto	l3313
  2656  02E2                     l3301:	
  2657  02E2  3005               	movlw	5
  2658                           
  2659                           ;main.c: 725: else
  2660                           ;main.c: 726: {
  2661                           ;main.c: 727: count8s = 0;
  2662  02E3  01A2               	clrf	_count8s
  2663  02E4  01A3               	clrf	_count8s+1
  2664                           
  2665                           ;main.c: 728: if(batADValue >= 1340)
  2666  02E5  022B               	subwf	_batADValue+1,w
  2667  02E6  303C               	movlw	60
  2668  02E7  1903               	skipnz
  2669  02E8  022A               	subwf	_batADValue,w
  2670                           
  2671                           ;main.c: 729: {
  2672                           ;main.c: 730: pwStep = ((batADValue - 1340) /2) + 13;
  2673  02E9  082A               	movf	_batADValue,w
  2674  02EA  1C03               	skipc
  2675  02EB  2AF9               	goto	L17
  2676  02EC  3EC4               	addlw	196
  2677  02ED  00F4               	movwf	??_checkBatAD
  2678  02EE  082B               	movf	_batADValue+1,w
  2679  02EF  1803               	skipnc
  2680  02F0  3E01               	addlw	1
  2681  02F1  3EFA               	addlw	250
  2682  02F2  00F5               	movwf	??_checkBatAD+1
  2683  02F3  1003               	clrc
  2684  02F4  0CF5               	rrf	??_checkBatAD+1,f
  2685  02F5  0CF4               	rrf	??_checkBatAD,f
  2686  02F6  0874               	movf	??_checkBatAD,w
  2687  02F7  3E0D               	addlw	13
  2688  02F8  2B08               	goto	L16
  2689  02F9                     L17:	
  2690                           ;main.c: 732: else
  2691                           ;main.c: 733: {
  2692                           ;main.c: 734: pwStep = (batADValue - 1117) / 16;
  2693                           
  2694                           ;main.c: 731: }
  2695                           
  2696  02F9  3EA3               	addlw	163
  2697  02FA  00F4               	movwf	??_checkBatAD
  2698  02FB  082B               	movf	_batADValue+1,w
  2699  02FC  1803               	skipnc
  2700  02FD  3E01               	addlw	1
  2701  02FE  3EFB               	addlw	251
  2702  02FF  00F5               	movwf	??_checkBatAD+1
  2703  0300  3004               	movlw	4
  2704  0301                     u3715:	
  2705  0301  1003               	clrc
  2706  0302  0CF5               	rrf	??_checkBatAD+1,f
  2707  0303  0CF4               	rrf	??_checkBatAD,f
  2708  0304  3EFF               	addlw	-1
  2709  0305  1D03               	skipz
  2710  0306  2B01               	goto	u3715
  2711  0307  0874               	movf	??_checkBatAD,w
  2712  0308                     L16:	
  2713  0308  00C3               	movwf	_pwStep
  2714                           
  2715                           ;main.c: 735: }
  2716                           ;main.c: 736: if(pwStep > 99)
  2717  0309  3064               	movlw	100
  2718  030A  0243               	subwf	_pwStep,w
  2719  030B  1C03               	skipc
  2720  030C  2B0F               	goto	l3313
  2721                           
  2722                           ;main.c: 737: {
  2723                           ;main.c: 738: pwStep = 99;
  2724  030D  3063               	movlw	99
  2725  030E  00C3               	movwf	_pwStep
  2726  030F                     l3313:	
  2727                           
  2728                           ;main.c: 739: }
  2729                           ;main.c: 740: }
  2730                           ;main.c: 741: if(chrgFlag && batADValue > 1861)
  2731  030F  087A               	movf	_chrgFlag,w
  2732  0310  1903               	btfsc	3,2
  2733  0311  2B23               	goto	l3323
  2734  0312  3007               	movlw	7
  2735  0313  022B               	subwf	_batADValue+1,w
  2736  0314  3046               	movlw	70
  2737  0315  1903               	skipnz
  2738  0316  022A               	subwf	_batADValue,w
  2739  0317  1C03               	skipc
  2740  0318  2B23               	goto	l3323
  2741                           
  2742                           ;main.c: 742: {
  2743                           ;main.c: 743: protectFlag = 1;
  2744  0319  01CE               	clrf	_protectFlag
  2745  031A  0ACE               	incf	_protectFlag,f
  2746  031B  2B23               	goto	l3323
  2747  031C                     l3319:	
  2748                           
  2749                           ;main.c: 746: else
  2750                           ;main.c: 747: {
  2751                           ;main.c: 748: ADCON0 = 0;
  2752  031C  1683               	bsf	3,5	;RP0=1, select bank1
  2753  031D  0195               	clrf	21	;volatile
  2754                           
  2755                           ;main.c: 749: ADCON1 = 0;
  2756  031E  0196               	clrf	22	;volatile
  2757                           
  2758                           ;main.c: 750: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2759  031F  3085               	movlw	133
  2760  0320  00F4               	movwf	??_checkBatAD
  2761  0321                     u4047:	
  2762  0321  0BF4               	decfsz	??_checkBatAD,f
  2763  0322  2B21               	goto	u4047
  2764  0323                     l3323:	
  2765                           
  2766                           ;main.c: 751: }
  2767                           ;main.c: 752: test_adc = ADC_Sample(3, 5);
  2768  0323  3005               	movlw	5
  2769  0324  00F3               	movwf	ADC_Sample@adldo
  2770  0325  3003               	movlw	3
  2771  0326  211C               	fcall	_ADC_Sample
  2772  0327  00D5               	movwf	_test_adc	;volatile
  2773                           
  2774                           ;main.c: 753: if (0xA5 == test_adc)
  2775  0328  30A5               	movlw	165
  2776  0329  0655               	xorwf	_test_adc,w	;volatile
  2777  032A  1D03               	btfss	3,2
  2778  032B  2B57               	goto	l3343
  2779                           
  2780                           ;main.c: 754: {
  2781                           ;main.c: 755: if(chrgFlag && adresult > 100)
  2782  032C  087A               	movf	_chrgFlag,w
  2783  032D  1903               	btfsc	3,2
  2784  032E  0008               	return
  2785  032F  3000               	movlw	0
  2786  0330  0233               	subwf	_adresult+1,w	;volatile
  2787  0331  3065               	movlw	101
  2788  0332  1903               	skipnz
  2789  0333  0232               	subwf	_adresult,w	;volatile
  2790  0334  1C03               	skipc
  2791  0335  0008               	return
  2792                           
  2793                           ;main.c: 756: {
  2794                           ;main.c: 758: if(adresult > 810 || (batADValue - adresult) > 810)
  2795  0336  3003               	movlw	3
  2796  0337  0233               	subwf	_adresult+1,w	;volatile
  2797  0338  302B               	movlw	43
  2798  0339  1903               	skipnz
  2799  033A  0232               	subwf	_adresult,w	;volatile
  2800  033B  1803               	skipnc
  2801  033C  2B4C               	goto	l3335
  2802  033D  0832               	movf	_adresult,w	;volatile
  2803  033E  022A               	subwf	_batADValue,w
  2804  033F  00F4               	movwf	??_checkBatAD
  2805  0340  0833               	movf	_adresult+1,w	;volatile
  2806  0341  1C03               	skipc
  2807  0342  0A33               	incf	_adresult+1,w	;volatile
  2808  0343  022B               	subwf	_batADValue+1,w
  2809  0344  00F5               	movwf	??_checkBatAD+1
  2810  0345  3003               	movlw	3
  2811  0346  0275               	subwf	??_checkBatAD+1,w
  2812  0347  302B               	movlw	43
  2813  0348  1903               	skipnz
  2814  0349  0274               	subwf	??_checkBatAD,w
  2815  034A  1C03               	skipc
  2816  034B  2B55               	goto	l3341
  2817  034C                     l3335:	
  2818                           
  2819                           ;main.c: 759: {
  2820                           ;main.c: 761: if(++countHalfFull > 250)
  2821  034C  30FB               	movlw	251
  2822  034D  0ACF               	incf	_countHalfFull,f
  2823  034E  024F               	subwf	_countHalfFull,w
  2824  034F  1C03               	skipc
  2825  0350  0008               	return
  2826  0351  3002               	movlw	2
  2827                           
  2828                           ;main.c: 762: {
  2829                           ;main.c: 763: countHalfFull = 0;
  2830  0352  01CF               	clrf	_countHalfFull
  2831                           
  2832                           ;main.c: 764: protectFlag = 2;
  2833  0353  00CE               	movwf	_protectFlag
  2834  0354  0008               	return
  2835  0355                     l3341:	
  2836                           
  2837                           ;main.c: 767: else
  2838                           ;main.c: 768: {
  2839                           ;main.c: 769: countHalfFull = 0;
  2840  0355  01CF               	clrf	_countHalfFull
  2841                           
  2842                           ;main.c: 770: }
  2843                           ;main.c: 771: }
  2844                           ;main.c: 772: }
  2845  0356  0008               	return
  2846  0357                     l3343:	
  2847                           
  2848                           ;main.c: 773: else
  2849                           ;main.c: 774: {
  2850                           ;main.c: 775: ADCON0 = 0;
  2851  0357  1683               	bsf	3,5	;RP0=1, select bank1
  2852  0358  0195               	clrf	21	;volatile
  2853                           
  2854                           ;main.c: 776: ADCON1 = 0;
  2855  0359  0196               	clrf	22	;volatile
  2856                           
  2857                           ;main.c: 777: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2858  035A  3085               	movlw	133
  2859  035B  00F4               	movwf	??_checkBatAD
  2860  035C                     u4057:	
  2861  035C  0BF4               	decfsz	??_checkBatAD,f
  2862  035D  2B5C               	goto	u4057
  2863  035E  0008               	return
  2864  035F                     __end_of_checkBatAD:	
  2865                           
  2866                           	psect	text14
  2867  011C                     __ptext14:	
  2868 ;; *************** function _ADC_Sample *****************
  2869 ;; Defined at:
  2870 ;;		line 1010 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  2871 ;; Parameters:    Size  Location     Type
  2872 ;;  adch            1    wreg     unsigned char 
  2873 ;;  adldo           1    3[COMMON] unsigned char 
  2874 ;; Auto vars:     Size  Location     Type
  2875 ;;  adch            1    5[BANK0 ] unsigned char 
  2876 ;;  j               1    4[BANK0 ] unsigned char 
  2877 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  2878 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  2879 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  2880 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  2881 ;;  i               1    6[BANK0 ] unsigned char 
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  1    wreg      unsigned char 
  2884 ;; Registers used:
  2885 ;;		wreg, status,2, status,0
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 100/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMMON   BANK0   BANK1
  2891 ;;      Params:         1       0       0
  2892 ;;      Locals:         0      13       0
  2893 ;;      Temps:          0       4       0
  2894 ;;      Totals:         1      17       0
  2895 ;;Total ram usage:       18 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    2
  2898 ;; This function calls:
  2899 ;;		Nothing
  2900 ;; This function is called by:
  2901 ;;		_checkOutA
  2902 ;;		_checkBatAD
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           
  2907                           ;psect for function _ADC_Sample
  2908  011C                     _ADC_Sample:	
  2909                           
  2910                           ;incstack = 0
  2911                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2912                           ;ADC_Sample@adch stored from wreg
  2913  011C  1283               	bcf	3,5	;RP0=0, select bank0
  2914  011D  00DB               	movwf	ADC_Sample@adch
  2915                           
  2916                           ;main.c: 1012: volatile unsigned long adsum = 0;
  2917                           
  2918                           ;main.c: 1013: volatile unsigned int admin = 0, admax = 0;
  2919  011E  21F7               	fcall	PL4	;call to abstracted procedure
  2920                           
  2921                           ;main.c: 1014: volatile unsigned int ad_temp = 0;
  2922  011F  01E5               	clrf	ADC_Sample@ad_temp	;volatile
  2923  0120  01E6               	clrf	ADC_Sample@ad_temp+1	;volatile
  2924                           
  2925                           ;main.c: 1016: if ((!LDO_EN) && (adldo & 0x04) )
  2926  0121  1683               	bsf	3,5	;RP0=1, select bank1
  2927  0122  1D16               	btfss	22,2	;volatile
  2928  0123  1D73               	btfss	ADC_Sample@adldo,2
  2929  0124  292E               	goto	l2943
  2930                           
  2931                           ;main.c: 1017: {
  2932                           ;main.c: 1019: ADCON1 = adldo;
  2933  0125  0873               	movf	ADC_Sample@adldo,w
  2934  0126  0096               	movwf	22	;volatile
  2935                           
  2936                           ;main.c: 1020: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2937  0127  3084               	movlw	132
  2938  0128  1283               	bcf	3,5	;RP0=0, select bank0
  2939  0129  00D6               	movwf	??_ADC_Sample
  2940  012A                     u4067:	
  2941  012A  0BD6               	decfsz	??_ADC_Sample,f
  2942  012B  292A               	goto	u4067
  2943  012C  292D               	nop2
  2944                           
  2945                           ;main.c: 1021: }
  2946  012D  2930               	goto	l2945
  2947  012E                     l2943:	
  2948                           
  2949                           ;main.c: 1022: else
  2950                           ;main.c: 1023: ADCON1 = adldo;
  2951  012E  0873               	movf	ADC_Sample@adldo,w
  2952  012F  0096               	movwf	22	;volatile
  2953  0130                     l2945:	
  2954                           
  2955                           ;main.c: 1025: if(adch & 0x10)
  2956  0130  1283               	bcf	3,5	;RP0=0, select bank0
  2957  0131  1E5B               	btfss	ADC_Sample@adch,4
  2958  0132  2938               	goto	l2953
  2959                           
  2960                           ;main.c: 1026: {
  2961                           ;main.c: 1027: CHS4 = 1;
  2962  0133  1683               	bsf	3,5	;RP0=1, select bank1
  2963  0134  1716               	bsf	22,6	;volatile
  2964                           
  2965                           ;main.c: 1028: adch &= 0x0f;
  2966  0135  300F               	movlw	15
  2967  0136  1283               	bcf	3,5	;RP0=0, select bank0
  2968  0137  05DB               	andwf	ADC_Sample@adch,f
  2969  0138                     l2953:	
  2970                           
  2971                           ;main.c: 1031: for (i = 0; i < 10; i++)
  2972  0138  01DC               	clrf	ADC_Sample@i
  2973  0139                     l2959:	
  2974                           
  2975                           ;main.c: 1032: {
  2976                           ;main.c: 1033: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2977  0139  085B               	movf	ADC_Sample@adch,w
  2978  013A  00D6               	movwf	??_ADC_Sample
  2979  013B  3001               	movlw	1
  2980  013C  1003               	clrc
  2981  013D                     L18:	
  2982  013D  0DD6               	rlf	??_ADC_Sample,f
  2983  013E  3EFF               	addlw	-1
  2984  013F  1003               	clrc
  2985  0140  1D03               	skipz
  2986  0141  293D               	goto	L18
  2987  0142  0D56               	rlf	??_ADC_Sample,w
  2988  0143  3841               	iorlw	65
  2989  0144  1683               	bsf	3,5	;RP0=1, select bank1
  2990  0145  0095               	movwf	21	;volatile
  2991  0146  0000               	nop	;# 
  2992  0147  0000               	nop	;# 
  2993  0148  0000               	nop	;# 
  2994  0149  0000               	nop	;# 
  2995                           
  2996                           ;main.c: 1038: GODONE = 1;
  2997  014A  1683               	bsf	3,5	;RP0=1, select bank1
  2998  014B  1495               	bsf	21,1	;volatile
  2999                           
  3000                           ;main.c: 1040: unsigned char j = 0;
  3001  014C  1283               	bcf	3,5	;RP0=0, select bank0
  3002  014D  01DA               	clrf	ADC_Sample@j
  3003  014E                     l880:	
  3004                           ;main.c: 1041: while (GODONE)
  3005                           
  3006  014E  1683               	bsf	3,5	;RP0=1, select bank1
  3007  014F  1C95               	btfss	21,1	;volatile
  3008  0150  2959               	goto	l2969
  3009                           
  3010                           ;main.c: 1042: {
  3011                           ;main.c: 1043: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3012  0151  2952               	nop2	;2 cycle nop
  3013  0152  2953               	nop2	;2 cycle nop
  3014  0153  2954               	nop2	;2 cycle nop
  3015  0154  2955               	nop2	;2 cycle nop
  3016                           
  3017                           ;main.c: 1045: if (0 == (--j))
  3018  0155  1283               	bcf	3,5	;RP0=0, select bank0
  3019  0156  0BDA               	decfsz	ADC_Sample@j,f
  3020  0157  294E               	goto	l880
  3021                           
  3022                           ;main.c: 1046: return 0;
  3023  0158  3400               	retlw	0
  3024  0159                     l2969:	
  3025                           
  3026                           ;main.c: 1047: }
  3027                           ;main.c: 1049: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3028  0159  0819               	movf	25,w	;volatile
  3029  015A  1283               	bcf	3,5	;RP0=0, select bank0
  3030  015B  00E5               	movwf	ADC_Sample@ad_temp	;volatile
  3031  015C  01E6               	clrf	ADC_Sample@ad_temp+1	;volatile
  3032  015D  0EE5               	swapf	ADC_Sample@ad_temp,f	;volatile
  3033  015E  0EE6               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3034  015F  30F0               	movlw	240
  3035  0160  05E6               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3036  0161  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3037  0162  390F               	andlw	15
  3038  0163  04E6               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3039  0164  30F0               	movlw	240
  3040  0165  05E5               	andwf	ADC_Sample@ad_temp,f	;volatile
  3041  0166  1683               	bsf	3,5	;RP0=1, select bank1
  3042  0167  0E18               	swapf	24,w	;volatile
  3043  0168  390F               	andlw	15
  3044  0169  1283               	bcf	3,5	;RP0=0, select bank0
  3045  016A  07E5               	addwf	ADC_Sample@ad_temp,f	;volatile
  3046  016B  1803               	skipnc
  3047  016C  0AE6               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3048                           
  3049                           ;main.c: 1051: if (0 == admax)
  3050  016D  0863               	movf	ADC_Sample@admax,w	;volatile
  3051  016E  0464               	iorwf	ADC_Sample@admax+1,w	;volatile
  3052  016F  1D03               	btfss	3,2
  3053  0170  2973               	goto	l2977
  3054                           
  3055                           ;main.c: 1052: {
  3056                           ;main.c: 1053: admax = ad_temp;
  3057  0171  2200               	fcall	PL10	;call to abstracted procedure
  3058  0172  2985               	goto	l2983
  3059  0173                     l2977:	
  3060                           ;main.c: 1055: }
  3061                           
  3062                           ;main.c: 1054: admin = ad_temp;
  3063                           
  3064                           
  3065                           ;main.c: 1056: else if (ad_temp > admax)
  3066  0173  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3067  0174  0264               	subwf	ADC_Sample@admax+1,w	;volatile
  3068  0175  1D03               	skipz
  3069  0176  2979               	goto	u3005
  3070  0177  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3071  0178  0263               	subwf	ADC_Sample@admax,w	;volatile
  3072  0179                     u3005:	
  3073  0179  1803               	skipnc
  3074  017A  297D               	goto	l2981
  3075                           
  3076                           ;main.c: 1057: admax = ad_temp;
  3077  017B  2200               	fcall	PL10	;call to abstracted procedure
  3078  017C  2989               	goto	l886
  3079  017D                     l2981:	
  3080                           
  3081                           ;main.c: 1058: else if (ad_temp < admin)
  3082  017D  0862               	movf	ADC_Sample@admin+1,w	;volatile
  3083  017E  0266               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3084  017F  1D03               	skipz
  3085  0180  2983               	goto	u3015
  3086  0181  0861               	movf	ADC_Sample@admin,w	;volatile
  3087  0182  0265               	subwf	ADC_Sample@ad_temp,w	;volatile
  3088  0183                     u3015:	
  3089  0183  1803               	skipnc
  3090  0184  2989               	goto	l886
  3091  0185                     l2983:	
  3092                           
  3093                           ;main.c: 1059: admin = ad_temp;
  3094  0185  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3095  0186  00E2               	movwf	ADC_Sample@admin+1	;volatile
  3096  0187  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3097  0188  00E1               	movwf	ADC_Sample@admin	;volatile
  3098  0189                     l886:	
  3099                           
  3100                           ;main.c: 1061: adsum += ad_temp;
  3101  0189  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3102  018A  00D6               	movwf	??_ADC_Sample
  3103  018B  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3104  018C  00D7               	movwf	??_ADC_Sample+1
  3105  018D  01D8               	clrf	??_ADC_Sample+2
  3106  018E  01D9               	clrf	??_ADC_Sample+3
  3107  018F  0856               	movf	??_ADC_Sample,w
  3108  0190  07DD               	addwf	ADC_Sample@adsum,f	;volatile
  3109  0191  0857               	movf	??_ADC_Sample+1,w
  3110  0192  1103               	clrz
  3111  0193  1803               	skipnc
  3112  0194  3E01               	addlw	1
  3113  0195  1D03               	btfss	3,2
  3114  0196  07DE               	addwf	ADC_Sample@adsum+1,f	;volatile
  3115  0197  0858               	movf	??_ADC_Sample+2,w
  3116  0198  1103               	clrz
  3117  0199  1803               	skipnc
  3118  019A  3E01               	addlw	1
  3119  019B  1D03               	btfss	3,2
  3120  019C  07DF               	addwf	ADC_Sample@adsum+2,f	;volatile
  3121  019D  0859               	movf	??_ADC_Sample+3,w
  3122  019E  1103               	clrz
  3123  019F  1803               	skipnc
  3124  01A0  3E01               	addlw	1
  3125  01A1  1D03               	btfss	3,2
  3126  01A2  07E0               	addwf	ADC_Sample@adsum+3,f	;volatile
  3127  01A3  300A               	movlw	10
  3128  01A4  0ADC               	incf	ADC_Sample@i,f
  3129  01A5  025C               	subwf	ADC_Sample@i,w
  3130  01A6  1C03               	skipc
  3131  01A7  2939               	goto	l2959
  3132                           
  3133                           ;main.c: 1062: }
  3134                           ;main.c: 1063: adsum -= admax;
  3135  01A8  0863               	movf	ADC_Sample@admax,w	;volatile
  3136  01A9  00D6               	movwf	??_ADC_Sample
  3137  01AA  0864               	movf	ADC_Sample@admax+1,w	;volatile
  3138  01AB  21E8               	fcall	PL2	;call to abstracted procedure
  3139  01AC  1C03               	skipc
  3140  01AD  0F59               	incfsz	??_ADC_Sample+3,w
  3141  01AE  02E0               	subwf	ADC_Sample@adsum+3,f	;volatile
  3142                           
  3143                           ;main.c: 1064: if (adsum >= admin)
  3144  01AF  0861               	movf	ADC_Sample@admin,w	;volatile
  3145  01B0  00D6               	movwf	??_ADC_Sample
  3146  01B1  0862               	movf	ADC_Sample@admin+1,w	;volatile
  3147  01B2  00D7               	movwf	??_ADC_Sample+1
  3148  01B3  01D8               	clrf	??_ADC_Sample+2
  3149  01B4  01D9               	clrf	??_ADC_Sample+3
  3150  01B5  0859               	movf	??_ADC_Sample+3,w
  3151  01B6  0260               	subwf	ADC_Sample@adsum+3,w	;volatile
  3152  01B7  1D03               	skipz
  3153  01B8  29C3               	goto	u3055
  3154  01B9  0858               	movf	??_ADC_Sample+2,w
  3155  01BA  025F               	subwf	ADC_Sample@adsum+2,w	;volatile
  3156  01BB  1D03               	skipz
  3157  01BC  29C3               	goto	u3055
  3158  01BD  0857               	movf	??_ADC_Sample+1,w
  3159  01BE  025E               	subwf	ADC_Sample@adsum+1,w	;volatile
  3160  01BF  1D03               	skipz
  3161  01C0  29C3               	goto	u3055
  3162  01C1  0856               	movf	??_ADC_Sample,w
  3163  01C2  025D               	subwf	ADC_Sample@adsum,w	;volatile
  3164  01C3                     u3055:	
  3165  01C3  1C03               	skipc
  3166  01C4  29CD               	goto	l890
  3167                           
  3168                           ;main.c: 1065: adsum -= admin;
  3169  01C5  0861               	movf	ADC_Sample@admin,w	;volatile
  3170  01C6  00D6               	movwf	??_ADC_Sample
  3171  01C7  0862               	movf	ADC_Sample@admin+1,w	;volatile
  3172  01C8  21E8               	fcall	PL2	;call to abstracted procedure
  3173  01C9  1C03               	skipc
  3174  01CA  0F59               	incfsz	??_ADC_Sample+3,w
  3175  01CB  02E0               	subwf	ADC_Sample@adsum+3,f	;volatile
  3176  01CC  29D1               	goto	l2993
  3177  01CD                     l890:	
  3178                           
  3179                           ;main.c: 1066: else
  3180                           ;main.c: 1067: adsum = 0;
  3181  01CD  01DD               	clrf	ADC_Sample@adsum	;volatile
  3182  01CE  01DE               	clrf	ADC_Sample@adsum+1	;volatile
  3183  01CF  01DF               	clrf	ADC_Sample@adsum+2	;volatile
  3184  01D0  01E0               	clrf	ADC_Sample@adsum+3	;volatile
  3185  01D1                     l2993:	
  3186                           
  3187                           ;main.c: 1069: adresult = adsum >> 3;
  3188  01D1  085D               	movf	ADC_Sample@adsum,w	;volatile
  3189  01D2  00D6               	movwf	??_ADC_Sample
  3190  01D3  085E               	movf	ADC_Sample@adsum+1,w	;volatile
  3191  01D4  00D7               	movwf	??_ADC_Sample+1
  3192  01D5  085F               	movf	ADC_Sample@adsum+2,w	;volatile
  3193  01D6  00D8               	movwf	??_ADC_Sample+2
  3194  01D7  0860               	movf	ADC_Sample@adsum+3,w	;volatile
  3195  01D8  00D9               	movwf	??_ADC_Sample+3
  3196  01D9  3003               	movlw	3
  3197  01DA                     u3075:	
  3198  01DA  1003               	clrc
  3199  01DB  0CD9               	rrf	??_ADC_Sample+3,f
  3200  01DC  0CD8               	rrf	??_ADC_Sample+2,f
  3201  01DD  0CD7               	rrf	??_ADC_Sample+1,f
  3202  01DE  0CD6               	rrf	??_ADC_Sample,f
  3203  01DF  3EFF               	addlw	-1
  3204  01E0  1D03               	skipz
  3205  01E1  29DA               	goto	u3075
  3206  01E2  0857               	movf	??_ADC_Sample+1,w
  3207  01E3  00B3               	movwf	_adresult+1	;volatile
  3208  01E4  0856               	movf	??_ADC_Sample,w
  3209  01E5  00B2               	movwf	_adresult	;volatile
  3210                           
  3211                           ;main.c: 1071: adsum = 0;
  3212                           
  3213                           ;main.c: 1072: admin = 0;
  3214                           
  3215                           ;main.c: 1073: admax = 0;
  3216  01E6  21F7               	fcall	PL4	;call to abstracted procedure
  3217                           
  3218                           ;main.c: 1074: return 0xA5;
  3219  01E7  34A5               	retlw	165
  3220  01E8                     __end_of_ADC_Sample:	
  3221  01E8                     PL2:	
  3222  01E8  00D7               	movwf	??_ADC_Sample+1
  3223  01E9  01D8               	clrf	??_ADC_Sample+2
  3224  01EA  01D9               	clrf	??_ADC_Sample+3
  3225  01EB  0856               	movf	??_ADC_Sample,w
  3226  01EC  02DD               	subwf	ADC_Sample@adsum,f	;volatile
  3227  01ED  0857               	movf	??_ADC_Sample+1,w
  3228  01EE  1C03               	skipc
  3229  01EF  0F57               	incfsz	??_ADC_Sample+1,w
  3230  01F0  02DE               	subwf	ADC_Sample@adsum+1,f	;volatile
  3231  01F1  0858               	movf	??_ADC_Sample+2,w
  3232  01F2  1C03               	skipc
  3233  01F3  0F58               	incfsz	??_ADC_Sample+2,w
  3234  01F4  02DF               	subwf	ADC_Sample@adsum+2,f	;volatile
  3235  01F5  0859               	movf	??_ADC_Sample+3,w
  3236  01F6  0008               	return
  3237  01F7                     __end_ofPL2:	
  3238  01F7                     PL4:	
  3239  01F7  01DD               	clrf	ADC_Sample@adsum	;volatile
  3240  01F8  01DE               	clrf	ADC_Sample@adsum+1	;volatile
  3241  01F9  01DF               	clrf	ADC_Sample@adsum+2	;volatile
  3242  01FA  01E0               	clrf	ADC_Sample@adsum+3	;volatile
  3243  01FB  01E1               	clrf	ADC_Sample@admin	;volatile
  3244  01FC  01E2               	clrf	ADC_Sample@admin+1	;volatile
  3245  01FD  01E3               	clrf	ADC_Sample@admax	;volatile
  3246  01FE  01E4               	clrf	ADC_Sample@admax+1	;volatile
  3247  01FF  0008               	return
  3248  0200                     __end_ofPL4:	
  3249  0200                     PL10:	
  3250  0200  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3251  0201  00E4               	movwf	ADC_Sample@admax+1	;volatile
  3252  0202  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3253  0203  00E3               	movwf	ADC_Sample@admax	;volatile
  3254  0204  0008               	return
  3255  0205                     __end_ofPL10:	
  3256                           
  3257                           	psect	text15
  3258  0404                     __ptext15:	
  3259 ;; *************** function _Sleep_Mode *****************
  3260 ;; Defined at:
  3261 ;;		line 934 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;		None
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;		None
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  1    wreg      void 
  3268 ;; Registers used:
  3269 ;;		wreg, status,2, status,0, pclath, cstack
  3270 ;; Tracked objects:
  3271 ;;		On entry : 100/0
  3272 ;;		On exit  : 100/100
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMMON   BANK0   BANK1
  3275 ;;      Params:         0       0       0
  3276 ;;      Locals:         0       0       0
  3277 ;;      Temps:          0       0       0
  3278 ;;      Totals:         0       0       0
  3279 ;;Total ram usage:        0 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:    3
  3282 ;; This function calls:
  3283 ;;		_AD_Init
  3284 ;;		_Init_System
  3285 ;; This function is called by:
  3286 ;;		_main
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           
  3291                           ;psect for function _Sleep_Mode
  3292  0404                     _Sleep_Mode:	
  3293                           
  3294                           ;main.c: 936: INTCON = 0;
  3295                           
  3296                           ;incstack = 0
  3297                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3298  0404  018B               	clrf	11	;volatile
  3299                           
  3300                           ;main.c: 938: OPTION_REG = 0;
  3301  0405  0181               	clrf	1	;volatile
  3302                           
  3303                           ;main.c: 940: TRISA = 0x1F;
  3304  0406  301F               	movlw	31
  3305  0407  1683               	bsf	3,5	;RP0=1, select bank1
  3306  0408  0085               	movwf	5	;volatile
  3307                           
  3308                           ;main.c: 941: WPUA = 0B00000000;
  3309  0409  0188               	clrf	8	;volatile
  3310                           
  3311                           ;main.c: 942: PORTA = 0x00;
  3312  040A  0186               	clrf	6	;volatile
  3313                           
  3314                           ;main.c: 943: TRISB = 0B00000100;
  3315  040B  3004               	movlw	4
  3316  040C  1283               	bcf	3,5	;RP0=0, select bank0
  3317  040D  0085               	movwf	5	;volatile
  3318                           
  3319                           ;main.c: 944: PORTB = 0B00000000;
  3320  040E  0186               	clrf	6	;volatile
  3321                           
  3322                           ;main.c: 945: WPUB = 0B00000100;
  3323  040F  0088               	movwf	8	;volatile
  3324                           
  3325                           ;main.c: 947: ADCON0 = 0;
  3326  0410  1683               	bsf	3,5	;RP0=1, select bank1
  3327  0411  0195               	clrf	21	;volatile
  3328                           
  3329                           ;main.c: 948: ADCON1 = 0;
  3330  0412  0196               	clrf	22	;volatile
  3331                           
  3332                           ;main.c: 950: PWMCON0 = 0;
  3333  0413  1283               	bcf	3,5	;RP0=0, select bank0
  3334  0414  0195               	clrf	21	;volatile
  3335                           
  3336                           ;main.c: 952: OSCCON = 0X70;
  3337  0415  3070               	movlw	112
  3338  0416  0094               	movwf	20	;volatile
  3339                           
  3340                           ;main.c: 954: IOCA = 0B00000010;
  3341  0417  3002               	movlw	2
  3342  0418  1683               	bsf	3,5	;RP0=1, select bank1
  3343  0419  0089               	movwf	9	;volatile
  3344                           
  3345                           ;main.c: 955: IOCB = 0B00000100;
  3346  041A  3004               	movlw	4
  3347  041B  1283               	bcf	3,5	;RP0=0, select bank0
  3348  041C  0089               	movwf	9	;volatile
  3349                           
  3350                           ;main.c: 957: RAIE = 1;
  3351  041D  158E               	bsf	14,3	;volatile
  3352                           
  3353                           ;main.c: 958: PEIE = 1;
  3354  041E  170B               	bsf	11,6	;volatile
  3355                           
  3356                           ;main.c: 959: RBIE = 1;
  3357  041F  158B               	bsf	11,3	;volatile
  3358                           
  3359                           ;main.c: 960: GIE = 0;
  3360  0420  138B               	bcf	11,7	;volatile
  3361                           
  3362                           ;main.c: 962: PIE1 &= 0X08;
  3363  0421  3008               	movlw	8
  3364  0422  058E               	andwf	14,f	;volatile
  3365                           
  3366                           ;main.c: 963: PIR1 = 0;
  3367  0423  018D               	clrf	13	;volatile
  3368                           
  3369                           ;main.c: 964: INTCON &= 0XC8;
  3370  0424  30C8               	movlw	200
  3371  0425  058B               	andwf	11,f	;volatile
  3372                           
  3373                           ;main.c: 966: PORTA;
  3374  0426  1683               	bsf	3,5	;RP0=1, select bank1
  3375  0427  0806               	movf	6,w	;volatile
  3376                           
  3377                           ;main.c: 967: RAIF = 0;
  3378  0428  1283               	bcf	3,5	;RP0=0, select bank0
  3379  0429  118D               	bcf	13,3	;volatile
  3380                           
  3381                           ;main.c: 968: PORTB;
  3382  042A  0806               	movf	6,w	;volatile
  3383                           
  3384                           ;main.c: 969: RBIF = 0;
  3385  042B  100B               	bcf	11,0	;volatile
  3386  042C  0064               	clrwdt	;# 
  3387  042D  0063               	sleep	;# 
  3388  042E  0000               	nop	;# 
  3389  042F  0064               	clrwdt	;# 
  3390  0430  0000               	nop	;# 
  3391  0431  0000               	nop	;# 
  3392  0432  0000               	nop	;# 
  3393  0433  0000               	nop	;# 
  3394  0434  0000               	nop	;# 
  3395                           
  3396                           ;main.c: 981: if(RAIF) RAIF = 0;
  3397  0435  1283               	bcf	3,5	;RP0=0, select bank0
  3398  0436  198D               	btfsc	13,3	;volatile
  3399  0437  118D               	bcf	13,3	;volatile
  3400                           
  3401                           ;main.c: 982: if(RBIF) RBIF = 0;
  3402  0438  180B               	btfsc	11,0	;volatile
  3403  0439  100B               	bcf	11,0	;volatile
  3404                           
  3405                           ;main.c: 983: if(TMR2IF) TMR2IF = 0;
  3406  043A  188D               	btfsc	13,1	;volatile
  3407  043B  108D               	bcf	13,1	;volatile
  3408                           
  3409                           ;main.c: 984: IOCA = 0B00000000;
  3410  043C  1683               	bsf	3,5	;RP0=1, select bank1
  3411  043D  0189               	clrf	9	;volatile
  3412                           
  3413                           ;main.c: 985: IOCB = 0B00000000;
  3414  043E  1283               	bcf	3,5	;RP0=0, select bank0
  3415  043F  0189               	clrf	9	;volatile
  3416                           
  3417                           ;main.c: 986: Init_System();
  3418  0440  24D9               	fcall	_Init_System
  3419                           
  3420                           ;main.c: 987: AD_Init();
  3421  0441  2D8A               	ljmp	l2119
  3422  0442                     __end_of_Sleep_Mode:	
  3423                           
  3424                           	psect	text16
  3425  04D9                     __ptext16:	
  3426 ;; *************** function _Init_System *****************
  3427 ;; Defined at:
  3428 ;;		line 790 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;		None
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;		None
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  1    wreg      void 
  3435 ;; Registers used:
  3436 ;;		wreg, status,2
  3437 ;; Tracked objects:
  3438 ;;		On entry : 100/0
  3439 ;;		On exit  : 100/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMMON   BANK0   BANK1
  3442 ;;      Params:         0       0       0
  3443 ;;      Locals:         0       0       0
  3444 ;;      Temps:          0       0       0
  3445 ;;      Totals:         0       0       0
  3446 ;;Total ram usage:        0 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; Hardware stack levels required when called:    2
  3449 ;; This function calls:
  3450 ;;		Nothing
  3451 ;; This function is called by:
  3452 ;;		_main
  3453 ;;		_Sleep_Mode
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           
  3458                           ;psect for function _Init_System
  3459  04D9                     _Init_System:	
  3460                           
  3461                           ;incstack = 0
  3462                           ; Regs used in _Init_System: [wreg+status,2]
  3463  04D9  0000               	nop	;# 
  3464  04DA  0064               	clrwdt	;# 
  3465                           
  3466                           ;main.c: 794: OPTION_REG = 0;
  3467  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  3468  04DC  0181               	clrf	1	;volatile
  3469  04DD  0064               	clrwdt	;# 
  3470                           
  3471                           ;main.c: 796: OSCCON = 0X72;
  3472  04DE  3072               	movlw	114
  3473  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  3474  04E0  0094               	movwf	20	;volatile
  3475                           
  3476                           ;main.c: 798: WPUA = 0B00000000;
  3477  04E1  1683               	bsf	3,5	;RP0=1, select bank1
  3478  04E2  0188               	clrf	8	;volatile
  3479                           
  3480                           ;main.c: 799: WPDA = 0x02;
  3481  04E3  3002               	movlw	2
  3482  04E4  0087               	movwf	7	;volatile
  3483                           
  3484                           ;main.c: 800: WPUB = 0B00000100;
  3485  04E5  3004               	movlw	4
  3486  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  3487  04E7  0088               	movwf	8	;volatile
  3488                           
  3489                           ;main.c: 802: TRISA = 0x1F;
  3490  04E8  301F               	movlw	31
  3491  04E9  1683               	bsf	3,5	;RP0=1, select bank1
  3492  04EA  0085               	movwf	5	;volatile
  3493                           
  3494                           ;main.c: 803: TRISB = 0B00000100;
  3495  04EB  3004               	movlw	4
  3496  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  3497  04ED  0085               	movwf	5	;volatile
  3498                           
  3499                           ;main.c: 805: PORTA = 0X00;
  3500  04EE  1683               	bsf	3,5	;RP0=1, select bank1
  3501  04EF  0186               	clrf	6	;volatile
  3502                           
  3503                           ;main.c: 806: PORTB = 0X00;
  3504  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  3505  04F1  0186               	clrf	6	;volatile
  3506                           
  3507                           ;main.c: 810: PR2 = 249;
  3508  04F2  30F9               	movlw	249
  3509  04F3  0091               	movwf	17	;volatile
  3510                           
  3511                           ;main.c: 811: TMR2IF = 0;
  3512  04F4  108D               	bcf	13,1	;volatile
  3513                           
  3514                           ;main.c: 812: TMR2IE = 1;
  3515  04F5  148E               	bsf	14,1	;volatile
  3516                           
  3517                           ;main.c: 814: T2CON = 0B00000100;
  3518  04F6  3004               	movlw	4
  3519  04F7  0093               	movwf	19	;volatile
  3520                           
  3521                           ;main.c: 815: INTCON = 0XC0;
  3522  04F8  30C0               	movlw	192
  3523  04F9  008B               	movwf	11	;volatile
  3524  04FA  0008               	return
  3525  04FB                     __end_of_Init_System:	
  3526                           
  3527                           	psect	text17
  3528  058A                     __ptext17:	
  3529 ;; *************** function _AD_Init *****************
  3530 ;; Defined at:
  3531 ;;		line 827 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  3532 ;; Parameters:    Size  Location     Type
  3533 ;;		None
  3534 ;; Auto vars:     Size  Location     Type
  3535 ;;		None
  3536 ;; Return value:  Size  Location     Type
  3537 ;;                  1    wreg      void 
  3538 ;; Registers used:
  3539 ;;		wreg, status,2
  3540 ;; Tracked objects:
  3541 ;;		On entry : 100/0
  3542 ;;		On exit  : 100/100
  3543 ;;		Unchanged: 0/0
  3544 ;; Data sizes:     COMMON   BANK0   BANK1
  3545 ;;      Params:         0       0       0
  3546 ;;      Locals:         0       0       0
  3547 ;;      Temps:          0       0       0
  3548 ;;      Totals:         0       0       0
  3549 ;;Total ram usage:        0 bytes
  3550 ;; Hardware stack levels used:    1
  3551 ;; Hardware stack levels required when called:    2
  3552 ;; This function calls:
  3553 ;;		Nothing
  3554 ;; This function is called by:
  3555 ;;		_main
  3556 ;;		_Sleep_Mode
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           
  3561                           ;psect for function _AD_Init
  3562  058A                     _AD_Init:	
  3563  058A                     l2119:	
  3564                           ;incstack = 0
  3565                           ; Regs used in _AD_Init: [wreg+status,2]
  3566                           
  3567                           
  3568                           ;main.c: 860: ADCON0 = 0X41;
  3569  058A  3041               	movlw	65
  3570  058B  1683               	bsf	3,5	;RP0=1, select bank1
  3571  058C  0095               	movwf	21	;volatile
  3572                           
  3573                           ;main.c: 877: ADCON1 = 0;
  3574  058D  0196               	clrf	22	;volatile
  3575                           
  3576                           ;main.c: 878: ANSEL0 = 0X1D;
  3577  058E  301D               	movlw	29
  3578  058F  0093               	movwf	19	;volatile
  3579  0590  0008               	return
  3580  0591                     __end_of_AD_Init:	
  3581                           
  3582                           	psect	text18
  3583  0519                     __ptext18:	
  3584 ;; *************** function _Isr_Timer *****************
  3585 ;; Defined at:
  3586 ;;		line 100 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;		None
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;		None
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  1    wreg      void 
  3593 ;; Registers used:
  3594 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 100/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMMON   BANK0   BANK1
  3600 ;;      Params:         0       0       0
  3601 ;;      Locals:         0       0       0
  3602 ;;      Temps:          3       0       0
  3603 ;;      Totals:         3       0       0
  3604 ;;Total ram usage:        3 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    1
  3607 ;; This function calls:
  3608 ;;		_ledShow
  3609 ;; This function is called by:
  3610 ;;		Interrupt level 1
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           
  3615                           ;psect for function _Isr_Timer
  3616  0519                     _Isr_Timer:	
  3617                           
  3618                           ;main.c: 102: if(TMR2IF)
  3619  0519  1283               	bcf	3,5	;RP0=0, select bank0
  3620  051A  1C8D               	btfss	13,1	;volatile
  3621  051B  2D2D               	goto	i1l656
  3622                           
  3623                           ;main.c: 103: {
  3624                           ;main.c: 104: TMR2IF = 0;
  3625  051C  108D               	bcf	13,1	;volatile
  3626                           
  3627                           ;main.c: 105: if(++intCount >= 160)
  3628  051D  30A0               	movlw	160
  3629  051E  0AD4               	incf	_intCount,f
  3630  051F  0254               	subwf	_intCount,w
  3631  0520  1C03               	skipc
  3632  0521  2D2A               	goto	i1l2865
  3633  0522  3064               	movlw	100
  3634                           
  3635                           ;main.c: 106: {
  3636                           ;main.c: 107: intCount = 0;
  3637  0523  01D4               	clrf	_intCount
  3638                           
  3639                           ;main.c: 108: IntFlag = 1;
  3640  0524  01D2               	clrf	_IntFlag
  3641  0525  0AD2               	incf	_IntFlag,f
  3642                           
  3643                           ;main.c: 109: if(++count1s >= 100)
  3644  0526  0AD3               	incf	_count1s,f
  3645  0527  0253               	subwf	_count1s,w
  3646  0528  1803               	btfsc	3,0
  3647                           
  3648                           ;main.c: 110: {
  3649                           ;main.c: 111: count1s = 0;
  3650  0529  01D3               	clrf	_count1s
  3651  052A                     i1l2865:	
  3652                           
  3653                           ;main.c: 112: }
  3654                           ;main.c: 113: }
  3655                           ;main.c: 114: ledShow();
  3656  052A  235F               	fcall	_ledShow
  3657                           
  3658                           ;main.c: 115: intCount10++;
  3659  052B  1283               	bcf	3,5	;RP0=0, select bank0
  3660  052C  0AD0               	incf	_intCount10,f
  3661  052D                     i1l656:	
  3662  052D  0872               	movf	??_Isr_Timer+2,w
  3663  052E  008A               	movwf	10
  3664  052F  0871               	movf	??_Isr_Timer+1,w
  3665  0530  0084               	movwf	4
  3666  0531  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3667  0532  0083               	movwf	3
  3668  0533  0EFE               	swapf	126,f
  3669  0534  0E7E               	swapf	126,w
  3670  0535  0009               	retfie
  3671  0536                     __end_of_Isr_Timer:	
  3672                           
  3673                           	psect	intentry
  3674  0004                     __pintentry:	
  3675                           ;incstack = 0
  3676                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3677                           
  3678  0004                     interrupt_function:	
  3679  007E                     saved_w	set	btemp
  3680  0004  00FE               	movwf	btemp
  3681  0005  0E03               	swapf	3,w
  3682  0006  00F0               	movwf	??_Isr_Timer
  3683  0007  0804               	movf	4,w
  3684  0008  00F1               	movwf	??_Isr_Timer+1
  3685  0009  080A               	movf	10,w
  3686  000A  00F2               	movwf	??_Isr_Timer+2
  3687  000B  2D19               	ljmp	_Isr_Timer
  3688                           
  3689                           	psect	text19
  3690  035F                     __ptext19:	
  3691 ;; *************** function _ledShow *****************
  3692 ;; Defined at:
  3693 ;;		line 163 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  3694 ;; Parameters:    Size  Location     Type
  3695 ;;		None
  3696 ;; Auto vars:     Size  Location     Type
  3697 ;;		None
  3698 ;; Return value:  Size  Location     Type
  3699 ;;                  1    wreg      void 
  3700 ;; Registers used:
  3701 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3702 ;; Tracked objects:
  3703 ;;		On entry : 100/0
  3704 ;;		On exit  : 0/0
  3705 ;;		Unchanged: 0/0
  3706 ;; Data sizes:     COMMON   BANK0   BANK1
  3707 ;;      Params:         0       0       0
  3708 ;;      Locals:         0       0       0
  3709 ;;      Temps:          0       0       0
  3710 ;;      Totals:         0       0       0
  3711 ;;Total ram usage:        0 bytes
  3712 ;; Hardware stack levels used:    1
  3713 ;; This function calls:
  3714 ;;		Nothing
  3715 ;; This function is called by:
  3716 ;;		_Isr_Timer
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           
  3721                           ;psect for function _ledShow
  3722  035F                     _ledShow:	
  3723                           
  3724                           ;main.c: 165: if(++ledCntTime > 30)
  3725                           
  3726                           ;incstack = 0
  3727                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3728  035F  301F               	movlw	31
  3729  0360  0AB8               	incf	_ledCntTime,f
  3730  0361  0238               	subwf	_ledCntTime,w
  3731  0362  1C03               	skipc
  3732  0363  0008               	return
  3733  0364  3006               	movlw	6
  3734                           
  3735                           ;main.c: 166: {
  3736                           ;main.c: 167: ledCntTime = 0;
  3737  0365  01B8               	clrf	_ledCntTime
  3738                           
  3739                           ;main.c: 168: if(++ledCnt > 5)
  3740  0366  0ACC               	incf	_ledCnt,f
  3741  0367  024C               	subwf	_ledCnt,w
  3742  0368  1803               	btfsc	3,0
  3743                           
  3744                           ;main.c: 169: {
  3745                           ;main.c: 170: ledCnt = 0;
  3746  0369  01CC               	clrf	_ledCnt
  3747                           
  3748                           ;main.c: 171: }
  3749                           ;main.c: 172: PORTA &= 0xDF;
  3750  036A  1683               	bsf	3,5	;RP0=1, select bank1
  3751  036B  1286               	bcf	6,5	;volatile
  3752                           
  3753                           ;main.c: 173: PORTB &= 0xC7;
  3754  036C  30C7               	movlw	199
  3755  036D  1283               	bcf	3,5	;RP0=0, select bank0
  3756  036E  0586               	andwf	6,f	;volatile
  3757                           
  3758                           ;main.c: 174: TRISA |= 0x20;
  3759  036F  1683               	bsf	3,5	;RP0=1, select bank1
  3760  0370  1685               	bsf	5,5	;volatile
  3761                           
  3762                           ;main.c: 175: TRISB |= 0x38;
  3763  0371  3038               	movlw	56
  3764  0372  1283               	bcf	3,5	;RP0=0, select bank0
  3765  0373  0485               	iorwf	5,f	;volatile
  3766                           
  3767                           ;main.c: 176: switch(ledCnt)
  3768  0374  2BA7               	goto	i1l2353
  3769  0375                     i1l2319:	
  3770                           
  3771                           ;main.c: 179: if(ledStep > 0)
  3772  0375  0878               	movf	_ledStep,w
  3773  0376  1903               	btfsc	3,2
  3774  0377  0008               	return
  3775                           
  3776                           ;main.c: 180: {
  3777                           ;main.c: 181: TRISB &= 0xE7;
  3778  0378  30E7               	movlw	231
  3779  0379                     L19:	
  3780  0379  0585               	andwf	5,f	;volatile
  3781                           
  3782                           ;main.c: 182: PORTB |= 0x10;
  3783  037A  1606               	bsf	6,4	;volatile
  3784  037B  0008               	return
  3785  037C                     i1l2325:	
  3786                           
  3787                           ;main.c: 186: if(ledStep > 1)
  3788  037C  3002               	movlw	2
  3789  037D  0278               	subwf	_ledStep,w
  3790  037E  1C03               	skipc
  3791  037F  0008               	return
  3792                           
  3793                           ;main.c: 187: {
  3794                           ;main.c: 188: TRISB &= 0xCF;
  3795  0380  30CF               	movlw	207
  3796  0381  0585               	andwf	5,f	;volatile
  3797                           
  3798                           ;main.c: 189: PORTB |= 0x20;
  3799  0382  1686               	bsf	6,5	;volatile
  3800  0383  0008               	return
  3801  0384                     i1l2331:	
  3802                           
  3803                           ;main.c: 193: if(ledStep > 2)
  3804  0384  3003               	movlw	3
  3805  0385  0278               	subwf	_ledStep,w
  3806  0386  1C03               	skipc
  3807  0387  0008               	return
  3808                           
  3809                           ;main.c: 194: {
  3810                           ;main.c: 195: TRISB &= 0xE7;
  3811  0388  30E7               	movlw	231
  3812  0389  0585               	andwf	5,f	;volatile
  3813                           
  3814                           ;main.c: 196: PORTB |= 0x08;
  3815  038A  1586               	bsf	6,3	;volatile
  3816  038B  0008               	return
  3817  038C                     i1l2337:	
  3818                           
  3819                           ;main.c: 200: if(ledStep > 3)
  3820  038C  3004               	movlw	4
  3821  038D  0278               	subwf	_ledStep,w
  3822  038E  1C03               	skipc
  3823  038F  0008               	return
  3824                           
  3825                           ;main.c: 201: {
  3826                           ;main.c: 202: TRISB &= 0xCF;
  3827  0390  30CF               	movlw	207
  3828  0391  2B79               	goto	L19
  3829  0392                     i1l2343:	
  3830                           
  3831                           ;main.c: 207: if(ledStep > 4)
  3832  0392  3005               	movlw	5
  3833  0393  0278               	subwf	_ledStep,w
  3834  0394  1C03               	skipc
  3835  0395  0008               	return
  3836                           
  3837                           ;main.c: 208: {
  3838                           ;main.c: 209: TRISA &= 0xDF;
  3839  0396  1683               	bsf	3,5	;RP0=1, select bank1
  3840  0397  1285               	bcf	5,5	;volatile
  3841                           
  3842                           ;main.c: 210: TRISB &= 0xDF;
  3843  0398  1283               	bcf	3,5	;RP0=0, select bank0
  3844  0399  1285               	bcf	5,5	;volatile
  3845                           
  3846                           ;main.c: 211: PORTB |= 0x20;
  3847  039A  1686               	bsf	6,5	;volatile
  3848  039B  0008               	return
  3849  039C                     i1l2347:	
  3850                           
  3851                           ;main.c: 215: if(ledStep > 5)
  3852  039C  3006               	movlw	6
  3853  039D  0278               	subwf	_ledStep,w
  3854  039E  1C03               	skipc
  3855  039F  0008               	return
  3856                           
  3857                           ;main.c: 216: {
  3858                           ;main.c: 217: TRISA &= 0xDF;
  3859  03A0  1683               	bsf	3,5	;RP0=1, select bank1
  3860  03A1  1285               	bcf	5,5	;volatile
  3861                           
  3862                           ;main.c: 218: TRISB &= 0xDF;
  3863  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  3864  03A3  1285               	bcf	5,5	;volatile
  3865                           
  3866                           ;main.c: 219: PORTA |= 0x20;
  3867  03A4  1683               	bsf	3,5	;RP0=1, select bank1
  3868  03A5  1686               	bsf	6,5	;volatile
  3869  03A6  0008               	return
  3870  03A7                     i1l2353:	
  3871  03A7  084C               	movf	_ledCnt,w
  3872                           
  3873                           ; Switch size 1, requested type "space"
  3874                           ; Number of cases is 6, Range of values is 0 to 5
  3875                           ; switch strategies available:
  3876                           ; Name         Instructions Cycles
  3877                           ; direct_byte           12     6 (fixed)
  3878                           ; simple_byte           19    10 (average)
  3879                           ; jumptable            260     6 (fixed)
  3880                           ;	Chosen strategy is direct_byte
  3881  03A8  0084               	movwf	4
  3882  03A9  3006               	movlw	6
  3883  03AA  0204               	subwf	4,w
  3884  03AB  1803               	skipnc
  3885  03AC  0008               	return
  3886  03AD  3005               	movlw	high i1S3463
  3887  03AE  008A               	movwf	10
  3888  03AF  3091               	movlw	low i1S3463
  3889  03B0  0704               	addwf	4,w
  3890  03B1  0082               	movwf	2
  3891  03B2  0008               	return
  3892  03B3                     __end_of_ledShow:	
  3893  007E                     btemp	set	126	;btemp
  3894  007E                     wtemp0	set	126
  3895                           
  3896                           	psect	swtext1
  3897  0591                     __pswtext1:	
  3898  0591                     i1S3463:	
  3899  0591  2B9C               	ljmp	i1l2347
  3900  0592  2B75               	ljmp	i1l2319
  3901  0593  2B7C               	ljmp	i1l2325
  3902  0594  2B84               	ljmp	i1l2331
  3903  0595  2B8C               	ljmp	i1l2337
  3904  0596  2B92               	ljmp	i1l2343


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         58
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     19      74
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ledCtr->___lbdiv
    _keyCtr->_keyRead
    _chrgCtr->___lbdiv
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkOutA
    _ledCtr->___lbmod
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3272
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               1     1      0     683
                                              3 BANK0      1     1      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     362
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0     321
                                              0 BANK0      2     2      0
                            ___lbdiv
                        _chrgPwmInit
                        _chrgPwmStop
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     321
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            4     4      0    1159
                                              4 COMMON     2     2      0
                                             17 BANK0      2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0    1042
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1    1042
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
   _chrgCtr
     ___lbdiv
     _chrgPwmInit
     _chrgPwmStop
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     13      4A       4       92.5%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      55       7        0.0%
DATA                 0      0      55       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Jan 10 11:32:22 2025

            _protectFlag 004E                        pc 0002                       PL2 01E8  
                     PL4 01F7                       PL6 0116                       PL8 0574  
                     fsr 0004                      PL10 0200                      l661 047F  
                    l808 027C                      l665 0496                      l880 014E  
                    l776 04D4                      l890 01CD                      l886 0189  
                    _GIE 005F                      _RB0 0030                      _RB1 0031  
                    _PR2 0011      __size_of_ADC_Sample 00CC                      fsr0 0004  
                    indf 0000          __end_of_AD_Init 0591                     l1157 055E  
                   l2125 059A                     l2119 058A                     l3111 02A3  
                   l3041 0226                     l3017 054E                     l3009 053A  
                   l3043 0227                     l3123 02AD                     l3211 0099  
                   l2163 0513                     l3301 02E2                     l3109 02A0  
                   l3061 0249                     l3053 023D                     l3221 00A5  
                   l3119 02A9                     l3223 00AB                     l3151 0036  
                   l3313 030F                     l3081 0264                     l3065 0251  
                   l3057 023E                     l2281 056B                     l3233 00CB  
                   l3217 009F                     l3209 0097                     l3137 0024  
                   l3323 0323                     l2267 0558                     l3251 00EF  
                   l3227 00C1                     l3171 0057                     l3341 0355  
                   l3093 0276                     l3085 026A                     l3077 025E  
                   l3253 00F0                     l3237 00CE                     l3181 0063  
                   l3149 0034                     l3261 00F7                     l2701 04CB  
                   l3335 034C                     l3343 0357                     l3319 031C  
                   l3239 00D0                     l3175 0059                     l3089 0270  
                   l3257 00F3                     l3169 0055                     l2721 044C  
                   l3441 04AF                     l3409 0487                     l3277 0113  
                   l3197 007B                     l3189 0070                     l3365 03D0  
                   l3357 03C0                     l2733 0466                     l2741 0476  
                   l3199 007D                     l3375 03E0                     l3367 03D2  
                   l2735 0468                     l3297 02DF                     l3377 03E4  
                   l3385 03EC                     l3379 03E7                     l2693 04C2  
                   l3389 03F2                     l2943 012E                     l2695 04C5  
                   l2953 0138                     l2945 0130                     l2697 04C7  
                   l2981 017D                     l2983 0185                     l2959 0139  
                   l2993 01D1                     l2977 0173                     l2969 0159  
                   _CHS4 04B6                     _IOCA 0089                     _IOCB 0009  
                   u3005 0179                     u3015 0183                     u3055 01C3  
                   u3075 01DA                     u3315 0288                     u4037 02B2  
                   u4047 0321                     _PIE1 000E                     u4057 035C  
                   u4067 012A                     u3715 0301                     u3555 00BF  
                   _PEIE 005E                     _RAIE 0073                     _RAIF 006B  
                   _RBIE 005B                     _RBIF 0058                     u3595 00E3  
                   _PIR1 000D                     _WPDA 0087                     _WPUA 0088  
                   _WPUB 0008                     _main 047A                     btemp 007E  
                   start 000C            ??_Init_System 0073                    ?_main 0070  
        __end_of___lbdiv 056D          __end_of___lbmod 0552                    _T2CON 0013  
                  i1l656 052D            _countHalfFull 004F                    _PORTA 0086  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0005  
                  _PWMTH 0018                    _PWMTL 0017          __end_of_chrgCtr 0116  
        __end_of_ledShow 03B3          __end_of_keyRead 0519                    pclath 000A  
        __end_of_pwmInit 058A          __end_of_pwmStop 059A                    status 0003  
                  wtemp0 007E          __end_of_workCtr 047A          ___lbdiv@divisor 0073  
          _addPowerCount 0047          ___lbdiv@counter 0075          __initialization 000D  
           __end_of_main 04B1     __size_of_chrgPwmInit 0007     __size_of_chrgPwmStop 0003  
                 ??_main 0077                ??_AD_Init 0073      __end_of_Init_System 04FB  
                 _ADCON0 0095                   _ADCON1 0096                   i1S3463 0591  
                 _ADRESH 0099                   _ADRESL 0098                   _ANSEL0 0093  
                 _GODONE 04A9                   i1l2331 0384                   i1l2325 037C  
                 i1l2343 0392                   i1l2319 0375                   i1l2337 038C  
                 i1l2353 03A7                   i1l2347 039C                   i1l2865 052A  
                 _LDO_EN 04B2                   _INTCON 000B                   _OSCCON 0014  
                 _TMR2IE 0071                   _TMR2IF 0069                   _PWMD0L 0019  
                 _PWMD1L 001A             ??_ADC_Sample 0056             keyCtr@kclick 0074  
     __size_of_Isr_Timer 001D               _Sleep_Mode 0404                ??___lbdiv 0074  
              ??___lbmod 0074                   _ledCnt 004C                   _ledCtr 03B3  
                 _keyCtr 04B1                ??_chrgCtr 0056                   _pwStep 0043  
                 _result 0030                ??_ledShow 0070                ??_keyRead 0073  
     __end_of_ADC_Sample 01E8                   saved_w 007E                ??_pwmInit 0073  
              ??_pwmStop 0073                ??_workCtr 0073         ___lbdiv@dividend 0074  
             _batADValue 002A          ___lbmod@divisor 0073  __end_of__initialization 0016  
        ___lbmod@counter 0057          _workOverOutTime 004D           __pcstackCOMMON 0070  
     __size_of_checkOutA 00B0              _Init_System 04D9               __end_ofPL2 01F7  
             __end_ofPL4 0200               __end_ofPL6 011C               __end_ofPL8 057A  
       ___lbdiv@quotient 0076        __end_of_Isr_Timer 0536               _checkBatAD 02B5  
             __pbssBANK0 0020             _chrgFullFlag 0051              ?_Sleep_Mode 0070  
             __pmaintext 047A               __pintentry 0004                  ?_ledCtr 0070  
           _chrgWaitTime 003A                  ?_keyCtr 0070               _ledCntTime 0038  
                _AD_Init 058A                  _PWM01DT 001F                  _PWMD01H 001E  
                _PWMCON0 0015                  _PWMCON1 0016                  _PWMCON2 001D  
      __end_of_checkOutA 02B5                  _IntFlag 0052               _intCount10 0050  
        ADC_Sample@adldo 0073          ADC_Sample@admax 0063          ADC_Sample@admin 0061  
        ADC_Sample@adsum 005D                  ___lbdiv 0552                  ___lbmod 0536  
                _addTime 003C          __size_of_ledCtr 0051          __size_of_keyCtr 0028  
                _chrgCtr 0018               _lowBatFlag 0035                  __ptext1 0442  
                __ptext2 0597                  __ptext3 0582                  __ptext4 03B3  
                __ptext5 0536                  __ptext6 04B1                  __ptext7 04FB  
                __ptext8 0018                  __ptext9 059A                  _ledShow 035F  
                _ledStep 0078                  _count1s 0053                  _count5s 0024  
                _count8s 0022                  _maxDuty 0049                  _keyRead 04FB  
    __size_of_Sleep_Mode 003E                  _pwmInit 0582                  _subTime 003B  
            ?_checkBatAD 0070                  _pwmStop 0597               _preLedStep 0036  
                clrloop0 057B                  _workCtr 0442               _outADValue 002C  
   end_of_initialization 0016            _longPressFlag 004A            ??_chrgPwmInit 0073  
          ??_chrgPwmStop 0073         ___lbmod@dividend 0056              ___lbmod@rem 0058  
    __size_of_checkBatAD 00AA             ?_Init_System 0070           __end_of_ledCtr 0404  
         __end_of_keyCtr 04D9      __end_of_chrgPwmInit 0574      __end_of_chrgPwmStop 059D  
            __end_ofPL10 0205      start_initialization 000D                _Isr_Timer 0519  
           ??_Sleep_Mode 0073                 ??_ledCtr 0059        ADC_Sample@ad_temp 0065  
               ??_keyCtr 0074                 ?_AD_Init 0070              __pbssCOMMON 0077  
              ___latbits 0000            __pcstackBANK0 0056       __end_of_Sleep_Mode 0442  
             ?_Isr_Timer 0070                _checkOutA 0205                __pnvBANK0 0069  
            _chrgMaxDuty 0039                _chrgMaxAD 003E              _chrgPwmInit 056D  
               ?___lbdiv 0073                 ?___lbmod 0073              _chrgPwmStop 059A  
               ?_chrgCtr 0070                __pswtext1 0591                _count900s 0020  
               ?_ledShow 0070                 ?_keyRead 0070                _firstTime 0069  
         ADC_Sample@adch 005B                 ?_pwmInit 0070                _fullCount 0026  
           ??_checkBatAD 0074                 ?_pwmStop 0070                _lockCount 003D  
               ?_workCtr 0070              ADC_Sample@i 005C              ADC_Sample@j 005A  
      interrupt_function 0004               ?_checkOutA 0070                clear_ram0 057A  
              _prePwStep 0077              _reChrgCount 0042                _sleepTime 0034  
              _overCount 0048       __end_of_checkBatAD 035F     __size_of_Init_System 0022  
              _startTime 0045         __size_of_AD_Init 0007         keyRead@keyStatus 0073  
            ??_Isr_Timer 0070               _ADC_Sample 011C         __size_of___lbdiv 001B  
       __size_of___lbmod 001C              _lockLedStep 0041         __size_of_chrgCtr 00FE  
       __size_of_ledShow 0054         __size_of_keyRead 001E                 _adresult 0032  
               _chrgFlag 007A                 _chrgMode 003F                 __ptext10 056D  
               __ptext11 0552                 __ptext12 0205                 __ptext13 02B5  
               __ptext14 011C                 __ptext15 0404                 __ptext16 04D9  
               __ptext17 058A                 __ptext18 0519                 __ptext19 035F  
       __size_of_pwmInit 0008         __size_of_pwmStop 0003                 _count50s 0028  
       __size_of_workCtr 0038                 _keyCount 004B                 _intCount 0054  
          __size_of_main 0037              ??_checkOutA 0074         checkOutA@maxAout 0068  
               _tempDuty 0046                 _test_adc 0055                 _power_ad 002E  
               _workStep 0079             _overChrgTime 0044                 intlevel1 0000  
            ?_ADC_Sample 0073             ?_chrgPwmInit 0070             _overWorkTime 0037  
           ?_chrgPwmStop 0070              _showBatTime 0040               _OPTION_REG 0001  
