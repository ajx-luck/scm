

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 08 14:11:36 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	swtext1,local,class=CONST,delta=2
    34                           	psect	pa_nodes0,global,class=CODE,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 1.45
    38                           ; Generated 16/11/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F887 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	nvBANK0
    73  0069                     __pnvBANK0:	
    74  0069                     _firstTime:	
    75  0069                     	ds	1
    76  001F                     _PWM01DT	set	31
    77  001E                     _PWMD01H	set	30
    78  001D                     _PWMCON2	set	29
    79  001A                     _PWMD1L	set	26
    80  0019                     _PWMD0L	set	25
    81  0018                     _PWMTH	set	24
    82  0017                     _PWMTL	set	23
    83  0016                     _PWMCON1	set	22
    84  0015                     _PWMCON0	set	21
    85  0014                     _OSCCON	set	20
    86  0013                     _T2CON	set	19
    87  0011                     _PR2	set	17
    88  000E                     _PIE1	set	14
    89  000D                     _PIR1	set	13
    90  000B                     _INTCON	set	11
    91  0009                     _IOCB	set	9
    92  0008                     _WPUB	set	8
    93  0006                     _PORTB	set	6
    94  0005                     _TRISB	set	5
    95  0001                     _OPTION_REG	set	1
    96  0071                     _TMR2IE	set	113
    97  0073                     _RAIE	set	115
    98  0069                     _TMR2IF	set	105
    99  006B                     _RAIF	set	107
   100  0058                     _RBIF	set	88
   101  005B                     _RBIE	set	91
   102  005E                     _PEIE	set	94
   103  005F                     _GIE	set	95
   104  0030                     _RB0	set	48
   105  0031                     _RB1	set	49
   106  0099                     _ADRESH	set	153
   107  0098                     _ADRESL	set	152
   108  0096                     _ADCON1	set	150
   109  0095                     _ADCON0	set	149
   110  0093                     _ANSEL0	set	147
   111  0089                     _IOCA	set	137
   112  0088                     _WPUA	set	136
   113  0087                     _WPDA	set	135
   114  0086                     _PORTA	set	134
   115  0085                     _TRISA	set	133
   116  04B2                     _LDO_EN	set	1202
   117  04B6                     _CHS4	set	1206
   118  04A9                     _GODONE	set	1193
   119                           
   120                           	psect	cinit
   121  000D                     start_initialization:	
   122                           ; #config settings
   123                           
   124  000D                     __initialization:	
   125                           
   126                           ; Clear objects allocated to COMMON
   127  000D  3077               	movlw	low __pbssCOMMON
   128  000E  0084               	movwf	4
   129  000F  307B               	movlw	low (__pbssCOMMON+4)
   130  0010  258A               	fcall	clear_ram0
   131  0011  3020               	movlw	low __pbssBANK0
   132                           
   133                           ; Clear objects allocated to BANK0
   134  0012  1383               	bcf	3,7	;select IRP bank0
   135  0013  0084               	movwf	4
   136  0014  3056               	movlw	low (__pbssBANK0+54)
   137  0015  258A               	fcall	clear_ram0
   138  0016                     end_of_initialization:	
   139                           ;End of C runtime variable initialization code
   140                           
   141  0016                     __end_of__initialization:	
   142  0016  0183               	clrf	3
   143  0017  2C7C               	ljmp	_main	;jump to C main() function
   144                           
   145                           	psect	bssCOMMON
   146  0077                     __pbssCOMMON:	
   147  0077                     _prePwStep:	
   148  0077                     	ds	1
   149  0078                     _ledStep:	
   150  0078                     	ds	1
   151  0079                     _workStep:	
   152  0079                     	ds	1
   153  007A                     _chrgFlag:	
   154  007A                     	ds	1
   155                           
   156                           	psect	bssBANK0
   157  0020                     __pbssBANK0:	
   158  0020                     _count900s:	
   159  0020                     	ds	2
   160  0022                     _count8s:	
   161  0022                     	ds	2
   162  0024                     _count5s:	
   163  0024                     	ds	2
   164  0026                     _fullCount:	
   165  0026                     	ds	2
   166  0028                     _count50s:	
   167  0028                     	ds	2
   168  002A                     _batADValue:	
   169  002A                     	ds	2
   170  002C                     _outADValue:	
   171  002C                     	ds	2
   172  002E                     _power_ad:	
   173  002E                     	ds	2
   174  0030                     _result:	
   175  0030                     	ds	2
   176  0032                     _adresult:	
   177  0032                     	ds	2
   178  0034                     _sleepTime:	
   179  0034                     	ds	1
   180  0035                     _lowBatFlag:	
   181  0035                     	ds	1
   182  0036                     _preLedStep:	
   183  0036                     	ds	1
   184  0037                     _overWorkTime:	
   185  0037                     	ds	1
   186  0038                     _ledCntTime:	
   187  0038                     	ds	1
   188  0039                     _chrgMaxDuty:	
   189  0039                     	ds	1
   190  003A                     _chrgWaitTime:	
   191  003A                     	ds	1
   192  003B                     _subTime:	
   193  003B                     	ds	1
   194  003C                     _addTime:	
   195  003C                     	ds	1
   196  003D                     _lockCount:	
   197  003D                     	ds	1
   198  003E                     _chrgMaxAD:	
   199  003E                     	ds	1
   200  003F                     _chrgMode:	
   201  003F                     	ds	1
   202  0040                     _showBatTime:	
   203  0040                     	ds	1
   204  0041                     _lockLedStep:	
   205  0041                     	ds	1
   206  0042                     _reChrgCount:	
   207  0042                     	ds	1
   208  0043                     _pwStep:	
   209  0043                     	ds	1
   210  0044                     _overChrgTime:	
   211  0044                     	ds	1
   212  0045                     _startTime:	
   213  0045                     	ds	1
   214  0046                     _tempDuty:	
   215  0046                     	ds	1
   216  0047                     _addPowerCount:	
   217  0047                     	ds	1
   218  0048                     _overCount:	
   219  0048                     	ds	1
   220  0049                     _maxDuty:	
   221  0049                     	ds	1
   222  004A                     _longPressFlag:	
   223  004A                     	ds	1
   224  004B                     _keyCount:	
   225  004B                     	ds	1
   226  004C                     _ledCnt:	
   227  004C                     	ds	1
   228  004D                     _workOverOutTime:	
   229  004D                     	ds	1
   230  004E                     _protectFlag:	
   231  004E                     	ds	1
   232  004F                     _countHalfFull:	
   233  004F                     	ds	1
   234  0050                     _intCount10:	
   235  0050                     	ds	1
   236  0051                     _chrgFullFlag:	
   237  0051                     	ds	1
   238  0052                     _IntFlag:	
   239  0052                     	ds	1
   240  0053                     _count1s:	
   241  0053                     	ds	1
   242  0054                     _intCount:	
   243  0054                     	ds	1
   244  0055                     _test_adc:	
   245  0055                     	ds	1
   246                           
   247                           	psect	clrtext
   248  058A                     clear_ram0:	
   249                           ;	Called with FSR containing the base address, and
   250                           ;	W with the last address+1
   251                           
   252  058A  0064               	clrwdt	;clear the watchdog before getting into this loop
   253  058B                     clrloop0:	
   254  058B  0180               	clrf	0	;clear RAM location pointed to by FSR
   255  058C  0A84               	incf	4,f	;increment pointer
   256  058D  0604               	xorwf	4,w	;XOR with final address
   257  058E  1903               	btfsc	3,2	;have we reached the end yet?
   258  058F  3400               	retlw	0	;all done for this memory range, return
   259  0590  0604               	xorwf	4,w	;XOR again to restore value
   260  0591  2D8B               	goto	clrloop0	;do the next byte
   261                           
   262                           	psect	cstackCOMMON
   263  0070                     __pcstackCOMMON:	
   264  0070                     ?_ledShow:	
   265  0070                     ??_ledShow:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_Init_System:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ?_AD_Init:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_checkOutA:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_chrgCtr:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_checkBatAD:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ?_keyCtr:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ?_workCtr:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ?_ledCtr:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ?_Sleep_Mode:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0070                     ?_chrgPwmStop:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0070                     ?_chrgPwmInit:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ?_pwmInit:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ?_pwmStop:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?_Isr_Timer:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ??_Isr_Timer:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_main:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_keyRead:	
   317                           ; 1 bytes @ 0x0
   318                           
   319                           
   320                           ; 1 bytes @ 0x0
   321  0070                     	ds	3
   322  0073                     ??_Init_System:	
   323  0073                     ??_AD_Init:	
   324                           ; 1 bytes @ 0x3
   325                           
   326  0073                     ??_Sleep_Mode:	
   327                           ; 1 bytes @ 0x3
   328                           
   329  0073                     ??_chrgPwmStop:	
   330                           ; 1 bytes @ 0x3
   331                           
   332  0073                     ??_chrgPwmInit:	
   333                           ; 1 bytes @ 0x3
   334                           
   335  0073                     ??_pwmInit:	
   336                           ; 1 bytes @ 0x3
   337                           
   338  0073                     ??_pwmStop:	
   339                           ; 1 bytes @ 0x3
   340                           
   341  0073                     ?_ADC_Sample:	
   342                           ; 1 bytes @ 0x3
   343                           
   344  0073                     ??_keyRead:	
   345                           ; 1 bytes @ 0x3
   346                           
   347  0073                     ?___bmul:	
   348                           ; 1 bytes @ 0x3
   349                           
   350  0073                     ?___lbdiv:	
   351                           ; 1 bytes @ 0x3
   352                           
   353  0073                     ?___lbmod:	
   354                           ; 1 bytes @ 0x3
   355                           
   356  0073                     keyRead@keyStatus:	
   357                           ; 1 bytes @ 0x3
   358                           
   359  0073                     ADC_Sample@adldo:	
   360                           ; 1 bytes @ 0x3
   361                           
   362  0073                     ___bmul@multiplicand:	
   363                           ; 1 bytes @ 0x3
   364                           
   365  0073                     ___lbdiv@divisor:	
   366                           ; 1 bytes @ 0x3
   367                           
   368  0073                     ___lbmod@divisor:	
   369                           ; 1 bytes @ 0x3
   370                           
   371                           
   372                           ; 1 bytes @ 0x3
   373  0073                     	ds	1
   374  0074                     ??_checkOutA:	
   375  0074                     ??_checkBatAD:	
   376                           ; 1 bytes @ 0x4
   377                           
   378  0074                     ??_keyCtr:	
   379                           ; 1 bytes @ 0x4
   380                           
   381  0074                     ??___bmul:	
   382                           ; 1 bytes @ 0x4
   383                           
   384  0074                     ??___lbdiv:	
   385                           ; 1 bytes @ 0x4
   386                           
   387  0074                     ??___lbmod:	
   388                           ; 1 bytes @ 0x4
   389                           
   390  0074                     keyCtr@kclick:	
   391                           ; 1 bytes @ 0x4
   392                           
   393  0074                     ___bmul@product:	
   394                           ; 1 bytes @ 0x4
   395                           
   396  0074                     ___lbdiv@dividend:	
   397                           ; 1 bytes @ 0x4
   398                           
   399                           
   400                           ; 1 bytes @ 0x4
   401  0074                     	ds	1
   402  0075                     ___bmul@multiplier:	
   403  0075                     ___lbdiv@counter:	
   404                           ; 1 bytes @ 0x5
   405                           
   406                           
   407                           ; 1 bytes @ 0x5
   408  0075                     	ds	1
   409  0076                     ??_workCtr:	
   410  0076                     ___lbdiv@quotient:	
   411                           ; 1 bytes @ 0x6
   412                           
   413                           
   414                           ; 1 bytes @ 0x6
   415  0076                     	ds	1
   416  0077                     ??_main:	
   417                           
   418                           	psect	cstackBANK0
   419  0056                     __pcstackBANK0:	
   420                           ; 1 bytes @ 0x7
   421                           
   422  0056                     ??_chrgCtr:	
   423  0056                     ??_ADC_Sample:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0056                     ___lbmod@dividend:	
   427                           ; 1 bytes @ 0x0
   428                           
   429                           
   430                           ; 1 bytes @ 0x0
   431  0056                     	ds	1
   432  0057                     ___lbmod@counter:	
   433                           
   434                           ; 1 bytes @ 0x1
   435  0057                     	ds	1
   436  0058                     ___lbmod@rem:	
   437                           
   438                           ; 1 bytes @ 0x2
   439  0058                     	ds	1
   440  0059                     ??_ledCtr:	
   441                           
   442                           ; 1 bytes @ 0x3
   443  0059                     	ds	1
   444  005A                     ADC_Sample@j:	
   445                           
   446                           ; 1 bytes @ 0x4
   447  005A                     	ds	1
   448  005B                     ADC_Sample@adch:	
   449                           
   450                           ; 1 bytes @ 0x5
   451  005B                     	ds	1
   452  005C                     ADC_Sample@i:	
   453                           
   454                           ; 1 bytes @ 0x6
   455  005C                     	ds	1
   456  005D                     ADC_Sample@adsum:	
   457                           
   458                           ; 4 bytes @ 0x7
   459  005D                     	ds	4
   460  0061                     ADC_Sample@admin:	
   461                           
   462                           ; 2 bytes @ 0xB
   463  0061                     	ds	2
   464  0063                     ADC_Sample@admax:	
   465                           
   466                           ; 2 bytes @ 0xD
   467  0063                     	ds	2
   468  0065                     ADC_Sample@ad_temp:	
   469                           
   470                           ; 2 bytes @ 0xF
   471  0065                     	ds	3
   472  0068                     checkOutA@maxAout:	
   473                           
   474                           ; 1 bytes @ 0x12
   475  0068                     	ds	1
   476                           
   477                           	psect	maintext
   478  047C                     __pmaintext:	
   479 ;;
   480 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   481 ;;
   482 ;; *************** function _main *****************
   483 ;; Defined at:
   484 ;;		line 124 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;		None
   487 ;; Auto vars:     Size  Location     Type
   488 ;;		None
   489 ;; Return value:  Size  Location     Type
   490 ;;                  1    wreg      void 
   491 ;; Registers used:
   492 ;;		wreg, status,2, status,0, pclath, cstack
   493 ;; Tracked objects:
   494 ;;		On entry : B00/0
   495 ;;		On exit  : 100/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMMON   BANK0   BANK1
   498 ;;      Params:         0       0       0
   499 ;;      Locals:         0       0       0
   500 ;;      Temps:          0       0       0
   501 ;;      Totals:         0       0       0
   502 ;;Total ram usage:        0 bytes
   503 ;; Hardware stack levels required when called:    4
   504 ;; This function calls:
   505 ;;		_AD_Init
   506 ;;		_Init_System
   507 ;;		_Sleep_Mode
   508 ;;		_checkBatAD
   509 ;;		_checkOutA
   510 ;;		_chrgCtr
   511 ;;		_keyCtr
   512 ;;		_ledCtr
   513 ;;		_workCtr
   514 ;; This function is called by:
   515 ;;		Startup code after reset
   516 ;; This function uses a non-reentrant model
   517 ;;
   518                           
   519                           
   520                           ;psect for function _main
   521  047C                     _main:	
   522                           
   523                           ;main.c: 126: Init_System();
   524                           
   525                           ;incstack = 0
   526                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   527  047C  24DB               	fcall	_Init_System
   528                           
   529                           ;main.c: 127: AD_Init();
   530  047D  259A               	fcall	_AD_Init
   531                           
   532                           ;main.c: 128: firstTime = 100;
   533  047E  3064               	movlw	100
   534  047F  1283               	bcf	3,5	;RP0=0, select bank0
   535  0480  00E9               	movwf	_firstTime
   536  0481                     l661:	
   537                           ;main.c: 129: while (1)
   538                           
   539  0481  0064               	clrwdt	;# 
   540                           
   541                           ;main.c: 132: if(intCount10 > 10)
   542  0482  300B               	movlw	11
   543  0483  1283               	bcf	3,5	;RP0=0, select bank0
   544  0484  0250               	subwf	_intCount10,w
   545  0485  1C03               	skipc
   546  0486  2C89               	goto	l3433
   547                           
   548                           ;main.c: 133: {
   549                           ;main.c: 134: intCount10 = 0;
   550  0487  01D0               	clrf	_intCount10
   551                           
   552                           ;main.c: 135: checkOutA();
   553  0488  2205               	fcall	_checkOutA
   554  0489                     l3433:	
   555                           
   556                           ;main.c: 136: }
   557                           ;main.c: 137: if(!IntFlag)
   558  0489  1283               	bcf	3,5	;RP0=0, select bank0
   559  048A  0852               	movf	_IntFlag,w
   560  048B  1903               	btfsc	3,2
   561  048C  2C81               	goto	l661
   562                           
   563                           ;main.c: 139: IntFlag = 0;
   564  048D  01D2               	clrf	_IntFlag
   565                           
   566                           ;main.c: 140: chrgCtr();
   567  048E  2018               	fcall	_chrgCtr
   568                           
   569                           ;main.c: 141: checkBatAD();
   570  048F  22B5               	fcall	_checkBatAD
   571                           
   572                           ;main.c: 142: if(chrgFlag == 0 && lowBatFlag == 0)
   573  0490  087A               	movf	_chrgFlag,w
   574  0491  1D03               	btfss	3,2
   575  0492  2C98               	goto	l665
   576  0493  1283               	bcf	3,5	;RP0=0, select bank0
   577  0494  0835               	movf	_lowBatFlag,w
   578  0495  1D03               	btfss	3,2
   579  0496  2C98               	goto	l665
   580                           
   581                           ;main.c: 143: {
   582                           ;main.c: 144: keyCtr();
   583  0497  24B3               	fcall	_keyCtr
   584  0498                     l665:	
   585                           
   586                           ;main.c: 145: }
   587                           ;main.c: 146: workCtr();
   588  0498  2442               	fcall	_workCtr
   589                           
   590                           ;main.c: 147: ledCtr();
   591  0499  23B3               	fcall	_ledCtr
   592                           
   593                           ;main.c: 148: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0)
   594  049A  087A               	movf	_chrgFlag,w
   595  049B  1D03               	btfss	3,2
   596  049C  2CB1               	goto	l3465
   597  049D  0879               	movf	_workStep,w
   598  049E  1D03               	btfss	3,2
   599  049F  2CB1               	goto	l3465
   600  04A0  084B               	movf	_keyCount,w
   601  04A1  1D03               	btfss	3,2
   602  04A2  2CB1               	goto	l3465
   603  04A3  0869               	movf	_firstTime,w
   604  04A4  1D03               	btfss	3,2
   605  04A5  2CB1               	goto	l3465
   606  04A6  0840               	movf	_showBatTime,w
   607  04A7  1D03               	btfss	3,2
   608  04A8  2CB1               	goto	l3465
   609                           
   610                           ;main.c: 149: {
   611                           ;main.c: 150: if(++sleepTime >= 200)
   612  04A9  30C8               	movlw	200
   613  04AA  0AB4               	incf	_sleepTime,f
   614  04AB  0234               	subwf	_sleepTime,w
   615  04AC  1C03               	skipc
   616  04AD  2C81               	goto	l661
   617                           
   618                           ;main.c: 151: {
   619                           ;main.c: 152: sleepTime = 0;
   620  04AE  01B4               	clrf	_sleepTime
   621                           
   622                           ;main.c: 153: Sleep_Mode();
   623  04AF  2404               	fcall	_Sleep_Mode
   624  04B0  2C81               	goto	l661
   625  04B1                     l3465:	
   626                           
   627                           ;main.c: 156: else
   628                           ;main.c: 157: {
   629                           ;main.c: 158: sleepTime = 0;
   630  04B1  01B4               	clrf	_sleepTime
   631  04B2  2C81               	goto	l661
   632  04B3                     __end_of_main:	
   633                           
   634                           	psect	text1
   635  0442                     __ptext1:	
   636 ;; *************** function _workCtr *****************
   637 ;; Defined at:
   638 ;;		line 534 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;		None
   641 ;; Auto vars:     Size  Location     Type
   642 ;;		None
   643 ;; Return value:  Size  Location     Type
   644 ;;                  1    wreg      void 
   645 ;; Registers used:
   646 ;;		wreg, status,2, status,0, pclath, cstack
   647 ;; Tracked objects:
   648 ;;		On entry : 0/0
   649 ;;		On exit  : 100/0
   650 ;;		Unchanged: 0/0
   651 ;; Data sizes:     COMMON   BANK0   BANK1
   652 ;;      Params:         0       0       0
   653 ;;      Locals:         0       0       0
   654 ;;      Temps:          0       0       0
   655 ;;      Totals:         0       0       0
   656 ;;Total ram usage:        0 bytes
   657 ;; Hardware stack levels used:    1
   658 ;; Hardware stack levels required when called:    3
   659 ;; This function calls:
   660 ;;		___bmul
   661 ;;		_pwmInit
   662 ;;		_pwmStop
   663 ;; This function is called by:
   664 ;;		_main
   665 ;; This function uses a non-reentrant model
   666 ;;
   667                           
   668                           
   669                           ;psect for function _workCtr
   670  0442                     _workCtr:	
   671                           
   672                           ;main.c: 537: if(startTime > 0)
   673                           
   674                           ;incstack = 0
   675                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   676  0442  1283               	bcf	3,5	;RP0=0, select bank0
   677  0443  0845               	movf	_startTime,w
   678  0444  1D03               	btfss	3,2
   679                           
   680                           ;main.c: 538: {
   681                           ;main.c: 539: startTime--;
   682  0445  03C5               	decf	_startTime,f
   683                           
   684                           ;main.c: 540: }
   685                           ;main.c: 541: if(workStep > 0)
   686  0446  0879               	movf	_workStep,w
   687  0447  1903               	btfsc	3,2
   688  0448  2C78               	goto	l2765
   689                           
   690                           ;main.c: 542: {
   691                           ;main.c: 543: if((PWMCON0 & 0x02) == 0)
   692  0449  1895               	btfsc	21,1	;volatile
   693  044A  2C4C               	goto	l783
   694                           
   695                           ;main.c: 544: {
   696                           ;main.c: 545: pwmInit();
   697  044B  2592               	fcall	_pwmInit
   698  044C                     l783:	
   699                           
   700                           ;main.c: 546: }
   701                           ;main.c: 547: maxDuty = 33 + (workStep*11);
   702  044C  300B               	movlw	11
   703  044D  00F3               	movwf	___bmul@multiplicand
   704  044E  0879               	movf	_workStep,w
   705  044F  256F               	fcall	___bmul
   706  0450  3E21               	addlw	33
   707  0451  00C9               	movwf	_maxDuty
   708                           
   709                           ;main.c: 548: if(overCount >= 5)
   710  0452  3005               	movlw	5
   711  0453  0248               	subwf	_overCount,w
   712  0454  1C03               	skipc
   713  0455  2C68               	goto	l2757
   714                           
   715                           ;main.c: 549: {
   716                           ;main.c: 550: if(++count5s > 500)
   717  0456  0AA4               	incf	_count5s,f
   718  0457  1903               	skipnz
   719  0458  0AA5               	incf	_count5s+1,f
   720  0459  3001               	movlw	1
   721  045A  0225               	subwf	_count5s+1,w
   722  045B  30F5               	movlw	245
   723  045C  1903               	skipnz
   724  045D  0224               	subwf	_count5s,w
   725  045E  1C03               	skipc
   726  045F  2C6A               	goto	l2759
   727  0460  30B4               	movlw	180
   728                           
   729                           ;main.c: 551: {
   730                           ;main.c: 552: count5s = 0;
   731  0461  01A4               	clrf	_count5s
   732  0462  01A5               	clrf	_count5s+1
   733                           
   734                           ;main.c: 553: overWorkTime = 180;
   735  0463  00B7               	movwf	_overWorkTime
   736                           
   737                           ;main.c: 554: preLedStep = workStep;
   738  0464  0879               	movf	_workStep,w
   739  0465  00B6               	movwf	_preLedStep
   740                           
   741                           ;main.c: 555: workStep = 0;
   742  0466  01F9               	clrf	_workStep
   743  0467  2C6A               	goto	l2759
   744  0468                     l2757:	
   745                           
   746                           ;main.c: 559: else
   747                           ;main.c: 560: {
   748                           ;main.c: 561: count5s = 0;
   749  0468  01A4               	clrf	_count5s
   750  0469  01A5               	clrf	_count5s+1
   751  046A                     l2759:	
   752                           
   753                           ;main.c: 562: }
   754                           ;main.c: 563: if(count1s == 0 && ++count900s >= 900)
   755  046A  0853               	movf	_count1s,w
   756  046B  1D03               	btfss	3,2
   757  046C  0008               	return
   758  046D  0AA0               	incf	_count900s,f
   759  046E  1903               	skipnz
   760  046F  0AA1               	incf	_count900s+1,f
   761  0470  3003               	movlw	3
   762  0471  0221               	subwf	_count900s+1,w
   763  0472  3084               	movlw	132
   764  0473  1903               	skipnz
   765  0474  0220               	subwf	_count900s,w
   766  0475  1803               	btfsc	3,0
   767                           
   768                           ;main.c: 564: {
   769                           ;main.c: 565: workStep = 0;
   770  0476  01F9               	clrf	_workStep
   771  0477  0008               	return
   772  0478                     l2765:	
   773                           
   774                           ;main.c: 568: else
   775                           ;main.c: 569: {
   776                           ;main.c: 570: pwmStop();
   777  0478  25A7               	fcall	_pwmStop
   778                           
   779                           ;main.c: 571: count900s = 0;
   780  0479  01A0               	clrf	_count900s
   781  047A  01A1               	clrf	_count900s+1
   782  047B  0008               	return
   783  047C                     __end_of_workCtr:	
   784                           
   785                           	psect	text2
   786  05A7                     __ptext2:	
   787 ;; *************** function _pwmStop *****************
   788 ;; Defined at:
   789 ;;		line 920 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;		None
   792 ;; Auto vars:     Size  Location     Type
   793 ;;		None
   794 ;; Return value:  Size  Location     Type
   795 ;;                  1    wreg      void 
   796 ;; Registers used:
   797 ;;		None
   798 ;; Tracked objects:
   799 ;;		On entry : 100/0
   800 ;;		On exit  : 100/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMMON   BANK0   BANK1
   803 ;;      Params:         0       0       0
   804 ;;      Locals:         0       0       0
   805 ;;      Temps:          0       0       0
   806 ;;      Totals:         0       0       0
   807 ;;Total ram usage:        0 bytes
   808 ;; Hardware stack levels used:    1
   809 ;; Hardware stack levels required when called:    2
   810 ;; This function calls:
   811 ;;		Nothing
   812 ;; This function is called by:
   813 ;;		_workCtr
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           
   818                           ;psect for function _pwmStop
   819  05A7                     _pwmStop:	
   820                           
   821                           ;main.c: 922: PWMCON0 &= 0XFD;
   822                           
   823                           ;incstack = 0
   824                           ; Regs used in _pwmStop: []
   825  05A7  1095               	bcf	21,1	;volatile
   826                           
   827                           ;main.c: 923: RB1 = 0;
   828  05A8  1086               	bcf	6,1	;volatile
   829  05A9  0008               	return
   830  05AA                     __end_of_pwmStop:	
   831                           
   832                           	psect	text3
   833  0592                     __ptext3:	
   834 ;; *************** function _pwmInit *****************
   835 ;; Defined at:
   836 ;;		line 905 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
   837 ;; Parameters:    Size  Location     Type
   838 ;;		None
   839 ;; Auto vars:     Size  Location     Type
   840 ;;		None
   841 ;; Return value:  Size  Location     Type
   842 ;;                  1    wreg      void 
   843 ;; Registers used:
   844 ;;		wreg, status,2
   845 ;; Tracked objects:
   846 ;;		On entry : 100/0
   847 ;;		On exit  : 100/0
   848 ;;		Unchanged: 0/0
   849 ;; Data sizes:     COMMON   BANK0   BANK1
   850 ;;      Params:         0       0       0
   851 ;;      Locals:         0       0       0
   852 ;;      Temps:          0       0       0
   853 ;;      Totals:         0       0       0
   854 ;;Total ram usage:        0 bytes
   855 ;; Hardware stack levels used:    1
   856 ;; Hardware stack levels required when called:    2
   857 ;; This function calls:
   858 ;;		Nothing
   859 ;; This function is called by:
   860 ;;		_workCtr
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864                           
   865                           ;psect for function _pwmInit
   866  0592                     _pwmInit:	
   867                           
   868                           ;main.c: 907: PWMCON1 = 0B00000000;
   869                           
   870                           ;incstack = 0
   871                           ; Regs used in _pwmInit: [wreg+status,2]
   872                           
   873                           ;main.c: 908: PWMTH = 0X00;
   874                           
   875                           ;main.c: 909: PWMTL = 100;
   876                           
   877                           ;main.c: 912: PWMD01H = 0;
   878  0592  2584               	fcall	PL8	;call to abstracted procedure
   879                           
   880                           ;main.c: 913: PWMD1L = 50;
   881  0593  3032               	movlw	50
   882  0594  009A               	movwf	26	;volatile
   883                           
   884                           ;main.c: 914: PWM01DT = 0X00;
   885  0595  019F               	clrf	31	;volatile
   886                           
   887                           ;main.c: 916: PWMCON0 = 0X62;
   888  0596  3062               	movlw	98
   889  0597  0095               	movwf	21	;volatile
   890                           
   891                           ;main.c: 917: PWMCON2 =0X00;
   892  0598  019D               	clrf	29	;volatile
   893  0599  0008               	return
   894  059A                     __end_of_pwmInit:	
   895                           
   896                           	psect	text4
   897  056F                     __ptext4:	
   898 ;; *************** function ___bmul *****************
   899 ;; Defined at:
   900 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul8.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;  multiplier      1    wreg     unsigned char 
   903 ;;  multiplicand    1    3[COMMON] unsigned char 
   904 ;; Auto vars:     Size  Location     Type
   905 ;;  multiplier      1    5[COMMON] unsigned char 
   906 ;;  product         1    4[COMMON] unsigned char 
   907 ;; Return value:  Size  Location     Type
   908 ;;                  1    wreg      unsigned char 
   909 ;; Registers used:
   910 ;;		wreg, status,2, status,0
   911 ;; Tracked objects:
   912 ;;		On entry : 100/0
   913 ;;		On exit  : 100/0
   914 ;;		Unchanged: 100/0
   915 ;; Data sizes:     COMMON   BANK0   BANK1
   916 ;;      Params:         1       0       0
   917 ;;      Locals:         2       0       0
   918 ;;      Temps:          0       0       0
   919 ;;      Totals:         3       0       0
   920 ;;Total ram usage:        3 bytes
   921 ;; Hardware stack levels used:    1
   922 ;; Hardware stack levels required when called:    2
   923 ;; This function calls:
   924 ;;		Nothing
   925 ;; This function is called by:
   926 ;;		_workCtr
   927 ;; This function uses a non-reentrant model
   928 ;;
   929                           
   930                           
   931                           ;psect for function ___bmul
   932  056F                     ___bmul:	
   933                           
   934                           ;incstack = 0
   935                           ; Regs used in ___bmul: [wreg+status,2+status,0]
   936                           ;___bmul@multiplier stored from wreg
   937  056F  00F5               	movwf	___bmul@multiplier
   938  0570  01F4               	clrf	___bmul@product
   939  0571                     l2275:	
   940  0571  0873               	movf	___bmul@multiplicand,w
   941  0572  1875               	btfsc	___bmul@multiplier,0
   942  0573  07F4               	addwf	___bmul@product,f
   943  0574  1003               	clrc
   944  0575  0DF3               	rlf	___bmul@multiplicand,f
   945  0576  1003               	clrc
   946  0577  0CF5               	rrf	___bmul@multiplier,f
   947  0578  0875               	movf	___bmul@multiplier,w
   948  0579  1D03               	btfss	3,2
   949  057A  2D71               	goto	l2275
   950  057B  0874               	movf	___bmul@product,w
   951  057C  0008               	return
   952  057D                     __end_of___bmul:	
   953                           
   954                           	psect	text5
   955  03B3                     __ptext5:	
   956 ;; *************** function _ledCtr *****************
   957 ;; Defined at:
   958 ;;		line 231 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
   959 ;; Parameters:    Size  Location     Type
   960 ;;		None
   961 ;; Auto vars:     Size  Location     Type
   962 ;;		None
   963 ;; Return value:  Size  Location     Type
   964 ;;                  1    wreg      void 
   965 ;; Registers used:
   966 ;;		wreg, status,2, status,0, pclath, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 100/0
   969 ;;		On exit  : 100/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMMON   BANK0   BANK1
   972 ;;      Params:         0       0       0
   973 ;;      Locals:         0       0       0
   974 ;;      Temps:          0       1       0
   975 ;;      Totals:         0       1       0
   976 ;;Total ram usage:        1 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    3
   979 ;; This function calls:
   980 ;;		___lbdiv
   981 ;;		___lbmod
   982 ;; This function is called by:
   983 ;;		_main
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           
   988                           ;psect for function _ledCtr
   989  03B3                     _ledCtr:	
   990                           
   991                           ;main.c: 233: if(firstTime > 0)
   992                           
   993                           ;incstack = 0
   994                           ; Regs used in _ledCtr: [wreg+status,2+status,0+pclath+cstack]
   995  03B3  0869               	movf	_firstTime,w
   996  03B4  1903               	btfsc	3,2
   997  03B5  2BC0               	goto	l3381
   998  03B6  3006               	movlw	6
   999                           
  1000                           ;main.c: 234: {
  1001                           ;main.c: 235: firstTime--;
  1002  03B7  03E9               	decf	_firstTime,f
  1003                           
  1004                           ;main.c: 236: ledStep = 6;
  1005  03B8  00F8               	movwf	_ledStep
  1006                           
  1007                           ;main.c: 237: if(prePwStep < pwStep)
  1008  03B9  0843               	movf	_pwStep,w
  1009  03BA  0277               	subwf	_prePwStep,w
  1010  03BB  1803               	skipnc
  1011  03BC  0008               	return
  1012                           
  1013                           ;main.c: 238: {
  1014                           ;main.c: 239: prePwStep = pwStep;
  1015  03BD  0843               	movf	_pwStep,w
  1016  03BE  00F7               	movwf	_prePwStep
  1017  03BF  0008               	return
  1018  03C0                     l3381:	
  1019                           
  1020                           ;main.c: 242: else if(overWorkTime > 0)
  1021  03C0  0837               	movf	_overWorkTime,w
  1022  03C1  1903               	btfsc	3,2
  1023  03C2  2BD2               	goto	l3391
  1024  03C3  303C               	movlw	60
  1025                           
  1026                           ;main.c: 243: {
  1027                           ;main.c: 244: overWorkTime--;
  1028  03C4  03B7               	decf	_overWorkTime,f
  1029                           
  1030                           ;main.c: 245: if(overWorkTime % 60 < 30)
  1031  03C5  00F3               	movwf	___lbmod@divisor
  1032  03C6  0837               	movf	_overWorkTime,w
  1033  03C7  2538               	fcall	___lbmod
  1034  03C8  00D9               	movwf	??_ledCtr
  1035  03C9  301E               	movlw	30
  1036  03CA  0259               	subwf	??_ledCtr,w
  1037  03CB  1803               	skipnc
  1038  03CC  2BD0               	goto	l3389
  1039                           
  1040                           ;main.c: 246: {
  1041                           ;main.c: 247: ledStep = preLedStep;
  1042  03CD  0836               	movf	_preLedStep,w
  1043  03CE  00F8               	movwf	_ledStep
  1044                           
  1045                           ;main.c: 248: }
  1046  03CF  0008               	return
  1047  03D0                     l3389:	
  1048                           
  1049                           ;main.c: 249: else
  1050                           ;main.c: 250: {
  1051                           ;main.c: 251: ledStep = 0;
  1052  03D0  01F8               	clrf	_ledStep
  1053  03D1  0008               	return
  1054  03D2                     l3391:	
  1055                           
  1056                           ;main.c: 254: else if(showBatTime > 0)
  1057  03D2  0840               	movf	_showBatTime,w
  1058  03D3  1903               	btfsc	3,2
  1059  03D4  2BEC               	goto	l3409
  1060  03D5  300E               	movlw	14
  1061                           
  1062                           ;main.c: 255: {
  1063                           ;main.c: 256: showBatTime--;
  1064  03D6  03C0               	decf	_showBatTime,f
  1065                           
  1066                           ;main.c: 257: if(prePwStep >= 14)
  1067  03D7  0277               	subwf	_prePwStep,w
  1068  03D8  1C03               	skipc
  1069  03D9  2BE0               	goto	l3399
  1070                           
  1071                           ;main.c: 258: {
  1072                           ;main.c: 259: ledStep = prePwStep/14;
  1073  03DA  300E               	movlw	14
  1074  03DB  00F3               	movwf	___lbdiv@divisor
  1075  03DC  0877               	movf	_prePwStep,w
  1076  03DD  2554               	fcall	___lbdiv
  1077  03DE  00F8               	movwf	_ledStep
  1078                           
  1079                           ;main.c: 260: }
  1080  03DF  0008               	return
  1081  03E0                     l3399:	
  1082                           
  1083                           ;main.c: 261: else if(prePwStep > 5)
  1084  03E0  3006               	movlw	6
  1085  03E1  0277               	subwf	_prePwStep,w
  1086  03E2  1C03               	skipc
  1087  03E3  2BE7               	goto	l3403
  1088  03E4                     l3401:	
  1089                           
  1090                           ;main.c: 262: {
  1091                           ;main.c: 263: ledStep = 1;
  1092  03E4  01F8               	clrf	_ledStep
  1093  03E5  0AF8               	incf	_ledStep,f
  1094                           
  1095                           ;main.c: 264: }
  1096  03E6  0008               	return
  1097  03E7                     l3403:	
  1098                           
  1099                           ;main.c: 265: else
  1100                           ;main.c: 266: {
  1101                           ;main.c: 267: if(count1s < 50)
  1102  03E7  3032               	movlw	50
  1103  03E8  0253               	subwf	_count1s,w
  1104  03E9  1C03               	btfss	3,0
  1105  03EA  2BE4               	goto	l3401
  1106  03EB  2BD0               	goto	l3389
  1107  03EC                     l3409:	
  1108                           ;main.c: 274: }
  1109                           ;main.c: 275: }
  1110                           ;main.c: 276: }
  1111                           
  1112                           
  1113                           ;main.c: 277: else if(workStep > 0)
  1114  03EC  0879               	movf	_workStep,w
  1115  03ED  1903               	btfsc	3,2
  1116  03EE  2BF2               	goto	l3413
  1117                           
  1118                           ;main.c: 278: {
  1119                           ;main.c: 279: ledStep = workStep;
  1120  03EF  0879               	movf	_workStep,w
  1121  03F0  00F8               	movwf	_ledStep
  1122                           
  1123                           ;main.c: 280: }
  1124  03F1  0008               	return
  1125  03F2                     l3413:	
  1126                           
  1127                           ;main.c: 281: else if(chrgFlag)
  1128  03F2  087A               	movf	_chrgFlag,w
  1129  03F3  1903               	btfsc	3,2
  1130  03F4  2BD0               	goto	l3389
  1131                           
  1132                           ;main.c: 282: {
  1133                           ;main.c: 283: if(count1s % 50 == 0)
  1134  03F5  3032               	movlw	50
  1135  03F6  00F3               	movwf	___lbmod@divisor
  1136  03F7  0853               	movf	_count1s,w
  1137  03F8  2538               	fcall	___lbmod
  1138  03F9  3A00               	xorlw	0
  1139  03FA  1D03               	skipz
  1140  03FB  0008               	return
  1141                           
  1142                           ;main.c: 284: {
  1143                           ;main.c: 285: if(++ledStep > 6)
  1144  03FC  3007               	movlw	7
  1145  03FD  0AF8               	incf	_ledStep,f
  1146  03FE  0278               	subwf	_ledStep,w
  1147  03FF  1C03               	skipc
  1148  0400  0008               	return
  1149                           
  1150                           ;main.c: 286: {
  1151                           ;main.c: 287: ledStep = lockLedStep;
  1152  0401  0841               	movf	_lockLedStep,w
  1153  0402  00F8               	movwf	_ledStep
  1154  0403  0008               	return
  1155  0404                     __end_of_ledCtr:	
  1156                           
  1157                           	psect	text6
  1158  0538                     __ptext6:	
  1159 ;; *************** function ___lbmod *****************
  1160 ;; Defined at:
  1161 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;  dividend        1    wreg     unsigned char 
  1164 ;;  divisor         1    3[COMMON] unsigned char 
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;  dividend        1    0[BANK0 ] unsigned char 
  1167 ;;  rem             1    2[BANK0 ] unsigned char 
  1168 ;;  counter         1    1[BANK0 ] unsigned char 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      unsigned char 
  1171 ;; Registers used:
  1172 ;;		wreg, status,2, status,0
  1173 ;; Tracked objects:
  1174 ;;		On entry : 100/0
  1175 ;;		On exit  : 100/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMMON   BANK0   BANK1
  1178 ;;      Params:         1       0       0
  1179 ;;      Locals:         0       3       0
  1180 ;;      Temps:          1       0       0
  1181 ;;      Totals:         2       3       0
  1182 ;;Total ram usage:        5 bytes
  1183 ;; Hardware stack levels used:    1
  1184 ;; Hardware stack levels required when called:    2
  1185 ;; This function calls:
  1186 ;;		Nothing
  1187 ;; This function is called by:
  1188 ;;		_ledCtr
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192                           
  1193                           ;psect for function ___lbmod
  1194  0538                     ___lbmod:	
  1195                           
  1196                           ;incstack = 0
  1197                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1198                           ;___lbmod@dividend stored from wreg
  1199  0538  00D6               	movwf	___lbmod@dividend
  1200  0539  3008               	movlw	8
  1201  053A  00D7               	movwf	___lbmod@counter
  1202  053B  01D8               	clrf	___lbmod@rem
  1203  053C                     l3033:	
  1204  053C  0856               	movf	___lbmod@dividend,w
  1205  053D  00F4               	movwf	??___lbmod
  1206  053E  3007               	movlw	7
  1207  053F  1003               	clrc
  1208  0540                     L1:	
  1209  0540  0CF4               	rrf	??___lbmod,f
  1210  0541  3EFF               	addlw	-1
  1211  0542  1003               	clrc
  1212  0543  1D03               	skipz
  1213  0544  2D40               	goto	L1
  1214  0545  0D58               	rlf	___lbmod@rem,w
  1215  0546  0474               	iorwf	??___lbmod,w
  1216  0547  00D8               	movwf	___lbmod@rem
  1217  0548  1003               	clrc
  1218  0549  0DD6               	rlf	___lbmod@dividend,f
  1219  054A  0873               	movf	___lbmod@divisor,w
  1220  054B  0258               	subwf	___lbmod@rem,w
  1221  054C  1C03               	skipc
  1222  054D  2D50               	goto	l3041
  1223  054E  0873               	movf	___lbmod@divisor,w
  1224  054F  02D8               	subwf	___lbmod@rem,f
  1225  0550                     l3041:	
  1226  0550  0BD7               	decfsz	___lbmod@counter,f
  1227  0551  2D3C               	goto	l3033
  1228  0552  0858               	movf	___lbmod@rem,w
  1229  0553  0008               	return
  1230  0554                     __end_of___lbmod:	
  1231                           
  1232                           	psect	text7
  1233  04B3                     __ptext7:	
  1234 ;; *************** function _keyCtr *****************
  1235 ;; Defined at:
  1236 ;;		line 497 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;		None
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;  kclick          1    4[COMMON] unsigned char 
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  1    wreg      void 
  1243 ;; Registers used:
  1244 ;;		wreg, status,2, status,0, pclath, cstack
  1245 ;; Tracked objects:
  1246 ;;		On entry : 100/0
  1247 ;;		On exit  : 100/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMMON   BANK0   BANK1
  1250 ;;      Params:         0       0       0
  1251 ;;      Locals:         1       0       0
  1252 ;;      Temps:          0       0       0
  1253 ;;      Totals:         1       0       0
  1254 ;;Total ram usage:        1 bytes
  1255 ;; Hardware stack levels used:    1
  1256 ;; Hardware stack levels required when called:    3
  1257 ;; This function calls:
  1258 ;;		_keyRead
  1259 ;; This function is called by:
  1260 ;;		_main
  1261 ;; This function uses a non-reentrant model
  1262 ;;
  1263                           
  1264                           
  1265                           ;psect for function _keyCtr
  1266  04B3                     _keyCtr:	
  1267                           
  1268                           ;main.c: 499: char kclick = keyRead(0x04 & (~PORTB));
  1269                           
  1270                           ;incstack = 0
  1271                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1272  04B3  0906               	comf	6,w	;volatile
  1273  04B4  3904               	andlw	4
  1274  04B5  24FD               	fcall	_keyRead
  1275  04B6  00F4               	movwf	keyCtr@kclick
  1276                           
  1277                           ;main.c: 500: if(kclick == 1)
  1278  04B7  0B74               	decfsz	keyCtr@kclick,w
  1279  04B8  2CCD               	goto	l2727
  1280                           
  1281                           ;main.c: 501: {
  1282                           ;main.c: 502: if(workStep > 0)
  1283  04B9  0879               	movf	_workStep,w
  1284  04BA  1903               	btfsc	3,2
  1285  04BB  2CC4               	goto	l2719
  1286                           
  1287                           ;main.c: 503: {
  1288                           ;main.c: 504: if(++workStep > 6)
  1289  04BC  3007               	movlw	7
  1290  04BD  0AF9               	incf	_workStep,f
  1291  04BE  0279               	subwf	_workStep,w
  1292  04BF  1C03               	skipc
  1293  04C0  0008               	return
  1294                           
  1295                           ;main.c: 505: {
  1296                           ;main.c: 506: workStep = 1;
  1297  04C1  01F9               	clrf	_workStep
  1298  04C2  0AF9               	incf	_workStep,f
  1299  04C3  0008               	return
  1300  04C4                     l2719:	
  1301                           
  1302                           ;main.c: 509: else if(showBatTime > 0)
  1303  04C4  0840               	movf	_showBatTime,w
  1304  04C5  1903               	btfsc	3,2
  1305  04C6  2CC9               	goto	l2723
  1306  04C7                     l2721:	
  1307                           
  1308                           ;main.c: 510: {
  1309                           ;main.c: 511: showBatTime = 0;
  1310  04C7  01C0               	clrf	_showBatTime
  1311                           
  1312                           ;main.c: 512: }
  1313  04C8  0008               	return
  1314  04C9                     l2723:	
  1315                           
  1316                           ;main.c: 513: else
  1317                           ;main.c: 514: {
  1318                           ;main.c: 515: showBatTime = 200;
  1319  04C9  30C8               	movlw	200
  1320  04CA  00C0               	movwf	_showBatTime
  1321                           
  1322                           ;main.c: 516: count1s = 0;
  1323  04CB  01D3               	clrf	_count1s
  1324  04CC  0008               	return
  1325  04CD                     l2727:	
  1326                           
  1327                           ;main.c: 519: else if(kclick == 2)
  1328  04CD  3002               	movlw	2
  1329  04CE  0674               	xorwf	keyCtr@kclick,w
  1330  04CF  1D03               	btfss	3,2
  1331  04D0  0008               	return
  1332                           
  1333                           ;main.c: 520: {
  1334                           ;main.c: 521: if(workStep > 0)
  1335  04D1  0879               	movf	_workStep,w
  1336  04D2  1903               	btfsc	3,2
  1337  04D3  2CD6               	goto	l776
  1338                           
  1339                           ;main.c: 522: {
  1340                           ;main.c: 523: workStep = 0;
  1341  04D4  01F9               	clrf	_workStep
  1342                           
  1343                           ;main.c: 524: }
  1344  04D5  0008               	return
  1345  04D6                     l776:	
  1346  04D6  301E               	movlw	30
  1347                           
  1348                           ;main.c: 525: else
  1349                           ;main.c: 526: {
  1350                           ;main.c: 527: workStep = 1;
  1351  04D7  01F9               	clrf	_workStep
  1352  04D8  0AF9               	incf	_workStep,f
  1353                           
  1354                           ;main.c: 528: startTime = 30;
  1355  04D9  00C5               	movwf	_startTime
  1356  04DA  2CC7               	goto	l2721
  1357  04DB                     __end_of_keyCtr:	
  1358                           
  1359                           	psect	text8
  1360  04FD                     __ptext8:	
  1361 ;; *************** function _keyRead *****************
  1362 ;; Defined at:
  1363 ;;		line 464 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;  keyStatus       1    wreg     unsigned char 
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;  keyStatus       1    3[COMMON] unsigned char 
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  1    wreg      unsigned char 
  1370 ;; Registers used:
  1371 ;;		wreg, status,2, status,0
  1372 ;; Tracked objects:
  1373 ;;		On entry : 100/0
  1374 ;;		On exit  : 100/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMMON   BANK0   BANK1
  1377 ;;      Params:         0       0       0
  1378 ;;      Locals:         1       0       0
  1379 ;;      Temps:          0       0       0
  1380 ;;      Totals:         1       0       0
  1381 ;;Total ram usage:        1 bytes
  1382 ;; Hardware stack levels used:    1
  1383 ;; Hardware stack levels required when called:    2
  1384 ;; This function calls:
  1385 ;;		Nothing
  1386 ;; This function is called by:
  1387 ;;		_keyCtr
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           
  1392                           ;psect for function _keyRead
  1393  04FD                     _keyRead:	
  1394                           
  1395                           ;incstack = 0
  1396                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1397                           ;keyRead@keyStatus stored from wreg
  1398  04FD  00F3               	movwf	keyRead@keyStatus
  1399                           
  1400                           ;main.c: 466: if(keyStatus)
  1401  04FE  0873               	movf	keyRead@keyStatus,w
  1402  04FF  3064               	movlw	100
  1403  0500  1903               	btfsc	3,2
  1404  0501  2D0F               	goto	L3
  1405                           
  1406                           ;main.c: 467: {
  1407                           ;main.c: 468: keyCount++;
  1408  0502  0ACB               	incf	_keyCount,f
  1409                           
  1410                           ;main.c: 469: if(keyCount >= 100)
  1411  0503  024B               	subwf	_keyCount,w
  1412  0504  1C03               	skipc
  1413  0505  3400               	retlw	0
  1414                           
  1415                           ;main.c: 470: {
  1416                           ;main.c: 471: keyCount = 100;
  1417  0506  3064               	movlw	100
  1418  0507  00CB               	movwf	_keyCount
  1419                           
  1420                           ;main.c: 472: if(!longPressFlag)
  1421  0508  084A               	movf	_longPressFlag,w
  1422  0509  1D03               	btfss	3,2
  1423  050A  3400               	retlw	0
  1424  050B  3002               	movlw	2
  1425                           
  1426                           ;main.c: 473: {
  1427                           ;main.c: 474: longPressFlag = 1;
  1428  050C  01CA               	clrf	_longPressFlag
  1429  050D  0ACA               	incf	_longPressFlag,f
  1430                           
  1431                           ;main.c: 475: return 2;
  1432  050E  0008               	return
  1433  050F                     L3:	
  1434                           ;main.c: 479: else
  1435                           ;main.c: 480: {
  1436                           ;main.c: 481: if(keyCount >= 100)
  1437                           
  1438  050F  024B               	subwf	_keyCount,w
  1439  0510  1C03               	skipc
  1440  0511  2D15               	goto	l2175
  1441                           
  1442                           ;main.c: 482: {
  1443                           ;main.c: 483: keyCount = 0;
  1444  0512  01CB               	clrf	_keyCount
  1445                           
  1446                           ;main.c: 484: longPressFlag = 0;
  1447  0513  01CA               	clrf	_longPressFlag
  1448                           
  1449                           ;main.c: 485: return 0;
  1450  0514  3400               	retlw	0
  1451  0515                     l2175:	
  1452                           
  1453                           ;main.c: 487: else if(keyCount >= 6)
  1454  0515  3006               	movlw	6
  1455  0516  024B               	subwf	_keyCount,w
  1456                           
  1457                           ;main.c: 488: {
  1458                           ;main.c: 489: keyCount = 0;
  1459  0517  01CB               	clrf	_keyCount
  1460  0518  1803               	btfsc	3,0
  1461                           
  1462                           ;main.c: 490: return 1;
  1463  0519  3401               	retlw	1
  1464  051A  3400               	retlw	0
  1465  051B                     __end_of_keyRead:	
  1466                           ;main.c: 491: }
  1467                           ;main.c: 492: keyCount = 0;
  1468                           
  1469                           
  1470                           	psect	text9
  1471  0018                     __ptext9:	
  1472 ;; *************** function _chrgCtr *****************
  1473 ;; Defined at:
  1474 ;;		line 299 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;		None
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;		None
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		wreg, status,2, status,0, pclath, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 100/0
  1485 ;;		On exit  : 100/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMMON   BANK0   BANK1
  1488 ;;      Params:         0       0       0
  1489 ;;      Locals:         0       0       0
  1490 ;;      Temps:          0       2       0
  1491 ;;      Totals:         0       2       0
  1492 ;;Total ram usage:        2 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    3
  1495 ;; This function calls:
  1496 ;;		___lbdiv
  1497 ;;		_chrgPwmInit
  1498 ;;		_chrgPwmStop
  1499 ;; This function is called by:
  1500 ;;		_main
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           
  1505                           ;psect for function _chrgCtr
  1506  0018                     _chrgCtr:	
  1507                           
  1508                           ;main.c: 301: if(PORTA & 0x02)
  1509                           
  1510                           ;incstack = 0
  1511                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1512  0018  1683               	bsf	3,5	;RP0=1, select bank1
  1513  0019  1C86               	btfss	6,1	;volatile
  1514  001A  28F7               	goto	l3285
  1515                           
  1516                           ;main.c: 302: {
  1517                           ;main.c: 303: if(chrgFlag == 0)
  1518  001B  087A               	movf	_chrgFlag,w
  1519  001C  1D03               	btfss	3,2
  1520  001D  2824               	goto	l3161
  1521                           
  1522                           ;main.c: 304: {
  1523                           ;main.c: 305: chrgFlag = 1;
  1524  001E  01FA               	clrf	_chrgFlag
  1525  001F  0AFA               	incf	_chrgFlag,f
  1526                           
  1527                           ;main.c: 306: ledStep = 0;
  1528  0020  01F8               	clrf	_ledStep
  1529                           
  1530                           ;main.c: 307: chrgMaxDuty = 0;
  1531  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1532  0022  01B9               	clrf	_chrgMaxDuty
  1533                           
  1534                           ;main.c: 308: chrgPwmStop();
  1535  0023  25AA               	fcall	_chrgPwmStop
  1536  0024                     l3161:	
  1537                           
  1538                           ;main.c: 309: }
  1539                           ;main.c: 310: workStep = 0;
  1540  0024  01F9               	clrf	_workStep
  1541                           
  1542                           ;main.c: 311: lowBatFlag = 0;
  1543  0025  1283               	bcf	3,5	;RP0=0, select bank0
  1544  0026  01B5               	clrf	_lowBatFlag
  1545                           
  1546                           ;main.c: 312: if(prePwStep < pwStep)
  1547  0027  0843               	movf	_pwStep,w
  1548  0028  0277               	subwf	_prePwStep,w
  1549  0029  1803               	skipnc
  1550  002A  2834               	goto	l3173
  1551                           
  1552                           ;main.c: 313: {
  1553                           ;main.c: 314: if(++count50s > 2000)
  1554  002B  2116               	fcall	PL6	;call to abstracted procedure
  1555  002C  1903               	skipnz
  1556  002D  0228               	subwf	_count50s,w
  1557  002E  1C03               	skipc
  1558  002F  2836               	goto	l3175
  1559                           
  1560                           ;main.c: 315: {
  1561                           ;main.c: 316: count50s = 0;
  1562  0030  01A8               	clrf	_count50s
  1563  0031  01A9               	clrf	_count50s+1
  1564                           
  1565                           ;main.c: 317: prePwStep++;
  1566  0032  0AF7               	incf	_prePwStep,f
  1567  0033  2836               	goto	l3175
  1568  0034                     l3173:	
  1569                           
  1570                           ;main.c: 320: else
  1571                           ;main.c: 321: {
  1572                           ;main.c: 322: count50s = 0;
  1573  0034  01A8               	clrf	_count50s
  1574  0035  01A9               	clrf	_count50s+1
  1575  0036                     l3175:	
  1576                           
  1577                           ;main.c: 323: }
  1578                           ;main.c: 324: if(protectFlag)
  1579  0036  084E               	movf	_protectFlag,w
  1580  0037  1903               	btfsc	3,2
  1581  0038  2859               	goto	l3199
  1582                           
  1583                           ;main.c: 325: {
  1584                           ;main.c: 326: chrgPwmStop();
  1585  0039  25AA               	fcall	_chrgPwmStop
  1586                           
  1587                           ;main.c: 327: ledStep = 6;
  1588  003A  3006               	movlw	6
  1589  003B  00F8               	movwf	_ledStep
  1590                           
  1591                           ;main.c: 328: if(prePwStep < 99 && protectFlag == 1)
  1592  003C  3063               	movlw	99
  1593  003D  0277               	subwf	_prePwStep,w
  1594  003E  1803               	skipnc
  1595  003F  2857               	goto	l3195
  1596  0040  0B4E               	decfsz	_protectFlag,w
  1597  0041  2857               	goto	l3195
  1598                           
  1599                           ;main.c: 329: {
  1600                           ;main.c: 330: if(++reChrgCount > 250)
  1601  0042  30FB               	movlw	251
  1602  0043  0AC2               	incf	_reChrgCount,f
  1603  0044  0242               	subwf	_reChrgCount,w
  1604  0045  1C03               	skipc
  1605  0046  0008               	return
  1606  0047  300F               	movlw	15
  1607                           
  1608                           ;main.c: 331: {
  1609                           ;main.c: 332: reChrgCount = 0;
  1610  0048  01C2               	clrf	_reChrgCount
  1611                           
  1612                           ;main.c: 333: chrgFullFlag = 0;
  1613  0049  01D1               	clrf	_chrgFullFlag
  1614                           
  1615                           ;main.c: 334: protectFlag = 0;
  1616  004A  01CE               	clrf	_protectFlag
  1617                           
  1618                           ;main.c: 335: if(prePwStep > 14)
  1619  004B  0277               	subwf	_prePwStep,w
  1620  004C  1C03               	skipc
  1621  004D  2855               	goto	l3193
  1622                           
  1623                           ;main.c: 336: {
  1624                           ;main.c: 337: lockLedStep = (prePwStep/14) - 1;
  1625  004E  300E               	movlw	14
  1626  004F  00F3               	movwf	___lbdiv@divisor
  1627  0050  0877               	movf	_prePwStep,w
  1628  0051  2554               	fcall	___lbdiv
  1629  0052  3EFF               	addlw	255
  1630  0053  00C1               	movwf	_lockLedStep
  1631                           
  1632                           ;main.c: 338: }
  1633  0054  0008               	return
  1634  0055                     l3193:	
  1635                           
  1636                           ;main.c: 339: else
  1637                           ;main.c: 340: {
  1638                           ;main.c: 341: lockLedStep = 0;
  1639  0055  01C1               	clrf	_lockLedStep
  1640  0056  0008               	return
  1641  0057                     l3195:	
  1642                           
  1643                           ;main.c: 345: else
  1644                           ;main.c: 346: {
  1645                           ;main.c: 347: reChrgCount = 0;
  1646  0057  01C2               	clrf	_reChrgCount
  1647  0058  0008               	return
  1648  0059                     l3199:	
  1649                           
  1650                           ;main.c: 350: }
  1651                           ;main.c: 351: if(batADValue < 1118)
  1652  0059  3004               	movlw	4
  1653  005A  022B               	subwf	_batADValue+1,w
  1654  005B  305E               	movlw	94
  1655  005C  1903               	skipnz
  1656  005D  022A               	subwf	_batADValue,w
  1657  005E  1803               	skipnc
  1658  005F  2863               	goto	l3205
  1659  0060  300F               	movlw	15
  1660                           
  1661                           ;main.c: 352: {
  1662                           ;main.c: 353: chrgMode = 0;
  1663  0061  01BF               	clrf	_chrgMode
  1664                           
  1665                           ;main.c: 354: chrgMaxAD = 15;
  1666  0062  287C               	goto	L4
  1667  0063                     l3205:	
  1668                           ;main.c: 355: }
  1669                           
  1670                           
  1671                           ;main.c: 356: else if(batADValue < 1530)
  1672  0063  3005               	movlw	5
  1673  0064  022B               	subwf	_batADValue+1,w
  1674  0065  30FA               	movlw	250
  1675  0066  1903               	skipnz
  1676  0067  022A               	subwf	_batADValue,w
  1677  0068  1803               	skipnc
  1678  0069  2870               	goto	l3213
  1679  006A  3028               	movlw	40
  1680                           
  1681                           ;main.c: 357: {
  1682                           ;main.c: 358: chrgMode = 1;
  1683  006B  01BF               	clrf	_chrgMode
  1684  006C  0ABF               	incf	_chrgMode,f
  1685                           
  1686                           ;main.c: 359: chrgMaxAD = 40;
  1687  006D  00BE               	movwf	_chrgMaxAD
  1688                           
  1689                           ;main.c: 360: lockCount = 0;
  1690  006E  01BD               	clrf	_lockCount
  1691                           
  1692                           ;main.c: 361: }
  1693  006F  287D               	goto	l3223
  1694  0070                     l3213:	
  1695                           
  1696                           ;main.c: 362: else if(count1s == 0)
  1697  0070  0853               	movf	_count1s,w
  1698  0071  1D03               	btfss	3,2
  1699  0072  287D               	goto	l3223
  1700                           
  1701                           ;main.c: 363: {
  1702                           ;main.c: 364: if(++lockCount > 200)
  1703  0073  30C9               	movlw	201
  1704  0074  0ABD               	incf	_lockCount,f
  1705  0075  023D               	subwf	_lockCount,w
  1706  0076  1C03               	skipc
  1707  0077  287B               	goto	l3221
  1708  0078  3002               	movlw	2
  1709                           
  1710                           ;main.c: 365: {
  1711                           ;main.c: 366: lockCount = 0;
  1712  0079  01BD               	clrf	_lockCount
  1713                           
  1714                           ;main.c: 367: chrgMode = 2;
  1715  007A  00BF               	movwf	_chrgMode
  1716  007B                     l3221:	
  1717                           
  1718                           ;main.c: 368: }
  1719                           ;main.c: 370: chrgMaxAD = 40;
  1720  007B  3028               	movlw	40
  1721  007C                     L4:	
  1722  007C  00BE               	movwf	_chrgMaxAD
  1723  007D                     l3223:	
  1724                           
  1725                           ;main.c: 371: }
  1726                           ;main.c: 372: if(chrgMode == 2 && outADValue < 5)
  1727  007D  3002               	movlw	2
  1728  007E  063F               	xorwf	_chrgMode,w
  1729  007F  1D03               	btfss	3,2
  1730  0080  2897               	goto	l3233
  1731  0081  3000               	movlw	0
  1732  0082  022D               	subwf	_outADValue+1,w
  1733  0083  3005               	movlw	5
  1734  0084  1903               	skipnz
  1735  0085  022C               	subwf	_outADValue,w
  1736  0086  1803               	skipnc
  1737  0087  2897               	goto	l3233
  1738                           
  1739                           ;main.c: 373: {
  1740                           ;main.c: 374: if(++fullCount >= 200)
  1741  0088  0AA6               	incf	_fullCount,f
  1742  0089  1903               	skipnz
  1743  008A  0AA7               	incf	_fullCount+1,f
  1744  008B  3000               	movlw	0
  1745  008C  0227               	subwf	_fullCount+1,w
  1746  008D  30C8               	movlw	200
  1747  008E  1903               	skipnz
  1748  008F  0226               	subwf	_fullCount,w
  1749  0090  1C03               	skipc
  1750  0091  2899               	goto	l3235
  1751                           
  1752                           ;main.c: 375: {
  1753                           ;main.c: 376: fullCount = 0;
  1754  0092  01A6               	clrf	_fullCount
  1755  0093  01A7               	clrf	_fullCount+1
  1756                           
  1757                           ;main.c: 377: chrgFullFlag = 1;
  1758  0094  01D1               	clrf	_chrgFullFlag
  1759  0095  0AD1               	incf	_chrgFullFlag,f
  1760  0096  2899               	goto	l3235
  1761  0097                     l3233:	
  1762                           
  1763                           ;main.c: 380: else
  1764                           ;main.c: 381: {
  1765                           ;main.c: 382: fullCount = 0;
  1766  0097  01A6               	clrf	_fullCount
  1767  0098  01A7               	clrf	_fullCount+1
  1768  0099                     l3235:	
  1769                           
  1770                           ;main.c: 383: }
  1771                           ;main.c: 384: if(chrgFullFlag)
  1772  0099  0851               	movf	_chrgFullFlag,w
  1773  009A  1903               	btfsc	3,2
  1774  009B  289F               	goto	l3241
  1775                           
  1776                           ;main.c: 385: {
  1777                           ;main.c: 386: lockLedStep = 6;
  1778  009C  3006               	movlw	6
  1779  009D  00C1               	movwf	_lockLedStep
  1780                           
  1781                           ;main.c: 387: chrgPwmStop();
  1782  009E  2DAA               	ljmp	l2137
  1783  009F                     l3241:	
  1784                           ;main.c: 388: }
  1785                           
  1786                           
  1787                           ;main.c: 389: else
  1788                           ;main.c: 390: {
  1789                           ;main.c: 391: if(prePwStep < 15)
  1790  009F  300F               	movlw	15
  1791  00A0  0277               	subwf	_prePwStep,w
  1792  00A1  1803               	skipnc
  1793  00A2  28A5               	goto	l3245
  1794                           
  1795                           ;main.c: 392: {
  1796                           ;main.c: 393: lockLedStep = 0;
  1797  00A3  01C1               	clrf	_lockLedStep
  1798                           
  1799                           ;main.c: 394: }
  1800  00A4  28AB               	goto	l3247
  1801  00A5                     l3245:	
  1802                           
  1803                           ;main.c: 395: else
  1804                           ;main.c: 396: {
  1805                           ;main.c: 397: lockLedStep = (prePwStep/14) - 1;
  1806  00A5  300E               	movlw	14
  1807  00A6  00F3               	movwf	___lbdiv@divisor
  1808  00A7  0877               	movf	_prePwStep,w
  1809  00A8  2554               	fcall	___lbdiv
  1810  00A9  3EFF               	addlw	255
  1811  00AA  00C1               	movwf	_lockLedStep
  1812  00AB                     l3247:	
  1813                           
  1814                           ;main.c: 398: }
  1815                           ;main.c: 399: if(batADValue > 1545 || outADValue > (chrgMaxAD + 2))
  1816  00AB  3006               	movlw	6
  1817  00AC  022B               	subwf	_batADValue+1,w
  1818  00AD  300A               	movlw	10
  1819  00AE  1903               	skipnz
  1820  00AF  022A               	subwf	_batADValue,w
  1821  00B0  1803               	skipnc
  1822  00B1  28C1               	goto	l3251
  1823  00B2  083E               	movf	_chrgMaxAD,w
  1824  00B3  3E02               	addlw	2
  1825  00B4  00D6               	movwf	??_chrgCtr
  1826  00B5  3000               	movlw	0
  1827  00B6  1803               	skipnc
  1828  00B7  3001               	movlw	1
  1829  00B8  00D7               	movwf	??_chrgCtr+1
  1830  00B9  082D               	movf	_outADValue+1,w
  1831  00BA  0257               	subwf	??_chrgCtr+1,w
  1832  00BB  1D03               	skipz
  1833  00BC  28BF               	goto	u3595
  1834  00BD  082C               	movf	_outADValue,w
  1835  00BE  0256               	subwf	??_chrgCtr,w
  1836  00BF                     u3595:	
  1837  00BF  1803               	skipnc
  1838  00C0  28D0               	goto	l3263
  1839  00C1                     l3251:	
  1840                           
  1841                           ;main.c: 400: {
  1842                           ;main.c: 401: if(++subTime > chrgWaitTime)
  1843  00C1  0ABB               	incf	_subTime,f
  1844  00C2  083B               	movf	_subTime,w
  1845  00C3  023A               	subwf	_chrgWaitTime,w
  1846  00C4  1803               	skipnc
  1847  00C5  28CE               	goto	l3261
  1848                           
  1849                           ;main.c: 402: {
  1850                           ;main.c: 403: if(chrgMaxDuty > 1)
  1851  00C6  3002               	movlw	2
  1852  00C7  0239               	subwf	_chrgMaxDuty,w
  1853  00C8  1C03               	skipc
  1854  00C9  28CB               	goto	l3257
  1855                           
  1856                           ;main.c: 404: {
  1857                           ;main.c: 405: chrgMaxDuty--;
  1858  00CA  03B9               	decf	_chrgMaxDuty,f
  1859  00CB                     l3257:	
  1860  00CB  3032               	movlw	50
  1861                           
  1862                           ;main.c: 406: }
  1863                           ;main.c: 407: subTime = 0;
  1864  00CC  01BB               	clrf	_subTime
  1865                           
  1866                           ;main.c: 408: chrgWaitTime = 50;
  1867  00CD  00BA               	movwf	_chrgWaitTime
  1868  00CE                     l3261:	
  1869                           
  1870                           ;main.c: 409: }
  1871                           ;main.c: 410: addTime = 0;
  1872  00CE  01BC               	clrf	_addTime
  1873                           
  1874                           ;main.c: 411: }
  1875  00CF  28F0               	goto	l3277
  1876  00D0                     l3263:	
  1877                           
  1878                           ;main.c: 412: else if(batADValue < 1545 && outADValue < (chrgMaxAD - 4))
  1879  00D0  3006               	movlw	6
  1880  00D1  022B               	subwf	_batADValue+1,w
  1881  00D2  3009               	movlw	9
  1882  00D3  1903               	skipnz
  1883  00D4  022A               	subwf	_batADValue,w
  1884  00D5  1803               	skipnc
  1885  00D6  28F0               	goto	l3277
  1886  00D7  083E               	movf	_chrgMaxAD,w
  1887  00D8  3EFC               	addlw	252
  1888  00D9  00D6               	movwf	??_chrgCtr
  1889  00DA  30FF               	movlw	255
  1890  00DB  1803               	skipnc
  1891  00DC  3000               	movlw	0
  1892  00DD  00D7               	movwf	??_chrgCtr+1
  1893  00DE  022D               	subwf	_outADValue+1,w
  1894  00DF  1D03               	skipz
  1895  00E0  28E3               	goto	u3635
  1896  00E1  0856               	movf	??_chrgCtr,w
  1897  00E2  022C               	subwf	_outADValue,w
  1898  00E3                     u3635:	
  1899  00E3  1803               	skipnc
  1900  00E4  28F0               	goto	l3277
  1901                           
  1902                           ;main.c: 413: {
  1903                           ;main.c: 414: if(++addTime > chrgWaitTime)
  1904  00E5  0ABC               	incf	_addTime,f
  1905  00E6  083C               	movf	_addTime,w
  1906  00E7  023A               	subwf	_chrgWaitTime,w
  1907  00E8  1803               	skipnc
  1908  00E9  28EF               	goto	l3275
  1909  00EA  304B               	movlw	75
  1910                           
  1911                           ;main.c: 415: {
  1912                           ;main.c: 416: addTime = 0;
  1913  00EB  01BC               	clrf	_addTime
  1914                           
  1915                           ;main.c: 417: if(chrgMaxDuty < 75)
  1916  00EC  0239               	subwf	_chrgMaxDuty,w
  1917  00ED  1C03               	btfss	3,0
  1918                           
  1919                           ;main.c: 418: {
  1920                           ;main.c: 419: chrgMaxDuty++;
  1921  00EE  0AB9               	incf	_chrgMaxDuty,f
  1922  00EF                     l3275:	
  1923                           
  1924                           ;main.c: 420: }
  1925                           ;main.c: 421: }
  1926                           ;main.c: 422: subTime = 0;
  1927  00EF  01BB               	clrf	_subTime
  1928  00F0                     l3277:	
  1929                           
  1930                           ;main.c: 423: }
  1931                           ;main.c: 426: if((PWMCON0 & 0x01) == 0)
  1932  00F0  1815               	btfsc	21,0	;volatile
  1933  00F1  28F3               	goto	l3281
  1934                           
  1935                           ;main.c: 427: {
  1936                           ;main.c: 428: chrgPwmInit();
  1937  00F2  257D               	fcall	_chrgPwmInit
  1938  00F3                     l3281:	
  1939                           
  1940                           ;main.c: 429: }
  1941                           ;main.c: 430: PWMD01H = 0X00;
  1942  00F3  019E               	clrf	30	;volatile
  1943                           
  1944                           ;main.c: 431: PWMD0L = chrgMaxDuty;
  1945  00F4  0839               	movf	_chrgMaxDuty,w
  1946  00F5  0099               	movwf	25	;volatile
  1947  00F6  0008               	return
  1948  00F7                     l3285:	
  1949  00F7  3014               	movlw	20
  1950                           
  1951                           ;main.c: 437: chrgFlag = 0;
  1952  00F8  01FA               	clrf	_chrgFlag
  1953                           
  1954                           ;main.c: 438: chrgFullFlag = 0;
  1955  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  1956  00FA  01D1               	clrf	_chrgFullFlag
  1957                           
  1958                           ;main.c: 439: protectFlag = 0;
  1959  00FB  01CE               	clrf	_protectFlag
  1960                           
  1961                           ;main.c: 440: chrgMode = 0;
  1962  00FC  01BF               	clrf	_chrgMode
  1963                           
  1964                           ;main.c: 441: chrgMaxAD = 0;
  1965  00FD  01BE               	clrf	_chrgMaxAD
  1966                           
  1967                           ;main.c: 442: chrgMaxDuty = 0;
  1968  00FE  01B9               	clrf	_chrgMaxDuty
  1969                           
  1970                           ;main.c: 443: lockCount = 0;
  1971  00FF  01BD               	clrf	_lockCount
  1972                           
  1973                           ;main.c: 444: lockLedStep = 0;
  1974  0100  01C1               	clrf	_lockLedStep
  1975                           
  1976                           ;main.c: 445: chrgWaitTime = 20;
  1977  0101  00BA               	movwf	_chrgWaitTime
  1978                           
  1979                           ;main.c: 446: chrgPwmStop();
  1980  0102  25AA               	fcall	_chrgPwmStop
  1981                           
  1982                           ;main.c: 447: if(prePwStep > 0 && prePwStep > pwStep)
  1983  0103  0877               	movf	_prePwStep,w
  1984  0104  1903               	btfsc	3,2
  1985  0105  2913               	goto	l3301
  1986  0106  0877               	movf	_prePwStep,w
  1987  0107  0243               	subwf	_pwStep,w
  1988  0108  1803               	skipnc
  1989  0109  2913               	goto	l3301
  1990                           
  1991                           ;main.c: 448: {
  1992                           ;main.c: 449: if(++count50s > 2000)
  1993  010A  2116               	fcall	PL6	;call to abstracted procedure
  1994  010B  1903               	skipnz
  1995  010C  0228               	subwf	_count50s,w
  1996  010D  1C03               	skipc
  1997  010E  0008               	return
  1998                           
  1999                           ;main.c: 450: {
  2000                           ;main.c: 451: count50s = 0;
  2001  010F  01A8               	clrf	_count50s
  2002  0110  01A9               	clrf	_count50s+1
  2003                           
  2004                           ;main.c: 452: prePwStep--;
  2005  0111  03F7               	decf	_prePwStep,f
  2006  0112  0008               	return
  2007  0113                     l3301:	
  2008                           
  2009                           ;main.c: 455: else
  2010                           ;main.c: 456: {
  2011                           ;main.c: 457: count50s = 0;
  2012  0113  01A8               	clrf	_count50s
  2013  0114  01A9               	clrf	_count50s+1
  2014  0115  0008               	return
  2015  0116                     __end_of_chrgCtr:	
  2016  0116                     PL6:	
  2017  0116  0AA8               	incf	_count50s,f
  2018  0117  1903               	skipnz
  2019  0118  0AA9               	incf	_count50s+1,f
  2020  0119  3007               	movlw	7
  2021  011A  0229               	subwf	_count50s+1,w
  2022  011B  34D1               	retlw	209
  2023  011C                     __end_ofPL6:	
  2024                           
  2025                           	psect	text10
  2026  05AA                     __ptext10:	
  2027 ;; *************** function _chrgPwmStop *****************
  2028 ;; Defined at:
  2029 ;;		line 899 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
  2030 ;; Parameters:    Size  Location     Type
  2031 ;;		None
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;		None
  2034 ;; Return value:  Size  Location     Type
  2035 ;;                  1    wreg      void 
  2036 ;; Registers used:
  2037 ;;		None
  2038 ;; Tracked objects:
  2039 ;;		On entry : 100/0
  2040 ;;		On exit  : 100/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMMON   BANK0   BANK1
  2043 ;;      Params:         0       0       0
  2044 ;;      Locals:         0       0       0
  2045 ;;      Temps:          0       0       0
  2046 ;;      Totals:         0       0       0
  2047 ;;Total ram usage:        0 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; Hardware stack levels required when called:    2
  2050 ;; This function calls:
  2051 ;;		Nothing
  2052 ;; This function is called by:
  2053 ;;		_chrgCtr
  2054 ;; This function uses a non-reentrant model
  2055 ;;
  2056                           
  2057                           
  2058                           ;psect for function _chrgPwmStop
  2059  05AA                     _chrgPwmStop:	
  2060  05AA                     l2137:	
  2061                           ;incstack = 0
  2062                           ; Regs used in _chrgPwmStop: []
  2063                           
  2064                           
  2065                           ;main.c: 901: PWMCON0 &= 0xFE;
  2066  05AA  1015               	bcf	21,0	;volatile
  2067                           
  2068                           ;main.c: 902: RB0 = 0;
  2069  05AB  1006               	bcf	6,0	;volatile
  2070  05AC  0008               	return
  2071  05AD                     __end_of_chrgPwmStop:	
  2072                           
  2073                           	psect	text11
  2074  057D                     __ptext11:	
  2075 ;; *************** function _chrgPwmInit *****************
  2076 ;; Defined at:
  2077 ;;		line 882 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;		None
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;		None
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      void 
  2084 ;; Registers used:
  2085 ;;		wreg, status,2
  2086 ;; Tracked objects:
  2087 ;;		On entry : 100/0
  2088 ;;		On exit  : 100/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMMON   BANK0   BANK1
  2091 ;;      Params:         0       0       0
  2092 ;;      Locals:         0       0       0
  2093 ;;      Temps:          0       0       0
  2094 ;;      Totals:         0       0       0
  2095 ;;Total ram usage:        0 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    2
  2098 ;; This function calls:
  2099 ;;		Nothing
  2100 ;; This function is called by:
  2101 ;;		_chrgCtr
  2102 ;; This function uses a non-reentrant model
  2103 ;;
  2104                           
  2105                           
  2106                           ;psect for function _chrgPwmInit
  2107  057D                     _chrgPwmInit:	
  2108                           
  2109                           ;main.c: 884: PWMCON1 = 0B00000000;
  2110                           
  2111                           ;incstack = 0
  2112                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2113                           
  2114                           ;main.c: 886: PWMTH = 0X00;
  2115                           
  2116                           ;main.c: 887: PWMTL = 100;
  2117                           
  2118                           ;main.c: 891: PWMD01H = 0;
  2119  057D  2584               	fcall	PL8	;call to abstracted procedure
  2120                           
  2121                           ;main.c: 892: PWMD0L = 1;
  2122  057E  3001               	movlw	1
  2123  057F  0099               	movwf	25	;volatile
  2124                           
  2125                           ;main.c: 893: PWM01DT = 0X00;
  2126  0580  019F               	clrf	31	;volatile
  2127                           
  2128                           ;main.c: 895: PWMCON0 = 0X01;
  2129  0581  0095               	movwf	21	;volatile
  2130                           
  2131                           ;main.c: 896: PWMCON2 =0X00;
  2132  0582  019D               	clrf	29	;volatile
  2133  0583  0008               	return
  2134  0584                     __end_of_chrgPwmInit:	
  2135  0584                     PL8:	
  2136  0584  0196               	clrf	22	;volatile
  2137  0585  0198               	clrf	24	;volatile
  2138  0586  3064               	movlw	100
  2139  0587  0097               	movwf	23	;volatile
  2140  0588  019E               	clrf	30	;volatile
  2141  0589  0008               	return
  2142  058A                     __end_ofPL8:	
  2143                           
  2144                           	psect	text12
  2145  0554                     __ptext12:	
  2146 ;; *************** function ___lbdiv *****************
  2147 ;; Defined at:
  2148 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;  dividend        1    wreg     unsigned char 
  2151 ;;  divisor         1    3[COMMON] unsigned char 
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;  dividend        1    4[COMMON] unsigned char 
  2154 ;;  quotient        1    6[COMMON] unsigned char 
  2155 ;;  counter         1    5[COMMON] unsigned char 
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      unsigned char 
  2158 ;; Registers used:
  2159 ;;		wreg, status,2, status,0
  2160 ;; Tracked objects:
  2161 ;;		On entry : 100/0
  2162 ;;		On exit  : 100/0
  2163 ;;		Unchanged: 100/0
  2164 ;; Data sizes:     COMMON   BANK0   BANK1
  2165 ;;      Params:         1       0       0
  2166 ;;      Locals:         3       0       0
  2167 ;;      Temps:          0       0       0
  2168 ;;      Totals:         4       0       0
  2169 ;;Total ram usage:        4 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    2
  2172 ;; This function calls:
  2173 ;;		Nothing
  2174 ;; This function is called by:
  2175 ;;		_ledCtr
  2176 ;;		_chrgCtr
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           
  2181                           ;psect for function ___lbdiv
  2182  0554                     ___lbdiv:	
  2183                           
  2184                           ;incstack = 0
  2185                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2186                           ;___lbdiv@dividend stored from wreg
  2187  0554  00F4               	movwf	___lbdiv@dividend
  2188  0555  01F6               	clrf	___lbdiv@quotient
  2189  0556  0873               	movf	___lbdiv@divisor,w
  2190  0557  1903               	btfsc	3,2
  2191  0558  2D6D               	goto	l2307
  2192  0559  01F5               	clrf	___lbdiv@counter
  2193  055A                     l2293:	
  2194  055A  0AF5               	incf	___lbdiv@counter,f
  2195  055B  1BF3               	btfsc	___lbdiv@divisor,7
  2196  055C  2D60               	goto	l1157
  2197  055D  1003               	clrc
  2198  055E  0DF3               	rlf	___lbdiv@divisor,f
  2199  055F  2D5A               	goto	l2293
  2200  0560                     l1157:	
  2201  0560  1003               	clrc
  2202  0561  0DF6               	rlf	___lbdiv@quotient,f
  2203  0562  0873               	movf	___lbdiv@divisor,w
  2204  0563  0274               	subwf	___lbdiv@dividend,w
  2205  0564  1C03               	skipc
  2206  0565  2D6A               	goto	L5
  2207  0566  0873               	movf	___lbdiv@divisor,w
  2208  0567  02F4               	subwf	___lbdiv@dividend,f
  2209  0568  1476               	bsf	___lbdiv@quotient,0
  2210  0569  1003               	clrc
  2211  056A                     L5:	
  2212  056A  0CF3               	rrf	___lbdiv@divisor,f
  2213  056B  0BF5               	decfsz	___lbdiv@counter,f
  2214  056C  2D60               	goto	l1157
  2215  056D                     l2307:	
  2216  056D  0876               	movf	___lbdiv@quotient,w
  2217  056E  0008               	return
  2218  056F                     __end_of___lbdiv:	
  2219                           
  2220                           	psect	text13
  2221  0205                     __ptext13:	
  2222 ;; *************** function _checkOutA *****************
  2223 ;; Defined at:
  2224 ;;		line 575 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;		None
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;  maxAout         1   18[BANK0 ] unsigned char 
  2229 ;;  maxtempV        1    0        unsigned char 
  2230 ;; Return value:  Size  Location     Type
  2231 ;;                  1    wreg      void 
  2232 ;; Registers used:
  2233 ;;		wreg, status,2, status,0, pclath, cstack
  2234 ;; Tracked objects:
  2235 ;;		On entry : 100/0
  2236 ;;		On exit  : 0/0
  2237 ;;		Unchanged: 0/0
  2238 ;; Data sizes:     COMMON   BANK0   BANK1
  2239 ;;      Params:         0       0       0
  2240 ;;      Locals:         0       2       0
  2241 ;;      Temps:          2       0       0
  2242 ;;      Totals:         2       2       0
  2243 ;;Total ram usage:        4 bytes
  2244 ;; Hardware stack levels used:    1
  2245 ;; Hardware stack levels required when called:    3
  2246 ;; This function calls:
  2247 ;;		_ADC_Sample
  2248 ;; This function is called by:
  2249 ;;		_main
  2250 ;; This function uses a non-reentrant model
  2251 ;;
  2252                           
  2253                           
  2254                           ;psect for function _checkOutA
  2255  0205                     _checkOutA:	
  2256                           
  2257                           ;main.c: 577: if(chrgFlag)
  2258                           
  2259                           ;incstack = 0
  2260                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2261  0205  087A               	movf	_chrgFlag,w
  2262                           
  2263                           ;main.c: 578: {
  2264                           ;main.c: 579: test_adc = ADC_Sample(4, 5);
  2265  0206  3005               	movlw	5
  2266  0207  00F3               	movwf	ADC_Sample@adldo
  2267  0208  1903               	btfsc	3,2
  2268  0209  2A0C               	goto	L14
  2269  020A  3004               	movlw	4
  2270  020B  2A0D               	goto	L7
  2271  020C                     L14:	
  2272                           ;main.c: 581: else
  2273                           ;main.c: 582: {
  2274                           ;main.c: 583: test_adc = ADC_Sample(0, 5);
  2275                           
  2276                           ;main.c: 580: }
  2277                           
  2278  020C  3000               	movlw	0
  2279  020D                     L7:	
  2280  020D  211C               	fcall	_ADC_Sample
  2281  020E  00D5               	movwf	_test_adc	;volatile
  2282                           
  2283                           ;main.c: 584: }
  2284                           ;main.c: 585: if (0xA5 == test_adc)
  2285  020F  30A5               	movlw	165
  2286  0210  0655               	xorwf	_test_adc,w	;volatile
  2287  0211  1D03               	btfss	3,2
  2288  0212  2AAD               	goto	l3147
  2289                           
  2290                           ;main.c: 586: {
  2291                           ;main.c: 587: if(chrgFlag && adresult > 210)
  2292  0213  087A               	movf	_chrgFlag,w
  2293  0214  1903               	btfsc	3,2
  2294  0215  2A26               	goto	l3065
  2295  0216  3000               	movlw	0
  2296  0217  0233               	subwf	_adresult+1,w	;volatile
  2297  0218  30D3               	movlw	211
  2298  0219  1903               	skipnz
  2299  021A  0232               	subwf	_adresult,w	;volatile
  2300  021B  1C03               	skipc
  2301  021C  2A26               	goto	l3065
  2302                           
  2303                           ;main.c: 588: {
  2304                           ;main.c: 589: if(++overChrgTime > 10)
  2305  021D  300B               	movlw	11
  2306  021E  0AC4               	incf	_overChrgTime,f
  2307  021F  0244               	subwf	_overChrgTime,w
  2308  0220  1C03               	skipc
  2309  0221  2A27               	goto	l3067
  2310  0222  3002               	movlw	2
  2311                           
  2312                           ;main.c: 590: {
  2313                           ;main.c: 591: overChrgTime = 0;
  2314  0223  01C4               	clrf	_overChrgTime
  2315                           
  2316                           ;main.c: 592: protectFlag = 2;
  2317  0224  00CE               	movwf	_protectFlag
  2318  0225  2A27               	goto	l3067
  2319  0226                     l3065:	
  2320                           
  2321                           ;main.c: 596: else
  2322                           ;main.c: 597: {
  2323                           ;main.c: 598: overChrgTime = 0;
  2324  0226  01C4               	clrf	_overChrgTime
  2325  0227                     l3067:	
  2326                           
  2327                           ;main.c: 599: }
  2328                           ;main.c: 600: outADValue = adresult;
  2329  0227  0833               	movf	_adresult+1,w	;volatile
  2330  0228  00AD               	movwf	_outADValue+1
  2331  0229  0832               	movf	_adresult,w	;volatile
  2332  022A  00AC               	movwf	_outADValue
  2333                           
  2334                           ;main.c: 602: if(workStep && (outADValue > 220))
  2335  022B  0879               	movf	_workStep,w
  2336  022C  1903               	btfsc	3,2
  2337  022D  2A3D               	goto	l3077
  2338  022E  3000               	movlw	0
  2339  022F  022D               	subwf	_outADValue+1,w
  2340  0230  30DD               	movlw	221
  2341  0231  1903               	skipnz
  2342  0232  022C               	subwf	_outADValue,w
  2343  0233  1C03               	skipc
  2344  0234  2A3D               	goto	l3077
  2345                           
  2346                           ;main.c: 603: {
  2347                           ;main.c: 604: if(++workOverOutTime > 50)
  2348  0235  3033               	movlw	51
  2349  0236  0ACD               	incf	_workOverOutTime,f
  2350  0237  024D               	subwf	_workOverOutTime,w
  2351  0238  1C03               	skipc
  2352  0239  2A3E               	goto	l3081
  2353                           
  2354                           ;main.c: 605: {
  2355                           ;main.c: 606: workOverOutTime = 0;
  2356  023A  01CD               	clrf	_workOverOutTime
  2357                           
  2358                           ;main.c: 607: workStep = 0;
  2359  023B  01F9               	clrf	_workStep
  2360  023C  2A3E               	goto	l3081
  2361  023D                     l3077:	
  2362                           
  2363                           ;main.c: 610: else
  2364                           ;main.c: 611: {
  2365                           ;main.c: 612: workOverOutTime = 0;
  2366  023D  01CD               	clrf	_workOverOutTime
  2367  023E                     l3081:	
  2368                           
  2369                           ;main.c: 615: if(workStep < 6 && outADValue > maxtempV)
  2370  023E  3006               	movlw	6
  2371  023F  0279               	subwf	_workStep,w
  2372  0240  3000               	movlw	0
  2373  0241  1803               	skipnc
  2374  0242  2A52               	goto	L15
  2375  0243  022D               	subwf	_outADValue+1,w
  2376  0244  3029               	movlw	41
  2377  0245  1903               	skipnz
  2378  0246  022C               	subwf	_outADValue,w
  2379  0247  1C03               	skipc
  2380  0248  2A51               	goto	l3089
  2381  0249                     l3085:	
  2382                           
  2383                           ;main.c: 616: {
  2384                           ;main.c: 617: if(++overCount > 5)
  2385  0249  3006               	movlw	6
  2386  024A  0AC8               	incf	_overCount,f
  2387  024B  0248               	subwf	_overCount,w
  2388  024C  1C03               	skipc
  2389  024D  2AA9               	goto	l3143
  2390                           
  2391                           ;main.c: 618: {
  2392                           ;main.c: 619: overCount = 5;
  2393  024E  3005               	movlw	5
  2394  024F  00C8               	movwf	_overCount
  2395  0250  2AA9               	goto	l3143
  2396  0251                     l3089:	
  2397                           
  2398                           ;main.c: 622: else if(outADValue > (maxtempV+3))
  2399  0251  3000               	movlw	0
  2400  0252                     L15:	
  2401  0252  022D               	subwf	_outADValue+1,w
  2402  0253  302C               	movlw	44
  2403  0254  1903               	skipnz
  2404  0255  022C               	subwf	_outADValue,w
  2405  0256  1803               	btfsc	3,0
  2406  0257  2A49               	goto	l3085
  2407                           
  2408                           ;main.c: 629: else
  2409                           ;main.c: 630: {
  2410                           ;main.c: 631: unsigned char maxAout = 11;
  2411                           
  2412                           ;main.c: 623: {
  2413                           ;main.c: 624: if(++overCount > 5)
  2414  0258  300B               	movlw	11
  2415  0259  00E8               	movwf	checkOutA@maxAout
  2416                           
  2417                           ;main.c: 632: if(workStep == 1)
  2418  025A  0B79               	decfsz	_workStep,w
  2419  025B  2A5E               	goto	l3101
  2420                           
  2421                           ;main.c: 633: {
  2422                           ;main.c: 634: maxAout = maxAout + 5;
  2423  025C  3005               	movlw	5
  2424  025D  2A7B               	goto	L12
  2425  025E                     l3101:	
  2426                           ;main.c: 635: }
  2427                           
  2428                           
  2429                           ;main.c: 636: else if(workStep == 2)
  2430  025E  3002               	movlw	2
  2431  025F  0679               	xorwf	_workStep,w
  2432  0260  1D03               	btfss	3,2
  2433  0261  2A64               	goto	l3105
  2434                           
  2435                           ;main.c: 637: {
  2436                           ;main.c: 638: maxAout = maxAout + 6;
  2437  0262  3006               	movlw	6
  2438  0263  2A7B               	goto	L12
  2439  0264                     l3105:	
  2440                           ;main.c: 639: }
  2441                           
  2442                           
  2443                           ;main.c: 640: else if(workStep == 3)
  2444  0264  3003               	movlw	3
  2445  0265  0679               	xorwf	_workStep,w
  2446  0266  1D03               	btfss	3,2
  2447  0267  2A6A               	goto	l3109
  2448                           
  2449                           ;main.c: 641: {
  2450                           ;main.c: 642: maxAout = maxAout + 7;
  2451  0268  3007               	movlw	7
  2452  0269  2A7B               	goto	L12
  2453  026A                     l3109:	
  2454                           ;main.c: 643: }
  2455                           
  2456                           
  2457                           ;main.c: 644: else if(workStep == 4)
  2458  026A  3004               	movlw	4
  2459  026B  0679               	xorwf	_workStep,w
  2460  026C  1D03               	btfss	3,2
  2461  026D  2A70               	goto	l3113
  2462                           
  2463                           ;main.c: 645: {
  2464                           ;main.c: 646: maxAout = maxAout + 8;
  2465  026E  3008               	movlw	8
  2466  026F  2A7B               	goto	L12
  2467  0270                     l3113:	
  2468                           ;main.c: 647: }
  2469                           
  2470                           
  2471                           ;main.c: 648: else if(workStep == 5)
  2472  0270  3005               	movlw	5
  2473  0271  0679               	xorwf	_workStep,w
  2474  0272  1D03               	btfss	3,2
  2475  0273  2A76               	goto	l3117
  2476                           
  2477                           ;main.c: 649: {
  2478                           ;main.c: 650: maxAout = maxAout + 9;
  2479  0274  3009               	movlw	9
  2480  0275  2A7B               	goto	L12
  2481  0276                     l3117:	
  2482                           ;main.c: 651: }
  2483                           
  2484                           
  2485                           ;main.c: 652: else if(workStep == 6)
  2486  0276  3006               	movlw	6
  2487  0277  0679               	xorwf	_workStep,w
  2488  0278  1D03               	btfss	3,2
  2489  0279  2A7C               	goto	l808
  2490                           
  2491                           ;main.c: 653: {
  2492                           ;main.c: 654: maxAout = maxAout + 10;
  2493  027A  300A               	movlw	10
  2494  027B                     L12:	
  2495  027B  07E8               	addwf	checkOutA@maxAout,f
  2496  027C                     l808:	
  2497                           
  2498                           ;main.c: 655: }
  2499                           ;main.c: 656: if(overCount > 0)
  2500  027C  0848               	movf	_overCount,w
  2501  027D  1D03               	btfss	3,2
  2502                           
  2503                           ;main.c: 657: {
  2504                           ;main.c: 658: overCount--;
  2505  027E  03C8               	decf	_overCount,f
  2506                           
  2507                           ;main.c: 659: }
  2508                           ;main.c: 660: if(outADValue > maxAout)
  2509  027F  0868               	movf	checkOutA@maxAout,w
  2510  0280  00F4               	movwf	??_checkOutA
  2511  0281  01F5               	clrf	??_checkOutA+1
  2512  0282  082D               	movf	_outADValue+1,w
  2513  0283  0275               	subwf	??_checkOutA+1,w
  2514  0284  1D03               	skipz
  2515  0285  2A88               	goto	u3355
  2516  0286  082C               	movf	_outADValue,w
  2517  0287  0274               	subwf	??_checkOutA,w
  2518  0288                     u3355:	
  2519  0288  1803               	skipnc
  2520  0289  2AA3               	goto	l3135
  2521                           
  2522                           ;main.c: 661: {
  2523                           ;main.c: 662: if(++addPowerCount > 3)
  2524  028A  3004               	movlw	4
  2525  028B  0AC7               	incf	_addPowerCount,f
  2526  028C  0247               	subwf	_addPowerCount,w
  2527  028D  1C03               	skipc
  2528  028E  2AA9               	goto	l3143
  2529                           
  2530                           ;main.c: 663: {
  2531                           ;main.c: 664: addPowerCount = 3;
  2532  028F  3003               	movlw	3
  2533  0290  00C7               	movwf	_addPowerCount
  2534                           
  2535                           ;main.c: 665: if(startTime == 0)
  2536  0291  0845               	movf	_startTime,w
  2537  0292  1D03               	btfss	3,2
  2538  0293  2AA0               	goto	l3133
  2539                           
  2540                           ;main.c: 666: {
  2541                           ;main.c: 667: tempDuty = 72 + (workStep*4);
  2542  0294  0879               	movf	_workStep,w
  2543  0295  00F4               	movwf	??_checkOutA
  2544  0296  3001               	movlw	1
  2545  0297  1003               	clrc
  2546  0298                     L6:	
  2547  0298  0DF4               	rlf	??_checkOutA,f
  2548  0299  3EFF               	addlw	-1
  2549  029A  1003               	clrc
  2550  029B  1D03               	skipz
  2551  029C  2A98               	goto	L6
  2552  029D  0D74               	rlf	??_checkOutA,w
  2553  029E  3E48               	addlw	72
  2554  029F  2AA1               	goto	L13
  2555  02A0                     l3133:	
  2556                           ;main.c: 669: }
  2557                           
  2558                           
  2559                           ;main.c: 670: else
  2560                           ;main.c: 671: {
  2561                           ;main.c: 672: tempDuty = maxDuty;
  2562  02A0  0849               	movf	_maxDuty,w
  2563  02A1                     L13:	
  2564  02A1  00C6               	movwf	_tempDuty
  2565  02A2  2AA9               	goto	l3143
  2566  02A3                     l3135:	
  2567                           
  2568                           ;main.c: 677: else
  2569                           ;main.c: 678: {
  2570                           ;main.c: 679: addPowerCount = 0;
  2571  02A3  01C7               	clrf	_addPowerCount
  2572                           
  2573                           ;main.c: 680: if(tempDuty > maxDuty)
  2574  02A4  0846               	movf	_tempDuty,w
  2575  02A5  0249               	subwf	_maxDuty,w
  2576  02A6  1803               	skipnc
  2577  02A7  2AA0               	goto	l3133
  2578                           
  2579                           ;main.c: 681: {
  2580                           ;main.c: 682: tempDuty--;
  2581  02A8  03C6               	decf	_tempDuty,f
  2582  02A9                     l3143:	
  2583                           ;main.c: 683: }
  2584                           
  2585                           
  2586                           ;main.c: 687: }
  2587                           ;main.c: 689: }
  2588                           ;main.c: 691: }
  2589                           ;main.c: 692: PWMD01H = 0X00;
  2590  02A9  019E               	clrf	30	;volatile
  2591                           
  2592                           ;main.c: 693: PWMD1L = maxDuty;
  2593  02AA  0849               	movf	_maxDuty,w
  2594  02AB  009A               	movwf	26	;volatile
  2595                           
  2596                           ;main.c: 694: }
  2597  02AC  0008               	return
  2598  02AD                     l3147:	
  2599                           
  2600                           ;main.c: 695: else
  2601                           ;main.c: 696: {
  2602                           ;main.c: 697: ADCON0 = 0;
  2603  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  2604  02AE  0195               	clrf	21	;volatile
  2605                           
  2606                           ;main.c: 698: ADCON1 = 0;
  2607  02AF  0196               	clrf	22	;volatile
  2608                           
  2609                           ;main.c: 699: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2610  02B0  3085               	movlw	133
  2611  02B1  00F4               	movwf	??_checkOutA
  2612  02B2                     u4077:	
  2613  02B2  0BF4               	decfsz	??_checkOutA,f
  2614  02B3  2AB2               	goto	u4077
  2615  02B4  0008               	return
  2616  02B5                     __end_of_checkOutA:	
  2617                           
  2618                           	psect	text14
  2619  02B5                     __ptext14:	
  2620 ;; *************** function _checkBatAD *****************
  2621 ;; Defined at:
  2622 ;;		line 703 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;		None
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;		None
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		wreg, status,2, status,0, pclath, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 100/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMMON   BANK0   BANK1
  2636 ;;      Params:         0       0       0
  2637 ;;      Locals:         0       0       0
  2638 ;;      Temps:          2       0       0
  2639 ;;      Totals:         2       0       0
  2640 ;;Total ram usage:        2 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    3
  2643 ;; This function calls:
  2644 ;;		_ADC_Sample
  2645 ;; This function is called by:
  2646 ;;		_main
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           
  2651                           ;psect for function _checkBatAD
  2652  02B5                     _checkBatAD:	
  2653                           
  2654                           ;main.c: 705: test_adc = ADC_Sample(2, 5);
  2655                           
  2656                           ;incstack = 0
  2657                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2658  02B5  3005               	movlw	5
  2659  02B6  00F3               	movwf	ADC_Sample@adldo
  2660  02B7  3002               	movlw	2
  2661  02B8  211C               	fcall	_ADC_Sample
  2662  02B9  00D5               	movwf	_test_adc	;volatile
  2663                           
  2664                           ;main.c: 706: if (0xA5 == test_adc)
  2665  02BA  30A5               	movlw	165
  2666  02BB  0655               	xorwf	_test_adc,w	;volatile
  2667  02BC  1D03               	btfss	3,2
  2668  02BD  2B1C               	goto	l3343
  2669                           
  2670                           ;main.c: 707: {
  2671                           ;main.c: 708: batADValue = adresult;
  2672  02BE  0833               	movf	_adresult+1,w	;volatile
  2673  02BF  00AB               	movwf	_batADValue+1
  2674  02C0  0832               	movf	_adresult,w	;volatile
  2675  02C1  00AA               	movwf	_batADValue
  2676                           
  2677                           ;main.c: 709: if(batADValue < 1117)
  2678  02C2  3004               	movlw	4
  2679  02C3  022B               	subwf	_batADValue+1,w
  2680  02C4  305D               	movlw	93
  2681  02C5  1903               	skipnz
  2682  02C6  022A               	subwf	_batADValue,w
  2683  02C7  1803               	skipnc
  2684  02C8  2AE2               	goto	l3325
  2685                           
  2686                           ;main.c: 710: {
  2687                           ;main.c: 711: pwStep = 0;
  2688  02C9  01C3               	clrf	_pwStep
  2689                           
  2690                           ;main.c: 712: if(++count8s > 800)
  2691  02CA  0AA2               	incf	_count8s,f
  2692  02CB  1903               	skipnz
  2693  02CC  0AA3               	incf	_count8s+1,f
  2694  02CD  3003               	movlw	3
  2695  02CE  0223               	subwf	_count8s+1,w
  2696  02CF  3021               	movlw	33
  2697  02D0  1903               	skipnz
  2698  02D1  0222               	subwf	_count8s,w
  2699  02D2  1C03               	skipc
  2700  02D3  2B0F               	goto	l3337
  2701                           
  2702                           ;main.c: 713: {
  2703                           ;main.c: 714: count8s = 0;
  2704  02D4  01A2               	clrf	_count8s
  2705  02D5  01A3               	clrf	_count8s+1
  2706                           
  2707                           ;main.c: 715: lowBatFlag = 1;
  2708  02D6  01B5               	clrf	_lowBatFlag
  2709  02D7  0AB5               	incf	_lowBatFlag,f
  2710                           
  2711                           ;main.c: 716: if(workStep > 0)
  2712  02D8  0879               	movf	_workStep,w
  2713  02D9  1903               	btfsc	3,2
  2714  02DA  2ADF               	goto	l3321
  2715                           
  2716                           ;main.c: 717: {
  2717                           ;main.c: 718: overWorkTime = 180;
  2718  02DB  30B4               	movlw	180
  2719  02DC  00B7               	movwf	_overWorkTime
  2720                           
  2721                           ;main.c: 719: preLedStep = workStep;
  2722  02DD  0879               	movf	_workStep,w
  2723  02DE  00B6               	movwf	_preLedStep
  2724  02DF                     l3321:	
  2725                           
  2726                           ;main.c: 720: }
  2727                           ;main.c: 721: prePwStep = 0;
  2728  02DF  01F7               	clrf	_prePwStep
  2729                           
  2730                           ;main.c: 722: workStep = 0;
  2731  02E0  01F9               	clrf	_workStep
  2732  02E1  2B0F               	goto	l3337
  2733  02E2                     l3325:	
  2734  02E2  3005               	movlw	5
  2735                           
  2736                           ;main.c: 725: else
  2737                           ;main.c: 726: {
  2738                           ;main.c: 727: count8s = 0;
  2739  02E3  01A2               	clrf	_count8s
  2740  02E4  01A3               	clrf	_count8s+1
  2741                           
  2742                           ;main.c: 728: if(batADValue >= 1340)
  2743  02E5  022B               	subwf	_batADValue+1,w
  2744  02E6  303C               	movlw	60
  2745  02E7  1903               	skipnz
  2746  02E8  022A               	subwf	_batADValue,w
  2747                           
  2748                           ;main.c: 729: {
  2749                           ;main.c: 730: pwStep = ((batADValue - 1340) /2) + 13;
  2750  02E9  082A               	movf	_batADValue,w
  2751  02EA  1C03               	skipc
  2752  02EB  2AF9               	goto	L17
  2753  02EC  3EC4               	addlw	196
  2754  02ED  00F4               	movwf	??_checkBatAD
  2755  02EE  082B               	movf	_batADValue+1,w
  2756  02EF  1803               	skipnc
  2757  02F0  3E01               	addlw	1
  2758  02F1  3EFA               	addlw	250
  2759  02F2  00F5               	movwf	??_checkBatAD+1
  2760  02F3  1003               	clrc
  2761  02F4  0CF5               	rrf	??_checkBatAD+1,f
  2762  02F5  0CF4               	rrf	??_checkBatAD,f
  2763  02F6  0874               	movf	??_checkBatAD,w
  2764  02F7  3E0D               	addlw	13
  2765  02F8  2B08               	goto	L16
  2766  02F9                     L17:	
  2767                           ;main.c: 732: else
  2768                           ;main.c: 733: {
  2769                           ;main.c: 734: pwStep = (batADValue - 1117) / 16;
  2770                           
  2771                           ;main.c: 731: }
  2772                           
  2773  02F9  3EA3               	addlw	163
  2774  02FA  00F4               	movwf	??_checkBatAD
  2775  02FB  082B               	movf	_batADValue+1,w
  2776  02FC  1803               	skipnc
  2777  02FD  3E01               	addlw	1
  2778  02FE  3EFB               	addlw	251
  2779  02FF  00F5               	movwf	??_checkBatAD+1
  2780  0300  3004               	movlw	4
  2781  0301                     u3755:	
  2782  0301  1003               	clrc
  2783  0302  0CF5               	rrf	??_checkBatAD+1,f
  2784  0303  0CF4               	rrf	??_checkBatAD,f
  2785  0304  3EFF               	addlw	-1
  2786  0305  1D03               	skipz
  2787  0306  2B01               	goto	u3755
  2788  0307  0874               	movf	??_checkBatAD,w
  2789  0308                     L16:	
  2790  0308  00C3               	movwf	_pwStep
  2791                           
  2792                           ;main.c: 735: }
  2793                           ;main.c: 736: if(pwStep > 99)
  2794  0309  3064               	movlw	100
  2795  030A  0243               	subwf	_pwStep,w
  2796  030B  1C03               	skipc
  2797  030C  2B0F               	goto	l3337
  2798                           
  2799                           ;main.c: 737: {
  2800                           ;main.c: 738: pwStep = 99;
  2801  030D  3063               	movlw	99
  2802  030E  00C3               	movwf	_pwStep
  2803  030F                     l3337:	
  2804                           
  2805                           ;main.c: 739: }
  2806                           ;main.c: 740: }
  2807                           ;main.c: 741: if(chrgFlag && batADValue > 1861)
  2808  030F  087A               	movf	_chrgFlag,w
  2809  0310  1903               	btfsc	3,2
  2810  0311  2B23               	goto	l3347
  2811  0312  3007               	movlw	7
  2812  0313  022B               	subwf	_batADValue+1,w
  2813  0314  3046               	movlw	70
  2814  0315  1903               	skipnz
  2815  0316  022A               	subwf	_batADValue,w
  2816  0317  1C03               	skipc
  2817  0318  2B23               	goto	l3347
  2818                           
  2819                           ;main.c: 742: {
  2820                           ;main.c: 743: protectFlag = 1;
  2821  0319  01CE               	clrf	_protectFlag
  2822  031A  0ACE               	incf	_protectFlag,f
  2823  031B  2B23               	goto	l3347
  2824  031C                     l3343:	
  2825                           
  2826                           ;main.c: 746: else
  2827                           ;main.c: 747: {
  2828                           ;main.c: 748: ADCON0 = 0;
  2829  031C  1683               	bsf	3,5	;RP0=1, select bank1
  2830  031D  0195               	clrf	21	;volatile
  2831                           
  2832                           ;main.c: 749: ADCON1 = 0;
  2833  031E  0196               	clrf	22	;volatile
  2834                           
  2835                           ;main.c: 750: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2836  031F  3085               	movlw	133
  2837  0320  00F4               	movwf	??_checkBatAD
  2838  0321                     u4087:	
  2839  0321  0BF4               	decfsz	??_checkBatAD,f
  2840  0322  2B21               	goto	u4087
  2841  0323                     l3347:	
  2842                           
  2843                           ;main.c: 751: }
  2844                           ;main.c: 752: test_adc = ADC_Sample(3, 5);
  2845  0323  3005               	movlw	5
  2846  0324  00F3               	movwf	ADC_Sample@adldo
  2847  0325  3003               	movlw	3
  2848  0326  211C               	fcall	_ADC_Sample
  2849  0327  00D5               	movwf	_test_adc	;volatile
  2850                           
  2851                           ;main.c: 753: if (0xA5 == test_adc)
  2852  0328  30A5               	movlw	165
  2853  0329  0655               	xorwf	_test_adc,w	;volatile
  2854  032A  1D03               	btfss	3,2
  2855  032B  2B57               	goto	l3367
  2856                           
  2857                           ;main.c: 754: {
  2858                           ;main.c: 755: if(chrgFlag && adresult > 100)
  2859  032C  087A               	movf	_chrgFlag,w
  2860  032D  1903               	btfsc	3,2
  2861  032E  0008               	return
  2862  032F  3000               	movlw	0
  2863  0330  0233               	subwf	_adresult+1,w	;volatile
  2864  0331  3065               	movlw	101
  2865  0332  1903               	skipnz
  2866  0333  0232               	subwf	_adresult,w	;volatile
  2867  0334  1C03               	skipc
  2868  0335  0008               	return
  2869                           
  2870                           ;main.c: 756: {
  2871                           ;main.c: 758: if(adresult > 810 || (batADValue - adresult) > 810)
  2872  0336  3003               	movlw	3
  2873  0337  0233               	subwf	_adresult+1,w	;volatile
  2874  0338  302B               	movlw	43
  2875  0339  1903               	skipnz
  2876  033A  0232               	subwf	_adresult,w	;volatile
  2877  033B  1803               	skipnc
  2878  033C  2B4C               	goto	l3359
  2879  033D  0832               	movf	_adresult,w	;volatile
  2880  033E  022A               	subwf	_batADValue,w
  2881  033F  00F4               	movwf	??_checkBatAD
  2882  0340  0833               	movf	_adresult+1,w	;volatile
  2883  0341  1C03               	skipc
  2884  0342  0A33               	incf	_adresult+1,w	;volatile
  2885  0343  022B               	subwf	_batADValue+1,w
  2886  0344  00F5               	movwf	??_checkBatAD+1
  2887  0345  3003               	movlw	3
  2888  0346  0275               	subwf	??_checkBatAD+1,w
  2889  0347  302B               	movlw	43
  2890  0348  1903               	skipnz
  2891  0349  0274               	subwf	??_checkBatAD,w
  2892  034A  1C03               	skipc
  2893  034B  2B55               	goto	l3365
  2894  034C                     l3359:	
  2895                           
  2896                           ;main.c: 759: {
  2897                           ;main.c: 761: if(++countHalfFull > 250)
  2898  034C  30FB               	movlw	251
  2899  034D  0ACF               	incf	_countHalfFull,f
  2900  034E  024F               	subwf	_countHalfFull,w
  2901  034F  1C03               	skipc
  2902  0350  0008               	return
  2903  0351  3002               	movlw	2
  2904                           
  2905                           ;main.c: 762: {
  2906                           ;main.c: 763: countHalfFull = 0;
  2907  0352  01CF               	clrf	_countHalfFull
  2908                           
  2909                           ;main.c: 764: protectFlag = 2;
  2910  0353  00CE               	movwf	_protectFlag
  2911  0354  0008               	return
  2912  0355                     l3365:	
  2913                           
  2914                           ;main.c: 767: else
  2915                           ;main.c: 768: {
  2916                           ;main.c: 769: countHalfFull = 0;
  2917  0355  01CF               	clrf	_countHalfFull
  2918                           
  2919                           ;main.c: 770: }
  2920                           ;main.c: 771: }
  2921                           ;main.c: 772: }
  2922  0356  0008               	return
  2923  0357                     l3367:	
  2924                           
  2925                           ;main.c: 773: else
  2926                           ;main.c: 774: {
  2927                           ;main.c: 775: ADCON0 = 0;
  2928  0357  1683               	bsf	3,5	;RP0=1, select bank1
  2929  0358  0195               	clrf	21	;volatile
  2930                           
  2931                           ;main.c: 776: ADCON1 = 0;
  2932  0359  0196               	clrf	22	;volatile
  2933                           
  2934                           ;main.c: 777: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2935  035A  3085               	movlw	133
  2936  035B  00F4               	movwf	??_checkBatAD
  2937  035C                     u4097:	
  2938  035C  0BF4               	decfsz	??_checkBatAD,f
  2939  035D  2B5C               	goto	u4097
  2940  035E  0008               	return
  2941  035F                     __end_of_checkBatAD:	
  2942                           
  2943                           	psect	text15
  2944  011C                     __ptext15:	
  2945 ;; *************** function _ADC_Sample *****************
  2946 ;; Defined at:
  2947 ;;		line 1010 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;  adch            1    wreg     unsigned char 
  2950 ;;  adldo           1    3[COMMON] unsigned char 
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;  adch            1    5[BANK0 ] unsigned char 
  2953 ;;  j               1    4[BANK0 ] unsigned char 
  2954 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  2955 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  2956 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  2957 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  2958 ;;  i               1    6[BANK0 ] unsigned char 
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  1    wreg      unsigned char 
  2961 ;; Registers used:
  2962 ;;		wreg, status,2, status,0
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 100/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMMON   BANK0   BANK1
  2968 ;;      Params:         1       0       0
  2969 ;;      Locals:         0      13       0
  2970 ;;      Temps:          0       4       0
  2971 ;;      Totals:         1      17       0
  2972 ;;Total ram usage:       18 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    2
  2975 ;; This function calls:
  2976 ;;		Nothing
  2977 ;; This function is called by:
  2978 ;;		_checkOutA
  2979 ;;		_checkBatAD
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           
  2984                           ;psect for function _ADC_Sample
  2985  011C                     _ADC_Sample:	
  2986                           
  2987                           ;incstack = 0
  2988                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2989                           ;ADC_Sample@adch stored from wreg
  2990  011C  1283               	bcf	3,5	;RP0=0, select bank0
  2991  011D  00DB               	movwf	ADC_Sample@adch
  2992                           
  2993                           ;main.c: 1012: volatile unsigned long adsum = 0;
  2994                           
  2995                           ;main.c: 1013: volatile unsigned int admin = 0, admax = 0;
  2996  011E  21F7               	fcall	PL4	;call to abstracted procedure
  2997                           
  2998                           ;main.c: 1014: volatile unsigned int ad_temp = 0;
  2999  011F  01E5               	clrf	ADC_Sample@ad_temp	;volatile
  3000  0120  01E6               	clrf	ADC_Sample@ad_temp+1	;volatile
  3001                           
  3002                           ;main.c: 1016: if ((!LDO_EN) && (adldo & 0x04) )
  3003  0121  1683               	bsf	3,5	;RP0=1, select bank1
  3004  0122  1D16               	btfss	22,2	;volatile
  3005  0123  1D73               	btfss	ADC_Sample@adldo,2
  3006  0124  292E               	goto	l2967
  3007                           
  3008                           ;main.c: 1017: {
  3009                           ;main.c: 1019: ADCON1 = adldo;
  3010  0125  0873               	movf	ADC_Sample@adldo,w
  3011  0126  0096               	movwf	22	;volatile
  3012                           
  3013                           ;main.c: 1020: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3014  0127  3084               	movlw	132
  3015  0128  1283               	bcf	3,5	;RP0=0, select bank0
  3016  0129  00D6               	movwf	??_ADC_Sample
  3017  012A                     u4107:	
  3018  012A  0BD6               	decfsz	??_ADC_Sample,f
  3019  012B  292A               	goto	u4107
  3020  012C  292D               	nop2
  3021                           
  3022                           ;main.c: 1021: }
  3023  012D  2930               	goto	l2969
  3024  012E                     l2967:	
  3025                           
  3026                           ;main.c: 1022: else
  3027                           ;main.c: 1023: ADCON1 = adldo;
  3028  012E  0873               	movf	ADC_Sample@adldo,w
  3029  012F  0096               	movwf	22	;volatile
  3030  0130                     l2969:	
  3031                           
  3032                           ;main.c: 1025: if(adch & 0x10)
  3033  0130  1283               	bcf	3,5	;RP0=0, select bank0
  3034  0131  1E5B               	btfss	ADC_Sample@adch,4
  3035  0132  2938               	goto	l2977
  3036                           
  3037                           ;main.c: 1026: {
  3038                           ;main.c: 1027: CHS4 = 1;
  3039  0133  1683               	bsf	3,5	;RP0=1, select bank1
  3040  0134  1716               	bsf	22,6	;volatile
  3041                           
  3042                           ;main.c: 1028: adch &= 0x0f;
  3043  0135  300F               	movlw	15
  3044  0136  1283               	bcf	3,5	;RP0=0, select bank0
  3045  0137  05DB               	andwf	ADC_Sample@adch,f
  3046  0138                     l2977:	
  3047                           
  3048                           ;main.c: 1031: for (i = 0; i < 10; i++)
  3049  0138  01DC               	clrf	ADC_Sample@i
  3050  0139                     l2983:	
  3051                           
  3052                           ;main.c: 1032: {
  3053                           ;main.c: 1033: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3054  0139  085B               	movf	ADC_Sample@adch,w
  3055  013A  00D6               	movwf	??_ADC_Sample
  3056  013B  3001               	movlw	1
  3057  013C  1003               	clrc
  3058  013D                     L18:	
  3059  013D  0DD6               	rlf	??_ADC_Sample,f
  3060  013E  3EFF               	addlw	-1
  3061  013F  1003               	clrc
  3062  0140  1D03               	skipz
  3063  0141  293D               	goto	L18
  3064  0142  0D56               	rlf	??_ADC_Sample,w
  3065  0143  3841               	iorlw	65
  3066  0144  1683               	bsf	3,5	;RP0=1, select bank1
  3067  0145  0095               	movwf	21	;volatile
  3068  0146  0000               	nop	;# 
  3069  0147  0000               	nop	;# 
  3070  0148  0000               	nop	;# 
  3071  0149  0000               	nop	;# 
  3072                           
  3073                           ;main.c: 1038: GODONE = 1;
  3074  014A  1683               	bsf	3,5	;RP0=1, select bank1
  3075  014B  1495               	bsf	21,1	;volatile
  3076                           
  3077                           ;main.c: 1040: unsigned char j = 0;
  3078  014C  1283               	bcf	3,5	;RP0=0, select bank0
  3079  014D  01DA               	clrf	ADC_Sample@j
  3080  014E                     l880:	
  3081                           ;main.c: 1041: while (GODONE)
  3082                           
  3083  014E  1683               	bsf	3,5	;RP0=1, select bank1
  3084  014F  1C95               	btfss	21,1	;volatile
  3085  0150  2959               	goto	l2993
  3086                           
  3087                           ;main.c: 1042: {
  3088                           ;main.c: 1043: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3089  0151  2952               	nop2	;2 cycle nop
  3090  0152  2953               	nop2	;2 cycle nop
  3091  0153  2954               	nop2	;2 cycle nop
  3092  0154  2955               	nop2	;2 cycle nop
  3093                           
  3094                           ;main.c: 1045: if (0 == (--j))
  3095  0155  1283               	bcf	3,5	;RP0=0, select bank0
  3096  0156  0BDA               	decfsz	ADC_Sample@j,f
  3097  0157  294E               	goto	l880
  3098                           
  3099                           ;main.c: 1046: return 0;
  3100  0158  3400               	retlw	0
  3101  0159                     l2993:	
  3102                           
  3103                           ;main.c: 1047: }
  3104                           ;main.c: 1049: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3105  0159  0819               	movf	25,w	;volatile
  3106  015A  1283               	bcf	3,5	;RP0=0, select bank0
  3107  015B  00E5               	movwf	ADC_Sample@ad_temp	;volatile
  3108  015C  01E6               	clrf	ADC_Sample@ad_temp+1	;volatile
  3109  015D  0EE5               	swapf	ADC_Sample@ad_temp,f	;volatile
  3110  015E  0EE6               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3111  015F  30F0               	movlw	240
  3112  0160  05E6               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3113  0161  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3114  0162  390F               	andlw	15
  3115  0163  04E6               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3116  0164  30F0               	movlw	240
  3117  0165  05E5               	andwf	ADC_Sample@ad_temp,f	;volatile
  3118  0166  1683               	bsf	3,5	;RP0=1, select bank1
  3119  0167  0E18               	swapf	24,w	;volatile
  3120  0168  390F               	andlw	15
  3121  0169  1283               	bcf	3,5	;RP0=0, select bank0
  3122  016A  07E5               	addwf	ADC_Sample@ad_temp,f	;volatile
  3123  016B  1803               	skipnc
  3124  016C  0AE6               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3125                           
  3126                           ;main.c: 1051: if (0 == admax)
  3127  016D  0863               	movf	ADC_Sample@admax,w	;volatile
  3128  016E  0464               	iorwf	ADC_Sample@admax+1,w	;volatile
  3129  016F  1D03               	btfss	3,2
  3130  0170  2973               	goto	l3001
  3131                           
  3132                           ;main.c: 1052: {
  3133                           ;main.c: 1053: admax = ad_temp;
  3134  0171  2200               	fcall	PL10	;call to abstracted procedure
  3135  0172  2985               	goto	l3007
  3136  0173                     l3001:	
  3137                           ;main.c: 1055: }
  3138                           
  3139                           ;main.c: 1054: admin = ad_temp;
  3140                           
  3141                           
  3142                           ;main.c: 1056: else if (ad_temp > admax)
  3143  0173  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3144  0174  0264               	subwf	ADC_Sample@admax+1,w	;volatile
  3145  0175  1D03               	skipz
  3146  0176  2979               	goto	u3045
  3147  0177  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3148  0178  0263               	subwf	ADC_Sample@admax,w	;volatile
  3149  0179                     u3045:	
  3150  0179  1803               	skipnc
  3151  017A  297D               	goto	l3005
  3152                           
  3153                           ;main.c: 1057: admax = ad_temp;
  3154  017B  2200               	fcall	PL10	;call to abstracted procedure
  3155  017C  2989               	goto	l886
  3156  017D                     l3005:	
  3157                           
  3158                           ;main.c: 1058: else if (ad_temp < admin)
  3159  017D  0862               	movf	ADC_Sample@admin+1,w	;volatile
  3160  017E  0266               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3161  017F  1D03               	skipz
  3162  0180  2983               	goto	u3055
  3163  0181  0861               	movf	ADC_Sample@admin,w	;volatile
  3164  0182  0265               	subwf	ADC_Sample@ad_temp,w	;volatile
  3165  0183                     u3055:	
  3166  0183  1803               	skipnc
  3167  0184  2989               	goto	l886
  3168  0185                     l3007:	
  3169                           
  3170                           ;main.c: 1059: admin = ad_temp;
  3171  0185  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3172  0186  00E2               	movwf	ADC_Sample@admin+1	;volatile
  3173  0187  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3174  0188  00E1               	movwf	ADC_Sample@admin	;volatile
  3175  0189                     l886:	
  3176                           
  3177                           ;main.c: 1061: adsum += ad_temp;
  3178  0189  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3179  018A  00D6               	movwf	??_ADC_Sample
  3180  018B  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3181  018C  00D7               	movwf	??_ADC_Sample+1
  3182  018D  01D8               	clrf	??_ADC_Sample+2
  3183  018E  01D9               	clrf	??_ADC_Sample+3
  3184  018F  0856               	movf	??_ADC_Sample,w
  3185  0190  07DD               	addwf	ADC_Sample@adsum,f	;volatile
  3186  0191  0857               	movf	??_ADC_Sample+1,w
  3187  0192  1103               	clrz
  3188  0193  1803               	skipnc
  3189  0194  3E01               	addlw	1
  3190  0195  1D03               	btfss	3,2
  3191  0196  07DE               	addwf	ADC_Sample@adsum+1,f	;volatile
  3192  0197  0858               	movf	??_ADC_Sample+2,w
  3193  0198  1103               	clrz
  3194  0199  1803               	skipnc
  3195  019A  3E01               	addlw	1
  3196  019B  1D03               	btfss	3,2
  3197  019C  07DF               	addwf	ADC_Sample@adsum+2,f	;volatile
  3198  019D  0859               	movf	??_ADC_Sample+3,w
  3199  019E  1103               	clrz
  3200  019F  1803               	skipnc
  3201  01A0  3E01               	addlw	1
  3202  01A1  1D03               	btfss	3,2
  3203  01A2  07E0               	addwf	ADC_Sample@adsum+3,f	;volatile
  3204  01A3  300A               	movlw	10
  3205  01A4  0ADC               	incf	ADC_Sample@i,f
  3206  01A5  025C               	subwf	ADC_Sample@i,w
  3207  01A6  1C03               	skipc
  3208  01A7  2939               	goto	l2983
  3209                           
  3210                           ;main.c: 1062: }
  3211                           ;main.c: 1063: adsum -= admax;
  3212  01A8  0863               	movf	ADC_Sample@admax,w	;volatile
  3213  01A9  00D6               	movwf	??_ADC_Sample
  3214  01AA  0864               	movf	ADC_Sample@admax+1,w	;volatile
  3215  01AB  21E8               	fcall	PL2	;call to abstracted procedure
  3216  01AC  1C03               	skipc
  3217  01AD  0F59               	incfsz	??_ADC_Sample+3,w
  3218  01AE  02E0               	subwf	ADC_Sample@adsum+3,f	;volatile
  3219                           
  3220                           ;main.c: 1064: if (adsum >= admin)
  3221  01AF  0861               	movf	ADC_Sample@admin,w	;volatile
  3222  01B0  00D6               	movwf	??_ADC_Sample
  3223  01B1  0862               	movf	ADC_Sample@admin+1,w	;volatile
  3224  01B2  00D7               	movwf	??_ADC_Sample+1
  3225  01B3  01D8               	clrf	??_ADC_Sample+2
  3226  01B4  01D9               	clrf	??_ADC_Sample+3
  3227  01B5  0859               	movf	??_ADC_Sample+3,w
  3228  01B6  0260               	subwf	ADC_Sample@adsum+3,w	;volatile
  3229  01B7  1D03               	skipz
  3230  01B8  29C3               	goto	u3095
  3231  01B9  0858               	movf	??_ADC_Sample+2,w
  3232  01BA  025F               	subwf	ADC_Sample@adsum+2,w	;volatile
  3233  01BB  1D03               	skipz
  3234  01BC  29C3               	goto	u3095
  3235  01BD  0857               	movf	??_ADC_Sample+1,w
  3236  01BE  025E               	subwf	ADC_Sample@adsum+1,w	;volatile
  3237  01BF  1D03               	skipz
  3238  01C0  29C3               	goto	u3095
  3239  01C1  0856               	movf	??_ADC_Sample,w
  3240  01C2  025D               	subwf	ADC_Sample@adsum,w	;volatile
  3241  01C3                     u3095:	
  3242  01C3  1C03               	skipc
  3243  01C4  29CD               	goto	l890
  3244                           
  3245                           ;main.c: 1065: adsum -= admin;
  3246  01C5  0861               	movf	ADC_Sample@admin,w	;volatile
  3247  01C6  00D6               	movwf	??_ADC_Sample
  3248  01C7  0862               	movf	ADC_Sample@admin+1,w	;volatile
  3249  01C8  21E8               	fcall	PL2	;call to abstracted procedure
  3250  01C9  1C03               	skipc
  3251  01CA  0F59               	incfsz	??_ADC_Sample+3,w
  3252  01CB  02E0               	subwf	ADC_Sample@adsum+3,f	;volatile
  3253  01CC  29D1               	goto	l3017
  3254  01CD                     l890:	
  3255                           
  3256                           ;main.c: 1066: else
  3257                           ;main.c: 1067: adsum = 0;
  3258  01CD  01DD               	clrf	ADC_Sample@adsum	;volatile
  3259  01CE  01DE               	clrf	ADC_Sample@adsum+1	;volatile
  3260  01CF  01DF               	clrf	ADC_Sample@adsum+2	;volatile
  3261  01D0  01E0               	clrf	ADC_Sample@adsum+3	;volatile
  3262  01D1                     l3017:	
  3263                           
  3264                           ;main.c: 1069: adresult = adsum >> 3;
  3265  01D1  085D               	movf	ADC_Sample@adsum,w	;volatile
  3266  01D2  00D6               	movwf	??_ADC_Sample
  3267  01D3  085E               	movf	ADC_Sample@adsum+1,w	;volatile
  3268  01D4  00D7               	movwf	??_ADC_Sample+1
  3269  01D5  085F               	movf	ADC_Sample@adsum+2,w	;volatile
  3270  01D6  00D8               	movwf	??_ADC_Sample+2
  3271  01D7  0860               	movf	ADC_Sample@adsum+3,w	;volatile
  3272  01D8  00D9               	movwf	??_ADC_Sample+3
  3273  01D9  3003               	movlw	3
  3274  01DA                     u3115:	
  3275  01DA  1003               	clrc
  3276  01DB  0CD9               	rrf	??_ADC_Sample+3,f
  3277  01DC  0CD8               	rrf	??_ADC_Sample+2,f
  3278  01DD  0CD7               	rrf	??_ADC_Sample+1,f
  3279  01DE  0CD6               	rrf	??_ADC_Sample,f
  3280  01DF  3EFF               	addlw	-1
  3281  01E0  1D03               	skipz
  3282  01E1  29DA               	goto	u3115
  3283  01E2  0857               	movf	??_ADC_Sample+1,w
  3284  01E3  00B3               	movwf	_adresult+1	;volatile
  3285  01E4  0856               	movf	??_ADC_Sample,w
  3286  01E5  00B2               	movwf	_adresult	;volatile
  3287                           
  3288                           ;main.c: 1071: adsum = 0;
  3289                           
  3290                           ;main.c: 1072: admin = 0;
  3291                           
  3292                           ;main.c: 1073: admax = 0;
  3293  01E6  21F7               	fcall	PL4	;call to abstracted procedure
  3294                           
  3295                           ;main.c: 1074: return 0xA5;
  3296  01E7  34A5               	retlw	165
  3297  01E8                     __end_of_ADC_Sample:	
  3298  01E8                     PL2:	
  3299  01E8  00D7               	movwf	??_ADC_Sample+1
  3300  01E9  01D8               	clrf	??_ADC_Sample+2
  3301  01EA  01D9               	clrf	??_ADC_Sample+3
  3302  01EB  0856               	movf	??_ADC_Sample,w
  3303  01EC  02DD               	subwf	ADC_Sample@adsum,f	;volatile
  3304  01ED  0857               	movf	??_ADC_Sample+1,w
  3305  01EE  1C03               	skipc
  3306  01EF  0F57               	incfsz	??_ADC_Sample+1,w
  3307  01F0  02DE               	subwf	ADC_Sample@adsum+1,f	;volatile
  3308  01F1  0858               	movf	??_ADC_Sample+2,w
  3309  01F2  1C03               	skipc
  3310  01F3  0F58               	incfsz	??_ADC_Sample+2,w
  3311  01F4  02DF               	subwf	ADC_Sample@adsum+2,f	;volatile
  3312  01F5  0859               	movf	??_ADC_Sample+3,w
  3313  01F6  0008               	return
  3314  01F7                     __end_ofPL2:	
  3315  01F7                     PL4:	
  3316  01F7  01DD               	clrf	ADC_Sample@adsum	;volatile
  3317  01F8  01DE               	clrf	ADC_Sample@adsum+1	;volatile
  3318  01F9  01DF               	clrf	ADC_Sample@adsum+2	;volatile
  3319  01FA  01E0               	clrf	ADC_Sample@adsum+3	;volatile
  3320  01FB  01E1               	clrf	ADC_Sample@admin	;volatile
  3321  01FC  01E2               	clrf	ADC_Sample@admin+1	;volatile
  3322  01FD  01E3               	clrf	ADC_Sample@admax	;volatile
  3323  01FE  01E4               	clrf	ADC_Sample@admax+1	;volatile
  3324  01FF  0008               	return
  3325  0200                     __end_ofPL4:	
  3326  0200                     PL10:	
  3327  0200  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3328  0201  00E4               	movwf	ADC_Sample@admax+1	;volatile
  3329  0202  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3330  0203  00E3               	movwf	ADC_Sample@admax	;volatile
  3331  0204  0008               	return
  3332  0205                     __end_ofPL10:	
  3333                           
  3334                           	psect	text16
  3335  0404                     __ptext16:	
  3336 ;; *************** function _Sleep_Mode *****************
  3337 ;; Defined at:
  3338 ;;		line 934 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;		None
  3341 ;; Auto vars:     Size  Location     Type
  3342 ;;		None
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  1    wreg      void 
  3345 ;; Registers used:
  3346 ;;		wreg, status,2, status,0, pclath, cstack
  3347 ;; Tracked objects:
  3348 ;;		On entry : 100/0
  3349 ;;		On exit  : 100/100
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMMON   BANK0   BANK1
  3352 ;;      Params:         0       0       0
  3353 ;;      Locals:         0       0       0
  3354 ;;      Temps:          0       0       0
  3355 ;;      Totals:         0       0       0
  3356 ;;Total ram usage:        0 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; Hardware stack levels required when called:    3
  3359 ;; This function calls:
  3360 ;;		_AD_Init
  3361 ;;		_Init_System
  3362 ;; This function is called by:
  3363 ;;		_main
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           
  3368                           ;psect for function _Sleep_Mode
  3369  0404                     _Sleep_Mode:	
  3370                           
  3371                           ;main.c: 936: INTCON = 0;
  3372                           
  3373                           ;incstack = 0
  3374                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3375  0404  018B               	clrf	11	;volatile
  3376                           
  3377                           ;main.c: 938: OPTION_REG = 0;
  3378  0405  0181               	clrf	1	;volatile
  3379                           
  3380                           ;main.c: 940: TRISA = 0x1F;
  3381  0406  301F               	movlw	31
  3382  0407  1683               	bsf	3,5	;RP0=1, select bank1
  3383  0408  0085               	movwf	5	;volatile
  3384                           
  3385                           ;main.c: 941: WPUA = 0B00000000;
  3386  0409  0188               	clrf	8	;volatile
  3387                           
  3388                           ;main.c: 942: PORTA = 0x00;
  3389  040A  0186               	clrf	6	;volatile
  3390                           
  3391                           ;main.c: 943: TRISB = 0B00000100;
  3392  040B  3004               	movlw	4
  3393  040C  1283               	bcf	3,5	;RP0=0, select bank0
  3394  040D  0085               	movwf	5	;volatile
  3395                           
  3396                           ;main.c: 944: PORTB = 0B00000000;
  3397  040E  0186               	clrf	6	;volatile
  3398                           
  3399                           ;main.c: 945: WPUB = 0B00000100;
  3400  040F  0088               	movwf	8	;volatile
  3401                           
  3402                           ;main.c: 947: ADCON0 = 0;
  3403  0410  1683               	bsf	3,5	;RP0=1, select bank1
  3404  0411  0195               	clrf	21	;volatile
  3405                           
  3406                           ;main.c: 948: ADCON1 = 0;
  3407  0412  0196               	clrf	22	;volatile
  3408                           
  3409                           ;main.c: 950: PWMCON0 = 0;
  3410  0413  1283               	bcf	3,5	;RP0=0, select bank0
  3411  0414  0195               	clrf	21	;volatile
  3412                           
  3413                           ;main.c: 952: OSCCON = 0X70;
  3414  0415  3070               	movlw	112
  3415  0416  0094               	movwf	20	;volatile
  3416                           
  3417                           ;main.c: 954: IOCA = 0B00000010;
  3418  0417  3002               	movlw	2
  3419  0418  1683               	bsf	3,5	;RP0=1, select bank1
  3420  0419  0089               	movwf	9	;volatile
  3421                           
  3422                           ;main.c: 955: IOCB = 0B00000100;
  3423  041A  3004               	movlw	4
  3424  041B  1283               	bcf	3,5	;RP0=0, select bank0
  3425  041C  0089               	movwf	9	;volatile
  3426                           
  3427                           ;main.c: 957: RAIE = 1;
  3428  041D  158E               	bsf	14,3	;volatile
  3429                           
  3430                           ;main.c: 958: PEIE = 1;
  3431  041E  170B               	bsf	11,6	;volatile
  3432                           
  3433                           ;main.c: 959: RBIE = 1;
  3434  041F  158B               	bsf	11,3	;volatile
  3435                           
  3436                           ;main.c: 960: GIE = 0;
  3437  0420  138B               	bcf	11,7	;volatile
  3438                           
  3439                           ;main.c: 962: PIE1 &= 0X08;
  3440  0421  3008               	movlw	8
  3441  0422  058E               	andwf	14,f	;volatile
  3442                           
  3443                           ;main.c: 963: PIR1 = 0;
  3444  0423  018D               	clrf	13	;volatile
  3445                           
  3446                           ;main.c: 964: INTCON &= 0XC8;
  3447  0424  30C8               	movlw	200
  3448  0425  058B               	andwf	11,f	;volatile
  3449                           
  3450                           ;main.c: 966: PORTA;
  3451  0426  1683               	bsf	3,5	;RP0=1, select bank1
  3452  0427  0806               	movf	6,w	;volatile
  3453                           
  3454                           ;main.c: 967: RAIF = 0;
  3455  0428  1283               	bcf	3,5	;RP0=0, select bank0
  3456  0429  118D               	bcf	13,3	;volatile
  3457                           
  3458                           ;main.c: 968: PORTB;
  3459  042A  0806               	movf	6,w	;volatile
  3460                           
  3461                           ;main.c: 969: RBIF = 0;
  3462  042B  100B               	bcf	11,0	;volatile
  3463  042C  0064               	clrwdt	;# 
  3464  042D  0063               	sleep	;# 
  3465  042E  0000               	nop	;# 
  3466  042F  0064               	clrwdt	;# 
  3467  0430  0000               	nop	;# 
  3468  0431  0000               	nop	;# 
  3469  0432  0000               	nop	;# 
  3470  0433  0000               	nop	;# 
  3471  0434  0000               	nop	;# 
  3472                           
  3473                           ;main.c: 981: if(RAIF) RAIF = 0;
  3474  0435  1283               	bcf	3,5	;RP0=0, select bank0
  3475  0436  198D               	btfsc	13,3	;volatile
  3476  0437  118D               	bcf	13,3	;volatile
  3477                           
  3478                           ;main.c: 982: if(RBIF) RBIF = 0;
  3479  0438  180B               	btfsc	11,0	;volatile
  3480  0439  100B               	bcf	11,0	;volatile
  3481                           
  3482                           ;main.c: 983: if(TMR2IF) TMR2IF = 0;
  3483  043A  188D               	btfsc	13,1	;volatile
  3484  043B  108D               	bcf	13,1	;volatile
  3485                           
  3486                           ;main.c: 984: IOCA = 0B00000000;
  3487  043C  1683               	bsf	3,5	;RP0=1, select bank1
  3488  043D  0189               	clrf	9	;volatile
  3489                           
  3490                           ;main.c: 985: IOCB = 0B00000000;
  3491  043E  1283               	bcf	3,5	;RP0=0, select bank0
  3492  043F  0189               	clrf	9	;volatile
  3493                           
  3494                           ;main.c: 986: Init_System();
  3495  0440  24DB               	fcall	_Init_System
  3496                           
  3497                           ;main.c: 987: AD_Init();
  3498  0441  2D9A               	ljmp	l2131
  3499  0442                     __end_of_Sleep_Mode:	
  3500                           
  3501                           	psect	text17
  3502  04DB                     __ptext17:	
  3503 ;; *************** function _Init_System *****************
  3504 ;; Defined at:
  3505 ;;		line 790 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;		None
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;		None
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  1    wreg      void 
  3512 ;; Registers used:
  3513 ;;		wreg, status,2
  3514 ;; Tracked objects:
  3515 ;;		On entry : 100/0
  3516 ;;		On exit  : 100/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMMON   BANK0   BANK1
  3519 ;;      Params:         0       0       0
  3520 ;;      Locals:         0       0       0
  3521 ;;      Temps:          0       0       0
  3522 ;;      Totals:         0       0       0
  3523 ;;Total ram usage:        0 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    2
  3526 ;; This function calls:
  3527 ;;		Nothing
  3528 ;; This function is called by:
  3529 ;;		_main
  3530 ;;		_Sleep_Mode
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534                           
  3535                           ;psect for function _Init_System
  3536  04DB                     _Init_System:	
  3537                           
  3538                           ;incstack = 0
  3539                           ; Regs used in _Init_System: [wreg+status,2]
  3540  04DB  0000               	nop	;# 
  3541  04DC  0064               	clrwdt	;# 
  3542                           
  3543                           ;main.c: 794: OPTION_REG = 0;
  3544  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  3545  04DE  0181               	clrf	1	;volatile
  3546  04DF  0064               	clrwdt	;# 
  3547                           
  3548                           ;main.c: 796: OSCCON = 0X72;
  3549  04E0  3072               	movlw	114
  3550  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  3551  04E2  0094               	movwf	20	;volatile
  3552                           
  3553                           ;main.c: 798: WPUA = 0B00000000;
  3554  04E3  1683               	bsf	3,5	;RP0=1, select bank1
  3555  04E4  0188               	clrf	8	;volatile
  3556                           
  3557                           ;main.c: 799: WPDA = 0x02;
  3558  04E5  3002               	movlw	2
  3559  04E6  0087               	movwf	7	;volatile
  3560                           
  3561                           ;main.c: 800: WPUB = 0B00000100;
  3562  04E7  3004               	movlw	4
  3563  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  3564  04E9  0088               	movwf	8	;volatile
  3565                           
  3566                           ;main.c: 802: TRISA = 0x1F;
  3567  04EA  301F               	movlw	31
  3568  04EB  1683               	bsf	3,5	;RP0=1, select bank1
  3569  04EC  0085               	movwf	5	;volatile
  3570                           
  3571                           ;main.c: 803: TRISB = 0B00000100;
  3572  04ED  3004               	movlw	4
  3573  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  3574  04EF  0085               	movwf	5	;volatile
  3575                           
  3576                           ;main.c: 805: PORTA = 0X00;
  3577  04F0  1683               	bsf	3,5	;RP0=1, select bank1
  3578  04F1  0186               	clrf	6	;volatile
  3579                           
  3580                           ;main.c: 806: PORTB = 0X00;
  3581  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  3582  04F3  0186               	clrf	6	;volatile
  3583                           
  3584                           ;main.c: 810: PR2 = 249;
  3585  04F4  30F9               	movlw	249
  3586  04F5  0091               	movwf	17	;volatile
  3587                           
  3588                           ;main.c: 811: TMR2IF = 0;
  3589  04F6  108D               	bcf	13,1	;volatile
  3590                           
  3591                           ;main.c: 812: TMR2IE = 1;
  3592  04F7  148E               	bsf	14,1	;volatile
  3593                           
  3594                           ;main.c: 814: T2CON = 0B00000100;
  3595  04F8  3004               	movlw	4
  3596  04F9  0093               	movwf	19	;volatile
  3597                           
  3598                           ;main.c: 815: INTCON = 0XC0;
  3599  04FA  30C0               	movlw	192
  3600  04FB  008B               	movwf	11	;volatile
  3601  04FC  0008               	return
  3602  04FD                     __end_of_Init_System:	
  3603                           
  3604                           	psect	text18
  3605  059A                     __ptext18:	
  3606 ;; *************** function _AD_Init *****************
  3607 ;; Defined at:
  3608 ;;		line 827 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;		None
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;		None
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  1    wreg      void 
  3615 ;; Registers used:
  3616 ;;		wreg, status,2
  3617 ;; Tracked objects:
  3618 ;;		On entry : 100/0
  3619 ;;		On exit  : 100/100
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMMON   BANK0   BANK1
  3622 ;;      Params:         0       0       0
  3623 ;;      Locals:         0       0       0
  3624 ;;      Temps:          0       0       0
  3625 ;;      Totals:         0       0       0
  3626 ;;Total ram usage:        0 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    2
  3629 ;; This function calls:
  3630 ;;		Nothing
  3631 ;; This function is called by:
  3632 ;;		_main
  3633 ;;		_Sleep_Mode
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           
  3638                           ;psect for function _AD_Init
  3639  059A                     _AD_Init:	
  3640  059A                     l2131:	
  3641                           ;incstack = 0
  3642                           ; Regs used in _AD_Init: [wreg+status,2]
  3643                           
  3644                           
  3645                           ;main.c: 860: ADCON0 = 0X41;
  3646  059A  3041               	movlw	65
  3647  059B  1683               	bsf	3,5	;RP0=1, select bank1
  3648  059C  0095               	movwf	21	;volatile
  3649                           
  3650                           ;main.c: 877: ADCON1 = 0;
  3651  059D  0196               	clrf	22	;volatile
  3652                           
  3653                           ;main.c: 878: ANSEL0 = 0X1D;
  3654  059E  301D               	movlw	29
  3655  059F  0093               	movwf	19	;volatile
  3656  05A0  0008               	return
  3657  05A1                     __end_of_AD_Init:	
  3658                           
  3659                           	psect	text19
  3660  051B                     __ptext19:	
  3661 ;; *************** function _Isr_Timer *****************
  3662 ;; Defined at:
  3663 ;;		line 100 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;		None
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;		None
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  1    wreg      void 
  3670 ;; Registers used:
  3671 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 100/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMMON   BANK0   BANK1
  3677 ;;      Params:         0       0       0
  3678 ;;      Locals:         0       0       0
  3679 ;;      Temps:          3       0       0
  3680 ;;      Totals:         3       0       0
  3681 ;;Total ram usage:        3 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    1
  3684 ;; This function calls:
  3685 ;;		_ledShow
  3686 ;; This function is called by:
  3687 ;;		Interrupt level 1
  3688 ;; This function uses a non-reentrant model
  3689 ;;
  3690                           
  3691                           
  3692                           ;psect for function _Isr_Timer
  3693  051B                     _Isr_Timer:	
  3694                           
  3695                           ;main.c: 102: if(TMR2IF)
  3696  051B  1283               	bcf	3,5	;RP0=0, select bank0
  3697  051C  1C8D               	btfss	13,1	;volatile
  3698  051D  2D2F               	goto	i1l656
  3699                           
  3700                           ;main.c: 103: {
  3701                           ;main.c: 104: TMR2IF = 0;
  3702  051E  108D               	bcf	13,1	;volatile
  3703                           
  3704                           ;main.c: 105: if(++intCount >= 160)
  3705  051F  30A0               	movlw	160
  3706  0520  0AD4               	incf	_intCount,f
  3707  0521  0254               	subwf	_intCount,w
  3708  0522  1C03               	skipc
  3709  0523  2D2C               	goto	i1l2889
  3710  0524  3064               	movlw	100
  3711                           
  3712                           ;main.c: 106: {
  3713                           ;main.c: 107: intCount = 0;
  3714  0525  01D4               	clrf	_intCount
  3715                           
  3716                           ;main.c: 108: IntFlag = 1;
  3717  0526  01D2               	clrf	_IntFlag
  3718  0527  0AD2               	incf	_IntFlag,f
  3719                           
  3720                           ;main.c: 109: if(++count1s >= 100)
  3721  0528  0AD3               	incf	_count1s,f
  3722  0529  0253               	subwf	_count1s,w
  3723  052A  1803               	btfsc	3,0
  3724                           
  3725                           ;main.c: 110: {
  3726                           ;main.c: 111: count1s = 0;
  3727  052B  01D3               	clrf	_count1s
  3728  052C                     i1l2889:	
  3729                           
  3730                           ;main.c: 112: }
  3731                           ;main.c: 113: }
  3732                           ;main.c: 114: ledShow();
  3733  052C  235F               	fcall	_ledShow
  3734                           
  3735                           ;main.c: 115: intCount10++;
  3736  052D  1283               	bcf	3,5	;RP0=0, select bank0
  3737  052E  0AD0               	incf	_intCount10,f
  3738  052F                     i1l656:	
  3739  052F  0872               	movf	??_Isr_Timer+2,w
  3740  0530  008A               	movwf	10
  3741  0531  0871               	movf	??_Isr_Timer+1,w
  3742  0532  0084               	movwf	4
  3743  0533  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3744  0534  0083               	movwf	3
  3745  0535  0EFE               	swapf	126,f
  3746  0536  0E7E               	swapf	126,w
  3747  0537  0009               	retfie
  3748  0538                     __end_of_Isr_Timer:	
  3749                           
  3750                           	psect	intentry
  3751  0004                     __pintentry:	
  3752                           ;incstack = 0
  3753                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3754                           
  3755  0004                     interrupt_function:	
  3756  007E                     saved_w	set	btemp
  3757  0004  00FE               	movwf	btemp
  3758  0005  0E03               	swapf	3,w
  3759  0006  00F0               	movwf	??_Isr_Timer
  3760  0007  0804               	movf	4,w
  3761  0008  00F1               	movwf	??_Isr_Timer+1
  3762  0009  080A               	movf	10,w
  3763  000A  00F2               	movwf	??_Isr_Timer+2
  3764  000B  2D1B               	ljmp	_Isr_Timer
  3765                           
  3766                           	psect	text20
  3767  035F                     __ptext20:	
  3768 ;; *************** function _ledShow *****************
  3769 ;; Defined at:
  3770 ;;		line 163 in file "C:\mcuproject\scm\zdt\C212-FS_062B_SOP14\main.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;		None
  3773 ;; Auto vars:     Size  Location     Type
  3774 ;;		None
  3775 ;; Return value:  Size  Location     Type
  3776 ;;                  1    wreg      void 
  3777 ;; Registers used:
  3778 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3779 ;; Tracked objects:
  3780 ;;		On entry : 100/0
  3781 ;;		On exit  : 0/0
  3782 ;;		Unchanged: 0/0
  3783 ;; Data sizes:     COMMON   BANK0   BANK1
  3784 ;;      Params:         0       0       0
  3785 ;;      Locals:         0       0       0
  3786 ;;      Temps:          0       0       0
  3787 ;;      Totals:         0       0       0
  3788 ;;Total ram usage:        0 bytes
  3789 ;; Hardware stack levels used:    1
  3790 ;; This function calls:
  3791 ;;		Nothing
  3792 ;; This function is called by:
  3793 ;;		_Isr_Timer
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           
  3798                           ;psect for function _ledShow
  3799  035F                     _ledShow:	
  3800                           
  3801                           ;main.c: 165: if(++ledCntTime > 30)
  3802                           
  3803                           ;incstack = 0
  3804                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3805  035F  301F               	movlw	31
  3806  0360  0AB8               	incf	_ledCntTime,f
  3807  0361  0238               	subwf	_ledCntTime,w
  3808  0362  1C03               	skipc
  3809  0363  0008               	return
  3810  0364  3006               	movlw	6
  3811                           
  3812                           ;main.c: 166: {
  3813                           ;main.c: 167: ledCntTime = 0;
  3814  0365  01B8               	clrf	_ledCntTime
  3815                           
  3816                           ;main.c: 168: if(++ledCnt > 5)
  3817  0366  0ACC               	incf	_ledCnt,f
  3818  0367  024C               	subwf	_ledCnt,w
  3819  0368  1803               	btfsc	3,0
  3820                           
  3821                           ;main.c: 169: {
  3822                           ;main.c: 170: ledCnt = 0;
  3823  0369  01CC               	clrf	_ledCnt
  3824                           
  3825                           ;main.c: 171: }
  3826                           ;main.c: 172: PORTA &= 0xDF;
  3827  036A  1683               	bsf	3,5	;RP0=1, select bank1
  3828  036B  1286               	bcf	6,5	;volatile
  3829                           
  3830                           ;main.c: 173: PORTB &= 0xC7;
  3831  036C  30C7               	movlw	199
  3832  036D  1283               	bcf	3,5	;RP0=0, select bank0
  3833  036E  0586               	andwf	6,f	;volatile
  3834                           
  3835                           ;main.c: 174: TRISA |= 0x20;
  3836  036F  1683               	bsf	3,5	;RP0=1, select bank1
  3837  0370  1685               	bsf	5,5	;volatile
  3838                           
  3839                           ;main.c: 175: TRISB |= 0x38;
  3840  0371  3038               	movlw	56
  3841  0372  1283               	bcf	3,5	;RP0=0, select bank0
  3842  0373  0485               	iorwf	5,f	;volatile
  3843                           
  3844                           ;main.c: 176: switch(ledCnt)
  3845  0374  2BA7               	goto	i1l2379
  3846  0375                     i1l2345:	
  3847                           
  3848                           ;main.c: 179: if(ledStep > 0)
  3849  0375  0878               	movf	_ledStep,w
  3850  0376  1903               	btfsc	3,2
  3851  0377  0008               	return
  3852                           
  3853                           ;main.c: 180: {
  3854                           ;main.c: 181: TRISB &= 0xE7;
  3855  0378  30E7               	movlw	231
  3856  0379                     L19:	
  3857  0379  0585               	andwf	5,f	;volatile
  3858                           
  3859                           ;main.c: 182: PORTB |= 0x10;
  3860  037A  1606               	bsf	6,4	;volatile
  3861  037B  0008               	return
  3862  037C                     i1l2351:	
  3863                           
  3864                           ;main.c: 186: if(ledStep > 1)
  3865  037C  3002               	movlw	2
  3866  037D  0278               	subwf	_ledStep,w
  3867  037E  1C03               	skipc
  3868  037F  0008               	return
  3869                           
  3870                           ;main.c: 187: {
  3871                           ;main.c: 188: TRISB &= 0xCF;
  3872  0380  30CF               	movlw	207
  3873  0381  0585               	andwf	5,f	;volatile
  3874                           
  3875                           ;main.c: 189: PORTB |= 0x20;
  3876  0382  1686               	bsf	6,5	;volatile
  3877  0383  0008               	return
  3878  0384                     i1l2357:	
  3879                           
  3880                           ;main.c: 193: if(ledStep > 2)
  3881  0384  3003               	movlw	3
  3882  0385  0278               	subwf	_ledStep,w
  3883  0386  1C03               	skipc
  3884  0387  0008               	return
  3885                           
  3886                           ;main.c: 194: {
  3887                           ;main.c: 195: TRISB &= 0xE7;
  3888  0388  30E7               	movlw	231
  3889  0389  0585               	andwf	5,f	;volatile
  3890                           
  3891                           ;main.c: 196: PORTB |= 0x08;
  3892  038A  1586               	bsf	6,3	;volatile
  3893  038B  0008               	return
  3894  038C                     i1l2363:	
  3895                           
  3896                           ;main.c: 200: if(ledStep > 3)
  3897  038C  3004               	movlw	4
  3898  038D  0278               	subwf	_ledStep,w
  3899  038E  1C03               	skipc
  3900  038F  0008               	return
  3901                           
  3902                           ;main.c: 201: {
  3903                           ;main.c: 202: TRISB &= 0xCF;
  3904  0390  30CF               	movlw	207
  3905  0391  2B79               	goto	L19
  3906  0392                     i1l2369:	
  3907                           
  3908                           ;main.c: 207: if(ledStep > 4)
  3909  0392  3005               	movlw	5
  3910  0393  0278               	subwf	_ledStep,w
  3911  0394  1C03               	skipc
  3912  0395  0008               	return
  3913                           
  3914                           ;main.c: 208: {
  3915                           ;main.c: 209: TRISA &= 0xDF;
  3916  0396  1683               	bsf	3,5	;RP0=1, select bank1
  3917  0397  1285               	bcf	5,5	;volatile
  3918                           
  3919                           ;main.c: 210: TRISB &= 0xDF;
  3920  0398  1283               	bcf	3,5	;RP0=0, select bank0
  3921  0399  1285               	bcf	5,5	;volatile
  3922                           
  3923                           ;main.c: 211: PORTB |= 0x20;
  3924  039A  1686               	bsf	6,5	;volatile
  3925  039B  0008               	return
  3926  039C                     i1l2373:	
  3927                           
  3928                           ;main.c: 215: if(ledStep > 5)
  3929  039C  3006               	movlw	6
  3930  039D  0278               	subwf	_ledStep,w
  3931  039E  1C03               	skipc
  3932  039F  0008               	return
  3933                           
  3934                           ;main.c: 216: {
  3935                           ;main.c: 217: TRISA &= 0xDF;
  3936  03A0  1683               	bsf	3,5	;RP0=1, select bank1
  3937  03A1  1285               	bcf	5,5	;volatile
  3938                           
  3939                           ;main.c: 218: TRISB &= 0xDF;
  3940  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  3941  03A3  1285               	bcf	5,5	;volatile
  3942                           
  3943                           ;main.c: 219: PORTA |= 0x20;
  3944  03A4  1683               	bsf	3,5	;RP0=1, select bank1
  3945  03A5  1686               	bsf	6,5	;volatile
  3946  03A6  0008               	return
  3947  03A7                     i1l2379:	
  3948  03A7  084C               	movf	_ledCnt,w
  3949                           
  3950                           ; Switch size 1, requested type "space"
  3951                           ; Number of cases is 6, Range of values is 0 to 5
  3952                           ; switch strategies available:
  3953                           ; Name         Instructions Cycles
  3954                           ; direct_byte           12     6 (fixed)
  3955                           ; simple_byte           19    10 (average)
  3956                           ; jumptable            260     6 (fixed)
  3957                           ;	Chosen strategy is direct_byte
  3958  03A8  0084               	movwf	4
  3959  03A9  3006               	movlw	6
  3960  03AA  0204               	subwf	4,w
  3961  03AB  1803               	skipnc
  3962  03AC  0008               	return
  3963  03AD  3005               	movlw	high i1S3487
  3964  03AE  008A               	movwf	10
  3965  03AF  30A1               	movlw	low i1S3487
  3966  03B0  0704               	addwf	4,w
  3967  03B1  0082               	movwf	2
  3968  03B2  0008               	return
  3969  03B3                     __end_of_ledShow:	
  3970  007E                     btemp	set	126	;btemp
  3971  007E                     wtemp0	set	126
  3972                           
  3973                           	psect	swtext1
  3974  05A1                     __pswtext1:	
  3975  05A1                     i1S3487:	
  3976  05A1  2B9C               	ljmp	i1l2373
  3977  05A2  2B75               	ljmp	i1l2345
  3978  05A3  2B7C               	ljmp	i1l2351
  3979  05A4  2B84               	ljmp	i1l2357
  3980  05A5  2B8C               	ljmp	i1l2363
  3981  05A6  2B92               	ljmp	i1l2369


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         58
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     19      74
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->___bmul
    _ledCtr->___lbdiv
    _keyCtr->_keyRead
    _chrgCtr->___lbdiv
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkOutA
    _ledCtr->___lbmod
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3417
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0     145
                             ___bmul
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     145
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               1     1      0     683
                                              3 BANK0      1     1      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     362
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0     321
                                              0 BANK0      2     2      0
                            ___lbdiv
                        _chrgPwmInit
                        _chrgPwmStop
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     321
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            4     4      0    1159
                                              4 COMMON     2     2      0
                                             17 BANK0      2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0    1042
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1    1042
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
   _chrgCtr
     ___lbdiv
     _chrgPwmInit
     _chrgPwmStop
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
   _workCtr
     ___bmul
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     13      4A       4       92.5%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      55       7        0.0%
DATA                 0      0      55       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 08 14:11:36 2025

            _protectFlag 004E                        pc 0002           ___bmul@product 0074  
                     PL2 01E8                       PL4 01F7                       PL6 0116  
                     PL8 0584                       fsr 0004                      PL10 0200  
                    l661 0481                      l808 027C                      l665 0498  
                    l783 044C                      l880 014E                      l776 04D6  
                    l890 01CD                      l886 0189                      _GIE 005F  
                    _RB0 0030                      _RB1 0031                      _PR2 0011  
    __size_of_ADC_Sample 00CC                      fsr0 0004                      indf 0000  
        __end_of_AD_Init 05A1                     l3001 0173                     l2131 059A  
                   l3005 017D                     l3101 025E                     l1157 0560  
                   l3007 0185                     l3017 01D1                     l3113 0270  
                   l3105 0264                     l2137 05AA                     l3041 0550  
                   l3033 053C                     l2307 056D                     l3133 02A0  
                   l3117 0276                     l3109 026A                     l3301 0113  
                   l3221 007B                     l3213 0070                     l3205 0063  
                   l3135 02A3                     l3143 02A9                     l3223 007D  
                   l2175 0515                     l3321 02DF                     l3081 023E  
                   l3065 0226                     l3241 009F                     l3233 0097  
                   l3161 0024                     l3401 03E4                     l3067 0227  
                   l3147 02AD                     l3251 00C1                     l3235 0099  
                   l3403 03E7                     l2275 0571                     l3325 02E2  
                   l3085 0249                     l3077 023D                     l2293 055A  
                   l3261 00CE                     l3245 00A5                     l3173 0034  
                   l3413 03F2                     l3343 031C                     l3263 00D0  
                   l3247 00AB                     l3175 0036                     l3337 030F  
                   l3089 0251                     l3281 00F3                     l3257 00CB  
                   l3193 0055                     l2721 04C7                     l3409 03EC  
                   l3433 0489                     l3347 0323                     l3275 00EF  
                   l3195 0057                     l2723 04C9                     l3365 0355  
                   l3277 00F0                     l3285 00F7                     l3381 03C0  
                   l3359 034C                     l3367 0357                     l3199 0059  
                   l2719 04C4                     l2727 04CD                     l3391 03D2  
                   l3465 04B1                     l3389 03D0                     l2757 0468  
                   l2765 0478                     l3399 03E0                     l2759 046A  
                   l2983 0139                     l2967 012E                     l2993 0159  
                   l2977 0138                     l2969 0130                     _CHS4 04B6  
                   _IOCA 0089                     _IOCB 0009                     u3115 01DA  
                   u3045 0179                     u3055 0183                     u4107 012A  
                   u3095 01C3                     _PIE1 000E                     u3355 0288  
                   u4077 02B2                     u4087 0321                     u4097 035C  
                   u3635 00E3                     _PEIE 005E                     _RAIE 0073  
                   _RAIF 006B                     _RBIE 005B                     _RBIF 0058  
                   u3755 0301                     u3595 00BF                     _PIR1 000D  
                   _WPDA 0087                     _WPUA 0088                     _WPUB 0008  
                   _main 047C                     btemp 007E                     start 000C  
      ___bmul@multiplier 0075            ??_Init_System 0073                    ?_main 0070  
        __end_of___lbdiv 056F          __end_of___lbmod 0554                    _T2CON 0013  
                  i1l656 052F            _countHalfFull 004F                    _PORTA 0086  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0005  
                  _PWMTH 0018                    _PWMTL 0017          __end_of_chrgCtr 0116  
        __end_of_ledShow 03B3          __end_of_keyRead 051B                    pclath 000A  
        __end_of_pwmInit 059A          __end_of_pwmStop 05AA                    status 0003  
                  wtemp0 007E          __end_of_workCtr 047C          ___lbdiv@divisor 0073  
          _addPowerCount 0047          ___lbdiv@counter 0075          __initialization 000D  
           __end_of_main 04B3     __size_of_chrgPwmInit 0007     __size_of_chrgPwmStop 0003  
                 ??_main 0077                ??_AD_Init 0073      __end_of_Init_System 04FD  
                 _ADCON0 0095                   _ADCON1 0096                   i1S3487 05A1  
                 _ADRESH 0099                   _ADRESL 0098                   _ANSEL0 0093  
                 _GODONE 04A9                   i1l2351 037C                   i1l2345 0375  
                 i1l2363 038C                   i1l2373 039C                   i1l2357 0384  
                 i1l2369 0392                   i1l2379 03A7                   i1l2889 052C  
                 _LDO_EN 04B2                   _INTCON 000B                   _OSCCON 0014  
                 _TMR2IE 0071                   _TMR2IF 0069                   _PWMD0L 0019  
                 _PWMD1L 001A             ??_ADC_Sample 0056             keyCtr@kclick 0074  
     __size_of_Isr_Timer 001D               _Sleep_Mode 0404                   ___bmul 056F  
              ??___lbdiv 0074                ??___lbmod 0074                   _ledCnt 004C  
                 _ledCtr 03B3                   _keyCtr 04B3                ??_chrgCtr 0056  
                 _pwStep 0043                   _result 0030                ??_ledShow 0070  
              ??_keyRead 0073       __end_of_ADC_Sample 01E8                   saved_w 007E  
              ??_pwmInit 0073                ??_pwmStop 0073                ??_workCtr 0076  
       ___lbdiv@dividend 0074               _batADValue 002A          ___lbmod@divisor 0073  
__end_of__initialization 0016          ___lbmod@counter 0057      ___bmul@multiplicand 0073  
        _workOverOutTime 004D           __pcstackCOMMON 0070       __size_of_checkOutA 00B0  
            _Init_System 04DB               __end_ofPL2 01F7               __end_ofPL4 0200  
             __end_ofPL6 011C               __end_ofPL8 058A         ___lbdiv@quotient 0076  
      __end_of_Isr_Timer 0538               _checkBatAD 02B5               __pbssBANK0 0020  
           _chrgFullFlag 0051              ?_Sleep_Mode 0070               __pmaintext 047C  
                ?___bmul 0073               __pintentry 0004                  ?_ledCtr 0070  
           _chrgWaitTime 003A                  ?_keyCtr 0070               _ledCntTime 0038  
                _AD_Init 059A                  _PWM01DT 001F                  _PWMD01H 001E  
                _PWMCON0 0015                  _PWMCON1 0016                  _PWMCON2 001D  
      __end_of_checkOutA 02B5                  _IntFlag 0052               _intCount10 0050  
        ADC_Sample@adldo 0073          ADC_Sample@admax 0063          ADC_Sample@admin 0061  
        ADC_Sample@adsum 005D          __size_of___bmul 000E                  ___lbdiv 0554  
                ___lbmod 0538                  _addTime 003C          __size_of_ledCtr 0051  
        __size_of_keyCtr 0028                  _chrgCtr 0018               _lowBatFlag 0035  
                __ptext1 0442                  __ptext2 05A7                  __ptext3 0592  
                __ptext4 056F                  __ptext5 03B3                  __ptext6 0538  
                __ptext7 04B3                  __ptext8 04FD                  __ptext9 0018  
                _ledShow 035F                  _ledStep 0078                  _count1s 0053  
                _count5s 0024                  _count8s 0022                  _maxDuty 0049  
                _keyRead 04FD      __size_of_Sleep_Mode 003E                  _pwmInit 0592  
                _subTime 003B              ?_checkBatAD 0070                  _pwmStop 05A7  
             _preLedStep 0036                  clrloop0 058B                  _workCtr 0442  
             _outADValue 002C     end_of_initialization 0016            _longPressFlag 004A  
          ??_chrgPwmInit 0073            ??_chrgPwmStop 0073         ___lbmod@dividend 0056  
            ___lbmod@rem 0058      __size_of_checkBatAD 00AA           __end_of___bmul 057D  
           ?_Init_System 0070           __end_of_ledCtr 0404           __end_of_keyCtr 04DB  
    __end_of_chrgPwmInit 0584      __end_of_chrgPwmStop 05AD              __end_ofPL10 0205  
    start_initialization 000D                _Isr_Timer 051B             ??_Sleep_Mode 0073  
               ??___bmul 0074                 ??_ledCtr 0059        ADC_Sample@ad_temp 0065  
               ??_keyCtr 0074                 ?_AD_Init 0070              __pbssCOMMON 0077  
              ___latbits 0000            __pcstackBANK0 0056       __end_of_Sleep_Mode 0442  
             ?_Isr_Timer 0070                _checkOutA 0205                __pnvBANK0 0069  
            _chrgMaxDuty 0039                _chrgMaxAD 003E              _chrgPwmInit 057D  
               ?___lbdiv 0073                 ?___lbmod 0073              _chrgPwmStop 05AA  
               ?_chrgCtr 0070                __pswtext1 05A1                _count900s 0020  
               ?_ledShow 0070                 ?_keyRead 0070                _firstTime 0069  
         ADC_Sample@adch 005B                 ?_pwmInit 0070                _fullCount 0026  
           ??_checkBatAD 0074                 ?_pwmStop 0070                _lockCount 003D  
               ?_workCtr 0070              ADC_Sample@i 005C              ADC_Sample@j 005A  
      interrupt_function 0004               ?_checkOutA 0070                clear_ram0 058A  
              _prePwStep 0077              _reChrgCount 0042                _sleepTime 0034  
              _overCount 0048       __end_of_checkBatAD 035F     __size_of_Init_System 0022  
              _startTime 0045         __size_of_AD_Init 0007         keyRead@keyStatus 0073  
            ??_Isr_Timer 0070               _ADC_Sample 011C         __size_of___lbdiv 001B  
       __size_of___lbmod 001C              _lockLedStep 0041         __size_of_chrgCtr 00FE  
       __size_of_ledShow 0054         __size_of_keyRead 001E                 _adresult 0032  
               _chrgFlag 007A                 _chrgMode 003F                 __ptext10 05AA  
               __ptext11 057D                 __ptext20 035F                 __ptext12 0554  
               __ptext13 0205                 __ptext14 02B5                 __ptext15 011C  
               __ptext16 0404                 __ptext17 04DB                 __ptext18 059A  
               __ptext19 051B         __size_of_pwmInit 0008         __size_of_pwmStop 0003  
               _count50s 0028         __size_of_workCtr 003A                 _keyCount 004B  
               _intCount 0054            __size_of_main 0037              ??_checkOutA 0074  
       checkOutA@maxAout 0068                 _tempDuty 0046                 _test_adc 0055  
               _power_ad 002E                 _workStep 0079             _overChrgTime 0044  
               intlevel1 0000              ?_ADC_Sample 0073             ?_chrgPwmInit 0070  
           _overWorkTime 0037             ?_chrgPwmStop 0070              _showBatTime 0040  
             _OPTION_REG 0001  
