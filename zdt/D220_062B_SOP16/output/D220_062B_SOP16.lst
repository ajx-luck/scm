

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 12 15:20:59 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	pa_nodes0,global,class=CODE,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 1.45
    38                           ; Generated 16/11/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F887 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	nvBANK0
    73  0062                     __pnvBANK0:	
    74  0062                     _firstTime:	
    75  0062                     	ds	1
    76  001D                     _PWMCON2	set	29
    77  0018                     _PWMTH	set	24
    78  0017                     _PWMTL	set	23
    79  0016                     _PWMCON1	set	22
    80  0015                     _PWMCON0	set	21
    81  0014                     _OSCCON	set	20
    82  0013                     _T2CON	set	19
    83  0011                     _PR2	set	17
    84  000E                     _PIE1	set	14
    85  000D                     _PIR1	set	13
    86  000B                     _INTCON	set	11
    87  0009                     _IOCB	set	9
    88  0008                     _WPUB	set	8
    89  0006                     _PORTB	set	6
    90  0005                     _TRISB	set	5
    91  0001                     _OPTION_REG	set	1
    92  0071                     _TMR2IE	set	113
    93  0073                     _RAIE	set	115
    94  0069                     _TMR2IF	set	105
    95  006B                     _RAIF	set	107
    96  0058                     _RBIF	set	88
    97  005B                     _RBIE	set	91
    98  005E                     _PEIE	set	94
    99  005F                     _GIE	set	95
   100  0033                     _RB3	set	51
   101  0034                     _RB4	set	52
   102  009E                     _PWMD23H	set	158
   103  009D                     _PWM23DT	set	157
   104  009C                     _PWMD3L	set	156
   105  009B                     _PWMD2L	set	155
   106  0099                     _ADRESH	set	153
   107  0098                     _ADRESL	set	152
   108  0096                     _ADCON1	set	150
   109  0095                     _ADCON0	set	149
   110  0094                     _ANSEL1	set	148
   111  0093                     _ANSEL0	set	147
   112  0089                     _IOCA	set	137
   113  0088                     _WPUA	set	136
   114  0087                     _WPDA	set	135
   115  0086                     _PORTA	set	134
   116  0085                     _TRISA	set	133
   117  04B2                     _LDO_EN	set	1202
   118  04B6                     _CHS4	set	1206
   119  04A9                     _GODONE	set	1193
   120  0433                     _RA3	set	1075
   121                           
   122                           	psect	cinit
   123  000B                     start_initialization:	
   124                           ; #config settings
   125                           
   126  000B                     __initialization:	
   127                           
   128                           ; Clear objects allocated to COMMON
   129  000B  3078               	movlw	low __pbssCOMMON
   130  000C  0084               	movwf	4
   131  000D  307C               	movlw	low (__pbssCOMMON+4)
   132  000E  24CD               	fcall	clear_ram0
   133  000F  3020               	movlw	low __pbssBANK0
   134                           
   135                           ; Clear objects allocated to BANK0
   136  0010  1383               	bcf	3,7	;select IRP bank0
   137  0011  0084               	movwf	4
   138  0012  3053               	movlw	low (__pbssBANK0+51)
   139  0013  24CD               	fcall	clear_ram0
   140  0014                     end_of_initialization:	
   141                           ;End of C runtime variable initialization code
   142                           
   143  0014                     __end_of__initialization:	
   144  0014  0183               	clrf	3
   145  0015  2B97               	ljmp	_main	;jump to C main() function
   146                           
   147                           	psect	bssCOMMON
   148  0078                     __pbssCOMMON:	
   149  0078                     _adresult:	
   150  0078                     	ds	2
   151  007A                     _chrgFlag:	
   152  007A                     	ds	1
   153  007B                     _test_adc:	
   154  007B                     	ds	1
   155                           
   156                           	psect	bssBANK0
   157  0020                     __pbssBANK0:	
   158  0020                     _count8s:	
   159  0020                     	ds	2
   160  0022                     _overWorkTime:	
   161  0022                     	ds	2
   162  0024                     _fullCount:	
   163  0024                     	ds	2
   164  0026                     _count50s:	
   165  0026                     	ds	2
   166  0028                     _batADValue:	
   167  0028                     	ds	2
   168  002A                     _outADValue:	
   169  002A                     	ds	2
   170  002C                     _power_ad:	
   171  002C                     	ds	2
   172  002E                     _result:	
   173  002E                     	ds	2
   174  0030                     _count40s:	
   175  0030                     	ds	1
   176  0031                     _zdMotorFlag:	
   177  0031                     	ds	1
   178  0032                     _keyNum:	
   179  0032                     	ds	1
   180  0033                     _zfStep:	
   181  0033                     	ds	1
   182  0034                     _powerStep:	
   183  0034                     	ds	1
   184  0035                     _pwmD2Flag:	
   185  0035                     	ds	1
   186  0036                     _pwmD3Flag:	
   187  0036                     	ds	1
   188  0037                     _chrgPwmFlag:	
   189  0037                     	ds	1
   190  0038                     _sleepTime:	
   191  0038                     	ds	1
   192  0039                     _lowBatFlag:	
   193  0039                     	ds	1
   194  003A                     _chrgMaxDuty:	
   195  003A                     	ds	1
   196  003B                     _chrgWaitTime:	
   197  003B                     	ds	1
   198  003C                     _subTime:	
   199  003C                     	ds	1
   200  003D                     _addTime:	
   201  003D                     	ds	1
   202  003E                     _lockCount:	
   203  003E                     	ds	1
   204  003F                     _chrgMaxAD:	
   205  003F                     	ds	1
   206  0040                     _chrgMode:	
   207  0040                     	ds	1
   208  0041                     _showBatTime:	
   209  0041                     	ds	1
   210  0042                     _reChrgCount:	
   211  0042                     	ds	1
   212  0043                     _prePwStep:	
   213  0043                     	ds	1
   214  0044                     _pwStep:	
   215  0044                     	ds	1
   216  0045                     _overChrgTime:	
   217  0045                     	ds	1
   218  0046                     _startTime:	
   219  0046                     	ds	1
   220  0047                     _longPressFlag:	
   221  0047                     	ds	1
   222  0048                     _keyCount3:	
   223  0048                     	ds	1
   224  0049                     _keyCount2:	
   225  0049                     	ds	1
   226  004A                     _keyCount:	
   227  004A                     	ds	1
   228  004B                     _workStep:	
   229  004B                     	ds	1
   230  004C                     _protectFlag:	
   231  004C                     	ds	1
   232  004D                     _countHalfFull:	
   233  004D                     	ds	1
   234  004E                     _intCount10:	
   235  004E                     	ds	1
   236  004F                     _chrgFullFlag:	
   237  004F                     	ds	1
   238  0050                     _IntFlag:	
   239  0050                     	ds	1
   240  0051                     _count1s:	
   241  0051                     	ds	1
   242  0052                     _intCount:	
   243  0052                     	ds	1
   244                           
   245                           	psect	clrtext
   246  04CD                     clear_ram0:	
   247                           ;	Called with FSR containing the base address, and
   248                           ;	W with the last address+1
   249                           
   250  04CD  0064               	clrwdt	;clear the watchdog before getting into this loop
   251  04CE                     clrloop0:	
   252  04CE  0180               	clrf	0	;clear RAM location pointed to by FSR
   253  04CF  0A84               	incf	4,f	;increment pointer
   254  04D0  0604               	xorwf	4,w	;XOR with final address
   255  04D1  1903               	btfsc	3,2	;have we reached the end yet?
   256  04D2  3400               	retlw	0	;all done for this memory range, return
   257  04D3  0604               	xorwf	4,w	;XOR again to restore value
   258  04D4  2CCE               	goto	clrloop0	;do the next byte
   259                           
   260                           	psect	cstackCOMMON
   261  0070                     __pcstackCOMMON:	
   262  0070                     ?_Init_System:	
   263  0070                     ?_AD_Init:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ?_checkOutA:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ?_chrgCtr:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     ?_checkBatAD:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     ?_keyCtr:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0070                     ?_workCtr:	
   279                           ; 1 bytes @ 0x0
   280                           
   281  0070                     ?_Sleep_Mode:	
   282                           ; 1 bytes @ 0x0
   283                           
   284  0070                     ?_chrgPwmStop:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     ?_pwmD2Stop:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0070                     ?_pwmD3Stop:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0070                     ?_chrgPwmInit:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0070                     ?_checkKeyAD:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0070                     ?_pwmD2Init:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ?_pwmD3Init:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ?_Isr_Timer:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0070                     ??_Isr_Timer:	
   309                           ; 1 bytes @ 0x0
   310                           
   311  0070                     ?_main:	
   312                           ; 1 bytes @ 0x0
   313                           
   314  0070                     ?_keyRead:	
   315                           ; 1 bytes @ 0x0
   316                           
   317  0070                     ?_keyRead2:	
   318                           ; 1 bytes @ 0x0
   319                           
   320  0070                     ?_keyRead3:	
   321                           ; 1 bytes @ 0x0
   322                           
   323                           
   324                           ; 1 bytes @ 0x0
   325  0070                     	ds	2
   326  0072                     ??_Init_System:	
   327  0072                     ??_AD_Init:	
   328                           ; 1 bytes @ 0x2
   329                           
   330  0072                     ??_chrgCtr:	
   331                           ; 1 bytes @ 0x2
   332                           
   333  0072                     ??_Sleep_Mode:	
   334                           ; 1 bytes @ 0x2
   335                           
   336  0072                     ??_chrgPwmStop:	
   337                           ; 1 bytes @ 0x2
   338                           
   339  0072                     ??_pwmD2Stop:	
   340                           ; 1 bytes @ 0x2
   341                           
   342  0072                     ??_pwmD3Stop:	
   343                           ; 1 bytes @ 0x2
   344                           
   345  0072                     ??_chrgPwmInit:	
   346                           ; 1 bytes @ 0x2
   347                           
   348  0072                     ??_pwmD2Init:	
   349                           ; 1 bytes @ 0x2
   350                           
   351  0072                     ??_pwmD3Init:	
   352                           ; 1 bytes @ 0x2
   353                           
   354  0072                     ?_ADC_Sample:	
   355                           ; 1 bytes @ 0x2
   356                           
   357  0072                     ??_keyRead:	
   358                           ; 1 bytes @ 0x2
   359                           
   360  0072                     ??_keyRead2:	
   361                           ; 1 bytes @ 0x2
   362                           
   363  0072                     ?___bmul:	
   364                           ; 1 bytes @ 0x2
   365                           
   366  0072                     keyRead@keyStatus:	
   367                           ; 1 bytes @ 0x2
   368                           
   369  0072                     keyRead2@keyStatus:	
   370                           ; 1 bytes @ 0x2
   371                           
   372  0072                     ADC_Sample@adldo:	
   373                           ; 1 bytes @ 0x2
   374                           
   375  0072                     ___bmul@multiplicand:	
   376                           ; 1 bytes @ 0x2
   377                           
   378                           
   379                           ; 1 bytes @ 0x2
   380  0072                     	ds	1
   381  0073                     ??_ADC_Sample:	
   382  0073                     ??___bmul:	
   383                           ; 1 bytes @ 0x3
   384                           
   385  0073                     ___bmul@product:	
   386                           ; 1 bytes @ 0x3
   387                           
   388                           
   389                           ; 1 bytes @ 0x3
   390  0073                     	ds	1
   391  0074                     ___bmul@multiplier:	
   392                           
   393                           ; 1 bytes @ 0x4
   394  0074                     	ds	1
   395  0075                     ??_workCtr:	
   396                           
   397                           ; 1 bytes @ 0x5
   398  0075                     	ds	2
   399  0077                     ??_checkOutA:	
   400  0077                     ??_checkKeyAD:	
   401                           ; 1 bytes @ 0x7
   402                           
   403                           
   404                           ; 1 bytes @ 0x7
   405  0077                     	ds	1
   406  0078                     ??_keyCtr:	
   407  0078                     ??_main:	
   408                           ; 1 bytes @ 0x8
   409                           
   410  0078                     ??_keyRead3:	
   411                           ; 1 bytes @ 0x8
   412                           
   413                           
   414                           	psect	cstackBANK0
   415  0053                     __pcstackBANK0:	
   416                           ; 1 bytes @ 0x8
   417                           
   418  0053                     ADC_Sample@j:	
   419                           
   420                           ; 1 bytes @ 0x0
   421  0053                     	ds	1
   422  0054                     ADC_Sample@adch:	
   423                           
   424                           ; 1 bytes @ 0x1
   425  0054                     	ds	1
   426  0055                     ADC_Sample@i:	
   427                           
   428                           ; 1 bytes @ 0x2
   429  0055                     	ds	1
   430  0056                     ADC_Sample@adsum:	
   431                           
   432                           ; 4 bytes @ 0x3
   433  0056                     	ds	4
   434  005A                     ADC_Sample@admin:	
   435                           
   436                           ; 2 bytes @ 0x7
   437  005A                     	ds	2
   438  005C                     ADC_Sample@admax:	
   439                           
   440                           ; 2 bytes @ 0x9
   441  005C                     	ds	2
   442  005E                     ADC_Sample@ad_temp:	
   443                           
   444                           ; 2 bytes @ 0xB
   445  005E                     	ds	2
   446  0060                     ??_checkBatAD:	
   447  0060                     keyRead3@keyStatus:	
   448                           ; 1 bytes @ 0xD
   449                           
   450                           
   451                           ; 1 bytes @ 0xD
   452  0060                     	ds	1
   453  0061                     keyCtr@kclick:	
   454                           
   455                           ; 1 bytes @ 0xE
   456  0061                     	ds	1
   457                           
   458                           	psect	maintext
   459  0397                     __pmaintext:	
   460 ;;
   461 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   462 ;;
   463 ;; *************** function _main *****************
   464 ;; Defined at:
   465 ;;		line 153 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
   466 ;; Parameters:    Size  Location     Type
   467 ;;		None
   468 ;; Auto vars:     Size  Location     Type
   469 ;;		None
   470 ;; Return value:  Size  Location     Type
   471 ;;                  1    wreg      void 
   472 ;; Registers used:
   473 ;;		wreg, status,2, status,0, pclath, cstack
   474 ;; Tracked objects:
   475 ;;		On entry : B00/0
   476 ;;		On exit  : 100/0
   477 ;;		Unchanged: 0/0
   478 ;; Data sizes:     COMMON   BANK0   BANK1
   479 ;;      Params:         0       0       0
   480 ;;      Locals:         0       0       0
   481 ;;      Temps:          0       0       0
   482 ;;      Totals:         0       0       0
   483 ;;Total ram usage:        0 bytes
   484 ;; Hardware stack levels required when called:    5
   485 ;; This function calls:
   486 ;;		_AD_Init
   487 ;;		_Init_System
   488 ;;		_Sleep_Mode
   489 ;;		_checkBatAD
   490 ;;		_checkOutA
   491 ;;		_chrgCtr
   492 ;;		_keyCtr
   493 ;;		_workCtr
   494 ;; This function is called by:
   495 ;;		Startup code after reset
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           
   500                           ;psect for function _main
   501  0397                     _main:	
   502                           
   503                           ;main.c: 155: Init_System();
   504                           
   505                           ;incstack = 0
   506                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   507  0397  2457               	fcall	_Init_System
   508                           
   509                           ;main.c: 156: AD_Init();
   510  0398  24E5               	fcall	_AD_Init
   511                           
   512                           ;main.c: 157: firstTime = 100;
   513  0399  3064               	movlw	100
   514  039A  1283               	bcf	3,5	;RP0=0, select bank0
   515  039B  00E2               	movwf	_firstTime
   516  039C                     l693:	
   517                           ;main.c: 158: while (1)
   518                           
   519  039C  0064               	clrwdt	;# 
   520                           
   521                           ;main.c: 161: if(intCount10 > 10)
   522  039D  300B               	movlw	11
   523  039E  1283               	bcf	3,5	;RP0=0, select bank0
   524  039F  024E               	subwf	_intCount10,w
   525  03A0  1C03               	skipc
   526  03A1  2BA4               	goto	l3087
   527                           
   528                           ;main.c: 162: {
   529                           ;main.c: 163: intCount10 = 0;
   530  03A2  01CE               	clrf	_intCount10
   531                           
   532                           ;main.c: 164: checkOutA();
   533  03A3  23D6               	fcall	_checkOutA
   534  03A4                     l3087:	
   535                           
   536                           ;main.c: 165: }
   537                           ;main.c: 166: if(!IntFlag)
   538  03A4  1283               	bcf	3,5	;RP0=0, select bank0
   539  03A5  0850               	movf	_IntFlag,w
   540  03A6  1903               	btfsc	3,2
   541  03A7  2B9C               	goto	l693
   542                           
   543                           ;main.c: 168: IntFlag = 0;
   544  03A8  01D0               	clrf	_IntFlag
   545                           
   546                           ;main.c: 169: chrgCtr();
   547  03A9  2016               	fcall	_chrgCtr
   548                           
   549                           ;main.c: 170: checkBatAD();
   550  03AA  21F3               	fcall	_checkBatAD
   551                           
   552                           ;main.c: 171: if(chrgFlag == 0 && lowBatFlag == 0 && firstTime == 0)
   553  03AB  087A               	movf	_chrgFlag,w
   554  03AC  1D03               	btfss	3,2
   555  03AD  2BB6               	goto	l697
   556  03AE  1283               	bcf	3,5	;RP0=0, select bank0
   557  03AF  0839               	movf	_lowBatFlag,w
   558  03B0  1D03               	btfss	3,2
   559  03B1  2BB6               	goto	l697
   560  03B2  0862               	movf	_firstTime,w
   561  03B3  1D03               	btfss	3,2
   562  03B4  2BB6               	goto	l697
   563                           
   564                           ;main.c: 172: {
   565                           ;main.c: 173: keyCtr();
   566  03B5  230E               	fcall	_keyCtr
   567  03B6                     l697:	
   568                           
   569                           ;main.c: 174: }
   570                           ;main.c: 175: workCtr();
   571  03B6  229B               	fcall	_workCtr
   572                           
   573                           ;main.c: 176: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 && overWorkTime == 0)
   574  03B7  087A               	movf	_chrgFlag,w
   575  03B8  1283               	bcf	3,5	;RP0=0, select bank0
   576  03B9  1D03               	btfss	3,2
   577  03BA  2BD4               	goto	L1
   578  03BB  084B               	movf	_workStep,w
   579  03BC  1D03               	btfss	3,2
   580  03BD  2BD3               	goto	l3123
   581  03BE  084A               	movf	_keyCount,w
   582  03BF  1D03               	btfss	3,2
   583  03C0  2BD3               	goto	l3123
   584  03C1  0862               	movf	_firstTime,w
   585  03C2  1D03               	btfss	3,2
   586  03C3  2BD3               	goto	l3123
   587  03C4  0841               	movf	_showBatTime,w
   588  03C5  1D03               	btfss	3,2
   589  03C6  2BD3               	goto	l3123
   590                           
   591                           ;main.c: 177: {
   592                           ;main.c: 178: shiweiNum = geweiNum = 0;
   593  03C7  0822               	movf	_overWorkTime,w
   594  03C8  0423               	iorwf	_overWorkTime+1,w
   595  03C9  1D03               	btfss	3,2
   596  03CA  2BD3               	goto	l3123
   597                           
   598                           ;main.c: 179: if(++sleepTime >= 200)
   599  03CB  30C8               	movlw	200
   600  03CC  0AB8               	incf	_sleepTime,f
   601  03CD  0238               	subwf	_sleepTime,w
   602  03CE  1C03               	skipc
   603  03CF  2B9C               	goto	l693
   604                           
   605                           ;main.c: 180: {
   606                           ;main.c: 181: sleepTime = 0;
   607  03D0  01B8               	clrf	_sleepTime
   608                           
   609                           ;main.c: 182: Sleep_Mode();
   610  03D1  2357               	fcall	_Sleep_Mode
   611  03D2  2B9C               	goto	l693
   612  03D3                     l3123:	
   613                           
   614                           ;main.c: 185: else
   615                           ;main.c: 186: {
   616                           ;main.c: 187: sleepTime = 0;
   617  03D3  1283               	bcf	3,5	;RP0=0, select bank0
   618  03D4                     L1:	
   619  03D4  01B8               	clrf	_sleepTime
   620  03D5  2B9C               	goto	l693
   621  03D6                     __end_of_main:	
   622                           
   623                           	psect	text1
   624  029B                     __ptext1:	
   625 ;; *************** function _workCtr *****************
   626 ;; Defined at:
   627 ;;		line 486 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;		None
   630 ;; Auto vars:     Size  Location     Type
   631 ;;		None
   632 ;; Return value:  Size  Location     Type
   633 ;;                  1    wreg      void 
   634 ;; Registers used:
   635 ;;		wreg, status,2, status,0, pclath, cstack
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMMON   BANK0   BANK1
   641 ;;      Params:         0       0       0
   642 ;;      Locals:         0       0       0
   643 ;;      Temps:          0       0       0
   644 ;;      Totals:         0       0       0
   645 ;;Total ram usage:        0 bytes
   646 ;; Hardware stack levels used:    1
   647 ;; Hardware stack levels required when called:    2
   648 ;; This function calls:
   649 ;;		___bmul
   650 ;;		_pwmD2Init
   651 ;;		_pwmD2Stop
   652 ;;		_pwmD3Init
   653 ;;		_pwmD3Stop
   654 ;; This function is called by:
   655 ;;		_main
   656 ;; This function uses a non-reentrant model
   657 ;;
   658                           
   659                           
   660                           ;psect for function _workCtr
   661  029B                     _workCtr:	
   662                           
   663                           ;main.c: 488: if(firstTime > 0)
   664                           
   665                           ;incstack = 0
   666                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   667  029B  1283               	bcf	3,5	;RP0=0, select bank0
   668  029C  0862               	movf	_firstTime,w
   669  029D  1903               	btfsc	3,2
   670  029E  2AA6               	goto	l2581
   671                           
   672                           ;main.c: 489: {
   673                           ;main.c: 490: firstTime--;
   674  029F  03E2               	decf	_firstTime,f
   675                           
   676                           ;main.c: 491: if(pwStep > prePwStep)
   677  02A0  0844               	movf	_pwStep,w
   678  02A1  0243               	subwf	_prePwStep,w
   679  02A2  1803               	skipnc
   680  02A3  2AA6               	goto	l2581
   681                           
   682                           ;main.c: 492: {
   683                           ;main.c: 493: prePwStep = pwStep;
   684  02A4  0844               	movf	_pwStep,w
   685  02A5  00C3               	movwf	_prePwStep
   686  02A6                     l2581:	
   687                           
   688                           ;main.c: 494: }
   689                           ;main.c: 495: }
   690                           ;main.c: 496: if(startTime > 0)
   691  02A6  0846               	movf	_startTime,w
   692  02A7  1D03               	btfss	3,2
   693                           
   694                           ;main.c: 497: {
   695                           ;main.c: 498: startTime--;
   696  02A8  03C6               	decf	_startTime,f
   697                           
   698                           ;main.c: 499: }
   699                           ;main.c: 500: if(powerStep > 0)
   700  02A9  0834               	movf	_powerStep,w
   701  02AA  1903               	btfsc	3,2
   702  02AB  2AB6               	goto	l2593
   703                           
   704                           ;main.c: 501: {
   705                           ;main.c: 502: PORTB |= 0x41;
   706  02AC  3041               	movlw	65
   707  02AD  0486               	iorwf	6,f	;volatile
   708                           
   709                           ;main.c: 503: PORTB &= 0xFD;
   710  02AE  1086               	bcf	6,1	;volatile
   711                           
   712                           ;main.c: 504: if(zdMotorFlag)
   713  02AF  0831               	movf	_zdMotorFlag,w
   714  02B0  1903               	btfsc	3,2
   715  02B1  2AB4               	goto	l787
   716                           
   717                           ;main.c: 505: {
   718                           ;main.c: 506: PORTB |= 0x20;
   719  02B2  1686               	bsf	6,5	;volatile
   720                           
   721                           ;main.c: 507: }
   722  02B3  2ABE               	goto	l789
   723  02B4                     l787:	
   724                           
   725                           ;main.c: 508: else
   726                           ;main.c: 509: {
   727                           ;main.c: 510: PORTB &= 0xDF;
   728  02B4  1286               	bcf	6,5	;volatile
   729  02B5  2ABE               	goto	l789
   730  02B6                     l2593:	
   731  02B6  309F               	movlw	159
   732                           
   733                           ;main.c: 513: else
   734                           ;main.c: 514: {
   735                           ;main.c: 515: zdMotorFlag = 0;
   736  02B7  01B1               	clrf	_zdMotorFlag
   737                           
   738                           ;main.c: 516: PORTB &= 0x9F;
   739  02B8  0586               	andwf	6,f	;volatile
   740                           
   741                           ;main.c: 517: if(chrgFlag == 0)
   742  02B9  087A               	movf	_chrgFlag,w
   743  02BA  1D03               	btfss	3,2
   744  02BB  2ABE               	goto	l789
   745                           
   746                           ;main.c: 518: {
   747                           ;main.c: 519: PORTB |= 0x03;
   748  02BC  3003               	movlw	3
   749  02BD  0486               	iorwf	6,f	;volatile
   750  02BE                     l789:	
   751                           
   752                           ;main.c: 520: }
   753                           ;main.c: 521: }
   754                           ;main.c: 522: if(powerStep > 0 && startTime == 0)
   755  02BE  0834               	movf	_powerStep,w
   756  02BF  1903               	btfsc	3,2
   757  02C0  2AFD               	goto	l2653
   758  02C1  0846               	movf	_startTime,w
   759  02C2  1D03               	btfss	3,2
   760  02C3  2AFD               	goto	l2653
   761                           
   762                           ;main.c: 523: {
   763                           ;main.c: 524: if(zfStep == 0)
   764  02C4  0833               	movf	_zfStep,w
   765  02C5  1D03               	btfss	3,2
   766  02C6  2AE9               	goto	l2633
   767                           
   768                           ;main.c: 525: {
   769                           ;main.c: 526: if(count40s == 20 && count1s == 0)
   770  02C7  3014               	movlw	20
   771  02C8  0630               	xorwf	_count40s,w
   772  02C9  1D03               	btfss	3,2
   773  02CA  2AD0               	goto	l793
   774  02CB  0851               	movf	_count1s,w
   775  02CC  1D03               	btfss	3,2
   776  02CD  2AD0               	goto	l793
   777                           
   778                           ;main.c: 527: {
   779                           ;main.c: 528: startTime = 50;
   780  02CE  3032               	movlw	50
   781  02CF  00C6               	movwf	_startTime
   782  02D0                     l793:	
   783                           
   784                           ;main.c: 529: }
   785                           ;main.c: 530: if(count40s >= 40)
   786  02D0  3028               	movlw	40
   787  02D1  0230               	subwf	_count40s,w
   788  02D2  1C03               	skipc
   789  02D3  2AD7               	goto	l2615
   790  02D4  3032               	movlw	50
   791                           
   792                           ;main.c: 531: {
   793                           ;main.c: 532: count40s = 0;
   794  02D5  01B0               	clrf	_count40s
   795                           
   796                           ;main.c: 533: startTime = 50;
   797  02D6  00C6               	movwf	_startTime
   798  02D7                     l2615:	
   799                           
   800                           ;main.c: 534: }
   801                           ;main.c: 535: if(count40s < 20)
   802  02D7  3014               	movlw	20
   803  02D8  0230               	subwf	_count40s,w
   804  02D9  1803               	skipnc
   805  02DA  2AE2               	goto	l2625
   806                           
   807                           ;main.c: 536: {
   808                           ;main.c: 537: if(pwmD2Flag == 0)
   809  02DB  0835               	movf	_pwmD2Flag,w
   810  02DC  1D03               	btfss	3,2
   811  02DD  2ADF               	goto	l2621
   812                           
   813                           ;main.c: 538: {
   814                           ;main.c: 539: pwmD2Init();
   815  02DE  2499               	fcall	_pwmD2Init
   816  02DF                     l2621:	
   817                           
   818                           ;main.c: 540: }
   819                           ;main.c: 541: PWMD23H = 0;
   820                           
   821                           ;main.c: 542: PWMD2L = 55 + (workStep*15);
   822  02DF  22FF               	fcall	PL4	;call to abstracted procedure
   823  02E0  24AC               	fcall	___bmul
   824                           
   825                           ;main.c: 543: }
   826  02E1  2B06               	ljmp	PL16	;call to abstracted procedure
   827  02E2                     l2625:	
   828                           
   829                           ;main.c: 544: else
   830                           ;main.c: 545: {
   831                           ;main.c: 546: if(pwmD3Flag == 0)
   832  02E2  0836               	movf	_pwmD3Flag,w
   833  02E3  1D03               	btfss	3,2
   834  02E4  2AE6               	goto	l2629
   835                           
   836                           ;main.c: 547: {
   837                           ;main.c: 548: pwmD3Init();
   838  02E5  24C4               	fcall	_pwmD3Init
   839  02E6                     l2629:	
   840                           
   841                           ;main.c: 549: }
   842                           ;main.c: 550: PWMD23H = 0;
   843                           
   844                           ;main.c: 551: PWMD3L = 55 + (workStep*15);
   845  02E6  22FF               	fcall	PL4	;call to abstracted procedure
   846  02E7  24AC               	fcall	___bmul
   847  02E8  2B0A               	ljmp	PL18	;call to abstracted procedure
   848  02E9                     l2633:	
   849                           
   850                           ;main.c: 555: else if(zfStep == 2)
   851  02E9  3002               	movlw	2
   852  02EA  0633               	xorwf	_zfStep,w
   853  02EB  1D03               	btfss	3,2
   854  02EC  2AF4               	goto	l2643
   855                           
   856                           ;main.c: 556: {
   857                           ;main.c: 557: if(pwmD3Flag == 0)
   858  02ED  0836               	movf	_pwmD3Flag,w
   859  02EE  1D03               	btfss	3,2
   860  02EF  2AF1               	goto	l2639
   861                           
   862                           ;main.c: 558: {
   863                           ;main.c: 559: pwmD3Init();
   864  02F0  24C4               	fcall	_pwmD3Init
   865  02F1                     l2639:	
   866                           
   867                           ;main.c: 560: }
   868                           ;main.c: 561: PWMD23H = 0;
   869                           
   870                           ;main.c: 562: PWMD3L = 55 + (workStep*15);
   871  02F1  22FF               	fcall	PL4	;call to abstracted procedure
   872  02F2  24AC               	fcall	___bmul
   873                           
   874                           ;main.c: 563: }
   875  02F3  2B0A               	ljmp	PL18	;call to abstracted procedure
   876  02F4                     l2643:	
   877                           
   878                           ;main.c: 564: else if(zfStep == 1)
   879  02F4  0B33               	decfsz	_zfStep,w
   880  02F5  0008               	return
   881                           
   882                           ;main.c: 565: {
   883                           ;main.c: 566: if(pwmD2Flag == 0)
   884  02F6  0835               	movf	_pwmD2Flag,w
   885  02F7  1D03               	btfss	3,2
   886  02F8  2AFA               	goto	l2649
   887                           
   888                           ;main.c: 567: {
   889                           ;main.c: 568: pwmD2Init();
   890  02F9  2499               	fcall	_pwmD2Init
   891  02FA                     l2649:	
   892                           
   893                           ;main.c: 569: }
   894                           ;main.c: 570: PWMD23H = 0;
   895                           
   896                           ;main.c: 571: PWMD2L = 55 + (workStep*15);
   897  02FA  22FF               	fcall	PL4	;call to abstracted procedure
   898  02FB  24AC               	fcall	___bmul
   899                           
   900                           ;main.c: 572: }
   901                           ;main.c: 573: }
   902  02FC  2B06               	ljmp	PL16	;call to abstracted procedure
   903  02FD                     l2653:	
   904                           
   905                           ;main.c: 574: else
   906                           ;main.c: 575: {
   907                           ;main.c: 576: pwmD3Stop();
   908  02FD  24ED               	fcall	_pwmD3Stop
   909                           
   910                           ;main.c: 577: pwmD2Stop();
   911  02FE  2CD5               	ljmp	l2143
   912  02FF                     __end_of_workCtr:	
   913  02FF                     PL4:	
   914  02FF  1683               	bsf	3,5	;RP0=1, select bank1
   915  0300  019E               	clrf	30	;volatile
   916  0301  300F               	movlw	15
   917  0302  00F2               	movwf	___bmul@multiplicand
   918  0303  1283               	bcf	3,5	;RP0=0, select bank0
   919  0304  084B               	movf	_workStep,w
   920  0305  0008               	return
   921  0306                     __end_ofPL4:	
   922  0306                     PL16:	
   923  0306  3E37               	addlw	55
   924  0307  1683               	bsf	3,5	;RP0=1, select bank1
   925  0308  009B               	movwf	27	;volatile
   926  0309  0008               	return
   927  030A                     __end_ofPL16:	
   928  030A                     PL18:	
   929  030A  3E37               	addlw	55
   930  030B  1683               	bsf	3,5	;RP0=1, select bank1
   931  030C  009C               	movwf	28	;volatile
   932  030D  0008               	return
   933  030E                     __end_ofPL18:	
   934                           
   935                           	psect	text2
   936  04C4                     __ptext2:	
   937 ;; *************** function _pwmD3Init *****************
   938 ;; Defined at:
   939 ;;		line 870 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;		None
   942 ;; Auto vars:     Size  Location     Type
   943 ;;		None
   944 ;; Return value:  Size  Location     Type
   945 ;;                  1    wreg      void 
   946 ;; Registers used:
   947 ;;		wreg, status,2
   948 ;; Tracked objects:
   949 ;;		On entry : 100/0
   950 ;;		On exit  : 100/0
   951 ;;		Unchanged: 0/0
   952 ;; Data sizes:     COMMON   BANK0   BANK1
   953 ;;      Params:         0       0       0
   954 ;;      Locals:         0       0       0
   955 ;;      Temps:          0       0       0
   956 ;;      Totals:         0       0       0
   957 ;;Total ram usage:        0 bytes
   958 ;; Hardware stack levels used:    1
   959 ;; Hardware stack levels required when called:    1
   960 ;; This function calls:
   961 ;;		Nothing
   962 ;; This function is called by:
   963 ;;		_workCtr
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           
   968                           ;psect for function _pwmD3Init
   969  04C4                     _pwmD3Init:	
   970                           
   971                           ;main.c: 872: pwmD3Flag = 1;
   972                           
   973                           ;incstack = 0
   974                           ; Regs used in _pwmD3Init: [wreg+status,2]
   975  04C4  01B6               	clrf	_pwmD3Flag
   976  04C5  0AB6               	incf	_pwmD3Flag,f
   977                           
   978                           ;main.c: 873: PWMCON1 = 0B00000000;
   979  04C6  0196               	clrf	22	;volatile
   980                           
   981                           ;main.c: 874: PWMTH = 0X00;
   982                           
   983                           ;main.c: 875: PWMTL = 100;
   984                           
   985                           ;main.c: 878: PWMD23H = 0;
   986  04C7  24A2               	fcall	PL10	;call to abstracted procedure
   987                           
   988                           ;main.c: 879: PWMD3L = 43;
   989  04C8  302B               	movlw	43
   990  04C9  009C               	movwf	28	;volatile
   991                           
   992                           ;main.c: 880: PWM23DT = 0X00;
   993  04CA  019D               	clrf	29	;volatile
   994                           
   995                           ;main.c: 882: PWMCON0 = 0X68;
   996  04CB  3068               	movlw	104
   997                           
   998                           ;main.c: 883: PWMCON2 =0X00;
   999  04CC  2CA8               	ljmp	PL14	;call to abstracted procedure
  1000  04CD                     __end_of_pwmD3Init:	
  1001                           
  1002                           	psect	text3
  1003  0499                     __ptext3:	
  1004 ;; *************** function _pwmD2Init *****************
  1005 ;; Defined at:
  1006 ;;		line 842 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  1007 ;; Parameters:    Size  Location     Type
  1008 ;;		None
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;		None
  1011 ;; Return value:  Size  Location     Type
  1012 ;;                  1    wreg      void 
  1013 ;; Registers used:
  1014 ;;		wreg, status,2
  1015 ;; Tracked objects:
  1016 ;;		On entry : 100/0
  1017 ;;		On exit  : 100/0
  1018 ;;		Unchanged: 0/0
  1019 ;; Data sizes:     COMMON   BANK0   BANK1
  1020 ;;      Params:         0       0       0
  1021 ;;      Locals:         0       0       0
  1022 ;;      Temps:          0       0       0
  1023 ;;      Totals:         0       0       0
  1024 ;;Total ram usage:        0 bytes
  1025 ;; Hardware stack levels used:    1
  1026 ;; Hardware stack levels required when called:    1
  1027 ;; This function calls:
  1028 ;;		Nothing
  1029 ;; This function is called by:
  1030 ;;		_workCtr
  1031 ;; This function uses a non-reentrant model
  1032 ;;
  1033                           
  1034                           
  1035                           ;psect for function _pwmD2Init
  1036  0499                     _pwmD2Init:	
  1037                           
  1038                           ;main.c: 844: pwmD2Flag = 1;
  1039                           
  1040                           ;incstack = 0
  1041                           ; Regs used in _pwmD2Init: [wreg+status,2]
  1042  0499  01B5               	clrf	_pwmD2Flag
  1043  049A  0AB5               	incf	_pwmD2Flag,f
  1044                           
  1045                           ;main.c: 845: PWMCON1 = 0B00000000;
  1046  049B  0196               	clrf	22	;volatile
  1047                           
  1048                           ;main.c: 847: PWMTH = 0X00;
  1049                           
  1050                           ;main.c: 848: PWMTL = 100;
  1051                           
  1052                           ;main.c: 852: PWMD23H = 0;
  1053  049C  24A2               	fcall	PL10	;call to abstracted procedure
  1054                           
  1055                           ;main.c: 853: PWMD2L = 10;
  1056  049D  300A               	movlw	10
  1057  049E  009B               	movwf	27	;volatile
  1058                           
  1059                           ;main.c: 854: PWM23DT = 0X00;
  1060  049F  019D               	clrf	29	;volatile
  1061                           
  1062                           ;main.c: 856: PWMCON0 = 0X64;
  1063  04A0  3064               	movlw	100
  1064                           
  1065                           ;main.c: 857: PWMCON2 =0X00;
  1066  04A1  2CA8               	ljmp	PL14	;call to abstracted procedure
  1067  04A2                     __end_of_pwmD2Init:	
  1068  04A2                     PL10:	
  1069  04A2  0198               	clrf	24	;volatile
  1070  04A3  3064               	movlw	100
  1071  04A4  0097               	movwf	23	;volatile
  1072  04A5  1683               	bsf	3,5	;RP0=1, select bank1
  1073  04A6  019E               	clrf	30	;volatile
  1074  04A7  0008               	return
  1075  04A8                     __end_ofPL10:	
  1076  04A8                     PL14:	
  1077  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  1078  04A9  0095               	movwf	21	;volatile
  1079  04AA  019D               	clrf	29	;volatile
  1080  04AB  0008               	return
  1081  04AC                     __end_ofPL14:	
  1082                           
  1083                           	psect	text4
  1084  04AC                     __ptext4:	
  1085 ;; *************** function ___bmul *****************
  1086 ;; Defined at:
  1087 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul8.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;  multiplier      1    wreg     unsigned char 
  1090 ;;  multiplicand    1    2[COMMON] unsigned char 
  1091 ;; Auto vars:     Size  Location     Type
  1092 ;;  multiplier      1    4[COMMON] unsigned char 
  1093 ;;  product         1    3[COMMON] unsigned char 
  1094 ;; Return value:  Size  Location     Type
  1095 ;;                  1    wreg      unsigned char 
  1096 ;; Registers used:
  1097 ;;		wreg, status,2, status,0
  1098 ;; Tracked objects:
  1099 ;;		On entry : 100/0
  1100 ;;		On exit  : 100/0
  1101 ;;		Unchanged: 100/0
  1102 ;; Data sizes:     COMMON   BANK0   BANK1
  1103 ;;      Params:         1       0       0
  1104 ;;      Locals:         2       0       0
  1105 ;;      Temps:          0       0       0
  1106 ;;      Totals:         3       0       0
  1107 ;;Total ram usage:        3 bytes
  1108 ;; Hardware stack levels used:    1
  1109 ;; Hardware stack levels required when called:    1
  1110 ;; This function calls:
  1111 ;;		Nothing
  1112 ;; This function is called by:
  1113 ;;		_workCtr
  1114 ;; This function uses a non-reentrant model
  1115 ;;
  1116                           
  1117                           
  1118                           ;psect for function ___bmul
  1119  04AC                     ___bmul:	
  1120                           
  1121                           ;incstack = 0
  1122                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1123                           ;___bmul@multiplier stored from wreg
  1124  04AC  00F4               	movwf	___bmul@multiplier
  1125  04AD  01F3               	clrf	___bmul@product
  1126  04AE                     l2281:	
  1127  04AE  0872               	movf	___bmul@multiplicand,w
  1128  04AF  1874               	btfsc	___bmul@multiplier,0
  1129  04B0  07F3               	addwf	___bmul@product,f
  1130  04B1  1003               	clrc
  1131  04B2  0DF2               	rlf	___bmul@multiplicand,f
  1132  04B3  1003               	clrc
  1133  04B4  0CF4               	rrf	___bmul@multiplier,f
  1134  04B5  0874               	movf	___bmul@multiplier,w
  1135  04B6  1D03               	btfss	3,2
  1136  04B7  2CAE               	goto	l2281
  1137  04B8  0873               	movf	___bmul@product,w
  1138  04B9  0008               	return
  1139  04BA                     __end_of___bmul:	
  1140                           
  1141                           	psect	text5
  1142  030E                     __ptext5:	
  1143 ;; *************** function _keyCtr *****************
  1144 ;; Defined at:
  1145 ;;		line 432 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;		None
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;  kclick          1   14[BANK0 ] unsigned char 
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  1    wreg      void 
  1152 ;; Registers used:
  1153 ;;		wreg, status,2, status,0, pclath, cstack
  1154 ;; Tracked objects:
  1155 ;;		On entry : 100/0
  1156 ;;		On exit  : 100/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMMON   BANK0   BANK1
  1159 ;;      Params:         0       0       0
  1160 ;;      Locals:         0       1       0
  1161 ;;      Temps:          0       0       0
  1162 ;;      Totals:         0       1       0
  1163 ;;Total ram usage:        1 bytes
  1164 ;; Hardware stack levels used:    1
  1165 ;; Hardware stack levels required when called:    4
  1166 ;; This function calls:
  1167 ;;		_keyRead
  1168 ;;		_keyRead2
  1169 ;;		_keyRead3
  1170 ;; This function is called by:
  1171 ;;		_main
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           
  1176                           ;psect for function _keyCtr
  1177  030E                     _keyCtr:	
  1178                           
  1179                           ;main.c: 434: char kclick = keyRead(0x80 & (~PORTB));
  1180                           
  1181                           ;incstack = 0
  1182                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1183  030E  0906               	comf	6,w	;volatile
  1184  030F  3980               	andlw	128
  1185  0310  241E               	fcall	_keyRead
  1186  0311  00E1               	movwf	keyCtr@kclick
  1187                           
  1188                           ;main.c: 435: if(kclick == 2)
  1189  0312  3A02               	xorlw	2
  1190  0313  1D03               	btfss	3,2
  1191  0314  2B25               	goto	l3045
  1192                           
  1193                           ;main.c: 436: {
  1194                           ;main.c: 437: if(powerStep > 0)
  1195  0315  0834               	movf	_powerStep,w
  1196  0316  1903               	btfsc	3,2
  1197  0317  2B1A               	goto	l769
  1198                           
  1199                           ;main.c: 438: {
  1200                           ;main.c: 439: powerStep = 0;
  1201  0318  01B4               	clrf	_powerStep
  1202                           
  1203                           ;main.c: 440: }
  1204  0319  2B25               	goto	l3045
  1205  031A                     l769:	
  1206  031A  3032               	movlw	50
  1207                           
  1208                           ;main.c: 441: else
  1209                           ;main.c: 442: {
  1210                           ;main.c: 443: powerStep = 1;
  1211  031B  01B4               	clrf	_powerStep
  1212  031C  0AB4               	incf	_powerStep,f
  1213                           
  1214                           ;main.c: 444: zfStep = 0;
  1215  031D  01B3               	clrf	_zfStep
  1216                           
  1217                           ;main.c: 445: count40s = 0;
  1218  031E  01B0               	clrf	_count40s
  1219                           
  1220                           ;main.c: 446: workStep = 1;
  1221  031F  01CB               	clrf	_workStep
  1222  0320  0ACB               	incf	_workStep,f
  1223                           
  1224                           ;main.c: 447: startTime = 50;
  1225  0321  00C6               	movwf	_startTime
  1226                           
  1227                           ;main.c: 448: showBatTime = 0;
  1228  0322  01C1               	clrf	_showBatTime
  1229                           
  1230                           ;main.c: 449: overWorkTime = 0;
  1231  0323  01A2               	clrf	_overWorkTime
  1232  0324  01A3               	clrf	_overWorkTime+1
  1233  0325                     l3045:	
  1234                           
  1235                           ;main.c: 450: }
  1236                           ;main.c: 451: }
  1237                           ;main.c: 452: kclick = keyRead2(0x20 & (~PORTA));
  1238  0325  1683               	bsf	3,5	;RP0=1, select bank1
  1239  0326  0906               	comf	6,w	;volatile
  1240  0327  3920               	andlw	32
  1241  0328  2485               	fcall	_keyRead2
  1242  0329  00E1               	movwf	keyCtr@kclick
  1243                           
  1244                           ;main.c: 453: if(kclick == 1 && powerStep > 0)
  1245  032A  0B61               	decfsz	keyCtr@kclick,w
  1246  032B  2B37               	goto	l3059
  1247  032C  0834               	movf	_powerStep,w
  1248  032D  1903               	btfsc	3,2
  1249  032E  2B37               	goto	l3059
  1250                           
  1251                           ;main.c: 454: {
  1252                           ;main.c: 455: startTime = 50;
  1253  032F  3032               	movlw	50
  1254  0330  00C6               	movwf	_startTime
  1255  0331  3003               	movlw	3
  1256                           
  1257                           ;main.c: 456: count40s = 0;
  1258  0332  01B0               	clrf	_count40s
  1259                           
  1260                           ;main.c: 457: if(++zfStep > 2)
  1261  0333  0AB3               	incf	_zfStep,f
  1262  0334  0233               	subwf	_zfStep,w
  1263  0335  1803               	btfsc	3,0
  1264                           
  1265                           ;main.c: 458: {
  1266                           ;main.c: 459: zfStep = 0;
  1267  0336  01B3               	clrf	_zfStep
  1268  0337                     l3059:	
  1269                           
  1270                           ;main.c: 460: }
  1271                           ;main.c: 461: }
  1272                           ;main.c: 462: kclick = keyRead3(0x10 & (~PORTA));
  1273  0337  1683               	bsf	3,5	;RP0=1, select bank1
  1274  0338  0906               	comf	6,w	;volatile
  1275  0339  3910               	andlw	16
  1276  033A  2470               	fcall	_keyRead3
  1277  033B  00E1               	movwf	keyCtr@kclick
  1278                           
  1279                           ;main.c: 463: if(kclick == 1 && powerStep > 0)
  1280  033C  0B61               	decfsz	keyCtr@kclick,w
  1281  033D  0008               	return
  1282  033E  0834               	movf	_powerStep,w
  1283  033F  1903               	btfsc	3,2
  1284  0340  0008               	return
  1285                           
  1286                           ;main.c: 464: {
  1287                           ;main.c: 465: if(keyNum == 1)
  1288  0341  0B32               	decfsz	_keyNum,w
  1289  0342  2B4B               	goto	l3071
  1290                           
  1291                           ;main.c: 466: {
  1292                           ;main.c: 467: if(zdMotorFlag > 0)
  1293  0343  0831               	movf	_zdMotorFlag,w
  1294  0344  1903               	btfsc	3,2
  1295  0345  2B48               	goto	l775
  1296                           
  1297                           ;main.c: 468: {
  1298                           ;main.c: 469: zdMotorFlag = 0;
  1299  0346  01B1               	clrf	_zdMotorFlag
  1300                           
  1301                           ;main.c: 470: }
  1302  0347  0008               	return
  1303  0348                     l775:	
  1304                           
  1305                           ;main.c: 471: else
  1306                           ;main.c: 472: {
  1307                           ;main.c: 473: zdMotorFlag = 1;
  1308  0348  01B1               	clrf	_zdMotorFlag
  1309  0349  0AB1               	incf	_zdMotorFlag,f
  1310  034A  0008               	return
  1311  034B                     l3071:	
  1312                           
  1313                           ;main.c: 476: else if(keyNum == 2)
  1314  034B  3002               	movlw	2
  1315  034C  0632               	xorwf	_keyNum,w
  1316  034D  1D03               	btfss	3,2
  1317  034E  0008               	return
  1318                           
  1319                           ;main.c: 477: {
  1320                           ;main.c: 478: if(++workStep > 2)
  1321  034F  3003               	movlw	3
  1322  0350  0ACB               	incf	_workStep,f
  1323  0351  024B               	subwf	_workStep,w
  1324  0352  1C03               	skipc
  1325  0353  0008               	return
  1326                           
  1327                           ;main.c: 479: {
  1328                           ;main.c: 480: workStep = 1;
  1329  0354  01CB               	clrf	_workStep
  1330  0355  0ACB               	incf	_workStep,f
  1331  0356  0008               	return
  1332  0357                     __end_of_keyCtr:	
  1333                           
  1334                           	psect	text6
  1335  0470                     __ptext6:	
  1336 ;; *************** function _keyRead3 *****************
  1337 ;; Defined at:
  1338 ;;		line 408 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  keyStatus       1    wreg     unsigned char 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  keyStatus       1   13[BANK0 ] unsigned char 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      unsigned char 
  1345 ;; Registers used:
  1346 ;;		wreg, status,2, status,0, pclath, cstack
  1347 ;; Tracked objects:
  1348 ;;		On entry : 100/100
  1349 ;;		On exit  : 100/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMMON   BANK0   BANK1
  1352 ;;      Params:         0       0       0
  1353 ;;      Locals:         0       1       0
  1354 ;;      Temps:          0       0       0
  1355 ;;      Totals:         0       1       0
  1356 ;;Total ram usage:        1 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; Hardware stack levels required when called:    3
  1359 ;; This function calls:
  1360 ;;		_checkKeyAD
  1361 ;; This function is called by:
  1362 ;;		_keyCtr
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           
  1367                           ;psect for function _keyRead3
  1368  0470                     _keyRead3:	
  1369                           
  1370                           ;incstack = 0
  1371                           ; Regs used in _keyRead3: [wreg+status,2+status,0+pclath+cstack]
  1372                           ;keyRead3@keyStatus stored from wreg
  1373  0470  1283               	bcf	3,5	;RP0=0, select bank0
  1374  0471  00E0               	movwf	keyRead3@keyStatus
  1375                           
  1376                           ;main.c: 410: if(keyStatus)
  1377  0472  0860               	movf	keyRead3@keyStatus,w
  1378  0473  1903               	btfsc	3,2
  1379  0474  2C7F               	goto	l2931
  1380                           
  1381                           ;main.c: 411: {
  1382                           ;main.c: 412: checkKeyAD();
  1383  0475  2400               	fcall	_checkKeyAD
  1384  0476  3064               	movlw	100
  1385                           
  1386                           ;main.c: 413: keyCount3++;
  1387  0477  1283               	bcf	3,5	;RP0=0, select bank0
  1388  0478  0AC8               	incf	_keyCount3,f
  1389                           
  1390                           ;main.c: 414: if(keyCount3 >= 100)
  1391  0479  0248               	subwf	_keyCount3,w
  1392  047A  1C03               	skipc
  1393  047B  3400               	retlw	0
  1394                           
  1395                           ;main.c: 415: {
  1396                           ;main.c: 416: keyCount3 = 100;
  1397  047C  3064               	movlw	100
  1398  047D  00C8               	movwf	_keyCount3
  1399  047E  3400               	retlw	0
  1400  047F                     l2931:	
  1401                           
  1402                           ;main.c: 419: else
  1403                           ;main.c: 420: {
  1404                           ;main.c: 422: if(keyCount3 >= 5)
  1405  047F  3005               	movlw	5
  1406  0480  0248               	subwf	_keyCount3,w
  1407                           
  1408                           ;main.c: 423: {
  1409                           ;main.c: 424: keyCount3 = 0;
  1410  0481  01C8               	clrf	_keyCount3
  1411  0482  1803               	btfsc	3,0
  1412                           
  1413                           ;main.c: 425: return 1;
  1414  0483  3401               	retlw	1
  1415  0484  3400               	retlw	0
  1416  0485                     __end_of_keyRead3:	
  1417                           ;main.c: 428: }
  1418                           ;main.c: 429: return 0;
  1419                           
  1420                           ;main.c: 426: }
  1421                           ;main.c: 427: keyCount3 = 0;
  1422                           
  1423                           
  1424                           	psect	text7
  1425  0400                     __ptext7:	
  1426 ;; *************** function _checkKeyAD *****************
  1427 ;; Defined at:
  1428 ;;		line 582 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;		None
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;		None
  1433 ;; Return value:  Size  Location     Type
  1434 ;;                  1    wreg      void 
  1435 ;; Registers used:
  1436 ;;		wreg, status,2, status,0, pclath, cstack
  1437 ;; Tracked objects:
  1438 ;;		On entry : 100/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMMON   BANK0   BANK1
  1442 ;;      Params:         0       0       0
  1443 ;;      Locals:         0       0       0
  1444 ;;      Temps:          1       0       0
  1445 ;;      Totals:         1       0       0
  1446 ;;Total ram usage:        1 bytes
  1447 ;; Hardware stack levels used:    1
  1448 ;; Hardware stack levels required when called:    2
  1449 ;; This function calls:
  1450 ;;		_ADC_Sample
  1451 ;; This function is called by:
  1452 ;;		_keyRead3
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456                           
  1457                           ;psect for function _checkKeyAD
  1458  0400                     _checkKeyAD:	
  1459                           
  1460                           ;main.c: 584: test_adc = ADC_Sample(4, 5);
  1461                           
  1462                           ;incstack = 0
  1463                           ; Regs used in _checkKeyAD: [wreg+status,2+status,0+pclath+cstack]
  1464  0400  3005               	movlw	5
  1465  0401  00F2               	movwf	ADC_Sample@adldo
  1466  0402  3004               	movlw	4
  1467  0403  210C               	fcall	_ADC_Sample
  1468  0404  00FB               	movwf	_test_adc	;volatile
  1469                           
  1470                           ;main.c: 585: if (0xA5 == test_adc)
  1471  0405  30A5               	movlw	165
  1472  0406  067B               	xorwf	_test_adc,w	;volatile
  1473  0407  1D03               	btfss	3,2
  1474  0408  2C16               	goto	l2855
  1475                           
  1476                           ;main.c: 586: {
  1477                           ;main.c: 587: if(adresult < 400)
  1478  0409  3001               	movlw	1
  1479  040A  0279               	subwf	_adresult+1,w	;volatile
  1480  040B  3090               	movlw	144
  1481  040C  1903               	skipnz
  1482  040D  0278               	subwf	_adresult,w	;volatile
  1483  040E  1803               	skipnc
  1484  040F  2C13               	goto	l2853
  1485                           
  1486                           ;main.c: 588: {
  1487                           ;main.c: 589: keyNum = 1;
  1488  0410  01B2               	clrf	_keyNum
  1489  0411  0AB2               	incf	_keyNum,f
  1490                           
  1491                           ;main.c: 590: }
  1492  0412  0008               	return
  1493  0413                     l2853:	
  1494                           
  1495                           ;main.c: 591: else
  1496                           ;main.c: 592: {
  1497                           ;main.c: 593: keyNum = 2;
  1498  0413  3002               	movlw	2
  1499  0414  00B2               	movwf	_keyNum
  1500  0415  0008               	return
  1501  0416                     l2855:	
  1502                           
  1503                           ;main.c: 596: else
  1504                           ;main.c: 597: {
  1505                           ;main.c: 598: ADCON0 = 0;
  1506  0416  1683               	bsf	3,5	;RP0=1, select bank1
  1507  0417  0195               	clrf	21	;volatile
  1508                           
  1509                           ;main.c: 599: ADCON1 = 0;
  1510  0418  0196               	clrf	22	;volatile
  1511                           
  1512                           ;main.c: 600: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1513  0419  3085               	movlw	133
  1514  041A  00F7               	movwf	??_checkKeyAD
  1515  041B                     u3267:	
  1516  041B  0BF7               	decfsz	??_checkKeyAD,f
  1517  041C  2C1B               	goto	u3267
  1518  041D  0008               	return
  1519  041E                     __end_of_checkKeyAD:	
  1520                           
  1521                           	psect	text8
  1522  0485                     __ptext8:	
  1523 ;; *************** function _keyRead2 *****************
  1524 ;; Defined at:
  1525 ;;		line 386 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;  keyStatus       1    wreg     unsigned char 
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;  keyStatus       1    2[COMMON] unsigned char 
  1530 ;; Return value:  Size  Location     Type
  1531 ;;                  1    wreg      unsigned char 
  1532 ;; Registers used:
  1533 ;;		wreg, status,2, status,0
  1534 ;; Tracked objects:
  1535 ;;		On entry : 100/100
  1536 ;;		On exit  : 100/0
  1537 ;;		Unchanged: 0/0
  1538 ;; Data sizes:     COMMON   BANK0   BANK1
  1539 ;;      Params:         0       0       0
  1540 ;;      Locals:         1       0       0
  1541 ;;      Temps:          0       0       0
  1542 ;;      Totals:         1       0       0
  1543 ;;Total ram usage:        1 bytes
  1544 ;; Hardware stack levels used:    1
  1545 ;; Hardware stack levels required when called:    1
  1546 ;; This function calls:
  1547 ;;		Nothing
  1548 ;; This function is called by:
  1549 ;;		_keyCtr
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           
  1554                           ;psect for function _keyRead2
  1555  0485                     _keyRead2:	
  1556                           
  1557                           ;incstack = 0
  1558                           ; Regs used in _keyRead2: [wreg+status,2+status,0]
  1559                           ;keyRead2@keyStatus stored from wreg
  1560  0485  00F2               	movwf	keyRead2@keyStatus
  1561                           
  1562                           ;main.c: 388: if(keyStatus)
  1563  0486  0872               	movf	keyRead2@keyStatus,w
  1564  0487  1903               	btfsc	3,2
  1565  0488  2C92               	goto	l2907
  1566  0489  3064               	movlw	100
  1567                           
  1568                           ;main.c: 389: {
  1569                           ;main.c: 390: keyCount2++;
  1570  048A  1283               	bcf	3,5	;RP0=0, select bank0
  1571  048B  0AC9               	incf	_keyCount2,f
  1572                           
  1573                           ;main.c: 391: if(keyCount2 >= 100)
  1574  048C  0249               	subwf	_keyCount2,w
  1575  048D  1C03               	skipc
  1576  048E  3400               	retlw	0
  1577                           
  1578                           ;main.c: 392: {
  1579                           ;main.c: 393: keyCount2 = 100;
  1580  048F  3064               	movlw	100
  1581  0490  00C9               	movwf	_keyCount2
  1582  0491  3400               	retlw	0
  1583  0492                     l2907:	
  1584                           
  1585                           ;main.c: 396: else
  1586                           ;main.c: 397: {
  1587                           ;main.c: 398: if(keyCount2 >= 5)
  1588  0492  3005               	movlw	5
  1589  0493  1283               	bcf	3,5	;RP0=0, select bank0
  1590  0494  0249               	subwf	_keyCount2,w
  1591                           
  1592                           ;main.c: 399: {
  1593                           ;main.c: 400: keyCount2 = 0;
  1594  0495  01C9               	clrf	_keyCount2
  1595  0496  1803               	btfsc	3,0
  1596                           
  1597                           ;main.c: 401: return 1;
  1598  0497  3401               	retlw	1
  1599  0498  3400               	retlw	0
  1600  0499                     __end_of_keyRead2:	
  1601                           ;main.c: 404: }
  1602                           ;main.c: 405: return 0;
  1603                           
  1604                           ;main.c: 402: }
  1605                           ;main.c: 403: keyCount2 = 0;
  1606                           
  1607                           
  1608                           	psect	text9
  1609  041E                     __ptext9:	
  1610 ;; *************** function _keyRead *****************
  1611 ;; Defined at:
  1612 ;;		line 352 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;  keyStatus       1    wreg     unsigned char 
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;  keyStatus       1    2[COMMON] unsigned char 
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  1    wreg      unsigned char 
  1619 ;; Registers used:
  1620 ;;		wreg, status,2, status,0
  1621 ;; Tracked objects:
  1622 ;;		On entry : 100/0
  1623 ;;		On exit  : 100/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMMON   BANK0   BANK1
  1626 ;;      Params:         0       0       0
  1627 ;;      Locals:         1       0       0
  1628 ;;      Temps:          0       0       0
  1629 ;;      Totals:         1       0       0
  1630 ;;Total ram usage:        1 bytes
  1631 ;; Hardware stack levels used:    1
  1632 ;; Hardware stack levels required when called:    1
  1633 ;; This function calls:
  1634 ;;		Nothing
  1635 ;; This function is called by:
  1636 ;;		_keyCtr
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           
  1641                           ;psect for function _keyRead
  1642  041E                     _keyRead:	
  1643                           
  1644                           ;incstack = 0
  1645                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1646                           ;keyRead@keyStatus stored from wreg
  1647  041E  00F2               	movwf	keyRead@keyStatus
  1648                           
  1649                           ;main.c: 354: if(keyStatus)
  1650  041F  0872               	movf	keyRead@keyStatus,w
  1651  0420  3064               	movlw	100
  1652  0421  1903               	btfsc	3,2
  1653  0422  2C30               	goto	L3
  1654                           
  1655                           ;main.c: 355: {
  1656                           ;main.c: 356: keyCount++;
  1657  0423  0ACA               	incf	_keyCount,f
  1658                           
  1659                           ;main.c: 357: if(keyCount >= 100)
  1660  0424  024A               	subwf	_keyCount,w
  1661  0425  1C03               	skipc
  1662  0426  3400               	retlw	0
  1663                           
  1664                           ;main.c: 358: {
  1665                           ;main.c: 359: keyCount = 100;
  1666  0427  3064               	movlw	100
  1667  0428  00CA               	movwf	_keyCount
  1668                           
  1669                           ;main.c: 360: if(!longPressFlag)
  1670  0429  0847               	movf	_longPressFlag,w
  1671  042A  1D03               	btfss	3,2
  1672  042B  3400               	retlw	0
  1673  042C  3002               	movlw	2
  1674                           
  1675                           ;main.c: 361: {
  1676                           ;main.c: 362: longPressFlag = 1;
  1677  042D  01C7               	clrf	_longPressFlag
  1678  042E  0AC7               	incf	_longPressFlag,f
  1679                           
  1680                           ;main.c: 363: return 2;
  1681  042F  0008               	return
  1682  0430                     L3:	
  1683                           ;main.c: 367: else
  1684                           ;main.c: 368: {
  1685                           ;main.c: 369: if(keyCount >= 100)
  1686                           
  1687  0430  024A               	subwf	_keyCount,w
  1688  0431  1C03               	skipc
  1689  0432  2C36               	goto	l2885
  1690                           
  1691                           ;main.c: 370: {
  1692                           ;main.c: 371: keyCount = 0;
  1693  0433  01CA               	clrf	_keyCount
  1694                           
  1695                           ;main.c: 372: longPressFlag = 0;
  1696  0434  01C7               	clrf	_longPressFlag
  1697                           
  1698                           ;main.c: 373: return 0;
  1699  0435  3400               	retlw	0
  1700  0436                     l2885:	
  1701                           
  1702                           ;main.c: 375: else if(keyCount >= 6)
  1703  0436  3006               	movlw	6
  1704  0437  024A               	subwf	_keyCount,w
  1705                           
  1706                           ;main.c: 376: {
  1707                           ;main.c: 377: keyCount = 0;
  1708  0438  01CA               	clrf	_keyCount
  1709  0439  1803               	btfsc	3,0
  1710                           
  1711                           ;main.c: 378: return 1;
  1712  043A  3401               	retlw	1
  1713  043B  3400               	retlw	0
  1714  043C                     __end_of_keyRead:	
  1715                           ;main.c: 379: }
  1716                           ;main.c: 380: keyCount = 0;
  1717                           
  1718                           
  1719                           	psect	text10
  1720  0016                     __ptext10:	
  1721 ;; *************** function _chrgCtr *****************
  1722 ;; Defined at:
  1723 ;;		line 193 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;		None
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;		None
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg, status,2, status,0, pclath, cstack
  1732 ;; Tracked objects:
  1733 ;;		On entry : 100/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMMON   BANK0   BANK1
  1737 ;;      Params:         0       0       0
  1738 ;;      Locals:         0       0       0
  1739 ;;      Temps:          2       0       0
  1740 ;;      Totals:         2       0       0
  1741 ;;Total ram usage:        2 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    2
  1744 ;; This function calls:
  1745 ;;		_chrgPwmInit
  1746 ;;		_chrgPwmStop
  1747 ;;		_pwmD2Stop
  1748 ;;		_pwmD3Stop
  1749 ;; This function is called by:
  1750 ;;		_main
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754                           
  1755                           ;psect for function _chrgCtr
  1756  0016                     _chrgCtr:	
  1757                           
  1758                           ;main.c: 195: if(PORTB & 0x04)
  1759                           
  1760                           ;incstack = 0
  1761                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1762  0016  1D06               	btfss	6,2	;volatile
  1763  0017  28E8               	goto	l2445
  1764                           
  1765                           ;main.c: 196: {
  1766                           ;main.c: 197: if(chrgFlag == 0)
  1767  0018  087A               	movf	_chrgFlag,w
  1768  0019  1D03               	btfss	3,2
  1769  001A  281F               	goto	l2325
  1770                           
  1771                           ;main.c: 198: {
  1772                           ;main.c: 199: chrgFlag = 1;
  1773  001B  01FA               	clrf	_chrgFlag
  1774  001C  0AFA               	incf	_chrgFlag,f
  1775                           
  1776                           ;main.c: 200: chrgMaxDuty = 0;
  1777  001D  01BA               	clrf	_chrgMaxDuty
  1778                           
  1779                           ;main.c: 201: chrgPwmStop();
  1780  001E  24DD               	fcall	_chrgPwmStop
  1781  001F                     l2325:	
  1782                           
  1783                           ;main.c: 202: }
  1784                           ;main.c: 203: pwmD2Stop();
  1785  001F  24D5               	fcall	_pwmD2Stop
  1786                           
  1787                           ;main.c: 204: pwmD3Stop();
  1788  0020  24ED               	fcall	_pwmD3Stop
  1789                           
  1790                           ;main.c: 205: powerStep = 0;
  1791  0021  01B4               	clrf	_powerStep
  1792                           
  1793                           ;main.c: 206: workStep = 0;
  1794  0022  01CB               	clrf	_workStep
  1795                           
  1796                           ;main.c: 207: lowBatFlag = 0;
  1797  0023  01B9               	clrf	_lowBatFlag
  1798                           
  1799                           ;main.c: 208: if(prePwStep < pwStep)
  1800  0024  0844               	movf	_pwStep,w
  1801  0025  0243               	subwf	_prePwStep,w
  1802  0026  1803               	skipnc
  1803  0027  2831               	goto	l2343
  1804                           
  1805                           ;main.c: 209: {
  1806                           ;main.c: 210: if(++count50s > 3000)
  1807  0028  2106               	fcall	PL12	;call to abstracted procedure
  1808  0029  1903               	skipnz
  1809  002A  0226               	subwf	_count50s,w
  1810  002B  1C03               	skipc
  1811  002C  2833               	goto	l2345
  1812                           
  1813                           ;main.c: 211: {
  1814                           ;main.c: 212: count50s = 0;
  1815  002D  01A6               	clrf	_count50s
  1816  002E  01A7               	clrf	_count50s+1
  1817                           
  1818                           ;main.c: 213: prePwStep++;
  1819  002F  0AC3               	incf	_prePwStep,f
  1820  0030  2833               	goto	l2345
  1821  0031                     l2343:	
  1822                           
  1823                           ;main.c: 216: else
  1824                           ;main.c: 217: {
  1825                           ;main.c: 218: count50s = 0;
  1826  0031  01A6               	clrf	_count50s
  1827  0032  01A7               	clrf	_count50s+1
  1828  0033                     l2345:	
  1829                           
  1830                           ;main.c: 219: }
  1831                           ;main.c: 220: if(protectFlag)
  1832  0033  084C               	movf	_protectFlag,w
  1833  0034  1903               	btfsc	3,2
  1834  0035  2849               	goto	l2361
  1835                           
  1836                           ;main.c: 221: {
  1837                           ;main.c: 222: chrgPwmStop();
  1838  0036  24DD               	fcall	_chrgPwmStop
  1839                           
  1840                           ;main.c: 223: if(prePwStep < 99 && protectFlag == 1)
  1841  0037  3063               	movlw	99
  1842  0038  1283               	bcf	3,5	;RP0=0, select bank0
  1843  0039  0243               	subwf	_prePwStep,w
  1844  003A  1803               	skipnc
  1845  003B  2847               	goto	l2357
  1846  003C  0B4C               	decfsz	_protectFlag,w
  1847  003D  2847               	goto	l2357
  1848                           
  1849                           ;main.c: 224: {
  1850                           ;main.c: 225: if(++reChrgCount > 250)
  1851  003E  30FB               	movlw	251
  1852  003F  0AC2               	incf	_reChrgCount,f
  1853  0040  0242               	subwf	_reChrgCount,w
  1854  0041  1C03               	skipc
  1855  0042  0008               	return
  1856                           
  1857                           ;main.c: 226: {
  1858                           ;main.c: 227: reChrgCount = 0;
  1859  0043  01C2               	clrf	_reChrgCount
  1860                           
  1861                           ;main.c: 228: chrgFullFlag = 0;
  1862  0044  01CF               	clrf	_chrgFullFlag
  1863                           
  1864                           ;main.c: 229: protectFlag = 0;
  1865  0045  01CC               	clrf	_protectFlag
  1866  0046  0008               	return
  1867  0047                     l2357:	
  1868                           
  1869                           ;main.c: 232: else
  1870                           ;main.c: 233: {
  1871                           ;main.c: 234: reChrgCount = 0;
  1872  0047  01C2               	clrf	_reChrgCount
  1873  0048  0008               	return
  1874  0049                     l2361:	
  1875                           
  1876                           ;main.c: 237: }
  1877                           ;main.c: 238: if(batADValue < 1118)
  1878  0049  3004               	movlw	4
  1879  004A  0229               	subwf	_batADValue+1,w
  1880  004B  305E               	movlw	94
  1881  004C  1903               	skipnz
  1882  004D  0228               	subwf	_batADValue,w
  1883  004E  1803               	skipnc
  1884  004F  2853               	goto	l2367
  1885  0050  300F               	movlw	15
  1886                           
  1887                           ;main.c: 239: {
  1888                           ;main.c: 240: chrgMode = 0;
  1889  0051  01C0               	clrf	_chrgMode
  1890                           
  1891                           ;main.c: 241: chrgMaxAD = 15;
  1892  0052  286C               	goto	L4
  1893  0053                     l2367:	
  1894                           ;main.c: 242: }
  1895                           
  1896                           
  1897                           ;main.c: 243: else if(batADValue < 1530)
  1898  0053  3005               	movlw	5
  1899  0054  0229               	subwf	_batADValue+1,w
  1900  0055  30FA               	movlw	250
  1901  0056  1903               	skipnz
  1902  0057  0228               	subwf	_batADValue,w
  1903  0058  1803               	skipnc
  1904  0059  2860               	goto	l2375
  1905  005A  3032               	movlw	50
  1906                           
  1907                           ;main.c: 244: {
  1908                           ;main.c: 245: chrgMode = 1;
  1909  005B  01C0               	clrf	_chrgMode
  1910  005C  0AC0               	incf	_chrgMode,f
  1911                           
  1912                           ;main.c: 246: chrgMaxAD = 50;
  1913  005D  00BF               	movwf	_chrgMaxAD
  1914                           
  1915                           ;main.c: 247: lockCount = 0;
  1916  005E  01BE               	clrf	_lockCount
  1917                           
  1918                           ;main.c: 248: }
  1919  005F  286D               	goto	l2385
  1920  0060                     l2375:	
  1921                           
  1922                           ;main.c: 249: else if(count1s == 0)
  1923  0060  0851               	movf	_count1s,w
  1924  0061  1D03               	btfss	3,2
  1925  0062  286D               	goto	l2385
  1926                           
  1927                           ;main.c: 250: {
  1928                           ;main.c: 251: if(++lockCount > 200)
  1929  0063  30C9               	movlw	201
  1930  0064  0ABE               	incf	_lockCount,f
  1931  0065  023E               	subwf	_lockCount,w
  1932  0066  1C03               	skipc
  1933  0067  286B               	goto	l2383
  1934  0068  3002               	movlw	2
  1935                           
  1936                           ;main.c: 252: {
  1937                           ;main.c: 253: lockCount = 0;
  1938  0069  01BE               	clrf	_lockCount
  1939                           
  1940                           ;main.c: 254: chrgMode = 2;
  1941  006A  00C0               	movwf	_chrgMode
  1942  006B                     l2383:	
  1943                           
  1944                           ;main.c: 255: }
  1945                           ;main.c: 257: chrgMaxAD = 50;
  1946  006B  3032               	movlw	50
  1947  006C                     L4:	
  1948  006C  00BF               	movwf	_chrgMaxAD
  1949  006D                     l2385:	
  1950                           
  1951                           ;main.c: 258: }
  1952                           ;main.c: 259: if(chrgMode == 2 && outADValue < 8)
  1953  006D  3002               	movlw	2
  1954  006E  0640               	xorwf	_chrgMode,w
  1955  006F  1D03               	btfss	3,2
  1956  0070  2887               	goto	l2395
  1957  0071  3000               	movlw	0
  1958  0072  022B               	subwf	_outADValue+1,w
  1959  0073  3008               	movlw	8
  1960  0074  1903               	skipnz
  1961  0075  022A               	subwf	_outADValue,w
  1962  0076  1803               	skipnc
  1963  0077  2887               	goto	l2395
  1964                           
  1965                           ;main.c: 260: {
  1966                           ;main.c: 261: if(++fullCount >= 200)
  1967  0078  0AA4               	incf	_fullCount,f
  1968  0079  1903               	skipnz
  1969  007A  0AA5               	incf	_fullCount+1,f
  1970  007B  3000               	movlw	0
  1971  007C  0225               	subwf	_fullCount+1,w
  1972  007D  30C8               	movlw	200
  1973  007E  1903               	skipnz
  1974  007F  0224               	subwf	_fullCount,w
  1975  0080  1C03               	skipc
  1976  0081  2889               	goto	l2397
  1977                           
  1978                           ;main.c: 262: {
  1979                           ;main.c: 263: fullCount = 0;
  1980  0082  01A4               	clrf	_fullCount
  1981  0083  01A5               	clrf	_fullCount+1
  1982                           
  1983                           ;main.c: 264: chrgFullFlag = 1;
  1984  0084  01CF               	clrf	_chrgFullFlag
  1985  0085  0ACF               	incf	_chrgFullFlag,f
  1986  0086  2889               	goto	l2397
  1987  0087                     l2395:	
  1988                           
  1989                           ;main.c: 267: else
  1990                           ;main.c: 268: {
  1991                           ;main.c: 269: fullCount = 0;
  1992  0087  01A4               	clrf	_fullCount
  1993  0088  01A5               	clrf	_fullCount+1
  1994  0089                     l2397:	
  1995                           
  1996                           ;main.c: 270: }
  1997                           ;main.c: 271: if(chrgFullFlag)
  1998  0089  084F               	movf	_chrgFullFlag,w
  1999  008A  1903               	btfsc	3,2
  2000  008B  288F               	goto	l2403
  2001                           
  2002                           ;main.c: 272: {
  2003                           ;main.c: 273: PORTB &= 0xFD;
  2004  008C  1086               	bcf	6,1	;volatile
  2005                           
  2006                           ;main.c: 274: PORTB |= 0x01;
  2007  008D  1406               	bsf	6,0	;volatile
  2008                           
  2009                           ;main.c: 275: chrgPwmStop();
  2010  008E  2CDD               	ljmp	l2135
  2011  008F                     l2403:	
  2012                           ;main.c: 276: }
  2013                           
  2014                           
  2015                           ;main.c: 277: else
  2016                           ;main.c: 278: {
  2017                           ;main.c: 279: if(prePwStep >= 99)
  2018  008F  3063               	movlw	99
  2019  0090  0243               	subwf	_prePwStep,w
  2020  0091  1C03               	skipc
  2021  0092  2896               	goto	l726
  2022                           
  2023                           ;main.c: 280: {
  2024                           ;main.c: 281: PORTB &= 0xFD;
  2025  0093  1086               	bcf	6,1	;volatile
  2026                           
  2027                           ;main.c: 282: PORTB |= 0x01;
  2028  0094  1406               	bsf	6,0	;volatile
  2029                           
  2030                           ;main.c: 283: }
  2031  0095  2898               	goto	l2407
  2032  0096                     l726:	
  2033                           
  2034                           ;main.c: 284: else
  2035                           ;main.c: 285: {
  2036                           ;main.c: 286: PORTB &= 0xFE;
  2037  0096  1006               	bcf	6,0	;volatile
  2038                           
  2039                           ;main.c: 287: PORTB |= 0x02;
  2040  0097  1486               	bsf	6,1	;volatile
  2041  0098                     l2407:	
  2042                           
  2043                           ;main.c: 288: }
  2044                           ;main.c: 289: if(batADValue > 1550 || outADValue > (chrgMaxAD + 2))
  2045  0098  3006               	movlw	6
  2046  0099  0229               	subwf	_batADValue+1,w
  2047  009A  300F               	movlw	15
  2048  009B  1903               	skipnz
  2049  009C  0228               	subwf	_batADValue,w
  2050  009D  1803               	skipnc
  2051  009E  28AE               	goto	l2411
  2052  009F  083F               	movf	_chrgMaxAD,w
  2053  00A0  3E02               	addlw	2
  2054  00A1  00F2               	movwf	??_chrgCtr
  2055  00A2  3000               	movlw	0
  2056  00A3  1803               	skipnc
  2057  00A4  3001               	movlw	1
  2058  00A5  00F3               	movwf	??_chrgCtr+1
  2059  00A6  082B               	movf	_outADValue+1,w
  2060  00A7  0273               	subwf	??_chrgCtr+1,w
  2061  00A8  1D03               	skipz
  2062  00A9  28AC               	goto	u1845
  2063  00AA  082A               	movf	_outADValue,w
  2064  00AB  0272               	subwf	??_chrgCtr,w
  2065  00AC                     u1845:	
  2066  00AC  1803               	skipnc
  2067  00AD  28BD               	goto	l2423
  2068  00AE                     l2411:	
  2069                           
  2070                           ;main.c: 290: {
  2071                           ;main.c: 291: if(++subTime > chrgWaitTime)
  2072  00AE  0ABC               	incf	_subTime,f
  2073  00AF  083C               	movf	_subTime,w
  2074  00B0  023B               	subwf	_chrgWaitTime,w
  2075  00B1  1803               	skipnc
  2076  00B2  28BB               	goto	l2421
  2077                           
  2078                           ;main.c: 292: {
  2079                           ;main.c: 293: if(chrgMaxDuty > 1)
  2080  00B3  3002               	movlw	2
  2081  00B4  023A               	subwf	_chrgMaxDuty,w
  2082  00B5  1C03               	skipc
  2083  00B6  28B8               	goto	l2417
  2084                           
  2085                           ;main.c: 294: {
  2086                           ;main.c: 295: chrgMaxDuty--;
  2087  00B7  03BA               	decf	_chrgMaxDuty,f
  2088  00B8                     l2417:	
  2089  00B8  3032               	movlw	50
  2090                           
  2091                           ;main.c: 296: }
  2092                           ;main.c: 297: subTime = 0;
  2093  00B9  01BC               	clrf	_subTime
  2094                           
  2095                           ;main.c: 298: chrgWaitTime = 50;
  2096  00BA  00BB               	movwf	_chrgWaitTime
  2097  00BB                     l2421:	
  2098                           
  2099                           ;main.c: 299: }
  2100                           ;main.c: 300: addTime = 0;
  2101  00BB  01BD               	clrf	_addTime
  2102                           
  2103                           ;main.c: 301: }
  2104  00BC  28DD               	goto	l2437
  2105  00BD                     l2423:	
  2106                           
  2107                           ;main.c: 302: else if(batADValue < 1550 && outADValue < (chrgMaxAD - 4))
  2108  00BD  3006               	movlw	6
  2109  00BE  0229               	subwf	_batADValue+1,w
  2110  00BF  300E               	movlw	14
  2111  00C0  1903               	skipnz
  2112  00C1  0228               	subwf	_batADValue,w
  2113  00C2  1803               	skipnc
  2114  00C3  28DD               	goto	l2437
  2115  00C4  083F               	movf	_chrgMaxAD,w
  2116  00C5  3EFC               	addlw	252
  2117  00C6  00F2               	movwf	??_chrgCtr
  2118  00C7  30FF               	movlw	255
  2119  00C8  1803               	skipnc
  2120  00C9  3000               	movlw	0
  2121  00CA  00F3               	movwf	??_chrgCtr+1
  2122  00CB  022B               	subwf	_outADValue+1,w
  2123  00CC  1D03               	skipz
  2124  00CD  28D0               	goto	u1885
  2125  00CE  0872               	movf	??_chrgCtr,w
  2126  00CF  022A               	subwf	_outADValue,w
  2127  00D0                     u1885:	
  2128  00D0  1803               	skipnc
  2129  00D1  28DD               	goto	l2437
  2130                           
  2131                           ;main.c: 303: {
  2132                           ;main.c: 304: if(++addTime > chrgWaitTime)
  2133  00D2  0ABD               	incf	_addTime,f
  2134  00D3  083D               	movf	_addTime,w
  2135  00D4  023B               	subwf	_chrgWaitTime,w
  2136  00D5  1803               	skipnc
  2137  00D6  28DC               	goto	l2435
  2138  00D7  304B               	movlw	75
  2139                           
  2140                           ;main.c: 305: {
  2141                           ;main.c: 306: addTime = 0;
  2142  00D8  01BD               	clrf	_addTime
  2143                           
  2144                           ;main.c: 307: if(chrgMaxDuty < 75)
  2145  00D9  023A               	subwf	_chrgMaxDuty,w
  2146  00DA  1C03               	btfss	3,0
  2147                           
  2148                           ;main.c: 308: {
  2149                           ;main.c: 309: chrgMaxDuty++;
  2150  00DB  0ABA               	incf	_chrgMaxDuty,f
  2151  00DC                     l2435:	
  2152                           
  2153                           ;main.c: 310: }
  2154                           ;main.c: 311: }
  2155                           ;main.c: 312: subTime = 0;
  2156  00DC  01BC               	clrf	_subTime
  2157  00DD                     l2437:	
  2158                           
  2159                           ;main.c: 313: }
  2160                           ;main.c: 315: if(chrgPwmFlag == 0)
  2161  00DD  0837               	movf	_chrgPwmFlag,w
  2162  00DE  1D03               	btfss	3,2
  2163  00DF  28E1               	goto	l2441
  2164                           
  2165                           ;main.c: 316: {
  2166                           ;main.c: 317: chrgPwmInit();
  2167  00E0  24BA               	fcall	_chrgPwmInit
  2168  00E1                     l2441:	
  2169                           
  2170                           ;main.c: 318: }
  2171                           ;main.c: 319: PWMD23H = 0X00;
  2172  00E1  1683               	bsf	3,5	;RP0=1, select bank1
  2173  00E2  019E               	clrf	30	;volatile
  2174                           
  2175                           ;main.c: 320: PWMD3L = chrgMaxDuty;
  2176  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  2177  00E4  083A               	movf	_chrgMaxDuty,w
  2178  00E5  1683               	bsf	3,5	;RP0=1, select bank1
  2179  00E6  009C               	movwf	28	;volatile
  2180  00E7  0008               	return
  2181  00E8                     l2445:	
  2182  00E8  3014               	movlw	20
  2183                           
  2184                           ;main.c: 326: chrgFlag = 0;
  2185  00E9  01FA               	clrf	_chrgFlag
  2186                           
  2187                           ;main.c: 327: chrgFullFlag = 0;
  2188  00EA  01CF               	clrf	_chrgFullFlag
  2189                           
  2190                           ;main.c: 328: protectFlag = 0;
  2191  00EB  01CC               	clrf	_protectFlag
  2192                           
  2193                           ;main.c: 329: chrgMode = 0;
  2194  00EC  01C0               	clrf	_chrgMode
  2195                           
  2196                           ;main.c: 330: chrgMaxAD = 0;
  2197  00ED  01BF               	clrf	_chrgMaxAD
  2198                           
  2199                           ;main.c: 331: chrgMaxDuty = 0;
  2200  00EE  01BA               	clrf	_chrgMaxDuty
  2201                           
  2202                           ;main.c: 332: lockCount = 0;
  2203  00EF  01BE               	clrf	_lockCount
  2204                           
  2205                           ;main.c: 333: chrgWaitTime = 20;
  2206  00F0  00BB               	movwf	_chrgWaitTime
  2207                           
  2208                           ;main.c: 334: chrgPwmStop();
  2209  00F1  24DD               	fcall	_chrgPwmStop
  2210                           
  2211                           ;main.c: 335: if(prePwStep > 0 && prePwStep > pwStep)
  2212  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  2213  00F3  0843               	movf	_prePwStep,w
  2214  00F4  1903               	btfsc	3,2
  2215  00F5  2903               	goto	l2461
  2216  00F6  0843               	movf	_prePwStep,w
  2217  00F7  0244               	subwf	_pwStep,w
  2218  00F8  1803               	skipnc
  2219  00F9  2903               	goto	l2461
  2220                           
  2221                           ;main.c: 336: {
  2222                           ;main.c: 337: if(++count50s > 3000)
  2223  00FA  2106               	fcall	PL12	;call to abstracted procedure
  2224  00FB  1903               	skipnz
  2225  00FC  0226               	subwf	_count50s,w
  2226  00FD  1C03               	skipc
  2227  00FE  0008               	return
  2228                           
  2229                           ;main.c: 338: {
  2230                           ;main.c: 339: count50s = 0;
  2231  00FF  01A6               	clrf	_count50s
  2232  0100  01A7               	clrf	_count50s+1
  2233                           
  2234                           ;main.c: 340: prePwStep--;
  2235  0101  03C3               	decf	_prePwStep,f
  2236  0102  0008               	return
  2237  0103                     l2461:	
  2238                           
  2239                           ;main.c: 343: else
  2240                           ;main.c: 344: {
  2241                           ;main.c: 345: count50s = 0;
  2242  0103  01A6               	clrf	_count50s
  2243  0104  01A7               	clrf	_count50s+1
  2244  0105  0008               	return
  2245  0106                     __end_of_chrgCtr:	
  2246  0106                     PL12:	
  2247  0106  0AA6               	incf	_count50s,f
  2248  0107  1903               	skipnz
  2249  0108  0AA7               	incf	_count50s+1,f
  2250  0109  300B               	movlw	11
  2251  010A  0227               	subwf	_count50s+1,w
  2252  010B  34B9               	retlw	185
  2253  010C                     __end_ofPL12:	
  2254                           
  2255                           	psect	text11
  2256  04ED                     __ptext11:	
  2257 ;; *************** function _pwmD3Stop *****************
  2258 ;; Defined at:
  2259 ;;		line 886 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;		None
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;		None
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      void 
  2266 ;; Registers used:
  2267 ;;		wreg, status,2, status,0
  2268 ;; Tracked objects:
  2269 ;;		On entry : 100/0
  2270 ;;		On exit  : 100/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMMON   BANK0   BANK1
  2273 ;;      Params:         0       0       0
  2274 ;;      Locals:         0       0       0
  2275 ;;      Temps:          0       0       0
  2276 ;;      Totals:         0       0       0
  2277 ;;Total ram usage:        0 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    1
  2280 ;; This function calls:
  2281 ;;		Nothing
  2282 ;; This function is called by:
  2283 ;;		_chrgCtr
  2284 ;;		_workCtr
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           
  2289                           ;psect for function _pwmD3Stop
  2290  04ED                     _pwmD3Stop:	
  2291                           
  2292                           ;main.c: 888: if(pwmD3Flag)
  2293                           
  2294                           ;incstack = 0
  2295                           ; Regs used in _pwmD3Stop: [wreg+status,2+status,0]
  2296  04ED  0836               	movf	_pwmD3Flag,w
  2297  04EE  1903               	btfsc	3,2
  2298  04EF  2CF2               	goto	l2153
  2299                           
  2300                           ;main.c: 889: {
  2301                           ;main.c: 890: PWMCON0 &= 0XF7;
  2302  04F0  1195               	bcf	21,3	;volatile
  2303                           
  2304                           ;main.c: 891: RB4 = 0;
  2305  04F1  1206               	bcf	6,4	;volatile
  2306  04F2                     l2153:	
  2307                           
  2308                           ;main.c: 892: }
  2309                           ;main.c: 893: pwmD3Flag = 0;
  2310  04F2  01B6               	clrf	_pwmD3Flag
  2311  04F3  0008               	return
  2312  04F4                     __end_of_pwmD3Stop:	
  2313                           
  2314                           	psect	text12
  2315  04D5                     __ptext12:	
  2316 ;; *************** function _pwmD2Stop *****************
  2317 ;; Defined at:
  2318 ;;		line 860 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;		None
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;		None
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  1    wreg      void 
  2325 ;; Registers used:
  2326 ;;		wreg, status,2, status,0
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 100/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMMON   BANK0   BANK1
  2332 ;;      Params:         0       0       0
  2333 ;;      Locals:         0       0       0
  2334 ;;      Temps:          0       0       0
  2335 ;;      Totals:         0       0       0
  2336 ;;Total ram usage:        0 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    1
  2339 ;; This function calls:
  2340 ;;		Nothing
  2341 ;; This function is called by:
  2342 ;;		_chrgCtr
  2343 ;;		_workCtr
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347                           
  2348                           ;psect for function _pwmD2Stop
  2349  04D5                     _pwmD2Stop:	
  2350  04D5                     l2143:	
  2351                           ;incstack = 0
  2352                           ; Regs used in _pwmD2Stop: [wreg+status,2+status,0]
  2353                           
  2354                           
  2355                           ;main.c: 862: if(pwmD2Flag)
  2356  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  2357  04D6  0835               	movf	_pwmD2Flag,w
  2358  04D7  1903               	btfsc	3,2
  2359  04D8  2CDB               	goto	l2147
  2360                           
  2361                           ;main.c: 863: {
  2362                           ;main.c: 864: PWMCON0 &= 0xFB;
  2363  04D9  1115               	bcf	21,2	;volatile
  2364                           
  2365                           ;main.c: 865: RB3 = 0;
  2366  04DA  1186               	bcf	6,3	;volatile
  2367  04DB                     l2147:	
  2368                           
  2369                           ;main.c: 866: }
  2370                           ;main.c: 867: pwmD2Flag = 0;
  2371  04DB  01B5               	clrf	_pwmD2Flag
  2372  04DC  0008               	return
  2373  04DD                     __end_of_pwmD2Stop:	
  2374                           
  2375                           	psect	text13
  2376  04DD                     __ptext13:	
  2377 ;; *************** function _chrgPwmStop *****************
  2378 ;; Defined at:
  2379 ;;		line 831 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;		None
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;		None
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  1    wreg      void 
  2386 ;; Registers used:
  2387 ;;		wreg, status,2, status,0
  2388 ;; Tracked objects:
  2389 ;;		On entry : 100/0
  2390 ;;		On exit  : 0/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMMON   BANK0   BANK1
  2393 ;;      Params:         0       0       0
  2394 ;;      Locals:         0       0       0
  2395 ;;      Temps:          0       0       0
  2396 ;;      Totals:         0       0       0
  2397 ;;Total ram usage:        0 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; Hardware stack levels required when called:    1
  2400 ;; This function calls:
  2401 ;;		Nothing
  2402 ;; This function is called by:
  2403 ;;		_chrgCtr
  2404 ;; This function uses a non-reentrant model
  2405 ;;
  2406                           
  2407                           
  2408                           ;psect for function _chrgPwmStop
  2409  04DD                     _chrgPwmStop:	
  2410  04DD                     l2135:	
  2411                           ;incstack = 0
  2412                           ; Regs used in _chrgPwmStop: [wreg+status,2+status,0]
  2413                           
  2414                           
  2415                           ;main.c: 833: if(chrgPwmFlag)
  2416  04DD  0837               	movf	_chrgPwmFlag,w
  2417  04DE  1903               	btfsc	3,2
  2418  04DF  0008               	return
  2419                           
  2420                           ;main.c: 834: {
  2421                           ;main.c: 835: chrgPwmFlag = 0;
  2422  04E0  01B7               	clrf	_chrgPwmFlag
  2423                           
  2424                           ;main.c: 836: PWMCON0 &= 0xF7;
  2425  04E1  1195               	bcf	21,3	;volatile
  2426                           
  2427                           ;main.c: 837: RA3 = 0;
  2428  04E2  1683               	bsf	3,5	;RP0=1, select bank1
  2429  04E3  1186               	bcf	6,3	;volatile
  2430  04E4  0008               	return
  2431  04E5                     __end_of_chrgPwmStop:	
  2432                           
  2433                           	psect	text14
  2434  04BA                     __ptext14:	
  2435 ;; *************** function _chrgPwmInit *****************
  2436 ;; Defined at:
  2437 ;;		line 813 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;		None
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;		None
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  1    wreg      void 
  2444 ;; Registers used:
  2445 ;;		wreg, status,2
  2446 ;; Tracked objects:
  2447 ;;		On entry : 100/0
  2448 ;;		On exit  : 100/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMMON   BANK0   BANK1
  2451 ;;      Params:         0       0       0
  2452 ;;      Locals:         0       0       0
  2453 ;;      Temps:          0       0       0
  2454 ;;      Totals:         0       0       0
  2455 ;;Total ram usage:        0 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; Hardware stack levels required when called:    1
  2458 ;; This function calls:
  2459 ;;		Nothing
  2460 ;; This function is called by:
  2461 ;;		_chrgCtr
  2462 ;; This function uses a non-reentrant model
  2463 ;;
  2464                           
  2465                           
  2466                           ;psect for function _chrgPwmInit
  2467  04BA                     _chrgPwmInit:	
  2468  04BA  30C0               	movlw	192
  2469                           
  2470                           ;main.c: 815: chrgPwmFlag = 1;
  2471                           
  2472                           ;incstack = 0
  2473                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2474  04BB  01B7               	clrf	_chrgPwmFlag
  2475  04BC  0AB7               	incf	_chrgPwmFlag,f
  2476                           
  2477                           ;main.c: 816: PWMCON1 = 0B11000000;
  2478  04BD  0096               	movwf	22	;volatile
  2479                           
  2480                           ;main.c: 818: PWMTH = 0X00;
  2481                           
  2482                           ;main.c: 819: PWMTL = 100;
  2483                           
  2484                           ;main.c: 823: PWMD23H = 0;
  2485  04BE  24A2               	fcall	PL10	;call to abstracted procedure
  2486                           
  2487                           ;main.c: 824: PWMD3L = 10;
  2488  04BF  300A               	movlw	10
  2489  04C0  009C               	movwf	28	;volatile
  2490                           
  2491                           ;main.c: 825: PWM23DT = 0X00;
  2492  04C1  019D               	clrf	29	;volatile
  2493                           
  2494                           ;main.c: 827: PWMCON0 = 0X08;
  2495  04C2  3008               	movlw	8
  2496                           
  2497                           ;main.c: 828: PWMCON2 =0X00;
  2498  04C3  2CA8               	ljmp	PL14	;call to abstracted procedure
  2499  04C4                     __end_of_chrgPwmInit:	
  2500                           
  2501                           	psect	text15
  2502  03D6                     __ptext15:	
  2503 ;; *************** function _checkOutA *****************
  2504 ;; Defined at:
  2505 ;;		line 606 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;		None
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;		None
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  1    wreg      void 
  2512 ;; Registers used:
  2513 ;;		wreg, status,2, status,0, pclath, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 100/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMMON   BANK0   BANK1
  2519 ;;      Params:         0       0       0
  2520 ;;      Locals:         0       0       0
  2521 ;;      Temps:          1       0       0
  2522 ;;      Totals:         1       0       0
  2523 ;;Total ram usage:        1 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    2
  2526 ;; This function calls:
  2527 ;;		_ADC_Sample
  2528 ;; This function is called by:
  2529 ;;		_main
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           
  2534                           ;psect for function _checkOutA
  2535  03D6                     _checkOutA:	
  2536                           
  2537                           ;main.c: 608: test_adc = ADC_Sample(0, 5);
  2538                           
  2539                           ;incstack = 0
  2540                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2541  03D6  3005               	movlw	5
  2542  03D7  00F2               	movwf	ADC_Sample@adldo
  2543  03D8  3000               	movlw	0
  2544  03D9  210C               	fcall	_ADC_Sample
  2545  03DA  00FB               	movwf	_test_adc	;volatile
  2546                           
  2547                           ;main.c: 609: if (0xA5 == test_adc)
  2548  03DB  30A5               	movlw	165
  2549  03DC  067B               	xorwf	_test_adc,w	;volatile
  2550  03DD  1D03               	btfss	3,2
  2551  03DE  2BF8               	goto	l2963
  2552                           
  2553                           ;main.c: 610: {
  2554                           ;main.c: 611: if(chrgFlag && adresult > 210)
  2555  03DF  087A               	movf	_chrgFlag,w
  2556  03E0  1903               	btfsc	3,2
  2557  03E1  2BF2               	goto	l2959
  2558  03E2  3000               	movlw	0
  2559  03E3  0279               	subwf	_adresult+1,w	;volatile
  2560  03E4  30D3               	movlw	211
  2561  03E5  1903               	skipnz
  2562  03E6  0278               	subwf	_adresult,w	;volatile
  2563  03E7  1C03               	skipc
  2564  03E8  2BF2               	goto	l2959
  2565                           
  2566                           ;main.c: 612: {
  2567                           ;main.c: 613: if(++overChrgTime > 10)
  2568  03E9  300B               	movlw	11
  2569  03EA  0AC5               	incf	_overChrgTime,f
  2570  03EB  0245               	subwf	_overChrgTime,w
  2571  03EC  1C03               	skipc
  2572  03ED  2BF3               	goto	l2961
  2573  03EE  3002               	movlw	2
  2574                           
  2575                           ;main.c: 614: {
  2576                           ;main.c: 615: overChrgTime = 0;
  2577  03EF  01C5               	clrf	_overChrgTime
  2578                           
  2579                           ;main.c: 616: protectFlag = 2;
  2580  03F0  00CC               	movwf	_protectFlag
  2581  03F1  2BF3               	goto	l2961
  2582  03F2                     l2959:	
  2583                           
  2584                           ;main.c: 620: else
  2585                           ;main.c: 621: {
  2586                           ;main.c: 622: overChrgTime = 0;
  2587  03F2  01C5               	clrf	_overChrgTime
  2588  03F3                     l2961:	
  2589                           
  2590                           ;main.c: 623: }
  2591                           ;main.c: 624: outADValue = adresult;
  2592  03F3  0879               	movf	_adresult+1,w	;volatile
  2593  03F4  00AB               	movwf	_outADValue+1
  2594  03F5  0878               	movf	_adresult,w	;volatile
  2595  03F6  00AA               	movwf	_outADValue
  2596                           
  2597                           ;main.c: 626: }
  2598  03F7  0008               	return
  2599  03F8                     l2963:	
  2600                           
  2601                           ;main.c: 627: else
  2602                           ;main.c: 628: {
  2603                           ;main.c: 629: ADCON0 = 0;
  2604  03F8  1683               	bsf	3,5	;RP0=1, select bank1
  2605  03F9  0195               	clrf	21	;volatile
  2606                           
  2607                           ;main.c: 630: ADCON1 = 0;
  2608  03FA  0196               	clrf	22	;volatile
  2609                           
  2610                           ;main.c: 631: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2611  03FB  3085               	movlw	133
  2612  03FC  00F7               	movwf	??_checkOutA
  2613  03FD                     u3277:	
  2614  03FD  0BF7               	decfsz	??_checkOutA,f
  2615  03FE  2BFD               	goto	u3277
  2616  03FF  0008               	return
  2617  0400                     __end_of_checkOutA:	
  2618                           
  2619                           	psect	text16
  2620  01F3                     __ptext16:	
  2621 ;; *************** function _checkBatAD *****************
  2622 ;; Defined at:
  2623 ;;		line 635 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;		None
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;		None
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  1    wreg      void 
  2630 ;; Registers used:
  2631 ;;		wreg, status,2, status,0, pclath, cstack
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMMON   BANK0   BANK1
  2637 ;;      Params:         0       0       0
  2638 ;;      Locals:         0       0       0
  2639 ;;      Temps:          0       2       0
  2640 ;;      Totals:         0       2       0
  2641 ;;Total ram usage:        2 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; Hardware stack levels required when called:    2
  2644 ;; This function calls:
  2645 ;;		_ADC_Sample
  2646 ;; This function is called by:
  2647 ;;		_main
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           
  2652                           ;psect for function _checkBatAD
  2653  01F3                     _checkBatAD:	
  2654                           
  2655                           ;main.c: 637: test_adc = ADC_Sample(1, 5);
  2656                           
  2657                           ;incstack = 0
  2658                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2659  01F3  3005               	movlw	5
  2660  01F4  00F2               	movwf	ADC_Sample@adldo
  2661  01F5  3001               	movlw	1
  2662  01F6  210C               	fcall	_ADC_Sample
  2663  01F7  00FB               	movwf	_test_adc	;volatile
  2664                           
  2665                           ;main.c: 638: if (0xA5 == test_adc)
  2666  01F8  30A5               	movlw	165
  2667  01F9  067B               	xorwf	_test_adc,w	;volatile
  2668  01FA  1D03               	btfss	3,2
  2669  01FB  2A54               	goto	l2999
  2670                           
  2671                           ;main.c: 639: {
  2672                           ;main.c: 640: batADValue = adresult;
  2673  01FC  0879               	movf	_adresult+1,w	;volatile
  2674  01FD  00A9               	movwf	_batADValue+1
  2675  01FE  0878               	movf	_adresult,w	;volatile
  2676  01FF  00A8               	movwf	_batADValue
  2677                           
  2678                           ;main.c: 641: if(batADValue < 1117)
  2679  0200  3004               	movlw	4
  2680  0201  0229               	subwf	_batADValue+1,w
  2681  0202  305D               	movlw	93
  2682  0203  1903               	skipnz
  2683  0204  0228               	subwf	_batADValue,w
  2684  0205  1803               	skipnc
  2685  0206  2A1A               	goto	l2981
  2686                           
  2687                           ;main.c: 642: {
  2688                           ;main.c: 643: pwStep = 0;
  2689  0207  01C4               	clrf	_pwStep
  2690                           
  2691                           ;main.c: 644: if(++count8s > 800)
  2692  0208  0AA0               	incf	_count8s,f
  2693  0209  1903               	skipnz
  2694  020A  0AA1               	incf	_count8s+1,f
  2695  020B  3003               	movlw	3
  2696  020C  0221               	subwf	_count8s+1,w
  2697  020D  3021               	movlw	33
  2698  020E  1903               	skipnz
  2699  020F  0220               	subwf	_count8s,w
  2700  0210  1C03               	skipc
  2701  0211  2A47               	goto	l2993
  2702                           
  2703                           ;main.c: 645: {
  2704                           ;main.c: 646: count8s = 0;
  2705  0212  01A0               	clrf	_count8s
  2706  0213  01A1               	clrf	_count8s+1
  2707                           
  2708                           ;main.c: 647: lowBatFlag = 1;
  2709  0214  01B9               	clrf	_lowBatFlag
  2710  0215  0AB9               	incf	_lowBatFlag,f
  2711                           
  2712                           ;main.c: 648: prePwStep = 0;
  2713  0216  01C3               	clrf	_prePwStep
  2714                           
  2715                           ;main.c: 649: workStep = 0;
  2716  0217  01CB               	clrf	_workStep
  2717                           
  2718                           ;main.c: 650: powerStep = 0;
  2719  0218  01B4               	clrf	_powerStep
  2720  0219  2A47               	goto	l2993
  2721  021A                     l2981:	
  2722  021A  3005               	movlw	5
  2723                           
  2724                           ;main.c: 653: else
  2725                           ;main.c: 654: {
  2726                           ;main.c: 655: count8s = 0;
  2727  021B  01A0               	clrf	_count8s
  2728  021C  01A1               	clrf	_count8s+1
  2729                           
  2730                           ;main.c: 656: if(batADValue >= 1340)
  2731  021D  0229               	subwf	_batADValue+1,w
  2732  021E  303C               	movlw	60
  2733  021F  1903               	skipnz
  2734  0220  0228               	subwf	_batADValue,w
  2735                           
  2736                           ;main.c: 657: {
  2737                           ;main.c: 658: pwStep = ((batADValue - 1340) /2) + 13;
  2738  0221  0828               	movf	_batADValue,w
  2739  0222  1C03               	skipc
  2740  0223  2A31               	goto	L6
  2741  0224  3EC4               	addlw	196
  2742  0225  00E0               	movwf	??_checkBatAD
  2743  0226  0829               	movf	_batADValue+1,w
  2744  0227  1803               	skipnc
  2745  0228  3E01               	addlw	1
  2746  0229  3EFA               	addlw	250
  2747  022A  00E1               	movwf	??_checkBatAD+1
  2748  022B  1003               	clrc
  2749  022C  0CE1               	rrf	??_checkBatAD+1,f
  2750  022D  0CE0               	rrf	??_checkBatAD,f
  2751  022E  0860               	movf	??_checkBatAD,w
  2752  022F  3E0D               	addlw	13
  2753  0230  2A40               	goto	L5
  2754  0231                     L6:	
  2755                           ;main.c: 660: else
  2756                           ;main.c: 661: {
  2757                           ;main.c: 662: pwStep = (batADValue - 1117) / 16;
  2758                           
  2759                           ;main.c: 659: }
  2760                           
  2761  0231  3EA3               	addlw	163
  2762  0232  00E0               	movwf	??_checkBatAD
  2763  0233  0829               	movf	_batADValue+1,w
  2764  0234  1803               	skipnc
  2765  0235  3E01               	addlw	1
  2766  0236  3EFB               	addlw	251
  2767  0237  00E1               	movwf	??_checkBatAD+1
  2768  0238  3004               	movlw	4
  2769  0239                     u2935:	
  2770  0239  1003               	clrc
  2771  023A  0CE1               	rrf	??_checkBatAD+1,f
  2772  023B  0CE0               	rrf	??_checkBatAD,f
  2773  023C  3EFF               	addlw	-1
  2774  023D  1D03               	skipz
  2775  023E  2A39               	goto	u2935
  2776  023F  0860               	movf	??_checkBatAD,w
  2777  0240                     L5:	
  2778  0240  00C4               	movwf	_pwStep
  2779                           
  2780                           ;main.c: 663: }
  2781                           ;main.c: 664: if(pwStep > 99)
  2782  0241  3064               	movlw	100
  2783  0242  0244               	subwf	_pwStep,w
  2784  0243  1C03               	skipc
  2785  0244  2A47               	goto	l2993
  2786                           
  2787                           ;main.c: 665: {
  2788                           ;main.c: 666: pwStep = 99;
  2789  0245  3063               	movlw	99
  2790  0246  00C4               	movwf	_pwStep
  2791  0247                     l2993:	
  2792                           
  2793                           ;main.c: 667: }
  2794                           ;main.c: 668: }
  2795                           ;main.c: 669: if(chrgFlag && batADValue > 1861)
  2796  0247  087A               	movf	_chrgFlag,w
  2797  0248  1903               	btfsc	3,2
  2798  0249  2A5D               	goto	l3003
  2799  024A  3007               	movlw	7
  2800  024B  0229               	subwf	_batADValue+1,w
  2801  024C  3046               	movlw	70
  2802  024D  1903               	skipnz
  2803  024E  0228               	subwf	_batADValue,w
  2804  024F  1C03               	skipc
  2805  0250  2A5D               	goto	l3003
  2806                           
  2807                           ;main.c: 670: {
  2808                           ;main.c: 671: protectFlag = 1;
  2809  0251  01CC               	clrf	_protectFlag
  2810  0252  0ACC               	incf	_protectFlag,f
  2811  0253  2A5D               	goto	l3003
  2812  0254                     l2999:	
  2813                           
  2814                           ;main.c: 674: else
  2815                           ;main.c: 675: {
  2816                           ;main.c: 676: ADCON0 = 0;
  2817  0254  1683               	bsf	3,5	;RP0=1, select bank1
  2818  0255  0195               	clrf	21	;volatile
  2819                           
  2820                           ;main.c: 677: ADCON1 = 0;
  2821  0256  0196               	clrf	22	;volatile
  2822                           
  2823                           ;main.c: 678: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2824  0257  3084               	movlw	132
  2825  0258  1283               	bcf	3,5	;RP0=0, select bank0
  2826  0259  00E0               	movwf	??_checkBatAD
  2827  025A                     u3287:	
  2828  025A  0BE0               	decfsz	??_checkBatAD,f
  2829  025B  2A5A               	goto	u3287
  2830  025C  2A5D               	nop2
  2831  025D                     l3003:	
  2832                           
  2833                           ;main.c: 679: }
  2834                           ;main.c: 681: test_adc = ADC_Sample(2, 5);
  2835  025D  3005               	movlw	5
  2836  025E  00F2               	movwf	ADC_Sample@adldo
  2837  025F  3002               	movlw	2
  2838  0260  210C               	fcall	_ADC_Sample
  2839  0261  00FB               	movwf	_test_adc	;volatile
  2840                           
  2841                           ;main.c: 682: if (0xA5 == test_adc)
  2842  0262  30A5               	movlw	165
  2843  0263  067B               	xorwf	_test_adc,w	;volatile
  2844  0264  1D03               	btfss	3,2
  2845  0265  2A91               	goto	l3023
  2846                           
  2847                           ;main.c: 683: {
  2848                           ;main.c: 684: if(chrgFlag && adresult > 100)
  2849  0266  087A               	movf	_chrgFlag,w
  2850  0267  1903               	btfsc	3,2
  2851  0268  0008               	return
  2852  0269  3000               	movlw	0
  2853  026A  0279               	subwf	_adresult+1,w	;volatile
  2854  026B  3065               	movlw	101
  2855  026C  1903               	skipnz
  2856  026D  0278               	subwf	_adresult,w	;volatile
  2857  026E  1C03               	skipc
  2858  026F  0008               	return
  2859                           
  2860                           ;main.c: 685: {
  2861                           ;main.c: 687: if(adresult > 810 || (batADValue - adresult) > 810)
  2862  0270  3003               	movlw	3
  2863  0271  0279               	subwf	_adresult+1,w	;volatile
  2864  0272  302B               	movlw	43
  2865  0273  1903               	skipnz
  2866  0274  0278               	subwf	_adresult,w	;volatile
  2867  0275  1803               	skipnc
  2868  0276  2A86               	goto	l3015
  2869  0277  0878               	movf	_adresult,w	;volatile
  2870  0278  0228               	subwf	_batADValue,w
  2871  0279  00E0               	movwf	??_checkBatAD
  2872  027A  0879               	movf	_adresult+1,w	;volatile
  2873  027B  1C03               	skipc
  2874  027C  0A79               	incf	_adresult+1,w	;volatile
  2875  027D  0229               	subwf	_batADValue+1,w
  2876  027E  00E1               	movwf	??_checkBatAD+1
  2877  027F  3003               	movlw	3
  2878  0280  0261               	subwf	??_checkBatAD+1,w
  2879  0281  302B               	movlw	43
  2880  0282  1903               	skipnz
  2881  0283  0260               	subwf	??_checkBatAD,w
  2882  0284  1C03               	skipc
  2883  0285  2A8F               	goto	l3021
  2884  0286                     l3015:	
  2885                           
  2886                           ;main.c: 688: {
  2887                           ;main.c: 690: if(++countHalfFull > 250)
  2888  0286  30FB               	movlw	251
  2889  0287  0ACD               	incf	_countHalfFull,f
  2890  0288  024D               	subwf	_countHalfFull,w
  2891  0289  1C03               	skipc
  2892  028A  0008               	return
  2893  028B  3002               	movlw	2
  2894                           
  2895                           ;main.c: 691: {
  2896                           ;main.c: 692: countHalfFull = 0;
  2897  028C  01CD               	clrf	_countHalfFull
  2898                           
  2899                           ;main.c: 693: protectFlag = 2;
  2900  028D  00CC               	movwf	_protectFlag
  2901  028E  0008               	return
  2902  028F                     l3021:	
  2903                           
  2904                           ;main.c: 696: else
  2905                           ;main.c: 697: {
  2906                           ;main.c: 698: countHalfFull = 0;
  2907  028F  01CD               	clrf	_countHalfFull
  2908                           
  2909                           ;main.c: 699: }
  2910                           ;main.c: 700: }
  2911                           ;main.c: 701: }
  2912  0290  0008               	return
  2913  0291                     l3023:	
  2914                           
  2915                           ;main.c: 702: else
  2916                           ;main.c: 703: {
  2917                           ;main.c: 704: ADCON0 = 0;
  2918  0291  1683               	bsf	3,5	;RP0=1, select bank1
  2919  0292  0195               	clrf	21	;volatile
  2920                           
  2921                           ;main.c: 705: ADCON1 = 0;
  2922  0293  0196               	clrf	22	;volatile
  2923                           
  2924                           ;main.c: 706: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2925  0294  3084               	movlw	132
  2926  0295  1283               	bcf	3,5	;RP0=0, select bank0
  2927  0296  00E0               	movwf	??_checkBatAD
  2928  0297                     u3297:	
  2929  0297  0BE0               	decfsz	??_checkBatAD,f
  2930  0298  2A97               	goto	u3297
  2931  0299  2A9A               	nop2
  2932  029A  0008               	return
  2933  029B                     __end_of_checkBatAD:	
  2934                           
  2935                           	psect	text17
  2936  010C                     __ptext17:	
  2937 ;; *************** function _ADC_Sample *****************
  2938 ;; Defined at:
  2939 ;;		line 982 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  adch            1    wreg     unsigned char 
  2942 ;;  adldo           1    2[COMMON] unsigned char 
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  adch            1    1[BANK0 ] unsigned char 
  2945 ;;  j               1    0[BANK0 ] unsigned char 
  2946 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  2947 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  2948 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  2949 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  2950 ;;  i               1    2[BANK0 ] unsigned char 
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  1    wreg      unsigned char 
  2953 ;; Registers used:
  2954 ;;		wreg, status,2, status,0
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 100/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMMON   BANK0   BANK1
  2960 ;;      Params:         1       0       0
  2961 ;;      Locals:         0      13       0
  2962 ;;      Temps:          4       0       0
  2963 ;;      Totals:         5      13       0
  2964 ;;Total ram usage:       18 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    1
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_checkKeyAD
  2971 ;;		_checkOutA
  2972 ;;		_checkBatAD
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           
  2977                           ;psect for function _ADC_Sample
  2978  010C                     _ADC_Sample:	
  2979                           
  2980                           ;incstack = 0
  2981                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2982                           ;ADC_Sample@adch stored from wreg
  2983  010C  1283               	bcf	3,5	;RP0=0, select bank0
  2984  010D  00D4               	movwf	ADC_Sample@adch
  2985                           
  2986                           ;main.c: 984: volatile unsigned long adsum = 0;
  2987                           
  2988                           ;main.c: 985: volatile unsigned int admin = 0, admax = 0;
  2989  010E  21E5               	fcall	PL8	;call to abstracted procedure
  2990                           
  2991                           ;main.c: 986: volatile unsigned int ad_temp = 0;
  2992  010F  01DE               	clrf	ADC_Sample@ad_temp	;volatile
  2993  0110  01DF               	clrf	ADC_Sample@ad_temp+1	;volatile
  2994                           
  2995                           ;main.c: 988: if ((!LDO_EN) && (adldo & 0x04) )
  2996  0111  1683               	bsf	3,5	;RP0=1, select bank1
  2997  0112  1D16               	btfss	22,2	;volatile
  2998  0113  1D72               	btfss	ADC_Sample@adldo,2
  2999  0114  291C               	goto	l2783
  3000                           
  3001                           ;main.c: 989: {
  3002                           ;main.c: 991: ADCON1 = adldo;
  3003  0115  0872               	movf	ADC_Sample@adldo,w
  3004  0116  0096               	movwf	22	;volatile
  3005                           
  3006                           ;main.c: 992: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3007  0117  3085               	movlw	133
  3008  0118  00F3               	movwf	??_ADC_Sample
  3009  0119                     u3307:	
  3010  0119  0BF3               	decfsz	??_ADC_Sample,f
  3011  011A  2919               	goto	u3307
  3012                           
  3013                           ;main.c: 993: }
  3014  011B  291E               	goto	l2785
  3015  011C                     l2783:	
  3016                           
  3017                           ;main.c: 994: else
  3018                           ;main.c: 995: ADCON1 = adldo;
  3019  011C  0872               	movf	ADC_Sample@adldo,w
  3020  011D  0096               	movwf	22	;volatile
  3021  011E                     l2785:	
  3022                           
  3023                           ;main.c: 997: if(adch & 0x10)
  3024  011E  1283               	bcf	3,5	;RP0=0, select bank0
  3025  011F  1E54               	btfss	ADC_Sample@adch,4
  3026  0120  2926               	goto	l2793
  3027                           
  3028                           ;main.c: 998: {
  3029                           ;main.c: 999: CHS4 = 1;
  3030  0121  1683               	bsf	3,5	;RP0=1, select bank1
  3031  0122  1716               	bsf	22,6	;volatile
  3032                           
  3033                           ;main.c: 1000: adch &= 0x0f;
  3034  0123  300F               	movlw	15
  3035  0124  1283               	bcf	3,5	;RP0=0, select bank0
  3036  0125  05D4               	andwf	ADC_Sample@adch,f
  3037  0126                     l2793:	
  3038                           
  3039                           ;main.c: 1003: for (i = 0; i < 10; i++)
  3040  0126  01D5               	clrf	ADC_Sample@i
  3041  0127                     l2799:	
  3042                           
  3043                           ;main.c: 1004: {
  3044                           ;main.c: 1005: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3045  0127  0854               	movf	ADC_Sample@adch,w
  3046  0128  00F3               	movwf	??_ADC_Sample
  3047  0129  3001               	movlw	1
  3048  012A  1003               	clrc
  3049  012B                     L7:	
  3050  012B  0DF3               	rlf	??_ADC_Sample,f
  3051  012C  3EFF               	addlw	-1
  3052  012D  1003               	clrc
  3053  012E  1D03               	skipz
  3054  012F  292B               	goto	L7
  3055  0130  0D73               	rlf	??_ADC_Sample,w
  3056  0131  3841               	iorlw	65
  3057  0132  1683               	bsf	3,5	;RP0=1, select bank1
  3058  0133  0095               	movwf	21	;volatile
  3059  0134  0000               	nop	;# 
  3060  0135  0000               	nop	;# 
  3061  0136  0000               	nop	;# 
  3062  0137  0000               	nop	;# 
  3063                           
  3064                           ;main.c: 1010: GODONE = 1;
  3065  0138  1683               	bsf	3,5	;RP0=1, select bank1
  3066  0139  1495               	bsf	21,1	;volatile
  3067                           
  3068                           ;main.c: 1012: unsigned char j = 0;
  3069  013A  1283               	bcf	3,5	;RP0=0, select bank0
  3070  013B  01D3               	clrf	ADC_Sample@j
  3071  013C                     l882:	
  3072                           ;main.c: 1013: while (GODONE)
  3073                           
  3074  013C  1683               	bsf	3,5	;RP0=1, select bank1
  3075  013D  1C95               	btfss	21,1	;volatile
  3076  013E  2947               	goto	l2809
  3077                           
  3078                           ;main.c: 1014: {
  3079                           ;main.c: 1015: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3080  013F  2940               	nop2	;2 cycle nop
  3081  0140  2941               	nop2	;2 cycle nop
  3082  0141  2942               	nop2	;2 cycle nop
  3083  0142  2943               	nop2	;2 cycle nop
  3084                           
  3085                           ;main.c: 1017: if (0 == (--j))
  3086  0143  1283               	bcf	3,5	;RP0=0, select bank0
  3087  0144  0BD3               	decfsz	ADC_Sample@j,f
  3088  0145  293C               	goto	l882
  3089                           
  3090                           ;main.c: 1018: return 0;
  3091  0146  3400               	retlw	0
  3092  0147                     l2809:	
  3093                           
  3094                           ;main.c: 1019: }
  3095                           ;main.c: 1021: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3096  0147  0819               	movf	25,w	;volatile
  3097  0148  1283               	bcf	3,5	;RP0=0, select bank0
  3098  0149  00DE               	movwf	ADC_Sample@ad_temp	;volatile
  3099  014A  01DF               	clrf	ADC_Sample@ad_temp+1	;volatile
  3100  014B  0EDE               	swapf	ADC_Sample@ad_temp,f	;volatile
  3101  014C  0EDF               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3102  014D  30F0               	movlw	240
  3103  014E  05DF               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3104  014F  085E               	movf	ADC_Sample@ad_temp,w	;volatile
  3105  0150  390F               	andlw	15
  3106  0151  04DF               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3107  0152  30F0               	movlw	240
  3108  0153  05DE               	andwf	ADC_Sample@ad_temp,f	;volatile
  3109  0154  1683               	bsf	3,5	;RP0=1, select bank1
  3110  0155  0E18               	swapf	24,w	;volatile
  3111  0156  390F               	andlw	15
  3112  0157  1283               	bcf	3,5	;RP0=0, select bank0
  3113  0158  07DE               	addwf	ADC_Sample@ad_temp,f	;volatile
  3114  0159  1803               	skipnc
  3115  015A  0ADF               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3116                           
  3117                           ;main.c: 1023: if (0 == admax)
  3118  015B  085C               	movf	ADC_Sample@admax,w	;volatile
  3119  015C  045D               	iorwf	ADC_Sample@admax+1,w	;volatile
  3120  015D  1D03               	btfss	3,2
  3121  015E  2961               	goto	l2817
  3122                           
  3123                           ;main.c: 1024: {
  3124                           ;main.c: 1025: admax = ad_temp;
  3125  015F  21EE               	fcall	PL20	;call to abstracted procedure
  3126  0160  2973               	goto	l2823
  3127  0161                     l2817:	
  3128                           ;main.c: 1027: }
  3129                           
  3130                           ;main.c: 1026: admin = ad_temp;
  3131                           
  3132                           
  3133                           ;main.c: 1028: else if (ad_temp > admax)
  3134  0161  085F               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3135  0162  025D               	subwf	ADC_Sample@admax+1,w	;volatile
  3136  0163  1D03               	skipz
  3137  0164  2967               	goto	u2645
  3138  0165  085E               	movf	ADC_Sample@ad_temp,w	;volatile
  3139  0166  025C               	subwf	ADC_Sample@admax,w	;volatile
  3140  0167                     u2645:	
  3141  0167  1803               	skipnc
  3142  0168  296B               	goto	l2821
  3143                           
  3144                           ;main.c: 1029: admax = ad_temp;
  3145  0169  21EE               	fcall	PL20	;call to abstracted procedure
  3146  016A  2977               	goto	l888
  3147  016B                     l2821:	
  3148                           
  3149                           ;main.c: 1030: else if (ad_temp < admin)
  3150  016B  085B               	movf	ADC_Sample@admin+1,w	;volatile
  3151  016C  025F               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3152  016D  1D03               	skipz
  3153  016E  2971               	goto	u2655
  3154  016F  085A               	movf	ADC_Sample@admin,w	;volatile
  3155  0170  025E               	subwf	ADC_Sample@ad_temp,w	;volatile
  3156  0171                     u2655:	
  3157  0171  1803               	skipnc
  3158  0172  2977               	goto	l888
  3159  0173                     l2823:	
  3160                           
  3161                           ;main.c: 1031: admin = ad_temp;
  3162  0173  085F               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3163  0174  00DB               	movwf	ADC_Sample@admin+1	;volatile
  3164  0175  085E               	movf	ADC_Sample@ad_temp,w	;volatile
  3165  0176  00DA               	movwf	ADC_Sample@admin	;volatile
  3166  0177                     l888:	
  3167                           
  3168                           ;main.c: 1033: adsum += ad_temp;
  3169  0177  085E               	movf	ADC_Sample@ad_temp,w	;volatile
  3170  0178  00F3               	movwf	??_ADC_Sample
  3171  0179  085F               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3172  017A  00F4               	movwf	??_ADC_Sample+1
  3173  017B  01F5               	clrf	??_ADC_Sample+2
  3174  017C  01F6               	clrf	??_ADC_Sample+3
  3175  017D  0873               	movf	??_ADC_Sample,w
  3176  017E  07D6               	addwf	ADC_Sample@adsum,f	;volatile
  3177  017F  0874               	movf	??_ADC_Sample+1,w
  3178  0180  1103               	clrz
  3179  0181  1803               	skipnc
  3180  0182  3E01               	addlw	1
  3181  0183  1D03               	btfss	3,2
  3182  0184  07D7               	addwf	ADC_Sample@adsum+1,f	;volatile
  3183  0185  0875               	movf	??_ADC_Sample+2,w
  3184  0186  1103               	clrz
  3185  0187  1803               	skipnc
  3186  0188  3E01               	addlw	1
  3187  0189  1D03               	btfss	3,2
  3188  018A  07D8               	addwf	ADC_Sample@adsum+2,f	;volatile
  3189  018B  0876               	movf	??_ADC_Sample+3,w
  3190  018C  1103               	clrz
  3191  018D  1803               	skipnc
  3192  018E  3E01               	addlw	1
  3193  018F  1D03               	btfss	3,2
  3194  0190  07D9               	addwf	ADC_Sample@adsum+3,f	;volatile
  3195  0191  300A               	movlw	10
  3196  0192  0AD5               	incf	ADC_Sample@i,f
  3197  0193  0255               	subwf	ADC_Sample@i,w
  3198  0194  1C03               	skipc
  3199  0195  2927               	goto	l2799
  3200                           
  3201                           ;main.c: 1034: }
  3202                           ;main.c: 1035: adsum -= admax;
  3203  0196  085C               	movf	ADC_Sample@admax,w	;volatile
  3204  0197  00F3               	movwf	??_ADC_Sample
  3205  0198  085D               	movf	ADC_Sample@admax+1,w	;volatile
  3206  0199  21D6               	fcall	PL2	;call to abstracted procedure
  3207  019A  1C03               	skipc
  3208  019B  0F76               	incfsz	??_ADC_Sample+3,w
  3209  019C  02D9               	subwf	ADC_Sample@adsum+3,f	;volatile
  3210                           
  3211                           ;main.c: 1036: if (adsum >= admin)
  3212  019D  085A               	movf	ADC_Sample@admin,w	;volatile
  3213  019E  00F3               	movwf	??_ADC_Sample
  3214  019F  085B               	movf	ADC_Sample@admin+1,w	;volatile
  3215  01A0  00F4               	movwf	??_ADC_Sample+1
  3216  01A1  01F5               	clrf	??_ADC_Sample+2
  3217  01A2  01F6               	clrf	??_ADC_Sample+3
  3218  01A3  0876               	movf	??_ADC_Sample+3,w
  3219  01A4  0259               	subwf	ADC_Sample@adsum+3,w	;volatile
  3220  01A5  1D03               	skipz
  3221  01A6  29B1               	goto	u2695
  3222  01A7  0875               	movf	??_ADC_Sample+2,w
  3223  01A8  0258               	subwf	ADC_Sample@adsum+2,w	;volatile
  3224  01A9  1D03               	skipz
  3225  01AA  29B1               	goto	u2695
  3226  01AB  0874               	movf	??_ADC_Sample+1,w
  3227  01AC  0257               	subwf	ADC_Sample@adsum+1,w	;volatile
  3228  01AD  1D03               	skipz
  3229  01AE  29B1               	goto	u2695
  3230  01AF  0873               	movf	??_ADC_Sample,w
  3231  01B0  0256               	subwf	ADC_Sample@adsum,w	;volatile
  3232  01B1                     u2695:	
  3233  01B1  1C03               	skipc
  3234  01B2  29BB               	goto	l892
  3235                           
  3236                           ;main.c: 1037: adsum -= admin;
  3237  01B3  085A               	movf	ADC_Sample@admin,w	;volatile
  3238  01B4  00F3               	movwf	??_ADC_Sample
  3239  01B5  085B               	movf	ADC_Sample@admin+1,w	;volatile
  3240  01B6  21D6               	fcall	PL2	;call to abstracted procedure
  3241  01B7  1C03               	skipc
  3242  01B8  0F76               	incfsz	??_ADC_Sample+3,w
  3243  01B9  02D9               	subwf	ADC_Sample@adsum+3,f	;volatile
  3244  01BA  29BF               	goto	l2833
  3245  01BB                     l892:	
  3246                           
  3247                           ;main.c: 1038: else
  3248                           ;main.c: 1039: adsum = 0;
  3249  01BB  01D6               	clrf	ADC_Sample@adsum	;volatile
  3250  01BC  01D7               	clrf	ADC_Sample@adsum+1	;volatile
  3251  01BD  01D8               	clrf	ADC_Sample@adsum+2	;volatile
  3252  01BE  01D9               	clrf	ADC_Sample@adsum+3	;volatile
  3253  01BF                     l2833:	
  3254                           
  3255                           ;main.c: 1041: adresult = adsum >> 3;
  3256  01BF  0856               	movf	ADC_Sample@adsum,w	;volatile
  3257  01C0  00F3               	movwf	??_ADC_Sample
  3258  01C1  0857               	movf	ADC_Sample@adsum+1,w	;volatile
  3259  01C2  00F4               	movwf	??_ADC_Sample+1
  3260  01C3  0858               	movf	ADC_Sample@adsum+2,w	;volatile
  3261  01C4  00F5               	movwf	??_ADC_Sample+2
  3262  01C5  0859               	movf	ADC_Sample@adsum+3,w	;volatile
  3263  01C6  00F6               	movwf	??_ADC_Sample+3
  3264  01C7  3003               	movlw	3
  3265  01C8                     u2715:	
  3266  01C8  1003               	clrc
  3267  01C9  0CF6               	rrf	??_ADC_Sample+3,f
  3268  01CA  0CF5               	rrf	??_ADC_Sample+2,f
  3269  01CB  0CF4               	rrf	??_ADC_Sample+1,f
  3270  01CC  0CF3               	rrf	??_ADC_Sample,f
  3271  01CD  3EFF               	addlw	-1
  3272  01CE  1D03               	skipz
  3273  01CF  29C8               	goto	u2715
  3274  01D0  0874               	movf	??_ADC_Sample+1,w
  3275  01D1  00F9               	movwf	_adresult+1	;volatile
  3276  01D2  0873               	movf	??_ADC_Sample,w
  3277  01D3  00F8               	movwf	_adresult	;volatile
  3278                           
  3279                           ;main.c: 1043: adsum = 0;
  3280                           
  3281                           ;main.c: 1044: admin = 0;
  3282                           
  3283                           ;main.c: 1045: admax = 0;
  3284  01D4  21E5               	fcall	PL8	;call to abstracted procedure
  3285                           
  3286                           ;main.c: 1046: return 0xA5;
  3287  01D5  34A5               	retlw	165
  3288  01D6                     __end_of_ADC_Sample:	
  3289  01D6                     PL2:	
  3290  01D6  00F4               	movwf	??_ADC_Sample+1
  3291  01D7  01F5               	clrf	??_ADC_Sample+2
  3292  01D8  01F6               	clrf	??_ADC_Sample+3
  3293  01D9  0873               	movf	??_ADC_Sample,w
  3294  01DA  02D6               	subwf	ADC_Sample@adsum,f	;volatile
  3295  01DB  0874               	movf	??_ADC_Sample+1,w
  3296  01DC  1C03               	skipc
  3297  01DD  0F74               	incfsz	??_ADC_Sample+1,w
  3298  01DE  02D7               	subwf	ADC_Sample@adsum+1,f	;volatile
  3299  01DF  0875               	movf	??_ADC_Sample+2,w
  3300  01E0  1C03               	skipc
  3301  01E1  0F75               	incfsz	??_ADC_Sample+2,w
  3302  01E2  02D8               	subwf	ADC_Sample@adsum+2,f	;volatile
  3303  01E3  0876               	movf	??_ADC_Sample+3,w
  3304  01E4  0008               	return
  3305  01E5                     __end_ofPL2:	
  3306  01E5                     PL8:	
  3307  01E5  01D6               	clrf	ADC_Sample@adsum	;volatile
  3308  01E6  01D7               	clrf	ADC_Sample@adsum+1	;volatile
  3309  01E7  01D8               	clrf	ADC_Sample@adsum+2	;volatile
  3310  01E8  01D9               	clrf	ADC_Sample@adsum+3	;volatile
  3311  01E9  01DA               	clrf	ADC_Sample@admin	;volatile
  3312  01EA  01DB               	clrf	ADC_Sample@admin+1	;volatile
  3313  01EB  01DC               	clrf	ADC_Sample@admax	;volatile
  3314  01EC  01DD               	clrf	ADC_Sample@admax+1	;volatile
  3315  01ED  0008               	return
  3316  01EE                     __end_ofPL8:	
  3317  01EE                     PL20:	
  3318  01EE  085F               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3319  01EF  00DD               	movwf	ADC_Sample@admax+1	;volatile
  3320  01F0  085E               	movf	ADC_Sample@ad_temp,w	;volatile
  3321  01F1  00DC               	movwf	ADC_Sample@admax	;volatile
  3322  01F2  0008               	return
  3323  01F3                     __end_ofPL20:	
  3324                           
  3325                           	psect	text18
  3326  0357                     __ptext18:	
  3327 ;; *************** function _Sleep_Mode *****************
  3328 ;; Defined at:
  3329 ;;		line 904 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;		None
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;		None
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  1    wreg      void 
  3336 ;; Registers used:
  3337 ;;		wreg, status,2, status,0, pclath, cstack
  3338 ;; Tracked objects:
  3339 ;;		On entry : 100/0
  3340 ;;		On exit  : 100/100
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMMON   BANK0   BANK1
  3343 ;;      Params:         0       0       0
  3344 ;;      Locals:         0       0       0
  3345 ;;      Temps:          0       0       0
  3346 ;;      Totals:         0       0       0
  3347 ;;Total ram usage:        0 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    2
  3350 ;; This function calls:
  3351 ;;		_AD_Init
  3352 ;;		_Init_System
  3353 ;; This function is called by:
  3354 ;;		_main
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           
  3359                           ;psect for function _Sleep_Mode
  3360  0357                     _Sleep_Mode:	
  3361                           
  3362                           ;main.c: 906: INTCON = 0;
  3363                           
  3364                           ;incstack = 0
  3365                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3366  0357  018B               	clrf	11	;volatile
  3367                           
  3368                           ;main.c: 908: OPTION_REG = 0;
  3369  0358  0181               	clrf	1	;volatile
  3370                           
  3371                           ;main.c: 912: TRISA = 0x37;
  3372                           
  3373                           ;main.c: 913: TRISB = 0x84;
  3374                           
  3375                           ;main.c: 915: PORTA = 0X00;
  3376                           
  3377                           ;main.c: 916: PORTB = 0X03;
  3378  0359  238B               	fcall	PL6	;call to abstracted procedure
  3379                           
  3380                           ;main.c: 919: ADCON0 = 0;
  3381  035A  1683               	bsf	3,5	;RP0=1, select bank1
  3382  035B  0195               	clrf	21	;volatile
  3383                           
  3384                           ;main.c: 920: ADCON1 = 0;
  3385  035C  0196               	clrf	22	;volatile
  3386                           
  3387                           ;main.c: 922: PWMCON0 = 0;
  3388  035D  1283               	bcf	3,5	;RP0=0, select bank0
  3389  035E  0195               	clrf	21	;volatile
  3390                           
  3391                           ;main.c: 924: OSCCON = 0X70;
  3392  035F  3070               	movlw	112
  3393  0360  0094               	movwf	20	;volatile
  3394                           
  3395                           ;main.c: 926: IOCA = 0x00;
  3396  0361  1683               	bsf	3,5	;RP0=1, select bank1
  3397  0362  0189               	clrf	9	;volatile
  3398                           
  3399                           ;main.c: 927: IOCB = 0x84;
  3400  0363  3084               	movlw	132
  3401  0364  1283               	bcf	3,5	;RP0=0, select bank0
  3402  0365  0089               	movwf	9	;volatile
  3403                           
  3404                           ;main.c: 929: RAIE = 1;
  3405  0366  158E               	bsf	14,3	;volatile
  3406                           
  3407                           ;main.c: 930: PEIE = 1;
  3408  0367  170B               	bsf	11,6	;volatile
  3409                           
  3410                           ;main.c: 931: RBIE = 1;
  3411  0368  158B               	bsf	11,3	;volatile
  3412                           
  3413                           ;main.c: 932: GIE = 0;
  3414  0369  138B               	bcf	11,7	;volatile
  3415                           
  3416                           ;main.c: 934: PIE1 &= 0X08;
  3417  036A  3008               	movlw	8
  3418  036B  058E               	andwf	14,f	;volatile
  3419                           
  3420                           ;main.c: 935: PIR1 = 0;
  3421  036C  018D               	clrf	13	;volatile
  3422                           
  3423                           ;main.c: 936: INTCON &= 0XC8;
  3424  036D  30C8               	movlw	200
  3425  036E  058B               	andwf	11,f	;volatile
  3426                           
  3427                           ;main.c: 938: PORTA;
  3428  036F  1683               	bsf	3,5	;RP0=1, select bank1
  3429  0370  0806               	movf	6,w	;volatile
  3430                           
  3431                           ;main.c: 939: RAIF = 0;
  3432  0371  1283               	bcf	3,5	;RP0=0, select bank0
  3433  0372  118D               	bcf	13,3	;volatile
  3434                           
  3435                           ;main.c: 940: PORTB;
  3436  0373  0806               	movf	6,w	;volatile
  3437                           
  3438                           ;main.c: 941: RBIF = 0;
  3439  0374  100B               	bcf	11,0	;volatile
  3440  0375  0064               	clrwdt	;# 
  3441  0376  0063               	sleep	;# 
  3442  0377  0000               	nop	;# 
  3443  0378  0064               	clrwdt	;# 
  3444  0379  0000               	nop	;# 
  3445  037A  0000               	nop	;# 
  3446  037B  0000               	nop	;# 
  3447  037C  0000               	nop	;# 
  3448  037D  0000               	nop	;# 
  3449                           
  3450                           ;main.c: 953: if(RAIF) RAIF = 0;
  3451  037E  1283               	bcf	3,5	;RP0=0, select bank0
  3452  037F  198D               	btfsc	13,3	;volatile
  3453  0380  118D               	bcf	13,3	;volatile
  3454                           
  3455                           ;main.c: 954: if(RBIF) RBIF = 0;
  3456  0381  180B               	btfsc	11,0	;volatile
  3457  0382  100B               	bcf	11,0	;volatile
  3458                           
  3459                           ;main.c: 955: if(TMR2IF) TMR2IF = 0;
  3460  0383  188D               	btfsc	13,1	;volatile
  3461  0384  108D               	bcf	13,1	;volatile
  3462                           
  3463                           ;main.c: 956: IOCA = 0B00000000;
  3464  0385  1683               	bsf	3,5	;RP0=1, select bank1
  3465  0386  0189               	clrf	9	;volatile
  3466                           
  3467                           ;main.c: 957: IOCB = 0B00000000;
  3468  0387  1283               	bcf	3,5	;RP0=0, select bank0
  3469  0388  0189               	clrf	9	;volatile
  3470                           
  3471                           ;main.c: 958: Init_System();
  3472  0389  2457               	fcall	_Init_System
  3473                           
  3474                           ;main.c: 959: AD_Init();
  3475  038A  2CE5               	ljmp	l2129
  3476  038B                     __end_of_Sleep_Mode:	
  3477  038B                     PL6:	
  3478  038B  3037               	movlw	55
  3479  038C  1683               	bsf	3,5	;RP0=1, select bank1
  3480  038D  0085               	movwf	5	;volatile
  3481  038E  3084               	movlw	132
  3482  038F  1283               	bcf	3,5	;RP0=0, select bank0
  3483  0390  0085               	movwf	5	;volatile
  3484  0391  1683               	bsf	3,5	;RP0=1, select bank1
  3485  0392  0186               	clrf	6	;volatile
  3486  0393  3003               	movlw	3
  3487  0394  1283               	bcf	3,5	;RP0=0, select bank0
  3488  0395  0086               	movwf	6	;volatile
  3489  0396  0008               	return
  3490  0397                     __end_ofPL6:	
  3491                           
  3492                           	psect	text19
  3493  0457                     __ptext19:	
  3494 ;; *************** function _Init_System *****************
  3495 ;; Defined at:
  3496 ;;		line 720 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;		None
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;		None
  3501 ;; Return value:  Size  Location     Type
  3502 ;;                  1    wreg      void 
  3503 ;; Registers used:
  3504 ;;		wreg, status,2
  3505 ;; Tracked objects:
  3506 ;;		On entry : 100/0
  3507 ;;		On exit  : 100/0
  3508 ;;		Unchanged: 0/0
  3509 ;; Data sizes:     COMMON   BANK0   BANK1
  3510 ;;      Params:         0       0       0
  3511 ;;      Locals:         0       0       0
  3512 ;;      Temps:          0       0       0
  3513 ;;      Totals:         0       0       0
  3514 ;;Total ram usage:        0 bytes
  3515 ;; Hardware stack levels used:    1
  3516 ;; Hardware stack levels required when called:    1
  3517 ;; This function calls:
  3518 ;;		Nothing
  3519 ;; This function is called by:
  3520 ;;		_main
  3521 ;;		_Sleep_Mode
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           
  3526                           ;psect for function _Init_System
  3527  0457                     _Init_System:	
  3528                           
  3529                           ;incstack = 0
  3530                           ; Regs used in _Init_System: [wreg+status,2]
  3531  0457  0000               	nop	;# 
  3532  0458  0064               	clrwdt	;# 
  3533                           
  3534                           ;main.c: 724: OPTION_REG = 0;
  3535  0459  1283               	bcf	3,5	;RP0=0, select bank0
  3536  045A  0181               	clrf	1	;volatile
  3537  045B  0064               	clrwdt	;# 
  3538                           
  3539                           ;main.c: 726: OSCCON = 0X72;
  3540  045C  3072               	movlw	114
  3541  045D  1283               	bcf	3,5	;RP0=0, select bank0
  3542  045E  0094               	movwf	20	;volatile
  3543                           
  3544                           ;main.c: 728: WPUA = 0x20;
  3545  045F  3020               	movlw	32
  3546  0460  1683               	bsf	3,5	;RP0=1, select bank1
  3547  0461  0088               	movwf	8	;volatile
  3548                           
  3549                           ;main.c: 729: WPDA = 0x00;
  3550  0462  0187               	clrf	7	;volatile
  3551                           
  3552                           ;main.c: 730: WPUB = 0x80;
  3553  0463  3080               	movlw	128
  3554  0464  1283               	bcf	3,5	;RP0=0, select bank0
  3555  0465  0088               	movwf	8	;volatile
  3556                           
  3557                           ;main.c: 732: TRISA = 0x37;
  3558                           
  3559                           ;main.c: 733: TRISB = 0x84;
  3560                           
  3561                           ;main.c: 735: PORTA = 0X00;
  3562                           
  3563                           ;main.c: 736: PORTB = 0X03;
  3564  0466  238B               	fcall	PL6	;call to abstracted procedure
  3565                           
  3566                           ;main.c: 740: PR2 = 249;
  3567  0467  30F9               	movlw	249
  3568  0468  0091               	movwf	17	;volatile
  3569                           
  3570                           ;main.c: 741: TMR2IF = 0;
  3571  0469  108D               	bcf	13,1	;volatile
  3572                           
  3573                           ;main.c: 742: TMR2IE = 1;
  3574  046A  148E               	bsf	14,1	;volatile
  3575                           
  3576                           ;main.c: 744: T2CON = 0B00000100;
  3577  046B  3004               	movlw	4
  3578  046C  0093               	movwf	19	;volatile
  3579                           
  3580                           ;main.c: 745: INTCON = 0XC0;
  3581  046D  30C0               	movlw	192
  3582  046E  008B               	movwf	11	;volatile
  3583  046F  0008               	return
  3584  0470                     __end_of_Init_System:	
  3585                           
  3586                           	psect	text20
  3587  04E5                     __ptext20:	
  3588 ;; *************** function _AD_Init *****************
  3589 ;; Defined at:
  3590 ;;		line 757 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  3591 ;; Parameters:    Size  Location     Type
  3592 ;;		None
  3593 ;; Auto vars:     Size  Location     Type
  3594 ;;		None
  3595 ;; Return value:  Size  Location     Type
  3596 ;;                  1    wreg      void 
  3597 ;; Registers used:
  3598 ;;		wreg, status,2
  3599 ;; Tracked objects:
  3600 ;;		On entry : 100/0
  3601 ;;		On exit  : 100/100
  3602 ;;		Unchanged: 0/0
  3603 ;; Data sizes:     COMMON   BANK0   BANK1
  3604 ;;      Params:         0       0       0
  3605 ;;      Locals:         0       0       0
  3606 ;;      Temps:          0       0       0
  3607 ;;      Totals:         0       0       0
  3608 ;;Total ram usage:        0 bytes
  3609 ;; Hardware stack levels used:    1
  3610 ;; Hardware stack levels required when called:    1
  3611 ;; This function calls:
  3612 ;;		Nothing
  3613 ;; This function is called by:
  3614 ;;		_main
  3615 ;;		_Sleep_Mode
  3616 ;; This function uses a non-reentrant model
  3617 ;;
  3618                           
  3619                           
  3620                           ;psect for function _AD_Init
  3621  04E5                     _AD_Init:	
  3622  04E5                     l2129:	
  3623                           ;incstack = 0
  3624                           ; Regs used in _AD_Init: [wreg+status,2]
  3625                           
  3626                           
  3627                           ;main.c: 790: ADCON0 = 0X41;
  3628  04E5  3041               	movlw	65
  3629  04E6  1683               	bsf	3,5	;RP0=1, select bank1
  3630  04E7  0095               	movwf	21	;volatile
  3631                           
  3632                           ;main.c: 807: ADCON1 = 0;
  3633  04E8  0196               	clrf	22	;volatile
  3634                           
  3635                           ;main.c: 808: ANSEL0 = 0X07;
  3636  04E9  3007               	movlw	7
  3637  04EA  0093               	movwf	19	;volatile
  3638                           
  3639                           ;main.c: 809: ANSEL1 = 0x00;
  3640  04EB  0194               	clrf	20	;volatile
  3641  04EC  0008               	return
  3642  04ED                     __end_of_AD_Init:	
  3643                           
  3644                           	psect	text21
  3645  043C                     __ptext21:	
  3646 ;; *************** function _Isr_Timer *****************
  3647 ;; Defined at:
  3648 ;;		line 129 in file "C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;		None
  3651 ;; Auto vars:     Size  Location     Type
  3652 ;;		None
  3653 ;; Return value:  Size  Location     Type
  3654 ;;                  1    wreg      void 
  3655 ;; Registers used:
  3656 ;;		wreg, status,2, status,0
  3657 ;; Tracked objects:
  3658 ;;		On entry : 0/0
  3659 ;;		On exit  : 100/0
  3660 ;;		Unchanged: 0/0
  3661 ;; Data sizes:     COMMON   BANK0   BANK1
  3662 ;;      Params:         0       0       0
  3663 ;;      Locals:         0       0       0
  3664 ;;      Temps:          2       0       0
  3665 ;;      Totals:         2       0       0
  3666 ;;Total ram usage:        2 bytes
  3667 ;; Hardware stack levels used:    1
  3668 ;; This function calls:
  3669 ;;		Nothing
  3670 ;; This function is called by:
  3671 ;;		Interrupt level 1
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           
  3676                           ;psect for function _Isr_Timer
  3677  043C                     _Isr_Timer:	
  3678                           
  3679                           ;main.c: 131: if(TMR2IF)
  3680  043C  1283               	bcf	3,5	;RP0=0, select bank0
  3681  043D  1C8D               	btfss	13,1	;volatile
  3682  043E  2C50               	goto	i1l688
  3683                           
  3684                           ;main.c: 132: {
  3685                           ;main.c: 133: TMR2IF = 0;
  3686  043F  108D               	bcf	13,1	;volatile
  3687                           
  3688                           ;main.c: 134: if(++intCount >= 160)
  3689  0440  30A0               	movlw	160
  3690  0441  0AD2               	incf	_intCount,f
  3691  0442  0252               	subwf	_intCount,w
  3692  0443  1C03               	skipc
  3693  0444  2C4F               	goto	i1l2723
  3694  0445  3064               	movlw	100
  3695                           
  3696                           ;main.c: 135: {
  3697                           ;main.c: 136: intCount = 0;
  3698  0446  01D2               	clrf	_intCount
  3699                           
  3700                           ;main.c: 137: IntFlag = 1;
  3701  0447  01D0               	clrf	_IntFlag
  3702  0448  0AD0               	incf	_IntFlag,f
  3703                           
  3704                           ;main.c: 138: if(++count1s >= 100)
  3705  0449  0AD1               	incf	_count1s,f
  3706  044A  0251               	subwf	_count1s,w
  3707  044B  1C03               	skipc
  3708  044C  2C4F               	goto	i1l2723
  3709                           
  3710                           ;main.c: 139: {
  3711                           ;main.c: 140: count1s = 0;
  3712  044D  01D1               	clrf	_count1s
  3713                           
  3714                           ;main.c: 141: count40s++;
  3715  044E  0AB0               	incf	_count40s,f
  3716  044F                     i1l2723:	
  3717                           
  3718                           ;main.c: 142: }
  3719                           ;main.c: 143: }
  3720                           ;main.c: 144: intCount10++;
  3721  044F  0ACE               	incf	_intCount10,f
  3722  0450                     i1l688:	
  3723  0450  0871               	movf	??_Isr_Timer+1,w
  3724  0451  008A               	movwf	10
  3725  0452  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3726  0453  0083               	movwf	3
  3727  0454  0EFE               	swapf	126,f
  3728  0455  0E7E               	swapf	126,w
  3729  0456  0009               	retfie
  3730  0457                     __end_of_Isr_Timer:	
  3731  007E                     btemp	set	126	;btemp
  3732  007E                     wtemp0	set	126
  3733                           
  3734                           	psect	intentry
  3735  0004                     __pintentry:	
  3736                           ;incstack = 0
  3737                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  3738                           
  3739  0004                     interrupt_function:	
  3740  007E                     saved_w	set	btemp
  3741  0004  00FE               	movwf	btemp
  3742  0005  0E03               	swapf	3,w
  3743  0006  00F0               	movwf	??_Isr_Timer
  3744  0007  080A               	movf	10,w
  3745  0008  00F1               	movwf	??_Isr_Timer+1
  3746  0009  2C3C               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         55
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     15      67
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_checkOutA
    _workCtr->___bmul
    _keyRead3->_checkKeyAD
    _checkKeyAD->_ADC_Sample
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkBatAD
    _main->_keyCtr
    _keyCtr->_keyRead3
    _checkKeyAD->_ADC_Sample
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3625
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0     304
                             ___bmul
                          _pwmD2Init
                          _pwmD2Stop
                          _pwmD3Init
                          _pwmD3Stop
 ---------------------------------------------------------------------------------
 (2) _pwmD3Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmD2Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     304
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0    1237
                                             14 BANK0      1     1      0
                            _keyRead
                           _keyRead2
                           _keyRead3
 ---------------------------------------------------------------------------------
 (2) _keyRead3                                             1     1      0    1073
                                             13 BANK0      1     1      0
                         _checkKeyAD
 ---------------------------------------------------------------------------------
 (3) _checkKeyAD                                           1     1      0    1042
                                              7 COMMON     1     1      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _keyRead2                                             1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0       0
                                              2 COMMON     2     2      0
                        _chrgPwmInit
                        _chrgPwmStop
                          _pwmD2Stop
                          _pwmD3Stop
 ---------------------------------------------------------------------------------
 (2) _pwmD3Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmD2Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            1     1      0    1042
                                              7 COMMON     1     1      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0    1042
                                             13 BANK0      2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (4) _ADC_Sample                                          18    17      1    1042
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
   _chrgCtr
     _chrgPwmInit
     _chrgPwmStop
     _pwmD2Stop
     _pwmD3Stop
   _keyCtr
     _keyRead
     _keyRead2
     _keyRead3
       _checkKeyAD
         _ADC_Sample
   _workCtr
     ___bmul
     _pwmD2Init
     _pwmD2Stop
     _pwmD3Init
     _pwmD3Stop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      F      43       4       83.8%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      4F       7        0.0%
DATA                 0      0      4F       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 12 15:20:59 2025

            _protectFlag 004C           ___bmul@product 0073                       PL2 01D6  
                     PL4 02FF                       PL6 038B                       PL8 01E5  
                     fsr 0004                      PL10 04A2                      PL20 01EE  
                    PL12 0106                      PL14 04A8                      PL16 0306  
                    PL18 030A                      l726 0096                      l693 039C  
                    l775 0348                      l769 031A                      l793 02D0  
                    l697 03B6                      l882 013C                      l787 02B4  
                    l892 01BB                      l789 02BE                      l888 0177  
                    _GIE 005F                      _RA3 0433                      _RB3 0033  
                    _RB4 0034                      _PR2 0011      __size_of_ADC_Sample 00CA  
                    indf 0000          __end_of_AD_Init 04ED                     l3003 025D  
                   l3021 028F                     l3015 0286                     l3023 0291  
                   l2135 04DD                     l2143 04D5                     l2129 04E5  
                   l2153 04F2                     l2147 04DB                     l2411 00AE  
                   l2403 008F                     l3123 03D3                     l2421 00BB  
                   l2325 001F                     l3045 0325                     l2423 00BD  
                   l2407 0098                     l2343 0031                     l3071 034B  
                   l2441 00E1                     l2417 00B8                     l2361 0049  
                   l2345 0033                     l2281 04AE                     l2435 00DC  
                   l3059 0337                     l2461 0103                     l2437 00DD  
                   l2357 0047                     l2445 00E8                     l2621 02DF  
                   l2383 006B                     l2375 0060                     l2367 0053  
                   l2615 02D7                     l3087 03A4                     l2385 006D  
                   l2625 02E2                     l2633 02E9                     l2395 0087  
                   l2643 02F4                     l2821 016B                     l2397 0089  
                   l2629 02E6                     l2653 02FD                     l2581 02A6  
                   l2823 0173                     l2639 02F1                     l2833 01BF  
                   l2817 0161                     l2809 0147                     l2649 02FA  
                   l2593 02B6                     l2907 0492                     l2931 047F  
                   l2853 0413                     l2783 011C                     l2855 0416  
                   l2793 0126                     l2785 011E                     l2961 03F3  
                   l2963 03F8                     l2981 021A                     l2885 0436  
                   l2799 0127                     l2959 03F2                     l2993 0247  
                   l2999 0254                     _CHS4 04B6                     _IOCA 0089  
                   _IOCB 0009                     u3307 0119                     _PIE1 000E  
                   u2715 01C8                     u3267 041B                     u2645 0167  
                   u3277 03FD                     u1845 00AC                     u2655 0171  
                   u3287 025A                     u3297 0297                     _PEIE 005E  
                   _RAIE 0073                     _RAIF 006B                     u1885 00D0  
                   u2695 01B1                     u2935 0239                     _RBIE 005B  
                   _RBIF 0058                     _PIR1 000D                     _WPDA 0087  
                   _WPUA 0088                     _WPUB 0008                     _main 0397  
                   btemp 007E                     start 000A        ___bmul@multiplier 0074  
          ??_Init_System 0072                    ?_main 0070                    _T2CON 0013  
                  i1l688 0450            _countHalfFull 004D                    _PORTA 0086  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0005  
                  _PWMTH 0018                    _PWMTL 0017          __end_of_chrgCtr 0106  
        __end_of_keyRead 043C                    pclath 000A                    status 0003  
                  wtemp0 007E          __end_of_workCtr 02FF          __initialization 000B  
           __end_of_main 03D6     __size_of_chrgPwmInit 000A     __size_of_chrgPwmStop 0008  
                 ??_main 0078                ??_AD_Init 0072      __end_of_Init_System 0470  
                 _ADCON0 0095                   _ADCON1 0096                   _ADRESH 0099  
                 _ADRESL 0098                   _ANSEL0 0093                   _ANSEL1 0094  
                 _GODONE 04A9                   i1l2723 044F                   _LDO_EN 04B2  
                 _INTCON 000B                   _OSCCON 0014                   _TMR2IE 0071  
                 _TMR2IF 0069                   _PWMD2L 009B                   _PWMD3L 009C  
           ??_ADC_Sample 0073             keyCtr@kclick 0061       __size_of_Isr_Timer 001B  
             _Sleep_Mode 0357                   ___bmul 04AC         __end_of_keyRead2 0499  
       __end_of_keyRead3 0485                   _keyCtr 030E                   _keyNum 0032  
              ??_chrgCtr 0072                   _pwStep 0044                   _zfStep 0033  
                 _result 002E                ??_keyRead 0072       __end_of_ADC_Sample 01D6  
                 saved_w 007E                ??_workCtr 0075               _batADValue 0028  
__end_of__initialization 0014      ___bmul@multiplicand 0072           __pcstackCOMMON 0070  
     __size_of_checkOutA 002A              _Init_System 0457               __end_ofPL2 01E5  
             __end_ofPL4 0306               __end_ofPL6 0397               __end_ofPL8 01EE  
      __end_of_Isr_Timer 0457               _checkBatAD 01F3               _checkKeyAD 0400  
             __pbssBANK0 0020             _chrgFullFlag 004F              ?_Sleep_Mode 0070  
             __pmaintext 0397                  ?___bmul 0072       __size_of_pwmD2Init 0009  
     __size_of_pwmD3Init 0009       __size_of_pwmD2Stop 0008       __size_of_pwmD3Stop 0007  
             __pintentry 0004             _chrgWaitTime 003B                  ?_keyCtr 0070  
                _AD_Init 04E5                  _PWM23DT 009D                  _PWMD23H 009E  
                _PWMCON0 0015                  _PWMCON1 0016                  _PWMCON2 001D  
      __end_of_checkOutA 0400                ?_keyRead2 0070                ?_keyRead3 0070  
                _IntFlag 0050               _intCount10 004E          ADC_Sample@adldo 0072  
        ADC_Sample@admax 005C          ADC_Sample@admin 005A          ADC_Sample@adsum 0056  
        __size_of___bmul 000E                  _addTime 003D          __size_of_keyCtr 0049  
                _chrgCtr 0016               _lowBatFlag 0039                  __ptext1 029B  
                __ptext2 04C4                  __ptext3 0499                  __ptext4 04AC  
                __ptext5 030E                  __ptext6 0470                  __ptext7 0400  
                __ptext8 0485                  __ptext9 041E                  _count1s 0051  
                _count8s 0020                  _keyRead 041E      __size_of_Sleep_Mode 0034  
                _subTime 003C              ?_checkBatAD 0070        __end_of_pwmD2Init 04A2  
      __end_of_pwmD3Init 04CD              ?_checkKeyAD 0070        __end_of_pwmD2Stop 04DD  
                clrloop0 04CE        __end_of_pwmD3Stop 04F4                  _workCtr 029B  
             _outADValue 002A     end_of_initialization 0014               ??_keyRead2 0072  
             ??_keyRead3 0078            _longPressFlag 0047            ??_chrgPwmInit 0072  
          ??_chrgPwmStop 0072      __size_of_checkBatAD 00A8           __end_of___bmul 04BA  
           ?_Init_System 0070      __size_of_checkKeyAD 001E           __end_of_keyCtr 0357  
    __end_of_chrgPwmInit 04C4      __end_of_chrgPwmStop 04E5              __end_ofPL10 04A8  
            __end_ofPL20 01F3              __end_ofPL12 010C              __end_ofPL14 04AC  
            __end_ofPL16 030A              __end_ofPL18 030E      start_initialization 000B  
              _Isr_Timer 043C             ??_Sleep_Mode 0072                 ??___bmul 0073  
      ADC_Sample@ad_temp 005E                 ??_keyCtr 0078                 ?_AD_Init 0070  
            __pbssCOMMON 0078                ___latbits 0000            __pcstackBANK0 0053  
     __end_of_Sleep_Mode 038B               ?_Isr_Timer 0070                _checkOutA 03D6  
      __size_of_keyRead2 0014        __size_of_keyRead3 0015                __pnvBANK0 0062  
            _chrgMaxDuty 003A                _chrgMaxAD 003F              _chrgPwmFlag 0037  
            _chrgPwmInit 04BA              _chrgPwmStop 04DD                 ?_chrgCtr 0070  
               ?_keyRead 0070                _keyCount2 0049                _keyCount3 0048  
              _firstTime 0062           ADC_Sample@adch 0054                _fullCount 0024  
           ??_checkBatAD 0060                _lockCount 003E             ??_checkKeyAD 0077  
               ?_workCtr 0070              ADC_Sample@i 0055              ADC_Sample@j 0053  
              _pwmD2Flag 0035                _pwmD3Flag 0036        interrupt_function 0004  
              _pwmD2Init 0499                _pwmD3Init 04C4                _pwmD2Stop 04D5  
              _pwmD3Stop 04ED               ?_checkOutA 0070                clear_ram0 04CD  
              _prePwStep 0043              _reChrgCount 0042                _sleepTime 0038  
     __end_of_checkBatAD 029B                _powerStep 0034       __end_of_checkKeyAD 041E  
   __size_of_Init_System 0019                _startTime 0046         __size_of_AD_Init 0008  
       keyRead@keyStatus 0072              ??_Isr_Timer 0070               ?_pwmD2Init 0070  
             ?_pwmD3Init 0070               _ADC_Sample 010C               ?_pwmD2Stop 0070  
             ?_pwmD3Stop 0070         __size_of_chrgCtr 00F0         __size_of_keyRead 001E  
               _adresult 0078                 _chrgFlag 007A                 _chrgMode 0040  
               __ptext10 0016                 __ptext11 04ED                 __ptext20 04E5  
               __ptext12 04D5                 __ptext21 043C                 __ptext13 04DD  
               __ptext14 04BA                 __ptext15 03D6                 __ptext16 01F3  
               __ptext17 010C                 __ptext18 0357                 __ptext19 0457  
               _count40s 0030                 _count50s 0026         __size_of_workCtr 0064  
               _keyRead2 0485                 _keyRead3 0470                 _keyCount 004A  
               _intCount 0052            __size_of_main 003F              ??_checkOutA 0077  
               _test_adc 007B                 _power_ad 002C                 _workStep 004B  
           _overChrgTime 0045                 intlevel1 0000              ??_pwmD2Init 0072  
            ??_pwmD3Init 0072              ?_ADC_Sample 0072              ??_pwmD2Stop 0072  
            ??_pwmD3Stop 0072              _zdMotorFlag 0031        keyRead2@keyStatus 0072  
           ?_chrgPwmInit 0070             _overWorkTime 0022             ?_chrgPwmStop 0070  
            _showBatTime 0041        keyRead3@keyStatus 0060               _OPTION_REG 0001  
