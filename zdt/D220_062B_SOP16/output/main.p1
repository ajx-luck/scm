Version 3.2 HI-TECH Software Intermediate Code
[p mainexit ]
"98 C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c
[v _Init_System `(v ~T0 @X0 0 ef ]
"99
[v _AD_Init `(v ~T0 @X0 0 ef ]
"108
[v _checkOutA `(v ~T0 @X0 0 ef ]
"107
[v _chrgCtr `(v ~T0 @X0 0 ef ]
"109
[v _checkBatAD `(v ~T0 @X0 0 ef ]
"110
[v _keyCtr `(v ~T0 @X0 0 ef ]
"111
[v _workCtr `(v ~T0 @X0 0 ef ]
"100
[v _Sleep_Mode `(v ~T0 @X0 0 ef ]
"106
[v _chrgPwmStop `(v ~T0 @X0 0 ef ]
"102
[v _pwmD2Stop `(v ~T0 @X0 0 ef ]
"104
[v _pwmD3Stop `(v ~T0 @X0 0 ef ]
"105
[v _chrgPwmInit `(v ~T0 @X0 0 ef ]
"114
[v _checkKeyAD `(v ~T0 @X0 0 ef ]
"101
[v _pwmD2Init `(v ~T0 @X0 0 ef ]
"103
[v _pwmD3Init `(v ~T0 @X0 0 ef ]
"95
[v _ADC_Sample `(uc ~T0 @X0 0 ef2`uc`uc ]
[v F479 `(v ~T0 @X0 1 tf1`ul ]
"150 C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\sc.h
[v __delay `JF479 ~T0 @X0 0 e ]
[p i __delay ]
"4 C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c
[p n 752 ]
"5
[p n 373 ]
[; ;htc.h: 26: extern const char __xc8_OPTIM_SPEED;
[; ;htc.h: 28: extern double __fpnormalize(double);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
"5 C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\SC8P062BD.h
[v _INDF `Vuc ~T0 @X0 1 e@0 ]
[; ;SC8P062BD.h: 5: volatile unsigned char INDF @ 0x00;
"6
[v _OPTION_REG `Vuc ~T0 @X0 1 e@1 ]
[; ;SC8P062BD.h: 6: volatile unsigned char OPTION_REG @ 0x01;
"7
[v _PCL `Vuc ~T0 @X0 1 e@2 ]
[; ;SC8P062BD.h: 7: volatile unsigned char PCL @ 0x02;
"8
[v _STATUS `Vuc ~T0 @X0 1 e@3 ]
[; ;SC8P062BD.h: 8: volatile unsigned char STATUS @ 0x03;
"9
[v _FSR `Vuc ~T0 @X0 1 e@4 ]
[; ;SC8P062BD.h: 9: volatile unsigned char FSR @ 0x04;
"10
[v _TRISB `Vuc ~T0 @X0 1 e@5 ]
[; ;SC8P062BD.h: 10: volatile unsigned char TRISB @ 0x05;
"11
[v _PORTB `Vuc ~T0 @X0 1 e@6 ]
[; ;SC8P062BD.h: 11: volatile unsigned char PORTB @ 0x06;
"12
[v _WPDB `Vuc ~T0 @X0 1 e@7 ]
[; ;SC8P062BD.h: 12: volatile unsigned char WPDB @ 0x07;
"13
[v _WPUB `Vuc ~T0 @X0 1 e@8 ]
[; ;SC8P062BD.h: 13: volatile unsigned char WPUB @ 0x08;
"14
[v _IOCB `Vuc ~T0 @X0 1 e@9 ]
[; ;SC8P062BD.h: 14: volatile unsigned char IOCB @ 0x09;
"15
[v _PCLATH `Vuc ~T0 @X0 1 e@10 ]
[; ;SC8P062BD.h: 15: volatile unsigned char PCLATH @ 0x0A;
"16
[v _INTCON `Vuc ~T0 @X0 1 e@11 ]
[; ;SC8P062BD.h: 16: volatile unsigned char INTCON @ 0x0B;
"17
[v _ODCONB `Vuc ~T0 @X0 1 e@12 ]
[; ;SC8P062BD.h: 17: volatile unsigned char ODCONB @ 0x0C;
"18
[v _PIR1 `Vuc ~T0 @X0 1 e@13 ]
[; ;SC8P062BD.h: 18: volatile unsigned char PIR1 @ 0x0D;
"19
[v _PIE1 `Vuc ~T0 @X0 1 e@14 ]
[; ;SC8P062BD.h: 19: volatile unsigned char PIE1 @ 0x0E;
"20
[v _CMPCON0 `Vuc ~T0 @X0 1 e@15 ]
[; ;SC8P062BD.h: 20: volatile unsigned char CMPCON0 @ 0x0F;
"21
[v _CMPCON1 `Vuc ~T0 @X0 1 e@16 ]
[; ;SC8P062BD.h: 21: volatile unsigned char CMPCON1 @ 0x10;
"22
[v _PR2 `Vuc ~T0 @X0 1 e@17 ]
[; ;SC8P062BD.h: 22: volatile unsigned char PR2 @ 0x11;
"23
[v _TMR2 `Vuc ~T0 @X0 1 e@18 ]
[; ;SC8P062BD.h: 23: volatile unsigned char TMR2 @ 0x12;
"24
[v _T2CON `Vuc ~T0 @X0 1 e@19 ]
[; ;SC8P062BD.h: 24: volatile unsigned char T2CON @ 0x13;
"25
[v _OSCCON `Vuc ~T0 @X0 1 e@20 ]
[; ;SC8P062BD.h: 25: volatile unsigned char OSCCON @ 0x14;
"26
[v _PWMCON0 `Vuc ~T0 @X0 1 e@21 ]
[; ;SC8P062BD.h: 26: volatile unsigned char PWMCON0 @ 0x15;
"27
[v _PWMCON1 `Vuc ~T0 @X0 1 e@22 ]
[; ;SC8P062BD.h: 27: volatile unsigned char PWMCON1 @ 0x16;
"28
[v _PWMTL `Vuc ~T0 @X0 1 e@23 ]
[; ;SC8P062BD.h: 28: volatile unsigned char PWMTL @ 0x17;
"29
[v _PWMTH `Vuc ~T0 @X0 1 e@24 ]
[; ;SC8P062BD.h: 29: volatile unsigned char PWMTH @ 0x18;
"30
[v _PWMD0L `Vuc ~T0 @X0 1 e@25 ]
[; ;SC8P062BD.h: 30: volatile unsigned char PWMD0L @ 0x19;
"31
[v _PWMD1L `Vuc ~T0 @X0 1 e@26 ]
[; ;SC8P062BD.h: 31: volatile unsigned char PWMD1L @ 0x1A;
"32
[v _PWMD4L `Vuc ~T0 @X0 1 e@27 ]
[; ;SC8P062BD.h: 32: volatile unsigned char PWMD4L @ 0x1B;
"33
[v _PWMT4L `Vuc ~T0 @X0 1 e@28 ]
[; ;SC8P062BD.h: 33: volatile unsigned char PWMT4L @ 0x1C;
"34
[v _PWMCON2 `Vuc ~T0 @X0 1 e@29 ]
[; ;SC8P062BD.h: 34: volatile unsigned char PWMCON2 @ 0x1D;
"35
[v _PWMD01H `Vuc ~T0 @X0 1 e@30 ]
[; ;SC8P062BD.h: 35: volatile unsigned char PWMD01H @ 0x1E;
"36
[v _PWM01DT `Vuc ~T0 @X0 1 e@31 ]
[; ;SC8P062BD.h: 36: volatile unsigned char PWM01DT @ 0x1F;
"37
[v _TMR0 `Vuc ~T0 @X0 1 e@129 ]
[; ;SC8P062BD.h: 37: volatile unsigned char TMR0 @ 0x81;
"38
[v _TRISA `Vuc ~T0 @X0 1 e@133 ]
[; ;SC8P062BD.h: 38: volatile unsigned char TRISA @ 0x85;
"39
[v _PORTA `Vuc ~T0 @X0 1 e@134 ]
[; ;SC8P062BD.h: 39: volatile unsigned char PORTA @ 0x86;
"40
[v _WPDA `Vuc ~T0 @X0 1 e@135 ]
[; ;SC8P062BD.h: 40: volatile unsigned char WPDA @ 0x87;
"41
[v _WPUA `Vuc ~T0 @X0 1 e@136 ]
[; ;SC8P062BD.h: 41: volatile unsigned char WPUA @ 0x88;
"42
[v _IOCA `Vuc ~T0 @X0 1 e@137 ]
[; ;SC8P062BD.h: 42: volatile unsigned char IOCA @ 0x89;
"43
[v _ODCONA `Vuc ~T0 @X0 1 e@140 ]
[; ;SC8P062BD.h: 43: volatile unsigned char ODCONA @ 0x8C;
"44
[v _ANSEL0 `Vuc ~T0 @X0 1 e@147 ]
[; ;SC8P062BD.h: 44: volatile unsigned char ANSEL0 @ 0x93;
"45
[v _ANSEL1 `Vuc ~T0 @X0 1 e@148 ]
[; ;SC8P062BD.h: 45: volatile unsigned char ANSEL1 @ 0x94;
"46
[v _ADCON0 `Vuc ~T0 @X0 1 e@149 ]
[; ;SC8P062BD.h: 46: volatile unsigned char ADCON0 @ 0x95;
"47
[v _ADCON1 `Vuc ~T0 @X0 1 e@150 ]
[; ;SC8P062BD.h: 47: volatile unsigned char ADCON1 @ 0x96;
"48
[v _ADRESL `Vuc ~T0 @X0 1 e@152 ]
[; ;SC8P062BD.h: 48: volatile unsigned char ADRESL @ 0x98;
"49
[v _ADRESH `Vuc ~T0 @X0 1 e@153 ]
[; ;SC8P062BD.h: 49: volatile unsigned char ADRESH @ 0x99;
"50
[v _PWMD2L `Vuc ~T0 @X0 1 e@155 ]
[; ;SC8P062BD.h: 50: volatile unsigned char PWMD2L @ 0x9B;
"51
[v _PWMD3L `Vuc ~T0 @X0 1 e@156 ]
[; ;SC8P062BD.h: 51: volatile unsigned char PWMD3L @ 0x9C;
"52
[v _PWM23DT `Vuc ~T0 @X0 1 e@157 ]
[; ;SC8P062BD.h: 52: volatile unsigned char PWM23DT @ 0x9D;
"53
[v _PWMD23H `Vuc ~T0 @X0 1 e@158 ]
[; ;SC8P062BD.h: 53: volatile unsigned char PWMD23H @ 0x9E;
"55
[v _T0LSE_EN `Vb ~T0 @X0 1 e@15 ]
[; ;SC8P062BD.h: 55: volatile bit T0LSE_EN @ ((unsigned)&OPTION_REG*8)+7;
"56
[v _INTEDG `Vb ~T0 @X0 1 e@14 ]
[; ;SC8P062BD.h: 56: volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
"57
[v _T0CS `Vb ~T0 @X0 1 e@13 ]
[; ;SC8P062BD.h: 57: volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
"58
[v _T0SE `Vb ~T0 @X0 1 e@12 ]
[; ;SC8P062BD.h: 58: volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
"59
[v _PSA `Vb ~T0 @X0 1 e@11 ]
[; ;SC8P062BD.h: 59: volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
"60
[v _PS2 `Vb ~T0 @X0 1 e@10 ]
[; ;SC8P062BD.h: 60: volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
"61
[v _PS1 `Vb ~T0 @X0 1 e@9 ]
[; ;SC8P062BD.h: 61: volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
"62
[v _PS0 `Vb ~T0 @X0 1 e@8 ]
[; ;SC8P062BD.h: 62: volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
"65
[v _IRP `Vb ~T0 @X0 1 e@31 ]
[; ;SC8P062BD.h: 65: volatile bit IRP @ ((unsigned)&STATUS*8)+7;
"66
[v _RP1 `Vb ~T0 @X0 1 e@30 ]
[; ;SC8P062BD.h: 66: volatile bit RP1 @ ((unsigned)&STATUS*8)+6;
"67
[v _RP0 `Vb ~T0 @X0 1 e@29 ]
[; ;SC8P062BD.h: 67: volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
"68
[v _TO `Vb ~T0 @X0 1 e@28 ]
[; ;SC8P062BD.h: 68: volatile bit TO @ ((unsigned)&STATUS*8)+4;
"69
[v _PD `Vb ~T0 @X0 1 e@27 ]
[; ;SC8P062BD.h: 69: volatile bit PD @ ((unsigned)&STATUS*8)+3;
"70
[v _Z `Vb ~T0 @X0 1 e@26 ]
[; ;SC8P062BD.h: 70: volatile bit Z @ ((unsigned)&STATUS*8)+2;
"71
[v _DC `Vb ~T0 @X0 1 e@25 ]
[; ;SC8P062BD.h: 71: volatile bit DC @ ((unsigned)&STATUS*8)+1;
"72
[v _C `Vb ~T0 @X0 1 e@24 ]
[; ;SC8P062BD.h: 72: volatile bit C @ ((unsigned)&STATUS*8)+0;
"75
[v _TRISB7 `Vb ~T0 @X0 1 e@47 ]
[; ;SC8P062BD.h: 75: volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;
"76
[v _TRISB6 `Vb ~T0 @X0 1 e@46 ]
[; ;SC8P062BD.h: 76: volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
"77
[v _TRISB5 `Vb ~T0 @X0 1 e@45 ]
[; ;SC8P062BD.h: 77: volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
"78
[v _TRISB4 `Vb ~T0 @X0 1 e@44 ]
[; ;SC8P062BD.h: 78: volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
"79
[v _TRISB3 `Vb ~T0 @X0 1 e@43 ]
[; ;SC8P062BD.h: 79: volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
"80
[v _TRISB2 `Vb ~T0 @X0 1 e@42 ]
[; ;SC8P062BD.h: 80: volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
"81
[v _TRISB1 `Vb ~T0 @X0 1 e@41 ]
[; ;SC8P062BD.h: 81: volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
"82
[v _TRISB0 `Vb ~T0 @X0 1 e@40 ]
[; ;SC8P062BD.h: 82: volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
"85
[v _RB7 `Vb ~T0 @X0 1 e@55 ]
[; ;SC8P062BD.h: 85: volatile bit RB7 @ ((unsigned)&PORTB*8)+7;
"86
[v _RB6 `Vb ~T0 @X0 1 e@54 ]
[; ;SC8P062BD.h: 86: volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
"87
[v _RB5 `Vb ~T0 @X0 1 e@53 ]
[; ;SC8P062BD.h: 87: volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
"88
[v _RB4 `Vb ~T0 @X0 1 e@52 ]
[; ;SC8P062BD.h: 88: volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
"89
[v _RB3 `Vb ~T0 @X0 1 e@51 ]
[; ;SC8P062BD.h: 89: volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
"90
[v _RB2 `Vb ~T0 @X0 1 e@50 ]
[; ;SC8P062BD.h: 90: volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
"91
[v _RB1 `Vb ~T0 @X0 1 e@49 ]
[; ;SC8P062BD.h: 91: volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
"92
[v _RB0 `Vb ~T0 @X0 1 e@48 ]
[; ;SC8P062BD.h: 92: volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
"95
[v _WPDB7 `Vb ~T0 @X0 1 e@63 ]
[; ;SC8P062BD.h: 95: volatile bit WPDB7 @ ((unsigned)&WPDB*8)+7;
"96
[v _WPDB6 `Vb ~T0 @X0 1 e@62 ]
[; ;SC8P062BD.h: 96: volatile bit WPDB6 @ ((unsigned)&WPDB*8)+6;
"97
[v _WPDB5 `Vb ~T0 @X0 1 e@61 ]
[; ;SC8P062BD.h: 97: volatile bit WPDB5 @ ((unsigned)&WPDB*8)+5;
"98
[v _WPDB4 `Vb ~T0 @X0 1 e@60 ]
[; ;SC8P062BD.h: 98: volatile bit WPDB4 @ ((unsigned)&WPDB*8)+4;
"99
[v _WPDB3 `Vb ~T0 @X0 1 e@59 ]
[; ;SC8P062BD.h: 99: volatile bit WPDB3 @ ((unsigned)&WPDB*8)+3;
"100
[v _WPDB1 `Vb ~T0 @X0 1 e@57 ]
[; ;SC8P062BD.h: 100: volatile bit WPDB1 @ ((unsigned)&WPDB*8)+1;
"101
[v _WPDB0 `Vb ~T0 @X0 1 e@56 ]
[; ;SC8P062BD.h: 101: volatile bit WPDB0 @ ((unsigned)&WPDB*8)+0;
"104
[v _WPUB7 `Vb ~T0 @X0 1 e@71 ]
[; ;SC8P062BD.h: 104: volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;
"105
[v _WPUB6 `Vb ~T0 @X0 1 e@70 ]
[; ;SC8P062BD.h: 105: volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
"106
[v _WPUB5 `Vb ~T0 @X0 1 e@69 ]
[; ;SC8P062BD.h: 106: volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
"107
[v _WPUB4 `Vb ~T0 @X0 1 e@68 ]
[; ;SC8P062BD.h: 107: volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
"108
[v _WPUB3 `Vb ~T0 @X0 1 e@67 ]
[; ;SC8P062BD.h: 108: volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
"109
[v _WPUB2 `Vb ~T0 @X0 1 e@66 ]
[; ;SC8P062BD.h: 109: volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
"110
[v _WPUB1 `Vb ~T0 @X0 1 e@65 ]
[; ;SC8P062BD.h: 110: volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
"111
[v _WPUB0 `Vb ~T0 @X0 1 e@64 ]
[; ;SC8P062BD.h: 111: volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;
"114
[v _IOCB7 `Vb ~T0 @X0 1 e@79 ]
[; ;SC8P062BD.h: 114: volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;
"115
[v _IOCB6 `Vb ~T0 @X0 1 e@78 ]
[; ;SC8P062BD.h: 115: volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
"116
[v _IOCB5 `Vb ~T0 @X0 1 e@77 ]
[; ;SC8P062BD.h: 116: volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
"117
[v _IOCB4 `Vb ~T0 @X0 1 e@76 ]
[; ;SC8P062BD.h: 117: volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
"118
[v _IOCB3 `Vb ~T0 @X0 1 e@75 ]
[; ;SC8P062BD.h: 118: volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
"119
[v _IOCB2 `Vb ~T0 @X0 1 e@74 ]
[; ;SC8P062BD.h: 119: volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
"120
[v _IOCB1 `Vb ~T0 @X0 1 e@73 ]
[; ;SC8P062BD.h: 120: volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
"121
[v _IOCB0 `Vb ~T0 @X0 1 e@72 ]
[; ;SC8P062BD.h: 121: volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;
"124
[v _GIE `Vb ~T0 @X0 1 e@95 ]
[; ;SC8P062BD.h: 124: volatile bit GIE @ ((unsigned)&INTCON*8)+7;
"125
[v _PEIE `Vb ~T0 @X0 1 e@94 ]
[; ;SC8P062BD.h: 125: volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
"126
[v _T0IE `Vb ~T0 @X0 1 e@93 ]
[; ;SC8P062BD.h: 126: volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
"127
[v _INTE `Vb ~T0 @X0 1 e@92 ]
[; ;SC8P062BD.h: 127: volatile bit INTE @ ((unsigned)&INTCON*8)+4;
"128
[v _RBIE `Vb ~T0 @X0 1 e@91 ]
[; ;SC8P062BD.h: 128: volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
"129
[v _T0IF `Vb ~T0 @X0 1 e@90 ]
[; ;SC8P062BD.h: 129: volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
"130
[v _INTF `Vb ~T0 @X0 1 e@89 ]
[; ;SC8P062BD.h: 130: volatile bit INTF @ ((unsigned)&INTCON*8)+1;
"131
[v _RBIF `Vb ~T0 @X0 1 e@88 ]
[; ;SC8P062BD.h: 131: volatile bit RBIF @ ((unsigned)&INTCON*8)+0;
"134
[v _ODCONB7 `Vb ~T0 @X0 1 e@103 ]
[; ;SC8P062BD.h: 134: volatile bit ODCONB7 @ ((unsigned)&ODCONB*8)+7;
"135
[v _ODCONB6 `Vb ~T0 @X0 1 e@102 ]
[; ;SC8P062BD.h: 135: volatile bit ODCONB6 @ ((unsigned)&ODCONB*8)+6;
"136
[v _ODCONB5 `Vb ~T0 @X0 1 e@101 ]
[; ;SC8P062BD.h: 136: volatile bit ODCONB5 @ ((unsigned)&ODCONB*8)+5;
"137
[v _ODCONB4 `Vb ~T0 @X0 1 e@100 ]
[; ;SC8P062BD.h: 137: volatile bit ODCONB4 @ ((unsigned)&ODCONB*8)+4;
"138
[v _ODCONB3 `Vb ~T0 @X0 1 e@99 ]
[; ;SC8P062BD.h: 138: volatile bit ODCONB3 @ ((unsigned)&ODCONB*8)+3;
"139
[v _ODCONB1 `Vb ~T0 @X0 1 e@97 ]
[; ;SC8P062BD.h: 139: volatile bit ODCONB1 @ ((unsigned)&ODCONB*8)+1;
"140
[v _ODCONB0 `Vb ~T0 @X0 1 e@96 ]
[; ;SC8P062BD.h: 140: volatile bit ODCONB0 @ ((unsigned)&ODCONB*8)+0;
"143
[v _CMPIF `Vb ~T0 @X0 1 e@109 ]
[; ;SC8P062BD.h: 143: volatile bit CMPIF @ ((unsigned)&PIR1*8)+5;
"144
[v _PWMIF `Vb ~T0 @X0 1 e@108 ]
[; ;SC8P062BD.h: 144: volatile bit PWMIF @ ((unsigned)&PIR1*8)+4;
"145
[v _RAIF `Vb ~T0 @X0 1 e@107 ]
[; ;SC8P062BD.h: 145: volatile bit RAIF @ ((unsigned)&PIR1*8)+3;
"146
[v _TMR2IF `Vb ~T0 @X0 1 e@105 ]
[; ;SC8P062BD.h: 146: volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
"147
[v _ADIF `Vb ~T0 @X0 1 e@104 ]
[; ;SC8P062BD.h: 147: volatile bit ADIF @ ((unsigned)&PIR1*8)+0;
"150
[v _CMPIE `Vb ~T0 @X0 1 e@117 ]
[; ;SC8P062BD.h: 150: volatile bit CMPIE @ ((unsigned)&PIE1*8)+5;
"151
[v _PWMIE `Vb ~T0 @X0 1 e@116 ]
[; ;SC8P062BD.h: 151: volatile bit PWMIE @ ((unsigned)&PIE1*8)+4;
"152
[v _RAIE `Vb ~T0 @X0 1 e@115 ]
[; ;SC8P062BD.h: 152: volatile bit RAIE @ ((unsigned)&PIE1*8)+3;
"153
[v _TMR2IE `Vb ~T0 @X0 1 e@113 ]
[; ;SC8P062BD.h: 153: volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
"154
[v _ADIE `Vb ~T0 @X0 1 e@112 ]
[; ;SC8P062BD.h: 154: volatile bit ADIE @ ((unsigned)&PIE1*8)+0;
"157
[v _CMPEN `Vb ~T0 @X0 1 e@127 ]
[; ;SC8P062BD.h: 157: volatile bit CMPEN @ ((unsigned)&CMPCON0*8)+7;
"158
[v _CMPPS `Vb ~T0 @X0 1 e@126 ]
[; ;SC8P062BD.h: 158: volatile bit CMPPS @ ((unsigned)&CMPCON0*8)+6;
"159
[v _CMPNS2 `Vb ~T0 @X0 1 e@125 ]
[; ;SC8P062BD.h: 159: volatile bit CMPNS2 @ ((unsigned)&CMPCON0*8)+5;
"160
[v _CMPNS1 `Vb ~T0 @X0 1 e@124 ]
[; ;SC8P062BD.h: 160: volatile bit CMPNS1 @ ((unsigned)&CMPCON0*8)+4;
"161
[v _CMPNS0 `Vb ~T0 @X0 1 e@123 ]
[; ;SC8P062BD.h: 161: volatile bit CMPNS0 @ ((unsigned)&CMPCON0*8)+3;
"162
[v _CMPNV `Vb ~T0 @X0 1 e@122 ]
[; ;SC8P062BD.h: 162: volatile bit CMPNV @ ((unsigned)&CMPCON0*8)+2;
"163
[v _CMPOUT `Vb ~T0 @X0 1 e@121 ]
[; ;SC8P062BD.h: 163: volatile bit CMPOUT @ ((unsigned)&CMPCON0*8)+1;
"164
[v _CMPOEN `Vb ~T0 @X0 1 e@120 ]
[; ;SC8P062BD.h: 164: volatile bit CMPOEN @ ((unsigned)&CMPCON0*8)+0;
"167
[v _CMPIM `Vb ~T0 @X0 1 e@135 ]
[; ;SC8P062BD.h: 167: volatile bit CMPIM @ ((unsigned)&CMPCON1*8)+7;
"168
[v _AN_EN `Vb ~T0 @X0 1 e@134 ]
[; ;SC8P062BD.h: 168: volatile bit AN_EN @ ((unsigned)&CMPCON1*8)+6;
"169
[v _RBIAS_H `Vb ~T0 @X0 1 e@133 ]
[; ;SC8P062BD.h: 169: volatile bit RBIAS_H @ ((unsigned)&CMPCON1*8)+5;
"170
[v _RBIAS_L `Vb ~T0 @X0 1 e@132 ]
[; ;SC8P062BD.h: 170: volatile bit RBIAS_L @ ((unsigned)&CMPCON1*8)+4;
"171
[v _LVDS3 `Vb ~T0 @X0 1 e@131 ]
[; ;SC8P062BD.h: 171: volatile bit LVDS3 @ ((unsigned)&CMPCON1*8)+3;
"172
[v _LVDS2 `Vb ~T0 @X0 1 e@130 ]
[; ;SC8P062BD.h: 172: volatile bit LVDS2 @ ((unsigned)&CMPCON1*8)+2;
"173
[v _LVDS1 `Vb ~T0 @X0 1 e@129 ]
[; ;SC8P062BD.h: 173: volatile bit LVDS1 @ ((unsigned)&CMPCON1*8)+1;
"174
[v _LVDS0 `Vb ~T0 @X0 1 e@128 ]
[; ;SC8P062BD.h: 174: volatile bit LVDS0 @ ((unsigned)&CMPCON1*8)+0;
"177
[v _CLK_SEL `Vb ~T0 @X0 1 e@159 ]
[; ;SC8P062BD.h: 177: volatile bit CLK_SEL @ ((unsigned)&T2CON*8)+7;
"178
[v _TOUTPS3 `Vb ~T0 @X0 1 e@158 ]
[; ;SC8P062BD.h: 178: volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;
"179
[v _TOUTPS2 `Vb ~T0 @X0 1 e@157 ]
[; ;SC8P062BD.h: 179: volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
"180
[v _TOUTPS1 `Vb ~T0 @X0 1 e@156 ]
[; ;SC8P062BD.h: 180: volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
"181
[v _TOUTPS0 `Vb ~T0 @X0 1 e@155 ]
[; ;SC8P062BD.h: 181: volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
"182
[v _TMR2ON `Vb ~T0 @X0 1 e@154 ]
[; ;SC8P062BD.h: 182: volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
"183
[v _T2CKPS1 `Vb ~T0 @X0 1 e@153 ]
[; ;SC8P062BD.h: 183: volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
"184
[v _T2CKPS0 `Vb ~T0 @X0 1 e@152 ]
[; ;SC8P062BD.h: 184: volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
"187
[v _IRCF2 `Vb ~T0 @X0 1 e@166 ]
[; ;SC8P062BD.h: 187: volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;
"188
[v _IRCF1 `Vb ~T0 @X0 1 e@165 ]
[; ;SC8P062BD.h: 188: volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
"189
[v _IRCF0 `Vb ~T0 @X0 1 e@164 ]
[; ;SC8P062BD.h: 189: volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
"190
[v _SWDTEN `Vb ~T0 @X0 1 e@161 ]
[; ;SC8P062BD.h: 190: volatile bit SWDTEN @ ((unsigned)&OSCCON*8)+1;
"193
[v _CLKDIV2 `Vb ~T0 @X0 1 e@175 ]
[; ;SC8P062BD.h: 193: volatile bit CLKDIV2 @ ((unsigned)&PWMCON0*8)+7;
"194
[v _CLKDIV1 `Vb ~T0 @X0 1 e@174 ]
[; ;SC8P062BD.h: 194: volatile bit CLKDIV1 @ ((unsigned)&PWMCON0*8)+6;
"195
[v _CLKDIV0 `Vb ~T0 @X0 1 e@173 ]
[; ;SC8P062BD.h: 195: volatile bit CLKDIV0 @ ((unsigned)&PWMCON0*8)+5;
"196
[v _PWM4EN `Vb ~T0 @X0 1 e@172 ]
[; ;SC8P062BD.h: 196: volatile bit PWM4EN @ ((unsigned)&PWMCON0*8)+4;
"197
[v _PWM3EN `Vb ~T0 @X0 1 e@171 ]
[; ;SC8P062BD.h: 197: volatile bit PWM3EN @ ((unsigned)&PWMCON0*8)+3;
"198
[v _PWM2EN `Vb ~T0 @X0 1 e@170 ]
[; ;SC8P062BD.h: 198: volatile bit PWM2EN @ ((unsigned)&PWMCON0*8)+2;
"199
[v _PWM1EN `Vb ~T0 @X0 1 e@169 ]
[; ;SC8P062BD.h: 199: volatile bit PWM1EN @ ((unsigned)&PWMCON0*8)+1;
"200
[v _PWM0EN `Vb ~T0 @X0 1 e@168 ]
[; ;SC8P062BD.h: 200: volatile bit PWM0EN @ ((unsigned)&PWMCON0*8)+0;
"203
[v _PWMIO_SEL1 `Vb ~T0 @X0 1 e@183 ]
[; ;SC8P062BD.h: 203: volatile bit PWMIO_SEL1 @ ((unsigned)&PWMCON1*8)+7;
"204
[v _PWMIO_SEL0 `Vb ~T0 @X0 1 e@182 ]
[; ;SC8P062BD.h: 204: volatile bit PWMIO_SEL0 @ ((unsigned)&PWMCON1*8)+6;
"205
[v _PWM2DTEN `Vb ~T0 @X0 1 e@181 ]
[; ;SC8P062BD.h: 205: volatile bit PWM2DTEN @ ((unsigned)&PWMCON1*8)+5;
"206
[v _PWM0DTEN `Vb ~T0 @X0 1 e@180 ]
[; ;SC8P062BD.h: 206: volatile bit PWM0DTEN @ ((unsigned)&PWMCON1*8)+4;
"207
[v _DT_DIV1 `Vb ~T0 @X0 1 e@177 ]
[; ;SC8P062BD.h: 207: volatile bit DT_DIV1 @ ((unsigned)&PWMCON1*8)+1;
"208
[v _DT_DIV0 `Vb ~T0 @X0 1 e@176 ]
[; ;SC8P062BD.h: 208: volatile bit DT_DIV0 @ ((unsigned)&PWMCON1*8)+0;
"211
[v _PWM4D9 `Vb ~T0 @X0 1 e@197 ]
[; ;SC8P062BD.h: 211: volatile bit PWM4D9 @ ((unsigned)&PWMTH*8)+5;
"212
[v _PWM4D8 `Vb ~T0 @X0 1 e@196 ]
[; ;SC8P062BD.h: 212: volatile bit PWM4D8 @ ((unsigned)&PWMTH*8)+4;
"213
[v _PWM4T9 `Vb ~T0 @X0 1 e@195 ]
[; ;SC8P062BD.h: 213: volatile bit PWM4T9 @ ((unsigned)&PWMTH*8)+3;
"214
[v _PWM4T8 `Vb ~T0 @X0 1 e@194 ]
[; ;SC8P062BD.h: 214: volatile bit PWM4T8 @ ((unsigned)&PWMTH*8)+2;
"215
[v _PWMT9 `Vb ~T0 @X0 1 e@193 ]
[; ;SC8P062BD.h: 215: volatile bit PWMT9 @ ((unsigned)&PWMTH*8)+1;
"216
[v _PWMT8 `Vb ~T0 @X0 1 e@192 ]
[; ;SC8P062BD.h: 216: volatile bit PWMT8 @ ((unsigned)&PWMTH*8)+0;
"219
[v _PWM4DIR `Vb ~T0 @X0 1 e@236 ]
[; ;SC8P062BD.h: 219: volatile bit PWM4DIR @ ((unsigned)&PWMCON2*8)+4;
"220
[v _PWM3DIR `Vb ~T0 @X0 1 e@235 ]
[; ;SC8P062BD.h: 220: volatile bit PWM3DIR @ ((unsigned)&PWMCON2*8)+3;
"221
[v _PWM2DIR `Vb ~T0 @X0 1 e@234 ]
[; ;SC8P062BD.h: 221: volatile bit PWM2DIR @ ((unsigned)&PWMCON2*8)+2;
"222
[v _PWM1DIR `Vb ~T0 @X0 1 e@233 ]
[; ;SC8P062BD.h: 222: volatile bit PWM1DIR @ ((unsigned)&PWMCON2*8)+1;
"223
[v _PWM0DIR `Vb ~T0 @X0 1 e@232 ]
[; ;SC8P062BD.h: 223: volatile bit PWM0DIR @ ((unsigned)&PWMCON2*8)+0;
"226
[v _PWMD19 `Vb ~T0 @X0 1 e@245 ]
[; ;SC8P062BD.h: 226: volatile bit PWMD19 @ ((unsigned)&PWMD01H*8)+5;
"227
[v _PWMD18 `Vb ~T0 @X0 1 e@244 ]
[; ;SC8P062BD.h: 227: volatile bit PWMD18 @ ((unsigned)&PWMD01H*8)+4;
"228
[v _PWMD09 `Vb ~T0 @X0 1 e@241 ]
[; ;SC8P062BD.h: 228: volatile bit PWMD09 @ ((unsigned)&PWMD01H*8)+1;
"229
[v _PWMD08 `Vb ~T0 @X0 1 e@240 ]
[; ;SC8P062BD.h: 229: volatile bit PWMD08 @ ((unsigned)&PWMD01H*8)+0;
"232
[v _PWM01DT5 `Vb ~T0 @X0 1 e@253 ]
[; ;SC8P062BD.h: 232: volatile bit PWM01DT5 @ ((unsigned)&PWM01DT*8)+5;
"233
[v _PWM01DT4 `Vb ~T0 @X0 1 e@252 ]
[; ;SC8P062BD.h: 233: volatile bit PWM01DT4 @ ((unsigned)&PWM01DT*8)+4;
"234
[v _PWM01DT3 `Vb ~T0 @X0 1 e@251 ]
[; ;SC8P062BD.h: 234: volatile bit PWM01DT3 @ ((unsigned)&PWM01DT*8)+3;
"235
[v _PWM01DT2 `Vb ~T0 @X0 1 e@250 ]
[; ;SC8P062BD.h: 235: volatile bit PWM01DT2 @ ((unsigned)&PWM01DT*8)+2;
"236
[v _PWM01DT1 `Vb ~T0 @X0 1 e@249 ]
[; ;SC8P062BD.h: 236: volatile bit PWM01DT1 @ ((unsigned)&PWM01DT*8)+1;
"237
[v _PWM01DT0 `Vb ~T0 @X0 1 e@248 ]
[; ;SC8P062BD.h: 237: volatile bit PWM01DT0 @ ((unsigned)&PWM01DT*8)+0;
"240
[v _TRISA5 `Vb ~T0 @X0 1 e@1069 ]
[; ;SC8P062BD.h: 240: volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
"241
[v _TRISA4 `Vb ~T0 @X0 1 e@1068 ]
[; ;SC8P062BD.h: 241: volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
"242
[v _TRISA3 `Vb ~T0 @X0 1 e@1067 ]
[; ;SC8P062BD.h: 242: volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
"243
[v _TRISA2 `Vb ~T0 @X0 1 e@1066 ]
[; ;SC8P062BD.h: 243: volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
"244
[v _TRISA1 `Vb ~T0 @X0 1 e@1065 ]
[; ;SC8P062BD.h: 244: volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
"245
[v _TRISA0 `Vb ~T0 @X0 1 e@1064 ]
[; ;SC8P062BD.h: 245: volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
"248
[v _RA5 `Vb ~T0 @X0 1 e@1077 ]
[; ;SC8P062BD.h: 248: volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
"249
[v _RA4 `Vb ~T0 @X0 1 e@1076 ]
[; ;SC8P062BD.h: 249: volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
"250
[v _RA3 `Vb ~T0 @X0 1 e@1075 ]
[; ;SC8P062BD.h: 250: volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
"251
[v _RA2 `Vb ~T0 @X0 1 e@1074 ]
[; ;SC8P062BD.h: 251: volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
"252
[v _RA1 `Vb ~T0 @X0 1 e@1073 ]
[; ;SC8P062BD.h: 252: volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
"253
[v _RA0 `Vb ~T0 @X0 1 e@1072 ]
[; ;SC8P062BD.h: 253: volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
"256
[v _WPDA5 `Vb ~T0 @X0 1 e@1085 ]
[; ;SC8P062BD.h: 256: volatile bit WPDA5 @ ((unsigned)&WPDA*8)+5;
"257
[v _WPDA4 `Vb ~T0 @X0 1 e@1084 ]
[; ;SC8P062BD.h: 257: volatile bit WPDA4 @ ((unsigned)&WPDA*8)+4;
"258
[v _WPDA3 `Vb ~T0 @X0 1 e@1083 ]
[; ;SC8P062BD.h: 258: volatile bit WPDA3 @ ((unsigned)&WPDA*8)+3;
"259
[v _WPDA2 `Vb ~T0 @X0 1 e@1082 ]
[; ;SC8P062BD.h: 259: volatile bit WPDA2 @ ((unsigned)&WPDA*8)+2;
"260
[v _WPDA1 `Vb ~T0 @X0 1 e@1081 ]
[; ;SC8P062BD.h: 260: volatile bit WPDA1 @ ((unsigned)&WPDA*8)+1;
"261
[v _WPDA0 `Vb ~T0 @X0 1 e@1080 ]
[; ;SC8P062BD.h: 261: volatile bit WPDA0 @ ((unsigned)&WPDA*8)+0;
"264
[v _WPUA5 `Vb ~T0 @X0 1 e@1093 ]
[; ;SC8P062BD.h: 264: volatile bit WPUA5 @ ((unsigned)&WPUA*8)+5;
"265
[v _WPUA4 `Vb ~T0 @X0 1 e@1092 ]
[; ;SC8P062BD.h: 265: volatile bit WPUA4 @ ((unsigned)&WPUA*8)+4;
"266
[v _WPUA3 `Vb ~T0 @X0 1 e@1091 ]
[; ;SC8P062BD.h: 266: volatile bit WPUA3 @ ((unsigned)&WPUA*8)+3;
"267
[v _WPUA2 `Vb ~T0 @X0 1 e@1090 ]
[; ;SC8P062BD.h: 267: volatile bit WPUA2 @ ((unsigned)&WPUA*8)+2;
"268
[v _WPUA1 `Vb ~T0 @X0 1 e@1089 ]
[; ;SC8P062BD.h: 268: volatile bit WPUA1 @ ((unsigned)&WPUA*8)+1;
"269
[v _WPUA0 `Vb ~T0 @X0 1 e@1088 ]
[; ;SC8P062BD.h: 269: volatile bit WPUA0 @ ((unsigned)&WPUA*8)+0;
"272
[v _IOCA5 `Vb ~T0 @X0 1 e@1101 ]
[; ;SC8P062BD.h: 272: volatile bit IOCA5 @ ((unsigned)&IOCA*8)+5;
"273
[v _IOCA4 `Vb ~T0 @X0 1 e@1100 ]
[; ;SC8P062BD.h: 273: volatile bit IOCA4 @ ((unsigned)&IOCA*8)+4;
"274
[v _IOCA3 `Vb ~T0 @X0 1 e@1099 ]
[; ;SC8P062BD.h: 274: volatile bit IOCA3 @ ((unsigned)&IOCA*8)+3;
"275
[v _IOCA2 `Vb ~T0 @X0 1 e@1098 ]
[; ;SC8P062BD.h: 275: volatile bit IOCA2 @ ((unsigned)&IOCA*8)+2;
"276
[v _IOCA1 `Vb ~T0 @X0 1 e@1097 ]
[; ;SC8P062BD.h: 276: volatile bit IOCA1 @ ((unsigned)&IOCA*8)+1;
"277
[v _IOCA0 `Vb ~T0 @X0 1 e@1096 ]
[; ;SC8P062BD.h: 277: volatile bit IOCA0 @ ((unsigned)&IOCA*8)+0;
"280
[v _ODCONA5 `Vb ~T0 @X0 1 e@1125 ]
[; ;SC8P062BD.h: 280: volatile bit ODCONA5 @ ((unsigned)&ODCONA*8)+5;
"281
[v _ODCONA4 `Vb ~T0 @X0 1 e@1124 ]
[; ;SC8P062BD.h: 281: volatile bit ODCONA4 @ ((unsigned)&ODCONA*8)+4;
"282
[v _ODCONA3 `Vb ~T0 @X0 1 e@1123 ]
[; ;SC8P062BD.h: 282: volatile bit ODCONA3 @ ((unsigned)&ODCONA*8)+3;
"283
[v _ODCONA2 `Vb ~T0 @X0 1 e@1122 ]
[; ;SC8P062BD.h: 283: volatile bit ODCONA2 @ ((unsigned)&ODCONA*8)+2;
"284
[v _ODCONA1 `Vb ~T0 @X0 1 e@1121 ]
[; ;SC8P062BD.h: 284: volatile bit ODCONA1 @ ((unsigned)&ODCONA*8)+1;
"285
[v _ODCONA0 `Vb ~T0 @X0 1 e@1120 ]
[; ;SC8P062BD.h: 285: volatile bit ODCONA0 @ ((unsigned)&ODCONA*8)+0;
"288
[v _ANS5 `Vb ~T0 @X0 1 e@1181 ]
[; ;SC8P062BD.h: 288: volatile bit ANS5 @ ((unsigned)&ANSEL0*8)+5;
"289
[v _ANS4 `Vb ~T0 @X0 1 e@1180 ]
[; ;SC8P062BD.h: 289: volatile bit ANS4 @ ((unsigned)&ANSEL0*8)+4;
"290
[v _ANS3 `Vb ~T0 @X0 1 e@1179 ]
[; ;SC8P062BD.h: 290: volatile bit ANS3 @ ((unsigned)&ANSEL0*8)+3;
"291
[v _ANS2 `Vb ~T0 @X0 1 e@1178 ]
[; ;SC8P062BD.h: 291: volatile bit ANS2 @ ((unsigned)&ANSEL0*8)+2;
"292
[v _ANS1 `Vb ~T0 @X0 1 e@1177 ]
[; ;SC8P062BD.h: 292: volatile bit ANS1 @ ((unsigned)&ANSEL0*8)+1;
"293
[v _ANS0 `Vb ~T0 @X0 1 e@1176 ]
[; ;SC8P062BD.h: 293: volatile bit ANS0 @ ((unsigned)&ANSEL0*8)+0;
"296
[v _ANS15 `Vb ~T0 @X0 1 e@1191 ]
[; ;SC8P062BD.h: 296: volatile bit ANS15 @ ((unsigned)&ANSEL1*8)+7;
"297
[v _ANS14 `Vb ~T0 @X0 1 e@1190 ]
[; ;SC8P062BD.h: 297: volatile bit ANS14 @ ((unsigned)&ANSEL1*8)+6;
"298
[v _ANS13 `Vb ~T0 @X0 1 e@1189 ]
[; ;SC8P062BD.h: 298: volatile bit ANS13 @ ((unsigned)&ANSEL1*8)+5;
"299
[v _ANS12 `Vb ~T0 @X0 1 e@1188 ]
[; ;SC8P062BD.h: 299: volatile bit ANS12 @ ((unsigned)&ANSEL1*8)+4;
"300
[v _ANS11 `Vb ~T0 @X0 1 e@1187 ]
[; ;SC8P062BD.h: 300: volatile bit ANS11 @ ((unsigned)&ANSEL1*8)+3;
"301
[v _ANS9 `Vb ~T0 @X0 1 e@1185 ]
[; ;SC8P062BD.h: 301: volatile bit ANS9 @ ((unsigned)&ANSEL1*8)+1;
"302
[v _ANS8 `Vb ~T0 @X0 1 e@1184 ]
[; ;SC8P062BD.h: 302: volatile bit ANS8 @ ((unsigned)&ANSEL1*8)+0;
"305
[v _ADCS1 `Vb ~T0 @X0 1 e@1199 ]
[; ;SC8P062BD.h: 305: volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;
"306
[v _ADCS0 `Vb ~T0 @X0 1 e@1198 ]
[; ;SC8P062BD.h: 306: volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
"307
[v _CHS3 `Vb ~T0 @X0 1 e@1197 ]
[; ;SC8P062BD.h: 307: volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
"308
[v _CHS2 `Vb ~T0 @X0 1 e@1196 ]
[; ;SC8P062BD.h: 308: volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
"309
[v _CHS1 `Vb ~T0 @X0 1 e@1195 ]
[; ;SC8P062BD.h: 309: volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
"310
[v _CHS0 `Vb ~T0 @X0 1 e@1194 ]
[; ;SC8P062BD.h: 310: volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
"311
[v _GODONE `Vb ~T0 @X0 1 e@1193 ]
[; ;SC8P062BD.h: 311: volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
"312
[v _ADON `Vb ~T0 @X0 1 e@1192 ]
[; ;SC8P062BD.h: 312: volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
"315
[v _ADFM `Vb ~T0 @X0 1 e@1207 ]
[; ;SC8P062BD.h: 315: volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;
"316
[v _CHS4 `Vb ~T0 @X0 1 e@1206 ]
[; ;SC8P062BD.h: 316: volatile bit CHS4 @ ((unsigned)&ADCON1*8)+6;
"317
[v _LDO_EN `Vb ~T0 @X0 1 e@1202 ]
[; ;SC8P062BD.h: 317: volatile bit LDO_EN @ ((unsigned)&ADCON1*8)+2;
"318
[v _LDO_SEL1 `Vb ~T0 @X0 1 e@1201 ]
[; ;SC8P062BD.h: 318: volatile bit LDO_SEL1 @ ((unsigned)&ADCON1*8)+1;
"319
[v _LDO_SEL0 `Vb ~T0 @X0 1 e@1200 ]
[; ;SC8P062BD.h: 319: volatile bit LDO_SEL0 @ ((unsigned)&ADCON1*8)+0;
"322
[v _PWMD39 `Vb ~T0 @X0 1 e@1269 ]
[; ;SC8P062BD.h: 322: volatile bit PWMD39 @ ((unsigned)&PWMD23H*8)+5;
"323
[v _PWMD38 `Vb ~T0 @X0 1 e@1268 ]
[; ;SC8P062BD.h: 323: volatile bit PWMD38 @ ((unsigned)&PWMD23H*8)+4;
"324
[v _PWMD29 `Vb ~T0 @X0 1 e@1265 ]
[; ;SC8P062BD.h: 324: volatile bit PWMD29 @ ((unsigned)&PWMD23H*8)+1;
"325
[v _PWMD28 `Vb ~T0 @X0 1 e@1264 ]
[; ;SC8P062BD.h: 325: volatile bit PWMD28 @ ((unsigned)&PWMD23H*8)+0;
[; ;sc.h: 28: extern void __nop(void);
[; ;sc.h: 76: extern unsigned int flash_read(unsigned short addr);
[; ;sc.h: 150: extern __nonreentrant void _delay(unsigned long);
[; ;sc.h: 184: extern unsigned char __resetbits;
[; ;sc.h: 185: extern __bit __powerdown;
[; ;sc.h: 186: extern __bit __timeout;
"29 C:\mcuproject\scm\zdt\D220_062B_SOP16\main.c
[v _adresult `Vui ~T0 @X0 1 e ]
[; ;main.c: 29: volatile unsigned int adresult;
"30
[v _result `Vui ~T0 @X0 1 e ]
[; ;main.c: 30: volatile unsigned int result;
"31
[v _test_adc `Vuc ~T0 @X0 1 e ]
[; ;main.c: 31: volatile unsigned char test_adc;
"32
[v _power_ad `Vui ~T0 @X0 1 e ]
[; ;main.c: 32: volatile unsigned int power_ad;
"33
[v _intCount `uc ~T0 @X0 1 e ]
[; ;main.c: 33: unsigned char intCount;
"34
[v _count1s `uc ~T0 @X0 1 e ]
[; ;main.c: 34: unsigned char count1s;
"35
[v _IntFlag `uc ~T0 @X0 1 e ]
[; ;main.c: 35: unsigned char IntFlag;
"36
[v _chrgFlag `uc ~T0 @X0 1 e ]
[; ;main.c: 36: unsigned char chrgFlag;
"37
[v _chrgFullFlag `uc ~T0 @X0 1 e ]
[; ;main.c: 37: unsigned char chrgFullFlag;
"38
[v _intCount10 `uc ~T0 @X0 1 e ]
[; ;main.c: 38: unsigned char intCount10;
"39
[v _outADValue `ui ~T0 @X0 1 e ]
[; ;main.c: 39: unsigned int outADValue;
"40
[v _batADValue `ui ~T0 @X0 1 e ]
[; ;main.c: 40: unsigned int batADValue;
"41
[v _countHalfFull `uc ~T0 @X0 1 e ]
[; ;main.c: 41: unsigned char countHalfFull;
"42
[v _protectFlag `uc ~T0 @X0 1 e ]
[; ;main.c: 42: unsigned char protectFlag;
"43
[v _workOverOutTime `uc ~T0 @X0 1 e ]
[; ;main.c: 43: unsigned char workOverOutTime;
"44
[v _workStep `uc ~T0 @X0 1 e ]
[i _workStep
-> -> 0 `i `uc
]
[; ;main.c: 44: unsigned char workStep = 0;
"45
[v _ledCnt `uc ~T0 @X0 1 e ]
[; ;main.c: 45: unsigned char ledCnt;
"46
[v _ledStep `uc ~T0 @X0 1 e ]
[; ;main.c: 46: unsigned char ledStep;
"47
[v _keyCount `uc ~T0 @X0 1 e ]
[; ;main.c: 47: unsigned char keyCount;
"48
[v _keyCount2 `uc ~T0 @X0 1 e ]
[; ;main.c: 48: unsigned char keyCount2;
"49
[v _keyCount3 `uc ~T0 @X0 1 e ]
[; ;main.c: 49: unsigned char keyCount3;
"50
[v _longPressFlag `uc ~T0 @X0 1 e ]
[; ;main.c: 50: unsigned char longPressFlag;
"51
[v _longPressFlag2 `uc ~T0 @X0 1 e ]
[; ;main.c: 51: unsigned char longPressFlag2;
"52
[v _maxDuty `uc ~T0 @X0 1 e ]
[; ;main.c: 52: unsigned char maxDuty;
"53
[v _overCount `uc ~T0 @X0 1 e ]
[; ;main.c: 53: unsigned char overCount;
"54
[v _addPowerCount `uc ~T0 @X0 1 e ]
[; ;main.c: 54: unsigned char addPowerCount;
"55
[v _tempDuty `uc ~T0 @X0 1 e ]
[; ;main.c: 55: unsigned char tempDuty;
"56
[v _startTime `uc ~T0 @X0 1 e ]
[; ;main.c: 56: unsigned char startTime;
"57
[v _firstTime `uc ~T0 @X0 1 e ]
[; ;main.c: 57: unsigned char firstTime;
"58
[v _overChrgTime `uc ~T0 @X0 1 e ]
[; ;main.c: 58: unsigned char overChrgTime;
"59
[v _pwStep `uc ~T0 @X0 1 e ]
[; ;main.c: 59: unsigned char pwStep;
"60
[v _prePwStep `uc ~T0 @X0 1 e ]
[; ;main.c: 60: unsigned char prePwStep;
"61
[v _count50s `ui ~T0 @X0 1 e ]
[; ;main.c: 61: unsigned int count50s;
"62
[v _reChrgCount `uc ~T0 @X0 1 e ]
[; ;main.c: 62: unsigned char reChrgCount;
"63
[v _showBatTime `uc ~T0 @X0 1 e ]
[; ;main.c: 63: unsigned char showBatTime;
"64
[v _chrgMode `uc ~T0 @X0 1 e ]
[i _chrgMode
-> -> 0 `i `uc
]
[; ;main.c: 64: unsigned char chrgMode = 0;
"65
[v _chrgMaxAD `uc ~T0 @X0 1 e ]
[i _chrgMaxAD
-> -> 0 `i `uc
]
[; ;main.c: 65: unsigned char chrgMaxAD = 0;
"66
[v _lockCount `uc ~T0 @X0 1 e ]
[i _lockCount
-> -> 0 `i `uc
]
[; ;main.c: 66: unsigned char lockCount = 0;
"67
[v _fullCount `ui ~T0 @X0 1 e ]
[i _fullCount
-> -> 0 `i `ui
]
[; ;main.c: 67: unsigned int fullCount = 0;
"68
[v _addTime `uc ~T0 @X0 1 e ]
[; ;main.c: 68: unsigned char addTime;
"69
[v _subTime `uc ~T0 @X0 1 e ]
[; ;main.c: 69: unsigned char subTime;
"70
[v _chrgWaitTime `uc ~T0 @X0 1 e ]
[; ;main.c: 70: unsigned char chrgWaitTime;
"71
[v _chrgMaxDuty `uc ~T0 @X0 1 e ]
[i _chrgMaxDuty
-> -> 0 `i `uc
]
[; ;main.c: 71: unsigned char chrgMaxDuty = 0;
"72
[v _ledCntTime `uc ~T0 @X0 1 e ]
[; ;main.c: 72: unsigned char ledCntTime;
"73
[v _count5s `ui ~T0 @X0 1 e ]
[i _count5s
-> -> 0 `i `ui
]
[; ;main.c: 73: unsigned int count5s = 0;
"74
[v _overWorkTime `ui ~T0 @X0 1 e ]
[; ;main.c: 74: unsigned int overWorkTime;
"75
[v _preLedStep `uc ~T0 @X0 1 e ]
[; ;main.c: 75: unsigned char preLedStep;
"76
[v _count8s `ui ~T0 @X0 1 e ]
[; ;main.c: 76: unsigned int count8s;
"77
[v _count900s `ui ~T0 @X0 1 e ]
[; ;main.c: 77: unsigned int count900s;
"78
[v _lowBatFlag `uc ~T0 @X0 1 e ]
[i _lowBatFlag
-> -> 0 `i `uc
]
[; ;main.c: 78: unsigned char lowBatFlag = 0;
"79
[v _sleepTime `uc ~T0 @X0 1 e ]
[; ;main.c: 79: unsigned char sleepTime;
"80
[v _startChrgTime `uc ~T0 @X0 1 e ]
[i _startChrgTime
-> -> 0 `i `uc
]
[; ;main.c: 80: unsigned char startChrgTime = 0;
"81
[v _shiweiNum `uc ~T0 @X0 1 e ]
[i _shiweiNum
-> -> 0 `i `uc
]
[; ;main.c: 81: unsigned char shiweiNum = 0;
"82
[v _geweiNum `uc ~T0 @X0 1 e ]
[i _geweiNum
-> -> 0 `i `uc
]
[; ;main.c: 82: unsigned char geweiNum = 0;
"83
[v _jrStep `uc ~T0 @X0 1 e ]
[i _jrStep
-> -> 0 `i `uc
]
[; ;main.c: 83: unsigned char jrStep = 0;
"84
[v _preWorkStep `uc ~T0 @X0 1 e ]
[i _preWorkStep
-> -> 0 `i `uc
]
[; ;main.c: 84: unsigned char preWorkStep = 0;
"85
[v _prejrStep `uc ~T0 @X0 1 e ]
[i _prejrStep
-> -> 0 `i `uc
]
[; ;main.c: 85: unsigned char prejrStep = 0;
"86
[v _chrgPwmFlag `uc ~T0 @X0 1 e ]
[i _chrgPwmFlag
-> -> 0 `i `uc
]
[; ;main.c: 86: unsigned char chrgPwmFlag = 0;
"87
[v _pwmD3Flag `uc ~T0 @X0 1 e ]
[i _pwmD3Flag
-> -> 0 `i `uc
]
[; ;main.c: 87: unsigned char pwmD3Flag = 0;
"88
[v _pwmD2Flag `uc ~T0 @X0 1 e ]
[i _pwmD2Flag
-> -> 0 `i `uc
]
[; ;main.c: 88: unsigned char pwmD2Flag = 0;
"89
[v _powerStep `uc ~T0 @X0 1 e ]
[i _powerStep
-> -> 0 `i `uc
]
[; ;main.c: 89: unsigned char powerStep = 0;
"90
[v _zfStep `uc ~T0 @X0 1 e ]
[i _zfStep
-> -> 0 `i `uc
]
[; ;main.c: 90: unsigned char zfStep = 0;
"91
[v _keyNum `uc ~T0 @X0 1 e ]
[i _keyNum
-> -> 0 `i `uc
]
[; ;main.c: 91: unsigned char keyNum = 0;
"92
[v _zdMotorFlag `uc ~T0 @X0 1 e ]
[i _zdMotorFlag
-> -> 0 `i `uc
]
[; ;main.c: 92: unsigned char zdMotorFlag = 0;
"93
[v _count40s `uc ~T0 @X0 1 e ]
[i _count40s
-> -> 0 `i `uc
]
[; ;main.c: 93: unsigned char count40s = 0;
[; ;main.c: 95: unsigned char ADC_Sample(unsigned char adch, unsigned char adldo);
[; ;main.c: 96: void DelayXms(unsigned char x);
[; ;main.c: 97: unsigned char ADC_Result(unsigned char adch);
[; ;main.c: 98: void Init_System();
[; ;main.c: 99: void AD_Init();
[; ;main.c: 100: void Sleep_Mode();
[; ;main.c: 101: void pwmD2Init();
[; ;main.c: 102: void pwmD2Stop();
[; ;main.c: 103: void pwmD3Init();
[; ;main.c: 104: void pwmD3Stop();
[; ;main.c: 105: void chrgPwmInit();
[; ;main.c: 106: void chrgPwmStop();
[; ;main.c: 107: void chrgCtr();
[; ;main.c: 108: void checkOutA();
[; ;main.c: 109: void checkBatAD();
[; ;main.c: 110: void keyCtr();
[; ;main.c: 111: void workCtr();
[; ;main.c: 112: void ledCtr();
[; ;main.c: 113: char keyRead(char keyStatus);
[; ;main.c: 114: void checkKeyAD();
[v $root$_Isr_Timer `(v ~T0 @X0 0 e ]
[v F574 `(v ~T0 @X0 1 tf ]
"129
[v _Isr_Timer `IF574 ~T0 @X0 1 e ]
"130
{
[; ;main.c: 129: void interrupt Isr_Timer()
[; ;main.c: 130: {
[e :U _Isr_Timer ]
[f ]
[; ;main.c: 131: if(TMR2IF)
"131
[e $ ! _TMR2IF 2  ]
[; ;main.c: 132: {
"132
{
[; ;main.c: 133: TMR2IF = 0;
"133
[e = _TMR2IF -> -> 0 `i `b ]
[; ;main.c: 134: if(++intCount >= 160)
"134
[e $ ! >= -> =+ _intCount -> -> 1 `i `uc `i -> 160 `i 3  ]
[; ;main.c: 135: {
"135
{
[; ;main.c: 136: intCount = 0;
"136
[e = _intCount -> -> 0 `i `uc ]
[; ;main.c: 137: IntFlag = 1;
"137
[e = _IntFlag -> -> 1 `i `uc ]
[; ;main.c: 138: if(++count1s >= 100)
"138
[e $ ! >= -> =+ _count1s -> -> 1 `i `uc `i -> 100 `i 4  ]
[; ;main.c: 139: {
"139
{
[; ;main.c: 140: count1s = 0;
"140
[e = _count1s -> -> 0 `i `uc ]
[; ;main.c: 141: count40s++;
"141
[e ++ _count40s -> -> 1 `i `uc ]
"142
}
[e :U 4 ]
"143
}
[e :U 3 ]
[; ;main.c: 142: }
[; ;main.c: 143: }
[; ;main.c: 144: intCount10++;
"144
[e ++ _intCount10 -> -> 1 `i `uc ]
"145
}
[e :U 2 ]
[; ;main.c: 145: }
[; ;main.c: 147: }
"147
[e :UE 1 ]
}
[v $root$_main `(v ~T0 @X0 0 e ]
"153
[v _main `(v ~T0 @X0 1 ef ]
"154
{
[; ;main.c: 153: void main()
[; ;main.c: 154: {
[e :U _main ]
[f ]
[; ;main.c: 155: Init_System();
"155
[e ( _Init_System ..  ]
[; ;main.c: 156: AD_Init();
"156
[e ( _AD_Init ..  ]
[; ;main.c: 157: firstTime = 100;
"157
[e = _firstTime -> -> 100 `i `uc ]
[; ;main.c: 158: while (1)
"158
[e :U 7 ]
[; ;main.c: 159: {
"159
{
[; ;main.c: 160: asm("clrwdt");
"160
[; <" clrwdt ;# ">
[; ;main.c: 161: if(intCount10 > 10)
"161
[e $ ! > -> _intCount10 `i -> 10 `i 9  ]
[; ;main.c: 162: {
"162
{
[; ;main.c: 163: intCount10 = 0;
"163
[e = _intCount10 -> -> 0 `i `uc ]
[; ;main.c: 164: checkOutA();
"164
[e ( _checkOutA ..  ]
"165
}
[e :U 9 ]
[; ;main.c: 165: }
[; ;main.c: 166: if(!IntFlag)
"166
[e $ ! ! != -> _IntFlag `i -> -> -> 0 `i `uc `i 10  ]
[; ;main.c: 167: continue;
"167
[e $U 6  ]
[e :U 10 ]
[; ;main.c: 168: IntFlag = 0;
"168
[e = _IntFlag -> -> 0 `i `uc ]
[; ;main.c: 169: chrgCtr();
"169
[e ( _chrgCtr ..  ]
[; ;main.c: 170: checkBatAD();
"170
[e ( _checkBatAD ..  ]
[; ;main.c: 171: if(chrgFlag == 0 && lowBatFlag == 0 && firstTime == 0)
"171
[e $ ! && && == -> _chrgFlag `i -> 0 `i == -> _lowBatFlag `i -> 0 `i == -> _firstTime `i -> 0 `i 11  ]
[; ;main.c: 172: {
"172
{
[; ;main.c: 173: keyCtr();
"173
[e ( _keyCtr ..  ]
"174
}
[e :U 11 ]
[; ;main.c: 174: }
[; ;main.c: 175: workCtr();
"175
[e ( _workCtr ..  ]
[; ;main.c: 176: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && showBatTime == 0 && overWorkTime == 0)
"176
[e $ ! && && && && && == -> _chrgFlag `i -> 0 `i == -> _workStep `i -> 0 `i == -> _keyCount `i -> 0 `i == -> _firstTime `i -> 0 `i == -> _showBatTime `i -> 0 `i == _overWorkTime -> -> 0 `i `ui 12  ]
[; ;main.c: 177: {
"177
{
[; ;main.c: 178: shiweiNum = geweiNum = 0;
"178
[e = _shiweiNum = _geweiNum -> -> 0 `i `uc ]
[; ;main.c: 179: if(++sleepTime >= 200)
"179
[e $ ! >= -> =+ _sleepTime -> -> 1 `i `uc `i -> 200 `i 13  ]
[; ;main.c: 180: {
"180
{
[; ;main.c: 181: sleepTime = 0;
"181
[e = _sleepTime -> -> 0 `i `uc ]
[; ;main.c: 182: Sleep_Mode();
"182
[e ( _Sleep_Mode ..  ]
"183
}
[e :U 13 ]
"184
}
[; ;main.c: 183: }
[; ;main.c: 184: }
[e $U 14  ]
"185
[e :U 12 ]
[; ;main.c: 185: else
[; ;main.c: 186: {
"186
{
[; ;main.c: 187: sleepTime = 0;
"187
[e = _sleepTime -> -> 0 `i `uc ]
"188
}
[e :U 14 ]
"189
}
[e :U 6 ]
"158
[e $U 7  ]
[e :U 8 ]
[; ;main.c: 188: }
[; ;main.c: 189: }
[; ;main.c: 190: }
"190
[e :UE 5 ]
}
"193
[v _chrgCtr `(v ~T0 @X0 1 ef ]
"194
{
[; ;main.c: 193: void chrgCtr()
[; ;main.c: 194: {
[e :U _chrgCtr ]
[f ]
[; ;main.c: 195: if(PORTB & 0x04)
"195
[e $ ! != & -> _PORTB `i -> 4 `i -> 0 `i 16  ]
[; ;main.c: 196: {
"196
{
[; ;main.c: 197: if(chrgFlag == 0)
"197
[e $ ! == -> _chrgFlag `i -> 0 `i 17  ]
[; ;main.c: 198: {
"198
{
[; ;main.c: 199: chrgFlag = 1;
"199
[e = _chrgFlag -> -> 1 `i `uc ]
[; ;main.c: 200: chrgMaxDuty = 0;
"200
[e = _chrgMaxDuty -> -> 0 `i `uc ]
[; ;main.c: 201: chrgPwmStop();
"201
[e ( _chrgPwmStop ..  ]
"202
}
[e :U 17 ]
[; ;main.c: 202: }
[; ;main.c: 203: pwmD2Stop();
"203
[e ( _pwmD2Stop ..  ]
[; ;main.c: 204: pwmD3Stop();
"204
[e ( _pwmD3Stop ..  ]
[; ;main.c: 205: powerStep = 0;
"205
[e = _powerStep -> -> 0 `i `uc ]
[; ;main.c: 206: workStep = 0;
"206
[e = _workStep -> -> 0 `i `uc ]
[; ;main.c: 207: lowBatFlag = 0;
"207
[e = _lowBatFlag -> -> 0 `i `uc ]
[; ;main.c: 208: if(prePwStep < pwStep)
"208
[e $ ! < -> _prePwStep `i -> _pwStep `i 18  ]
[; ;main.c: 209: {
"209
{
[; ;main.c: 210: if(++count50s > 3000)
"210
[e $ ! > =+ _count50s -> -> 1 `i `ui -> -> 3000 `i `ui 19  ]
[; ;main.c: 211: {
"211
{
[; ;main.c: 212: count50s = 0;
"212
[e = _count50s -> -> 0 `i `ui ]
[; ;main.c: 213: prePwStep++;
"213
[e ++ _prePwStep -> -> 1 `i `uc ]
"214
}
[e :U 19 ]
"215
}
[; ;main.c: 214: }
[; ;main.c: 215: }
[e $U 20  ]
"216
[e :U 18 ]
[; ;main.c: 216: else
[; ;main.c: 217: {
"217
{
[; ;main.c: 218: count50s = 0;
"218
[e = _count50s -> -> 0 `i `ui ]
"219
}
[e :U 20 ]
[; ;main.c: 219: }
[; ;main.c: 220: if(protectFlag)
"220
[e $ ! != -> _protectFlag `i -> -> -> 0 `i `uc `i 21  ]
[; ;main.c: 221: {
"221
{
[; ;main.c: 222: chrgPwmStop();
"222
[e ( _chrgPwmStop ..  ]
[; ;main.c: 223: if(prePwStep < 99 && protectFlag == 1)
"223
[e $ ! && < -> _prePwStep `i -> 99 `i == -> _protectFlag `i -> 1 `i 22  ]
[; ;main.c: 224: {
"224
{
[; ;main.c: 225: if(++reChrgCount > 250)
"225
[e $ ! > -> =+ _reChrgCount -> -> 1 `i `uc `i -> 250 `i 23  ]
[; ;main.c: 226: {
"226
{
[; ;main.c: 227: reChrgCount = 0;
"227
[e = _reChrgCount -> -> 0 `i `uc ]
[; ;main.c: 228: chrgFullFlag = 0;
"228
[e = _chrgFullFlag -> -> 0 `i `uc ]
[; ;main.c: 229: protectFlag = 0;
"229
[e = _protectFlag -> -> 0 `i `uc ]
"230
}
[e :U 23 ]
"231
}
[; ;main.c: 230: }
[; ;main.c: 231: }
[e $U 24  ]
"232
[e :U 22 ]
[; ;main.c: 232: else
[; ;main.c: 233: {
"233
{
[; ;main.c: 234: reChrgCount = 0;
"234
[e = _reChrgCount -> -> 0 `i `uc ]
"235
}
[e :U 24 ]
[; ;main.c: 235: }
[; ;main.c: 236: return;
"236
[e $UE 15  ]
"237
}
[e :U 21 ]
[; ;main.c: 237: }
[; ;main.c: 238: if(batADValue < 1118)
"238
[e $ ! < _batADValue -> -> 1118 `i `ui 25  ]
[; ;main.c: 239: {
"239
{
[; ;main.c: 240: chrgMode = 0;
"240
[e = _chrgMode -> -> 0 `i `uc ]
[; ;main.c: 241: chrgMaxAD = 15;
"241
[e = _chrgMaxAD -> -> 15 `i `uc ]
"242
}
[; ;main.c: 242: }
[e $U 26  ]
"243
[e :U 25 ]
[; ;main.c: 243: else if(batADValue < 1530)
[e $ ! < _batADValue -> -> 1530 `i `ui 27  ]
[; ;main.c: 244: {
"244
{
[; ;main.c: 245: chrgMode = 1;
"245
[e = _chrgMode -> -> 1 `i `uc ]
[; ;main.c: 246: chrgMaxAD = 50;
"246
[e = _chrgMaxAD -> -> 50 `i `uc ]
[; ;main.c: 247: lockCount = 0;
"247
[e = _lockCount -> -> 0 `i `uc ]
"248
}
[; ;main.c: 248: }
[e $U 28  ]
"249
[e :U 27 ]
[; ;main.c: 249: else if(count1s == 0)
[e $ ! == -> _count1s `i -> 0 `i 29  ]
[; ;main.c: 250: {
"250
{
[; ;main.c: 251: if(++lockCount > 200)
"251
[e $ ! > -> =+ _lockCount -> -> 1 `i `uc `i -> 200 `i 30  ]
[; ;main.c: 252: {
"252
{
[; ;main.c: 253: lockCount = 0;
"253
[e = _lockCount -> -> 0 `i `uc ]
[; ;main.c: 254: chrgMode = 2;
"254
[e = _chrgMode -> -> 2 `i `uc ]
"255
}
[e :U 30 ]
[; ;main.c: 255: }
[; ;main.c: 257: chrgMaxAD = 50;
"257
[e = _chrgMaxAD -> -> 50 `i `uc ]
"258
}
[e :U 29 ]
"259
[e :U 28 ]
[e :U 26 ]
[; ;main.c: 258: }
[; ;main.c: 259: if(chrgMode == 2 && outADValue < 8)
[e $ ! && == -> _chrgMode `i -> 2 `i < _outADValue -> -> 8 `i `ui 31  ]
[; ;main.c: 260: {
"260
{
[; ;main.c: 261: if(++fullCount >= 200)
"261
[e $ ! >= =+ _fullCount -> -> 1 `i `ui -> -> 200 `i `ui 32  ]
[; ;main.c: 262: {
"262
{
[; ;main.c: 263: fullCount = 0;
"263
[e = _fullCount -> -> 0 `i `ui ]
[; ;main.c: 264: chrgFullFlag = 1;
"264
[e = _chrgFullFlag -> -> 1 `i `uc ]
"265
}
[e :U 32 ]
"266
}
[; ;main.c: 265: }
[; ;main.c: 266: }
[e $U 33  ]
"267
[e :U 31 ]
[; ;main.c: 267: else
[; ;main.c: 268: {
"268
{
[; ;main.c: 269: fullCount = 0;
"269
[e = _fullCount -> -> 0 `i `ui ]
"270
}
[e :U 33 ]
[; ;main.c: 270: }
[; ;main.c: 271: if(chrgFullFlag)
"271
[e $ ! != -> _chrgFullFlag `i -> -> -> 0 `i `uc `i 34  ]
[; ;main.c: 272: {
"272
{
[; ;main.c: 273: PORTB &= 0xFD;
"273
[e =& _PORTB -> -> 253 `i `uc ]
[; ;main.c: 274: PORTB |= 0x01;
"274
[e =| _PORTB -> -> 1 `i `uc ]
[; ;main.c: 275: chrgPwmStop();
"275
[e ( _chrgPwmStop ..  ]
"276
}
[; ;main.c: 276: }
[e $U 35  ]
"277
[e :U 34 ]
[; ;main.c: 277: else
[; ;main.c: 278: {
"278
{
[; ;main.c: 279: if(prePwStep >= 99)
"279
[e $ ! >= -> _prePwStep `i -> 99 `i 36  ]
[; ;main.c: 280: {
"280
{
[; ;main.c: 281: PORTB &= 0xFD;
"281
[e =& _PORTB -> -> 253 `i `uc ]
[; ;main.c: 282: PORTB |= 0x01;
"282
[e =| _PORTB -> -> 1 `i `uc ]
"283
}
[; ;main.c: 283: }
[e $U 37  ]
"284
[e :U 36 ]
[; ;main.c: 284: else
[; ;main.c: 285: {
"285
{
[; ;main.c: 286: PORTB &= 0xFE;
"286
[e =& _PORTB -> -> 254 `i `uc ]
[; ;main.c: 287: PORTB |= 0x02;
"287
[e =| _PORTB -> -> 2 `i `uc ]
"288
}
[e :U 37 ]
[; ;main.c: 288: }
[; ;main.c: 289: if(batADValue > 1550 || outADValue > (chrgMaxAD + 2))
"289
[e $ ! || > _batADValue -> -> 1550 `i `ui > _outADValue -> + -> _chrgMaxAD `i -> 2 `i `ui 38  ]
[; ;main.c: 290: {
"290
{
[; ;main.c: 291: if(++subTime > chrgWaitTime)
"291
[e $ ! > -> =+ _subTime -> -> 1 `i `uc `i -> _chrgWaitTime `i 39  ]
[; ;main.c: 292: {
"292
{
[; ;main.c: 293: if(chrgMaxDuty > 1)
"293
[e $ ! > -> _chrgMaxDuty `i -> 1 `i 40  ]
[; ;main.c: 294: {
"294
{
[; ;main.c: 295: chrgMaxDuty--;
"295
[e -- _chrgMaxDuty -> -> 1 `i `uc ]
"296
}
[e :U 40 ]
[; ;main.c: 296: }
[; ;main.c: 297: subTime = 0;
"297
[e = _subTime -> -> 0 `i `uc ]
[; ;main.c: 298: chrgWaitTime = 50;
"298
[e = _chrgWaitTime -> -> 50 `i `uc ]
"299
}
[e :U 39 ]
[; ;main.c: 299: }
[; ;main.c: 300: addTime = 0;
"300
[e = _addTime -> -> 0 `i `uc ]
"301
}
[; ;main.c: 301: }
[e $U 41  ]
"302
[e :U 38 ]
[; ;main.c: 302: else if(batADValue < 1550 && outADValue < (chrgMaxAD - 4))
[e $ ! && < _batADValue -> -> 1550 `i `ui < _outADValue -> - -> _chrgMaxAD `i -> 4 `i `ui 42  ]
[; ;main.c: 303: {
"303
{
[; ;main.c: 304: if(++addTime > chrgWaitTime)
"304
[e $ ! > -> =+ _addTime -> -> 1 `i `uc `i -> _chrgWaitTime `i 43  ]
[; ;main.c: 305: {
"305
{
[; ;main.c: 306: addTime = 0;
"306
[e = _addTime -> -> 0 `i `uc ]
[; ;main.c: 307: if(chrgMaxDuty < 75)
"307
[e $ ! < -> _chrgMaxDuty `i -> 75 `i 44  ]
[; ;main.c: 308: {
"308
{
[; ;main.c: 309: chrgMaxDuty++;
"309
[e ++ _chrgMaxDuty -> -> 1 `i `uc ]
"310
}
[e :U 44 ]
"311
}
[e :U 43 ]
[; ;main.c: 310: }
[; ;main.c: 311: }
[; ;main.c: 312: subTime = 0;
"312
[e = _subTime -> -> 0 `i `uc ]
"313
}
[e :U 42 ]
"315
[e :U 41 ]
[; ;main.c: 313: }
[; ;main.c: 315: if(chrgPwmFlag == 0)
[e $ ! == -> _chrgPwmFlag `i -> 0 `i 45  ]
[; ;main.c: 316: {
"316
{
[; ;main.c: 317: chrgPwmInit();
"317
[e ( _chrgPwmInit ..  ]
"318
}
[e :U 45 ]
[; ;main.c: 318: }
[; ;main.c: 319: PWMD23H = 0X00;
"319
[e = _PWMD23H -> -> 0 `i `uc ]
[; ;main.c: 320: PWMD3L = chrgMaxDuty;
"320
[e = _PWMD3L _chrgMaxDuty ]
"321
}
[e :U 35 ]
"322
}
[; ;main.c: 321: }
[; ;main.c: 322: }
[e $U 46  ]
"323
[e :U 16 ]
[; ;main.c: 323: else
[; ;main.c: 324: {
"324
{
[; ;main.c: 325: startChrgTime = 0;
"325
[e = _startChrgTime -> -> 0 `i `uc ]
[; ;main.c: 326: chrgFlag = 0;
"326
[e = _chrgFlag -> -> 0 `i `uc ]
[; ;main.c: 327: chrgFullFlag = 0;
"327
[e = _chrgFullFlag -> -> 0 `i `uc ]
[; ;main.c: 328: protectFlag = 0;
"328
[e = _protectFlag -> -> 0 `i `uc ]
[; ;main.c: 329: chrgMode = 0;
"329
[e = _chrgMode -> -> 0 `i `uc ]
[; ;main.c: 330: chrgMaxAD = 0;
"330
[e = _chrgMaxAD -> -> 0 `i `uc ]
[; ;main.c: 331: chrgMaxDuty = 0;
"331
[e = _chrgMaxDuty -> -> 0 `i `uc ]
[; ;main.c: 332: lockCount = 0;
"332
[e = _lockCount -> -> 0 `i `uc ]
[; ;main.c: 333: chrgWaitTime = 20;
"333
[e = _chrgWaitTime -> -> 20 `i `uc ]
[; ;main.c: 334: chrgPwmStop();
"334
[e ( _chrgPwmStop ..  ]
[; ;main.c: 335: if(prePwStep > 0 && prePwStep > pwStep)
"335
[e $ ! && > -> _prePwStep `i -> 0 `i > -> _prePwStep `i -> _pwStep `i 47  ]
[; ;main.c: 336: {
"336
{
[; ;main.c: 337: if(++count50s > 3000)
"337
[e $ ! > =+ _count50s -> -> 1 `i `ui -> -> 3000 `i `ui 48  ]
[; ;main.c: 338: {
"338
{
[; ;main.c: 339: count50s = 0;
"339
[e = _count50s -> -> 0 `i `ui ]
[; ;main.c: 340: prePwStep--;
"340
[e -- _prePwStep -> -> 1 `i `uc ]
"341
}
[e :U 48 ]
"342
}
[; ;main.c: 341: }
[; ;main.c: 342: }
[e $U 49  ]
"343
[e :U 47 ]
[; ;main.c: 343: else
[; ;main.c: 344: {
"344
{
[; ;main.c: 345: count50s = 0;
"345
[e = _count50s -> -> 0 `i `ui ]
"346
}
[e :U 49 ]
"347
}
[e :U 46 ]
[; ;main.c: 346: }
[; ;main.c: 347: }
[; ;main.c: 348: }
"348
[e :UE 15 ]
}
"352
[v _keyRead `(uc ~T0 @X0 1 ef1`uc ]
"353
{
[; ;main.c: 352: char keyRead(char keyStatus)
[; ;main.c: 353: {
[e :U _keyRead ]
"352
[v _keyStatus `uc ~T0 @X0 1 r1 ]
"353
[f ]
[; ;main.c: 354: if(keyStatus)
"354
[e $ ! != -> _keyStatus `i -> -> -> 0 `i `uc `i 51  ]
[; ;main.c: 355: {
"355
{
[; ;main.c: 356: keyCount++;
"356
[e ++ _keyCount -> -> 1 `i `uc ]
[; ;main.c: 357: if(keyCount >= 100)
"357
[e $ ! >= -> _keyCount `i -> 100 `i 52  ]
[; ;main.c: 358: {
"358
{
[; ;main.c: 359: keyCount = 100;
"359
[e = _keyCount -> -> 100 `i `uc ]
[; ;main.c: 360: if(!longPressFlag)
"360
[e $ ! ! != -> _longPressFlag `i -> -> -> 0 `i `uc `i 53  ]
[; ;main.c: 361: {
"361
{
[; ;main.c: 362: longPressFlag = 1;
"362
[e = _longPressFlag -> -> 1 `i `uc ]
[; ;main.c: 363: return 2;
"363
[e ) -> -> 2 `i `uc ]
[e $UE 50  ]
"364
}
[e :U 53 ]
"365
}
[e :U 52 ]
"366
}
[; ;main.c: 364: }
[; ;main.c: 365: }
[; ;main.c: 366: }
[e $U 54  ]
"367
[e :U 51 ]
[; ;main.c: 367: else
[; ;main.c: 368: {
"368
{
[; ;main.c: 369: if(keyCount >= 100)
"369
[e $ ! >= -> _keyCount `i -> 100 `i 55  ]
[; ;main.c: 370: {
"370
{
[; ;main.c: 371: keyCount = 0;
"371
[e = _keyCount -> -> 0 `i `uc ]
[; ;main.c: 372: longPressFlag = 0;
"372
[e = _longPressFlag -> -> 0 `i `uc ]
[; ;main.c: 373: return 0;
"373
[e ) -> -> 0 `i `uc ]
[e $UE 50  ]
"374
}
[; ;main.c: 374: }
[e $U 56  ]
"375
[e :U 55 ]
[; ;main.c: 375: else if(keyCount >= 6)
[e $ ! >= -> _keyCount `i -> 6 `i 57  ]
[; ;main.c: 376: {
"376
{
[; ;main.c: 377: keyCount = 0;
"377
[e = _keyCount -> -> 0 `i `uc ]
[; ;main.c: 378: return 1;
"378
[e ) -> -> 1 `i `uc ]
[e $UE 50  ]
"379
}
[e :U 57 ]
"380
[e :U 56 ]
[; ;main.c: 379: }
[; ;main.c: 380: keyCount = 0;
[e = _keyCount -> -> 0 `i `uc ]
"381
}
[e :U 54 ]
[; ;main.c: 381: }
[; ;main.c: 382: return 0;
"382
[e ) -> -> 0 `i `uc ]
[e $UE 50  ]
[; ;main.c: 383: }
"383
[e :UE 50 ]
}
"386
[v _keyRead2 `(uc ~T0 @X0 1 ef1`uc ]
"387
{
[; ;main.c: 386: char keyRead2(char keyStatus)
[; ;main.c: 387: {
[e :U _keyRead2 ]
"386
[v _keyStatus `uc ~T0 @X0 1 r1 ]
"387
[f ]
[; ;main.c: 388: if(keyStatus)
"388
[e $ ! != -> _keyStatus `i -> -> -> 0 `i `uc `i 59  ]
[; ;main.c: 389: {
"389
{
[; ;main.c: 390: keyCount2++;
"390
[e ++ _keyCount2 -> -> 1 `i `uc ]
[; ;main.c: 391: if(keyCount2 >= 100)
"391
[e $ ! >= -> _keyCount2 `i -> 100 `i 60  ]
[; ;main.c: 392: {
"392
{
[; ;main.c: 393: keyCount2 = 100;
"393
[e = _keyCount2 -> -> 100 `i `uc ]
"394
}
[e :U 60 ]
"395
}
[; ;main.c: 394: }
[; ;main.c: 395: }
[e $U 61  ]
"396
[e :U 59 ]
[; ;main.c: 396: else
[; ;main.c: 397: {
"397
{
[; ;main.c: 398: if(keyCount2 >= 5)
"398
[e $ ! >= -> _keyCount2 `i -> 5 `i 62  ]
[; ;main.c: 399: {
"399
{
[; ;main.c: 400: keyCount2 = 0;
"400
[e = _keyCount2 -> -> 0 `i `uc ]
[; ;main.c: 401: return 1;
"401
[e ) -> -> 1 `i `uc ]
[e $UE 58  ]
"402
}
[e :U 62 ]
[; ;main.c: 402: }
[; ;main.c: 403: keyCount2 = 0;
"403
[e = _keyCount2 -> -> 0 `i `uc ]
"404
}
[e :U 61 ]
[; ;main.c: 404: }
[; ;main.c: 405: return 0;
"405
[e ) -> -> 0 `i `uc ]
[e $UE 58  ]
[; ;main.c: 406: }
"406
[e :UE 58 ]
}
"408
[v _keyRead3 `(uc ~T0 @X0 1 ef1`uc ]
"409
{
[; ;main.c: 408: char keyRead3(char keyStatus)
[; ;main.c: 409: {
[e :U _keyRead3 ]
"408
[v _keyStatus `uc ~T0 @X0 1 r1 ]
"409
[f ]
[; ;main.c: 410: if(keyStatus)
"410
[e $ ! != -> _keyStatus `i -> -> -> 0 `i `uc `i 64  ]
[; ;main.c: 411: {
"411
{
[; ;main.c: 412: checkKeyAD();
"412
[e ( _checkKeyAD ..  ]
[; ;main.c: 413: keyCount3++;
"413
[e ++ _keyCount3 -> -> 1 `i `uc ]
[; ;main.c: 414: if(keyCount3 >= 100)
"414
[e $ ! >= -> _keyCount3 `i -> 100 `i 65  ]
[; ;main.c: 415: {
"415
{
[; ;main.c: 416: keyCount3 = 100;
"416
[e = _keyCount3 -> -> 100 `i `uc ]
"417
}
[e :U 65 ]
"418
}
[; ;main.c: 417: }
[; ;main.c: 418: }
[e $U 66  ]
"419
[e :U 64 ]
[; ;main.c: 419: else
[; ;main.c: 420: {
"420
{
[; ;main.c: 422: if(keyCount3 >= 5)
"422
[e $ ! >= -> _keyCount3 `i -> 5 `i 67  ]
[; ;main.c: 423: {
"423
{
[; ;main.c: 424: keyCount3 = 0;
"424
[e = _keyCount3 -> -> 0 `i `uc ]
[; ;main.c: 425: return 1;
"425
[e ) -> -> 1 `i `uc ]
[e $UE 63  ]
"426
}
[e :U 67 ]
[; ;main.c: 426: }
[; ;main.c: 427: keyCount3 = 0;
"427
[e = _keyCount3 -> -> 0 `i `uc ]
"428
}
[e :U 66 ]
[; ;main.c: 428: }
[; ;main.c: 429: return 0;
"429
[e ) -> -> 0 `i `uc ]
[e $UE 63  ]
[; ;main.c: 430: }
"430
[e :UE 63 ]
}
"432
[v _keyCtr `(v ~T0 @X0 1 ef ]
"433
{
[; ;main.c: 432: void keyCtr()
[; ;main.c: 433: {
[e :U _keyCtr ]
[f ]
"434
[v _kclick `uc ~T0 @X0 1 a ]
[; ;main.c: 434: char kclick = keyRead(0x80 & (~PORTB));
[e = _kclick ( _keyRead (1 -> & -> 128 `i ~ -> _PORTB `i `uc ]
[; ;main.c: 435: if(kclick == 2)
"435
[e $ ! == -> _kclick `i -> 2 `i 69  ]
[; ;main.c: 436: {
"436
{
[; ;main.c: 437: if(powerStep > 0)
"437
[e $ ! > -> _powerStep `i -> 0 `i 70  ]
[; ;main.c: 438: {
"438
{
[; ;main.c: 439: powerStep = 0;
"439
[e = _powerStep -> -> 0 `i `uc ]
"440
}
[; ;main.c: 440: }
[e $U 71  ]
"441
[e :U 70 ]
[; ;main.c: 441: else
[; ;main.c: 442: {
"442
{
[; ;main.c: 443: powerStep = 1;
"443
[e = _powerStep -> -> 1 `i `uc ]
[; ;main.c: 444: zfStep = 0;
"444
[e = _zfStep -> -> 0 `i `uc ]
[; ;main.c: 445: count40s = 0;
"445
[e = _count40s -> -> 0 `i `uc ]
[; ;main.c: 446: workStep = 1;
"446
[e = _workStep -> -> 1 `i `uc ]
[; ;main.c: 447: startTime = 50;
"447
[e = _startTime -> -> 50 `i `uc ]
[; ;main.c: 448: showBatTime = 0;
"448
[e = _showBatTime -> -> 0 `i `uc ]
[; ;main.c: 449: overWorkTime = 0;
"449
[e = _overWorkTime -> -> 0 `i `ui ]
"450
}
[e :U 71 ]
"451
}
[e :U 69 ]
[; ;main.c: 450: }
[; ;main.c: 451: }
[; ;main.c: 452: kclick = keyRead2(0x20 & (~PORTA));
"452
[e = _kclick ( _keyRead2 (1 -> & -> 32 `i ~ -> _PORTA `i `uc ]
[; ;main.c: 453: if(kclick == 1 && powerStep > 0)
"453
[e $ ! && == -> _kclick `i -> 1 `i > -> _powerStep `i -> 0 `i 72  ]
[; ;main.c: 454: {
"454
{
[; ;main.c: 455: startTime = 50;
"455
[e = _startTime -> -> 50 `i `uc ]
[; ;main.c: 456: count40s = 0;
"456
[e = _count40s -> -> 0 `i `uc ]
[; ;main.c: 457: if(++zfStep > 2)
"457
[e $ ! > -> =+ _zfStep -> -> 1 `i `uc `i -> 2 `i 73  ]
[; ;main.c: 458: {
"458
{
[; ;main.c: 459: zfStep = 0;
"459
[e = _zfStep -> -> 0 `i `uc ]
"460
}
[e :U 73 ]
"461
}
[e :U 72 ]
[; ;main.c: 460: }
[; ;main.c: 461: }
[; ;main.c: 462: kclick = keyRead3(0x10 & (~PORTA));
"462
[e = _kclick ( _keyRead3 (1 -> & -> 16 `i ~ -> _PORTA `i `uc ]
[; ;main.c: 463: if(kclick == 1 && powerStep > 0)
"463
[e $ ! && == -> _kclick `i -> 1 `i > -> _powerStep `i -> 0 `i 74  ]
[; ;main.c: 464: {
"464
{
[; ;main.c: 465: if(keyNum == 1)
"465
[e $ ! == -> _keyNum `i -> 1 `i 75  ]
[; ;main.c: 466: {
"466
{
[; ;main.c: 467: if(zdMotorFlag > 0)
"467
[e $ ! > -> _zdMotorFlag `i -> 0 `i 76  ]
[; ;main.c: 468: {
"468
{
[; ;main.c: 469: zdMotorFlag = 0;
"469
[e = _zdMotorFlag -> -> 0 `i `uc ]
"470
}
[; ;main.c: 470: }
[e $U 77  ]
"471
[e :U 76 ]
[; ;main.c: 471: else
[; ;main.c: 472: {
"472
{
[; ;main.c: 473: zdMotorFlag = 1;
"473
[e = _zdMotorFlag -> -> 1 `i `uc ]
"474
}
[e :U 77 ]
"475
}
[; ;main.c: 474: }
[; ;main.c: 475: }
[e $U 78  ]
"476
[e :U 75 ]
[; ;main.c: 476: else if(keyNum == 2)
[e $ ! == -> _keyNum `i -> 2 `i 79  ]
[; ;main.c: 477: {
"477
{
[; ;main.c: 478: if(++workStep > 2)
"478
[e $ ! > -> =+ _workStep -> -> 1 `i `uc `i -> 2 `i 80  ]
[; ;main.c: 479: {
"479
{
[; ;main.c: 480: workStep = 1;
"480
[e = _workStep -> -> 1 `i `uc ]
"481
}
[e :U 80 ]
"482
}
[e :U 79 ]
"483
[e :U 78 ]
}
[e :U 74 ]
[; ;main.c: 481: }
[; ;main.c: 482: }
[; ;main.c: 483: }
[; ;main.c: 484: }
"484
[e :UE 68 ]
}
"486
[v _workCtr `(v ~T0 @X0 1 ef ]
"487
{
[; ;main.c: 486: void workCtr()
[; ;main.c: 487: {
[e :U _workCtr ]
[f ]
[; ;main.c: 488: if(firstTime > 0)
"488
[e $ ! > -> _firstTime `i -> 0 `i 82  ]
[; ;main.c: 489: {
"489
{
[; ;main.c: 490: firstTime--;
"490
[e -- _firstTime -> -> 1 `i `uc ]
[; ;main.c: 491: if(pwStep > prePwStep)
"491
[e $ ! > -> _pwStep `i -> _prePwStep `i 83  ]
[; ;main.c: 492: {
"492
{
[; ;main.c: 493: prePwStep = pwStep;
"493
[e = _prePwStep _pwStep ]
"494
}
[e :U 83 ]
"495
}
[e :U 82 ]
[; ;main.c: 494: }
[; ;main.c: 495: }
[; ;main.c: 496: if(startTime > 0)
"496
[e $ ! > -> _startTime `i -> 0 `i 84  ]
[; ;main.c: 497: {
"497
{
[; ;main.c: 498: startTime--;
"498
[e -- _startTime -> -> 1 `i `uc ]
"499
}
[e :U 84 ]
[; ;main.c: 499: }
[; ;main.c: 500: if(powerStep > 0)
"500
[e $ ! > -> _powerStep `i -> 0 `i 85  ]
[; ;main.c: 501: {
"501
{
[; ;main.c: 502: PORTB |= 0x41;
"502
[e =| _PORTB -> -> 65 `i `uc ]
[; ;main.c: 503: PORTB &= 0xFD;
"503
[e =& _PORTB -> -> 253 `i `uc ]
[; ;main.c: 504: if(zdMotorFlag)
"504
[e $ ! != -> _zdMotorFlag `i -> -> -> 0 `i `uc `i 86  ]
[; ;main.c: 505: {
"505
{
[; ;main.c: 506: PORTB |= 0x20;
"506
[e =| _PORTB -> -> 32 `i `uc ]
"507
}
[; ;main.c: 507: }
[e $U 87  ]
"508
[e :U 86 ]
[; ;main.c: 508: else
[; ;main.c: 509: {
"509
{
[; ;main.c: 510: PORTB &= 0xDF;
"510
[e =& _PORTB -> -> 223 `i `uc ]
"511
}
[e :U 87 ]
"512
}
[; ;main.c: 511: }
[; ;main.c: 512: }
[e $U 88  ]
"513
[e :U 85 ]
[; ;main.c: 513: else
[; ;main.c: 514: {
"514
{
[; ;main.c: 515: zdMotorFlag = 0;
"515
[e = _zdMotorFlag -> -> 0 `i `uc ]
[; ;main.c: 516: PORTB &= 0x9F;
"516
[e =& _PORTB -> -> 159 `i `uc ]
[; ;main.c: 517: if(chrgFlag == 0)
"517
[e $ ! == -> _chrgFlag `i -> 0 `i 89  ]
[; ;main.c: 518: {
"518
{
[; ;main.c: 519: PORTB |= 0x03;
"519
[e =| _PORTB -> -> 3 `i `uc ]
"520
}
[e :U 89 ]
"521
}
[e :U 88 ]
[; ;main.c: 520: }
[; ;main.c: 521: }
[; ;main.c: 522: if(powerStep > 0 && startTime == 0)
"522
[e $ ! && > -> _powerStep `i -> 0 `i == -> _startTime `i -> 0 `i 90  ]
[; ;main.c: 523: {
"523
{
[; ;main.c: 524: if(zfStep == 0)
"524
[e $ ! == -> _zfStep `i -> 0 `i 91  ]
[; ;main.c: 525: {
"525
{
[; ;main.c: 526: if(count40s == 20 && count1s == 0)
"526
[e $ ! && == -> _count40s `i -> 20 `i == -> _count1s `i -> 0 `i 92  ]
[; ;main.c: 527: {
"527
{
[; ;main.c: 528: startTime = 50;
"528
[e = _startTime -> -> 50 `i `uc ]
"529
}
[e :U 92 ]
[; ;main.c: 529: }
[; ;main.c: 530: if(count40s >= 40)
"530
[e $ ! >= -> _count40s `i -> 40 `i 93  ]
[; ;main.c: 531: {
"531
{
[; ;main.c: 532: count40s = 0;
"532
[e = _count40s -> -> 0 `i `uc ]
[; ;main.c: 533: startTime = 50;
"533
[e = _startTime -> -> 50 `i `uc ]
"534
}
[e :U 93 ]
[; ;main.c: 534: }
[; ;main.c: 535: if(count40s < 20)
"535
[e $ ! < -> _count40s `i -> 20 `i 94  ]
[; ;main.c: 536: {
"536
{
[; ;main.c: 537: if(pwmD2Flag == 0)
"537
[e $ ! == -> _pwmD2Flag `i -> 0 `i 95  ]
[; ;main.c: 538: {
"538
{
[; ;main.c: 539: pwmD2Init();
"539
[e ( _pwmD2Init ..  ]
"540
}
[e :U 95 ]
[; ;main.c: 540: }
[; ;main.c: 541: PWMD23H = 0;
"541
[e = _PWMD23H -> -> 0 `i `uc ]
[; ;main.c: 542: PWMD2L = 55 + (workStep*15);
"542
[e = _PWMD2L -> + -> 55 `i * -> _workStep `i -> 15 `i `uc ]
"543
}
[; ;main.c: 543: }
[e $U 96  ]
"544
[e :U 94 ]
[; ;main.c: 544: else
[; ;main.c: 545: {
"545
{
[; ;main.c: 546: if(pwmD3Flag == 0)
"546
[e $ ! == -> _pwmD3Flag `i -> 0 `i 97  ]
[; ;main.c: 547: {
"547
{
[; ;main.c: 548: pwmD3Init();
"548
[e ( _pwmD3Init ..  ]
"549
}
[e :U 97 ]
[; ;main.c: 549: }
[; ;main.c: 550: PWMD23H = 0;
"550
[e = _PWMD23H -> -> 0 `i `uc ]
[; ;main.c: 551: PWMD3L = 55 + (workStep*15);
"551
[e = _PWMD3L -> + -> 55 `i * -> _workStep `i -> 15 `i `uc ]
"552
}
[e :U 96 ]
"554
}
[; ;main.c: 552: }
[; ;main.c: 554: }
[e $U 98  ]
"555
[e :U 91 ]
[; ;main.c: 555: else if(zfStep == 2)
[e $ ! == -> _zfStep `i -> 2 `i 99  ]
[; ;main.c: 556: {
"556
{
[; ;main.c: 557: if(pwmD3Flag == 0)
"557
[e $ ! == -> _pwmD3Flag `i -> 0 `i 100  ]
[; ;main.c: 558: {
"558
{
[; ;main.c: 559: pwmD3Init();
"559
[e ( _pwmD3Init ..  ]
"560
}
[e :U 100 ]
[; ;main.c: 560: }
[; ;main.c: 561: PWMD23H = 0;
"561
[e = _PWMD23H -> -> 0 `i `uc ]
[; ;main.c: 562: PWMD3L = 55 + (workStep*15);
"562
[e = _PWMD3L -> + -> 55 `i * -> _workStep `i -> 15 `i `uc ]
"563
}
[; ;main.c: 563: }
[e $U 101  ]
"564
[e :U 99 ]
[; ;main.c: 564: else if(zfStep == 1)
[e $ ! == -> _zfStep `i -> 1 `i 102  ]
[; ;main.c: 565: {
"565
{
[; ;main.c: 566: if(pwmD2Flag == 0)
"566
[e $ ! == -> _pwmD2Flag `i -> 0 `i 103  ]
[; ;main.c: 567: {
"567
{
[; ;main.c: 568: pwmD2Init();
"568
[e ( _pwmD2Init ..  ]
"569
}
[e :U 103 ]
[; ;main.c: 569: }
[; ;main.c: 570: PWMD23H = 0;
"570
[e = _PWMD23H -> -> 0 `i `uc ]
[; ;main.c: 571: PWMD2L = 55 + (workStep*15);
"571
[e = _PWMD2L -> + -> 55 `i * -> _workStep `i -> 15 `i `uc ]
"572
}
[e :U 102 ]
"573
[e :U 101 ]
[e :U 98 ]
}
[; ;main.c: 572: }
[; ;main.c: 573: }
[e $U 104  ]
"574
[e :U 90 ]
[; ;main.c: 574: else
[; ;main.c: 575: {
"575
{
[; ;main.c: 576: pwmD3Stop();
"576
[e ( _pwmD3Stop ..  ]
[; ;main.c: 577: pwmD2Stop();
"577
[e ( _pwmD2Stop ..  ]
"578
}
[e :U 104 ]
[; ;main.c: 578: }
[; ;main.c: 580: }
"580
[e :UE 81 ]
}
"582
[v _checkKeyAD `(v ~T0 @X0 1 ef ]
"583
{
[; ;main.c: 582: void checkKeyAD()
[; ;main.c: 583: {
[e :U _checkKeyAD ]
[f ]
[; ;main.c: 584: test_adc = ADC_Sample(4, 5);
"584
[e = _test_adc ( _ADC_Sample (2 , -> -> 4 `i `uc -> -> 5 `i `uc ]
[; ;main.c: 585: if (0xA5 == test_adc)
"585
[e $ ! == -> 165 `i -> _test_adc `i 106  ]
[; ;main.c: 586: {
"586
{
[; ;main.c: 587: if(adresult < 400)
"587
[e $ ! < _adresult -> -> 400 `i `ui 107  ]
[; ;main.c: 588: {
"588
{
[; ;main.c: 589: keyNum = 1;
"589
[e = _keyNum -> -> 1 `i `uc ]
"590
}
[; ;main.c: 590: }
[e $U 108  ]
"591
[e :U 107 ]
[; ;main.c: 591: else
[; ;main.c: 592: {
"592
{
[; ;main.c: 593: keyNum = 2;
"593
[e = _keyNum -> -> 2 `i `uc ]
"594
}
[e :U 108 ]
"595
}
[; ;main.c: 594: }
[; ;main.c: 595: }
[e $U 109  ]
"596
[e :U 106 ]
[; ;main.c: 596: else
[; ;main.c: 597: {
"597
{
[; ;main.c: 598: ADCON0 = 0;
"598
[e = _ADCON0 -> -> 0 `i `uc ]
[; ;main.c: 599: ADCON1 = 0;
"599
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 600: _delay((unsigned long)((100)*(16000000/4000000.0)));
"600
[e ( __delay (1 -> * -> -> 100 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
"601
}
[e :U 109 ]
[; ;main.c: 601: }
[; ;main.c: 603: }
"603
[e :UE 105 ]
}
"606
[v _checkOutA `(v ~T0 @X0 1 ef ]
"607
{
[; ;main.c: 606: void checkOutA()
[; ;main.c: 607: {
[e :U _checkOutA ]
[f ]
[; ;main.c: 608: test_adc = ADC_Sample(0, 5);
"608
[e = _test_adc ( _ADC_Sample (2 , -> -> 0 `i `uc -> -> 5 `i `uc ]
[; ;main.c: 609: if (0xA5 == test_adc)
"609
[e $ ! == -> 165 `i -> _test_adc `i 111  ]
[; ;main.c: 610: {
"610
{
[; ;main.c: 611: if(chrgFlag && adresult > 210)
"611
[e $ ! && != -> _chrgFlag `i -> -> -> 0 `i `uc `i > _adresult -> -> 210 `i `ui 112  ]
[; ;main.c: 612: {
"612
{
[; ;main.c: 613: if(++overChrgTime > 10)
"613
[e $ ! > -> =+ _overChrgTime -> -> 1 `i `uc `i -> 10 `i 113  ]
[; ;main.c: 614: {
"614
{
[; ;main.c: 615: overChrgTime = 0;
"615
[e = _overChrgTime -> -> 0 `i `uc ]
[; ;main.c: 616: protectFlag = 2;
"616
[e = _protectFlag -> -> 2 `i `uc ]
"617
}
[e :U 113 ]
"619
}
[; ;main.c: 617: }
[; ;main.c: 619: }
[e $U 114  ]
"620
[e :U 112 ]
[; ;main.c: 620: else
[; ;main.c: 621: {
"621
{
[; ;main.c: 622: overChrgTime = 0;
"622
[e = _overChrgTime -> -> 0 `i `uc ]
"623
}
[e :U 114 ]
[; ;main.c: 623: }
[; ;main.c: 624: outADValue = adresult;
"624
[e = _outADValue _adresult ]
"626
}
[; ;main.c: 626: }
[e $U 115  ]
"627
[e :U 111 ]
[; ;main.c: 627: else
[; ;main.c: 628: {
"628
{
[; ;main.c: 629: ADCON0 = 0;
"629
[e = _ADCON0 -> -> 0 `i `uc ]
[; ;main.c: 630: ADCON1 = 0;
"630
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 631: _delay((unsigned long)((100)*(16000000/4000000.0)));
"631
[e ( __delay (1 -> * -> -> 100 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
"632
}
[e :U 115 ]
[; ;main.c: 632: }
[; ;main.c: 633: }
"633
[e :UE 110 ]
}
"635
[v _checkBatAD `(v ~T0 @X0 1 ef ]
"636
{
[; ;main.c: 635: void checkBatAD()
[; ;main.c: 636: {
[e :U _checkBatAD ]
[f ]
[; ;main.c: 637: test_adc = ADC_Sample(1, 5);
"637
[e = _test_adc ( _ADC_Sample (2 , -> -> 1 `i `uc -> -> 5 `i `uc ]
[; ;main.c: 638: if (0xA5 == test_adc)
"638
[e $ ! == -> 165 `i -> _test_adc `i 117  ]
[; ;main.c: 639: {
"639
{
[; ;main.c: 640: batADValue = adresult;
"640
[e = _batADValue _adresult ]
[; ;main.c: 641: if(batADValue < 1117)
"641
[e $ ! < _batADValue -> -> 1117 `i `ui 118  ]
[; ;main.c: 642: {
"642
{
[; ;main.c: 643: pwStep = 0;
"643
[e = _pwStep -> -> 0 `i `uc ]
[; ;main.c: 644: if(++count8s > 800)
"644
[e $ ! > =+ _count8s -> -> 1 `i `ui -> -> 800 `i `ui 119  ]
[; ;main.c: 645: {
"645
{
[; ;main.c: 646: count8s = 0;
"646
[e = _count8s -> -> 0 `i `ui ]
[; ;main.c: 647: lowBatFlag = 1;
"647
[e = _lowBatFlag -> -> 1 `i `uc ]
[; ;main.c: 648: prePwStep = 0;
"648
[e = _prePwStep -> -> 0 `i `uc ]
[; ;main.c: 649: workStep = 0;
"649
[e = _workStep -> -> 0 `i `uc ]
[; ;main.c: 650: powerStep = 0;
"650
[e = _powerStep -> -> 0 `i `uc ]
"651
}
[e :U 119 ]
"652
}
[; ;main.c: 651: }
[; ;main.c: 652: }
[e $U 120  ]
"653
[e :U 118 ]
[; ;main.c: 653: else
[; ;main.c: 654: {
"654
{
[; ;main.c: 655: count8s = 0;
"655
[e = _count8s -> -> 0 `i `ui ]
[; ;main.c: 656: if(batADValue >= 1340)
"656
[e $ ! >= _batADValue -> -> 1340 `i `ui 121  ]
[; ;main.c: 657: {
"657
{
[; ;main.c: 658: pwStep = ((batADValue - 1340) /2) + 13;
"658
[e = _pwStep -> + / - _batADValue -> -> 1340 `i `ui -> -> 2 `i `ui -> -> 13 `i `ui `uc ]
"659
}
[; ;main.c: 659: }
[e $U 122  ]
"660
[e :U 121 ]
[; ;main.c: 660: else
[; ;main.c: 661: {
"661
{
[; ;main.c: 662: pwStep = (batADValue - 1117) / 16;
"662
[e = _pwStep -> / - _batADValue -> -> 1117 `i `ui -> -> 16 `i `ui `uc ]
"663
}
[e :U 122 ]
[; ;main.c: 663: }
[; ;main.c: 664: if(pwStep > 99)
"664
[e $ ! > -> _pwStep `i -> 99 `i 123  ]
[; ;main.c: 665: {
"665
{
[; ;main.c: 666: pwStep = 99;
"666
[e = _pwStep -> -> 99 `i `uc ]
"667
}
[e :U 123 ]
"668
}
[e :U 120 ]
[; ;main.c: 667: }
[; ;main.c: 668: }
[; ;main.c: 669: if(chrgFlag && batADValue > 1861)
"669
[e $ ! && != -> _chrgFlag `i -> -> -> 0 `i `uc `i > _batADValue -> -> 1861 `i `ui 124  ]
[; ;main.c: 670: {
"670
{
[; ;main.c: 671: protectFlag = 1;
"671
[e = _protectFlag -> -> 1 `i `uc ]
"672
}
[e :U 124 ]
"673
}
[; ;main.c: 672: }
[; ;main.c: 673: }
[e $U 125  ]
"674
[e :U 117 ]
[; ;main.c: 674: else
[; ;main.c: 675: {
"675
{
[; ;main.c: 676: ADCON0 = 0;
"676
[e = _ADCON0 -> -> 0 `i `uc ]
[; ;main.c: 677: ADCON1 = 0;
"677
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 678: _delay((unsigned long)((100)*(16000000/4000000.0)));
"678
[e ( __delay (1 -> * -> -> 100 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
"679
}
[e :U 125 ]
[; ;main.c: 679: }
[; ;main.c: 681: test_adc = ADC_Sample(2, 5);
"681
[e = _test_adc ( _ADC_Sample (2 , -> -> 2 `i `uc -> -> 5 `i `uc ]
[; ;main.c: 682: if (0xA5 == test_adc)
"682
[e $ ! == -> 165 `i -> _test_adc `i 126  ]
[; ;main.c: 683: {
"683
{
[; ;main.c: 684: if(chrgFlag && adresult > 100)
"684
[e $ ! && != -> _chrgFlag `i -> -> -> 0 `i `uc `i > _adresult -> -> 100 `i `ui 127  ]
[; ;main.c: 685: {
"685
{
[; ;main.c: 687: if(adresult > 810 || (batADValue - adresult) > 810)
"687
[e $ ! || > _adresult -> -> 810 `i `ui > - _batADValue _adresult -> -> 810 `i `ui 128  ]
[; ;main.c: 688: {
"688
{
[; ;main.c: 690: if(++countHalfFull > 250)
"690
[e $ ! > -> =+ _countHalfFull -> -> 1 `i `uc `i -> 250 `i 129  ]
[; ;main.c: 691: {
"691
{
[; ;main.c: 692: countHalfFull = 0;
"692
[e = _countHalfFull -> -> 0 `i `uc ]
[; ;main.c: 693: protectFlag = 2;
"693
[e = _protectFlag -> -> 2 `i `uc ]
"694
}
[e :U 129 ]
"695
}
[; ;main.c: 694: }
[; ;main.c: 695: }
[e $U 130  ]
"696
[e :U 128 ]
[; ;main.c: 696: else
[; ;main.c: 697: {
"697
{
[; ;main.c: 698: countHalfFull = 0;
"698
[e = _countHalfFull -> -> 0 `i `uc ]
"699
}
[e :U 130 ]
"700
}
[e :U 127 ]
"701
}
[; ;main.c: 699: }
[; ;main.c: 700: }
[; ;main.c: 701: }
[e $U 131  ]
"702
[e :U 126 ]
[; ;main.c: 702: else
[; ;main.c: 703: {
"703
{
[; ;main.c: 704: ADCON0 = 0;
"704
[e = _ADCON0 -> -> 0 `i `uc ]
[; ;main.c: 705: ADCON1 = 0;
"705
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 706: _delay((unsigned long)((100)*(16000000/4000000.0)));
"706
[e ( __delay (1 -> * -> -> 100 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
"707
}
[e :U 131 ]
[; ;main.c: 707: }
[; ;main.c: 709: }
"709
[e :UE 116 ]
}
"720
[v _Init_System `(v ~T0 @X0 1 ef ]
"721
{
[; ;main.c: 720: void Init_System()
[; ;main.c: 721: {
[e :U _Init_System ]
[f ]
[; ;main.c: 722: asm("nop");
"722
[; <" nop ;# ">
[; ;main.c: 723: asm("clrwdt");
"723
[; <" clrwdt ;# ">
[; ;main.c: 724: OPTION_REG = 0;
"724
[e = _OPTION_REG -> -> 0 `i `uc ]
[; ;main.c: 725: asm("clrwdt");
"725
[; <" clrwdt ;# ">
[; ;main.c: 726: OSCCON = 0X72;
"726
[e = _OSCCON -> -> 114 `i `uc ]
[; ;main.c: 728: WPUA = 0x20;
"728
[e = _WPUA -> -> 32 `i `uc ]
[; ;main.c: 729: WPDA = 0x00;
"729
[e = _WPDA -> -> 0 `i `uc ]
[; ;main.c: 730: WPUB = 0x80;
"730
[e = _WPUB -> -> 128 `i `uc ]
[; ;main.c: 732: TRISA = 0x37;
"732
[e = _TRISA -> -> 55 `i `uc ]
[; ;main.c: 733: TRISB = 0x84;
"733
[e = _TRISB -> -> 132 `i `uc ]
[; ;main.c: 735: PORTA = 0X00;
"735
[e = _PORTA -> -> 0 `i `uc ]
[; ;main.c: 736: PORTB = 0X03;
"736
[e = _PORTB -> -> 3 `i `uc ]
[; ;main.c: 740: PR2 = 249;
"740
[e = _PR2 -> -> 249 `i `uc ]
[; ;main.c: 741: TMR2IF = 0;
"741
[e = _TMR2IF -> -> 0 `i `b ]
[; ;main.c: 742: TMR2IE = 1;
"742
[e = _TMR2IE -> -> 1 `i `b ]
[; ;main.c: 744: T2CON = 0B00000100;
"744
[e = _T2CON -> -> 4 `i `uc ]
[; ;main.c: 745: INTCON = 0XC0;
"745
[e = _INTCON -> -> 192 `i `uc ]
[; ;main.c: 746: }
"746
[e :UE 132 ]
}
"757
[v _AD_Init `(v ~T0 @X0 1 ef ]
"758
{
[; ;main.c: 757: void AD_Init()
[; ;main.c: 758: {
[e :U _AD_Init ]
[f ]
[; ;main.c: 790: ADCON0 = 0X41;
"790
[e = _ADCON0 -> -> 65 `i `uc ]
[; ;main.c: 807: ADCON1 = 0;
"807
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 808: ANSEL0 = 0X07;
"808
[e = _ANSEL0 -> -> 7 `i `uc ]
[; ;main.c: 809: ANSEL1 = 0x00;
"809
[e = _ANSEL1 -> -> 0 `i `uc ]
[; ;main.c: 810: }
"810
[e :UE 133 ]
}
"813
[v _chrgPwmInit `(v ~T0 @X0 1 ef ]
"814
{
[; ;main.c: 813: void chrgPwmInit()
[; ;main.c: 814: {
[e :U _chrgPwmInit ]
[f ]
[; ;main.c: 815: chrgPwmFlag = 1;
"815
[e = _chrgPwmFlag -> -> 1 `i `uc ]
[; ;main.c: 816: PWMCON1 = 0B11000000;
"816
[e = _PWMCON1 -> -> 192 `i `uc ]
[; ;main.c: 818: PWMTH = 0X00;
"818
[e = _PWMTH -> -> 0 `i `uc ]
[; ;main.c: 819: PWMTL = 100;
"819
[e = _PWMTL -> -> 100 `i `uc ]
[; ;main.c: 823: PWMD23H = 0;
"823
[e = _PWMD23H -> -> 0 `i `uc ]
[; ;main.c: 824: PWMD3L = 10;
"824
[e = _PWMD3L -> -> 10 `i `uc ]
[; ;main.c: 825: PWM23DT = 0X00;
"825
[e = _PWM23DT -> -> 0 `i `uc ]
[; ;main.c: 827: PWMCON0 = 0X08;
"827
[e = _PWMCON0 -> -> 8 `i `uc ]
[; ;main.c: 828: PWMCON2 =0X00;
"828
[e = _PWMCON2 -> -> 0 `i `uc ]
[; ;main.c: 829: }
"829
[e :UE 134 ]
}
"831
[v _chrgPwmStop `(v ~T0 @X0 1 ef ]
"832
{
[; ;main.c: 831: void chrgPwmStop()
[; ;main.c: 832: {
[e :U _chrgPwmStop ]
[f ]
[; ;main.c: 833: if(chrgPwmFlag)
"833
[e $ ! != -> _chrgPwmFlag `i -> -> -> 0 `i `uc `i 136  ]
[; ;main.c: 834: {
"834
{
[; ;main.c: 835: chrgPwmFlag = 0;
"835
[e = _chrgPwmFlag -> -> 0 `i `uc ]
[; ;main.c: 836: PWMCON0 &= 0xF7;
"836
[e =& _PWMCON0 -> -> 247 `i `uc ]
[; ;main.c: 837: RA3 = 0;
"837
[e = _RA3 -> -> 0 `i `b ]
"838
}
[e :U 136 ]
[; ;main.c: 838: }
[; ;main.c: 839: }
"839
[e :UE 135 ]
}
"842
[v _pwmD2Init `(v ~T0 @X0 1 ef ]
"843
{
[; ;main.c: 842: void pwmD2Init()
[; ;main.c: 843: {
[e :U _pwmD2Init ]
[f ]
[; ;main.c: 844: pwmD2Flag = 1;
"844
[e = _pwmD2Flag -> -> 1 `i `uc ]
[; ;main.c: 845: PWMCON1 = 0B00000000;
"845
[e = _PWMCON1 -> -> 0 `i `uc ]
[; ;main.c: 847: PWMTH = 0X00;
"847
[e = _PWMTH -> -> 0 `i `uc ]
[; ;main.c: 848: PWMTL = 100;
"848
[e = _PWMTL -> -> 100 `i `uc ]
[; ;main.c: 852: PWMD23H = 0;
"852
[e = _PWMD23H -> -> 0 `i `uc ]
[; ;main.c: 853: PWMD2L = 10;
"853
[e = _PWMD2L -> -> 10 `i `uc ]
[; ;main.c: 854: PWM23DT = 0X00;
"854
[e = _PWM23DT -> -> 0 `i `uc ]
[; ;main.c: 856: PWMCON0 = 0X64;
"856
[e = _PWMCON0 -> -> 100 `i `uc ]
[; ;main.c: 857: PWMCON2 =0X00;
"857
[e = _PWMCON2 -> -> 0 `i `uc ]
[; ;main.c: 858: }
"858
[e :UE 137 ]
}
"860
[v _pwmD2Stop `(v ~T0 @X0 1 ef ]
"861
{
[; ;main.c: 860: void pwmD2Stop()
[; ;main.c: 861: {
[e :U _pwmD2Stop ]
[f ]
[; ;main.c: 862: if(pwmD2Flag)
"862
[e $ ! != -> _pwmD2Flag `i -> -> -> 0 `i `uc `i 139  ]
[; ;main.c: 863: {
"863
{
[; ;main.c: 864: PWMCON0 &= 0xFB;
"864
[e =& _PWMCON0 -> -> 251 `i `uc ]
[; ;main.c: 865: RB3 = 0;
"865
[e = _RB3 -> -> 0 `i `b ]
"866
}
[e :U 139 ]
[; ;main.c: 866: }
[; ;main.c: 867: pwmD2Flag = 0;
"867
[e = _pwmD2Flag -> -> 0 `i `uc ]
[; ;main.c: 868: }
"868
[e :UE 138 ]
}
"870
[v _pwmD3Init `(v ~T0 @X0 1 ef ]
"871
{
[; ;main.c: 870: void pwmD3Init()
[; ;main.c: 871: {
[e :U _pwmD3Init ]
[f ]
[; ;main.c: 872: pwmD3Flag = 1;
"872
[e = _pwmD3Flag -> -> 1 `i `uc ]
[; ;main.c: 873: PWMCON1 = 0B00000000;
"873
[e = _PWMCON1 -> -> 0 `i `uc ]
[; ;main.c: 874: PWMTH = 0X00;
"874
[e = _PWMTH -> -> 0 `i `uc ]
[; ;main.c: 875: PWMTL = 100;
"875
[e = _PWMTL -> -> 100 `i `uc ]
[; ;main.c: 878: PWMD23H = 0;
"878
[e = _PWMD23H -> -> 0 `i `uc ]
[; ;main.c: 879: PWMD3L = 43;
"879
[e = _PWMD3L -> -> 43 `i `uc ]
[; ;main.c: 880: PWM23DT = 0X00;
"880
[e = _PWM23DT -> -> 0 `i `uc ]
[; ;main.c: 882: PWMCON0 = 0X68;
"882
[e = _PWMCON0 -> -> 104 `i `uc ]
[; ;main.c: 883: PWMCON2 =0X00;
"883
[e = _PWMCON2 -> -> 0 `i `uc ]
[; ;main.c: 884: }
"884
[e :UE 140 ]
}
"886
[v _pwmD3Stop `(v ~T0 @X0 1 ef ]
"887
{
[; ;main.c: 886: void pwmD3Stop()
[; ;main.c: 887: {
[e :U _pwmD3Stop ]
[f ]
[; ;main.c: 888: if(pwmD3Flag)
"888
[e $ ! != -> _pwmD3Flag `i -> -> -> 0 `i `uc `i 142  ]
[; ;main.c: 889: {
"889
{
[; ;main.c: 890: PWMCON0 &= 0XF7;
"890
[e =& _PWMCON0 -> -> 247 `i `uc ]
[; ;main.c: 891: RB4 = 0;
"891
[e = _RB4 -> -> 0 `i `b ]
"892
}
[e :U 142 ]
[; ;main.c: 892: }
[; ;main.c: 893: pwmD3Flag = 0;
"893
[e = _pwmD3Flag -> -> 0 `i `uc ]
[; ;main.c: 894: }
"894
[e :UE 141 ]
}
"904
[v _Sleep_Mode `(v ~T0 @X0 1 ef ]
"905
{
[; ;main.c: 904: void Sleep_Mode()
[; ;main.c: 905: {
[e :U _Sleep_Mode ]
[f ]
[; ;main.c: 906: INTCON = 0;
"906
[e = _INTCON -> -> 0 `i `uc ]
[; ;main.c: 908: OPTION_REG = 0;
"908
[e = _OPTION_REG -> -> 0 `i `uc ]
[; ;main.c: 912: TRISA = 0x37;
"912
[e = _TRISA -> -> 55 `i `uc ]
[; ;main.c: 913: TRISB = 0x84;
"913
[e = _TRISB -> -> 132 `i `uc ]
[; ;main.c: 915: PORTA = 0X00;
"915
[e = _PORTA -> -> 0 `i `uc ]
[; ;main.c: 916: PORTB = 0X03;
"916
[e = _PORTB -> -> 3 `i `uc ]
[; ;main.c: 919: ADCON0 = 0;
"919
[e = _ADCON0 -> -> 0 `i `uc ]
[; ;main.c: 920: ADCON1 = 0;
"920
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 922: PWMCON0 = 0;
"922
[e = _PWMCON0 -> -> 0 `i `uc ]
[; ;main.c: 924: OSCCON = 0X70;
"924
[e = _OSCCON -> -> 112 `i `uc ]
[; ;main.c: 926: IOCA = 0x00;
"926
[e = _IOCA -> -> 0 `i `uc ]
[; ;main.c: 927: IOCB = 0x84;
"927
[e = _IOCB -> -> 132 `i `uc ]
[; ;main.c: 929: RAIE = 1;
"929
[e = _RAIE -> -> 1 `i `b ]
[; ;main.c: 930: PEIE = 1;
"930
[e = _PEIE -> -> 1 `i `b ]
[; ;main.c: 931: RBIE = 1;
"931
[e = _RBIE -> -> 1 `i `b ]
[; ;main.c: 932: GIE = 0;
"932
[e = _GIE -> -> 0 `i `b ]
[; ;main.c: 934: PIE1 &= 0X08;
"934
[e =& _PIE1 -> -> 8 `i `uc ]
[; ;main.c: 935: PIR1 = 0;
"935
[e = _PIR1 -> -> 0 `i `uc ]
[; ;main.c: 936: INTCON &= 0XC8;
"936
[e =& _INTCON -> -> 200 `i `uc ]
[; ;main.c: 938: PORTA;
"938
[e _PORTA ]
[; ;main.c: 939: RAIF = 0;
"939
[e = _RAIF -> -> 0 `i `b ]
[; ;main.c: 940: PORTB;
"940
[e _PORTB ]
[; ;main.c: 941: RBIF = 0;
"941
[e = _RBIF -> -> 0 `i `b ]
[; ;main.c: 942: asm("clrwdt");
"942
[; <" clrwdt ;# ">
[; ;main.c: 944: asm("sleep");
"944
[; <" sleep ;# ">
[; ;main.c: 946: asm("nop");
"946
[; <" nop ;# ">
[; ;main.c: 947: asm("clrwdt");
"947
[; <" clrwdt ;# ">
[; ;main.c: 948: asm("nop");
"948
[; <" nop ;# ">
[; ;main.c: 949: asm("nop");
"949
[; <" nop ;# ">
[; ;main.c: 950: asm("nop");
"950
[; <" nop ;# ">
[; ;main.c: 951: asm("nop");
"951
[; <" nop ;# ">
[; ;main.c: 952: asm("nop");
"952
[; <" nop ;# ">
[; ;main.c: 953: if(RAIF) RAIF = 0;
"953
[e $ ! _RAIF 144  ]
[e = _RAIF -> -> 0 `i `b ]
[e :U 144 ]
[; ;main.c: 954: if(RBIF) RBIF = 0;
"954
[e $ ! _RBIF 145  ]
[e = _RBIF -> -> 0 `i `b ]
[e :U 145 ]
[; ;main.c: 955: if(TMR2IF) TMR2IF = 0;
"955
[e $ ! _TMR2IF 146  ]
[e = _TMR2IF -> -> 0 `i `b ]
[e :U 146 ]
[; ;main.c: 956: IOCA = 0B00000000;
"956
[e = _IOCA -> -> 0 `i `uc ]
[; ;main.c: 957: IOCB = 0B00000000;
"957
[e = _IOCB -> -> 0 `i `uc ]
[; ;main.c: 958: Init_System();
"958
[e ( _Init_System ..  ]
[; ;main.c: 959: AD_Init();
"959
[e ( _AD_Init ..  ]
[; ;main.c: 960: }
"960
[e :UE 143 ]
}
"982
[v _ADC_Sample `(uc ~T0 @X0 1 ef2`uc`uc ]
"983
{
[; ;main.c: 982: unsigned char ADC_Sample(unsigned char adch, unsigned char adldo)
[; ;main.c: 983: {
[e :U _ADC_Sample ]
"982
[v _adch `uc ~T0 @X0 1 r1 ]
[v _adldo `uc ~T0 @X0 1 r2 ]
"983
[f ]
"984
[v _adsum `Vul ~T0 @X0 1 a ]
[; ;main.c: 984: volatile unsigned long adsum = 0;
[e = _adsum -> -> -> 0 `i `l `ul ]
"985
[v _admin `Vui ~T0 @X0 1 a ]
[; ;main.c: 985: volatile unsigned int admin = 0, admax = 0;
[e = _admin -> -> 0 `i `ui ]
[v _admax `Vui ~T0 @X0 1 a ]
[e = _admax -> -> 0 `i `ui ]
"986
[v _ad_temp `Vui ~T0 @X0 1 a ]
[; ;main.c: 986: volatile unsigned int ad_temp = 0;
[e = _ad_temp -> -> 0 `i `ui ]
[; ;main.c: 988: if ((!LDO_EN) && (adldo & 0x04) )
"988
[e $ ! && ! _LDO_EN != & -> _adldo `i -> 4 `i -> 0 `i 148  ]
[; ;main.c: 989: {
"989
{
[; ;main.c: 991: ADCON1 = adldo;
"991
[e = _ADCON1 _adldo ]
[; ;main.c: 992: _delay((unsigned long)((100)*(16000000/4000000.0)));
"992
[e ( __delay (1 -> * -> -> 100 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
"993
}
[; ;main.c: 993: }
[e $U 149  ]
"994
[e :U 148 ]
[; ;main.c: 994: else
[; ;main.c: 995: ADCON1 = adldo;
"995
[e = _ADCON1 _adldo ]
[e :U 149 ]
[; ;main.c: 997: if(adch & 0x10)
"997
[e $ ! != & -> _adch `i -> 16 `i -> 0 `i 150  ]
[; ;main.c: 998: {
"998
{
[; ;main.c: 999: CHS4 = 1;
"999
[e = _CHS4 -> -> 1 `i `b ]
[; ;main.c: 1000: adch &= 0x0f;
"1000
[e =& _adch -> -> 15 `i `uc ]
"1001
}
[e :U 150 ]
"1002
[v _i `uc ~T0 @X0 1 a ]
[; ;main.c: 1001: }
[; ;main.c: 1002: unsigned char i = 0;
[e = _i -> -> 0 `i `uc ]
[; ;main.c: 1003: for (i = 0; i < 10; i++)
"1003
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 10 `i 151  ]
[e $U 152  ]
"1004
[e :U 151 ]
[; ;main.c: 1004: {
{
[; ;main.c: 1005: ADCON0 = (unsigned char)(0X41 | (adch << 2));
"1005
[e = _ADCON0 -> | -> 65 `i << -> _adch `i -> 2 `i `uc ]
[; ;main.c: 1006: asm("nop");
"1006
[; <" nop ;# ">
[; ;main.c: 1007: asm("nop");
"1007
[; <" nop ;# ">
[; ;main.c: 1008: asm("nop");
"1008
[; <" nop ;# ">
[; ;main.c: 1009: asm("nop");
"1009
[; <" nop ;# ">
[; ;main.c: 1010: GODONE = 1;
"1010
[e = _GODONE -> -> 1 `i `b ]
"1012
[v _j `uc ~T0 @X0 1 a ]
[; ;main.c: 1012: unsigned char j = 0;
[e = _j -> -> 0 `i `uc ]
[; ;main.c: 1013: while (GODONE)
"1013
[e $U 154  ]
[e :U 155 ]
[; ;main.c: 1014: {
"1014
{
[; ;main.c: 1015: _delay((unsigned long)((2)*(16000000/4000000.0)));
"1015
[e ( __delay (1 -> * -> -> 2 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
[; ;main.c: 1017: if (0 == (--j))
"1017
[e $ ! == -> 0 `i -> =- _j -> -> 1 `i `uc `i 157  ]
[; ;main.c: 1018: return 0;
"1018
[e ) -> -> 0 `i `uc ]
[e $UE 147  ]
[e :U 157 ]
"1019
}
[e :U 154 ]
"1013
[e $ _GODONE 155  ]
[e :U 156 ]
[; ;main.c: 1019: }
[; ;main.c: 1021: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
"1021
[e = _ad_temp -> + << -> _ADRESH `i -> 4 `i >> -> _ADRESL `i -> 4 `i `ui ]
[; ;main.c: 1023: if (0 == admax)
"1023
[e $ ! == -> -> 0 `i `ui _admax 158  ]
[; ;main.c: 1024: {
"1024
{
[; ;main.c: 1025: admax = ad_temp;
"1025
[e = _admax _ad_temp ]
[; ;main.c: 1026: admin = ad_temp;
"1026
[e = _admin _ad_temp ]
"1027
}
[; ;main.c: 1027: }
[e $U 159  ]
"1028
[e :U 158 ]
[; ;main.c: 1028: else if (ad_temp > admax)
[e $ ! > _ad_temp _admax 160  ]
[; ;main.c: 1029: admax = ad_temp;
"1029
[e = _admax _ad_temp ]
[e $U 161  ]
"1030
[e :U 160 ]
[; ;main.c: 1030: else if (ad_temp < admin)
[e $ ! < _ad_temp _admin 162  ]
[; ;main.c: 1031: admin = ad_temp;
"1031
[e = _admin _ad_temp ]
[e :U 162 ]
"1033
[e :U 161 ]
[e :U 159 ]
[; ;main.c: 1033: adsum += ad_temp;
[e =+ _adsum -> _ad_temp `ul ]
"1034
}
"1003
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 10 `i 151  ]
[e :U 152 ]
"1034
}
[; ;main.c: 1034: }
[; ;main.c: 1035: adsum -= admax;
"1035
[e =- _adsum -> _admax `ul ]
[; ;main.c: 1036: if (adsum >= admin)
"1036
[e $ ! >= _adsum -> _admin `ul 163  ]
[; ;main.c: 1037: adsum -= admin;
"1037
[e =- _adsum -> _admin `ul ]
[e $U 164  ]
"1038
[e :U 163 ]
[; ;main.c: 1038: else
[; ;main.c: 1039: adsum = 0;
"1039
[e = _adsum -> -> -> 0 `i `l `ul ]
[e :U 164 ]
[; ;main.c: 1041: adresult = adsum >> 3;
"1041
[e = _adresult -> >> _adsum -> 3 `i `ui ]
[; ;main.c: 1043: adsum = 0;
"1043
[e = _adsum -> -> -> 0 `i `l `ul ]
[; ;main.c: 1044: admin = 0;
"1044
[e = _admin -> -> 0 `i `ui ]
[; ;main.c: 1045: admax = 0;
"1045
[e = _admax -> -> 0 `i `ui ]
[; ;main.c: 1046: return 0xA5;
"1046
[e ) -> -> 165 `i `uc ]
[e $UE 147  ]
[; ;main.c: 1048: }
"1048
[e :UE 147 ]
}
