
# 1 "C:\mcuproject\scm\zdt\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"

# 26 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\htc.h"
extern const char __xc8_OPTIM_SPEED;

extern double __fpnormalize(double);


# 13 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 16 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\sc8f679x.h"
volatile unsigned char INDF @ 0x00;
volatile unsigned char TMR0 @ 0x01;
volatile unsigned char PCL @ 0x02;
volatile unsigned char STATUS @ 0x03;
volatile unsigned char FSR @ 0x04;
volatile unsigned char PORTA @ 0x05;
volatile unsigned char PORTB @ 0x06;
volatile unsigned char WPUA @ 0x07;
volatile unsigned char WPUB @ 0x08;
volatile unsigned char IOCB @ 0x09;
volatile unsigned char PCLATH @ 0x0A;
volatile unsigned char INTCON @ 0x0B;
volatile unsigned char PIR1 @ 0x0C;
volatile unsigned char PIE1 @ 0x0D;
volatile unsigned char PWMD23H @ 0x0E;
volatile unsigned char PWM01DT @ 0x0F;
volatile unsigned char PWM23DT @ 0x10;
volatile unsigned char TMR2 @ 0x11;
volatile unsigned char T2CON @ 0x12;
volatile unsigned char PWMCON0 @ 0x13;
volatile unsigned char PWMCON1 @ 0x14;
volatile unsigned char PWMTL @ 0x15;
volatile unsigned char PWMTH @ 0x16;
volatile unsigned char PWMD0L @ 0x17;
volatile unsigned char PWMD1L @ 0x18;
volatile unsigned char PWMD2L @ 0x19;
volatile unsigned char PWMD3L @ 0x1A;
volatile unsigned char PWMD4L @ 0x1B;
volatile unsigned char PWMD01H @ 0x1C;
volatile unsigned char PWMCON2 @ 0x1D;
volatile unsigned char PWM4TL @ 0x1E;
volatile unsigned char OPTION_REG @ 0x81;
volatile unsigned char TRISA @ 0x85;
volatile unsigned char TRISB @ 0x86;
volatile unsigned char WPDB @ 0x87;
volatile unsigned char OSCCON @ 0x88;
volatile unsigned char EECON1 @ 0x8C;
volatile unsigned char EECON2 @ 0x8D;
volatile unsigned char EEDAT @ 0x8E;
volatile unsigned char EEDATH @ 0x8F;
volatile unsigned char EEADR @ 0x90;
volatile unsigned char PR2 @ 0x91;
volatile unsigned char KEYCON0 @ 0x92;
volatile unsigned char KEYCON1 @ 0x93;
volatile unsigned char KEYDATAL @ 0x94;
volatile unsigned char KEYDATAH @ 0x95;
volatile unsigned char EEADRH @ 0x96;
volatile unsigned char KEYCON2 @ 0x97;
volatile unsigned char OPA0CON @ 0x98;
volatile unsigned char OPA0ADJ @ 0x99;
volatile unsigned char OPA1CON @ 0x9A;
volatile unsigned char OPA1ADJ @ 0x9B;
volatile unsigned char ADCON1 @ 0x9C;
volatile unsigned char ADCON0 @ 0x9D;
volatile unsigned char ADRESL @ 0x9E;
volatile unsigned char ADRESH @ 0x9F;
volatile unsigned char BUZCON @ 0x105;
volatile unsigned char PIR2 @ 0x107;
volatile unsigned char PIE2 @ 0x108;
volatile unsigned char IICADD @ 0x109;
volatile unsigned char IICCON @ 0x10C;
volatile unsigned char IICCON2 @ 0x10D;
volatile unsigned char IICBUF @ 0x10E;
volatile unsigned char IICSTAT @ 0x10F;
volatile unsigned char ANSEL0 @ 0x110;
volatile unsigned char ANSEL1 @ 0x111;
volatile unsigned char ANSEL2 @ 0x112;
volatile unsigned char WPDA @ 0x113;
volatile unsigned char WPDC @ 0x114;
volatile unsigned char WPUC @ 0x115;
volatile unsigned char CMPCON @ 0x116;
volatile unsigned char TXSTA @ 0x117;
volatile unsigned char RCSTA @ 0x118;
volatile unsigned char SPBRG @ 0x119;
volatile unsigned char TXREG @ 0x11A;
volatile unsigned char RCREG @ 0x11B;
volatile unsigned char SPIBUF @ 0x11C;
volatile unsigned char SPICON @ 0x11D;
volatile unsigned char SPICON2 @ 0x11E;
volatile unsigned char LVDCON @ 0x11F;
volatile unsigned char PORTC @ 0x185;
volatile unsigned char TRISC @ 0x186;
volatile unsigned char IOCC @ 0x187;
volatile unsigned char IOCA @ 0x188;
volatile unsigned char PWMIOS0 @ 0x18C;
volatile unsigned char PWMIOS1 @ 0x18D;
volatile unsigned char PWMIOS2 @ 0x18E;
volatile unsigned char LCDCON @ 0x18F;
volatile unsigned char CSSEL0 @ 0x190;
volatile unsigned char CSSEL1 @ 0x191;
volatile unsigned char CSSEL2 @ 0x192;
volatile unsigned char CSEN0 @ 0x193;
volatile unsigned char CSEN1 @ 0x194;
volatile unsigned char CSEN2 @ 0x195;
volatile unsigned char TABLE_SPL @ 0x196;
volatile unsigned char TABLE_SPH @ 0x197;
volatile unsigned char TABLE_DATAH @ 0x198;
volatile unsigned char TMR1L @ 0x199;
volatile unsigned char TMR1H @ 0x19A;
volatile unsigned char T1CON @ 0x19B;



volatile bit IRP @ ((unsigned)&STATUS*8)+7;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit Z @ ((unsigned)&STATUS*8)+2;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit C @ ((unsigned)&STATUS*8)+0;


volatile bit RA7 @ ((unsigned)&PORTA*8)+7;
volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA0 @ ((unsigned)&PORTA*8)+0;


volatile bit RB7 @ ((unsigned)&PORTB*8)+7;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB0 @ ((unsigned)&PORTB*8)+0;


volatile bit WPUA7 @ ((unsigned)&WPUA*8)+7;
volatile bit WPUA6 @ ((unsigned)&WPUA*8)+6;
volatile bit WPUA5 @ ((unsigned)&WPUA*8)+5;
volatile bit WPUA4 @ ((unsigned)&WPUA*8)+4;
volatile bit WPUA3 @ ((unsigned)&WPUA*8)+3;
volatile bit WPUA2 @ ((unsigned)&WPUA*8)+2;
volatile bit WPUA1 @ ((unsigned)&WPUA*8)+1;
volatile bit WPUA0 @ ((unsigned)&WPUA*8)+0;


volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;
volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;


volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;
volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;


volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit RBIF @ ((unsigned)&INTCON*8)+0;


volatile bit TMR1IF @ ((unsigned)&PIR1*8)+7;
volatile bit EEIF @ ((unsigned)&PIR1*8)+6;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit SPIIF @ ((unsigned)&PIR1*8)+3;
volatile bit PWMIF @ ((unsigned)&PIR1*8)+2;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit ADIF @ ((unsigned)&PIR1*8)+0;


volatile bit TMR1IE @ ((unsigned)&PIE1*8)+7;
volatile bit EEIE @ ((unsigned)&PIE1*8)+6;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit SPIIE @ ((unsigned)&PIE1*8)+3;
volatile bit PWMIE @ ((unsigned)&PIE1*8)+2;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit ADIE @ ((unsigned)&PIE1*8)+0;


volatile bit PWMD39 @ ((unsigned)&PWMD23H*8)+5;
volatile bit PWMD38 @ ((unsigned)&PWMD23H*8)+4;
volatile bit PWMD29 @ ((unsigned)&PWMD23H*8)+1;
volatile bit PWMD28 @ ((unsigned)&PWMD23H*8)+0;


volatile bit CLK_SEL @ ((unsigned)&T2CON*8)+7;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;


volatile bit CLKDIV2 @ ((unsigned)&PWMCON0*8)+7;
volatile bit CLKDIV1 @ ((unsigned)&PWMCON0*8)+6;
volatile bit CLKDIV0 @ ((unsigned)&PWMCON0*8)+5;
volatile bit PWM4EN @ ((unsigned)&PWMCON0*8)+4;
volatile bit PWM3EN @ ((unsigned)&PWMCON0*8)+3;
volatile bit PWM2EN @ ((unsigned)&PWMCON0*8)+2;
volatile bit PWM1EN @ ((unsigned)&PWMCON0*8)+1;
volatile bit PWM0EN @ ((unsigned)&PWMCON0*8)+0;


volatile bit PWM2DTEN @ ((unsigned)&PWMCON1*8)+5;
volatile bit PWM0DTEN @ ((unsigned)&PWMCON1*8)+4;
volatile bit DT_DIV1 @ ((unsigned)&PWMCON1*8)+1;
volatile bit DT_DIV0 @ ((unsigned)&PWMCON1*8)+0;


volatile bit PWMD49 @ ((unsigned)&PWMTH*8)+5;
volatile bit PWMD48 @ ((unsigned)&PWMTH*8)+4;
volatile bit PWM4T9 @ ((unsigned)&PWMTH*8)+3;
volatile bit PWM4T8 @ ((unsigned)&PWMTH*8)+2;
volatile bit PWMT9 @ ((unsigned)&PWMTH*8)+1;
volatile bit PWMT8 @ ((unsigned)&PWMTH*8)+0;


volatile bit PWMD19 @ ((unsigned)&PWMD01H*8)+5;
volatile bit PWMD18 @ ((unsigned)&PWMD01H*8)+4;
volatile bit PWMD09 @ ((unsigned)&PWMD01H*8)+1;
volatile bit PWMD08 @ ((unsigned)&PWMD01H*8)+0;


volatile bit BUZEN @ ((unsigned)&PWMCON2*8)+7;
volatile bit PWM4DIR @ ((unsigned)&PWMCON2*8)+4;
volatile bit PWM3DIR @ ((unsigned)&PWMCON2*8)+3;
volatile bit PWM2DIR @ ((unsigned)&PWMCON2*8)+2;
volatile bit PWM1DIR @ ((unsigned)&PWMCON2*8)+1;
volatile bit PWM0DIR @ ((unsigned)&PWMCON2*8)+0;


volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;


volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;


volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;


volatile bit WPDB7 @ ((unsigned)&WPDB*8)+7;
volatile bit WPDB6 @ ((unsigned)&WPDB*8)+6;
volatile bit WPDB5 @ ((unsigned)&WPDB*8)+5;
volatile bit WPDB4 @ ((unsigned)&WPDB*8)+4;
volatile bit WPDB3 @ ((unsigned)&WPDB*8)+3;
volatile bit WPDB2 @ ((unsigned)&WPDB*8)+2;
volatile bit WPDB1 @ ((unsigned)&WPDB*8)+1;
volatile bit WPDB0 @ ((unsigned)&WPDB*8)+0;


volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
volatile bit SWDTEN @ ((unsigned)&OSCCON*8)+1;


volatile bit EEPGD @ ((unsigned)&EECON1*8)+7;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit RD @ ((unsigned)&EECON1*8)+0;


volatile bit EEDAT7 @ ((unsigned)&EEDAT*8)+7;
volatile bit EEDAT6 @ ((unsigned)&EEDAT*8)+6;
volatile bit EEDAT5 @ ((unsigned)&EEDAT*8)+5;
volatile bit EEDAT4 @ ((unsigned)&EEDAT*8)+4;
volatile bit EEDAT3 @ ((unsigned)&EEDAT*8)+3;
volatile bit EEDAT2 @ ((unsigned)&EEDAT*8)+2;
volatile bit EEDAT1 @ ((unsigned)&EEDAT*8)+1;
volatile bit EEDAT0 @ ((unsigned)&EEDAT*8)+0;


volatile bit EEDATH7 @ ((unsigned)&EEDATH*8)+7;
volatile bit EEDATH6 @ ((unsigned)&EEDATH*8)+6;
volatile bit EEDATH5 @ ((unsigned)&EEDATH*8)+5;
volatile bit EEDATH4 @ ((unsigned)&EEDATH*8)+4;
volatile bit EEDATH3 @ ((unsigned)&EEDATH*8)+3;
volatile bit EEDATH2 @ ((unsigned)&EEDATH*8)+2;
volatile bit EEDATH1 @ ((unsigned)&EEDATH*8)+1;
volatile bit EEDATH0 @ ((unsigned)&EEDATH*8)+0;


volatile bit EEADR7 @ ((unsigned)&EEADR*8)+7;
volatile bit EEADR6 @ ((unsigned)&EEADR*8)+6;
volatile bit EEADR5 @ ((unsigned)&EEADR*8)+5;
volatile bit EEADR4 @ ((unsigned)&EEADR*8)+4;
volatile bit EEADR3 @ ((unsigned)&EEADR*8)+3;
volatile bit EEADR2 @ ((unsigned)&EEADR*8)+2;
volatile bit EEADR1 @ ((unsigned)&EEADR*8)+1;
volatile bit EEADR0 @ ((unsigned)&EEADR*8)+0;


volatile bit KDONE @ ((unsigned)&KEYCON0*8)+7;
volatile bit KCAPK2 @ ((unsigned)&KEYCON0*8)+5;
volatile bit KCAPK1 @ ((unsigned)&KEYCON0*8)+4;
volatile bit KCAPK0 @ ((unsigned)&KEYCON0*8)+3;
volatile bit KOUT @ ((unsigned)&KEYCON0*8)+2;
volatile bit KCAP @ ((unsigned)&KEYCON0*8)+1;
volatile bit KEN @ ((unsigned)&KEYCON0*8)+0;


volatile bit KVREF1 @ ((unsigned)&KEYCON1*8)+7;
volatile bit KVREF0 @ ((unsigned)&KEYCON1*8)+6;
volatile bit KCLK1 @ ((unsigned)&KEYCON1*8)+5;
volatile bit KCLK0 @ ((unsigned)&KEYCON1*8)+4;
volatile bit KCHS3 @ ((unsigned)&KEYCON1*8)+3;
volatile bit KCHS2 @ ((unsigned)&KEYCON1*8)+2;
volatile bit KCHS1 @ ((unsigned)&KEYCON1*8)+1;
volatile bit KCHS0 @ ((unsigned)&KEYCON1*8)+0;


volatile bit EEADRH3 @ ((unsigned)&EEADRH*8)+3;
volatile bit EEADRH2 @ ((unsigned)&EEADRH*8)+2;
volatile bit EEADRH1 @ ((unsigned)&EEADRH*8)+1;
volatile bit EEADRH0 @ ((unsigned)&EEADRH*8)+0;


volatile bit CAP_LVBO2 @ ((unsigned)&KEYCON2*8)+7;
volatile bit CAP_LVBO1 @ ((unsigned)&KEYCON2*8)+6;
volatile bit CAP_LVBO0 @ ((unsigned)&KEYCON2*8)+5;
volatile bit TKEN @ ((unsigned)&KEYCON2*8)+0;


volatile bit OPA0EN @ ((unsigned)&OPA0CON*8)+7;
volatile bit OPA0OEN @ ((unsigned)&OPA0CON*8)+6;
volatile bit CMP0MODE @ ((unsigned)&OPA0CON*8)+5;
volatile bit OPA0_ADC @ ((unsigned)&OPA0CON*8)+4;
volatile bit OPA0FT @ ((unsigned)&OPA0CON*8)+0;


volatile bit OPA0OUT @ ((unsigned)&OPA0ADJ*8)+7;
volatile bit OPA0COFM @ ((unsigned)&OPA0ADJ*8)+6;
volatile bit OPA0CRS @ ((unsigned)&OPA0ADJ*8)+5;
volatile bit OPA0_ADJ4 @ ((unsigned)&OPA0ADJ*8)+4;
volatile bit OPA0_ADJ3 @ ((unsigned)&OPA0ADJ*8)+3;
volatile bit OPA0_ADJ2 @ ((unsigned)&OPA0ADJ*8)+2;
volatile bit OPA0_ADJ1 @ ((unsigned)&OPA0ADJ*8)+1;
volatile bit OPA0_ADJ0 @ ((unsigned)&OPA0ADJ*8)+0;


volatile bit OPA1EN @ ((unsigned)&OPA1CON*8)+7;
volatile bit OPA1OEN @ ((unsigned)&OPA1CON*8)+6;
volatile bit CMP1MODE @ ((unsigned)&OPA1CON*8)+5;
volatile bit OPA1_ADC @ ((unsigned)&OPA1CON*8)+4;
volatile bit OPA1FT @ ((unsigned)&OPA1CON*8)+0;


volatile bit OPA1OUT @ ((unsigned)&OPA1ADJ*8)+7;
volatile bit OPA1COFM @ ((unsigned)&OPA1ADJ*8)+6;
volatile bit OPA1CRS @ ((unsigned)&OPA1ADJ*8)+5;
volatile bit OPA1_ADJ4 @ ((unsigned)&OPA1ADJ*8)+4;
volatile bit OPA1_ADJ3 @ ((unsigned)&OPA1ADJ*8)+3;
volatile bit OPA1_ADJ2 @ ((unsigned)&OPA1ADJ*8)+2;
volatile bit OPA1_ADJ1 @ ((unsigned)&OPA1ADJ*8)+1;
volatile bit OPA1_ADJ0 @ ((unsigned)&OPA1ADJ*8)+0;


volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;
volatile bit CHS4 @ ((unsigned)&ADCON1*8)+6;
volatile bit LDO_EN @ ((unsigned)&ADCON1*8)+2;
volatile bit LDO_SEL1 @ ((unsigned)&ADCON1*8)+1;
volatile bit LDO_SEL0 @ ((unsigned)&ADCON1*8)+0;


volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
volatile bit ADON @ ((unsigned)&ADCON0*8)+0;


volatile bit BUZDIV1 @ ((unsigned)&BUZCON*8)+7;
volatile bit BUZDIV0 @ ((unsigned)&BUZCON*8)+6;
volatile bit BUZDATA5 @ ((unsigned)&BUZCON*8)+5;
volatile bit BUZDATA4 @ ((unsigned)&BUZCON*8)+4;
volatile bit BUZDATA3 @ ((unsigned)&BUZCON*8)+3;
volatile bit BUZDATA2 @ ((unsigned)&BUZCON*8)+2;
volatile bit BUZDATA1 @ ((unsigned)&BUZCON*8)+1;
volatile bit BUZDATA0 @ ((unsigned)&BUZCON*8)+0;


volatile bit TKIF @ ((unsigned)&PIR2*8)+6;
volatile bit IICIF @ ((unsigned)&PIR2*8)+4;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+3;
volatile bit RCCIF @ ((unsigned)&PIR2*8)+2;
volatile bit RACIF @ ((unsigned)&PIR2*8)+1;
volatile bit LVDIF @ ((unsigned)&PIR2*8)+0;


volatile bit TKIE @ ((unsigned)&PIE2*8)+6;
volatile bit IICIE @ ((unsigned)&PIE2*8)+4;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+3;
volatile bit RCCIE @ ((unsigned)&PIE2*8)+2;
volatile bit RACIE @ ((unsigned)&PIE2*8)+1;
volatile bit LVDIE @ ((unsigned)&PIE2*8)+0;


volatile bit IICWCOL @ ((unsigned)&IICCON*8)+7;
volatile bit SSPOV @ ((unsigned)&IICCON*8)+6;
volatile bit IICEN @ ((unsigned)&IICCON*8)+5;
volatile bit IICCKP @ ((unsigned)&IICCON*8)+4;
volatile bit IICTOS1 @ ((unsigned)&IICCON*8)+3;
volatile bit IICTOS0 @ ((unsigned)&IICCON*8)+2;
volatile bit IICM1 @ ((unsigned)&IICCON*8)+1;
volatile bit IICM0 @ ((unsigned)&IICCON*8)+0;


volatile bit GCEN @ ((unsigned)&IICCON2*8)+7;
volatile bit ACKSTAT @ ((unsigned)&IICCON2*8)+6;
volatile bit ACKDT @ ((unsigned)&IICCON2*8)+5;
volatile bit ACKEN @ ((unsigned)&IICCON2*8)+4;
volatile bit RCEN @ ((unsigned)&IICCON2*8)+3;
volatile bit PEN @ ((unsigned)&IICCON2*8)+2;
volatile bit RSEN @ ((unsigned)&IICCON2*8)+1;
volatile bit SEN @ ((unsigned)&IICCON2*8)+0;


volatile bit IDLE @ ((unsigned)&IICSTAT*8)+6;
volatile bit DA @ ((unsigned)&IICSTAT*8)+5;
volatile bit P @ ((unsigned)&IICSTAT*8)+4;
volatile bit S @ ((unsigned)&IICSTAT*8)+3;
volatile bit RW @ ((unsigned)&IICSTAT*8)+2;
volatile bit IICTOF @ ((unsigned)&IICSTAT*8)+1;
volatile bit BF @ ((unsigned)&IICSTAT*8)+0;


volatile bit ANS7 @ ((unsigned)&ANSEL0*8)+7;
volatile bit ANS6 @ ((unsigned)&ANSEL0*8)+6;
volatile bit ANS5 @ ((unsigned)&ANSEL0*8)+5;
volatile bit ANS4 @ ((unsigned)&ANSEL0*8)+4;
volatile bit ANS3 @ ((unsigned)&ANSEL0*8)+3;
volatile bit ANS2 @ ((unsigned)&ANSEL0*8)+2;
volatile bit ANS1 @ ((unsigned)&ANSEL0*8)+1;
volatile bit ANS0 @ ((unsigned)&ANSEL0*8)+0;


volatile bit ANS13 @ ((unsigned)&ANSEL1*8)+5;
volatile bit ANS12 @ ((unsigned)&ANSEL1*8)+4;
volatile bit ANS11 @ ((unsigned)&ANSEL1*8)+3;
volatile bit ANS10 @ ((unsigned)&ANSEL1*8)+2;
volatile bit ANS9 @ ((unsigned)&ANSEL1*8)+1;
volatile bit ANS8 @ ((unsigned)&ANSEL1*8)+0;


volatile bit ANS19 @ ((unsigned)&ANSEL2*8)+3;
volatile bit ANS18 @ ((unsigned)&ANSEL2*8)+2;
volatile bit ANS17 @ ((unsigned)&ANSEL2*8)+1;
volatile bit ANS16 @ ((unsigned)&ANSEL2*8)+0;


volatile bit WPDA7 @ ((unsigned)&WPDA*8)+7;
volatile bit WPDA6 @ ((unsigned)&WPDA*8)+6;
volatile bit WPDA5 @ ((unsigned)&WPDA*8)+5;
volatile bit WPDA4 @ ((unsigned)&WPDA*8)+4;
volatile bit WPDA3 @ ((unsigned)&WPDA*8)+3;
volatile bit WPDA2 @ ((unsigned)&WPDA*8)+2;
volatile bit WPDA1 @ ((unsigned)&WPDA*8)+1;
volatile bit WPDA0 @ ((unsigned)&WPDA*8)+0;


volatile bit WPDC1 @ ((unsigned)&WPDC*8)+1;
volatile bit WPDC0 @ ((unsigned)&WPDC*8)+0;


volatile bit WPUC1 @ ((unsigned)&WPUC*8)+1;
volatile bit WPUC0 @ ((unsigned)&WPUC*8)+0;


volatile bit CMP1S_SEL @ ((unsigned)&CMPCON*8)+7;
volatile bit CMP1REF2 @ ((unsigned)&CMPCON*8)+6;
volatile bit CMP1REF1 @ ((unsigned)&CMPCON*8)+5;
volatile bit CMP1REF0 @ ((unsigned)&CMPCON*8)+4;
volatile bit CMP0S_SEL @ ((unsigned)&CMPCON*8)+3;
volatile bit CMP0REF2 @ ((unsigned)&CMPCON*8)+2;
volatile bit CMP0REF1 @ ((unsigned)&CMPCON*8)+1;
volatile bit CMP0REF0 @ ((unsigned)&CMPCON*8)+0;


volatile bit CSRC @ ((unsigned)&TXSTA*8)+7;
volatile bit TX9EN @ ((unsigned)&TXSTA*8)+6;
volatile bit TXEN @ ((unsigned)&TXSTA*8)+5;
volatile bit SYNC @ ((unsigned)&TXSTA*8)+4;
volatile bit SCKP @ ((unsigned)&TXSTA*8)+3;
volatile bit STOPBIT @ ((unsigned)&TXSTA*8)+2;
volatile bit TRMT @ ((unsigned)&TXSTA*8)+1;
volatile bit TX9D @ ((unsigned)&TXSTA*8)+0;


volatile bit SPEN @ ((unsigned)&RCSTA*8)+7;
volatile bit RX9EN @ ((unsigned)&RCSTA*8)+6;
volatile bit SREN @ ((unsigned)&RCSTA*8)+5;
volatile bit CREN @ ((unsigned)&RCSTA*8)+4;
volatile bit RCIDL @ ((unsigned)&RCSTA*8)+3;
volatile bit FERR @ ((unsigned)&RCSTA*8)+2;
volatile bit OERR @ ((unsigned)&RCSTA*8)+1;
volatile bit RX9D @ ((unsigned)&RCSTA*8)+0;


volatile bit SPIWCOL @ ((unsigned)&SPICON*8)+7;
volatile bit SPIOV @ ((unsigned)&SPICON*8)+6;
volatile bit SPIEN @ ((unsigned)&SPICON*8)+5;
volatile bit SPICKP @ ((unsigned)&SPICON*8)+4;
volatile bit SPIM3 @ ((unsigned)&SPICON*8)+3;
volatile bit SPIM2 @ ((unsigned)&SPICON*8)+2;
volatile bit SPIM1 @ ((unsigned)&SPICON*8)+1;
volatile bit SPIM0 @ ((unsigned)&SPICON*8)+0;


volatile bit CKE @ ((unsigned)&SPICON2*8)+6;
volatile bit MODE @ ((unsigned)&SPICON2*8)+5;
volatile bit SPIBF @ ((unsigned)&SPICON2*8)+0;


volatile bit LVD_RES @ ((unsigned)&LVDCON*8)+7;
volatile bit LVD_SEL2 @ ((unsigned)&LVDCON*8)+3;
volatile bit LVD_SEL1 @ ((unsigned)&LVDCON*8)+2;
volatile bit LVD_SEL0 @ ((unsigned)&LVDCON*8)+1;
volatile bit LVDEN @ ((unsigned)&LVDCON*8)+0;


volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC0 @ ((unsigned)&PORTC*8)+0;


volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;


volatile bit IOCC1 @ ((unsigned)&IOCC*8)+1;
volatile bit IOCC0 @ ((unsigned)&IOCC*8)+0;


volatile bit IOCA7 @ ((unsigned)&IOCA*8)+7;
volatile bit IOCA6 @ ((unsigned)&IOCA*8)+6;
volatile bit IOCA5 @ ((unsigned)&IOCA*8)+5;
volatile bit IOCA4 @ ((unsigned)&IOCA*8)+4;
volatile bit IOCA3 @ ((unsigned)&IOCA*8)+3;
volatile bit IOCA2 @ ((unsigned)&IOCA*8)+2;
volatile bit IOCA1 @ ((unsigned)&IOCA*8)+1;
volatile bit IOCA0 @ ((unsigned)&IOCA*8)+0;


volatile bit PWM1IOS2 @ ((unsigned)&PWMIOS0*8)+6;
volatile bit PWM1IOS1 @ ((unsigned)&PWMIOS0*8)+5;
volatile bit PWM1IOS0 @ ((unsigned)&PWMIOS0*8)+4;
volatile bit PWM0IOS2 @ ((unsigned)&PWMIOS0*8)+2;
volatile bit PWM0IOS1 @ ((unsigned)&PWMIOS0*8)+1;
volatile bit PWM0IOS0 @ ((unsigned)&PWMIOS0*8)+0;


volatile bit PWM3IOS2 @ ((unsigned)&PWMIOS1*8)+6;
volatile bit PWM3IOS1 @ ((unsigned)&PWMIOS1*8)+5;
volatile bit PWM3IOS0 @ ((unsigned)&PWMIOS1*8)+4;
volatile bit PWM2IOS2 @ ((unsigned)&PWMIOS1*8)+2;
volatile bit PWM2IOS1 @ ((unsigned)&PWMIOS1*8)+1;
volatile bit PWM2IOS0 @ ((unsigned)&PWMIOS1*8)+0;


volatile bit PWM4IOS2 @ ((unsigned)&PWMIOS2*8)+2;
volatile bit PWM4IOS1 @ ((unsigned)&PWMIOS2*8)+1;
volatile bit PWM4IOS0 @ ((unsigned)&PWMIOS2*8)+0;


volatile bit LCDEN @ ((unsigned)&LCDCON*8)+7;
volatile bit FRAME @ ((unsigned)&LCDCON*8)+6;
volatile bit BIAS @ ((unsigned)&LCDCON*8)+5;
volatile bit LCDISLE1 @ ((unsigned)&LCDCON*8)+1;
volatile bit LCDISLE0 @ ((unsigned)&LCDCON*8)+0;


volatile bit CS7SEL @ ((unsigned)&CSSEL0*8)+7;
volatile bit CS6SEL @ ((unsigned)&CSSEL0*8)+6;
volatile bit CS5SEL @ ((unsigned)&CSSEL0*8)+5;
volatile bit CS4SEL @ ((unsigned)&CSSEL0*8)+4;
volatile bit CS3SEL @ ((unsigned)&CSSEL0*8)+3;
volatile bit CS2SEL @ ((unsigned)&CSSEL0*8)+2;
volatile bit CS1SEL @ ((unsigned)&CSSEL0*8)+1;
volatile bit CS0SEL @ ((unsigned)&CSSEL0*8)+0;


volatile bit CS15SEL @ ((unsigned)&CSSEL1*8)+7;
volatile bit CS14SEL @ ((unsigned)&CSSEL1*8)+6;
volatile bit CS13SEL @ ((unsigned)&CSSEL1*8)+5;
volatile bit CS12SEL @ ((unsigned)&CSSEL1*8)+4;
volatile bit CS11SEL @ ((unsigned)&CSSEL1*8)+3;
volatile bit CS10SEL @ ((unsigned)&CSSEL1*8)+2;
volatile bit CS9SEL @ ((unsigned)&CSSEL1*8)+1;
volatile bit CS8SEL @ ((unsigned)&CSSEL1*8)+0;


volatile bit CS17SEL @ ((unsigned)&CSSEL2*8)+1;
volatile bit CS16SEL @ ((unsigned)&CSSEL2*8)+0;


volatile bit CS7EN @ ((unsigned)&CSEN0*8)+7;
volatile bit CS6EN @ ((unsigned)&CSEN0*8)+6;
volatile bit CS5EN @ ((unsigned)&CSEN0*8)+5;
volatile bit CS4EN @ ((unsigned)&CSEN0*8)+4;
volatile bit CS3EN @ ((unsigned)&CSEN0*8)+3;
volatile bit CS2EN @ ((unsigned)&CSEN0*8)+2;
volatile bit CS1EN @ ((unsigned)&CSEN0*8)+1;
volatile bit CS0EN @ ((unsigned)&CSEN0*8)+0;


volatile bit CS15EN @ ((unsigned)&CSEN1*8)+7;
volatile bit CS14EN @ ((unsigned)&CSEN1*8)+6;
volatile bit CS13EN @ ((unsigned)&CSEN1*8)+5;
volatile bit CS12EN @ ((unsigned)&CSEN1*8)+4;
volatile bit CS11EN @ ((unsigned)&CSEN1*8)+3;
volatile bit CS10EN @ ((unsigned)&CSEN1*8)+2;
volatile bit CS9EN @ ((unsigned)&CSEN1*8)+1;
volatile bit CS8EN @ ((unsigned)&CSEN1*8)+0;


volatile bit CS17EN @ ((unsigned)&CSEN2*8)+1;
volatile bit CS16EN @ ((unsigned)&CSEN2*8)+0;


volatile bit T1GINV @ ((unsigned)&T1CON*8)+7;
volatile bit TMR1GE @ ((unsigned)&T1CON*8)+6;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T0OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;


# 27 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\sc.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 76
extern unsigned int flash_read(unsigned short addr);


# 149
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);

# 184
extern unsigned char __resetbits;
extern __bit __powerdown;
extern __bit __timeout;


# 12 "C:\mcuproject\scm\zdt\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\Touch_Kscan_Library.h"
#pragma warning disable 752,759

# 5 "C:\mcuproject\scm\zdt\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\TouchKeyConst.h"
const unsigned char C_OPTION_REG_ = 0x0A;

# 18 "C:\mcuproject\scm\zdt\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\Touch_Kscan_Library.h"
extern void CheckTouchKey(void);
extern void SystemEnterSleep();
extern volatile bit b_kerr;

# 26
extern volatile unsigned char KeyFlag[2];

# 63
const unsigned char Table_KeyChannel[] = {
0x40|0x10|0x08,
0x40|0x10|0x09,
0x40|0x10|0x0A
};


const unsigned char Table_KeyCap[] = {
0x38 | 0x2,
0x18 | 0x2,
0x00 | 0x2
};


const unsigned char Table_KeyDown[] = {
10,
10,
10
};

# 91
unsigned int KeyResSum[3];
unsigned int KeyOldValue0[3];
unsigned int KeyOldValue1[3];
unsigned int KeyOldValue2[3];
unsigned int KeyReference[3];
unsigned char KeyUpShake[3];

const unsigned int KeyValidTime = 60*(1000/4);
const unsigned char KeyTotalNumber = 3;
const unsigned char KeyShakeCounter = 1;
const unsigned char KeyValidNumber = 3;

const unsigned int KeyWakeUpEn = 0x0007;


const unsigned char WaterModeSel = 1;

# 17 "C:\mcuproject\scm\zdt\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
const static unsigned char numArray[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x71,0x79,0x50,0x73};

volatile unsigned char MainTime;
volatile bit B_MainLoop, B_OnOff;
unsigned int firstTime = 0;
unsigned int keyCount1 = 0;
unsigned int keyCount2 = 0;
unsigned int keyCount3 = 0;
unsigned char longKeyFalg = 0;
unsigned char workStep = 0;
unsigned char zeroStep = 0;
unsigned int ledLightTime = 0;
unsigned char shanShuoTime = 0;
unsigned char lowBatLockFlag = 0;
unsigned char showFlag = 0;
unsigned char showShiWei = 0;
unsigned char showGeWei = 0;
unsigned char showLed1 = 0;
unsigned char showLed2 = 0;
unsigned char count64ms = 0;
unsigned char count1s = 0;
unsigned char chrgFlag = 0;
unsigned char batValue = 0;
unsigned int batResult = 0;
unsigned char preBatValue = 0;
unsigned int chrgResult = 0;
unsigned char NoTouchTime = 0;
unsigned char count50 = 0;
unsigned char chrgFullFlag = 0;
unsigned char chrgDuty = 0;
unsigned char addTime = 0;
unsigned char subTime = 0;
unsigned char count15s = 0;
unsigned char chrgLockFlag = 0;
unsigned int chrgFullTime = 0;
unsigned int count900s = 0;
unsigned int sleepTime = 0;
unsigned char lowBatFlag = 0;
unsigned char lowBatTime = 0;
unsigned int tempResult = 0;
unsigned char checkTempTime = 0;
unsigned char chrgBatStep = 0;
unsigned char chrgBatStepTime = 0;
unsigned char key1ProtectTime = 0;
unsigned char key2ProtectTime = 0;
unsigned char key3ProtectTime = 0;
unsigned char keyCancelTime = 0;
unsigned char preZero = 0;


void initTM1650();
unsigned int Read_ADC(unsigned char ADCchannel,unsigned char ADCLDORef);
void checkChrgAD();
void gotoSleep();
void checkTempAD();
void tm1650cmd(unsigned char digAddr,unsigned char seg_data);
unsigned char TM1650_read();


void Init_System()
{
asm("nop");
asm("clrwdt");
INTCON = 0;
OSCCON = 0X71;
OPTION_REG = 0;
SWDTEN = 1;
asm("clrwdt");



TRISA = 0x22;
PORTA = 0;
TRISB = 0x18;
PORTB = 0;
WPUB = 0x00;
TRISC = 0;
PORTC = 0;
WPUC = 0x00;
ANSEL0 = 0x01;
ANSEL1 = 0x04;
ANSEL2 = 0x01;

PIE1 = 2;
PR2 = 250;
T2CON = 4;

INTCON = 0XC0;
ADCON0 = 0XC1;
ADON = 1;
}

# 117
void Refurbish_Sfr() {

PIE1 = 2;
PR2 = 250;
INTCON = 0XC0;
if (4 != T2CON)
T2CON = 4;
}


void KeyServer() {
if(key1ProtectTime > 0)
{
key1ProtectTime--;
}
if(key2ProtectTime > 0)
{
key2ProtectTime--;
}
if(key3ProtectTime > 0)
{
key3ProtectTime--;
}
static unsigned char KeyOldFlag = 0;
if (KeyFlag[0]) {
NoTouchTime = 0;
sleepTime = 0;
if ((KeyFlag[0] & 0x2) && key2ProtectTime == 0 && key3ProtectTime == 0) {

key1ProtectTime = 5;
if(++keyCount1 > 45)
{
keyCount1 = 45;
if(workStep > 1 && ++count50 > 25)
{
workStep--;
count50 = 0;
}
}
}
if ((KeyFlag[0] & 0x1) && key1ProtectTime == 0 && key3ProtectTime == 0) {

key2ProtectTime = 5;
if(++keyCount2 > 45)
{
keyCount2 = 45;
if(workStep < 20 && (workStep > 0 || ledLightTime > 0) && ++count50 > 25)
{
workStep++;
count50 = 0;
}
}
}
if ((KeyFlag[0] & 0x4) && key2ProtectTime == 0 && key1ProtectTime == 0) {

key3ProtectTime = 5;
if(++keyCount3 > 200)
{
keyCount3 = 200;
if(longKeyFalg == 0)
{
longKeyFalg = 1;
if(workStep > 0 || ledLightTime > 0)
{
workStep = 0;
zeroStep = 12;
ledLightTime = 0;
}
else if(lowBatFlag == 0)
{
workStep = 0;
zeroStep = 0;
ledLightTime = 300;
if(lowBatLockFlag)
{
shanShuoTime = 250;
}
}
}
else if(zeroStep > 0 && ++count64ms >= 12)
{
zeroStep--;
count64ms = 0;
}
}
if(lowBatFlag == 0 && ledLightTime == 0 && longKeyFalg == 0 && keyCount3 % 16 == 0)
{
zeroStep++;
preZero = zeroStep;
}
}
keyCancelTime = 0;
}
else
{
if(++keyCancelTime > 5)
{
keyCancelTime = 0;
if(keyCount1 > 5 && workStep > 1)
{
workStep--;
}
keyCount1 = 0;

if(keyCount2 > 5 && workStep < 20 && (workStep > 0 || ledLightTime > 0))
{
workStep++;
}
keyCount2 = 0;
}

# 233
if(preZero == 1 || preZero == 2)
{
preZero = 0;
zeroStep = 3;
}
longKeyFalg = 0;
keyCount3 = 0;
if(zeroStep > 0 && ++count64ms >= 12)
{
zeroStep--;
count64ms = 0;
}
}
}

# 259
unsigned int Read_ADC(unsigned char ADCchannel,unsigned char ADCLDORef)
{
unsigned int Adc_Result;
unsigned int Adc_ResultSum = 0;
unsigned char i=200;

if(ADCLDORef==0)
{
ADCON1 = 0B00000000;
}
else if(ADCLDORef==1)
{
ADCON1 = 0B00000101;
}
else
{
ADCON1 = 0B00000110;
}

CHS4 = 0;
if(ADCchannel >=16)
{
ADCchannel -= 16;
CHS4 = 1;
}

ADCON0 &= 0b11000011;
ADCON0 |= ADCchannel<<2;
asm("nop");
GODONE = 1;
while(GODONE==1&&i>0)
{
i--;
asm("nop");
}
Adc_Result = ADRESH<<4;
Adc_Result += ADRESL>>4;
return Adc_Result;

}

void checkChrgAD()
{
chrgResult = Read_ADC(16,1);
}

void checkTempAD()
{
PORTA |= 0x01;
tempResult = Read_ADC(1,1);
if(tempResult < 130)
{

if(++checkTempTime > 200)
{
checkTempTime = 0;
workStep = 0;

}
}
else
{
checkTempTime = 0;
}
}

void checkBat()
{
batResult = Read_ADC(10,1);
if(batResult < 1118)
{
batValue = 0;
if(workStep > 0 && ++lowBatTime > 200)
{
lowBatTime = 0;
lowBatFlag = 1;
workStep = 0;
zeroStep = 12;
ledLightTime = 0;
}
}
else
{
lowBatTime = 0;
if(batResult >= 1376)
{
batValue = ((batResult - 1376) /2) + 16;
}
else
{
batValue = (batResult - 1118) / 16;
}

if(batValue > 99)
batValue = 99;
}
}

# 361
void interrupt Isr_Timer()
{
if(TMR2IF)
{
TMR2IF = 0;
if(++MainTime >= 32)
{
MainTime = 0;
B_MainLoop = 1;
}
}
else
{
PIR1 = 0;
}

if(RACIF)
{
RACIF = 0;
PORTA;

}


if(RCCIF)
{
RCCIF = 0;
PORTC;

}
}

void WorkSleep()
{


static unsigned char time;

if(B_OnOff)time = 0;




time = 0;
INTCON = 0;
PIE1 = 0;
PIE2 = 0;
PIR1 = 0;
PIR2 = 0;
T2CON = 0;
ADCON1 = 0;
SWDTEN = 0;
asm("clrwdt");

ADCON0 = 0;


TRISA = 0x22;
PORTA = 0;
TRISB = 0x18;
TRISC = 0x00;
PORTC = 0x01;
PORTB = 0x80;
RACIF = 0;
IOCA = 0x20;
RACIE = 1;
PORTA;

# 439
SystemEnterSleep();
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
if(RACIF)
{
RACIF = 0;
PORTA;
}
if(RCCIF)
{
RCCIF = 0;
PORTC;
}

Refurbish_Sfr();
Init_System();


}




void TM1650_START()
{
RC0=1;
RB7=1;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
RB7=0;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
RC0=0;
}


void TM1650_STOP()
{
RB7=0;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
RC0=1;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
RB7=1;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
RC0=0;
RB7=0;
}



void write_8bit( unsigned char dat)
{
unsigned char i;
RC0=0;
for(i=0;i<8;i++)
{
if(dat&0x80)
{
RB7=1;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
RC0=1;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
RC0=0;
}
else
{
RB7=0;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
RC0=1;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
RC0=0;
}
dat<<=1;
}
RB7=1;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
RC0=1;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
RC0=0;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
}

# 543
unsigned char read_8bit()
{
unsigned char dat,i;
RB7=1;
dat=0;
for(i=0;i<8;i++)
{
RC0=1;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
dat<<=1;
if(RB7)
dat++;
RC0=0;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
}
RB7=0;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
RC0=1;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
RC0=0;
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;

return dat ;
}

unsigned char TM1650_read()
{
unsigned char key;
TM1650_START();
write_8bit(0x48);
key=read_8bit();
TM1650_STOP();
return key;
}

void tm1650cmd(unsigned char digAddr,unsigned char seg_data)
{
TM1650_START();
write_8bit(digAddr);
write_8bit(seg_data);
TM1650_STOP();
}


void initTM1650()
{
tm1650cmd(0X48,0x11);
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
tm1650cmd(0X68,0xFF);
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
tm1650cmd(0X6A,0xFF);
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
tm1650cmd(0X6C,0xFF);
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
tm1650cmd(0X6E,0xFF);


}

void refreshTM1650()
{
if(showFlag)
{
tm1650cmd(0X48,0x21);
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
tm1650cmd(0X68,showLed2);
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
tm1650cmd(0X6A,showShiWei);
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
tm1650cmd(0X6C,showGeWei);
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
tm1650cmd(0X6E,showLed1);
}
else if(sleepTime < 10)
{
tm1650cmd(0X68,0);
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
tm1650cmd(0X6A,0);
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
tm1650cmd(0X6C,0);
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
tm1650cmd(0X6E,0);
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
tm1650cmd(0X48,0x00);
asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");;
showShiWei = 0x00;
showGeWei = 0x00;
showLed1 = 0x00;
showLed2 = 0x00;
}
}


void setZeroStep()
{
if(zeroStep == 0)
{
showLed1 = 0x00;
showLed2 = 0x00;
}
else if(zeroStep == 1)
{
showLed1 = 0xE1;
showLed2 = 0x00;
}
else if(zeroStep == 2)
{
showLed1 = 0xE3;
showLed2 = 0x00;
}
else if(zeroStep == 3)
{
showLed1 = 0xE7;
showLed2 = 0x00;
}
else if(zeroStep == 4)
{
showLed1 = 0xFF;
showLed2 = 0x00;
}
else if(zeroStep == 5)
{
showLed1 = 0xFF;
showLed2 = 0x01;
}
else if(zeroStep == 6)
{
showLed1 = 0xFF;
showLed2 = 0x03;
}
else if(zeroStep == 7)
{
showLed1 = 0xFF;
showLed2 = 0x07;
}
else if(zeroStep == 8)
{
showLed1 = 0xFF;
showLed2 = 0x0F;
}
else if(zeroStep == 9)
{
showLed1 = 0xFF;
showLed2 = 0x2F;
}
else if(zeroStep == 10)
{
showLed1 = 0xFF;
showLed2 = 0x6F;
}
else if(zeroStep == 11)
{
showLed1 = 0xFF;
showLed2 = 0xEF;
}
else if(zeroStep == 12)
{
showLed1 = 0xFF;
showLed2 = 0xEF;
}
}


void setZeroStep2()
{
if(zeroStep == 0)
{
showLed1 = 0x00;
showLed2 = 0x00;
}
else if(zeroStep == 1)
{
showLed1 = 0x01;
showLed2 = 0x00;
}
else if(zeroStep == 2)
{
showLed1 = 0x02;
showLed2 = 0x00;
}
else if(zeroStep == 3)
{
showLed1 = 0x04;
showLed2 = 0x00;
}
else if(zeroStep == 4)
{
showLed1 = 0x10;
showLed2 = 0x00;
}
else if(zeroStep == 5)
{
showLed1 = 0x00;
showLed2 = 0x01;
}
else if(zeroStep == 6)
{
showLed1 = 0x00;
showLed2 = 0x02;
}
else if(zeroStep == 7)
{
showLed1 = 0x00;
showLed2 = 0x04;
}
else if(zeroStep == 8)
{
showLed1 = 0x00;
showLed2 = 0x08;
}
else if(zeroStep == 9)
{
showLed1 = 0x00;
showLed2 = 0x20;
}
else if(zeroStep == 10)
{
showLed1 = 0x00;
showLed2 = 0x40;
}
else if(zeroStep == 11)
{
showLed1 = 0x00;
showLed2 = 0x80;
}
else if(zeroStep == 12)
{
showLed1 = 0x00;
showLed2 = 0x10;
}
}

void showCtr()
{
if(firstTime > 0)
{
showFlag = 1;
sleepTime = 0;
initTM1650();
}
else if(workStep > 0)
{
showFlag = 1;
sleepTime = 0;
showLed1 = 0xFF;
showLed2 = 0xFF;
showShiWei = numArray[workStep / 10];
showGeWei = numArray[workStep % 10];
}
else if(ledLightTime > 0)
{
showFlag = 1;
sleepTime = 0;
if(preBatValue >= 85)
{
showShiWei = numArray[9];
showGeWei = numArray[9];
}
else if(preBatValue > 60)
{
showShiWei = numArray[8];
showGeWei = numArray[0];
}
else if(preBatValue > 40)
{
showShiWei = numArray[6];
showGeWei = numArray[0];
}
else if(preBatValue > 20)
{
showShiWei = numArray[4];
showGeWei = numArray[0];
}
else if(preBatValue > 0)
{
showShiWei = numArray[2];
showGeWei = numArray[0];
}
else
{
showShiWei = numArray[0];
showGeWei = numArray[0];
}
showLed1 = 0xFF;
showLed2 = 0xFF;
}
else if(chrgFlag)
{
showFlag = 1;
sleepTime = 0;
if(++chrgBatStepTime > 63)
{
chrgBatStepTime = 0;
if(preBatValue >= 99)
{
zeroStep = 0;
showShiWei = numArray[9];
showGeWei = numArray[9];
}
else
{
if(++zeroStep > 12)
{
zeroStep = 1;
}
showShiWei = 0x00;
showGeWei = 0x00;
}
}
setZeroStep2();

}
else if(zeroStep > 0)
{
showFlag = 1;
sleepTime = 0;
showShiWei = showGeWei = 0;
setZeroStep();
}
else
{
if(sleepTime > 10 && sleepTime % 20 == 0)
{
showFlag = 0;
tm1650cmd(0X48,0x04);
PORTC |= 0x01;
PORTB |= 0x80;
}
if(++sleepTime > 200)
{
sleepTime = 0;
WorkSleep();
}

}
}

void workCtr()
{
if(workStep > 0)
{
checkTempAD();
PWMIOS0 = 0x01;
PWMTH = 0x00;
PWMTL = 100;
PWMD01H = 0x00;
if(workStep <= 10)
{
PWMD0L = 50 + workStep;
}
else
{
PWMD0L = 40 + (workStep*2);
}
PWMCON1 = 0x00;
PWMCON2 = 0x00;
PWMCON0 = 0x41;
}
else if(chrgFlag && chrgFullFlag == 0 && chrgLockFlag == 0)
{
if(chrgResult < 70 && batResult <= 1555)
{
if(++addTime > 10 && chrgDuty < 35)
{
addTime = 0;
chrgDuty++;
}
}
else
{
addTime = 0;
}
if(chrgResult > 80 || batResult > 1555)
{
if(++subTime > 10 && chrgDuty > 10)
{
subTime = 0;
chrgDuty--;
}
}
else
{
subTime = 0;
}
PWMIOS1 = 0x20;
PWMTH = 0x00;
PWMTL = 70;
PWMD23H = 0x00;
PWMD3L = chrgDuty;
PWMCON1 = 0x00;
PWMCON2 = 0x00;
PWMCON0 = 0x08;
}
else
{
PWMCON0 = 0x00;
}
}

void chrgCtr()
{
if(0x20 & PORTA)
{
checkChrgAD();
chrgFlag = 1;
workStep = 0;
lowBatFlag = 0;
ledLightTime = 0;
if(batResult > 1555)
{
if(++chrgFullTime > 2500)
{
chrgFullTime = 0;
chrgFullFlag = 1;
}
}
else
{
chrgFullTime = 0;
}
}
else
{
if(chrgFlag)
{
zeroStep = 0;
}
chrgFlag = 0;
chrgFullFlag = 0;
chrgFullTime = 0;
chrgDuty = 0;
chrgLockFlag = 0;
}
}

void task1()
{
if(firstTime > 0)
{
firstTime--;
if(preBatValue < batValue)
{
preBatValue = batValue;
}
}
else
{
refreshTM1650();
}
if(++count1s >= 250)
{
count1s = 0;
if(workStep > 0)
{
if(++count900s > 675)
{
count900s = 0;
workStep = 0;
zeroStep = 0;
ledLightTime = 0;
}
}
else
{
count900s = 0;
}
if(ledLightTime > 0)
{
ledLightTime--;
}
if(chrgFlag)
{
if(preBatValue < 99 && preBatValue < batValue)
{
if(++count15s >= 15)
{
count15s = 0;
preBatValue++;
}
}
else
{
count15s = 0;
}
}
else
{
if(preBatValue > 0 && preBatValue > batValue)
{
if(++count15s >= 15)
{
count15s = 0;
preBatValue--;
}
}
else
{
count15s = 0;
}
}
}

}

# 1061
void main()
{
Init_System();
initTM1650();
firstTime = 250;
while(1)
{
if(B_MainLoop)
{
B_MainLoop = 0;
asm("clrwdt");

CheckTouchKey();

Refurbish_Sfr();
if(chrgFlag == 0)
KeyServer();
showCtr();
workCtr();
checkBat();
chrgCtr();
task1();

}
}
}
