

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Aug 08 14:48:48 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F6790
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text20,local,class=CODE,merge=1,delta=2
    16                           	psect	text24,local,class=CODE,merge=1,delta=2
    17                           	psect	text37,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	pa_nodes0,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.45
    23                           ; Generated 16/11/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F887 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	strings
    58  0800                     __pstrings:	
    59  0800                     stringtab:	
    60  0800                     __stringtab:	
    61  0800                     stringcode:	
    62                           ;	String table - string pointers are 1 byte each
    63                           
    64  0800                     stringdir:	
    65  0800  3008               	movlw	high stringdir
    66  0801  008A               	movwf	10
    67  0802  0804               	movf	4,w
    68  0803  0A84               	incf	4,f
    69  0804  0782               	addwf	2,f
    70  0805                     __stringbase:	
    71  0805  3400               	retlw	0
    72  0806                     __end_of__stringtab:	
    73  0806                     _numArray:	
    74  0806  343F               	retlw	63
    75  0807  3406               	retlw	6
    76  0808  345B               	retlw	91
    77  0809  344F               	retlw	79
    78  080A  3466               	retlw	102
    79  080B  346D               	retlw	109
    80  080C  347D               	retlw	125
    81  080D  3407               	retlw	7
    82  080E  347F               	retlw	127
    83  080F  346F               	retlw	111
    84  0810  3471               	retlw	113
    85  0811  3479               	retlw	121
    86  0812  3450               	retlw	80
    87  0813  3473               	retlw	115
    88  0814                     __end_of_numArray:	
    89  0814                     _Table_KeyFalg:	
    90  0814  3401               	retlw	1
    91  0815  3402               	retlw	2
    92  0816  3404               	retlw	4
    93  0817  3408               	retlw	8
    94  0818  3410               	retlw	16
    95  0819  3420               	retlw	32
    96  081A  3440               	retlw	64
    97  081B  3480               	retlw	128
    98  081C                     __end_of_Table_KeyFalg:	
    99  081C                     _Table_KeyDown:	
   100  081C  340A               	retlw	10
   101  081D  340A               	retlw	10
   102  081E  340A               	retlw	10
   103  081F                     __end_of_Table_KeyDown:	
   104  081F                     _Table_KeyCap:	
   105  081F  343A               	retlw	58
   106  0820  341A               	retlw	26
   107  0821  3402               	retlw	2
   108  0822                     __end_of_Table_KeyCap:	
   109  0822                     _Table_KeyChannel:	
   110  0822  3458               	retlw	88
   111  0823  3459               	retlw	89
   112  0824  345A               	retlw	90
   113  0825                     __end_of_Table_KeyChannel:	
   114  001D                     _PWMCON2	set	29
   115  001C                     _PWMD01H	set	28
   116  001A                     _PWMD3L	set	26
   117  0017                     _PWMD0L	set	23
   118  0016                     _PWMTH	set	22
   119  0015                     _PWMTL	set	21
   120  0014                     _PWMCON1	set	20
   121  0013                     _PWMCON0	set	19
   122  0012                     _T2CON	set	18
   123  000E                     _PWMD23H	set	14
   124  000D                     _PIE1	set	13
   125  000C                     _PIR1	set	12
   126  000B                     _INTCON	set	11
   127  0008                     _WPUB	set	8
   128  0006                     _PORTB	set	6
   129  0005                     _PORTA	set	5
   130  0001                     _TMR0	set	1
   131  0061                     _TMR2IF	set	97
   132  0058                     _RBIF	set	88
   133  0036                     _RB6	set	54
   134  0037                     _RB7	set	55
   135  009F                     _ADRESH	set	159
   136  009E                     _ADRESL	set	158
   137  009D                     _ADCON0	set	157
   138  009C                     _ADCON1	set	156
   139  0097                     _KEYCON2	set	151
   140  0095                     _KEYDATAH	set	149
   141  0094                     _KEYDATAL	set	148
   142  0093                     _KEYCON1	set	147
   143  0092                     _KEYCON0	set	146
   144  0091                     _PR2	set	145
   145  0088                     _OSCCON	set	136
   146  0086                     _TRISB	set	134
   147  0085                     _TRISA	set	133
   148  0081                     _OPTION_REG	set	129
   149  04E8                     _ADON	set	1256
   150  04E9                     _GODONE	set	1257
   151  04E6                     _CHS4	set	1254
   152  0441                     _SWDTEN	set	1089
   153  0436                     _TRISB6	set	1078
   154  0115                     _WPUC	set	277
   155  0108                     _PIE2	set	264
   156  0107                     _PIR2	set	263
   157  0841                     _RACIE	set	2113
   158  0839                     _RACIF	set	2105
   159  083A                     _RCCIF	set	2106
   160  018D                     _PWMIOS1	set	397
   161  018C                     _PWMIOS0	set	396
   162  0188                     _IOCA	set	392
   163  0186                     _TRISC	set	390
   164  0185                     _PORTC	set	389
   165  0C28                     _RC0	set	3112
   166                           
   167                           	psect	cinit
   168  000D                     start_initialization:	
   169                           ; #config settings
   170                           
   171  000D                     __initialization:	
   172  000D  3020               	movlw	low __pbssBANK0
   173                           
   174                           ; Clear objects allocated to BITCOMMON
   175  000E  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   176                           
   177                           ; Clear objects allocated to COMMON
   178  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   179  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   180                           
   181                           ; Clear objects allocated to BANK0
   182  0011  1383               	bcf	3,7	;select IRP bank0
   183  0012  0084               	movwf	4
   184  0013  3065               	movlw	low (__pbssBANK0+69)
   185  0014  118A  27EA  118A   	fcall	clear_ram0
   186                           
   187                           ; Clear objects allocated to BANK1
   188  0017  30A0               	movlw	low __pbssBANK1
   189  0018  0084               	movwf	4
   190  0019  30BB               	movlw	low (__pbssBANK1+27)
   191  001A  118A  27EA         	fcall	clear_ram0
   192  001C                     end_of_initialization:	
   193                           ;End of C runtime variable initialization code
   194                           
   195  001C                     __end_of__initialization:	
   196  001C  0183               	clrf	3
   197  001D  158A  2D8E         	ljmp	_main	;jump to C main() function
   198                           
   199                           	psect	bitbssCOMMON
   200  03C8                     __pbitbssCOMMON:	
   201  03C8                     _b_ksleep:	
   202  03C8                     	ds	1
   203  03C9                     _b_kerr:	
   204  03C9                     	ds	1
   205  03CA                     _b_kclr:	
   206  03CA                     	ds	1
   207  03CB                     _b_kover1:	
   208  03CB                     	ds	1
   209  03CC                     _b_kover:	
   210  03CC                     	ds	1
   211  03CD                     _B_OnOff:	
   212  03CD                     	ds	1
   213  03CE                     _B_MainLoop:	
   214  03CE                     	ds	1
   215                           
   216                           	psect	bssCOMMON
   217  007A                     __pbssCOMMON:	
   218  007A                     _zeroStep:	
   219  007A                     	ds	1
   220  007B                     _workStep:	
   221  007B                     	ds	1
   222                           
   223                           	psect	bssBANK0
   224  0020                     __pbssBANK0:	
   225  0020                     _KeyOldValue1:	
   226  0020                     	ds	6
   227  0026                     CheckValidTime@validtime:	
   228  0026                     	ds	2
   229  0028                     _KeyData:	
   230  0028                     	ds	2
   231  002A                     _KeyOldData:	
   232  002A                     	ds	2
   233  002C                     _tempResult:	
   234  002C                     	ds	2
   235  002E                     _sleepTime:	
   236  002E                     	ds	2
   237  0030                     _count900s:	
   238  0030                     	ds	2
   239  0032                     _chrgFullTime:	
   240  0032                     	ds	2
   241  0034                     _chrgResult:	
   242  0034                     	ds	2
   243  0036                     _batResult:	
   244  0036                     	ds	2
   245  0038                     _ledLightTime:	
   246  0038                     	ds	2
   247  003A                     _keyCount3:	
   248  003A                     	ds	2
   249  003C                     _keyCount2:	
   250  003C                     	ds	2
   251  003E                     _keyCount1:	
   252  003E                     	ds	2
   253  0040                     _firstTime:	
   254  0040                     	ds	2
   255  0042                     _KeyFlag:	
   256  0042                     	ds	2
   257  0044                     TurnKeyFlags@KeyNoTimes:	
   258  0044                     	ds	1
   259  0045                     TurnKeyFlags@KeyHaveTimes:	
   260  0045                     	ds	1
   261  0046                     CheckKeyOldValue@counter:	
   262  0046                     	ds	1
   263  0047                     _KeyMaxSub:	
   264  0047                     	ds	1
   265  0048                     _KeyCounter:	
   266  0048                     	ds	1
   267  0049                     _preZero:	
   268  0049                     	ds	1
   269  004A                     _keyCancelTime:	
   270  004A                     	ds	1
   271  004B                     _key3ProtectTime:	
   272  004B                     	ds	1
   273  004C                     _key2ProtectTime:	
   274  004C                     	ds	1
   275  004D                     _key1ProtectTime:	
   276  004D                     	ds	1
   277  004E                     _chrgBatStepTime:	
   278  004E                     	ds	1
   279  004F                     _checkTempTime:	
   280  004F                     	ds	1
   281  0050                     _lowBatTime:	
   282  0050                     	ds	1
   283  0051                     _lowBatFlag:	
   284  0051                     	ds	1
   285  0052                     _chrgLockFlag:	
   286  0052                     	ds	1
   287  0053                     _count15s:	
   288  0053                     	ds	1
   289  0054                     _subTime:	
   290  0054                     	ds	1
   291  0055                     _addTime:	
   292  0055                     	ds	1
   293  0056                     _chrgDuty:	
   294  0056                     	ds	1
   295  0057                     _chrgFullFlag:	
   296  0057                     	ds	1
   297  0058                     _count50:	
   298  0058                     	ds	1
   299  0059                     _preBatValue:	
   300  0059                     	ds	1
   301  005A                     _batValue:	
   302  005A                     	ds	1
   303  005B                     _chrgFlag:	
   304  005B                     	ds	1
   305  005C                     _count1s:	
   306  005C                     	ds	1
   307  005D                     _count64ms:	
   308  005D                     	ds	1
   309  005E                     _showLed2:	
   310  005E                     	ds	1
   311  005F                     _showLed1:	
   312  005F                     	ds	1
   313  0060                     _showGeWei:	
   314  0060                     	ds	1
   315  0061                     _showShiWei:	
   316  0061                     	ds	1
   317  0062                     _showFlag:	
   318  0062                     	ds	1
   319  0063                     _longKeyFalg:	
   320  0063                     	ds	1
   321  0064                     _MainTime:	
   322  0064                     	ds	1
   323                           
   324                           	psect	bssBANK1
   325  00A0                     __pbssBANK1:	
   326  00A0                     _KeyReference:	
   327  00A0                     	ds	6
   328  00A6                     _KeyOldValue2:	
   329  00A6                     	ds	6
   330  00AC                     _KeyOldValue0:	
   331  00AC                     	ds	6
   332  00B2                     _KeyResSum:	
   333  00B2                     	ds	6
   334  00B8                     _KeyUpShake:	
   335  00B8                     	ds	3
   336                           
   337                           	psect	clrtext
   338  07EA                     clear_ram0:	
   339                           ;	Called with FSR containing the base address, and
   340                           ;	W with the last address+1
   341                           
   342  07EA  0064               	clrwdt	;clear the watchdog before getting into this loop
   343  07EB                     clrloop0:	
   344  07EB  0180               	clrf	0	;clear RAM location pointed to by FSR
   345  07EC  0A84               	incf	4,f	;increment pointer
   346  07ED  0604               	xorwf	4,w	;XOR with final address
   347  07EE  1903               	btfsc	3,2	;have we reached the end yet?
   348  07EF  3400               	retlw	0	;all done for this memory range, return
   349  07F0  0604               	xorwf	4,w	;XOR again to restore value
   350  07F1  2FEB               	goto	clrloop0	;do the next byte
   351                           
   352                           	psect	cstackCOMMON
   353  0070                     __pcstackCOMMON:	
   354  0070                     ?_SystemEnterSleep:	
   355  0070                     ?_CheckTouchKey:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ?_Init_System:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     ?_Refurbish_Sfr:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0070                     ?_KeyServer:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0070                     ?_checkChrgAD:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     ?_checkTempAD:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0070                     ?_checkBat:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  0070                     ?_Isr_Timer:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0070                     ??_Isr_Timer:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ?_WorkSleep:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ?_TM1650_START:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0070                     ?_TM1650_STOP:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     ?_write_8bit:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0070                     ?_initTM1650:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ?_refreshTM1650:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ?_setZeroStep:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ?_setZeroStep2:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0070                     ?_showCtr:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ?_workCtr:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_chrgCtr:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_task1:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ?_main:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ?_KeyIsIn:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_KeyClearOne:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ?_KeyClearIn:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_KeyStopClear:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     ?_ClearResSum:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     ?_GetTouchKeyValue:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ?_CheckOnceResult:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0070                     ?_CheckKeyOldValue:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0070                     ?_TurnKeyFlags:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0070                     ?_CheckValidTime:	
   449                           ; 1 bytes @ 0x0
   450                           
   451                           
   452                           ; 1 bytes @ 0x0
   453  0070                     	ds	2
   454  0072                     ??_Init_System:	
   455  0072                     ??_Refurbish_Sfr:	
   456                           ; 1 bytes @ 0x2
   457                           
   458  0072                     ??_KeyServer:	
   459                           ; 1 bytes @ 0x2
   460                           
   461  0072                     ??_TM1650_START:	
   462                           ; 1 bytes @ 0x2
   463                           
   464  0072                     ??_TM1650_STOP:	
   465                           ; 1 bytes @ 0x2
   466                           
   467  0072                     ??_write_8bit:	
   468                           ; 1 bytes @ 0x2
   469                           
   470  0072                     ??_setZeroStep:	
   471                           ; 1 bytes @ 0x2
   472                           
   473  0072                     ??_setZeroStep2:	
   474                           ; 1 bytes @ 0x2
   475                           
   476  0072                     ??_KeyIsIn:	
   477                           ; 1 bytes @ 0x2
   478                           
   479  0072                     ??_KeyClearOne:	
   480                           ; 1 bytes @ 0x2
   481                           
   482  0072                     ??_ClearResSum:	
   483                           ; 1 bytes @ 0x2
   484                           
   485  0072                     ?_KeyHave:	
   486                           ; 1 bytes @ 0x2
   487                           
   488  0072                     ??_CheckValidTime:	
   489                           ; 1 bytes @ 0x2
   490                           
   491  0072                     ?___lbdiv:	
   492                           ; 1 bytes @ 0x2
   493                           
   494  0072                     ?___lbmod:	
   495                           ; 1 bytes @ 0x2
   496                           
   497  0072                     ?_Read_ADC:	
   498                           ; 1 bytes @ 0x2
   499                           
   500  0072                     ?___lwmod:	
   501                           ; 2 bytes @ 0x2
   502                           
   503  0072                     Read_ADC@ADCLDORef:	
   504                           ; 2 bytes @ 0x2
   505                           
   506  0072                     write_8bit@dat:	
   507                           ; 1 bytes @ 0x2
   508                           
   509  0072                     KeyIsIn@i:	
   510                           ; 1 bytes @ 0x2
   511                           
   512  0072                     KeyClearOne@cnt:	
   513                           ; 1 bytes @ 0x2
   514                           
   515  0072                     ClearResSum@cnt:	
   516                           ; 1 bytes @ 0x2
   517                           
   518  0072                     ___lbdiv@divisor:	
   519                           ; 1 bytes @ 0x2
   520                           
   521  0072                     ___lbmod@divisor:	
   522                           ; 1 bytes @ 0x2
   523                           
   524  0072                     KeyHave@flag:	
   525                           ; 1 bytes @ 0x2
   526                           
   527  0072                     ___lwmod@divisor:	
   528                           ; 2 bytes @ 0x2
   529                           
   530                           
   531                           ; 2 bytes @ 0x2
   532  0072                     	ds	1
   533  0073                     ??_KeyStopClear:	
   534  0073                     ??_GetTouchKeyValue:	
   535                           ; 1 bytes @ 0x3
   536                           
   537  0073                     ??___lbdiv:	
   538                           ; 1 bytes @ 0x3
   539                           
   540  0073                     ??___lbmod:	
   541                           ; 1 bytes @ 0x3
   542                           
   543  0073                     write_8bit@i:	
   544                           ; 1 bytes @ 0x3
   545                           
   546  0073                     KeyIsIn@cnt:	
   547                           ; 1 bytes @ 0x3
   548                           
   549  0073                     KeyStopClear@i:	
   550                           ; 1 bytes @ 0x3
   551                           
   552  0073                     ___lbdiv@dividend:	
   553                           ; 1 bytes @ 0x3
   554                           
   555  0073                     GetTouchKeyValue@temp:	
   556                           ; 1 bytes @ 0x3
   557                           
   558                           
   559                           ; 2 bytes @ 0x3
   560  0073                     	ds	1
   561  0074                     ??_Read_ADC:	
   562  0074                     ?_tm1650cmd:	
   563                           ; 1 bytes @ 0x4
   564                           
   565  0074                     ??_KeyClearIn:	
   566                           ; 1 bytes @ 0x4
   567                           
   568  0074                     ??_KeyHave:	
   569                           ; 1 bytes @ 0x4
   570                           
   571  0074                     ??_CheckKeyOldValue:	
   572                           ; 1 bytes @ 0x4
   573                           
   574  0074                     tm1650cmd@seg_data:	
   575                           ; 1 bytes @ 0x4
   576                           
   577  0074                     KeyClearIn@cnt:	
   578                           ; 1 bytes @ 0x4
   579                           
   580  0074                     KeyHave@cnt:	
   581                           ; 1 bytes @ 0x4
   582                           
   583  0074                     ___lbdiv@counter:	
   584                           ; 1 bytes @ 0x4
   585                           
   586  0074                     ___lbmod@dividend:	
   587                           ; 1 bytes @ 0x4
   588                           
   589  0074                     ___lwmod@dividend:	
   590                           ; 1 bytes @ 0x4
   591                           
   592                           
   593                           ; 2 bytes @ 0x4
   594  0074                     	ds	1
   595  0075                     ??_tm1650cmd:	
   596  0075                     ??_CheckOnceResult:	
   597                           ; 1 bytes @ 0x5
   598                           
   599  0075                     ??_TurnKeyFlags:	
   600                           ; 1 bytes @ 0x5
   601                           
   602  0075                     tm1650cmd@digAddr:	
   603                           ; 1 bytes @ 0x5
   604                           
   605  0075                     ___lbdiv@quotient:	
   606                           ; 1 bytes @ 0x5
   607                           
   608  0075                     ___lbmod@counter:	
   609                           ; 1 bytes @ 0x5
   610                           
   611  0075                     Read_ADC@Adc_Result:	
   612                           ; 1 bytes @ 0x5
   613                           
   614  0075                     GetTouchKeyValue@wake:	
   615                           ; 2 bytes @ 0x5
   616                           
   617                           
   618                           ; 2 bytes @ 0x5
   619  0075                     	ds	1
   620  0076                     ??_initTM1650:	
   621  0076                     ??_refreshTM1650:	
   622                           ; 1 bytes @ 0x6
   623                           
   624  0076                     ??_task1:	
   625                           ; 1 bytes @ 0x6
   626                           
   627  0076                     ??___lwmod:	
   628                           ; 1 bytes @ 0x6
   629                           
   630  0076                     ___lbmod@rem:	
   631                           ; 1 bytes @ 0x6
   632                           
   633  0076                     ___lwmod@counter:	
   634                           ; 1 bytes @ 0x6
   635                           
   636                           
   637                           ; 1 bytes @ 0x6
   638  0076                     	ds	1
   639  0077                     Read_ADC@i:	
   640  0077                     GetTouchKeyValue@cnt:	
   641                           ; 1 bytes @ 0x7
   642                           
   643                           
   644                           ; 1 bytes @ 0x7
   645  0077                     	ds	1
   646  0078                     ??_WorkSleep:	
   647  0078                     ??_showCtr:	
   648                           ; 1 bytes @ 0x8
   649                           
   650  0078                     Read_ADC@ADCchannel:	
   651                           ; 1 bytes @ 0x8
   652                           
   653                           
   654                           ; 1 bytes @ 0x8
   655  0078                     	ds	1
   656  0079                     ??_CheckTouchKey:	
   657  0079                     ??_checkChrgAD:	
   658                           ; 1 bytes @ 0x9
   659                           
   660  0079                     ??_checkTempAD:	
   661                           ; 1 bytes @ 0x9
   662                           
   663  0079                     ??_workCtr:	
   664                           ; 1 bytes @ 0x9
   665                           
   666  0079                     ??_chrgCtr:	
   667                           ; 1 bytes @ 0x9
   668                           
   669  0079                     ??_main:	
   670                           ; 1 bytes @ 0x9
   671                           
   672                           
   673                           	psect	cstackBANK0
   674  0065                     __pcstackBANK0:	
   675                           ; 1 bytes @ 0x9
   676                           
   677  0065                     ??_SystemEnterSleep:	
   678  0065                     ??_checkBat:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0065                     CheckOnceResult@OldValue:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0065                     CheckKeyOldValue@KeyResTemp:	
   685                           ; 2 bytes @ 0x0
   686                           
   687                           
   688                           ; 2 bytes @ 0x0
   689  0065                     	ds	2
   690  0067                     CheckOnceResult@KeyValue:	
   691  0067                     CheckKeyOldValue@KeyOldTemp:	
   692                           ; 2 bytes @ 0x2
   693                           
   694  0067                     SystemEnterSleep@KeyValue:	
   695                           ; 2 bytes @ 0x2
   696                           
   697                           
   698                           ; 2 bytes @ 0x2
   699  0067                     	ds	2
   700  0069                     CheckOnceResult@flag:	
   701  0069                     CheckKeyOldValue@cnt:	
   702                           ; 1 bytes @ 0x4
   703                           
   704  0069                     SystemEnterSleep@KeyResTemp:	
   705                           ; 1 bytes @ 0x4
   706                           
   707                           
   708                           ; 2 bytes @ 0x4
   709  0069                     	ds	1
   710  006A                     CheckOnceResult@KeyDown:	
   711                           
   712                           ; 1 bytes @ 0x5
   713  006A                     	ds	1
   714  006B                     CheckOnceResult@KeyResTemp:	
   715  006B                     SystemEnterSleep@wake:	
   716                           ; 2 bytes @ 0x6
   717                           
   718                           
   719                           ; 2 bytes @ 0x6
   720  006B                     	ds	2
   721  006D                     CheckOnceResult@cnt:	
   722  006D                     SystemEnterSleep@cnt:	
   723                           ; 1 bytes @ 0x8
   724                           
   725                           
   726                           ; 1 bytes @ 0x8
   727  006D                     	ds	1
   728                           
   729                           	psect	maintext
   730  0D8E                     __pmaintext:	
   731 ;;
   732 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   733 ;;
   734 ;; *************** function _main *****************
   735 ;; Defined at:
   736 ;;		line 1058 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;		None
   739 ;; Auto vars:     Size  Location     Type
   740 ;;		None
   741 ;; Return value:  Size  Location     Type
   742 ;;                  1    wreg      void 
   743 ;; Registers used:
   744 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   745 ;; Tracked objects:
   746 ;;		On entry : B00/0
   747 ;;		On exit  : 300/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   750 ;;      Params:         0       0       0       0       0
   751 ;;      Locals:         0       0       0       0       0
   752 ;;      Temps:          0       0       0       0       0
   753 ;;      Totals:         0       0       0       0       0
   754 ;;Total ram usage:        0 bytes
   755 ;; Hardware stack levels required when called:    6
   756 ;; This function calls:
   757 ;;		_CheckTouchKey
   758 ;;		_Init_System
   759 ;;		_KeyServer
   760 ;;		_Refurbish_Sfr
   761 ;;		_checkBat
   762 ;;		_chrgCtr
   763 ;;		_initTM1650
   764 ;;		_showCtr
   765 ;;		_task1
   766 ;;		_workCtr
   767 ;; This function is called by:
   768 ;;		Startup code after reset
   769 ;; This function uses a non-reentrant model
   770 ;;
   771                           
   772                           
   773                           ;psect for function _main
   774  0D8E                     _main:	
   775                           
   776                           ;main.c: 1060: Init_System();
   777                           
   778                           ;incstack = 0
   779                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   780  0D8E  118A  2640  158A   	fcall	_Init_System
   781                           
   782                           ;main.c: 1061: initTM1650();
   783  0D91  118A  2686  158A   	fcall	_initTM1650
   784                           
   785                           ;main.c: 1062: firstTime = 250;
   786  0D94  30FA               	movlw	250
   787  0D95  00C0               	movwf	_firstTime
   788  0D96  01C1               	clrf	_firstTime+1
   789  0D97                     l4780:	
   790                           
   791                           ;main.c: 1064: {
   792                           ;main.c: 1065: if(B_MainLoop)
   793  0D97  1F79               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   794  0D98  2D97               	goto	l4780
   795                           
   796                           ;main.c: 1066: {
   797                           ;main.c: 1067: B_MainLoop = 0;
   798  0D99  1379               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   799  0D9A  0064               	clrwdt	;# 
   800                           
   801                           ;main.c: 1070: CheckTouchKey();
   802  0D9B  118A  207A  158A   	fcall	_CheckTouchKey
   803                           
   804                           ;main.c: 1072: Refurbish_Sfr();
   805  0D9E  118A  260E  158A   	fcall	_Refurbish_Sfr
   806                           
   807                           ;main.c: 1073: if(chrgFlag == 0)
   808  0DA1  085B               	movf	_chrgFlag,w
   809  0DA2  1D03               	btfss	3,2
   810  0DA3  2DA7               	goto	l4792
   811                           
   812                           ;main.c: 1074: KeyServer();
   813  0DA4  158A  25B7  158A   	fcall	_KeyServer
   814  0DA7                     l4792:	
   815                           
   816                           ;main.c: 1075: showCtr();
   817  0DA7  118A  2222  158A   	fcall	_showCtr
   818                           
   819                           ;main.c: 1076: workCtr();
   820  0DAA  158A  2728  158A   	fcall	_workCtr
   821                           
   822                           ;main.c: 1077: checkBat();
   823  0DAD  158A  26D8  158A   	fcall	_checkBat
   824                           
   825                           ;main.c: 1078: chrgCtr();
   826  0DB0  158A  26A1  158A   	fcall	_chrgCtr
   827                           
   828                           ;main.c: 1079: task1();
   829  0DB3  118A  201F  158A   	fcall	_task1
   830  0DB6  2D97               	goto	l4780
   831  0DB7                     __end_of_main:	
   832                           
   833                           	psect	text3
   834  001F                     __ptext3:	
   835 ;; *************** function _task1 *****************
   836 ;; Defined at:
   837 ;;		line 985 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
   838 ;; Parameters:    Size  Location     Type
   839 ;;		None
   840 ;; Auto vars:     Size  Location     Type
   841 ;;		None
   842 ;; Return value:  Size  Location     Type
   843 ;;                  1    wreg      void 
   844 ;; Registers used:
   845 ;;		wreg, status,2, status,0, pclath, cstack
   846 ;; Tracked objects:
   847 ;;		On entry : 300/0
   848 ;;		On exit  : 300/0
   849 ;;		Unchanged: 0/0
   850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   851 ;;      Params:         0       0       0       0       0
   852 ;;      Locals:         0       0       0       0       0
   853 ;;      Temps:          0       0       0       0       0
   854 ;;      Totals:         0       0       0       0       0
   855 ;;Total ram usage:        0 bytes
   856 ;; Hardware stack levels used:    1
   857 ;; Hardware stack levels required when called:    4
   858 ;; This function calls:
   859 ;;		_refreshTM1650
   860 ;; This function is called by:
   861 ;;		_main
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           
   866                           ;psect for function _task1
   867  001F                     _task1:	
   868                           
   869                           ;main.c: 987: if(firstTime > 0)
   870                           
   871                           ;incstack = 0
   872                           ; Regs used in _task1: [wreg+status,2+status,0+pclath+cstack]
   873  001F  0840               	movf	_firstTime,w
   874  0020  0441               	iorwf	_firstTime+1,w
   875  0021  1903               	btfsc	3,2
   876  0022  282E               	goto	l4386
   877                           
   878                           ;main.c: 988: {
   879                           ;main.c: 989: firstTime--;
   880  0023  3001               	movlw	1
   881  0024  02C0               	subwf	_firstTime,f
   882  0025  1C03               	skipc
   883  0026  03C1               	decf	_firstTime+1,f
   884                           
   885                           ;main.c: 990: if(preBatValue < batValue)
   886  0027  085A               	movf	_batValue,w
   887  0028  0259               	subwf	_preBatValue,w
   888  0029  1803               	skipnc
   889  002A  2830               	goto	l4388
   890                           
   891                           ;main.c: 991: {
   892                           ;main.c: 992: preBatValue = batValue;
   893  002B  085A               	movf	_batValue,w
   894  002C  00D9               	movwf	_preBatValue
   895  002D  2830               	goto	l4388
   896  002E                     l4386:	
   897                           
   898                           ;main.c: 995: else
   899                           ;main.c: 996: {
   900                           ;main.c: 997: refreshTM1650();
   901  002E  233B  118A         	fcall	_refreshTM1650
   902  0030                     l4388:	
   903                           
   904                           ;main.c: 998: }
   905                           ;main.c: 999: if(++count1s >= 250)
   906  0030  30FA               	movlw	250
   907  0031  0ADC               	incf	_count1s,f
   908  0032  025C               	subwf	_count1s,w
   909  0033  1C03               	skipc
   910  0034  0008               	return
   911                           
   912                           ;main.c: 1000: {
   913                           ;main.c: 1001: count1s = 0;
   914  0035  01DC               	clrf	_count1s
   915                           
   916                           ;main.c: 1002: if(workStep > 0)
   917  0036  087B               	movf	_workStep,w
   918  0037  1903               	btfsc	3,2
   919  0038  284A               	goto	l4398
   920                           
   921                           ;main.c: 1003: {
   922                           ;main.c: 1004: if(++count900s > 675)
   923  0039  0AB0               	incf	_count900s,f
   924  003A  1903               	skipnz
   925  003B  0AB1               	incf	_count900s+1,f
   926  003C  3002               	movlw	2
   927  003D  0231               	subwf	_count900s+1,w
   928  003E  30A4               	movlw	164
   929  003F  1903               	skipnz
   930  0040  0230               	subwf	_count900s,w
   931  0041  1C03               	skipc
   932  0042  284C               	goto	l4400
   933                           
   934                           ;main.c: 1005: {
   935                           ;main.c: 1006: count900s = 0;
   936  0043  01B0               	clrf	_count900s
   937  0044  01B1               	clrf	_count900s+1
   938                           
   939                           ;main.c: 1007: workStep = 0;
   940  0045  01FB               	clrf	_workStep
   941                           
   942                           ;main.c: 1008: zeroStep = 0;
   943  0046  01FA               	clrf	_zeroStep
   944                           
   945                           ;main.c: 1009: ledLightTime = 0;
   946  0047  01B8               	clrf	_ledLightTime
   947  0048  01B9               	clrf	_ledLightTime+1
   948  0049  284C               	goto	l4400
   949  004A                     l4398:	
   950                           
   951                           ;main.c: 1012: else
   952                           ;main.c: 1013: {
   953                           ;main.c: 1014: count900s = 0;
   954  004A  01B0               	clrf	_count900s
   955  004B  01B1               	clrf	_count900s+1
   956  004C                     l4400:	
   957                           
   958                           ;main.c: 1015: }
   959                           ;main.c: 1016: if(ledLightTime > 0)
   960  004C  0838               	movf	_ledLightTime,w
   961  004D  0439               	iorwf	_ledLightTime+1,w
   962  004E  1903               	btfsc	3,2
   963  004F  2856               	goto	l4404
   964                           
   965                           ;main.c: 1017: {
   966                           ;main.c: 1018: ledLightTime--;
   967  0050  3001               	movlw	1
   968  0051  02B8               	subwf	_ledLightTime,f
   969  0052  3000               	movlw	0
   970  0053  1C03               	skipc
   971  0054  03B9               	decf	_ledLightTime+1,f
   972  0055  02B9               	subwf	_ledLightTime+1,f
   973  0056                     l4404:	
   974                           
   975                           ;main.c: 1019: }
   976                           ;main.c: 1020: if(chrgFlag)
   977  0056  085B               	movf	_chrgFlag,w
   978  0057  1903               	btfsc	3,2
   979  0058  286B               	goto	l4418
   980                           
   981                           ;main.c: 1021: {
   982                           ;main.c: 1022: if(preBatValue < 99 && preBatValue < batValue)
   983  0059  3063               	movlw	99
   984  005A  0259               	subwf	_preBatValue,w
   985  005B  1803               	skipnc
   986  005C  2869               	goto	l4416
   987  005D  085A               	movf	_batValue,w
   988  005E  0259               	subwf	_preBatValue,w
   989  005F  1803               	skipnc
   990  0060  2869               	goto	l4416
   991                           
   992                           ;main.c: 1023: {
   993                           ;main.c: 1024: if(++count15s >= 15)
   994  0061  300F               	movlw	15
   995  0062  0AD3               	incf	_count15s,f
   996  0063  0253               	subwf	_count15s,w
   997  0064  1C03               	skipc
   998  0065  0008               	return
   999                           
  1000                           ;main.c: 1025: {
  1001                           ;main.c: 1026: count15s = 0;
  1002  0066  01D3               	clrf	_count15s
  1003                           
  1004                           ;main.c: 1027: preBatValue++;
  1005  0067  0AD9               	incf	_preBatValue,f
  1006  0068  0008               	return
  1007  0069                     l4416:	
  1008                           
  1009                           ;main.c: 1030: else
  1010                           ;main.c: 1031: {
  1011                           ;main.c: 1032: count15s = 0;
  1012  0069  01D3               	clrf	_count15s
  1013  006A  0008               	return
  1014  006B                     l4418:	
  1015                           
  1016                           ;main.c: 1035: else
  1017                           ;main.c: 1036: {
  1018                           ;main.c: 1037: if(preBatValue > 0 && preBatValue > batValue)
  1019  006B  0859               	movf	_preBatValue,w
  1020  006C  1903               	btfsc	3,2
  1021  006D  2869               	goto	l4416
  1022  006E  0859               	movf	_preBatValue,w
  1023  006F  025A               	subwf	_batValue,w
  1024  0070  1803               	skipnc
  1025  0071  2869               	goto	l4416
  1026                           
  1027                           ;main.c: 1038: {
  1028                           ;main.c: 1039: if(++count15s >= 15)
  1029  0072  300F               	movlw	15
  1030  0073  0AD3               	incf	_count15s,f
  1031  0074  0253               	subwf	_count15s,w
  1032  0075  1C03               	skipc
  1033  0076  0008               	return
  1034                           
  1035                           ;main.c: 1040: {
  1036                           ;main.c: 1041: count15s = 0;
  1037  0077  01D3               	clrf	_count15s
  1038                           
  1039                           ;main.c: 1042: preBatValue--;
  1040  0078  03D9               	decf	_preBatValue,f
  1041  0079  0008               	return
  1042  007A                     __end_of_task1:	
  1043  007A                     __ptext25:	
  1044 ;; *************** function _CheckTouchKey *****************
  1045 ;; Defined at:
  1046 ;;		line 529 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1047 ;; Parameters:    Size  Location     Type
  1048 ;;		None
  1049 ;; Auto vars:     Size  Location     Type
  1050 ;;		None
  1051 ;; Return value:  Size  Location     Type
  1052 ;;                  1    wreg      void 
  1053 ;; Registers used:
  1054 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1055 ;; Tracked objects:
  1056 ;;		On entry : 0/0
  1057 ;;		On exit  : 300/0
  1058 ;;		Unchanged: 0/0
  1059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1060 ;;      Params:         0       0       0       0       0
  1061 ;;      Locals:         0       0       0       0       0
  1062 ;;      Temps:          0       0       0       0       0
  1063 ;;      Totals:         0       0       0       0       0
  1064 ;;Total ram usage:        0 bytes
  1065 ;; Hardware stack levels used:    1
  1066 ;; Hardware stack levels required when called:    5
  1067 ;; This function calls:
  1068 ;;		_CheckKeyOldValue
  1069 ;;		_CheckOnceResult
  1070 ;;		_CheckValidTime
  1071 ;;		_ClearResSum
  1072 ;;		_GetTouchKeyValue
  1073 ;;		_KeyStopClear
  1074 ;;		_TurnKeyFlags
  1075 ;; This function is called by:
  1076 ;;		_main
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           
  1081                           ;psect for function _CheckTouchKey
  1082  007A                     _CheckTouchKey:	
  1083                           
  1084                           ;CheckTouchKey.c: 531: if(!b_kover)
  1085                           
  1086                           ;incstack = 0
  1087                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1088  007A  1A79               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1089  007B  2888               	goto	l1659
  1090                           
  1091                           ;CheckTouchKey.c: 532: {
  1092                           ;CheckTouchKey.c: 534: GetTouchKeyValue();
  1093  007C  2582  118A         	fcall	_GetTouchKeyValue
  1094                           
  1095                           ;CheckTouchKey.c: 535: if(++KeyCounter >= 8)
  1096  007E  3008               	movlw	8
  1097  007F  1283               	bcf	3,5	;RP0=0, select bank0
  1098  0080  1303               	bcf	3,6	;RP1=0, select bank0
  1099  0081  0AC8               	incf	_KeyCounter,f
  1100  0082  0248               	subwf	_KeyCounter,w
  1101  0083  1C03               	skipc
  1102  0084  28A6               	goto	l4464
  1103                           
  1104                           ;CheckTouchKey.c: 536: {
  1105                           ;CheckTouchKey.c: 537: KeyCounter = 0;
  1106  0085  01C8               	clrf	_KeyCounter
  1107                           
  1108                           ;CheckTouchKey.c: 538: b_kover = 1;
  1109  0086  1679               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1110  0087  28A6               	goto	l4464
  1111  0088                     l1659:	
  1112                           
  1113                           ;CheckTouchKey.c: 541: else if(!b_kover1)
  1114  0088  19F9               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1115  0089  28A0               	goto	l4458
  1116                           
  1117                           ;CheckTouchKey.c: 542: {
  1118                           ;CheckTouchKey.c: 544: CheckOnceResult();
  1119  008A  210B  118A         	fcall	_CheckOnceResult
  1120                           
  1121                           ;CheckTouchKey.c: 547: TurnKeyFlags();
  1122  008C  25E1  118A         	fcall	_TurnKeyFlags
  1123                           
  1124                           ;CheckTouchKey.c: 548: b_kover1 = 1;
  1125  008E  15F9               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1126                           
  1127                           ;CheckTouchKey.c: 554: if(b_kerr || KeyCounter > KeyValidNumber)
  1128  008F  18F9               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1129  0090  2897               	goto	l4448
  1130  0091  3004               	movlw	4
  1131  0092  1283               	bcf	3,5	;RP0=0, select bank0
  1132  0093  1303               	bcf	3,6	;RP1=0, select bank0
  1133  0094  0248               	subwf	_KeyCounter,w
  1134  0095  1C03               	skipc
  1135  0096  289C               	goto	l4456
  1136  0097                     l4448:	
  1137                           
  1138                           ;CheckTouchKey.c: 555: {
  1139                           ;CheckTouchKey.c: 556: KeyStopClear();
  1140  0097  220C  118A         	fcall	_KeyStopClear
  1141                           
  1142                           ;CheckTouchKey.c: 557: b_kerr = 0;
  1143  0099  10F9               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1144                           
  1145                           ;CheckTouchKey.c: 558: b_kover = 0;
  1146  009A  1279               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1147                           
  1148                           ;CheckTouchKey.c: 559: b_kover1 = 0;
  1149  009B  11F9               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1150  009C                     l4456:	
  1151                           
  1152                           ;CheckTouchKey.c: 560: }
  1153                           ;CheckTouchKey.c: 561: KeyCounter = 0;
  1154  009C  1283               	bcf	3,5	;RP0=0, select bank0
  1155  009D  1303               	bcf	3,6	;RP1=0, select bank0
  1156  009E  01C8               	clrf	_KeyCounter
  1157                           
  1158                           ;CheckTouchKey.c: 562: }
  1159  009F  28A6               	goto	l4464
  1160  00A0                     l4458:	
  1161                           
  1162                           ;CheckTouchKey.c: 563: else
  1163                           ;CheckTouchKey.c: 564: {
  1164                           ;CheckTouchKey.c: 566: CheckKeyOldValue();
  1165  00A0  20A7  118A         	fcall	_CheckKeyOldValue
  1166                           
  1167                           ;CheckTouchKey.c: 568: ClearResSum();
  1168  00A2  255E  118A         	fcall	_ClearResSum
  1169                           
  1170                           ;CheckTouchKey.c: 570: b_kover = 0;
  1171  00A4  1279               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1172                           
  1173                           ;CheckTouchKey.c: 571: b_kover1 = 0;
  1174  00A5  11F9               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1175  00A6                     l4464:	
  1176                           
  1177                           ;CheckTouchKey.c: 572: }
  1178                           ;CheckTouchKey.c: 574: CheckValidTime();
  1179  00A6  2E1C               	ljmp	l3922
  1180  00A7                     __end_of_CheckTouchKey:	
  1181  00A7                     __ptext35:	
  1182 ;; *************** function _CheckKeyOldValue *****************
  1183 ;; Defined at:
  1184 ;;		line 369 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;		None
  1187 ;; Auto vars:     Size  Location     Type
  1188 ;;  KeyOldTemp      2    2[BANK0 ] unsigned int 
  1189 ;;  KeyResTemp      2    0[BANK0 ] unsigned int 
  1190 ;;  cnt             1    4[BANK0 ] unsigned char 
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  1    wreg      void 
  1193 ;; Registers used:
  1194 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 300/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1200 ;;      Params:         0       0       0       0       0
  1201 ;;      Locals:         0       5       0       0       0
  1202 ;;      Temps:          2       0       0       0       0
  1203 ;;      Totals:         2       5       0       0       0
  1204 ;;Total ram usage:        7 bytes
  1205 ;; Hardware stack levels used:    1
  1206 ;; Hardware stack levels required when called:    3
  1207 ;; This function calls:
  1208 ;;		_KeyIsIn
  1209 ;; This function is called by:
  1210 ;;		_CheckTouchKey
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214                           
  1215                           ;psect for function _CheckKeyOldValue
  1216  00A7                     _CheckKeyOldValue:	
  1217                           
  1218                           ;CheckTouchKey.c: 371: static unsigned char counter = 0;
  1219                           ;CheckTouchKey.c: 372: unsigned char cnt = 0;
  1220                           
  1221                           ;incstack = 0
  1222                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1223  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  1224  00A8  3004               	movlw	4
  1225  00A9  1303               	bcf	3,6	;RP1=0, select bank0
  1226  00AA  01E9               	clrf	CheckKeyOldValue@cnt
  1227                           
  1228                           ;CheckTouchKey.c: 373: unsigned int KeyResTemp;
  1229                           ;CheckTouchKey.c: 374: unsigned int KeyOldTemp;
  1230                           ;CheckTouchKey.c: 376: if(++counter < 4)
  1231  00AB  0AC6               	incf	CheckKeyOldValue@counter,f
  1232  00AC  0246               	subwf	CheckKeyOldValue@counter,w
  1233  00AD  1C03               	btfss	3,0
  1234  00AE  0008               	return
  1235                           
  1236                           ;CheckTouchKey.c: 378: counter = 0;
  1237  00AF  01C6               	clrf	CheckKeyOldValue@counter
  1238  00B0                     l3856:	
  1239                           
  1240                           ;CheckTouchKey.c: 381: {
  1241                           ;CheckTouchKey.c: 382: KeyResTemp = KeyResSum[cnt];
  1242  00B0  1003               	clrc
  1243  00B1  0D69               	rlf	CheckKeyOldValue@cnt,w
  1244  00B2  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  1245  00B3  0084               	movwf	4
  1246  00B4  1383               	bcf	3,7	;select IRP bank1
  1247  00B5  0800               	movf	0,w
  1248  00B6  00E5               	movwf	CheckKeyOldValue@KeyResTemp
  1249  00B7  0A84               	incf	4,f
  1250  00B8  0800               	movf	0,w
  1251  00B9  00E6               	movwf	CheckKeyOldValue@KeyResTemp+1
  1252                           
  1253                           ;CheckTouchKey.c: 383: if(!KeyIsIn(cnt))
  1254  00BA  0869               	movf	CheckKeyOldValue@cnt,w
  1255  00BB  21EC  118A         	fcall	_KeyIsIn
  1256  00BD  3A00               	xorlw	0
  1257                           
  1258                           ;CheckTouchKey.c: 384: {
  1259                           ;CheckTouchKey.c: 386: KeyOldTemp = KeyOldValue0[cnt] - KeyResTemp;
  1260  00BE  1003               	clrc
  1261  00BF  1D03               	skipz
  1262  00C0  28F5               	goto	L27
  1263  00C1  0D69               	rlf	CheckKeyOldValue@cnt,w
  1264  00C2  3EAC               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  1265  00C3  0084               	movwf	4
  1266  00C4  1383               	bcf	3,7	;select IRP bank1
  1267                           
  1268                           ;CheckTouchKey.c: 387: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  1269  00C5  2775  118A         	fcall	PL2	;call to abstracted procedure
  1270  00C7  1903               	skipnz
  1271  00C8  0267               	subwf	CheckKeyOldValue@KeyOldTemp,w
  1272  00C9  1C03               	skipc
  1273  00CA  28D1               	goto	L24
  1274  00CB  0F67               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  1275  00CC  28F4               	goto	l1622
  1276  00CD  0A68               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  1277                           
  1278                           ;CheckTouchKey.c: 388: {
  1279                           ;CheckTouchKey.c: 389: KeyOldTemp = KeyOldValue1[cnt] - KeyResTemp;
  1280  00CE  1003               	clrc
  1281  00CF  1D03               	btfss	3,2
  1282  00D0  28F5               	goto	L27
  1283  00D1                     L24:	
  1284  00D1  0D69               	rlf	CheckKeyOldValue@cnt,w
  1285  00D2  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1286  00D3  0084               	movwf	4
  1287                           
  1288                           ;CheckTouchKey.c: 390: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  1289  00D4  2775  118A         	fcall	PL2	;call to abstracted procedure
  1290  00D6  1903               	skipnz
  1291  00D7  0267               	subwf	CheckKeyOldValue@KeyOldTemp,w
  1292  00D8  1C03               	skipc
  1293  00D9  28E0               	goto	L25
  1294  00DA  0F67               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  1295  00DB  28F4               	goto	l1622
  1296  00DC  0A68               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  1297                           
  1298                           ;CheckTouchKey.c: 391: {
  1299                           ;CheckTouchKey.c: 392: KeyOldTemp = KeyOldValue2[cnt] - KeyResTemp;
  1300  00DD  1003               	clrc
  1301  00DE  1D03               	btfss	3,2
  1302  00DF  28F5               	goto	L27
  1303  00E0                     L25:	
  1304  00E0  0D69               	rlf	CheckKeyOldValue@cnt,w
  1305  00E1  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1306  00E2  0084               	movwf	4
  1307                           
  1308                           ;CheckTouchKey.c: 393: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  1309  00E3  2775  118A         	fcall	PL2	;call to abstracted procedure
  1310  00E5  1903               	skipnz
  1311  00E6  0267               	subwf	CheckKeyOldValue@KeyOldTemp,w
  1312  00E7  1C03               	skipc
  1313  00E8  28EF               	goto	L26
  1314  00E9  0F67               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  1315  00EA  28F4               	goto	l1622
  1316  00EB  0A68               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  1317                           
  1318                           ;CheckTouchKey.c: 394: {
  1319                           ;CheckTouchKey.c: 395: KeyReference[cnt] = KeyResTemp;
  1320  00EC  1003               	clrc
  1321  00ED  1D03               	btfss	3,2
  1322  00EE  28F5               	goto	L27
  1323  00EF                     L26:	
  1324  00EF  0D69               	rlf	CheckKeyOldValue@cnt,w
  1325  00F0  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  1326  00F1  0084               	movwf	4
  1327  00F2  27D4  118A         	fcall	PL22	;call to abstracted procedure
  1328  00F4                     l1622:	
  1329                           
  1330                           ;CheckTouchKey.c: 396: }
  1331                           ;CheckTouchKey.c: 397: }
  1332                           ;CheckTouchKey.c: 398: }
  1333                           ;CheckTouchKey.c: 399: }
  1334                           ;CheckTouchKey.c: 402: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  1335  00F4  1003               	clrc
  1336  00F5                     L27:	
  1337  00F5  0D69               	rlf	CheckKeyOldValue@cnt,w
  1338  00F6  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1339  00F7  0084               	movwf	4
  1340  00F8  1383               	bcf	3,7	;select IRP bank0
  1341  00F9  27B9  118A         	fcall	PL14	;call to abstracted procedure
  1342  00FB  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1343                           
  1344                           ;CheckTouchKey.c: 403: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  1345  00FC  27A7  118A         	fcall	PL10	;call to abstracted procedure
  1346  00FE  27B9  118A         	fcall	PL14	;call to abstracted procedure
  1347  0100  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1348                           
  1349                           ;CheckTouchKey.c: 404: KeyOldValue0[cnt] = KeyResTemp;
  1350  0101  27A7  118A         	fcall	PL10	;call to abstracted procedure
  1351  0103  27D4  118A         	fcall	PL22	;call to abstracted procedure
  1352  0105  3003               	movlw	3
  1353  0106  0AE9               	incf	CheckKeyOldValue@cnt,f
  1354  0107  0269               	subwf	CheckKeyOldValue@cnt,w
  1355  0108  1803               	btfsc	3,0
  1356  0109  0008               	return
  1357  010A  28B0               	goto	l3856
  1358  010B                     __end_of_CheckKeyOldValue:	
  1359  010B                     __ptext32:	
  1360 ;; *************** function _CheckOnceResult *****************
  1361 ;; Defined at:
  1362 ;;		line 255 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;		None
  1365 ;; Auto vars:     Size  Location     Type
  1366 ;;  KeyResTemp      2    6[BANK0 ] unsigned int 
  1367 ;;  KeyValue        2    2[BANK0 ] unsigned int 
  1368 ;;  OldValue        2    0[BANK0 ] unsigned int 
  1369 ;;  cnt             1    8[BANK0 ] unsigned char 
  1370 ;;  KeyDown         1    5[BANK0 ] unsigned char 
  1371 ;;  flag            1    4[BANK0 ] unsigned char 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : B00/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1381 ;;      Params:         0       0       0       0       0
  1382 ;;      Locals:         0       9       0       0       0
  1383 ;;      Temps:          4       0       0       0       0
  1384 ;;      Totals:         4       9       0       0       0
  1385 ;;Total ram usage:       13 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    3
  1388 ;; This function calls:
  1389 ;;		_KeyClearOne
  1390 ;;		_KeyHave
  1391 ;;		_KeyIsIn
  1392 ;; This function is called by:
  1393 ;;		_CheckTouchKey
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           
  1398                           ;psect for function _CheckOnceResult
  1399  010B                     _CheckOnceResult:	
  1400                           
  1401                           ;CheckTouchKey.c: 257: unsigned char cnt = 0;
  1402                           
  1403                           ;incstack = 0
  1404                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1405  010B  1283               	bcf	3,5	;RP0=0, select bank0
  1406  010C  1303               	bcf	3,6	;RP1=0, select bank0
  1407  010D  01ED               	clrf	CheckOnceResult@cnt
  1408                           
  1409                           ;CheckTouchKey.c: 258: unsigned char KeyDown;
  1410                           ;CheckTouchKey.c: 259: unsigned char flag;
  1411                           ;CheckTouchKey.c: 261: unsigned int KeyResTemp;
  1412                           ;CheckTouchKey.c: 262: unsigned int KeyValue;
  1413                           ;CheckTouchKey.c: 263: unsigned int OldValue;
  1414                           ;CheckTouchKey.c: 265: KeyData[0] = 0;
  1415  010E  01A8               	clrf	_KeyData	;volatile
  1416                           
  1417                           ;CheckTouchKey.c: 266: KeyData[1] = 0;
  1418  010F  01A9               	clrf	_KeyData+1	;volatile
  1419                           
  1420                           ;CheckTouchKey.c: 267: KeyMaxSub = 0;
  1421  0110  01C7               	clrf	_KeyMaxSub
  1422  0111                     l3782:	
  1423                           
  1424                           ;CheckTouchKey.c: 271: {
  1425                           ;CheckTouchKey.c: 272: flag = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  1426  0111  086D               	movf	CheckOnceResult@cnt,w
  1427  0112  3907               	andlw	7
  1428  0113  3E0F               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  1429  0114  0084               	movwf	4
  1430  0115  158A  2000  118A   	fcall	stringdir
  1431  0118  00E9               	movwf	CheckOnceResult@flag
  1432                           
  1433                           ;CheckTouchKey.c: 274: KeyResSum[cnt] >>= 3;
  1434  0119  1003               	clrc
  1435  011A  0D6D               	rlf	CheckOnceResult@cnt,w
  1436  011B  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  1437  011C  0084               	movwf	4
  1438  011D  3003               	movlw	3
  1439  011E                     u2655:	
  1440  011E  0A84               	incf	4,f
  1441  011F  1003               	clrc
  1442  0120  1383               	bcf	3,7	;select IRP bank1
  1443  0121  0C80               	rrf	0,f
  1444  0122  0384               	decf	4,f
  1445  0123  0C80               	rrf	0,f
  1446  0124  3EFF               	addlw	-1
  1447  0125  1D03               	skipz
  1448  0126  291E               	goto	u2655
  1449                           
  1450                           ;CheckTouchKey.c: 275: KeyResTemp = KeyResSum[cnt];
  1451  0127  1003               	clrc
  1452  0128  0D6D               	rlf	CheckOnceResult@cnt,w
  1453  0129  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  1454  012A  0084               	movwf	4
  1455  012B  0800               	movf	0,w
  1456  012C  00EB               	movwf	CheckOnceResult@KeyResTemp
  1457  012D  0A84               	incf	4,f
  1458  012E  0800               	movf	0,w
  1459  012F  00EC               	movwf	CheckOnceResult@KeyResTemp+1
  1460                           
  1461                           ;CheckTouchKey.c: 276: KeyDown = Table_KeyDown[cnt];
  1462  0130  086D               	movf	CheckOnceResult@cnt,w
  1463  0131  3E17               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  1464  0132  0084               	movwf	4
  1465  0133  158A  2000  118A   	fcall	stringdir
  1466  0136  00EA               	movwf	CheckOnceResult@KeyDown
  1467                           
  1468                           ;CheckTouchKey.c: 278: KeyValue = KeyResTemp + KeyDown;
  1469  0137  00E7               	movwf	CheckOnceResult@KeyValue
  1470  0138  01E8               	clrf	CheckOnceResult@KeyValue+1
  1471  0139  086B               	movf	CheckOnceResult@KeyResTemp,w
  1472  013A  07E7               	addwf	CheckOnceResult@KeyValue,f
  1473  013B  1803               	skipnc
  1474  013C  0AE8               	incf	CheckOnceResult@KeyValue+1,f
  1475  013D  086C               	movf	CheckOnceResult@KeyResTemp+1,w
  1476  013E  07E8               	addwf	CheckOnceResult@KeyValue+1,f
  1477                           
  1478                           ;CheckTouchKey.c: 280: if(!KeyIsIn(cnt))
  1479  013F  086D               	movf	CheckOnceResult@cnt,w
  1480  0140  21EC  118A         	fcall	_KeyIsIn
  1481  0142  3A00               	xorlw	0
  1482                           
  1483                           ;CheckTouchKey.c: 281: {
  1484                           ;CheckTouchKey.c: 283: OldValue = KeyOldValue2[cnt];
  1485  0143  1003               	clrc
  1486  0144  1D03               	skipz
  1487  0145  29A0               	goto	L23
  1488  0146  0D6D               	rlf	CheckOnceResult@cnt,w
  1489  0147  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1490  0148  0084               	movwf	4
  1491  0149  1383               	bcf	3,7	;select IRP bank1
  1492  014A  0800               	movf	0,w
  1493  014B  00E5               	movwf	CheckOnceResult@OldValue
  1494  014C  0A84               	incf	4,f
  1495  014D  0800               	movf	0,w
  1496  014E  00E6               	movwf	CheckOnceResult@OldValue+1
  1497                           
  1498                           ;CheckTouchKey.c: 285: if(KeyReference[cnt] > KeyValue)
  1499  014F  1003               	clrc
  1500  0150  0D6D               	rlf	CheckOnceResult@cnt,w
  1501  0151  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  1502  0152  2795  118A         	fcall	PL6	;call to abstracted procedure
  1503  0154  0268               	subwf	CheckOnceResult@KeyValue+1,w
  1504  0155  1D03               	skipz
  1505  0156  2959               	goto	u2675
  1506  0157  0875               	movf	??_CheckOnceResult,w
  1507  0158  0267               	subwf	CheckOnceResult@KeyValue,w
  1508  0159                     u2675:	
  1509  0159  1803               	skipnc
  1510  015A  2968               	goto	l3800
  1511                           
  1512                           ;CheckTouchKey.c: 286: {
  1513                           ;CheckTouchKey.c: 287: KeyResTemp = KeyReference[cnt] - KeyResTemp;
  1514  015B  1003               	clrc
  1515  015C  0D6D               	rlf	CheckOnceResult@cnt,w
  1516  015D  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  1517  015E  2795  118A         	fcall	PL6	;call to abstracted procedure
  1518  0160  086B               	movf	CheckOnceResult@KeyResTemp,w
  1519  0161  0275               	subwf	??_CheckOnceResult,w
  1520  0162  00EB               	movwf	CheckOnceResult@KeyResTemp
  1521  0163  086C               	movf	CheckOnceResult@KeyResTemp+1,w
  1522  0164  1C03               	skipc
  1523  0165  0A6C               	incf	CheckOnceResult@KeyResTemp+1,w
  1524  0166  0276               	subwf	??_CheckOnceResult+1,w
  1525  0167  298C               	goto	L21
  1526  0168                     l3800:	
  1527                           ;CheckTouchKey.c: 288: }
  1528                           
  1529                           
  1530                           ;CheckTouchKey.c: 289: else if ((OldValue > KeyValue) && (KeyOldValue1[cnt] > KeyValue))
  1531  0168  0866               	movf	CheckOnceResult@OldValue+1,w
  1532  0169  0268               	subwf	CheckOnceResult@KeyValue+1,w
  1533  016A  1D03               	skipz
  1534  016B  296E               	goto	u2685
  1535  016C  0865               	movf	CheckOnceResult@OldValue,w
  1536  016D  0267               	subwf	CheckOnceResult@KeyValue,w
  1537  016E                     u2685:	
  1538  016E  1803               	skipnc
  1539  016F  29E4               	goto	l3846
  1540  0170  1003               	clrc
  1541  0171  0D6D               	rlf	CheckOnceResult@cnt,w
  1542  0172  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1543  0173  2795  118A         	fcall	PL6	;call to abstracted procedure
  1544  0175  0268               	subwf	CheckOnceResult@KeyValue+1,w
  1545  0176  1D03               	skipz
  1546  0177  297A               	goto	u2695
  1547  0178  0875               	movf	??_CheckOnceResult,w
  1548  0179  0267               	subwf	CheckOnceResult@KeyValue,w
  1549  017A                     u2695:	
  1550  017A  1803               	skipnc
  1551  017B  29E4               	goto	l3846
  1552                           
  1553                           ;CheckTouchKey.c: 290: {
  1554                           ;CheckTouchKey.c: 291: KeyReference[cnt] = OldValue;
  1555  017C  1003               	clrc
  1556  017D  0D6D               	rlf	CheckOnceResult@cnt,w
  1557  017E  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  1558  017F  0084               	movwf	4
  1559  0180  0865               	movf	CheckOnceResult@OldValue,w
  1560  0181  0080               	movwf	0
  1561  0182  0A84               	incf	4,f
  1562  0183  0866               	movf	CheckOnceResult@OldValue+1,w
  1563  0184  0080               	movwf	0
  1564                           
  1565                           ;CheckTouchKey.c: 292: KeyResTemp = OldValue - KeyResTemp;
  1566  0185  086B               	movf	CheckOnceResult@KeyResTemp,w
  1567  0186  0265               	subwf	CheckOnceResult@OldValue,w
  1568  0187  00EB               	movwf	CheckOnceResult@KeyResTemp
  1569  0188  086C               	movf	CheckOnceResult@KeyResTemp+1,w
  1570  0189  1C03               	skipc
  1571  018A  0A6C               	incf	CheckOnceResult@KeyResTemp+1,w
  1572  018B  0266               	subwf	CheckOnceResult@OldValue+1,w
  1573  018C                     L21:	
  1574  018C  00EC               	movwf	CheckOnceResult@KeyResTemp+1
  1575                           
  1576                           ;CheckTouchKey.c: 297: }
  1577                           ;CheckTouchKey.c: 299: KeyUpShake[cnt] = 0;
  1578                           
  1579                           ;CheckTouchKey.c: 293: }
  1580  018D  086D               	movf	CheckOnceResult@cnt,w
  1581  018E  3EB8               	addlw	(low (_KeyUpShake| 0))& (0+255)
  1582  018F  0084               	movwf	4
  1583  0190  0180               	clrf	0
  1584                           
  1585                           ;CheckTouchKey.c: 302: {
  1586                           ;CheckTouchKey.c: 303: if(KeyResTemp >> 8)
  1587  0191  086C               	movf	CheckOnceResult@KeyResTemp+1,w
  1588  0192  1903               	btfsc	3,2
  1589  0193  2996               	goto	l3814
  1590                           
  1591                           ;CheckTouchKey.c: 304: {
  1592                           ;CheckTouchKey.c: 305: KeyDown = 0xFF;
  1593  0194  30FF               	movlw	255
  1594  0195  2997               	goto	L22
  1595  0196                     l3814:	
  1596                           ;CheckTouchKey.c: 306: }
  1597                           
  1598                           
  1599                           ;CheckTouchKey.c: 307: else
  1600                           ;CheckTouchKey.c: 308: {
  1601                           ;CheckTouchKey.c: 309: KeyDown = KeyResTemp & 0xFF;
  1602  0196  086B               	movf	CheckOnceResult@KeyResTemp,w
  1603  0197                     L22:	
  1604  0197  00EA               	movwf	CheckOnceResult@KeyDown
  1605                           
  1606                           ;CheckTouchKey.c: 310: }
  1607                           ;CheckTouchKey.c: 312: if(KeyMaxSub < KeyDown)
  1608  0198  0247               	subwf	_KeyMaxSub,w
  1609  0199  1803               	skipnc
  1610  019A  299E               	goto	l3820
  1611                           
  1612                           ;CheckTouchKey.c: 313: {
  1613                           ;CheckTouchKey.c: 314: KeyMaxSub = KeyDown;
  1614  019B  086A               	movf	CheckOnceResult@KeyDown,w
  1615  019C  00C7               	movwf	_KeyMaxSub
  1616  019D  29DE               	goto	l3844
  1617  019E                     l3820:	
  1618                           ;CheckTouchKey.c: 316: }
  1619                           
  1620                           ;CheckTouchKey.c: 315: KeyHave(cnt,flag);
  1621                           
  1622                           
  1623                           ;CheckTouchKey.c: 317: else
  1624                           ;CheckTouchKey.c: 318: {
  1625                           ;CheckTouchKey.c: 319: KeyCounter++;
  1626  019E  0AC8               	incf	_KeyCounter,f
  1627  019F  29E4               	goto	l3846
  1628  01A0                     L23:	
  1629                           ;CheckTouchKey.c: 328: else
  1630                           ;CheckTouchKey.c: 329: {
  1631                           ;CheckTouchKey.c: 332: if(KeyReference[cnt]+1 < KeyValue)
  1632                           
  1633  01A0  0D6D               	rlf	CheckOnceResult@cnt,w
  1634  01A1  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  1635  01A2  0084               	movwf	4
  1636  01A3  1383               	bcf	3,7	;select IRP bank1
  1637  01A4  0800               	movf	0,w
  1638  01A5  00F5               	movwf	??_CheckOnceResult
  1639  01A6  0A84               	incf	4,f
  1640  01A7  0800               	movf	0,w
  1641  01A8  00F6               	movwf	??_CheckOnceResult+1
  1642  01A9  0875               	movf	??_CheckOnceResult,w
  1643  01AA  3E01               	addlw	1
  1644  01AB  00F7               	movwf	??_CheckOnceResult+2
  1645  01AC  0876               	movf	??_CheckOnceResult+1,w
  1646  01AD  1803               	skipnc
  1647  01AE  3E01               	addlw	1
  1648  01AF  00F8               	movwf	??_CheckOnceResult+3
  1649  01B0  0868               	movf	CheckOnceResult@KeyValue+1,w
  1650  01B1  0278               	subwf	??_CheckOnceResult+3,w
  1651  01B2  1D03               	skipz
  1652  01B3  29B6               	goto	u2725
  1653  01B4  0867               	movf	CheckOnceResult@KeyValue,w
  1654  01B5  0277               	subwf	??_CheckOnceResult+2,w
  1655  01B6                     u2725:	
  1656  01B6  1C03               	btfss	3,0
  1657  01B7  29E4               	goto	l3846
  1658                           
  1659                           ;CheckTouchKey.c: 336: else if((KeyOldValue2[cnt]+KeyDown<KeyResTemp) || (KeyOldValue1[c
      +                          nt]+KeyDown<KeyResTemp))
  1660  01B8  1003               	clrc
  1661  01B9  0D6D               	rlf	CheckOnceResult@cnt,w
  1662  01BA  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1663  01BB  0084               	movwf	4
  1664  01BC  0800               	movf	0,w
  1665  01BD  2783  118A         	fcall	PL4	;call to abstracted procedure
  1666  01BF  1C03               	skipc
  1667  01C0  29CA               	goto	l3834
  1668  01C1  1003               	clrc
  1669  01C2  0D6D               	rlf	CheckOnceResult@cnt,w
  1670  01C3  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1671  01C4  0084               	movwf	4
  1672  01C5  0800               	movf	0,w
  1673  01C6  2783  118A         	fcall	PL4	;call to abstracted procedure
  1674  01C8  1803               	skipnc
  1675  01C9  29D6               	goto	l3838
  1676  01CA                     l3834:	
  1677                           
  1678                           ;CheckTouchKey.c: 337: {
  1679                           ;CheckTouchKey.c: 338: if(++KeyUpShake[cnt] > 8)
  1680  01CA  086D               	movf	CheckOnceResult@cnt,w
  1681  01CB  3EB8               	addlw	(low (_KeyUpShake| 0))& (0+255)
  1682  01CC  0084               	movwf	4
  1683  01CD  3009               	movlw	9
  1684  01CE  0A80               	incf	0,f
  1685  01CF  0200               	subwf	0,w
  1686  01D0  1C03               	skipc
  1687  01D1  29DA               	goto	l3842
  1688                           
  1689                           ;CheckTouchKey.c: 339: {
  1690                           ;CheckTouchKey.c: 340: KeyClearOne(cnt);
  1691  01D2  086D               	movf	CheckOnceResult@cnt,w
  1692  01D3  256D  118A         	fcall	_KeyClearOne
  1693                           
  1694                           ;CheckTouchKey.c: 341: continue;
  1695  01D5  29E4               	goto	l3846
  1696  01D6                     l3838:	
  1697                           
  1698                           ;CheckTouchKey.c: 344: else
  1699                           ;CheckTouchKey.c: 345: {
  1700                           ;CheckTouchKey.c: 346: KeyUpShake[cnt] = 0;
  1701  01D6  086D               	movf	CheckOnceResult@cnt,w
  1702  01D7  3EB8               	addlw	(low (_KeyUpShake| 0))& (0+255)
  1703  01D8  0084               	movwf	4
  1704  01D9  0180               	clrf	0
  1705  01DA                     l3842:	
  1706                           
  1707                           ;CheckTouchKey.c: 353: else if(!(KeyData[0] | KeyData[1]))
  1708  01DA  0829               	movf	_KeyData+1,w	;volatile
  1709  01DB  0428               	iorwf	_KeyData,w	;volatile
  1710  01DC  1D03               	btfss	3,2
  1711  01DD  29E4               	goto	l3846
  1712  01DE                     l3844:	
  1713                           
  1714                           ;CheckTouchKey.c: 354: {
  1715                           ;CheckTouchKey.c: 355: KeyHave(cnt,flag);
  1716  01DE  0869               	movf	CheckOnceResult@flag,w
  1717  01DF  00F2               	movwf	KeyHave@flag
  1718  01E0  01F3               	clrf	KeyHave@flag+1
  1719  01E1  086D               	movf	CheckOnceResult@cnt,w
  1720  01E2  2200  118A         	fcall	_KeyHave
  1721  01E4                     l3846:	
  1722  01E4  3003               	movlw	3
  1723  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  1724  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  1725  01E7  0AED               	incf	CheckOnceResult@cnt,f
  1726  01E8  026D               	subwf	CheckOnceResult@cnt,w
  1727  01E9  1803               	btfsc	3,0
  1728  01EA  0008               	return
  1729  01EB  2911               	goto	l3782
  1730  01EC                     __end_of_CheckOnceResult:	
  1731  01EC                     __ptext36:	
  1732 ;; *************** function _KeyIsIn *****************
  1733 ;; Defined at:
  1734 ;;		line 74 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1735 ;; Parameters:    Size  Location     Type
  1736 ;;  cnt             1    wreg     unsigned char 
  1737 ;; Auto vars:     Size  Location     Type
  1738 ;;  cnt             1    3[COMMON] unsigned char 
  1739 ;;  i               1    2[COMMON] unsigned char 
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  1    wreg      unsigned char 
  1742 ;; Registers used:
  1743 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 300/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1749 ;;      Params:         0       0       0       0       0
  1750 ;;      Locals:         2       0       0       0       0
  1751 ;;      Temps:          0       0       0       0       0
  1752 ;;      Totals:         2       0       0       0       0
  1753 ;;Total ram usage:        2 bytes
  1754 ;; Hardware stack levels used:    2
  1755 ;; Hardware stack levels required when called:    1
  1756 ;; This function calls:
  1757 ;;		Nothing
  1758 ;; This function is called by:
  1759 ;;		_KeyClearIn
  1760 ;;		_CheckOnceResult
  1761 ;;		_CheckKeyOldValue
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           
  1766                           ;psect for function _KeyIsIn
  1767  01EC                     _KeyIsIn:	
  1768                           
  1769                           ;incstack = 0
  1770                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  1771                           ;KeyIsIn@cnt stored from wreg
  1772  01EC  00F3               	movwf	KeyIsIn@cnt
  1773                           
  1774                           ;CheckTouchKey.c: 76: unsigned char i = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  1775  01ED  3907               	andlw	7
  1776  01EE  3E0F               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  1777  01EF  0084               	movwf	4
  1778  01F0  158A  2000  118A   	fcall	stringdir
  1779  01F3  00F2               	movwf	KeyIsIn@i
  1780                           
  1781                           ;CheckTouchKey.c: 78: if(cnt&0x8)
  1782  01F4  1DF3               	btfss	KeyIsIn@cnt,3
  1783  01F5  29FA               	goto	l3322
  1784                           
  1785                           ;CheckTouchKey.c: 79: {
  1786                           ;CheckTouchKey.c: 80: i &= KeyFlag[1];
  1787  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  1788  01F7  1303               	bcf	3,6	;RP1=0, select bank0
  1789  01F8  0843               	movf	_KeyFlag+1,w	;volatile
  1790  01F9  29FD               	goto	L28
  1791  01FA                     l3322:	
  1792                           ;CheckTouchKey.c: 81: }
  1793                           
  1794                           
  1795                           ;CheckTouchKey.c: 82: else
  1796                           ;CheckTouchKey.c: 83: {
  1797                           ;CheckTouchKey.c: 84: i &= KeyFlag[0];
  1798  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  1799  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  1800  01FC  0842               	movf	_KeyFlag,w	;volatile
  1801  01FD                     L28:	
  1802  01FD  05F2               	andwf	KeyIsIn@i,f
  1803                           
  1804                           ;CheckTouchKey.c: 85: }
  1805                           ;CheckTouchKey.c: 86: return i;
  1806  01FE  0872               	movf	KeyIsIn@i,w
  1807  01FF  0008               	return
  1808  0200                     __end_of_KeyIsIn:	
  1809  0200                     __ptext33:	
  1810 ;; *************** function _KeyHave *****************
  1811 ;; Defined at:
  1812 ;;		line 158 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  cnt             1    wreg     unsigned char 
  1815 ;;  flag            2    2[COMMON] unsigned int 
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;  cnt             1    4[COMMON] unsigned char 
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  1    wreg      void 
  1820 ;; Registers used:
  1821 ;;		wreg, status,2, status,0
  1822 ;; Tracked objects:
  1823 ;;		On entry : B00/0
  1824 ;;		On exit  : B00/0
  1825 ;;		Unchanged: 800/0
  1826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1827 ;;      Params:         2       0       0       0       0
  1828 ;;      Locals:         1       0       0       0       0
  1829 ;;      Temps:          0       0       0       0       0
  1830 ;;      Totals:         3       0       0       0       0
  1831 ;;Total ram usage:        3 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    1
  1834 ;; This function calls:
  1835 ;;		Nothing
  1836 ;; This function is called by:
  1837 ;;		_CheckOnceResult
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           
  1842                           ;psect for function _KeyHave
  1843  0200                     _KeyHave:	
  1844                           
  1845                           ;incstack = 0
  1846                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  1847                           ;KeyHave@cnt stored from wreg
  1848  0200  00F4               	movwf	KeyHave@cnt
  1849                           
  1850                           ;CheckTouchKey.c: 160: KeyCounter++;
  1851  0201  0AC8               	incf	_KeyCounter,f
  1852                           
  1853                           ;CheckTouchKey.c: 163: {
  1854                           ;CheckTouchKey.c: 164: KeyData[0] = 0;
  1855  0202  01A8               	clrf	_KeyData	;volatile
  1856                           
  1857                           ;CheckTouchKey.c: 165: KeyData[1] = 0;
  1858  0203  01A9               	clrf	_KeyData+1	;volatile
  1859                           
  1860                           ;CheckTouchKey.c: 166: if(cnt&0x8)
  1861  0204  1DF4               	btfss	KeyHave@cnt,3
  1862  0205  2A09               	goto	l3548
  1863                           
  1864                           ;CheckTouchKey.c: 167: {
  1865                           ;CheckTouchKey.c: 168: KeyData[1] = flag;
  1866  0206  0872               	movf	KeyHave@flag,w
  1867  0207  00A9               	movwf	_KeyData+1	;volatile
  1868                           
  1869                           ;CheckTouchKey.c: 169: }
  1870  0208  0008               	return
  1871  0209                     l3548:	
  1872                           
  1873                           ;CheckTouchKey.c: 170: else
  1874                           ;CheckTouchKey.c: 171: {
  1875                           ;CheckTouchKey.c: 172: KeyData[0] = flag;
  1876  0209  0872               	movf	KeyHave@flag,w
  1877  020A  00A8               	movwf	_KeyData	;volatile
  1878  020B  0008               	return
  1879  020C                     __end_of_KeyHave:	
  1880  020C                     __ptext28:	
  1881 ;; *************** function _KeyStopClear *****************
  1882 ;; Defined at:
  1883 ;;		line 123 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;		None
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;  i               1    3[COMMON] unsigned char 
  1888 ;; Return value:  Size  Location     Type
  1889 ;;                  1    wreg      void 
  1890 ;; Registers used:
  1891 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1892 ;; Tracked objects:
  1893 ;;		On entry : 0/0
  1894 ;;		On exit  : 800/0
  1895 ;;		Unchanged: 0/0
  1896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1897 ;;      Params:         0       0       0       0       0
  1898 ;;      Locals:         1       0       0       0       0
  1899 ;;      Temps:          0       0       0       0       0
  1900 ;;      Totals:         1       0       0       0       0
  1901 ;;Total ram usage:        1 bytes
  1902 ;; Hardware stack levels used:    1
  1903 ;; Hardware stack levels required when called:    2
  1904 ;; This function calls:
  1905 ;;		_KeyClearOne
  1906 ;; This function is called by:
  1907 ;;		_CheckTouchKey
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           
  1912                           ;psect for function _KeyStopClear
  1913  020C                     _KeyStopClear:	
  1914                           
  1915                           ;CheckTouchKey.c: 125: unsigned char i;
  1916                           ;CheckTouchKey.c: 126: KeyFlag[0] = 0;
  1917                           
  1918                           ;incstack = 0
  1919                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1920  020C  1283               	bcf	3,5	;RP0=0, select bank0
  1921  020D  1303               	bcf	3,6	;RP1=0, select bank0
  1922  020E  01C2               	clrf	_KeyFlag	;volatile
  1923                           
  1924                           ;CheckTouchKey.c: 127: KeyFlag[1] = 0;
  1925  020F  01C3               	clrf	_KeyFlag+1	;volatile
  1926                           
  1927                           ;CheckTouchKey.c: 128: for(i = 0; i < KeyTotalNumber; i++)
  1928  0210  01F3               	clrf	KeyStopClear@i
  1929  0211                     l3772:	
  1930                           
  1931                           ;CheckTouchKey.c: 129: {
  1932                           ;CheckTouchKey.c: 130: KeyResSum[i] = 0;
  1933  0211  1003               	clrc
  1934  0212  0D73               	rlf	KeyStopClear@i,w
  1935  0213  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  1936  0214  0084               	movwf	4
  1937  0215  1383               	bcf	3,7	;select IRP bank1
  1938  0216  0180               	clrf	0
  1939  0217  0A84               	incf	4,f
  1940  0218  0180               	clrf	0
  1941                           
  1942                           ;CheckTouchKey.c: 131: KeyClearOne(i);
  1943  0219  0873               	movf	KeyStopClear@i,w
  1944  021A  256D  118A         	fcall	_KeyClearOne
  1945  021C  3003               	movlw	3
  1946  021D  0AF3               	incf	KeyStopClear@i,f
  1947  021E  0273               	subwf	KeyStopClear@i,w
  1948  021F  1803               	btfsc	3,0
  1949  0220  0008               	return
  1950  0221  2A11               	goto	l3772
  1951  0222                     __end_of_KeyStopClear:	
  1952  0222                     __ptext5:	
  1953 ;; *************** function _showCtr *****************
  1954 ;; Defined at:
  1955 ;;		line 782 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;		None
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;		None
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  1    wreg      void 
  1962 ;; Registers used:
  1963 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1964 ;; Tracked objects:
  1965 ;;		On entry : 300/0
  1966 ;;		On exit  : 200/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1969 ;;      Params:         0       0       0       0       0
  1970 ;;      Locals:         0       0       0       0       0
  1971 ;;      Temps:          0       0       0       0       0
  1972 ;;      Totals:         0       0       0       0       0
  1973 ;;Total ram usage:        0 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    5
  1976 ;; This function calls:
  1977 ;;		_WorkSleep
  1978 ;;		___lbdiv
  1979 ;;		___lbmod
  1980 ;;		___lwmod
  1981 ;;		_initTM1650
  1982 ;;		_setZeroStep
  1983 ;;		_setZeroStep2
  1984 ;;		_tm1650cmd
  1985 ;; This function is called by:
  1986 ;;		_main
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           
  1991                           ;psect for function _showCtr
  1992  0222                     _showCtr:	
  1993                           
  1994                           ;main.c: 784: if(firstTime > 0)
  1995                           
  1996                           ;incstack = 0
  1997                           ; Regs used in _showCtr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1998  0222  0840               	movf	_firstTime,w
  1999  0223  0441               	iorwf	_firstTime+1,w
  2000  0224  1903               	btfsc	3,2
  2001  0225  2A2B               	goto	l4678
  2002                           
  2003                           ;main.c: 785: {
  2004                           ;main.c: 786: showFlag = 1;
  2005  0226  01E2               	clrf	_showFlag
  2006  0227  0AE2               	incf	_showFlag,f
  2007                           
  2008                           ;main.c: 787: sleepTime = 0;
  2009  0228  01AE               	clrf	_sleepTime
  2010  0229  01AF               	clrf	_sleepTime+1
  2011                           
  2012                           ;main.c: 788: initTM1650();
  2013  022A  2E86               	ljmp	l3610
  2014  022B                     l4678:	
  2015                           ;main.c: 789: }
  2016                           
  2017                           
  2018                           ;main.c: 790: else if(workStep > 0)
  2019  022B  087B               	movf	_workStep,w
  2020  022C  1903               	btfsc	3,2
  2021  022D  2A49               	goto	l4692
  2022  022E  30FF               	movlw	255
  2023                           
  2024                           ;main.c: 791: {
  2025                           ;main.c: 792: showFlag = 1;
  2026  022F  01E2               	clrf	_showFlag
  2027  0230  0AE2               	incf	_showFlag,f
  2028                           
  2029                           ;main.c: 793: sleepTime = 0;
  2030  0231  01AE               	clrf	_sleepTime
  2031  0232  01AF               	clrf	_sleepTime+1
  2032                           
  2033                           ;main.c: 794: showLed1 = 0xFF;
  2034  0233  00DF               	movwf	_showLed1
  2035                           
  2036                           ;main.c: 795: showLed2 = 0xFF;
  2037  0234  00DE               	movwf	_showLed2
  2038                           
  2039                           ;main.c: 796: showShiWei = numArray[workStep / 10];
  2040  0235  300A               	movlw	10
  2041  0236  00F2               	movwf	___lbdiv@divisor
  2042  0237  087B               	movf	_workStep,w
  2043  0238  22E0               	fcall	___lbdiv
  2044  0239  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  2045  023A  0084               	movwf	4
  2046  023B  158A  2000  118A   	fcall	stringdir
  2047  023E  00E1               	movwf	_showShiWei
  2048                           
  2049                           ;main.c: 797: showGeWei = numArray[workStep % 10];
  2050  023F  300A               	movlw	10
  2051  0240  00F2               	movwf	___lbmod@divisor
  2052  0241  087B               	movf	_workStep,w
  2053  0242  22FB               	fcall	___lbmod
  2054  0243  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  2055  0244  0084               	movwf	4
  2056  0245  158A  2000         	fcall	stringdir
  2057  0247  00E0               	movwf	_showGeWei
  2058                           
  2059                           ;main.c: 798: }
  2060  0248  0008               	return
  2061  0249                     l4692:	
  2062                           
  2063                           ;main.c: 799: else if(ledLightTime > 0)
  2064  0249  0838               	movf	_ledLightTime,w
  2065  024A  0439               	iorwf	_ledLightTime+1,w
  2066  024B  1903               	btfsc	3,2
  2067  024C  2A83               	goto	l4724
  2068  024D  3055               	movlw	85
  2069                           
  2070                           ;main.c: 800: {
  2071                           ;main.c: 801: showFlag = 1;
  2072  024E  01E2               	clrf	_showFlag
  2073  024F  0AE2               	incf	_showFlag,f
  2074                           
  2075                           ;main.c: 802: sleepTime = 0;
  2076  0250  01AE               	clrf	_sleepTime
  2077  0251  01AF               	clrf	_sleepTime+1
  2078                           
  2079                           ;main.c: 803: if(preBatValue >= 85)
  2080  0252  0259               	subwf	_preBatValue,w
  2081  0253  1C03               	skipc
  2082  0254  2A5D               	goto	l4702
  2083                           
  2084                           ;main.c: 804: {
  2085                           ;main.c: 805: showShiWei = numArray[9];
  2086  0255  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
  2087  0256  0084               	movwf	4
  2088  0257  158A  2000  118A   	fcall	stringdir
  2089  025A  00E1               	movwf	_showShiWei
  2090                           
  2091                           ;main.c: 806: showGeWei = numArray[9];
  2092  025B  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
  2093  025C  2A7B               	goto	L2
  2094  025D                     l4702:	
  2095                           ;main.c: 807: }
  2096                           
  2097                           
  2098                           ;main.c: 808: else if(preBatValue > 60)
  2099  025D  303D               	movlw	61
  2100  025E  0259               	subwf	_preBatValue,w
  2101  025F  1C03               	skipc
  2102  0260  2A63               	goto	l4706
  2103                           
  2104                           ;main.c: 809: {
  2105                           ;main.c: 810: showShiWei = numArray[8];
  2106  0261  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
  2107  0262  2A75               	goto	L3
  2108  0263                     l4706:	
  2109                           ;main.c: 812: }
  2110                           
  2111                           ;main.c: 811: showGeWei = numArray[0];
  2112                           
  2113                           
  2114                           ;main.c: 813: else if(preBatValue > 40)
  2115  0263  3029               	movlw	41
  2116  0264  0259               	subwf	_preBatValue,w
  2117  0265  1C03               	skipc
  2118  0266  2A69               	goto	l4710
  2119                           
  2120                           ;main.c: 814: {
  2121                           ;main.c: 815: showShiWei = numArray[6];
  2122  0267  3007               	movlw	low (((_numArray+6)-__stringbase)| (0+32768))
  2123  0268  2A75               	goto	L3
  2124  0269                     l4710:	
  2125                           ;main.c: 817: }
  2126                           
  2127                           ;main.c: 816: showGeWei = numArray[0];
  2128                           
  2129                           
  2130                           ;main.c: 818: else if(preBatValue > 20)
  2131  0269  3015               	movlw	21
  2132  026A  0259               	subwf	_preBatValue,w
  2133  026B  1C03               	skipc
  2134  026C  2A6F               	goto	l4714
  2135                           
  2136                           ;main.c: 819: {
  2137                           ;main.c: 820: showShiWei = numArray[4];
  2138  026D  3005               	movlw	low (((_numArray+4)-__stringbase)| (0+32768))
  2139  026E  2A75               	goto	L3
  2140  026F                     l4714:	
  2141                           ;main.c: 822: }
  2142                           
  2143                           ;main.c: 821: showGeWei = numArray[0];
  2144                           
  2145                           
  2146                           ;main.c: 823: else if(preBatValue > 0)
  2147  026F  0859               	movf	_preBatValue,w
  2148  0270  1903               	btfsc	3,2
  2149  0271  2A74               	goto	l4718
  2150                           
  2151                           ;main.c: 824: {
  2152                           ;main.c: 825: showShiWei = numArray[2];
  2153  0272  3003               	movlw	low (((_numArray+2)-__stringbase)| (0+32768))
  2154  0273  2A75               	goto	L3
  2155  0274                     l4718:	
  2156                           ;main.c: 827: }
  2157                           
  2158                           ;main.c: 826: showGeWei = numArray[0];
  2159                           
  2160                           
  2161                           ;main.c: 828: else
  2162                           ;main.c: 829: {
  2163                           ;main.c: 830: showShiWei = numArray[0];
  2164  0274  3001               	movlw	low (_numArray-__stringbase)
  2165  0275                     L3:	
  2166  0275  0084               	movwf	4
  2167  0276  158A  2000  118A   	fcall	stringdir
  2168  0279  00E1               	movwf	_showShiWei
  2169                           
  2170                           ;main.c: 831: showGeWei = numArray[0];
  2171  027A  3001               	movlw	low (_numArray-__stringbase)
  2172  027B                     L2:	
  2173  027B  0084               	movwf	4
  2174  027C  158A  2000         	fcall	stringdir
  2175  027E  00E0               	movwf	_showGeWei
  2176                           
  2177                           ;main.c: 832: }
  2178                           ;main.c: 833: showLed1 = 0xFF;
  2179  027F  30FF               	movlw	255
  2180  0280  00DF               	movwf	_showLed1
  2181                           
  2182                           ;main.c: 834: showLed2 = 0xFF;
  2183  0281  00DE               	movwf	_showLed2
  2184                           
  2185                           ;main.c: 835: }
  2186  0282  0008               	return
  2187  0283                     l4724:	
  2188                           
  2189                           ;main.c: 836: else if(chrgFlag)
  2190  0283  085B               	movf	_chrgFlag,w
  2191  0284  1903               	btfsc	3,2
  2192  0285  2AAC               	goto	l4750
  2193  0286  3040               	movlw	64
  2194                           
  2195                           ;main.c: 837: {
  2196                           ;main.c: 838: showFlag = 1;
  2197  0287  01E2               	clrf	_showFlag
  2198  0288  0AE2               	incf	_showFlag,f
  2199                           
  2200                           ;main.c: 839: sleepTime = 0;
  2201  0289  01AE               	clrf	_sleepTime
  2202  028A  01AF               	clrf	_sleepTime+1
  2203                           
  2204                           ;main.c: 840: if(++chrgBatStepTime > 63)
  2205  028B  0ACE               	incf	_chrgBatStepTime,f
  2206  028C  024E               	subwf	_chrgBatStepTime,w
  2207  028D  1C03               	skipc
  2208  028E  2AAB               	goto	l4748
  2209  028F  3063               	movlw	99
  2210                           
  2211                           ;main.c: 841: {
  2212                           ;main.c: 842: chrgBatStepTime = 0;
  2213  0290  01CE               	clrf	_chrgBatStepTime
  2214                           
  2215                           ;main.c: 843: if(preBatValue >= 99)
  2216  0291  0259               	subwf	_preBatValue,w
  2217  0292  1C03               	skipc
  2218  0293  2AA2               	goto	l4742
  2219  0294  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
  2220                           
  2221                           ;main.c: 844: {
  2222                           ;main.c: 845: zeroStep = 0;
  2223  0295  01FA               	clrf	_zeroStep
  2224                           
  2225                           ;main.c: 846: showShiWei = numArray[9];
  2226  0296  0084               	movwf	4
  2227  0297  158A  2000  118A   	fcall	stringdir
  2228  029A  00E1               	movwf	_showShiWei
  2229                           
  2230                           ;main.c: 847: showGeWei = numArray[9];
  2231  029B  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
  2232  029C  0084               	movwf	4
  2233  029D  158A  2000  118A   	fcall	stringdir
  2234  02A0  00E0               	movwf	_showGeWei
  2235                           
  2236                           ;main.c: 848: }
  2237  02A1  2AAB               	goto	l4748
  2238  02A2                     l4742:	
  2239                           
  2240                           ;main.c: 849: else
  2241                           ;main.c: 850: {
  2242                           ;main.c: 851: if(++zeroStep > 12)
  2243  02A2  300D               	movlw	13
  2244  02A3  0AFA               	incf	_zeroStep,f
  2245  02A4  027A               	subwf	_zeroStep,w
  2246  02A5  1C03               	skipc
  2247  02A6  2AA9               	goto	l4746
  2248                           
  2249                           ;main.c: 852: {
  2250                           ;main.c: 853: zeroStep = 1;
  2251  02A7  01FA               	clrf	_zeroStep
  2252  02A8  0AFA               	incf	_zeroStep,f
  2253  02A9                     l4746:	
  2254                           
  2255                           ;main.c: 854: }
  2256                           ;main.c: 855: showShiWei = 0x00;
  2257  02A9  01E1               	clrf	_showShiWei
  2258                           
  2259                           ;main.c: 856: showGeWei = 0x00;
  2260  02AA  01E0               	clrf	_showGeWei
  2261  02AB                     l4748:	
  2262                           
  2263                           ;main.c: 857: }
  2264                           ;main.c: 858: }
  2265                           ;main.c: 859: setZeroStep2();
  2266  02AB  2F18               	ljmp	l3690
  2267  02AC                     l4750:	
  2268                           ;main.c: 861: }
  2269                           
  2270                           
  2271                           ;main.c: 862: else if(zeroStep > 0)
  2272  02AC  087A               	movf	_zeroStep,w
  2273  02AD  1903               	btfsc	3,2
  2274  02AE  2AB6               	goto	l4758
  2275                           
  2276                           ;main.c: 863: {
  2277                           ;main.c: 864: showFlag = 1;
  2278  02AF  01E2               	clrf	_showFlag
  2279  02B0  0AE2               	incf	_showFlag,f
  2280                           
  2281                           ;main.c: 865: sleepTime = 0;
  2282  02B1  01AE               	clrf	_sleepTime
  2283  02B2  01AF               	clrf	_sleepTime+1
  2284                           
  2285                           ;main.c: 866: showShiWei = showGeWei = 0;
  2286  02B3  01E0               	clrf	_showGeWei
  2287  02B4  01E1               	clrf	_showShiWei
  2288                           
  2289                           ;main.c: 867: setZeroStep();
  2290  02B5  2EB6               	ljmp	l3628
  2291  02B6                     l4758:	
  2292                           ;main.c: 868: }
  2293                           
  2294                           
  2295                           ;main.c: 869: else
  2296                           ;main.c: 870: {
  2297                           ;main.c: 871: if(sleepTime > 10 && sleepTime % 20 == 0)
  2298  02B6  3000               	movlw	0
  2299  02B7  022F               	subwf	_sleepTime+1,w
  2300  02B8  300B               	movlw	11
  2301  02B9  1903               	skipnz
  2302  02BA  022E               	subwf	_sleepTime,w
  2303  02BB  1C03               	skipc
  2304  02BC  2AD3               	goto	l4770
  2305  02BD  3014               	movlw	20
  2306  02BE  00F2               	movwf	___lwmod@divisor
  2307  02BF  01F3               	clrf	___lwmod@divisor+1
  2308  02C0  082F               	movf	_sleepTime+1,w
  2309  02C1  00F5               	movwf	___lwmod@dividend+1
  2310  02C2  082E               	movf	_sleepTime,w
  2311  02C3  00F4               	movwf	___lwmod@dividend
  2312  02C4  2317  118A         	fcall	___lwmod
  2313  02C6  0872               	movf	?___lwmod,w
  2314  02C7  0473               	iorwf	?___lwmod+1,w
  2315  02C8  1D03               	btfss	3,2
  2316  02C9  2AD3               	goto	l4770
  2317  02CA  3004               	movlw	4
  2318                           
  2319                           ;main.c: 872: {
  2320                           ;main.c: 873: showFlag = 0;
  2321  02CB  01E2               	clrf	_showFlag
  2322                           
  2323                           ;main.c: 874: tm1650cmd(0X48,0x04);
  2324  02CC  00F4               	movwf	tm1650cmd@seg_data
  2325  02CD  3048               	movlw	72
  2326  02CE  23B5  118A         	fcall	_tm1650cmd
  2327                           
  2328                           ;main.c: 875: PORTC |= 0x01;
  2329                           
  2330                           ;main.c: 876: PORTB |= 0x80;
  2331  02D0  27CE  118A         	fcall	PL20	;call to abstracted procedure
  2332  02D2  1786               	bsf	6,7	;volatile
  2333  02D3                     l4770:	
  2334                           
  2335                           ;main.c: 877: }
  2336                           ;main.c: 878: if(++sleepTime > 40)
  2337  02D3  0AAE               	incf	_sleepTime,f
  2338  02D4  1903               	skipnz
  2339  02D5  0AAF               	incf	_sleepTime+1,f
  2340  02D6  3000               	movlw	0
  2341  02D7  022F               	subwf	_sleepTime+1,w
  2342  02D8  3029               	movlw	41
  2343  02D9  1903               	skipnz
  2344  02DA  022E               	subwf	_sleepTime,w
  2345  02DB  1C03               	skipc
  2346  02DC  0008               	return
  2347                           
  2348                           ;main.c: 879: {
  2349                           ;main.c: 880: sleepTime = 0;
  2350  02DD  01AE               	clrf	_sleepTime
  2351  02DE  01AF               	clrf	_sleepTime+1
  2352                           
  2353                           ;main.c: 881: WorkSleep();
  2354  02DF  2C92               	ljmp	l4600
  2355  02E0                     __end_of_showCtr:	
  2356  02E0                     __ptext15:	
  2357 ;; *************** function ___lbdiv *****************
  2358 ;; Defined at:
  2359 ;;		line 4 in file "C:\mcuproject\scm\SC8F67XX¿ª·¢°ü\SC8F67XX¿ª·¢°ü\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\c
      +ommon\lbdiv.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;  dividend        1    wreg     unsigned char 
  2362 ;;  divisor         1    2[COMMON] unsigned char 
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;  dividend        1    3[COMMON] unsigned char 
  2365 ;;  quotient        1    5[COMMON] unsigned char 
  2366 ;;  counter         1    4[COMMON] unsigned char 
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  1    wreg      unsigned char 
  2369 ;; Registers used:
  2370 ;;		wreg, status,2, status,0
  2371 ;; Tracked objects:
  2372 ;;		On entry : 300/0
  2373 ;;		On exit  : 300/0
  2374 ;;		Unchanged: 300/0
  2375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2376 ;;      Params:         1       0       0       0       0
  2377 ;;      Locals:         3       0       0       0       0
  2378 ;;      Temps:          0       0       0       0       0
  2379 ;;      Totals:         4       0       0       0       0
  2380 ;;Total ram usage:        4 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; Hardware stack levels required when called:    1
  2383 ;; This function calls:
  2384 ;;		Nothing
  2385 ;; This function is called by:
  2386 ;;		_showCtr
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           
  2391                           ;psect for function ___lbdiv
  2392  02E0                     ___lbdiv:	
  2393                           
  2394                           ;incstack = 0
  2395                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2396                           ;___lbdiv@dividend stored from wreg
  2397  02E0  00F3               	movwf	___lbdiv@dividend
  2398  02E1  01F5               	clrf	___lbdiv@quotient
  2399  02E2  0872               	movf	___lbdiv@divisor,w
  2400  02E3  1903               	btfsc	3,2
  2401  02E4  2AF9               	goto	l3952
  2402  02E5  01F4               	clrf	___lbdiv@counter
  2403  02E6                     l3938:	
  2404  02E6  0AF4               	incf	___lbdiv@counter,f
  2405  02E7  1BF2               	btfsc	___lbdiv@divisor,7
  2406  02E8  2AEC               	goto	l1952
  2407  02E9  1003               	clrc
  2408  02EA  0DF2               	rlf	___lbdiv@divisor,f
  2409  02EB  2AE6               	goto	l3938
  2410  02EC                     l1952:	
  2411  02EC  1003               	clrc
  2412  02ED  0DF5               	rlf	___lbdiv@quotient,f
  2413  02EE  0872               	movf	___lbdiv@divisor,w
  2414  02EF  0273               	subwf	___lbdiv@dividend,w
  2415  02F0  1C03               	skipc
  2416  02F1  2AF6               	goto	L14
  2417  02F2  0872               	movf	___lbdiv@divisor,w
  2418  02F3  02F3               	subwf	___lbdiv@dividend,f
  2419  02F4  1475               	bsf	___lbdiv@quotient,0
  2420  02F5  1003               	clrc
  2421  02F6                     L14:	
  2422  02F6  0CF2               	rrf	___lbdiv@divisor,f
  2423  02F7  0BF4               	decfsz	___lbdiv@counter,f
  2424  02F8  2AEC               	goto	l1952
  2425  02F9                     l3952:	
  2426  02F9  0875               	movf	___lbdiv@quotient,w
  2427  02FA  0008               	return
  2428  02FB                     __end_of___lbdiv:	
  2429  02FB                     __ptext14:	
  2430 ;; *************** function ___lbmod *****************
  2431 ;; Defined at:
  2432 ;;		line 4 in file "C:\mcuproject\scm\SC8F67XX¿ª·¢°ü\SC8F67XX¿ª·¢°ü\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\c
      +ommon\lbmod.c"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;  dividend        1    wreg     unsigned char 
  2435 ;;  divisor         1    2[COMMON] unsigned char 
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  dividend        1    4[COMMON] unsigned char 
  2438 ;;  rem             1    6[COMMON] unsigned char 
  2439 ;;  counter         1    5[COMMON] unsigned char 
  2440 ;; Return value:  Size  Location     Type
  2441 ;;                  1    wreg      unsigned char 
  2442 ;; Registers used:
  2443 ;;		wreg, status,2, status,0
  2444 ;; Tracked objects:
  2445 ;;		On entry : 300/0
  2446 ;;		On exit  : 300/0
  2447 ;;		Unchanged: 300/0
  2448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2449 ;;      Params:         1       0       0       0       0
  2450 ;;      Locals:         3       0       0       0       0
  2451 ;;      Temps:          1       0       0       0       0
  2452 ;;      Totals:         5       0       0       0       0
  2453 ;;Total ram usage:        5 bytes
  2454 ;; Hardware stack levels used:    1
  2455 ;; Hardware stack levels required when called:    1
  2456 ;; This function calls:
  2457 ;;		Nothing
  2458 ;; This function is called by:
  2459 ;;		_showCtr
  2460 ;; This function uses a non-reentrant model
  2461 ;;
  2462                           
  2463                           
  2464                           ;psect for function ___lbmod
  2465  02FB                     ___lbmod:	
  2466                           
  2467                           ;incstack = 0
  2468                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  2469                           ;___lbmod@dividend stored from wreg
  2470  02FB  00F4               	movwf	___lbmod@dividend
  2471  02FC  3008               	movlw	8
  2472  02FD  00F5               	movwf	___lbmod@counter
  2473  02FE  01F6               	clrf	___lbmod@rem
  2474  02FF                     l3960:	
  2475  02FF  0874               	movf	___lbmod@dividend,w
  2476  0300  00F3               	movwf	??___lbmod
  2477  0301  3007               	movlw	7
  2478  0302  1003               	clrc
  2479  0303                     L13:	
  2480  0303  0CF3               	rrf	??___lbmod,f
  2481  0304  3EFF               	addlw	-1
  2482  0305  1003               	clrc
  2483  0306  1D03               	skipz
  2484  0307  2B03               	goto	L13
  2485  0308  0D76               	rlf	___lbmod@rem,w
  2486  0309  0473               	iorwf	??___lbmod,w
  2487  030A  00F6               	movwf	___lbmod@rem
  2488  030B  1003               	clrc
  2489  030C  0DF4               	rlf	___lbmod@dividend,f
  2490  030D  0872               	movf	___lbmod@divisor,w
  2491  030E  0276               	subwf	___lbmod@rem,w
  2492  030F  1C03               	skipc
  2493  0310  2B13               	goto	l3968
  2494  0311  0872               	movf	___lbmod@divisor,w
  2495  0312  02F6               	subwf	___lbmod@rem,f
  2496  0313                     l3968:	
  2497  0313  0BF5               	decfsz	___lbmod@counter,f
  2498  0314  2AFF               	goto	l3960
  2499  0315  0876               	movf	___lbmod@rem,w
  2500  0316  0008               	return
  2501  0317                     __end_of___lbmod:	
  2502  0317                     __ptext13:	
  2503 ;; *************** function ___lwmod *****************
  2504 ;; Defined at:
  2505 ;;		line 6 in file "C:\mcuproject\scm\SC8F67XX¿ª·¢°ü\SC8F67XX¿ª·¢°ü\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\c
      +ommon\lwmod.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;  divisor         2    2[COMMON] unsigned int 
  2508 ;;  dividend        2    4[COMMON] unsigned int 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;  counter         1    6[COMMON] unsigned char 
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  2    2[COMMON] unsigned int 
  2513 ;; Registers used:
  2514 ;;		wreg, status,2, status,0
  2515 ;; Tracked objects:
  2516 ;;		On entry : 300/0
  2517 ;;		On exit  : 300/0
  2518 ;;		Unchanged: 300/0
  2519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2520 ;;      Params:         4       0       0       0       0
  2521 ;;      Locals:         1       0       0       0       0
  2522 ;;      Temps:          0       0       0       0       0
  2523 ;;      Totals:         5       0       0       0       0
  2524 ;;Total ram usage:        5 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; Hardware stack levels required when called:    1
  2527 ;; This function calls:
  2528 ;;		Nothing
  2529 ;; This function is called by:
  2530 ;;		_showCtr
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           
  2535                           ;psect for function ___lwmod
  2536  0317                     ___lwmod:	
  2537                           
  2538                           ;incstack = 0
  2539                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2540  0317  0872               	movf	___lwmod@divisor,w
  2541  0318  0473               	iorwf	___lwmod@divisor+1,w
  2542  0319  1903               	btfsc	3,2
  2543  031A  2B36               	goto	l3990
  2544  031B  01F6               	clrf	___lwmod@counter
  2545  031C                     L11:	
  2546  031C  0AF6               	incf	___lwmod@counter,f
  2547  031D  1BF3               	btfsc	___lwmod@divisor+1,7
  2548  031E  2B23               	goto	l3982
  2549  031F  1003               	clrc
  2550  0320  0DF2               	rlf	___lwmod@divisor,f
  2551  0321  0DF3               	rlf	___lwmod@divisor+1,f
  2552  0322  2B1C               	goto	L11
  2553  0323                     l3982:	
  2554  0323  0873               	movf	___lwmod@divisor+1,w
  2555  0324  0275               	subwf	___lwmod@dividend+1,w
  2556  0325  1D03               	skipz
  2557  0326  2B29               	goto	u3045
  2558  0327  0872               	movf	___lwmod@divisor,w
  2559  0328  0274               	subwf	___lwmod@dividend,w
  2560  0329                     u3045:	
  2561  0329  1C03               	skipc
  2562  032A  2B32               	goto	L12
  2563  032B  0872               	movf	___lwmod@divisor,w
  2564  032C  02F4               	subwf	___lwmod@dividend,f
  2565  032D  0873               	movf	___lwmod@divisor+1,w
  2566  032E  1C03               	skipc
  2567  032F  03F5               	decf	___lwmod@dividend+1,f
  2568  0330  02F5               	subwf	___lwmod@dividend+1,f
  2569  0331  1003               	clrc
  2570  0332                     L12:	
  2571  0332  0CF3               	rrf	___lwmod@divisor+1,f
  2572  0333  0CF2               	rrf	___lwmod@divisor,f
  2573  0334  0BF6               	decfsz	___lwmod@counter,f
  2574  0335  2B23               	goto	l3982
  2575  0336                     l3990:	
  2576  0336  0875               	movf	___lwmod@dividend+1,w
  2577  0337  00F3               	movwf	?___lwmod+1
  2578  0338  0874               	movf	___lwmod@dividend,w
  2579  0339  00F2               	movwf	?___lwmod
  2580  033A  0008               	return
  2581  033B                     __end_of___lwmod:	
  2582  033B                     __ptext4:	
  2583 ;; *************** function _refreshTM1650 *****************
  2584 ;; Defined at:
  2585 ;;		line 609 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;		None
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;		None
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      void 
  2592 ;; Registers used:
  2593 ;;		wreg, status,2, status,0, pclath, cstack
  2594 ;; Tracked objects:
  2595 ;;		On entry : 300/0
  2596 ;;		On exit  : 300/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2599 ;;      Params:         0       0       0       0       0
  2600 ;;      Locals:         0       0       0       0       0
  2601 ;;      Temps:          0       0       0       0       0
  2602 ;;      Totals:         0       0       0       0       0
  2603 ;;Total ram usage:        0 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    3
  2606 ;; This function calls:
  2607 ;;		_tm1650cmd
  2608 ;; This function is called by:
  2609 ;;		_task1
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           
  2614                           ;psect for function _refreshTM1650
  2615  033B                     _refreshTM1650:	
  2616                           
  2617                           ;main.c: 611: if(showFlag)
  2618                           
  2619                           ;incstack = 0
  2620                           ; Regs used in _refreshTM1650: [wreg+status,2+status,0+pclath+cstack]
  2621  033B  0862               	movf	_showFlag,w
  2622  033C  1903               	btfsc	3,2
  2623  033D  2B76               	goto	l3616
  2624                           
  2625                           ;main.c: 612: {
  2626                           ;main.c: 613: tm1650cmd(0X48,0x21);
  2627  033E  3021               	movlw	33
  2628  033F  00F4               	movwf	tm1650cmd@seg_data
  2629  0340  3048               	movlw	72
  2630  0341  23B5  118A         	fcall	_tm1650cmd
  2631  0343  0000               	nop	;# 
  2632  0344  0000               	nop	;# 
  2633  0345  0000               	nop	;# 
  2634  0346  0000               	nop	;# 
  2635  0347  0000               	nop	;# 
  2636  0348  0000               	nop	;# 
  2637                           
  2638                           ;main.c: 615: tm1650cmd(0X68,showLed2);
  2639  0349  1283               	bcf	3,5	;RP0=0, select bank0
  2640  034A  1303               	bcf	3,6	;RP1=0, select bank0
  2641  034B  085E               	movf	_showLed2,w
  2642  034C  00F4               	movwf	tm1650cmd@seg_data
  2643  034D  3068               	movlw	104
  2644  034E  23B5  118A         	fcall	_tm1650cmd
  2645  0350  0000               	nop	;# 
  2646  0351  0000               	nop	;# 
  2647  0352  0000               	nop	;# 
  2648  0353  0000               	nop	;# 
  2649  0354  0000               	nop	;# 
  2650  0355  0000               	nop	;# 
  2651                           
  2652                           ;main.c: 617: tm1650cmd(0X6A,showShiWei);
  2653  0356  1283               	bcf	3,5	;RP0=0, select bank0
  2654  0357  1303               	bcf	3,6	;RP1=0, select bank0
  2655  0358  0861               	movf	_showShiWei,w
  2656  0359  00F4               	movwf	tm1650cmd@seg_data
  2657  035A  306A               	movlw	106
  2658  035B  23B5  118A         	fcall	_tm1650cmd
  2659  035D  0000               	nop	;# 
  2660  035E  0000               	nop	;# 
  2661  035F  0000               	nop	;# 
  2662  0360  0000               	nop	;# 
  2663  0361  0000               	nop	;# 
  2664  0362  0000               	nop	;# 
  2665                           
  2666                           ;main.c: 619: tm1650cmd(0X6C,showGeWei);
  2667  0363  1283               	bcf	3,5	;RP0=0, select bank0
  2668  0364  1303               	bcf	3,6	;RP1=0, select bank0
  2669  0365  0860               	movf	_showGeWei,w
  2670  0366  00F4               	movwf	tm1650cmd@seg_data
  2671  0367  306C               	movlw	108
  2672  0368  23B5  118A         	fcall	_tm1650cmd
  2673  036A  0000               	nop	;# 
  2674  036B  0000               	nop	;# 
  2675  036C  0000               	nop	;# 
  2676  036D  0000               	nop	;# 
  2677  036E  0000               	nop	;# 
  2678  036F  0000               	nop	;# 
  2679                           
  2680                           ;main.c: 621: tm1650cmd(0X6E,showLed1);
  2681  0370  1283               	bcf	3,5	;RP0=0, select bank0
  2682  0371  1303               	bcf	3,6	;RP1=0, select bank0
  2683  0372  085F               	movf	_showLed1,w
  2684  0373  00F4               	movwf	tm1650cmd@seg_data
  2685  0374  306E               	movlw	110
  2686  0375  2BB5               	ljmp	_tm1650cmd
  2687  0376                     l3616:	
  2688                           ;main.c: 622: }
  2689                           
  2690                           
  2691                           ;main.c: 623: else if(sleepTime < 10)
  2692  0376  3000               	movlw	0
  2693  0377  022F               	subwf	_sleepTime+1,w
  2694  0378  300A               	movlw	10
  2695  0379  1903               	skipnz
  2696  037A  022E               	subwf	_sleepTime,w
  2697  037B  1803               	skipnc
  2698  037C  0008               	return
  2699  037D  3068               	movlw	104
  2700                           
  2701                           ;main.c: 624: {
  2702                           ;main.c: 625: tm1650cmd(0X68,0);
  2703  037E  01F4               	clrf	tm1650cmd@seg_data
  2704  037F  23B5  118A         	fcall	_tm1650cmd
  2705  0381  0000               	nop	;# 
  2706  0382  0000               	nop	;# 
  2707  0383  0000               	nop	;# 
  2708  0384  0000               	nop	;# 
  2709  0385  0000               	nop	;# 
  2710  0386  0000               	nop	;# 
  2711  0387  306A               	movlw	106
  2712                           
  2713                           ;main.c: 627: tm1650cmd(0X6A,0);
  2714  0388  01F4               	clrf	tm1650cmd@seg_data
  2715  0389  23B5  118A         	fcall	_tm1650cmd
  2716  038B  0000               	nop	;# 
  2717  038C  0000               	nop	;# 
  2718  038D  0000               	nop	;# 
  2719  038E  0000               	nop	;# 
  2720  038F  0000               	nop	;# 
  2721  0390  0000               	nop	;# 
  2722  0391  306C               	movlw	108
  2723                           
  2724                           ;main.c: 629: tm1650cmd(0X6C,0);
  2725  0392  01F4               	clrf	tm1650cmd@seg_data
  2726  0393  23B5  118A         	fcall	_tm1650cmd
  2727  0395  0000               	nop	;# 
  2728  0396  0000               	nop	;# 
  2729  0397  0000               	nop	;# 
  2730  0398  0000               	nop	;# 
  2731  0399  0000               	nop	;# 
  2732  039A  0000               	nop	;# 
  2733  039B  306E               	movlw	110
  2734                           
  2735                           ;main.c: 631: tm1650cmd(0X6E,0);
  2736  039C  01F4               	clrf	tm1650cmd@seg_data
  2737  039D  23B5  118A         	fcall	_tm1650cmd
  2738  039F  0000               	nop	;# 
  2739  03A0  0000               	nop	;# 
  2740  03A1  0000               	nop	;# 
  2741  03A2  0000               	nop	;# 
  2742  03A3  0000               	nop	;# 
  2743  03A4  0000               	nop	;# 
  2744  03A5  3048               	movlw	72
  2745                           
  2746                           ;main.c: 633: tm1650cmd(0X48,0x00);
  2747  03A6  01F4               	clrf	tm1650cmd@seg_data
  2748  03A7  23B5               	fcall	_tm1650cmd
  2749  03A8  0000               	nop	;# 
  2750  03A9  0000               	nop	;# 
  2751  03AA  0000               	nop	;# 
  2752  03AB  0000               	nop	;# 
  2753  03AC  0000               	nop	;# 
  2754  03AD  0000               	nop	;# 
  2755                           
  2756                           ;main.c: 635: showShiWei = 0x00;
  2757  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  2758  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  2759  03B0  01E1               	clrf	_showShiWei
  2760                           
  2761                           ;main.c: 636: showGeWei = 0x00;
  2762  03B1  01E0               	clrf	_showGeWei
  2763                           
  2764                           ;main.c: 637: showLed1 = 0x00;
  2765  03B2  01DF               	clrf	_showLed1
  2766                           
  2767                           ;main.c: 638: showLed2 = 0x00;
  2768  03B3  01DE               	clrf	_showLed2
  2769  03B4  0008               	return
  2770  03B5                     __end_of_refreshTM1650:	
  2771  03B5                     __ptext9:	
  2772 ;; *************** function _tm1650cmd *****************
  2773 ;; Defined at:
  2774 ;;		line 585 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;  digAddr         1    wreg     unsigned char 
  2777 ;;  seg_data        1    4[COMMON] unsigned char 
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;  digAddr         1    5[COMMON] unsigned char 
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  1    wreg      void 
  2782 ;; Registers used:
  2783 ;;		wreg, status,2, status,0, pclath, cstack
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 300/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2789 ;;      Params:         1       0       0       0       0
  2790 ;;      Locals:         1       0       0       0       0
  2791 ;;      Temps:          0       0       0       0       0
  2792 ;;      Totals:         2       0       0       0       0
  2793 ;;Total ram usage:        2 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; Hardware stack levels required when called:    2
  2796 ;; This function calls:
  2797 ;;		_TM1650_START
  2798 ;;		_TM1650_STOP
  2799 ;;		_write_8bit
  2800 ;; This function is called by:
  2801 ;;		_initTM1650
  2802 ;;		_refreshTM1650
  2803 ;;		_showCtr
  2804 ;; This function uses a non-reentrant model
  2805 ;;
  2806                           
  2807                           
  2808                           ;psect for function _tm1650cmd
  2809  03B5                     _tm1650cmd:	
  2810                           
  2811                           ;incstack = 0
  2812                           ; Regs used in _tm1650cmd: [wreg+status,2+status,0+pclath+cstack]
  2813                           ;tm1650cmd@digAddr stored from wreg
  2814  03B5  00F5               	movwf	tm1650cmd@digAddr
  2815                           
  2816                           ;main.c: 587: TM1650_START();
  2817  03B6  247D  118A         	fcall	_TM1650_START
  2818                           
  2819                           ;main.c: 588: write_8bit(digAddr);
  2820  03B8  0875               	movf	tm1650cmd@digAddr,w
  2821  03B9  23BF  118A         	fcall	_write_8bit
  2822                           
  2823                           ;main.c: 589: write_8bit(seg_data);
  2824  03BB  0874               	movf	tm1650cmd@seg_data,w
  2825  03BC  23BF  118A         	fcall	_write_8bit
  2826                           
  2827                           ;main.c: 590: TM1650_STOP();
  2828  03BE  2E64               	ljmp	l3300
  2829  03BF                     __end_of_tm1650cmd:	
  2830  03BF                     __ptext10:	
  2831 ;; *************** function _write_8bit *****************
  2832 ;; Defined at:
  2833 ;;		line 483 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;  dat             1    wreg     unsigned char 
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;  dat             1    2[COMMON] unsigned char 
  2838 ;;  i               1    3[COMMON] unsigned char 
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  1    wreg      void 
  2841 ;; Registers used:
  2842 ;;		wreg, status,2, status,0
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/300
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2848 ;;      Params:         0       0       0       0       0
  2849 ;;      Locals:         2       0       0       0       0
  2850 ;;      Temps:          0       0       0       0       0
  2851 ;;      Totals:         2       0       0       0       0
  2852 ;;Total ram usage:        2 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; Hardware stack levels required when called:    1
  2855 ;; This function calls:
  2856 ;;		Nothing
  2857 ;; This function is called by:
  2858 ;;		_tm1650cmd
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           
  2863                           ;psect for function _write_8bit
  2864  03BF                     _write_8bit:	
  2865                           
  2866                           ;incstack = 0
  2867                           ; Regs used in _write_8bit: [wreg+status,2+status,0]
  2868                           ;write_8bit@dat stored from wreg
  2869  03BF  00F2               	movwf	write_8bit@dat
  2870                           
  2871                           ;main.c: 485: unsigned char i;
  2872                           ;main.c: 486: RC0=0;
  2873  03C0  1683               	bsf	3,5	;RP0=1, select bank3
  2874  03C1  1703               	bsf	3,6	;RP1=1, select bank3
  2875  03C2  1005               	bcf	5,0	;volatile
  2876                           
  2877                           ;main.c: 487: for(i=0;i<8;i++)
  2878  03C3  01F3               	clrf	write_8bit@i
  2879  03C4                     l1296:	
  2880                           
  2881                           ;main.c: 488: {
  2882                           ;main.c: 489: if(dat&0x80)
  2883  03C4  1FF2               	btfss	write_8bit@dat,7
  2884  03C5  2BF7               	goto	l1298
  2885                           
  2886                           ;main.c: 490: {
  2887                           ;main.c: 491: RB7=1;
  2888  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  2889  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  2890  03C8  1786               	bsf	6,7	;volatile
  2891  03C9  0000               	nop	;# 
  2892  03CA  0000               	nop	;# 
  2893  03CB  0000               	nop	;# 
  2894  03CC  0000               	nop	;# 
  2895  03CD  0000               	nop	;# 
  2896  03CE  0000               	nop	;# 
  2897  03CF  0000               	nop	;# 
  2898  03D0  0000               	nop	;# 
  2899  03D1  0000               	nop	;# 
  2900  03D2  0000               	nop	;# 
  2901  03D3  0000               	nop	;# 
  2902  03D4  0000               	nop	;# 
  2903                           
  2904                           ;main.c: 494: RC0=1;
  2905  03D5  1683               	bsf	3,5	;RP0=1, select bank3
  2906  03D6  1703               	bsf	3,6	;RP1=1, select bank3
  2907  03D7  1405               	bsf	5,0	;volatile
  2908  03D8  0000               	nop	;# 
  2909  03D9  0000               	nop	;# 
  2910  03DA  0000               	nop	;# 
  2911  03DB  0000               	nop	;# 
  2912  03DC  0000               	nop	;# 
  2913  03DD  0000               	nop	;# 
  2914  03DE  0000               	nop	;# 
  2915  03DF  0000               	nop	;# 
  2916  03E0  0000               	nop	;# 
  2917  03E1  0000               	nop	;# 
  2918  03E2  0000               	nop	;# 
  2919  03E3  0000               	nop	;# 
  2920  03E4  0000               	nop	;# 
  2921  03E5  0000               	nop	;# 
  2922  03E6  0000               	nop	;# 
  2923  03E7  0000               	nop	;# 
  2924  03E8  0000               	nop	;# 
  2925  03E9  0000               	nop	;# 
  2926  03EA  0000               	nop	;# 
  2927  03EB  0000               	nop	;# 
  2928  03EC  0000               	nop	;# 
  2929  03ED  0000               	nop	;# 
  2930  03EE  0000               	nop	;# 
  2931  03EF  0000               	nop	;# 
  2932  03F0  0000               	nop	;# 
  2933  03F1  0000               	nop	;# 
  2934  03F2  0000               	nop	;# 
  2935  03F3  0000               	nop	;# 
  2936  03F4  0000               	nop	;# 
  2937  03F5  0000               	nop	;# 
  2938  03F6  2C27               	goto	L10
  2939  03F7                     l1298:	
  2940                           ;main.c: 501: }
  2941                           
  2942                           ;main.c: 500: RC0=0;
  2943                           
  2944                           
  2945                           ;main.c: 502: else
  2946                           ;main.c: 503: {
  2947                           ;main.c: 504: RB7=0;
  2948  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2949  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  2950  03F9  1386               	bcf	6,7	;volatile
  2951  03FA  0000               	nop	;# 
  2952  03FB  0000               	nop	;# 
  2953  03FC  0000               	nop	;# 
  2954  03FD  0000               	nop	;# 
  2955  03FE  0000               	nop	;# 
  2956  03FF  0000               	nop	;# 
  2957  0400  0000               	nop	;# 
  2958  0401  0000               	nop	;# 
  2959  0402  0000               	nop	;# 
  2960  0403  0000               	nop	;# 
  2961  0404  0000               	nop	;# 
  2962  0405  0000               	nop	;# 
  2963                           
  2964                           ;main.c: 507: RC0=1;
  2965  0406  1683               	bsf	3,5	;RP0=1, select bank3
  2966  0407  1703               	bsf	3,6	;RP1=1, select bank3
  2967  0408  1405               	bsf	5,0	;volatile
  2968  0409  0000               	nop	;# 
  2969  040A  0000               	nop	;# 
  2970  040B  0000               	nop	;# 
  2971  040C  0000               	nop	;# 
  2972  040D  0000               	nop	;# 
  2973  040E  0000               	nop	;# 
  2974  040F  0000               	nop	;# 
  2975  0410  0000               	nop	;# 
  2976  0411  0000               	nop	;# 
  2977  0412  0000               	nop	;# 
  2978  0413  0000               	nop	;# 
  2979  0414  0000               	nop	;# 
  2980  0415  0000               	nop	;# 
  2981  0416  0000               	nop	;# 
  2982  0417  0000               	nop	;# 
  2983  0418  0000               	nop	;# 
  2984  0419  0000               	nop	;# 
  2985  041A  0000               	nop	;# 
  2986  041B  0000               	nop	;# 
  2987  041C  0000               	nop	;# 
  2988  041D  0000               	nop	;# 
  2989  041E  0000               	nop	;# 
  2990  041F  0000               	nop	;# 
  2991  0420  0000               	nop	;# 
  2992  0421  0000               	nop	;# 
  2993  0422  0000               	nop	;# 
  2994  0423  0000               	nop	;# 
  2995  0424  0000               	nop	;# 
  2996  0425  0000               	nop	;# 
  2997  0426  0000               	nop	;# 
  2998  0427                     L10:	
  2999                           
  3000                           ;main.c: 513: RC0=0;
  3001  0427  1683               	bsf	3,5	;RP0=1, select bank3
  3002  0428  1703               	bsf	3,6	;RP1=1, select bank3
  3003  0429  1005               	bcf	5,0	;volatile
  3004  042A  3008               	movlw	8
  3005                           
  3006                           ;main.c: 514: }
  3007                           ;main.c: 515: dat<<=1;
  3008  042B  1003               	clrc
  3009  042C  0DF2               	rlf	write_8bit@dat,f
  3010  042D  0AF3               	incf	write_8bit@i,f
  3011  042E  0273               	subwf	write_8bit@i,w
  3012  042F  1C03               	skipc
  3013  0430  2BC4               	goto	l1296
  3014                           
  3015                           ;main.c: 516: }
  3016                           ;main.c: 517: RB7=1;
  3017  0431  1283               	bcf	3,5	;RP0=0, select bank0
  3018  0432  1303               	bcf	3,6	;RP1=0, select bank0
  3019  0433  1786               	bsf	6,7	;volatile
  3020  0434  0000               	nop	;# 
  3021  0435  0000               	nop	;# 
  3022  0436  0000               	nop	;# 
  3023  0437  0000               	nop	;# 
  3024  0438  0000               	nop	;# 
  3025  0439  0000               	nop	;# 
  3026  043A  0000               	nop	;# 
  3027  043B  0000               	nop	;# 
  3028  043C  0000               	nop	;# 
  3029  043D  0000               	nop	;# 
  3030  043E  0000               	nop	;# 
  3031  043F  0000               	nop	;# 
  3032  0440  0000               	nop	;# 
  3033  0441  0000               	nop	;# 
  3034  0442  0000               	nop	;# 
  3035  0443  0000               	nop	;# 
  3036  0444  0000               	nop	;# 
  3037  0445  0000               	nop	;# 
  3038  0446  0000               	nop	;# 
  3039  0447  0000               	nop	;# 
  3040  0448  0000               	nop	;# 
  3041  0449  0000               	nop	;# 
  3042  044A  0000               	nop	;# 
  3043  044B  0000               	nop	;# 
  3044                           
  3045                           ;main.c: 522: RC0=1;
  3046  044C  1683               	bsf	3,5	;RP0=1, select bank3
  3047  044D  1703               	bsf	3,6	;RP1=1, select bank3
  3048  044E  1405               	bsf	5,0	;volatile
  3049  044F  0000               	nop	;# 
  3050  0450  0000               	nop	;# 
  3051  0451  0000               	nop	;# 
  3052  0452  0000               	nop	;# 
  3053  0453  0000               	nop	;# 
  3054  0454  0000               	nop	;# 
  3055  0455  0000               	nop	;# 
  3056  0456  0000               	nop	;# 
  3057  0457  0000               	nop	;# 
  3058  0458  0000               	nop	;# 
  3059  0459  0000               	nop	;# 
  3060  045A  0000               	nop	;# 
  3061  045B  0000               	nop	;# 
  3062  045C  0000               	nop	;# 
  3063  045D  0000               	nop	;# 
  3064  045E  0000               	nop	;# 
  3065  045F  0000               	nop	;# 
  3066  0460  0000               	nop	;# 
  3067  0461  0000               	nop	;# 
  3068  0462  0000               	nop	;# 
  3069  0463  0000               	nop	;# 
  3070  0464  0000               	nop	;# 
  3071  0465  0000               	nop	;# 
  3072  0466  0000               	nop	;# 
  3073  0467  0000               	nop	;# 
  3074  0468  0000               	nop	;# 
  3075  0469  0000               	nop	;# 
  3076  046A  0000               	nop	;# 
  3077  046B  0000               	nop	;# 
  3078  046C  0000               	nop	;# 
  3079                           
  3080                           ;main.c: 528: RC0=0;
  3081  046D  1683               	bsf	3,5	;RP0=1, select bank3
  3082  046E  1703               	bsf	3,6	;RP1=1, select bank3
  3083  046F  1005               	bcf	5,0	;volatile
  3084  0470  0000               	nop	;# 
  3085  0471  0000               	nop	;# 
  3086  0472  0000               	nop	;# 
  3087  0473  0000               	nop	;# 
  3088  0474  0000               	nop	;# 
  3089  0475  0000               	nop	;# 
  3090  0476  0000               	nop	;# 
  3091  0477  0000               	nop	;# 
  3092  0478  0000               	nop	;# 
  3093  0479  0000               	nop	;# 
  3094  047A  0000               	nop	;# 
  3095  047B  0000               	nop	;# 
  3096  047C  0008               	return
  3097  047D                     __end_of_write_8bit:	
  3098  047D                     __ptext12:	
  3099 ;; *************** function _TM1650_START *****************
  3100 ;; Defined at:
  3101 ;;		line 458 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;		None
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;		None
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      void 
  3108 ;; Registers used:
  3109 ;;		None
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 300/300
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3115 ;;      Params:         0       0       0       0       0
  3116 ;;      Locals:         0       0       0       0       0
  3117 ;;      Temps:          0       0       0       0       0
  3118 ;;      Totals:         0       0       0       0       0
  3119 ;;Total ram usage:        0 bytes
  3120 ;; Hardware stack levels used:    1
  3121 ;; Hardware stack levels required when called:    1
  3122 ;; This function calls:
  3123 ;;		Nothing
  3124 ;; This function is called by:
  3125 ;;		_tm1650cmd
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           
  3130                           ;psect for function _TM1650_START
  3131  047D                     _TM1650_START:	
  3132                           
  3133                           ;main.c: 460: RC0=1;
  3134                           
  3135                           ;incstack = 0
  3136                           ; Regs used in _TM1650_START: []
  3137                           
  3138                           ;main.c: 461: RB7=1;
  3139  047D  27CE               	fcall	PL20	;call to abstracted procedure
  3140  047E  1786               	bsf	6,7	;volatile
  3141  047F  0000               	nop	;# 
  3142  0480  0000               	nop	;# 
  3143  0481  0000               	nop	;# 
  3144  0482  0000               	nop	;# 
  3145  0483  0000               	nop	;# 
  3146  0484  0000               	nop	;# 
  3147                           
  3148                           ;main.c: 463: RB7=0;
  3149  0485  1283               	bcf	3,5	;RP0=0, select bank0
  3150  0486  1303               	bcf	3,6	;RP1=0, select bank0
  3151  0487  1386               	bcf	6,7	;volatile
  3152  0488  0000               	nop	;# 
  3153  0489  0000               	nop	;# 
  3154  048A  0000               	nop	;# 
  3155  048B  0000               	nop	;# 
  3156  048C  0000               	nop	;# 
  3157  048D  0000               	nop	;# 
  3158                           
  3159                           ;main.c: 465: RC0=0;
  3160  048E  1683               	bsf	3,5	;RP0=1, select bank3
  3161  048F  1703               	bsf	3,6	;RP1=1, select bank3
  3162  0490  1005               	bcf	5,0	;volatile
  3163  0491  0008               	return
  3164  0492                     __end_of_TM1650_START:	
  3165  0492                     __ptext16:	
  3166 ;; *************** function _WorkSleep *****************
  3167 ;; Defined at:
  3168 ;;		line 390 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;		None
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;		None
  3173 ;; Return value:  Size  Location     Type
  3174 ;;                  1    wreg      void 
  3175 ;; Registers used:
  3176 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3177 ;; Tracked objects:
  3178 ;;		On entry : 300/0
  3179 ;;		On exit  : 300/100
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3182 ;;      Params:         0       0       0       0       0
  3183 ;;      Locals:         0       0       0       0       0
  3184 ;;      Temps:          0       0       0       0       0
  3185 ;;      Totals:         0       0       0       0       0
  3186 ;;Total ram usage:        0 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; Hardware stack levels required when called:    4
  3189 ;; This function calls:
  3190 ;;		_Init_System
  3191 ;;		_Refurbish_Sfr
  3192 ;;		_SystemEnterSleep
  3193 ;; This function is called by:
  3194 ;;		_showCtr
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           
  3199                           ;psect for function _WorkSleep
  3200  0492                     _WorkSleep:	
  3201  0492                     l4600:	
  3202                           ;incstack = 0
  3203                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3204                           
  3205                           
  3206                           ;main.c: 402: INTCON = 0;
  3207  0492  018B               	clrf	11	;volatile
  3208                           
  3209                           ;main.c: 403: PIE1 = 0;
  3210  0493  018D               	clrf	13	;volatile
  3211                           
  3212                           ;main.c: 404: PIE2 = 0;
  3213  0494  1703               	bsf	3,6	;RP1=1, select bank2
  3214  0495  0188               	clrf	8	;volatile
  3215                           
  3216                           ;main.c: 405: PIR1 = 0;
  3217  0496  1303               	bcf	3,6	;RP1=0, select bank0
  3218  0497  018C               	clrf	12	;volatile
  3219                           
  3220                           ;main.c: 406: PIR2 = 0;
  3221  0498  1703               	bsf	3,6	;RP1=1, select bank2
  3222  0499  0187               	clrf	7	;volatile
  3223                           
  3224                           ;main.c: 407: T2CON = 0;
  3225  049A  1303               	bcf	3,6	;RP1=0, select bank0
  3226  049B  0192               	clrf	18	;volatile
  3227                           
  3228                           ;main.c: 408: ADCON1 = 0;
  3229  049C  1683               	bsf	3,5	;RP0=1, select bank1
  3230  049D  019C               	clrf	28	;volatile
  3231                           
  3232                           ;main.c: 409: SWDTEN = 0;
  3233  049E  1088               	bcf	8,1	;volatile
  3234  049F  0064               	clrwdt	;# 
  3235                           
  3236                           ;main.c: 412: ADCON0 = 0;
  3237  04A0  1683               	bsf	3,5	;RP0=1, select bank1
  3238  04A1  1303               	bcf	3,6	;RP1=0, select bank1
  3239  04A2  019D               	clrf	29	;volatile
  3240                           
  3241                           ;main.c: 415: TRISA = 0x22;
  3242  04A3  3022               	movlw	34
  3243                           
  3244                           ;main.c: 416: PORTA = 0;
  3245                           
  3246                           ;main.c: 417: TRISB = 0x18;
  3247  04A4  27C7  118A         	fcall	PL18	;call to abstracted procedure
  3248                           
  3249                           ;main.c: 418: TRISC = 0x00;
  3250  04A6  1703               	bsf	3,6	;RP1=1, select bank3
  3251  04A7  0186               	clrf	6	;volatile
  3252                           
  3253                           ;main.c: 419: PORTC = 0x01;
  3254  04A8  3001               	movlw	1
  3255  04A9  0085               	movwf	5	;volatile
  3256                           
  3257                           ;main.c: 420: PORTB = 0x80;
  3258  04AA  3080               	movlw	128
  3259  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  3260  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  3261  04AD  0086               	movwf	6	;volatile
  3262                           
  3263                           ;main.c: 421: RACIF = 0;
  3264  04AE  1703               	bsf	3,6	;RP1=1, select bank2
  3265  04AF  1087               	bcf	7,1	;volatile
  3266                           
  3267                           ;main.c: 422: IOCA = 0x20;
  3268  04B0  3020               	movlw	32
  3269  04B1  1683               	bsf	3,5	;RP0=1, select bank3
  3270  04B2  0088               	movwf	8	;volatile
  3271                           
  3272                           ;main.c: 423: RACIE = 1;
  3273  04B3  1283               	bcf	3,5	;RP0=0, select bank2
  3274  04B4  1488               	bsf	8,1	;volatile
  3275                           
  3276                           ;main.c: 424: PORTA;
  3277  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  3278  04B6  0805               	movf	5,w	;volatile
  3279                           
  3280                           ;main.c: 436: SystemEnterSleep();
  3281  04B7  24CF  118A         	fcall	_SystemEnterSleep
  3282  04B9  0000               	nop	;# 
  3283  04BA  0000               	nop	;# 
  3284  04BB  0000               	nop	;# 
  3285  04BC  0000               	nop	;# 
  3286  04BD  0000               	nop	;# 
  3287  04BE  0000               	nop	;# 
  3288                           
  3289                           ;main.c: 438: if(RACIF)
  3290  04BF  1283               	bcf	3,5	;RP0=0, select bank2
  3291  04C0  1703               	bsf	3,6	;RP1=1, select bank2
  3292  04C1  1C87               	btfss	7,1	;volatile
  3293  04C2  2CC6               	goto	l4630
  3294                           
  3295                           ;main.c: 439: {
  3296                           ;main.c: 440: RACIF = 0;
  3297  04C3  1087               	bcf	7,1	;volatile
  3298                           
  3299                           ;main.c: 441: PORTA;
  3300  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  3301  04C5  0805               	movf	5,w	;volatile
  3302  04C6                     l4630:	
  3303                           
  3304                           ;main.c: 442: }
  3305                           ;main.c: 443: if(RCCIF)
  3306  04C6  1703               	bsf	3,6	;RP1=1, select bank2
  3307  04C7  1D07               	btfss	7,2	;volatile
  3308  04C8  2CCC               	goto	l4636
  3309                           
  3310                           ;main.c: 444: {
  3311                           ;main.c: 445: RCCIF = 0;
  3312  04C9  1107               	bcf	7,2	;volatile
  3313                           
  3314                           ;main.c: 446: PORTC;
  3315  04CA  1683               	bsf	3,5	;RP0=1, select bank3
  3316  04CB  0805               	movf	5,w	;volatile
  3317  04CC                     l4636:	
  3318                           
  3319                           ;main.c: 447: }
  3320                           ;main.c: 449: Refurbish_Sfr();
  3321  04CC  260E  118A         	fcall	_Refurbish_Sfr
  3322                           
  3323                           ;main.c: 450: Init_System();
  3324  04CE  2E40               	ljmp	l3370
  3325  04CF                     __end_of_WorkSleep:	
  3326  04CF                     __ptext17:	
  3327 ;; *************** function _SystemEnterSleep *****************
  3328 ;; Defined at:
  3329 ;;		line 578 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;		None
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;  wake            2    6[BANK0 ] unsigned int 
  3334 ;;  KeyResTemp      2    4[BANK0 ] unsigned int 
  3335 ;;  KeyValue        2    2[BANK0 ] unsigned int 
  3336 ;;  cnt             1    8[BANK0 ] unsigned char 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  1    wreg      void 
  3339 ;; Registers used:
  3340 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3341 ;; Tracked objects:
  3342 ;;		On entry : 300/0
  3343 ;;		On exit  : B00/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3346 ;;      Params:         0       0       0       0       0
  3347 ;;      Locals:         0       7       0       0       0
  3348 ;;      Temps:          0       2       0       0       0
  3349 ;;      Totals:         0       9       0       0       0
  3350 ;;Total ram usage:        9 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    3
  3353 ;; This function calls:
  3354 ;;		_ClearResSum
  3355 ;;		_GetTouchKeyValue
  3356 ;;		_KeyClearOne
  3357 ;; This function is called by:
  3358 ;;		_WorkSleep
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           
  3363                           ;psect for function _SystemEnterSleep
  3364  04CF                     _SystemEnterSleep:	
  3365  04CF                     l1671:	
  3366                           ;incstack = 0
  3367                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3368                           ;CheckTouchKey.c: 587: {
  3369                           ;CheckTouchKey.c: 588: while(1)
  3370                           
  3371  04CF  0064               	clrwdt	;# 
  3372                           
  3373                           ;CheckTouchKey.c: 593: TMR0 = 0;
  3374  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  3375  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  3376  04D2  0181               	clrf	1	;volatile
  3377                           
  3378                           ;CheckTouchKey.c: 594: OPTION_REG |= 0x07;
  3379  04D3  3007               	movlw	7
  3380  04D4  1683               	bsf	3,5	;RP0=1, select bank1
  3381  04D5  0481               	iorwf	1,f	;volatile
  3382                           
  3383                           ;CheckTouchKey.c: 596: OPTION_REG |= 0x08;
  3384  04D6  1581               	bsf	1,3	;volatile
  3385  04D7  0064               	clrwdt	;# 
  3386  04D8  300A               	movlw	10
  3387  04D9  1683               	bsf	3,5	;RP0=1, select bank1
  3388  04DA  1303               	bcf	3,6	;RP1=0, select bank1
  3389  04DB  0081               	movwf	1	;volatile
  3390  04DC  0064               	clrwdt	;# 
  3391                           
  3392                           ;CheckTouchKey.c: 602: KEYCON0 = 0;
  3393  04DD  1683               	bsf	3,5	;RP0=1, select bank1
  3394  04DE  1303               	bcf	3,6	;RP1=0, select bank1
  3395  04DF  0192               	clrf	18	;volatile
  3396                           
  3397                           ;CheckTouchKey.c: 603: KEYCON2 = 0;
  3398  04E0  0197               	clrf	23	;volatile
  3399                           
  3400                           ;CheckTouchKey.c: 605: OSCCON = 0x1;
  3401  04E1  3001               	movlw	1
  3402  04E2  0088               	movwf	8	;volatile
  3403  04E3  0063               	sleep	;# 
  3404  04E4  0000               	nop	;# 
  3405  04E5  0064               	clrwdt	;# 
  3406                           
  3407                           ;CheckTouchKey.c: 609: OSCCON = 0x71;
  3408  04E6  3071               	movlw	113
  3409  04E7  1683               	bsf	3,5	;RP0=1, select bank1
  3410  04E8  1303               	bcf	3,6	;RP1=0, select bank1
  3411  04E9  0088               	movwf	8	;volatile
  3412                           
  3413                           ;CheckTouchKey.c: 613: ClearResSum();
  3414  04EA  255E  118A         	fcall	_ClearResSum
  3415                           
  3416                           ;CheckTouchKey.c: 614: b_ksleep = 1;
  3417  04EC  1479               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3418                           
  3419                           ;CheckTouchKey.c: 615: GetTouchKeyValue();
  3420  04ED  2582  118A         	fcall	_GetTouchKeyValue
  3421                           
  3422                           ;CheckTouchKey.c: 617: cnt = 0;
  3423  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  3424  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  3425                           
  3426                           ;CheckTouchKey.c: 618: wake = 1;
  3427  04F1  27E0  118A         	fcall	PL26	;call to abstracted procedure
  3428                           
  3429                           ;CheckTouchKey.c: 619: if( RBIF || RCCIF || RACIF)
  3430  04F3  180B               	btfsc	11,0	;volatile
  3431  04F4  2CFA               	goto	l4548
  3432  04F5  1703               	bsf	3,6	;RP1=1, select bank2
  3433  04F6  1907               	btfsc	7,2	;volatile
  3434  04F7  2CFA               	goto	l4548
  3435  04F8  1C87               	btfss	7,1	;volatile
  3436  04F9  2D01               	goto	l4560
  3437  04FA                     l4548:	
  3438                           
  3439                           ;CheckTouchKey.c: 620: {
  3440                           ;CheckTouchKey.c: 621: ClearResSum();
  3441  04FA  255E               	fcall	_ClearResSum
  3442                           
  3443                           ;CheckTouchKey.c: 622: KeyCounter = 0;
  3444  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  3445  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  3446  04FD  01C8               	clrf	_KeyCounter
  3447                           
  3448                           ;CheckTouchKey.c: 623: b_kover = 0;
  3449  04FE  1279               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3450                           
  3451                           ;CheckTouchKey.c: 624: b_kover1 = 0;
  3452  04FF  11F9               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3453  0500  0008               	return
  3454  0501                     l4560:	
  3455  0501  1303               	bcf	3,6	;RP1=0, select bank0
  3456  0502  086B               	movf	SystemEnterSleep@wake,w
  3457  0503  3907               	andlw	7
  3458                           
  3459                           ;CheckTouchKey.c: 631: {
  3460                           ;CheckTouchKey.c: 633: KeyValue = KeyResTemp = KeyResSum[cnt];
  3461  0504  1003               	clrc
  3462  0505  1903               	btfsc	3,2
  3463  0506  2D58               	goto	L16
  3464  0507  0D6D               	rlf	SystemEnterSleep@cnt,w
  3465  0508  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  3466  0509  0084               	movwf	4
  3467  050A  1383               	bcf	3,7	;select IRP bank1
  3468  050B  0800               	movf	0,w
  3469  050C  00E9               	movwf	SystemEnterSleep@KeyResTemp
  3470  050D  0A84               	incf	4,f
  3471  050E  0800               	movf	0,w
  3472  050F  00EA               	movwf	SystemEnterSleep@KeyResTemp+1
  3473  0510  00E8               	movwf	SystemEnterSleep@KeyValue+1
  3474  0511  0869               	movf	SystemEnterSleep@KeyResTemp,w
  3475  0512  00E7               	movwf	SystemEnterSleep@KeyValue
  3476                           
  3477                           ;CheckTouchKey.c: 634: if(KeyResTemp)
  3478  0513  0869               	movf	SystemEnterSleep@KeyResTemp,w
  3479  0514  046A               	iorwf	SystemEnterSleep@KeyResTemp+1,w
  3480  0515  1903               	btfsc	3,2
  3481  0516  2D57               	goto	l4594
  3482                           
  3483                           ;CheckTouchKey.c: 635: {
  3484                           ;CheckTouchKey.c: 636: KeyValue += Table_KeyDown[cnt];
  3485  0517  086D               	movf	SystemEnterSleep@cnt,w
  3486  0518  3E17               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  3487  0519  0084               	movwf	4
  3488  051A  158A  2000  118A   	fcall	stringdir
  3489  051D  07E7               	addwf	SystemEnterSleep@KeyValue,f
  3490  051E  1803               	skipnc
  3491  051F  0AE8               	incf	SystemEnterSleep@KeyValue+1,f
  3492                           
  3493                           ;CheckTouchKey.c: 638: if(KeyOldValue2[cnt] >= KeyValue)
  3494  0520  1003               	clrc
  3495  0521  0D6D               	rlf	SystemEnterSleep@cnt,w
  3496  0522  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3497  0523  27B2  118A         	fcall	PL12	;call to abstracted procedure
  3498  0525  0868               	movf	SystemEnterSleep@KeyValue+1,w
  3499  0526  0266               	subwf	??_SystemEnterSleep+1,w
  3500  0527  1D03               	skipz
  3501  0528  2D2B               	goto	u4175
  3502  0529  0867               	movf	SystemEnterSleep@KeyValue,w
  3503  052A  0265               	subwf	??_SystemEnterSleep,w
  3504  052B                     u4175:	
  3505  052B  1C03               	skipc
  3506  052C  2D3F               	goto	L15
  3507                           
  3508                           ;CheckTouchKey.c: 639: {
  3509                           ;CheckTouchKey.c: 640: cnt = 0;
  3510                           
  3511                           ;CheckTouchKey.c: 641: wake = 1;
  3512  052D  27E0  118A         	fcall	PL26	;call to abstracted procedure
  3513  052F                     l4574:	
  3514  052F  086B               	movf	SystemEnterSleep@wake,w
  3515  0530  3907               	andlw	7
  3516  0531  1D03               	btfss	3,2
  3517  0532  2D36               	goto	l4578
  3518                           
  3519                           ;CheckTouchKey.c: 645: {
  3520                           ;CheckTouchKey.c: 646: KeyClearOne(cnt);
  3521  0533  086D               	movf	SystemEnterSleep@cnt,w
  3522  0534  256D  118A         	fcall	_KeyClearOne
  3523  0536                     l4578:	
  3524                           
  3525                           ;CheckTouchKey.c: 647: }
  3526                           ;CheckTouchKey.c: 648: wake <<= 1;
  3527  0536  1283               	bcf	3,5	;RP0=0, select bank0
  3528  0537  3003               	movlw	3
  3529  0538  1303               	bcf	3,6	;RP1=0, select bank0
  3530  0539  1003               	clrc
  3531  053A  27E5  118A         	fcall	PL28	;call to abstracted procedure
  3532  053C  1803               	btfsc	3,0
  3533  053D  2CFA               	goto	l4548
  3534  053E  2D2F               	goto	l4574
  3535  053F                     L15:	
  3536                           ;CheckTouchKey.c: 656: }
  3537                           ;CheckTouchKey.c: 658: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  3538                           
  3539  053F  0D6D               	rlf	SystemEnterSleep@cnt,w
  3540  0540  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3541  0541  27B2  118A         	fcall	PL12	;call to abstracted procedure
  3542  0543  1003               	clrc
  3543  0544  0D6D               	rlf	SystemEnterSleep@cnt,w
  3544  0545  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3545                           
  3546                           ;CheckTouchKey.c: 659: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  3547  0546  279C  118A         	fcall	PL8	;call to abstracted procedure
  3548  0548  0800               	movf	0,w
  3549  0549  00E5               	movwf	??_SystemEnterSleep
  3550  054A  0A84               	incf	4,f
  3551  054B  0800               	movf	0,w
  3552  054C  00E6               	movwf	??_SystemEnterSleep+1
  3553  054D  1003               	clrc
  3554  054E  0D6D               	rlf	SystemEnterSleep@cnt,w
  3555  054F  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3556                           
  3557                           ;CheckTouchKey.c: 660: KeyOldValue0[cnt] = KeyResTemp;
  3558  0550  279C  118A         	fcall	PL8	;call to abstracted procedure
  3559  0552  0869               	movf	SystemEnterSleep@KeyResTemp,w
  3560  0553  0080               	movwf	0
  3561  0554  0A84               	incf	4,f
  3562  0555  086A               	movf	SystemEnterSleep@KeyResTemp+1,w
  3563  0556  0080               	movwf	0
  3564  0557                     l4594:	
  3565                           
  3566                           ;CheckTouchKey.c: 661: }
  3567                           ;CheckTouchKey.c: 662: }
  3568                           ;CheckTouchKey.c: 663: wake <<= 1;
  3569  0557  1003               	clrc
  3570  0558                     L16:	
  3571  0558  3003               	movlw	3
  3572  0559  27E5  118A         	fcall	PL28	;call to abstracted procedure
  3573  055B  1803               	btfsc	3,0
  3574  055C  2CCF               	goto	l1671
  3575  055D  2D01               	goto	l4560
  3576  055E                     __end_of_SystemEnterSleep:	
  3577  055E                     __ptext30:	
  3578 ;; *************** function _ClearResSum *****************
  3579 ;; Defined at:
  3580 ;;		line 142 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;		None
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;  cnt             1    2[COMMON] unsigned char 
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/100
  3591 ;;		On exit  : 800/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3594 ;;      Params:         0       0       0       0       0
  3595 ;;      Locals:         1       0       0       0       0
  3596 ;;      Temps:          0       0       0       0       0
  3597 ;;      Totals:         1       0       0       0       0
  3598 ;;Total ram usage:        1 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    1
  3601 ;; This function calls:
  3602 ;;		Nothing
  3603 ;; This function is called by:
  3604 ;;		_GetTouchKeyValue
  3605 ;;		_CheckTouchKey
  3606 ;;		_SystemEnterSleep
  3607 ;; This function uses a non-reentrant model
  3608 ;;
  3609                           
  3610                           
  3611                           ;psect for function _ClearResSum
  3612  055E                     _ClearResSum:	
  3613  055E                     l3292:	
  3614                           ;incstack = 0
  3615                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  3616                           
  3617                           
  3618                           ;CheckTouchKey.c: 144: unsigned char cnt = 0;
  3619  055E  01F2               	clrf	ClearResSum@cnt
  3620  055F                     l3294:	
  3621                           
  3622                           ;CheckTouchKey.c: 146: {
  3623                           ;CheckTouchKey.c: 147: KeyResSum[cnt] = 0;
  3624  055F  1003               	clrc
  3625  0560  0D72               	rlf	ClearResSum@cnt,w
  3626  0561  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  3627  0562  0084               	movwf	4
  3628  0563  3003               	movlw	3
  3629  0564  1383               	bcf	3,7	;select IRP bank1
  3630  0565  0180               	clrf	0
  3631  0566  0A84               	incf	4,f
  3632  0567  0180               	clrf	0
  3633  0568  0AF2               	incf	ClearResSum@cnt,f
  3634  0569  0272               	subwf	ClearResSum@cnt,w
  3635  056A  1803               	btfsc	3,0
  3636  056B  0008               	return
  3637  056C  2D5F               	goto	l3294
  3638  056D                     __end_of_ClearResSum:	
  3639  056D                     __ptext34:	
  3640 ;; *************** function _KeyClearOne *****************
  3641 ;; Defined at:
  3642 ;;		line 96 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;  cnt             1    wreg     unsigned char 
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;  cnt             1    2[COMMON] unsigned char 
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 800/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3656 ;;      Params:         0       0       0       0       0
  3657 ;;      Locals:         1       0       0       0       0
  3658 ;;      Temps:          0       0       0       0       0
  3659 ;;      Totals:         1       0       0       0       0
  3660 ;;Total ram usage:        1 bytes
  3661 ;; Hardware stack levels used:    1
  3662 ;; Hardware stack levels required when called:    1
  3663 ;; This function calls:
  3664 ;;		Nothing
  3665 ;; This function is called by:
  3666 ;;		_KeyClearIn
  3667 ;;		_KeyStopClear
  3668 ;;		_CheckOnceResult
  3669 ;;		_SystemEnterSleep
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           
  3674                           ;psect for function _KeyClearOne
  3675  056D                     _KeyClearOne:	
  3676                           
  3677                           ;incstack = 0
  3678                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  3679                           ;KeyClearOne@cnt stored from wreg
  3680  056D  00F2               	movwf	KeyClearOne@cnt
  3681                           
  3682                           ;CheckTouchKey.c: 98: KeyOldValue0[cnt] = 0;
  3683  056E  1003               	clrc
  3684  056F  0D72               	rlf	KeyClearOne@cnt,w
  3685  0570  3EAC               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3686  0571  0084               	movwf	4
  3687  0572  1383               	bcf	3,7	;select IRP bank1
  3688                           
  3689                           ;CheckTouchKey.c: 99: KeyOldValue1[cnt] = 0;
  3690  0573  27C1  118A         	fcall	PL16	;call to abstracted procedure
  3691  0575  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3692  0576  0084               	movwf	4
  3693                           
  3694                           ;CheckTouchKey.c: 100: KeyOldValue2[cnt] = 0;
  3695  0577  27C1  118A         	fcall	PL16	;call to abstracted procedure
  3696  0579  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3697  057A  0084               	movwf	4
  3698                           
  3699                           ;CheckTouchKey.c: 101: KeyReference[cnt] = 0;
  3700  057B  27C1               	fcall	PL16	;call to abstracted procedure
  3701  057C  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  3702  057D  0084               	movwf	4
  3703  057E  0180               	clrf	0
  3704  057F  0A84               	incf	4,f
  3705  0580  0180               	clrf	0
  3706  0581  0008               	return
  3707  0582                     __end_of_KeyClearOne:	
  3708  0582                     __ptext29:	
  3709 ;; *************** function _GetTouchKeyValue *****************
  3710 ;; Defined at:
  3711 ;;		line 196 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3712 ;; Parameters:    Size  Location     Type
  3713 ;;		None
  3714 ;; Auto vars:     Size  Location     Type
  3715 ;;  wake            2    5[COMMON] unsigned int 
  3716 ;;  temp            2    3[COMMON] unsigned int 
  3717 ;;  cnt             1    7[COMMON] unsigned char 
  3718 ;; Return value:  Size  Location     Type
  3719 ;;                  1    wreg      void 
  3720 ;; Registers used:
  3721 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3722 ;; Tracked objects:
  3723 ;;		On entry : 0/100
  3724 ;;		On exit  : 0/0
  3725 ;;		Unchanged: 0/0
  3726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3727 ;;      Params:         0       0       0       0       0
  3728 ;;      Locals:         5       0       0       0       0
  3729 ;;      Temps:          0       0       0       0       0
  3730 ;;      Totals:         5       0       0       0       0
  3731 ;;Total ram usage:        5 bytes
  3732 ;; Hardware stack levels used:    1
  3733 ;; Hardware stack levels required when called:    2
  3734 ;; This function calls:
  3735 ;;		_ClearResSum
  3736 ;; This function is called by:
  3737 ;;		_CheckTouchKey
  3738 ;;		_SystemEnterSleep
  3739 ;; This function uses a non-reentrant model
  3740 ;;
  3741                           
  3742                           
  3743                           ;psect for function _GetTouchKeyValue
  3744  0582                     _GetTouchKeyValue:	
  3745                           
  3746                           ;CheckTouchKey.c: 198: unsigned char cnt = 0;
  3747                           
  3748                           ;incstack = 0
  3749                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3750  0582  01F7               	clrf	GetTouchKeyValue@cnt
  3751                           
  3752                           ;CheckTouchKey.c: 199: unsigned int wake = 1;
  3753  0583  01F5               	clrf	GetTouchKeyValue@wake
  3754  0584  0AF5               	incf	GetTouchKeyValue@wake,f
  3755  0585  01F6               	clrf	GetTouchKeyValue@wake+1
  3756  0586                     l3334:	
  3757  0586  1C79               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3758  0587  2D8C               	goto	l3338
  3759  0588  0875               	movf	GetTouchKeyValue@wake,w
  3760  0589  3907               	andlw	7
  3761  058A  1903               	btfsc	3,2
  3762  058B  2DD7               	goto	l3366
  3763  058C                     l3338:	
  3764                           
  3765                           ;CheckTouchKey.c: 204: {
  3766                           ;CheckTouchKey.c: 205: KEYCON0 = 0;
  3767  058C  1683               	bsf	3,5	;RP0=1, select bank1
  3768  058D  1303               	bcf	3,6	;RP1=0, select bank1
  3769  058E  0192               	clrf	18	;volatile
  3770                           
  3771                           ;CheckTouchKey.c: 206: KEYCON1 = 0;
  3772  058F  0193               	clrf	19	;volatile
  3773                           
  3774                           ;CheckTouchKey.c: 207: KEYCON2 = 0x01;
  3775  0590  3001               	movlw	1
  3776  0591  0097               	movwf	23	;volatile
  3777                           
  3778                           ;CheckTouchKey.c: 209: TRISB6 = 0;
  3779  0592  1306               	bcf	6,6	;volatile
  3780                           
  3781                           ;CheckTouchKey.c: 210: RB6 = 0;
  3782  0593  1283               	bcf	3,5	;RP0=0, select bank0
  3783  0594  1306               	bcf	6,6	;volatile
  3784  0595  0000               	nop	;# 
  3785  0596  0000               	nop	;# 
  3786  0597  0000               	nop	;# 
  3787  0598  0000               	nop	;# 
  3788  0599  0000               	nop	;# 
  3789  059A  0000               	nop	;# 
  3790  059B  0000               	nop	;# 
  3791  059C  0000               	nop	;# 
  3792                           
  3793                           ;CheckTouchKey.c: 219: TRISB6 = 1;
  3794  059D  1683               	bsf	3,5	;RP0=1, select bank1
  3795  059E  1303               	bcf	3,6	;RP1=0, select bank1
  3796  059F  1706               	bsf	6,6	;volatile
  3797                           
  3798                           ;CheckTouchKey.c: 221: KEYCON0 = Table_KeyCap[cnt];
  3799  05A0  0877               	movf	GetTouchKeyValue@cnt,w
  3800  05A1  3E1A               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  3801  05A2  0084               	movwf	4
  3802  05A3  158A  2000  118A   	fcall	stringdir
  3803  05A6  0092               	movwf	18	;volatile
  3804                           
  3805                           ;CheckTouchKey.c: 222: KEYCON1 = Table_KeyChannel[cnt];
  3806  05A7  0877               	movf	GetTouchKeyValue@cnt,w
  3807  05A8  3E1D               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  3808  05A9  0084               	movwf	4
  3809  05AA  158A  2000  118A   	fcall	stringdir
  3810  05AD  0093               	movwf	19	;volatile
  3811  05AE  0000               	nop	;# 
  3812  05AF  0000               	nop	;# 
  3813  05B0  0000               	nop	;# 
  3814  05B1  0000               	nop	;# 
  3815                           
  3816                           ;CheckTouchKey.c: 227: KEYCON0 |= 0x1;
  3817  05B2  1683               	bsf	3,5	;RP0=1, select bank1
  3818  05B3  1303               	bcf	3,6	;RP1=0, select bank1
  3819  05B4  1412               	bsf	18,0	;volatile
  3820                           
  3821                           ;CheckTouchKey.c: 229: temp = 2000;
  3822  05B5  30D0               	movlw	208
  3823  05B6  00F3               	movwf	GetTouchKeyValue@temp
  3824  05B7  3007               	movlw	7
  3825  05B8  00F4               	movwf	GetTouchKeyValue@temp+1
  3826  05B9                     l1581:	
  3827                           ;CheckTouchKey.c: 230: while(!(KEYCON0&0x80))
  3828                           
  3829  05B9  1B92               	btfsc	18,7	;volatile
  3830  05BA  2DC7               	goto	l3364
  3831                           
  3832                           ;CheckTouchKey.c: 231: {
  3833                           ;CheckTouchKey.c: 232: if(0 == (--temp))
  3834  05BB  3001               	movlw	1
  3835  05BC  02F3               	subwf	GetTouchKeyValue@temp,f
  3836  05BD  1C03               	skipc
  3837  05BE  03F4               	decf	GetTouchKeyValue@temp+1,f
  3838  05BF  0873               	movf	GetTouchKeyValue@temp,w
  3839  05C0  0474               	iorwf	GetTouchKeyValue@temp+1,w
  3840  05C1  1D03               	btfss	3,2
  3841  05C2  2DB9               	goto	l1581
  3842                           
  3843                           ;CheckTouchKey.c: 233: {
  3844                           ;CheckTouchKey.c: 234: KeyCounter = 255;
  3845  05C3  30FF               	movlw	255
  3846  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  3847  05C5  00C8               	movwf	_KeyCounter
  3848                           
  3849                           ;CheckTouchKey.c: 235: ClearResSum();
  3850  05C6  2D5E               	ljmp	l3292
  3851  05C7                     l3364:	
  3852                           
  3853                           ;CheckTouchKey.c: 237: }
  3854                           ;CheckTouchKey.c: 238: }
  3855                           ;CheckTouchKey.c: 240: KeyResSum[cnt] += (unsigned int)((KEYDATAH<<8) | KEYDATAL);
  3856  05C7  1003               	clrc
  3857  05C8  0D77               	rlf	GetTouchKeyValue@cnt,w
  3858  05C9  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  3859  05CA  0084               	movwf	4
  3860  05CB  0814               	movf	20,w	;volatile
  3861  05CC  1383               	bcf	3,7	;select IRP bank1
  3862  05CD  0780               	addwf	0,f
  3863  05CE  0F84               	incfsz	4,f
  3864  05CF  0800               	movf	0,w
  3865  05D0  1803               	skipnc
  3866  05D1  0A00               	incf	0,w
  3867  05D2  00FF               	movwf	127
  3868  05D3  0815               	movf	21,w	;volatile
  3869  05D4  077F               	addwf	127,w
  3870  05D5  0080               	movwf	0
  3871  05D6  0384               	decf	4,f
  3872  05D7                     l3366:	
  3873  05D7  3003               	movlw	3
  3874                           
  3875                           ;CheckTouchKey.c: 241: }
  3876                           ;CheckTouchKey.c: 242: wake <<= 1;
  3877  05D8  1003               	clrc
  3878  05D9  0DF5               	rlf	GetTouchKeyValue@wake,f
  3879  05DA  0DF6               	rlf	GetTouchKeyValue@wake+1,f
  3880  05DB  0AF7               	incf	GetTouchKeyValue@cnt,f
  3881  05DC  0277               	subwf	GetTouchKeyValue@cnt,w
  3882  05DD  1C03               	skipc
  3883  05DE  2D86               	goto	l3334
  3884                           
  3885                           ;CheckTouchKey.c: 244: b_ksleep = 0;
  3886  05DF  1079               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3887  05E0  0008               	return
  3888  05E1                     __end_of_GetTouchKeyValue:	
  3889  05E1                     __ptext26:	
  3890 ;; *************** function _TurnKeyFlags *****************
  3891 ;; Defined at:
  3892 ;;		line 416 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;		None
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;		None
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  1    wreg      void 
  3899 ;; Registers used:
  3900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3901 ;; Tracked objects:
  3902 ;;		On entry : B00/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3906 ;;      Params:         0       0       0       0       0
  3907 ;;      Locals:         0       0       0       0       0
  3908 ;;      Temps:          0       0       0       0       0
  3909 ;;      Totals:         0       0       0       0       0
  3910 ;;Total ram usage:        0 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; Hardware stack levels required when called:    4
  3913 ;; This function calls:
  3914 ;;		_KeyClearIn
  3915 ;; This function is called by:
  3916 ;;		_CheckTouchKey
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           
  3921                           ;psect for function _TurnKeyFlags
  3922  05E1                     _TurnKeyFlags:	
  3923                           
  3924                           ;CheckTouchKey.c: 418: static unsigned char KeyHaveTimes = 0;
  3925                           ;CheckTouchKey.c: 419: static unsigned char KeyNoTimes = 0;
  3926                           ;CheckTouchKey.c: 421: if(KeyData[0] | KeyData[1])
  3927                           
  3928                           ;incstack = 0
  3929                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3930  05E1  0829               	movf	_KeyData+1,w	;volatile
  3931  05E2  0428               	iorwf	_KeyData,w	;volatile
  3932  05E3  1903               	btfsc	3,2
  3933  05E4  2E01               	goto	l3914
  3934                           
  3935                           ;CheckTouchKey.c: 422: {
  3936                           ;CheckTouchKey.c: 423: KeyNoTimes = 0;
  3937  05E5  01C4               	clrf	TurnKeyFlags@KeyNoTimes
  3938                           
  3939                           ;CheckTouchKey.c: 425: if(KeyData[0] == KeyOldData[0] && KeyData[1] == KeyOldData[1])
  3940  05E6  0828               	movf	_KeyData,w	;volatile
  3941  05E7  062A               	xorwf	_KeyOldData,w	;volatile
  3942  05E8  1D03               	skipz
  3943  05E9  2DFA               	goto	l1640
  3944  05EA  0829               	movf	_KeyData+1,w	;volatile
  3945  05EB  062B               	xorwf	_KeyOldData+1,w	;volatile
  3946  05EC  1D03               	skipz
  3947  05ED  2DFA               	goto	l1640
  3948  05EE  0AC5               	incf	TurnKeyFlags@KeyHaveTimes,f
  3949  05EF  1903               	btfsc	3,2
  3950  05F0  0008               	return
  3951                           
  3952                           ;CheckTouchKey.c: 428: {
  3953                           ;CheckTouchKey.c: 429: KeyHaveTimes = 0;
  3954  05F1  01C5               	clrf	TurnKeyFlags@KeyHaveTimes
  3955                           
  3956                           ;CheckTouchKey.c: 430: KeyFlag[0] = KeyData[0];
  3957  05F2  0828               	movf	_KeyData,w	;volatile
  3958  05F3  00C2               	movwf	_KeyFlag	;volatile
  3959                           
  3960                           ;CheckTouchKey.c: 431: KeyFlag[1] = KeyData[1];
  3961  05F4  0829               	movf	_KeyData+1,w	;volatile
  3962  05F5  00C3               	movwf	_KeyFlag+1	;volatile
  3963                           
  3964                           ;CheckTouchKey.c: 434: {
  3965                           ;CheckTouchKey.c: 435: if(!b_kclr)
  3966  05F6  1979               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  3967  05F7  0008               	return
  3968                           
  3969                           ;CheckTouchKey.c: 436: {
  3970                           ;CheckTouchKey.c: 437: b_kclr = 1;
  3971  05F8  1579               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  3972                           
  3973                           ;CheckTouchKey.c: 438: KeyClearIn();
  3974  05F9  2E30               	ljmp	l3524
  3975  05FA                     l1640:	
  3976                           
  3977                           ;CheckTouchKey.c: 443: else
  3978                           ;CheckTouchKey.c: 444: {
  3979                           ;CheckTouchKey.c: 445: b_kclr = 0;
  3980  05FA  1179               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  3981                           
  3982                           ;CheckTouchKey.c: 446: KeyOldData[0] = KeyData[0];
  3983  05FB  0828               	movf	_KeyData,w	;volatile
  3984  05FC  00AA               	movwf	_KeyOldData	;volatile
  3985                           
  3986                           ;CheckTouchKey.c: 447: KeyOldData[1] = KeyData[1];
  3987  05FD  0829               	movf	_KeyData+1,w	;volatile
  3988  05FE  00AB               	movwf	_KeyOldData+1	;volatile
  3989                           
  3990                           ;CheckTouchKey.c: 448: KeyHaveTimes = 0;
  3991  05FF  01C5               	clrf	TurnKeyFlags@KeyHaveTimes
  3992                           
  3993                           ;CheckTouchKey.c: 449: }
  3994                           ;CheckTouchKey.c: 450: }
  3995  0600  0008               	return
  3996  0601                     l3914:	
  3997                           
  3998                           ;CheckTouchKey.c: 451: else
  3999                           ;CheckTouchKey.c: 452: {
  4000                           ;CheckTouchKey.c: 453: KeyHaveTimes = 0;
  4001  0601  01C5               	clrf	TurnKeyFlags@KeyHaveTimes
  4002                           
  4003                           ;CheckTouchKey.c: 454: KeyOldData[0] = 0;
  4004  0602  01AA               	clrf	_KeyOldData	;volatile
  4005                           
  4006                           ;CheckTouchKey.c: 455: KeyOldData[1] = 0;
  4007  0603  01AB               	clrf	_KeyOldData+1	;volatile
  4008                           
  4009                           ;CheckTouchKey.c: 457: if(++KeyNoTimes >=2)
  4010  0604  3002               	movlw	2
  4011  0605  0AC4               	incf	TurnKeyFlags@KeyNoTimes,f
  4012  0606  0244               	subwf	TurnKeyFlags@KeyNoTimes,w
  4013  0607  1C03               	skipc
  4014  0608  0008               	return
  4015                           
  4016                           ;CheckTouchKey.c: 458: {
  4017                           ;CheckTouchKey.c: 459: KeyNoTimes = 0;
  4018  0609  01C4               	clrf	TurnKeyFlags@KeyNoTimes
  4019                           
  4020                           ;CheckTouchKey.c: 460: KeyFlag[0] = 0;
  4021  060A  01C2               	clrf	_KeyFlag	;volatile
  4022                           
  4023                           ;CheckTouchKey.c: 461: KeyFlag[1] = 0;
  4024  060B  01C3               	clrf	_KeyFlag+1	;volatile
  4025                           
  4026                           ;CheckTouchKey.c: 463: b_kclr = 0;
  4027  060C  1179               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4028  060D  0008               	return
  4029  060E                     __end_of_TurnKeyFlags:	
  4030  060E                     __ptext18:	
  4031 ;; *************** function _Refurbish_Sfr *****************
  4032 ;; Defined at:
  4033 ;;		line 114 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;		None
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;		None
  4038 ;; Return value:  Size  Location     Type
  4039 ;;                  1    wreg      void 
  4040 ;; Registers used:
  4041 ;;		wreg, status,2, status,0
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 300/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4047 ;;      Params:         0       0       0       0       0
  4048 ;;      Locals:         0       0       0       0       0
  4049 ;;      Temps:          0       0       0       0       0
  4050 ;;      Totals:         0       0       0       0       0
  4051 ;;Total ram usage:        0 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; Hardware stack levels required when called:    1
  4054 ;; This function calls:
  4055 ;;		Nothing
  4056 ;; This function is called by:
  4057 ;;		_WorkSleep
  4058 ;;		_main
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           
  4063                           ;psect for function _Refurbish_Sfr
  4064  060E                     _Refurbish_Sfr:	
  4065                           
  4066                           ;main.c: 116: PIE1 = 2;
  4067                           
  4068                           ;incstack = 0
  4069                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  4070  060E  3002               	movlw	2
  4071  060F  1283               	bcf	3,5	;RP0=0, select bank0
  4072                           
  4073                           ;main.c: 117: PR2 = 250;
  4074  0610  27DA  118A         	fcall	PL24	;call to abstracted procedure
  4075                           
  4076                           ;main.c: 118: INTCON = 0XC0;
  4077  0612  30C0               	movlw	192
  4078  0613  008B               	movwf	11	;volatile
  4079                           
  4080                           ;main.c: 119: if (4 != T2CON)
  4081  0614  3004               	movlw	4
  4082  0615  1283               	bcf	3,5	;RP0=0, select bank0
  4083  0616  0612               	xorwf	18,w	;volatile
  4084  0617  1903               	btfsc	3,2
  4085  0618  0008               	return
  4086                           
  4087                           ;main.c: 120: T2CON = 4;
  4088  0619  3004               	movlw	4
  4089  061A  0092               	movwf	18	;volatile
  4090  061B  0008               	return
  4091  061C                     __end_of_Refurbish_Sfr:	
  4092  061C                     __ptext31:	
  4093 ;; *************** function _CheckValidTime *****************
  4094 ;; Defined at:
  4095 ;;		line 501 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;		None
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;		None
  4100 ;; Return value:  Size  Location     Type
  4101 ;;                  1    wreg      void 
  4102 ;; Registers used:
  4103 ;;		wreg, status,2, status,0
  4104 ;; Tracked objects:
  4105 ;;		On entry : 0/0
  4106 ;;		On exit  : 300/0
  4107 ;;		Unchanged: 0/0
  4108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4109 ;;      Params:         0       0       0       0       0
  4110 ;;      Locals:         0       0       0       0       0
  4111 ;;      Temps:          0       0       0       0       0
  4112 ;;      Totals:         0       0       0       0       0
  4113 ;;Total ram usage:        0 bytes
  4114 ;; Hardware stack levels used:    1
  4115 ;; Hardware stack levels required when called:    1
  4116 ;; This function calls:
  4117 ;;		Nothing
  4118 ;; This function is called by:
  4119 ;;		_CheckTouchKey
  4120 ;; This function uses a non-reentrant model
  4121 ;;
  4122                           
  4123                           
  4124                           ;psect for function _CheckValidTime
  4125  061C                     _CheckValidTime:	
  4126  061C                     l3922:	
  4127                           ;incstack = 0
  4128                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  4129                           
  4130                           
  4131                           ;CheckTouchKey.c: 506: {
  4132                           ;CheckTouchKey.c: 507: if(KeyFlag[0] | KeyFlag[1])
  4133  061C  1283               	bcf	3,5	;RP0=0, select bank0
  4134  061D  1303               	bcf	3,6	;RP1=0, select bank0
  4135  061E  0843               	movf	_KeyFlag+1,w	;volatile
  4136  061F  0442               	iorwf	_KeyFlag,w	;volatile
  4137  0620  1903               	btfsc	3,2
  4138  0621  2E2D               	goto	l3928
  4139  0622  0AA6               	incf	CheckValidTime@validtime,f
  4140  0623  1903               	skipnz
  4141  0624  0AA7               	incf	CheckValidTime@validtime+1,f
  4142  0625  303A               	movlw	58
  4143  0626  0227               	subwf	CheckValidTime@validtime+1,w
  4144  0627  3098               	movlw	152
  4145  0628  1903               	skipnz
  4146  0629  0226               	subwf	CheckValidTime@validtime,w
  4147  062A  1C03               	skipc
  4148  062B  0008               	return
  4149                           
  4150                           ;CheckTouchKey.c: 510: {
  4151                           ;CheckTouchKey.c: 511: b_kerr = 1;
  4152  062C  14F9               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4153  062D                     l3928:	
  4154                           
  4155                           ;CheckTouchKey.c: 512: validtime = 0;
  4156  062D  01A6               	clrf	CheckValidTime@validtime
  4157  062E  01A7               	clrf	CheckValidTime@validtime+1
  4158  062F  0008               	return
  4159  0630                     __end_of_CheckValidTime:	
  4160  0630                     __ptext27:	
  4161 ;; *************** function _KeyClearIn *****************
  4162 ;; Defined at:
  4163 ;;		line 104 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;		None
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;  cnt             1    4[COMMON] unsigned char 
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  1    wreg      void 
  4170 ;; Registers used:
  4171 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4172 ;; Tracked objects:
  4173 ;;		On entry : B00/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4177 ;;      Params:         0       0       0       0       0
  4178 ;;      Locals:         1       0       0       0       0
  4179 ;;      Temps:          0       0       0       0       0
  4180 ;;      Totals:         1       0       0       0       0
  4181 ;;Total ram usage:        1 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    3
  4184 ;; This function calls:
  4185 ;;		_KeyClearOne
  4186 ;;		_KeyIsIn
  4187 ;; This function is called by:
  4188 ;;		_TurnKeyFlags
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           
  4193                           ;psect for function _KeyClearIn
  4194  0630                     _KeyClearIn:	
  4195  0630                     l3524:	
  4196                           ;incstack = 0
  4197                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4198                           
  4199                           
  4200                           ;CheckTouchKey.c: 106: unsigned char cnt;
  4201                           ;CheckTouchKey.c: 107: for(cnt=0;cnt < KeyTotalNumber;cnt++)
  4202  0630  01F4               	clrf	KeyClearIn@cnt
  4203  0631                     l3530:	
  4204                           
  4205                           ;CheckTouchKey.c: 108: {
  4206                           ;CheckTouchKey.c: 109: if(!KeyIsIn(cnt))
  4207  0631  0874               	movf	KeyClearIn@cnt,w
  4208  0632  21EC  118A         	fcall	_KeyIsIn
  4209  0634  3A00               	xorlw	0
  4210  0635  1D03               	skipz
  4211  0636  2E3A               	goto	l3534
  4212                           
  4213                           ;CheckTouchKey.c: 110: {
  4214                           ;CheckTouchKey.c: 111: KeyClearOne(cnt);
  4215  0637  0874               	movf	KeyClearIn@cnt,w
  4216  0638  256D  118A         	fcall	_KeyClearOne
  4217  063A                     l3534:	
  4218  063A  3003               	movlw	3
  4219  063B  0AF4               	incf	KeyClearIn@cnt,f
  4220  063C  0274               	subwf	KeyClearIn@cnt,w
  4221  063D  1803               	btfsc	3,0
  4222  063E  0008               	return
  4223  063F  2E31               	goto	l3530
  4224  0640                     __end_of_KeyClearIn:	
  4225  0640                     __ptext19:	
  4226 ;; *************** function _Init_System *****************
  4227 ;; Defined at:
  4228 ;;		line 76 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;		None
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;		None
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  1    wreg      void 
  4235 ;; Registers used:
  4236 ;;		wreg, status,2
  4237 ;; Tracked objects:
  4238 ;;		On entry : 300/0
  4239 ;;		On exit  : 300/100
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4242 ;;      Params:         0       0       0       0       0
  4243 ;;      Locals:         0       0       0       0       0
  4244 ;;      Temps:          0       0       0       0       0
  4245 ;;      Totals:         0       0       0       0       0
  4246 ;;Total ram usage:        0 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:    1
  4249 ;; This function calls:
  4250 ;;		Nothing
  4251 ;; This function is called by:
  4252 ;;		_WorkSleep
  4253 ;;		_main
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           
  4258                           ;psect for function _Init_System
  4259  0640                     _Init_System:	
  4260  0640                     l3370:	
  4261                           ;incstack = 0
  4262                           ; Regs used in _Init_System: [wreg+status,2]
  4263                           
  4264  0640  0000               	nop	;# 
  4265  0641  0064               	clrwdt	;# 
  4266                           
  4267                           ;main.c: 80: INTCON = 0;
  4268  0642  018B               	clrf	11	;volatile
  4269                           
  4270                           ;main.c: 81: OSCCON = 0X71;
  4271  0643  3071               	movlw	113
  4272  0644  1683               	bsf	3,5	;RP0=1, select bank1
  4273  0645  1303               	bcf	3,6	;RP1=0, select bank1
  4274  0646  0088               	movwf	8	;volatile
  4275                           
  4276                           ;main.c: 82: OPTION_REG = 0;
  4277  0647  0181               	clrf	1	;volatile
  4278                           
  4279                           ;main.c: 83: SWDTEN = 1;
  4280  0648  1488               	bsf	8,1	;volatile
  4281  0649  0064               	clrwdt	;# 
  4282                           
  4283                           ;main.c: 88: TRISA = 0x22;
  4284  064A  3022               	movlw	34
  4285  064B  1683               	bsf	3,5	;RP0=1, select bank1
  4286  064C  1303               	bcf	3,6	;RP1=0, select bank1
  4287                           
  4288                           ;main.c: 89: PORTA = 0;
  4289                           
  4290                           ;main.c: 90: TRISB = 0x18;
  4291  064D  27C7  118A         	fcall	PL18	;call to abstracted procedure
  4292                           
  4293                           ;main.c: 91: PORTB = 0;
  4294  064F  1283               	bcf	3,5	;RP0=0, select bank0
  4295  0650  0186               	clrf	6	;volatile
  4296                           
  4297                           ;main.c: 92: WPUB = 0x00;
  4298  0651  0188               	clrf	8	;volatile
  4299                           
  4300                           ;main.c: 93: TRISC = 0;
  4301  0652  1683               	bsf	3,5	;RP0=1, select bank3
  4302  0653  1703               	bsf	3,6	;RP1=1, select bank3
  4303  0654  0186               	clrf	6	;volatile
  4304                           
  4305                           ;main.c: 94: PORTC = 0;
  4306  0655  0185               	clrf	5	;volatile
  4307                           
  4308                           ;main.c: 95: WPUC = 0x00;
  4309  0656  1283               	bcf	3,5	;RP0=0, select bank2
  4310  0657  0195               	clrf	21	;volatile
  4311                           
  4312                           ;main.c: 97: PIE1 = 2;
  4313  0658  3002               	movlw	2
  4314                           
  4315                           ;main.c: 98: PR2 = 250;
  4316  0659  27DA               	fcall	PL24	;call to abstracted procedure
  4317                           
  4318                           ;main.c: 99: T2CON = 4;
  4319  065A  3004               	movlw	4
  4320  065B  1283               	bcf	3,5	;RP0=0, select bank0
  4321  065C  0092               	movwf	18	;volatile
  4322                           
  4323                           ;main.c: 101: INTCON = 0XC0;
  4324  065D  30C0               	movlw	192
  4325  065E  008B               	movwf	11	;volatile
  4326                           
  4327                           ;main.c: 102: ADCON0 = 0XC1;
  4328  065F  30C1               	movlw	193
  4329  0660  1683               	bsf	3,5	;RP0=1, select bank1
  4330  0661  009D               	movwf	29	;volatile
  4331                           
  4332                           ;main.c: 103: ADON = 1;
  4333  0662  141D               	bsf	29,0	;volatile
  4334  0663  0008               	return
  4335  0664                     __end_of_Init_System:	
  4336  0664                     __ptext11:	
  4337 ;; *************** function _TM1650_STOP *****************
  4338 ;; Defined at:
  4339 ;;		line 469 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;		None
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;		None
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  1    wreg      void 
  4346 ;; Registers used:
  4347 ;;		None
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/300
  4350 ;;		On exit  : 300/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4353 ;;      Params:         0       0       0       0       0
  4354 ;;      Locals:         0       0       0       0       0
  4355 ;;      Temps:          0       0       0       0       0
  4356 ;;      Totals:         0       0       0       0       0
  4357 ;;Total ram usage:        0 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    1
  4360 ;; This function calls:
  4361 ;;		Nothing
  4362 ;; This function is called by:
  4363 ;;		_tm1650cmd
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           
  4368                           ;psect for function _TM1650_STOP
  4369  0664                     _TM1650_STOP:	
  4370  0664                     l3300:	
  4371                           ;incstack = 0
  4372                           ; Regs used in _TM1650_STOP: []
  4373                           
  4374                           
  4375                           ;main.c: 471: RB7=0;
  4376  0664  1283               	bcf	3,5	;RP0=0, select bank0
  4377  0665  1303               	bcf	3,6	;RP1=0, select bank0
  4378  0666  1386               	bcf	6,7	;volatile
  4379  0667  0000               	nop	;# 
  4380  0668  0000               	nop	;# 
  4381  0669  0000               	nop	;# 
  4382  066A  0000               	nop	;# 
  4383  066B  0000               	nop	;# 
  4384  066C  0000               	nop	;# 
  4385                           
  4386                           ;main.c: 473: RC0=1;
  4387  066D  1683               	bsf	3,5	;RP0=1, select bank3
  4388  066E  1703               	bsf	3,6	;RP1=1, select bank3
  4389  066F  1405               	bsf	5,0	;volatile
  4390  0670  0000               	nop	;# 
  4391  0671  0000               	nop	;# 
  4392  0672  0000               	nop	;# 
  4393  0673  0000               	nop	;# 
  4394  0674  0000               	nop	;# 
  4395  0675  0000               	nop	;# 
  4396                           
  4397                           ;main.c: 475: RB7=1;
  4398  0676  1283               	bcf	3,5	;RP0=0, select bank0
  4399  0677  1303               	bcf	3,6	;RP1=0, select bank0
  4400  0678  1786               	bsf	6,7	;volatile
  4401  0679  0000               	nop	;# 
  4402  067A  0000               	nop	;# 
  4403  067B  0000               	nop	;# 
  4404  067C  0000               	nop	;# 
  4405  067D  0000               	nop	;# 
  4406  067E  0000               	nop	;# 
  4407                           
  4408                           ;main.c: 477: RC0=0;
  4409  067F  1683               	bsf	3,5	;RP0=1, select bank3
  4410  0680  1703               	bsf	3,6	;RP1=1, select bank3
  4411  0681  1005               	bcf	5,0	;volatile
  4412                           
  4413                           ;main.c: 478: RB7=0;
  4414  0682  1283               	bcf	3,5	;RP0=0, select bank0
  4415  0683  1303               	bcf	3,6	;RP1=0, select bank0
  4416  0684  1386               	bcf	6,7	;volatile
  4417  0685  0008               	return
  4418  0686                     __end_of_TM1650_STOP:	
  4419  0686                     __ptext8:	
  4420 ;; *************** function _initTM1650 *****************
  4421 ;; Defined at:
  4422 ;;		line 594 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;		None
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;		None
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  1    wreg      void 
  4429 ;; Registers used:
  4430 ;;		wreg, status,2, status,0, pclath, cstack
  4431 ;; Tracked objects:
  4432 ;;		On entry : 200/100
  4433 ;;		On exit  : 300/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4436 ;;      Params:         0       0       0       0       0
  4437 ;;      Locals:         0       0       0       0       0
  4438 ;;      Temps:          0       0       0       0       0
  4439 ;;      Totals:         0       0       0       0       0
  4440 ;;Total ram usage:        0 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; Hardware stack levels required when called:    3
  4443 ;; This function calls:
  4444 ;;		_tm1650cmd
  4445 ;; This function is called by:
  4446 ;;		_showCtr
  4447 ;;		_main
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           
  4452                           ;psect for function _initTM1650
  4453  0686                     _initTM1650:	
  4454  0686                     l3610:	
  4455                           ;incstack = 0
  4456                           ; Regs used in _initTM1650: [wreg+status,2+status,0+pclath+cstack]
  4457                           
  4458                           
  4459                           ;main.c: 596: tm1650cmd(0X48,0x11);
  4460  0686  3011               	movlw	17
  4461  0687  00F4               	movwf	tm1650cmd@seg_data
  4462  0688  3048               	movlw	72
  4463  0689  23B5  118A         	fcall	_tm1650cmd
  4464  068B  0000               	nop	;# 
  4465  068C  0000               	nop	;# 
  4466  068D  0000               	nop	;# 
  4467  068E  0000               	nop	;# 
  4468  068F  0000               	nop	;# 
  4469  0690  0000               	nop	;# 
  4470                           
  4471                           ;main.c: 598: tm1650cmd(0X68,0xFF);
  4472  0691  30FF               	movlw	255
  4473  0692  00F4               	movwf	tm1650cmd@seg_data
  4474  0693  3068               	movlw	104
  4475  0694  23B5  118A         	fcall	_tm1650cmd
  4476  0696  0000               	nop	;# 
  4477  0697  0000               	nop	;# 
  4478  0698  0000               	nop	;# 
  4479  0699  0000               	nop	;# 
  4480  069A  0000               	nop	;# 
  4481  069B  0000               	nop	;# 
  4482                           
  4483                           ;main.c: 600: tm1650cmd(0X6A,0xFF);
  4484  069C  30FF               	movlw	255
  4485  069D  00F4               	movwf	tm1650cmd@seg_data
  4486  069E  306A               	movlw	106
  4487  069F  23B5  118A         	fcall	_tm1650cmd
  4488  06A1  0000               	nop	;# 
  4489  06A2  0000               	nop	;# 
  4490  06A3  0000               	nop	;# 
  4491  06A4  0000               	nop	;# 
  4492  06A5  0000               	nop	;# 
  4493  06A6  0000               	nop	;# 
  4494                           
  4495                           ;main.c: 602: tm1650cmd(0X6C,0xFF);
  4496  06A7  30FF               	movlw	255
  4497  06A8  00F4               	movwf	tm1650cmd@seg_data
  4498  06A9  306C               	movlw	108
  4499  06AA  23B5  118A         	fcall	_tm1650cmd
  4500  06AC  0000               	nop	;# 
  4501  06AD  0000               	nop	;# 
  4502  06AE  0000               	nop	;# 
  4503  06AF  0000               	nop	;# 
  4504  06B0  0000               	nop	;# 
  4505  06B1  0000               	nop	;# 
  4506                           
  4507                           ;main.c: 604: tm1650cmd(0X6E,0xFF);
  4508  06B2  30FF               	movlw	255
  4509  06B3  00F4               	movwf	tm1650cmd@seg_data
  4510  06B4  306E               	movlw	110
  4511  06B5  2BB5               	ljmp	_tm1650cmd
  4512  06B6                     __end_of_initTM1650:	
  4513  06B6                     __ptext7:	
  4514 ;; *************** function _setZeroStep *****************
  4515 ;; Defined at:
  4516 ;;		line 643 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;		None
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;		None
  4521 ;; Return value:  Size  Location     Type
  4522 ;;                  1    wreg      void 
  4523 ;; Registers used:
  4524 ;;		wreg, status,2, status,0
  4525 ;; Tracked objects:
  4526 ;;		On entry : 300/0
  4527 ;;		On exit  : 300/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4530 ;;      Params:         0       0       0       0       0
  4531 ;;      Locals:         0       0       0       0       0
  4532 ;;      Temps:          0       0       0       0       0
  4533 ;;      Totals:         0       0       0       0       0
  4534 ;;Total ram usage:        0 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    1
  4537 ;; This function calls:
  4538 ;;		Nothing
  4539 ;; This function is called by:
  4540 ;;		_showCtr
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           
  4545                           ;psect for function _setZeroStep
  4546  06B6                     _setZeroStep:	
  4547  06B6                     l3628:	
  4548                           ;incstack = 0
  4549                           ; Regs used in _setZeroStep: [wreg+status,2+status,0]
  4550                           
  4551                           
  4552                           ;main.c: 645: if(zeroStep == 0)
  4553  06B6  087A               	movf	_zeroStep,w
  4554  06B7  1D03               	btfss	3,2
  4555  06B8  2EBC               	goto	l3632
  4556                           
  4557                           ;main.c: 646: {
  4558                           ;main.c: 647: showLed1 = 0x00;
  4559  06B9  01DF               	clrf	_showLed1
  4560                           
  4561                           ;main.c: 648: showLed2 = 0x00;
  4562  06BA  01DE               	clrf	_showLed2
  4563                           
  4564                           ;main.c: 649: }
  4565  06BB  0008               	return
  4566  06BC                     l3632:	
  4567                           
  4568                           ;main.c: 650: else if(zeroStep == 1)
  4569  06BC  0B7A               	decfsz	_zeroStep,w
  4570  06BD  2EC8               	goto	l3638
  4571                           
  4572                           ;main.c: 651: {
  4573                           ;main.c: 652: showLed1 = 0xE1;
  4574  06BE  30E1               	movlw	225
  4575  06BF  2EC5               	goto	L9
  4576  06C0                     l3640:	
  4577                           
  4578                           ;main.c: 656: {
  4579                           ;main.c: 657: showLed1 = 0xE3;
  4580  06C0  30E3               	movlw	227
  4581  06C1  2EC5               	goto	L9
  4582  06C2                     l3646:	
  4583                           
  4584                           ;main.c: 661: {
  4585                           ;main.c: 662: showLed1 = 0xE7;
  4586  06C2  30E7               	movlw	231
  4587  06C3  2EC5               	goto	L9
  4588  06C4                     l3652:	
  4589                           
  4590                           ;main.c: 666: {
  4591                           ;main.c: 667: showLed1 = 0xFF;
  4592  06C4  30FF               	movlw	255
  4593  06C5                     L9:	
  4594  06C5  00DF               	movwf	_showLed1
  4595                           
  4596                           ;main.c: 653: showLed2 = 0x00;
  4597  06C6  01DE               	clrf	_showLed2
  4598                           
  4599                           ;main.c: 654: }
  4600  06C7  0008               	return
  4601  06C8                     l3638:	
  4602                           
  4603                           ;main.c: 655: else if(zeroStep == 2)
  4604  06C8  3002               	movlw	2
  4605  06C9  067A               	xorwf	_zeroStep,w
  4606  06CA  1903               	btfsc	3,2
  4607  06CB  2EC0               	goto	l3640
  4608                           
  4609                           ;main.c: 660: else if(zeroStep == 3)
  4610  06CC  3003               	movlw	3
  4611  06CD  067A               	xorwf	_zeroStep,w
  4612  06CE  1903               	btfsc	3,2
  4613  06CF  2EC2               	goto	l3646
  4614                           
  4615                           ;main.c: 665: else if(zeroStep == 4)
  4616  06D0  3004               	movlw	4
  4617  06D1  067A               	xorwf	_zeroStep,w
  4618  06D2  1903               	btfsc	3,2
  4619  06D3  2EC4               	goto	l3652
  4620                           
  4621                           ;main.c: 670: else if(zeroStep == 5)
  4622  06D4  3005               	movlw	5
  4623  06D5  067A               	xorwf	_zeroStep,w
  4624  06D6  1D03               	btfss	3,2
  4625  06D7  2EDD               	goto	l3662
  4626                           
  4627                           ;main.c: 671: {
  4628                           ;main.c: 672: showLed1 = 0xFF;
  4629  06D8  30FF               	movlw	255
  4630  06D9  00DF               	movwf	_showLed1
  4631                           
  4632                           ;main.c: 673: showLed2 = 0x01;
  4633  06DA  01DE               	clrf	_showLed2
  4634  06DB  0ADE               	incf	_showLed2,f
  4635                           
  4636                           ;main.c: 674: }
  4637  06DC  0008               	return
  4638  06DD                     l3662:	
  4639                           
  4640                           ;main.c: 675: else if(zeroStep == 6)
  4641  06DD  3006               	movlw	6
  4642  06DE  067A               	xorwf	_zeroStep,w
  4643  06DF  1D03               	btfss	3,2
  4644  06E0  2EE6               	goto	l3666
  4645                           
  4646                           ;main.c: 676: {
  4647                           ;main.c: 677: showLed1 = 0xFF;
  4648  06E1  30FF               	movlw	255
  4649  06E2  00DF               	movwf	_showLed1
  4650                           
  4651                           ;main.c: 678: showLed2 = 0x03;
  4652  06E3  3003               	movlw	3
  4653  06E4  00DE               	movwf	_showLed2
  4654                           
  4655                           ;main.c: 679: }
  4656  06E5  0008               	return
  4657  06E6                     l3666:	
  4658                           
  4659                           ;main.c: 680: else if(zeroStep == 7)
  4660  06E6  3007               	movlw	7
  4661  06E7  067A               	xorwf	_zeroStep,w
  4662  06E8  1D03               	btfss	3,2
  4663  06E9  2EEF               	goto	l3670
  4664                           
  4665                           ;main.c: 681: {
  4666                           ;main.c: 682: showLed1 = 0xFF;
  4667  06EA  30FF               	movlw	255
  4668  06EB  00DF               	movwf	_showLed1
  4669                           
  4670                           ;main.c: 683: showLed2 = 0x07;
  4671  06EC  3007               	movlw	7
  4672  06ED  00DE               	movwf	_showLed2
  4673                           
  4674                           ;main.c: 684: }
  4675  06EE  0008               	return
  4676  06EF                     l3670:	
  4677                           
  4678                           ;main.c: 685: else if(zeroStep == 8)
  4679  06EF  3008               	movlw	8
  4680  06F0  067A               	xorwf	_zeroStep,w
  4681  06F1  1D03               	btfss	3,2
  4682  06F2  2EF8               	goto	l3674
  4683                           
  4684                           ;main.c: 686: {
  4685                           ;main.c: 687: showLed1 = 0xFF;
  4686  06F3  30FF               	movlw	255
  4687  06F4  00DF               	movwf	_showLed1
  4688                           
  4689                           ;main.c: 688: showLed2 = 0x0F;
  4690  06F5  300F               	movlw	15
  4691  06F6  00DE               	movwf	_showLed2
  4692                           
  4693                           ;main.c: 689: }
  4694  06F7  0008               	return
  4695  06F8                     l3674:	
  4696                           
  4697                           ;main.c: 690: else if(zeroStep == 9)
  4698  06F8  3009               	movlw	9
  4699  06F9  067A               	xorwf	_zeroStep,w
  4700  06FA  1D03               	btfss	3,2
  4701  06FB  2F01               	goto	l3678
  4702                           
  4703                           ;main.c: 691: {
  4704                           ;main.c: 692: showLed1 = 0xFF;
  4705  06FC  30FF               	movlw	255
  4706  06FD  00DF               	movwf	_showLed1
  4707                           
  4708                           ;main.c: 693: showLed2 = 0x2F;
  4709  06FE  302F               	movlw	47
  4710  06FF  00DE               	movwf	_showLed2
  4711                           
  4712                           ;main.c: 694: }
  4713  0700  0008               	return
  4714  0701                     l3678:	
  4715                           
  4716                           ;main.c: 695: else if(zeroStep == 10)
  4717  0701  300A               	movlw	10
  4718  0702  067A               	xorwf	_zeroStep,w
  4719  0703  1D03               	btfss	3,2
  4720  0704  2F0A               	goto	l3682
  4721                           
  4722                           ;main.c: 696: {
  4723                           ;main.c: 697: showLed1 = 0xFF;
  4724  0705  30FF               	movlw	255
  4725  0706  00DF               	movwf	_showLed1
  4726                           
  4727                           ;main.c: 698: showLed2 = 0x6F;
  4728  0707  306F               	movlw	111
  4729  0708  00DE               	movwf	_showLed2
  4730                           
  4731                           ;main.c: 699: }
  4732  0709  0008               	return
  4733  070A                     l3682:	
  4734                           
  4735                           ;main.c: 700: else if(zeroStep == 11)
  4736  070A  300B               	movlw	11
  4737  070B  067A               	xorwf	_zeroStep,w
  4738  070C  1D03               	btfss	3,2
  4739  070D  2F13               	goto	l3686
  4740  070E                     l3684:	
  4741                           
  4742                           ;main.c: 701: {
  4743                           ;main.c: 702: showLed1 = 0xFF;
  4744  070E  30FF               	movlw	255
  4745  070F  00DF               	movwf	_showLed1
  4746                           
  4747                           ;main.c: 703: showLed2 = 0xEF;
  4748  0710  30EF               	movlw	239
  4749  0711  00DE               	movwf	_showLed2
  4750                           
  4751                           ;main.c: 704: }
  4752  0712  0008               	return
  4753  0713                     l3686:	
  4754                           
  4755                           ;main.c: 705: else if(zeroStep == 12)
  4756  0713  300C               	movlw	12
  4757  0714  067A               	xorwf	_zeroStep,w
  4758  0715  1D03               	btfss	3,2
  4759  0716  0008               	return
  4760  0717  2F0E               	goto	l3684
  4761  0718                     __end_of_setZeroStep:	
  4762  0718                     __ptext6:	
  4763 ;; *************** function _setZeroStep2 *****************
  4764 ;; Defined at:
  4765 ;;		line 713 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;		None
  4768 ;; Auto vars:     Size  Location     Type
  4769 ;;		None
  4770 ;; Return value:  Size  Location     Type
  4771 ;;                  1    wreg      void 
  4772 ;; Registers used:
  4773 ;;		wreg, status,2, status,0
  4774 ;; Tracked objects:
  4775 ;;		On entry : 300/0
  4776 ;;		On exit  : 300/0
  4777 ;;		Unchanged: 0/0
  4778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4779 ;;      Params:         0       0       0       0       0
  4780 ;;      Locals:         0       0       0       0       0
  4781 ;;      Temps:          0       0       0       0       0
  4782 ;;      Totals:         0       0       0       0       0
  4783 ;;Total ram usage:        0 bytes
  4784 ;; Hardware stack levels used:    1
  4785 ;; Hardware stack levels required when called:    1
  4786 ;; This function calls:
  4787 ;;		Nothing
  4788 ;; This function is called by:
  4789 ;;		_showCtr
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           
  4794                           ;psect for function _setZeroStep2
  4795  0718                     _setZeroStep2:	
  4796  0718                     l3690:	
  4797                           ;incstack = 0
  4798                           ; Regs used in _setZeroStep2: [wreg+status,2+status,0]
  4799                           
  4800                           
  4801                           ;main.c: 715: if(zeroStep == 0)
  4802  0718  087A               	movf	_zeroStep,w
  4803  0719  1D03               	btfss	3,2
  4804  071A  2F1E               	goto	l3694
  4805                           
  4806                           ;main.c: 716: {
  4807                           ;main.c: 717: showLed1 = 0x00;
  4808  071B  01DF               	clrf	_showLed1
  4809                           
  4810                           ;main.c: 718: showLed2 = 0x00;
  4811  071C  01DE               	clrf	_showLed2
  4812                           
  4813                           ;main.c: 719: }
  4814  071D  0008               	return
  4815  071E                     l3694:	
  4816                           
  4817                           ;main.c: 720: else if(zeroStep == 1)
  4818  071E  0B7A               	decfsz	_zeroStep,w
  4819  071F  2F29               	goto	l3700
  4820                           
  4821                           ;main.c: 721: {
  4822                           ;main.c: 722: showLed1 = 0x01;
  4823  0720  01DF               	clrf	_showLed1
  4824  0721  0ADF               	incf	_showLed1,f
  4825  0722  2F27               	goto	l3698
  4826  0723                     l3702:	
  4827                           
  4828                           ;main.c: 726: {
  4829                           ;main.c: 727: showLed1 = 0x02;
  4830  0723  3002               	movlw	2
  4831                           
  4832                           ;main.c: 731: {
  4833                           ;main.c: 732: showLed1 = 0x04;
  4834  0724  2F26               	goto	L5
  4835  0725                     l3714:	
  4836                           
  4837                           ;main.c: 736: {
  4838                           ;main.c: 737: showLed1 = 0x10;
  4839  0725  3010               	movlw	16
  4840  0726                     L5:	
  4841  0726  00DF               	movwf	_showLed1
  4842  0727                     l3698:	
  4843                           
  4844                           ;main.c: 723: showLed2 = 0x00;
  4845  0727  01DE               	clrf	_showLed2
  4846                           
  4847                           ;main.c: 724: }
  4848  0728  0008               	return
  4849  0729                     l3700:	
  4850                           
  4851                           ;main.c: 725: else if(zeroStep == 2)
  4852  0729  3002               	movlw	2
  4853  072A  067A               	xorwf	_zeroStep,w
  4854  072B  1903               	btfsc	3,2
  4855  072C  2F23               	goto	l3702
  4856                           
  4857                           ;main.c: 730: else if(zeroStep == 3)
  4858  072D  3003               	movlw	3
  4859  072E  067A               	xorwf	_zeroStep,w
  4860                           
  4861                           ;main.c: 735: else if(zeroStep == 4)
  4862  072F  3004               	movlw	4
  4863  0730  1903               	btfsc	3,2
  4864  0731  2F26               	goto	L5
  4865  0732  067A               	xorwf	_zeroStep,w
  4866  0733  1903               	btfsc	3,2
  4867  0734  2F25               	goto	l3714
  4868                           
  4869                           ;main.c: 740: else if(zeroStep == 5)
  4870  0735  3005               	movlw	5
  4871  0736  067A               	xorwf	_zeroStep,w
  4872  0737  1D03               	btfss	3,2
  4873  0738  2F3D               	goto	l3724
  4874                           
  4875                           ;main.c: 741: {
  4876                           ;main.c: 742: showLed1 = 0x00;
  4877  0739  01DF               	clrf	_showLed1
  4878                           
  4879                           ;main.c: 743: showLed2 = 0x01;
  4880  073A  01DE               	clrf	_showLed2
  4881  073B  0ADE               	incf	_showLed2,f
  4882                           
  4883                           ;main.c: 744: }
  4884  073C  0008               	return
  4885  073D                     l3724:	
  4886                           
  4887                           ;main.c: 745: else if(zeroStep == 6)
  4888  073D  3006               	movlw	6
  4889  073E  067A               	xorwf	_zeroStep,w
  4890  073F  1D03               	btfss	3,2
  4891  0740  2F45               	goto	l3730
  4892  0741  3002               	movlw	2
  4893                           
  4894                           ;main.c: 746: {
  4895                           ;main.c: 747: showLed1 = 0x00;
  4896  0742  01DF               	clrf	_showLed1
  4897                           
  4898                           ;main.c: 748: showLed2 = 0x02;
  4899  0743  00DE               	movwf	_showLed2
  4900                           
  4901                           ;main.c: 749: }
  4902  0744  0008               	return
  4903  0745                     l3730:	
  4904                           
  4905                           ;main.c: 750: else if(zeroStep == 7)
  4906  0745  3007               	movlw	7
  4907  0746  067A               	xorwf	_zeroStep,w
  4908  0747  1D03               	btfss	3,2
  4909  0748  2F4D               	goto	l3736
  4910  0749  3004               	movlw	4
  4911                           
  4912                           ;main.c: 751: {
  4913                           ;main.c: 752: showLed1 = 0x00;
  4914  074A  01DF               	clrf	_showLed1
  4915                           
  4916                           ;main.c: 753: showLed2 = 0x04;
  4917  074B  00DE               	movwf	_showLed2
  4918                           
  4919                           ;main.c: 754: }
  4920  074C  0008               	return
  4921  074D                     l3736:	
  4922                           
  4923                           ;main.c: 755: else if(zeroStep == 8)
  4924  074D  3008               	movlw	8
  4925  074E  067A               	xorwf	_zeroStep,w
  4926  074F  1D03               	btfss	3,2
  4927  0750  2F55               	goto	l3742
  4928  0751  3008               	movlw	8
  4929                           
  4930                           ;main.c: 756: {
  4931                           ;main.c: 757: showLed1 = 0x00;
  4932  0752  01DF               	clrf	_showLed1
  4933                           
  4934                           ;main.c: 758: showLed2 = 0x08;
  4935  0753  00DE               	movwf	_showLed2
  4936                           
  4937                           ;main.c: 759: }
  4938  0754  0008               	return
  4939  0755                     l3742:	
  4940                           
  4941                           ;main.c: 760: else if(zeroStep == 9)
  4942  0755  3009               	movlw	9
  4943  0756  067A               	xorwf	_zeroStep,w
  4944  0757  1D03               	btfss	3,2
  4945  0758  2F5D               	goto	l3748
  4946  0759  3020               	movlw	32
  4947                           
  4948                           ;main.c: 761: {
  4949                           ;main.c: 762: showLed1 = 0x00;
  4950  075A  01DF               	clrf	_showLed1
  4951                           
  4952                           ;main.c: 763: showLed2 = 0x20;
  4953  075B  00DE               	movwf	_showLed2
  4954                           
  4955                           ;main.c: 764: }
  4956  075C  0008               	return
  4957  075D                     l3748:	
  4958                           
  4959                           ;main.c: 765: else if(zeroStep == 10)
  4960  075D  300A               	movlw	10
  4961  075E  067A               	xorwf	_zeroStep,w
  4962  075F  1D03               	btfss	3,2
  4963  0760  2F65               	goto	l3754
  4964  0761  3040               	movlw	64
  4965                           
  4966                           ;main.c: 766: {
  4967                           ;main.c: 767: showLed1 = 0x00;
  4968  0762  01DF               	clrf	_showLed1
  4969                           
  4970                           ;main.c: 768: showLed2 = 0x40;
  4971  0763  00DE               	movwf	_showLed2
  4972                           
  4973                           ;main.c: 769: }
  4974  0764  0008               	return
  4975  0765                     l3754:	
  4976                           
  4977                           ;main.c: 770: else if(zeroStep == 11)
  4978  0765  300B               	movlw	11
  4979  0766  067A               	xorwf	_zeroStep,w
  4980  0767  1D03               	btfss	3,2
  4981  0768  2F6D               	goto	l3760
  4982  0769  3080               	movlw	128
  4983                           
  4984                           ;main.c: 771: {
  4985                           ;main.c: 772: showLed1 = 0x00;
  4986  076A  01DF               	clrf	_showLed1
  4987                           
  4988                           ;main.c: 773: showLed2 = 0x80;
  4989  076B  00DE               	movwf	_showLed2
  4990                           
  4991                           ;main.c: 774: }
  4992  076C  0008               	return
  4993  076D                     l3760:	
  4994                           
  4995                           ;main.c: 775: else if(zeroStep == 12)
  4996  076D  300C               	movlw	12
  4997  076E  067A               	xorwf	_zeroStep,w
  4998  076F  1D03               	btfss	3,2
  4999  0770  0008               	return
  5000  0771  3010               	movlw	16
  5001                           
  5002                           ;main.c: 776: {
  5003                           ;main.c: 777: showLed1 = 0x00;
  5004  0772  01DF               	clrf	_showLed1
  5005                           
  5006                           ;main.c: 778: showLed2 = 0x10;
  5007  0773  00DE               	movwf	_showLed2
  5008  0774  0008               	return
  5009  0775                     __end_of_setZeroStep2:	
  5010  0775                     PL2:	
  5011  0775  0800               	movf	0,w
  5012  0776  00E7               	movwf	CheckKeyOldValue@KeyOldTemp
  5013  0777  0A84               	incf	4,f
  5014  0778  0800               	movf	0,w
  5015  0779  00E8               	movwf	CheckKeyOldValue@KeyOldTemp+1
  5016  077A  0865               	movf	CheckKeyOldValue@KeyResTemp,w
  5017  077B  02E7               	subwf	CheckKeyOldValue@KeyOldTemp,f
  5018  077C  0866               	movf	CheckKeyOldValue@KeyResTemp+1,w
  5019  077D  1C03               	skipc
  5020  077E  03E8               	decf	CheckKeyOldValue@KeyOldTemp+1,f
  5021  077F  02E8               	subwf	CheckKeyOldValue@KeyOldTemp+1,f
  5022  0780  3000               	movlw	0
  5023  0781  0268               	subwf	CheckKeyOldValue@KeyOldTemp+1,w
  5024  0782  3402               	retlw	2
  5025  0783                     __end_ofPL2:	
  5026  0783                     PL4:	
  5027  0783  00F5               	movwf	??_CheckOnceResult
  5028  0784  0A84               	incf	4,f
  5029  0785  0800               	movf	0,w
  5030  0786  00F6               	movwf	??_CheckOnceResult+1
  5031  0787  086A               	movf	CheckOnceResult@KeyDown,w
  5032  0788  0775               	addwf	??_CheckOnceResult,w
  5033  0789  00F7               	movwf	??_CheckOnceResult+2
  5034  078A  0876               	movf	??_CheckOnceResult+1,w
  5035  078B  1803               	skipnc
  5036  078C  0A76               	incf	??_CheckOnceResult+1,w
  5037  078D  00F8               	movwf	??_CheckOnceResult+3
  5038  078E  086C               	movf	CheckOnceResult@KeyResTemp+1,w
  5039  078F  0278               	subwf	??_CheckOnceResult+3,w
  5040  0790  1D03               	skipz
  5041  0791  0008               	return
  5042  0792  086B               	movf	CheckOnceResult@KeyResTemp,w
  5043  0793  0277               	subwf	??_CheckOnceResult+2,w
  5044  0794  0008               	return
  5045  0795                     __end_ofPL4:	
  5046  0795                     PL6:	
  5047  0795  0084               	movwf	4
  5048  0796  0800               	movf	0,w
  5049  0797  00F5               	movwf	??_CheckOnceResult
  5050  0798  0A84               	incf	4,f
  5051  0799  0800               	movf	0,w
  5052  079A  00F6               	movwf	??_CheckOnceResult+1
  5053  079B  0008               	return
  5054  079C                     __end_ofPL6:	
  5055  079C                     PL8:	
  5056  079C  0084               	movwf	4
  5057  079D  0865               	movf	??_SystemEnterSleep,w
  5058  079E  0080               	movwf	0
  5059  079F  0A84               	incf	4,f
  5060  07A0  0866               	movf	??_SystemEnterSleep+1,w
  5061  07A1  0080               	movwf	0
  5062  07A2  1003               	clrc
  5063  07A3  0D6D               	rlf	SystemEnterSleep@cnt,w
  5064  07A4  3EAC               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5065  07A5  0084               	movwf	4
  5066  07A6  0008               	return
  5067  07A7                     __end_ofPL8:	
  5068  07A7                     PL10:	
  5069  07A7  0084               	movwf	4
  5070  07A8  0874               	movf	??_CheckKeyOldValue,w
  5071  07A9  0080               	movwf	0
  5072  07AA  0A84               	incf	4,f
  5073  07AB  0875               	movf	??_CheckKeyOldValue+1,w
  5074  07AC  0080               	movwf	0
  5075  07AD  1003               	clrc
  5076  07AE  0D69               	rlf	CheckKeyOldValue@cnt,w
  5077  07AF  3EAC               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5078  07B0  0084               	movwf	4
  5079  07B1  0008               	return
  5080  07B2                     __end_ofPL10:	
  5081  07B2                     PL12:	
  5082  07B2  0084               	movwf	4
  5083  07B3  0800               	movf	0,w
  5084  07B4  00E5               	movwf	??_SystemEnterSleep
  5085  07B5  0A84               	incf	4,f
  5086  07B6  0800               	movf	0,w
  5087  07B7  00E6               	movwf	??_SystemEnterSleep+1
  5088  07B8  0008               	return
  5089  07B9                     __end_ofPL12:	
  5090  07B9                     PL14:	
  5091  07B9  0800               	movf	0,w
  5092  07BA  00F4               	movwf	??_CheckKeyOldValue
  5093  07BB  0A84               	incf	4,f
  5094  07BC  0800               	movf	0,w
  5095  07BD  00F5               	movwf	??_CheckKeyOldValue+1
  5096  07BE  1003               	clrc
  5097  07BF  0D69               	rlf	CheckKeyOldValue@cnt,w
  5098  07C0  0008               	return
  5099  07C1                     __end_ofPL14:	
  5100  07C1                     PL16:	
  5101  07C1  0180               	clrf	0
  5102  07C2  0A84               	incf	4,f
  5103  07C3  0180               	clrf	0
  5104  07C4  1003               	clrc
  5105  07C5  0D72               	rlf	KeyClearOne@cnt,w
  5106  07C6  0008               	return
  5107  07C7                     __end_ofPL16:	
  5108  07C7                     PL18:	
  5109  07C7  0085               	movwf	5	;volatile
  5110  07C8  1283               	bcf	3,5	;RP0=0, select bank0
  5111  07C9  0185               	clrf	5	;volatile
  5112  07CA  3018               	movlw	24
  5113  07CB  1683               	bsf	3,5	;RP0=1, select bank1
  5114  07CC  0086               	movwf	6	;volatile
  5115  07CD  0008               	return
  5116  07CE                     __end_ofPL18:	
  5117  07CE                     PL20:	
  5118  07CE  1683               	bsf	3,5	;RP0=1, select bank3
  5119  07CF  1703               	bsf	3,6	;RP1=1, select bank3
  5120  07D0  1405               	bsf	5,0	;volatile
  5121  07D1  1283               	bcf	3,5	;RP0=0, select bank0
  5122  07D2  1303               	bcf	3,6	;RP1=0, select bank0
  5123  07D3  0008               	return
  5124  07D4                     __end_ofPL20:	
  5125  07D4                     PL22:	
  5126  07D4  0865               	movf	CheckKeyOldValue@KeyResTemp,w
  5127  07D5  0080               	movwf	0
  5128  07D6  0A84               	incf	4,f
  5129  07D7  0866               	movf	CheckKeyOldValue@KeyResTemp+1,w
  5130  07D8  0080               	movwf	0
  5131  07D9  0008               	return
  5132  07DA                     __end_ofPL22:	
  5133  07DA                     PL24:	
  5134  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  5135  07DB  008D               	movwf	13	;volatile
  5136  07DC  30FA               	movlw	250
  5137  07DD  1683               	bsf	3,5	;RP0=1, select bank1
  5138  07DE  0091               	movwf	17	;volatile
  5139  07DF  0008               	return
  5140  07E0                     __end_ofPL24:	
  5141  07E0                     PL26:	
  5142  07E0  01ED               	clrf	SystemEnterSleep@cnt
  5143  07E1  01EB               	clrf	SystemEnterSleep@wake
  5144  07E2  0AEB               	incf	SystemEnterSleep@wake,f
  5145  07E3  01EC               	clrf	SystemEnterSleep@wake+1
  5146  07E4  0008               	return
  5147  07E5                     __end_ofPL26:	
  5148  07E5                     PL28:	
  5149  07E5  0DEB               	rlf	SystemEnterSleep@wake,f
  5150  07E6  0DEC               	rlf	SystemEnterSleep@wake+1,f
  5151  07E7  0AED               	incf	SystemEnterSleep@cnt,f
  5152  07E8  026D               	subwf	SystemEnterSleep@cnt,w
  5153  07E9  0008               	return
  5154  07EA                     __end_ofPL28:	
  5155                           
  5156                           	psect	text20
  5157  0EA1                     __ptext20:	
  5158 ;; *************** function _chrgCtr *****************
  5159 ;; Defined at:
  5160 ;;		line 949 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;		None
  5165 ;; Return value:  Size  Location     Type
  5166 ;;                  1    wreg      void 
  5167 ;; Registers used:
  5168 ;;		wreg, status,2, status,0, pclath, cstack
  5169 ;; Tracked objects:
  5170 ;;		On entry : 300/0
  5171 ;;		On exit  : 300/0
  5172 ;;		Unchanged: 0/0
  5173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5174 ;;      Params:         0       0       0       0       0
  5175 ;;      Locals:         0       0       0       0       0
  5176 ;;      Temps:          0       0       0       0       0
  5177 ;;      Totals:         0       0       0       0       0
  5178 ;;Total ram usage:        0 bytes
  5179 ;; Hardware stack levels used:    1
  5180 ;; Hardware stack levels required when called:    3
  5181 ;; This function calls:
  5182 ;;		_checkChrgAD
  5183 ;; This function is called by:
  5184 ;;		_main
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           
  5189                           ;psect for function _chrgCtr
  5190  0EA1                     _chrgCtr:	
  5191                           
  5192                           ;main.c: 951: if(0x20 & PORTA)
  5193                           
  5194                           ;incstack = 0
  5195                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  5196  0EA1  1E85               	btfss	5,5	;volatile
  5197  0EA2  2EC4               	goto	l4376
  5198                           
  5199                           ;main.c: 952: {
  5200                           ;main.c: 953: checkChrgAD();
  5201  0EA3  26CE  158A         	fcall	_checkChrgAD
  5202  0EA5  3006               	movlw	6
  5203                           
  5204                           ;main.c: 954: chrgFlag = 1;
  5205  0EA6  01DB               	clrf	_chrgFlag
  5206  0EA7  0ADB               	incf	_chrgFlag,f
  5207                           
  5208                           ;main.c: 955: workStep = 0;
  5209  0EA8  01FB               	clrf	_workStep
  5210                           
  5211                           ;main.c: 956: lowBatFlag = 0;
  5212  0EA9  01D1               	clrf	_lowBatFlag
  5213                           
  5214                           ;main.c: 957: ledLightTime = 0;
  5215  0EAA  01B8               	clrf	_ledLightTime
  5216  0EAB  01B9               	clrf	_ledLightTime+1
  5217                           
  5218                           ;main.c: 958: if(batResult > 1555)
  5219  0EAC  0237               	subwf	_batResult+1,w
  5220  0EAD  3014               	movlw	20
  5221  0EAE  1903               	skipnz
  5222  0EAF  0236               	subwf	_batResult,w
  5223  0EB0  1C03               	skipc
  5224  0EB1  2EC1               	goto	l4374
  5225                           
  5226                           ;main.c: 959: {
  5227                           ;main.c: 960: if(++chrgFullTime > 2500)
  5228  0EB2  0AB2               	incf	_chrgFullTime,f
  5229  0EB3  1903               	skipnz
  5230  0EB4  0AB3               	incf	_chrgFullTime+1,f
  5231  0EB5  3009               	movlw	9
  5232  0EB6  0233               	subwf	_chrgFullTime+1,w
  5233  0EB7  30C5               	movlw	197
  5234  0EB8  1903               	skipnz
  5235  0EB9  0232               	subwf	_chrgFullTime,w
  5236  0EBA  1C03               	skipc
  5237  0EBB  0008               	return
  5238                           
  5239                           ;main.c: 961: {
  5240                           ;main.c: 962: chrgFullTime = 0;
  5241  0EBC  01B2               	clrf	_chrgFullTime
  5242  0EBD  01B3               	clrf	_chrgFullTime+1
  5243                           
  5244                           ;main.c: 963: chrgFullFlag = 1;
  5245  0EBE  01D7               	clrf	_chrgFullFlag
  5246  0EBF  0AD7               	incf	_chrgFullFlag,f
  5247  0EC0  0008               	return
  5248  0EC1                     l4374:	
  5249                           
  5250                           ;main.c: 966: else
  5251                           ;main.c: 967: {
  5252                           ;main.c: 968: chrgFullTime = 0;
  5253  0EC1  01B2               	clrf	_chrgFullTime
  5254  0EC2  01B3               	clrf	_chrgFullTime+1
  5255  0EC3  0008               	return
  5256  0EC4                     l4376:	
  5257                           
  5258                           ;main.c: 971: else
  5259                           ;main.c: 972: {
  5260                           ;main.c: 973: if(chrgFlag)
  5261  0EC4  085B               	movf	_chrgFlag,w
  5262  0EC5  1D03               	btfss	3,2
  5263                           
  5264                           ;main.c: 974: {
  5265                           ;main.c: 975: zeroStep = 0;
  5266  0EC6  01FA               	clrf	_zeroStep
  5267                           
  5268                           ;main.c: 976: }
  5269                           ;main.c: 977: chrgFlag = 0;
  5270  0EC7  01DB               	clrf	_chrgFlag
  5271                           
  5272                           ;main.c: 978: chrgFullFlag = 0;
  5273  0EC8  01D7               	clrf	_chrgFullFlag
  5274                           
  5275                           ;main.c: 979: chrgFullTime = 0;
  5276  0EC9  01B2               	clrf	_chrgFullTime
  5277  0ECA  01B3               	clrf	_chrgFullTime+1
  5278                           
  5279                           ;main.c: 980: chrgDuty = 0;
  5280  0ECB  01D6               	clrf	_chrgDuty
  5281                           
  5282                           ;main.c: 981: chrgLockFlag = 0;
  5283  0ECC  01D2               	clrf	_chrgLockFlag
  5284  0ECD  0008               	return
  5285  0ECE                     __end_of_chrgCtr:	
  5286  0ECE                     __ptext21:	
  5287 ;; *************** function _checkChrgAD *****************
  5288 ;; Defined at:
  5289 ;;		line 297 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;		None
  5292 ;; Auto vars:     Size  Location     Type
  5293 ;;		None
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  1    wreg      void 
  5296 ;; Registers used:
  5297 ;;		wreg, status,2, status,0, pclath, cstack
  5298 ;; Tracked objects:
  5299 ;;		On entry : 300/0
  5300 ;;		On exit  : 300/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5303 ;;      Params:         0       0       0       0       0
  5304 ;;      Locals:         0       0       0       0       0
  5305 ;;      Temps:          0       0       0       0       0
  5306 ;;      Totals:         0       0       0       0       0
  5307 ;;Total ram usage:        0 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    2
  5310 ;; This function calls:
  5311 ;;		_Read_ADC
  5312 ;; This function is called by:
  5313 ;;		_chrgCtr
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           
  5318                           ;psect for function _checkChrgAD
  5319  0ECE                     _checkChrgAD:	
  5320                           
  5321                           ;incstack = 0
  5322                           ; Regs used in _checkChrgAD: [wreg+status,2+status,0+pclath+cstack]
  5323  0ECE  3010               	movlw	16
  5324                           
  5325                           ;main.c: 299: chrgResult = Read_ADC(16,1);
  5326  0ECF  01F2               	clrf	Read_ADC@ADCLDORef
  5327  0ED0  0AF2               	incf	Read_ADC@ADCLDORef,f
  5328  0ED1  27B7               	fcall	_Read_ADC
  5329  0ED2  0873               	movf	?_Read_ADC+1,w
  5330  0ED3  1283               	bcf	3,5	;RP0=0, select bank0
  5331  0ED4  00B5               	movwf	_chrgResult+1
  5332  0ED5  0872               	movf	?_Read_ADC,w
  5333  0ED6  00B4               	movwf	_chrgResult
  5334  0ED7  0008               	return
  5335  0ED8                     __end_of_checkChrgAD:	
  5336  0ED8                     __ptext22:	
  5337 ;; *************** function _checkBat *****************
  5338 ;; Defined at:
  5339 ;;		line 322 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5340 ;; Parameters:    Size  Location     Type
  5341 ;;		None
  5342 ;; Auto vars:     Size  Location     Type
  5343 ;;		None
  5344 ;; Return value:  Size  Location     Type
  5345 ;;                  1    wreg      void 
  5346 ;; Registers used:
  5347 ;;		wreg, status,2, status,0, pclath, cstack
  5348 ;; Tracked objects:
  5349 ;;		On entry : 300/0
  5350 ;;		On exit  : 300/0
  5351 ;;		Unchanged: 0/0
  5352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5353 ;;      Params:         0       0       0       0       0
  5354 ;;      Locals:         0       0       0       0       0
  5355 ;;      Temps:          0       2       0       0       0
  5356 ;;      Totals:         0       2       0       0       0
  5357 ;;Total ram usage:        2 bytes
  5358 ;; Hardware stack levels used:    1
  5359 ;; Hardware stack levels required when called:    2
  5360 ;; This function calls:
  5361 ;;		_Read_ADC
  5362 ;; This function is called by:
  5363 ;;		_main
  5364 ;; This function uses a non-reentrant model
  5365 ;;
  5366                           
  5367                           
  5368                           ;psect for function _checkBat
  5369  0ED8                     _checkBat:	
  5370                           
  5371                           ;incstack = 0
  5372                           ; Regs used in _checkBat: [wreg+status,2+status,0+pclath+cstack]
  5373  0ED8  300A               	movlw	10
  5374                           
  5375                           ;main.c: 324: batResult = Read_ADC(10,1);
  5376  0ED9  01F2               	clrf	Read_ADC@ADCLDORef
  5377  0EDA  0AF2               	incf	Read_ADC@ADCLDORef,f
  5378  0EDB  27B7  158A         	fcall	_Read_ADC
  5379  0EDD  0873               	movf	?_Read_ADC+1,w
  5380  0EDE  1283               	bcf	3,5	;RP0=0, select bank0
  5381  0EDF  00B7               	movwf	_batResult+1
  5382  0EE0  0872               	movf	?_Read_ADC,w
  5383  0EE1  00B6               	movwf	_batResult
  5384                           
  5385                           ;main.c: 325: if(batResult < 1118)
  5386  0EE2  3004               	movlw	4
  5387  0EE3  0237               	subwf	_batResult+1,w
  5388  0EE4  305E               	movlw	94
  5389  0EE5  1903               	skipnz
  5390  0EE6  0236               	subwf	_batResult,w
  5391  0EE7  1803               	skipnc
  5392  0EE8  2EFB               	goto	l4658
  5393                           
  5394                           ;main.c: 326: {
  5395                           ;main.c: 327: batValue = 0;
  5396  0EE9  01DA               	clrf	_batValue
  5397                           
  5398                           ;main.c: 328: if(workStep > 0 && ++lowBatTime > 200)
  5399  0EEA  087B               	movf	_workStep,w
  5400  0EEB  1903               	btfsc	3,2
  5401  0EEC  0008               	return
  5402  0EED  30C9               	movlw	201
  5403  0EEE  0AD0               	incf	_lowBatTime,f
  5404  0EEF  0250               	subwf	_lowBatTime,w
  5405  0EF0  1C03               	skipc
  5406  0EF1  0008               	return
  5407  0EF2  300C               	movlw	12
  5408                           
  5409                           ;main.c: 329: {
  5410                           ;main.c: 330: lowBatTime = 0;
  5411  0EF3  01D0               	clrf	_lowBatTime
  5412                           
  5413                           ;main.c: 331: lowBatFlag = 1;
  5414  0EF4  01D1               	clrf	_lowBatFlag
  5415  0EF5  0AD1               	incf	_lowBatFlag,f
  5416                           
  5417                           ;main.c: 332: workStep = 0;
  5418  0EF6  01FB               	clrf	_workStep
  5419                           
  5420                           ;main.c: 333: zeroStep = 12;
  5421  0EF7  00FA               	movwf	_zeroStep
  5422                           
  5423                           ;main.c: 334: ledLightTime = 0;
  5424  0EF8  01B8               	clrf	_ledLightTime
  5425  0EF9  01B9               	clrf	_ledLightTime+1
  5426  0EFA  0008               	return
  5427  0EFB                     l4658:	
  5428  0EFB  3005               	movlw	5
  5429                           
  5430                           ;main.c: 337: else
  5431                           ;main.c: 338: {
  5432                           ;main.c: 339: lowBatTime = 0;
  5433  0EFC  01D0               	clrf	_lowBatTime
  5434                           
  5435                           ;main.c: 340: if(batResult >= 1376)
  5436  0EFD  0237               	subwf	_batResult+1,w
  5437  0EFE  3060               	movlw	96
  5438  0EFF  1903               	skipnz
  5439  0F00  0236               	subwf	_batResult,w
  5440                           
  5441                           ;main.c: 341: {
  5442                           ;main.c: 342: batValue = ((batResult - 1376) /2) + 16;
  5443  0F01  0836               	movf	_batResult,w
  5444  0F02  1C03               	skipc
  5445  0F03  2F11               	goto	L18
  5446  0F04  3EA0               	addlw	160
  5447  0F05  00E5               	movwf	??_checkBat
  5448  0F06  0837               	movf	_batResult+1,w
  5449  0F07  1803               	skipnc
  5450  0F08  3E01               	addlw	1
  5451  0F09  3EFA               	addlw	250
  5452  0F0A  00E6               	movwf	??_checkBat+1
  5453  0F0B  1003               	clrc
  5454  0F0C  0CE6               	rrf	??_checkBat+1,f
  5455  0F0D  0CE5               	rrf	??_checkBat,f
  5456  0F0E  0865               	movf	??_checkBat,w
  5457  0F0F  3E10               	addlw	16
  5458  0F10  2F20               	goto	L17
  5459  0F11                     L18:	
  5460                           ;main.c: 344: else
  5461                           ;main.c: 345: {
  5462                           ;main.c: 346: batValue = (batResult - 1118) / 16;
  5463                           
  5464                           ;main.c: 343: }
  5465                           
  5466  0F11  3EA2               	addlw	162
  5467  0F12  00E5               	movwf	??_checkBat
  5468  0F13  0837               	movf	_batResult+1,w
  5469  0F14  1803               	skipnc
  5470  0F15  3E01               	addlw	1
  5471  0F16  3EFB               	addlw	251
  5472  0F17  00E6               	movwf	??_checkBat+1
  5473  0F18  3004               	movlw	4
  5474  0F19                     u4275:	
  5475  0F19  1003               	clrc
  5476  0F1A  0CE6               	rrf	??_checkBat+1,f
  5477  0F1B  0CE5               	rrf	??_checkBat,f
  5478  0F1C  3EFF               	addlw	-1
  5479  0F1D  1D03               	skipz
  5480  0F1E  2F19               	goto	u4275
  5481  0F1F  0865               	movf	??_checkBat,w
  5482  0F20                     L17:	
  5483  0F20  00DA               	movwf	_batValue
  5484                           
  5485                           ;main.c: 347: }
  5486                           ;main.c: 349: if(batValue > 99)
  5487  0F21  3064               	movlw	100
  5488  0F22  025A               	subwf	_batValue,w
  5489  0F23  1C03               	skipc
  5490  0F24  0008               	return
  5491                           
  5492                           ;main.c: 350: batValue = 99;
  5493  0F25  3063               	movlw	99
  5494  0F26  00DA               	movwf	_batValue
  5495  0F27  0008               	return
  5496  0F28                     __end_of_checkBat:	
  5497  0F28                     __ptext1:	
  5498 ;; *************** function _workCtr *****************
  5499 ;; Defined at:
  5500 ;;		line 887 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;		None
  5503 ;; Auto vars:     Size  Location     Type
  5504 ;;		None
  5505 ;; Return value:  Size  Location     Type
  5506 ;;                  1    wreg      void 
  5507 ;; Registers used:
  5508 ;;		wreg, status,2, status,0, pclath, cstack
  5509 ;; Tracked objects:
  5510 ;;		On entry : 200/0
  5511 ;;		On exit  : 300/0
  5512 ;;		Unchanged: 0/0
  5513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5514 ;;      Params:         0       0       0       0       0
  5515 ;;      Locals:         0       0       0       0       0
  5516 ;;      Temps:          0       0       0       0       0
  5517 ;;      Totals:         0       0       0       0       0
  5518 ;;Total ram usage:        0 bytes
  5519 ;; Hardware stack levels used:    1
  5520 ;; Hardware stack levels required when called:    3
  5521 ;; This function calls:
  5522 ;;		_checkTempAD
  5523 ;; This function is called by:
  5524 ;;		_main
  5525 ;; This function uses a non-reentrant model
  5526 ;;
  5527                           
  5528                           
  5529                           ;psect for function _workCtr
  5530  0F28                     _workCtr:	
  5531                           
  5532                           ;main.c: 889: if(workStep > 0)
  5533                           
  5534                           ;incstack = 0
  5535                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
  5536  0F28  087B               	movf	_workStep,w
  5537  0F29  1903               	btfsc	3,2
  5538  0F2A  2F47               	goto	l4308
  5539                           
  5540                           ;main.c: 890: {
  5541                           ;main.c: 891: checkTempAD();
  5542  0F2B  279A  158A         	fcall	_checkTempAD
  5543                           
  5544                           ;main.c: 892: PWMIOS0 = 0x01;
  5545  0F2D  3001               	movlw	1
  5546  0F2E  1683               	bsf	3,5	;RP0=1, select bank3
  5547  0F2F  1703               	bsf	3,6	;RP1=1, select bank3
  5548  0F30  008C               	movwf	12	;volsfr
  5549                           
  5550                           ;main.c: 893: PWMTH = 0x00;
  5551  0F31  1283               	bcf	3,5	;RP0=0, select bank0
  5552  0F32  1303               	bcf	3,6	;RP1=0, select bank0
  5553  0F33  0196               	clrf	22	;volatile
  5554                           
  5555                           ;main.c: 894: PWMTL = 100;
  5556  0F34  3064               	movlw	100
  5557  0F35  0095               	movwf	21	;volatile
  5558                           
  5559                           ;main.c: 895: PWMD01H = 0x00;
  5560  0F36  019C               	clrf	28	;volatile
  5561                           
  5562                           ;main.c: 896: if(workStep <= 10)
  5563  0F37  300B               	movlw	11
  5564  0F38  027B               	subwf	_workStep,w
  5565  0F39  1803               	skipnc
  5566  0F3A  2F3E               	goto	l4300
  5567                           
  5568                           ;main.c: 897: {
  5569                           ;main.c: 898: PWMD0L = 50 + workStep;
  5570  0F3B  087B               	movf	_workStep,w
  5571  0F3C  3E32               	addlw	50
  5572  0F3D  2F41               	goto	L1
  5573  0F3E                     l4300:	
  5574                           ;main.c: 899: }
  5575                           
  5576                           
  5577                           ;main.c: 900: else
  5578                           ;main.c: 901: {
  5579                           ;main.c: 902: PWMD0L = 40 + (workStep*2);
  5580  0F3E  1003               	clrc
  5581  0F3F  0D7B               	rlf	_workStep,w
  5582  0F40  3E28               	addlw	40
  5583  0F41                     L1:	
  5584  0F41  0097               	movwf	23	;volatile
  5585                           
  5586                           ;main.c: 903: }
  5587                           ;main.c: 904: PWMCON1 = 0x00;
  5588  0F42  0194               	clrf	20	;volatile
  5589                           
  5590                           ;main.c: 905: PWMCON2 = 0x00;
  5591  0F43  019D               	clrf	29	;volatile
  5592                           
  5593                           ;main.c: 906: PWMCON0 = 0x41;
  5594  0F44  3041               	movlw	65
  5595  0F45  0093               	movwf	19	;volatile
  5596                           
  5597                           ;main.c: 907: }
  5598  0F46  0008               	return
  5599  0F47                     l4308:	
  5600                           
  5601                           ;main.c: 908: else if(chrgFlag && chrgFullFlag == 0 && chrgLockFlag == 0)
  5602  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  5603  0F48  085B               	movf	_chrgFlag,w
  5604  0F49  1903               	btfsc	3,2
  5605  0F4A  2F98               	goto	l4352
  5606  0F4B  0857               	movf	_chrgFullFlag,w
  5607  0F4C  1D03               	btfss	3,2
  5608  0F4D  2F98               	goto	l4352
  5609  0F4E  0852               	movf	_chrgLockFlag,w
  5610  0F4F  1D03               	btfss	3,2
  5611  0F50  2F98               	goto	l4352
  5612                           
  5613                           ;main.c: 909: {
  5614                           ;main.c: 910: if(chrgResult < 70 && batResult <= 1555)
  5615  0F51  3000               	movlw	0
  5616  0F52  0235               	subwf	_chrgResult+1,w
  5617  0F53  3046               	movlw	70
  5618  0F54  1903               	skipnz
  5619  0F55  0234               	subwf	_chrgResult,w
  5620  0F56  1803               	skipnc
  5621  0F57  2F6B               	goto	l4326
  5622  0F58  3006               	movlw	6
  5623  0F59  0237               	subwf	_batResult+1,w
  5624  0F5A  3014               	movlw	20
  5625  0F5B  1903               	skipnz
  5626  0F5C  0236               	subwf	_batResult,w
  5627  0F5D  1803               	skipnc
  5628  0F5E  2F6B               	goto	l4326
  5629                           
  5630                           ;main.c: 911: {
  5631                           ;main.c: 912: if(++addTime > 10 && chrgDuty < 35)
  5632  0F5F  300B               	movlw	11
  5633  0F60  0AD5               	incf	_addTime,f
  5634  0F61  0255               	subwf	_addTime,w
  5635  0F62  1C03               	skipc
  5636  0F63  2F6C               	goto	l4328
  5637  0F64  3023               	movlw	35
  5638  0F65  0256               	subwf	_chrgDuty,w
  5639  0F66  1803               	skipnc
  5640  0F67  2F6C               	goto	l4328
  5641                           
  5642                           ;main.c: 913: {
  5643                           ;main.c: 914: addTime = 0;
  5644  0F68  01D5               	clrf	_addTime
  5645                           
  5646                           ;main.c: 915: chrgDuty++;
  5647  0F69  0AD6               	incf	_chrgDuty,f
  5648  0F6A  2F6C               	goto	l4328
  5649  0F6B                     l4326:	
  5650                           
  5651                           ;main.c: 918: else
  5652                           ;main.c: 919: {
  5653                           ;main.c: 920: addTime = 0;
  5654  0F6B  01D5               	clrf	_addTime
  5655  0F6C                     l4328:	
  5656                           
  5657                           ;main.c: 921: }
  5658                           ;main.c: 922: if(chrgResult > 80 || batResult > 1555)
  5659  0F6C  3000               	movlw	0
  5660  0F6D  0235               	subwf	_chrgResult+1,w
  5661  0F6E  3051               	movlw	81
  5662  0F6F  1903               	skipnz
  5663  0F70  0234               	subwf	_chrgResult,w
  5664  0F71  1803               	skipnc
  5665  0F72  2F7A               	goto	l4332
  5666  0F73  3006               	movlw	6
  5667  0F74  0237               	subwf	_batResult+1,w
  5668  0F75  3014               	movlw	20
  5669  0F76  1903               	skipnz
  5670  0F77  0236               	subwf	_batResult,w
  5671  0F78  1C03               	skipc
  5672  0F79  2F86               	goto	l4340
  5673  0F7A                     l4332:	
  5674                           
  5675                           ;main.c: 923: {
  5676                           ;main.c: 924: if(++subTime > 10 && chrgDuty > 10)
  5677  0F7A  300B               	movlw	11
  5678  0F7B  0AD4               	incf	_subTime,f
  5679  0F7C  0254               	subwf	_subTime,w
  5680  0F7D  1C03               	skipc
  5681  0F7E  2F87               	goto	l4342
  5682  0F7F  300B               	movlw	11
  5683  0F80  0256               	subwf	_chrgDuty,w
  5684  0F81  1C03               	skipc
  5685  0F82  2F87               	goto	l4342
  5686                           
  5687                           ;main.c: 925: {
  5688                           ;main.c: 926: subTime = 0;
  5689  0F83  01D4               	clrf	_subTime
  5690                           
  5691                           ;main.c: 927: chrgDuty--;
  5692  0F84  03D6               	decf	_chrgDuty,f
  5693  0F85  2F87               	goto	l4342
  5694  0F86                     l4340:	
  5695                           
  5696                           ;main.c: 930: else
  5697                           ;main.c: 931: {
  5698                           ;main.c: 932: subTime = 0;
  5699  0F86  01D4               	clrf	_subTime
  5700  0F87                     l4342:	
  5701                           
  5702                           ;main.c: 933: }
  5703                           ;main.c: 934: PWMIOS1 = 0x20;
  5704  0F87  3020               	movlw	32
  5705  0F88  1683               	bsf	3,5	;RP0=1, select bank3
  5706  0F89  1703               	bsf	3,6	;RP1=1, select bank3
  5707  0F8A  008D               	movwf	13	;volsfr
  5708                           
  5709                           ;main.c: 935: PWMTH = 0x00;
  5710  0F8B  1283               	bcf	3,5	;RP0=0, select bank0
  5711  0F8C  1303               	bcf	3,6	;RP1=0, select bank0
  5712  0F8D  0196               	clrf	22	;volatile
  5713                           
  5714                           ;main.c: 936: PWMTL = 70;
  5715  0F8E  3046               	movlw	70
  5716  0F8F  0095               	movwf	21	;volatile
  5717                           
  5718                           ;main.c: 937: PWMD23H = 0x00;
  5719  0F90  018E               	clrf	14	;volatile
  5720                           
  5721                           ;main.c: 938: PWMD3L = chrgDuty;
  5722  0F91  0856               	movf	_chrgDuty,w
  5723  0F92  009A               	movwf	26	;volatile
  5724                           
  5725                           ;main.c: 939: PWMCON1 = 0x00;
  5726  0F93  0194               	clrf	20	;volatile
  5727                           
  5728                           ;main.c: 940: PWMCON2 = 0x00;
  5729  0F94  019D               	clrf	29	;volatile
  5730                           
  5731                           ;main.c: 941: PWMCON0 = 0x08;
  5732  0F95  3008               	movlw	8
  5733  0F96  0093               	movwf	19	;volatile
  5734                           
  5735                           ;main.c: 942: }
  5736  0F97  0008               	return
  5737  0F98                     l4352:	
  5738                           
  5739                           ;main.c: 943: else
  5740                           ;main.c: 944: {
  5741                           ;main.c: 945: PWMCON0 = 0x00;
  5742  0F98  0193               	clrf	19	;volatile
  5743  0F99  0008               	return
  5744  0F9A                     __end_of_workCtr:	
  5745  0F9A                     __ptext2:	
  5746 ;; *************** function _checkTempAD *****************
  5747 ;; Defined at:
  5748 ;;		line 302 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5749 ;; Parameters:    Size  Location     Type
  5750 ;;		None
  5751 ;; Auto vars:     Size  Location     Type
  5752 ;;		None
  5753 ;; Return value:  Size  Location     Type
  5754 ;;                  1    wreg      void 
  5755 ;; Registers used:
  5756 ;;		wreg, status,2, status,0, pclath, cstack
  5757 ;; Tracked objects:
  5758 ;;		On entry : 200/0
  5759 ;;		On exit  : 300/0
  5760 ;;		Unchanged: 0/0
  5761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5762 ;;      Params:         0       0       0       0       0
  5763 ;;      Locals:         0       0       0       0       0
  5764 ;;      Temps:          0       0       0       0       0
  5765 ;;      Totals:         0       0       0       0       0
  5766 ;;Total ram usage:        0 bytes
  5767 ;; Hardware stack levels used:    1
  5768 ;; Hardware stack levels required when called:    2
  5769 ;; This function calls:
  5770 ;;		_Read_ADC
  5771 ;; This function is called by:
  5772 ;;		_workCtr
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           
  5777                           ;psect for function _checkTempAD
  5778  0F9A                     _checkTempAD:	
  5779                           
  5780                           ;main.c: 304: PORTA |= 0x01;
  5781                           
  5782                           ;incstack = 0
  5783                           ; Regs used in _checkTempAD: [wreg+status,2+status,0+pclath+cstack]
  5784  0F9A  1283               	bcf	3,5	;RP0=0, select bank0
  5785  0F9B  1405               	bsf	5,0	;volatile
  5786  0F9C  3001               	movlw	1
  5787                           
  5788                           ;main.c: 305: tempResult = Read_ADC(1,1);
  5789  0F9D  01F2               	clrf	Read_ADC@ADCLDORef
  5790  0F9E  0AF2               	incf	Read_ADC@ADCLDORef,f
  5791  0F9F  27B7  158A         	fcall	_Read_ADC
  5792  0FA1  0873               	movf	?_Read_ADC+1,w
  5793  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  5794  0FA3  00AD               	movwf	_tempResult+1
  5795  0FA4  0872               	movf	?_Read_ADC,w
  5796  0FA5  00AC               	movwf	_tempResult
  5797                           
  5798                           ;main.c: 306: if(tempResult < 130)
  5799  0FA6  3000               	movlw	0
  5800  0FA7  022D               	subwf	_tempResult+1,w
  5801  0FA8  3082               	movlw	130
  5802  0FA9  1903               	skipnz
  5803  0FAA  022C               	subwf	_tempResult,w
  5804  0FAB  1803               	skipnc
  5805  0FAC  2FB5               	goto	l3566
  5806                           
  5807                           ;main.c: 307: {
  5808                           ;main.c: 309: if(++checkTempTime > 200)
  5809  0FAD  30C9               	movlw	201
  5810  0FAE  0ACF               	incf	_checkTempTime,f
  5811  0FAF  024F               	subwf	_checkTempTime,w
  5812  0FB0  1C03               	skipc
  5813  0FB1  0008               	return
  5814                           
  5815                           ;main.c: 310: {
  5816                           ;main.c: 311: checkTempTime = 0;
  5817  0FB2  01CF               	clrf	_checkTempTime
  5818                           
  5819                           ;main.c: 312: workStep = 0;
  5820  0FB3  01FB               	clrf	_workStep
  5821  0FB4  0008               	return
  5822  0FB5                     l3566:	
  5823                           
  5824                           ;main.c: 316: else
  5825                           ;main.c: 317: {
  5826                           ;main.c: 318: checkTempTime = 0;
  5827  0FB5  01CF               	clrf	_checkTempTime
  5828  0FB6  0008               	return
  5829  0FB7                     __end_of_checkTempAD:	
  5830  0FB7                     __ptext23:	
  5831 ;; *************** function _Read_ADC *****************
  5832 ;; Defined at:
  5833 ;;		line 256 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;  ADCchannel      1    wreg     unsigned char 
  5836 ;;  ADCLDORef       1    2[COMMON] unsigned char 
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;  ADCchannel      1    8[COMMON] unsigned char 
  5839 ;;  Adc_Result      2    5[COMMON] unsigned int 
  5840 ;;  Adc_ResultSu    2    0        unsigned int 
  5841 ;;  i               1    7[COMMON] unsigned char 
  5842 ;; Return value:  Size  Location     Type
  5843 ;;                  2    2[COMMON] unsigned int 
  5844 ;; Registers used:
  5845 ;;		wreg, status,2, status,0
  5846 ;; Tracked objects:
  5847 ;;		On entry : 300/0
  5848 ;;		On exit  : 300/100
  5849 ;;		Unchanged: 0/0
  5850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5851 ;;      Params:         2       0       0       0       0
  5852 ;;      Locals:         4       0       0       0       0
  5853 ;;      Temps:          1       0       0       0       0
  5854 ;;      Totals:         7       0       0       0       0
  5855 ;;Total ram usage:        7 bytes
  5856 ;; Hardware stack levels used:    1
  5857 ;; Hardware stack levels required when called:    1
  5858 ;; This function calls:
  5859 ;;		Nothing
  5860 ;; This function is called by:
  5861 ;;		_checkChrgAD
  5862 ;;		_checkTempAD
  5863 ;;		_checkBat
  5864 ;; This function uses a non-reentrant model
  5865 ;;
  5866                           
  5867                           
  5868                           ;psect for function _Read_ADC
  5869  0FB7                     _Read_ADC:	
  5870                           
  5871                           ;incstack = 0
  5872                           ; Regs used in _Read_ADC: [wreg+status,2+status,0]
  5873                           ;Read_ADC@ADCchannel stored from wreg
  5874  0FB7  00F8               	movwf	Read_ADC@ADCchannel
  5875                           
  5876                           ;main.c: 260: unsigned char i=200;
  5877  0FB8  30C8               	movlw	200
  5878  0FB9  00F7               	movwf	Read_ADC@i
  5879                           
  5880                           ;main.c: 262: if(ADCLDORef==0)
  5881  0FBA  0872               	movf	Read_ADC@ADCLDORef,w
  5882  0FBB  1D03               	btfss	3,2
  5883  0FBC  2FC0               	goto	l3408
  5884                           
  5885                           ;main.c: 263: {
  5886                           ;main.c: 264: ADCON1 = 0B00000000;
  5887  0FBD  1683               	bsf	3,5	;RP0=1, select bank1
  5888  0FBE  019C               	clrf	28	;volatile
  5889                           
  5890                           ;main.c: 265: }
  5891  0FBF  2FC7               	goto	l3414
  5892  0FC0                     l3408:	
  5893                           
  5894                           ;main.c: 266: else if(ADCLDORef==1)
  5895  0FC0  0B72               	decfsz	Read_ADC@ADCLDORef,w
  5896  0FC1  2FC4               	goto	l3412
  5897                           
  5898                           ;main.c: 267: {
  5899                           ;main.c: 268: ADCON1 = 0B00000101;
  5900  0FC2  3005               	movlw	5
  5901  0FC3  2FC5               	goto	L20
  5902  0FC4                     l3412:	
  5903                           ;main.c: 269: }
  5904                           
  5905                           
  5906                           ;main.c: 270: else
  5907                           ;main.c: 271: {
  5908                           ;main.c: 272: ADCON1 = 0B00000110;
  5909  0FC4  3006               	movlw	6
  5910  0FC5                     L20:	
  5911  0FC5  1683               	bsf	3,5	;RP0=1, select bank1
  5912  0FC6  009C               	movwf	28	;volatile
  5913  0FC7                     l3414:	
  5914                           
  5915                           ;main.c: 273: }
  5916                           ;main.c: 275: CHS4 = 0;
  5917  0FC7  131C               	bcf	28,6	;volatile
  5918                           
  5919                           ;main.c: 276: if(ADCchannel >=16)
  5920  0FC8  3010               	movlw	16
  5921  0FC9  0278               	subwf	Read_ADC@ADCchannel,w
  5922  0FCA  1C03               	skipc
  5923  0FCB  2FCF               	goto	l1245
  5924                           
  5925                           ;main.c: 277: {
  5926                           ;main.c: 278: ADCchannel -= 16;
  5927  0FCC  3010               	movlw	16
  5928  0FCD  02F8               	subwf	Read_ADC@ADCchannel,f
  5929                           
  5930                           ;main.c: 279: CHS4 = 1;
  5931  0FCE  171C               	bsf	28,6	;volatile
  5932  0FCF                     l1245:	
  5933                           
  5934                           ;main.c: 280: }
  5935                           ;main.c: 282: ADCON0 &= 0b11000011;
  5936  0FCF  30C3               	movlw	195
  5937  0FD0  059D               	andwf	29,f	;volatile
  5938                           
  5939                           ;main.c: 283: ADCON0 |= ADCchannel<<2;
  5940  0FD1  0878               	movf	Read_ADC@ADCchannel,w
  5941  0FD2  00F4               	movwf	??_Read_ADC
  5942  0FD3  3001               	movlw	1
  5943  0FD4  1003               	clrc
  5944  0FD5                     L19:	
  5945  0FD5  0DF4               	rlf	??_Read_ADC,f
  5946  0FD6  3EFF               	addlw	-1
  5947  0FD7  1003               	clrc
  5948  0FD8  1D03               	skipz
  5949  0FD9  2FD5               	goto	L19
  5950  0FDA  0D74               	rlf	??_Read_ADC,w
  5951  0FDB  049D               	iorwf	29,f	;volatile
  5952  0FDC  0000               	nop	;# 
  5953                           
  5954                           ;main.c: 285: GODONE = 1;
  5955  0FDD  1683               	bsf	3,5	;RP0=1, select bank1
  5956  0FDE  1303               	bcf	3,6	;RP1=0, select bank1
  5957  0FDF  149D               	bsf	29,1	;volatile
  5958                           
  5959                           ;main.c: 286: while(GODONE==1&&i>0)
  5960  0FE0  2FE6               	goto	l3424
  5961  0FE1                     l3426:	
  5962  0FE1  0877               	movf	Read_ADC@i,w
  5963  0FE2  1903               	btfsc	3,2
  5964  0FE3  2FEA               	goto	l3428
  5965                           
  5966                           ;main.c: 287: {
  5967                           ;main.c: 288: i--;
  5968  0FE4  03F7               	decf	Read_ADC@i,f
  5969  0FE5  0000               	nop	;# 
  5970  0FE6                     l3424:	
  5971  0FE6  1683               	bsf	3,5	;RP0=1, select bank1
  5972  0FE7  1303               	bcf	3,6	;RP1=0, select bank1
  5973  0FE8  189D               	btfsc	29,1	;volatile
  5974  0FE9  2FE1               	goto	l3426
  5975  0FEA                     l3428:	
  5976                           
  5977                           ;main.c: 290: }
  5978                           ;main.c: 291: Adc_Result = ADRESH<<4;
  5979  0FEA  081F               	movf	31,w	;volatile
  5980  0FEB  00F5               	movwf	Read_ADC@Adc_Result
  5981  0FEC  30F0               	movlw	240
  5982  0FED  01F6               	clrf	Read_ADC@Adc_Result+1
  5983  0FEE  0EF5               	swapf	Read_ADC@Adc_Result,f
  5984  0FEF  0EF6               	swapf	Read_ADC@Adc_Result+1,f
  5985  0FF0  05F6               	andwf	Read_ADC@Adc_Result+1,f
  5986  0FF1  0875               	movf	Read_ADC@Adc_Result,w
  5987  0FF2  390F               	andlw	15
  5988  0FF3  04F6               	iorwf	Read_ADC@Adc_Result+1,f
  5989  0FF4  30F0               	movlw	240
  5990  0FF5  05F5               	andwf	Read_ADC@Adc_Result,f
  5991                           
  5992                           ;main.c: 292: Adc_Result += ADRESL>>4;
  5993  0FF6  0E1E               	swapf	30,w	;volatile
  5994  0FF7  390F               	andlw	15
  5995  0FF8  07F5               	addwf	Read_ADC@Adc_Result,f
  5996  0FF9  1803               	skipnc
  5997  0FFA  0AF6               	incf	Read_ADC@Adc_Result+1,f
  5998                           
  5999                           ;main.c: 293: return Adc_Result;
  6000  0FFB  0876               	movf	Read_ADC@Adc_Result+1,w
  6001  0FFC  00F3               	movwf	?_Read_ADC+1
  6002  0FFD  0875               	movf	Read_ADC@Adc_Result,w
  6003  0FFE  00F2               	movwf	?_Read_ADC
  6004  0FFF  0008               	return
  6005  1000                     __end_of_Read_ADC:	
  6006                           
  6007                           	psect	text24
  6008  0DB7                     __ptext24:	
  6009 ;; *************** function _KeyServer *****************
  6010 ;; Defined at:
  6011 ;;		line 124 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;		None
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;		None
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  1    wreg      void 
  6018 ;; Registers used:
  6019 ;;		wreg, status,2, status,0
  6020 ;; Tracked objects:
  6021 ;;		On entry : 300/0
  6022 ;;		On exit  : 300/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6025 ;;      Params:         0       0       0       0       0
  6026 ;;      Locals:         0       0       0       0       0
  6027 ;;      Temps:          0       0       0       0       0
  6028 ;;      Totals:         0       0       0       0       0
  6029 ;;Total ram usage:        0 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:    1
  6032 ;; This function calls:
  6033 ;;		Nothing
  6034 ;; This function is called by:
  6035 ;;		_main
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           
  6040                           ;psect for function _KeyServer
  6041  0DB7                     _KeyServer:	
  6042                           
  6043                           ;main.c: 125: if(key1ProtectTime > 0)
  6044                           
  6045                           ;incstack = 0
  6046                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  6047  0DB7  084D               	movf	_key1ProtectTime,w
  6048  0DB8  1D03               	btfss	3,2
  6049                           
  6050                           ;main.c: 126: {
  6051                           ;main.c: 127: key1ProtectTime--;
  6052  0DB9  03CD               	decf	_key1ProtectTime,f
  6053                           
  6054                           ;main.c: 128: }
  6055                           ;main.c: 129: if(key2ProtectTime > 0)
  6056  0DBA  084C               	movf	_key2ProtectTime,w
  6057  0DBB  1D03               	btfss	3,2
  6058                           
  6059                           ;main.c: 130: {
  6060                           ;main.c: 131: key2ProtectTime--;
  6061  0DBC  03CC               	decf	_key2ProtectTime,f
  6062                           
  6063                           ;main.c: 132: }
  6064                           ;main.c: 133: if(key3ProtectTime > 0)
  6065  0DBD  084B               	movf	_key3ProtectTime,w
  6066  0DBE  1D03               	btfss	3,2
  6067                           
  6068                           ;main.c: 134: {
  6069                           ;main.c: 135: key3ProtectTime--;
  6070  0DBF  03CB               	decf	_key3ProtectTime,f
  6071                           
  6072                           ;main.c: 139: NoTouchTime = 0;
  6073  0DC0  0842               	movf	_KeyFlag,w	;volatile
  6074  0DC1  1903               	btfsc	3,2
  6075  0DC2  2E60               	goto	l4104
  6076                           
  6077                           ;main.c: 140: sleepTime = 0;
  6078  0DC3  01AE               	clrf	_sleepTime
  6079  0DC4  01AF               	clrf	_sleepTime+1
  6080                           
  6081                           ;main.c: 141: if ((KeyFlag[0] & 0x2) && key2ProtectTime == 0 && key3ProtectTime == 0) {
  6082  0DC5  1CC2               	btfss	_KeyFlag,1	;volatile
  6083  0DC6  2DE7               	goto	l4028
  6084  0DC7  084C               	movf	_key2ProtectTime,w
  6085  0DC8  1D03               	btfss	3,2
  6086  0DC9  2DE7               	goto	l4028
  6087  0DCA  084B               	movf	_key3ProtectTime,w
  6088  0DCB  1D03               	btfss	3,2
  6089  0DCC  2DE7               	goto	l4028
  6090                           
  6091                           ;main.c: 143: key1ProtectTime = 5;
  6092  0DCD  3005               	movlw	5
  6093  0DCE  00CD               	movwf	_key1ProtectTime
  6094                           
  6095                           ;main.c: 144: if(++keyCount1 > 45)
  6096  0DCF  0ABE               	incf	_keyCount1,f
  6097  0DD0  1903               	skipnz
  6098  0DD1  0ABF               	incf	_keyCount1+1,f
  6099  0DD2  3000               	movlw	0
  6100  0DD3  023F               	subwf	_keyCount1+1,w
  6101  0DD4  302E               	movlw	46
  6102  0DD5  1903               	skipnz
  6103  0DD6  023E               	subwf	_keyCount1,w
  6104  0DD7  1C03               	skipc
  6105  0DD8  2DE7               	goto	l4028
  6106                           
  6107                           ;main.c: 145: {
  6108                           ;main.c: 146: keyCount1 = 45;
  6109  0DD9  302D               	movlw	45
  6110  0DDA  00BE               	movwf	_keyCount1
  6111  0DDB  3002               	movlw	2
  6112  0DDC  01BF               	clrf	_keyCount1+1
  6113                           
  6114                           ;main.c: 147: if(workStep > 1 && ++count50 > 25)
  6115  0DDD  027B               	subwf	_workStep,w
  6116  0DDE  1C03               	skipc
  6117  0DDF  2DE7               	goto	l4028
  6118  0DE0  301A               	movlw	26
  6119  0DE1  0AD8               	incf	_count50,f
  6120  0DE2  0258               	subwf	_count50,w
  6121  0DE3  1C03               	skipc
  6122  0DE4  2DE7               	goto	l4028
  6123                           
  6124                           ;main.c: 148: {
  6125                           ;main.c: 149: workStep--;
  6126  0DE5  03FB               	decf	_workStep,f
  6127                           
  6128                           ;main.c: 150: count50 = 0;
  6129  0DE6  01D8               	clrf	_count50
  6130  0DE7                     l4028:	
  6131                           
  6132                           ;main.c: 151: }
  6133                           ;main.c: 152: }
  6134                           ;main.c: 153: }
  6135                           ;main.c: 154: if ((KeyFlag[0] & 0x1) && key1ProtectTime == 0 && key3ProtectTime == 0) {
  6136  0DE7  1C42               	btfss	_KeyFlag,0	;volatile
  6137  0DE8  2E10               	goto	l4050
  6138  0DE9  084D               	movf	_key1ProtectTime,w
  6139  0DEA  1D03               	btfss	3,2
  6140  0DEB  2E10               	goto	l4050
  6141  0DEC  084B               	movf	_key3ProtectTime,w
  6142  0DED  1D03               	btfss	3,2
  6143  0DEE  2E10               	goto	l4050
  6144                           
  6145                           ;main.c: 156: key2ProtectTime = 5;
  6146  0DEF  3005               	movlw	5
  6147  0DF0  00CC               	movwf	_key2ProtectTime
  6148                           
  6149                           ;main.c: 157: if(++keyCount2 > 45)
  6150  0DF1  0ABC               	incf	_keyCount2,f
  6151  0DF2  1903               	skipnz
  6152  0DF3  0ABD               	incf	_keyCount2+1,f
  6153  0DF4  3000               	movlw	0
  6154  0DF5  023D               	subwf	_keyCount2+1,w
  6155  0DF6  302E               	movlw	46
  6156  0DF7  1903               	skipnz
  6157  0DF8  023C               	subwf	_keyCount2,w
  6158  0DF9  1C03               	skipc
  6159  0DFA  2E10               	goto	l4050
  6160                           
  6161                           ;main.c: 158: {
  6162                           ;main.c: 159: keyCount2 = 45;
  6163  0DFB  302D               	movlw	45
  6164  0DFC  00BC               	movwf	_keyCount2
  6165  0DFD  3014               	movlw	20
  6166  0DFE  01BD               	clrf	_keyCount2+1
  6167                           
  6168                           ;main.c: 160: if(workStep < 20 && (workStep > 0 || ledLightTime > 0) && ++count50 > 25)
  6169  0DFF  027B               	subwf	_workStep,w
  6170  0E00  1803               	skipnc
  6171  0E01  2E10               	goto	l4050
  6172  0E02  087B               	movf	_workStep,w
  6173  0E03  1D03               	btfss	3,2
  6174  0E04  2E09               	goto	l4044
  6175  0E05  0838               	movf	_ledLightTime,w
  6176  0E06  0439               	iorwf	_ledLightTime+1,w
  6177  0E07  1903               	btfsc	3,2
  6178  0E08  2E10               	goto	l4050
  6179  0E09                     l4044:	
  6180  0E09  301A               	movlw	26
  6181  0E0A  0AD8               	incf	_count50,f
  6182  0E0B  0258               	subwf	_count50,w
  6183  0E0C  1C03               	skipc
  6184  0E0D  2E10               	goto	l4050
  6185                           
  6186                           ;main.c: 161: {
  6187                           ;main.c: 162: workStep++;
  6188  0E0E  0AFB               	incf	_workStep,f
  6189                           
  6190                           ;main.c: 163: count50 = 0;
  6191  0E0F  01D8               	clrf	_count50
  6192  0E10                     l4050:	
  6193                           
  6194                           ;main.c: 164: }
  6195                           ;main.c: 165: }
  6196                           ;main.c: 166: }
  6197                           ;main.c: 167: if ((KeyFlag[0] & 0x4) && key2ProtectTime == 0 && key1ProtectTime == 0) {
  6198  0E10  1D42               	btfss	_KeyFlag,2	;volatile
  6199  0E11  2E5E               	goto	l4102
  6200  0E12  084C               	movf	_key2ProtectTime,w
  6201  0E13  1D03               	btfss	3,2
  6202  0E14  2E5E               	goto	l4102
  6203  0E15  084D               	movf	_key1ProtectTime,w
  6204  0E16  1D03               	btfss	3,2
  6205  0E17  2E5E               	goto	l4102
  6206                           
  6207                           ;main.c: 169: key3ProtectTime = 5;
  6208  0E18  3005               	movlw	5
  6209  0E19  00CB               	movwf	_key3ProtectTime
  6210                           
  6211                           ;main.c: 170: if(++keyCount3 > 200)
  6212  0E1A  0ABA               	incf	_keyCount3,f
  6213  0E1B  1903               	skipnz
  6214  0E1C  0ABB               	incf	_keyCount3+1,f
  6215  0E1D  3000               	movlw	0
  6216  0E1E  023B               	subwf	_keyCount3+1,w
  6217  0E1F  30C9               	movlw	201
  6218  0E20  1903               	skipnz
  6219  0E21  023A               	subwf	_keyCount3,w
  6220  0E22  1C03               	skipc
  6221  0E23  2E4D               	goto	l4090
  6222                           
  6223                           ;main.c: 171: {
  6224                           ;main.c: 172: keyCount3 = 200;
  6225  0E24  30C8               	movlw	200
  6226  0E25  00BA               	movwf	_keyCount3
  6227  0E26  01BB               	clrf	_keyCount3+1
  6228                           
  6229                           ;main.c: 173: if(longKeyFalg == 0)
  6230  0E27  0863               	movf	_longKeyFalg,w
  6231  0E28  1D03               	btfss	3,2
  6232  0E29  2E43               	goto	l4082
  6233                           
  6234                           ;main.c: 174: {
  6235                           ;main.c: 175: longKeyFalg = 1;
  6236  0E2A  01E3               	clrf	_longKeyFalg
  6237  0E2B  0AE3               	incf	_longKeyFalg,f
  6238                           
  6239                           ;main.c: 176: if(workStep > 0 || ledLightTime > 0)
  6240  0E2C  087B               	movf	_workStep,w
  6241  0E2D  1D03               	btfss	3,2
  6242  0E2E  2E33               	goto	l4070
  6243  0E2F  0838               	movf	_ledLightTime,w
  6244  0E30  0439               	iorwf	_ledLightTime+1,w
  6245  0E31  1903               	btfsc	3,2
  6246  0E32  2E39               	goto	l4076
  6247  0E33                     l4070:	
  6248  0E33  300C               	movlw	12
  6249                           
  6250                           ;main.c: 177: {
  6251                           ;main.c: 178: workStep = 0;
  6252  0E34  01FB               	clrf	_workStep
  6253                           
  6254                           ;main.c: 179: zeroStep = 12;
  6255  0E35  00FA               	movwf	_zeroStep
  6256                           
  6257                           ;main.c: 180: ledLightTime = 0;
  6258  0E36  01B8               	clrf	_ledLightTime
  6259  0E37  01B9               	clrf	_ledLightTime+1
  6260                           
  6261                           ;main.c: 181: }
  6262  0E38  2E4D               	goto	l4090
  6263  0E39                     l4076:	
  6264                           
  6265                           ;main.c: 182: else if(lowBatFlag == 0)
  6266  0E39  0851               	movf	_lowBatFlag,w
  6267  0E3A  1D03               	btfss	3,2
  6268  0E3B  2E4D               	goto	l4090
  6269  0E3C  302C               	movlw	44
  6270                           
  6271                           ;main.c: 183: {
  6272                           ;main.c: 184: workStep = 0;
  6273  0E3D  01FB               	clrf	_workStep
  6274                           
  6275                           ;main.c: 185: zeroStep = 0;
  6276  0E3E  01FA               	clrf	_zeroStep
  6277                           
  6278                           ;main.c: 186: ledLightTime = 300;
  6279  0E3F  00B8               	movwf	_ledLightTime
  6280  0E40  3001               	movlw	1
  6281  0E41  00B9               	movwf	_ledLightTime+1
  6282                           
  6283                           ;main.c: 188: {
  6284                           ;main.c: 189: shanShuoTime = 250;
  6285  0E42  2E4D               	goto	l4090
  6286  0E43                     l4082:	
  6287                           
  6288                           ;main.c: 193: else if(zeroStep > 0 && ++count64ms >= 12)
  6289  0E43  087A               	movf	_zeroStep,w
  6290  0E44  1903               	btfsc	3,2
  6291  0E45  2E4D               	goto	l4090
  6292  0E46  300C               	movlw	12
  6293  0E47  0ADD               	incf	_count64ms,f
  6294  0E48  025D               	subwf	_count64ms,w
  6295  0E49  1C03               	skipc
  6296  0E4A  2E4D               	goto	l4090
  6297                           
  6298                           ;main.c: 194: {
  6299                           ;main.c: 195: zeroStep--;
  6300  0E4B  03FA               	decf	_zeroStep,f
  6301                           
  6302                           ;main.c: 196: count64ms = 0;
  6303  0E4C  01DD               	clrf	_count64ms
  6304  0E4D                     l4090:	
  6305                           
  6306                           ;main.c: 197: }
  6307                           ;main.c: 198: }
  6308                           ;main.c: 199: if(lowBatFlag == 0 && ledLightTime == 0 && longKeyFalg == 0 && keyCount3 %
      +                           16 == 0)
  6309  0E4D  0851               	movf	_lowBatFlag,w
  6310  0E4E  1D03               	btfss	3,2
  6311  0E4F  2E5E               	goto	l4102
  6312  0E50  0838               	movf	_ledLightTime,w
  6313  0E51  0439               	iorwf	_ledLightTime+1,w
  6314  0E52  1D03               	btfss	3,2
  6315  0E53  2E5E               	goto	l4102
  6316  0E54  0863               	movf	_longKeyFalg,w
  6317  0E55  1D03               	btfss	3,2
  6318  0E56  2E5E               	goto	l4102
  6319  0E57  083A               	movf	_keyCount3,w
  6320  0E58  390F               	andlw	15
  6321  0E59  1D03               	btfss	3,2
  6322  0E5A  2E5E               	goto	l4102
  6323                           
  6324                           ;main.c: 200: {
  6325                           ;main.c: 201: zeroStep++;
  6326  0E5B  0AFA               	incf	_zeroStep,f
  6327                           
  6328                           ;main.c: 202: preZero = zeroStep;
  6329  0E5C  087A               	movf	_zeroStep,w
  6330  0E5D  00C9               	movwf	_preZero
  6331  0E5E                     l4102:	
  6332                           
  6333                           ;main.c: 203: }
  6334                           ;main.c: 204: }
  6335                           ;main.c: 205: keyCancelTime = 0;
  6336  0E5E  01CA               	clrf	_keyCancelTime
  6337                           
  6338                           ;main.c: 206: }
  6339  0E5F  0008               	return
  6340  0E60                     l4104:	
  6341                           
  6342                           ;main.c: 207: else
  6343                           ;main.c: 208: {
  6344                           ;main.c: 209: if(++keyCancelTime > 5)
  6345  0E60  3006               	movlw	6
  6346  0E61  0ACA               	incf	_keyCancelTime,f
  6347  0E62  024A               	subwf	_keyCancelTime,w
  6348  0E63  1C03               	skipc
  6349  0E64  2E89               	goto	l4128
  6350  0E65  3000               	movlw	0
  6351                           
  6352                           ;main.c: 210: {
  6353                           ;main.c: 211: keyCancelTime = 0;
  6354  0E66  01CA               	clrf	_keyCancelTime
  6355                           
  6356                           ;main.c: 212: if(keyCount1 > 5 && workStep > 1)
  6357  0E67  023F               	subwf	_keyCount1+1,w
  6358  0E68  3006               	movlw	6
  6359  0E69  1903               	skipnz
  6360  0E6A  023E               	subwf	_keyCount1,w
  6361  0E6B  1C03               	skipc
  6362  0E6C  2E72               	goto	l4114
  6363  0E6D  3002               	movlw	2
  6364  0E6E  027B               	subwf	_workStep,w
  6365  0E6F  1C03               	skipc
  6366  0E70  2E72               	goto	l4114
  6367                           
  6368                           ;main.c: 213: {
  6369                           ;main.c: 214: workStep--;
  6370  0E71  03FB               	decf	_workStep,f
  6371  0E72                     l4114:	
  6372  0E72  3000               	movlw	0
  6373                           
  6374                           ;main.c: 215: }
  6375                           ;main.c: 216: keyCount1 = 0;
  6376  0E73  01BE               	clrf	_keyCount1
  6377  0E74  01BF               	clrf	_keyCount1+1
  6378                           
  6379                           ;main.c: 218: if(keyCount2 > 5 && workStep < 20 && (workStep > 0 || ledLightTime > 0))
  6380  0E75  023D               	subwf	_keyCount2+1,w
  6381  0E76  3006               	movlw	6
  6382  0E77  1903               	skipnz
  6383  0E78  023C               	subwf	_keyCount2,w
  6384  0E79  1C03               	skipc
  6385  0E7A  2E87               	goto	l4126
  6386  0E7B  3014               	movlw	20
  6387  0E7C  027B               	subwf	_workStep,w
  6388  0E7D  1803               	skipnc
  6389  0E7E  2E87               	goto	l4126
  6390  0E7F  087B               	movf	_workStep,w
  6391  0E80  1D03               	btfss	3,2
  6392  0E81  2E86               	goto	l4124
  6393  0E82  0838               	movf	_ledLightTime,w
  6394  0E83  0439               	iorwf	_ledLightTime+1,w
  6395  0E84  1903               	btfsc	3,2
  6396  0E85  2E87               	goto	l4126
  6397  0E86                     l4124:	
  6398                           
  6399                           ;main.c: 219: {
  6400                           ;main.c: 220: workStep++;
  6401  0E86  0AFB               	incf	_workStep,f
  6402  0E87                     l4126:	
  6403                           
  6404                           ;main.c: 221: }
  6405                           ;main.c: 222: keyCount2 = 0;
  6406  0E87  01BC               	clrf	_keyCount2
  6407  0E88  01BD               	clrf	_keyCount2+1
  6408  0E89                     l4128:	
  6409                           
  6410                           ;main.c: 223: }
  6411                           ;main.c: 230: if(preZero == 1 || preZero == 2)
  6412  0E89  0349               	decf	_preZero,w
  6413  0E8A  1903               	btfsc	3,2
  6414  0E8B  2E90               	goto	l4132
  6415  0E8C  3002               	movlw	2
  6416  0E8D  0649               	xorwf	_preZero,w
  6417  0E8E  1D03               	btfss	3,2
  6418  0E8F  2E93               	goto	l4136
  6419  0E90                     l4132:	
  6420  0E90  3003               	movlw	3
  6421                           
  6422                           ;main.c: 231: {
  6423                           ;main.c: 232: preZero = 0;
  6424  0E91  01C9               	clrf	_preZero
  6425                           
  6426                           ;main.c: 233: zeroStep = 3;
  6427  0E92  00FA               	movwf	_zeroStep
  6428  0E93                     l4136:	
  6429                           
  6430                           ;main.c: 234: }
  6431                           ;main.c: 235: longKeyFalg = 0;
  6432  0E93  01E3               	clrf	_longKeyFalg
  6433                           
  6434                           ;main.c: 236: keyCount3 = 0;
  6435  0E94  01BA               	clrf	_keyCount3
  6436  0E95  01BB               	clrf	_keyCount3+1
  6437                           
  6438                           ;main.c: 237: if(zeroStep > 0 && ++count64ms >= 12)
  6439  0E96  087A               	movf	_zeroStep,w
  6440  0E97  1903               	btfsc	3,2
  6441  0E98  0008               	return
  6442  0E99  300C               	movlw	12
  6443  0E9A  0ADD               	incf	_count64ms,f
  6444  0E9B  025D               	subwf	_count64ms,w
  6445  0E9C  1C03               	skipc
  6446  0E9D  0008               	return
  6447                           
  6448                           ;main.c: 238: {
  6449                           ;main.c: 239: zeroStep--;
  6450  0E9E  03FA               	decf	_zeroStep,f
  6451                           
  6452                           ;main.c: 240: count64ms = 0;
  6453  0E9F  01DD               	clrf	_count64ms
  6454  0EA0  0008               	return
  6455  0EA1                     __end_of_KeyServer:	
  6456                           
  6457                           	psect	text37
  6458  0D6D                     __ptext37:	
  6459 ;; *************** function _Isr_Timer *****************
  6460 ;; Defined at:
  6461 ;;		line 358 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;		None
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;		None
  6466 ;; Return value:  Size  Location     Type
  6467 ;;                  1    wreg      void 
  6468 ;; Registers used:
  6469 ;;		wreg, status,2, status,0
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 200/200
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6475 ;;      Params:         0       0       0       0       0
  6476 ;;      Locals:         0       0       0       0       0
  6477 ;;      Temps:          2       0       0       0       0
  6478 ;;      Totals:         2       0       0       0       0
  6479 ;;Total ram usage:        2 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; This function calls:
  6482 ;;		Nothing
  6483 ;; This function is called by:
  6484 ;;		Interrupt level 1
  6485 ;; This function uses a non-reentrant model
  6486 ;;
  6487                           
  6488                           
  6489                           ;psect for function _Isr_Timer
  6490  0D6D                     _Isr_Timer:	
  6491                           
  6492                           ;main.c: 360: if(TMR2IF)
  6493  0D6D  1283               	bcf	3,5	;RP0=0, select bank0
  6494  0D6E  1303               	bcf	3,6	;RP1=0, select bank0
  6495  0D6F  1C8C               	btfss	12,1	;volatile
  6496  0D70  2D7A               	goto	i1l4476
  6497                           
  6498                           ;main.c: 361: {
  6499                           ;main.c: 362: TMR2IF = 0;
  6500  0D71  108C               	bcf	12,1	;volatile
  6501                           
  6502                           ;main.c: 363: if(++MainTime >= 32)
  6503  0D72  3020               	movlw	32
  6504  0D73  0AE4               	incf	_MainTime,f	;volatile
  6505  0D74  0264               	subwf	_MainTime,w	;volatile
  6506  0D75  1C03               	skipc
  6507  0D76  2D7B               	goto	i1l4478
  6508                           
  6509                           ;main.c: 364: {
  6510                           ;main.c: 365: MainTime = 0;
  6511  0D77  01E4               	clrf	_MainTime	;volatile
  6512                           
  6513                           ;main.c: 366: B_MainLoop = 1;
  6514  0D78  1779               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  6515  0D79  2D7B               	goto	i1l4478
  6516  0D7A                     i1l4476:	
  6517                           
  6518                           ;main.c: 369: else
  6519                           ;main.c: 370: {
  6520                           ;main.c: 371: PIR1 = 0;
  6521  0D7A  018C               	clrf	12	;volatile
  6522  0D7B                     i1l4478:	
  6523                           
  6524                           ;main.c: 372: }
  6525                           ;main.c: 374: if(RACIF)
  6526  0D7B  1703               	bsf	3,6	;RP1=1, select bank2
  6527  0D7C  1C87               	btfss	7,1	;volatile
  6528  0D7D  2D81               	goto	i1l4484
  6529                           
  6530                           ;main.c: 375: {
  6531                           ;main.c: 376: RACIF = 0;
  6532  0D7E  1087               	bcf	7,1	;volatile
  6533                           
  6534                           ;main.c: 377: PORTA;
  6535  0D7F  1303               	bcf	3,6	;RP1=0, select bank0
  6536  0D80  0805               	movf	5,w	;volatile
  6537  0D81                     i1l4484:	
  6538                           
  6539                           ;main.c: 379: }
  6540                           ;main.c: 382: if(RCCIF)
  6541  0D81  1703               	bsf	3,6	;RP1=1, select bank2
  6542  0D82  1D07               	btfss	7,2	;volatile
  6543  0D83  2D87               	goto	i1l1279
  6544                           
  6545                           ;main.c: 383: {
  6546                           ;main.c: 384: RCCIF = 0;
  6547  0D84  1107               	bcf	7,2	;volatile
  6548                           
  6549                           ;main.c: 385: PORTC;
  6550  0D85  1683               	bsf	3,5	;RP0=1, select bank3
  6551  0D86  0805               	movf	5,w	;volatile
  6552  0D87                     i1l1279:	
  6553  0D87  0871               	movf	??_Isr_Timer+1,w
  6554  0D88  008A               	movwf	10
  6555  0D89  0E70               	swapf	??_Isr_Timer^(0+-128),w
  6556  0D8A  0083               	movwf	3
  6557  0D8B  0EFE               	swapf	126,f
  6558  0D8C  0E7E               	swapf	126,w
  6559  0D8D  0009               	retfie
  6560  0D8E                     __end_of_Isr_Timer:	
  6561  007E                     btemp	set	126	;btemp
  6562  007E                     wtemp0	set	126
  6563                           
  6564                           	psect	intentry
  6565  0004                     __pintentry:	
  6566                           ;incstack = 0
  6567                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  6568                           
  6569  0004                     interrupt_function:	
  6570  007E                     saved_w	set	btemp
  6571  0004  00FE               	movwf	btemp
  6572  0005  0E03               	swapf	3,w
  6573  0006  00F0               	movwf	??_Isr_Timer
  6574  0007  080A               	movf	10,w
  6575  0008  00F1               	movwf	??_Isr_Timer+1
  6576  0009  158A  2D6D         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    31
    Data        0
    BSS         98
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      12
    BANK0            80      9      78
    BANK1            80      0      27
    BANK3            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _checkTempAD->_Read_ADC
    _refreshTM1650->_tm1650cmd
    _initTM1650->_tm1650cmd
    _tm1650cmd->_write_8bit
    _SystemEnterSleep->_GetTouchKeyValue
    _checkChrgAD->_Read_ADC
    _checkBat->_Read_ADC
    _CheckTouchKey->_CheckOnceResult
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Isr_Timer in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8191
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                           _checkBat
                            _chrgCtr
                         _initTM1650
                            _showCtr
                              _task1
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0     267
                        _checkTempAD
 ---------------------------------------------------------------------------------
 (2) _checkTempAD                                          0     0      0     267
                           _Read_ADC
 ---------------------------------------------------------------------------------
 (1) _task1                                                0     0      0     801
                      _refreshTM1650
 ---------------------------------------------------------------------------------
 (2) _refreshTM1650                                        0     0      0     801
                          _tm1650cmd
 ---------------------------------------------------------------------------------
 (1) _showCtr                                              0     0      0    3091
                          _WorkSleep
                            ___lbdiv
                            ___lbmod
                            ___lwmod
                         _initTM1650
                        _setZeroStep
                       _setZeroStep2
                          _tm1650cmd
 ---------------------------------------------------------------------------------
 (2) _setZeroStep2                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setZeroStep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initTM1650                                           0     0      0     801
                          _tm1650cmd
 ---------------------------------------------------------------------------------
 (3) _tm1650cmd                                            2     1      1     801
                                              4 COMMON     2     1      1
                       _TM1650_START
                        _TM1650_STOP
                         _write_8bit
 ---------------------------------------------------------------------------------
 (4) _write_8bit                                           2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _TM1650_STOP                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TM1650_START                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     245
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     202
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     205
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _WorkSleep                                            0     0      0     837
                        _Init_System
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (3) _SystemEnterSleep                                     9     9      0     837
                                              0 BANK0      9     9      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0     267
                        _checkChrgAD
 ---------------------------------------------------------------------------------
 (2) _checkChrgAD                                          0     0      0     267
                           _Read_ADC
 ---------------------------------------------------------------------------------
 (1) _checkBat                                             2     2      0     267
                                              0 BANK0      2     2      0
                           _Read_ADC
 ---------------------------------------------------------------------------------
 (3) _Read_ADC                                             9     7      2     267
                                              2 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    2697
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (4) _GetTouchKeyValue                                     5     5      0     181
                                              3 COMMON     5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (5) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1463
                                              5 COMMON     4     4      0
                                              0 BANK0      9     9      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     304
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (4) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _checkBat
     _Read_ADC
   _chrgCtr
     _checkChrgAD
       _Read_ADC
   _initTM1650
     _tm1650cmd
       _TM1650_START
       _TM1650_STOP
       _write_8bit
   _showCtr
     _WorkSleep
       _Init_System
       _Refurbish_Sfr
       _SystemEnterSleep
         _ClearResSum
         _GetTouchKeyValue
           _ClearResSum
         _KeyClearOne
     ___lbdiv
     ___lbmod
     ___lwmod
     _initTM1650
       _tm1650cmd
         _TM1650_START
         _TM1650_STOP
         _write_8bit
     _setZeroStep
     _setZeroStep2
     _tm1650cmd
       _TM1650_START
       _TM1650_STOP
       _write_8bit
   _task1
     _refreshTM1650
       _tm1650cmd
         _TM1650_START
         _TM1650_STOP
         _write_8bit
   _workCtr
     _checkTempAD
       _Read_ADC

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      9      4E       4       97.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0      1B       6       33.8%
BITBANK3            50      0       0       7        0.0%
BANK3               50      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
ABS                  0      0      75      11        0.0%
DATA                 0      0      75      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Aug 08 14:48:48 2024

                KeyIsIn@cnt 0073                  KeyHave@cnt 0074                 KeyHave@flag 0072  
              ?_TM1650_STOP 0070                           pc 0002                          PL2 0775  
                        PL4 0783                          PL6 0795                          PL8 079C  
             ?_TM1650_START 0070               ??_KeyClearOne 0072       __size_of_TurnKeyFlags 002D  
                        fsr 0004            ??_CheckValidTime 0072  SystemEnterSleep@KeyResTemp 0069  
                       PL10 07A7                         PL20 07CE                         PL12 07B2  
                       PL22 07D4                         PL14 07B9                         PL24 07DA  
                       PL16 07C1                         PL26 07E0                         PL18 07C7  
                       PL28 07E5                         _RC0 0C28                         _RB6 0036  
                       _RB7 0037                         _PR2 0091                         fsr0 0004  
                       indf 0000         CheckOnceResult@flag 0069           ?_GetTouchKeyValue 0070  
  __end_of_Table_KeyChannel 0825          ??_GetTouchKeyValue 0073                        l1245 0FCF  
                      l3300 0664                        l1622 00F4                        l4102 0E5E  
                      l1640 05FA                        l4104 0E60                        l1296 03C4  
                      l3322 01FA                        l4114 0E72                        l4050 0E10  
                      l1298 03F7                        l4132 0E90                        l4124 0E86  
                      l4044 0E09                        l4028 0DE7                        l3412 0FC4  
                      l4300 0F3E                        l1581 05B9                        l3334 0586  
                      l4126 0E87                        l4070 0E33                        l3414 0FC7  
                      l1671 04CF                        l4136 0E93                        l4128 0E89  
                      l3424 0FE6                        l3408 0FC0                        l4400 004C  
                      l3338 058C                        l3530 0631                        l4082 0E43  
                      l4090 0E4D                        l3426 0FE1                        l3370 0640  
                      l3610 0686                        l1659 0088                        l3292 055E  
                      l3364 05C7                        l3524 0630                        l4076 0E39  
                      l3428 0FEA                        l3700 0729                        l4404 0056  
                      l4340 0F86                        l4332 0F7A                        l4308 0F47  
                      l3294 055F                        l3366 05D7                        l3534 063A  
                      l3702 0723                        l4342 0F87                        l4326 0F6B  
                      l3800 0168                        l4600 0492                        l1952 02EC  
                      l3640 06C0                        l3632 06BC                        l3616 0376  
                      l4416 0069                        l4328 0F6C                        l4352 0F98  
                      l3730 0745                        l3714 0725                        l4418 006B  
                      l3548 0209                        l3820 019E                        l3652 06C4  
                      l3628 06B6                        l3724 073D                        l3814 0196  
                      l4374 0EC1                        l4630 04C6                        l3670 06EF  
                      l3662 06DD                        l3646 06C2                        l3638 06C8  
                      l3742 0755                        l4710 0269                        l4702 025D  
                      l3566 0FB5                        l4456 009C                        l4448 0097  
                      l4464 00A6                        l4376 0EC4                        l4560 0501  
                      l3760 076D                        l3736 074D                        l3842 01DA  
                      l3834 01CA                        l3922 061C                        l3914 0601  
                      l4458 00A0                        l3682 070A                        l3674 06F8  
                      l3666 06E6                        l3754 0765                        l3690 0718  
                      l4714 026F                        l4706 0263                        l4386 002E  
                      l3844 01DE                        l3772 0211                        l4548 04FA  
                      l4636 04CC                        l3684 070E                        l3748 075D  
                      l4724 0283                        l4388 0030                        l3838 01D6  
                      l3846 01E4                        l3782 0111                        l4574 052F  
                      l3686 0713                        l3678 0701                        l3694 071E  
                      l4742 02A2                        l4750 02AC                        l4718 0274  
                      l4398 004A                        l3856 00B0                        l3928 062D  
                      l3952 02F9                        l3960 02FF                        l4658 0EFB  
                      l4578 0536                        l4594 0557                        l3938 02E6  
                      l3698 0727                        l4770 02D3                        l4746 02A9  
                      l4748 02AB                        l4692 0249                        l4780 0D97  
                      l3982 0323                        l3990 0336                        l4758 02B6  
                      l4678 022B                        l3968 0313                        l4792 0DA7  
                      _ADON 04E8                        _CHS4 04E6                        _IOCA 0188  
                      u3045 0329                        _PIE1 000D                        _PIE2 0108  
                      u2725 01B6                        u2655 011E                        u4175 052B  
                      u2675 0159                        u4275 0F19                        u2685 016E  
                      u2695 017A                        _RBIF 0058                        _PIR1 000C  
                      _PIR2 0107                        _TMR0 0001                        _WPUB 0008  
                      _WPUC 0115                        _main 0D8E                        btemp 007E  
             ?_KeyStopClear 0070                        start 000B                _TurnKeyFlags 05E1  
           __end_of_KeyIsIn 0200             __end_of_KeyHave 020C              ??_TM1650_START 0072  
CheckKeyOldValue@KeyOldTemp 0067               ??_Init_System 0072  CheckKeyOldValue@KeyResTemp 0065  
     __end_of_refreshTM1650 03B5                       ?_main 0070             __end_of___lbdiv 02FB  
      __size_of_checkChrgAD 000A             __end_of___lbmod 0317                       _T2CON 0012  
  __end_of_SystemEnterSleep 055E                       _RACIE 0841                       _RACIF 0839  
           __end_of___lwmod 033B                       _RCCIF 083A                       _PORTA 0005  
                     _PORTB 0006                       _PORTC 0185                       _TRISA 0085  
                     _TRISB 0086                       _PWMTH 0016                       _TRISC 0186  
                     _PWMTL 0015        __size_of_checkTempAD 001D             __end_of_chrgCtr 0ECE  
       __end_of_KeyClearOne 0582                  _KeyClearIn 0630                       _task1 001F  
            __pbitbssCOMMON 03C8                       pclath 000A             __end_of_showCtr 02E0  
               _ClearResSum 055E                  _KeyCounter 0048                  _KeyOldData 002A  
            ??_KeyStopClear 0073                       status 0003          Read_ADC@ADCchannel 0078  
                     wtemp0 007E             __end_of_workCtr 0F9A             ___lbdiv@divisor 0072  
                _KeyUpShake 00B8             ___lbdiv@counter 0074             __initialization 000D  
              __end_of_main 0DB7            __end_of_Read_ADC 1000                      ??_main 0079  
       __end_of_Init_System 0664                      _ADCON0 009D                      _ADCON1 009C  
                    _ADRESH 009F                      _ADRESL 009E                      ?_task1 0070  
                    _GODONE 04E9                      i1l1279 0D87                      i1l4484 0D81  
                    i1l4476 0D7A                      i1l4478 0D7B                      _INTCON 000B  
        __size_of_KeyServer 00EA                      _OSCCON 0088                      _TMR2IF 0061  
                    _PWMD0L 0017                      _PWMD3L 001A                      _TRISB6 0436  
          __end_of_checkBat 0F28                ?_setZeroStep 0070                      _SWDTEN 0441  
                 ??_KeyIsIn 0072                   ??_KeyHave 0074          __size_of_Isr_Timer 0021  
 CheckOnceResult@KeyResTemp 006B      CheckOnceResult@KeyDown 006A   __size_of_CheckKeyOldValue 0064  
                    _b_kclr 03CA                      _b_kerr 03C9                   ??___lbdiv 0073  
                 ??___lbmod 0073                   ??___lwmod 0076                 _KeyClearOne 056D  
      __size_of_TM1650_STOP 0022                   ??_chrgCtr 0079             _key1ProtectTime 004D  
          __end_of_numArray 0814               _Table_KeyFalg 0814               _Table_KeyDown 081C  
                    saved_w 007E      __size_of_CheckTouchKey 002D                   ??_showCtr 0078  
               ?_KeyClearIn 0070                   ??_workCtr 0079             _CheckOnceResult 010B  
          ___lbdiv@dividend 0073        __end_of_TM1650_START 0492             ___lbmod@divisor 0072  
   __end_of__initialization 001C             ___lbmod@counter 0075             _key2ProtectTime 004C  
        __size_of_WorkSleep 003D          __size_of_tm1650cmd 000A              __pcstackCOMMON 0070  
             __end_of_task1 007A                 _Init_System 0640                  __end_ofPL2 0783  
                __end_ofPL4 0795                  __end_ofPL6 079C                  __end_ofPL8 07A7  
          ___lbdiv@quotient 0075           __end_of_KeyServer 0EA1             _key3ProtectTime 004B  
      __end_of_KeyStopClear 0222           __end_of_Isr_Timer 0D8E                     ??_task1 0076  
        Read_ADC@Adc_Result 0075                  __pbssBANK0 0020                  __pbssBANK1 00A0  
                 ?_Read_ADC 0072                _chrgFullFlag 0057   __size_of_GetTouchKeyValue 005F  
              _chrgLockFlag 0052                _chrgFullTime 0032               _CheckTouchKey 007A  
                __pmaintext 0D8E                  _chrgResult 0034                  __pintentry 0004  
       __size_of_KeyClearIn 0010           __end_of_WorkSleep 04CF           ?_SystemEnterSleep 0070  
   __end_of_CheckOnceResult 01EC                     _KEYCON0 0092                     _KEYCON1 0093  
                   _KEYCON2 0097                   ?_checkBat 0070           __end_of_tm1650cmd 03BF  
             KeyStopClear@i 0073          ??_SystemEnterSleep 0065                     _B_OnOff 03CD  
                   _PWMD01H 001C                     _PWMD23H 000E      __size_of_Refurbish_Sfr 000E  
                   _PWMCON0 0013                     _PWMCON1 0014                     _PWMCON2 001D  
                   _PWMIOS0 018C                     _PWMIOS1 018D               ?_setZeroStep2 0070  
      __end_of_Table_KeyCap 0822                  __stringtab 0800                ?_ClearResSum 0070  
                ??_Read_ADC 0074                  _initTM1650 0686                     _KeyData 0028  
                   _KeyFlag 0042                     _KeyIsIn 01EC                     _KeyHave 0200  
            ClearResSum@cnt 0072              ?_CheckTouchKey 0070        __size_of_setZeroStep 0062  
           _chrgBatStepTime 004E     CheckOnceResult@KeyValue 0067            _CheckKeyOldValue 00A7  
                   ___lbdiv 02E0                     ___lbmod 02FB                     _addTime 0055  
   CheckOnceResult@OldValue 0065                _ledLightTime 0038      TurnKeyFlags@KeyNoTimes 0044  
             ??_checkChrgAD 0079                     ___lwmod 0317        GetTouchKeyValue@wake 0075  
      GetTouchKeyValue@temp 0073                     _b_kover 03CC                     _chrgCtr 0EA1  
             ??_checkTempAD 0079                  _lowBatFlag 0051                     __ptext1 0F28  
                   __ptext2 0F9A                     __ptext3 001F                     __ptext4 033B  
                   __ptext5 0222                     __ptext6 0718                     __ptext7 06B6  
                   __ptext8 0686                     __ptext9 03B5                  _lowBatTime 0050  
                   _count50 0058                     _count1s 005C                  ??_checkBat 0065  
     __size_of_TM1650_START 0015                     _preZero 0049                     _showCtr 0222  
                   _subTime 0054              ??_setZeroStep2 0072     __size_of_CheckValidTime 0014  
                   clrloop0 07EB                     _workCtr 0F28        end_of_initialization 001C  
    __size_of_refreshTM1650 007A                  _tempResult 002C               _Refurbish_Sfr 060E  
              _KeyOldValue0 00AC                _KeyOldValue1 0020                _KeyOldValue2 00A6  
     __size_of_KeyStopClear 0016                _TM1650_START 047D                  _showShiWei 0061  
              ?_KeyClearOne 0070                _KeyReference 00A0               _checkTempTime 004F  
          ?_CheckOnceResult 0070         __end_of_checkChrgAD 0ED8            ___lbmod@dividend 0074  
       __end_of_checkTempAD 0FB7                ??_KeyClearIn 0074          CheckOnceResult@cnt 006D  
               ___lbmod@rem 0076                   Read_ADC@i 0077                 ?_initTM1650 0070  
           ??_CheckTouchKey 0079                _KeyStopClear 020C            _GetTouchKeyValue 0582  
            ?_Refurbish_Sfr 0070           Read_ADC@ADCLDORef 0072               ??_TM1650_STOP 0072  
                _write_8bit 03BF                ?_Init_System 0070          __end_of_KeyClearIn 0640  
             _refreshTM1650 033B                   _KeyMaxSub 0047                   _KeyResSum 00B2  
               __end_ofPL10 07B2                 __end_ofPL20 07D4                 __end_ofPL12 07B9  
               __end_ofPL22 07DA                 __end_ofPL14 07C1                 __end_ofPL24 07E0  
               __end_ofPL16 07C7                 __end_ofPL26 07E5                 __end_ofPL18 07CE  
               __end_ofPL28 07EA         start_initialization 000D                   _KeyServer 0DB7  
                 _Isr_Timer 0D6D        __size_of_ClearResSum 000F           __size_of_Read_ADC 0049  
             ?_TurnKeyFlags 0070        __end_of_setZeroStep2 0775    TurnKeyFlags@KeyHaveTimes 0045  
               _checkChrgAD 0ECE                _Table_KeyCap 081F              ?_refreshTM1650 0070  
               _checkTempAD 0F9A         __end_of_TM1650_STOP 0686         __size_of_initTM1650 0030  
               __pbssCOMMON 007A                  ?_KeyServer 0070                   ___latbits 0001  
             __pcstackBANK0 0065                   _WorkSleep 0492           __size_of_checkBat 0050  
            _CheckValidTime 061C    __end_of_CheckKeyOldValue 010B                   _tm1650cmd 03B5  
                ?_Isr_Timer 0070                   _batResult 0036                    ?_KeyIsIn 0070  
                  ?_KeyHave 0072   __size_of_SystemEnterSleep 008F             ??_Refurbish_Sfr 0072  
            ??_TurnKeyFlags 0075                    ?___lbdiv 0072                    ?___lbmod 0072  
               ?_write_8bit 0070                    ?___lwmod 0072                    ?_chrgCtr 0070  
                 __pstrings 0800                   _count900s 0030                   _count64ms 005D  
      __size_of_KeyClearOne 0015                   _keyCount1 003E                   _keyCount2 003C  
                 _keyCount3 003A      __end_of_CheckValidTime 0630                   _firstTime 0040  
                ?_WorkSleep 0070                    ?_showCtr 0070         GetTouchKeyValue@cnt 0077  
                ?_tm1650cmd 0074                    ?_workCtr 0070              __size_of_task1 005B  
                  _KEYDATAH 0095                    _KEYDATAL 0094           interrupt_function 0004  
             ??_setZeroStep 0072                   clear_ram0 07EA                   _sleepTime 002E  
               write_8bit@i 0073                   _showGeWei 0060                 _TM1650_STOP 0664  
       CheckKeyOldValue@cnt 0069             ??_refreshTM1650 0076                    KeyIsIn@i 0072  
               __stringbase 0805        __size_of_Init_System 0024       __end_of_Table_KeyFalg 081C  
     __end_of_Table_KeyDown 081F    __end_of_GetTouchKeyValue 05E1             ?_CheckValidTime 0070  
               ??_KeyServer 0072                 ??_Isr_Timer 0070                    _MainTime 0064  
       __size_of_write_8bit 00BE                    _Read_ADC 0FB7                ??_initTM1650 0076  
     __size_of_setZeroStep2 005D           tm1650cmd@seg_data 0074            __size_of_KeyIsIn 0014  
          __size_of_KeyHave 000C            _Table_KeyChannel 0822         __end_of_setZeroStep 0718  
          __size_of___lbdiv 001B    SystemEnterSleep@KeyValue 0067            __size_of___lbmod 001C  
          __size_of___lwmod 0024          __end_of__stringtab 0806            __size_of_chrgCtr 002D  
                  _batValue 005A                    _b_kover1 03CB                    _b_ksleep 03C8  
                  _checkBat 0ED8          __end_of_initTM1650 06B6        __end_of_TurnKeyFlags 060E  
                  _chrgFlag 005B                    _chrgDuty 0056                 ??_WorkSleep 0078  
   CheckValidTime@validtime 0026                    __ptext10 03BF                    __ptext11 0664  
                  __ptext20 0EA1                    __ptext12 047D                    __ptext21 0ECE  
                  __ptext13 0317                    __ptext30 055E                    __ptext22 0ED8  
                  __ptext14 02FB                    __ptext31 061C                    __ptext23 0FB7  
                  __ptext15 02E0                    __ptext32 010B                    __ptext24 0DB7  
                  __ptext16 0492                    __ptext33 0200                    __ptext25 007A  
                  __ptext17 04CF                    __ptext34 056D                    __ptext26 05E1  
                  __ptext18 060E                    __ptext35 00A7                    __ptext27 0630  
                  __ptext19 0640                    __ptext36 01EC                    __ptext28 020C  
                  __ptext37 0D6D                    __ptext29 0582                 ??_tm1650cmd 0075  
          __size_of_showCtr 00BE                _setZeroStep2 0718                    _count15s 0053  
          __size_of_workCtr 0072    __size_of_CheckOnceResult 00E1               __size_of_main 0029  
               _longKeyFalg 0063            _SystemEnterSleep 04CF                 _preBatValue 0059  
     __end_of_CheckTouchKey 00A7                    _numArray 0806                    _showLed1 005F  
                  _showLed2 005E                    _showFlag 0062                ?_checkChrgAD 0070  
          tm1650cmd@digAddr 0075                    _zeroStep 007A                    _workStep 007B  
              ?_checkTempAD 0070     CheckKeyOldValue@counter 0046           ?_CheckKeyOldValue 0070  
                  intlevel1 0000               ??_ClearResSum 0072          ??_CheckKeyOldValue 0074  
          ___lwmod@dividend 0074                 _setZeroStep 06B6                   stringcode 0800  
      SystemEnterSleep@wake 006B               write_8bit@dat 0072                ??_write_8bit 0072  
                _B_MainLoop 03CE                  _OPTION_REG 0081             ___lwmod@divisor 0072  
           ___lwmod@counter 0076                    stringdir 0800         SystemEnterSleep@cnt 006D  
                  stringtab 0800              KeyClearOne@cnt 0072               KeyClearIn@cnt 0074  
        __end_of_write_8bit 047D       __end_of_Refurbish_Sfr 061C         __end_of_ClearResSum 056D  
         ??_CheckOnceResult 0075               _keyCancelTime 004A  
