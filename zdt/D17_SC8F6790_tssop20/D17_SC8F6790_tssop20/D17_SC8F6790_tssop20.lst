---- C:\mcuproject\scm\zdt\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c ----------------------------------------------------------------------
1:                #include <sc.h>
2:                #include "Touch_Kscan_Library.h"
3:                
4:                
5:                
6:                #define		uchar		unsigned char
7:                #define		u8t		unsigned char
8:                #define		uint			unsigned int
9:                #define		u16t			unsigned int
10:               #define		ulong		unsigned long
11:               
12:               #define		SDA	RB7
13:               #define		SCL	RC0
14:               
15:               #define nop asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
16:               
17:               const static unsigned char numArray[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x71,0x79,0x50,0x73};
18:               
19:               volatile unsigned char MainTime;
20:               volatile bit	B_MainLoop, B_OnOff;
21:               u16t		firstTime = 0;
22:               u16t			keyCount1 = 0;
23:               u16t			keyCount2 = 0;
24:               u16t			keyCount3 = 0;
25:               u8t			longKeyFalg = 0;
26:               u8t			workStep = 0;
27:               u8t			zeroStep = 0;
28:               u16t		ledLightTime = 0;
29:               u8t			shanShuoTime = 0;
30:               u8t			lowBatLockFlag = 0;
31:               u8t			showFlag = 0;
32:               u8t			showShiWei = 0;
33:               u8t			showGeWei = 0;
34:               u8t			showLed1 = 0;
35:               u8t			showLed2 = 0;
36:               u8t			count64ms = 0;
37:               u8t			count1s = 0;
38:               u8t			chrgFlag = 0;
39:               u8t			batValue = 0;
40:               u16t		batResult = 0;
41:               u8t			preBatValue = 0;
42:               u16t		chrgResult = 0;
43:               u8t			NoTouchTime = 0;
44:               u8t			count50 = 0;
45:               u8t			chrgFullFlag = 0;
46:               u8t			chrgDuty = 0;
47:               u8t			addTime = 0;
48:               u8t			subTime = 0;
49:               u8t			count15s = 0;
50:               u8t			chrgLockFlag = 0;
51:               u16t		chrgFullTime = 0;
52:               u16t		count900s = 0;
53:               u16t			sleepTime = 0;
54:               u8t			lowBatFlag = 0;
55:               u8t			lowBatTime = 0;
56:               u16t		tempResult = 0;
57:               u8t			checkTempTime = 0;
58:               u8t			chrgBatStep = 0;
59:               u8t			chrgBatStepTime = 0;
60:               u8t			key1ProtectTime = 0;
61:               u8t			key2ProtectTime = 0;
62:               u8t			key3ProtectTime = 0;
63:               u8t			keyCancelTime = 0;
64:               u8t			preZero = 0;		//记录灯亮了几个
65:               
66:               
67:               void initTM1650();
68:               unsigned int  Read_ADC(unsigned char  ADCchannel,unsigned char  ADCLDORef);
69:               void checkChrgAD();
70:               void gotoSleep();
71:               void checkTempAD();
72:               void tm1650cmd(u8t digAddr,u8t seg_data);
73:               u8t TM1650_read();
74:               
75:               //系统初始化
76:               void Init_System()
  0640    0000    NOP
  0641    0064    CLRWDT
77:               {
78:               	asm("nop");
79:               	asm("clrwdt");
80:               	INTCON = 0;				//禁止中断
  0642    018B    CLR	0xB
81:               	OSCCON = 0X71;			//配置振荡为8M
  0643    3071    LDIA	0x71
  0644    1683    SETB	0x3,5
  0645    1303    CLRB	0x3,6
  0646    0088    LD	0x8,A
82:               	OPTION_REG = 0;
  0647    0181    CLR	0x1
83:               	SWDTEN = 1;
  0648    1488    SETB	0x8,1
  0649    0064    CLRWDT
84:               	CLRWDT();
85:               	
86:               	//延时等待电源电压稳定
87:               	//DelayXms(200);
88:               	TRISA = 0x22;
  064A    3022    LDIA	0x22
  064B    1683    SETB	0x3,5
  064C    1303    CLRB	0x3,6
89:               	PORTA = 0;
90:               	TRISB = 0x18;
  064D    27CD    CALL	0x7CD
  064E    118A    CLRB	0xA,3
91:               	PORTB = 0;
  064F    1283    CLRB	0x3,5
  0650    0186    CLR	0x6
92:               	WPUB = 0x00;
  0651    0188    CLR	0x8
93:               	TRISC = 0;
  0652    1683    SETB	0x3,5
  0653    1703    SETB	0x3,6
  0654    0186    CLR	0x6
94:               	PORTC = 0;
  0655    0185    CLR	0x5
95:               	WPUC = 0x00;
  0656    1283    CLRB	0x3,5
  0657    0195    CLR	0x15
96:               	ANSEL0 = 0x01;
  0658    3001    LDIA	0x1
  0659    0090    LD	0x10,A
97:               	ANSEL1 = 0x04;
  065A    3004    LDIA	0x4
  065B    0091    LD	0x11,A
98:               	ANSEL2 = 0x01;
  065C    3001    LDIA	0x1
  065D    0092    LD	0x12,A
99:               
100:              	PIE1 = 2;
  065E    3002    LDIA	0x2
101:              	PR2 = 250;				//8M下将TMR2设置为125us中断
  065F    27E0    CALL	0x7E0
102:              	T2CON = 4;				//使能定时器2
  0660    3004    LDIA	0x4
  0661    1283    CLRB	0x3,5
  0662    0092    LD	0x12,A
103:              
104:              	INTCON = 0XC0;			//使能中断
  0663    30C0    LDIA	0xC0
  0664    008B    LD	0xB,A
105:              	ADCON0 = 0XC1;
  0665    30C1    LDIA	0xC1
  0666    1683    SETB	0x3,5
  0667    009D    LD	0x1D,A
106:              	ADON = 1;
  0668    141D    SETB	0x1D,0
  0669    0008    RET
107:              }
108:              
109:              
110:              /**********************************************************
111:              函数名称：Refurbish_Sfr
112:              函数功能：刷新一些特殊功能寄存器
113:              入口参数：无
114:              出口参数：无
115:              备    注：每隔一定时间刷新一次SFR可增强抗干扰能力
116:              **********************************************************/
117:              void Refurbish_Sfr() {
118:              	//刷新中断相关控制寄存器
119:              	PIE1 = 2;
  060E    3002    LDIA	0x2
  060F    1283    CLRB	0x3,5
120:              	PR2 = 250;
  0610    27E0    CALL	0x7E0
  0611    118A    CLRB	0xA,3
121:              	INTCON = 0XC0;
  0612    30C0    LDIA	0xC0
  0613    008B    LD	0xB,A
122:              	if (4 != T2CON)
  0614    3004    LDIA	0x4
  0615    1283    CLRB	0x3,5
  0616    0612    XORA	0x12
  0617    1903    SZB	0x3,2
  0618    0008    RET
123:              		T2CON = 4;
  0619    3004    LDIA	0x4
  061A    0092    LD	0x12,A
  061B    0008    RET
124:              }
125:              
126:              
127:              void KeyServer() {
128:              	if(key1ProtectTime > 0)
  0DB7    084D    LD	A,0x4D
  0DB8    1D03    SNZB	0x3,2
129:              	{
130:              		key1ProtectTime--;
  0DB9    03CD    DECR	0x4D
131:              	}
132:              	if(key2ProtectTime > 0)
  0DBA    084C    LD	A,0x4C
  0DBB    1D03    SNZB	0x3,2
133:              	{
134:              		key2ProtectTime--;
  0DBC    03CC    DECR	0x4C
135:              	}
136:              	if(key3ProtectTime > 0)
  0DBD    084B    LD	A,0x4B
  0DBE    1D03    SNZB	0x3,2
137:              	{
138:              		key3ProtectTime--;
  0DBF    03CB    DECR	0x4B
139:              	}
140:              	static unsigned char KeyOldFlag = 0;
141:              	if (KeyFlag[0]) {
142:              			NoTouchTime = 0;
  0DC0    0842    LD	A,0x42
  0DC1    1903    SZB	0x3,2
  0DC2    2E60    JP	0x660
143:              			sleepTime = 0;
  0DC3    01AE    CLR	0x2E
  0DC4    01AF    CLR	0x2F
144:              			if ((KeyFlag[0] & 0x2) && key2ProtectTime == 0 && key3ProtectTime == 0) {
  0DC5    1CC2    SNZB	0x42,1
  0DC6    2DE7    JP	0x5E7
  0DC7    084C    LD	A,0x4C
  0DC8    1D03    SNZB	0x3,2
  0DC9    2DE7    JP	0x5E7
  0DCA    084B    LD	A,0x4B
  0DCB    1D03    SNZB	0x3,2
  0DCC    2DE7    JP	0x5E7
145:              				//KEY1被按下	+
146:              				key1ProtectTime = 5;
  0DCD    3005    LDIA	0x5
  0DCE    00CD    LD	0x4D,A
147:              				if(++keyCount1 > 45)
  0DCF    0ABE    INCR	0x3E
  0DD0    1903    SZB	0x3,2
  0DD1    0ABF    INCR	0x3F
  0DD2    3000    LDIA	0x0
  0DD3    023F    SUBA	0x3F
  0DD4    302E    LDIA	0x2E
  0DD5    1903    SZB	0x3,2
  0DD6    023E    SUBA	0x3E
  0DD7    1C03    SNZB	0x3,0
  0DD8    2DE7    JP	0x5E7
148:              				{
149:              					keyCount1 = 45;
  0DD9    302D    LDIA	0x2D
  0DDA    00BE    LD	0x3E,A
  0DDB    3002    LDIA	0x2
  0DDC    01BF    CLR	0x3F
150:              					if(workStep > 1 && ++count50 > 25)
  0DDD    027B    SUBA	0x7B
  0DDE    1C03    SNZB	0x3,0
  0DDF    2DE7    JP	0x5E7
  0DE0    301A    LDIA	0x1A
  0DE1    0AD8    INCR	0x58
  0DE2    0258    SUBA	0x58
  0DE3    1C03    SNZB	0x3,0
  0DE4    2DE7    JP	0x5E7
151:              					{
152:              						workStep--;
  0DE5    03FB    DECR	0x7B
153:              						count50 = 0;
  0DE6    01D8    CLR	0x58
154:              					}
155:              				}
156:              			}
157:              			if ((KeyFlag[0] & 0x1) && key1ProtectTime == 0 && key3ProtectTime == 0) {
  0DE7    1C42    SNZB	0x42,0
  0DE8    2E10    JP	0x610
  0DE9    084D    LD	A,0x4D
  0DEA    1D03    SNZB	0x3,2
  0DEB    2E10    JP	0x610
  0DEC    084B    LD	A,0x4B
  0DED    1D03    SNZB	0x3,2
  0DEE    2E10    JP	0x610
158:              				//KEY2被按下		1
159:              				key2ProtectTime = 5;
  0DEF    3005    LDIA	0x5
  0DF0    00CC    LD	0x4C,A
160:              				if(++keyCount2 > 45)
  0DF1    0ABC    INCR	0x3C
  0DF2    1903    SZB	0x3,2
  0DF3    0ABD    INCR	0x3D
  0DF4    3000    LDIA	0x0
  0DF5    023D    SUBA	0x3D
  0DF6    302E    LDIA	0x2E
  0DF7    1903    SZB	0x3,2
  0DF8    023C    SUBA	0x3C
  0DF9    1C03    SNZB	0x3,0
  0DFA    2E10    JP	0x610
161:              				{
162:              					keyCount2 = 45;
  0DFB    302D    LDIA	0x2D
  0DFC    00BC    LD	0x3C,A
  0DFD    3014    LDIA	0x14
  0DFE    01BD    CLR	0x3D
163:              					if(workStep < 20 && (workStep > 0 || ledLightTime > 0) && ++count50 > 25)
  0DFF    027B    SUBA	0x7B
  0E00    1803    SZB	0x3,0
  0E01    2E10    JP	0x610
  0E02    087B    LD	A,0x7B
  0E03    1D03    SNZB	0x3,2
  0E04    2E09    JP	0x609
  0E05    0838    LD	A,0x38
  0E06    0439    ORA	0x39
  0E07    1903    SZB	0x3,2
  0E08    2E10    JP	0x610
  0E09    301A    LDIA	0x1A
  0E0A    0AD8    INCR	0x58
  0E0B    0258    SUBA	0x58
  0E0C    1C03    SNZB	0x3,0
  0E0D    2E10    JP	0x610
164:              					{
165:              						workStep++;
  0E0E    0AFB    INCR	0x7B
166:              						count50 = 0;
  0E0F    01D8    CLR	0x58
167:              					}
168:              				}
169:              			}
170:              			if ((KeyFlag[0] & 0x4) && key2ProtectTime == 0 && key1ProtectTime == 0) {
  0E10    1D42    SNZB	0x42,2
  0E11    2E5E    JP	0x65E
  0E12    084C    LD	A,0x4C
  0E13    1D03    SNZB	0x3,2
  0E14    2E5E    JP	0x65E
  0E15    084D    LD	A,0x4D
  0E16    1D03    SNZB	0x3,2
  0E17    2E5E    JP	0x65E
171:              				//KEY3被按下		开关机
172:              				key3ProtectTime = 5;
  0E18    3005    LDIA	0x5
  0E19    00CB    LD	0x4B,A
173:              				if(++keyCount3 > 200)
  0E1A    0ABA    INCR	0x3A
  0E1B    1903    SZB	0x3,2
  0E1C    0ABB    INCR	0x3B
  0E1D    3000    LDIA	0x0
  0E1E    023B    SUBA	0x3B
  0E1F    30C9    LDIA	0xC9
  0E20    1903    SZB	0x3,2
  0E21    023A    SUBA	0x3A
  0E22    1C03    SNZB	0x3,0
  0E23    2E4D    JP	0x64D
174:              				{
175:              					keyCount3 = 200;
  0E24    30C8    LDIA	0xC8
  0E25    00BA    LD	0x3A,A
  0E26    01BB    CLR	0x3B
176:              					if(longKeyFalg == 0)
  0E27    0863    LD	A,0x63
  0E28    1D03    SNZB	0x3,2
  0E29    2E43    JP	0x643
177:              					{
178:              						longKeyFalg = 1;
  0E2A    01E3    CLR	0x63
  0E2B    0AE3    INCR	0x63
179:              						if(workStep > 0 || ledLightTime > 0)
  0E2C    087B    LD	A,0x7B
  0E2D    1D03    SNZB	0x3,2
  0E2E    2E33    JP	0x633
  0E2F    0838    LD	A,0x38
  0E30    0439    ORA	0x39
  0E31    1903    SZB	0x3,2
  0E32    2E39    JP	0x639
  0E33    300C    LDIA	0xC
180:              						{
181:              							workStep = 0;
  0E34    01FB    CLR	0x7B
182:              							zeroStep = 12;
  0E35    00FA    LD	0x7A,A
183:              							ledLightTime = 0;
  0E36    01B8    CLR	0x38
  0E37    01B9    CLR	0x39
184:              						}
  0E38    2E4D    JP	0x64D
185:              						else if(lowBatFlag == 0)
  0E39    0851    LD	A,0x51
  0E3A    1D03    SNZB	0x3,2
  0E3B    2E4D    JP	0x64D
  0E3C    302C    LDIA	0x2C
186:              						{
187:              							workStep = 0;
  0E3D    01FB    CLR	0x7B
188:              							zeroStep = 0;
  0E3E    01FA    CLR	0x7A
189:              							ledLightTime = 300;
  0E3F    00B8    LD	0x38,A
  0E40    3001    LDIA	0x1
  0E41    00B9    LD	0x39,A
190:              							if(lowBatLockFlag)
191:              							{
192:              								shanShuoTime = 250;
  0E42    2E4D    JP	0x64D
193:              							}
194:              						}
195:              					}
196:              					else if(zeroStep > 0 && ++count64ms >= 12)
  0E43    087A    LD	A,0x7A
  0E44    1903    SZB	0x3,2
  0E45    2E4D    JP	0x64D
  0E46    300C    LDIA	0xC
  0E47    0ADD    INCR	0x5D
  0E48    025D    SUBA	0x5D
  0E49    1C03    SNZB	0x3,0
  0E4A    2E4D    JP	0x64D
197:              					{
198:              						zeroStep--;
  0E4B    03FA    DECR	0x7A
199:              						count64ms = 0;
  0E4C    01DD    CLR	0x5D
200:              					}
201:              				}
202:              				if(lowBatFlag == 0 && ledLightTime == 0 && longKeyFalg == 0 &&  keyCount3 % 16 == 0)
  0E4D    0851    LD	A,0x51
  0E4E    1D03    SNZB	0x3,2
  0E4F    2E5E    JP	0x65E
  0E50    0838    LD	A,0x38
  0E51    0439    ORA	0x39
  0E52    1D03    SNZB	0x3,2
  0E53    2E5E    JP	0x65E
  0E54    0863    LD	A,0x63
  0E55    1D03    SNZB	0x3,2
  0E56    2E5E    JP	0x65E
  0E57    083A    LD	A,0x3A
  0E58    390F    ANDIA	0xF
  0E59    1D03    SNZB	0x3,2
  0E5A    2E5E    JP	0x65E
203:              				{
204:              					zeroStep++;
  0E5B    0AFA    INCR	0x7A
205:              					preZero = zeroStep;
  0E5C    087A    LD	A,0x7A
  0E5D    00C9    LD	0x49,A
206:              				}
207:              			}
208:              			keyCancelTime = 0;
  0E5E    01CA    CLR	0x4A
209:              	} 
  0E5F    0008    RET
210:              	else  
211:              	{
212:              		if(++keyCancelTime > 5)
  0E60    3006    LDIA	0x6
  0E61    0ACA    INCR	0x4A
  0E62    024A    SUBA	0x4A
  0E63    1C03    SNZB	0x3,0
  0E64    2E89    JP	0x689
  0E65    3000    LDIA	0x0
213:              		{
214:              			keyCancelTime = 0;
  0E66    01CA    CLR	0x4A
215:              			if(keyCount1 > 5 && workStep > 1)
  0E67    023F    SUBA	0x3F
  0E68    3006    LDIA	0x6
  0E69    1903    SZB	0x3,2
  0E6A    023E    SUBA	0x3E
  0E6B    1C03    SNZB	0x3,0
  0E6C    2E72    JP	0x672
  0E6D    3002    LDIA	0x2
  0E6E    027B    SUBA	0x7B
  0E6F    1C03    SNZB	0x3,0
  0E70    2E72    JP	0x672
216:              			{
217:              				workStep--;
  0E71    03FB    DECR	0x7B
  0E72    3000    LDIA	0x0
218:              			}
219:              			keyCount1 = 0;
  0E73    01BE    CLR	0x3E
  0E74    01BF    CLR	0x3F
220:              			
221:              			if(keyCount2 > 5 && workStep < 20 && (workStep > 0 || ledLightTime > 0))
  0E75    023D    SUBA	0x3D
  0E76    3006    LDIA	0x6
  0E77    1903    SZB	0x3,2
  0E78    023C    SUBA	0x3C
  0E79    1C03    SNZB	0x3,0
  0E7A    2E87    JP	0x687
  0E7B    3014    LDIA	0x14
  0E7C    027B    SUBA	0x7B
  0E7D    1803    SZB	0x3,0
  0E7E    2E87    JP	0x687
  0E7F    087B    LD	A,0x7B
  0E80    1D03    SNZB	0x3,2
  0E81    2E86    JP	0x686
  0E82    0838    LD	A,0x38
  0E83    0439    ORA	0x39
  0E84    1903    SZB	0x3,2
  0E85    2E87    JP	0x687
222:              			{
223:              				workStep++;
  0E86    0AFB    INCR	0x7B
224:              			}
225:              			keyCount2 = 0;
  0E87    01BC    CLR	0x3C
  0E88    01BD    CLR	0x3D
226:              		}
227:              		/*
228:              		if(longKeyFalg == 0 && keyCount3 > 10 && (workStep > 0 || ledLightTime > 0))
229:              		{
230:              			workStep = 0;
231:              		}
232:              		*/
233:              		if(preZero == 1 || preZero == 2)
  0E89    0349    DECA	0x49
  0E8A    1903    SZB	0x3,2
  0E8B    2E90    JP	0x690
  0E8C    3002    LDIA	0x2
  0E8D    0649    XORA	0x49
  0E8E    1D03    SNZB	0x3,2
  0E8F    2E93    JP	0x693
  0E90    3003    LDIA	0x3
234:              		{
235:              			preZero = 0;
  0E91    01C9    CLR	0x49
236:              			zeroStep = 3;
  0E92    00FA    LD	0x7A,A
237:              		}
238:              		longKeyFalg = 0;
  0E93    01E3    CLR	0x63
239:              		keyCount3 = 0;
  0E94    01BA    CLR	0x3A
  0E95    01BB    CLR	0x3B
240:              		if(zeroStep > 0 && ++count64ms >= 12)
  0E96    087A    LD	A,0x7A
  0E97    1903    SZB	0x3,2
  0E98    0008    RET
  0E99    300C    LDIA	0xC
  0E9A    0ADD    INCR	0x5D
  0E9B    025D    SUBA	0x5D
  0E9C    1C03    SNZB	0x3,0
  0E9D    0008    RET
241:              		{
242:              			zeroStep--;
  0E9E    03FA    DECR	0x7A
243:              			count64ms = 0;
  0E9F    01DD    CLR	0x5D
  0EA0    0008    RET
244:              		}
245:              	}
246:              }
247:              
248:              
249:              /******************************************
250:                返回  Adc_Result 
251:                
252:               ADCchannel 为输入AD通道 0-18
253:                           19  检测内部1.2V 
254:              			 20  检测PGA输出
255:               ADCLDORef =1,开启内部LDO 2V 作为ADC 参考
256:               ADCLDORef =2,开启内部LDO 2.4V 作为ADC 参考
257:               ADCLDORef =0,VDD 作为ADC 参考
258:              *****************************************/
259:              unsigned int  Read_ADC(unsigned char  ADCchannel,unsigned char  ADCLDORef)
  0FB7    00F8    LD	0x78,A
260:              {
261:              	unsigned int	Adc_Result;
262:              	unsigned int	Adc_ResultSum = 0;
263:              	unsigned char i=200;
  0FB8    30C8    LDIA	0xC8
  0FB9    00F7    LD	0x77,A
264:              
265:              		if(ADCLDORef==0)
  0FBA    0872    LD	A,0x72
  0FBB    1D03    SNZB	0x3,2
  0FBC    2FC0    JP	0x7C0
266:              		{
267:              			ADCON1 = 0B00000000;
  0FBD    1683    SETB	0x3,5
  0FBE    019C    CLR	0x1C
268:              		}
  0FBF    2FC7    JP	0x7C7
269:              		else if(ADCLDORef==1)
  0FC0    0B72    SZDECA	0x72
  0FC1    2FC4    JP	0x7C4
270:              		{
271:              			ADCON1 = 0B00000101;
  0FC2    3005    LDIA	0x5
  0FC3    2FC5    JP	0x7C5
272:              		}
273:              		else
274:              		{
275:              			ADCON1 = 0B00000110;	
  0FC4    3006    LDIA	0x6
  0FC5    1683    SETB	0x3,5
  0FC6    009C    LD	0x1C,A
276:              		}
277:              		
278:              		CHS4 = 0;	
  0FC7    131C    CLRB	0x1C,6
279:              		if(ADCchannel >=16)
  0FC8    3010    LDIA	0x10
  0FC9    0278    SUBA	0x78
  0FCA    1C03    SNZB	0x3,0
  0FCB    2FCF    JP	0x7CF
280:              		{
281:              			ADCchannel -= 16;	
  0FCC    3010    LDIA	0x10
  0FCD    02F8    SUBR	0x78
282:              			CHS4 = 1;	
  0FCE    171C    SETB	0x1C,6
283:              		}
284:              		
285:              		ADCON0 &= 0b11000011;
  0FCF    30C3    LDIA	0xC3
  0FD0    059D    ANDR	0x1D
286:              		ADCON0 |= ADCchannel<<2; 
  0FD1    0878    LD	A,0x78
  0FD2    00F4    LD	0x74,A
  0FD3    3001    LDIA	0x1
  0FD4    1003    CLRB	0x3,0
  0FD5    0DF4    RLCR	0x74
  0FD6    3EFF    ADDIA	0xFF
  0FD7    1003    CLRB	0x3,0
  0FD8    1D03    SNZB	0x3,2
  0FD9    2FD5    JP	0x7D5
  0FDA    0D74    RLCA	0x74
  0FDB    049D    ORR	0x1D
  0FDC    0000    NOP
287:              		asm("nop");
288:              		GODONE = 1;
  0FDD    1683    SETB	0x3,5
  0FDE    1303    CLRB	0x3,6
  0FDF    149D    SETB	0x1D,1
289:              		while(GODONE==1&&i>0)
  0FE0    2FE6    JP	0x7E6
  0FE1    0877    LD	A,0x77
  0FE2    1903    SZB	0x3,2
  0FE3    2FEA    JP	0x7EA
290:              		{
291:              			i--;
  0FE4    03F7    DECR	0x77
  0FE5    0000    NOP
  0FE6    1683    SETB	0x3,5
  0FE7    1303    CLRB	0x3,6
  0FE8    189D    SZB	0x1D,1
  0FE9    2FE1    JP	0x7E1
292:              			asm("nop");
293:              		}
294:              		Adc_Result = ADRESH<<4;
  0FEA    081F    LD	A,0x1F
  0FEB    00F5    LD	0x75,A
  0FEC    30F0    LDIA	0xF0
  0FED    01F6    CLR	0x76
  0FEE    0EF5    SWAPR	0x75
  0FEF    0EF6    SWAPR	0x76
  0FF0    05F6    ANDR	0x76
  0FF1    0875    LD	A,0x75
  0FF2    390F    ANDIA	0xF
  0FF3    04F6    ORR	0x76
  0FF4    30F0    LDIA	0xF0
  0FF5    05F5    ANDR	0x75
295:              		Adc_Result += ADRESL>>4;
  0FF6    0E1E    SWAPA	0x1E
  0FF7    390F    ANDIA	0xF
  0FF8    07F5    ADDR	0x75
  0FF9    1803    SZB	0x3,0
  0FFA    0AF6    INCR	0x76
296:              	return Adc_Result;
  0FFB    0876    LD	A,0x76
  0FFC    00F3    LD	0x73,A
  0FFD    0875    LD	A,0x75
  0FFE    00F2    LD	0x72,A
297:              	
298:              }
299:              
300:              void checkChrgAD()
  0ECE    3010    LDIA	0x10
301:              {
302:              	chrgResult = Read_ADC(16,1);
  0ECF    01F2    CLR	0x72
  0ED0    0AF2    INCR	0x72
  0ED1    27B7    CALL	0x7B7
  0ED2    0873    LD	A,0x73
  0ED3    1283    CLRB	0x3,5
  0ED4    00B5    LD	0x35,A
  0ED5    0872    LD	A,0x72
  0ED6    00B4    LD	0x34,A
  0ED7    0008    RET
303:              }
304:              
305:              void checkTempAD()
306:              {
307:              	PORTA |= 0x01;
  0F9A    1283    CLRB	0x3,5
  0F9B    1405    SETB	0x5,0
  0F9C    3001    LDIA	0x1
308:              	tempResult = Read_ADC(1,1);
  0F9D    01F2    CLR	0x72
  0F9E    0AF2    INCR	0x72
  0F9F    27B7    CALL	0x7B7
  0FA0    158A    SETB	0xA,3
  0FA1    0873    LD	A,0x73
  0FA2    1283    CLRB	0x3,5
  0FA3    00AD    LD	0x2D,A
  0FA4    0872    LD	A,0x72
  0FA5    00AC    LD	0x2C,A
309:              	if(tempResult < 130)
  0FA6    3000    LDIA	0x0
  0FA7    022D    SUBA	0x2D
  0FA8    3082    LDIA	0x82
  0FA9    1903    SZB	0x3,2
  0FAA    022C    SUBA	0x2C
  0FAB    1803    SZB	0x3,0
  0FAC    2FB5    JP	0x7B5
310:              	{
311:              		//高于65度关机
312:              		if(++checkTempTime > 200)
  0FAD    30C9    LDIA	0xC9
  0FAE    0ACF    INCR	0x4F
  0FAF    024F    SUBA	0x4F
  0FB0    1C03    SNZB	0x3,0
  0FB1    0008    RET
313:              		{
314:              			checkTempTime = 0;
  0FB2    01CF    CLR	0x4F
315:              			workStep = 0;
  0FB3    01FB    CLR	0x7B
  0FB4    0008    RET
316:              			
317:              		}
318:              	}
319:              	else
320:              	{
321:              		checkTempTime = 0;
  0FB5    01CF    CLR	0x4F
  0FB6    0008    RET
322:              	}
323:              }
324:              
325:              void checkBat()
  0ED8    300A    LDIA	0xA
326:              {
327:              	batResult = Read_ADC(10,1);
  0ED9    01F2    CLR	0x72
  0EDA    0AF2    INCR	0x72
  0EDB    27B7    CALL	0x7B7
  0EDC    158A    SETB	0xA,3
  0EDD    0873    LD	A,0x73
  0EDE    1283    CLRB	0x3,5
  0EDF    00B7    LD	0x37,A
  0EE0    0872    LD	A,0x72
  0EE1    00B6    LD	0x36,A
328:              	if(batResult < 1118)
  0EE2    3004    LDIA	0x4
  0EE3    0237    SUBA	0x37
  0EE4    305E    LDIA	0x5E
  0EE5    1903    SZB	0x3,2
  0EE6    0236    SUBA	0x36
  0EE7    1803    SZB	0x3,0
  0EE8    2EFB    JP	0x6FB
329:              	{
330:              		batValue = 0;
  0EE9    01DA    CLR	0x5A
331:              		if(workStep > 0 && ++lowBatTime > 200)
  0EEA    087B    LD	A,0x7B
  0EEB    1903    SZB	0x3,2
  0EEC    0008    RET
  0EED    30C9    LDIA	0xC9
  0EEE    0AD0    INCR	0x50
  0EEF    0250    SUBA	0x50
  0EF0    1C03    SNZB	0x3,0
  0EF1    0008    RET
  0EF2    300C    LDIA	0xC
332:              		{
333:              			lowBatTime = 0;
  0EF3    01D0    CLR	0x50
334:              			lowBatFlag = 1;
  0EF4    01D1    CLR	0x51
  0EF5    0AD1    INCR	0x51
335:              			workStep = 0;
  0EF6    01FB    CLR	0x7B
336:              			zeroStep = 12;
  0EF7    00FA    LD	0x7A,A
337:              			ledLightTime = 0;
  0EF8    01B8    CLR	0x38
  0EF9    01B9    CLR	0x39
  0EFA    0008    RET
  0EFB    3005    LDIA	0x5
338:              		}
339:              	}	
340:              	else
341:              	{
342:              		lowBatTime = 0;
  0EFC    01D0    CLR	0x50
343:              		if(batResult >= 1376)
  0EFD    0237    SUBA	0x37
  0EFE    3060    LDIA	0x60
  0EFF    1903    SZB	0x3,2
  0F00    0236    SUBA	0x36
344:              		{
345:              			batValue = ((batResult - 1376) /2) + 16;
  0F01    0836    LD	A,0x36
  0F02    1C03    SNZB	0x3,0
  0F03    2F11    JP	0x711
  0F04    3EA0    ADDIA	0xA0
  0F05    00E5    LD	0x65,A
  0F06    0837    LD	A,0x37
  0F07    1803    SZB	0x3,0
  0F08    3E01    ADDIA	0x1
  0F09    3EFA    ADDIA	0xFA
  0F0A    00E6    LD	0x66,A
  0F0B    1003    CLRB	0x3,0
  0F0C    0CE6    RRCR	0x66
  0F0D    0CE5    RRCR	0x65
  0F0E    0865    LD	A,0x65
  0F0F    3E10    ADDIA	0x10
  0F10    2F20    JP	0x720
346:              		}
  0F11    3EA2    ADDIA	0xA2
  0F12    00E5    LD	0x65,A
  0F13    0837    LD	A,0x37
  0F14    1803    SZB	0x3,0
  0F15    3E01    ADDIA	0x1
  0F16    3EFB    ADDIA	0xFB
  0F17    00E6    LD	0x66,A
  0F18    3004    LDIA	0x4
  0F19    1003    CLRB	0x3,0
  0F1A    0CE6    RRCR	0x66
  0F1B    0CE5    RRCR	0x65
  0F1C    3EFF    ADDIA	0xFF
  0F1D    1D03    SNZB	0x3,2
  0F1E    2F19    JP	0x719
  0F1F    0865    LD	A,0x65
  0F20    00DA    LD	0x5A,A
347:              		else
348:              		{
349:              			batValue = (batResult - 1118) / 16;
350:              		}
351:              		
352:              		if(batValue > 99)
  0F21    3064    LDIA	0x64
  0F22    025A    SUBA	0x5A
  0F23    1C03    SNZB	0x3,0
  0F24    0008    RET
353:              	   		batValue = 99;
  0F25    3063    LDIA	0x63
  0F26    00DA    LD	0x5A,A
  0F27    0008    RET
354:              	}
355:              }
356:              
357:              
358:              /***********************************************************
359:              中断服务函数
360:              ***********************************************************/
361:              void interrupt Isr_Timer()
362:              {
363:              	if(TMR2IF)				//若只使能了一个中断源,可以略去判断
  0D6D    1283    CLRB	0x3,5
  0D6E    1303    CLRB	0x3,6
  0D6F    1C8C    SNZB	0xC,1
  0D70    2D7A    JP	0x57A
364:              	{
365:              		TMR2IF = 0;
  0D71    108C    CLRB	0xC,1
366:              		if(++MainTime >= 32)	//需根据你选择的触摸路数和触摸电容选择扫描一次按键的时间
  0D72    3020    LDIA	0x20
  0D73    0AE4    INCR	0x64
  0D74    0264    SUBA	0x64
  0D75    1C03    SNZB	0x3,0
  0D76    2D7B    JP	0x57B
367:              		{						//一般103电容，8路触摸，8M主频检测时间约4ms，故扫描一次的时间可选5ms
368:              			MainTime = 0;
  0D77    01E4    CLR	0x64
369:              			B_MainLoop = 1;
  0D78    1779    SETB	0x79,6
  0D79    2D7B    JP	0x57B
370:              		}
371:              	}
372:              	else
373:              	{
374:              		PIR1 = 0;
  0D7A    018C    CLR	0xC
375:              	}
376:              	
377:              	if(RACIF)
  0D7B    1703    SETB	0x3,6
  0D7C    1C87    SNZB	0x7,1
  0D7D    2D81    JP	0x581
378:              	{
379:              		RACIF = 0;			//清中断标志
  0D7E    1087    CLRB	0x7,1
380:              		PORTA;				//如不关闭PB中断，则需再读取一遍PB，否则会频繁进入中断
  0D7F    1303    CLRB	0x3,6
  0D80    0805    LD	A,0x5
381:              		//Init_System();
382:              	}
383:              	
384:              
385:              	if(RCCIF)
  0D81    1703    SETB	0x3,6
  0D82    1D07    SNZB	0x7,2
  0D83    2D87    JP	0x587
386:              	{
387:              		RCCIF = 0;			//清中断标志
  0D84    1107    CLRB	0x7,2
388:              		PORTC;				//如不关闭PB中断，则需再读取一遍PB，否则会频繁进入中断
  0D85    1683    SETB	0x3,5
  0D86    0805    LD	A,0x5
  0D87    0871    LD	A,0x71
  0D88    008A    LD	0xA,A
  0D89    0E70    SWAPA	0x70
  0D8A    0083    LD	0x3,A
  0D8B    0EFE    SWAPR	0x7E
  0D8C    0E7E    SWAPA	0x7E
  0D8D    0009    RETI
389:              		//Init_System();
390:              	}
391:              }
392:              
393:              void WorkSleep()
394:              {
395:              
396:              #if (0 != C_KEY_WAKEUP)
397:              	static unsigned char time;
398:              	
399:              	if(B_OnOff)time = 0;
400:              	
401:              	//if(++time >= 125)
402:              	//{
403:              
404:              		time = 0;
405:              		INTCON = 0;			//;关断ADC模块及中断使能；
  0492    018B    CLR	0xB
406:              		PIE1 = 0;
  0493    018D    CLR	0xD
407:              		PIE2 = 0;
  0494    1703    SETB	0x3,6
  0495    0188    CLR	0x8
408:              		PIR1 = 0;
  0496    1303    CLRB	0x3,6
  0497    018C    CLR	0xC
409:              		PIR2 = 0;
  0498    1703    SETB	0x3,6
  0499    0187    CLR	0x7
410:              		T2CON = 0;
  049A    1303    CLRB	0x3,6
  049B    0192    CLR	0x12
411:              		ADCON1 = 0;
  049C    1683    SETB	0x3,5
  049D    019C    CLR	0x1C
412:              		SWDTEN = 0;
  049E    1088    CLRB	0x8,1
  049F    0064    CLRWDT
413:              		CLRWDT();
414:              		//进入休眠前关掉所有功能模块,以降低休眠电流
415:              		ADCON0 = 0;
  04A0    1683    SETB	0x3,5
  04A1    1303    CLRB	0x3,6
  04A2    019D    CLR	0x1D
416:              	
417:              		//进入休眠前,必须固定口线电平,这儿全部输出低电平,并关闭所有上拉电阻
418:              		TRISA = 0x22;
  04A3    3022    LDIA	0x22
419:              		PORTA = 0;
420:              		TRISB = 0x18;
  04A4    27CD    CALL	0x7CD
  04A5    118A    CLRB	0xA,3
421:              		TRISC = 0x00;
  04A6    1703    SETB	0x3,6
  04A7    0186    CLR	0x6
422:              		PORTC = 0x01;
  04A8    3001    LDIA	0x1
  04A9    0085    LD	0x5,A
423:              		PORTB = 0x80;
  04AA    3080    LDIA	0x80
  04AB    1283    CLRB	0x3,5
  04AC    1303    CLRB	0x3,6
  04AD    0086    LD	0x6,A
424:              		RACIF = 0;
  04AE    1703    SETB	0x3,6
  04AF    1087    CLRB	0x7,1
425:              		IOCA = 0x20;				//允许RA5
  04B0    3020    LDIA	0x20
  04B1    1683    SETB	0x3,5
  04B2    0088    LD	0x8,A
426:              		RACIE = 1;
  04B3    1283    CLRB	0x3,5
  04B4    1488    SETB	0x8,1
427:              		PORTA;
  04B5    1303    CLRB	0x3,6
  04B6    0805    LD	A,0x5
428:              /****如需要PC口中断唤醒，使能下列程序并按需修改****
429:              			TRISC0 =1;	//输入
430:              			WPUC0 = 1;	//上拉			
431:              			RCCIF = 0;	//清标志
432:              			RCCIE = 1;	//允许PC口电平变化中断
433:              			IOCC0 = 1;	//允许PC0电平变化中断
434:              			PEIE = 1;	//允许外设中断
435:              			PORTC;		//读一次PC口			
436:              **********************************/	
437:              
438:              		//进入休眠模式,触摸允许唤醒的按键后恢复正常工作
439:              		SystemEnterSleep();
  04B7    24CF    CALL	0x4CF
  04B8    118A    CLRB	0xA,3
  04B9    0000    NOP
  04BA    0000    NOP
  04BB    0000    NOP
  04BC    0000    NOP
  04BD    0000    NOP
  04BE    0000    NOP
440:              		nop;
441:              		if(RACIF) 
  04BF    1283    CLRB	0x3,5
  04C0    1703    SETB	0x3,6
  04C1    1C87    SNZB	0x7,1
  04C2    2CC6    JP	0x4C6
442:              		{
443:              			RACIF = 0;
  04C3    1087    CLRB	0x7,1
444:              			PORTA;
  04C4    1303    CLRB	0x3,6
  04C5    0805    LD	A,0x5
445:              		}
446:              		if(RCCIF) 
  04C6    1703    SETB	0x3,6
  04C7    1D07    SNZB	0x7,2
  04C8    2CCC    JP	0x4CC
447:              		{
448:              			RCCIF = 0;
  04C9    1107    CLRB	0x7,2
449:              			PORTC;
  04CA    1683    SETB	0x3,5
  04CB    0805    LD	A,0x5
450:              		}
451:              		//休眠被唤醒,重新配置中断等SFR,使系统进入正常工作
452:              		Refurbish_Sfr();
  04CC    260E    CALL	0x60E
  04CD    118A    CLRB	0xA,3
453:              		Init_System();
  04CE    2E40    JP	0x640
454:              	//}
455:              #endif
456:              }
457:              
458:              
459:              
460:              /************ START信号*******************************/
461:              void TM1650_START()
462:              {
463:              	SCL=1;
464:              	SDA=1;
  047D    27D4    CALL	0x7D4
  047E    1786    SETB	0x6,7
  047F    0000    NOP
  0480    0000    NOP
  0481    0000    NOP
  0482    0000    NOP
  0483    0000    NOP
  0484    0000    NOP
465:              	nop;
466:              	SDA=0;
  0485    1283    CLRB	0x3,5
  0486    1303    CLRB	0x3,6
  0487    1386    CLRB	0x6,7
  0488    0000    NOP
  0489    0000    NOP
  048A    0000    NOP
  048B    0000    NOP
  048C    0000    NOP
  048D    0000    NOP
467:              	nop;
468:              	SCL=0;
  048E    1683    SETB	0x3,5
  048F    1703    SETB	0x3,6
  0490    1005    CLRB	0x5,0
  0491    0008    RET
469:              }
470:              
471:              /******************** STOP信号************************/
472:              void TM1650_STOP()
473:              {
474:              	SDA=0;
  066A    1283    CLRB	0x3,5
  066B    1303    CLRB	0x3,6
  066C    1386    CLRB	0x6,7
  066D    0000    NOP
  066E    0000    NOP
  066F    0000    NOP
  0670    0000    NOP
  0671    0000    NOP
  0672    0000    NOP
475:              	nop;
476:              	SCL=1;
  0673    1683    SETB	0x3,5
  0674    1703    SETB	0x3,6
  0675    1405    SETB	0x5,0
  0676    0000    NOP
  0677    0000    NOP
  0678    0000    NOP
  0679    0000    NOP
  067A    0000    NOP
  067B    0000    NOP
477:              	nop;
478:              	SDA=1;
  067C    1283    CLRB	0x3,5
  067D    1303    CLRB	0x3,6
  067E    1786    SETB	0x6,7
  067F    0000    NOP
  0680    0000    NOP
  0681    0000    NOP
  0682    0000    NOP
  0683    0000    NOP
  0684    0000    NOP
479:              	nop;
480:              	SCL=0;
  0685    1683    SETB	0x3,5
  0686    1703    SETB	0x3,6
  0687    1005    CLRB	0x5,0
481:              	SDA=0;
  0688    1283    CLRB	0x3,5
  0689    1303    CLRB	0x3,6
  068A    1386    CLRB	0x6,7
  068B    0008    RET
482:              }
483:              
484:              
485:              /****************写1个字节给TM1650********************/
486:              void write_8bit( uchar dat)
  03BF    00F2    LD	0x72,A
487:              {
488:               	uchar i;
489:              	SCL=0;
  03C0    1683    SETB	0x3,5
  03C1    1703    SETB	0x3,6
  03C2    1005    CLRB	0x5,0
490:              	for(i=0;i<8;i++)
  03C3    01F3    CLR	0x73
491:              		{
492:              		if(dat&0x80)
  03C4    1FF2    SNZB	0x72,7
  03C5    2BF7    JP	0x3F7
493:              		{
494:              			SDA=1;
  03C6    1283    CLRB	0x3,5
  03C7    1303    CLRB	0x3,6
  03C8    1786    SETB	0x6,7
  03C9    0000    NOP
  03CA    0000    NOP
  03CB    0000    NOP
  03CC    0000    NOP
  03CD    0000    NOP
  03CE    0000    NOP
  03CF    0000    NOP
  03D0    0000    NOP
  03D1    0000    NOP
  03D2    0000    NOP
  03D3    0000    NOP
  03D4    0000    NOP
495:              			nop;
496:              			nop;
497:              			SCL=1;
  03D5    1683    SETB	0x3,5
  03D6    1703    SETB	0x3,6
  03D7    1405    SETB	0x5,0
  03D8    0000    NOP
  03D9    0000    NOP
  03DA    0000    NOP
  03DB    0000    NOP
  03DC    0000    NOP
  03DD    0000    NOP
  03DE    0000    NOP
  03DF    0000    NOP
  03E0    0000    NOP
  03E1    0000    NOP
  03E2    0000    NOP
  03E3    0000    NOP
  03E4    0000    NOP
  03E5    0000    NOP
  03E6    0000    NOP
  03E7    0000    NOP
  03E8    0000    NOP
  03E9    0000    NOP
  03EA    0000    NOP
  03EB    0000    NOP
  03EC    0000    NOP
  03ED    0000    NOP
  03EE    0000    NOP
  03EF    0000    NOP
  03F0    0000    NOP
  03F1    0000    NOP
  03F2    0000    NOP
  03F3    0000    NOP
  03F4    0000    NOP
  03F5    0000    NOP
  03F6    2C27    JP	0x427
498:              			nop;
499:              			nop;
500:              			nop;
501:              			nop;
502:              			nop;
503:              			SCL=0;	 
504:              		}
505:              		else
506:              		{
507:              			SDA=0;
  03F7    1283    CLRB	0x3,5
  03F8    1303    CLRB	0x3,6
  03F9    1386    CLRB	0x6,7
  03FA    0000    NOP
  03FB    0000    NOP
  03FC    0000    NOP
  03FD    0000    NOP
  03FE    0000    NOP
  03FF    0000    NOP
  0400    0000    NOP
  0401    0000    NOP
  0402    0000    NOP
  0403    0000    NOP
  0404    0000    NOP
  0405    0000    NOP
508:              			nop;
509:              			nop;
510:              			SCL=1;
  0406    1683    SETB	0x3,5
  0407    1703    SETB	0x3,6
  0408    1405    SETB	0x5,0
  0409    0000    NOP
  040A    0000    NOP
  040B    0000    NOP
  040C    0000    NOP
  040D    0000    NOP
  040E    0000    NOP
  040F    0000    NOP
  0410    0000    NOP
  0411    0000    NOP
  0412    0000    NOP
  0413    0000    NOP
  0414    0000    NOP
  0415    0000    NOP
  0416    0000    NOP
  0417    0000    NOP
  0418    0000    NOP
  0419    0000    NOP
  041A    0000    NOP
  041B    0000    NOP
  041C    0000    NOP
  041D    0000    NOP
  041E    0000    NOP
  041F    0000    NOP
  0420    0000    NOP
  0421    0000    NOP
  0422    0000    NOP
  0423    0000    NOP
  0424    0000    NOP
  0425    0000    NOP
  0426    0000    NOP
511:              			nop;
512:              			nop;
513:              			nop;
514:              			nop;
515:              			nop;
516:              			SCL=0;
  0427    1683    SETB	0x3,5
  0428    1703    SETB	0x3,6
  0429    1005    CLRB	0x5,0
  042A    3008    LDIA	0x8
517:              		}	
518:              			dat<<=1;	 
  042B    1003    CLRB	0x3,0
  042C    0DF2    RLCR	0x72
  042D    0AF3    INCR	0x73
  042E    0273    SUBA	0x73
  042F    1C03    SNZB	0x3,0
  0430    2BC4    JP	0x3C4
519:              		}
520:              		SDA=1;			//ACK信号
  0431    1283    CLRB	0x3,5
  0432    1303    CLRB	0x3,6
  0433    1786    SETB	0x6,7
  0434    0000    NOP
  0435    0000    NOP
  0436    0000    NOP
  0437    0000    NOP
  0438    0000    NOP
  0439    0000    NOP
  043A    0000    NOP
  043B    0000    NOP
  043C    0000    NOP
  043D    0000    NOP
  043E    0000    NOP
  043F    0000    NOP
  0440    0000    NOP
  0441    0000    NOP
  0442    0000    NOP
  0443    0000    NOP
  0444    0000    NOP
  0445    0000    NOP
  0446    0000    NOP
  0447    0000    NOP
  0448    0000    NOP
  0449    0000    NOP
  044A    0000    NOP
  044B    0000    NOP
521:              		nop;
522:              		nop;
523:              		nop;
524:              		nop;
525:              		SCL=1;
  044C    1683    SETB	0x3,5
  044D    1703    SETB	0x3,6
  044E    1405    SETB	0x5,0
  044F    0000    NOP
  0450    0000    NOP
  0451    0000    NOP
  0452    0000    NOP
  0453    0000    NOP
  0454    0000    NOP
  0455    0000    NOP
  0456    0000    NOP
  0457    0000    NOP
  0458    0000    NOP
  0459    0000    NOP
  045A    0000    NOP
  045B    0000    NOP
  045C    0000    NOP
  045D    0000    NOP
  045E    0000    NOP
  045F    0000    NOP
  0460    0000    NOP
  0461    0000    NOP
  0462    0000    NOP
  0463    0000    NOP
  0464    0000    NOP
  0465    0000    NOP
  0466    0000    NOP
  0467    0000    NOP
  0468    0000    NOP
  0469    0000    NOP
  046A    0000    NOP
  046B    0000    NOP
  046C    0000    NOP
526:              		nop;
527:              		nop;
528:              		nop;
529:              		nop;
530:              		nop;
531:              		SCL=0;
  046D    1683    SETB	0x3,5
  046E    1703    SETB	0x3,6
  046F    1005    CLRB	0x5,0
  0470    0000    NOP
  0471    0000    NOP
  0472    0000    NOP
  0473    0000    NOP
  0474    0000    NOP
  0475    0000    NOP
  0476    0000    NOP
  0477    0000    NOP
  0478    0000    NOP
  0479    0000    NOP
  047A    0000    NOP
  047B    0000    NOP
  047C    0008    RET
532:              		nop;
533:              		nop;	 
534:              }
535:              
536:              
537:              /****读8bit
538:              注意：本程序采用双向IO口，对于需要配置端口特性的MCU需要注意
539:              在发送指令时配置为输出模式;
540:              接受ACK为输入模式；
541:              读数据位输入模式；
542:              **************************/
543:              u8t read_8bit()
544:              {
545:              	uchar dat,i;
546:              	SDA=1;
547:              	dat=0;
548:              	for(i=0;i<8;i++)
549:              	{
550:              	SCL=1;                        //时钟上沿
551:              	nop;
552:              	nop;
553:              	nop;
554:              	dat<<=1;
555:              	if(SDA)
556:              	 dat++;
557:              	SCL=0;
558:              	nop;
559:              	nop;
560:              	nop;
561:              	nop;
562:              	}
563:              	SDA=0;			    //ACK信号
564:              	nop;
565:              	nop;
566:              	nop;
567:              	SCL=1;
568:              	nop;
569:              	nop;
570:              	nop;
571:              	nop;
572:              	SCL=0;
573:              	nop;
574:              	
575:              	return dat ;
576:              } 
577:              
578:              u8t TM1650_read()
579:              {
580:              	u8t key;
581:              	TM1650_START();
582:                  write_8bit(0x48);   //读按键指令	
583:              	key=read_8bit();
584:              	TM1650_STOP();
585:              	return key;
586:              }
587:              
588:              void tm1650cmd(u8t digAddr,u8t seg_data)
  03B5    00F5    LD	0x75,A
589:              {
590:              	TM1650_START();
  03B6    247D    CALL	0x47D
  03B7    118A    CLRB	0xA,3
591:                  write_8bit(digAddr);
  03B8    0875    LD	A,0x75
  03B9    23BF    CALL	0x3BF
  03BA    118A    CLRB	0xA,3
592:                  write_8bit(seg_data);
  03BB    0874    LD	A,0x74
  03BC    23BF    CALL	0x3BF
  03BD    118A    CLRB	0xA,3
593:                  TM1650_STOP();
  03BE    2E6A    JP	0x66A
594:              }
595:              
596:              
597:              void initTM1650()
598:              {
599:                  tm1650cmd(0X48,0x11);
  068C    3011    LDIA	0x11
  068D    00F4    LD	0x74,A
  068E    3048    LDIA	0x48
  068F    23B5    CALL	0x3B5
  0690    118A    CLRB	0xA,3
  0691    0000    NOP
  0692    0000    NOP
  0693    0000    NOP
  0694    0000    NOP
  0695    0000    NOP
  0696    0000    NOP
600:                  nop;
601:              	 tm1650cmd(0X68,0xFF);	//低位圆圈前面4个灯	高位3个按键灯
  0697    30FF    LDIA	0xFF
  0698    00F4    LD	0x74,A
  0699    3068    LDIA	0x68
  069A    23B5    CALL	0x3B5
  069B    118A    CLRB	0xA,3
  069C    0000    NOP
  069D    0000    NOP
  069E    0000    NOP
  069F    0000    NOP
  06A0    0000    NOP
  06A1    0000    NOP
602:              	nop;
603:              	tm1650cmd(0X6A,0xFF);	//十位
  06A2    30FF    LDIA	0xFF
  06A3    00F4    LD	0x74,A
  06A4    306A    LDIA	0x6A
  06A5    23B5    CALL	0x3B5
  06A6    118A    CLRB	0xA,3
  06A7    0000    NOP
  06A8    0000    NOP
  06A9    0000    NOP
  06AA    0000    NOP
  06AB    0000    NOP
  06AC    0000    NOP
604:              	nop;
605:              	  tm1650cmd(0X6C,0xFF);	//个位
  06AD    30FF    LDIA	0xFF
  06AE    00F4    LD	0x74,A
  06AF    306C    LDIA	0x6C
  06B0    23B5    CALL	0x3B5
  06B1    118A    CLRB	0xA,3
  06B2    0000    NOP
  06B3    0000    NOP
  06B4    0000    NOP
  06B5    0000    NOP
  06B6    0000    NOP
  06B7    0000    NOP
606:              	nop;
607:              	  tm1650cmd(0X6E,0xFF);//圆圈后面8个灯
  06B8    30FF    LDIA	0xFF
  06B9    00F4    LD	0x74,A
  06BA    306E    LDIA	0x6E
  06BB    2BB5    JP	0x3B5
608:              	//DelayS(2);
609:                  //tm1650cmd(0X48,0x00); 
610:              }
611:              
612:              void refreshTM1650()
613:              {
614:              	if(showFlag)
  033B    0862    LD	A,0x62
  033C    1903    SZB	0x3,2
  033D    2B76    JP	0x376
615:              	{
616:              		tm1650cmd(0X48,0x21);
  033E    3021    LDIA	0x21
  033F    00F4    LD	0x74,A
  0340    3048    LDIA	0x48
  0341    23B5    CALL	0x3B5
  0342    118A    CLRB	0xA,3
  0343    0000    NOP
  0344    0000    NOP
  0345    0000    NOP
  0346    0000    NOP
  0347    0000    NOP
  0348    0000    NOP
617:              		nop;
618:              		tm1650cmd(0X68,showLed2);
  0349    1283    CLRB	0x3,5
  034A    1303    CLRB	0x3,6
  034B    085E    LD	A,0x5E
  034C    00F4    LD	0x74,A
  034D    3068    LDIA	0x68
  034E    23B5    CALL	0x3B5
  034F    118A    CLRB	0xA,3
  0350    0000    NOP
  0351    0000    NOP
  0352    0000    NOP
  0353    0000    NOP
  0354    0000    NOP
  0355    0000    NOP
619:              		nop;
620:              		tm1650cmd(0X6A,showShiWei);
  0356    1283    CLRB	0x3,5
  0357    1303    CLRB	0x3,6
  0358    0861    LD	A,0x61
  0359    00F4    LD	0x74,A
  035A    306A    LDIA	0x6A
  035B    23B5    CALL	0x3B5
  035C    118A    CLRB	0xA,3
  035D    0000    NOP
  035E    0000    NOP
  035F    0000    NOP
  0360    0000    NOP
  0361    0000    NOP
  0362    0000    NOP
621:              		nop;
622:              		tm1650cmd(0X6C,showGeWei);
  0363    1283    CLRB	0x3,5
  0364    1303    CLRB	0x3,6
  0365    0860    LD	A,0x60
  0366    00F4    LD	0x74,A
  0367    306C    LDIA	0x6C
  0368    23B5    CALL	0x3B5
  0369    118A    CLRB	0xA,3
  036A    0000    NOP
  036B    0000    NOP
  036C    0000    NOP
  036D    0000    NOP
  036E    0000    NOP
  036F    0000    NOP
623:              		nop;
624:              		tm1650cmd(0X6E,showLed1);
  0370    1283    CLRB	0x3,5
  0371    1303    CLRB	0x3,6
  0372    085F    LD	A,0x5F
  0373    00F4    LD	0x74,A
  0374    306E    LDIA	0x6E
  0375    2BB5    JP	0x3B5
625:              	}
626:              	else if(sleepTime < 10)
  0376    3000    LDIA	0x0
  0377    022F    SUBA	0x2F
  0378    300A    LDIA	0xA
  0379    1903    SZB	0x3,2
  037A    022E    SUBA	0x2E
  037B    1803    SZB	0x3,0
  037C    0008    RET
  037D    3068    LDIA	0x68
627:              	{
628:              		tm1650cmd(0X68,0);
  037E    01F4    CLR	0x74
  037F    23B5    CALL	0x3B5
  0380    118A    CLRB	0xA,3
  0381    0000    NOP
  0382    0000    NOP
  0383    0000    NOP
  0384    0000    NOP
  0385    0000    NOP
  0386    0000    NOP
  0387    306A    LDIA	0x6A
629:              		nop;
630:              		tm1650cmd(0X6A,0);
  0388    01F4    CLR	0x74
  0389    23B5    CALL	0x3B5
  038A    118A    CLRB	0xA,3
  038B    0000    NOP
  038C    0000    NOP
  038D    0000    NOP
  038E    0000    NOP
  038F    0000    NOP
  0390    0000    NOP
  0391    306C    LDIA	0x6C
631:              		nop;
632:              		tm1650cmd(0X6C,0);
  0392    01F4    CLR	0x74
  0393    23B5    CALL	0x3B5
  0394    118A    CLRB	0xA,3
  0395    0000    NOP
  0396    0000    NOP
  0397    0000    NOP
  0398    0000    NOP
  0399    0000    NOP
  039A    0000    NOP
  039B    306E    LDIA	0x6E
633:              		nop;
634:              		tm1650cmd(0X6E,0);
  039C    01F4    CLR	0x74
  039D    23B5    CALL	0x3B5
  039E    118A    CLRB	0xA,3
  039F    0000    NOP
  03A0    0000    NOP
  03A1    0000    NOP
  03A2    0000    NOP
  03A3    0000    NOP
  03A4    0000    NOP
  03A5    3048    LDIA	0x48
635:              		nop;
636:              		tm1650cmd(0X48,0x00);
  03A6    01F4    CLR	0x74
  03A7    23B5    CALL	0x3B5
  03A8    0000    NOP
  03A9    0000    NOP
  03AA    0000    NOP
  03AB    0000    NOP
  03AC    0000    NOP
  03AD    0000    NOP
637:              		nop;
638:              		showShiWei = 0x00;
  03AE    1283    CLRB	0x3,5
  03AF    1303    CLRB	0x3,6
  03B0    01E1    CLR	0x61
639:              		showGeWei = 0x00;
  03B1    01E0    CLR	0x60
640:              		showLed1 = 0x00;
  03B2    01DF    CLR	0x5F
641:              		showLed2 = 0x00;
  03B3    01DE    CLR	0x5E
  03B4    0008    RET
642:              	}
643:              }
644:              
645:              
646:              void setZeroStep()
647:              {
648:              	if(zeroStep == 0)
  06BC    087A    LD	A,0x7A
  06BD    1D03    SNZB	0x3,2
  06BE    2EC2    JP	0x6C2
649:              	{
650:              		showLed1 = 0x00;
  06BF    01DF    CLR	0x5F
651:              		showLed2 = 0x00;
  06C0    01DE    CLR	0x5E
652:              	}
  06C1    0008    RET
653:              	else if(zeroStep == 1)
  06C2    0B7A    SZDECA	0x7A
  06C3    2ECE    JP	0x6CE
654:              	{
655:              		showLed1 = 0xE1;
  06C4    30E1    LDIA	0xE1
  06C5    2ECB    JP	0x6CB
656:              		showLed2 = 0x00;
  06CC    01DE    CLR	0x5E
657:              	}
  06CD    0008    RET
658:              	else if(zeroStep == 2)
  06CE    3002    LDIA	0x2
  06CF    067A    XORA	0x7A
  06D0    1903    SZB	0x3,2
  06D1    2EC6    JP	0x6C6
659:              	{
660:              		showLed1 = 0xE3;
  06C6    30E3    LDIA	0xE3
  06C7    2ECB    JP	0x6CB
661:              		showLed2 = 0x00;
662:              	}
663:              	else if(zeroStep == 3)
  06D2    3003    LDIA	0x3
  06D3    067A    XORA	0x7A
  06D4    1903    SZB	0x3,2
  06D5    2EC8    JP	0x6C8
664:              	{
665:              		showLed1 = 0xE7;
  06C8    30E7    LDIA	0xE7
  06C9    2ECB    JP	0x6CB
666:              		showLed2 = 0x00;
667:              	}
668:              	else if(zeroStep == 4)
  06D6    3004    LDIA	0x4
  06D7    067A    XORA	0x7A
  06D8    1903    SZB	0x3,2
  06D9    2ECA    JP	0x6CA
669:              	{
670:              		showLed1 = 0xFF;
  06CA    30FF    LDIA	0xFF
  06CB    00DF    LD	0x5F,A
671:              		showLed2 = 0x00;
672:              	}
673:              	else if(zeroStep == 5)
  06DA    3005    LDIA	0x5
  06DB    067A    XORA	0x7A
  06DC    1D03    SNZB	0x3,2
  06DD    2EE3    JP	0x6E3
674:              	{
675:              		showLed1 = 0xFF;
  06DE    30FF    LDIA	0xFF
  06DF    00DF    LD	0x5F,A
676:              		showLed2 = 0x01;
  06E0    01DE    CLR	0x5E
  06E1    0ADE    INCR	0x5E
677:              	}
  06E2    0008    RET
678:              	else if(zeroStep == 6)
  06E3    3006    LDIA	0x6
  06E4    067A    XORA	0x7A
  06E5    1D03    SNZB	0x3,2
  06E6    2EEC    JP	0x6EC
679:              	{
680:              		showLed1 = 0xFF;
  06E7    30FF    LDIA	0xFF
  06E8    00DF    LD	0x5F,A
681:              		showLed2 = 0x03;
  06E9    3003    LDIA	0x3
  06EA    00DE    LD	0x5E,A
682:              	}
  06EB    0008    RET
683:              	else if(zeroStep == 7)
  06EC    3007    LDIA	0x7
  06ED    067A    XORA	0x7A
  06EE    1D03    SNZB	0x3,2
  06EF    2EF5    JP	0x6F5
684:              	{
685:              		showLed1 = 0xFF;
  06F0    30FF    LDIA	0xFF
  06F1    00DF    LD	0x5F,A
686:              		showLed2 = 0x07;
  06F2    3007    LDIA	0x7
  06F3    00DE    LD	0x5E,A
687:              	}
  06F4    0008    RET
688:              	else if(zeroStep == 8)
  06F5    3008    LDIA	0x8
  06F6    067A    XORA	0x7A
  06F7    1D03    SNZB	0x3,2
  06F8    2EFE    JP	0x6FE
689:              	{
690:              		showLed1 = 0xFF;
  06F9    30FF    LDIA	0xFF
  06FA    00DF    LD	0x5F,A
691:              		showLed2 = 0x0F;
  06FB    300F    LDIA	0xF
  06FC    00DE    LD	0x5E,A
692:              	}
  06FD    0008    RET
693:              	else if(zeroStep == 9)
  06FE    3009    LDIA	0x9
  06FF    067A    XORA	0x7A
  0700    1D03    SNZB	0x3,2
  0701    2F07    JP	0x707
694:              	{
695:              		showLed1 = 0xFF;
  0702    30FF    LDIA	0xFF
  0703    00DF    LD	0x5F,A
696:              		showLed2 = 0x2F;
  0704    302F    LDIA	0x2F
  0705    00DE    LD	0x5E,A
697:              	}
  0706    0008    RET
698:              	else if(zeroStep == 10)
  0707    300A    LDIA	0xA
  0708    067A    XORA	0x7A
  0709    1D03    SNZB	0x3,2
  070A    2F10    JP	0x710
699:              	{
700:              		showLed1 = 0xFF;
  070B    30FF    LDIA	0xFF
  070C    00DF    LD	0x5F,A
701:              		showLed2 = 0x6F;
  070D    306F    LDIA	0x6F
  070E    00DE    LD	0x5E,A
702:              	}
  070F    0008    RET
703:              	else if(zeroStep == 11)
  0710    300B    LDIA	0xB
  0711    067A    XORA	0x7A
  0712    1D03    SNZB	0x3,2
  0713    2F19    JP	0x719
704:              	{
705:              		showLed1 = 0xFF;
  0714    30FF    LDIA	0xFF
  0715    00DF    LD	0x5F,A
706:              		showLed2 = 0xEF;
  0716    30EF    LDIA	0xEF
  0717    00DE    LD	0x5E,A
707:              	}
  0718    0008    RET
708:              	else if(zeroStep == 12)
  0719    300C    LDIA	0xC
  071A    067A    XORA	0x7A
  071B    1D03    SNZB	0x3,2
  071C    0008    RET
  071D    2F14    JP	0x714
709:              	{
710:              		showLed1 = 0xFF;
711:              		showLed2 = 0xEF;
712:              	}
713:              }
714:              
715:              
716:              void setZeroStep2()
717:              {
718:              	if(zeroStep == 0)
  071E    087A    LD	A,0x7A
  071F    1D03    SNZB	0x3,2
  0720    2F24    JP	0x724
719:              	{
720:              		showLed1 = 0x00;
  0721    01DF    CLR	0x5F
721:              		showLed2 = 0x00;
  0722    01DE    CLR	0x5E
722:              	}
  0723    0008    RET
723:              	else if(zeroStep == 1)
  0724    0B7A    SZDECA	0x7A
  0725    2F2F    JP	0x72F
724:              	{
725:              		showLed1 = 0x01;
  0726    01DF    CLR	0x5F
  0727    0ADF    INCR	0x5F
  0728    2F2D    JP	0x72D
726:              		showLed2 = 0x00;
  072D    01DE    CLR	0x5E
727:              	}
  072E    0008    RET
728:              	else if(zeroStep == 2)
  072F    3002    LDIA	0x2
  0730    067A    XORA	0x7A
  0731    1903    SZB	0x3,2
  0732    2F29    JP	0x729
729:              	{
730:              		showLed1 = 0x02;
  0729    3002    LDIA	0x2
731:              		showLed2 = 0x00;
732:              	}
733:              	else if(zeroStep == 3)
  0733    3003    LDIA	0x3
  0734    067A    XORA	0x7A
734:              	{
735:              		showLed1 = 0x04;
  072A    2F2C    JP	0x72C
736:              		showLed2 = 0x00;
737:              	}
738:              	else if(zeroStep == 4)
  0735    3004    LDIA	0x4
  0736    1903    SZB	0x3,2
  0737    2F2C    JP	0x72C
  0738    067A    XORA	0x7A
  0739    1903    SZB	0x3,2
  073A    2F2B    JP	0x72B
739:              	{
740:              		showLed1 = 0x10;
  072B    3010    LDIA	0x10
  072C    00DF    LD	0x5F,A
741:              		showLed2 = 0x00;
742:              	}
743:              	else if(zeroStep == 5)
  073B    3005    LDIA	0x5
  073C    067A    XORA	0x7A
  073D    1D03    SNZB	0x3,2
  073E    2F43    JP	0x743
744:              	{
745:              		showLed1 = 0x00;
  073F    01DF    CLR	0x5F
746:              		showLed2 = 0x01;
  0740    01DE    CLR	0x5E
  0741    0ADE    INCR	0x5E
747:              	}
  0742    0008    RET
748:              	else if(zeroStep == 6)
  0743    3006    LDIA	0x6
  0744    067A    XORA	0x7A
  0745    1D03    SNZB	0x3,2
  0746    2F4B    JP	0x74B
  0747    3002    LDIA	0x2
749:              	{
750:              		showLed1 = 0x00;
  0748    01DF    CLR	0x5F
751:              		showLed2 = 0x02;
  0749    00DE    LD	0x5E,A
752:              	}
  074A    0008    RET
753:              	else if(zeroStep == 7)
  074B    3007    LDIA	0x7
  074C    067A    XORA	0x7A
  074D    1D03    SNZB	0x3,2
  074E    2F53    JP	0x753
  074F    3004    LDIA	0x4
754:              	{
755:              		showLed1 = 0x00;
  0750    01DF    CLR	0x5F
756:              		showLed2 = 0x04;
  0751    00DE    LD	0x5E,A
757:              	}
  0752    0008    RET
758:              	else if(zeroStep == 8)
  0753    3008    LDIA	0x8
  0754    067A    XORA	0x7A
  0755    1D03    SNZB	0x3,2
  0756    2F5B    JP	0x75B
  0757    3008    LDIA	0x8
759:              	{
760:              		showLed1 = 0x00;
  0758    01DF    CLR	0x5F
761:              		showLed2 = 0x08;
  0759    00DE    LD	0x5E,A
762:              	}
  075A    0008    RET
763:              	else if(zeroStep == 9)
  075B    3009    LDIA	0x9
  075C    067A    XORA	0x7A
  075D    1D03    SNZB	0x3,2
  075E    2F63    JP	0x763
  075F    3020    LDIA	0x20
764:              	{
765:              		showLed1 = 0x00;
  0760    01DF    CLR	0x5F
766:              		showLed2 = 0x20;
  0761    00DE    LD	0x5E,A
767:              	}
  0762    0008    RET
768:              	else if(zeroStep == 10)
  0763    300A    LDIA	0xA
  0764    067A    XORA	0x7A
  0765    1D03    SNZB	0x3,2
  0766    2F6B    JP	0x76B
  0767    3040    LDIA	0x40
769:              	{
770:              		showLed1 = 0x00;
  0768    01DF    CLR	0x5F
771:              		showLed2 = 0x40;
  0769    00DE    LD	0x5E,A
772:              	}
  076A    0008    RET
773:              	else if(zeroStep == 11)
  076B    300B    LDIA	0xB
  076C    067A    XORA	0x7A
  076D    1D03    SNZB	0x3,2
  076E    2F73    JP	0x773
  076F    3080    LDIA	0x80
774:              	{
775:              		showLed1 = 0x00;
  0770    01DF    CLR	0x5F
776:              		showLed2 = 0x80;
  0771    00DE    LD	0x5E,A
777:              	}
  0772    0008    RET
778:              	else if(zeroStep == 12)
  0773    300C    LDIA	0xC
  0774    067A    XORA	0x7A
  0775    1D03    SNZB	0x3,2
  0776    0008    RET
  0777    3010    LDIA	0x10
779:              	{
780:              		showLed1 = 0x00;
  0778    01DF    CLR	0x5F
781:              		showLed2 = 0x10;
  0779    00DE    LD	0x5E,A
  077A    0008    RET
782:              	}
783:              }
784:              
785:              void showCtr()
786:              {
787:              	if(firstTime > 0)
  0222    0840    LD	A,0x40
  0223    0441    ORA	0x41
  0224    1903    SZB	0x3,2
  0225    2A2B    JP	0x22B
788:              	{
789:              		showFlag = 1;
  0226    01E2    CLR	0x62
  0227    0AE2    INCR	0x62
790:              		sleepTime = 0;
  0228    01AE    CLR	0x2E
  0229    01AF    CLR	0x2F
791:              		initTM1650();
  022A    2E8C    JP	0x68C
792:              	}
793:              	else if(workStep > 0)
  022B    087B    LD	A,0x7B
  022C    1903    SZB	0x3,2
  022D    2A49    JP	0x249
  022E    30FF    LDIA	0xFF
794:              	{
795:              		showFlag = 1;
  022F    01E2    CLR	0x62
  0230    0AE2    INCR	0x62
796:              		sleepTime = 0;
  0231    01AE    CLR	0x2E
  0232    01AF    CLR	0x2F
797:              		showLed1 = 0xFF;
  0233    00DF    LD	0x5F,A
798:              		showLed2 = 0xFF;
  0234    00DE    LD	0x5E,A
799:              		showShiWei = numArray[workStep / 10];
  0235    300A    LDIA	0xA
  0236    00F2    LD	0x72,A
  0237    087B    LD	A,0x7B
  0238    22E0    CALL	0x2E0
  0239    3E01    ADDIA	0x1
  023A    0084    LD	0x4,A
  023B    158A    SETB	0xA,3
  023C    2000    CALL	0x0
  023D    118A    CLRB	0xA,3
  023E    00E1    LD	0x61,A
800:              		showGeWei = numArray[workStep % 10];
  023F    300A    LDIA	0xA
  0240    00F2    LD	0x72,A
  0241    087B    LD	A,0x7B
  0242    22FB    CALL	0x2FB
  0243    3E01    ADDIA	0x1
  0244    0084    LD	0x4,A
  0245    158A    SETB	0xA,3
  0246    2000    CALL	0x0
  0247    00E0    LD	0x60,A
801:              	}
  0248    0008    RET
802:              	else if(ledLightTime > 0)
  0249    0838    LD	A,0x38
  024A    0439    ORA	0x39
  024B    1903    SZB	0x3,2
  024C    2A83    JP	0x283
  024D    3055    LDIA	0x55
803:              	{
804:              		showFlag = 1;
  024E    01E2    CLR	0x62
  024F    0AE2    INCR	0x62
805:              		sleepTime = 0;
  0250    01AE    CLR	0x2E
  0251    01AF    CLR	0x2F
806:              		if(preBatValue >= 85)
  0252    0259    SUBA	0x59
  0253    1C03    SNZB	0x3,0
  0254    2A5D    JP	0x25D
807:              		{
808:              			showShiWei = numArray[9];
  0255    300A    LDIA	0xA
  0256    0084    LD	0x4,A
  0257    158A    SETB	0xA,3
  0258    2000    CALL	0x0
  0259    118A    CLRB	0xA,3
  025A    00E1    LD	0x61,A
809:              			showGeWei = numArray[9];
  025B    300A    LDIA	0xA
  025C    2A7B    JP	0x27B
810:              		}
811:              		else if(preBatValue > 60)
  025D    303D    LDIA	0x3D
  025E    0259    SUBA	0x59
  025F    1C03    SNZB	0x3,0
  0260    2A63    JP	0x263
812:              		{
813:              			showShiWei = numArray[8];
  0261    3009    LDIA	0x9
  0262    2A75    JP	0x275
814:              			showGeWei = numArray[0];
815:              		}
816:              		else if(preBatValue > 40)
  0263    3029    LDIA	0x29
  0264    0259    SUBA	0x59
  0265    1C03    SNZB	0x3,0
  0266    2A69    JP	0x269
817:              		{
818:              			showShiWei = numArray[6];
  0267    3007    LDIA	0x7
  0268    2A75    JP	0x275
819:              			showGeWei = numArray[0];
820:              		}
821:              		else if(preBatValue > 20)
  0269    3015    LDIA	0x15
  026A    0259    SUBA	0x59
  026B    1C03    SNZB	0x3,0
  026C    2A6F    JP	0x26F
822:              		{
823:              			showShiWei = numArray[4];
  026D    3005    LDIA	0x5
  026E    2A75    JP	0x275
824:              			showGeWei = numArray[0];
825:              		}
826:              		else if(preBatValue > 0)
  026F    0859    LD	A,0x59
  0270    1903    SZB	0x3,2
  0271    2A74    JP	0x274
827:              		{
828:              			showShiWei = numArray[2];
  0272    3003    LDIA	0x3
  0273    2A75    JP	0x275
829:              			showGeWei = numArray[0];
830:              		}
831:              		else
832:              		{
833:              			showShiWei = numArray[0];
  0274    3001    LDIA	0x1
  0275    0084    LD	0x4,A
  0276    158A    SETB	0xA,3
  0277    2000    CALL	0x0
  0278    118A    CLRB	0xA,3
  0279    00E1    LD	0x61,A
834:              			showGeWei = numArray[0];
  027A    3001    LDIA	0x1
  027B    0084    LD	0x4,A
  027C    158A    SETB	0xA,3
  027D    2000    CALL	0x0
  027E    00E0    LD	0x60,A
835:              		}
836:              		showLed1 = 0xFF;
  027F    30FF    LDIA	0xFF
  0280    00DF    LD	0x5F,A
837:              		showLed2 = 0xFF;
  0281    00DE    LD	0x5E,A
838:              	}
  0282    0008    RET
839:              	else if(chrgFlag)
  0283    085B    LD	A,0x5B
  0284    1903    SZB	0x3,2
  0285    2AAC    JP	0x2AC
  0286    3040    LDIA	0x40
840:              	{	
841:              		showFlag = 1;
  0287    01E2    CLR	0x62
  0288    0AE2    INCR	0x62
842:              		sleepTime = 0;
  0289    01AE    CLR	0x2E
  028A    01AF    CLR	0x2F
843:              		if(++chrgBatStepTime > 63)
  028B    0ACE    INCR	0x4E
  028C    024E    SUBA	0x4E
  028D    1C03    SNZB	0x3,0
  028E    2AAB    JP	0x2AB
  028F    3063    LDIA	0x63
844:              		{
845:              			chrgBatStepTime = 0;
  0290    01CE    CLR	0x4E
846:              			if(preBatValue >= 99)
  0291    0259    SUBA	0x59
  0292    1C03    SNZB	0x3,0
  0293    2AA2    JP	0x2A2
  0294    300A    LDIA	0xA
847:              			{
848:              				zeroStep = 0;
  0295    01FA    CLR	0x7A
849:              				showShiWei = numArray[9];
  0296    0084    LD	0x4,A
  0297    158A    SETB	0xA,3
  0298    2000    CALL	0x0
  0299    118A    CLRB	0xA,3
  029A    00E1    LD	0x61,A
850:              				showGeWei = numArray[9];
  029B    300A    LDIA	0xA
  029C    0084    LD	0x4,A
  029D    158A    SETB	0xA,3
  029E    2000    CALL	0x0
  029F    118A    CLRB	0xA,3
  02A0    00E0    LD	0x60,A
851:              			}
  02A1    2AAB    JP	0x2AB
852:              			else 
853:              			{
854:              				if(++zeroStep > 12)
  02A2    300D    LDIA	0xD
  02A3    0AFA    INCR	0x7A
  02A4    027A    SUBA	0x7A
  02A5    1C03    SNZB	0x3,0
  02A6    2AA9    JP	0x2A9
855:              				{
856:              					zeroStep = 1;
  02A7    01FA    CLR	0x7A
  02A8    0AFA    INCR	0x7A
857:              				}
858:              				showShiWei = 0x00;
  02A9    01E1    CLR	0x61
859:              				showGeWei = 0x00;
  02AA    01E0    CLR	0x60
860:              			}
861:              		}
862:              		setZeroStep2();
  02AB    2F1E    JP	0x71E
863:              		
864:              	}
865:              	else if(zeroStep > 0)
  02AC    087A    LD	A,0x7A
  02AD    1903    SZB	0x3,2
  02AE    2AB6    JP	0x2B6
866:              	{
867:              		showFlag = 1;
  02AF    01E2    CLR	0x62
  02B0    0AE2    INCR	0x62
868:              		sleepTime = 0;
  02B1    01AE    CLR	0x2E
  02B2    01AF    CLR	0x2F
869:              		showShiWei = showGeWei = 0;
  02B3    01E0    CLR	0x60
  02B4    01E1    CLR	0x61
870:              		setZeroStep();
  02B5    2EBC    JP	0x6BC
871:              	}
872:              	else
873:              	{
874:              		if(sleepTime > 10 && sleepTime % 20 == 0)
  02B6    3000    LDIA	0x0
  02B7    022F    SUBA	0x2F
  02B8    300B    LDIA	0xB
  02B9    1903    SZB	0x3,2
  02BA    022E    SUBA	0x2E
  02BB    1C03    SNZB	0x3,0
  02BC    2AD3    JP	0x2D3
  02BD    3014    LDIA	0x14
  02BE    00F2    LD	0x72,A
  02BF    01F3    CLR	0x73
  02C0    082F    LD	A,0x2F
  02C1    00F5    LD	0x75,A
  02C2    082E    LD	A,0x2E
  02C3    00F4    LD	0x74,A
  02C4    2317    CALL	0x317
  02C5    118A    CLRB	0xA,3
  02C6    0872    LD	A,0x72
  02C7    0473    ORA	0x73
  02C8    1D03    SNZB	0x3,2
  02C9    2AD3    JP	0x2D3
  02CA    3004    LDIA	0x4
875:              		{
876:              			showFlag = 0;
  02CB    01E2    CLR	0x62
877:              			tm1650cmd(0X48,0x04);
  02CC    00F4    LD	0x74,A
  02CD    3048    LDIA	0x48
  02CE    23B5    CALL	0x3B5
  02CF    118A    CLRB	0xA,3
878:              			PORTC |= 0x01;
879:              			PORTB |= 0x80;
  02D0    27D4    CALL	0x7D4
  02D1    118A    CLRB	0xA,3
  02D2    1786    SETB	0x6,7
880:              		}
881:              		if(++sleepTime > 200)
  02D3    0AAE    INCR	0x2E
  02D4    1903    SZB	0x3,2
  02D5    0AAF    INCR	0x2F
  02D6    3000    LDIA	0x0
  02D7    022F    SUBA	0x2F
  02D8    30C9    LDIA	0xC9
  02D9    1903    SZB	0x3,2
  02DA    022E    SUBA	0x2E
  02DB    1C03    SNZB	0x3,0
  02DC    0008    RET
882:              		{
883:              			sleepTime = 0;
  02DD    01AE    CLR	0x2E
  02DE    01AF    CLR	0x2F
884:              			WorkSleep();
  02DF    2C92    JP	0x492
885:              		}
886:              		
887:              	}
888:              }
889:              
890:              void workCtr()
891:              {
892:              	if(workStep > 0)
  0F28    087B    LD	A,0x7B
  0F29    1903    SZB	0x3,2
  0F2A    2F47    JP	0x747
893:              	{
894:              		checkTempAD();
  0F2B    279A    CALL	0x79A
  0F2C    158A    SETB	0xA,3
895:              		PWMIOS0 = 0x01;
  0F2D    3001    LDIA	0x1
  0F2E    1683    SETB	0x3,5
  0F2F    1703    SETB	0x3,6
  0F30    008C    LD	0xC,A
896:              		PWMTH = 0x00;
  0F31    1283    CLRB	0x3,5
  0F32    1303    CLRB	0x3,6
  0F33    0196    CLR	0x16
897:              		PWMTL = 100;
  0F34    3064    LDIA	0x64
  0F35    0095    LD	0x15,A
898:              		PWMD01H = 0x00;
  0F36    019C    CLR	0x1C
899:              		if(workStep <= 10)
  0F37    300B    LDIA	0xB
  0F38    027B    SUBA	0x7B
  0F39    1803    SZB	0x3,0
  0F3A    2F3E    JP	0x73E
900:              		{
901:              			PWMD0L = 50 + workStep;
  0F3B    087B    LD	A,0x7B
  0F3C    3E32    ADDIA	0x32
  0F3D    2F41    JP	0x741
902:              		}
903:              		else
904:              		{
905:              			PWMD0L = 40 + (workStep*2);
  0F3E    1003    CLRB	0x3,0
  0F3F    0D7B    RLCA	0x7B
  0F40    3E28    ADDIA	0x28
  0F41    0097    LD	0x17,A
906:              		}
907:              		PWMCON1 = 0x00;
  0F42    0194    CLR	0x14
908:              		PWMCON2 = 0x00;
  0F43    019D    CLR	0x1D
909:              		PWMCON0 = 0x41;
  0F44    3041    LDIA	0x41
  0F45    0093    LD	0x13,A
910:              	}
  0F46    0008    RET
911:              	else if(chrgFlag && chrgFullFlag == 0 && chrgLockFlag == 0)
  0F47    1283    CLRB	0x3,5
  0F48    085B    LD	A,0x5B
  0F49    1903    SZB	0x3,2
  0F4A    2F98    JP	0x798
  0F4B    0857    LD	A,0x57
  0F4C    1D03    SNZB	0x3,2
  0F4D    2F98    JP	0x798
  0F4E    0852    LD	A,0x52
  0F4F    1D03    SNZB	0x3,2
  0F50    2F98    JP	0x798
912:              	{
913:              		if(chrgResult < 70 && batResult <= 1555)
  0F51    3000    LDIA	0x0
  0F52    0235    SUBA	0x35
  0F53    3046    LDIA	0x46
  0F54    1903    SZB	0x3,2
  0F55    0234    SUBA	0x34
  0F56    1803    SZB	0x3,0
  0F57    2F6B    JP	0x76B
  0F58    3006    LDIA	0x6
  0F59    0237    SUBA	0x37
  0F5A    3014    LDIA	0x14
  0F5B    1903    SZB	0x3,2
  0F5C    0236    SUBA	0x36
  0F5D    1803    SZB	0x3,0
  0F5E    2F6B    JP	0x76B
914:              		{
915:              			if(++addTime > 10 && chrgDuty < 35)
  0F5F    300B    LDIA	0xB
  0F60    0AD5    INCR	0x55
  0F61    0255    SUBA	0x55
  0F62    1C03    SNZB	0x3,0
  0F63    2F6C    JP	0x76C
  0F64    3023    LDIA	0x23
  0F65    0256    SUBA	0x56
  0F66    1803    SZB	0x3,0
  0F67    2F6C    JP	0x76C
916:              			{
917:              				addTime = 0;
  0F68    01D5    CLR	0x55
918:              				chrgDuty++;
  0F69    0AD6    INCR	0x56
  0F6A    2F6C    JP	0x76C
919:              			}
920:              		}
921:              		else
922:              		{
923:              			addTime = 0;
  0F6B    01D5    CLR	0x55
924:              		}
925:              		if(chrgResult > 80 || batResult > 1555)
  0F6C    3000    LDIA	0x0
  0F6D    0235    SUBA	0x35
  0F6E    3051    LDIA	0x51
  0F6F    1903    SZB	0x3,2
  0F70    0234    SUBA	0x34
  0F71    1803    SZB	0x3,0
  0F72    2F7A    JP	0x77A
  0F73    3006    LDIA	0x6
  0F74    0237    SUBA	0x37
  0F75    3014    LDIA	0x14
  0F76    1903    SZB	0x3,2
  0F77    0236    SUBA	0x36
  0F78    1C03    SNZB	0x3,0
  0F79    2F86    JP	0x786
926:              		{
927:              			if(++subTime > 10 && chrgDuty > 10)
  0F7A    300B    LDIA	0xB
  0F7B    0AD4    INCR	0x54
  0F7C    0254    SUBA	0x54
  0F7D    1C03    SNZB	0x3,0
  0F7E    2F87    JP	0x787
  0F7F    300B    LDIA	0xB
  0F80    0256    SUBA	0x56
  0F81    1C03    SNZB	0x3,0
  0F82    2F87    JP	0x787
928:              			{
929:              				subTime = 0;
  0F83    01D4    CLR	0x54
930:              				chrgDuty--;
  0F84    03D6    DECR	0x56
  0F85    2F87    JP	0x787
931:              			}
932:              		}
933:              		else
934:              		{
935:              			subTime = 0;
  0F86    01D4    CLR	0x54
936:              		}
937:              		PWMIOS1 = 0x20;
  0F87    3020    LDIA	0x20
  0F88    1683    SETB	0x3,5
  0F89    1703    SETB	0x3,6
  0F8A    008D    LD	0xD,A
938:              		PWMTH = 0x00;
  0F8B    1283    CLRB	0x3,5
  0F8C    1303    CLRB	0x3,6
  0F8D    0196    CLR	0x16
939:              		PWMTL = 70;
  0F8E    3046    LDIA	0x46
  0F8F    0095    LD	0x15,A
940:              		PWMD23H = 0x00;
  0F90    018E    CLR	0xE
941:              		PWMD3L = chrgDuty;
  0F91    0856    LD	A,0x56
  0F92    009A    LD	0x1A,A
942:              		PWMCON1 = 0x00;
  0F93    0194    CLR	0x14
943:              		PWMCON2 = 0x00;
  0F94    019D    CLR	0x1D
944:              		PWMCON0 = 0x08;
  0F95    3008    LDIA	0x8
  0F96    0093    LD	0x13,A
945:              	}
  0F97    0008    RET
946:              	else
947:              	{
948:              		PWMCON0 = 0x00;				//关闭PWM输出
  0F98    0193    CLR	0x13
  0F99    0008    RET
949:              	}
950:              }
951:              
952:              void chrgCtr()
953:              {
954:              	if(0x20 & PORTA)
  0EA1    1E85    SNZB	0x5,5
  0EA2    2EC4    JP	0x6C4
955:              	{
956:              		checkChrgAD();
  0EA3    26CE    CALL	0x6CE
  0EA4    158A    SETB	0xA,3
  0EA5    3006    LDIA	0x6
957:              		chrgFlag = 1;
  0EA6    01DB    CLR	0x5B
  0EA7    0ADB    INCR	0x5B
958:              		workStep = 0;
  0EA8    01FB    CLR	0x7B
959:              		lowBatFlag = 0;
  0EA9    01D1    CLR	0x51
960:              		ledLightTime = 0;
  0EAA    01B8    CLR	0x38
  0EAB    01B9    CLR	0x39
961:              		if(batResult > 1555)
  0EAC    0237    SUBA	0x37
  0EAD    3014    LDIA	0x14
  0EAE    1903    SZB	0x3,2
  0EAF    0236    SUBA	0x36
  0EB0    1C03    SNZB	0x3,0
  0EB1    2EC1    JP	0x6C1
962:              		{
963:              			if(++chrgFullTime > 2500)
  0EB2    0AB2    INCR	0x32
  0EB3    1903    SZB	0x3,2
  0EB4    0AB3    INCR	0x33
  0EB5    3009    LDIA	0x9
  0EB6    0233    SUBA	0x33
  0EB7    30C5    LDIA	0xC5
  0EB8    1903    SZB	0x3,2
  0EB9    0232    SUBA	0x32
  0EBA    1C03    SNZB	0x3,0
  0EBB    0008    RET
964:              			{
965:              				chrgFullTime = 0;
  0EBC    01B2    CLR	0x32
  0EBD    01B3    CLR	0x33
966:              				chrgFullFlag = 1;
  0EBE    01D7    CLR	0x57
  0EBF    0AD7    INCR	0x57
  0EC0    0008    RET
967:              			}
968:              		}
969:              		else
970:              		{
971:              			chrgFullTime = 0;
  0EC1    01B2    CLR	0x32
  0EC2    01B3    CLR	0x33
  0EC3    0008    RET
972:              		}
973:              	}
974:              	else
975:              	{
976:              		if(chrgFlag)
  0EC4    085B    LD	A,0x5B
  0EC5    1D03    SNZB	0x3,2
977:              		{
978:              			zeroStep = 0;
  0EC6    01FA    CLR	0x7A
979:              		}
980:              		chrgFlag = 0;
  0EC7    01DB    CLR	0x5B
981:              		chrgFullFlag = 0;
  0EC8    01D7    CLR	0x57
982:              		chrgFullTime = 0;
  0EC9    01B2    CLR	0x32
  0ECA    01B3    CLR	0x33
983:              		chrgDuty = 0;
  0ECB    01D6    CLR	0x56
984:              		chrgLockFlag = 0;
  0ECC    01D2    CLR	0x52
  0ECD    0008    RET
985:              	}
986:              }
987:              
988:              void task1()
989:              {
990:              	if(firstTime > 0)
  001F    0840    LD	A,0x40
  0020    0441    ORA	0x41
  0021    1903    SZB	0x3,2
  0022    282E    JP	0x2E
991:              	{
992:              		firstTime--;
  0023    3001    LDIA	0x1
  0024    02C0    SUBR	0x40
  0025    1C03    SNZB	0x3,0
  0026    03C1    DECR	0x41
993:              		if(preBatValue < batValue)
  0027    085A    LD	A,0x5A
  0028    0259    SUBA	0x59
  0029    1803    SZB	0x3,0
  002A    2830    JP	0x30
994:              		{
995:              			preBatValue = batValue;
  002B    085A    LD	A,0x5A
  002C    00D9    LD	0x59,A
  002D    2830    JP	0x30
996:              		}
997:              	}
998:              	else
999:              	{
1000:             		refreshTM1650();
  002E    233B    CALL	0x33B
  002F    118A    CLRB	0xA,3
1001:             	}
1002:             	if(++count1s >= 250)
  0030    30FA    LDIA	0xFA
  0031    0ADC    INCR	0x5C
  0032    025C    SUBA	0x5C
  0033    1C03    SNZB	0x3,0
  0034    0008    RET
1003:             	{
1004:             		count1s = 0;
  0035    01DC    CLR	0x5C
1005:             		if(workStep > 0)
  0036    087B    LD	A,0x7B
  0037    1903    SZB	0x3,2
  0038    284A    JP	0x4A
1006:             		{
1007:             			if(++count900s > 675)
  0039    0AB0    INCR	0x30
  003A    1903    SZB	0x3,2
  003B    0AB1    INCR	0x31
  003C    3002    LDIA	0x2
  003D    0231    SUBA	0x31
  003E    30A4    LDIA	0xA4
  003F    1903    SZB	0x3,2
  0040    0230    SUBA	0x30
  0041    1C03    SNZB	0x3,0
  0042    284C    JP	0x4C
1008:             			{
1009:             				count900s = 0;
  0043    01B0    CLR	0x30
  0044    01B1    CLR	0x31
1010:             				workStep = 0;
  0045    01FB    CLR	0x7B
1011:             				zeroStep = 0;
  0046    01FA    CLR	0x7A
1012:             				ledLightTime = 0;
  0047    01B8    CLR	0x38
  0048    01B9    CLR	0x39
  0049    284C    JP	0x4C
1013:             			}
1014:             		}
1015:             		else
1016:             		{
1017:             			count900s = 0;
  004A    01B0    CLR	0x30
  004B    01B1    CLR	0x31
1018:             		}
1019:             		if(ledLightTime > 0)
  004C    0838    LD	A,0x38
  004D    0439    ORA	0x39
  004E    1903    SZB	0x3,2
  004F    2856    JP	0x56
1020:             		{
1021:             			ledLightTime--;
  0050    3001    LDIA	0x1
  0051    02B8    SUBR	0x38
  0052    3000    LDIA	0x0
  0053    1C03    SNZB	0x3,0
  0054    03B9    DECR	0x39
  0055    02B9    SUBR	0x39
1022:             		}
1023:             		if(chrgFlag)
  0056    085B    LD	A,0x5B
  0057    1903    SZB	0x3,2
  0058    286B    JP	0x6B
1024:             		{
1025:             			if(preBatValue < 99 && preBatValue < batValue)
  0059    3063    LDIA	0x63
  005A    0259    SUBA	0x59
  005B    1803    SZB	0x3,0
  005C    2869    JP	0x69
  005D    085A    LD	A,0x5A
  005E    0259    SUBA	0x59
  005F    1803    SZB	0x3,0
  0060    2869    JP	0x69
1026:             			{
1027:             				if(++count15s >= 15)
  0061    300F    LDIA	0xF
  0062    0AD3    INCR	0x53
  0063    0253    SUBA	0x53
  0064    1C03    SNZB	0x3,0
  0065    0008    RET
1028:             				{
1029:             					count15s = 0;
  0066    01D3    CLR	0x53
1030:             					preBatValue++;
  0067    0AD9    INCR	0x59
  0068    0008    RET
1031:             				}
1032:             			}
1033:             			else
1034:             			{
1035:             				count15s = 0;
  0069    01D3    CLR	0x53
  006A    0008    RET
1036:             			}
1037:             		}
1038:             		else
1039:             		{
1040:             			if(preBatValue > 0 && preBatValue > batValue)
  006B    0859    LD	A,0x59
  006C    1903    SZB	0x3,2
  006D    2869    JP	0x69
  006E    0859    LD	A,0x59
  006F    025A    SUBA	0x5A
  0070    1803    SZB	0x3,0
  0071    2869    JP	0x69
1041:             			{
1042:             				if(++count15s >= 15)
  0072    300F    LDIA	0xF
  0073    0AD3    INCR	0x53
  0074    0253    SUBA	0x53
  0075    1C03    SNZB	0x3,0
  0076    0008    RET
1043:             				{
1044:             					count15s = 0;
  0077    01D3    CLR	0x53
1045:             					preBatValue--;
  0078    03D9    DECR	0x59
  0079    0008    RET
1046:             				}
1047:             			}
1048:             			else
1049:             			{
1050:             				count15s = 0;
1051:             			}
1052:             		}
1053:             	}
1054:             
1055:             }
1056:             
1057:             
1058:             /***********************************************************
1059:             主循环
1060:             ***********************************************************/
1061:             void main()
1062:             {
1063:             	Init_System();
  0D8E    118A    CLRB	0xA,3
  0D8F    2640    CALL	0x640
  0D90    158A    SETB	0xA,3
1064:             	initTM1650();
  0D91    118A    CLRB	0xA,3
  0D92    268C    CALL	0x68C
  0D93    158A    SETB	0xA,3
1065:             	firstTime = 250;
  0D94    30FA    LDIA	0xFA
  0D95    00C0    LD	0x40,A
  0D96    01C1    CLR	0x41
1066:             	while(1)
1067:             	{
1068:             		if(B_MainLoop)
  0D97    1F79    SNZB	0x79,6
  0D98    2D97    JP	0x597
1069:             		{
1070:             			B_MainLoop = 0;
  0D99    1379    CLRB	0x79,6
  0D9A    0064    CLRWDT
1071:             			CLRWDT();
1072:             			
1073:             			CheckTouchKey();
  0D9B    118A    CLRB	0xA,3
  0D9C    207A    CALL	0x7A
  0D9D    158A    SETB	0xA,3
1074:             			
1075:             			Refurbish_Sfr();
  0D9E    118A    CLRB	0xA,3
  0D9F    260E    CALL	0x60E
  0DA0    158A    SETB	0xA,3
1076:             			if(chrgFlag == 0)
  0DA1    085B    LD	A,0x5B
  0DA2    1D03    SNZB	0x3,2
  0DA3    2DA7    JP	0x5A7
1077:             				KeyServer();
  0DA4    158A    SETB	0xA,3
  0DA5    25B7    CALL	0x5B7
  0DA6    158A    SETB	0xA,3
1078:             			showCtr();
  0DA7    118A    CLRB	0xA,3
  0DA8    2222    CALL	0x222
  0DA9    158A    SETB	0xA,3
1079:             			workCtr();
  0DAA    158A    SETB	0xA,3
  0DAB    2728    CALL	0x728
  0DAC    158A    SETB	0xA,3
1080:             			checkBat();
  0DAD    158A    SETB	0xA,3
  0DAE    26D8    CALL	0x6D8
  0DAF    158A    SETB	0xA,3
1081:             			chrgCtr();
  0DB0    158A    SETB	0xA,3
  0DB1    26A1    CALL	0x6A1
  0DB2    158A    SETB	0xA,3
1082:             			task1();
  0DB3    118A    CLRB	0xA,3
  0DB4    201F    CALL	0x1F
  0DB5    158A    SETB	0xA,3
  0DB6    2D97    JP	0x597
1083:             			
1084:             		}
1085:             	}
1086:             }
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c ----------------------------------------------------------------------
1:                // byte unsigned division
2:                
3:                unsigned char
4:                __lbdiv(unsigned char dividend, unsigned char divisor)
  02E0    00F3    LD	0x73,A
  02E1    01F5    CLR	0x75
  02E2    0872    LD	A,0x72
  02E3    1903    SZB	0x3,2
  02E4    2AF9    JP	0x2F9
  02E5    01F4    CLR	0x74
  02E6    0AF4    INCR	0x74
  02E7    1BF2    SZB	0x72,7
  02E8    2AEC    JP	0x2EC
  02E9    1003    CLRB	0x3,0
  02EA    0DF2    RLCR	0x72
  02EB    2AE6    JP	0x2E6
  02EC    1003    CLRB	0x3,0
  02ED    0DF5    RLCR	0x75
  02EE    0872    LD	A,0x72
  02EF    0273    SUBA	0x73
  02F0    1C03    SNZB	0x3,0
  02F1    2AF6    JP	0x2F6
  02F2    0872    LD	A,0x72
  02F3    02F3    SUBR	0x73
  02F4    1475    SETB	0x75,0
  02F5    1003    CLRB	0x3,0
  02F6    0CF2    RRCR	0x72
  02F7    0BF4    SZDECR	0x74
  02F8    2AEC    JP	0x2EC
  02F9    0875    LD	A,0x75
  02FA    0008    RET
5:                {
6:                	unsigned char	quotient;
7:                	unsigned char	counter;
8:                
9:                	quotient = 0;
10:               	if(divisor != 0) {
11:               		counter = 1;
12:               		while((divisor & 0x80) == 0) {
13:               			divisor <<= 1;
14:               			counter++;
15:               		}
16:               		do {
17:               			quotient <<= 1;
18:               			if(divisor <= dividend) {
19:               				dividend -= divisor;
20:               				quotient |= 1;
21:               			}
22:               			divisor >>= 1;
23:               		} while(--counter != 0);
24:               	}
25:               	return quotient;
26:               }
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c ----------------------------------------------------------------------
1:                // byte unsigned modulus
2:                
3:                unsigned char
4:                __lbmod(unsigned char dividend, unsigned char divisor)
  02FB    00F4    LD	0x74,A
  02FC    3008    LDIA	0x8
  02FD    00F5    LD	0x75,A
  02FE    01F6    CLR	0x76
  02FF    0874    LD	A,0x74
  0300    00F3    LD	0x73,A
  0301    3007    LDIA	0x7
  0302    1003    CLRB	0x3,0
  0303    0CF3    RRCR	0x73
  0304    3EFF    ADDIA	0xFF
  0305    1003    CLRB	0x3,0
  0306    1D03    SNZB	0x3,2
  0307    2B03    JP	0x303
  0308    0D76    RLCA	0x76
  0309    0473    ORA	0x73
  030A    00F6    LD	0x76,A
  030B    1003    CLRB	0x3,0
  030C    0DF4    RLCR	0x74
  030D    0872    LD	A,0x72
  030E    0276    SUBA	0x76
  030F    1C03    SNZB	0x3,0
  0310    2B13    JP	0x313
  0311    0872    LD	A,0x72
  0312    02F6    SUBR	0x76
  0313    0BF5    SZDECR	0x75
  0314    2AFF    JP	0x2FF
  0315    0876    LD	A,0x76
  0316    0008    RET
5:                {
6:                	unsigned char	rem;
7:                	unsigned char	counter;
8:                
9:                	counter = 8;
10:               	rem = 0;
11:               	do {
12:               		rem = (rem << 1) | (dividend >> 7);
13:               		dividend <<= 1;
14:               		if(divisor <= rem)
15:               			rem -= divisor;
16:               	} while(--counter != 0);
17:               	return rem;
18:               }
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c ----------------------------------------------------------------------
1:                // word unsigned modulus
2:                
3:                unsigned int
4:                #ifdef __PICC__
5:                #warning TODO: update cgpic and this file to use the other prototype
6:                __lwmod(unsigned int divisor, unsigned int dividend)
  0317    0872    LD	A,0x72
  0318    0473    ORA	0x73
  0319    1903    SZB	0x3,2
  031A    2B36    JP	0x336
  031B    01F6    CLR	0x76
  031C    0AF6    INCR	0x76
  031D    1BF3    SZB	0x73,7
  031E    2B23    JP	0x323
  031F    1003    CLRB	0x3,0
  0320    0DF2    RLCR	0x72
  0321    0DF3    RLCR	0x73
  0322    2B1C    JP	0x31C
  0323    0873    LD	A,0x73
  0324    0275    SUBA	0x75
  0325    1D03    SNZB	0x3,2
  0326    2B29    JP	0x329
  0327    0872    LD	A,0x72
  0328    0274    SUBA	0x74
  0329    1C03    SNZB	0x3,0
  032A    2B32    JP	0x332
  032B    0872    LD	A,0x72
  032C    02F4    SUBR	0x74
  032D    0873    LD	A,0x73
  032E    1C03    SNZB	0x3,0
  032F    03F5    DECR	0x75
  0330    02F5    SUBR	0x75
  0331    1003    CLRB	0x3,0
  0332    0CF3    RRCR	0x73
  0333    0CF2    RRCR	0x72
  0334    0BF6    SZDECR	0x76
  0335    2B23    JP	0x323
  0336    0875    LD	A,0x75
  0337    00F3    LD	0x73,A
  0338    0874    LD	A,0x74
  0339    00F2    LD	0x72,A
  033A    0008    RET
7:                #else
8:                __lwmod(unsigned int dividend, unsigned int divisor)
9:                #endif
10:               {
11:               	unsigned char	counter;
12:               
13:               	if(divisor != 0) {
14:               		counter = 1;
15:               		while((divisor & 0x8000) == 0) {
16:               			divisor <<= 1;
17:               			counter++;
18:               		}
19:               		do {
20:               			if(divisor <= dividend)
21:               				dividend -= divisor;
22:               			divisor >>= 1;
23:               		} while(--counter != 0);
24:               	}
25:               	return dividend;
26:               }
---- library_code ------------------------------------------------------------------
  007A    1A79    SZB	0x79,4
  007B    2888    JP	0x88
  007C    2582    CALL	0x582
  007D    118A    CLRB	0xA,3
  007E    3008    LDIA	0x8
  007F    1283    CLRB	0x3,5
  0080    1303    CLRB	0x3,6
  0081    0AC8    INCR	0x48
  0082    0248    SUBA	0x48
  0083    1C03    SNZB	0x3,0
  0084    28A6    JP	0xA6
  0085    01C8    CLR	0x48
  0086    1679    SETB	0x79,4
  0087    28A6    JP	0xA6
  0088    19F9    SZB	0x79,3
  0089    28A0    JP	0xA0
  008A    210B    CALL	0x10B
  008B    118A    CLRB	0xA,3
  008C    25E1    CALL	0x5E1
  008D    118A    CLRB	0xA,3
  008E    15F9    SETB	0x79,3
  008F    18F9    SZB	0x79,1
  0090    2897    JP	0x97
  0091    3004    LDIA	0x4
  0092    1283    CLRB	0x3,5
  0093    1303    CLRB	0x3,6
  0094    0248    SUBA	0x48
  0095    1C03    SNZB	0x3,0
  0096    289C    JP	0x9C
  0097    220C    CALL	0x20C
  0098    118A    CLRB	0xA,3
  0099    10F9    CLRB	0x79,1
  009A    1279    CLRB	0x79,4
  009B    11F9    CLRB	0x79,3
  009C    1283    CLRB	0x3,5
  009D    1303    CLRB	0x3,6
  009E    01C8    CLR	0x48
  009F    28A6    JP	0xA6
  00A0    20A7    CALL	0xA7
  00A1    118A    CLRB	0xA,3
  00A2    255E    CALL	0x55E
  00A3    118A    CLRB	0xA,3
  00A4    1279    CLRB	0x79,4
  00A5    11F9    CLRB	0x79,3
  00A6    2E1C    JP	0x61C
  00A7    1283    CLRB	0x3,5
  00A8    3004    LDIA	0x4
  00A9    1303    CLRB	0x3,6
  00AA    01E9    CLR	0x69
  00AB    0AC6    INCR	0x46
  00AC    0246    SUBA	0x46
  00AD    1C03    SNZB	0x3,0
  00AE    0008    RET
  00AF    01C6    CLR	0x46
  00B0    1003    CLRB	0x3,0
  00B1    0D69    RLCA	0x69
  00B2    3EB2    ADDIA	0xB2
  00B3    0084    LD	0x4,A
  00B4    1383    CLRB	0x3,7
  00B5    0800    LD	A,0x0
  00B6    00E5    LD	0x65,A
  00B7    0A84    INCR	0x4
  00B8    0800    LD	A,0x0
  00B9    00E6    LD	0x66,A
  00BA    0869    LD	A,0x69
  00BB    21EC    CALL	0x1EC
  00BC    118A    CLRB	0xA,3
  00BD    3A00    XORIA	0x0
  00BE    1003    CLRB	0x3,0
  00BF    1D03    SNZB	0x3,2
  00C0    28F5    JP	0xF5
  00C1    0D69    RLCA	0x69
  00C2    3EAC    ADDIA	0xAC
  00C3    0084    LD	0x4,A
  00C4    1383    CLRB	0x3,7
  00C5    277B    CALL	0x77B
  00C6    118A    CLRB	0xA,3
  00C7    1903    SZB	0x3,2
  00C8    0267    SUBA	0x67
  00C9    1C03    SNZB	0x3,0
  00CA    28D1    JP	0xD1
  00CB    0F67    SZINCA	0x67
  00CC    28F4    JP	0xF4
  00CD    0A68    INCA	0x68
  00CE    1003    CLRB	0x3,0
  00CF    1D03    SNZB	0x3,2
  00D0    28F5    JP	0xF5
  00D1    0D69    RLCA	0x69
  00D2    3E20    ADDIA	0x20
  00D3    0084    LD	0x4,A
  00D4    277B    CALL	0x77B
  00D5    118A    CLRB	0xA,3
  00D6    1903    SZB	0x3,2
  00D7    0267    SUBA	0x67
  00D8    1C03    SNZB	0x3,0
  00D9    28E0    JP	0xE0
  00DA    0F67    SZINCA	0x67
  00DB    28F4    JP	0xF4
  00DC    0A68    INCA	0x68
  00DD    1003    CLRB	0x3,0
  00DE    1D03    SNZB	0x3,2
  00DF    28F5    JP	0xF5
  00E0    0D69    RLCA	0x69
  00E1    3EA6    ADDIA	0xA6
  00E2    0084    LD	0x4,A
  00E3    277B    CALL	0x77B
  00E4    118A    CLRB	0xA,3
  00E5    1903    SZB	0x3,2
  00E6    0267    SUBA	0x67
  00E7    1C03    SNZB	0x3,0
  00E8    28EF    JP	0xEF
  00E9    0F67    SZINCA	0x67
  00EA    28F4    JP	0xF4
  00EB    0A68    INCA	0x68
  00EC    1003    CLRB	0x3,0
  00ED    1D03    SNZB	0x3,2
  00EE    28F5    JP	0xF5
  00EF    0D69    RLCA	0x69
  00F0    3EA0    ADDIA	0xA0
  00F1    0084    LD	0x4,A
  00F2    27DA    CALL	0x7DA
  00F3    118A    CLRB	0xA,3
  00F4    1003    CLRB	0x3,0
  00F5    0D69    RLCA	0x69
  00F6    3E20    ADDIA	0x20
  00F7    0084    LD	0x4,A
  00F8    1383    CLRB	0x3,7
  00F9    27BF    CALL	0x7BF
  00FA    118A    CLRB	0xA,3
  00FB    3EA6    ADDIA	0xA6
  00FC    27AD    CALL	0x7AD
  00FD    118A    CLRB	0xA,3
  00FE    27BF    CALL	0x7BF
  00FF    118A    CLRB	0xA,3
  0100    3E20    ADDIA	0x20
  0101    27AD    CALL	0x7AD
  0102    118A    CLRB	0xA,3
  0103    27DA    CALL	0x7DA
  0104    118A    CLRB	0xA,3
  0105    3003    LDIA	0x3
  0106    0AE9    INCR	0x69
  0107    0269    SUBA	0x69
  0108    1803    SZB	0x3,0
  0109    0008    RET
  010A    28B0    JP	0xB0
  010B    1283    CLRB	0x3,5
  010C    1303    CLRB	0x3,6
  010D    01ED    CLR	0x6D
  010E    01A8    CLR	0x28
  010F    01A9    CLR	0x29
  0110    01C7    CLR	0x47
  0111    086D    LD	A,0x6D
  0112    3907    ANDIA	0x7
  0113    3E0F    ADDIA	0xF
  0114    0084    LD	0x4,A
  0115    158A    SETB	0xA,3
  0116    2000    CALL	0x0
  0117    118A    CLRB	0xA,3
  0118    00E9    LD	0x69,A
  0119    1003    CLRB	0x3,0
  011A    0D6D    RLCA	0x6D
  011B    3EB2    ADDIA	0xB2
  011C    0084    LD	0x4,A
  011D    3003    LDIA	0x3
  011E    0A84    INCR	0x4
  011F    1003    CLRB	0x3,0
  0120    1383    CLRB	0x3,7
  0121    0C80    RRCR	0x0
  0122    0384    DECR	0x4
  0123    0C80    RRCR	0x0
  0124    3EFF    ADDIA	0xFF
  0125    1D03    SNZB	0x3,2
  0126    291E    JP	0x11E
  0127    1003    CLRB	0x3,0
  0128    0D6D    RLCA	0x6D
  0129    3EB2    ADDIA	0xB2
  012A    0084    LD	0x4,A
  012B    0800    LD	A,0x0
  012C    00EB    LD	0x6B,A
  012D    0A84    INCR	0x4
  012E    0800    LD	A,0x0
  012F    00EC    LD	0x6C,A
  0130    086D    LD	A,0x6D
  0131    3E17    ADDIA	0x17
  0132    0084    LD	0x4,A
  0133    158A    SETB	0xA,3
  0134    2000    CALL	0x0
  0135    118A    CLRB	0xA,3
  0136    00EA    LD	0x6A,A
  0137    00E7    LD	0x67,A
  0138    01E8    CLR	0x68
  0139    086B    LD	A,0x6B
  013A    07E7    ADDR	0x67
  013B    1803    SZB	0x3,0
  013C    0AE8    INCR	0x68
  013D    086C    LD	A,0x6C
  013E    07E8    ADDR	0x68
  013F    086D    LD	A,0x6D
  0140    21EC    CALL	0x1EC
  0141    118A    CLRB	0xA,3
  0142    3A00    XORIA	0x0
  0143    1003    CLRB	0x3,0
  0144    1D03    SNZB	0x3,2
  0145    29A0    JP	0x1A0
  0146    0D6D    RLCA	0x6D
  0147    3EA6    ADDIA	0xA6
  0148    0084    LD	0x4,A
  0149    1383    CLRB	0x3,7
  014A    0800    LD	A,0x0
  014B    00E5    LD	0x65,A
  014C    0A84    INCR	0x4
  014D    0800    LD	A,0x0
  014E    00E6    LD	0x66,A
  014F    1003    CLRB	0x3,0
  0150    0D6D    RLCA	0x6D
  0151    3EA0    ADDIA	0xA0
  0152    279B    CALL	0x79B
  0153    118A    CLRB	0xA,3
  0154    0268    SUBA	0x68
  0155    1D03    SNZB	0x3,2
  0156    2959    JP	0x159
  0157    0875    LD	A,0x75
  0158    0267    SUBA	0x67
  0159    1803    SZB	0x3,0
  015A    2968    JP	0x168
  015B    1003    CLRB	0x3,0
  015C    0D6D    RLCA	0x6D
  015D    3EA0    ADDIA	0xA0
  015E    279B    CALL	0x79B
  015F    118A    CLRB	0xA,3
  0160    086B    LD	A,0x6B
  0161    0275    SUBA	0x75
  0162    00EB    LD	0x6B,A
  0163    086C    LD	A,0x6C
  0164    1C03    SNZB	0x3,0
  0165    0A6C    INCA	0x6C
  0166    0276    SUBA	0x76
  0167    298C    JP	0x18C
  0168    0866    LD	A,0x66
  0169    0268    SUBA	0x68
  016A    1D03    SNZB	0x3,2
  016B    296E    JP	0x16E
  016C    0865    LD	A,0x65
  016D    0267    SUBA	0x67
  016E    1803    SZB	0x3,0
  016F    29E4    JP	0x1E4
  0170    1003    CLRB	0x3,0
  0171    0D6D    RLCA	0x6D
  0172    3E20    ADDIA	0x20
  0173    279B    CALL	0x79B
  0174    118A    CLRB	0xA,3
  0175    0268    SUBA	0x68
  0176    1D03    SNZB	0x3,2
  0177    297A    JP	0x17A
  0178    0875    LD	A,0x75
  0179    0267    SUBA	0x67
  017A    1803    SZB	0x3,0
  017B    29E4    JP	0x1E4
  017C    1003    CLRB	0x3,0
  017D    0D6D    RLCA	0x6D
  017E    3EA0    ADDIA	0xA0
  017F    0084    LD	0x4,A
  0180    0865    LD	A,0x65
  0181    0080    LD	0x0,A
  0182    0A84    INCR	0x4
  0183    0866    LD	A,0x66
  0184    0080    LD	0x0,A
  0185    086B    LD	A,0x6B
  0186    0265    SUBA	0x65
  0187    00EB    LD	0x6B,A
  0188    086C    LD	A,0x6C
  0189    1C03    SNZB	0x3,0
  018A    0A6C    INCA	0x6C
  018B    0266    SUBA	0x66
  018C    00EC    LD	0x6C,A
  018D    086D    LD	A,0x6D
  018E    3EB8    ADDIA	0xB8
  018F    0084    LD	0x4,A
  0190    0180    CLR	0x0
  0191    086C    LD	A,0x6C
  0192    1903    SZB	0x3,2
  0193    2996    JP	0x196
  0194    30FF    LDIA	0xFF
  0195    2997    JP	0x197
  0196    086B    LD	A,0x6B
  0197    00EA    LD	0x6A,A
  0198    0247    SUBA	0x47
  0199    1803    SZB	0x3,0
  019A    299E    JP	0x19E
  019B    086A    LD	A,0x6A
  019C    00C7    LD	0x47,A
  019D    29DE    JP	0x1DE
  019E    0AC8    INCR	0x48
  019F    29E4    JP	0x1E4
  01A0    0D6D    RLCA	0x6D
  01A1    3EA0    ADDIA	0xA0
  01A2    0084    LD	0x4,A
  01A3    1383    CLRB	0x3,7
  01A4    0800    LD	A,0x0
  01A5    00F5    LD	0x75,A
  01A6    0A84    INCR	0x4
  01A7    0800    LD	A,0x0
  01A8    00F6    LD	0x76,A
  01A9    0875    LD	A,0x75
  01AA    3E01    ADDIA	0x1
  01AB    00F7    LD	0x77,A
  01AC    0876    LD	A,0x76
  01AD    1803    SZB	0x3,0
  01AE    3E01    ADDIA	0x1
  01AF    00F8    LD	0x78,A
  01B0    0868    LD	A,0x68
  01B1    0278    SUBA	0x78
  01B2    1D03    SNZB	0x3,2
  01B3    29B6    JP	0x1B6
  01B4    0867    LD	A,0x67
  01B5    0277    SUBA	0x77
  01B6    1C03    SNZB	0x3,0
  01B7    29E4    JP	0x1E4
  01B8    1003    CLRB	0x3,0
  01B9    0D6D    RLCA	0x6D
  01BA    3EA6    ADDIA	0xA6
  01BB    0084    LD	0x4,A
  01BC    0800    LD	A,0x0
  01BD    2789    CALL	0x789
  01BE    118A    CLRB	0xA,3
  01BF    1C03    SNZB	0x3,0
  01C0    29CA    JP	0x1CA
  01C1    1003    CLRB	0x3,0
  01C2    0D6D    RLCA	0x6D
  01C3    3E20    ADDIA	0x20
  01C4    0084    LD	0x4,A
  01C5    0800    LD	A,0x0
  01C6    2789    CALL	0x789
  01C7    118A    CLRB	0xA,3
  01C8    1803    SZB	0x3,0
  01C9    29D6    JP	0x1D6
  01CA    086D    LD	A,0x6D
  01CB    3EB8    ADDIA	0xB8
  01CC    0084    LD	0x4,A
  01CD    3009    LDIA	0x9
  01CE    0A80    INCR	0x0
  01CF    0200    SUBA	0x0
  01D0    1C03    SNZB	0x3,0
  01D1    29DA    JP	0x1DA
  01D2    086D    LD	A,0x6D
  01D3    256D    CALL	0x56D
  01D4    118A    CLRB	0xA,3
  01D5    29E4    JP	0x1E4
  01D6    086D    LD	A,0x6D
  01D7    3EB8    ADDIA	0xB8
  01D8    0084    LD	0x4,A
  01D9    0180    CLR	0x0
  01DA    0829    LD	A,0x29
  01DB    0428    ORA	0x28
  01DC    1D03    SNZB	0x3,2
  01DD    29E4    JP	0x1E4
  01DE    0869    LD	A,0x69
  01DF    00F2    LD	0x72,A
  01E0    01F3    CLR	0x73
  01E1    086D    LD	A,0x6D
  01E2    2200    CALL	0x200
  01E3    118A    CLRB	0xA,3
  01E4    3003    LDIA	0x3
  01E5    1283    CLRB	0x3,5
  01E6    1303    CLRB	0x3,6
  01E7    0AED    INCR	0x6D
  01E8    026D    SUBA	0x6D
  01E9    1803    SZB	0x3,0
  01EA    0008    RET
  01EB    2911    JP	0x111
  01EC    00F3    LD	0x73,A
  01ED    3907    ANDIA	0x7
  01EE    3E0F    ADDIA	0xF
  01EF    0084    LD	0x4,A
  01F0    158A    SETB	0xA,3
  01F1    2000    CALL	0x0
  01F2    118A    CLRB	0xA,3
  01F3    00F2    LD	0x72,A
  01F4    1DF3    SNZB	0x73,3
  01F5    29FA    JP	0x1FA
  01F6    1283    CLRB	0x3,5
  01F7    1303    CLRB	0x3,6
  01F8    0843    LD	A,0x43
  01F9    29FD    JP	0x1FD
  01FA    1283    CLRB	0x3,5
  01FB    1303    CLRB	0x3,6
  01FC    0842    LD	A,0x42
  01FD    05F2    ANDR	0x72
  01FE    0872    LD	A,0x72
  01FF    0008    RET
  0200    00F4    LD	0x74,A
  0201    0AC8    INCR	0x48
  0202    01A8    CLR	0x28
  0203    01A9    CLR	0x29
  0204    1DF4    SNZB	0x74,3
  0205    2A09    JP	0x209
  0206    0872    LD	A,0x72
  0207    00A9    LD	0x29,A
  0208    0008    RET
  0209    0872    LD	A,0x72
  020A    00A8    LD	0x28,A
  020B    0008    RET
  020C    1283    CLRB	0x3,5
  020D    1303    CLRB	0x3,6
  020E    01C2    CLR	0x42
  020F    01C3    CLR	0x43
  0210    01F3    CLR	0x73
  0211    1003    CLRB	0x3,0
  0212    0D73    RLCA	0x73
  0213    3EB2    ADDIA	0xB2
  0214    0084    LD	0x4,A
  0215    1383    CLRB	0x3,7
  0216    0180    CLR	0x0
  0217    0A84    INCR	0x4
  0218    0180    CLR	0x0
  0219    0873    LD	A,0x73
  021A    256D    CALL	0x56D
  021B    118A    CLRB	0xA,3
  021C    3003    LDIA	0x3
  021D    0AF3    INCR	0x73
  021E    0273    SUBA	0x73
  021F    1803    SZB	0x3,0
  0220    0008    RET
  0221    2A11    JP	0x211
  04CF    0064    CLRWDT
  04D0    1283    CLRB	0x3,5
  04D1    1303    CLRB	0x3,6
  04D2    0181    CLR	0x1
  04D3    3007    LDIA	0x7
  04D4    1683    SETB	0x3,5
  04D5    0481    ORR	0x1
  04D6    1581    SETB	0x1,3
  04D7    0064    CLRWDT
  04D8    300A    LDIA	0xA
  04D9    1683    SETB	0x3,5
  04DA    1303    CLRB	0x3,6
  04DB    0081    LD	0x1,A
  04DC    0064    CLRWDT
  04DD    1683    SETB	0x3,5
  04DE    1303    CLRB	0x3,6
  04DF    0192    CLR	0x12
  04E0    0197    CLR	0x17
  04E1    3001    LDIA	0x1
  04E2    0088    LD	0x8,A
  04E3    0063    STOP
  04E4    0000    NOP
  04E5    0064    CLRWDT
  04E6    3071    LDIA	0x71
  04E7    1683    SETB	0x3,5
  04E8    1303    CLRB	0x3,6
  04E9    0088    LD	0x8,A
  04EA    255E    CALL	0x55E
  04EB    118A    CLRB	0xA,3
  04EC    1479    SETB	0x79,0
  04ED    2582    CALL	0x582
  04EE    118A    CLRB	0xA,3
  04EF    1283    CLRB	0x3,5
  04F0    1303    CLRB	0x3,6
  04F1    27E6    CALL	0x7E6
  04F2    118A    CLRB	0xA,3
  04F3    180B    SZB	0xB,0
  04F4    2CFA    JP	0x4FA
  04F5    1703    SETB	0x3,6
  04F6    1907    SZB	0x7,2
  04F7    2CFA    JP	0x4FA
  04F8    1C87    SNZB	0x7,1
  04F9    2D01    JP	0x501
  04FA    255E    CALL	0x55E
  04FB    1283    CLRB	0x3,5
  04FC    1303    CLRB	0x3,6
  04FD    01C8    CLR	0x48
  04FE    1279    CLRB	0x79,4
  04FF    11F9    CLRB	0x79,3
  0500    0008    RET
  0501    1303    CLRB	0x3,6
  0502    086B    LD	A,0x6B
  0503    3907    ANDIA	0x7
  0504    1003    CLRB	0x3,0
  0505    1903    SZB	0x3,2
  0506    2D58    JP	0x558
  0507    0D6D    RLCA	0x6D
  0508    3EB2    ADDIA	0xB2
  0509    0084    LD	0x4,A
  050A    1383    CLRB	0x3,7
  050B    0800    LD	A,0x0
  050C    00E9    LD	0x69,A
  050D    0A84    INCR	0x4
  050E    0800    LD	A,0x0
  050F    00EA    LD	0x6A,A
  0510    00E8    LD	0x68,A
  0511    0869    LD	A,0x69
  0512    00E7    LD	0x67,A
  0513    0869    LD	A,0x69
  0514    046A    ORA	0x6A
  0515    1903    SZB	0x3,2
  0516    2D57    JP	0x557
  0517    086D    LD	A,0x6D
  0518    3E17    ADDIA	0x17
  0519    0084    LD	0x4,A
  051A    158A    SETB	0xA,3
  051B    2000    CALL	0x0
  051C    118A    CLRB	0xA,3
  051D    07E7    ADDR	0x67
  051E    1803    SZB	0x3,0
  051F    0AE8    INCR	0x68
  0520    1003    CLRB	0x3,0
  0521    0D6D    RLCA	0x6D
  0522    3EA6    ADDIA	0xA6
  0523    27B8    CALL	0x7B8
  0524    118A    CLRB	0xA,3
  0525    0868    LD	A,0x68
  0526    0266    SUBA	0x66
  0527    1D03    SNZB	0x3,2
  0528    2D2B    JP	0x52B
  0529    0867    LD	A,0x67
  052A    0265    SUBA	0x65
  052B    1C03    SNZB	0x3,0
  052C    2D3F    JP	0x53F
  052D    27E6    CALL	0x7E6
  052E    118A    CLRB	0xA,3
  052F    086B    LD	A,0x6B
  0530    3907    ANDIA	0x7
  0531    1D03    SNZB	0x3,2
  0532    2D36    JP	0x536
  0533    086D    LD	A,0x6D
  0534    256D    CALL	0x56D
  0535    118A    CLRB	0xA,3
  0536    1283    CLRB	0x3,5
  0537    3003    LDIA	0x3
  0538    1303    CLRB	0x3,6
  0539    1003    CLRB	0x3,0
  053A    27EB    CALL	0x7EB
  053B    118A    CLRB	0xA,3
  053C    1803    SZB	0x3,0
  053D    2CFA    JP	0x4FA
  053E    2D2F    JP	0x52F
  053F    0D6D    RLCA	0x6D
  0540    3E20    ADDIA	0x20
  0541    27B8    CALL	0x7B8
  0542    118A    CLRB	0xA,3
  0543    1003    CLRB	0x3,0
  0544    0D6D    RLCA	0x6D
  0545    3EA6    ADDIA	0xA6
  0546    27A2    CALL	0x7A2
  0547    118A    CLRB	0xA,3
  0548    0800    LD	A,0x0
  0549    00E5    LD	0x65,A
  054A    0A84    INCR	0x4
  054B    0800    LD	A,0x0
  054C    00E6    LD	0x66,A
  054D    1003    CLRB	0x3,0
  054E    0D6D    RLCA	0x6D
  054F    3E20    ADDIA	0x20
  0550    27A2    CALL	0x7A2
  0551    118A    CLRB	0xA,3
  0552    0869    LD	A,0x69
  0553    0080    LD	0x0,A
  0554    0A84    INCR	0x4
  0555    086A    LD	A,0x6A
  0556    0080    LD	0x0,A
  0557    1003    CLRB	0x3,0
  0558    3003    LDIA	0x3
  0559    27EB    CALL	0x7EB
  055A    118A    CLRB	0xA,3
  055B    1803    SZB	0x3,0
  055C    2CCF    JP	0x4CF
  055D    2D01    JP	0x501
  055E    01F2    CLR	0x72
  055F    1003    CLRB	0x3,0
  0560    0D72    RLCA	0x72
  0561    3EB2    ADDIA	0xB2
  0562    0084    LD	0x4,A
  0563    3003    LDIA	0x3
  0564    1383    CLRB	0x3,7
  0565    0180    CLR	0x0
  0566    0A84    INCR	0x4
  0567    0180    CLR	0x0
  0568    0AF2    INCR	0x72
  0569    0272    SUBA	0x72
  056A    1803    SZB	0x3,0
  056B    0008    RET
  056C    2D5F    JP	0x55F
  056D    00F2    LD	0x72,A
  056E    1003    CLRB	0x3,0
  056F    0D72    RLCA	0x72
  0570    3EAC    ADDIA	0xAC
  0571    0084    LD	0x4,A
  0572    1383    CLRB	0x3,7
  0573    27C7    CALL	0x7C7
  0574    118A    CLRB	0xA,3
  0575    3E20    ADDIA	0x20
  0576    0084    LD	0x4,A
  0577    27C7    CALL	0x7C7
  0578    118A    CLRB	0xA,3
  0579    3EA6    ADDIA	0xA6
  057A    0084    LD	0x4,A
  057B    27C7    CALL	0x7C7
  057C    3EA0    ADDIA	0xA0
  057D    0084    LD	0x4,A
  057E    0180    CLR	0x0
  057F    0A84    INCR	0x4
  0580    0180    CLR	0x0
  0581    0008    RET
  0582    01F7    CLR	0x77
  0583    01F5    CLR	0x75
  0584    0AF5    INCR	0x75
  0585    01F6    CLR	0x76
  0586    1C79    SNZB	0x79,0
  0587    2D8C    JP	0x58C
  0588    0875    LD	A,0x75
  0589    3907    ANDIA	0x7
  058A    1903    SZB	0x3,2
  058B    2DD7    JP	0x5D7
  058C    1683    SETB	0x3,5
  058D    1303    CLRB	0x3,6
  058E    0192    CLR	0x12
  058F    0193    CLR	0x13
  0590    3001    LDIA	0x1
  0591    0097    LD	0x17,A
  0592    1306    CLRB	0x6,6
  0593    1283    CLRB	0x3,5
  0594    1306    CLRB	0x6,6
  0595    0000    NOP
  0596    0000    NOP
  0597    0000    NOP
  0598    0000    NOP
  0599    0000    NOP
  059A    0000    NOP
  059B    0000    NOP
  059C    0000    NOP
  059D    1683    SETB	0x3,5
  059E    1303    CLRB	0x3,6
  059F    1706    SETB	0x6,6
  05A0    0877    LD	A,0x77
  05A1    3E1A    ADDIA	0x1A
  05A2    0084    LD	0x4,A
  05A3    158A    SETB	0xA,3
  05A4    2000    CALL	0x0
  05A5    118A    CLRB	0xA,3
  05A6    0092    LD	0x12,A
  05A7    0877    LD	A,0x77
  05A8    3E1D    ADDIA	0x1D
  05A9    0084    LD	0x4,A
  05AA    158A    SETB	0xA,3
  05AB    2000    CALL	0x0
  05AC    118A    CLRB	0xA,3
  05AD    0093    LD	0x13,A
  05AE    0000    NOP
  05AF    0000    NOP
  05B0    0000    NOP
  05B1    0000    NOP
  05B2    1683    SETB	0x3,5
  05B3    1303    CLRB	0x3,6
  05B4    1412    SETB	0x12,0
  05B5    30D0    LDIA	0xD0
  05B6    00F3    LD	0x73,A
  05B7    3007    LDIA	0x7
  05B8    00F4    LD	0x74,A
  05B9    1B92    SZB	0x12,7
  05BA    2DC7    JP	0x5C7
  05BB    3001    LDIA	0x1
  05BC    02F3    SUBR	0x73
  05BD    1C03    SNZB	0x3,0
  05BE    03F4    DECR	0x74
  05BF    0873    LD	A,0x73
  05C0    0474    ORA	0x74
  05C1    1D03    SNZB	0x3,2
  05C2    2DB9    JP	0x5B9
  05C3    30FF    LDIA	0xFF
  05C4    1283    CLRB	0x3,5
  05C5    00C8    LD	0x48,A
  05C6    2D5E    JP	0x55E
  05C7    1003    CLRB	0x3,0
  05C8    0D77    RLCA	0x77
  05C9    3EB2    ADDIA	0xB2
  05CA    0084    LD	0x4,A
  05CB    0814    LD	A,0x14
  05CC    1383    CLRB	0x3,7
  05CD    0780    ADDR	0x0
  05CE    0F84    SZINCR	0x4
  05CF    0800    LD	A,0x0
  05D0    1803    SZB	0x3,0
  05D1    0A00    INCA	0x0
  05D2    00FF    LD	0x7F,A
  05D3    0815    LD	A,0x15
  05D4    077F    ADDA	0x7F
  05D5    0080    LD	0x0,A
  05D6    0384    DECR	0x4
  05D7    3003    LDIA	0x3
  05D8    1003    CLRB	0x3,0
  05D9    0DF5    RLCR	0x75
  05DA    0DF6    RLCR	0x76
  05DB    0AF7    INCR	0x77
  05DC    0277    SUBA	0x77
  05DD    1C03    SNZB	0x3,0
  05DE    2D86    JP	0x586
  05DF    1079    CLRB	0x79,0
  05E0    0008    RET
  05E1    0829    LD	A,0x29
  05E2    0428    ORA	0x28
  05E3    1903    SZB	0x3,2
  05E4    2E01    JP	0x601
  05E5    01C4    CLR	0x44
  05E6    0828    LD	A,0x28
  05E7    062A    XORA	0x2A
  05E8    1D03    SNZB	0x3,2
  05E9    2DFA    JP	0x5FA
  05EA    0829    LD	A,0x29
  05EB    062B    XORA	0x2B
  05EC    1D03    SNZB	0x3,2
  05ED    2DFA    JP	0x5FA
  05EE    0AC5    INCR	0x45
  05EF    1903    SZB	0x3,2
  05F0    0008    RET
  05F1    01C5    CLR	0x45
  05F2    0828    LD	A,0x28
  05F3    00C2    LD	0x42,A
  05F4    0829    LD	A,0x29
  05F5    00C3    LD	0x43,A
  05F6    1979    SZB	0x79,2
  05F7    0008    RET
  05F8    1579    SETB	0x79,2
  05F9    2E30    JP	0x630
  05FA    1179    CLRB	0x79,2
  05FB    0828    LD	A,0x28
  05FC    00AA    LD	0x2A,A
  05FD    0829    LD	A,0x29
  05FE    00AB    LD	0x2B,A
  05FF    01C5    CLR	0x45
  0600    0008    RET
  0601    01C5    CLR	0x45
  0602    01AA    CLR	0x2A
  0603    01AB    CLR	0x2B
  0604    3002    LDIA	0x2
  0605    0AC4    INCR	0x44
  0606    0244    SUBA	0x44
  0607    1C03    SNZB	0x3,0
  0608    0008    RET
  0609    01C4    CLR	0x44
  060A    01C2    CLR	0x42
  060B    01C3    CLR	0x43
  060C    1179    CLRB	0x79,2
  060D    0008    RET
  061C    1283    CLRB	0x3,5
  061D    1303    CLRB	0x3,6
  061E    0843    LD	A,0x43
  061F    0442    ORA	0x42
  0620    1903    SZB	0x3,2
  0621    2E2D    JP	0x62D
  0622    0AA6    INCR	0x26
  0623    1903    SZB	0x3,2
  0624    0AA7    INCR	0x27
  0625    303A    LDIA	0x3A
  0626    0227    SUBA	0x27
  0627    3098    LDIA	0x98
  0628    1903    SZB	0x3,2
  0629    0226    SUBA	0x26
  062A    1C03    SNZB	0x3,0
  062B    0008    RET
  062C    14F9    SETB	0x79,1
  062D    01A6    CLR	0x26
  062E    01A7    CLR	0x27
  062F    0008    RET
  0630    01F4    CLR	0x74
  0631    0874    LD	A,0x74
  0632    21EC    CALL	0x1EC
  0633    118A    CLRB	0xA,3
  0634    3A00    XORIA	0x0
  0635    1D03    SNZB	0x3,2
  0636    2E3A    JP	0x63A
  0637    0874    LD	A,0x74
  0638    256D    CALL	0x56D
  0639    118A    CLRB	0xA,3
  063A    3003    LDIA	0x3
  063B    0AF4    INCR	0x74
  063C    0274    SUBA	0x74
  063D    1803    SZB	0x3,0
  063E    0008    RET
  063F    2E31    JP	0x631
---- stringtab ------------------------------------------------------------------
  0800    3008    LDIA	0x8
  0801    008A    LD	0xA,A
  0802    0804    LD	A,0x4
  0803    0A84    INCR	0x4
  0804    0782    ADDR	0x2
  0805    3400    RET	0x0
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280B    JP	0xB
  000B    118A    CLRB	0xA,3
  000C    280D    JP	0xD
---- start_initialization ------------------------------------------------------------------
  000D    3020    LDIA	0x20
  000E    01F9    CLR	0x79
  000F    01FA    CLR	0x7A
  0010    01FB    CLR	0x7B
  0011    1383    CLRB	0x3,7
  0012    0084    LD	0x4,A
  0013    3065    LDIA	0x65
  0014    118A    CLRB	0xA,3
  0015    27F0    CALL	0x7F0
  0016    118A    CLRB	0xA,3
  0017    30A0    LDIA	0xA0
  0018    0084    LD	0x4,A
  0019    30BB    LDIA	0xBB
  001A    118A    CLRB	0xA,3
  001B    27F0    CALL	0x7F0
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F0    LD	0x70,A
  0007    080A    LD	A,0xA
  0008    00F1    LD	0x71,A
  0009    158A    SETB	0xA,3
  000A    2D6D    JP	0x56D
---- common_function ------------------------------------------------------------------
  001C    0183    CLR	0x3
  001D    158A    SETB	0xA,3
  001E    2D8E    JP	0x58E
  077B    0800    LD	A,0x0
  077C    00E7    LD	0x67,A
  077D    0A84    INCR	0x4
  077E    0800    LD	A,0x0
  077F    00E8    LD	0x68,A
  0780    0865    LD	A,0x65
  0781    02E7    SUBR	0x67
  0782    0866    LD	A,0x66
  0783    1C03    SNZB	0x3,0
  0784    03E8    DECR	0x68
  0785    02E8    SUBR	0x68
  0786    3000    LDIA	0x0
  0787    0268    SUBA	0x68
  0788    3402    RET	0x2
  0789    00F5    LD	0x75,A
  078A    0A84    INCR	0x4
  078B    0800    LD	A,0x0
  078C    00F6    LD	0x76,A
  078D    086A    LD	A,0x6A
  078E    0775    ADDA	0x75
  078F    00F7    LD	0x77,A
  0790    0876    LD	A,0x76
  0791    1803    SZB	0x3,0
  0792    0A76    INCA	0x76
  0793    00F8    LD	0x78,A
  0794    086C    LD	A,0x6C
  0795    0278    SUBA	0x78
  0796    1D03    SNZB	0x3,2
  0797    0008    RET
  0798    086B    LD	A,0x6B
  0799    0277    SUBA	0x77
  079A    0008    RET
  079B    0084    LD	0x4,A
  079C    0800    LD	A,0x0
  079D    00F5    LD	0x75,A
  079E    0A84    INCR	0x4
  079F    0800    LD	A,0x0
  07A0    00F6    LD	0x76,A
  07A1    0008    RET
  07A2    0084    LD	0x4,A
  07A3    0865    LD	A,0x65
  07A4    0080    LD	0x0,A
  07A5    0A84    INCR	0x4
  07A6    0866    LD	A,0x66
  07A7    0080    LD	0x0,A
  07A8    1003    CLRB	0x3,0
  07A9    0D6D    RLCA	0x6D
  07AA    3EAC    ADDIA	0xAC
  07AB    0084    LD	0x4,A
  07AC    0008    RET
  07AD    0084    LD	0x4,A
  07AE    0874    LD	A,0x74
  07AF    0080    LD	0x0,A
  07B0    0A84    INCR	0x4
  07B1    0875    LD	A,0x75
  07B2    0080    LD	0x0,A
  07B3    1003    CLRB	0x3,0
  07B4    0D69    RLCA	0x69
  07B5    3EAC    ADDIA	0xAC
  07B6    0084    LD	0x4,A
  07B7    0008    RET
  07B8    0084    LD	0x4,A
  07B9    0800    LD	A,0x0
  07BA    00E5    LD	0x65,A
  07BB    0A84    INCR	0x4
  07BC    0800    LD	A,0x0
  07BD    00E6    LD	0x66,A
  07BE    0008    RET
  07BF    0800    LD	A,0x0
  07C0    00F4    LD	0x74,A
  07C1    0A84    INCR	0x4
  07C2    0800    LD	A,0x0
  07C3    00F5    LD	0x75,A
  07C4    1003    CLRB	0x3,0
  07C5    0D69    RLCA	0x69
  07C6    0008    RET
  07C7    0180    CLR	0x0
  07C8    0A84    INCR	0x4
  07C9    0180    CLR	0x0
  07CA    1003    CLRB	0x3,0
  07CB    0D72    RLCA	0x72
  07CC    0008    RET
  07CD    0085    LD	0x5,A
  07CE    1283    CLRB	0x3,5
  07CF    0185    CLR	0x5
  07D0    3018    LDIA	0x18
  07D1    1683    SETB	0x3,5
  07D2    0086    LD	0x6,A
  07D3    0008    RET
  07D4    1683    SETB	0x3,5
  07D5    1703    SETB	0x3,6
  07D6    1405    SETB	0x5,0
  07D7    1283    CLRB	0x3,5
  07D8    1303    CLRB	0x3,6
  07D9    0008    RET
  07DA    0865    LD	A,0x65
  07DB    0080    LD	0x0,A
  07DC    0A84    INCR	0x4
  07DD    0866    LD	A,0x66
  07DE    0080    LD	0x0,A
  07DF    0008    RET
  07E0    1303    CLRB	0x3,6
  07E1    008D    LD	0xD,A
  07E2    30FA    LDIA	0xFA
  07E3    1683    SETB	0x3,5
  07E4    0091    LD	0x11,A
  07E5    0008    RET
  07E6    01ED    CLR	0x6D
  07E7    01EB    CLR	0x6B
  07E8    0AEB    INCR	0x6B
  07E9    01EC    CLR	0x6C
  07EA    0008    RET
  07EB    0DEB    RLCR	0x6B
  07EC    0DEC    RLCR	0x6C
  07ED    0AED    INCR	0x6D
  07EE    026D    SUBA	0x6D
  07EF    0008    RET
  07F0    0064    CLRWDT
  07F1    0180    CLR	0x0
  07F2    0A84    INCR	0x4
  07F3    0604    XORA	0x4
  07F4    1903    SZB	0x3,2
  07F5    3400    RET	0x0
  07F6    0604    XORA	0x4
  07F7    2FF1    JP	0x7F1
  0806    343F    RET	0x3F
  0807    3406    RET	0x6
  0808    345B    RET	0x5B
  0809    344F    RET	0x4F
  080A    3466    RET	0x66
  080B    346D    RET	0x6D
  080C    347D    RET	0x7D
  080D    3407    RET	0x7
  080E    347F    RET	0x7F
  080F    346F    RET	0x6F
  0810    3471    RET	0x71
  0811    3479    RET	0x79
  0812    3450    RET	0x50
  0813    3473    RET	0x73
  0814    3401    RET	0x1
  0815    3402    RET	0x2
  0816    3404    RET	0x4
  0817    3408    RET	0x8
  0818    3410    RET	0x10
  0819    3420    RET	0x20
  081A    3440    RET	0x40
  081B    3480    RET	0x80
  081C    340A    RET	0xA
  081D    340A    RET	0xA
  081E    340A    RET	0xA
  081F    343A    RET	0x3A
  0820    341A    RET	0x1A
  0821    3402    RET	0x2
  0822    3458    RET	0x58
  0823    3459    RET	0x59
  0824    345A    RET	0x5A
