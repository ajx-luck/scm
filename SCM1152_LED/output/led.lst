

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 04 13:14:58 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1152A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	psect	pa_nodes0,global,class=CODE,delta=2
    13                           	dabs	1,0x4E,2
    14  0000                     
    15                           ; Version 1.45
    16                           ; Generated 16/11/2017 GMT
    17                           ; 
    18                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F887 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     
    50                           	psect	text0
    51  0000                     __ptext0:	
    52  000F                     _TMR0PRD	set	15
    53  000E                     _IOCB	set	14
    54  000D                     _WPUB	set	13
    55  000B                     _PDCONB	set	11
    56  0009                     _INTCON	set	9
    57  0008                     _OSCCON	set	8
    58  0007                     _OPTION_REG	set	7
    59  0006                     _TRISB	set	6
    60  0005                     _PORTB	set	5
    61  0001                     _TMR0	set	1
    62  004A                     _T0IF	set	74
    63                           
    64                           	psect	cinit
    65  000B                     start_initialization:	
    66                           ; #config settings
    67                           
    68  000B                     __initialization:	
    69                           
    70                           ; Clear objects allocated to COMMON
    71  000B  01C4               	clrf	__pbssCOMMON& (0+127)
    72  000C                     end_of_initialization:	
    73                           ;End of C runtime variable initialization code
    74                           
    75  000C                     __end_of__initialization:	
    76  000C  0183               	clrf	3
    77  000D  280E               	ljmp	_main	;jump to C main() function
    78                           
    79                           	psect	bssCOMMON
    80  0044                     __pbssCOMMON:	
    81  0044                     _timeoutFlag:	
    82  0044                     	ds	1
    83                           
    84                           	psect	cstackCOMMON
    85  0040                     __pcstackCOMMON:	
    86  0040                     ?_Init_System:	
    87  0040                     ?_main:	
    88                           ; 1 bytes @ 0x0
    89                           
    90  0040                     ?_Timer0_Isr:	
    91                           ; 1 bytes @ 0x0
    92                           
    93  0040                     ??_Timer0_Isr:	
    94                           ; 1 bytes @ 0x0
    95                           
    96                           
    97                           ; 1 bytes @ 0x0
    98  0040                     	ds	2
    99  0042                     ??_Init_System:	
   100  0042                     ??_main:	
   101                           ; 1 bytes @ 0x2
   102                           
   103  0042                     main@count:	
   104                           ; 1 bytes @ 0x2
   105                           
   106                           
   107                           ; 2 bytes @ 0x2
   108  0042                     	ds	2
   109                           
   110                           	psect	maintext
   111  000E                     __pmaintext:	
   112 ;;
   113 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   114 ;;
   115 ;; *************** function _main *****************
   116 ;; Defined at:
   117 ;;		line 27 in file "E:\project\scm\SCM1152_LED\led.c"
   118 ;; Parameters:    Size  Location     Type
   119 ;;		None
   120 ;; Auto vars:     Size  Location     Type
   121 ;;  count           2    2[COMMON] unsigned int 
   122 ;; Return value:  Size  Location     Type
   123 ;;                  1    wreg      void 
   124 ;; Registers used:
   125 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   126 ;; Tracked objects:
   127 ;;		On entry : B00/0
   128 ;;		On exit  : 0/0
   129 ;;		Unchanged: 0/0
   130 ;; Data sizes:     COMMON   BANK0
   131 ;;      Params:         0       0
   132 ;;      Locals:         2       0
   133 ;;      Temps:          0       0
   134 ;;      Totals:         2       0
   135 ;;Total ram usage:        2 bytes
   136 ;; Hardware stack levels required when called:    2
   137 ;; This function calls:
   138 ;;		_Init_System
   139 ;; This function is called by:
   140 ;;		Startup code after reset
   141 ;; This function uses a non-reentrant model
   142 ;;
   143                           
   144                           
   145                           ;psect for function _main
   146  000E                     _main:	
   147                           
   148                           ;led.c: 29: Init_System();
   149                           
   150                           ;incstack = 0
   151                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   152  000E  204E               	fcall	_Init_System
   153                           
   154                           ;led.c: 30: unsigned int count = 0;
   155  000F  01C2               	clrf	main@count
   156  0010  01C3               	clrf	main@count+1
   157  0011                     l706:	
   158                           
   159                           ;led.c: 32: {
   160                           ;led.c: 34: if(timeoutFlag)
   161  0011  0844               	movf	_timeoutFlag,w
   162  0012  1903               	btfsc	3,2
   163  0013  2811               	goto	l706
   164                           
   165                           ;led.c: 35: {
   166                           ;led.c: 36: timeoutFlag = 0;
   167  0014  01C4               	clrf	_timeoutFlag
   168  0015  0064               	clrwdt	;# 
   169                           
   170                           ;led.c: 38: if(count == 500)
   171  0016  30F4               	movlw	244
   172  0017  0642               	xorwf	main@count,w
   173  0018  1D03               	skipz
   174  0019  282F               	goto	l714
   175  001A  0343               	decf	main@count+1,w
   176  001B  1D03               	btfss	3,2
   177  001C  282F               	goto	l714
   178                           
   179                           ;led.c: 39: {
   180                           ;led.c: 40: count = 0;
   181  001D  01C2               	clrf	main@count
   182  001E  01C3               	clrf	main@count+1
   183  001F  282F               	goto	l714
   184  0020                     l292:	
   185                           ;led.c: 45: {
   186                           ;led.c: 46: case 0:
   187                           
   188                           
   189                           ;led.c: 47: PORTB&=~(1<<4);
   190  0020  1205               	bcf	5,4	;volatile
   191                           
   192                           ;led.c: 48: PORTB|=(1<<2);
   193  0021  1505               	bsf	5,2	;volatile
   194                           
   195                           ;led.c: 49: break;
   196  0022  284A               	goto	l716
   197  0023                     l294:	
   198                           ;led.c: 50: case 100:
   199                           
   200                           
   201                           ;led.c: 51: PORTB&=~(1<<3);
   202  0023  1185               	bcf	5,3	;volatile
   203                           
   204                           ;led.c: 52: PORTB|=(1<<1);
   205  0024  1485               	bsf	5,1	;volatile
   206                           
   207                           ;led.c: 53: break;
   208  0025  284A               	goto	l716
   209  0026                     l295:	
   210                           ;led.c: 54: case 200:
   211                           
   212                           
   213                           ;led.c: 55: PORTB&=~(1<<2);
   214  0026  1105               	bcf	5,2	;volatile
   215                           
   216                           ;led.c: 56: PORTB|=(1<<0);
   217  0027  1405               	bsf	5,0	;volatile
   218                           
   219                           ;led.c: 57: break;
   220  0028  284A               	goto	l716
   221  0029                     l296:	
   222                           ;led.c: 58: case 300:
   223                           
   224                           
   225                           ;led.c: 59: PORTB&=~(1<<1);
   226  0029  1085               	bcf	5,1	;volatile
   227                           
   228                           ;led.c: 60: PORTB|=(1<<4);
   229  002A  1605               	bsf	5,4	;volatile
   230                           
   231                           ;led.c: 61: break;
   232  002B  284A               	goto	l716
   233  002C                     l297:	
   234                           ;led.c: 62: case 400:
   235                           
   236                           
   237                           ;led.c: 63: PORTB&=~(1<<0);
   238  002C  1005               	bcf	5,0	;volatile
   239                           
   240                           ;led.c: 64: PORTB|=(1<<3);
   241  002D  1585               	bsf	5,3	;volatile
   242                           
   243                           ;led.c: 65: }
   244  002E  284A               	goto	l716
   245  002F                     l714:	
   246                           
   247                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
   248                           ; Switch size 1, requested type "space"
   249                           ; Number of cases is 2, Range of values is 0 to 1
   250                           ; switch strategies available:
   251                           ; Name         Instructions Cycles
   252                           ; simple_byte            7     4 (average)
   253                           ; direct_byte            8     6 (fixed)
   254                           ; jumptable            260     6 (fixed)
   255                           ;	Chosen strategy is simple_byte
   256  002F  0843               	movf	main@count+1,w
   257  0030  3A00               	xorlw	0	; case 0
   258  0031  1903               	skipnz
   259  0032  2837               	goto	l790
   260  0033  3A01               	xorlw	1	; case 1
   261  0034  1903               	skipnz
   262  0035  2842               	goto	l792
   263  0036  284A               	goto	l716
   264  0037                     l790:	
   265                           
   266                           ; Switch size 1, requested type "space"
   267                           ; Number of cases is 3, Range of values is 0 to 200
   268                           ; switch strategies available:
   269                           ; Name         Instructions Cycles
   270                           ; simple_byte           10     6 (average)
   271                           ; direct_byte          207     6 (fixed)
   272                           ; jumptable            260     6 (fixed)
   273                           ;	Chosen strategy is simple_byte
   274  0037  0842               	movf	main@count,w
   275  0038  3A00               	xorlw	0	; case 0
   276  0039  1903               	skipnz
   277  003A  2820               	goto	l292
   278  003B  3A64               	xorlw	100	; case 100
   279  003C  1903               	skipnz
   280  003D  2823               	goto	l294
   281  003E  3AAC               	xorlw	172	; case 200
   282  003F  1903               	skipnz
   283  0040  2826               	goto	l295
   284  0041  284A               	goto	l716
   285  0042                     l792:	
   286                           
   287                           ; Switch size 1, requested type "space"
   288                           ; Number of cases is 2, Range of values is 44 to 144
   289                           ; switch strategies available:
   290                           ; Name         Instructions Cycles
   291                           ; simple_byte            7     4 (average)
   292                           ; direct_byte          110     9 (fixed)
   293                           ; jumptable            263     9 (fixed)
   294                           ;	Chosen strategy is simple_byte
   295  0042  0842               	movf	main@count,w
   296  0043  3A2C               	xorlw	44	; case 44
   297  0044  1903               	skipnz
   298  0045  2829               	goto	l296
   299  0046  3ABC               	xorlw	188	; case 144
   300  0047  1903               	skipnz
   301  0048  282C               	goto	l297
   302  0049  284A               	goto	l716
   303  004A                     l716:	
   304                           
   305                           ;led.c: 66: count++;
   306  004A  0AC2               	incf	main@count,f
   307  004B  1903               	skipnz
   308  004C  0AC3               	incf	main@count+1,f
   309  004D  2811               	goto	l706
   310  004E                     __end_of_main:	
   311                           
   312                           	psect	text1
   313  004E                     __ptext1:	
   314 ;; *************** function _Init_System *****************
   315 ;; Defined at:
   316 ;;		line 8 in file "E:\project\scm\SCM1152_LED\led.c"
   317 ;; Parameters:    Size  Location     Type
   318 ;;		None
   319 ;; Auto vars:     Size  Location     Type
   320 ;;		None
   321 ;; Return value:  Size  Location     Type
   322 ;;                  1    wreg      void 
   323 ;; Registers used:
   324 ;;		wreg, status,2
   325 ;; Tracked objects:
   326 ;;		On entry : B00/0
   327 ;;		On exit  : 0/0
   328 ;;		Unchanged: 0/0
   329 ;; Data sizes:     COMMON   BANK0
   330 ;;      Params:         0       0
   331 ;;      Locals:         0       0
   332 ;;      Temps:          0       0
   333 ;;      Totals:         0       0
   334 ;;Total ram usage:        0 bytes
   335 ;; Hardware stack levels used:    1
   336 ;; Hardware stack levels required when called:    1
   337 ;; This function calls:
   338 ;;		Nothing
   339 ;; This function is called by:
   340 ;;		_main
   341 ;; This function uses a non-reentrant model
   342 ;;
   343                           
   344                           
   345                           ;psect for function _Init_System
   346  004E                     _Init_System:	
   347                           
   348                           ;incstack = 0
   349                           ; Regs used in _Init_System: [wreg+status,2]
   350  004E  0000               	nop	;# 
   351  004F  0064               	clrwdt	;# 
   352                           
   353                           ;led.c: 12: INTCON = 0;
   354  0050  0189               	clrf	9	;volatile
   355                           
   356                           ;led.c: 13: OSCCON = 0X71;
   357  0051  3071               	movlw	113
   358  0052  0088               	movwf	8	;volatile
   359                           
   360                           ;led.c: 14: OPTION_REG = 0x00;
   361  0053  0187               	clrf	7	;volatile
   362                           
   363                           ;led.c: 15: TMR0 = 0;
   364  0054  0181               	clrf	1	;volatile
   365                           
   366                           ;led.c: 16: INTCON = 0xE0;
   367  0055  30E0               	movlw	224
   368  0056  0089               	movwf	9	;volatile
   369                           
   370                           ;led.c: 17: TMR0PRD = 100;
   371  0057  3064               	movlw	100
   372  0058  008F               	movwf	15	;volatile
   373                           
   374                           ;led.c: 20: TRISB = 0;
   375  0059  0186               	clrf	6	;volatile
   376                           
   377                           ;led.c: 21: WPUB = 0xFF;
   378  005A  30FF               	movlw	255
   379  005B  008D               	movwf	13	;volatile
   380                           
   381                           ;led.c: 22: PDCONB = 0;
   382  005C  018B               	clrf	11	;volatile
   383                           
   384                           ;led.c: 23: PORTB = 0xFF;
   385  005D  0085               	movwf	5	;volatile
   386                           
   387                           ;led.c: 24: IOCB = 0x00;
   388  005E  018E               	clrf	14	;volatile
   389  005F  0008               	return
   390  0060                     __end_of_Init_System:	
   391                           
   392                           	psect	text2
   393  0060                     __ptext2:	
   394 ;; *************** function _Timer0_Isr *****************
   395 ;; Defined at:
   396 ;;		line 79 in file "E:\project\scm\SCM1152_LED\led.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;		None
   399 ;; Auto vars:     Size  Location     Type
   400 ;;		None
   401 ;; Return value:  Size  Location     Type
   402 ;;                  1    wreg      void 
   403 ;; Registers used:
   404 ;;		None
   405 ;; Tracked objects:
   406 ;;		On entry : 0/0
   407 ;;		On exit  : 0/0
   408 ;;		Unchanged: 0/0
   409 ;; Data sizes:     COMMON   BANK0
   410 ;;      Params:         0       0
   411 ;;      Locals:         0       0
   412 ;;      Temps:          2       0
   413 ;;      Totals:         2       0
   414 ;;Total ram usage:        2 bytes
   415 ;; Hardware stack levels used:    1
   416 ;; This function calls:
   417 ;;		Nothing
   418 ;; This function is called by:
   419 ;;		Interrupt level 1
   420 ;; This function uses a non-reentrant model
   421 ;;
   422                           
   423                           
   424                           ;psect for function _Timer0_Isr
   425  0060                     _Timer0_Isr:	
   426                           
   427                           ;led.c: 81: if(T0IF)
   428  0060  1D09               	btfss	9,2	;volatile
   429  0061  2865               	goto	i1l306
   430                           
   431                           ;led.c: 82: {
   432                           ;led.c: 87: T0IF = 0;
   433  0062  1109               	bcf	9,2	;volatile
   434                           
   435                           ;led.c: 88: timeoutFlag = 1;
   436  0063  01C4               	clrf	_timeoutFlag
   437  0064  0AC4               	incf	_timeoutFlag,f
   438  0065                     i1l306:	
   439  0065  0841               	movf	??_Timer0_Isr+1,w
   440  0066  008A               	movwf	10
   441  0067  0E40               	swapf	??_Timer0_Isr^(0+-128),w
   442  0068  0083               	movwf	3
   443  0069  0ECE               	swapf	78,f
   444  006A  0E4E               	swapf	78,w
   445  006B  0009               	retfie
   446  006C                     __end_of_Timer0_Isr:	
   447  004E                     btemp	set	78	;btemp
   448  004E                     wtemp0	set	78
   449                           
   450                           	psect	intentry
   451  0004                     __pintentry:	
   452                           ;incstack = 0
   453                           ; Regs used in _Timer0_Isr: []
   454                           
   455  0004                     interrupt_function:	
   456  004E                     saved_w	set	btemp
   457  0004  00CE               	movwf	btemp
   458  0005  0E03               	swapf	3,w
   459  0006  00C0               	movwf	??_Timer0_Isr
   460  0007  080A               	movf	10,w
   461  0008  00C1               	movwf	??_Timer0_Isr+1
   462  0009  2860               	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       5
    BANK0            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Timer0_Isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0      30
                                              2 COMMON     2     2      0
                        _Init_System
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Timer0_Isr                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_System

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      4       5       1       35.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               20      0       0       3        0.0%
ABS                  0      0       5       4        0.0%
BITBANK0            20      0       0       5        0.0%
DATA                 0      0       5       6        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 04 13:14:58 2020

                    l292 0020                      l294 0023                      l295 0026  
                    l296 0029                      l297 002C                      l714 002F  
                    l706 0011                      l716 004A                      l790 0037  
                    l792 0042                     _T0IF 004A                     _IOCB 000E  
                   _TMR0 0001                     _WPUB 000D                     _main 000E  
                   btemp 004E                     start 000A            ??_Init_System 0042  
                  ?_main 0040                    i1l306 0065                    _PORTB 0005  
                  _TRISB 0006                    pclath 000A                    status 0003  
                  wtemp0 004E          __initialization 000B             __end_of_main 004E  
                 ??_main 0042      __end_of_Init_System 0060                   _PDCONB 000B  
                 _INTCON 0009                   _OSCCON 0008               _Timer0_Isr 0060  
                 saved_w 004E  __end_of__initialization 000C           __pcstackCOMMON 0040  
            _Init_System 004E              ?_Timer0_Isr 0040               __pmaintext 000E  
             __pintentry 0004                  _TMR0PRD 000F                  __ptext0 0000  
                __ptext1 004E                  __ptext2 0060      __size_of_Timer0_Isr 000C  
   end_of_initialization 000C             ?_Init_System 0040      start_initialization 000B  
           ??_Timer0_Isr 0040              __pbssCOMMON 0044                ___latbits 0000  
     __end_of_Timer0_Isr 006C        interrupt_function 0004     __size_of_Init_System 0012  
              main@count 0042            __size_of_main 0040                 intlevel1 0000  
             _OPTION_REG 0007              _timeoutFlag 0044  
