

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 08 17:41:33 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1152A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	psect	pa_nodes0,global,class=CODE,delta=2
    13                           	dabs	1,0x4E,2
    14  0000                     
    15                           ; Version 1.45
    16                           ; Generated 16/11/2017 GMT
    17                           ; 
    18                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F887 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     
    50                           	psect	text0
    51  0000                     __ptext0:	
    52  000F                     _TMR0PRD	set	15
    53  000E                     _IOCB	set	14
    54  000D                     _WPUB	set	13
    55  000B                     _PDCONB	set	11
    56  0009                     _INTCON	set	9
    57  0008                     _OSCCON	set	8
    58  0007                     _OPTION_REG	set	7
    59  0006                     _TRISB	set	6
    60  0005                     _PORTB	set	5
    61  0001                     _TMR0	set	1
    62  004A                     _T0IF	set	74
    63                           
    64                           	psect	cinit
    65  000B                     start_initialization:	
    66                           ; #config settings
    67                           
    68  000B                     __initialization:	
    69                           
    70                           ; Clear objects allocated to COMMON
    71  000B  01C5               	clrf	__pbssCOMMON& (0+127)
    72  000C  01C6               	clrf	(__pbssCOMMON+1)& (0+127)
    73  000D  01C7               	clrf	(__pbssCOMMON+2)& (0+127)
    74  000E  01C8               	clrf	(__pbssCOMMON+3)& (0+127)
    75  000F                     end_of_initialization:	
    76                           ;End of C runtime variable initialization code
    77                           
    78  000F                     __end_of__initialization:	
    79  000F  0183               	clrf	3
    80  0010  2811               	ljmp	_main	;jump to C main() function
    81                           
    82                           	psect	bssCOMMON
    83  0045                     __pbssCOMMON:	
    84  0045                     _minuteFlag:	
    85  0045                     	ds	2
    86  0047                     _hourCount:	
    87  0047                     	ds	1
    88  0048                     _timeoutFlag:	
    89  0048                     	ds	1
    90                           
    91                           	psect	cstackCOMMON
    92  0040                     __pcstackCOMMON:	
    93  0040                     ?_Init_System:	
    94  0040                     ?_main:	
    95                           ; 1 bytes @ 0x0
    96                           
    97  0040                     ?_Timer0_Isr:	
    98                           ; 1 bytes @ 0x0
    99                           
   100  0040                     ??_Timer0_Isr:	
   101                           ; 1 bytes @ 0x0
   102                           
   103                           
   104                           ; 1 bytes @ 0x0
   105  0040                     	ds	2
   106  0042                     ??_Init_System:	
   107  0042                     ??_main:	
   108                           ; 1 bytes @ 0x2
   109                           
   110  0042                     main@timeout1MSFlag:	
   111                           ; 1 bytes @ 0x2
   112                           
   113                           
   114                           ; 1 bytes @ 0x2
   115  0042                     	ds	1
   116  0043                     main@count:	
   117                           
   118                           ; 2 bytes @ 0x3
   119  0043                     	ds	2
   120                           
   121                           	psect	maintext
   122  0011                     __pmaintext:	
   123 ;;
   124 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   125 ;;
   126 ;; *************** function _main *****************
   127 ;; Defined at:
   128 ;;		line 29 in file "E:\project\project0508\scm\SCM1152_LED\led.c"
   129 ;; Parameters:    Size  Location     Type
   130 ;;		None
   131 ;; Auto vars:     Size  Location     Type
   132 ;;  count           2    3[COMMON] unsigned int 
   133 ;;  timeout1MSFl    1    2[COMMON] unsigned char 
   134 ;; Return value:  Size  Location     Type
   135 ;;                  1    wreg      void 
   136 ;; Registers used:
   137 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   138 ;; Tracked objects:
   139 ;;		On entry : B00/0
   140 ;;		On exit  : 0/0
   141 ;;		Unchanged: 0/0
   142 ;; Data sizes:     COMMON   BANK0
   143 ;;      Params:         0       0
   144 ;;      Locals:         3       0
   145 ;;      Temps:          0       0
   146 ;;      Totals:         3       0
   147 ;;Total ram usage:        3 bytes
   148 ;; Hardware stack levels required when called:    2
   149 ;; This function calls:
   150 ;;		_Init_System
   151 ;; This function is called by:
   152 ;;		Startup code after reset
   153 ;; This function uses a non-reentrant model
   154 ;;
   155                           
   156                           
   157                           ;psect for function _main
   158  0011                     _main:	
   159                           
   160                           ;led.c: 31: Init_System();
   161                           
   162                           ;incstack = 0
   163                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   164  0011  206D               	fcall	_Init_System
   165                           
   166                           ;led.c: 32: unsigned int count = 0;
   167  0012  01C3               	clrf	main@count
   168  0013  01C4               	clrf	main@count+1
   169                           
   170                           ;led.c: 33: unsigned char timeout1MSFlag = 0;
   171  0014  01C2               	clrf	main@timeout1MSFlag
   172  0015                     l716:	
   173                           
   174                           ;led.c: 35: {
   175                           ;led.c: 37: if(timeoutFlag)
   176  0015  0848               	movf	_timeoutFlag,w
   177  0016  1903               	btfsc	3,2
   178  0017  2815               	goto	l716
   179                           
   180                           ;led.c: 38: {
   181                           ;led.c: 39: timeoutFlag = 0;
   182  0018  01C8               	clrf	_timeoutFlag
   183  0019  0064               	clrwdt	;# 
   184                           
   185                           ;led.c: 41: if(count == 500)
   186  001A  30F4               	movlw	244
   187  001B  0643               	xorwf	main@count,w
   188  001C  1D03               	skipz
   189  001D  2826               	goto	l726
   190  001E  0344               	decf	main@count+1,w
   191  001F  1D03               	btfss	3,2
   192  0020  2826               	goto	l726
   193                           
   194                           ;led.c: 42: {
   195                           ;led.c: 43: count = 0;
   196  0021  01C3               	clrf	main@count
   197  0022  01C4               	clrf	main@count+1
   198                           
   199                           ;led.c: 44: minuteFlag++;
   200  0023  0AC5               	incf	_minuteFlag,f
   201  0024  1903               	skipnz
   202  0025  0AC6               	incf	_minuteFlag+1,f
   203  0026                     l726:	
   204                           
   205                           ;led.c: 45: }
   206                           ;led.c: 47: if(minuteFlag == 3)
   207  0026  3003               	movlw	3
   208  0027  0645               	xorwf	_minuteFlag,w
   209  0028  0446               	iorwf	_minuteFlag+1,w
   210  0029  1D03               	btfss	3,2
   211  002A  282E               	goto	l732
   212                           
   213                           ;led.c: 48: {
   214                           ;led.c: 49: minuteFlag = 0;
   215  002B  01C5               	clrf	_minuteFlag
   216  002C  01C6               	clrf	_minuteFlag+1
   217                           
   218                           ;led.c: 50: hourCount++;
   219  002D  0AC7               	incf	_hourCount,f
   220  002E                     l732:	
   221                           
   222                           ;led.c: 51: }
   223                           ;led.c: 53: if(hourCount == 24)
   224  002E  3018               	movlw	24
   225  002F  0647               	xorwf	_hourCount,w
   226  0030  1903               	btfsc	3,2
   227                           
   228                           ;led.c: 54: {
   229                           ;led.c: 55: hourCount = 0;
   230  0031  01C7               	clrf	_hourCount
   231                           
   232                           ;led.c: 56: }
   233                           ;led.c: 58: if(timeout1MSFlag == 10)
   234  0032  300A               	movlw	10
   235  0033  0642               	xorwf	main@timeout1MSFlag,w
   236  0034  1D03               	btfss	3,2
   237  0035  283A               	goto	l742
   238                           
   239                           ;led.c: 59: {
   240                           ;led.c: 60: timeout1MSFlag =0;
   241  0036  01C2               	clrf	main@timeout1MSFlag
   242                           
   243                           ;led.c: 61: count++;
   244  0037  0AC3               	incf	main@count,f
   245  0038  1903               	skipnz
   246  0039  0AC4               	incf	main@count+1,f
   247  003A                     l742:	
   248  003A  3006               	movlw	6
   249                           
   250                           ;led.c: 62: }
   251                           ;led.c: 64: timeout1MSFlag++;
   252  003B  0AC2               	incf	main@timeout1MSFlag,f
   253                           
   254                           ;led.c: 67: if(hourCount > 5)
   255  003C  0247               	subwf	_hourCount,w
   256  003D  1C03               	skipc
   257  003E  2851               	goto	l750
   258                           
   259                           ;led.c: 68: {
   260                           ;led.c: 69: PORTB = 0xFF;
   261  003F  30FF               	movlw	255
   262  0040  0085               	movwf	5	;volatile
   263                           
   264                           ;led.c: 70: continue;
   265  0041  2815               	goto	l716
   266  0042                     l301:	
   267                           ;led.c: 74: {
   268                           ;led.c: 75: case 0:
   269                           
   270                           
   271                           ;led.c: 76: PORTB&=~(1<<4);
   272  0042  1205               	bcf	5,4	;volatile
   273                           
   274                           ;led.c: 77: PORTB|=(1<<2);
   275  0043  1505               	bsf	5,2	;volatile
   276                           
   277                           ;led.c: 78: break;
   278  0044  2815               	goto	l716
   279  0045                     l303:	
   280                           ;led.c: 79: case 100:
   281                           
   282                           
   283                           ;led.c: 80: PORTB&=~(1<<3);
   284  0045  1185               	bcf	5,3	;volatile
   285                           
   286                           ;led.c: 81: PORTB|=(1<<1);
   287  0046  1485               	bsf	5,1	;volatile
   288                           
   289                           ;led.c: 82: break;
   290  0047  2815               	goto	l716
   291  0048                     l304:	
   292                           ;led.c: 83: case 200:
   293                           
   294                           
   295                           ;led.c: 84: PORTB&=~(1<<2);
   296  0048  1105               	bcf	5,2	;volatile
   297                           
   298                           ;led.c: 85: PORTB|=(1<<0);
   299  0049  1405               	bsf	5,0	;volatile
   300                           
   301                           ;led.c: 86: break;
   302  004A  2815               	goto	l716
   303  004B                     l305:	
   304                           ;led.c: 87: case 300:
   305                           
   306                           
   307                           ;led.c: 88: PORTB&=~(1<<1);
   308  004B  1085               	bcf	5,1	;volatile
   309                           
   310                           ;led.c: 89: PORTB|=(1<<4);
   311  004C  1605               	bsf	5,4	;volatile
   312                           
   313                           ;led.c: 90: break;
   314  004D  2815               	goto	l716
   315  004E                     l306:	
   316                           ;led.c: 91: case 400:
   317                           
   318                           
   319                           ;led.c: 92: PORTB&=~(1<<0);
   320  004E  1005               	bcf	5,0	;volatile
   321                           
   322                           ;led.c: 93: PORTB|=(1<<3);
   323  004F  1585               	bsf	5,3	;volatile
   324                           
   325                           ;led.c: 94: break;
   326  0050  2815               	goto	l716
   327  0051                     l750:	
   328                           
   329                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
   330                           ; Switch size 1, requested type "space"
   331                           ; Number of cases is 2, Range of values is 0 to 1
   332                           ; switch strategies available:
   333                           ; Name         Instructions Cycles
   334                           ; simple_byte            7     4 (average)
   335                           ; direct_byte            8     6 (fixed)
   336                           ; jumptable            260     6 (fixed)
   337                           ;	Chosen strategy is simple_byte
   338  0051  0844               	movf	main@count+1,w
   339  0052  3A00               	xorlw	0	; case 0
   340  0053  1903               	skipnz
   341  0054  2859               	goto	l824
   342  0055  3A01               	xorlw	1	; case 1
   343  0056  1903               	skipnz
   344  0057  2864               	goto	l826
   345  0058  2815               	goto	l716
   346  0059                     l824:	
   347                           
   348                           ; Switch size 1, requested type "space"
   349                           ; Number of cases is 3, Range of values is 0 to 200
   350                           ; switch strategies available:
   351                           ; Name         Instructions Cycles
   352                           ; simple_byte           10     6 (average)
   353                           ; direct_byte          207     6 (fixed)
   354                           ; jumptable            260     6 (fixed)
   355                           ;	Chosen strategy is simple_byte
   356  0059  0843               	movf	main@count,w
   357  005A  3A00               	xorlw	0	; case 0
   358  005B  1903               	skipnz
   359  005C  2842               	goto	l301
   360  005D  3A64               	xorlw	100	; case 100
   361  005E  1903               	skipnz
   362  005F  2845               	goto	l303
   363  0060  3AAC               	xorlw	172	; case 200
   364  0061  1903               	skipnz
   365  0062  2848               	goto	l304
   366  0063  2815               	goto	l716
   367  0064                     l826:	
   368                           
   369                           ; Switch size 1, requested type "space"
   370                           ; Number of cases is 2, Range of values is 44 to 144
   371                           ; switch strategies available:
   372                           ; Name         Instructions Cycles
   373                           ; simple_byte            7     4 (average)
   374                           ; direct_byte          110     9 (fixed)
   375                           ; jumptable            263     9 (fixed)
   376                           ;	Chosen strategy is simple_byte
   377  0064  0843               	movf	main@count,w
   378  0065  3A2C               	xorlw	44	; case 44
   379  0066  1903               	skipnz
   380  0067  284B               	goto	l305
   381  0068  3ABC               	xorlw	188	; case 144
   382  0069  1903               	skipnz
   383  006A  284E               	goto	l306
   384  006B  2815               	goto	l716
   385  006C  280A               	ljmp	start
   386  006D                     __end_of_main:	
   387                           
   388                           	psect	text1
   389  006D                     __ptext1:	
   390 ;; *************** function _Init_System *****************
   391 ;; Defined at:
   392 ;;		line 10 in file "E:\project\project0508\scm\SCM1152_LED\led.c"
   393 ;; Parameters:    Size  Location     Type
   394 ;;		None
   395 ;; Auto vars:     Size  Location     Type
   396 ;;		None
   397 ;; Return value:  Size  Location     Type
   398 ;;                  1    wreg      void 
   399 ;; Registers used:
   400 ;;		wreg, status,2
   401 ;; Tracked objects:
   402 ;;		On entry : B00/0
   403 ;;		On exit  : 0/0
   404 ;;		Unchanged: 0/0
   405 ;; Data sizes:     COMMON   BANK0
   406 ;;      Params:         0       0
   407 ;;      Locals:         0       0
   408 ;;      Temps:          0       0
   409 ;;      Totals:         0       0
   410 ;;Total ram usage:        0 bytes
   411 ;; Hardware stack levels used:    1
   412 ;; Hardware stack levels required when called:    1
   413 ;; This function calls:
   414 ;;		Nothing
   415 ;; This function is called by:
   416 ;;		_main
   417 ;; This function uses a non-reentrant model
   418 ;;
   419                           
   420                           
   421                           ;psect for function _Init_System
   422  006D                     _Init_System:	
   423                           
   424                           ;incstack = 0
   425                           ; Regs used in _Init_System: [wreg+status,2]
   426  006D  0000               	nop	;# 
   427  006E  0064               	clrwdt	;# 
   428                           
   429                           ;led.c: 14: INTCON = 0;
   430  006F  0189               	clrf	9	;volatile
   431                           
   432                           ;led.c: 15: OSCCON = 0X71;
   433  0070  3071               	movlw	113
   434  0071  0088               	movwf	8	;volatile
   435                           
   436                           ;led.c: 16: OPTION_REG = 0x00;
   437  0072  0187               	clrf	7	;volatile
   438                           
   439                           ;led.c: 17: TMR0 = 0;
   440  0073  0181               	clrf	1	;volatile
   441                           
   442                           ;led.c: 18: INTCON = 0xE0;
   443  0074  30E0               	movlw	224
   444  0075  0089               	movwf	9	;volatile
   445                           
   446                           ;led.c: 19: TMR0PRD = 100;
   447  0076  3064               	movlw	100
   448  0077  008F               	movwf	15	;volatile
   449                           
   450                           ;led.c: 22: TRISB = 0;
   451  0078  0186               	clrf	6	;volatile
   452                           
   453                           ;led.c: 23: WPUB = 0xFF;
   454  0079  30FF               	movlw	255
   455  007A  008D               	movwf	13	;volatile
   456                           
   457                           ;led.c: 24: PDCONB = 0;
   458  007B  018B               	clrf	11	;volatile
   459                           
   460                           ;led.c: 25: PORTB = 0xFF;
   461  007C  0085               	movwf	5	;volatile
   462                           
   463                           ;led.c: 26: IOCB = 0x00;
   464  007D  018E               	clrf	14	;volatile
   465  007E  0008               	return
   466  007F                     __end_of_Init_System:	
   467                           
   468                           	psect	text2
   469  007F                     __ptext2:	
   470 ;; *************** function _Timer0_Isr *****************
   471 ;; Defined at:
   472 ;;		line 109 in file "E:\project\project0508\scm\SCM1152_LED\led.c"
   473 ;; Parameters:    Size  Location     Type
   474 ;;		None
   475 ;; Auto vars:     Size  Location     Type
   476 ;;		None
   477 ;; Return value:  Size  Location     Type
   478 ;;                  1    wreg      void 
   479 ;; Registers used:
   480 ;;		None
   481 ;; Tracked objects:
   482 ;;		On entry : 0/0
   483 ;;		On exit  : 0/0
   484 ;;		Unchanged: 0/0
   485 ;; Data sizes:     COMMON   BANK0
   486 ;;      Params:         0       0
   487 ;;      Locals:         0       0
   488 ;;      Temps:          2       0
   489 ;;      Totals:         2       0
   490 ;;Total ram usage:        2 bytes
   491 ;; Hardware stack levels used:    1
   492 ;; This function calls:
   493 ;;		Nothing
   494 ;; This function is called by:
   495 ;;		Interrupt level 1
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           
   500                           ;psect for function _Timer0_Isr
   501  007F                     _Timer0_Isr:	
   502                           
   503                           ;led.c: 111: if(T0IF)
   504  007F  1D09               	btfss	9,2	;volatile
   505  0080  2884               	goto	i1l314
   506                           
   507                           ;led.c: 112: {
   508                           ;led.c: 117: T0IF = 0;
   509  0081  1109               	bcf	9,2	;volatile
   510                           
   511                           ;led.c: 118: timeoutFlag = 1;
   512  0082  01C8               	clrf	_timeoutFlag
   513  0083  0AC8               	incf	_timeoutFlag,f
   514  0084                     i1l314:	
   515  0084  0841               	movf	??_Timer0_Isr+1,w
   516  0085  008A               	movwf	10
   517  0086  0E40               	swapf	??_Timer0_Isr^(0+-128),w
   518  0087  0083               	movwf	3
   519  0088  0ECE               	swapf	78,f
   520  0089  0E4E               	swapf	78,w
   521  008A  0009               	retfie
   522  008B                     __end_of_Timer0_Isr:	
   523  004E                     btemp	set	78	;btemp
   524  004E                     wtemp0	set	78
   525                           
   526                           	psect	intentry
   527  0004                     __pintentry:	
   528                           ;incstack = 0
   529                           ; Regs used in _Timer0_Isr: []
   530                           
   531  0004                     interrupt_function:	
   532  004E                     saved_w	set	btemp
   533  0004  00CE               	movwf	btemp
   534  0005  0E03               	swapf	3,w
   535  0006  00C0               	movwf	??_Timer0_Isr
   536  0007  080A               	movf	10,w
   537  0008  00C1               	movwf	??_Timer0_Isr+1
   538  0009  287F               	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       9
    BANK0            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Timer0_Isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0      45
                                              2 COMMON     3     3      0
                        _Init_System
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Timer0_Isr                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_System

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               20      0       0       3        0.0%
ABS                  0      0       9       4        0.0%
BITBANK0            20      0       0       5        0.0%
DATA                 0      0       9       6        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 08 17:41:33 2020

                    l301 0042                      l303 0045                      l304 0048  
                    l305 004B                      l306 004E                      l732 002E  
                    l716 0015                      l750 0051                      l742 003A  
                    l726 0026                      l824 0059                      l826 0064  
                   _T0IF 004A                     _IOCB 000E                     _TMR0 0001  
                   _WPUB 000D                     _main 0011                     btemp 004E  
                   start 000A            ??_Init_System 0042                    ?_main 0040  
                  i1l314 0084                    _PORTB 0005                    _TRISB 0006  
                  pclath 000A                    status 0003                    wtemp0 004E  
        __initialization 000B             __end_of_main 006D                   ??_main 0042  
    __end_of_Init_System 007F                   _PDCONB 000B                   _INTCON 0009  
                 _OSCCON 0008               _Timer0_Isr 007F       main@timeout1MSFlag 0042  
                 saved_w 004E  __end_of__initialization 000F           __pcstackCOMMON 0040  
            _Init_System 006D              ?_Timer0_Isr 0040               __pmaintext 0011  
             __pintentry 0004                  _TMR0PRD 000F                  __ptext0 0000  
                __ptext1 006D                  __ptext2 007F      __size_of_Timer0_Isr 000C  
             _minuteFlag 0045     end_of_initialization 000F             ?_Init_System 0040  
    start_initialization 000B             ??_Timer0_Isr 0040              __pbssCOMMON 0045  
              ___latbits 0000       __end_of_Timer0_Isr 008B                _hourCount 0047  
      interrupt_function 0004     __size_of_Init_System 0012                main@count 0043  
          __size_of_main 005C                 intlevel1 0000               _OPTION_REG 0007  
            _timeoutFlag 0048  
