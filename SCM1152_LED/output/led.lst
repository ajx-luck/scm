

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 04 21:18:13 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1152A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	psect	pa_nodes0,global,class=CODE,delta=2
    13                           	dabs	1,0x4E,2
    14  0000                     
    15                           ; Version 1.45
    16                           ; Generated 16/11/2017 GMT
    17                           ; 
    18                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F887 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     
    50                           	psect	text0
    51  0000                     __ptext0:	
    52  000F                     _TMR0PRD	set	15
    53  000E                     _IOCB	set	14
    54  000D                     _WPUB	set	13
    55  000B                     _PDCONB	set	11
    56  0009                     _INTCON	set	9
    57  0008                     _OSCCON	set	8
    58  0007                     _OPTION_REG	set	7
    59  0006                     _TRISB	set	6
    60  0005                     _PORTB	set	5
    61  0001                     _TMR0	set	1
    62  004A                     _T0IF	set	74
    63                           
    64                           	psect	cinit
    65  000B                     start_initialization:	
    66                           ; #config settings
    67                           
    68  000B                     __initialization:	
    69                           
    70                           ; Clear objects allocated to COMMON
    71  000B  01C5               	clrf	__pbssCOMMON& (0+127)
    72  000C                     end_of_initialization:	
    73                           ;End of C runtime variable initialization code
    74                           
    75  000C                     __end_of__initialization:	
    76  000C  0183               	clrf	3
    77  000D  280E               	ljmp	_main	;jump to C main() function
    78                           
    79                           	psect	bssCOMMON
    80  0045                     __pbssCOMMON:	
    81  0045                     _timeoutFlag:	
    82  0045                     	ds	1
    83                           
    84                           	psect	cstackCOMMON
    85  0040                     __pcstackCOMMON:	
    86  0040                     ?_Init_System:	
    87  0040                     ?_main:	
    88                           ; 1 bytes @ 0x0
    89                           
    90  0040                     ?_Timer0_Isr:	
    91                           ; 1 bytes @ 0x0
    92                           
    93  0040                     ??_Timer0_Isr:	
    94                           ; 1 bytes @ 0x0
    95                           
    96                           
    97                           ; 1 bytes @ 0x0
    98  0040                     	ds	2
    99  0042                     ??_Init_System:	
   100  0042                     ??_main:	
   101                           ; 1 bytes @ 0x2
   102                           
   103  0042                     main@timeout1MSFlag:	
   104                           ; 1 bytes @ 0x2
   105                           
   106                           
   107                           ; 1 bytes @ 0x2
   108  0042                     	ds	1
   109  0043                     main@count:	
   110                           
   111                           ; 2 bytes @ 0x3
   112  0043                     	ds	2
   113                           
   114                           	psect	maintext
   115  000E                     __pmaintext:	
   116 ;;
   117 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   118 ;;
   119 ;; *************** function _main *****************
   120 ;; Defined at:
   121 ;;		line 27 in file "C:\SCMCU WorkSpace\SCM1152_LED\led.c"
   122 ;; Parameters:    Size  Location     Type
   123 ;;		None
   124 ;; Auto vars:     Size  Location     Type
   125 ;;  count           2    3[COMMON] unsigned int 
   126 ;;  timeout1MSFl    1    2[COMMON] unsigned char 
   127 ;; Return value:  Size  Location     Type
   128 ;;                  1    wreg      void 
   129 ;; Registers used:
   130 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   131 ;; Tracked objects:
   132 ;;		On entry : B00/0
   133 ;;		On exit  : 0/0
   134 ;;		Unchanged: 0/0
   135 ;; Data sizes:     COMMON   BANK0
   136 ;;      Params:         0       0
   137 ;;      Locals:         3       0
   138 ;;      Temps:          0       0
   139 ;;      Totals:         3       0
   140 ;;Total ram usage:        3 bytes
   141 ;; Hardware stack levels required when called:    2
   142 ;; This function calls:
   143 ;;		_Init_System
   144 ;; This function is called by:
   145 ;;		Startup code after reset
   146 ;; This function uses a non-reentrant model
   147 ;;
   148                           
   149                           
   150                           ;psect for function _main
   151  000E                     _main:	
   152                           
   153                           ;led.c: 29: Init_System();
   154                           
   155                           ;incstack = 0
   156                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   157  000E  2055               	fcall	_Init_System
   158                           
   159                           ;led.c: 30: unsigned int count = 0;
   160  000F  01C3               	clrf	main@count
   161  0010  01C4               	clrf	main@count+1
   162                           
   163                           ;led.c: 31: unsigned char timeout1MSFlag = 0;
   164  0011  01C2               	clrf	main@timeout1MSFlag
   165  0012                     l709:	
   166                           
   167                           ;led.c: 33: {
   168                           ;led.c: 35: if(timeoutFlag)
   169  0012  0845               	movf	_timeoutFlag,w
   170  0013  1903               	btfsc	3,2
   171  0014  2812               	goto	l709
   172                           
   173                           ;led.c: 36: {
   174                           ;led.c: 37: timeoutFlag = 0;
   175  0015  01C5               	clrf	_timeoutFlag
   176  0016  0064               	clrwdt	;# 
   177                           
   178                           ;led.c: 39: if(count == 500)
   179  0017  30F4               	movlw	244
   180  0018  0643               	xorwf	main@count,w
   181  0019  1D03               	skipz
   182  001A  2830               	goto	l719
   183  001B  0344               	decf	main@count+1,w
   184  001C  1D03               	btfss	3,2
   185  001D  2830               	goto	l719
   186                           
   187                           ;led.c: 40: {
   188                           ;led.c: 41: count = 0;
   189  001E  01C3               	clrf	main@count
   190  001F  01C4               	clrf	main@count+1
   191  0020  2830               	goto	l719
   192  0021                     l292:	
   193                           ;led.c: 46: {
   194                           ;led.c: 47: case 0:
   195                           
   196                           
   197                           ;led.c: 48: PORTB&=~(1<<4);
   198  0021  1205               	bcf	5,4	;volatile
   199                           
   200                           ;led.c: 49: PORTB|=(1<<2);
   201  0022  1505               	bsf	5,2	;volatile
   202                           
   203                           ;led.c: 50: break;
   204  0023  284B               	goto	l721
   205  0024                     l294:	
   206                           ;led.c: 51: case 100:
   207                           
   208                           
   209                           ;led.c: 52: PORTB&=~(1<<3);
   210  0024  1185               	bcf	5,3	;volatile
   211                           
   212                           ;led.c: 53: PORTB|=(1<<1);
   213  0025  1485               	bsf	5,1	;volatile
   214                           
   215                           ;led.c: 54: break;
   216  0026  284B               	goto	l721
   217  0027                     l295:	
   218                           ;led.c: 55: case 200:
   219                           
   220                           
   221                           ;led.c: 56: PORTB&=~(1<<2);
   222  0027  1105               	bcf	5,2	;volatile
   223                           
   224                           ;led.c: 57: PORTB|=(1<<0);
   225  0028  1405               	bsf	5,0	;volatile
   226                           
   227                           ;led.c: 58: break;
   228  0029  284B               	goto	l721
   229  002A                     l296:	
   230                           ;led.c: 59: case 300:
   231                           
   232                           
   233                           ;led.c: 60: PORTB&=~(1<<1);
   234  002A  1085               	bcf	5,1	;volatile
   235                           
   236                           ;led.c: 61: PORTB|=(1<<4);
   237  002B  1605               	bsf	5,4	;volatile
   238                           
   239                           ;led.c: 62: break;
   240  002C  284B               	goto	l721
   241  002D                     l297:	
   242                           ;led.c: 63: case 400:
   243                           
   244                           
   245                           ;led.c: 64: PORTB&=~(1<<0);
   246  002D  1005               	bcf	5,0	;volatile
   247                           
   248                           ;led.c: 65: PORTB|=(1<<3);
   249  002E  1585               	bsf	5,3	;volatile
   250                           
   251                           ;led.c: 66: break;
   252  002F  284B               	goto	l721
   253  0030                     l719:	
   254                           
   255                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
   256                           ; Switch size 1, requested type "space"
   257                           ; Number of cases is 2, Range of values is 0 to 1
   258                           ; switch strategies available:
   259                           ; Name         Instructions Cycles
   260                           ; simple_byte            7     4 (average)
   261                           ; direct_byte            8     6 (fixed)
   262                           ; jumptable            260     6 (fixed)
   263                           ;	Chosen strategy is simple_byte
   264  0030  0844               	movf	main@count+1,w
   265  0031  3A00               	xorlw	0	; case 0
   266  0032  1903               	skipnz
   267  0033  2838               	goto	l801
   268  0034  3A01               	xorlw	1	; case 1
   269  0035  1903               	skipnz
   270  0036  2843               	goto	l803
   271  0037  284B               	goto	l721
   272  0038                     l801:	
   273                           
   274                           ; Switch size 1, requested type "space"
   275                           ; Number of cases is 3, Range of values is 0 to 200
   276                           ; switch strategies available:
   277                           ; Name         Instructions Cycles
   278                           ; simple_byte           10     6 (average)
   279                           ; direct_byte          207     6 (fixed)
   280                           ; jumptable            260     6 (fixed)
   281                           ;	Chosen strategy is simple_byte
   282  0038  0843               	movf	main@count,w
   283  0039  3A00               	xorlw	0	; case 0
   284  003A  1903               	skipnz
   285  003B  2821               	goto	l292
   286  003C  3A64               	xorlw	100	; case 100
   287  003D  1903               	skipnz
   288  003E  2824               	goto	l294
   289  003F  3AAC               	xorlw	172	; case 200
   290  0040  1903               	skipnz
   291  0041  2827               	goto	l295
   292  0042  284B               	goto	l721
   293  0043                     l803:	
   294                           
   295                           ; Switch size 1, requested type "space"
   296                           ; Number of cases is 2, Range of values is 44 to 144
   297                           ; switch strategies available:
   298                           ; Name         Instructions Cycles
   299                           ; simple_byte            7     4 (average)
   300                           ; direct_byte          110     9 (fixed)
   301                           ; jumptable            263     9 (fixed)
   302                           ;	Chosen strategy is simple_byte
   303  0043  0843               	movf	main@count,w
   304  0044  3A2C               	xorlw	44	; case 44
   305  0045  1903               	skipnz
   306  0046  282A               	goto	l296
   307  0047  3ABC               	xorlw	188	; case 144
   308  0048  1903               	skipnz
   309  0049  282D               	goto	l297
   310  004A  284B               	goto	l721
   311  004B                     l721:	
   312                           
   313                           ;led.c: 68: if(timeout1MSFlag == 10)
   314  004B  300A               	movlw	10
   315  004C  0642               	xorwf	main@timeout1MSFlag,w
   316  004D  1D03               	btfss	3,2
   317  004E  2853               	goto	l727
   318                           
   319                           ;led.c: 69: {
   320                           ;led.c: 70: timeout1MSFlag =0;
   321  004F  01C2               	clrf	main@timeout1MSFlag
   322                           
   323                           ;led.c: 71: count++;
   324  0050  0AC3               	incf	main@count,f
   325  0051  1903               	skipnz
   326  0052  0AC4               	incf	main@count+1,f
   327  0053                     l727:	
   328                           
   329                           ;led.c: 72: }
   330                           ;led.c: 74: timeout1MSFlag++;
   331  0053  0AC2               	incf	main@timeout1MSFlag,f
   332  0054  2812               	goto	l709
   333  0055                     __end_of_main:	
   334                           
   335                           	psect	text1
   336  0055                     __ptext1:	
   337 ;; *************** function _Init_System *****************
   338 ;; Defined at:
   339 ;;		line 8 in file "C:\SCMCU WorkSpace\SCM1152_LED\led.c"
   340 ;; Parameters:    Size  Location     Type
   341 ;;		None
   342 ;; Auto vars:     Size  Location     Type
   343 ;;		None
   344 ;; Return value:  Size  Location     Type
   345 ;;                  1    wreg      void 
   346 ;; Registers used:
   347 ;;		wreg, status,2
   348 ;; Tracked objects:
   349 ;;		On entry : B00/0
   350 ;;		On exit  : 0/0
   351 ;;		Unchanged: 0/0
   352 ;; Data sizes:     COMMON   BANK0
   353 ;;      Params:         0       0
   354 ;;      Locals:         0       0
   355 ;;      Temps:          0       0
   356 ;;      Totals:         0       0
   357 ;;Total ram usage:        0 bytes
   358 ;; Hardware stack levels used:    1
   359 ;; Hardware stack levels required when called:    1
   360 ;; This function calls:
   361 ;;		Nothing
   362 ;; This function is called by:
   363 ;;		_main
   364 ;; This function uses a non-reentrant model
   365 ;;
   366                           
   367                           
   368                           ;psect for function _Init_System
   369  0055                     _Init_System:	
   370                           
   371                           ;incstack = 0
   372                           ; Regs used in _Init_System: [wreg+status,2]
   373  0055  0000               	nop	;# 
   374  0056  0064               	clrwdt	;# 
   375                           
   376                           ;led.c: 12: INTCON = 0;
   377  0057  0189               	clrf	9	;volatile
   378                           
   379                           ;led.c: 13: OSCCON = 0X71;
   380  0058  3071               	movlw	113
   381  0059  0088               	movwf	8	;volatile
   382                           
   383                           ;led.c: 14: OPTION_REG = 0x00;
   384  005A  0187               	clrf	7	;volatile
   385                           
   386                           ;led.c: 15: TMR0 = 0;
   387  005B  0181               	clrf	1	;volatile
   388                           
   389                           ;led.c: 16: INTCON = 0xE0;
   390  005C  30E0               	movlw	224
   391  005D  0089               	movwf	9	;volatile
   392                           
   393                           ;led.c: 17: TMR0PRD = 100;
   394  005E  3064               	movlw	100
   395  005F  008F               	movwf	15	;volatile
   396                           
   397                           ;led.c: 20: TRISB = 0;
   398  0060  0186               	clrf	6	;volatile
   399                           
   400                           ;led.c: 21: WPUB = 0xFF;
   401  0061  30FF               	movlw	255
   402  0062  008D               	movwf	13	;volatile
   403                           
   404                           ;led.c: 22: PDCONB = 0;
   405  0063  018B               	clrf	11	;volatile
   406                           
   407                           ;led.c: 23: PORTB = 0xFF;
   408  0064  0085               	movwf	5	;volatile
   409                           
   410                           ;led.c: 24: IOCB = 0x00;
   411  0065  018E               	clrf	14	;volatile
   412  0066  0008               	return
   413  0067                     __end_of_Init_System:	
   414                           
   415                           	psect	text2
   416  0067                     __ptext2:	
   417 ;; *************** function _Timer0_Isr *****************
   418 ;; Defined at:
   419 ;;		line 87 in file "C:\SCMCU WorkSpace\SCM1152_LED\led.c"
   420 ;; Parameters:    Size  Location     Type
   421 ;;		None
   422 ;; Auto vars:     Size  Location     Type
   423 ;;		None
   424 ;; Return value:  Size  Location     Type
   425 ;;                  1    wreg      void 
   426 ;; Registers used:
   427 ;;		None
   428 ;; Tracked objects:
   429 ;;		On entry : 0/0
   430 ;;		On exit  : 0/0
   431 ;;		Unchanged: 0/0
   432 ;; Data sizes:     COMMON   BANK0
   433 ;;      Params:         0       0
   434 ;;      Locals:         0       0
   435 ;;      Temps:          2       0
   436 ;;      Totals:         2       0
   437 ;;Total ram usage:        2 bytes
   438 ;; Hardware stack levels used:    1
   439 ;; This function calls:
   440 ;;		Nothing
   441 ;; This function is called by:
   442 ;;		Interrupt level 1
   443 ;; This function uses a non-reentrant model
   444 ;;
   445                           
   446                           
   447                           ;psect for function _Timer0_Isr
   448  0067                     _Timer0_Isr:	
   449                           
   450                           ;led.c: 89: if(T0IF)
   451  0067  1D09               	btfss	9,2	;volatile
   452  0068  286C               	goto	i1l307
   453                           
   454                           ;led.c: 90: {
   455                           ;led.c: 95: T0IF = 0;
   456  0069  1109               	bcf	9,2	;volatile
   457                           
   458                           ;led.c: 96: timeoutFlag = 1;
   459  006A  01C5               	clrf	_timeoutFlag
   460  006B  0AC5               	incf	_timeoutFlag,f
   461  006C                     i1l307:	
   462  006C  0841               	movf	??_Timer0_Isr+1,w
   463  006D  008A               	movwf	10
   464  006E  0E40               	swapf	??_Timer0_Isr^(0+-128),w
   465  006F  0083               	movwf	3
   466  0070  0ECE               	swapf	78,f
   467  0071  0E4E               	swapf	78,w
   468  0072  0009               	retfie
   469  0073                     __end_of_Timer0_Isr:	
   470  004E                     btemp	set	78	;btemp
   471  004E                     wtemp0	set	78
   472                           
   473                           	psect	intentry
   474  0004                     __pintentry:	
   475                           ;incstack = 0
   476                           ; Regs used in _Timer0_Isr: []
   477                           
   478  0004                     interrupt_function:	
   479  004E                     saved_w	set	btemp
   480  0004  00CE               	movwf	btemp
   481  0005  0E03               	swapf	3,w
   482  0006  00C0               	movwf	??_Timer0_Isr
   483  0007  080A               	movf	10,w
   484  0008  00C1               	movwf	??_Timer0_Isr+1
   485  0009  2867               	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       6
    BANK0            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Timer0_Isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0      45
                                              2 COMMON     3     3      0
                        _Init_System
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Timer0_Isr                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_System

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       6       1       42.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               20      0       0       3        0.0%
ABS                  0      0       6       4        0.0%
BITBANK0            20      0       0       5        0.0%
DATA                 0      0       6       6        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 04 21:18:13 2020

                    l292 0021                      l294 0024                      l295 0027  
                    l296 002A                      l801 0038                      l297 002D  
                    l721 004B                      l803 0043                      l709 0012  
                    l727 0053                      l719 0030                     _T0IF 004A  
                   _IOCB 000E                     _TMR0 0001                     _WPUB 000D  
                   _main 000E                     btemp 004E                     start 000A  
          ??_Init_System 0042                    ?_main 0040                    i1l307 006C  
                  _PORTB 0005                    _TRISB 0006                    pclath 000A  
                  status 0003                    wtemp0 004E          __initialization 000B  
           __end_of_main 0055                   ??_main 0042      __end_of_Init_System 0067  
                 _PDCONB 000B                   _INTCON 0009                   _OSCCON 0008  
             _Timer0_Isr 0067       main@timeout1MSFlag 0042                   saved_w 004E  
__end_of__initialization 000C           __pcstackCOMMON 0040              _Init_System 0055  
            ?_Timer0_Isr 0040               __pmaintext 000E               __pintentry 0004  
                _TMR0PRD 000F                  __ptext0 0000                  __ptext1 0055  
                __ptext2 0067      __size_of_Timer0_Isr 000C     end_of_initialization 000C  
           ?_Init_System 0040      start_initialization 000B             ??_Timer0_Isr 0040  
            __pbssCOMMON 0045                ___latbits 0000       __end_of_Timer0_Isr 0073  
      interrupt_function 0004     __size_of_Init_System 0012                main@count 0043  
          __size_of_main 0047                 intlevel1 0000               _OPTION_REG 0007  
            _timeoutFlag 0045  
