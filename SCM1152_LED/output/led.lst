

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 28 10:26:14 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1152A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	psect	pa_nodes0,global,class=CODE,delta=2
    13                           	dabs	1,0x4E,2
    14  0000                     
    15                           ; Version 1.45
    16                           ; Generated 16/11/2017 GMT
    17                           ; 
    18                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F887 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     
    50                           	psect	text0
    51  0000                     __ptext0:	
    52  000F                     _TMR0PRD	set	15
    53  000E                     _IOCB	set	14
    54  000D                     _WPUB	set	13
    55  000B                     _PDCONB	set	11
    56  0009                     _INTCON	set	9
    57  0008                     _OSCCON	set	8
    58  0007                     _OPTION_REG	set	7
    59  0006                     _TRISB	set	6
    60  0005                     _PORTB	set	5
    61  0001                     _TMR0	set	1
    62  004A                     _T0IF	set	74
    63                           
    64                           	psect	cinit
    65  000B                     start_initialization:	
    66                           ; #config settings
    67                           
    68  000B                     __initialization:	
    69                           
    70                           ; Clear objects allocated to COMMON
    71  000B  01C6               	clrf	__pbssCOMMON& (0+127)
    72  000C                     end_of_initialization:	
    73                           ;End of C runtime variable initialization code
    74                           
    75  000C                     __end_of__initialization:	
    76  000C  0183               	clrf	3
    77  000D  280E               	ljmp	_main	;jump to C main() function
    78                           
    79                           	psect	bssCOMMON
    80  0046                     __pbssCOMMON:	
    81  0046                     _timeoutFlag:	
    82  0046                     	ds	1
    83                           
    84                           	psect	cstackCOMMON
    85  0040                     __pcstackCOMMON:	
    86  0040                     ?_Init_System:	
    87  0040                     ?_main:	
    88                           ; 1 bytes @ 0x0
    89                           
    90  0040                     ?_Timer0_Isr:	
    91                           ; 1 bytes @ 0x0
    92                           
    93  0040                     ??_Timer0_Isr:	
    94                           ; 1 bytes @ 0x0
    95                           
    96                           
    97                           ; 1 bytes @ 0x0
    98  0040                     	ds	2
    99  0042                     ??_Init_System:	
   100  0042                     ??_main:	
   101                           ; 1 bytes @ 0x2
   102                           
   103                           
   104                           ; 1 bytes @ 0x2
   105  0042                     	ds	1
   106  0043                     main@count:	
   107                           
   108                           ; 2 bytes @ 0x3
   109  0043                     	ds	2
   110  0045                     main@index:	
   111                           
   112                           ; 1 bytes @ 0x5
   113  0045                     	ds	1
   114                           
   115                           	psect	maintext
   116  000E                     __pmaintext:	
   117 ;;
   118 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   119 ;;
   120 ;; *************** function _main *****************
   121 ;; Defined at:
   122 ;;		line 28 in file "E:\project\scm\SCM1152_LED\led.c"
   123 ;; Parameters:    Size  Location     Type
   124 ;;		None
   125 ;; Auto vars:     Size  Location     Type
   126 ;;  count           2    3[COMMON] unsigned int 
   127 ;;  index           1    5[COMMON] unsigned char 
   128 ;; Return value:  Size  Location     Type
   129 ;;                  1    wreg      void 
   130 ;; Registers used:
   131 ;;		wreg, status,2, status,0, pclath, cstack
   132 ;; Tracked objects:
   133 ;;		On entry : B00/0
   134 ;;		On exit  : 0/0
   135 ;;		Unchanged: 0/0
   136 ;; Data sizes:     COMMON   BANK0
   137 ;;      Params:         0       0
   138 ;;      Locals:         3       0
   139 ;;      Temps:          1       0
   140 ;;      Totals:         4       0
   141 ;;Total ram usage:        4 bytes
   142 ;; Hardware stack levels required when called:    2
   143 ;; This function calls:
   144 ;;		_Init_System
   145 ;; This function is called by:
   146 ;;		Startup code after reset
   147 ;; This function uses a non-reentrant model
   148 ;;
   149                           
   150                           
   151                           ;psect for function _main
   152  000E                     _main:	
   153                           
   154                           ;led.c: 30: Init_System();
   155                           
   156                           ;incstack = 0
   157                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   158  000E  2034               	fcall	_Init_System
   159                           
   160                           ;led.c: 31: unsigned int count = 0;
   161  000F  01C3               	clrf	main@count
   162  0010  01C4               	clrf	main@count+1
   163  0011                     l702:	
   164                           
   165                           ;led.c: 32: unsigned char index = 0;
   166  0011  01C5               	clrf	main@index
   167  0012                     l288:	
   168                           ;led.c: 33: while(1)
   169                           
   170  0012  0064               	clrwdt	;# 
   171                           
   172                           ;led.c: 36: if(timeoutFlag)
   173  0013  0846               	movf	_timeoutFlag,w
   174  0014  1903               	btfsc	3,2
   175  0015  2812               	goto	l288
   176                           
   177                           ;led.c: 37: {
   178                           ;led.c: 38: timeoutFlag = 0;
   179  0016  01C6               	clrf	_timeoutFlag
   180                           
   181                           ;led.c: 39: count++;
   182  0017  0AC3               	incf	main@count,f
   183  0018  1903               	skipnz
   184  0019  0AC4               	incf	main@count+1,f
   185                           
   186                           ;led.c: 40: if(count == 500)
   187  001A  30F4               	movlw	244
   188  001B  0643               	xorwf	main@count,w
   189  001C  1D03               	skipz
   190  001D  2812               	goto	l288
   191  001E  0344               	decf	main@count+1,w
   192  001F  1D03               	btfss	3,2
   193  0020  2812               	goto	l288
   194  0021  3001               	movlw	1
   195                           
   196                           ;led.c: 41: {
   197                           ;led.c: 42: count =0;
   198  0022  01C3               	clrf	main@count
   199  0023  01C4               	clrf	main@count+1
   200                           
   201                           ;led.c: 43: PORTB^=(1<<index++);
   202  0024  00C2               	movwf	??_main
   203  0025  0A45               	incf	main@index,w
   204  0026  2829               	goto	u34
   205  0027                     u35:	
   206  0027  1003               	clrc
   207  0028  0DC2               	rlf	??_main,f
   208  0029                     u34:	
   209  0029  3EFF               	addlw	-1
   210  002A  1D03               	skipz
   211  002B  2827               	goto	u35
   212  002C  0842               	movf	??_main,w
   213  002D  0685               	xorwf	5,f	;volatile
   214  002E  3005               	movlw	5
   215  002F  0AC5               	incf	main@index,f
   216                           
   217                           ;led.c: 44: if(index == 5)
   218  0030  0645               	xorwf	main@index,w
   219  0031  1903               	btfsc	3,2
   220  0032  2811               	goto	l702
   221  0033  2812               	goto	l288
   222  0034                     __end_of_main:	
   223                           
   224                           	psect	text1
   225  0034                     __ptext1:	
   226 ;; *************** function _Init_System *****************
   227 ;; Defined at:
   228 ;;		line 9 in file "E:\project\scm\SCM1152_LED\led.c"
   229 ;; Parameters:    Size  Location     Type
   230 ;;		None
   231 ;; Auto vars:     Size  Location     Type
   232 ;;		None
   233 ;; Return value:  Size  Location     Type
   234 ;;                  1    wreg      void 
   235 ;; Registers used:
   236 ;;		wreg, status,2
   237 ;; Tracked objects:
   238 ;;		On entry : B00/0
   239 ;;		On exit  : 0/0
   240 ;;		Unchanged: 0/0
   241 ;; Data sizes:     COMMON   BANK0
   242 ;;      Params:         0       0
   243 ;;      Locals:         0       0
   244 ;;      Temps:          0       0
   245 ;;      Totals:         0       0
   246 ;;Total ram usage:        0 bytes
   247 ;; Hardware stack levels used:    1
   248 ;; Hardware stack levels required when called:    1
   249 ;; This function calls:
   250 ;;		Nothing
   251 ;; This function is called by:
   252 ;;		_main
   253 ;; This function uses a non-reentrant model
   254 ;;
   255                           
   256                           
   257                           ;psect for function _Init_System
   258  0034                     _Init_System:	
   259                           
   260                           ;incstack = 0
   261                           ; Regs used in _Init_System: [wreg+status,2]
   262  0034  0000               	nop	;# 
   263  0035  0064               	clrwdt	;# 
   264                           
   265                           ;led.c: 13: INTCON = 0;
   266  0036  0189               	clrf	9	;volatile
   267                           
   268                           ;led.c: 14: OSCCON = 0X71;
   269  0037  3071               	movlw	113
   270  0038  0088               	movwf	8	;volatile
   271                           
   272                           ;led.c: 15: OPTION_REG = 0x00;
   273  0039  0187               	clrf	7	;volatile
   274                           
   275                           ;led.c: 16: TMR0 = 0;
   276  003A  0181               	clrf	1	;volatile
   277                           
   278                           ;led.c: 17: INTCON = 0xE0;
   279  003B  30E0               	movlw	224
   280  003C  0089               	movwf	9	;volatile
   281                           
   282                           ;led.c: 18: TMR0PRD = 100;
   283  003D  3064               	movlw	100
   284  003E  008F               	movwf	15	;volatile
   285                           
   286                           ;led.c: 21: TRISB = 0;
   287  003F  0186               	clrf	6	;volatile
   288                           
   289                           ;led.c: 22: WPUB = 0xFF;
   290  0040  30FF               	movlw	255
   291  0041  008D               	movwf	13	;volatile
   292                           
   293                           ;led.c: 23: PDCONB = 0;
   294  0042  018B               	clrf	11	;volatile
   295                           
   296                           ;led.c: 24: PORTB = 0xFF;
   297  0043  0085               	movwf	5	;volatile
   298                           
   299                           ;led.c: 25: IOCB = 0xFF;
   300  0044  008E               	movwf	14	;volatile
   301  0045  0008               	return
   302  0046                     __end_of_Init_System:	
   303                           
   304                           	psect	text2
   305  0046                     __ptext2:	
   306 ;; *************** function _Timer0_Isr *****************
   307 ;; Defined at:
   308 ;;		line 60 in file "E:\project\scm\SCM1152_LED\led.c"
   309 ;; Parameters:    Size  Location     Type
   310 ;;		None
   311 ;; Auto vars:     Size  Location     Type
   312 ;;		None
   313 ;; Return value:  Size  Location     Type
   314 ;;                  1    wreg      void 
   315 ;; Registers used:
   316 ;;		None
   317 ;; Tracked objects:
   318 ;;		On entry : 0/0
   319 ;;		On exit  : 0/0
   320 ;;		Unchanged: 0/0
   321 ;; Data sizes:     COMMON   BANK0
   322 ;;      Params:         0       0
   323 ;;      Locals:         0       0
   324 ;;      Temps:          2       0
   325 ;;      Totals:         2       0
   326 ;;Total ram usage:        2 bytes
   327 ;; Hardware stack levels used:    1
   328 ;; This function calls:
   329 ;;		Nothing
   330 ;; This function is called by:
   331 ;;		Interrupt level 1
   332 ;; This function uses a non-reentrant model
   333 ;;
   334                           
   335                           
   336                           ;psect for function _Timer0_Isr
   337  0046                     _Timer0_Isr:	
   338                           
   339                           ;led.c: 62: if(T0IF)
   340  0046  1D09               	btfss	9,2	;volatile
   341  0047  284B               	goto	i1l300
   342                           
   343                           ;led.c: 63: {
   344                           ;led.c: 68: T0IF = 0;
   345  0048  1109               	bcf	9,2	;volatile
   346                           
   347                           ;led.c: 69: timeoutFlag = 1;
   348  0049  01C6               	clrf	_timeoutFlag
   349  004A  0AC6               	incf	_timeoutFlag,f
   350  004B                     i1l300:	
   351  004B  0841               	movf	??_Timer0_Isr+1,w
   352  004C  008A               	movwf	10
   353  004D  0E40               	swapf	??_Timer0_Isr^(0+-128),w
   354  004E  0083               	movwf	3
   355  004F  0ECE               	swapf	78,f
   356  0050  0E4E               	swapf	78,w
   357  0051  0009               	retfie
   358  0052                     __end_of_Timer0_Isr:	
   359  004E                     btemp	set	78	;btemp
   360  004E                     wtemp0	set	78
   361                           
   362                           	psect	intentry
   363  0004                     __pintentry:	
   364                           ;incstack = 0
   365                           ; Regs used in _Timer0_Isr: []
   366                           
   367  0004                     interrupt_function:	
   368  004E                     saved_w	set	btemp
   369  0004  00CE               	movwf	btemp
   370  0005  0E03               	swapf	3,w
   371  0006  00C0               	movwf	??_Timer0_Isr
   372  0007  080A               	movf	10,w
   373  0008  00C1               	movwf	??_Timer0_Isr+1
   374  0009  2846               	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       7
    BANK0            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Timer0_Isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0      45
                                              2 COMMON     4     4      0
                        _Init_System
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Timer0_Isr                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_System

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               20      0       0       3        0.0%
ABS                  0      0       7       4        0.0%
BITBANK0            20      0       0       5        0.0%
DATA                 0      0       7       6        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 28 10:26:14 2020

                     u34 0029                       u35 0027                      l702 0011  
                    l288 0012                     _T0IF 004A                     _IOCB 000E  
                   _TMR0 0001                     _WPUB 000D                     _main 000E  
                   btemp 004E                     start 000A            ??_Init_System 0042  
                  ?_main 0040                    i1l300 004B                    _PORTB 0005  
                  _TRISB 0006                    pclath 000A                    status 0003  
                  wtemp0 004E          __initialization 000B             __end_of_main 0034  
                 ??_main 0042      __end_of_Init_System 0046                   _PDCONB 000B  
                 _INTCON 0009                   _OSCCON 0008               _Timer0_Isr 0046  
                 saved_w 004E  __end_of__initialization 000C           __pcstackCOMMON 0040  
            _Init_System 0034              ?_Timer0_Isr 0040               __pmaintext 000E  
             __pintentry 0004                  _TMR0PRD 000F                  __ptext0 0000  
                __ptext1 0034                  __ptext2 0046      __size_of_Timer0_Isr 000C  
   end_of_initialization 000C             ?_Init_System 0040      start_initialization 000B  
           ??_Timer0_Isr 0040              __pbssCOMMON 0046                ___latbits 0000  
     __end_of_Timer0_Isr 0052        interrupt_function 0004     __size_of_Init_System 0012  
              main@count 0043                main@index 0045            __size_of_main 0026  
               intlevel1 0000               _OPTION_REG 0007              _timeoutFlag 0046  
