---- E:\project\project0508\scm\SCM1152_LED\led.c ----------------------------------------------------------------------
1:                #include<sc.h>
2:                #define setbit(x, y)  x|=(1<<y)
3:                #define resetbit(x, y)  x&=~(1<<y)
4:                
5:                
6:                unsigned char timeoutFlag;
7:                unsigned int minuteFlag = 0;
8:                unsigned char hourCount = 0;
9:                
10:               void Init_System()
  006F    0000    NOP
  0070    0064    CLRWDT
11:               {
12:               	asm("nop");
13:               	asm("clrwdt");
14:               	INTCON = 0;					//系统初始化
  0071    0189    CLR	0x9
15:               	OSCCON = 0X71;				//配置振荡为8M,开 WDT
  0072    3071    LDIA	0x71
  0073    0088    LD	0x8,A
16:               	OPTION_REG = 0x00;		//Timer0使用内部时钟Focs/4，预分频比为1:2
  0074    0187    CLR	0x7
17:               	TMR0 = 0;				//赋予初始值
  0075    0181    CLR	0x1
18:               	INTCON = 0xE0;			//允许所有未被屏蔽的中断、禁止外设中断，使能Timer0
  0076    30E0    LDIA	0xE0
  0077    0089    LD	0x9,A
19:               	TMR0PRD = 100;
  0078    3064    LDIA	0x64
  0079    008F    LD	0xF,A
20:               	
21:               
22:               	TRISB = 0;	
  007A    0186    CLR	0x6
23:               	WPUB = 0xFF;
  007B    30FF    LDIA	0xFF
  007C    008D    LD	0xD,A
24:               	PDCONB = 0;//关闭下拉电阻
  007D    018B    CLR	0xB
25:               	PORTB = 0xFF;
  007E    0085    LD	0x5,A
26:               	IOCB = 0x00;
  007F    018E    CLR	0xE
  0080    0008    RET
27:               }
28:               
29:               void main(void)
30:               {
31:               	Init_System();
  0011    206F    CALL	0x6F
32:               	unsigned int count = 0;
  0012    01C3    CLR	0x43
  0013    01C4    CLR	0x44
33:               	unsigned char timeout1MSFlag = 0;
  0014    01C2    CLR	0x42
34:               	while(1)
35:               	{
36:               		
37:               		if(timeoutFlag)
  0015    0848    LD	A,0x48
  0016    1903    SZB	0x3,2
  0017    2815    JP	0x15
38:               		{
39:               			timeoutFlag = 0;
  0018    01C8    CLR	0x48
  0019    0064    CLRWDT
40:               			asm("clrwdt");
41:               			if(count == 500)
  001A    30F4    LDIA	0xF4
  001B    0643    XORA	0x43
  001C    1D03    SNZB	0x3,2
  001D    2826    JP	0x26
  001E    0344    DECA	0x44
  001F    1D03    SNZB	0x3,2
  0020    2826    JP	0x26
42:               			{
43:               					count = 0;
  0021    01C3    CLR	0x43
  0022    01C4    CLR	0x44
44:               					minuteFlag++;
  0023    0AC5    INCR	0x45
  0024    1903    SZB	0x3,2
  0025    0AC6    INCR	0x46
45:               			}
46:               			//一个小时
47:               			if(minuteFlag == 7200)
  0026    3020    LDIA	0x20
  0027    0645    XORA	0x45
  0028    301C    LDIA	0x1C
  0029    1903    SZB	0x3,2
  002A    0646    XORA	0x46
  002B    1D03    SNZB	0x3,2
  002C    2830    JP	0x30
48:               			{
49:               				minuteFlag = 0;
  002D    01C5    CLR	0x45
  002E    01C6    CLR	0x46
50:               				hourCount++;
  002F    0AC7    INCR	0x47
51:               			}
52:               			
53:               			if(hourCount == 24)
  0030    3018    LDIA	0x18
  0031    0647    XORA	0x47
  0032    1903    SZB	0x3,2
54:               			{
55:               				hourCount = 0;
  0033    01C7    CLR	0x47
56:               			}
57:               			
58:               			if(timeout1MSFlag == 10)
  0034    300A    LDIA	0xA
  0035    0642    XORA	0x42
  0036    1D03    SNZB	0x3,2
  0037    283C    JP	0x3C
59:               			{
60:               				timeout1MSFlag =0;
  0038    01C2    CLR	0x42
61:               				count++;
  0039    0AC3    INCR	0x43
  003A    1903    SZB	0x3,2
  003B    0AC4    INCR	0x44
  003C    3006    LDIA	0x6
62:               			}
63:               			
64:               			timeout1MSFlag++;
  003D    0AC2    INCR	0x42
65:               			
66:               			//超过6个小时，停止闪烁
67:               			if(hourCount > 5)
  003E    0247    SUBA	0x47
  003F    1C03    SNZB	0x3,0
  0040    2853    JP	0x53
68:               			{
69:               				PORTB = 0xFF;
  0041    30FF    LDIA	0xFF
  0042    0085    LD	0x5,A
70:               				continue;
  0043    2815    JP	0x15
71:               			}
72:               			
73:               			switch(count)
74:               			{
75:               				case 0:
76:               				resetbit(PORTB, 4);
  0044    1205    CLRB	0x5,4
77:               				setbit(PORTB, 2);
  0045    1505    SETB	0x5,2
78:               				break;
  0046    2815    JP	0x15
79:               				case 100:
80:               				resetbit(PORTB, 3);
  0047    1185    CLRB	0x5,3
81:               				setbit(PORTB, 1);
  0048    1485    SETB	0x5,1
82:               				break;
  0049    2815    JP	0x15
83:               				case 200:
84:               				resetbit(PORTB, 2);
  004A    1105    CLRB	0x5,2
85:               				setbit(PORTB, 0);
  004B    1405    SETB	0x5,0
86:               				break;
  004C    2815    JP	0x15
87:               				case 300:
88:               				resetbit(PORTB, 1);
  004D    1085    CLRB	0x5,1
89:               				setbit(PORTB, 4);
  004E    1605    SETB	0x5,4
90:               				break;
  004F    2815    JP	0x15
91:               				case 400:
92:               				resetbit(PORTB, 0);
  0050    1005    CLRB	0x5,0
93:               				setbit(PORTB, 3);
  0051    1585    SETB	0x5,3
94:               				break;
  0052    2815    JP	0x15
  0053    0844    LD	A,0x44
  0054    3A00    XORIA	0x0
  0055    1903    SZB	0x3,2
  0056    285B    JP	0x5B
  0057    3A01    XORIA	0x1
  0058    1903    SZB	0x3,2
  0059    2866    JP	0x66
  005A    2815    JP	0x15
  005B    0843    LD	A,0x43
  005C    3A00    XORIA	0x0
  005D    1903    SZB	0x3,2
  005E    2844    JP	0x44
  005F    3A64    XORIA	0x64
  0060    1903    SZB	0x3,2
  0061    2847    JP	0x47
  0062    3AAC    XORIA	0xAC
  0063    1903    SZB	0x3,2
  0064    284A    JP	0x4A
  0065    2815    JP	0x15
  0066    0843    LD	A,0x43
  0067    3A2C    XORIA	0x2C
  0068    1903    SZB	0x3,2
  0069    284D    JP	0x4D
  006A    3ABC    XORIA	0xBC
  006B    1903    SZB	0x3,2
  006C    2850    JP	0x50
  006D    2815    JP	0x15
  006E    280A    JP	0xA
95:               			}
96:               			
97:               			
98:               		}
99:               	}
100:              }
101:              
102:              /***********************************************
103:              函数名称：Timer0_Isr
104:              函数功能：中断服务
105:              入口参数：无
106:              出口参数：无
107:              备注：
108:              ***********************************************/
109:              void interrupt Timer0_Isr()
110:              {
111:              	if(T0IF)
  0081    1D09    SNZB	0x9,2
  0082    2886    JP	0x86
112:              	{
113:              	//---------------------------------------
114:              	//	TMR0 += 50;		//重新赋初值，在赋值前Timer0已有计数，故在该基础上加初值
115:              	//---------------------------------------
116:              			
117:              		T0IF = 0;			//清中断标志位	
  0083    1109    CLRB	0x9,2
118:              		timeoutFlag = 1;
  0084    01C8    CLR	0x48
  0085    0AC8    INCR	0x48
  0086    0841    LD	A,0x41
  0087    008A    LD	0xA,A
  0088    0E40    SWAPA	0x40
  0089    0083    LD	0x3,A
  008A    0ECE    SWAPR	0x4E
  008B    0E4E    SWAPA	0x4E
  008C    0009    RETI
119:              	}
120:              }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    280A    JP	0xA
  000A    280B    JP	0xB
---- start_initialization ------------------------------------------------------------------
  000B    01C5    CLR	0x45
  000C    01C6    CLR	0x46
  000D    01C7    CLR	0x47
  000E    01C8    CLR	0x48
---- interrupt_function_enter ----------------------------------------------------------
  0004    00CE    LD	0x4E,A
  0005    0E03    SWAPA	0x3
  0006    00C0    LD	0x40,A
  0007    080A    LD	A,0xA
  0008    00C1    LD	0x41,A
  0009    2881    JP	0x81
---- common_function ------------------------------------------------------------------
  000F    0183    CLR	0x3
  0010    2811    JP	0x11
