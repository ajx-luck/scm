---- E:\project\scm\SCM1152_LED\led.c ----------------------------------------------------------------------
1:                #include<sc.h>
2:                
3:                #define setbit(x,y)  x|=(1<<y)
4:                #define resetbit(x,y)  x&=~(1<<y)
5:                #define reversebit(x,y)  x^=(1<<y)
6:                
7:                unsigned char timeoutFlag;
8:                
9:                void Init_System()
  0034    0000    NOP
  0035    0064    CLRWDT
10:               {
11:               	asm("nop");
12:               	asm("clrwdt");
13:               	INTCON = 0;					//系统初始化
  0036    0189    CLR	0x9
14:               	OSCCON = 0X71;				//配置振荡为8M,开 WDT
  0037    3071    LDIA	0x71
  0038    0088    LD	0x8,A
15:               	WPUB = 0xFF;
  0039    30FF    LDIA	0xFF
  003A    008D    LD	0xD,A
16:               	OPTION_REG = 0x00;		//Timer0使用内部时钟Focs/4，预分频比为1:2
  003B    0187    CLR	0x7
17:               	TMR0 = 0;				//赋予初始值
  003C    0181    CLR	0x1
18:               	INTCON = 0xE0;			//允许所有未被屏蔽的中断、禁止外设中断，使能Timer0
  003D    30E0    LDIA	0xE0
  003E    0089    LD	0x9,A
19:               	TMR0PRD = 100;
  003F    3064    LDIA	0x64
  0040    008F    LD	0xF,A
20:               	
21:               
22:               	TRISB = 0;	
  0041    0186    CLR	0x6
23:               	PORTB = 0xFF;
  0042    30FF    LDIA	0xFF
  0043    0085    LD	0x5,A
24:               	IOCB = 0xFF;
  0044    008E    LD	0xE,A
  0045    0008    RET
25:               }
26:               
27:               void main(void)
28:               {
29:               	Init_System();
  000E    2034    CALL	0x34
30:               	unsigned int count = 0;
  000F    01C3    CLR	0x43
  0010    01C4    CLR	0x44
31:               	unsigned char index = 0;
  0011    01C5    CLR	0x45
32:               	while(1)
  0012    0064    CLRWDT
33:               	{
34:               		asm("clrwdt");
35:               		if(timeoutFlag)
  0013    0846    LD	A,0x46
  0014    1903    SZB	0x3,2
  0015    2812    JP	0x12
36:               		{
37:               			timeoutFlag = 0;
  0016    01C6    CLR	0x46
38:               			count++;
  0017    0AC3    INCR	0x43
  0018    1903    SZB	0x3,2
  0019    0AC4    INCR	0x44
39:               			if(count == 500)
  001A    30F4    LDIA	0xF4
  001B    0643    XORA	0x43
  001C    1D03    SNZB	0x3,2
  001D    2812    JP	0x12
  001E    0344    DECA	0x44
  001F    1D03    SNZB	0x3,2
  0020    2812    JP	0x12
  0021    3001    LDIA	0x1
40:               			{
41:               				count =0;
  0022    01C3    CLR	0x43
  0023    01C4    CLR	0x44
42:               				reversebit(PORTB,index++);
  0024    00C2    LD	0x42,A
  0025    0A45    INCA	0x45
  0026    2829    JP	0x29
  0027    1003    CLRB	0x3,0
  0028    0DC2    RLCR	0x42
  0029    3EFF    ADDIA	0xFF
  002A    1D03    SNZB	0x3,2
  002B    2827    JP	0x27
  002C    0842    LD	A,0x42
  002D    0685    XORR	0x5
  002E    3005    LDIA	0x5
  002F    0AC5    INCR	0x45
43:               				if(index == 5)
  0030    0645    XORA	0x45
  0031    1903    SZB	0x3,2
  0032    2811    JP	0x11
  0033    2812    JP	0x12
44:               				{
45:               					index = 0;
46:               				}
47:               			}
48:               		}
49:               	}
50:               }
51:               
52:               /***********************************************
53:               函数名称：Timer0_Isr
54:               函数功能：中断服务
55:               入口参数：无
56:               出口参数：无
57:               备注：
58:               ***********************************************/
59:               void interrupt Timer0_Isr()
60:               {
61:               	if(T0IF)
  0046    1D09    SNZB	0x9,2
  0047    284B    JP	0x4B
62:               	{
63:               	//---------------------------------------
64:               	//	TMR0 += 50;		//重新赋初值，在赋值前Timer0已有计数，故在该基础上加初值
65:               	//---------------------------------------
66:               			
67:               		T0IF = 0;			//清中断标志位	
  0048    1109    CLRB	0x9,2
68:               		timeoutFlag = 1;
  0049    01C6    CLR	0x46
  004A    0AC6    INCR	0x46
  004B    0841    LD	A,0x41
  004C    008A    LD	0xA,A
  004D    0E40    SWAPA	0x40
  004E    0083    LD	0x3,A
  004F    0ECE    SWAPR	0x4E
  0050    0E4E    SWAPA	0x4E
  0051    0009    RETI
69:               	}
70:               }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    280A    JP	0xA
  000A    280B    JP	0xB
---- start_initialization ------------------------------------------------------------------
  000B    01C6    CLR	0x46
---- interrupt_function_enter ----------------------------------------------------------
  0004    00CE    LD	0x4E,A
  0005    0E03    SWAPA	0x3
  0006    00C0    LD	0x40,A
  0007    080A    LD	A,0xA
  0008    00C1    LD	0x41,A
  0009    2846    JP	0x46
---- common_function ------------------------------------------------------------------
  000C    0183    CLR	0x3
  000D    280E    JP	0xE
