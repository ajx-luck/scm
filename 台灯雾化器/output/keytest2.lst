

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sun Feb 21 17:25:13 2021

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F2852
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	intentry,global,class=CODE,delta=2
    48                           	psect	pa_nodes0,global,class=CODE,delta=2
    49                           	dabs	1,0x7E,2
    50  0000                     
    51                           ; Version 1.45
    52                           ; Generated 16/11/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC16F887 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	strings
    87  0393                     __pstrings:	
    88  0393                     stringtab:	
    89  0393                     __stringtab:	
    90  0393                     stringcode:	
    91                           ;	String table - string pointers are 1 byte each
    92                           
    93  0393                     stringdir:	
    94  0393  3003               	movlw	high stringdir
    95  0394  008A               	movwf	10
    96  0395  0804               	movf	4,w
    97  0396  0A84               	incf	4,f
    98  0397  0782               	addwf	2,f
    99  0398                     __stringbase:	
   100  0398  3400               	retlw	0
   101  0399                     __end_of__stringtab:	
   102  0399                     _Table_KeyFalg:	
   103  0399  3401               	retlw	1
   104  039A  3402               	retlw	2
   105  039B  3404               	retlw	4
   106  039C  3408               	retlw	8
   107  039D  3410               	retlw	16
   108  039E  3420               	retlw	32
   109  039F  3440               	retlw	64
   110  03A0  3480               	retlw	128
   111  03A1                     __end_of_Table_KeyFalg:	
   112  03A1                     _Table_KeyDown:	
   113  03A1  340A               	retlw	10
   114  03A2  340A               	retlw	10
   115  03A3  340A               	retlw	10
   116  03A4  340A               	retlw	10
   117  03A5                     __end_of_Table_KeyDown:	
   118  03A5                     _Table_KeyCap:	
   119  03A5  3402               	retlw	2
   120  03A6  3402               	retlw	2
   121  03A7  3402               	retlw	2
   122  03A8  3402               	retlw	2
   123  03A9                     __end_of_Table_KeyCap:	
   124  03A9                     _Table_KeyChannel:	
   125  03A9  3460               	retlw	96
   126  03AA  3461               	retlw	97
   127  03AB  3462               	retlw	98
   128  03AC  3463               	retlw	99
   129  03AD                     __end_of_Table_KeyChannel:	
   130  001D                     _PWMCON2	set	29
   131  001C                     _PWMD01H	set	28
   132  001B                     _PWMD4L	set	27
   133  0018                     _PWMD1L	set	24
   134  0017                     _PWMD0L	set	23
   135  0016                     _PWMTH	set	22
   136  0015                     _PWMTL	set	21
   137  0014                     _PWMCON1	set	20
   138  0013                     _PWMCON0	set	19
   139  0012                     _T2CON	set	18
   140  000E                     _PWMD23H	set	14
   141  000D                     _PIE1	set	13
   142  000C                     _PIR1	set	12
   143  000B                     _INTCON	set	11
   144  0009                     _IOCB	set	9
   145  0008                     _WPUB	set	8
   146  0007                     _WPUA	set	7
   147  0006                     _PORTB	set	6
   148  0005                     _PORTA	set	5
   149  0061                     _TMR2IF	set	97
   150  005B                     _RBIE	set	91
   151  005F                     _GIE	set	95
   152  009F                     _ADRESH	set	159
   153  009E                     _ADRESL	set	158
   154  009D                     _ADCON0	set	157
   155  009C                     _ADCON1	set	156
   156  0095                     _KEYDATAH	set	149
   157  0094                     _KEYDATAL	set	148
   158  0093                     _KEYCON1	set	147
   159  0092                     _KEYCON0	set	146
   160  0091                     _PR2	set	145
   161  0088                     _OSCCON	set	136
   162  0087                     _WPDB	set	135
   163  0086                     _TRISB	set	134
   164  0085                     _TRISA	set	133
   165  0081                     _OPTION_REG	set	129
   166  04E9                     _GODONE	set	1257
   167                           
   168                           	psect	cinit
   169  000B                     start_initialization:	
   170                           ; #config settings
   171                           
   172  000B                     __initialization:	
   173  000B  3020               	movlw	low __pbssBANK0
   174                           
   175                           ; Clear objects allocated to BITCOMMON
   176  000C  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   177                           
   178                           ; Clear objects allocated to COMMON
   179  000D  01FA               	clrf	__pbssCOMMON& (0+127)
   180                           
   181                           ; Clear objects allocated to BANK0
   182  000E  1383               	bcf	3,7	;select IRP bank0
   183  000F  0084               	movwf	4
   184  0010  305E               	movlw	low (__pbssBANK0+62)
   185  0011  2463               	fcall	clear_ram0
   186                           
   187                           ; Clear objects allocated to BANK1
   188  0012  30A0               	movlw	low __pbssBANK1
   189  0013  0084               	movwf	4
   190  0014  30A8               	movlw	low (__pbssBANK1+8)
   191  0015  2463               	fcall	clear_ram0
   192  0016                     end_of_initialization:	
   193                           ;End of C runtime variable initialization code
   194                           
   195  0016                     __end_of__initialization:	
   196  0016  0183               	clrf	3
   197  0017  2A25               	ljmp	_main	;jump to C main() function
   198                           
   199                           	psect	bitbssCOMMON
   200  03C8                     __pbitbssCOMMON:	
   201  03C8                     _b_kerr:	
   202  03C8                     	ds	1
   203  03C9                     _b_kclr:	
   204  03C9                     	ds	1
   205  03CA                     _b_kover1:	
   206  03CA                     	ds	1
   207  03CB                     _b_kover:	
   208  03CB                     	ds	1
   209  03CC                     _B_MainLoop:	
   210  03CC                     	ds	1
   211  03CD                     _penwuFlag:	
   212  03CD                     	ds	1
   213                           
   214                           	psect	bssCOMMON
   215  007A                     __pbssCOMMON:	
   216  007A                     _fanStep:	
   217  007A                     	ds	1
   218                           
   219                           	psect	bssBANK0
   220  0020                     __pbssBANK0:	
   221  0020                     _KeyReference:	
   222  0020                     	ds	8
   223  0028                     _KeyOldValue2:	
   224  0028                     	ds	8
   225  0030                     _KeyOldValue1:	
   226  0030                     	ds	8
   227  0038                     _KeyResSum:	
   228  0038                     	ds	8
   229  0040                     _KeyUpShake:	
   230  0040                     	ds	4
   231  0044                     CheckValidTime@validtime:	
   232  0044                     	ds	2
   233  0046                     _KeyData:	
   234  0046                     	ds	2
   235  0048                     _KeyOldData:	
   236  0048                     	ds	2
   237  004A                     _keyNub:	
   238  004A                     	ds	2
   239  004C                     _adresult:	
   240  004C                     	ds	2
   241  004E                     _KeyFlag:	
   242  004E                     	ds	2
   243  0050                     TurnKeyFlags@KeyNoTimes:	
   244  0050                     	ds	1
   245  0051                     TurnKeyFlags@KeyHaveTimes:	
   246  0051                     	ds	1
   247  0052                     CheckKeyOldValue@counter:	
   248  0052                     	ds	1
   249  0053                     _KeyMaxSub:	
   250  0053                     	ds	1
   251  0054                     _KeyCounter:	
   252  0054                     	ds	1
   253  0055                     _lightStep:	
   254  0055                     	ds	1
   255  0056                     _ledStep:	
   256  0056                     	ds	1
   257  0057                     _keyCount3:	
   258  0057                     	ds	1
   259  0058                     _keyCount2:	
   260  0058                     	ds	1
   261  0059                     _keyCount1:	
   262  0059                     	ds	1
   263  005A                     _keyCount0:	
   264  005A                     	ds	1
   265  005B                     _irStep:	
   266  005B                     	ds	1
   267  005C                     _pwmTime:	
   268  005C                     	ds	1
   269  005D                     _MainTime:	
   270  005D                     	ds	1
   271                           
   272                           	psect	bssBANK1
   273  00A0                     __pbssBANK1:	
   274  00A0                     _KeyOldValue0:	
   275  00A0                     	ds	8
   276                           
   277                           	psect	clrtext
   278  0463                     clear_ram0:	
   279                           ;	Called with FSR containing the base address, and
   280                           ;	W with the last address+1
   281                           
   282  0463  0064               	clrwdt	;clear the watchdog before getting into this loop
   283  0464                     clrloop0:	
   284  0464  0180               	clrf	0	;clear RAM location pointed to by FSR
   285  0465  0A84               	incf	4,f	;increment pointer
   286  0466  0604               	xorwf	4,w	;XOR with final address
   287  0467  1903               	btfsc	3,2	;have we reached the end yet?
   288  0468  3400               	retlw	0	;all done for this memory range, return
   289  0469  0604               	xorwf	4,w	;XOR again to restore value
   290  046A  2C64               	goto	clrloop0	;do the next byte
   291                           
   292                           	psect	cstackCOMMON
   293  0070                     __pcstackCOMMON:	
   294  0070                     ?_initPWM:	
   295  0070                     ?_whOn:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0070                     ?_fanOff:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ?_fan1:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ?_fan2:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?_fan3:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ?_ledOff:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_whiteOn:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_yellowOn:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ?_hunheOn:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0070                     ?_light1:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0070                     ?_light2:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0070                     ?_light3:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0070                     ?_light4:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0070                     ?_CheckTouchKey:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0070                     ?_Sleep_Mode:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ?_Init_System:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ?_KeyServer:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_Isr_Timer:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ??_Isr_Timer:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ?_main:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ?_KeyIsIn:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ?_KeyClearOne:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     ?_KeyClearIn:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0070                     ?_KeyStopClear:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0070                     ?_ClearResSum:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     ?_GetTouchKeyValue:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0070                     ?_CheckOnceResult:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  0070                     ?_CheckKeyOldValue:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0070                     ?_TurnKeyFlags:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ?_CheckValidTime:	
   383                           ; 1 bytes @ 0x0
   384                           
   385                           
   386                           ; 1 bytes @ 0x0
   387  0070                     	ds	2
   388  0072                     ??_initPWM:	
   389  0072                     ??_whOn:	
   390                           ; 1 bytes @ 0x2
   391                           
   392  0072                     ??_fanOff:	
   393                           ; 1 bytes @ 0x2
   394                           
   395  0072                     ??_fan1:	
   396                           ; 1 bytes @ 0x2
   397                           
   398  0072                     ??_fan2:	
   399                           ; 1 bytes @ 0x2
   400                           
   401  0072                     ??_fan3:	
   402                           ; 1 bytes @ 0x2
   403                           
   404  0072                     ??_ledOff:	
   405                           ; 1 bytes @ 0x2
   406                           
   407  0072                     ??_whiteOn:	
   408                           ; 1 bytes @ 0x2
   409                           
   410  0072                     ??_yellowOn:	
   411                           ; 1 bytes @ 0x2
   412                           
   413  0072                     ??_hunheOn:	
   414                           ; 1 bytes @ 0x2
   415                           
   416  0072                     ??_light1:	
   417                           ; 1 bytes @ 0x2
   418                           
   419  0072                     ??_light2:	
   420                           ; 1 bytes @ 0x2
   421                           
   422  0072                     ??_light3:	
   423                           ; 1 bytes @ 0x2
   424                           
   425  0072                     ??_light4:	
   426                           ; 1 bytes @ 0x2
   427                           
   428  0072                     ??_Sleep_Mode:	
   429                           ; 1 bytes @ 0x2
   430                           
   431  0072                     ??_Init_System:	
   432                           ; 1 bytes @ 0x2
   433                           
   434  0072                     ??_KeyServer:	
   435                           ; 1 bytes @ 0x2
   436                           
   437  0072                     ??_KeyIsIn:	
   438                           ; 1 bytes @ 0x2
   439                           
   440  0072                     ??_KeyClearOne:	
   441                           ; 1 bytes @ 0x2
   442                           
   443  0072                     ??_ClearResSum:	
   444                           ; 1 bytes @ 0x2
   445                           
   446  0072                     ?_KeyHave:	
   447                           ; 1 bytes @ 0x2
   448                           
   449  0072                     ??_CheckValidTime:	
   450                           ; 1 bytes @ 0x2
   451                           
   452  0072                     ?_ADC_Sample:	
   453                           ; 1 bytes @ 0x2
   454                           
   455  0072                     ?___lwdiv:	
   456                           ; 2 bytes @ 0x2
   457                           
   458  0072                     KeyIsIn@i:	
   459                           ; 2 bytes @ 0x2
   460                           
   461  0072                     KeyClearOne@cnt:	
   462                           ; 1 bytes @ 0x2
   463                           
   464  0072                     ClearResSum@cnt:	
   465                           ; 1 bytes @ 0x2
   466                           
   467  0072                     KeyServer@i:	
   468                           ; 1 bytes @ 0x2
   469                           
   470  0072                     KeyHave@flag:	
   471                           ; 2 bytes @ 0x2
   472                           
   473  0072                     ___lwdiv@divisor:	
   474                           ; 2 bytes @ 0x2
   475                           
   476                           
   477                           ; 2 bytes @ 0x2
   478  0072                     	ds	1
   479  0073                     ??_KeyStopClear:	
   480  0073                     ??_GetTouchKeyValue:	
   481                           ; 1 bytes @ 0x3
   482                           
   483  0073                     KeyIsIn@cnt:	
   484                           ; 1 bytes @ 0x3
   485                           
   486  0073                     KeyStopClear@i:	
   487                           ; 1 bytes @ 0x3
   488                           
   489  0073                     GetTouchKeyValue@temp:	
   490                           ; 1 bytes @ 0x3
   491                           
   492                           
   493                           ; 1 bytes @ 0x3
   494  0073                     	ds	1
   495  0074                     ??_ADC_Sample:	
   496  0074                     ??_KeyClearIn:	
   497                           ; 1 bytes @ 0x4
   498                           
   499  0074                     ??_KeyHave:	
   500                           ; 1 bytes @ 0x4
   501                           
   502  0074                     ??_CheckKeyOldValue:	
   503                           ; 1 bytes @ 0x4
   504                           
   505  0074                     KeyClearIn@cnt:	
   506                           ; 1 bytes @ 0x4
   507                           
   508  0074                     KeyHave@cnt:	
   509                           ; 1 bytes @ 0x4
   510                           
   511  0074                     GetTouchKeyValue@cnt:	
   512                           ; 1 bytes @ 0x4
   513                           
   514  0074                     ___lwdiv@dividend:	
   515                           ; 1 bytes @ 0x4
   516                           
   517                           
   518                           ; 2 bytes @ 0x4
   519  0074                     	ds	1
   520  0075                     ??_CheckOnceResult:	
   521  0075                     ??_TurnKeyFlags:	
   522                           ; 1 bytes @ 0x5
   523                           
   524  0075                     ADC_Sample@adch:	
   525                           ; 1 bytes @ 0x5
   526                           
   527                           
   528                           ; 1 bytes @ 0x5
   529  0075                     	ds	1
   530  0076                     ??___lwdiv:	
   531  0076                     ADC_Sample@i:	
   532                           ; 1 bytes @ 0x6
   533                           
   534  0076                     ___lwdiv@quotient:	
   535                           ; 1 bytes @ 0x6
   536                           
   537                           
   538                           ; 2 bytes @ 0x6
   539  0076                     	ds	1
   540  0077                     ADC_Sample@ad_temp:	
   541                           
   542                           ; 2 bytes @ 0x7
   543  0077                     	ds	1
   544  0078                     ___lwdiv@counter:	
   545                           
   546                           ; 1 bytes @ 0x8
   547  0078                     	ds	1
   548  0079                     ??_CheckTouchKey:	
   549  0079                     ??_ADC_AVG:	
   550                           ; 1 bytes @ 0x9
   551                           
   552  0079                     ??_main:	
   553                           ; 1 bytes @ 0x9
   554                           
   555                           
   556                           	psect	cstackBANK0
   557  005E                     __pcstackBANK0:	
   558                           ; 1 bytes @ 0x9
   559                           
   560  005E                     ?_ADC_AVG:	
   561  005E                     ADC_AVG@adtime:	
   562                           ; 2 bytes @ 0x0
   563                           
   564  005E                     CheckOnceResult@OldValue:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  005E                     CheckKeyOldValue@KeyResTemp:	
   568                           ; 2 bytes @ 0x0
   569                           
   570                           
   571                           ; 2 bytes @ 0x0
   572  005E                     	ds	2
   573  0060                     CheckOnceResult@KeyValue:	
   574  0060                     CheckKeyOldValue@KeyOldTemp:	
   575                           ; 2 bytes @ 0x2
   576                           
   577                           
   578                           ; 2 bytes @ 0x2
   579  0060                     	ds	1
   580  0061                     ADC_AVG@adch:	
   581                           
   582                           ; 1 bytes @ 0x3
   583  0061                     	ds	1
   584  0062                     CheckOnceResult@flag:	
   585  0062                     CheckKeyOldValue@cnt:	
   586                           ; 1 bytes @ 0x4
   587                           
   588  0062                     ADC_AVG@adsum:	
   589                           ; 1 bytes @ 0x4
   590                           
   591                           
   592                           ; 2 bytes @ 0x4
   593  0062                     	ds	1
   594  0063                     CheckOnceResult@KeyDown:	
   595                           
   596                           ; 1 bytes @ 0x5
   597  0063                     	ds	1
   598  0064                     ADC_AVG@i:	
   599  0064                     CheckOnceResult@KeyResTemp:	
   600                           ; 1 bytes @ 0x6
   601                           
   602                           
   603                           ; 2 bytes @ 0x6
   604  0064                     	ds	2
   605  0066                     CheckOnceResult@cnt:	
   606                           
   607                           ; 1 bytes @ 0x8
   608  0066                     	ds	1
   609  0067                     main@res:	
   610                           
   611                           ; 2 bytes @ 0x9
   612  0067                     	ds	2
   613                           
   614                           	psect	maintext
   615  0225                     __pmaintext:	
   616 ;;
   617 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   618 ;;
   619 ;; *************** function _main *****************
   620 ;; Defined at:
   621 ;;		line 204 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\main.c"
   622 ;; Parameters:    Size  Location     Type
   623 ;;		None
   624 ;; Auto vars:     Size  Location     Type
   625 ;;  res             2    9[BANK0 ] unsigned int 
   626 ;;  av              2    0        unsigned int 
   627 ;; Return value:  Size  Location     Type
   628 ;;                  1    wreg      void 
   629 ;; Registers used:
   630 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   631 ;; Tracked objects:
   632 ;;		On entry : B00/0
   633 ;;		On exit  : 300/0
   634 ;;		Unchanged: 0/0
   635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   636 ;;      Params:         0       0       0       0
   637 ;;      Locals:         0       2       0       0
   638 ;;      Temps:          0       0       0       0
   639 ;;      Totals:         0       2       0       0
   640 ;;Total ram usage:        2 bytes
   641 ;; Hardware stack levels required when called:    6
   642 ;; This function calls:
   643 ;;		_ADC_AVG
   644 ;;		_CheckTouchKey
   645 ;;		_Init_System
   646 ;;		_KeyServer
   647 ;;		_Sleep_Mode
   648 ;;		___lwdiv
   649 ;;		_fanOff
   650 ;;		_initPWM
   651 ;;		_ledOff
   652 ;; This function is called by:
   653 ;;		Startup code after reset
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           
   658                           ;psect for function _main
   659  0225                     _main:	
   660                           
   661                           ;main.c: 206: PORTB = 0x00;
   662                           
   663                           ;incstack = 0
   664                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   665  0225  0186               	clrf	6	;volatile
   666                           
   667                           ;main.c: 207: PORTA = 0x00;
   668  0226  0185               	clrf	5	;volatile
   669                           
   670                           ;main.c: 208: Init_System();
   671  0227  2374               	fcall	_Init_System
   672                           
   673                           ;main.c: 209: initPWM();
   674  0228  244A               	fcall	_initPWM
   675  0229                     l576:	
   676                           ;main.c: 210: while(1)
   677                           
   678  0229  0064               	clrwdt	;# 
   679                           
   680                           ;main.c: 213: if(B_MainLoop)
   681  022A  1E79               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   682  022B  2A29               	goto	l576
   683                           
   684                           ;main.c: 214: {
   685                           ;main.c: 215: B_MainLoop = 0;
   686  022C  1279               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   687                           
   688                           ;main.c: 217: CheckTouchKey();
   689  022D  232E               	fcall	_CheckTouchKey
   690                           
   691                           ;main.c: 218: KeyServer();
   692  022E  2106               	fcall	_KeyServer
   693                           
   694                           ;main.c: 219: uint16 res = ADC_AVG(0x0F,8);
   695  022F  3008               	movlw	8
   696  0230  00DE               	movwf	ADC_AVG@adtime
   697  0231  300F               	movlw	15
   698  0232  2354               	fcall	_ADC_AVG
   699  0233  085F               	movf	?_ADC_AVG+1,w
   700  0234  00E8               	movwf	main@res+1
   701  0235  085E               	movf	?_ADC_AVG,w
   702  0236  00E7               	movwf	main@res
   703                           
   704                           ;main.c: 220: uint16 av = 6000/res;
   705  0237  0868               	movf	main@res+1,w
   706  0238  00F3               	movwf	___lwdiv@divisor+1
   707  0239  0867               	movf	main@res,w
   708  023A  00F2               	movwf	___lwdiv@divisor
   709  023B  3070               	movlw	112
   710  023C  00F4               	movwf	___lwdiv@dividend
   711  023D  3017               	movlw	23
   712  023E  00F5               	movwf	___lwdiv@dividend+1
   713  023F  2304               	fcall	___lwdiv
   714                           
   715                           ;main.c: 221: if(res > 768)
   716  0240  3003               	movlw	3
   717  0241  0268               	subwf	main@res+1,w
   718  0242  3001               	movlw	1
   719  0243  1903               	skipnz
   720  0244  0267               	subwf	main@res,w
   721  0245  1C03               	skipc
   722  0246  2A4E               	goto	l3281
   723                           
   724                           ;main.c: 222: {
   725                           ;main.c: 224: penwuFlag = 0;
   726  0247  12F9               	bcf	_penwuFlag/(0+8),_penwuFlag& (0+7)	;volatile
   727                           
   728                           ;main.c: 225: PWMCON0 |= 0xef;
   729  0248  30EF               	movlw	239
   730  0249  0493               	iorwf	19,f	;volatile
   731                           
   732                           ;main.c: 226: fanOff();
   733  024A  2486               	fcall	_fanOff
   734                           
   735                           ;main.c: 227: ledOff();
   736  024B  2491               	fcall	_ledOff
   737                           
   738                           ;main.c: 228: ledStep = 0;
   739  024C  01D6               	clrf	_ledStep
   740                           
   741                           ;main.c: 229: fanStep = 0;
   742  024D  01FA               	clrf	_fanStep
   743  024E                     l3281:	
   744                           
   745                           ;main.c: 230: }
   746                           ;main.c: 231: res = ADC_AVG(0x00,8);
   747  024E  3008               	movlw	8
   748  024F  00DE               	movwf	ADC_AVG@adtime
   749  0250  3000               	movlw	0
   750  0251  2354               	fcall	_ADC_AVG
   751  0252  085F               	movf	?_ADC_AVG+1,w
   752  0253  00E8               	movwf	main@res+1
   753  0254  085E               	movf	?_ADC_AVG,w
   754  0255  00E7               	movwf	main@res
   755                           
   756                           ;main.c: 232: if(res > 2048)
   757  0256  3008               	movlw	8
   758  0257  0268               	subwf	main@res+1,w
   759  0258  3001               	movlw	1
   760  0259  1903               	skipnz
   761  025A  0267               	subwf	main@res,w
   762  025B  1C03               	skipc
   763  025C  2A60               	goto	l3289
   764                           
   765                           ;main.c: 233: {
   766                           ;main.c: 235: penwuFlag = 0;
   767  025D  12F9               	bcf	_penwuFlag/(0+8),_penwuFlag& (0+7)	;volatile
   768                           
   769                           ;main.c: 236: PWMCON0 |= 0xef;
   770  025E  30EF               	movlw	239
   771  025F  0493               	iorwf	19,f	;volatile
   772  0260                     l3289:	
   773                           
   774                           ;main.c: 237: }
   775                           ;main.c: 239: if(penwuFlag == 0 && ledStep == 0 && fanStep == 0 && keyCount0 == 0 && key
      +                          Count1 == 0 && keyCount2 == 0 && keyCount3 == 0)
   776  0260  1AF9               	btfsc	_penwuFlag/(0+8),_penwuFlag& (0+7)	;volatile
   777  0261  2A29               	goto	l576
   778  0262  0856               	movf	_ledStep,w
   779  0263  1D03               	btfss	3,2
   780  0264  2A29               	goto	l576
   781  0265  087A               	movf	_fanStep,w
   782  0266  1D03               	btfss	3,2
   783  0267  2A29               	goto	l576
   784  0268  085A               	movf	_keyCount0,w
   785  0269  1D03               	btfss	3,2
   786  026A  2A29               	goto	l576
   787  026B  0859               	movf	_keyCount1,w
   788  026C  1D03               	btfss	3,2
   789  026D  2A29               	goto	l576
   790  026E  0858               	movf	_keyCount2,w
   791  026F  1D03               	btfss	3,2
   792  0270  2A29               	goto	l576
   793  0271  0857               	movf	_keyCount3,w
   794  0272  1D03               	btfss	3,2
   795  0273  2A29               	goto	l576
   796                           
   797                           ;main.c: 240: {
   798                           ;main.c: 241: Sleep_Mode();
   799  0274  23AD               	fcall	_Sleep_Mode
   800  0275  2A29               	goto	l576
   801  0276                     __end_of_main:	
   802                           
   803                           	psect	text1
   804  044A                     __ptext1:	
   805 ;; *************** function _initPWM *****************
   806 ;; Defined at:
   807 ;;		line 4 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\pwm.c"
   808 ;; Parameters:    Size  Location     Type
   809 ;;		None
   810 ;; Auto vars:     Size  Location     Type
   811 ;;		None
   812 ;; Return value:  Size  Location     Type
   813 ;;                  1    wreg      void 
   814 ;; Registers used:
   815 ;;		wreg, status,2
   816 ;; Tracked objects:
   817 ;;		On entry : 300/0
   818 ;;		On exit  : 300/0
   819 ;;		Unchanged: 0/0
   820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   821 ;;      Params:         0       0       0       0
   822 ;;      Locals:         0       0       0       0
   823 ;;      Temps:          0       0       0       0
   824 ;;      Totals:         0       0       0       0
   825 ;;Total ram usage:        0 bytes
   826 ;; Hardware stack levels used:    1
   827 ;; Hardware stack levels required when called:    1
   828 ;; This function calls:
   829 ;;		Nothing
   830 ;; This function is called by:
   831 ;;		_main
   832 ;; This function uses a non-reentrant model
   833 ;;
   834                           
   835                           
   836                           ;psect for function _initPWM
   837  044A                     _initPWM:	
   838                           
   839                           ;pwm.c: 6: PWMCON1 = 0x40;
   840                           
   841                           ;incstack = 0
   842                           ; Regs used in _initPWM: [wreg+status,2]
   843  044A  3040               	movlw	64
   844  044B  0094               	movwf	20	;volatile
   845                           
   846                           ;pwm.c: 7: PWMCON0 = 0x00;
   847  044C  0193               	clrf	19	;volatile
   848                           
   849                           ;pwm.c: 8: PWMCON2 = 0;
   850  044D  019D               	clrf	29	;volatile
   851                           
   852                           ;pwm.c: 9: PWMTH = 0;
   853  044E  0196               	clrf	22	;volatile
   854                           
   855                           ;pwm.c: 10: PWMTL = 36;
   856  044F  3024               	movlw	36
   857  0450  0095               	movwf	21	;volatile
   858                           
   859                           ;pwm.c: 11: PWMD0L = 0;
   860  0451  0197               	clrf	23	;volatile
   861                           
   862                           ;pwm.c: 12: PWMD1L = 0;
   863  0452  0198               	clrf	24	;volatile
   864                           
   865                           ;pwm.c: 13: PWMD4L = 0;
   866  0453  019B               	clrf	27	;volatile
   867                           
   868                           ;pwm.c: 14: PWMD01H = 0;
   869  0454  019C               	clrf	28	;volatile
   870                           
   871                           ;pwm.c: 15: PWMD23H = 0;
   872  0455  018E               	clrf	14	;volatile
   873  0456  0008               	return
   874  0457                     __end_of_initPWM:	
   875                           
   876                           	psect	text2
   877  03AD                     __ptext2:	
   878 ;; *************** function _Sleep_Mode *****************
   879 ;; Defined at:
   880 ;;		line 260 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\main.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;		None
   883 ;; Auto vars:     Size  Location     Type
   884 ;;		None
   885 ;; Return value:  Size  Location     Type
   886 ;;                  1    wreg      void 
   887 ;; Registers used:
   888 ;;		wreg, status,2
   889 ;; Tracked objects:
   890 ;;		On entry : 300/0
   891 ;;		On exit  : 300/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   894 ;;      Params:         0       0       0       0
   895 ;;      Locals:         0       0       0       0
   896 ;;      Temps:          0       0       0       0
   897 ;;      Totals:         0       0       0       0
   898 ;;Total ram usage:        0 bytes
   899 ;; Hardware stack levels used:    1
   900 ;; Hardware stack levels required when called:    1
   901 ;; This function calls:
   902 ;;		Nothing
   903 ;; This function is called by:
   904 ;;		_main
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908                           
   909                           ;psect for function _Sleep_Mode
   910  03AD                     _Sleep_Mode:	
   911                           
   912                           ;main.c: 261: INTCON = 0;
   913                           
   914                           ;incstack = 0
   915                           ; Regs used in _Sleep_Mode: [wreg+status,2]
   916  03AD  018B               	clrf	11	;volatile
   917                           
   918                           ;main.c: 263: OPTION_REG = 0;
   919  03AE  1683               	bsf	3,5	;RP0=1, select bank1
   920  03AF  0181               	clrf	1	;volatile
   921                           
   922                           ;main.c: 265: WPUB = 0x18;
   923  03B0  3018               	movlw	24
   924  03B1  1283               	bcf	3,5	;RP0=0, select bank0
   925  03B2  0088               	movwf	8	;volatile
   926                           
   927                           ;main.c: 268: IOCB = 0x18;
   928  03B3  0089               	movwf	9	;volatile
   929                           
   930                           ;main.c: 269: RBIE = 1;
   931  03B4  158B               	bsf	11,3	;volatile
   932                           
   933                           ;main.c: 270: GIE = 0;
   934  03B5  138B               	bcf	11,7	;volatile
   935                           
   936                           ;main.c: 272: ADCON0 = 0;
   937  03B6  1683               	bsf	3,5	;RP0=1, select bank1
   938  03B7  019D               	clrf	29	;volatile
   939                           
   940                           ;main.c: 274: OSCCON = 0X70;
   941  03B8  3070               	movlw	112
   942  03B9  0088               	movwf	8	;volatile
   943                           
   944                           ;main.c: 276: PORTB;
   945  03BA  1283               	bcf	3,5	;RP0=0, select bank0
   946  03BB  0806               	movf	6,w	;volatile
   947  03BC  0064               	clrwdt	;# 
   948  03BD  0063               	sleep	;# 
   949  03BE  0000               	nop	;# 
   950                           
   951                           ;main.c: 283: OSCCON = 0X72;
   952  03BF  3072               	movlw	114
   953  03C0  1683               	bsf	3,5	;RP0=1, select bank1
   954  03C1  1303               	bcf	3,6	;RP1=0, select bank1
   955  03C2  0088               	movwf	8	;volatile
   956                           
   957                           ;main.c: 284: IOCB = 0x00;
   958  03C3  1283               	bcf	3,5	;RP0=0, select bank0
   959  03C4  0189               	clrf	9	;volatile
   960  03C5  0008               	return
   961  03C6                     __end_of_Sleep_Mode:	
   962                           
   963                           	psect	text3
   964  0106                     __ptext3:	
   965 ;; *************** function _KeyServer *****************
   966 ;; Defined at:
   967 ;;		line 84 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\main.c"
   968 ;; Parameters:    Size  Location     Type
   969 ;;		None
   970 ;; Auto vars:     Size  Location     Type
   971 ;;  i               2    2[COMMON] unsigned int 
   972 ;; Return value:  Size  Location     Type
   973 ;;                  1    wreg      void 
   974 ;; Registers used:
   975 ;;		wreg, status,2, status,0, pclath, cstack
   976 ;; Tracked objects:
   977 ;;		On entry : 300/0
   978 ;;		On exit  : 300/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   981 ;;      Params:         0       0       0       0
   982 ;;      Locals:         2       0       0       0
   983 ;;      Temps:          0       0       0       0
   984 ;;      Totals:         2       0       0       0
   985 ;;Total ram usage:        2 bytes
   986 ;; Hardware stack levels used:    1
   987 ;; Hardware stack levels required when called:    2
   988 ;; This function calls:
   989 ;;		_fan1
   990 ;;		_fan2
   991 ;;		_fan3
   992 ;;		_fanOff
   993 ;;		_hunheOn
   994 ;;		_ledOff
   995 ;;		_light1
   996 ;;		_light2
   997 ;;		_light3
   998 ;;		_light4
   999 ;;		_whOn
  1000 ;;		_whiteOn
  1001 ;;		_yellowOn
  1002 ;; This function is called by:
  1003 ;;		_main
  1004 ;; This function uses a non-reentrant model
  1005 ;;
  1006                           
  1007                           
  1008                           ;psect for function _KeyServer
  1009  0106                     _KeyServer:	
  1010                           
  1011                           ;main.c: 86: static unsigned int KeyOldFlag = 0;
  1012                           ;main.c: 87: unsigned int i = (unsigned int)((KeyFlag[1]<<8) | KeyFlag[0]);
  1013                           
  1014                           ;incstack = 0
  1015                           ; Regs used in _KeyServer: [wreg+status,2+status,0+pclath+cstack]
  1016  0106  084F               	movf	_KeyFlag+1,w	;volatile
  1017  0107  00F3               	movwf	KeyServer@i+1
  1018  0108  084E               	movf	_KeyFlag,w	;volatile
  1019  0109  00F2               	movwf	KeyServer@i
  1020                           
  1021                           ;main.c: 88: if(i)
  1022  010A  0473               	iorwf	KeyServer@i+1,w
  1023  010B  1903               	btfsc	3,2
  1024  010C  2936               	goto	l3015
  1025                           
  1026                           ;main.c: 89: {
  1027                           ;main.c: 90: keyNub = i;
  1028  010D  0873               	movf	KeyServer@i+1,w
  1029  010E  00CB               	movwf	_keyNub+1
  1030  010F  0872               	movf	KeyServer@i,w
  1031  0110  00CA               	movwf	_keyNub
  1032                           
  1033                           ;main.c: 91: if(keyNub & 0x01){
  1034  0111  1C4A               	btfss	_keyNub,0
  1035  0112  291A               	goto	l2997
  1036                           
  1037                           ;main.c: 92: if(++keyCount0 > 200)
  1038  0113  30C9               	movlw	201
  1039  0114  0ADA               	incf	_keyCount0,f
  1040  0115  025A               	subwf	_keyCount0,w
  1041  0116  1C03               	skipc
  1042  0117  291A               	goto	l2997
  1043                           
  1044                           ;main.c: 93: keyCount0 = 200;
  1045  0118  30C8               	movlw	200
  1046  0119  00DA               	movwf	_keyCount0
  1047  011A                     l2997:	
  1048                           
  1049                           ;main.c: 94: }
  1050                           ;main.c: 95: if(keyNub & 0x02){
  1051  011A  1CCA               	btfss	_keyNub,1
  1052  011B  2923               	goto	l3003
  1053                           
  1054                           ;main.c: 96: if(++keyCount1 > 200)
  1055  011C  30C9               	movlw	201
  1056  011D  0AD9               	incf	_keyCount1,f
  1057  011E  0259               	subwf	_keyCount1,w
  1058  011F  1C03               	skipc
  1059  0120  2923               	goto	l3003
  1060                           
  1061                           ;main.c: 97: keyCount1 = 200;
  1062  0121  30C8               	movlw	200
  1063  0122  00D9               	movwf	_keyCount1
  1064  0123                     l3003:	
  1065                           
  1066                           ;main.c: 98: }
  1067                           ;main.c: 99: if(keyNub & 0x04){
  1068  0123  1D4A               	btfss	_keyNub,2
  1069  0124  292C               	goto	l3009
  1070                           
  1071                           ;main.c: 100: if(++keyCount2 > 200)
  1072  0125  30C9               	movlw	201
  1073  0126  0AD8               	incf	_keyCount2,f
  1074  0127  0258               	subwf	_keyCount2,w
  1075  0128  1C03               	skipc
  1076  0129  292C               	goto	l3009
  1077                           
  1078                           ;main.c: 101: keyCount2 = 200;
  1079  012A  30C8               	movlw	200
  1080  012B  00D8               	movwf	_keyCount2
  1081  012C                     l3009:	
  1082                           
  1083                           ;main.c: 102: }
  1084                           ;main.c: 103: if(keyNub & 0x08){
  1085  012C  1DCA               	btfss	_keyNub,3
  1086  012D  0008               	return
  1087                           
  1088                           ;main.c: 104: if(++keyCount3 > 200)
  1089  012E  30C9               	movlw	201
  1090  012F  0AD7               	incf	_keyCount3,f
  1091  0130  0257               	subwf	_keyCount3,w
  1092  0131  1C03               	skipc
  1093  0132  0008               	return
  1094                           
  1095                           ;main.c: 105: keyCount3 = 200;
  1096  0133  30C8               	movlw	200
  1097  0134  00D7               	movwf	_keyCount3
  1098  0135  0008               	return
  1099  0136                     l3015:	
  1100                           
  1101                           ;main.c: 108: else
  1102                           ;main.c: 109: {
  1103                           ;main.c: 110: if(keyCount0 > 5)
  1104  0136  3006               	movlw	6
  1105  0137  025A               	subwf	_keyCount0,w
  1106  0138  1C03               	skipc
  1107  0139  2942               	goto	l3025
  1108                           
  1109                           ;main.c: 111: {
  1110                           ;main.c: 113: penwuFlag =! penwuFlag;
  1111  013A  3020               	movlw	(0+1) shl (_penwuFlag& (0+7))
  1112  013B  06F9               	xorwf	_penwuFlag/(0+8),f
  1113                           
  1114                           ;main.c: 114: if(penwuFlag)
  1115  013C  1EF9               	btfss	_penwuFlag/(0+8),_penwuFlag& (0+7)	;volatile
  1116  013D  2940               	goto	l3023
  1117                           
  1118                           ;main.c: 115: {
  1119                           ;main.c: 116: whOn();
  1120  013E  2496               	fcall	_whOn
  1121                           
  1122                           ;main.c: 117: }
  1123  013F  2942               	goto	l3025
  1124  0140                     l3023:	
  1125                           
  1126                           ;main.c: 118: else
  1127                           ;main.c: 119: {
  1128                           ;main.c: 120: PWMCON0 |= 0xef;
  1129  0140  30EF               	movlw	239
  1130  0141  0493               	iorwf	19,f	;volatile
  1131  0142                     l3025:	
  1132                           
  1133                           ;main.c: 121: }
  1134                           ;main.c: 122: }
  1135                           ;main.c: 123: if(keyCount1 > 5)
  1136  0142  3006               	movlw	6
  1137  0143  0259               	subwf	_keyCount1,w
  1138  0144  1C03               	skipc
  1139  0145  295F               	goto	l3047
  1140                           
  1141                           ;main.c: 124: {
  1142                           ;main.c: 126: if(++fanStep > 3)
  1143  0146  3004               	movlw	4
  1144  0147  0AFA               	incf	_fanStep,f
  1145  0148  027A               	subwf	_fanStep,w
  1146  0149  1803               	btfsc	3,0
  1147                           
  1148                           ;main.c: 127: fanStep = 0;
  1149  014A  01FA               	clrf	_fanStep
  1150                           
  1151                           ;main.c: 128: if(fanStep == 0)
  1152  014B  087A               	movf	_fanStep,w
  1153  014C  1D03               	btfss	3,2
  1154  014D  2950               	goto	l3035
  1155                           
  1156                           ;main.c: 129: fanOff();
  1157  014E  2486               	fcall	_fanOff
  1158  014F  295F               	goto	l3047
  1159  0150                     l3035:	
  1160                           
  1161                           ;main.c: 130: else if(fanStep == 1)
  1162  0150  0B7A               	decfsz	_fanStep,w
  1163  0151  2954               	goto	l3039
  1164                           
  1165                           ;main.c: 131: fan1();
  1166  0152  24A4               	fcall	_fan1
  1167  0153  295F               	goto	l3047
  1168  0154                     l3039:	
  1169                           
  1170                           ;main.c: 132: else if(fanStep == 2)
  1171  0154  3002               	movlw	2
  1172  0155  067A               	xorwf	_fanStep,w
  1173  0156  1D03               	btfss	3,2
  1174  0157  295A               	goto	l3043
  1175                           
  1176                           ;main.c: 133: fan2();
  1177  0158  246B               	fcall	_fan2
  1178  0159  295F               	goto	l3047
  1179  015A                     l3043:	
  1180                           
  1181                           ;main.c: 134: else if(fanStep == 3)
  1182  015A  3003               	movlw	3
  1183  015B  067A               	xorwf	_fanStep,w
  1184  015C  1D03               	btfss	3,2
  1185  015D  295F               	goto	l3047
  1186                           
  1187                           ;main.c: 135: fan3();
  1188  015E  24A2               	fcall	_fan3
  1189  015F                     l3047:	
  1190                           
  1191                           ;main.c: 136: }
  1192                           ;main.c: 137: if(keyCount2 > 5)
  1193  015F  3006               	movlw	6
  1194  0160  0258               	subwf	_keyCount2,w
  1195  0161  1C03               	skipc
  1196  0162  297D               	goto	l3071
  1197                           
  1198                           ;main.c: 138: {
  1199                           ;main.c: 140: if(++ledStep > 3)
  1200  0163  3004               	movlw	4
  1201  0164  0AD6               	incf	_ledStep,f
  1202  0165  0256               	subwf	_ledStep,w
  1203  0166  1803               	btfsc	3,0
  1204                           
  1205                           ;main.c: 141: ledStep = 0;
  1206  0167  01D6               	clrf	_ledStep
  1207                           
  1208                           ;main.c: 142: if(ledStep == 0)
  1209  0168  0856               	movf	_ledStep,w
  1210  0169  1D03               	btfss	3,2
  1211  016A  296E               	goto	l3059
  1212                           
  1213                           ;main.c: 143: {
  1214                           ;main.c: 144: ledOff();
  1215  016B  2491               	fcall	_ledOff
  1216                           
  1217                           ;main.c: 145: lightStep = 0;
  1218  016C  01D5               	clrf	_lightStep
  1219                           
  1220                           ;main.c: 146: }
  1221  016D  297D               	goto	l3071
  1222  016E                     l3059:	
  1223                           
  1224                           ;main.c: 147: else if(ledStep == 1)
  1225  016E  0B56               	decfsz	_ledStep,w
  1226  016F  2972               	goto	l3063
  1227                           
  1228                           ;main.c: 148: whiteOn();
  1229  0170  2480               	fcall	_whiteOn
  1230  0171  297D               	goto	l3071
  1231  0172                     l3063:	
  1232                           
  1233                           ;main.c: 149: else if(ledStep == 2)
  1234  0172  3002               	movlw	2
  1235  0173  0656               	xorwf	_ledStep,w
  1236  0174  1D03               	btfss	3,2
  1237  0175  2978               	goto	l3067
  1238                           
  1239                           ;main.c: 150: yellowOn();
  1240  0176  247A               	fcall	_yellowOn
  1241  0177  297D               	goto	l3071
  1242  0178                     l3067:	
  1243                           
  1244                           ;main.c: 151: else if(ledStep == 3)
  1245  0178  3003               	movlw	3
  1246  0179  0656               	xorwf	_ledStep,w
  1247  017A  1D03               	btfss	3,2
  1248  017B  297D               	goto	l3071
  1249                           
  1250                           ;main.c: 152: hunheOn();
  1251  017C  2473               	fcall	_hunheOn
  1252  017D                     l3071:	
  1253                           
  1254                           ;main.c: 153: }
  1255                           ;main.c: 154: if(keyCount2 > 5)
  1256  017D  3006               	movlw	6
  1257  017E  0258               	subwf	_keyCount2,w
  1258  017F  1C03               	skipc
  1259  0180  299D               	goto	l3093
  1260                           
  1261                           ;main.c: 155: {
  1262                           ;main.c: 157: if(++lightStep > 4)
  1263  0181  3005               	movlw	5
  1264  0182  0AD5               	incf	_lightStep,f
  1265  0183  0255               	subwf	_lightStep,w
  1266  0184  1C03               	skipc
  1267  0185  2988               	goto	l3077
  1268                           
  1269                           ;main.c: 158: lightStep = 1;
  1270  0186  01D5               	clrf	_lightStep
  1271  0187  0AD5               	incf	_lightStep,f
  1272  0188                     l3077:	
  1273                           
  1274                           ;main.c: 159: if(lightStep == 1)
  1275  0188  0B55               	decfsz	_lightStep,w
  1276  0189  298C               	goto	l3081
  1277                           
  1278                           ;main.c: 160: light1();
  1279  018A  248C               	fcall	_light1
  1280  018B  299D               	goto	l3093
  1281  018C                     l3081:	
  1282                           
  1283                           ;main.c: 161: else if(lightStep == 2)
  1284  018C  3002               	movlw	2
  1285  018D  0655               	xorwf	_lightStep,w
  1286  018E  1D03               	btfss	3,2
  1287  018F  2992               	goto	l3085
  1288                           
  1289                           ;main.c: 162: light2();
  1290  0190  249E               	fcall	_light2
  1291  0191  299D               	goto	l3093
  1292  0192                     l3085:	
  1293                           
  1294                           ;main.c: 163: else if(lightStep == 3)
  1295  0192  3003               	movlw	3
  1296  0193  0655               	xorwf	_lightStep,w
  1297  0194  1D03               	btfss	3,2
  1298  0195  2998               	goto	l3089
  1299                           
  1300                           ;main.c: 164: light3();
  1301  0196  24A6               	fcall	_light3
  1302  0197  299D               	goto	l3093
  1303  0198                     l3089:	
  1304                           
  1305                           ;main.c: 165: else if(lightStep == 4)
  1306  0198  3004               	movlw	4
  1307  0199  0655               	xorwf	_lightStep,w
  1308  019A  1D03               	btfss	3,2
  1309  019B  299D               	goto	l3093
  1310                           
  1311                           ;main.c: 166: light4();
  1312  019C  249A               	fcall	_light4
  1313  019D                     l3093:	
  1314                           
  1315                           ;main.c: 167: }
  1316                           ;main.c: 168: keyCount0 = 0;
  1317  019D  01DA               	clrf	_keyCount0
  1318                           
  1319                           ;main.c: 169: keyCount1 = 0;
  1320  019E  01D9               	clrf	_keyCount1
  1321                           
  1322                           ;main.c: 170: keyCount2 = 0;
  1323  019F  01D8               	clrf	_keyCount2
  1324                           
  1325                           ;main.c: 171: keyCount3 = 0;
  1326  01A0  01D7               	clrf	_keyCount3
  1327                           
  1328                           ;main.c: 172: keyNub = 0;
  1329  01A1  01CA               	clrf	_keyNub
  1330  01A2  01CB               	clrf	_keyNub+1
  1331  01A3  0008               	return
  1332  01A4                     __end_of_KeyServer:	
  1333                           
  1334                           	psect	text4
  1335  047A                     __ptext4:	
  1336 ;; *************** function _yellowOn *****************
  1337 ;; Defined at:
  1338 ;;		line 31 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\pwm.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;		None
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;		None
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, status,2, status,0
  1347 ;; Tracked objects:
  1348 ;;		On entry : 300/0
  1349 ;;		On exit  : 300/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1352 ;;      Params:         0       0       0       0
  1353 ;;      Locals:         0       0       0       0
  1354 ;;      Temps:          0       0       0       0
  1355 ;;      Totals:         0       0       0       0
  1356 ;;Total ram usage:        0 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; Hardware stack levels required when called:    1
  1359 ;; This function calls:
  1360 ;;		Nothing
  1361 ;; This function is called by:
  1362 ;;		_KeyServer
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           
  1367                           ;psect for function _yellowOn
  1368  047A                     _yellowOn:	
  1369                           
  1370                           ;pwm.c: 33: PWMD0L = 36;
  1371                           
  1372                           ;incstack = 0
  1373                           ; Regs used in _yellowOn: [wreg+status,2+status,0]
  1374  047A  3024               	movlw	36
  1375  047B  0097               	movwf	23	;volatile
  1376                           
  1377                           ;pwm.c: 34: PWMCON0 |= 0x01;
  1378  047C  1413               	bsf	19,0	;volatile
  1379                           
  1380                           ;pwm.c: 35: PWMCON0 |= 0xfd;
  1381  047D  30FD               	movlw	253
  1382  047E  0493               	iorwf	19,f	;volatile
  1383  047F  0008               	return
  1384  0480                     __end_of_yellowOn:	
  1385                           
  1386                           	psect	text5
  1387  0480                     __ptext5:	
  1388 ;; *************** function _whiteOn *****************
  1389 ;; Defined at:
  1390 ;;		line 24 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\pwm.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;		None
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;		None
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  1    wreg      void 
  1397 ;; Registers used:
  1398 ;;		wreg, status,2, status,0
  1399 ;; Tracked objects:
  1400 ;;		On entry : 300/0
  1401 ;;		On exit  : 300/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1404 ;;      Params:         0       0       0       0
  1405 ;;      Locals:         0       0       0       0
  1406 ;;      Temps:          0       0       0       0
  1407 ;;      Totals:         0       0       0       0
  1408 ;;Total ram usage:        0 bytes
  1409 ;; Hardware stack levels used:    1
  1410 ;; Hardware stack levels required when called:    1
  1411 ;; This function calls:
  1412 ;;		Nothing
  1413 ;; This function is called by:
  1414 ;;		_KeyServer
  1415 ;; This function uses a non-reentrant model
  1416 ;;
  1417                           
  1418                           
  1419                           ;psect for function _whiteOn
  1420  0480                     _whiteOn:	
  1421                           
  1422                           ;pwm.c: 26: PWMD1L = 36;
  1423                           
  1424                           ;incstack = 0
  1425                           ; Regs used in _whiteOn: [wreg+status,2+status,0]
  1426  0480  3024               	movlw	36
  1427  0481  0098               	movwf	24	;volatile
  1428                           
  1429                           ;pwm.c: 27: PWMCON0 |= 0x02;
  1430  0482  1493               	bsf	19,1	;volatile
  1431                           
  1432                           ;pwm.c: 28: PWMCON0 |= 0xfe;
  1433  0483  30FE               	movlw	254
  1434  0484  0493               	iorwf	19,f	;volatile
  1435  0485  0008               	return
  1436  0486                     __end_of_whiteOn:	
  1437                           
  1438                           	psect	text6
  1439  0496                     __ptext6:	
  1440 ;; *************** function _whOn *****************
  1441 ;; Defined at:
  1442 ;;		line 18 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\pwm.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;		None
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg
  1451 ;; Tracked objects:
  1452 ;;		On entry : 300/0
  1453 ;;		On exit  : 300/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1456 ;;      Params:         0       0       0       0
  1457 ;;      Locals:         0       0       0       0
  1458 ;;      Temps:          0       0       0       0
  1459 ;;      Totals:         0       0       0       0
  1460 ;;Total ram usage:        0 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    1
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_KeyServer
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           
  1471                           ;psect for function _whOn
  1472  0496                     _whOn:	
  1473                           
  1474                           ;pwm.c: 20: PWMD4L = 16;
  1475                           
  1476                           ;incstack = 0
  1477                           ; Regs used in _whOn: [wreg]
  1478  0496  3010               	movlw	16
  1479  0497  009B               	movwf	27	;volatile
  1480                           
  1481                           ;pwm.c: 21: PWMCON0 |= 0x10;
  1482  0498  1613               	bsf	19,4	;volatile
  1483  0499  0008               	return
  1484  049A                     __end_of_whOn:	
  1485                           
  1486                           	psect	text7
  1487  049A                     __ptext7:	
  1488 ;; *************** function _light4 *****************
  1489 ;; Defined at:
  1490 ;;		line 67 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\pwm.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;		None
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      void 
  1497 ;; Registers used:
  1498 ;;		wreg
  1499 ;; Tracked objects:
  1500 ;;		On entry : 300/0
  1501 ;;		On exit  : 300/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1504 ;;      Params:         0       0       0       0
  1505 ;;      Locals:         0       0       0       0
  1506 ;;      Temps:          0       0       0       0
  1507 ;;      Totals:         0       0       0       0
  1508 ;;Total ram usage:        0 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    1
  1511 ;; This function calls:
  1512 ;;		Nothing
  1513 ;; This function is called by:
  1514 ;;		_KeyServer
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           
  1519                           ;psect for function _light4
  1520  049A                     _light4:	
  1521                           
  1522                           ;pwm.c: 69: PWMD0L = PWMD1L = 36;
  1523                           
  1524                           ;incstack = 0
  1525                           ; Regs used in _light4: [wreg]
  1526  049A  3024               	movlw	36
  1527  049B  0098               	movwf	24	;volatile
  1528  049C  0097               	movwf	23	;volatile
  1529  049D  0008               	return
  1530  049E                     __end_of_light4:	
  1531                           
  1532                           	psect	text8
  1533  04A6                     __ptext8:	
  1534 ;; *************** function _light3 *****************
  1535 ;; Defined at:
  1536 ;;		line 62 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\pwm.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;		None
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;		None
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  1    wreg      void 
  1543 ;; Registers used:
  1544 ;;		wreg
  1545 ;; Tracked objects:
  1546 ;;		On entry : 300/0
  1547 ;;		On exit  : 300/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1550 ;;      Params:         0       0       0       0
  1551 ;;      Locals:         0       0       0       0
  1552 ;;      Temps:          0       0       0       0
  1553 ;;      Totals:         0       0       0       0
  1554 ;;Total ram usage:        0 bytes
  1555 ;; Hardware stack levels used:    1
  1556 ;; Hardware stack levels required when called:    1
  1557 ;; This function calls:
  1558 ;;		Nothing
  1559 ;; This function is called by:
  1560 ;;		_KeyServer
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           
  1565                           ;psect for function _light3
  1566  04A6                     _light3:	
  1567                           
  1568                           ;pwm.c: 64: PWMD0L = PWMD1L = 27;
  1569                           
  1570                           ;incstack = 0
  1571                           ; Regs used in _light3: [wreg]
  1572  04A6  2C8D               	ljmp	PL18	;call to abstracted procedure
  1573  04A7                     __end_of_light3:	
  1574                           
  1575                           	psect	text9
  1576  049E                     __ptext9:	
  1577 ;; *************** function _light2 *****************
  1578 ;; Defined at:
  1579 ;;		line 57 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\pwm.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;		None
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;		None
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  1    wreg      void 
  1586 ;; Registers used:
  1587 ;;		wreg
  1588 ;; Tracked objects:
  1589 ;;		On entry : 300/0
  1590 ;;		On exit  : 300/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1593 ;;      Params:         0       0       0       0
  1594 ;;      Locals:         0       0       0       0
  1595 ;;      Temps:          0       0       0       0
  1596 ;;      Totals:         0       0       0       0
  1597 ;;Total ram usage:        0 bytes
  1598 ;; Hardware stack levels used:    1
  1599 ;; Hardware stack levels required when called:    1
  1600 ;; This function calls:
  1601 ;;		Nothing
  1602 ;; This function is called by:
  1603 ;;		_KeyServer
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           
  1608                           ;psect for function _light2
  1609  049E                     _light2:	
  1610                           
  1611                           ;pwm.c: 59: PWMD0L = PWMD1L = 18;
  1612                           
  1613                           ;incstack = 0
  1614                           ; Regs used in _light2: [wreg]
  1615  049E  3012               	movlw	18
  1616  049F  0098               	movwf	24	;volatile
  1617  04A0  0097               	movwf	23	;volatile
  1618  04A1  0008               	return
  1619  04A2                     __end_of_light2:	
  1620                           
  1621                           	psect	text10
  1622  048C                     __ptext10:	
  1623 ;; *************** function _light1 *****************
  1624 ;; Defined at:
  1625 ;;		line 52 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\pwm.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;		None
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;		None
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		wreg
  1634 ;; Tracked objects:
  1635 ;;		On entry : 300/0
  1636 ;;		On exit  : 300/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1639 ;;      Params:         0       0       0       0
  1640 ;;      Locals:         0       0       0       0
  1641 ;;      Temps:          0       0       0       0
  1642 ;;      Totals:         0       0       0       0
  1643 ;;Total ram usage:        0 bytes
  1644 ;; Hardware stack levels used:    1
  1645 ;; Hardware stack levels required when called:    1
  1646 ;; This function calls:
  1647 ;;		Nothing
  1648 ;; This function is called by:
  1649 ;;		_KeyServer
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           
  1654                           ;psect for function _light1
  1655  048C                     _light1:	
  1656                           
  1657                           ;pwm.c: 54: PWMD0L = PWMD1L = 27;
  1658                           
  1659                           ;incstack = 0
  1660                           ; Regs used in _light1: [wreg]
  1661  048C  2C8D               	ljmp	PL18	;call to abstracted procedure
  1662  048D                     __end_of_light1:	
  1663  048D                     PL18:	
  1664  048D  301B               	movlw	27
  1665  048E  0098               	movwf	24	;volatile
  1666  048F  0097               	movwf	23	;volatile
  1667  0490  0008               	return
  1668  0491                     __end_ofPL18:	
  1669                           
  1670                           	psect	text11
  1671  0491                     __ptext11:	
  1672 ;; *************** function _ledOff *****************
  1673 ;; Defined at:
  1674 ;;		line 46 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\pwm.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;		None
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;		None
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      void 
  1681 ;; Registers used:
  1682 ;;		wreg, status,2, status,0
  1683 ;; Tracked objects:
  1684 ;;		On entry : 300/0
  1685 ;;		On exit  : 300/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1688 ;;      Params:         0       0       0       0
  1689 ;;      Locals:         0       0       0       0
  1690 ;;      Temps:          0       0       0       0
  1691 ;;      Totals:         0       0       0       0
  1692 ;;Total ram usage:        0 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    1
  1695 ;; This function calls:
  1696 ;;		Nothing
  1697 ;; This function is called by:
  1698 ;;		_KeyServer
  1699 ;;		_main
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           
  1704                           ;psect for function _ledOff
  1705  0491                     _ledOff:	
  1706                           
  1707                           ;pwm.c: 48: PWMCON0 |= 0xfd;
  1708                           
  1709                           ;incstack = 0
  1710                           ; Regs used in _ledOff: [wreg+status,2+status,0]
  1711  0491  30FD               	movlw	253
  1712  0492  0493               	iorwf	19,f	;volatile
  1713                           
  1714                           ;pwm.c: 49: PWMCON0 |= 0xfe;
  1715  0493  30FE               	movlw	254
  1716  0494  0493               	iorwf	19,f	;volatile
  1717  0495  0008               	return
  1718  0496                     __end_of_ledOff:	
  1719                           
  1720                           	psect	text12
  1721  0473                     __ptext12:	
  1722 ;; *************** function _hunheOn *****************
  1723 ;; Defined at:
  1724 ;;		line 38 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\pwm.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;		None
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;		None
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  1    wreg      void 
  1731 ;; Registers used:
  1732 ;;		wreg
  1733 ;; Tracked objects:
  1734 ;;		On entry : 300/0
  1735 ;;		On exit  : 300/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1738 ;;      Params:         0       0       0       0
  1739 ;;      Locals:         0       0       0       0
  1740 ;;      Temps:          0       0       0       0
  1741 ;;      Totals:         0       0       0       0
  1742 ;;Total ram usage:        0 bytes
  1743 ;; Hardware stack levels used:    1
  1744 ;; Hardware stack levels required when called:    1
  1745 ;; This function calls:
  1746 ;;		Nothing
  1747 ;; This function is called by:
  1748 ;;		_KeyServer
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           
  1753                           ;psect for function _hunheOn
  1754  0473                     _hunheOn:	
  1755                           
  1756                           ;pwm.c: 40: PWMD0L = 27;
  1757                           
  1758                           ;incstack = 0
  1759                           ; Regs used in _hunheOn: [wreg]
  1760  0473  301B               	movlw	27
  1761  0474  0097               	movwf	23	;volatile
  1762                           
  1763                           ;pwm.c: 41: PWMD1L = 18;
  1764  0475  3012               	movlw	18
  1765  0476  0098               	movwf	24	;volatile
  1766                           
  1767                           ;pwm.c: 42: PWMCON0 |= 0x02;
  1768  0477  1493               	bsf	19,1	;volatile
  1769                           
  1770                           ;pwm.c: 43: PWMCON0 |= 0x01;
  1771  0478  1413               	bsf	19,0	;volatile
  1772  0479  0008               	return
  1773  047A                     __end_of_hunheOn:	
  1774                           
  1775                           	psect	text13
  1776  0486                     __ptext13:	
  1777 ;; *************** function _fanOff *****************
  1778 ;; Defined at:
  1779 ;;		line 90 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\pwm.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;		None
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;		None
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  1    wreg      void 
  1786 ;; Registers used:
  1787 ;;		wreg, status,2
  1788 ;; Tracked objects:
  1789 ;;		On entry : 300/0
  1790 ;;		On exit  : 300/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1793 ;;      Params:         0       0       0       0
  1794 ;;      Locals:         0       0       0       0
  1795 ;;      Temps:          0       0       0       0
  1796 ;;      Totals:         0       0       0       0
  1797 ;;Total ram usage:        0 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    1
  1800 ;; This function calls:
  1801 ;;		Nothing
  1802 ;; This function is called by:
  1803 ;;		_KeyServer
  1804 ;;		_main
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           
  1809                           ;psect for function _fanOff
  1810  0486                     _fanOff:	
  1811                           
  1812                           ;pwm.c: 92: TRISA = 0x0f;
  1813                           
  1814                           ;incstack = 0
  1815                           ; Regs used in _fanOff: [wreg+status,2]
  1816  0486  300F               	movlw	15
  1817  0487  1683               	bsf	3,5	;RP0=1, select bank1
  1818  0488  0085               	movwf	5	;volatile
  1819                           
  1820                           ;pwm.c: 93: PORTA = 0x00;
  1821  0489  1283               	bcf	3,5	;RP0=0, select bank0
  1822  048A  0185               	clrf	5	;volatile
  1823  048B  0008               	return
  1824  048C                     __end_of_fanOff:	
  1825                           
  1826                           	psect	text14
  1827  04A2                     __ptext14:	
  1828 ;; *************** function _fan3 *****************
  1829 ;; Defined at:
  1830 ;;		line 84 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\pwm.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;		None
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;		None
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  1    wreg      void 
  1837 ;; Registers used:
  1838 ;;		wreg
  1839 ;; Tracked objects:
  1840 ;;		On entry : 300/0
  1841 ;;		On exit  : 300/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1844 ;;      Params:         0       0       0       0
  1845 ;;      Locals:         0       0       0       0
  1846 ;;      Temps:          0       0       0       0
  1847 ;;      Totals:         0       0       0       0
  1848 ;;Total ram usage:        0 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; Hardware stack levels required when called:    1
  1851 ;; This function calls:
  1852 ;;		Nothing
  1853 ;; This function is called by:
  1854 ;;		_KeyServer
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           
  1859                           ;psect for function _fan3
  1860  04A2                     _fan3:	
  1861                           
  1862                           ;pwm.c: 86: TRISA = 0x07;
  1863                           
  1864                           ;incstack = 0
  1865                           ; Regs used in _fan3: [wreg]
  1866  04A2  3007               	movlw	7
  1867                           
  1868                           ;pwm.c: 87: PORTA = 0x10;
  1869  04A3  2C6D               	ljmp	PL10	;call to abstracted procedure
  1870  04A4                     __end_of_fan3:	
  1871                           
  1872                           	psect	text15
  1873  046B                     __ptext15:	
  1874 ;; *************** function _fan2 *****************
  1875 ;; Defined at:
  1876 ;;		line 78 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\pwm.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;		None
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg
  1885 ;; Tracked objects:
  1886 ;;		On entry : 300/0
  1887 ;;		On exit  : 300/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1890 ;;      Params:         0       0       0       0
  1891 ;;      Locals:         0       0       0       0
  1892 ;;      Temps:          0       0       0       0
  1893 ;;      Totals:         0       0       0       0
  1894 ;;Total ram usage:        0 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    1
  1897 ;; This function calls:
  1898 ;;		Nothing
  1899 ;; This function is called by:
  1900 ;;		_KeyServer
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           
  1905                           ;psect for function _fan2
  1906  046B                     _fan2:	
  1907                           
  1908                           ;pwm.c: 80: TRISA = 0x0B;
  1909                           
  1910                           ;incstack = 0
  1911                           ; Regs used in _fan2: [wreg]
  1912  046B  300B               	movlw	11
  1913                           
  1914                           ;pwm.c: 81: PORTA = 0x10;
  1915  046C  2C6D               	ljmp	PL10	;call to abstracted procedure
  1916  046D                     __end_of_fan2:	
  1917  046D                     PL10:	
  1918  046D  1683               	bsf	3,5	;RP0=1, select bank1
  1919  046E  0085               	movwf	5	;volatile
  1920  046F  3010               	movlw	16
  1921  0470  1283               	bcf	3,5	;RP0=0, select bank0
  1922  0471  0085               	movwf	5	;volatile
  1923  0472  0008               	return
  1924  0473                     __end_ofPL10:	
  1925                           
  1926                           	psect	text16
  1927  04A4                     __ptext16:	
  1928 ;; *************** function _fan1 *****************
  1929 ;; Defined at:
  1930 ;;		line 72 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\pwm.c"
  1931 ;; Parameters:    Size  Location     Type
  1932 ;;		None
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;		None
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  1    wreg      void 
  1937 ;; Registers used:
  1938 ;;		wreg
  1939 ;; Tracked objects:
  1940 ;;		On entry : 300/0
  1941 ;;		On exit  : 300/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1944 ;;      Params:         0       0       0       0
  1945 ;;      Locals:         0       0       0       0
  1946 ;;      Temps:          0       0       0       0
  1947 ;;      Totals:         0       0       0       0
  1948 ;;Total ram usage:        0 bytes
  1949 ;; Hardware stack levels used:    1
  1950 ;; Hardware stack levels required when called:    1
  1951 ;; This function calls:
  1952 ;;		Nothing
  1953 ;; This function is called by:
  1954 ;;		_KeyServer
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           
  1959                           ;psect for function _fan1
  1960  04A4                     _fan1:	
  1961                           
  1962                           ;pwm.c: 74: TRISA = 0x0D;
  1963                           
  1964                           ;incstack = 0
  1965                           ; Regs used in _fan1: [wreg]
  1966  04A4  300D               	movlw	13
  1967                           
  1968                           ;pwm.c: 75: PORTA = 0x10;
  1969  04A5  2C6D               	ljmp	PL10	;call to abstracted procedure
  1970  04A6                     __end_of_fan1:	
  1971                           
  1972                           	psect	text17
  1973  0374                     __ptext17:	
  1974 ;; *************** function _Init_System *****************
  1975 ;; Defined at:
  1976 ;;		line 34 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\main.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;		None
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;		None
  1981 ;; Return value:  Size  Location     Type
  1982 ;;                  1    wreg      void 
  1983 ;; Registers used:
  1984 ;;		wreg, status,2
  1985 ;; Tracked objects:
  1986 ;;		On entry : B00/0
  1987 ;;		On exit  : 300/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1990 ;;      Params:         0       0       0       0
  1991 ;;      Locals:         0       0       0       0
  1992 ;;      Temps:          0       0       0       0
  1993 ;;      Totals:         0       0       0       0
  1994 ;;Total ram usage:        0 bytes
  1995 ;; Hardware stack levels used:    1
  1996 ;; Hardware stack levels required when called:    1
  1997 ;; This function calls:
  1998 ;;		Nothing
  1999 ;; This function is called by:
  2000 ;;		_main
  2001 ;; This function uses a non-reentrant model
  2002 ;;
  2003                           
  2004                           
  2005                           ;psect for function _Init_System
  2006  0374                     _Init_System:	
  2007                           
  2008                           ;incstack = 0
  2009                           ; Regs used in _Init_System: [wreg+status,2]
  2010  0374  0000               	nop	;# 
  2011  0375  0064               	clrwdt	;# 
  2012                           
  2013                           ;main.c: 38: INTCON = 0;
  2014  0376  018B               	clrf	11	;volatile
  2015                           
  2016                           ;main.c: 39: OSCCON = 0X72;
  2017  0377  3072               	movlw	114
  2018  0378  1683               	bsf	3,5	;RP0=1, select bank1
  2019  0379  1303               	bcf	3,6	;RP1=0, select bank1
  2020  037A  0088               	movwf	8	;volatile
  2021                           
  2022                           ;main.c: 40: OPTION_REG = 0;
  2023  037B  0181               	clrf	1	;volatile
  2024                           
  2025                           ;main.c: 44: WPUB = 0x00;
  2026  037C  1283               	bcf	3,5	;RP0=0, select bank0
  2027  037D  0188               	clrf	8	;volatile
  2028                           
  2029                           ;main.c: 45: WPDB = 0x00;
  2030  037E  1683               	bsf	3,5	;RP0=1, select bank1
  2031  037F  0187               	clrf	7	;volatile
  2032                           
  2033                           ;main.c: 46: WPUA = 0x00;
  2034  0380  1283               	bcf	3,5	;RP0=0, select bank0
  2035  0381  0187               	clrf	7	;volatile
  2036                           
  2037                           ;main.c: 48: PIE1 = 2;
  2038  0382  3002               	movlw	2
  2039  0383  008D               	movwf	13	;volatile
  2040                           
  2041                           ;main.c: 49: PR2 = 250;
  2042  0384  30FA               	movlw	250
  2043  0385  1683               	bsf	3,5	;RP0=1, select bank1
  2044  0386  0091               	movwf	17	;volatile
  2045                           
  2046                           ;main.c: 50: T2CON = 4;
  2047  0387  3004               	movlw	4
  2048  0388  1283               	bcf	3,5	;RP0=0, select bank0
  2049  0389  0092               	movwf	18	;volatile
  2050                           
  2051                           ;main.c: 51: TRISA = 0x00;
  2052  038A  1683               	bsf	3,5	;RP0=1, select bank1
  2053  038B  0185               	clrf	5	;volatile
  2054                           
  2055                           ;main.c: 52: TRISB = 0x00;
  2056  038C  0186               	clrf	6	;volatile
  2057                           
  2058                           ;main.c: 53: PORTB = 0x00;
  2059  038D  1283               	bcf	3,5	;RP0=0, select bank0
  2060  038E  0186               	clrf	6	;volatile
  2061                           
  2062                           ;main.c: 54: PORTA = 0x00;
  2063  038F  0185               	clrf	5	;volatile
  2064                           
  2065                           ;main.c: 55: INTCON = 0XC0;
  2066  0390  30C0               	movlw	192
  2067  0391  008B               	movwf	11	;volatile
  2068  0392  0008               	return
  2069  0393                     __end_of_Init_System:	
  2070                           
  2071                           	psect	text18
  2072  032E                     __ptext18:	
  2073 ;; *************** function _CheckTouchKey *****************
  2074 ;; Defined at:
  2075 ;;		line 495 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;		None
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;		None
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      void 
  2082 ;; Registers used:
  2083 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 300/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2089 ;;      Params:         0       0       0       0
  2090 ;;      Locals:         0       0       0       0
  2091 ;;      Temps:          0       0       0       0
  2092 ;;      Totals:         0       0       0       0
  2093 ;;Total ram usage:        0 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    5
  2096 ;; This function calls:
  2097 ;;		_CheckKeyOldValue
  2098 ;;		_CheckOnceResult
  2099 ;;		_CheckValidTime
  2100 ;;		_ClearResSum
  2101 ;;		_GetTouchKeyValue
  2102 ;;		_KeyStopClear
  2103 ;;		_TurnKeyFlags
  2104 ;; This function is called by:
  2105 ;;		_main
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           
  2110                           ;psect for function _CheckTouchKey
  2111  032E                     _CheckTouchKey:	
  2112                           
  2113                           ;CheckTouchKey.c: 497: if(!b_kover)
  2114                           
  2115                           ;incstack = 0
  2116                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2117  032E  19F9               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  2118  032F  2B3A               	goto	l1635
  2119                           
  2120                           ;CheckTouchKey.c: 498: {
  2121                           ;CheckTouchKey.c: 500: GetTouchKeyValue();
  2122  0330  22D5               	fcall	_GetTouchKeyValue
  2123                           
  2124                           ;CheckTouchKey.c: 501: if(++KeyCounter >= 8)
  2125  0331  3008               	movlw	8
  2126  0332  1283               	bcf	3,5	;RP0=0, select bank0
  2127  0333  0AD4               	incf	_KeyCounter,f
  2128  0334  0254               	subwf	_KeyCounter,w
  2129  0335  1C03               	skipc
  2130  0336  2B53               	goto	l3137
  2131                           
  2132                           ;CheckTouchKey.c: 502: {
  2133                           ;CheckTouchKey.c: 503: KeyCounter = 0;
  2134  0337  01D4               	clrf	_KeyCounter
  2135                           
  2136                           ;CheckTouchKey.c: 504: b_kover = 1;
  2137  0338  15F9               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  2138  0339  2B53               	goto	l3137
  2139  033A                     l1635:	
  2140                           
  2141                           ;CheckTouchKey.c: 507: else if(!b_kover1)
  2142  033A  1979               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  2143  033B  2B4F               	goto	l3131
  2144                           
  2145                           ;CheckTouchKey.c: 508: {
  2146                           ;CheckTouchKey.c: 510: CheckOnceResult();
  2147  033C  2018               	fcall	_CheckOnceResult
  2148                           
  2149                           ;CheckTouchKey.c: 513: TurnKeyFlags();
  2150  033D  22A6               	fcall	_TurnKeyFlags
  2151                           
  2152                           ;CheckTouchKey.c: 514: b_kover1 = 1;
  2153  033E  1579               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  2154                           
  2155                           ;CheckTouchKey.c: 520: if(b_kerr || KeyCounter > KeyValidNumber)
  2156  033F  1879               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  2157  0340  2B47               	goto	l3121
  2158  0341  3002               	movlw	2
  2159  0342  1283               	bcf	3,5	;RP0=0, select bank0
  2160  0343  1303               	bcf	3,6	;RP1=0, select bank0
  2161  0344  0254               	subwf	_KeyCounter,w
  2162  0345  1C03               	skipc
  2163  0346  2B4B               	goto	l3129
  2164  0347                     l3121:	
  2165                           
  2166                           ;CheckTouchKey.c: 521: {
  2167                           ;CheckTouchKey.c: 522: KeyStopClear();
  2168  0347  23DF               	fcall	_KeyStopClear
  2169                           
  2170                           ;CheckTouchKey.c: 523: b_kerr = 0;
  2171  0348  1079               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  2172                           
  2173                           ;CheckTouchKey.c: 524: b_kover = 0;
  2174  0349  11F9               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  2175                           
  2176                           ;CheckTouchKey.c: 525: b_kover1 = 0;
  2177  034A  1179               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  2178  034B                     l3129:	
  2179                           
  2180                           ;CheckTouchKey.c: 526: }
  2181                           ;CheckTouchKey.c: 527: KeyCounter = 0;
  2182  034B  1283               	bcf	3,5	;RP0=0, select bank0
  2183  034C  1303               	bcf	3,6	;RP1=0, select bank0
  2184  034D  01D4               	clrf	_KeyCounter
  2185                           
  2186                           ;CheckTouchKey.c: 528: }
  2187  034E  2B53               	goto	l3137
  2188  034F                     l3131:	
  2189                           
  2190                           ;CheckTouchKey.c: 529: else
  2191                           ;CheckTouchKey.c: 530: {
  2192                           ;CheckTouchKey.c: 532: CheckKeyOldValue();
  2193  034F  21A4               	fcall	_CheckKeyOldValue
  2194                           
  2195                           ;CheckTouchKey.c: 534: ClearResSum();
  2196  0350  242D               	fcall	_ClearResSum
  2197                           
  2198                           ;CheckTouchKey.c: 536: b_kover = 0;
  2199  0351  11F9               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  2200                           
  2201                           ;CheckTouchKey.c: 537: b_kover1 = 0;
  2202  0352  1179               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  2203  0353                     l3137:	
  2204                           
  2205                           ;CheckTouchKey.c: 538: }
  2206                           ;CheckTouchKey.c: 540: CheckValidTime();
  2207  0353  2C09               	ljmp	l2917
  2208  0354                     __end_of_CheckTouchKey:	
  2209                           
  2210                           	psect	text19
  2211  02A6                     __ptext19:	
  2212 ;; *************** function _TurnKeyFlags *****************
  2213 ;; Defined at:
  2214 ;;		line 382 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;		None
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;		None
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  1    wreg      void 
  2221 ;; Registers used:
  2222 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2223 ;; Tracked objects:
  2224 ;;		On entry : B00/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2228 ;;      Params:         0       0       0       0
  2229 ;;      Locals:         0       0       0       0
  2230 ;;      Temps:          0       0       0       0
  2231 ;;      Totals:         0       0       0       0
  2232 ;;Total ram usage:        0 bytes
  2233 ;; Hardware stack levels used:    1
  2234 ;; Hardware stack levels required when called:    4
  2235 ;; This function calls:
  2236 ;;		_KeyClearIn
  2237 ;; This function is called by:
  2238 ;;		_CheckTouchKey
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           
  2243                           ;psect for function _TurnKeyFlags
  2244  02A6                     _TurnKeyFlags:	
  2245                           
  2246                           ;CheckTouchKey.c: 384: static unsigned char KeyHaveTimes = 0;
  2247                           ;CheckTouchKey.c: 385: static unsigned char KeyNoTimes = 0;
  2248                           ;CheckTouchKey.c: 387: if(KeyData[0] | KeyData[1])
  2249                           
  2250                           ;incstack = 0
  2251                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2252  02A6  0847               	movf	_KeyData+1,w	;volatile
  2253  02A7  0446               	iorwf	_KeyData,w	;volatile
  2254  02A8  1903               	btfsc	3,2
  2255  02A9  2AC8               	goto	l2909
  2256                           
  2257                           ;CheckTouchKey.c: 388: {
  2258                           ;CheckTouchKey.c: 389: KeyNoTimes = 0;
  2259  02AA  01D0               	clrf	TurnKeyFlags@KeyNoTimes
  2260                           
  2261                           ;CheckTouchKey.c: 391: if(KeyData[0] == KeyOldData[0] && KeyData[1] == KeyOldData[1])
  2262  02AB  0846               	movf	_KeyData,w	;volatile
  2263  02AC  0648               	xorwf	_KeyOldData,w	;volatile
  2264  02AD  1D03               	skipz
  2265  02AE  2AC1               	goto	l1616
  2266  02AF  0847               	movf	_KeyData+1,w	;volatile
  2267  02B0  0649               	xorwf	_KeyOldData+1,w	;volatile
  2268  02B1  1D03               	skipz
  2269  02B2  2AC1               	goto	l1616
  2270  02B3  3002               	movlw	2
  2271  02B4  0AD1               	incf	TurnKeyFlags@KeyHaveTimes,f
  2272  02B5  0251               	subwf	TurnKeyFlags@KeyHaveTimes,w
  2273  02B6  1C03               	skipc
  2274  02B7  0008               	return
  2275                           
  2276                           ;CheckTouchKey.c: 394: {
  2277                           ;CheckTouchKey.c: 395: KeyHaveTimes = 0;
  2278  02B8  01D1               	clrf	TurnKeyFlags@KeyHaveTimes
  2279                           
  2280                           ;CheckTouchKey.c: 396: KeyFlag[0] = KeyData[0];
  2281  02B9  0846               	movf	_KeyData,w	;volatile
  2282  02BA  00CE               	movwf	_KeyFlag	;volatile
  2283                           
  2284                           ;CheckTouchKey.c: 397: KeyFlag[1] = KeyData[1];
  2285  02BB  0847               	movf	_KeyData+1,w	;volatile
  2286  02BC  00CF               	movwf	_KeyFlag+1	;volatile
  2287                           
  2288                           ;CheckTouchKey.c: 400: {
  2289                           ;CheckTouchKey.c: 401: if(!b_kclr)
  2290  02BD  18F9               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2291  02BE  0008               	return
  2292                           
  2293                           ;CheckTouchKey.c: 402: {
  2294                           ;CheckTouchKey.c: 403: b_kclr = 1;
  2295  02BF  14F9               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2296                           
  2297                           ;CheckTouchKey.c: 404: KeyClearIn();
  2298  02C0  2C3C               	ljmp	l2647
  2299  02C1                     l1616:	
  2300                           
  2301                           ;CheckTouchKey.c: 409: else
  2302                           ;CheckTouchKey.c: 410: {
  2303                           ;CheckTouchKey.c: 411: b_kclr = 0;
  2304  02C1  10F9               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2305                           
  2306                           ;CheckTouchKey.c: 412: KeyOldData[0] = KeyData[0];
  2307  02C2  0846               	movf	_KeyData,w	;volatile
  2308  02C3  00C8               	movwf	_KeyOldData	;volatile
  2309                           
  2310                           ;CheckTouchKey.c: 413: KeyOldData[1] = KeyData[1];
  2311  02C4  0847               	movf	_KeyData+1,w	;volatile
  2312  02C5  00C9               	movwf	_KeyOldData+1	;volatile
  2313                           
  2314                           ;CheckTouchKey.c: 414: KeyHaveTimes = 0;
  2315  02C6  01D1               	clrf	TurnKeyFlags@KeyHaveTimes
  2316                           
  2317                           ;CheckTouchKey.c: 415: }
  2318                           ;CheckTouchKey.c: 416: }
  2319  02C7  0008               	return
  2320  02C8                     l2909:	
  2321                           
  2322                           ;CheckTouchKey.c: 417: else
  2323                           ;CheckTouchKey.c: 418: {
  2324                           ;CheckTouchKey.c: 419: KeyHaveTimes = 0;
  2325  02C8  01D1               	clrf	TurnKeyFlags@KeyHaveTimes
  2326                           
  2327                           ;CheckTouchKey.c: 420: KeyOldData[0] = 0;
  2328  02C9  01C8               	clrf	_KeyOldData	;volatile
  2329                           
  2330                           ;CheckTouchKey.c: 421: KeyOldData[1] = 0;
  2331  02CA  01C9               	clrf	_KeyOldData+1	;volatile
  2332                           
  2333                           ;CheckTouchKey.c: 423: if(++KeyNoTimes >=2)
  2334  02CB  3002               	movlw	2
  2335  02CC  0AD0               	incf	TurnKeyFlags@KeyNoTimes,f
  2336  02CD  0250               	subwf	TurnKeyFlags@KeyNoTimes,w
  2337  02CE  1C03               	skipc
  2338  02CF  0008               	return
  2339                           
  2340                           ;CheckTouchKey.c: 424: {
  2341                           ;CheckTouchKey.c: 425: KeyNoTimes = 0;
  2342  02D0  01D0               	clrf	TurnKeyFlags@KeyNoTimes
  2343                           
  2344                           ;CheckTouchKey.c: 426: KeyFlag[0] = 0;
  2345  02D1  01CE               	clrf	_KeyFlag	;volatile
  2346                           
  2347                           ;CheckTouchKey.c: 427: KeyFlag[1] = 0;
  2348  02D2  01CF               	clrf	_KeyFlag+1	;volatile
  2349                           
  2350                           ;CheckTouchKey.c: 429: b_kclr = 0;
  2351  02D3  10F9               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2352  02D4  0008               	return
  2353  02D5                     __end_of_TurnKeyFlags:	
  2354                           
  2355                           	psect	text20
  2356  043C                     __ptext20:	
  2357 ;; *************** function _KeyClearIn *****************
  2358 ;; Defined at:
  2359 ;;		line 88 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;		None
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;  cnt             1    4[COMMON] unsigned char 
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  1    wreg      void 
  2366 ;; Registers used:
  2367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2368 ;; Tracked objects:
  2369 ;;		On entry : B00/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2373 ;;      Params:         0       0       0       0
  2374 ;;      Locals:         1       0       0       0
  2375 ;;      Temps:          0       0       0       0
  2376 ;;      Totals:         1       0       0       0
  2377 ;;Total ram usage:        1 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    3
  2380 ;; This function calls:
  2381 ;;		_KeyClearOne
  2382 ;;		_KeyIsIn
  2383 ;; This function is called by:
  2384 ;;		_TurnKeyFlags
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           
  2389                           ;psect for function _KeyClearIn
  2390  043C                     _KeyClearIn:	
  2391  043C                     l2647:	
  2392                           ;incstack = 0
  2393                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2394                           
  2395                           
  2396                           ;CheckTouchKey.c: 90: unsigned char cnt;
  2397                           ;CheckTouchKey.c: 91: for(cnt=0;cnt < KeyTotalNumber;cnt++)
  2398  043C  01F4               	clrf	KeyClearIn@cnt
  2399  043D                     l2653:	
  2400                           
  2401                           ;CheckTouchKey.c: 92: {
  2402                           ;CheckTouchKey.c: 93: if(!KeyIsIn(cnt))
  2403  043D  0874               	movf	KeyClearIn@cnt,w
  2404  043E  241B               	fcall	_KeyIsIn
  2405  043F  3A00               	xorlw	0
  2406  0440  1D03               	skipz
  2407  0441  2C44               	goto	l2657
  2408                           
  2409                           ;CheckTouchKey.c: 94: {
  2410                           ;CheckTouchKey.c: 95: KeyClearOne(cnt);
  2411  0442  0874               	movf	KeyClearIn@cnt,w
  2412  0443  23C6               	fcall	_KeyClearOne
  2413  0444                     l2657:	
  2414  0444  3004               	movlw	4
  2415  0445  0AF4               	incf	KeyClearIn@cnt,f
  2416  0446  0274               	subwf	KeyClearIn@cnt,w
  2417  0447  1803               	btfsc	3,0
  2418  0448  0008               	return
  2419  0449  2C3D               	goto	l2653
  2420  044A                     __end_of_KeyClearIn:	
  2421                           
  2422                           	psect	text21
  2423  03DF                     __ptext21:	
  2424 ;; *************** function _KeyStopClear *****************
  2425 ;; Defined at:
  2426 ;;		line 107 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2427 ;; Parameters:    Size  Location     Type
  2428 ;;		None
  2429 ;; Auto vars:     Size  Location     Type
  2430 ;;  i               1    3[COMMON] unsigned char 
  2431 ;; Return value:  Size  Location     Type
  2432 ;;                  1    wreg      void 
  2433 ;; Registers used:
  2434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2435 ;; Tracked objects:
  2436 ;;		On entry : 0/0
  2437 ;;		On exit  : 800/0
  2438 ;;		Unchanged: 0/0
  2439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2440 ;;      Params:         0       0       0       0
  2441 ;;      Locals:         1       0       0       0
  2442 ;;      Temps:          0       0       0       0
  2443 ;;      Totals:         1       0       0       0
  2444 ;;Total ram usage:        1 bytes
  2445 ;; Hardware stack levels used:    1
  2446 ;; Hardware stack levels required when called:    2
  2447 ;; This function calls:
  2448 ;;		_KeyClearOne
  2449 ;; This function is called by:
  2450 ;;		_CheckTouchKey
  2451 ;; This function uses a non-reentrant model
  2452 ;;
  2453                           
  2454                           
  2455                           ;psect for function _KeyStopClear
  2456  03DF                     _KeyStopClear:	
  2457                           
  2458                           ;CheckTouchKey.c: 109: unsigned char i;
  2459                           ;CheckTouchKey.c: 110: KeyFlag[0] = 0;
  2460                           
  2461                           ;incstack = 0
  2462                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2463  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  2464  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  2465  03E1  01CE               	clrf	_KeyFlag	;volatile
  2466                           
  2467                           ;CheckTouchKey.c: 111: KeyFlag[1] = 0;
  2468  03E2  01CF               	clrf	_KeyFlag+1	;volatile
  2469                           
  2470                           ;CheckTouchKey.c: 112: for(i = 0; i < KeyTotalNumber; i++)
  2471  03E3  01F3               	clrf	KeyStopClear@i
  2472  03E4                     l2749:	
  2473                           
  2474                           ;CheckTouchKey.c: 113: {
  2475                           ;CheckTouchKey.c: 114: KeyResSum[i] = 0;
  2476  03E4  1003               	clrc
  2477  03E5  0D73               	rlf	KeyStopClear@i,w
  2478  03E6  3E38               	addlw	(low (_KeyResSum| 0))& (0+255)
  2479  03E7  0084               	movwf	4
  2480  03E8  1383               	bcf	3,7	;select IRP bank0
  2481  03E9  0180               	clrf	0
  2482  03EA  0A84               	incf	4,f
  2483  03EB  0180               	clrf	0
  2484                           
  2485                           ;CheckTouchKey.c: 115: KeyClearOne(i);
  2486  03EC  0873               	movf	KeyStopClear@i,w
  2487  03ED  23C6               	fcall	_KeyClearOne
  2488  03EE  3004               	movlw	4
  2489  03EF  0AF3               	incf	KeyStopClear@i,f
  2490  03F0  0273               	subwf	KeyStopClear@i,w
  2491  03F1  1803               	btfsc	3,0
  2492  03F2  0008               	return
  2493  03F3  2BE4               	goto	l2749
  2494  03F4                     __end_of_KeyStopClear:	
  2495                           
  2496                           	psect	text22
  2497  02D5                     __ptext22:	
  2498 ;; *************** function _GetTouchKeyValue *****************
  2499 ;; Defined at:
  2500 ;;		line 180 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;		None
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  cnt             1    4[COMMON] unsigned char 
  2505 ;;  temp            1    3[COMMON] unsigned char 
  2506 ;; Return value:  Size  Location     Type
  2507 ;;                  1    wreg      void 
  2508 ;; Registers used:
  2509 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : A00/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2515 ;;      Params:         0       0       0       0
  2516 ;;      Locals:         2       0       0       0
  2517 ;;      Temps:          0       0       0       0
  2518 ;;      Totals:         2       0       0       0
  2519 ;;Total ram usage:        2 bytes
  2520 ;; Hardware stack levels used:    1
  2521 ;; Hardware stack levels required when called:    2
  2522 ;; This function calls:
  2523 ;;		_ClearResSum
  2524 ;; This function is called by:
  2525 ;;		_CheckTouchKey
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           
  2530                           ;psect for function _GetTouchKeyValue
  2531  02D5                     _GetTouchKeyValue:	
  2532                           
  2533                           ;CheckTouchKey.c: 182: unsigned char cnt = 0,temp;
  2534                           
  2535                           ;incstack = 0
  2536                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2537  02D5  01F4               	clrf	GetTouchKeyValue@cnt
  2538  02D6                     l1556:	
  2539                           ;CheckTouchKey.c: 184: do
  2540                           
  2541                           
  2542                           ;CheckTouchKey.c: 185: {
  2543                           ;CheckTouchKey.c: 186: KEYCON0 = 0;
  2544  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  2545  02D7  1303               	bcf	3,6	;RP1=0, select bank1
  2546  02D8  0192               	clrf	18	;volatile
  2547                           
  2548                           ;CheckTouchKey.c: 187: KEYCON1 = 0;
  2549  02D9  0193               	clrf	19	;volatile
  2550                           
  2551                           ;CheckTouchKey.c: 194: KEYCON0 = Table_KeyCap[cnt];
  2552  02DA  0874               	movf	GetTouchKeyValue@cnt,w
  2553  02DB  3E0D               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  2554  02DC  0084               	movwf	4
  2555  02DD  2393               	fcall	stringdir
  2556  02DE  0092               	movwf	18	;volatile
  2557                           
  2558                           ;CheckTouchKey.c: 195: KEYCON1 = Table_KeyChannel[cnt];
  2559  02DF  0874               	movf	GetTouchKeyValue@cnt,w
  2560  02E0  3E11               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  2561  02E1  0084               	movwf	4
  2562  02E2  2393               	fcall	stringdir
  2563  02E3  0093               	movwf	19	;volatile
  2564                           
  2565                           ;CheckTouchKey.c: 196: KEYCON0 |= 0x1;
  2566  02E4  1412               	bsf	18,0	;volatile
  2567                           
  2568                           ;CheckTouchKey.c: 198: temp = 0;
  2569  02E5  01F3               	clrf	GetTouchKeyValue@temp
  2570  02E6                     l1557:	
  2571                           ;CheckTouchKey.c: 199: while(!(KEYCON0&0x80))
  2572                           
  2573  02E6  1B92               	btfsc	18,7	;volatile
  2574  02E7  2AEE               	goto	l2771
  2575                           
  2576                           ;CheckTouchKey.c: 200: {
  2577                           ;CheckTouchKey.c: 201: if(0 == (--temp))
  2578  02E8  0BF3               	decfsz	GetTouchKeyValue@temp,f
  2579  02E9  2AE6               	goto	l1557
  2580                           
  2581                           ;CheckTouchKey.c: 202: {
  2582                           ;CheckTouchKey.c: 203: KeyCounter = 255;
  2583  02EA  30FF               	movlw	255
  2584  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  2585  02EC  00D4               	movwf	_KeyCounter
  2586                           
  2587                           ;CheckTouchKey.c: 204: ClearResSum();
  2588  02ED  2C2D               	ljmp	l2661
  2589  02EE                     l2771:	
  2590                           
  2591                           ;CheckTouchKey.c: 206: }
  2592                           ;CheckTouchKey.c: 207: }
  2593                           ;CheckTouchKey.c: 209: KeyResSum[cnt] += (unsigned int)((KEYDATAH<<8) | KEYDATAL);
  2594  02EE  1003               	clrc
  2595  02EF  0D74               	rlf	GetTouchKeyValue@cnt,w
  2596  02F0  3E38               	addlw	(low (_KeyResSum| 0))& (0+255)
  2597  02F1  0084               	movwf	4
  2598  02F2  0814               	movf	20,w	;volatile
  2599  02F3  1383               	bcf	3,7	;select IRP bank0
  2600  02F4  0780               	addwf	0,f
  2601  02F5  0F84               	incfsz	4,f
  2602  02F6  0800               	movf	0,w
  2603  02F7  1803               	skipnc
  2604  02F8  0A00               	incf	0,w
  2605  02F9  00FF               	movwf	127
  2606  02FA  0815               	movf	21,w	;volatile
  2607  02FB  077F               	addwf	127,w
  2608  02FC  0080               	movwf	0
  2609  02FD  3004               	movlw	4
  2610  02FE  0384               	decf	4,f
  2611  02FF  0AF4               	incf	GetTouchKeyValue@cnt,f
  2612  0300  0274               	subwf	GetTouchKeyValue@cnt,w
  2613  0301  1803               	btfsc	3,0
  2614  0302  0008               	return
  2615  0303  2AD6               	goto	l1556
  2616  0304                     __end_of_GetTouchKeyValue:	
  2617                           
  2618                           	psect	text23
  2619  042D                     __ptext23:	
  2620 ;; *************** function _ClearResSum *****************
  2621 ;; Defined at:
  2622 ;;		line 126 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;		None
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;  cnt             1    2[COMMON] unsigned char 
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2631 ;; Tracked objects:
  2632 ;;		On entry : 300/0
  2633 ;;		On exit  : B00/0
  2634 ;;		Unchanged: 300/0
  2635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2636 ;;      Params:         0       0       0       0
  2637 ;;      Locals:         1       0       0       0
  2638 ;;      Temps:          0       0       0       0
  2639 ;;      Totals:         1       0       0       0
  2640 ;;Total ram usage:        1 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    1
  2643 ;; This function calls:
  2644 ;;		Nothing
  2645 ;; This function is called by:
  2646 ;;		_GetTouchKeyValue
  2647 ;;		_CheckTouchKey
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           
  2652                           ;psect for function _ClearResSum
  2653  042D                     _ClearResSum:	
  2654  042D                     l2661:	
  2655                           ;incstack = 0
  2656                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  2657                           
  2658                           
  2659                           ;CheckTouchKey.c: 128: unsigned char cnt = 0;
  2660  042D  01F2               	clrf	ClearResSum@cnt
  2661  042E                     l2663:	
  2662                           
  2663                           ;CheckTouchKey.c: 130: {
  2664                           ;CheckTouchKey.c: 131: KeyResSum[cnt] = 0;
  2665  042E  1003               	clrc
  2666  042F  0D72               	rlf	ClearResSum@cnt,w
  2667  0430  3E38               	addlw	(low (_KeyResSum| 0))& (0+255)
  2668  0431  0084               	movwf	4
  2669  0432  3004               	movlw	4
  2670  0433  1383               	bcf	3,7	;select IRP bank0
  2671  0434  0180               	clrf	0
  2672  0435  0A84               	incf	4,f
  2673  0436  0180               	clrf	0
  2674  0437  0AF2               	incf	ClearResSum@cnt,f
  2675  0438  0272               	subwf	ClearResSum@cnt,w
  2676  0439  1803               	btfsc	3,0
  2677  043A  0008               	return
  2678  043B  2C2E               	goto	l2663
  2679  043C                     __end_of_ClearResSum:	
  2680                           
  2681                           	psect	text24
  2682  0409                     __ptext24:	
  2683 ;; *************** function _CheckValidTime *****************
  2684 ;; Defined at:
  2685 ;;		line 467 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;		None
  2688 ;; Auto vars:     Size  Location     Type
  2689 ;;		None
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  1    wreg      void 
  2692 ;; Registers used:
  2693 ;;		wreg, status,2, status,0
  2694 ;; Tracked objects:
  2695 ;;		On entry : 300/0
  2696 ;;		On exit  : 300/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2699 ;;      Params:         0       0       0       0
  2700 ;;      Locals:         0       0       0       0
  2701 ;;      Temps:          0       0       0       0
  2702 ;;      Totals:         0       0       0       0
  2703 ;;Total ram usage:        0 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:    1
  2706 ;; This function calls:
  2707 ;;		Nothing
  2708 ;; This function is called by:
  2709 ;;		_CheckTouchKey
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713                           
  2714                           ;psect for function _CheckValidTime
  2715  0409                     _CheckValidTime:	
  2716  0409                     l2917:	
  2717                           ;incstack = 0
  2718                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  2719                           
  2720                           
  2721                           ;CheckTouchKey.c: 472: {
  2722                           ;CheckTouchKey.c: 473: if(KeyFlag[0] | KeyFlag[1])
  2723  0409  084F               	movf	_KeyFlag+1,w	;volatile
  2724  040A  044E               	iorwf	_KeyFlag,w	;volatile
  2725  040B  1903               	btfsc	3,2
  2726  040C  2C18               	goto	l2923
  2727  040D  0AC4               	incf	CheckValidTime@validtime,f
  2728  040E  1903               	skipnz
  2729  040F  0AC5               	incf	CheckValidTime@validtime+1,f
  2730  0410  303A               	movlw	58
  2731  0411  0245               	subwf	CheckValidTime@validtime+1,w
  2732  0412  3098               	movlw	152
  2733  0413  1903               	skipnz
  2734  0414  0244               	subwf	CheckValidTime@validtime,w
  2735  0415  1C03               	skipc
  2736  0416  0008               	return
  2737                           
  2738                           ;CheckTouchKey.c: 476: {
  2739                           ;CheckTouchKey.c: 477: b_kerr = 1;
  2740  0417  1479               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  2741  0418                     l2923:	
  2742                           
  2743                           ;CheckTouchKey.c: 478: validtime = 0;
  2744  0418  01C4               	clrf	CheckValidTime@validtime
  2745  0419  01C5               	clrf	CheckValidTime@validtime+1
  2746  041A  0008               	return
  2747  041B                     __end_of_CheckValidTime:	
  2748                           
  2749                           	psect	text25
  2750  0018                     __ptext25:	
  2751 ;; *************** function _CheckOnceResult *****************
  2752 ;; Defined at:
  2753 ;;		line 221 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;		None
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;  KeyResTemp      2    6[BANK0 ] unsigned int 
  2758 ;;  KeyValue        2    2[BANK0 ] unsigned int 
  2759 ;;  OldValue        2    0[BANK0 ] unsigned int 
  2760 ;;  cnt             1    8[BANK0 ] unsigned char 
  2761 ;;  KeyDown         1    5[BANK0 ] unsigned char 
  2762 ;;  flag            1    4[BANK0 ] unsigned char 
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  1    wreg      void 
  2765 ;; Registers used:
  2766 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : B00/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2772 ;;      Params:         0       0       0       0
  2773 ;;      Locals:         0       9       0       0
  2774 ;;      Temps:          4       0       0       0
  2775 ;;      Totals:         4       9       0       0
  2776 ;;Total ram usage:       13 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    3
  2779 ;; This function calls:
  2780 ;;		_KeyClearOne
  2781 ;;		_KeyHave
  2782 ;;		_KeyIsIn
  2783 ;; This function is called by:
  2784 ;;		_CheckTouchKey
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           
  2789                           ;psect for function _CheckOnceResult
  2790  0018                     _CheckOnceResult:	
  2791                           
  2792                           ;CheckTouchKey.c: 223: unsigned char cnt = 0;
  2793                           
  2794                           ;incstack = 0
  2795                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2796  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2797  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2798  001A  01E6               	clrf	CheckOnceResult@cnt
  2799                           
  2800                           ;CheckTouchKey.c: 224: unsigned char KeyDown;
  2801                           ;CheckTouchKey.c: 225: unsigned char flag;
  2802                           ;CheckTouchKey.c: 227: unsigned int KeyResTemp;
  2803                           ;CheckTouchKey.c: 228: unsigned int KeyValue;
  2804                           ;CheckTouchKey.c: 229: unsigned int OldValue;
  2805                           ;CheckTouchKey.c: 231: KeyData[0] = 0;
  2806  001B  01C6               	clrf	_KeyData	;volatile
  2807                           
  2808                           ;CheckTouchKey.c: 232: KeyData[1] = 0;
  2809  001C  01C7               	clrf	_KeyData+1	;volatile
  2810                           
  2811                           ;CheckTouchKey.c: 233: KeyMaxSub = 0;
  2812  001D  01D3               	clrf	_KeyMaxSub
  2813  001E                     l2777:	
  2814                           
  2815                           ;CheckTouchKey.c: 237: {
  2816                           ;CheckTouchKey.c: 238: flag = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  2817  001E  0866               	movf	CheckOnceResult@cnt,w
  2818  001F  3907               	andlw	7
  2819  0020  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  2820  0021  0084               	movwf	4
  2821  0022  2393               	fcall	stringdir
  2822  0023  00E2               	movwf	CheckOnceResult@flag
  2823                           
  2824                           ;CheckTouchKey.c: 240: KeyResSum[cnt] >>= 3;
  2825  0024  1003               	clrc
  2826  0025  0D66               	rlf	CheckOnceResult@cnt,w
  2827  0026  3E38               	addlw	(low (_KeyResSum| 0))& (0+255)
  2828  0027  0084               	movwf	4
  2829  0028  3003               	movlw	3
  2830  0029                     u1055:	
  2831  0029  0A84               	incf	4,f
  2832  002A  1003               	clrc
  2833  002B  1383               	bcf	3,7	;select IRP bank0
  2834  002C  0C80               	rrf	0,f
  2835  002D  0384               	decf	4,f
  2836  002E  0C80               	rrf	0,f
  2837  002F  3EFF               	addlw	-1
  2838  0030  1D03               	skipz
  2839  0031  2829               	goto	u1055
  2840                           
  2841                           ;CheckTouchKey.c: 241: KeyResTemp = KeyResSum[cnt];
  2842  0032  1003               	clrc
  2843  0033  0D66               	rlf	CheckOnceResult@cnt,w
  2844  0034  3E38               	addlw	(low (_KeyResSum| 0))& (0+255)
  2845  0035  0084               	movwf	4
  2846  0036  0800               	movf	0,w
  2847  0037  00E4               	movwf	CheckOnceResult@KeyResTemp
  2848  0038  0A84               	incf	4,f
  2849  0039  0800               	movf	0,w
  2850  003A  00E5               	movwf	CheckOnceResult@KeyResTemp+1
  2851                           
  2852                           ;CheckTouchKey.c: 242: KeyDown = Table_KeyDown[cnt];
  2853  003B  0866               	movf	CheckOnceResult@cnt,w
  2854  003C  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  2855  003D  0084               	movwf	4
  2856  003E  2393               	fcall	stringdir
  2857  003F  00E3               	movwf	CheckOnceResult@KeyDown
  2858                           
  2859                           ;CheckTouchKey.c: 244: KeyValue = KeyResTemp + KeyDown;
  2860  0040  00E0               	movwf	CheckOnceResult@KeyValue
  2861  0041  01E1               	clrf	CheckOnceResult@KeyValue+1
  2862  0042  0864               	movf	CheckOnceResult@KeyResTemp,w
  2863  0043  07E0               	addwf	CheckOnceResult@KeyValue,f
  2864  0044  1803               	skipnc
  2865  0045  0AE1               	incf	CheckOnceResult@KeyValue+1,f
  2866  0046  0865               	movf	CheckOnceResult@KeyResTemp+1,w
  2867  0047  07E1               	addwf	CheckOnceResult@KeyValue+1,f
  2868                           
  2869                           ;CheckTouchKey.c: 246: if(!KeyIsIn(cnt))
  2870  0048  0866               	movf	CheckOnceResult@cnt,w
  2871  0049  241B               	fcall	_KeyIsIn
  2872  004A  3A00               	xorlw	0
  2873                           
  2874                           ;CheckTouchKey.c: 247: {
  2875                           ;CheckTouchKey.c: 249: OldValue = KeyOldValue2[cnt];
  2876  004B  1003               	clrc
  2877  004C  1D03               	skipz
  2878  004D  28A5               	goto	L3
  2879  004E  0D66               	rlf	CheckOnceResult@cnt,w
  2880  004F  3E28               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2881  0050  0084               	movwf	4
  2882  0051  1383               	bcf	3,7	;select IRP bank0
  2883  0052  0800               	movf	0,w
  2884  0053  00DE               	movwf	CheckOnceResult@OldValue
  2885  0054  0A84               	incf	4,f
  2886  0055  0800               	movf	0,w
  2887  0056  00DF               	movwf	CheckOnceResult@OldValue+1
  2888                           
  2889                           ;CheckTouchKey.c: 251: if(KeyReference[cnt] > KeyValue)
  2890  0057  1003               	clrc
  2891  0058  0D66               	rlf	CheckOnceResult@cnt,w
  2892  0059  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2893  005A  20FF               	fcall	PL6	;call to abstracted procedure
  2894  005B  0261               	subwf	CheckOnceResult@KeyValue+1,w
  2895  005C  1D03               	skipz
  2896  005D  2860               	goto	u1075
  2897  005E  0875               	movf	??_CheckOnceResult,w
  2898  005F  0260               	subwf	CheckOnceResult@KeyValue,w
  2899  0060                     u1075:	
  2900  0060  1803               	skipnc
  2901  0061  286E               	goto	l2795
  2902                           
  2903                           ;CheckTouchKey.c: 252: {
  2904                           ;CheckTouchKey.c: 253: KeyResTemp = KeyReference[cnt] - KeyResTemp;
  2905  0062  1003               	clrc
  2906  0063  0D66               	rlf	CheckOnceResult@cnt,w
  2907  0064  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2908  0065  20FF               	fcall	PL6	;call to abstracted procedure
  2909  0066  0864               	movf	CheckOnceResult@KeyResTemp,w
  2910  0067  0275               	subwf	??_CheckOnceResult,w
  2911  0068  00E4               	movwf	CheckOnceResult@KeyResTemp
  2912  0069  0865               	movf	CheckOnceResult@KeyResTemp+1,w
  2913  006A  1C03               	skipc
  2914  006B  0A65               	incf	CheckOnceResult@KeyResTemp+1,w
  2915  006C  0276               	subwf	??_CheckOnceResult+1,w
  2916  006D  2891               	goto	L1
  2917  006E                     l2795:	
  2918                           ;CheckTouchKey.c: 254: }
  2919                           
  2920                           
  2921                           ;CheckTouchKey.c: 255: else if ((OldValue > KeyValue) && (KeyOldValue1[cnt] > KeyValue))
  2922  006E  085F               	movf	CheckOnceResult@OldValue+1,w
  2923  006F  0261               	subwf	CheckOnceResult@KeyValue+1,w
  2924  0070  1D03               	skipz
  2925  0071  2874               	goto	u1085
  2926  0072  085E               	movf	CheckOnceResult@OldValue,w
  2927  0073  0260               	subwf	CheckOnceResult@KeyValue,w
  2928  0074                     u1085:	
  2929  0074  1803               	skipnc
  2930  0075  28E5               	goto	l2841
  2931  0076  1003               	clrc
  2932  0077  0D66               	rlf	CheckOnceResult@cnt,w
  2933  0078  3E30               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2934  0079  20FF               	fcall	PL6	;call to abstracted procedure
  2935  007A  0261               	subwf	CheckOnceResult@KeyValue+1,w
  2936  007B  1D03               	skipz
  2937  007C  287F               	goto	u1095
  2938  007D  0875               	movf	??_CheckOnceResult,w
  2939  007E  0260               	subwf	CheckOnceResult@KeyValue,w
  2940  007F                     u1095:	
  2941  007F  1803               	skipnc
  2942  0080  28E5               	goto	l2841
  2943                           
  2944                           ;CheckTouchKey.c: 256: {
  2945                           ;CheckTouchKey.c: 257: KeyReference[cnt] = OldValue;
  2946  0081  1003               	clrc
  2947  0082  0D66               	rlf	CheckOnceResult@cnt,w
  2948  0083  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2949  0084  0084               	movwf	4
  2950  0085  085E               	movf	CheckOnceResult@OldValue,w
  2951  0086  0080               	movwf	0
  2952  0087  0A84               	incf	4,f
  2953  0088  085F               	movf	CheckOnceResult@OldValue+1,w
  2954  0089  0080               	movwf	0
  2955                           
  2956                           ;CheckTouchKey.c: 258: KeyResTemp = OldValue - KeyResTemp;
  2957  008A  0864               	movf	CheckOnceResult@KeyResTemp,w
  2958  008B  025E               	subwf	CheckOnceResult@OldValue,w
  2959  008C  00E4               	movwf	CheckOnceResult@KeyResTemp
  2960  008D  0865               	movf	CheckOnceResult@KeyResTemp+1,w
  2961  008E  1C03               	skipc
  2962  008F  0A65               	incf	CheckOnceResult@KeyResTemp+1,w
  2963  0090  025F               	subwf	CheckOnceResult@OldValue+1,w
  2964  0091                     L1:	
  2965  0091  00E5               	movwf	CheckOnceResult@KeyResTemp+1
  2966                           
  2967                           ;CheckTouchKey.c: 263: }
  2968                           ;CheckTouchKey.c: 265: KeyUpShake[cnt] = 0;
  2969                           
  2970                           ;CheckTouchKey.c: 259: }
  2971  0092  0866               	movf	CheckOnceResult@cnt,w
  2972  0093  3E40               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2973  0094  0084               	movwf	4
  2974  0095  0180               	clrf	0
  2975                           
  2976                           ;CheckTouchKey.c: 268: {
  2977                           ;CheckTouchKey.c: 269: if(KeyResTemp >> 8)
  2978  0096  0865               	movf	CheckOnceResult@KeyResTemp+1,w
  2979  0097  1903               	btfsc	3,2
  2980  0098  289B               	goto	l2809
  2981                           
  2982                           ;CheckTouchKey.c: 270: {
  2983                           ;CheckTouchKey.c: 271: KeyDown = 0xFF;
  2984  0099  30FF               	movlw	255
  2985  009A  289C               	goto	L2
  2986  009B                     l2809:	
  2987                           ;CheckTouchKey.c: 272: }
  2988                           
  2989                           
  2990                           ;CheckTouchKey.c: 273: else
  2991                           ;CheckTouchKey.c: 274: {
  2992                           ;CheckTouchKey.c: 275: KeyDown = KeyResTemp & 0xFF;
  2993  009B  0864               	movf	CheckOnceResult@KeyResTemp,w
  2994  009C                     L2:	
  2995  009C  00E3               	movwf	CheckOnceResult@KeyDown
  2996                           
  2997                           ;CheckTouchKey.c: 276: }
  2998                           ;CheckTouchKey.c: 278: if(KeyMaxSub < KeyDown)
  2999  009D  0253               	subwf	_KeyMaxSub,w
  3000  009E  1803               	skipnc
  3001  009F  28A3               	goto	l2815
  3002                           
  3003                           ;CheckTouchKey.c: 279: {
  3004                           ;CheckTouchKey.c: 280: KeyMaxSub = KeyDown;
  3005  00A0  0863               	movf	CheckOnceResult@KeyDown,w
  3006  00A1  00D3               	movwf	_KeyMaxSub
  3007  00A2  28E0               	goto	l2839
  3008  00A3                     l2815:	
  3009                           ;CheckTouchKey.c: 282: }
  3010                           
  3011                           ;CheckTouchKey.c: 281: KeyHave(cnt,flag);
  3012                           
  3013                           
  3014                           ;CheckTouchKey.c: 283: else
  3015                           ;CheckTouchKey.c: 284: {
  3016                           ;CheckTouchKey.c: 285: KeyCounter++;
  3017  00A3  0AD4               	incf	_KeyCounter,f
  3018  00A4  28E5               	goto	l2841
  3019  00A5                     L3:	
  3020                           ;CheckTouchKey.c: 294: else
  3021                           ;CheckTouchKey.c: 295: {
  3022                           ;CheckTouchKey.c: 298: if(KeyReference[cnt]+1 < KeyValue)
  3023                           
  3024  00A5  0D66               	rlf	CheckOnceResult@cnt,w
  3025  00A6  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  3026  00A7  0084               	movwf	4
  3027  00A8  1383               	bcf	3,7	;select IRP bank0
  3028  00A9  0800               	movf	0,w
  3029  00AA  00F5               	movwf	??_CheckOnceResult
  3030  00AB  0A84               	incf	4,f
  3031  00AC  0800               	movf	0,w
  3032  00AD  00F6               	movwf	??_CheckOnceResult+1
  3033  00AE  0875               	movf	??_CheckOnceResult,w
  3034  00AF  3E01               	addlw	1
  3035  00B0  00F7               	movwf	??_CheckOnceResult+2
  3036  00B1  0876               	movf	??_CheckOnceResult+1,w
  3037  00B2  1803               	skipnc
  3038  00B3  3E01               	addlw	1
  3039  00B4  00F8               	movwf	??_CheckOnceResult+3
  3040  00B5  0861               	movf	CheckOnceResult@KeyValue+1,w
  3041  00B6  0278               	subwf	??_CheckOnceResult+3,w
  3042  00B7  1D03               	skipz
  3043  00B8  28BB               	goto	u1125
  3044  00B9  0860               	movf	CheckOnceResult@KeyValue,w
  3045  00BA  0277               	subwf	??_CheckOnceResult+2,w
  3046  00BB                     u1125:	
  3047  00BB  1C03               	btfss	3,0
  3048  00BC  28E5               	goto	l2841
  3049                           
  3050                           ;CheckTouchKey.c: 302: else if((KeyOldValue2[cnt]+KeyDown<KeyResTemp) || (KeyOldValue1[c
      +                          nt]+KeyDown<KeyResTemp))
  3051  00BD  1003               	clrc
  3052  00BE  0D66               	rlf	CheckOnceResult@cnt,w
  3053  00BF  3E28               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3054  00C0  0084               	movwf	4
  3055  00C1  0800               	movf	0,w
  3056  00C2  20ED               	fcall	PL4	;call to abstracted procedure
  3057  00C3  1C03               	skipc
  3058  00C4  28CD               	goto	l2829
  3059  00C5  1003               	clrc
  3060  00C6  0D66               	rlf	CheckOnceResult@cnt,w
  3061  00C7  3E30               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3062  00C8  0084               	movwf	4
  3063  00C9  0800               	movf	0,w
  3064  00CA  20ED               	fcall	PL4	;call to abstracted procedure
  3065  00CB  1803               	skipnc
  3066  00CC  28D8               	goto	l2833
  3067  00CD                     l2829:	
  3068                           
  3069                           ;CheckTouchKey.c: 303: {
  3070                           ;CheckTouchKey.c: 304: if(++KeyUpShake[cnt] > 8)
  3071  00CD  0866               	movf	CheckOnceResult@cnt,w
  3072  00CE  3E40               	addlw	(low (_KeyUpShake| 0))& (0+255)
  3073  00CF  0084               	movwf	4
  3074  00D0  3009               	movlw	9
  3075  00D1  0A80               	incf	0,f
  3076  00D2  0200               	subwf	0,w
  3077  00D3  1C03               	skipc
  3078  00D4  28DC               	goto	l2837
  3079                           
  3080                           ;CheckTouchKey.c: 305: {
  3081                           ;CheckTouchKey.c: 306: KeyClearOne(cnt);
  3082  00D5  0866               	movf	CheckOnceResult@cnt,w
  3083  00D6  23C6               	fcall	_KeyClearOne
  3084                           
  3085                           ;CheckTouchKey.c: 307: continue;
  3086  00D7  28E5               	goto	l2841
  3087  00D8                     l2833:	
  3088                           
  3089                           ;CheckTouchKey.c: 310: else
  3090                           ;CheckTouchKey.c: 311: {
  3091                           ;CheckTouchKey.c: 312: KeyUpShake[cnt] = 0;
  3092  00D8  0866               	movf	CheckOnceResult@cnt,w
  3093  00D9  3E40               	addlw	(low (_KeyUpShake| 0))& (0+255)
  3094  00DA  0084               	movwf	4
  3095  00DB  0180               	clrf	0
  3096  00DC                     l2837:	
  3097                           
  3098                           ;CheckTouchKey.c: 319: else if(!(KeyData[0] | KeyData[1]))
  3099  00DC  0847               	movf	_KeyData+1,w	;volatile
  3100  00DD  0446               	iorwf	_KeyData,w	;volatile
  3101  00DE  1D03               	btfss	3,2
  3102  00DF  28E5               	goto	l2841
  3103  00E0                     l2839:	
  3104                           
  3105                           ;CheckTouchKey.c: 320: {
  3106                           ;CheckTouchKey.c: 321: KeyHave(cnt,flag);
  3107  00E0  0862               	movf	CheckOnceResult@flag,w
  3108  00E1  00F2               	movwf	KeyHave@flag
  3109  00E2  01F3               	clrf	KeyHave@flag+1
  3110  00E3  0866               	movf	CheckOnceResult@cnt,w
  3111  00E4  2457               	fcall	_KeyHave
  3112  00E5                     l2841:	
  3113  00E5  3004               	movlw	4
  3114  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  3115  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  3116  00E8  0AE6               	incf	CheckOnceResult@cnt,f
  3117  00E9  0266               	subwf	CheckOnceResult@cnt,w
  3118  00EA  1803               	btfsc	3,0
  3119  00EB  0008               	return
  3120  00EC  281E               	goto	l2777
  3121  00ED                     __end_of_CheckOnceResult:	
  3122  00ED                     PL4:	
  3123  00ED  00F5               	movwf	??_CheckOnceResult
  3124  00EE  0A84               	incf	4,f
  3125  00EF  0800               	movf	0,w
  3126  00F0  00F6               	movwf	??_CheckOnceResult+1
  3127  00F1  0863               	movf	CheckOnceResult@KeyDown,w
  3128  00F2  0775               	addwf	??_CheckOnceResult,w
  3129  00F3  00F7               	movwf	??_CheckOnceResult+2
  3130  00F4  0876               	movf	??_CheckOnceResult+1,w
  3131  00F5  1803               	skipnc
  3132  00F6  0A76               	incf	??_CheckOnceResult+1,w
  3133  00F7  00F8               	movwf	??_CheckOnceResult+3
  3134  00F8  0865               	movf	CheckOnceResult@KeyResTemp+1,w
  3135  00F9  0278               	subwf	??_CheckOnceResult+3,w
  3136  00FA  1D03               	skipz
  3137  00FB  0008               	return
  3138  00FC  0864               	movf	CheckOnceResult@KeyResTemp,w
  3139  00FD  0277               	subwf	??_CheckOnceResult+2,w
  3140  00FE  0008               	return
  3141  00FF                     __end_ofPL4:	
  3142  00FF                     PL6:	
  3143  00FF  0084               	movwf	4
  3144  0100  0800               	movf	0,w
  3145  0101  00F5               	movwf	??_CheckOnceResult
  3146  0102  0A84               	incf	4,f
  3147  0103  0800               	movf	0,w
  3148  0104  00F6               	movwf	??_CheckOnceResult+1
  3149  0105  0008               	return
  3150  0106                     __end_ofPL6:	
  3151                           
  3152                           	psect	text26
  3153  0457                     __ptext26:	
  3154 ;; *************** function _KeyHave *****************
  3155 ;; Defined at:
  3156 ;;		line 142 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  cnt             1    wreg     unsigned char 
  3159 ;;  flag            2    2[COMMON] unsigned int 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  cnt             1    4[COMMON] unsigned char 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  1    wreg      void 
  3164 ;; Registers used:
  3165 ;;		wreg, status,2, status,0
  3166 ;; Tracked objects:
  3167 ;;		On entry : B00/0
  3168 ;;		On exit  : B00/0
  3169 ;;		Unchanged: 800/0
  3170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3171 ;;      Params:         2       0       0       0
  3172 ;;      Locals:         1       0       0       0
  3173 ;;      Temps:          0       0       0       0
  3174 ;;      Totals:         3       0       0       0
  3175 ;;Total ram usage:        3 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    1
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_CheckOnceResult
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           
  3186                           ;psect for function _KeyHave
  3187  0457                     _KeyHave:	
  3188                           
  3189                           ;incstack = 0
  3190                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  3191                           ;KeyHave@cnt stored from wreg
  3192  0457  00F4               	movwf	KeyHave@cnt
  3193                           
  3194                           ;CheckTouchKey.c: 144: KeyCounter++;
  3195  0458  0AD4               	incf	_KeyCounter,f
  3196                           
  3197                           ;CheckTouchKey.c: 147: {
  3198                           ;CheckTouchKey.c: 148: KeyData[0] = 0;
  3199  0459  01C6               	clrf	_KeyData	;volatile
  3200                           
  3201                           ;CheckTouchKey.c: 149: KeyData[1] = 0;
  3202  045A  01C7               	clrf	_KeyData+1	;volatile
  3203                           
  3204                           ;CheckTouchKey.c: 150: if(cnt&0x8)
  3205  045B  1DF4               	btfss	KeyHave@cnt,3
  3206  045C  2C60               	goto	l2677
  3207                           
  3208                           ;CheckTouchKey.c: 151: {
  3209                           ;CheckTouchKey.c: 152: KeyData[1] = flag;
  3210  045D  0872               	movf	KeyHave@flag,w
  3211  045E  00C7               	movwf	_KeyData+1	;volatile
  3212                           
  3213                           ;CheckTouchKey.c: 153: }
  3214  045F  0008               	return
  3215  0460                     l2677:	
  3216                           
  3217                           ;CheckTouchKey.c: 154: else
  3218                           ;CheckTouchKey.c: 155: {
  3219                           ;CheckTouchKey.c: 156: KeyData[0] = flag;
  3220  0460  0872               	movf	KeyHave@flag,w
  3221  0461  00C6               	movwf	_KeyData	;volatile
  3222  0462  0008               	return
  3223  0463                     __end_of_KeyHave:	
  3224                           
  3225                           	psect	text27
  3226  03C6                     __ptext27:	
  3227 ;; *************** function _KeyClearOne *****************
  3228 ;; Defined at:
  3229 ;;		line 80 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;  cnt             1    wreg     unsigned char 
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;  cnt             1    2[COMMON] unsigned char 
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      void 
  3236 ;; Registers used:
  3237 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 800/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3243 ;;      Params:         0       0       0       0
  3244 ;;      Locals:         1       0       0       0
  3245 ;;      Temps:          0       0       0       0
  3246 ;;      Totals:         1       0       0       0
  3247 ;;Total ram usage:        1 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:    1
  3250 ;; This function calls:
  3251 ;;		Nothing
  3252 ;; This function is called by:
  3253 ;;		_KeyClearIn
  3254 ;;		_KeyStopClear
  3255 ;;		_CheckOnceResult
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           
  3260                           ;psect for function _KeyClearOne
  3261  03C6                     _KeyClearOne:	
  3262                           
  3263                           ;incstack = 0
  3264                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  3265                           ;KeyClearOne@cnt stored from wreg
  3266  03C6  00F2               	movwf	KeyClearOne@cnt
  3267                           
  3268                           ;CheckTouchKey.c: 82: KeyOldValue0[cnt] = 0;
  3269  03C7  1003               	clrc
  3270  03C8  0D72               	rlf	KeyClearOne@cnt,w
  3271  03C9  3EA0               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3272  03CA  0084               	movwf	4
  3273  03CB  1383               	bcf	3,7	;select IRP bank1
  3274                           
  3275                           ;CheckTouchKey.c: 83: KeyOldValue1[cnt] = 0;
  3276  03CC  23D9               	fcall	PL14	;call to abstracted procedure
  3277  03CD  3E30               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3278  03CE  0084               	movwf	4
  3279                           
  3280                           ;CheckTouchKey.c: 84: KeyOldValue2[cnt] = 0;
  3281  03CF  23D9               	fcall	PL14	;call to abstracted procedure
  3282  03D0  3E28               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3283  03D1  0084               	movwf	4
  3284                           
  3285                           ;CheckTouchKey.c: 85: KeyReference[cnt] = 0;
  3286  03D2  23D9               	fcall	PL14	;call to abstracted procedure
  3287  03D3  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  3288  03D4  0084               	movwf	4
  3289  03D5  0180               	clrf	0
  3290  03D6  0A84               	incf	4,f
  3291  03D7  0180               	clrf	0
  3292  03D8  0008               	return
  3293  03D9                     __end_of_KeyClearOne:	
  3294  03D9                     PL14:	
  3295  03D9  0180               	clrf	0
  3296  03DA  0A84               	incf	4,f
  3297  03DB  0180               	clrf	0
  3298  03DC  1003               	clrc
  3299  03DD  0D72               	rlf	KeyClearOne@cnt,w
  3300  03DE  0008               	return
  3301  03DF                     __end_ofPL14:	
  3302                           
  3303                           	psect	text28
  3304  01A4                     __ptext28:	
  3305 ;; *************** function _CheckKeyOldValue *****************
  3306 ;; Defined at:
  3307 ;;		line 335 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;		None
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;  KeyOldTemp      2    2[BANK0 ] unsigned int 
  3312 ;;  KeyResTemp      2    0[BANK0 ] unsigned int 
  3313 ;;  cnt             1    4[BANK0 ] unsigned char 
  3314 ;; Return value:  Size  Location     Type
  3315 ;;                  1    wreg      void 
  3316 ;; Registers used:
  3317 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 300/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3323 ;;      Params:         0       0       0       0
  3324 ;;      Locals:         0       5       0       0
  3325 ;;      Temps:          2       0       0       0
  3326 ;;      Totals:         2       5       0       0
  3327 ;;Total ram usage:        7 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    3
  3330 ;; This function calls:
  3331 ;;		_KeyIsIn
  3332 ;; This function is called by:
  3333 ;;		_CheckTouchKey
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           
  3338                           ;psect for function _CheckKeyOldValue
  3339  01A4                     _CheckKeyOldValue:	
  3340  01A4  3004               	movlw	4
  3341                           
  3342                           ;CheckTouchKey.c: 337: static unsigned char counter = 0;
  3343                           ;CheckTouchKey.c: 338: unsigned char cnt = 0;
  3344                           
  3345                           ;incstack = 0
  3346                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3347  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  3348  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  3349  01A7  01E2               	clrf	CheckKeyOldValue@cnt
  3350                           
  3351                           ;CheckTouchKey.c: 339: unsigned int KeyResTemp;
  3352                           ;CheckTouchKey.c: 340: unsigned int KeyOldTemp;
  3353                           ;CheckTouchKey.c: 342: if(++counter < 4)
  3354  01A8  0AD2               	incf	CheckKeyOldValue@counter,f
  3355  01A9  0252               	subwf	CheckKeyOldValue@counter,w
  3356  01AA  1C03               	btfss	3,0
  3357  01AB  0008               	return
  3358                           
  3359                           ;CheckTouchKey.c: 344: counter = 0;
  3360  01AC  01D2               	clrf	CheckKeyOldValue@counter
  3361  01AD                     l2851:	
  3362                           
  3363                           ;CheckTouchKey.c: 347: {
  3364                           ;CheckTouchKey.c: 348: KeyResTemp = KeyResSum[cnt];
  3365  01AD  1003               	clrc
  3366  01AE  0D62               	rlf	CheckKeyOldValue@cnt,w
  3367  01AF  3E38               	addlw	(low (_KeyResSum| 0))& (0+255)
  3368  01B0  0084               	movwf	4
  3369  01B1  1383               	bcf	3,7	;select IRP bank0
  3370  01B2  0800               	movf	0,w
  3371  01B3  00DE               	movwf	CheckKeyOldValue@KeyResTemp
  3372  01B4  0A84               	incf	4,f
  3373  01B5  0800               	movf	0,w
  3374  01B6  00DF               	movwf	CheckKeyOldValue@KeyResTemp+1
  3375                           
  3376                           ;CheckTouchKey.c: 349: if(!KeyIsIn(cnt))
  3377  01B7  0862               	movf	CheckKeyOldValue@cnt,w
  3378  01B8  241B               	fcall	_KeyIsIn
  3379  01B9  3A00               	xorlw	0
  3380                           
  3381                           ;CheckTouchKey.c: 350: {
  3382                           ;CheckTouchKey.c: 352: KeyOldTemp = KeyOldValue0[cnt] - KeyResTemp;
  3383  01BA  1003               	clrc
  3384  01BB  1D03               	skipz
  3385  01BC  29ED               	goto	L7
  3386  01BD  0D62               	rlf	CheckKeyOldValue@cnt,w
  3387  01BE  3EA0               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3388  01BF  0084               	movwf	4
  3389  01C0  1383               	bcf	3,7	;select IRP bank1
  3390                           
  3391                           ;CheckTouchKey.c: 353: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3392  01C1  21FE               	fcall	PL2	;call to abstracted procedure
  3393  01C2  1903               	skipnz
  3394  01C3  0260               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3395  01C4  1C03               	skipc
  3396  01C5  29CC               	goto	L4
  3397  01C6  0F60               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3398  01C7  29EC               	goto	l1598
  3399  01C8  0A61               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3400                           
  3401                           ;CheckTouchKey.c: 354: {
  3402                           ;CheckTouchKey.c: 355: KeyOldTemp = KeyOldValue1[cnt] - KeyResTemp;
  3403  01C9  1003               	clrc
  3404  01CA  1D03               	btfss	3,2
  3405  01CB  29ED               	goto	L7
  3406  01CC                     L4:	
  3407  01CC  0D62               	rlf	CheckKeyOldValue@cnt,w
  3408  01CD  3E30               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3409  01CE  0084               	movwf	4
  3410                           
  3411                           ;CheckTouchKey.c: 356: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3412  01CF  21FE               	fcall	PL2	;call to abstracted procedure
  3413  01D0  1903               	skipnz
  3414  01D1  0260               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3415  01D2  1C03               	skipc
  3416  01D3  29DA               	goto	L5
  3417  01D4  0F60               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3418  01D5  29EC               	goto	l1598
  3419  01D6  0A61               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3420                           
  3421                           ;CheckTouchKey.c: 357: {
  3422                           ;CheckTouchKey.c: 358: KeyOldTemp = KeyOldValue2[cnt] - KeyResTemp;
  3423  01D7  1003               	clrc
  3424  01D8  1D03               	btfss	3,2
  3425  01D9  29ED               	goto	L7
  3426  01DA                     L5:	
  3427  01DA  0D62               	rlf	CheckKeyOldValue@cnt,w
  3428  01DB  3E28               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3429  01DC  0084               	movwf	4
  3430                           
  3431                           ;CheckTouchKey.c: 359: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3432  01DD  21FE               	fcall	PL2	;call to abstracted procedure
  3433  01DE  1903               	skipnz
  3434  01DF  0260               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3435  01E0  1C03               	skipc
  3436  01E1  29E8               	goto	L6
  3437  01E2  0F60               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3438  01E3  29EC               	goto	l1598
  3439  01E4  0A61               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3440                           
  3441                           ;CheckTouchKey.c: 360: {
  3442                           ;CheckTouchKey.c: 361: KeyReference[cnt] = KeyResTemp;
  3443  01E5  1003               	clrc
  3444  01E6  1D03               	btfss	3,2
  3445  01E7  29ED               	goto	L7
  3446  01E8                     L6:	
  3447  01E8  0D62               	rlf	CheckKeyOldValue@cnt,w
  3448  01E9  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  3449  01EA  0084               	movwf	4
  3450  01EB  221F               	fcall	PL16	;call to abstracted procedure
  3451  01EC                     l1598:	
  3452                           
  3453                           ;CheckTouchKey.c: 362: }
  3454                           ;CheckTouchKey.c: 363: }
  3455                           ;CheckTouchKey.c: 364: }
  3456                           ;CheckTouchKey.c: 365: }
  3457                           ;CheckTouchKey.c: 368: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  3458  01EC  1003               	clrc
  3459  01ED                     L7:	
  3460  01ED  0D62               	rlf	CheckKeyOldValue@cnt,w
  3461  01EE  3E30               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3462  01EF  0084               	movwf	4
  3463  01F0  1383               	bcf	3,7	;select IRP bank0
  3464  01F1  2217               	fcall	PL12	;call to abstracted procedure
  3465  01F2  3E28               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3466                           
  3467                           ;CheckTouchKey.c: 369: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  3468  01F3  220C               	fcall	PL8	;call to abstracted procedure
  3469  01F4  2217               	fcall	PL12	;call to abstracted procedure
  3470  01F5  3E30               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3471                           
  3472                           ;CheckTouchKey.c: 370: KeyOldValue0[cnt] = KeyResTemp;
  3473  01F6  220C               	fcall	PL8	;call to abstracted procedure
  3474  01F7  221F               	fcall	PL16	;call to abstracted procedure
  3475  01F8  3004               	movlw	4
  3476  01F9  0AE2               	incf	CheckKeyOldValue@cnt,f
  3477  01FA  0262               	subwf	CheckKeyOldValue@cnt,w
  3478  01FB  1803               	btfsc	3,0
  3479  01FC  0008               	return
  3480  01FD  29AD               	goto	l2851
  3481  01FE                     __end_of_CheckKeyOldValue:	
  3482  01FE                     PL2:	
  3483  01FE  0800               	movf	0,w
  3484  01FF  00E0               	movwf	CheckKeyOldValue@KeyOldTemp
  3485  0200  0A84               	incf	4,f
  3486  0201  0800               	movf	0,w
  3487  0202  00E1               	movwf	CheckKeyOldValue@KeyOldTemp+1
  3488  0203  085E               	movf	CheckKeyOldValue@KeyResTemp,w
  3489  0204  02E0               	subwf	CheckKeyOldValue@KeyOldTemp,f
  3490  0205  085F               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3491  0206  1C03               	skipc
  3492  0207  03E1               	decf	CheckKeyOldValue@KeyOldTemp+1,f
  3493  0208  02E1               	subwf	CheckKeyOldValue@KeyOldTemp+1,f
  3494  0209  3000               	movlw	0
  3495  020A  0261               	subwf	CheckKeyOldValue@KeyOldTemp+1,w
  3496  020B  3402               	retlw	2
  3497  020C                     __end_ofPL2:	
  3498  020C                     PL8:	
  3499  020C  0084               	movwf	4
  3500  020D  0874               	movf	??_CheckKeyOldValue,w
  3501  020E  0080               	movwf	0
  3502  020F  0A84               	incf	4,f
  3503  0210  0875               	movf	??_CheckKeyOldValue+1,w
  3504  0211  0080               	movwf	0
  3505  0212  1003               	clrc
  3506  0213  0D62               	rlf	CheckKeyOldValue@cnt,w
  3507  0214  3EA0               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3508  0215  0084               	movwf	4
  3509  0216  0008               	return
  3510  0217                     __end_ofPL8:	
  3511  0217                     PL12:	
  3512  0217  0800               	movf	0,w
  3513  0218  00F4               	movwf	??_CheckKeyOldValue
  3514  0219  0A84               	incf	4,f
  3515  021A  0800               	movf	0,w
  3516  021B  00F5               	movwf	??_CheckKeyOldValue+1
  3517  021C  1003               	clrc
  3518  021D  0D62               	rlf	CheckKeyOldValue@cnt,w
  3519  021E  0008               	return
  3520  021F                     __end_ofPL12:	
  3521  021F                     PL16:	
  3522  021F  085E               	movf	CheckKeyOldValue@KeyResTemp,w
  3523  0220  0080               	movwf	0
  3524  0221  0A84               	incf	4,f
  3525  0222  085F               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3526  0223  0080               	movwf	0
  3527  0224  0008               	return
  3528  0225                     __end_ofPL16:	
  3529                           
  3530                           	psect	text29
  3531  041B                     __ptext29:	
  3532 ;; *************** function _KeyIsIn *****************
  3533 ;; Defined at:
  3534 ;;		line 58 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  cnt             1    wreg     unsigned char 
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;  cnt             1    3[COMMON] unsigned char 
  3539 ;;  i               1    2[COMMON] unsigned char 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      unsigned char 
  3542 ;; Registers used:
  3543 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 300/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3549 ;;      Params:         0       0       0       0
  3550 ;;      Locals:         2       0       0       0
  3551 ;;      Temps:          0       0       0       0
  3552 ;;      Totals:         2       0       0       0
  3553 ;;Total ram usage:        2 bytes
  3554 ;; Hardware stack levels used:    2
  3555 ;; Hardware stack levels required when called:    1
  3556 ;; This function calls:
  3557 ;;		Nothing
  3558 ;; This function is called by:
  3559 ;;		_KeyClearIn
  3560 ;;		_CheckOnceResult
  3561 ;;		_CheckKeyOldValue
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           
  3566                           ;psect for function _KeyIsIn
  3567  041B                     _KeyIsIn:	
  3568                           
  3569                           ;incstack = 0
  3570                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  3571                           ;KeyIsIn@cnt stored from wreg
  3572  041B  00F3               	movwf	KeyIsIn@cnt
  3573                           
  3574                           ;CheckTouchKey.c: 60: unsigned char i = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  3575  041C  3907               	andlw	7
  3576  041D  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  3577  041E  0084               	movwf	4
  3578  041F  2393               	fcall	stringdir
  3579  0420  00F2               	movwf	KeyIsIn@i
  3580                           
  3581                           ;CheckTouchKey.c: 62: if(cnt&0x8)
  3582  0421  1DF3               	btfss	KeyIsIn@cnt,3
  3583  0422  2C27               	goto	l2639
  3584                           
  3585                           ;CheckTouchKey.c: 63: {
  3586                           ;CheckTouchKey.c: 64: i &= KeyFlag[1];
  3587  0423  1283               	bcf	3,5	;RP0=0, select bank0
  3588  0424  1303               	bcf	3,6	;RP1=0, select bank0
  3589  0425  084F               	movf	_KeyFlag+1,w	;volatile
  3590  0426  2C2A               	goto	L8
  3591  0427                     l2639:	
  3592                           ;CheckTouchKey.c: 65: }
  3593                           
  3594                           
  3595                           ;CheckTouchKey.c: 66: else
  3596                           ;CheckTouchKey.c: 67: {
  3597                           ;CheckTouchKey.c: 68: i &= KeyFlag[0];
  3598  0427  1283               	bcf	3,5	;RP0=0, select bank0
  3599  0428  1303               	bcf	3,6	;RP1=0, select bank0
  3600  0429  084E               	movf	_KeyFlag,w	;volatile
  3601  042A                     L8:	
  3602  042A  05F2               	andwf	KeyIsIn@i,f
  3603                           
  3604                           ;CheckTouchKey.c: 69: }
  3605                           ;CheckTouchKey.c: 70: return i;
  3606  042B  0872               	movf	KeyIsIn@i,w
  3607  042C  0008               	return
  3608  042D                     __end_of_KeyIsIn:	
  3609                           
  3610                           	psect	text30
  3611  0354                     __ptext30:	
  3612 ;; *************** function _ADC_AVG *****************
  3613 ;; Defined at:
  3614 ;;		line 249 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\main.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;  adch            1    wreg     unsigned char 
  3617 ;;  adtime          1    0[BANK0 ] unsigned char 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  adch            1    3[BANK0 ] unsigned char 
  3620 ;;  i               1    6[BANK0 ] unsigned char 
  3621 ;;  adsum           2    4[BANK0 ] unsigned int 
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  2    0[BANK0 ] unsigned int 
  3624 ;; Registers used:
  3625 ;;		wreg, status,2, status,0, pclath, cstack
  3626 ;; Tracked objects:
  3627 ;;		On entry : 300/0
  3628 ;;		On exit  : 300/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3631 ;;      Params:         0       3       0       0
  3632 ;;      Locals:         0       4       0       0
  3633 ;;      Temps:          0       0       0       0
  3634 ;;      Totals:         0       7       0       0
  3635 ;;Total ram usage:        7 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; Hardware stack levels required when called:    2
  3638 ;; This function calls:
  3639 ;;		_ADC_Sample
  3640 ;;		___lwdiv
  3641 ;; This function is called by:
  3642 ;;		_main
  3643 ;; This function uses a non-reentrant model
  3644 ;;
  3645                           
  3646                           
  3647                           ;psect for function _ADC_AVG
  3648  0354                     _ADC_AVG:	
  3649                           
  3650                           ;incstack = 0
  3651                           ; Regs used in _ADC_AVG: [wreg+status,2+status,0+pclath+cstack]
  3652                           ;ADC_AVG@adch stored from wreg
  3653  0354  00E1               	movwf	ADC_AVG@adch
  3654                           
  3655                           ;main.c: 251: unsigned int adsum = 0;
  3656  0355  01E2               	clrf	ADC_AVG@adsum
  3657  0356  01E3               	clrf	ADC_AVG@adsum+1
  3658                           
  3659                           ;main.c: 252: for(char i = 0; i< adtime;i++)
  3660  0357  01E4               	clrf	ADC_AVG@i
  3661  0358                     l3243:	
  3662  0358  085E               	movf	ADC_AVG@adtime,w
  3663  0359  0264               	subwf	ADC_AVG@i,w
  3664  035A  1803               	btfsc	3,0
  3665  035B  2B67               	goto	l3245
  3666                           
  3667                           ;main.c: 253: {
  3668                           ;main.c: 254: adsum+=ADC_Sample(adch);
  3669  035C  0861               	movf	ADC_AVG@adch,w
  3670  035D  2276               	fcall	_ADC_Sample
  3671  035E  0872               	movf	?_ADC_Sample,w
  3672  035F  1283               	bcf	3,5	;RP0=0, select bank0
  3673  0360  07E2               	addwf	ADC_AVG@adsum,f
  3674  0361  1803               	skipnc
  3675  0362  0AE3               	incf	ADC_AVG@adsum+1,f
  3676  0363  0873               	movf	?_ADC_Sample+1,w
  3677  0364  07E3               	addwf	ADC_AVG@adsum+1,f
  3678  0365  0AE4               	incf	ADC_AVG@i,f
  3679  0366  2B58               	goto	l3243
  3680  0367                     l3245:	
  3681                           
  3682                           ;main.c: 255: }
  3683                           ;main.c: 256: return adsum/adtime;
  3684  0367  085E               	movf	ADC_AVG@adtime,w
  3685  0368  00F2               	movwf	___lwdiv@divisor
  3686  0369  01F3               	clrf	___lwdiv@divisor+1
  3687  036A  0863               	movf	ADC_AVG@adsum+1,w
  3688  036B  00F5               	movwf	___lwdiv@dividend+1
  3689  036C  0862               	movf	ADC_AVG@adsum,w
  3690  036D  00F4               	movwf	___lwdiv@dividend
  3691  036E  2304               	fcall	___lwdiv
  3692  036F  0873               	movf	?___lwdiv+1,w
  3693  0370  00DF               	movwf	?_ADC_AVG+1
  3694  0371  0872               	movf	?___lwdiv,w
  3695  0372  00DE               	movwf	?_ADC_AVG
  3696  0373  0008               	return
  3697  0374                     __end_of_ADC_AVG:	
  3698                           
  3699                           	psect	text31
  3700  0304                     __ptext31:	
  3701 ;; *************** function ___lwdiv *****************
  3702 ;; Defined at:
  3703 ;;		line 6 in file "C:\¹¤¾ß\µ¥Æ¬»úÑ§Ï°×ÊÁÏ\SC8P\SCMCU_IDE_V2.00.07\data\sources\common\lwdiv.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;  divisor         2    2[COMMON] unsigned int 
  3706 ;;  dividend        2    4[COMMON] unsigned int 
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;  quotient        2    6[COMMON] unsigned int 
  3709 ;;  counter         1    8[COMMON] unsigned char 
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  2    2[COMMON] unsigned int 
  3712 ;; Registers used:
  3713 ;;		wreg, status,2, status,0
  3714 ;; Tracked objects:
  3715 ;;		On entry : 300/0
  3716 ;;		On exit  : 300/0
  3717 ;;		Unchanged: 300/0
  3718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3719 ;;      Params:         4       0       0       0
  3720 ;;      Locals:         3       0       0       0
  3721 ;;      Temps:          0       0       0       0
  3722 ;;      Totals:         7       0       0       0
  3723 ;;Total ram usage:        7 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    1
  3726 ;; This function calls:
  3727 ;;		Nothing
  3728 ;; This function is called by:
  3729 ;;		_main
  3730 ;;		_ADC_AVG
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           
  3735                           ;psect for function ___lwdiv
  3736  0304                     ___lwdiv:	
  3737                           
  3738                           ;incstack = 0
  3739                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3740  0304  01F6               	clrf	___lwdiv@quotient
  3741  0305  01F7               	clrf	___lwdiv@quotient+1
  3742  0306  0872               	movf	___lwdiv@divisor,w
  3743  0307  0473               	iorwf	___lwdiv@divisor+1,w
  3744  0308  1903               	btfsc	3,2
  3745  0309  2B29               	goto	l2949
  3746  030A  01F8               	clrf	___lwdiv@counter
  3747  030B                     L9:	
  3748  030B  0AF8               	incf	___lwdiv@counter,f
  3749  030C  1BF3               	btfsc	___lwdiv@divisor+1,7
  3750  030D  2B12               	goto	l2937
  3751  030E  1003               	clrc
  3752  030F  0DF2               	rlf	___lwdiv@divisor,f
  3753  0310  0DF3               	rlf	___lwdiv@divisor+1,f
  3754  0311  2B0B               	goto	L9
  3755  0312                     l2937:	
  3756  0312  1003               	clrc
  3757  0313  0DF6               	rlf	___lwdiv@quotient,f
  3758  0314  0DF7               	rlf	___lwdiv@quotient+1,f
  3759  0315  0873               	movf	___lwdiv@divisor+1,w
  3760  0316  0275               	subwf	___lwdiv@dividend+1,w
  3761  0317  1D03               	skipz
  3762  0318  2B1B               	goto	u1375
  3763  0319  0872               	movf	___lwdiv@divisor,w
  3764  031A  0274               	subwf	___lwdiv@dividend,w
  3765  031B                     u1375:	
  3766  031B  1C03               	skipc
  3767  031C  2B25               	goto	L10
  3768  031D  0872               	movf	___lwdiv@divisor,w
  3769  031E  02F4               	subwf	___lwdiv@dividend,f
  3770  031F  0873               	movf	___lwdiv@divisor+1,w
  3771  0320  1C03               	skipc
  3772  0321  03F5               	decf	___lwdiv@dividend+1,f
  3773  0322  02F5               	subwf	___lwdiv@dividend+1,f
  3774  0323  1476               	bsf	___lwdiv@quotient,0
  3775  0324  1003               	clrc
  3776  0325                     L10:	
  3777  0325  0CF3               	rrf	___lwdiv@divisor+1,f
  3778  0326  0CF2               	rrf	___lwdiv@divisor,f
  3779  0327  0BF8               	decfsz	___lwdiv@counter,f
  3780  0328  2B12               	goto	l2937
  3781  0329                     l2949:	
  3782  0329  0877               	movf	___lwdiv@quotient+1,w
  3783  032A  00F3               	movwf	?___lwdiv+1
  3784  032B  0876               	movf	___lwdiv@quotient,w
  3785  032C  00F2               	movwf	?___lwdiv
  3786  032D  0008               	return
  3787  032E                     __end_of___lwdiv:	
  3788                           
  3789                           	psect	text32
  3790  0276                     __ptext32:	
  3791 ;; *************** function _ADC_Sample *****************
  3792 ;; Defined at:
  3793 ;;		line 12 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\adc.c"
  3794 ;; Parameters:    Size  Location     Type
  3795 ;;  adch            1    wreg     unsigned char 
  3796 ;; Auto vars:     Size  Location     Type
  3797 ;;  adch            1    5[COMMON] unsigned char 
  3798 ;;  ad_temp         2    7[COMMON] volatile unsigned int 
  3799 ;;  admax           2    0        unsigned int 
  3800 ;;  admin           2    0        unsigned int 
  3801 ;;  adsum           2    0        unsigned int 
  3802 ;;  i               1    6[COMMON] unsigned char 
  3803 ;;  adtimes         1    0        unsigned char 
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  2    2[COMMON] unsigned int 
  3806 ;; Registers used:
  3807 ;;		wreg, status,2, status,0
  3808 ;; Tracked objects:
  3809 ;;		On entry : 300/0
  3810 ;;		On exit  : 300/100
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3813 ;;      Params:         2       0       0       0
  3814 ;;      Locals:         4       0       0       0
  3815 ;;      Temps:          1       0       0       0
  3816 ;;      Totals:         7       0       0       0
  3817 ;;Total ram usage:        7 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; Hardware stack levels required when called:    1
  3820 ;; This function calls:
  3821 ;;		Nothing
  3822 ;; This function is called by:
  3823 ;;		_ADC_AVG
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           
  3828                           ;psect for function _ADC_Sample
  3829  0276                     _ADC_Sample:	
  3830                           
  3831                           ;incstack = 0
  3832                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3833                           ;ADC_Sample@adch stored from wreg
  3834  0276  00F5               	movwf	ADC_Sample@adch
  3835                           
  3836                           ;adc.c: 17: volatile unsigned int ad_temp;
  3837                           ;adc.c: 18: ADCON1 = 0;
  3838  0277  1683               	bsf	3,5	;RP0=1, select bank1
  3839  0278  019C               	clrf	28	;volatile
  3840                           
  3841                           ;adc.c: 19: ADCON0 = 0X41 | (adch << 2);
  3842  0279  0875               	movf	ADC_Sample@adch,w
  3843  027A  00F4               	movwf	??_ADC_Sample
  3844  027B  3001               	movlw	1
  3845  027C  1003               	clrc
  3846  027D                     L11:	
  3847  027D  0DF4               	rlf	??_ADC_Sample,f
  3848  027E  3EFF               	addlw	-1
  3849  027F  1003               	clrc
  3850  0280  1D03               	skipz
  3851  0281  2A7D               	goto	L11
  3852  0282  0D74               	rlf	??_ADC_Sample,w
  3853  0283  3841               	iorlw	65
  3854  0284  009D               	movwf	29	;volatile
  3855  0285  0000               	nop	;# 
  3856  0286  0000               	nop	;# 
  3857                           
  3858                           ;adc.c: 22: GODONE = 1;
  3859  0287  1683               	bsf	3,5	;RP0=1, select bank1
  3860  0288  1303               	bcf	3,6	;RP1=0, select bank1
  3861  0289  149D               	bsf	29,1	;volatile
  3862                           
  3863                           ;adc.c: 24: unsigned char i = 0;
  3864  028A  01F6               	clrf	ADC_Sample@i
  3865  028B                     l1443:	
  3866                           ;adc.c: 25: while(GODONE)
  3867                           
  3868  028B  1C9D               	btfss	29,1	;volatile
  3869  028C  2A90               	goto	l2735
  3870                           
  3871                           ;adc.c: 26: {
  3872                           ;adc.c: 27: if(0 == (--i))
  3873  028D  0BF6               	decfsz	ADC_Sample@i,f
  3874  028E  2A8B               	goto	l1443
  3875  028F  0008               	return
  3876  0290                     l2735:	
  3877                           
  3878                           ;adc.c: 29: }
  3879                           ;adc.c: 31: ad_temp=(ADRESH<<4)+(ADRESL>>4);
  3880  0290  081F               	movf	31,w	;volatile
  3881  0291  00F7               	movwf	ADC_Sample@ad_temp	;volatile
  3882  0292  01F8               	clrf	ADC_Sample@ad_temp+1	;volatile
  3883  0293  0EF7               	swapf	ADC_Sample@ad_temp,f	;volatile
  3884  0294  0EF8               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3885  0295  30F0               	movlw	240
  3886  0296  05F8               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3887  0297  0877               	movf	ADC_Sample@ad_temp,w	;volatile
  3888  0298  390F               	andlw	15
  3889  0299  04F8               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3890  029A  30F0               	movlw	240
  3891  029B  05F7               	andwf	ADC_Sample@ad_temp,f	;volatile
  3892  029C  0E1E               	swapf	30,w	;volatile
  3893  029D  390F               	andlw	15
  3894  029E  07F7               	addwf	ADC_Sample@ad_temp,f	;volatile
  3895  029F  1803               	skipnc
  3896  02A0  0AF8               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3897                           
  3898                           ;adc.c: 32: return ad_temp;
  3899  02A1  0878               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3900  02A2  00F3               	movwf	?_ADC_Sample+1
  3901  02A3  0877               	movf	ADC_Sample@ad_temp,w	;volatile
  3902  02A4  00F2               	movwf	?_ADC_Sample
  3903  02A5  0008               	return
  3904  02A6                     __end_of_ADC_Sample:	
  3905                           
  3906                           	psect	text33
  3907  03F4                     __ptext33:	
  3908 ;; *************** function _Isr_Timer *****************
  3909 ;; Defined at:
  3910 ;;		line 181 in file "C:\mcuproject\scm\Ì¨µÆÎí»¯Æ÷\main.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;		None
  3913 ;; Auto vars:     Size  Location     Type
  3914 ;;		None
  3915 ;; Return value:  Size  Location     Type
  3916 ;;                  1    wreg      void 
  3917 ;; Registers used:
  3918 ;;		wreg, status,2, status,0
  3919 ;; Tracked objects:
  3920 ;;		On entry : 0/0
  3921 ;;		On exit  : 300/0
  3922 ;;		Unchanged: 0/0
  3923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3924 ;;      Params:         0       0       0       0
  3925 ;;      Locals:         0       0       0       0
  3926 ;;      Temps:          2       0       0       0
  3927 ;;      Totals:         2       0       0       0
  3928 ;;Total ram usage:        2 bytes
  3929 ;; Hardware stack levels used:    1
  3930 ;; This function calls:
  3931 ;;		Nothing
  3932 ;; This function is called by:
  3933 ;;		Interrupt level 1
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           
  3938                           ;psect for function _Isr_Timer
  3939  03F4                     _Isr_Timer:	
  3940                           
  3941                           ;main.c: 183: if(TMR2IF)
  3942  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  3943  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  3944  03F6  1C8C               	btfss	12,1	;volatile
  3945  03F7  2C01               	goto	i1l3179
  3946                           
  3947                           ;main.c: 184: {
  3948                           ;main.c: 185: TMR2IF = 0;
  3949  03F8  108C               	bcf	12,1	;volatile
  3950                           
  3951                           ;main.c: 187: if(++MainTime >= 16)
  3952  03F9  3010               	movlw	16
  3953  03FA  0ADD               	incf	_MainTime,f	;volatile
  3954  03FB  025D               	subwf	_MainTime,w	;volatile
  3955  03FC  1C03               	skipc
  3956  03FD  2C02               	goto	i1l571
  3957                           
  3958                           ;main.c: 188: {
  3959                           ;main.c: 189: MainTime = 0;
  3960  03FE  01DD               	clrf	_MainTime	;volatile
  3961                           
  3962                           ;main.c: 190: B_MainLoop = 1;
  3963  03FF  1679               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  3964  0400  2C02               	goto	i1l571
  3965  0401                     i1l3179:	
  3966                           
  3967                           ;main.c: 194: else
  3968                           ;main.c: 195: {
  3969                           ;main.c: 196: PIR1 = 0;
  3970  0401  018C               	clrf	12	;volatile
  3971  0402                     i1l571:	
  3972  0402  0871               	movf	??_Isr_Timer+1,w
  3973  0403  008A               	movwf	10
  3974  0404  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3975  0405  0083               	movwf	3
  3976  0406  0EFE               	swapf	126,f
  3977  0407  0E7E               	swapf	126,w
  3978  0408  0009               	retfie
  3979  0409                     __end_of_Isr_Timer:	
  3980  007E                     btemp	set	126	;btemp
  3981  007E                     wtemp0	set	126
  3982                           
  3983                           	psect	intentry
  3984  0004                     __pintentry:	
  3985                           ;incstack = 0
  3986                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  3987                           
  3988  0004                     interrupt_function:	
  3989  007E                     saved_w	set	btemp
  3990  0004  00FE               	movwf	btemp
  3991  0005  0E03               	swapf	3,w
  3992  0006  00F0               	movwf	??_Isr_Timer
  3993  0007  080A               	movf	10,w
  3994  0008  00F1               	movwf	??_Isr_Timer+1
  3995  0009  2BF4               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    20
    Data        0
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     11      73
    BANK1            80      0       8
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___lwdiv
    _CheckTouchKey->_CheckOnceResult
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn
    _ADC_AVG->_ADC_Sample
    _ADC_AVG->___lwdiv

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    3972
                                              9 BANK0      2     2      0
                            _ADC_AVG
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                         _Sleep_Mode
                            ___lwdiv
                             _fanOff
                            _initPWM
                             _ledOff
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            2     2      0      45
                                              2 COMMON     2     2      0
                               _fan1
                               _fan2
                               _fan3
                             _fanOff
                            _hunheOn
                             _ledOff
                             _light1
                             _light2
                             _light3
                             _light4
                               _whOn
                            _whiteOn
                           _yellowOn
 ---------------------------------------------------------------------------------
 (2) _yellowOn                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _whiteOn                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _whOn                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _light4                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _light3                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _light2                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _light1                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledOff                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _hunheOn                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fanOff                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _fan3                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _fan2                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _fan1                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    2713
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _GetTouchKeyValue                                     2     2      0     157
                                              3 COMMON     2     2      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (3) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1503
                                              5 COMMON     4     4      0
                                              0 BANK0      9     9      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (4) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_AVG                                              7     4      3     741
                                              0 BANK0      7     4      3
                         _ADC_Sample
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     374
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          14    12      2      70
                                              2 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_AVG
     _ADC_Sample
     ___lwdiv
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
     _fan1
     _fan2
     _fan3
     _fanOff
     _hunheOn
     _ledOff
     _light1
     _light2
     _light3
     _light4
     _whOn
     _whiteOn
     _yellowOn
   _Sleep_Mode
   ___lwdiv
   _fanOff
   _initPWM
   _ledOff

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      B      49       3       91.3%
ABS                  0      0      5C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       8       7       10.0%
BITBANK2            50      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
DATA                 0      0      5C      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Feb 21 17:25:13 2021

                KeyIsIn@cnt 0073                  KeyHave@cnt 0074                 KeyHave@flag 0072  
                         pc 0002                          PL2 01FE                          PL4 00ED  
                        PL6 00FF                          PL8 020C               ??_KeyClearOne 0072  
     __size_of_TurnKeyFlags 002F                          fsr 0004            ??_CheckValidTime 0072  
                       PL10 046D                         PL12 0217                         PL14 03D9  
                       PL16 021F                         PL18 048D                         l576 0229  
                       _GIE 005F                         _PR2 0091         __size_of_ADC_Sample 0030  
           __end_of_ADC_AVG 0374                         fsr0 0004                         indf 0000  
       CheckOnceResult@flag 0062           ?_GetTouchKeyValue 0070    __end_of_Table_KeyChannel 03AD  
                KeyServer@i 0072          ??_GetTouchKeyValue 0073                        l3003 0123  
                      l3023 0140                        l3015 0136                        l3121 0347  
                      l3025 0142                        l3009 012C                        l1443 028B  
                      l3131 034F                        l3043 015A                        l3035 0150  
                      l3063 0172                        l3071 017D                        l3039 0154  
                      l3047 015F                        l1616 02C1                        l3129 034B  
                      l3137 0353                        l3081 018C                        l3243 0358  
                      l1635 033A                        l3067 0178                        l3059 016E  
                      l1556 02D6                        l3245 0367                        l1557 02E6  
                      l3085 0192                        l3077 0188                        l3093 019D  
                      l3089 0198                        l3281 024E                        l2661 042D  
                      l2653 043D                        l1598 01EC                        l2735 0290  
                      l2639 0427                        l2815 00A3                        l2663 042E  
                      l2647 043C                        l2833 00D8                        l2809 009B  
                      l2841 00E5                        l2657 0444                        l3289 0260  
                      l2851 01AD                        l2923 0418                        l2771 02EE  
                      l2677 0460                        l2837 00DC                        l2829 00CD  
                      l2917 0409                        l2749 03E4                        l2909 02C8  
                      l2839 00E0                        l2937 0312                        l2777 001E  
                      l2795 006E                        l2949 0329                        l2997 011A  
                      u1125 00BB                        u1055 0029                        u1075 0060  
                      _IOCB 0009                        u1085 0074                        u1095 007F  
                      u1375 031B                        _PIE1 000D                        _RBIE 005B  
                      _PIR1 000C                        _WPDB 0087                        _WPUA 0007  
                      _WPUB 0008                        _fan1 04A4                        _fan2 046B  
                      _fan3 04A2                        _main 0225                        _whOn 0496  
                      btemp 007E               ?_KeyStopClear 0070                        start 000A  
              _TurnKeyFlags 02A6             __end_of_KeyIsIn 042D             __end_of_KeyHave 0463  
CheckKeyOldValue@KeyOldTemp 0060               ??_Init_System 0072  CheckKeyOldValue@KeyResTemp 005E  
                     ?_fan1 0070                       ?_fan2 0070                       ?_fan3 0070  
                     ?_main 0070                       ?_whOn 0070                       _T2CON 0012  
           __end_of___lwdiv 032E                       i1l571 0402                       _PORTA 0005  
                     _PORTB 0006                       _TRISA 0085                       _TRISB 0086  
                     _PWMTH 0016                       _PWMTL 0015         __end_of_KeyClearOne 03D9  
           __end_of_initPWM 0457                  _KeyClearIn 043C             __end_of_hunheOn 047A  
            __pbitbssCOMMON 03C8                       pclath 000A                 _ClearResSum 042D  
                _KeyCounter 0054                  _KeyOldData 0048             __end_of_whiteOn 0486  
            ??_KeyStopClear 0073                       status 0003                       wtemp0 007E  
                _KeyUpShake 0040             __initialization 000B                __end_of_fan1 04A6  
              __end_of_fan2 046D                __end_of_fan3 04A4                __end_of_main 0276  
              __end_of_whOn 049A                   ??_ADC_AVG 0079                      ??_fan1 0072  
                    ??_fan2 0072                      ??_fan3 0072                      ??_main 0079  
                    ??_whOn 0072         __end_of_Init_System 0393                      _ADCON0 009D  
                    _ADCON1 009C                      _ADRESH 009F                      _ADRESL 009E  
                    _GODONE 04E9                      i1l3179 0401                      _INTCON 000B  
        __size_of_KeyServer 009E                      _OSCCON 0088                      _TMR2IF 0061  
                    _PWMD0L 0017                      _PWMD1L 0018                      _PWMD4L 001B  
              ??_ADC_Sample 0074                   ??_KeyIsIn 0072                   ??_KeyHave 0074  
        __size_of_Isr_Timer 0015                  _Sleep_Mode 03AD   CheckOnceResult@KeyResTemp 0064  
    CheckOnceResult@KeyDown 0063   __size_of_CheckKeyOldValue 005A                      _b_kclr 03C9  
                    _b_kerr 03C8                      _fanOff 0486                      _ledOff 0491  
                 ??___lwdiv 0076                      _irStep 005B                      _keyNub 004A  
                    _light1 048C                      _light2 049E                      _light3 04A6  
                    _light4 049A                 _KeyClearOne 03C6                   ??_initPWM 0072  
             _Table_KeyFalg 0399               _Table_KeyDown 03A1          __end_of_ADC_Sample 02A6  
                 ??_hunheOn 0072                      saved_w 007E      __size_of_CheckTouchKey 0026  
                 ??_whiteOn 0072            __end_of_yellowOn 0480                 ?_KeyClearIn 0070  
           _CheckOnceResult 0018     __end_of__initialization 0016                ADC_AVG@adsum 0062  
            __pcstackCOMMON 0070                 _Init_System 0374                  __end_ofPL2 020C  
                __end_ofPL4 00FF                  __end_ofPL6 0106                  __end_ofPL8 0217  
         __end_of_KeyServer 01A4        __end_of_KeyStopClear 03F4           __end_of_Isr_Timer 0409  
                __pbssBANK0 0020                  __pbssBANK1 00A0   __size_of_GetTouchKeyValue 002F  
               ?_Sleep_Mode 0070               _CheckTouchKey 032E                  __pmaintext 0225  
                   ?_fanOff 0070                  __pintentry 0004                     ?_ledOff 0070  
       __size_of_KeyClearIn 000E                     ?_light1 0070                     ?_light2 0070  
                   ?_light3 0070                     ?_light4 0070                     _ADC_AVG 0354  
   __end_of_CheckOnceResult 00ED                     _KEYCON0 0092                     _KEYCON1 0093  
             KeyStopClear@i 0073                     _PWMD01H 001C                     _PWMD23H 000E  
                   _PWMCON0 0013                     _PWMCON1 0014                     _PWMCON2 001D  
      __end_of_Table_KeyCap 03A9                  __stringtab 0393                ?_ClearResSum 0070  
                   _KeyData 0046                     _KeyFlag 004E                     _KeyIsIn 041B  
                   _KeyHave 0457              ClearResSum@cnt 0072              ?_CheckTouchKey 0070  
   CheckOnceResult@KeyValue 0060            _CheckKeyOldValue 01A4     CheckOnceResult@OldValue 005E  
           __size_of_fanOff 0006      TurnKeyFlags@KeyNoTimes 0050                     ___lwdiv 0304  
      GetTouchKeyValue@temp 0073             __size_of_ledOff 0005                   ?_yellowOn 0070  
                   _b_kover 03CB             __size_of_light1 0001             __size_of_light2 0004  
           __size_of_light3 0001             __size_of_light4 0004                     _fanStep 007A  
                   __ptext1 044A                     __ptext2 03AD                     __ptext3 0106  
                   __ptext4 047A                     __ptext5 0480                     __ptext6 0496  
                   __ptext7 049A                     __ptext8 04A6                     __ptext9 049E  
                   _ledStep 0056                     _initPWM 044A                     _hunheOn 0473  
       __size_of_Sleep_Mode 0019                     _pwmTime 005C                     _whiteOn 0480  
   __size_of_CheckValidTime 0012                     clrloop0 0464                     main@res 0067  
      end_of_initialization 0016                _KeyOldValue0 00A0                _KeyOldValue1 0030  
              _KeyOldValue2 0028       __size_of_KeyStopClear 0015                  ??_yellowOn 0072  
              ?_KeyClearOne 0070                _KeyReference 0020            ?_CheckOnceResult 0070  
              ??_KeyClearIn 0074          CheckOnceResult@cnt 0066             ??_CheckTouchKey 0079  
             ADC_AVG@adtime 005E                _KeyStopClear 03DF            _GetTouchKeyValue 02D5  
              ?_Init_System 0070              __end_of_fanOff 048C          __end_of_KeyClearIn 044A  
            __end_of_ledOff 0496              __end_of_light1 048D              __end_of_light2 04A2  
            __end_of_light3 04A7              __end_of_light4 049E                   _KeyMaxSub 0053  
                 _KeyResSum 0038                 __end_ofPL10 0473                 __end_ofPL12 021F  
               __end_ofPL14 03DF                 __end_ofPL16 0225                 __end_ofPL18 0491  
       start_initialization 000B                   _KeyServer 0106                   _Isr_Timer 03F4  
                  ADC_AVG@i 0064        __size_of_ClearResSum 000F               ?_TurnKeyFlags 0070  
              ??_Sleep_Mode 0072                    ??_fanOff 0072                    ??_ledOff 0072  
         ADC_Sample@ad_temp 0077    TurnKeyFlags@KeyHaveTimes 0051                    ??_light1 0072  
                  ??_light2 0072                    ??_light3 0072                    ??_light4 0072  
              _Table_KeyCap 03A5                    ?_ADC_AVG 005E                 __pbssCOMMON 007A  
               ADC_AVG@adch 0061                  ?_KeyServer 0070                   ___latbits 0000  
             __pcstackBANK0 005E              _CheckValidTime 0409          __end_of_Sleep_Mode 03C6  
  __end_of_CheckKeyOldValue 01FE                  ?_Isr_Timer 0070                    ?_KeyIsIn 0070  
                  ?_KeyHave 0072              ??_TurnKeyFlags 0075            ___lwdiv@dividend 0074  
                  ?___lwdiv 0072                   __pstrings 0393           __size_of_yellowOn 0006  
      __size_of_KeyClearOne 0013                    ?_initPWM 0070                   _keyCount0 005A  
                 _keyCount1 0059                   _keyCount2 0058                   _keyCount3 0057  
    __end_of_CheckValidTime 041B                    ?_hunheOn 0070              ADC_Sample@adch 0075  
                 _lightStep 0055                    ?_whiteOn 0070            ___lwdiv@quotient 0076  
       GetTouchKeyValue@cnt 0074                 ADC_Sample@i 0076                    _KEYDATAH 0095  
                  _KEYDATAL 0094           interrupt_function 0004                   clear_ram0 0463  
                 _penwuFlag 03CD         CheckKeyOldValue@cnt 0062                    KeyIsIn@i 0072  
          __size_of_ADC_AVG 0020                 __stringbase 0398        __size_of_Init_System 001F  
     __end_of_Table_KeyFalg 03A1       __end_of_Table_KeyDown 03A5    __end_of_GetTouchKeyValue 0304  
           ?_CheckValidTime 0070                 ??_KeyServer 0072                 ??_Isr_Timer 0070  
                  _MainTime 005D                  _ADC_Sample 0276            __size_of_KeyIsIn 0012  
          __size_of_KeyHave 000C            _Table_KeyChannel 03A9            __size_of___lwdiv 002A  
        __end_of__stringtab 0399                    _b_kover1 03CA        __end_of_TurnKeyFlags 02D5  
          __size_of_initPWM 000D                    _adresult 004C            __size_of_hunheOn 0007  
   CheckValidTime@validtime 0044             ___lwdiv@divisor 0072             ___lwdiv@counter 0078  
                  __ptext10 048C                    __ptext11 0491                    __ptext20 043C  
                  __ptext12 0473                    __ptext21 03DF                    __ptext13 0486  
                  __ptext30 0354                    __ptext22 02D5                    __ptext14 04A2  
                  __ptext31 0304                    __ptext23 042D                    __ptext15 046B  
                  __ptext32 0276                    __ptext24 0409                    __ptext16 04A4  
                  __ptext33 03F4                    __ptext25 0018                    __ptext17 0374  
                  __ptext26 0457                    __ptext18 032E                    __ptext27 03C6  
                  __ptext19 02A6                    __ptext28 01A4                    __ptext29 041B  
          __size_of_whiteOn 0006    __size_of_CheckOnceResult 00D5               __size_of_fan1 0002  
             __size_of_fan2 0002               __size_of_fan3 0002               __size_of_main 0051  
             __size_of_whOn 0004       __end_of_CheckTouchKey 0354                    _yellowOn 047A  
   CheckKeyOldValue@counter 0052           ?_CheckKeyOldValue 0070                    intlevel1 0000  
             ??_ClearResSum 0072          ??_CheckKeyOldValue 0074                 ?_ADC_Sample 0072  
                 stringcode 0393                  _B_MainLoop 03CC                  _OPTION_REG 0081  
                  stringdir 0393                    stringtab 0393              KeyClearOne@cnt 0072  
             KeyClearIn@cnt 0074         __end_of_ClearResSum 043C           ??_CheckOnceResult 0075  
