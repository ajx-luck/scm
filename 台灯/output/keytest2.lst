

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Aug 17 16:32:20 2021

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F2852
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	bitnvCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	swtext1,local,class=CONST,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	swtext2,local,class=CONST,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	intentry,global,class=CODE,delta=2
    49                           	psect	pa_nodes0,global,class=CODE,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     
    52                           ; Version 1.45
    53                           ; Generated 16/11/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC16F887 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	idataBANK0
    88  0000                     __pidataBANK0:	
    89                           
    90                           	psect	strings
    91  0344                     __pstrings:	
    92  0344                     stringtab:	
    93  0344                     __stringtab:	
    94  0344                     stringcode:	
    95                           ;	String table - string pointers are 1 byte each
    96                           
    97  0344                     stringdir:	
    98  0344  3003               	movlw	high stringdir
    99  0345  008A               	movwf	10
   100  0346  0804               	movf	4,w
   101  0347  0A84               	incf	4,f
   102  0348  0782               	addwf	2,f
   103  0349                     __stringbase:	
   104  0349  3400               	retlw	0
   105  034A                     __end_of__stringtab:	
   106  034A                     _Table_KeyFalg:	
   107  034A  3401               	retlw	1
   108  034B  3402               	retlw	2
   109  034C  3404               	retlw	4
   110  034D  3408               	retlw	8
   111  034E  3410               	retlw	16
   112  034F  3420               	retlw	32
   113  0350  3440               	retlw	64
   114  0351  3480               	retlw	128
   115  0352                     __end_of_Table_KeyFalg:	
   116  0352                     _Table_KeyDown:	
   117  0352  340A               	retlw	10
   118  0353  340A               	retlw	10
   119  0354                     __end_of_Table_KeyDown:	
   120  0354                     _Table_KeyCap:	
   121  0354  3402               	retlw	2
   122  0355  3402               	retlw	2
   123  0356                     __end_of_Table_KeyCap:	
   124  0356                     _Table_KeyChannel:	
   125  0356  3460               	retlw	96
   126  0357  3461               	retlw	97
   127  0358                     __end_of_Table_KeyChannel:	
   128                           
   129                           	psect	bitnvCOMMON
   130  03C0                     __pbitnvCOMMON:	
   131  03C0                     _sendFlag:	
   132  03C0                     	ds	1
   133  001D                     _PWMCON2	set	29
   134  001C                     _PWMD01H	set	28
   135  0018                     _PWMD1L	set	24
   136  0017                     _PWMD0L	set	23
   137  0016                     _PWMTH	set	22
   138  0015                     _PWMTL	set	21
   139  0014                     _PWMCON1	set	20
   140  0013                     _PWMCON0	set	19
   141  0012                     _T2CON	set	18
   142  000D                     _PIE1	set	13
   143  000C                     _PIR1	set	12
   144  000B                     _INTCON	set	11
   145  0008                     _WPUB	set	8
   146  0007                     _WPUA	set	7
   147  0006                     _PORTB	set	6
   148  0005                     _PORTA	set	5
   149  0061                     _TMR2IF	set	97
   150  0095                     _KEYDATAH	set	149
   151  0094                     _KEYDATAL	set	148
   152  0093                     _KEYCON1	set	147
   153  0092                     _KEYCON0	set	146
   154  0091                     _PR2	set	145
   155  0088                     _OSCCON	set	136
   156  0087                     _WPDB	set	135
   157  0086                     _TRISB	set	134
   158  0085                     _TRISA	set	133
   159  0081                     _OPTION_REG	set	129
   160                           
   161                           	psect	cinit
   162  000B                     start_initialization:	
   163                           ; #config settings
   164                           
   165  000B                     __initialization:	
   166                           
   167                           ;initializer for _pwm1Step
   168  000B  3001               	movlw	1
   169  000C  00DB               	movwf	__pdataBANK0& (0+127)
   170                           
   171                           ;initializer for _pwm0Step
   172  000D  00DC               	movwf	(__pdataBANK0+1)& (0+127)
   173  000E  3020               	movlw	low __pbssBANK0
   174                           
   175                           ; Clear objects allocated to BANK0
   176  000F  1383               	bcf	3,7	;select IRP bank0
   177  0010  0084               	movwf	4
   178  0011  304E               	movlw	low (__pbssBANK0+46)
   179  0012  23C5               	fcall	clear_ram0
   180                           
   181                           ; Clear objects allocated to COMMON
   182  0013  01F9               	clrf	__pbssCOMMON& (0+127)
   183                           
   184                           ; Clear objects allocated to BITCOMMON
   185  0014  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   186  0015  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   187  0016                     end_of_initialization:	
   188                           ;End of C runtime variable initialization code
   189                           
   190  0016                     __end_of__initialization:	
   191  0016  0183               	clrf	3
   192  0017  2B58               	ljmp	_main	;jump to C main() function
   193                           
   194                           	psect	bitbssCOMMON
   195  0380                     __pbitbssCOMMON:	
   196  0380                     _b_kerr:	
   197  0380                     	ds	1
   198  0381                     _b_kclr:	
   199  0381                     	ds	1
   200  0382                     _b_kover1:	
   201  0382                     	ds	1
   202  0383                     _b_kover:	
   203  0383                     	ds	1
   204  0384                     _doubleTouchFlag:	
   205  0384                     	ds	1
   206  0385                     _keyLockFlag:	
   207  0385                     	ds	1
   208  0386                     _pwmFlag:	
   209  0386                     	ds	1
   210  0387                     _ONFlag:	
   211  0387                     	ds	1
   212  0388                     _doublePressFlag:	
   213  0388                     	ds	1
   214  0389                     _sendStartFlag:	
   215  0389                     	ds	1
   216  038A                     _B_MainLoop:	
   217  038A                     	ds	1
   218                           
   219                           	psect	bssCOMMON
   220  0079                     __pbssCOMMON:	
   221  0079                     _pwmTime:	
   222  0079                     	ds	1
   223                           
   224                           	psect	bssBANK0
   225  0020                     __pbssBANK0:	
   226  0020                     _KeyReference:	
   227  0020                     	ds	4
   228  0024                     _KeyOldValue2:	
   229  0024                     	ds	4
   230  0028                     _KeyOldValue1:	
   231  0028                     	ds	4
   232  002C                     _KeyOldValue0:	
   233  002C                     	ds	4
   234  0030                     _KeyResSum:	
   235  0030                     	ds	4
   236  0034                     CheckValidTime@validtime:	
   237  0034                     	ds	2
   238  0036                     _KeyData:	
   239  0036                     	ds	2
   240  0038                     _KeyOldData:	
   241  0038                     	ds	2
   242  003A                     _keyCount1:	
   243  003A                     	ds	2
   244  003C                     _keyCount0:	
   245  003C                     	ds	2
   246  003E                     _keyNub:	
   247  003E                     	ds	2
   248  0040                     _KeyUpShake:	
   249  0040                     	ds	2
   250  0042                     _KeyFlag:	
   251  0042                     	ds	2
   252  0044                     TurnKeyFlags@KeyNoTimes:	
   253  0044                     	ds	1
   254  0045                     TurnKeyFlags@KeyHaveTimes:	
   255  0045                     	ds	1
   256  0046                     CheckKeyOldValue@counter:	
   257  0046                     	ds	1
   258  0047                     _KeyMaxSub:	
   259  0047                     	ds	1
   260  0048                     _KeyCounter:	
   261  0048                     	ds	1
   262  0049                     _checkCount:	
   263  0049                     	ds	1
   264  004A                     _revZeroCount:	
   265  004A                     	ds	1
   266  004B                     _revCount:	
   267  004B                     	ds	1
   268  004C                     _irStep:	
   269  004C                     	ds	1
   270  004D                     _MainTime:	
   271  004D                     	ds	1
   272                           
   273                           	psect	dataBANK0
   274  005B                     __pdataBANK0:	
   275  005B                     _pwm1Step:	
   276  005B                     	ds	1
   277  005C                     _pwm0Step:	
   278  005C                     	ds	1
   279                           
   280                           	psect	clrtext
   281  03C5                     clear_ram0:	
   282                           ;	Called with FSR containing the base address, and
   283                           ;	W with the last address+1
   284                           
   285  03C5  0064               	clrwdt	;clear the watchdog before getting into this loop
   286  03C6                     clrloop0:	
   287  03C6  0180               	clrf	0	;clear RAM location pointed to by FSR
   288  03C7  0A84               	incf	4,f	;increment pointer
   289  03C8  0604               	xorwf	4,w	;XOR with final address
   290  03C9  1903               	btfsc	3,2	;have we reached the end yet?
   291  03CA  3400               	retlw	0	;all done for this memory range, return
   292  03CB  0604               	xorwf	4,w	;XOR again to restore value
   293  03CC  2BC6               	goto	clrloop0	;do the next byte
   294                           
   295                           	psect	cstackCOMMON
   296  0072                     __pcstackCOMMON:	
   297  0072                     ?_mode1:	
   298  0072                     ?_mode2:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0072                     ?_mode3:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0072                     ?_mode4:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0072                     ?_mode5:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0072                     ?_modea:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0072                     ?_modeb:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0072                     ?_modec:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0072                     ?_moded:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0072                     ?_modee:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0072                     ?_initPWM:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0072                     ?_CheckTouchKey:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0072                     ?_Init_System:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0072                     ?_procKey1:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0072                     ?_procKey2:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0072                     ?_startPWM:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0072                     ?_KeyServer:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0072                     ?_checkIRKey:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0072                     ?_Isr_Timer:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0072                     ??_Isr_Timer:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0072                     ?_main:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0072                     ?_KeyIsIn:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0072                     ?_KeyClearOne:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0072                     ?_KeyClearIn:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0072                     ?_KeyStopClear:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0072                     ?_ClearResSum:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0072                     ?_GetTouchKeyValue:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  0072                     ?_CheckOnceResult:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0072                     ?_CheckKeyOldValue:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0072                     ?_TurnKeyFlags:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0072                     ?_CheckValidTime:	
   386                           ; 1 bytes @ 0x0
   387                           
   388                           
   389                           ; 1 bytes @ 0x0
   390  0072                     	ds	2
   391  0074                     ??_mode1:	
   392  0074                     ??_mode2:	
   393                           ; 1 bytes @ 0x2
   394                           
   395  0074                     ??_mode3:	
   396                           ; 1 bytes @ 0x2
   397                           
   398  0074                     ??_mode4:	
   399                           ; 1 bytes @ 0x2
   400                           
   401  0074                     ??_mode5:	
   402                           ; 1 bytes @ 0x2
   403                           
   404  0074                     ??_modea:	
   405                           ; 1 bytes @ 0x2
   406                           
   407  0074                     ??_modeb:	
   408                           ; 1 bytes @ 0x2
   409                           
   410  0074                     ??_modec:	
   411                           ; 1 bytes @ 0x2
   412                           
   413  0074                     ??_moded:	
   414                           ; 1 bytes @ 0x2
   415                           
   416  0074                     ??_modee:	
   417                           ; 1 bytes @ 0x2
   418                           
   419  0074                     ??_initPWM:	
   420                           ; 1 bytes @ 0x2
   421                           
   422  0074                     ??_Init_System:	
   423                           ; 1 bytes @ 0x2
   424                           
   425  0074                     ??_procKey1:	
   426                           ; 1 bytes @ 0x2
   427                           
   428  0074                     ??_procKey2:	
   429                           ; 1 bytes @ 0x2
   430                           
   431  0074                     ??_startPWM:	
   432                           ; 1 bytes @ 0x2
   433                           
   434  0074                     ??_KeyServer:	
   435                           ; 1 bytes @ 0x2
   436                           
   437  0074                     ??_checkIRKey:	
   438                           ; 1 bytes @ 0x2
   439                           
   440  0074                     ??_KeyIsIn:	
   441                           ; 1 bytes @ 0x2
   442                           
   443  0074                     ??_KeyClearOne:	
   444                           ; 1 bytes @ 0x2
   445                           
   446  0074                     ??_ClearResSum:	
   447                           ; 1 bytes @ 0x2
   448                           
   449  0074                     ?_KeyHave:	
   450                           ; 1 bytes @ 0x2
   451                           
   452  0074                     ??_CheckValidTime:	
   453                           ; 1 bytes @ 0x2
   454                           
   455  0074                     KeyIsIn@i:	
   456                           ; 1 bytes @ 0x2
   457                           
   458  0074                     KeyClearOne@cnt:	
   459                           ; 1 bytes @ 0x2
   460                           
   461  0074                     ClearResSum@cnt:	
   462                           ; 1 bytes @ 0x2
   463                           
   464  0074                     KeyServer@i:	
   465                           ; 1 bytes @ 0x2
   466                           
   467  0074                     KeyHave@flag:	
   468                           ; 2 bytes @ 0x2
   469                           
   470                           
   471                           ; 2 bytes @ 0x2
   472  0074                     	ds	1
   473  0075                     ??_KeyStopClear:	
   474  0075                     ??_GetTouchKeyValue:	
   475                           ; 1 bytes @ 0x3
   476                           
   477  0075                     KeyIsIn@cnt:	
   478                           ; 1 bytes @ 0x3
   479                           
   480  0075                     KeyStopClear@i:	
   481                           ; 1 bytes @ 0x3
   482                           
   483  0075                     GetTouchKeyValue@temp:	
   484                           ; 1 bytes @ 0x3
   485                           
   486                           
   487                           ; 1 bytes @ 0x3
   488  0075                     	ds	1
   489  0076                     ??_KeyClearIn:	
   490  0076                     ??_KeyHave:	
   491                           ; 1 bytes @ 0x4
   492                           
   493  0076                     ??_CheckKeyOldValue:	
   494                           ; 1 bytes @ 0x4
   495                           
   496  0076                     KeyClearIn@cnt:	
   497                           ; 1 bytes @ 0x4
   498                           
   499  0076                     KeyHave@cnt:	
   500                           ; 1 bytes @ 0x4
   501                           
   502  0076                     GetTouchKeyValue@cnt:	
   503                           ; 1 bytes @ 0x4
   504                           
   505                           
   506                           ; 1 bytes @ 0x4
   507  0076                     	ds	1
   508  0077                     ??_TurnKeyFlags:	
   509                           
   510                           ; 1 bytes @ 0x5
   511  0077                     	ds	1
   512  0078                     ??_CheckTouchKey:	
   513  0078                     ??_main:	
   514                           ; 1 bytes @ 0x6
   515                           
   516                           
   517                           	psect	cstackBANK0
   518  004E                     __pcstackBANK0:	
   519                           ; 1 bytes @ 0x6
   520                           
   521  004E                     ??_CheckOnceResult:	
   522  004E                     CheckKeyOldValue@KeyResTemp:	
   523                           ; 1 bytes @ 0x0
   524                           
   525                           
   526                           ; 2 bytes @ 0x0
   527  004E                     	ds	2
   528  0050                     CheckKeyOldValue@KeyOldTemp:	
   529                           
   530                           ; 2 bytes @ 0x2
   531  0050                     	ds	2
   532  0052                     CheckKeyOldValue@cnt:	
   533  0052                     CheckOnceResult@OldValue:	
   534                           ; 1 bytes @ 0x4
   535                           
   536                           
   537                           ; 2 bytes @ 0x4
   538  0052                     	ds	2
   539  0054                     CheckOnceResult@flag:	
   540                           
   541                           ; 1 bytes @ 0x6
   542  0054                     	ds	1
   543  0055                     CheckOnceResult@KeyValue:	
   544                           
   545                           ; 2 bytes @ 0x7
   546  0055                     	ds	2
   547  0057                     CheckOnceResult@KeyDown:	
   548                           
   549                           ; 1 bytes @ 0x9
   550  0057                     	ds	1
   551  0058                     CheckOnceResult@KeyResTemp:	
   552                           
   553                           ; 2 bytes @ 0xA
   554  0058                     	ds	2
   555  005A                     CheckOnceResult@cnt:	
   556                           
   557                           ; 1 bytes @ 0xC
   558  005A                     	ds	1
   559                           
   560                           	psect	maintext
   561  0358                     __pmaintext:	
   562 ;;
   563 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   564 ;;
   565 ;; *************** function _main *****************
   566 ;; Defined at:
   567 ;;		line 305 in file "C:\mcuproject\scm\Ì¨µÆ\main.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;		None
   570 ;; Auto vars:     Size  Location     Type
   571 ;;		None
   572 ;; Return value:  Size  Location     Type
   573 ;;                  1    wreg      void 
   574 ;; Registers used:
   575 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   576 ;; Tracked objects:
   577 ;;		On entry : B00/0
   578 ;;		On exit  : 300/0
   579 ;;		Unchanged: 0/0
   580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   581 ;;      Params:         0       0       0       0
   582 ;;      Locals:         0       0       0       0
   583 ;;      Temps:          0       0       0       0
   584 ;;      Totals:         0       0       0       0
   585 ;;Total ram usage:        0 bytes
   586 ;; Hardware stack levels required when called:    6
   587 ;; This function calls:
   588 ;;		_CheckTouchKey
   589 ;;		_Init_System
   590 ;;		_KeyServer
   591 ;;		_checkIRKey
   592 ;;		_startPWM
   593 ;; This function is called by:
   594 ;;		Startup code after reset
   595 ;; This function uses a non-reentrant model
   596 ;;
   597                           
   598                           
   599                           ;psect for function _main
   600  0358                     _main:	
   601                           
   602                           ;main.c: 307: PORTB = 0x00;
   603                           
   604                           ;incstack = 0
   605                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   606  0358  0186               	clrf	6	;volatile
   607                           
   608                           ;main.c: 308: PORTA = 0x00;
   609  0359  0185               	clrf	5	;volatile
   610                           
   611                           ;main.c: 309: Init_System();
   612  035A  22BA               	fcall	_Init_System
   613                           
   614                           ;main.c: 310: sendFlag = 1;
   615  035B  1478               	bsf	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
   616  035C                     l578:	
   617                           ;main.c: 312: while(1)
   618                           
   619  035C  0064               	clrwdt	;# 
   620                           
   621                           ;main.c: 315: if(B_MainLoop)
   622  035D  1D71               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   623  035E  2B5C               	goto	l578
   624                           
   625                           ;main.c: 316: {
   626                           ;main.c: 317: B_MainLoop = 0;
   627  035F  1171               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   628                           
   629                           ;main.c: 319: CheckTouchKey();
   630  0360  2271               	fcall	_CheckTouchKey
   631                           
   632                           ;main.c: 320: KeyServer();
   633  0361  2187               	fcall	_KeyServer
   634                           
   635                           ;main.c: 321: checkIRKey();
   636  0362  21E0               	fcall	_checkIRKey
   637                           
   638                           ;main.c: 322: if(ONFlag)
   639  0363  1FF0               	btfss	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   640  0364  2B67               	goto	l2812
   641                           
   642                           ;main.c: 323: {
   643                           ;main.c: 324: startPWM();
   644  0365  23D3               	fcall	_startPWM
   645                           
   646                           ;main.c: 325: }
   647  0366  2B5C               	goto	l578
   648  0367                     l2812:	
   649                           
   650                           ;main.c: 326: else
   651                           ;main.c: 327: {
   652                           ;main.c: 328: PWMCON0 = 0;
   653  0367  0193               	clrf	19	;volatile
   654                           
   655                           ;main.c: 329: PORTB &= 0x7F;
   656  0368  1386               	bcf	6,7	;volatile
   657                           
   658                           ;main.c: 330: PORTA &= 0xDF;
   659  0369  1285               	bcf	5,5	;volatile
   660  036A  2B5C               	goto	l578
   661  036B                     __end_of_main:	
   662                           
   663                           	psect	text1
   664  03D3                     __ptext1:	
   665 ;; *************** function _startPWM *****************
   666 ;; Defined at:
   667 ;;		line 161 in file "C:\mcuproject\scm\Ì¨µÆ\main.c"
   668 ;; Parameters:    Size  Location     Type
   669 ;;		None
   670 ;; Auto vars:     Size  Location     Type
   671 ;;		None
   672 ;; Return value:  Size  Location     Type
   673 ;;                  1    wreg      void 
   674 ;; Registers used:
   675 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   676 ;; Tracked objects:
   677 ;;		On entry : 300/0
   678 ;;		On exit  : 300/0
   679 ;;		Unchanged: 0/0
   680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   681 ;;      Params:         0       0       0       0
   682 ;;      Locals:         0       0       0       0
   683 ;;      Temps:          0       0       0       0
   684 ;;      Totals:         0       0       0       0
   685 ;;Total ram usage:        0 bytes
   686 ;; Hardware stack levels used:    1
   687 ;; Hardware stack levels required when called:    3
   688 ;; This function calls:
   689 ;;		_initPWM
   690 ;;		_procKey1
   691 ;;		_procKey2
   692 ;; This function is called by:
   693 ;;		_main
   694 ;; This function uses a non-reentrant model
   695 ;;
   696                           
   697                           
   698                           ;psect for function _startPWM
   699  03D3                     _startPWM:	
   700                           
   701                           ;main.c: 163: --pwm0Step;
   702                           
   703                           ;incstack = 0
   704                           ; Regs used in _startPWM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   705  03D3  03DC               	decf	_pwm0Step,f
   706                           
   707                           ;main.c: 164: --pwm1Step;
   708  03D4  03DB               	decf	_pwm1Step,f
   709                           
   710                           ;main.c: 165: initPWM();
   711  03D5  23AC               	fcall	_initPWM
   712                           
   713                           ;main.c: 166: procKey1();
   714  03D6  22F8               	fcall	_procKey1
   715                           
   716                           ;main.c: 167: procKey2();
   717  03D7  2ADA               	ljmp	l2264
   718  03D8                     __end_of_startPWM:	
   719                           
   720                           	psect	text2
   721  03AC                     __ptext2:	
   722 ;; *************** function _initPWM *****************
   723 ;; Defined at:
   724 ;;		line 4 in file "C:\mcuproject\scm\Ì¨µÆ\pwm.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;		None
   727 ;; Auto vars:     Size  Location     Type
   728 ;;		None
   729 ;; Return value:  Size  Location     Type
   730 ;;                  1    wreg      void 
   731 ;; Registers used:
   732 ;;		wreg, status,2
   733 ;; Tracked objects:
   734 ;;		On entry : 300/0
   735 ;;		On exit  : 300/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   738 ;;      Params:         0       0       0       0
   739 ;;      Locals:         0       0       0       0
   740 ;;      Temps:          0       0       0       0
   741 ;;      Totals:         0       0       0       0
   742 ;;Total ram usage:        0 bytes
   743 ;; Hardware stack levels used:    1
   744 ;; Hardware stack levels required when called:    1
   745 ;; This function calls:
   746 ;;		Nothing
   747 ;; This function is called by:
   748 ;;		_startPWM
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           
   753                           ;psect for function _initPWM
   754  03AC                     _initPWM:	
   755                           
   756                           ;pwm.c: 6: PWMCON1 = 0x40;
   757                           
   758                           ;incstack = 0
   759                           ; Regs used in _initPWM: [wreg+status,2]
   760  03AC  3040               	movlw	64
   761  03AD  0094               	movwf	20	;volatile
   762                           
   763                           ;pwm.c: 7: PWMCON0 = 0x23;
   764  03AE  3023               	movlw	35
   765  03AF  0093               	movwf	19	;volatile
   766                           
   767                           ;pwm.c: 8: PWMCON2 = 0;
   768  03B0  019D               	clrf	29	;volatile
   769                           
   770                           ;pwm.c: 9: PWMTH = 0;
   771  03B1  0196               	clrf	22	;volatile
   772                           
   773                           ;pwm.c: 10: PWMTL = 125;
   774  03B2  307D               	movlw	125
   775  03B3  0095               	movwf	21	;volatile
   776                           
   777                           ;pwm.c: 11: PWMD0L = 1;
   778  03B4  3001               	movlw	1
   779  03B5  0097               	movwf	23	;volatile
   780                           
   781                           ;pwm.c: 12: PWMD1L = 1;
   782  03B6  0098               	movwf	24	;volatile
   783                           
   784                           ;pwm.c: 13: PWMD01H = 0;
   785  03B7  019C               	clrf	28	;volatile
   786  03B8  0008               	return
   787  03B9                     __end_of_initPWM:	
   788                           
   789                           	psect	text3
   790  01E0                     __ptext3:	
   791 ;; *************** function _checkIRKey *****************
   792 ;; Defined at:
   793 ;;		line 219 in file "C:\mcuproject\scm\Ì¨µÆ\main.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;		None
   798 ;; Return value:  Size  Location     Type
   799 ;;                  1    wreg      void 
   800 ;; Registers used:
   801 ;;		wreg, status,2, status,0
   802 ;; Tracked objects:
   803 ;;		On entry : 300/0
   804 ;;		On exit  : 300/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   807 ;;      Params:         0       0       0       0
   808 ;;      Locals:         0       0       0       0
   809 ;;      Temps:          1       0       0       0
   810 ;;      Totals:         1       0       0       0
   811 ;;Total ram usage:        1 bytes
   812 ;; Hardware stack levels used:    1
   813 ;; Hardware stack levels required when called:    1
   814 ;; This function calls:
   815 ;;		Nothing
   816 ;; This function is called by:
   817 ;;		_main
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           
   822                           ;psect for function _checkIRKey
   823  01E0                     _checkIRKey:	
   824                           
   825                           ;main.c: 221: if(((PORTB) >> (2)&1))
   826                           
   827                           ;incstack = 0
   828                           ; Regs used in _checkIRKey: [wreg+status,2+status,0]
   829  01E0  0806               	movf	6,w	;volatile
   830  01E1  00F4               	movwf	??_checkIRKey
   831  01E2  1003               	clrc
   832  01E3  0CF4               	rrf	??_checkIRKey,f
   833  01E4  1003               	clrc
   834  01E5  0CF4               	rrf	??_checkIRKey,f
   835  01E6  1874               	btfsc	??_checkIRKey,0
   836                           
   837                           ;main.c: 222: {
   838                           ;main.c: 223: revCount++;
   839  01E7  0ACB               	incf	_revCount,f
   840                           
   841                           ;main.c: 224: }
   842                           ;main.c: 226: if(checkCount > 10 && irStep)
   843  01E8  300B               	movlw	11
   844  01E9  0249               	subwf	_checkCount,w
   845  01EA  1C03               	skipc
   846  01EB  29F1               	goto	l553
   847  01EC  084C               	movf	_irStep,w	;volatile
   848  01ED  1903               	btfsc	3,2
   849  01EE  29F1               	goto	l553
   850                           
   851                           ;main.c: 227: {
   852                           ;main.c: 228: sendFlag = 0;
   853  01EF  1078               	bcf	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
   854                           
   855                           ;main.c: 229: }
   856  01F0  29F2               	goto	l2542
   857  01F1                     l553:	
   858                           
   859                           ;main.c: 230: else
   860                           ;main.c: 231: {
   861                           ;main.c: 232: sendFlag = 1;
   862  01F1  1478               	bsf	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
   863  01F2                     l2542:	
   864                           
   865                           ;main.c: 233: }
   866                           ;main.c: 235: if(++checkCount >= 20)
   867  01F2  3014               	movlw	20
   868  01F3  0AC9               	incf	_checkCount,f
   869  01F4  0249               	subwf	_checkCount,w
   870  01F5  1C03               	skipc
   871  01F6  0008               	return
   872                           
   873                           ;main.c: 236: {
   874                           ;main.c: 237: if(revCount > 2)
   875  01F7  3003               	movlw	3
   876  01F8  024B               	subwf	_revCount,w
   877  01F9  1C03               	skipc
   878  01FA  2A07               	goto	l2556
   879                           
   880                           ;main.c: 238: {
   881                           ;main.c: 239: if(irStep == 0)
   882  01FB  084C               	movf	_irStep,w	;volatile
   883  01FC  1D03               	btfss	3,2
   884  01FD  2A05               	goto	l2554
   885                           
   886                           ;main.c: 240: {
   887                           ;main.c: 241: irStep = 1;
   888  01FE  3001               	movlw	1
   889  01FF  00CC               	movwf	_irStep	;volatile
   890                           
   891                           ;main.c: 242: if(ONFlag == 1)
   892  0200  1FF0               	btfss	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   893  0201  2A04               	goto	l558
   894                           
   895                           ;main.c: 243: {
   896                           ;main.c: 244: ONFlag = 0;
   897  0202  13F0               	bcf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   898                           
   899                           ;main.c: 245: }
   900  0203  2A05               	goto	l2554
   901  0204                     l558:	
   902                           
   903                           ;main.c: 246: else
   904                           ;main.c: 247: {
   905                           ;main.c: 248: ONFlag = 1;
   906  0204  17F0               	bsf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   907  0205                     l2554:	
   908                           
   909                           ;main.c: 249: }
   910                           ;main.c: 250: }
   911                           ;main.c: 251: revZeroCount = 0;
   912  0205  01CA               	clrf	_revZeroCount
   913                           
   914                           ;main.c: 252: }
   915  0206  2A0F               	goto	l2562
   916  0207                     l2556:	
   917                           
   918                           ;main.c: 253: else
   919                           ;main.c: 254: {
   920                           ;main.c: 255: if(++revZeroCount > 1)
   921  0207  3002               	movlw	2
   922  0208  0ACA               	incf	_revZeroCount,f
   923  0209  024A               	subwf	_revZeroCount,w
   924  020A  1C03               	skipc
   925  020B  2A0F               	goto	l2562
   926                           
   927                           ;main.c: 256: {
   928                           ;main.c: 257: revZeroCount = 1;
   929  020C  01CA               	clrf	_revZeroCount
   930  020D  0ACA               	incf	_revZeroCount,f
   931                           
   932                           ;main.c: 258: irStep = 0;
   933  020E  01CC               	clrf	_irStep	;volatile
   934  020F                     l2562:	
   935                           
   936                           ;main.c: 259: }
   937                           ;main.c: 260: }
   938                           ;main.c: 263: sendFlag = 1;
   939  020F  1478               	bsf	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
   940                           
   941                           ;main.c: 264: checkCount = 0;
   942  0210  01C9               	clrf	_checkCount
   943                           
   944                           ;main.c: 265: revCount = 0;
   945  0211  01CB               	clrf	_revCount
   946  0212  0008               	return
   947  0213                     __end_of_checkIRKey:	
   948                           
   949                           	psect	text4
   950  0187                     __ptext4:	
   951 ;; *************** function _KeyServer *****************
   952 ;; Defined at:
   953 ;;		line 175 in file "C:\mcuproject\scm\Ì¨µÆ\main.c"
   954 ;; Parameters:    Size  Location     Type
   955 ;;		None
   956 ;; Auto vars:     Size  Location     Type
   957 ;;  i               2    2[COMMON] unsigned int 
   958 ;; Return value:  Size  Location     Type
   959 ;;                  1    wreg      void 
   960 ;; Registers used:
   961 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   962 ;; Tracked objects:
   963 ;;		On entry : 300/0
   964 ;;		On exit  : 300/0
   965 ;;		Unchanged: 0/0
   966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   967 ;;      Params:         0       0       0       0
   968 ;;      Locals:         2       0       0       0
   969 ;;      Temps:          0       0       0       0
   970 ;;      Totals:         2       0       0       0
   971 ;;Total ram usage:        2 bytes
   972 ;; Hardware stack levels used:    1
   973 ;; Hardware stack levels required when called:    3
   974 ;; This function calls:
   975 ;;		_procKey1
   976 ;;		_procKey2
   977 ;; This function is called by:
   978 ;;		_main
   979 ;; This function uses a non-reentrant model
   980 ;;
   981                           
   982                           
   983                           ;psect for function _KeyServer
   984  0187                     _KeyServer:	
   985                           
   986                           ;main.c: 177: static unsigned int KeyOldFlag = 0;
   987                           ;main.c: 178: unsigned int i = (unsigned int)((KeyFlag[1]<<8) | KeyFlag[0]);
   988                           
   989                           ;incstack = 0
   990                           ; Regs used in _KeyServer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   991  0187  0843               	movf	_KeyFlag+1,w	;volatile
   992  0188  00F5               	movwf	KeyServer@i+1
   993  0189  0842               	movf	_KeyFlag,w	;volatile
   994  018A  00F4               	movwf	KeyServer@i
   995                           
   996                           ;main.c: 179: if(i)
   997  018B  0475               	iorwf	KeyServer@i+1,w
   998  018C  1903               	btfsc	3,2
   999  018D  29B1               	goto	l2508
  1000                           
  1001                           ;main.c: 180: {
  1002                           ;main.c: 181: keyNub = i;
  1003  018E  0875               	movf	KeyServer@i+1,w
  1004  018F  00BF               	movwf	_keyNub+1
  1005  0190  0874               	movf	KeyServer@i,w
  1006  0191  00BE               	movwf	_keyNub
  1007                           
  1008                           ;main.c: 182: if(keyNub & 0x01){
  1009  0192  1C3E               	btfss	_keyNub,0
  1010  0193  29A1               	goto	l2502
  1011                           
  1012                           ;main.c: 183: if(++keyCount0 > 200)
  1013  0194  0ABC               	incf	_keyCount0,f
  1014  0195  1903               	skipnz
  1015  0196  0ABD               	incf	_keyCount0+1,f
  1016  0197  3000               	movlw	0
  1017  0198  023D               	subwf	_keyCount0+1,w
  1018  0199  30C9               	movlw	201
  1019  019A  1903               	skipnz
  1020  019B  023C               	subwf	_keyCount0,w
  1021  019C  1C03               	skipc
  1022  019D  29A1               	goto	l2502
  1023                           
  1024                           ;main.c: 184: keyCount0 = 200;
  1025  019E  30C8               	movlw	200
  1026  019F  00BC               	movwf	_keyCount0
  1027  01A0  01BD               	clrf	_keyCount0+1
  1028  01A1                     l2502:	
  1029                           
  1030                           ;main.c: 185: }
  1031                           ;main.c: 186: if(keyNub & 0x02){
  1032  01A1  1CBE               	btfss	_keyNub,1
  1033  01A2  0008               	return
  1034                           
  1035                           ;main.c: 187: if(++keyCount1 > 200)
  1036  01A3  0ABA               	incf	_keyCount1,f
  1037  01A4  1903               	skipnz
  1038  01A5  0ABB               	incf	_keyCount1+1,f
  1039  01A6  3000               	movlw	0
  1040  01A7  023B               	subwf	_keyCount1+1,w
  1041  01A8  30C9               	movlw	201
  1042  01A9  1903               	skipnz
  1043  01AA  023A               	subwf	_keyCount1,w
  1044  01AB  1C03               	skipc
  1045  01AC  0008               	return
  1046                           
  1047                           ;main.c: 188: keyCount1 = 200;
  1048  01AD  30C8               	movlw	200
  1049  01AE  00BA               	movwf	_keyCount1
  1050  01AF  01BB               	clrf	_keyCount1+1
  1051  01B0  0008               	return
  1052  01B1                     l2508:	
  1053                           
  1054                           ;main.c: 191: else
  1055                           ;main.c: 192: {
  1056                           ;main.c: 193: if(keyCount0 > 3 && keyCount1 > 3)
  1057  01B1  3000               	movlw	0
  1058  01B2  023D               	subwf	_keyCount0+1,w
  1059  01B3  3004               	movlw	4
  1060  01B4  1903               	skipnz
  1061  01B5  023C               	subwf	_keyCount0,w
  1062  01B6  3000               	movlw	0
  1063  01B7  1C03               	skipc
  1064  01B8  29C3               	goto	L1
  1065  01B9  023B               	subwf	_keyCount1+1,w
  1066  01BA  3004               	movlw	4
  1067  01BB  1903               	skipnz
  1068  01BC  023A               	subwf	_keyCount1,w
  1069  01BD  1C03               	skipc
  1070  01BE  29C2               	goto	l2514
  1071                           
  1072                           ;main.c: 194: {
  1073                           ;main.c: 196: ONFlag = !ONFlag;
  1074  01BF  3080               	movlw	(0+1) shl (_ONFlag& (0+7))
  1075  01C0  06F0               	xorwf	_ONFlag/(0+8),f
  1076                           
  1077                           ;main.c: 197: }
  1078  01C1  29D9               	goto	l2526
  1079  01C2                     l2514:	
  1080                           
  1081                           ;main.c: 198: else if(keyCount0 > 3 || keyCount1 > 3)
  1082  01C2  3000               	movlw	0
  1083  01C3                     L1:	
  1084  01C3  023D               	subwf	_keyCount0+1,w
  1085  01C4  3004               	movlw	4
  1086  01C5  1903               	skipnz
  1087  01C6  023C               	subwf	_keyCount0,w
  1088  01C7  1803               	skipnc
  1089  01C8  29D0               	goto	l545
  1090  01C9  3000               	movlw	0
  1091  01CA  023B               	subwf	_keyCount1+1,w
  1092  01CB  3004               	movlw	4
  1093  01CC  1903               	skipnz
  1094  01CD  023A               	subwf	_keyCount1,w
  1095  01CE  1C03               	skipc
  1096  01CF  29D9               	goto	l2526
  1097  01D0                     l545:	
  1098                           
  1099                           ;main.c: 199: {
  1100                           ;main.c: 201: if(keyNub & 0x01)
  1101  01D0  1C3E               	btfss	_keyNub,0
  1102  01D1  29D5               	goto	l546
  1103                           
  1104                           ;main.c: 202: {
  1105                           ;main.c: 203: ONFlag = 1;
  1106  01D2  17F0               	bsf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
  1107                           
  1108                           ;main.c: 204: procKey1();
  1109  01D3  22F8               	fcall	_procKey1
  1110                           
  1111                           ;main.c: 205: }
  1112  01D4  29D9               	goto	l2526
  1113  01D5                     l546:	
  1114                           
  1115                           ;main.c: 206: else if(keyNub &0x02)
  1116  01D5  1CBE               	btfss	_keyNub,1
  1117  01D6  29D9               	goto	l2526
  1118                           
  1119                           ;main.c: 207: {
  1120                           ;main.c: 208: ONFlag = 1;
  1121  01D7  17F0               	bsf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
  1122                           
  1123                           ;main.c: 209: procKey2();
  1124  01D8  22DA               	fcall	_procKey2
  1125  01D9                     l2526:	
  1126                           
  1127                           ;main.c: 210: }
  1128                           ;main.c: 212: }
  1129                           ;main.c: 213: keyCount0 = 0;
  1130  01D9  01BC               	clrf	_keyCount0
  1131  01DA  01BD               	clrf	_keyCount0+1
  1132                           
  1133                           ;main.c: 214: keyCount1 = 0;
  1134  01DB  01BA               	clrf	_keyCount1
  1135  01DC  01BB               	clrf	_keyCount1+1
  1136                           
  1137                           ;main.c: 215: keyNub = 0;
  1138  01DD  01BE               	clrf	_keyNub
  1139  01DE  01BF               	clrf	_keyNub+1
  1140  01DF  0008               	return
  1141  01E0                     __end_of_KeyServer:	
  1142                           
  1143                           	psect	text5
  1144  02DA                     __ptext5:	
  1145 ;; *************** function _procKey2 *****************
  1146 ;; Defined at:
  1147 ;;		line 133 in file "C:\mcuproject\scm\Ì¨µÆ\main.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;		None
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;		None
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1156 ;; Tracked objects:
  1157 ;;		On entry : 300/0
  1158 ;;		On exit  : 300/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1161 ;;      Params:         0       0       0       0
  1162 ;;      Locals:         0       0       0       0
  1163 ;;      Temps:          0       0       0       0
  1164 ;;      Totals:         0       0       0       0
  1165 ;;Total ram usage:        0 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; Hardware stack levels required when called:    2
  1168 ;; This function calls:
  1169 ;;		_modea
  1170 ;;		_modeb
  1171 ;;		_modec
  1172 ;;		_moded
  1173 ;;		_modee
  1174 ;; This function is called by:
  1175 ;;		_startPWM
  1176 ;;		_KeyServer
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           
  1181                           ;psect for function _procKey2
  1182  02DA                     _procKey2:	
  1183  02DA                     l2264:	
  1184                           ;incstack = 0
  1185                           ; Regs used in _procKey2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1186                           
  1187                           
  1188                           ;main.c: 135: if(ONFlag == 0)
  1189  02DA  1FF0               	btfss	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
  1190  02DB  0008               	return
  1191                           
  1192                           ;main.c: 137: pwmFlag = 1;
  1193  02DC  1770               	bsf	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
  1194                           
  1195                           ;main.c: 138: if(++pwm1Step > 5)
  1196  02DD  3006               	movlw	6
  1197  02DE  0ADB               	incf	_pwm1Step,f
  1198  02DF  025B               	subwf	_pwm1Step,w
  1199  02E0  1C03               	skipc
  1200  02E1  2AE4               	goto	l2284
  1201                           
  1202                           ;main.c: 139: pwm1Step = 1;
  1203  02E2  01DB               	clrf	_pwm1Step
  1204  02E3  0ADB               	incf	_pwm1Step,f
  1205  02E4                     l2284:	
  1206                           ;main.c: 156: break;
  1207                           
  1208  02E4  085B               	movf	_pwm1Step,w
  1209                           
  1210                           ; Switch size 1, requested type "space"
  1211                           ; Number of cases is 5, Range of values is 1 to 5
  1212                           ; switch strategies available:
  1213                           ; Name         Instructions Cycles
  1214                           ; direct_byte           14     9 (fixed)
  1215                           ; simple_byte           16     9 (average)
  1216                           ; jumptable            263     9 (fixed)
  1217                           ;	Chosen strategy is direct_byte
  1218  02E5  3EFF               	addlw	-1
  1219  02E6  1C03               	skipc
  1220  02E7  0008               	return
  1221  02E8  0084               	movwf	4
  1222  02E9  3005               	movlw	5
  1223  02EA  0204               	subwf	4,w
  1224  02EB  1803               	skipnc
  1225  02EC  0008               	return
  1226  02ED  3003               	movlw	high S2858
  1227  02EE  008A               	movwf	10
  1228  02EF  30D8               	movlw	low S2858
  1229  02F0  0704               	addwf	4,w
  1230  02F1  0082               	movwf	2
  1231  02F2  0008               	return
  1232  02F3                     l2272:	
  1233                           
  1234                           ;main.c: 143: modea();
  1235  02F3  2BEE               	ljmp	l2182
  1236  02F4                     l2274:	
  1237                           ;main.c: 144: break;
  1238                           
  1239                           
  1240                           ;main.c: 146: modeb();
  1241  02F4  2BEA               	ljmp	l2186
  1242  02F5                     l2276:	
  1243                           ;main.c: 147: break;
  1244                           
  1245                           
  1246                           ;main.c: 149: modec();
  1247  02F5  2BCD               	ljmp	l2190
  1248  02F6                     l2278:	
  1249                           ;main.c: 150: break;
  1250                           
  1251                           
  1252                           ;main.c: 152: moded();
  1253  02F6  2BE6               	ljmp	l2194
  1254  02F7                     l2280:	
  1255                           ;main.c: 153: break;
  1256                           
  1257                           
  1258                           ;main.c: 155: modee();
  1259  02F7  2BE2               	ljmp	l2198
  1260  02F8                     __end_of_procKey2:	
  1261                           
  1262                           	psect	swtext1
  1263  03D8                     __pswtext1:	
  1264  03D8                     S2858:	
  1265  03D8  2AF3               	ljmp	l2272
  1266  03D9  2AF4               	ljmp	l2274
  1267  03DA  2AF5               	ljmp	l2276
  1268  03DB  2AF6               	ljmp	l2278
  1269  03DC  2AF7               	ljmp	l2280
  1270                           
  1271                           	psect	text6
  1272  03E2                     __ptext6:	
  1273 ;; *************** function _modee *****************
  1274 ;; Defined at:
  1275 ;;		line 71 in file "C:\mcuproject\scm\Ì¨µÆ\pwm.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;		None
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;		None
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  1    wreg      void 
  1282 ;; Registers used:
  1283 ;;		wreg, status,2
  1284 ;; Tracked objects:
  1285 ;;		On entry : 300/0
  1286 ;;		On exit  : 300/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1289 ;;      Params:         0       0       0       0
  1290 ;;      Locals:         0       0       0       0
  1291 ;;      Temps:          0       0       0       0
  1292 ;;      Totals:         0       0       0       0
  1293 ;;Total ram usage:        0 bytes
  1294 ;; Hardware stack levels used:    1
  1295 ;; Hardware stack levels required when called:    1
  1296 ;; This function calls:
  1297 ;;		Nothing
  1298 ;; This function is called by:
  1299 ;;		_procKey2
  1300 ;; This function uses a non-reentrant model
  1301 ;;
  1302                           
  1303                           
  1304                           ;psect for function _modee
  1305  03E2                     _modee:	
  1306  03E2                     l2198:	
  1307                           ;incstack = 0
  1308                           ; Regs used in _modee: [wreg+status,2]
  1309                           
  1310                           
  1311                           ;pwm.c: 73: PWMD1L = 94;
  1312  03E2  305E               	movlw	94
  1313  03E3  0098               	movwf	24	;volatile
  1314                           
  1315                           ;pwm.c: 74: PWMD01H = 0;
  1316  03E4  019C               	clrf	28	;volatile
  1317  03E5  0008               	return
  1318  03E6                     __end_of_modee:	
  1319                           
  1320                           	psect	text7
  1321  03E6                     __ptext7:	
  1322 ;; *************** function _moded *****************
  1323 ;; Defined at:
  1324 ;;		line 65 in file "C:\mcuproject\scm\Ì¨µÆ\pwm.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;		None
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;		None
  1329 ;; Return value:  Size  Location     Type
  1330 ;;                  1    wreg      void 
  1331 ;; Registers used:
  1332 ;;		wreg, status,2
  1333 ;; Tracked objects:
  1334 ;;		On entry : 300/0
  1335 ;;		On exit  : 300/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1338 ;;      Params:         0       0       0       0
  1339 ;;      Locals:         0       0       0       0
  1340 ;;      Temps:          0       0       0       0
  1341 ;;      Totals:         0       0       0       0
  1342 ;;Total ram usage:        0 bytes
  1343 ;; Hardware stack levels used:    1
  1344 ;; Hardware stack levels required when called:    1
  1345 ;; This function calls:
  1346 ;;		Nothing
  1347 ;; This function is called by:
  1348 ;;		_procKey2
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           
  1353                           ;psect for function _moded
  1354  03E6                     _moded:	
  1355  03E6                     l2194:	
  1356                           ;incstack = 0
  1357                           ; Regs used in _moded: [wreg+status,2]
  1358                           
  1359                           
  1360                           ;pwm.c: 67: PWMD1L = 62;
  1361  03E6  303E               	movlw	62
  1362  03E7  0098               	movwf	24	;volatile
  1363                           
  1364                           ;pwm.c: 68: PWMD01H = 0;
  1365  03E8  019C               	clrf	28	;volatile
  1366  03E9  0008               	return
  1367  03EA                     __end_of_moded:	
  1368                           
  1369                           	psect	text8
  1370  03CD                     __ptext8:	
  1371 ;; *************** function _modec *****************
  1372 ;; Defined at:
  1373 ;;		line 58 in file "C:\mcuproject\scm\Ì¨µÆ\pwm.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;		None
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;		None
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  1    wreg      void 
  1380 ;; Registers used:
  1381 ;;		wreg, status,2
  1382 ;; Tracked objects:
  1383 ;;		On entry : 300/0
  1384 ;;		On exit  : 300/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1387 ;;      Params:         0       0       0       0
  1388 ;;      Locals:         0       0       0       0
  1389 ;;      Temps:          0       0       0       0
  1390 ;;      Totals:         0       0       0       0
  1391 ;;Total ram usage:        0 bytes
  1392 ;; Hardware stack levels used:    1
  1393 ;; Hardware stack levels required when called:    1
  1394 ;; This function calls:
  1395 ;;		Nothing
  1396 ;; This function is called by:
  1397 ;;		_procKey2
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401                           
  1402                           ;psect for function _modec
  1403  03CD                     _modec:	
  1404  03CD                     l2190:	
  1405                           ;incstack = 0
  1406                           ; Regs used in _modec: [wreg+status,2]
  1407                           
  1408                           
  1409                           ;pwm.c: 60: PWMD1L = 31;
  1410  03CD  301F               	movlw	31
  1411  03CE  0098               	movwf	24	;volatile
  1412                           
  1413                           ;pwm.c: 61: PWMCON0 = 0x23;
  1414  03CF  3023               	movlw	35
  1415  03D0  0093               	movwf	19	;volatile
  1416                           
  1417                           ;pwm.c: 62: PWMD01H = 0;
  1418  03D1  019C               	clrf	28	;volatile
  1419  03D2  0008               	return
  1420  03D3                     __end_of_modec:	
  1421                           
  1422                           	psect	text9
  1423  03EA                     __ptext9:	
  1424 ;; *************** function _modeb *****************
  1425 ;; Defined at:
  1426 ;;		line 52 in file "C:\mcuproject\scm\Ì¨µÆ\pwm.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;		None
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;		None
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  1    wreg      void 
  1433 ;; Registers used:
  1434 ;;		wreg
  1435 ;; Tracked objects:
  1436 ;;		On entry : 300/0
  1437 ;;		On exit  : 300/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1440 ;;      Params:         0       0       0       0
  1441 ;;      Locals:         0       0       0       0
  1442 ;;      Temps:          0       0       0       0
  1443 ;;      Totals:         0       0       0       0
  1444 ;;Total ram usage:        0 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:    1
  1447 ;; This function calls:
  1448 ;;		Nothing
  1449 ;; This function is called by:
  1450 ;;		_procKey2
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           
  1455                           ;psect for function _modeb
  1456  03EA                     _modeb:	
  1457  03EA                     l2186:	
  1458                           ;incstack = 0
  1459                           ; Regs used in _modeb: [wreg]
  1460                           
  1461                           
  1462                           ;pwm.c: 54: PWMCON0 = 0x21;
  1463  03EA  3021               	movlw	33
  1464  03EB  0093               	movwf	19	;volatile
  1465                           
  1466                           ;pwm.c: 55: PORTB&=~(1<<7);
  1467  03EC  1386               	bcf	6,7	;volatile
  1468  03ED  0008               	return
  1469  03EE                     __end_of_modeb:	
  1470                           
  1471                           	psect	text10
  1472  03EE                     __ptext10:	
  1473 ;; *************** function _modea *****************
  1474 ;; Defined at:
  1475 ;;		line 46 in file "C:\mcuproject\scm\Ì¨µÆ\pwm.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;		None
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;		None
  1480 ;; Return value:  Size  Location     Type
  1481 ;;                  1    wreg      void 
  1482 ;; Registers used:
  1483 ;;		wreg, status,2
  1484 ;; Tracked objects:
  1485 ;;		On entry : 300/0
  1486 ;;		On exit  : 300/0
  1487 ;;		Unchanged: 0/0
  1488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1489 ;;      Params:         0       0       0       0
  1490 ;;      Locals:         0       0       0       0
  1491 ;;      Temps:          0       0       0       0
  1492 ;;      Totals:         0       0       0       0
  1493 ;;Total ram usage:        0 bytes
  1494 ;; Hardware stack levels used:    1
  1495 ;; Hardware stack levels required when called:    1
  1496 ;; This function calls:
  1497 ;;		Nothing
  1498 ;; This function is called by:
  1499 ;;		_procKey2
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           
  1504                           ;psect for function _modea
  1505  03EE                     _modea:	
  1506  03EE                     l2182:	
  1507                           ;incstack = 0
  1508                           ; Regs used in _modea: [wreg+status,2]
  1509                           
  1510                           
  1511                           ;pwm.c: 48: PWMD1L = 125;
  1512  03EE  307D               	movlw	125
  1513  03EF  0098               	movwf	24	;volatile
  1514                           
  1515                           ;pwm.c: 49: PWMD01H = 0;
  1516  03F0  019C               	clrf	28	;volatile
  1517  03F1  0008               	return
  1518  03F2                     __end_of_modea:	
  1519                           
  1520                           	psect	text11
  1521  02F8                     __ptext11:	
  1522 ;; *************** function _procKey1 *****************
  1523 ;; Defined at:
  1524 ;;		line 104 in file "C:\mcuproject\scm\Ì¨µÆ\main.c"
  1525 ;; Parameters:    Size  Location     Type
  1526 ;;		None
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;		None
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  1    wreg      void 
  1531 ;; Registers used:
  1532 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 300/0
  1535 ;;		On exit  : 300/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1538 ;;      Params:         0       0       0       0
  1539 ;;      Locals:         0       0       0       0
  1540 ;;      Temps:          0       0       0       0
  1541 ;;      Totals:         0       0       0       0
  1542 ;;Total ram usage:        0 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:    2
  1545 ;; This function calls:
  1546 ;;		_mode1
  1547 ;;		_mode2
  1548 ;;		_mode3
  1549 ;;		_mode4
  1550 ;;		_mode5
  1551 ;; This function is called by:
  1552 ;;		_startPWM
  1553 ;;		_KeyServer
  1554 ;; This function uses a non-reentrant model
  1555 ;;
  1556                           
  1557                           
  1558                           ;psect for function _procKey1
  1559  02F8                     _procKey1:	
  1560                           
  1561                           ;main.c: 106: if(ONFlag == 0)
  1562                           
  1563                           ;incstack = 0
  1564                           ; Regs used in _procKey1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1565  02F8  1FF0               	btfss	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
  1566  02F9  0008               	return
  1567                           
  1568                           ;main.c: 108: pwmFlag = 1;
  1569  02FA  1770               	bsf	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
  1570                           
  1571                           ;main.c: 109: if(++pwm0Step > 5)
  1572  02FB  3006               	movlw	6
  1573  02FC  0ADC               	incf	_pwm0Step,f
  1574  02FD  025C               	subwf	_pwm0Step,w
  1575  02FE  1C03               	skipc
  1576  02FF  2B02               	goto	l2258
  1577                           
  1578                           ;main.c: 110: pwm0Step = 1;
  1579  0300  01DC               	clrf	_pwm0Step
  1580  0301  0ADC               	incf	_pwm0Step,f
  1581  0302                     l2258:	
  1582                           ;main.c: 127: break;
  1583                           
  1584  0302  085C               	movf	_pwm0Step,w
  1585                           
  1586                           ; Switch size 1, requested type "space"
  1587                           ; Number of cases is 5, Range of values is 1 to 5
  1588                           ; switch strategies available:
  1589                           ; Name         Instructions Cycles
  1590                           ; direct_byte           14     9 (fixed)
  1591                           ; simple_byte           16     9 (average)
  1592                           ; jumptable            263     9 (fixed)
  1593                           ;	Chosen strategy is direct_byte
  1594  0303  3EFF               	addlw	-1
  1595  0304  1C03               	skipc
  1596  0305  0008               	return
  1597  0306  0084               	movwf	4
  1598  0307  3005               	movlw	5
  1599  0308  0204               	subwf	4,w
  1600  0309  1803               	skipnc
  1601  030A  0008               	return
  1602  030B  3003               	movlw	high S2860
  1603  030C  008A               	movwf	10
  1604  030D  30DD               	movlw	low S2860
  1605  030E  0704               	addwf	4,w
  1606  030F  0082               	movwf	2
  1607  0310  0008               	return
  1608  0311                     l2246:	
  1609                           
  1610                           ;main.c: 114: mode1();
  1611  0311  2C02               	ljmp	l2162
  1612  0312                     l2248:	
  1613                           ;main.c: 115: break;
  1614                           
  1615                           
  1616                           ;main.c: 117: mode2();
  1617  0312  2BFE               	ljmp	l2166
  1618  0313                     l2250:	
  1619                           ;main.c: 118: break;
  1620                           
  1621                           
  1622                           ;main.c: 120: mode3();
  1623  0313  2BFA               	ljmp	l2170
  1624  0314                     l2252:	
  1625                           ;main.c: 121: break;
  1626                           
  1627                           
  1628                           ;main.c: 123: mode4();
  1629  0314  2BF6               	ljmp	l2174
  1630  0315                     l2254:	
  1631                           ;main.c: 124: break;
  1632                           
  1633                           
  1634                           ;main.c: 126: mode5();
  1635  0315  2BF2               	ljmp	l2178
  1636  0316                     __end_of_procKey1:	
  1637                           
  1638                           	psect	swtext2
  1639  03DD                     __pswtext2:	
  1640  03DD                     S2860:	
  1641  03DD  2B11               	ljmp	l2246
  1642  03DE  2B12               	ljmp	l2248
  1643  03DF  2B13               	ljmp	l2250
  1644  03E0  2B14               	ljmp	l2252
  1645  03E1  2B15               	ljmp	l2254
  1646                           
  1647                           	psect	text12
  1648  03F2                     __ptext12:	
  1649 ;; *************** function _mode5 *****************
  1650 ;; Defined at:
  1651 ;;		line 40 in file "C:\mcuproject\scm\Ì¨µÆ\pwm.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;		None
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;		None
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  1    wreg      void 
  1658 ;; Registers used:
  1659 ;;		wreg, status,2
  1660 ;; Tracked objects:
  1661 ;;		On entry : 300/0
  1662 ;;		On exit  : 300/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1665 ;;      Params:         0       0       0       0
  1666 ;;      Locals:         0       0       0       0
  1667 ;;      Temps:          0       0       0       0
  1668 ;;      Totals:         0       0       0       0
  1669 ;;Total ram usage:        0 bytes
  1670 ;; Hardware stack levels used:    1
  1671 ;; Hardware stack levels required when called:    1
  1672 ;; This function calls:
  1673 ;;		Nothing
  1674 ;; This function is called by:
  1675 ;;		_procKey1
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           
  1680                           ;psect for function _mode5
  1681  03F2                     _mode5:	
  1682  03F2                     l2178:	
  1683                           ;incstack = 0
  1684                           ; Regs used in _mode5: [wreg+status,2]
  1685                           
  1686                           
  1687                           ;pwm.c: 42: PWMD0L = 125;
  1688  03F2  307D               	movlw	125
  1689  03F3  0097               	movwf	23	;volatile
  1690                           
  1691                           ;pwm.c: 43: PWMD01H = 0;
  1692  03F4  019C               	clrf	28	;volatile
  1693  03F5  0008               	return
  1694  03F6                     __end_of_mode5:	
  1695                           
  1696                           	psect	text13
  1697  03F6                     __ptext13:	
  1698 ;; *************** function _mode4 *****************
  1699 ;; Defined at:
  1700 ;;		line 34 in file "C:\mcuproject\scm\Ì¨µÆ\pwm.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;		None
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;		None
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  1    wreg      void 
  1707 ;; Registers used:
  1708 ;;		wreg, status,2
  1709 ;; Tracked objects:
  1710 ;;		On entry : 300/0
  1711 ;;		On exit  : 300/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1714 ;;      Params:         0       0       0       0
  1715 ;;      Locals:         0       0       0       0
  1716 ;;      Temps:          0       0       0       0
  1717 ;;      Totals:         0       0       0       0
  1718 ;;Total ram usage:        0 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:    1
  1721 ;; This function calls:
  1722 ;;		Nothing
  1723 ;; This function is called by:
  1724 ;;		_procKey1
  1725 ;; This function uses a non-reentrant model
  1726 ;;
  1727                           
  1728                           
  1729                           ;psect for function _mode4
  1730  03F6                     _mode4:	
  1731  03F6                     l2174:	
  1732                           ;incstack = 0
  1733                           ; Regs used in _mode4: [wreg+status,2]
  1734                           
  1735                           
  1736                           ;pwm.c: 36: PWMD0L = 71;
  1737  03F6  3047               	movlw	71
  1738  03F7  0097               	movwf	23	;volatile
  1739                           
  1740                           ;pwm.c: 37: PWMD01H = 0;
  1741  03F8  019C               	clrf	28	;volatile
  1742  03F9  0008               	return
  1743  03FA                     __end_of_mode4:	
  1744                           
  1745                           	psect	text14
  1746  03FA                     __ptext14:	
  1747 ;; *************** function _mode3 *****************
  1748 ;; Defined at:
  1749 ;;		line 28 in file "C:\mcuproject\scm\Ì¨µÆ\pwm.c"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;		None
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;		None
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  1    wreg      void 
  1756 ;; Registers used:
  1757 ;;		wreg, status,2
  1758 ;; Tracked objects:
  1759 ;;		On entry : 300/0
  1760 ;;		On exit  : 300/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1763 ;;      Params:         0       0       0       0
  1764 ;;      Locals:         0       0       0       0
  1765 ;;      Temps:          0       0       0       0
  1766 ;;      Totals:         0       0       0       0
  1767 ;;Total ram usage:        0 bytes
  1768 ;; Hardware stack levels used:    1
  1769 ;; Hardware stack levels required when called:    1
  1770 ;; This function calls:
  1771 ;;		Nothing
  1772 ;; This function is called by:
  1773 ;;		_procKey1
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777                           
  1778                           ;psect for function _mode3
  1779  03FA                     _mode3:	
  1780  03FA                     l2170:	
  1781                           ;incstack = 0
  1782                           ; Regs used in _mode3: [wreg+status,2]
  1783                           
  1784                           
  1785                           ;pwm.c: 30: PWMD0L = 20;
  1786  03FA  3014               	movlw	20
  1787  03FB  0097               	movwf	23	;volatile
  1788                           
  1789                           ;pwm.c: 31: PWMD01H = 0;
  1790  03FC  019C               	clrf	28	;volatile
  1791  03FD  0008               	return
  1792  03FE                     __end_of_mode3:	
  1793                           
  1794                           	psect	text15
  1795  03FE                     __ptext15:	
  1796 ;; *************** function _mode2 *****************
  1797 ;; Defined at:
  1798 ;;		line 22 in file "C:\mcuproject\scm\Ì¨µÆ\pwm.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;		None
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;		None
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      void 
  1805 ;; Registers used:
  1806 ;;		wreg, status,2
  1807 ;; Tracked objects:
  1808 ;;		On entry : 300/0
  1809 ;;		On exit  : 300/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1812 ;;      Params:         0       0       0       0
  1813 ;;      Locals:         0       0       0       0
  1814 ;;      Temps:          0       0       0       0
  1815 ;;      Totals:         0       0       0       0
  1816 ;;Total ram usage:        0 bytes
  1817 ;; Hardware stack levels used:    1
  1818 ;; Hardware stack levels required when called:    1
  1819 ;; This function calls:
  1820 ;;		Nothing
  1821 ;; This function is called by:
  1822 ;;		_procKey1
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           
  1827                           ;psect for function _mode2
  1828  03FE                     _mode2:	
  1829  03FE                     l2166:	
  1830                           ;incstack = 0
  1831                           ; Regs used in _mode2: [wreg+status,2]
  1832                           
  1833                           
  1834                           ;pwm.c: 24: PWMD0L = 12;
  1835  03FE  300C               	movlw	12
  1836  03FF  0097               	movwf	23	;volatile
  1837                           
  1838                           ;pwm.c: 25: PWMD01H = 0;
  1839  0400  019C               	clrf	28	;volatile
  1840  0401  0008               	return
  1841  0402                     __end_of_mode2:	
  1842                           
  1843                           	psect	text16
  1844  0402                     __ptext16:	
  1845 ;; *************** function _mode1 *****************
  1846 ;; Defined at:
  1847 ;;		line 16 in file "C:\mcuproject\scm\Ì¨µÆ\pwm.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  1    wreg      void 
  1854 ;; Registers used:
  1855 ;;		wreg, status,2
  1856 ;; Tracked objects:
  1857 ;;		On entry : 300/0
  1858 ;;		On exit  : 300/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1861 ;;      Params:         0       0       0       0
  1862 ;;      Locals:         0       0       0       0
  1863 ;;      Temps:          0       0       0       0
  1864 ;;      Totals:         0       0       0       0
  1865 ;;Total ram usage:        0 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    1
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		_procKey1
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           
  1876                           ;psect for function _mode1
  1877  0402                     _mode1:	
  1878  0402                     l2162:	
  1879                           ;incstack = 0
  1880                           ; Regs used in _mode1: [wreg+status,2]
  1881                           
  1882                           
  1883                           ;pwm.c: 18: PWMD0L = 1;
  1884  0402  3001               	movlw	1
  1885  0403  0097               	movwf	23	;volatile
  1886                           
  1887                           ;pwm.c: 19: PWMD01H = 0;
  1888  0404  019C               	clrf	28	;volatile
  1889  0405  0008               	return
  1890  0406                     __end_of_mode1:	
  1891                           
  1892                           	psect	text17
  1893  02BA                     __ptext17:	
  1894 ;; *************** function _Init_System *****************
  1895 ;; Defined at:
  1896 ;;		line 27 in file "C:\mcuproject\scm\Ì¨µÆ\main.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      void 
  1903 ;; Registers used:
  1904 ;;		wreg, status,2
  1905 ;; Tracked objects:
  1906 ;;		On entry : B00/0
  1907 ;;		On exit  : 300/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1910 ;;      Params:         0       0       0       0
  1911 ;;      Locals:         0       0       0       0
  1912 ;;      Temps:          0       0       0       0
  1913 ;;      Totals:         0       0       0       0
  1914 ;;Total ram usage:        0 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    1
  1917 ;; This function calls:
  1918 ;;		Nothing
  1919 ;; This function is called by:
  1920 ;;		_main
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           
  1925                           ;psect for function _Init_System
  1926  02BA                     _Init_System:	
  1927                           
  1928                           ;incstack = 0
  1929                           ; Regs used in _Init_System: [wreg+status,2]
  1930  02BA  0000               	nop	;# 
  1931  02BB  0064               	clrwdt	;# 
  1932                           
  1933                           ;main.c: 31: INTCON = 0;
  1934  02BC  018B               	clrf	11	;volatile
  1935                           
  1936                           ;main.c: 32: OSCCON = 0X71;
  1937  02BD  3071               	movlw	113
  1938  02BE  1683               	bsf	3,5	;RP0=1, select bank1
  1939  02BF  1303               	bcf	3,6	;RP1=0, select bank1
  1940  02C0  0088               	movwf	8	;volatile
  1941                           
  1942                           ;main.c: 33: OPTION_REG = 0;
  1943  02C1  0181               	clrf	1	;volatile
  1944                           
  1945                           ;main.c: 37: WPUB = 0x00;
  1946  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  1947  02C3  0188               	clrf	8	;volatile
  1948                           
  1949                           ;main.c: 38: WPDB = 0x00;
  1950  02C4  1683               	bsf	3,5	;RP0=1, select bank1
  1951  02C5  0187               	clrf	7	;volatile
  1952                           
  1953                           ;main.c: 39: WPUA = 0x00;
  1954  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  1955  02C7  0187               	clrf	7	;volatile
  1956                           
  1957                           ;main.c: 41: PIE1 = 2;
  1958  02C8  3002               	movlw	2
  1959  02C9  008D               	movwf	13	;volatile
  1960                           
  1961                           ;main.c: 42: PR2 = 250;
  1962  02CA  30FA               	movlw	250
  1963  02CB  1683               	bsf	3,5	;RP0=1, select bank1
  1964  02CC  0091               	movwf	17	;volatile
  1965                           
  1966                           ;main.c: 43: T2CON = 4;
  1967  02CD  3004               	movlw	4
  1968  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  1969  02CF  0092               	movwf	18	;volatile
  1970                           
  1971                           ;main.c: 44: TRISA = 0x00;
  1972  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  1973  02D1  0185               	clrf	5	;volatile
  1974                           
  1975                           ;main.c: 45: TRISB = 0x07;
  1976  02D2  3007               	movlw	7
  1977  02D3  0086               	movwf	6	;volatile
  1978                           
  1979                           ;main.c: 46: PORTB = 0x00;
  1980  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  1981  02D5  0186               	clrf	6	;volatile
  1982                           
  1983                           ;main.c: 47: PORTA = 0x00;
  1984  02D6  0185               	clrf	5	;volatile
  1985                           
  1986                           ;main.c: 48: INTCON = 0XC0;
  1987  02D7  30C0               	movlw	192
  1988  02D8  008B               	movwf	11	;volatile
  1989  02D9  0008               	return
  1990  02DA                     __end_of_Init_System:	
  1991                           
  1992                           	psect	text18
  1993  0271                     __ptext18:	
  1994 ;; *************** function _CheckTouchKey *****************
  1995 ;; Defined at:
  1996 ;;		line 495 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;		None
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      void 
  2003 ;; Registers used:
  2004 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 300/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2010 ;;      Params:         0       0       0       0
  2011 ;;      Locals:         0       0       0       0
  2012 ;;      Temps:          0       0       0       0
  2013 ;;      Totals:         0       0       0       0
  2014 ;;Total ram usage:        0 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    5
  2017 ;; This function calls:
  2018 ;;		_CheckKeyOldValue
  2019 ;;		_CheckOnceResult
  2020 ;;		_CheckValidTime
  2021 ;;		_ClearResSum
  2022 ;;		_GetTouchKeyValue
  2023 ;;		_KeyStopClear
  2024 ;;		_TurnKeyFlags
  2025 ;; This function is called by:
  2026 ;;		_main
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           
  2031                           ;psect for function _CheckTouchKey
  2032  0271                     _CheckTouchKey:	
  2033                           
  2034                           ;CheckTouchKey.c: 497: if(!b_kover)
  2035                           
  2036                           ;incstack = 0
  2037                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2038  0271  19F0               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  2039  0272  2A7D               	goto	l1190
  2040                           
  2041                           ;CheckTouchKey.c: 498: {
  2042                           ;CheckTouchKey.c: 500: GetTouchKeyValue();
  2043  0273  2242               	fcall	_GetTouchKeyValue
  2044                           
  2045                           ;CheckTouchKey.c: 501: if(++KeyCounter >= 8)
  2046  0274  3008               	movlw	8
  2047  0275  1283               	bcf	3,5	;RP0=0, select bank0
  2048  0276  0AC8               	incf	_KeyCounter,f
  2049  0277  0248               	subwf	_KeyCounter,w
  2050  0278  1C03               	skipc
  2051  0279  2A96               	goto	l2790
  2052                           
  2053                           ;CheckTouchKey.c: 502: {
  2054                           ;CheckTouchKey.c: 503: KeyCounter = 0;
  2055  027A  01C8               	clrf	_KeyCounter
  2056                           
  2057                           ;CheckTouchKey.c: 504: b_kover = 1;
  2058  027B  15F0               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  2059  027C  2A96               	goto	l2790
  2060  027D                     l1190:	
  2061                           
  2062                           ;CheckTouchKey.c: 507: else if(!b_kover1)
  2063  027D  1970               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  2064  027E  2A92               	goto	l2784
  2065                           
  2066                           ;CheckTouchKey.c: 508: {
  2067                           ;CheckTouchKey.c: 510: CheckOnceResult();
  2068  027F  2018               	fcall	_CheckOnceResult
  2069                           
  2070                           ;CheckTouchKey.c: 513: TurnKeyFlags();
  2071  0280  2213               	fcall	_TurnKeyFlags
  2072                           
  2073                           ;CheckTouchKey.c: 514: b_kover1 = 1;
  2074  0281  1570               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  2075                           
  2076                           ;CheckTouchKey.c: 520: if(b_kerr || KeyCounter > KeyValidNumber)
  2077  0282  1870               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  2078  0283  2A8A               	goto	l2774
  2079  0284  3002               	movlw	2
  2080  0285  1283               	bcf	3,5	;RP0=0, select bank0
  2081  0286  1303               	bcf	3,6	;RP1=0, select bank0
  2082  0287  0248               	subwf	_KeyCounter,w
  2083  0288  1C03               	skipc
  2084  0289  2A8E               	goto	l2782
  2085  028A                     l2774:	
  2086                           
  2087                           ;CheckTouchKey.c: 521: {
  2088                           ;CheckTouchKey.c: 522: KeyStopClear();
  2089  028A  232F               	fcall	_KeyStopClear
  2090                           
  2091                           ;CheckTouchKey.c: 523: b_kerr = 0;
  2092  028B  1070               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  2093                           
  2094                           ;CheckTouchKey.c: 524: b_kover = 0;
  2095  028C  11F0               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  2096                           
  2097                           ;CheckTouchKey.c: 525: b_kover1 = 0;
  2098  028D  1170               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  2099  028E                     l2782:	
  2100                           
  2101                           ;CheckTouchKey.c: 526: }
  2102                           ;CheckTouchKey.c: 527: KeyCounter = 0;
  2103  028E  1283               	bcf	3,5	;RP0=0, select bank0
  2104  028F  1303               	bcf	3,6	;RP1=0, select bank0
  2105  0290  01C8               	clrf	_KeyCounter
  2106                           
  2107                           ;CheckTouchKey.c: 528: }
  2108  0291  2A96               	goto	l2790
  2109  0292                     l2784:	
  2110                           
  2111                           ;CheckTouchKey.c: 529: else
  2112                           ;CheckTouchKey.c: 530: {
  2113                           ;CheckTouchKey.c: 532: CheckKeyOldValue();
  2114  0292  2106               	fcall	_CheckKeyOldValue
  2115                           
  2116                           ;CheckTouchKey.c: 534: ClearResSum();
  2117  0293  238F               	fcall	_ClearResSum
  2118                           
  2119                           ;CheckTouchKey.c: 536: b_kover = 0;
  2120  0294  11F0               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  2121                           
  2122                           ;CheckTouchKey.c: 537: b_kover1 = 0;
  2123  0295  1170               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  2124  0296                     l2790:	
  2125                           
  2126                           ;CheckTouchKey.c: 538: }
  2127                           ;CheckTouchKey.c: 540: CheckValidTime();
  2128  0296  2B6B               	ljmp	l2472
  2129  0297                     __end_of_CheckTouchKey:	
  2130                           
  2131                           	psect	text19
  2132  0213                     __ptext19:	
  2133 ;; *************** function _TurnKeyFlags *****************
  2134 ;; Defined at:
  2135 ;;		line 382 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;		None
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;		None
  2140 ;; Return value:  Size  Location     Type
  2141 ;;                  1    wreg      void 
  2142 ;; Registers used:
  2143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2144 ;; Tracked objects:
  2145 ;;		On entry : B00/0
  2146 ;;		On exit  : 0/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2149 ;;      Params:         0       0       0       0
  2150 ;;      Locals:         0       0       0       0
  2151 ;;      Temps:          0       0       0       0
  2152 ;;      Totals:         0       0       0       0
  2153 ;;Total ram usage:        0 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:    4
  2156 ;; This function calls:
  2157 ;;		_KeyClearIn
  2158 ;; This function is called by:
  2159 ;;		_CheckTouchKey
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           
  2164                           ;psect for function _TurnKeyFlags
  2165  0213                     _TurnKeyFlags:	
  2166                           
  2167                           ;CheckTouchKey.c: 384: static unsigned char KeyHaveTimes = 0;
  2168                           ;CheckTouchKey.c: 385: static unsigned char KeyNoTimes = 0;
  2169                           ;CheckTouchKey.c: 387: if(KeyData[0] | KeyData[1])
  2170                           
  2171                           ;incstack = 0
  2172                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2173  0213  0837               	movf	_KeyData+1,w	;volatile
  2174  0214  0436               	iorwf	_KeyData,w	;volatile
  2175  0215  1903               	btfsc	3,2
  2176  0216  2A35               	goto	l2464
  2177                           
  2178                           ;CheckTouchKey.c: 388: {
  2179                           ;CheckTouchKey.c: 389: KeyNoTimes = 0;
  2180  0217  01C4               	clrf	TurnKeyFlags@KeyNoTimes
  2181                           
  2182                           ;CheckTouchKey.c: 391: if(KeyData[0] == KeyOldData[0] && KeyData[1] == KeyOldData[1])
  2183  0218  0836               	movf	_KeyData,w	;volatile
  2184  0219  0638               	xorwf	_KeyOldData,w	;volatile
  2185  021A  1D03               	skipz
  2186  021B  2A2E               	goto	l1171
  2187  021C  0837               	movf	_KeyData+1,w	;volatile
  2188  021D  0639               	xorwf	_KeyOldData+1,w	;volatile
  2189  021E  1D03               	skipz
  2190  021F  2A2E               	goto	l1171
  2191  0220  3002               	movlw	2
  2192  0221  0AC5               	incf	TurnKeyFlags@KeyHaveTimes,f
  2193  0222  0245               	subwf	TurnKeyFlags@KeyHaveTimes,w
  2194  0223  1C03               	skipc
  2195  0224  0008               	return
  2196                           
  2197                           ;CheckTouchKey.c: 394: {
  2198                           ;CheckTouchKey.c: 395: KeyHaveTimes = 0;
  2199  0225  01C5               	clrf	TurnKeyFlags@KeyHaveTimes
  2200                           
  2201                           ;CheckTouchKey.c: 396: KeyFlag[0] = KeyData[0];
  2202  0226  0836               	movf	_KeyData,w	;volatile
  2203  0227  00C2               	movwf	_KeyFlag	;volatile
  2204                           
  2205                           ;CheckTouchKey.c: 397: KeyFlag[1] = KeyData[1];
  2206  0228  0837               	movf	_KeyData+1,w	;volatile
  2207  0229  00C3               	movwf	_KeyFlag+1	;volatile
  2208                           
  2209                           ;CheckTouchKey.c: 400: {
  2210                           ;CheckTouchKey.c: 401: if(!b_kclr)
  2211  022A  18F0               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2212  022B  0008               	return
  2213                           
  2214                           ;CheckTouchKey.c: 402: {
  2215                           ;CheckTouchKey.c: 403: b_kclr = 1;
  2216  022C  14F0               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2217                           
  2218                           ;CheckTouchKey.c: 404: KeyClearIn();
  2219  022D  2B9E               	ljmp	l2202
  2220  022E                     l1171:	
  2221                           
  2222                           ;CheckTouchKey.c: 409: else
  2223                           ;CheckTouchKey.c: 410: {
  2224                           ;CheckTouchKey.c: 411: b_kclr = 0;
  2225  022E  10F0               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2226                           
  2227                           ;CheckTouchKey.c: 412: KeyOldData[0] = KeyData[0];
  2228  022F  0836               	movf	_KeyData,w	;volatile
  2229  0230  00B8               	movwf	_KeyOldData	;volatile
  2230                           
  2231                           ;CheckTouchKey.c: 413: KeyOldData[1] = KeyData[1];
  2232  0231  0837               	movf	_KeyData+1,w	;volatile
  2233  0232  00B9               	movwf	_KeyOldData+1	;volatile
  2234                           
  2235                           ;CheckTouchKey.c: 414: KeyHaveTimes = 0;
  2236  0233  01C5               	clrf	TurnKeyFlags@KeyHaveTimes
  2237                           
  2238                           ;CheckTouchKey.c: 415: }
  2239                           ;CheckTouchKey.c: 416: }
  2240  0234  0008               	return
  2241  0235                     l2464:	
  2242                           
  2243                           ;CheckTouchKey.c: 417: else
  2244                           ;CheckTouchKey.c: 418: {
  2245                           ;CheckTouchKey.c: 419: KeyHaveTimes = 0;
  2246  0235  01C5               	clrf	TurnKeyFlags@KeyHaveTimes
  2247                           
  2248                           ;CheckTouchKey.c: 420: KeyOldData[0] = 0;
  2249  0236  01B8               	clrf	_KeyOldData	;volatile
  2250                           
  2251                           ;CheckTouchKey.c: 421: KeyOldData[1] = 0;
  2252  0237  01B9               	clrf	_KeyOldData+1	;volatile
  2253                           
  2254                           ;CheckTouchKey.c: 423: if(++KeyNoTimes >=2)
  2255  0238  3002               	movlw	2
  2256  0239  0AC4               	incf	TurnKeyFlags@KeyNoTimes,f
  2257  023A  0244               	subwf	TurnKeyFlags@KeyNoTimes,w
  2258  023B  1C03               	skipc
  2259  023C  0008               	return
  2260                           
  2261                           ;CheckTouchKey.c: 424: {
  2262                           ;CheckTouchKey.c: 425: KeyNoTimes = 0;
  2263  023D  01C4               	clrf	TurnKeyFlags@KeyNoTimes
  2264                           
  2265                           ;CheckTouchKey.c: 426: KeyFlag[0] = 0;
  2266  023E  01C2               	clrf	_KeyFlag	;volatile
  2267                           
  2268                           ;CheckTouchKey.c: 427: KeyFlag[1] = 0;
  2269  023F  01C3               	clrf	_KeyFlag+1	;volatile
  2270                           
  2271                           ;CheckTouchKey.c: 429: b_kclr = 0;
  2272  0240  10F0               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2273  0241  0008               	return
  2274  0242                     __end_of_TurnKeyFlags:	
  2275                           
  2276                           	psect	text20
  2277  039E                     __ptext20:	
  2278 ;; *************** function _KeyClearIn *****************
  2279 ;; Defined at:
  2280 ;;		line 88 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;		None
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;  cnt             1    4[COMMON] unsigned char 
  2285 ;; Return value:  Size  Location     Type
  2286 ;;                  1    wreg      void 
  2287 ;; Registers used:
  2288 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2289 ;; Tracked objects:
  2290 ;;		On entry : B00/0
  2291 ;;		On exit  : 0/0
  2292 ;;		Unchanged: 0/0
  2293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2294 ;;      Params:         0       0       0       0
  2295 ;;      Locals:         1       0       0       0
  2296 ;;      Temps:          0       0       0       0
  2297 ;;      Totals:         1       0       0       0
  2298 ;;Total ram usage:        1 bytes
  2299 ;; Hardware stack levels used:    1
  2300 ;; Hardware stack levels required when called:    3
  2301 ;; This function calls:
  2302 ;;		_KeyClearOne
  2303 ;;		_KeyIsIn
  2304 ;; This function is called by:
  2305 ;;		_TurnKeyFlags
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           
  2310                           ;psect for function _KeyClearIn
  2311  039E                     _KeyClearIn:	
  2312  039E                     l2202:	
  2313                           ;incstack = 0
  2314                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2315                           
  2316                           
  2317                           ;CheckTouchKey.c: 90: unsigned char cnt;
  2318                           ;CheckTouchKey.c: 91: for(cnt=0;cnt < KeyTotalNumber;cnt++)
  2319  039E  01F6               	clrf	KeyClearIn@cnt
  2320  039F                     l2208:	
  2321                           
  2322                           ;CheckTouchKey.c: 92: {
  2323                           ;CheckTouchKey.c: 93: if(!KeyIsIn(cnt))
  2324  039F  0876               	movf	KeyClearIn@cnt,w
  2325  03A0  237D               	fcall	_KeyIsIn
  2326  03A1  3A00               	xorlw	0
  2327  03A2  1D03               	skipz
  2328  03A3  2BA6               	goto	l2212
  2329                           
  2330                           ;CheckTouchKey.c: 94: {
  2331                           ;CheckTouchKey.c: 95: KeyClearOne(cnt);
  2332  03A4  0876               	movf	KeyClearIn@cnt,w
  2333  03A5  2316               	fcall	_KeyClearOne
  2334  03A6                     l2212:	
  2335  03A6  3002               	movlw	2
  2336  03A7  0AF6               	incf	KeyClearIn@cnt,f
  2337  03A8  0276               	subwf	KeyClearIn@cnt,w
  2338  03A9  1803               	btfsc	3,0
  2339  03AA  0008               	return
  2340  03AB  2B9F               	goto	l2208
  2341  03AC                     __end_of_KeyClearIn:	
  2342                           
  2343                           	psect	text21
  2344  032F                     __ptext21:	
  2345 ;; *************** function _KeyStopClear *****************
  2346 ;; Defined at:
  2347 ;;		line 107 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;		None
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;  i               1    3[COMMON] unsigned char 
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 800/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2361 ;;      Params:         0       0       0       0
  2362 ;;      Locals:         1       0       0       0
  2363 ;;      Temps:          0       0       0       0
  2364 ;;      Totals:         1       0       0       0
  2365 ;;Total ram usage:        1 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; Hardware stack levels required when called:    2
  2368 ;; This function calls:
  2369 ;;		_KeyClearOne
  2370 ;; This function is called by:
  2371 ;;		_CheckTouchKey
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           
  2376                           ;psect for function _KeyStopClear
  2377  032F                     _KeyStopClear:	
  2378                           
  2379                           ;CheckTouchKey.c: 109: unsigned char i;
  2380                           ;CheckTouchKey.c: 110: KeyFlag[0] = 0;
  2381                           
  2382                           ;incstack = 0
  2383                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2384  032F  1283               	bcf	3,5	;RP0=0, select bank0
  2385  0330  1303               	bcf	3,6	;RP1=0, select bank0
  2386  0331  01C2               	clrf	_KeyFlag	;volatile
  2387                           
  2388                           ;CheckTouchKey.c: 111: KeyFlag[1] = 0;
  2389  0332  01C3               	clrf	_KeyFlag+1	;volatile
  2390                           
  2391                           ;CheckTouchKey.c: 112: for(i = 0; i < KeyTotalNumber; i++)
  2392  0333  01F5               	clrf	KeyStopClear@i
  2393  0334                     l2304:	
  2394                           
  2395                           ;CheckTouchKey.c: 113: {
  2396                           ;CheckTouchKey.c: 114: KeyResSum[i] = 0;
  2397  0334  1003               	clrc
  2398  0335  0D75               	rlf	KeyStopClear@i,w
  2399  0336  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2400  0337  0084               	movwf	4
  2401  0338  1383               	bcf	3,7	;select IRP bank0
  2402  0339  0180               	clrf	0
  2403  033A  0A84               	incf	4,f
  2404  033B  0180               	clrf	0
  2405                           
  2406                           ;CheckTouchKey.c: 115: KeyClearOne(i);
  2407  033C  0875               	movf	KeyStopClear@i,w
  2408  033D  2316               	fcall	_KeyClearOne
  2409  033E  3002               	movlw	2
  2410  033F  0AF5               	incf	KeyStopClear@i,f
  2411  0340  0275               	subwf	KeyStopClear@i,w
  2412  0341  1803               	btfsc	3,0
  2413  0342  0008               	return
  2414  0343  2B34               	goto	l2304
  2415  0344                     __end_of_KeyStopClear:	
  2416                           
  2417                           	psect	text22
  2418  0242                     __ptext22:	
  2419 ;; *************** function _GetTouchKeyValue *****************
  2420 ;; Defined at:
  2421 ;;		line 180 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2422 ;; Parameters:    Size  Location     Type
  2423 ;;		None
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;  cnt             1    4[COMMON] unsigned char 
  2426 ;;  temp            1    3[COMMON] unsigned char 
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      void 
  2429 ;; Registers used:
  2430 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : A00/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2436 ;;      Params:         0       0       0       0
  2437 ;;      Locals:         2       0       0       0
  2438 ;;      Temps:          0       0       0       0
  2439 ;;      Totals:         2       0       0       0
  2440 ;;Total ram usage:        2 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    2
  2443 ;; This function calls:
  2444 ;;		_ClearResSum
  2445 ;; This function is called by:
  2446 ;;		_CheckTouchKey
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           
  2451                           ;psect for function _GetTouchKeyValue
  2452  0242                     _GetTouchKeyValue:	
  2453                           
  2454                           ;CheckTouchKey.c: 182: unsigned char cnt = 0,temp;
  2455                           
  2456                           ;incstack = 0
  2457                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2458  0242  01F6               	clrf	GetTouchKeyValue@cnt
  2459  0243                     l1111:	
  2460                           ;CheckTouchKey.c: 184: do
  2461                           
  2462                           
  2463                           ;CheckTouchKey.c: 185: {
  2464                           ;CheckTouchKey.c: 186: KEYCON0 = 0;
  2465  0243  1683               	bsf	3,5	;RP0=1, select bank1
  2466  0244  1303               	bcf	3,6	;RP1=0, select bank1
  2467  0245  0192               	clrf	18	;volatile
  2468                           
  2469                           ;CheckTouchKey.c: 187: KEYCON1 = 0;
  2470  0246  0193               	clrf	19	;volatile
  2471                           
  2472                           ;CheckTouchKey.c: 194: KEYCON0 = Table_KeyCap[cnt];
  2473  0247  0876               	movf	GetTouchKeyValue@cnt,w
  2474  0248  3E0B               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  2475  0249  0084               	movwf	4
  2476  024A  2344               	fcall	stringdir
  2477  024B  0092               	movwf	18	;volatile
  2478                           
  2479                           ;CheckTouchKey.c: 195: KEYCON1 = Table_KeyChannel[cnt];
  2480  024C  0876               	movf	GetTouchKeyValue@cnt,w
  2481  024D  3E0D               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  2482  024E  0084               	movwf	4
  2483  024F  2344               	fcall	stringdir
  2484  0250  0093               	movwf	19	;volatile
  2485                           
  2486                           ;CheckTouchKey.c: 196: KEYCON0 |= 0x1;
  2487  0251  1412               	bsf	18,0	;volatile
  2488                           
  2489                           ;CheckTouchKey.c: 198: temp = 0;
  2490  0252  01F5               	clrf	GetTouchKeyValue@temp
  2491  0253                     l1112:	
  2492                           ;CheckTouchKey.c: 199: while(!(KEYCON0&0x80))
  2493                           
  2494  0253  1B92               	btfsc	18,7	;volatile
  2495  0254  2A5B               	goto	l2326
  2496                           
  2497                           ;CheckTouchKey.c: 200: {
  2498                           ;CheckTouchKey.c: 201: if(0 == (--temp))
  2499  0255  0BF5               	decfsz	GetTouchKeyValue@temp,f
  2500  0256  2A53               	goto	l1112
  2501                           
  2502                           ;CheckTouchKey.c: 202: {
  2503                           ;CheckTouchKey.c: 203: KeyCounter = 255;
  2504  0257  30FF               	movlw	255
  2505  0258  1283               	bcf	3,5	;RP0=0, select bank0
  2506  0259  00C8               	movwf	_KeyCounter
  2507                           
  2508                           ;CheckTouchKey.c: 204: ClearResSum();
  2509  025A  2B8F               	ljmp	l2216
  2510  025B                     l2326:	
  2511                           
  2512                           ;CheckTouchKey.c: 206: }
  2513                           ;CheckTouchKey.c: 207: }
  2514                           ;CheckTouchKey.c: 209: KeyResSum[cnt] += (unsigned int)((KEYDATAH<<8) | KEYDATAL);
  2515  025B  1003               	clrc
  2516  025C  0D76               	rlf	GetTouchKeyValue@cnt,w
  2517  025D  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2518  025E  0084               	movwf	4
  2519  025F  0814               	movf	20,w	;volatile
  2520  0260  1383               	bcf	3,7	;select IRP bank0
  2521  0261  0780               	addwf	0,f
  2522  0262  0F84               	incfsz	4,f
  2523  0263  0800               	movf	0,w
  2524  0264  1803               	skipnc
  2525  0265  0A00               	incf	0,w
  2526  0266  00FF               	movwf	127
  2527  0267  0815               	movf	21,w	;volatile
  2528  0268  077F               	addwf	127,w
  2529  0269  0080               	movwf	0
  2530  026A  3002               	movlw	2
  2531  026B  0384               	decf	4,f
  2532  026C  0AF6               	incf	GetTouchKeyValue@cnt,f
  2533  026D  0276               	subwf	GetTouchKeyValue@cnt,w
  2534  026E  1803               	btfsc	3,0
  2535  026F  0008               	return
  2536  0270  2A43               	goto	l1111
  2537  0271                     __end_of_GetTouchKeyValue:	
  2538                           
  2539                           	psect	text23
  2540  038F                     __ptext23:	
  2541 ;; *************** function _ClearResSum *****************
  2542 ;; Defined at:
  2543 ;;		line 126 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;		None
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;  cnt             1    2[COMMON] unsigned char 
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  1    wreg      void 
  2550 ;; Registers used:
  2551 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2552 ;; Tracked objects:
  2553 ;;		On entry : 300/0
  2554 ;;		On exit  : B00/0
  2555 ;;		Unchanged: 300/0
  2556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2557 ;;      Params:         0       0       0       0
  2558 ;;      Locals:         1       0       0       0
  2559 ;;      Temps:          0       0       0       0
  2560 ;;      Totals:         1       0       0       0
  2561 ;;Total ram usage:        1 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; Hardware stack levels required when called:    1
  2564 ;; This function calls:
  2565 ;;		Nothing
  2566 ;; This function is called by:
  2567 ;;		_GetTouchKeyValue
  2568 ;;		_CheckTouchKey
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           
  2573                           ;psect for function _ClearResSum
  2574  038F                     _ClearResSum:	
  2575  038F                     l2216:	
  2576                           ;incstack = 0
  2577                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  2578                           
  2579                           
  2580                           ;CheckTouchKey.c: 128: unsigned char cnt = 0;
  2581  038F  01F4               	clrf	ClearResSum@cnt
  2582  0390                     l2218:	
  2583                           
  2584                           ;CheckTouchKey.c: 130: {
  2585                           ;CheckTouchKey.c: 131: KeyResSum[cnt] = 0;
  2586  0390  1003               	clrc
  2587  0391  0D74               	rlf	ClearResSum@cnt,w
  2588  0392  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2589  0393  0084               	movwf	4
  2590  0394  3002               	movlw	2
  2591  0395  1383               	bcf	3,7	;select IRP bank0
  2592  0396  0180               	clrf	0
  2593  0397  0A84               	incf	4,f
  2594  0398  0180               	clrf	0
  2595  0399  0AF4               	incf	ClearResSum@cnt,f
  2596  039A  0274               	subwf	ClearResSum@cnt,w
  2597  039B  1803               	btfsc	3,0
  2598  039C  0008               	return
  2599  039D  2B90               	goto	l2218
  2600  039E                     __end_of_ClearResSum:	
  2601                           
  2602                           	psect	text24
  2603  036B                     __ptext24:	
  2604 ;; *************** function _CheckValidTime *****************
  2605 ;; Defined at:
  2606 ;;		line 467 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;		None
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;		None
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  1    wreg      void 
  2613 ;; Registers used:
  2614 ;;		wreg, status,2, status,0
  2615 ;; Tracked objects:
  2616 ;;		On entry : 300/0
  2617 ;;		On exit  : 300/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2620 ;;      Params:         0       0       0       0
  2621 ;;      Locals:         0       0       0       0
  2622 ;;      Temps:          0       0       0       0
  2623 ;;      Totals:         0       0       0       0
  2624 ;;Total ram usage:        0 bytes
  2625 ;; Hardware stack levels used:    1
  2626 ;; Hardware stack levels required when called:    1
  2627 ;; This function calls:
  2628 ;;		Nothing
  2629 ;; This function is called by:
  2630 ;;		_CheckTouchKey
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           
  2635                           ;psect for function _CheckValidTime
  2636  036B                     _CheckValidTime:	
  2637  036B                     l2472:	
  2638                           ;incstack = 0
  2639                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  2640                           
  2641                           
  2642                           ;CheckTouchKey.c: 472: {
  2643                           ;CheckTouchKey.c: 473: if(KeyFlag[0] | KeyFlag[1])
  2644  036B  0843               	movf	_KeyFlag+1,w	;volatile
  2645  036C  0442               	iorwf	_KeyFlag,w	;volatile
  2646  036D  1903               	btfsc	3,2
  2647  036E  2B7A               	goto	l2478
  2648  036F  0AB4               	incf	CheckValidTime@validtime,f
  2649  0370  1903               	skipnz
  2650  0371  0AB5               	incf	CheckValidTime@validtime+1,f
  2651  0372  303A               	movlw	58
  2652  0373  0235               	subwf	CheckValidTime@validtime+1,w
  2653  0374  3098               	movlw	152
  2654  0375  1903               	skipnz
  2655  0376  0234               	subwf	CheckValidTime@validtime,w
  2656  0377  1C03               	skipc
  2657  0378  0008               	return
  2658                           
  2659                           ;CheckTouchKey.c: 476: {
  2660                           ;CheckTouchKey.c: 477: b_kerr = 1;
  2661  0379  1470               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  2662  037A                     l2478:	
  2663                           
  2664                           ;CheckTouchKey.c: 478: validtime = 0;
  2665  037A  01B4               	clrf	CheckValidTime@validtime
  2666  037B  01B5               	clrf	CheckValidTime@validtime+1
  2667  037C  0008               	return
  2668  037D                     __end_of_CheckValidTime:	
  2669                           
  2670                           	psect	text25
  2671  0018                     __ptext25:	
  2672 ;; *************** function _CheckOnceResult *****************
  2673 ;; Defined at:
  2674 ;;		line 221 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;		None
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;  KeyResTemp      2   10[BANK0 ] unsigned int 
  2679 ;;  KeyValue        2    7[BANK0 ] unsigned int 
  2680 ;;  OldValue        2    4[BANK0 ] unsigned int 
  2681 ;;  cnt             1   12[BANK0 ] unsigned char 
  2682 ;;  KeyDown         1    9[BANK0 ] unsigned char 
  2683 ;;  flag            1    6[BANK0 ] unsigned char 
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  1    wreg      void 
  2686 ;; Registers used:
  2687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : B00/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2693 ;;      Params:         0       0       0       0
  2694 ;;      Locals:         0       9       0       0
  2695 ;;      Temps:          0       4       0       0
  2696 ;;      Totals:         0      13       0       0
  2697 ;;Total ram usage:       13 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; Hardware stack levels required when called:    3
  2700 ;; This function calls:
  2701 ;;		_KeyClearOne
  2702 ;;		_KeyHave
  2703 ;;		_KeyIsIn
  2704 ;; This function is called by:
  2705 ;;		_CheckTouchKey
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           
  2710                           ;psect for function _CheckOnceResult
  2711  0018                     _CheckOnceResult:	
  2712                           
  2713                           ;CheckTouchKey.c: 223: unsigned char cnt = 0;
  2714                           
  2715                           ;incstack = 0
  2716                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2717  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2718  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2719  001A  01DA               	clrf	CheckOnceResult@cnt
  2720                           
  2721                           ;CheckTouchKey.c: 224: unsigned char KeyDown;
  2722                           ;CheckTouchKey.c: 225: unsigned char flag;
  2723                           ;CheckTouchKey.c: 227: unsigned int KeyResTemp;
  2724                           ;CheckTouchKey.c: 228: unsigned int KeyValue;
  2725                           ;CheckTouchKey.c: 229: unsigned int OldValue;
  2726                           ;CheckTouchKey.c: 231: KeyData[0] = 0;
  2727  001B  01B6               	clrf	_KeyData	;volatile
  2728                           
  2729                           ;CheckTouchKey.c: 232: KeyData[1] = 0;
  2730  001C  01B7               	clrf	_KeyData+1	;volatile
  2731                           
  2732                           ;CheckTouchKey.c: 233: KeyMaxSub = 0;
  2733  001D  01C7               	clrf	_KeyMaxSub
  2734  001E                     l2690:	
  2735                           
  2736                           ;CheckTouchKey.c: 237: {
  2737                           ;CheckTouchKey.c: 238: flag = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  2738  001E  085A               	movf	CheckOnceResult@cnt,w
  2739  001F  3907               	andlw	7
  2740  0020  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  2741  0021  0084               	movwf	4
  2742  0022  2344               	fcall	stringdir
  2743  0023  00D4               	movwf	CheckOnceResult@flag
  2744                           
  2745                           ;CheckTouchKey.c: 240: KeyResSum[cnt] >>= 3;
  2746  0024  1003               	clrc
  2747  0025  0D5A               	rlf	CheckOnceResult@cnt,w
  2748  0026  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2749  0027  0084               	movwf	4
  2750  0028  3003               	movlw	3
  2751  0029                     u1485:	
  2752  0029  0A84               	incf	4,f
  2753  002A  1003               	clrc
  2754  002B  1383               	bcf	3,7	;select IRP bank0
  2755  002C  0C80               	rrf	0,f
  2756  002D  0384               	decf	4,f
  2757  002E  0C80               	rrf	0,f
  2758  002F  3EFF               	addlw	-1
  2759  0030  1D03               	skipz
  2760  0031  2829               	goto	u1485
  2761                           
  2762                           ;CheckTouchKey.c: 241: KeyResTemp = KeyResSum[cnt];
  2763  0032  1003               	clrc
  2764  0033  0D5A               	rlf	CheckOnceResult@cnt,w
  2765  0034  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2766  0035  0084               	movwf	4
  2767  0036  0800               	movf	0,w
  2768  0037  00D8               	movwf	CheckOnceResult@KeyResTemp
  2769  0038  0A84               	incf	4,f
  2770  0039  0800               	movf	0,w
  2771  003A  00D9               	movwf	CheckOnceResult@KeyResTemp+1
  2772                           
  2773                           ;CheckTouchKey.c: 242: KeyDown = Table_KeyDown[cnt];
  2774  003B  085A               	movf	CheckOnceResult@cnt,w
  2775  003C  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  2776  003D  0084               	movwf	4
  2777  003E  2344               	fcall	stringdir
  2778  003F  00D7               	movwf	CheckOnceResult@KeyDown
  2779                           
  2780                           ;CheckTouchKey.c: 244: KeyValue = KeyResTemp + KeyDown;
  2781  0040  00D5               	movwf	CheckOnceResult@KeyValue
  2782  0041  01D6               	clrf	CheckOnceResult@KeyValue+1
  2783  0042  0858               	movf	CheckOnceResult@KeyResTemp,w
  2784  0043  07D5               	addwf	CheckOnceResult@KeyValue,f
  2785  0044  1803               	skipnc
  2786  0045  0AD6               	incf	CheckOnceResult@KeyValue+1,f
  2787  0046  0859               	movf	CheckOnceResult@KeyResTemp+1,w
  2788  0047  07D6               	addwf	CheckOnceResult@KeyValue+1,f
  2789                           
  2790                           ;CheckTouchKey.c: 246: if(!KeyIsIn(cnt))
  2791  0048  085A               	movf	CheckOnceResult@cnt,w
  2792  0049  237D               	fcall	_KeyIsIn
  2793  004A  3A00               	xorlw	0
  2794                           
  2795                           ;CheckTouchKey.c: 247: {
  2796                           ;CheckTouchKey.c: 249: OldValue = KeyOldValue2[cnt];
  2797  004B  1003               	clrc
  2798  004C  1D03               	skipz
  2799  004D  28A5               	goto	L4
  2800  004E  0D5A               	rlf	CheckOnceResult@cnt,w
  2801  004F  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2802  0050  0084               	movwf	4
  2803  0051  1383               	bcf	3,7	;select IRP bank0
  2804  0052  0800               	movf	0,w
  2805  0053  00D2               	movwf	CheckOnceResult@OldValue
  2806  0054  0A84               	incf	4,f
  2807  0055  0800               	movf	0,w
  2808  0056  00D3               	movwf	CheckOnceResult@OldValue+1
  2809                           
  2810                           ;CheckTouchKey.c: 251: if(KeyReference[cnt] > KeyValue)
  2811  0057  1003               	clrc
  2812  0058  0D5A               	rlf	CheckOnceResult@cnt,w
  2813  0059  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2814  005A  20FF               	fcall	PL6	;call to abstracted procedure
  2815  005B  0256               	subwf	CheckOnceResult@KeyValue+1,w
  2816  005C  1D03               	skipz
  2817  005D  2860               	goto	u1505
  2818  005E  084E               	movf	??_CheckOnceResult,w
  2819  005F  0255               	subwf	CheckOnceResult@KeyValue,w
  2820  0060                     u1505:	
  2821  0060  1803               	skipnc
  2822  0061  286E               	goto	l2708
  2823                           
  2824                           ;CheckTouchKey.c: 252: {
  2825                           ;CheckTouchKey.c: 253: KeyResTemp = KeyReference[cnt] - KeyResTemp;
  2826  0062  1003               	clrc
  2827  0063  0D5A               	rlf	CheckOnceResult@cnt,w
  2828  0064  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2829  0065  20FF               	fcall	PL6	;call to abstracted procedure
  2830  0066  0858               	movf	CheckOnceResult@KeyResTemp,w
  2831  0067  024E               	subwf	??_CheckOnceResult,w
  2832  0068  00D8               	movwf	CheckOnceResult@KeyResTemp
  2833  0069  0859               	movf	CheckOnceResult@KeyResTemp+1,w
  2834  006A  1C03               	skipc
  2835  006B  0A59               	incf	CheckOnceResult@KeyResTemp+1,w
  2836  006C  024F               	subwf	??_CheckOnceResult+1,w
  2837  006D  2891               	goto	L2
  2838  006E                     l2708:	
  2839                           ;CheckTouchKey.c: 254: }
  2840                           
  2841                           
  2842                           ;CheckTouchKey.c: 255: else if ((OldValue > KeyValue) && (KeyOldValue1[cnt] > KeyValue))
  2843  006E  0853               	movf	CheckOnceResult@OldValue+1,w
  2844  006F  0256               	subwf	CheckOnceResult@KeyValue+1,w
  2845  0070  1D03               	skipz
  2846  0071  2874               	goto	u1515
  2847  0072  0852               	movf	CheckOnceResult@OldValue,w
  2848  0073  0255               	subwf	CheckOnceResult@KeyValue,w
  2849  0074                     u1515:	
  2850  0074  1803               	skipnc
  2851  0075  28E5               	goto	l2754
  2852  0076  1003               	clrc
  2853  0077  0D5A               	rlf	CheckOnceResult@cnt,w
  2854  0078  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2855  0079  20FF               	fcall	PL6	;call to abstracted procedure
  2856  007A  0256               	subwf	CheckOnceResult@KeyValue+1,w
  2857  007B  1D03               	skipz
  2858  007C  287F               	goto	u1525
  2859  007D  084E               	movf	??_CheckOnceResult,w
  2860  007E  0255               	subwf	CheckOnceResult@KeyValue,w
  2861  007F                     u1525:	
  2862  007F  1803               	skipnc
  2863  0080  28E5               	goto	l2754
  2864                           
  2865                           ;CheckTouchKey.c: 256: {
  2866                           ;CheckTouchKey.c: 257: KeyReference[cnt] = OldValue;
  2867  0081  1003               	clrc
  2868  0082  0D5A               	rlf	CheckOnceResult@cnt,w
  2869  0083  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2870  0084  0084               	movwf	4
  2871  0085  0852               	movf	CheckOnceResult@OldValue,w
  2872  0086  0080               	movwf	0
  2873  0087  0A84               	incf	4,f
  2874  0088  0853               	movf	CheckOnceResult@OldValue+1,w
  2875  0089  0080               	movwf	0
  2876                           
  2877                           ;CheckTouchKey.c: 258: KeyResTemp = OldValue - KeyResTemp;
  2878  008A  0858               	movf	CheckOnceResult@KeyResTemp,w
  2879  008B  0252               	subwf	CheckOnceResult@OldValue,w
  2880  008C  00D8               	movwf	CheckOnceResult@KeyResTemp
  2881  008D  0859               	movf	CheckOnceResult@KeyResTemp+1,w
  2882  008E  1C03               	skipc
  2883  008F  0A59               	incf	CheckOnceResult@KeyResTemp+1,w
  2884  0090  0253               	subwf	CheckOnceResult@OldValue+1,w
  2885  0091                     L2:	
  2886  0091  00D9               	movwf	CheckOnceResult@KeyResTemp+1
  2887                           
  2888                           ;CheckTouchKey.c: 263: }
  2889                           ;CheckTouchKey.c: 265: KeyUpShake[cnt] = 0;
  2890                           
  2891                           ;CheckTouchKey.c: 259: }
  2892  0092  085A               	movf	CheckOnceResult@cnt,w
  2893  0093  3E40               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2894  0094  0084               	movwf	4
  2895  0095  0180               	clrf	0
  2896                           
  2897                           ;CheckTouchKey.c: 268: {
  2898                           ;CheckTouchKey.c: 269: if(KeyResTemp >> 8)
  2899  0096  0859               	movf	CheckOnceResult@KeyResTemp+1,w
  2900  0097  1903               	btfsc	3,2
  2901  0098  289B               	goto	l2722
  2902                           
  2903                           ;CheckTouchKey.c: 270: {
  2904                           ;CheckTouchKey.c: 271: KeyDown = 0xFF;
  2905  0099  30FF               	movlw	255
  2906  009A  289C               	goto	L3
  2907  009B                     l2722:	
  2908                           ;CheckTouchKey.c: 272: }
  2909                           
  2910                           
  2911                           ;CheckTouchKey.c: 273: else
  2912                           ;CheckTouchKey.c: 274: {
  2913                           ;CheckTouchKey.c: 275: KeyDown = KeyResTemp & 0xFF;
  2914  009B  0858               	movf	CheckOnceResult@KeyResTemp,w
  2915  009C                     L3:	
  2916  009C  00D7               	movwf	CheckOnceResult@KeyDown
  2917                           
  2918                           ;CheckTouchKey.c: 276: }
  2919                           ;CheckTouchKey.c: 278: if(KeyMaxSub < KeyDown)
  2920  009D  0247               	subwf	_KeyMaxSub,w
  2921  009E  1803               	skipnc
  2922  009F  28A3               	goto	l2728
  2923                           
  2924                           ;CheckTouchKey.c: 279: {
  2925                           ;CheckTouchKey.c: 280: KeyMaxSub = KeyDown;
  2926  00A0  0857               	movf	CheckOnceResult@KeyDown,w
  2927  00A1  00C7               	movwf	_KeyMaxSub
  2928  00A2  28E0               	goto	l2752
  2929  00A3                     l2728:	
  2930                           ;CheckTouchKey.c: 282: }
  2931                           
  2932                           ;CheckTouchKey.c: 281: KeyHave(cnt,flag);
  2933                           
  2934                           
  2935                           ;CheckTouchKey.c: 283: else
  2936                           ;CheckTouchKey.c: 284: {
  2937                           ;CheckTouchKey.c: 285: KeyCounter++;
  2938  00A3  0AC8               	incf	_KeyCounter,f
  2939  00A4  28E5               	goto	l2754
  2940  00A5                     L4:	
  2941                           ;CheckTouchKey.c: 294: else
  2942                           ;CheckTouchKey.c: 295: {
  2943                           ;CheckTouchKey.c: 298: if(KeyReference[cnt]+1 < KeyValue)
  2944                           
  2945  00A5  0D5A               	rlf	CheckOnceResult@cnt,w
  2946  00A6  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2947  00A7  0084               	movwf	4
  2948  00A8  1383               	bcf	3,7	;select IRP bank0
  2949  00A9  0800               	movf	0,w
  2950  00AA  00CE               	movwf	??_CheckOnceResult
  2951  00AB  0A84               	incf	4,f
  2952  00AC  0800               	movf	0,w
  2953  00AD  00CF               	movwf	??_CheckOnceResult+1
  2954  00AE  084E               	movf	??_CheckOnceResult,w
  2955  00AF  3E01               	addlw	1
  2956  00B0  00D0               	movwf	??_CheckOnceResult+2
  2957  00B1  084F               	movf	??_CheckOnceResult+1,w
  2958  00B2  1803               	skipnc
  2959  00B3  3E01               	addlw	1
  2960  00B4  00D1               	movwf	??_CheckOnceResult+3
  2961  00B5  0856               	movf	CheckOnceResult@KeyValue+1,w
  2962  00B6  0251               	subwf	??_CheckOnceResult+3,w
  2963  00B7  1D03               	skipz
  2964  00B8  28BB               	goto	u1555
  2965  00B9  0855               	movf	CheckOnceResult@KeyValue,w
  2966  00BA  0250               	subwf	??_CheckOnceResult+2,w
  2967  00BB                     u1555:	
  2968  00BB  1C03               	btfss	3,0
  2969  00BC  28E5               	goto	l2754
  2970                           
  2971                           ;CheckTouchKey.c: 302: else if((KeyOldValue2[cnt]+KeyDown<KeyResTemp) || (KeyOldValue1[c
      +                          nt]+KeyDown<KeyResTemp))
  2972  00BD  1003               	clrc
  2973  00BE  0D5A               	rlf	CheckOnceResult@cnt,w
  2974  00BF  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2975  00C0  0084               	movwf	4
  2976  00C1  0800               	movf	0,w
  2977  00C2  20ED               	fcall	PL4	;call to abstracted procedure
  2978  00C3  1C03               	skipc
  2979  00C4  28CD               	goto	l2742
  2980  00C5  1003               	clrc
  2981  00C6  0D5A               	rlf	CheckOnceResult@cnt,w
  2982  00C7  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2983  00C8  0084               	movwf	4
  2984  00C9  0800               	movf	0,w
  2985  00CA  20ED               	fcall	PL4	;call to abstracted procedure
  2986  00CB  1803               	skipnc
  2987  00CC  28D8               	goto	l2746
  2988  00CD                     l2742:	
  2989                           
  2990                           ;CheckTouchKey.c: 303: {
  2991                           ;CheckTouchKey.c: 304: if(++KeyUpShake[cnt] > 8)
  2992  00CD  085A               	movf	CheckOnceResult@cnt,w
  2993  00CE  3E40               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2994  00CF  0084               	movwf	4
  2995  00D0  3009               	movlw	9
  2996  00D1  0A80               	incf	0,f
  2997  00D2  0200               	subwf	0,w
  2998  00D3  1C03               	skipc
  2999  00D4  28DC               	goto	l2750
  3000                           
  3001                           ;CheckTouchKey.c: 305: {
  3002                           ;CheckTouchKey.c: 306: KeyClearOne(cnt);
  3003  00D5  085A               	movf	CheckOnceResult@cnt,w
  3004  00D6  2316               	fcall	_KeyClearOne
  3005                           
  3006                           ;CheckTouchKey.c: 307: continue;
  3007  00D7  28E5               	goto	l2754
  3008  00D8                     l2746:	
  3009                           
  3010                           ;CheckTouchKey.c: 310: else
  3011                           ;CheckTouchKey.c: 311: {
  3012                           ;CheckTouchKey.c: 312: KeyUpShake[cnt] = 0;
  3013  00D8  085A               	movf	CheckOnceResult@cnt,w
  3014  00D9  3E40               	addlw	(low (_KeyUpShake| 0))& (0+255)
  3015  00DA  0084               	movwf	4
  3016  00DB  0180               	clrf	0
  3017  00DC                     l2750:	
  3018                           
  3019                           ;CheckTouchKey.c: 319: else if(!(KeyData[0] | KeyData[1]))
  3020  00DC  0837               	movf	_KeyData+1,w	;volatile
  3021  00DD  0436               	iorwf	_KeyData,w	;volatile
  3022  00DE  1D03               	btfss	3,2
  3023  00DF  28E5               	goto	l2754
  3024  00E0                     l2752:	
  3025                           
  3026                           ;CheckTouchKey.c: 320: {
  3027                           ;CheckTouchKey.c: 321: KeyHave(cnt,flag);
  3028  00E0  0854               	movf	CheckOnceResult@flag,w
  3029  00E1  00F4               	movwf	KeyHave@flag
  3030  00E2  01F5               	clrf	KeyHave@flag+1
  3031  00E3  085A               	movf	CheckOnceResult@cnt,w
  3032  00E4  23B9               	fcall	_KeyHave
  3033  00E5                     l2754:	
  3034  00E5  3002               	movlw	2
  3035  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  3036  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  3037  00E8  0ADA               	incf	CheckOnceResult@cnt,f
  3038  00E9  025A               	subwf	CheckOnceResult@cnt,w
  3039  00EA  1803               	btfsc	3,0
  3040  00EB  0008               	return
  3041  00EC  281E               	goto	l2690
  3042  00ED                     __end_of_CheckOnceResult:	
  3043  00ED                     PL4:	
  3044  00ED  00CE               	movwf	??_CheckOnceResult
  3045  00EE  0A84               	incf	4,f
  3046  00EF  0800               	movf	0,w
  3047  00F0  00CF               	movwf	??_CheckOnceResult+1
  3048  00F1  0857               	movf	CheckOnceResult@KeyDown,w
  3049  00F2  074E               	addwf	??_CheckOnceResult,w
  3050  00F3  00D0               	movwf	??_CheckOnceResult+2
  3051  00F4  084F               	movf	??_CheckOnceResult+1,w
  3052  00F5  1803               	skipnc
  3053  00F6  0A4F               	incf	??_CheckOnceResult+1,w
  3054  00F7  00D1               	movwf	??_CheckOnceResult+3
  3055  00F8  0859               	movf	CheckOnceResult@KeyResTemp+1,w
  3056  00F9  0251               	subwf	??_CheckOnceResult+3,w
  3057  00FA  1D03               	skipz
  3058  00FB  0008               	return
  3059  00FC  0858               	movf	CheckOnceResult@KeyResTemp,w
  3060  00FD  0250               	subwf	??_CheckOnceResult+2,w
  3061  00FE  0008               	return
  3062  00FF                     __end_ofPL4:	
  3063  00FF                     PL6:	
  3064  00FF  0084               	movwf	4
  3065  0100  0800               	movf	0,w
  3066  0101  00CE               	movwf	??_CheckOnceResult
  3067  0102  0A84               	incf	4,f
  3068  0103  0800               	movf	0,w
  3069  0104  00CF               	movwf	??_CheckOnceResult+1
  3070  0105  0008               	return
  3071  0106                     __end_ofPL6:	
  3072                           
  3073                           	psect	text26
  3074  03B9                     __ptext26:	
  3075 ;; *************** function _KeyHave *****************
  3076 ;; Defined at:
  3077 ;;		line 142 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;  cnt             1    wreg     unsigned char 
  3080 ;;  flag            2    2[COMMON] unsigned int 
  3081 ;; Auto vars:     Size  Location     Type
  3082 ;;  cnt             1    4[COMMON] unsigned char 
  3083 ;; Return value:  Size  Location     Type
  3084 ;;                  1    wreg      void 
  3085 ;; Registers used:
  3086 ;;		wreg, status,2, status,0
  3087 ;; Tracked objects:
  3088 ;;		On entry : B00/0
  3089 ;;		On exit  : B00/0
  3090 ;;		Unchanged: 800/0
  3091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3092 ;;      Params:         2       0       0       0
  3093 ;;      Locals:         1       0       0       0
  3094 ;;      Temps:          0       0       0       0
  3095 ;;      Totals:         3       0       0       0
  3096 ;;Total ram usage:        3 bytes
  3097 ;; Hardware stack levels used:    1
  3098 ;; Hardware stack levels required when called:    1
  3099 ;; This function calls:
  3100 ;;		Nothing
  3101 ;; This function is called by:
  3102 ;;		_CheckOnceResult
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           
  3107                           ;psect for function _KeyHave
  3108  03B9                     _KeyHave:	
  3109                           
  3110                           ;incstack = 0
  3111                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  3112                           ;KeyHave@cnt stored from wreg
  3113  03B9  00F6               	movwf	KeyHave@cnt
  3114                           
  3115                           ;CheckTouchKey.c: 144: KeyCounter++;
  3116  03BA  0AC8               	incf	_KeyCounter,f
  3117                           
  3118                           ;CheckTouchKey.c: 147: {
  3119                           ;CheckTouchKey.c: 148: KeyData[0] = 0;
  3120  03BB  01B6               	clrf	_KeyData	;volatile
  3121                           
  3122                           ;CheckTouchKey.c: 149: KeyData[1] = 0;
  3123  03BC  01B7               	clrf	_KeyData+1	;volatile
  3124                           
  3125                           ;CheckTouchKey.c: 150: if(cnt&0x8)
  3126  03BD  1DF6               	btfss	KeyHave@cnt,3
  3127  03BE  2BC2               	goto	l2232
  3128                           
  3129                           ;CheckTouchKey.c: 151: {
  3130                           ;CheckTouchKey.c: 152: KeyData[1] = flag;
  3131  03BF  0874               	movf	KeyHave@flag,w
  3132  03C0  00B7               	movwf	_KeyData+1	;volatile
  3133                           
  3134                           ;CheckTouchKey.c: 153: }
  3135  03C1  0008               	return
  3136  03C2                     l2232:	
  3137                           
  3138                           ;CheckTouchKey.c: 154: else
  3139                           ;CheckTouchKey.c: 155: {
  3140                           ;CheckTouchKey.c: 156: KeyData[0] = flag;
  3141  03C2  0874               	movf	KeyHave@flag,w
  3142  03C3  00B6               	movwf	_KeyData	;volatile
  3143  03C4  0008               	return
  3144  03C5                     __end_of_KeyHave:	
  3145                           
  3146                           	psect	text27
  3147  0316                     __ptext27:	
  3148 ;; *************** function _KeyClearOne *****************
  3149 ;; Defined at:
  3150 ;;		line 80 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3151 ;; Parameters:    Size  Location     Type
  3152 ;;  cnt             1    wreg     unsigned char 
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;  cnt             1    2[COMMON] unsigned char 
  3155 ;; Return value:  Size  Location     Type
  3156 ;;                  1    wreg      void 
  3157 ;; Registers used:
  3158 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 800/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3164 ;;      Params:         0       0       0       0
  3165 ;;      Locals:         1       0       0       0
  3166 ;;      Temps:          0       0       0       0
  3167 ;;      Totals:         1       0       0       0
  3168 ;;Total ram usage:        1 bytes
  3169 ;; Hardware stack levels used:    1
  3170 ;; Hardware stack levels required when called:    1
  3171 ;; This function calls:
  3172 ;;		Nothing
  3173 ;; This function is called by:
  3174 ;;		_KeyClearIn
  3175 ;;		_KeyStopClear
  3176 ;;		_CheckOnceResult
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           
  3181                           ;psect for function _KeyClearOne
  3182  0316                     _KeyClearOne:	
  3183                           
  3184                           ;incstack = 0
  3185                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  3186                           ;KeyClearOne@cnt stored from wreg
  3187  0316  00F4               	movwf	KeyClearOne@cnt
  3188                           
  3189                           ;CheckTouchKey.c: 82: KeyOldValue0[cnt] = 0;
  3190  0317  1003               	clrc
  3191  0318  0D74               	rlf	KeyClearOne@cnt,w
  3192  0319  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3193  031A  0084               	movwf	4
  3194  031B  1383               	bcf	3,7	;select IRP bank0
  3195                           
  3196                           ;CheckTouchKey.c: 83: KeyOldValue1[cnt] = 0;
  3197  031C  2329               	fcall	PL12	;call to abstracted procedure
  3198  031D  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3199  031E  0084               	movwf	4
  3200                           
  3201                           ;CheckTouchKey.c: 84: KeyOldValue2[cnt] = 0;
  3202  031F  2329               	fcall	PL12	;call to abstracted procedure
  3203  0320  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3204  0321  0084               	movwf	4
  3205                           
  3206                           ;CheckTouchKey.c: 85: KeyReference[cnt] = 0;
  3207  0322  2329               	fcall	PL12	;call to abstracted procedure
  3208  0323  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  3209  0324  0084               	movwf	4
  3210  0325  0180               	clrf	0
  3211  0326  0A84               	incf	4,f
  3212  0327  0180               	clrf	0
  3213  0328  0008               	return
  3214  0329                     __end_of_KeyClearOne:	
  3215  0329                     PL12:	
  3216  0329  0180               	clrf	0
  3217  032A  0A84               	incf	4,f
  3218  032B  0180               	clrf	0
  3219  032C  1003               	clrc
  3220  032D  0D74               	rlf	KeyClearOne@cnt,w
  3221  032E  0008               	return
  3222  032F                     __end_ofPL12:	
  3223                           
  3224                           	psect	text28
  3225  0106                     __ptext28:	
  3226 ;; *************** function _CheckKeyOldValue *****************
  3227 ;; Defined at:
  3228 ;;		line 335 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;		None
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;  KeyOldTemp      2    2[BANK0 ] unsigned int 
  3233 ;;  KeyResTemp      2    0[BANK0 ] unsigned int 
  3234 ;;  cnt             1    4[BANK0 ] unsigned char 
  3235 ;; Return value:  Size  Location     Type
  3236 ;;                  1    wreg      void 
  3237 ;; Registers used:
  3238 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3239 ;; Tracked objects:
  3240 ;;		On entry : 0/0
  3241 ;;		On exit  : 300/0
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3244 ;;      Params:         0       0       0       0
  3245 ;;      Locals:         0       5       0       0
  3246 ;;      Temps:          2       0       0       0
  3247 ;;      Totals:         2       5       0       0
  3248 ;;Total ram usage:        7 bytes
  3249 ;; Hardware stack levels used:    1
  3250 ;; Hardware stack levels required when called:    3
  3251 ;; This function calls:
  3252 ;;		_KeyIsIn
  3253 ;; This function is called by:
  3254 ;;		_CheckTouchKey
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           
  3259                           ;psect for function _CheckKeyOldValue
  3260  0106                     _CheckKeyOldValue:	
  3261  0106  3004               	movlw	4
  3262                           
  3263                           ;CheckTouchKey.c: 337: static unsigned char counter = 0;
  3264                           ;CheckTouchKey.c: 338: unsigned char cnt = 0;
  3265                           
  3266                           ;incstack = 0
  3267                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3268  0107  1283               	bcf	3,5	;RP0=0, select bank0
  3269  0108  1303               	bcf	3,6	;RP1=0, select bank0
  3270  0109  01D2               	clrf	CheckKeyOldValue@cnt
  3271                           
  3272                           ;CheckTouchKey.c: 339: unsigned int KeyResTemp;
  3273                           ;CheckTouchKey.c: 340: unsigned int KeyOldTemp;
  3274                           ;CheckTouchKey.c: 342: if(++counter < 4)
  3275  010A  0AC6               	incf	CheckKeyOldValue@counter,f
  3276  010B  0246               	subwf	CheckKeyOldValue@counter,w
  3277  010C  1C03               	btfss	3,0
  3278  010D  0008               	return
  3279                           
  3280                           ;CheckTouchKey.c: 344: counter = 0;
  3281  010E  01C6               	clrf	CheckKeyOldValue@counter
  3282  010F                     l2406:	
  3283                           
  3284                           ;CheckTouchKey.c: 347: {
  3285                           ;CheckTouchKey.c: 348: KeyResTemp = KeyResSum[cnt];
  3286  010F  1003               	clrc
  3287  0110  0D52               	rlf	CheckKeyOldValue@cnt,w
  3288  0111  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  3289  0112  0084               	movwf	4
  3290  0113  1383               	bcf	3,7	;select IRP bank0
  3291  0114  0800               	movf	0,w
  3292  0115  00CE               	movwf	CheckKeyOldValue@KeyResTemp
  3293  0116  0A84               	incf	4,f
  3294  0117  0800               	movf	0,w
  3295  0118  00CF               	movwf	CheckKeyOldValue@KeyResTemp+1
  3296                           
  3297                           ;CheckTouchKey.c: 349: if(!KeyIsIn(cnt))
  3298  0119  0852               	movf	CheckKeyOldValue@cnt,w
  3299  011A  237D               	fcall	_KeyIsIn
  3300  011B  3A00               	xorlw	0
  3301                           
  3302                           ;CheckTouchKey.c: 350: {
  3303                           ;CheckTouchKey.c: 352: KeyOldTemp = KeyOldValue0[cnt] - KeyResTemp;
  3304  011C  1003               	clrc
  3305  011D  1D03               	skipz
  3306  011E  294F               	goto	L8
  3307  011F  0D52               	rlf	CheckKeyOldValue@cnt,w
  3308  0120  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3309  0121  0084               	movwf	4
  3310  0122  1383               	bcf	3,7	;select IRP bank0
  3311                           
  3312                           ;CheckTouchKey.c: 353: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3313  0123  2160               	fcall	PL2	;call to abstracted procedure
  3314  0124  1903               	skipnz
  3315  0125  0250               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3316  0126  1C03               	skipc
  3317  0127  292E               	goto	L5
  3318  0128  0F50               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3319  0129  294E               	goto	l1153
  3320  012A  0A51               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3321                           
  3322                           ;CheckTouchKey.c: 354: {
  3323                           ;CheckTouchKey.c: 355: KeyOldTemp = KeyOldValue1[cnt] - KeyResTemp;
  3324  012B  1003               	clrc
  3325  012C  1D03               	btfss	3,2
  3326  012D  294F               	goto	L8
  3327  012E                     L5:	
  3328  012E  0D52               	rlf	CheckKeyOldValue@cnt,w
  3329  012F  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3330  0130  0084               	movwf	4
  3331                           
  3332                           ;CheckTouchKey.c: 356: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3333  0131  2160               	fcall	PL2	;call to abstracted procedure
  3334  0132  1903               	skipnz
  3335  0133  0250               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3336  0134  1C03               	skipc
  3337  0135  293C               	goto	L6
  3338  0136  0F50               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3339  0137  294E               	goto	l1153
  3340  0138  0A51               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3341                           
  3342                           ;CheckTouchKey.c: 357: {
  3343                           ;CheckTouchKey.c: 358: KeyOldTemp = KeyOldValue2[cnt] - KeyResTemp;
  3344  0139  1003               	clrc
  3345  013A  1D03               	btfss	3,2
  3346  013B  294F               	goto	L8
  3347  013C                     L6:	
  3348  013C  0D52               	rlf	CheckKeyOldValue@cnt,w
  3349  013D  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3350  013E  0084               	movwf	4
  3351                           
  3352                           ;CheckTouchKey.c: 359: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3353  013F  2160               	fcall	PL2	;call to abstracted procedure
  3354  0140  1903               	skipnz
  3355  0141  0250               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3356  0142  1C03               	skipc
  3357  0143  294A               	goto	L7
  3358  0144  0F50               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3359  0145  294E               	goto	l1153
  3360  0146  0A51               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3361                           
  3362                           ;CheckTouchKey.c: 360: {
  3363                           ;CheckTouchKey.c: 361: KeyReference[cnt] = KeyResTemp;
  3364  0147  1003               	clrc
  3365  0148  1D03               	btfss	3,2
  3366  0149  294F               	goto	L8
  3367  014A                     L7:	
  3368  014A  0D52               	rlf	CheckKeyOldValue@cnt,w
  3369  014B  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  3370  014C  0084               	movwf	4
  3371  014D  2181               	fcall	PL14	;call to abstracted procedure
  3372  014E                     l1153:	
  3373                           
  3374                           ;CheckTouchKey.c: 362: }
  3375                           ;CheckTouchKey.c: 363: }
  3376                           ;CheckTouchKey.c: 364: }
  3377                           ;CheckTouchKey.c: 365: }
  3378                           ;CheckTouchKey.c: 368: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  3379  014E  1003               	clrc
  3380  014F                     L8:	
  3381  014F  0D52               	rlf	CheckKeyOldValue@cnt,w
  3382  0150  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3383  0151  0084               	movwf	4
  3384  0152  1383               	bcf	3,7	;select IRP bank0
  3385  0153  2179               	fcall	PL10	;call to abstracted procedure
  3386  0154  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3387                           
  3388                           ;CheckTouchKey.c: 369: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  3389  0155  216E               	fcall	PL8	;call to abstracted procedure
  3390  0156  2179               	fcall	PL10	;call to abstracted procedure
  3391  0157  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3392                           
  3393                           ;CheckTouchKey.c: 370: KeyOldValue0[cnt] = KeyResTemp;
  3394  0158  216E               	fcall	PL8	;call to abstracted procedure
  3395  0159  2181               	fcall	PL14	;call to abstracted procedure
  3396  015A  3002               	movlw	2
  3397  015B  0AD2               	incf	CheckKeyOldValue@cnt,f
  3398  015C  0252               	subwf	CheckKeyOldValue@cnt,w
  3399  015D  1803               	btfsc	3,0
  3400  015E  0008               	return
  3401  015F  290F               	goto	l2406
  3402  0160                     __end_of_CheckKeyOldValue:	
  3403  0160                     PL2:	
  3404  0160  0800               	movf	0,w
  3405  0161  00D0               	movwf	CheckKeyOldValue@KeyOldTemp
  3406  0162  0A84               	incf	4,f
  3407  0163  0800               	movf	0,w
  3408  0164  00D1               	movwf	CheckKeyOldValue@KeyOldTemp+1
  3409  0165  084E               	movf	CheckKeyOldValue@KeyResTemp,w
  3410  0166  02D0               	subwf	CheckKeyOldValue@KeyOldTemp,f
  3411  0167  084F               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3412  0168  1C03               	skipc
  3413  0169  03D1               	decf	CheckKeyOldValue@KeyOldTemp+1,f
  3414  016A  02D1               	subwf	CheckKeyOldValue@KeyOldTemp+1,f
  3415  016B  3000               	movlw	0
  3416  016C  0251               	subwf	CheckKeyOldValue@KeyOldTemp+1,w
  3417  016D  3402               	retlw	2
  3418  016E                     __end_ofPL2:	
  3419  016E                     PL8:	
  3420  016E  0084               	movwf	4
  3421  016F  0876               	movf	??_CheckKeyOldValue,w
  3422  0170  0080               	movwf	0
  3423  0171  0A84               	incf	4,f
  3424  0172  0877               	movf	??_CheckKeyOldValue+1,w
  3425  0173  0080               	movwf	0
  3426  0174  1003               	clrc
  3427  0175  0D52               	rlf	CheckKeyOldValue@cnt,w
  3428  0176  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3429  0177  0084               	movwf	4
  3430  0178  0008               	return
  3431  0179                     __end_ofPL8:	
  3432  0179                     PL10:	
  3433  0179  0800               	movf	0,w
  3434  017A  00F6               	movwf	??_CheckKeyOldValue
  3435  017B  0A84               	incf	4,f
  3436  017C  0800               	movf	0,w
  3437  017D  00F7               	movwf	??_CheckKeyOldValue+1
  3438  017E  1003               	clrc
  3439  017F  0D52               	rlf	CheckKeyOldValue@cnt,w
  3440  0180  0008               	return
  3441  0181                     __end_ofPL10:	
  3442  0181                     PL14:	
  3443  0181  084E               	movf	CheckKeyOldValue@KeyResTemp,w
  3444  0182  0080               	movwf	0
  3445  0183  0A84               	incf	4,f
  3446  0184  084F               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3447  0185  0080               	movwf	0
  3448  0186  0008               	return
  3449  0187                     __end_ofPL14:	
  3450                           
  3451                           	psect	text29
  3452  037D                     __ptext29:	
  3453 ;; *************** function _KeyIsIn *****************
  3454 ;; Defined at:
  3455 ;;		line 58 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  cnt             1    wreg     unsigned char 
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;  cnt             1    3[COMMON] unsigned char 
  3460 ;;  i               1    2[COMMON] unsigned char 
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  1    wreg      unsigned char 
  3463 ;; Registers used:
  3464 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 300/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3470 ;;      Params:         0       0       0       0
  3471 ;;      Locals:         2       0       0       0
  3472 ;;      Temps:          0       0       0       0
  3473 ;;      Totals:         2       0       0       0
  3474 ;;Total ram usage:        2 bytes
  3475 ;; Hardware stack levels used:    2
  3476 ;; Hardware stack levels required when called:    1
  3477 ;; This function calls:
  3478 ;;		Nothing
  3479 ;; This function is called by:
  3480 ;;		_KeyClearIn
  3481 ;;		_CheckOnceResult
  3482 ;;		_CheckKeyOldValue
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           
  3487                           ;psect for function _KeyIsIn
  3488  037D                     _KeyIsIn:	
  3489                           
  3490                           ;incstack = 0
  3491                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  3492                           ;KeyIsIn@cnt stored from wreg
  3493  037D  00F5               	movwf	KeyIsIn@cnt
  3494                           
  3495                           ;CheckTouchKey.c: 60: unsigned char i = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  3496  037E  3907               	andlw	7
  3497  037F  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  3498  0380  0084               	movwf	4
  3499  0381  2344               	fcall	stringdir
  3500  0382  00F4               	movwf	KeyIsIn@i
  3501                           
  3502                           ;CheckTouchKey.c: 62: if(cnt&0x8)
  3503  0383  1DF5               	btfss	KeyIsIn@cnt,3
  3504  0384  2B89               	goto	l2154
  3505                           
  3506                           ;CheckTouchKey.c: 63: {
  3507                           ;CheckTouchKey.c: 64: i &= KeyFlag[1];
  3508  0385  1283               	bcf	3,5	;RP0=0, select bank0
  3509  0386  1303               	bcf	3,6	;RP1=0, select bank0
  3510  0387  0843               	movf	_KeyFlag+1,w	;volatile
  3511  0388  2B8C               	goto	L9
  3512  0389                     l2154:	
  3513                           ;CheckTouchKey.c: 65: }
  3514                           
  3515                           
  3516                           ;CheckTouchKey.c: 66: else
  3517                           ;CheckTouchKey.c: 67: {
  3518                           ;CheckTouchKey.c: 68: i &= KeyFlag[0];
  3519  0389  1283               	bcf	3,5	;RP0=0, select bank0
  3520  038A  1303               	bcf	3,6	;RP1=0, select bank0
  3521  038B  0842               	movf	_KeyFlag,w	;volatile
  3522  038C                     L9:	
  3523  038C  05F4               	andwf	KeyIsIn@i,f
  3524                           
  3525                           ;CheckTouchKey.c: 69: }
  3526                           ;CheckTouchKey.c: 70: return i;
  3527  038D  0874               	movf	KeyIsIn@i,w
  3528  038E  0008               	return
  3529  038F                     __end_of_KeyIsIn:	
  3530                           
  3531                           	psect	text30
  3532  0297                     __ptext30:	
  3533 ;; *************** function _Isr_Timer *****************
  3534 ;; Defined at:
  3535 ;;		line 274 in file "C:\mcuproject\scm\Ì¨µÆ\main.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;		None
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;		None
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      void 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 300/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3549 ;;      Params:         0       0       0       0
  3550 ;;      Locals:         0       0       0       0
  3551 ;;      Temps:          2       0       0       0
  3552 ;;      Totals:         2       0       0       0
  3553 ;;Total ram usage:        2 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; This function calls:
  3556 ;;		Nothing
  3557 ;; This function is called by:
  3558 ;;		Interrupt level 1
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           
  3563                           ;psect for function _Isr_Timer
  3564  0297                     _Isr_Timer:	
  3565                           
  3566                           ;main.c: 276: if(TMR2IF)
  3567  0297  1283               	bcf	3,5	;RP0=0, select bank0
  3568  0298  1303               	bcf	3,6	;RP1=0, select bank0
  3569  0299  1C8C               	btfss	12,1	;volatile
  3570  029A  2AB2               	goto	i1l2620
  3571                           
  3572                           ;main.c: 277: {
  3573                           ;main.c: 278: TMR2IF = 0;
  3574  029B  108C               	bcf	12,1	;volatile
  3575                           
  3576                           ;main.c: 280: if(++MainTime >= 16)
  3577  029C  3010               	movlw	16
  3578  029D  0ACD               	incf	_MainTime,f	;volatile
  3579  029E  024D               	subwf	_MainTime,w	;volatile
  3580  029F  1C03               	skipc
  3581  02A0  2AA3               	goto	i1l2610
  3582                           
  3583                           ;main.c: 281: {
  3584                           ;main.c: 282: MainTime = 0;
  3585  02A1  01CD               	clrf	_MainTime	;volatile
  3586                           
  3587                           ;main.c: 283: B_MainLoop = 1;
  3588  02A2  1571               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  3589  02A3                     i1l2610:	
  3590                           
  3591                           ;main.c: 284: }
  3592                           ;main.c: 286: if(pwmTime < 12 && sendFlag)
  3593  02A3  300C               	movlw	12
  3594  02A4  0279               	subwf	_pwmTime,w	;volatile
  3595  02A5  1C03               	btfss	3,0
  3596  02A6  1C78               	btfss	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
  3597  02A7  2AAA               	goto	i1l569
  3598                           
  3599                           ;main.c: 287: PORTA&=~(1<<3);
  3600  02A8  1185               	bcf	5,3	;volatile
  3601  02A9  2AAB               	goto	i1l2616
  3602  02AA                     i1l569:	
  3603                           
  3604                           ;main.c: 288: else
  3605                           ;main.c: 289: PORTA|=(1<<3);
  3606  02AA  1585               	bsf	5,3	;volatile
  3607  02AB                     i1l2616:	
  3608                           
  3609                           ;main.c: 290: if(++pwmTime >= 44)
  3610  02AB  302C               	movlw	44
  3611  02AC  0AF9               	incf	_pwmTime,f	;volatile
  3612  02AD  0279               	subwf	_pwmTime,w	;volatile
  3613  02AE  1C03               	skipc
  3614  02AF  2AB3               	goto	i1l573
  3615                           
  3616                           ;main.c: 291: {
  3617                           ;main.c: 292: pwmTime = 0;
  3618  02B0  01F9               	clrf	_pwmTime	;volatile
  3619  02B1  2AB3               	goto	i1l573
  3620  02B2                     i1l2620:	
  3621                           
  3622                           ;main.c: 295: else
  3623                           ;main.c: 296: {
  3624                           ;main.c: 297: PIR1 = 0;
  3625  02B2  018C               	clrf	12	;volatile
  3626  02B3                     i1l573:	
  3627  02B3  0873               	movf	??_Isr_Timer+1,w
  3628  02B4  008A               	movwf	10
  3629  02B5  0E72               	swapf	??_Isr_Timer^(0+-128),w
  3630  02B6  0083               	movwf	3
  3631  02B7  0EFE               	swapf	126,f
  3632  02B8  0E7E               	swapf	126,w
  3633  02B9  0009               	retfie
  3634  02BA                     __end_of_Isr_Timer:	
  3635  007E                     btemp	set	126	;btemp
  3636  007E                     wtemp0	set	126
  3637                           
  3638                           	psect	intentry
  3639  0004                     __pintentry:	
  3640                           ;incstack = 0
  3641                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  3642                           
  3643  0004                     interrupt_function:	
  3644  007E                     saved_w	set	btemp
  3645  0004  00FE               	movwf	btemp
  3646  0005  0E03               	swapf	3,w
  3647  0006  00F2               	movwf	??_Isr_Timer
  3648  0007  080A               	movf	10,w
  3649  0008  00F3               	movwf	??_Isr_Timer+1
  3650  0009  2A97               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    14
    Data        2
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     13      61
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _CheckTouchKey->_CheckKeyOldValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3147
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                         _checkIRKey
                           _startPWM
 ---------------------------------------------------------------------------------
 (1) _startPWM                                             0     0      0       0
                            _initPWM
                           _procKey1
                           _procKey2
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkIRKey                                           1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            2     2      0      45
                                              2 COMMON     2     2      0
                           _procKey1
                           _procKey2
 ---------------------------------------------------------------------------------
 (2) _procKey2                                             0     0      0       0
                              _modea
                              _modeb
                              _modec
                              _moded
                              _modee
 ---------------------------------------------------------------------------------
 (3) _modee                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _moded                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _modec                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _modeb                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _modea                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _procKey1                                             0     0      0       0
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                              _mode5
 ---------------------------------------------------------------------------------
 (3) _mode5                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode4                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode3                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode2                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode1                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3102
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _GetTouchKeyValue                                     2     2      0     157
                                              3 COMMON     2     2      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (3) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1892
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     304
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (4) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
     _procKey1
       _mode1
       _mode2
       _mode3
       _mode4
       _mode5
     _procKey2
       _modea
       _modeb
       _modec
       _moded
       _modee
   _checkIRKey
   _startPWM
     _initPWM
     _procKey1
       _mode1
       _mode2
       _mode3
       _mode4
       _mode5
     _procKey2
       _modea
       _modeb
       _modec
       _moded
       _modee

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK2               50      0       0       9        0.0%
BITBANK2            50      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      D      3D       3       76.3%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       3       0       21.4%
CODE                 0      0       0       0        0.0%
DATA                 0      0      47      10        0.0%
ABS                  0      0      47       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Aug 17 16:32:20 2021

                KeyIsIn@cnt 0075                  KeyHave@cnt 0076                 KeyHave@flag 0074  
                         pc 0002                          PL2 0160                          PL4 00ED  
                        PL6 00FF                          PL8 016E               ??_KeyClearOne 0074  
     __size_of_TurnKeyFlags 002F                          fsr 0004            ??_CheckValidTime 0074  
                       PL10 0179                         PL12 0329                         PL14 0181  
                       l545 01D0                         l553 01F1                         l546 01D5  
                       l558 0204                         l578 035C                         _PR2 0091  
                       fsr0 0004                         indf 0000         CheckOnceResult@flag 0054  
         ?_GetTouchKeyValue 0072                        S2860 03DD    __end_of_Table_KeyChannel 0358  
                      S2858 03D8                  KeyServer@i 0074          ??_GetTouchKeyValue 0075  
                      l1111 0243                        l1112 0253                        l1153 014E  
                      l2202 039E                        l1171 022E                        l2212 03A6  
                      l1190 027D                        l2232 03C2                        l2216 038F  
                      l2304 0334                        l2208 039F                        l2154 0389  
                      l2218 0390                        l2162 0402                        l2170 03FA  
                      l2250 0313                        l2252 0314                        l2406 010F  
                      l2326 025B                        l2166 03FE                        l2174 03F6  
                      l2254 0315                        l2246 0311                        l2182 03EE  
                      l2190 03CD                        l2502 01A1                        l2248 0312  
                      l2280 02F7                        l2272 02F3                        l2264 02DA  
                      l2178 03F2                        l2258 0302                        l2186 03EA  
                      l2194 03E6                        l2274 02F4                        l2514 01C2  
                      l2276 02F5                        l2284 02E4                        l2508 01B1  
                      l2198 03E2                        l2278 02F6                        l2526 01D9  
                      l2542 01F2                        l2472 036B                        l2464 0235  
                      l2722 009B                        l2562 020F                        l2554 0205  
                      l2708 006E                        l2556 0207                        l2812 0367  
                      l2750 00DC                        l2742 00CD                        l2478 037A  
                      l2752 00E0                        l2728 00A3                        l2746 00D8  
                      l2754 00E5                        l2690 001E                        l2782 028E  
                      l2774 028A                        l2790 0296                        l2784 0292  
                      u1505 0060                        u1515 0074                        u1525 007F  
                      u1555 00BB                        u1485 0029                        _PIE1 000D  
                      _PIR1 000C                        _WPDB 0087                        _WPUA 0007  
                      _WPUB 0008                        _main 0358                        btemp 007E  
             ?_KeyStopClear 0072                        start 000A                _TurnKeyFlags 0213  
           __end_of_KeyIsIn 038F             __end_of_KeyHave 03C5  CheckKeyOldValue@KeyOldTemp 0050  
             ??_Init_System 0074  CheckKeyOldValue@KeyResTemp 004E                       ?_main 0072  
                     _T2CON 0012                       i1l573 02B3                       i1l569 02AA  
                     _PORTA 0005                       _PORTB 0006                       _TRISA 0085  
                     _TRISB 0086                       _PWMTH 0016                       _PWMTL 0015  
       __end_of_KeyClearOne 0329             __end_of_initPWM 03B9                       _mode1 0402  
                     _mode2 03FE                       _mode3 03FA                       _mode4 03F6  
                     _mode5 03F2                       _modea 03EE                       _modeb 03EA  
                     _modec 03CD                       _moded 03E6                       _modee 03E2  
                _KeyClearIn 039E              __pbitbssCOMMON 0380                       pclath 000A  
               _ClearResSum 038F                  _KeyCounter 0048                  _KeyOldData 0038  
            ??_KeyStopClear 0075                       status 0003                       wtemp0 007E  
                _KeyUpShake 0040             __initialization 000B                __end_of_main 036B  
                    ??_main 0078         __end_of_Init_System 02DA                      ?_mode1 0072  
                    ?_mode2 0072                      ?_mode3 0072                      ?_mode4 0072  
                    ?_mode5 0072                      ?_modea 0072                      ?_modeb 0072  
                    ?_modec 0072                      ?_moded 0072                      ?_modee 0072  
                    i1l2610 02A3                      i1l2620 02B2                      i1l2616 02AB  
                    _INTCON 000B          __size_of_KeyServer 0059                      _OSCCON 0088  
                    _TMR2IF 0061                      _PWMD0L 0017                      _PWMD1L 0018  
                    _ONFlag 0387                   ??_KeyIsIn 0074                   ??_KeyHave 0076  
        __size_of_Isr_Timer 0023   CheckOnceResult@KeyResTemp 0058      CheckOnceResult@KeyDown 0057  
 __size_of_CheckKeyOldValue 005A                      _b_kclr 0381                      _b_kerr 0380  
                    _irStep 004C                      _keyNub 003E                 _KeyClearOne 0316  
                 ??_initPWM 0074               _Table_KeyFalg 034A               _Table_KeyDown 0352  
          __end_of_procKey1 0316            __end_of_procKey2 02F8                      saved_w 007E  
    __size_of_CheckTouchKey 0026            __end_of_startPWM 03D8                 ?_KeyClearIn 0072  
           _CheckOnceResult 0018     __end_of__initialization 0016              __pcstackCOMMON 0072  
              __pidataBANK0 0000               __end_of_mode1 0406               __end_of_mode2 0402  
             __end_of_mode3 03FE               __end_of_mode4 03FA               __end_of_mode5 03F6  
             __end_of_modea 03F2               __end_of_modeb 03EE               __end_of_modec 03D3  
             __end_of_moded 03EA               __end_of_modee 03E6                 _Init_System 02BA  
                __end_ofPL2 016E                  __end_ofPL4 00FF                  __end_ofPL6 0106  
                __end_ofPL8 0179           __end_of_KeyServer 01E0        __end_of_KeyStopClear 0344  
         __end_of_Isr_Timer 02BA             _doublePressFlag 0388                  _checkIRKey 01E0  
                   ??_mode1 0074                     ??_mode2 0074                     ??_mode3 0074  
                   ??_mode4 0074                     ??_mode5 0074                     ??_modea 0074  
                   ??_modeb 0074                     ??_modec 0074                     ??_moded 0074  
                   ??_modee 0074                  _checkCount 0049                  __pbssBANK0 0020  
           _doubleTouchFlag 0384   __size_of_GetTouchKeyValue 002F               _CheckTouchKey 0271  
                __pmaintext 0358                  __pintentry 0004         __size_of_KeyClearIn 000E  
   __end_of_CheckOnceResult 00ED                     _KEYCON0 0092                     _KEYCON1 0093  
             KeyStopClear@i 0075                     _PWMD01H 001C                     _PWMCON0 0013  
                   _PWMCON1 0014                     _PWMCON2 001D        __end_of_Table_KeyCap 0356  
                __stringtab 0344                ?_ClearResSum 0072                     _KeyData 0036  
                   _KeyFlag 0042                     _KeyIsIn 037D                     _KeyHave 03B9  
            ClearResSum@cnt 0074              ?_CheckTouchKey 0072                   ?_procKey1 0072  
                 ?_procKey2 0072     CheckOnceResult@KeyValue 0055            _CheckKeyOldValue 0106  
   CheckOnceResult@OldValue 0052                   ?_startPWM 0072      TurnKeyFlags@KeyNoTimes 0044  
      GetTouchKeyValue@temp 0075                     _b_kover 0383                     __ptext1 03D3  
                   __ptext2 03AC                     __ptext3 01E0                     __ptext4 0187  
                   __ptext5 02DA                     __ptext6 03E2                     __ptext7 03E6  
                   __ptext8 03CD                     __ptext9 03EA                     _initPWM 03AC  
                   _pwmFlag 0386                 ?_checkIRKey 0072                     _pwmTime 0079  
   __size_of_CheckValidTime 0012                     clrloop0 03C6        end_of_initialization 0016  
                ??_procKey1 0074                  ??_procKey2 0074                _KeyOldValue0 002C  
              _KeyOldValue1 0028                _KeyOldValue2 0024       __size_of_KeyStopClear 0015  
                ??_startPWM 0074                ?_KeyClearOne 0072                _KeyReference 0020  
          ?_CheckOnceResult 0072                ??_KeyClearIn 0076          CheckOnceResult@cnt 005A  
           ??_CheckTouchKey 0078                _KeyStopClear 032F            _GetTouchKeyValue 0242  
       __size_of_checkIRKey 0033                ?_Init_System 0072          __end_of_KeyClearIn 03AC  
                 _KeyMaxSub 0047                   _KeyResSum 0030                 __end_ofPL10 0181  
               __end_ofPL12 032F                 __end_ofPL14 0187               __pbitnvCOMMON 03C0  
       start_initialization 000B                   _KeyServer 0187                   _Isr_Timer 0297  
      __size_of_ClearResSum 000F               _sendStartFlag 0389               ?_TurnKeyFlags 0072  
  TurnKeyFlags@KeyHaveTimes 0045                 __pdataBANK0 005B                _Table_KeyCap 0354  
               __pbssCOMMON 0079                  ?_KeyServer 0072                   ___latbits 0000  
             __pcstackBANK0 004E              _CheckValidTime 036B    __end_of_CheckKeyOldValue 0160  
                ?_Isr_Timer 0072                    ?_KeyIsIn 0072                    ?_KeyHave 0074  
            ??_TurnKeyFlags 0077           __size_of_procKey1 001E           __size_of_procKey2 001E  
                 __pstrings 0344           __size_of_startPWM 0005                   __pswtext1 03D8  
                 __pswtext2 03DD        __size_of_KeyClearOne 0013                    ?_initPWM 0072  
                 _keyCount0 003C                   _keyCount1 003A      __end_of_CheckValidTime 037D  
              ??_checkIRKey 0074         GetTouchKeyValue@cnt 0076              __size_of_mode1 0004  
            __size_of_mode2 0004              __size_of_mode3 0004              __size_of_mode4 0004  
            __size_of_mode5 0004              __size_of_modea 0004              __size_of_modeb 0004  
            __size_of_modec 0006              __size_of_moded 0004              __size_of_modee 0004  
                  _KEYDATAH 0095                    _KEYDATAL 0094           interrupt_function 0004  
                 clear_ram0 03C5         CheckKeyOldValue@cnt 0052          __end_of_checkIRKey 0213  
                  KeyIsIn@i 0074                 __stringbase 0349        __size_of_Init_System 0020  
     __end_of_Table_KeyFalg 0352       __end_of_Table_KeyDown 0354    __end_of_GetTouchKeyValue 0271  
           ?_CheckValidTime 0072                 ??_KeyServer 0074                 _keyLockFlag 0385  
               ??_Isr_Timer 0072                    _MainTime 004D            __size_of_KeyIsIn 0012  
          __size_of_KeyHave 000C            _Table_KeyChannel 0356          __end_of__stringtab 034A  
              _revZeroCount 004A                    _b_kover1 0382        __end_of_TurnKeyFlags 0242  
          __size_of_initPWM 000D     CheckValidTime@validtime 0034                    __ptext10 03EE  
                  __ptext11 02F8                    __ptext20 039E                    __ptext12 03F2  
                  __ptext21 032F                    __ptext13 03F6                    __ptext30 0297  
                  __ptext22 0242                    __ptext14 03FA                    __ptext23 038F  
                  __ptext15 03FE                    __ptext24 036B                    __ptext16 0402  
                  __ptext25 0018                    __ptext17 02BA                    __ptext26 03B9  
                  __ptext18 0271                    __ptext27 0316                    __ptext19 0213  
                  __ptext28 0106                    __ptext29 037D    __size_of_CheckOnceResult 00D5  
             __size_of_main 0013                    _sendFlag 03C0                    _revCount 004B  
                  _pwm0Step 005C                    _pwm1Step 005B       __end_of_CheckTouchKey 0297  
                  _procKey1 02F8                    _procKey2 02DA                    _startPWM 03D3  
   CheckKeyOldValue@counter 0046           ?_CheckKeyOldValue 0072                    intlevel1 0000  
             ??_ClearResSum 0074          ??_CheckKeyOldValue 0076                   stringcode 0344  
                _B_MainLoop 038A                  _OPTION_REG 0081                    stringdir 0344  
                  stringtab 0344              KeyClearOne@cnt 0074               KeyClearIn@cnt 0076  
       __end_of_ClearResSum 039E           ??_CheckOnceResult 004E  
