

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sun Aug 09 18:39:07 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F2852
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	bitnvCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	swtext1,local,class=CONST,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	swtext2,local,class=CONST,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	intentry,global,class=CODE,delta=2
    49                           	psect	pa_nodes0,global,class=CODE,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     
    52                           ; Version 1.45
    53                           ; Generated 16/11/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC16F887 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	idataBANK0
    88  0000                     __pidataBANK0:	
    89                           
    90                           	psect	strings
    91  032A                     __pstrings:	
    92  032A                     stringtab:	
    93  032A                     __stringtab:	
    94  032A                     stringcode:	
    95                           ;	String table - string pointers are 1 byte each
    96                           
    97  032A                     stringdir:	
    98  032A  3003               	movlw	high stringdir
    99  032B  008A               	movwf	10
   100  032C  0804               	movf	4,w
   101  032D  0A84               	incf	4,f
   102  032E  0782               	addwf	2,f
   103  032F                     __stringbase:	
   104  032F  3400               	retlw	0
   105  0330                     __end_of__stringtab:	
   106  0330                     _Table_KeyFalg:	
   107  0330  3401               	retlw	1
   108  0331  3402               	retlw	2
   109  0332  3404               	retlw	4
   110  0333  3408               	retlw	8
   111  0334  3410               	retlw	16
   112  0335  3420               	retlw	32
   113  0336  3440               	retlw	64
   114  0337  3480               	retlw	128
   115  0338                     __end_of_Table_KeyFalg:	
   116  0338                     _Table_KeyDown:	
   117  0338  340A               	retlw	10
   118  0339  340A               	retlw	10
   119  033A                     __end_of_Table_KeyDown:	
   120  033A                     _Table_KeyCap:	
   121  033A  3402               	retlw	2
   122  033B  3402               	retlw	2
   123  033C                     __end_of_Table_KeyCap:	
   124  033C                     _Table_KeyChannel:	
   125  033C  3460               	retlw	96
   126  033D  3461               	retlw	97
   127  033E                     __end_of_Table_KeyChannel:	
   128                           
   129                           	psect	bitnvCOMMON
   130  03C0                     __pbitnvCOMMON:	
   131  03C0                     _sendFlag:	
   132  03C0                     	ds	1
   133  001D                     _PWMCON2	set	29
   134  001C                     _PWMD01H	set	28
   135  0018                     _PWMD1L	set	24
   136  0017                     _PWMD0L	set	23
   137  0016                     _PWMTH	set	22
   138  0015                     _PWMTL	set	21
   139  0014                     _PWMCON1	set	20
   140  0013                     _PWMCON0	set	19
   141  0012                     _T2CON	set	18
   142  000D                     _PIE1	set	13
   143  000C                     _PIR1	set	12
   144  000B                     _INTCON	set	11
   145  0008                     _WPUB	set	8
   146  0007                     _WPUA	set	7
   147  0006                     _PORTB	set	6
   148  0005                     _PORTA	set	5
   149  0061                     _TMR2IF	set	97
   150  0095                     _KEYDATAH	set	149
   151  0094                     _KEYDATAL	set	148
   152  0093                     _KEYCON1	set	147
   153  0092                     _KEYCON0	set	146
   154  0091                     _PR2	set	145
   155  0088                     _OSCCON	set	136
   156  0087                     _WPDB	set	135
   157  0086                     _TRISB	set	134
   158  0085                     _TRISA	set	133
   159  0081                     _OPTION_REG	set	129
   160                           
   161                           	psect	cinit
   162  000B                     start_initialization:	
   163                           ; #config settings
   164                           
   165  000B                     __initialization:	
   166                           
   167                           ;initializer for _pwm1Step
   168  000B  3001               	movlw	1
   169  000C  00D7               	movwf	__pdataBANK0& (0+127)
   170                           
   171                           ;initializer for _pwm0Step
   172  000D  00D8               	movwf	(__pdataBANK0+1)& (0+127)
   173  000E  3020               	movlw	low __pbssBANK0
   174                           
   175                           ; Clear objects allocated to BANK0
   176  000F  1383               	bcf	3,7	;select IRP bank0
   177  0010  0084               	movwf	4
   178  0011  304A               	movlw	low (__pbssBANK0+42)
   179  0012  23AB               	fcall	clear_ram0
   180                           
   181                           ; Clear objects allocated to COMMON
   182  0013  01F9               	clrf	__pbssCOMMON& (0+127)
   183                           
   184                           ; Clear objects allocated to BITCOMMON
   185  0014  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   186  0015  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   187  0016                     end_of_initialization:	
   188                           ;End of C runtime variable initialization code
   189                           
   190  0016                     __end_of__initialization:	
   191  0016  0183               	clrf	3
   192  0017  2B3E               	ljmp	_main	;jump to C main() function
   193                           
   194                           	psect	bitbssCOMMON
   195  0380                     __pbitbssCOMMON:	
   196  0380                     _b_kerr:	
   197  0380                     	ds	1
   198  0381                     _b_kclr:	
   199  0381                     	ds	1
   200  0382                     _b_kover1:	
   201  0382                     	ds	1
   202  0383                     _b_kover:	
   203  0383                     	ds	1
   204  0384                     _doubleTouchFlag:	
   205  0384                     	ds	1
   206  0385                     _keyLockFlag:	
   207  0385                     	ds	1
   208  0386                     _pwmFlag:	
   209  0386                     	ds	1
   210  0387                     _ONFlag:	
   211  0387                     	ds	1
   212  0388                     _doublePressFlag:	
   213  0388                     	ds	1
   214  0389                     _sendStartFlag:	
   215  0389                     	ds	1
   216  038A                     _B_MainLoop:	
   217  038A                     	ds	1
   218                           
   219                           	psect	bssCOMMON
   220  0079                     __pbssCOMMON:	
   221  0079                     _pwmTime:	
   222  0079                     	ds	1
   223                           
   224                           	psect	bssBANK0
   225  0020                     __pbssBANK0:	
   226  0020                     _KeyReference:	
   227  0020                     	ds	4
   228  0024                     _KeyOldValue2:	
   229  0024                     	ds	4
   230  0028                     _KeyOldValue1:	
   231  0028                     	ds	4
   232  002C                     _KeyOldValue0:	
   233  002C                     	ds	4
   234  0030                     _KeyResSum:	
   235  0030                     	ds	4
   236  0034                     CheckValidTime@validtime:	
   237  0034                     	ds	2
   238  0036                     _KeyData:	
   239  0036                     	ds	2
   240  0038                     _KeyOldData:	
   241  0038                     	ds	2
   242  003A                     KeyServer@KeyOldFlag:	
   243  003A                     	ds	2
   244  003C                     _KeyUpShake:	
   245  003C                     	ds	2
   246  003E                     _KeyFlag:	
   247  003E                     	ds	2
   248  0040                     TurnKeyFlags@KeyNoTimes:	
   249  0040                     	ds	1
   250  0041                     TurnKeyFlags@KeyHaveTimes:	
   251  0041                     	ds	1
   252  0042                     CheckKeyOldValue@counter:	
   253  0042                     	ds	1
   254  0043                     _KeyMaxSub:	
   255  0043                     	ds	1
   256  0044                     _KeyCounter:	
   257  0044                     	ds	1
   258  0045                     _checkCount:	
   259  0045                     	ds	1
   260  0046                     _revZeroCount:	
   261  0046                     	ds	1
   262  0047                     _revCount:	
   263  0047                     	ds	1
   264  0048                     _irStep:	
   265  0048                     	ds	1
   266  0049                     _MainTime:	
   267  0049                     	ds	1
   268                           
   269                           	psect	dataBANK0
   270  0057                     __pdataBANK0:	
   271  0057                     _pwm1Step:	
   272  0057                     	ds	1
   273  0058                     _pwm0Step:	
   274  0058                     	ds	1
   275                           
   276                           	psect	clrtext
   277  03AB                     clear_ram0:	
   278                           ;	Called with FSR containing the base address, and
   279                           ;	W with the last address+1
   280                           
   281  03AB  0064               	clrwdt	;clear the watchdog before getting into this loop
   282  03AC                     clrloop0:	
   283  03AC  0180               	clrf	0	;clear RAM location pointed to by FSR
   284  03AD  0A84               	incf	4,f	;increment pointer
   285  03AE  0604               	xorwf	4,w	;XOR with final address
   286  03AF  1903               	btfsc	3,2	;have we reached the end yet?
   287  03B0  3400               	retlw	0	;all done for this memory range, return
   288  03B1  0604               	xorwf	4,w	;XOR again to restore value
   289  03B2  2BAC               	goto	clrloop0	;do the next byte
   290                           
   291                           	psect	cstackCOMMON
   292  0072                     __pcstackCOMMON:	
   293  0072                     ?_mode1:	
   294  0072                     ?_mode2:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0072                     ?_mode3:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0072                     ?_mode4:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0072                     ?_mode5:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0072                     ?_modea:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0072                     ?_modeb:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0072                     ?_modec:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0072                     ?_moded:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0072                     ?_modee:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0072                     ?_initPWM:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0072                     ?_CheckTouchKey:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0072                     ?_Init_System:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0072                     ?_procKey1:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0072                     ?_procKey2:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0072                     ?_startPWM:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0072                     ?_KeyServer:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0072                     ?_checkIRKey:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0072                     ?_Isr_Timer:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0072                     ??_Isr_Timer:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0072                     ?_main:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0072                     ?_KeyIsIn:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0072                     ?_KeyClearOne:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0072                     ?_KeyClearIn:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0072                     ?_KeyStopClear:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0072                     ?_ClearResSum:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0072                     ?_GetTouchKeyValue:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0072                     ?_CheckOnceResult:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0072                     ?_CheckKeyOldValue:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0072                     ?_TurnKeyFlags:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0072                     ?_CheckValidTime:	
   382                           ; 1 bytes @ 0x0
   383                           
   384                           
   385                           ; 1 bytes @ 0x0
   386  0072                     	ds	2
   387  0074                     ??_mode1:	
   388  0074                     ??_mode2:	
   389                           ; 1 bytes @ 0x2
   390                           
   391  0074                     ??_mode3:	
   392                           ; 1 bytes @ 0x2
   393                           
   394  0074                     ??_mode4:	
   395                           ; 1 bytes @ 0x2
   396                           
   397  0074                     ??_mode5:	
   398                           ; 1 bytes @ 0x2
   399                           
   400  0074                     ??_modea:	
   401                           ; 1 bytes @ 0x2
   402                           
   403  0074                     ??_modeb:	
   404                           ; 1 bytes @ 0x2
   405                           
   406  0074                     ??_modec:	
   407                           ; 1 bytes @ 0x2
   408                           
   409  0074                     ??_moded:	
   410                           ; 1 bytes @ 0x2
   411                           
   412  0074                     ??_modee:	
   413                           ; 1 bytes @ 0x2
   414                           
   415  0074                     ??_initPWM:	
   416                           ; 1 bytes @ 0x2
   417                           
   418  0074                     ??_Init_System:	
   419                           ; 1 bytes @ 0x2
   420                           
   421  0074                     ??_procKey1:	
   422                           ; 1 bytes @ 0x2
   423                           
   424  0074                     ??_procKey2:	
   425                           ; 1 bytes @ 0x2
   426                           
   427  0074                     ??_startPWM:	
   428                           ; 1 bytes @ 0x2
   429                           
   430  0074                     ??_KeyServer:	
   431                           ; 1 bytes @ 0x2
   432                           
   433  0074                     ??_checkIRKey:	
   434                           ; 1 bytes @ 0x2
   435                           
   436  0074                     ??_KeyIsIn:	
   437                           ; 1 bytes @ 0x2
   438                           
   439  0074                     ??_KeyClearOne:	
   440                           ; 1 bytes @ 0x2
   441                           
   442  0074                     ??_ClearResSum:	
   443                           ; 1 bytes @ 0x2
   444                           
   445  0074                     ?_KeyHave:	
   446                           ; 1 bytes @ 0x2
   447                           
   448  0074                     ??_CheckValidTime:	
   449                           ; 1 bytes @ 0x2
   450                           
   451  0074                     KeyIsIn@i:	
   452                           ; 1 bytes @ 0x2
   453                           
   454  0074                     KeyClearOne@cnt:	
   455                           ; 1 bytes @ 0x2
   456                           
   457  0074                     ClearResSum@cnt:	
   458                           ; 1 bytes @ 0x2
   459                           
   460  0074                     KeyServer@i:	
   461                           ; 1 bytes @ 0x2
   462                           
   463  0074                     KeyHave@flag:	
   464                           ; 2 bytes @ 0x2
   465                           
   466                           
   467                           ; 2 bytes @ 0x2
   468  0074                     	ds	1
   469  0075                     ??_KeyStopClear:	
   470  0075                     ??_GetTouchKeyValue:	
   471                           ; 1 bytes @ 0x3
   472                           
   473  0075                     KeyIsIn@cnt:	
   474                           ; 1 bytes @ 0x3
   475                           
   476  0075                     KeyStopClear@i:	
   477                           ; 1 bytes @ 0x3
   478                           
   479  0075                     GetTouchKeyValue@temp:	
   480                           ; 1 bytes @ 0x3
   481                           
   482                           
   483                           ; 1 bytes @ 0x3
   484  0075                     	ds	1
   485  0076                     ??_KeyClearIn:	
   486  0076                     ??_KeyHave:	
   487                           ; 1 bytes @ 0x4
   488                           
   489  0076                     ??_CheckKeyOldValue:	
   490                           ; 1 bytes @ 0x4
   491                           
   492  0076                     KeyClearIn@cnt:	
   493                           ; 1 bytes @ 0x4
   494                           
   495  0076                     KeyHave@cnt:	
   496                           ; 1 bytes @ 0x4
   497                           
   498  0076                     GetTouchKeyValue@cnt:	
   499                           ; 1 bytes @ 0x4
   500                           
   501                           
   502                           ; 1 bytes @ 0x4
   503  0076                     	ds	1
   504  0077                     ??_TurnKeyFlags:	
   505                           
   506                           ; 1 bytes @ 0x5
   507  0077                     	ds	1
   508  0078                     ??_CheckTouchKey:	
   509  0078                     ??_main:	
   510                           ; 1 bytes @ 0x6
   511                           
   512                           
   513                           	psect	cstackBANK0
   514  004A                     __pcstackBANK0:	
   515                           ; 1 bytes @ 0x6
   516                           
   517  004A                     ??_CheckOnceResult:	
   518  004A                     CheckKeyOldValue@KeyResTemp:	
   519                           ; 1 bytes @ 0x0
   520                           
   521                           
   522                           ; 2 bytes @ 0x0
   523  004A                     	ds	2
   524  004C                     CheckKeyOldValue@KeyOldTemp:	
   525                           
   526                           ; 2 bytes @ 0x2
   527  004C                     	ds	2
   528  004E                     CheckKeyOldValue@cnt:	
   529  004E                     CheckOnceResult@OldValue:	
   530                           ; 1 bytes @ 0x4
   531                           
   532                           
   533                           ; 2 bytes @ 0x4
   534  004E                     	ds	2
   535  0050                     CheckOnceResult@flag:	
   536                           
   537                           ; 1 bytes @ 0x6
   538  0050                     	ds	1
   539  0051                     CheckOnceResult@KeyValue:	
   540                           
   541                           ; 2 bytes @ 0x7
   542  0051                     	ds	2
   543  0053                     CheckOnceResult@KeyDown:	
   544                           
   545                           ; 1 bytes @ 0x9
   546  0053                     	ds	1
   547  0054                     CheckOnceResult@KeyResTemp:	
   548                           
   549                           ; 2 bytes @ 0xA
   550  0054                     	ds	2
   551  0056                     CheckOnceResult@cnt:	
   552                           
   553                           ; 1 bytes @ 0xC
   554  0056                     	ds	1
   555                           
   556                           	psect	maintext
   557  033E                     __pmaintext:	
   558 ;;
   559 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   560 ;;
   561 ;; *************** function _main *****************
   562 ;; Defined at:
   563 ;;		line 309 in file "C:\Users\mxy\Desktop\keytest2\main.c"
   564 ;; Parameters:    Size  Location     Type
   565 ;;		None
   566 ;; Auto vars:     Size  Location     Type
   567 ;;		None
   568 ;; Return value:  Size  Location     Type
   569 ;;                  1    wreg      void 
   570 ;; Registers used:
   571 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   572 ;; Tracked objects:
   573 ;;		On entry : B00/0
   574 ;;		On exit  : 300/0
   575 ;;		Unchanged: 0/0
   576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   577 ;;      Params:         0       0       0       0
   578 ;;      Locals:         0       0       0       0
   579 ;;      Temps:          0       0       0       0
   580 ;;      Totals:         0       0       0       0
   581 ;;Total ram usage:        0 bytes
   582 ;; Hardware stack levels required when called:    6
   583 ;; This function calls:
   584 ;;		_CheckTouchKey
   585 ;;		_Init_System
   586 ;;		_KeyServer
   587 ;;		_checkIRKey
   588 ;;		_startPWM
   589 ;; This function is called by:
   590 ;;		Startup code after reset
   591 ;; This function uses a non-reentrant model
   592 ;;
   593                           
   594                           
   595                           ;psect for function _main
   596  033E                     _main:	
   597                           
   598                           ;main.c: 311: PORTB = 0x00;
   599                           
   600                           ;incstack = 0
   601                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   602  033E  0186               	clrf	6	;volatile
   603                           
   604                           ;main.c: 312: PORTA = 0x00;
   605  033F  0185               	clrf	5	;volatile
   606                           
   607                           ;main.c: 313: Init_System();
   608  0340  22A0               	fcall	_Init_System
   609                           
   610                           ;main.c: 314: sendFlag = 1;
   611  0341  1478               	bsf	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
   612  0342                     l571:	
   613                           ;main.c: 316: while(1)
   614                           
   615  0342  0064               	clrwdt	;# 
   616                           
   617                           ;main.c: 319: if(B_MainLoop)
   618  0343  1D71               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   619  0344  2B42               	goto	l571
   620                           
   621                           ;main.c: 320: {
   622                           ;main.c: 321: B_MainLoop = 0;
   623  0345  1171               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   624                           
   625                           ;main.c: 323: CheckTouchKey();
   626  0346  2257               	fcall	_CheckTouchKey
   627                           
   628                           ;main.c: 324: KeyServer();
   629  0347  2187               	fcall	_KeyServer
   630                           
   631                           ;main.c: 325: checkIRKey();
   632  0348  21C6               	fcall	_checkIRKey
   633                           
   634                           ;main.c: 326: if(ONFlag)
   635  0349  1FF0               	btfss	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   636  034A  2B4D               	goto	l2839
   637                           
   638                           ;main.c: 327: {
   639                           ;main.c: 328: startPWM();
   640  034B  23B9               	fcall	_startPWM
   641                           
   642                           ;main.c: 329: }
   643  034C  2B42               	goto	l571
   644  034D                     l2839:	
   645                           
   646                           ;main.c: 330: else
   647                           ;main.c: 331: {
   648                           ;main.c: 332: PWMCON0 = 0;
   649  034D  0193               	clrf	19	;volatile
   650                           
   651                           ;main.c: 333: PORTB &= 0x7F;
   652  034E  1386               	bcf	6,7	;volatile
   653                           
   654                           ;main.c: 334: PORTA &= 0xDF;
   655  034F  1285               	bcf	5,5	;volatile
   656  0350  2B42               	goto	l571
   657  0351                     __end_of_main:	
   658                           
   659                           	psect	text1
   660  03B9                     __ptext1:	
   661 ;; *************** function _startPWM *****************
   662 ;; Defined at:
   663 ;;		line 158 in file "C:\Users\mxy\Desktop\keytest2\main.c"
   664 ;; Parameters:    Size  Location     Type
   665 ;;		None
   666 ;; Auto vars:     Size  Location     Type
   667 ;;		None
   668 ;; Return value:  Size  Location     Type
   669 ;;                  1    wreg      void 
   670 ;; Registers used:
   671 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   672 ;; Tracked objects:
   673 ;;		On entry : 300/0
   674 ;;		On exit  : 300/0
   675 ;;		Unchanged: 0/0
   676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   677 ;;      Params:         0       0       0       0
   678 ;;      Locals:         0       0       0       0
   679 ;;      Temps:          0       0       0       0
   680 ;;      Totals:         0       0       0       0
   681 ;;Total ram usage:        0 bytes
   682 ;; Hardware stack levels used:    1
   683 ;; Hardware stack levels required when called:    3
   684 ;; This function calls:
   685 ;;		_initPWM
   686 ;;		_procKey1
   687 ;;		_procKey2
   688 ;; This function is called by:
   689 ;;		_main
   690 ;; This function uses a non-reentrant model
   691 ;;
   692                           
   693                           
   694                           ;psect for function _startPWM
   695  03B9                     _startPWM:	
   696                           
   697                           ;main.c: 160: --pwm0Step;
   698                           
   699                           ;incstack = 0
   700                           ; Regs used in _startPWM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   701  03B9  03D8               	decf	_pwm0Step,f
   702                           
   703                           ;main.c: 161: --pwm1Step;
   704  03BA  03D7               	decf	_pwm1Step,f
   705                           
   706                           ;main.c: 162: initPWM();
   707  03BB  2392               	fcall	_initPWM
   708                           
   709                           ;main.c: 163: procKey1();
   710  03BC  22DE               	fcall	_procKey1
   711                           
   712                           ;main.c: 164: procKey2();
   713  03BD  2AC0               	ljmp	l2273
   714  03BE                     __end_of_startPWM:	
   715                           
   716                           	psect	text2
   717  0392                     __ptext2:	
   718 ;; *************** function _initPWM *****************
   719 ;; Defined at:
   720 ;;		line 4 in file "C:\Users\mxy\Desktop\keytest2\pwm.c"
   721 ;; Parameters:    Size  Location     Type
   722 ;;		None
   723 ;; Auto vars:     Size  Location     Type
   724 ;;		None
   725 ;; Return value:  Size  Location     Type
   726 ;;                  1    wreg      void 
   727 ;; Registers used:
   728 ;;		wreg, status,2
   729 ;; Tracked objects:
   730 ;;		On entry : 300/0
   731 ;;		On exit  : 300/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   734 ;;      Params:         0       0       0       0
   735 ;;      Locals:         0       0       0       0
   736 ;;      Temps:          0       0       0       0
   737 ;;      Totals:         0       0       0       0
   738 ;;Total ram usage:        0 bytes
   739 ;; Hardware stack levels used:    1
   740 ;; Hardware stack levels required when called:    1
   741 ;; This function calls:
   742 ;;		Nothing
   743 ;; This function is called by:
   744 ;;		_startPWM
   745 ;; This function uses a non-reentrant model
   746 ;;
   747                           
   748                           
   749                           ;psect for function _initPWM
   750  0392                     _initPWM:	
   751                           
   752                           ;pwm.c: 6: PWMCON1 = 0x40;
   753                           
   754                           ;incstack = 0
   755                           ; Regs used in _initPWM: [wreg+status,2]
   756  0392  3040               	movlw	64
   757  0393  0094               	movwf	20	;volatile
   758                           
   759                           ;pwm.c: 7: PWMCON0 = 0x23;
   760  0394  3023               	movlw	35
   761  0395  0093               	movwf	19	;volatile
   762                           
   763                           ;pwm.c: 8: PWMCON2 = 0;
   764  0396  019D               	clrf	29	;volatile
   765                           
   766                           ;pwm.c: 9: PWMTH = 0;
   767  0397  0196               	clrf	22	;volatile
   768                           
   769                           ;pwm.c: 10: PWMTL = 125;
   770  0398  307D               	movlw	125
   771  0399  0095               	movwf	21	;volatile
   772                           
   773                           ;pwm.c: 11: PWMD0L = 1;
   774  039A  3001               	movlw	1
   775  039B  0097               	movwf	23	;volatile
   776                           
   777                           ;pwm.c: 12: PWMD1L = 1;
   778  039C  0098               	movwf	24	;volatile
   779                           
   780                           ;pwm.c: 13: PWMD01H = 0;
   781  039D  019C               	clrf	28	;volatile
   782  039E  0008               	return
   783  039F                     __end_of_initPWM:	
   784                           
   785                           	psect	text3
   786  01C6                     __ptext3:	
   787 ;; *************** function _checkIRKey *****************
   788 ;; Defined at:
   789 ;;		line 223 in file "C:\Users\mxy\Desktop\keytest2\main.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;		None
   792 ;; Auto vars:     Size  Location     Type
   793 ;;		None
   794 ;; Return value:  Size  Location     Type
   795 ;;                  1    wreg      void 
   796 ;; Registers used:
   797 ;;		wreg, status,2, status,0
   798 ;; Tracked objects:
   799 ;;		On entry : 300/0
   800 ;;		On exit  : 300/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   803 ;;      Params:         0       0       0       0
   804 ;;      Locals:         0       0       0       0
   805 ;;      Temps:          1       0       0       0
   806 ;;      Totals:         1       0       0       0
   807 ;;Total ram usage:        1 bytes
   808 ;; Hardware stack levels used:    1
   809 ;; Hardware stack levels required when called:    1
   810 ;; This function calls:
   811 ;;		Nothing
   812 ;; This function is called by:
   813 ;;		_main
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           
   818                           ;psect for function _checkIRKey
   819  01C6                     _checkIRKey:	
   820                           
   821                           ;main.c: 225: if(((PORTB) >> (2)&1))
   822                           
   823                           ;incstack = 0
   824                           ; Regs used in _checkIRKey: [wreg+status,2+status,0]
   825  01C6  0806               	movf	6,w	;volatile
   826  01C7  00F4               	movwf	??_checkIRKey
   827  01C8  1003               	clrc
   828  01C9  0CF4               	rrf	??_checkIRKey,f
   829  01CA  1003               	clrc
   830  01CB  0CF4               	rrf	??_checkIRKey,f
   831  01CC  1874               	btfsc	??_checkIRKey,0
   832                           
   833                           ;main.c: 226: {
   834                           ;main.c: 227: revCount++;
   835  01CD  0AC7               	incf	_revCount,f
   836                           
   837                           ;main.c: 228: }
   838                           ;main.c: 230: if(checkCount > 10 && irStep)
   839  01CE  300B               	movlw	11
   840  01CF  0245               	subwf	_checkCount,w
   841  01D0  1C03               	skipc
   842  01D1  29D7               	goto	l546
   843  01D2  0848               	movf	_irStep,w	;volatile
   844  01D3  1903               	btfsc	3,2
   845  01D4  29D7               	goto	l546
   846                           
   847                           ;main.c: 231: {
   848                           ;main.c: 232: sendFlag = 0;
   849  01D5  1078               	bcf	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
   850                           
   851                           ;main.c: 233: }
   852  01D6  29D8               	goto	l2549
   853  01D7                     l546:	
   854                           
   855                           ;main.c: 234: else
   856                           ;main.c: 235: {
   857                           ;main.c: 236: sendFlag = 1;
   858  01D7  1478               	bsf	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
   859  01D8                     l2549:	
   860                           
   861                           ;main.c: 237: }
   862                           ;main.c: 239: if(++checkCount >= 20)
   863  01D8  3014               	movlw	20
   864  01D9  0AC5               	incf	_checkCount,f
   865  01DA  0245               	subwf	_checkCount,w
   866  01DB  1C03               	skipc
   867  01DC  0008               	return
   868                           
   869                           ;main.c: 240: {
   870                           ;main.c: 241: if(revCount > 2)
   871  01DD  3003               	movlw	3
   872  01DE  0247               	subwf	_revCount,w
   873  01DF  1C03               	skipc
   874  01E0  29ED               	goto	l2563
   875                           
   876                           ;main.c: 242: {
   877                           ;main.c: 243: if(irStep == 0)
   878  01E1  0848               	movf	_irStep,w	;volatile
   879  01E2  1D03               	btfss	3,2
   880  01E3  29EB               	goto	l2561
   881                           
   882                           ;main.c: 244: {
   883                           ;main.c: 245: irStep = 1;
   884  01E4  3001               	movlw	1
   885  01E5  00C8               	movwf	_irStep	;volatile
   886                           
   887                           ;main.c: 246: if(ONFlag == 1)
   888  01E6  1FF0               	btfss	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   889  01E7  29EA               	goto	l551
   890                           
   891                           ;main.c: 247: {
   892                           ;main.c: 248: ONFlag = 0;
   893  01E8  13F0               	bcf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   894                           
   895                           ;main.c: 249: }
   896  01E9  29EB               	goto	l2561
   897  01EA                     l551:	
   898                           
   899                           ;main.c: 250: else
   900                           ;main.c: 251: {
   901                           ;main.c: 252: ONFlag = 1;
   902  01EA  17F0               	bsf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   903  01EB                     l2561:	
   904                           
   905                           ;main.c: 253: }
   906                           ;main.c: 254: }
   907                           ;main.c: 255: revZeroCount = 0;
   908  01EB  01C6               	clrf	_revZeroCount
   909                           
   910                           ;main.c: 256: }
   911  01EC  29F5               	goto	l2569
   912  01ED                     l2563:	
   913                           
   914                           ;main.c: 257: else
   915                           ;main.c: 258: {
   916                           ;main.c: 259: if(++revZeroCount > 1)
   917  01ED  3002               	movlw	2
   918  01EE  0AC6               	incf	_revZeroCount,f
   919  01EF  0246               	subwf	_revZeroCount,w
   920  01F0  1C03               	skipc
   921  01F1  29F5               	goto	l2569
   922                           
   923                           ;main.c: 260: {
   924                           ;main.c: 261: revZeroCount = 1;
   925  01F2  01C6               	clrf	_revZeroCount
   926  01F3  0AC6               	incf	_revZeroCount,f
   927                           
   928                           ;main.c: 262: irStep = 0;
   929  01F4  01C8               	clrf	_irStep	;volatile
   930  01F5                     l2569:	
   931                           
   932                           ;main.c: 263: }
   933                           ;main.c: 264: }
   934                           ;main.c: 267: sendFlag = 1;
   935  01F5  1478               	bsf	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
   936                           
   937                           ;main.c: 268: checkCount = 0;
   938  01F6  01C5               	clrf	_checkCount
   939                           
   940                           ;main.c: 269: revCount = 0;
   941  01F7  01C7               	clrf	_revCount
   942  01F8  0008               	return
   943  01F9                     __end_of_checkIRKey:	
   944                           
   945                           	psect	text4
   946  0187                     __ptext4:	
   947 ;; *************** function _KeyServer *****************
   948 ;; Defined at:
   949 ;;		line 172 in file "C:\Users\mxy\Desktop\keytest2\main.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;		None
   952 ;; Auto vars:     Size  Location     Type
   953 ;;  i               2    2[COMMON] unsigned int 
   954 ;; Return value:  Size  Location     Type
   955 ;;                  1    wreg      void 
   956 ;; Registers used:
   957 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   958 ;; Tracked objects:
   959 ;;		On entry : 300/0
   960 ;;		On exit  : 300/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   963 ;;      Params:         0       0       0       0
   964 ;;      Locals:         2       0       0       0
   965 ;;      Temps:          0       0       0       0
   966 ;;      Totals:         2       0       0       0
   967 ;;Total ram usage:        2 bytes
   968 ;; Hardware stack levels used:    1
   969 ;; Hardware stack levels required when called:    3
   970 ;; This function calls:
   971 ;;		_procKey1
   972 ;;		_procKey2
   973 ;; This function is called by:
   974 ;;		_main
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           
   979                           ;psect for function _KeyServer
   980  0187                     _KeyServer:	
   981                           
   982                           ;main.c: 174: static unsigned int KeyOldFlag = 0;
   983                           ;main.c: 175: unsigned int i = (unsigned int)((KeyFlag[1]<<8) | KeyFlag[0]);
   984                           
   985                           ;incstack = 0
   986                           ; Regs used in _KeyServer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   987  0187  083F               	movf	_KeyFlag+1,w	;volatile
   988  0188  00F5               	movwf	KeyServer@i+1
   989  0189  083E               	movf	_KeyFlag,w	;volatile
   990  018A  00F4               	movwf	KeyServer@i
   991                           
   992                           ;main.c: 176: if(i)
   993  018B  0475               	iorwf	KeyServer@i+1,w
   994  018C  1903               	btfsc	3,2
   995  018D  29BD               	goto	l2523
   996                           
   997                           ;main.c: 177: {
   998                           ;main.c: 179: if(i != KeyOldFlag)
   999  018E  083B               	movf	KeyServer@KeyOldFlag+1,w
  1000  018F  0675               	xorwf	KeyServer@i+1,w
  1001  0190  1D03               	skipz
  1002  0191  2994               	goto	u1115
  1003  0192  083A               	movf	KeyServer@KeyOldFlag,w
  1004  0193  0674               	xorwf	KeyServer@i,w
  1005  0194                     u1115:	
  1006  0194  1903               	skipnz
  1007  0195  29BB               	goto	l530
  1008                           
  1009                           ;main.c: 180: {
  1010                           ;main.c: 181: if(keyLockFlag)
  1011  0196  1EF0               	btfss	_keyLockFlag/(0+8),_keyLockFlag& (0+7)	;volatile
  1012  0197  299A               	goto	l2509
  1013                           
  1014                           ;main.c: 182: {
  1015                           ;main.c: 183: doubleTouchFlag = 1;
  1016  0198  1670               	bsf	_doubleTouchFlag/(0+8),_doubleTouchFlag& (0+7)	;volatile
  1017                           
  1018                           ;main.c: 184: return;
  1019  0199  0008               	return
  1020  019A                     l2509:	
  1021                           
  1022                           ;main.c: 185: }
  1023                           ;main.c: 186: KeyOldFlag = i;
  1024  019A  0875               	movf	KeyServer@i+1,w
  1025  019B  00BB               	movwf	KeyServer@KeyOldFlag+1
  1026  019C  0874               	movf	KeyServer@i,w
  1027  019D  00BA               	movwf	KeyServer@KeyOldFlag
  1028                           
  1029                           ;main.c: 187: switch(i)
  1030  019E  29A5               	goto	l2521
  1031  019F                     l2511:	
  1032                           
  1033                           ;main.c: 190: procKey1();
  1034  019F  22DE               	fcall	_procKey1
  1035                           
  1036                           ;main.c: 191: break;
  1037  01A0  29BB               	goto	l530
  1038  01A1                     l2513:	
  1039                           
  1040                           ;main.c: 193: procKey2();
  1041  01A1  22C0               	fcall	_procKey2
  1042                           
  1043                           ;main.c: 194: break;
  1044  01A2  29BB               	goto	l530
  1045  01A3                     l537:	
  1046                           ;main.c: 195: case 3:
  1047                           
  1048                           
  1049                           ;main.c: 196: doublePressFlag = 1;
  1050  01A3  1471               	bsf	_doublePressFlag/(0+8),_doublePressFlag& (0+7)	;volatile
  1051                           
  1052                           ;main.c: 197: break;
  1053  01A4  29BB               	goto	l530
  1054  01A5                     l2521:	
  1055                           
  1056                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1057                           ; Switch size 1, requested type "space"
  1058                           ; Number of cases is 1, Range of values is 0 to 0
  1059                           ; switch strategies available:
  1060                           ; Name         Instructions Cycles
  1061                           ; simple_byte            4     3 (average)
  1062                           ; direct_byte            7     6 (fixed)
  1063                           ; jumptable            260     6 (fixed)
  1064                           ;	Chosen strategy is simple_byte
  1065  01A5  0875               	movf	KeyServer@i+1,w
  1066  01A6  3A00               	xorlw	0	; case 0
  1067  01A7  1903               	skipnz
  1068  01A8  29AA               	goto	l2905
  1069  01A9  29BB               	goto	l530
  1070  01AA                     l2905:	
  1071                           
  1072                           ; Switch size 1, requested type "space"
  1073                           ; Number of cases is 5, Range of values is 1 to 8
  1074                           ; switch strategies available:
  1075                           ; Name         Instructions Cycles
  1076                           ; simple_byte           16     9 (average)
  1077                           ; direct_byte           17     9 (fixed)
  1078                           ; jumptable            263     9 (fixed)
  1079                           ;	Chosen strategy is simple_byte
  1080  01AA  0874               	movf	KeyServer@i,w
  1081  01AB  3A01               	xorlw	1	; case 1
  1082  01AC  1903               	skipnz
  1083  01AD  299F               	goto	l2511
  1084  01AE  3A03               	xorlw	3	; case 2
  1085  01AF  1903               	skipnz
  1086  01B0  29A1               	goto	l2513
  1087  01B1  3A01               	xorlw	1	; case 3
  1088  01B2  1903               	skipnz
  1089  01B3  29A3               	goto	l537
  1090  01B4  3A07               	xorlw	7	; case 4
  1091  01B5  1903               	skipnz
  1092  01B6  299F               	goto	l2511
  1093  01B7  3A0C               	xorlw	12	; case 8
  1094  01B8  1903               	skipnz
  1095  01B9  29A1               	goto	l2513
  1096  01BA  29BB               	goto	l530
  1097  01BB                     l530:	
  1098                           
  1099                           ;main.c: 207: }
  1100                           ;main.c: 208: keyLockFlag = 1;
  1101  01BB  16F0               	bsf	_keyLockFlag/(0+8),_keyLockFlag& (0+7)	;volatile
  1102                           
  1103                           ;main.c: 209: }
  1104  01BC  0008               	return
  1105  01BD                     l2523:	
  1106                           
  1107                           ;main.c: 210: else
  1108                           ;main.c: 211: {
  1109                           ;main.c: 212: KeyOldFlag = 0;
  1110  01BD  01BA               	clrf	KeyServer@KeyOldFlag
  1111  01BE  01BB               	clrf	KeyServer@KeyOldFlag+1
  1112                           
  1113                           ;main.c: 213: keyLockFlag = 0;
  1114  01BF  12F0               	bcf	_keyLockFlag/(0+8),_keyLockFlag& (0+7)	;volatile
  1115                           
  1116                           ;main.c: 214: if(doubleTouchFlag)
  1117  01C0  1E70               	btfss	_doubleTouchFlag/(0+8),_doubleTouchFlag& (0+7)	;volatile
  1118  01C1  0008               	return
  1119                           
  1120                           ;main.c: 215: {
  1121                           ;main.c: 217: ONFlag = !ONFlag;
  1122  01C2  3080               	movlw	(0+1) shl (_ONFlag& (0+7))
  1123  01C3  06F0               	xorwf	_ONFlag/(0+8),f
  1124                           
  1125                           ;main.c: 218: }
  1126                           ;main.c: 219: doubleTouchFlag = 0;
  1127  01C4  1270               	bcf	_doubleTouchFlag/(0+8),_doubleTouchFlag& (0+7)	;volatile
  1128  01C5  0008               	return
  1129  01C6                     __end_of_KeyServer:	
  1130                           
  1131                           	psect	text5
  1132  02C0                     __ptext5:	
  1133 ;; *************** function _procKey2 *****************
  1134 ;; Defined at:
  1135 ;;		line 130 in file "C:\Users\mxy\Desktop\keytest2\main.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;		None
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  1    wreg      void 
  1142 ;; Registers used:
  1143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 300/0
  1146 ;;		On exit  : 300/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1149 ;;      Params:         0       0       0       0
  1150 ;;      Locals:         0       0       0       0
  1151 ;;      Temps:          0       0       0       0
  1152 ;;      Totals:         0       0       0       0
  1153 ;;Total ram usage:        0 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:    2
  1156 ;; This function calls:
  1157 ;;		_modea
  1158 ;;		_modeb
  1159 ;;		_modec
  1160 ;;		_moded
  1161 ;;		_modee
  1162 ;; This function is called by:
  1163 ;;		_startPWM
  1164 ;;		_KeyServer
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           
  1169                           ;psect for function _procKey2
  1170  02C0                     _procKey2:	
  1171  02C0                     l2273:	
  1172                           ;incstack = 0
  1173                           ; Regs used in _procKey2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1174                           
  1175                           
  1176                           ;main.c: 132: if(ONFlag == 0)
  1177  02C0  1FF0               	btfss	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
  1178  02C1  0008               	return
  1179                           
  1180                           ;main.c: 134: pwmFlag = 1;
  1181  02C2  1770               	bsf	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
  1182                           
  1183                           ;main.c: 135: if(++pwm1Step > 5)
  1184  02C3  3006               	movlw	6
  1185  02C4  0AD7               	incf	_pwm1Step,f
  1186  02C5  0257               	subwf	_pwm1Step,w
  1187  02C6  1C03               	skipc
  1188  02C7  2ACA               	goto	l2293
  1189                           
  1190                           ;main.c: 136: pwm1Step = 1;
  1191  02C8  01D7               	clrf	_pwm1Step
  1192  02C9  0AD7               	incf	_pwm1Step,f
  1193  02CA                     l2293:	
  1194                           ;main.c: 153: break;
  1195                           
  1196  02CA  0857               	movf	_pwm1Step,w
  1197                           
  1198                           ; Switch size 1, requested type "space"
  1199                           ; Number of cases is 5, Range of values is 1 to 5
  1200                           ; switch strategies available:
  1201                           ; Name         Instructions Cycles
  1202                           ; direct_byte           14     9 (fixed)
  1203                           ; simple_byte           16     9 (average)
  1204                           ; jumptable            263     9 (fixed)
  1205                           ;	Chosen strategy is direct_byte
  1206  02CB  3EFF               	addlw	-1
  1207  02CC  1C03               	skipc
  1208  02CD  0008               	return
  1209  02CE  0084               	movwf	4
  1210  02CF  3005               	movlw	5
  1211  02D0  0204               	subwf	4,w
  1212  02D1  1803               	skipnc
  1213  02D2  0008               	return
  1214  02D3  3003               	movlw	high S2907
  1215  02D4  008A               	movwf	10
  1216  02D5  30BE               	movlw	low S2907
  1217  02D6  0704               	addwf	4,w
  1218  02D7  0082               	movwf	2
  1219  02D8  0008               	return
  1220  02D9                     l2281:	
  1221                           
  1222                           ;main.c: 140: modea();
  1223  02D9  2BD4               	ljmp	l2191
  1224  02DA                     l2283:	
  1225                           ;main.c: 141: break;
  1226                           
  1227                           
  1228                           ;main.c: 143: modeb();
  1229  02DA  2BD0               	ljmp	l2195
  1230  02DB                     l2285:	
  1231                           ;main.c: 144: break;
  1232                           
  1233                           
  1234                           ;main.c: 146: modec();
  1235  02DB  2BB3               	ljmp	l2199
  1236  02DC                     l2287:	
  1237                           ;main.c: 147: break;
  1238                           
  1239                           
  1240                           ;main.c: 149: moded();
  1241  02DC  2BCC               	ljmp	l2203
  1242  02DD                     l2289:	
  1243                           ;main.c: 150: break;
  1244                           
  1245                           
  1246                           ;main.c: 152: modee();
  1247  02DD  2BC8               	ljmp	l2207
  1248  02DE                     __end_of_procKey2:	
  1249                           
  1250                           	psect	swtext1
  1251  03BE                     __pswtext1:	
  1252  03BE                     S2907:	
  1253  03BE  2AD9               	ljmp	l2281
  1254  03BF  2ADA               	ljmp	l2283
  1255  03C0  2ADB               	ljmp	l2285
  1256  03C1  2ADC               	ljmp	l2287
  1257  03C2  2ADD               	ljmp	l2289
  1258                           
  1259                           	psect	text6
  1260  03C8                     __ptext6:	
  1261 ;; *************** function _modee *****************
  1262 ;; Defined at:
  1263 ;;		line 71 in file "C:\Users\mxy\Desktop\keytest2\pwm.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;		None
  1266 ;; Auto vars:     Size  Location     Type
  1267 ;;		None
  1268 ;; Return value:  Size  Location     Type
  1269 ;;                  1    wreg      void 
  1270 ;; Registers used:
  1271 ;;		wreg, status,2
  1272 ;; Tracked objects:
  1273 ;;		On entry : 300/0
  1274 ;;		On exit  : 300/0
  1275 ;;		Unchanged: 0/0
  1276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1277 ;;      Params:         0       0       0       0
  1278 ;;      Locals:         0       0       0       0
  1279 ;;      Temps:          0       0       0       0
  1280 ;;      Totals:         0       0       0       0
  1281 ;;Total ram usage:        0 bytes
  1282 ;; Hardware stack levels used:    1
  1283 ;; Hardware stack levels required when called:    1
  1284 ;; This function calls:
  1285 ;;		Nothing
  1286 ;; This function is called by:
  1287 ;;		_procKey2
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           
  1292                           ;psect for function _modee
  1293  03C8                     _modee:	
  1294  03C8                     l2207:	
  1295                           ;incstack = 0
  1296                           ; Regs used in _modee: [wreg+status,2]
  1297                           
  1298                           
  1299                           ;pwm.c: 73: PWMD1L = 94;
  1300  03C8  305E               	movlw	94
  1301  03C9  0098               	movwf	24	;volatile
  1302                           
  1303                           ;pwm.c: 74: PWMD01H = 0;
  1304  03CA  019C               	clrf	28	;volatile
  1305  03CB  0008               	return
  1306  03CC                     __end_of_modee:	
  1307                           
  1308                           	psect	text7
  1309  03CC                     __ptext7:	
  1310 ;; *************** function _moded *****************
  1311 ;; Defined at:
  1312 ;;		line 65 in file "C:\Users\mxy\Desktop\keytest2\pwm.c"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;		None
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;		None
  1317 ;; Return value:  Size  Location     Type
  1318 ;;                  1    wreg      void 
  1319 ;; Registers used:
  1320 ;;		wreg, status,2
  1321 ;; Tracked objects:
  1322 ;;		On entry : 300/0
  1323 ;;		On exit  : 300/0
  1324 ;;		Unchanged: 0/0
  1325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1326 ;;      Params:         0       0       0       0
  1327 ;;      Locals:         0       0       0       0
  1328 ;;      Temps:          0       0       0       0
  1329 ;;      Totals:         0       0       0       0
  1330 ;;Total ram usage:        0 bytes
  1331 ;; Hardware stack levels used:    1
  1332 ;; Hardware stack levels required when called:    1
  1333 ;; This function calls:
  1334 ;;		Nothing
  1335 ;; This function is called by:
  1336 ;;		_procKey2
  1337 ;; This function uses a non-reentrant model
  1338 ;;
  1339                           
  1340                           
  1341                           ;psect for function _moded
  1342  03CC                     _moded:	
  1343  03CC                     l2203:	
  1344                           ;incstack = 0
  1345                           ; Regs used in _moded: [wreg+status,2]
  1346                           
  1347                           
  1348                           ;pwm.c: 67: PWMD1L = 62;
  1349  03CC  303E               	movlw	62
  1350  03CD  0098               	movwf	24	;volatile
  1351                           
  1352                           ;pwm.c: 68: PWMD01H = 0;
  1353  03CE  019C               	clrf	28	;volatile
  1354  03CF  0008               	return
  1355  03D0                     __end_of_moded:	
  1356                           
  1357                           	psect	text8
  1358  03B3                     __ptext8:	
  1359 ;; *************** function _modec *****************
  1360 ;; Defined at:
  1361 ;;		line 58 in file "C:\Users\mxy\Desktop\keytest2\pwm.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;		None
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;		None
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      void 
  1368 ;; Registers used:
  1369 ;;		wreg, status,2
  1370 ;; Tracked objects:
  1371 ;;		On entry : 300/0
  1372 ;;		On exit  : 300/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1375 ;;      Params:         0       0       0       0
  1376 ;;      Locals:         0       0       0       0
  1377 ;;      Temps:          0       0       0       0
  1378 ;;      Totals:         0       0       0       0
  1379 ;;Total ram usage:        0 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:    1
  1382 ;; This function calls:
  1383 ;;		Nothing
  1384 ;; This function is called by:
  1385 ;;		_procKey2
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           
  1390                           ;psect for function _modec
  1391  03B3                     _modec:	
  1392  03B3                     l2199:	
  1393                           ;incstack = 0
  1394                           ; Regs used in _modec: [wreg+status,2]
  1395                           
  1396                           
  1397                           ;pwm.c: 60: PWMD1L = 31;
  1398  03B3  301F               	movlw	31
  1399  03B4  0098               	movwf	24	;volatile
  1400                           
  1401                           ;pwm.c: 61: PWMCON0 = 0x23;
  1402  03B5  3023               	movlw	35
  1403  03B6  0093               	movwf	19	;volatile
  1404                           
  1405                           ;pwm.c: 62: PWMD01H = 0;
  1406  03B7  019C               	clrf	28	;volatile
  1407  03B8  0008               	return
  1408  03B9                     __end_of_modec:	
  1409                           
  1410                           	psect	text9
  1411  03D0                     __ptext9:	
  1412 ;; *************** function _modeb *****************
  1413 ;; Defined at:
  1414 ;;		line 52 in file "C:\Users\mxy\Desktop\keytest2\pwm.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;		None
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;		None
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  1    wreg      void 
  1421 ;; Registers used:
  1422 ;;		wreg
  1423 ;; Tracked objects:
  1424 ;;		On entry : 300/0
  1425 ;;		On exit  : 300/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1428 ;;      Params:         0       0       0       0
  1429 ;;      Locals:         0       0       0       0
  1430 ;;      Temps:          0       0       0       0
  1431 ;;      Totals:         0       0       0       0
  1432 ;;Total ram usage:        0 bytes
  1433 ;; Hardware stack levels used:    1
  1434 ;; Hardware stack levels required when called:    1
  1435 ;; This function calls:
  1436 ;;		Nothing
  1437 ;; This function is called by:
  1438 ;;		_procKey2
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           
  1443                           ;psect for function _modeb
  1444  03D0                     _modeb:	
  1445  03D0                     l2195:	
  1446                           ;incstack = 0
  1447                           ; Regs used in _modeb: [wreg]
  1448                           
  1449                           
  1450                           ;pwm.c: 54: PWMCON0 = 0x21;
  1451  03D0  3021               	movlw	33
  1452  03D1  0093               	movwf	19	;volatile
  1453                           
  1454                           ;pwm.c: 55: PORTB&=~(1<<7);
  1455  03D2  1386               	bcf	6,7	;volatile
  1456  03D3  0008               	return
  1457  03D4                     __end_of_modeb:	
  1458                           
  1459                           	psect	text10
  1460  03D4                     __ptext10:	
  1461 ;; *************** function _modea *****************
  1462 ;; Defined at:
  1463 ;;		line 46 in file "C:\Users\mxy\Desktop\keytest2\pwm.c"
  1464 ;; Parameters:    Size  Location     Type
  1465 ;;		None
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;		None
  1468 ;; Return value:  Size  Location     Type
  1469 ;;                  1    wreg      void 
  1470 ;; Registers used:
  1471 ;;		wreg, status,2
  1472 ;; Tracked objects:
  1473 ;;		On entry : 300/0
  1474 ;;		On exit  : 300/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1477 ;;      Params:         0       0       0       0
  1478 ;;      Locals:         0       0       0       0
  1479 ;;      Temps:          0       0       0       0
  1480 ;;      Totals:         0       0       0       0
  1481 ;;Total ram usage:        0 bytes
  1482 ;; Hardware stack levels used:    1
  1483 ;; Hardware stack levels required when called:    1
  1484 ;; This function calls:
  1485 ;;		Nothing
  1486 ;; This function is called by:
  1487 ;;		_procKey2
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           
  1492                           ;psect for function _modea
  1493  03D4                     _modea:	
  1494  03D4                     l2191:	
  1495                           ;incstack = 0
  1496                           ; Regs used in _modea: [wreg+status,2]
  1497                           
  1498                           
  1499                           ;pwm.c: 48: PWMD1L = 125;
  1500  03D4  307D               	movlw	125
  1501  03D5  0098               	movwf	24	;volatile
  1502                           
  1503                           ;pwm.c: 49: PWMD01H = 0;
  1504  03D6  019C               	clrf	28	;volatile
  1505  03D7  0008               	return
  1506  03D8                     __end_of_modea:	
  1507                           
  1508                           	psect	text11
  1509  02DE                     __ptext11:	
  1510 ;; *************** function _procKey1 *****************
  1511 ;; Defined at:
  1512 ;;		line 101 in file "C:\Users\mxy\Desktop\keytest2\main.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;		None
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;		None
  1517 ;; Return value:  Size  Location     Type
  1518 ;;                  1    wreg      void 
  1519 ;; Registers used:
  1520 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1521 ;; Tracked objects:
  1522 ;;		On entry : 300/0
  1523 ;;		On exit  : 300/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1526 ;;      Params:         0       0       0       0
  1527 ;;      Locals:         0       0       0       0
  1528 ;;      Temps:          0       0       0       0
  1529 ;;      Totals:         0       0       0       0
  1530 ;;Total ram usage:        0 bytes
  1531 ;; Hardware stack levels used:    1
  1532 ;; Hardware stack levels required when called:    2
  1533 ;; This function calls:
  1534 ;;		_mode1
  1535 ;;		_mode2
  1536 ;;		_mode3
  1537 ;;		_mode4
  1538 ;;		_mode5
  1539 ;; This function is called by:
  1540 ;;		_startPWM
  1541 ;;		_KeyServer
  1542 ;; This function uses a non-reentrant model
  1543 ;;
  1544                           
  1545                           
  1546                           ;psect for function _procKey1
  1547  02DE                     _procKey1:	
  1548                           
  1549                           ;main.c: 103: if(ONFlag == 0)
  1550                           
  1551                           ;incstack = 0
  1552                           ; Regs used in _procKey1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1553  02DE  1FF0               	btfss	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
  1554  02DF  0008               	return
  1555                           
  1556                           ;main.c: 105: pwmFlag = 1;
  1557  02E0  1770               	bsf	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
  1558                           
  1559                           ;main.c: 106: if(++pwm0Step > 5)
  1560  02E1  3006               	movlw	6
  1561  02E2  0AD8               	incf	_pwm0Step,f
  1562  02E3  0258               	subwf	_pwm0Step,w
  1563  02E4  1C03               	skipc
  1564  02E5  2AE8               	goto	l2267
  1565                           
  1566                           ;main.c: 107: pwm0Step = 1;
  1567  02E6  01D8               	clrf	_pwm0Step
  1568  02E7  0AD8               	incf	_pwm0Step,f
  1569  02E8                     l2267:	
  1570                           ;main.c: 124: break;
  1571                           
  1572  02E8  0858               	movf	_pwm0Step,w
  1573                           
  1574                           ; Switch size 1, requested type "space"
  1575                           ; Number of cases is 5, Range of values is 1 to 5
  1576                           ; switch strategies available:
  1577                           ; Name         Instructions Cycles
  1578                           ; direct_byte           14     9 (fixed)
  1579                           ; simple_byte           16     9 (average)
  1580                           ; jumptable            263     9 (fixed)
  1581                           ;	Chosen strategy is direct_byte
  1582  02E9  3EFF               	addlw	-1
  1583  02EA  1C03               	skipc
  1584  02EB  0008               	return
  1585  02EC  0084               	movwf	4
  1586  02ED  3005               	movlw	5
  1587  02EE  0204               	subwf	4,w
  1588  02EF  1803               	skipnc
  1589  02F0  0008               	return
  1590  02F1  3003               	movlw	high S2909
  1591  02F2  008A               	movwf	10
  1592  02F3  30C3               	movlw	low S2909
  1593  02F4  0704               	addwf	4,w
  1594  02F5  0082               	movwf	2
  1595  02F6  0008               	return
  1596  02F7                     l2255:	
  1597                           
  1598                           ;main.c: 111: mode1();
  1599  02F7  2BE8               	ljmp	l2171
  1600  02F8                     l2257:	
  1601                           ;main.c: 112: break;
  1602                           
  1603                           
  1604                           ;main.c: 114: mode2();
  1605  02F8  2BE4               	ljmp	l2175
  1606  02F9                     l2259:	
  1607                           ;main.c: 115: break;
  1608                           
  1609                           
  1610                           ;main.c: 117: mode3();
  1611  02F9  2BE0               	ljmp	l2179
  1612  02FA                     l2261:	
  1613                           ;main.c: 118: break;
  1614                           
  1615                           
  1616                           ;main.c: 120: mode4();
  1617  02FA  2BDC               	ljmp	l2183
  1618  02FB                     l2263:	
  1619                           ;main.c: 121: break;
  1620                           
  1621                           
  1622                           ;main.c: 123: mode5();
  1623  02FB  2BD8               	ljmp	l2187
  1624  02FC                     __end_of_procKey1:	
  1625                           
  1626                           	psect	swtext2
  1627  03C3                     __pswtext2:	
  1628  03C3                     S2909:	
  1629  03C3  2AF7               	ljmp	l2255
  1630  03C4  2AF8               	ljmp	l2257
  1631  03C5  2AF9               	ljmp	l2259
  1632  03C6  2AFA               	ljmp	l2261
  1633  03C7  2AFB               	ljmp	l2263
  1634                           
  1635                           	psect	text12
  1636  03D8                     __ptext12:	
  1637 ;; *************** function _mode5 *****************
  1638 ;; Defined at:
  1639 ;;		line 40 in file "C:\Users\mxy\Desktop\keytest2\pwm.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;		None
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;		None
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  1    wreg      void 
  1646 ;; Registers used:
  1647 ;;		wreg, status,2
  1648 ;; Tracked objects:
  1649 ;;		On entry : 300/0
  1650 ;;		On exit  : 300/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1653 ;;      Params:         0       0       0       0
  1654 ;;      Locals:         0       0       0       0
  1655 ;;      Temps:          0       0       0       0
  1656 ;;      Totals:         0       0       0       0
  1657 ;;Total ram usage:        0 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; Hardware stack levels required when called:    1
  1660 ;; This function calls:
  1661 ;;		Nothing
  1662 ;; This function is called by:
  1663 ;;		_procKey1
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667                           
  1668                           ;psect for function _mode5
  1669  03D8                     _mode5:	
  1670  03D8                     l2187:	
  1671                           ;incstack = 0
  1672                           ; Regs used in _mode5: [wreg+status,2]
  1673                           
  1674                           
  1675                           ;pwm.c: 42: PWMD0L = 125;
  1676  03D8  307D               	movlw	125
  1677  03D9  0097               	movwf	23	;volatile
  1678                           
  1679                           ;pwm.c: 43: PWMD01H = 0;
  1680  03DA  019C               	clrf	28	;volatile
  1681  03DB  0008               	return
  1682  03DC                     __end_of_mode5:	
  1683                           
  1684                           	psect	text13
  1685  03DC                     __ptext13:	
  1686 ;; *************** function _mode4 *****************
  1687 ;; Defined at:
  1688 ;;		line 34 in file "C:\Users\mxy\Desktop\keytest2\pwm.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;		None
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;		None
  1693 ;; Return value:  Size  Location     Type
  1694 ;;                  1    wreg      void 
  1695 ;; Registers used:
  1696 ;;		wreg, status,2
  1697 ;; Tracked objects:
  1698 ;;		On entry : 300/0
  1699 ;;		On exit  : 300/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1702 ;;      Params:         0       0       0       0
  1703 ;;      Locals:         0       0       0       0
  1704 ;;      Temps:          0       0       0       0
  1705 ;;      Totals:         0       0       0       0
  1706 ;;Total ram usage:        0 bytes
  1707 ;; Hardware stack levels used:    1
  1708 ;; Hardware stack levels required when called:    1
  1709 ;; This function calls:
  1710 ;;		Nothing
  1711 ;; This function is called by:
  1712 ;;		_procKey1
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716                           
  1717                           ;psect for function _mode4
  1718  03DC                     _mode4:	
  1719  03DC                     l2183:	
  1720                           ;incstack = 0
  1721                           ; Regs used in _mode4: [wreg+status,2]
  1722                           
  1723                           
  1724                           ;pwm.c: 36: PWMD0L = 71;
  1725  03DC  3047               	movlw	71
  1726  03DD  0097               	movwf	23	;volatile
  1727                           
  1728                           ;pwm.c: 37: PWMD01H = 0;
  1729  03DE  019C               	clrf	28	;volatile
  1730  03DF  0008               	return
  1731  03E0                     __end_of_mode4:	
  1732                           
  1733                           	psect	text14
  1734  03E0                     __ptext14:	
  1735 ;; *************** function _mode3 *****************
  1736 ;; Defined at:
  1737 ;;		line 28 in file "C:\Users\mxy\Desktop\keytest2\pwm.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;		None
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;		None
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		wreg, status,2
  1746 ;; Tracked objects:
  1747 ;;		On entry : 300/0
  1748 ;;		On exit  : 300/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1751 ;;      Params:         0       0       0       0
  1752 ;;      Locals:         0       0       0       0
  1753 ;;      Temps:          0       0       0       0
  1754 ;;      Totals:         0       0       0       0
  1755 ;;Total ram usage:        0 bytes
  1756 ;; Hardware stack levels used:    1
  1757 ;; Hardware stack levels required when called:    1
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_procKey1
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           
  1766                           ;psect for function _mode3
  1767  03E0                     _mode3:	
  1768  03E0                     l2179:	
  1769                           ;incstack = 0
  1770                           ; Regs used in _mode3: [wreg+status,2]
  1771                           
  1772                           
  1773                           ;pwm.c: 30: PWMD0L = 20;
  1774  03E0  3014               	movlw	20
  1775  03E1  0097               	movwf	23	;volatile
  1776                           
  1777                           ;pwm.c: 31: PWMD01H = 0;
  1778  03E2  019C               	clrf	28	;volatile
  1779  03E3  0008               	return
  1780  03E4                     __end_of_mode3:	
  1781                           
  1782                           	psect	text15
  1783  03E4                     __ptext15:	
  1784 ;; *************** function _mode2 *****************
  1785 ;; Defined at:
  1786 ;;		line 22 in file "C:\Users\mxy\Desktop\keytest2\pwm.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;		None
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;		None
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  1    wreg      void 
  1793 ;; Registers used:
  1794 ;;		wreg, status,2
  1795 ;; Tracked objects:
  1796 ;;		On entry : 300/0
  1797 ;;		On exit  : 300/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1800 ;;      Params:         0       0       0       0
  1801 ;;      Locals:         0       0       0       0
  1802 ;;      Temps:          0       0       0       0
  1803 ;;      Totals:         0       0       0       0
  1804 ;;Total ram usage:        0 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; Hardware stack levels required when called:    1
  1807 ;; This function calls:
  1808 ;;		Nothing
  1809 ;; This function is called by:
  1810 ;;		_procKey1
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           
  1815                           ;psect for function _mode2
  1816  03E4                     _mode2:	
  1817  03E4                     l2175:	
  1818                           ;incstack = 0
  1819                           ; Regs used in _mode2: [wreg+status,2]
  1820                           
  1821                           
  1822                           ;pwm.c: 24: PWMD0L = 12;
  1823  03E4  300C               	movlw	12
  1824  03E5  0097               	movwf	23	;volatile
  1825                           
  1826                           ;pwm.c: 25: PWMD01H = 0;
  1827  03E6  019C               	clrf	28	;volatile
  1828  03E7  0008               	return
  1829  03E8                     __end_of_mode2:	
  1830                           
  1831                           	psect	text16
  1832  03E8                     __ptext16:	
  1833 ;; *************** function _mode1 *****************
  1834 ;; Defined at:
  1835 ;;		line 16 in file "C:\Users\mxy\Desktop\keytest2\pwm.c"
  1836 ;; Parameters:    Size  Location     Type
  1837 ;;		None
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;		None
  1840 ;; Return value:  Size  Location     Type
  1841 ;;                  1    wreg      void 
  1842 ;; Registers used:
  1843 ;;		wreg, status,2
  1844 ;; Tracked objects:
  1845 ;;		On entry : 300/0
  1846 ;;		On exit  : 300/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1849 ;;      Params:         0       0       0       0
  1850 ;;      Locals:         0       0       0       0
  1851 ;;      Temps:          0       0       0       0
  1852 ;;      Totals:         0       0       0       0
  1853 ;;Total ram usage:        0 bytes
  1854 ;; Hardware stack levels used:    1
  1855 ;; Hardware stack levels required when called:    1
  1856 ;; This function calls:
  1857 ;;		Nothing
  1858 ;; This function is called by:
  1859 ;;		_procKey1
  1860 ;; This function uses a non-reentrant model
  1861 ;;
  1862                           
  1863                           
  1864                           ;psect for function _mode1
  1865  03E8                     _mode1:	
  1866  03E8                     l2171:	
  1867                           ;incstack = 0
  1868                           ; Regs used in _mode1: [wreg+status,2]
  1869                           
  1870                           
  1871                           ;pwm.c: 18: PWMD0L = 1;
  1872  03E8  3001               	movlw	1
  1873  03E9  0097               	movwf	23	;volatile
  1874                           
  1875                           ;pwm.c: 19: PWMD01H = 0;
  1876  03EA  019C               	clrf	28	;volatile
  1877  03EB  0008               	return
  1878  03EC                     __end_of_mode1:	
  1879                           
  1880                           	psect	text17
  1881  02A0                     __ptext17:	
  1882 ;; *************** function _Init_System *****************
  1883 ;; Defined at:
  1884 ;;		line 24 in file "C:\Users\mxy\Desktop\keytest2\main.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;		None
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;		None
  1889 ;; Return value:  Size  Location     Type
  1890 ;;                  1    wreg      void 
  1891 ;; Registers used:
  1892 ;;		wreg, status,2
  1893 ;; Tracked objects:
  1894 ;;		On entry : B00/0
  1895 ;;		On exit  : 300/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1898 ;;      Params:         0       0       0       0
  1899 ;;      Locals:         0       0       0       0
  1900 ;;      Temps:          0       0       0       0
  1901 ;;      Totals:         0       0       0       0
  1902 ;;Total ram usage:        0 bytes
  1903 ;; Hardware stack levels used:    1
  1904 ;; Hardware stack levels required when called:    1
  1905 ;; This function calls:
  1906 ;;		Nothing
  1907 ;; This function is called by:
  1908 ;;		_main
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           
  1913                           ;psect for function _Init_System
  1914  02A0                     _Init_System:	
  1915                           
  1916                           ;incstack = 0
  1917                           ; Regs used in _Init_System: [wreg+status,2]
  1918  02A0  0000               	nop	;# 
  1919  02A1  0064               	clrwdt	;# 
  1920                           
  1921                           ;main.c: 28: INTCON = 0;
  1922  02A2  018B               	clrf	11	;volatile
  1923                           
  1924                           ;main.c: 29: OSCCON = 0X71;
  1925  02A3  3071               	movlw	113
  1926  02A4  1683               	bsf	3,5	;RP0=1, select bank1
  1927  02A5  1303               	bcf	3,6	;RP1=0, select bank1
  1928  02A6  0088               	movwf	8	;volatile
  1929                           
  1930                           ;main.c: 30: OPTION_REG = 0;
  1931  02A7  0181               	clrf	1	;volatile
  1932                           
  1933                           ;main.c: 34: WPUB = 0x00;
  1934  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  1935  02A9  0188               	clrf	8	;volatile
  1936                           
  1937                           ;main.c: 35: WPDB = 0x00;
  1938  02AA  1683               	bsf	3,5	;RP0=1, select bank1
  1939  02AB  0187               	clrf	7	;volatile
  1940                           
  1941                           ;main.c: 36: WPUA = 0x00;
  1942  02AC  1283               	bcf	3,5	;RP0=0, select bank0
  1943  02AD  0187               	clrf	7	;volatile
  1944                           
  1945                           ;main.c: 38: PIE1 = 2;
  1946  02AE  3002               	movlw	2
  1947  02AF  008D               	movwf	13	;volatile
  1948                           
  1949                           ;main.c: 39: PR2 = 250;
  1950  02B0  30FA               	movlw	250
  1951  02B1  1683               	bsf	3,5	;RP0=1, select bank1
  1952  02B2  0091               	movwf	17	;volatile
  1953                           
  1954                           ;main.c: 40: T2CON = 4;
  1955  02B3  3004               	movlw	4
  1956  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  1957  02B5  0092               	movwf	18	;volatile
  1958                           
  1959                           ;main.c: 41: TRISA = 0x00;
  1960  02B6  1683               	bsf	3,5	;RP0=1, select bank1
  1961  02B7  0185               	clrf	5	;volatile
  1962                           
  1963                           ;main.c: 42: TRISB = 0x07;
  1964  02B8  3007               	movlw	7
  1965  02B9  0086               	movwf	6	;volatile
  1966                           
  1967                           ;main.c: 43: PORTB = 0x00;
  1968  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  1969  02BB  0186               	clrf	6	;volatile
  1970                           
  1971                           ;main.c: 44: PORTA = 0x00;
  1972  02BC  0185               	clrf	5	;volatile
  1973                           
  1974                           ;main.c: 45: INTCON = 0XC0;
  1975  02BD  30C0               	movlw	192
  1976  02BE  008B               	movwf	11	;volatile
  1977  02BF  0008               	return
  1978  02C0                     __end_of_Init_System:	
  1979                           
  1980                           	psect	text18
  1981  0257                     __ptext18:	
  1982 ;; *************** function _CheckTouchKey *****************
  1983 ;; Defined at:
  1984 ;;		line 495 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;		None
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;		None
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  1    wreg      void 
  1991 ;; Registers used:
  1992 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 300/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1998 ;;      Params:         0       0       0       0
  1999 ;;      Locals:         0       0       0       0
  2000 ;;      Temps:          0       0       0       0
  2001 ;;      Totals:         0       0       0       0
  2002 ;;Total ram usage:        0 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; Hardware stack levels required when called:    5
  2005 ;; This function calls:
  2006 ;;		_CheckKeyOldValue
  2007 ;;		_CheckOnceResult
  2008 ;;		_CheckValidTime
  2009 ;;		_ClearResSum
  2010 ;;		_GetTouchKeyValue
  2011 ;;		_KeyStopClear
  2012 ;;		_TurnKeyFlags
  2013 ;; This function is called by:
  2014 ;;		_main
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017                           
  2018                           
  2019                           ;psect for function _CheckTouchKey
  2020  0257                     _CheckTouchKey:	
  2021                           
  2022                           ;CheckTouchKey.c: 497: if(!b_kover)
  2023                           
  2024                           ;incstack = 0
  2025                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2026  0257  19F0               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  2027  0258  2A63               	goto	l1183
  2028                           
  2029                           ;CheckTouchKey.c: 498: {
  2030                           ;CheckTouchKey.c: 500: GetTouchKeyValue();
  2031  0259  2228               	fcall	_GetTouchKeyValue
  2032                           
  2033                           ;CheckTouchKey.c: 501: if(++KeyCounter >= 8)
  2034  025A  3008               	movlw	8
  2035  025B  1283               	bcf	3,5	;RP0=0, select bank0
  2036  025C  0AC4               	incf	_KeyCounter,f
  2037  025D  0244               	subwf	_KeyCounter,w
  2038  025E  1C03               	skipc
  2039  025F  2A7C               	goto	l2817
  2040                           
  2041                           ;CheckTouchKey.c: 502: {
  2042                           ;CheckTouchKey.c: 503: KeyCounter = 0;
  2043  0260  01C4               	clrf	_KeyCounter
  2044                           
  2045                           ;CheckTouchKey.c: 504: b_kover = 1;
  2046  0261  15F0               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  2047  0262  2A7C               	goto	l2817
  2048  0263                     l1183:	
  2049                           
  2050                           ;CheckTouchKey.c: 507: else if(!b_kover1)
  2051  0263  1970               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  2052  0264  2A78               	goto	l2811
  2053                           
  2054                           ;CheckTouchKey.c: 508: {
  2055                           ;CheckTouchKey.c: 510: CheckOnceResult();
  2056  0265  2018               	fcall	_CheckOnceResult
  2057                           
  2058                           ;CheckTouchKey.c: 513: TurnKeyFlags();
  2059  0266  21F9               	fcall	_TurnKeyFlags
  2060                           
  2061                           ;CheckTouchKey.c: 514: b_kover1 = 1;
  2062  0267  1570               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  2063                           
  2064                           ;CheckTouchKey.c: 520: if(b_kerr || KeyCounter > KeyValidNumber)
  2065  0268  1870               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  2066  0269  2A70               	goto	l2801
  2067  026A  3002               	movlw	2
  2068  026B  1283               	bcf	3,5	;RP0=0, select bank0
  2069  026C  1303               	bcf	3,6	;RP1=0, select bank0
  2070  026D  0244               	subwf	_KeyCounter,w
  2071  026E  1C03               	skipc
  2072  026F  2A74               	goto	l2809
  2073  0270                     l2801:	
  2074                           
  2075                           ;CheckTouchKey.c: 521: {
  2076                           ;CheckTouchKey.c: 522: KeyStopClear();
  2077  0270  2315               	fcall	_KeyStopClear
  2078                           
  2079                           ;CheckTouchKey.c: 523: b_kerr = 0;
  2080  0271  1070               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  2081                           
  2082                           ;CheckTouchKey.c: 524: b_kover = 0;
  2083  0272  11F0               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  2084                           
  2085                           ;CheckTouchKey.c: 525: b_kover1 = 0;
  2086  0273  1170               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  2087  0274                     l2809:	
  2088                           
  2089                           ;CheckTouchKey.c: 526: }
  2090                           ;CheckTouchKey.c: 527: KeyCounter = 0;
  2091  0274  1283               	bcf	3,5	;RP0=0, select bank0
  2092  0275  1303               	bcf	3,6	;RP1=0, select bank0
  2093  0276  01C4               	clrf	_KeyCounter
  2094                           
  2095                           ;CheckTouchKey.c: 528: }
  2096  0277  2A7C               	goto	l2817
  2097  0278                     l2811:	
  2098                           
  2099                           ;CheckTouchKey.c: 529: else
  2100                           ;CheckTouchKey.c: 530: {
  2101                           ;CheckTouchKey.c: 532: CheckKeyOldValue();
  2102  0278  2106               	fcall	_CheckKeyOldValue
  2103                           
  2104                           ;CheckTouchKey.c: 534: ClearResSum();
  2105  0279  2375               	fcall	_ClearResSum
  2106                           
  2107                           ;CheckTouchKey.c: 536: b_kover = 0;
  2108  027A  11F0               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  2109                           
  2110                           ;CheckTouchKey.c: 537: b_kover1 = 0;
  2111  027B  1170               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  2112  027C                     l2817:	
  2113                           
  2114                           ;CheckTouchKey.c: 538: }
  2115                           ;CheckTouchKey.c: 540: CheckValidTime();
  2116  027C  2B51               	ljmp	l2481
  2117  027D                     __end_of_CheckTouchKey:	
  2118                           
  2119                           	psect	text19
  2120  01F9                     __ptext19:	
  2121 ;; *************** function _TurnKeyFlags *****************
  2122 ;; Defined at:
  2123 ;;		line 382 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;		None
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;		None
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  1    wreg      void 
  2130 ;; Registers used:
  2131 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2132 ;; Tracked objects:
  2133 ;;		On entry : B00/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2137 ;;      Params:         0       0       0       0
  2138 ;;      Locals:         0       0       0       0
  2139 ;;      Temps:          0       0       0       0
  2140 ;;      Totals:         0       0       0       0
  2141 ;;Total ram usage:        0 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:    4
  2144 ;; This function calls:
  2145 ;;		_KeyClearIn
  2146 ;; This function is called by:
  2147 ;;		_CheckTouchKey
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151                           
  2152                           ;psect for function _TurnKeyFlags
  2153  01F9                     _TurnKeyFlags:	
  2154                           
  2155                           ;CheckTouchKey.c: 384: static unsigned char KeyHaveTimes = 0;
  2156                           ;CheckTouchKey.c: 385: static unsigned char KeyNoTimes = 0;
  2157                           ;CheckTouchKey.c: 387: if(KeyData[0] | KeyData[1])
  2158                           
  2159                           ;incstack = 0
  2160                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2161  01F9  0837               	movf	_KeyData+1,w	;volatile
  2162  01FA  0436               	iorwf	_KeyData,w	;volatile
  2163  01FB  1903               	btfsc	3,2
  2164  01FC  2A1B               	goto	l2473
  2165                           
  2166                           ;CheckTouchKey.c: 388: {
  2167                           ;CheckTouchKey.c: 389: KeyNoTimes = 0;
  2168  01FD  01C0               	clrf	TurnKeyFlags@KeyNoTimes
  2169                           
  2170                           ;CheckTouchKey.c: 391: if(KeyData[0] == KeyOldData[0] && KeyData[1] == KeyOldData[1])
  2171  01FE  0836               	movf	_KeyData,w	;volatile
  2172  01FF  0638               	xorwf	_KeyOldData,w	;volatile
  2173  0200  1D03               	skipz
  2174  0201  2A14               	goto	l1164
  2175  0202  0837               	movf	_KeyData+1,w	;volatile
  2176  0203  0639               	xorwf	_KeyOldData+1,w	;volatile
  2177  0204  1D03               	skipz
  2178  0205  2A14               	goto	l1164
  2179  0206  3002               	movlw	2
  2180  0207  0AC1               	incf	TurnKeyFlags@KeyHaveTimes,f
  2181  0208  0241               	subwf	TurnKeyFlags@KeyHaveTimes,w
  2182  0209  1C03               	skipc
  2183  020A  0008               	return
  2184                           
  2185                           ;CheckTouchKey.c: 394: {
  2186                           ;CheckTouchKey.c: 395: KeyHaveTimes = 0;
  2187  020B  01C1               	clrf	TurnKeyFlags@KeyHaveTimes
  2188                           
  2189                           ;CheckTouchKey.c: 396: KeyFlag[0] = KeyData[0];
  2190  020C  0836               	movf	_KeyData,w	;volatile
  2191  020D  00BE               	movwf	_KeyFlag	;volatile
  2192                           
  2193                           ;CheckTouchKey.c: 397: KeyFlag[1] = KeyData[1];
  2194  020E  0837               	movf	_KeyData+1,w	;volatile
  2195  020F  00BF               	movwf	_KeyFlag+1	;volatile
  2196                           
  2197                           ;CheckTouchKey.c: 400: {
  2198                           ;CheckTouchKey.c: 401: if(!b_kclr)
  2199  0210  18F0               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2200  0211  0008               	return
  2201                           
  2202                           ;CheckTouchKey.c: 402: {
  2203                           ;CheckTouchKey.c: 403: b_kclr = 1;
  2204  0212  14F0               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2205                           
  2206                           ;CheckTouchKey.c: 404: KeyClearIn();
  2207  0213  2B84               	ljmp	l2211
  2208  0214                     l1164:	
  2209                           
  2210                           ;CheckTouchKey.c: 409: else
  2211                           ;CheckTouchKey.c: 410: {
  2212                           ;CheckTouchKey.c: 411: b_kclr = 0;
  2213  0214  10F0               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2214                           
  2215                           ;CheckTouchKey.c: 412: KeyOldData[0] = KeyData[0];
  2216  0215  0836               	movf	_KeyData,w	;volatile
  2217  0216  00B8               	movwf	_KeyOldData	;volatile
  2218                           
  2219                           ;CheckTouchKey.c: 413: KeyOldData[1] = KeyData[1];
  2220  0217  0837               	movf	_KeyData+1,w	;volatile
  2221  0218  00B9               	movwf	_KeyOldData+1	;volatile
  2222                           
  2223                           ;CheckTouchKey.c: 414: KeyHaveTimes = 0;
  2224  0219  01C1               	clrf	TurnKeyFlags@KeyHaveTimes
  2225                           
  2226                           ;CheckTouchKey.c: 415: }
  2227                           ;CheckTouchKey.c: 416: }
  2228  021A  0008               	return
  2229  021B                     l2473:	
  2230                           
  2231                           ;CheckTouchKey.c: 417: else
  2232                           ;CheckTouchKey.c: 418: {
  2233                           ;CheckTouchKey.c: 419: KeyHaveTimes = 0;
  2234  021B  01C1               	clrf	TurnKeyFlags@KeyHaveTimes
  2235                           
  2236                           ;CheckTouchKey.c: 420: KeyOldData[0] = 0;
  2237  021C  01B8               	clrf	_KeyOldData	;volatile
  2238                           
  2239                           ;CheckTouchKey.c: 421: KeyOldData[1] = 0;
  2240  021D  01B9               	clrf	_KeyOldData+1	;volatile
  2241                           
  2242                           ;CheckTouchKey.c: 423: if(++KeyNoTimes >=2)
  2243  021E  3002               	movlw	2
  2244  021F  0AC0               	incf	TurnKeyFlags@KeyNoTimes,f
  2245  0220  0240               	subwf	TurnKeyFlags@KeyNoTimes,w
  2246  0221  1C03               	skipc
  2247  0222  0008               	return
  2248                           
  2249                           ;CheckTouchKey.c: 424: {
  2250                           ;CheckTouchKey.c: 425: KeyNoTimes = 0;
  2251  0223  01C0               	clrf	TurnKeyFlags@KeyNoTimes
  2252                           
  2253                           ;CheckTouchKey.c: 426: KeyFlag[0] = 0;
  2254  0224  01BE               	clrf	_KeyFlag	;volatile
  2255                           
  2256                           ;CheckTouchKey.c: 427: KeyFlag[1] = 0;
  2257  0225  01BF               	clrf	_KeyFlag+1	;volatile
  2258                           
  2259                           ;CheckTouchKey.c: 429: b_kclr = 0;
  2260  0226  10F0               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2261  0227  0008               	return
  2262  0228                     __end_of_TurnKeyFlags:	
  2263                           
  2264                           	psect	text20
  2265  0384                     __ptext20:	
  2266 ;; *************** function _KeyClearIn *****************
  2267 ;; Defined at:
  2268 ;;		line 88 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;		None
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;  cnt             1    4[COMMON] unsigned char 
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  1    wreg      void 
  2275 ;; Registers used:
  2276 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2277 ;; Tracked objects:
  2278 ;;		On entry : B00/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2282 ;;      Params:         0       0       0       0
  2283 ;;      Locals:         1       0       0       0
  2284 ;;      Temps:          0       0       0       0
  2285 ;;      Totals:         1       0       0       0
  2286 ;;Total ram usage:        1 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:    3
  2289 ;; This function calls:
  2290 ;;		_KeyClearOne
  2291 ;;		_KeyIsIn
  2292 ;; This function is called by:
  2293 ;;		_TurnKeyFlags
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           
  2298                           ;psect for function _KeyClearIn
  2299  0384                     _KeyClearIn:	
  2300  0384                     l2211:	
  2301                           ;incstack = 0
  2302                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2303                           
  2304                           
  2305                           ;CheckTouchKey.c: 90: unsigned char cnt;
  2306                           ;CheckTouchKey.c: 91: for(cnt=0;cnt < KeyTotalNumber;cnt++)
  2307  0384  01F6               	clrf	KeyClearIn@cnt
  2308  0385                     l2217:	
  2309                           
  2310                           ;CheckTouchKey.c: 92: {
  2311                           ;CheckTouchKey.c: 93: if(!KeyIsIn(cnt))
  2312  0385  0876               	movf	KeyClearIn@cnt,w
  2313  0386  2363               	fcall	_KeyIsIn
  2314  0387  3A00               	xorlw	0
  2315  0388  1D03               	skipz
  2316  0389  2B8C               	goto	l2221
  2317                           
  2318                           ;CheckTouchKey.c: 94: {
  2319                           ;CheckTouchKey.c: 95: KeyClearOne(cnt);
  2320  038A  0876               	movf	KeyClearIn@cnt,w
  2321  038B  22FC               	fcall	_KeyClearOne
  2322  038C                     l2221:	
  2323  038C  3002               	movlw	2
  2324  038D  0AF6               	incf	KeyClearIn@cnt,f
  2325  038E  0276               	subwf	KeyClearIn@cnt,w
  2326  038F  1803               	btfsc	3,0
  2327  0390  0008               	return
  2328  0391  2B85               	goto	l2217
  2329  0392                     __end_of_KeyClearIn:	
  2330                           
  2331                           	psect	text21
  2332  0315                     __ptext21:	
  2333 ;; *************** function _KeyStopClear *****************
  2334 ;; Defined at:
  2335 ;;		line 107 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;		None
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;  i               1    3[COMMON] unsigned char 
  2340 ;; Return value:  Size  Location     Type
  2341 ;;                  1    wreg      void 
  2342 ;; Registers used:
  2343 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 800/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2349 ;;      Params:         0       0       0       0
  2350 ;;      Locals:         1       0       0       0
  2351 ;;      Temps:          0       0       0       0
  2352 ;;      Totals:         1       0       0       0
  2353 ;;Total ram usage:        1 bytes
  2354 ;; Hardware stack levels used:    1
  2355 ;; Hardware stack levels required when called:    2
  2356 ;; This function calls:
  2357 ;;		_KeyClearOne
  2358 ;; This function is called by:
  2359 ;;		_CheckTouchKey
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           
  2364                           ;psect for function _KeyStopClear
  2365  0315                     _KeyStopClear:	
  2366                           
  2367                           ;CheckTouchKey.c: 109: unsigned char i;
  2368                           ;CheckTouchKey.c: 110: KeyFlag[0] = 0;
  2369                           
  2370                           ;incstack = 0
  2371                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2372  0315  1283               	bcf	3,5	;RP0=0, select bank0
  2373  0316  1303               	bcf	3,6	;RP1=0, select bank0
  2374  0317  01BE               	clrf	_KeyFlag	;volatile
  2375                           
  2376                           ;CheckTouchKey.c: 111: KeyFlag[1] = 0;
  2377  0318  01BF               	clrf	_KeyFlag+1	;volatile
  2378                           
  2379                           ;CheckTouchKey.c: 112: for(i = 0; i < KeyTotalNumber; i++)
  2380  0319  01F5               	clrf	KeyStopClear@i
  2381  031A                     l2313:	
  2382                           
  2383                           ;CheckTouchKey.c: 113: {
  2384                           ;CheckTouchKey.c: 114: KeyResSum[i] = 0;
  2385  031A  1003               	clrc
  2386  031B  0D75               	rlf	KeyStopClear@i,w
  2387  031C  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2388  031D  0084               	movwf	4
  2389  031E  1383               	bcf	3,7	;select IRP bank0
  2390  031F  0180               	clrf	0
  2391  0320  0A84               	incf	4,f
  2392  0321  0180               	clrf	0
  2393                           
  2394                           ;CheckTouchKey.c: 115: KeyClearOne(i);
  2395  0322  0875               	movf	KeyStopClear@i,w
  2396  0323  22FC               	fcall	_KeyClearOne
  2397  0324  3002               	movlw	2
  2398  0325  0AF5               	incf	KeyStopClear@i,f
  2399  0326  0275               	subwf	KeyStopClear@i,w
  2400  0327  1803               	btfsc	3,0
  2401  0328  0008               	return
  2402  0329  2B1A               	goto	l2313
  2403  032A                     __end_of_KeyStopClear:	
  2404                           
  2405                           	psect	text22
  2406  0228                     __ptext22:	
  2407 ;; *************** function _GetTouchKeyValue *****************
  2408 ;; Defined at:
  2409 ;;		line 180 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;		None
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;  cnt             1    4[COMMON] unsigned char 
  2414 ;;  temp            1    3[COMMON] unsigned char 
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  1    wreg      void 
  2417 ;; Registers used:
  2418 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : A00/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2424 ;;      Params:         0       0       0       0
  2425 ;;      Locals:         2       0       0       0
  2426 ;;      Temps:          0       0       0       0
  2427 ;;      Totals:         2       0       0       0
  2428 ;;Total ram usage:        2 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; Hardware stack levels required when called:    2
  2431 ;; This function calls:
  2432 ;;		_ClearResSum
  2433 ;; This function is called by:
  2434 ;;		_CheckTouchKey
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           
  2439                           ;psect for function _GetTouchKeyValue
  2440  0228                     _GetTouchKeyValue:	
  2441                           
  2442                           ;CheckTouchKey.c: 182: unsigned char cnt = 0,temp;
  2443                           
  2444                           ;incstack = 0
  2445                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2446  0228  01F6               	clrf	GetTouchKeyValue@cnt
  2447  0229                     l1104:	
  2448                           ;CheckTouchKey.c: 184: do
  2449                           
  2450                           
  2451                           ;CheckTouchKey.c: 185: {
  2452                           ;CheckTouchKey.c: 186: KEYCON0 = 0;
  2453  0229  1683               	bsf	3,5	;RP0=1, select bank1
  2454  022A  1303               	bcf	3,6	;RP1=0, select bank1
  2455  022B  0192               	clrf	18	;volatile
  2456                           
  2457                           ;CheckTouchKey.c: 187: KEYCON1 = 0;
  2458  022C  0193               	clrf	19	;volatile
  2459                           
  2460                           ;CheckTouchKey.c: 194: KEYCON0 = Table_KeyCap[cnt];
  2461  022D  0876               	movf	GetTouchKeyValue@cnt,w
  2462  022E  3E0B               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  2463  022F  0084               	movwf	4
  2464  0230  232A               	fcall	stringdir
  2465  0231  0092               	movwf	18	;volatile
  2466                           
  2467                           ;CheckTouchKey.c: 195: KEYCON1 = Table_KeyChannel[cnt];
  2468  0232  0876               	movf	GetTouchKeyValue@cnt,w
  2469  0233  3E0D               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  2470  0234  0084               	movwf	4
  2471  0235  232A               	fcall	stringdir
  2472  0236  0093               	movwf	19	;volatile
  2473                           
  2474                           ;CheckTouchKey.c: 196: KEYCON0 |= 0x1;
  2475  0237  1412               	bsf	18,0	;volatile
  2476                           
  2477                           ;CheckTouchKey.c: 198: temp = 0;
  2478  0238  01F5               	clrf	GetTouchKeyValue@temp
  2479  0239                     l1105:	
  2480                           ;CheckTouchKey.c: 199: while(!(KEYCON0&0x80))
  2481                           
  2482  0239  1B92               	btfsc	18,7	;volatile
  2483  023A  2A41               	goto	l2335
  2484                           
  2485                           ;CheckTouchKey.c: 200: {
  2486                           ;CheckTouchKey.c: 201: if(0 == (--temp))
  2487  023B  0BF5               	decfsz	GetTouchKeyValue@temp,f
  2488  023C  2A39               	goto	l1105
  2489                           
  2490                           ;CheckTouchKey.c: 202: {
  2491                           ;CheckTouchKey.c: 203: KeyCounter = 255;
  2492  023D  30FF               	movlw	255
  2493  023E  1283               	bcf	3,5	;RP0=0, select bank0
  2494  023F  00C4               	movwf	_KeyCounter
  2495                           
  2496                           ;CheckTouchKey.c: 204: ClearResSum();
  2497  0240  2B75               	ljmp	l2225
  2498  0241                     l2335:	
  2499                           
  2500                           ;CheckTouchKey.c: 206: }
  2501                           ;CheckTouchKey.c: 207: }
  2502                           ;CheckTouchKey.c: 209: KeyResSum[cnt] += (unsigned int)((KEYDATAH<<8) | KEYDATAL);
  2503  0241  1003               	clrc
  2504  0242  0D76               	rlf	GetTouchKeyValue@cnt,w
  2505  0243  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2506  0244  0084               	movwf	4
  2507  0245  0814               	movf	20,w	;volatile
  2508  0246  1383               	bcf	3,7	;select IRP bank0
  2509  0247  0780               	addwf	0,f
  2510  0248  0F84               	incfsz	4,f
  2511  0249  0800               	movf	0,w
  2512  024A  1803               	skipnc
  2513  024B  0A00               	incf	0,w
  2514  024C  00FF               	movwf	127
  2515  024D  0815               	movf	21,w	;volatile
  2516  024E  077F               	addwf	127,w
  2517  024F  0080               	movwf	0
  2518  0250  3002               	movlw	2
  2519  0251  0384               	decf	4,f
  2520  0252  0AF6               	incf	GetTouchKeyValue@cnt,f
  2521  0253  0276               	subwf	GetTouchKeyValue@cnt,w
  2522  0254  1803               	btfsc	3,0
  2523  0255  0008               	return
  2524  0256  2A29               	goto	l1104
  2525  0257                     __end_of_GetTouchKeyValue:	
  2526                           
  2527                           	psect	text23
  2528  0375                     __ptext23:	
  2529 ;; *************** function _ClearResSum *****************
  2530 ;; Defined at:
  2531 ;;		line 126 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;		None
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  cnt             1    2[COMMON] unsigned char 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2540 ;; Tracked objects:
  2541 ;;		On entry : 300/0
  2542 ;;		On exit  : B00/0
  2543 ;;		Unchanged: 300/0
  2544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2545 ;;      Params:         0       0       0       0
  2546 ;;      Locals:         1       0       0       0
  2547 ;;      Temps:          0       0       0       0
  2548 ;;      Totals:         1       0       0       0
  2549 ;;Total ram usage:        1 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    1
  2552 ;; This function calls:
  2553 ;;		Nothing
  2554 ;; This function is called by:
  2555 ;;		_GetTouchKeyValue
  2556 ;;		_CheckTouchKey
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           
  2561                           ;psect for function _ClearResSum
  2562  0375                     _ClearResSum:	
  2563  0375                     l2225:	
  2564                           ;incstack = 0
  2565                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  2566                           
  2567                           
  2568                           ;CheckTouchKey.c: 128: unsigned char cnt = 0;
  2569  0375  01F4               	clrf	ClearResSum@cnt
  2570  0376                     l2227:	
  2571                           
  2572                           ;CheckTouchKey.c: 130: {
  2573                           ;CheckTouchKey.c: 131: KeyResSum[cnt] = 0;
  2574  0376  1003               	clrc
  2575  0377  0D74               	rlf	ClearResSum@cnt,w
  2576  0378  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2577  0379  0084               	movwf	4
  2578  037A  3002               	movlw	2
  2579  037B  1383               	bcf	3,7	;select IRP bank0
  2580  037C  0180               	clrf	0
  2581  037D  0A84               	incf	4,f
  2582  037E  0180               	clrf	0
  2583  037F  0AF4               	incf	ClearResSum@cnt,f
  2584  0380  0274               	subwf	ClearResSum@cnt,w
  2585  0381  1803               	btfsc	3,0
  2586  0382  0008               	return
  2587  0383  2B76               	goto	l2227
  2588  0384                     __end_of_ClearResSum:	
  2589                           
  2590                           	psect	text24
  2591  0351                     __ptext24:	
  2592 ;; *************** function _CheckValidTime *****************
  2593 ;; Defined at:
  2594 ;;		line 467 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;		None
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;		None
  2599 ;; Return value:  Size  Location     Type
  2600 ;;                  1    wreg      void 
  2601 ;; Registers used:
  2602 ;;		wreg, status,2, status,0
  2603 ;; Tracked objects:
  2604 ;;		On entry : 300/0
  2605 ;;		On exit  : 300/0
  2606 ;;		Unchanged: 0/0
  2607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2608 ;;      Params:         0       0       0       0
  2609 ;;      Locals:         0       0       0       0
  2610 ;;      Temps:          0       0       0       0
  2611 ;;      Totals:         0       0       0       0
  2612 ;;Total ram usage:        0 bytes
  2613 ;; Hardware stack levels used:    1
  2614 ;; Hardware stack levels required when called:    1
  2615 ;; This function calls:
  2616 ;;		Nothing
  2617 ;; This function is called by:
  2618 ;;		_CheckTouchKey
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           
  2623                           ;psect for function _CheckValidTime
  2624  0351                     _CheckValidTime:	
  2625  0351                     l2481:	
  2626                           ;incstack = 0
  2627                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  2628                           
  2629                           
  2630                           ;CheckTouchKey.c: 472: {
  2631                           ;CheckTouchKey.c: 473: if(KeyFlag[0] | KeyFlag[1])
  2632  0351  083F               	movf	_KeyFlag+1,w	;volatile
  2633  0352  043E               	iorwf	_KeyFlag,w	;volatile
  2634  0353  1903               	btfsc	3,2
  2635  0354  2B60               	goto	l2487
  2636  0355  0AB4               	incf	CheckValidTime@validtime,f
  2637  0356  1903               	skipnz
  2638  0357  0AB5               	incf	CheckValidTime@validtime+1,f
  2639  0358  303A               	movlw	58
  2640  0359  0235               	subwf	CheckValidTime@validtime+1,w
  2641  035A  3098               	movlw	152
  2642  035B  1903               	skipnz
  2643  035C  0234               	subwf	CheckValidTime@validtime,w
  2644  035D  1C03               	skipc
  2645  035E  0008               	return
  2646                           
  2647                           ;CheckTouchKey.c: 476: {
  2648                           ;CheckTouchKey.c: 477: b_kerr = 1;
  2649  035F  1470               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  2650  0360                     l2487:	
  2651                           
  2652                           ;CheckTouchKey.c: 478: validtime = 0;
  2653  0360  01B4               	clrf	CheckValidTime@validtime
  2654  0361  01B5               	clrf	CheckValidTime@validtime+1
  2655  0362  0008               	return
  2656  0363                     __end_of_CheckValidTime:	
  2657                           
  2658                           	psect	text25
  2659  0018                     __ptext25:	
  2660 ;; *************** function _CheckOnceResult *****************
  2661 ;; Defined at:
  2662 ;;		line 221 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;		None
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  KeyResTemp      2   10[BANK0 ] unsigned int 
  2667 ;;  KeyValue        2    7[BANK0 ] unsigned int 
  2668 ;;  OldValue        2    4[BANK0 ] unsigned int 
  2669 ;;  cnt             1   12[BANK0 ] unsigned char 
  2670 ;;  KeyDown         1    9[BANK0 ] unsigned char 
  2671 ;;  flag            1    6[BANK0 ] unsigned char 
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  1    wreg      void 
  2674 ;; Registers used:
  2675 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : B00/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2681 ;;      Params:         0       0       0       0
  2682 ;;      Locals:         0       9       0       0
  2683 ;;      Temps:          0       4       0       0
  2684 ;;      Totals:         0      13       0       0
  2685 ;;Total ram usage:       13 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:    3
  2688 ;; This function calls:
  2689 ;;		_KeyClearOne
  2690 ;;		_KeyHave
  2691 ;;		_KeyIsIn
  2692 ;; This function is called by:
  2693 ;;		_CheckTouchKey
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           
  2698                           ;psect for function _CheckOnceResult
  2699  0018                     _CheckOnceResult:	
  2700                           
  2701                           ;CheckTouchKey.c: 223: unsigned char cnt = 0;
  2702                           
  2703                           ;incstack = 0
  2704                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2705  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2706  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2707  001A  01D6               	clrf	CheckOnceResult@cnt
  2708                           
  2709                           ;CheckTouchKey.c: 224: unsigned char KeyDown;
  2710                           ;CheckTouchKey.c: 225: unsigned char flag;
  2711                           ;CheckTouchKey.c: 227: unsigned int KeyResTemp;
  2712                           ;CheckTouchKey.c: 228: unsigned int KeyValue;
  2713                           ;CheckTouchKey.c: 229: unsigned int OldValue;
  2714                           ;CheckTouchKey.c: 231: KeyData[0] = 0;
  2715  001B  01B6               	clrf	_KeyData	;volatile
  2716                           
  2717                           ;CheckTouchKey.c: 232: KeyData[1] = 0;
  2718  001C  01B7               	clrf	_KeyData+1	;volatile
  2719                           
  2720                           ;CheckTouchKey.c: 233: KeyMaxSub = 0;
  2721  001D  01C3               	clrf	_KeyMaxSub
  2722  001E                     l2717:	
  2723                           
  2724                           ;CheckTouchKey.c: 237: {
  2725                           ;CheckTouchKey.c: 238: flag = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  2726  001E  0856               	movf	CheckOnceResult@cnt,w
  2727  001F  3907               	andlw	7
  2728  0020  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  2729  0021  0084               	movwf	4
  2730  0022  232A               	fcall	stringdir
  2731  0023  00D0               	movwf	CheckOnceResult@flag
  2732                           
  2733                           ;CheckTouchKey.c: 240: KeyResSum[cnt] >>= 3;
  2734  0024  1003               	clrc
  2735  0025  0D56               	rlf	CheckOnceResult@cnt,w
  2736  0026  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2737  0027  0084               	movwf	4
  2738  0028  3003               	movlw	3
  2739  0029                     u1345:	
  2740  0029  0A84               	incf	4,f
  2741  002A  1003               	clrc
  2742  002B  1383               	bcf	3,7	;select IRP bank0
  2743  002C  0C80               	rrf	0,f
  2744  002D  0384               	decf	4,f
  2745  002E  0C80               	rrf	0,f
  2746  002F  3EFF               	addlw	-1
  2747  0030  1D03               	skipz
  2748  0031  2829               	goto	u1345
  2749                           
  2750                           ;CheckTouchKey.c: 241: KeyResTemp = KeyResSum[cnt];
  2751  0032  1003               	clrc
  2752  0033  0D56               	rlf	CheckOnceResult@cnt,w
  2753  0034  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2754  0035  0084               	movwf	4
  2755  0036  0800               	movf	0,w
  2756  0037  00D4               	movwf	CheckOnceResult@KeyResTemp
  2757  0038  0A84               	incf	4,f
  2758  0039  0800               	movf	0,w
  2759  003A  00D5               	movwf	CheckOnceResult@KeyResTemp+1
  2760                           
  2761                           ;CheckTouchKey.c: 242: KeyDown = Table_KeyDown[cnt];
  2762  003B  0856               	movf	CheckOnceResult@cnt,w
  2763  003C  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  2764  003D  0084               	movwf	4
  2765  003E  232A               	fcall	stringdir
  2766  003F  00D3               	movwf	CheckOnceResult@KeyDown
  2767                           
  2768                           ;CheckTouchKey.c: 244: KeyValue = KeyResTemp + KeyDown;
  2769  0040  00D1               	movwf	CheckOnceResult@KeyValue
  2770  0041  01D2               	clrf	CheckOnceResult@KeyValue+1
  2771  0042  0854               	movf	CheckOnceResult@KeyResTemp,w
  2772  0043  07D1               	addwf	CheckOnceResult@KeyValue,f
  2773  0044  1803               	skipnc
  2774  0045  0AD2               	incf	CheckOnceResult@KeyValue+1,f
  2775  0046  0855               	movf	CheckOnceResult@KeyResTemp+1,w
  2776  0047  07D2               	addwf	CheckOnceResult@KeyValue+1,f
  2777                           
  2778                           ;CheckTouchKey.c: 246: if(!KeyIsIn(cnt))
  2779  0048  0856               	movf	CheckOnceResult@cnt,w
  2780  0049  2363               	fcall	_KeyIsIn
  2781  004A  3A00               	xorlw	0
  2782                           
  2783                           ;CheckTouchKey.c: 247: {
  2784                           ;CheckTouchKey.c: 249: OldValue = KeyOldValue2[cnt];
  2785  004B  1003               	clrc
  2786  004C  1D03               	skipz
  2787  004D  28A5               	goto	L4
  2788  004E  0D56               	rlf	CheckOnceResult@cnt,w
  2789  004F  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2790  0050  0084               	movwf	4
  2791  0051  1383               	bcf	3,7	;select IRP bank0
  2792  0052  0800               	movf	0,w
  2793  0053  00CE               	movwf	CheckOnceResult@OldValue
  2794  0054  0A84               	incf	4,f
  2795  0055  0800               	movf	0,w
  2796  0056  00CF               	movwf	CheckOnceResult@OldValue+1
  2797                           
  2798                           ;CheckTouchKey.c: 251: if(KeyReference[cnt] > KeyValue)
  2799  0057  1003               	clrc
  2800  0058  0D56               	rlf	CheckOnceResult@cnt,w
  2801  0059  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2802  005A  20FF               	fcall	PL6	;call to abstracted procedure
  2803  005B  0252               	subwf	CheckOnceResult@KeyValue+1,w
  2804  005C  1D03               	skipz
  2805  005D  2860               	goto	u1365
  2806  005E  084A               	movf	??_CheckOnceResult,w
  2807  005F  0251               	subwf	CheckOnceResult@KeyValue,w
  2808  0060                     u1365:	
  2809  0060  1803               	skipnc
  2810  0061  286E               	goto	l2735
  2811                           
  2812                           ;CheckTouchKey.c: 252: {
  2813                           ;CheckTouchKey.c: 253: KeyResTemp = KeyReference[cnt] - KeyResTemp;
  2814  0062  1003               	clrc
  2815  0063  0D56               	rlf	CheckOnceResult@cnt,w
  2816  0064  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2817  0065  20FF               	fcall	PL6	;call to abstracted procedure
  2818  0066  0854               	movf	CheckOnceResult@KeyResTemp,w
  2819  0067  024A               	subwf	??_CheckOnceResult,w
  2820  0068  00D4               	movwf	CheckOnceResult@KeyResTemp
  2821  0069  0855               	movf	CheckOnceResult@KeyResTemp+1,w
  2822  006A  1C03               	skipc
  2823  006B  0A55               	incf	CheckOnceResult@KeyResTemp+1,w
  2824  006C  024B               	subwf	??_CheckOnceResult+1,w
  2825  006D  2891               	goto	L2
  2826  006E                     l2735:	
  2827                           ;CheckTouchKey.c: 254: }
  2828                           
  2829                           
  2830                           ;CheckTouchKey.c: 255: else if ((OldValue > KeyValue) && (KeyOldValue1[cnt] > KeyValue))
  2831  006E  084F               	movf	CheckOnceResult@OldValue+1,w
  2832  006F  0252               	subwf	CheckOnceResult@KeyValue+1,w
  2833  0070  1D03               	skipz
  2834  0071  2874               	goto	u1375
  2835  0072  084E               	movf	CheckOnceResult@OldValue,w
  2836  0073  0251               	subwf	CheckOnceResult@KeyValue,w
  2837  0074                     u1375:	
  2838  0074  1803               	skipnc
  2839  0075  28E5               	goto	l2781
  2840  0076  1003               	clrc
  2841  0077  0D56               	rlf	CheckOnceResult@cnt,w
  2842  0078  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2843  0079  20FF               	fcall	PL6	;call to abstracted procedure
  2844  007A  0252               	subwf	CheckOnceResult@KeyValue+1,w
  2845  007B  1D03               	skipz
  2846  007C  287F               	goto	u1385
  2847  007D  084A               	movf	??_CheckOnceResult,w
  2848  007E  0251               	subwf	CheckOnceResult@KeyValue,w
  2849  007F                     u1385:	
  2850  007F  1803               	skipnc
  2851  0080  28E5               	goto	l2781
  2852                           
  2853                           ;CheckTouchKey.c: 256: {
  2854                           ;CheckTouchKey.c: 257: KeyReference[cnt] = OldValue;
  2855  0081  1003               	clrc
  2856  0082  0D56               	rlf	CheckOnceResult@cnt,w
  2857  0083  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2858  0084  0084               	movwf	4
  2859  0085  084E               	movf	CheckOnceResult@OldValue,w
  2860  0086  0080               	movwf	0
  2861  0087  0A84               	incf	4,f
  2862  0088  084F               	movf	CheckOnceResult@OldValue+1,w
  2863  0089  0080               	movwf	0
  2864                           
  2865                           ;CheckTouchKey.c: 258: KeyResTemp = OldValue - KeyResTemp;
  2866  008A  0854               	movf	CheckOnceResult@KeyResTemp,w
  2867  008B  024E               	subwf	CheckOnceResult@OldValue,w
  2868  008C  00D4               	movwf	CheckOnceResult@KeyResTemp
  2869  008D  0855               	movf	CheckOnceResult@KeyResTemp+1,w
  2870  008E  1C03               	skipc
  2871  008F  0A55               	incf	CheckOnceResult@KeyResTemp+1,w
  2872  0090  024F               	subwf	CheckOnceResult@OldValue+1,w
  2873  0091                     L2:	
  2874  0091  00D5               	movwf	CheckOnceResult@KeyResTemp+1
  2875                           
  2876                           ;CheckTouchKey.c: 263: }
  2877                           ;CheckTouchKey.c: 265: KeyUpShake[cnt] = 0;
  2878                           
  2879                           ;CheckTouchKey.c: 259: }
  2880  0092  0856               	movf	CheckOnceResult@cnt,w
  2881  0093  3E3C               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2882  0094  0084               	movwf	4
  2883  0095  0180               	clrf	0
  2884                           
  2885                           ;CheckTouchKey.c: 268: {
  2886                           ;CheckTouchKey.c: 269: if(KeyResTemp >> 8)
  2887  0096  0855               	movf	CheckOnceResult@KeyResTemp+1,w
  2888  0097  1903               	btfsc	3,2
  2889  0098  289B               	goto	l2749
  2890                           
  2891                           ;CheckTouchKey.c: 270: {
  2892                           ;CheckTouchKey.c: 271: KeyDown = 0xFF;
  2893  0099  30FF               	movlw	255
  2894  009A  289C               	goto	L3
  2895  009B                     l2749:	
  2896                           ;CheckTouchKey.c: 272: }
  2897                           
  2898                           
  2899                           ;CheckTouchKey.c: 273: else
  2900                           ;CheckTouchKey.c: 274: {
  2901                           ;CheckTouchKey.c: 275: KeyDown = KeyResTemp & 0xFF;
  2902  009B  0854               	movf	CheckOnceResult@KeyResTemp,w
  2903  009C                     L3:	
  2904  009C  00D3               	movwf	CheckOnceResult@KeyDown
  2905                           
  2906                           ;CheckTouchKey.c: 276: }
  2907                           ;CheckTouchKey.c: 278: if(KeyMaxSub < KeyDown)
  2908  009D  0243               	subwf	_KeyMaxSub,w
  2909  009E  1803               	skipnc
  2910  009F  28A3               	goto	l2755
  2911                           
  2912                           ;CheckTouchKey.c: 279: {
  2913                           ;CheckTouchKey.c: 280: KeyMaxSub = KeyDown;
  2914  00A0  0853               	movf	CheckOnceResult@KeyDown,w
  2915  00A1  00C3               	movwf	_KeyMaxSub
  2916  00A2  28E0               	goto	l2779
  2917  00A3                     l2755:	
  2918                           ;CheckTouchKey.c: 282: }
  2919                           
  2920                           ;CheckTouchKey.c: 281: KeyHave(cnt,flag);
  2921                           
  2922                           
  2923                           ;CheckTouchKey.c: 283: else
  2924                           ;CheckTouchKey.c: 284: {
  2925                           ;CheckTouchKey.c: 285: KeyCounter++;
  2926  00A3  0AC4               	incf	_KeyCounter,f
  2927  00A4  28E5               	goto	l2781
  2928  00A5                     L4:	
  2929                           ;CheckTouchKey.c: 294: else
  2930                           ;CheckTouchKey.c: 295: {
  2931                           ;CheckTouchKey.c: 298: if(KeyReference[cnt]+1 < KeyValue)
  2932                           
  2933  00A5  0D56               	rlf	CheckOnceResult@cnt,w
  2934  00A6  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2935  00A7  0084               	movwf	4
  2936  00A8  1383               	bcf	3,7	;select IRP bank0
  2937  00A9  0800               	movf	0,w
  2938  00AA  00CA               	movwf	??_CheckOnceResult
  2939  00AB  0A84               	incf	4,f
  2940  00AC  0800               	movf	0,w
  2941  00AD  00CB               	movwf	??_CheckOnceResult+1
  2942  00AE  084A               	movf	??_CheckOnceResult,w
  2943  00AF  3E01               	addlw	1
  2944  00B0  00CC               	movwf	??_CheckOnceResult+2
  2945  00B1  084B               	movf	??_CheckOnceResult+1,w
  2946  00B2  1803               	skipnc
  2947  00B3  3E01               	addlw	1
  2948  00B4  00CD               	movwf	??_CheckOnceResult+3
  2949  00B5  0852               	movf	CheckOnceResult@KeyValue+1,w
  2950  00B6  024D               	subwf	??_CheckOnceResult+3,w
  2951  00B7  1D03               	skipz
  2952  00B8  28BB               	goto	u1415
  2953  00B9  0851               	movf	CheckOnceResult@KeyValue,w
  2954  00BA  024C               	subwf	??_CheckOnceResult+2,w
  2955  00BB                     u1415:	
  2956  00BB  1C03               	btfss	3,0
  2957  00BC  28E5               	goto	l2781
  2958                           
  2959                           ;CheckTouchKey.c: 302: else if((KeyOldValue2[cnt]+KeyDown<KeyResTemp) || (KeyOldValue1[c
      +                          nt]+KeyDown<KeyResTemp))
  2960  00BD  1003               	clrc
  2961  00BE  0D56               	rlf	CheckOnceResult@cnt,w
  2962  00BF  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2963  00C0  0084               	movwf	4
  2964  00C1  0800               	movf	0,w
  2965  00C2  20ED               	fcall	PL4	;call to abstracted procedure
  2966  00C3  1C03               	skipc
  2967  00C4  28CD               	goto	l2769
  2968  00C5  1003               	clrc
  2969  00C6  0D56               	rlf	CheckOnceResult@cnt,w
  2970  00C7  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2971  00C8  0084               	movwf	4
  2972  00C9  0800               	movf	0,w
  2973  00CA  20ED               	fcall	PL4	;call to abstracted procedure
  2974  00CB  1803               	skipnc
  2975  00CC  28D8               	goto	l2773
  2976  00CD                     l2769:	
  2977                           
  2978                           ;CheckTouchKey.c: 303: {
  2979                           ;CheckTouchKey.c: 304: if(++KeyUpShake[cnt] > 8)
  2980  00CD  0856               	movf	CheckOnceResult@cnt,w
  2981  00CE  3E3C               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2982  00CF  0084               	movwf	4
  2983  00D0  3009               	movlw	9
  2984  00D1  0A80               	incf	0,f
  2985  00D2  0200               	subwf	0,w
  2986  00D3  1C03               	skipc
  2987  00D4  28DC               	goto	l2777
  2988                           
  2989                           ;CheckTouchKey.c: 305: {
  2990                           ;CheckTouchKey.c: 306: KeyClearOne(cnt);
  2991  00D5  0856               	movf	CheckOnceResult@cnt,w
  2992  00D6  22FC               	fcall	_KeyClearOne
  2993                           
  2994                           ;CheckTouchKey.c: 307: continue;
  2995  00D7  28E5               	goto	l2781
  2996  00D8                     l2773:	
  2997                           
  2998                           ;CheckTouchKey.c: 310: else
  2999                           ;CheckTouchKey.c: 311: {
  3000                           ;CheckTouchKey.c: 312: KeyUpShake[cnt] = 0;
  3001  00D8  0856               	movf	CheckOnceResult@cnt,w
  3002  00D9  3E3C               	addlw	(low (_KeyUpShake| 0))& (0+255)
  3003  00DA  0084               	movwf	4
  3004  00DB  0180               	clrf	0
  3005  00DC                     l2777:	
  3006                           
  3007                           ;CheckTouchKey.c: 319: else if(!(KeyData[0] | KeyData[1]))
  3008  00DC  0837               	movf	_KeyData+1,w	;volatile
  3009  00DD  0436               	iorwf	_KeyData,w	;volatile
  3010  00DE  1D03               	btfss	3,2
  3011  00DF  28E5               	goto	l2781
  3012  00E0                     l2779:	
  3013                           
  3014                           ;CheckTouchKey.c: 320: {
  3015                           ;CheckTouchKey.c: 321: KeyHave(cnt,flag);
  3016  00E0  0850               	movf	CheckOnceResult@flag,w
  3017  00E1  00F4               	movwf	KeyHave@flag
  3018  00E2  01F5               	clrf	KeyHave@flag+1
  3019  00E3  0856               	movf	CheckOnceResult@cnt,w
  3020  00E4  239F               	fcall	_KeyHave
  3021  00E5                     l2781:	
  3022  00E5  3002               	movlw	2
  3023  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  3024  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  3025  00E8  0AD6               	incf	CheckOnceResult@cnt,f
  3026  00E9  0256               	subwf	CheckOnceResult@cnt,w
  3027  00EA  1803               	btfsc	3,0
  3028  00EB  0008               	return
  3029  00EC  281E               	goto	l2717
  3030  00ED                     __end_of_CheckOnceResult:	
  3031  00ED                     PL4:	
  3032  00ED  00CA               	movwf	??_CheckOnceResult
  3033  00EE  0A84               	incf	4,f
  3034  00EF  0800               	movf	0,w
  3035  00F0  00CB               	movwf	??_CheckOnceResult+1
  3036  00F1  0853               	movf	CheckOnceResult@KeyDown,w
  3037  00F2  074A               	addwf	??_CheckOnceResult,w
  3038  00F3  00CC               	movwf	??_CheckOnceResult+2
  3039  00F4  084B               	movf	??_CheckOnceResult+1,w
  3040  00F5  1803               	skipnc
  3041  00F6  0A4B               	incf	??_CheckOnceResult+1,w
  3042  00F7  00CD               	movwf	??_CheckOnceResult+3
  3043  00F8  0855               	movf	CheckOnceResult@KeyResTemp+1,w
  3044  00F9  024D               	subwf	??_CheckOnceResult+3,w
  3045  00FA  1D03               	skipz
  3046  00FB  0008               	return
  3047  00FC  0854               	movf	CheckOnceResult@KeyResTemp,w
  3048  00FD  024C               	subwf	??_CheckOnceResult+2,w
  3049  00FE  0008               	return
  3050  00FF                     __end_ofPL4:	
  3051  00FF                     PL6:	
  3052  00FF  0084               	movwf	4
  3053  0100  0800               	movf	0,w
  3054  0101  00CA               	movwf	??_CheckOnceResult
  3055  0102  0A84               	incf	4,f
  3056  0103  0800               	movf	0,w
  3057  0104  00CB               	movwf	??_CheckOnceResult+1
  3058  0105  0008               	return
  3059  0106                     __end_ofPL6:	
  3060                           
  3061                           	psect	text26
  3062  039F                     __ptext26:	
  3063 ;; *************** function _KeyHave *****************
  3064 ;; Defined at:
  3065 ;;		line 142 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  cnt             1    wreg     unsigned char 
  3068 ;;  flag            2    2[COMMON] unsigned int 
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;  cnt             1    4[COMMON] unsigned char 
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  1    wreg      void 
  3073 ;; Registers used:
  3074 ;;		wreg, status,2, status,0
  3075 ;; Tracked objects:
  3076 ;;		On entry : B00/0
  3077 ;;		On exit  : B00/0
  3078 ;;		Unchanged: 800/0
  3079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3080 ;;      Params:         2       0       0       0
  3081 ;;      Locals:         1       0       0       0
  3082 ;;      Temps:          0       0       0       0
  3083 ;;      Totals:         3       0       0       0
  3084 ;;Total ram usage:        3 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:    1
  3087 ;; This function calls:
  3088 ;;		Nothing
  3089 ;; This function is called by:
  3090 ;;		_CheckOnceResult
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           
  3095                           ;psect for function _KeyHave
  3096  039F                     _KeyHave:	
  3097                           
  3098                           ;incstack = 0
  3099                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  3100                           ;KeyHave@cnt stored from wreg
  3101  039F  00F6               	movwf	KeyHave@cnt
  3102                           
  3103                           ;CheckTouchKey.c: 144: KeyCounter++;
  3104  03A0  0AC4               	incf	_KeyCounter,f
  3105                           
  3106                           ;CheckTouchKey.c: 147: {
  3107                           ;CheckTouchKey.c: 148: KeyData[0] = 0;
  3108  03A1  01B6               	clrf	_KeyData	;volatile
  3109                           
  3110                           ;CheckTouchKey.c: 149: KeyData[1] = 0;
  3111  03A2  01B7               	clrf	_KeyData+1	;volatile
  3112                           
  3113                           ;CheckTouchKey.c: 150: if(cnt&0x8)
  3114  03A3  1DF6               	btfss	KeyHave@cnt,3
  3115  03A4  2BA8               	goto	l2241
  3116                           
  3117                           ;CheckTouchKey.c: 151: {
  3118                           ;CheckTouchKey.c: 152: KeyData[1] = flag;
  3119  03A5  0874               	movf	KeyHave@flag,w
  3120  03A6  00B7               	movwf	_KeyData+1	;volatile
  3121                           
  3122                           ;CheckTouchKey.c: 153: }
  3123  03A7  0008               	return
  3124  03A8                     l2241:	
  3125                           
  3126                           ;CheckTouchKey.c: 154: else
  3127                           ;CheckTouchKey.c: 155: {
  3128                           ;CheckTouchKey.c: 156: KeyData[0] = flag;
  3129  03A8  0874               	movf	KeyHave@flag,w
  3130  03A9  00B6               	movwf	_KeyData	;volatile
  3131  03AA  0008               	return
  3132  03AB                     __end_of_KeyHave:	
  3133                           
  3134                           	psect	text27
  3135  02FC                     __ptext27:	
  3136 ;; *************** function _KeyClearOne *****************
  3137 ;; Defined at:
  3138 ;;		line 80 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;  cnt             1    wreg     unsigned char 
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;  cnt             1    2[COMMON] unsigned char 
  3143 ;; Return value:  Size  Location     Type
  3144 ;;                  1    wreg      void 
  3145 ;; Registers used:
  3146 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3147 ;; Tracked objects:
  3148 ;;		On entry : 0/0
  3149 ;;		On exit  : 800/0
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3152 ;;      Params:         0       0       0       0
  3153 ;;      Locals:         1       0       0       0
  3154 ;;      Temps:          0       0       0       0
  3155 ;;      Totals:         1       0       0       0
  3156 ;;Total ram usage:        1 bytes
  3157 ;; Hardware stack levels used:    1
  3158 ;; Hardware stack levels required when called:    1
  3159 ;; This function calls:
  3160 ;;		Nothing
  3161 ;; This function is called by:
  3162 ;;		_KeyClearIn
  3163 ;;		_KeyStopClear
  3164 ;;		_CheckOnceResult
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           
  3169                           ;psect for function _KeyClearOne
  3170  02FC                     _KeyClearOne:	
  3171                           
  3172                           ;incstack = 0
  3173                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  3174                           ;KeyClearOne@cnt stored from wreg
  3175  02FC  00F4               	movwf	KeyClearOne@cnt
  3176                           
  3177                           ;CheckTouchKey.c: 82: KeyOldValue0[cnt] = 0;
  3178  02FD  1003               	clrc
  3179  02FE  0D74               	rlf	KeyClearOne@cnt,w
  3180  02FF  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3181  0300  0084               	movwf	4
  3182  0301  1383               	bcf	3,7	;select IRP bank0
  3183                           
  3184                           ;CheckTouchKey.c: 83: KeyOldValue1[cnt] = 0;
  3185  0302  230F               	fcall	PL12	;call to abstracted procedure
  3186  0303  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3187  0304  0084               	movwf	4
  3188                           
  3189                           ;CheckTouchKey.c: 84: KeyOldValue2[cnt] = 0;
  3190  0305  230F               	fcall	PL12	;call to abstracted procedure
  3191  0306  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3192  0307  0084               	movwf	4
  3193                           
  3194                           ;CheckTouchKey.c: 85: KeyReference[cnt] = 0;
  3195  0308  230F               	fcall	PL12	;call to abstracted procedure
  3196  0309  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  3197  030A  0084               	movwf	4
  3198  030B  0180               	clrf	0
  3199  030C  0A84               	incf	4,f
  3200  030D  0180               	clrf	0
  3201  030E  0008               	return
  3202  030F                     __end_of_KeyClearOne:	
  3203  030F                     PL12:	
  3204  030F  0180               	clrf	0
  3205  0310  0A84               	incf	4,f
  3206  0311  0180               	clrf	0
  3207  0312  1003               	clrc
  3208  0313  0D74               	rlf	KeyClearOne@cnt,w
  3209  0314  0008               	return
  3210  0315                     __end_ofPL12:	
  3211                           
  3212                           	psect	text28
  3213  0106                     __ptext28:	
  3214 ;; *************** function _CheckKeyOldValue *****************
  3215 ;; Defined at:
  3216 ;;		line 335 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;		None
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;  KeyOldTemp      2    2[BANK0 ] unsigned int 
  3221 ;;  KeyResTemp      2    0[BANK0 ] unsigned int 
  3222 ;;  cnt             1    4[BANK0 ] unsigned char 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 300/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3232 ;;      Params:         0       0       0       0
  3233 ;;      Locals:         0       5       0       0
  3234 ;;      Temps:          2       0       0       0
  3235 ;;      Totals:         2       5       0       0
  3236 ;;Total ram usage:        7 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    3
  3239 ;; This function calls:
  3240 ;;		_KeyIsIn
  3241 ;; This function is called by:
  3242 ;;		_CheckTouchKey
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           
  3247                           ;psect for function _CheckKeyOldValue
  3248  0106                     _CheckKeyOldValue:	
  3249  0106  3004               	movlw	4
  3250                           
  3251                           ;CheckTouchKey.c: 337: static unsigned char counter = 0;
  3252                           ;CheckTouchKey.c: 338: unsigned char cnt = 0;
  3253                           
  3254                           ;incstack = 0
  3255                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3256  0107  1283               	bcf	3,5	;RP0=0, select bank0
  3257  0108  1303               	bcf	3,6	;RP1=0, select bank0
  3258  0109  01CE               	clrf	CheckKeyOldValue@cnt
  3259                           
  3260                           ;CheckTouchKey.c: 339: unsigned int KeyResTemp;
  3261                           ;CheckTouchKey.c: 340: unsigned int KeyOldTemp;
  3262                           ;CheckTouchKey.c: 342: if(++counter < 4)
  3263  010A  0AC2               	incf	CheckKeyOldValue@counter,f
  3264  010B  0242               	subwf	CheckKeyOldValue@counter,w
  3265  010C  1C03               	btfss	3,0
  3266  010D  0008               	return
  3267                           
  3268                           ;CheckTouchKey.c: 344: counter = 0;
  3269  010E  01C2               	clrf	CheckKeyOldValue@counter
  3270  010F                     l2415:	
  3271                           
  3272                           ;CheckTouchKey.c: 347: {
  3273                           ;CheckTouchKey.c: 348: KeyResTemp = KeyResSum[cnt];
  3274  010F  1003               	clrc
  3275  0110  0D4E               	rlf	CheckKeyOldValue@cnt,w
  3276  0111  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  3277  0112  0084               	movwf	4
  3278  0113  1383               	bcf	3,7	;select IRP bank0
  3279  0114  0800               	movf	0,w
  3280  0115  00CA               	movwf	CheckKeyOldValue@KeyResTemp
  3281  0116  0A84               	incf	4,f
  3282  0117  0800               	movf	0,w
  3283  0118  00CB               	movwf	CheckKeyOldValue@KeyResTemp+1
  3284                           
  3285                           ;CheckTouchKey.c: 349: if(!KeyIsIn(cnt))
  3286  0119  084E               	movf	CheckKeyOldValue@cnt,w
  3287  011A  2363               	fcall	_KeyIsIn
  3288  011B  3A00               	xorlw	0
  3289                           
  3290                           ;CheckTouchKey.c: 350: {
  3291                           ;CheckTouchKey.c: 352: KeyOldTemp = KeyOldValue0[cnt] - KeyResTemp;
  3292  011C  1003               	clrc
  3293  011D  1D03               	skipz
  3294  011E  294F               	goto	L8
  3295  011F  0D4E               	rlf	CheckKeyOldValue@cnt,w
  3296  0120  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3297  0121  0084               	movwf	4
  3298  0122  1383               	bcf	3,7	;select IRP bank0
  3299                           
  3300                           ;CheckTouchKey.c: 353: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3301  0123  2160               	fcall	PL2	;call to abstracted procedure
  3302  0124  1903               	skipnz
  3303  0125  024C               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3304  0126  1C03               	skipc
  3305  0127  292E               	goto	L5
  3306  0128  0F4C               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3307  0129  294E               	goto	l1146
  3308  012A  0A4D               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3309                           
  3310                           ;CheckTouchKey.c: 354: {
  3311                           ;CheckTouchKey.c: 355: KeyOldTemp = KeyOldValue1[cnt] - KeyResTemp;
  3312  012B  1003               	clrc
  3313  012C  1D03               	btfss	3,2
  3314  012D  294F               	goto	L8
  3315  012E                     L5:	
  3316  012E  0D4E               	rlf	CheckKeyOldValue@cnt,w
  3317  012F  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3318  0130  0084               	movwf	4
  3319                           
  3320                           ;CheckTouchKey.c: 356: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3321  0131  2160               	fcall	PL2	;call to abstracted procedure
  3322  0132  1903               	skipnz
  3323  0133  024C               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3324  0134  1C03               	skipc
  3325  0135  293C               	goto	L6
  3326  0136  0F4C               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3327  0137  294E               	goto	l1146
  3328  0138  0A4D               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3329                           
  3330                           ;CheckTouchKey.c: 357: {
  3331                           ;CheckTouchKey.c: 358: KeyOldTemp = KeyOldValue2[cnt] - KeyResTemp;
  3332  0139  1003               	clrc
  3333  013A  1D03               	btfss	3,2
  3334  013B  294F               	goto	L8
  3335  013C                     L6:	
  3336  013C  0D4E               	rlf	CheckKeyOldValue@cnt,w
  3337  013D  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3338  013E  0084               	movwf	4
  3339                           
  3340                           ;CheckTouchKey.c: 359: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3341  013F  2160               	fcall	PL2	;call to abstracted procedure
  3342  0140  1903               	skipnz
  3343  0141  024C               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3344  0142  1C03               	skipc
  3345  0143  294A               	goto	L7
  3346  0144  0F4C               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3347  0145  294E               	goto	l1146
  3348  0146  0A4D               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3349                           
  3350                           ;CheckTouchKey.c: 360: {
  3351                           ;CheckTouchKey.c: 361: KeyReference[cnt] = KeyResTemp;
  3352  0147  1003               	clrc
  3353  0148  1D03               	btfss	3,2
  3354  0149  294F               	goto	L8
  3355  014A                     L7:	
  3356  014A  0D4E               	rlf	CheckKeyOldValue@cnt,w
  3357  014B  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  3358  014C  0084               	movwf	4
  3359  014D  2181               	fcall	PL14	;call to abstracted procedure
  3360  014E                     l1146:	
  3361                           
  3362                           ;CheckTouchKey.c: 362: }
  3363                           ;CheckTouchKey.c: 363: }
  3364                           ;CheckTouchKey.c: 364: }
  3365                           ;CheckTouchKey.c: 365: }
  3366                           ;CheckTouchKey.c: 368: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  3367  014E  1003               	clrc
  3368  014F                     L8:	
  3369  014F  0D4E               	rlf	CheckKeyOldValue@cnt,w
  3370  0150  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3371  0151  0084               	movwf	4
  3372  0152  1383               	bcf	3,7	;select IRP bank0
  3373  0153  2179               	fcall	PL10	;call to abstracted procedure
  3374  0154  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3375                           
  3376                           ;CheckTouchKey.c: 369: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  3377  0155  216E               	fcall	PL8	;call to abstracted procedure
  3378  0156  2179               	fcall	PL10	;call to abstracted procedure
  3379  0157  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3380                           
  3381                           ;CheckTouchKey.c: 370: KeyOldValue0[cnt] = KeyResTemp;
  3382  0158  216E               	fcall	PL8	;call to abstracted procedure
  3383  0159  2181               	fcall	PL14	;call to abstracted procedure
  3384  015A  3002               	movlw	2
  3385  015B  0ACE               	incf	CheckKeyOldValue@cnt,f
  3386  015C  024E               	subwf	CheckKeyOldValue@cnt,w
  3387  015D  1803               	btfsc	3,0
  3388  015E  0008               	return
  3389  015F  290F               	goto	l2415
  3390  0160                     __end_of_CheckKeyOldValue:	
  3391  0160                     PL2:	
  3392  0160  0800               	movf	0,w
  3393  0161  00CC               	movwf	CheckKeyOldValue@KeyOldTemp
  3394  0162  0A84               	incf	4,f
  3395  0163  0800               	movf	0,w
  3396  0164  00CD               	movwf	CheckKeyOldValue@KeyOldTemp+1
  3397  0165  084A               	movf	CheckKeyOldValue@KeyResTemp,w
  3398  0166  02CC               	subwf	CheckKeyOldValue@KeyOldTemp,f
  3399  0167  084B               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3400  0168  1C03               	skipc
  3401  0169  03CD               	decf	CheckKeyOldValue@KeyOldTemp+1,f
  3402  016A  02CD               	subwf	CheckKeyOldValue@KeyOldTemp+1,f
  3403  016B  3000               	movlw	0
  3404  016C  024D               	subwf	CheckKeyOldValue@KeyOldTemp+1,w
  3405  016D  3402               	retlw	2
  3406  016E                     __end_ofPL2:	
  3407  016E                     PL8:	
  3408  016E  0084               	movwf	4
  3409  016F  0876               	movf	??_CheckKeyOldValue,w
  3410  0170  0080               	movwf	0
  3411  0171  0A84               	incf	4,f
  3412  0172  0877               	movf	??_CheckKeyOldValue+1,w
  3413  0173  0080               	movwf	0
  3414  0174  1003               	clrc
  3415  0175  0D4E               	rlf	CheckKeyOldValue@cnt,w
  3416  0176  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3417  0177  0084               	movwf	4
  3418  0178  0008               	return
  3419  0179                     __end_ofPL8:	
  3420  0179                     PL10:	
  3421  0179  0800               	movf	0,w
  3422  017A  00F6               	movwf	??_CheckKeyOldValue
  3423  017B  0A84               	incf	4,f
  3424  017C  0800               	movf	0,w
  3425  017D  00F7               	movwf	??_CheckKeyOldValue+1
  3426  017E  1003               	clrc
  3427  017F  0D4E               	rlf	CheckKeyOldValue@cnt,w
  3428  0180  0008               	return
  3429  0181                     __end_ofPL10:	
  3430  0181                     PL14:	
  3431  0181  084A               	movf	CheckKeyOldValue@KeyResTemp,w
  3432  0182  0080               	movwf	0
  3433  0183  0A84               	incf	4,f
  3434  0184  084B               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3435  0185  0080               	movwf	0
  3436  0186  0008               	return
  3437  0187                     __end_ofPL14:	
  3438                           
  3439                           	psect	text29
  3440  0363                     __ptext29:	
  3441 ;; *************** function _KeyIsIn *****************
  3442 ;; Defined at:
  3443 ;;		line 58 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;  cnt             1    wreg     unsigned char 
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;  cnt             1    3[COMMON] unsigned char 
  3448 ;;  i               1    2[COMMON] unsigned char 
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  1    wreg      unsigned char 
  3451 ;; Registers used:
  3452 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 300/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3458 ;;      Params:         0       0       0       0
  3459 ;;      Locals:         2       0       0       0
  3460 ;;      Temps:          0       0       0       0
  3461 ;;      Totals:         2       0       0       0
  3462 ;;Total ram usage:        2 bytes
  3463 ;; Hardware stack levels used:    2
  3464 ;; Hardware stack levels required when called:    1
  3465 ;; This function calls:
  3466 ;;		Nothing
  3467 ;; This function is called by:
  3468 ;;		_KeyClearIn
  3469 ;;		_CheckOnceResult
  3470 ;;		_CheckKeyOldValue
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           
  3475                           ;psect for function _KeyIsIn
  3476  0363                     _KeyIsIn:	
  3477                           
  3478                           ;incstack = 0
  3479                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  3480                           ;KeyIsIn@cnt stored from wreg
  3481  0363  00F5               	movwf	KeyIsIn@cnt
  3482                           
  3483                           ;CheckTouchKey.c: 60: unsigned char i = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  3484  0364  3907               	andlw	7
  3485  0365  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  3486  0366  0084               	movwf	4
  3487  0367  232A               	fcall	stringdir
  3488  0368  00F4               	movwf	KeyIsIn@i
  3489                           
  3490                           ;CheckTouchKey.c: 62: if(cnt&0x8)
  3491  0369  1DF5               	btfss	KeyIsIn@cnt,3
  3492  036A  2B6F               	goto	l2163
  3493                           
  3494                           ;CheckTouchKey.c: 63: {
  3495                           ;CheckTouchKey.c: 64: i &= KeyFlag[1];
  3496  036B  1283               	bcf	3,5	;RP0=0, select bank0
  3497  036C  1303               	bcf	3,6	;RP1=0, select bank0
  3498  036D  083F               	movf	_KeyFlag+1,w	;volatile
  3499  036E  2B72               	goto	L9
  3500  036F                     l2163:	
  3501                           ;CheckTouchKey.c: 65: }
  3502                           
  3503                           
  3504                           ;CheckTouchKey.c: 66: else
  3505                           ;CheckTouchKey.c: 67: {
  3506                           ;CheckTouchKey.c: 68: i &= KeyFlag[0];
  3507  036F  1283               	bcf	3,5	;RP0=0, select bank0
  3508  0370  1303               	bcf	3,6	;RP1=0, select bank0
  3509  0371  083E               	movf	_KeyFlag,w	;volatile
  3510  0372                     L9:	
  3511  0372  05F4               	andwf	KeyIsIn@i,f
  3512                           
  3513                           ;CheckTouchKey.c: 69: }
  3514                           ;CheckTouchKey.c: 70: return i;
  3515  0373  0874               	movf	KeyIsIn@i,w
  3516  0374  0008               	return
  3517  0375                     __end_of_KeyIsIn:	
  3518                           
  3519                           	psect	text30
  3520  027D                     __ptext30:	
  3521 ;; *************** function _Isr_Timer *****************
  3522 ;; Defined at:
  3523 ;;		line 278 in file "C:\Users\mxy\Desktop\keytest2\main.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;		None
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;		None
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  1    wreg      void 
  3530 ;; Registers used:
  3531 ;;		wreg, status,2, status,0
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 300/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3537 ;;      Params:         0       0       0       0
  3538 ;;      Locals:         0       0       0       0
  3539 ;;      Temps:          2       0       0       0
  3540 ;;      Totals:         2       0       0       0
  3541 ;;Total ram usage:        2 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; This function calls:
  3544 ;;		Nothing
  3545 ;; This function is called by:
  3546 ;;		Interrupt level 1
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           
  3551                           ;psect for function _Isr_Timer
  3552  027D                     _Isr_Timer:	
  3553                           
  3554                           ;main.c: 280: if(TMR2IF)
  3555  027D  1283               	bcf	3,5	;RP0=0, select bank0
  3556  027E  1303               	bcf	3,6	;RP1=0, select bank0
  3557  027F  1C8C               	btfss	12,1	;volatile
  3558  0280  2A98               	goto	i1l2627
  3559                           
  3560                           ;main.c: 281: {
  3561                           ;main.c: 282: TMR2IF = 0;
  3562  0281  108C               	bcf	12,1	;volatile
  3563                           
  3564                           ;main.c: 284: if(++MainTime >= 32)
  3565  0282  3020               	movlw	32
  3566  0283  0AC9               	incf	_MainTime,f	;volatile
  3567  0284  0249               	subwf	_MainTime,w	;volatile
  3568  0285  1C03               	skipc
  3569  0286  2A89               	goto	i1l2617
  3570                           
  3571                           ;main.c: 285: {
  3572                           ;main.c: 286: MainTime = 0;
  3573  0287  01C9               	clrf	_MainTime	;volatile
  3574                           
  3575                           ;main.c: 287: B_MainLoop = 1;
  3576  0288  1571               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  3577  0289                     i1l2617:	
  3578                           
  3579                           ;main.c: 288: }
  3580                           ;main.c: 290: if(pwmTime < 12 && sendFlag)
  3581  0289  300C               	movlw	12
  3582  028A  0279               	subwf	_pwmTime,w	;volatile
  3583  028B  1C03               	btfss	3,0
  3584  028C  1C78               	btfss	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
  3585  028D  2A90               	goto	i1l562
  3586                           
  3587                           ;main.c: 291: PORTA&=~(1<<3);
  3588  028E  1185               	bcf	5,3	;volatile
  3589  028F  2A91               	goto	i1l2623
  3590  0290                     i1l562:	
  3591                           
  3592                           ;main.c: 292: else
  3593                           ;main.c: 293: PORTA|=(1<<3);
  3594  0290  1585               	bsf	5,3	;volatile
  3595  0291                     i1l2623:	
  3596                           
  3597                           ;main.c: 294: if(++pwmTime >= 44)
  3598  0291  302C               	movlw	44
  3599  0292  0AF9               	incf	_pwmTime,f	;volatile
  3600  0293  0279               	subwf	_pwmTime,w	;volatile
  3601  0294  1C03               	skipc
  3602  0295  2A99               	goto	i1l566
  3603                           
  3604                           ;main.c: 295: {
  3605                           ;main.c: 296: pwmTime = 0;
  3606  0296  01F9               	clrf	_pwmTime	;volatile
  3607  0297  2A99               	goto	i1l566
  3608  0298                     i1l2627:	
  3609                           
  3610                           ;main.c: 299: else
  3611                           ;main.c: 300: {
  3612                           ;main.c: 301: PIR1 = 0;
  3613  0298  018C               	clrf	12	;volatile
  3614  0299                     i1l566:	
  3615  0299  0873               	movf	??_Isr_Timer+1,w
  3616  029A  008A               	movwf	10
  3617  029B  0E72               	swapf	??_Isr_Timer^(0+-128),w
  3618  029C  0083               	movwf	3
  3619  029D  0EFE               	swapf	126,f
  3620  029E  0E7E               	swapf	126,w
  3621  029F  0009               	retfie
  3622  02A0                     __end_of_Isr_Timer:	
  3623  007E                     btemp	set	126	;btemp
  3624  007E                     wtemp0	set	126
  3625                           
  3626                           	psect	intentry
  3627  0004                     __pintentry:	
  3628                           ;incstack = 0
  3629                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  3630                           
  3631  0004                     interrupt_function:	
  3632  007E                     saved_w	set	btemp
  3633  0004  00FE               	movwf	btemp
  3634  0005  0E03               	swapf	3,w
  3635  0006  00F2               	movwf	??_Isr_Timer
  3636  0007  080A               	movf	10,w
  3637  0008  00F3               	movwf	??_Isr_Timer+1
  3638  0009  2A7D               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    14
    Data        2
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     13      57
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _CheckTouchKey->_CheckKeyOldValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3191
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                         _checkIRKey
                           _startPWM
 ---------------------------------------------------------------------------------
 (1) _startPWM                                             0     0      0       0
                            _initPWM
                           _procKey1
                           _procKey2
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkIRKey                                           1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            2     2      0      89
                                              2 COMMON     2     2      0
                           _procKey1
                           _procKey2
 ---------------------------------------------------------------------------------
 (2) _procKey2                                             0     0      0       0
                              _modea
                              _modeb
                              _modec
                              _moded
                              _modee
 ---------------------------------------------------------------------------------
 (3) _modee                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _moded                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _modec                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _modeb                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _modea                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _procKey1                                             0     0      0       0
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                              _mode5
 ---------------------------------------------------------------------------------
 (3) _mode5                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode4                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode3                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode2                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode1                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3102
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _GetTouchKeyValue                                     2     2      0     157
                                              3 COMMON     2     2      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (3) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1892
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     304
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (4) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
     _procKey1
       _mode1
       _mode2
       _mode3
       _mode4
       _mode5
     _procKey2
       _modea
       _modeb
       _modec
       _moded
       _modee
   _checkIRKey
   _startPWM
     _initPWM
     _procKey1
       _mode1
       _mode2
       _mode3
       _mode4
       _mode5
     _procKey2
       _modea
       _modeb
       _modec
       _moded
       _modee

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK2               50      0       0       9        0.0%
BITBANK2            50      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      D      39       3       71.3%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       3       0       21.4%
CODE                 0      0       0       0        0.0%
DATA                 0      0      43      10        0.0%
ABS                  0      0      43       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Aug 09 18:39:07 2020

                KeyIsIn@cnt 0075                  KeyHave@cnt 0076                 KeyHave@flag 0074  
                         pc 0002                          PL2 0160                          PL4 00ED  
                        PL6 00FF                          PL8 016E               ??_KeyClearOne 0074  
     __size_of_TurnKeyFlags 002F                          fsr 0004            ??_CheckValidTime 0074  
                       PL10 0179                         PL12 030F                         PL14 0181  
                       l530 01BB                         l551 01EA                         l537 01A3  
                       l546 01D7                         l571 0342                         _PR2 0091  
                       fsr0 0004                         indf 0000         CheckOnceResult@flag 0050  
         ?_GetTouchKeyValue 0072                        S2907 03BE                        S2909 03C3  
  __end_of_Table_KeyChannel 033E                  KeyServer@i 0074          ??_GetTouchKeyValue 0075  
                      l1104 0229                        l1105 0239                        l1146 014E  
                      l2211 0384                        l2203 03CC                        l1164 0214  
                      l2221 038C                        l1183 0263                        l2207 03C8  
                      l2241 03A8                        l2225 0375                        l2313 031A  
                      l2217 0385                        l2163 036F                        l2227 0376  
                      l2171 03E8                        l2261 02FA                        l2415 010F  
                      l2335 0241                        l2175 03E4                        l2183 03DC  
                      l2263 02FB                        l2255 02F7                        l2191 03D4  
                      l2511 019F                        l2257 02F8                        l2281 02D9  
                      l2273 02C0                        l2513 01A1                        l2521 01A5  
                      l2179 03E0                        l2187 03D8                        l2259 02F9  
                      l2267 02E8                        l2195 03D0                        l2283 02DA  
                      l2523 01BD                        l2285 02DB                        l2293 02CA  
                      l2509 019A                        l2199 03B3                        l2287 02DC  
                      l2481 0351                        l2473 021B                        l2801 0270  
                      l2289 02DD                        l2561 01EB                        l2811 0278  
                      l2563 01ED                        l2717 001E                        l2549 01D8  
                      l2735 006E                        l2487 0360                        l2809 0274  
                      l2817 027C                        l2905 01AA                        l2569 01F5  
                      l2755 00A3                        l2773 00D8                        l2749 009B  
                      l2781 00E5                        l2839 034D                        l2777 00DC  
                      l2769 00CD                        l2779 00E0                        u1115 0194  
                      u1415 00BB                        u1345 0029                        u1365 0060  
                      u1375 0074                        u1385 007F                        _PIE1 000D  
                      _PIR1 000C                        _WPDB 0087                        _WPUA 0007  
                      _WPUB 0008                        _main 033E                        btemp 007E  
             ?_KeyStopClear 0072                        start 000A                _TurnKeyFlags 01F9  
           __end_of_KeyIsIn 0375             __end_of_KeyHave 03AB  CheckKeyOldValue@KeyOldTemp 004C  
             ??_Init_System 0074  CheckKeyOldValue@KeyResTemp 004A                       ?_main 0072  
                     _T2CON 0012                       i1l562 0290                       i1l566 0299  
                     _PORTA 0005                       _PORTB 0006                       _TRISA 0085  
                     _TRISB 0086                       _PWMTH 0016                       _PWMTL 0015  
       __end_of_KeyClearOne 030F             __end_of_initPWM 039F                       _mode1 03E8  
                     _mode2 03E4                       _mode3 03E0                       _mode4 03DC  
                     _mode5 03D8                       _modea 03D4                       _modeb 03D0  
                     _modec 03B3                       _moded 03CC                       _modee 03C8  
                _KeyClearIn 0384              __pbitbssCOMMON 0380                       pclath 000A  
               _ClearResSum 0375                  _KeyCounter 0044                  _KeyOldData 0038  
            ??_KeyStopClear 0075                       status 0003                       wtemp0 007E  
                _KeyUpShake 003C             __initialization 000B                __end_of_main 0351  
                    ??_main 0078         __end_of_Init_System 02C0                      ?_mode1 0072  
                    ?_mode2 0072                      ?_mode3 0072                      ?_mode4 0072  
                    ?_mode5 0072                      ?_modea 0072                      ?_modeb 0072  
                    ?_modec 0072                      ?_moded 0072                      ?_modee 0072  
                    i1l2623 0291                      i1l2617 0289                      i1l2627 0298  
                    _INTCON 000B          __size_of_KeyServer 003F                      _OSCCON 0088  
                    _TMR2IF 0061                      _PWMD0L 0017                      _PWMD1L 0018  
                    _ONFlag 0387                   ??_KeyIsIn 0074                   ??_KeyHave 0076  
        __size_of_Isr_Timer 0023   CheckOnceResult@KeyResTemp 0054      CheckOnceResult@KeyDown 0053  
 __size_of_CheckKeyOldValue 005A                      _b_kclr 0381                      _b_kerr 0380  
                    _irStep 0048                 _KeyClearOne 02FC                   ??_initPWM 0074  
             _Table_KeyFalg 0330               _Table_KeyDown 0338            __end_of_procKey1 02FC  
          __end_of_procKey2 02DE                      saved_w 007E      __size_of_CheckTouchKey 0026  
          __end_of_startPWM 03BE                 ?_KeyClearIn 0072             _CheckOnceResult 0018  
   __end_of__initialization 0016              __pcstackCOMMON 0072                __pidataBANK0 0000  
             __end_of_mode1 03EC               __end_of_mode2 03E8               __end_of_mode3 03E4  
             __end_of_mode4 03E0               __end_of_mode5 03DC               __end_of_modea 03D8  
             __end_of_modeb 03D4               __end_of_modec 03B9               __end_of_moded 03D0  
             __end_of_modee 03CC                 _Init_System 02A0                  __end_ofPL2 016E  
                __end_ofPL4 00FF                  __end_ofPL6 0106                  __end_ofPL8 0179  
         __end_of_KeyServer 01C6        __end_of_KeyStopClear 032A           __end_of_Isr_Timer 02A0  
           _doublePressFlag 0388                  _checkIRKey 01C6                     ??_mode1 0074  
                   ??_mode2 0074                     ??_mode3 0074                     ??_mode4 0074  
                   ??_mode5 0074                     ??_modea 0074                     ??_modeb 0074  
                   ??_modec 0074                     ??_moded 0074                     ??_modee 0074  
                _checkCount 0045                  __pbssBANK0 0020             _doubleTouchFlag 0384  
 __size_of_GetTouchKeyValue 002F               _CheckTouchKey 0257                  __pmaintext 033E  
                __pintentry 0004         __size_of_KeyClearIn 000E     __end_of_CheckOnceResult 00ED  
                   _KEYCON0 0092                     _KEYCON1 0093               KeyStopClear@i 0075  
                   _PWMD01H 001C                     _PWMCON0 0013                     _PWMCON1 0014  
                   _PWMCON2 001D        __end_of_Table_KeyCap 033C                  __stringtab 032A  
              ?_ClearResSum 0072                     _KeyData 0036                     _KeyFlag 003E  
                   _KeyIsIn 0363                     _KeyHave 039F              ClearResSum@cnt 0074  
            ?_CheckTouchKey 0072                   ?_procKey1 0072                   ?_procKey2 0072  
   CheckOnceResult@KeyValue 0051            _CheckKeyOldValue 0106     CheckOnceResult@OldValue 004E  
                 ?_startPWM 0072      TurnKeyFlags@KeyNoTimes 0040        GetTouchKeyValue@temp 0075  
                   _b_kover 0383                     __ptext1 03B9                     __ptext2 0392  
                   __ptext3 01C6                     __ptext4 0187                     __ptext5 02C0  
                   __ptext6 03C8                     __ptext7 03CC                     __ptext8 03B3  
                   __ptext9 03D0                     _initPWM 0392                     _pwmFlag 0386  
               ?_checkIRKey 0072                     _pwmTime 0079     __size_of_CheckValidTime 0012  
                   clrloop0 03AC        end_of_initialization 0016                  ??_procKey1 0074  
                ??_procKey2 0074                _KeyOldValue0 002C                _KeyOldValue1 0028  
              _KeyOldValue2 0024       __size_of_KeyStopClear 0015                  ??_startPWM 0074  
              ?_KeyClearOne 0072                _KeyReference 0020            ?_CheckOnceResult 0072  
              ??_KeyClearIn 0076          CheckOnceResult@cnt 0056             ??_CheckTouchKey 0078  
              _KeyStopClear 0315            _GetTouchKeyValue 0228         __size_of_checkIRKey 0033  
              ?_Init_System 0072          __end_of_KeyClearIn 0392                   _KeyMaxSub 0043  
                 _KeyResSum 0030                 __end_ofPL10 0181                 __end_ofPL12 0315  
               __end_ofPL14 0187               __pbitnvCOMMON 03C0         start_initialization 000B  
                 _KeyServer 0187                   _Isr_Timer 027D        __size_of_ClearResSum 000F  
             _sendStartFlag 0389               ?_TurnKeyFlags 0072    TurnKeyFlags@KeyHaveTimes 0041  
               __pdataBANK0 0057                _Table_KeyCap 033A                 __pbssCOMMON 0079  
                ?_KeyServer 0072                   ___latbits 0000               __pcstackBANK0 004A  
            _CheckValidTime 0351    __end_of_CheckKeyOldValue 0160                  ?_Isr_Timer 0072  
       KeyServer@KeyOldFlag 003A                    ?_KeyIsIn 0072                    ?_KeyHave 0074  
            ??_TurnKeyFlags 0077           __size_of_procKey1 001E           __size_of_procKey2 001E  
                 __pstrings 032A           __size_of_startPWM 0005                   __pswtext1 03BE  
                 __pswtext2 03C3        __size_of_KeyClearOne 0013                    ?_initPWM 0072  
    __end_of_CheckValidTime 0363                ??_checkIRKey 0074         GetTouchKeyValue@cnt 0076  
            __size_of_mode1 0004              __size_of_mode2 0004              __size_of_mode3 0004  
            __size_of_mode4 0004              __size_of_mode5 0004              __size_of_modea 0004  
            __size_of_modeb 0004              __size_of_modec 0006              __size_of_moded 0004  
            __size_of_modee 0004                    _KEYDATAH 0095                    _KEYDATAL 0094  
         interrupt_function 0004                   clear_ram0 03AB         CheckKeyOldValue@cnt 004E  
        __end_of_checkIRKey 01F9                    KeyIsIn@i 0074                 __stringbase 032F  
      __size_of_Init_System 0020       __end_of_Table_KeyFalg 0338       __end_of_Table_KeyDown 033A  
  __end_of_GetTouchKeyValue 0257             ?_CheckValidTime 0072                 ??_KeyServer 0074  
               _keyLockFlag 0385                 ??_Isr_Timer 0072                    _MainTime 0049  
          __size_of_KeyIsIn 0012            __size_of_KeyHave 000C            _Table_KeyChannel 033C  
        __end_of__stringtab 0330                _revZeroCount 0046                    _b_kover1 0382  
      __end_of_TurnKeyFlags 0228            __size_of_initPWM 000D     CheckValidTime@validtime 0034  
                  __ptext10 03D4                    __ptext11 02DE                    __ptext20 0384  
                  __ptext12 03D8                    __ptext21 0315                    __ptext13 03DC  
                  __ptext30 027D                    __ptext22 0228                    __ptext14 03E0  
                  __ptext23 0375                    __ptext15 03E4                    __ptext24 0351  
                  __ptext16 03E8                    __ptext25 0018                    __ptext17 02A0  
                  __ptext26 039F                    __ptext18 0257                    __ptext27 02FC  
                  __ptext19 01F9                    __ptext28 0106                    __ptext29 0363  
  __size_of_CheckOnceResult 00D5               __size_of_main 0013                    _sendFlag 03C0  
                  _revCount 0047                    _pwm0Step 0058                    _pwm1Step 0057  
     __end_of_CheckTouchKey 027D                    _procKey1 02DE                    _procKey2 02C0  
                  _startPWM 03B9     CheckKeyOldValue@counter 0042           ?_CheckKeyOldValue 0072  
                  intlevel1 0000               ??_ClearResSum 0074          ??_CheckKeyOldValue 0076  
                 stringcode 032A                  _B_MainLoop 038A                  _OPTION_REG 0081  
                  stringdir 032A                    stringtab 032A              KeyClearOne@cnt 0074  
             KeyClearIn@cnt 0076         __end_of_ClearResSum 0384           ??_CheckOnceResult 004A  
