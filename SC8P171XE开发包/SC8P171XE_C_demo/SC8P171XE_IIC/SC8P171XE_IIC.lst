---- H:\MyDownloads\说明书&测试报告\开发包\SC8P171XE开发包\SC8P171XE_C_demo\SC8P171XE_IIC\SC8P171XE_IIC_Soft_Master.c ----------------------------------------------------------------------
1:                
2:                /******************** (C) COPYRIGHT 2021 CMS LTD **************************
3:                * 模拟IIC主控收发参考程序 write by liaol,cms
4:                * 文 件 名：IIC_Soft_Master.c
5:                * 日期版本：2021/01/04 @V1.0
6:                * 官    网：www.mcu.com.cn	
7:                * 备	注：本程序使用SC8P1712E验证通过
8:                **************************************************************************/
9:                
10:               #include <sc.h>
11:               
12:               bit B_MainLoop;
13:               
14:               volatile unsigned char Recebuffer[5];
15:               volatile unsigned char Sendbuffer[5];
16:               
17:               #define I2C_SCL	RA0
18:               #define I2C_SDA	RA1
19:               #define I2C_SCL_IO	TRISA0
20:               #define I2C_SDA_IO	TRISA1
21:               
22:               
23:               unsigned char I2C_Read1Byte(unsigned char ack);
24:               unsigned char I2C_Write1Byte(unsigned char data);
25:               void I2C_WaitMoment();
26:               void I2C_WriteStop();
27:               void I2C_WriteStart();
28:               
29:               
30:               void main()
31:               {
32:               	NOP();
  001A    0000    NOP
  001B    0064    CLRWDT
33:               	CLRWDT();
34:               	OSCCON = 0x70;
  001C    3070    LDIA	0x70
  001D    1683    SETB	0x3,5
  001E    008F    LD	0xF,A
35:               	
36:               	INTCON = 0;
  001F    018B    CLR	0xB
37:               	TRISB = 0;
  0020    0186    CLR	0x6
38:               	PORTB = 0;
  0021    1283    CLRB	0x3,5
  0022    0186    CLR	0x6
39:               	
40:               	PIR1 = 0;
  0023    018C    CLR	0xC
41:               	PIE1 = 0;
  0024    1683    SETB	0x3,5
  0025    018C    CLR	0xC
42:               
43:               	/*初始化定时器2, 125us中断*/
44:               	PR2 = 250;
  0026    30FA    LDIA	0xFA
  0027    0092    LD	0x12,A
45:               	T2CON = 4;
  0028    3004    LDIA	0x4
  0029    1283    CLRB	0x3,5
  002A    0092    LD	0x12,A
46:               	TMR2IE = 1;
  002B    1683    SETB	0x3,5
  002C    148C    SETB	0xC,1
47:               	
48:               	INTCON = 0XC0;
  002D    30C0    LDIA	0xC0
  002E    008B    LD	0xB,A
49:               	
50:               	unsigned char time1s;
51:               	
52:               	while(1)
53:               	{
54:               		if(B_MainLoop)
  002F    1C7B    SNZB	0x7B,0
  0030    282F    JP	0x2F
55:               		{
56:               			B_MainLoop = 0;
  0031    107B    CLRB	0x7B,0
  0032    0064    CLRWDT
57:               			CLRWDT();
58:               			
59:               			if(++time1s >= 200)
  0033    30C8    LDIA	0xC8
  0034    1283    CLRB	0x3,5
  0035    0AA5    INCR	0x25
  0036    0225    SUBA	0x25
  0037    1C03    SNZB	0x3,0
  0038    282F    JP	0x2F
60:               			{
61:               				time1s = 0;
  0039    01A5    CLR	0x25
62:               				Sendbuffer[0]++;
  003A    0AA0    INCR	0x20
63:               				
64:               				/*写4个字节*/
65:               				I2C_WriteStart();
  003B    20C9    CALL	0xC9
66:               				I2C_Write1Byte(0xa0);
  003C    30A0    LDIA	0xA0
  003D    2089    CALL	0x89
67:               				I2C_Write1Byte(0x4);
  003E    3004    LDIA	0x4
  003F    2089    CALL	0x89
68:               				I2C_Write1Byte(Sendbuffer[0]);
  0040    1283    CLRB	0x3,5
  0041    0820    LD	A,0x20
  0042    2089    CALL	0x89
69:               				I2C_Write1Byte(~Sendbuffer[0]);
  0043    1283    CLRB	0x3,5
  0044    0920    COMA	0x20
  0045    2089    CALL	0x89
70:               				I2C_Write1Byte(0x3);
  0046    3003    LDIA	0x3
  0047    2089    CALL	0x89
71:               				I2C_WriteStop();
  0048    20BB    CALL	0xBB
72:               				
73:               				/*读4个字节*/
74:               				I2C_WriteStart();
  0049    20C9    CALL	0xC9
75:               				I2C_Write1Byte(0xa1);
  004A    30A1    LDIA	0xA1
  004B    2089    CALL	0x89
76:               				Recebuffer[0] = I2C_Read1Byte(0);
  004C    3000    LDIA	0x0
  004D    205A    CALL	0x5A
  004E    00F0    LD	0x70,A
77:               				Recebuffer[1] = I2C_Read1Byte(0);
  004F    3000    LDIA	0x0
  0050    205A    CALL	0x5A
  0051    00F1    LD	0x71,A
78:               				Recebuffer[2] = I2C_Read1Byte(0);
  0052    3000    LDIA	0x0
  0053    205A    CALL	0x5A
  0054    00F2    LD	0x72,A
79:               				Recebuffer[3] = I2C_Read1Byte(1);
  0055    3001    LDIA	0x1
  0056    205A    CALL	0x5A
  0057    00F3    LD	0x73,A
80:               				I2C_WriteStop();
  0058    20BB    CALL	0xBB
  0059    282F    JP	0x2F
81:               			}
82:               		}
83:               	}
84:               }
85:               
86:               //125us定时中断
87:               void interrupt ISR()
88:               {
89:               	static unsigned char tcount;
90:               	if(TMR2IF)
  00A7    1283    CLRB	0x3,5
  00A8    1C8C    SNZB	0xC,1
  00A9    28B3    JP	0xB3
91:               	{
92:               		TMR2IF = 0;
  00AA    108C    CLRB	0xC,1
93:               		
94:               		if(++tcount >= 40)
  00AB    3028    LDIA	0x28
  00AC    0AF5    INCR	0x75
  00AD    0275    SUBA	0x75
  00AE    1C03    SNZB	0x3,0
  00AF    28B4    JP	0xB4
95:               		{
96:               			tcount = 0;
  00B0    01F5    CLR	0x75
97:               			B_MainLoop = 1;
  00B1    147B    SETB	0x7B,0
  00B2    28B4    JP	0xB4
98:               		}
99:               	}
100:              	else
101:              	{
102:              		PIR1 = 0;
  00B3    018C    CLR	0xC
  00B4    0877    LD	A,0x77
  00B5    008A    LD	0xA,A
  00B6    0E76    SWAPA	0x76
  00B7    0083    LD	0x3,A
  00B8    0EFE    SWAPR	0x7E
  00B9    0E7E    SWAPA	0x7E
  00BA    0009    RETI
103:              	}
104:              }
105:              
106:              /***********************************************************
107:              函数功能：产生IIC启动信号
108:              入口参数：no
109:              函数返回：no
110:              备    注：在SCL为高电平时，SDA线上发生从高到低的电平变化
111:              ***********************************************************/
112:              void I2C_WriteStart()
113:              {
114:              	I2C_SDA_IO = 0;
  00C9    1683    SETB	0x3,5
  00CA    1085    CLRB	0x5,1
115:              	I2C_SCL_IO = 0;
  00CB    1005    CLRB	0x5,0
116:              	I2C_WaitMoment();
  00CC    20D7    CALL	0xD7
117:              	
118:              	I2C_SDA = 1;			//先将SDA=1，以准备在SCL=1时，将SDA=0
  00CD    1283    CLRB	0x3,5
  00CE    1485    SETB	0x5,1
119:              	I2C_SCL = 1;			//时钟总线拉高
  00CF    1405    SETB	0x5,0
120:              	I2C_WaitMoment();
  00D0    20D7    CALL	0xD7
121:              	I2C_SDA = 0;			//SCL=1时，将SDA拉低即产生启动信号
  00D1    1283    CLRB	0x3,5
  00D2    1085    CLRB	0x5,1
122:              	
123:              	I2C_WaitMoment();
  00D3    20D7    CALL	0xD7
124:              	I2C_SCL = 0;			//将SCL=0，完成启动信号操作
  00D4    1283    CLRB	0x3,5
  00D5    1005    CLRB	0x5,0
125:              	I2C_WaitMoment();
  00D6    28D7    JP	0xD7
126:              }
127:              
128:              /***********************************************************
129:              函数功能：产生IIC结束信号
130:              入口参数：no
131:              函数返回：no
132:              备    注：在SCL为高电平时，SDA线上发生从低到高的电平变化
133:              ***********************************************************/
134:              void I2C_WriteStop()
135:              {
136:              	I2C_SDA_IO = 0;
  00BB    1683    SETB	0x3,5
  00BC    1085    CLRB	0x5,1
137:              	I2C_SCL_IO = 0;
  00BD    1005    CLRB	0x5,0
138:              	I2C_WaitMoment();
  00BE    20D7    CALL	0xD7
139:              	
140:              	I2C_SDA = 0;			//先将SDA=0，以准备在SCL=1时，将SDA=1
  00BF    1283    CLRB	0x3,5
  00C0    1085    CLRB	0x5,1
141:              	I2C_SCL = 1;			//时钟总线拉高
  00C1    1405    SETB	0x5,0
142:              	I2C_WaitMoment();
  00C2    20D7    CALL	0xD7
143:              	I2C_SDA = 1;			//SCL=1时，将SDA拉高即产生停止信号
  00C3    1283    CLRB	0x3,5
  00C4    1485    SETB	0x5,1
144:              	
145:              	I2C_WaitMoment();
  00C5    20D7    CALL	0xD7
146:              	I2C_SCL = 0;			//将SCL=0，完成启动信号操作
  00C6    1283    CLRB	0x3,5
  00C7    1005    CLRB	0x5,0
147:              	I2C_WaitMoment();
  00C8    28D7    JP	0xD7
148:              }
149:              
150:              /***********************************************************
151:              函数功能：模拟IIC主机发送8位数据
152:              入口参数：data-待发送数据
153:              函数返回：返回ack应答信号
154:              备    注：IIC协议ack应答信号为低有效
155:              ***********************************************************/
156:              unsigned char I2C_Write1Byte(unsigned char data)
157:              {
158:              	unsigned char i = 8;
  008A    3008    LDIA	0x8
  008B    00F9    LD	0x79,A
159:              	I2C_SDA_IO = 0;
  008C    1683    SETB	0x3,5
  008D    1085    CLRB	0x5,1
160:              	I2C_SCL_IO = 0;
  008E    1005    CLRB	0x5,0
161:              	do
162:              	{
163:              		I2C_SCL = 0;
  008F    1283    CLRB	0x3,5
  0090    1005    CLRB	0x5,0
164:              		if(data&0x80)
  0091    1FF8    SNZB	0x78,7
  0092    2895    JP	0x95
165:              			I2C_SDA = 1;
  0093    1485    SETB	0x5,1
  0094    2896    JP	0x96
166:              		else
167:              			I2C_SDA = 0;
  0095    1085    CLRB	0x5,1
168:              		
169:              		I2C_SCL = 1;		//时钟线做一个上升沿，将一位数据写入
  0096    1405    SETB	0x5,0
170:              		data <<= 1;
  0097    1003    CLRB	0x3,0
  0098    0DF8    RLCR	0x78
171:              	}
172:              	while(--i);
  0099    0BF9    SZDECR	0x79
  009A    288F    JP	0x8F
173:              	I2C_SCL = 0;
  009B    1005    CLRB	0x5,0
174:              	
175:              	I2C_SDA_IO = 1;			//置为输入口接收应答信号
  009C    1683    SETB	0x3,5
  009D    1485    SETB	0x5,1
176:              
177:              	I2C_WaitMoment();
  009E    20D7    CALL	0xD7
178:              	I2C_SCL = 1;			//做个上升沿准备读应答信号
  009F    1283    CLRB	0x3,5
  00A0    1405    SETB	0x5,0
179:              	I2C_WaitMoment();
  00A1    20D7    CALL	0xD7
180:              	
181:              	i = I2C_SDA;
182:              	I2C_SCL = 0;
  00A2    1283    CLRB	0x3,5
  00A3    1005    CLRB	0x5,0
183:              	I2C_SDA_IO = 0;
  00A4    1683    SETB	0x3,5
  00A5    1085    CLRB	0x5,1
  00A6    0008    RET
184:              	return i;
185:              }
186:              
187:              /***********************************************************
188:              函数功能：模拟IIC主机接收8位数据
189:              入口参数：ack-应答信号
190:              函数返回：接收到的数据
191:              备    注：IIC协议ack应答信号为低有效
192:              ***********************************************************/
193:              unsigned char I2C_Read1Byte(unsigned char ack)
194:              {
195:              	unsigned char i,data;
196:              	I2C_SDA_IO = 1;
  005B    1683    SETB	0x3,5
  005C    1485    SETB	0x5,1
197:              	I2C_SCL_IO = 1;
  005D    1405    SETB	0x5,0
198:              	I2C_WaitMoment();
  005E    20D7    CALL	0xD7
199:              	
200:              	while(!I2C_SCL);				//等待从机准备好数据释放时钟
  005F    1283    CLRB	0x3,5
  0060    1C05    SNZB	0x5,0
  0061    285F    JP	0x5F
201:              	I2C_SCL_IO = 0;
  0062    1683    SETB	0x3,5
  0063    1005    CLRB	0x5,0
202:              	I2C_SCL = 0;
  0064    1283    CLRB	0x3,5
  0065    1005    CLRB	0x5,0
203:              	I2C_WaitMoment();
  0066    20D7    CALL	0xD7
204:              	
205:              	data <<= 1;
  0067    1003    CLRB	0x3,0
  0068    0DF9    RLCR	0x79
206:              	if(I2C_SDA) data |= 0x1;
  0069    1283    CLRB	0x3,5
  006A    1885    SZB	0x5,1
  006B    1479    SETB	0x79,0
207:              	
208:              	
209:              	for(i = 0; i < 7; i++)
  006C    01FA    CLR	0x7A
210:              	{
211:              		I2C_SCL = 1;
  006D    1405    SETB	0x5,0
212:              		data <<= 1;
  006E    1003    CLRB	0x3,0
  006F    0DF9    RLCR	0x79
213:              		if(I2C_SDA) data |= 0x1;
  0070    1885    SZB	0x5,1
  0071    1479    SETB	0x79,0
214:              		I2C_SCL = 0;
  0072    1005    CLRB	0x5,0
  0073    3007    LDIA	0x7
  0074    0AFA    INCR	0x7A
  0075    027A    SUBA	0x7A
  0076    1C03    SNZB	0x3,0
  0077    286D    JP	0x6D
215:              	}
216:              	
217:              	I2C_SDA_IO = 0;
  0078    1683    SETB	0x3,5
  0079    1085    CLRB	0x5,1
218:              	
219:              	if(ack)I2C_SDA = 1;			//是否需要更多的数据
  007A    0878    LD	A,0x78
  007B    1283    CLRB	0x3,5
  007C    1903    SZB	0x3,2
  007D    2880    JP	0x80
  007E    1485    SETB	0x5,1
  007F    2881    JP	0x81
220:              	else I2C_SDA = 0;
  0080    1085    CLRB	0x5,1
221:              	
222:              	I2C_WaitMoment();
  0081    20D7    CALL	0xD7
223:              	I2C_SCL = 1;
  0082    1283    CLRB	0x3,5
  0083    1405    SETB	0x5,0
224:              	I2C_WaitMoment();
  0084    20D7    CALL	0xD7
225:              	I2C_SCL = 0;
  0085    1283    CLRB	0x3,5
  0086    1005    CLRB	0x5,0
226:              	return data;
  0087    0879    LD	A,0x79
  0088    0008    RET
227:              }
228:              
229:              //短暂延时
230:              void I2C_WaitMoment()
231:              {
232:              	asm("nop");
233:              	asm("nop");
234:              }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    280A    JP	0xA
  000A    280B    JP	0xB
---- start_initialization ------------------------------------------------------------------
  000B    01FB    CLR	0x7B
  000C    01F0    CLR	0x70
  000D    01F1    CLR	0x71
  000E    01F2    CLR	0x72
  000F    01F3    CLR	0x73
  0010    01F4    CLR	0x74
  0011    01F5    CLR	0x75
  0012    1283    CLRB	0x3,5
  0013    01A0    CLR	0x20
  0014    01A1    CLR	0x21
  0015    01A2    CLR	0x22
  0016    01A3    CLR	0x23
  0017    01A4    CLR	0x24
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F6    LD	0x76,A
  0007    080A    LD	A,0xA
  0008    00F7    LD	0x77,A
  0009    28A7    JP	0xA7
---- common_function ------------------------------------------------------------------
  0018    0183    CLR	0x3
  0019    281A    JP	0x1A
  005A    00F8    LD	0x78,A
  0089    00F8    LD	0x78,A
  00D7    0000    NOP
  00D8    0000    NOP
  00D9    0008    RET
