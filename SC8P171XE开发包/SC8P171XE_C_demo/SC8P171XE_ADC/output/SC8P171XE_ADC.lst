

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Jan 08 11:29:12 2021

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1712E
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	pa_nodes0,global,class=CODE,delta=2
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 1.45
    17                           ; Generated 16/11/2017 GMT
    18                           ; 
    19                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F887 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     
    51                           	psect	text0
    52  0000                     __ptext0:	
    53  001F                     _ADCON0	set	31
    54  001E                     _ADRESH	set	30
    55  000B                     _INTCON	set	11
    56  00F9                     _GODONE	set	249
    57  0034                     _RB4	set	52
    58  009F                     _ADCON1	set	159
    59  009E                     _ADRESL	set	158
    60  008F                     _OSCCON	set	143
    61  04FA                     _LDOEN	set	1274
    62  04A5                     _ANS13	set	1189
    63  0435                     _TRISB5	set	1077
    64                           
    65                           	psect	cinit
    66  07F2                     start_initialization:	
    67                           ; #config settings
    68                           
    69  07F2                     __initialization:	
    70                           
    71                           ; Clear objects allocated to COMMON
    72  07F2  01FB               	clrf	__pbssCOMMON& (0+127)
    73  07F3  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
    74  07F4  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
    75                           
    76                           ; Clear objects allocated to BANK0
    77  07F5  1283               	bcf	3,5	;RP0=0, select bank0
    78  07F6  01A0               	clrf	__pbssBANK0& (0+127)
    79  07F7  01A1               	clrf	(__pbssBANK0+1)& (0+127)
    80  07F8  01A2               	clrf	(__pbssBANK0+2)& (0+127)
    81  07F9  01A3               	clrf	(__pbssBANK0+3)& (0+127)
    82  07FA  01A4               	clrf	(__pbssBANK0+4)& (0+127)
    83  07FB  01A5               	clrf	(__pbssBANK0+5)& (0+127)
    84  07FC  01A6               	clrf	(__pbssBANK0+6)& (0+127)
    85  07FD  01A7               	clrf	(__pbssBANK0+7)& (0+127)
    86  07FE                     end_of_initialization:	
    87                           ;End of C runtime variable initialization code
    88                           
    89  07FE                     __end_of__initialization:	
    90  07FE  0183               	clrf	3
    91  07FF  2EA8               	ljmp	_main	;jump to C main() function
    92                           
    93                           	psect	bssCOMMON
    94  007B                     __pbssCOMMON:	
    95  007B                     _admin:	
    96  007B                     	ds	2
    97  007D                     _adtimes:	
    98  007D                     	ds	1
    99                           
   100                           	psect	bssBANK0
   101  0020                     __pbssBANK0:	
   102  0020                     _adsum:	
   103  0020                     	ds	4
   104  0024                     _admax:	
   105  0024                     	ds	2
   106  0026                     _adresult:	
   107  0026                     	ds	2
   108                           
   109                           	psect	cstackCOMMON
   110  0070                     __pcstackCOMMON:	
   111  0070                     ?_ADC_Sample:	
   112  0070                     ?_DelayXms:	
   113                           ; 1 bytes @ 0x0
   114                           
   115  0070                     ??_DelayXms:	
   116                           ; 1 bytes @ 0x0
   117                           
   118  0070                     ?_main:	
   119                           ; 1 bytes @ 0x0
   120                           
   121  0070                     ?_ADC_Result:	
   122                           ; 1 bytes @ 0x0
   123                           
   124  0070                     ADC_Sample@adldo:	
   125                           ; 2 bytes @ 0x0
   126                           
   127  0070                     DelayXms@x:	
   128                           ; 1 bytes @ 0x0
   129                           
   130                           
   131                           ; 1 bytes @ 0x0
   132  0070                     	ds	1
   133  0071                     ??_ADC_Sample:	
   134  0071                     DelayXms@i:	
   135                           ; 1 bytes @ 0x1
   136                           
   137                           
   138                           ; 1 bytes @ 0x1
   139  0071                     	ds	1
   140  0072                     ??_ADC_Result:	
   141  0072                     DelayXms@j:	
   142                           ; 1 bytes @ 0x2
   143                           
   144                           
   145                           ; 1 bytes @ 0x2
   146  0072                     	ds	1
   147  0073                     ADC_Result@adch:	
   148                           
   149                           ; 1 bytes @ 0x3
   150  0073                     	ds	1
   151  0074                     ADC_Result@i:	
   152                           
   153                           ; 1 bytes @ 0x4
   154  0074                     	ds	1
   155  0075                     ADC_Sample@adch:	
   156  0075                     ADC_Result@ad_result:	
   157                           ; 1 bytes @ 0x5
   158                           
   159                           
   160                           ; 2 bytes @ 0x5
   161  0075                     	ds	1
   162  0076                     ADC_Sample@i:	
   163                           
   164                           ; 1 bytes @ 0x6
   165  0076                     	ds	1
   166  0077                     ADC_Sample@ad_temp:	
   167                           
   168                           ; 2 bytes @ 0x7
   169  0077                     	ds	2
   170  0079                     ??_main:	
   171  0079                     main@result:	
   172                           ; 1 bytes @ 0x9
   173                           
   174                           
   175                           ; 2 bytes @ 0x9
   176  0079                     	ds	2
   177                           
   178                           	psect	maintext
   179  06A8                     __pmaintext:	
   180 ;;
   181 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   182 ;;
   183 ;; *************** function _main *****************
   184 ;; Defined at:
   185 ;;		line 145 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8P171XE¿ª·¢°ü\SC8P171XE_C_demo\SC8P171XE_ADC\SC8P171XE_ADC
      +.c"
   186 ;; Parameters:    Size  Location     Type
   187 ;;		None
   188 ;; Auto vars:     Size  Location     Type
   189 ;;  result          2    9[COMMON] unsigned int 
   190 ;; Return value:  Size  Location     Type
   191 ;;                  1    wreg      void 
   192 ;; Registers used:
   193 ;;		wreg, status,2, status,0, pclath, cstack
   194 ;; Tracked objects:
   195 ;;		On entry : B00/0
   196 ;;		On exit  : 100/0
   197 ;;		Unchanged: 0/0
   198 ;; Data sizes:     COMMON   BANK0   BANK1
   199 ;;      Params:         0       0       0
   200 ;;      Locals:         2       0       0
   201 ;;      Temps:          0       0       0
   202 ;;      Totals:         2       0       0
   203 ;;Total ram usage:        2 bytes
   204 ;; Hardware stack levels required when called:    1
   205 ;; This function calls:
   206 ;;		_ADC_Result
   207 ;;		_ADC_Sample
   208 ;;		_DelayXms
   209 ;; This function is called by:
   210 ;;		Startup code after reset
   211 ;; This function uses a non-reentrant model
   212 ;;
   213                           
   214                           
   215                           ;psect for function _main
   216  06A8                     _main:	
   217                           
   218                           ;incstack = 0
   219                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   220  06A8  0000               	nop	;# 
   221  06A9  0064               	clrwdt	;# 
   222                           
   223                           ;SC8P171XE_ADC.c: 149: INTCON = 0;
   224  06AA  018B               	clrf	11	;volatile
   225                           
   226                           ;SC8P171XE_ADC.c: 150: OSCCON = 0X70;
   227  06AB  3070               	movlw	112
   228  06AC  1683               	bsf	3,5	;RP0=1, select bank1
   229  06AD  008F               	movwf	15	;volatile
   230                           
   231                           ;SC8P171XE_ADC.c: 151: DelayXms(2);
   232  06AE  3002               	movlw	2
   233  06AF  269D               	fcall	_DelayXms
   234  06B0                     l514:	
   235                           ;SC8P171XE_ADC.c: 152: while(1)
   236                           
   237  06B0  0064               	clrwdt	;# 
   238                           
   239                           ;SC8P171XE_ADC.c: 157: unsigned int result;
   240                           ;SC8P171XE_ADC.c: 159: result = ADC_Result(15);
   241  06B1  300F               	movlw	15
   242  06B2  26CA               	fcall	_ADC_Result
   243  06B3  0871               	movf	?_ADC_Result+1,w
   244  06B4  00FA               	movwf	main@result+1
   245  06B5  0870               	movf	?_ADC_Result,w
   246  06B6  00F9               	movwf	main@result
   247                           
   248                           ;SC8P171XE_ADC.c: 160: if (result > 666) RB4 = 0;
   249  06B7  3002               	movlw	2
   250  06B8  027A               	subwf	main@result+1,w
   251  06B9  309B               	movlw	155
   252  06BA  1903               	skipnz
   253  06BB  0279               	subwf	main@result,w
   254  06BC  1283               	bcf	3,5	;RP0=0, select bank0
   255  06BD  1C03               	skipc
   256  06BE  2EC1               	goto	L1
   257  06BF  1206               	bcf	6,4	;volatile
   258  06C0  2EC2               	goto	l516
   259  06C1                     L1:	
   260                           ;SC8P171XE_ADC.c: 161: else RB4 =1;
   261                           
   262  06C1  1606               	bsf	6,4	;volatile
   263  06C2                     l516:	
   264                           
   265                           ;SC8P171XE_ADC.c: 166: ANS13 = 1;
   266  06C2  1683               	bsf	3,5	;RP0=1, select bank1
   267  06C3  1694               	bsf	20,5	;volatile
   268                           
   269                           ;SC8P171XE_ADC.c: 167: TRISB5 = 1;
   270  06C4  1686               	bsf	6,5	;volatile
   271                           
   272                           ;SC8P171XE_ADC.c: 168: ADC_Sample(13,5);
   273  06C5  3005               	movlw	5
   274  06C6  00F0               	movwf	ADC_Sample@adldo
   275  06C7  300D               	movlw	13
   276  06C8  2703               	fcall	_ADC_Sample
   277  06C9  2EB0               	goto	l514
   278  06CA                     __end_of_main:	
   279                           
   280                           	psect	text1
   281  069D                     __ptext1:	
   282 ;; *************** function _DelayXms *****************
   283 ;; Defined at:
   284 ;;		line 135 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8P171XE¿ª·¢°ü\SC8P171XE_C_demo\SC8P171XE_ADC\SC8P171XE_ADC
      +.c"
   285 ;; Parameters:    Size  Location     Type
   286 ;;  x               1    wreg     unsigned char 
   287 ;; Auto vars:     Size  Location     Type
   288 ;;  x               1    0[COMMON] unsigned char 
   289 ;;  j               1    2[COMMON] unsigned char 
   290 ;;  i               1    1[COMMON] unsigned char 
   291 ;; Return value:  Size  Location     Type
   292 ;;                  1    wreg      void 
   293 ;; Registers used:
   294 ;;		wreg, status,2, status,0
   295 ;; Tracked objects:
   296 ;;		On entry : 100/100
   297 ;;		On exit  : 100/100
   298 ;;		Unchanged: 100/0
   299 ;; Data sizes:     COMMON   BANK0   BANK1
   300 ;;      Params:         0       0       0
   301 ;;      Locals:         3       0       0
   302 ;;      Temps:          0       0       0
   303 ;;      Totals:         3       0       0
   304 ;;Total ram usage:        3 bytes
   305 ;; Hardware stack levels used:    1
   306 ;; This function calls:
   307 ;;		Nothing
   308 ;; This function is called by:
   309 ;;		_main
   310 ;; This function uses a non-reentrant model
   311 ;;
   312                           
   313                           
   314                           ;psect for function _DelayXms
   315  069D                     _DelayXms:	
   316                           
   317                           ;incstack = 0
   318                           ; Regs used in _DelayXms: [wreg+status,2+status,0]
   319                           ;DelayXms@x stored from wreg
   320  069D  00F0               	movwf	DelayXms@x
   321                           
   322                           ;SC8P171XE_ADC.c: 137: unsigned char i,j;
   323                           ;SC8P171XE_ADC.c: 138: for(i=x;i>0;i--)
   324  069E  00F1               	movwf	DelayXms@i
   325  069F                     l981:	
   326  069F  0871               	movf	DelayXms@i,w
   327  06A0  1903               	btfsc	3,2
   328  06A1  0008               	return
   329                           
   330                           ;SC8P171XE_ADC.c: 139: for(j=153;j>0;j--);
   331  06A2  3099               	movlw	153
   332  06A3  00F2               	movwf	DelayXms@j
   333  06A4                     l991:	
   334  06A4  0BF2               	decfsz	DelayXms@j,f
   335  06A5  2EA4               	goto	l991
   336  06A6  03F1               	decf	DelayXms@i,f
   337  06A7  2E9F               	goto	l981
   338  06A8                     __end_of_DelayXms:	
   339                           
   340                           	psect	text2
   341  0703                     __ptext2:	
   342 ;; *************** function _ADC_Sample *****************
   343 ;; Defined at:
   344 ;;		line 30 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8P171XE¿ª·¢°ü\SC8P171XE_C_demo\SC8P171XE_ADC\SC8P171XE_ADC.
      +c"
   345 ;; Parameters:    Size  Location     Type
   346 ;;  adch            1    wreg     unsigned char 
   347 ;;  adldo           1    0[COMMON] unsigned char 
   348 ;; Auto vars:     Size  Location     Type
   349 ;;  adch            1    5[COMMON] unsigned char 
   350 ;;  ad_temp         2    7[COMMON] volatile unsigned int 
   351 ;;  i               1    6[COMMON] unsigned char 
   352 ;; Return value:  Size  Location     Type
   353 ;;                  1    wreg      void 
   354 ;; Registers used:
   355 ;;		wreg, status,2, status,0
   356 ;; Tracked objects:
   357 ;;		On entry : 100/100
   358 ;;		On exit  : 100/0
   359 ;;		Unchanged: 0/0
   360 ;; Data sizes:     COMMON   BANK0   BANK1
   361 ;;      Params:         1       0       0
   362 ;;      Locals:         4       0       0
   363 ;;      Temps:          4       0       0
   364 ;;      Totals:         9       0       0
   365 ;;Total ram usage:        9 bytes
   366 ;; Hardware stack levels used:    1
   367 ;; This function calls:
   368 ;;		Nothing
   369 ;; This function is called by:
   370 ;;		_main
   371 ;; This function uses a non-reentrant model
   372 ;;
   373                           
   374                           
   375                           ;psect for function _ADC_Sample
   376  0703                     _ADC_Sample:	
   377                           
   378                           ;incstack = 0
   379                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
   380                           ;ADC_Sample@adch stored from wreg
   381  0703  00F5               	movwf	ADC_Sample@adch
   382                           
   383                           ;SC8P171XE_ADC.c: 32: volatile unsigned int ad_temp;
   384                           ;SC8P171XE_ADC.c: 34: if(adldo!=0)
   385  0704  0870               	movf	ADC_Sample@adldo,w
   386  0705  1903               	btfsc	3,2
   387  0706  2F0C               	goto	l475
   388                           
   389                           ;SC8P171XE_ADC.c: 35: {
   390                           ;SC8P171XE_ADC.c: 36: if(!LDOEN)
   391  0707  1D1F               	btfss	31,2	;volatile
   392  0708  2F0E               	goto	l1019
   393  0709                     l1021:	
   394                           ;SC8P171XE_ADC.c: 40: }
   395                           
   396                           
   397                           ;SC8P171XE_ADC.c: 41: else ADCON1 = adldo;
   398  0709  0870               	movf	ADC_Sample@adldo,w
   399  070A  009F               	movwf	31	;volatile
   400  070B  2F15               	goto	l1027
   401  070C                     l475:	
   402                           
   403                           ;SC8P171XE_ADC.c: 43: else
   404                           ;SC8P171XE_ADC.c: 44: {
   405                           ;SC8P171XE_ADC.c: 45: if(LDOEN)
   406  070C  1D1F               	btfss	31,2	;volatile
   407  070D  2F09               	goto	l1021
   408  070E                     l1019:	
   409                           
   410                           ;SC8P171XE_ADC.c: 37: {
   411                           ;SC8P171XE_ADC.c: 38: ADCON1 = adldo;
   412  070E  0870               	movf	ADC_Sample@adldo,w
   413  070F  009F               	movwf	31	;volatile
   414                           
   415                           ;SC8P171XE_ADC.c: 39: _delay((unsigned long)((100)*(8000000UL/4000000.0)));
   416  0710  3042               	movlw	66
   417  0711  00F1               	movwf	??_ADC_Sample
   418  0712                     u477:	
   419  0712  0BF1               	decfsz	??_ADC_Sample,f
   420  0713  2F12               	goto	u477
   421  0714  0000               	nop
   422  0715                     l1027:	
   423                           
   424                           ;SC8P171XE_ADC.c: 51: }
   425                           ;SC8P171XE_ADC.c: 54: if(LDOEN^(adldo!=0))
   426  0715  1683               	bsf	3,5	;RP0=1, select bank1
   427  0716  1D1F               	btfss	31,2	;volatile
   428  0717  2F1A               	goto	u280
   429  0718  3001               	movlw	1
   430  0719  2F1B               	goto	u282
   431  071A                     u280:	
   432  071A  3000               	movlw	0
   433  071B                     u282:	
   434  071B  00F1               	movwf	??_ADC_Sample
   435  071C  0870               	movf	ADC_Sample@adldo,w
   436  071D  1903               	btfsc	3,2
   437  071E  2F21               	goto	u290
   438  071F  3001               	movlw	1
   439  0720  2F22               	goto	u292
   440  0721                     u290:	
   441  0721  3000               	movlw	0
   442  0722                     u292:	
   443  0722  0671               	xorwf	??_ADC_Sample,w
   444  0723  1903               	skipnz
   445  0724  2F2D               	goto	l1031
   446                           
   447                           ;SC8P171XE_ADC.c: 55: {
   448                           ;SC8P171XE_ADC.c: 56: ADCON1 = adldo;
   449  0725  0870               	movf	ADC_Sample@adldo,w
   450  0726  009F               	movwf	31	;volatile
   451                           
   452                           ;SC8P171XE_ADC.c: 57: _delay((unsigned long)((100)*(8000000UL/4000000.0)));
   453  0727  3042               	movlw	66
   454  0728  00F1               	movwf	??_ADC_Sample
   455  0729                     u487:	
   456  0729  0BF1               	decfsz	??_ADC_Sample,f
   457  072A  2F29               	goto	u487
   458  072B  0000               	nop
   459                           
   460                           ;SC8P171XE_ADC.c: 58: }
   461  072C  2F2F               	goto	l1033
   462  072D                     l1031:	
   463                           
   464                           ;SC8P171XE_ADC.c: 59: else
   465                           ;SC8P171XE_ADC.c: 60: ADCON1 = adldo;
   466  072D  0870               	movf	ADC_Sample@adldo,w
   467  072E  009F               	movwf	31	;volatile
   468  072F                     l1033:	
   469                           
   470                           ;SC8P171XE_ADC.c: 62: ADCON0 = 0X41 | (adch << 2);
   471  072F  0875               	movf	ADC_Sample@adch,w
   472  0730  00F1               	movwf	??_ADC_Sample
   473  0731  3001               	movlw	1
   474  0732  1003               	clrc
   475  0733                     L2:	
   476  0733  0DF1               	rlf	??_ADC_Sample,f
   477  0734  3EFF               	addlw	-1
   478  0735  1003               	clrc
   479  0736  1D03               	skipz
   480  0737  2F33               	goto	L2
   481  0738  0D71               	rlf	??_ADC_Sample,w
   482  0739  3841               	iorlw	65
   483  073A  1283               	bcf	3,5	;RP0=0, select bank0
   484  073B  009F               	movwf	31	;volatile
   485  073C  0000               	nop	;# 
   486  073D  0000               	nop	;# 
   487  073E  0000               	nop	;# 
   488  073F  0000               	nop	;# 
   489                           
   490                           ;SC8P171XE_ADC.c: 67: GODONE = 1;
   491  0740  1283               	bcf	3,5	;RP0=0, select bank0
   492  0741  149F               	bsf	31,1	;volatile
   493                           
   494                           ;SC8P171XE_ADC.c: 69: unsigned char i = 0;
   495  0742  01F6               	clrf	ADC_Sample@i
   496  0743                     l483:	
   497                           ;SC8P171XE_ADC.c: 70: while(GODONE)
   498                           
   499  0743  1C9F               	btfss	31,1	;volatile
   500  0744  2F48               	goto	l1041
   501                           
   502                           ;SC8P171XE_ADC.c: 71: {
   503                           ;SC8P171XE_ADC.c: 72: if(0 == (--i))
   504  0745  0BF6               	decfsz	ADC_Sample@i,f
   505  0746  2F43               	goto	l483
   506  0747  0008               	return
   507  0748                     l1041:	
   508                           
   509                           ;SC8P171XE_ADC.c: 74: }
   510                           ;SC8P171XE_ADC.c: 76: ad_temp=(ADRESH<<4)+(ADRESL>>4);
   511  0748  081E               	movf	30,w	;volatile
   512  0749  00F7               	movwf	ADC_Sample@ad_temp	;volatile
   513  074A  01F8               	clrf	ADC_Sample@ad_temp+1	;volatile
   514  074B  0EF7               	swapf	ADC_Sample@ad_temp,f	;volatile
   515  074C  0EF8               	swapf	ADC_Sample@ad_temp+1,f	;volatile
   516  074D  30F0               	movlw	240
   517  074E  05F8               	andwf	ADC_Sample@ad_temp+1,f	;volatile
   518  074F  0877               	movf	ADC_Sample@ad_temp,w	;volatile
   519  0750  390F               	andlw	15
   520  0751  04F8               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
   521  0752  30F0               	movlw	240
   522  0753  05F7               	andwf	ADC_Sample@ad_temp,f	;volatile
   523  0754  1683               	bsf	3,5	;RP0=1, select bank1
   524  0755  0E1E               	swapf	30,w	;volatile
   525  0756  390F               	andlw	15
   526  0757  07F7               	addwf	ADC_Sample@ad_temp,f	;volatile
   527  0758  1803               	skipnc
   528  0759  0AF8               	incf	ADC_Sample@ad_temp+1,f	;volatile
   529                           
   530                           ;SC8P171XE_ADC.c: 78: if(0 == admax)
   531  075A  1283               	bcf	3,5	;RP0=0, select bank0
   532  075B  0824               	movf	_admax,w	;volatile
   533  075C  0425               	iorwf	_admax+1,w	;volatile
   534  075D  1D03               	btfss	3,2
   535  075E  2F61               	goto	l1049
   536                           
   537                           ;SC8P171XE_ADC.c: 79: {
   538                           ;SC8P171XE_ADC.c: 80: admax = ad_temp;
   539  075F  27ED               	fcall	PL4	;call to abstracted procedure
   540  0760  2F73               	goto	l1055
   541  0761                     l1049:	
   542                           ;SC8P171XE_ADC.c: 82: }
   543                           
   544                           ;SC8P171XE_ADC.c: 81: admin = ad_temp;
   545                           
   546                           
   547                           ;SC8P171XE_ADC.c: 83: else if(ad_temp > admax)
   548  0761  0878               	movf	ADC_Sample@ad_temp+1,w	;volatile
   549  0762  0225               	subwf	_admax+1,w	;volatile
   550  0763  1D03               	skipz
   551  0764  2F67               	goto	u355
   552  0765  0877               	movf	ADC_Sample@ad_temp,w	;volatile
   553  0766  0224               	subwf	_admax,w	;volatile
   554  0767                     u355:	
   555  0767  1803               	skipnc
   556  0768  2F6B               	goto	l1053
   557                           
   558                           ;SC8P171XE_ADC.c: 84: admax = ad_temp;
   559  0769  27ED               	fcall	PL4	;call to abstracted procedure
   560  076A  2F77               	goto	l489
   561  076B                     l1053:	
   562                           
   563                           ;SC8P171XE_ADC.c: 85: else if(ad_temp < admin)
   564  076B  087C               	movf	_admin+1,w	;volatile
   565  076C  0278               	subwf	ADC_Sample@ad_temp+1,w	;volatile
   566  076D  1D03               	skipz
   567  076E  2F71               	goto	u365
   568  076F  087B               	movf	_admin,w	;volatile
   569  0770  0277               	subwf	ADC_Sample@ad_temp,w	;volatile
   570  0771                     u365:	
   571  0771  1803               	skipnc
   572  0772  2F77               	goto	l489
   573  0773                     l1055:	
   574                           
   575                           ;SC8P171XE_ADC.c: 86: admin = ad_temp;
   576  0773  0878               	movf	ADC_Sample@ad_temp+1,w	;volatile
   577  0774  00FC               	movwf	_admin+1	;volatile
   578  0775  0877               	movf	ADC_Sample@ad_temp,w	;volatile
   579  0776  00FB               	movwf	_admin	;volatile
   580  0777                     l489:	
   581                           
   582                           ;SC8P171XE_ADC.c: 88: adsum += ad_temp;
   583  0777  0877               	movf	ADC_Sample@ad_temp,w	;volatile
   584  0778  00F1               	movwf	??_ADC_Sample
   585  0779  0878               	movf	ADC_Sample@ad_temp+1,w	;volatile
   586  077A  00F2               	movwf	??_ADC_Sample+1
   587  077B  01F3               	clrf	??_ADC_Sample+2
   588  077C  01F4               	clrf	??_ADC_Sample+3
   589  077D  0871               	movf	??_ADC_Sample,w
   590  077E  07A0               	addwf	_adsum,f	;volatile
   591  077F  0872               	movf	??_ADC_Sample+1,w
   592  0780  1103               	clrz
   593  0781  1803               	skipnc
   594  0782  3E01               	addlw	1
   595  0783  1D03               	btfss	3,2
   596  0784  07A1               	addwf	_adsum+1,f	;volatile
   597  0785  0873               	movf	??_ADC_Sample+2,w
   598  0786  1103               	clrz
   599  0787  1803               	skipnc
   600  0788  3E01               	addlw	1
   601  0789  1D03               	btfss	3,2
   602  078A  07A2               	addwf	_adsum+2,f	;volatile
   603  078B  0874               	movf	??_ADC_Sample+3,w
   604  078C  1103               	clrz
   605  078D  1803               	skipnc
   606  078E  3E01               	addlw	1
   607  078F  1D03               	btfss	3,2
   608  0790  07A3               	addwf	_adsum+3,f	;volatile
   609                           
   610                           ;SC8P171XE_ADC.c: 89: if(++adtimes >= 10)
   611  0791  300A               	movlw	10
   612  0792  0AFD               	incf	_adtimes,f	;volatile
   613  0793  027D               	subwf	_adtimes,w	;volatile
   614  0794  1C03               	skipc
   615  0795  0008               	return
   616                           
   617                           ;SC8P171XE_ADC.c: 90: {
   618                           ;SC8P171XE_ADC.c: 91: adsum -= admax;
   619  0796  0824               	movf	_admax,w	;volatile
   620  0797  00F1               	movwf	??_ADC_Sample
   621  0798  0825               	movf	_admax+1,w	;volatile
   622  0799  27DE               	fcall	PL2	;call to abstracted procedure
   623  079A  1C03               	skipc
   624  079B  0F74               	incfsz	??_ADC_Sample+3,w
   625  079C  02A3               	subwf	_adsum+3,f	;volatile
   626                           
   627                           ;SC8P171XE_ADC.c: 92: if(adsum >= admin) adsum -= admin;
   628  079D  087B               	movf	_admin,w	;volatile
   629  079E  00F1               	movwf	??_ADC_Sample
   630  079F  087C               	movf	_admin+1,w	;volatile
   631  07A0  00F2               	movwf	??_ADC_Sample+1
   632  07A1  01F3               	clrf	??_ADC_Sample+2
   633  07A2  01F4               	clrf	??_ADC_Sample+3
   634  07A3  0874               	movf	??_ADC_Sample+3,w
   635  07A4  0223               	subwf	_adsum+3,w	;volatile
   636  07A5  1D03               	skipz
   637  07A6  2FB1               	goto	u405
   638  07A7  0873               	movf	??_ADC_Sample+2,w
   639  07A8  0222               	subwf	_adsum+2,w	;volatile
   640  07A9  1D03               	skipz
   641  07AA  2FB1               	goto	u405
   642  07AB  0872               	movf	??_ADC_Sample+1,w
   643  07AC  0221               	subwf	_adsum+1,w	;volatile
   644  07AD  1D03               	skipz
   645  07AE  2FB1               	goto	u405
   646  07AF  0871               	movf	??_ADC_Sample,w
   647  07B0  0220               	subwf	_adsum,w	;volatile
   648  07B1                     u405:	
   649  07B1  1C03               	skipc
   650  07B2  2FBB               	goto	l494
   651  07B3  087B               	movf	_admin,w	;volatile
   652  07B4  00F1               	movwf	??_ADC_Sample
   653  07B5  087C               	movf	_admin+1,w	;volatile
   654  07B6  27DE               	fcall	PL2	;call to abstracted procedure
   655  07B7  1C03               	skipc
   656  07B8  0F74               	incfsz	??_ADC_Sample+3,w
   657  07B9  02A3               	subwf	_adsum+3,f	;volatile
   658  07BA  2FBF               	goto	l1063
   659  07BB                     l494:	
   660                           
   661                           ;SC8P171XE_ADC.c: 93: else adsum = 0;
   662  07BB  01A0               	clrf	_adsum	;volatile
   663  07BC  01A1               	clrf	_adsum+1	;volatile
   664  07BD  01A2               	clrf	_adsum+2	;volatile
   665  07BE  01A3               	clrf	_adsum+3	;volatile
   666  07BF                     l1063:	
   667                           
   668                           ;SC8P171XE_ADC.c: 95: adresult = (unsigned int)(adsum >> 3);
   669  07BF  0820               	movf	_adsum,w	;volatile
   670  07C0  00F1               	movwf	??_ADC_Sample
   671  07C1  0821               	movf	_adsum+1,w	;volatile
   672  07C2  00F2               	movwf	??_ADC_Sample+1
   673  07C3  0822               	movf	_adsum+2,w	;volatile
   674  07C4  00F3               	movwf	??_ADC_Sample+2
   675  07C5  0823               	movf	_adsum+3,w	;volatile
   676  07C6  00F4               	movwf	??_ADC_Sample+3
   677  07C7  3003               	movlw	3
   678  07C8                     u425:	
   679  07C8  1003               	clrc
   680  07C9  0CF4               	rrf	??_ADC_Sample+3,f
   681  07CA  0CF3               	rrf	??_ADC_Sample+2,f
   682  07CB  0CF2               	rrf	??_ADC_Sample+1,f
   683  07CC  0CF1               	rrf	??_ADC_Sample,f
   684  07CD  3EFF               	addlw	-1
   685  07CE  1D03               	skipz
   686  07CF  2FC8               	goto	u425
   687  07D0  0872               	movf	??_ADC_Sample+1,w
   688  07D1  00A7               	movwf	_adresult+1	;volatile
   689  07D2  0871               	movf	??_ADC_Sample,w
   690  07D3  00A6               	movwf	_adresult	;volatile
   691                           
   692                           ;SC8P171XE_ADC.c: 97: adsum = 0;
   693  07D4  01A0               	clrf	_adsum	;volatile
   694  07D5  01A1               	clrf	_adsum+1	;volatile
   695  07D6  01A2               	clrf	_adsum+2	;volatile
   696  07D7  01A3               	clrf	_adsum+3	;volatile
   697                           
   698                           ;SC8P171XE_ADC.c: 98: admin = 0;
   699  07D8  01FB               	clrf	_admin	;volatile
   700  07D9  01FC               	clrf	_admin+1	;volatile
   701                           
   702                           ;SC8P171XE_ADC.c: 99: admax = 0;
   703  07DA  01A4               	clrf	_admax	;volatile
   704  07DB  01A5               	clrf	_admax+1	;volatile
   705                           
   706                           ;SC8P171XE_ADC.c: 100: adtimes = 0;
   707  07DC  01FD               	clrf	_adtimes	;volatile
   708  07DD  0008               	return
   709  07DE                     __end_of_ADC_Sample:	
   710  07DE                     PL2:	
   711  07DE  00F2               	movwf	??_ADC_Sample+1
   712  07DF  01F3               	clrf	??_ADC_Sample+2
   713  07E0  01F4               	clrf	??_ADC_Sample+3
   714  07E1  0871               	movf	??_ADC_Sample,w
   715  07E2  02A0               	subwf	_adsum,f	;volatile
   716  07E3  0872               	movf	??_ADC_Sample+1,w
   717  07E4  1C03               	skipc
   718  07E5  0F72               	incfsz	??_ADC_Sample+1,w
   719  07E6  02A1               	subwf	_adsum+1,f	;volatile
   720  07E7  0873               	movf	??_ADC_Sample+2,w
   721  07E8  1C03               	skipc
   722  07E9  0F73               	incfsz	??_ADC_Sample+2,w
   723  07EA  02A2               	subwf	_adsum+2,f	;volatile
   724  07EB  0874               	movf	??_ADC_Sample+3,w
   725  07EC  0008               	return
   726  07ED                     __end_ofPL2:	
   727  07ED                     PL4:	
   728  07ED  0878               	movf	ADC_Sample@ad_temp+1,w	;volatile
   729  07EE  00A5               	movwf	_admax+1	;volatile
   730  07EF  0877               	movf	ADC_Sample@ad_temp,w	;volatile
   731  07F0  00A4               	movwf	_admax	;volatile
   732  07F1  0008               	return
   733  07F2                     __end_ofPL4:	
   734                           
   735                           	psect	text3
   736  06CA                     __ptext3:	
   737 ;; *************** function _ADC_Result *****************
   738 ;; Defined at:
   739 ;;		line 106 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8P171XE¿ª·¢°ü\SC8P171XE_C_demo\SC8P171XE_ADC\SC8P171XE_ADC
      +.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;  adch            1    wreg     unsigned char 
   742 ;; Auto vars:     Size  Location     Type
   743 ;;  adch            1    3[COMMON] unsigned char 
   744 ;;  ad_result       2    5[COMMON] unsigned int 
   745 ;;  i               1    4[COMMON] unsigned char 
   746 ;; Return value:  Size  Location     Type
   747 ;;                  2    0[COMMON] unsigned int 
   748 ;; Registers used:
   749 ;;		wreg, status,2, status,0
   750 ;; Tracked objects:
   751 ;;		On entry : 0/100
   752 ;;		On exit  : 0/0
   753 ;;		Unchanged: 0/0
   754 ;; Data sizes:     COMMON   BANK0   BANK1
   755 ;;      Params:         2       0       0
   756 ;;      Locals:         4       0       0
   757 ;;      Temps:          1       0       0
   758 ;;      Totals:         7       0       0
   759 ;;Total ram usage:        7 bytes
   760 ;; Hardware stack levels used:    1
   761 ;; This function calls:
   762 ;;		Nothing
   763 ;; This function is called by:
   764 ;;		_main
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           
   769                           ;psect for function _ADC_Result
   770  06CA                     _ADC_Result:	
   771                           
   772                           ;incstack = 0
   773                           ; Regs used in _ADC_Result: [wreg+status,2+status,0]
   774                           ;ADC_Result@adch stored from wreg
   775  06CA  00F3               	movwf	ADC_Result@adch
   776                           
   777                           ;SC8P171XE_ADC.c: 108: ADCON1 = 0;
   778  06CB  1683               	bsf	3,5	;RP0=1, select bank1
   779  06CC  019F               	clrf	31	;volatile
   780                           
   781                           ;SC8P171XE_ADC.c: 109: _delay((unsigned long)((20)*(8000000UL/4000000.0)));
   782  06CD  300D               	movlw	13
   783  06CE  00F2               	movwf	??_ADC_Result
   784  06CF                     u497:	
   785  06CF  0BF2               	decfsz	??_ADC_Result,f
   786  06D0  2ECF               	goto	u497
   787                           
   788                           ;SC8P171XE_ADC.c: 110: ADCON0 = 0X41 | (adch << 2);
   789  06D1  0873               	movf	ADC_Result@adch,w
   790  06D2  00F2               	movwf	??_ADC_Result
   791  06D3  3001               	movlw	1
   792  06D4  1003               	clrc
   793  06D5                     L3:	
   794  06D5  0DF2               	rlf	??_ADC_Result,f
   795  06D6  3EFF               	addlw	-1
   796  06D7  1003               	clrc
   797  06D8  1D03               	skipz
   798  06D9  2ED5               	goto	L3
   799  06DA  0D72               	rlf	??_ADC_Result,w
   800  06DB  3841               	iorlw	65
   801  06DC  1283               	bcf	3,5	;RP0=0, select bank0
   802  06DD  009F               	movwf	31	;volatile
   803  06DE  0000               	nop	;# 
   804  06DF  0000               	nop	;# 
   805  06E0  0000               	nop	;# 
   806  06E1  0000               	nop	;# 
   807                           
   808                           ;SC8P171XE_ADC.c: 115: GODONE = 1;
   809  06E2  1283               	bcf	3,5	;RP0=0, select bank0
   810  06E3  149F               	bsf	31,1	;volatile
   811                           
   812                           ;SC8P171XE_ADC.c: 117: unsigned char i = 0;
   813  06E4  01F4               	clrf	ADC_Result@i
   814  06E5                     l498:	
   815                           ;SC8P171XE_ADC.c: 118: while(GODONE)
   816                           
   817  06E5  1C9F               	btfss	31,1	;volatile
   818  06E6  2EEC               	goto	l1087
   819                           
   820                           ;SC8P171XE_ADC.c: 119: {
   821                           ;SC8P171XE_ADC.c: 120: if(0 == (--i))
   822  06E7  0BF4               	decfsz	ADC_Result@i,f
   823  06E8  2EE5               	goto	l498
   824                           
   825                           ;SC8P171XE_ADC.c: 121: return 0;
   826  06E9  01F0               	clrf	?_ADC_Result
   827  06EA  01F1               	clrf	?_ADC_Result+1
   828  06EB  0008               	return
   829  06EC                     l1087:	
   830                           
   831                           ;SC8P171XE_ADC.c: 122: }
   832                           ;SC8P171XE_ADC.c: 124: unsigned int ad_result ;
   833                           ;SC8P171XE_ADC.c: 125: ad_result=(ADRESH<<4)+(ADRESL>>4);
   834  06EC  081E               	movf	30,w	;volatile
   835  06ED  00F5               	movwf	ADC_Result@ad_result
   836  06EE  30F0               	movlw	240
   837  06EF  01F6               	clrf	ADC_Result@ad_result+1
   838  06F0  0EF5               	swapf	ADC_Result@ad_result,f
   839  06F1  0EF6               	swapf	ADC_Result@ad_result+1,f
   840  06F2  05F6               	andwf	ADC_Result@ad_result+1,f
   841  06F3  0875               	movf	ADC_Result@ad_result,w
   842  06F4  390F               	andlw	15
   843  06F5  04F6               	iorwf	ADC_Result@ad_result+1,f
   844  06F6  30F0               	movlw	240
   845  06F7  05F5               	andwf	ADC_Result@ad_result,f
   846  06F8  1683               	bsf	3,5	;RP0=1, select bank1
   847  06F9  0E1E               	swapf	30,w	;volatile
   848  06FA  390F               	andlw	15
   849  06FB  07F5               	addwf	ADC_Result@ad_result,f
   850  06FC  1803               	skipnc
   851  06FD  0AF6               	incf	ADC_Result@ad_result+1,f
   852                           
   853                           ;SC8P171XE_ADC.c: 126: return ad_result;
   854  06FE  0876               	movf	ADC_Result@ad_result+1,w
   855  06FF  00F1               	movwf	?_ADC_Result+1
   856  0700  0875               	movf	ADC_Result@ad_result,w
   857  0701  00F0               	movwf	?_ADC_Result
   858  0702  0008               	return
   859  0703                     __end_of_ADC_Result:	
   860  007E                     btemp	set	126	;btemp
   861  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80      0       8
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC_Sample

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     599
                                              9 COMMON     2     2      0
                         _ADC_Result
                         _ADC_Sample
                           _DelayXms
 ---------------------------------------------------------------------------------
 (1) _DelayXms                                             3     3      0      75
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Sample                                           9     8      1     431
                                              0 COMMON     9     8      1
 ---------------------------------------------------------------------------------
 (1) _ADC_Result                                           7     5      2      70
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Result
   _ADC_Sample
   _DelayXms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      0       8       4       10.0%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      16       7        0.0%
DATA                 0      0      16       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Jan 08 11:29:12 2021

                     PL2 07DE                       PL4 07ED                      l514 06B0  
                    l516 06C2                      l483 0743                      l475 070C  
                    l494 07BB                      l489 0777                      l498 06E5  
                    l981 069F                      l991 06A4                      _RB4 0034  
                    u405 07B1                      u280 071A                      u425 07C8  
                    u290 0721                      u282 071B                      u355 0767  
                    u292 0722                      u365 0771                      u477 0712  
                    u487 0729                      u497 06CF      __size_of_ADC_Sample 00DB  
    __size_of_ADC_Result 0039                     l1021 0709                     l1031 072D  
                   l1041 0748                     l1033 072F                     l1027 0715  
                   l1019 070E                     l1053 076B                     l1063 07BF  
                   l1055 0773                     l1049 0761                     l1087 06EC  
                   _main 06A8                     btemp 007E                     start 0000  
                  ?_main 0070                    _ANS13 04A5                    _LDOEN 04FA  
                  _admax 0024                    _admin 007B                    _adsum 0020  
                  status 0003                    wtemp0 007E         __end_of_DelayXms 06A8  
        __initialization 07F2             __end_of_main 06CA                   ??_main 0079  
                 _ADCON0 001F                   _ADCON1 009F                   _ADRESH 001E  
                 _ADRESL 009E                   _GODONE 00F9                   _INTCON 000B  
                 _OSCCON 008F             ??_ADC_Sample 0071                   _TRISB5 0435  
           ??_ADC_Result 0072       __end_of_ADC_Sample 07DE       __end_of_ADC_Result 0703  
__end_of__initialization 07FE           __pcstackCOMMON 0070               __end_ofPL2 07ED  
             __end_ofPL4 07F2                ?_DelayXms 0070               __pbssBANK0 0020  
             __pmaintext 06A8               ??_DelayXms 0070      ADC_Result@ad_result 0075  
        ADC_Sample@adldo 0070                  _adtimes 007D                  __ptext0 0000  
                __ptext1 069D                  __ptext2 0703                  __ptext3 06CA  
   end_of_initialization 07FE                DelayXms@i 0071                DelayXms@j 0072  
              DelayXms@x 0070               main@result 0079      start_initialization 07F2  
      __size_of_DelayXms 000B        ADC_Sample@ad_temp 0077              __pbssCOMMON 007B  
              ___latbits 0000           ADC_Sample@adch 0075              ADC_Sample@i 0076  
            ADC_Result@i 0074           ADC_Result@adch 0073                 _DelayXms 069D  
             _ADC_Sample 0703               _ADC_Result 06CA                 _adresult 0026  
          __size_of_main 0022              ?_ADC_Sample 0070              ?_ADC_Result 0070  
