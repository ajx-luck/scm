---- C:\mcuproject\scm\testTouch\main.c ----------------------------------------------------------------------
1:                #include <sc.h>
2:                #include "Touch_Kscan_Library.h"
3:                
4:                
5:                #define		uchar		unsigned char
6:                #define		u8t		unsigned char
7:                #define		uint			unsigned int
8:                #define		u16t			unsigned int
9:                #define		ulong		unsigned long
10:               
11:               #define		SDA	RB7
12:               #define		SCL	RC0
13:               
14:               #define nop asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
15:               
16:               const static unsigned char numArray[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x71,0x79,0x50,0x73};
17:               
18:               volatile unsigned char MainTime;
19:               volatile bit	B_MainLoop, B_OnOff;
20:               u16t		firstTime = 0;
21:               u16t			keyCount1 = 0;
22:               u16t			keyCount2 = 0;
23:               u16t			keyCount3 = 0;
24:               u8t			longKeyFalg = 0;
25:               u8t			workStep = 0;
26:               u8t			zeroStep = 0;
27:               u16t		ledLightTime = 0;
28:               u8t			shanShuoTime = 0;
29:               u8t			lowBatLockFlag = 0;
30:               u8t			showFlag = 0;
31:               u8t			showShiWei = 0;
32:               u8t			showGeWei = 0;
33:               u8t			showLed1 = 0;
34:               u8t			showLed2 = 0;
35:               u8t			count64ms = 0;
36:               u8t			count1s = 0;
37:               u8t			chrgFlag = 0;
38:               u8t			batValue = 0;
39:               u16t		batResult = 0;
40:               u8t			preBatValue = 0;
41:               u16t		chrgResult = 0;
42:               u8t			NoTouchTime = 0;
43:               u8t			count50 = 0;
44:               u8t			chrgFullFlag = 0;
45:               u8t			chrgDuty = 0;
46:               u8t			addTime = 0;
47:               u8t			subTime = 0;
48:               u8t			count15s = 0;
49:               u8t			chrgLockFlag = 0;
50:               u16t		chrgFullTime = 0;
51:               u16t		count900s = 0;
52:               u8t			sleepTime = 0;
53:               
54:               void initTM1650();
55:               unsigned int  Read_ADC(unsigned char  ADCchannel,unsigned char  ADCLDORef);
56:               void checkChrgAD();
57:               void gotoSleep();
58:               
59:               //系统初始化
60:               void Init_System() {
  0608    0000    NOP
  0609    0064    CLRWDT
61:               	asm("nop");
62:               	asm("clrwdt");
63:               	INTCON = 0;				//禁止中断
  060A    018B    CLR	0xB
64:               	OSCCON = 0X72;			//配置振荡为8M
  060B    3072    LDIA	0x72
  060C    1683    SETB	0x3,5
  060D    1303    CLRB	0x3,6
  060E    0088    LD	0x8,A
65:               	OPTION_REG = 0;
  060F    0181    CLR	0x1
66:               
67:               
68:               	//延时等待电源电压稳定
69:               	//DelayXms(200);
70:               	TRISA = 0x60;
  0610    3060    LDIA	0x60
  0611    0085    LD	0x5,A
71:               	PORTA = 0;
  0612    1283    CLRB	0x3,5
  0613    0185    CLR	0x5
72:               	TRISB = 0x18;
  0614    3018    LDIA	0x18
  0615    1683    SETB	0x3,5
  0616    0086    LD	0x6,A
73:               	PORTB = 0;
  0617    1283    CLRB	0x3,5
  0618    0186    CLR	0x6
74:               	TRISC = 0;
  0619    1683    SETB	0x3,5
  061A    1703    SETB	0x3,6
  061B    0186    CLR	0x6
75:               	PORTC = 0;
  061C    0185    CLR	0x5
76:               
77:               	PIE1 = 2;
  061D    3002    LDIA	0x2
  061E    1283    CLRB	0x3,5
  061F    1303    CLRB	0x3,6
  0620    008D    LD	0xD,A
78:               	PR2 = 250;				//8M下将TMR2设置为125us中断
  0621    30FA    LDIA	0xFA
  0622    1683    SETB	0x3,5
  0623    0091    LD	0x11,A
79:               	T2CON = 4;				//使能定时器2
  0624    3004    LDIA	0x4
  0625    1283    CLRB	0x3,5
  0626    0092    LD	0x12,A
80:               
81:               	INTCON = 0XC0;			//使能中断
  0627    30C0    LDIA	0xC0
  0628    008B    LD	0xB,A
82:               	ADON = 1;
  0629    1683    SETB	0x3,5
  062A    141D    SETB	0x1D,0
  062B    0008    RET
83:               }
84:               
85:               
86:               /**********************************************************
87:               函数名称：Refurbish_Sfr
88:               函数功能：刷新一些特殊功能寄存器
89:               入口参数：无
90:               出口参数：无
91:               备    注：每隔一定时间刷新一次SFR可增强抗干扰能力
92:               **********************************************************/
93:               void Refurbish_Sfr() {
94:               	//刷新中断相关控制寄存器
95:               	PIE1 = 2;
  0FD6    3002    LDIA	0x2
  0FD7    008D    LD	0xD,A
96:               	PR2 = 250;
  0FD8    30FA    LDIA	0xFA
  0FD9    1683    SETB	0x3,5
  0FDA    0091    LD	0x11,A
97:               	INTCON = 0XC0;
  0FDB    30C0    LDIA	0xC0
  0FDC    008B    LD	0xB,A
98:               	if (4 != T2CON)
  0FDD    3004    LDIA	0x4
  0FDE    1283    CLRB	0x3,5
  0FDF    0612    XORA	0x12
  0FE0    1903    SZB	0x3,2
  0FE1    0008    RET
99:               		T2CON = 4;
  0FE2    3004    LDIA	0x4
  0FE3    0092    LD	0x12,A
  0FE4    0008    RET
100:              }
101:              
102:              
103:              /***********************************************************
104:              键处理函数
105:              ***********************************************************/
106:              void KeyServer() {
107:              	static unsigned char KeyOldFlag = 0;
108:              	if (KeyFlag[0]) {
109:              			NoTouchTime = 0;
  02D9    084D    LD	A,0x4D
  02DA    1903    SZB	0x3,2
  02DB    2B47    JP	0x347
110:              			if ((KeyFlag[0] & 0x2)) {
  02DC    1CCD    SNZB	0x4D,1
  02DD    2AF6    JP	0x2F6
111:              				//KEY1被按下	+
112:              				if(++keyCount1 > 100)
  02DE    0AC9    INCR	0x49
  02DF    1903    SZB	0x3,2
  02E0    0ACA    INCR	0x4A
  02E1    3000    LDIA	0x0
  02E2    024A    SUBA	0x4A
  02E3    3065    LDIA	0x65
  02E4    1903    SZB	0x3,2
  02E5    0249    SUBA	0x49
  02E6    1C03    SNZB	0x3,0
  02E7    2AF6    JP	0x2F6
113:              				{
114:              					keyCount1 = 100;
  02E8    3064    LDIA	0x64
  02E9    00C9    LD	0x49,A
  02EA    3002    LDIA	0x2
  02EB    01CA    CLR	0x4A
115:              					if(workStep > 1 && ++count50 > 25)
  02EC    027B    SUBA	0x7B
  02ED    1C03    SNZB	0x3,0
  02EE    2AF6    JP	0x2F6
  02EF    301A    LDIA	0x1A
  02F0    0ADB    INCR	0x5B
  02F1    025B    SUBA	0x5B
  02F2    1C03    SNZB	0x3,0
  02F3    2AF6    JP	0x2F6
116:              					{
117:              						workStep--;
  02F4    03FB    DECR	0x7B
118:              						count50 = 0;
  02F5    01DB    CLR	0x5B
119:              					}
120:              				}
121:              			}
122:              			if ((KeyFlag[0] & 0x1)) {
  02F6    1C4D    SNZB	0x4D,0
  02F7    2B17    JP	0x317
123:              				//KEY2被按下		1
124:              				if(++keyCount2 > 100)
  02F8    0AC7    INCR	0x47
  02F9    1903    SZB	0x3,2
  02FA    0AC8    INCR	0x48
  02FB    3000    LDIA	0x0
  02FC    0248    SUBA	0x48
  02FD    3065    LDIA	0x65
  02FE    1903    SZB	0x3,2
  02FF    0247    SUBA	0x47
  0300    1C03    SNZB	0x3,0
  0301    2B17    JP	0x317
125:              				{
126:              					keyCount2 = 100;
  0302    3064    LDIA	0x64
  0303    00C7    LD	0x47,A
  0304    301E    LDIA	0x1E
  0305    01C8    CLR	0x48
127:              					if(workStep < 30 && (workStep > 0 || ledLightTime > 0) && ++count50 > 25)
  0306    027B    SUBA	0x7B
  0307    1803    SZB	0x3,0
  0308    2B17    JP	0x317
  0309    087B    LD	A,0x7B
  030A    1D03    SNZB	0x3,2
  030B    2B10    JP	0x310
  030C    0843    LD	A,0x43
  030D    0444    ORA	0x44
  030E    1903    SZB	0x3,2
  030F    2B17    JP	0x317
  0310    301A    LDIA	0x1A
  0311    0ADB    INCR	0x5B
  0312    025B    SUBA	0x5B
  0313    1C03    SNZB	0x3,0
  0314    2B17    JP	0x317
128:              					{
129:              						workStep++;
  0315    0AFB    INCR	0x7B
130:              						count50 = 0;
  0316    01DB    CLR	0x5B
131:              					}
132:              				}
133:              			}
134:              			if (KeyFlag[0] & 0x4) {
  0317    1D4D    SNZB	0x4D,2
  0318    0008    RET
135:              				//KEY3被按下		开关机
136:              				if(++keyCount3 > 200)
  0319    0AC5    INCR	0x45
  031A    1903    SZB	0x3,2
  031B    0AC6    INCR	0x46
  031C    3000    LDIA	0x0
  031D    0246    SUBA	0x46
  031E    30C9    LDIA	0xC9
  031F    1903    SZB	0x3,2
  0320    0245    SUBA	0x45
  0321    1C03    SNZB	0x3,0
  0322    2B3B    JP	0x33B
137:              				{
138:              					keyCount3 = 200;
  0323    30C8    LDIA	0xC8
  0324    00C5    LD	0x45,A
  0325    01C6    CLR	0x46
139:              					if(longKeyFalg == 0)
  0326    0865    LD	A,0x65
  0327    1D03    SNZB	0x3,2
  0328    2B3B    JP	0x33B
140:              					{
141:              						longKeyFalg = 1;
  0329    01E5    CLR	0x65
  032A    0AE5    INCR	0x65
142:              						if(workStep > 0 || ledLightTime > 0)
  032B    087B    LD	A,0x7B
  032C    1D03    SNZB	0x3,2
  032D    2B32    JP	0x332
  032E    0843    LD	A,0x43
  032F    0444    ORA	0x44
  0330    1903    SZB	0x3,2
  0331    2B35    JP	0x335
143:              						{
144:              							workStep = 0;
145:              							zeroStep = 0;
146:              							ledLightTime = 0;
  0332    2542    CALL	0x542
  0333    118A    CLRB	0xA,3
147:              						}
  0334    2B3B    JP	0x33B
  0335    302C    LDIA	0x2C
148:              						else
149:              						{
150:              							workStep = 0;
  0336    01FB    CLR	0x7B
151:              							zeroStep = 0;
  0337    01FA    CLR	0x7A
152:              							ledLightTime = 300;
  0338    00C3    LD	0x43,A
  0339    3001    LDIA	0x1
  033A    00C4    LD	0x44,A
153:              							if(lowBatLockFlag)
154:              							{
155:              								shanShuoTime = 250;
156:              							}
157:              						}
158:              					}
159:              				}
160:              				if(ledLightTime == 0 && longKeyFalg == 0 && keyCount3 % 16 == 0)
  033B    0843    LD	A,0x43
  033C    0444    ORA	0x44
  033D    1D03    SNZB	0x3,2
  033E    0008    RET
  033F    0865    LD	A,0x65
  0340    1D03    SNZB	0x3,2
  0341    0008    RET
  0342    0845    LD	A,0x45
  0343    390F    ANDIA	0xF
  0344    1903    SZB	0x3,2
161:              				{
162:              					zeroStep++;
  0345    0AFA    INCR	0x7A
  0346    0008    RET
163:              				}
164:              			}
165:              
166:              	} else {
167:              		
168:              		if(keyCount1 > 5 && workStep > 1)
  0347    3000    LDIA	0x0
  0348    024A    SUBA	0x4A
  0349    3006    LDIA	0x6
  034A    1903    SZB	0x3,2
  034B    0249    SUBA	0x49
  034C    1C03    SNZB	0x3,0
  034D    2B53    JP	0x353
  034E    3002    LDIA	0x2
  034F    027B    SUBA	0x7B
  0350    1C03    SNZB	0x3,0
  0351    2B53    JP	0x353
169:              		{
170:              			workStep--;
  0352    03FB    DECR	0x7B
  0353    3000    LDIA	0x0
171:              		}
172:              		keyCount1 = 0;
  0354    01C9    CLR	0x49
  0355    01CA    CLR	0x4A
173:              		
174:              		if(keyCount2 > 5 && workStep < 30 && (workStep > 0 || ledLightTime > 0))
  0356    0248    SUBA	0x48
  0357    3006    LDIA	0x6
  0358    1903    SZB	0x3,2
  0359    0247    SUBA	0x47
  035A    1C03    SNZB	0x3,0
  035B    2B68    JP	0x368
  035C    301E    LDIA	0x1E
  035D    027B    SUBA	0x7B
  035E    1803    SZB	0x3,0
  035F    2B68    JP	0x368
  0360    087B    LD	A,0x7B
  0361    1D03    SNZB	0x3,2
  0362    2B67    JP	0x367
  0363    0843    LD	A,0x43
  0364    0444    ORA	0x44
  0365    1903    SZB	0x3,2
  0366    2B68    JP	0x368
175:              		{
176:              			workStep++;
  0367    0AFB    INCR	0x7B
177:              		}
178:              		keyCount2 = 0;
  0368    01C7    CLR	0x47
  0369    01C8    CLR	0x48
179:              		/*
180:              		if(longKeyFalg == 0 && keyCount3 > 10 && (workStep > 0 || ledLightTime > 0))
181:              		{
182:              			workStep = 0;
183:              		}
184:              		*/
185:              		longKeyFalg = 0;
  036A    01E5    CLR	0x65
186:              		keyCount3 = 0;
  036B    01C5    CLR	0x45
  036C    01C6    CLR	0x46
187:              		if(zeroStep > 0 && ++count64ms >= 12)
  036D    087A    LD	A,0x7A
  036E    1903    SZB	0x3,2
  036F    0008    RET
  0370    300C    LDIA	0xC
  0371    0ADF    INCR	0x5F
  0372    025F    SUBA	0x5F
  0373    1C03    SNZB	0x3,0
  0374    0008    RET
188:              		{
189:              			zeroStep--;
  0375    03FA    DECR	0x7A
190:              			count64ms = 0;
  0376    01DF    CLR	0x5F
  0377    0008    RET
191:              		}
192:              	}
193:              }
194:              
195:              
196:              /******************************************
197:                返回  Adc_Result 
198:                
199:               ADCchannel 为输入AD通道 0-18
200:                           19  检测内部1.2V 
201:              			 20  检测PGA输出
202:               ADCLDORef =1,开启内部LDO 2V 作为ADC 参考
203:               ADCLDORef =2,开启内部LDO 2.4V 作为ADC 参考
204:               ADCLDORef =0,VDD 作为ADC 参考
205:              *****************************************/
206:              unsigned int  Read_ADC(unsigned char  ADCchannel,unsigned char  ADCLDORef)
  0703    00EC    LD	0x6C,A
  0704    30C8    LDIA	0xC8
207:              {
208:              	unsigned int	Adc_Result;
209:              	unsigned int	Adc_ResultSum = 0;
  0705    01E7    CLR	0x67
  0706    01E8    CLR	0x68
210:              	unsigned char i=200;
  0707    00EB    LD	0x6B,A
211:              	unsigned char j = 0;
212:              	for(j=0;j<8;j++)
  0708    01ED    CLR	0x6D
213:              	{
214:              		if(ADCLDORef==0)
  0709    0872    LD	A,0x72
  070A    1D03    SNZB	0x3,2
  070B    2F0F    JP	0x70F
215:              		{
216:              			ADCON1 = 0B00000000;
  070C    1683    SETB	0x3,5
  070D    019C    CLR	0x1C
217:              		}
  070E    2F16    JP	0x716
218:              		else if(ADCLDORef==1)
  070F    0B72    SZDECA	0x72
  0710    2F13    JP	0x713
219:              		{
220:              			ADCON1 = 0B00000101;
  0711    3005    LDIA	0x5
  0712    2F14    JP	0x714
221:              		}
222:              		else
223:              		{
224:              			ADCON1 = 0B00000110;	
  0713    3006    LDIA	0x6
  0714    1683    SETB	0x3,5
  0715    009C    LD	0x1C,A
225:              		}
226:              		
227:              		CHS4 = 0;	
  0716    131C    CLRB	0x1C,6
228:              		if(ADCchannel >=16)
  0717    3010    LDIA	0x10
  0718    1283    CLRB	0x3,5
  0719    026C    SUBA	0x6C
  071A    1C03    SNZB	0x3,0
  071B    2F20    JP	0x720
229:              		{
230:              			ADCchannel -= 16;	
  071C    3010    LDIA	0x10
  071D    02EC    SUBR	0x6C
231:              			CHS4 = 1;	
  071E    1683    SETB	0x3,5
  071F    171C    SETB	0x1C,6
232:              		}
233:              		
234:              		ADCON0 &= 0b11000011;
  0720    30C3    LDIA	0xC3
  0721    1683    SETB	0x3,5
  0722    059D    ANDR	0x1D
235:              		ADCON0 |= ADCchannel<<2; 
  0723    1283    CLRB	0x3,5
  0724    086C    LD	A,0x6C
  0725    00F4    LD	0x74,A
  0726    3001    LDIA	0x1
  0727    1003    CLRB	0x3,0
  0728    0DF4    RLCR	0x74
  0729    3EFF    ADDIA	0xFF
  072A    1003    CLRB	0x3,0
  072B    1D03    SNZB	0x3,2
  072C    2F28    JP	0x728
  072D    0D74    RLCA	0x74
  072E    1683    SETB	0x3,5
  072F    049D    ORR	0x1D
  0730    0000    NOP
236:              		asm("nop");
237:              		GODONE = 1;
  0731    1683    SETB	0x3,5
  0732    1303    CLRB	0x3,6
  0733    149D    SETB	0x1D,1
238:              		while(GODONE==1&&i>0)
  0734    2F3B    JP	0x73B
  0735    1283    CLRB	0x3,5
  0736    086B    LD	A,0x6B
  0737    1903    SZB	0x3,2
  0738    2F3F    JP	0x73F
239:              		{
240:              			i--;
  0739    03EB    DECR	0x6B
  073A    0000    NOP
  073B    1683    SETB	0x3,5
  073C    1303    CLRB	0x3,6
  073D    189D    SZB	0x1D,1
  073E    2F35    JP	0x735
241:              			asm("nop");
242:              		}
243:              		Adc_Result = ADRESH<<4;
  073F    1683    SETB	0x3,5
  0740    081F    LD	A,0x1F
  0741    1283    CLRB	0x3,5
  0742    00E9    LD	0x69,A
  0743    30F0    LDIA	0xF0
  0744    01EA    CLR	0x6A
  0745    0EE9    SWAPR	0x69
  0746    0EEA    SWAPR	0x6A
  0747    05EA    ANDR	0x6A
  0748    0869    LD	A,0x69
  0749    390F    ANDIA	0xF
  074A    04EA    ORR	0x6A
  074B    30F0    LDIA	0xF0
  074C    05E9    ANDR	0x69
244:              		Adc_Result += ADRESL>>4;
  074D    1683    SETB	0x3,5
  074E    0E1E    SWAPA	0x1E
  074F    390F    ANDIA	0xF
  0750    1283    CLRB	0x3,5
  0751    07E9    ADDR	0x69
  0752    1803    SZB	0x3,0
  0753    0AEA    INCR	0x6A
245:              		Adc_ResultSum += Adc_Result;
  0754    0869    LD	A,0x69
  0755    07E7    ADDR	0x67
  0756    1803    SZB	0x3,0
  0757    0AE8    INCR	0x68
  0758    086A    LD	A,0x6A
  0759    07E8    ADDR	0x68
  075A    3008    LDIA	0x8
  075B    0AED    INCR	0x6D
  075C    026D    SUBA	0x6D
  075D    1C03    SNZB	0x3,0
  075E    2F09    JP	0x709
246:              	}
247:              	return Adc_ResultSum/8;
  075F    0868    LD	A,0x68
  0760    00F5    LD	0x75,A
  0761    0867    LD	A,0x67
  0762    00F4    LD	0x74,A
  0763    1003    CLRB	0x3,0
  0764    0CF5    RRCR	0x75
  0765    0CF4    RRCR	0x74
  0766    1003    CLRB	0x3,0
  0767    0CF5    RRCR	0x75
  0768    0CF4    RRCR	0x74
  0769    1003    CLRB	0x3,0
  076A    0CF5    RRCR	0x75
  076B    0CF4    RRCR	0x74
  076C    0874    LD	A,0x74
  076D    00F2    LD	0x72,A
  076E    0875    LD	A,0x75
  076F    00F3    LD	0x73,A
  0770    0008    RET
248:              	
249:              }
250:              
251:              void checkChrgAD()
  06BC    3010    LDIA	0x10
252:              {
253:              	chrgResult = Read_ADC(16,1);
  06BD    01F2    CLR	0x72
  06BE    0AF2    INCR	0x72
  06BF    2703    CALL	0x703
  06C0    0873    LD	A,0x73
  06C1    00C0    LD	0x40,A
  06C2    0872    LD	A,0x72
  06C3    00BF    LD	0x3F,A
  06C4    0008    RET
254:              }
255:              
256:              void checkBat()
  06C5    300A    LDIA	0xA
257:              {
258:              	batResult = Read_ADC(10,1);
  06C6    01F2    CLR	0x72
  06C7    0AF2    INCR	0x72
  06C8    2703    CALL	0x703
  06C9    118A    CLRB	0xA,3
  06CA    0873    LD	A,0x73
  06CB    00C2    LD	0x42,A
  06CC    0872    LD	A,0x72
  06CD    00C1    LD	0x41,A
259:              	if(batResult < 1118)
  06CE    3004    LDIA	0x4
  06CF    0242    SUBA	0x42
  06D0    305E    LDIA	0x5E
  06D1    1903    SZB	0x3,2
  06D2    0241    SUBA	0x41
  06D3    1803    SZB	0x3,0
  06D4    2ED7    JP	0x6D7
260:              	{
261:              		batValue = 0;
  06D5    01DC    CLR	0x5C
262:              	}	
  06D6    0008    RET
263:              	else
264:              	{
265:              		if(batResult >= 1340)
  06D7    3005    LDIA	0x5
  06D8    0242    SUBA	0x42
  06D9    303C    LDIA	0x3C
  06DA    1903    SZB	0x3,2
  06DB    0241    SUBA	0x41
266:              		{
267:              			batValue = ((batResult - 1340) /2) + 16;
  06DC    0841    LD	A,0x41
  06DD    1C03    SNZB	0x3,0
  06DE    2EEC    JP	0x6EC
  06DF    3EC4    ADDIA	0xC4
  06E0    00F6    LD	0x76,A
  06E1    0842    LD	A,0x42
  06E2    1803    SZB	0x3,0
  06E3    3E01    ADDIA	0x1
  06E4    3EFA    ADDIA	0xFA
  06E5    00F7    LD	0x77,A
  06E6    1003    CLRB	0x3,0
  06E7    0CF7    RRCR	0x77
  06E8    0CF6    RRCR	0x76
  06E9    0876    LD	A,0x76
  06EA    3E10    ADDIA	0x10
  06EB    2EFB    JP	0x6FB
268:              		}
  06EC    3EA2    ADDIA	0xA2
  06ED    00F6    LD	0x76,A
  06EE    0842    LD	A,0x42
  06EF    1803    SZB	0x3,0
  06F0    3E01    ADDIA	0x1
  06F1    3EFB    ADDIA	0xFB
  06F2    00F7    LD	0x77,A
  06F3    3004    LDIA	0x4
  06F4    1003    CLRB	0x3,0
  06F5    0CF7    RRCR	0x77
  06F6    0CF6    RRCR	0x76
  06F7    3EFF    ADDIA	0xFF
  06F8    1D03    SNZB	0x3,2
  06F9    2EF4    JP	0x6F4
  06FA    0876    LD	A,0x76
  06FB    00DC    LD	0x5C,A
269:              		else
270:              		{
271:              			batValue = (batResult - 1118) / 16;
272:              		}
273:              		
274:              		if(batValue > 99)
  06FC    3064    LDIA	0x64
  06FD    025C    SUBA	0x5C
  06FE    1C03    SNZB	0x3,0
  06FF    0008    RET
275:              	   		batValue = 99;
  0700    3063    LDIA	0x63
  0701    00DC    LD	0x5C,A
  0702    0008    RET
276:              	}
277:              }
278:              
279:              
280:              /***********************************************************
281:              中断服务函数
282:              ***********************************************************/
283:              void interrupt Isr_Timer() {
284:              	if (TMR2IF) {			//若只使能了一个中断源,可以略去判断
  0FE5    1283    CLRB	0x3,5
  0FE6    1303    CLRB	0x3,6
  0FE7    1C8C    SNZB	0xC,1
  0FE8    2FF2    JP	0x7F2
285:              		TMR2IF = 0;
  0FE9    108C    CLRB	0xC,1
286:              		if(++MainTime >= 64)	//需根据你选择的触摸路数和触摸电容选择扫描一次按键的时间
  0FEA    3040    LDIA	0x40
  0FEB    0AE6    INCR	0x66
  0FEC    0266    SUBA	0x66
  0FED    1C03    SNZB	0x3,0
  0FEE    2FF3    JP	0x7F3
287:              		{						//一般103电容，8路触摸，8M主频检测时间约4ms，故扫描一次的时间可选5ms
288:              			MainTime = 0;
  0FEF    01E6    CLR	0x66
289:              			B_MainLoop = 1;
  0FF0    1778    SETB	0x78,6
  0FF1    2FF3    JP	0x7F3
290:              		}
291:              	} else {
292:              		PIR1 = 0;
  0FF2    018C    CLR	0xC
293:              	}
294:              	
295:              	if(RACIF)
  0FF3    1703    SETB	0x3,6
  0FF4    1C87    SNZB	0x7,1
  0FF5    2FF9    JP	0x7F9
296:              	{
297:              		RACIF = 0;			//清中断标志
  0FF6    1087    CLRB	0x7,1
298:              		PORTA;				//如不关闭PB中断，则需再读取一遍PB，否则会频繁进入中断
  0FF7    1303    CLRB	0x3,6
  0FF8    0805    LD	A,0x5
  0FF9    0871    LD	A,0x71
  0FFA    008A    LD	0xA,A
  0FFB    0E70    SWAPA	0x70
  0FFC    0083    LD	0x3,A
  0FFD    0EFE    SWAPR	0x7E
  0FFE    0E7E    SWAPA	0x7E
299:              		//Init_System();
300:              	}
301:              
302:              }
303:              
304:              
305:              /************ START信号*******************************/
306:              void TM1650_START()
307:              {
308:              	SCL=1;
  0507    1683    SETB	0x3,5
  0508    1703    SETB	0x3,6
  0509    1405    SETB	0x5,0
309:              	SDA=1;
  050A    1283    CLRB	0x3,5
  050B    1303    CLRB	0x3,6
  050C    1786    SETB	0x6,7
  050D    0000    NOP
  050E    0000    NOP
  050F    0000    NOP
  0510    0000    NOP
  0511    0000    NOP
  0512    0000    NOP
310:              	nop;
311:              	SDA=0;
  0513    1283    CLRB	0x3,5
  0514    1303    CLRB	0x3,6
  0515    1386    CLRB	0x6,7
  0516    0000    NOP
  0517    0000    NOP
  0518    0000    NOP
  0519    0000    NOP
  051A    0000    NOP
  051B    0000    NOP
312:              	nop;
313:              	SCL=0;
  051C    1683    SETB	0x3,5
  051D    1703    SETB	0x3,6
  051E    1005    CLRB	0x5,0
  051F    0008    RET
314:              }
315:              
316:              /******************** STOP信号************************/
317:              void TM1650_STOP()
318:              {
319:              	SDA=0;
  0520    1283    CLRB	0x3,5
  0521    1303    CLRB	0x3,6
  0522    1386    CLRB	0x6,7
  0523    0000    NOP
  0524    0000    NOP
  0525    0000    NOP
  0526    0000    NOP
  0527    0000    NOP
  0528    0000    NOP
320:              	nop;
321:              	SCL=1;
  0529    1683    SETB	0x3,5
  052A    1703    SETB	0x3,6
  052B    1405    SETB	0x5,0
  052C    0000    NOP
  052D    0000    NOP
  052E    0000    NOP
  052F    0000    NOP
  0530    0000    NOP
  0531    0000    NOP
322:              	nop;
323:              	SDA=1;
  0532    1283    CLRB	0x3,5
  0533    1303    CLRB	0x3,6
  0534    1786    SETB	0x6,7
  0535    0000    NOP
  0536    0000    NOP
  0537    0000    NOP
  0538    0000    NOP
  0539    0000    NOP
  053A    0000    NOP
324:              	nop;
325:              	SCL=0;
  053B    1683    SETB	0x3,5
  053C    1703    SETB	0x3,6
  053D    1005    CLRB	0x5,0
326:              	SDA=0;
  053E    1283    CLRB	0x3,5
  053F    1303    CLRB	0x3,6
  0540    1386    CLRB	0x6,7
  0541    0008    RET
327:              }
328:              
329:              
330:              /****************写1个字节给TM1650********************/
331:              void write_8bit( uchar dat)
  0449    00F2    LD	0x72,A
332:              {
333:               	uchar i;
334:              	SCL=0;
  044A    1683    SETB	0x3,5
  044B    1703    SETB	0x3,6
  044C    1005    CLRB	0x5,0
335:              	for(i=0;i<8;i++)
  044D    01F3    CLR	0x73
336:              		{
337:              		if(dat&0x80)
  044E    1FF2    SNZB	0x72,7
  044F    2C81    JP	0x481
338:              		{
339:              			SDA=1;
  0450    1283    CLRB	0x3,5
  0451    1303    CLRB	0x3,6
  0452    1786    SETB	0x6,7
  0453    0000    NOP
  0454    0000    NOP
  0455    0000    NOP
  0456    0000    NOP
  0457    0000    NOP
  0458    0000    NOP
  0459    0000    NOP
  045A    0000    NOP
  045B    0000    NOP
  045C    0000    NOP
  045D    0000    NOP
  045E    0000    NOP
340:              			nop;
341:              			nop;
342:              			SCL=1;
  045F    1683    SETB	0x3,5
  0460    1703    SETB	0x3,6
  0461    1405    SETB	0x5,0
  0462    0000    NOP
  0463    0000    NOP
  0464    0000    NOP
  0465    0000    NOP
  0466    0000    NOP
  0467    0000    NOP
  0468    0000    NOP
  0469    0000    NOP
  046A    0000    NOP
  046B    0000    NOP
  046C    0000    NOP
  046D    0000    NOP
  046E    0000    NOP
  046F    0000    NOP
  0470    0000    NOP
  0471    0000    NOP
  0472    0000    NOP
  0473    0000    NOP
  0474    0000    NOP
  0475    0000    NOP
  0476    0000    NOP
  0477    0000    NOP
  0478    0000    NOP
  0479    0000    NOP
  047A    0000    NOP
  047B    0000    NOP
  047C    0000    NOP
  047D    0000    NOP
  047E    0000    NOP
  047F    0000    NOP
  0480    2CB1    JP	0x4B1
343:              			nop;
344:              			nop;
345:              			nop;
346:              			nop;
347:              			nop;
348:              			SCL=0;	 
349:              		}
350:              		else
351:              		{
352:              			SDA=0;
  0481    1283    CLRB	0x3,5
  0482    1303    CLRB	0x3,6
  0483    1386    CLRB	0x6,7
  0484    0000    NOP
  0485    0000    NOP
  0486    0000    NOP
  0487    0000    NOP
  0488    0000    NOP
  0489    0000    NOP
  048A    0000    NOP
  048B    0000    NOP
  048C    0000    NOP
  048D    0000    NOP
  048E    0000    NOP
  048F    0000    NOP
353:              			nop;
354:              			nop;
355:              			SCL=1;
  0490    1683    SETB	0x3,5
  0491    1703    SETB	0x3,6
  0492    1405    SETB	0x5,0
  0493    0000    NOP
  0494    0000    NOP
  0495    0000    NOP
  0496    0000    NOP
  0497    0000    NOP
  0498    0000    NOP
  0499    0000    NOP
  049A    0000    NOP
  049B    0000    NOP
  049C    0000    NOP
  049D    0000    NOP
  049E    0000    NOP
  049F    0000    NOP
  04A0    0000    NOP
  04A1    0000    NOP
  04A2    0000    NOP
  04A3    0000    NOP
  04A4    0000    NOP
  04A5    0000    NOP
  04A6    0000    NOP
  04A7    0000    NOP
  04A8    0000    NOP
  04A9    0000    NOP
  04AA    0000    NOP
  04AB    0000    NOP
  04AC    0000    NOP
  04AD    0000    NOP
  04AE    0000    NOP
  04AF    0000    NOP
  04B0    0000    NOP
356:              			nop;
357:              			nop;
358:              			nop;
359:              			nop;
360:              			nop;
361:              			SCL=0;
  04B1    1683    SETB	0x3,5
  04B2    1703    SETB	0x3,6
  04B3    1005    CLRB	0x5,0
  04B4    3008    LDIA	0x8
362:              		}	
363:              			dat<<=1;	 
  04B5    1003    CLRB	0x3,0
  04B6    0DF2    RLCR	0x72
  04B7    0AF3    INCR	0x73
  04B8    0273    SUBA	0x73
  04B9    1C03    SNZB	0x3,0
  04BA    2C4E    JP	0x44E
364:              		}
365:              		SDA=1;			//ACK信号
  04BB    1283    CLRB	0x3,5
  04BC    1303    CLRB	0x3,6
  04BD    1786    SETB	0x6,7
  04BE    0000    NOP
  04BF    0000    NOP
  04C0    0000    NOP
  04C1    0000    NOP
  04C2    0000    NOP
  04C3    0000    NOP
  04C4    0000    NOP
  04C5    0000    NOP
  04C6    0000    NOP
  04C7    0000    NOP
  04C8    0000    NOP
  04C9    0000    NOP
  04CA    0000    NOP
  04CB    0000    NOP
  04CC    0000    NOP
  04CD    0000    NOP
  04CE    0000    NOP
  04CF    0000    NOP
  04D0    0000    NOP
  04D1    0000    NOP
  04D2    0000    NOP
  04D3    0000    NOP
  04D4    0000    NOP
  04D5    0000    NOP
366:              		nop;
367:              		nop;
368:              		nop;
369:              		nop;
370:              		SCL=1;
  04D6    1683    SETB	0x3,5
  04D7    1703    SETB	0x3,6
  04D8    1405    SETB	0x5,0
  04D9    0000    NOP
  04DA    0000    NOP
  04DB    0000    NOP
  04DC    0000    NOP
  04DD    0000    NOP
  04DE    0000    NOP
  04DF    0000    NOP
  04E0    0000    NOP
  04E1    0000    NOP
  04E2    0000    NOP
  04E3    0000    NOP
  04E4    0000    NOP
  04E5    0000    NOP
  04E6    0000    NOP
  04E7    0000    NOP
  04E8    0000    NOP
  04E9    0000    NOP
  04EA    0000    NOP
  04EB    0000    NOP
  04EC    0000    NOP
  04ED    0000    NOP
  04EE    0000    NOP
  04EF    0000    NOP
  04F0    0000    NOP
  04F1    0000    NOP
  04F2    0000    NOP
  04F3    0000    NOP
  04F4    0000    NOP
  04F5    0000    NOP
  04F6    0000    NOP
371:              		nop;
372:              		nop;
373:              		nop;
374:              		nop;
375:              		nop;
376:              		SCL=0;
  04F7    1683    SETB	0x3,5
  04F8    1703    SETB	0x3,6
  04F9    1005    CLRB	0x5,0
  04FA    0000    NOP
  04FB    0000    NOP
  04FC    0000    NOP
  04FD    0000    NOP
  04FE    0000    NOP
  04FF    0000    NOP
  0500    0000    NOP
  0501    0000    NOP
  0502    0000    NOP
  0503    0000    NOP
  0504    0000    NOP
  0505    0000    NOP
  0506    0008    RET
377:              		nop;
378:              		nop;	 
379:              }
380:              
381:              
382:              void tm1650cmd(u8t digAddr,u8t seg_data)
  043F    00F5    LD	0x75,A
383:              {
384:              	TM1650_START();
  0440    2507    CALL	0x507
  0441    118A    CLRB	0xA,3
385:                  write_8bit(digAddr);
  0442    0875    LD	A,0x75
  0443    2449    CALL	0x449
  0444    118A    CLRB	0xA,3
386:                  write_8bit(seg_data);
  0445    0874    LD	A,0x74
  0446    2449    CALL	0x449
  0447    118A    CLRB	0xA,3
387:                  TM1650_STOP();
  0448    2D20    JP	0x520
388:              }
389:              
390:              
391:              void initTM1650()
392:              {
393:                  tm1650cmd(0X48,0x11);
  03D1    3011    LDIA	0x11
  03D2    00F4    LD	0x74,A
  03D3    3048    LDIA	0x48
  03D4    243F    CALL	0x43F
  03D5    118A    CLRB	0xA,3
  03D6    0000    NOP
  03D7    0000    NOP
  03D8    0000    NOP
  03D9    0000    NOP
  03DA    0000    NOP
  03DB    0000    NOP
394:                  nop;
395:              	 tm1650cmd(0X68,0xFF);	//低位圆圈前面4个灯	高位3个按键灯
  03DC    30FF    LDIA	0xFF
  03DD    00F4    LD	0x74,A
  03DE    3068    LDIA	0x68
  03DF    243F    CALL	0x43F
  03E0    118A    CLRB	0xA,3
  03E1    0000    NOP
  03E2    0000    NOP
  03E3    0000    NOP
  03E4    0000    NOP
  03E5    0000    NOP
  03E6    0000    NOP
396:              	nop;
397:              	tm1650cmd(0X6A,0xFF);	//十位
  03E7    30FF    LDIA	0xFF
  03E8    00F4    LD	0x74,A
  03E9    306A    LDIA	0x6A
  03EA    243F    CALL	0x43F
  03EB    118A    CLRB	0xA,3
  03EC    0000    NOP
  03ED    0000    NOP
  03EE    0000    NOP
  03EF    0000    NOP
  03F0    0000    NOP
  03F1    0000    NOP
398:              	nop;
399:              	  tm1650cmd(0X6C,0xFF);	//个位
  03F2    30FF    LDIA	0xFF
  03F3    00F4    LD	0x74,A
  03F4    306C    LDIA	0x6C
  03F5    243F    CALL	0x43F
  03F6    118A    CLRB	0xA,3
  03F7    0000    NOP
  03F8    0000    NOP
  03F9    0000    NOP
  03FA    0000    NOP
  03FB    0000    NOP
  03FC    0000    NOP
400:              	nop;
401:              	  tm1650cmd(0X6E,0xFF);//圆圈后面8个灯
  03FD    30FF    LDIA	0xFF
  03FE    00F4    LD	0x74,A
  03FF    306E    LDIA	0x6E
  0400    2C3F    JP	0x43F
402:              	//DelayS(2);
403:                  //tm1650cmd(0X48,0x00); 
404:              }
405:              
406:              void refreshTM1650()
407:              {
408:              	if(showFlag)
  0401    0864    LD	A,0x64
  0402    1903    SZB	0x3,2
  0403    2C3C    JP	0x43C
409:              	{
410:              		tm1650cmd(0X48,0x11);
  0404    3011    LDIA	0x11
  0405    00F4    LD	0x74,A
  0406    3048    LDIA	0x48
  0407    243F    CALL	0x43F
  0408    118A    CLRB	0xA,3
  0409    0000    NOP
  040A    0000    NOP
  040B    0000    NOP
  040C    0000    NOP
  040D    0000    NOP
  040E    0000    NOP
411:              		nop;
412:              		tm1650cmd(0X68,showLed2);
  040F    1283    CLRB	0x3,5
  0410    1303    CLRB	0x3,6
  0411    0860    LD	A,0x60
  0412    00F4    LD	0x74,A
  0413    3068    LDIA	0x68
  0414    243F    CALL	0x43F
  0415    118A    CLRB	0xA,3
  0416    0000    NOP
  0417    0000    NOP
  0418    0000    NOP
  0419    0000    NOP
  041A    0000    NOP
  041B    0000    NOP
413:              		nop;
414:              		tm1650cmd(0X6A,showShiWei);
  041C    1283    CLRB	0x3,5
  041D    1303    CLRB	0x3,6
  041E    0863    LD	A,0x63
  041F    00F4    LD	0x74,A
  0420    306A    LDIA	0x6A
  0421    243F    CALL	0x43F
  0422    118A    CLRB	0xA,3
  0423    0000    NOP
  0424    0000    NOP
  0425    0000    NOP
  0426    0000    NOP
  0427    0000    NOP
  0428    0000    NOP
415:              		nop;
416:              		tm1650cmd(0X6C,showGeWei);
  0429    1283    CLRB	0x3,5
  042A    1303    CLRB	0x3,6
  042B    0862    LD	A,0x62
  042C    00F4    LD	0x74,A
  042D    306C    LDIA	0x6C
  042E    243F    CALL	0x43F
  042F    118A    CLRB	0xA,3
  0430    0000    NOP
  0431    0000    NOP
  0432    0000    NOP
  0433    0000    NOP
  0434    0000    NOP
  0435    0000    NOP
417:              		nop;
418:              		tm1650cmd(0X6E,showLed1);
  0436    1283    CLRB	0x3,5
  0437    1303    CLRB	0x3,6
  0438    0861    LD	A,0x61
  0439    00F4    LD	0x74,A
  043A    306E    LDIA	0x6E
  043B    2C3F    JP	0x43F
419:              	}
  043C    3048    LDIA	0x48
420:              	else
421:              	{
422:              		tm1650cmd(0X48,0x00); 
  043D    01F4    CLR	0x74
  043E    2C3F    JP	0x43F
423:              	}
424:              }
425:              
426:              
427:              void setZeroStep()
428:              {
429:              	if(zeroStep == 0)
  062C    087A    LD	A,0x7A
  062D    1D03    SNZB	0x3,2
  062E    2E32    JP	0x632
430:              	{
431:              		showLed1 = 0x00;
  062F    01E1    CLR	0x61
432:              		showLed2 = 0x00;
  0630    01E0    CLR	0x60
433:              	}
  0631    0008    RET
434:              	else if(zeroStep == 1)
  0632    0B7A    SZDECA	0x7A
  0633    2E3E    JP	0x63E
435:              	{
436:              		showLed1 = 0xE1;
  0634    30E1    LDIA	0xE1
  0635    2E3B    JP	0x63B
437:              		showLed2 = 0x00;
  063C    01E0    CLR	0x60
438:              	}
  063D    0008    RET
439:              	else if(zeroStep == 2)
  063E    3002    LDIA	0x2
  063F    067A    XORA	0x7A
  0640    1903    SZB	0x3,2
  0641    2E36    JP	0x636
440:              	{
441:              		showLed1 = 0xE3;
  0636    30E3    LDIA	0xE3
  0637    2E3B    JP	0x63B
442:              		showLed2 = 0x00;
443:              	}
444:              	else if(zeroStep == 3)
  0642    3003    LDIA	0x3
  0643    067A    XORA	0x7A
  0644    1903    SZB	0x3,2
  0645    2E38    JP	0x638
445:              	{
446:              		showLed1 = 0xE7;
  0638    30E7    LDIA	0xE7
  0639    2E3B    JP	0x63B
447:              		showLed2 = 0x00;
448:              	}
449:              	else if(zeroStep == 4)
  0646    3004    LDIA	0x4
  0647    067A    XORA	0x7A
  0648    1903    SZB	0x3,2
  0649    2E3A    JP	0x63A
450:              	{
451:              		showLed1 = 0xFF;
  063A    30FF    LDIA	0xFF
  063B    00E1    LD	0x61,A
452:              		showLed2 = 0x00;
453:              	}
454:              	else if(zeroStep == 5)
  064A    3005    LDIA	0x5
  064B    067A    XORA	0x7A
  064C    1D03    SNZB	0x3,2
  064D    2E53    JP	0x653
455:              	{
456:              		showLed1 = 0xFF;
  064E    30FF    LDIA	0xFF
  064F    00E1    LD	0x61,A
457:              		showLed2 = 0x01;
  0650    01E0    CLR	0x60
  0651    0AE0    INCR	0x60
458:              	}
  0652    0008    RET
459:              	else if(zeroStep == 6)
  0653    3006    LDIA	0x6
  0654    067A    XORA	0x7A
  0655    1D03    SNZB	0x3,2
  0656    2E5C    JP	0x65C
460:              	{
461:              		showLed1 = 0xFF;
  0657    30FF    LDIA	0xFF
  0658    00E1    LD	0x61,A
462:              		showLed2 = 0x03;
  0659    3003    LDIA	0x3
  065A    00E0    LD	0x60,A
463:              	}
  065B    0008    RET
464:              	else if(zeroStep == 7)
  065C    3007    LDIA	0x7
  065D    067A    XORA	0x7A
  065E    1D03    SNZB	0x3,2
  065F    2E65    JP	0x665
465:              	{
466:              		showLed1 = 0xFF;
  0660    30FF    LDIA	0xFF
  0661    00E1    LD	0x61,A
467:              		showLed2 = 0x07;
  0662    3007    LDIA	0x7
  0663    00E0    LD	0x60,A
468:              	}
  0664    0008    RET
469:              	else if(zeroStep == 8)
  0665    3008    LDIA	0x8
  0666    067A    XORA	0x7A
  0667    1D03    SNZB	0x3,2
  0668    2E6E    JP	0x66E
470:              	{
471:              		showLed1 = 0xFF;
  0669    30FF    LDIA	0xFF
  066A    00E1    LD	0x61,A
472:              		showLed2 = 0x0F;
  066B    300F    LDIA	0xF
  066C    00E0    LD	0x60,A
473:              	}
  066D    0008    RET
474:              	else if(zeroStep == 9)
  066E    3009    LDIA	0x9
  066F    067A    XORA	0x7A
  0670    1D03    SNZB	0x3,2
  0671    2E77    JP	0x677
475:              	{
476:              		showLed1 = 0xFF;
  0672    30FF    LDIA	0xFF
  0673    00E1    LD	0x61,A
477:              		showLed2 = 0x2F;
  0674    302F    LDIA	0x2F
  0675    00E0    LD	0x60,A
478:              	}
  0676    0008    RET
479:              	else if(zeroStep == 10)
  0677    300A    LDIA	0xA
  0678    067A    XORA	0x7A
  0679    1D03    SNZB	0x3,2
  067A    2E80    JP	0x680
480:              	{
481:              		showLed1 = 0xFF;
  067B    30FF    LDIA	0xFF
  067C    00E1    LD	0x61,A
482:              		showLed2 = 0x6F;
  067D    306F    LDIA	0x6F
  067E    00E0    LD	0x60,A
483:              	}
  067F    0008    RET
484:              	else if(zeroStep == 11)
  0680    300B    LDIA	0xB
  0681    067A    XORA	0x7A
  0682    1D03    SNZB	0x3,2
  0683    2E89    JP	0x689
485:              	{
486:              		showLed1 = 0xFF;
  0684    30FF    LDIA	0xFF
  0685    00E1    LD	0x61,A
487:              		showLed2 = 0xEF;
  0686    30EF    LDIA	0xEF
  0687    00E0    LD	0x60,A
488:              	}
  0688    0008    RET
489:              	else if(zeroStep == 12)
  0689    300C    LDIA	0xC
  068A    067A    XORA	0x7A
  068B    1D03    SNZB	0x3,2
  068C    0008    RET
  068D    2E84    JP	0x684
490:              	{
491:              		showLed1 = 0xFF;
492:              		showLed2 = 0xEF;
493:              	}
494:              }
495:              
496:              void showCtr()
497:              {
498:              	if(workStep > 0)
  0547    087B    LD	A,0x7B
  0548    1903    SZB	0x3,2
  0549    2D64    JP	0x564
  054A    30FF    LDIA	0xFF
499:              	{
500:              		showFlag = 1;
  054B    01E4    CLR	0x64
  054C    0AE4    INCR	0x64
501:              		sleepTime = 0;
  054D    01D4    CLR	0x54
502:              		showLed1 = 0xFF;
  054E    00E1    LD	0x61,A
503:              		showLed2 = 0xFF;
  054F    00E0    LD	0x60,A
504:              		showShiWei = numArray[workStep / 10];
  0550    300A    LDIA	0xA
  0551    00F2    LD	0x72,A
  0552    087B    LD	A,0x7B
  0553    25AB    CALL	0x5AB
  0554    3E01    ADDIA	0x1
  0555    0084    LD	0x4,A
  0556    158A    SETB	0xA,3
  0557    2000    CALL	0x0
  0558    118A    CLRB	0xA,3
  0559    00E3    LD	0x63,A
505:              		showGeWei = numArray[workStep % 10];
  055A    300A    LDIA	0xA
  055B    00F2    LD	0x72,A
  055C    087B    LD	A,0x7B
  055D    25C6    CALL	0x5C6
  055E    3E01    ADDIA	0x1
  055F    0084    LD	0x4,A
  0560    158A    SETB	0xA,3
  0561    2000    CALL	0x0
  0562    00E2    LD	0x62,A
506:              	}
  0563    0008    RET
507:              	else if(ledLightTime > 0)
  0564    0843    LD	A,0x43
  0565    0444    ORA	0x44
  0566    1903    SZB	0x3,2
  0567    2D80    JP	0x580
  0568    300A    LDIA	0xA
508:              	{
509:              		showFlag = 1;
  0569    01E4    CLR	0x64
  056A    0AE4    INCR	0x64
510:              		sleepTime = 0;
  056B    01D4    CLR	0x54
511:              		showShiWei = numArray[preBatValue/10];
  056C    00F2    LD	0x72,A
  056D    0879    LD	A,0x79
  056E    25AB    CALL	0x5AB
  056F    3E01    ADDIA	0x1
  0570    0084    LD	0x4,A
  0571    158A    SETB	0xA,3
  0572    2000    CALL	0x0
  0573    118A    CLRB	0xA,3
512:              		showGeWei = numArray[preBatValue%10];
  0574    268E    CALL	0x68E
  0575    118A    CLRB	0xA,3
  0576    25C6    CALL	0x5C6
  0577    3E01    ADDIA	0x1
  0578    0084    LD	0x4,A
  0579    158A    SETB	0xA,3
  057A    2000    CALL	0x0
  057B    00E2    LD	0x62,A
513:              		showLed1 = 0xFF;
  057C    30FF    LDIA	0xFF
  057D    00E1    LD	0x61,A
514:              		showLed2 = 0xFF;
  057E    00E0    LD	0x60,A
515:              	}
  057F    0008    RET
516:              	else if(chrgFlag)
  0580    085D    LD	A,0x5D
  0581    1903    SZB	0x3,2
  0582    2D9A    JP	0x59A
  0583    300A    LDIA	0xA
517:              	{	
518:              		showFlag = 1;
  0584    01E4    CLR	0x64
  0585    0AE4    INCR	0x64
519:              		sleepTime = 0;
  0586    01D4    CLR	0x54
520:              		showLed1 = 0x00;
  0587    01E1    CLR	0x61
521:              		showLed2 = 0x00;
  0588    01E0    CLR	0x60
522:              		showShiWei = numArray[preBatValue/10];
  0589    00F2    LD	0x72,A
  058A    0879    LD	A,0x79
  058B    25AB    CALL	0x5AB
  058C    3E01    ADDIA	0x1
  058D    0084    LD	0x4,A
  058E    158A    SETB	0xA,3
  058F    2000    CALL	0x0
  0590    118A    CLRB	0xA,3
523:              		showGeWei = numArray[preBatValue%10];
  0591    268E    CALL	0x68E
  0592    118A    CLRB	0xA,3
  0593    25C6    CALL	0x5C6
  0594    3E01    ADDIA	0x1
  0595    0084    LD	0x4,A
  0596    158A    SETB	0xA,3
  0597    2000    CALL	0x0
  0598    00E2    LD	0x62,A
524:              	}
  0599    0008    RET
525:              	else if(zeroStep > 0)
  059A    087A    LD	A,0x7A
  059B    1903    SZB	0x3,2
  059C    2DA3    JP	0x5A3
526:              	{
527:              		showFlag = 1;
  059D    01E4    CLR	0x64
  059E    0AE4    INCR	0x64
528:              		sleepTime = 0;
  059F    01D4    CLR	0x54
529:              		showShiWei = showGeWei = 0;
  05A0    01E2    CLR	0x62
  05A1    01E3    CLR	0x63
530:              		setZeroStep();
  05A2    2E2C    JP	0x62C
531:              	}
  05A3    30C9    LDIA	0xC9
532:              	else
533:              	{
534:              		showFlag = 0;
  05A4    01E4    CLR	0x64
535:              		if(++sleepTime > 200)
  05A5    0AD4    INCR	0x54
  05A6    0254    SUBA	0x54
  05A7    1C03    SNZB	0x3,0
  05A8    0008    RET
536:              		{
537:              			sleepTime = 0;
  05A9    01D4    CLR	0x54
538:              			gotoSleep();
  05AA    2DE2    JP	0x5E2
539:              		}
540:              	}
541:              }
542:              
543:              void workCtr()
544:              {
545:              	if(workStep > 0)
  0771    087B    LD	A,0x7B
  0772    1903    SZB	0x3,2
  0773    2F86    JP	0x786
546:              	{
547:              		PWMIOS0 = 0x01;
  0774    3001    LDIA	0x1
  0775    1683    SETB	0x3,5
  0776    1703    SETB	0x3,6
  0777    008C    LD	0xC,A
548:              		PWMTH = 0x00;
  0778    1283    CLRB	0x3,5
  0779    1303    CLRB	0x3,6
  077A    0196    CLR	0x16
549:              		PWMTL = 100;
  077B    3064    LDIA	0x64
  077C    0095    LD	0x15,A
550:              		PWMD01H = 0x00;
  077D    019C    CLR	0x1C
551:              		PWMD0L = 69 + workStep;
  077E    087B    LD	A,0x7B
  077F    3E45    ADDIA	0x45
  0780    0097    LD	0x17,A
552:              		PWMCON1 = 0x00;
  0781    0194    CLR	0x14
553:              		PWMCON2 = 0x00;
  0782    019D    CLR	0x1D
554:              		PWMCON0 = 0x41;
  0783    3041    LDIA	0x41
  0784    0093    LD	0x13,A
555:              	}
  0785    0008    RET
556:              	else if(chrgFlag && chrgFullFlag == 0 && chrgLockFlag == 0)
  0786    1283    CLRB	0x3,5
  0787    085D    LD	A,0x5D
  0788    1903    SZB	0x3,2
  0789    2FD7    JP	0x7D7
  078A    085A    LD	A,0x5A
  078B    1D03    SNZB	0x3,2
  078C    2FD7    JP	0x7D7
  078D    0855    LD	A,0x55
  078E    1D03    SNZB	0x3,2
  078F    2FD7    JP	0x7D7
557:              	{
558:              		if(chrgResult < 70 && batResult <= 1555)
  0790    3000    LDIA	0x0
  0791    0240    SUBA	0x40
  0792    3046    LDIA	0x46
  0793    1903    SZB	0x3,2
  0794    023F    SUBA	0x3F
  0795    1803    SZB	0x3,0
  0796    2FAA    JP	0x7AA
  0797    3006    LDIA	0x6
  0798    0242    SUBA	0x42
  0799    3014    LDIA	0x14
  079A    1903    SZB	0x3,2
  079B    0241    SUBA	0x41
  079C    1803    SZB	0x3,0
  079D    2FAA    JP	0x7AA
559:              		{
560:              			if(++addTime > 10 && chrgDuty < 35)
  079E    300B    LDIA	0xB
  079F    0AD8    INCR	0x58
  07A0    0258    SUBA	0x58
  07A1    1C03    SNZB	0x3,0
  07A2    2FAB    JP	0x7AB
  07A3    3023    LDIA	0x23
  07A4    0259    SUBA	0x59
  07A5    1803    SZB	0x3,0
  07A6    2FAB    JP	0x7AB
561:              			{
562:              				addTime = 0;
  07A7    01D8    CLR	0x58
563:              				chrgDuty++;
  07A8    0AD9    INCR	0x59
  07A9    2FAB    JP	0x7AB
564:              			}
565:              		}
566:              		else
567:              		{
568:              			addTime = 0;
  07AA    01D8    CLR	0x58
569:              		}
570:              		if(chrgResult > 80 || batResult > 1555)
  07AB    3000    LDIA	0x0
  07AC    0240    SUBA	0x40
  07AD    3051    LDIA	0x51
  07AE    1903    SZB	0x3,2
  07AF    023F    SUBA	0x3F
  07B0    1803    SZB	0x3,0
  07B1    2FB9    JP	0x7B9
  07B2    3006    LDIA	0x6
  07B3    0242    SUBA	0x42
  07B4    3014    LDIA	0x14
  07B5    1903    SZB	0x3,2
  07B6    0241    SUBA	0x41
  07B7    1C03    SNZB	0x3,0
  07B8    2FC5    JP	0x7C5
571:              		{
572:              			if(++subTime > 10 && chrgDuty > 10)
  07B9    300B    LDIA	0xB
  07BA    0AD7    INCR	0x57
  07BB    0257    SUBA	0x57
  07BC    1C03    SNZB	0x3,0
  07BD    2FC6    JP	0x7C6
  07BE    300B    LDIA	0xB
  07BF    0259    SUBA	0x59
  07C0    1C03    SNZB	0x3,0
  07C1    2FC6    JP	0x7C6
573:              			{
574:              				subTime = 0;
  07C2    01D7    CLR	0x57
575:              				chrgDuty--;
  07C3    03D9    DECR	0x59
  07C4    2FC6    JP	0x7C6
576:              			}
577:              		}
578:              		else
579:              		{
580:              			subTime = 0;
  07C5    01D7    CLR	0x57
581:              		}
582:              		PWMIOS1 = 0x20;
  07C6    3020    LDIA	0x20
  07C7    1683    SETB	0x3,5
  07C8    1703    SETB	0x3,6
  07C9    008D    LD	0xD,A
583:              		PWMTH = 0x00;
  07CA    1283    CLRB	0x3,5
  07CB    1303    CLRB	0x3,6
  07CC    0196    CLR	0x16
584:              		PWMTL = 70;
  07CD    3046    LDIA	0x46
  07CE    0095    LD	0x15,A
585:              		PWMD23H = 0x00;
  07CF    018E    CLR	0xE
586:              		PWMD3L = chrgDuty;
  07D0    0859    LD	A,0x59
  07D1    009A    LD	0x1A,A
587:              		PWMCON1 = 0x00;
  07D2    0194    CLR	0x14
588:              		PWMCON2 = 0x00;
  07D3    019D    CLR	0x1D
589:              		PWMCON0 = 0x08;
  07D4    3008    LDIA	0x8
  07D5    0093    LD	0x13,A
590:              	}
  07D6    0008    RET
591:              	else
592:              	{
593:              		PWMCON0 = 0x00;				//关闭PWM输出
  07D7    0193    CLR	0x13
  07D8    0008    RET
594:              	}
595:              }
596:              
597:              void chrgCtr()
598:              {
599:              	if(0x20 & PORTA)
  0693    1E85    SNZB	0x5,5
  0694    2EB5    JP	0x6B5
600:              	{
601:              		checkChrgAD();
  0695    26BC    CALL	0x6BC
  0696    118A    CLRB	0xA,3
  0697    3006    LDIA	0x6
602:              		chrgFlag = 1;
  0698    01DD    CLR	0x5D
  0699    0ADD    INCR	0x5D
603:              		workStep = 0;
  069A    01FB    CLR	0x7B
604:              		ledLightTime = 0;
  069B    01C3    CLR	0x43
  069C    01C4    CLR	0x44
605:              		if(batResult > 1545)
  069D    0242    SUBA	0x42
  069E    300A    LDIA	0xA
  069F    1903    SZB	0x3,2
  06A0    0241    SUBA	0x41
  06A1    1C03    SNZB	0x3,0
  06A2    2EB2    JP	0x6B2
606:              		{
607:              			if(++chrgFullTime > 2500)
  06A3    0ABD    INCR	0x3D
  06A4    1903    SZB	0x3,2
  06A5    0ABE    INCR	0x3E
  06A6    3009    LDIA	0x9
  06A7    023E    SUBA	0x3E
  06A8    30C5    LDIA	0xC5
  06A9    1903    SZB	0x3,2
  06AA    023D    SUBA	0x3D
  06AB    1C03    SNZB	0x3,0
  06AC    0008    RET
608:              			{
609:              				chrgFullTime = 0;
  06AD    01BD    CLR	0x3D
  06AE    01BE    CLR	0x3E
610:              				chrgFullFlag = 1;
  06AF    01DA    CLR	0x5A
  06B0    0ADA    INCR	0x5A
  06B1    0008    RET
611:              			}
612:              		}
613:              		else
614:              		{
615:              			chrgFullTime = 0;
  06B2    01BD    CLR	0x3D
  06B3    01BE    CLR	0x3E
  06B4    0008    RET
616:              		}
617:              	}
618:              	else
619:              	{
620:              		chrgFlag = 0;
  06B5    01DD    CLR	0x5D
621:              		chrgFullFlag = 0;
  06B6    01DA    CLR	0x5A
622:              		chrgFullTime = 0;
  06B7    01BD    CLR	0x3D
  06B8    01BE    CLR	0x3E
623:              		chrgDuty = 0;
  06B9    01D9    CLR	0x59
624:              		chrgLockFlag = 0;
  06BA    01D5    CLR	0x55
  06BB    0008    RET
625:              	}
626:              }
627:              
628:              void task1()
629:              {
630:              	if(firstTime > 0)
  0378    084B    LD	A,0x4B
  0379    044C    ORA	0x4C
  037A    1903    SZB	0x3,2
  037B    2B87    JP	0x387
631:              	{
632:              		firstTime--;
  037C    3001    LDIA	0x1
  037D    02CB    SUBR	0x4B
  037E    1C03    SNZB	0x3,0
  037F    03CC    DECR	0x4C
633:              		if(preBatValue < batValue)
  0380    085C    LD	A,0x5C
  0381    0279    SUBA	0x79
  0382    1803    SZB	0x3,0
  0383    2B89    JP	0x389
634:              		{
635:              			preBatValue = batValue;
  0384    085C    LD	A,0x5C
  0385    00F9    LD	0x79,A
  0386    2B89    JP	0x389
636:              		}
637:              	}
638:              	else
639:              	{
640:              		refreshTM1650();
  0387    2401    CALL	0x401
  0388    118A    CLRB	0xA,3
641:              	}
642:              	if(++count1s >= 250)
  0389    30FA    LDIA	0xFA
  038A    0ADE    INCR	0x5E
  038B    025E    SUBA	0x5E
  038C    1C03    SNZB	0x3,0
  038D    0008    RET
643:              	{
644:              		count1s = 0;
  038E    01DE    CLR	0x5E
645:              		if(workStep > 0)
  038F    087B    LD	A,0x7B
  0390    1903    SZB	0x3,2
  0391    2BA1    JP	0x3A1
646:              		{
647:              			if(++count900s > 900)
  0392    0ABB    INCR	0x3B
  0393    1903    SZB	0x3,2
  0394    0ABC    INCR	0x3C
  0395    3003    LDIA	0x3
  0396    023C    SUBA	0x3C
  0397    3085    LDIA	0x85
  0398    1903    SZB	0x3,2
  0399    023B    SUBA	0x3B
  039A    1C03    SNZB	0x3,0
  039B    2BA3    JP	0x3A3
648:              			{
649:              				count900s = 0;
  039C    01BB    CLR	0x3B
  039D    01BC    CLR	0x3C
650:              				workStep = 0;
651:              				zeroStep = 0;
652:              				ledLightTime = 0;
  039E    2542    CALL	0x542
  039F    118A    CLRB	0xA,3
  03A0    2BA3    JP	0x3A3
653:              			}
654:              		}
655:              		else
656:              		{
657:              			count900s = 0;
  03A1    01BB    CLR	0x3B
  03A2    01BC    CLR	0x3C
658:              		}
659:              		if(ledLightTime > 0)
  03A3    0843    LD	A,0x43
  03A4    0444    ORA	0x44
  03A5    1903    SZB	0x3,2
  03A6    2BAD    JP	0x3AD
660:              		{
661:              			ledLightTime--;
  03A7    3001    LDIA	0x1
  03A8    02C3    SUBR	0x43
  03A9    3000    LDIA	0x0
  03AA    1C03    SNZB	0x3,0
  03AB    03C4    DECR	0x44
  03AC    02C4    SUBR	0x44
662:              		}
663:              		if(chrgFlag)
  03AD    085D    LD	A,0x5D
  03AE    1903    SZB	0x3,2
  03AF    2BC2    JP	0x3C2
664:              		{
665:              			if(preBatValue < 99 && preBatValue < batValue)
  03B0    3063    LDIA	0x63
  03B1    0279    SUBA	0x79
  03B2    1803    SZB	0x3,0
  03B3    2BC0    JP	0x3C0
  03B4    085C    LD	A,0x5C
  03B5    0279    SUBA	0x79
  03B6    1803    SZB	0x3,0
  03B7    2BC0    JP	0x3C0
666:              			{
667:              				if(++count15s >= 15)
  03B8    300F    LDIA	0xF
  03B9    0AD6    INCR	0x56
  03BA    0256    SUBA	0x56
  03BB    1C03    SNZB	0x3,0
  03BC    0008    RET
668:              				{
669:              					count15s = 0;
  03BD    01D6    CLR	0x56
670:              					preBatValue++;
  03BE    0AF9    INCR	0x79
  03BF    0008    RET
671:              				}
672:              			}
673:              			else
674:              			{
675:              				count15s = 0;
  03C0    01D6    CLR	0x56
  03C1    0008    RET
676:              			}
677:              		}
678:              		else
679:              		{
680:              			if(preBatValue > 0 && preBatValue > batValue)
  03C2    0879    LD	A,0x79
  03C3    1903    SZB	0x3,2
  03C4    2BC0    JP	0x3C0
  03C5    0879    LD	A,0x79
  03C6    025C    SUBA	0x5C
  03C7    1803    SZB	0x3,0
  03C8    2BC0    JP	0x3C0
681:              			{
682:              				if(++count15s >= 15)
  03C9    300F    LDIA	0xF
  03CA    0AD6    INCR	0x56
  03CB    0256    SUBA	0x56
  03CC    1C03    SNZB	0x3,0
  03CD    0008    RET
683:              				{
684:              					count15s = 0;
  03CE    01D6    CLR	0x56
685:              					preBatValue--;
  03CF    03F9    DECR	0x79
  03D0    0008    RET
686:              				}
687:              			}
688:              			else
689:              			{
690:              				count15s = 0;
691:              			}
692:              		}
693:              	}
694:              
695:              }
696:              
697:              void gotoSleep()
698:              {
699:              	INTCON = 0;
  05E2    018B    CLR	0xB
700:              	PIE1 = 0;		
  05E3    018D    CLR	0xD
701:              	T2CON = 0;		//关闭定时器
  05E4    0192    CLR	0x12
702:              	OPTION_REG = 0;
  05E5    1683    SETB	0x3,5
  05E6    0181    CLR	0x1
703:              	PORTA = 0B00000000;
  05E7    1283    CLRB	0x3,5
  05E8    0185    CLR	0x5
704:              	PORTB = 0B10000000;
  05E9    3080    LDIA	0x80
  05EA    0086    LD	0x6,A
705:              	PORTC = 0x01;
  05EB    3001    LDIA	0x1
  05EC    1683    SETB	0x3,5
  05ED    1703    SETB	0x3,6
  05EE    0085    LD	0x5,A
706:              	ADCON0 = 0;					//关闭所有模块
  05EF    1303    CLRB	0x3,6
  05F0    019D    CLR	0x1D
707:              	PWMCON0 = 0;
  05F1    1283    CLRB	0x3,5
  05F2    0193    CLR	0x13
708:              	EECON1 = 0;					//清此寄存器,有好处		
  05F3    1683    SETB	0x3,5
  05F4    018C    CLR	0xC
709:                 	IOCB = 0B00000000;			
  05F5    1283    CLRB	0x3,5
  05F6    0189    CLR	0x9
710:              	RBIE = 0;					//允许PORTB电平变化中断
  05F7    118B    CLRB	0xB,3
711:              	IOCA = 0x3C;				//允许RA5 RA4 RA3 RA2
  05F8    303C    LDIA	0x3C
  05F9    1683    SETB	0x3,5
  05FA    1703    SETB	0x3,6
  05FB    0088    LD	0x8,A
712:              	RACIE = 1;
  05FC    1283    CLRB	0x3,5
  05FD    1488    SETB	0x8,1
713:              	GIE = 0;					//GIE = 0时，唤醒后执行SLEEP后程序;GIE = 1时，唤醒后跳至中断服务
  05FE    138B    CLRB	0xB,7
714:              	OSCCON = 0X70;				//配置振荡为16M,关闭WDT
  05FF    3070    LDIA	0x70
  0600    1683    SETB	0x3,5
  0601    1303    CLRB	0x3,6
  0602    0088    LD	0x8,A
715:              	PORTA;						//读PORTB值并锁存			
  0603    1283    CLRB	0x3,5
  0604    0805    LD	A,0x5
  0605    0064    CLRWDT
  0606    0000    NOP
716:              	asm("clrwdt");
717:              	asm("STOP");				//进入休眠模式
718:              	asm("nop");
719:              	Init_System();
  0607    2E08    JP	0x608
720:              }
721:              
722:              /***********************************************************
723:              主循环
724:              ***********************************************************/
725:              void main() {
726:              	Init_System();
  07D9    118A    CLRB	0xA,3
  07DA    2608    CALL	0x608
  07DB    118A    CLRB	0xA,3
727:              	initTM1650();
  07DC    118A    CLRB	0xA,3
  07DD    23D1    CALL	0x3D1
  07DE    118A    CLRB	0xA,3
728:              	firstTime = 500;
  07DF    30F4    LDIA	0xF4
  07E0    00CB    LD	0x4B,A
  07E1    3001    LDIA	0x1
  07E2    00CC    LD	0x4C,A
729:              	while (1) {
730:              		if (B_MainLoop) {
  07E3    1F78    SNZB	0x78,6
  07E4    2FE3    JP	0x7E3
731:              			B_MainLoop = 0;
  07E5    1378    CLRB	0x78,6
  07E6    0064    CLRWDT
732:              			CLRWDT();
733:              
734:              			CheckTouchKey();
  07E7    118A    CLRB	0xA,3
  07E8    2020    CALL	0x20
  07E9    118A    CLRB	0xA,3
735:              
736:              			Refurbish_Sfr();
  07EA    158A    SETB	0xA,3
  07EB    27D6    CALL	0x7D6
  07EC    118A    CLRB	0xA,3
737:              			KeyServer();
  07ED    118A    CLRB	0xA,3
  07EE    22D9    CALL	0x2D9
  07EF    118A    CLRB	0xA,3
738:              			showCtr();
  07F0    118A    CLRB	0xA,3
  07F1    2547    CALL	0x547
  07F2    118A    CLRB	0xA,3
739:              			workCtr();
  07F3    118A    CLRB	0xA,3
  07F4    2771    CALL	0x771
  07F5    118A    CLRB	0xA,3
740:              			checkBat();
  07F6    118A    CLRB	0xA,3
  07F7    26C5    CALL	0x6C5
  07F8    118A    CLRB	0xA,3
741:              			chrgCtr();
  07F9    118A    CLRB	0xA,3
  07FA    2693    CALL	0x693
  07FB    118A    CLRB	0xA,3
742:              			task1();
  07FC    118A    CLRB	0xA,3
  07FD    2378    CALL	0x378
  07FE    118A    CLRB	0xA,3
  07FF    2FE3    JP	0x7E3
743:              		}
744:              	}
745:              }
---- library_code ------------------------------------------------------------------
  0020    1A78    SZB	0x78,4
  0021    282D    JP	0x2D
  0022    204A    CALL	0x4A
  0023    118A    CLRB	0xA,3
  0024    3008    LDIA	0x8
  0025    1283    CLRB	0x3,5
  0026    0AD3    INCR	0x53
  0027    0253    SUBA	0x53
  0028    1C03    SNZB	0x3,0
  0029    2849    JP	0x49
  002A    01D3    CLR	0x53
  002B    1678    SETB	0x78,4
  002C    2849    JP	0x49
  002D    19F8    SZB	0x78,3
  002E    2843    JP	0x43
  002F    2120    CALL	0x120
  0030    118A    CLRB	0xA,3
  0031    2242    CALL	0x242
  0032    118A    CLRB	0xA,3
  0033    15F8    SETB	0x78,3
  0034    18F8    SZB	0x78,1
  0035    283A    JP	0x3A
  0036    3002    LDIA	0x2
  0037    0253    SUBA	0x53
  0038    1C03    SNZB	0x3,0
  0039    283F    JP	0x3F
  003A    222F    CALL	0x22F
  003B    118A    CLRB	0xA,3
  003C    10F8    CLRB	0x78,1
  003D    1278    CLRB	0x78,4
  003E    11F8    CLRB	0x78,3
  003F    1283    CLRB	0x3,5
  0040    1303    CLRB	0x3,6
  0041    01D3    CLR	0x53
  0042    2849    JP	0x49
  0043    20AC    CALL	0xAC
  0044    118A    CLRB	0xA,3
  0045    209D    CALL	0x9D
  0046    118A    CLRB	0xA,3
  0047    1278    CLRB	0x78,4
  0048    11F8    CLRB	0x78,3
  0049    2A6F    JP	0x26F
  004A    01F5    CLR	0x75
  004B    1683    SETB	0x3,5
  004C    1303    CLRB	0x3,6
  004D    0192    CLR	0x12
  004E    0193    CLR	0x13
  004F    3001    LDIA	0x1
  0050    0097    LD	0x17,A
  0051    1306    CLRB	0x6,6
  0052    1283    CLRB	0x3,5
  0053    1306    CLRB	0x6,6
  0054    0000    NOP
  0055    0000    NOP
  0056    0000    NOP
  0057    0000    NOP
  0058    0000    NOP
  0059    0000    NOP
  005A    0000    NOP
  005B    0000    NOP
  005C    1683    SETB	0x3,5
  005D    1303    CLRB	0x3,6
  005E    1706    SETB	0x6,6
  005F    0875    LD	A,0x75
  0060    3E1A    ADDIA	0x1A
  0061    0084    LD	0x4,A
  0062    158A    SETB	0xA,3
  0063    2000    CALL	0x0
  0064    118A    CLRB	0xA,3
  0065    0092    LD	0x12,A
  0066    0875    LD	A,0x75
  0067    3E1D    ADDIA	0x1D
  0068    0084    LD	0x4,A
  0069    158A    SETB	0xA,3
  006A    2000    CALL	0x0
  006B    118A    CLRB	0xA,3
  006C    0093    LD	0x13,A
  006D    0000    NOP
  006E    0000    NOP
  006F    0000    NOP
  0070    0000    NOP
  0071    1683    SETB	0x3,5
  0072    1303    CLRB	0x3,6
  0073    1412    SETB	0x12,0
  0074    30D0    LDIA	0xD0
  0075    00F3    LD	0x73,A
  0076    3007    LDIA	0x7
  0077    00F4    LD	0x74,A
  0078    1B92    SZB	0x12,7
  0079    2886    JP	0x86
  007A    3001    LDIA	0x1
  007B    02F3    SUBR	0x73
  007C    1C03    SNZB	0x3,0
  007D    03F4    DECR	0x74
  007E    0873    LD	A,0x73
  007F    0474    ORA	0x74
  0080    1D03    SNZB	0x3,2
  0081    2878    JP	0x78
  0082    30FF    LDIA	0xFF
  0083    1283    CLRB	0x3,5
  0084    00D3    LD	0x53,A
  0085    289D    JP	0x9D
  0086    1003    CLRB	0x3,0
  0087    0D75    RLCA	0x75
  0088    3E2C    ADDIA	0x2C
  0089    0084    LD	0x4,A
  008A    0814    LD	A,0x14
  008B    1383    CLRB	0x3,7
  008C    0780    ADDR	0x0
  008D    0F84    SZINCR	0x4
  008E    0800    LD	A,0x0
  008F    1803    SZB	0x3,0
  0090    0A00    INCA	0x0
  0091    00FF    LD	0x7F,A
  0092    0815    LD	A,0x15
  0093    077F    ADDA	0x7F
  0094    0080    LD	0x0,A
  0095    3003    LDIA	0x3
  0096    0384    DECR	0x4
  0097    0AF5    INCR	0x75
  0098    0275    SUBA	0x75
  0099    1C03    SNZB	0x3,0
  009A    284B    JP	0x4B
  009B    1078    CLRB	0x78,0
  009C    0008    RET
  009D    01F2    CLR	0x72
  009E    1003    CLRB	0x3,0
  009F    0D72    RLCA	0x72
  00A0    3E2C    ADDIA	0x2C
  00A1    0084    LD	0x4,A
  00A2    3003    LDIA	0x3
  00A3    1383    CLRB	0x3,7
  00A4    0180    CLR	0x0
  00A5    0A84    INCR	0x4
  00A6    0180    CLR	0x0
  00A7    0AF2    INCR	0x72
  00A8    0272    SUBA	0x72
  00A9    1803    SZB	0x3,0
  00AA    0008    RET
  00AB    289E    JP	0x9E
  00AC    1283    CLRB	0x3,5
  00AD    3004    LDIA	0x4
  00AE    1303    CLRB	0x3,6
  00AF    01EB    CLR	0x6B
  00B0    0AD1    INCR	0x51
  00B1    0251    SUBA	0x51
  00B2    1C03    SNZB	0x3,0
  00B3    0008    RET
  00B4    01D1    CLR	0x51
  00B5    1003    CLRB	0x3,0
  00B6    0D6B    RLCA	0x6B
  00B7    3E2C    ADDIA	0x2C
  00B8    0084    LD	0x4,A
  00B9    1383    CLRB	0x3,7
  00BA    0800    LD	A,0x0
  00BB    00E7    LD	0x67,A
  00BC    0A84    INCR	0x4
  00BD    0800    LD	A,0x0
  00BE    00E8    LD	0x68,A
  00BF    086B    LD	A,0x6B
  00C0    21FB    CALL	0x1FB
  00C1    118A    CLRB	0xA,3
  00C2    3A00    XORIA	0x0
  00C3    1003    CLRB	0x3,0
  00C4    1D03    SNZB	0x3,2
  00C5    28FA    JP	0xFA
  00C6    0D6B    RLCA	0x6B
  00C7    3EA6    ADDIA	0xA6
  00C8    0084    LD	0x4,A
  00C9    1383    CLRB	0x3,7
  00CA    2281    CALL	0x281
  00CB    118A    CLRB	0xA,3
  00CC    1903    SZB	0x3,2
  00CD    0269    SUBA	0x69
  00CE    1C03    SNZB	0x3,0
  00CF    28D6    JP	0xD6
  00D0    0F69    SZINCA	0x69
  00D1    28F9    JP	0xF9
  00D2    0A6A    INCA	0x6A
  00D3    1003    CLRB	0x3,0
  00D4    1D03    SNZB	0x3,2
  00D5    28FA    JP	0xFA
  00D6    0D6B    RLCA	0x6B
  00D7    3E26    ADDIA	0x26
  00D8    0084    LD	0x4,A
  00D9    2281    CALL	0x281
  00DA    118A    CLRB	0xA,3
  00DB    1903    SZB	0x3,2
  00DC    0269    SUBA	0x69
  00DD    1C03    SNZB	0x3,0
  00DE    28E5    JP	0xE5
  00DF    0F69    SZINCA	0x69
  00E0    28F9    JP	0xF9
  00E1    0A6A    INCA	0x6A
  00E2    1003    CLRB	0x3,0
  00E3    1D03    SNZB	0x3,2
  00E4    28FA    JP	0xFA
  00E5    0D6B    RLCA	0x6B
  00E6    3EA0    ADDIA	0xA0
  00E7    0084    LD	0x4,A
  00E8    2281    CALL	0x281
  00E9    118A    CLRB	0xA,3
  00EA    1903    SZB	0x3,2
  00EB    0269    SUBA	0x69
  00EC    1C03    SNZB	0x3,0
  00ED    28F4    JP	0xF4
  00EE    0F69    SZINCA	0x69
  00EF    28F9    JP	0xF9
  00F0    0A6A    INCA	0x6A
  00F1    1003    CLRB	0x3,0
  00F2    1D03    SNZB	0x3,2
  00F3    28FA    JP	0xFA
  00F4    0D6B    RLCA	0x6B
  00F5    3E20    ADDIA	0x20
  00F6    0084    LD	0x4,A
  00F7    22CE    CALL	0x2CE
  00F8    118A    CLRB	0xA,3
  00F9    1003    CLRB	0x3,0
  00FA    0D6B    RLCA	0x6B
  00FB    3E26    ADDIA	0x26
  00FC    0084    LD	0x4,A
  00FD    1383    CLRB	0x3,7
  00FE    22BA    CALL	0x2BA
  00FF    118A    CLRB	0xA,3
  0100    3EA0    ADDIA	0xA0
  0101    22AF    CALL	0x2AF
  0102    118A    CLRB	0xA,3
  0103    22BA    CALL	0x2BA
  0104    118A    CLRB	0xA,3
  0105    3E26    ADDIA	0x26
  0106    22AF    CALL	0x2AF
  0107    118A    CLRB	0xA,3
  0108    22CE    CALL	0x2CE
  0109    118A    CLRB	0xA,3
  010A    3003    LDIA	0x3
  010B    0AEB    INCR	0x6B
  010C    026B    SUBA	0x6B
  010D    1803    SZB	0x3,0
  010E    0008    RET
  010F    28B5    JP	0xB5
  0110    01F4    CLR	0x74
  0111    0874    LD	A,0x74
  0112    21FB    CALL	0x1FB
  0113    118A    CLRB	0xA,3
  0114    3A00    XORIA	0x0
  0115    1D03    SNZB	0x3,2
  0116    291A    JP	0x11A
  0117    0874    LD	A,0x74
  0118    220F    CALL	0x20F
  0119    118A    CLRB	0xA,3
  011A    3003    LDIA	0x3
  011B    0AF4    INCR	0x74
  011C    0274    SUBA	0x74
  011D    1803    SZB	0x3,0
  011E    0008    RET
  011F    2911    JP	0x111
  0120    1683    SETB	0x3,5
  0121    1303    CLRB	0x3,6
  0122    01B4    CLR	0x34
  0123    1283    CLRB	0x3,5
  0124    01B7    CLR	0x37
  0125    01B8    CLR	0x38
  0126    01D2    CLR	0x52
  0127    1683    SETB	0x3,5
  0128    0834    LD	A,0x34
  0129    3907    ANDIA	0x7
  012A    3E0F    ADDIA	0xF
  012B    0084    LD	0x4,A
  012C    158A    SETB	0xA,3
  012D    2000    CALL	0x0
  012E    118A    CLRB	0xA,3
  012F    00AE    LD	0x2E,A
  0130    1003    CLRB	0x3,0
  0131    0D34    RLCA	0x34
  0132    3E2C    ADDIA	0x2C
  0133    0084    LD	0x4,A
  0134    3003    LDIA	0x3
  0135    0A84    INCR	0x4
  0136    1003    CLRB	0x3,0
  0137    1383    CLRB	0x3,7
  0138    0C80    RRCR	0x0
  0139    0384    DECR	0x4
  013A    0C80    RRCR	0x0
  013B    3EFF    ADDIA	0xFF
  013C    1D03    SNZB	0x3,2
  013D    2935    JP	0x135
  013E    1003    CLRB	0x3,0
  013F    0D34    RLCA	0x34
  0140    3E2C    ADDIA	0x2C
  0141    0084    LD	0x4,A
  0142    0800    LD	A,0x0
  0143    00B2    LD	0x32,A
  0144    0A84    INCR	0x4
  0145    0800    LD	A,0x0
  0146    00B3    LD	0x33,A
  0147    0834    LD	A,0x34
  0148    3E17    ADDIA	0x17
  0149    0084    LD	0x4,A
  014A    158A    SETB	0xA,3
  014B    2000    CALL	0x0
  014C    118A    CLRB	0xA,3
  014D    00B1    LD	0x31,A
  014E    00AF    LD	0x2F,A
  014F    01B0    CLR	0x30
  0150    0832    LD	A,0x32
  0151    07AF    ADDR	0x2F
  0152    1803    SZB	0x3,0
  0153    0AB0    INCR	0x30
  0154    0833    LD	A,0x33
  0155    07B0    ADDR	0x30
  0156    0834    LD	A,0x34
  0157    21FB    CALL	0x1FB
  0158    118A    CLRB	0xA,3
  0159    3A00    XORIA	0x0
  015A    1D03    SNZB	0x3,2
  015B    29A7    JP	0x1A7
  015C    22C8    CALL	0x2C8
  015D    118A    CLRB	0xA,3
  015E    1383    CLRB	0x3,7
  015F    0800    LD	A,0x0
  0160    00AC    LD	0x2C,A
  0161    0A84    INCR	0x4
  0162    0800    LD	A,0x0
  0163    00AD    LD	0x2D,A
  0164    1003    CLRB	0x3,0
  0165    0D34    RLCA	0x34
  0166    3E20    ADDIA	0x20
  0167    22A6    CALL	0x2A6
  0168    118A    CLRB	0xA,3
  0169    0230    SUBA	0x30
  016A    1D03    SNZB	0x3,2
  016B    296E    JP	0x16E
  016C    22D4    CALL	0x2D4
  016D    118A    CLRB	0xA,3
  016E    1803    SZB	0x3,0
  016F    2981    JP	0x181
  0170    1003    CLRB	0x3,0
  0171    0D34    RLCA	0x34
  0172    3E20    ADDIA	0x20
  0173    22A6    CALL	0x2A6
  0174    118A    CLRB	0xA,3
  0175    0832    LD	A,0x32
  0176    1283    CLRB	0x3,5
  0177    0267    SUBA	0x67
  0178    1683    SETB	0x3,5
  0179    00B2    LD	0x32,A
  017A    0833    LD	A,0x33
  017B    1C03    SNZB	0x3,0
  017C    0A33    INCA	0x33
  017D    1283    CLRB	0x3,5
  017E    0268    SUBA	0x68
  017F    1683    SETB	0x3,5
  0180    29A5    JP	0x1A5
  0181    082D    LD	A,0x2D
  0182    0230    SUBA	0x30
  0183    1D03    SNZB	0x3,2
  0184    2987    JP	0x187
  0185    082C    LD	A,0x2C
  0186    022F    SUBA	0x2F
  0187    1803    SZB	0x3,0
  0188    29F3    JP	0x1F3
  0189    1003    CLRB	0x3,0
  018A    0D34    RLCA	0x34
  018B    3E26    ADDIA	0x26
  018C    22A6    CALL	0x2A6
  018D    118A    CLRB	0xA,3
  018E    0230    SUBA	0x30
  018F    1D03    SNZB	0x3,2
  0190    2993    JP	0x193
  0191    22D4    CALL	0x2D4
  0192    118A    CLRB	0xA,3
  0193    1803    SZB	0x3,0
  0194    29F3    JP	0x1F3
  0195    1003    CLRB	0x3,0
  0196    0D34    RLCA	0x34
  0197    3E20    ADDIA	0x20
  0198    0084    LD	0x4,A
  0199    082C    LD	A,0x2C
  019A    0080    LD	0x0,A
  019B    0A84    INCR	0x4
  019C    082D    LD	A,0x2D
  019D    0080    LD	0x0,A
  019E    0832    LD	A,0x32
  019F    022C    SUBA	0x2C
  01A0    00B2    LD	0x32,A
  01A1    0833    LD	A,0x33
  01A2    1C03    SNZB	0x3,0
  01A3    0A33    INCA	0x33
  01A4    022D    SUBA	0x2D
  01A5    00B3    LD	0x33,A
  01A6    29E9    JP	0x1E9
  01A7    1683    SETB	0x3,5
  01A8    1003    CLRB	0x3,0
  01A9    0D34    RLCA	0x34
  01AA    3E20    ADDIA	0x20
  01AB    0084    LD	0x4,A
  01AC    1383    CLRB	0x3,7
  01AD    0800    LD	A,0x0
  01AE    1283    CLRB	0x3,5
  01AF    00E7    LD	0x67,A
  01B0    0A84    INCR	0x4
  01B1    0800    LD	A,0x0
  01B2    00E8    LD	0x68,A
  01B3    0867    LD	A,0x67
  01B4    3E01    ADDIA	0x1
  01B5    00E9    LD	0x69,A
  01B6    0868    LD	A,0x68
  01B7    1803    SZB	0x3,0
  01B8    3E01    ADDIA	0x1
  01B9    00EA    LD	0x6A,A
  01BA    1683    SETB	0x3,5
  01BB    0830    LD	A,0x30
  01BC    1283    CLRB	0x3,5
  01BD    026A    SUBA	0x6A
  01BE    1D03    SNZB	0x3,2
  01BF    29C4    JP	0x1C4
  01C0    1683    SETB	0x3,5
  01C1    082F    LD	A,0x2F
  01C2    1283    CLRB	0x3,5
  01C3    0269    SUBA	0x69
  01C4    1C03    SNZB	0x3,0
  01C5    29F3    JP	0x1F3
  01C6    22C8    CALL	0x2C8
  01C7    118A    CLRB	0xA,3
  01C8    0800    LD	A,0x0
  01C9    1283    CLRB	0x3,5
  01CA    00E7    LD	0x67,A
  01CB    228F    CALL	0x28F
  01CC    118A    CLRB	0xA,3
  01CD    1C03    SNZB	0x3,0
  01CE    29DB    JP	0x1DB
  01CF    1683    SETB	0x3,5
  01D0    1003    CLRB	0x3,0
  01D1    0D34    RLCA	0x34
  01D2    3E26    ADDIA	0x26
  01D3    0084    LD	0x4,A
  01D4    0800    LD	A,0x0
  01D5    1283    CLRB	0x3,5
  01D6    00E7    LD	0x67,A
  01D7    228F    CALL	0x28F
  01D8    118A    CLRB	0xA,3
  01D9    1803    SZB	0x3,0
  01DA    29E8    JP	0x1E8
  01DB    1683    SETB	0x3,5
  01DC    0834    LD	A,0x34
  01DD    3E32    ADDIA	0x32
  01DE    0084    LD	0x4,A
  01DF    3009    LDIA	0x9
  01E0    0A80    INCR	0x0
  01E1    0200    SUBA	0x0
  01E2    1C03    SNZB	0x3,0
  01E3    29ED    JP	0x1ED
  01E4    0834    LD	A,0x34
  01E5    220F    CALL	0x20F
  01E6    118A    CLRB	0xA,3
  01E7    29F3    JP	0x1F3
  01E8    1683    SETB	0x3,5
  01E9    0834    LD	A,0x34
  01EA    3E32    ADDIA	0x32
  01EB    0084    LD	0x4,A
  01EC    0180    CLR	0x0
  01ED    082E    LD	A,0x2E
  01EE    00F2    LD	0x72,A
  01EF    01F3    CLR	0x73
  01F0    0834    LD	A,0x34
  01F1    2224    CALL	0x224
  01F2    118A    CLRB	0xA,3
  01F3    3003    LDIA	0x3
  01F4    1683    SETB	0x3,5
  01F5    1303    CLRB	0x3,6
  01F6    0AB4    INCR	0x34
  01F7    0234    SUBA	0x34
  01F8    1803    SZB	0x3,0
  01F9    0008    RET
  01FA    2927    JP	0x127
  01FB    00F3    LD	0x73,A
  01FC    3907    ANDIA	0x7
  01FD    3E0F    ADDIA	0xF
  01FE    0084    LD	0x4,A
  01FF    158A    SETB	0xA,3
  0200    2000    CALL	0x0
  0201    118A    CLRB	0xA,3
  0202    00F2    LD	0x72,A
  0203    1DF3    SNZB	0x73,3
  0204    2A09    JP	0x209
  0205    1283    CLRB	0x3,5
  0206    1303    CLRB	0x3,6
  0207    084E    LD	A,0x4E
  0208    2A0C    JP	0x20C
  0209    1283    CLRB	0x3,5
  020A    1303    CLRB	0x3,6
  020B    084D    LD	A,0x4D
  020C    05F2    ANDR	0x72
  020D    0872    LD	A,0x72
  020E    0008    RET
  020F    00F2    LD	0x72,A
  0210    1003    CLRB	0x3,0
  0211    0D72    RLCA	0x72
  0212    3EA6    ADDIA	0xA6
  0213    0084    LD	0x4,A
  0214    1383    CLRB	0x3,7
  0215    22C2    CALL	0x2C2
  0216    118A    CLRB	0xA,3
  0217    3E26    ADDIA	0x26
  0218    0084    LD	0x4,A
  0219    22C2    CALL	0x2C2
  021A    118A    CLRB	0xA,3
  021B    3EA0    ADDIA	0xA0
  021C    0084    LD	0x4,A
  021D    22C2    CALL	0x2C2
  021E    3E20    ADDIA	0x20
  021F    0084    LD	0x4,A
  0220    0180    CLR	0x0
  0221    0A84    INCR	0x4
  0222    0180    CLR	0x0
  0223    0008    RET
  0224    00F4    LD	0x74,A
  0225    1283    CLRB	0x3,5
  0226    0AD3    INCR	0x53
  0227    1DF4    SNZB	0x74,3
  0228    2A2C    JP	0x22C
  0229    0872    LD	A,0x72
  022A    04B8    ORR	0x38
  022B    0008    RET
  022C    0872    LD	A,0x72
  022D    04B7    ORR	0x37
  022E    0008    RET
  022F    01CD    CLR	0x4D
  0230    01CE    CLR	0x4E
  0231    01F3    CLR	0x73
  0232    1003    CLRB	0x3,0
  0233    0D73    RLCA	0x73
  0234    3E2C    ADDIA	0x2C
  0235    0084    LD	0x4,A
  0236    0180    CLR	0x0
  0237    0A84    INCR	0x4
  0238    0180    CLR	0x0
  0239    0873    LD	A,0x73
  023A    220F    CALL	0x20F
  023B    118A    CLRB	0xA,3
  023C    3003    LDIA	0x3
  023D    0AF3    INCR	0x73
  023E    0273    SUBA	0x73
  023F    1803    SZB	0x3,0
  0240    0008    RET
  0241    2A32    JP	0x232
  0242    1283    CLRB	0x3,5
  0243    0838    LD	A,0x38
  0244    0437    ORA	0x37
  0245    1903    SZB	0x3,2
  0246    2A62    JP	0x262
  0247    01CF    CLR	0x4F
  0248    0837    LD	A,0x37
  0249    0639    XORA	0x39
  024A    1D03    SNZB	0x3,2
  024B    2A5B    JP	0x25B
  024C    0838    LD	A,0x38
  024D    063A    XORA	0x3A
  024E    1D03    SNZB	0x3,2
  024F    2A5B    JP	0x25B
  0250    3002    LDIA	0x2
  0251    0AD0    INCR	0x50
  0252    0250    SUBA	0x50
  0253    1C03    SNZB	0x3,0
  0254    0008    RET
  0255    01D0    CLR	0x50
  0256    0837    LD	A,0x37
  0257    00CD    LD	0x4D,A
  0258    0838    LD	A,0x38
  0259    00CE    LD	0x4E,A
  025A    0008    RET
  025B    1178    CLRB	0x78,2
  025C    0837    LD	A,0x37
  025D    00B9    LD	0x39,A
  025E    0838    LD	A,0x38
  025F    00BA    LD	0x3A,A
  0260    01D0    CLR	0x50
  0261    0008    RET
  0262    01D0    CLR	0x50
  0263    01B9    CLR	0x39
  0264    01BA    CLR	0x3A
  0265    3002    LDIA	0x2
  0266    0ACF    INCR	0x4F
  0267    024F    SUBA	0x4F
  0268    1C03    SNZB	0x3,0
  0269    0008    RET
  026A    01CF    CLR	0x4F
  026B    01CD    CLR	0x4D
  026C    01CE    CLR	0x4E
  026D    1178    CLRB	0x78,2
  026E    0008    RET
  026F    084E    LD	A,0x4E
  0270    044D    ORA	0x4D
  0271    1903    SZB	0x3,2
  0272    2A7E    JP	0x27E
  0273    0AB5    INCR	0x35
  0274    1903    SZB	0x3,2
  0275    0AB6    INCR	0x36
  0276    303A    LDIA	0x3A
  0277    0236    SUBA	0x36
  0278    3098    LDIA	0x98
  0279    1903    SZB	0x3,2
  027A    0235    SUBA	0x35
  027B    1C03    SNZB	0x3,0
  027C    0008    RET
  027D    14F8    SETB	0x78,1
  027E    01B5    CLR	0x35
  027F    01B6    CLR	0x36
  0280    0008    RET
---- stringtab ------------------------------------------------------------------
  0800    3008    LDIA	0x8
  0801    008A    LD	0xA,A
  0802    0804    LD	A,0x4
  0803    0A84    INCR	0x4
  0804    0782    ADDR	0x2
  0805    3400    RET	0x0
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280B    JP	0xB
  000B    118A    CLRB	0xA,3
  000C    280D    JP	0xD
---- start_initialization ------------------------------------------------------------------
  000D    3020    LDIA	0x20
  000E    01F8    CLR	0x78
  000F    01F9    CLR	0x79
  0010    01FA    CLR	0x7A
  0011    01FB    CLR	0x7B
  0012    1383    CLRB	0x3,7
  0013    0084    LD	0x4,A
  0014    3067    LDIA	0x67
  0015    158A    SETB	0xA,3
  0016    27CE    CALL	0x7CE
  0017    118A    CLRB	0xA,3
  0018    30A0    LDIA	0xA0
  0019    0084    LD	0x4,A
  001A    30AC    LDIA	0xAC
  001B    158A    SETB	0xA,3
  001C    27CE    CALL	0x7CE
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F0    LD	0x70,A
  0007    080A    LD	A,0xA
  0008    00F1    LD	0x71,A
  0009    158A    SETB	0xA,3
  000A    2FE5    JP	0x7E5
---- common_function ------------------------------------------------------------------
  001D    0183    CLR	0x3
  001E    118A    CLRB	0xA,3
  001F    2FD9    JP	0x7D9
  0281    0800    LD	A,0x0
  0282    00E9    LD	0x69,A
  0283    0A84    INCR	0x4
  0284    0800    LD	A,0x0
  0285    00EA    LD	0x6A,A
  0286    0867    LD	A,0x67
  0287    02E9    SUBR	0x69
  0288    0868    LD	A,0x68
  0289    1C03    SNZB	0x3,0
  028A    03EA    DECR	0x6A
  028B    02EA    SUBR	0x6A
  028C    3000    LDIA	0x0
  028D    026A    SUBA	0x6A
  028E    3402    RET	0x2
  028F    0A84    INCR	0x4
  0290    0800    LD	A,0x0
  0291    00E8    LD	0x68,A
  0292    1683    SETB	0x3,5
  0293    0831    LD	A,0x31
  0294    1283    CLRB	0x3,5
  0295    0767    ADDA	0x67
  0296    00E9    LD	0x69,A
  0297    0868    LD	A,0x68
  0298    1803    SZB	0x3,0
  0299    0A68    INCA	0x68
  029A    00EA    LD	0x6A,A
  029B    1683    SETB	0x3,5
  029C    0833    LD	A,0x33
  029D    1283    CLRB	0x3,5
  029E    026A    SUBA	0x6A
  029F    1D03    SNZB	0x3,2
  02A0    0008    RET
  02A1    1683    SETB	0x3,5
  02A2    0832    LD	A,0x32
  02A3    1283    CLRB	0x3,5
  02A4    0269    SUBA	0x69
  02A5    0008    RET
  02A6    0084    LD	0x4,A
  02A7    0800    LD	A,0x0
  02A8    1283    CLRB	0x3,5
  02A9    00E7    LD	0x67,A
  02AA    0A84    INCR	0x4
  02AB    0800    LD	A,0x0
  02AC    00E8    LD	0x68,A
  02AD    1683    SETB	0x3,5
  02AE    0008    RET
  02AF    0084    LD	0x4,A
  02B0    0874    LD	A,0x74
  02B1    0080    LD	0x0,A
  02B2    0A84    INCR	0x4
  02B3    0875    LD	A,0x75
  02B4    0080    LD	0x0,A
  02B5    1003    CLRB	0x3,0
  02B6    0D6B    RLCA	0x6B
  02B7    3EA6    ADDIA	0xA6
  02B8    0084    LD	0x4,A
  02B9    0008    RET
  02BA    0800    LD	A,0x0
  02BB    00F4    LD	0x74,A
  02BC    0A84    INCR	0x4
  02BD    0800    LD	A,0x0
  02BE    00F5    LD	0x75,A
  02BF    1003    CLRB	0x3,0
  02C0    0D6B    RLCA	0x6B
  02C1    0008    RET
  02C2    0180    CLR	0x0
  02C3    0A84    INCR	0x4
  02C4    0180    CLR	0x0
  02C5    1003    CLRB	0x3,0
  02C6    0D72    RLCA	0x72
  02C7    0008    RET
  02C8    1683    SETB	0x3,5
  02C9    1003    CLRB	0x3,0
  02CA    0D34    RLCA	0x34
  02CB    3EA0    ADDIA	0xA0
  02CC    0084    LD	0x4,A
  02CD    0008    RET
  02CE    0867    LD	A,0x67
  02CF    0080    LD	0x0,A
  02D0    0A84    INCR	0x4
  02D1    0868    LD	A,0x68
  02D2    0080    LD	0x0,A
  02D3    0008    RET
  02D4    1283    CLRB	0x3,5
  02D5    0867    LD	A,0x67
  02D6    1683    SETB	0x3,5
  02D7    022F    SUBA	0x2F
  02D8    0008    RET
  0542    01FB    CLR	0x7B
  0543    01FA    CLR	0x7A
  0544    01C3    CLR	0x43
  0545    01C4    CLR	0x44
  0546    0008    RET
  05AB    00F3    LD	0x73,A
  05AC    01F5    CLR	0x75
  05AD    0872    LD	A,0x72
  05AE    1903    SZB	0x3,2
  05AF    2DC4    JP	0x5C4
  05B0    01F4    CLR	0x74
  05B1    0AF4    INCR	0x74
  05B2    1BF2    SZB	0x72,7
  05B3    2DB7    JP	0x5B7
  05B4    1003    CLRB	0x3,0
  05B5    0DF2    RLCR	0x72
  05B6    2DB1    JP	0x5B1
  05B7    1003    CLRB	0x3,0
  05B8    0DF5    RLCR	0x75
  05B9    0872    LD	A,0x72
  05BA    0273    SUBA	0x73
  05BB    1C03    SNZB	0x3,0
  05BC    2DC1    JP	0x5C1
  05BD    0872    LD	A,0x72
  05BE    02F3    SUBR	0x73
  05BF    1475    SETB	0x75,0
  05C0    1003    CLRB	0x3,0
  05C1    0CF2    RRCR	0x72
  05C2    0BF4    SZDECR	0x74
  05C3    2DB7    JP	0x5B7
  05C4    0875    LD	A,0x75
  05C5    0008    RET
  05C6    00F4    LD	0x74,A
  05C7    3008    LDIA	0x8
  05C8    00F5    LD	0x75,A
  05C9    01F6    CLR	0x76
  05CA    0874    LD	A,0x74
  05CB    00F3    LD	0x73,A
  05CC    3007    LDIA	0x7
  05CD    1003    CLRB	0x3,0
  05CE    0CF3    RRCR	0x73
  05CF    3EFF    ADDIA	0xFF
  05D0    1003    CLRB	0x3,0
  05D1    1D03    SNZB	0x3,2
  05D2    2DCE    JP	0x5CE
  05D3    0D76    RLCA	0x76
  05D4    0473    ORA	0x73
  05D5    00F6    LD	0x76,A
  05D6    1003    CLRB	0x3,0
  05D7    0DF4    RLCR	0x74
  05D8    0872    LD	A,0x72
  05D9    0276    SUBA	0x76
  05DA    1C03    SNZB	0x3,0
  05DB    2DDE    JP	0x5DE
  05DC    0872    LD	A,0x72
  05DD    02F6    SUBR	0x76
  05DE    0BF5    SZDECR	0x75
  05DF    2DCA    JP	0x5CA
  05E0    0876    LD	A,0x76
  05E1    0008    RET
  068E    00E3    LD	0x63,A
  068F    300A    LDIA	0xA
  0690    00F2    LD	0x72,A
  0691    0879    LD	A,0x79
  0692    0008    RET
  0806    343F    RET	0x3F
  0807    3406    RET	0x6
  0808    345B    RET	0x5B
  0809    344F    RET	0x4F
  080A    3466    RET	0x66
  080B    346D    RET	0x6D
  080C    347D    RET	0x7D
  080D    3407    RET	0x7
  080E    347F    RET	0x7F
  080F    346F    RET	0x6F
  0810    3471    RET	0x71
  0811    3479    RET	0x79
  0812    3450    RET	0x50
  0813    3473    RET	0x73
  0814    3401    RET	0x1
  0815    3402    RET	0x2
  0816    3404    RET	0x4
  0817    3408    RET	0x8
  0818    3410    RET	0x10
  0819    3420    RET	0x20
  081A    3440    RET	0x40
  081B    3480    RET	0x80
  081C    3408    RET	0x8
  081D    3408    RET	0x8
  081E    3408    RET	0x8
  081F    3402    RET	0x2
  0820    343A    RET	0x3A
  0821    341A    RET	0x1A
  0822    3458    RET	0x58
  0823    3459    RET	0x59
  0824    345A    RET	0x5A
  0FCE    0064    CLRWDT
  0FCF    0180    CLR	0x0
  0FD0    0A84    INCR	0x4
  0FD1    0604    XORA	0x4
  0FD2    1903    SZB	0x3,2
  0FD3    3400    RET	0x0
  0FD4    0604    XORA	0x4
  0FD5    2FCF    JP	0x7CF
