

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 23 16:18:20 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F6790
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text15,local,class=CODE,merge=1,delta=2
    18                           	psect	text19,local,class=CODE,merge=1,delta=2
    19                           	psect	text20,local,class=CODE,merge=1,delta=2
    20                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text33,local,class=CODE,merge=1,delta=2
    22                           	psect	intentry,global,class=CODE,delta=2
    23                           	psect	pa_nodes0,global,class=CODE,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F887 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	strings
    62  0800                     __pstrings:	
    63  0800                     stringtab:	
    64  0800                     __stringtab:	
    65  0800                     stringcode:	
    66                           ;	String table - string pointers are 1 byte each
    67                           
    68  0800                     stringdir:	
    69  0800  3008               	movlw	high stringdir
    70  0801  008A               	movwf	10
    71  0802  0804               	movf	4,w
    72  0803  0A84               	incf	4,f
    73  0804  0782               	addwf	2,f
    74  0805                     __stringbase:	
    75  0805  3400               	retlw	0
    76  0806                     __end_of__stringtab:	
    77  0806                     _numArray:	
    78  0806  343F               	retlw	63
    79  0807  3406               	retlw	6
    80  0808  345B               	retlw	91
    81  0809  344F               	retlw	79
    82  080A  3466               	retlw	102
    83  080B  346D               	retlw	109
    84  080C  347D               	retlw	125
    85  080D  3407               	retlw	7
    86  080E  347F               	retlw	127
    87  080F  346F               	retlw	111
    88  0810  3471               	retlw	113
    89  0811  3479               	retlw	121
    90  0812  3450               	retlw	80
    91  0813  3473               	retlw	115
    92  0814                     __end_of_numArray:	
    93  0814                     _Table_KeyFalg:	
    94  0814  3401               	retlw	1
    95  0815  3402               	retlw	2
    96  0816  3404               	retlw	4
    97  0817  3408               	retlw	8
    98  0818  3410               	retlw	16
    99  0819  3420               	retlw	32
   100  081A  3440               	retlw	64
   101  081B  3480               	retlw	128
   102  081C                     __end_of_Table_KeyFalg:	
   103  081C                     _Table_KeyDown:	
   104  081C  3408               	retlw	8
   105  081D  3408               	retlw	8
   106  081E  3408               	retlw	8
   107  081F                     __end_of_Table_KeyDown:	
   108  081F                     _Table_KeyCap:	
   109  081F  3402               	retlw	2
   110  0820  343A               	retlw	58
   111  0821  341A               	retlw	26
   112  0822                     __end_of_Table_KeyCap:	
   113  0822                     _Table_KeyChannel:	
   114  0822  3458               	retlw	88
   115  0823  3459               	retlw	89
   116  0824  345A               	retlw	90
   117  0825                     __end_of_Table_KeyChannel:	
   118  001D                     _PWMCON2	set	29
   119  001C                     _PWMD01H	set	28
   120  001A                     _PWMD3L	set	26
   121  0017                     _PWMD0L	set	23
   122  0016                     _PWMTH	set	22
   123  0015                     _PWMTL	set	21
   124  0014                     _PWMCON1	set	20
   125  0013                     _PWMCON0	set	19
   126  0012                     _T2CON	set	18
   127  000E                     _PWMD23H	set	14
   128  000D                     _PIE1	set	13
   129  000C                     _PIR1	set	12
   130  000B                     _INTCON	set	11
   131  0009                     _IOCB	set	9
   132  0006                     _PORTB	set	6
   133  0005                     _PORTA	set	5
   134  0061                     _TMR2IF	set	97
   135  005B                     _RBIE	set	91
   136  005F                     _GIE	set	95
   137  0036                     _RB6	set	54
   138  0037                     _RB7	set	55
   139  009F                     _ADRESH	set	159
   140  009E                     _ADRESL	set	158
   141  009D                     _ADCON0	set	157
   142  009C                     _ADCON1	set	156
   143  0097                     _KEYCON2	set	151
   144  0095                     _KEYDATAH	set	149
   145  0094                     _KEYDATAL	set	148
   146  0093                     _KEYCON1	set	147
   147  0092                     _KEYCON0	set	146
   148  0091                     _PR2	set	145
   149  008C                     _EECON1	set	140
   150  0088                     _OSCCON	set	136
   151  0086                     _TRISB	set	134
   152  0085                     _TRISA	set	133
   153  0081                     _OPTION_REG	set	129
   154  04E8                     _ADON	set	1256
   155  04E9                     _GODONE	set	1257
   156  04E6                     _CHS4	set	1254
   157  0436                     _TRISB6	set	1078
   158  0841                     _RACIE	set	2113
   159  0839                     _RACIF	set	2105
   160  018D                     _PWMIOS1	set	397
   161  018C                     _PWMIOS0	set	396
   162  0188                     _IOCA	set	392
   163  0186                     _TRISC	set	390
   164  0185                     _PORTC	set	389
   165  0C28                     _RC0	set	3112
   166                           
   167                           	psect	cinit
   168  000D                     start_initialization:	
   169                           ; #config settings
   170                           
   171  000D                     __initialization:	
   172  000D  3020               	movlw	low __pbssBANK0
   173                           
   174                           ; Clear objects allocated to BITCOMMON
   175  000E  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   176                           
   177                           ; Clear objects allocated to COMMON
   178  000F  01F9               	clrf	__pbssCOMMON& (0+127)
   179  0010  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   180  0011  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   181                           
   182                           ; Clear objects allocated to BANK0
   183  0012  1383               	bcf	3,7	;select IRP bank0
   184  0013  0084               	movwf	4
   185  0014  3067               	movlw	low (__pbssBANK0+71)
   186  0015  158A  27CE  118A   	fcall	clear_ram0
   187                           
   188                           ; Clear objects allocated to BANK1
   189  0018  30A0               	movlw	low __pbssBANK1
   190  0019  0084               	movwf	4
   191  001A  30AC               	movlw	low (__pbssBANK1+12)
   192  001B  158A  27CE         	fcall	clear_ram0
   193  001D                     end_of_initialization:	
   194                           ;End of C runtime variable initialization code
   195                           
   196  001D                     __end_of__initialization:	
   197  001D  0183               	clrf	3
   198  001E  118A  2FD9         	ljmp	_main	;jump to C main() function
   199                           
   200                           	psect	bitbssCOMMON
   201  03C0                     __pbitbssCOMMON:	
   202  03C0                     _b_ksleep:	
   203  03C0                     	ds	1
   204  03C1                     _b_kerr:	
   205  03C1                     	ds	1
   206  03C2                     _b_kclr:	
   207  03C2                     	ds	1
   208  03C3                     _b_kover1:	
   209  03C3                     	ds	1
   210  03C4                     _b_kover:	
   211  03C4                     	ds	1
   212  03C5                     _B_OnOff:	
   213  03C5                     	ds	1
   214  03C6                     _B_MainLoop:	
   215  03C6                     	ds	1
   216                           
   217                           	psect	bssCOMMON
   218  0079                     __pbssCOMMON:	
   219  0079                     _preBatValue:	
   220  0079                     	ds	1
   221  007A                     _zeroStep:	
   222  007A                     	ds	1
   223  007B                     _workStep:	
   224  007B                     	ds	1
   225                           
   226                           	psect	bssBANK0
   227  0020                     __pbssBANK0:	
   228  0020                     _KeyReference:	
   229  0020                     	ds	6
   230  0026                     _KeyOldValue1:	
   231  0026                     	ds	6
   232  002C                     _KeyResSum:	
   233  002C                     	ds	6
   234  0032                     _KeyUpShake:	
   235  0032                     	ds	3
   236  0035                     CheckValidTime@validtime:	
   237  0035                     	ds	2
   238  0037                     _KeyData:	
   239  0037                     	ds	2
   240  0039                     _KeyOldData:	
   241  0039                     	ds	2
   242  003B                     _count900s:	
   243  003B                     	ds	2
   244  003D                     _chrgFullTime:	
   245  003D                     	ds	2
   246  003F                     _chrgResult:	
   247  003F                     	ds	2
   248  0041                     _batResult:	
   249  0041                     	ds	2
   250  0043                     _ledLightTime:	
   251  0043                     	ds	2
   252  0045                     _keyCount3:	
   253  0045                     	ds	2
   254  0047                     _keyCount2:	
   255  0047                     	ds	2
   256  0049                     _keyCount1:	
   257  0049                     	ds	2
   258  004B                     _firstTime:	
   259  004B                     	ds	2
   260  004D                     _KeyFlag:	
   261  004D                     	ds	2
   262  004F                     TurnKeyFlags@KeyNoTimes:	
   263  004F                     	ds	1
   264  0050                     TurnKeyFlags@KeyHaveTimes:	
   265  0050                     	ds	1
   266  0051                     CheckKeyOldValue@counter:	
   267  0051                     	ds	1
   268  0052                     _KeyMaxSub:	
   269  0052                     	ds	1
   270  0053                     _KeyCounter:	
   271  0053                     	ds	1
   272  0054                     _sleepTime:	
   273  0054                     	ds	1
   274  0055                     _chrgLockFlag:	
   275  0055                     	ds	1
   276  0056                     _count15s:	
   277  0056                     	ds	1
   278  0057                     _subTime:	
   279  0057                     	ds	1
   280  0058                     _addTime:	
   281  0058                     	ds	1
   282  0059                     _chrgDuty:	
   283  0059                     	ds	1
   284  005A                     _chrgFullFlag:	
   285  005A                     	ds	1
   286  005B                     _count50:	
   287  005B                     	ds	1
   288  005C                     _batValue:	
   289  005C                     	ds	1
   290  005D                     _chrgFlag:	
   291  005D                     	ds	1
   292  005E                     _count1s:	
   293  005E                     	ds	1
   294  005F                     _count64ms:	
   295  005F                     	ds	1
   296  0060                     _showLed2:	
   297  0060                     	ds	1
   298  0061                     _showLed1:	
   299  0061                     	ds	1
   300  0062                     _showGeWei:	
   301  0062                     	ds	1
   302  0063                     _showShiWei:	
   303  0063                     	ds	1
   304  0064                     _showFlag:	
   305  0064                     	ds	1
   306  0065                     _longKeyFalg:	
   307  0065                     	ds	1
   308  0066                     _MainTime:	
   309  0066                     	ds	1
   310                           
   311                           	psect	bssBANK1
   312  00A0                     __pbssBANK1:	
   313  00A0                     _KeyOldValue2:	
   314  00A0                     	ds	6
   315  00A6                     _KeyOldValue0:	
   316  00A6                     	ds	6
   317                           
   318                           	psect	clrtext
   319  0FCE                     clear_ram0:	
   320                           ;	Called with FSR containing the base address, and
   321                           ;	W with the last address+1
   322                           
   323  0FCE  0064               	clrwdt	;clear the watchdog before getting into this loop
   324  0FCF                     clrloop0:	
   325  0FCF  0180               	clrf	0	;clear RAM location pointed to by FSR
   326  0FD0  0A84               	incf	4,f	;increment pointer
   327  0FD1  0604               	xorwf	4,w	;XOR with final address
   328  0FD2  1903               	btfsc	3,2	;have we reached the end yet?
   329  0FD3  3400               	retlw	0	;all done for this memory range, return
   330  0FD4  0604               	xorwf	4,w	;XOR again to restore value
   331  0FD5  2FCF               	goto	clrloop0	;do the next byte
   332                           
   333                           	psect	cstackBANK1
   334  00AC                     __pcstackBANK1:	
   335  00AC                     CheckOnceResult@OldValue:	
   336                           
   337                           ; 2 bytes @ 0x0
   338  00AC                     	ds	2
   339  00AE                     CheckOnceResult@flag:	
   340                           
   341                           ; 1 bytes @ 0x2
   342  00AE                     	ds	1
   343  00AF                     CheckOnceResult@KeyValue:	
   344                           
   345                           ; 2 bytes @ 0x3
   346  00AF                     	ds	2
   347  00B1                     CheckOnceResult@KeyDown:	
   348                           
   349                           ; 1 bytes @ 0x5
   350  00B1                     	ds	1
   351  00B2                     CheckOnceResult@KeyResTemp:	
   352                           
   353                           ; 2 bytes @ 0x6
   354  00B2                     	ds	2
   355  00B4                     CheckOnceResult@cnt:	
   356                           
   357                           ; 1 bytes @ 0x8
   358  00B4                     	ds	1
   359                           
   360                           	psect	cstackCOMMON
   361  0070                     __pcstackCOMMON:	
   362  0070                     ?_gotoSleep:	
   363  0070                     ?_CheckTouchKey:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_Init_System:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_Refurbish_Sfr:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_KeyServer:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_checkChrgAD:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_checkBat:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_Isr_Timer:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ??_Isr_Timer:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_TM1650_START:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_TM1650_STOP:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_write_8bit:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_initTM1650:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_refreshTM1650:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_setZeroStep:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?_showCtr:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?_workCtr:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ?_chrgCtr:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ?_task1:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     ?_main:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ?_KeyIsIn:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ?_KeyClearOne:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     ?_KeyClearIn:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ?_KeyStopClear:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?_ClearResSum:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     ?_GetTouchKeyValue:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0070                     ?_CheckOnceResult:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0070                     ?_CheckKeyOldValue:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ?_TurnKeyFlags:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ?_CheckValidTime:	
   448                           ; 1 bytes @ 0x0
   449                           
   450                           
   451                           ; 1 bytes @ 0x0
   452  0070                     	ds	2
   453  0072                     ??_gotoSleep:	
   454  0072                     ??_Init_System:	
   455                           ; 1 bytes @ 0x2
   456                           
   457  0072                     ??_Refurbish_Sfr:	
   458                           ; 1 bytes @ 0x2
   459                           
   460  0072                     ??_KeyServer:	
   461                           ; 1 bytes @ 0x2
   462                           
   463  0072                     ??_TM1650_START:	
   464                           ; 1 bytes @ 0x2
   465                           
   466  0072                     ??_TM1650_STOP:	
   467                           ; 1 bytes @ 0x2
   468                           
   469  0072                     ??_write_8bit:	
   470                           ; 1 bytes @ 0x2
   471                           
   472  0072                     ??_setZeroStep:	
   473                           ; 1 bytes @ 0x2
   474                           
   475  0072                     ??_workCtr:	
   476                           ; 1 bytes @ 0x2
   477                           
   478  0072                     ??_KeyIsIn:	
   479                           ; 1 bytes @ 0x2
   480                           
   481  0072                     ??_KeyClearOne:	
   482                           ; 1 bytes @ 0x2
   483                           
   484  0072                     ??_ClearResSum:	
   485                           ; 1 bytes @ 0x2
   486                           
   487  0072                     ?_KeyHave:	
   488                           ; 1 bytes @ 0x2
   489                           
   490  0072                     ??_CheckValidTime:	
   491                           ; 1 bytes @ 0x2
   492                           
   493  0072                     ?___lbdiv:	
   494                           ; 1 bytes @ 0x2
   495                           
   496  0072                     ?___lbmod:	
   497                           ; 1 bytes @ 0x2
   498                           
   499  0072                     ?_Read_ADC:	
   500                           ; 1 bytes @ 0x2
   501                           
   502  0072                     Read_ADC@ADCLDORef:	
   503                           ; 2 bytes @ 0x2
   504                           
   505  0072                     write_8bit@dat:	
   506                           ; 1 bytes @ 0x2
   507                           
   508  0072                     KeyIsIn@i:	
   509                           ; 1 bytes @ 0x2
   510                           
   511  0072                     KeyClearOne@cnt:	
   512                           ; 1 bytes @ 0x2
   513                           
   514  0072                     ClearResSum@cnt:	
   515                           ; 1 bytes @ 0x2
   516                           
   517  0072                     ___lbdiv@divisor:	
   518                           ; 1 bytes @ 0x2
   519                           
   520  0072                     ___lbmod@divisor:	
   521                           ; 1 bytes @ 0x2
   522                           
   523  0072                     KeyHave@flag:	
   524                           ; 1 bytes @ 0x2
   525                           
   526                           
   527                           ; 2 bytes @ 0x2
   528  0072                     	ds	1
   529  0073                     ??_KeyStopClear:	
   530  0073                     ??_GetTouchKeyValue:	
   531                           ; 1 bytes @ 0x3
   532                           
   533  0073                     ??___lbdiv:	
   534                           ; 1 bytes @ 0x3
   535                           
   536  0073                     ??___lbmod:	
   537                           ; 1 bytes @ 0x3
   538                           
   539  0073                     write_8bit@i:	
   540                           ; 1 bytes @ 0x3
   541                           
   542  0073                     KeyIsIn@cnt:	
   543                           ; 1 bytes @ 0x3
   544                           
   545  0073                     KeyStopClear@i:	
   546                           ; 1 bytes @ 0x3
   547                           
   548  0073                     ___lbdiv@dividend:	
   549                           ; 1 bytes @ 0x3
   550                           
   551  0073                     GetTouchKeyValue@temp:	
   552                           ; 1 bytes @ 0x3
   553                           
   554                           
   555                           ; 2 bytes @ 0x3
   556  0073                     	ds	1
   557  0074                     ??_Read_ADC:	
   558  0074                     ?_tm1650cmd:	
   559                           ; 1 bytes @ 0x4
   560                           
   561  0074                     ??_KeyClearIn:	
   562                           ; 1 bytes @ 0x4
   563                           
   564  0074                     ??_KeyHave:	
   565                           ; 1 bytes @ 0x4
   566                           
   567  0074                     ??_CheckKeyOldValue:	
   568                           ; 1 bytes @ 0x4
   569                           
   570  0074                     tm1650cmd@seg_data:	
   571                           ; 1 bytes @ 0x4
   572                           
   573  0074                     KeyClearIn@cnt:	
   574                           ; 1 bytes @ 0x4
   575                           
   576  0074                     KeyHave@cnt:	
   577                           ; 1 bytes @ 0x4
   578                           
   579  0074                     ___lbdiv@counter:	
   580                           ; 1 bytes @ 0x4
   581                           
   582  0074                     ___lbmod@dividend:	
   583                           ; 1 bytes @ 0x4
   584                           
   585                           
   586                           ; 1 bytes @ 0x4
   587  0074                     	ds	1
   588  0075                     ??_tm1650cmd:	
   589  0075                     ??_TurnKeyFlags:	
   590                           ; 1 bytes @ 0x5
   591                           
   592  0075                     tm1650cmd@digAddr:	
   593                           ; 1 bytes @ 0x5
   594                           
   595  0075                     GetTouchKeyValue@cnt:	
   596                           ; 1 bytes @ 0x5
   597                           
   598  0075                     ___lbdiv@quotient:	
   599                           ; 1 bytes @ 0x5
   600                           
   601  0075                     ___lbmod@counter:	
   602                           ; 1 bytes @ 0x5
   603                           
   604                           
   605                           ; 1 bytes @ 0x5
   606  0075                     	ds	1
   607  0076                     ??_CheckTouchKey:	
   608  0076                     ??_checkChrgAD:	
   609                           ; 1 bytes @ 0x6
   610                           
   611  0076                     ??_checkBat:	
   612                           ; 1 bytes @ 0x6
   613                           
   614  0076                     ??_initTM1650:	
   615                           ; 1 bytes @ 0x6
   616                           
   617  0076                     ??_refreshTM1650:	
   618                           ; 1 bytes @ 0x6
   619                           
   620  0076                     ??_chrgCtr:	
   621                           ; 1 bytes @ 0x6
   622                           
   623  0076                     ??_task1:	
   624                           ; 1 bytes @ 0x6
   625                           
   626  0076                     ___lbmod@rem:	
   627                           ; 1 bytes @ 0x6
   628                           
   629                           
   630                           ; 1 bytes @ 0x6
   631  0076                     	ds	1
   632  0077                     ??_showCtr:	
   633                           
   634                           ; 1 bytes @ 0x7
   635  0077                     	ds	1
   636  0078                     ??_main:	
   637                           
   638                           	psect	cstackBANK0
   639  0067                     __pcstackBANK0:	
   640                           ; 1 bytes @ 0x8
   641                           
   642  0067                     ??_CheckOnceResult:	
   643  0067                     Read_ADC@Adc_ResultSum:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0067                     CheckKeyOldValue@KeyResTemp:	
   647                           ; 2 bytes @ 0x0
   648                           
   649                           
   650                           ; 2 bytes @ 0x0
   651  0067                     	ds	2
   652  0069                     Read_ADC@Adc_Result:	
   653  0069                     CheckKeyOldValue@KeyOldTemp:	
   654                           ; 2 bytes @ 0x2
   655                           
   656                           
   657                           ; 2 bytes @ 0x2
   658  0069                     	ds	2
   659  006B                     Read_ADC@i:	
   660  006B                     CheckKeyOldValue@cnt:	
   661                           ; 1 bytes @ 0x4
   662                           
   663                           
   664                           ; 1 bytes @ 0x4
   665  006B                     	ds	1
   666  006C                     Read_ADC@ADCchannel:	
   667                           
   668                           ; 1 bytes @ 0x5
   669  006C                     	ds	1
   670  006D                     Read_ADC@j:	
   671                           
   672                           ; 1 bytes @ 0x6
   673  006D                     	ds	1
   674                           
   675                           	psect	maintext
   676  07D9                     __pmaintext:	
   677 ;;
   678 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   679 ;;
   680 ;; *************** function _main *****************
   681 ;; Defined at:
   682 ;;		line 725 in file "C:\mcuproject\scm\testTouch\main.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;		None
   685 ;; Auto vars:     Size  Location     Type
   686 ;;		None
   687 ;; Return value:  Size  Location     Type
   688 ;;                  1    wreg      void 
   689 ;; Registers used:
   690 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   691 ;; Tracked objects:
   692 ;;		On entry : B00/0
   693 ;;		On exit  : 300/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   696 ;;      Params:         0       0       0       0       0
   697 ;;      Locals:         0       0       0       0       0
   698 ;;      Temps:          0       0       0       0       0
   699 ;;      Totals:         0       0       0       0       0
   700 ;;Total ram usage:        0 bytes
   701 ;; Hardware stack levels required when called:    6
   702 ;; This function calls:
   703 ;;		_CheckTouchKey
   704 ;;		_Init_System
   705 ;;		_KeyServer
   706 ;;		_Refurbish_Sfr
   707 ;;		_checkBat
   708 ;;		_chrgCtr
   709 ;;		_initTM1650
   710 ;;		_showCtr
   711 ;;		_task1
   712 ;;		_workCtr
   713 ;; This function is called by:
   714 ;;		Startup code after reset
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           
   719                           ;psect for function _main
   720  07D9                     _main:	
   721                           
   722                           ;main.c: 726: Init_System();
   723                           
   724                           ;incstack = 0
   725                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   726  07D9  118A  2608  118A   	fcall	_Init_System
   727                           
   728                           ;main.c: 727: initTM1650();
   729  07DC  118A  23D1  118A   	fcall	_initTM1650
   730                           
   731                           ;main.c: 728: firstTime = 500;
   732  07DF  30F4               	movlw	244
   733  07E0  00CB               	movwf	_firstTime
   734  07E1  3001               	movlw	1
   735  07E2  00CC               	movwf	_firstTime+1
   736  07E3                     l3920:	
   737                           
   738                           ;main.c: 730: if (B_MainLoop) {
   739  07E3  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   740  07E4  2FE3               	goto	l3920
   741                           
   742                           ;main.c: 731: B_MainLoop = 0;
   743  07E5  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   744  07E6  0064               	clrwdt	;# 
   745                           
   746                           ;main.c: 734: CheckTouchKey();
   747  07E7  118A  2020  118A   	fcall	_CheckTouchKey
   748                           
   749                           ;main.c: 736: Refurbish_Sfr();
   750  07EA  158A  27D6  118A   	fcall	_Refurbish_Sfr
   751                           
   752                           ;main.c: 737: KeyServer();
   753  07ED  118A  22D9  118A   	fcall	_KeyServer
   754                           
   755                           ;main.c: 738: showCtr();
   756  07F0  118A  2547  118A   	fcall	_showCtr
   757                           
   758                           ;main.c: 739: workCtr();
   759  07F3  118A  2771  118A   	fcall	_workCtr
   760                           
   761                           ;main.c: 740: checkBat();
   762  07F6  118A  26C5  118A   	fcall	_checkBat
   763                           
   764                           ;main.c: 741: chrgCtr();
   765  07F9  118A  2693  118A   	fcall	_chrgCtr
   766                           
   767                           ;main.c: 742: task1();
   768  07FC  118A  2378  118A   	fcall	_task1
   769  07FF  2FE3               	goto	l3920
   770  0800                     __end_of_main:	
   771                           
   772                           	psect	text1
   773  0771                     __ptext1:	
   774 ;; *************** function _workCtr *****************
   775 ;; Defined at:
   776 ;;		line 543 in file "C:\mcuproject\scm\testTouch\main.c"
   777 ;; Parameters:    Size  Location     Type
   778 ;;		None
   779 ;; Auto vars:     Size  Location     Type
   780 ;;		None
   781 ;; Return value:  Size  Location     Type
   782 ;;                  1    wreg      void 
   783 ;; Registers used:
   784 ;;		wreg, status,2, status,0
   785 ;; Tracked objects:
   786 ;;		On entry : 200/0
   787 ;;		On exit  : 300/0
   788 ;;		Unchanged: 0/0
   789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   790 ;;      Params:         0       0       0       0       0
   791 ;;      Locals:         0       0       0       0       0
   792 ;;      Temps:          0       0       0       0       0
   793 ;;      Totals:         0       0       0       0       0
   794 ;;Total ram usage:        0 bytes
   795 ;; Hardware stack levels used:    1
   796 ;; Hardware stack levels required when called:    1
   797 ;; This function calls:
   798 ;;		Nothing
   799 ;; This function is called by:
   800 ;;		_main
   801 ;; This function uses a non-reentrant model
   802 ;;
   803                           
   804                           
   805                           ;psect for function _workCtr
   806  0771                     _workCtr:	
   807                           
   808                           ;main.c: 545: if(workStep > 0)
   809                           
   810                           ;incstack = 0
   811                           ; Regs used in _workCtr: [wreg+status,2+status,0]
   812  0771  087B               	movf	_workStep,w
   813  0772  1903               	btfsc	3,2
   814  0773  2F86               	goto	l3482
   815                           
   816                           ;main.c: 546: {
   817                           ;main.c: 547: PWMIOS0 = 0x01;
   818  0774  3001               	movlw	1
   819  0775  1683               	bsf	3,5	;RP0=1, select bank3
   820  0776  1703               	bsf	3,6	;RP1=1, select bank3
   821  0777  008C               	movwf	12	;volsfr
   822                           
   823                           ;main.c: 548: PWMTH = 0x00;
   824  0778  1283               	bcf	3,5	;RP0=0, select bank0
   825  0779  1303               	bcf	3,6	;RP1=0, select bank0
   826  077A  0196               	clrf	22	;volatile
   827                           
   828                           ;main.c: 549: PWMTL = 100;
   829  077B  3064               	movlw	100
   830  077C  0095               	movwf	21	;volatile
   831                           
   832                           ;main.c: 550: PWMD01H = 0x00;
   833  077D  019C               	clrf	28	;volatile
   834                           
   835                           ;main.c: 551: PWMD0L = 69 + workStep;
   836  077E  087B               	movf	_workStep,w
   837  077F  3E45               	addlw	69
   838  0780  0097               	movwf	23	;volatile
   839                           
   840                           ;main.c: 552: PWMCON1 = 0x00;
   841  0781  0194               	clrf	20	;volatile
   842                           
   843                           ;main.c: 553: PWMCON2 = 0x00;
   844  0782  019D               	clrf	29	;volatile
   845                           
   846                           ;main.c: 554: PWMCON0 = 0x41;
   847  0783  3041               	movlw	65
   848  0784  0093               	movwf	19	;volatile
   849                           
   850                           ;main.c: 555: }
   851  0785  0008               	return
   852  0786                     l3482:	
   853                           
   854                           ;main.c: 556: else if(chrgFlag && chrgFullFlag == 0 && chrgLockFlag == 0)
   855  0786  1283               	bcf	3,5	;RP0=0, select bank0
   856  0787  085D               	movf	_chrgFlag,w
   857  0788  1903               	btfsc	3,2
   858  0789  2FD7               	goto	l3526
   859  078A  085A               	movf	_chrgFullFlag,w
   860  078B  1D03               	btfss	3,2
   861  078C  2FD7               	goto	l3526
   862  078D  0855               	movf	_chrgLockFlag,w
   863  078E  1D03               	btfss	3,2
   864  078F  2FD7               	goto	l3526
   865                           
   866                           ;main.c: 557: {
   867                           ;main.c: 558: if(chrgResult < 70 && batResult <= 1555)
   868  0790  3000               	movlw	0
   869  0791  0240               	subwf	_chrgResult+1,w
   870  0792  3046               	movlw	70
   871  0793  1903               	skipnz
   872  0794  023F               	subwf	_chrgResult,w
   873  0795  1803               	skipnc
   874  0796  2FAA               	goto	l3500
   875  0797  3006               	movlw	6
   876  0798  0242               	subwf	_batResult+1,w
   877  0799  3014               	movlw	20
   878  079A  1903               	skipnz
   879  079B  0241               	subwf	_batResult,w
   880  079C  1803               	skipnc
   881  079D  2FAA               	goto	l3500
   882                           
   883                           ;main.c: 559: {
   884                           ;main.c: 560: if(++addTime > 10 && chrgDuty < 35)
   885  079E  300B               	movlw	11
   886  079F  0AD8               	incf	_addTime,f
   887  07A0  0258               	subwf	_addTime,w
   888  07A1  1C03               	skipc
   889  07A2  2FAB               	goto	l3502
   890  07A3  3023               	movlw	35
   891  07A4  0259               	subwf	_chrgDuty,w
   892  07A5  1803               	skipnc
   893  07A6  2FAB               	goto	l3502
   894                           
   895                           ;main.c: 561: {
   896                           ;main.c: 562: addTime = 0;
   897  07A7  01D8               	clrf	_addTime
   898                           
   899                           ;main.c: 563: chrgDuty++;
   900  07A8  0AD9               	incf	_chrgDuty,f
   901  07A9  2FAB               	goto	l3502
   902  07AA                     l3500:	
   903                           
   904                           ;main.c: 566: else
   905                           ;main.c: 567: {
   906                           ;main.c: 568: addTime = 0;
   907  07AA  01D8               	clrf	_addTime
   908  07AB                     l3502:	
   909                           
   910                           ;main.c: 569: }
   911                           ;main.c: 570: if(chrgResult > 80 || batResult > 1555)
   912  07AB  3000               	movlw	0
   913  07AC  0240               	subwf	_chrgResult+1,w
   914  07AD  3051               	movlw	81
   915  07AE  1903               	skipnz
   916  07AF  023F               	subwf	_chrgResult,w
   917  07B0  1803               	skipnc
   918  07B1  2FB9               	goto	l3506
   919  07B2  3006               	movlw	6
   920  07B3  0242               	subwf	_batResult+1,w
   921  07B4  3014               	movlw	20
   922  07B5  1903               	skipnz
   923  07B6  0241               	subwf	_batResult,w
   924  07B7  1C03               	skipc
   925  07B8  2FC5               	goto	l3514
   926  07B9                     l3506:	
   927                           
   928                           ;main.c: 571: {
   929                           ;main.c: 572: if(++subTime > 10 && chrgDuty > 10)
   930  07B9  300B               	movlw	11
   931  07BA  0AD7               	incf	_subTime,f
   932  07BB  0257               	subwf	_subTime,w
   933  07BC  1C03               	skipc
   934  07BD  2FC6               	goto	l3516
   935  07BE  300B               	movlw	11
   936  07BF  0259               	subwf	_chrgDuty,w
   937  07C0  1C03               	skipc
   938  07C1  2FC6               	goto	l3516
   939                           
   940                           ;main.c: 573: {
   941                           ;main.c: 574: subTime = 0;
   942  07C2  01D7               	clrf	_subTime
   943                           
   944                           ;main.c: 575: chrgDuty--;
   945  07C3  03D9               	decf	_chrgDuty,f
   946  07C4  2FC6               	goto	l3516
   947  07C5                     l3514:	
   948                           
   949                           ;main.c: 578: else
   950                           ;main.c: 579: {
   951                           ;main.c: 580: subTime = 0;
   952  07C5  01D7               	clrf	_subTime
   953  07C6                     l3516:	
   954                           
   955                           ;main.c: 581: }
   956                           ;main.c: 582: PWMIOS1 = 0x20;
   957  07C6  3020               	movlw	32
   958  07C7  1683               	bsf	3,5	;RP0=1, select bank3
   959  07C8  1703               	bsf	3,6	;RP1=1, select bank3
   960  07C9  008D               	movwf	13	;volsfr
   961                           
   962                           ;main.c: 583: PWMTH = 0x00;
   963  07CA  1283               	bcf	3,5	;RP0=0, select bank0
   964  07CB  1303               	bcf	3,6	;RP1=0, select bank0
   965  07CC  0196               	clrf	22	;volatile
   966                           
   967                           ;main.c: 584: PWMTL = 70;
   968  07CD  3046               	movlw	70
   969  07CE  0095               	movwf	21	;volatile
   970                           
   971                           ;main.c: 585: PWMD23H = 0x00;
   972  07CF  018E               	clrf	14	;volatile
   973                           
   974                           ;main.c: 586: PWMD3L = chrgDuty;
   975  07D0  0859               	movf	_chrgDuty,w
   976  07D1  009A               	movwf	26	;volatile
   977                           
   978                           ;main.c: 587: PWMCON1 = 0x00;
   979  07D2  0194               	clrf	20	;volatile
   980                           
   981                           ;main.c: 588: PWMCON2 = 0x00;
   982  07D3  019D               	clrf	29	;volatile
   983                           
   984                           ;main.c: 589: PWMCON0 = 0x08;
   985  07D4  3008               	movlw	8
   986  07D5  0093               	movwf	19	;volatile
   987                           
   988                           ;main.c: 590: }
   989  07D6  0008               	return
   990  07D7                     l3526:	
   991                           
   992                           ;main.c: 591: else
   993                           ;main.c: 592: {
   994                           ;main.c: 593: PWMCON0 = 0x00;
   995  07D7  0193               	clrf	19	;volatile
   996  07D8  0008               	return
   997  07D9                     __end_of_workCtr:	
   998                           
   999                           	psect	text4
  1000  0547                     __ptext4:	
  1001 ;; *************** function _showCtr *****************
  1002 ;; Defined at:
  1003 ;;		line 496 in file "C:\mcuproject\scm\testTouch\main.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;		None
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;		None
  1008 ;; Return value:  Size  Location     Type
  1009 ;;                  1    wreg      void 
  1010 ;; Registers used:
  1011 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1012 ;; Tracked objects:
  1013 ;;		On entry : 300/0
  1014 ;;		On exit  : 200/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1017 ;;      Params:         0       0       0       0       0
  1018 ;;      Locals:         0       0       0       0       0
  1019 ;;      Temps:          0       0       0       0       0
  1020 ;;      Totals:         0       0       0       0       0
  1021 ;;Total ram usage:        0 bytes
  1022 ;; Hardware stack levels used:    1
  1023 ;; Hardware stack levels required when called:    3
  1024 ;; This function calls:
  1025 ;;		___lbdiv
  1026 ;;		___lbmod
  1027 ;;		_gotoSleep
  1028 ;;		_setZeroStep
  1029 ;; This function is called by:
  1030 ;;		_main
  1031 ;; This function uses a non-reentrant model
  1032 ;;
  1033                           
  1034                           
  1035                           ;psect for function _showCtr
  1036  0547                     _showCtr:	
  1037                           
  1038                           ;main.c: 498: if(workStep > 0)
  1039                           
  1040                           ;incstack = 0
  1041                           ; Regs used in _showCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1042  0547  087B               	movf	_workStep,w
  1043  0548  1903               	btfsc	3,2
  1044  0549  2D64               	goto	l3426
  1045  054A  30FF               	movlw	255
  1046                           
  1047                           ;main.c: 499: {
  1048                           ;main.c: 500: showFlag = 1;
  1049  054B  01E4               	clrf	_showFlag
  1050  054C  0AE4               	incf	_showFlag,f
  1051                           
  1052                           ;main.c: 501: sleepTime = 0;
  1053  054D  01D4               	clrf	_sleepTime
  1054                           
  1055                           ;main.c: 502: showLed1 = 0xFF;
  1056  054E  00E1               	movwf	_showLed1
  1057                           
  1058                           ;main.c: 503: showLed2 = 0xFF;
  1059  054F  00E0               	movwf	_showLed2
  1060                           
  1061                           ;main.c: 504: showShiWei = numArray[workStep / 10];
  1062  0550  300A               	movlw	10
  1063  0551  00F2               	movwf	___lbdiv@divisor
  1064  0552  087B               	movf	_workStep,w
  1065  0553  25AB               	fcall	___lbdiv
  1066  0554  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1067  0555  0084               	movwf	4
  1068  0556  158A  2000  118A   	fcall	stringdir
  1069  0559  00E3               	movwf	_showShiWei
  1070                           
  1071                           ;main.c: 505: showGeWei = numArray[workStep % 10];
  1072  055A  300A               	movlw	10
  1073  055B  00F2               	movwf	___lbmod@divisor
  1074  055C  087B               	movf	_workStep,w
  1075  055D  25C6               	fcall	___lbmod
  1076  055E  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1077  055F  0084               	movwf	4
  1078  0560  158A  2000         	fcall	stringdir
  1079  0562  00E2               	movwf	_showGeWei
  1080                           
  1081                           ;main.c: 506: }
  1082  0563  0008               	return
  1083  0564                     l3426:	
  1084                           
  1085                           ;main.c: 507: else if(ledLightTime > 0)
  1086  0564  0843               	movf	_ledLightTime,w
  1087  0565  0444               	iorwf	_ledLightTime+1,w
  1088  0566  1903               	btfsc	3,2
  1089  0567  2D80               	goto	l3440
  1090  0568  300A               	movlw	10
  1091                           
  1092                           ;main.c: 508: {
  1093                           ;main.c: 509: showFlag = 1;
  1094  0569  01E4               	clrf	_showFlag
  1095  056A  0AE4               	incf	_showFlag,f
  1096                           
  1097                           ;main.c: 510: sleepTime = 0;
  1098  056B  01D4               	clrf	_sleepTime
  1099                           
  1100                           ;main.c: 511: showShiWei = numArray[preBatValue/10];
  1101  056C  00F2               	movwf	___lbdiv@divisor
  1102  056D  0879               	movf	_preBatValue,w
  1103  056E  25AB               	fcall	___lbdiv
  1104  056F  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1105  0570  0084               	movwf	4
  1106  0571  158A  2000  118A   	fcall	stringdir
  1107                           
  1108                           ;main.c: 512: showGeWei = numArray[preBatValue%10];
  1109  0574  268E  118A         	fcall	PL22	;call to abstracted procedure
  1110  0576  25C6               	fcall	___lbmod
  1111  0577  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1112  0578  0084               	movwf	4
  1113  0579  158A  2000         	fcall	stringdir
  1114  057B  00E2               	movwf	_showGeWei
  1115                           
  1116                           ;main.c: 513: showLed1 = 0xFF;
  1117  057C  30FF               	movlw	255
  1118  057D  00E1               	movwf	_showLed1
  1119                           
  1120                           ;main.c: 514: showLed2 = 0xFF;
  1121  057E  00E0               	movwf	_showLed2
  1122                           
  1123                           ;main.c: 515: }
  1124  057F  0008               	return
  1125  0580                     l3440:	
  1126                           
  1127                           ;main.c: 516: else if(chrgFlag)
  1128  0580  085D               	movf	_chrgFlag,w
  1129  0581  1903               	btfsc	3,2
  1130  0582  2D9A               	goto	l3450
  1131  0583  300A               	movlw	10
  1132                           
  1133                           ;main.c: 517: {
  1134                           ;main.c: 518: showFlag = 1;
  1135  0584  01E4               	clrf	_showFlag
  1136  0585  0AE4               	incf	_showFlag,f
  1137                           
  1138                           ;main.c: 519: sleepTime = 0;
  1139  0586  01D4               	clrf	_sleepTime
  1140                           
  1141                           ;main.c: 520: showLed1 = 0x00;
  1142  0587  01E1               	clrf	_showLed1
  1143                           
  1144                           ;main.c: 521: showLed2 = 0x00;
  1145  0588  01E0               	clrf	_showLed2
  1146                           
  1147                           ;main.c: 522: showShiWei = numArray[preBatValue/10];
  1148  0589  00F2               	movwf	___lbdiv@divisor
  1149  058A  0879               	movf	_preBatValue,w
  1150  058B  25AB               	fcall	___lbdiv
  1151  058C  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1152  058D  0084               	movwf	4
  1153  058E  158A  2000  118A   	fcall	stringdir
  1154                           
  1155                           ;main.c: 523: showGeWei = numArray[preBatValue%10];
  1156  0591  268E  118A         	fcall	PL22	;call to abstracted procedure
  1157  0593  25C6               	fcall	___lbmod
  1158  0594  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1159  0595  0084               	movwf	4
  1160  0596  158A  2000         	fcall	stringdir
  1161  0598  00E2               	movwf	_showGeWei
  1162                           
  1163                           ;main.c: 524: }
  1164  0599  0008               	return
  1165  059A                     l3450:	
  1166                           
  1167                           ;main.c: 525: else if(zeroStep > 0)
  1168  059A  087A               	movf	_zeroStep,w
  1169  059B  1903               	btfsc	3,2
  1170  059C  2DA3               	goto	l3458
  1171                           
  1172                           ;main.c: 526: {
  1173                           ;main.c: 527: showFlag = 1;
  1174  059D  01E4               	clrf	_showFlag
  1175  059E  0AE4               	incf	_showFlag,f
  1176                           
  1177                           ;main.c: 528: sleepTime = 0;
  1178  059F  01D4               	clrf	_sleepTime
  1179                           
  1180                           ;main.c: 529: showShiWei = showGeWei = 0;
  1181  05A0  01E2               	clrf	_showGeWei
  1182  05A1  01E3               	clrf	_showShiWei
  1183                           
  1184                           ;main.c: 530: setZeroStep();
  1185  05A2  2E2C               	ljmp	l2972
  1186  05A3                     l3458:	
  1187                           ;main.c: 531: }
  1188                           
  1189  05A3  30C9               	movlw	201
  1190                           
  1191                           ;main.c: 532: else
  1192                           ;main.c: 533: {
  1193                           ;main.c: 534: showFlag = 0;
  1194  05A4  01E4               	clrf	_showFlag
  1195                           
  1196                           ;main.c: 535: if(++sleepTime > 200)
  1197  05A5  0AD4               	incf	_sleepTime,f
  1198  05A6  0254               	subwf	_sleepTime,w
  1199  05A7  1C03               	skipc
  1200  05A8  0008               	return
  1201                           
  1202                           ;main.c: 536: {
  1203                           ;main.c: 537: sleepTime = 0;
  1204  05A9  01D4               	clrf	_sleepTime
  1205                           
  1206                           ;main.c: 538: gotoSleep();
  1207  05AA  2DE2               	ljmp	l3034
  1208  05AB                     __end_of_showCtr:	
  1209  05AB                     __ptext9:	
  1210 ;; *************** function ___lbdiv *****************
  1211 ;; Defined at:
  1212 ;;		line 4 in file "C:\mcuproject\scm\SC8F67XX¿ª·¢°ü\SC8F67XX¿ª·¢°ü\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\c
      +ommon\lbdiv.c"
  1213 ;; Parameters:    Size  Location     Type
  1214 ;;  dividend        1    wreg     unsigned char 
  1215 ;;  divisor         1    2[COMMON] unsigned char 
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;  dividend        1    3[COMMON] unsigned char 
  1218 ;;  quotient        1    5[COMMON] unsigned char 
  1219 ;;  counter         1    4[COMMON] unsigned char 
  1220 ;; Return value:  Size  Location     Type
  1221 ;;                  1    wreg      unsigned char 
  1222 ;; Registers used:
  1223 ;;		wreg, status,2, status,0
  1224 ;; Tracked objects:
  1225 ;;		On entry : 300/0
  1226 ;;		On exit  : 300/0
  1227 ;;		Unchanged: 300/0
  1228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1229 ;;      Params:         1       0       0       0       0
  1230 ;;      Locals:         3       0       0       0       0
  1231 ;;      Temps:          0       0       0       0       0
  1232 ;;      Totals:         4       0       0       0       0
  1233 ;;Total ram usage:        4 bytes
  1234 ;; Hardware stack levels used:    1
  1235 ;; Hardware stack levels required when called:    1
  1236 ;; This function calls:
  1237 ;;		Nothing
  1238 ;; This function is called by:
  1239 ;;		_showCtr
  1240 ;; This function uses a non-reentrant model
  1241 ;;
  1242                           
  1243                           
  1244                           ;psect for function ___lbdiv
  1245  05AB                     ___lbdiv:	
  1246                           
  1247                           ;incstack = 0
  1248                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1249                           ;___lbdiv@dividend stored from wreg
  1250  05AB  00F3               	movwf	___lbdiv@dividend
  1251  05AC  01F5               	clrf	___lbdiv@quotient
  1252  05AD  0872               	movf	___lbdiv@divisor,w
  1253  05AE  1903               	btfsc	3,2
  1254  05AF  2DC4               	goto	l3276
  1255  05B0  01F4               	clrf	___lbdiv@counter
  1256  05B1                     l3262:	
  1257  05B1  0AF4               	incf	___lbdiv@counter,f
  1258  05B2  1BF2               	btfsc	___lbdiv@divisor,7
  1259  05B3  2DB7               	goto	l1850
  1260  05B4  1003               	clrc
  1261  05B5  0DF2               	rlf	___lbdiv@divisor,f
  1262  05B6  2DB1               	goto	l3262
  1263  05B7                     l1850:	
  1264  05B7  1003               	clrc
  1265  05B8  0DF5               	rlf	___lbdiv@quotient,f
  1266  05B9  0872               	movf	___lbdiv@divisor,w
  1267  05BA  0273               	subwf	___lbdiv@dividend,w
  1268  05BB  1C03               	skipc
  1269  05BC  2DC1               	goto	L5
  1270  05BD  0872               	movf	___lbdiv@divisor,w
  1271  05BE  02F3               	subwf	___lbdiv@dividend,f
  1272  05BF  1475               	bsf	___lbdiv@quotient,0
  1273  05C0  1003               	clrc
  1274  05C1                     L5:	
  1275  05C1  0CF2               	rrf	___lbdiv@divisor,f
  1276  05C2  0BF4               	decfsz	___lbdiv@counter,f
  1277  05C3  2DB7               	goto	l1850
  1278  05C4                     l3276:	
  1279  05C4  0875               	movf	___lbdiv@quotient,w
  1280  05C5  0008               	return
  1281  05C6                     __end_of___lbdiv:	
  1282  05C6                     __ptext8:	
  1283 ;; *************** function ___lbmod *****************
  1284 ;; Defined at:
  1285 ;;		line 4 in file "C:\mcuproject\scm\SC8F67XX¿ª·¢°ü\SC8F67XX¿ª·¢°ü\SCMCU_IDE_V2.00.15\SCMCU_IDE_V2.00.15\data\sources\c
      +ommon\lbmod.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;  dividend        1    wreg     unsigned char 
  1288 ;;  divisor         1    2[COMMON] unsigned char 
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;  dividend        1    4[COMMON] unsigned char 
  1291 ;;  rem             1    6[COMMON] unsigned char 
  1292 ;;  counter         1    5[COMMON] unsigned char 
  1293 ;; Return value:  Size  Location     Type
  1294 ;;                  1    wreg      unsigned char 
  1295 ;; Registers used:
  1296 ;;		wreg, status,2, status,0
  1297 ;; Tracked objects:
  1298 ;;		On entry : 300/0
  1299 ;;		On exit  : 300/0
  1300 ;;		Unchanged: 300/0
  1301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1302 ;;      Params:         1       0       0       0       0
  1303 ;;      Locals:         3       0       0       0       0
  1304 ;;      Temps:          1       0       0       0       0
  1305 ;;      Totals:         5       0       0       0       0
  1306 ;;Total ram usage:        5 bytes
  1307 ;; Hardware stack levels used:    1
  1308 ;; Hardware stack levels required when called:    1
  1309 ;; This function calls:
  1310 ;;		Nothing
  1311 ;; This function is called by:
  1312 ;;		_showCtr
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           
  1317                           ;psect for function ___lbmod
  1318  05C6                     ___lbmod:	
  1319                           
  1320                           ;incstack = 0
  1321                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1322                           ;___lbmod@dividend stored from wreg
  1323  05C6  00F4               	movwf	___lbmod@dividend
  1324  05C7  3008               	movlw	8
  1325  05C8  00F5               	movwf	___lbmod@counter
  1326  05C9  01F6               	clrf	___lbmod@rem
  1327  05CA                     l3284:	
  1328  05CA  0874               	movf	___lbmod@dividend,w
  1329  05CB  00F3               	movwf	??___lbmod
  1330  05CC  3007               	movlw	7
  1331  05CD  1003               	clrc
  1332  05CE                     L4:	
  1333  05CE  0CF3               	rrf	??___lbmod,f
  1334  05CF  3EFF               	addlw	-1
  1335  05D0  1003               	clrc
  1336  05D1  1D03               	skipz
  1337  05D2  2DCE               	goto	L4
  1338  05D3  0D76               	rlf	___lbmod@rem,w
  1339  05D4  0473               	iorwf	??___lbmod,w
  1340  05D5  00F6               	movwf	___lbmod@rem
  1341  05D6  1003               	clrc
  1342  05D7  0DF4               	rlf	___lbmod@dividend,f
  1343  05D8  0872               	movf	___lbmod@divisor,w
  1344  05D9  0276               	subwf	___lbmod@rem,w
  1345  05DA  1C03               	skipc
  1346  05DB  2DDE               	goto	l3292
  1347  05DC  0872               	movf	___lbmod@divisor,w
  1348  05DD  02F6               	subwf	___lbmod@rem,f
  1349  05DE                     l3292:	
  1350  05DE  0BF5               	decfsz	___lbmod@counter,f
  1351  05DF  2DCA               	goto	l3284
  1352  05E0  0876               	movf	___lbmod@rem,w
  1353  05E1  0008               	return
  1354  05E2                     __end_of___lbmod:	
  1355  05E2                     __ptext6:	
  1356 ;; *************** function _gotoSleep *****************
  1357 ;; Defined at:
  1358 ;;		line 697 in file "C:\mcuproject\scm\testTouch\main.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  1    wreg      void 
  1365 ;; Registers used:
  1366 ;;		wreg, status,2, status,0, pclath, cstack
  1367 ;; Tracked objects:
  1368 ;;		On entry : 300/0
  1369 ;;		On exit  : 300/100
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1372 ;;      Params:         0       0       0       0       0
  1373 ;;      Locals:         0       0       0       0       0
  1374 ;;      Temps:          0       0       0       0       0
  1375 ;;      Totals:         0       0       0       0       0
  1376 ;;Total ram usage:        0 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; Hardware stack levels required when called:    2
  1379 ;; This function calls:
  1380 ;;		_Init_System
  1381 ;; This function is called by:
  1382 ;;		_showCtr
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           
  1387                           ;psect for function _gotoSleep
  1388  05E2                     _gotoSleep:	
  1389  05E2                     l3034:	
  1390                           ;incstack = 0
  1391                           ; Regs used in _gotoSleep: [wreg+status,2+status,0+pclath+cstack]
  1392                           
  1393                           
  1394                           ;main.c: 699: INTCON = 0;
  1395  05E2  018B               	clrf	11	;volatile
  1396                           
  1397                           ;main.c: 700: PIE1 = 0;
  1398  05E3  018D               	clrf	13	;volatile
  1399                           
  1400                           ;main.c: 701: T2CON = 0;
  1401  05E4  0192               	clrf	18	;volatile
  1402                           
  1403                           ;main.c: 702: OPTION_REG = 0;
  1404  05E5  1683               	bsf	3,5	;RP0=1, select bank1
  1405  05E6  0181               	clrf	1	;volatile
  1406                           
  1407                           ;main.c: 703: PORTA = 0B00000000;
  1408  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  1409  05E8  0185               	clrf	5	;volatile
  1410                           
  1411                           ;main.c: 704: PORTB = 0B10000000;
  1412  05E9  3080               	movlw	128
  1413  05EA  0086               	movwf	6	;volatile
  1414                           
  1415                           ;main.c: 705: PORTC = 0x01;
  1416  05EB  3001               	movlw	1
  1417  05EC  1683               	bsf	3,5	;RP0=1, select bank3
  1418  05ED  1703               	bsf	3,6	;RP1=1, select bank3
  1419  05EE  0085               	movwf	5	;volatile
  1420                           
  1421                           ;main.c: 706: ADCON0 = 0;
  1422  05EF  1303               	bcf	3,6	;RP1=0, select bank1
  1423  05F0  019D               	clrf	29	;volatile
  1424                           
  1425                           ;main.c: 707: PWMCON0 = 0;
  1426  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  1427  05F2  0193               	clrf	19	;volatile
  1428                           
  1429                           ;main.c: 708: EECON1 = 0;
  1430  05F3  1683               	bsf	3,5	;RP0=1, select bank1
  1431  05F4  018C               	clrf	12	;volatile
  1432                           
  1433                           ;main.c: 709: IOCB = 0B00000000;
  1434  05F5  1283               	bcf	3,5	;RP0=0, select bank0
  1435  05F6  0189               	clrf	9	;volatile
  1436                           
  1437                           ;main.c: 710: RBIE = 0;
  1438  05F7  118B               	bcf	11,3	;volatile
  1439                           
  1440                           ;main.c: 711: IOCA = 0x3C;
  1441  05F8  303C               	movlw	60
  1442  05F9  1683               	bsf	3,5	;RP0=1, select bank3
  1443  05FA  1703               	bsf	3,6	;RP1=1, select bank3
  1444  05FB  0088               	movwf	8	;volatile
  1445                           
  1446                           ;main.c: 712: RACIE = 1;
  1447  05FC  1283               	bcf	3,5	;RP0=0, select bank2
  1448  05FD  1488               	bsf	8,1	;volatile
  1449                           
  1450                           ;main.c: 713: GIE = 0;
  1451  05FE  138B               	bcf	11,7	;volatile
  1452                           
  1453                           ;main.c: 714: OSCCON = 0X70;
  1454  05FF  3070               	movlw	112
  1455  0600  1683               	bsf	3,5	;RP0=1, select bank1
  1456  0601  1303               	bcf	3,6	;RP1=0, select bank1
  1457  0602  0088               	movwf	8	;volatile
  1458                           
  1459                           ;main.c: 715: PORTA;
  1460  0603  1283               	bcf	3,5	;RP0=0, select bank0
  1461  0604  0805               	movf	5,w	;volatile
  1462  0605  0064               	clrwdt	;# 
  1463  0606                     STOP:	
  1464                           
  1465                           ;# 
  1466  0606  0000               	nop	;# 
  1467                           
  1468                           ;main.c: 719: Init_System();
  1469  0607  2E08               	ljmp	l2854
  1470  0608                     __end_of_gotoSleep:	
  1471  0608                     __ptext7:	
  1472 ;; *************** function _Init_System *****************
  1473 ;; Defined at:
  1474 ;;		line 60 in file "C:\mcuproject\scm\testTouch\main.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;		None
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;		None
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		wreg, status,2
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 300/100
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1488 ;;      Params:         0       0       0       0       0
  1489 ;;      Locals:         0       0       0       0       0
  1490 ;;      Temps:          0       0       0       0       0
  1491 ;;      Totals:         0       0       0       0       0
  1492 ;;Total ram usage:        0 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    1
  1495 ;; This function calls:
  1496 ;;		Nothing
  1497 ;; This function is called by:
  1498 ;;		_gotoSleep
  1499 ;;		_main
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           
  1504                           ;psect for function _Init_System
  1505  0608                     _Init_System:	
  1506  0608                     l2854:	
  1507                           ;incstack = 0
  1508                           ; Regs used in _Init_System: [wreg+status,2]
  1509                           
  1510  0608  0000               	nop	;# 
  1511  0609  0064               	clrwdt	;# 
  1512                           
  1513                           ;main.c: 63: INTCON = 0;
  1514  060A  018B               	clrf	11	;volatile
  1515                           
  1516                           ;main.c: 64: OSCCON = 0X72;
  1517  060B  3072               	movlw	114
  1518  060C  1683               	bsf	3,5	;RP0=1, select bank1
  1519  060D  1303               	bcf	3,6	;RP1=0, select bank1
  1520  060E  0088               	movwf	8	;volatile
  1521                           
  1522                           ;main.c: 65: OPTION_REG = 0;
  1523  060F  0181               	clrf	1	;volatile
  1524                           
  1525                           ;main.c: 70: TRISA = 0x60;
  1526  0610  3060               	movlw	96
  1527  0611  0085               	movwf	5	;volatile
  1528                           
  1529                           ;main.c: 71: PORTA = 0;
  1530  0612  1283               	bcf	3,5	;RP0=0, select bank0
  1531  0613  0185               	clrf	5	;volatile
  1532                           
  1533                           ;main.c: 72: TRISB = 0x18;
  1534  0614  3018               	movlw	24
  1535  0615  1683               	bsf	3,5	;RP0=1, select bank1
  1536  0616  0086               	movwf	6	;volatile
  1537                           
  1538                           ;main.c: 73: PORTB = 0;
  1539  0617  1283               	bcf	3,5	;RP0=0, select bank0
  1540  0618  0186               	clrf	6	;volatile
  1541                           
  1542                           ;main.c: 74: TRISC = 0;
  1543  0619  1683               	bsf	3,5	;RP0=1, select bank3
  1544  061A  1703               	bsf	3,6	;RP1=1, select bank3
  1545  061B  0186               	clrf	6	;volatile
  1546                           
  1547                           ;main.c: 75: PORTC = 0;
  1548  061C  0185               	clrf	5	;volatile
  1549                           
  1550                           ;main.c: 77: PIE1 = 2;
  1551  061D  3002               	movlw	2
  1552  061E  1283               	bcf	3,5	;RP0=0, select bank0
  1553  061F  1303               	bcf	3,6	;RP1=0, select bank0
  1554  0620  008D               	movwf	13	;volatile
  1555                           
  1556                           ;main.c: 78: PR2 = 250;
  1557  0621  30FA               	movlw	250
  1558  0622  1683               	bsf	3,5	;RP0=1, select bank1
  1559  0623  0091               	movwf	17	;volatile
  1560                           
  1561                           ;main.c: 79: T2CON = 4;
  1562  0624  3004               	movlw	4
  1563  0625  1283               	bcf	3,5	;RP0=0, select bank0
  1564  0626  0092               	movwf	18	;volatile
  1565                           
  1566                           ;main.c: 81: INTCON = 0XC0;
  1567  0627  30C0               	movlw	192
  1568  0628  008B               	movwf	11	;volatile
  1569                           
  1570                           ;main.c: 82: ADON = 1;
  1571  0629  1683               	bsf	3,5	;RP0=1, select bank1
  1572  062A  141D               	bsf	29,0	;volatile
  1573  062B  0008               	return
  1574  062C                     __end_of_Init_System:	
  1575  062C                     __ptext5:	
  1576 ;; *************** function _setZeroStep *****************
  1577 ;; Defined at:
  1578 ;;		line 427 in file "C:\mcuproject\scm\testTouch\main.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;		None
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;		None
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      void 
  1585 ;; Registers used:
  1586 ;;		wreg, status,2, status,0
  1587 ;; Tracked objects:
  1588 ;;		On entry : 300/0
  1589 ;;		On exit  : 300/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1592 ;;      Params:         0       0       0       0       0
  1593 ;;      Locals:         0       0       0       0       0
  1594 ;;      Temps:          0       0       0       0       0
  1595 ;;      Totals:         0       0       0       0       0
  1596 ;;Total ram usage:        0 bytes
  1597 ;; Hardware stack levels used:    1
  1598 ;; Hardware stack levels required when called:    1
  1599 ;; This function calls:
  1600 ;;		Nothing
  1601 ;; This function is called by:
  1602 ;;		_showCtr
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           
  1607                           ;psect for function _setZeroStep
  1608  062C                     _setZeroStep:	
  1609  062C                     l2972:	
  1610                           ;incstack = 0
  1611                           ; Regs used in _setZeroStep: [wreg+status,2+status,0]
  1612                           
  1613                           
  1614                           ;main.c: 429: if(zeroStep == 0)
  1615  062C  087A               	movf	_zeroStep,w
  1616  062D  1D03               	btfss	3,2
  1617  062E  2E32               	goto	l2976
  1618                           
  1619                           ;main.c: 430: {
  1620                           ;main.c: 431: showLed1 = 0x00;
  1621  062F  01E1               	clrf	_showLed1
  1622                           
  1623                           ;main.c: 432: showLed2 = 0x00;
  1624  0630  01E0               	clrf	_showLed2
  1625                           
  1626                           ;main.c: 433: }
  1627  0631  0008               	return
  1628  0632                     l2976:	
  1629                           
  1630                           ;main.c: 434: else if(zeroStep == 1)
  1631  0632  0B7A               	decfsz	_zeroStep,w
  1632  0633  2E3E               	goto	l2982
  1633                           
  1634                           ;main.c: 435: {
  1635                           ;main.c: 436: showLed1 = 0xE1;
  1636  0634  30E1               	movlw	225
  1637  0635  2E3B               	goto	L3
  1638  0636                     l2984:	
  1639                           
  1640                           ;main.c: 440: {
  1641                           ;main.c: 441: showLed1 = 0xE3;
  1642  0636  30E3               	movlw	227
  1643  0637  2E3B               	goto	L3
  1644  0638                     l2990:	
  1645                           
  1646                           ;main.c: 445: {
  1647                           ;main.c: 446: showLed1 = 0xE7;
  1648  0638  30E7               	movlw	231
  1649  0639  2E3B               	goto	L3
  1650  063A                     l2996:	
  1651                           
  1652                           ;main.c: 450: {
  1653                           ;main.c: 451: showLed1 = 0xFF;
  1654  063A  30FF               	movlw	255
  1655  063B                     L3:	
  1656  063B  00E1               	movwf	_showLed1
  1657                           
  1658                           ;main.c: 437: showLed2 = 0x00;
  1659  063C  01E0               	clrf	_showLed2
  1660                           
  1661                           ;main.c: 438: }
  1662  063D  0008               	return
  1663  063E                     l2982:	
  1664                           
  1665                           ;main.c: 439: else if(zeroStep == 2)
  1666  063E  3002               	movlw	2
  1667  063F  067A               	xorwf	_zeroStep,w
  1668  0640  1903               	btfsc	3,2
  1669  0641  2E36               	goto	l2984
  1670                           
  1671                           ;main.c: 444: else if(zeroStep == 3)
  1672  0642  3003               	movlw	3
  1673  0643  067A               	xorwf	_zeroStep,w
  1674  0644  1903               	btfsc	3,2
  1675  0645  2E38               	goto	l2990
  1676                           
  1677                           ;main.c: 449: else if(zeroStep == 4)
  1678  0646  3004               	movlw	4
  1679  0647  067A               	xorwf	_zeroStep,w
  1680  0648  1903               	btfsc	3,2
  1681  0649  2E3A               	goto	l2996
  1682                           
  1683                           ;main.c: 454: else if(zeroStep == 5)
  1684  064A  3005               	movlw	5
  1685  064B  067A               	xorwf	_zeroStep,w
  1686  064C  1D03               	btfss	3,2
  1687  064D  2E53               	goto	l3006
  1688                           
  1689                           ;main.c: 455: {
  1690                           ;main.c: 456: showLed1 = 0xFF;
  1691  064E  30FF               	movlw	255
  1692  064F  00E1               	movwf	_showLed1
  1693                           
  1694                           ;main.c: 457: showLed2 = 0x01;
  1695  0650  01E0               	clrf	_showLed2
  1696  0651  0AE0               	incf	_showLed2,f
  1697                           
  1698                           ;main.c: 458: }
  1699  0652  0008               	return
  1700  0653                     l3006:	
  1701                           
  1702                           ;main.c: 459: else if(zeroStep == 6)
  1703  0653  3006               	movlw	6
  1704  0654  067A               	xorwf	_zeroStep,w
  1705  0655  1D03               	btfss	3,2
  1706  0656  2E5C               	goto	l3010
  1707                           
  1708                           ;main.c: 460: {
  1709                           ;main.c: 461: showLed1 = 0xFF;
  1710  0657  30FF               	movlw	255
  1711  0658  00E1               	movwf	_showLed1
  1712                           
  1713                           ;main.c: 462: showLed2 = 0x03;
  1714  0659  3003               	movlw	3
  1715  065A  00E0               	movwf	_showLed2
  1716                           
  1717                           ;main.c: 463: }
  1718  065B  0008               	return
  1719  065C                     l3010:	
  1720                           
  1721                           ;main.c: 464: else if(zeroStep == 7)
  1722  065C  3007               	movlw	7
  1723  065D  067A               	xorwf	_zeroStep,w
  1724  065E  1D03               	btfss	3,2
  1725  065F  2E65               	goto	l3014
  1726                           
  1727                           ;main.c: 465: {
  1728                           ;main.c: 466: showLed1 = 0xFF;
  1729  0660  30FF               	movlw	255
  1730  0661  00E1               	movwf	_showLed1
  1731                           
  1732                           ;main.c: 467: showLed2 = 0x07;
  1733  0662  3007               	movlw	7
  1734  0663  00E0               	movwf	_showLed2
  1735                           
  1736                           ;main.c: 468: }
  1737  0664  0008               	return
  1738  0665                     l3014:	
  1739                           
  1740                           ;main.c: 469: else if(zeroStep == 8)
  1741  0665  3008               	movlw	8
  1742  0666  067A               	xorwf	_zeroStep,w
  1743  0667  1D03               	btfss	3,2
  1744  0668  2E6E               	goto	l3018
  1745                           
  1746                           ;main.c: 470: {
  1747                           ;main.c: 471: showLed1 = 0xFF;
  1748  0669  30FF               	movlw	255
  1749  066A  00E1               	movwf	_showLed1
  1750                           
  1751                           ;main.c: 472: showLed2 = 0x0F;
  1752  066B  300F               	movlw	15
  1753  066C  00E0               	movwf	_showLed2
  1754                           
  1755                           ;main.c: 473: }
  1756  066D  0008               	return
  1757  066E                     l3018:	
  1758                           
  1759                           ;main.c: 474: else if(zeroStep == 9)
  1760  066E  3009               	movlw	9
  1761  066F  067A               	xorwf	_zeroStep,w
  1762  0670  1D03               	btfss	3,2
  1763  0671  2E77               	goto	l3022
  1764                           
  1765                           ;main.c: 475: {
  1766                           ;main.c: 476: showLed1 = 0xFF;
  1767  0672  30FF               	movlw	255
  1768  0673  00E1               	movwf	_showLed1
  1769                           
  1770                           ;main.c: 477: showLed2 = 0x2F;
  1771  0674  302F               	movlw	47
  1772  0675  00E0               	movwf	_showLed2
  1773                           
  1774                           ;main.c: 478: }
  1775  0676  0008               	return
  1776  0677                     l3022:	
  1777                           
  1778                           ;main.c: 479: else if(zeroStep == 10)
  1779  0677  300A               	movlw	10
  1780  0678  067A               	xorwf	_zeroStep,w
  1781  0679  1D03               	btfss	3,2
  1782  067A  2E80               	goto	l3026
  1783                           
  1784                           ;main.c: 480: {
  1785                           ;main.c: 481: showLed1 = 0xFF;
  1786  067B  30FF               	movlw	255
  1787  067C  00E1               	movwf	_showLed1
  1788                           
  1789                           ;main.c: 482: showLed2 = 0x6F;
  1790  067D  306F               	movlw	111
  1791  067E  00E0               	movwf	_showLed2
  1792                           
  1793                           ;main.c: 483: }
  1794  067F  0008               	return
  1795  0680                     l3026:	
  1796                           
  1797                           ;main.c: 484: else if(zeroStep == 11)
  1798  0680  300B               	movlw	11
  1799  0681  067A               	xorwf	_zeroStep,w
  1800  0682  1D03               	btfss	3,2
  1801  0683  2E89               	goto	l3030
  1802  0684                     l3028:	
  1803                           
  1804                           ;main.c: 485: {
  1805                           ;main.c: 486: showLed1 = 0xFF;
  1806  0684  30FF               	movlw	255
  1807  0685  00E1               	movwf	_showLed1
  1808                           
  1809                           ;main.c: 487: showLed2 = 0xEF;
  1810  0686  30EF               	movlw	239
  1811  0687  00E0               	movwf	_showLed2
  1812                           
  1813                           ;main.c: 488: }
  1814  0688  0008               	return
  1815  0689                     l3030:	
  1816                           
  1817                           ;main.c: 489: else if(zeroStep == 12)
  1818  0689  300C               	movlw	12
  1819  068A  067A               	xorwf	_zeroStep,w
  1820  068B  1D03               	btfss	3,2
  1821  068C  0008               	return
  1822  068D  2E84               	goto	l3028
  1823  068E                     __end_of_setZeroStep:	
  1824  068E                     PL22:	
  1825  068E  00E3               	movwf	_showShiWei
  1826  068F  300A               	movlw	10
  1827  0690  00F2               	movwf	___lbmod@divisor
  1828  0691  0879               	movf	_preBatValue,w
  1829  0692  0008               	return
  1830  0693                     __end_ofPL22:	
  1831                           
  1832                           	psect	text15
  1833  0693                     __ptext15:	
  1834 ;; *************** function _chrgCtr *****************
  1835 ;; Defined at:
  1836 ;;		line 597 in file "C:\mcuproject\scm\testTouch\main.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;		None
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;		None
  1841 ;; Return value:  Size  Location     Type
  1842 ;;                  1    wreg      void 
  1843 ;; Registers used:
  1844 ;;		wreg, status,2, status,0, pclath, cstack
  1845 ;; Tracked objects:
  1846 ;;		On entry : 300/0
  1847 ;;		On exit  : 300/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1850 ;;      Params:         0       0       0       0       0
  1851 ;;      Locals:         0       0       0       0       0
  1852 ;;      Temps:          0       0       0       0       0
  1853 ;;      Totals:         0       0       0       0       0
  1854 ;;Total ram usage:        0 bytes
  1855 ;; Hardware stack levels used:    1
  1856 ;; Hardware stack levels required when called:    3
  1857 ;; This function calls:
  1858 ;;		_checkChrgAD
  1859 ;; This function is called by:
  1860 ;;		_main
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           
  1865                           ;psect for function _chrgCtr
  1866  0693                     _chrgCtr:	
  1867                           
  1868                           ;main.c: 599: if(0x20 & PORTA)
  1869                           
  1870                           ;incstack = 0
  1871                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1872  0693  1E85               	btfss	5,5	;volatile
  1873  0694  2EB5               	goto	l3548
  1874                           
  1875                           ;main.c: 600: {
  1876                           ;main.c: 601: checkChrgAD();
  1877  0695  26BC  118A         	fcall	_checkChrgAD
  1878  0697  3006               	movlw	6
  1879                           
  1880                           ;main.c: 602: chrgFlag = 1;
  1881  0698  01DD               	clrf	_chrgFlag
  1882  0699  0ADD               	incf	_chrgFlag,f
  1883                           
  1884                           ;main.c: 603: workStep = 0;
  1885  069A  01FB               	clrf	_workStep
  1886                           
  1887                           ;main.c: 604: ledLightTime = 0;
  1888  069B  01C3               	clrf	_ledLightTime
  1889  069C  01C4               	clrf	_ledLightTime+1
  1890                           
  1891                           ;main.c: 605: if(batResult > 1545)
  1892  069D  0242               	subwf	_batResult+1,w
  1893  069E  300A               	movlw	10
  1894  069F  1903               	skipnz
  1895  06A0  0241               	subwf	_batResult,w
  1896  06A1  1C03               	skipc
  1897  06A2  2EB2               	goto	l3546
  1898                           
  1899                           ;main.c: 606: {
  1900                           ;main.c: 607: if(++chrgFullTime > 2500)
  1901  06A3  0ABD               	incf	_chrgFullTime,f
  1902  06A4  1903               	skipnz
  1903  06A5  0ABE               	incf	_chrgFullTime+1,f
  1904  06A6  3009               	movlw	9
  1905  06A7  023E               	subwf	_chrgFullTime+1,w
  1906  06A8  30C5               	movlw	197
  1907  06A9  1903               	skipnz
  1908  06AA  023D               	subwf	_chrgFullTime,w
  1909  06AB  1C03               	skipc
  1910  06AC  0008               	return
  1911                           
  1912                           ;main.c: 608: {
  1913                           ;main.c: 609: chrgFullTime = 0;
  1914  06AD  01BD               	clrf	_chrgFullTime
  1915  06AE  01BE               	clrf	_chrgFullTime+1
  1916                           
  1917                           ;main.c: 610: chrgFullFlag = 1;
  1918  06AF  01DA               	clrf	_chrgFullFlag
  1919  06B0  0ADA               	incf	_chrgFullFlag,f
  1920  06B1  0008               	return
  1921  06B2                     l3546:	
  1922                           
  1923                           ;main.c: 613: else
  1924                           ;main.c: 614: {
  1925                           ;main.c: 615: chrgFullTime = 0;
  1926  06B2  01BD               	clrf	_chrgFullTime
  1927  06B3  01BE               	clrf	_chrgFullTime+1
  1928  06B4  0008               	return
  1929  06B5                     l3548:	
  1930                           
  1931                           ;main.c: 618: else
  1932                           ;main.c: 619: {
  1933                           ;main.c: 620: chrgFlag = 0;
  1934  06B5  01DD               	clrf	_chrgFlag
  1935                           
  1936                           ;main.c: 621: chrgFullFlag = 0;
  1937  06B6  01DA               	clrf	_chrgFullFlag
  1938                           
  1939                           ;main.c: 622: chrgFullTime = 0;
  1940  06B7  01BD               	clrf	_chrgFullTime
  1941  06B8  01BE               	clrf	_chrgFullTime+1
  1942                           
  1943                           ;main.c: 623: chrgDuty = 0;
  1944  06B9  01D9               	clrf	_chrgDuty
  1945                           
  1946                           ;main.c: 624: chrgLockFlag = 0;
  1947  06BA  01D5               	clrf	_chrgLockFlag
  1948  06BB  0008               	return
  1949  06BC                     __end_of_chrgCtr:	
  1950  06BC                     __ptext16:	
  1951 ;; *************** function _checkChrgAD *****************
  1952 ;; Defined at:
  1953 ;;		line 251 in file "C:\mcuproject\scm\testTouch\main.c"
  1954 ;; Parameters:    Size  Location     Type
  1955 ;;		None
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;		None
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  1    wreg      void 
  1960 ;; Registers used:
  1961 ;;		wreg, status,2, status,0, pclath, cstack
  1962 ;; Tracked objects:
  1963 ;;		On entry : 300/0
  1964 ;;		On exit  : 300/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1967 ;;      Params:         0       0       0       0       0
  1968 ;;      Locals:         0       0       0       0       0
  1969 ;;      Temps:          0       0       0       0       0
  1970 ;;      Totals:         0       0       0       0       0
  1971 ;;Total ram usage:        0 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; Hardware stack levels required when called:    2
  1974 ;; This function calls:
  1975 ;;		_Read_ADC
  1976 ;; This function is called by:
  1977 ;;		_chrgCtr
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           
  1982                           ;psect for function _checkChrgAD
  1983  06BC                     _checkChrgAD:	
  1984                           
  1985                           ;incstack = 0
  1986                           ; Regs used in _checkChrgAD: [wreg+status,2+status,0+pclath+cstack]
  1987  06BC  3010               	movlw	16
  1988                           
  1989                           ;main.c: 253: chrgResult = Read_ADC(16,1);
  1990  06BD  01F2               	clrf	Read_ADC@ADCLDORef
  1991  06BE  0AF2               	incf	Read_ADC@ADCLDORef,f
  1992  06BF  2703               	fcall	_Read_ADC
  1993  06C0  0873               	movf	?_Read_ADC+1,w
  1994  06C1  00C0               	movwf	_chrgResult+1
  1995  06C2  0872               	movf	?_Read_ADC,w
  1996  06C3  00BF               	movwf	_chrgResult
  1997  06C4  0008               	return
  1998  06C5                     __end_of_checkChrgAD:	
  1999  06C5                     __ptext17:	
  2000 ;; *************** function _checkBat *****************
  2001 ;; Defined at:
  2002 ;;		line 256 in file "C:\mcuproject\scm\testTouch\main.c"
  2003 ;; Parameters:    Size  Location     Type
  2004 ;;		None
  2005 ;; Auto vars:     Size  Location     Type
  2006 ;;		None
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  1    wreg      void 
  2009 ;; Registers used:
  2010 ;;		wreg, status,2, status,0, pclath, cstack
  2011 ;; Tracked objects:
  2012 ;;		On entry : 300/0
  2013 ;;		On exit  : 300/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2016 ;;      Params:         0       0       0       0       0
  2017 ;;      Locals:         0       0       0       0       0
  2018 ;;      Temps:          2       0       0       0       0
  2019 ;;      Totals:         2       0       0       0       0
  2020 ;;Total ram usage:        2 bytes
  2021 ;; Hardware stack levels used:    1
  2022 ;; Hardware stack levels required when called:    2
  2023 ;; This function calls:
  2024 ;;		_Read_ADC
  2025 ;; This function is called by:
  2026 ;;		_main
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           
  2031                           ;psect for function _checkBat
  2032  06C5                     _checkBat:	
  2033                           
  2034                           ;incstack = 0
  2035                           ; Regs used in _checkBat: [wreg+status,2+status,0+pclath+cstack]
  2036  06C5  300A               	movlw	10
  2037                           
  2038                           ;main.c: 258: batResult = Read_ADC(10,1);
  2039  06C6  01F2               	clrf	Read_ADC@ADCLDORef
  2040  06C7  0AF2               	incf	Read_ADC@ADCLDORef,f
  2041  06C8  2703  118A         	fcall	_Read_ADC
  2042  06CA  0873               	movf	?_Read_ADC+1,w
  2043  06CB  00C2               	movwf	_batResult+1
  2044  06CC  0872               	movf	?_Read_ADC,w
  2045  06CD  00C1               	movwf	_batResult
  2046                           
  2047                           ;main.c: 259: if(batResult < 1118)
  2048  06CE  3004               	movlw	4
  2049  06CF  0242               	subwf	_batResult+1,w
  2050  06D0  305E               	movlw	94
  2051  06D1  1903               	skipnz
  2052  06D2  0241               	subwf	_batResult,w
  2053  06D3  1803               	skipnc
  2054  06D4  2ED7               	goto	l3400
  2055                           
  2056                           ;main.c: 260: {
  2057                           ;main.c: 261: batValue = 0;
  2058  06D5  01DC               	clrf	_batValue
  2059                           
  2060                           ;main.c: 262: }
  2061  06D6  0008               	return
  2062  06D7                     l3400:	
  2063                           
  2064                           ;main.c: 263: else
  2065                           ;main.c: 264: {
  2066                           ;main.c: 265: if(batResult >= 1340)
  2067  06D7  3005               	movlw	5
  2068  06D8  0242               	subwf	_batResult+1,w
  2069  06D9  303C               	movlw	60
  2070  06DA  1903               	skipnz
  2071  06DB  0241               	subwf	_batResult,w
  2072                           
  2073                           ;main.c: 266: {
  2074                           ;main.c: 267: batValue = ((batResult - 1340) /2) + 16;
  2075  06DC  0841               	movf	_batResult,w
  2076  06DD  1C03               	skipc
  2077  06DE  2EEC               	goto	L8
  2078  06DF  3EC4               	addlw	196
  2079  06E0  00F6               	movwf	??_checkBat
  2080  06E1  0842               	movf	_batResult+1,w
  2081  06E2  1803               	skipnc
  2082  06E3  3E01               	addlw	1
  2083  06E4  3EFA               	addlw	250
  2084  06E5  00F7               	movwf	??_checkBat+1
  2085  06E6  1003               	clrc
  2086  06E7  0CF7               	rrf	??_checkBat+1,f
  2087  06E8  0CF6               	rrf	??_checkBat,f
  2088  06E9  0876               	movf	??_checkBat,w
  2089  06EA  3E10               	addlw	16
  2090  06EB  2EFB               	goto	L7
  2091  06EC                     L8:	
  2092                           ;main.c: 269: else
  2093                           ;main.c: 270: {
  2094                           ;main.c: 271: batValue = (batResult - 1118) / 16;
  2095                           
  2096                           ;main.c: 268: }
  2097                           
  2098  06EC  3EA2               	addlw	162
  2099  06ED  00F6               	movwf	??_checkBat
  2100  06EE  0842               	movf	_batResult+1,w
  2101  06EF  1803               	skipnc
  2102  06F0  3E01               	addlw	1
  2103  06F1  3EFB               	addlw	251
  2104  06F2  00F7               	movwf	??_checkBat+1
  2105  06F3  3004               	movlw	4
  2106  06F4                     u2305:	
  2107  06F4  1003               	clrc
  2108  06F5  0CF7               	rrf	??_checkBat+1,f
  2109  06F6  0CF6               	rrf	??_checkBat,f
  2110  06F7  3EFF               	addlw	-1
  2111  06F8  1D03               	skipz
  2112  06F9  2EF4               	goto	u2305
  2113  06FA  0876               	movf	??_checkBat,w
  2114  06FB                     L7:	
  2115  06FB  00DC               	movwf	_batValue
  2116                           
  2117                           ;main.c: 272: }
  2118                           ;main.c: 274: if(batValue > 99)
  2119  06FC  3064               	movlw	100
  2120  06FD  025C               	subwf	_batValue,w
  2121  06FE  1C03               	skipc
  2122  06FF  0008               	return
  2123                           
  2124                           ;main.c: 275: batValue = 99;
  2125  0700  3063               	movlw	99
  2126  0701  00DC               	movwf	_batValue
  2127  0702  0008               	return
  2128  0703                     __end_of_checkBat:	
  2129  0703                     __ptext18:	
  2130 ;; *************** function _Read_ADC *****************
  2131 ;; Defined at:
  2132 ;;		line 206 in file "C:\mcuproject\scm\testTouch\main.c"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;  ADCchannel      1    wreg     unsigned char 
  2135 ;;  ADCLDORef       1    2[COMMON] unsigned char 
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;  ADCchannel      1    5[BANK0 ] unsigned char 
  2138 ;;  Adc_Result      2    2[BANK0 ] unsigned int 
  2139 ;;  Adc_ResultSu    2    0[BANK0 ] unsigned int 
  2140 ;;  j               1    6[BANK0 ] unsigned char 
  2141 ;;  i               1    4[BANK0 ] unsigned char 
  2142 ;; Return value:  Size  Location     Type
  2143 ;;                  2    2[COMMON] unsigned int 
  2144 ;; Registers used:
  2145 ;;		wreg, status,2, status,0
  2146 ;; Tracked objects:
  2147 ;;		On entry : 300/0
  2148 ;;		On exit  : 300/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2151 ;;      Params:         2       0       0       0       0
  2152 ;;      Locals:         0       7       0       0       0
  2153 ;;      Temps:          2       0       0       0       0
  2154 ;;      Totals:         4       7       0       0       0
  2155 ;;Total ram usage:       11 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    1
  2158 ;; This function calls:
  2159 ;;		Nothing
  2160 ;; This function is called by:
  2161 ;;		_checkChrgAD
  2162 ;;		_checkBat
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           
  2167                           ;psect for function _Read_ADC
  2168  0703                     _Read_ADC:	
  2169                           
  2170                           ;incstack = 0
  2171                           ; Regs used in _Read_ADC: [wreg+status,2+status,0]
  2172                           ;Read_ADC@ADCchannel stored from wreg
  2173  0703  00EC               	movwf	Read_ADC@ADCchannel
  2174  0704  30C8               	movlw	200
  2175                           
  2176                           ;main.c: 208: unsigned int Adc_Result;
  2177                           ;main.c: 209: unsigned int Adc_ResultSum = 0;
  2178  0705  01E7               	clrf	Read_ADC@Adc_ResultSum
  2179  0706  01E8               	clrf	Read_ADC@Adc_ResultSum+1
  2180                           
  2181                           ;main.c: 210: unsigned char i=200;
  2182  0707  00EB               	movwf	Read_ADC@i
  2183                           
  2184                           ;main.c: 212: for(j=0;j<8;j++)
  2185  0708  01ED               	clrf	Read_ADC@j
  2186  0709                     l2888:	
  2187                           
  2188                           ;main.c: 213: {
  2189                           ;main.c: 214: if(ADCLDORef==0)
  2190  0709  0872               	movf	Read_ADC@ADCLDORef,w
  2191  070A  1D03               	btfss	3,2
  2192  070B  2F0F               	goto	l2892
  2193                           
  2194                           ;main.c: 215: {
  2195                           ;main.c: 216: ADCON1 = 0B00000000;
  2196  070C  1683               	bsf	3,5	;RP0=1, select bank1
  2197  070D  019C               	clrf	28	;volatile
  2198                           
  2199                           ;main.c: 217: }
  2200  070E  2F16               	goto	l2898
  2201  070F                     l2892:	
  2202                           
  2203                           ;main.c: 218: else if(ADCLDORef==1)
  2204  070F  0B72               	decfsz	Read_ADC@ADCLDORef,w
  2205  0710  2F13               	goto	l2896
  2206                           
  2207                           ;main.c: 219: {
  2208                           ;main.c: 220: ADCON1 = 0B00000101;
  2209  0711  3005               	movlw	5
  2210  0712  2F14               	goto	L10
  2211  0713                     l2896:	
  2212                           ;main.c: 221: }
  2213                           
  2214                           
  2215                           ;main.c: 222: else
  2216                           ;main.c: 223: {
  2217                           ;main.c: 224: ADCON1 = 0B00000110;
  2218  0713  3006               	movlw	6
  2219  0714                     L10:	
  2220  0714  1683               	bsf	3,5	;RP0=1, select bank1
  2221  0715  009C               	movwf	28	;volatile
  2222  0716                     l2898:	
  2223                           
  2224                           ;main.c: 225: }
  2225                           ;main.c: 227: CHS4 = 0;
  2226  0716  131C               	bcf	28,6	;volatile
  2227                           
  2228                           ;main.c: 228: if(ADCchannel >=16)
  2229  0717  3010               	movlw	16
  2230  0718  1283               	bcf	3,5	;RP0=0, select bank0
  2231  0719  026C               	subwf	Read_ADC@ADCchannel,w
  2232  071A  1C03               	skipc
  2233  071B  2F20               	goto	l1215
  2234                           
  2235                           ;main.c: 229: {
  2236                           ;main.c: 230: ADCchannel -= 16;
  2237  071C  3010               	movlw	16
  2238  071D  02EC               	subwf	Read_ADC@ADCchannel,f
  2239                           
  2240                           ;main.c: 231: CHS4 = 1;
  2241  071E  1683               	bsf	3,5	;RP0=1, select bank1
  2242  071F  171C               	bsf	28,6	;volatile
  2243  0720                     l1215:	
  2244                           
  2245                           ;main.c: 232: }
  2246                           ;main.c: 234: ADCON0 &= 0b11000011;
  2247  0720  30C3               	movlw	195
  2248  0721  1683               	bsf	3,5	;RP0=1, select bank1
  2249  0722  059D               	andwf	29,f	;volatile
  2250                           
  2251                           ;main.c: 235: ADCON0 |= ADCchannel<<2;
  2252  0723  1283               	bcf	3,5	;RP0=0, select bank0
  2253  0724  086C               	movf	Read_ADC@ADCchannel,w
  2254  0725  00F4               	movwf	??_Read_ADC
  2255  0726  3001               	movlw	1
  2256  0727  1003               	clrc
  2257  0728                     L9:	
  2258  0728  0DF4               	rlf	??_Read_ADC,f
  2259  0729  3EFF               	addlw	-1
  2260  072A  1003               	clrc
  2261  072B  1D03               	skipz
  2262  072C  2F28               	goto	L9
  2263  072D  0D74               	rlf	??_Read_ADC,w
  2264  072E  1683               	bsf	3,5	;RP0=1, select bank1
  2265  072F  049D               	iorwf	29,f	;volatile
  2266  0730  0000               	nop	;# 
  2267                           
  2268                           ;main.c: 237: GODONE = 1;
  2269  0731  1683               	bsf	3,5	;RP0=1, select bank1
  2270  0732  1303               	bcf	3,6	;RP1=0, select bank1
  2271  0733  149D               	bsf	29,1	;volatile
  2272                           
  2273                           ;main.c: 238: while(GODONE==1&&i>0)
  2274  0734  2F3B               	goto	l2908
  2275  0735                     l2910:	
  2276  0735  1283               	bcf	3,5	;RP0=0, select bank0
  2277  0736  086B               	movf	Read_ADC@i,w
  2278  0737  1903               	btfsc	3,2
  2279  0738  2F3F               	goto	l2912
  2280                           
  2281                           ;main.c: 239: {
  2282                           ;main.c: 240: i--;
  2283  0739  03EB               	decf	Read_ADC@i,f
  2284  073A  0000               	nop	;# 
  2285  073B                     l2908:	
  2286  073B  1683               	bsf	3,5	;RP0=1, select bank1
  2287  073C  1303               	bcf	3,6	;RP1=0, select bank1
  2288  073D  189D               	btfsc	29,1	;volatile
  2289  073E  2F35               	goto	l2910
  2290  073F                     l2912:	
  2291                           
  2292                           ;main.c: 242: }
  2293                           ;main.c: 243: Adc_Result = ADRESH<<4;
  2294  073F  1683               	bsf	3,5	;RP0=1, select bank1
  2295  0740  081F               	movf	31,w	;volatile
  2296  0741  1283               	bcf	3,5	;RP0=0, select bank0
  2297  0742  00E9               	movwf	Read_ADC@Adc_Result
  2298  0743  30F0               	movlw	240
  2299  0744  01EA               	clrf	Read_ADC@Adc_Result+1
  2300  0745  0EE9               	swapf	Read_ADC@Adc_Result,f
  2301  0746  0EEA               	swapf	Read_ADC@Adc_Result+1,f
  2302  0747  05EA               	andwf	Read_ADC@Adc_Result+1,f
  2303  0748  0869               	movf	Read_ADC@Adc_Result,w
  2304  0749  390F               	andlw	15
  2305  074A  04EA               	iorwf	Read_ADC@Adc_Result+1,f
  2306  074B  30F0               	movlw	240
  2307  074C  05E9               	andwf	Read_ADC@Adc_Result,f
  2308                           
  2309                           ;main.c: 244: Adc_Result += ADRESL>>4;
  2310  074D  1683               	bsf	3,5	;RP0=1, select bank1
  2311  074E  0E1E               	swapf	30,w	;volatile
  2312  074F  390F               	andlw	15
  2313  0750  1283               	bcf	3,5	;RP0=0, select bank0
  2314  0751  07E9               	addwf	Read_ADC@Adc_Result,f
  2315  0752  1803               	skipnc
  2316  0753  0AEA               	incf	Read_ADC@Adc_Result+1,f
  2317                           
  2318                           ;main.c: 245: Adc_ResultSum += Adc_Result;
  2319  0754  0869               	movf	Read_ADC@Adc_Result,w
  2320  0755  07E7               	addwf	Read_ADC@Adc_ResultSum,f
  2321  0756  1803               	skipnc
  2322  0757  0AE8               	incf	Read_ADC@Adc_ResultSum+1,f
  2323  0758  086A               	movf	Read_ADC@Adc_Result+1,w
  2324  0759  07E8               	addwf	Read_ADC@Adc_ResultSum+1,f
  2325  075A  3008               	movlw	8
  2326  075B  0AED               	incf	Read_ADC@j,f
  2327  075C  026D               	subwf	Read_ADC@j,w
  2328  075D  1C03               	skipc
  2329  075E  2F09               	goto	l2888
  2330                           
  2331                           ;main.c: 246: }
  2332                           ;main.c: 247: return Adc_ResultSum/8;
  2333  075F  0868               	movf	Read_ADC@Adc_ResultSum+1,w
  2334  0760  00F5               	movwf	??_Read_ADC+1
  2335  0761  0867               	movf	Read_ADC@Adc_ResultSum,w
  2336  0762  00F4               	movwf	??_Read_ADC
  2337  0763  1003               	clrc
  2338  0764  0CF5               	rrf	??_Read_ADC+1,f
  2339  0765  0CF4               	rrf	??_Read_ADC,f
  2340  0766  1003               	clrc
  2341  0767  0CF5               	rrf	??_Read_ADC+1,f
  2342  0768  0CF4               	rrf	??_Read_ADC,f
  2343  0769  1003               	clrc
  2344  076A  0CF5               	rrf	??_Read_ADC+1,f
  2345  076B  0CF4               	rrf	??_Read_ADC,f
  2346  076C  0874               	movf	??_Read_ADC,w
  2347  076D  00F2               	movwf	?_Read_ADC
  2348  076E  0875               	movf	??_Read_ADC+1,w
  2349  076F  00F3               	movwf	?_Read_ADC+1
  2350  0770  0008               	return
  2351  0771                     __end_of_Read_ADC:	
  2352                           
  2353                           	psect	text19
  2354  0FD6                     __ptext19:	
  2355 ;; *************** function _Refurbish_Sfr *****************
  2356 ;; Defined at:
  2357 ;;		line 93 in file "C:\mcuproject\scm\testTouch\main.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;		None
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;		None
  2362 ;; Return value:  Size  Location     Type
  2363 ;;                  1    wreg      void 
  2364 ;; Registers used:
  2365 ;;		wreg, status,2, status,0
  2366 ;; Tracked objects:
  2367 ;;		On entry : B00/0
  2368 ;;		On exit  : B00/0
  2369 ;;		Unchanged: 800/0
  2370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2371 ;;      Params:         0       0       0       0       0
  2372 ;;      Locals:         0       0       0       0       0
  2373 ;;      Temps:          0       0       0       0       0
  2374 ;;      Totals:         0       0       0       0       0
  2375 ;;Total ram usage:        0 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    1
  2378 ;; This function calls:
  2379 ;;		Nothing
  2380 ;; This function is called by:
  2381 ;;		_main
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           
  2386                           ;psect for function _Refurbish_Sfr
  2387  0FD6                     _Refurbish_Sfr:	
  2388                           
  2389                           ;main.c: 95: PIE1 = 2;
  2390                           
  2391                           ;incstack = 0
  2392                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  2393  0FD6  3002               	movlw	2
  2394  0FD7  008D               	movwf	13	;volatile
  2395                           
  2396                           ;main.c: 96: PR2 = 250;
  2397  0FD8  30FA               	movlw	250
  2398  0FD9  1683               	bsf	3,5	;RP0=1, select bank1
  2399  0FDA  0091               	movwf	17	;volatile
  2400                           
  2401                           ;main.c: 97: INTCON = 0XC0;
  2402  0FDB  30C0               	movlw	192
  2403  0FDC  008B               	movwf	11	;volatile
  2404                           
  2405                           ;main.c: 98: if (4 != T2CON)
  2406  0FDD  3004               	movlw	4
  2407  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  2408  0FDF  0612               	xorwf	18,w	;volatile
  2409  0FE0  1903               	btfsc	3,2
  2410  0FE1  0008               	return
  2411                           
  2412                           ;main.c: 99: T2CON = 4;
  2413  0FE2  3004               	movlw	4
  2414  0FE3  0092               	movwf	18	;volatile
  2415  0FE4  0008               	return
  2416  0FE5                     __end_of_Refurbish_Sfr:	
  2417                           
  2418                           	psect	text20
  2419  02D9                     __ptext20:	
  2420 ;; *************** function _KeyServer *****************
  2421 ;; Defined at:
  2422 ;;		line 106 in file "C:\mcuproject\scm\testTouch\main.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;		None
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;		None
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      void 
  2429 ;; Registers used:
  2430 ;;		wreg, status,2, status,0
  2431 ;; Tracked objects:
  2432 ;;		On entry : 300/0
  2433 ;;		On exit  : 300/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2436 ;;      Params:         0       0       0       0       0
  2437 ;;      Locals:         0       0       0       0       0
  2438 ;;      Temps:          0       0       0       0       0
  2439 ;;      Totals:         0       0       0       0       0
  2440 ;;Total ram usage:        0 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    1
  2443 ;; This function calls:
  2444 ;;		Nothing
  2445 ;; This function is called by:
  2446 ;;		_main
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           
  2451                           ;psect for function _KeyServer
  2452  02D9                     _KeyServer:	
  2453                           
  2454                           ;main.c: 109: NoTouchTime = 0;
  2455                           
  2456                           ;incstack = 0
  2457                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  2458  02D9  084D               	movf	_KeyFlag,w	;volatile
  2459  02DA  1903               	btfsc	3,2
  2460  02DB  2B47               	goto	l3362
  2461                           
  2462                           ;main.c: 110: if ((KeyFlag[0] & 0x2)) {
  2463  02DC  1CCD               	btfss	_KeyFlag,1	;volatile
  2464  02DD  2AF6               	goto	l3318
  2465                           
  2466                           ;main.c: 112: if(++keyCount1 > 100)
  2467  02DE  0AC9               	incf	_keyCount1,f
  2468  02DF  1903               	skipnz
  2469  02E0  0ACA               	incf	_keyCount1+1,f
  2470  02E1  3000               	movlw	0
  2471  02E2  024A               	subwf	_keyCount1+1,w
  2472  02E3  3065               	movlw	101
  2473  02E4  1903               	skipnz
  2474  02E5  0249               	subwf	_keyCount1,w
  2475  02E6  1C03               	skipc
  2476  02E7  2AF6               	goto	l3318
  2477                           
  2478                           ;main.c: 113: {
  2479                           ;main.c: 114: keyCount1 = 100;
  2480  02E8  3064               	movlw	100
  2481  02E9  00C9               	movwf	_keyCount1
  2482  02EA  3002               	movlw	2
  2483  02EB  01CA               	clrf	_keyCount1+1
  2484                           
  2485                           ;main.c: 115: if(workStep > 1 && ++count50 > 25)
  2486  02EC  027B               	subwf	_workStep,w
  2487  02ED  1C03               	skipc
  2488  02EE  2AF6               	goto	l3318
  2489  02EF  301A               	movlw	26
  2490  02F0  0ADB               	incf	_count50,f
  2491  02F1  025B               	subwf	_count50,w
  2492  02F2  1C03               	skipc
  2493  02F3  2AF6               	goto	l3318
  2494                           
  2495                           ;main.c: 116: {
  2496                           ;main.c: 117: workStep--;
  2497  02F4  03FB               	decf	_workStep,f
  2498                           
  2499                           ;main.c: 118: count50 = 0;
  2500  02F5  01DB               	clrf	_count50
  2501  02F6                     l3318:	
  2502                           
  2503                           ;main.c: 119: }
  2504                           ;main.c: 120: }
  2505                           ;main.c: 121: }
  2506                           ;main.c: 122: if ((KeyFlag[0] & 0x1)) {
  2507  02F6  1C4D               	btfss	_KeyFlag,0	;volatile
  2508  02F7  2B17               	goto	l3334
  2509                           
  2510                           ;main.c: 124: if(++keyCount2 > 100)
  2511  02F8  0AC7               	incf	_keyCount2,f
  2512  02F9  1903               	skipnz
  2513  02FA  0AC8               	incf	_keyCount2+1,f
  2514  02FB  3000               	movlw	0
  2515  02FC  0248               	subwf	_keyCount2+1,w
  2516  02FD  3065               	movlw	101
  2517  02FE  1903               	skipnz
  2518  02FF  0247               	subwf	_keyCount2,w
  2519  0300  1C03               	skipc
  2520  0301  2B17               	goto	l3334
  2521                           
  2522                           ;main.c: 125: {
  2523                           ;main.c: 126: keyCount2 = 100;
  2524  0302  3064               	movlw	100
  2525  0303  00C7               	movwf	_keyCount2
  2526  0304  301E               	movlw	30
  2527  0305  01C8               	clrf	_keyCount2+1
  2528                           
  2529                           ;main.c: 127: if(workStep < 30 && (workStep > 0 || ledLightTime > 0) && ++count50 > 25)
  2530  0306  027B               	subwf	_workStep,w
  2531  0307  1803               	skipnc
  2532  0308  2B17               	goto	l3334
  2533  0309  087B               	movf	_workStep,w
  2534  030A  1D03               	btfss	3,2
  2535  030B  2B10               	goto	l3328
  2536  030C  0843               	movf	_ledLightTime,w
  2537  030D  0444               	iorwf	_ledLightTime+1,w
  2538  030E  1903               	btfsc	3,2
  2539  030F  2B17               	goto	l3334
  2540  0310                     l3328:	
  2541  0310  301A               	movlw	26
  2542  0311  0ADB               	incf	_count50,f
  2543  0312  025B               	subwf	_count50,w
  2544  0313  1C03               	skipc
  2545  0314  2B17               	goto	l3334
  2546                           
  2547                           ;main.c: 128: {
  2548                           ;main.c: 129: workStep++;
  2549  0315  0AFB               	incf	_workStep,f
  2550                           
  2551                           ;main.c: 130: count50 = 0;
  2552  0316  01DB               	clrf	_count50
  2553  0317                     l3334:	
  2554                           
  2555                           ;main.c: 131: }
  2556                           ;main.c: 132: }
  2557                           ;main.c: 133: }
  2558                           ;main.c: 134: if (KeyFlag[0] & 0x4) {
  2559  0317  1D4D               	btfss	_KeyFlag,2	;volatile
  2560  0318  0008               	return
  2561                           
  2562                           ;main.c: 136: if(++keyCount3 > 200)
  2563  0319  0AC5               	incf	_keyCount3,f
  2564  031A  1903               	skipnz
  2565  031B  0AC6               	incf	_keyCount3+1,f
  2566  031C  3000               	movlw	0
  2567  031D  0246               	subwf	_keyCount3+1,w
  2568  031E  30C9               	movlw	201
  2569  031F  1903               	skipnz
  2570  0320  0245               	subwf	_keyCount3,w
  2571  0321  1C03               	skipc
  2572  0322  2B3B               	goto	l3354
  2573                           
  2574                           ;main.c: 137: {
  2575                           ;main.c: 138: keyCount3 = 200;
  2576  0323  30C8               	movlw	200
  2577  0324  00C5               	movwf	_keyCount3
  2578  0325  01C6               	clrf	_keyCount3+1
  2579                           
  2580                           ;main.c: 139: if(longKeyFalg == 0)
  2581  0326  0865               	movf	_longKeyFalg,w
  2582  0327  1D03               	btfss	3,2
  2583  0328  2B3B               	goto	l3354
  2584                           
  2585                           ;main.c: 140: {
  2586                           ;main.c: 141: longKeyFalg = 1;
  2587  0329  01E5               	clrf	_longKeyFalg
  2588  032A  0AE5               	incf	_longKeyFalg,f
  2589                           
  2590                           ;main.c: 142: if(workStep > 0 || ledLightTime > 0)
  2591  032B  087B               	movf	_workStep,w
  2592  032C  1D03               	btfss	3,2
  2593  032D  2B32               	goto	l3348
  2594  032E  0843               	movf	_ledLightTime,w
  2595  032F  0444               	iorwf	_ledLightTime+1,w
  2596  0330  1903               	btfsc	3,2
  2597  0331  2B35               	goto	l3350
  2598  0332                     l3348:	
  2599                           
  2600                           ;main.c: 143: {
  2601                           ;main.c: 144: workStep = 0;
  2602                           
  2603                           ;main.c: 145: zeroStep = 0;
  2604                           
  2605                           ;main.c: 146: ledLightTime = 0;
  2606  0332  2542  118A         	fcall	PL20	;call to abstracted procedure
  2607                           
  2608                           ;main.c: 147: }
  2609  0334  2B3B               	goto	l3354
  2610  0335                     l3350:	
  2611  0335  302C               	movlw	44
  2612                           
  2613                           ;main.c: 148: else
  2614                           ;main.c: 149: {
  2615                           ;main.c: 150: workStep = 0;
  2616  0336  01FB               	clrf	_workStep
  2617                           
  2618                           ;main.c: 151: zeroStep = 0;
  2619  0337  01FA               	clrf	_zeroStep
  2620                           
  2621                           ;main.c: 152: ledLightTime = 300;
  2622  0338  00C3               	movwf	_ledLightTime
  2623  0339  3001               	movlw	1
  2624  033A  00C4               	movwf	_ledLightTime+1
  2625  033B                     l3354:	
  2626                           ;main.c: 154: {
  2627                           ;main.c: 155: shanShuoTime = 250;
  2628                           
  2629                           
  2630                           ;main.c: 156: }
  2631                           ;main.c: 157: }
  2632                           ;main.c: 158: }
  2633                           ;main.c: 159: }
  2634                           ;main.c: 160: if(ledLightTime == 0 && longKeyFalg == 0 && keyCount3 % 16 == 0)
  2635  033B  0843               	movf	_ledLightTime,w
  2636  033C  0444               	iorwf	_ledLightTime+1,w
  2637  033D  1D03               	btfss	3,2
  2638  033E  0008               	return
  2639  033F  0865               	movf	_longKeyFalg,w
  2640  0340  1D03               	btfss	3,2
  2641  0341  0008               	return
  2642  0342  0845               	movf	_keyCount3,w
  2643  0343  390F               	andlw	15
  2644  0344  1903               	btfsc	3,2
  2645                           
  2646                           ;main.c: 161: {
  2647                           ;main.c: 162: zeroStep++;
  2648  0345  0AFA               	incf	_zeroStep,f
  2649  0346  0008               	return
  2650  0347                     l3362:	
  2651                           
  2652                           ;main.c: 168: if(keyCount1 > 5 && workStep > 1)
  2653  0347  3000               	movlw	0
  2654  0348  024A               	subwf	_keyCount1+1,w
  2655  0349  3006               	movlw	6
  2656  034A  1903               	skipnz
  2657  034B  0249               	subwf	_keyCount1,w
  2658  034C  1C03               	skipc
  2659  034D  2B53               	goto	l3368
  2660  034E  3002               	movlw	2
  2661  034F  027B               	subwf	_workStep,w
  2662  0350  1C03               	skipc
  2663  0351  2B53               	goto	l3368
  2664                           
  2665                           ;main.c: 169: {
  2666                           ;main.c: 170: workStep--;
  2667  0352  03FB               	decf	_workStep,f
  2668  0353                     l3368:	
  2669  0353  3000               	movlw	0
  2670                           
  2671                           ;main.c: 171: }
  2672                           ;main.c: 172: keyCount1 = 0;
  2673  0354  01C9               	clrf	_keyCount1
  2674  0355  01CA               	clrf	_keyCount1+1
  2675                           
  2676                           ;main.c: 174: if(keyCount2 > 5 && workStep < 30 && (workStep > 0 || ledLightTime > 0))
  2677  0356  0248               	subwf	_keyCount2+1,w
  2678  0357  3006               	movlw	6
  2679  0358  1903               	skipnz
  2680  0359  0247               	subwf	_keyCount2,w
  2681  035A  1C03               	skipc
  2682  035B  2B68               	goto	l3380
  2683  035C  301E               	movlw	30
  2684  035D  027B               	subwf	_workStep,w
  2685  035E  1803               	skipnc
  2686  035F  2B68               	goto	l3380
  2687  0360  087B               	movf	_workStep,w
  2688  0361  1D03               	btfss	3,2
  2689  0362  2B67               	goto	l3378
  2690  0363  0843               	movf	_ledLightTime,w
  2691  0364  0444               	iorwf	_ledLightTime+1,w
  2692  0365  1903               	btfsc	3,2
  2693  0366  2B68               	goto	l3380
  2694  0367                     l3378:	
  2695                           
  2696                           ;main.c: 175: {
  2697                           ;main.c: 176: workStep++;
  2698  0367  0AFB               	incf	_workStep,f
  2699  0368                     l3380:	
  2700                           
  2701                           ;main.c: 177: }
  2702                           ;main.c: 178: keyCount2 = 0;
  2703  0368  01C7               	clrf	_keyCount2
  2704  0369  01C8               	clrf	_keyCount2+1
  2705                           
  2706                           ;main.c: 185: longKeyFalg = 0;
  2707  036A  01E5               	clrf	_longKeyFalg
  2708                           
  2709                           ;main.c: 186: keyCount3 = 0;
  2710  036B  01C5               	clrf	_keyCount3
  2711  036C  01C6               	clrf	_keyCount3+1
  2712                           
  2713                           ;main.c: 187: if(zeroStep > 0 && ++count64ms >= 12)
  2714  036D  087A               	movf	_zeroStep,w
  2715  036E  1903               	btfsc	3,2
  2716  036F  0008               	return
  2717  0370  300C               	movlw	12
  2718  0371  0ADF               	incf	_count64ms,f
  2719  0372  025F               	subwf	_count64ms,w
  2720  0373  1C03               	skipc
  2721  0374  0008               	return
  2722                           
  2723                           ;main.c: 188: {
  2724                           ;main.c: 189: zeroStep--;
  2725  0375  03FA               	decf	_zeroStep,f
  2726                           
  2727                           ;main.c: 190: count64ms = 0;
  2728  0376  01DF               	clrf	_count64ms
  2729  0377  0008               	return
  2730  0378                     __end_of_KeyServer:	
  2731  0378                     __ptext2:	
  2732 ;; *************** function _task1 *****************
  2733 ;; Defined at:
  2734 ;;		line 628 in file "C:\mcuproject\scm\testTouch\main.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;		None
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;		None
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  1    wreg      void 
  2741 ;; Registers used:
  2742 ;;		wreg, status,2, status,0, pclath, cstack
  2743 ;; Tracked objects:
  2744 ;;		On entry : 300/0
  2745 ;;		On exit  : 300/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2748 ;;      Params:         0       0       0       0       0
  2749 ;;      Locals:         0       0       0       0       0
  2750 ;;      Temps:          0       0       0       0       0
  2751 ;;      Totals:         0       0       0       0       0
  2752 ;;Total ram usage:        0 bytes
  2753 ;; Hardware stack levels used:    1
  2754 ;; Hardware stack levels required when called:    4
  2755 ;; This function calls:
  2756 ;;		_refreshTM1650
  2757 ;; This function is called by:
  2758 ;;		_main
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           
  2763                           ;psect for function _task1
  2764  0378                     _task1:	
  2765                           
  2766                           ;main.c: 630: if(firstTime > 0)
  2767                           
  2768                           ;incstack = 0
  2769                           ; Regs used in _task1: [wreg+status,2+status,0+pclath+cstack]
  2770  0378  084B               	movf	_firstTime,w
  2771  0379  044C               	iorwf	_firstTime+1,w
  2772  037A  1903               	btfsc	3,2
  2773  037B  2B87               	goto	l3556
  2774                           
  2775                           ;main.c: 631: {
  2776                           ;main.c: 632: firstTime--;
  2777  037C  3001               	movlw	1
  2778  037D  02CB               	subwf	_firstTime,f
  2779  037E  1C03               	skipc
  2780  037F  03CC               	decf	_firstTime+1,f
  2781                           
  2782                           ;main.c: 633: if(preBatValue < batValue)
  2783  0380  085C               	movf	_batValue,w
  2784  0381  0279               	subwf	_preBatValue,w
  2785  0382  1803               	skipnc
  2786  0383  2B89               	goto	l3558
  2787                           
  2788                           ;main.c: 634: {
  2789                           ;main.c: 635: preBatValue = batValue;
  2790  0384  085C               	movf	_batValue,w
  2791  0385  00F9               	movwf	_preBatValue
  2792  0386  2B89               	goto	l3558
  2793  0387                     l3556:	
  2794                           
  2795                           ;main.c: 638: else
  2796                           ;main.c: 639: {
  2797                           ;main.c: 640: refreshTM1650();
  2798  0387  2401  118A         	fcall	_refreshTM1650
  2799  0389                     l3558:	
  2800                           
  2801                           ;main.c: 641: }
  2802                           ;main.c: 642: if(++count1s >= 250)
  2803  0389  30FA               	movlw	250
  2804  038A  0ADE               	incf	_count1s,f
  2805  038B  025E               	subwf	_count1s,w
  2806  038C  1C03               	skipc
  2807  038D  0008               	return
  2808                           
  2809                           ;main.c: 643: {
  2810                           ;main.c: 644: count1s = 0;
  2811  038E  01DE               	clrf	_count1s
  2812                           
  2813                           ;main.c: 645: if(workStep > 0)
  2814  038F  087B               	movf	_workStep,w
  2815  0390  1903               	btfsc	3,2
  2816  0391  2BA1               	goto	l3568
  2817                           
  2818                           ;main.c: 646: {
  2819                           ;main.c: 647: if(++count900s > 900)
  2820  0392  0ABB               	incf	_count900s,f
  2821  0393  1903               	skipnz
  2822  0394  0ABC               	incf	_count900s+1,f
  2823  0395  3003               	movlw	3
  2824  0396  023C               	subwf	_count900s+1,w
  2825  0397  3085               	movlw	133
  2826  0398  1903               	skipnz
  2827  0399  023B               	subwf	_count900s,w
  2828  039A  1C03               	skipc
  2829  039B  2BA3               	goto	l3570
  2830                           
  2831                           ;main.c: 648: {
  2832                           ;main.c: 649: count900s = 0;
  2833  039C  01BB               	clrf	_count900s
  2834  039D  01BC               	clrf	_count900s+1
  2835                           
  2836                           ;main.c: 650: workStep = 0;
  2837                           
  2838                           ;main.c: 651: zeroStep = 0;
  2839                           
  2840                           ;main.c: 652: ledLightTime = 0;
  2841  039E  2542  118A         	fcall	PL20	;call to abstracted procedure
  2842  03A0  2BA3               	goto	l3570
  2843  03A1                     l3568:	
  2844                           
  2845                           ;main.c: 655: else
  2846                           ;main.c: 656: {
  2847                           ;main.c: 657: count900s = 0;
  2848  03A1  01BB               	clrf	_count900s
  2849  03A2  01BC               	clrf	_count900s+1
  2850  03A3                     l3570:	
  2851                           
  2852                           ;main.c: 658: }
  2853                           ;main.c: 659: if(ledLightTime > 0)
  2854  03A3  0843               	movf	_ledLightTime,w
  2855  03A4  0444               	iorwf	_ledLightTime+1,w
  2856  03A5  1903               	btfsc	3,2
  2857  03A6  2BAD               	goto	l3574
  2858                           
  2859                           ;main.c: 660: {
  2860                           ;main.c: 661: ledLightTime--;
  2861  03A7  3001               	movlw	1
  2862  03A8  02C3               	subwf	_ledLightTime,f
  2863  03A9  3000               	movlw	0
  2864  03AA  1C03               	skipc
  2865  03AB  03C4               	decf	_ledLightTime+1,f
  2866  03AC  02C4               	subwf	_ledLightTime+1,f
  2867  03AD                     l3574:	
  2868                           
  2869                           ;main.c: 662: }
  2870                           ;main.c: 663: if(chrgFlag)
  2871  03AD  085D               	movf	_chrgFlag,w
  2872  03AE  1903               	btfsc	3,2
  2873  03AF  2BC2               	goto	l3588
  2874                           
  2875                           ;main.c: 664: {
  2876                           ;main.c: 665: if(preBatValue < 99 && preBatValue < batValue)
  2877  03B0  3063               	movlw	99
  2878  03B1  0279               	subwf	_preBatValue,w
  2879  03B2  1803               	skipnc
  2880  03B3  2BC0               	goto	l3586
  2881  03B4  085C               	movf	_batValue,w
  2882  03B5  0279               	subwf	_preBatValue,w
  2883  03B6  1803               	skipnc
  2884  03B7  2BC0               	goto	l3586
  2885                           
  2886                           ;main.c: 666: {
  2887                           ;main.c: 667: if(++count15s >= 15)
  2888  03B8  300F               	movlw	15
  2889  03B9  0AD6               	incf	_count15s,f
  2890  03BA  0256               	subwf	_count15s,w
  2891  03BB  1C03               	skipc
  2892  03BC  0008               	return
  2893                           
  2894                           ;main.c: 668: {
  2895                           ;main.c: 669: count15s = 0;
  2896  03BD  01D6               	clrf	_count15s
  2897                           
  2898                           ;main.c: 670: preBatValue++;
  2899  03BE  0AF9               	incf	_preBatValue,f
  2900  03BF  0008               	return
  2901  03C0                     l3586:	
  2902                           
  2903                           ;main.c: 673: else
  2904                           ;main.c: 674: {
  2905                           ;main.c: 675: count15s = 0;
  2906  03C0  01D6               	clrf	_count15s
  2907  03C1  0008               	return
  2908  03C2                     l3588:	
  2909                           
  2910                           ;main.c: 678: else
  2911                           ;main.c: 679: {
  2912                           ;main.c: 680: if(preBatValue > 0 && preBatValue > batValue)
  2913  03C2  0879               	movf	_preBatValue,w
  2914  03C3  1903               	btfsc	3,2
  2915  03C4  2BC0               	goto	l3586
  2916  03C5  0879               	movf	_preBatValue,w
  2917  03C6  025C               	subwf	_batValue,w
  2918  03C7  1803               	skipnc
  2919  03C8  2BC0               	goto	l3586
  2920                           
  2921                           ;main.c: 681: {
  2922                           ;main.c: 682: if(++count15s >= 15)
  2923  03C9  300F               	movlw	15
  2924  03CA  0AD6               	incf	_count15s,f
  2925  03CB  0256               	subwf	_count15s,w
  2926  03CC  1C03               	skipc
  2927  03CD  0008               	return
  2928                           
  2929                           ;main.c: 683: {
  2930                           ;main.c: 684: count15s = 0;
  2931  03CE  01D6               	clrf	_count15s
  2932                           
  2933                           ;main.c: 685: preBatValue--;
  2934  03CF  03F9               	decf	_preBatValue,f
  2935  03D0  0008               	return
  2936  03D1                     __end_of_task1:	
  2937  03D1                     __ptext10:	
  2938 ;; *************** function _initTM1650 *****************
  2939 ;; Defined at:
  2940 ;;		line 391 in file "C:\mcuproject\scm\testTouch\main.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;		None
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;		None
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  1    wreg      void 
  2947 ;; Registers used:
  2948 ;;		wreg, status,2, status,0, pclath, cstack
  2949 ;; Tracked objects:
  2950 ;;		On entry : 300/100
  2951 ;;		On exit  : 300/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2954 ;;      Params:         0       0       0       0       0
  2955 ;;      Locals:         0       0       0       0       0
  2956 ;;      Temps:          0       0       0       0       0
  2957 ;;      Totals:         0       0       0       0       0
  2958 ;;Total ram usage:        0 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    3
  2961 ;; This function calls:
  2962 ;;		_tm1650cmd
  2963 ;; This function is called by:
  2964 ;;		_main
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           
  2969                           ;psect for function _initTM1650
  2970  03D1                     _initTM1650:	
  2971                           
  2972                           ;main.c: 393: tm1650cmd(0X48,0x11);
  2973                           
  2974                           ;incstack = 0
  2975                           ; Regs used in _initTM1650: [wreg+status,2+status,0+pclath+cstack]
  2976  03D1  3011               	movlw	17
  2977  03D2  00F4               	movwf	tm1650cmd@seg_data
  2978  03D3  3048               	movlw	72
  2979  03D4  243F  118A         	fcall	_tm1650cmd
  2980  03D6  0000               	nop	;# 
  2981  03D7  0000               	nop	;# 
  2982  03D8  0000               	nop	;# 
  2983  03D9  0000               	nop	;# 
  2984  03DA  0000               	nop	;# 
  2985  03DB  0000               	nop	;# 
  2986                           
  2987                           ;main.c: 395: tm1650cmd(0X68,0xFF);
  2988  03DC  30FF               	movlw	255
  2989  03DD  00F4               	movwf	tm1650cmd@seg_data
  2990  03DE  3068               	movlw	104
  2991  03DF  243F  118A         	fcall	_tm1650cmd
  2992  03E1  0000               	nop	;# 
  2993  03E2  0000               	nop	;# 
  2994  03E3  0000               	nop	;# 
  2995  03E4  0000               	nop	;# 
  2996  03E5  0000               	nop	;# 
  2997  03E6  0000               	nop	;# 
  2998                           
  2999                           ;main.c: 397: tm1650cmd(0X6A,0xFF);
  3000  03E7  30FF               	movlw	255
  3001  03E8  00F4               	movwf	tm1650cmd@seg_data
  3002  03E9  306A               	movlw	106
  3003  03EA  243F  118A         	fcall	_tm1650cmd
  3004  03EC  0000               	nop	;# 
  3005  03ED  0000               	nop	;# 
  3006  03EE  0000               	nop	;# 
  3007  03EF  0000               	nop	;# 
  3008  03F0  0000               	nop	;# 
  3009  03F1  0000               	nop	;# 
  3010                           
  3011                           ;main.c: 399: tm1650cmd(0X6C,0xFF);
  3012  03F2  30FF               	movlw	255
  3013  03F3  00F4               	movwf	tm1650cmd@seg_data
  3014  03F4  306C               	movlw	108
  3015  03F5  243F  118A         	fcall	_tm1650cmd
  3016  03F7  0000               	nop	;# 
  3017  03F8  0000               	nop	;# 
  3018  03F9  0000               	nop	;# 
  3019  03FA  0000               	nop	;# 
  3020  03FB  0000               	nop	;# 
  3021  03FC  0000               	nop	;# 
  3022                           
  3023                           ;main.c: 401: tm1650cmd(0X6E,0xFF);
  3024  03FD  30FF               	movlw	255
  3025  03FE  00F4               	movwf	tm1650cmd@seg_data
  3026  03FF  306E               	movlw	110
  3027  0400  2C3F               	ljmp	_tm1650cmd
  3028  0401                     __end_of_initTM1650:	
  3029  0401                     __ptext3:	
  3030 ;; *************** function _refreshTM1650 *****************
  3031 ;; Defined at:
  3032 ;;		line 406 in file "C:\mcuproject\scm\testTouch\main.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;		None
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;		None
  3037 ;; Return value:  Size  Location     Type
  3038 ;;                  1    wreg      void 
  3039 ;; Registers used:
  3040 ;;		wreg, status,2, status,0, pclath, cstack
  3041 ;; Tracked objects:
  3042 ;;		On entry : 300/0
  3043 ;;		On exit  : 300/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3046 ;;      Params:         0       0       0       0       0
  3047 ;;      Locals:         0       0       0       0       0
  3048 ;;      Temps:          0       0       0       0       0
  3049 ;;      Totals:         0       0       0       0       0
  3050 ;;Total ram usage:        0 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    3
  3053 ;; This function calls:
  3054 ;;		_tm1650cmd
  3055 ;; This function is called by:
  3056 ;;		_task1
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           
  3061                           ;psect for function _refreshTM1650
  3062  0401                     _refreshTM1650:	
  3063                           
  3064                           ;main.c: 408: if(showFlag)
  3065                           
  3066                           ;incstack = 0
  3067                           ; Regs used in _refreshTM1650: [wreg+status,2+status,0+pclath+cstack]
  3068  0401  0864               	movf	_showFlag,w
  3069  0402  1903               	btfsc	3,2
  3070  0403  2C3C               	goto	l2970
  3071                           
  3072                           ;main.c: 409: {
  3073                           ;main.c: 410: tm1650cmd(0X48,0x11);
  3074  0404  3011               	movlw	17
  3075  0405  00F4               	movwf	tm1650cmd@seg_data
  3076  0406  3048               	movlw	72
  3077  0407  243F  118A         	fcall	_tm1650cmd
  3078  0409  0000               	nop	;# 
  3079  040A  0000               	nop	;# 
  3080  040B  0000               	nop	;# 
  3081  040C  0000               	nop	;# 
  3082  040D  0000               	nop	;# 
  3083  040E  0000               	nop	;# 
  3084                           
  3085                           ;main.c: 412: tm1650cmd(0X68,showLed2);
  3086  040F  1283               	bcf	3,5	;RP0=0, select bank0
  3087  0410  1303               	bcf	3,6	;RP1=0, select bank0
  3088  0411  0860               	movf	_showLed2,w
  3089  0412  00F4               	movwf	tm1650cmd@seg_data
  3090  0413  3068               	movlw	104
  3091  0414  243F  118A         	fcall	_tm1650cmd
  3092  0416  0000               	nop	;# 
  3093  0417  0000               	nop	;# 
  3094  0418  0000               	nop	;# 
  3095  0419  0000               	nop	;# 
  3096  041A  0000               	nop	;# 
  3097  041B  0000               	nop	;# 
  3098                           
  3099                           ;main.c: 414: tm1650cmd(0X6A,showShiWei);
  3100  041C  1283               	bcf	3,5	;RP0=0, select bank0
  3101  041D  1303               	bcf	3,6	;RP1=0, select bank0
  3102  041E  0863               	movf	_showShiWei,w
  3103  041F  00F4               	movwf	tm1650cmd@seg_data
  3104  0420  306A               	movlw	106
  3105  0421  243F  118A         	fcall	_tm1650cmd
  3106  0423  0000               	nop	;# 
  3107  0424  0000               	nop	;# 
  3108  0425  0000               	nop	;# 
  3109  0426  0000               	nop	;# 
  3110  0427  0000               	nop	;# 
  3111  0428  0000               	nop	;# 
  3112                           
  3113                           ;main.c: 416: tm1650cmd(0X6C,showGeWei);
  3114  0429  1283               	bcf	3,5	;RP0=0, select bank0
  3115  042A  1303               	bcf	3,6	;RP1=0, select bank0
  3116  042B  0862               	movf	_showGeWei,w
  3117  042C  00F4               	movwf	tm1650cmd@seg_data
  3118  042D  306C               	movlw	108
  3119  042E  243F  118A         	fcall	_tm1650cmd
  3120  0430  0000               	nop	;# 
  3121  0431  0000               	nop	;# 
  3122  0432  0000               	nop	;# 
  3123  0433  0000               	nop	;# 
  3124  0434  0000               	nop	;# 
  3125  0435  0000               	nop	;# 
  3126                           
  3127                           ;main.c: 418: tm1650cmd(0X6E,showLed1);
  3128  0436  1283               	bcf	3,5	;RP0=0, select bank0
  3129  0437  1303               	bcf	3,6	;RP1=0, select bank0
  3130  0438  0861               	movf	_showLed1,w
  3131  0439  00F4               	movwf	tm1650cmd@seg_data
  3132  043A  306E               	movlw	110
  3133  043B  2C3F               	ljmp	_tm1650cmd
  3134  043C                     l2970:	
  3135                           ;main.c: 419: }
  3136                           
  3137  043C  3048               	movlw	72
  3138                           
  3139                           ;main.c: 420: else
  3140                           ;main.c: 421: {
  3141                           ;main.c: 422: tm1650cmd(0X48,0x00);
  3142  043D  01F4               	clrf	tm1650cmd@seg_data
  3143  043E  2C3F               	ljmp	_tm1650cmd
  3144  043F                     __end_of_refreshTM1650:	
  3145  043F                     __ptext11:	
  3146 ;; *************** function _tm1650cmd *****************
  3147 ;; Defined at:
  3148 ;;		line 382 in file "C:\mcuproject\scm\testTouch\main.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;  digAddr         1    wreg     unsigned char 
  3151 ;;  seg_data        1    4[COMMON] unsigned char 
  3152 ;; Auto vars:     Size  Location     Type
  3153 ;;  digAddr         1    5[COMMON] unsigned char 
  3154 ;; Return value:  Size  Location     Type
  3155 ;;                  1    wreg      void 
  3156 ;; Registers used:
  3157 ;;		wreg, status,2, status,0, pclath, cstack
  3158 ;; Tracked objects:
  3159 ;;		On entry : 0/0
  3160 ;;		On exit  : 300/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3163 ;;      Params:         1       0       0       0       0
  3164 ;;      Locals:         1       0       0       0       0
  3165 ;;      Temps:          0       0       0       0       0
  3166 ;;      Totals:         2       0       0       0       0
  3167 ;;Total ram usage:        2 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    2
  3170 ;; This function calls:
  3171 ;;		_TM1650_START
  3172 ;;		_TM1650_STOP
  3173 ;;		_write_8bit
  3174 ;; This function is called by:
  3175 ;;		_initTM1650
  3176 ;;		_refreshTM1650
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           
  3181                           ;psect for function _tm1650cmd
  3182  043F                     _tm1650cmd:	
  3183                           
  3184                           ;incstack = 0
  3185                           ; Regs used in _tm1650cmd: [wreg+status,2+status,0+pclath+cstack]
  3186                           ;tm1650cmd@digAddr stored from wreg
  3187  043F  00F5               	movwf	tm1650cmd@digAddr
  3188                           
  3189                           ;main.c: 384: TM1650_START();
  3190  0440  2507  118A         	fcall	_TM1650_START
  3191                           
  3192                           ;main.c: 385: write_8bit(digAddr);
  3193  0442  0875               	movf	tm1650cmd@digAddr,w
  3194  0443  2449  118A         	fcall	_write_8bit
  3195                           
  3196                           ;main.c: 386: write_8bit(seg_data);
  3197  0445  0874               	movf	tm1650cmd@seg_data,w
  3198  0446  2449  118A         	fcall	_write_8bit
  3199                           
  3200                           ;main.c: 387: TM1650_STOP();
  3201  0448  2D20               	ljmp	l2824
  3202  0449                     __end_of_tm1650cmd:	
  3203  0449                     __ptext12:	
  3204 ;; *************** function _write_8bit *****************
  3205 ;; Defined at:
  3206 ;;		line 331 in file "C:\mcuproject\scm\testTouch\main.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;  dat             1    wreg     unsigned char 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  dat             1    2[COMMON] unsigned char 
  3211 ;;  i               1    3[COMMON] unsigned char 
  3212 ;; Return value:  Size  Location     Type
  3213 ;;                  1    wreg      void 
  3214 ;; Registers used:
  3215 ;;		wreg, status,2, status,0
  3216 ;; Tracked objects:
  3217 ;;		On entry : 0/300
  3218 ;;		On exit  : 0/0
  3219 ;;		Unchanged: 0/0
  3220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3221 ;;      Params:         0       0       0       0       0
  3222 ;;      Locals:         2       0       0       0       0
  3223 ;;      Temps:          0       0       0       0       0
  3224 ;;      Totals:         2       0       0       0       0
  3225 ;;Total ram usage:        2 bytes
  3226 ;; Hardware stack levels used:    1
  3227 ;; Hardware stack levels required when called:    1
  3228 ;; This function calls:
  3229 ;;		Nothing
  3230 ;; This function is called by:
  3231 ;;		_tm1650cmd
  3232 ;; This function uses a non-reentrant model
  3233 ;;
  3234                           
  3235                           
  3236                           ;psect for function _write_8bit
  3237  0449                     _write_8bit:	
  3238                           
  3239                           ;incstack = 0
  3240                           ; Regs used in _write_8bit: [wreg+status,2+status,0]
  3241                           ;write_8bit@dat stored from wreg
  3242  0449  00F2               	movwf	write_8bit@dat
  3243                           
  3244                           ;main.c: 333: unsigned char i;
  3245                           ;main.c: 334: RC0=0;
  3246  044A  1683               	bsf	3,5	;RP0=1, select bank3
  3247  044B  1703               	bsf	3,6	;RP1=1, select bank3
  3248  044C  1005               	bcf	5,0	;volatile
  3249                           
  3250                           ;main.c: 335: for(i=0;i<8;i++)
  3251  044D  01F3               	clrf	write_8bit@i
  3252  044E                     l1250:	
  3253                           
  3254                           ;main.c: 336: {
  3255                           ;main.c: 337: if(dat&0x80)
  3256  044E  1FF2               	btfss	write_8bit@dat,7
  3257  044F  2C81               	goto	l1252
  3258                           
  3259                           ;main.c: 338: {
  3260                           ;main.c: 339: RB7=1;
  3261  0450  1283               	bcf	3,5	;RP0=0, select bank0
  3262  0451  1303               	bcf	3,6	;RP1=0, select bank0
  3263  0452  1786               	bsf	6,7	;volatile
  3264  0453  0000               	nop	;# 
  3265  0454  0000               	nop	;# 
  3266  0455  0000               	nop	;# 
  3267  0456  0000               	nop	;# 
  3268  0457  0000               	nop	;# 
  3269  0458  0000               	nop	;# 
  3270  0459  0000               	nop	;# 
  3271  045A  0000               	nop	;# 
  3272  045B  0000               	nop	;# 
  3273  045C  0000               	nop	;# 
  3274  045D  0000               	nop	;# 
  3275  045E  0000               	nop	;# 
  3276                           
  3277                           ;main.c: 342: RC0=1;
  3278  045F  1683               	bsf	3,5	;RP0=1, select bank3
  3279  0460  1703               	bsf	3,6	;RP1=1, select bank3
  3280  0461  1405               	bsf	5,0	;volatile
  3281  0462  0000               	nop	;# 
  3282  0463  0000               	nop	;# 
  3283  0464  0000               	nop	;# 
  3284  0465  0000               	nop	;# 
  3285  0466  0000               	nop	;# 
  3286  0467  0000               	nop	;# 
  3287  0468  0000               	nop	;# 
  3288  0469  0000               	nop	;# 
  3289  046A  0000               	nop	;# 
  3290  046B  0000               	nop	;# 
  3291  046C  0000               	nop	;# 
  3292  046D  0000               	nop	;# 
  3293  046E  0000               	nop	;# 
  3294  046F  0000               	nop	;# 
  3295  0470  0000               	nop	;# 
  3296  0471  0000               	nop	;# 
  3297  0472  0000               	nop	;# 
  3298  0473  0000               	nop	;# 
  3299  0474  0000               	nop	;# 
  3300  0475  0000               	nop	;# 
  3301  0476  0000               	nop	;# 
  3302  0477  0000               	nop	;# 
  3303  0478  0000               	nop	;# 
  3304  0479  0000               	nop	;# 
  3305  047A  0000               	nop	;# 
  3306  047B  0000               	nop	;# 
  3307  047C  0000               	nop	;# 
  3308  047D  0000               	nop	;# 
  3309  047E  0000               	nop	;# 
  3310  047F  0000               	nop	;# 
  3311  0480  2CB1               	goto	L6
  3312  0481                     l1252:	
  3313                           ;main.c: 349: }
  3314                           
  3315                           ;main.c: 348: RC0=0;
  3316                           
  3317                           
  3318                           ;main.c: 350: else
  3319                           ;main.c: 351: {
  3320                           ;main.c: 352: RB7=0;
  3321  0481  1283               	bcf	3,5	;RP0=0, select bank0
  3322  0482  1303               	bcf	3,6	;RP1=0, select bank0
  3323  0483  1386               	bcf	6,7	;volatile
  3324  0484  0000               	nop	;# 
  3325  0485  0000               	nop	;# 
  3326  0486  0000               	nop	;# 
  3327  0487  0000               	nop	;# 
  3328  0488  0000               	nop	;# 
  3329  0489  0000               	nop	;# 
  3330  048A  0000               	nop	;# 
  3331  048B  0000               	nop	;# 
  3332  048C  0000               	nop	;# 
  3333  048D  0000               	nop	;# 
  3334  048E  0000               	nop	;# 
  3335  048F  0000               	nop	;# 
  3336                           
  3337                           ;main.c: 355: RC0=1;
  3338  0490  1683               	bsf	3,5	;RP0=1, select bank3
  3339  0491  1703               	bsf	3,6	;RP1=1, select bank3
  3340  0492  1405               	bsf	5,0	;volatile
  3341  0493  0000               	nop	;# 
  3342  0494  0000               	nop	;# 
  3343  0495  0000               	nop	;# 
  3344  0496  0000               	nop	;# 
  3345  0497  0000               	nop	;# 
  3346  0498  0000               	nop	;# 
  3347  0499  0000               	nop	;# 
  3348  049A  0000               	nop	;# 
  3349  049B  0000               	nop	;# 
  3350  049C  0000               	nop	;# 
  3351  049D  0000               	nop	;# 
  3352  049E  0000               	nop	;# 
  3353  049F  0000               	nop	;# 
  3354  04A0  0000               	nop	;# 
  3355  04A1  0000               	nop	;# 
  3356  04A2  0000               	nop	;# 
  3357  04A3  0000               	nop	;# 
  3358  04A4  0000               	nop	;# 
  3359  04A5  0000               	nop	;# 
  3360  04A6  0000               	nop	;# 
  3361  04A7  0000               	nop	;# 
  3362  04A8  0000               	nop	;# 
  3363  04A9  0000               	nop	;# 
  3364  04AA  0000               	nop	;# 
  3365  04AB  0000               	nop	;# 
  3366  04AC  0000               	nop	;# 
  3367  04AD  0000               	nop	;# 
  3368  04AE  0000               	nop	;# 
  3369  04AF  0000               	nop	;# 
  3370  04B0  0000               	nop	;# 
  3371  04B1                     L6:	
  3372                           
  3373                           ;main.c: 361: RC0=0;
  3374  04B1  1683               	bsf	3,5	;RP0=1, select bank3
  3375  04B2  1703               	bsf	3,6	;RP1=1, select bank3
  3376  04B3  1005               	bcf	5,0	;volatile
  3377  04B4  3008               	movlw	8
  3378                           
  3379                           ;main.c: 362: }
  3380                           ;main.c: 363: dat<<=1;
  3381  04B5  1003               	clrc
  3382  04B6  0DF2               	rlf	write_8bit@dat,f
  3383  04B7  0AF3               	incf	write_8bit@i,f
  3384  04B8  0273               	subwf	write_8bit@i,w
  3385  04B9  1C03               	skipc
  3386  04BA  2C4E               	goto	l1250
  3387                           
  3388                           ;main.c: 364: }
  3389                           ;main.c: 365: RB7=1;
  3390  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  3391  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  3392  04BD  1786               	bsf	6,7	;volatile
  3393  04BE  0000               	nop	;# 
  3394  04BF  0000               	nop	;# 
  3395  04C0  0000               	nop	;# 
  3396  04C1  0000               	nop	;# 
  3397  04C2  0000               	nop	;# 
  3398  04C3  0000               	nop	;# 
  3399  04C4  0000               	nop	;# 
  3400  04C5  0000               	nop	;# 
  3401  04C6  0000               	nop	;# 
  3402  04C7  0000               	nop	;# 
  3403  04C8  0000               	nop	;# 
  3404  04C9  0000               	nop	;# 
  3405  04CA  0000               	nop	;# 
  3406  04CB  0000               	nop	;# 
  3407  04CC  0000               	nop	;# 
  3408  04CD  0000               	nop	;# 
  3409  04CE  0000               	nop	;# 
  3410  04CF  0000               	nop	;# 
  3411  04D0  0000               	nop	;# 
  3412  04D1  0000               	nop	;# 
  3413  04D2  0000               	nop	;# 
  3414  04D3  0000               	nop	;# 
  3415  04D4  0000               	nop	;# 
  3416  04D5  0000               	nop	;# 
  3417                           
  3418                           ;main.c: 370: RC0=1;
  3419  04D6  1683               	bsf	3,5	;RP0=1, select bank3
  3420  04D7  1703               	bsf	3,6	;RP1=1, select bank3
  3421  04D8  1405               	bsf	5,0	;volatile
  3422  04D9  0000               	nop	;# 
  3423  04DA  0000               	nop	;# 
  3424  04DB  0000               	nop	;# 
  3425  04DC  0000               	nop	;# 
  3426  04DD  0000               	nop	;# 
  3427  04DE  0000               	nop	;# 
  3428  04DF  0000               	nop	;# 
  3429  04E0  0000               	nop	;# 
  3430  04E1  0000               	nop	;# 
  3431  04E2  0000               	nop	;# 
  3432  04E3  0000               	nop	;# 
  3433  04E4  0000               	nop	;# 
  3434  04E5  0000               	nop	;# 
  3435  04E6  0000               	nop	;# 
  3436  04E7  0000               	nop	;# 
  3437  04E8  0000               	nop	;# 
  3438  04E9  0000               	nop	;# 
  3439  04EA  0000               	nop	;# 
  3440  04EB  0000               	nop	;# 
  3441  04EC  0000               	nop	;# 
  3442  04ED  0000               	nop	;# 
  3443  04EE  0000               	nop	;# 
  3444  04EF  0000               	nop	;# 
  3445  04F0  0000               	nop	;# 
  3446  04F1  0000               	nop	;# 
  3447  04F2  0000               	nop	;# 
  3448  04F3  0000               	nop	;# 
  3449  04F4  0000               	nop	;# 
  3450  04F5  0000               	nop	;# 
  3451  04F6  0000               	nop	;# 
  3452                           
  3453                           ;main.c: 376: RC0=0;
  3454  04F7  1683               	bsf	3,5	;RP0=1, select bank3
  3455  04F8  1703               	bsf	3,6	;RP1=1, select bank3
  3456  04F9  1005               	bcf	5,0	;volatile
  3457  04FA  0000               	nop	;# 
  3458  04FB  0000               	nop	;# 
  3459  04FC  0000               	nop	;# 
  3460  04FD  0000               	nop	;# 
  3461  04FE  0000               	nop	;# 
  3462  04FF  0000               	nop	;# 
  3463  0500  0000               	nop	;# 
  3464  0501  0000               	nop	;# 
  3465  0502  0000               	nop	;# 
  3466  0503  0000               	nop	;# 
  3467  0504  0000               	nop	;# 
  3468  0505  0000               	nop	;# 
  3469  0506  0008               	return
  3470  0507                     __end_of_write_8bit:	
  3471  0507                     __ptext14:	
  3472 ;; *************** function _TM1650_START *****************
  3473 ;; Defined at:
  3474 ;;		line 306 in file "C:\mcuproject\scm\testTouch\main.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		None
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 300/300
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3488 ;;      Params:         0       0       0       0       0
  3489 ;;      Locals:         0       0       0       0       0
  3490 ;;      Temps:          0       0       0       0       0
  3491 ;;      Totals:         0       0       0       0       0
  3492 ;;Total ram usage:        0 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    1
  3495 ;; This function calls:
  3496 ;;		Nothing
  3497 ;; This function is called by:
  3498 ;;		_tm1650cmd
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           
  3503                           ;psect for function _TM1650_START
  3504  0507                     _TM1650_START:	
  3505                           
  3506                           ;main.c: 308: RC0=1;
  3507                           
  3508                           ;incstack = 0
  3509                           ; Regs used in _TM1650_START: []
  3510  0507  1683               	bsf	3,5	;RP0=1, select bank3
  3511  0508  1703               	bsf	3,6	;RP1=1, select bank3
  3512  0509  1405               	bsf	5,0	;volatile
  3513                           
  3514                           ;main.c: 309: RB7=1;
  3515  050A  1283               	bcf	3,5	;RP0=0, select bank0
  3516  050B  1303               	bcf	3,6	;RP1=0, select bank0
  3517  050C  1786               	bsf	6,7	;volatile
  3518  050D  0000               	nop	;# 
  3519  050E  0000               	nop	;# 
  3520  050F  0000               	nop	;# 
  3521  0510  0000               	nop	;# 
  3522  0511  0000               	nop	;# 
  3523  0512  0000               	nop	;# 
  3524                           
  3525                           ;main.c: 311: RB7=0;
  3526  0513  1283               	bcf	3,5	;RP0=0, select bank0
  3527  0514  1303               	bcf	3,6	;RP1=0, select bank0
  3528  0515  1386               	bcf	6,7	;volatile
  3529  0516  0000               	nop	;# 
  3530  0517  0000               	nop	;# 
  3531  0518  0000               	nop	;# 
  3532  0519  0000               	nop	;# 
  3533  051A  0000               	nop	;# 
  3534  051B  0000               	nop	;# 
  3535                           
  3536                           ;main.c: 313: RC0=0;
  3537  051C  1683               	bsf	3,5	;RP0=1, select bank3
  3538  051D  1703               	bsf	3,6	;RP1=1, select bank3
  3539  051E  1005               	bcf	5,0	;volatile
  3540  051F  0008               	return
  3541  0520                     __end_of_TM1650_START:	
  3542  0520                     __ptext13:	
  3543 ;; *************** function _TM1650_STOP *****************
  3544 ;; Defined at:
  3545 ;;		line 317 in file "C:\mcuproject\scm\testTouch\main.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;		None
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;		None
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  1    wreg      void 
  3552 ;; Registers used:
  3553 ;;		None
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/300
  3556 ;;		On exit  : 300/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3559 ;;      Params:         0       0       0       0       0
  3560 ;;      Locals:         0       0       0       0       0
  3561 ;;      Temps:          0       0       0       0       0
  3562 ;;      Totals:         0       0       0       0       0
  3563 ;;Total ram usage:        0 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    1
  3566 ;; This function calls:
  3567 ;;		Nothing
  3568 ;; This function is called by:
  3569 ;;		_tm1650cmd
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           
  3574                           ;psect for function _TM1650_STOP
  3575  0520                     _TM1650_STOP:	
  3576  0520                     l2824:	
  3577                           ;incstack = 0
  3578                           ; Regs used in _TM1650_STOP: []
  3579                           
  3580                           
  3581                           ;main.c: 319: RB7=0;
  3582  0520  1283               	bcf	3,5	;RP0=0, select bank0
  3583  0521  1303               	bcf	3,6	;RP1=0, select bank0
  3584  0522  1386               	bcf	6,7	;volatile
  3585  0523  0000               	nop	;# 
  3586  0524  0000               	nop	;# 
  3587  0525  0000               	nop	;# 
  3588  0526  0000               	nop	;# 
  3589  0527  0000               	nop	;# 
  3590  0528  0000               	nop	;# 
  3591                           
  3592                           ;main.c: 321: RC0=1;
  3593  0529  1683               	bsf	3,5	;RP0=1, select bank3
  3594  052A  1703               	bsf	3,6	;RP1=1, select bank3
  3595  052B  1405               	bsf	5,0	;volatile
  3596  052C  0000               	nop	;# 
  3597  052D  0000               	nop	;# 
  3598  052E  0000               	nop	;# 
  3599  052F  0000               	nop	;# 
  3600  0530  0000               	nop	;# 
  3601  0531  0000               	nop	;# 
  3602                           
  3603                           ;main.c: 323: RB7=1;
  3604  0532  1283               	bcf	3,5	;RP0=0, select bank0
  3605  0533  1303               	bcf	3,6	;RP1=0, select bank0
  3606  0534  1786               	bsf	6,7	;volatile
  3607  0535  0000               	nop	;# 
  3608  0536  0000               	nop	;# 
  3609  0537  0000               	nop	;# 
  3610  0538  0000               	nop	;# 
  3611  0539  0000               	nop	;# 
  3612  053A  0000               	nop	;# 
  3613                           
  3614                           ;main.c: 325: RC0=0;
  3615  053B  1683               	bsf	3,5	;RP0=1, select bank3
  3616  053C  1703               	bsf	3,6	;RP1=1, select bank3
  3617  053D  1005               	bcf	5,0	;volatile
  3618                           
  3619                           ;main.c: 326: RB7=0;
  3620  053E  1283               	bcf	3,5	;RP0=0, select bank0
  3621  053F  1303               	bcf	3,6	;RP1=0, select bank0
  3622  0540  1386               	bcf	6,7	;volatile
  3623  0541  0008               	return
  3624  0542                     __end_of_TM1650_STOP:	
  3625  0542                     PL20:	
  3626  0542  01FB               	clrf	_workStep
  3627  0543  01FA               	clrf	_zeroStep
  3628  0544  01C3               	clrf	_ledLightTime
  3629  0545  01C4               	clrf	_ledLightTime+1
  3630  0546  0008               	return
  3631  0547                     __end_ofPL20:	
  3632                           
  3633                           	psect	text21
  3634  0020                     __ptext21:	
  3635 ;; *************** function _CheckTouchKey *****************
  3636 ;; Defined at:
  3637 ;;		line 529 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;		None
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;		None
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  1    wreg      void 
  3644 ;; Registers used:
  3645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : B00/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3651 ;;      Params:         0       0       0       0       0
  3652 ;;      Locals:         0       0       0       0       0
  3653 ;;      Temps:          0       0       0       0       0
  3654 ;;      Totals:         0       0       0       0       0
  3655 ;;Total ram usage:        0 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    5
  3658 ;; This function calls:
  3659 ;;		_CheckKeyOldValue
  3660 ;;		_CheckOnceResult
  3661 ;;		_CheckValidTime
  3662 ;;		_ClearResSum
  3663 ;;		_GetTouchKeyValue
  3664 ;;		_KeyStopClear
  3665 ;;		_TurnKeyFlags
  3666 ;; This function is called by:
  3667 ;;		_main
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           
  3672                           ;psect for function _CheckTouchKey
  3673  0020                     _CheckTouchKey:	
  3674                           
  3675                           ;CheckTouchKey.c: 531: if(!b_kover)
  3676                           
  3677                           ;incstack = 0
  3678                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3679  0020  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3680  0021  282D               	goto	l1557
  3681                           
  3682                           ;CheckTouchKey.c: 532: {
  3683                           ;CheckTouchKey.c: 534: GetTouchKeyValue();
  3684  0022  204A  118A         	fcall	_GetTouchKeyValue
  3685                           
  3686                           ;CheckTouchKey.c: 535: if(++KeyCounter >= 8)
  3687  0024  3008               	movlw	8
  3688  0025  1283               	bcf	3,5	;RP0=0, select bank0
  3689  0026  0AD3               	incf	_KeyCounter,f
  3690  0027  0253               	subwf	_KeyCounter,w
  3691  0028  1C03               	skipc
  3692  0029  2849               	goto	l3914
  3693                           
  3694                           ;CheckTouchKey.c: 536: {
  3695                           ;CheckTouchKey.c: 537: KeyCounter = 0;
  3696  002A  01D3               	clrf	_KeyCounter
  3697                           
  3698                           ;CheckTouchKey.c: 538: b_kover = 1;
  3699  002B  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3700  002C  2849               	goto	l3914
  3701  002D                     l1557:	
  3702                           
  3703                           ;CheckTouchKey.c: 541: else if(!b_kover1)
  3704  002D  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3705  002E  2843               	goto	l3908
  3706                           
  3707                           ;CheckTouchKey.c: 542: {
  3708                           ;CheckTouchKey.c: 544: CheckOnceResult();
  3709  002F  2120  118A         	fcall	_CheckOnceResult
  3710                           
  3711                           ;CheckTouchKey.c: 547: TurnKeyFlags();
  3712  0031  2242  118A         	fcall	_TurnKeyFlags
  3713                           
  3714                           ;CheckTouchKey.c: 548: b_kover1 = 1;
  3715  0033  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3716                           
  3717                           ;CheckTouchKey.c: 554: if(b_kerr || KeyCounter > KeyValidNumber)
  3718  0034  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  3719  0035  283A               	goto	l3898
  3720  0036  3002               	movlw	2
  3721  0037  0253               	subwf	_KeyCounter,w
  3722  0038  1C03               	skipc
  3723  0039  283F               	goto	l3906
  3724  003A                     l3898:	
  3725                           
  3726                           ;CheckTouchKey.c: 555: {
  3727                           ;CheckTouchKey.c: 556: KeyStopClear();
  3728  003A  222F  118A         	fcall	_KeyStopClear
  3729                           
  3730                           ;CheckTouchKey.c: 557: b_kerr = 0;
  3731  003C  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  3732                           
  3733                           ;CheckTouchKey.c: 558: b_kover = 0;
  3734  003D  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3735                           
  3736                           ;CheckTouchKey.c: 559: b_kover1 = 0;
  3737  003E  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3738  003F                     l3906:	
  3739                           
  3740                           ;CheckTouchKey.c: 560: }
  3741                           ;CheckTouchKey.c: 561: KeyCounter = 0;
  3742  003F  1283               	bcf	3,5	;RP0=0, select bank0
  3743  0040  1303               	bcf	3,6	;RP1=0, select bank0
  3744  0041  01D3               	clrf	_KeyCounter
  3745                           
  3746                           ;CheckTouchKey.c: 562: }
  3747  0042  2849               	goto	l3914
  3748  0043                     l3908:	
  3749                           
  3750                           ;CheckTouchKey.c: 563: else
  3751                           ;CheckTouchKey.c: 564: {
  3752                           ;CheckTouchKey.c: 566: CheckKeyOldValue();
  3753  0043  20AC  118A         	fcall	_CheckKeyOldValue
  3754                           
  3755                           ;CheckTouchKey.c: 568: ClearResSum();
  3756  0045  209D  118A         	fcall	_ClearResSum
  3757                           
  3758                           ;CheckTouchKey.c: 570: b_kover = 0;
  3759  0047  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3760                           
  3761                           ;CheckTouchKey.c: 571: b_kover1 = 0;
  3762  0048  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3763  0049                     l3914:	
  3764                           
  3765                           ;CheckTouchKey.c: 572: }
  3766                           ;CheckTouchKey.c: 574: CheckValidTime();
  3767  0049  2A6F               	ljmp	l3246
  3768  004A                     __end_of_CheckTouchKey:	
  3769  004A                     __ptext25:	
  3770 ;; *************** function _GetTouchKeyValue *****************
  3771 ;; Defined at:
  3772 ;;		line 196 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;		None
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;  temp            2    3[COMMON] unsigned int 
  3777 ;;  wake            2    0        unsigned int 
  3778 ;;  cnt             1    5[COMMON] unsigned char 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : A00/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3788 ;;      Params:         0       0       0       0       0
  3789 ;;      Locals:         3       0       0       0       0
  3790 ;;      Temps:          0       0       0       0       0
  3791 ;;      Totals:         3       0       0       0       0
  3792 ;;Total ram usage:        3 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    2
  3795 ;; This function calls:
  3796 ;;		_ClearResSum
  3797 ;; This function is called by:
  3798 ;;		_CheckTouchKey
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           
  3803                           ;psect for function _GetTouchKeyValue
  3804  004A                     _GetTouchKeyValue:	
  3805                           
  3806                           ;CheckTouchKey.c: 199: unsigned int wake = 1;
  3807                           
  3808                           ;incstack = 0
  3809                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3810  004A  01F5               	clrf	GetTouchKeyValue@cnt
  3811  004B                     l3074:	
  3812                           
  3813                           ;CheckTouchKey.c: 204: {
  3814                           ;CheckTouchKey.c: 205: KEYCON0 = 0;
  3815  004B  1683               	bsf	3,5	;RP0=1, select bank1
  3816  004C  1303               	bcf	3,6	;RP1=0, select bank1
  3817  004D  0192               	clrf	18	;volatile
  3818                           
  3819                           ;CheckTouchKey.c: 206: KEYCON1 = 0;
  3820  004E  0193               	clrf	19	;volatile
  3821                           
  3822                           ;CheckTouchKey.c: 207: KEYCON2 = 0x01;
  3823  004F  3001               	movlw	1
  3824  0050  0097               	movwf	23	;volatile
  3825                           
  3826                           ;CheckTouchKey.c: 209: TRISB6 = 0;
  3827  0051  1306               	bcf	6,6	;volatile
  3828                           
  3829                           ;CheckTouchKey.c: 210: RB6 = 0;
  3830  0052  1283               	bcf	3,5	;RP0=0, select bank0
  3831  0053  1306               	bcf	6,6	;volatile
  3832  0054  0000               	nop	;# 
  3833  0055  0000               	nop	;# 
  3834  0056  0000               	nop	;# 
  3835  0057  0000               	nop	;# 
  3836  0058  0000               	nop	;# 
  3837  0059  0000               	nop	;# 
  3838  005A  0000               	nop	;# 
  3839  005B  0000               	nop	;# 
  3840                           
  3841                           ;CheckTouchKey.c: 219: TRISB6 = 1;
  3842  005C  1683               	bsf	3,5	;RP0=1, select bank1
  3843  005D  1303               	bcf	3,6	;RP1=0, select bank1
  3844  005E  1706               	bsf	6,6	;volatile
  3845                           
  3846                           ;CheckTouchKey.c: 221: KEYCON0 = Table_KeyCap[cnt];
  3847  005F  0875               	movf	GetTouchKeyValue@cnt,w
  3848  0060  3E1A               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  3849  0061  0084               	movwf	4
  3850  0062  158A  2000  118A   	fcall	stringdir
  3851  0065  0092               	movwf	18	;volatile
  3852                           
  3853                           ;CheckTouchKey.c: 222: KEYCON1 = Table_KeyChannel[cnt];
  3854  0066  0875               	movf	GetTouchKeyValue@cnt,w
  3855  0067  3E1D               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  3856  0068  0084               	movwf	4
  3857  0069  158A  2000  118A   	fcall	stringdir
  3858  006C  0093               	movwf	19	;volatile
  3859  006D  0000               	nop	;# 
  3860  006E  0000               	nop	;# 
  3861  006F  0000               	nop	;# 
  3862  0070  0000               	nop	;# 
  3863                           
  3864                           ;CheckTouchKey.c: 227: KEYCON0 |= 0x1;
  3865  0071  1683               	bsf	3,5	;RP0=1, select bank1
  3866  0072  1303               	bcf	3,6	;RP1=0, select bank1
  3867  0073  1412               	bsf	18,0	;volatile
  3868                           
  3869                           ;CheckTouchKey.c: 229: temp = 2000;
  3870  0074  30D0               	movlw	208
  3871  0075  00F3               	movwf	GetTouchKeyValue@temp
  3872  0076  3007               	movlw	7
  3873  0077  00F4               	movwf	GetTouchKeyValue@temp+1
  3874  0078                     l1479:	
  3875                           ;CheckTouchKey.c: 230: while(!(KEYCON0&0x80))
  3876                           
  3877  0078  1B92               	btfsc	18,7	;volatile
  3878  0079  2886               	goto	l3100
  3879                           
  3880                           ;CheckTouchKey.c: 231: {
  3881                           ;CheckTouchKey.c: 232: if(0 == (--temp))
  3882  007A  3001               	movlw	1
  3883  007B  02F3               	subwf	GetTouchKeyValue@temp,f
  3884  007C  1C03               	skipc
  3885  007D  03F4               	decf	GetTouchKeyValue@temp+1,f
  3886  007E  0873               	movf	GetTouchKeyValue@temp,w
  3887  007F  0474               	iorwf	GetTouchKeyValue@temp+1,w
  3888  0080  1D03               	btfss	3,2
  3889  0081  2878               	goto	l1479
  3890                           
  3891                           ;CheckTouchKey.c: 233: {
  3892                           ;CheckTouchKey.c: 234: KeyCounter = 255;
  3893  0082  30FF               	movlw	255
  3894  0083  1283               	bcf	3,5	;RP0=0, select bank0
  3895  0084  00D3               	movwf	_KeyCounter
  3896                           
  3897                           ;CheckTouchKey.c: 235: ClearResSum();
  3898  0085  289D               	ljmp	l2944
  3899  0086                     l3100:	
  3900                           
  3901                           ;CheckTouchKey.c: 237: }
  3902                           ;CheckTouchKey.c: 238: }
  3903                           ;CheckTouchKey.c: 240: KeyResSum[cnt] += (unsigned int)((KEYDATAH<<8) | KEYDATAL);
  3904  0086  1003               	clrc
  3905  0087  0D75               	rlf	GetTouchKeyValue@cnt,w
  3906  0088  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  3907  0089  0084               	movwf	4
  3908  008A  0814               	movf	20,w	;volatile
  3909  008B  1383               	bcf	3,7	;select IRP bank0
  3910  008C  0780               	addwf	0,f
  3911  008D  0F84               	incfsz	4,f
  3912  008E  0800               	movf	0,w
  3913  008F  1803               	skipnc
  3914  0090  0A00               	incf	0,w
  3915  0091  00FF               	movwf	127
  3916  0092  0815               	movf	21,w	;volatile
  3917  0093  077F               	addwf	127,w
  3918  0094  0080               	movwf	0
  3919  0095  3003               	movlw	3
  3920  0096  0384               	decf	4,f
  3921  0097  0AF5               	incf	GetTouchKeyValue@cnt,f
  3922  0098  0275               	subwf	GetTouchKeyValue@cnt,w
  3923  0099  1C03               	skipc
  3924  009A  284B               	goto	l3074
  3925                           
  3926                           ;CheckTouchKey.c: 244: b_ksleep = 0;
  3927  009B  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3928  009C  0008               	return
  3929  009D                     __end_of_GetTouchKeyValue:	
  3930  009D                     __ptext26:	
  3931 ;; *************** function _ClearResSum *****************
  3932 ;; Defined at:
  3933 ;;		line 142 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;		None
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;  cnt             1    2[COMMON] unsigned char 
  3938 ;; Return value:  Size  Location     Type
  3939 ;;                  1    wreg      void 
  3940 ;; Registers used:
  3941 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3942 ;; Tracked objects:
  3943 ;;		On entry : 300/0
  3944 ;;		On exit  : B00/0
  3945 ;;		Unchanged: 300/0
  3946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3947 ;;      Params:         0       0       0       0       0
  3948 ;;      Locals:         1       0       0       0       0
  3949 ;;      Temps:          0       0       0       0       0
  3950 ;;      Totals:         1       0       0       0       0
  3951 ;;Total ram usage:        1 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    1
  3954 ;; This function calls:
  3955 ;;		Nothing
  3956 ;; This function is called by:
  3957 ;;		_GetTouchKeyValue
  3958 ;;		_CheckTouchKey
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           
  3963                           ;psect for function _ClearResSum
  3964  009D                     _ClearResSum:	
  3965  009D                     l2944:	
  3966                           ;incstack = 0
  3967                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  3968                           
  3969                           
  3970                           ;CheckTouchKey.c: 144: unsigned char cnt = 0;
  3971  009D  01F2               	clrf	ClearResSum@cnt
  3972  009E                     l2946:	
  3973                           
  3974                           ;CheckTouchKey.c: 146: {
  3975                           ;CheckTouchKey.c: 147: KeyResSum[cnt] = 0;
  3976  009E  1003               	clrc
  3977  009F  0D72               	rlf	ClearResSum@cnt,w
  3978  00A0  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  3979  00A1  0084               	movwf	4
  3980  00A2  3003               	movlw	3
  3981  00A3  1383               	bcf	3,7	;select IRP bank0
  3982  00A4  0180               	clrf	0
  3983  00A5  0A84               	incf	4,f
  3984  00A6  0180               	clrf	0
  3985  00A7  0AF2               	incf	ClearResSum@cnt,f
  3986  00A8  0272               	subwf	ClearResSum@cnt,w
  3987  00A9  1803               	btfsc	3,0
  3988  00AA  0008               	return
  3989  00AB  289E               	goto	l2946
  3990  00AC                     __end_of_ClearResSum:	
  3991  00AC                     __ptext31:	
  3992 ;; *************** function _CheckKeyOldValue *****************
  3993 ;; Defined at:
  3994 ;;		line 369 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3995 ;; Parameters:    Size  Location     Type
  3996 ;;		None
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;  KeyOldTemp      2    2[BANK0 ] unsigned int 
  3999 ;;  KeyResTemp      2    0[BANK0 ] unsigned int 
  4000 ;;  cnt             1    4[BANK0 ] unsigned char 
  4001 ;; Return value:  Size  Location     Type
  4002 ;;                  1    wreg      void 
  4003 ;; Registers used:
  4004 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 300/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4010 ;;      Params:         0       0       0       0       0
  4011 ;;      Locals:         0       5       0       0       0
  4012 ;;      Temps:          2       0       0       0       0
  4013 ;;      Totals:         2       5       0       0       0
  4014 ;;Total ram usage:        7 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; Hardware stack levels required when called:    3
  4017 ;; This function calls:
  4018 ;;		_KeyIsIn
  4019 ;; This function is called by:
  4020 ;;		_CheckTouchKey
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           
  4025                           ;psect for function _CheckKeyOldValue
  4026  00AC                     _CheckKeyOldValue:	
  4027                           
  4028                           ;CheckTouchKey.c: 371: static unsigned char counter = 0;
  4029                           ;CheckTouchKey.c: 372: unsigned char cnt = 0;
  4030                           
  4031                           ;incstack = 0
  4032                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4033  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  4034  00AD  3004               	movlw	4
  4035  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  4036  00AF  01EB               	clrf	CheckKeyOldValue@cnt
  4037                           
  4038                           ;CheckTouchKey.c: 373: unsigned int KeyResTemp;
  4039                           ;CheckTouchKey.c: 374: unsigned int KeyOldTemp;
  4040                           ;CheckTouchKey.c: 376: if(++counter < 4)
  4041  00B0  0AD1               	incf	CheckKeyOldValue@counter,f
  4042  00B1  0251               	subwf	CheckKeyOldValue@counter,w
  4043  00B2  1C03               	btfss	3,0
  4044  00B3  0008               	return
  4045                           
  4046                           ;CheckTouchKey.c: 378: counter = 0;
  4047  00B4  01D1               	clrf	CheckKeyOldValue@counter
  4048  00B5                     l3812:	
  4049                           
  4050                           ;CheckTouchKey.c: 381: {
  4051                           ;CheckTouchKey.c: 382: KeyResTemp = KeyResSum[cnt];
  4052  00B5  1003               	clrc
  4053  00B6  0D6B               	rlf	CheckKeyOldValue@cnt,w
  4054  00B7  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  4055  00B8  0084               	movwf	4
  4056  00B9  1383               	bcf	3,7	;select IRP bank0
  4057  00BA  0800               	movf	0,w
  4058  00BB  00E7               	movwf	CheckKeyOldValue@KeyResTemp
  4059  00BC  0A84               	incf	4,f
  4060  00BD  0800               	movf	0,w
  4061  00BE  00E8               	movwf	CheckKeyOldValue@KeyResTemp+1
  4062                           
  4063                           ;CheckTouchKey.c: 383: if(!KeyIsIn(cnt))
  4064  00BF  086B               	movf	CheckKeyOldValue@cnt,w
  4065  00C0  21FB  118A         	fcall	_KeyIsIn
  4066  00C2  3A00               	xorlw	0
  4067                           
  4068                           ;CheckTouchKey.c: 384: {
  4069                           ;CheckTouchKey.c: 386: KeyOldTemp = KeyOldValue0[cnt] - KeyResTemp;
  4070  00C3  1003               	clrc
  4071  00C4  1D03               	skipz
  4072  00C5  28FA               	goto	L16
  4073  00C6  0D6B               	rlf	CheckKeyOldValue@cnt,w
  4074  00C7  3EA6               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4075  00C8  0084               	movwf	4
  4076  00C9  1383               	bcf	3,7	;select IRP bank1
  4077                           
  4078                           ;CheckTouchKey.c: 387: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  4079  00CA  2281  118A         	fcall	PL2	;call to abstracted procedure
  4080  00CC  1903               	skipnz
  4081  00CD  0269               	subwf	CheckKeyOldValue@KeyOldTemp,w
  4082  00CE  1C03               	skipc
  4083  00CF  28D6               	goto	L13
  4084  00D0  0F69               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  4085  00D1  28F9               	goto	l1520
  4086  00D2  0A6A               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  4087                           
  4088                           ;CheckTouchKey.c: 388: {
  4089                           ;CheckTouchKey.c: 389: KeyOldTemp = KeyOldValue1[cnt] - KeyResTemp;
  4090  00D3  1003               	clrc
  4091  00D4  1D03               	btfss	3,2
  4092  00D5  28FA               	goto	L16
  4093  00D6                     L13:	
  4094  00D6  0D6B               	rlf	CheckKeyOldValue@cnt,w
  4095  00D7  3E26               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4096  00D8  0084               	movwf	4
  4097                           
  4098                           ;CheckTouchKey.c: 390: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  4099  00D9  2281  118A         	fcall	PL2	;call to abstracted procedure
  4100  00DB  1903               	skipnz
  4101  00DC  0269               	subwf	CheckKeyOldValue@KeyOldTemp,w
  4102  00DD  1C03               	skipc
  4103  00DE  28E5               	goto	L14
  4104  00DF  0F69               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  4105  00E0  28F9               	goto	l1520
  4106  00E1  0A6A               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  4107                           
  4108                           ;CheckTouchKey.c: 391: {
  4109                           ;CheckTouchKey.c: 392: KeyOldTemp = KeyOldValue2[cnt] - KeyResTemp;
  4110  00E2  1003               	clrc
  4111  00E3  1D03               	btfss	3,2
  4112  00E4  28FA               	goto	L16
  4113  00E5                     L14:	
  4114  00E5  0D6B               	rlf	CheckKeyOldValue@cnt,w
  4115  00E6  3EA0               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4116  00E7  0084               	movwf	4
  4117                           
  4118                           ;CheckTouchKey.c: 393: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  4119  00E8  2281  118A         	fcall	PL2	;call to abstracted procedure
  4120  00EA  1903               	skipnz
  4121  00EB  0269               	subwf	CheckKeyOldValue@KeyOldTemp,w
  4122  00EC  1C03               	skipc
  4123  00ED  28F4               	goto	L15
  4124  00EE  0F69               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  4125  00EF  28F9               	goto	l1520
  4126  00F0  0A6A               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  4127                           
  4128                           ;CheckTouchKey.c: 394: {
  4129                           ;CheckTouchKey.c: 395: KeyReference[cnt] = KeyResTemp;
  4130  00F1  1003               	clrc
  4131  00F2  1D03               	btfss	3,2
  4132  00F3  28FA               	goto	L16
  4133  00F4                     L15:	
  4134  00F4  0D6B               	rlf	CheckKeyOldValue@cnt,w
  4135  00F5  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  4136  00F6  0084               	movwf	4
  4137  00F7  22CE  118A         	fcall	PL16	;call to abstracted procedure
  4138  00F9                     l1520:	
  4139                           
  4140                           ;CheckTouchKey.c: 396: }
  4141                           ;CheckTouchKey.c: 397: }
  4142                           ;CheckTouchKey.c: 398: }
  4143                           ;CheckTouchKey.c: 399: }
  4144                           ;CheckTouchKey.c: 402: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  4145  00F9  1003               	clrc
  4146  00FA                     L16:	
  4147  00FA  0D6B               	rlf	CheckKeyOldValue@cnt,w
  4148  00FB  3E26               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4149  00FC  0084               	movwf	4
  4150  00FD  1383               	bcf	3,7	;select IRP bank0
  4151  00FE  22BA  118A         	fcall	PL10	;call to abstracted procedure
  4152  0100  3EA0               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4153                           
  4154                           ;CheckTouchKey.c: 403: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  4155  0101  22AF  118A         	fcall	PL8	;call to abstracted procedure
  4156  0103  22BA  118A         	fcall	PL10	;call to abstracted procedure
  4157  0105  3E26               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4158                           
  4159                           ;CheckTouchKey.c: 404: KeyOldValue0[cnt] = KeyResTemp;
  4160  0106  22AF  118A         	fcall	PL8	;call to abstracted procedure
  4161  0108  22CE  118A         	fcall	PL16	;call to abstracted procedure
  4162  010A  3003               	movlw	3
  4163  010B  0AEB               	incf	CheckKeyOldValue@cnt,f
  4164  010C  026B               	subwf	CheckKeyOldValue@cnt,w
  4165  010D  1803               	btfsc	3,0
  4166  010E  0008               	return
  4167  010F  28B5               	goto	l3812
  4168  0110                     __end_of_CheckKeyOldValue:	
  4169  0110                     __ptext23:	
  4170 ;; *************** function _KeyClearIn *****************
  4171 ;; Defined at:
  4172 ;;		line 104 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;		None
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;  cnt             1    4[COMMON] unsigned char 
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  1    wreg      void 
  4179 ;; Registers used:
  4180 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4186 ;;      Params:         0       0       0       0       0
  4187 ;;      Locals:         1       0       0       0       0
  4188 ;;      Temps:          0       0       0       0       0
  4189 ;;      Totals:         1       0       0       0       0
  4190 ;;Total ram usage:        1 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; Hardware stack levels required when called:    3
  4193 ;; This function calls:
  4194 ;;		_KeyClearOne
  4195 ;;		_KeyIsIn
  4196 ;; This function is called by:
  4197 ;;		_TurnKeyFlags
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           
  4202                           ;psect for function _KeyClearIn
  4203  0110                     _KeyClearIn:	
  4204                           
  4205                           ;CheckTouchKey.c: 106: unsigned char cnt;
  4206                           ;CheckTouchKey.c: 107: for(cnt=0;cnt < KeyTotalNumber;cnt++)
  4207                           
  4208                           ;incstack = 0
  4209                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4210  0110  01F4               	clrf	KeyClearIn@cnt
  4211  0111                     l3700:	
  4212                           
  4213                           ;CheckTouchKey.c: 108: {
  4214                           ;CheckTouchKey.c: 109: if(!KeyIsIn(cnt))
  4215  0111  0874               	movf	KeyClearIn@cnt,w
  4216  0112  21FB  118A         	fcall	_KeyIsIn
  4217  0114  3A00               	xorlw	0
  4218  0115  1D03               	skipz
  4219  0116  291A               	goto	l3704
  4220                           
  4221                           ;CheckTouchKey.c: 110: {
  4222                           ;CheckTouchKey.c: 111: KeyClearOne(cnt);
  4223  0117  0874               	movf	KeyClearIn@cnt,w
  4224  0118  220F  118A         	fcall	_KeyClearOne
  4225  011A                     l3704:	
  4226  011A  3003               	movlw	3
  4227  011B  0AF4               	incf	KeyClearIn@cnt,f
  4228  011C  0274               	subwf	KeyClearIn@cnt,w
  4229  011D  1803               	btfsc	3,0
  4230  011E  0008               	return
  4231  011F  2911               	goto	l3700
  4232  0120                     __end_of_KeyClearIn:	
  4233  0120                     __ptext28:	
  4234 ;; *************** function _CheckOnceResult *****************
  4235 ;; Defined at:
  4236 ;;		line 255 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;		None
  4239 ;; Auto vars:     Size  Location     Type
  4240 ;;  KeyResTemp      2    6[BANK1 ] unsigned int 
  4241 ;;  KeyValue        2    3[BANK1 ] unsigned int 
  4242 ;;  OldValue        2    0[BANK1 ] unsigned int 
  4243 ;;  cnt             1    8[BANK1 ] unsigned char 
  4244 ;;  KeyDown         1    5[BANK1 ] unsigned char 
  4245 ;;  flag            1    2[BANK1 ] unsigned char 
  4246 ;; Return value:  Size  Location     Type
  4247 ;;                  1    wreg      void 
  4248 ;; Registers used:
  4249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : B00/100
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4255 ;;      Params:         0       0       0       0       0
  4256 ;;      Locals:         0       0       9       0       0
  4257 ;;      Temps:          0       4       0       0       0
  4258 ;;      Totals:         0       4       9       0       0
  4259 ;;Total ram usage:       13 bytes
  4260 ;; Hardware stack levels used:    1
  4261 ;; Hardware stack levels required when called:    3
  4262 ;; This function calls:
  4263 ;;		_KeyClearOne
  4264 ;;		_KeyHave
  4265 ;;		_KeyIsIn
  4266 ;; This function is called by:
  4267 ;;		_CheckTouchKey
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           
  4272                           ;psect for function _CheckOnceResult
  4273  0120                     _CheckOnceResult:	
  4274                           
  4275                           ;CheckTouchKey.c: 257: unsigned char cnt = 0;
  4276                           
  4277                           ;incstack = 0
  4278                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4279  0120  1683               	bsf	3,5	;RP0=1, select bank1
  4280  0121  1303               	bcf	3,6	;RP1=0, select bank1
  4281  0122  01B4               	clrf	CheckOnceResult@cnt^(0+128)
  4282                           
  4283                           ;CheckTouchKey.c: 258: unsigned char KeyDown;
  4284                           ;CheckTouchKey.c: 259: unsigned char flag;
  4285                           ;CheckTouchKey.c: 261: unsigned int KeyResTemp;
  4286                           ;CheckTouchKey.c: 262: unsigned int KeyValue;
  4287                           ;CheckTouchKey.c: 263: unsigned int OldValue;
  4288                           ;CheckTouchKey.c: 265: KeyData[0] = 0;
  4289  0123  1283               	bcf	3,5	;RP0=0, select bank0
  4290  0124  01B7               	clrf	_KeyData	;volatile
  4291                           
  4292                           ;CheckTouchKey.c: 266: KeyData[1] = 0;
  4293  0125  01B8               	clrf	_KeyData+1	;volatile
  4294                           
  4295                           ;CheckTouchKey.c: 267: KeyMaxSub = 0;
  4296  0126  01D2               	clrf	_KeyMaxSub
  4297  0127                     l3738:	
  4298                           
  4299                           ;CheckTouchKey.c: 271: {
  4300                           ;CheckTouchKey.c: 272: flag = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  4301  0127  1683               	bsf	3,5	;RP0=1, select bank1
  4302  0128  0834               	movf	CheckOnceResult@cnt^(0+128),w
  4303  0129  3907               	andlw	7
  4304  012A  3E0F               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4305  012B  0084               	movwf	4
  4306  012C  158A  2000  118A   	fcall	stringdir
  4307  012F  00AE               	movwf	CheckOnceResult@flag^(0+128)
  4308                           
  4309                           ;CheckTouchKey.c: 274: KeyResSum[cnt] >>= 3;
  4310  0130  1003               	clrc
  4311  0131  0D34               	rlf	CheckOnceResult@cnt^(0+128),w
  4312  0132  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  4313  0133  0084               	movwf	4
  4314  0134  3003               	movlw	3
  4315  0135                     u2795:	
  4316  0135  0A84               	incf	4,f
  4317  0136  1003               	clrc
  4318  0137  1383               	bcf	3,7	;select IRP bank0
  4319  0138  0C80               	rrf	0,f
  4320  0139  0384               	decf	4,f
  4321  013A  0C80               	rrf	0,f
  4322  013B  3EFF               	addlw	-1
  4323  013C  1D03               	skipz
  4324  013D  2935               	goto	u2795
  4325                           
  4326                           ;CheckTouchKey.c: 275: KeyResTemp = KeyResSum[cnt];
  4327  013E  1003               	clrc
  4328  013F  0D34               	rlf	CheckOnceResult@cnt^(0+128),w
  4329  0140  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  4330  0141  0084               	movwf	4
  4331  0142  0800               	movf	0,w
  4332  0143  00B2               	movwf	CheckOnceResult@KeyResTemp^(0+128)
  4333  0144  0A84               	incf	4,f
  4334  0145  0800               	movf	0,w
  4335  0146  00B3               	movwf	(CheckOnceResult@KeyResTemp+1)^(0+128)
  4336                           
  4337                           ;CheckTouchKey.c: 276: KeyDown = Table_KeyDown[cnt];
  4338  0147  0834               	movf	CheckOnceResult@cnt^(0+128),w
  4339  0148  3E17               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4340  0149  0084               	movwf	4
  4341  014A  158A  2000  118A   	fcall	stringdir
  4342  014D  00B1               	movwf	CheckOnceResult@KeyDown^(0+128)
  4343                           
  4344                           ;CheckTouchKey.c: 278: KeyValue = KeyResTemp + KeyDown;
  4345  014E  00AF               	movwf	CheckOnceResult@KeyValue^(0+128)
  4346  014F  01B0               	clrf	(CheckOnceResult@KeyValue+1)^(0+128)
  4347  0150  0832               	movf	CheckOnceResult@KeyResTemp^(0+128),w
  4348  0151  07AF               	addwf	CheckOnceResult@KeyValue^(0+128),f
  4349  0152  1803               	skipnc
  4350  0153  0AB0               	incf	(CheckOnceResult@KeyValue+1)^(0+128),f
  4351  0154  0833               	movf	(CheckOnceResult@KeyResTemp+1)^(0+128),w
  4352  0155  07B0               	addwf	(CheckOnceResult@KeyValue+1)^(0+128),f
  4353                           
  4354                           ;CheckTouchKey.c: 280: if(!KeyIsIn(cnt))
  4355  0156  0834               	movf	CheckOnceResult@cnt^(0+128),w
  4356  0157  21FB  118A         	fcall	_KeyIsIn
  4357  0159  3A00               	xorlw	0
  4358  015A  1D03               	skipz
  4359  015B  29A7               	goto	l3780
  4360                           
  4361                           ;CheckTouchKey.c: 281: {
  4362                           ;CheckTouchKey.c: 283: OldValue = KeyOldValue2[cnt];
  4363  015C  22C8  118A         	fcall	PL14	;call to abstracted procedure
  4364  015E  1383               	bcf	3,7	;select IRP bank1
  4365  015F  0800               	movf	0,w
  4366  0160  00AC               	movwf	CheckOnceResult@OldValue^(0+128)
  4367  0161  0A84               	incf	4,f
  4368  0162  0800               	movf	0,w
  4369  0163  00AD               	movwf	(CheckOnceResult@OldValue+1)^(0+128)
  4370                           
  4371                           ;CheckTouchKey.c: 285: if(KeyReference[cnt] > KeyValue)
  4372  0164  1003               	clrc
  4373  0165  0D34               	rlf	CheckOnceResult@cnt^(0+128),w
  4374  0166  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  4375  0167  22A6  118A         	fcall	PL6	;call to abstracted procedure
  4376  0169  0230               	subwf	(CheckOnceResult@KeyValue+1)^(0+128),w
  4377  016A  1D03               	skipz
  4378  016B  296E               	goto	u2815
  4379  016C  22D4  118A         	fcall	PL18	;call to abstracted procedure
  4380  016E                     u2815:	
  4381  016E  1803               	skipnc
  4382  016F  2981               	goto	l3756
  4383                           
  4384                           ;CheckTouchKey.c: 286: {
  4385                           ;CheckTouchKey.c: 287: KeyResTemp = KeyReference[cnt] - KeyResTemp;
  4386  0170  1003               	clrc
  4387  0171  0D34               	rlf	CheckOnceResult@cnt^(0+128),w
  4388  0172  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  4389  0173  22A6  118A         	fcall	PL6	;call to abstracted procedure
  4390  0175  0832               	movf	CheckOnceResult@KeyResTemp^(0+128),w
  4391  0176  1283               	bcf	3,5	;RP0=0, select bank0
  4392  0177  0267               	subwf	??_CheckOnceResult,w
  4393  0178  1683               	bsf	3,5	;RP0=1, select bank1
  4394  0179  00B2               	movwf	CheckOnceResult@KeyResTemp^(0+128)
  4395  017A  0833               	movf	(CheckOnceResult@KeyResTemp+1)^(0+128),w
  4396  017B  1C03               	skipc
  4397  017C  0A33               	incf	(CheckOnceResult@KeyResTemp+1)^(0+128),w
  4398  017D  1283               	bcf	3,5	;RP0=0, select bank0
  4399  017E  0268               	subwf	??_CheckOnceResult+1,w
  4400  017F  1683               	bsf	3,5	;RP0=1, select bank1
  4401  0180  29A5               	goto	L11
  4402  0181                     l3756:	
  4403                           ;CheckTouchKey.c: 288: }
  4404                           
  4405                           
  4406                           ;CheckTouchKey.c: 289: else if ((OldValue > KeyValue) && (KeyOldValue1[cnt] > KeyValue))
  4407  0181  082D               	movf	(CheckOnceResult@OldValue+1)^(0+128),w
  4408  0182  0230               	subwf	(CheckOnceResult@KeyValue+1)^(0+128),w
  4409  0183  1D03               	skipz
  4410  0184  2987               	goto	u2825
  4411  0185  082C               	movf	CheckOnceResult@OldValue^(0+128),w
  4412  0186  022F               	subwf	CheckOnceResult@KeyValue^(0+128),w
  4413  0187                     u2825:	
  4414  0187  1803               	skipnc
  4415  0188  29F3               	goto	l3802
  4416  0189  1003               	clrc
  4417  018A  0D34               	rlf	CheckOnceResult@cnt^(0+128),w
  4418  018B  3E26               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4419  018C  22A6  118A         	fcall	PL6	;call to abstracted procedure
  4420  018E  0230               	subwf	(CheckOnceResult@KeyValue+1)^(0+128),w
  4421  018F  1D03               	skipz
  4422  0190  2993               	goto	u2835
  4423  0191  22D4  118A         	fcall	PL18	;call to abstracted procedure
  4424  0193                     u2835:	
  4425  0193  1803               	skipnc
  4426  0194  29F3               	goto	l3802
  4427                           
  4428                           ;CheckTouchKey.c: 290: {
  4429                           ;CheckTouchKey.c: 291: KeyReference[cnt] = OldValue;
  4430  0195  1003               	clrc
  4431  0196  0D34               	rlf	CheckOnceResult@cnt^(0+128),w
  4432  0197  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  4433  0198  0084               	movwf	4
  4434  0199  082C               	movf	CheckOnceResult@OldValue^(0+128),w
  4435  019A  0080               	movwf	0
  4436  019B  0A84               	incf	4,f
  4437  019C  082D               	movf	(CheckOnceResult@OldValue+1)^(0+128),w
  4438  019D  0080               	movwf	0
  4439                           
  4440                           ;CheckTouchKey.c: 292: KeyResTemp = OldValue - KeyResTemp;
  4441  019E  0832               	movf	CheckOnceResult@KeyResTemp^(0+128),w
  4442  019F  022C               	subwf	CheckOnceResult@OldValue^(0+128),w
  4443  01A0  00B2               	movwf	CheckOnceResult@KeyResTemp^(0+128)
  4444  01A1  0833               	movf	(CheckOnceResult@KeyResTemp+1)^(0+128),w
  4445  01A2  1C03               	skipc
  4446  01A3  0A33               	incf	(CheckOnceResult@KeyResTemp+1)^(0+128),w
  4447  01A4  022D               	subwf	(CheckOnceResult@OldValue+1)^(0+128),w
  4448  01A5                     L11:	
  4449  01A5  00B3               	movwf	(CheckOnceResult@KeyResTemp+1)^(0+128)
  4450  01A6  29E9               	goto	L12
  4451  01A7                     l3780:	
  4452                           ;CheckTouchKey.c: 322: else
  4453                           ;CheckTouchKey.c: 323: {
  4454                           ;CheckTouchKey.c: 324: KeyHave(cnt,flag);
  4455                           
  4456                           ;CheckTouchKey.c: 297: }
  4457                           ;CheckTouchKey.c: 299: KeyUpShake[cnt] = 0;
  4458                           
  4459                           ;CheckTouchKey.c: 293: }
  4460                           
  4461                           
  4462                           ;CheckTouchKey.c: 328: else
  4463                           ;CheckTouchKey.c: 329: {
  4464                           ;CheckTouchKey.c: 332: if(KeyReference[cnt]+1 < KeyValue)
  4465  01A7  1683               	bsf	3,5	;RP0=1, select bank1
  4466  01A8  1003               	clrc
  4467  01A9  0D34               	rlf	CheckOnceResult@cnt^(0+128),w
  4468  01AA  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  4469  01AB  0084               	movwf	4
  4470  01AC  1383               	bcf	3,7	;select IRP bank0
  4471  01AD  0800               	movf	0,w
  4472  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  4473  01AF  00E7               	movwf	??_CheckOnceResult
  4474  01B0  0A84               	incf	4,f
  4475  01B1  0800               	movf	0,w
  4476  01B2  00E8               	movwf	??_CheckOnceResult+1
  4477  01B3  0867               	movf	??_CheckOnceResult,w
  4478  01B4  3E01               	addlw	1
  4479  01B5  00E9               	movwf	??_CheckOnceResult+2
  4480  01B6  0868               	movf	??_CheckOnceResult+1,w
  4481  01B7  1803               	skipnc
  4482  01B8  3E01               	addlw	1
  4483  01B9  00EA               	movwf	??_CheckOnceResult+3
  4484  01BA  1683               	bsf	3,5	;RP0=1, select bank1
  4485  01BB  0830               	movf	(CheckOnceResult@KeyValue+1)^(0+128),w
  4486  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  4487  01BD  026A               	subwf	??_CheckOnceResult+3,w
  4488  01BE  1D03               	skipz
  4489  01BF  29C4               	goto	u2845
  4490  01C0  1683               	bsf	3,5	;RP0=1, select bank1
  4491  01C1  082F               	movf	CheckOnceResult@KeyValue^(0+128),w
  4492  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  4493  01C3  0269               	subwf	??_CheckOnceResult+2,w
  4494  01C4                     u2845:	
  4495  01C4  1C03               	btfss	3,0
  4496  01C5  29F3               	goto	l3802
  4497                           
  4498                           ;CheckTouchKey.c: 336: else if((KeyOldValue2[cnt]+KeyDown<KeyResTemp) || (KeyOldValue1[c
      +                          nt]+KeyDown<KeyResTemp))
  4499  01C6  22C8  118A         	fcall	PL14	;call to abstracted procedure
  4500  01C8  0800               	movf	0,w
  4501  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  4502  01CA  00E7               	movwf	??_CheckOnceResult
  4503  01CB  228F  118A         	fcall	PL4	;call to abstracted procedure
  4504  01CD  1C03               	skipc
  4505  01CE  29DB               	goto	l3790
  4506  01CF  1683               	bsf	3,5	;RP0=1, select bank1
  4507  01D0  1003               	clrc
  4508  01D1  0D34               	rlf	CheckOnceResult@cnt^(0+128),w
  4509  01D2  3E26               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4510  01D3  0084               	movwf	4
  4511  01D4  0800               	movf	0,w
  4512  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  4513  01D6  00E7               	movwf	??_CheckOnceResult
  4514  01D7  228F  118A         	fcall	PL4	;call to abstracted procedure
  4515  01D9  1803               	skipnc
  4516  01DA  29E8               	goto	l3794
  4517  01DB                     l3790:	
  4518                           
  4519                           ;CheckTouchKey.c: 337: {
  4520                           ;CheckTouchKey.c: 338: if(++KeyUpShake[cnt] > 8)
  4521  01DB  1683               	bsf	3,5	;RP0=1, select bank1
  4522  01DC  0834               	movf	CheckOnceResult@cnt^(0+128),w
  4523  01DD  3E32               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4524  01DE  0084               	movwf	4
  4525  01DF  3009               	movlw	9
  4526  01E0  0A80               	incf	0,f
  4527  01E1  0200               	subwf	0,w
  4528  01E2  1C03               	skipc
  4529  01E3  29ED               	goto	l3796
  4530                           
  4531                           ;CheckTouchKey.c: 339: {
  4532                           ;CheckTouchKey.c: 340: KeyClearOne(cnt);
  4533  01E4  0834               	movf	CheckOnceResult@cnt^(0+128),w
  4534  01E5  220F  118A         	fcall	_KeyClearOne
  4535                           
  4536                           ;CheckTouchKey.c: 341: continue;
  4537  01E7  29F3               	goto	l3802
  4538  01E8                     l3794:	
  4539                           
  4540                           ;CheckTouchKey.c: 344: else
  4541                           ;CheckTouchKey.c: 345: {
  4542                           ;CheckTouchKey.c: 346: KeyUpShake[cnt] = 0;
  4543  01E8  1683               	bsf	3,5	;RP0=1, select bank1
  4544  01E9                     L12:	
  4545  01E9  0834               	movf	CheckOnceResult@cnt^(0+128),w
  4546  01EA  3E32               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4547  01EB  0084               	movwf	4
  4548  01EC  0180               	clrf	0
  4549  01ED                     l3796:	
  4550                           
  4551                           ;CheckTouchKey.c: 350: {
  4552                           ;CheckTouchKey.c: 351: KeyHave(cnt,flag);
  4553  01ED  082E               	movf	CheckOnceResult@flag^(0+128),w
  4554  01EE  00F2               	movwf	KeyHave@flag
  4555  01EF  01F3               	clrf	KeyHave@flag+1
  4556  01F0  0834               	movf	CheckOnceResult@cnt^(0+128),w
  4557  01F1  2224  118A         	fcall	_KeyHave
  4558  01F3                     l3802:	
  4559                           ;CheckTouchKey.c: 352: }
  4560                           
  4561  01F3  3003               	movlw	3
  4562  01F4  1683               	bsf	3,5	;RP0=1, select bank1
  4563  01F5  1303               	bcf	3,6	;RP1=0, select bank1
  4564  01F6  0AB4               	incf	CheckOnceResult@cnt^(0+128),f
  4565  01F7  0234               	subwf	CheckOnceResult@cnt^(0+128),w
  4566  01F8  1803               	btfsc	3,0
  4567  01F9  0008               	return
  4568  01FA  2927               	goto	l3738
  4569  01FB                     __end_of_CheckOnceResult:	
  4570  01FB                     __ptext32:	
  4571 ;; *************** function _KeyIsIn *****************
  4572 ;; Defined at:
  4573 ;;		line 74 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;  cnt             1    wreg     unsigned char 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  cnt             1    3[COMMON] unsigned char 
  4578 ;;  i               1    2[COMMON] unsigned char 
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  1    wreg      unsigned char 
  4581 ;; Registers used:
  4582 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 300/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4588 ;;      Params:         0       0       0       0       0
  4589 ;;      Locals:         2       0       0       0       0
  4590 ;;      Temps:          0       0       0       0       0
  4591 ;;      Totals:         2       0       0       0       0
  4592 ;;Total ram usage:        2 bytes
  4593 ;; Hardware stack levels used:    2
  4594 ;; Hardware stack levels required when called:    1
  4595 ;; This function calls:
  4596 ;;		Nothing
  4597 ;; This function is called by:
  4598 ;;		_KeyClearIn
  4599 ;;		_CheckOnceResult
  4600 ;;		_CheckKeyOldValue
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           
  4605                           ;psect for function _KeyIsIn
  4606  01FB                     _KeyIsIn:	
  4607                           
  4608                           ;incstack = 0
  4609                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4610                           ;KeyIsIn@cnt stored from wreg
  4611  01FB  00F3               	movwf	KeyIsIn@cnt
  4612                           
  4613                           ;CheckTouchKey.c: 76: unsigned char i = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  4614  01FC  3907               	andlw	7
  4615  01FD  3E0F               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4616  01FE  0084               	movwf	4
  4617  01FF  158A  2000  118A   	fcall	stringdir
  4618  0202  00F2               	movwf	KeyIsIn@i
  4619                           
  4620                           ;CheckTouchKey.c: 78: if(cnt&0x8)
  4621  0203  1DF3               	btfss	KeyIsIn@cnt,3
  4622  0204  2A09               	goto	l3686
  4623                           
  4624                           ;CheckTouchKey.c: 79: {
  4625                           ;CheckTouchKey.c: 80: i &= KeyFlag[1];
  4626  0205  1283               	bcf	3,5	;RP0=0, select bank0
  4627  0206  1303               	bcf	3,6	;RP1=0, select bank0
  4628  0207  084E               	movf	_KeyFlag+1,w	;volatile
  4629  0208  2A0C               	goto	L17
  4630  0209                     l3686:	
  4631                           ;CheckTouchKey.c: 81: }
  4632                           
  4633                           
  4634                           ;CheckTouchKey.c: 82: else
  4635                           ;CheckTouchKey.c: 83: {
  4636                           ;CheckTouchKey.c: 84: i &= KeyFlag[0];
  4637  0209  1283               	bcf	3,5	;RP0=0, select bank0
  4638  020A  1303               	bcf	3,6	;RP1=0, select bank0
  4639  020B  084D               	movf	_KeyFlag,w	;volatile
  4640  020C                     L17:	
  4641  020C  05F2               	andwf	KeyIsIn@i,f
  4642                           
  4643                           ;CheckTouchKey.c: 85: }
  4644                           ;CheckTouchKey.c: 86: return i;
  4645  020D  0872               	movf	KeyIsIn@i,w
  4646  020E  0008               	return
  4647  020F                     __end_of_KeyIsIn:	
  4648  020F                     __ptext30:	
  4649 ;; *************** function _KeyClearOne *****************
  4650 ;; Defined at:
  4651 ;;		line 96 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;  cnt             1    wreg     unsigned char 
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;  cnt             1    2[COMMON] unsigned char 
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  1    wreg      void 
  4658 ;; Registers used:
  4659 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 800/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4665 ;;      Params:         0       0       0       0       0
  4666 ;;      Locals:         1       0       0       0       0
  4667 ;;      Temps:          0       0       0       0       0
  4668 ;;      Totals:         1       0       0       0       0
  4669 ;;Total ram usage:        1 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    1
  4672 ;; This function calls:
  4673 ;;		Nothing
  4674 ;; This function is called by:
  4675 ;;		_KeyClearIn
  4676 ;;		_KeyStopClear
  4677 ;;		_CheckOnceResult
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           
  4682                           ;psect for function _KeyClearOne
  4683  020F                     _KeyClearOne:	
  4684                           
  4685                           ;incstack = 0
  4686                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  4687                           ;KeyClearOne@cnt stored from wreg
  4688  020F  00F2               	movwf	KeyClearOne@cnt
  4689                           
  4690                           ;CheckTouchKey.c: 98: KeyOldValue0[cnt] = 0;
  4691  0210  1003               	clrc
  4692  0211  0D72               	rlf	KeyClearOne@cnt,w
  4693  0212  3EA6               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4694  0213  0084               	movwf	4
  4695  0214  1383               	bcf	3,7	;select IRP bank1
  4696                           
  4697                           ;CheckTouchKey.c: 99: KeyOldValue1[cnt] = 0;
  4698  0215  22C2  118A         	fcall	PL12	;call to abstracted procedure
  4699  0217  3E26               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4700  0218  0084               	movwf	4
  4701                           
  4702                           ;CheckTouchKey.c: 100: KeyOldValue2[cnt] = 0;
  4703  0219  22C2  118A         	fcall	PL12	;call to abstracted procedure
  4704  021B  3EA0               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4705  021C  0084               	movwf	4
  4706                           
  4707                           ;CheckTouchKey.c: 101: KeyReference[cnt] = 0;
  4708  021D  22C2               	fcall	PL12	;call to abstracted procedure
  4709  021E  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  4710  021F  0084               	movwf	4
  4711  0220  0180               	clrf	0
  4712  0221  0A84               	incf	4,f
  4713  0222  0180               	clrf	0
  4714  0223  0008               	return
  4715  0224                     __end_of_KeyClearOne:	
  4716  0224                     __ptext29:	
  4717 ;; *************** function _KeyHave *****************
  4718 ;; Defined at:
  4719 ;;		line 158 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  cnt             1    wreg     unsigned char 
  4722 ;;  flag            2    2[COMMON] unsigned int 
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  cnt             1    4[COMMON] unsigned char 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  1    wreg      void 
  4727 ;; Registers used:
  4728 ;;		wreg, status,2, status,0
  4729 ;; Tracked objects:
  4730 ;;		On entry : B00/100
  4731 ;;		On exit  : B00/0
  4732 ;;		Unchanged: 800/0
  4733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4734 ;;      Params:         2       0       0       0       0
  4735 ;;      Locals:         1       0       0       0       0
  4736 ;;      Temps:          0       0       0       0       0
  4737 ;;      Totals:         3       0       0       0       0
  4738 ;;Total ram usage:        3 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    1
  4741 ;; This function calls:
  4742 ;;		Nothing
  4743 ;; This function is called by:
  4744 ;;		_CheckOnceResult
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           
  4748                           
  4749                           ;psect for function _KeyHave
  4750  0224                     _KeyHave:	
  4751                           
  4752                           ;incstack = 0
  4753                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  4754                           ;KeyHave@cnt stored from wreg
  4755  0224  00F4               	movwf	KeyHave@cnt
  4756                           
  4757                           ;CheckTouchKey.c: 160: KeyCounter++;
  4758  0225  1283               	bcf	3,5	;RP0=0, select bank0
  4759  0226  0AD3               	incf	_KeyCounter,f
  4760                           
  4761                           ;CheckTouchKey.c: 175: else
  4762                           ;CheckTouchKey.c: 176: {
  4763                           ;CheckTouchKey.c: 177: if(cnt&0x8)
  4764  0227  1DF4               	btfss	KeyHave@cnt,3
  4765  0228  2A2C               	goto	l3720
  4766                           
  4767                           ;CheckTouchKey.c: 178: {
  4768                           ;CheckTouchKey.c: 179: KeyData[1] |= flag;
  4769  0229  0872               	movf	KeyHave@flag,w
  4770  022A  04B8               	iorwf	_KeyData+1,f	;volatile
  4771                           
  4772                           ;CheckTouchKey.c: 180: }
  4773  022B  0008               	return
  4774  022C                     l3720:	
  4775                           
  4776                           ;CheckTouchKey.c: 181: else
  4777                           ;CheckTouchKey.c: 182: {
  4778                           ;CheckTouchKey.c: 183: KeyData[0] |= flag;
  4779  022C  0872               	movf	KeyHave@flag,w
  4780  022D  04B7               	iorwf	_KeyData,f	;volatile
  4781  022E  0008               	return
  4782  022F                     __end_of_KeyHave:	
  4783  022F                     __ptext24:	
  4784 ;; *************** function _KeyStopClear *****************
  4785 ;; Defined at:
  4786 ;;		line 123 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;		None
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;  i               1    3[COMMON] unsigned char 
  4791 ;; Return value:  Size  Location     Type
  4792 ;;                  1    wreg      void 
  4793 ;; Registers used:
  4794 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4795 ;; Tracked objects:
  4796 ;;		On entry : B00/0
  4797 ;;		On exit  : 800/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4800 ;;      Params:         0       0       0       0       0
  4801 ;;      Locals:         1       0       0       0       0
  4802 ;;      Temps:          0       0       0       0       0
  4803 ;;      Totals:         1       0       0       0       0
  4804 ;;Total ram usage:        1 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; Hardware stack levels required when called:    2
  4807 ;; This function calls:
  4808 ;;		_KeyClearOne
  4809 ;; This function is called by:
  4810 ;;		_CheckTouchKey
  4811 ;; This function uses a non-reentrant model
  4812 ;;
  4813                           
  4814                           
  4815                           ;psect for function _KeyStopClear
  4816  022F                     _KeyStopClear:	
  4817                           
  4818                           ;CheckTouchKey.c: 125: unsigned char i;
  4819                           ;CheckTouchKey.c: 126: KeyFlag[0] = 0;
  4820                           
  4821                           ;incstack = 0
  4822                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4823  022F  01CD               	clrf	_KeyFlag	;volatile
  4824                           
  4825                           ;CheckTouchKey.c: 127: KeyFlag[1] = 0;
  4826  0230  01CE               	clrf	_KeyFlag+1	;volatile
  4827                           
  4828                           ;CheckTouchKey.c: 128: for(i = 0; i < KeyTotalNumber; i++)
  4829  0231  01F3               	clrf	KeyStopClear@i
  4830  0232                     l3728:	
  4831                           
  4832                           ;CheckTouchKey.c: 129: {
  4833                           ;CheckTouchKey.c: 130: KeyResSum[i] = 0;
  4834  0232  1003               	clrc
  4835  0233  0D73               	rlf	KeyStopClear@i,w
  4836  0234  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  4837  0235  0084               	movwf	4
  4838  0236  0180               	clrf	0
  4839  0237  0A84               	incf	4,f
  4840  0238  0180               	clrf	0
  4841                           
  4842                           ;CheckTouchKey.c: 131: KeyClearOne(i);
  4843  0239  0873               	movf	KeyStopClear@i,w
  4844  023A  220F  118A         	fcall	_KeyClearOne
  4845  023C  3003               	movlw	3
  4846  023D  0AF3               	incf	KeyStopClear@i,f
  4847  023E  0273               	subwf	KeyStopClear@i,w
  4848  023F  1803               	btfsc	3,0
  4849  0240  0008               	return
  4850  0241  2A32               	goto	l3728
  4851  0242                     __end_of_KeyStopClear:	
  4852  0242                     __ptext22:	
  4853 ;; *************** function _TurnKeyFlags *****************
  4854 ;; Defined at:
  4855 ;;		line 416 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;		None
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;		None
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  1    wreg      void 
  4862 ;; Registers used:
  4863 ;;		wreg, status,2, status,0
  4864 ;; Tracked objects:
  4865 ;;		On entry : B00/100
  4866 ;;		On exit  : B00/0
  4867 ;;		Unchanged: 800/0
  4868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4869 ;;      Params:         0       0       0       0       0
  4870 ;;      Locals:         0       0       0       0       0
  4871 ;;      Temps:          0       0       0       0       0
  4872 ;;      Totals:         0       0       0       0       0
  4873 ;;Total ram usage:        0 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:    4
  4876 ;; This function calls:
  4877 ;;		_KeyClearIn
  4878 ;; This function is called by:
  4879 ;;		_CheckTouchKey
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           
  4884                           ;psect for function _TurnKeyFlags
  4885  0242                     _TurnKeyFlags:	
  4886                           
  4887                           ;CheckTouchKey.c: 418: static unsigned char KeyHaveTimes = 0;
  4888                           ;CheckTouchKey.c: 419: static unsigned char KeyNoTimes = 0;
  4889                           ;CheckTouchKey.c: 421: if(KeyData[0] | KeyData[1])
  4890                           
  4891                           ;incstack = 0
  4892                           ; Regs used in _TurnKeyFlags: [wreg+status,2+status,0]
  4893  0242  1283               	bcf	3,5	;RP0=0, select bank0
  4894  0243  0838               	movf	_KeyData+1,w	;volatile
  4895  0244  0437               	iorwf	_KeyData,w	;volatile
  4896  0245  1903               	btfsc	3,2
  4897  0246  2A62               	goto	l3870
  4898                           
  4899                           ;CheckTouchKey.c: 422: {
  4900                           ;CheckTouchKey.c: 423: KeyNoTimes = 0;
  4901  0247  01CF               	clrf	TurnKeyFlags@KeyNoTimes
  4902                           
  4903                           ;CheckTouchKey.c: 425: if(KeyData[0] == KeyOldData[0] && KeyData[1] == KeyOldData[1])
  4904  0248  0837               	movf	_KeyData,w	;volatile
  4905  0249  0639               	xorwf	_KeyOldData,w	;volatile
  4906  024A  1D03               	skipz
  4907  024B  2A5B               	goto	l1538
  4908  024C  0838               	movf	_KeyData+1,w	;volatile
  4909  024D  063A               	xorwf	_KeyOldData+1,w	;volatile
  4910  024E  1D03               	skipz
  4911  024F  2A5B               	goto	l1538
  4912  0250  3002               	movlw	2
  4913  0251  0AD0               	incf	TurnKeyFlags@KeyHaveTimes,f
  4914  0252  0250               	subwf	TurnKeyFlags@KeyHaveTimes,w
  4915  0253  1C03               	skipc
  4916  0254  0008               	return
  4917                           
  4918                           ;CheckTouchKey.c: 428: {
  4919                           ;CheckTouchKey.c: 429: KeyHaveTimes = 0;
  4920  0255  01D0               	clrf	TurnKeyFlags@KeyHaveTimes
  4921                           
  4922                           ;CheckTouchKey.c: 430: KeyFlag[0] = KeyData[0];
  4923  0256  0837               	movf	_KeyData,w	;volatile
  4924  0257  00CD               	movwf	_KeyFlag	;volatile
  4925                           
  4926                           ;CheckTouchKey.c: 431: KeyFlag[1] = KeyData[1];
  4927  0258  0838               	movf	_KeyData+1,w	;volatile
  4928  0259  00CE               	movwf	_KeyFlag+1	;volatile
  4929  025A  0008               	return
  4930  025B                     l1538:	
  4931                           
  4932                           ;CheckTouchKey.c: 443: else
  4933                           ;CheckTouchKey.c: 444: {
  4934                           ;CheckTouchKey.c: 445: b_kclr = 0;
  4935  025B  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4936                           
  4937                           ;CheckTouchKey.c: 446: KeyOldData[0] = KeyData[0];
  4938  025C  0837               	movf	_KeyData,w	;volatile
  4939  025D  00B9               	movwf	_KeyOldData	;volatile
  4940                           
  4941                           ;CheckTouchKey.c: 447: KeyOldData[1] = KeyData[1];
  4942  025E  0838               	movf	_KeyData+1,w	;volatile
  4943  025F  00BA               	movwf	_KeyOldData+1	;volatile
  4944                           
  4945                           ;CheckTouchKey.c: 448: KeyHaveTimes = 0;
  4946  0260  01D0               	clrf	TurnKeyFlags@KeyHaveTimes
  4947  0261  0008               	return
  4948  0262                     l3870:	
  4949                           
  4950                           ;CheckTouchKey.c: 451: else
  4951                           ;CheckTouchKey.c: 452: {
  4952                           ;CheckTouchKey.c: 453: KeyHaveTimes = 0;
  4953  0262  01D0               	clrf	TurnKeyFlags@KeyHaveTimes
  4954                           
  4955                           ;CheckTouchKey.c: 454: KeyOldData[0] = 0;
  4956  0263  01B9               	clrf	_KeyOldData	;volatile
  4957                           
  4958                           ;CheckTouchKey.c: 455: KeyOldData[1] = 0;
  4959  0264  01BA               	clrf	_KeyOldData+1	;volatile
  4960                           
  4961                           ;CheckTouchKey.c: 457: if(++KeyNoTimes >=2)
  4962  0265  3002               	movlw	2
  4963  0266  0ACF               	incf	TurnKeyFlags@KeyNoTimes,f
  4964  0267  024F               	subwf	TurnKeyFlags@KeyNoTimes,w
  4965  0268  1C03               	skipc
  4966  0269  0008               	return
  4967                           
  4968                           ;CheckTouchKey.c: 458: {
  4969                           ;CheckTouchKey.c: 459: KeyNoTimes = 0;
  4970  026A  01CF               	clrf	TurnKeyFlags@KeyNoTimes
  4971                           
  4972                           ;CheckTouchKey.c: 460: KeyFlag[0] = 0;
  4973  026B  01CD               	clrf	_KeyFlag	;volatile
  4974                           
  4975                           ;CheckTouchKey.c: 461: KeyFlag[1] = 0;
  4976  026C  01CE               	clrf	_KeyFlag+1	;volatile
  4977                           
  4978                           ;CheckTouchKey.c: 463: b_kclr = 0;
  4979  026D  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4980  026E  0008               	return
  4981  026F                     __end_of_TurnKeyFlags:	
  4982  026F                     __ptext27:	
  4983 ;; *************** function _CheckValidTime *****************
  4984 ;; Defined at:
  4985 ;;		line 501 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  4986 ;; Parameters:    Size  Location     Type
  4987 ;;		None
  4988 ;; Auto vars:     Size  Location     Type
  4989 ;;		None
  4990 ;; Return value:  Size  Location     Type
  4991 ;;                  1    wreg      void 
  4992 ;; Registers used:
  4993 ;;		wreg, status,2, status,0
  4994 ;; Tracked objects:
  4995 ;;		On entry : B00/0
  4996 ;;		On exit  : B00/0
  4997 ;;		Unchanged: 800/0
  4998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4999 ;;      Params:         0       0       0       0       0
  5000 ;;      Locals:         0       0       0       0       0
  5001 ;;      Temps:          0       0       0       0       0
  5002 ;;      Totals:         0       0       0       0       0
  5003 ;;Total ram usage:        0 bytes
  5004 ;; Hardware stack levels used:    1
  5005 ;; Hardware stack levels required when called:    1
  5006 ;; This function calls:
  5007 ;;		Nothing
  5008 ;; This function is called by:
  5009 ;;		_CheckTouchKey
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           
  5014                           ;psect for function _CheckValidTime
  5015  026F                     _CheckValidTime:	
  5016  026F                     l3246:	
  5017                           ;incstack = 0
  5018                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  5019                           
  5020                           
  5021                           ;CheckTouchKey.c: 506: {
  5022                           ;CheckTouchKey.c: 507: if(KeyFlag[0] | KeyFlag[1])
  5023  026F  084E               	movf	_KeyFlag+1,w	;volatile
  5024  0270  044D               	iorwf	_KeyFlag,w	;volatile
  5025  0271  1903               	btfsc	3,2
  5026  0272  2A7E               	goto	l3252
  5027  0273  0AB5               	incf	CheckValidTime@validtime,f
  5028  0274  1903               	skipnz
  5029  0275  0AB6               	incf	CheckValidTime@validtime+1,f
  5030  0276  303A               	movlw	58
  5031  0277  0236               	subwf	CheckValidTime@validtime+1,w
  5032  0278  3098               	movlw	152
  5033  0279  1903               	skipnz
  5034  027A  0235               	subwf	CheckValidTime@validtime,w
  5035  027B  1C03               	skipc
  5036  027C  0008               	return
  5037                           
  5038                           ;CheckTouchKey.c: 510: {
  5039                           ;CheckTouchKey.c: 511: b_kerr = 1;
  5040  027D  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  5041  027E                     l3252:	
  5042                           
  5043                           ;CheckTouchKey.c: 512: validtime = 0;
  5044  027E  01B5               	clrf	CheckValidTime@validtime
  5045  027F  01B6               	clrf	CheckValidTime@validtime+1
  5046  0280  0008               	return
  5047  0281                     __end_of_CheckValidTime:	
  5048  0281                     PL2:	
  5049  0281  0800               	movf	0,w
  5050  0282  00E9               	movwf	CheckKeyOldValue@KeyOldTemp
  5051  0283  0A84               	incf	4,f
  5052  0284  0800               	movf	0,w
  5053  0285  00EA               	movwf	CheckKeyOldValue@KeyOldTemp+1
  5054  0286  0867               	movf	CheckKeyOldValue@KeyResTemp,w
  5055  0287  02E9               	subwf	CheckKeyOldValue@KeyOldTemp,f
  5056  0288  0868               	movf	CheckKeyOldValue@KeyResTemp+1,w
  5057  0289  1C03               	skipc
  5058  028A  03EA               	decf	CheckKeyOldValue@KeyOldTemp+1,f
  5059  028B  02EA               	subwf	CheckKeyOldValue@KeyOldTemp+1,f
  5060  028C  3000               	movlw	0
  5061  028D  026A               	subwf	CheckKeyOldValue@KeyOldTemp+1,w
  5062  028E  3402               	retlw	2
  5063  028F                     __end_ofPL2:	
  5064  028F                     PL4:	
  5065  028F  0A84               	incf	4,f
  5066  0290  0800               	movf	0,w
  5067  0291  00E8               	movwf	??_CheckOnceResult+1
  5068  0292  1683               	bsf	3,5	;RP0=1, select bank1
  5069  0293  0831               	movf	CheckOnceResult@KeyDown^(0+128),w
  5070  0294  1283               	bcf	3,5	;RP0=0, select bank0
  5071  0295  0767               	addwf	??_CheckOnceResult,w
  5072  0296  00E9               	movwf	??_CheckOnceResult+2
  5073  0297  0868               	movf	??_CheckOnceResult+1,w
  5074  0298  1803               	skipnc
  5075  0299  0A68               	incf	??_CheckOnceResult+1,w
  5076  029A  00EA               	movwf	??_CheckOnceResult+3
  5077  029B  1683               	bsf	3,5	;RP0=1, select bank1
  5078  029C  0833               	movf	(CheckOnceResult@KeyResTemp+1)^(0+128),w
  5079  029D  1283               	bcf	3,5	;RP0=0, select bank0
  5080  029E  026A               	subwf	??_CheckOnceResult+3,w
  5081  029F  1D03               	skipz
  5082  02A0  0008               	return
  5083  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  5084  02A2  0832               	movf	CheckOnceResult@KeyResTemp^(0+128),w
  5085  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  5086  02A4  0269               	subwf	??_CheckOnceResult+2,w
  5087  02A5  0008               	return
  5088  02A6                     __end_ofPL4:	
  5089  02A6                     PL6:	
  5090  02A6  0084               	movwf	4
  5091  02A7  0800               	movf	0,w
  5092  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  5093  02A9  00E7               	movwf	??_CheckOnceResult
  5094  02AA  0A84               	incf	4,f
  5095  02AB  0800               	movf	0,w
  5096  02AC  00E8               	movwf	??_CheckOnceResult+1
  5097  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  5098  02AE  0008               	return
  5099  02AF                     __end_ofPL6:	
  5100  02AF                     PL8:	
  5101  02AF  0084               	movwf	4
  5102  02B0  0874               	movf	??_CheckKeyOldValue,w
  5103  02B1  0080               	movwf	0
  5104  02B2  0A84               	incf	4,f
  5105  02B3  0875               	movf	??_CheckKeyOldValue+1,w
  5106  02B4  0080               	movwf	0
  5107  02B5  1003               	clrc
  5108  02B6  0D6B               	rlf	CheckKeyOldValue@cnt,w
  5109  02B7  3EA6               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5110  02B8  0084               	movwf	4
  5111  02B9  0008               	return
  5112  02BA                     __end_ofPL8:	
  5113  02BA                     PL10:	
  5114  02BA  0800               	movf	0,w
  5115  02BB  00F4               	movwf	??_CheckKeyOldValue
  5116  02BC  0A84               	incf	4,f
  5117  02BD  0800               	movf	0,w
  5118  02BE  00F5               	movwf	??_CheckKeyOldValue+1
  5119  02BF  1003               	clrc
  5120  02C0  0D6B               	rlf	CheckKeyOldValue@cnt,w
  5121  02C1  0008               	return
  5122  02C2                     __end_ofPL10:	
  5123  02C2                     PL12:	
  5124  02C2  0180               	clrf	0
  5125  02C3  0A84               	incf	4,f
  5126  02C4  0180               	clrf	0
  5127  02C5  1003               	clrc
  5128  02C6  0D72               	rlf	KeyClearOne@cnt,w
  5129  02C7  0008               	return
  5130  02C8                     __end_ofPL12:	
  5131  02C8                     PL14:	
  5132  02C8  1683               	bsf	3,5	;RP0=1, select bank1
  5133  02C9  1003               	clrc
  5134  02CA  0D34               	rlf	CheckOnceResult@cnt^(0+128),w
  5135  02CB  3EA0               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5136  02CC  0084               	movwf	4
  5137  02CD  0008               	return
  5138  02CE                     __end_ofPL14:	
  5139  02CE                     PL16:	
  5140  02CE  0867               	movf	CheckKeyOldValue@KeyResTemp,w
  5141  02CF  0080               	movwf	0
  5142  02D0  0A84               	incf	4,f
  5143  02D1  0868               	movf	CheckKeyOldValue@KeyResTemp+1,w
  5144  02D2  0080               	movwf	0
  5145  02D3  0008               	return
  5146  02D4                     __end_ofPL16:	
  5147  02D4                     PL18:	
  5148  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  5149  02D5  0867               	movf	??_CheckOnceResult,w
  5150  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  5151  02D7  022F               	subwf	CheckOnceResult@KeyValue^(0+128),w
  5152  02D8  0008               	return
  5153  02D9                     __end_ofPL18:	
  5154                           
  5155                           	psect	text33
  5156  0FE5                     __ptext33:	
  5157 ;; *************** function _Isr_Timer *****************
  5158 ;; Defined at:
  5159 ;;		line 283 in file "C:\mcuproject\scm\testTouch\main.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;		None
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;		None
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  1    wreg      void 
  5166 ;; Registers used:
  5167 ;;		wreg, status,2, status,0
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 100/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5173 ;;      Params:         0       0       0       0       0
  5174 ;;      Locals:         0       0       0       0       0
  5175 ;;      Temps:          2       0       0       0       0
  5176 ;;      Totals:         2       0       0       0       0
  5177 ;;Total ram usage:        2 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; This function calls:
  5180 ;;		Nothing
  5181 ;; This function is called by:
  5182 ;;		Interrupt level 1
  5183 ;; This function uses a non-reentrant model
  5184 ;;
  5185                           
  5186                           
  5187                           ;psect for function _Isr_Timer
  5188  0FE5                     _Isr_Timer:	
  5189                           
  5190                           ;main.c: 284: if (TMR2IF) {
  5191  0FE5  1283               	bcf	3,5	;RP0=0, select bank0
  5192  0FE6  1303               	bcf	3,6	;RP1=0, select bank0
  5193  0FE7  1C8C               	btfss	12,1	;volatile
  5194  0FE8  2FF2               	goto	i1l3648
  5195                           
  5196                           ;main.c: 285: TMR2IF = 0;
  5197  0FE9  108C               	bcf	12,1	;volatile
  5198                           
  5199                           ;main.c: 286: if(++MainTime >= 64)
  5200  0FEA  3040               	movlw	64
  5201  0FEB  0AE6               	incf	_MainTime,f	;volatile
  5202  0FEC  0266               	subwf	_MainTime,w	;volatile
  5203  0FED  1C03               	skipc
  5204  0FEE  2FF3               	goto	i1l3650
  5205                           
  5206                           ;main.c: 287: {
  5207                           ;main.c: 288: MainTime = 0;
  5208  0FEF  01E6               	clrf	_MainTime	;volatile
  5209                           
  5210                           ;main.c: 289: B_MainLoop = 1;
  5211  0FF0  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5212  0FF1  2FF3               	goto	i1l3650
  5213  0FF2                     i1l3648:	
  5214                           
  5215                           ;main.c: 292: PIR1 = 0;
  5216  0FF2  018C               	clrf	12	;volatile
  5217  0FF3                     i1l3650:	
  5218                           
  5219                           ;main.c: 293: }
  5220                           ;main.c: 295: if(RACIF)
  5221  0FF3  1703               	bsf	3,6	;RP1=1, select bank2
  5222  0FF4  1C87               	btfss	7,1	;volatile
  5223  0FF5  2FF9               	goto	i1l1241
  5224                           
  5225                           ;main.c: 296: {
  5226                           ;main.c: 297: RACIF = 0;
  5227  0FF6  1087               	bcf	7,1	;volatile
  5228                           
  5229                           ;main.c: 298: PORTA;
  5230  0FF7  1303               	bcf	3,6	;RP1=0, select bank0
  5231  0FF8  0805               	movf	5,w	;volatile
  5232  0FF9                     i1l1241:	
  5233  0FF9  0871               	movf	??_Isr_Timer+1,w
  5234  0FFA  008A               	movwf	10
  5235  0FFB  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5236  0FFC  0083               	movwf	3
  5237  0FFD  0EFE               	swapf	126,f
  5238  0FFE  0E7E               	swapf	126,w
  5239  0FFF  0009               	retfie
  5240  1000                     __end_of_Isr_Timer:	
  5241  007E                     btemp	set	126	;btemp
  5242  007E                     wtemp0	set	126
  5243                           
  5244                           	psect	intentry
  5245  0004                     __pintentry:	
  5246                           ;incstack = 0
  5247                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  5248                           
  5249  0004                     interrupt_function:	
  5250  007E                     saved_w	set	btemp
  5251  0004  00FE               	movwf	btemp
  5252  0005  0E03               	swapf	3,w
  5253  0006  00F0               	movwf	??_Isr_Timer
  5254  0007  080A               	movf	10,w
  5255  0008  00F1               	movwf	??_Isr_Timer+1
  5256  0009  158A  2FE5         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    31
    Data        0
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80      7      78
    BANK1            80      9      21
    BANK3            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_checkBat
    _refreshTM1650->_tm1650cmd
    _showCtr->___lbmod
    _initTM1650->_tm1650cmd
    _tm1650cmd->_write_8bit
    _checkChrgAD->_Read_ADC
    _checkBat->_Read_ADC
    _CheckTouchKey->_CheckKeyOldValue
    _CheckTouchKey->_GetTouchKeyValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _checkChrgAD->_Read_ADC
    _checkBat->_Read_ADC
    _CheckTouchKey->_CheckKeyOldValue

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Isr_Timer in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6051
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                           _checkBat
                            _chrgCtr
                         _initTM1650
                            _showCtr
                              _task1
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _task1                                                0     0      0     586
                      _refreshTM1650
 ---------------------------------------------------------------------------------
 (2) _refreshTM1650                                        0     0      0     586
                          _tm1650cmd
 ---------------------------------------------------------------------------------
 (1) _showCtr                                              0     0      0     579
                            ___lbdiv
                            ___lbmod
                          _gotoSleep
                        _setZeroStep
 ---------------------------------------------------------------------------------
 (2) _setZeroStep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gotoSleep                                            0     0      0       0
                        _Init_System
 ---------------------------------------------------------------------------------
 (3) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     288
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     291
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _initTM1650                                           0     0      0     586
                          _tm1650cmd
 ---------------------------------------------------------------------------------
 (3) _tm1650cmd                                            2     1      1     586
                                              4 COMMON     2     1      1
                       _TM1650_START
                        _TM1650_STOP
                         _write_8bit
 ---------------------------------------------------------------------------------
 (4) _write_8bit                                           2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _TM1650_STOP                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TM1650_START                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0     295
                        _checkChrgAD
 ---------------------------------------------------------------------------------
 (2) _checkChrgAD                                          0     0      0     295
                           _Read_ADC
 ---------------------------------------------------------------------------------
 (1) _checkBat                                             2     2      0     295
                                              6 COMMON     2     2      0
                           _Read_ADC
 ---------------------------------------------------------------------------------
 (3) _Read_ADC                                            11     9      2     295
                                              2 COMMON     4     2      2
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3710
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     356
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     356
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     254
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _GetTouchKeyValue                                     5     5      0     157
                                              3 COMMON     3     3      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (3) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    2059
                                              0 BANK0      4     4      0
                                              0 BANK1      9     9      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     402
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (4) _KeyClearOne                                          1     1      0     124
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     839
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0     102
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _checkBat
     _Read_ADC
   _chrgCtr
     _checkChrgAD
       _Read_ADC
   _initTM1650
     _tm1650cmd
       _TM1650_START
       _TM1650_STOP
       _write_8bit
   _showCtr
     ___lbdiv
     ___lbmod
     _gotoSleep
       _Init_System
     _setZeroStep
   _task1
     _refreshTM1650
       _tm1650cmd
         _TM1650_START
         _TM1650_STOP
         _write_8bit
   _workCtr

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      7      4E       4       97.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      9      15       6       26.3%
BITBANK3            50      0       0       7        0.0%
BANK3               50      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
ABS                  0      0      6F      11        0.0%
DATA                 0      0      6F      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 23 16:18:20 2024

                KeyIsIn@cnt 0073                  KeyHave@cnt 0074                 KeyHave@flag 0072  
              ?_TM1650_STOP 0070                           pc 0002                          PL2 0281  
                        PL4 028F                          PL6 02A6                          PL8 02AF  
             ?_TM1650_START 0070               ??_KeyClearOne 0072       __size_of_TurnKeyFlags 002D  
                        fsr 0004            ??_CheckValidTime 0072                         PL10 02BA  
                       PL20 0542                         PL12 02C2                         PL22 068E  
                       PL14 02C8                         PL16 02CE                         PL18 02D4  
                       STOP 0606                         _GIE 005F                         _RC0 0C28  
                       _RB6 0036                         _RB7 0037                         _PR2 0091  
                       fsr0 0004                         indf 0000         CheckOnceResult@flag 00AE  
         ?_GetTouchKeyValue 0070    __end_of_Table_KeyChannel 0825          ??_GetTouchKeyValue 0073  
                      l1215 0720                        l1250 044E                        l3010 065C  
                      l3100 0086                        l1252 0481                        l3030 0689  
                      l3022 0677                        l3014 0665                        l3006 0653  
                      l1520 00F9                        l3034 05E2                        l3026 0680  
                      l3018 066E                        l3028 0684                        l3400 06D7  
                      l3074 004B                        l1538 025B                        l3252 027E  
                      l3500 07AA                        l1557 002D                        l3246 026F  
                      l3350 0335                        l3334 0317                        l3318 02F6  
                      l3262 05B1                        l3502 07AB                        l1479 0078  
                      l3328 0310                        l3440 0580                        l3354 033B  
                      l3362 0347                        l1850 05B7                        l3450 059A  
                      l3426 0564                        l3514 07C5                        l3506 07B9  
                      l3700 0111                        l3380 0368                        l3348 0332  
                      l3276 05C4                        l3292 05DE                        l3284 05CA  
                      l3516 07C6                        l2910 0735                        l3526 07D7  
                      l3720 022C                        l3704 011A                        l3368 0353  
                      l2912 073F                        l2824 0520                        l3802 01F3  
                      l3378 0367                        l3546 06B2                        l3458 05A3  
                      l3570 03A3                        l3482 0786                        l3812 00B5  
                      l2908 073B                        l3548 06B5                        l3556 0387  
                      l2854 0608                        l3574 03AD                        l3558 0389  
                      l2944 009D                        l3728 0232                        l3568 03A1  
                      l3920 07E3                        l3738 0127                        l2946 009E  
                      l3906 003F                        l3914 0049                        l2970 043C  
                      l3586 03C0                        l3756 0181                        l3780 01A7  
                      l3908 0043                        l2892 070F                        l2972 062C  
                      l3588 03C2                        l3686 0209                        l3790 01DB  
                      l3870 0262                        l2990 0638                        l2982 063E  
                      l2896 0713                        l2888 0709                        l2984 0636  
                      l2976 0632                        l3794 01E8                        l2898 0716  
                      l3796 01ED                        l2996 063A                        l3898 003A  
                      _ADON 04E8                        _CHS4 04E6                        _IOCA 0188  
                      _IOCB 0009                        u2305 06F4                        _PIE1 000D  
                      u2815 016E                        u2825 0187                        u2835 0193  
                      u2845 01C4                        _RBIE 005B                        u2795 0135  
                      _PIR1 000C                        _main 07D9                        btemp 007E  
             ?_KeyStopClear 0070                        start 000B                _TurnKeyFlags 0242  
           __end_of_KeyIsIn 020F             __end_of_KeyHave 022F              ??_TM1650_START 0072  
CheckKeyOldValue@KeyOldTemp 0069               ??_Init_System 0072  CheckKeyOldValue@KeyResTemp 0067  
     __end_of_refreshTM1650 043F                       ?_main 0070             __end_of___lbdiv 05C6  
      __size_of_checkChrgAD 0009             __end_of___lbmod 05E2                       _T2CON 0012  
                     _RACIE 0841                       _RACIF 0839                       _PORTA 0005  
                     _PORTB 0006                       _PORTC 0185                       _TRISA 0085  
                     _TRISB 0086                       _PWMTH 0016                       _TRISC 0186  
                     _PWMTL 0015             __end_of_chrgCtr 06BC         __end_of_KeyClearOne 0224  
                _KeyClearIn 0110                       _task1 0378              __pbitbssCOMMON 03C0  
                     pclath 000A             __end_of_showCtr 05AB                 _ClearResSum 009D  
                _KeyCounter 0053                  _KeyOldData 0039              ??_KeyStopClear 0073  
                     status 0003          Read_ADC@ADCchannel 006C                       wtemp0 007E  
           __end_of_workCtr 07D9             ___lbdiv@divisor 0072                  _KeyUpShake 0032  
           ___lbdiv@counter 0074             __initialization 000D                __end_of_main 0800  
          __end_of_Read_ADC 0771                      ??_main 0078         __end_of_Init_System 062C  
                    _ADCON0 009D                      _ADCON1 009C                      _ADRESH 009F  
                    _ADRESL 009E                      ?_task1 0070                      _EECON1 008C  
                    _GODONE 04E9                      i1l1241 0FF9                      i1l3650 0FF3  
                    i1l3648 0FF2                      _INTCON 000B          __size_of_KeyServer 009F  
                    _OSCCON 0088                      _TMR2IF 0061                      _PWMD0L 0017  
                    _PWMD3L 001A                      _TRISB6 0436            __end_of_checkBat 0703  
              ?_setZeroStep 0070                   ??_KeyIsIn 0072                   ??_KeyHave 0074  
        __size_of_Isr_Timer 001B   CheckOnceResult@KeyResTemp 00B2      CheckOnceResult@KeyDown 00B1  
 __size_of_CheckKeyOldValue 0064                      _b_kclr 03C2                      _b_kerr 03C1  
                 ??___lbdiv 0073                   ??___lbmod 0073                 _KeyClearOne 020F  
      __size_of_TM1650_STOP 0022                   ??_chrgCtr 0076            __end_of_numArray 0814  
             _Table_KeyFalg 0814               _Table_KeyDown 081C                      saved_w 007E  
    __size_of_CheckTouchKey 002A                   ??_showCtr 0077                 ?_KeyClearIn 0070  
                 ??_workCtr 0072             _CheckOnceResult 0120            ___lbdiv@dividend 0073  
      __end_of_TM1650_START 0520             ___lbmod@divisor 0072     __end_of__initialization 001D  
           ___lbmod@counter 0075          __size_of_tm1650cmd 000A              __pcstackCOMMON 0070  
             __end_of_task1 03D1                 _Init_System 0608                  __end_ofPL2 028F  
                __end_ofPL4 02A6                  __end_ofPL6 02AF                  __end_ofPL8 02BA  
          ___lbdiv@quotient 0075           __end_of_KeyServer 0378        __end_of_KeyStopClear 0242  
         __end_of_Isr_Timer 1000                     ??_task1 0076          Read_ADC@Adc_Result 0069  
                __pbssBANK0 0020                  __pbssBANK1 00A0                   ?_Read_ADC 0072  
        __size_of_gotoSleep 0026                _chrgFullFlag 005A   __size_of_GetTouchKeyValue 0053  
              _chrgLockFlag 0055                _chrgFullTime 003D               _CheckTouchKey 0020  
                __pmaintext 07D9                  _chrgResult 003F                  __pintentry 0004  
       __size_of_KeyClearIn 0010     __end_of_CheckOnceResult 01FB                     _KEYCON0 0092  
                   _KEYCON1 0093                     _KEYCON2 0097                   ?_checkBat 0070  
         __end_of_tm1650cmd 0449               KeyStopClear@i 0073                     _B_OnOff 03C5  
                   _PWMD01H 001C                     _PWMD23H 000E      __size_of_Refurbish_Sfr 000F  
                   _PWMCON0 0013                     _PWMCON1 0014                     _PWMCON2 001D  
                   _PWMIOS0 018C                     _PWMIOS1 018D        __end_of_Table_KeyCap 0822  
                __stringtab 0800                ?_ClearResSum 0070                  ??_Read_ADC 0074  
                _initTM1650 03D1                     _KeyData 0037                     _KeyFlag 004D  
                   _KeyIsIn 01FB                     _KeyHave 0224              ClearResSum@cnt 0072  
            ?_CheckTouchKey 0070        __size_of_setZeroStep 0062     CheckOnceResult@KeyValue 00AF  
          _CheckKeyOldValue 00AC                     ___lbdiv 05AB                     ___lbmod 05C6  
                   _addTime 0058     CheckOnceResult@OldValue 00AC                _ledLightTime 0043  
    TurnKeyFlags@KeyNoTimes 004F               ??_checkChrgAD 0076        GetTouchKeyValue@temp 0073  
                   _b_kover 03C4                     _chrgCtr 0693                     __ptext1 0771  
                   __ptext2 0378                     __ptext3 0401                     __ptext4 0547  
                   __ptext5 062C                     __ptext6 05E2                     __ptext7 0608  
                   __ptext8 05C6                     __ptext9 05AB                     _count50 005B  
                   _count1s 005E                  ??_checkBat 0076           __end_of_gotoSleep 0608  
     __size_of_TM1650_START 0019                     _showCtr 0547                     _subTime 0057  
   __size_of_CheckValidTime 0012                     clrloop0 0FCF                     _workCtr 0771  
      end_of_initialization 001D      __size_of_refreshTM1650 003E               _Refurbish_Sfr 0FD6  
              _KeyOldValue0 00A6                _KeyOldValue1 0026                _KeyOldValue2 00A0  
     __size_of_KeyStopClear 0013       Read_ADC@Adc_ResultSum 0067                _TM1650_START 0507  
                _showShiWei 0063                ?_KeyClearOne 0070                _KeyReference 0020  
          ?_CheckOnceResult 0070         __end_of_checkChrgAD 06C5            ___lbmod@dividend 0074  
              ??_KeyClearIn 0074          CheckOnceResult@cnt 00B4                 ___lbmod@rem 0076  
                 Read_ADC@i 006B                   Read_ADC@j 006D                 ?_initTM1650 0070  
           ??_CheckTouchKey 0076                _KeyStopClear 022F            _GetTouchKeyValue 004A  
            ?_Refurbish_Sfr 0070           Read_ADC@ADCLDORef 0072               ??_TM1650_STOP 0072  
                _write_8bit 0449                ?_Init_System 0070          __end_of_KeyClearIn 0120  
             _refreshTM1650 0401                   _KeyMaxSub 0052                   _KeyResSum 002C  
               __end_ofPL10 02C2                 __end_ofPL20 0547                 __end_ofPL12 02C8  
               __end_ofPL22 0693                 __end_ofPL14 02CE                 __end_ofPL16 02D4  
               __end_ofPL18 02D9         start_initialization 000D                   _KeyServer 02D9  
                 _Isr_Timer 0FE5        __size_of_ClearResSum 000F           __size_of_Read_ADC 006E  
             ?_TurnKeyFlags 0070    TurnKeyFlags@KeyHaveTimes 0050                 _checkChrgAD 06BC  
              _Table_KeyCap 081F              ?_refreshTM1650 0070         __end_of_TM1650_STOP 0542  
       __size_of_initTM1650 0030                 __pbssCOMMON 0079                  ?_KeyServer 0070  
                 ___latbits 0001               __pcstackBANK0 0067               __pcstackBANK1 00AC  
         __size_of_checkBat 003E              _CheckValidTime 026F    __end_of_CheckKeyOldValue 0110  
                 _tm1650cmd 043F                  ?_Isr_Timer 0070                   _batResult 0041  
                  ?_KeyIsIn 0070                    ?_KeyHave 0072             ??_Refurbish_Sfr 0072  
            ??_TurnKeyFlags 0075                    ?___lbdiv 0072                    ?___lbmod 0072  
               ?_write_8bit 0070                    ?_chrgCtr 0070                   __pstrings 0800  
                 _count900s 003B                   _count64ms 005F        __size_of_KeyClearOne 0015  
                 _keyCount1 0049                   _keyCount2 0047                   _keyCount3 0045  
    __end_of_CheckValidTime 0281                   _firstTime 004B                    ?_showCtr 0070  
       GetTouchKeyValue@cnt 0075                   _gotoSleep 05E2                  ?_tm1650cmd 0074  
                  ?_workCtr 0070              __size_of_task1 0059                    _KEYDATAH 0095  
                  _KEYDATAL 0094           interrupt_function 0004               ??_setZeroStep 0072  
                 clear_ram0 0FCE                   _sleepTime 0054                 write_8bit@i 0073  
                 _showGeWei 0062                 _TM1650_STOP 0520         CheckKeyOldValue@cnt 006B  
           ??_refreshTM1650 0076                    KeyIsIn@i 0072                 __stringbase 0805  
      __size_of_Init_System 0024       __end_of_Table_KeyFalg 081C       __end_of_Table_KeyDown 081F  
  __end_of_GetTouchKeyValue 009D             ?_CheckValidTime 0070                 ??_KeyServer 0072  
                ?_gotoSleep 0070                 ??_Isr_Timer 0070                    _MainTime 0066  
       __size_of_write_8bit 00BE                    _Read_ADC 0703                ??_initTM1650 0076  
         tm1650cmd@seg_data 0074            __size_of_KeyIsIn 0014            __size_of_KeyHave 000B  
          _Table_KeyChannel 0822         __end_of_setZeroStep 068E            __size_of___lbdiv 001B  
          __size_of___lbmod 001C          __end_of__stringtab 0806            __size_of_chrgCtr 0029  
                  _batValue 005C                    _b_kover1 03C3                    _b_ksleep 03C0  
                  _checkBat 06C5          __end_of_initTM1650 0401        __end_of_TurnKeyFlags 026F  
                  _chrgFlag 005D                    _chrgDuty 0059     CheckValidTime@validtime 0035  
                  __ptext10 03D1                    __ptext11 043F                    __ptext20 02D9  
                  __ptext12 0449                    __ptext21 0020                    __ptext13 0520  
                  __ptext30 020F                    __ptext22 0242                    __ptext14 0507  
                  __ptext31 00AC                    __ptext23 0110                    __ptext15 0693  
                  __ptext32 01FB                    __ptext24 022F                    __ptext16 06BC  
                  __ptext33 0FE5                    __ptext25 004A                    __ptext17 06C5  
                  __ptext26 009D                    __ptext18 0703                    __ptext27 026F  
                  __ptext19 0FD6                    __ptext28 0120                    __ptext29 0224  
               ??_tm1650cmd 0075            __size_of_showCtr 0064                    _count15s 0056  
          __size_of_workCtr 0068    __size_of_CheckOnceResult 00DB               __size_of_main 0027  
               _longKeyFalg 0065                 _preBatValue 0079       __end_of_CheckTouchKey 004A  
                  _numArray 0806                    _showLed1 0061                    _showLed2 0060  
                  _showFlag 0064                ?_checkChrgAD 0070            tm1650cmd@digAddr 0075  
                  _zeroStep 007A                    _workStep 007B     CheckKeyOldValue@counter 0051  
               ??_gotoSleep 0072           ?_CheckKeyOldValue 0070                    intlevel1 0000  
             ??_ClearResSum 0072          ??_CheckKeyOldValue 0074                 _setZeroStep 062C  
                 stringcode 0800               write_8bit@dat 0072                ??_write_8bit 0072  
                _B_MainLoop 03C6                  _OPTION_REG 0081                    stringdir 0800  
                  stringtab 0800              KeyClearOne@cnt 0072               KeyClearIn@cnt 0074  
        __end_of_write_8bit 0507       __end_of_Refurbish_Sfr 0FE5         __end_of_ClearResSum 00AC  
         ??_CheckOnceResult 0067  
