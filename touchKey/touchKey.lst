---- C:\Users\hhmm6\Desktop\scm\touchKey\main.c ----------------------------------------------------------------------
1:                #include <sc.h>
2:                #define getbit(x, y)   ((x) >> (y)&1)
3:                #define setbit(x, y)  x|=(1<<y)
4:                #define resetbit(x, y)  x&=~(1<<y)
5:                #define reversebit(x, y)  x^=(1<<y)
6:                
7:                char IntFlag = 0;
8:                char tempKey0H = 0;
9:                char tempKey0L = 0;
10:               char key0Flag = 0;//1表示为有按键
11:               
12:               char tempKey1H = 0;
13:               char tempKey1L = 0;
14:               char key1Flag = 0;//1表示为有按键
15:               int timeCount = 0;
16:               char pwmFlag = 0;
17:               
18:               void initTimer0() ;
19:               void initSys();
20:               void checkKey0TouchKey();
21:               void checkKey1TouchKey();
22:               void initPWM();
23:               void mode1_a();
24:               void mode1_b();
25:               void mode1_c();
26:               
27:               void main()
28:               {
29:               	initSys();
  00D2    20F7    CALL	0xF7
30:               	while(1)
  00D3    0064    CLRWDT
31:               	{
32:               		asm("clrwdt");
33:               		if(!IntFlag)			//10毫秒执行一次
  00D4    0877    LD	A,0x77
  00D5    1903    SZB	0x3,2
  00D6    28D3    JP	0xD3
34:               			continue;
35:               		IntFlag = 0;
  00D7    01F7    CLR	0x77
36:               		checkKey0TouchKey();
  00D8    2015    CALL	0x15
37:               		checkKey1TouchKey();
  00D9    205D    CALL	0x5D
38:               		if(pwmFlag == 0)
  00DA    0872    LD	A,0x72
  00DB    1D03    SNZB	0x3,2
  00DC    28D3    JP	0xD3
39:               		{
40:               			pwmFlag = 1;
  00DD    01F2    CLR	0x72
  00DE    0AF2    INCR	0x72
41:               			mode1_c();
  00DF    20EE    CALL	0xEE
  00E0    28D3    JP	0xD3
42:               		}
43:               	}
44:               }
45:               
46:               void initSys()
47:               {
48:               	initTimer0();
  00F7    20BA    CALL	0xBA
49:               	initPWM();
  00F8    28E1    JP	0xE1
50:               }
51:               
52:               
53:               void initPWM()
54:               {
55:               	PWMCON1 = 0x40;	//选择C组PWM
  00E1    3040    LDIA	0x40
  00E2    0094    LD	0x14,A
56:               	PWMCON0 = 0x21;//分频比 1：4
  00E3    3021    LDIA	0x21
  00E4    0093    LD	0x13,A
57:               	PWMCON2 = 0;
  00E5    019D    CLR	0x1D
58:               	PWMTH = 0;
  00E6    0196    CLR	0x16
59:               	PWMTL = 126;		//约等于32K
  00E7    307E    LDIA	0x7E
  00E8    0095    LD	0x15,A
60:               	PWMD0L = 1;
  00E9    3001    LDIA	0x1
  00EA    0097    LD	0x17,A
61:               	PWMD1L = 1;		//pwm1占空比
  00EB    0098    LD	0x18,A
62:               	PWMD01H = 0;
  00EC    019C    CLR	0x1C
  00ED    0008    RET
63:               }
64:               
65:               void mode1_a()
66:               {
67:               	PWMD0L = 1;
68:               	PWMD1L = 0;		//pwm1占空比
69:               	PWMTH = 0;
70:               	PWMCON0 |= 0x01;		//分频比 1：4 ,开启PWM0
71:               	setbit(PORTB, 7);
72:               	
73:               }
74:               
75:               void mode1_b()
76:               {
77:               	PWMD0L = 1;
78:               	PWMD1L = 0;		//pwm1占空比
79:               	PWMTH = 0;
80:               	PWMCON0 |= 0x01;		//分频比 1：4 ,开启PWM0
81:               	resetbit(PORTB, 7);
82:               	
83:               }
84:               
85:               void mode1_c()
86:               {
87:               	PWMD0L = 1;
  00EE    3001    LDIA	0x1
  00EF    1283    CLRB	0x3,5
  00F0    0097    LD	0x17,A
88:               	PWMD1L = 32;		//pwm1占空比
  00F1    3020    LDIA	0x20
  00F2    0098    LD	0x18,A
89:               	PWMTH = 0;
  00F3    0196    CLR	0x16
90:               	PWMCON0 |= 0x03;		//分频比 1：4 ,开启PWM0 PWM1
  00F4    3003    LDIA	0x3
  00F5    0493    ORR	0x13
  00F6    0008    RET
91:               	
92:               }
93:               
94:               void mode1_d()
95:               {
96:               	PWMD0L = 1;
97:               	PWMD1L = 63;		//pwm1占空比
98:               	PWMTH = 0;
99:               	PWMCON0 |= 0x03;		//分频比 1：4 ,开启PWM0 PWM1
100:              	
101:              }
102:              
103:              void mode1_e()
104:              {
105:              	PWMD0L = 1;
106:              	PWMD1L = 95;		//pwm1占空比
107:              	PWMTH = 0;
108:              	PWMCON0 |= 0x03;	//分频比 1：4 ,开启PWM0 PWM1
109:              	
110:              }
111:              
112:              void mode2_a()
113:              {
114:              	PWMD0L = 12;
115:              	PWMD1L = 0;		//pwm1占空比
116:              	PWMTH = 0;
117:              	PWMCON0 |= 0x01;		//分频比 1：4 ,开启PWM0
118:              	setbit(PORTB, 7);
119:              	
120:              }
121:              
122:              void mode3_a()
123:              {
124:              	PWMD0L = 20;
125:              	PWMD1L = 0;		//pwm1占空比
126:              	PWMTH = 0;
127:              	PWMCON0 |= 0x01;		//分频比 1：4 ,开启PWM0
128:              	setbit(PORTB, 7);
129:              	
130:              }
131:              
132:              void mode4_a()
133:              {
134:              	PWMD0L = 72;
135:              	PWMD1L = 0;		//pwm1占空比
136:              	PWMTH = 0;
137:              	PWMCON0 |= 0x01;		//分频比 1：4 ,开启PWM0
138:              	setbit(PORTB, 7);
139:              	
140:              }
141:              
142:              void mode5_a()
143:              {
144:              	PWMD0L = 0;
145:              	PWMD1L = 0;		//pwm1占空比
146:              	PWMTH = 0;
147:              	PWMCON0 = 0x60;		//分频比 1：4 ,开启PWM0
148:              	setbit(PORTB, 7);
149:              	setbit(PORTA, 5);
150:              }
151:              
152:              void checkKey0TouchKey()
153:              {
154:              	INTCON = 0x20;	//关闭中断
  0015    3020    LDIA	0x20
  0016    008B    LD	0xB,A
155:              	TRISB |= 0x47;	//PB0 PB1为输入口
  0017    3047    LDIA	0x47
  0018    1683    SETB	0x3,5
  0019    1303    CLRB	0x3,6
  001A    0486    ORR	0x6
156:              	KEYCON1 = 0x50;	//Key0通道检测
  001B    3050    LDIA	0x50
  001C    0093    LD	0x13,A
157:              	KEYCON0 = 0x02;
  001D    3002    LDIA	0x2
  001E    0092    LD	0x12,A
158:              	KEYCON0 |= 0x01;
  001F    1412    SETB	0x12,0
159:              	while(!(KEYCON0, 7));
  0020    0812    LD	A,0x12
160:              	key0Flag = 0;
161:              	if(tempKey0L)
  0021    0875    LD	A,0x75
  0022    1903    SZB	0x3,2
  0023    2830    JP	0x30
162:              	{
163:              		if(tempKey0L > (KEYDATAL + 10) && tempKey0H >= KEYDATAH)
  0024    0814    LD	A,0x14
  0025    3E0A    ADDIA	0xA
  0026    204F    CALL	0x4F
  0027    1D03    SNZB	0x3,2
  0028    282B    JP	0x2B
  0029    0875    LD	A,0x75
  002A    027A    SUBA	0x7A
  002B    1803    SZB	0x3,0
  002C    2830    JP	0x30
164:              		{
165:              			key0Flag = 1;
  002D    1683    SETB	0x3,5
  002E    1303    CLRB	0x3,6
  002F    0815    LD	A,0x15
166:              		}
167:              	}
168:              	
169:              	
170:              	if(tempKey0H)
  0030    0876    LD	A,0x76
  0031    1903    SZB	0x3,2
  0032    2848    JP	0x48
171:              	{
172:              		if(tempKey0H > KEYDATAH)
  0033    0876    LD	A,0x76
  0034    1683    SETB	0x3,5
  0035    1303    CLRB	0x3,6
  0036    0215    SUBA	0x15
  0037    1803    SZB	0x3,0
  0038    2848    JP	0x48
173:              		{
174:              			if(tempKey0H > (KEYDATAH+1))
175:              			{
176:              				key0Flag = 1;
  0039    0815    LD	A,0x15
  003A    3E01    ADDIA	0x1
  003B    204F    CALL	0x4F
  003C    1D03    SNZB	0x3,2
  003D    2840    JP	0x40
  003E    0876    LD	A,0x76
  003F    027A    SUBA	0x7A
  0040    1C03    SNZB	0x3,0
  0041    2848    JP	0x48
177:              			}
178:              			else
179:              			{
180:              				//判断低位
181:              				if(tempKey0L > KEYDATAL)
182:              				{
183:              					key0Flag = 1;
  0042    0875    LD	A,0x75
  0043    1683    SETB	0x3,5
  0044    1303    CLRB	0x3,6
  0045    0214    SUBA	0x14
  0046    1803    SZB	0x3,0
184:              				}
185:              				else if((255-tempKey0L)> (KEYDATAL + 10) )
186:              				{
187:              					key0Flag = 1;
  0047    0814    LD	A,0x14
188:              				}
189:              			}
190:              		}
191:              	}
192:              	tempKey0H = KEYDATAH;
  0048    1683    SETB	0x3,5
  0049    1303    CLRB	0x3,6
  004A    0815    LD	A,0x15
  004B    00F6    LD	0x76,A
193:              	tempKey0L = KEYDATAL;
  004C    0814    LD	A,0x14
  004D    00F5    LD	0x75,A
194:              	KEYCON0 &= 0xFE;
195:              	INTCON = 0xA0;
  004E    2859    JP	0x59
196:              }
197:              
198:              void checkKey1TouchKey()
199:              {
200:              	INTCON = 0x20;	//关闭中断
  005D    3020    LDIA	0x20
  005E    008B    LD	0xB,A
201:              	TRISB |= 0x47;	//PB0 PB1为输入口
  005F    3047    LDIA	0x47
  0060    0486    ORR	0x6
202:              	KEYCON1 = 0x51;	//Key1通道检测
  0061    3051    LDIA	0x51
  0062    0093    LD	0x13,A
203:              	KEYCON0 = 0x03;
  0063    3003    LDIA	0x3
  0064    0092    LD	0x12,A
204:              	while(!(KEYCON0, 7));
  0065    0812    LD	A,0x12
205:              	key1Flag = 0;
206:              	if(tempKey1L)
  0066    0873    LD	A,0x73
  0067    1903    SZB	0x3,2
  0068    2875    JP	0x75
207:              	{
208:              		if(tempKey1L > (KEYDATAL + 10) && tempKey1H >= KEYDATAH)
  0069    0814    LD	A,0x14
  006A    3E0A    ADDIA	0xA
  006B    2094    CALL	0x94
  006C    1D03    SNZB	0x3,2
  006D    2870    JP	0x70
  006E    0873    LD	A,0x73
  006F    027A    SUBA	0x7A
  0070    1803    SZB	0x3,0
  0071    2875    JP	0x75
209:              		{
210:              			key1Flag = 1;
  0072    1683    SETB	0x3,5
  0073    1303    CLRB	0x3,6
  0074    0815    LD	A,0x15
211:              		}
212:              	}
213:              	
214:              	
215:              	if(tempKey1H)
  0075    0874    LD	A,0x74
  0076    1903    SZB	0x3,2
  0077    288D    JP	0x8D
216:              	{
217:              		if(tempKey1H > KEYDATAH)
  0078    0874    LD	A,0x74
  0079    1683    SETB	0x3,5
  007A    1303    CLRB	0x3,6
  007B    0215    SUBA	0x15
  007C    1803    SZB	0x3,0
  007D    288D    JP	0x8D
218:              		{
219:              			if(tempKey1H > (KEYDATAH+1))
220:              			{
221:              				key1Flag = 1;
  007E    0815    LD	A,0x15
  007F    3E01    ADDIA	0x1
  0080    2094    CALL	0x94
  0081    1D03    SNZB	0x3,2
  0082    2885    JP	0x85
  0083    0874    LD	A,0x74
  0084    027A    SUBA	0x7A
  0085    1C03    SNZB	0x3,0
  0086    288D    JP	0x8D
222:              			}
223:              			else
224:              			{
225:              				//判断低位
226:              				if(tempKey1L > KEYDATAL)
227:              				{
228:              					key1Flag = 1;
  0087    0873    LD	A,0x73
  0088    1683    SETB	0x3,5
  0089    1303    CLRB	0x3,6
  008A    0214    SUBA	0x14
  008B    1803    SZB	0x3,0
229:              				}
230:              				else if((255-tempKey1L)> (KEYDATAL + 10) )
231:              				{
232:              					key1Flag = 1;
  008C    0814    LD	A,0x14
233:              				}
234:              			}
235:              		}
236:              	}
237:              	tempKey1H = KEYDATAH;
  008D    1683    SETB	0x3,5
  008E    1303    CLRB	0x3,6
  008F    0815    LD	A,0x15
  0090    00F4    LD	0x74,A
238:              	tempKey1L = KEYDATAL;
  0091    0814    LD	A,0x14
  0092    00F3    LD	0x73,A
239:              	KEYCON0 &= 0xFE;
240:              	INTCON = 0xA0;
  0093    2859    JP	0x59
241:              	
242:              }
243:              
244:              
245:              
246:              //初始化定时器0
247:              void initTimer0()         
  00BA    0000    NOP
  00BB    0064    CLRWDT
248:              {	
249:              		asm("nop");
250:              		asm("clrwdt");
251:              		INTCON = 0;
  00BC    018B    CLR	0xB
252:              		TRISA = 0x00;
  00BD    1683    SETB	0x3,5
  00BE    1303    CLRB	0x3,6
  00BF    0185    CLR	0x5
253:              		TRISB = 0x04;			//PB2为红外接收口
  00C0    3004    LDIA	0x4
  00C1    0086    LD	0x6,A
254:              		WPDB = 0x00;
  00C2    0187    CLR	0x7
255:              		WPUB = 0xFF;
  00C3    30FF    LDIA	0xFF
  00C4    1283    CLRB	0x3,5
  00C5    0088    LD	0x8,A
256:              		PORTA = 0xFF;
  00C6    0085    LD	0x5,A
257:              		PORTB = 0xFF;					//系统初始化
  00C7    0086    LD	0x6,A
258:              		OSCCON = 0X52;				//配置振荡为8M,开 WDT
  00C8    3052    LDIA	0x52
  00C9    1683    SETB	0x3,5
  00CA    0088    LD	0x8,A
259:              		OPTION_REG = 0x00;		//Timer0使用内部时钟Focs/4，预分频比为1:2
  00CB    0181    CLR	0x1
260:              		TMR0 = 99;				//赋予初始值 4*128*156/8M = 0.01
  00CC    3063    LDIA	0x63
  00CD    1283    CLRB	0x3,5
  00CE    0081    LD	0x1,A
261:              		//INTCON = 0xE0;			//允许所有未被屏蔽的中断、禁止外设中断，使能Timer0
262:              		
263:              		//TMR0PRD = 128;			//4*4*128/8M = 0.256ms
264:              
265:              		INTCON = 0xA0;			//TIME0 中断打开
  00CF    30A0    LDIA	0xA0
  00D0    008B    LD	0xB,A
  00D1    0008    RET
266:              }
267:              
268:              void interrupt Timer0_Isr()
269:              {
270:              	if(T0IF)
  009E    1D0B    SNZB	0xB,2
  009F    28B3    JP	0xB3
271:              	{
272:              	//---------------------------------------
273:              		TMR0 += 99;		//重新赋初值 4*128*156/8M
  00A0    3063    LDIA	0x63
  00A1    1283    CLRB	0x3,5
  00A2    1303    CLRB	0x3,6
  00A3    0781    ADDR	0x1
274:              		reversebit(PORTB,3);
  00A4    3008    LDIA	0x8
  00A5    0686    XORR	0x6
275:              		if(++timeCount == 10)
  00A6    0AF0    INCR	0x70
  00A7    1903    SZB	0x3,2
  00A8    0AF1    INCR	0x71
  00A9    300A    LDIA	0xA
  00AA    0670    XORA	0x70
  00AB    0471    ORA	0x71
  00AC    1D03    SNZB	0x3,2
  00AD    28B2    JP	0xB2
276:              		{
277:              			timeCount = 0;
  00AE    01F0    CLR	0x70
  00AF    01F1    CLR	0x71
278:              			IntFlag = 1;
  00B0    01F7    CLR	0x77
  00B1    0AF7    INCR	0x77
279:              		}
280:              	//---------------------------------------
281:              		T0IF = 0;			//清中断标志位	
  00B2    110B    CLRB	0xB,2
  00B3    0879    LD	A,0x79
  00B4    008A    LD	0xA,A
  00B5    0E78    SWAPA	0x78
  00B6    0083    LD	0x3,A
  00B7    0EFE    SWAPR	0x7E
  00B8    0E7E    SWAPA	0x7E
  00B9    0009    RETI
282:              
283:              	}
284:              }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    280A    JP	0xA
  000A    280B    JP	0xB
---- start_initialization ------------------------------------------------------------------
  000B    01F0    CLR	0x70
  000C    01F1    CLR	0x71
  000D    01F2    CLR	0x72
  000E    01F3    CLR	0x73
  000F    01F4    CLR	0x74
  0010    01F5    CLR	0x75
  0011    01F6    CLR	0x76
  0012    01F7    CLR	0x77
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F8    LD	0x78,A
  0007    080A    LD	A,0xA
  0008    00F9    LD	0x79,A
  0009    289E    JP	0x9E
---- common_function ------------------------------------------------------------------
  0013    0183    CLR	0x3
  0014    28D2    JP	0xD2
  004F    00FA    LD	0x7A,A
  0050    3000    LDIA	0x0
  0051    1803    SZB	0x3,0
  0052    3001    LDIA	0x1
  0053    00FB    LD	0x7B,A
  0054    3A80    XORIA	0x80
  0055    00FC    LD	0x7C,A
  0056    3080    LDIA	0x80
  0057    027C    SUBA	0x7C
  0058    0008    RET
  0059    1012    CLRB	0x12,0
  005A    30A0    LDIA	0xA0
  005B    008B    LD	0xB,A
  005C    0008    RET
  0094    00FA    LD	0x7A,A
  0095    3000    LDIA	0x0
  0096    1803    SZB	0x3,0
  0097    3001    LDIA	0x1
  0098    00FB    LD	0x7B,A
  0099    3A80    XORIA	0x80
  009A    00FC    LD	0x7C,A
  009B    3080    LDIA	0x80
  009C    027C    SUBA	0x7C
  009D    0008    RET
