

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 29 00:00:04 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F2852
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	pa_nodes0,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	text0
    56  0000                     __ptext0:	
    57  001D                     _PWMCON2	set	29
    58  001C                     _PWMD01H	set	28
    59  0018                     _PWMD1L	set	24
    60  0017                     _PWMD0L	set	23
    61  0016                     _PWMTH	set	22
    62  0015                     _PWMTL	set	21
    63  0014                     _PWMCON1	set	20
    64  0013                     _PWMCON0	set	19
    65  000B                     _INTCON	set	11
    66  0008                     _WPUB	set	8
    67  0006                     _PORTB	set	6
    68  0005                     _PORTA	set	5
    69  0001                     _TMR0	set	1
    70  005A                     _T0IF	set	90
    71  0095                     _KEYDATAH	set	149
    72  0094                     _KEYDATAL	set	148
    73  0093                     _KEYCON1	set	147
    74  0092                     _KEYCON0	set	146
    75  0088                     _OSCCON	set	136
    76  0087                     _WPDB	set	135
    77  0086                     _TRISB	set	134
    78  0085                     _TRISA	set	133
    79  0081                     _OPTION_REG	set	129
    80                           
    81                           	psect	cinit
    82  000B                     start_initialization:	
    83                           ; #config settings
    84                           
    85  000B                     __initialization:	
    86                           
    87                           ; Clear objects allocated to COMMON
    88  000B  01F0               	clrf	__pbssCOMMON& (0+127)
    89  000C  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
    90  000D  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
    91  000E  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
    92  000F  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
    93  0010  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
    94  0011  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
    95  0012  01F7               	clrf	(__pbssCOMMON+7)& (0+127)
    96  0013                     end_of_initialization:	
    97                           ;End of C runtime variable initialization code
    98                           
    99  0013                     __end_of__initialization:	
   100  0013  0183               	clrf	3
   101  0014  28D2               	ljmp	_main	;jump to C main() function
   102                           
   103                           	psect	bssCOMMON
   104  0070                     __pbssCOMMON:	
   105  0070                     _timeCount:	
   106  0070                     	ds	2
   107  0072                     _pwmFlag:	
   108  0072                     	ds	1
   109  0073                     _tempKey1L:	
   110  0073                     	ds	1
   111  0074                     _tempKey1H:	
   112  0074                     	ds	1
   113  0075                     _tempKey0L:	
   114  0075                     	ds	1
   115  0076                     _tempKey0H:	
   116  0076                     	ds	1
   117  0077                     _IntFlag:	
   118  0077                     	ds	1
   119                           
   120                           	psect	cstackCOMMON
   121  0078                     __pcstackCOMMON:	
   122  0078                     ?_initSys:	
   123  0078                     ?_checkKey0TouchKey:	
   124                           ; 1 bytes @ 0x0
   125                           
   126  0078                     ?_checkKey1TouchKey:	
   127                           ; 1 bytes @ 0x0
   128                           
   129  0078                     ?_mode1_c:	
   130                           ; 1 bytes @ 0x0
   131                           
   132  0078                     ?_initTimer0:	
   133                           ; 1 bytes @ 0x0
   134                           
   135  0078                     ?_initPWM:	
   136                           ; 1 bytes @ 0x0
   137                           
   138  0078                     ?_main:	
   139                           ; 1 bytes @ 0x0
   140                           
   141  0078                     ?_Timer0_Isr:	
   142                           ; 1 bytes @ 0x0
   143                           
   144  0078                     ??_Timer0_Isr:	
   145                           ; 1 bytes @ 0x0
   146                           
   147                           
   148                           ; 1 bytes @ 0x0
   149  0078                     	ds	2
   150  007A                     ??_initSys:	
   151  007A                     ??_checkKey0TouchKey:	
   152                           ; 1 bytes @ 0x2
   153                           
   154  007A                     ??_checkKey1TouchKey:	
   155                           ; 1 bytes @ 0x2
   156                           
   157  007A                     ??_mode1_c:	
   158                           ; 1 bytes @ 0x2
   159                           
   160  007A                     ??_initTimer0:	
   161                           ; 1 bytes @ 0x2
   162                           
   163  007A                     ??_initPWM:	
   164                           ; 1 bytes @ 0x2
   165                           
   166                           
   167                           ; 1 bytes @ 0x2
   168  007A                     	ds	3
   169  007D                     ??_main:	
   170                           
   171                           	psect	maintext
   172  00D2                     __pmaintext:	
   173                           ; 1 bytes @ 0x5
   174 ;;
   175 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   176 ;;
   177 ;; *************** function _main *****************
   178 ;; Defined at:
   179 ;;		line 27 in file "C:\Users\hhmm6\Desktop\scm\touchKey\main.c"
   180 ;; Parameters:    Size  Location     Type
   181 ;;		None
   182 ;; Auto vars:     Size  Location     Type
   183 ;;		None
   184 ;; Return value:  Size  Location     Type
   185 ;;                  1    wreg      void 
   186 ;; Registers used:
   187 ;;		wreg, status,2, status,0, pclath, cstack
   188 ;; Tracked objects:
   189 ;;		On entry : B00/0
   190 ;;		On exit  : 300/0
   191 ;;		Unchanged: 0/0
   192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   193 ;;      Params:         0       0       0       0
   194 ;;      Locals:         0       0       0       0
   195 ;;      Temps:          0       0       0       0
   196 ;;      Totals:         0       0       0       0
   197 ;;Total ram usage:        0 bytes
   198 ;; Hardware stack levels required when called:    3
   199 ;; This function calls:
   200 ;;		_checkKey0TouchKey
   201 ;;		_checkKey1TouchKey
   202 ;;		_initSys
   203 ;;		_mode1_c
   204 ;; This function is called by:
   205 ;;		Startup code after reset
   206 ;; This function uses a non-reentrant model
   207 ;;
   208                           
   209                           
   210                           ;psect for function _main
   211  00D2                     _main:	
   212                           
   213                           ;main.c: 29: initSys();
   214                           
   215                           ;incstack = 0
   216                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   217  00D2  20F7               	fcall	_initSys
   218  00D3                     l437:	
   219                           ;main.c: 30: while(1)
   220                           
   221  00D3  0064               	clrwdt	;# 
   222                           
   223                           ;main.c: 33: if(!IntFlag)
   224  00D4  0877               	movf	_IntFlag,w
   225  00D5  1903               	btfsc	3,2
   226  00D6  28D3               	goto	l437
   227                           
   228                           ;main.c: 35: IntFlag = 0;
   229  00D7  01F7               	clrf	_IntFlag
   230                           
   231                           ;main.c: 36: checkKey0TouchKey();
   232  00D8  2015               	fcall	_checkKey0TouchKey
   233                           
   234                           ;main.c: 37: checkKey1TouchKey();
   235  00D9  205D               	fcall	_checkKey1TouchKey
   236                           
   237                           ;main.c: 38: if(pwmFlag == 0)
   238  00DA  0872               	movf	_pwmFlag,w
   239  00DB  1D03               	btfss	3,2
   240  00DC  28D3               	goto	l437
   241                           
   242                           ;main.c: 39: {
   243                           ;main.c: 40: pwmFlag = 1;
   244  00DD  01F2               	clrf	_pwmFlag
   245  00DE  0AF2               	incf	_pwmFlag,f
   246                           
   247                           ;main.c: 41: mode1_c();
   248  00DF  20EE               	fcall	_mode1_c
   249  00E0  28D3               	goto	l437
   250  00E1                     __end_of_main:	
   251                           
   252                           	psect	text1
   253  00EE                     __ptext1:	
   254 ;; *************** function _mode1_c *****************
   255 ;; Defined at:
   256 ;;		line 85 in file "C:\Users\hhmm6\Desktop\scm\touchKey\main.c"
   257 ;; Parameters:    Size  Location     Type
   258 ;;		None
   259 ;; Auto vars:     Size  Location     Type
   260 ;;		None
   261 ;; Return value:  Size  Location     Type
   262 ;;                  1    wreg      void 
   263 ;; Registers used:
   264 ;;		wreg, status,2, status,0
   265 ;; Tracked objects:
   266 ;;		On entry : 300/100
   267 ;;		On exit  : 300/0
   268 ;;		Unchanged: 0/0
   269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   270 ;;      Params:         0       0       0       0
   271 ;;      Locals:         0       0       0       0
   272 ;;      Temps:          0       0       0       0
   273 ;;      Totals:         0       0       0       0
   274 ;;Total ram usage:        0 bytes
   275 ;; Hardware stack levels used:    1
   276 ;; Hardware stack levels required when called:    1
   277 ;; This function calls:
   278 ;;		Nothing
   279 ;; This function is called by:
   280 ;;		_main
   281 ;; This function uses a non-reentrant model
   282 ;;
   283                           
   284                           
   285                           ;psect for function _mode1_c
   286  00EE                     _mode1_c:	
   287                           
   288                           ;main.c: 87: PWMD0L = 1;
   289                           
   290                           ;incstack = 0
   291                           ; Regs used in _mode1_c: [wreg+status,2+status,0]
   292  00EE  3001               	movlw	1
   293  00EF  1283               	bcf	3,5	;RP0=0, select bank0
   294  00F0  0097               	movwf	23	;volatile
   295                           
   296                           ;main.c: 88: PWMD1L = 32;
   297  00F1  3020               	movlw	32
   298  00F2  0098               	movwf	24	;volatile
   299                           
   300                           ;main.c: 89: PWMTH = 0;
   301  00F3  0196               	clrf	22	;volatile
   302                           
   303                           ;main.c: 90: PWMCON0 |= 0x03;
   304  00F4  3003               	movlw	3
   305  00F5  0493               	iorwf	19,f	;volatile
   306  00F6  0008               	return
   307  00F7                     __end_of_mode1_c:	
   308                           
   309                           	psect	text2
   310  00F7                     __ptext2:	
   311 ;; *************** function _initSys *****************
   312 ;; Defined at:
   313 ;;		line 46 in file "C:\Users\hhmm6\Desktop\scm\touchKey\main.c"
   314 ;; Parameters:    Size  Location     Type
   315 ;;		None
   316 ;; Auto vars:     Size  Location     Type
   317 ;;		None
   318 ;; Return value:  Size  Location     Type
   319 ;;                  1    wreg      void 
   320 ;; Registers used:
   321 ;;		wreg, status,2, status,0, pclath, cstack
   322 ;; Tracked objects:
   323 ;;		On entry : B00/0
   324 ;;		On exit  : 300/0
   325 ;;		Unchanged: 0/0
   326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   327 ;;      Params:         0       0       0       0
   328 ;;      Locals:         0       0       0       0
   329 ;;      Temps:          0       0       0       0
   330 ;;      Totals:         0       0       0       0
   331 ;;Total ram usage:        0 bytes
   332 ;; Hardware stack levels used:    1
   333 ;; Hardware stack levels required when called:    2
   334 ;; This function calls:
   335 ;;		_initPWM
   336 ;;		_initTimer0
   337 ;; This function is called by:
   338 ;;		_main
   339 ;; This function uses a non-reentrant model
   340 ;;
   341                           
   342                           
   343                           ;psect for function _initSys
   344  00F7                     _initSys:	
   345                           
   346                           ;main.c: 48: initTimer0();
   347                           
   348                           ;incstack = 0
   349                           ; Regs used in _initSys: [wreg+status,2+status,0+pclath+cstack]
   350  00F7  20BA               	fcall	_initTimer0
   351                           
   352                           ;main.c: 49: initPWM();
   353  00F8  28E1               	ljmp	l905
   354  00F9                     __end_of_initSys:	
   355                           
   356                           	psect	text3
   357  00BA                     __ptext3:	
   358 ;; *************** function _initTimer0 *****************
   359 ;; Defined at:
   360 ;;		line 247 in file "C:\Users\hhmm6\Desktop\scm\touchKey\main.c"
   361 ;; Parameters:    Size  Location     Type
   362 ;;		None
   363 ;; Auto vars:     Size  Location     Type
   364 ;;		None
   365 ;; Return value:  Size  Location     Type
   366 ;;                  1    wreg      void 
   367 ;; Registers used:
   368 ;;		wreg, status,2
   369 ;; Tracked objects:
   370 ;;		On entry : B00/0
   371 ;;		On exit  : 300/0
   372 ;;		Unchanged: 0/0
   373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   374 ;;      Params:         0       0       0       0
   375 ;;      Locals:         0       0       0       0
   376 ;;      Temps:          0       0       0       0
   377 ;;      Totals:         0       0       0       0
   378 ;;Total ram usage:        0 bytes
   379 ;; Hardware stack levels used:    1
   380 ;; Hardware stack levels required when called:    1
   381 ;; This function calls:
   382 ;;		Nothing
   383 ;; This function is called by:
   384 ;;		_initSys
   385 ;; This function uses a non-reentrant model
   386 ;;
   387                           
   388                           
   389                           ;psect for function _initTimer0
   390  00BA                     _initTimer0:	
   391                           
   392                           ;incstack = 0
   393                           ; Regs used in _initTimer0: [wreg+status,2]
   394  00BA  0000               	nop	;# 
   395  00BB  0064               	clrwdt	;# 
   396                           
   397                           ;main.c: 251: INTCON = 0;
   398  00BC  018B               	clrf	11	;volatile
   399                           
   400                           ;main.c: 252: TRISA = 0x00;
   401  00BD  1683               	bsf	3,5	;RP0=1, select bank1
   402  00BE  1303               	bcf	3,6	;RP1=0, select bank1
   403  00BF  0185               	clrf	5	;volatile
   404                           
   405                           ;main.c: 253: TRISB = 0x04;
   406  00C0  3004               	movlw	4
   407  00C1  0086               	movwf	6	;volatile
   408                           
   409                           ;main.c: 254: WPDB = 0x00;
   410  00C2  0187               	clrf	7	;volatile
   411                           
   412                           ;main.c: 255: WPUB = 0xFF;
   413  00C3  30FF               	movlw	255
   414  00C4  1283               	bcf	3,5	;RP0=0, select bank0
   415  00C5  0088               	movwf	8	;volatile
   416                           
   417                           ;main.c: 256: PORTA = 0xFF;
   418  00C6  0085               	movwf	5	;volatile
   419                           
   420                           ;main.c: 257: PORTB = 0xFF;
   421  00C7  0086               	movwf	6	;volatile
   422                           
   423                           ;main.c: 258: OSCCON = 0X52;
   424  00C8  3052               	movlw	82
   425  00C9  1683               	bsf	3,5	;RP0=1, select bank1
   426  00CA  0088               	movwf	8	;volatile
   427                           
   428                           ;main.c: 259: OPTION_REG = 0x00;
   429  00CB  0181               	clrf	1	;volatile
   430                           
   431                           ;main.c: 260: TMR0 = 99;
   432  00CC  3063               	movlw	99
   433  00CD  1283               	bcf	3,5	;RP0=0, select bank0
   434  00CE  0081               	movwf	1	;volatile
   435                           
   436                           ;main.c: 265: INTCON = 0xA0;
   437  00CF  30A0               	movlw	160
   438  00D0  008B               	movwf	11	;volatile
   439  00D1  0008               	return
   440  00D2                     __end_of_initTimer0:	
   441                           
   442                           	psect	text4
   443  00E1                     __ptext4:	
   444 ;; *************** function _initPWM *****************
   445 ;; Defined at:
   446 ;;		line 53 in file "C:\Users\hhmm6\Desktop\scm\touchKey\main.c"
   447 ;; Parameters:    Size  Location     Type
   448 ;;		None
   449 ;; Auto vars:     Size  Location     Type
   450 ;;		None
   451 ;; Return value:  Size  Location     Type
   452 ;;                  1    wreg      void 
   453 ;; Registers used:
   454 ;;		wreg, status,2
   455 ;; Tracked objects:
   456 ;;		On entry : 300/0
   457 ;;		On exit  : 300/0
   458 ;;		Unchanged: 0/0
   459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   460 ;;      Params:         0       0       0       0
   461 ;;      Locals:         0       0       0       0
   462 ;;      Temps:          0       0       0       0
   463 ;;      Totals:         0       0       0       0
   464 ;;Total ram usage:        0 bytes
   465 ;; Hardware stack levels used:    1
   466 ;; Hardware stack levels required when called:    1
   467 ;; This function calls:
   468 ;;		Nothing
   469 ;; This function is called by:
   470 ;;		_initSys
   471 ;; This function uses a non-reentrant model
   472 ;;
   473                           
   474                           
   475                           ;psect for function _initPWM
   476  00E1                     _initPWM:	
   477  00E1                     l905:	
   478                           ;incstack = 0
   479                           ; Regs used in _initPWM: [wreg+status,2]
   480                           
   481                           
   482                           ;main.c: 55: PWMCON1 = 0x40;
   483  00E1  3040               	movlw	64
   484  00E2  0094               	movwf	20	;volatile
   485                           
   486                           ;main.c: 56: PWMCON0 = 0x21;
   487  00E3  3021               	movlw	33
   488  00E4  0093               	movwf	19	;volatile
   489                           
   490                           ;main.c: 57: PWMCON2 = 0;
   491  00E5  019D               	clrf	29	;volatile
   492                           
   493                           ;main.c: 58: PWMTH = 0;
   494  00E6  0196               	clrf	22	;volatile
   495                           
   496                           ;main.c: 59: PWMTL = 126;
   497  00E7  307E               	movlw	126
   498  00E8  0095               	movwf	21	;volatile
   499                           
   500                           ;main.c: 60: PWMD0L = 1;
   501  00E9  3001               	movlw	1
   502  00EA  0097               	movwf	23	;volatile
   503                           
   504                           ;main.c: 61: PWMD1L = 1;
   505  00EB  0098               	movwf	24	;volatile
   506                           
   507                           ;main.c: 62: PWMD01H = 0;
   508  00EC  019C               	clrf	28	;volatile
   509  00ED  0008               	return
   510  00EE                     __end_of_initPWM:	
   511                           
   512                           	psect	text5
   513  005D                     __ptext5:	
   514 ;; *************** function _checkKey1TouchKey *****************
   515 ;; Defined at:
   516 ;;		line 198 in file "C:\Users\hhmm6\Desktop\scm\touchKey\main.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;		None
   521 ;; Return value:  Size  Location     Type
   522 ;;                  1    wreg      void 
   523 ;; Registers used:
   524 ;;		wreg, status,2, status,0
   525 ;; Tracked objects:
   526 ;;		On entry : 300/100
   527 ;;		On exit  : 300/100
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   530 ;;      Params:         0       0       0       0
   531 ;;      Locals:         0       0       0       0
   532 ;;      Temps:          3       0       0       0
   533 ;;      Totals:         3       0       0       0
   534 ;;Total ram usage:        3 bytes
   535 ;; Hardware stack levels used:    1
   536 ;; Hardware stack levels required when called:    1
   537 ;; This function calls:
   538 ;;		Nothing
   539 ;; This function is called by:
   540 ;;		_main
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           
   545                           ;psect for function _checkKey1TouchKey
   546  005D                     _checkKey1TouchKey:	
   547                           
   548                           ;main.c: 200: INTCON = 0x20;
   549                           
   550                           ;incstack = 0
   551                           ; Regs used in _checkKey1TouchKey: [wreg+status,2+status,0]
   552  005D  3020               	movlw	32
   553  005E  008B               	movwf	11	;volatile
   554                           
   555                           ;main.c: 201: TRISB |= 0x47;
   556  005F  3047               	movlw	71
   557  0060  0486               	iorwf	6,f	;volatile
   558                           
   559                           ;main.c: 202: KEYCON1 = 0x51;
   560  0061  3051               	movlw	81
   561  0062  0093               	movwf	19	;volatile
   562                           
   563                           ;main.c: 203: KEYCON0 = 0x03;
   564  0063  3003               	movlw	3
   565  0064  0092               	movwf	18	;volatile
   566                           
   567                           ;main.c: 204: while(!(KEYCON0, 7));
   568  0065  0812               	movf	18,w	;volatile
   569                           
   570                           ;main.c: 206: if(tempKey1L)
   571  0066  0873               	movf	_tempKey1L,w
   572  0067  1903               	btfsc	3,2
   573  0068  2875               	goto	l967
   574                           
   575                           ;main.c: 207: {
   576                           ;main.c: 208: if(tempKey1L > (KEYDATAL + 10) && tempKey1H >= KEYDATAH)
   577  0069  0814               	movf	20,w	;volatile
   578  006A  3E0A               	addlw	10
   579  006B  2094               	fcall	PL4	;call to abstracted procedure
   580  006C  1D03               	skipz
   581  006D  2870               	goto	u85
   582  006E  0873               	movf	_tempKey1L,w
   583  006F  027A               	subwf	??_checkKey1TouchKey,w
   584  0070                     u85:	
   585  0070  1803               	skipnc
   586  0071  2875               	goto	l967
   587                           
   588                           ;main.c: 209: {
   589                           ;main.c: 210: key1Flag = 1;
   590  0072  1683               	bsf	3,5	;RP0=1, select bank1
   591  0073  1303               	bcf	3,6	;RP1=0, select bank1
   592  0074  0815               	movf	21,w	;volatile
   593  0075                     l967:	
   594                           
   595                           ;main.c: 211: }
   596                           ;main.c: 212: }
   597                           ;main.c: 215: if(tempKey1H)
   598  0075  0874               	movf	_tempKey1H,w
   599  0076  1903               	btfsc	3,2
   600  0077  288D               	goto	l981
   601                           
   602                           ;main.c: 216: {
   603                           ;main.c: 217: if(tempKey1H > KEYDATAH)
   604  0078  0874               	movf	_tempKey1H,w
   605  0079  1683               	bsf	3,5	;RP0=1, select bank1
   606  007A  1303               	bcf	3,6	;RP1=0, select bank1
   607  007B  0215               	subwf	21,w	;volatile
   608  007C  1803               	skipnc
   609  007D  288D               	goto	l981
   610                           
   611                           ;main.c: 220: {
   612                           ;main.c: 221: key1Flag = 1;
   613  007E  0815               	movf	21,w	;volatile
   614  007F  3E01               	addlw	1
   615  0080  2094               	fcall	PL4	;call to abstracted procedure
   616  0081  1D03               	skipz
   617  0082  2885               	goto	u115
   618  0083  0874               	movf	_tempKey1H,w
   619  0084  027A               	subwf	??_checkKey1TouchKey,w
   620  0085                     u115:	
   621  0085  1C03               	btfss	3,0
   622  0086  288D               	goto	l981
   623                           
   624                           ;main.c: 227: {
   625                           ;main.c: 228: key1Flag = 1;
   626  0087  0873               	movf	_tempKey1L,w
   627  0088  1683               	bsf	3,5	;RP0=1, select bank1
   628  0089  1303               	bcf	3,6	;RP1=0, select bank1
   629  008A  0214               	subwf	20,w	;volatile
   630  008B  1803               	skipnc
   631                           
   632                           ;main.c: 231: {
   633                           ;main.c: 232: key1Flag = 1;
   634  008C  0814               	movf	20,w	;volatile
   635  008D                     l981:	
   636                           
   637                           ;main.c: 233: }
   638                           ;main.c: 234: }
   639                           ;main.c: 235: }
   640                           ;main.c: 236: }
   641                           ;main.c: 237: tempKey1H = KEYDATAH;
   642  008D  1683               	bsf	3,5	;RP0=1, select bank1
   643  008E  1303               	bcf	3,6	;RP1=0, select bank1
   644  008F  0815               	movf	21,w	;volatile
   645  0090  00F4               	movwf	_tempKey1H
   646                           
   647                           ;main.c: 238: tempKey1L = KEYDATAL;
   648  0091  0814               	movf	20,w	;volatile
   649  0092  00F3               	movwf	_tempKey1L
   650                           
   651                           ;main.c: 239: KEYCON0 &= 0xFE;
   652                           
   653                           ;main.c: 240: INTCON = 0xA0;
   654  0093  2859               	ljmp	PL6	;call to abstracted procedure
   655  0094                     __end_of_checkKey1TouchKey:	
   656  0094                     PL4:	
   657  0094  00FA               	movwf	??_checkKey1TouchKey
   658  0095  3000               	movlw	0
   659  0096  1803               	skipnc
   660  0097  3001               	movlw	1
   661  0098  00FB               	movwf	??_checkKey1TouchKey+1
   662  0099  3A80               	xorlw	128
   663  009A  00FC               	movwf	??_checkKey1TouchKey+2
   664  009B  3080               	movlw	128
   665  009C  027C               	subwf	??_checkKey1TouchKey+2,w
   666  009D  0008               	return
   667  009E                     __end_ofPL4:	
   668                           
   669                           	psect	text6
   670  0015                     __ptext6:	
   671 ;; *************** function _checkKey0TouchKey *****************
   672 ;; Defined at:
   673 ;;		line 152 in file "C:\Users\hhmm6\Desktop\scm\touchKey\main.c"
   674 ;; Parameters:    Size  Location     Type
   675 ;;		None
   676 ;; Auto vars:     Size  Location     Type
   677 ;;		None
   678 ;; Return value:  Size  Location     Type
   679 ;;                  1    wreg      void 
   680 ;; Registers used:
   681 ;;		wreg, status,2, status,0
   682 ;; Tracked objects:
   683 ;;		On entry : 0/0
   684 ;;		On exit  : 300/100
   685 ;;		Unchanged: 0/0
   686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   687 ;;      Params:         0       0       0       0
   688 ;;      Locals:         0       0       0       0
   689 ;;      Temps:          3       0       0       0
   690 ;;      Totals:         3       0       0       0
   691 ;;Total ram usage:        3 bytes
   692 ;; Hardware stack levels used:    1
   693 ;; Hardware stack levels required when called:    1
   694 ;; This function calls:
   695 ;;		Nothing
   696 ;; This function is called by:
   697 ;;		_main
   698 ;; This function uses a non-reentrant model
   699 ;;
   700                           
   701                           
   702                           ;psect for function _checkKey0TouchKey
   703  0015                     _checkKey0TouchKey:	
   704                           
   705                           ;main.c: 154: INTCON = 0x20;
   706                           
   707                           ;incstack = 0
   708                           ; Regs used in _checkKey0TouchKey: [wreg+status,2+status,0]
   709  0015  3020               	movlw	32
   710  0016  008B               	movwf	11	;volatile
   711                           
   712                           ;main.c: 155: TRISB |= 0x47;
   713  0017  3047               	movlw	71
   714  0018  1683               	bsf	3,5	;RP0=1, select bank1
   715  0019  1303               	bcf	3,6	;RP1=0, select bank1
   716  001A  0486               	iorwf	6,f	;volatile
   717                           
   718                           ;main.c: 156: KEYCON1 = 0x50;
   719  001B  3050               	movlw	80
   720  001C  0093               	movwf	19	;volatile
   721                           
   722                           ;main.c: 157: KEYCON0 = 0x02;
   723  001D  3002               	movlw	2
   724  001E  0092               	movwf	18	;volatile
   725                           
   726                           ;main.c: 158: KEYCON0 |= 0x01;
   727  001F  1412               	bsf	18,0	;volatile
   728                           
   729                           ;main.c: 159: while(!(KEYCON0, 7));
   730  0020  0812               	movf	18,w	;volatile
   731                           
   732                           ;main.c: 161: if(tempKey0L)
   733  0021  0875               	movf	_tempKey0L,w
   734  0022  1903               	btfsc	3,2
   735  0023  2830               	goto	l933
   736                           
   737                           ;main.c: 162: {
   738                           ;main.c: 163: if(tempKey0L > (KEYDATAL + 10) && tempKey0H >= KEYDATAH)
   739  0024  0814               	movf	20,w	;volatile
   740  0025  3E0A               	addlw	10
   741  0026  204F               	fcall	PL2	;call to abstracted procedure
   742  0027  1D03               	skipz
   743  0028  282B               	goto	u25
   744  0029  0875               	movf	_tempKey0L,w
   745  002A  027A               	subwf	??_checkKey0TouchKey,w
   746  002B                     u25:	
   747  002B  1803               	skipnc
   748  002C  2830               	goto	l933
   749                           
   750                           ;main.c: 164: {
   751                           ;main.c: 165: key0Flag = 1;
   752  002D  1683               	bsf	3,5	;RP0=1, select bank1
   753  002E  1303               	bcf	3,6	;RP1=0, select bank1
   754  002F  0815               	movf	21,w	;volatile
   755  0030                     l933:	
   756                           
   757                           ;main.c: 166: }
   758                           ;main.c: 167: }
   759                           ;main.c: 170: if(tempKey0H)
   760  0030  0876               	movf	_tempKey0H,w
   761  0031  1903               	btfsc	3,2
   762  0032  2848               	goto	l947
   763                           
   764                           ;main.c: 171: {
   765                           ;main.c: 172: if(tempKey0H > KEYDATAH)
   766  0033  0876               	movf	_tempKey0H,w
   767  0034  1683               	bsf	3,5	;RP0=1, select bank1
   768  0035  1303               	bcf	3,6	;RP1=0, select bank1
   769  0036  0215               	subwf	21,w	;volatile
   770  0037  1803               	skipnc
   771  0038  2848               	goto	l947
   772                           
   773                           ;main.c: 175: {
   774                           ;main.c: 176: key0Flag = 1;
   775  0039  0815               	movf	21,w	;volatile
   776  003A  3E01               	addlw	1
   777  003B  204F               	fcall	PL2	;call to abstracted procedure
   778  003C  1D03               	skipz
   779  003D  2840               	goto	u55
   780  003E  0876               	movf	_tempKey0H,w
   781  003F  027A               	subwf	??_checkKey0TouchKey,w
   782  0040                     u55:	
   783  0040  1C03               	btfss	3,0
   784  0041  2848               	goto	l947
   785                           
   786                           ;main.c: 182: {
   787                           ;main.c: 183: key0Flag = 1;
   788  0042  0875               	movf	_tempKey0L,w
   789  0043  1683               	bsf	3,5	;RP0=1, select bank1
   790  0044  1303               	bcf	3,6	;RP1=0, select bank1
   791  0045  0214               	subwf	20,w	;volatile
   792  0046  1803               	skipnc
   793                           
   794                           ;main.c: 186: {
   795                           ;main.c: 187: key0Flag = 1;
   796  0047  0814               	movf	20,w	;volatile
   797  0048                     l947:	
   798                           
   799                           ;main.c: 188: }
   800                           ;main.c: 189: }
   801                           ;main.c: 190: }
   802                           ;main.c: 191: }
   803                           ;main.c: 192: tempKey0H = KEYDATAH;
   804  0048  1683               	bsf	3,5	;RP0=1, select bank1
   805  0049  1303               	bcf	3,6	;RP1=0, select bank1
   806  004A  0815               	movf	21,w	;volatile
   807  004B  00F6               	movwf	_tempKey0H
   808                           
   809                           ;main.c: 193: tempKey0L = KEYDATAL;
   810  004C  0814               	movf	20,w	;volatile
   811  004D  00F5               	movwf	_tempKey0L
   812                           
   813                           ;main.c: 194: KEYCON0 &= 0xFE;
   814                           
   815                           ;main.c: 195: INTCON = 0xA0;
   816  004E  2859               	ljmp	PL6	;call to abstracted procedure
   817  004F                     __end_of_checkKey0TouchKey:	
   818  004F                     PL2:	
   819  004F  00FA               	movwf	??_checkKey0TouchKey
   820  0050  3000               	movlw	0
   821  0051  1803               	skipnc
   822  0052  3001               	movlw	1
   823  0053  00FB               	movwf	??_checkKey0TouchKey+1
   824  0054  3A80               	xorlw	128
   825  0055  00FC               	movwf	??_checkKey0TouchKey+2
   826  0056  3080               	movlw	128
   827  0057  027C               	subwf	??_checkKey0TouchKey+2,w
   828  0058  0008               	return
   829  0059                     __end_ofPL2:	
   830  0059                     PL6:	
   831  0059  1012               	bcf	18,0	;volatile
   832  005A  30A0               	movlw	160
   833  005B  008B               	movwf	11	;volatile
   834  005C  0008               	return
   835  005D                     __end_ofPL6:	
   836                           
   837                           	psect	text7
   838  009E                     __ptext7:	
   839 ;; *************** function _Timer0_Isr *****************
   840 ;; Defined at:
   841 ;;		line 268 in file "C:\Users\hhmm6\Desktop\scm\touchKey\main.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;		None
   844 ;; Auto vars:     Size  Location     Type
   845 ;;		None
   846 ;; Return value:  Size  Location     Type
   847 ;;                  1    wreg      void 
   848 ;; Registers used:
   849 ;;		wreg, status,2, status,0
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   855 ;;      Params:         0       0       0       0
   856 ;;      Locals:         0       0       0       0
   857 ;;      Temps:          2       0       0       0
   858 ;;      Totals:         2       0       0       0
   859 ;;Total ram usage:        2 bytes
   860 ;; Hardware stack levels used:    1
   861 ;; This function calls:
   862 ;;		Nothing
   863 ;; This function is called by:
   864 ;;		Interrupt level 1
   865 ;; This function uses a non-reentrant model
   866 ;;
   867                           
   868                           
   869                           ;psect for function _Timer0_Isr
   870  009E                     _Timer0_Isr:	
   871                           
   872                           ;main.c: 270: if(T0IF)
   873  009E  1D0B               	btfss	11,2	;volatile
   874  009F  28B3               	goto	i1l515
   875                           
   876                           ;main.c: 271: {
   877                           ;main.c: 273: TMR0 += 99;
   878  00A0  3063               	movlw	99
   879  00A1  1283               	bcf	3,5	;RP0=0, select bank0
   880  00A2  1303               	bcf	3,6	;RP1=0, select bank0
   881  00A3  0781               	addwf	1,f	;volatile
   882                           
   883                           ;main.c: 274: PORTB^=(1<<3);
   884  00A4  3008               	movlw	8
   885  00A5  0686               	xorwf	6,f	;volatile
   886                           
   887                           ;main.c: 275: if(++timeCount == 10)
   888  00A6  0AF0               	incf	_timeCount,f
   889  00A7  1903               	skipnz
   890  00A8  0AF1               	incf	_timeCount+1,f
   891  00A9  300A               	movlw	10
   892  00AA  0670               	xorwf	_timeCount,w
   893  00AB  0471               	iorwf	_timeCount+1,w
   894  00AC  1D03               	btfss	3,2
   895  00AD  28B2               	goto	i1l1017
   896                           
   897                           ;main.c: 276: {
   898                           ;main.c: 277: timeCount = 0;
   899  00AE  01F0               	clrf	_timeCount
   900  00AF  01F1               	clrf	_timeCount+1
   901                           
   902                           ;main.c: 278: IntFlag = 1;
   903  00B0  01F7               	clrf	_IntFlag
   904  00B1  0AF7               	incf	_IntFlag,f
   905  00B2                     i1l1017:	
   906                           
   907                           ;main.c: 279: }
   908                           ;main.c: 281: T0IF = 0;
   909  00B2  110B               	bcf	11,2	;volatile
   910  00B3                     i1l515:	
   911  00B3  0879               	movf	??_Timer0_Isr+1,w
   912  00B4  008A               	movwf	10
   913  00B5  0E78               	swapf	??_Timer0_Isr^(0+-128),w
   914  00B6  0083               	movwf	3
   915  00B7  0EFE               	swapf	126,f
   916  00B8  0E7E               	swapf	126,w
   917  00B9  0009               	retfie
   918  00BA                     __end_of_Timer0_Isr:	
   919  007E                     btemp	set	126	;btemp
   920  007E                     wtemp0	set	126
   921                           
   922                           	psect	intentry
   923  0004                     __pintentry:	
   924                           ;incstack = 0
   925                           ; Regs used in _Timer0_Isr: [wreg+status,2+status,0]
   926                           
   927  0004                     interrupt_function:	
   928  007E                     saved_w	set	btemp
   929  0004  00FE               	movwf	btemp
   930  0005  0E03               	swapf	3,w
   931  0006  00F8               	movwf	??_Timer0_Isr
   932  0007  080A               	movf	10,w
   933  0008  00F9               	movwf	??_Timer0_Isr+1
   934  0009  289E               	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_checkKey0TouchKey
    _main->_checkKey1TouchKey

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Timer0_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer0_Isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Timer0_Isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                  _checkKey0TouchKey
                  _checkKey1TouchKey
                            _initSys
                            _mode1_c
 ---------------------------------------------------------------------------------
 (1) _mode1_c                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSys                                              0     0      0       0
                            _initPWM
                         _initTimer0
 ---------------------------------------------------------------------------------
 (2) _initTimer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkKey1TouchKey                                    3     3      0       0
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _checkKey0TouchKey                                    3     3      0       0
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Timer0_Isr                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkKey0TouchKey
   _checkKey1TouchKey
   _initSys
     _initPWM
     _initTimer0
   _mode1_c

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
ABS                  0      0       D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
DATA                 0      0       D      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 29 00:00:04 2020

                        PL2 004F                          PL4 0094                          PL6 0059  
                        u25 002B                          u55 0040                          u85 0070  
                       l437 00D3                         l905 00E1                         l933 0030  
                       l947 0048                         l981 008D                         l967 0075  
                       u115 0085                        _T0IF 005A                        _TMR0 0001  
                      _WPDB 0087                        _WPUB 0008                        _main 00D2  
                      btemp 007E                        start 000A                       ?_main 0078  
                     i1l515 00B3                       _PORTA 0005                       _PORTB 0006  
                     _TRISA 0085                       _TRISB 0086                       _PWMTH 0016  
                     _PWMTL 0015             __end_of_initPWM 00EE             __end_of_mode1_c 00F7  
           __end_of_initSys 00F9                       pclath 000A                       status 0003  
                     wtemp0 007E             __initialization 000B                __end_of_main 00E1  
                    ??_main 007D                      i1l1017 00B2                      _INTCON 000B  
                    _OSCCON 0088                      _PWMD0L 0017                      _PWMD1L 0018  
                _Timer0_Isr 009E                   ??_initPWM 007A                   ??_mode1_c 007A  
                 ??_initSys 007A                      saved_w 007E     __end_of__initialization 0013  
            __pcstackCOMMON 0078                  __end_ofPL2 0059                  __end_ofPL4 009E  
                __end_ofPL6 005D           _checkKey0TouchKey 0015           _checkKey1TouchKey 005D  
        ?_checkKey0TouchKey 0078          ?_checkKey1TouchKey 0078                 ?_Timer0_Isr 0078  
                __pmaintext 00D2                  __pintentry 0004         ??_checkKey0TouchKey 007A  
       ??_checkKey1TouchKey 007A                     _KEYCON0 0092                     _KEYCON1 0093  
                   _PWMD01H 001C                     _PWMCON0 0013                     _PWMCON1 0014  
                   _PWMCON2 001D   __end_of_checkKey0TouchKey 004F   __end_of_checkKey1TouchKey 0094  
                   _IntFlag 0077                  _initTimer0 00BA                     __ptext0 0000  
                   __ptext1 00EE                     __ptext2 00F7                     __ptext3 00BA  
                   __ptext4 00E1                     __ptext5 005D                     __ptext6 0015  
                   __ptext7 009E                     _initPWM 00E1                     _mode1_c 00EE  
                   _initSys 00F7                     _pwmFlag 0072         __size_of_Timer0_Isr 001C  
      end_of_initialization 0013  __size_of_checkKey0TouchKey 003A  __size_of_checkKey1TouchKey 0037  
               ?_initTimer0 0078         start_initialization 000B                ??_Timer0_Isr 0078  
               __pbssCOMMON 0070                   ___latbits 0000          __end_of_Timer0_Isr 00BA  
       __size_of_initTimer0 0018                    ?_initPWM 0078                    ?_mode1_c 0078  
                  ?_initSys 0078                    _KEYDATAH 0095                    _KEYDATAL 0094  
         interrupt_function 0004                   _tempKey0H 0076                   _tempKey1H 0074  
                 _tempKey0L 0075                   _tempKey1L 0073                   _timeCount 0070  
              ??_initTimer0 007A            __size_of_initPWM 000D            __size_of_mode1_c 0009  
          __size_of_initSys 0002          __end_of_initTimer0 00D2               __size_of_main 000F  
                  intlevel1 0000                  _OPTION_REG 0081  
