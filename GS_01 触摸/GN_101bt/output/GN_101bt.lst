

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jul 04 11:01:53 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F8122
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	pa_nodes0,global,class=CODE,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 1.45
    41                           ; Generated 16/11/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F887 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataBANK0
    76  0000                     __pidataBANK0:	
    77                           
    78                           	psect	strings
    79  040D                     __pstrings:	
    80  040D                     stringtab:	
    81  040D                     __stringtab:	
    82  040D                     stringcode:	
    83                           ;	String table - string pointers are 1 byte each
    84                           
    85  040D                     stringdir:	
    86  040D  3004               	movlw	high stringdir
    87  040E  008A               	movwf	10
    88  040F  0804               	movf	4,w
    89  0410  0A84               	incf	4,f
    90  0411  0782               	addwf	2,f
    91  0412                     __stringbase:	
    92  0412  3400               	retlw	0
    93  0413                     __end_of__stringtab:	
    94  0413                     _Table_KeyFalg:	
    95  0413  3401               	retlw	1
    96  0414  3402               	retlw	2
    97  0415  3404               	retlw	4
    98  0416  3408               	retlw	8
    99  0417  3410               	retlw	16
   100  0418  3420               	retlw	32
   101  0419  3440               	retlw	64
   102  041A  3480               	retlw	128
   103  041B                     __end_of_Table_KeyFalg:	
   104  041B                     _Table_C_LVBO:	
   105  041B  3480               	retlw	128
   106  041C                     __end_of_Table_C_LVBO:	
   107  041C                     _Table_KeyDown:	
   108  041C  340A               	retlw	10
   109  041D                     __end_of_Table_KeyDown:	
   110  041D                     _Table_KeyCap:	
   111  041D  3402               	retlw	2
   112  041E                     __end_of_Table_KeyCap:	
   113  041E                     _Table_KeyChannel:	
   114  041E  3450               	retlw	80
   115  041F                     __end_of_Table_KeyChannel:	
   116                           
   117                           	psect	nvBANK0
   118  0047                     __pnvBANK0:	
   119  0047                     _PwmData:	
   120  0047                     	ds	2
   121  001E                     _PIE1	set	30
   122  001D                     _PIR1	set	29
   123  0018                     _WPDB	set	24
   124  0017                     _OSCCON	set	23
   125  0016                     _KEYCON2	set	22
   126  0015                     _CCPR2L	set	21
   127  0014                     _CCPCON	set	20
   128  0012                     _PR2	set	18
   129  0011                     _T2CON	set	17
   130  000F                     _KEYDATAH	set	15
   131  000E                     _KEYDATAL	set	14
   132  000D                     _KEYCON1	set	13
   133  000C                     _KEYCON0	set	12
   134  000B                     _INTCON	set	11
   135  0008                     _WPUB	set	8
   136  0007                     _TRISB	set	7
   137  0006                     _PORTB	set	6
   138  0005                     _OPTION_REG	set	5
   139  0001                     _TMR0	set	1
   140  008A                     _TMR2ON	set	138
   141  0058                     _RBIF	set	88
   142  0059                     _TMR2IF	set	89
   143  005A                     _T0IF	set	90
   144  003C                     _TRISB4	set	60
   145  003D                     _TRISB5	set	61
   146  0035                     _RB5	set	53
   147                           
   148                           	psect	cinit
   149  000B                     start_initialization:	
   150                           ; #config settings
   151                           
   152  000B                     __initialization:	
   153                           
   154                           ;initializer for _lowCount
   155  000B  301A               	movlw	26
   156  000C  00C9               	movwf	__pdataBANK0& (0+127)
   157  000D  3020               	movlw	low __pbssBANK0
   158                           
   159                           ; Clear objects allocated to BANK0
   160  000E  1383               	bcf	3,7	;select IRP bank0
   161  000F  0084               	movwf	4
   162  0010  303A               	movlw	low (__pbssBANK0+26)
   163  0011  245F               	fcall	clear_ram0
   164                           
   165                           ; Clear objects allocated to COMMON
   166  0012  01FA               	clrf	__pbssCOMMON& (0+127)
   167  0013  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   168                           
   169                           ; Clear objects allocated to BITCOMMON
   170  0014  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   171  0015                     end_of_initialization:	
   172                           ;End of C runtime variable initialization code
   173                           
   174  0015                     __end_of__initialization:	
   175  0015  0183               	clrf	3
   176  0016  2C54               	ljmp	_main	;jump to C main() function
   177                           
   178                           	psect	bitbssCOMMON
   179  03C8                     __pbitbssCOMMON:	
   180  03C8                     _b_ksleep:	
   181  03C8                     	ds	1
   182  03C9                     _b_kerr:	
   183  03C9                     	ds	1
   184  03CA                     _b_kclr:	
   185  03CA                     	ds	1
   186  03CB                     _b_kover1:	
   187  03CB                     	ds	1
   188  03CC                     _b_kover:	
   189  03CC                     	ds	1
   190  03CD                     _B_OnOff:	
   191  03CD                     	ds	1
   192  03CE                     _B_MainLoop:	
   193  03CE                     	ds	1
   194                           
   195                           	psect	bssCOMMON
   196  007A                     __pbssCOMMON:	
   197  007A                     _KeyFlag:	
   198  007A                     	ds	2
   199                           
   200                           	psect	bssBANK0
   201  0020                     __pbssBANK0:	
   202  0020                     CheckValidTime@validtime:	
   203  0020                     	ds	2
   204  0022                     _KeyData:	
   205  0022                     	ds	2
   206  0024                     _KeyOldData:	
   207  0024                     	ds	2
   208  0026                     _KeyReference:	
   209  0026                     	ds	2
   210  0028                     _KeyOldValue2:	
   211  0028                     	ds	2
   212  002A                     _KeyOldValue1:	
   213  002A                     	ds	2
   214  002C                     _KeyOldValue0:	
   215  002C                     	ds	2
   216  002E                     _KeyResSum:	
   217  002E                     	ds	2
   218  0030                     TurnKeyFlags@KeyNoTimes:	
   219  0030                     	ds	1
   220  0031                     TurnKeyFlags@KeyHaveTimes:	
   221  0031                     	ds	1
   222  0032                     CheckKeyOldValue@counter:	
   223  0032                     	ds	1
   224  0033                     _KeyMaxSub:	
   225  0033                     	ds	1
   226  0034                     _KeyCounter:	
   227  0034                     	ds	1
   228  0035                     WorkSleep@time:	
   229  0035                     	ds	1
   230  0036                     KeyServer@KeyOldFlag:	
   231  0036                     	ds	1
   232  0037                     _pressKey:	
   233  0037                     	ds	1
   234  0038                     _MainTime:	
   235  0038                     	ds	1
   236  0039                     _KeyUpShake:	
   237  0039                     	ds	1
   238                           
   239                           	psect	dataBANK0
   240  0049                     __pdataBANK0:	
   241  0049                     _lowCount:	
   242  0049                     	ds	1
   243                           
   244                           	psect	clrtext
   245  045F                     clear_ram0:	
   246                           ;	Called with FSR containing the base address, and
   247                           ;	W with the last address+1
   248                           
   249  045F  0064               	clrwdt	;clear the watchdog before getting into this loop
   250  0460                     clrloop0:	
   251  0460  0180               	clrf	0	;clear RAM location pointed to by FSR
   252  0461  0A84               	incf	4,f	;increment pointer
   253  0462  0604               	xorwf	4,w	;XOR with final address
   254  0463  1903               	btfsc	3,2	;have we reached the end yet?
   255  0464  3400               	retlw	0	;all done for this memory range, return
   256  0465  0604               	xorwf	4,w	;XOR again to restore value
   257  0466  2C60               	goto	clrloop0	;do the next byte
   258                           
   259                           	psect	cstackCOMMON
   260  0070                     __pcstackCOMMON:	
   261  0070                     ?_SystemEnterSleep:	
   262  0070                     ?_CheckTouchKey:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?_processPress:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_GetTouchKeyValue_Sleep:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ?_Init_System:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_Refurbish_Sfr:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_KeyServer:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_Isr_Timer:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ??_Isr_Timer:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ?_WorkSleep:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ?_main:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ?_KeyIsIn:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0070                     ?_KeyClearOne:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0070                     ?_KeyClearIn:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ?_KeyStopClear:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ?_ClearResSum:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?_GetTouchKeyValue:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ?_CheckOnceResult:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_CheckKeyOldValue:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_TurnKeyFlags:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ?_CheckValidTime:	
   320                           ; 1 bytes @ 0x0
   321                           
   322                           
   323                           ; 1 bytes @ 0x0
   324  0070                     	ds	2
   325  0072                     ??_processPress:	
   326  0072                     ??_Init_System:	
   327                           ; 1 bytes @ 0x2
   328                           
   329  0072                     ??_Refurbish_Sfr:	
   330                           ; 1 bytes @ 0x2
   331                           
   332  0072                     ??_KeyServer:	
   333                           ; 1 bytes @ 0x2
   334                           
   335  0072                     ??_KeyIsIn:	
   336                           ; 1 bytes @ 0x2
   337                           
   338  0072                     ??_KeyClearOne:	
   339                           ; 1 bytes @ 0x2
   340                           
   341  0072                     ??_ClearResSum:	
   342                           ; 1 bytes @ 0x2
   343                           
   344  0072                     ?_KeyHave:	
   345                           ; 1 bytes @ 0x2
   346                           
   347  0072                     ??_CheckValidTime:	
   348                           ; 1 bytes @ 0x2
   349                           
   350  0072                     KeyIsIn@i:	
   351                           ; 1 bytes @ 0x2
   352                           
   353  0072                     KeyClearOne@cnt:	
   354                           ; 1 bytes @ 0x2
   355                           
   356  0072                     ClearResSum@cnt:	
   357                           ; 1 bytes @ 0x2
   358                           
   359  0072                     KeyHave@flag:	
   360                           ; 1 bytes @ 0x2
   361                           
   362                           
   363                           ; 2 bytes @ 0x2
   364  0072                     	ds	1
   365  0073                     ??_GetTouchKeyValue_Sleep:	
   366  0073                     ??_KeyStopClear:	
   367                           ; 1 bytes @ 0x3
   368                           
   369  0073                     ??_GetTouchKeyValue:	
   370                           ; 1 bytes @ 0x3
   371                           
   372  0073                     KeyIsIn@cnt:	
   373                           ; 1 bytes @ 0x3
   374                           
   375  0073                     KeyStopClear@i:	
   376                           ; 1 bytes @ 0x3
   377                           
   378  0073                     GetTouchKeyValue@wake:	
   379                           ; 1 bytes @ 0x3
   380                           
   381  0073                     GetTouchKeyValue_Sleep@wake:	
   382                           ; 2 bytes @ 0x3
   383                           
   384                           
   385                           ; 2 bytes @ 0x3
   386  0073                     	ds	1
   387  0074                     ??_KeyClearIn:	
   388  0074                     ??_KeyHave:	
   389                           ; 1 bytes @ 0x4
   390                           
   391  0074                     ??_CheckKeyOldValue:	
   392                           ; 1 bytes @ 0x4
   393                           
   394  0074                     KeyServer@Temp:	
   395                           ; 1 bytes @ 0x4
   396                           
   397  0074                     KeyClearIn@cnt:	
   398                           ; 1 bytes @ 0x4
   399                           
   400  0074                     KeyHave@cnt:	
   401                           ; 1 bytes @ 0x4
   402                           
   403                           
   404                           ; 1 bytes @ 0x4
   405  0074                     	ds	1
   406  0075                     ??_CheckOnceResult:	
   407  0075                     ??_TurnKeyFlags:	
   408                           ; 1 bytes @ 0x5
   409                           
   410  0075                     GetTouchKeyValue@temp:	
   411                           ; 1 bytes @ 0x5
   412                           
   413  0075                     GetTouchKeyValue_Sleep@temp:	
   414                           ; 1 bytes @ 0x5
   415                           
   416                           
   417                           ; 1 bytes @ 0x5
   418  0075                     	ds	1
   419  0076                     GetTouchKeyValue@cnt:	
   420  0076                     GetTouchKeyValue_Sleep@cnt:	
   421                           ; 1 bytes @ 0x6
   422                           
   423                           
   424                           ; 1 bytes @ 0x6
   425  0076                     	ds	1
   426  0077                     ??_WorkSleep:	
   427                           
   428                           ; 1 bytes @ 0x7
   429  0077                     	ds	2
   430  0079                     ??_CheckTouchKey:	
   431  0079                     ??_main:	
   432                           ; 1 bytes @ 0x9
   433                           
   434                           
   435                           	psect	cstackBANK0
   436  003A                     __pcstackBANK0:	
   437                           ; 1 bytes @ 0x9
   438                           
   439  003A                     ??_SystemEnterSleep:	
   440  003A                     CheckOnceResult@OldValue:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  003A                     CheckKeyOldValue@KeyResTemp:	
   444                           ; 2 bytes @ 0x0
   445                           
   446                           
   447                           ; 2 bytes @ 0x0
   448  003A                     	ds	2
   449  003C                     CheckOnceResult@flag:	
   450  003C                     CheckKeyOldValue@KeyOldTemp:	
   451                           ; 1 bytes @ 0x2
   452                           
   453                           
   454                           ; 2 bytes @ 0x2
   455  003C                     	ds	1
   456  003D                     CheckOnceResult@KeyValue:	
   457                           
   458                           ; 2 bytes @ 0x3
   459  003D                     	ds	1
   460  003E                     CheckKeyOldValue@cnt:	
   461  003E                     SystemEnterSleep@KeyValue:	
   462                           ; 1 bytes @ 0x4
   463                           
   464                           
   465                           ; 2 bytes @ 0x4
   466  003E                     	ds	1
   467  003F                     CheckOnceResult@KeyDown:	
   468                           
   469                           ; 1 bytes @ 0x5
   470  003F                     	ds	1
   471  0040                     CheckOnceResult@KeyResTemp:	
   472  0040                     SystemEnterSleep@wake:	
   473                           ; 2 bytes @ 0x6
   474                           
   475                           
   476                           ; 2 bytes @ 0x6
   477  0040                     	ds	2
   478  0042                     CheckOnceResult@cnt:	
   479  0042                     SystemEnterSleep@KeyResTemp:	
   480                           ; 1 bytes @ 0x8
   481                           
   482                           
   483                           ; 2 bytes @ 0x8
   484  0042                     	ds	2
   485  0044                     SystemEnterSleep@KeyOldTemp:	
   486                           
   487                           ; 2 bytes @ 0xA
   488  0044                     	ds	2
   489  0046                     SystemEnterSleep@cnt:	
   490                           
   491                           ; 1 bytes @ 0xC
   492  0046                     	ds	1
   493                           
   494                           	psect	maintext
   495  0454                     __pmaintext:	
   496 ;;
   497 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   498 ;;
   499 ;; *************** function _main *****************
   500 ;; Defined at:
   501 ;;		line 196 in file "D:\ÎÒµÄÎÄµµ\Documents\WeChat Files\hmm665544\FileStorage\File\2020-07\GS_01 ´¥Ãþ(1)\GS_01 ´¥Ãþ\GN_
      +101bt\main.c"
   502 ;; Parameters:    Size  Location     Type
   503 ;;		None
   504 ;; Auto vars:     Size  Location     Type
   505 ;;		None
   506 ;; Return value:  Size  Location     Type
   507 ;;                  1    wreg      void 
   508 ;; Registers used:
   509 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   510 ;; Tracked objects:
   511 ;;		On entry : B00/0
   512 ;;		On exit  : 100/0
   513 ;;		Unchanged: 0/0
   514 ;; Data sizes:     COMMON   BANK0   BANK1
   515 ;;      Params:         0       0       0
   516 ;;      Locals:         0       0       0
   517 ;;      Temps:          0       0       0
   518 ;;      Totals:         0       0       0
   519 ;;Total ram usage:        0 bytes
   520 ;; Hardware stack levels required when called:    6
   521 ;; This function calls:
   522 ;;		_CheckTouchKey
   523 ;;		_Init_System
   524 ;;		_KeyServer
   525 ;;		_Refurbish_Sfr
   526 ;;		_WorkSleep
   527 ;;		_processPress
   528 ;; This function is called by:
   529 ;;		Startup code after reset
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           
   534                           ;psect for function _main
   535  0454                     _main:	
   536                           
   537                           ;main.c: 198: Init_System();
   538                           
   539                           ;incstack = 0
   540                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   541  0454  237F               	fcall	_Init_System
   542  0455                     l2713:	
   543                           
   544                           ;main.c: 200: {
   545                           ;main.c: 201: if(B_MainLoop)
   546  0455  1F79               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   547  0456  2C55               	goto	l2713
   548                           
   549                           ;main.c: 202: {
   550                           ;main.c: 203: B_MainLoop = 0;
   551  0457  1379               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   552  0458  0064               	clrwdt	;# 
   553                           
   554                           ;main.c: 206: Refurbish_Sfr();
   555  0459  246F               	fcall	_Refurbish_Sfr
   556                           
   557                           ;main.c: 207: CheckTouchKey();
   558  045A  235B               	fcall	_CheckTouchKey
   559                           
   560                           ;main.c: 208: KeyServer();
   561  045B  22A4               	fcall	_KeyServer
   562                           
   563                           ;main.c: 209: WorkSleep();
   564  045C  23D0               	fcall	_WorkSleep
   565                           
   566                           ;main.c: 210: processPress();
   567  045D  241F               	fcall	_processPress
   568  045E  2C55               	goto	l2713
   569  045F                     __end_of_main:	
   570                           
   571                           	psect	text1
   572  041F                     __ptext1:	
   573 ;; *************** function _processPress *****************
   574 ;; Defined at:
   575 ;;		line 216 in file "D:\ÎÒµÄÎÄµµ\Documents\WeChat Files\hmm665544\FileStorage\File\2020-07\GS_01 ´¥Ãþ(1)\GS_01 ´¥Ãþ\GN_
      +101bt\main.c"
   576 ;; Parameters:    Size  Location     Type
   577 ;;		None
   578 ;; Auto vars:     Size  Location     Type
   579 ;;		None
   580 ;; Return value:  Size  Location     Type
   581 ;;                  1    wreg      void 
   582 ;; Registers used:
   583 ;;		wreg, status,2, status,0
   584 ;; Tracked objects:
   585 ;;		On entry : 100/0
   586 ;;		On exit  : 100/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMMON   BANK0   BANK1
   589 ;;      Params:         0       0       0
   590 ;;      Locals:         0       0       0
   591 ;;      Temps:          0       0       0
   592 ;;      Totals:         0       0       0
   593 ;;Total ram usage:        0 bytes
   594 ;; Hardware stack levels used:    1
   595 ;; Hardware stack levels required when called:    1
   596 ;; This function calls:
   597 ;;		Nothing
   598 ;; This function is called by:
   599 ;;		_main
   600 ;; This function uses a non-reentrant model
   601 ;;
   602                           
   603                           
   604                           ;psect for function _processPress
   605  041F                     _processPress:	
   606                           
   607                           ;main.c: 218: if(pressKey)
   608                           
   609                           ;incstack = 0
   610                           ; Regs used in _processPress: [wreg+status,2+status,0]
   611  041F  0837               	movf	_pressKey,w
   612  0420  1D03               	btfss	3,2
   613                           
   614                           ;main.c: 219: {
   615                           ;main.c: 220: lowCount = 0;
   616  0421  01C9               	clrf	_lowCount
   617                           
   618                           ;main.c: 221: }
   619                           ;main.c: 222: if(++lowCount > 25)
   620  0422  301A               	movlw	26
   621  0423  0AC9               	incf	_lowCount,f
   622  0424  0249               	subwf	_lowCount,w
   623  0425  1C03               	skipc
   624  0426  2C2B               	goto	l355
   625                           
   626                           ;main.c: 223: {
   627                           ;main.c: 224: lowCount = 26;
   628  0427  301A               	movlw	26
   629  0428  00C9               	movwf	_lowCount
   630                           
   631                           ;main.c: 225: PORTB |= 0x10;
   632  0429  1606               	bsf	6,4	;volatile
   633                           
   634                           ;main.c: 226: }
   635  042A  0008               	return
   636  042B                     l355:	
   637                           
   638                           ;main.c: 227: else
   639                           ;main.c: 228: {
   640                           ;main.c: 229: PORTB &= 0xEF;
   641  042B  1206               	bcf	6,4	;volatile
   642  042C  0008               	return
   643  042D                     __end_of_processPress:	
   644                           
   645                           	psect	text2
   646  03D0                     __ptext2:	
   647 ;; *************** function _WorkSleep *****************
   648 ;; Defined at:
   649 ;;		line 153 in file "D:\ÎÒµÄÎÄµµ\Documents\WeChat Files\hmm665544\FileStorage\File\2020-07\GS_01 ´¥Ãþ(1)\GS_01 ´¥Ãþ\GN_
      +101bt\main.c"
   650 ;; Parameters:    Size  Location     Type
   651 ;;		None
   652 ;; Auto vars:     Size  Location     Type
   653 ;;		None
   654 ;; Return value:  Size  Location     Type
   655 ;;                  1    wreg      void 
   656 ;; Registers used:
   657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   658 ;; Tracked objects:
   659 ;;		On entry : 100/0
   660 ;;		On exit  : 100/0
   661 ;;		Unchanged: 0/0
   662 ;; Data sizes:     COMMON   BANK0   BANK1
   663 ;;      Params:         0       0       0
   664 ;;      Locals:         0       0       0
   665 ;;      Temps:          0       0       0
   666 ;;      Totals:         0       0       0
   667 ;;Total ram usage:        0 bytes
   668 ;; Hardware stack levels used:    1
   669 ;; Hardware stack levels required when called:    4
   670 ;; This function calls:
   671 ;;		_Refurbish_Sfr
   672 ;;		_SystemEnterSleep
   673 ;; This function is called by:
   674 ;;		_main
   675 ;; This function uses a non-reentrant model
   676 ;;
   677                           
   678                           
   679                           ;psect for function _WorkSleep
   680  03D0                     _WorkSleep:	
   681                           
   682                           ;main.c: 156: static unsigned char time;
   683                           ;main.c: 158: if(B_OnOff)
   684                           
   685                           ;incstack = 0
   686                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   687  03D0  1AF9               	btfsc	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
   688                           
   689                           ;main.c: 159: time = 0;
   690  03D1  01B5               	clrf	WorkSleep@time
   691                           
   692                           ;main.c: 161: if(++time >= 250)
   693  03D2  30FA               	movlw	250
   694  03D3  0AB5               	incf	WorkSleep@time,f
   695  03D4  0235               	subwf	WorkSleep@time,w
   696  03D5  1C03               	skipc
   697  03D6  0008               	return
   698                           
   699                           ;main.c: 162: {
   700                           ;main.c: 163: time = 0;
   701  03D7  01B5               	clrf	WorkSleep@time
   702                           
   703                           ;main.c: 164: INTCON = 0;
   704  03D8  018B               	clrf	11	;volatile
   705                           
   706                           ;main.c: 165: PIE1 = 0;
   707  03D9  019E               	clrf	30	;volatile
   708                           
   709                           ;main.c: 166: PIR1 = 0;
   710  03DA  019D               	clrf	29	;volatile
   711                           
   712                           ;main.c: 167: T2CON = 0;
   713  03DB  0191               	clrf	17	;volatile
   714                           
   715                           ;main.c: 168: CCPCON = 0;
   716  03DC  0194               	clrf	20	;volatile
   717                           
   718                           ;main.c: 169: KEYCON0 = 0;
   719  03DD  018C               	clrf	12	;volatile
   720                           
   721                           ;main.c: 171: TRISB = 0;
   722  03DE  0187               	clrf	7	;volatile
   723                           
   724                           ;main.c: 172: PORTB = 0;
   725  03DF  0186               	clrf	6	;volatile
   726                           
   727                           ;main.c: 173: WPUB = 0;
   728  03E0  0188               	clrf	8	;volatile
   729                           
   730                           ;main.c: 185: SystemEnterSleep();
   731  03E1  2100               	fcall	_SystemEnterSleep
   732                           
   733                           ;main.c: 186: if(RBIF) RBIF = 0;
   734  03E2  180B               	btfsc	11,0	;volatile
   735  03E3  100B               	bcf	11,0	;volatile
   736                           
   737                           ;main.c: 188: Refurbish_Sfr();
   738  03E4  2C6F               	ljmp	l1897
   739  03E5                     __end_of_WorkSleep:	
   740                           
   741                           	psect	text3
   742  0100                     __ptext3:	
   743 ;; *************** function _SystemEnterSleep *****************
   744 ;; Defined at:
   745 ;;		line 572 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
   746 ;; Parameters:    Size  Location     Type
   747 ;;		None
   748 ;; Auto vars:     Size  Location     Type
   749 ;;  KeyOldTemp      2   10[BANK0 ] unsigned int 
   750 ;;  KeyResTemp      2    8[BANK0 ] unsigned int 
   751 ;;  wake            2    6[BANK0 ] unsigned int 
   752 ;;  KeyValue        2    4[BANK0 ] unsigned int 
   753 ;;  cnt             1   12[BANK0 ] unsigned char 
   754 ;; Return value:  Size  Location     Type
   755 ;;                  1    wreg      void 
   756 ;; Registers used:
   757 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   758 ;; Tracked objects:
   759 ;;		On entry : 100/0
   760 ;;		On exit  : 900/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMMON   BANK0   BANK1
   763 ;;      Params:         0       0       0
   764 ;;      Locals:         0       9       0
   765 ;;      Temps:          0       4       0
   766 ;;      Totals:         0      13       0
   767 ;;Total ram usage:       13 bytes
   768 ;; Hardware stack levels used:    1
   769 ;; Hardware stack levels required when called:    3
   770 ;; This function calls:
   771 ;;		_ClearResSum
   772 ;;		_GetTouchKeyValue_Sleep
   773 ;;		_KeyClearOne
   774 ;; This function is called by:
   775 ;;		_WorkSleep
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           
   780                           ;psect for function _SystemEnterSleep
   781  0100                     _SystemEnterSleep:	
   782  0100                     l793:	
   783                           ;incstack = 0
   784                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   785                           ;CheckTouchKey.c: 582: {
   786                           ;CheckTouchKey.c: 583: while(1)
   787                           
   788  0100  0064               	clrwdt	;# 
   789                           
   790                           ;CheckTouchKey.c: 588: TMR0 = 0;
   791  0101  1283               	bcf	3,5	;RP0=0, select bank0
   792  0102  0181               	clrf	1	;volatile
   793                           
   794                           ;CheckTouchKey.c: 589: OPTION_REG |= 0x07;
   795  0103  3007               	movlw	7
   796  0104  0485               	iorwf	5,f	;volatile
   797                           
   798                           ;CheckTouchKey.c: 591: OPTION_REG |= 0x08;
   799  0105  1585               	bsf	5,3	;volatile
   800  0106  0064               	clrwdt	;# 
   801  0107  3009               	movlw	9
   802  0108  1283               	bcf	3,5	;RP0=0, select bank0
   803  0109  0085               	movwf	5	;volatile
   804  010A  0064               	clrwdt	;# 
   805                           
   806                           ;CheckTouchKey.c: 597: KEYCON0 = 0;
   807  010B  1283               	bcf	3,5	;RP0=0, select bank0
   808  010C  018C               	clrf	12	;volatile
   809                           
   810                           ;CheckTouchKey.c: 598: KEYCON2 = 0;
   811  010D  0196               	clrf	22	;volatile
   812                           
   813                           ;CheckTouchKey.c: 599: TRISB5 = 0;
   814  010E  1287               	bcf	7,5	;volatile
   815                           
   816                           ;CheckTouchKey.c: 600: RB5 = 0;
   817  010F  1286               	bcf	6,5	;volatile
   818                           
   819                           ;CheckTouchKey.c: 602: OSCCON = 0x70;
   820  0110  3070               	movlw	112
   821  0111  0097               	movwf	23	;volatile
   822  0112  0063               	sleep	;# 
   823  0113  0000               	nop	;# 
   824  0114  0064               	clrwdt	;# 
   825                           
   826                           ;CheckTouchKey.c: 610: ClearResSum();
   827  0115  2467               	fcall	_ClearResSum
   828                           
   829                           ;CheckTouchKey.c: 611: b_ksleep = 1;
   830  0116  1479               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
   831                           
   832                           ;CheckTouchKey.c: 612: GetTouchKeyValue_Sleep();
   833  0117  2254               	fcall	_GetTouchKeyValue_Sleep
   834                           
   835                           ;CheckTouchKey.c: 614: cnt = 0;
   836  0118  1283               	bcf	3,5	;RP0=0, select bank0
   837                           
   838                           ;CheckTouchKey.c: 615: wake = 1;
   839  0119  21D1               	fcall	PL26	;call to abstracted procedure
   840                           
   841                           ;CheckTouchKey.c: 616: if(INTCON & 0x01)
   842  011A  1C0B               	btfss	11,0	;volatile
   843  011B  2922               	goto	l797
   844  011C                     l2445:	
   845                           
   846                           ;CheckTouchKey.c: 617: {
   847                           ;CheckTouchKey.c: 618: ClearResSum();
   848  011C  2467               	fcall	_ClearResSum
   849                           
   850                           ;CheckTouchKey.c: 619: KeyCounter = 0;
   851  011D  1283               	bcf	3,5	;RP0=0, select bank0
   852  011E  01B4               	clrf	_KeyCounter
   853                           
   854                           ;CheckTouchKey.c: 620: b_kover = 0;
   855  011F  1279               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
   856                           
   857                           ;CheckTouchKey.c: 621: b_kover1 = 0;
   858  0120  11F9               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
   859  0121  0008               	return
   860  0122                     l797:	
   861                           ;CheckTouchKey.c: 624: else
   862                           ;CheckTouchKey.c: 625: do
   863                           
   864  0122  1C40               	btfss	SystemEnterSleep@wake,0
   865  0123  29AB               	goto	l2513
   866                           
   867                           ;CheckTouchKey.c: 628: {
   868                           ;CheckTouchKey.c: 630: KeyValue = KeyResTemp = KeyResSum[cnt];
   869  0124  1003               	clrc
   870  0125  0D46               	rlf	SystemEnterSleep@cnt,w
   871  0126  3E2E               	addlw	(low (_KeyResSum| 0))& (0+255)
   872  0127  0084               	movwf	4
   873  0128  1383               	bcf	3,7	;select IRP bank0
   874  0129  0800               	movf	0,w
   875  012A  00C2               	movwf	SystemEnterSleep@KeyResTemp
   876  012B  0A84               	incf	4,f
   877  012C  0800               	movf	0,w
   878  012D  00C3               	movwf	SystemEnterSleep@KeyResTemp+1
   879  012E  00BF               	movwf	SystemEnterSleep@KeyValue+1
   880  012F  0842               	movf	SystemEnterSleep@KeyResTemp,w
   881  0130  00BE               	movwf	SystemEnterSleep@KeyValue
   882                           
   883                           ;CheckTouchKey.c: 631: if(KeyResTemp)
   884  0131  0842               	movf	SystemEnterSleep@KeyResTemp,w
   885  0132  0443               	iorwf	SystemEnterSleep@KeyResTemp+1,w
   886  0133  1903               	btfsc	3,2
   887  0134  29AB               	goto	l2513
   888                           
   889                           ;CheckTouchKey.c: 632: {
   890                           ;CheckTouchKey.c: 633: KeyValue += Table_KeyDown[cnt];
   891  0135  0846               	movf	SystemEnterSleep@cnt,w
   892  0136  3E0A               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
   893  0137  0084               	movwf	4
   894  0138  240D               	fcall	stringdir
   895  0139  07BE               	addwf	SystemEnterSleep@KeyValue,f
   896  013A  1803               	skipnc
   897  013B  0ABF               	incf	SystemEnterSleep@KeyValue+1,f
   898                           
   899                           ;CheckTouchKey.c: 635: if(KeyReference[cnt] >= KeyValue)
   900  013C  1003               	clrc
   901  013D  0D46               	rlf	SystemEnterSleep@cnt,w
   902  013E  3E26               	addlw	(low (_KeyReference| 0))& (0+255)
   903  013F  21C0               	fcall	PL12	;call to abstracted procedure
   904  0140  083F               	movf	SystemEnterSleep@KeyValue+1,w
   905  0141  023B               	subwf	??_SystemEnterSleep+1,w
   906  0142  1D03               	skipz
   907  0143  2946               	goto	u1665
   908  0144  083E               	movf	SystemEnterSleep@KeyValue,w
   909  0145  023A               	subwf	??_SystemEnterSleep,w
   910  0146                     u1665:	
   911  0146  1C03               	skipc
   912  0147  2954               	goto	L1
   913                           
   914                           ;CheckTouchKey.c: 636: {
   915                           ;CheckTouchKey.c: 637: cnt = 0;
   916                           
   917                           ;CheckTouchKey.c: 638: wake = 1;
   918  0148  21D1               	fcall	PL26	;call to abstracted procedure
   919  0149                     l2469:	
   920  0149  1840               	btfsc	SystemEnterSleep@wake,0
   921  014A  294D               	goto	l2473
   922                           
   923                           ;CheckTouchKey.c: 642: {
   924                           ;CheckTouchKey.c: 643: KeyClearOne(cnt);
   925  014B  0846               	movf	SystemEnterSleep@cnt,w
   926  014C  239E               	fcall	_KeyClearOne
   927  014D                     l2473:	
   928                           
   929                           ;CheckTouchKey.c: 644: }
   930                           ;CheckTouchKey.c: 645: wake <<= 1;
   931  014D  1283               	bcf	3,5	;RP0=0, select bank0
   932  014E  1003               	clrc
   933  014F  0DC0               	rlf	SystemEnterSleep@wake,f
   934  0150  0DC1               	rlf	SystemEnterSleep@wake+1,f
   935  0151  0FC6               	incfsz	SystemEnterSleep@cnt,f
   936  0152  291C               	goto	l2445
   937  0153  2949               	goto	l2469
   938  0154                     L1:	
   939                           ;CheckTouchKey.c: 653: }
   940                           ;CheckTouchKey.c: 655: KeyOldTemp = KeyOldValue0[cnt] - KeyResTemp;
   941                           
   942  0154  0D46               	rlf	SystemEnterSleep@cnt,w
   943  0155  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
   944                           
   945                           ;CheckTouchKey.c: 656: if(KeyOldTemp <= 4 || KeyOldTemp >= -4)
   946  0156  21B1               	fcall	PL2	;call to abstracted procedure
   947  0157  1903               	skipnz
   948  0158  0244               	subwf	SystemEnterSleep@KeyOldTemp,w
   949  0159  1C03               	skipc
   950  015A  2963               	goto	L2
   951  015B  30FF               	movlw	255
   952  015C  0245               	subwf	SystemEnterSleep@KeyOldTemp+1,w
   953  015D  30FC               	movlw	252
   954  015E  1903               	skipnz
   955  015F  0244               	subwf	SystemEnterSleep@KeyOldTemp,w
   956  0160  1C03               	skipc
   957  0161  2999               	goto	L3
   958                           
   959                           ;CheckTouchKey.c: 657: {
   960                           ;CheckTouchKey.c: 658: KeyOldTemp = KeyOldValue1[cnt] - KeyResTemp;
   961  0162  1003               	clrc
   962  0163                     L2:	
   963  0163  0D46               	rlf	SystemEnterSleep@cnt,w
   964  0164  3E2A               	addlw	(low (_KeyOldValue1| 0))& (0+255)
   965                           
   966                           ;CheckTouchKey.c: 659: if(KeyOldTemp <= 4 || KeyOldTemp >= -4)
   967  0165  21B1               	fcall	PL2	;call to abstracted procedure
   968  0166  1903               	skipnz
   969  0167  0244               	subwf	SystemEnterSleep@KeyOldTemp,w
   970  0168  1C03               	skipc
   971  0169  2972               	goto	L4
   972  016A  30FF               	movlw	255
   973  016B  0245               	subwf	SystemEnterSleep@KeyOldTemp+1,w
   974  016C  30FC               	movlw	252
   975  016D  1903               	skipnz
   976  016E  0244               	subwf	SystemEnterSleep@KeyOldTemp,w
   977  016F  1C03               	skipc
   978  0170  2999               	goto	L3
   979                           
   980                           ;CheckTouchKey.c: 660: {
   981                           ;CheckTouchKey.c: 661: KeyOldTemp = KeyOldValue2[cnt] - KeyResTemp;
   982  0171  1003               	clrc
   983  0172                     L4:	
   984  0172  0D46               	rlf	SystemEnterSleep@cnt,w
   985  0173  3E28               	addlw	(low (_KeyOldValue2| 0))& (0+255)
   986                           
   987                           ;CheckTouchKey.c: 662: if(KeyOldTemp <= 4 || KeyOldTemp >= -4)
   988  0174  21B1               	fcall	PL2	;call to abstracted procedure
   989  0175  1903               	skipnz
   990  0176  0244               	subwf	SystemEnterSleep@KeyOldTemp,w
   991  0177  1C03               	skipc
   992  0178  2981               	goto	L6
   993  0179  30FF               	movlw	255
   994  017A  0245               	subwf	SystemEnterSleep@KeyOldTemp+1,w
   995  017B  30FC               	movlw	252
   996  017C  1903               	skipnz
   997  017D  0244               	subwf	SystemEnterSleep@KeyOldTemp,w
   998  017E  1C03               	skipc
   999  017F  2999               	goto	L3
  1000                           
  1001                           ;CheckTouchKey.c: 663: {
  1002                           ;CheckTouchKey.c: 664: KeyReference[cnt] = (KeyResTemp+KeyOldValue2[cnt])>>1;
  1003  0180  1003               	clrc
  1004  0181                     L6:	
  1005  0181  0D46               	rlf	SystemEnterSleep@cnt,w
  1006  0182  3E28               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1007  0183  21C0               	fcall	PL12	;call to abstracted procedure
  1008  0184  0842               	movf	SystemEnterSleep@KeyResTemp,w
  1009  0185  073A               	addwf	??_SystemEnterSleep,w
  1010  0186  00BC               	movwf	??_SystemEnterSleep+2
  1011  0187  0843               	movf	SystemEnterSleep@KeyResTemp+1,w
  1012  0188  1803               	skipnc
  1013  0189  0A43               	incf	SystemEnterSleep@KeyResTemp+1,w
  1014  018A  073B               	addwf	??_SystemEnterSleep+1,w
  1015  018B  00BD               	movwf	??_SystemEnterSleep+3
  1016  018C  1003               	clrc
  1017  018D  0CBD               	rrf	??_SystemEnterSleep+3,f
  1018  018E  0CBC               	rrf	??_SystemEnterSleep+2,f
  1019  018F  1003               	clrc
  1020  0190  0D46               	rlf	SystemEnterSleep@cnt,w
  1021  0191  3E26               	addlw	(low (_KeyReference| 0))& (0+255)
  1022  0192  0084               	movwf	4
  1023  0193  083C               	movf	??_SystemEnterSleep+2,w
  1024  0194  0080               	movwf	0
  1025  0195  0A84               	incf	4,f
  1026  0196  083D               	movf	??_SystemEnterSleep+3,w
  1027  0197  0080               	movwf	0
  1028                           
  1029                           ;CheckTouchKey.c: 665: }
  1030                           ;CheckTouchKey.c: 666: }
  1031                           ;CheckTouchKey.c: 667: }
  1032                           ;CheckTouchKey.c: 671: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  1033  0198  1003               	clrc
  1034  0199                     L3:	
  1035  0199  0D46               	rlf	SystemEnterSleep@cnt,w
  1036  019A  3E2A               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1037  019B  21C0               	fcall	PL12	;call to abstracted procedure
  1038  019C  1003               	clrc
  1039  019D  0D46               	rlf	SystemEnterSleep@cnt,w
  1040  019E  3E28               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1041                           
  1042                           ;CheckTouchKey.c: 672: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  1043  019F  21C7               	fcall	PL14	;call to abstracted procedure
  1044  01A0  21C0               	fcall	PL12	;call to abstracted procedure
  1045  01A1  1003               	clrc
  1046  01A2  0D46               	rlf	SystemEnterSleep@cnt,w
  1047  01A3  3E2A               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1048                           
  1049                           ;CheckTouchKey.c: 673: KeyOldValue0[cnt] = KeyResTemp;
  1050  01A4  21C7               	fcall	PL14	;call to abstracted procedure
  1051  01A5  0084               	movwf	4
  1052  01A6  0842               	movf	SystemEnterSleep@KeyResTemp,w
  1053  01A7  0080               	movwf	0
  1054  01A8  0A84               	incf	4,f
  1055  01A9  0843               	movf	SystemEnterSleep@KeyResTemp+1,w
  1056  01AA  0080               	movwf	0
  1057  01AB                     l2513:	
  1058                           
  1059                           ;CheckTouchKey.c: 674: }
  1060                           ;CheckTouchKey.c: 675: }
  1061                           ;CheckTouchKey.c: 676: wake <<= 1;
  1062  01AB  1003               	clrc
  1063  01AC  0DC0               	rlf	SystemEnterSleep@wake,f
  1064  01AD  0DC1               	rlf	SystemEnterSleep@wake+1,f
  1065  01AE  0FC6               	incfsz	SystemEnterSleep@cnt,f
  1066  01AF  2900               	goto	l793
  1067  01B0  2922               	goto	l797
  1068  01B1                     __end_of_SystemEnterSleep:	
  1069  01B1                     PL2:	
  1070  01B1  0084               	movwf	4
  1071  01B2  0800               	movf	0,w
  1072  01B3  00C4               	movwf	SystemEnterSleep@KeyOldTemp
  1073  01B4  0A84               	incf	4,f
  1074  01B5  0800               	movf	0,w
  1075  01B6  00C5               	movwf	SystemEnterSleep@KeyOldTemp+1
  1076  01B7  0842               	movf	SystemEnterSleep@KeyResTemp,w
  1077  01B8  02C4               	subwf	SystemEnterSleep@KeyOldTemp,f
  1078  01B9  0843               	movf	SystemEnterSleep@KeyResTemp+1,w
  1079  01BA  1C03               	skipc
  1080  01BB  03C5               	decf	SystemEnterSleep@KeyOldTemp+1,f
  1081  01BC  02C5               	subwf	SystemEnterSleep@KeyOldTemp+1,f
  1082  01BD  3000               	movlw	0
  1083  01BE  0245               	subwf	SystemEnterSleep@KeyOldTemp+1,w
  1084  01BF  3405               	retlw	5
  1085  01C0                     __end_ofPL2:	
  1086  01C0                     PL12:	
  1087  01C0  0084               	movwf	4
  1088  01C1  0800               	movf	0,w
  1089  01C2  00BA               	movwf	??_SystemEnterSleep
  1090  01C3  0A84               	incf	4,f
  1091  01C4  0800               	movf	0,w
  1092  01C5  00BB               	movwf	??_SystemEnterSleep+1
  1093  01C6  0008               	return
  1094  01C7                     __end_ofPL12:	
  1095  01C7                     PL14:	
  1096  01C7  0084               	movwf	4
  1097  01C8  083A               	movf	??_SystemEnterSleep,w
  1098  01C9  0080               	movwf	0
  1099  01CA  0A84               	incf	4,f
  1100  01CB  083B               	movf	??_SystemEnterSleep+1,w
  1101  01CC  0080               	movwf	0
  1102  01CD  1003               	clrc
  1103  01CE  0D46               	rlf	SystemEnterSleep@cnt,w
  1104  01CF  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  1105  01D0  0008               	return
  1106  01D1                     __end_ofPL14:	
  1107  01D1                     PL26:	
  1108  01D1  01C6               	clrf	SystemEnterSleep@cnt
  1109  01D2  01C0               	clrf	SystemEnterSleep@wake
  1110  01D3  0AC0               	incf	SystemEnterSleep@wake,f
  1111  01D4  01C1               	clrf	SystemEnterSleep@wake+1
  1112  01D5  0008               	return
  1113  01D6                     __end_ofPL26:	
  1114                           
  1115                           	psect	text4
  1116  0254                     __ptext4:	
  1117 ;; *************** function _GetTouchKeyValue_Sleep *****************
  1118 ;; Defined at:
  1119 ;;		line 688 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;		None
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;  wake            2    3[COMMON] unsigned int 
  1124 ;;  cnt             1    6[COMMON] unsigned char 
  1125 ;;  temp            1    5[COMMON] unsigned char 
  1126 ;; Return value:  Size  Location     Type
  1127 ;;                  1    wreg      void 
  1128 ;; Registers used:
  1129 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1130 ;; Tracked objects:
  1131 ;;		On entry : 800/0
  1132 ;;		On exit  : 800/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMMON   BANK0   BANK1
  1135 ;;      Params:         0       0       0
  1136 ;;      Locals:         4       0       0
  1137 ;;      Temps:          0       0       0
  1138 ;;      Totals:         4       0       0
  1139 ;;Total ram usage:        4 bytes
  1140 ;; Hardware stack levels used:    1
  1141 ;; Hardware stack levels required when called:    2
  1142 ;; This function calls:
  1143 ;;		_ClearResSum
  1144 ;; This function is called by:
  1145 ;;		_SystemEnterSleep
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149                           
  1150                           ;psect for function _GetTouchKeyValue_Sleep
  1151  0254                     _GetTouchKeyValue_Sleep:	
  1152                           
  1153                           ;CheckTouchKey.c: 690: unsigned char cnt = 0,temp;
  1154                           
  1155                           ;incstack = 0
  1156                           ; Regs used in _GetTouchKeyValue_Sleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  1157  0254  01F6               	clrf	GetTouchKeyValue_Sleep@cnt
  1158                           
  1159                           ;CheckTouchKey.c: 691: unsigned int wake = 1;
  1160  0255  01F3               	clrf	GetTouchKeyValue_Sleep@wake
  1161  0256  0AF3               	incf	GetTouchKeyValue_Sleep@wake,f
  1162  0257  01F4               	clrf	GetTouchKeyValue_Sleep@wake+1
  1163  0258                     l1851:	
  1164                           
  1165                           ;CheckTouchKey.c: 693: {
  1166                           ;CheckTouchKey.c: 694: if((wake && KeyWakeUpEn))
  1167  0258  0873               	movf	GetTouchKeyValue_Sleep@wake,w
  1168  0259  0474               	iorwf	GetTouchKeyValue_Sleep@wake+1,w
  1169  025A  1903               	btfsc	3,2
  1170  025B  2A8B               	goto	l1889
  1171                           
  1172                           ;CheckTouchKey.c: 695: {
  1173                           ;CheckTouchKey.c: 696: KEYCON0 = 0;
  1174  025C  1283               	bcf	3,5	;RP0=0, select bank0
  1175  025D  018C               	clrf	12	;volatile
  1176                           
  1177                           ;CheckTouchKey.c: 697: KEYCON1 = 0;
  1178  025E  018D               	clrf	13	;volatile
  1179                           
  1180                           ;CheckTouchKey.c: 698: KEYCON2 = Table_C_LVBO[cnt] | 0x01;
  1181  025F  0876               	movf	GetTouchKeyValue_Sleep@cnt,w
  1182  0260  3E09               	addlw	low ((_Table_C_LVBO-__stringbase)| (0+32768))
  1183  0261  0084               	movwf	4
  1184  0262  240D               	fcall	stringdir
  1185  0263  3801               	iorlw	1
  1186  0264  0096               	movwf	22	;volatile
  1187                           
  1188                           ;CheckTouchKey.c: 700: KEYCON0 = Table_KeyCap[cnt];
  1189  0265  0876               	movf	GetTouchKeyValue_Sleep@cnt,w
  1190  0266  3E0B               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  1191  0267  0084               	movwf	4
  1192  0268  240D               	fcall	stringdir
  1193  0269  008C               	movwf	12	;volatile
  1194                           
  1195                           ;CheckTouchKey.c: 701: KEYCON1 = Table_KeyChannel[cnt];
  1196  026A  0876               	movf	GetTouchKeyValue_Sleep@cnt,w
  1197  026B  3E0C               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  1198  026C  0084               	movwf	4
  1199  026D  240D               	fcall	stringdir
  1200  026E  008D               	movwf	13	;volatile
  1201                           
  1202                           ;CheckTouchKey.c: 702: INTCON = 0X40;
  1203  026F  3040               	movlw	64
  1204  0270  008B               	movwf	11	;volatile
  1205                           
  1206                           ;CheckTouchKey.c: 703: PIE1 = 1;
  1207  0271  3001               	movlw	1
  1208  0272  009E               	movwf	30	;volatile
  1209                           
  1210                           ;CheckTouchKey.c: 704: PIR1 = 0;
  1211  0273  019D               	clrf	29	;volatile
  1212                           
  1213                           ;CheckTouchKey.c: 705: TRISB5 = 1;
  1214  0274  1687               	bsf	7,5	;volatile
  1215  0275  0000               	nop	;# 
  1216  0276  0000               	nop	;# 
  1217                           
  1218                           ;CheckTouchKey.c: 708: KEYCON0 |= 0x1;
  1219  0277  1283               	bcf	3,5	;RP0=0, select bank0
  1220  0278  140C               	bsf	12,0	;volatile
  1221  0279  0063               	sleep	;# 
  1222  027A  0064               	clrwdt	;# 
  1223                           
  1224                           ;CheckTouchKey.c: 711: PIE1 = 0;
  1225  027B  1283               	bcf	3,5	;RP0=0, select bank0
  1226  027C  019E               	clrf	30	;volatile
  1227                           
  1228                           ;CheckTouchKey.c: 712: PIR1 = 0;
  1229  027D  019D               	clrf	29	;volatile
  1230                           
  1231                           ;CheckTouchKey.c: 714: temp = 0;
  1232  027E  01F5               	clrf	GetTouchKeyValue_Sleep@temp
  1233  027F                     l820:	
  1234                           ;CheckTouchKey.c: 715: while(!(KEYCON0&0x80))
  1235                           
  1236  027F  1B8C               	btfsc	12,7	;volatile
  1237  0280  2A86               	goto	l1883
  1238                           
  1239                           ;CheckTouchKey.c: 716: {
  1240                           ;CheckTouchKey.c: 717: if(0 == (--temp))
  1241  0281  0BF5               	decfsz	GetTouchKeyValue_Sleep@temp,f
  1242  0282  2A7F               	goto	l820
  1243                           
  1244                           ;CheckTouchKey.c: 718: {
  1245                           ;CheckTouchKey.c: 719: KeyCounter = 255;
  1246  0283  30FF               	movlw	255
  1247  0284  00B4               	movwf	_KeyCounter
  1248                           
  1249                           ;CheckTouchKey.c: 720: ClearResSum();
  1250  0285  2C67               	ljmp	l1811
  1251  0286                     l1883:	
  1252                           
  1253                           ;CheckTouchKey.c: 722: }
  1254                           ;CheckTouchKey.c: 723: }
  1255                           ;CheckTouchKey.c: 726: KeyResSum[cnt] += (unsigned int)((KEYDATAH<<8) | KEYDATAL);
  1256  0286  1003               	clrc
  1257  0287  0D76               	rlf	GetTouchKeyValue_Sleep@cnt,w
  1258  0288  2295               	fcall	PL8	;call to abstracted procedure
  1259                           
  1260                           ;CheckTouchKey.c: 727: TRISB5 =0;
  1261  0289  1287               	bcf	7,5	;volatile
  1262                           
  1263                           ;CheckTouchKey.c: 728: RB5 =0;
  1264  028A  1286               	bcf	6,5	;volatile
  1265  028B                     l1889:	
  1266                           
  1267                           ;CheckTouchKey.c: 729: }
  1268                           ;CheckTouchKey.c: 730: wake <<= 1;
  1269  028B  1003               	clrc
  1270  028C  0DF3               	rlf	GetTouchKeyValue_Sleep@wake,f
  1271  028D  0DF4               	rlf	GetTouchKeyValue_Sleep@wake+1,f
  1272  028E  0AF6               	incf	GetTouchKeyValue_Sleep@cnt,f
  1273  028F  1903               	btfsc	3,2
  1274  0290  2A58               	goto	l1851
  1275                           
  1276                           ;CheckTouchKey.c: 732: KEYCON2 = 0;
  1277  0291  1283               	bcf	3,5	;RP0=0, select bank0
  1278  0292  0196               	clrf	22	;volatile
  1279                           
  1280                           ;CheckTouchKey.c: 733: b_ksleep = 0;
  1281  0293  1079               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  1282  0294  0008               	return
  1283  0295                     __end_of_GetTouchKeyValue_Sleep:	
  1284  0295                     PL8:	
  1285  0295  3E2E               	addlw	(low (_KeyResSum| 0))& (0+255)
  1286  0296  0084               	movwf	4
  1287  0297  080E               	movf	14,w	;volatile
  1288  0298  1383               	bcf	3,7	;select IRP bank0
  1289  0299  0780               	addwf	0,f
  1290  029A  0F84               	incfsz	4,f
  1291  029B  0800               	movf	0,w
  1292  029C  1803               	skipnc
  1293  029D  0A00               	incf	0,w
  1294  029E  00FF               	movwf	127
  1295  029F  080F               	movf	15,w	;volatile
  1296  02A0  077F               	addwf	127,w
  1297  02A1  0080               	movwf	0
  1298  02A2  0384               	decf	4,f
  1299  02A3  0008               	return
  1300  02A4                     __end_ofPL8:	
  1301                           
  1302                           	psect	text5
  1303  046F                     __ptext5:	
  1304 ;; *************** function _Refurbish_Sfr *****************
  1305 ;; Defined at:
  1306 ;;		line 55 in file "D:\ÎÒµÄÎÄµµ\Documents\WeChat Files\hmm665544\FileStorage\File\2020-07\GS_01 ´¥Ãþ(1)\GS_01 ´¥Ãþ\GN_1
      +01bt\main.c"
  1307 ;; Parameters:    Size  Location     Type
  1308 ;;		None
  1309 ;; Auto vars:     Size  Location     Type
  1310 ;;		None
  1311 ;; Return value:  Size  Location     Type
  1312 ;;                  1    wreg      void 
  1313 ;; Registers used:
  1314 ;;		wreg, status,2
  1315 ;; Tracked objects:
  1316 ;;		On entry : 0/0
  1317 ;;		On exit  : 100/0
  1318 ;;		Unchanged: 0/0
  1319 ;; Data sizes:     COMMON   BANK0   BANK1
  1320 ;;      Params:         0       0       0
  1321 ;;      Locals:         0       0       0
  1322 ;;      Temps:          0       0       0
  1323 ;;      Totals:         0       0       0
  1324 ;;Total ram usage:        0 bytes
  1325 ;; Hardware stack levels used:    1
  1326 ;; Hardware stack levels required when called:    1
  1327 ;; This function calls:
  1328 ;;		Nothing
  1329 ;; This function is called by:
  1330 ;;		_WorkSleep
  1331 ;;		_main
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           
  1336                           ;psect for function _Refurbish_Sfr
  1337  046F                     _Refurbish_Sfr:	
  1338  046F                     l1897:	
  1339                           ;incstack = 0
  1340                           ; Regs used in _Refurbish_Sfr: [wreg+status,2]
  1341                           
  1342                           
  1343                           ;main.c: 58: INTCON = 0XA0;
  1344  046F  30A0               	movlw	160
  1345  0470  008B               	movwf	11	;volatile
  1346                           
  1347                           ;main.c: 59: TRISB = 0;
  1348  0471  1283               	bcf	3,5	;RP0=0, select bank0
  1349  0472  0187               	clrf	7	;volatile
  1350                           
  1351                           ;main.c: 60: WPUB = 0X10;
  1352  0473  3010               	movlw	16
  1353  0474  0088               	movwf	8	;volatile
  1354  0475  0008               	return
  1355  0476                     __end_of_Refurbish_Sfr:	
  1356                           
  1357                           	psect	text6
  1358  02A4                     __ptext6:	
  1359 ;; *************** function _KeyServer *****************
  1360 ;; Defined at:
  1361 ;;		line 67 in file "D:\ÎÒµÄÎÄµµ\Documents\WeChat Files\hmm665544\FileStorage\File\2020-07\GS_01 ´¥Ãþ(1)\GS_01 ´¥Ãþ\GN_1
      +01bt\main.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;		None
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;  Temp            1    4[COMMON] unsigned char 
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      void 
  1368 ;; Registers used:
  1369 ;;		wreg, status,2, status,0
  1370 ;; Tracked objects:
  1371 ;;		On entry : 100/0
  1372 ;;		On exit  : 100/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMMON   BANK0   BANK1
  1375 ;;      Params:         0       0       0
  1376 ;;      Locals:         1       0       0
  1377 ;;      Temps:          2       0       0
  1378 ;;      Totals:         3       0       0
  1379 ;;Total ram usage:        3 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:    1
  1382 ;; This function calls:
  1383 ;;		Nothing
  1384 ;; This function is called by:
  1385 ;;		_main
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           
  1390                           ;psect for function _KeyServer
  1391  02A4                     _KeyServer:	
  1392                           
  1393                           ;main.c: 69: static unsigned char KeyOldFlag = 0;
  1394                           ;main.c: 70: if(KeyFlag[0])
  1395                           
  1396                           ;incstack = 0
  1397                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  1398  02A4  087A               	movf	_KeyFlag,w	;volatile
  1399  02A5  1903               	btfsc	3,2
  1400  02A6  2AE9               	goto	l2297
  1401                           
  1402                           ;main.c: 71: {
  1403                           ;main.c: 72: if(KeyFlag[0] != KeyOldFlag)
  1404  02A7  087A               	movf	_KeyFlag,w	;volatile
  1405  02A8  0636               	xorwf	KeyServer@KeyOldFlag,w
  1406  02A9  1903               	skipnz
  1407  02AA  0008               	return
  1408                           
  1409                           ;main.c: 73: {
  1410                           ;main.c: 75: KeyOldFlag ^= KeyFlag[0];
  1411  02AB  087A               	movf	_KeyFlag,w	;volatile
  1412  02AC  06B6               	xorwf	KeyServer@KeyOldFlag,f
  1413                           
  1414                           ;main.c: 76: if((KeyOldFlag&0x1) && (KeyFlag[0]&0x1))
  1415  02AD  1836               	btfsc	KeyServer@KeyOldFlag,0
  1416  02AE  1C7A               	btfss	_KeyFlag,0	;volatile
  1417  02AF  2AB4               	goto	l2253
  1418                           
  1419                           ;main.c: 77: {
  1420                           ;main.c: 79: B_OnOff = !B_OnOff;
  1421  02B0  3020               	movlw	(0+1) shl (_B_OnOff& (0+7))
  1422  02B1  06F9               	xorwf	_B_OnOff/(0+8),f
  1423                           
  1424                           ;main.c: 81: pressKey = 1;
  1425  02B2  01B7               	clrf	_pressKey
  1426  02B3  0AB7               	incf	_pressKey,f
  1427  02B4                     l2253:	
  1428                           
  1429                           ;main.c: 82: }
  1430                           ;main.c: 83: if((KeyOldFlag&0x2) && (KeyFlag[0]&0x2))
  1431  02B4  18B6               	btfsc	KeyServer@KeyOldFlag,1
  1432  02B5  1CFA               	btfss	_KeyFlag,1	;volatile
  1433  02B6  2ABA               	goto	l2261
  1434                           
  1435                           ;main.c: 84: {
  1436                           ;main.c: 86: PORTB ^= 0X10;
  1437  02B7  3010               	movlw	16
  1438  02B8  0686               	xorwf	6,f	;volatile
  1439                           
  1440                           ;main.c: 87: B_OnOff = 1;
  1441  02B9  16F9               	bsf	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  1442  02BA                     l2261:	
  1443                           
  1444                           ;main.c: 88: }
  1445                           ;main.c: 89: if((KeyOldFlag&0x4) && (KeyFlag[0]&0x4))
  1446  02BA  1936               	btfsc	KeyServer@KeyOldFlag,2
  1447  02BB  1D7A               	btfss	_KeyFlag,2	;volatile
  1448  02BC  2AE0               	goto	l2287
  1449                           
  1450                           ;main.c: 90: {
  1451                           ;main.c: 92: B_OnOff = 1;
  1452  02BD  16F9               	bsf	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  1453                           
  1454                           ;main.c: 93: PwmData = PwmData+0X10;
  1455  02BE  3010               	movlw	16
  1456  02BF  07C7               	addwf	_PwmData,f	;volatile
  1457  02C0  1803               	skipnc
  1458  02C1  0AC8               	incf	_PwmData+1,f	;volatile
  1459                           
  1460                           ;main.c: 94: PwmData &= 0x03ff;
  1461  02C2  30FF               	movlw	255
  1462  02C3  05C7               	andwf	_PwmData,f	;volatile
  1463  02C4  3003               	movlw	3
  1464  02C5  05C8               	andwf	_PwmData+1,f	;volatile
  1465                           
  1466                           ;main.c: 95: unsigned char Temp=0x40;
  1467  02C6  3040               	movlw	64
  1468  02C7  00F4               	movwf	KeyServer@Temp
  1469                           
  1470                           ;main.c: 97: if(PwmData&0x01)
  1471  02C8  1847               	btfsc	_PwmData,0	;volatile
  1472                           
  1473                           ;main.c: 98: Temp |=0x10;
  1474  02C9  1674               	bsf	KeyServer@Temp,4
  1475                           
  1476                           ;main.c: 99: if(PwmData&0x02)
  1477  02CA  18C7               	btfsc	_PwmData,1	;volatile
  1478                           
  1479                           ;main.c: 100: Temp |=0x20;
  1480  02CB  16F4               	bsf	KeyServer@Temp,5
  1481                           
  1482                           ;main.c: 101: CCPCON = Temp;
  1483  02CC  0874               	movf	KeyServer@Temp,w
  1484  02CD  0094               	movwf	20	;volatile
  1485                           
  1486                           ;main.c: 102: Temp = (PwmData>>2);
  1487  02CE  0848               	movf	_PwmData+1,w	;volatile
  1488  02CF  00F3               	movwf	??_KeyServer+1
  1489  02D0  0847               	movf	_PwmData,w	;volatile
  1490  02D1  00F2               	movwf	??_KeyServer
  1491  02D2  1003               	clrc
  1492  02D3  0CF3               	rrf	??_KeyServer+1,f
  1493  02D4  0CF2               	rrf	??_KeyServer,f
  1494  02D5  1003               	clrc
  1495  02D6  0CF3               	rrf	??_KeyServer+1,f
  1496  02D7  0CF2               	rrf	??_KeyServer,f
  1497  02D8  0872               	movf	??_KeyServer,w
  1498  02D9  00F4               	movwf	KeyServer@Temp
  1499                           
  1500                           ;main.c: 103: CCPR2L = Temp;
  1501  02DA  0095               	movwf	21	;volatile
  1502                           
  1503                           ;main.c: 104: TMR2IF = 0;
  1504  02DB  108B               	bcf	11,1	;volatile
  1505                           
  1506                           ;main.c: 105: T2CON &= 0X04;
  1507  02DC  3004               	movlw	4
  1508  02DD  0591               	andwf	17,f	;volatile
  1509                           
  1510                           ;main.c: 106: TMR2ON = 1;
  1511  02DE  1511               	bsf	17,2	;volatile
  1512                           
  1513                           ;main.c: 107: TRISB4 = 0;
  1514  02DF  1207               	bcf	7,4	;volatile
  1515  02E0                     l2287:	
  1516                           
  1517                           ;main.c: 109: }
  1518                           ;main.c: 110: if((KeyOldFlag&0x8) && (KeyFlag[0]&0x8))
  1519  02E0  19B6               	btfsc	KeyServer@KeyOldFlag,3
  1520  02E1  1DFA               	btfss	_KeyFlag,3	;volatile
  1521  02E2  2AE6               	goto	l2295
  1522                           
  1523                           ;main.c: 111: {
  1524                           ;main.c: 113: PORTB ^= 0X10;
  1525  02E3  3010               	movlw	16
  1526  02E4  0686               	xorwf	6,f	;volatile
  1527                           
  1528                           ;main.c: 114: B_OnOff = 1;
  1529  02E5  16F9               	bsf	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  1530  02E6                     l2295:	
  1531                           
  1532                           ;main.c: 115: }
  1533                           ;main.c: 117: KeyOldFlag = KeyFlag[0];
  1534  02E6  087A               	movf	_KeyFlag,w	;volatile
  1535  02E7  00B6               	movwf	KeyServer@KeyOldFlag
  1536  02E8  0008               	return
  1537  02E9                     l2297:	
  1538                           
  1539                           ;main.c: 120: else
  1540                           ;main.c: 121: {
  1541                           ;main.c: 122: KeyOldFlag = 0;
  1542  02E9  01B6               	clrf	KeyServer@KeyOldFlag
  1543                           
  1544                           ;main.c: 123: pressKey = 0;
  1545  02EA  01B7               	clrf	_pressKey
  1546  02EB  0008               	return
  1547  02EC                     __end_of_KeyServer:	
  1548                           
  1549                           	psect	text7
  1550  037F                     __ptext7:	
  1551 ;; *************** function _Init_System *****************
  1552 ;; Defined at:
  1553 ;;		line 16 in file "D:\ÎÒµÄÎÄµµ\Documents\WeChat Files\hmm665544\FileStorage\File\2020-07\GS_01 ´¥Ãþ(1)\GS_01 ´¥Ãþ\GN_1
      +01bt\main.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;		None
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;		None
  1558 ;; Return value:  Size  Location     Type
  1559 ;;                  1    wreg      void 
  1560 ;; Registers used:
  1561 ;;		wreg, status,2, status,0
  1562 ;; Tracked objects:
  1563 ;;		On entry : B00/0
  1564 ;;		On exit  : 100/0
  1565 ;;		Unchanged: 0/0
  1566 ;; Data sizes:     COMMON   BANK0   BANK1
  1567 ;;      Params:         0       0       0
  1568 ;;      Locals:         0       0       0
  1569 ;;      Temps:          0       0       0
  1570 ;;      Totals:         0       0       0
  1571 ;;Total ram usage:        0 bytes
  1572 ;; Hardware stack levels used:    1
  1573 ;; Hardware stack levels required when called:    1
  1574 ;; This function calls:
  1575 ;;		Nothing
  1576 ;; This function is called by:
  1577 ;;		_main
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           
  1582                           ;psect for function _Init_System
  1583  037F                     _Init_System:	
  1584                           
  1585                           ;incstack = 0
  1586                           ; Regs used in _Init_System: [wreg+status,2+status,0]
  1587  037F  0000               	nop	;# 
  1588  0380  0064               	clrwdt	;# 
  1589                           
  1590                           ;main.c: 20: OPTION_REG |= 0x07;
  1591  0381  3007               	movlw	7
  1592  0382  1283               	bcf	3,5	;RP0=0, select bank0
  1593  0383  0485               	iorwf	5,f	;volatile
  1594                           
  1595                           ;main.c: 22: OPTION_REG |= 0x08;
  1596  0384  1585               	bsf	5,3	;volatile
  1597  0385  0064               	clrwdt	;# 
  1598  0386  3009               	movlw	9
  1599  0387  1283               	bcf	3,5	;RP0=0, select bank0
  1600  0388  0085               	movwf	5	;volatile
  1601  0389  0064               	clrwdt	;# 
  1602                           
  1603                           ;main.c: 28: INTCON = 0;
  1604  038A  018B               	clrf	11	;volatile
  1605                           
  1606                           ;main.c: 29: OSCCON = 0X70;
  1607  038B  3070               	movlw	112
  1608  038C  1283               	bcf	3,5	;RP0=0, select bank0
  1609  038D  0097               	movwf	23	;volatile
  1610                           
  1611                           ;main.c: 31: PORTB = 0;
  1612  038E  0186               	clrf	6	;volatile
  1613                           
  1614                           ;main.c: 32: TRISB = 0;
  1615  038F  0187               	clrf	7	;volatile
  1616                           
  1617                           ;main.c: 33: PORTB = 0X10;
  1618  0390  3010               	movlw	16
  1619  0391  0086               	movwf	6	;volatile
  1620                           
  1621                           ;main.c: 34: WPUB = 0X10;
  1622  0392  0088               	movwf	8	;volatile
  1623                           
  1624                           ;main.c: 36: WPDB = 0;
  1625  0393  0198               	clrf	24	;volatile
  1626                           
  1627                           ;main.c: 40: TMR0 = 6;
  1628  0394  3006               	movlw	6
  1629  0395  0081               	movwf	1	;volatile
  1630                           
  1631                           ;main.c: 41: INTCON = 0XA0;
  1632  0396  30A0               	movlw	160
  1633  0397  008B               	movwf	11	;volatile
  1634                           
  1635                           ;main.c: 43: PwmData = 0xF0;
  1636  0398  30F0               	movlw	240
  1637  0399  00C7               	movwf	_PwmData	;volatile
  1638  039A  01C8               	clrf	_PwmData+1	;volatile
  1639                           
  1640                           ;main.c: 44: PR2 =0XFF;
  1641  039B  30FF               	movlw	255
  1642  039C  0092               	movwf	18	;volatile
  1643  039D  0008               	return
  1644  039E                     __end_of_Init_System:	
  1645                           
  1646                           	psect	text8
  1647  035B                     __ptext8:	
  1648 ;; *************** function _CheckTouchKey *****************
  1649 ;; Defined at:
  1650 ;;		line 523 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;		None
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;		None
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      void 
  1657 ;; Registers used:
  1658 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1659 ;; Tracked objects:
  1660 ;;		On entry : 100/0
  1661 ;;		On exit  : 100/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMMON   BANK0   BANK1
  1664 ;;      Params:         0       0       0
  1665 ;;      Locals:         0       0       0
  1666 ;;      Temps:          0       0       0
  1667 ;;      Totals:         0       0       0
  1668 ;;Total ram usage:        0 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    5
  1671 ;; This function calls:
  1672 ;;		_CheckKeyOldValue
  1673 ;;		_CheckOnceResult
  1674 ;;		_CheckValidTime
  1675 ;;		_ClearResSum
  1676 ;;		_GetTouchKeyValue
  1677 ;;		_KeyStopClear
  1678 ;;		_TurnKeyFlags
  1679 ;; This function is called by:
  1680 ;;		_main
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           
  1685                           ;psect for function _CheckTouchKey
  1686  035B                     _CheckTouchKey:	
  1687                           
  1688                           ;CheckTouchKey.c: 525: if(!b_kover)
  1689                           
  1690                           ;incstack = 0
  1691                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1692  035B  1A79               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1693  035C  2B67               	goto	l781
  1694                           
  1695                           ;CheckTouchKey.c: 526: {
  1696                           ;CheckTouchKey.c: 528: GetTouchKeyValue();
  1697  035D  22EC               	fcall	_GetTouchKeyValue
  1698                           
  1699                           ;CheckTouchKey.c: 529: if(++KeyCounter >= 8)
  1700  035E  3008               	movlw	8
  1701  035F  1283               	bcf	3,5	;RP0=0, select bank0
  1702  0360  0AB4               	incf	_KeyCounter,f
  1703  0361  0234               	subwf	_KeyCounter,w
  1704  0362  1C03               	skipc
  1705  0363  2B7E               	goto	l2709
  1706                           
  1707                           ;CheckTouchKey.c: 530: {
  1708                           ;CheckTouchKey.c: 531: KeyCounter = 0;
  1709  0364  01B4               	clrf	_KeyCounter
  1710                           
  1711                           ;CheckTouchKey.c: 532: b_kover = 1;
  1712  0365  1679               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1713  0366  2B7E               	goto	l2709
  1714  0367                     l781:	
  1715                           
  1716                           ;CheckTouchKey.c: 535: else if(!b_kover1)
  1717  0367  19F9               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1718  0368  2B7A               	goto	l2703
  1719                           
  1720                           ;CheckTouchKey.c: 536: {
  1721                           ;CheckTouchKey.c: 538: CheckOnceResult();
  1722  0369  2017               	fcall	_CheckOnceResult
  1723                           
  1724                           ;CheckTouchKey.c: 541: TurnKeyFlags();
  1725  036A  232C               	fcall	_TurnKeyFlags
  1726                           
  1727                           ;CheckTouchKey.c: 542: b_kover1 = 1;
  1728  036B  15F9               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1729                           
  1730                           ;CheckTouchKey.c: 548: if(b_kerr || KeyCounter > KeyValidNumber)
  1731  036C  18F9               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1732  036D  2B73               	goto	l2693
  1733  036E  3002               	movlw	2
  1734  036F  1283               	bcf	3,5	;RP0=0, select bank0
  1735  0370  0234               	subwf	_KeyCounter,w
  1736  0371  1C03               	skipc
  1737  0372  2B77               	goto	l2701
  1738  0373                     l2693:	
  1739                           
  1740                           ;CheckTouchKey.c: 549: {
  1741                           ;CheckTouchKey.c: 550: KeyStopClear();
  1742  0373  23E5               	fcall	_KeyStopClear
  1743                           
  1744                           ;CheckTouchKey.c: 551: b_kerr = 0;
  1745  0374  10F9               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1746                           
  1747                           ;CheckTouchKey.c: 552: b_kover = 0;
  1748  0375  1279               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1749                           
  1750                           ;CheckTouchKey.c: 553: b_kover1 = 0;
  1751  0376  11F9               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1752  0377                     l2701:	
  1753                           
  1754                           ;CheckTouchKey.c: 554: }
  1755                           ;CheckTouchKey.c: 555: KeyCounter = 0;
  1756  0377  1283               	bcf	3,5	;RP0=0, select bank0
  1757  0378  01B4               	clrf	_KeyCounter
  1758                           
  1759                           ;CheckTouchKey.c: 556: }
  1760  0379  2B7E               	goto	l2709
  1761  037A                     l2703:	
  1762                           
  1763                           ;CheckTouchKey.c: 557: else
  1764                           ;CheckTouchKey.c: 558: {
  1765                           ;CheckTouchKey.c: 560: CheckKeyOldValue();
  1766  037A  21D6               	fcall	_CheckKeyOldValue
  1767                           
  1768                           ;CheckTouchKey.c: 562: ClearResSum();
  1769  037B  2467               	fcall	_ClearResSum
  1770                           
  1771                           ;CheckTouchKey.c: 564: b_kover = 0;
  1772  037C  1279               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1773                           
  1774                           ;CheckTouchKey.c: 565: b_kover1 = 0;
  1775  037D  11F9               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1776  037E                     l2709:	
  1777                           
  1778                           ;CheckTouchKey.c: 566: }
  1779                           ;CheckTouchKey.c: 568: CheckValidTime();
  1780  037E  2BF9               	ljmp	l2199
  1781  037F                     __end_of_CheckTouchKey:	
  1782                           
  1783                           	psect	text9
  1784  032C                     __ptext9:	
  1785 ;; *************** function _TurnKeyFlags *****************
  1786 ;; Defined at:
  1787 ;;		line 410 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;		None
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;		None
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  1    wreg      void 
  1794 ;; Registers used:
  1795 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1796 ;; Tracked objects:
  1797 ;;		On entry : 900/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMMON   BANK0   BANK1
  1801 ;;      Params:         0       0       0
  1802 ;;      Locals:         0       0       0
  1803 ;;      Temps:          0       0       0
  1804 ;;      Totals:         0       0       0
  1805 ;;Total ram usage:        0 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    4
  1808 ;; This function calls:
  1809 ;;		_KeyClearIn
  1810 ;; This function is called by:
  1811 ;;		_CheckTouchKey
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           
  1816                           ;psect for function _TurnKeyFlags
  1817  032C                     _TurnKeyFlags:	
  1818                           
  1819                           ;CheckTouchKey.c: 412: static unsigned char KeyHaveTimes = 0;
  1820                           ;CheckTouchKey.c: 413: static unsigned char KeyNoTimes = 0;
  1821                           ;CheckTouchKey.c: 415: if(KeyData[0] | KeyData[1])
  1822                           
  1823                           ;incstack = 0
  1824                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1825  032C  0823               	movf	_KeyData+1,w	;volatile
  1826  032D  0422               	iorwf	_KeyData,w	;volatile
  1827  032E  1903               	btfsc	3,2
  1828  032F  2B4E               	goto	l2651
  1829                           
  1830                           ;CheckTouchKey.c: 416: {
  1831                           ;CheckTouchKey.c: 417: KeyNoTimes = 0;
  1832  0330  01B0               	clrf	TurnKeyFlags@KeyNoTimes
  1833                           
  1834                           ;CheckTouchKey.c: 419: if(KeyData[0] == KeyOldData[0] && KeyData[1] == KeyOldData[1])
  1835  0331  0822               	movf	_KeyData,w	;volatile
  1836  0332  0624               	xorwf	_KeyOldData,w	;volatile
  1837  0333  1D03               	skipz
  1838  0334  2B47               	goto	l762
  1839  0335  0823               	movf	_KeyData+1,w	;volatile
  1840  0336  0625               	xorwf	_KeyOldData+1,w	;volatile
  1841  0337  1D03               	skipz
  1842  0338  2B47               	goto	l762
  1843  0339  3002               	movlw	2
  1844  033A  0AB1               	incf	TurnKeyFlags@KeyHaveTimes,f
  1845  033B  0231               	subwf	TurnKeyFlags@KeyHaveTimes,w
  1846  033C  1C03               	skipc
  1847  033D  0008               	return
  1848                           
  1849                           ;CheckTouchKey.c: 422: {
  1850                           ;CheckTouchKey.c: 423: KeyHaveTimes = 0;
  1851  033E  01B1               	clrf	TurnKeyFlags@KeyHaveTimes
  1852                           
  1853                           ;CheckTouchKey.c: 424: KeyFlag[0] = KeyData[0];
  1854  033F  0822               	movf	_KeyData,w	;volatile
  1855  0340  00FA               	movwf	_KeyFlag	;volatile
  1856                           
  1857                           ;CheckTouchKey.c: 425: KeyFlag[1] = KeyData[1];
  1858  0341  0823               	movf	_KeyData+1,w	;volatile
  1859  0342  00FB               	movwf	_KeyFlag+1	;volatile
  1860                           
  1861                           ;CheckTouchKey.c: 428: {
  1862                           ;CheckTouchKey.c: 429: if(!b_kclr)
  1863  0343  1979               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  1864  0344  0008               	return
  1865                           
  1866                           ;CheckTouchKey.c: 430: {
  1867                           ;CheckTouchKey.c: 431: b_kclr = 1;
  1868  0345  1579               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  1869                           
  1870                           ;CheckTouchKey.c: 432: KeyClearIn();
  1871  0346  2C3B               	ljmp	l2401
  1872  0347                     l762:	
  1873                           
  1874                           ;CheckTouchKey.c: 437: else
  1875                           ;CheckTouchKey.c: 438: {
  1876                           ;CheckTouchKey.c: 439: b_kclr = 0;
  1877  0347  1179               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  1878                           
  1879                           ;CheckTouchKey.c: 440: KeyOldData[0] = KeyData[0];
  1880  0348  0822               	movf	_KeyData,w	;volatile
  1881  0349  00A4               	movwf	_KeyOldData	;volatile
  1882                           
  1883                           ;CheckTouchKey.c: 441: KeyOldData[1] = KeyData[1];
  1884  034A  0823               	movf	_KeyData+1,w	;volatile
  1885  034B  00A5               	movwf	_KeyOldData+1	;volatile
  1886                           
  1887                           ;CheckTouchKey.c: 442: KeyHaveTimes = 0;
  1888  034C  01B1               	clrf	TurnKeyFlags@KeyHaveTimes
  1889                           
  1890                           ;CheckTouchKey.c: 443: }
  1891                           ;CheckTouchKey.c: 444: }
  1892  034D  0008               	return
  1893  034E                     l2651:	
  1894                           
  1895                           ;CheckTouchKey.c: 445: else
  1896                           ;CheckTouchKey.c: 446: {
  1897                           ;CheckTouchKey.c: 447: KeyHaveTimes = 0;
  1898  034E  01B1               	clrf	TurnKeyFlags@KeyHaveTimes
  1899                           
  1900                           ;CheckTouchKey.c: 448: KeyOldData[0] = 0;
  1901  034F  01A4               	clrf	_KeyOldData	;volatile
  1902                           
  1903                           ;CheckTouchKey.c: 449: KeyOldData[1] = 0;
  1904  0350  01A5               	clrf	_KeyOldData+1	;volatile
  1905                           
  1906                           ;CheckTouchKey.c: 451: if(++KeyNoTimes >=2)
  1907  0351  3002               	movlw	2
  1908  0352  0AB0               	incf	TurnKeyFlags@KeyNoTimes,f
  1909  0353  0230               	subwf	TurnKeyFlags@KeyNoTimes,w
  1910  0354  1C03               	skipc
  1911  0355  0008               	return
  1912                           
  1913                           ;CheckTouchKey.c: 452: {
  1914                           ;CheckTouchKey.c: 453: KeyNoTimes = 0;
  1915  0356  01B0               	clrf	TurnKeyFlags@KeyNoTimes
  1916                           
  1917                           ;CheckTouchKey.c: 454: KeyFlag[0] = 0;
  1918  0357  01FA               	clrf	_KeyFlag	;volatile
  1919                           
  1920                           ;CheckTouchKey.c: 455: KeyFlag[1] = 0;
  1921  0358  01FB               	clrf	_KeyFlag+1	;volatile
  1922                           
  1923                           ;CheckTouchKey.c: 457: b_kclr = 0;
  1924  0359  1179               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  1925  035A  0008               	return
  1926  035B                     __end_of_TurnKeyFlags:	
  1927                           
  1928                           	psect	text10
  1929  043B                     __ptext10:	
  1930 ;; *************** function _KeyClearIn *****************
  1931 ;; Defined at:
  1932 ;;		line 97 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;		None
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;  cnt             1    4[COMMON] unsigned char 
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 900/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMMON   BANK0   BANK1
  1946 ;;      Params:         0       0       0
  1947 ;;      Locals:         1       0       0
  1948 ;;      Temps:          0       0       0
  1949 ;;      Totals:         1       0       0
  1950 ;;Total ram usage:        1 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    3
  1953 ;; This function calls:
  1954 ;;		_KeyClearOne
  1955 ;;		_KeyIsIn
  1956 ;; This function is called by:
  1957 ;;		_TurnKeyFlags
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           
  1962                           ;psect for function _KeyClearIn
  1963  043B                     _KeyClearIn:	
  1964  043B                     l2401:	
  1965                           ;incstack = 0
  1966                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1967                           
  1968                           
  1969                           ;CheckTouchKey.c: 99: unsigned char cnt;
  1970                           ;CheckTouchKey.c: 100: for(cnt=0;cnt < KeyTotalNumber;cnt++)
  1971  043B  01F4               	clrf	KeyClearIn@cnt
  1972  043C                     l2407:	
  1973                           
  1974                           ;CheckTouchKey.c: 101: {
  1975                           ;CheckTouchKey.c: 102: if(!KeyIsIn(cnt))
  1976  043C  0874               	movf	KeyClearIn@cnt,w
  1977  043D  242D               	fcall	_KeyIsIn
  1978  043E  3A00               	xorlw	0
  1979  043F  1D03               	skipz
  1980  0440  2C43               	goto	l2411
  1981                           
  1982                           ;CheckTouchKey.c: 103: {
  1983                           ;CheckTouchKey.c: 104: KeyClearOne(cnt);
  1984  0441  0874               	movf	KeyClearIn@cnt,w
  1985  0442  239E               	fcall	_KeyClearOne
  1986  0443                     l2411:	
  1987  0443  0AF4               	incf	KeyClearIn@cnt,f
  1988  0444  0874               	movf	KeyClearIn@cnt,w
  1989  0445  1D03               	btfss	3,2
  1990  0446  0008               	return
  1991  0447  2C3C               	goto	l2407
  1992  0448                     __end_of_KeyClearIn:	
  1993                           
  1994                           	psect	text11
  1995  03E5                     __ptext11:	
  1996 ;; *************** function _KeyStopClear *****************
  1997 ;; Defined at:
  1998 ;;		line 116 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;		None
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;  i               1    3[COMMON] unsigned char 
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  1    wreg      void 
  2005 ;; Registers used:
  2006 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 800/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMMON   BANK0   BANK1
  2012 ;;      Params:         0       0       0
  2013 ;;      Locals:         1       0       0
  2014 ;;      Temps:          0       0       0
  2015 ;;      Totals:         1       0       0
  2016 ;;Total ram usage:        1 bytes
  2017 ;; Hardware stack levels used:    1
  2018 ;; Hardware stack levels required when called:    2
  2019 ;; This function calls:
  2020 ;;		_KeyClearOne
  2021 ;; This function is called by:
  2022 ;;		_CheckTouchKey
  2023 ;; This function uses a non-reentrant model
  2024 ;;
  2025                           
  2026                           
  2027                           ;psect for function _KeyStopClear
  2028  03E5                     _KeyStopClear:	
  2029                           
  2030                           ;CheckTouchKey.c: 118: unsigned char i;
  2031                           ;CheckTouchKey.c: 119: KeyFlag[0] = 0;
  2032                           
  2033                           ;incstack = 0
  2034                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2035  03E5  01FA               	clrf	_KeyFlag	;volatile
  2036                           
  2037                           ;CheckTouchKey.c: 120: KeyFlag[1] = 0;
  2038  03E6  01FB               	clrf	_KeyFlag+1	;volatile
  2039                           
  2040                           ;CheckTouchKey.c: 121: for(i = 0; i < KeyTotalNumber; i++)
  2041  03E7  01F3               	clrf	KeyStopClear@i
  2042  03E8                     l2011:	
  2043                           
  2044                           ;CheckTouchKey.c: 122: {
  2045                           ;CheckTouchKey.c: 123: KeyResSum[i] = 0;
  2046  03E8  1003               	clrc
  2047  03E9  0D73               	rlf	KeyStopClear@i,w
  2048  03EA  3E2E               	addlw	(low (_KeyResSum| 0))& (0+255)
  2049  03EB  23F3               	fcall	PL20	;call to abstracted procedure
  2050                           
  2051                           ;CheckTouchKey.c: 124: KeyClearOne(i);
  2052  03EC  0873               	movf	KeyStopClear@i,w
  2053  03ED  239E               	fcall	_KeyClearOne
  2054  03EE  0AF3               	incf	KeyStopClear@i,f
  2055  03EF  0873               	movf	KeyStopClear@i,w
  2056  03F0  1D03               	btfss	3,2
  2057  03F1  0008               	return
  2058  03F2  2BE8               	goto	l2011
  2059  03F3                     __end_of_KeyStopClear:	
  2060  03F3                     PL20:	
  2061  03F3  0084               	movwf	4
  2062  03F4  1383               	bcf	3,7	;select IRP bank0
  2063  03F5  0180               	clrf	0
  2064  03F6  0A84               	incf	4,f
  2065  03F7  0180               	clrf	0
  2066  03F8  0008               	return
  2067  03F9                     __end_ofPL20:	
  2068                           
  2069                           	psect	text12
  2070  02EC                     __ptext12:	
  2071 ;; *************** function _GetTouchKeyValue *****************
  2072 ;; Defined at:
  2073 ;;		line 189 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;		None
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;  wake            2    3[COMMON] unsigned int 
  2078 ;;  cnt             1    6[COMMON] unsigned char 
  2079 ;;  temp            1    5[COMMON] unsigned char 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      void 
  2082 ;; Registers used:
  2083 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : 100/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMMON   BANK0   BANK1
  2089 ;;      Params:         0       0       0
  2090 ;;      Locals:         4       0       0
  2091 ;;      Temps:          0       0       0
  2092 ;;      Totals:         4       0       0
  2093 ;;Total ram usage:        4 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    2
  2096 ;; This function calls:
  2097 ;;		_ClearResSum
  2098 ;; This function is called by:
  2099 ;;		_CheckTouchKey
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           
  2104                           ;psect for function _GetTouchKeyValue
  2105  02EC                     _GetTouchKeyValue:	
  2106                           
  2107                           ;CheckTouchKey.c: 191: unsigned char cnt = 0,temp;
  2108                           
  2109                           ;incstack = 0
  2110                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2111  02EC  01F6               	clrf	GetTouchKeyValue@cnt
  2112                           
  2113                           ;CheckTouchKey.c: 192: unsigned int wake = 1;
  2114  02ED  01F3               	clrf	GetTouchKeyValue@wake
  2115  02EE  0AF3               	incf	GetTouchKeyValue@wake,f
  2116  02EF  01F4               	clrf	GetTouchKeyValue@wake+1
  2117  02F0                     l2023:	
  2118  02F0  1C79               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  2119  02F1  2AF4               	goto	l2027
  2120  02F2  1C73               	btfss	GetTouchKeyValue@wake,0
  2121  02F3  2B24               	goto	l2053
  2122  02F4                     l2027:	
  2123                           
  2124                           ;CheckTouchKey.c: 196: {
  2125                           ;CheckTouchKey.c: 197: KEYCON0 = 0;
  2126  02F4  018C               	clrf	12	;volatile
  2127                           
  2128                           ;CheckTouchKey.c: 198: KEYCON1 = 0;
  2129  02F5  018D               	clrf	13	;volatile
  2130                           
  2131                           ;CheckTouchKey.c: 199: KEYCON2 = Table_C_LVBO[cnt] | 0x01;
  2132  02F6  0876               	movf	GetTouchKeyValue@cnt,w
  2133  02F7  3E09               	addlw	low ((_Table_C_LVBO-__stringbase)| (0+32768))
  2134  02F8  0084               	movwf	4
  2135  02F9  240D               	fcall	stringdir
  2136  02FA  3801               	iorlw	1
  2137  02FB  0096               	movwf	22	;volatile
  2138                           
  2139                           ;CheckTouchKey.c: 201: TRISB5 = 0;
  2140  02FC  1287               	bcf	7,5	;volatile
  2141                           
  2142                           ;CheckTouchKey.c: 202: RB5 = 0;
  2143  02FD  1286               	bcf	6,5	;volatile
  2144  02FE  0000               	nop	;# 
  2145  02FF  0000               	nop	;# 
  2146  0300  0000               	nop	;# 
  2147  0301  0000               	nop	;# 
  2148  0302  0000               	nop	;# 
  2149  0303  0000               	nop	;# 
  2150  0304  0000               	nop	;# 
  2151  0305  0000               	nop	;# 
  2152  0306  0000               	nop	;# 
  2153  0307  0000               	nop	;# 
  2154  0308  0000               	nop	;# 
  2155                           
  2156                           ;CheckTouchKey.c: 215: TRISB5 = 1;
  2157  0309  1283               	bcf	3,5	;RP0=0, select bank0
  2158  030A  1687               	bsf	7,5	;volatile
  2159                           
  2160                           ;CheckTouchKey.c: 217: KEYCON0 = Table_KeyCap[cnt];
  2161  030B  0876               	movf	GetTouchKeyValue@cnt,w
  2162  030C  3E0B               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  2163  030D  0084               	movwf	4
  2164  030E  240D               	fcall	stringdir
  2165  030F  008C               	movwf	12	;volatile
  2166                           
  2167                           ;CheckTouchKey.c: 218: KEYCON1 = Table_KeyChannel[cnt];
  2168  0310  0876               	movf	GetTouchKeyValue@cnt,w
  2169  0311  3E0C               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  2170  0312  0084               	movwf	4
  2171  0313  240D               	fcall	stringdir
  2172  0314  008D               	movwf	13	;volatile
  2173  0315  0000               	nop	;# 
  2174  0316  0000               	nop	;# 
  2175                           
  2176                           ;CheckTouchKey.c: 221: KEYCON0 |= 0x1;
  2177  0317  1283               	bcf	3,5	;RP0=0, select bank0
  2178  0318  140C               	bsf	12,0	;volatile
  2179                           
  2180                           ;CheckTouchKey.c: 223: temp = 0;
  2181  0319  01F5               	clrf	GetTouchKeyValue@temp
  2182  031A                     l703:	
  2183                           ;CheckTouchKey.c: 224: while(!(KEYCON0&0x80))
  2184                           
  2185  031A  1B8C               	btfsc	12,7	;volatile
  2186  031B  2B21               	goto	l2051
  2187                           
  2188                           ;CheckTouchKey.c: 225: {
  2189                           ;CheckTouchKey.c: 226: if(0 == (--temp))
  2190  031C  0BF5               	decfsz	GetTouchKeyValue@temp,f
  2191  031D  2B1A               	goto	l703
  2192                           
  2193                           ;CheckTouchKey.c: 227: {
  2194                           ;CheckTouchKey.c: 228: KeyCounter = 255;
  2195  031E  30FF               	movlw	255
  2196  031F  00B4               	movwf	_KeyCounter
  2197                           
  2198                           ;CheckTouchKey.c: 229: ClearResSum();
  2199  0320  2C67               	ljmp	l1811
  2200  0321                     l2051:	
  2201                           
  2202                           ;CheckTouchKey.c: 231: }
  2203                           ;CheckTouchKey.c: 232: }
  2204                           ;CheckTouchKey.c: 234: KeyResSum[cnt] += (unsigned int)((KEYDATAH<<8) | KEYDATAL);
  2205  0321  1003               	clrc
  2206  0322  0D76               	rlf	GetTouchKeyValue@cnt,w
  2207  0323  2295               	fcall	PL8	;call to abstracted procedure
  2208  0324                     l2053:	
  2209                           
  2210                           ;CheckTouchKey.c: 235: }
  2211                           ;CheckTouchKey.c: 236: wake <<= 1;
  2212  0324  1003               	clrc
  2213  0325  0DF3               	rlf	GetTouchKeyValue@wake,f
  2214  0326  0DF4               	rlf	GetTouchKeyValue@wake+1,f
  2215  0327  0AF6               	incf	GetTouchKeyValue@cnt,f
  2216  0328  1903               	btfsc	3,2
  2217  0329  2AF0               	goto	l2023
  2218                           
  2219                           ;CheckTouchKey.c: 238: b_ksleep = 0;
  2220  032A  1079               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  2221  032B  0008               	return
  2222  032C                     __end_of_GetTouchKeyValue:	
  2223                           
  2224                           	psect	text13
  2225  0467                     __ptext13:	
  2226 ;; *************** function _ClearResSum *****************
  2227 ;; Defined at:
  2228 ;;		line 135 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  2229 ;; Parameters:    Size  Location     Type
  2230 ;;		None
  2231 ;; Auto vars:     Size  Location     Type
  2232 ;;  cnt             1    2[COMMON] unsigned char 
  2233 ;; Return value:  Size  Location     Type
  2234 ;;                  1    wreg      void 
  2235 ;; Registers used:
  2236 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2237 ;; Tracked objects:
  2238 ;;		On entry : 0/0
  2239 ;;		On exit  : 800/0
  2240 ;;		Unchanged: 0/0
  2241 ;; Data sizes:     COMMON   BANK0   BANK1
  2242 ;;      Params:         0       0       0
  2243 ;;      Locals:         1       0       0
  2244 ;;      Temps:          0       0       0
  2245 ;;      Totals:         1       0       0
  2246 ;;Total ram usage:        1 bytes
  2247 ;; Hardware stack levels used:    1
  2248 ;; Hardware stack levels required when called:    1
  2249 ;; This function calls:
  2250 ;;		Nothing
  2251 ;; This function is called by:
  2252 ;;		_GetTouchKeyValue
  2253 ;;		_CheckTouchKey
  2254 ;;		_SystemEnterSleep
  2255 ;;		_GetTouchKeyValue_Sleep
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           
  2260                           ;psect for function _ClearResSum
  2261  0467                     _ClearResSum:	
  2262  0467                     l1811:	
  2263                           ;incstack = 0
  2264                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  2265                           
  2266                           
  2267                           ;CheckTouchKey.c: 137: unsigned char cnt = 0;
  2268  0467  01F2               	clrf	ClearResSum@cnt
  2269  0468                     l1813:	
  2270                           
  2271                           ;CheckTouchKey.c: 139: {
  2272                           ;CheckTouchKey.c: 140: KeyResSum[cnt] = 0;
  2273  0468  1003               	clrc
  2274  0469  0D72               	rlf	ClearResSum@cnt,w
  2275  046A  3E2E               	addlw	(low (_KeyResSum| 0))& (0+255)
  2276  046B  23F3               	fcall	PL20	;call to abstracted procedure
  2277  046C  0FF2               	incfsz	ClearResSum@cnt,f
  2278  046D  0008               	return
  2279  046E  2C68               	goto	l1813
  2280  046F                     __end_of_ClearResSum:	
  2281                           
  2282                           	psect	text14
  2283  03F9                     __ptext14:	
  2284 ;; *************** function _CheckValidTime *****************
  2285 ;; Defined at:
  2286 ;;		line 495 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;		None
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;		None
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  1    wreg      void 
  2293 ;; Registers used:
  2294 ;;		wreg, status,2, status,0
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 100/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMMON   BANK0   BANK1
  2300 ;;      Params:         0       0       0
  2301 ;;      Locals:         0       0       0
  2302 ;;      Temps:          0       0       0
  2303 ;;      Totals:         0       0       0
  2304 ;;Total ram usage:        0 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; Hardware stack levels required when called:    1
  2307 ;; This function calls:
  2308 ;;		Nothing
  2309 ;; This function is called by:
  2310 ;;		_CheckTouchKey
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           
  2315                           ;psect for function _CheckValidTime
  2316  03F9                     _CheckValidTime:	
  2317  03F9                     l2199:	
  2318                           ;incstack = 0
  2319                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  2320                           
  2321                           
  2322                           ;CheckTouchKey.c: 500: {
  2323                           ;CheckTouchKey.c: 501: if(KeyFlag[0] | KeyFlag[1])
  2324  03F9  087B               	movf	_KeyFlag+1,w	;volatile
  2325  03FA  047A               	iorwf	_KeyFlag,w	;volatile
  2326  03FB  1283               	bcf	3,5	;RP0=0, select bank0
  2327  03FC  1903               	btfsc	3,2
  2328  03FD  2C0A               	goto	L8
  2329  03FE  0AA0               	incf	CheckValidTime@validtime,f
  2330  03FF  1903               	skipnz
  2331  0400  0AA1               	incf	CheckValidTime@validtime+1,f
  2332  0401  303A               	movlw	58
  2333  0402  0221               	subwf	CheckValidTime@validtime+1,w
  2334  0403  3098               	movlw	152
  2335  0404  1903               	skipnz
  2336  0405  0220               	subwf	CheckValidTime@validtime,w
  2337  0406  1C03               	skipc
  2338  0407  0008               	return
  2339                           
  2340                           ;CheckTouchKey.c: 504: {
  2341                           ;CheckTouchKey.c: 505: b_kerr = 1;
  2342  0408  14F9               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  2343                           
  2344                           ;CheckTouchKey.c: 506: validtime = 0;
  2345  0409  1283               	bcf	3,5	;RP0=0, select bank0
  2346  040A                     L8:	
  2347  040A  01A0               	clrf	CheckValidTime@validtime
  2348  040B  01A1               	clrf	CheckValidTime@validtime+1
  2349  040C  0008               	return
  2350  040D                     __end_of_CheckValidTime:	
  2351                           
  2352                           	psect	text15
  2353  0017                     __ptext15:	
  2354 ;; *************** function _CheckOnceResult *****************
  2355 ;; Defined at:
  2356 ;;		line 249 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;		None
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  KeyResTemp      2    6[BANK0 ] unsigned int 
  2361 ;;  KeyValue        2    3[BANK0 ] unsigned int 
  2362 ;;  OldValue        2    0[BANK0 ] unsigned int 
  2363 ;;  cnt             1    8[BANK0 ] unsigned char 
  2364 ;;  KeyDown         1    5[BANK0 ] unsigned char 
  2365 ;;  flag            1    2[BANK0 ] unsigned char 
  2366 ;; Return value:  Size  Location     Type
  2367 ;;                  1    wreg      void 
  2368 ;; Registers used:
  2369 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2370 ;; Tracked objects:
  2371 ;;		On entry : 100/0
  2372 ;;		On exit  : 900/0
  2373 ;;		Unchanged: 0/0
  2374 ;; Data sizes:     COMMON   BANK0   BANK1
  2375 ;;      Params:         0       0       0
  2376 ;;      Locals:         0       9       0
  2377 ;;      Temps:          4       0       0
  2378 ;;      Totals:         4       9       0
  2379 ;;Total ram usage:       13 bytes
  2380 ;; Hardware stack levels used:    1
  2381 ;; Hardware stack levels required when called:    3
  2382 ;; This function calls:
  2383 ;;		_KeyClearOne
  2384 ;;		_KeyHave
  2385 ;;		_KeyIsIn
  2386 ;; This function is called by:
  2387 ;;		_CheckTouchKey
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391                           
  2392                           ;psect for function _CheckOnceResult
  2393  0017                     _CheckOnceResult:	
  2394                           
  2395                           ;CheckTouchKey.c: 251: unsigned char cnt = 0;
  2396                           
  2397                           ;incstack = 0
  2398                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2399  0017  01C2               	clrf	CheckOnceResult@cnt
  2400                           
  2401                           ;CheckTouchKey.c: 252: unsigned char KeyDown;
  2402                           ;CheckTouchKey.c: 253: unsigned char flag;
  2403                           ;CheckTouchKey.c: 255: unsigned int KeyResTemp;
  2404                           ;CheckTouchKey.c: 256: unsigned int KeyValue;
  2405                           ;CheckTouchKey.c: 257: unsigned int OldValue;
  2406                           ;CheckTouchKey.c: 259: KeyData[0] = 0;
  2407  0018  01A2               	clrf	_KeyData	;volatile
  2408                           
  2409                           ;CheckTouchKey.c: 260: KeyData[1] = 0;
  2410  0019  01A3               	clrf	_KeyData+1	;volatile
  2411                           
  2412                           ;CheckTouchKey.c: 261: KeyMaxSub = 0;
  2413  001A  01B3               	clrf	_KeyMaxSub
  2414  001B                     l2519:	
  2415                           
  2416                           ;CheckTouchKey.c: 265: {
  2417                           ;CheckTouchKey.c: 266: flag = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  2418  001B  0842               	movf	CheckOnceResult@cnt,w
  2419  001C  3907               	andlw	7
  2420  001D  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  2421  001E  0084               	movwf	4
  2422  001F  240D               	fcall	stringdir
  2423  0020  00BC               	movwf	CheckOnceResult@flag
  2424                           
  2425                           ;CheckTouchKey.c: 268: KeyResSum[cnt] >>= 3;
  2426  0021  1003               	clrc
  2427  0022  0D42               	rlf	CheckOnceResult@cnt,w
  2428  0023  3E2E               	addlw	(low (_KeyResSum| 0))& (0+255)
  2429  0024  0084               	movwf	4
  2430  0025  3003               	movlw	3
  2431  0026                     u1765:	
  2432  0026  0A84               	incf	4,f
  2433  0027  1003               	clrc
  2434  0028  1383               	bcf	3,7	;select IRP bank0
  2435  0029  0C80               	rrf	0,f
  2436  002A  0384               	decf	4,f
  2437  002B  0C80               	rrf	0,f
  2438  002C  3EFF               	addlw	-1
  2439  002D  1D03               	skipz
  2440  002E  2826               	goto	u1765
  2441                           
  2442                           ;CheckTouchKey.c: 269: KeyResTemp = KeyResSum[cnt];
  2443  002F  1003               	clrc
  2444  0030  0D42               	rlf	CheckOnceResult@cnt,w
  2445  0031  3E2E               	addlw	(low (_KeyResSum| 0))& (0+255)
  2446  0032  0084               	movwf	4
  2447  0033  0800               	movf	0,w
  2448  0034  00C0               	movwf	CheckOnceResult@KeyResTemp
  2449  0035  0A84               	incf	4,f
  2450  0036  0800               	movf	0,w
  2451  0037  00C1               	movwf	CheckOnceResult@KeyResTemp+1
  2452                           
  2453                           ;CheckTouchKey.c: 270: KeyDown = Table_KeyDown[cnt];
  2454  0038  0842               	movf	CheckOnceResult@cnt,w
  2455  0039  3E0A               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  2456  003A  0084               	movwf	4
  2457  003B  240D               	fcall	stringdir
  2458  003C  00BF               	movwf	CheckOnceResult@KeyDown
  2459                           
  2460                           ;CheckTouchKey.c: 272: KeyValue = KeyResTemp + KeyDown;
  2461  003D  00BD               	movwf	CheckOnceResult@KeyValue
  2462  003E  01BE               	clrf	CheckOnceResult@KeyValue+1
  2463  003F  0840               	movf	CheckOnceResult@KeyResTemp,w
  2464  0040  07BD               	addwf	CheckOnceResult@KeyValue,f
  2465  0041  1803               	skipnc
  2466  0042  0ABE               	incf	CheckOnceResult@KeyValue+1,f
  2467  0043  0841               	movf	CheckOnceResult@KeyResTemp+1,w
  2468  0044  07BE               	addwf	CheckOnceResult@KeyValue+1,f
  2469                           
  2470                           ;CheckTouchKey.c: 274: if(!KeyIsIn(cnt))
  2471  0045  0842               	movf	CheckOnceResult@cnt,w
  2472  0046  242D               	fcall	_KeyIsIn
  2473  0047  3A00               	xorlw	0
  2474                           
  2475                           ;CheckTouchKey.c: 275: {
  2476                           ;CheckTouchKey.c: 277: OldValue = KeyOldValue2[cnt];
  2477  0048  1283               	bcf	3,5	;RP0=0, select bank0
  2478  0049  1003               	clrc
  2479  004A  1D03               	skipz
  2480  004B  28A3               	goto	L11
  2481  004C  0D42               	rlf	CheckOnceResult@cnt,w
  2482  004D  3E28               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2483  004E  0084               	movwf	4
  2484  004F  1383               	bcf	3,7	;select IRP bank0
  2485  0050  0800               	movf	0,w
  2486  0051  00BA               	movwf	CheckOnceResult@OldValue
  2487  0052  0A84               	incf	4,f
  2488  0053  0800               	movf	0,w
  2489  0054  00BB               	movwf	CheckOnceResult@OldValue+1
  2490                           
  2491                           ;CheckTouchKey.c: 279: if(KeyReference[cnt] > KeyValue)
  2492  0055  1003               	clrc
  2493  0056  0D42               	rlf	CheckOnceResult@cnt,w
  2494  0057  3E26               	addlw	(low (_KeyReference| 0))& (0+255)
  2495  0058  20F9               	fcall	PL10	;call to abstracted procedure
  2496  0059  023E               	subwf	CheckOnceResult@KeyValue+1,w
  2497  005A  1D03               	skipz
  2498  005B  285E               	goto	u1785
  2499  005C  0875               	movf	??_CheckOnceResult,w
  2500  005D  023D               	subwf	CheckOnceResult@KeyValue,w
  2501  005E                     u1785:	
  2502  005E  1803               	skipnc
  2503  005F  286C               	goto	l2537
  2504                           
  2505                           ;CheckTouchKey.c: 280: {
  2506                           ;CheckTouchKey.c: 281: KeyResTemp = KeyReference[cnt] - KeyResTemp;
  2507  0060  1003               	clrc
  2508  0061  0D42               	rlf	CheckOnceResult@cnt,w
  2509  0062  3E26               	addlw	(low (_KeyReference| 0))& (0+255)
  2510  0063  20F9               	fcall	PL10	;call to abstracted procedure
  2511  0064  0840               	movf	CheckOnceResult@KeyResTemp,w
  2512  0065  0275               	subwf	??_CheckOnceResult,w
  2513  0066  00C0               	movwf	CheckOnceResult@KeyResTemp
  2514  0067  0841               	movf	CheckOnceResult@KeyResTemp+1,w
  2515  0068  1C03               	skipc
  2516  0069  0A41               	incf	CheckOnceResult@KeyResTemp+1,w
  2517  006A  0276               	subwf	??_CheckOnceResult+1,w
  2518  006B  288F               	goto	L9
  2519  006C                     l2537:	
  2520                           ;CheckTouchKey.c: 282: }
  2521                           
  2522                           
  2523                           ;CheckTouchKey.c: 283: else if ((OldValue > KeyValue) && (KeyOldValue1[cnt] > KeyValue))
  2524  006C  083B               	movf	CheckOnceResult@OldValue+1,w
  2525  006D  023E               	subwf	CheckOnceResult@KeyValue+1,w
  2526  006E  1D03               	skipz
  2527  006F  2872               	goto	u1795
  2528  0070  083A               	movf	CheckOnceResult@OldValue,w
  2529  0071  023D               	subwf	CheckOnceResult@KeyValue,w
  2530  0072                     u1795:	
  2531  0072  1803               	skipnc
  2532  0073  28E3               	goto	l2583
  2533  0074  1003               	clrc
  2534  0075  0D42               	rlf	CheckOnceResult@cnt,w
  2535  0076  3E2A               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2536  0077  20F9               	fcall	PL10	;call to abstracted procedure
  2537  0078  023E               	subwf	CheckOnceResult@KeyValue+1,w
  2538  0079  1D03               	skipz
  2539  007A  287D               	goto	u1805
  2540  007B  0875               	movf	??_CheckOnceResult,w
  2541  007C  023D               	subwf	CheckOnceResult@KeyValue,w
  2542  007D                     u1805:	
  2543  007D  1803               	skipnc
  2544  007E  28E3               	goto	l2583
  2545                           
  2546                           ;CheckTouchKey.c: 284: {
  2547                           ;CheckTouchKey.c: 285: KeyReference[cnt] = OldValue;
  2548  007F  1003               	clrc
  2549  0080  0D42               	rlf	CheckOnceResult@cnt,w
  2550  0081  3E26               	addlw	(low (_KeyReference| 0))& (0+255)
  2551  0082  0084               	movwf	4
  2552  0083  083A               	movf	CheckOnceResult@OldValue,w
  2553  0084  0080               	movwf	0
  2554  0085  0A84               	incf	4,f
  2555  0086  083B               	movf	CheckOnceResult@OldValue+1,w
  2556  0087  0080               	movwf	0
  2557                           
  2558                           ;CheckTouchKey.c: 286: KeyResTemp = OldValue - KeyResTemp;
  2559  0088  0840               	movf	CheckOnceResult@KeyResTemp,w
  2560  0089  023A               	subwf	CheckOnceResult@OldValue,w
  2561  008A  00C0               	movwf	CheckOnceResult@KeyResTemp
  2562  008B  0841               	movf	CheckOnceResult@KeyResTemp+1,w
  2563  008C  1C03               	skipc
  2564  008D  0A41               	incf	CheckOnceResult@KeyResTemp+1,w
  2565  008E  023B               	subwf	CheckOnceResult@OldValue+1,w
  2566  008F                     L9:	
  2567  008F  00C1               	movwf	CheckOnceResult@KeyResTemp+1
  2568                           
  2569                           ;CheckTouchKey.c: 291: }
  2570                           ;CheckTouchKey.c: 293: KeyUpShake[cnt] = 0;
  2571                           
  2572                           ;CheckTouchKey.c: 287: }
  2573  0090  0842               	movf	CheckOnceResult@cnt,w
  2574  0091  3E39               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2575  0092  0084               	movwf	4
  2576  0093  0180               	clrf	0
  2577                           
  2578                           ;CheckTouchKey.c: 296: {
  2579                           ;CheckTouchKey.c: 297: if(KeyResTemp >> 8)
  2580  0094  0841               	movf	CheckOnceResult@KeyResTemp+1,w
  2581  0095  1903               	btfsc	3,2
  2582  0096  2899               	goto	l2551
  2583                           
  2584                           ;CheckTouchKey.c: 298: {
  2585                           ;CheckTouchKey.c: 299: KeyDown = 0xFF;
  2586  0097  30FF               	movlw	255
  2587  0098  289A               	goto	L10
  2588  0099                     l2551:	
  2589                           ;CheckTouchKey.c: 300: }
  2590                           
  2591                           
  2592                           ;CheckTouchKey.c: 301: else
  2593                           ;CheckTouchKey.c: 302: {
  2594                           ;CheckTouchKey.c: 303: KeyDown = KeyResTemp & 0xFF;
  2595  0099  0840               	movf	CheckOnceResult@KeyResTemp,w
  2596  009A                     L10:	
  2597  009A  00BF               	movwf	CheckOnceResult@KeyDown
  2598                           
  2599                           ;CheckTouchKey.c: 304: }
  2600                           ;CheckTouchKey.c: 306: if(KeyMaxSub < KeyDown)
  2601  009B  0233               	subwf	_KeyMaxSub,w
  2602  009C  1803               	skipnc
  2603  009D  28A1               	goto	l2557
  2604                           
  2605                           ;CheckTouchKey.c: 307: {
  2606                           ;CheckTouchKey.c: 308: KeyMaxSub = KeyDown;
  2607  009E  083F               	movf	CheckOnceResult@KeyDown,w
  2608  009F  00B3               	movwf	_KeyMaxSub
  2609  00A0  28DE               	goto	l2581
  2610  00A1                     l2557:	
  2611                           ;CheckTouchKey.c: 310: }
  2612                           
  2613                           ;CheckTouchKey.c: 309: KeyHave(cnt,flag);
  2614                           
  2615                           
  2616                           ;CheckTouchKey.c: 311: else
  2617                           ;CheckTouchKey.c: 312: {
  2618                           ;CheckTouchKey.c: 313: KeyCounter++;
  2619  00A1  0AB4               	incf	_KeyCounter,f
  2620  00A2  28E3               	goto	l2583
  2621  00A3                     L11:	
  2622                           ;CheckTouchKey.c: 322: else
  2623                           ;CheckTouchKey.c: 323: {
  2624                           ;CheckTouchKey.c: 326: if(KeyReference[cnt]+1 < KeyValue)
  2625                           
  2626  00A3  0D42               	rlf	CheckOnceResult@cnt,w
  2627  00A4  3E26               	addlw	(low (_KeyReference| 0))& (0+255)
  2628  00A5  0084               	movwf	4
  2629  00A6  1383               	bcf	3,7	;select IRP bank0
  2630  00A7  0800               	movf	0,w
  2631  00A8  00F5               	movwf	??_CheckOnceResult
  2632  00A9  0A84               	incf	4,f
  2633  00AA  0800               	movf	0,w
  2634  00AB  00F6               	movwf	??_CheckOnceResult+1
  2635  00AC  0875               	movf	??_CheckOnceResult,w
  2636  00AD  3E01               	addlw	1
  2637  00AE  00F7               	movwf	??_CheckOnceResult+2
  2638  00AF  0876               	movf	??_CheckOnceResult+1,w
  2639  00B0  1803               	skipnc
  2640  00B1  3E01               	addlw	1
  2641  00B2  00F8               	movwf	??_CheckOnceResult+3
  2642  00B3  083E               	movf	CheckOnceResult@KeyValue+1,w
  2643  00B4  0278               	subwf	??_CheckOnceResult+3,w
  2644  00B5  1D03               	skipz
  2645  00B6  28B9               	goto	u1835
  2646  00B7  083D               	movf	CheckOnceResult@KeyValue,w
  2647  00B8  0277               	subwf	??_CheckOnceResult+2,w
  2648  00B9                     u1835:	
  2649  00B9  1C03               	btfss	3,0
  2650  00BA  28E3               	goto	l2583
  2651                           
  2652                           ;CheckTouchKey.c: 330: else if((KeyOldValue2[cnt]+KeyDown<KeyResTemp) || (KeyOldValue1[c
      +                          nt]+KeyDown<KeyResTemp))
  2653  00BB  1003               	clrc
  2654  00BC  0D42               	rlf	CheckOnceResult@cnt,w
  2655  00BD  3E28               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2656  00BE  0084               	movwf	4
  2657  00BF  0800               	movf	0,w
  2658  00C0  20E7               	fcall	PL6	;call to abstracted procedure
  2659  00C1  1C03               	skipc
  2660  00C2  28CB               	goto	l2571
  2661  00C3  1003               	clrc
  2662  00C4  0D42               	rlf	CheckOnceResult@cnt,w
  2663  00C5  3E2A               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2664  00C6  0084               	movwf	4
  2665  00C7  0800               	movf	0,w
  2666  00C8  20E7               	fcall	PL6	;call to abstracted procedure
  2667  00C9  1803               	skipnc
  2668  00CA  28D6               	goto	l2575
  2669  00CB                     l2571:	
  2670                           
  2671                           ;CheckTouchKey.c: 331: {
  2672                           ;CheckTouchKey.c: 332: if(++KeyUpShake[cnt] > 8)
  2673  00CB  0842               	movf	CheckOnceResult@cnt,w
  2674  00CC  3E39               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2675  00CD  0084               	movwf	4
  2676  00CE  3009               	movlw	9
  2677  00CF  0A80               	incf	0,f
  2678  00D0  0200               	subwf	0,w
  2679  00D1  1C03               	skipc
  2680  00D2  28DA               	goto	l2579
  2681                           
  2682                           ;CheckTouchKey.c: 333: {
  2683                           ;CheckTouchKey.c: 334: KeyClearOne(cnt);
  2684  00D3  0842               	movf	CheckOnceResult@cnt,w
  2685  00D4  239E               	fcall	_KeyClearOne
  2686                           
  2687                           ;CheckTouchKey.c: 335: continue;
  2688  00D5  28E3               	goto	l2583
  2689  00D6                     l2575:	
  2690                           
  2691                           ;CheckTouchKey.c: 338: else
  2692                           ;CheckTouchKey.c: 339: {
  2693                           ;CheckTouchKey.c: 340: KeyUpShake[cnt] = 0;
  2694  00D6  0842               	movf	CheckOnceResult@cnt,w
  2695  00D7  3E39               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2696  00D8  0084               	movwf	4
  2697  00D9  0180               	clrf	0
  2698  00DA                     l2579:	
  2699                           
  2700                           ;CheckTouchKey.c: 347: else if(!(KeyData[0] | KeyData[1]))
  2701  00DA  0823               	movf	_KeyData+1,w	;volatile
  2702  00DB  0422               	iorwf	_KeyData,w	;volatile
  2703  00DC  1D03               	btfss	3,2
  2704  00DD  28E3               	goto	l2583
  2705  00DE                     l2581:	
  2706                           
  2707                           ;CheckTouchKey.c: 348: {
  2708                           ;CheckTouchKey.c: 349: KeyHave(cnt,flag);
  2709  00DE  083C               	movf	CheckOnceResult@flag,w
  2710  00DF  00F2               	movwf	KeyHave@flag
  2711  00E0  01F3               	clrf	KeyHave@flag+1
  2712  00E1  0842               	movf	CheckOnceResult@cnt,w
  2713  00E2  2448               	fcall	_KeyHave
  2714  00E3                     l2583:	
  2715  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  2716  00E4  0FC2               	incfsz	CheckOnceResult@cnt,f
  2717  00E5  0008               	return
  2718  00E6  281B               	goto	l2519
  2719  00E7                     __end_of_CheckOnceResult:	
  2720  00E7                     PL6:	
  2721  00E7  00F5               	movwf	??_CheckOnceResult
  2722  00E8  0A84               	incf	4,f
  2723  00E9  0800               	movf	0,w
  2724  00EA  00F6               	movwf	??_CheckOnceResult+1
  2725  00EB  083F               	movf	CheckOnceResult@KeyDown,w
  2726  00EC  0775               	addwf	??_CheckOnceResult,w
  2727  00ED  00F7               	movwf	??_CheckOnceResult+2
  2728  00EE  0876               	movf	??_CheckOnceResult+1,w
  2729  00EF  1803               	skipnc
  2730  00F0  0A76               	incf	??_CheckOnceResult+1,w
  2731  00F1  00F8               	movwf	??_CheckOnceResult+3
  2732  00F2  0841               	movf	CheckOnceResult@KeyResTemp+1,w
  2733  00F3  0278               	subwf	??_CheckOnceResult+3,w
  2734  00F4  1D03               	skipz
  2735  00F5  0008               	return
  2736  00F6  0840               	movf	CheckOnceResult@KeyResTemp,w
  2737  00F7  0277               	subwf	??_CheckOnceResult+2,w
  2738  00F8  0008               	return
  2739  00F9                     __end_ofPL6:	
  2740  00F9                     PL10:	
  2741  00F9  0084               	movwf	4
  2742  00FA  0800               	movf	0,w
  2743  00FB  00F5               	movwf	??_CheckOnceResult
  2744  00FC  0A84               	incf	4,f
  2745  00FD  0800               	movf	0,w
  2746  00FE  00F6               	movwf	??_CheckOnceResult+1
  2747  00FF  0008               	return
  2748  0100                     __end_ofPL10:	
  2749                           
  2750                           	psect	text16
  2751  0448                     __ptext16:	
  2752 ;; *************** function _KeyHave *****************
  2753 ;; Defined at:
  2754 ;;		line 151 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  2755 ;; Parameters:    Size  Location     Type
  2756 ;;  cnt             1    wreg     unsigned char 
  2757 ;;  flag            2    2[COMMON] unsigned int 
  2758 ;; Auto vars:     Size  Location     Type
  2759 ;;  cnt             1    4[COMMON] unsigned char 
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  1    wreg      void 
  2762 ;; Registers used:
  2763 ;;		wreg, status,2, status,0
  2764 ;; Tracked objects:
  2765 ;;		On entry : 900/0
  2766 ;;		On exit  : 900/0
  2767 ;;		Unchanged: 800/0
  2768 ;; Data sizes:     COMMON   BANK0   BANK1
  2769 ;;      Params:         2       0       0
  2770 ;;      Locals:         1       0       0
  2771 ;;      Temps:          0       0       0
  2772 ;;      Totals:         3       0       0
  2773 ;;Total ram usage:        3 bytes
  2774 ;; Hardware stack levels used:    1
  2775 ;; Hardware stack levels required when called:    1
  2776 ;; This function calls:
  2777 ;;		Nothing
  2778 ;; This function is called by:
  2779 ;;		_CheckOnceResult
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782                           
  2783                           
  2784                           ;psect for function _KeyHave
  2785  0448                     _KeyHave:	
  2786                           
  2787                           ;incstack = 0
  2788                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  2789                           ;KeyHave@cnt stored from wreg
  2790  0448  00F4               	movwf	KeyHave@cnt
  2791                           
  2792                           ;CheckTouchKey.c: 153: KeyCounter++;
  2793  0449  0AB4               	incf	_KeyCounter,f
  2794                           
  2795                           ;CheckTouchKey.c: 156: {
  2796                           ;CheckTouchKey.c: 157: KeyData[0] = 0;
  2797  044A  01A2               	clrf	_KeyData	;volatile
  2798                           
  2799                           ;CheckTouchKey.c: 158: KeyData[1] = 0;
  2800  044B  01A3               	clrf	_KeyData+1	;volatile
  2801                           
  2802                           ;CheckTouchKey.c: 159: if(cnt&0x8)
  2803  044C  1DF4               	btfss	KeyHave@cnt,3
  2804  044D  2C51               	goto	l1841
  2805                           
  2806                           ;CheckTouchKey.c: 160: {
  2807                           ;CheckTouchKey.c: 161: KeyData[1] = flag;
  2808  044E  0872               	movf	KeyHave@flag,w
  2809  044F  00A3               	movwf	_KeyData+1	;volatile
  2810                           
  2811                           ;CheckTouchKey.c: 162: }
  2812  0450  0008               	return
  2813  0451                     l1841:	
  2814                           
  2815                           ;CheckTouchKey.c: 163: else
  2816                           ;CheckTouchKey.c: 164: {
  2817                           ;CheckTouchKey.c: 165: KeyData[0] = flag;
  2818  0451  0872               	movf	KeyHave@flag,w
  2819  0452  00A2               	movwf	_KeyData	;volatile
  2820  0453  0008               	return
  2821  0454                     __end_of_KeyHave:	
  2822                           
  2823                           	psect	text17
  2824  039E                     __ptext17:	
  2825 ;; *************** function _KeyClearOne *****************
  2826 ;; Defined at:
  2827 ;;		line 89 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;  cnt             1    wreg     unsigned char 
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;  cnt             1    2[COMMON] unsigned char 
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      void 
  2834 ;; Registers used:
  2835 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 800/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMMON   BANK0   BANK1
  2841 ;;      Params:         0       0       0
  2842 ;;      Locals:         1       0       0
  2843 ;;      Temps:          0       0       0
  2844 ;;      Totals:         1       0       0
  2845 ;;Total ram usage:        1 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    1
  2848 ;; This function calls:
  2849 ;;		Nothing
  2850 ;; This function is called by:
  2851 ;;		_KeyClearIn
  2852 ;;		_KeyStopClear
  2853 ;;		_CheckOnceResult
  2854 ;;		_SystemEnterSleep
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           
  2859                           ;psect for function _KeyClearOne
  2860  039E                     _KeyClearOne:	
  2861                           
  2862                           ;incstack = 0
  2863                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  2864                           ;KeyClearOne@cnt stored from wreg
  2865  039E  00F2               	movwf	KeyClearOne@cnt
  2866                           
  2867                           ;CheckTouchKey.c: 91: KeyOldValue0[cnt] = 0;
  2868  039F  1003               	clrc
  2869  03A0  0D72               	rlf	KeyClearOne@cnt,w
  2870  03A1  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  2871  03A2  23F3               	fcall	PL20	;call to abstracted procedure
  2872                           
  2873                           ;CheckTouchKey.c: 92: KeyOldValue1[cnt] = 0;
  2874  03A3  1003               	clrc
  2875  03A4  0D72               	rlf	KeyClearOne@cnt,w
  2876  03A5  3E2A               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2877  03A6  0084               	movwf	4
  2878                           
  2879                           ;CheckTouchKey.c: 93: KeyOldValue2[cnt] = 0;
  2880  03A7  23B1               	fcall	PL22	;call to abstracted procedure
  2881  03A8  3E28               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2882  03A9  0084               	movwf	4
  2883                           
  2884                           ;CheckTouchKey.c: 94: KeyReference[cnt] = 0;
  2885  03AA  23B1               	fcall	PL22	;call to abstracted procedure
  2886  03AB  3E26               	addlw	(low (_KeyReference| 0))& (0+255)
  2887  03AC  0084               	movwf	4
  2888  03AD  0180               	clrf	0
  2889  03AE  0A84               	incf	4,f
  2890  03AF  0180               	clrf	0
  2891  03B0  0008               	return
  2892  03B1                     __end_of_KeyClearOne:	
  2893  03B1                     PL22:	
  2894  03B1  0180               	clrf	0
  2895  03B2  0A84               	incf	4,f
  2896  03B3  0180               	clrf	0
  2897  03B4  1003               	clrc
  2898  03B5  0D72               	rlf	KeyClearOne@cnt,w
  2899  03B6  0008               	return
  2900  03B7                     __end_ofPL22:	
  2901                           
  2902                           	psect	text18
  2903  01D6                     __ptext18:	
  2904 ;; *************** function _CheckKeyOldValue *****************
  2905 ;; Defined at:
  2906 ;;		line 363 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;		None
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;  KeyOldTemp      2    2[BANK0 ] unsigned int 
  2911 ;;  KeyResTemp      2    0[BANK0 ] unsigned int 
  2912 ;;  cnt             1    4[BANK0 ] unsigned char 
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : 100/0
  2919 ;;		On exit  : 100/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMMON   BANK0   BANK1
  2922 ;;      Params:         0       0       0
  2923 ;;      Locals:         0       5       0
  2924 ;;      Temps:          2       0       0
  2925 ;;      Totals:         2       5       0
  2926 ;;Total ram usage:        7 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:    3
  2929 ;; This function calls:
  2930 ;;		_KeyIsIn
  2931 ;; This function is called by:
  2932 ;;		_CheckTouchKey
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           
  2937                           ;psect for function _CheckKeyOldValue
  2938  01D6                     _CheckKeyOldValue:	
  2939  01D6  3004               	movlw	4
  2940                           
  2941                           ;CheckTouchKey.c: 365: static unsigned char counter = 0;
  2942                           ;CheckTouchKey.c: 366: unsigned char cnt = 0;
  2943                           
  2944                           ;incstack = 0
  2945                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2946  01D7  01BE               	clrf	CheckKeyOldValue@cnt
  2947                           
  2948                           ;CheckTouchKey.c: 367: unsigned int KeyResTemp;
  2949                           ;CheckTouchKey.c: 368: unsigned int KeyOldTemp;
  2950                           ;CheckTouchKey.c: 370: if(++counter < 4)
  2951  01D8  0AB2               	incf	CheckKeyOldValue@counter,f
  2952  01D9  0232               	subwf	CheckKeyOldValue@counter,w
  2953  01DA  1C03               	btfss	3,0
  2954  01DB  0008               	return
  2955                           
  2956                           ;CheckTouchKey.c: 372: counter = 0;
  2957  01DC  01B2               	clrf	CheckKeyOldValue@counter
  2958  01DD                     l2593:	
  2959                           
  2960                           ;CheckTouchKey.c: 375: {
  2961                           ;CheckTouchKey.c: 376: KeyResTemp = KeyResSum[cnt];
  2962  01DD  1003               	clrc
  2963  01DE  0D3E               	rlf	CheckKeyOldValue@cnt,w
  2964  01DF  3E2E               	addlw	(low (_KeyResSum| 0))& (0+255)
  2965  01E0  0084               	movwf	4
  2966  01E1  1383               	bcf	3,7	;select IRP bank0
  2967  01E2  0800               	movf	0,w
  2968  01E3  00BA               	movwf	CheckKeyOldValue@KeyResTemp
  2969  01E4  0A84               	incf	4,f
  2970  01E5  0800               	movf	0,w
  2971  01E6  00BB               	movwf	CheckKeyOldValue@KeyResTemp+1
  2972                           
  2973                           ;CheckTouchKey.c: 377: if(!KeyIsIn(cnt))
  2974  01E7  083E               	movf	CheckKeyOldValue@cnt,w
  2975  01E8  242D               	fcall	_KeyIsIn
  2976  01E9  3A00               	xorlw	0
  2977                           
  2978                           ;CheckTouchKey.c: 378: {
  2979                           ;CheckTouchKey.c: 380: KeyOldTemp = KeyOldValue0[cnt] - KeyResTemp;
  2980  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  2981  01EB  1003               	clrc
  2982  01EC  1D03               	skipz
  2983  01ED  2A1F               	goto	L15
  2984  01EE  0D3E               	rlf	CheckKeyOldValue@cnt,w
  2985  01EF  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  2986  01F0  0084               	movwf	4
  2987  01F1  1383               	bcf	3,7	;select IRP bank0
  2988                           
  2989                           ;CheckTouchKey.c: 381: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  2990  01F2  222D               	fcall	PL4	;call to abstracted procedure
  2991  01F3  1903               	skipnz
  2992  01F4  023C               	subwf	CheckKeyOldValue@KeyOldTemp,w
  2993  01F5  1C03               	skipc
  2994  01F6  29FD               	goto	L12
  2995  01F7  0F3C               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  2996  01F8  2A1D               	goto	l744
  2997  01F9  0A3D               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  2998  01FA  1D03               	btfss	3,2
  2999  01FB  2A1D               	goto	l744
  3000                           
  3001                           ;CheckTouchKey.c: 382: {
  3002                           ;CheckTouchKey.c: 383: KeyOldTemp = KeyOldValue1[cnt] - KeyResTemp;
  3003  01FC  1003               	clrc
  3004  01FD                     L12:	
  3005  01FD  0D3E               	rlf	CheckKeyOldValue@cnt,w
  3006  01FE  3E2A               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3007  01FF  0084               	movwf	4
  3008                           
  3009                           ;CheckTouchKey.c: 384: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3010  0200  222D               	fcall	PL4	;call to abstracted procedure
  3011  0201  1903               	skipnz
  3012  0202  023C               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3013  0203  1C03               	skipc
  3014  0204  2A0B               	goto	L13
  3015  0205  0F3C               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3016  0206  2A1D               	goto	l744
  3017  0207  0A3D               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3018  0208  1D03               	btfss	3,2
  3019  0209  2A1D               	goto	l744
  3020                           
  3021                           ;CheckTouchKey.c: 385: {
  3022                           ;CheckTouchKey.c: 386: KeyOldTemp = KeyOldValue2[cnt] - KeyResTemp;
  3023  020A  1003               	clrc
  3024  020B                     L13:	
  3025  020B  0D3E               	rlf	CheckKeyOldValue@cnt,w
  3026  020C  3E28               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3027  020D  0084               	movwf	4
  3028                           
  3029                           ;CheckTouchKey.c: 387: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3030  020E  222D               	fcall	PL4	;call to abstracted procedure
  3031  020F  1903               	skipnz
  3032  0210  023C               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3033  0211  1C03               	skipc
  3034  0212  2A19               	goto	L14
  3035  0213  0F3C               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3036  0214  2A1D               	goto	l744
  3037  0215  0A3D               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3038  0216  1D03               	btfss	3,2
  3039  0217  2A1D               	goto	l744
  3040                           
  3041                           ;CheckTouchKey.c: 388: {
  3042                           ;CheckTouchKey.c: 389: KeyReference[cnt] = KeyResTemp;
  3043  0218  1003               	clrc
  3044  0219                     L14:	
  3045  0219  0D3E               	rlf	CheckKeyOldValue@cnt,w
  3046  021A  3E26               	addlw	(low (_KeyReference| 0))& (0+255)
  3047  021B  0084               	movwf	4
  3048  021C  224E               	fcall	PL24	;call to abstracted procedure
  3049  021D                     l744:	
  3050                           
  3051                           ;CheckTouchKey.c: 390: }
  3052                           ;CheckTouchKey.c: 391: }
  3053                           ;CheckTouchKey.c: 392: }
  3054                           ;CheckTouchKey.c: 393: }
  3055                           ;CheckTouchKey.c: 396: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  3056  021D  1283               	bcf	3,5	;RP0=0, select bank0
  3057  021E  1003               	clrc
  3058  021F                     L15:	
  3059  021F  0D3E               	rlf	CheckKeyOldValue@cnt,w
  3060  0220  3E2A               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3061  0221  0084               	movwf	4
  3062  0222  1383               	bcf	3,7	;select IRP bank0
  3063  0223  2246               	fcall	PL18	;call to abstracted procedure
  3064  0224  3E28               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3065                           
  3066                           ;CheckTouchKey.c: 397: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  3067  0225  223B               	fcall	PL16	;call to abstracted procedure
  3068  0226  2246               	fcall	PL18	;call to abstracted procedure
  3069  0227  3E2A               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3070                           
  3071                           ;CheckTouchKey.c: 398: KeyOldValue0[cnt] = KeyResTemp;
  3072  0228  223B               	fcall	PL16	;call to abstracted procedure
  3073  0229  224E               	fcall	PL24	;call to abstracted procedure
  3074  022A  0FBE               	incfsz	CheckKeyOldValue@cnt,f
  3075  022B  0008               	return
  3076  022C  29DD               	goto	l2593
  3077  022D                     __end_of_CheckKeyOldValue:	
  3078  022D                     PL4:	
  3079  022D  0800               	movf	0,w
  3080  022E  00BC               	movwf	CheckKeyOldValue@KeyOldTemp
  3081  022F  0A84               	incf	4,f
  3082  0230  0800               	movf	0,w
  3083  0231  00BD               	movwf	CheckKeyOldValue@KeyOldTemp+1
  3084  0232  083A               	movf	CheckKeyOldValue@KeyResTemp,w
  3085  0233  02BC               	subwf	CheckKeyOldValue@KeyOldTemp,f
  3086  0234  083B               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3087  0235  1C03               	skipc
  3088  0236  03BD               	decf	CheckKeyOldValue@KeyOldTemp+1,f
  3089  0237  02BD               	subwf	CheckKeyOldValue@KeyOldTemp+1,f
  3090  0238  3000               	movlw	0
  3091  0239  023D               	subwf	CheckKeyOldValue@KeyOldTemp+1,w
  3092  023A  3402               	retlw	2
  3093  023B                     __end_ofPL4:	
  3094  023B                     PL16:	
  3095  023B  0084               	movwf	4
  3096  023C  0874               	movf	??_CheckKeyOldValue,w
  3097  023D  0080               	movwf	0
  3098  023E  0A84               	incf	4,f
  3099  023F  0875               	movf	??_CheckKeyOldValue+1,w
  3100  0240  0080               	movwf	0
  3101  0241  1003               	clrc
  3102  0242  0D3E               	rlf	CheckKeyOldValue@cnt,w
  3103  0243  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3104  0244  0084               	movwf	4
  3105  0245  0008               	return
  3106  0246                     __end_ofPL16:	
  3107  0246                     PL18:	
  3108  0246  0800               	movf	0,w
  3109  0247  00F4               	movwf	??_CheckKeyOldValue
  3110  0248  0A84               	incf	4,f
  3111  0249  0800               	movf	0,w
  3112  024A  00F5               	movwf	??_CheckKeyOldValue+1
  3113  024B  1003               	clrc
  3114  024C  0D3E               	rlf	CheckKeyOldValue@cnt,w
  3115  024D  0008               	return
  3116  024E                     __end_ofPL18:	
  3117  024E                     PL24:	
  3118  024E  083A               	movf	CheckKeyOldValue@KeyResTemp,w
  3119  024F  0080               	movwf	0
  3120  0250  0A84               	incf	4,f
  3121  0251  083B               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3122  0252  0080               	movwf	0
  3123  0253  0008               	return
  3124  0254                     __end_ofPL24:	
  3125                           
  3126                           	psect	text19
  3127  042D                     __ptext19:	
  3128 ;; *************** function _KeyIsIn *****************
  3129 ;; Defined at:
  3130 ;;		line 67 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  cnt             1    wreg     unsigned char 
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;  cnt             1    3[COMMON] unsigned char 
  3135 ;;  i               1    2[COMMON] unsigned char 
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  1    wreg      unsigned char 
  3138 ;; Registers used:
  3139 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMMON   BANK0   BANK1
  3145 ;;      Params:         0       0       0
  3146 ;;      Locals:         2       0       0
  3147 ;;      Temps:          0       0       0
  3148 ;;      Totals:         2       0       0
  3149 ;;Total ram usage:        2 bytes
  3150 ;; Hardware stack levels used:    2
  3151 ;; Hardware stack levels required when called:    1
  3152 ;; This function calls:
  3153 ;;		Nothing
  3154 ;; This function is called by:
  3155 ;;		_KeyClearIn
  3156 ;;		_CheckOnceResult
  3157 ;;		_CheckKeyOldValue
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           
  3162                           ;psect for function _KeyIsIn
  3163  042D                     _KeyIsIn:	
  3164                           
  3165                           ;incstack = 0
  3166                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  3167                           ;KeyIsIn@cnt stored from wreg
  3168  042D  00F3               	movwf	KeyIsIn@cnt
  3169                           
  3170                           ;CheckTouchKey.c: 69: unsigned char i = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  3171  042E  3907               	andlw	7
  3172  042F  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  3173  0430  0084               	movwf	4
  3174  0431  240D               	fcall	stringdir
  3175  0432  00F2               	movwf	KeyIsIn@i
  3176                           
  3177                           ;CheckTouchKey.c: 71: if(cnt&0x8)
  3178  0433  1DF3               	btfss	KeyIsIn@cnt,3
  3179  0434  2C37               	goto	l2395
  3180                           
  3181                           ;CheckTouchKey.c: 72: {
  3182                           ;CheckTouchKey.c: 73: i &= KeyFlag[1];
  3183  0435  087B               	movf	_KeyFlag+1,w	;volatile
  3184  0436  2C38               	goto	L16
  3185  0437                     l2395:	
  3186                           ;CheckTouchKey.c: 74: }
  3187                           
  3188                           
  3189                           ;CheckTouchKey.c: 75: else
  3190                           ;CheckTouchKey.c: 76: {
  3191                           ;CheckTouchKey.c: 77: i &= KeyFlag[0];
  3192  0437  087A               	movf	_KeyFlag,w	;volatile
  3193  0438                     L16:	
  3194  0438  05F2               	andwf	KeyIsIn@i,f
  3195                           
  3196                           ;CheckTouchKey.c: 78: }
  3197                           ;CheckTouchKey.c: 79: return i;
  3198  0439  0872               	movf	KeyIsIn@i,w
  3199  043A  0008               	return
  3200  043B                     __end_of_KeyIsIn:	
  3201                           
  3202                           	psect	text20
  3203  03B7                     __ptext20:	
  3204 ;; *************** function _Isr_Timer *****************
  3205 ;; Defined at:
  3206 ;;		line 130 in file "D:\ÎÒµÄÎÄµµ\Documents\WeChat Files\hmm665544\FileStorage\File\2020-07\GS_01 ´¥Ãþ(1)\GS_01 ´¥Ãþ\GN_
      +101bt\main.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;		None
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;		None
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      void 
  3213 ;; Registers used:
  3214 ;;		wreg, status,2, status,0
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 100/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMMON   BANK0   BANK1
  3220 ;;      Params:         0       0       0
  3221 ;;      Locals:         0       0       0
  3222 ;;      Temps:          2       0       0
  3223 ;;      Totals:         2       0       0
  3224 ;;Total ram usage:        2 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; This function calls:
  3227 ;;		Nothing
  3228 ;; This function is called by:
  3229 ;;		Interrupt level 1
  3230 ;; This function uses a non-reentrant model
  3231 ;;
  3232                           
  3233                           
  3234                           ;psect for function _Isr_Timer
  3235  03B7                     _Isr_Timer:	
  3236                           
  3237                           ;main.c: 132: if(T0IF)
  3238  03B7  1D0B               	btfss	11,2	;volatile
  3239  03B8  2BC5               	goto	i1l2371
  3240                           
  3241                           ;main.c: 133: {
  3242                           ;main.c: 134: TMR0 += 6;
  3243  03B9  3006               	movlw	6
  3244  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  3245  03BB  0781               	addwf	1,f	;volatile
  3246                           
  3247                           ;main.c: 135: T0IF = 0;
  3248  03BC  110B               	bcf	11,2	;volatile
  3249                           
  3250                           ;main.c: 136: if(++MainTime >= 32)
  3251  03BD  3020               	movlw	32
  3252  03BE  0AB8               	incf	_MainTime,f	;volatile
  3253  03BF  0238               	subwf	_MainTime,w	;volatile
  3254  03C0  1C03               	skipc
  3255  03C1  2BC9               	goto	i1l334
  3256                           
  3257                           ;main.c: 137: {
  3258                           ;main.c: 138: MainTime = 0;
  3259  03C2  01B8               	clrf	_MainTime	;volatile
  3260                           
  3261                           ;main.c: 139: B_MainLoop = 1;
  3262  03C3  1779               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  3263  03C4  2BC9               	goto	i1l334
  3264  03C5                     i1l2371:	
  3265                           
  3266                           ;main.c: 142: else
  3267                           ;main.c: 143: {
  3268                           ;main.c: 144: INTCON = 0XA0;
  3269  03C5  30A0               	movlw	160
  3270  03C6  008B               	movwf	11	;volatile
  3271                           
  3272                           ;main.c: 145: PIR1 = 0;
  3273  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  3274  03C8  019D               	clrf	29	;volatile
  3275  03C9                     i1l334:	
  3276  03C9  0871               	movf	??_Isr_Timer+1,w
  3277  03CA  008A               	movwf	10
  3278  03CB  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3279  03CC  0083               	movwf	3
  3280  03CD  0EFE               	swapf	126,f
  3281  03CE  0E7E               	swapf	126,w
  3282  03CF  0009               	retfie
  3283  03D0                     __end_of_Isr_Timer:	
  3284  007E                     btemp	set	126	;btemp
  3285  007E                     wtemp0	set	126
  3286                           
  3287                           	psect	intentry
  3288  0004                     __pintentry:	
  3289                           ;incstack = 0
  3290                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  3291                           
  3292  0004                     interrupt_function:	
  3293  007E                     saved_w	set	btemp
  3294  0004  00FE               	movwf	btemp
  3295  0005  0E03               	swapf	3,w
  3296  0006  00F0               	movwf	??_Isr_Timer
  3297  0007  080A               	movf	10,w
  3298  0008  00F1               	movwf	??_Isr_Timer+1
  3299  0009  2BB7               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    12
    Data        1
    BSS         28
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      12
    BANK0            80     13      42
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _SystemEnterSleep->_GetTouchKeyValue_Sleep
    _GetTouchKeyValue_Sleep->_ClearResSum
    _CheckTouchKey->_CheckOnceResult
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4900
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                       _processPress
 ---------------------------------------------------------------------------------
 (1) _processPress                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0    1342
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                    13    13      0    1342
                                              0 BANK0     13    13      0
                        _ClearResSum
             _GetTouchKeyValue_Sleep
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue_Sleep                               4     4      0     203
                                              3 COMMON     4     4      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3510
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     320
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     320
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _GetTouchKeyValue                                     4     4      0     203
                                              3 COMMON     4     4      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1925
                                              5 COMMON     4     4      0
                                              0 BANK0      9     9      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     304
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     839
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0     102
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue_Sleep
         _ClearResSum
       _KeyClearOne
   _processPress

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               20      0       0       5        0.0%
BITBANK1            20      0       0       7        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      D      2A       4       52.5%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       C       1       85.7%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      36       8        0.0%
ABS                  0      0      36       6        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jul 04 11:01:53 2020

                     KeyIsIn@cnt 0073                       KeyHave@cnt 0074                      KeyHave@flag 0072  
 __end_of_GetTouchKeyValue_Sleep 0295                                pc 0002                               PL2 01B1  
                             PL4 022D                               PL6 00E7                               PL8 0295  
     SystemEnterSleep@KeyOldTemp 0044                    ??_KeyClearOne 0072            __size_of_TurnKeyFlags 002F  
                             fsr 0004                 ??_CheckValidTime 0072       SystemEnterSleep@KeyResTemp 0042  
                            PL10 00F9                              PL20 03F3                              PL12 01C0  
                            PL22 03B1                              PL14 01C7                              PL24 024E  
                            PL16 023B                              PL26 01D1                              PL18 0246  
                            l355 042B                              l703 031A                              l820 027F  
                            l744 021D                              l762 0347                              l781 0367  
                            l793 0100                              l797 0122                              _RB5 0035  
                            _PR2 0012                              fsr0 0004                              indf 0000  
            CheckOnceResult@flag 003C                ?_GetTouchKeyValue 0070         __end_of_Table_KeyChannel 041F  
             ??_GetTouchKeyValue 0073                             l2011 03E8                             l2023 02F0  
                           l2051 0321                             l2027 02F4                             l2053 0324  
                           l2401 043B                             l2411 0443                             l2261 02BA  
                           l2253 02B4                             l2407 043C                             l2513 01AB  
                           l1811 0467                             l1813 0468                             l2701 0377  
                           l2445 011C                             l2551 0099                             l2519 001B  
                           l2199 03F9                             l2703 037A                             l2295 02E6  
                           l2287 02E0                             l1841 0451                             l2537 006C  
                           l2297 02E9                             l2473 014D                             l2713 0455  
                           l2395 0437                             l2571 00CB                             l2651 034E  
                           l1851 0258                             l2581 00DE                             l2557 00A1  
                           l2709 037E                             l2469 0149                             l2575 00D6  
                           l2583 00E3                             l2593 01DD                             l2579 00DA  
                           l1883 0286                             l2693 0373                             l1897 046F  
                           l1889 028B                             _T0IF 005A                             u1805 007D  
                           _PIE1 001E                             u1665 0146                             u1835 00B9  
                           u1765 0026                             u1785 005E                             u1795 0072  
                           _RBIF 0058                             _PIR1 001D                             _TMR0 0001  
                           _WPDB 0018                             _WPUB 0008                             _main 0454  
                           btemp 007E                    ?_KeyStopClear 0070                             start 000A  
                   _TurnKeyFlags 032C                  __end_of_KeyIsIn 043B                  __end_of_KeyHave 0454  
     CheckKeyOldValue@KeyOldTemp 003C                    ??_Init_System 0072       CheckKeyOldValue@KeyResTemp 003A  
                          ?_main 0070                            _T2CON 0011         __end_of_SystemEnterSleep 01B1  
                          i1l334 03C9                            _PORTB 0006                            _TRISB 0007  
            __end_of_KeyClearOne 03B1                       _KeyClearIn 043B                   __pbitbssCOMMON 03C8  
                          pclath 000A                      _ClearResSum 0467                       _KeyCounter 0034  
                     _KeyOldData 0024                   ??_KeyStopClear 0073                            status 0003  
                          wtemp0 007E                       _KeyUpShake 0039                  __initialization 000B  
                   __end_of_main 045F                           ??_main 0079              __end_of_Init_System 039E  
                         _CCPCON 0014                           _CCPR2L 0015                           i1l2371 03C5  
                         _INTCON 000B               __size_of_KeyServer 0048                           _OSCCON 0017  
                         _TMR2IF 0059                           _TMR2ON 008A                           _TRISB4 003C  
                         _TRISB5 003D                        ??_KeyIsIn 0072                        ??_KeyHave 0074  
             __size_of_Isr_Timer 0019        CheckOnceResult@KeyResTemp 0040           CheckOnceResult@KeyDown 003F  
      __size_of_CheckKeyOldValue 0057                           _b_kclr 03CA                           _b_kerr 03C9  
                    _KeyClearOne 039E                    _Table_KeyFalg 0413                    _Table_KeyDown 041C  
                         saved_w 007E           __size_of_CheckTouchKey 0024                      ?_KeyClearIn 0070  
                _CheckOnceResult 0017          __end_of__initialization 0015               __size_of_WorkSleep 0015  
                 __pcstackCOMMON 0070                     __pidataBANK0 0000                      _Init_System 037F  
                     __end_ofPL2 01C0                       __end_ofPL4 023B                       __end_ofPL6 00F9  
                     __end_ofPL8 02A4                __end_of_KeyServer 02EC             __end_of_KeyStopClear 03F3  
                  KeyServer@Temp 0074                __end_of_Isr_Timer 03D0                       __pbssBANK0 0020  
      __size_of_GetTouchKeyValue 0040                    _CheckTouchKey 035B                       __pmaintext 0454  
                     __pintentry 0004              __size_of_KeyClearIn 000D                __end_of_WorkSleep 03E5  
              ?_SystemEnterSleep 0070          __end_of_CheckOnceResult 00E7                          _KEYCON0 000C  
                        _KEYCON1 000D                          _KEYCON2 0016             __end_of_Table_C_LVBO 041C  
                  KeyStopClear@i 0073               ??_SystemEnterSleep 003A                          _B_OnOff 03CD  
         __size_of_Refurbish_Sfr 0007             __end_of_Table_KeyCap 041E                       __stringtab 040D  
                   ?_ClearResSum 0070                          _KeyData 0022                          _KeyFlag 007A  
                        _KeyIsIn 042D                          _KeyHave 0448                   ClearResSum@cnt 0072  
                 ?_CheckTouchKey 0070                          _PwmData 0047          CheckOnceResult@KeyValue 003D  
               _CheckKeyOldValue 01D6          CheckOnceResult@OldValue 003A           TurnKeyFlags@KeyNoTimes 0030  
           GetTouchKeyValue@wake 0073             GetTouchKeyValue@temp 0075                          _b_kover 03CC  
                        __ptext1 041F                          __ptext2 03D0                          __ptext3 0100  
                        __ptext4 0254                          __ptext5 046F                          __ptext6 02A4  
                        __ptext7 037F                          __ptext8 035B                          __ptext9 032C  
        __size_of_CheckValidTime 0014                          clrloop0 0460             end_of_initialization 0015  
       ??_GetTouchKeyValue_Sleep 0073                    _Refurbish_Sfr 046F                     _KeyOldValue0 002C  
                   _KeyOldValue1 002A                     _KeyOldValue2 0028            __size_of_KeyStopClear 000E  
                   ?_KeyClearOne 0070                     _KeyReference 0026                    ?_processPress 0070  
               ?_CheckOnceResult 0070                     ??_KeyClearIn 0074               CheckOnceResult@cnt 0042  
                ??_CheckTouchKey 0079                     _KeyStopClear 03E5                 _GetTouchKeyValue 02EC  
                 ?_Refurbish_Sfr 0070                     ?_Init_System 0070               __end_of_KeyClearIn 0448  
                 ??_processPress 0072                    WorkSleep@time 0035                        _KeyMaxSub 0033  
                      _KeyResSum 002E                      __end_ofPL10 0100                      __end_ofPL20 03F9  
                    __end_ofPL12 01C7                      __end_ofPL22 03B7                      __end_ofPL14 01D1  
                    __end_ofPL24 0254                      __end_ofPL16 0246                      __end_ofPL26 01D6  
                    __end_ofPL18 024E              start_initialization 000B                        _KeyServer 02A4  
                      _Isr_Timer 03B7             __size_of_ClearResSum 0008  __size_of_GetTouchKeyValue_Sleep 0041  
                  ?_TurnKeyFlags 0070                     _Table_C_LVBO 041B         TurnKeyFlags@KeyHaveTimes 0031  
                    __pdataBANK0 0049                     _Table_KeyCap 041D                      __pbssCOMMON 007A  
                     ?_KeyServer 0070                        ___latbits 0000                    __pcstackBANK0 003A  
                      _WorkSleep 03D0                   _CheckValidTime 03F9         __end_of_CheckKeyOldValue 022D  
                     ?_Isr_Timer 0070              KeyServer@KeyOldFlag 0036                         ?_KeyIsIn 0070  
                       ?_KeyHave 0072        __size_of_SystemEnterSleep 00B1                  ??_Refurbish_Sfr 0072  
                 ??_TurnKeyFlags 0075                        __pnvBANK0 0047                        __pstrings 040D  
           __size_of_KeyClearOne 0013           _GetTouchKeyValue_Sleep 0254           __end_of_CheckValidTime 040D  
                     ?_WorkSleep 0070              GetTouchKeyValue@cnt 0076                         _KEYDATAH 000F  
                       _KEYDATAL 000E                interrupt_function 0004             __end_of_processPress 042D  
                      clear_ram0 045F              CheckKeyOldValue@cnt 003E                         KeyIsIn@i 0072  
                    __stringbase 0412             __size_of_Init_System 001F            __end_of_Table_KeyFalg 041B  
          __end_of_Table_KeyDown 041D         __end_of_GetTouchKeyValue 032C                  ?_CheckValidTime 0070  
                    ??_KeyServer 0072                      ??_Isr_Timer 0070                         _MainTime 0038  
     GetTouchKeyValue_Sleep@wake 0073       GetTouchKeyValue_Sleep@temp 0075                 __size_of_KeyIsIn 000E  
               __size_of_KeyHave 000C                 _Table_KeyChannel 041E         SystemEnterSleep@KeyValue 003E  
             __end_of__stringtab 0413                         _b_kover1 03CB                         _b_ksleep 03C8  
           __end_of_TurnKeyFlags 035B                      ??_WorkSleep 0077          CheckValidTime@validtime 0020  
                       __ptext10 043B                         __ptext11 03E5                         __ptext20 03B7  
                       __ptext12 02EC                         __ptext13 0467                         __ptext14 03F9  
                       __ptext15 0017                         __ptext16 0448                         __ptext17 039E  
                       __ptext18 01D6                         __ptext19 042D         __size_of_CheckOnceResult 00D0  
                  __size_of_main 000B                 _SystemEnterSleep 0100                         _lowCount 0049  
          __end_of_CheckTouchKey 037F                         _pressKey 0037        GetTouchKeyValue_Sleep@cnt 0076  
        CheckKeyOldValue@counter 0032                ?_CheckKeyOldValue 0070            __size_of_processPress 000E  
                       intlevel1 0000                    ??_ClearResSum 0072               ??_CheckKeyOldValue 0074  
                      stringcode 040D             SystemEnterSleep@wake 0040                       _B_MainLoop 03CE  
        ?_GetTouchKeyValue_Sleep 0070                       _OPTION_REG 0005                     _processPress 041F  
                       stringdir 040D              SystemEnterSleep@cnt 0046                         stringtab 040D  
                 KeyClearOne@cnt 0072                    KeyClearIn@cnt 0074            __end_of_Refurbish_Sfr 0476  
            __end_of_ClearResSum 046F                ??_CheckOnceResult 0075  
