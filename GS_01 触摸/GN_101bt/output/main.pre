
# 1 "D:\ÎÒµÄÎÄµµ\Documents\WeChat Files\hmm665544\FileStorage\File\2020-07\GS_01 ´¥Ãþ(1)\GS_01 ´¥Ãþ\GN_101bt\main.c"

# 26 "E:\SCMCU_IDE_V2.00.08_Beta9\data\include\htc.h"
extern const char __xc8_OPTIM_SPEED;

extern double __fpnormalize(double);


# 13 "E:\SCMCU_IDE_V2.00.08_Beta9\data\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 9 "E:\SCMCU_IDE_V2.00.08_Beta9\data\include\SC8F8122.h"
volatile unsigned char INDF @ 0x0000;
volatile unsigned char TMR0 @ 0x0001;
volatile unsigned char PCL @ 0x0002;
volatile unsigned char STATUS @ 0x0003;
volatile unsigned char FSR @ 0x0004;
volatile unsigned char OPTION_REG @ 0x0005;
volatile unsigned char PORTB @ 0x0006;
volatile unsigned char TRISB @ 0x0007;
volatile unsigned char WPUB @ 0x0008;
volatile unsigned char IOCB @ 0x0009;
volatile unsigned char PCLATH @ 0x000A;
volatile unsigned char INTCON @ 0x000B;
volatile unsigned char KEYCON0 @ 0x000C;
volatile unsigned char KEYCON1 @ 0x000D;
volatile unsigned char KEYDATAL @ 0x000E;
volatile unsigned char KEYDATAH @ 0x000F;
volatile unsigned char TMR2 @ 0x0010;
volatile unsigned char T2CON @ 0x0011;
volatile unsigned char PR2 @ 0x0012;
volatile unsigned char CCPR1L @ 0x0013;
volatile unsigned char CCPCON @ 0x0014;
volatile unsigned char CCPR2L @ 0x0015;
volatile unsigned char KEYCON2 @ 0x0016;
volatile unsigned char OSCCON @ 0x0017;
volatile unsigned char WPDB @ 0x0018;
volatile unsigned char ANSEL @ 0x0019;
volatile unsigned char TABLE_SPL @ 0x001A;
volatile unsigned char TABLE_SPH @ 0x001B;
volatile unsigned char TABLE_DATAH @ 0x001C;
volatile unsigned char PIR1 @ 0x001D;
volatile unsigned char PIE1 @ 0x001E;

# 45
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit Z @ ((unsigned)&STATUS*8)+2;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit C @ ((unsigned)&STATUS*8)+0;



volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;



volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB0 @ ((unsigned)&PORTB*8)+0;



volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;



volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;



volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;



volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit TMR2IE @ ((unsigned)&INTCON*8)+4;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit TMR2IF @ ((unsigned)&INTCON*8)+1;
volatile bit RBIF @ ((unsigned)&INTCON*8)+0;



volatile bit KDONE @ ((unsigned)&KEYCON0*8)+7;
volatile bit CAPK2 @ ((unsigned)&KEYCON0*8)+5;
volatile bit CAPK1 @ ((unsigned)&KEYCON0*8)+4;
volatile bit CAPK0 @ ((unsigned)&KEYCON0*8)+3;
volatile bit KTOUT @ ((unsigned)&KEYCON0*8)+2;
volatile bit KCAP @ ((unsigned)&KEYCON0*8)+1;
volatile bit KEN @ ((unsigned)&KEYCON0*8)+0;



volatile bit KVREF1 @ ((unsigned)&KEYCON1*8)+7;
volatile bit KVREF0 @ ((unsigned)&KEYCON1*8)+6;
volatile bit KCLK1 @ ((unsigned)&KEYCON1*8)+5;
volatile bit KCLK0 @ ((unsigned)&KEYCON1*8)+4;
volatile bit KCHS3 @ ((unsigned)&KEYCON1*8)+3;
volatile bit KCHS2 @ ((unsigned)&KEYCON1*8)+2;
volatile bit KCHS1 @ ((unsigned)&KEYCON1*8)+1;
volatile bit KCHS0 @ ((unsigned)&KEYCON1*8)+0;



volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;



volatile bit PWM2EN @ ((unsigned)&CCPCON*8)+6;
volatile bit PWM2B1 @ ((unsigned)&CCPCON*8)+5;
volatile bit PWM2B0 @ ((unsigned)&CCPCON*8)+4;
volatile bit PWM1EN @ ((unsigned)&CCPCON*8)+2;
volatile bit PWM1B1 @ ((unsigned)&CCPCON*8)+1;
volatile bit PWM1B0 @ ((unsigned)&CCPCON*8)+0;



volatile bit CAP_LVBO2 @ ((unsigned)&KEYCON2*8)+7;
volatile bit CAP_LVBO1 @ ((unsigned)&KEYCON2*8)+6;
volatile bit CAP_LVBO0 @ ((unsigned)&KEYCON2*8)+5;
volatile bit TKEN @ ((unsigned)&KEYCON2*8)+0;



volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;



volatile bit WPDB5 @ ((unsigned)&WPDB*8)+5;
volatile bit WPDB4 @ ((unsigned)&WPDB*8)+4;
volatile bit WPDB3 @ ((unsigned)&WPDB*8)+3;
volatile bit WPDB2 @ ((unsigned)&WPDB*8)+2;
volatile bit WPDB1 @ ((unsigned)&WPDB*8)+1;
volatile bit WPDB0 @ ((unsigned)&WPDB*8)+0;



volatile bit ANS5 @ ((unsigned)&ANSEL*8)+5;
volatile bit ANS4 @ ((unsigned)&ANSEL*8)+4;
volatile bit ANS3 @ ((unsigned)&ANSEL*8)+3;
volatile bit ANS2 @ ((unsigned)&ANSEL*8)+2;
volatile bit ANS1 @ ((unsigned)&ANSEL*8)+1;
volatile bit ANS0 @ ((unsigned)&ANSEL*8)+0;



volatile bit TKIF @ ((unsigned)&PIR1*8)+0;



volatile bit TKIE @ ((unsigned)&PIE1*8)+0;


# 27 "E:\SCMCU_IDE_V2.00.08_Beta9\data\include\sc.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 76
extern unsigned int flash_read(unsigned short addr);


# 149
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);

# 184
extern unsigned char __resetbits;
extern __bit __powerdown;
extern __bit __timeout;


# 12 "D:\ÎÒµÄÎÄµµ\Documents\WeChat Files\hmm665544\FileStorage\File\2020-07\GS_01 ´¥Ãþ(1)\GS_01 ´¥Ãþ\GN_101bt\Touch_Kscan_Library.h"
#pragma warning disable 752,759

# 5 "D:\ÎÒµÄÎÄµµ\Documents\WeChat Files\hmm665544\FileStorage\File\2020-07\GS_01 ´¥Ãþ(1)\GS_01 ´¥Ãþ\GN_101bt\TouchKeyConst.h"
const unsigned char C_OPTION_REG_ = 0x09;

# 18 "D:\ÎÒµÄÎÄµµ\Documents\WeChat Files\hmm665544\FileStorage\File\2020-07\GS_01 ´¥Ãþ(1)\GS_01 ´¥Ãþ\GN_101bt\Touch_Kscan_Library.h"
extern void CheckTouchKey(void);
extern void SystemEnterSleep();
extern volatile bit b_kerr;

# 26
extern volatile unsigned char KeyFlag[2];

# 63
const unsigned char Table_KeyChannel[] = {
0x40|0x10|0x00
};


const unsigned char Table_KeyCap[] = {
0x00 | 0x2
};


const unsigned char Table_KeyDown[] = {
10
};


const unsigned char Table_C_LVBO[] = {
0x80,
};

# 90
unsigned int KeyResSum[1];
unsigned int KeyOldValue0[1];
unsigned int KeyOldValue1[1];
unsigned int KeyOldValue2[1];
unsigned int KeyReference[1];
unsigned char KeyUpShake[1];

const unsigned int KeyValidTime = 60*(1000/4);
const unsigned char KeyTotalNumber = 1;
const unsigned char KeyShakeCounter = 2;
const unsigned char KeyValidNumber = 1;

const unsigned int KeyWakeUpEn = 0x0001;


const unsigned char WaterModeSel = 1;

# 5 "D:\ÎÒµÄÎÄµµ\Documents\WeChat Files\hmm665544\FileStorage\File\2020-07\GS_01 ´¥Ãþ(1)\GS_01 ´¥Ãþ\GN_101bt\main.c"
void processPress();

volatile unsigned char MainTime;
volatile unsigned int PwmData;
volatile bit B_MainLoop,B_OnOff;
unsigned char key1Count = 0;
unsigned int time1sCount = 0;
unsigned char pressKey = 0;
unsigned char lowCount = 26;


void Init_System()
{
asm("nop");
asm("clrwdt");
OPTION_REG |= 0x07;

OPTION_REG |= 0x08;
asm("clrwdt");

OPTION_REG = C_OPTION_REG_;
asm("clrwdt");

INTCON = 0;
OSCCON = 0X70;

PORTB = 0;
TRISB = 0;
PORTB = 0X10;
WPUB = 0X10;

WPDB = 0;



TMR0 = 6;
INTCON = 0XA0;

PwmData = 0xF0;
PR2 =0XFF;
}

# 55
void Refurbish_Sfr()
{

INTCON = 0XA0;
TRISB = 0;
WPUB = 0X10;
}

# 67
void KeyServer()
{
static unsigned char KeyOldFlag = 0;
if(KeyFlag[0])
{
if(KeyFlag[0] != KeyOldFlag)
{

KeyOldFlag ^= KeyFlag[0];
if((KeyOldFlag&0x1) && (KeyFlag[0]&0x1))
{

B_OnOff = !B_OnOff;

pressKey = 1;
}
if((KeyOldFlag&0x2) && (KeyFlag[0]&0x2))
{

PORTB ^= 0X10;
B_OnOff = 1;
}
if((KeyOldFlag&0x4) && (KeyFlag[0]&0x4))
{

B_OnOff = 1;
PwmData = PwmData+0X10;
PwmData &= 0x03ff;
unsigned char Temp=0x40;

if(PwmData&0x01)
Temp |=0x10;
if(PwmData&0x02)
Temp |=0x20;
CCPCON = Temp;
Temp = (PwmData>>2);
CCPR2L = Temp;
TMR2IF = 0;
T2CON &= 0X04;
TMR2ON = 1;
TRISB4 = 0;

}
if((KeyOldFlag&0x8) && (KeyFlag[0]&0x8))
{

PORTB ^= 0X10;
B_OnOff = 1;
}

KeyOldFlag = KeyFlag[0];
}
}
else
{
KeyOldFlag = 0;
pressKey = 0;
}
}

# 130
void interrupt Isr_Timer()
{
if(T0IF)
{
TMR0 += 6;
T0IF = 0;
if(++MainTime >= 32)
{
MainTime = 0;
B_MainLoop = 1;
}
}
else
{
INTCON = 0XA0;
PIR1 = 0;
}

}

# 153
void WorkSleep()
{

static unsigned char time;

if(B_OnOff)
time = 0;

if(++time >= 250)
{
time = 0;
INTCON = 0;
PIE1 = 0;
PIR1 = 0;
T2CON = 0;
CCPCON = 0;
KEYCON0 = 0;

TRISB = 0;
PORTB = 0;
WPUB = 0;

# 185
SystemEnterSleep();
if(RBIF) RBIF = 0;

Refurbish_Sfr();
}

}

# 196
void main()
{
Init_System();
while(1)
{
if(B_MainLoop)
{
B_MainLoop = 0;
asm("clrwdt");

Refurbish_Sfr();
CheckTouchKey();
KeyServer();
WorkSleep();
processPress();
}
}
}


void processPress()
{
if(pressKey)
{
lowCount = 0;
}
if(++lowCount > 25)
{
lowCount = 26;
PORTB |= 0x10;
}
else
{
PORTB &= 0xEF;
}
}
