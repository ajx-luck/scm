

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Aug 25 18:28:37 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1713S
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	swtext1,local,class=CONST,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	swtext2,local,class=CONST,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	swtext3,local,class=CONST,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	swtext4,local,class=CONST,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	intentry,global,class=CODE,delta=2
    44                           	psect	pa_nodes0,global,class=CODE,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 1.45
    48                           ; Generated 16/11/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F887 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	idataCOMMON
    83  0000                     __pidataCOMMON:	
    84                           
    85                           	psect	idataBANK0
    86  0000                     __pidataBANK0:	
    87  001F                     _ADCON0	set	31
    88  001E                     _ADRESH	set	30
    89  000B                     _INTCON	set	11
    90  0009                     _PORTE	set	9
    91  0007                     _PORTC	set	7
    92  0006                     _PORTB	set	6
    93  0005                     _PORTA	set	5
    94  0001                     _TMR0	set	1
    95  00F9                     _GODONE	set	249
    96  005A                     _T0IF	set	90
    97  0058                     _RBIF	set	88
    98  009F                     _ADCON1	set	159
    99  009E                     _ADRESL	set	158
   100  0096                     _IOCB	set	150
   101  0095                     _WPUB	set	149
   102  008F                     _OSCCON	set	143
   103  0087                     _TRISC	set	135
   104  0086                     _TRISB	set	134
   105  0085                     _TRISA	set	133
   106  0081                     _OPTION_REG	set	129
   107  011A                     _WPUE	set	282
   108  0197                     _COMEN	set	407
   109  018F                     _WPUC	set	399
   110  018E                     _WPUA	set	398
   111  0189                     _ANSELH	set	393
   112  0188                     _ANSEL	set	392
   113                           
   114                           	psect	cinit
   115  000B                     start_initialization:	
   116                           ; #config settings
   117                           
   118  000B                     __initialization:	
   119                           
   120                           ;initializer for _numArray
   121  000B  303F               	movlw	63
   122  000C  00BD               	movwf	__pdataBANK0& (0+127)
   123  000D  3006               	movlw	6
   124  000E  00BE               	movwf	(__pdataBANK0+1)& (0+127)
   125  000F  305B               	movlw	91
   126  0010  00BF               	movwf	(__pdataBANK0+2)& (0+127)
   127  0011  304F               	movlw	79
   128  0012  00C0               	movwf	(__pdataBANK0+3)& (0+127)
   129  0013  3066               	movlw	102
   130  0014  00C1               	movwf	(__pdataBANK0+4)& (0+127)
   131  0015  306D               	movlw	109
   132  0016  00C2               	movwf	(__pdataBANK0+5)& (0+127)
   133  0017  307D               	movlw	125
   134  0018  00C3               	movwf	(__pdataBANK0+6)& (0+127)
   135  0019  3007               	movlw	7
   136  001A  00C4               	movwf	(__pdataBANK0+7)& (0+127)
   137  001B  307F               	movlw	127
   138  001C  00C5               	movwf	(__pdataBANK0+8)& (0+127)
   139  001D  3067               	movlw	103
   140  001E  00C6               	movwf	(__pdataBANK0+9)& (0+127)
   141                           
   142                           ;initializer for _nubShowTime
   143  001F  3014               	movlw	20
   144  0020  00FB               	movwf	__pdataCOMMON& (0+127)
   145                           
   146                           ; Clear objects allocated to BANK0
   147  0021  01B3               	clrf	__pbssBANK0& (0+127)
   148  0022  01B4               	clrf	(__pbssBANK0+1)& (0+127)
   149  0023  01B5               	clrf	(__pbssBANK0+2)& (0+127)
   150  0024  01B6               	clrf	(__pbssBANK0+3)& (0+127)
   151  0025  01B7               	clrf	(__pbssBANK0+4)& (0+127)
   152  0026  01B8               	clrf	(__pbssBANK0+5)& (0+127)
   153  0027  01B9               	clrf	(__pbssBANK0+6)& (0+127)
   154  0028  01BA               	clrf	(__pbssBANK0+7)& (0+127)
   155  0029  01BB               	clrf	(__pbssBANK0+8)& (0+127)
   156  002A  01BC               	clrf	(__pbssBANK0+9)& (0+127)
   157                           
   158                           ; Clear objects allocated to COMMON
   159  002B  01F8               	clrf	__pbssCOMMON& (0+127)
   160  002C  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   161  002D  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   162  002E                     end_of_initialization:	
   163                           ;End of C runtime variable initialization code
   164                           
   165  002E                     __end_of__initialization:	
   166  002E  0183               	clrf	3
   167  002F  295A               	ljmp	_main	;jump to C main() function
   168                           
   169                           	psect	bssCOMMON
   170  0078                     __pbssCOMMON:	
   171  0078                     _tempgeweiNum:	
   172  0078                     	ds	1
   173  0079                     _tempshiweiNum:	
   174  0079                     	ds	1
   175  007A                     _tempbaiweiNum:	
   176  007A                     	ds	1
   177                           
   178                           	psect	dataCOMMON
   179  007B                     __pdataCOMMON:	
   180  007B                     _nubShowTime:	
   181  007B                     	ds	1
   182                           
   183                           	psect	bssBANK0
   184  0033                     __pbssBANK0:	
   185  0033                     _adresult:	
   186  0033                     	ds	2
   187  0035                     _keyCount:	
   188  0035                     	ds	1
   189  0036                     _keyNub:	
   190  0036                     	ds	1
   191  0037                     _keyClick:	
   192  0037                     	ds	1
   193  0038                     _count500ms:	
   194  0038                     	ds	1
   195  0039                     _refreshCount:	
   196  0039                     	ds	1
   197  003A                     _nubStep:	
   198  003A                     	ds	1
   199  003B                     _intFlag:	
   200  003B                     	ds	1
   201  003C                     _intCount:	
   202  003C                     	ds	1
   203                           
   204                           	psect	dataBANK0
   205  003D                     __pdataBANK0:	
   206  003D                     _numArray:	
   207  003D                     	ds	10
   208                           
   209                           	psect	cstackCOMMON
   210  0070                     __pcstackCOMMON:	
   211  0070                     ?_initConfig:	
   212  0070                     ?_refreshNub:	
   213                           ; 1 bytes @ 0x0
   214                           
   215  0070                     ?_keyCtr:	
   216                           ; 1 bytes @ 0x0
   217                           
   218  0070                     ?_keyRead:	
   219                           ; 1 bytes @ 0x0
   220                           
   221  0070                     ?_setInput:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  0070                     ?_DelayXms:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0070                     ?_WU:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     ?_RUO:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  0070                     ?_ZHONG:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0070                     ?_QIANG:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0070                     ?_setOutput:	
   240                           ; 1 bytes @ 0x0
   241                           
   242  0070                     ?_setHightOutput:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0070                     ?_setlowOutput:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0070                     ?_delayms:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0070                     ?_setLow:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     ?_Timer0_Isr:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     ??_Timer0_Isr:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ?_main:	
   261                           ; 1 bytes @ 0x0
   262                           
   263                           
   264                           ; 1 bytes @ 0x0
   265  0070                     	ds	2
   266  0072                     ??_initConfig:	
   267  0072                     ??_keyRead:	
   268                           ; 1 bytes @ 0x2
   269                           
   270  0072                     ??_setInput:	
   271                           ; 1 bytes @ 0x2
   272                           
   273  0072                     ??_DelayXms:	
   274                           ; 1 bytes @ 0x2
   275                           
   276  0072                     ??_setOutput:	
   277                           ; 1 bytes @ 0x2
   278                           
   279  0072                     ??_setHightOutput:	
   280                           ; 1 bytes @ 0x2
   281                           
   282  0072                     ??_setlowOutput:	
   283                           ; 1 bytes @ 0x2
   284                           
   285  0072                     ??_delayms:	
   286                           ; 1 bytes @ 0x2
   287                           
   288  0072                     ?_ADC_Sample:	
   289                           ; 1 bytes @ 0x2
   290                           
   291  0072                     ?___wmul:	
   292                           ; 2 bytes @ 0x2
   293                           
   294  0072                     ?___lwdiv:	
   295                           ; 2 bytes @ 0x2
   296                           
   297  0072                     keyRead@KeyStatus:	
   298                           ; 2 bytes @ 0x2
   299                           
   300  0072                     DelayXms@x:	
   301                           ; 1 bytes @ 0x2
   302                           
   303  0072                     setHightOutput@outPut:	
   304                           ; 1 bytes @ 0x2
   305                           
   306  0072                     setlowOutput@outPut:	
   307                           ; 1 bytes @ 0x2
   308                           
   309  0072                     setOutput@outPut:	
   310                           ; 1 bytes @ 0x2
   311                           
   312  0072                     delayms@time:	
   313                           ; 1 bytes @ 0x2
   314                           
   315  0072                     ___wmul@multiplier:	
   316                           ; 1 bytes @ 0x2
   317                           
   318  0072                     ___lwdiv@divisor:	
   319                           ; 2 bytes @ 0x2
   320                           
   321                           
   322                           ; 2 bytes @ 0x2
   323  0072                     	ds	1
   324  0073                     ??_keyCtr:	
   325  0073                     ??_setLow:	
   326                           ; 1 bytes @ 0x3
   327                           
   328  0073                     DelayXms@i:	
   329                           ; 1 bytes @ 0x3
   330                           
   331  0073                     delayms@i:	
   332                           ; 1 bytes @ 0x3
   333                           
   334                           
   335                           ; 1 bytes @ 0x3
   336  0073                     	ds	1
   337  0074                     ?_low1:	
   338  0074                     ?_low2:	
   339                           ; 1 bytes @ 0x4
   340                           
   341  0074                     ?_low3:	
   342                           ; 1 bytes @ 0x4
   343                           
   344  0074                     ?_low4:	
   345                           ; 1 bytes @ 0x4
   346                           
   347  0074                     ??_ADC_Sample:	
   348                           ; 1 bytes @ 0x4
   349                           
   350  0074                     ?_showNub:	
   351                           ; 1 bytes @ 0x4
   352                           
   353  0074                     DelayXms@j:	
   354                           ; 1 bytes @ 0x4
   355                           
   356  0074                     showNub@low:	
   357                           ; 1 bytes @ 0x4
   358                           
   359  0074                     low1@shi:	
   360                           ; 1 bytes @ 0x4
   361                           
   362  0074                     low2@shi:	
   363                           ; 1 bytes @ 0x4
   364                           
   365  0074                     low3@shi:	
   366                           ; 1 bytes @ 0x4
   367                           
   368  0074                     low4@shi:	
   369                           ; 1 bytes @ 0x4
   370                           
   371  0074                     ___wmul@multiplicand:	
   372                           ; 1 bytes @ 0x4
   373                           
   374  0074                     ___lwdiv@dividend:	
   375                           ; 2 bytes @ 0x4
   376                           
   377                           
   378                           ; 2 bytes @ 0x4
   379  0074                     	ds	1
   380  0075                     ??_showNub:	
   381  0075                     showNub@hight:	
   382                           ; 1 bytes @ 0x5
   383                           
   384  0075                     low1@ge:	
   385                           ; 1 bytes @ 0x5
   386                           
   387  0075                     low2@ge:	
   388                           ; 1 bytes @ 0x5
   389                           
   390  0075                     low3@ge:	
   391                           ; 1 bytes @ 0x5
   392                           
   393  0075                     low4@ge:	
   394                           ; 1 bytes @ 0x5
   395                           
   396                           
   397                           ; 1 bytes @ 0x5
   398  0075                     	ds	1
   399  0076                     ??_WU:	
   400  0076                     ??_RUO:	
   401                           ; 1 bytes @ 0x6
   402                           
   403  0076                     ??_ZHONG:	
   404                           ; 1 bytes @ 0x6
   405                           
   406  0076                     ??_QIANG:	
   407                           ; 1 bytes @ 0x6
   408                           
   409  0076                     ??___wmul:	
   410                           ; 1 bytes @ 0x6
   411                           
   412  0076                     ??___lwdiv:	
   413                           ; 1 bytes @ 0x6
   414                           
   415  0076                     low1@dp:	
   416                           ; 1 bytes @ 0x6
   417                           
   418  0076                     low2@h4:	
   419                           ; 1 bytes @ 0x6
   420                           
   421  0076                     low3@h5:	
   422                           ; 1 bytes @ 0x6
   423                           
   424  0076                     low4@h6:	
   425                           ; 1 bytes @ 0x6
   426                           
   427  0076                     ___wmul@product:	
   428                           ; 1 bytes @ 0x6
   429                           
   430                           
   431                           ; 2 bytes @ 0x6
   432  0076                     	ds	1
   433  0077                     ??_low2:	
   434  0077                     ??_low3:	
   435                           ; 1 bytes @ 0x7
   436                           
   437  0077                     low1@h3:	
   438                           ; 1 bytes @ 0x7
   439                           
   440  0077                     low4@h123:	
   441                           ; 1 bytes @ 0x7
   442                           
   443                           
   444                           ; 1 bytes @ 0x7
   445  0077                     	ds	1
   446  0078                     ??_refreshNub:	
   447  0078                     ??_ADC_AVG:	
   448                           ; 1 bytes @ 0x8
   449                           
   450  0078                     ??_main:	
   451                           ; 1 bytes @ 0x8
   452                           
   453                           
   454                           	psect	cstackBANK0
   455  0020                     __pcstackBANK0:	
   456                           ; 1 bytes @ 0x8
   457                           
   458  0020                     ??_low1:	
   459  0020                     ??_low4:	
   460                           ; 1 bytes @ 0x0
   461                           
   462  0020                     ADC_Sample@adch:	
   463                           ; 1 bytes @ 0x0
   464                           
   465  0020                     low2@bai:	
   466                           ; 1 bytes @ 0x0
   467                           
   468  0020                     low3@bai:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  0020                     ___lwdiv@counter:	
   472                           ; 1 bytes @ 0x0
   473                           
   474                           
   475                           ; 1 bytes @ 0x0
   476  0020                     	ds	1
   477  0021                     ADC_Sample@i:	
   478  0021                     low1@bai:	
   479                           ; 1 bytes @ 0x1
   480                           
   481  0021                     low4@bai:	
   482                           ; 1 bytes @ 0x1
   483                           
   484  0021                     ___lwdiv@quotient:	
   485                           ; 1 bytes @ 0x1
   486                           
   487                           
   488                           ; 2 bytes @ 0x1
   489  0021                     	ds	1
   490  0022                     ADC_Sample@ad_temp:	
   491                           
   492                           ; 2 bytes @ 0x2
   493  0022                     	ds	2
   494  0024                     ?_ADC_AVG:	
   495  0024                     ADC_AVG@adtime:	
   496                           ; 2 bytes @ 0x4
   497                           
   498                           
   499                           ; 1 bytes @ 0x4
   500  0024                     	ds	3
   501  0027                     ADC_AVG@adch:	
   502                           
   503                           ; 1 bytes @ 0x7
   504  0027                     	ds	1
   505  0028                     ADC_AVG@adsum:	
   506                           
   507                           ; 2 bytes @ 0x8
   508  0028                     	ds	2
   509  002A                     ADC_AVG@i:	
   510                           
   511                           ; 1 bytes @ 0xA
   512  002A                     	ds	1
   513  002B                     main@av:	
   514                           
   515                           ; 2 bytes @ 0xB
   516  002B                     	ds	2
   517  002D                     main@res:	
   518                           
   519                           ; 2 bytes @ 0xD
   520  002D                     	ds	2
   521  002F                     main@res2:	
   522                           
   523                           ; 2 bytes @ 0xF
   524  002F                     	ds	2
   525  0031                     main@i:	
   526                           
   527                           ; 2 bytes @ 0x11
   528  0031                     	ds	2
   529                           
   530                           	psect	maintext
   531  015A                     __pmaintext:	
   532 ;;
   533 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   534 ;;
   535 ;; *************** function _main *****************
   536 ;; Defined at:
   537 ;;		line 66 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\main.c"
   538 ;; Parameters:    Size  Location     Type
   539 ;;		None
   540 ;; Auto vars:     Size  Location     Type
   541 ;;  i               2   17[BANK0 ] int 
   542 ;;  res2            2   15[BANK0 ] unsigned int 
   543 ;;  res             2   13[BANK0 ] unsigned int 
   544 ;;  av              2   11[BANK0 ] unsigned int 
   545 ;; Return value:  Size  Location     Type
   546 ;;                  1    wreg      void 
   547 ;; Registers used:
   548 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   549 ;; Tracked objects:
   550 ;;		On entry : B00/0
   551 ;;		On exit  : 300/0
   552 ;;		Unchanged: 0/0
   553 ;; Data sizes:     COMMON   BANK0   BANK1
   554 ;;      Params:         0       0       0
   555 ;;      Locals:         0       8       0
   556 ;;      Temps:          0       0       0
   557 ;;      Totals:         0       8       0
   558 ;;Total ram usage:        8 bytes
   559 ;; Hardware stack levels required when called:    6
   560 ;; This function calls:
   561 ;;		_ADC_AVG
   562 ;;		___lwdiv
   563 ;;		___wmul
   564 ;;		_initConfig
   565 ;;		_keyCtr
   566 ;;		_refreshNub
   567 ;; This function is called by:
   568 ;;		Startup code after reset
   569 ;; This function uses a non-reentrant model
   570 ;;
   571                           
   572                           
   573                           ;psect for function _main
   574  015A                     _main:	
   575                           
   576                           ;main.c: 68: initConfig();
   577                           
   578                           ;incstack = 0
   579                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   580  015A  2357               	fcall	_initConfig
   581  015B                     l615:	
   582                           ;main.c: 69: for(;;)
   583                           
   584  015B  0064               	clrwdt	;# 
   585                           
   586                           ;main.c: 72: refreshNub();
   587  015C  2099               	fcall	_refreshNub
   588                           
   589                           ;main.c: 73: if(intFlag == 0)
   590  015D  1283               	bcf	3,5	;RP0=0, select bank0
   591  015E  1303               	bcf	3,6	;RP1=0, select bank0
   592  015F  083B               	movf	_intFlag,w
   593  0160  1903               	btfsc	3,2
   594  0161  295B               	goto	l615
   595                           
   596                           ;main.c: 75: intFlag = 0;
   597  0162  01BB               	clrf	_intFlag
   598                           
   599                           ;main.c: 77: keyCtr();
   600  0163  240A               	fcall	_keyCtr
   601                           
   602                           ;main.c: 79: TRISB |= 0x04;
   603  0164  1683               	bsf	3,5	;RP0=1, select bank1
   604  0165  1506               	bsf	6,2	;volatile
   605                           
   606                           ;main.c: 80: ANSEL = 0x00;
   607  0166  1703               	bsf	3,6	;RP1=1, select bank3
   608  0167  0188               	clrf	8	;volatile
   609                           
   610                           ;main.c: 81: ANSELH = 0x01;
   611  0168  3001               	movlw	1
   612  0169  0089               	movwf	9	;volatile
   613                           
   614                           ;main.c: 83: uint16 res = ADC_AVG(0x0F,8);
   615  016A  3008               	movlw	8
   616  016B  1283               	bcf	3,5	;RP0=0, select bank0
   617  016C  1303               	bcf	3,6	;RP1=0, select bank0
   618  016D  00A4               	movwf	ADC_AVG@adtime
   619  016E  300F               	movlw	15
   620  016F  237E               	fcall	_ADC_AVG
   621  0170  0825               	movf	?_ADC_AVG+1,w
   622  0171  00AE               	movwf	main@res+1
   623  0172  0824               	movf	?_ADC_AVG,w
   624  0173  00AD               	movwf	main@res
   625                           
   626                           ;main.c: 84: uint16 av = 6000/res;
   627  0174  082E               	movf	main@res+1,w
   628  0175  00F3               	movwf	___lwdiv@divisor+1
   629  0176  082D               	movf	main@res,w
   630  0177  00F2               	movwf	___lwdiv@divisor
   631  0178  3070               	movlw	112
   632  0179  00F4               	movwf	___lwdiv@dividend
   633  017A  3017               	movlw	23
   634  017B  00F5               	movwf	___lwdiv@dividend+1
   635  017C  232D               	fcall	___lwdiv
   636  017D  0873               	movf	?___lwdiv+1,w
   637  017E  00AC               	movwf	main@av+1
   638  017F  0872               	movf	?___lwdiv,w
   639  0180  00AB               	movwf	main@av
   640                           
   641                           ;main.c: 86: for(int i=0;i<10;i++)
   642  0181  01B1               	clrf	main@i
   643  0182  01B2               	clrf	main@i+1
   644  0183                     l3946:	
   645                           
   646                           ;main.c: 87: {
   647                           ;main.c: 88: refreshNub();
   648  0183  2099               	fcall	_refreshNub
   649  0184  1283               	bcf	3,5	;RP0=0, select bank0
   650  0185  1303               	bcf	3,6	;RP1=0, select bank0
   651  0186  0AB1               	incf	main@i,f
   652  0187  1903               	skipnz
   653  0188  0AB2               	incf	main@i+1,f
   654  0189  0832               	movf	main@i+1,w
   655  018A  3A80               	xorlw	128
   656  018B  00FF               	movwf	127
   657  018C  3080               	movlw	128
   658  018D  027F               	subwf	127,w
   659  018E  1D03               	skipz
   660  018F  2992               	goto	u1835
   661  0190  300A               	movlw	10
   662  0191  0231               	subwf	main@i,w
   663  0192                     u1835:	
   664  0192  1C03               	skipc
   665  0193  2983               	goto	l3946
   666                           
   667                           ;main.c: 89: }
   668                           ;main.c: 104: res2 = ADC_AVG(0x08,8);
   669  0194  3008               	movlw	8
   670  0195  1283               	bcf	3,5	;RP0=0, select bank0
   671  0196  1303               	bcf	3,6	;RP1=0, select bank0
   672  0197  00A4               	movwf	ADC_AVG@adtime
   673  0198  237E               	fcall	_ADC_AVG
   674  0199  0825               	movf	?_ADC_AVG+1,w
   675  019A  00B0               	movwf	main@res2+1
   676  019B  0824               	movf	?_ADC_AVG,w
   677  019C  00AF               	movwf	main@res2
   678                           
   679                           ;main.c: 105: if(res2)
   680  019D  0430               	iorwf	main@res2+1,w
   681  019E  1903               	btfsc	3,2
   682  019F  29AB               	goto	l3960
   683  01A0  0830               	movf	main@res2+1,w
   684  01A1  00F3               	movwf	___wmul@multiplier+1
   685  01A2  082F               	movf	main@res2,w
   686  01A3  00F2               	movwf	___wmul@multiplier
   687  01A4  082C               	movf	main@av+1,w
   688  01A5  00F5               	movwf	___wmul@multiplicand+1
   689  01A6  082B               	movf	main@av,w
   690  01A7  00F4               	movwf	___wmul@multiplicand
   691  01A8  23DD               	fcall	___wmul
   692                           
   693                           ;main.c: 110: nubShowTime = 20;
   694  01A9  3014               	movlw	20
   695  01AA  00FB               	movwf	_nubShowTime
   696  01AB                     l3960:	
   697                           
   698                           ;main.c: 111: }
   699                           ;main.c: 112: nubShowTime = 20;
   700  01AB  3014               	movlw	20
   701  01AC  00FB               	movwf	_nubShowTime
   702  01AD  295B               	goto	l615
   703  01AE                     __end_of_main:	
   704                           
   705                           	psect	text1
   706  040A                     __ptext1:	
   707 ;; *************** function _keyCtr *****************
   708 ;; Defined at:
   709 ;;		line 118 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\main.c"
   710 ;; Parameters:    Size  Location     Type
   711 ;;		None
   712 ;; Auto vars:     Size  Location     Type
   713 ;;		None
   714 ;; Return value:  Size  Location     Type
   715 ;;                  1    wreg      void 
   716 ;; Registers used:
   717 ;;		wreg, status,2, status,0, pclath, cstack
   718 ;; Tracked objects:
   719 ;;		On entry : 300/0
   720 ;;		On exit  : 300/0
   721 ;;		Unchanged: 0/0
   722 ;; Data sizes:     COMMON   BANK0   BANK1
   723 ;;      Params:         0       0       0
   724 ;;      Locals:         0       0       0
   725 ;;      Temps:          0       0       0
   726 ;;      Totals:         0       0       0
   727 ;;Total ram usage:        0 bytes
   728 ;; Hardware stack levels used:    1
   729 ;; Hardware stack levels required when called:    2
   730 ;; This function calls:
   731 ;;		_keyRead
   732 ;; This function is called by:
   733 ;;		_main
   734 ;; This function uses a non-reentrant model
   735 ;;
   736                           
   737                           
   738                           ;psect for function _keyCtr
   739  040A                     _keyCtr:	
   740                           
   741                           ;main.c: 120: keyClick = keyRead(0x18&(~PORTB));
   742                           
   743                           ;incstack = 0
   744                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
   745  040A  0906               	comf	6,w	;volatile
   746  040B  3918               	andlw	24
   747  040C  242B               	fcall	_keyRead
   748  040D  00B7               	movwf	_keyClick
   749                           
   750                           ;main.c: 121: if(keyClick > 0)
   751  040E  0837               	movf	_keyClick,w
   752  040F  1903               	btfsc	3,2
   753  0410  0008               	return
   754                           
   755                           ;main.c: 122: {
   756                           ;main.c: 123: if(keyNub & 0x08)
   757  0411  1DB6               	btfss	_keyNub,3
   758  0412  2C16               	goto	l626
   759                           
   760                           ;main.c: 124: {
   761                           ;main.c: 126: PORTB ^= 0x20;
   762  0413  3020               	movlw	32
   763  0414  0686               	xorwf	6,f	;volatile
   764                           
   765                           ;main.c: 127: }
   766  0415  0008               	return
   767  0416                     l626:	
   768                           
   769                           ;main.c: 128: else
   770                           ;main.c: 129: {
   771                           ;main.c: 131: PORTE |= 0x01;
   772  0416  1409               	bsf	9,0	;volatile
   773                           
   774                           ;main.c: 132: nubShowTime = 20;
   775  0417  3014               	movlw	20
   776  0418  00FB               	movwf	_nubShowTime
   777                           
   778                           ;main.c: 133: count500ms = 0;
   779  0419  01B8               	clrf	_count500ms
   780  041A  0008               	return
   781  041B                     __end_of_keyCtr:	
   782                           
   783                           	psect	text2
   784  042B                     __ptext2:	
   785 ;; *************** function _keyRead *****************
   786 ;; Defined at:
   787 ;;		line 256 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\main.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  KeyStatus       1    wreg     unsigned char 
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  KeyStatus       1    2[COMMON] unsigned char 
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      unsigned char 
   794 ;; Registers used:
   795 ;;		wreg, status,2, status,0
   796 ;; Tracked objects:
   797 ;;		On entry : 300/0
   798 ;;		On exit  : 300/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMMON   BANK0   BANK1
   801 ;;      Params:         0       0       0
   802 ;;      Locals:         1       0       0
   803 ;;      Temps:          0       0       0
   804 ;;      Totals:         1       0       0
   805 ;;Total ram usage:        1 bytes
   806 ;; Hardware stack levels used:    1
   807 ;; Hardware stack levels required when called:    1
   808 ;; This function calls:
   809 ;;		Nothing
   810 ;; This function is called by:
   811 ;;		_keyCtr
   812 ;; This function uses a non-reentrant model
   813 ;;
   814                           
   815                           
   816                           ;psect for function _keyRead
   817  042B                     _keyRead:	
   818                           
   819                           ;incstack = 0
   820                           ; Regs used in _keyRead: [wreg+status,2+status,0]
   821                           ;keyRead@KeyStatus stored from wreg
   822  042B  00F2               	movwf	keyRead@KeyStatus
   823                           
   824                           ;main.c: 258: if (KeyStatus)
   825  042C  0872               	movf	keyRead@KeyStatus,w
   826  042D  1903               	btfsc	3,2
   827  042E  2C33               	goto	l3318
   828                           
   829                           ;main.c: 259: {
   830                           ;main.c: 260: keyNub = KeyStatus;
   831  042F  0872               	movf	keyRead@KeyStatus,w
   832  0430  00B6               	movwf	_keyNub
   833                           
   834                           ;main.c: 261: keyCount++;
   835  0431  0AB5               	incf	_keyCount,f
   836                           
   837                           ;main.c: 262: }
   838  0432  3400               	retlw	0
   839  0433                     l3318:	
   840                           
   841                           ;main.c: 263: else
   842                           ;main.c: 264: {
   843                           ;main.c: 265: if(keyCount >= 8)
   844  0433  3008               	movlw	8
   845  0434  0235               	subwf	_keyCount,w
   846                           
   847                           ;main.c: 266: {
   848                           ;main.c: 267: keyCount = 0;
   849  0435  01B5               	clrf	_keyCount
   850  0436  1803               	btfsc	3,0
   851                           
   852                           ;main.c: 268: return 1;
   853  0437  3401               	retlw	1
   854                           
   855                           ;main.c: 271: keyNub = 0;
   856                           
   857                           ;main.c: 269: }
   858                           ;main.c: 270: keyCount = 0;
   859  0438  01B6               	clrf	_keyNub
   860                           
   861                           ;main.c: 272: }
   862                           ;main.c: 273: return 0;
   863  0439  3400               	retlw	0
   864  043A                     __end_of_keyRead:	
   865                           
   866                           	psect	text3
   867  0357                     __ptext3:	
   868 ;; *************** function _initConfig *****************
   869 ;; Defined at:
   870 ;;		line 199 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\main.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;		None
   873 ;; Auto vars:     Size  Location     Type
   874 ;;		None
   875 ;; Return value:  Size  Location     Type
   876 ;;                  1    wreg      void 
   877 ;; Registers used:
   878 ;;		wreg, status,2
   879 ;; Tracked objects:
   880 ;;		On entry : B00/0
   881 ;;		On exit  : 300/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMMON   BANK0   BANK1
   884 ;;      Params:         0       0       0
   885 ;;      Locals:         0       0       0
   886 ;;      Temps:          0       0       0
   887 ;;      Totals:         0       0       0
   888 ;;Total ram usage:        0 bytes
   889 ;; Hardware stack levels used:    1
   890 ;; Hardware stack levels required when called:    1
   891 ;; This function calls:
   892 ;;		Nothing
   893 ;; This function is called by:
   894 ;;		_main
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           
   899                           ;psect for function _initConfig
   900  0357                     _initConfig:	
   901                           
   902                           ;main.c: 201: COMEN = 0x00;
   903                           
   904                           ;incstack = 0
   905                           ; Regs used in _initConfig: [wreg+status,2]
   906  0357  1683               	bsf	3,5	;RP0=1, select bank3
   907  0358  1703               	bsf	3,6	;RP1=1, select bank3
   908  0359  0197               	clrf	23	;volatile
   909                           
   910                           ;main.c: 202: PORTA = 0x00;
   911  035A  1283               	bcf	3,5	;RP0=0, select bank0
   912                           
   913                           ;main.c: 203: PORTB = 0x00;
   914                           
   915                           ;main.c: 204: PORTC = 0x00;
   916                           
   917                           ;main.c: 205: TRISA = 0;
   918  035B  2378               	fcall	PL10	;call to abstracted procedure
   919  035C  0185               	clrf	5	;volatile
   920                           
   921                           ;main.c: 206: TRISB = 0x18;
   922  035D  3018               	movlw	24
   923  035E  0086               	movwf	6	;volatile
   924                           
   925                           ;main.c: 207: TRISC = 0;
   926  035F  0187               	clrf	7	;volatile
   927                           
   928                           ;main.c: 208: WPUA = 0x00;
   929  0360  1703               	bsf	3,6	;RP1=1, select bank3
   930  0361  018E               	clrf	14	;volatile
   931                           
   932                           ;main.c: 209: WPUB = 0x18;
   933  0362  1303               	bcf	3,6	;RP1=0, select bank1
   934  0363  0095               	movwf	21	;volatile
   935                           
   936                           ;main.c: 210: WPUC = 0x00;
   937  0364  1703               	bsf	3,6	;RP1=1, select bank3
   938  0365  018F               	clrf	15	;volatile
   939                           
   940                           ;main.c: 211: WPUE = 0x00;
   941  0366  1283               	bcf	3,5	;RP0=0, select bank2
   942  0367  019A               	clrf	26	;volatile
   943                           
   944                           ;main.c: 212: PORTA = 0x00;
   945                           
   946                           ;main.c: 213: PORTB = 0x00;
   947                           
   948                           ;main.c: 214: PORTC = 0x00;
   949                           
   950                           ;main.c: 215: IOCB = 0x00;
   951  0368  2378               	fcall	PL10	;call to abstracted procedure
   952  0369  0196               	clrf	22	;volatile
   953  036A  0000               	nop	;# 
   954  036B  0064               	clrwdt	;# 
   955                           
   956                           ;main.c: 220: INTCON = 0;
   957  036C  018B               	clrf	11	;volatile
   958                           
   959                           ;main.c: 221: OSCCON = 0X71;
   960  036D  3071               	movlw	113
   961  036E  1683               	bsf	3,5	;RP0=1, select bank1
   962  036F  1303               	bcf	3,6	;RP1=0, select bank1
   963  0370  008F               	movwf	15	;volatile
   964                           
   965                           ;main.c: 222: OPTION_REG = 0x06;
   966  0371  3006               	movlw	6
   967  0372  0081               	movwf	1	;volatile
   968                           
   969                           ;main.c: 224: TMR0 = 0;
   970  0373  1283               	bcf	3,5	;RP0=0, select bank0
   971  0374  0181               	clrf	1	;volatile
   972                           
   973                           ;main.c: 225: INTCON = 0xE0;
   974  0375  30E0               	movlw	224
   975  0376  008B               	movwf	11	;volatile
   976  0377  0008               	return
   977  0378                     __end_of_initConfig:	
   978  0378                     PL10:	
   979  0378  1303               	bcf	3,6	;RP1=0, select bank0
   980  0379  0185               	clrf	5	;volatile
   981  037A  0186               	clrf	6	;volatile
   982  037B  0187               	clrf	7	;volatile
   983  037C  1683               	bsf	3,5	;RP0=1, select bank1
   984  037D  0008               	return
   985  037E                     __end_ofPL10:	
   986                           
   987                           	psect	text4
   988  03DD                     __ptext4:	
   989 ;; *************** function ___wmul *****************
   990 ;; Defined at:
   991 ;;		line 15 in file "C:\¹¤¾ß\µ¥Æ¬»úÑ§Ï°×ÊÁÏ\SC8P\SCMCU_IDE_V2.00.07\data\sources\common\Umul16.c"
   992 ;; Parameters:    Size  Location     Type
   993 ;;  multiplier      2    2[COMMON] unsigned int 
   994 ;;  multiplicand    2    4[COMMON] unsigned int 
   995 ;; Auto vars:     Size  Location     Type
   996 ;;  product         2    6[COMMON] unsigned int 
   997 ;; Return value:  Size  Location     Type
   998 ;;                  2    2[COMMON] unsigned int 
   999 ;; Registers used:
  1000 ;;		wreg, status,2, status,0
  1001 ;; Tracked objects:
  1002 ;;		On entry : 300/0
  1003 ;;		On exit  : 300/0
  1004 ;;		Unchanged: 300/0
  1005 ;; Data sizes:     COMMON   BANK0   BANK1
  1006 ;;      Params:         4       0       0
  1007 ;;      Locals:         2       0       0
  1008 ;;      Temps:          0       0       0
  1009 ;;      Totals:         6       0       0
  1010 ;;Total ram usage:        6 bytes
  1011 ;; Hardware stack levels used:    1
  1012 ;; Hardware stack levels required when called:    1
  1013 ;; This function calls:
  1014 ;;		Nothing
  1015 ;; This function is called by:
  1016 ;;		_main
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           
  1021                           ;psect for function ___wmul
  1022  03DD                     ___wmul:	
  1023                           
  1024                           ;incstack = 0
  1025                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1026  03DD  01F6               	clrf	___wmul@product
  1027  03DE  01F7               	clrf	___wmul@product+1
  1028  03DF                     l3420:	
  1029  03DF  1C72               	btfss	___wmul@multiplier,0
  1030  03E0  2BE7               	goto	l3424
  1031  03E1  0874               	movf	___wmul@multiplicand,w
  1032  03E2  07F6               	addwf	___wmul@product,f
  1033  03E3  1803               	skipnc
  1034  03E4  0AF7               	incf	___wmul@product+1,f
  1035  03E5  0875               	movf	___wmul@multiplicand+1,w
  1036  03E6  07F7               	addwf	___wmul@product+1,f
  1037  03E7                     l3424:	
  1038  03E7  1003               	clrc
  1039  03E8  0DF4               	rlf	___wmul@multiplicand,f
  1040  03E9  0DF5               	rlf	___wmul@multiplicand+1,f
  1041  03EA  1003               	clrc
  1042  03EB  0CF3               	rrf	___wmul@multiplier+1,f
  1043  03EC  0CF2               	rrf	___wmul@multiplier,f
  1044  03ED  0872               	movf	___wmul@multiplier,w
  1045  03EE  0473               	iorwf	___wmul@multiplier+1,w
  1046  03EF  1D03               	btfss	3,2
  1047  03F0  2BDF               	goto	l3420
  1048  03F1  0877               	movf	___wmul@product+1,w
  1049  03F2  00F3               	movwf	?___wmul+1
  1050  03F3  0876               	movf	___wmul@product,w
  1051  03F4  00F2               	movwf	?___wmul
  1052  03F5  0008               	return
  1053  03F6                     __end_of___wmul:	
  1054                           
  1055                           	psect	text5
  1056  037E                     __ptext5:	
  1057 ;; *************** function _ADC_AVG *****************
  1058 ;; Defined at:
  1059 ;;		line 187 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\main.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;  adch            1    wreg     unsigned char 
  1062 ;;  adtime          1    4[BANK0 ] unsigned char 
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;  adch            1    7[BANK0 ] unsigned char 
  1065 ;;  i               1   10[BANK0 ] unsigned char 
  1066 ;;  adsum           2    8[BANK0 ] unsigned int 
  1067 ;; Return value:  Size  Location     Type
  1068 ;;                  2    4[BANK0 ] unsigned int 
  1069 ;; Registers used:
  1070 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1071 ;; Tracked objects:
  1072 ;;		On entry : 300/0
  1073 ;;		On exit  : 300/0
  1074 ;;		Unchanged: 0/0
  1075 ;; Data sizes:     COMMON   BANK0   BANK1
  1076 ;;      Params:         0       3       0
  1077 ;;      Locals:         0       4       0
  1078 ;;      Temps:          0       0       0
  1079 ;;      Totals:         0       7       0
  1080 ;;Total ram usage:        7 bytes
  1081 ;; Hardware stack levels used:    1
  1082 ;; Hardware stack levels required when called:    5
  1083 ;; This function calls:
  1084 ;;		_ADC_Sample
  1085 ;;		___lwdiv
  1086 ;;		_refreshNub
  1087 ;; This function is called by:
  1088 ;;		_main
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           
  1093                           ;psect for function _ADC_AVG
  1094  037E                     _ADC_AVG:	
  1095                           
  1096                           ;incstack = 0
  1097                           ; Regs used in _ADC_AVG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1098                           ;ADC_AVG@adch stored from wreg
  1099  037E  00A7               	movwf	ADC_AVG@adch
  1100                           
  1101                           ;main.c: 189: unsigned int adsum = 0;
  1102  037F  01A8               	clrf	ADC_AVG@adsum
  1103  0380  01A9               	clrf	ADC_AVG@adsum+1
  1104                           
  1105                           ;main.c: 190: for(char i = 0; i< adtime;i++)
  1106  0381  01AA               	clrf	ADC_AVG@i
  1107  0382                     l3910:	
  1108  0382  0824               	movf	ADC_AVG@adtime,w
  1109  0383  022A               	subwf	ADC_AVG@i,w
  1110  0384  1803               	btfsc	3,0
  1111  0385  2B93               	goto	l3912
  1112                           
  1113                           ;main.c: 191: {
  1114                           ;main.c: 192: adsum+=ADC_Sample(adch);
  1115  0386  0827               	movf	ADC_AVG@adch,w
  1116  0387  22FA               	fcall	_ADC_Sample
  1117  0388  0872               	movf	?_ADC_Sample,w
  1118  0389  07A8               	addwf	ADC_AVG@adsum,f
  1119  038A  1803               	skipnc
  1120  038B  0AA9               	incf	ADC_AVG@adsum+1,f
  1121  038C  0873               	movf	?_ADC_Sample+1,w
  1122  038D  07A9               	addwf	ADC_AVG@adsum+1,f
  1123                           
  1124                           ;main.c: 193: refreshNub();
  1125  038E  2099               	fcall	_refreshNub
  1126  038F  1283               	bcf	3,5	;RP0=0, select bank0
  1127  0390  1303               	bcf	3,6	;RP1=0, select bank0
  1128  0391  0AAA               	incf	ADC_AVG@i,f
  1129  0392  2B82               	goto	l3910
  1130  0393                     l3912:	
  1131                           
  1132                           ;main.c: 194: }
  1133                           ;main.c: 195: return adsum/adtime;
  1134  0393  0824               	movf	ADC_AVG@adtime,w
  1135  0394  00F2               	movwf	___lwdiv@divisor
  1136  0395  01F3               	clrf	___lwdiv@divisor+1
  1137  0396  0829               	movf	ADC_AVG@adsum+1,w
  1138  0397  00F5               	movwf	___lwdiv@dividend+1
  1139  0398  0828               	movf	ADC_AVG@adsum,w
  1140  0399  00F4               	movwf	___lwdiv@dividend
  1141  039A  232D               	fcall	___lwdiv
  1142  039B  0873               	movf	?___lwdiv+1,w
  1143  039C  00A5               	movwf	?_ADC_AVG+1
  1144  039D  0872               	movf	?___lwdiv,w
  1145  039E  00A4               	movwf	?_ADC_AVG
  1146  039F  0008               	return
  1147  03A0                     __end_of_ADC_AVG:	
  1148                           
  1149                           	psect	text6
  1150  0099                     __ptext6:	
  1151 ;; *************** function _refreshNub *****************
  1152 ;; Defined at:
  1153 ;;		line 141 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\main.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;		None
  1156 ;; Auto vars:     Size  Location     Type
  1157 ;;		None
  1158 ;; Return value:  Size  Location     Type
  1159 ;;                  1    wreg      void 
  1160 ;; Registers used:
  1161 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1162 ;; Tracked objects:
  1163 ;;		On entry : 0/0
  1164 ;;		On exit  : 0/0
  1165 ;;		Unchanged: 0/0
  1166 ;; Data sizes:     COMMON   BANK0   BANK1
  1167 ;;      Params:         0       0       0
  1168 ;;      Locals:         0       0       0
  1169 ;;      Temps:          0       0       0
  1170 ;;      Totals:         0       0       0
  1171 ;;Total ram usage:        0 bytes
  1172 ;; Hardware stack levels used:    1
  1173 ;; Hardware stack levels required when called:    4
  1174 ;; This function calls:
  1175 ;;		_DelayXms
  1176 ;;		_QIANG
  1177 ;;		_RUO
  1178 ;;		_WU
  1179 ;;		_ZHONG
  1180 ;;		_low1
  1181 ;;		_low2
  1182 ;;		_low3
  1183 ;;		_low4
  1184 ;;		_setInput
  1185 ;; This function is called by:
  1186 ;;		_main
  1187 ;;		_ADC_AVG
  1188 ;; This function uses a non-reentrant model
  1189 ;;
  1190                           
  1191                           
  1192                           ;psect for function _refreshNub
  1193  0099                     _refreshNub:	
  1194                           
  1195                           ;main.c: 143: if(nubShowTime == 0)
  1196                           
  1197                           ;incstack = 0
  1198                           ; Regs used in _refreshNub: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1199  0099  087B               	movf	_nubShowTime,w
  1200  009A  1D03               	btfss	3,2
  1201  009B  289D               	goto	l3826
  1202                           
  1203                           ;main.c: 144: {
  1204                           ;main.c: 145: setInput();
  1205  009C  2BF6               	ljmp	l3022
  1206  009D                     l3826:	
  1207                           
  1208                           ;main.c: 147: }
  1209                           ;main.c: 148: if(++refreshCount >= 10)
  1210  009D  300A               	movlw	10
  1211  009E  1283               	bcf	3,5	;RP0=0, select bank0
  1212  009F  1303               	bcf	3,6	;RP1=0, select bank0
  1213  00A0  0AB9               	incf	_refreshCount,f
  1214  00A1  0239               	subwf	_refreshCount,w
  1215  00A2  1C03               	skipc
  1216  00A3  28A8               	goto	l3830
  1217                           
  1218                           ;main.c: 149: {
  1219                           ;main.c: 150: refreshCount = 0;
  1220  00A4  01B9               	clrf	_refreshCount
  1221                           
  1222                           ;main.c: 151: tempbaiweiNum = ygNub/100;
  1223  00A5  01FA               	clrf	_tempbaiweiNum
  1224                           
  1225                           ;main.c: 152: tempshiweiNum = (ygNub%100)/10;
  1226  00A6  01F9               	clrf	_tempshiweiNum
  1227                           
  1228                           ;main.c: 153: tempgeweiNum = ygNub%10;
  1229  00A7  01F8               	clrf	_tempgeweiNum
  1230  00A8                     l3830:	
  1231                           
  1232                           ;main.c: 154: }
  1233                           ;main.c: 155: low1(numArray[tempbaiweiNum],numArray[tempshiweiNum],numArray[tempgeweiNum
      +                          ],1,1);
  1234  00A8  20F2               	fcall	PL4	;call to abstracted procedure
  1235  00A9  00F4               	movwf	low1@shi
  1236  00AA  0878               	movf	_tempgeweiNum,w
  1237  00AB  3E3D               	addlw	(low (_numArray| 0))& (0+255)
  1238  00AC  0084               	movwf	4
  1239  00AD  0800               	movf	0,w
  1240  00AE  00F5               	movwf	low1@ge
  1241  00AF  01F6               	clrf	low1@dp
  1242  00B0  0AF6               	incf	low1@dp,f
  1243  00B1  01F7               	clrf	low1@h3
  1244  00B2  0AF7               	incf	low1@h3,f
  1245  00B3  20F8               	fcall	PL8	;call to abstracted procedure
  1246  00B4  22C0               	fcall	_low1
  1247                           
  1248                           ;main.c: 156: low2(numArray[tempbaiweiNum],numArray[tempshiweiNum],numArray[tempgeweiNum
      +                          ],1);
  1249  00B5  20F2               	fcall	PL4	;call to abstracted procedure
  1250  00B6  00F4               	movwf	low2@shi
  1251  00B7  0878               	movf	_tempgeweiNum,w
  1252  00B8  3E3D               	addlw	(low (_numArray| 0))& (0+255)
  1253  00B9  0084               	movwf	4
  1254  00BA  0800               	movf	0,w
  1255  00BB  00F5               	movwf	low2@ge
  1256  00BC  01F6               	clrf	low2@h4
  1257  00BD  0AF6               	incf	low2@h4,f
  1258  00BE  20F8               	fcall	PL8	;call to abstracted procedure
  1259  00BF  20FD               	fcall	_low2
  1260                           
  1261                           ;main.c: 157: low3(numArray[tempbaiweiNum],numArray[tempshiweiNum],numArray[tempgeweiNum
      +                          ],1);
  1262  00C0  20F2               	fcall	PL4	;call to abstracted procedure
  1263  00C1  00F4               	movwf	low3@shi
  1264  00C2  0878               	movf	_tempgeweiNum,w
  1265  00C3  3E3D               	addlw	(low (_numArray| 0))& (0+255)
  1266  00C4  0084               	movwf	4
  1267  00C5  0800               	movf	0,w
  1268  00C6  00F5               	movwf	low3@ge
  1269  00C7  01F6               	clrf	low3@h5
  1270  00C8  0AF6               	incf	low3@h5,f
  1271  00C9  20F8               	fcall	PL8	;call to abstracted procedure
  1272  00CA  2030               	fcall	_low3
  1273                           
  1274                           ;main.c: 158: low4(numArray[tempbaiweiNum],numArray[tempshiweiNum],numArray[tempgeweiNum
      +                          ],1,1);
  1275  00CB  20F2               	fcall	PL4	;call to abstracted procedure
  1276  00CC  00F4               	movwf	low4@shi
  1277  00CD  0878               	movf	_tempgeweiNum,w
  1278  00CE  3E3D               	addlw	(low (_numArray| 0))& (0+255)
  1279  00CF  0084               	movwf	4
  1280  00D0  0800               	movf	0,w
  1281  00D1  00F5               	movwf	low4@ge
  1282  00D2  01F6               	clrf	low4@h6
  1283  00D3  0AF6               	incf	low4@h6,f
  1284  00D4  01F7               	clrf	low4@h123
  1285  00D5  0AF7               	incf	low4@h123,f
  1286  00D6  20F8               	fcall	PL8	;call to abstracted procedure
  1287  00D7  21AE               	fcall	_low4
  1288                           
  1289                           ;main.c: 168: DelayXms(1);
  1290  00D8  3001               	movlw	1
  1291  00D9  245E               	fcall	_DelayXms
  1292                           
  1293                           ;main.c: 169: switch(nubStep)
  1294  00DA  28E3               	goto	l3850
  1295  00DB                     l3840:	
  1296                           
  1297                           ;main.c: 172: WU();
  1298  00DB  2471               	fcall	_WU
  1299                           
  1300                           ;main.c: 173: break;
  1301  00DC  28F0               	goto	l3852
  1302  00DD                     l3842:	
  1303                           
  1304                           ;main.c: 175: RUO();
  1305  00DD  247E               	fcall	_RUO
  1306                           
  1307                           ;main.c: 176: break;
  1308  00DE  28F0               	goto	l3852
  1309  00DF                     l3844:	
  1310                           
  1311                           ;main.c: 178: ZHONG();
  1312  00DF  247A               	fcall	_ZHONG
  1313                           
  1314                           ;main.c: 179: break;
  1315  00E0  28F0               	goto	l3852
  1316  00E1                     l3846:	
  1317                           
  1318                           ;main.c: 181: QIANG();
  1319  00E1  2482               	fcall	_QIANG
  1320                           
  1321                           ;main.c: 182: break;
  1322  00E2  28F0               	goto	l3852
  1323  00E3                     l3850:	
  1324  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  1325  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  1326  00E5  083A               	movf	_nubStep,w
  1327                           
  1328                           ; Switch size 1, requested type "space"
  1329                           ; Number of cases is 4, Range of values is 0 to 3
  1330                           ; switch strategies available:
  1331                           ; Name         Instructions Cycles
  1332                           ; direct_byte           10     6 (fixed)
  1333                           ; simple_byte           13     7 (average)
  1334                           ; jumptable            260     6 (fixed)
  1335                           ;	Chosen strategy is direct_byte
  1336  00E6  0084               	movwf	4
  1337  00E7  3004               	movlw	4
  1338  00E8  0204               	subwf	4,w
  1339  00E9  1803               	skipnc
  1340  00EA  28F0               	goto	l3852
  1341  00EB  3004               	movlw	high S4042
  1342  00EC  008A               	movwf	10
  1343  00ED  3076               	movlw	low S4042
  1344  00EE  0704               	addwf	4,w
  1345  00EF  0082               	movwf	2
  1346  00F0                     l3852:	
  1347                           
  1348                           ;main.c: 184: DelayXms(3);
  1349  00F0  3003               	movlw	3
  1350  00F1  2C5E               	ljmp	_DelayXms
  1351  00F2                     __end_of_refreshNub:	
  1352  00F2                     PL4:	
  1353  00F2  0879               	movf	_tempshiweiNum,w
  1354  00F3  3E3D               	addlw	(low (_numArray| 0))& (0+255)
  1355  00F4  0084               	movwf	4
  1356  00F5  1383               	bcf	3,7	;select IRP bank0
  1357  00F6  0800               	movf	0,w
  1358  00F7  0008               	return
  1359  00F8                     __end_ofPL4:	
  1360  00F8                     PL8:	
  1361  00F8  087A               	movf	_tempbaiweiNum,w
  1362  00F9  3E3D               	addlw	(low (_numArray| 0))& (0+255)
  1363  00FA  0084               	movwf	4
  1364  00FB  0800               	movf	0,w
  1365  00FC  0008               	return
  1366  00FD                     __end_ofPL8:	
  1367                           
  1368                           	psect	swtext1
  1369  0476                     __pswtext1:	
  1370  0476                     S4042:	
  1371  0476  28DB               	ljmp	l3840
  1372  0477  28DD               	ljmp	l3842
  1373  0478  28DF               	ljmp	l3844
  1374  0479  28E1               	ljmp	l3846
  1375                           
  1376                           	psect	text7
  1377  01AE                     __ptext7:	
  1378 ;; *************** function _low4 *****************
  1379 ;; Defined at:
  1380 ;;		line 559 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\number.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;  bai             1    wreg     unsigned char 
  1383 ;;  shi             1    4[COMMON] unsigned char 
  1384 ;;  ge              1    5[COMMON] unsigned char 
  1385 ;;  h6              1    6[COMMON] unsigned char 
  1386 ;;  h123            1    7[COMMON] unsigned char 
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;  bai             1    1[BANK0 ] unsigned char 
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      void 
  1391 ;; Registers used:
  1392 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1393 ;; Tracked objects:
  1394 ;;		On entry : 800/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMMON   BANK0   BANK1
  1398 ;;      Params:         4       0       0
  1399 ;;      Locals:         0       1       0
  1400 ;;      Temps:          0       1       0
  1401 ;;      Totals:         4       2       0
  1402 ;;Total ram usage:        6 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; Hardware stack levels required when called:    3
  1405 ;; This function calls:
  1406 ;;		_delayms
  1407 ;;		_setHightOutput
  1408 ;;		_setLow
  1409 ;;		_setOutput
  1410 ;;		_setlowOutput
  1411 ;; This function is called by:
  1412 ;;		_refreshNub
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           
  1417                           ;psect for function _low4
  1418  01AE                     _low4:	
  1419                           
  1420                           ;incstack = 0
  1421                           ; Regs used in _low4: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1422                           ;low4@bai stored from wreg
  1423  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1424  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  1425  01B0  00A1               	movwf	low4@bai
  1426                           
  1427                           ;number.c: 561: TRISA = 0x00;
  1428  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  1429  01B2  0185               	clrf	5	;volatile
  1430                           
  1431                           ;number.c: 562: setLow();
  1432  01B3  23C1               	fcall	_setLow
  1433                           
  1434                           ;number.c: 563: setlowOutput(4);
  1435  01B4  3004               	movlw	4
  1436  01B5  21FC               	fcall	_setlowOutput
  1437                           
  1438                           ;number.c: 565: if((bai >> 0) & 0x01)
  1439  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1440  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1441  01B8  1C21               	btfss	low4@bai,0
  1442  01B9  29BE               	goto	l3780
  1443                           
  1444                           ;number.c: 566: {
  1445                           ;number.c: 567: setOutput(6);
  1446  01BA  3006               	movlw	6
  1447  01BB  223E               	fcall	_setOutput
  1448                           
  1449                           ;number.c: 568: setHightOutput(6);
  1450  01BC  3006               	movlw	6
  1451  01BD  227F               	fcall	_setHightOutput
  1452  01BE                     l3780:	
  1453                           
  1454                           ;number.c: 569: }
  1455                           ;number.c: 570: if((shi >> 0) & 0x01)
  1456  01BE  1C74               	btfss	low4@shi,0
  1457  01BF  29C4               	goto	l3784
  1458                           
  1459                           ;number.c: 571: {
  1460                           ;number.c: 572: setOutput(8);
  1461  01C0  3008               	movlw	8
  1462  01C1  223E               	fcall	_setOutput
  1463                           
  1464                           ;number.c: 573: setHightOutput(8);
  1465  01C2  3008               	movlw	8
  1466  01C3  227F               	fcall	_setHightOutput
  1467  01C4                     l3784:	
  1468                           
  1469                           ;number.c: 574: }
  1470                           ;number.c: 575: if((ge >> 0) & 0x01)
  1471  01C4  1C75               	btfss	low4@ge,0
  1472  01C5  29CA               	goto	l3788
  1473                           
  1474                           ;number.c: 576: {
  1475                           ;number.c: 577: setOutput(10);
  1476  01C6  300A               	movlw	10
  1477  01C7  223E               	fcall	_setOutput
  1478                           
  1479                           ;number.c: 578: setHightOutput(10);
  1480  01C8  300A               	movlw	10
  1481  01C9  227F               	fcall	_setHightOutput
  1482  01CA                     l3788:	
  1483                           
  1484                           ;number.c: 579: }
  1485                           ;number.c: 581: if((bai >> 1) & 0x01)
  1486  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  1487  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  1488  01CC  0821               	movf	low4@bai,w
  1489  01CD  00A0               	movwf	??_low4
  1490  01CE  1003               	clrc
  1491  01CF  0CA0               	rrf	??_low4,f
  1492  01D0  1C20               	btfss	??_low4,0
  1493  01D1  29D6               	goto	l3792
  1494                           
  1495                           ;number.c: 582: {
  1496                           ;number.c: 583: setOutput(7);
  1497  01D2  3007               	movlw	7
  1498  01D3  223E               	fcall	_setOutput
  1499                           
  1500                           ;number.c: 584: setHightOutput(7);
  1501  01D4  3007               	movlw	7
  1502  01D5  227F               	fcall	_setHightOutput
  1503  01D6                     l3792:	
  1504                           
  1505                           ;number.c: 585: }
  1506                           ;number.c: 586: if((shi >> 1) & 0x01)
  1507  01D6  0874               	movf	low4@shi,w
  1508  01D7  21F6               	fcall	PL12	;call to abstracted procedure
  1509  01D8  1C20               	btfss	??_low4,0
  1510  01D9  29DE               	goto	l3796
  1511                           
  1512                           ;number.c: 587: {
  1513                           ;number.c: 588: setOutput(9);
  1514  01DA  3009               	movlw	9
  1515  01DB  223E               	fcall	_setOutput
  1516                           
  1517                           ;number.c: 589: setHightOutput(9);
  1518  01DC  3009               	movlw	9
  1519  01DD  227F               	fcall	_setHightOutput
  1520  01DE                     l3796:	
  1521                           
  1522                           ;number.c: 590: }
  1523                           ;number.c: 591: if((ge >> 1) & 0x01)
  1524  01DE  0875               	movf	low4@ge,w
  1525  01DF  21F6               	fcall	PL12	;call to abstracted procedure
  1526  01E0  1C20               	btfss	??_low4,0
  1527  01E1  29E6               	goto	l3800
  1528                           
  1529                           ;number.c: 592: {
  1530                           ;number.c: 593: setOutput(11);
  1531  01E2  300B               	movlw	11
  1532  01E3  223E               	fcall	_setOutput
  1533                           
  1534                           ;number.c: 594: setHightOutput(11);
  1535  01E4  300B               	movlw	11
  1536  01E5  227F               	fcall	_setHightOutput
  1537  01E6                     l3800:	
  1538                           
  1539                           ;number.c: 595: }
  1540                           ;number.c: 596: if(h6)
  1541  01E6  0876               	movf	low4@h6,w
  1542  01E7  1903               	btfsc	3,2
  1543  01E8  29ED               	goto	l3804
  1544                           
  1545                           ;number.c: 597: {
  1546                           ;number.c: 598: setOutput(12);
  1547  01E9  300C               	movlw	12
  1548  01EA  223E               	fcall	_setOutput
  1549                           
  1550                           ;number.c: 599: setHightOutput(12);
  1551  01EB  300C               	movlw	12
  1552  01EC  227F               	fcall	_setHightOutput
  1553  01ED                     l3804:	
  1554                           
  1555                           ;number.c: 600: }
  1556                           ;number.c: 601: if(h123)
  1557  01ED  0877               	movf	low4@h123,w
  1558  01EE  1903               	btfsc	3,2
  1559  01EF  29F4               	goto	l3808
  1560                           
  1561                           ;number.c: 602: {
  1562                           ;number.c: 603: setOutput(5);
  1563  01F0  3005               	movlw	5
  1564  01F1  223E               	fcall	_setOutput
  1565                           
  1566                           ;number.c: 604: setHightOutput(5);
  1567  01F2  3005               	movlw	5
  1568  01F3  227F               	fcall	_setHightOutput
  1569  01F4                     l3808:	
  1570                           
  1571                           ;number.c: 605: }
  1572                           ;number.c: 606: delayms(15);
  1573  01F4  300F               	movlw	15
  1574  01F5  2C69               	ljmp	_delayms
  1575  01F6                     __end_of_low4:	
  1576  01F6                     PL12:	
  1577  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  1578  01F7  1303               	bcf	3,6	;RP1=0, select bank0
  1579  01F8  00A0               	movwf	??_low4
  1580  01F9  1003               	clrc
  1581  01FA  0CA0               	rrf	??_low4,f
  1582  01FB  0008               	return
  1583  01FC                     __end_ofPL12:	
  1584                           
  1585                           	psect	text8
  1586  0030                     __ptext8:	
  1587 ;; *************** function _low3 *****************
  1588 ;; Defined at:
  1589 ;;		line 515 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\number.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;  bai             1    wreg     unsigned char 
  1592 ;;  shi             1    4[COMMON] unsigned char 
  1593 ;;  ge              1    5[COMMON] unsigned char 
  1594 ;;  h5              1    6[COMMON] unsigned char 
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;  bai             1    0[BANK0 ] unsigned char 
  1597 ;; Return value:  Size  Location     Type
  1598 ;;                  1    wreg      void 
  1599 ;; Registers used:
  1600 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1601 ;; Tracked objects:
  1602 ;;		On entry : 800/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMMON   BANK0   BANK1
  1606 ;;      Params:         3       0       0
  1607 ;;      Locals:         0       1       0
  1608 ;;      Temps:          1       0       0
  1609 ;;      Totals:         4       1       0
  1610 ;;Total ram usage:        5 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    3
  1613 ;; This function calls:
  1614 ;;		_delayms
  1615 ;;		_setHightOutput
  1616 ;;		_setLow
  1617 ;;		_setOutput
  1618 ;;		_setlowOutput
  1619 ;; This function is called by:
  1620 ;;		_refreshNub
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           
  1625                           ;psect for function _low3
  1626  0030                     _low3:	
  1627                           
  1628                           ;incstack = 0
  1629                           ; Regs used in _low3: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1630                           ;low3@bai stored from wreg
  1631  0030  1283               	bcf	3,5	;RP0=0, select bank0
  1632  0031  1303               	bcf	3,6	;RP1=0, select bank0
  1633  0032  00A0               	movwf	low3@bai
  1634                           
  1635                           ;number.c: 517: TRISA = 0x00;
  1636  0033  1683               	bsf	3,5	;RP0=1, select bank1
  1637  0034  0185               	clrf	5	;volatile
  1638                           
  1639                           ;number.c: 518: setLow();
  1640  0035  23C1               	fcall	_setLow
  1641                           
  1642                           ;number.c: 519: setlowOutput(3);
  1643  0036  3003               	movlw	3
  1644  0037  21FC               	fcall	_setlowOutput
  1645                           
  1646                           ;number.c: 520: if((bai >> 5) & 0x01)
  1647  0038  1283               	bcf	3,5	;RP0=0, select bank0
  1648  0039  1303               	bcf	3,6	;RP1=0, select bank0
  1649  003A  0820               	movf	low3@bai,w
  1650  003B  00F7               	movwf	??_low3
  1651  003C  3005               	movlw	5
  1652  003D                     u1515:	
  1653  003D  1003               	clrc
  1654  003E  0CF7               	rrf	??_low3,f
  1655  003F  3EFF               	addlw	-1
  1656  0040  1D03               	skipz
  1657  0041  283D               	goto	u1515
  1658  0042  1C77               	btfss	??_low3,0
  1659  0043  2848               	goto	l3744
  1660                           
  1661                           ;number.c: 521: {
  1662                           ;number.c: 522: setOutput(6);
  1663  0044  3006               	movlw	6
  1664  0045  223E               	fcall	_setOutput
  1665                           
  1666                           ;number.c: 523: setHightOutput(6);
  1667  0046  3006               	movlw	6
  1668  0047  227F               	fcall	_setHightOutput
  1669  0048                     l3744:	
  1670                           
  1671                           ;number.c: 524: }
  1672                           ;number.c: 525: if((shi >> 5) & 0x01)
  1673  0048  0874               	movf	low3@shi,w
  1674  0049  00F7               	movwf	??_low3
  1675  004A  3005               	movlw	5
  1676  004B                     u1535:	
  1677  004B  1003               	clrc
  1678  004C  0CF7               	rrf	??_low3,f
  1679  004D  3EFF               	addlw	-1
  1680  004E  1D03               	skipz
  1681  004F  284B               	goto	u1535
  1682  0050  1C77               	btfss	??_low3,0
  1683  0051  2856               	goto	l3748
  1684                           
  1685                           ;number.c: 526: {
  1686                           ;number.c: 527: setOutput(8);
  1687  0052  3008               	movlw	8
  1688  0053  223E               	fcall	_setOutput
  1689                           
  1690                           ;number.c: 528: setHightOutput(8);
  1691  0054  3008               	movlw	8
  1692  0055  227F               	fcall	_setHightOutput
  1693  0056                     l3748:	
  1694                           
  1695                           ;number.c: 529: }
  1696                           ;number.c: 530: if((ge >> 5) & 0x01)
  1697  0056  0875               	movf	low3@ge,w
  1698  0057  00F7               	movwf	??_low3
  1699  0058  3005               	movlw	5
  1700  0059                     u1555:	
  1701  0059  1003               	clrc
  1702  005A  0CF7               	rrf	??_low3,f
  1703  005B  3EFF               	addlw	-1
  1704  005C  1D03               	skipz
  1705  005D  2859               	goto	u1555
  1706  005E  1C77               	btfss	??_low3,0
  1707  005F  2864               	goto	l3752
  1708                           
  1709                           ;number.c: 531: {
  1710                           ;number.c: 532: setOutput(10);
  1711  0060  300A               	movlw	10
  1712  0061  223E               	fcall	_setOutput
  1713                           
  1714                           ;number.c: 533: setHightOutput(10);
  1715  0062  300A               	movlw	10
  1716  0063  227F               	fcall	_setHightOutput
  1717  0064                     l3752:	
  1718                           
  1719                           ;number.c: 534: }
  1720                           ;number.c: 536: if((bai >> 6) & 0x01)
  1721  0064  1283               	bcf	3,5	;RP0=0, select bank0
  1722  0065  1303               	bcf	3,6	;RP1=0, select bank0
  1723  0066  0820               	movf	low3@bai,w
  1724  0067  00F7               	movwf	??_low3
  1725  0068  3006               	movlw	6
  1726  0069                     u1575:	
  1727  0069  1003               	clrc
  1728  006A  0CF7               	rrf	??_low3,f
  1729  006B  3EFF               	addlw	-1
  1730  006C  1D03               	skipz
  1731  006D  2869               	goto	u1575
  1732  006E  1C77               	btfss	??_low3,0
  1733  006F  2874               	goto	l3756
  1734                           
  1735                           ;number.c: 537: {
  1736                           ;number.c: 538: setOutput(7);
  1737  0070  3007               	movlw	7
  1738  0071  223E               	fcall	_setOutput
  1739                           
  1740                           ;number.c: 539: setHightOutput(7);
  1741  0072  3007               	movlw	7
  1742  0073  227F               	fcall	_setHightOutput
  1743  0074                     l3756:	
  1744                           
  1745                           ;number.c: 540: }
  1746                           ;number.c: 541: if((shi >> 6) & 0x01)
  1747  0074  0874               	movf	low3@shi,w
  1748  0075  00F7               	movwf	??_low3
  1749  0076  3006               	movlw	6
  1750  0077                     u1595:	
  1751  0077  1003               	clrc
  1752  0078  0CF7               	rrf	??_low3,f
  1753  0079  3EFF               	addlw	-1
  1754  007A  1D03               	skipz
  1755  007B  2877               	goto	u1595
  1756  007C  1C77               	btfss	??_low3,0
  1757  007D  2882               	goto	l3760
  1758                           
  1759                           ;number.c: 542: {
  1760                           ;number.c: 543: setOutput(9);
  1761  007E  3009               	movlw	9
  1762  007F  223E               	fcall	_setOutput
  1763                           
  1764                           ;number.c: 544: setHightOutput(9);
  1765  0080  3009               	movlw	9
  1766  0081  227F               	fcall	_setHightOutput
  1767  0082                     l3760:	
  1768                           
  1769                           ;number.c: 545: }
  1770                           ;number.c: 546: if((ge >> 6) & 0x01)
  1771  0082  0875               	movf	low3@ge,w
  1772  0083  00F7               	movwf	??_low3
  1773  0084  3006               	movlw	6
  1774  0085                     u1615:	
  1775  0085  1003               	clrc
  1776  0086  0CF7               	rrf	??_low3,f
  1777  0087  3EFF               	addlw	-1
  1778  0088  1D03               	skipz
  1779  0089  2885               	goto	u1615
  1780  008A  1C77               	btfss	??_low3,0
  1781  008B  2890               	goto	l3764
  1782                           
  1783                           ;number.c: 547: {
  1784                           ;number.c: 548: setOutput(11);
  1785  008C  300B               	movlw	11
  1786  008D  223E               	fcall	_setOutput
  1787                           
  1788                           ;number.c: 549: setHightOutput(11);
  1789  008E  300B               	movlw	11
  1790  008F  227F               	fcall	_setHightOutput
  1791  0090                     l3764:	
  1792                           
  1793                           ;number.c: 550: }
  1794                           ;number.c: 551: if(h5)
  1795  0090  0876               	movf	low3@h5,w
  1796  0091  1903               	btfsc	3,2
  1797  0092  2897               	goto	l3768
  1798                           
  1799                           ;number.c: 552: {
  1800                           ;number.c: 553: setOutput(12);
  1801  0093  300C               	movlw	12
  1802  0094  223E               	fcall	_setOutput
  1803                           
  1804                           ;number.c: 554: setHightOutput(12);
  1805  0095  300C               	movlw	12
  1806  0096  227F               	fcall	_setHightOutput
  1807  0097                     l3768:	
  1808                           
  1809                           ;number.c: 555: }
  1810                           ;number.c: 556: delayms(15);
  1811  0097  300F               	movlw	15
  1812  0098  2C69               	ljmp	_delayms
  1813  0099                     __end_of_low3:	
  1814                           
  1815                           	psect	text9
  1816  00FD                     __ptext9:	
  1817 ;; *************** function _low2 *****************
  1818 ;; Defined at:
  1819 ;;		line 471 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\number.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;  bai             1    wreg     unsigned char 
  1822 ;;  shi             1    4[COMMON] unsigned char 
  1823 ;;  ge              1    5[COMMON] unsigned char 
  1824 ;;  h4              1    6[COMMON] unsigned char 
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;  bai             1    0[BANK0 ] unsigned char 
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  1    wreg      void 
  1829 ;; Registers used:
  1830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1831 ;; Tracked objects:
  1832 ;;		On entry : 800/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMMON   BANK0   BANK1
  1836 ;;      Params:         3       0       0
  1837 ;;      Locals:         0       1       0
  1838 ;;      Temps:          1       0       0
  1839 ;;      Totals:         4       1       0
  1840 ;;Total ram usage:        5 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; Hardware stack levels required when called:    3
  1843 ;; This function calls:
  1844 ;;		_delayms
  1845 ;;		_setHightOutput
  1846 ;;		_setLow
  1847 ;;		_setOutput
  1848 ;;		_setlowOutput
  1849 ;; This function is called by:
  1850 ;;		_refreshNub
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854                           
  1855                           ;psect for function _low2
  1856  00FD                     _low2:	
  1857                           
  1858                           ;incstack = 0
  1859                           ; Regs used in _low2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1860                           ;low2@bai stored from wreg
  1861  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  1862  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  1863  00FF  00A0               	movwf	low2@bai
  1864                           
  1865                           ;number.c: 473: TRISA = 0x00;
  1866  0100  1683               	bsf	3,5	;RP0=1, select bank1
  1867  0101  0185               	clrf	5	;volatile
  1868                           
  1869                           ;number.c: 474: setLow();
  1870  0102  23C1               	fcall	_setLow
  1871                           
  1872                           ;number.c: 475: setlowOutput(2);
  1873  0103  3002               	movlw	2
  1874  0104  21FC               	fcall	_setlowOutput
  1875                           
  1876                           ;number.c: 476: if((bai >> 2) & 0x01)
  1877  0105  1283               	bcf	3,5	;RP0=0, select bank0
  1878  0106  1303               	bcf	3,6	;RP1=0, select bank0
  1879  0107  0820               	movf	low2@bai,w
  1880  0108  2154               	fcall	PL6	;call to abstracted procedure
  1881  0109  1C77               	btfss	??_low2,0
  1882  010A  290F               	goto	l3708
  1883                           
  1884                           ;number.c: 477: {
  1885                           ;number.c: 478: setOutput(7);
  1886  010B  3007               	movlw	7
  1887  010C  223E               	fcall	_setOutput
  1888                           
  1889                           ;number.c: 479: setHightOutput(7);
  1890  010D  3007               	movlw	7
  1891  010E  227F               	fcall	_setHightOutput
  1892  010F                     l3708:	
  1893                           
  1894                           ;number.c: 480: }
  1895                           ;number.c: 481: if((shi >> 2) & 0x01)
  1896  010F  0874               	movf	low2@shi,w
  1897  0110  2154               	fcall	PL6	;call to abstracted procedure
  1898  0111  1C77               	btfss	??_low2,0
  1899  0112  2917               	goto	l3712
  1900                           
  1901                           ;number.c: 482: {
  1902                           ;number.c: 483: setOutput(9);
  1903  0113  3009               	movlw	9
  1904  0114  223E               	fcall	_setOutput
  1905                           
  1906                           ;number.c: 484: setHightOutput(9);
  1907  0115  3009               	movlw	9
  1908  0116  227F               	fcall	_setHightOutput
  1909  0117                     l3712:	
  1910                           
  1911                           ;number.c: 485: }
  1912                           ;number.c: 486: if((ge >> 2) & 0x01)
  1913  0117  0875               	movf	low2@ge,w
  1914  0118  2154               	fcall	PL6	;call to abstracted procedure
  1915  0119  1C77               	btfss	??_low2,0
  1916  011A  291F               	goto	l3716
  1917                           
  1918                           ;number.c: 487: {
  1919                           ;number.c: 488: setOutput(11);
  1920  011B  300B               	movlw	11
  1921  011C  223E               	fcall	_setOutput
  1922                           
  1923                           ;number.c: 489: setHightOutput(11);
  1924  011D  300B               	movlw	11
  1925  011E  227F               	fcall	_setHightOutput
  1926  011F                     l3716:	
  1927                           
  1928                           ;number.c: 490: }
  1929                           ;number.c: 492: if((bai >> 4) & 0x01)
  1930  011F  1283               	bcf	3,5	;RP0=0, select bank0
  1931  0120  1303               	bcf	3,6	;RP1=0, select bank0
  1932  0121  0820               	movf	low2@bai,w
  1933  0122  00F7               	movwf	??_low2
  1934  0123  3004               	movlw	4
  1935  0124                     u1445:	
  1936  0124  1003               	clrc
  1937  0125  0CF7               	rrf	??_low2,f
  1938  0126  3EFF               	addlw	-1
  1939  0127  1D03               	skipz
  1940  0128  2924               	goto	u1445
  1941  0129  1C77               	btfss	??_low2,0
  1942  012A  292F               	goto	l3720
  1943                           
  1944                           ;number.c: 493: {
  1945                           ;number.c: 494: setOutput(6);
  1946  012B  3006               	movlw	6
  1947  012C  223E               	fcall	_setOutput
  1948                           
  1949                           ;number.c: 495: setHightOutput(6);
  1950  012D  3006               	movlw	6
  1951  012E  227F               	fcall	_setHightOutput
  1952  012F                     l3720:	
  1953                           
  1954                           ;number.c: 496: }
  1955                           ;number.c: 497: if((shi >> 4) & 0x01)
  1956  012F  0874               	movf	low2@shi,w
  1957  0130  00F7               	movwf	??_low2
  1958  0131  3004               	movlw	4
  1959  0132                     u1465:	
  1960  0132  1003               	clrc
  1961  0133  0CF7               	rrf	??_low2,f
  1962  0134  3EFF               	addlw	-1
  1963  0135  1D03               	skipz
  1964  0136  2932               	goto	u1465
  1965  0137  1C77               	btfss	??_low2,0
  1966  0138  293D               	goto	l3724
  1967                           
  1968                           ;number.c: 498: {
  1969                           ;number.c: 499: setOutput(8);
  1970  0139  3008               	movlw	8
  1971  013A  223E               	fcall	_setOutput
  1972                           
  1973                           ;number.c: 500: setHightOutput(8);
  1974  013B  3008               	movlw	8
  1975  013C  227F               	fcall	_setHightOutput
  1976  013D                     l3724:	
  1977                           
  1978                           ;number.c: 501: }
  1979                           ;number.c: 502: if((ge >> 4) & 0x01)
  1980  013D  0875               	movf	low2@ge,w
  1981  013E  00F7               	movwf	??_low2
  1982  013F  3004               	movlw	4
  1983  0140                     u1485:	
  1984  0140  1003               	clrc
  1985  0141  0CF7               	rrf	??_low2,f
  1986  0142  3EFF               	addlw	-1
  1987  0143  1D03               	skipz
  1988  0144  2940               	goto	u1485
  1989  0145  1C77               	btfss	??_low2,0
  1990  0146  294B               	goto	l3728
  1991                           
  1992                           ;number.c: 503: {
  1993                           ;number.c: 504: setOutput(10);
  1994  0147  300A               	movlw	10
  1995  0148  223E               	fcall	_setOutput
  1996                           
  1997                           ;number.c: 505: setHightOutput(10);
  1998  0149  300A               	movlw	10
  1999  014A  227F               	fcall	_setHightOutput
  2000  014B                     l3728:	
  2001                           
  2002                           ;number.c: 506: }
  2003                           ;number.c: 507: if(h4)
  2004  014B  0876               	movf	low2@h4,w
  2005  014C  1903               	btfsc	3,2
  2006  014D  2952               	goto	l3732
  2007                           
  2008                           ;number.c: 508: {
  2009                           ;number.c: 509: setOutput(12);
  2010  014E  300C               	movlw	12
  2011  014F  223E               	fcall	_setOutput
  2012                           
  2013                           ;number.c: 510: setHightOutput(12);
  2014  0150  300C               	movlw	12
  2015  0151  227F               	fcall	_setHightOutput
  2016  0152                     l3732:	
  2017                           
  2018                           ;number.c: 511: }
  2019                           ;number.c: 512: delayms(15);
  2020  0152  300F               	movlw	15
  2021  0153  2C69               	ljmp	_delayms
  2022  0154                     __end_of_low2:	
  2023  0154                     PL6:	
  2024  0154  00F7               	movwf	??_low2
  2025  0155  1003               	clrc
  2026  0156  0CF7               	rrf	??_low2,f
  2027  0157  1003               	clrc
  2028  0158  0CF7               	rrf	??_low2,f
  2029  0159  0008               	return
  2030  015A                     __end_ofPL6:	
  2031                           
  2032                           	psect	text10
  2033  02C0                     __ptext10:	
  2034 ;; *************** function _low1 *****************
  2035 ;; Defined at:
  2036 ;;		line 438 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\number.c"
  2037 ;; Parameters:    Size  Location     Type
  2038 ;;  bai             1    wreg     unsigned char 
  2039 ;;  shi             1    4[COMMON] unsigned char 
  2040 ;;  ge              1    5[COMMON] unsigned char 
  2041 ;;  dp              1    6[COMMON] unsigned char 
  2042 ;;  h3              1    7[COMMON] unsigned char 
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;  bai             1    1[BANK0 ] unsigned char 
  2045 ;; Return value:  Size  Location     Type
  2046 ;;                  1    wreg      void 
  2047 ;; Registers used:
  2048 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2049 ;; Tracked objects:
  2050 ;;		On entry : B00/0
  2051 ;;		On exit  : 0/0
  2052 ;;		Unchanged: 0/0
  2053 ;; Data sizes:     COMMON   BANK0   BANK1
  2054 ;;      Params:         4       0       0
  2055 ;;      Locals:         0       1       0
  2056 ;;      Temps:          0       1       0
  2057 ;;      Totals:         4       2       0
  2058 ;;Total ram usage:        6 bytes
  2059 ;; Hardware stack levels used:    1
  2060 ;; Hardware stack levels required when called:    3
  2061 ;; This function calls:
  2062 ;;		_delayms
  2063 ;;		_setHightOutput
  2064 ;;		_setLow
  2065 ;;		_setOutput
  2066 ;;		_setlowOutput
  2067 ;; This function is called by:
  2068 ;;		_refreshNub
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           
  2073                           ;psect for function _low1
  2074  02C0                     _low1:	
  2075                           
  2076                           ;incstack = 0
  2077                           ; Regs used in _low1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2078                           ;low1@bai stored from wreg
  2079  02C0  00A1               	movwf	low1@bai
  2080                           
  2081                           ;number.c: 440: setLow();
  2082  02C1  23C1               	fcall	_setLow
  2083                           
  2084                           ;number.c: 441: setlowOutput(1);
  2085  02C2  3001               	movlw	1
  2086  02C3  21FC               	fcall	_setlowOutput
  2087                           
  2088                           ;number.c: 442: if((bai >> 3) & 0x01)
  2089  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  2090  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  2091  02C6  0821               	movf	low1@bai,w
  2092  02C7  22F2               	fcall	PL2	;call to abstracted procedure
  2093  02C8  1C20               	btfss	??_low1,0
  2094  02C9  2ACE               	goto	l3680
  2095                           
  2096                           ;number.c: 443: {
  2097                           ;number.c: 444: setOutput(6);
  2098  02CA  3006               	movlw	6
  2099  02CB  223E               	fcall	_setOutput
  2100                           
  2101                           ;number.c: 445: setHightOutput(6);
  2102  02CC  3006               	movlw	6
  2103  02CD  227F               	fcall	_setHightOutput
  2104  02CE                     l3680:	
  2105                           
  2106                           ;number.c: 446: }
  2107                           ;number.c: 447: if((shi >> 3) & 0x01)
  2108  02CE  0874               	movf	low1@shi,w
  2109  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  2110  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  2111  02D1  22F2               	fcall	PL2	;call to abstracted procedure
  2112  02D2  1C20               	btfss	??_low1,0
  2113  02D3  2AD8               	goto	l3684
  2114                           
  2115                           ;number.c: 448: {
  2116                           ;number.c: 449: setOutput(8);
  2117  02D4  3008               	movlw	8
  2118  02D5  223E               	fcall	_setOutput
  2119                           
  2120                           ;number.c: 450: setHightOutput(8);
  2121  02D6  3008               	movlw	8
  2122  02D7  227F               	fcall	_setHightOutput
  2123  02D8                     l3684:	
  2124                           
  2125                           ;number.c: 451: }
  2126                           ;number.c: 452: if((ge >> 3) & 0x01)
  2127  02D8  0875               	movf	low1@ge,w
  2128  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  2129  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  2130  02DB  22F2               	fcall	PL2	;call to abstracted procedure
  2131  02DC  1C20               	btfss	??_low1,0
  2132  02DD  2AE2               	goto	l3688
  2133                           
  2134                           ;number.c: 453: {
  2135                           ;number.c: 454: setOutput(10);
  2136  02DE  300A               	movlw	10
  2137  02DF  223E               	fcall	_setOutput
  2138                           
  2139                           ;number.c: 455: setHightOutput(10);
  2140  02E0  300A               	movlw	10
  2141  02E1  227F               	fcall	_setHightOutput
  2142  02E2                     l3688:	
  2143                           
  2144                           ;number.c: 456: }
  2145                           ;number.c: 457: if(dp)
  2146  02E2  0876               	movf	low1@dp,w
  2147  02E3  1903               	btfsc	3,2
  2148  02E4  2AE9               	goto	l3692
  2149                           
  2150                           ;number.c: 458: {
  2151                           ;number.c: 459: setOutput(7);
  2152  02E5  3007               	movlw	7
  2153  02E6  223E               	fcall	_setOutput
  2154                           
  2155                           ;number.c: 460: setHightOutput(7);
  2156  02E7  3007               	movlw	7
  2157  02E8  227F               	fcall	_setHightOutput
  2158  02E9                     l3692:	
  2159                           
  2160                           ;number.c: 461: }
  2161                           ;number.c: 462: if(h3)
  2162  02E9  0877               	movf	low1@h3,w
  2163  02EA  1903               	btfsc	3,2
  2164  02EB  2AF0               	goto	l3696
  2165                           
  2166                           ;number.c: 463: {
  2167                           ;number.c: 464: setOutput(12);
  2168  02EC  300C               	movlw	12
  2169  02ED  223E               	fcall	_setOutput
  2170                           
  2171                           ;number.c: 465: setHightOutput(12);
  2172  02EE  300C               	movlw	12
  2173  02EF  227F               	fcall	_setHightOutput
  2174  02F0                     l3696:	
  2175                           
  2176                           ;number.c: 466: }
  2177                           ;number.c: 467: delayms(15);
  2178  02F0  300F               	movlw	15
  2179  02F1  2C69               	ljmp	_delayms
  2180  02F2                     __end_of_low1:	
  2181  02F2                     PL2:	
  2182  02F2  00A0               	movwf	??_low1
  2183  02F3  1003               	clrc
  2184  02F4  0CA0               	rrf	??_low1,f
  2185  02F5  1003               	clrc
  2186  02F6  0CA0               	rrf	??_low1,f
  2187  02F7  1003               	clrc
  2188  02F8  0CA0               	rrf	??_low1,f
  2189  02F9  0008               	return
  2190  02FA                     __end_ofPL2:	
  2191                           
  2192                           	psect	text11
  2193  03C1                     __ptext11:	
  2194 ;; *************** function _setLow *****************
  2195 ;; Defined at:
  2196 ;;		line 609 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\number.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;		None
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;		None
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  1    wreg      void 
  2203 ;; Registers used:
  2204 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2205 ;; Tracked objects:
  2206 ;;		On entry : A00/100
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMMON   BANK0   BANK1
  2210 ;;      Params:         0       0       0
  2211 ;;      Locals:         0       0       0
  2212 ;;      Temps:          0       0       0
  2213 ;;      Totals:         0       0       0
  2214 ;;Total ram usage:        0 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; Hardware stack levels required when called:    2
  2217 ;; This function calls:
  2218 ;;		_setHightOutput
  2219 ;;		_setlowOutput
  2220 ;; This function is called by:
  2221 ;;		_low1
  2222 ;;		_low2
  2223 ;;		_low3
  2224 ;;		_low4
  2225 ;; This function uses a non-reentrant model
  2226 ;;
  2227                           
  2228                           
  2229                           ;psect for function _setLow
  2230  03C1                     _setLow:	
  2231                           
  2232                           ;number.c: 611: TRISA = 0x00;
  2233                           
  2234                           ;incstack = 0
  2235                           ; Regs used in _setLow: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2236  03C1  1683               	bsf	3,5	;RP0=1, select bank1
  2237  03C2  0185               	clrf	5	;volatile
  2238                           
  2239                           ;number.c: 612: TRISB = 0x00;
  2240  03C3  0186               	clrf	6	;volatile
  2241                           
  2242                           ;number.c: 613: TRISC = 0x00;
  2243  03C4  0187               	clrf	7	;volatile
  2244                           
  2245                           ;number.c: 614: setHightOutput(1);
  2246  03C5  3001               	movlw	1
  2247  03C6  227F               	fcall	_setHightOutput
  2248                           
  2249                           ;number.c: 615: setHightOutput(2);
  2250  03C7  3002               	movlw	2
  2251  03C8  227F               	fcall	_setHightOutput
  2252                           
  2253                           ;number.c: 616: setHightOutput(3);
  2254  03C9  3003               	movlw	3
  2255  03CA  227F               	fcall	_setHightOutput
  2256                           
  2257                           ;number.c: 617: setHightOutput(4);
  2258  03CB  3004               	movlw	4
  2259  03CC  227F               	fcall	_setHightOutput
  2260                           
  2261                           ;number.c: 618: setlowOutput(5);
  2262  03CD  3005               	movlw	5
  2263  03CE  21FC               	fcall	_setlowOutput
  2264                           
  2265                           ;number.c: 619: setlowOutput(6);
  2266  03CF  3006               	movlw	6
  2267  03D0  21FC               	fcall	_setlowOutput
  2268                           
  2269                           ;number.c: 620: setlowOutput(7);
  2270  03D1  3007               	movlw	7
  2271  03D2  21FC               	fcall	_setlowOutput
  2272                           
  2273                           ;number.c: 621: setlowOutput(8);
  2274  03D3  3008               	movlw	8
  2275  03D4  21FC               	fcall	_setlowOutput
  2276                           
  2277                           ;number.c: 622: setlowOutput(9);
  2278  03D5  3009               	movlw	9
  2279  03D6  21FC               	fcall	_setlowOutput
  2280                           
  2281                           ;number.c: 623: setlowOutput(10);
  2282  03D7  300A               	movlw	10
  2283  03D8  21FC               	fcall	_setlowOutput
  2284                           
  2285                           ;number.c: 624: setlowOutput(11);
  2286  03D9  300B               	movlw	11
  2287  03DA  21FC               	fcall	_setlowOutput
  2288                           
  2289                           ;number.c: 625: setlowOutput(12);
  2290  03DB  300C               	movlw	12
  2291  03DC  29FC               	ljmp	_setlowOutput
  2292  03DD                     __end_of_setLow:	
  2293                           
  2294                           	psect	text12
  2295  047A                     __ptext12:	
  2296 ;; *************** function _ZHONG *****************
  2297 ;; Defined at:
  2298 ;;		line 267 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\number.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;		None
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;		None
  2303 ;; Return value:  Size  Location     Type
  2304 ;;                  1    wreg      void 
  2305 ;; Registers used:
  2306 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMMON   BANK0   BANK1
  2312 ;;      Params:         0       0       0
  2313 ;;      Locals:         0       0       0
  2314 ;;      Temps:          0       0       0
  2315 ;;      Totals:         0       0       0
  2316 ;;Total ram usage:        0 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; Hardware stack levels required when called:    3
  2319 ;; This function calls:
  2320 ;;		_showNub
  2321 ;; This function is called by:
  2322 ;;		_refreshNub
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           
  2327                           ;psect for function _ZHONG
  2328  047A                     _ZHONG:	
  2329                           
  2330                           ;number.c: 269: showNub(12,3);
  2331                           
  2332                           ;incstack = 0
  2333                           ; Regs used in _ZHONG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2334  047A  3003               	movlw	3
  2335  047B  00F4               	movwf	showNub@low
  2336  047C  300C               	movlw	12
  2337  047D  2C1B               	ljmp	_showNub
  2338  047E                     __end_of_ZHONG:	
  2339                           
  2340                           	psect	text13
  2341  0471                     __ptext13:	
  2342 ;; *************** function _WU *****************
  2343 ;; Defined at:
  2344 ;;		line 256 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\number.c"
  2345 ;; Parameters:    Size  Location     Type
  2346 ;;		None
  2347 ;; Auto vars:     Size  Location     Type
  2348 ;;		None
  2349 ;; Return value:  Size  Location     Type
  2350 ;;                  1    wreg      void 
  2351 ;; Registers used:
  2352 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2353 ;; Tracked objects:
  2354 ;;		On entry : 0/0
  2355 ;;		On exit  : 300/0
  2356 ;;		Unchanged: 0/0
  2357 ;; Data sizes:     COMMON   BANK0   BANK1
  2358 ;;      Params:         0       0       0
  2359 ;;      Locals:         0       0       0
  2360 ;;      Temps:          0       0       0
  2361 ;;      Totals:         0       0       0
  2362 ;;Total ram usage:        0 bytes
  2363 ;; Hardware stack levels used:    1
  2364 ;; Hardware stack levels required when called:    3
  2365 ;; This function calls:
  2366 ;;		_setInput
  2367 ;;		_showNub
  2368 ;; This function is called by:
  2369 ;;		_refreshNub
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373                           
  2374                           ;psect for function _WU
  2375  0471                     _WU:	
  2376                           
  2377                           ;incstack = 0
  2378                           ; Regs used in _WU: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2379  0471  300C               	movlw	12
  2380                           
  2381                           ;number.c: 258: showNub(12,1);
  2382  0472  01F4               	clrf	showNub@low
  2383  0473  0AF4               	incf	showNub@low,f
  2384  0474  241B               	fcall	_showNub
  2385                           
  2386                           ;number.c: 259: setInput();
  2387  0475  2BF6               	ljmp	l3022
  2388  0476                     __end_of_WU:	
  2389                           
  2390                           	psect	text14
  2391  047E                     __ptext14:	
  2392 ;; *************** function _RUO *****************
  2393 ;; Defined at:
  2394 ;;		line 262 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\number.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;		None
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;		None
  2399 ;; Return value:  Size  Location     Type
  2400 ;;                  1    wreg      void 
  2401 ;; Registers used:
  2402 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMMON   BANK0   BANK1
  2408 ;;      Params:         0       0       0
  2409 ;;      Locals:         0       0       0
  2410 ;;      Temps:          0       0       0
  2411 ;;      Totals:         0       0       0
  2412 ;;Total ram usage:        0 bytes
  2413 ;; Hardware stack levels used:    1
  2414 ;; Hardware stack levels required when called:    3
  2415 ;; This function calls:
  2416 ;;		_showNub
  2417 ;; This function is called by:
  2418 ;;		_refreshNub
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           
  2423                           ;psect for function _RUO
  2424  047E                     _RUO:	
  2425                           
  2426                           ;number.c: 264: showNub(12,2);
  2427                           
  2428                           ;incstack = 0
  2429                           ; Regs used in _RUO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2430  047E  3002               	movlw	2
  2431  047F  00F4               	movwf	showNub@low
  2432  0480  300C               	movlw	12
  2433  0481  2C1B               	ljmp	_showNub
  2434  0482                     __end_of_RUO:	
  2435                           
  2436                           	psect	text15
  2437  0482                     __ptext15:	
  2438 ;; *************** function _QIANG *****************
  2439 ;; Defined at:
  2440 ;;		line 272 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\number.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;		None
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;		None
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  1    wreg      void 
  2447 ;; Registers used:
  2448 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMMON   BANK0   BANK1
  2454 ;;      Params:         0       0       0
  2455 ;;      Locals:         0       0       0
  2456 ;;      Temps:          0       0       0
  2457 ;;      Totals:         0       0       0
  2458 ;;Total ram usage:        0 bytes
  2459 ;; Hardware stack levels used:    1
  2460 ;; Hardware stack levels required when called:    3
  2461 ;; This function calls:
  2462 ;;		_showNub
  2463 ;; This function is called by:
  2464 ;;		_refreshNub
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           
  2469                           ;psect for function _QIANG
  2470  0482                     _QIANG:	
  2471                           
  2472                           ;number.c: 274: showNub(12,4);
  2473                           
  2474                           ;incstack = 0
  2475                           ; Regs used in _QIANG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2476  0482  3004               	movlw	4
  2477  0483  00F4               	movwf	showNub@low
  2478  0484  300C               	movlw	12
  2479  0485  2C1B               	ljmp	_showNub
  2480  0486                     __end_of_QIANG:	
  2481                           
  2482                           	psect	text16
  2483  041B                     __ptext16:	
  2484 ;; *************** function _showNub *****************
  2485 ;; Defined at:
  2486 ;;		line 278 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\number.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;  hight           1    wreg     unsigned char 
  2489 ;;  low             1    4[COMMON] unsigned char 
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;  hight           1    5[COMMON] unsigned char 
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  1    wreg      void 
  2494 ;; Registers used:
  2495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMMON   BANK0   BANK1
  2501 ;;      Params:         1       0       0
  2502 ;;      Locals:         1       0       0
  2503 ;;      Temps:          0       0       0
  2504 ;;      Totals:         2       0       0
  2505 ;;Total ram usage:        2 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; Hardware stack levels required when called:    2
  2508 ;; This function calls:
  2509 ;;		_delayms
  2510 ;;		_setHightOutput
  2511 ;;		_setInput
  2512 ;;		_setOutput
  2513 ;;		_setlowOutput
  2514 ;; This function is called by:
  2515 ;;		_WU
  2516 ;;		_RUO
  2517 ;;		_ZHONG
  2518 ;;		_QIANG
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           
  2523                           ;psect for function _showNub
  2524  041B                     _showNub:	
  2525                           
  2526                           ;incstack = 0
  2527                           ; Regs used in _showNub: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2528                           ;showNub@hight stored from wreg
  2529  041B  00F5               	movwf	showNub@hight
  2530                           
  2531                           ;number.c: 280: setInput();
  2532  041C  23F6               	fcall	_setInput
  2533                           
  2534                           ;number.c: 281: delayms(2);
  2535  041D  3002               	movlw	2
  2536  041E  2469               	fcall	_delayms
  2537                           
  2538                           ;number.c: 282: setOutput(low);
  2539  041F  0874               	movf	showNub@low,w
  2540  0420  223E               	fcall	_setOutput
  2541                           
  2542                           ;number.c: 283: setOutput(hight);
  2543  0421  0875               	movf	showNub@hight,w
  2544  0422  223E               	fcall	_setOutput
  2545                           
  2546                           ;number.c: 284: setlowOutput(low);
  2547  0423  0874               	movf	showNub@low,w
  2548  0424  21FC               	fcall	_setlowOutput
  2549                           
  2550                           ;number.c: 285: setHightOutput(hight);
  2551  0425  0875               	movf	showNub@hight,w
  2552  0426  227F               	fcall	_setHightOutput
  2553                           
  2554                           ;number.c: 286: delayms(15);
  2555  0427  300F               	movlw	15
  2556  0428  2469               	fcall	_delayms
  2557  0429  0064               	clrwdt	;# 
  2558  042A  0008               	return
  2559  042B                     __end_of_showNub:	
  2560                           
  2561                           	psect	text17
  2562  01FC                     __ptext17:	
  2563 ;; *************** function _setlowOutput *****************
  2564 ;; Defined at:
  2565 ;;		line 336 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\number.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;  outPut          1    wreg     unsigned char 
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;  outPut          1    2[COMMON] unsigned char 
  2570 ;; Return value:  Size  Location     Type
  2571 ;;                  1    wreg      void 
  2572 ;; Registers used:
  2573 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2574 ;; Tracked objects:
  2575 ;;		On entry : 0/100
  2576 ;;		On exit  : 0/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMMON   BANK0   BANK1
  2579 ;;      Params:         0       0       0
  2580 ;;      Locals:         1       0       0
  2581 ;;      Temps:          0       0       0
  2582 ;;      Totals:         1       0       0
  2583 ;;Total ram usage:        1 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    1
  2586 ;; This function calls:
  2587 ;;		Nothing
  2588 ;; This function is called by:
  2589 ;;		_showNub
  2590 ;;		_low1
  2591 ;;		_low2
  2592 ;;		_low3
  2593 ;;		_low4
  2594 ;;		_setLow
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           
  2599                           ;psect for function _setlowOutput
  2600  01FC                     _setlowOutput:	
  2601                           
  2602                           ;incstack = 0
  2603                           ; Regs used in _setlowOutput: [wreg-fsr0h+status,2+status,0]
  2604                           ;setlowOutput@outPut stored from wreg
  2605  01FC  00F2               	movwf	setlowOutput@outPut
  2606                           
  2607                           ;number.c: 338: switch(outPut)
  2608  01FD  2A2F               	goto	l3626
  2609  01FE                     l1981:	
  2610                           ;number.c: 339: {
  2611                           ;number.c: 340: case 12:
  2612                           
  2613                           
  2614                           ;number.c: 341: PORTA &= 0x7F;
  2615  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  2616  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  2617  0200  1385               	bcf	5,7	;volatile
  2618                           
  2619                           ;number.c: 342: break;
  2620  0201  0008               	return
  2621  0202                     l1983:	
  2622                           ;number.c: 343: case 11:
  2623                           
  2624                           
  2625                           ;number.c: 344: PORTA &= 0xFB;
  2626  0202  1283               	bcf	3,5	;RP0=0, select bank0
  2627  0203  1303               	bcf	3,6	;RP1=0, select bank0
  2628  0204  1105               	bcf	5,2	;volatile
  2629                           
  2630                           ;number.c: 345: break;
  2631  0205  0008               	return
  2632  0206                     l1984:	
  2633                           ;number.c: 346: case 10:
  2634                           
  2635                           
  2636                           ;number.c: 347: PORTA &= 0xEF;
  2637  0206  1283               	bcf	3,5	;RP0=0, select bank0
  2638  0207  1303               	bcf	3,6	;RP1=0, select bank0
  2639  0208  1205               	bcf	5,4	;volatile
  2640                           
  2641                           ;number.c: 348: break;
  2642  0209  0008               	return
  2643  020A                     l1985:	
  2644                           ;number.c: 349: case 9:
  2645                           
  2646                           
  2647                           ;number.c: 350: PORTB &= 0xFD;
  2648  020A  1283               	bcf	3,5	;RP0=0, select bank0
  2649  020B  1303               	bcf	3,6	;RP1=0, select bank0
  2650  020C  1086               	bcf	6,1	;volatile
  2651                           
  2652                           ;number.c: 351: break;
  2653  020D  0008               	return
  2654  020E                     l1986:	
  2655                           ;number.c: 352: case 8:
  2656                           
  2657                           
  2658                           ;number.c: 353: PORTC &= 0xFB;
  2659  020E  1283               	bcf	3,5	;RP0=0, select bank0
  2660  020F  1303               	bcf	3,6	;RP1=0, select bank0
  2661  0210  1107               	bcf	7,2	;volatile
  2662                           
  2663                           ;number.c: 354: break;
  2664  0211  0008               	return
  2665  0212                     l1987:	
  2666                           ;number.c: 355: case 7:
  2667                           
  2668                           
  2669                           ;number.c: 356: PORTC &= 0xFE;
  2670  0212  1283               	bcf	3,5	;RP0=0, select bank0
  2671  0213  1303               	bcf	3,6	;RP1=0, select bank0
  2672  0214  1007               	bcf	7,0	;volatile
  2673                           
  2674                           ;number.c: 357: break;
  2675  0215  0008               	return
  2676  0216                     l1988:	
  2677                           ;number.c: 358: case 6:
  2678                           
  2679                           
  2680                           ;number.c: 359: PORTC &= 0xFD;
  2681  0216  1283               	bcf	3,5	;RP0=0, select bank0
  2682  0217  1303               	bcf	3,6	;RP1=0, select bank0
  2683  0218  1087               	bcf	7,1	;volatile
  2684                           
  2685                           ;number.c: 360: break;
  2686  0219  0008               	return
  2687  021A                     l1989:	
  2688                           ;number.c: 361: case 5:
  2689                           
  2690                           
  2691                           ;number.c: 362: PORTC &= 0xF7;
  2692  021A  1283               	bcf	3,5	;RP0=0, select bank0
  2693  021B  1303               	bcf	3,6	;RP1=0, select bank0
  2694  021C  1187               	bcf	7,3	;volatile
  2695                           
  2696                           ;number.c: 363: break;
  2697  021D  0008               	return
  2698  021E                     l1990:	
  2699                           ;number.c: 364: case 4:
  2700                           
  2701                           
  2702                           ;number.c: 365: PORTA &= 0xDF;
  2703  021E  1283               	bcf	3,5	;RP0=0, select bank0
  2704  021F  1303               	bcf	3,6	;RP1=0, select bank0
  2705  0220  1285               	bcf	5,5	;volatile
  2706                           
  2707                           ;number.c: 366: break;
  2708  0221  0008               	return
  2709  0222                     l1991:	
  2710                           ;number.c: 367: case 3:
  2711                           
  2712                           
  2713                           ;number.c: 368: PORTA &= 0xF7;
  2714  0222  1283               	bcf	3,5	;RP0=0, select bank0
  2715  0223  1303               	bcf	3,6	;RP1=0, select bank0
  2716  0224  1185               	bcf	5,3	;volatile
  2717                           
  2718                           ;number.c: 369: break;
  2719  0225  0008               	return
  2720  0226                     l1992:	
  2721                           ;number.c: 370: case 2:
  2722                           
  2723                           
  2724                           ;number.c: 371: PORTA &= 0xFD;
  2725  0226  1283               	bcf	3,5	;RP0=0, select bank0
  2726  0227  1303               	bcf	3,6	;RP1=0, select bank0
  2727  0228  1085               	bcf	5,1	;volatile
  2728                           
  2729                           ;number.c: 372: break;
  2730  0229  0008               	return
  2731  022A                     l1993:	
  2732                           ;number.c: 373: case 1:
  2733                           
  2734                           
  2735                           ;number.c: 374: PORTC &= 0xFE;
  2736  022A  1283               	bcf	3,5	;RP0=0, select bank0
  2737  022B  1303               	bcf	3,6	;RP1=0, select bank0
  2738  022C  1007               	bcf	7,0	;volatile
  2739                           
  2740                           ;number.c: 375: PORTA &= 0xBF;
  2741  022D  1305               	bcf	5,6	;volatile
  2742                           
  2743                           ;number.c: 376: break;
  2744  022E  0008               	return
  2745  022F                     l3626:	
  2746  022F  0872               	movf	setlowOutput@outPut,w
  2747                           
  2748                           ; Switch size 1, requested type "space"
  2749                           ; Number of cases is 12, Range of values is 1 to 12
  2750                           ; switch strategies available:
  2751                           ; Name         Instructions Cycles
  2752                           ; direct_byte           21     9 (fixed)
  2753                           ; simple_byte           37    19 (average)
  2754                           ; jumptable            263     9 (fixed)
  2755                           ;	Chosen strategy is direct_byte
  2756  0230  3EFF               	addlw	-1
  2757  0231  1C03               	skipc
  2758  0232  0008               	return
  2759  0233  0084               	movwf	4
  2760  0234  300C               	movlw	12
  2761  0235  0204               	subwf	4,w
  2762  0236  1803               	skipnc
  2763  0237  0008               	return
  2764  0238  3004               	movlw	high S4044
  2765  0239  008A               	movwf	10
  2766  023A  303A               	movlw	low S4044
  2767  023B  0704               	addwf	4,w
  2768  023C  0082               	movwf	2
  2769  023D  0008               	return
  2770  023E                     __end_of_setlowOutput:	
  2771                           
  2772                           	psect	swtext2
  2773  043A                     __pswtext2:	
  2774  043A                     S4044:	
  2775  043A  2A2A               	ljmp	l1993
  2776  043B  2A26               	ljmp	l1992
  2777  043C  2A22               	ljmp	l1991
  2778  043D  2A1E               	ljmp	l1990
  2779  043E  2A1A               	ljmp	l1989
  2780  043F  2A16               	ljmp	l1988
  2781  0440  2A12               	ljmp	l1987
  2782  0441  2A0E               	ljmp	l1986
  2783  0442  2A0A               	ljmp	l1985
  2784  0443  2A06               	ljmp	l1984
  2785  0444  2A02               	ljmp	l1983
  2786  0445  29FE               	ljmp	l1981
  2787                           
  2788                           	psect	text18
  2789  023E                     __ptext18:	
  2790 ;; *************** function _setOutput *****************
  2791 ;; Defined at:
  2792 ;;		line 381 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\number.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  outPut          1    wreg     unsigned char 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  outPut          1    2[COMMON] unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMMON   BANK0   BANK1
  2806 ;;      Params:         0       0       0
  2807 ;;      Locals:         1       0       0
  2808 ;;      Temps:          0       0       0
  2809 ;;      Totals:         1       0       0
  2810 ;;Total ram usage:        1 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    1
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_showNub
  2817 ;;		_low1
  2818 ;;		_low2
  2819 ;;		_low3
  2820 ;;		_low4
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           
  2825                           ;psect for function _setOutput
  2826  023E                     _setOutput:	
  2827                           
  2828                           ;incstack = 0
  2829                           ; Regs used in _setOutput: [wreg-fsr0h+status,2+status,0]
  2830                           ;setOutput@outPut stored from wreg
  2831  023E  00F2               	movwf	setOutput@outPut
  2832                           
  2833                           ;number.c: 383: switch(outPut)
  2834  023F  2A70               	goto	l3606
  2835  0240                     l1998:	
  2836                           ;number.c: 384: {
  2837                           ;number.c: 385: case 12:
  2838                           
  2839                           
  2840                           ;number.c: 386: TRISA &= 0x7F;
  2841  0240  1683               	bsf	3,5	;RP0=1, select bank1
  2842  0241  1303               	bcf	3,6	;RP1=0, select bank1
  2843  0242  1385               	bcf	5,7	;volatile
  2844                           
  2845                           ;number.c: 387: break;
  2846  0243  0008               	return
  2847  0244                     l2000:	
  2848                           ;number.c: 388: case 11:
  2849                           
  2850                           
  2851                           ;number.c: 389: TRISA &= 0xFB;
  2852  0244  1683               	bsf	3,5	;RP0=1, select bank1
  2853  0245  1303               	bcf	3,6	;RP1=0, select bank1
  2854  0246  1105               	bcf	5,2	;volatile
  2855                           
  2856                           ;number.c: 390: break;
  2857  0247  0008               	return
  2858  0248                     l2001:	
  2859                           ;number.c: 391: case 10:
  2860                           
  2861                           
  2862                           ;number.c: 392: TRISA &= 0xEF;
  2863  0248  1683               	bsf	3,5	;RP0=1, select bank1
  2864  0249  1303               	bcf	3,6	;RP1=0, select bank1
  2865  024A  1205               	bcf	5,4	;volatile
  2866                           
  2867                           ;number.c: 393: break;
  2868  024B  0008               	return
  2869  024C                     l2002:	
  2870                           ;number.c: 394: case 9:
  2871                           
  2872                           
  2873                           ;number.c: 395: TRISB &= 0xFD;
  2874  024C  1683               	bsf	3,5	;RP0=1, select bank1
  2875  024D  1303               	bcf	3,6	;RP1=0, select bank1
  2876  024E  1086               	bcf	6,1	;volatile
  2877                           
  2878                           ;number.c: 396: break;
  2879  024F  0008               	return
  2880  0250                     l2003:	
  2881                           ;number.c: 397: case 8:
  2882                           
  2883                           
  2884                           ;number.c: 398: TRISC &= 0xFB;
  2885  0250  1683               	bsf	3,5	;RP0=1, select bank1
  2886  0251  1303               	bcf	3,6	;RP1=0, select bank1
  2887  0252  1107               	bcf	7,2	;volatile
  2888                           
  2889                           ;number.c: 399: break;
  2890  0253  0008               	return
  2891  0254                     l2004:	
  2892                           ;number.c: 400: case 7:
  2893                           
  2894                           
  2895                           ;number.c: 401: TRISC &= 0xFE;
  2896  0254  1683               	bsf	3,5	;RP0=1, select bank1
  2897  0255  1303               	bcf	3,6	;RP1=0, select bank1
  2898  0256  1007               	bcf	7,0	;volatile
  2899                           
  2900                           ;number.c: 402: break;
  2901  0257  0008               	return
  2902  0258                     l2005:	
  2903                           ;number.c: 403: case 6:
  2904                           
  2905                           
  2906                           ;number.c: 404: TRISC &= 0xFD;
  2907  0258  1683               	bsf	3,5	;RP0=1, select bank1
  2908  0259  1303               	bcf	3,6	;RP1=0, select bank1
  2909  025A  1087               	bcf	7,1	;volatile
  2910                           
  2911                           ;number.c: 405: break;
  2912  025B  0008               	return
  2913  025C                     l2006:	
  2914                           ;number.c: 406: case 5:
  2915                           
  2916                           
  2917                           ;number.c: 407: TRISC &= 0xF7;
  2918  025C  1683               	bsf	3,5	;RP0=1, select bank1
  2919  025D  1303               	bcf	3,6	;RP1=0, select bank1
  2920  025E  1187               	bcf	7,3	;volatile
  2921                           
  2922                           ;number.c: 408: break;
  2923  025F  0008               	return
  2924  0260                     l2007:	
  2925                           ;number.c: 409: case 4:
  2926                           
  2927                           
  2928                           ;number.c: 410: TRISA &= 0xDF;
  2929  0260  1683               	bsf	3,5	;RP0=1, select bank1
  2930  0261  1303               	bcf	3,6	;RP1=0, select bank1
  2931  0262  1285               	bcf	5,5	;volatile
  2932                           
  2933                           ;number.c: 411: break;
  2934  0263  0008               	return
  2935  0264                     l2008:	
  2936                           ;number.c: 412: case 3:
  2937                           
  2938                           
  2939                           ;number.c: 413: TRISA &= 0xF7;
  2940  0264  1683               	bsf	3,5	;RP0=1, select bank1
  2941  0265  1303               	bcf	3,6	;RP1=0, select bank1
  2942  0266  1185               	bcf	5,3	;volatile
  2943                           
  2944                           ;number.c: 414: break;
  2945  0267  0008               	return
  2946  0268                     l2009:	
  2947                           ;number.c: 415: case 2:
  2948                           
  2949                           
  2950                           ;number.c: 416: TRISA &= 0xFD;
  2951  0268  1683               	bsf	3,5	;RP0=1, select bank1
  2952  0269  1303               	bcf	3,6	;RP1=0, select bank1
  2953  026A  1085               	bcf	5,1	;volatile
  2954                           
  2955                           ;number.c: 417: break;
  2956  026B  0008               	return
  2957  026C                     l2010:	
  2958                           ;number.c: 418: case 1:
  2959                           
  2960                           
  2961                           ;number.c: 419: TRISA &= 0xBF;
  2962  026C  1683               	bsf	3,5	;RP0=1, select bank1
  2963  026D  1303               	bcf	3,6	;RP1=0, select bank1
  2964  026E  1305               	bcf	5,6	;volatile
  2965                           
  2966                           ;number.c: 420: break;
  2967  026F  0008               	return
  2968  0270                     l3606:	
  2969  0270  0872               	movf	setOutput@outPut,w
  2970                           
  2971                           ; Switch size 1, requested type "space"
  2972                           ; Number of cases is 12, Range of values is 1 to 12
  2973                           ; switch strategies available:
  2974                           ; Name         Instructions Cycles
  2975                           ; direct_byte           21     9 (fixed)
  2976                           ; simple_byte           37    19 (average)
  2977                           ; jumptable            263     9 (fixed)
  2978                           ;	Chosen strategy is direct_byte
  2979  0271  3EFF               	addlw	-1
  2980  0272  1C03               	skipc
  2981  0273  0008               	return
  2982  0274  0084               	movwf	4
  2983  0275  300C               	movlw	12
  2984  0276  0204               	subwf	4,w
  2985  0277  1803               	skipnc
  2986  0278  0008               	return
  2987  0279  3004               	movlw	high S4046
  2988  027A  008A               	movwf	10
  2989  027B  3046               	movlw	low S4046
  2990  027C  0704               	addwf	4,w
  2991  027D  0082               	movwf	2
  2992  027E  0008               	return
  2993  027F                     __end_of_setOutput:	
  2994                           
  2995                           	psect	swtext3
  2996  0446                     __pswtext3:	
  2997  0446                     S4046:	
  2998  0446  2A6C               	ljmp	l2010
  2999  0447  2A68               	ljmp	l2009
  3000  0448  2A64               	ljmp	l2008
  3001  0449  2A60               	ljmp	l2007
  3002  044A  2A5C               	ljmp	l2006
  3003  044B  2A58               	ljmp	l2005
  3004  044C  2A54               	ljmp	l2004
  3005  044D  2A50               	ljmp	l2003
  3006  044E  2A4C               	ljmp	l2002
  3007  044F  2A48               	ljmp	l2001
  3008  0450  2A44               	ljmp	l2000
  3009  0451  2A40               	ljmp	l1998
  3010                           
  3011                           	psect	text19
  3012  03F6                     __ptext19:	
  3013 ;; *************** function _setInput *****************
  3014 ;; Defined at:
  3015 ;;		line 424 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\number.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;		None
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;		None
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  1    wreg      void 
  3022 ;; Registers used:
  3023 ;;		wreg, status,2, status,0
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 300/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMMON   BANK0   BANK1
  3029 ;;      Params:         0       0       0
  3030 ;;      Locals:         0       0       0
  3031 ;;      Temps:          0       0       0
  3032 ;;      Totals:         0       0       0
  3033 ;;Total ram usage:        0 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    1
  3036 ;; This function calls:
  3037 ;;		Nothing
  3038 ;; This function is called by:
  3039 ;;		_refreshNub
  3040 ;;		_WU
  3041 ;;		_showNub
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           
  3046                           ;psect for function _setInput
  3047  03F6                     _setInput:	
  3048  03F6                     l3022:	
  3049                           ;incstack = 0
  3050                           ; Regs used in _setInput: [wreg+status,2+status,0]
  3051                           
  3052                           
  3053                           ;number.c: 426: TRISA = 0xFF;
  3054  03F6  30FF               	movlw	255
  3055  03F7  1683               	bsf	3,5	;RP0=1, select bank1
  3056  03F8  1303               	bcf	3,6	;RP1=0, select bank1
  3057  03F9  0085               	movwf	5	;volatile
  3058                           
  3059                           ;number.c: 427: PORTA |= 0xFF;
  3060  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  3061  03FB  0085               	movwf	5	;volatile
  3062                           
  3063                           ;number.c: 428: TRISB |= 0xC2;
  3064  03FC  30C2               	movlw	194
  3065  03FD  1683               	bsf	3,5	;RP0=1, select bank1
  3066  03FE  0486               	iorwf	6,f	;volatile
  3067                           
  3068                           ;number.c: 429: PORTB = 0xC2;
  3069  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  3070  0400  0086               	movwf	6	;volatile
  3071                           
  3072                           ;number.c: 430: TRISC |= 0x0F;
  3073  0401  300F               	movlw	15
  3074  0402  1683               	bsf	3,5	;RP0=1, select bank1
  3075  0403  0487               	iorwf	7,f	;volatile
  3076                           
  3077                           ;number.c: 431: PORTC = 0x0F;
  3078  0404  1283               	bcf	3,5	;RP0=0, select bank0
  3079  0405  0087               	movwf	7	;volatile
  3080                           
  3081                           ;number.c: 432: PORTA;
  3082  0406  0805               	movf	5,w	;volatile
  3083                           
  3084                           ;number.c: 433: PORTB;
  3085  0407  0806               	movf	6,w	;volatile
  3086                           
  3087                           ;number.c: 434: PORTC;
  3088  0408  0807               	movf	7,w	;volatile
  3089  0409  0008               	return
  3090  040A                     __end_of_setInput:	
  3091                           
  3092                           	psect	text20
  3093  027F                     __ptext20:	
  3094 ;; *************** function _setHightOutput *****************
  3095 ;; Defined at:
  3096 ;;		line 292 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\number.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;  outPut          1    wreg     unsigned char 
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;  outPut          1    2[COMMON] unsigned char 
  3101 ;; Return value:  Size  Location     Type
  3102 ;;                  1    wreg      void 
  3103 ;; Registers used:
  3104 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3105 ;; Tracked objects:
  3106 ;;		On entry : 0/0
  3107 ;;		On exit  : 0/0
  3108 ;;		Unchanged: 0/0
  3109 ;; Data sizes:     COMMON   BANK0   BANK1
  3110 ;;      Params:         0       0       0
  3111 ;;      Locals:         1       0       0
  3112 ;;      Temps:          0       0       0
  3113 ;;      Totals:         1       0       0
  3114 ;;Total ram usage:        1 bytes
  3115 ;; Hardware stack levels used:    1
  3116 ;; Hardware stack levels required when called:    1
  3117 ;; This function calls:
  3118 ;;		Nothing
  3119 ;; This function is called by:
  3120 ;;		_showNub
  3121 ;;		_low1
  3122 ;;		_low2
  3123 ;;		_low3
  3124 ;;		_low4
  3125 ;;		_setLow
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           
  3130                           ;psect for function _setHightOutput
  3131  027F                     _setHightOutput:	
  3132                           
  3133                           ;incstack = 0
  3134                           ; Regs used in _setHightOutput: [wreg-fsr0h+status,2+status,0]
  3135                           ;setHightOutput@outPut stored from wreg
  3136  027F  00F2               	movwf	setHightOutput@outPut
  3137                           
  3138                           ;number.c: 294: switch(outPut)
  3139  0280  2AB1               	goto	l3616
  3140  0281                     l1964:	
  3141                           ;number.c: 295: {
  3142                           ;number.c: 296: case 12:
  3143                           
  3144                           
  3145                           ;number.c: 297: PORTA |= 0x80;
  3146  0281  1283               	bcf	3,5	;RP0=0, select bank0
  3147  0282  1303               	bcf	3,6	;RP1=0, select bank0
  3148  0283  1785               	bsf	5,7	;volatile
  3149                           
  3150                           ;number.c: 298: break;
  3151  0284  0008               	return
  3152  0285                     l1966:	
  3153                           ;number.c: 299: case 11:
  3154                           
  3155                           
  3156                           ;number.c: 300: PORTA |= 0x04;
  3157  0285  1283               	bcf	3,5	;RP0=0, select bank0
  3158  0286  1303               	bcf	3,6	;RP1=0, select bank0
  3159  0287  1505               	bsf	5,2	;volatile
  3160                           
  3161                           ;number.c: 301: break;
  3162  0288  0008               	return
  3163  0289                     l1967:	
  3164                           ;number.c: 302: case 10:
  3165                           
  3166                           
  3167                           ;number.c: 303: PORTA |= 0x10;
  3168  0289  1283               	bcf	3,5	;RP0=0, select bank0
  3169  028A  1303               	bcf	3,6	;RP1=0, select bank0
  3170  028B  1605               	bsf	5,4	;volatile
  3171                           
  3172                           ;number.c: 304: break;
  3173  028C  0008               	return
  3174  028D                     l1968:	
  3175                           ;number.c: 305: case 9:
  3176                           
  3177                           
  3178                           ;number.c: 306: PORTB |= 0x02;
  3179  028D  1283               	bcf	3,5	;RP0=0, select bank0
  3180  028E  1303               	bcf	3,6	;RP1=0, select bank0
  3181  028F  1486               	bsf	6,1	;volatile
  3182                           
  3183                           ;number.c: 307: break;
  3184  0290  0008               	return
  3185  0291                     l1969:	
  3186                           ;number.c: 308: case 8:
  3187                           
  3188                           
  3189                           ;number.c: 309: PORTC |= 0x04;
  3190  0291  1283               	bcf	3,5	;RP0=0, select bank0
  3191  0292  1303               	bcf	3,6	;RP1=0, select bank0
  3192  0293  1507               	bsf	7,2	;volatile
  3193                           
  3194                           ;number.c: 310: break;
  3195  0294  0008               	return
  3196  0295                     l1970:	
  3197                           ;number.c: 311: case 7:
  3198                           
  3199                           
  3200                           ;number.c: 312: PORTC |= 0x01;
  3201  0295  1283               	bcf	3,5	;RP0=0, select bank0
  3202  0296  1303               	bcf	3,6	;RP1=0, select bank0
  3203  0297  1407               	bsf	7,0	;volatile
  3204                           
  3205                           ;number.c: 313: break;
  3206  0298  0008               	return
  3207  0299                     l1971:	
  3208                           ;number.c: 314: case 6:
  3209                           
  3210                           
  3211                           ;number.c: 315: PORTC |= 0x02;
  3212  0299  1283               	bcf	3,5	;RP0=0, select bank0
  3213  029A  1303               	bcf	3,6	;RP1=0, select bank0
  3214  029B  1487               	bsf	7,1	;volatile
  3215                           
  3216                           ;number.c: 316: break;
  3217  029C  0008               	return
  3218  029D                     l1972:	
  3219                           ;number.c: 317: case 5:
  3220                           
  3221                           
  3222                           ;number.c: 318: PORTC |= 0x08;
  3223  029D  1283               	bcf	3,5	;RP0=0, select bank0
  3224  029E  1303               	bcf	3,6	;RP1=0, select bank0
  3225  029F  1587               	bsf	7,3	;volatile
  3226                           
  3227                           ;number.c: 319: break;
  3228  02A0  0008               	return
  3229  02A1                     l1973:	
  3230                           ;number.c: 320: case 4:
  3231                           
  3232                           
  3233                           ;number.c: 321: PORTA |= 0x20;
  3234  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  3235  02A2  1303               	bcf	3,6	;RP1=0, select bank0
  3236  02A3  1685               	bsf	5,5	;volatile
  3237                           
  3238                           ;number.c: 322: break;
  3239  02A4  0008               	return
  3240  02A5                     l1974:	
  3241                           ;number.c: 323: case 3:
  3242                           
  3243                           
  3244                           ;number.c: 324: PORTA |= 0x08;
  3245  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  3246  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  3247  02A7  1585               	bsf	5,3	;volatile
  3248                           
  3249                           ;number.c: 325: break;
  3250  02A8  0008               	return
  3251  02A9                     l1975:	
  3252                           ;number.c: 326: case 2:
  3253                           
  3254                           
  3255                           ;number.c: 327: PORTA |= 0x02;
  3256  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  3257  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  3258  02AB  1485               	bsf	5,1	;volatile
  3259                           
  3260                           ;number.c: 328: break;
  3261  02AC  0008               	return
  3262  02AD                     l1976:	
  3263                           ;number.c: 329: case 1:
  3264                           
  3265                           
  3266                           ;number.c: 330: PORTA |= 0x40;
  3267  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  3268  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  3269  02AF  1705               	bsf	5,6	;volatile
  3270                           
  3271                           ;number.c: 331: break;
  3272  02B0  0008               	return
  3273  02B1                     l3616:	
  3274  02B1  0872               	movf	setHightOutput@outPut,w
  3275                           
  3276                           ; Switch size 1, requested type "space"
  3277                           ; Number of cases is 12, Range of values is 1 to 12
  3278                           ; switch strategies available:
  3279                           ; Name         Instructions Cycles
  3280                           ; direct_byte           21     9 (fixed)
  3281                           ; simple_byte           37    19 (average)
  3282                           ; jumptable            263     9 (fixed)
  3283                           ;	Chosen strategy is direct_byte
  3284  02B2  3EFF               	addlw	-1
  3285  02B3  1C03               	skipc
  3286  02B4  0008               	return
  3287  02B5  0084               	movwf	4
  3288  02B6  300C               	movlw	12
  3289  02B7  0204               	subwf	4,w
  3290  02B8  1803               	skipnc
  3291  02B9  0008               	return
  3292  02BA  3004               	movlw	high S4048
  3293  02BB  008A               	movwf	10
  3294  02BC  3052               	movlw	low S4048
  3295  02BD  0704               	addwf	4,w
  3296  02BE  0082               	movwf	2
  3297  02BF  0008               	return
  3298  02C0                     __end_of_setHightOutput:	
  3299                           
  3300                           	psect	swtext4
  3301  0452                     __pswtext4:	
  3302  0452                     S4048:	
  3303  0452  2AAD               	ljmp	l1976
  3304  0453  2AA9               	ljmp	l1975
  3305  0454  2AA5               	ljmp	l1974
  3306  0455  2AA1               	ljmp	l1973
  3307  0456  2A9D               	ljmp	l1972
  3308  0457  2A99               	ljmp	l1971
  3309  0458  2A95               	ljmp	l1970
  3310  0459  2A91               	ljmp	l1969
  3311  045A  2A8D               	ljmp	l1968
  3312  045B  2A89               	ljmp	l1967
  3313  045C  2A85               	ljmp	l1966
  3314  045D  2A81               	ljmp	l1964
  3315                           
  3316                           	psect	text21
  3317  0469                     __ptext21:	
  3318 ;; *************** function _delayms *****************
  3319 ;; Defined at:
  3320 ;;		line 631 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\number.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;  time            1    wreg     unsigned char 
  3323 ;; Auto vars:     Size  Location     Type
  3324 ;;  time            1    2[COMMON] unsigned char 
  3325 ;;  i               1    3[COMMON] unsigned char 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  1    wreg      void 
  3328 ;; Registers used:
  3329 ;;		wreg, status,2, status,0
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMMON   BANK0   BANK1
  3335 ;;      Params:         0       0       0
  3336 ;;      Locals:         2       0       0
  3337 ;;      Temps:          0       0       0
  3338 ;;      Totals:         2       0       0
  3339 ;;Total ram usage:        2 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    1
  3342 ;; This function calls:
  3343 ;;		Nothing
  3344 ;; This function is called by:
  3345 ;;		_showNub
  3346 ;;		_low1
  3347 ;;		_low2
  3348 ;;		_low3
  3349 ;;		_low4
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           
  3354                           ;psect for function _delayms
  3355  0469                     _delayms:	
  3356                           
  3357                           ;incstack = 0
  3358                           ; Regs used in _delayms: [wreg+status,2+status,0]
  3359                           ;delayms@time stored from wreg
  3360  0469  00F2               	movwf	delayms@time
  3361                           
  3362                           ;number.c: 633: for(unsigned char i=0;i<time;i++);
  3363  046A  01F3               	clrf	delayms@i
  3364  046B                     l3636:	
  3365  046B  0872               	movf	delayms@time,w
  3366  046C  0273               	subwf	delayms@i,w
  3367  046D  1803               	btfsc	3,0
  3368  046E  0008               	return
  3369  046F  0AF3               	incf	delayms@i,f
  3370  0470  2C6B               	goto	l3636
  3371  0471                     __end_of_delayms:	
  3372                           
  3373                           	psect	text22
  3374  045E                     __ptext22:	
  3375 ;; *************** function _DelayXms *****************
  3376 ;; Defined at:
  3377 ;;		line 65 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\adc.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;  x               1    wreg     unsigned char 
  3380 ;; Auto vars:     Size  Location     Type
  3381 ;;  x               1    2[COMMON] unsigned char 
  3382 ;;  j               1    4[COMMON] unsigned char 
  3383 ;;  i               1    3[COMMON] unsigned char 
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  1    wreg      void 
  3386 ;; Registers used:
  3387 ;;		wreg, status,2, status,0
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMMON   BANK0   BANK1
  3393 ;;      Params:         0       0       0
  3394 ;;      Locals:         3       0       0
  3395 ;;      Temps:          0       0       0
  3396 ;;      Totals:         3       0       0
  3397 ;;Total ram usage:        3 bytes
  3398 ;; Hardware stack levels used:    1
  3399 ;; Hardware stack levels required when called:    1
  3400 ;; This function calls:
  3401 ;;		Nothing
  3402 ;; This function is called by:
  3403 ;;		_refreshNub
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           
  3408                           ;psect for function _DelayXms
  3409  045E                     _DelayXms:	
  3410                           
  3411                           ;incstack = 0
  3412                           ; Regs used in _DelayXms: [wreg+status,2+status,0]
  3413                           ;DelayXms@x stored from wreg
  3414  045E  00F2               	movwf	DelayXms@x
  3415                           
  3416                           ;adc.c: 67: unsigned char i,j;
  3417                           ;adc.c: 68: for(i=x;i>0;i--)
  3418  045F  00F3               	movwf	DelayXms@i
  3419  0460                     l3246:	
  3420  0460  0873               	movf	DelayXms@i,w
  3421  0461  1903               	btfsc	3,2
  3422  0462  0008               	return
  3423                           
  3424                           ;adc.c: 69: for(j=153;j>0;j--);
  3425  0463  3099               	movlw	153
  3426  0464  00F4               	movwf	DelayXms@j
  3427  0465                     l3256:	
  3428  0465  0BF4               	decfsz	DelayXms@j,f
  3429  0466  2C65               	goto	l3256
  3430  0467  03F3               	decf	DelayXms@i,f
  3431  0468  2C60               	goto	l3246
  3432  0469                     __end_of_DelayXms:	
  3433                           
  3434                           	psect	text23
  3435  032D                     __ptext23:	
  3436 ;; *************** function ___lwdiv *****************
  3437 ;; Defined at:
  3438 ;;		line 6 in file "C:\¹¤¾ß\µ¥Æ¬»úÑ§Ï°×ÊÁÏ\SC8P\SCMCU_IDE_V2.00.07\data\sources\common\lwdiv.c"
  3439 ;; Parameters:    Size  Location     Type
  3440 ;;  divisor         2    2[COMMON] unsigned int 
  3441 ;;  dividend        2    4[COMMON] unsigned int 
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;  quotient        2    1[BANK0 ] unsigned int 
  3444 ;;  counter         1    0[BANK0 ] unsigned char 
  3445 ;; Return value:  Size  Location     Type
  3446 ;;                  2    2[COMMON] unsigned int 
  3447 ;; Registers used:
  3448 ;;		wreg, status,2, status,0
  3449 ;; Tracked objects:
  3450 ;;		On entry : 300/0
  3451 ;;		On exit  : 300/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMMON   BANK0   BANK1
  3454 ;;      Params:         4       0       0
  3455 ;;      Locals:         0       3       0
  3456 ;;      Temps:          0       0       0
  3457 ;;      Totals:         4       3       0
  3458 ;;Total ram usage:        7 bytes
  3459 ;; Hardware stack levels used:    1
  3460 ;; Hardware stack levels required when called:    1
  3461 ;; This function calls:
  3462 ;;		Nothing
  3463 ;; This function is called by:
  3464 ;;		_main
  3465 ;;		_refreshNub
  3466 ;;		_ADC_AVG
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           
  3471                           ;psect for function ___lwdiv
  3472  032D                     ___lwdiv:	
  3473                           
  3474                           ;incstack = 0
  3475                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3476  032D  01A1               	clrf	___lwdiv@quotient
  3477  032E  01A2               	clrf	___lwdiv@quotient+1
  3478  032F  0872               	movf	___lwdiv@divisor,w
  3479  0330  0473               	iorwf	___lwdiv@divisor+1,w
  3480  0331  1903               	btfsc	3,2
  3481  0332  2B52               	goto	l3898
  3482  0333  01A0               	clrf	___lwdiv@counter
  3483  0334                     L2:	
  3484  0334  0AA0               	incf	___lwdiv@counter,f
  3485  0335  1BF3               	btfsc	___lwdiv@divisor+1,7
  3486  0336  2B3B               	goto	l3886
  3487  0337  1003               	clrc
  3488  0338  0DF2               	rlf	___lwdiv@divisor,f
  3489  0339  0DF3               	rlf	___lwdiv@divisor+1,f
  3490  033A  2B34               	goto	L2
  3491  033B                     l3886:	
  3492  033B  1003               	clrc
  3493  033C  0DA1               	rlf	___lwdiv@quotient,f
  3494  033D  0DA2               	rlf	___lwdiv@quotient+1,f
  3495  033E  0873               	movf	___lwdiv@divisor+1,w
  3496  033F  0275               	subwf	___lwdiv@dividend+1,w
  3497  0340  1D03               	skipz
  3498  0341  2B44               	goto	u1795
  3499  0342  0872               	movf	___lwdiv@divisor,w
  3500  0343  0274               	subwf	___lwdiv@dividend,w
  3501  0344                     u1795:	
  3502  0344  1C03               	skipc
  3503  0345  2B4E               	goto	L3
  3504  0346  0872               	movf	___lwdiv@divisor,w
  3505  0347  02F4               	subwf	___lwdiv@dividend,f
  3506  0348  0873               	movf	___lwdiv@divisor+1,w
  3507  0349  1C03               	skipc
  3508  034A  03F5               	decf	___lwdiv@dividend+1,f
  3509  034B  02F5               	subwf	___lwdiv@dividend+1,f
  3510  034C  1421               	bsf	___lwdiv@quotient,0
  3511  034D  1003               	clrc
  3512  034E                     L3:	
  3513  034E  0CF3               	rrf	___lwdiv@divisor+1,f
  3514  034F  0CF2               	rrf	___lwdiv@divisor,f
  3515  0350  0BA0               	decfsz	___lwdiv@counter,f
  3516  0351  2B3B               	goto	l3886
  3517  0352                     l3898:	
  3518  0352  0822               	movf	___lwdiv@quotient+1,w
  3519  0353  00F3               	movwf	?___lwdiv+1
  3520  0354  0821               	movf	___lwdiv@quotient,w
  3521  0355  00F2               	movwf	?___lwdiv
  3522  0356  0008               	return
  3523  0357                     __end_of___lwdiv:	
  3524                           
  3525                           	psect	text24
  3526  02FA                     __ptext24:	
  3527 ;; *************** function _ADC_Sample *****************
  3528 ;; Defined at:
  3529 ;;		line 12 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\adc.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;  adch            1    wreg     unsigned char 
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;  adch            1    0[BANK0 ] unsigned char 
  3534 ;;  ad_temp         2    2[BANK0 ] volatile unsigned int 
  3535 ;;  admax           2    0        unsigned int 
  3536 ;;  admin           2    0        unsigned int 
  3537 ;;  adsum           2    0        unsigned int 
  3538 ;;  i               1    1[BANK0 ] unsigned char 
  3539 ;;  adtimes         1    0        unsigned char 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  2    2[COMMON] unsigned int 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0
  3544 ;; Tracked objects:
  3545 ;;		On entry : 300/0
  3546 ;;		On exit  : 300/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMMON   BANK0   BANK1
  3549 ;;      Params:         2       0       0
  3550 ;;      Locals:         0       4       0
  3551 ;;      Temps:          1       0       0
  3552 ;;      Totals:         3       4       0
  3553 ;;Total ram usage:        7 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    1
  3556 ;; This function calls:
  3557 ;;		Nothing
  3558 ;; This function is called by:
  3559 ;;		_ADC_AVG
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           
  3564                           ;psect for function _ADC_Sample
  3565  02FA                     _ADC_Sample:	
  3566                           
  3567                           ;incstack = 0
  3568                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3569                           ;ADC_Sample@adch stored from wreg
  3570  02FA  00A0               	movwf	ADC_Sample@adch
  3571                           
  3572                           ;adc.c: 17: volatile unsigned int ad_temp;
  3573                           ;adc.c: 18: ADCON1 = 0;
  3574  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  3575  02FC  019F               	clrf	31	;volatile
  3576                           
  3577                           ;adc.c: 19: ADCON0 = 0X41 | (adch << 2);
  3578  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  3579  02FE  0820               	movf	ADC_Sample@adch,w
  3580  02FF  00F4               	movwf	??_ADC_Sample
  3581  0300  3001               	movlw	1
  3582  0301  1003               	clrc
  3583  0302                     L4:	
  3584  0302  0DF4               	rlf	??_ADC_Sample,f
  3585  0303  3EFF               	addlw	-1
  3586  0304  1003               	clrc
  3587  0305  1D03               	skipz
  3588  0306  2B02               	goto	L4
  3589  0307  0D74               	rlf	??_ADC_Sample,w
  3590  0308  3841               	iorlw	65
  3591  0309  009F               	movwf	31	;volatile
  3592  030A  0000               	nop	;# 
  3593  030B  0000               	nop	;# 
  3594                           
  3595                           ;adc.c: 22: GODONE = 1;
  3596  030C  1283               	bcf	3,5	;RP0=0, select bank0
  3597  030D  1303               	bcf	3,6	;RP1=0, select bank0
  3598  030E  149F               	bsf	31,1	;volatile
  3599                           
  3600                           ;adc.c: 24: unsigned char i = 0;
  3601  030F  01A1               	clrf	ADC_Sample@i
  3602  0310                     l1198:	
  3603                           ;adc.c: 25: while(GODONE)
  3604                           
  3605  0310  1C9F               	btfss	31,1	;volatile
  3606  0311  2B15               	goto	l3868
  3607                           
  3608                           ;adc.c: 26: {
  3609                           ;adc.c: 27: if(0 == (--i))
  3610  0312  0BA1               	decfsz	ADC_Sample@i,f
  3611  0313  2B10               	goto	l1198
  3612  0314  0008               	return
  3613  0315                     l3868:	
  3614                           
  3615                           ;adc.c: 29: }
  3616                           ;adc.c: 31: ad_temp=(ADRESH<<4)+(ADRESL>>4);
  3617  0315  081E               	movf	30,w	;volatile
  3618  0316  00A2               	movwf	ADC_Sample@ad_temp	;volatile
  3619  0317  01A3               	clrf	ADC_Sample@ad_temp+1	;volatile
  3620  0318  0EA2               	swapf	ADC_Sample@ad_temp,f	;volatile
  3621  0319  0EA3               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3622  031A  30F0               	movlw	240
  3623  031B  05A3               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3624  031C  0822               	movf	ADC_Sample@ad_temp,w	;volatile
  3625  031D  390F               	andlw	15
  3626  031E  04A3               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3627  031F  30F0               	movlw	240
  3628  0320  05A2               	andwf	ADC_Sample@ad_temp,f	;volatile
  3629  0321  1683               	bsf	3,5	;RP0=1, select bank1
  3630  0322  0E1E               	swapf	30,w	;volatile
  3631  0323  390F               	andlw	15
  3632  0324  1283               	bcf	3,5	;RP0=0, select bank0
  3633  0325  07A2               	addwf	ADC_Sample@ad_temp,f	;volatile
  3634  0326  1803               	skipnc
  3635  0327  0AA3               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3636                           
  3637                           ;adc.c: 32: return ad_temp;
  3638  0328  0823               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3639  0329  00F3               	movwf	?_ADC_Sample+1
  3640  032A  0822               	movf	ADC_Sample@ad_temp,w	;volatile
  3641  032B  00F2               	movwf	?_ADC_Sample
  3642  032C  0008               	return
  3643  032D                     __end_of_ADC_Sample:	
  3644                           
  3645                           	psect	text25
  3646  03A0                     __ptext25:	
  3647 ;; *************** function _Timer0_Isr *****************
  3648 ;; Defined at:
  3649 ;;		line 36 in file "C:\mcuproject\scm\Ó«¹â¼Á¼ì²â\main.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;		None
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;		None
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  1    wreg      void 
  3656 ;; Registers used:
  3657 ;;		wreg, status,2, status,0
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMMON   BANK0   BANK1
  3663 ;;      Params:         0       0       0
  3664 ;;      Locals:         0       0       0
  3665 ;;      Temps:          2       0       0
  3666 ;;      Totals:         2       0       0
  3667 ;;Total ram usage:        2 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; This function calls:
  3670 ;;		Nothing
  3671 ;; This function is called by:
  3672 ;;		Interrupt level 1
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           
  3677                           ;psect for function _Timer0_Isr
  3678  03A0                     _Timer0_Isr:	
  3679                           
  3680                           ;main.c: 37: if (T0IF)
  3681  03A0  1D0B               	btfss	11,2	;volatile
  3682  03A1  2BB8               	goto	i1l3452
  3683                           
  3684                           ;main.c: 38: {
  3685                           ;main.c: 41: TMR0 = 150;
  3686  03A2  3096               	movlw	150
  3687  03A3  1283               	bcf	3,5	;RP0=0, select bank0
  3688  03A4  1303               	bcf	3,6	;RP1=0, select bank0
  3689  03A5  0081               	movwf	1	;volatile
  3690                           
  3691                           ;main.c: 43: if(++intCount >= 100)
  3692  03A6  3064               	movlw	100
  3693  03A7  0ABC               	incf	_intCount,f
  3694  03A8  023C               	subwf	_intCount,w
  3695  03A9  1C03               	skipc
  3696  03AA  2BB7               	goto	i1l3450
  3697  03AB  3064               	movlw	100
  3698                           
  3699                           ;main.c: 44: {
  3700                           ;main.c: 45: intFlag = 1;
  3701  03AC  01BB               	clrf	_intFlag
  3702  03AD  0ABB               	incf	_intFlag,f
  3703                           
  3704                           ;main.c: 46: if(++count500ms >= 100)
  3705  03AE  0AB8               	incf	_count500ms,f
  3706  03AF  0238               	subwf	_count500ms,w
  3707  03B0  1C03               	skipc
  3708  03B1  2BB7               	goto	i1l3450
  3709                           
  3710                           ;main.c: 49: timeCount++;
  3711  03B2  01B8               	clrf	_count500ms
  3712                           
  3713                           ;main.c: 50: if(nubShowTime > 0)
  3714  03B3  087B               	movf	_nubShowTime,w
  3715  03B4  1903               	btfsc	3,2
  3716  03B5  2BB7               	goto	i1l3450
  3717                           
  3718                           ;main.c: 51: {
  3719                           ;main.c: 52: --nubShowTime;
  3720  03B6  03FB               	decf	_nubShowTime,f
  3721  03B7                     i1l3450:	
  3722                           
  3723                           ;main.c: 53: }
  3724                           ;main.c: 54: }
  3725                           ;main.c: 55: }
  3726                           ;main.c: 57: T0IF = 0;
  3727  03B7  110B               	bcf	11,2	;volatile
  3728  03B8                     i1l3452:	
  3729                           
  3730                           ;main.c: 58: }
  3731                           ;main.c: 60: if (RBIF) {
  3732  03B8  180B               	btfsc	11,0	;volatile
  3733                           
  3734                           ;main.c: 61: RBIF = 0;
  3735  03B9  100B               	bcf	11,0	;volatile
  3736  03BA  0871               	movf	??_Timer0_Isr+1,w
  3737  03BB  008A               	movwf	10
  3738  03BC  0E70               	swapf	??_Timer0_Isr^(0+-128),w
  3739  03BD  0083               	movwf	3
  3740  03BE  0EFE               	swapf	126,f
  3741  03BF  0E7E               	swapf	126,w
  3742  03C0  0009               	retfie
  3743  03C1                     __end_of_Timer0_Isr:	
  3744  007E                     btemp	set	126	;btemp
  3745  007E                     wtemp0	set	126
  3746                           
  3747                           	psect	intentry
  3748  0004                     __pintentry:	
  3749                           ;incstack = 0
  3750                           ; Regs used in _Timer0_Isr: [wreg+status,2+status,0]
  3751                           
  3752  0004                     interrupt_function:	
  3753  007E                     saved_w	set	btemp
  3754  0004  00FE               	movwf	btemp
  3755  0005  0E03               	swapf	3,w
  3756  0006  00F0               	movwf	??_Timer0_Isr
  3757  0007  080A               	movf	10,w
  3758  0008  00F1               	movwf	??_Timer0_Isr+1
  3759  0009  2BA0               	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        11
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     19      39
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___wmul
    _keyCtr->_keyRead
    _refreshNub->_low1
    _refreshNub->_low2
    _refreshNub->_low3
    _refreshNub->_low4
    _low4->_delayms
    _low3->_delayms
    _low2->_delayms
    _low1->_delayms
    _setLow->_setHightOutput
    _setLow->_setlowOutput
    _ZHONG->_showNub
    _WU->_showNub
    _RUO->_showNub
    _QIANG->_showNub
    _showNub->_delayms

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_ADC_AVG
    _ADC_AVG->_ADC_Sample
    _refreshNub->_low1
    _refreshNub->_low4

Critical Paths under _Timer0_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer0_Isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   19687
                                             11 BANK0      8     8      0
                            _ADC_AVG
                            ___lwdiv
                             ___wmul
                         _initConfig
                             _keyCtr
                         _refreshNub
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               0     0      0      44
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      44
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     198
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _ADC_AVG                                              7     4      3    9820
                                              4 BANK0      7     4      3
                         _ADC_Sample
                            ___lwdiv
                         _refreshNub
 ---------------------------------------------------------------------------------
 (1) _refreshNub                                           0     0      0    8713
                           _DelayXms
                              _QIANG
                                _RUO
                                 _WU
                              _ZHONG
                               _low1
                               _low2
                               _low3
                               _low4
                           _setInput
 ---------------------------------------------------------------------------------
 (2) _low4                                                 6     2      4     731
                                              4 COMMON     4     0      4
                                              0 BANK0      2     2      0
                            _delayms
                     _setHightOutput
                             _setLow
                          _setOutput
                       _setlowOutput
 ---------------------------------------------------------------------------------
 (2) _low3                                                 5     2      3     635
                                              4 COMMON     4     1      3
                                              0 BANK0      1     1      0
                            _delayms
                     _setHightOutput
                             _setLow
                          _setOutput
                       _setlowOutput
 ---------------------------------------------------------------------------------
 (2) _low2                                                 5     2      3     635
                                              4 COMMON     4     1      3
                                              0 BANK0      1     1      0
                            _delayms
                     _setHightOutput
                             _setLow
                          _setOutput
                       _setlowOutput
 ---------------------------------------------------------------------------------
 (2) _low1                                                 6     2      4     638
                                              4 COMMON     4     0      4
                                              0 BANK0      2     2      0
                            _delayms
                     _setHightOutput
                             _setLow
                          _setOutput
                       _setlowOutput
 ---------------------------------------------------------------------------------
 (3) _setLow                                               0     0      0      62
                     _setHightOutput
                       _setlowOutput
 ---------------------------------------------------------------------------------
 (2) _ZHONG                                                0     0      0    1490
                            _showNub
 ---------------------------------------------------------------------------------
 (2) _WU                                                   0     0      0    1490
                           _setInput
                            _showNub
 ---------------------------------------------------------------------------------
 (2) _RUO                                                  0     0      0    1490
                            _showNub
 ---------------------------------------------------------------------------------
 (2) _QIANG                                                0     0      0    1490
                            _showNub
 ---------------------------------------------------------------------------------
 (3) _showNub                                              2     1      1    1490
                                              4 COMMON     2     1      1
                            _delayms
                     _setHightOutput
                           _setInput
                          _setOutput
                       _setlowOutput
 ---------------------------------------------------------------------------------
 (3) _setlowOutput                                         1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _setOutput                                            1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setInput                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _setHightOutput                                       1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _delayms                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _DelayXms                                             3     3      0     114
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     705
                                              2 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          14    12      2     105
                                              2 COMMON     3     1      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Timer0_Isr                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_AVG
     _ADC_Sample
     ___lwdiv
     _refreshNub
       _DelayXms
       _QIANG
         _showNub
           _delayms
           _setHightOutput
           _setInput
           _setOutput
           _setlowOutput
       _RUO
         _showNub
           _delayms
           _setHightOutput
           _setInput
           _setOutput
           _setlowOutput
       _WU
         _setInput
         _showNub
           _delayms
           _setHightOutput
           _setInput
           _setOutput
           _setlowOutput
       _ZHONG
         _showNub
           _delayms
           _setHightOutput
           _setInput
           _setOutput
           _setlowOutput
       _low1
         _delayms
         _setHightOutput
         _setLow
           _setHightOutput
           _setlowOutput
         _setOutput
         _setlowOutput
       _low2
         _delayms
         _setHightOutput
         _setLow
           _setHightOutput
           _setlowOutput
         _setOutput
         _setlowOutput
       _low3
         _delayms
         _setHightOutput
         _setLow
           _setHightOutput
           _setlowOutput
         _setOutput
         _setlowOutput
       _low4
         _delayms
         _setHightOutput
         _setLow
           _setHightOutput
           _setlowOutput
         _setOutput
         _setlowOutput
       _setInput
   ___lwdiv
   ___wmul
   _initConfig
   _keyCtr
     _keyRead
   _refreshNub
     _DelayXms
     _QIANG
       _showNub
         _delayms
         _setHightOutput
         _setInput
         _setOutput
         _setlowOutput
     _RUO
       _showNub
         _delayms
         _setHightOutput
         _setInput
         _setOutput
         _setlowOutput
     _WU
       _setInput
       _showNub
         _delayms
         _setHightOutput
         _setInput
         _setOutput
         _setlowOutput
     _ZHONG
       _showNub
         _delayms
         _setHightOutput
         _setInput
         _setOutput
         _setlowOutput
     _low1
       _delayms
       _setHightOutput
       _setLow
         _setHightOutput
         _setlowOutput
       _setOutput
       _setlowOutput
     _low2
       _delayms
       _setHightOutput
       _setLow
         _setHightOutput
         _setlowOutput
       _setOutput
       _setlowOutput
     _low3
       _delayms
       _setHightOutput
       _setLow
         _setHightOutput
         _setlowOutput
       _setOutput
       _setlowOutput
     _low4
       _delayms
       _setHightOutput
       _setLow
         _setHightOutput
         _setlowOutput
       _setOutput
       _setlowOutput
     _setInput

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     13      27       5       48.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      33       8        0.0%
ABS                  0      0      33       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Aug 25 18:28:37 2020

                      pc 0002     setHightOutput@outPut 0072                       PL2 02F2  
                     PL4 00F2                       PL6 0154                       PL8 00F8  
                     _WU 0471                       fsr 0004      ___wmul@multiplicand 0074  
                    PL10 0378                      PL12 01F6                      ?_WU 0070  
                    l615 015B                      l626 0416                      _RUO 047E  
    __size_of_ADC_Sample 0033          __end_of_ADC_AVG 03A0                      fsr0 0004  
                    indf 0000                     S4042 0476                     S4044 043A  
                   S4046 0446                     S4048 0452                     ??_WU 0076  
                   ?_RUO 0070                     l2000 0244                     l2001 0248  
                   l2010 026C                     l2002 024C                     l2003 0250  
                   l2004 0254                     l2005 0258                     l2006 025C  
                   l2007 0260                     l2008 0264                     l2009 0268  
                   l3022 03F6                     l1198 0310                     l3420 03DF  
                   l3246 0460                     l3318 0433                     l3256 0465  
                   l3424 03E7                     l3606 0270                     l3616 02B1  
                   l3720 012F                     l3712 0117                     l3800 01E6  
                   l1970 0295                     l3626 022F                     l1971 0299  
                   l3636 046B                     l1972 029D                     l1964 0281  
                   l3732 0152                     l3724 013D                     l3716 011F  
                   l3708 010F                     l3804 01ED                     l1973 02A1  
                   l1981 01FE                     l1974 02A5                     l1966 0285  
                   l1990 021E                     l3830 00A8                     l3910 0382  
                   l1975 02A9                     l1967 0289                     l1991 0222  
                   l1983 0202                     l1976 02AD                     l1968 028D  
                   l1992 0226                     l1984 0206                     l3680 02CE  
                   l3728 014B                     l3760 0082                     l3752 0064  
                   l3744 0048                     l3808 01F4                     l3840 00DB  
                   l3912 0393                     l1969 0291                     l1993 022A  
                   l1985 020A                     l1986 020E                     l3842 00DD  
                   l3850 00E3                     l3826 009D                     l1987 0212  
                   l1988 0216                     l3692 02E9                     l3684 02D8  
                   l3764 0090                     l3756 0074                     l3748 0056  
                   l3780 01BE                     l3844 00DF                     l3852 00F0  
                   l1989 021A                     l1998 0240                     l3846 00E1  
                   l3696 02F0                     l3688 02E2                     l3768 0097  
                   l3792 01D6                     l3784 01C4                     l3960 01AB  
                   l3946 0183                     l3868 0315                     l3796 01DE  
                   l3788 01CA                     l3886 033B                     l3898 0352  
                   _T0IF 005A                     _IOCB 0096                     u1515 003D  
                   u1445 0124                     u1615 0085                     u1535 004B  
                   u1465 0132                     u1555 0059                     u1485 0140  
                   u1575 0069                     u1595 0077                     u1835 0192  
                   u1795 0344                     _RBIF 0058                     _TMR0 0001  
                   _WPUA 018E                     _WPUB 0095                     _WPUC 018F  
                   _WPUE 011A                     _main 015A                     _low1 02C0  
                   _low2 00FD                     _low3 0030                     _low4 01AE  
                   btemp 007E           _setHightOutput 027F                     start 000A  
                  ??_RUO 0076                    ?_main 0070                    ?_low1 0074  
                  ?_low2 0074                    ?_low3 0074                    ?_low4 0074  
                  _ANSEL 0188                    _COMEN 0197          __end_of___lwdiv 0357  
                  _QIANG 0482                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _PORTE 0009                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _ZHONG 047A  
        __end_of_delayms 0471          __end_of_keyRead 043A                    main@i 0031  
                  pclath 000A          __end_of_showNub 042B   __end_of_setHightOutput 02C0  
                  status 0003                    wtemp0 007E         __end_of_DelayXms 0469  
        __initialization 000B             __end_of_main 01AE             __end_of_low1 02F2  
           __end_of_low2 0154             __end_of_low3 0099             __end_of_low4 01F6  
              ??_ADC_AVG 0078                   ??_main 0078                   ??_low1 0020  
                 ??_low2 0077                   ??_low3 0077                   ??_low4 0020  
                 ?_QIANG 0070                   ?_ZHONG 0070                   _ADCON0 001F  
                 _ADCON1 009F                   _ADRESH 001E                   _ADRESL 009E  
                 _ANSELH 0189                   _GODONE 00F9                   i1l3450 03B7  
                 i1l3452 03B8                   _INTCON 000B                   _OSCCON 008F  
        ?_setHightOutput 0070             ??_ADC_Sample 0074               _Timer0_Isr 03A0  
                 ___wmul 03DD                ??___lwdiv 0076                   _keyCtr 040A  
                 _keyNub 0036                   _setLow 03C1                ??_delayms 0072  
                 main@av 002B                   low1@h3 0077                   low2@h4 0076  
                 low3@h5 0076                   low4@h6 0076                   low1@ge 0075  
                 low1@dp 0076                   low2@ge 0075                   low3@ge 0075  
                 low4@ge 0075         __end_of_setInput 040A                ??_keyRead 0072  
           __pdataCOMMON 007B       __end_of_ADC_Sample 032D                   saved_w 007E  
              ??_showNub 0075  __end_of__initialization 002E            __end_of_QIANG 0486  
           ADC_AVG@adsum 0028            __end_of_ZHONG 047E           __pcstackCOMMON 0070  
           __pidataBANK0 0000               __end_ofPL2 02FA               __end_ofPL4 00F8  
             __end_ofPL6 015A               __end_ofPL8 00FD               __end_of_WU 0476  
                ??_QIANG 0076                  ??_ZHONG 0076                ?_DelayXms 0070  
             __pbssBANK0 0033              ?_Timer0_Isr 0070               __pmaintext 015A  
                ?___wmul 0072               __pintentry 0004                  ?_keyCtr 0070  
                _ADC_AVG 037E       __size_of_setOutput 0041                  ?_setLow 0070  
             ??_DelayXms 0072               _count500ms 0038                ?_setInput 0070  
             _initConfig 0357          __size_of___wmul 0019                  ___lwdiv 032D  
        __size_of_keyCtr 0011                  _delayms 0469          __size_of_setLow 001C  
                __ptext1 040A                  __ptext2 042B                  __ptext3 0357  
                __ptext4 03DD                  __ptext5 037E                  __ptext6 0099  
                __ptext7 01AE                  __ptext8 0030                  __ptext9 00FD  
                _keyRead 042B                  _intFlag 003B             __size_of_RUO 0004  
                _nubStep 003A                  _showNub 041B         ??_setHightOutput 0072  
    __size_of_Timer0_Isr 0021                  main@res 002D                  low1@bai 0021  
   end_of_initialization 002E                  low2@bai 0020                  low3@bai 0020  
                low4@bai 0021                  low1@shi 0074                  low2@shi 0074  
                low3@shi 0074                  low4@shi 0074               _refreshNub 0099  
              DelayXms@i 0073                DelayXms@j 0074                DelayXms@x 0072  
      __end_of_setOutput 027F               ??_setInput 0072            ?_setlowOutput 0070  
        setOutput@outPut 0072            ADC_AVG@adtime 0024           ??_setlowOutput 0072  
            ?_initConfig 0070           __end_of___wmul 03F6            __pidataCOMMON 0000  
         __end_of_keyCtr 041B           __end_of_setLow 03DD              __end_ofPL10 037E  
            __end_ofPL12 01FC      start_initialization 000B              __end_of_RUO 0482  
      __size_of_DelayXms 000B                 ADC_AVG@i 002A              ?_refreshNub 0070  
           ??_Timer0_Isr 0070                 ??___wmul 0076        ADC_Sample@ad_temp 0022  
            __pdataBANK0 003D                 ??_keyCtr 0073                 ?_ADC_AVG 0024  
               ??_setLow 0073         keyRead@KeyStatus 0072              __pbssCOMMON 0078  
            ADC_AVG@adch 0027                ___latbits 0000            __pcstackBANK0 0020  
    __size_of_initConfig 0021       __end_of_Timer0_Isr 03C1         ___lwdiv@dividend 0074  
      __size_of_setInput 0014                 ?___lwdiv 0072                 ?_delayms 0070  
    __size_of_refreshNub 0059       setlowOutput@outPut 0072                __pswtext1 0476  
              __pswtext2 043A                __pswtext3 0446                __pswtext4 0452  
               ?_keyRead 0070           __size_of_QIANG 0004           __size_of_ZHONG 0004  
         ADC_Sample@adch 0020                 ?_showNub 0074     __end_of_setlowOutput 023E  
       ___lwdiv@quotient 0021              __size_of_WU 0005              ADC_Sample@i 0021  
      interrupt_function 0004           ___wmul@product 0076                _setOutput 023E  
             showNub@low 0074         __size_of_ADC_AVG 0022        ___wmul@multiplier 0072  
               _DelayXms 045E            _tempbaiweiNum 007A             _refreshCount 0039  
             _ADC_Sample 02FA               ?_setOutput 0070             ??_initConfig 0072  
       __size_of___lwdiv 002A         __size_of_delayms 0008         __size_of_keyRead 000F  
               _adresult 0033          ___lwdiv@divisor 0072          ___lwdiv@counter 0020  
               __ptext10 02C0                 __ptext11 03C1                 __ptext20 027F  
               __ptext12 047A                 __ptext21 0469                 __ptext13 0471  
               __ptext22 045E                 __ptext14 047E                 __ptext23 032D  
               __ptext15 0482                 __ptext24 02FA                 __ptext16 041B  
               __ptext25 03A0                 __ptext17 01FC                 __ptext18 023E  
               __ptext19 03F6         __size_of_showNub 0010       __end_of_initConfig 0378  
               _keyClick 0037             ??_refreshNub 0078                 _keyCount 0035  
               _intCount 003C            __size_of_main 0054            __size_of_low1 0032  
          __size_of_low2 0057            __size_of_low3 0069            __size_of_low4 0048  
__size_of_setHightOutput 0041                 delayms@i 0073                 _setInput 03F6  
               _numArray 003D            _tempshiweiNum 0079                 main@res2 002F  
               low4@h123 0077              _nubShowTime 007B       __end_of_refreshNub 00F2  
  __size_of_setlowOutput 0042              delayms@time 0072             _tempgeweiNum 0078  
               intlevel1 0000              ?_ADC_Sample 0072              ??_setOutput 0072  
           _setlowOutput 01FC               _OPTION_REG 0081             showNub@hight 0075  
