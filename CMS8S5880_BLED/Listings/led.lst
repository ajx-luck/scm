C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 19:20:21 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE LED
OBJECT MODULE PLACED IN .\Objects\led.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE led.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\led.lst)
                    - TABS(2) OBJECT(.\Objects\led.obj)

line level    source

   1          /**
   2            *
   3            *
   4            *左Led灯呼吸
   5            */
   6          #include <CMS/CMS8S5880.H>
   7          #include "time.h"
*** WARNING C318 IN LINE 7 OF led.c: can't open file 'time.h'
   8          
   9          //***********define constant*********//
  10          
  11          #define   MAIN_CLOCK_FREQ   16000000uL    //unit:Hz
  12          #define   TM0_OF_us     1000      //timer0 overflow times unit:us
  13          #define   divider       4
  14          #define   TM_value      (65535-(TM0_OF_us*(MAIN_CLOCK_FREQ/(4*1000000))))
  15          
  16          #define G1 P2_5
  17          #define B1 P2_4
  18          #define R1 P2_3
  19          #define G2 P2_2
  20          #define B2 P1_7
  21          #define R2 P1_6
  22          #define G3 P1_5
  23          #define B3 P1_4
  24          #define R3 P1_3
  25          
  26          #define SCL P0_5
  27          #define SDA P0_4
  28          
  29          #define MAX_TIME (29127)
  30          #define MIN_TIME (0)
  31          #define SPEEDS (80)         
  32          
  33          #define speed 60
  34          
  35          //*******************variable*********************//
  36          
  37          static unsigned char vlee=0;
  38          
  39          unsigned int times = 0;
  40          
  41          volatile unsigned int temp = 0X00;
  42          
  43          unsigned int km = 0;
  44           static unsigned int num=0;
  45          
  46          /*-------这样定义OK 之后,你在程序中就可以使用,比如Flg_RFSleep=0;-----*/
  47          union
  48            {
  49              unsigned char Flg;
  50              struct
  51                {unsigned char          Flg_key:1;
  52                              unsigned char          Flg_RxChanle:1;
  53                               unsigned char         Flg_RxTimeCoutEn:1;
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 19:20:21 PAGE 2   

  54                                unsigned char        Flg_DcIn:1;
  55                                unsigned char        Flg_RFSleep:1;
  56                                unsigned char        Flg_Wor:1;
  57                                 unsigned char       Flg_Pre:1;
  58                                 unsigned char       Flg_Sync:1;
  59                }sflg;
  60            }uFlg;
  61            
  62            
  63          /*--------------------------------------------------------------------*/
  64          
  65          //*******************initial*********************//
  66          
  67          void Timer0_init();               //
  68          void INT_init();                //interrupt initial
  69          void Timer0_INT();
  70            //toggle watch IO
  71            
  72            
  73          void GPIO_Init(void)
  74          {
  75   1        P2TRIS |= 0X3C;    /*output*/
  76   1        P2UP = 0x3C;
  77   1        P2RD = 0x00;
  78   1        
  79   1        P1TRIS |= 0XF8;    /*output*/
  80   1        P1UP  = 0XF8;    /* */
  81   1        P1RD  = 0X00;    /*output speed up to 2mhz */
  82   1        
  83   1        P2TRIS &= 0XBF;
  84   1        P2UP |= 0X40;    /*???????*/
  85   1        P2RD &= 0XBF;    /*PD6  KEY ????  */
  86   1        
  87   1        P0TRIS |= 0X30;
  88   1        P0UP  = 0X30;
  89   1        P0RD  = 0X00;     /*PB5    */
  90   1        P05CFG = 0;
  91   1        R1 = R2 = R3 = G1 = G2 = G3 = B1 = B2 = B3 = 1;
  92   1        
  93   1        SCL=1;
  94   1        SDA = 1;
  95   1       uFlg.sflg.Flg_key = 0;
  96   1      }
  97          
  98          #pragma OT(0)  
  99          void delay_us(unsigned int a)
 100          {
 101   1               //16M 1.02us
 102   1               while(a--);
 103   1      }
 104          
 105          #pragma OT(0) 
 106          void delay_ms(unsigned int ms) //16MHZ
 107          { 
 108   1         unsigned int ti; 
 109   1        clrwdt();
 110   1         while(ms--) 
 111   1          { 
 112   2            for(ti=0;ti<947;ti++){}  //
 113   2           } 
 114   1      }
 115          
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 19:20:21 PAGE 3   

 116          void Delay(unsigned int nCount)
 117          {
 118   1        for(; nCount != 0; nCount--);
 119   1      } 
 120          /*------------------------------------------------------------------*/
 121          void KEY_Scan(void)
 122          {
 123   1        if(P2_6 == 0)
 124   1        {
 125   2        
 126   2          num++;
 127   2          if((P2_6 == 0) &&(num >= 300))   //3s
 128   2          {       
 129   3                     
 130   3                num = 0; 
 131   3                uFlg.sflg.Flg_key = 1; 
 132   3               // SCL = ~SCL; 
 133   3      
 134   3          }
 135   2          else
 136   2          {
 137   3            num = 0;
 138   3          }
 139   2          
 140   2        }
 141   1        else
 142   1        {
 143   2           num = 0;
 144   2        }
 145   1      }
 146          
 147          /*       ????      */
 148          void disp(void)
 149          {
 150   1         SCL = 0;
 151   1         R3 = R2 = G1 = 0;                    delay_ms(speed);  
 152   1         R1 = R2 = 1;G1 = G2 = R3= 0;         delay_ms(speed); 
 153   1         R1 = R2 = R3 = 1;  G1 = G2 = G3 = 0; delay_ms(speed);  
 154   1         G1 = 1; G2 = B1 = G3 = 0;            delay_ms(speed); 
 155   1         G1 = G2 = 1; B1 = B2 = G3 = 0 ;      delay_ms(speed);  
 156   1         G1 = G2 = G3 = 1; B1 = B2 = B3 = 0;  delay_ms(speed);  
 157   1         B1 = 1; R1 = B2 = B3 = 0;            delay_ms(speed);  
 158   1         B1 = B2 = 1; R1 = R2 = B3 = 0;       delay_ms(speed);  
 159   1         B1 = B2 = B3 = 1; R1 = B2 = R3 = 0; 
 160   1        delay_ms(speed); 
 161   1        SCL = 1;
 162   1        delay_ms(1);
 163   1      }
 164          /*----------------------R??----------------------------------------------*/
 165          void LED_LOOP_R(unsigned int on, unsigned int off)    //LED????
 166          {
 167   1        int totalTime = on + off;
 168   1        int Z = (on + off) /400;
 169   1        int h;
 170   1        for(h=1;h<Z;h++)
 171   1        {
 172   2            R3 = R2 = R1 = 0; 
 173   2            Delay(on/400);
 174   2            R3 = R2 = R1 = 1; 
 175   2            Delay(off/400);
 176   2        }
 177   1        
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 19:20:21 PAGE 4   

 178   1      }
 179          /*-------------LED????------------------------------------*/
 180          void LED_BREATH_R(void)
 181          {
 182   1          /*??*/
 183   1        times = MAX_TIME;
 184   1        while(1)
 185   1        {
 186   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 187   2          times -= SPEEDS;
 188   2          LED_LOOP_R(MAX_TIME-times,times);
 189   2          if(times < SPEEDS)
 190   2            break;
 191   2        }
 192   1         /*??*/
 193   1        times = MAX_TIME;
 194   1        while(1)
 195   1        {
 196   2           if(uFlg.sflg.Flg_key== 1) {  break;  }
 197   2          times -= SPEEDS;
 198   2          LED_LOOP_R(times,MAX_TIME-times);
 199   2          if(times < SPEEDS)
 200   2            break;
 201   2        }
 202   1        
 203   1      }
 204          /*------------------------------------------------------------*/
 205          
 206          /*----------------------G??----------------------------------------------*/
 207          void LED_LOOP_G(unsigned int on, unsigned int off)    //LED????
 208          {
 209   1        int totalTime = on + off;
 210   1        int Z = (on + off) /400;
 211   1        int h;
 212   1        for(h=1;h<Z;h++)
 213   1        {
 214   2            G3 = G2 = G1 = 0; 
 215   2            Delay(on/400);
 216   2            G3 = G2 = G1 = 1;  
 217   2            Delay(off/400);
 218   2        }
 219   1       
 220   1      }
 221          /*-------------LED????------------------------------------*/
 222          void LED_BREATH_G(void)
 223          {
 224   1          /*??*/
 225   1        times = MAX_TIME;
 226   1        while(1)
 227   1        {
 228   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 229   2          times -= SPEEDS;
 230   2          LED_LOOP_G(MAX_TIME-times,times);
 231   2          if(times < SPEEDS)
 232   2            break;
 233   2        }
 234   1        
 235   1         /*??*/
 236   1        times = MAX_TIME;
 237   1        while(1)
 238   1        {
 239   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 19:20:21 PAGE 5   

 240   2          times -= SPEEDS;
 241   2          LED_LOOP_G(times,MAX_TIME-times);
 242   2          if(times < SPEEDS)
 243   2            break;
 244   2        }
 245   1        
 246   1      }
 247          /*------------------------------------------------------------*/
 248          /*----------------------B??----------------------------------------------*/
 249          void LED_LOOP_B(unsigned int on, unsigned int off)    //LED????
 250          {
 251   1       
 252   1        int totalTime = on + off;
 253   1        int Z = (on + off) /400;
 254   1        int h;
 255   1        for(h=1;h<Z;h++)
 256   1        {
 257   2            B3 = B2 = B1 = 0;  
 258   2            Delay(on/400);
 259   2            B3 = B2 = B1 = 1;  
 260   2            Delay(off/400);
 261   2        }
 262   1       
 263   1      }
 264          /*-------------LED????------------------------------------*/
 265          void LED_BREATH_B(void)
 266          {
 267   1          /*??*/
 268   1        times = MAX_TIME;
 269   1        while(1)
 270   1        {
 271   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 272   2          times -= SPEEDS;
 273   2          LED_LOOP_B(MAX_TIME-times,times);
 274   2          if(times < SPEEDS)
 275   2            break;
 276   2        }
 277   1        
 278   1         /*??*/
 279   1        times = MAX_TIME;
 280   1        while(1)
 281   1        {
 282   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 283   2          times -= SPEEDS;
 284   2          LED_LOOP_B(times,MAX_TIME-times);
 285   2          if(times < SPEEDS)
 286   2            break;
 287   2        }
 288   1        
 289   1      }
 290          /*----------------------RG??----------------------------------------------*/
 291          void LED_LOOP_RG(unsigned int on, unsigned int off)    //LED????
 292          {
 293   1       
 294   1        int totalTime = on + off;
 295   1        int Z = (on + off) /400;
 296   1        int h;
 297   1        for(h=1;h<Z;h++)
 298   1        {
 299   2            G3 = G2 = G1 = R3 = R2 = R1 = 0;
 300   2            Delay(on/400);
 301   2            G3 = G2 = G1 = R3 = R2 = R1 = 1;  
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 19:20:21 PAGE 6   

 302   2            Delay(off/400);
 303   2        }
 304   1         
 305   1      }
 306          /*-------------LED????------------------------------------*/
 307          void LED_BREATH_RG(void)
 308          {
 309   1          /*??*/
 310   1        times = MAX_TIME;
 311   1        while(1)
 312   1        {
 313   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 314   2          times -= SPEEDS;
 315   2          LED_LOOP_RG(MAX_TIME-times,times);
 316   2          if(times < SPEEDS)
 317   2            break;
 318   2        }
 319   1        
 320   1         /*??*/
 321   1        times = MAX_TIME;
 322   1        while(1)
 323   1        {
 324   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 325   2          times -= SPEEDS;
 326   2          LED_LOOP_RG(times,MAX_TIME-times);
 327   2          if(times < SPEEDS)
 328   2            break;
 329   2        }
 330   1        
 331   1      }
 332          /*------------------------------------------------------------*/
 333          /*----------------------GB??----------------------------------------------*/
 334          void LED_LOOP_GB(unsigned int on, unsigned int off)    //LED????
 335          {
 336   1        
 337   1        int totalTime = on + off;
 338   1        int Z = (on + off) /400;
 339   1        int h;
 340   1        for(h=1;h<Z;h++)
 341   1        {
 342   2             G3 = G2 = G1 = B3 = B2 = B1 = 0;
 343   2            Delay(on/400);
 344   2            G3 = G2 = G1 = B3 = B2 = B1 = 1;  
 345   2            Delay(off/400);
 346   2        }
 347   1        
 348   1      }
 349          /*-------------LED????------------------------------------*/
 350          void LED_BREATH_GB(void)
 351          {
 352   1          /*??*/
 353   1        times = MAX_TIME;
 354   1        while(1)
 355   1        {
 356   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 357   2          times -= SPEEDS;
 358   2          LED_LOOP_GB(MAX_TIME-times,times);
 359   2          if(times < SPEEDS)
 360   2            break;
 361   2        }
 362   1        
 363   1         /*??*/
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 19:20:21 PAGE 7   

 364   1        times = MAX_TIME;
 365   1        while(1)
 366   1        {
 367   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 368   2          times -= SPEEDS;
 369   2          LED_LOOP_GB(times,MAX_TIME-times);
 370   2          if(times < SPEEDS)
 371   2            break;
 372   2        }
 373   1        
 374   1      }
 375          /*------------------------------------------------------------*/
 376          /*----------------------RGB??----------------------------------------------*/
 377          void LED_LOOP_RGB(unsigned int on, unsigned int off)    //LED????
 378          {
 379   1       
 380   1        int totalTime = on + off;
 381   1        int Z = (on + off) /400;
 382   1        int h;
 383   1        for(h=1;h<Z;h++)
 384   1        {
 385   2            R1 = R2 = R3 = G3 = G2 = G1 = B3 = B2 = B1 = 0; 
 386   2            Delay(on/400);
 387   2            R1 = R2 = R3 = G3 = G2 = G1 = B3 = B2 = B1 = 1;   
 388   2            Delay(off/400);
 389   2        }
 390   1        
 391   1      }
 392          /*-------------LED????------------------------------------*/
 393          void LED_BREATH_RGB(void)
 394          {
 395   1          /*??*/
 396   1        times = MAX_TIME;
 397   1        while(1)
 398   1        {
 399   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 400   2          times -= SPEEDS;
 401   2          LED_LOOP_RGB(MAX_TIME-times,times);
 402   2          if(times < SPEEDS)
 403   2            break;
 404   2        }
 405   1        
 406   1         /*??*/
 407   1        times = MAX_TIME;
 408   1        while(1)
 409   1        {
 410   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 411   2          times -= SPEEDS;
 412   2          LED_LOOP_RGB(times,MAX_TIME-times);
 413   2          if(times < SPEEDS)
 414   2            break;
 415   2        }
 416   1        
 417   1      }
 418          /*------------------------------------------------------------*/
 419          /*----------------------RGB??----------------------------------------------*/
 420          void LED_LOOP_RB(unsigned int on, unsigned int off)    //LED????
 421          {
 422   1       
 423   1        int totalTime = on + off;
 424   1        int Z = (on + off) /400;
 425   1        int h;
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 19:20:21 PAGE 8   

 426   1        for(h=1;h<Z;h++)
 427   1        {
 428   2            R1 = R2 = R3 = B3 = B2 = B1 = 0;
 429   2            Delay(on/400);
 430   2            R1 = R2 = R3 = B3 = B2 = B1 = 1; 
 431   2            Delay(off/400);
 432   2        }
 433   1        
 434   1      }
 435          /*-------------LED????------------------------------------*/
 436          void LED_BREATH_RB(void)
 437          {
 438   1          /*??*/
 439   1        times = MAX_TIME;
 440   1        while(1)
 441   1        {
 442   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 443   2          times -= SPEEDS;
 444   2          LED_LOOP_RB(MAX_TIME-times,times);
 445   2          if(times < SPEEDS)
 446   2            break;
 447   2        }
 448   1        
 449   1         /*??*/
 450   1        times = MAX_TIME;
 451   1        while(1)
 452   1        {
 453   2          if(uFlg.sflg.Flg_key == 1) {  break;  }
 454   2          times -= SPEEDS;
 455   2          LED_LOOP_RB(times,MAX_TIME-times);
 456   2          if(times < SPEEDS)
 457   2            break;
 458   2        }
 459   1        
 460   1      }
 461          
 462          
 463          //*******************MAIN*********************//
 464          
 465          void main()
 466          {
 467   1        
 468   1        GPIO_Init();
 469   1        Timer0_init();                //timer0 initinal
 470   1        INT_init();                 //
 471   1        delay_ms(2500);
 472   1        delay_ms(2500);
 473   1        delay_ms(2500);
 474   1        
 475   1        while(1)                  //main loop
 476   1        {
 477   2          clrwdt();
 478   2          if(uFlg.sflg.Flg_key == 0)
 479   2          {
 480   3           
 481   3          //disp();
 482   3          SCL = 0;
 483   3          LED_BREATH_R();         
 484   3          LED_BREATH_RB();
 485   3          LED_BREATH_G();         
 486   3          LED_BREATH_B();         
 487   3          LED_BREATH_RG();
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 19:20:21 PAGE 9   

 488   3          LED_BREATH_GB();
 489   3          LED_BREATH_RGB();
 490   3          SCL = 1;
 491   3          delay_ms(10);
 492   3          
 493   3          }
 494   2          if(uFlg.sflg.Flg_key == 1)
 495   2          {
 496   3            R1 = R2 = R3 = G1 = G2 = G3 = B1 = B2 = B3 = 1;
 497   3            SCL = 0;
 498   3          }  
 499   2          
 500   2        }
 501   1        
 502   1      }
 503          
 504          /*************************************************
 505          function name: Timer0_init()
 506          function work: initial the timer0 overflow time
 507          input data   : the constant define the fsys and the overflow time
 508          output data  : null
 509          note     : setting the timer0 
 510          *************************************************/
 511          void Timer0_init()                //T_overflow unit:us 16 bit timer mode
 512          {
 513   1      
 514   1        TMOD    |=  0x01;
 515   1        
 516   1        //timer1 for bit7~4
 517   1        //bit7 gatebit 1:enable 0:disable
 518   1        //bit6 timer/counter 0:timer 1:counter
 519   1        //bit5~4 00:mode0 13bit timer/counter 01:mode1 16bit timer/counter 
 520   1        //     01:mode2 8bit aoto reload timer/counter mode3:stop counter
 521   1        
 522   1        //timer0 for bit3~0
 523   1        //bit3 gatebit 1:enable 0:disable
 524   1        //bit2 timer/counter 0:timer 1:counter
 525   1        //bit1~0 00:mode0 13bit timer/counter 01:mode1 16bit timer/counter 
 526   1        //     10:mode2 8bit aoto reload timer/counter mode3:independent timer/counter
 527   1        
 528   1        CKCON   |=  0x08;
 529   1        
 530   1        //bit7~6 WDT overflow time 00:2^17*tsys 01:2^20*tsys 10:2^23*tsys 11:2^26*tsys
 531   1        //bit4:timer1 clocksource 0:fsys/12 1:fsys/4
 532   1        //bit3:timer0 clocksource 0:fsys/12 1:fsys/4
 533   1      
 534   1      
 535   1        //initial value for 16bit counter
 536   1        
 537   1        TH0     = TM_value/256;
 538   1        TL0     = TM_value;
 539   1        
 540   1        TCON    |=  0x10;
 541   1        
 542   1        //bit7 flag 0:timer1 not overflow 1:timer1 over flow 
 543   1        //bit6 0:timer1 disable 1:timer1 enable
 544   1        //bit5 flag 0:timer0 not overflow 1:timer0 over flow 
 545   1        //bit4 0:timer0 disable 1:timer0 enable
 546   1        //bit3~0 is for external pin interrupt
 547   1        
 548   1      }
 549          /*************************************************
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 19:20:21 PAGE 10  

 550          function name: INT_init()
 551          function work: initial the INT function
 552          input data   : null
 553          output data  : null
 554          note     : setting the interrupt function
 555          *************************************************/
 556          void INT_init()                 //intterrupt initinal
 557          {
 558   1        IE    = 0x02;
 559   1        
 560   1      //Bit7  EA  Global interrupt enable bit 0:disable 1:enable
 561   1      //Bit6  ES1 UART1 interrupt enable bit  0:disable 1:enable
 562   1      //Bit5  ET2 Timer2 global interrupt enable bit  0:disable 1:enable
 563   1      //Bit4  ES0 UART0 interrupt enable bit  0:disable 1:enable
 564   1      //Bit3  ET1 Timer1 interrupt enable bit  0:disable 1:enable
 565   1      //Bit2  EX1 INT1 interrupt enable bit  0:disable 1:enable
 566   1      //Bit1  ET0 Timer0 interrupt enable bit  0:disable 1:enable
 567   1      //Bit0  EX0 INT0 interrupt enable bit  0:disable 1:enable
 568   1      
 569   1        IP    = 0x00;
 570   1        
 571   1      //Bit6  PS1   UART1 interrupt priority control bit 0:high priority 1:low priority
 572   1      //Bit5  PT2   Timer2 interrupt priority control bit 0:high priority 1:low priority
 573   1      //Bit4  PS0   UART0 interrupt priority control bit 0:high priority 1:low priority
 574   1      //Bit3  PT1   Timer1 interrupt priority control bit 0:high priority 1:low priority
 575   1      //Bit2  PX1   INT1 interrupt priority control bit 0:high priority 1:low priority
 576   1      //Bit1  PT0   Timer0 interrupt priority control bit 0:high priority 1:low priority
 577   1      //Bit0  PX0   INT0 interrupt priority control bit 0:high priority 1:low priority
 578   1      
 579   1        EA    = 1;    //Bit7  EA  Global interrupt enable bit 0:disable 1:enable
 580   1        
 581   1      }
 582          
 583          /*************************************************
 584          function name: Timer0_INT()
 585          function work: timer0 INT function
 586          input data   : null
 587          output data  : null
 588          note     : watch the P15 toggle and measure pulse is the overflow time
 589          *************************************************/
 590          void Timer0_INT() interrupt TIMER0_VECTOR
 591          {
 592   1      
 593   1        TH0     = TM_value/256;
 594   1        TL0     = TM_value;
 595   1        
 596   1        
 597   1      }
 598          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2177    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     88    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
