

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Nov 30 14:27:51 2021

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F2892B
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text10,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	pa_nodes0,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	strings
    56  01A7                     __pstrings:	
    57  01A7                     stringtab:	
    58  01A7                     __stringtab:	
    59  01A7                     stringcode:	
    60                           ;	String table - string pointers are 1 byte each
    61                           
    62  01A7                     stringdir:	
    63  01A7  3001               	movlw	high stringdir
    64  01A8  008A               	movwf	10
    65  01A9  0804               	movf	4,w
    66  01AA  0A84               	incf	4,f
    67  01AB  0782               	addwf	2,f
    68  01AC                     __stringbase:	
    69  01AC  3400               	retlw	0
    70  01AD                     __end_of__stringtab:	
    71  01AD                     _Table_KeyCap:	
    72  01AD  3402               	retlw	2
    73  01AE  3402               	retlw	2
    74  01AF  3402               	retlw	2
    75  01B0  3402               	retlw	2
    76  01B1  3402               	retlw	2
    77  01B2  3402               	retlw	2
    78  01B3  3402               	retlw	2
    79  01B4                     __end_of_Table_KeyCap:	
    80  01B4                     _Table_KeyChannel:	
    81  01B4  3460               	retlw	96
    82  01B5  3461               	retlw	97
    83  01B6  3462               	retlw	98
    84  01B7  3463               	retlw	99
    85  01B8  3464               	retlw	100
    86  01B9  346B               	retlw	107
    87  01BA  346C               	retlw	108
    88  01BB                     __end_of_Table_KeyChannel:	
    89  0012                     _T2CON	set	18
    90  000D                     _PIE1	set	13
    91  000C                     _PIR1	set	12
    92  000B                     _INTCON	set	11
    93  0006                     _PORTB	set	6
    94  0069                     _TMR2IE	set	105
    95  0061                     _TMR2IF	set	97
    96  0030                     _RB0	set	48
    97  0031                     _RB1	set	49
    98  0097                     _KEYCON2	set	151
    99  0095                     _KEYDATAH	set	149
   100  0094                     _KEYDATAL	set	148
   101  0093                     _KEYCON1	set	147
   102  0092                     _KEYCON0	set	146
   103  0091                     _PR2	set	145
   104  0088                     _OSCCON	set	136
   105  0086                     _TRISB	set	134
   106  0081                     _OPTION_REG	set	129
   107  0430                     _I2C_SDA_IO	set	1072
   108  0431                     _I2C_SCL_IO	set	1073
   109  0108                     _PIE2	set	264
   110  0107                     _PIR2	set	263
   111                           
   112                           	psect	cinit
   113  000D                     start_initialization:	
   114                           ; #config settings
   115                           
   116  000D                     __initialization:	
   117  000D  3020               	movlw	low __pbssBANK0
   118                           
   119                           ; Clear objects allocated to BITCOMMON
   120  000E  01F5               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   121                           
   122                           ; Clear objects allocated to COMMON
   123  000F  01F6               	clrf	__pbssCOMMON& (0+127)
   124                           
   125                           ; Clear objects allocated to BANK0
   126  0010  1383               	bcf	3,7	;select IRP bank0
   127  0011  0084               	movwf	4
   128  0012  3040               	movlw	low (__pbssBANK0+32)
   129  0013  118A  21D7         	fcall	clear_ram0
   130  0015                     end_of_initialization:	
   131                           ;End of C runtime variable initialization code
   132                           
   133  0015                     __end_of__initialization:	
   134  0015  0183               	clrf	3
   135  0016  118A  29CC         	ljmp	_main	;jump to C main() function
   136                           
   137                           	psect	bitbssCOMMON
   138  03A8                     __pbitbssCOMMON:	
   139  03A8                     _B_MainLoop:	
   140  03A8                     	ds	1
   141                           
   142                           	psect	bssCOMMON
   143  0076                     __pbssCOMMON:	
   144  0076                     _MainTime:	
   145  0076                     	ds	1
   146                           
   147                           	psect	bssBANK0
   148  0020                     __pbssBANK0:	
   149  0020                     _TKdata:	
   150  0020                     	ds	32
   151                           
   152                           	psect	clrtext
   153  01D7                     clear_ram0:	
   154                           ;	Called with FSR containing the base address, and
   155                           ;	W with the last address+1
   156                           
   157  01D7  0064               	clrwdt	;clear the watchdog before getting into this loop
   158  01D8                     clrloop0:	
   159  01D8  0180               	clrf	0	;clear RAM location pointed to by FSR
   160  01D9  0A84               	incf	4,f	;increment pointer
   161  01DA  0604               	xorwf	4,w	;XOR with final address
   162  01DB  1903               	btfsc	3,2	;have we reached the end yet?
   163  01DC  3400               	retlw	0	;all done for this memory range, return
   164  01DD  0604               	xorwf	4,w	;XOR again to restore value
   165  01DE  29D8               	goto	clrloop0	;do the next byte
   166                           
   167                           	psect	cstackCOMMON
   168  0070                     __pcstackCOMMON:	
   169  0070                     ?_CheckTouchKey:	
   170  0070                     ?_I2C_WriteStart:	
   171                           ; 1 bytes @ 0x0
   172                           
   173  0070                     ?_I2C_Write1bYTE:	
   174                           ; 1 bytes @ 0x0
   175                           
   176  0070                     ?_I2C_WriteStop:	
   177                           ; 1 bytes @ 0x0
   178                           
   179  0070                     ?_I2C_WaitMoment:	
   180                           ; 1 bytes @ 0x0
   181                           
   182  0070                     ?_Init_System:	
   183                           ; 1 bytes @ 0x0
   184                           
   185  0070                     ?_Refurbish_Sfr:	
   186                           ; 1 bytes @ 0x0
   187                           
   188  0070                     ?_Isr_Timer:	
   189                           ; 1 bytes @ 0x0
   190                           
   191  0070                     ??_Isr_Timer:	
   192                           ; 1 bytes @ 0x0
   193                           
   194  0070                     ?_main:	
   195                           ; 1 bytes @ 0x0
   196                           
   197  0070                     ?_CheckTouchKey_F:	
   198                           ; 1 bytes @ 0x0
   199                           
   200  0070                     ?_Key_Test:	
   201                           ; 1 bytes @ 0x0
   202                           
   203                           
   204                           ; 2 bytes @ 0x0
   205  0070                     	ds	2
   206  0072                     ??_I2C_WriteStart:	
   207  0072                     ??_I2C_Write1bYTE:	
   208                           ; 1 bytes @ 0x2
   209                           
   210  0072                     ??_I2C_WriteStop:	
   211                           ; 1 bytes @ 0x2
   212                           
   213  0072                     ??_I2C_WaitMoment:	
   214                           ; 1 bytes @ 0x2
   215                           
   216  0072                     ??_Init_System:	
   217                           ; 1 bytes @ 0x2
   218                           
   219  0072                     ??_Refurbish_Sfr:	
   220                           ; 1 bytes @ 0x2
   221                           
   222  0072                     ??_Key_Test:	
   223                           ; 1 bytes @ 0x2
   224                           
   225  0072                     Key_Test@cnt:	
   226                           ; 1 bytes @ 0x2
   227                           
   228  0072                     I2C_Write1bYTE@data:	
   229                           ; 1 bytes @ 0x2
   230                           
   231                           
   232                           ; 1 bytes @ 0x2
   233  0072                     	ds	1
   234  0073                     I2C_Write1bYTE@i:	
   235                           
   236                           ; 1 bytes @ 0x3
   237  0073                     	ds	1
   238  0074                     ??_CheckTouchKey_F:	
   239  0074                     CheckTouchKey_F@checksum:	
   240                           ; 1 bytes @ 0x4
   241                           
   242                           
   243                           ; 1 bytes @ 0x4
   244  0074                     	ds	1
   245  0075                     ??_CheckTouchKey:	
   246  0075                     ??_main:	
   247                           ; 1 bytes @ 0x5
   248                           
   249                           
   250                           	psect	maintext
   251  01CC                     __pmaintext:	
   252                           ; 1 bytes @ 0x5
   253 ;;
   254 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   255 ;;
   256 ;; *************** function _main *****************
   257 ;; Defined at:
   258 ;;		line 74 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F289XB¿ª·¢°ü\SCTOUCH-289XB\main.c"
   259 ;; Parameters:    Size  Location     Type
   260 ;;		None
   261 ;; Auto vars:     Size  Location     Type
   262 ;;		None
   263 ;; Return value:  Size  Location     Type
   264 ;;                  1    wreg      void 
   265 ;; Registers used:
   266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   267 ;; Tracked objects:
   268 ;;		On entry : B00/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   272 ;;      Params:         0       0       0       0
   273 ;;      Locals:         0       0       0       0
   274 ;;      Temps:          0       0       0       0
   275 ;;      Totals:         0       0       0       0
   276 ;;Total ram usage:        0 bytes
   277 ;; Hardware stack levels required when called:    5
   278 ;; This function calls:
   279 ;;		_CheckTouchKey
   280 ;;		_Init_System
   281 ;;		_Refurbish_Sfr
   282 ;; This function is called by:
   283 ;;		Startup code after reset
   284 ;; This function uses a non-reentrant model
   285 ;;
   286                           
   287                           
   288                           ;psect for function _main
   289  01CC                     _main:	
   290                           
   291                           ;main.c: 76: Init_System();
   292                           
   293                           ;incstack = 0
   294                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   295  01CC  118A  2176  118A   	fcall	_Init_System
   296  01CF                     l758:	
   297                           ;main.c: 77: while(1)
   298                           
   299  01CF  0064               	clrwdt	;# 
   300                           
   301                           ;main.c: 81: Refurbish_Sfr();
   302  01D0  118A  21BB  118A   	fcall	_Refurbish_Sfr
   303                           
   304                           ;main.c: 82: CheckTouchKey();
   305  01D3  118A  2018  118A   	fcall	_CheckTouchKey
   306  01D6  29CF               	goto	l758
   307  01D7                     __end_of_main:	
   308                           
   309                           	psect	text1
   310  01BB                     __ptext1:	
   311 ;; *************** function _Refurbish_Sfr *****************
   312 ;; Defined at:
   313 ;;		line 37 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F289XB¿ª·¢°ü\SCTOUCH-289XB\main.c"
   314 ;; Parameters:    Size  Location     Type
   315 ;;		None
   316 ;; Auto vars:     Size  Location     Type
   317 ;;		None
   318 ;; Return value:  Size  Location     Type
   319 ;;                  1    wreg      void 
   320 ;; Registers used:
   321 ;;		wreg, status,2, status,0
   322 ;; Tracked objects:
   323 ;;		On entry : 0/0
   324 ;;		On exit  : 300/0
   325 ;;		Unchanged: 0/0
   326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   327 ;;      Params:         0       0       0       0
   328 ;;      Locals:         0       0       0       0
   329 ;;      Temps:          0       0       0       0
   330 ;;      Totals:         0       0       0       0
   331 ;;Total ram usage:        0 bytes
   332 ;; Hardware stack levels used:    1
   333 ;; Hardware stack levels required when called:    1
   334 ;; This function calls:
   335 ;;		Nothing
   336 ;; This function is called by:
   337 ;;		_main
   338 ;; This function uses a non-reentrant model
   339 ;;
   340                           
   341                           
   342                           ;psect for function _Refurbish_Sfr
   343  01BB                     _Refurbish_Sfr:	
   344                           
   345                           ;main.c: 40: PIE1 = 2;
   346                           
   347                           ;incstack = 0
   348                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
   349  01BB  3002               	movlw	2
   350  01BC  1283               	bcf	3,5	;RP0=0, select bank0
   351  01BD  1303               	bcf	3,6	;RP1=0, select bank0
   352  01BE  008D               	movwf	13	;volatile
   353                           
   354                           ;main.c: 41: PR2 = 250;
   355  01BF  30FA               	movlw	250
   356  01C0  1683               	bsf	3,5	;RP0=1, select bank1
   357  01C1  0091               	movwf	17	;volatile
   358                           
   359                           ;main.c: 42: INTCON = 0XC0;
   360  01C2  30C0               	movlw	192
   361  01C3  008B               	movwf	11	;volatile
   362                           
   363                           ;main.c: 43: if(4 != T2CON)
   364  01C4  3004               	movlw	4
   365  01C5  1283               	bcf	3,5	;RP0=0, select bank0
   366  01C6  0612               	xorwf	18,w	;volatile
   367  01C7  1903               	btfsc	3,2
   368  01C8  0008               	return
   369                           
   370                           ;main.c: 44: T2CON = 4;
   371  01C9  3004               	movlw	4
   372  01CA  0092               	movwf	18	;volatile
   373  01CB  0008               	return
   374  01CC                     __end_of_Refurbish_Sfr:	
   375                           
   376                           	psect	text2
   377  0176                     __ptext2:	
   378 ;; *************** function _Init_System *****************
   379 ;; Defined at:
   380 ;;		line 8 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F289XB¿ª·¢°ü\SCTOUCH-289XB\main.c"
   381 ;; Parameters:    Size  Location     Type
   382 ;;		None
   383 ;; Auto vars:     Size  Location     Type
   384 ;;		None
   385 ;; Return value:  Size  Location     Type
   386 ;;                  1    wreg      void 
   387 ;; Registers used:
   388 ;;		wreg, status,2
   389 ;; Tracked objects:
   390 ;;		On entry : B00/0
   391 ;;		On exit  : 300/0
   392 ;;		Unchanged: 0/0
   393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   394 ;;      Params:         0       0       0       0
   395 ;;      Locals:         0       0       0       0
   396 ;;      Temps:          0       0       0       0
   397 ;;      Totals:         0       0       0       0
   398 ;;Total ram usage:        0 bytes
   399 ;; Hardware stack levels used:    1
   400 ;; Hardware stack levels required when called:    1
   401 ;; This function calls:
   402 ;;		Nothing
   403 ;; This function is called by:
   404 ;;		_main
   405 ;; This function uses a non-reentrant model
   406 ;;
   407                           
   408                           
   409                           ;psect for function _Init_System
   410  0176                     _Init_System:	
   411                           
   412                           ;incstack = 0
   413                           ; Regs used in _Init_System: [wreg+status,2]
   414  0176  0000               	nop	;# 
   415  0177  0064               	clrwdt	;# 
   416                           
   417                           ;main.c: 12: INTCON = 0;
   418  0178  018B               	clrf	11	;volatile
   419                           
   420                           ;main.c: 13: OSCCON = 0x72;
   421  0179  3072               	movlw	114
   422  017A  1683               	bsf	3,5	;RP0=1, select bank1
   423  017B  1303               	bcf	3,6	;RP1=0, select bank1
   424  017C  0088               	movwf	8	;volatile
   425                           
   426                           ;main.c: 14: OPTION_REG = 0;
   427  017D  0181               	clrf	1	;volatile
   428                           
   429                           ;main.c: 16: INTCON = 0;
   430  017E  018B               	clrf	11	;volatile
   431                           
   432                           ;main.c: 17: TRISB = 0;
   433  017F  0186               	clrf	6	;volatile
   434                           
   435                           ;main.c: 18: PORTB = 0;
   436  0180  1283               	bcf	3,5	;RP0=0, select bank0
   437  0181  0186               	clrf	6	;volatile
   438                           
   439                           ;main.c: 20: PIR1 = 0;
   440  0182  018C               	clrf	12	;volatile
   441                           
   442                           ;main.c: 21: PIE1 = 0;
   443  0183  018D               	clrf	13	;volatile
   444                           
   445                           ;main.c: 22: PIR2 = 0;
   446  0184  1703               	bsf	3,6	;RP1=1, select bank2
   447  0185  0187               	clrf	7	;volatile
   448                           
   449                           ;main.c: 23: PIE2 = 0;
   450  0186  0188               	clrf	8	;volatile
   451                           
   452                           ;main.c: 26: PR2 = 250;
   453  0187  30FA               	movlw	250
   454  0188  1683               	bsf	3,5	;RP0=1, select bank1
   455  0189  1303               	bcf	3,6	;RP1=0, select bank1
   456  018A  0091               	movwf	17	;volatile
   457                           
   458                           ;main.c: 27: T2CON = 4;
   459  018B  3004               	movlw	4
   460  018C  1283               	bcf	3,5	;RP0=0, select bank0
   461  018D  0092               	movwf	18	;volatile
   462                           
   463                           ;main.c: 28: TMR2IE = 1;
   464  018E  148D               	bsf	13,1	;volatile
   465                           
   466                           ;main.c: 30: INTCON = 0XC0;
   467  018F  30C0               	movlw	192
   468  0190  008B               	movwf	11	;volatile
   469  0191  0008               	return
   470  0192                     __end_of_Init_System:	
   471                           
   472                           	psect	text3
   473  0018                     __ptext3:	
   474 ;; *************** function _CheckTouchKey *****************
   475 ;; Defined at:
   476 ;;		line 290 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F289XB¿ª·¢°ü\SCTOUCH-289XB\CheckTouchKey.c"
   477 ;; Parameters:    Size  Location     Type
   478 ;;		None
   479 ;; Auto vars:     Size  Location     Type
   480 ;;		None
   481 ;; Return value:  Size  Location     Type
   482 ;;                  1    wreg      void 
   483 ;; Registers used:
   484 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : 300/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   490 ;;      Params:         0       0       0       0
   491 ;;      Locals:         0       0       0       0
   492 ;;      Temps:          0       0       0       0
   493 ;;      Totals:         0       0       0       0
   494 ;;Total ram usage:        0 bytes
   495 ;; Hardware stack levels used:    1
   496 ;; Hardware stack levels required when called:    4
   497 ;; This function calls:
   498 ;;		_CheckTouchKey_F
   499 ;; This function is called by:
   500 ;;		_main
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504                           
   505                           ;psect for function _CheckTouchKey
   506  0018                     _CheckTouchKey:	
   507                           
   508                           ;CheckTouchKey.c: 292: CheckTouchKey_F();
   509                           
   510                           ;incstack = 0
   511                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   512  0018  2819               	ljmp	l2310
   513  0019                     __end_of_CheckTouchKey:	
   514  0019                     __ptext4:	
   515 ;; *************** function _CheckTouchKey_F *****************
   516 ;; Defined at:
   517 ;;		line 167 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F289XB¿ª·¢°ü\SCTOUCH-289XB\CheckTouchKey.c"
   518 ;; Parameters:    Size  Location     Type
   519 ;;		None
   520 ;; Auto vars:     Size  Location     Type
   521 ;;  checksum        1    4[COMMON] unsigned char 
   522 ;; Return value:  Size  Location     Type
   523 ;;                  1    wreg      void 
   524 ;; Registers used:
   525 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   526 ;; Tracked objects:
   527 ;;		On entry : 300/0
   528 ;;		On exit  : 0/0
   529 ;;		Unchanged: 0/0
   530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   531 ;;      Params:         0       0       0       0
   532 ;;      Locals:         1       0       0       0
   533 ;;      Temps:          0       0       0       0
   534 ;;      Totals:         1       0       0       0
   535 ;;Total ram usage:        1 bytes
   536 ;; Hardware stack levels used:    1
   537 ;; Hardware stack levels required when called:    3
   538 ;; This function calls:
   539 ;;		_I2C_Write1bYTE
   540 ;;		_I2C_WriteStart
   541 ;;		_I2C_WriteStop
   542 ;;		_Key_Test
   543 ;; This function is called by:
   544 ;;		_CheckTouchKey
   545 ;; This function uses a non-reentrant model
   546 ;;
   547                           
   548                           
   549                           ;psect for function _CheckTouchKey_F
   550  0019                     _CheckTouchKey_F:	
   551  0019                     l2310:	
   552                           ;incstack = 0
   553                           ; Regs used in _CheckTouchKey_F: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   554                           
   555                           
   556                           ;CheckTouchKey.c: 170: unsigned char checksum = 0;
   557  0019  01F4               	clrf	CheckTouchKey_F@checksum
   558  001A  0064               	clrwdt	;# 
   559                           
   560                           ;CheckTouchKey.c: 184: checksum += 1;
   561  001B  0AF4               	incf	CheckTouchKey_F@checksum,f
   562                           
   563                           ;CheckTouchKey.c: 188: checksum += 1;
   564  001C  0AF4               	incf	CheckTouchKey_F@checksum,f
   565                           
   566                           ;CheckTouchKey.c: 192: checksum += 1;
   567  001D  0AF4               	incf	CheckTouchKey_F@checksum,f
   568                           
   569                           ;CheckTouchKey.c: 196: checksum += 1;
   570  001E  0AF4               	incf	CheckTouchKey_F@checksum,f
   571                           
   572                           ;CheckTouchKey.c: 200: checksum += 1;
   573  001F  0AF4               	incf	CheckTouchKey_F@checksum,f
   574                           
   575                           ;CheckTouchKey.c: 204: if (checksum)
   576  0020  0874               	movf	CheckTouchKey_F@checksum,w
   577  0021  1903               	btfsc	3,2
   578  0022  0008               	return
   579                           
   580                           ;CheckTouchKey.c: 205: {
   581                           ;CheckTouchKey.c: 207: Key_Test();
   582  0023  20DB  118A         	fcall	_Key_Test
   583                           
   584                           ;CheckTouchKey.c: 210: checksum *= 3;
   585  0025  1003               	clrc
   586  0026  0D74               	rlf	CheckTouchKey_F@checksum,w
   587  0027  07F4               	addwf	CheckTouchKey_F@checksum,f
   588                           
   589                           ;CheckTouchKey.c: 211: checksum += 2;
   590  0028  0AF4               	incf	CheckTouchKey_F@checksum,f
   591  0029  0AF4               	incf	CheckTouchKey_F@checksum,f
   592                           
   593                           ;CheckTouchKey.c: 213: I2C_WriteStart();
   594  002A  20C5  118A         	fcall	_I2C_WriteStart
   595                           
   596                           ;CheckTouchKey.c: 214: I2C_Write1bYTE(0xa0);
   597  002C  30A0               	movlw	160
   598  002D  2090  118A         	fcall	_I2C_Write1bYTE
   599                           
   600                           ;CheckTouchKey.c: 215: I2C_Write1bYTE(checksum);
   601  002F  0874               	movf	CheckTouchKey_F@checksum,w
   602  0030  2090  118A         	fcall	_I2C_Write1bYTE
   603                           
   604                           ;CheckTouchKey.c: 236: I2C_Write1bYTE(3);
   605  0032  3003               	movlw	3
   606  0033  2090  118A         	fcall	_I2C_Write1bYTE
   607                           
   608                           ;CheckTouchKey.c: 237: I2C_Write1bYTE(TKdata[2] & 0xff);
   609  0035  1283               	bcf	3,5	;RP0=0, select bank0
   610  0036  0824               	movf	_TKdata+4,w
   611  0037  2090  118A         	fcall	_I2C_Write1bYTE
   612                           
   613                           ;CheckTouchKey.c: 238: I2C_Write1bYTE((TKdata[2]>>8) & 0xff);
   614  0039  1283               	bcf	3,5	;RP0=0, select bank0
   615  003A  0825               	movf	_TKdata+5,w
   616  003B  2090  118A         	fcall	_I2C_Write1bYTE
   617                           
   618                           ;CheckTouchKey.c: 239: checksum += 3;
   619  003D  3003               	movlw	3
   620  003E  07F4               	addwf	CheckTouchKey_F@checksum,f
   621                           
   622                           ;CheckTouchKey.c: 240: checksum += (TKdata[2] & 0xff);
   623  003F  1283               	bcf	3,5	;RP0=0, select bank0
   624  0040  0824               	movf	_TKdata+4,w
   625  0041  07F4               	addwf	CheckTouchKey_F@checksum,f
   626                           
   627                           ;CheckTouchKey.c: 241: checksum += ((TKdata[2]>>8) & 0xff);
   628  0042  0825               	movf	_TKdata+5,w
   629  0043  07F4               	addwf	CheckTouchKey_F@checksum,f
   630                           
   631                           ;CheckTouchKey.c: 245: I2C_Write1bYTE(4);
   632  0044  3004               	movlw	4
   633  0045  2090  118A         	fcall	_I2C_Write1bYTE
   634                           
   635                           ;CheckTouchKey.c: 246: I2C_Write1bYTE(TKdata[3] & 0xff);
   636  0047  1283               	bcf	3,5	;RP0=0, select bank0
   637  0048  0826               	movf	_TKdata+6,w
   638  0049  2090  118A         	fcall	_I2C_Write1bYTE
   639                           
   640                           ;CheckTouchKey.c: 247: I2C_Write1bYTE((TKdata[3]>>8) & 0xff);
   641  004B  1283               	bcf	3,5	;RP0=0, select bank0
   642  004C  0827               	movf	_TKdata+7,w
   643  004D  2090  118A         	fcall	_I2C_Write1bYTE
   644                           
   645                           ;CheckTouchKey.c: 248: checksum += 4;
   646  004F  3004               	movlw	4
   647  0050  07F4               	addwf	CheckTouchKey_F@checksum,f
   648                           
   649                           ;CheckTouchKey.c: 249: checksum += (TKdata[3] & 0xff);
   650  0051  1283               	bcf	3,5	;RP0=0, select bank0
   651  0052  0826               	movf	_TKdata+6,w
   652  0053  07F4               	addwf	CheckTouchKey_F@checksum,f
   653                           
   654                           ;CheckTouchKey.c: 250: checksum += ((TKdata[3]>>8) & 0xff);
   655  0054  0827               	movf	_TKdata+7,w
   656  0055  07F4               	addwf	CheckTouchKey_F@checksum,f
   657                           
   658                           ;CheckTouchKey.c: 254: I2C_Write1bYTE(5);
   659  0056  3005               	movlw	5
   660  0057  2090  118A         	fcall	_I2C_Write1bYTE
   661                           
   662                           ;CheckTouchKey.c: 255: I2C_Write1bYTE(TKdata[4] & 0xff);
   663  0059  1283               	bcf	3,5	;RP0=0, select bank0
   664  005A  0828               	movf	_TKdata+8,w
   665  005B  2090  118A         	fcall	_I2C_Write1bYTE
   666                           
   667                           ;CheckTouchKey.c: 256: I2C_Write1bYTE((TKdata[4]>>8) & 0xff);
   668  005D  1283               	bcf	3,5	;RP0=0, select bank0
   669  005E  0829               	movf	_TKdata+9,w
   670  005F  2090  118A         	fcall	_I2C_Write1bYTE
   671                           
   672                           ;CheckTouchKey.c: 257: checksum += 5;
   673  0061  3005               	movlw	5
   674  0062  07F4               	addwf	CheckTouchKey_F@checksum,f
   675                           
   676                           ;CheckTouchKey.c: 258: checksum += (TKdata[4] & 0xff);
   677  0063  1283               	bcf	3,5	;RP0=0, select bank0
   678  0064  0828               	movf	_TKdata+8,w
   679  0065  07F4               	addwf	CheckTouchKey_F@checksum,f
   680                           
   681                           ;CheckTouchKey.c: 259: checksum += ((TKdata[4]>>8) & 0xff);
   682  0066  0829               	movf	_TKdata+9,w
   683  0067  07F4               	addwf	CheckTouchKey_F@checksum,f
   684                           
   685                           ;CheckTouchKey.c: 263: I2C_Write1bYTE(6);
   686  0068  3006               	movlw	6
   687  0069  2090  118A         	fcall	_I2C_Write1bYTE
   688                           
   689                           ;CheckTouchKey.c: 264: I2C_Write1bYTE(TKdata[5] & 0xff);
   690  006B  1283               	bcf	3,5	;RP0=0, select bank0
   691  006C  082A               	movf	_TKdata+10,w
   692  006D  2090  118A         	fcall	_I2C_Write1bYTE
   693                           
   694                           ;CheckTouchKey.c: 265: I2C_Write1bYTE((TKdata[5]>>8) & 0xff);
   695  006F  1283               	bcf	3,5	;RP0=0, select bank0
   696  0070  082B               	movf	_TKdata+11,w
   697  0071  2090  118A         	fcall	_I2C_Write1bYTE
   698                           
   699                           ;CheckTouchKey.c: 266: checksum += 6;
   700  0073  3006               	movlw	6
   701  0074  07F4               	addwf	CheckTouchKey_F@checksum,f
   702                           
   703                           ;CheckTouchKey.c: 267: checksum += (TKdata[5] & 0xff);
   704  0075  1283               	bcf	3,5	;RP0=0, select bank0
   705  0076  082A               	movf	_TKdata+10,w
   706  0077  07F4               	addwf	CheckTouchKey_F@checksum,f
   707                           
   708                           ;CheckTouchKey.c: 268: checksum += ((TKdata[5]>>8) & 0xff);
   709  0078  082B               	movf	_TKdata+11,w
   710  0079  07F4               	addwf	CheckTouchKey_F@checksum,f
   711                           
   712                           ;CheckTouchKey.c: 272: I2C_Write1bYTE(7);
   713  007A  3007               	movlw	7
   714  007B  2090  118A         	fcall	_I2C_Write1bYTE
   715                           
   716                           ;CheckTouchKey.c: 273: I2C_Write1bYTE(TKdata[6] & 0xff);
   717  007D  1283               	bcf	3,5	;RP0=0, select bank0
   718  007E  082C               	movf	_TKdata+12,w
   719  007F  2090  118A         	fcall	_I2C_Write1bYTE
   720                           
   721                           ;CheckTouchKey.c: 274: I2C_Write1bYTE((TKdata[6]>>8) & 0xff);
   722  0081  1283               	bcf	3,5	;RP0=0, select bank0
   723  0082  082D               	movf	_TKdata+13,w
   724  0083  2090  118A         	fcall	_I2C_Write1bYTE
   725                           
   726                           ;CheckTouchKey.c: 275: checksum += 7;
   727  0085  3007               	movlw	7
   728  0086  07F4               	addwf	CheckTouchKey_F@checksum,f
   729                           
   730                           ;CheckTouchKey.c: 276: checksum += (TKdata[6] & 0xff);
   731  0087  1283               	bcf	3,5	;RP0=0, select bank0
   732  0088  082C               	movf	_TKdata+12,w
   733  0089  07F4               	addwf	CheckTouchKey_F@checksum,f
   734                           
   735                           ;CheckTouchKey.c: 277: checksum += ((TKdata[6]>>8) & 0xff);
   736  008A  082D               	movf	_TKdata+13,w
   737  008B  07F4               	addwf	CheckTouchKey_F@checksum,f
   738                           
   739                           ;CheckTouchKey.c: 281: I2C_Write1bYTE(checksum);
   740  008C  0874               	movf	CheckTouchKey_F@checksum,w
   741  008D  2090  118A         	fcall	_I2C_Write1bYTE
   742                           
   743                           ;CheckTouchKey.c: 282: I2C_WriteStop();
   744  008F  28B2               	ljmp	l2062
   745  0090                     __end_of_CheckTouchKey_F:	
   746  0090                     __ptext8:	
   747 ;; *************** function _I2C_Write1bYTE *****************
   748 ;; Defined at:
   749 ;;		line 347 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F289XB¿ª·¢°ü\SCTOUCH-289XB\CheckTouchKey.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;  data            1    wreg     unsigned char 
   752 ;; Auto vars:     Size  Location     Type
   753 ;;  data            1    2[COMMON] unsigned char 
   754 ;;  i               1    3[COMMON] unsigned char 
   755 ;; Return value:  Size  Location     Type
   756 ;;                  1    wreg      unsigned char 
   757 ;; Registers used:
   758 ;;		wreg, status,2, status,0, pclath, cstack
   759 ;; Tracked objects:
   760 ;;		On entry : 0/100
   761 ;;		On exit  : 300/100
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   764 ;;      Params:         0       0       0       0
   765 ;;      Locals:         2       0       0       0
   766 ;;      Temps:          0       0       0       0
   767 ;;      Totals:         2       0       0       0
   768 ;;Total ram usage:        2 bytes
   769 ;; Hardware stack levels used:    1
   770 ;; Hardware stack levels required when called:    2
   771 ;; This function calls:
   772 ;;		_I2C_WaitMoment
   773 ;; This function is called by:
   774 ;;		_CheckTouchKey_F
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778                           
   779                           ;psect for function _I2C_Write1bYTE
   780  0090                     _I2C_Write1bYTE:	
   781                           
   782                           ;incstack = 0
   783                           ; Regs used in _I2C_Write1bYTE: [wreg+status,2+status,0+pclath+cstack]
   784                           ;I2C_Write1bYTE@data stored from wreg
   785  0090  00F2               	movwf	I2C_Write1bYTE@data
   786                           
   787                           ;CheckTouchKey.c: 349: unsigned char i = 8;
   788  0091  3008               	movlw	8
   789  0092  00F3               	movwf	I2C_Write1bYTE@i
   790                           
   791                           ;CheckTouchKey.c: 350: I2C_SDA_IO = 0;
   792  0093  1683               	bsf	3,5	;RP0=1, select bank1
   793  0094  1303               	bcf	3,6	;RP1=0, select bank1
   794  0095  1006               	bcf	6,0	;volatile
   795                           
   796                           ;CheckTouchKey.c: 351: I2C_SCL_IO = 0;
   797  0096  1086               	bcf	6,1	;volatile
   798  0097                     l2044:	
   799                           
   800                           ;CheckTouchKey.c: 353: {
   801                           ;CheckTouchKey.c: 354: RB1 = 0;
   802  0097  1283               	bcf	3,5	;RP0=0, select bank0
   803  0098  1086               	bcf	6,1	;volatile
   804                           
   805                           ;CheckTouchKey.c: 355: if(data&0x80)
   806  0099  1FF2               	btfss	I2C_Write1bYTE@data,7
   807  009A  289D               	goto	l1538
   808                           
   809                           ;CheckTouchKey.c: 356: RB0 = 1;
   810  009B  1406               	bsf	6,0	;volatile
   811  009C  289E               	goto	l1539
   812  009D                     l1538:	
   813                           
   814                           ;CheckTouchKey.c: 357: else
   815                           ;CheckTouchKey.c: 358: RB0 = 0;
   816  009D  1006               	bcf	6,0	;volatile
   817  009E                     l1539:	
   818                           
   819                           ;CheckTouchKey.c: 360: RB1 = 1;
   820  009E  1486               	bsf	6,1	;volatile
   821                           
   822                           ;CheckTouchKey.c: 361: data <<= 1;
   823  009F  1003               	clrc
   824  00A0  0DF2               	rlf	I2C_Write1bYTE@data,f
   825                           
   826                           ;CheckTouchKey.c: 362: }
   827                           ;CheckTouchKey.c: 363: while(--i);
   828  00A1  0BF3               	decfsz	I2C_Write1bYTE@i,f
   829  00A2  2897               	goto	l2044
   830                           
   831                           ;CheckTouchKey.c: 364: RB1 = 0;
   832  00A3  1086               	bcf	6,1	;volatile
   833                           
   834                           ;CheckTouchKey.c: 366: I2C_SDA_IO = 1;
   835  00A4  1683               	bsf	3,5	;RP0=1, select bank1
   836  00A5  1406               	bsf	6,0	;volatile
   837                           
   838                           ;CheckTouchKey.c: 368: I2C_WaitMoment();
   839  00A6  20D8  118A         	fcall	_I2C_WaitMoment
   840                           
   841                           ;CheckTouchKey.c: 369: RB1 = 1;
   842  00A8  1283               	bcf	3,5	;RP0=0, select bank0
   843  00A9  1303               	bcf	3,6	;RP1=0, select bank0
   844  00AA  1486               	bsf	6,1	;volatile
   845                           
   846                           ;CheckTouchKey.c: 370: I2C_WaitMoment();
   847  00AB  20D8               	fcall	_I2C_WaitMoment
   848                           
   849                           ;CheckTouchKey.c: 373: RB1 = 0;
   850  00AC  1283               	bcf	3,5	;RP0=0, select bank0
   851  00AD  1303               	bcf	3,6	;RP1=0, select bank0
   852  00AE  1086               	bcf	6,1	;volatile
   853                           
   854                           ;CheckTouchKey.c: 374: I2C_SDA_IO = 0;
   855  00AF  1683               	bsf	3,5	;RP0=1, select bank1
   856  00B0  1006               	bcf	6,0	;volatile
   857  00B1  0008               	return
   858  00B2                     __end_of_I2C_Write1bYTE:	
   859  00B2                     __ptext6:	
   860 ;; *************** function _I2C_WriteStop *****************
   861 ;; Defined at:
   862 ;;		line 325 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F289XB¿ª·¢°ü\SCTOUCH-289XB\CheckTouchKey.c"
   863 ;; Parameters:    Size  Location     Type
   864 ;;		None
   865 ;; Auto vars:     Size  Location     Type
   866 ;;		None
   867 ;; Return value:  Size  Location     Type
   868 ;;                  1    wreg      void 
   869 ;; Registers used:
   870 ;;		status,2, status,0, pclath, cstack
   871 ;; Tracked objects:
   872 ;;		On entry : 300/100
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   876 ;;      Params:         0       0       0       0
   877 ;;      Locals:         0       0       0       0
   878 ;;      Temps:          0       0       0       0
   879 ;;      Totals:         0       0       0       0
   880 ;;Total ram usage:        0 bytes
   881 ;; Hardware stack levels used:    1
   882 ;; Hardware stack levels required when called:    2
   883 ;; This function calls:
   884 ;;		_I2C_WaitMoment
   885 ;; This function is called by:
   886 ;;		_CheckTouchKey_F
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890                           
   891                           ;psect for function _I2C_WriteStop
   892  00B2                     _I2C_WriteStop:	
   893  00B2                     l2062:	
   894                           ;incstack = 0
   895                           ; Regs used in _I2C_WriteStop: [status,2+status,0+pclath+cstack]
   896                           
   897                           
   898                           ;CheckTouchKey.c: 327: I2C_SDA_IO = 0;
   899  00B2  1006               	bcf	6,0	;volatile
   900                           
   901                           ;CheckTouchKey.c: 328: I2C_SCL_IO = 0;
   902  00B3  1086               	bcf	6,1	;volatile
   903                           
   904                           ;CheckTouchKey.c: 329: I2C_WaitMoment();
   905  00B4  20D8  118A         	fcall	_I2C_WaitMoment
   906                           
   907                           ;CheckTouchKey.c: 331: RB0 = 0;
   908  00B6  1283               	bcf	3,5	;RP0=0, select bank0
   909  00B7  1303               	bcf	3,6	;RP1=0, select bank0
   910  00B8  1006               	bcf	6,0	;volatile
   911                           
   912                           ;CheckTouchKey.c: 332: RB1 = 1;
   913  00B9  1486               	bsf	6,1	;volatile
   914                           
   915                           ;CheckTouchKey.c: 333: I2C_WaitMoment();
   916  00BA  20D8  118A         	fcall	_I2C_WaitMoment
   917                           
   918                           ;CheckTouchKey.c: 334: RB0 = 1;
   919  00BC  1283               	bcf	3,5	;RP0=0, select bank0
   920  00BD  1303               	bcf	3,6	;RP1=0, select bank0
   921  00BE  1406               	bsf	6,0	;volatile
   922                           
   923                           ;CheckTouchKey.c: 336: I2C_WaitMoment();
   924  00BF  20D8  118A         	fcall	_I2C_WaitMoment
   925                           
   926                           ;CheckTouchKey.c: 337: RB1 = 0;
   927  00C1  1283               	bcf	3,5	;RP0=0, select bank0
   928  00C2  1303               	bcf	3,6	;RP1=0, select bank0
   929  00C3  1086               	bcf	6,1	;volatile
   930                           
   931                           ;CheckTouchKey.c: 338: I2C_WaitMoment();
   932  00C4  28D8               	ljmp	l1932
   933  00C5                     __end_of_I2C_WriteStop:	
   934  00C5                     __ptext7:	
   935 ;; *************** function _I2C_WriteStart *****************
   936 ;; Defined at:
   937 ;;		line 308 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F289XB¿ª·¢°ü\SCTOUCH-289XB\CheckTouchKey.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;		None
   940 ;; Auto vars:     Size  Location     Type
   941 ;;		None
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		status,2, status,0, pclath, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 300/100
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   951 ;;      Params:         0       0       0       0
   952 ;;      Locals:         0       0       0       0
   953 ;;      Temps:          0       0       0       0
   954 ;;      Totals:         0       0       0       0
   955 ;;Total ram usage:        0 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; Hardware stack levels required when called:    2
   958 ;; This function calls:
   959 ;;		_I2C_WaitMoment
   960 ;; This function is called by:
   961 ;;		_CheckTouchKey_F
   962 ;; This function uses a non-reentrant model
   963 ;;
   964                           
   965                           
   966                           ;psect for function _I2C_WriteStart
   967  00C5                     _I2C_WriteStart:	
   968                           
   969                           ;CheckTouchKey.c: 310: I2C_SDA_IO = 0;
   970                           
   971                           ;incstack = 0
   972                           ; Regs used in _I2C_WriteStart: [status,2+status,0+pclath+cstack]
   973  00C5  1006               	bcf	6,0	;volatile
   974                           
   975                           ;CheckTouchKey.c: 311: I2C_SCL_IO = 0;
   976  00C6  1086               	bcf	6,1	;volatile
   977                           
   978                           ;CheckTouchKey.c: 312: I2C_WaitMoment();
   979  00C7  20D8  118A         	fcall	_I2C_WaitMoment
   980                           
   981                           ;CheckTouchKey.c: 314: RB0 = 1;
   982  00C9  1283               	bcf	3,5	;RP0=0, select bank0
   983  00CA  1303               	bcf	3,6	;RP1=0, select bank0
   984  00CB  1406               	bsf	6,0	;volatile
   985                           
   986                           ;CheckTouchKey.c: 315: RB1 = 1;
   987  00CC  1486               	bsf	6,1	;volatile
   988                           
   989                           ;CheckTouchKey.c: 316: I2C_WaitMoment();
   990  00CD  20D8  118A         	fcall	_I2C_WaitMoment
   991                           
   992                           ;CheckTouchKey.c: 317: RB0 = 0;
   993  00CF  1283               	bcf	3,5	;RP0=0, select bank0
   994  00D0  1303               	bcf	3,6	;RP1=0, select bank0
   995  00D1  1006               	bcf	6,0	;volatile
   996                           
   997                           ;CheckTouchKey.c: 319: I2C_WaitMoment();
   998  00D2  20D8  118A         	fcall	_I2C_WaitMoment
   999                           
  1000                           ;CheckTouchKey.c: 320: RB1 = 0;
  1001  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  1002  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  1003  00D6  1086               	bcf	6,1	;volatile
  1004                           
  1005                           ;CheckTouchKey.c: 321: I2C_WaitMoment();
  1006  00D7  28D8               	ljmp	l1932
  1007  00D8                     __end_of_I2C_WriteStart:	
  1008  00D8                     __ptext9:	
  1009 ;; *************** function _I2C_WaitMoment *****************
  1010 ;; Defined at:
  1011 ;;		line 420 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F289XB¿ª·¢°ü\SCTOUCH-289XB\CheckTouchKey.c"
  1012 ;; Parameters:    Size  Location     Type
  1013 ;;		None
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;		None
  1016 ;; Return value:  Size  Location     Type
  1017 ;;                  1    wreg      void 
  1018 ;; Registers used:
  1019 ;;		None
  1020 ;; Tracked objects:
  1021 ;;		On entry : 200/100
  1022 ;;		On exit  : 0/0
  1023 ;;		Unchanged: 0/0
  1024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1025 ;;      Params:         0       0       0       0
  1026 ;;      Locals:         0       0       0       0
  1027 ;;      Temps:          0       0       0       0
  1028 ;;      Totals:         0       0       0       0
  1029 ;;Total ram usage:        0 bytes
  1030 ;; Hardware stack levels used:    1
  1031 ;; Hardware stack levels required when called:    1
  1032 ;; This function calls:
  1033 ;;		Nothing
  1034 ;; This function is called by:
  1035 ;;		_I2C_WriteStart
  1036 ;;		_I2C_WriteStop
  1037 ;;		_I2C_Write1bYTE
  1038 ;; This function uses a non-reentrant model
  1039 ;;
  1040                           
  1041                           
  1042                           ;psect for function _I2C_WaitMoment
  1043  00D8                     _I2C_WaitMoment:	
  1044  00D8                     l1932:	
  1045                           ;incstack = 0
  1046                           ; Regs used in _I2C_WaitMoment: []
  1047                           
  1048  00D8  0000               	nop	;# 
  1049  00D9  0000               	nop	;# 
  1050  00DA  0008               	return
  1051  00DB                     __end_of_I2C_WaitMoment:	
  1052  00DB                     __ptext5:	
  1053 ;; *************** function _Key_Test *****************
  1054 ;; Defined at:
  1055 ;;		line 34 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F289XB¿ª·¢°ü\SCTOUCH-289XB\CheckTouchKey.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;		None
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;  cnt             1    2[COMMON] unsigned char 
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  2  1505[None  ] unsigned int 
  1062 ;; Registers used:
  1063 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 300/100
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1069 ;;      Params:         0       0       0       0
  1070 ;;      Locals:         1       0       0       0
  1071 ;;      Temps:          0       0       0       0
  1072 ;;      Totals:         1       0       0       0
  1073 ;;Total ram usage:        1 bytes
  1074 ;; Hardware stack levels used:    2
  1075 ;; Hardware stack levels required when called:    1
  1076 ;; This function calls:
  1077 ;;		Nothing
  1078 ;; This function is called by:
  1079 ;;		_CheckTouchKey_F
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           
  1084                           ;psect for function _Key_Test
  1085  00DB                     _Key_Test:	
  1086                           
  1087                           ;CheckTouchKey.c: 36: unsigned char cnt=0;
  1088                           
  1089                           ;incstack = 0
  1090                           ; Regs used in _Key_Test: [wreg-fsr0h+status,2+status,0+pclath]
  1091  00DB  01F2               	clrf	Key_Test@cnt
  1092                           
  1093                           ;CheckTouchKey.c: 53: cnt++;
  1094  00DC  0AF2               	incf	Key_Test@cnt,f
  1095                           
  1096                           ;CheckTouchKey.c: 70: cnt++;
  1097  00DD  0AF2               	incf	Key_Test@cnt,f
  1098                           
  1099                           ;CheckTouchKey.c: 72: KEYCON0 = 0;
  1100  00DE  1683               	bsf	3,5	;RP0=1, select bank1
  1101  00DF  1303               	bcf	3,6	;RP1=0, select bank1
  1102  00E0  0192               	clrf	18	;volatile
  1103                           
  1104                           ;CheckTouchKey.c: 73: KEYCON1 = 0;
  1105  00E1  0193               	clrf	19	;volatile
  1106                           
  1107                           ;CheckTouchKey.c: 74: KEYCON2 = 1;
  1108  00E2  3001               	movlw	1
  1109  00E3  0097               	movwf	23	;volatile
  1110                           
  1111                           ;CheckTouchKey.c: 75: KEYCON0 = Table_KeyCap[cnt];
  1112  00E4  0872               	movf	Key_Test@cnt,w
  1113  00E5  3E01               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  1114  00E6  0084               	movwf	4
  1115  00E7  118A  21A7  118A   	fcall	stringdir
  1116                           
  1117                           ;CheckTouchKey.c: 76: KEYCON1 = Table_KeyChannel[cnt];
  1118  00EA  2171               	fcall	PL4	;call to abstracted procedure
  1119  00EB  118A  21A7  118A   	fcall	stringdir
  1120  00EE  0093               	movwf	19	;volatile
  1121  00EF  0000               	nop	;# 
  1122  00F0  0000               	nop	;# 
  1123  00F1  0000               	nop	;# 
  1124  00F2  0000               	nop	;# 
  1125                           
  1126                           ;CheckTouchKey.c: 81: KEYCON0 |= 0x1;
  1127  00F3  1683               	bsf	3,5	;RP0=1, select bank1
  1128  00F4  1303               	bcf	3,6	;RP1=0, select bank1
  1129  00F5  1412               	bsf	18,0	;volatile
  1130  00F6                     l1506:	
  1131                           ;CheckTouchKey.c: 82: while(!(KEYCON0&0x80));
  1132                           
  1133  00F6  1F92               	btfss	18,7	;volatile
  1134  00F7  28F6               	goto	l1506
  1135                           
  1136                           ;CheckTouchKey.c: 83: TKdata[2] = ((KEYDATAH<<8) + KEYDATAL);
  1137  00F8  0815               	movf	21,w	;volatile
  1138  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  1139  00FA  00A5               	movwf	_TKdata+5
  1140  00FB  1683               	bsf	3,5	;RP0=1, select bank1
  1141  00FC  0814               	movf	20,w	;volatile
  1142  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  1143  00FE  00A4               	movwf	_TKdata+4
  1144                           
  1145                           ;CheckTouchKey.c: 84: KEYCON0 = 0x00;
  1146                           
  1147                           ;CheckTouchKey.c: 87: cnt++;
  1148                           
  1149                           ;CheckTouchKey.c: 89: KEYCON0 = 0;
  1150                           
  1151                           ;CheckTouchKey.c: 90: KEYCON1 = 0;
  1152                           
  1153                           ;CheckTouchKey.c: 91: KEYCON2 = 1;
  1154                           
  1155                           ;CheckTouchKey.c: 92: KEYCON0 = Table_KeyCap[cnt];
  1156  00FF  2166               	fcall	PL2	;call to abstracted procedure
  1157  0100  118A  21A7  118A   	fcall	stringdir
  1158                           
  1159                           ;CheckTouchKey.c: 93: KEYCON1 = Table_KeyChannel[cnt];
  1160  0103  2171               	fcall	PL4	;call to abstracted procedure
  1161  0104  118A  21A7  118A   	fcall	stringdir
  1162  0107  0093               	movwf	19	;volatile
  1163  0108  0000               	nop	;# 
  1164  0109  0000               	nop	;# 
  1165  010A  0000               	nop	;# 
  1166  010B  0000               	nop	;# 
  1167                           
  1168                           ;CheckTouchKey.c: 98: KEYCON0 |= 0x1;
  1169  010C  1683               	bsf	3,5	;RP0=1, select bank1
  1170  010D  1303               	bcf	3,6	;RP1=0, select bank1
  1171  010E  1412               	bsf	18,0	;volatile
  1172  010F                     l1509:	
  1173                           ;CheckTouchKey.c: 99: while(!(KEYCON0&0x80));
  1174                           
  1175  010F  1F92               	btfss	18,7	;volatile
  1176  0110  290F               	goto	l1509
  1177                           
  1178                           ;CheckTouchKey.c: 100: TKdata[3] = ((KEYDATAH<<8) + KEYDATAL);
  1179  0111  0815               	movf	21,w	;volatile
  1180  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1181  0113  00A7               	movwf	_TKdata+7
  1182  0114  1683               	bsf	3,5	;RP0=1, select bank1
  1183  0115  0814               	movf	20,w	;volatile
  1184  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1185  0117  00A6               	movwf	_TKdata+6
  1186                           
  1187                           ;CheckTouchKey.c: 101: KEYCON0 = 0x00;
  1188                           
  1189                           ;CheckTouchKey.c: 104: cnt++;
  1190                           
  1191                           ;CheckTouchKey.c: 106: KEYCON0 = 0;
  1192                           
  1193                           ;CheckTouchKey.c: 107: KEYCON1 = 0;
  1194                           
  1195                           ;CheckTouchKey.c: 108: KEYCON2 = 1;
  1196                           
  1197                           ;CheckTouchKey.c: 109: KEYCON0 = Table_KeyCap[cnt];
  1198  0118  2166               	fcall	PL2	;call to abstracted procedure
  1199  0119  118A  21A7  118A   	fcall	stringdir
  1200                           
  1201                           ;CheckTouchKey.c: 110: KEYCON1 = Table_KeyChannel[cnt];
  1202  011C  2171               	fcall	PL4	;call to abstracted procedure
  1203  011D  118A  21A7  118A   	fcall	stringdir
  1204  0120  0093               	movwf	19	;volatile
  1205  0121  0000               	nop	;# 
  1206  0122  0000               	nop	;# 
  1207  0123  0000               	nop	;# 
  1208  0124  0000               	nop	;# 
  1209                           
  1210                           ;CheckTouchKey.c: 115: KEYCON0 |= 0x1;
  1211  0125  1683               	bsf	3,5	;RP0=1, select bank1
  1212  0126  1303               	bcf	3,6	;RP1=0, select bank1
  1213  0127  1412               	bsf	18,0	;volatile
  1214  0128                     l1512:	
  1215                           ;CheckTouchKey.c: 116: while(!(KEYCON0&0x80));
  1216                           
  1217  0128  1F92               	btfss	18,7	;volatile
  1218  0129  2928               	goto	l1512
  1219                           
  1220                           ;CheckTouchKey.c: 117: TKdata[4] = ((KEYDATAH<<8) + KEYDATAL);
  1221  012A  0815               	movf	21,w	;volatile
  1222  012B  1283               	bcf	3,5	;RP0=0, select bank0
  1223  012C  00A9               	movwf	_TKdata+9
  1224  012D  1683               	bsf	3,5	;RP0=1, select bank1
  1225  012E  0814               	movf	20,w	;volatile
  1226  012F  1283               	bcf	3,5	;RP0=0, select bank0
  1227  0130  00A8               	movwf	_TKdata+8
  1228                           
  1229                           ;CheckTouchKey.c: 118: KEYCON0 = 0x00;
  1230                           
  1231                           ;CheckTouchKey.c: 121: cnt++;
  1232                           
  1233                           ;CheckTouchKey.c: 123: KEYCON0 = 0;
  1234                           
  1235                           ;CheckTouchKey.c: 124: KEYCON1 = 0;
  1236                           
  1237                           ;CheckTouchKey.c: 125: KEYCON2 = 1;
  1238                           
  1239                           ;CheckTouchKey.c: 126: KEYCON0 = Table_KeyCap[cnt];
  1240  0131  2166               	fcall	PL2	;call to abstracted procedure
  1241  0132  118A  21A7  118A   	fcall	stringdir
  1242                           
  1243                           ;CheckTouchKey.c: 127: KEYCON1 = Table_KeyChannel[cnt];
  1244  0135  2171               	fcall	PL4	;call to abstracted procedure
  1245  0136  118A  21A7  118A   	fcall	stringdir
  1246  0139  0093               	movwf	19	;volatile
  1247  013A  0000               	nop	;# 
  1248  013B  0000               	nop	;# 
  1249  013C  0000               	nop	;# 
  1250  013D  0000               	nop	;# 
  1251                           
  1252                           ;CheckTouchKey.c: 132: KEYCON0 |= 0x1;
  1253  013E  1683               	bsf	3,5	;RP0=1, select bank1
  1254  013F  1303               	bcf	3,6	;RP1=0, select bank1
  1255  0140  1412               	bsf	18,0	;volatile
  1256  0141                     l1515:	
  1257                           ;CheckTouchKey.c: 133: while(!(KEYCON0&0x80));
  1258                           
  1259  0141  1F92               	btfss	18,7	;volatile
  1260  0142  2941               	goto	l1515
  1261                           
  1262                           ;CheckTouchKey.c: 134: TKdata[5] = ((KEYDATAH<<8) + KEYDATAL);
  1263  0143  0815               	movf	21,w	;volatile
  1264  0144  1283               	bcf	3,5	;RP0=0, select bank0
  1265  0145  00AB               	movwf	_TKdata+11
  1266  0146  1683               	bsf	3,5	;RP0=1, select bank1
  1267  0147  0814               	movf	20,w	;volatile
  1268  0148  1283               	bcf	3,5	;RP0=0, select bank0
  1269  0149  00AA               	movwf	_TKdata+10
  1270                           
  1271                           ;CheckTouchKey.c: 135: KEYCON0 = 0x00;
  1272                           
  1273                           ;CheckTouchKey.c: 138: cnt++;
  1274                           
  1275                           ;CheckTouchKey.c: 140: KEYCON0 = 0;
  1276                           
  1277                           ;CheckTouchKey.c: 141: KEYCON1 = 0;
  1278                           
  1279                           ;CheckTouchKey.c: 142: KEYCON2 = 1;
  1280                           
  1281                           ;CheckTouchKey.c: 143: KEYCON0 = Table_KeyCap[cnt];
  1282  014A  2166               	fcall	PL2	;call to abstracted procedure
  1283  014B  118A  21A7  118A   	fcall	stringdir
  1284                           
  1285                           ;CheckTouchKey.c: 144: KEYCON1 = Table_KeyChannel[cnt];
  1286  014E  2171               	fcall	PL4	;call to abstracted procedure
  1287  014F  118A  21A7  118A   	fcall	stringdir
  1288  0152  0093               	movwf	19	;volatile
  1289  0153  0000               	nop	;# 
  1290  0154  0000               	nop	;# 
  1291  0155  0000               	nop	;# 
  1292  0156  0000               	nop	;# 
  1293                           
  1294                           ;CheckTouchKey.c: 149: KEYCON0 |= 0x1;
  1295  0157  1683               	bsf	3,5	;RP0=1, select bank1
  1296  0158  1303               	bcf	3,6	;RP1=0, select bank1
  1297  0159  1412               	bsf	18,0	;volatile
  1298  015A                     l1518:	
  1299                           ;CheckTouchKey.c: 150: while(!(KEYCON0&0x80));
  1300                           
  1301  015A  1F92               	btfss	18,7	;volatile
  1302  015B  295A               	goto	l1518
  1303                           
  1304                           ;CheckTouchKey.c: 151: TKdata[6] = ((KEYDATAH<<8) + KEYDATAL);
  1305  015C  0815               	movf	21,w	;volatile
  1306  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1307  015E  00AD               	movwf	_TKdata+13
  1308  015F  1683               	bsf	3,5	;RP0=1, select bank1
  1309  0160  0814               	movf	20,w	;volatile
  1310  0161  1283               	bcf	3,5	;RP0=0, select bank0
  1311  0162  00AC               	movwf	_TKdata+12
  1312                           
  1313                           ;CheckTouchKey.c: 152: KEYCON0 = 0x00;
  1314  0163  1683               	bsf	3,5	;RP0=1, select bank1
  1315  0164  0192               	clrf	18	;volatile
  1316  0165  0008               	return
  1317  0166                     __end_of_Key_Test:	
  1318  0166                     PL2:	
  1319  0166  1683               	bsf	3,5	;RP0=1, select bank1
  1320  0167  0192               	clrf	18	;volatile
  1321  0168  0AF2               	incf	Key_Test@cnt,f
  1322  0169  0192               	clrf	18	;volatile
  1323  016A  0193               	clrf	19	;volatile
  1324  016B  3001               	movlw	1
  1325  016C  0097               	movwf	23	;volatile
  1326  016D  0872               	movf	Key_Test@cnt,w
  1327  016E  3E01               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  1328  016F  0084               	movwf	4
  1329  0170  0008               	return
  1330  0171                     __end_ofPL2:	
  1331  0171                     PL4:	
  1332  0171  0092               	movwf	18	;volatile
  1333  0172  0872               	movf	Key_Test@cnt,w
  1334  0173  3E08               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  1335  0174  0084               	movwf	4
  1336  0175  0008               	return
  1337  0176                     __end_ofPL4:	
  1338                           
  1339                           	psect	text10
  1340  0192                     __ptext10:	
  1341 ;; *************** function _Isr_Timer *****************
  1342 ;; Defined at:
  1343 ;;		line 53 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F289XB¿ª·¢°ü\SCTOUCH-289XB\main.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;		None
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;		None
  1348 ;; Return value:  Size  Location     Type
  1349 ;;                  1    wreg      void 
  1350 ;; Registers used:
  1351 ;;		wreg, status,2, status,0
  1352 ;; Tracked objects:
  1353 ;;		On entry : 0/0
  1354 ;;		On exit  : 300/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1357 ;;      Params:         0       0       0       0
  1358 ;;      Locals:         0       0       0       0
  1359 ;;      Temps:          2       0       0       0
  1360 ;;      Totals:         2       0       0       0
  1361 ;;Total ram usage:        2 bytes
  1362 ;; Hardware stack levels used:    1
  1363 ;; This function calls:
  1364 ;;		Nothing
  1365 ;; This function is called by:
  1366 ;;		Interrupt level 1
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           
  1371                           ;psect for function _Isr_Timer
  1372  0192                     _Isr_Timer:	
  1373                           
  1374                           ;main.c: 55: if(TMR2IF)
  1375  0192  1283               	bcf	3,5	;RP0=0, select bank0
  1376  0193  1303               	bcf	3,6	;RP1=0, select bank0
  1377  0194  1C8C               	btfss	12,1	;volatile
  1378  0195  299F               	goto	i1l2212
  1379                           
  1380                           ;main.c: 56: {
  1381                           ;main.c: 57: TMR2IF = 0;
  1382  0196  108C               	bcf	12,1	;volatile
  1383                           
  1384                           ;main.c: 58: if(++MainTime >= 32)
  1385  0197  3020               	movlw	32
  1386  0198  0AF6               	incf	_MainTime,f	;volatile
  1387  0199  0276               	subwf	_MainTime,w	;volatile
  1388  019A  1C03               	skipc
  1389  019B  29A0               	goto	i1l753
  1390                           
  1391                           ;main.c: 59: {
  1392                           ;main.c: 60: MainTime = 0;
  1393  019C  01F6               	clrf	_MainTime	;volatile
  1394                           
  1395                           ;main.c: 61: B_MainLoop = 1;
  1396  019D  1475               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  1397  019E  29A0               	goto	i1l753
  1398  019F                     i1l2212:	
  1399                           
  1400                           ;main.c: 64: else
  1401                           ;main.c: 65: {
  1402                           ;main.c: 66: PIR1 = 0;
  1403  019F  018C               	clrf	12	;volatile
  1404  01A0                     i1l753:	
  1405  01A0  0871               	movf	??_Isr_Timer+1,w
  1406  01A1  008A               	movwf	10
  1407  01A2  0E70               	swapf	??_Isr_Timer^(0+-128),w
  1408  01A3  0083               	movwf	3
  1409  01A4  0EFE               	swapf	126,f
  1410  01A5  0E7E               	swapf	126,w
  1411  01A6  0009               	retfie
  1412  01A7                     __end_of_Isr_Timer:	
  1413  007E                     btemp	set	126	;btemp
  1414  007E                     wtemp0	set	126
  1415                           
  1416                           	psect	intentry
  1417  0004                     __pintentry:	
  1418                           ;incstack = 0
  1419                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  1420                           
  1421  0004                     interrupt_function:	
  1422  007E                     saved_w	set	btemp
  1423  0004  00FE               	movwf	btemp
  1424  0005  0E03               	swapf	3,w
  1425  0006  00F0               	movwf	??_Isr_Timer
  1426  0007  080A               	movf	10,w
  1427  0008  00F1               	movwf	??_Isr_Timer+1
  1428  0009  118A  2992         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    14
    Data        0
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       7
    BANK0            80      0      32
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _CheckTouchKey->_CheckTouchKey_F
    _CheckTouchKey_F->_I2C_Write1bYTE

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     351
                      _CheckTouchKey
                        _Init_System
                      _Refurbish_Sfr
 ---------------------------------------------------------------------------------
 (1) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0     351
                    _CheckTouchKey_F
 ---------------------------------------------------------------------------------
 (2) _CheckTouchKey_F                                      1     1      0     351
                                              4 COMMON     1     1      0
                     _I2C_Write1bYTE
                     _I2C_WriteStart
                      _I2C_WriteStop
                           _Key_Test
 ---------------------------------------------------------------------------------
 (4) _Key_Test                                             1     1      0     227
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_WriteStop                                        0     0      0       0
                     _I2C_WaitMoment
 ---------------------------------------------------------------------------------
 (3) _I2C_WriteStart                                       0     0      0       0
                     _I2C_WaitMoment
 ---------------------------------------------------------------------------------
 (3) _I2C_Write1bYTE                                       2     2      0      35
                                              2 COMMON     2     2      0
                     _I2C_WaitMoment
 ---------------------------------------------------------------------------------
 (4) _I2C_WaitMoment                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckTouchKey_F
       _I2C_Write1bYTE
         _I2C_WaitMoment
       _I2C_WriteStart
         _I2C_WaitMoment
       _I2C_WriteStop
         _I2C_WaitMoment
       _Key_Test
   _Init_System
   _Refurbish_Sfr

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      0      20       4       40.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      27       8        0.0%
DATA                 0      0      27       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Nov 30 14:27:51 2021

                       pc 0002                        PL2 0166                        PL4 0171  
                      fsr 0004                       l758 01CF                       _RB0 0030  
                     _RB1 0031                       _PR2 0091                       fsr0 0004  
                     indf 0000  __end_of_Table_KeyChannel 01BB                      l2044 0097  
                    l2062 00B2                      l2310 0019                      l1512 0128  
                    l1506 00F6                      l1515 0141                      l1509 010F  
                    l1518 015A                      l1538 009D                      l1539 009E  
                    l1932 00D8                      _PIE1 000D                      _PIE2 0108  
                    _PIR1 000C                      _PIR2 0107                      _main 01CC  
                    btemp 007E                      start 000B               Key_Test@cnt 0072  
           ??_Init_System 0072         ??_CheckTouchKey_F 0074                     ?_main 0070  
                   _T2CON 0012                     i1l753 01A0                     _PORTB 0006  
                   _TRISB 0086            __pbitbssCOMMON 03A8                     pclath 000A  
                   status 0003                     wtemp0 007E           __initialization 000D  
            __end_of_main 01D7          __end_of_Key_Test 0166                    ??_main 0075  
     __end_of_Init_System 0192    __size_of_I2C_WriteStop 0013                    i1l2212 019F  
                  _INTCON 000B                    _OSCCON 0088                    _TMR2IE 0069  
                  _TMR2IF 0061                    _TKdata 0020        __size_of_Isr_Timer 0015  
         I2C_Write1bYTE@i 0073                    saved_w 007E    __size_of_CheckTouchKey 0001  
 __end_of__initialization 0015            __pcstackCOMMON 0070   __size_of_I2C_WaitMoment 0003  
           _I2C_WriteStop 00B2               _Init_System 0176                __end_ofPL2 0171  
              __end_ofPL4 0176         __end_of_Isr_Timer 01A7                __pbssBANK0 0020  
               ?_Key_Test 0070           _CheckTouchKey_F 0019             _CheckTouchKey 0018  
              __pmaintext 01CC   __size_of_I2C_Write1bYTE 0022            ?_I2C_WriteStop 0070  
              __pintentry 0004   __size_of_I2C_WriteStart 0013                   _KEYCON0 0092  
                 _KEYCON1 0093                   _KEYCON2 0097    __size_of_Refurbish_Sfr 0011  
    __end_of_Table_KeyCap 01B4                __stringtab 01A7                ??_Key_Test 0072  
          ?_CheckTouchKey 0070                   __ptext1 01BB                   __ptext2 0176  
                 __ptext3 0018                   __ptext4 0019                   __ptext5 00DB  
                 __ptext6 00B2                   __ptext7 00C5                   __ptext8 0090  
                 __ptext9 00D8                   clrloop0 01D8      end_of_initialization 0015  
 __end_of_CheckTouchKey_F 0090           ??_I2C_WriteStop 0072             _Refurbish_Sfr 01BB  
          _I2C_WaitMoment 00D8           ??_CheckTouchKey 0075    __end_of_I2C_WaitMoment 00DB  
          ?_Refurbish_Sfr 0070            _I2C_Write1bYTE 0090              ?_Init_System 0070  
          _I2C_WriteStart 00C5       start_initialization 000D                 _Isr_Timer 0192  
        ?_CheckTouchKey_F 0070    __end_of_I2C_Write1bYTE 00B2         __size_of_Key_Test 008B  
         ?_I2C_WaitMoment 0070    __end_of_I2C_WriteStart 00D8              _Table_KeyCap 01AD  
             __pbssCOMMON 0076                 ___latbits 0001                ?_Isr_Timer 0070  
         ??_Refurbish_Sfr 0072           ?_I2C_Write1bYTE 0070        I2C_Write1bYTE@data 0072  
         ?_I2C_WriteStart 0070                 __pstrings 01A7                  _KEYDATAH 0095  
                _KEYDATAL 0094         interrupt_function 0004   CheckTouchKey_F@checksum 0074  
               clear_ram0 01D7               __stringbase 01AC      __size_of_Init_System 001C  
              _I2C_SDA_IO 0430                _I2C_SCL_IO 0431               ??_Isr_Timer 0070  
                _MainTime 0076                  _Key_Test 00DB     __end_of_I2C_WriteStop 00C5  
        _Table_KeyChannel 01B4        __end_of__stringtab 01AD                  __ptext10 0192  
        ??_I2C_WaitMoment 0072             __size_of_main 000B     __end_of_CheckTouchKey 0019  
        ??_I2C_Write1bYTE 0072                  intlevel1 0000          ??_I2C_WriteStart 0072  
               stringcode 01A7  __size_of_CheckTouchKey_F 0077                _B_MainLoop 03A8  
              _OPTION_REG 0081                  stringdir 01A7                  stringtab 01A7  
   __end_of_Refurbish_Sfr 01CC  
