---- F:\中微资料\SC8F289XB开发包\SC8F289XB_DEMO_C\SC8F289XB_OPAO_Demo\SC8F289XB_OPAO_Demo.c ----------------------------------------------------------------------
1:                /********************************
2:                //运放初始化模式参考程序
3:                两种方案：1.程序在上电复位的时候会自动初始化运放调节位
4:                2：读取EE30，31地址里面的数据，这种模式不能将30，32地址当作通用EE使用
5:                ***************************************/
6:                
7:                #include <sc.h>           		//调用单片机的头文件
8:                
9:                void Init_System();
10:               
11:               volatile unsigned char rec_eedat,rec_eedatbak;
12:               	
13:               void main(void)            		//主函数,单片机开机后就是从这个函数开始运行
14:               {
15:               	
16:               	Init_System();
  07EC    118A    CLRB	0xA,3
  07ED    27DE    CALL	0x7DE
  07EE    118A    CLRB	0xA,3
17:               	/*******读取EE数据作为修调值************
18:               	EEADR = 30;				//芯片测试时已将运放的调零值放入数据EE中，OPA0存储于30地址
19:               	EEPGD = 0;
20:               	RD = 1;
21:               	asm("nop");
22:               	asm("nop");
23:               	rec_eedat = EEDAT;
24:               	rec_eedatbak = ~EEDATH;
25:               	if (rec_eedat == rec_eedatbak)		//EE的1个字节16位，高8位和低8位为取反值
26:               		OPA0ADJ = EEDAT;
27:               	else
28:               		OPA0ADJ = 0x08;		//如果读取EE数据不对，默认取中间值
29:               	
30:               	EEADR = 31;				//芯片测试时已将运放的调零值放入数据EE中，OPA1存储于31地址
31:               	EEPGD = 0;
32:               	RD = 1;
33:               	asm("nop");
34:               	asm("nop");
35:               	rec_eedat = EEDAT;
36:               	rec_eedatbak = ~EEDATH;
37:               	if (rec_eedat == rec_eedatbak)		//EE的1个字节16位，高8位和低8位为取反值
38:               		OPA1ADJ = EEDAT;
39:               	else
40:               		OPA1ADJ = 0x08;		//如果读取EE数据不对，默认取中间值
41:               	
42:               	
43:               	EECON1 = 0;
44:               	********************************/
45:               	
46:               	OPA0COFM = 0;			//OPA0工作于正常模式
  07EF    1683    SETB	0x3,5
  07F0    1319    CLRB	0x19,6
47:               	OPA1COFM = 0;			//OPA1工作于正常模式
  07F1    131B    CLRB	0x1B,6
48:               							//不操作OPAXADJ，默认使用
49:               							
50:               							
51:               	/********************************************************************
52:               		Bit7 OPA0EN: OPA0使能位； 
53:               			1= 使能OPA0 
54:               			0= 关闭OPA0 
55:               		Bit6 OPA0OEN: OPA0输出使能 
56:               			1= OPA0输出接至I/O口(OPA0O管脚) 
57:               			0= OPA0输出不接至I/O口 
58:               		Bit5 CMP0MODE: 比较器模式选择  
59:               			1= 比较器模式  
60:               			0= 运放模式 
61:               		Bit4 OPA0_ADC: ADC通道使能 
62:               			1= OPA0的输出接至ADC14通道 
63:               			0= OPA0的输出不接至ADC14通道 
64:               		Bit3~Bit1 未用 
65:               		Bit0 OPA0FT: 运放输出内部滤波选择 
66:               			1= OPA0输出内部接滤波电路 
67:               			0= OPA0输出内部不接滤波电路
68:               	**************************************************************************/
69:               	OPA0CON = 0B11010001;	//OPA0使能，，输出接到IO和AN14，接内部滤波
  07F2    30D1    LDIA	0xD1
  07F3    0098    LD	0x18,A
70:               	OPA1CON = 0B11000000;	//OPA1使能，，输出接到IO，只能有一组运放输出接AN14，不接内部滤波
  07F4    30C0    LDIA	0xC0
  07F5    009A    LD	0x1A,A
71:                   while(1)					//死循环,单片机初始化后,将一直运行这个死循环
  07F6    0064    CLRWDT
72:                   {
73:               			asm("clrwdt");
74:               			EECON1 = 0;
  07F7    1683    SETB	0x3,5
  07F8    1303    CLRB	0x3,6
  07F9    018C    CLR	0xC
  07FA    2FF6    JP	0x7F6
75:                   }
76:               }
77:               
78:               
79:               /***********************************************
80:               函数名称：Init_System
81:               函数功能：系统初始化
82:               入口参数：无
83:               出口参数：无
84:               备注：
85:               ************************************************/
86:               void Init_System()
  07DE    0000    NOP
  07DF    0064    CLRWDT
87:               {
88:               	asm("nop");
89:               	asm("clrwdt");
90:               	INTCON = 0;					//系统初始化
  07E0    018B    CLR	0xB
91:               	OSCCON = 0X72;				//配置振荡为8M,开WDT
  07E1    3072    LDIA	0x72
  07E2    1683    SETB	0x3,5
  07E3    1303    CLRB	0x3,6
  07E4    0088    LD	0x8,A
92:               	OPTION_REG = 0;
  07E5    0181    CLR	0x1
93:               	
94:               	TRISA = 0B00111111;			//初始化IO状态，做运放则该口线需做输入
  07E6    303F    LDIA	0x3F
  07E7    0085    LD	0x5,A
95:               	TRISB = 0B00000000;
  07E8    0186    CLR	0x6
96:               
97:               //	PORTA = 0B00000000;
98:               	PORTB = 0B00000000;			//初始化输出
  07E9    1283    CLRB	0x3,5
  07EA    0186    CLR	0x6
  07EB    0008    RET
99:               
100:              }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    2FFB    JP	0x7FB
---- start_initialization ------------------------------------------------------------------
  07FB    01F0    CLR	0x70
  07FC    01F1    CLR	0x71
---- interrupt_function_enter ----------------------------------------------------------
---- common_function ------------------------------------------------------------------
  07FD    0183    CLR	0x3
  07FE    118A    CLRB	0xA,3
  07FF    2FEC    JP	0x7EC
