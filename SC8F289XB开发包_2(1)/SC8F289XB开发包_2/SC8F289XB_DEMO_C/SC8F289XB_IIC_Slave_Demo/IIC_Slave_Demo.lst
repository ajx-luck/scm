---- J:\yun_down\SC8F289XB开发包\SC8F289XB_DEMO_C\SC8F289XB_IIC_Slave_Demo\main.c ----------------------------------------------------------------------
1:                /**********************************************************
2:                
3:                **********************************************************/
4:                
5:                #include <sc.h>
6:                
7:                
8:                
9:                volatile unsigned int   result,result1,result2;
10:               volatile unsigned char IICReadData;
11:               void DelayXms(unsigned char x);
12:               void Init_System();
13:               
14:               
15:               #define  SLAVE_ADRSS   0xa0
16:               
17:               /***********************************************************
18:               函数名称：DelayXms
19:               函数功能：毫秒级非精准延时
20:               入口参数：x - 延时时间
21:               出口参数：
22:               备    注：
23:               ***********************************************************/
24:               void DelayXms(unsigned char x)
25:               {
26:               	unsigned char i,j;
27:               	for(i=x;i>0;i--)
28:               		for(j=153;j>0;j--);
29:               }
30:               
31:               /***********************************************************
32:               main主函数
33:               ***********************************************************/
34:               
35:               
36:               
37:               void main()
38:               {
39:               	Init_System();
  0042    118A    CLRB	0xA,3
  0043    202F    CALL	0x2F
  0044    118A    CLRB	0xA,3
40:               	TRISA |=  0b00000011;  //RA0 RA1输入态，做IIC 引脚时为开漏，需要外接上拉电阻
  0045    3003    LDIA	0x3
  0046    1683    SETB	0x3,5
  0047    0485    ORR	0x5
41:               	
42:               	/********** IICCON ***********************************
43:               	Bit7  IICWCOL:  写冲突检测位。
44:               		主控模式:  
45:               			1= 在IIC不满足开始发送数据的条件下，试图对IICBUF寄存器进行写操作。
46:               			0= 未发生冲突。
47:               		从动模式: 
48:               			1= 正在发送前一个字时，又对IICBUF寄存器进行写操作（必须由软件清零）。
49:               			0= 未发生冲突。
50:               	Bit6  IICOV:  接收溢出指示位。(仅在从动接收模式下有限)
51:               			1=  IICBUF寄存器仍保持前一数据时，又接收到一个新的字节。在发送模式下IICOV
52:               				位可为任意值（该位必须由软件清零）。
53:               			0=  没有溢出。
54:               	Bit5  IICEN:  IIC使能位（必须正确配置这些引脚为输入）。
55:               			1=  使能IIC并将SDA和SCL引脚配置为串行端口引脚。
56:               			0=  禁止IIC并将这些引脚配置为I/O端口引脚。
57:               	Bit4  IICCKP:  时钟极性选择位。
58:               		在IIC从动模式下:  SCK释放控制。
59:               			1 = 使能时钟。
60:               			0 = 保持时钟线为低电平（时钟延长）（用于确保数据建立时间）。
61:               		在IIC主控模式下:  在此模式下未使用。
62:               	Bit3~Bit2  IICTOS[1:0]:  IIC从动模式超时选择
63:               		00=  禁止IIC从动超时功能；
64:               		01=  使能IIC从动超时功能，超时时间为16ms，超时后复位IIC模块；
65:               		10=  使能IIC从动超时功能，超时时间为32ms，超时后复位IIC模块；
66:               		11=  使能IIC从动超时功能，超时时间为64ms，超时后复位IIC模块；
67:               	Bit1~Bit0  IICM<1:0>:  IIC模式选择位。
68:               		00=  IIC主控模式，时钟=  FCPU / (IICADD+4)；
69:               		01=  IIC从动模式，7位地址，不响应起始位和停止位中断；
70:               		10=  IIC从动模式，7位地址，并允许起始位和停止位中断；
71:               		11=  允许操作IICMSK寄存器
72:               	*************************************************/
73:               	IICCON =  0B00100001;  // IIC 使能  从机模式
  0048    3021    LDIA	0x21
  0049    1283    CLRB	0x3,5
  004A    1703    SETB	0x3,6
  004B    008C    LD	0xC,A
74:               	
75:                   IICADD = 0xa0;          // 
  004C    30A0    LDIA	0xA0
  004D    0089    LD	0x9,A
76:               	IICIE =1;
  004E    1608    SETB	0x8,4
77:               	PEIE =1;
  004F    170B    SETB	0xB,6
78:                   GIE =1;	
  0050    178B    SETB	0xB,7
79:               
80:               
81:               	while(1)
82:               	{
  0051    2851    JP	0x51
83:               
84:               	}
85:               }
86:               
87:               
88:               
89:               /***********************************************
90:               函数名称：Init_System
91:               函数功能：系统初始化
92:               入口参数：无
93:               出口参数：无
94:               备注：
95:               ************************************************/
96:               void Init_System()
  002F    0000    NOP
  0030    0064    CLRWDT
97:               {
98:               	asm("nop");
99:               	asm("clrwdt");
100:              	INTCON = 0;					//系统初始化
  0031    018B    CLR	0xB
101:              	OSCCON = 0X70;				//配置振荡为8M,关 WDT
  0032    3070    LDIA	0x70
  0033    1683    SETB	0x3,5
  0034    1303    CLRB	0x3,6
  0035    0088    LD	0x8,A
102:              	OPTION_REG = 0;
  0036    0181    CLR	0x1
103:              	
104:                  WPUA  = 0B00000000;			//初始化上拉
  0037    1283    CLRB	0x3,5
  0038    0187    CLR	0x7
105:                  WPUB  = 0B00001000;			
  0039    3008    LDIA	0x8
  003A    0088    LD	0x8,A
106:                
107:               
108:              	TRISA = 0B00000000;			//初始化IO状态
  003B    1683    SETB	0x3,5
  003C    0185    CLR	0x5
109:              	TRISB = 0B00001000;
  003D    0086    LD	0x6,A
110:              
111:              	PORTA = 0B00000000;
  003E    1283    CLRB	0x3,5
  003F    0185    CLR	0x5
112:              	PORTB = 0B00000000;			//初始化输出
  0040    0186    CLR	0x6
  0041    0008    RET
113:              
114:              }
115:              
116:              /***********************************************
117:              函数名称：
118:              函数功能：IIC中断服务
119:              入口参数：无
120:              出口参数：无
121:              备注：
122:              ************************************************/
123:              void interrupt IIC_Isr()
124:              {
125:              	
126:              	if(IICIF==1)
  0017    1283    CLRB	0x3,5
  0018    1703    SETB	0x3,6
  0019    1E07    SNZB	0x7,4
  001A    2828    JP	0x28
127:              	{
128:              		IICIF =0;
  001B    1207    CLRB	0x7,4
129:              	
130:              		
131:              		if(RW==1)   //发送数据
  001C    1D0F    SNZB	0xF,2
  001D    2821    JP	0x21
132:              		{
133:              			IICBUF = 0x55;
  001E    3055    LDIA	0x55
  001F    008E    LD	0xE,A
134:              		}
  0020    2827    JP	0x27
135:              		else
136:              		{
137:              			if(DA==0)  //地址匹配
  0021    1A8F    SZB	0xF,5
  0022    2825    JP	0x25
138:              			{
139:              				IICBUF;
  0023    080E    LD	A,0xE
140:              				
141:              			}
  0024    2827    JP	0x27
142:              			else
143:              			{
144:              				
145:              			  IICReadData = IICBUF;  //接收数据
  0025    080E    LD	A,0xE
  0026    00F6    LD	0x76,A
146:              			}
147:              		}
148:              			
149:              		
150:              		
151:              		IICCKP =1;
  0027    160C    SETB	0xC,4
  0028    0878    LD	A,0x78
  0029    008A    LD	0xA,A
  002A    0E77    SWAPA	0x77
  002B    0083    LD	0x3,A
  002C    0EFE    SWAPR	0x7E
  002D    0E7E    SWAPA	0x7E
  002E    0009    RETI
152:              	
153:              	}
154:              }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280B    JP	0xB
  000B    118A    CLRB	0xA,3
  000C    280D    JP	0xD
---- start_initialization ------------------------------------------------------------------
  000D    01F0    CLR	0x70
  000E    01F1    CLR	0x71
  000F    01F2    CLR	0x72
  0010    01F3    CLR	0x73
  0011    01F4    CLR	0x74
  0012    01F5    CLR	0x75
  0013    01F6    CLR	0x76
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F7    LD	0x77,A
  0007    080A    LD	A,0xA
  0008    00F8    LD	0x78,A
  0009    118A    CLRB	0xA,3
  000A    2817    JP	0x17
---- common_function ------------------------------------------------------------------
  0014    0183    CLR	0x3
  0015    118A    CLRB	0xA,3
  0016    2842    JP	0x42
