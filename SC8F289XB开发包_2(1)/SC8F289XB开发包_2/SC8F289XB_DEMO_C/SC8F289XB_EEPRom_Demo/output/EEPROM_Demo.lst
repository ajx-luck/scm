

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 22 14:53:06 2022

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F2892B
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	_tmp4_text,global,class=CODE,delta=2
     6                           	psect	_tmp3_text,global,class=CODE,delta=2
     7                           	psect	_tmp2_text,global,class=CODE,delta=2
     8                           	psect	_tmp1_text,global,class=CODE,delta=2
     9                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	pa_nodes0,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0F03                     _tmp4_absaddr	set	3843
    55  0F02                     _tmp3_absaddr	set	3842
    56  0F01                     _tmp2_absaddr	set	3841
    57  0F00                     _tmp1_absaddr	set	3840
    58  0F03                     _tmp4_absaddr	set	3843
    59                           
    60                           	psect	strings
    61  0000                     __pstrings:	
    62                           
    63                           	psect	_tmp4_text
    64  0F03                     __p_tmp4_text:	
    65  0F03                     _tmp4:	
    66  0F03  34AA               	retlw	170
    67  0F04                     __end_of_tmp4:	
    68  0F02                     _tmp3_absaddr	set	3842
    69                           
    70                           	psect	_tmp3_text
    71  0F02                     __p_tmp3_text:	
    72  0F02                     _tmp3:	
    73  0F02  34AA               	retlw	170
    74  0F03                     __end_of_tmp3:	
    75  0F01                     _tmp2_absaddr	set	3841
    76                           
    77                           	psect	_tmp2_text
    78  0F01                     __p_tmp2_text:	
    79  0F01                     _tmp2:	
    80  0F01  34AA               	retlw	170
    81  0F02                     __end_of_tmp2:	
    82  0F00                     _tmp1_absaddr	set	3840
    83                           
    84                           	psect	_tmp1_text
    85  0F00                     __p_tmp1_text:	
    86  0F00                     _tmp1:	
    87  0F00  34AA               	retlw	170
    88  0F01                     __end_of_tmp1:	
    89                           
    90                           	psect	nvCOMMON
    91  007B                     __pnvCOMMON:	
    92  007B                     _datanum:	
    93  007B                     	ds	1
    94  005F                     _GIE	set	95
    95  0028                     _RA0	set	40
    96  0029                     _RA1	set	41
    97  0096                     _EEADRH	set	150
    98  0090                     _EEADR	set	144
    99  008F                     _EEDATH	set	143
   100  008E                     _EEDAT	set	142
   101  008D                     _EECON2	set	141
   102  0085                     _TRISA	set	133
   103  0460                     _RD	set	1120
   104  0461                     _WR	set	1121
   105  0462                     _WREN	set	1122
   106  0467                     _EEPGD	set	1127
   107                           
   108                           	psect	cinit
   109  07F7                     start_initialization:	
   110                           ; #config settings
   111                           
   112  07F7                     __initialization:	
   113                           
   114                           ; Clear objects allocated to COMMON
   115  07F7  01F0               	clrf	__pbssCOMMON& (0+127)
   116  07F8  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   117  07F9  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   118  07FA  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   119  07FB  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   120  07FC  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   121  07FD                     end_of_initialization:	
   122                           ;End of C runtime variable initialization code
   123                           
   124  07FD                     __end_of__initialization:	
   125  07FD  0183               	clrf	3
   126  07FE  118A  2FA1         	ljmp	_main	;jump to C main() function
   127                           
   128                           	psect	bssCOMMON
   129  0070                     __pbssCOMMON:	
   130  0070                     _read_data:	
   131  0070                     	ds	2
   132  0072                     _t:	
   133  0072                     	ds	2
   134  0074                     _read_rom_data:	
   135  0074                     	ds	1
   136  0075                     _data:	
   137  0075                     	ds	1
   138                           
   139                           	psect	cstackCOMMON
   140  0076                     __pcstackCOMMON:	
   141  0076                     ?_Memory_Write:	
   142  0076                     ?_Memory_Read:	
   143                           ; 1 bytes @ 0x0
   144                           
   145  0076                     ??_Memory_Read:	
   146                           ; 1 bytes @ 0x0
   147                           
   148  0076                     ?_Program_Read:	
   149                           ; 1 bytes @ 0x0
   150                           
   151  0076                     ?_main:	
   152                           ; 1 bytes @ 0x0
   153                           
   154  0076                     Memory_Write@Value:	
   155                           ; 1 bytes @ 0x0
   156                           
   157  0076                     Program_Read@P_Addr:	
   158                           ; 2 bytes @ 0x0
   159                           
   160                           
   161                           ; 2 bytes @ 0x0
   162  0076                     	ds	2
   163  0078                     ??_Memory_Write:	
   164  0078                     ??_Program_Read:	
   165                           ; 1 bytes @ 0x2
   166                           
   167  0078                     Memory_Write@Addr:	
   168                           ; 1 bytes @ 0x2
   169                           
   170  0078                     Memory_Read@Addr:	
   171                           ; 1 bytes @ 0x2
   172                           
   173                           
   174                           ; 1 bytes @ 0x2
   175  0078                     	ds	1
   176  0079                     ??_main:	
   177  0079                     main@read_addr:	
   178                           ; 1 bytes @ 0x3
   179                           
   180                           
   181                           ; 2 bytes @ 0x3
   182  0079                     	ds	2
   183                           
   184                           	psect	maintext
   185  07A1                     __pmaintext:	
   186 ;;
   187 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   188 ;;
   189 ;; *************** function _main *****************
   190 ;; Defined at:
   191 ;;		line 23 in file "J:\yun_down\SC8F289XB¿ª·¢°ü\SC8F289XB_DEMO_C\SC8F289XB_EEPRom_Demo\main.c"
   192 ;; Parameters:    Size  Location     Type
   193 ;;		None
   194 ;; Auto vars:     Size  Location     Type
   195 ;;  read_addr       2    3[COMMON] unsigned int 
   196 ;; Return value:  Size  Location     Type
   197 ;;                  1    wreg      void 
   198 ;; Registers used:
   199 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   200 ;; Tracked objects:
   201 ;;		On entry : B00/0
   202 ;;		On exit  : 300/0
   203 ;;		Unchanged: 0/0
   204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   205 ;;      Params:         0       0       0       0
   206 ;;      Locals:         2       0       0       0
   207 ;;      Temps:          0       0       0       0
   208 ;;      Totals:         2       0       0       0
   209 ;;Total ram usage:        2 bytes
   210 ;; Hardware stack levels required when called:    1
   211 ;; This function calls:
   212 ;;		_Memory_Read
   213 ;;		_Memory_Write
   214 ;;		_Program_Read
   215 ;; This function is called by:
   216 ;;		Startup code after reset
   217 ;; This function uses a non-reentrant model
   218 ;;
   219                           
   220                           
   221                           ;psect for function _main
   222  07A1                     _main:	
   223                           
   224                           ;incstack = 0
   225                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   226  07A1  0000               	nop	;# 
   227  07A2  0064               	clrwdt	;# 
   228                           
   229                           ;main.c: 27: TRISA = 0;
   230  07A3  1683               	bsf	3,5	;RP0=1, select bank1
   231  07A4  1303               	bcf	3,6	;RP1=0, select bank1
   232  07A5  0185               	clrf	5	;volatile
   233  07A6                     L1:	
   234                           
   235                           ;main.c: 28: data=0;
   236  07A6  01F5               	clrf	_data	;volatile
   237  07A7                     l771:	
   238                           ;main.c: 47: while(1)
   239                           
   240  07A7  0064               	clrwdt	;# 
   241                           
   242                           ;main.c: 50: for(datanum=0;datanum<32;datanum++)
   243  07A8  01FB               	clrf	_datanum	;volatile
   244  07A9  3020               	movlw	32
   245  07AA  027B               	subwf	_datanum,w	;volatile
   246  07AB  1803               	btfsc	3,0
   247  07AC  2FC5               	goto	l1296
   248  07AD                     l1286:	
   249                           
   250                           ;main.c: 51: {
   251                           ;main.c: 52: Memory_Write(datanum,0x55aa);
   252  07AD  30AA               	movlw	170
   253  07AE  00F6               	movwf	Memory_Write@Value
   254  07AF  3055               	movlw	85
   255  07B0  00F7               	movwf	Memory_Write@Value+1
   256  07B1  087B               	movf	_datanum,w	;volatile
   257  07B2  118A  2785  118A   	fcall	_Memory_Write
   258                           
   259                           ;main.c: 53: Memory_Read(datanum);
   260  07B5  087B               	movf	_datanum,w	;volatile
   261  07B6  118A  2770  118A   	fcall	_Memory_Read
   262                           
   263                           ;main.c: 54: if(0x55aa == read_data)
   264  07B9  30AA               	movlw	170
   265  07BA  0670               	xorwf	_read_data,w	;volatile
   266  07BB  3055               	movlw	85
   267  07BC  1903               	skipnz
   268  07BD  0671               	xorwf	_read_data+1,w	;volatile
   269  07BE  1903               	btfsc	3,2
   270                           
   271                           ;main.c: 55: {
   272                           ;main.c: 56: data++;
   273  07BF  0AF5               	incf	_data,f	;volatile
   274  07C0  0AFB               	incf	_datanum,f	;volatile
   275  07C1  3020               	movlw	32
   276  07C2  027B               	subwf	_datanum,w	;volatile
   277  07C3  1C03               	skipc
   278  07C4  2FAD               	goto	l1286
   279  07C5                     l1296:	
   280                           
   281                           ;main.c: 57: }
   282                           ;main.c: 59: }
   283                           ;main.c: 60: if(data == 32)
   284  07C5  3020               	movlw	32
   285  07C6  0675               	xorwf	_data,w	;volatile
   286  07C7  1D03               	btfss	3,2
   287  07C8  2FCE               	goto	l775
   288                           
   289                           ;main.c: 61: {
   290                           ;main.c: 62: RA0 = 1;
   291  07C9  1283               	bcf	3,5	;RP0=0, select bank0
   292  07CA  1303               	bcf	3,6	;RP1=0, select bank0
   293  07CB  1405               	bsf	5,0	;volatile
   294                           
   295                           ;main.c: 63: data=0;
   296  07CC  01F5               	clrf	_data	;volatile
   297                           
   298                           ;main.c: 64: }
   299  07CD  2FD1               	goto	l1302
   300  07CE                     l775:	
   301                           
   302                           ;main.c: 65: else RA0 = 0;
   303  07CE  1283               	bcf	3,5	;RP0=0, select bank0
   304  07CF  1303               	bcf	3,6	;RP1=0, select bank0
   305  07D0  1005               	bcf	5,0	;volatile
   306  07D1                     l1302:	
   307                           
   308                           ;main.c: 67: for(datanum=0;datanum<4;datanum++)
   309  07D1  01FB               	clrf	_datanum	;volatile
   310  07D2  3004               	movlw	4
   311  07D3  027B               	subwf	_datanum,w	;volatile
   312  07D4  1803               	btfsc	3,0
   313  07D5  2FED               	goto	l1318
   314  07D6                     l1308:	
   315                           
   316                           ;main.c: 68: {
   317                           ;main.c: 69: unsigned int read_addr = 0x0f00;
   318  07D6  300F               	movlw	15
   319  07D7  01F9               	clrf	main@read_addr
   320  07D8  00FA               	movwf	main@read_addr+1
   321                           
   322                           ;main.c: 70: read_addr = read_addr + datanum;
   323  07D9  087B               	movf	_datanum,w	;volatile
   324  07DA  07F9               	addwf	main@read_addr,f
   325  07DB  1803               	skipnc
   326  07DC  0AFA               	incf	main@read_addr+1,f
   327                           
   328                           ;main.c: 71: Program_Read(read_addr);
   329  07DD  087A               	movf	main@read_addr+1,w
   330  07DE  00F7               	movwf	Program_Read@P_Addr+1
   331  07DF  0879               	movf	main@read_addr,w
   332  07E0  00F6               	movwf	Program_Read@P_Addr
   333  07E1  118A  2762  118A   	fcall	_Program_Read
   334                           
   335                           ;main.c: 72: if(0xaa == read_rom_data)
   336  07E4  30AA               	movlw	170
   337  07E5  0674               	xorwf	_read_rom_data,w	;volatile
   338  07E6  1903               	btfsc	3,2
   339                           
   340                           ;main.c: 73: {
   341                           ;main.c: 74: data++;
   342  07E7  0AF5               	incf	_data,f	;volatile
   343  07E8  0AFB               	incf	_datanum,f	;volatile
   344  07E9  3004               	movlw	4
   345  07EA  027B               	subwf	_datanum,w	;volatile
   346  07EB  1C03               	skipc
   347  07EC  2FD6               	goto	l1308
   348  07ED                     l1318:	
   349                           
   350                           ;main.c: 75: }
   351                           ;main.c: 77: }
   352                           ;main.c: 78: if(data == 4)
   353  07ED  3004               	movlw	4
   354  07EE  0675               	xorwf	_data,w	;volatile
   355  07EF  1D03               	btfss	3,2
   356  07F0  2FF4               	goto	l780
   357                           
   358                           ;main.c: 79: {
   359                           ;main.c: 80: RA1 = 1;
   360  07F1  1283               	bcf	3,5	;RP0=0, select bank0
   361  07F2  1485               	bsf	5,1	;volatile
   362  07F3  2FA6               	goto	L1
   363  07F4                     l780:	
   364                           ;main.c: 82: }
   365                           
   366                           ;main.c: 81: data=0;
   367                           
   368                           
   369                           ;main.c: 83: else RA1 = 0;
   370  07F4  1283               	bcf	3,5	;RP0=0, select bank0
   371  07F5  1085               	bcf	5,1	;volatile
   372  07F6  2FA7               	goto	l771
   373  07F7                     __end_of_main:	
   374                           
   375                           	psect	text1
   376  0762                     __ptext1:	
   377 ;; *************** function _Program_Read *****************
   378 ;; Defined at:
   379 ;;		line 152 in file "J:\yun_down\SC8F289XB¿ª·¢°ü\SC8F289XB_DEMO_C\SC8F289XB_EEPRom_Demo\main.c"
   380 ;; Parameters:    Size  Location     Type
   381 ;;  P_Addr          2    0[COMMON] unsigned int 
   382 ;; Auto vars:     Size  Location     Type
   383 ;;		None
   384 ;; Return value:  Size  Location     Type
   385 ;;                  1    wreg      void 
   386 ;; Registers used:
   387 ;;		wreg
   388 ;; Tracked objects:
   389 ;;		On entry : 200/0
   390 ;;		On exit  : 300/100
   391 ;;		Unchanged: 0/0
   392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   393 ;;      Params:         2       0       0       0
   394 ;;      Locals:         0       0       0       0
   395 ;;      Temps:          0       0       0       0
   396 ;;      Totals:         2       0       0       0
   397 ;;Total ram usage:        2 bytes
   398 ;; Hardware stack levels used:    1
   399 ;; This function calls:
   400 ;;		Nothing
   401 ;; This function is called by:
   402 ;;		_main
   403 ;; This function uses a non-reentrant model
   404 ;;
   405                           
   406                           
   407                           ;psect for function _Program_Read
   408  0762                     _Program_Read:	
   409                           
   410                           ;main.c: 155: EEADR = P_Addr & 0x00ff;
   411                           
   412                           ;incstack = 0
   413                           ; Regs used in _Program_Read: [wreg]
   414  0762  0876               	movf	Program_Read@P_Addr,w
   415  0763  1683               	bsf	3,5	;RP0=1, select bank1
   416  0764  0090               	movwf	16	;volatile
   417                           
   418                           ;main.c: 156: EEADRH = (P_Addr & 0xff00)>>8;
   419  0765  0877               	movf	Program_Read@P_Addr+1,w
   420  0766  0096               	movwf	22	;volatile
   421                           
   422                           ;main.c: 158: EEPGD = 1;
   423  0767  178C               	bsf	12,7	;volatile
   424                           
   425                           ;main.c: 160: RD=1;
   426  0768  140C               	bsf	12,0	;volatile
   427  0769  0000               	nop	;# 
   428  076A  0000               	nop	;# 
   429                           
   430                           ;main.c: 164: read_rom_data = EEDAT;
   431  076B  1683               	bsf	3,5	;RP0=1, select bank1
   432  076C  1303               	bcf	3,6	;RP1=0, select bank1
   433  076D  080E               	movf	14,w	;volatile
   434  076E  00F4               	movwf	_read_rom_data	;volatile
   435  076F  0008               	return
   436  0770                     __end_of_Program_Read:	
   437                           
   438                           	psect	text2
   439  0785                     __ptext2:	
   440 ;; *************** function _Memory_Write *****************
   441 ;; Defined at:
   442 ;;		line 97 in file "J:\yun_down\SC8F289XB¿ª·¢°ü\SC8F289XB_DEMO_C\SC8F289XB_EEPRom_Demo\main.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;  Addr            1    wreg     unsigned char 
   445 ;;  Value           2    0[COMMON] unsigned int 
   446 ;; Auto vars:     Size  Location     Type
   447 ;;  Addr            1    2[COMMON] unsigned char 
   448 ;; Return value:  Size  Location     Type
   449 ;;                  1    wreg      void 
   450 ;; Registers used:
   451 ;;		wreg
   452 ;; Tracked objects:
   453 ;;		On entry : 0/100
   454 ;;		On exit  : 300/100
   455 ;;		Unchanged: 0/0
   456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   457 ;;      Params:         2       0       0       0
   458 ;;      Locals:         1       0       0       0
   459 ;;      Temps:          0       0       0       0
   460 ;;      Totals:         3       0       0       0
   461 ;;Total ram usage:        3 bytes
   462 ;; Hardware stack levels used:    1
   463 ;; This function calls:
   464 ;;		Nothing
   465 ;; This function is called by:
   466 ;;		_main
   467 ;; This function uses a non-reentrant model
   468 ;;
   469                           
   470                           
   471                           ;psect for function _Memory_Write
   472  0785                     _Memory_Write:	
   473                           
   474                           ;incstack = 0
   475                           ; Regs used in _Memory_Write: [wreg]
   476                           ;Memory_Write@Addr stored from wreg
   477  0785  00F8               	movwf	Memory_Write@Addr
   478  0786  0064               	clrwdt	;# 
   479                           
   480                           ;main.c: 101: EEADR = Addr;
   481  0787  1683               	bsf	3,5	;RP0=1, select bank1
   482  0788  1303               	bcf	3,6	;RP1=0, select bank1
   483  0789  0090               	movwf	16	;volatile
   484                           
   485                           ;main.c: 102: EEPGD = 0;
   486  078A  138C               	bcf	12,7	;volatile
   487                           
   488                           ;main.c: 104: EEDAT = Value & 0x00ff;
   489  078B  0876               	movf	Memory_Write@Value,w
   490  078C  008E               	movwf	14	;volatile
   491                           
   492                           ;main.c: 105: EEDATH = (Value & 0xff00)>>8;
   493  078D  0877               	movf	Memory_Write@Value+1,w
   494  078E  008F               	movwf	15	;volatile
   495                           
   496                           ;main.c: 107: WREN = 1;
   497  078F  150C               	bsf	12,2	;volatile
   498  0790                     l1262:	
   499                           
   500                           ;main.c: 108: GIE = 0;
   501  0790  138B               	bcf	11,7	;volatile
   502                           
   503                           ;main.c: 110: while(GIE) GIE = 0;
   504  0791  1B8B               	btfsc	11,7	;volatile
   505  0792  2F90               	goto	l1262
   506                           
   507                           ;main.c: 112: EECON2 = 0x55;
   508  0793  3055               	movlw	85
   509  0794  1683               	bsf	3,5	;RP0=1, select bank1
   510  0795  1303               	bcf	3,6	;RP1=0, select bank1
   511  0796  008D               	movwf	13	;volatile
   512                           
   513                           ;main.c: 113: EECON2 = 0xaa;
   514  0797  30AA               	movlw	170
   515  0798  008D               	movwf	13	;volatile
   516                           
   517                           ;main.c: 114: WR = 1;
   518  0799  148C               	bsf	12,1	;volatile
   519  079A  0000               	nop	;# 
   520  079B  0000               	nop	;# 
   521                           
   522                           ;main.c: 117: WREN = 0;
   523  079C  1683               	bsf	3,5	;RP0=1, select bank1
   524  079D  1303               	bcf	3,6	;RP1=0, select bank1
   525  079E  110C               	bcf	12,2	;volatile
   526                           
   527                           ;main.c: 118: GIE = 1;
   528  079F  178B               	bsf	11,7	;volatile
   529  07A0  0008               	return
   530  07A1                     __end_of_Memory_Write:	
   531                           
   532                           	psect	text3
   533  0770                     __ptext3:	
   534 ;; *************** function _Memory_Read *****************
   535 ;; Defined at:
   536 ;;		line 130 in file "J:\yun_down\SC8F289XB¿ª·¢°ü\SC8F289XB_DEMO_C\SC8F289XB_EEPRom_Demo\main.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;  Addr            1    wreg     unsigned char 
   539 ;; Auto vars:     Size  Location     Type
   540 ;;  Addr            1    2[COMMON] unsigned char 
   541 ;; Return value:  Size  Location     Type
   542 ;;                  1    wreg      void 
   543 ;; Registers used:
   544 ;;		wreg, btemp+1
   545 ;; Tracked objects:
   546 ;;		On entry : 300/100
   547 ;;		On exit  : 300/100
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   550 ;;      Params:         0       0       0       0
   551 ;;      Locals:         1       0       0       0
   552 ;;      Temps:          2       0       0       0
   553 ;;      Totals:         3       0       0       0
   554 ;;Total ram usage:        3 bytes
   555 ;; Hardware stack levels used:    1
   556 ;; This function calls:
   557 ;;		Nothing
   558 ;; This function is called by:
   559 ;;		_main
   560 ;; This function uses a non-reentrant model
   561 ;;
   562                           
   563                           
   564                           ;psect for function _Memory_Read
   565  0770                     _Memory_Read:	
   566                           
   567                           ;incstack = 0
   568                           ; Regs used in _Memory_Read: [wreg+btemp+1]
   569                           ;Memory_Read@Addr stored from wreg
   570  0770  00F8               	movwf	Memory_Read@Addr
   571                           
   572                           ;main.c: 133: EEADR = Addr;
   573  0771  0090               	movwf	16	;volatile
   574                           
   575                           ;main.c: 134: EEPGD = 0;
   576  0772  138C               	bcf	12,7	;volatile
   577                           
   578                           ;main.c: 136: RD=1;
   579  0773  140C               	bsf	12,0	;volatile
   580  0774  0000               	nop	;# 
   581  0775  0000               	nop	;# 
   582                           
   583                           ;main.c: 140: read_data=EEDAT;
   584  0776  1683               	bsf	3,5	;RP0=1, select bank1
   585  0777  1303               	bcf	3,6	;RP1=0, select bank1
   586  0778  080E               	movf	14,w	;volatile
   587  0779  00F0               	movwf	_read_data	;volatile
   588  077A  01F1               	clrf	_read_data+1	;volatile
   589                           
   590                           ;main.c: 141: read_data= read_data | (int)(EEDATH<<8);
   591  077B  080F               	movf	15,w	;volatile
   592  077C  00F6               	movwf	??_Memory_Read
   593  077D  01F7               	clrf	??_Memory_Read+1
   594  077E  00F7               	movwf	??_Memory_Read+1
   595  077F  01F6               	clrf	??_Memory_Read
   596  0780  0876               	movf	??_Memory_Read,w
   597  0781  04F0               	iorwf	_read_data,f	;volatile
   598  0782  0877               	movf	??_Memory_Read+1,w
   599  0783  04F1               	iorwf	_read_data+1,f	;volatile
   600  0784  0008               	return
   601  0785                     __end_of_Memory_Read:	
   602  007E                     btemp	set	126	;btemp
   603  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      12
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Memory_Read
    _main->_Memory_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     257
                                              3 COMMON     2     2      0
                        _Memory_Read
                       _Memory_Write
                       _Program_Read
 ---------------------------------------------------------------------------------
 (1) _Program_Read                                         2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Memory_Write                                         3     1      2     120
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Memory_Read                                          3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Memory_Read
   _Memory_Write
   _Program_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0       C       8        0.0%
DATA                 0      0       C       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 22 14:53:06 2022

                      _t 0072                       _RD 0460                       _WR 0461  
                    l771 07A7                      l780 07F4                      l775 07CE  
                    _GIE 005F                      _RA0 0028                      _RA1 0029  
                   l1302 07D1                     l1308 07D6                     l1262 0790  
                   l1318 07ED                     l1286 07AD                     l1296 07C5  
                   _WREN 0462                     _data 0075                     _main 07A1  
                   _tmp1 0F00                     _tmp2 0F01                     _tmp3 0F02  
                   _tmp4 0F03                     btemp 007E                     start 0000  
                  ?_main 0076                    _EEADR 0090                    _EEDAT 008E  
                  _EEPGD 0467                    _TRISA 0085            ??_Memory_Read 0076  
                  status 0003                    wtemp0 007E          __initialization 07F7  
           __end_of_main 07F7             __end_of_tmp1 0F01             __end_of_tmp2 0F02  
           __end_of_tmp3 0F03             __end_of_tmp4 0F04            ?_Memory_Write 0076  
                 ??_main 0079                   _EEADRH 0096                   _EEDATH 008F  
                 _EECON2 008D      __end_of_Memory_Read 0785            main@read_addr 0079  
         ??_Memory_Write 0078  __end_of__initialization 07FD           __pcstackCOMMON 0076  
           __p_tmp1_text 0F00             __p_tmp2_text 0F01             __p_tmp3_text 0F02  
           __p_tmp4_text 0F03              _Memory_Read 0770               __pnvCOMMON 007B  
             __pmaintext 07A1       Program_Read@P_Addr 0076            _read_rom_data 0074  
   __end_of_Memory_Write 07A1                  _datanum 007B                  __ptext1 0762  
                __ptext2 0785                  __ptext3 0770            ?_Program_Read 0076  
   end_of_initialization 07FD           ??_Program_Read 0078        Memory_Write@Value 0076  
    start_initialization 07F7    __size_of_Memory_Write 001C             ?_Memory_Read 0076  
           _Memory_Write 0785              __pbssCOMMON 0070                ___latbits 0001  
   __end_of_Program_Read 0770                __pstrings 0000                _read_data 0070  
       Memory_Write@Addr 0078             _tmp1_absaddr 0F00             _tmp2_absaddr 0F01  
   __size_of_Memory_Read 0015             _tmp3_absaddr 0F02             _tmp4_absaddr 0F03  
        Memory_Read@Addr 0078    __size_of_Program_Read 000E            __size_of_main 0056  
           _Program_Read 0762  
