---- F:\中微资料\SC8F289XB开发包\SC8F289XB_DEMO_C\SC8F289XB_Sleep_Demo\SC8F289XB_Sleep_Demo.c ----------------------------------------------------------------------
1:                /*-------------------------------------------
2:                
3:                程序名称：休眠模式及唤醒程序
4:                日期版本：2020/10/20 <V1.0>
5:                
6:                备注：WDT已被禁止，休眠模式下利用PORTA,PORTB电平变化唤醒 
7:                
8:                *本程序由 &应用支持部& 编写整理
9:                -------------------------------------------*/
10:               
11:               
12:               #include <sc.h>
13:               
14:               
15:               void Init_System();
16:               void Sleep_Mode();
17:               
18:               void main()
19:               {
20:               	Init_System();
  006F    118A    CLRB	0xA,3
  0070    204A    CALL	0x4A
  0071    118A    CLRB	0xA,3
21:               	while(1)
22:               	{
23:               		Sleep_Mode();
  0072    118A    CLRB	0xA,3
  0073    2010    CALL	0x10
  0074    118A    CLRB	0xA,3
  0075    2872    JP	0x72
24:               	}
25:               }
26:               
27:               
28:               /***********************************************
29:               函数名称：Sleep_Mode
30:               函数功能：进入休眠模式
31:               入口参数：无
32:               出口参数：无
33:               备注：
34:               ************************************************/
35:               void Sleep_Mode()
36:               {
37:               	INTCON = 0;		
  0010    018B    CLR	0xB
38:               	
39:               	OPTION_REG = 0;
  0011    1683    SETB	0x3,5
  0012    0181    CLR	0x1
40:               
41:               	TRISA = 0B00000001; 		//关闭所有输出，RA0口做唤醒输入
  0013    3001    LDIA	0x1
  0014    0085    LD	0x5,A
42:               	WPUA  = 0B00000001;
  0015    1283    CLRB	0x3,5
  0016    0087    LD	0x7,A
43:               	
44:               	TRISB = 0B00001000;			//关闭所有输出，RB3口做唤醒输入
  0017    3008    LDIA	0x8
  0018    1683    SETB	0x3,5
  0019    0086    LD	0x6,A
45:               	PORTB = 0B00000000;
  001A    1283    CLRB	0x3,5
  001B    0186    CLR	0x6
46:               	WPUB  = 0B00001000;		
  001C    0088    LD	0x8,A
47:                  			
48:                  	ADCON0 = 0;					//关闭所有模块
  001D    1683    SETB	0x3,5
  001E    019D    CLR	0x1D
49:               	ADCON1 = 0;
  001F    019C    CLR	0x1C
50:               	KEYCON0 = 0;
  0020    0192    CLR	0x12
51:               	KEYCON2 = 0;
  0021    0197    CLR	0x17
52:               	PWMCON0 = 0;
  0022    1283    CLRB	0x3,5
  0023    0193    CLR	0x13
53:               	
54:               	OPA0CON = 0;
  0024    1683    SETB	0x3,5
  0025    0198    CLR	0x18
55:               	OPA1CON = 0;
  0026    019A    CLR	0x1A
56:               	OSCCON = 0X70;				//配置振荡为8M,关闭WDT，需注意芯片工程选项里WDT必须选为DISABLE,否则无法软件关掉WDT
  0027    3070    LDIA	0x70
  0028    0088    LD	0x8,A
57:               	
58:               	IOCA = 0B00000001;			//允许RA0的IO电平变化中断
  0029    3001    LDIA	0x1
  002A    1703    SETB	0x3,6
  002B    0088    LD	0x8,A
59:               	IOCB = 0B00001000;			//允许RB3的IO口电平变化中断
  002C    3008    LDIA	0x8
  002D    1283    CLRB	0x3,5
  002E    1303    CLRB	0x3,6
  002F    0089    LD	0x9,A
60:               	
61:               	RACIE = 1;					//允许PORTA的IO电平变化中断
  0030    1703    SETB	0x3,6
  0031    1488    SETB	0x8,1
62:               	PEIE = 1;					//要用RORTA中断唤醒，则PEIE必须设为1
  0032    170B    SETB	0xB,6
63:               	RBIE = 1;					//允许PORTB电平变化中断
  0033    158B    SETB	0xB,3
64:               	GIE = 0;					//如用到PORTB电平变化中断，则GIE必须为0，唤醒后执行SLEEP后程序;
  0034    138B    CLRB	0xB,7
65:               	
66:               
67:               	PORTA;						//读PORTA值并锁存,用电平变化中断必须执行这一步
  0035    1303    CLRB	0x3,6
  0036    0805    LD	A,0x5
68:               	RACIF = 0;					//清PORTA中断标志位
  0037    1703    SETB	0x3,6
  0038    1087    CLRB	0x7,1
69:               	PORTB;						//读PORTB值并锁存	
  0039    1303    CLRB	0x3,6
  003A    0806    LD	A,0x6
70:               	RBIF = 0;					//清PORTB中断标志位		
  003B    100B    CLRB	0xB,0
  003C    0064    CLRWDT
  003D    0063    STOP
  003E    0000    NOP
  003F    0064    CLRWDT
71:               	asm("clrwdt");
72:               
73:               	asm("sleep");				//进入休眠模式
74:               	
75:               	asm("nop");
76:               	asm("clrwdt");
77:               	if(RACIF)  RACIF = 0;		//清中断标志
  0040    1283    CLRB	0x3,5
  0041    1703    SETB	0x3,6
  0042    1887    SZB	0x7,1
  0043    1087    CLRB	0x7,1
78:               	if(RBIF)  RBIF = 0;			//清中断标志
  0044    180B    SZB	0xB,0
  0045    100B    CLRB	0xB,0
79:               	PORTA ^= 0X08;
  0046    3008    LDIA	0x8
  0047    1303    CLRB	0x3,6
  0048    0685    XORR	0x5
80:               	Init_System();
  0049    284A    JP	0x4A
81:               }
82:               
83:               /***********************************************
84:               函数名称：Init_System
85:               函数功能：系统初始化
86:               入口参数：无
87:               出口参数：无
88:               备注：
89:               ************************************************/
90:               void Init_System()
  004A    0000    NOP
  004B    0064    CLRWDT
91:               {
92:               	asm("nop");
93:               	asm("clrwdt");
94:               	INTCON = 0;					//系统初始化
  004C    018B    CLR	0xB
95:               	OSCCON = 0X72;				//配置振荡为8M,开 WDT
  004D    3072    LDIA	0x72
  004E    1683    SETB	0x3,5
  004F    1303    CLRB	0x3,6
  0050    0088    LD	0x8,A
96:               	OPTION_REG = 0;
  0051    0181    CLR	0x1
97:               	
98:                   WPUA  = 0B00000001;			//初始化上拉
  0052    3001    LDIA	0x1
  0053    1283    CLRB	0x3,5
  0054    0087    LD	0x7,A
99:                   WPUB  = 0B00001000;			
  0055    3008    LDIA	0x8
  0056    0088    LD	0x8,A
100:                
101:               
102:              	TRISA = 0B00000001;			//初始化IO状态
  0057    3001    LDIA	0x1
  0058    1683    SETB	0x3,5
  0059    0085    LD	0x5,A
103:              	TRISB = 0B00001000;
  005A    3008    LDIA	0x8
  005B    0086    LD	0x6,A
104:              
105:              //	PORTA = 0B00000000;
106:              	PORTB = 0B00000000;			//初始化输出
  005C    1283    CLRB	0x3,5
  005D    0186    CLR	0x6
  005E    0008    RET
107:              
108:              }
109:              
110:              /***********************************************
111:              函数名称：PA_Isr
112:              函数功能：PA电平变化中断服务
113:              入口参数：无
114:              出口参数：无
115:              备注：
116:              ************************************************/
117:              void interrupt PA_Isr()
118:              {
119:              	if(RACIF)
  005F    1283    CLRB	0x3,5
  0060    1703    SETB	0x3,6
  0061    1C87    SNZB	0x7,1
  0062    2868    JP	0x68
120:              	{
121:              		RACIF = 0;			//清中断标志
  0063    1087    CLRB	0x7,1
122:              		PORTA ^= 0X08;
  0064    3008    LDIA	0x8
  0065    1303    CLRB	0x3,6
  0066    0685    XORR	0x5
123:              		PORTA;
  0067    0805    LD	A,0x5
  0068    0871    LD	A,0x71
  0069    008A    LD	0xA,A
  006A    0E70    SWAPA	0x70
  006B    0083    LD	0x3,A
  006C    0EFE    SWAPR	0x7E
  006D    0E7E    SWAPA	0x7E
  006E    0009    RETI
124:              		//Init_System();
125:              	}
126:              }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280B    JP	0xB
  000B    118A    CLRB	0xA,3
  000C    280D    JP	0xD
---- start_initialization ------------------------------------------------------------------
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F0    LD	0x70,A
  0007    080A    LD	A,0xA
  0008    00F1    LD	0x71,A
  0009    118A    CLRB	0xA,3
  000A    285F    JP	0x5F
---- common_function ------------------------------------------------------------------
  000D    0183    CLR	0x3
  000E    118A    CLRB	0xA,3
  000F    286F    JP	0x6F
