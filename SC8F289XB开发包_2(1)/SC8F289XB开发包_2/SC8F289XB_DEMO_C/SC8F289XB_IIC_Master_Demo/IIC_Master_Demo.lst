---- H:\MyDownloads\说明书&测试报告\开发包\SC8F289XB开发包\SC8F289XB开发包_2\SC8F289XB_DEMO_C\SC8F289XB_IIC_Master_Demo\main.c ----------------------------------------------------------------------
1:                /**********************************************************
2:                
3:                **********************************************************/
4:                
5:                #include <sc.h>
6:                
7:                
8:                
9:                volatile unsigned int   result,result1,result2;
10:               
11:               
12:               void DelayXms(unsigned char x);
13:               
14:               
15:               /***********************************************************
16:               函数名称：DelayXms
17:               函数功能：毫秒级非精准延时
18:               入口参数：x - 延时时间
19:               出口参数：
20:               备    注：
21:               ***********************************************************/
22:               void DelayXms(unsigned char x)
23:               {
24:               	unsigned char i,j;
25:               	for(i=x;i>0;i--)
  077B    00F8    LD	0x78,A
  077C    0878    LD	A,0x78
  077D    1903    SZB	0x3,2
  077E    0008    RET
26:               		for(j=153;j>0;j--);
  077F    3099    LDIA	0x99
  0780    00F9    LD	0x79,A
  0781    0BF9    SZDECR	0x79
  0782    2F81    JP	0x781
  0783    03F8    DECR	0x78
  0784    2F7C    JP	0x77C
27:               }
28:               
29:               /***********************************************************
30:               main主函数
31:               ***********************************************************/
32:               
33:               #define  SLAVE_ADRSS   0xa0
34:               
35:                
36:               void Init_System();
37:               
38:               /******************************************
39:                 Adress  从机地址
40:                 data    待发数据
41:               ********************************************/
42:               void Write_IIC(unsigned char Adress,unsigned char data)
43:               {
44:               	/************ IICCON2 *********************************
45:               	Bit7  GCEN:  广播呼叫使能位（仅限I 2 C从动模式）。
46:               		1=  允许在IICSR中接收到广播呼叫地址（0000h）时产生中断。
47:               		0=  禁止广播呼叫地址。
48:               	Bit6  ACKSTAT:  应答状态位（仅限于I 2 C主控模式）。
49:               		在主控发送模式下: 
50:               		1 = 未接收到来自从动器件的应答。
51:               		0 = 已接收到来自从动器件的应答。
52:               	Bit5  ACKDT:  应答数据位（仅限于I 2 C主控模式）。
53:               		在主控接收模式下:  用户在接收完成后发送的应答序列的值。
54:               		1 = 不应答。
55:               		0 = 应答。
56:               	Bit4  ACKEN:  应答序列使能位（仅限I 2 C主控模式）。
57:               		在主控接收模式下: 
58:               		1 = 在SDA和SCL引脚启动应答序列，发送ACKDT数据位。由硬件自动清零。
59:               		0 = 应答序列空闲。
60:               	Bit3  RCEN:  接收使能位（仅限I 2 C主控模式）。
61:               		1=  使能I 2 C接收模式。
62:               		0=  接收空闲。
63:               	Bit2  PEN:  停止条件使能位（仅限于I 2 C主控模式）。
64:               		1 = 在SDA和SCL引脚启动停止条件。由硬件自动清零。
65:               		0 = 停止条件空闲。
66:               	Bit1  RSEN:  重复启动条件使能位（仅限I 2 C主控模式）。
67:               		1=  在SDA和SCL引脚启动重复启动条件。由硬件自动清零。
68:               		0=  重复启动条件空闲。
69:               	Bit0  SEN:  启动条件使能位。
70:               		在主控模式下: 
71:               		1 = 在SDA和SCL引脚启动启动条件。由硬件自动清零。
72:               		0 = 启动条件空闲。
73:               	在从动模式下: 
74:               		1 = 从发送和接收都会使能时钟延长（使能时钟延长）。
75:               		0 = 禁止时钟延长。
76:               	*********************************************************/
77:               	SEN =1;  		  //起始信号
  0786    1703    SETB	0x3,6
  0787    140D    SETB	0xD,0
78:               	while(IICIF==0);  //等待发送完成
  0788    1E07    SNZB	0x7,4
  0789    2F88    JP	0x788
79:               	IICIF = 0;
  078A    1207    CLRB	0x7,4
80:               	IICBUF = Adress;   //发送地址
  078B    0878    LD	A,0x78
  078C    008E    LD	0xE,A
81:               	while(IICIF==0);
  078D    1E07    SNZB	0x7,4
  078E    2F8D    JP	0x78D
82:               	IICIF = 0;
  078F    1207    CLRB	0x7,4
83:               	IICBUF = data;    //发送数据
  0790    0877    LD	A,0x77
  0791    008E    LD	0xE,A
84:               	while(IICIF==0);
  0792    1E07    SNZB	0x7,4
  0793    2F92    JP	0x792
85:               	IICIF = 0;
  0794    1207    CLRB	0x7,4
86:               	PEN =1;           //发送停止
  0795    150D    SETB	0xD,2
87:                   while(IICIF==0);
  0796    1E07    SNZB	0x7,4
  0797    2F96    JP	0x796
88:               	IICIF = 0;
  0798    1207    CLRB	0x7,4
  0799    0008    RET
89:               	
90:               }
91:               
92:               /******************************************
93:                  Adress   从机地址
94:                  data     待发数据
95:                  返回 ReadData
96:                 
97:               ********************************************/
98:               unsigned char  Read_IIC(unsigned char Adress,unsigned char data)
99:               {
100:              	unsigned char ReadData;
101:              
102:              	SEN =1;           //起始信号
  07D2    140D    SETB	0xD,0
103:              	while(IICIF==0); //等待发送完成
  07D3    1E07    SNZB	0x7,4
  07D4    2FD3    JP	0x7D3
104:              	IICIF = 0;
  07D5    1207    CLRB	0x7,4
105:              	IICBUF = Adress;  
  07D6    0879    LD	A,0x79
  07D7    008E    LD	0xE,A
106:              	while(IICIF==0);
  07D8    1E07    SNZB	0x7,4
  07D9    2FD8    JP	0x7D8
107:              
108:              	IICIF = 0;
  07DA    1207    CLRB	0x7,4
109:              	IICBUF = data;
  07DB    0877    LD	A,0x77
  07DC    008E    LD	0xE,A
110:              	while(IICIF==0);
  07DD    1E07    SNZB	0x7,4
  07DE    2FDD    JP	0x7DD
111:              	IICIF = 0;
  07DF    1207    CLRB	0x7,4
112:              	
113:              	RSEN =1; 		 //重复起始信号
  07E0    148D    SETB	0xD,1
114:              	while(IICIF==0);
  07E1    1E07    SNZB	0x7,4
  07E2    2FE1    JP	0x7E1
115:              
116:              	IICIF = 0;
  07E3    1207    CLRB	0x7,4
117:              	
118:              	IICBUF = Adress+1;  //发送地址+1 读取数据
  07E4    0879    LD	A,0x79
  07E5    3E01    ADDIA	0x1
  07E6    008E    LD	0xE,A
119:              	while(IICIF==0);
  07E7    1E07    SNZB	0x7,4
  07E8    2FE7    JP	0x7E7
120:              	IICIF = 0;    
  07E9    1207    CLRB	0x7,4
121:              	RCEN = 1;           //开始接收数据
  07EA    158D    SETB	0xD,3
122:              	while(IICIF==0);
  07EB    1E07    SNZB	0x7,4
  07EC    2FEB    JP	0x7EB
123:              	IICIF = 0;
  07ED    1207    CLRB	0x7,4
124:              	ReadData = IICBUF;  //读取接收的数据
  07EE    080E    LD	A,0xE
  07EF    00F8    LD	0x78,A
125:              	
126:              	PEN =1;                //发送停止
  07F0    150D    SETB	0xD,2
127:                  while(IICIF==0); 
  07F1    1E07    SNZB	0x7,4
  07F2    2FF1    JP	0x7F1
128:              	IICIF = 0;
  07F3    1207    CLRB	0x7,4
129:              	
130:              	return ReadData;
  07F4    0878    LD	A,0x78
  07F5    0008    RET
131:              	
132:              
133:              }
134:              volatile unsigned char IICReadData;
135:              void main()
136:              {
137:              	Init_System();
  07B0    118A    CLRB	0xA,3
  07B1    279A    CALL	0x79A
  07B2    118A    CLRB	0xA,3
138:              	TRISA |=  0b00000011;  //RA0 RA1输入态，做IIC 引脚时为开漏，需要外接上拉电阻
  07B3    3003    LDIA	0x3
  07B4    1683    SETB	0x3,5
  07B5    0485    ORR	0x5
139:              	
140:              	/********** IICCON ***********************************
141:              	Bit7  IICWCOL:  写冲突检测位。
142:              		主控模式:  
143:              			1= 在IIC不满足开始发送数据的条件下，试图对IICBUF寄存器进行写操作。
144:              			0= 未发生冲突。
145:              		从动模式: 
146:              			1= 正在发送前一个字时，又对IICBUF寄存器进行写操作（必须由软件清零）。
147:              			0= 未发生冲突。
148:              	Bit6  IICOV:  接收溢出指示位。(仅在从动接收模式下有限)
149:              			1=  IICBUF寄存器仍保持前一数据时，又接收到一个新的字节。在发送模式下IICOV
150:              				位可为任意值（该位必须由软件清零）。
151:              			0=  没有溢出。
152:              	Bit5  IICEN:  IIC使能位（必须正确配置这些引脚为输入）。
153:              			1=  使能IIC并将SDA和SCL引脚配置为串行端口引脚。
154:              			0=  禁止IIC并将这些引脚配置为I/O端口引脚。
155:              	Bit4  IICCKP:  时钟极性选择位。
156:              		在IIC从动模式下:  SCK释放控制。
157:              			1 = 使能时钟。
158:              			0 = 保持时钟线为低电平（时钟延长）（用于确保数据建立时间）。
159:              		在IIC主控模式下:  在此模式下未使用。
160:              	Bit3~Bit2  IICTOS[1:0]:  IIC从动模式超时选择
161:              		00=  禁止IIC从动超时功能；
162:              		01=  使能IIC从动超时功能，超时时间为16ms，超时后复位IIC模块；
163:              		10=  使能IIC从动超时功能，超时时间为32ms，超时后复位IIC模块；
164:              		11=  使能IIC从动超时功能，超时时间为64ms，超时后复位IIC模块；
165:              	Bit1~Bit0  IICM<1:0>:  IIC模式选择位。
166:              		00=  IIC主控模式，时钟=  FCPU / (IICADD+4)；
167:              		01=  IIC从动模式，7位地址，不响应起始位和停止位中断；
168:              		10=  IIC从动模式，7位地址，并允许起始位和停止位中断；
169:              		11=  允许操作IICMSK寄存器
170:              	*************************************************/
171:              	IICCON =  0B00100000;  // IIC 使能  主动模式
  07B6    3020    LDIA	0x20
  07B7    1283    CLRB	0x3,5
  07B8    1703    SETB	0x3,6
  07B9    008C    LD	0xC,A
172:                  IICADD = 36;          // 100K 频率 = 16M /4/36+4
  07BA    3024    LDIA	0x24
  07BB    0089    LD	0x9,A
173:              	
174:              	while(1)
175:              	{
176:                       DelayXms(200);
  07BC    30C8    LDIA	0xC8
  07BD    118A    CLRB	0xA,3
  07BE    277A    CALL	0x77A
  07BF    118A    CLRB	0xA,3
177:              		 Write_IIC(0xa0,0x80);
  07C0    3080    LDIA	0x80
  07C1    00F7    LD	0x77,A
  07C2    30A0    LDIA	0xA0
  07C3    118A    CLRB	0xA,3
  07C4    2785    CALL	0x785
  07C5    118A    CLRB	0xA,3
178:              			
179:              		 IICReadData =  Read_IIC(0xa0,0x80);
  07C6    3080    LDIA	0x80
  07C7    00F7    LD	0x77,A
  07C8    30A0    LDIA	0xA0
  07C9    118A    CLRB	0xA,3
  07CA    27D1    CALL	0x7D1
  07CB    118A    CLRB	0xA,3
  07CC    00F6    LD	0x76,A
180:              		 RB5 = ~RB5;
  07CD    3020    LDIA	0x20
  07CE    1303    CLRB	0x3,6
  07CF    0686    XORR	0x6
  07D0    2FBC    JP	0x7BC
181:              	}
182:              }
183:              
184:              
185:              
186:              /***********************************************
187:              函数名称：Init_System
188:              函数功能：系统初始化
189:              入口参数：无
190:              出口参数：无
191:              备注：
192:              ************************************************/
193:              void Init_System()
194:              {
195:              	asm("nop");
196:              	asm("clrwdt");
197:              	INTCON = 0;					//系统初始化
  079C    018B    CLR	0xB
198:              	OSCCON = 0X70;				//配置振荡为8M,开 WDT
  079D    3070    LDIA	0x70
  079E    1683    SETB	0x3,5
  079F    1303    CLRB	0x3,6
  07A0    0088    LD	0x8,A
199:              	OPTION_REG = 0;
  07A1    0181    CLR	0x1
200:              	
201:                  WPUA  = 0B00000000;			//初始化上拉
  07A2    1283    CLRB	0x3,5
  07A3    0187    CLR	0x7
202:                  WPUB  = 0B00001000;			
  07A4    3008    LDIA	0x8
  07A5    0088    LD	0x8,A
203:                
204:               
205:              	TRISA = 0B00000011;			//初始化IO状态
  07A6    3003    LDIA	0x3
  07A7    1683    SETB	0x3,5
  07A8    0085    LD	0x5,A
206:              	TRISB = 0B00001000;
  07A9    3008    LDIA	0x8
  07AA    0086    LD	0x6,A
207:              
208:              	PORTA = 0B00000011;
  07AB    3003    LDIA	0x3
  07AC    1283    CLRB	0x3,5
  07AD    0085    LD	0x5,A
209:              	PORTB = 0B00000000;			//初始化输出
  07AE    0186    CLR	0x6
  07AF    0008    RET
210:              
211:              }
212:              
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    2FF6    JP	0x7F6
---- start_initialization ------------------------------------------------------------------
  07F6    01F0    CLR	0x70
  07F7    01F1    CLR	0x71
  07F8    01F2    CLR	0x72
  07F9    01F3    CLR	0x73
  07FA    01F4    CLR	0x74
  07FB    01F5    CLR	0x75
  07FC    01F6    CLR	0x76
---- interrupt_function_enter ----------------------------------------------------------
---- common_function ------------------------------------------------------------------
  077A    00F7    LD	0x77,A
  0785    00F8    LD	0x78,A
  079A    0000    NOP
  079B    0064    CLRWDT
  07D1    00F9    LD	0x79,A
  07FD    0183    CLR	0x3
  07FE    118A    CLRB	0xA,3
  07FF    2FB0    JP	0x7B0
