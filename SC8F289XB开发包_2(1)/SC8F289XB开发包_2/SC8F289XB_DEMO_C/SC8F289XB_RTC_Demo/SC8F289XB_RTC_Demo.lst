---- F:\中微资料\SC8F289XB开发包\SC8F289XB_DEMO_C\SC8F289XB_RTC_Demo\SC8F289XB_RTC_Demo.c ----------------------------------------------------------------------
1:                
2:                #include <sc.h>
3:                //采用32.768k晶振，休眠时用晶振计数中断唤醒
4:                
5:                
6:                //系统初始化
7:                void Init_System()
  0032    0000    NOP
  0033    0064    CLRWDT
8:                {
9:                	asm("nop");
10:               	asm("clrwdt");
11:               	INTCON = 0;			//禁止中断
  0034    018B    CLR	0xB
12:               	OSCCON = 0X72;		//配置振荡为8M,开WDT
  0035    3072    LDIA	0x72
  0036    1683    SETB	0x3,5
  0037    1303    CLRB	0x3,6
  0038    0088    LD	0x8,A
13:               	OPTION_REG = 0;
  0039    0181    CLR	0x1
14:               	
15:                   WPUA  = 0B00000000;  //PA口上拉无效
  003A    1283    CLRB	0x3,5
  003B    0187    CLR	0x7
16:                   WPUB  = 0B00000000;  //PB口上拉无效
  003C    0188    CLR	0x8
17:                   WPDB  = 0B00000000;  //PB口上拉无效
  003D    1683    SETB	0x3,5
  003E    0187    CLR	0x7
18:                 
19:                
20:               	TRISA = 0;
  003F    0185    CLR	0x5
21:               	TRISB = 0;
  0040    0186    CLR	0x6
22:               	 
23:               	PORTA = 0B00000000;
  0041    1283    CLRB	0x3,5
  0042    0185    CLR	0x5
24:               	PORTB = 0B00000000;	 //关闭所有输出
  0043    0186    CLR	0x6
25:               	
26:               
27:               	PIE1 = 2;			//使能Timer2中断,关闭其他中断
  0044    3002    LDIA	0x2
  0045    008D    LD	0xD,A
28:               
29:               	PR2 = 0X80;
  0046    3080    LDIA	0x80
  0047    1683    SETB	0x3,5
  0048    0091    LD	0x11,A
30:               	T2CON = 0x8F;		//使能32.768KHz为Timer2计数时钟,Timer2后分频比为1:2，预分频1：16
  0049    308F    LDIA	0x8F
  004A    1283    CLRB	0x3,5
  004B    0092    LD	0x12,A
31:               						//128*4*16*2/(32.768*1000)=0.5S
32:               	
33:               	INTCON = 0XC0;		//使能中断	
  004C    30C0    LDIA	0xC0
  004D    008B    LD	0xB,A
  004E    0008    RET
34:               }
35:               
36:               
37:               //进入低功耗模式
38:               void SystemSleep()
39:               {
40:               	
41:               	PIE1 = 2;				//使能Timer2中断,关闭其他中断
  0010    3002    LDIA	0x2
  0011    1283    CLRB	0x3,5
  0012    1303    CLRB	0x3,6
  0013    008D    LD	0xD,A
42:               	INTCON = 0XC0;
  0014    30C0    LDIA	0xC0
  0015    008B    LD	0xB,A
43:               	if(0X8F != T2CON)
  0016    308F    LDIA	0x8F
  0017    0612    XORA	0x12
  0018    1903    SZB	0x3,2
  0019    281C    JP	0x1C
44:               		T2CON = 0X8F;
  001A    308F    LDIA	0x8F
  001B    0092    LD	0x12,A
45:               	
46:               	
47:               	TRISA = 0;				//输出固定电平,减少功耗
  001C    1683    SETB	0x3,5
  001D    0185    CLR	0x5
48:               	TRISB = 0;
  001E    0186    CLR	0x6
49:               	PORTA ^= 0XFF;	
  001F    30FF    LDIA	0xFF
  0020    1283    CLRB	0x3,5
  0021    0685    XORR	0x5
50:               							//关闭所有功能模块,减少功耗
51:               	PWMCON0 = 0;
  0022    0193    CLR	0x13
52:               
53:               	OPA0CON = 0;
  0023    1683    SETB	0x3,5
  0024    0198    CLR	0x18
54:               	OPA1CON = 0;
  0025    019A    CLR	0x1A
55:               	ADCON0 = 0;				//关闭所有不需要的外设
  0026    019D    CLR	0x1D
56:               
57:               	OPTION_REG = 0;
  0027    0181    CLR	0x1
58:               	
59:               	OSCCON = 0X70;		//配置振荡为8M,关闭WDT
  0028    3070    LDIA	0x70
  0029    0088    LD	0x8,A
  002A    0064    CLRWDT
  002B    0063    STOP
  002C    0000    NOP
  002D    0064    CLRWDT
60:               	asm("clrwdt");
61:               	
62:               	SLEEP();				//进入休眠模式
63:               	
64:               	asm("nop");
65:               	asm("clrwdt");
66:               	OSCCON = 0X70;		//配置振荡为8M,关闭WDT
  002E    1683    SETB	0x3,5
  002F    1303    CLRB	0x3,6
  0030    0088    LD	0x8,A
  0031    0008    RET
67:               }
68:               
69:               
70:               /***********************************************************
71:               主循环
72:               ***********************************************************/
73:               void main()
74:               {
75:               	Init_System();
  005F    118A    CLRB	0xA,3
  0060    2032    CALL	0x32
  0061    118A    CLRB	0xA,3
76:               	while(1)
  0062    0064    CLRWDT
77:               	{
78:               		asm("clrwdt");
79:               		SystemSleep();		//进入低功耗模式
  0063    118A    CLRB	0xA,3
  0064    2010    CALL	0x10
  0065    118A    CLRB	0xA,3
  0066    2862    JP	0x62
80:               		
81:               	}
82:               }
83:               
84:               
85:               //中断服务函数
86:               void interrupt Isr_Timer()
87:               {
88:               	if(TMR2IF)				//若只使能了一个中断源,可以略去判断
  004F    1283    CLRB	0x3,5
  0050    1303    CLRB	0x3,6
  0051    1C8C    SNZB	0xC,1
  0052    2855    JP	0x55
89:               	{
90:               		//Timer2中断，每1s进一次
91:               		TMR2IF = 0;
  0053    108C    CLRB	0xC,1
92:               
93:               	}
  0054    2858    JP	0x58
94:               	else
95:               	{
96:               		PIR1 = 0;
  0055    018C    CLR	0xC
97:               		INTCON &= 0XC0;
  0056    30C0    LDIA	0xC0
  0057    058B    ANDR	0xB
  0058    0871    LD	A,0x71
  0059    008A    LD	0xA,A
  005A    0E70    SWAPA	0x70
  005B    0083    LD	0x3,A
  005C    0EFE    SWAPR	0x7E
  005D    0E7E    SWAPA	0x7E
  005E    0009    RETI
98:               	}
99:               }
100:              
101:              
102:              
103:              
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280B    JP	0xB
  000B    118A    CLRB	0xA,3
  000C    280D    JP	0xD
---- start_initialization ------------------------------------------------------------------
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F0    LD	0x70,A
  0007    080A    LD	A,0xA
  0008    00F1    LD	0x71,A
  0009    118A    CLRB	0xA,3
  000A    284F    JP	0x4F
---- common_function ------------------------------------------------------------------
  000D    0183    CLR	0x3
  000E    118A    CLRB	0xA,3
  000F    285F    JP	0x5F
