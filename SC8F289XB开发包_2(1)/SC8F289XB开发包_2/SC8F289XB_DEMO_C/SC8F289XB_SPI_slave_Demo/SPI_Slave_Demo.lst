---- F:\中微资料\SC8F289XB开发包\SC8F289XB_DEMO_C\SC8F289XB_SPI_slave_Demo\main.c ----------------------------------------------------------------------
1:                /**********************************************************
2:                
3:                **********************************************************/
4:                
5:                #include <sc.h>
6:                
7:                volatile unsigned int   result,result1,result2;
8:                volatile unsigned char ReceBuffer;	//接收到的数据
9:                volatile unsigned char SendBuffer;	//待发送的数据
10:               volatile unsigned char IICReadData;
11:               
12:               void DelayXms(unsigned char x);
13:               void Init_System();
14:               
15:               /***********************************************************
16:               函数名称：DelayXms
17:               函数功能：毫秒级非精准延时
18:               入口参数：x - 延时时间
19:               出口参数：
20:               备    注：
21:               ***********************************************************/
22:               void DelayXms(unsigned char x)
  004F    00FB    LD	0x7B,A
23:               {
24:               	unsigned char i,j;
25:               	for(i=x;i>0;i--)
  0050    00FC    LD	0x7C,A
  0051    087C    LD	A,0x7C
  0052    1903    SZB	0x3,2
  0053    0008    RET
26:               		for(j=153;j>0;j--);
  0054    3099    LDIA	0x99
  0055    00FD    LD	0x7D,A
  0056    0BFD    SZDECR	0x7D
  0057    2856    JP	0x56
  0058    03FC    DECR	0x7C
  0059    2851    JP	0x51
27:               }
28:               
29:               /***********************************************************
30:               main主函数
31:               ***********************************************************/
32:               
33:               void main()
34:               {
35:               	Init_System();
  002D    118A    CLRB	0xA,3
  002E    2019    CALL	0x19
  002F    118A    CLRB	0xA,3
36:               	
37:               	/**************SPICON*********************
38:               		Bit7 SPIWCOL: 写冲突标志位  
39:               			1= 在发送/接收数据过程中，试图对SPIBUF寄存器进行写操作。 
40:               			0= 未发生冲突。 
41:               		Bit6 SPIOV: 接收溢出指示位。 
42:               			1= SPIBUF仍保持前一数据时，又收到一个新的字节。出现溢出时，SPISR中的数据会丢失。溢出只会在从动模式下发生。
43:               				在从动模式中，即使仅发送数据，用户也必须读SPIBUF以避免溢出。
44:               				在主控模式中，溢出位不被置1，因为每次接收或发送新数据，都要通过写SPIBUF寄存器来启动（该位必须由软件清零）。 
45:               			0= 没有溢出。 
46:               		Bit5 SPIEN: SPI使能位。 
47:               			1= 使能串行端口并将SCK、SDO、SDI和SS配置为串行端口引脚。
48:               			0= 禁止串行端口并将这些引脚配置为I/O端口引脚。 
49:               		Bit4 SPICKP: 时钟极性选择位。 
50:               			1= 时钟空闲状态为高电平。 
51:               			0= 时钟空闲状态为低电平。 
52:               		Bit3~Bit0 SPIM<3:0>: 同步串行端口模式选择位； 
53:               			0000= SPI主控模式，时钟= FSYS/4； 
54:               			0001= SPI主控模式，时钟= FSYS/16； 
55:               			0010= SPI主控模式，时钟= FSYS/64； 
56:               			0011= SPI主控模式，时钟= TMR2输出/2； 
57:               			0100= SPI从动模式，时钟= SCK引脚，使能SS引脚控制； 
58:               			0101= SPI从动模式，时钟= SCK引脚，禁止SS引脚控制，SS可用作I/O引脚；
59:               	*************************************************/ 
60:               	SPICON =   0B00100100;  // SPI  使能 从动模式
  0030    3024    LDIA	0x24
  0031    1703    SETB	0x3,6
  0032    009D    LD	0x1D,A
61:               	
62:               	/***********SPICON2********************************************
63:               		Bit7 保留 需写0 
64:               		Bit6 CKE: SPI时钟边沿选择位。（注：在从动模式下，CKE必须设置为0） 
65:               			SPICKP= 0  0= 在SCK引脚的上升沿发送数据； 1= 在SCK引脚的下降沿发送数据。 
66:               			SPICKP = 1  0 = 在SCK引脚的下降沿发送数据；  1 = 在SCK引脚的上升沿发送数据。 
67:               		Bit5 MODE: 模式选择  
68:               				1=3线模式 (当需要发送时，SDIO口TRIS位需清0；当需要接收时，SDIO口TRIS需置1)  
69:               				0=4线模式 
70:               		Bit4~Bit1 未用。 
71:               		Bit0 SPIBF 缓冲器满状态位。  
72:               				1= 接收完成，SPIBUF满。  0= 接收未完成，SPIBUF空
73:               	************************************************************/
74:               	SPICON2 =  0B00000000;  // SPI  4线  从动模式
  0033    019E    CLR	0x1E
75:                   
76:               	 SPIIF =0;
  0034    1303    CLRB	0x3,6
  0035    118C    CLRB	0xC,3
77:               	 SPIIE=1;
  0036    158D    SETB	0xD,3
78:               	 PEIE =1;
  0037    170B    SETB	0xB,6
79:               	 GIE =1;  
  0038    178B    SETB	0xB,7
80:               
81:               	while(1)
82:               	{
83:                        DelayXms(200);
  0039    30C8    LDIA	0xC8
  003A    118A    CLRB	0xA,3
  003B    204F    CALL	0x4F
  003C    118A    CLRB	0xA,3
  003D    2839    JP	0x39
84:               
85:               	}
86:               }
87:               
88:               
89:               
90:               /***********************************************
91:               函数名称：Init_System
92:               函数功能：系统初始化
93:               入口参数：无
94:               出口参数：无
95:               备注：
96:               ************************************************/
97:               void Init_System()
  0019    0000    NOP
  001A    0064    CLRWDT
98:               {
99:               	asm("nop");
100:              	asm("clrwdt");
101:              	INTCON = 0;					//系统初始化
  001B    018B    CLR	0xB
102:              	OSCCON = 0X70;				//配置振荡为8M,开 WDT
  001C    3070    LDIA	0x70
  001D    1683    SETB	0x3,5
  001E    1303    CLRB	0x3,6
  001F    0088    LD	0x8,A
103:              	OPTION_REG = 0;
  0020    0181    CLR	0x1
104:              	
105:                  WPUA  = 0B00000000;			//初始化上拉
  0021    1283    CLRB	0x3,5
  0022    0187    CLR	0x7
106:                  WPUB  = 0B00001000;			
  0023    3008    LDIA	0x8
  0024    0088    LD	0x8,A
107:                
108:               
109:              	TRISA = 0B00000000;			//初始化IO状态
  0025    1683    SETB	0x3,5
  0026    0185    CLR	0x5
110:              	TRISB = 0B01110100;
  0027    3074    LDIA	0x74
  0028    0086    LD	0x6,A
111:              
112:              	PORTA = 0B00000000;
  0029    1283    CLRB	0x3,5
  002A    0185    CLR	0x5
113:              	PORTB = 0B00000000;			//初始化输出
  002B    0186    CLR	0x6
  002C    0008    RET
114:              
115:              }
116:              
117:              /***********************************************
118:              函数名称：SPI_Isr
119:              函数功能：SPI中断服务
120:              入口参数：无
121:              出口参数：无
122:              备注：
123:              ************************************************/
124:              void interrupt SPI_Isr()
125:              {
126:              	
127:              	if(SPIIF==1)
  003E    1283    CLRB	0x3,5
  003F    1303    CLRB	0x3,6
  0040    1D8C    SNZB	0xC,3
  0041    2848    JP	0x48
128:              	{
129:              	   SPIIF = 0;
  0042    118C    CLRB	0xC,3
130:              	   
131:              	   ReceBuffer = SPIBUF;
  0043    1703    SETB	0x3,6
  0044    081C    LD	A,0x1C
  0045    00F8    LD	0x78,A
132:              	   SPIBUF =0xaa;	
  0046    30AA    LDIA	0xAA
  0047    009C    LD	0x1C,A
  0048    087A    LD	A,0x7A
  0049    008A    LD	0xA,A
  004A    0E79    SWAPA	0x79
  004B    0083    LD	0x3,A
  004C    0EFE    SWAPR	0x7E
  004D    0E7E    SWAPA	0x7E
  004E    0009    RETI
133:              	
134:              	}
135:              }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280B    JP	0xB
  000B    118A    CLRB	0xA,3
  000C    280D    JP	0xD
---- start_initialization ------------------------------------------------------------------
  000D    01F0    CLR	0x70
  000E    01F1    CLR	0x71
  000F    01F2    CLR	0x72
  0010    01F3    CLR	0x73
  0011    01F4    CLR	0x74
  0012    01F5    CLR	0x75
  0013    01F6    CLR	0x76
  0014    01F7    CLR	0x77
  0015    01F8    CLR	0x78
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F9    LD	0x79,A
  0007    080A    LD	A,0xA
  0008    00FA    LD	0x7A,A
  0009    118A    CLRB	0xA,3
  000A    283E    JP	0x3E
---- common_function ------------------------------------------------------------------
  0016    0183    CLR	0x3
  0017    118A    CLRB	0xA,3
  0018    282D    JP	0x2D
