

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 15 18:03:25 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1711C
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	swtext1,local,class=CONST,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	pa_nodes0,global,class=CODE,delta=2
    42                           	dabs	1,0x7E,2
    43  0000                     
    44                           ; Version 1.45
    45                           ; Generated 16/11/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC16F887 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataCOMMON
    80  0000                     __pidataCOMMON:	
    81  001F                     _ADCON0	set	31
    82  001E                     _ADRESH	set	30
    83  0017                     _CCP1CON	set	23
    84  0015                     _CCPR1L	set	21
    85  0012                     _T2CON	set	18
    86  000B                     _INTCON	set	11
    87  0007                     _PORTC	set	7
    88  0006                     _PORTB	set	6
    89  0005                     _PORTA	set	5
    90  0001                     _TMR0	set	1
    91  00F9                     _GODONE	set	249
    92  0061                     _TMR2IF	set	97
    93  005F                     _GIE	set	95
    94  005B                     _RBIE	set	91
    95  005A                     _T0IF	set	90
    96  0058                     _RBIF	set	88
    97  001C                     _TO	set	28
    98  009F                     _ADCON1	set	159
    99  009E                     _ADRESL	set	158
   100  0096                     _IOCB	set	150
   101  0095                     _WPUB	set	149
   102  0092                     _PR2	set	146
   103  008F                     _OSCCON	set	143
   104  0087                     _TRISC	set	135
   105  0086                     _TRISB	set	134
   106  0085                     _TRISA	set	133
   107  0081                     _OPTION_REG	set	129
   108  018F                     _WPUC	set	399
   109  018E                     _WPUA	set	398
   110                           
   111                           	psect	cinit
   112  000D                     start_initialization:	
   113                           ; #config settings
   114                           
   115  000D                     __initialization:	
   116                           
   117                           ;initializer for _currentLevel
   118  000D  3001               	movlw	1
   119  000E  00F9               	movwf	__pdataCOMMON& (0+127)
   120  000F  3020               	movlw	low __pbssBANK0
   121                           
   122                           ; Clear objects allocated to BANK0
   123  0010  1383               	bcf	3,7	;select IRP bank0
   124  0011  0084               	movwf	4
   125  0012  3037               	movlw	low (__pbssBANK0+23)
   126  0013  2309               	fcall	clear_ram0
   127                           
   128                           ; Clear objects allocated to COMMON
   129  0014  01F6               	clrf	__pbssCOMMON& (0+127)
   130  0015  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   131  0016  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   132  0017                     end_of_initialization:	
   133                           ;End of C runtime variable initialization code
   134                           
   135  0017                     __end_of__initialization:	
   136  0017  0183               	clrf	3
   137  0018  29C4               	ljmp	_main	;jump to C main() function
   138                           
   139                           	psect	bssCOMMON
   140  0076                     __pbssCOMMON:	
   141  0076                     _FAN_STATUS:	
   142  0076                     	ds	1
   143  0077                     _count500ms:	
   144  0077                     	ds	1
   145  0078                     _time0Flag:	
   146  0078                     	ds	1
   147                           
   148                           	psect	dataCOMMON
   149  0079                     __pdataCOMMON:	
   150  0079                     _currentLevel:	
   151  0079                     	ds	1
   152                           
   153                           	psect	bssBANK0
   154  0020                     __pbssBANK0:	
   155  0020                     ADC_Sample@adsum:	
   156  0020                     	ds	4
   157  0024                     ADC_Sample@admax:	
   158  0024                     	ds	2
   159  0026                     ADC_Sample@admin:	
   160  0026                     	ds	2
   161  0028                     _count10Ms:	
   162  0028                     	ds	2
   163  002A                     _countTime:	
   164  002A                     	ds	2
   165  002C                     _adresult:	
   166  002C                     	ds	2
   167  002E                     ADC_Sample@adtimes:	
   168  002E                     	ds	1
   169  002F                     _lowVTime:	
   170  002F                     	ds	1
   171  0030                     _key1:	
   172  0030                     	ds	7
   173                           
   174                           	psect	clrtext
   175  0309                     clear_ram0:	
   176                           ;	Called with FSR containing the base address, and
   177                           ;	W with the last address+1
   178                           
   179  0309  0064               	clrwdt	;clear the watchdog before getting into this loop
   180  030A                     clrloop0:	
   181  030A  0180               	clrf	0	;clear RAM location pointed to by FSR
   182  030B  0A84               	incf	4,f	;increment pointer
   183  030C  0604               	xorwf	4,w	;XOR with final address
   184  030D  1903               	btfsc	3,2	;have we reached the end yet?
   185  030E  3400               	retlw	0	;all done for this memory range, return
   186  030F  0604               	xorwf	4,w	;XOR again to restore value
   187  0310  2B0A               	goto	clrloop0	;do the next byte
   188                           
   189                           	psect	cstackCOMMON
   190  0070                     __pcstackCOMMON:	
   191  0070                     ?_closeFan:	
   192  0070                     ?_Sleep_Mode:	
   193                           ; 1 bytes @ 0x0
   194                           
   195  0070                     ?_sacnKeyInput:	
   196                           ; 1 bytes @ 0x0
   197                           
   198  0070                     ?_key_driver:	
   199                           ; 1 bytes @ 0x0
   200                           
   201  0070                     ?_Init_Config:	
   202                           ; 1 bytes @ 0x0
   203                           
   204  0070                     ?_resetKey:	
   205                           ; 1 bytes @ 0x0
   206                           
   207  0070                     ?_Init_System:	
   208                           ; 1 bytes @ 0x0
   209                           
   210  0070                     ?_Init_GPIO:	
   211                           ; 1 bytes @ 0x0
   212                           
   213  0070                     ?_Init_Interupt:	
   214                           ; 1 bytes @ 0x0
   215                           
   216  0070                     ?_checkUsbStatus:	
   217                           ; 1 bytes @ 0x0
   218                           
   219  0070                     ?_Init_PWM:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ?_setFanLevel:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     ?_checkFan:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ?_scanKeys:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_checkKeys:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ?_main:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ?_Timer0_Isr:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ?_ADC_Sample:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_DelayXms:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     ?i1_Init_System:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     ??i1_Init_System:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?i1_Init_GPIO:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ??i1_Init_GPIO:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?i1_Init_Interupt:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ??i1_Init_Interupt:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?i1_Init_PWM:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ??i1_Init_PWM:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ?i1_Init_Config:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?i1_resetKey:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ??i1_resetKey:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ?_readVrefADC:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     i1resetKey@key:	
   283                           ; 2 bytes @ 0x0
   284                           
   285                           
   286                           ; 1 bytes @ 0x0
   287  0070                     	ds	1
   288  0071                     ??_Timer0_Isr:	
   289  0071                     ??i1_Init_Config:	
   290                           ; 1 bytes @ 0x1
   291                           
   292                           
   293                           ; 1 bytes @ 0x1
   294  0071                     	ds	3
   295  0074                     ??_closeFan:	
   296  0074                     ??_Sleep_Mode:	
   297                           ; 1 bytes @ 0x4
   298                           
   299  0074                     ??_sacnKeyInput:	
   300                           ; 1 bytes @ 0x4
   301                           
   302  0074                     ??_key_driver:	
   303                           ; 1 bytes @ 0x4
   304                           
   305  0074                     ??_readVrefADC:	
   306                           ; 1 bytes @ 0x4
   307                           
   308  0074                     ??_resetKey:	
   309                           ; 1 bytes @ 0x4
   310                           
   311  0074                     ??_Init_System:	
   312                           ; 1 bytes @ 0x4
   313                           
   314  0074                     ??_Init_GPIO:	
   315                           ; 1 bytes @ 0x4
   316                           
   317  0074                     ??_Init_Interupt:	
   318                           ; 1 bytes @ 0x4
   319                           
   320  0074                     ??_Init_PWM:	
   321                           ; 1 bytes @ 0x4
   322                           
   323  0074                     ??_checkFan:	
   324                           ; 1 bytes @ 0x4
   325                           
   326  0074                     ??_DelayXms:	
   327                           ; 1 bytes @ 0x4
   328                           
   329  0074                     ??___awdiv:	
   330                           ; 1 bytes @ 0x4
   331                           
   332  0074                     resetKey@key:	
   333                           ; 1 bytes @ 0x4
   334                           
   335                           
   336                           ; 1 bytes @ 0x4
   337  0074                     	ds	1
   338  0075                     ??_Init_Config:	
   339  0075                     ??_setFanLevel:	
   340                           ; 1 bytes @ 0x5
   341                           
   342  0075                     ??_checkKeys:	
   343                           ; 1 bytes @ 0x5
   344                           
   345                           
   346                           ; 1 bytes @ 0x5
   347  0075                     	ds	1
   348  0076                     ??_scanKeys:	
   349                           
   350                           	psect	cstackBANK0
   351  0037                     __pcstackBANK0:	
   352                           ; 1 bytes @ 0x6
   353                           
   354  0037                     ??_checkUsbStatus:	
   355  0037                     ??_ADC_Sample:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0037                     ?___awdiv:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0037                     DelayXms@x:	
   362                           ; 2 bytes @ 0x0
   363                           
   364  0037                     sacnKeyInput@key:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0037                     key_driver@key_return:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0037                     ___awdiv@divisor:	
   371                           ; 1 bytes @ 0x0
   372                           
   373                           
   374                           ; 2 bytes @ 0x0
   375  0037                     	ds	1
   376  0038                     DelayXms@i:	
   377  0038                     key_driver@key_read:	
   378                           ; 1 bytes @ 0x1
   379                           
   380                           
   381                           ; 1 bytes @ 0x1
   382  0038                     	ds	1
   383  0039                     DelayXms@j:	
   384  0039                     key_driver@key:	
   385                           ; 1 bytes @ 0x2
   386                           
   387  0039                     ___awdiv@dividend:	
   388                           ; 1 bytes @ 0x2
   389                           
   390                           
   391                           ; 2 bytes @ 0x2
   392  0039                     	ds	2
   393  003B                     ADC_Sample@adch:	
   394  003B                     ___awdiv@counter:	
   395                           ; 1 bytes @ 0x4
   396                           
   397                           
   398                           ; 1 bytes @ 0x4
   399  003B                     	ds	1
   400  003C                     ADC_Sample@i:	
   401  003C                     ___awdiv@sign:	
   402                           ; 1 bytes @ 0x5
   403                           
   404                           
   405                           ; 1 bytes @ 0x5
   406  003C                     	ds	1
   407  003D                     ADC_Sample@ad_temp:	
   408  003D                     ___awdiv@quotient:	
   409                           ; 2 bytes @ 0x6
   410                           
   411                           
   412                           ; 2 bytes @ 0x6
   413  003D                     	ds	2
   414  003F                     setFanLevel@level:	
   415                           
   416                           ; 1 bytes @ 0x8
   417  003F                     	ds	1
   418  0040                     setFanLevel@tempLevel:	
   419                           
   420                           ; 1 bytes @ 0x9
   421  0040                     	ds	1
   422  0041                     ??_main:	
   423                           
   424                           ; 1 bytes @ 0xA
   425  0041                     	ds	1
   426                           
   427                           	psect	maintext
   428  01C4                     __pmaintext:	
   429 ;;
   430 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   431 ;;
   432 ;; *************** function _main *****************
   433 ;; Defined at:
   434 ;;		line 211 in file "E:\project\project0508\scm\n9_fan_no_led\main.c"
   435 ;; Parameters:    Size  Location     Type
   436 ;;		None
   437 ;; Auto vars:     Size  Location     Type
   438 ;;		None
   439 ;; Return value:  Size  Location     Type
   440 ;;                  1    wreg      void 
   441 ;; Registers used:
   442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   443 ;; Tracked objects:
   444 ;;		On entry : B00/0
   445 ;;		On exit  : 300/0
   446 ;;		Unchanged: 0/0
   447 ;; Data sizes:     COMMON   BANK0   BANK1
   448 ;;      Params:         0       0       0
   449 ;;      Locals:         0       0       0
   450 ;;      Temps:          0       1       0
   451 ;;      Totals:         0       1       0
   452 ;;Total ram usage:        1 bytes
   453 ;; Hardware stack levels required when called:    7
   454 ;; This function calls:
   455 ;;		_Init_Config
   456 ;;		_Sleep_Mode
   457 ;;		_checkKeys
   458 ;;		_checkUsbStatus
   459 ;;		_readVrefADC
   460 ;;		_scanKeys
   461 ;; This function is called by:
   462 ;;		Startup code after reset
   463 ;; This function uses a non-reentrant model
   464 ;;
   465                           
   466                           
   467                           ;psect for function _main
   468  01C4                     _main:	
   469                           
   470                           ;main.c: 212: if (((PORTB) >> (2)&1) == 0) {
   471                           
   472                           ;incstack = 0
   473                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   474  01C4  0806               	movf	6,w	;volatile
   475  01C5  00C1               	movwf	??_main
   476  01C6  1003               	clrc
   477  01C7  0CC1               	rrf	??_main,f
   478  01C8  1003               	clrc
   479  01C9  0CC1               	rrf	??_main,f
   480  01CA  1841               	btfsc	??_main,0
   481  01CB  29CD               	goto	l3445
   482                           
   483                           ;main.c: 213: Sleep_Mode();
   484  01CC  21F5               	fcall	_Sleep_Mode
   485  01CD                     l3445:	
   486                           
   487                           ;main.c: 214: }
   488                           ;main.c: 216: Init_Config();
   489  01CD  2239               	fcall	_Init_Config
   490  01CE                     l3447:	
   491                           
   492                           ;main.c: 219: if (time0Flag) {
   493  01CE  0878               	movf	_time0Flag,w
   494  01CF  1903               	btfsc	3,2
   495  01D0  29D7               	goto	l3457
   496  01D1  0064               	clrwdt	;# 
   497                           
   498                           ;main.c: 221: time0Flag = 0;
   499  01D2  01F8               	clrf	_time0Flag
   500                           
   501                           ;main.c: 222: scanKeys();
   502  01D3  2318               	fcall	_scanKeys
   503                           
   504                           ;main.c: 223: count10Ms++;
   505  01D4  0AA8               	incf	_count10Ms,f
   506  01D5  1903               	skipnz
   507  01D6  0AA9               	incf	_count10Ms+1,f
   508  01D7                     l3457:	
   509                           
   510                           ;main.c: 224: }
   511                           ;main.c: 227: if (count10Ms == 100) {
   512  01D7  3064               	movlw	100
   513  01D8  1283               	bcf	3,5	;RP0=0, select bank0
   514  01D9  1303               	bcf	3,6	;RP1=0, select bank0
   515  01DA  0628               	xorwf	_count10Ms,w
   516  01DB  0429               	iorwf	_count10Ms+1,w
   517  01DC  1D03               	btfss	3,2
   518  01DD  29E9               	goto	l3469
   519                           
   520                           ;main.c: 228: countTime++;
   521  01DE  0AAA               	incf	_countTime,f
   522  01DF  1903               	skipnz
   523  01E0  0AAB               	incf	_countTime+1,f
   524                           
   525                           ;main.c: 229: count500ms++;
   526  01E1  0AF7               	incf	_count500ms,f
   527                           
   528                           ;main.c: 230: checkKeys();
   529  01E2  2282               	fcall	_checkKeys
   530                           
   531                           ;main.c: 231: count10Ms = 0;
   532  01E3  1283               	bcf	3,5	;RP0=0, select bank0
   533  01E4  1303               	bcf	3,6	;RP1=0, select bank0
   534  01E5  01A8               	clrf	_count10Ms
   535  01E6  01A9               	clrf	_count10Ms+1
   536                           
   537                           ;main.c: 233: checkUsbStatus();
   538  01E7  214A               	fcall	_checkUsbStatus
   539                           
   540                           ;main.c: 235: readVrefADC();
   541  01E8  231E               	fcall	_readVrefADC
   542  01E9                     l3469:	
   543                           
   544                           ;main.c: 236: }
   545                           ;main.c: 238: if(count500ms == 50)
   546  01E9  3032               	movlw	50
   547  01EA  0677               	xorwf	_count500ms,w
   548  01EB  1903               	btfsc	3,2
   549                           
   550                           ;main.c: 239: {
   551                           ;main.c: 240: count500ms = 0;
   552  01EC  01F7               	clrf	_count500ms
   553                           
   554                           ;main.c: 241: }
   555                           ;main.c: 243: if (countTime == 50) {
   556  01ED  3032               	movlw	50
   557  01EE  062A               	xorwf	_countTime,w
   558  01EF  042B               	iorwf	_countTime+1,w
   559  01F0  1D03               	btfss	3,2
   560  01F1  29CE               	goto	l3447
   561                           
   562                           ;main.c: 244: countTime = 0;
   563  01F2  01AA               	clrf	_countTime
   564  01F3  01AB               	clrf	_countTime+1
   565  01F4  29CE               	goto	l3447
   566  01F5                     __end_of_main:	
   567                           
   568                           	psect	text1
   569  0318                     __ptext1:	
   570 ;; *************** function _scanKeys *****************
   571 ;; Defined at:
   572 ;;		line 181 in file "E:\project\project0508\scm\n9_fan_no_led\main.c"
   573 ;; Parameters:    Size  Location     Type
   574 ;;		None
   575 ;; Auto vars:     Size  Location     Type
   576 ;;		None
   577 ;; Return value:  Size  Location     Type
   578 ;;                  1    wreg      void 
   579 ;; Registers used:
   580 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   581 ;; Tracked objects:
   582 ;;		On entry : 0/0
   583 ;;		On exit  : B00/0
   584 ;;		Unchanged: 0/0
   585 ;; Data sizes:     COMMON   BANK0   BANK1
   586 ;;      Params:         0       0       0
   587 ;;      Locals:         0       0       0
   588 ;;      Temps:          0       0       0
   589 ;;      Totals:         0       0       0
   590 ;;Total ram usage:        0 bytes
   591 ;; Hardware stack levels used:    1
   592 ;; Hardware stack levels required when called:    4
   593 ;; This function calls:
   594 ;;		_sacnKeyInput
   595 ;; This function is called by:
   596 ;;		_main
   597 ;; This function uses a non-reentrant model
   598 ;;
   599                           
   600                           
   601                           ;psect for function _scanKeys
   602  0318                     _scanKeys:	
   603                           
   604                           ;main.c: 182: key1.key_addr_result = PORTB;
   605                           
   606                           ;incstack = 0
   607                           ; Regs used in _scanKeys: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   608  0318  1283               	bcf	3,5	;RP0=0, select bank0
   609  0319  1303               	bcf	3,6	;RP1=0, select bank0
   610  031A  0806               	movf	6,w	;volatile
   611  031B  00B5               	movwf	_key1+5
   612                           
   613                           ;main.c: 183: sacnKeyInput(&key1);
   614  031C  3030               	movlw	(low (_key1| 0))& (0+255)
   615  031D  2A1C               	ljmp	_sacnKeyInput
   616  031E                     __end_of_scanKeys:	
   617                           
   618                           	psect	text2
   619  021C                     __ptext2:	
   620 ;; *************** function _sacnKeyInput *****************
   621 ;; Defined at:
   622 ;;		line 3 in file "E:\project\project0508\scm\n9_fan_no_led\scankey.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;  key             1    wreg     PTR struct Keys
   625 ;;		 -> key1(7), 
   626 ;; Auto vars:     Size  Location     Type
   627 ;;  key             1    0[BANK0 ] PTR struct Keys
   628 ;;		 -> key1(7), 
   629 ;; Return value:  Size  Location     Type
   630 ;;                  1    wreg      void 
   631 ;; Registers used:
   632 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   633 ;; Tracked objects:
   634 ;;		On entry : 300/0
   635 ;;		On exit  : B00/0
   636 ;;		Unchanged: 0/0
   637 ;; Data sizes:     COMMON   BANK0   BANK1
   638 ;;      Params:         0       0       0
   639 ;;      Locals:         0       1       0
   640 ;;      Temps:          2       0       0
   641 ;;      Totals:         2       1       0
   642 ;;Total ram usage:        3 bytes
   643 ;; Hardware stack levels used:    1
   644 ;; Hardware stack levels required when called:    3
   645 ;; This function calls:
   646 ;;		Nothing
   647 ;; This function is called by:
   648 ;;		_scanKeys
   649 ;; This function uses a non-reentrant model
   650 ;;
   651                           
   652                           
   653                           ;psect for function _sacnKeyInput
   654  021C                     _sacnKeyInput:	
   655                           
   656                           ;incstack = 0
   657                           ; Regs used in _sacnKeyInput: [wreg-fsr0h+status,2+status,0]
   658                           ;sacnKeyInput@key stored from wreg
   659  021C  00B7               	movwf	sacnKeyInput@key
   660                           
   661                           ;scankey.c: 4: key->key_input = ((key->key_addr_result) >> (key->key_index)&1);
   662  021D  3E05               	addlw	5
   663  021E  0084               	movwf	4
   664  021F  1383               	bcf	3,7	;select IRP bank0
   665  0220  0800               	movf	0,w
   666  0221  00F4               	movwf	??_sacnKeyInput
   667  0222  0837               	movf	sacnKeyInput@key,w
   668  0223  3E06               	addlw	6
   669  0224  0084               	movwf	4
   670  0225  0A00               	incf	0,w
   671  0226  2A29               	goto	u1084
   672  0227                     u1085:	
   673  0227  1003               	clrc
   674  0228  0CF4               	rrf	??_sacnKeyInput,f
   675  0229                     u1084:	
   676  0229  3EFF               	addlw	-1
   677  022A  1D03               	skipz
   678  022B  2A27               	goto	u1085
   679  022C  0874               	movf	??_sacnKeyInput,w
   680  022D  00F5               	movwf	??_sacnKeyInput+1
   681  022E  0837               	movf	sacnKeyInput@key,w
   682  022F  3E04               	addlw	4
   683  0230  0084               	movwf	4
   684  0231  0875               	movf	??_sacnKeyInput+1,w
   685  0232  0080               	movwf	0
   686  0233  0837               	movf	sacnKeyInput@key,w
   687  0234  3E04               	addlw	4
   688  0235  0084               	movwf	4
   689  0236  3001               	movlw	1
   690  0237  0580               	andwf	0,f
   691  0238  0008               	return
   692  0239                     __end_of_sacnKeyInput:	
   693                           
   694                           	psect	text3
   695  031E                     __ptext3:	
   696 ;; *************** function _readVrefADC *****************
   697 ;; Defined at:
   698 ;;		line 90 in file "E:\project\project0508\scm\n9_fan_no_led\adc.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;		None
   701 ;; Auto vars:     Size  Location     Type
   702 ;;		None
   703 ;; Return value:  Size  Location     Type
   704 ;;                  2  557[None  ] unsigned int 
   705 ;; Registers used:
   706 ;;		wreg, status,2, status,0, pclath, cstack
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 300/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMMON   BANK0   BANK1
   712 ;;      Params:         0       0       0
   713 ;;      Locals:         0       0       0
   714 ;;      Temps:          0       0       0
   715 ;;      Totals:         0       0       0
   716 ;;Total ram usage:        0 bytes
   717 ;; Hardware stack levels used:    1
   718 ;; Hardware stack levels required when called:    4
   719 ;; This function calls:
   720 ;;		_ADC_Sample
   721 ;;		_DelayXms
   722 ;; This function is called by:
   723 ;;		_main
   724 ;; This function uses a non-reentrant model
   725 ;;
   726                           
   727                           
   728                           ;psect for function _readVrefADC
   729  031E                     _readVrefADC:	
   730                           
   731                           ;adc.c: 92: DelayXms(1);
   732                           
   733                           ;incstack = 0
   734                           ; Regs used in _readVrefADC: [wreg+status,2+status,0+pclath+cstack]
   735  031E  3001               	movlw	1
   736  031F  22DA               	fcall	_DelayXms
   737                           
   738                           ;adc.c: 93: ADC_Sample(15);
   739  0320  300F               	movlw	15
   740  0321  2819               	ljmp	_ADC_Sample
   741  0322                     __end_of_readVrefADC:	
   742                           
   743                           	psect	text4
   744  02DA                     __ptext4:	
   745 ;; *************** function _DelayXms *****************
   746 ;; Defined at:
   747 ;;		line 82 in file "E:\project\project0508\scm\n9_fan_no_led\adc.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;  x               1    wreg     unsigned char 
   750 ;; Auto vars:     Size  Location     Type
   751 ;;  x               1    0[BANK0 ] unsigned char 
   752 ;;  j               1    2[BANK0 ] unsigned char 
   753 ;;  i               1    1[BANK0 ] unsigned char 
   754 ;; Return value:  Size  Location     Type
   755 ;;                  1    wreg      void 
   756 ;; Registers used:
   757 ;;		wreg, status,2, status,0
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 300/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMMON   BANK0   BANK1
   763 ;;      Params:         0       0       0
   764 ;;      Locals:         0       3       0
   765 ;;      Temps:          0       0       0
   766 ;;      Totals:         0       3       0
   767 ;;Total ram usage:        3 bytes
   768 ;; Hardware stack levels used:    1
   769 ;; Hardware stack levels required when called:    3
   770 ;; This function calls:
   771 ;;		Nothing
   772 ;; This function is called by:
   773 ;;		_readVrefADC
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           
   778                           ;psect for function _DelayXms
   779  02DA                     _DelayXms:	
   780                           
   781                           ;incstack = 0
   782                           ; Regs used in _DelayXms: [wreg+status,2+status,0]
   783                           ;DelayXms@x stored from wreg
   784  02DA  1283               	bcf	3,5	;RP0=0, select bank0
   785  02DB  1303               	bcf	3,6	;RP1=0, select bank0
   786  02DC  00B7               	movwf	DelayXms@x
   787                           
   788                           ;adc.c: 84: unsigned char i,j;
   789                           ;adc.c: 85: for(i=x;i>0;i--)
   790  02DD  00B8               	movwf	DelayXms@i
   791  02DE                     l3349:	
   792  02DE  0838               	movf	DelayXms@i,w
   793  02DF  1903               	btfsc	3,2
   794  02E0  0008               	return
   795                           
   796                           ;adc.c: 86: for(j=153;j>0;j--);
   797  02E1  3099               	movlw	153
   798  02E2  00B9               	movwf	DelayXms@j
   799  02E3                     l3359:	
   800  02E3  0BB9               	decfsz	DelayXms@j,f
   801  02E4  2AE3               	goto	l3359
   802  02E5  03B8               	decf	DelayXms@i,f
   803  02E6  2ADE               	goto	l3349
   804  02E7                     __end_of_DelayXms:	
   805                           
   806                           	psect	text5
   807  0019                     __ptext5:	
   808 ;; *************** function _ADC_Sample *****************
   809 ;; Defined at:
   810 ;;		line 11 in file "E:\project\project0508\scm\n9_fan_no_led\adc.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;  adch            1    wreg     unsigned char 
   813 ;; Auto vars:     Size  Location     Type
   814 ;;  adch            1    4[BANK0 ] unsigned char 
   815 ;;  ad_temp         2    6[BANK0 ] volatile unsigned int 
   816 ;;  i               1    5[BANK0 ] unsigned char 
   817 ;; Return value:  Size  Location     Type
   818 ;;                  1    wreg      void 
   819 ;; Registers used:
   820 ;;		wreg, status,2, status,0
   821 ;; Tracked objects:
   822 ;;		On entry : 300/0
   823 ;;		On exit  : 300/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMMON   BANK0   BANK1
   826 ;;      Params:         0       0       0
   827 ;;      Locals:         0       4       0
   828 ;;      Temps:          0       4       0
   829 ;;      Totals:         0       8       0
   830 ;;Total ram usage:        8 bytes
   831 ;; Hardware stack levels used:    1
   832 ;; Hardware stack levels required when called:    3
   833 ;; This function calls:
   834 ;;		Nothing
   835 ;; This function is called by:
   836 ;;		_readVrefADC
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           
   841                           ;psect for function _ADC_Sample
   842  0019                     _ADC_Sample:	
   843                           
   844                           ;incstack = 0
   845                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
   846                           ;ADC_Sample@adch stored from wreg
   847  0019  00BB               	movwf	ADC_Sample@adch
   848                           
   849                           ;adc.c: 13: static unsigned long adsum = 0;
   850                           ;adc.c: 14: static unsigned int admin = 0,admax = 0;
   851                           ;adc.c: 15: static unsigned char adtimes = 0;
   852                           ;adc.c: 16: volatile unsigned int ad_temp;
   853                           ;adc.c: 17: ADCON1 = 0;
   854  001A  1683               	bsf	3,5	;RP0=1, select bank1
   855  001B  019F               	clrf	31	;volatile
   856                           
   857                           ;adc.c: 18: ADCON0 = 0X41 | (adch << 2);
   858  001C  1283               	bcf	3,5	;RP0=0, select bank0
   859  001D  083B               	movf	ADC_Sample@adch,w
   860  001E  00B7               	movwf	??_ADC_Sample
   861  001F  3001               	movlw	1
   862  0020  1003               	clrc
   863  0021                     L1:	
   864  0021  0DB7               	rlf	??_ADC_Sample,f
   865  0022  3EFF               	addlw	-1
   866  0023  1003               	clrc
   867  0024  1D03               	skipz
   868  0025  2821               	goto	L1
   869  0026  0D37               	rlf	??_ADC_Sample,w
   870  0027  3841               	iorlw	65
   871  0028  009F               	movwf	31	;volatile
   872  0029  0000               	nop	;# 
   873  002A  0000               	nop	;# 
   874                           
   875                           ;adc.c: 21: GODONE = 1;
   876  002B  1283               	bcf	3,5	;RP0=0, select bank0
   877  002C  1303               	bcf	3,6	;RP1=0, select bank0
   878  002D  149F               	bsf	31,1	;volatile
   879                           
   880                           ;adc.c: 23: unsigned char i = 0;
   881  002E  01BC               	clrf	ADC_Sample@i
   882  002F                     l1742:	
   883                           ;adc.c: 24: while(GODONE)
   884                           
   885  002F  1C9F               	btfss	31,1	;volatile
   886  0030  2834               	goto	l3317
   887                           
   888                           ;adc.c: 25: {
   889                           ;adc.c: 26: if(0 == (--i))
   890  0031  0BBC               	decfsz	ADC_Sample@i,f
   891  0032  282F               	goto	l1742
   892  0033  0008               	return
   893  0034                     l3317:	
   894                           
   895                           ;adc.c: 28: }
   896                           ;adc.c: 30: ad_temp=(ADRESH<<4)+(ADRESL>>4);
   897  0034  081E               	movf	30,w	;volatile
   898  0035  00BD               	movwf	ADC_Sample@ad_temp	;volatile
   899  0036  01BE               	clrf	ADC_Sample@ad_temp+1	;volatile
   900  0037  0EBD               	swapf	ADC_Sample@ad_temp,f	;volatile
   901  0038  0EBE               	swapf	ADC_Sample@ad_temp+1,f	;volatile
   902  0039  30F0               	movlw	240
   903  003A  05BE               	andwf	ADC_Sample@ad_temp+1,f	;volatile
   904  003B  083D               	movf	ADC_Sample@ad_temp,w	;volatile
   905  003C  390F               	andlw	15
   906  003D  04BE               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
   907  003E  30F0               	movlw	240
   908  003F  05BD               	andwf	ADC_Sample@ad_temp,f	;volatile
   909  0040  1683               	bsf	3,5	;RP0=1, select bank1
   910  0041  0E1E               	swapf	30,w	;volatile
   911  0042  390F               	andlw	15
   912  0043  1283               	bcf	3,5	;RP0=0, select bank0
   913  0044  07BD               	addwf	ADC_Sample@ad_temp,f	;volatile
   914  0045  1803               	skipnc
   915  0046  0ABE               	incf	ADC_Sample@ad_temp+1,f	;volatile
   916                           
   917                           ;adc.c: 32: if(0 == admax)
   918  0047  0824               	movf	ADC_Sample@admax,w
   919  0048  0425               	iorwf	ADC_Sample@admax+1,w
   920  0049  1D03               	btfss	3,2
   921  004A  284D               	goto	l3325
   922                           
   923                           ;adc.c: 33: {
   924                           ;adc.c: 34: admax = ad_temp;
   925  004B  20BE               	fcall	PL16	;call to abstracted procedure
   926  004C  285F               	goto	l3331
   927  004D                     l3325:	
   928                           ;adc.c: 36: }
   929                           
   930                           ;adc.c: 35: admin = ad_temp;
   931                           
   932                           
   933                           ;adc.c: 37: else if(ad_temp > admax)
   934  004D  083E               	movf	ADC_Sample@ad_temp+1,w	;volatile
   935  004E  0225               	subwf	ADC_Sample@admax+1,w
   936  004F  1D03               	skipz
   937  0050  2853               	goto	u1185
   938  0051  083D               	movf	ADC_Sample@ad_temp,w	;volatile
   939  0052  0224               	subwf	ADC_Sample@admax,w
   940  0053                     u1185:	
   941  0053  1803               	skipnc
   942  0054  2857               	goto	l3329
   943                           
   944                           ;adc.c: 38: admax = ad_temp;
   945  0055  20BE               	fcall	PL16	;call to abstracted procedure
   946  0056  2863               	goto	l1748
   947  0057                     l3329:	
   948                           
   949                           ;adc.c: 39: else if(ad_temp < admin)
   950  0057  0827               	movf	ADC_Sample@admin+1,w
   951  0058  023E               	subwf	ADC_Sample@ad_temp+1,w	;volatile
   952  0059  1D03               	skipz
   953  005A  285D               	goto	u1195
   954  005B  0826               	movf	ADC_Sample@admin,w
   955  005C  023D               	subwf	ADC_Sample@ad_temp,w	;volatile
   956  005D                     u1195:	
   957  005D  1803               	skipnc
   958  005E  2863               	goto	l1748
   959  005F                     l3331:	
   960                           
   961                           ;adc.c: 40: admin = ad_temp;
   962  005F  083E               	movf	ADC_Sample@ad_temp+1,w	;volatile
   963  0060  00A7               	movwf	ADC_Sample@admin+1
   964  0061  083D               	movf	ADC_Sample@ad_temp,w	;volatile
   965  0062  00A6               	movwf	ADC_Sample@admin
   966  0063                     l1748:	
   967                           
   968                           ;adc.c: 42: adsum += ad_temp;
   969  0063  083D               	movf	ADC_Sample@ad_temp,w	;volatile
   970  0064  00B7               	movwf	??_ADC_Sample
   971  0065  083E               	movf	ADC_Sample@ad_temp+1,w	;volatile
   972  0066  00B8               	movwf	??_ADC_Sample+1
   973  0067  01B9               	clrf	??_ADC_Sample+2
   974  0068  01BA               	clrf	??_ADC_Sample+3
   975  0069  0837               	movf	??_ADC_Sample,w
   976  006A  07A0               	addwf	ADC_Sample@adsum,f
   977  006B  0838               	movf	??_ADC_Sample+1,w
   978  006C  1103               	clrz
   979  006D  1803               	skipnc
   980  006E  3E01               	addlw	1
   981  006F  1D03               	btfss	3,2
   982  0070  07A1               	addwf	ADC_Sample@adsum+1,f
   983  0071  0839               	movf	??_ADC_Sample+2,w
   984  0072  1103               	clrz
   985  0073  1803               	skipnc
   986  0074  3E01               	addlw	1
   987  0075  1D03               	btfss	3,2
   988  0076  07A2               	addwf	ADC_Sample@adsum+2,f
   989  0077  083A               	movf	??_ADC_Sample+3,w
   990  0078  1103               	clrz
   991  0079  1803               	skipnc
   992  007A  3E01               	addlw	1
   993  007B  1D03               	btfss	3,2
   994  007C  07A3               	addwf	ADC_Sample@adsum+3,f
   995                           
   996                           ;adc.c: 43: if(++adtimes >= 10)
   997  007D  300A               	movlw	10
   998  007E  0AAE               	incf	ADC_Sample@adtimes,f
   999  007F  022E               	subwf	ADC_Sample@adtimes,w
  1000  0080  1C03               	skipc
  1001  0081  0008               	return
  1002                           
  1003                           ;adc.c: 44: {
  1004                           ;adc.c: 45: adsum -= admax;
  1005  0082  0824               	movf	ADC_Sample@admax,w
  1006  0083  00B7               	movwf	??_ADC_Sample
  1007  0084  0825               	movf	ADC_Sample@admax+1,w
  1008  0085  20AF               	fcall	PL6	;call to abstracted procedure
  1009  0086  1C03               	skipc
  1010  0087  0F3A               	incfsz	??_ADC_Sample+3,w
  1011  0088  02A3               	subwf	ADC_Sample@adsum+3,f
  1012                           
  1013                           ;adc.c: 46: adsum -= admin;
  1014  0089  0826               	movf	ADC_Sample@admin,w
  1015  008A  00B7               	movwf	??_ADC_Sample
  1016  008B  0827               	movf	ADC_Sample@admin+1,w
  1017  008C  20AF               	fcall	PL6	;call to abstracted procedure
  1018  008D  1C03               	skipc
  1019  008E  0F3A               	incfsz	??_ADC_Sample+3,w
  1020  008F  02A3               	subwf	ADC_Sample@adsum+3,f
  1021                           
  1022                           ;adc.c: 48: adresult = adsum >> 3;
  1023  0090  0820               	movf	ADC_Sample@adsum,w
  1024  0091  00B7               	movwf	??_ADC_Sample
  1025  0092  0821               	movf	ADC_Sample@adsum+1,w
  1026  0093  00B8               	movwf	??_ADC_Sample+1
  1027  0094  0822               	movf	ADC_Sample@adsum+2,w
  1028  0095  00B9               	movwf	??_ADC_Sample+2
  1029  0096  0823               	movf	ADC_Sample@adsum+3,w
  1030  0097  00BA               	movwf	??_ADC_Sample+3
  1031  0098  3003               	movlw	3
  1032  0099                     u1245:	
  1033  0099  1003               	clrc
  1034  009A  0CBA               	rrf	??_ADC_Sample+3,f
  1035  009B  0CB9               	rrf	??_ADC_Sample+2,f
  1036  009C  0CB8               	rrf	??_ADC_Sample+1,f
  1037  009D  0CB7               	rrf	??_ADC_Sample,f
  1038  009E  3EFF               	addlw	-1
  1039  009F  1D03               	skipz
  1040  00A0  2899               	goto	u1245
  1041  00A1  0838               	movf	??_ADC_Sample+1,w
  1042  00A2  00AD               	movwf	_adresult+1	;volatile
  1043  00A3  0837               	movf	??_ADC_Sample,w
  1044  00A4  00AC               	movwf	_adresult	;volatile
  1045                           
  1046                           ;adc.c: 50: adsum = 0;
  1047  00A5  01A0               	clrf	ADC_Sample@adsum
  1048  00A6  01A1               	clrf	ADC_Sample@adsum+1
  1049  00A7  01A2               	clrf	ADC_Sample@adsum+2
  1050  00A8  01A3               	clrf	ADC_Sample@adsum+3
  1051                           
  1052                           ;adc.c: 51: admin = 0;
  1053  00A9  01A6               	clrf	ADC_Sample@admin
  1054  00AA  01A7               	clrf	ADC_Sample@admin+1
  1055                           
  1056                           ;adc.c: 52: admax = 0;
  1057  00AB  01A4               	clrf	ADC_Sample@admax
  1058  00AC  01A5               	clrf	ADC_Sample@admax+1
  1059                           
  1060                           ;adc.c: 53: adtimes = 0;
  1061  00AD  01AE               	clrf	ADC_Sample@adtimes
  1062  00AE  0008               	return
  1063  00AF                     __end_of_ADC_Sample:	
  1064  00AF                     PL6:	
  1065  00AF  00B8               	movwf	??_ADC_Sample+1
  1066  00B0  01B9               	clrf	??_ADC_Sample+2
  1067  00B1  01BA               	clrf	??_ADC_Sample+3
  1068  00B2  0837               	movf	??_ADC_Sample,w
  1069  00B3  02A0               	subwf	ADC_Sample@adsum,f
  1070  00B4  0838               	movf	??_ADC_Sample+1,w
  1071  00B5  1C03               	skipc
  1072  00B6  0F38               	incfsz	??_ADC_Sample+1,w
  1073  00B7  02A1               	subwf	ADC_Sample@adsum+1,f
  1074  00B8  0839               	movf	??_ADC_Sample+2,w
  1075  00B9  1C03               	skipc
  1076  00BA  0F39               	incfsz	??_ADC_Sample+2,w
  1077  00BB  02A2               	subwf	ADC_Sample@adsum+2,f
  1078  00BC  083A               	movf	??_ADC_Sample+3,w
  1079  00BD  0008               	return
  1080  00BE                     __end_ofPL6:	
  1081  00BE                     PL16:	
  1082  00BE  083E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1083  00BF  00A5               	movwf	ADC_Sample@admax+1
  1084  00C0  083D               	movf	ADC_Sample@ad_temp,w	;volatile
  1085  00C1  00A4               	movwf	ADC_Sample@admax
  1086  00C2  0008               	return
  1087  00C3                     __end_ofPL16:	
  1088                           
  1089                           	psect	text6
  1090  014A                     __ptext6:	
  1091 ;; *************** function _checkUsbStatus *****************
  1092 ;; Defined at:
  1093 ;;		line 37 in file "E:\project\project0508\scm\n9_fan_no_led\main.c"
  1094 ;; Parameters:    Size  Location     Type
  1095 ;;		None
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;		None
  1098 ;; Return value:  Size  Location     Type
  1099 ;;                  1    wreg      void 
  1100 ;; Registers used:
  1101 ;;		wreg, status,2, status,0, pclath, cstack
  1102 ;; Tracked objects:
  1103 ;;		On entry : 300/0
  1104 ;;		On exit  : 0/0
  1105 ;;		Unchanged: 0/0
  1106 ;; Data sizes:     COMMON   BANK0   BANK1
  1107 ;;      Params:         0       0       0
  1108 ;;      Locals:         0       0       0
  1109 ;;      Temps:          0       2       0
  1110 ;;      Totals:         0       2       0
  1111 ;;Total ram usage:        2 bytes
  1112 ;; Hardware stack levels used:    1
  1113 ;; Hardware stack levels required when called:    5
  1114 ;; This function calls:
  1115 ;;		_closeFan
  1116 ;; This function is called by:
  1117 ;;		_main
  1118 ;; This function uses a non-reentrant model
  1119 ;;
  1120                           
  1121                           
  1122                           ;psect for function _checkUsbStatus
  1123  014A                     _checkUsbStatus:	
  1124                           
  1125                           ;main.c: 40: if (((PORTB) >> (2)&1) == 1) {
  1126                           
  1127                           ;incstack = 0
  1128                           ; Regs used in _checkUsbStatus: [wreg+status,2+status,0+pclath+cstack]
  1129  014A  0806               	movf	6,w	;volatile
  1130  014B  00B7               	movwf	??_checkUsbStatus
  1131  014C  1003               	clrc
  1132  014D  0CB7               	rrf	??_checkUsbStatus,f
  1133  014E  1003               	clrc
  1134  014F  0CB7               	rrf	??_checkUsbStatus,f
  1135  0150  1C37               	btfss	??_checkUsbStatus,0
  1136  0151  2968               	goto	l1124
  1137                           
  1138                           ;main.c: 42: lowVTime = 0;
  1139  0152  01AF               	clrf	_lowVTime
  1140                           
  1141                           ;main.c: 43: if (((PORTB) >> (1)&1) == 0) {
  1142  0153  0806               	movf	6,w	;volatile
  1143  0154  00B7               	movwf	??_checkUsbStatus
  1144  0155  1003               	clrc
  1145  0156  0CB7               	rrf	??_checkUsbStatus,f
  1146  0157  1837               	btfsc	??_checkUsbStatus,0
  1147  0158  295C               	goto	l3375
  1148                           
  1149                           ;main.c: 45: PORTC&=~(1<<1);
  1150  0159  1087               	bcf	7,1	;volatile
  1151                           
  1152                           ;main.c: 46: PORTA|=(1<<0);
  1153  015A  1405               	bsf	5,0	;volatile
  1154                           
  1155                           ;main.c: 47: } else if (countTime < 15) {
  1156  015B  0008               	return
  1157  015C                     l3375:	
  1158  015C  3000               	movlw	0
  1159  015D  022B               	subwf	_countTime+1,w
  1160  015E  300F               	movlw	15
  1161  015F  1903               	skipnz
  1162  0160  022A               	subwf	_countTime,w
  1163  0161  1803               	skipnc
  1164  0162  2966               	goto	l1127
  1165                           
  1166                           ;main.c: 48: PORTC|=(1<<1);
  1167  0163  1487               	bsf	7,1	;volatile
  1168                           
  1169                           ;main.c: 50: PORTA&=~(1<<0);
  1170  0164  1005               	bcf	5,0	;volatile
  1171                           
  1172                           ;main.c: 51: }else{
  1173  0165  0008               	return
  1174  0166                     l1127:	
  1175                           
  1176                           ;main.c: 52: PORTA|=(1<<0);
  1177  0166  1405               	bsf	5,0	;volatile
  1178  0167  0008               	return
  1179  0168                     l1124:	
  1180                           
  1181                           ;main.c: 56: PORTC|=(1<<1);
  1182  0168  1487               	bsf	7,1	;volatile
  1183                           
  1184                           ;main.c: 59: if((adresult/8) > 0x63 && count500ms == 10)
  1185  0169  082D               	movf	_adresult+1,w	;volatile
  1186  016A  00B8               	movwf	??_checkUsbStatus+1
  1187  016B  082C               	movf	_adresult,w	;volatile
  1188  016C  00B7               	movwf	??_checkUsbStatus
  1189  016D  3000               	movlw	0
  1190  016E  1003               	clrc
  1191  016F  0CB8               	rrf	??_checkUsbStatus+1,f
  1192  0170  0CB7               	rrf	??_checkUsbStatus,f
  1193  0171  1003               	clrc
  1194  0172  0CB8               	rrf	??_checkUsbStatus+1,f
  1195  0173  0CB7               	rrf	??_checkUsbStatus,f
  1196  0174  1003               	clrc
  1197  0175  0CB8               	rrf	??_checkUsbStatus+1,f
  1198  0176  0CB7               	rrf	??_checkUsbStatus,f
  1199  0177  0238               	subwf	??_checkUsbStatus+1,w
  1200  0178  3064               	movlw	100
  1201  0179  1903               	skipnz
  1202  017A  0237               	subwf	??_checkUsbStatus,w
  1203  017B  1C03               	skipc
  1204  017C  0008               	return
  1205  017D  300A               	movlw	10
  1206  017E  0677               	xorwf	_count500ms,w
  1207  017F  1D03               	btfss	3,2
  1208  0180  0008               	return
  1209                           
  1210                           ;main.c: 60: {
  1211                           ;main.c: 61: if(lowVTime < 10)
  1212  0181  300A               	movlw	10
  1213  0182  022F               	subwf	_lowVTime,w
  1214  0183  1803               	skipnc
  1215  0184  2989               	goto	l3389
  1216  0185  3001               	movlw	1
  1217                           
  1218                           ;main.c: 62: {
  1219                           ;main.c: 63: lowVTime++;
  1220  0186  0AAF               	incf	_lowVTime,f
  1221                           
  1222                           ;main.c: 65: PORTA^=(1<<0);
  1223  0187  0685               	xorwf	5,f	;volatile
  1224                           
  1225                           ;main.c: 66: }else
  1226  0188  0008               	return
  1227  0189                     l3389:	
  1228                           
  1229                           ;main.c: 67: {
  1230                           ;main.c: 69: closeFan();
  1231  0189  2A54               	ljmp	l3155
  1232  018A                     __end_of_checkUsbStatus:	
  1233                           
  1234                           	psect	text7
  1235  0282                     __ptext7:	
  1236 ;; *************** function _checkKeys *****************
  1237 ;; Defined at:
  1238 ;;		line 189 in file "E:\project\project0508\scm\n9_fan_no_led\main.c"
  1239 ;; Parameters:    Size  Location     Type
  1240 ;;		None
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;		None
  1243 ;; Return value:  Size  Location     Type
  1244 ;;                  1    wreg      void 
  1245 ;; Registers used:
  1246 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1247 ;; Tracked objects:
  1248 ;;		On entry : 300/0
  1249 ;;		On exit  : 0/0
  1250 ;;		Unchanged: 0/0
  1251 ;; Data sizes:     COMMON   BANK0   BANK1
  1252 ;;      Params:         0       0       0
  1253 ;;      Locals:         0       0       0
  1254 ;;      Temps:          0       0       0
  1255 ;;      Totals:         0       0       0
  1256 ;;Total ram usage:        0 bytes
  1257 ;; Hardware stack levels used:    1
  1258 ;; Hardware stack levels required when called:    6
  1259 ;; This function calls:
  1260 ;;		_checkFan
  1261 ;;		_key_driver
  1262 ;;		_setFanLevel
  1263 ;; This function is called by:
  1264 ;;		_main
  1265 ;; This function uses a non-reentrant model
  1266 ;;
  1267                           
  1268                           
  1269                           ;psect for function _checkKeys
  1270  0282                     _checkKeys:	
  1271                           
  1272                           ;main.c: 190: if (key_driver(&key1) == 1) {
  1273                           
  1274                           ;incstack = 0
  1275                           ; Regs used in _checkKeys: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1276  0282  3030               	movlw	(low (_key1| 0))& (0+255)
  1277  0283  2108               	fcall	_key_driver
  1278  0284  3A01               	xorlw	1
  1279  0285  1D03               	skipz
  1280  0286  2A90               	goto	l3409
  1281                           
  1282                           ;main.c: 193: if (FAN_STATUS == 1) {
  1283  0287  0B76               	decfsz	_FAN_STATUS,w
  1284  0288  2A8B               	goto	l1162
  1285                           
  1286                           ;main.c: 195: setFanLevel(1);
  1287  0289  3001               	movlw	1
  1288  028A  298A               	ljmp	_setFanLevel
  1289  028B                     l1162:	
  1290                           ;main.c: 197: } else {
  1291                           
  1292  028B  3000               	movlw	0
  1293                           
  1294                           ;main.c: 198: FAN_STATUS = 1;
  1295  028C  01F6               	clrf	_FAN_STATUS
  1296  028D  0AF6               	incf	_FAN_STATUS,f
  1297                           
  1298                           ;main.c: 199: setFanLevel(0);
  1299  028E  218A               	fcall	_setFanLevel
  1300  028F                     l3403:	
  1301                           
  1302                           ;main.c: 200: checkFan();
  1303  028F  2AE7               	ljmp	l2803
  1304  0290                     l3409:	
  1305  0290  3002               	movlw	2
  1306  0291  0676               	xorwf	_FAN_STATUS,w
  1307  0292  1D03               	btfss	3,2
  1308  0293  0008               	return
  1309  0294  2A8F               	goto	l3403
  1310  0295                     __end_of_checkKeys:	
  1311                           
  1312                           	psect	text8
  1313  018A                     __ptext8:	
  1314 ;; *************** function _setFanLevel *****************
  1315 ;; Defined at:
  1316 ;;		line 89 in file "E:\project\project0508\scm\n9_fan_no_led\main.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;  level           1    wreg     unsigned char 
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;  level           1    8[BANK0 ] unsigned char 
  1321 ;;  levelWidth      2    0        unsigned int 
  1322 ;;  tempLevel       1    9[BANK0 ] unsigned char 
  1323 ;; Return value:  Size  Location     Type
  1324 ;;                  1    wreg      void 
  1325 ;; Registers used:
  1326 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1327 ;; Tracked objects:
  1328 ;;		On entry : B00/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMMON   BANK0   BANK1
  1332 ;;      Params:         0       0       0
  1333 ;;      Locals:         0       2       0
  1334 ;;      Temps:          0       0       0
  1335 ;;      Totals:         0       2       0
  1336 ;;Total ram usage:        2 bytes
  1337 ;; Hardware stack levels used:    1
  1338 ;; Hardware stack levels required when called:    5
  1339 ;; This function calls:
  1340 ;;		_Init_PWM
  1341 ;;		___awdiv
  1342 ;;		_closeFan
  1343 ;; This function is called by:
  1344 ;;		_checkKeys
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347                           
  1348                           
  1349                           ;psect for function _setFanLevel
  1350  018A                     _setFanLevel:	
  1351                           
  1352                           ;incstack = 0
  1353                           ; Regs used in _setFanLevel: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1354                           ;setFanLevel@level stored from wreg
  1355  018A  00BF               	movwf	setFanLevel@level
  1356                           
  1357                           ;main.c: 90: Init_PWM();
  1358  018B  22A8               	fcall	_Init_PWM
  1359                           
  1360                           ;main.c: 91: if(level == 0)
  1361  018C  083F               	movf	setFanLevel@level,w
  1362  018D  1D03               	btfss	3,2
  1363  018E  2991               	goto	l3235
  1364                           
  1365                           ;main.c: 92: {
  1366                           ;main.c: 93: currentLevel = 2;
  1367  018F  3002               	movlw	2
  1368  0190  00F9               	movwf	_currentLevel
  1369  0191                     l3235:	
  1370                           
  1371                           ;main.c: 94: }
  1372                           ;main.c: 95: unsigned int levelWidth = (PR2 + 1) / 4;
  1373  0191  1683               	bsf	3,5	;RP0=1, select bank1
  1374  0192  0812               	movf	18,w	;volatile
  1375  0193  1283               	bcf	3,5	;RP0=0, select bank0
  1376  0194  00B9               	movwf	___awdiv@dividend
  1377  0195  01BA               	clrf	___awdiv@dividend+1
  1378  0196  0AB9               	incf	___awdiv@dividend,f
  1379  0197  1903               	skipnz
  1380  0198  0ABA               	incf	___awdiv@dividend+1,f
  1381  0199  3004               	movlw	4
  1382  019A  00B7               	movwf	___awdiv@divisor
  1383  019B  01B8               	clrf	___awdiv@divisor+1
  1384  019C  20C3               	fcall	___awdiv
  1385                           
  1386                           ;main.c: 96: char tempLevel = currentLevel + level;
  1387  019D  083F               	movf	setFanLevel@level,w
  1388  019E  0779               	addwf	_currentLevel,w
  1389  019F  00C0               	movwf	setFanLevel@tempLevel
  1390                           
  1391                           ;main.c: 97: if (tempLevel > 4) {
  1392  01A0  3005               	movlw	5
  1393  01A1  0240               	subwf	setFanLevel@tempLevel,w
  1394  01A2  1C03               	skipc
  1395  01A3  29A6               	goto	l3243
  1396                           
  1397                           ;main.c: 98: tempLevel = 1;
  1398  01A4  01C0               	clrf	setFanLevel@tempLevel
  1399  01A5  0AC0               	incf	setFanLevel@tempLevel,f
  1400  01A6                     l3243:	
  1401                           
  1402                           ;main.c: 99: }
  1403                           ;main.c: 102: if (FAN_STATUS == 1) {
  1404  01A6  0B76               	decfsz	_FAN_STATUS,w
  1405  01A7  0008               	return
  1406                           
  1407                           ;main.c: 103: currentLevel = tempLevel;
  1408  01A8  0840               	movf	setFanLevel@tempLevel,w
  1409  01A9  00F9               	movwf	_currentLevel
  1410                           
  1411                           ;main.c: 104: switch(currentLevel)
  1412  01AA  29B5               	goto	l3257
  1413  01AB                     l3247:	
  1414                           
  1415                           ;main.c: 107: closeFan();
  1416  01AB  2A54               	ljmp	l3155
  1417  01AC                     l3249:	
  1418                           ;main.c: 108: break;
  1419                           
  1420                           
  1421                           ;main.c: 110: CCPR1L = 2;
  1422  01AC  3002               	movlw	2
  1423  01AD  0095               	movwf	21	;volatile
  1424                           
  1425                           ;main.c: 111: break;
  1426  01AE  0008               	return
  1427  01AF                     l3251:	
  1428                           
  1429                           ;main.c: 113: CCPR1L = 3;
  1430  01AF  3003               	movlw	3
  1431  01B0  0095               	movwf	21	;volatile
  1432                           
  1433                           ;main.c: 114: break;
  1434  01B1  0008               	return
  1435  01B2                     l3253:	
  1436                           
  1437                           ;main.c: 116: CCPR1L = 5;
  1438  01B2  3005               	movlw	5
  1439  01B3  0095               	movwf	21	;volatile
  1440                           
  1441                           ;main.c: 117: break;
  1442  01B4  0008               	return
  1443  01B5                     l3257:	
  1444  01B5  0879               	movf	_currentLevel,w
  1445                           
  1446                           ; Switch size 1, requested type "space"
  1447                           ; Number of cases is 4, Range of values is 1 to 4
  1448                           ; switch strategies available:
  1449                           ; Name         Instructions Cycles
  1450                           ; simple_byte           13     7 (average)
  1451                           ; direct_byte           13     9 (fixed)
  1452                           ; jumptable            263     9 (fixed)
  1453                           ;	Chosen strategy is simple_byte
  1454  01B6  3A01               	xorlw	1	; case 1
  1455  01B7  1903               	skipnz
  1456  01B8  29AB               	goto	l3247
  1457  01B9  3A03               	xorlw	3	; case 2
  1458  01BA  1903               	skipnz
  1459  01BB  29AC               	goto	l3249
  1460  01BC  3A01               	xorlw	1	; case 3
  1461  01BD  1903               	skipnz
  1462  01BE  29AF               	goto	l3251
  1463  01BF  3A07               	xorlw	7	; case 4
  1464  01C0  1903               	skipnz
  1465  01C1  29B2               	goto	l3253
  1466  01C2  29C3               	goto	l1148
  1467  01C3                     l1148:	
  1468  01C3  0008               	return
  1469  01C4                     __end_of_setFanLevel:	
  1470                           
  1471                           	psect	text9
  1472  0254                     __ptext9:	
  1473 ;; *************** function _closeFan *****************
  1474 ;; Defined at:
  1475 ;;		line 127 in file "E:\project\project0508\scm\n9_fan_no_led\main.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;		None
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;		None
  1480 ;; Return value:  Size  Location     Type
  1481 ;;                  1    wreg      void 
  1482 ;; Registers used:
  1483 ;;		wreg, status,2, status,0, pclath, cstack
  1484 ;; Tracked objects:
  1485 ;;		On entry : 300/0
  1486 ;;		On exit  : 0/0
  1487 ;;		Unchanged: 0/0
  1488 ;; Data sizes:     COMMON   BANK0   BANK1
  1489 ;;      Params:         0       0       0
  1490 ;;      Locals:         0       0       0
  1491 ;;      Temps:          1       0       0
  1492 ;;      Totals:         1       0       0
  1493 ;;Total ram usage:        1 bytes
  1494 ;; Hardware stack levels used:    1
  1495 ;; Hardware stack levels required when called:    4
  1496 ;; This function calls:
  1497 ;;		_Sleep_Mode
  1498 ;; This function is called by:
  1499 ;;		_checkUsbStatus
  1500 ;;		_setFanLevel
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           
  1505                           ;psect for function _closeFan
  1506  0254                     _closeFan:	
  1507  0254                     l3155:	
  1508                           ;incstack = 0
  1509                           ; Regs used in _closeFan: [wreg+status,2+status,0+pclath+cstack]
  1510                           
  1511                           
  1512                           ;main.c: 128: CCP1CON = 0x00;
  1513  0254  0197               	clrf	23	;volatile
  1514                           
  1515                           ;main.c: 129: T2CON = 0X00;
  1516  0255  0192               	clrf	18	;volatile
  1517                           
  1518                           ;main.c: 130: currentLevel = 1;
  1519  0256  01F9               	clrf	_currentLevel
  1520  0257  0AF9               	incf	_currentLevel,f
  1521                           
  1522                           ;main.c: 131: PORTA|=(1<<0);
  1523  0258  1405               	bsf	5,0	;volatile
  1524                           
  1525                           ;main.c: 133: TRISC&=~(1<<2);
  1526  0259  1683               	bsf	3,5	;RP0=1, select bank1
  1527  025A  1107               	bcf	7,2	;volatile
  1528                           
  1529                           ;main.c: 134: PORTC&=~(1<<2);
  1530  025B  1283               	bcf	3,5	;RP0=0, select bank0
  1531  025C  1107               	bcf	7,2	;volatile
  1532                           
  1533                           ;main.c: 135: TRISA&=~(1<<2);
  1534  025D  1683               	bsf	3,5	;RP0=1, select bank1
  1535  025E  1105               	bcf	5,2	;volatile
  1536                           
  1537                           ;main.c: 137: fan_check_time = 0;
  1538  025F  1283               	bcf	3,5	;RP0=0, select bank0
  1539  0260  1105               	bcf	5,2	;volatile
  1540                           
  1541                           ;main.c: 138: FAN_STATUS = 0;
  1542  0261  01F6               	clrf	_FAN_STATUS
  1543                           
  1544                           ;main.c: 140: lowVTime = 0;
  1545  0262  01AF               	clrf	_lowVTime
  1546                           
  1547                           ;main.c: 141: if (((PORTB) >> (2)&1) == 0) {
  1548  0263  0806               	movf	6,w	;volatile
  1549  0264  00F4               	movwf	??_closeFan
  1550  0265  1003               	clrc
  1551  0266  0CF4               	rrf	??_closeFan,f
  1552  0267  1003               	clrc
  1553  0268  0CF4               	rrf	??_closeFan,f
  1554  0269  1874               	btfsc	??_closeFan,0
  1555  026A  0008               	return
  1556                           
  1557                           ;main.c: 142: Sleep_Mode();
  1558  026B  29F5               	ljmp	l3135
  1559  026C                     __end_of_closeFan:	
  1560                           
  1561                           	psect	text10
  1562  01F5                     __ptext10:	
  1563 ;; *************** function _Sleep_Mode *****************
  1564 ;; Defined at:
  1565 ;;		line 278 in file "E:\project\project0508\scm\n9_fan_no_led\main.c"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;		None
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;		None
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  1    wreg      void 
  1572 ;; Registers used:
  1573 ;;		wreg, status,2
  1574 ;; Tracked objects:
  1575 ;;		On entry : 300/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMMON   BANK0   BANK1
  1579 ;;      Params:         0       0       0
  1580 ;;      Locals:         0       0       0
  1581 ;;      Temps:          0       0       0
  1582 ;;      Totals:         0       0       0
  1583 ;;Total ram usage:        0 bytes
  1584 ;; Hardware stack levels used:    1
  1585 ;; Hardware stack levels required when called:    3
  1586 ;; This function calls:
  1587 ;;		Nothing
  1588 ;; This function is called by:
  1589 ;;		_closeFan
  1590 ;;		_main
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           
  1595                           ;psect for function _Sleep_Mode
  1596  01F5                     _Sleep_Mode:	
  1597  01F5                     l3135:	
  1598                           ;incstack = 0
  1599                           ; Regs used in _Sleep_Mode: [wreg+status,2]
  1600                           
  1601                           
  1602                           ;main.c: 279: FAN_STATUS = 0;
  1603  01F5  01F6               	clrf	_FAN_STATUS
  1604                           
  1605                           ;main.c: 280: INTCON = 0;
  1606  01F6  018B               	clrf	11	;volatile
  1607                           
  1608                           ;main.c: 282: OPTION_REG = 0;
  1609  01F7  1683               	bsf	3,5	;RP0=1, select bank1
  1610  01F8  0181               	clrf	1	;volatile
  1611                           
  1612                           ;main.c: 284: TRISA = 0B00000000;
  1613  01F9  0185               	clrf	5	;volatile
  1614                           
  1615                           ;main.c: 285: PORTA = 0B00000001;
  1616  01FA  3001               	movlw	1
  1617  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  1618  01FC  0085               	movwf	5	;volatile
  1619                           
  1620                           ;main.c: 286: WPUA = 0B00000000;
  1621  01FD  1683               	bsf	3,5	;RP0=1, select bank3
  1622  01FE  1703               	bsf	3,6	;RP1=1, select bank3
  1623  01FF  018E               	clrf	14	;volatile
  1624                           
  1625                           ;main.c: 288: TRISB = 0B00100100;
  1626  0200  3024               	movlw	36
  1627  0201  1303               	bcf	3,6	;RP1=0, select bank1
  1628  0202  0086               	movwf	6	;volatile
  1629                           
  1630                           ;main.c: 289: PORTB = 0B00000000;
  1631  0203  1283               	bcf	3,5	;RP0=0, select bank0
  1632  0204  0186               	clrf	6	;volatile
  1633                           
  1634                           ;main.c: 291: TRISC = 0B00000000;
  1635  0205  1683               	bsf	3,5	;RP0=1, select bank1
  1636  0206  0187               	clrf	7	;volatile
  1637                           
  1638                           ;main.c: 292: PORTC = 0B00000010;
  1639  0207  3002               	movlw	2
  1640  0208  1283               	bcf	3,5	;RP0=0, select bank0
  1641  0209  0087               	movwf	7	;volatile
  1642                           
  1643                           ;main.c: 294: WPUB = 0B00100000;
  1644  020A  3020               	movlw	32
  1645  020B  1683               	bsf	3,5	;RP0=1, select bank1
  1646  020C  0095               	movwf	21	;volatile
  1647                           
  1648                           ;main.c: 296: IOCB = 0B00100100;
  1649  020D  3024               	movlw	36
  1650  020E  0096               	movwf	22	;volatile
  1651                           
  1652                           ;main.c: 297: RBIE = 1;
  1653  020F  158B               	bsf	11,3	;volatile
  1654                           
  1655                           ;main.c: 298: GIE = 1;
  1656  0210  178B               	bsf	11,7	;volatile
  1657                           
  1658                           ;main.c: 300: ADCON0 = 0;
  1659  0211  1283               	bcf	3,5	;RP0=0, select bank0
  1660  0212  019F               	clrf	31	;volatile
  1661                           
  1662                           ;main.c: 302: OSCCON = 0X70;
  1663  0213  3070               	movlw	112
  1664  0214  1683               	bsf	3,5	;RP0=1, select bank1
  1665  0215  008F               	movwf	15	;volatile
  1666                           
  1667                           ;main.c: 304: PORTB;
  1668  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1669  0217  0806               	movf	6,w	;volatile
  1670  0218  0064               	clrwdt	;# 
  1671  0219  0063               	sleep	;# 
  1672  021A  0000               	nop	;# 
  1673  021B  0008               	return
  1674  021C                     __end_of_Sleep_Mode:	
  1675                           
  1676                           	psect	text11
  1677  00C3                     __ptext11:	
  1678 ;; *************** function ___awdiv *****************
  1679 ;; Defined at:
  1680 ;;		line 6 in file "E:\cms\SCMCU_IDE_V2.00.07\data\sources\common\awdiv.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;  divisor         2    0[BANK0 ] int 
  1683 ;;  dividend        2    2[BANK0 ] int 
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;  quotient        2    6[BANK0 ] int 
  1686 ;;  sign            1    5[BANK0 ] unsigned char 
  1687 ;;  counter         1    4[BANK0 ] unsigned char 
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  2    0[BANK0 ] int 
  1690 ;; Registers used:
  1691 ;;		wreg, status,2, status,0
  1692 ;; Tracked objects:
  1693 ;;		On entry : 300/0
  1694 ;;		On exit  : 300/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMMON   BANK0   BANK1
  1697 ;;      Params:         0       4       0
  1698 ;;      Locals:         0       4       0
  1699 ;;      Temps:          0       0       0
  1700 ;;      Totals:         0       8       0
  1701 ;;Total ram usage:        8 bytes
  1702 ;; Hardware stack levels used:    1
  1703 ;; Hardware stack levels required when called:    3
  1704 ;; This function calls:
  1705 ;;		Nothing
  1706 ;; This function is called by:
  1707 ;;		_setFanLevel
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           
  1712                           ;psect for function ___awdiv
  1713  00C3                     ___awdiv:	
  1714                           
  1715                           ;incstack = 0
  1716                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1717  00C3  01BC               	clrf	___awdiv@sign
  1718  00C4  1FB8               	btfss	___awdiv@divisor+1,7
  1719  00C5  28CD               	goto	l3193
  1720  00C6  09B7               	comf	___awdiv@divisor,f
  1721  00C7  09B8               	comf	___awdiv@divisor+1,f
  1722  00C8  0AB7               	incf	___awdiv@divisor,f
  1723  00C9  1903               	skipnz
  1724  00CA  0AB8               	incf	___awdiv@divisor+1,f
  1725  00CB  01BC               	clrf	___awdiv@sign
  1726  00CC  0ABC               	incf	___awdiv@sign,f
  1727  00CD                     l3193:	
  1728  00CD  1FBA               	btfss	___awdiv@dividend+1,7
  1729  00CE  28D6               	goto	l3199
  1730  00CF  09B9               	comf	___awdiv@dividend,f
  1731  00D0  09BA               	comf	___awdiv@dividend+1,f
  1732  00D1  0AB9               	incf	___awdiv@dividend,f
  1733  00D2  1903               	skipnz
  1734  00D3  0ABA               	incf	___awdiv@dividend+1,f
  1735  00D4  3001               	movlw	1
  1736  00D5  06BC               	xorwf	___awdiv@sign,f
  1737  00D6                     l3199:	
  1738  00D6  01BD               	clrf	___awdiv@quotient
  1739  00D7  01BE               	clrf	___awdiv@quotient+1
  1740  00D8  0837               	movf	___awdiv@divisor,w
  1741  00D9  0438               	iorwf	___awdiv@divisor+1,w
  1742  00DA  1903               	btfsc	3,2
  1743  00DB  28FB               	goto	l3221
  1744  00DC  01BB               	clrf	___awdiv@counter
  1745  00DD                     L2:	
  1746  00DD  0ABB               	incf	___awdiv@counter,f
  1747  00DE  1BB8               	btfsc	___awdiv@divisor+1,7
  1748  00DF  28E4               	goto	l3209
  1749  00E0  1003               	clrc
  1750  00E1  0DB7               	rlf	___awdiv@divisor,f
  1751  00E2  0DB8               	rlf	___awdiv@divisor+1,f
  1752  00E3  28DD               	goto	L2
  1753  00E4                     l3209:	
  1754  00E4  1003               	clrc
  1755  00E5  0DBD               	rlf	___awdiv@quotient,f
  1756  00E6  0DBE               	rlf	___awdiv@quotient+1,f
  1757  00E7  0838               	movf	___awdiv@divisor+1,w
  1758  00E8  023A               	subwf	___awdiv@dividend+1,w
  1759  00E9  1D03               	skipz
  1760  00EA  28ED               	goto	u1025
  1761  00EB  0837               	movf	___awdiv@divisor,w
  1762  00EC  0239               	subwf	___awdiv@dividend,w
  1763  00ED                     u1025:	
  1764  00ED  1C03               	skipc
  1765  00EE  28F7               	goto	L3
  1766  00EF  0837               	movf	___awdiv@divisor,w
  1767  00F0  02B9               	subwf	___awdiv@dividend,f
  1768  00F1  0838               	movf	___awdiv@divisor+1,w
  1769  00F2  1C03               	skipc
  1770  00F3  03BA               	decf	___awdiv@dividend+1,f
  1771  00F4  02BA               	subwf	___awdiv@dividend+1,f
  1772  00F5  143D               	bsf	___awdiv@quotient,0
  1773  00F6  1003               	clrc
  1774  00F7                     L3:	
  1775  00F7  0CB8               	rrf	___awdiv@divisor+1,f
  1776  00F8  0CB7               	rrf	___awdiv@divisor,f
  1777  00F9  0BBB               	decfsz	___awdiv@counter,f
  1778  00FA  28E4               	goto	l3209
  1779  00FB                     l3221:	
  1780  00FB  083C               	movf	___awdiv@sign,w
  1781  00FC  1903               	btfsc	3,2
  1782  00FD  2903               	goto	l3225
  1783  00FE  09BD               	comf	___awdiv@quotient,f
  1784  00FF  09BE               	comf	___awdiv@quotient+1,f
  1785  0100  0ABD               	incf	___awdiv@quotient,f
  1786  0101  1903               	skipnz
  1787  0102  0ABE               	incf	___awdiv@quotient+1,f
  1788  0103                     l3225:	
  1789  0103  083E               	movf	___awdiv@quotient+1,w
  1790  0104  00B8               	movwf	?___awdiv+1
  1791  0105  083D               	movf	___awdiv@quotient,w
  1792  0106  00B7               	movwf	?___awdiv
  1793  0107  0008               	return
  1794  0108                     __end_of___awdiv:	
  1795                           
  1796                           	psect	text12
  1797  0108                     __ptext12:	
  1798 ;; *************** function _key_driver *****************
  1799 ;; Defined at:
  1800 ;;		line 9 in file "E:\project\project0508\scm\n9_fan_no_led\scankey.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  key             1    wreg     PTR struct Keys
  1803 ;;		 -> key1(7), 
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;  key             1    2[BANK0 ] PTR struct Keys
  1806 ;;		 -> key1(7), 
  1807 ;;  key_read        1    1[BANK0 ] unsigned char 
  1808 ;;  key_return      1    0[BANK0 ] unsigned char 
  1809 ;; Return value:  Size  Location     Type
  1810 ;;                  1    wreg      unsigned char 
  1811 ;; Registers used:
  1812 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1813 ;; Tracked objects:
  1814 ;;		On entry : 300/0
  1815 ;;		On exit  : B00/0
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMMON   BANK0   BANK1
  1818 ;;      Params:         0       0       0
  1819 ;;      Locals:         0       3       0
  1820 ;;      Temps:          0       0       0
  1821 ;;      Totals:         0       3       0
  1822 ;;Total ram usage:        3 bytes
  1823 ;; Hardware stack levels used:    1
  1824 ;; Hardware stack levels required when called:    3
  1825 ;; This function calls:
  1826 ;;		Nothing
  1827 ;; This function is called by:
  1828 ;;		_checkKeys
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           
  1833                           ;psect for function _key_driver
  1834  0108                     _key_driver:	
  1835                           
  1836                           ;incstack = 0
  1837                           ; Regs used in _key_driver: [wreg-fsr0h+status,2+status,0]
  1838                           ;key_driver@key stored from wreg
  1839  0108  00B9               	movwf	key_driver@key
  1840                           
  1841                           ;scankey.c: 12: unsigned char key_return = 0;
  1842  0109  01B7               	clrf	key_driver@key_return
  1843                           
  1844                           ;scankey.c: 13: unsigned char key_read = key->key_input;
  1845  010A  3E04               	addlw	4
  1846  010B  0084               	movwf	4
  1847  010C  1383               	bcf	3,7	;select IRP bank0
  1848  010D  0800               	movf	0,w
  1849  010E  00B8               	movwf	key_driver@key_read
  1850                           
  1851                           ;scankey.c: 15: switch (key->key_state_buffer1) {
  1852  010F  293B               	goto	l3295
  1853  0110                     l3265:	
  1854                           
  1855                           ;scankey.c: 17: if (key_read == 0) {
  1856  0110  0838               	movf	key_driver@key_read,w
  1857  0111  1D03               	btfss	3,2
  1858  0112  2948               	goto	l3297
  1859                           
  1860                           ;scankey.c: 18: key->key_state_buffer1 = 1;
  1861  0113  0A39               	incf	key_driver@key,w
  1862  0114  0084               	movwf	4
  1863  0115  0180               	clrf	0
  1864  0116  0A80               	incf	0,f
  1865  0117  2948               	goto	l3297
  1866  0118                     l3269:	
  1867                           
  1868                           ;scankey.c: 25: if (key_read == 0) {
  1869  0118  0838               	movf	key_driver@key_read,w
  1870  0119  1D03               	btfss	3,2
  1871  011A  2937               	goto	l3291
  1872                           
  1873                           ;scankey.c: 26: key->key_timer_cnt1 = 0;
  1874  011B  0839               	movf	key_driver@key,w
  1875  011C  0084               	movwf	4
  1876  011D  0180               	clrf	0
  1877                           
  1878                           ;scankey.c: 27: key->key_state_buffer1 = 2;
  1879  011E  0A39               	incf	key_driver@key,w
  1880  011F  0084               	movwf	4
  1881  0120  3002               	movlw	2
  1882  0121  2933               	goto	L4
  1883  0122                     l3277:	
  1884                           ;scankey.c: 32: key->key_state_buffer1 = 0;
  1885                           
  1886                           ;scankey.c: 31: } else {
  1887                           
  1888                           
  1889                           ;scankey.c: 39: if (key_read == 1) {
  1890  0122  0B38               	decfsz	key_driver@key_read,w
  1891  0123  2927               	goto	l3283
  1892                           
  1893                           ;scankey.c: 40: key_return = 1;
  1894  0124  01B7               	clrf	key_driver@key_return
  1895  0125  0AB7               	incf	key_driver@key_return,f
  1896  0126  2937               	goto	l3291
  1897  0127                     l3283:	
  1898                           ;scankey.c: 42: } else if (++(key->key_timer_cnt1) >= 100)
  1899                           
  1900                           ;scankey.c: 41: key->key_state_buffer1 = 0;
  1901                           
  1902  0127  0839               	movf	key_driver@key,w
  1903  0128  0084               	movwf	4
  1904  0129  3064               	movlw	100
  1905  012A  0A80               	incf	0,f
  1906  012B  0200               	subwf	0,w
  1907  012C  1C03               	skipc
  1908  012D  2948               	goto	l3297
  1909                           
  1910                           ;scankey.c: 43: {
  1911                           ;scankey.c: 44: key_return = 3;
  1912  012E  3003               	movlw	3
  1913  012F  00B7               	movwf	key_driver@key_return
  1914                           
  1915                           ;scankey.c: 45: key->key_state_buffer1 = 3;
  1916  0130  0A39               	incf	key_driver@key,w
  1917  0131  0084               	movwf	4
  1918  0132  3003               	movlw	3
  1919  0133                     L4:	
  1920  0133  0080               	movwf	0
  1921  0134  2948               	goto	l3297
  1922  0135                     l3289:	
  1923                           
  1924                           ;scankey.c: 51: if (key_read == 1)
  1925  0135  0B38               	decfsz	key_driver@key_read,w
  1926  0136  2948               	goto	l3297
  1927  0137                     l3291:	
  1928                           
  1929                           ;scankey.c: 52: {
  1930                           ;scankey.c: 53: key->key_state_buffer1 = 0;
  1931  0137  0A39               	incf	key_driver@key,w
  1932  0138  0084               	movwf	4
  1933  0139  0180               	clrf	0
  1934  013A  2948               	goto	l3297
  1935  013B                     l3295:	
  1936  013B  0A39               	incf	key_driver@key,w
  1937  013C  0084               	movwf	4
  1938  013D  0800               	movf	0,w
  1939                           
  1940                           ; Switch size 1, requested type "space"
  1941                           ; Number of cases is 4, Range of values is 0 to 3
  1942                           ; switch strategies available:
  1943                           ; Name         Instructions Cycles
  1944                           ; direct_byte           10     6 (fixed)
  1945                           ; simple_byte           13     7 (average)
  1946                           ; jumptable            260     6 (fixed)
  1947                           ;	Chosen strategy is direct_byte
  1948  013E  0084               	movwf	4
  1949  013F  3004               	movlw	4
  1950  0140  0204               	subwf	4,w
  1951  0141  1803               	skipnc
  1952  0142  2948               	goto	l3297
  1953  0143  3003               	movlw	high S3507
  1954  0144  008A               	movwf	10
  1955  0145  3022               	movlw	low S3507
  1956  0146  0704               	addwf	4,w
  1957  0147  0082               	movwf	2
  1958  0148                     l3297:	
  1959                           
  1960                           ;scankey.c: 58: return key_return;
  1961  0148  0837               	movf	key_driver@key_return,w
  1962  0149  0008               	return
  1963  014A                     __end_of_key_driver:	
  1964                           
  1965                           	psect	swtext1
  1966  0322                     __pswtext1:	
  1967  0322                     S3507:	
  1968  0322  2910               	ljmp	l3265
  1969  0323  2918               	ljmp	l3269
  1970  0324  2922               	ljmp	l3277
  1971  0325  2935               	ljmp	l3289
  1972                           
  1973                           	psect	text13
  1974  02E7                     __ptext13:	
  1975 ;; *************** function _checkFan *****************
  1976 ;; Defined at:
  1977 ;;		line 149 in file "E:\project\project0508\scm\n9_fan_no_led\main.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;		None
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;		None
  1982 ;; Return value:  Size  Location     Type
  1983 ;;                  1    wreg      void 
  1984 ;; Registers used:
  1985 ;;		wreg
  1986 ;; Tracked objects:
  1987 ;;		On entry : 0/0
  1988 ;;		On exit  : 300/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMMON   BANK0   BANK1
  1991 ;;      Params:         0       0       0
  1992 ;;      Locals:         0       0       0
  1993 ;;      Temps:          0       0       0
  1994 ;;      Totals:         0       0       0
  1995 ;;Total ram usage:        0 bytes
  1996 ;; Hardware stack levels used:    1
  1997 ;; Hardware stack levels required when called:    3
  1998 ;; This function calls:
  1999 ;;		Nothing
  2000 ;; This function is called by:
  2001 ;;		_checkKeys
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           
  2006                           ;psect for function _checkFan
  2007  02E7                     _checkFan:	
  2008  02E7                     l2803:	
  2009                           ;incstack = 0
  2010                           ; Regs used in _checkFan: [wreg]
  2011                           
  2012                           
  2013                           ;main.c: 150: TRISA&=~(1<<1);
  2014  02E7  1683               	bsf	3,5	;RP0=1, select bank1
  2015  02E8  1303               	bcf	3,6	;RP1=0, select bank1
  2016  02E9  1085               	bcf	5,1	;volatile
  2017                           
  2018                           ;main.c: 151: PORTA&=~(1<<1);
  2019  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  2020  02EB  1085               	bcf	5,1	;volatile
  2021                           
  2022                           ;main.c: 153: TRISC&=~(1<<2);
  2023  02EC  1683               	bsf	3,5	;RP0=1, select bank1
  2024  02ED  1107               	bcf	7,2	;volatile
  2025                           
  2026                           ;main.c: 154: PORTA|=(1<<2);
  2027  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  2028  02EF  1505               	bsf	5,2	;volatile
  2029                           
  2030                           ;main.c: 155: T2CON = 0X04;
  2031  02F0  3004               	movlw	4
  2032  02F1  0092               	movwf	18	;volatile
  2033  02F2  0008               	return
  2034  02F3                     __end_of_checkFan:	
  2035                           
  2036                           	psect	text14
  2037  0239                     __ptext14:	
  2038 ;; *************** function _Init_Config *****************
  2039 ;; Defined at:
  2040 ;;		line 251 in file "E:\project\project0508\scm\n9_fan_no_led\main.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;		None
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;		None
  2045 ;; Return value:  Size  Location     Type
  2046 ;;                  1    wreg      void 
  2047 ;; Registers used:
  2048 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2049 ;; Tracked objects:
  2050 ;;		On entry : 0/0
  2051 ;;		On exit  : 0/0
  2052 ;;		Unchanged: 0/0
  2053 ;; Data sizes:     COMMON   BANK0   BANK1
  2054 ;;      Params:         0       0       0
  2055 ;;      Locals:         0       0       0
  2056 ;;      Temps:          0       0       0
  2057 ;;      Totals:         0       0       0
  2058 ;;Total ram usage:        0 bytes
  2059 ;; Hardware stack levels used:    1
  2060 ;; Hardware stack levels required when called:    4
  2061 ;; This function calls:
  2062 ;;		_Init_GPIO
  2063 ;;		_Init_Interupt
  2064 ;;		_Init_PWM
  2065 ;;		_Init_System
  2066 ;;		_resetKey
  2067 ;; This function is called by:
  2068 ;;		_main
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           
  2073                           ;psect for function _Init_Config
  2074  0239                     _Init_Config:	
  2075                           
  2076                           ;main.c: 252: if(FAN_STATUS == 1)
  2077                           
  2078                           ;incstack = 0
  2079                           ; Regs used in _Init_Config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2080  0239  0B76               	decfsz	_FAN_STATUS,w
  2081  023A  2A3C               	goto	l3417
  2082  023B  0008               	return
  2083  023C                     l3417:	
  2084                           
  2085                           ;main.c: 255: }
  2086                           ;main.c: 256: Init_System();
  2087  023C  2326               	fcall	_Init_System
  2088                           
  2089                           ;main.c: 257: Init_GPIO();
  2090  023D  2295               	fcall	_Init_GPIO
  2091                           
  2092                           ;main.c: 258: Init_Interupt();
  2093  023E  2311               	fcall	_Init_Interupt
  2094                           
  2095                           ;main.c: 259: Init_PWM();
  2096  023F  22A8               	fcall	_Init_PWM
  2097                           
  2098                           ;main.c: 261: IOCB = 0x04;
  2099                           
  2100                           ;main.c: 262: TMR0 = 155;
  2101                           
  2102                           ;main.c: 263: TO = 0;
  2103                           
  2104                           ;main.c: 266: key1.key_index = 5;
  2105                           
  2106                           ;main.c: 268: resetKey(&key1);
  2107  0240  2244               	fcall	PL8	;call to abstracted procedure
  2108  0241  22BA               	fcall	_resetKey
  2109                           
  2110                           ;main.c: 271: TRISA = 0;
  2111                           
  2112                           ;main.c: 272: TRISB = 0x7E;
  2113                           
  2114                           ;main.c: 273: TRISC = 0;
  2115  0242  224E               	fcall	PL14	;call to abstracted procedure
  2116                           
  2117                           ;main.c: 274: Init_PWM();
  2118  0243  2AA9               	ljmp	PL4
  2119  0244                     __end_of_Init_Config:	
  2120  0244                     PL8:	
  2121  0244  3004               	movlw	4
  2122  0245  1683               	bsf	3,5	;RP0=1, select bank1
  2123  0246  0096               	movwf	22	;volatile
  2124  0247  309B               	movlw	155
  2125  0248  1283               	bcf	3,5	;RP0=0, select bank0
  2126  0249  0081               	movwf	1	;volatile
  2127  024A  1203               	bcf	3,4	;volatile
  2128  024B  3005               	movlw	5
  2129  024C  00B6               	movwf	_key1+6
  2130  024D  3430               	retlw	(low (_key1| 0))& (0+255)
  2131  024E                     __end_ofPL8:	
  2132  024E                     PL14:	
  2133  024E  1683               	bsf	3,5	;RP0=1, select bank1
  2134  024F  0185               	clrf	5	;volatile
  2135  0250  307E               	movlw	126
  2136  0251  0086               	movwf	6	;volatile
  2137  0252  0187               	clrf	7	;volatile
  2138  0253  0008               	return
  2139  0254                     __end_ofPL14:	
  2140                           
  2141                           	psect	text15
  2142  02BA                     __ptext15:	
  2143 ;; *************** function _resetKey *****************
  2144 ;; Defined at:
  2145 ;;		line 100 in file "E:\project\project0508\scm\n9_fan_no_led\scankey.c"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;  key             1    wreg     PTR struct Keys
  2148 ;;		 -> key1(7), 
  2149 ;; Auto vars:     Size  Location     Type
  2150 ;;  key             1    4[COMMON] PTR struct Keys
  2151 ;;		 -> key1(7), 
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  1    wreg      void 
  2154 ;; Registers used:
  2155 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2156 ;; Tracked objects:
  2157 ;;		On entry : 300/0
  2158 ;;		On exit  : B00/0
  2159 ;;		Unchanged: 300/0
  2160 ;; Data sizes:     COMMON   BANK0   BANK1
  2161 ;;      Params:         0       0       0
  2162 ;;      Locals:         1       0       0
  2163 ;;      Temps:          0       0       0
  2164 ;;      Totals:         1       0       0
  2165 ;;Total ram usage:        1 bytes
  2166 ;; Hardware stack levels used:    1
  2167 ;; Hardware stack levels required when called:    3
  2168 ;; This function calls:
  2169 ;;		Nothing
  2170 ;; This function is called by:
  2171 ;;		_Init_Config
  2172 ;; This function uses a non-reentrant model
  2173 ;;
  2174                           
  2175                           
  2176                           ;psect for function _resetKey
  2177  02BA                     _resetKey:	
  2178                           
  2179                           ;incstack = 0
  2180                           ; Regs used in _resetKey: [wreg-fsr0h+status,2+status,0]
  2181                           ;resetKey@key stored from wreg
  2182  02BA  00F4               	movwf	resetKey@key
  2183                           
  2184                           ;scankey.c: 101: key->key_timer_cnt1 = key->key_timer_cnt2 = key->key_state_buffer1 = ke
      +                          y->key_state_buffer2 = 0;
  2185  02BB  3E03               	addlw	3
  2186  02BC  0084               	movwf	4
  2187  02BD  1383               	bcf	3,7	;select IRP bank0
  2188  02BE  0180               	clrf	0
  2189  02BF  0A74               	incf	resetKey@key,w
  2190  02C0  0084               	movwf	4
  2191  02C1  0180               	clrf	0
  2192  02C2  0874               	movf	resetKey@key,w
  2193  02C3  3E02               	addlw	2
  2194  02C4  0084               	movwf	4
  2195  02C5  0180               	clrf	0
  2196  02C6  0874               	movf	resetKey@key,w
  2197  02C7  0084               	movwf	4
  2198  02C8  0180               	clrf	0
  2199  02C9  0008               	return
  2200  02CA                     __end_of_resetKey:	
  2201                           
  2202                           	psect	text16
  2203  0326                     __ptext16:	
  2204 ;; *************** function _Init_System *****************
  2205 ;; Defined at:
  2206 ;;		line 3 in file "E:\project\project0508\scm\n9_fan_no_led\init.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;		None
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;		None
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  1    wreg      void 
  2213 ;; Registers used:
  2214 ;;		wreg, status,2
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 300/100
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMMON   BANK0   BANK1
  2220 ;;      Params:         0       0       0
  2221 ;;      Locals:         0       0       0
  2222 ;;      Temps:          0       0       0
  2223 ;;      Totals:         0       0       0
  2224 ;;Total ram usage:        0 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    3
  2227 ;; This function calls:
  2228 ;;		Nothing
  2229 ;; This function is called by:
  2230 ;;		_Init_Config
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           
  2235                           ;psect for function _Init_System
  2236  0326                     _Init_System:	
  2237                           
  2238                           ;incstack = 0
  2239                           ; Regs used in _Init_System: [wreg+status,2]
  2240  0326  0000               	nop	;# 
  2241  0327  0064               	clrwdt	;# 
  2242                           
  2243                           ;init.c: 6: INTCON = 0;
  2244                           
  2245                           ;init.c: 7: OSCCON = 0X71;
  2246                           
  2247                           ;init.c: 8: OPTION_REG = 0x00;
  2248  0328  2B02               	ljmp	PL10	;call to abstracted procedure
  2249  0329                     __end_of_Init_System:	
  2250                           
  2251                           	psect	text17
  2252  02A8                     __ptext17:	
  2253 ;; *************** function _Init_PWM *****************
  2254 ;; Defined at:
  2255 ;;		line 75 in file "E:\project\project0508\scm\n9_fan_no_led\main.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;		None
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;		None
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  1    wreg      void 
  2262 ;; Registers used:
  2263 ;;		wreg, status,2
  2264 ;; Tracked objects:
  2265 ;;		On entry : 200/0
  2266 ;;		On exit  : 300/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMMON   BANK0   BANK1
  2269 ;;      Params:         0       0       0
  2270 ;;      Locals:         0       0       0
  2271 ;;      Temps:          0       0       0
  2272 ;;      Totals:         0       0       0
  2273 ;;Total ram usage:        0 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    3
  2276 ;; This function calls:
  2277 ;;		Nothing
  2278 ;; This function is called by:
  2279 ;;		_setFanLevel
  2280 ;;		_Init_Config
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           
  2285                           ;psect for function _Init_PWM
  2286  02A8                     _Init_PWM:	
  2287                           
  2288                           ;main.c: 76: CCP1CON = 0x0F;
  2289                           
  2290                           ;main.c: 77: T2CON = 0;
  2291                           
  2292                           ;main.c: 78: PR2 = 7;
  2293                           
  2294                           ;main.c: 80: CCPR1L = 0;
  2295                           
  2296                           ;main.c: 81: TMR2IF = 0;
  2297                           
  2298                           ;main.c: 82: T2CON = 0;
  2299                           
  2300                           ;main.c: 84: TRISC&=~(1<<2);
  2301                           
  2302                           ;main.c: 85: T2CON = 0X04;
  2303                           
  2304                           ;incstack = 0
  2305                           ; Regs used in _Init_PWM: [wreg+status,2]
  2306  02A8  2AA9               	ljmp	PL4	;call to abstracted procedure
  2307  02A9                     __end_of_Init_PWM:	
  2308  02A9                     PL4:	
  2309  02A9  300F               	movlw	15
  2310  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2311  02AB  0097               	movwf	23	;volatile
  2312  02AC  0192               	clrf	18	;volatile
  2313  02AD  3007               	movlw	7
  2314  02AE  1683               	bsf	3,5	;RP0=1, select bank1
  2315  02AF  0092               	movwf	18	;volatile
  2316  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  2317  02B1  0195               	clrf	21	;volatile
  2318  02B2  108C               	bcf	12,1	;volatile
  2319  02B3  0192               	clrf	18	;volatile
  2320  02B4  1683               	bsf	3,5	;RP0=1, select bank1
  2321  02B5  1107               	bcf	7,2	;volatile
  2322  02B6  3004               	movlw	4
  2323  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  2324  02B8  0092               	movwf	18	;volatile
  2325  02B9  0008               	return
  2326  02BA                     __end_ofPL4:	
  2327                           
  2328                           	psect	text18
  2329  0311                     __ptext18:	
  2330 ;; *************** function _Init_Interupt *****************
  2331 ;; Defined at:
  2332 ;;		line 27 in file "E:\project\project0508\scm\n9_fan_no_led\init.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;		None
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;		None
  2337 ;; Return value:  Size  Location     Type
  2338 ;;                  1    wreg      void 
  2339 ;; Registers used:
  2340 ;;		wreg, status,2
  2341 ;; Tracked objects:
  2342 ;;		On entry : 300/100
  2343 ;;		On exit  : 300/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMMON   BANK0   BANK1
  2346 ;;      Params:         0       0       0
  2347 ;;      Locals:         0       0       0
  2348 ;;      Temps:          0       0       0
  2349 ;;      Totals:         0       0       0
  2350 ;;Total ram usage:        0 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    3
  2353 ;; This function calls:
  2354 ;;		Nothing
  2355 ;; This function is called by:
  2356 ;;		_Init_Config
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           
  2361                           ;psect for function _Init_Interupt
  2362  0311                     _Init_Interupt:	
  2363                           
  2364                           ;init.c: 28: OPTION_REG = 0x00;
  2365                           
  2366                           ;incstack = 0
  2367                           ; Regs used in _Init_Interupt: [wreg+status,2]
  2368                           
  2369                           ;init.c: 29: TMR0 = 0;
  2370                           
  2371                           ;init.c: 30: INTCON = 0xE0;
  2372  0311  2B12               	ljmp	PL12	;call to abstracted procedure
  2373  0312                     __end_of_Init_Interupt:	
  2374  0312                     PL12:	
  2375  0312  0181               	clrf	1	;volatile
  2376  0313  1283               	bcf	3,5	;RP0=0, select bank0
  2377  0314  0181               	clrf	1	;volatile
  2378  0315  30E0               	movlw	224
  2379  0316  008B               	movwf	11	;volatile
  2380  0317  0008               	return
  2381  0318                     __end_ofPL12:	
  2382                           
  2383                           	psect	text19
  2384  0295                     __ptext19:	
  2385 ;; *************** function _Init_GPIO *****************
  2386 ;; Defined at:
  2387 ;;		line 13 in file "E:\project\project0508\scm\n9_fan_no_led\init.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;		None
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;		None
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      void 
  2394 ;; Registers used:
  2395 ;;		wreg, status,2
  2396 ;; Tracked objects:
  2397 ;;		On entry : 300/100
  2398 ;;		On exit  : 300/100
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMMON   BANK0   BANK1
  2401 ;;      Params:         0       0       0
  2402 ;;      Locals:         0       0       0
  2403 ;;      Temps:          0       0       0
  2404 ;;      Totals:         0       0       0
  2405 ;;Total ram usage:        0 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    3
  2408 ;; This function calls:
  2409 ;;		Nothing
  2410 ;; This function is called by:
  2411 ;;		_Init_Config
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           
  2416                           ;psect for function _Init_GPIO
  2417  0295                     _Init_GPIO:	
  2418                           
  2419                           ;init.c: 14: TRISA = 0;
  2420                           
  2421                           ;incstack = 0
  2422                           ; Regs used in _Init_GPIO: [wreg+status,2]
  2423                           
  2424                           ;init.c: 15: TRISB = 0;
  2425                           
  2426                           ;init.c: 16: TRISC = 0;
  2427                           
  2428                           ;init.c: 17: WPUA = 0xFF;
  2429                           
  2430                           ;init.c: 18: WPUB = 0xFF;
  2431                           
  2432                           ;init.c: 19: WPUC = 0xFF;
  2433                           
  2434                           ;init.c: 20: PORTA = 0xFF;
  2435                           
  2436                           ;init.c: 21: PORTB = 0xFF;
  2437                           
  2438                           ;init.c: 22: PORTC = 0xFF;
  2439                           
  2440                           ;init.c: 23: IOCB = 0x00;
  2441  0295  2A96               	ljmp	PL2	;call to abstracted procedure
  2442  0296                     __end_of_Init_GPIO:	
  2443  0296                     PL2:	
  2444  0296  0185               	clrf	5	;volatile
  2445  0297  0186               	clrf	6	;volatile
  2446  0298  0187               	clrf	7	;volatile
  2447  0299  30FF               	movlw	255
  2448  029A  1703               	bsf	3,6	;RP1=1, select bank3
  2449  029B  008E               	movwf	14	;volatile
  2450  029C  1303               	bcf	3,6	;RP1=0, select bank1
  2451  029D  0095               	movwf	21	;volatile
  2452  029E  1703               	bsf	3,6	;RP1=1, select bank3
  2453  029F  008F               	movwf	15	;volatile
  2454  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  2455  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  2456  02A2  0085               	movwf	5	;volatile
  2457  02A3  0086               	movwf	6	;volatile
  2458  02A4  0087               	movwf	7	;volatile
  2459  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  2460  02A6  0196               	clrf	22	;volatile
  2461  02A7  0008               	return
  2462  02A8                     __end_ofPL2:	
  2463                           
  2464                           	psect	text20
  2465  026C                     __ptext20:	
  2466 ;; *************** function _Timer0_Isr *****************
  2467 ;; Defined at:
  2468 ;;		line 325 in file "E:\project\project0508\scm\n9_fan_no_led\main.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;		None
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;		None
  2473 ;; Return value:  Size  Location     Type
  2474 ;;                  1    wreg      void 
  2475 ;; Registers used:
  2476 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2477 ;; Tracked objects:
  2478 ;;		On entry : 0/0
  2479 ;;		On exit  : 0/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMMON   BANK0   BANK1
  2482 ;;      Params:         0       0       0
  2483 ;;      Locals:         0       0       0
  2484 ;;      Temps:          3       0       0
  2485 ;;      Totals:         3       0       0
  2486 ;;Total ram usage:        3 bytes
  2487 ;; Hardware stack levels used:    1
  2488 ;; Hardware stack levels required when called:    2
  2489 ;; This function calls:
  2490 ;;		i1_Init_Config
  2491 ;; This function is called by:
  2492 ;;		Interrupt level 1
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496                           
  2497                           ;psect for function _Timer0_Isr
  2498  026C                     _Timer0_Isr:	
  2499                           
  2500                           ;main.c: 326: if (T0IF) {
  2501  026C  1D0B               	btfss	11,2	;volatile
  2502  026D  2A75               	goto	i1l3099
  2503                           
  2504                           ;main.c: 328: TMR0 += 155;
  2505  026E  309B               	movlw	155
  2506  026F  1283               	bcf	3,5	;RP0=0, select bank0
  2507  0270  1303               	bcf	3,6	;RP1=0, select bank0
  2508  0271  0781               	addwf	1,f	;volatile
  2509                           
  2510                           ;main.c: 331: T0IF = 0;
  2511  0272  110B               	bcf	11,2	;volatile
  2512                           
  2513                           ;main.c: 332: time0Flag = 1;
  2514  0273  01F8               	clrf	_time0Flag
  2515  0274  0AF8               	incf	_time0Flag,f
  2516  0275                     i1l3099:	
  2517                           
  2518                           ;main.c: 334: }
  2519                           ;main.c: 336: if (RBIF) {
  2520  0275  1C0B               	btfss	11,0	;volatile
  2521  0276  2A79               	goto	i1l1193
  2522                           
  2523                           ;main.c: 337: RBIF = 0;
  2524  0277  100B               	bcf	11,0	;volatile
  2525                           
  2526                           ;main.c: 338: Init_Config();
  2527  0278  22F3               	fcall	i1_Init_Config
  2528  0279                     i1l1193:	
  2529  0279  0873               	movf	??_Timer0_Isr+2,w
  2530  027A  008A               	movwf	10
  2531  027B  0872               	movf	??_Timer0_Isr+1,w
  2532  027C  0084               	movwf	4
  2533  027D  0E71               	swapf	??_Timer0_Isr^(0+-128),w
  2534  027E  0083               	movwf	3
  2535  027F  0EFE               	swapf	126,f
  2536  0280  0E7E               	swapf	126,w
  2537  0281  0009               	retfie
  2538  0282                     __end_of_Timer0_Isr:	
  2539                           
  2540                           	psect	intentry
  2541  0004                     __pintentry:	
  2542                           ;incstack = 0
  2543                           ; Regs used in _Timer0_Isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2544                           
  2545  0004                     interrupt_function:	
  2546  007E                     saved_w	set	btemp
  2547  0004  00FE               	movwf	btemp
  2548  0005  0E03               	swapf	3,w
  2549  0006  00F1               	movwf	??_Timer0_Isr
  2550  0007  0804               	movf	4,w
  2551  0008  00F2               	movwf	??_Timer0_Isr+1
  2552  0009  080A               	movf	10,w
  2553  000A  00F3               	movwf	??_Timer0_Isr+2
  2554  000B  2A6C               	ljmp	_Timer0_Isr
  2555                           
  2556                           	psect	text21
  2557  02F3                     __ptext21:	
  2558 ;; *************** function i1_Init_Config *****************
  2559 ;; Defined at:
  2560 ;;		line 251 in file "E:\project\project0508\scm\n9_fan_no_led\main.c"
  2561 ;; Parameters:    Size  Location     Type
  2562 ;;		None
  2563 ;; Auto vars:     Size  Location     Type
  2564 ;;		None
  2565 ;; Return value:  Size  Location     Type
  2566 ;;                  1    wreg      void 
  2567 ;; Registers used:
  2568 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2569 ;; Tracked objects:
  2570 ;;		On entry : 0/0
  2571 ;;		On exit  : 0/0
  2572 ;;		Unchanged: 0/0
  2573 ;; Data sizes:     COMMON   BANK0   BANK1
  2574 ;;      Params:         0       0       0
  2575 ;;      Locals:         0       0       0
  2576 ;;      Temps:          0       0       0
  2577 ;;      Totals:         0       0       0
  2578 ;;Total ram usage:        0 bytes
  2579 ;; Hardware stack levels used:    1
  2580 ;; Hardware stack levels required when called:    1
  2581 ;; This function calls:
  2582 ;;		i1_Init_GPIO
  2583 ;;		i1_Init_Interupt
  2584 ;;		i1_Init_PWM
  2585 ;;		i1_Init_System
  2586 ;;		i1_resetKey
  2587 ;; This function is called by:
  2588 ;;		_Timer0_Isr
  2589 ;; This function uses a non-reentrant model
  2590 ;;
  2591                           
  2592                           
  2593                           ;psect for function i1_Init_Config
  2594  02F3                     i1_Init_Config:	
  2595                           
  2596                           ;main.c: 252: if(FAN_STATUS == 1)
  2597                           
  2598                           ;incstack = 0
  2599                           ; Regs used in i1_Init_Config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2600  02F3  0B76               	decfsz	_FAN_STATUS,w
  2601  02F4  2AF6               	goto	i1l3035
  2602  02F5  0008               	return
  2603  02F6                     i1l3035:	
  2604                           
  2605                           ;main.c: 255: }
  2606                           ;main.c: 256: Init_System();
  2607  02F6  22FF               	fcall	i1_Init_System
  2608                           
  2609                           ;main.c: 257: Init_GPIO();
  2610  02F7  232B               	fcall	i1_Init_GPIO
  2611                           
  2612                           ;main.c: 258: Init_Interupt();
  2613  02F8  232A               	fcall	i1_Init_Interupt
  2614                           
  2615                           ;main.c: 259: Init_PWM();
  2616  02F9  2329               	fcall	i1_Init_PWM
  2617                           
  2618                           ;main.c: 261: IOCB = 0x04;
  2619                           
  2620                           ;main.c: 262: TMR0 = 155;
  2621                           
  2622                           ;main.c: 263: TO = 0;
  2623                           
  2624                           ;main.c: 266: key1.key_index = 5;
  2625                           
  2626                           ;main.c: 268: resetKey(&key1);
  2627  02FA  2244               	fcall	PL8	;call to abstracted procedure
  2628  02FB  22CA               	fcall	i1_resetKey
  2629                           
  2630                           ;main.c: 271: TRISA = 0;
  2631                           
  2632                           ;main.c: 272: TRISB = 0x7E;
  2633                           
  2634                           ;main.c: 273: TRISC = 0;
  2635  02FC  224E               	fcall	PL14	;call to abstracted procedure
  2636                           
  2637                           ;main.c: 274: Init_PWM();
  2638  02FD  2329               	fcall	i1_Init_PWM
  2639  02FE  0008               	return
  2640  02FF                     __end_ofi1_Init_Config:	
  2641                           
  2642                           	psect	text22
  2643  02CA                     __ptext22:	
  2644 ;; *************** function i1_resetKey *****************
  2645 ;; Defined at:
  2646 ;;		line 100 in file "E:\project\project0508\scm\n9_fan_no_led\scankey.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;  key             1    wreg     PTR struct Keys
  2649 ;;		 -> key1(7), 
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;  key             1    0[COMMON] PTR struct Keys
  2652 ;;		 -> key1(7), 
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  1    wreg      void 
  2655 ;; Registers used:
  2656 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2657 ;; Tracked objects:
  2658 ;;		On entry : 300/0
  2659 ;;		On exit  : B00/0
  2660 ;;		Unchanged: 300/0
  2661 ;; Data sizes:     COMMON   BANK0   BANK1
  2662 ;;      Params:         0       0       0
  2663 ;;      Locals:         1       0       0
  2664 ;;      Temps:          0       0       0
  2665 ;;      Totals:         1       0       0
  2666 ;;Total ram usage:        1 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; This function calls:
  2669 ;;		Nothing
  2670 ;; This function is called by:
  2671 ;;		i1_Init_Config
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675                           
  2676                           ;psect for function i1_resetKey
  2677  02CA                     i1_resetKey:	
  2678                           
  2679                           ;incstack = 0
  2680                           ; Regs used in i1_resetKey: [wreg-fsr0h+status,2+status,0]
  2681                           ;i1resetKey@key stored from wreg
  2682  02CA  00F0               	movwf	i1resetKey@key
  2683                           
  2684                           ;scankey.c: 101: key->key_timer_cnt1 = key->key_timer_cnt2 = key->key_state_buffer1 = ke
      +                          y->key_state_buffer2 = 0;
  2685  02CB  3E03               	addlw	3
  2686  02CC  0084               	movwf	4
  2687  02CD  1383               	bcf	3,7	;select IRP bank0
  2688  02CE  0180               	clrf	0
  2689  02CF  0A70               	incf	i1resetKey@key,w
  2690  02D0  0084               	movwf	4
  2691  02D1  0180               	clrf	0
  2692  02D2  0870               	movf	i1resetKey@key,w
  2693  02D3  3E02               	addlw	2
  2694  02D4  0084               	movwf	4
  2695  02D5  0180               	clrf	0
  2696  02D6  0870               	movf	i1resetKey@key,w
  2697  02D7  0084               	movwf	4
  2698  02D8  0180               	clrf	0
  2699  02D9  0008               	return
  2700  02DA                     __end_ofi1_resetKey:	
  2701                           
  2702                           	psect	text23
  2703  02FF                     __ptext23:	
  2704 ;; *************** function i1_Init_System *****************
  2705 ;; Defined at:
  2706 ;;		line 3 in file "E:\project\project0508\scm\n9_fan_no_led\init.c"
  2707 ;; Parameters:    Size  Location     Type
  2708 ;;		None
  2709 ;; Auto vars:     Size  Location     Type
  2710 ;;		None
  2711 ;; Return value:  Size  Location     Type
  2712 ;;                  1    wreg      void 
  2713 ;; Registers used:
  2714 ;;		wreg, status,2
  2715 ;; Tracked objects:
  2716 ;;		On entry : 0/0
  2717 ;;		On exit  : 300/100
  2718 ;;		Unchanged: 0/0
  2719 ;; Data sizes:     COMMON   BANK0   BANK1
  2720 ;;      Params:         0       0       0
  2721 ;;      Locals:         0       0       0
  2722 ;;      Temps:          0       0       0
  2723 ;;      Totals:         0       0       0
  2724 ;;Total ram usage:        0 bytes
  2725 ;; Hardware stack levels used:    1
  2726 ;; This function calls:
  2727 ;;		Nothing
  2728 ;; This function is called by:
  2729 ;;		i1_Init_Config
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           
  2734                           ;psect for function i1_Init_System
  2735  02FF                     i1_Init_System:	
  2736                           
  2737                           ;incstack = 0
  2738                           ; Regs used in i1_Init_System: [wreg+status,2]
  2739  02FF  0000               	nop	;# 
  2740  0300  0064               	clrwdt	;# 
  2741                           
  2742                           ;init.c: 6: INTCON = 0;
  2743                           
  2744                           ;init.c: 7: OSCCON = 0X71;
  2745                           
  2746                           ;init.c: 8: OPTION_REG = 0x00;
  2747  0301  2B02               	ljmp	PL10	;call to abstracted procedure
  2748  0302                     __end_ofi1_Init_System:	
  2749  0302                     PL10:	
  2750  0302  018B               	clrf	11	;volatile
  2751  0303  3071               	movlw	113
  2752  0304  1683               	bsf	3,5	;RP0=1, select bank1
  2753  0305  1303               	bcf	3,6	;RP1=0, select bank1
  2754  0306  008F               	movwf	15	;volatile
  2755  0307  0181               	clrf	1	;volatile
  2756  0308  0008               	return
  2757  0309                     __end_ofPL10:	
  2758                           
  2759                           	psect	text24
  2760  0329                     __ptext24:	
  2761 ;; *************** function i1_Init_PWM *****************
  2762 ;; Defined at:
  2763 ;;		line 75 in file "E:\project\project0508\scm\n9_fan_no_led\main.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;		None
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;		None
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      void 
  2770 ;; Registers used:
  2771 ;;		wreg, status,2
  2772 ;; Tracked objects:
  2773 ;;		On entry : 200/0
  2774 ;;		On exit  : 300/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMMON   BANK0   BANK1
  2777 ;;      Params:         0       0       0
  2778 ;;      Locals:         0       0       0
  2779 ;;      Temps:          0       0       0
  2780 ;;      Totals:         0       0       0
  2781 ;;Total ram usage:        0 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; This function calls:
  2784 ;;		Nothing
  2785 ;; This function is called by:
  2786 ;;		i1_Init_Config
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           
  2791                           ;psect for function i1_Init_PWM
  2792  0329                     i1_Init_PWM:	
  2793                           
  2794                           ;main.c: 76: CCP1CON = 0x0F;
  2795                           
  2796                           ;incstack = 0
  2797                           ; Regs used in i1_Init_PWM: [wreg+status,2]
  2798                           
  2799                           ;main.c: 77: T2CON = 0;
  2800                           
  2801                           ;main.c: 78: PR2 = 7;
  2802                           
  2803                           ;main.c: 80: CCPR1L = 0;
  2804                           
  2805                           ;main.c: 81: TMR2IF = 0;
  2806                           
  2807                           ;main.c: 82: T2CON = 0;
  2808                           
  2809                           ;main.c: 84: TRISC&=~(1<<2);
  2810                           
  2811                           ;main.c: 85: T2CON = 0X04;
  2812  0329  2AA9               	ljmp	PL4	;call to abstracted procedure
  2813  032A                     __end_ofi1_Init_PWM:	
  2814                           
  2815                           	psect	text25
  2816  032A                     __ptext25:	
  2817 ;; *************** function i1_Init_Interupt *****************
  2818 ;; Defined at:
  2819 ;;		line 27 in file "E:\project\project0508\scm\n9_fan_no_led\init.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;		None
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;		None
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  1    wreg      void 
  2826 ;; Registers used:
  2827 ;;		wreg, status,2
  2828 ;; Tracked objects:
  2829 ;;		On entry : 300/100
  2830 ;;		On exit  : 300/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMMON   BANK0   BANK1
  2833 ;;      Params:         0       0       0
  2834 ;;      Locals:         0       0       0
  2835 ;;      Temps:          0       0       0
  2836 ;;      Totals:         0       0       0
  2837 ;;Total ram usage:        0 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; This function calls:
  2840 ;;		Nothing
  2841 ;; This function is called by:
  2842 ;;		i1_Init_Config
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           
  2847                           ;psect for function i1_Init_Interupt
  2848  032A                     i1_Init_Interupt:	
  2849                           
  2850                           ;init.c: 28: OPTION_REG = 0x00;
  2851                           
  2852                           ;incstack = 0
  2853                           ; Regs used in i1_Init_Interupt: [wreg+status,2]
  2854                           
  2855                           ;init.c: 29: TMR0 = 0;
  2856                           
  2857                           ;init.c: 30: INTCON = 0xE0;
  2858  032A  2B12               	ljmp	PL12	;call to abstracted procedure
  2859  032B                     __end_ofi1_Init_Interupt:	
  2860                           
  2861                           	psect	text26
  2862  032B                     __ptext26:	
  2863 ;; *************** function i1_Init_GPIO *****************
  2864 ;; Defined at:
  2865 ;;		line 13 in file "E:\project\project0508\scm\n9_fan_no_led\init.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      void 
  2872 ;; Registers used:
  2873 ;;		wreg, status,2
  2874 ;; Tracked objects:
  2875 ;;		On entry : 300/100
  2876 ;;		On exit  : 300/100
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMMON   BANK0   BANK1
  2879 ;;      Params:         0       0       0
  2880 ;;      Locals:         0       0       0
  2881 ;;      Temps:          0       0       0
  2882 ;;      Totals:         0       0       0
  2883 ;;Total ram usage:        0 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; This function calls:
  2886 ;;		Nothing
  2887 ;; This function is called by:
  2888 ;;		i1_Init_Config
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           
  2893                           ;psect for function i1_Init_GPIO
  2894  032B                     i1_Init_GPIO:	
  2895                           
  2896                           ;init.c: 14: TRISA = 0;
  2897                           
  2898                           ;incstack = 0
  2899                           ; Regs used in i1_Init_GPIO: [wreg+status,2]
  2900                           
  2901                           ;init.c: 15: TRISB = 0;
  2902                           
  2903                           ;init.c: 16: TRISC = 0;
  2904                           
  2905                           ;init.c: 17: WPUA = 0xFF;
  2906                           
  2907                           ;init.c: 18: WPUB = 0xFF;
  2908                           
  2909                           ;init.c: 19: WPUC = 0xFF;
  2910                           
  2911                           ;init.c: 20: PORTA = 0xFF;
  2912                           
  2913                           ;init.c: 21: PORTB = 0xFF;
  2914                           
  2915                           ;init.c: 22: PORTC = 0xFF;
  2916                           
  2917                           ;init.c: 23: IOCB = 0x00;
  2918  032B  2A96               	ljmp	PL2	;call to abstracted procedure
  2919  032C                     __end_ofi1_Init_GPIO:	
  2920  007E                     btemp	set	126	;btemp
  2921  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     11      34
    BANK1            80      0       0

Pointer List with Targets:

    resetKey@key	PTR struct Keys size(1) Largest target is 7
		 -> key1(BANK0[7]), 

    key_driver@key	PTR struct Keys size(1) Largest target is 7
		 -> key1(BANK0[7]), 

    sacnKeyInput@key	PTR struct Keys size(1) Largest target is 7
		 -> key1(BANK0[7]), 


Critical Paths under _main in COMMON

    _scanKeys->_sacnKeyInput
    _checkUsbStatus->_closeFan
    _setFanLevel->_closeFan
    _Init_Config->_resetKey

Critical Paths under _Timer0_Isr in COMMON

    i1_Init_Config->i1_resetKey

Critical Paths under _main in BANK0

    _scanKeys->_sacnKeyInput
    _readVrefADC->_ADC_Sample
    _checkKeys->_setFanLevel
    _setFanLevel->___awdiv

Critical Paths under _Timer0_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer0_Isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    2000
                                             10 BANK0      1     1      0
                        _Init_Config
                         _Sleep_Mode
                          _checkKeys
                     _checkUsbStatus
                        _readVrefADC
                           _scanKeys
 ---------------------------------------------------------------------------------
 (1) _scanKeys                                             0     0      0     154
                       _sacnKeyInput
 ---------------------------------------------------------------------------------
 (2) _sacnKeyInput                                         3     3      0     154
                                              4 COMMON     2     2      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _readVrefADC                                          0     0      0     458
                         _ADC_Sample
                           _DelayXms
 ---------------------------------------------------------------------------------
 (2) _DelayXms                                             3     3      0     167
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                           8     8      0     291
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (1) _checkUsbStatus                                       2     2      0       0
                                              0 BANK0      2     2      0
                           _closeFan
 ---------------------------------------------------------------------------------
 (1) _checkKeys                                            0     0      0    1273
                           _checkFan
                         _key_driver
                        _setFanLevel
 ---------------------------------------------------------------------------------
 (2) _setFanLevel                                          4     4      0     736
                                              8 BANK0      2     2      0
                           _Init_PWM
                            ___awdiv
                           _closeFan
 ---------------------------------------------------------------------------------
 (2) _closeFan                                             1     1      0       0
                                              4 COMMON     1     1      0
                         _Sleep_Mode
 ---------------------------------------------------------------------------------
 (3) _Sleep_Mode                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     606
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _key_driver                                           3     3      0     537
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _checkFan                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Config                                          0     0      0     115
                          _Init_GPIO
                      _Init_Interupt
                           _Init_PWM
                        _Init_System
                           _resetKey
 ---------------------------------------------------------------------------------
 (2) _resetKey                                             1     1      0     115
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_Interupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Timer0_Isr                                           3     3      0      88
                                              1 COMMON     3     3      0
                      i1_Init_Config
 ---------------------------------------------------------------------------------
 (6) i1_Init_Config                                        0     0      0      88
                        i1_Init_GPIO
                    i1_Init_Interupt
                         i1_Init_PWM
                      i1_Init_System
                         i1_resetKey
 ---------------------------------------------------------------------------------
 (7) i1_resetKey                                           1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) i1_Init_System                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_Init_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_Init_Interupt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_Init_GPIO                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_Config
     _Init_GPIO
     _Init_Interupt
     _Init_PWM
     _Init_System
     _resetKey
   _Sleep_Mode
   _checkKeys
     _checkFan
     _key_driver
     _setFanLevel
       _Init_PWM
       ___awdiv
       _closeFan
         _Sleep_Mode
   _checkUsbStatus
     _closeFan
       _Sleep_Mode
   _readVrefADC
     _ADC_Sample
     _DelayXms
   _scanKeys
     _sacnKeyInput

 _Timer0_Isr (ROOT)
   i1_Init_Config
     i1_Init_GPIO
     i1_Init_Interupt
     i1_Init_PWM
     i1_Init_System
     i1_resetKey

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      B      22       5       42.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2C       8        0.0%
ABS                  0      0      2C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 15 18:03:25 2020

         ??i1_Init_System 0070                         pc 0002                        PL2 0296  
                      PL4 02A9                        PL6 00AF                        PL8 0244  
                      _TO 001C              ___awdiv@sign 003C                        fsr 0004  
                     PL10 0302                       PL12 0312                       PL14 024E  
                     PL16 00BE                       _GIE 005F                       _PR2 0092  
     __size_of_ADC_Sample 0096                       fsr0 0004                       indf 0000  
                    S3507 0322                      l1124 0168                      l1127 0166  
                    l1162 028B                      l1148 01C3                      l3221 00FB  
                    l3135 01F5                      l3225 0103                      l3209 00E4  
                    l3155 0254                      l3251 01AF                      l3243 01A6  
                    l3235 0191                      l3403 028F                      l3331 005F  
                    l3253 01B2                      l3325 004D                      l3317 0034  
                    l1742 002F                      l3247 01AB                      l3417 023C  
                    l3265 0110                      l3193 00CD                      l3249 01AC  
                    l3257 01B5                      l3409 0290                      l3329 0057  
                    l2803 02E7                      l3291 0137                      l3283 0127  
                    l1748 0063                      l3277 0122                      l3269 0118  
                    l3349 02DE                      l3445 01CD                      l3295 013B  
                    l3199 00D6                      l3375 015C                      l3359 02E3  
                    l3447 01CE                      l3289 0135                      l3297 0148  
                    l3457 01D7                      l3389 0189                      l3469 01E9  
                    _T0IF 005A                      u1025 00ED                      u1084 0229  
                    _IOCB 0096                      u1245 0099                      u1085 0227  
                    u1185 0053                      u1195 005D                      _RBIE 005B  
                    _RBIF 0058                      _TMR0 0001    __end_of_checkUsbStatus 018A  
                    _WPUA 018E                      _WPUB 0095                      _WPUC 018F  
                    _key1 0030                      _main 01C4                      btemp 007E  
              i1_resetKey 02CA                      start 000C             ??_Init_Config 0075  
           ??_Init_System 0074             _Init_Interupt 0311                     ?_main 0070  
         __end_of___awdiv 0108           ___awdiv@divisor 0037                     _T2CON 0012  
            ?_readVrefADC 0070        key_driver@key_read 0038           ___awdiv@counter 003B  
                   _PORTA 0005                     _PORTB 0006                     _PORTC 0007  
                   _TRISA 0085                     _TRISB 0086                     _TRISC 0087  
             ?i1_Init_PWM 0070                     pclath 000A           ?_checkUsbStatus 0070  
                   status 0003                     wtemp0 007E          __end_of_DelayXms 02E7  
            ?_setFanLevel 0070           __initialization 000D              __end_of_main 01F5  
        __end_of_Init_PWM 02A9            ?_Init_Interupt 0070       __end_of_Init_Config 0244  
                  ??_main 0041       __end_of_Init_System 0329                    _ADCON0 001F  
                  _ADCON1 009F                    _ADRESH 001E                    _ADRESL 009E  
                  _CCPR1L 0015          ___awdiv@dividend 0039                    _GODONE 00F9  
                  i1l1193 0279                    i1l3035 02F6                    i1l3099 0275  
                  _INTCON 000B             ?_sacnKeyInput 0070        __size_of_Init_GPIO 0001  
                  _OSCCON 008F                    _TMR2IF 0061              ??_ADC_Sample 0037  
        __end_of_checkFan 02F3               ?i1_resetKey 0070                _Sleep_Mode 01F5  
              _Timer0_Isr 026C          __end_of_closeFan 026C                 ??___awdiv 0074  
     __size_ofi1_Init_PWM 0001              ?i1_Init_GPIO 0070          __end_of_scanKeys 031E  
        ___awdiv@quotient 003D          __end_of_resetKey 02CA              __pdataCOMMON 0079  
      __end_of_ADC_Sample 00AF           i1_Init_Interupt 032A                    saved_w 007E  
          ??_sacnKeyInput 0074   __end_of__initialization 0017               _Init_Config 0239  
          __pcstackCOMMON 0070           ??_Init_Interupt 0074        __size_of_checkKeys 0013  
             _Init_System 0326                __end_ofPL2 02A8                __end_ofPL4 02BA  
              __end_ofPL6 00BE                __end_ofPL8 024E         __end_of_Init_GPIO 0296  
     __size_ofi1_resetKey 0010                 ?_DelayXms 0070      __size_of_readVrefADC 0004  
              __pbssBANK0 0020                 ?_Init_PWM 0070               ?_Sleep_Mode 0070  
             ?_Timer0_Isr 0070     __end_ofi1_Init_Config 02FF                __pmaintext 01C4  
    __size_of_setFanLevel 003A                __pintentry 0004                   _CCP1CON 0017  
   __end_ofi1_Init_System 0302   __end_ofi1_Init_Interupt 032B                 ?_checkFan 0070  
    key_driver@key_return 0037                ??_DelayXms 0074          ??_checkUsbStatus 0037  
              _count500ms 0077                 ?_closeFan 0070              ??i1_Init_PWM 0070  
       __end_of_checkKeys 0295                ??_Init_PWM 0074                 ?_scanKeys 0070  
               ?_resetKey 0070               resetKey@key 0074           ADC_Sample@admax 0024  
         ADC_Sample@admin 0026           ADC_Sample@adsum 0020                   ___awdiv 00C3  
              _key_driver 0108      __end_of_sacnKeyInput 0239        __end_ofi1_Init_PWM 032A  
                 __ptext1 0318                   __ptext2 021C                   __ptext3 031E  
                 __ptext4 02DA                   __ptext5 0019                   __ptext6 014A  
                 __ptext7 0282                   __ptext8 018A                   __ptext9 0254  
    __size_ofi1_Init_GPIO 0001                ??_checkFan 0074       __size_of_Sleep_Mode 0027  
     __size_of_Timer0_Isr 0016                ??_closeFan 0074                   clrloop0 030A  
    end_of_initialization 0017                 DelayXms@i 0038                 DelayXms@j 0039  
               DelayXms@x 0037                ??_scanKeys 0076              ??i1_resetKey 0070  
              ??_resetKey 0074           sacnKeyInput@key 0037          ?i1_Init_Interupt 0070  
      __end_ofi1_resetKey 02DA              ?_Init_Config 0070               ?_key_driver 0070  
            ?_Init_System 0070          setFanLevel@level 003F             __pidataCOMMON 0000  
             __end_ofPL10 0309               __end_ofPL12 0318               __end_ofPL14 0254  
             __end_ofPL16 00C3       start_initialization 000D                 _Init_GPIO 0295  
       __size_of_DelayXms 000D         __size_of_Init_PWM 0001              ??_Sleep_Mode 0074  
            ??_Timer0_Isr 0071     __size_of_sacnKeyInput 001D         ADC_Sample@ad_temp 003D  
   __end_of_Init_Interupt 0312         ADC_Sample@adtimes 002E             ??_readVrefADC 0074  
             __pbssCOMMON 0076                ?_Init_GPIO 0070                 ___latbits 0000  
           __pcstackBANK0 0037         __size_of_checkFan 000C        __end_of_Sleep_Mode 021C  
      __end_of_Timer0_Isr 0282       __size_of_key_driver 0042         __size_of_closeFan 0018  
            _sacnKeyInput 021C              _currentLevel 0079                 _checkKeys 0282  
           ??_setFanLevel 0075         __size_of_scanKeys 0006                  ?___awdiv 0037  
       __size_of_resetKey 0010                 __pswtext1 0322                 _count10Ms 0028  
               _countTime 002A            ADC_Sample@adch 003B    __size_ofi1_Init_Config 000C  
     __end_of_readVrefADC 0322               ADC_Sample@i 003C    __size_ofi1_Init_System 0003  
       interrupt_function 0004                ?_checkKeys 0070                 _time0Flag 0078  
               clear_ram0 0309      __size_of_Init_Config 000B      setFanLevel@tempLevel 0040  
           ??i1_Init_GPIO 0070       __end_of_setFanLevel 01C4      __size_of_Init_System 0003  
             ??_Init_GPIO 0074                  _DelayXms 02DA                  _Init_PWM 02A8  
              _ADC_Sample 0019   __size_of_checkUsbStatus 0040             i1_Init_Config 02F3  
            ??_key_driver 0074          __size_of___awdiv 0045             key_driver@key 0039  
           i1_Init_System 02FF               _readVrefADC 031E                  _checkFan 02E7  
              _FAN_STATUS 0076       __end_ofi1_Init_GPIO 032C                  _adresult 002C  
__size_ofi1_Init_Interupt 0001                  __ptext10 01F5                  __ptext11 00C3  
                __ptext20 026C                  __ptext12 0108                  __ptext21 02F3  
                __ptext13 02E7                  __ptext22 02CA                  __ptext14 0239  
                __ptext23 02FF                  __ptext15 02BA                  __ptext24 0329  
                __ptext16 0326                  __ptext25 032A                  __ptext17 02A8  
                __ptext26 032B                  __ptext18 0311                  __ptext19 0295  
                _closeFan 0254        __end_of_key_driver 014A             __size_of_main 0031  
             ??_checkKeys 0075                  _scanKeys 0318                  _lowVTime 002F  
                _resetKey 02BA               _setFanLevel 018A            ?i1_Init_Config 0070  
          ?i1_Init_System 0070                  intlevel1 0000               ?_ADC_Sample 0070  
           i1resetKey@key 0070               i1_Init_GPIO 032B                _OPTION_REG 0081  
              i1_Init_PWM 0329    __size_of_Init_Interupt 0001         ??i1_Init_Interupt 0070  
          _checkUsbStatus 014A           ??i1_Init_Config 0071  
