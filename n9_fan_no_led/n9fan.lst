---- E:\project\project0508\scm\n9_fan_no_led\main.c ----------------------------------------------------------------------
1:                #include "scankey.h"
2:                #include "init.h"
3:                #include "adc.h"
4:                
5:                #define MAX_FAN_LEVEL 4
6:                #define MIN_FAN_LEVEL 1
7:                
8:                #define FAN_STATUS_OFF  0
9:                #define FAN_STATUS_ON  1
10:               #define FAN_STATUS_NONE 2
11:               
12:               #define PBPORTB PORTA
13:               #define PBTRISB TRISA
14:               
15:               
16:               //1毫秒中断标志
17:               static unsigned char time0Flag = 0;
18:               static unsigned int countTime = 0;
19:               static unsigned int count10Ms = 0;
20:               unsigned char currentLevel = 1;
21:               //低电压检测次数
22:               unsigned char lowVTime = 0;
23:               //风扇状态
24:               unsigned char FAN_STATUS = FAN_STATUS_ON;
25:               //检测风扇次数
26:               unsigned int fan_check_time = 0;
27:               //按键结构体
28:               struct Keys key1;
29:               //关闭风扇
30:               void closeFan();
31:               //初始化配置
32:               void Init_Config();
33:               //睡眠模式
34:               void Sleep_Mode();
35:               
36:               void checkUsbStatus() {
37:               	//工作指示灯
38:                   if(FAN_STATUS == FAN_STATUS_ON)
  014A    0B78    SZDECA	0x78
  014B    294D    JP	0x14D
39:               	{
40:               		//setbit(PORTA, 0);
41:               		resetbit(PORTC, 1);
  014C    1087    CLRB	0x7,1
42:               	}
43:               	//USB连接了
44:               	if (getbit(PORTB, 2) == 1) {
  014D    0806    LD	A,0x6
  014E    00B6    LD	0x36,A
  014F    1003    CLRB	0x3,0
  0150    0CB6    RRCR	0x36
  0151    1003    CLRB	0x3,0
  0152    0CB6    RRCR	0x36
  0153    1C36    SNZB	0x36,0
  0154    2969    JP	0x169
45:               		//重置低电压检测
46:               		lowVTime = 0;
  0155    01F6    CLR	0x76
47:                       if (getbit(PORTB, 1) == 1) {
  0156    0806    LD	A,0x6
  0157    00B6    LD	0x36,A
  0158    1003    CLRB	0x3,0
  0159    0CB6    RRCR	0x36
  015A    1C36    SNZB	0x36,0
  015B    295F    JP	0x15F
48:                           //充满了，PC1常亮,A0关闭
49:                           resetbit(PORTC, 1);
  015C    1087    CLRB	0x7,1
50:               			setbit(PORTA, 0);
  015D    1405    SETB	0x5,0
51:                       } else if (countTime == 10) {
  015E    0008    RET
  015F    300A    LDIA	0xA
  0160    062A    XORA	0x2A
  0161    042B    ORA	0x2B
  0162    1D03    SNZB	0x3,2
  0163    0008    RET
  0164    2966    JP	0x166
52:                           //充电中，红灯一直闪，		
53:                           reversebit(PORTA, 0);
  0166    3001    LDIA	0x1
  0167    0685    XORR	0x5
  0168    0008    RET
54:               			//setbit(PORTC, 1);
55:                       }
56:                   } else {
57:                       //usb断开充电红灯灯熄灭,PA0 = 1
58:                       setbit(PORTA, 0);
  0169    1405    SETB	0x5,0
59:               		setbit(PORTC, 1);
  016A    1487    SETB	0x7,1
60:               		
61:               		//检测内部电压值,电压低于3.1V
62:               		if((adresult/8) > 0x63 && countTime == 100)
  016B    082D    LD	A,0x2D
  016C    00B7    LD	0x37,A
  016D    082C    LD	A,0x2C
  016E    00B6    LD	0x36,A
  016F    3000    LDIA	0x0
  0170    1003    CLRB	0x3,0
  0171    0CB7    RRCR	0x37
  0172    0CB6    RRCR	0x36
  0173    1003    CLRB	0x3,0
  0174    0CB7    RRCR	0x37
  0175    0CB6    RRCR	0x36
  0176    1003    CLRB	0x3,0
  0177    0CB7    RRCR	0x37
  0178    0CB6    RRCR	0x36
  0179    0237    SUBA	0x37
  017A    3064    LDIA	0x64
  017B    1903    SZB	0x3,2
  017C    0236    SUBA	0x36
  017D    1C03    SNZB	0x3,0
  017E    0008    RET
  017F    3064    LDIA	0x64
  0180    062A    XORA	0x2A
  0181    042B    ORA	0x2B
  0182    1D03    SNZB	0x3,2
  0183    0008    RET
63:               		{
64:               			if(lowVTime < 10)
  0184    300A    LDIA	0xA
  0185    0276    SUBA	0x76
  0186    1C03    SNZB	0x3,0
  0187    2965    JP	0x165
65:               			{
66:               				lowVTime++;
  0165    0AF6    INCR	0x76
67:               				//闪红灯，
68:               				reversebit(PORTA, 0);
69:               			}else
70:               			{
71:               				//关闭风扇
72:               				closeFan();
  0188    2A69    JP	0x269
73:               			}
74:               		}
75:                   }
76:               }
77:               
78:               void Init_PWM() {
79:                   CCP1CON = 0x0F;//设置PC2为PWM模式，4,5位为占空比的低2位
80:                   T2CON = 0; //时钟分频 1:1 PWM周期为（PR2+1）*4/8,000,000
81:                   PR2 = 7;
82:               
83:                   CCPR1L = 0;//占空比高8位，低2位设置为0，结果就是 占空比 = CCPR1L*4/4*(PR2+1)
84:                   TMR2IF = 0;
85:                   T2CON = 0;
86:                   //PC2设置为输出脚
87:                   resetbit(TRISC, 2);
  02AF    2AB0    JP	0x2B0
  0307    2AB0    JP	0x2B0
88:                   //T2CON = 0X04 //启动定时器2，溢出后启动PWM
89:               }
90:               
91:               //设置风扇转速
92:               void setFanLevel(char level) {
  0189    00BE    LD	0x3E,A
93:               	if(level == 0)
  018A    083E    LD	A,0x3E
  018B    1D03    SNZB	0x3,2
  018C    298F    JP	0x18F
94:               	{
95:               		currentLevel = 2;
  018D    3002    LDIA	0x2
  018E    00F9    LD	0x79,A
96:               	}
97:                   unsigned int levelWidth = (PR2 + 1) / MAX_FAN_LEVEL;
  018F    1683    SETB	0x3,5
  0190    0812    LD	A,0x12
  0191    1283    CLRB	0x3,5
  0192    00B8    LD	0x38,A
  0193    01B9    CLR	0x39
  0194    0AB8    INCR	0x38
  0195    1903    SZB	0x3,2
  0196    0AB9    INCR	0x39
  0197    3004    LDIA	0x4
  0198    00B6    LD	0x36,A
  0199    01B7    CLR	0x37
  019A    20C3    CALL	0xC3
98:                   char tempLevel = currentLevel + level;
  019B    083E    LD	A,0x3E
  019C    0779    ADDA	0x79
  019D    00BF    LD	0x3F,A
99:                   if (tempLevel > MAX_FAN_LEVEL) {
  019E    3005    LDIA	0x5
  019F    023F    SUBA	0x3F
  01A0    1C03    SNZB	0x3,0
  01A1    29A4    JP	0x1A4
100:                      tempLevel = MIN_FAN_LEVEL;
  01A2    01BF    CLR	0x3F
  01A3    0ABF    INCR	0x3F
101:                  }
102:              
103:                  
104:                  if (FAN_STATUS == FAN_STATUS_ON) {
  01A4    0B78    SZDECA	0x78
  01A5    0008    RET
105:              		currentLevel = tempLevel;
  01A6    083F    LD	A,0x3F
  01A7    00F9    LD	0x79,A
106:              		switch(currentLevel)
  01A8    29B3    JP	0x1B3
107:              		{
108:              			case 1:
109:              			closeFan();
  01A9    2A69    JP	0x269
110:              			break;
111:              			case 2:
112:              			CCPR1L = 2;
  01AA    3002    LDIA	0x2
  01AB    0095    LD	0x15,A
113:              			break;
  01AC    0008    RET
114:              			case 3:
115:              			CCPR1L = 3;
  01AD    3003    LDIA	0x3
  01AE    0095    LD	0x15,A
116:              			break;
  01AF    0008    RET
117:              			case 4:
118:              			CCPR1L = 5;
  01B0    3005    LDIA	0x5
  01B1    0095    LD	0x15,A
119:              			break;
  01B2    0008    RET
  01B3    0879    LD	A,0x79
  01B4    3A01    XORIA	0x1
  01B5    1903    SZB	0x3,2
  01B6    29A9    JP	0x1A9
  01B7    3A03    XORIA	0x3
  01B8    1903    SZB	0x3,2
  01B9    29AA    JP	0x1AA
  01BA    3A01    XORIA	0x1
  01BB    1903    SZB	0x3,2
  01BC    29AD    JP	0x1AD
  01BD    3A07    XORIA	0x7
  01BE    1903    SZB	0x3,2
  01BF    29B0    JP	0x1B0
  01C0    29C1    JP	0x1C1
  01C1    0008    RET
120:              		}
121:                  //设置占宽比
122:              		//CCPR1L = levelWidth * currentLevel;
123:                    
124:                  }
125:              
126:              }
127:              
128:              //关闭风扇
129:              void closeFan() {
130:                  Init_PWM();
  0269    22AF    CALL	0x2AF
131:                  currentLevel = 1;
  026A    01F9    CLR	0x79
  026B    0AF9    INCR	0x79
132:                  setbit(PORTA, 0);
  026C    1283    CLRB	0x3,5
  026D    1405    SETB	0x5,0
133:                  //PWM输出脚设置为输入，关闭PWM
134:                  setbit(TRISC, 2);
135:                  fan_check_time = 0;
  026E    1683    SETB	0x3,5
  026F    1507    SETB	0x7,2
136:                  FAN_STATUS = FAN_STATUS_OFF;
  0270    01F8    CLR	0x78
137:              	//重置低电压检测
138:              	lowVTime = 0;
  0271    01F6    CLR	0x76
139:              	if (getbit(PORTB, 2) == 0) {
  0272    1283    CLRB	0x3,5
  0273    0806    LD	A,0x6
  0274    00F4    LD	0x74,A
  0275    1003    CLRB	0x3,0
  0276    0CF4    RRCR	0x74
  0277    1003    CLRB	0x3,0
  0278    0CF4    RRCR	0x74
  0279    1874    SZB	0x74,0
  027A    0008    RET
140:              		Sleep_Mode();
  027B    29ED    JP	0x1ED
141:              	}
142:                  
143:              }
144:              
145:              
146:              //检测风扇是否连接
147:              void checkFan() {
148:              	resetbit(TRISA, 1);
  02CA    1683    SETB	0x3,5
  02CB    1303    CLRB	0x3,6
  02CC    1085    CLRB	0x5,1
149:                  resetbit(PORTA, 1);
  02CD    1283    CLRB	0x3,5
  02CE    1085    CLRB	0x5,1
150:                  //PC2设置为输出脚
151:                  resetbit(TRISC, 2);
  02CF    1683    SETB	0x3,5
  02D0    1107    CLRB	0x7,2
152:              	setbit(PORTA, 2);
  02D1    1283    CLRB	0x3,5
  02D2    1505    SETB	0x5,2
153:                  T2CON = 0X04; //启动定时器2，溢出后启动PWM
  02D3    3004    LDIA	0x4
  02D4    0092    LD	0x12,A
  02D5    0008    RET
154:              
155:                  //EN IN输出高电位，D1点亮，检测FAN DET，FAN DET为低电位则风扇正常工作，高电位则未连接
156:                //  if (getbit(PORTB, 6) == 0) {
157:                 //     FAN_STATUS = FAN_STATUS_ON;
158:                 // } else {
159:                  //    FAN_STATUS = FAN_STATUS_NONE;
160:                 // }
161:              	
162:              	
163:                  //没有检测到风扇
164:                  //if (FAN_STATUS == FAN_STATUS_NONE) {
165:                  //    fan_check_time++;
166:                  //    if (fan_check_time == 3000) {
167:                   //       closeFan();
168:                    //      return;
169:                   //   }
170:                  //}
171:              
172:              
173:              }
174:              
175:              
176:              
177:              
178:              //扫描按键
179:              void scanKeys() {
180:                  key1.key_addr_result = PORTB;
  02F6    1283    CLRB	0x3,5
  02F7    1303    CLRB	0x3,6
  02F8    0806    LD	A,0x6
  02F9    00B4    LD	0x34,A
181:                  sacnKeyInput(&key1);
  02FA    302F    LDIA	0x2F
  02FB    2A0D    JP	0x20D
182:                  
183:                 
184:              }
185:              
186:              //检测按键状态并处理
187:              void checkKeys() {
188:                  if (key_driver(&key1) == key_click) {
  0256    302F    LDIA	0x2F
  0257    2108    CALL	0x108
  0258    3A01    XORIA	0x1
  0259    1D03    SNZB	0x3,2
  025A    2A64    JP	0x264
189:                      //检测到按键了，检测风扇是否存在
190:              
191:                      if (FAN_STATUS == FAN_STATUS_ON) {
  025B    0B78    SZDECA	0x78
  025C    2A5F    JP	0x25F
192:              			//按一下，风扇加档
193:                          setFanLevel(1);
  025D    3001    LDIA	0x1
  025E    2989    JP	0x189
194:                          
195:                      } else {
  025F    3000    LDIA	0x0
196:                          FAN_STATUS = FAN_STATUS_ON;
  0260    01F8    CLR	0x78
  0261    0AF8    INCR	0x78
197:              			setFanLevel(0);
  0262    2189    CALL	0x189
198:                          checkFan();
  0263    2ACA    JP	0x2CA
  0264    3002    LDIA	0x2
  0265    0678    XORA	0x78
  0266    1D03    SNZB	0x3,2
  0267    0008    RET
  0268    2A63    JP	0x263
199:                      }
200:                      return;
201:                  } else if (FAN_STATUS == FAN_STATUS_NONE) {
202:                      checkFan();
203:                  }
204:              
205:              
206:              }
207:              
208:              
209:              void main(void) {
210:              	if (getbit(PORTB, 2) == 0) {
  01C2    0806    LD	A,0x6
  01C3    00C0    LD	0x40,A
  01C4    1003    CLRB	0x3,0
  01C5    0CC0    RRCR	0x40
  01C6    1003    CLRB	0x3,0
  01C7    0CC0    RRCR	0x40
  01C8    1840    SZB	0x40,0
  01C9    29CB    JP	0x1CB
211:              		Sleep_Mode();
  01CA    21ED    CALL	0x1ED
212:              	}
213:              	
214:                  Init_Config();
  01CB    222A    CALL	0x22A
215:                  while (1) {
216:                      //0.1毫秒检测一次
217:                      if (time0Flag) {
  01CC    0877    LD	A,0x77
  01CD    1903    SZB	0x3,2
  01CE    29D5    JP	0x1D5
  01CF    0064    CLRWDT
218:                          asm("clrwdt");
219:                          time0Flag = 0;
  01D0    01F7    CLR	0x77
220:              			scanKeys();
  01D1    22F6    CALL	0x2F6
221:                          count10Ms++;
  01D2    0AA8    INCR	0x28
  01D3    1903    SZB	0x3,2
  01D4    0AA9    INCR	0x29
222:                      }
223:              
224:                      //10毫秒检测一次
225:                      if (count10Ms == 100) {	
  01D5    3064    LDIA	0x64
  01D6    1283    CLRB	0x3,5
  01D7    0628    XORA	0x28
  01D8    0429    ORA	0x29
  01D9    1D03    SNZB	0x3,2
  01DA    29E5    JP	0x1E5
226:              			countTime++;	
  01DB    0AAA    INCR	0x2A
  01DC    1903    SZB	0x3,2
  01DD    0AAB    INCR	0x2B
227:                          checkKeys();
  01DE    2256    CALL	0x256
228:                          count10Ms = 0;
  01DF    1283    CLRB	0x3,5
  01E0    1303    CLRB	0x3,6
  01E1    01A8    CLR	0x28
  01E2    01A9    CLR	0x29
229:                          //检测USB状态
230:                          checkUsbStatus();
  01E3    214A    CALL	0x14A
231:              			//检测内部电压
232:              			readVrefADC();
  01E4    22FC    CALL	0x2FC
233:                      }
234:              
235:                      if (countTime == 101) {
  01E5    3065    LDIA	0x65
  01E6    062A    XORA	0x2A
  01E7    042B    ORA	0x2B
  01E8    1D03    SNZB	0x3,2
  01E9    29CC    JP	0x1CC
236:                          countTime = 0;
  01EA    01AA    CLR	0x2A
  01EB    01AB    CLR	0x2B
  01EC    29CC    JP	0x1CC
237:                      }
238:              		
239:                  }
240:              
241:              }
242:              
243:              void Init_Config() {
244:              
245:                  Init_System();
  022A    2304    CALL	0x304
  02EF    22D6    CALL	0x2D6
246:                  Init_GPIO();
  022B    227C    CALL	0x27C
  02F0    2309    CALL	0x309
247:                  Init_Interupt();
  022C    22E8    CALL	0x2E8
  02F1    2308    CALL	0x308
248:                  Init_PWM();
  022D    22AF    CALL	0x2AF
  02F2    2307    CALL	0x307
249:                  //设置唤醒
250:                  IOCB = 0x04;
251:                  TMR0 = 155;
252:                  TO = 0;
253:              
254:                  //K1开关
255:                  key1.key_index = 5;
256:                  
257:                  resetKey(&key1);
  022E    2231    CALL	0x231
  022F    228F    CALL	0x28F
  02F3    2231    CALL	0x231
  02F4    229F    CALL	0x29F
258:              
259:                  //设置IO方向
260:                  TRISA = 0;
261:                  TRISB = 0x7E;//1-6脚输入
262:                  TRISC = 0;
  0230    2A3A    JP	0x23A
  02F5    2A3A    JP	0x23A
263:              }
264:              
265:              
266:              void Sleep_Mode() {
267:                  INTCON = 0;
  01ED    018B    CLR	0xB
268:              
269:                  OPTION_REG = 0;
  01EE    1683    SETB	0x3,5
  01EF    0181    CLR	0x1
270:              
271:                  TRISA = 0B00000000;        //关闭所有输出
  01F0    0185    CLR	0x5
272:                  PORTA = 0B00000000;
  01F1    1283    CLRB	0x3,5
  01F2    0185    CLR	0x5
273:                  WPUA = 0B00000000;
  01F3    1683    SETB	0x3,5
  01F4    1703    SETB	0x3,6
  01F5    018E    CLR	0xE
274:              
275:                  TRISB = 0B00100000;
  01F6    3020    LDIA	0x20
  01F7    1303    CLRB	0x3,6
  01F8    0086    LD	0x6,A
276:                  PORTB = 0B00000000;
  01F9    1283    CLRB	0x3,5
  01FA    0186    CLR	0x6
277:              
278:                  PORTB = 0;
  01FB    0186    CLR	0x6
279:                  WPUB = 0B00100000;         //RB5 上拉
  01FC    1683    SETB	0x3,5
  01FD    0095    LD	0x15,A
280:              
281:                  IOCB = 0B00100100;            //允许RB5 RB2的IO口电平变化中断
  01FE    3024    LDIA	0x24
  01FF    0096    LD	0x16,A
282:                  RBIE = 1;                    //允许PORTB电平变化中断
  0200    158B    SETB	0xB,3
283:                  GIE = 1;                    //GIE = 0时，唤醒后执行SLEEP后程序;GIE = 1时，唤醒后跳至中断服务
  0201    178B    SETB	0xB,7
284:              
285:                  ADCON0 = 0;                    //关闭所有模块
  0202    1283    CLRB	0x3,5
  0203    019F    CLR	0x1F
286:              
287:                  OSCCON = 0X70;                //配置振荡为16M,关闭WDT
  0204    3070    LDIA	0x70
  0205    1683    SETB	0x3,5
  0206    008F    LD	0xF,A
288:              	
289:                  PORTB;                        //读PORTB值并锁存	
  0207    1283    CLRB	0x3,5
  0208    0806    LD	A,0x6
  0209    0064    CLRWDT
  020A    0063    STOP
  020B    0000    NOP
  020C    0008    RET
290:              			
291:                  asm("clrwdt");
292:              
293:                  asm("sleep");                //进入休眠模式
294:              
295:                  asm("nop");
296:              	
297:              	
298:              
299:              
300:              }
301:              
302:              
303:              /***********************************************
304:              函数名称：Timer0_Isr
305:              函数功能：中断服务
306:              入口参数：无
307:              出口参数：无
308:              备注：
309:              ***********************************************/
310:              void interrupt Timer0_Isr() {
311:                  if (T0IF) {
  0240    1D0B    SNZB	0xB,2
  0241    2A49    JP	0x249
312:                      //---------------------------------------
313:                      TMR0 += 155;        //重新赋初值，在赋值前Timer0已有计数，故在该基础上加初值
  0242    309B    LDIA	0x9B
  0243    1283    CLRB	0x3,5
  0244    1303    CLRB	0x3,6
  0245    0781    ADDR	0x1
314:                      //---------------------------------------
315:              
316:                      T0IF = 0;            //清中断标志位	
  0246    110B    CLRB	0xB,2
317:                      time0Flag = 1;
  0247    01F7    CLR	0x77
  0248    0AF7    INCR	0x77
318:              
319:                  }
320:              
321:                  if (RBIF) {
  0249    1C0B    SNZB	0xB,0
  024A    2A4D    JP	0x24D
322:                      RBIF = 0;            //清中断标志
  024B    100B    CLRB	0xB,0
323:                      Init_Config();
  024C    22EF    CALL	0x2EF
  024D    0873    LD	A,0x73
  024E    008A    LD	0xA,A
  024F    0872    LD	A,0x72
  0250    0084    LD	0x4,A
  0251    0E71    SWAPA	0x71
  0252    0083    LD	0x3,A
  0253    0EFE    SWAPR	0x7E
  0254    0E7E    SWAPA	0x7E
  0255    0009    RETI
324:                  }
325:              }
---- E:\project\project0508\scm\n9_fan_no_led\scankey.c ----------------------------------------------------------------------
1:                #include "scankey.h"
2:                
3:                void sacnKeyInput(struct Keys *key) {
  020D    00B6    LD	0x36,A
4:                    key->key_input = getbit(key->key_addr_result, key->key_index);
  020E    3E05    ADDIA	0x5
  020F    0084    LD	0x4,A
  0210    1383    CLRB	0x3,7
  0211    0800    LD	A,0x0
  0212    00F4    LD	0x74,A
  0213    0836    LD	A,0x36
  0214    3E06    ADDIA	0x6
  0215    0084    LD	0x4,A
  0216    0A00    INCA	0x0
  0217    2A1A    JP	0x21A
  0218    1003    CLRB	0x3,0
  0219    0CF4    RRCR	0x74
  021A    3EFF    ADDIA	0xFF
  021B    1D03    SNZB	0x3,2
  021C    2A18    JP	0x218
  021D    0874    LD	A,0x74
  021E    00F5    LD	0x75,A
  021F    0836    LD	A,0x36
  0220    3E04    ADDIA	0x4
  0221    0084    LD	0x4,A
  0222    0875    LD	A,0x75
  0223    0080    LD	0x0,A
  0224    0836    LD	A,0x36
  0225    3E04    ADDIA	0x4
  0226    0084    LD	0x4,A
  0227    3001    LDIA	0x1
  0228    0580    ANDR	0x0
  0229    0008    RET
5:                
6:                }
7:                
8:                
9:                unsigned char key_driver(struct Keys *key) {
  0108    00B8    LD	0x38,A
10:               
11:               
12:                   unsigned char key_return = key_no;
  0109    01B6    CLR	0x36
13:                   unsigned char key_read = key->key_input;  //read the I/O states
  010A    3E04    ADDIA	0x4
  010B    0084    LD	0x4,A
  010C    1383    CLRB	0x3,7
  010D    0800    LD	A,0x0
  010E    00B7    LD	0x37,A
14:               
15:                   switch (key->key_state_buffer1) {
  010F    293B    JP	0x13B
16:                       case key_state_0:
17:                           if (key_read == 0) {
  0110    0837    LD	A,0x37
  0111    1D03    SNZB	0x3,2
  0112    2948    JP	0x148
18:                               key->key_state_buffer1 = key_state_1;
  0113    0A38    INCA	0x38
  0114    0084    LD	0x4,A
  0115    0180    CLR	0x0
  0116    0A80    INCR	0x0
  0117    2948    JP	0x148
19:                           }
20:               
21:                           //按键被按下，状态转换到按键消抖和确认状态//
22:                           break;
23:               
24:                       case key_state_1:
25:                           if (key_read == 0) {
  0118    0837    LD	A,0x37
  0119    1D03    SNZB	0x3,2
  011A    2937    JP	0x137
26:                               key->key_timer_cnt1 = 0;
  011B    0838    LD	A,0x38
  011C    0084    LD	0x4,A
  011D    0180    CLR	0x0
27:                               key->key_state_buffer1 = key_state_2;
  011E    0A38    INCA	0x38
  011F    0084    LD	0x4,A
  0120    3002    LDIA	0x2
  0121    2933    JP	0x133
28:                               //按键仍然处于按下状态
29:                               //消抖完成，key_timer开始准备计时
30:                               //状态切换到按下时间计时状态
31:                           } else {
32:                               key->key_state_buffer1 = key_state_0;
33:                           }
34:               
35:                           //按键已经抬起，回到按键初始状态
36:                           break;  //完成软件消抖
37:               
38:                       case key_state_2:
39:                           if (key_read == 1) {
  0122    0B37    SZDECA	0x37
  0123    2927    JP	0x127
40:                               key_return = key_click;  //按键抬起，产生一次click操作
  0124    01B6    CLR	0x36
  0125    0AB6    INCR	0x36
  0126    2937    JP	0x137
41:                               key->key_state_buffer1 = key_state_0;  //转换到按键初始状态
  0127    0838    LD	A,0x38
  0128    0084    LD	0x4,A
  0129    3064    LDIA	0x64
  012A    0A80    INCR	0x0
  012B    0200    SUBA	0x0
  012C    1C03    SNZB	0x3,0
  012D    2948    JP	0x148
42:                           } else if (++(key->key_timer_cnt1) >= 100)  //按键继续按下，计时超过1000ms
43:                           {
44:                               key_return = key_long;  //送回长按事件
  012E    3003    LDIA	0x3
  012F    00B6    LD	0x36,A
45:                               key->key_state_buffer1 = key_state_3;  //转换到等待按键释放状态
  0130    0A38    INCA	0x38
  0131    0084    LD	0x4,A
  0132    3003    LDIA	0x3
  0133    0080    LD	0x0,A
  0134    2948    JP	0x148
46:               
47:                           }
48:                           break;
49:               
50:                       case key_state_3:  //等待按键释放
51:                           if (key_read == 1)  //按键释放
  0135    0B37    SZDECA	0x37
  0136    2948    JP	0x148
52:                           {
53:                               key->key_state_buffer1 = key_state_0;  //切回按键初始状态
  0137    0A38    INCA	0x38
  0138    0084    LD	0x4,A
  0139    0180    CLR	0x0
  013A    2948    JP	0x148
  013B    0A38    INCA	0x38
  013C    0084    LD	0x4,A
  013D    0800    LD	A,0x0
  013E    0084    LD	0x4,A
  013F    3004    LDIA	0x4
  0140    0204    SUBA	0x4
  0141    1803    SZB	0x3,0
  0142    2948    JP	0x148
  0143    3003    LDIA	0x3
  0144    008A    LD	0xA,A
  0145    3000    LDIA	0x0
  0146    0704    ADDA	0x4
  0147    0082    LD	0x2,A
54:                           }
55:               
56:                           break;
57:                   }
58:                   return key_return;
  0148    0836    LD	A,0x36
  0149    0008    RET
59:               }
60:               
61:               /***************************************************************************
62:               函数功能：中层按键处理函数，调用底层函数一次，处理双击事件的判断，
63:                                                       返回上层正确的无键、单击、双击、长按四种状态
64:               本函数由上层循环调用，间隔10ms
65:               ***************************************************************************/
66:               unsigned char key_read(struct Keys *key) {
67:               
68:                   unsigned char key_return = key_no;
69:                   unsigned char key_read = key_driver(key);
70:               //    printf("IO:%d  key status: %d\n",getSimpleKeyInput(key_input),key);
71:                   switch (key->key_state_buffer2) {
72:                       case key_state_0:
73:                           if (key_read == key_click) {
74:                               key->key_timer_cnt2 = 0;  //第一次单击，不返回，到下个状态判断是否会出现双击
75:                               key->key_state_buffer2 = key_state_1;
76:                           } else
77:                               key_return = key_read;  //对于无键、长按，返回原事件
78:                           break;
79:               
80:                       case key_state_1:
81:                           if (key_read == key_click)  //又一次单击，时间间隔小于500ms
82:                           {
83:                               key_return = key_double;  //返回双击事件，回到初始状态
84:                               key->key_state_buffer2 = key_state_0;
85:                           } else if (++(key->key_timer_cnt2) >= 50) {
86:                               //这里500ms内肯定读到的都是无键事件，因为长按大于1000ms
87:                               //在1s前底层返回的都是无键
88:               
89:                               key_return = key_click;  //500ms内没有再次出现单击事件，返回单击事件
90:                               key->key_state_buffer2 = key_state_0;  //返回初始状态
91:               
92:                           }
93:                           break;
94:                   }
95:               
96:                   return key_return;
97:               }
98:               
99:               
100:              void resetKey(struct Keys *key) {
  028F    00F4    LD	0x74,A
  029F    00F0    LD	0x70,A
101:                  key->key_timer_cnt1 = key->key_timer_cnt2 = key->key_state_buffer1 = key->key_state_buffer2 = 0;
  0290    3E03    ADDIA	0x3
  0291    0084    LD	0x4,A
  0292    1383    CLRB	0x3,7
  0293    0180    CLR	0x0
  0294    0A74    INCA	0x74
  0295    0084    LD	0x4,A
  0296    0180    CLR	0x0
  0297    0874    LD	A,0x74
  0298    3E02    ADDIA	0x2
  0299    0084    LD	0x4,A
  029A    0180    CLR	0x0
  029B    0874    LD	A,0x74
  029C    0084    LD	0x4,A
  029D    0180    CLR	0x0
  029E    0008    RET
  02A0    3E03    ADDIA	0x3
  02A1    0084    LD	0x4,A
  02A2    1383    CLRB	0x3,7
  02A3    0180    CLR	0x0
  02A4    0A70    INCA	0x70
  02A5    0084    LD	0x4,A
  02A6    0180    CLR	0x0
  02A7    0870    LD	A,0x70
  02A8    3E02    ADDIA	0x2
  02A9    0084    LD	0x4,A
  02AA    0180    CLR	0x0
  02AB    0870    LD	A,0x70
  02AC    0084    LD	0x4,A
  02AD    0180    CLR	0x0
  02AE    0008    RET
102:              }
---- E:\project\project0508\scm\n9_fan_no_led\adc.c ----------------------------------------------------------------------
1:                #include "adc.h"
2:                
3:                /**********************************************************
4:                函数名称：AD_Sample
5:                函数功能：AD检测
6:                入口参数：adch - 检测通道
7:                出口参数：无 
8:                备    注：采样通道需自行设置为模拟口
9:                	      采样10次,取中间八次的平均值为采样结果存于adresult中
10:               **********************************************************/
11:               void ADC_Sample(unsigned char adch)
  0019    00BA    LD	0x3A,A
12:               {
13:               	static unsigned long adsum = 0;
14:               	static unsigned int admin = 0,admax = 0;
15:               	static unsigned char adtimes = 0;
16:               	volatile unsigned int ad_temp;
17:               	ADCON1 = 0;						//左对齐
  001A    1683    SETB	0x3,5
  001B    019F    CLR	0x1F
18:               	ADCON0 = 0X41 | (adch << 2);	//16分频
  001C    1283    CLRB	0x3,5
  001D    083A    LD	A,0x3A
  001E    00B6    LD	0x36,A
  001F    3001    LDIA	0x1
  0020    1003    CLRB	0x3,0
  0021    0DB6    RLCR	0x36
  0022    3EFF    ADDIA	0xFF
  0023    1003    CLRB	0x3,0
  0024    1D03    SNZB	0x3,2
  0025    2821    JP	0x21
  0026    0D36    RLCA	0x36
  0027    3841    ORIA	0x41
  0028    009F    LD	0x1F,A
  0029    0000    NOP
  002A    0000    NOP
19:               	asm("nop");
20:               	asm("nop");
21:               	GODONE = 1;						//开始转换
  002B    1283    CLRB	0x3,5
  002C    1303    CLRB	0x3,6
  002D    149F    SETB	0x1F,1
22:               
23:               	unsigned char i = 0;
  002E    01BB    CLR	0x3B
24:               	while(GODONE)
  002F    1C9F    SNZB	0x1F,1
  0030    2834    JP	0x34
25:               	{
26:               		if(0 == (--i))
  0031    0BBB    SZDECR	0x3B
  0032    282F    JP	0x2F
  0033    0008    RET
27:               			return;
28:               	}
29:               	
30:               	ad_temp=(ADRESH<<4)+(ADRESL>>4);	//计算12位AD值
  0034    081E    LD	A,0x1E
  0035    00BC    LD	0x3C,A
  0036    01BD    CLR	0x3D
  0037    0EBC    SWAPR	0x3C
  0038    0EBD    SWAPR	0x3D
  0039    30F0    LDIA	0xF0
  003A    05BD    ANDR	0x3D
  003B    083C    LD	A,0x3C
  003C    390F    ANDIA	0xF
  003D    04BD    ORR	0x3D
  003E    30F0    LDIA	0xF0
  003F    05BC    ANDR	0x3C
  0040    1683    SETB	0x3,5
  0041    0E1E    SWAPA	0x1E
  0042    390F    ANDIA	0xF
  0043    1283    CLRB	0x3,5
  0044    07BC    ADDR	0x3C
  0045    1803    SZB	0x3,0
  0046    0ABD    INCR	0x3D
31:               	
32:               	if(0 == admax)
  0047    0824    LD	A,0x24
  0048    0425    ORA	0x25
  0049    1D03    SNZB	0x3,2
  004A    284D    JP	0x4D
33:               	{
34:               		admax = ad_temp;
  004B    20BE    CALL	0xBE
  004C    285F    JP	0x5F
35:               		admin = ad_temp;
36:               	}
37:               	else if(ad_temp > admax)
  004D    083D    LD	A,0x3D
  004E    0225    SUBA	0x25
  004F    1D03    SNZB	0x3,2
  0050    2853    JP	0x53
  0051    083C    LD	A,0x3C
  0052    0224    SUBA	0x24
  0053    1803    SZB	0x3,0
  0054    2857    JP	0x57
38:               		admax = ad_temp;				//AD采样最大值
  0055    20BE    CALL	0xBE
  0056    2863    JP	0x63
39:               	else if(ad_temp < admin)
  0057    0827    LD	A,0x27
  0058    023D    SUBA	0x3D
  0059    1D03    SNZB	0x3,2
  005A    285D    JP	0x5D
  005B    0826    LD	A,0x26
  005C    023C    SUBA	0x3C
  005D    1803    SZB	0x3,0
  005E    2863    JP	0x63
40:               		admin = ad_temp;				//AD采样最小值
  005F    083D    LD	A,0x3D
  0060    00A7    LD	0x27,A
  0061    083C    LD	A,0x3C
  0062    00A6    LD	0x26,A
41:               	
42:               	adsum += ad_temp;
  0063    083C    LD	A,0x3C
  0064    00B6    LD	0x36,A
  0065    083D    LD	A,0x3D
  0066    00B7    LD	0x37,A
  0067    01B8    CLR	0x38
  0068    01B9    CLR	0x39
  0069    0836    LD	A,0x36
  006A    07A0    ADDR	0x20
  006B    0837    LD	A,0x37
  006C    1103    CLRB	0x3,2
  006D    1803    SZB	0x3,0
  006E    3E01    ADDIA	0x1
  006F    1D03    SNZB	0x3,2
  0070    07A1    ADDR	0x21
  0071    0838    LD	A,0x38
  0072    1103    CLRB	0x3,2
  0073    1803    SZB	0x3,0
  0074    3E01    ADDIA	0x1
  0075    1D03    SNZB	0x3,2
  0076    07A2    ADDR	0x22
  0077    0839    LD	A,0x39
  0078    1103    CLRB	0x3,2
  0079    1803    SZB	0x3,0
  007A    3E01    ADDIA	0x1
  007B    1D03    SNZB	0x3,2
  007C    07A3    ADDR	0x23
43:               	if(++adtimes >= 10)
  007D    300A    LDIA	0xA
  007E    0AAE    INCR	0x2E
  007F    022E    SUBA	0x2E
  0080    1C03    SNZB	0x3,0
  0081    0008    RET
44:               	{
45:               		adsum -= admax;
  0082    0824    LD	A,0x24
  0083    00B6    LD	0x36,A
  0084    0825    LD	A,0x25
  0085    20AF    CALL	0xAF
  0086    1C03    SNZB	0x3,0
  0087    0F39    SZINCA	0x39
  0088    02A3    SUBR	0x23
46:               		adsum -= admin;
  0089    0826    LD	A,0x26
  008A    00B6    LD	0x36,A
  008B    0827    LD	A,0x27
  008C    20AF    CALL	0xAF
  008D    1C03    SNZB	0x3,0
  008E    0F39    SZINCA	0x39
  008F    02A3    SUBR	0x23
47:               		
48:               		adresult = adsum >> 3;		//8次平均值作为最终结果
  0090    0820    LD	A,0x20
  0091    00B6    LD	0x36,A
  0092    0821    LD	A,0x21
  0093    00B7    LD	0x37,A
  0094    0822    LD	A,0x22
  0095    00B8    LD	0x38,A
  0096    0823    LD	A,0x23
  0097    00B9    LD	0x39,A
  0098    3003    LDIA	0x3
  0099    1003    CLRB	0x3,0
  009A    0CB9    RRCR	0x39
  009B    0CB8    RRCR	0x38
  009C    0CB7    RRCR	0x37
  009D    0CB6    RRCR	0x36
  009E    3EFF    ADDIA	0xFF
  009F    1D03    SNZB	0x3,2
  00A0    2899    JP	0x99
  00A1    0837    LD	A,0x37
  00A2    00AD    LD	0x2D,A
  00A3    0836    LD	A,0x36
  00A4    00AC    LD	0x2C,A
49:               		
50:               		adsum = 0;
  00A5    01A0    CLR	0x20
  00A6    01A1    CLR	0x21
  00A7    01A2    CLR	0x22
  00A8    01A3    CLR	0x23
51:               		admin = 0;
  00A9    01A6    CLR	0x26
  00AA    01A7    CLR	0x27
52:               		admax = 0;
  00AB    01A4    CLR	0x24
  00AC    01A5    CLR	0x25
53:               		adtimes = 0;
  00AD    01AE    CLR	0x2E
  00AE    0008    RET
54:               	}
55:               }
56:               
57:               
58:               //ADC单次采样
59:               unsigned char ADC_Result(unsigned char adch)
60:               {
61:               	ADCON1 = 0;						//左对齐
62:               	ADCON0 = 0X41 | (adch << 2);	//16分频
63:               	asm("nop");
64:               	asm("nop");
65:               	GODONE = 1;						//开始转换
66:               
67:               	unsigned char i = 0;
68:               	while(GODONE)
69:               	{
70:               		if(0 == (--i))
71:               			return 0;				//转换超时
72:               	}
73:               	return ADRESH;
74:               }
75:               /***********************************************************
76:               函数名称：DelayXms
77:               函数功能：毫秒级非精准延时
78:               入口参数：x - 延时时间
79:               出口参数：
80:               备    注：
81:               ***********************************************************/
82:               void DelayXms(unsigned char x)
  02BD    1283    CLRB	0x3,5
  02BE    1303    CLRB	0x3,6
  02BF    00B6    LD	0x36,A
83:               {
84:               	unsigned char i,j;
85:               	for(i=x;i>0;i--)
  02C0    00B7    LD	0x37,A
  02C1    0837    LD	A,0x37
  02C2    1903    SZB	0x3,2
  02C3    0008    RET
86:               		for(j=153;j>0;j--);
  02C4    3099    LDIA	0x99
  02C5    00B8    LD	0x38,A
  02C6    0BB8    SZDECR	0x38
  02C7    2AC6    JP	0x2C6
  02C8    03B7    DECR	0x37
  02C9    2AC1    JP	0x2C1
87:               }
88:               
89:               //读取内部电压
90:               unsigned int readVrefADC()
91:               {
92:               	DelayXms(1);
  02FC    3001    LDIA	0x1
  02FD    22BD    CALL	0x2BD
93:               	ADC_Sample(15);
  02FE    300F    LDIA	0xF
  02FF    2819    JP	0x19
94:               	//unsigned char result;
95:               		
96:               	//result = ADC_Result(15);
97:               	return adresult;
98:               }
---- E:\cms\SCMCU_IDE_V2.00.07\data\sources\common\awdiv.c ----------------------------------------------------------------------
1:                // integer signed division
2:                
3:                signed int
4:                #ifdef __PICC__
5:                #warning TODO: update cgpic and this file to use the other prototype
6:                __awdiv(signed int divisor, signed int dividend)
  00C3    01BB    CLR	0x3B
  00C4    1FB7    SNZB	0x37,7
  00C5    28CD    JP	0xCD
  00C6    09B6    COMR	0x36
  00C7    09B7    COMR	0x37
  00C8    0AB6    INCR	0x36
  00C9    1903    SZB	0x3,2
  00CA    0AB7    INCR	0x37
  00CB    01BB    CLR	0x3B
  00CC    0ABB    INCR	0x3B
  00CD    1FB9    SNZB	0x39,7
  00CE    28D6    JP	0xD6
  00CF    09B8    COMR	0x38
  00D0    09B9    COMR	0x39
  00D1    0AB8    INCR	0x38
  00D2    1903    SZB	0x3,2
  00D3    0AB9    INCR	0x39
  00D4    3001    LDIA	0x1
  00D5    06BB    XORR	0x3B
  00D6    01BC    CLR	0x3C
  00D7    01BD    CLR	0x3D
  00D8    0836    LD	A,0x36
  00D9    0437    ORA	0x37
  00DA    1903    SZB	0x3,2
  00DB    28FB    JP	0xFB
  00DC    01BA    CLR	0x3A
  00DD    0ABA    INCR	0x3A
  00DE    1BB7    SZB	0x37,7
  00DF    28E4    JP	0xE4
  00E0    1003    CLRB	0x3,0
  00E1    0DB6    RLCR	0x36
  00E2    0DB7    RLCR	0x37
  00E3    28DD    JP	0xDD
  00E4    1003    CLRB	0x3,0
  00E5    0DBC    RLCR	0x3C
  00E6    0DBD    RLCR	0x3D
  00E7    0837    LD	A,0x37
  00E8    0239    SUBA	0x39
  00E9    1D03    SNZB	0x3,2
  00EA    28ED    JP	0xED
  00EB    0836    LD	A,0x36
  00EC    0238    SUBA	0x38
  00ED    1C03    SNZB	0x3,0
  00EE    28F7    JP	0xF7
  00EF    0836    LD	A,0x36
  00F0    02B8    SUBR	0x38
  00F1    0837    LD	A,0x37
  00F2    1C03    SNZB	0x3,0
  00F3    03B9    DECR	0x39
  00F4    02B9    SUBR	0x39
  00F5    143C    SETB	0x3C,0
  00F6    1003    CLRB	0x3,0
  00F7    0CB7    RRCR	0x37
  00F8    0CB6    RRCR	0x36
  00F9    0BBA    SZDECR	0x3A
  00FA    28E4    JP	0xE4
  00FB    083B    LD	A,0x3B
  00FC    1903    SZB	0x3,2
  00FD    2903    JP	0x103
  00FE    09BC    COMR	0x3C
  00FF    09BD    COMR	0x3D
  0100    0ABC    INCR	0x3C
  0101    1903    SZB	0x3,2
  0102    0ABD    INCR	0x3D
  0103    083D    LD	A,0x3D
  0104    00B7    LD	0x37,A
  0105    083C    LD	A,0x3C
  0106    00B6    LD	0x36,A
  0107    0008    RET
7:                #else
8:                __awdiv(signed int dividend, signed int divisor)
9:                #endif
10:               {
11:               	signed int	quotient;
12:               	unsigned char	counter, sign;
13:               
14:               	sign = 0;
15:               	if(divisor < 0) {
16:               		divisor = -divisor;
17:               		sign = 1;
18:               	}
19:               	if(dividend < 0) {
20:               		dividend = -dividend;
21:               		sign ^= 1;
22:               	}
23:               	quotient = 0;
24:               	if(divisor != 0) {
25:               		counter = 1;
26:               		while((divisor & 0x8000U) == 0) {
27:               			divisor <<= 1;
28:               			counter++;
29:               		}
30:               		do {
31:               			quotient <<= 1;
32:               			if((unsigned int)divisor <= (unsigned int)dividend) {
33:               				dividend -= divisor;
34:               				quotient |= 1;
35:               			}
36:               			*(unsigned int *)&divisor >>= 1;
37:               		} while(--counter != 0);
38:               	}
39:               	if(sign)
40:               		quotient = -quotient;
41:               	return quotient;
42:               }
---- E:\project\project0508\scm\n9_fan_no_led\init.c ----------------------------------------------------------------------
1:                #include "init.h"
2:                
3:                void Init_System() {
  02D6    0000    NOP
  02D7    0064    CLRWDT
  0304    0000    NOP
  0305    0064    CLRWDT
4:                    asm("nop");
5:                    asm("clrwdt");
6:                    INTCON = 0;                    //系统初始化
7:                    OSCCON = 0X71;                //配置振荡为8M,开 WDT
8:                    OPTION_REG = 0x00;        //Timer0使用内部时钟Focs/4，预分频比为1:2
  02D8    2AD9    JP	0x2D9
  0306    2AD9    JP	0x2D9
9:                
10:               }
11:               
12:               
13:               void Init_GPIO() {
14:                   TRISA = 0;
15:                   TRISB = 0;
16:                   TRISC = 0;
17:                   WPUA = 0xFF;
18:                   WPUB = 0xFF;
19:                   WPUC = 0xFF;
20:                   PORTA = 0xFF;
21:                   PORTB = 0xFF;
22:                   PORTC = 0xFF;
23:                   IOCB = 0x00;
  027C    2A7D    JP	0x27D
  0309    2A7D    JP	0x27D
24:               
25:               }
26:               
27:               void Init_Interupt() {
28:                   OPTION_REG = 0x00;        //Timer0使用内部时钟Focs/4，预分频比为1:2
29:                   TMR0 = 0;                //赋予初始值
30:                   INTCON = 0xE0;            //允许所有未被屏蔽的中断、禁止外设中断，使能Timer0
  02E8    2AE9    JP	0x2E9
  0308    2AE9    JP	0x2E9
31:               
32:               }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    280C    JP	0xC
  000C    280D    JP	0xD
---- start_initialization ------------------------------------------------------------------
  000D    3001    LDIA	0x1
  000E    00F8    LD	0x78,A
  000F    00F9    LD	0x79,A
  0010    3020    LDIA	0x20
  0011    1383    CLRB	0x3,7
  0012    0084    LD	0x4,A
  0013    3036    LDIA	0x36
  0014    22E0    CALL	0x2E0
  0015    01F6    CLR	0x76
  0016    01F7    CLR	0x77
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F1    LD	0x71,A
  0007    0804    LD	A,0x4
  0008    00F2    LD	0x72,A
  0009    080A    LD	A,0xA
  000A    00F3    LD	0x73,A
  000B    2A40    JP	0x240
---- common_function ------------------------------------------------------------------
  0017    0183    CLR	0x3
  0018    29C2    JP	0x1C2
  00AF    00B7    LD	0x37,A
  00B0    01B8    CLR	0x38
  00B1    01B9    CLR	0x39
  00B2    0836    LD	A,0x36
  00B3    02A0    SUBR	0x20
  00B4    0837    LD	A,0x37
  00B5    1C03    SNZB	0x3,0
  00B6    0F37    SZINCA	0x37
  00B7    02A1    SUBR	0x21
  00B8    0838    LD	A,0x38
  00B9    1C03    SNZB	0x3,0
  00BA    0F38    SZINCA	0x38
  00BB    02A2    SUBR	0x22
  00BC    0839    LD	A,0x39
  00BD    0008    RET
  00BE    083D    LD	A,0x3D
  00BF    00A5    LD	0x25,A
  00C0    083C    LD	A,0x3C
  00C1    00A4    LD	0x24,A
  00C2    0008    RET
  0231    3004    LDIA	0x4
  0232    0096    LD	0x16,A
  0233    309B    LDIA	0x9B
  0234    1283    CLRB	0x3,5
  0235    0081    LD	0x1,A
  0236    1203    CLRB	0x3,4
  0237    3005    LDIA	0x5
  0238    00B5    LD	0x35,A
  0239    342F    RET	0x2F
  023A    1683    SETB	0x3,5
  023B    0185    CLR	0x5
  023C    307E    LDIA	0x7E
  023D    0086    LD	0x6,A
  023E    0187    CLR	0x7
  023F    0008    RET
  027D    0185    CLR	0x5
  027E    0186    CLR	0x6
  027F    0187    CLR	0x7
  0280    30FF    LDIA	0xFF
  0281    1703    SETB	0x3,6
  0282    008E    LD	0xE,A
  0283    1303    CLRB	0x3,6
  0284    0095    LD	0x15,A
  0285    1703    SETB	0x3,6
  0286    008F    LD	0xF,A
  0287    1283    CLRB	0x3,5
  0288    1303    CLRB	0x3,6
  0289    0085    LD	0x5,A
  028A    0086    LD	0x6,A
  028B    0087    LD	0x7,A
  028C    1683    SETB	0x3,5
  028D    0196    CLR	0x16
  028E    0008    RET
  02B0    300F    LDIA	0xF
  02B1    0097    LD	0x17,A
  02B2    0192    CLR	0x12
  02B3    3007    LDIA	0x7
  02B4    1683    SETB	0x3,5
  02B5    0092    LD	0x12,A
  02B6    1283    CLRB	0x3,5
  02B7    0195    CLR	0x15
  02B8    108C    CLRB	0xC,1
  02B9    0192    CLR	0x12
  02BA    1683    SETB	0x3,5
  02BB    1107    CLRB	0x7,2
  02BC    0008    RET
  02D9    018B    CLR	0xB
  02DA    3071    LDIA	0x71
  02DB    1683    SETB	0x3,5
  02DC    1303    CLRB	0x3,6
  02DD    008F    LD	0xF,A
  02DE    0181    CLR	0x1
  02DF    0008    RET
  02E0    0064    CLRWDT
  02E1    0180    CLR	0x0
  02E2    0A84    INCR	0x4
  02E3    0604    XORA	0x4
  02E4    1903    SZB	0x3,2
  02E5    3400    RET	0x0
  02E6    0604    XORA	0x4
  02E7    2AE1    JP	0x2E1
  02E9    0181    CLR	0x1
  02EA    1283    CLRB	0x3,5
  02EB    0181    CLR	0x1
  02EC    30E0    LDIA	0xE0
  02ED    008B    LD	0xB,A
  02EE    0008    RET
  0300    2910    JP	0x110
  0301    2918    JP	0x118
  0302    2922    JP	0x122
  0303    2935    JP	0x135
