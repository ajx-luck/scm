

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jul 02 01:06:23 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F2852
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	bitnvCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	swtext1,local,class=CONST,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	pa_nodes0,global,class=CODE,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC16F887 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataBANK0
    86  0000                     __pidataBANK0:	
    87                           
    88                           	psect	strings
    89  0310                     __pstrings:	
    90  0310                     stringtab:	
    91  0310                     __stringtab:	
    92  0310                     stringcode:	
    93                           ;	String table - string pointers are 1 byte each
    94                           
    95  0310                     stringdir:	
    96  0310  3003               	movlw	high stringdir
    97  0311  008A               	movwf	10
    98  0312  0804               	movf	4,w
    99  0313  0A84               	incf	4,f
   100  0314  0782               	addwf	2,f
   101  0315                     __stringbase:	
   102  0315  3400               	retlw	0
   103  0316                     __end_of__stringtab:	
   104  0316                     _Table_KeyFalg:	
   105  0316  3401               	retlw	1
   106  0317  3402               	retlw	2
   107  0318  3404               	retlw	4
   108  0319  3408               	retlw	8
   109  031A  3410               	retlw	16
   110  031B  3420               	retlw	32
   111  031C  3440               	retlw	64
   112  031D  3480               	retlw	128
   113  031E                     __end_of_Table_KeyFalg:	
   114  031E                     _Table_KeyDown:	
   115  031E  340A               	retlw	10
   116  031F  340A               	retlw	10
   117  0320                     __end_of_Table_KeyDown:	
   118  0320                     _Table_KeyCap:	
   119  0320  3402               	retlw	2
   120  0321  3402               	retlw	2
   121  0322                     __end_of_Table_KeyCap:	
   122  0322                     _Table_KeyChannel:	
   123  0322  3462               	retlw	98
   124  0323  3463               	retlw	99
   125  0324                     __end_of_Table_KeyChannel:	
   126                           
   127                           	psect	bitnvCOMMON
   128  03C0                     __pbitnvCOMMON:	
   129  03C0                     _sendFlag:	
   130  03C0                     	ds	1
   131  0018                     _PWMD1L	set	24
   132  0017                     _PWMD0L	set	23
   133  0016                     _PWMTH	set	22
   134  0013                     _PWMCON0	set	19
   135  0012                     _T2CON	set	18
   136  000D                     _PIE1	set	13
   137  000C                     _PIR1	set	12
   138  000B                     _INTCON	set	11
   139  0006                     _PORTB	set	6
   140  0005                     _PORTA	set	5
   141  0061                     _TMR2IF	set	97
   142  0095                     _KEYDATAH	set	149
   143  0094                     _KEYDATAL	set	148
   144  0093                     _KEYCON1	set	147
   145  0092                     _KEYCON0	set	146
   146  0091                     _PR2	set	145
   147  0088                     _OSCCON	set	136
   148  0086                     _TRISB	set	134
   149  0085                     _TRISA	set	133
   150  0081                     _OPTION_REG	set	129
   151                           
   152                           	psect	cinit
   153  000B                     start_initialization:	
   154                           ; #config settings
   155                           
   156  000B                     __initialization:	
   157                           
   158                           ;initializer for _pwm1Step
   159  000B  3001               	movlw	1
   160  000C  00D6               	movwf	__pdataBANK0& (0+127)
   161                           
   162                           ;initializer for _pwm0Step
   163  000D  00D7               	movwf	(__pdataBANK0+1)& (0+127)
   164  000E  3020               	movlw	low __pbssBANK0
   165                           
   166                           ; Clear objects allocated to BANK0
   167  000F  1383               	bcf	3,7	;select IRP bank0
   168  0010  0084               	movwf	4
   169  0011  3049               	movlw	low (__pbssBANK0+41)
   170  0012  239F               	fcall	clear_ram0
   171                           
   172                           ; Clear objects allocated to COMMON
   173  0013  01F9               	clrf	__pbssCOMMON& (0+127)
   174                           
   175                           ; Clear objects allocated to BITCOMMON
   176  0014  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   177  0015  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   178  0016                     end_of_initialization:	
   179                           ;End of C runtime variable initialization code
   180                           
   181  0016                     __end_of__initialization:	
   182  0016  0183               	clrf	3
   183  0017  2AE6               	ljmp	_main	;jump to C main() function
   184                           
   185                           	psect	bitbssCOMMON
   186  0380                     __pbitbssCOMMON:	
   187  0380                     _b_kerr:	
   188  0380                     	ds	1
   189  0381                     _b_kclr:	
   190  0381                     	ds	1
   191  0382                     _b_kover1:	
   192  0382                     	ds	1
   193  0383                     _b_kover:	
   194  0383                     	ds	1
   195  0384                     _pwmFlag:	
   196  0384                     	ds	1
   197  0385                     _ONFlag:	
   198  0385                     	ds	1
   199  0386                     _doublePressFlag:	
   200  0386                     	ds	1
   201  0387                     _sendStartFlag:	
   202  0387                     	ds	1
   203  0388                     _B_MainLoop:	
   204  0388                     	ds	1
   205                           
   206                           	psect	bssCOMMON
   207  0079                     __pbssCOMMON:	
   208  0079                     _pwmTime:	
   209  0079                     	ds	1
   210                           
   211                           	psect	bssBANK0
   212  0020                     __pbssBANK0:	
   213  0020                     _KeyReference:	
   214  0020                     	ds	4
   215  0024                     _KeyOldValue2:	
   216  0024                     	ds	4
   217  0028                     _KeyOldValue1:	
   218  0028                     	ds	4
   219  002C                     _KeyOldValue0:	
   220  002C                     	ds	4
   221  0030                     _KeyResSum:	
   222  0030                     	ds	4
   223  0034                     CheckValidTime@validtime:	
   224  0034                     	ds	2
   225  0036                     _KeyData:	
   226  0036                     	ds	2
   227  0038                     _KeyOldData:	
   228  0038                     	ds	2
   229  003A                     KeyServer@KeyOldFlag:	
   230  003A                     	ds	2
   231  003C                     _KeyUpShake:	
   232  003C                     	ds	2
   233  003E                     _KeyFlag:	
   234  003E                     	ds	2
   235  0040                     TurnKeyFlags@KeyNoTimes:	
   236  0040                     	ds	1
   237  0041                     TurnKeyFlags@KeyHaveTimes:	
   238  0041                     	ds	1
   239  0042                     CheckKeyOldValue@counter:	
   240  0042                     	ds	1
   241  0043                     _KeyMaxSub:	
   242  0043                     	ds	1
   243  0044                     _KeyCounter:	
   244  0044                     	ds	1
   245  0045                     _checkCount:	
   246  0045                     	ds	1
   247  0046                     _revCount:	
   248  0046                     	ds	1
   249  0047                     _irStep:	
   250  0047                     	ds	1
   251  0048                     _MainTime:	
   252  0048                     	ds	1
   253                           
   254                           	psect	dataBANK0
   255  0056                     __pdataBANK0:	
   256  0056                     _pwm1Step:	
   257  0056                     	ds	1
   258  0057                     _pwm0Step:	
   259  0057                     	ds	1
   260                           
   261                           	psect	clrtext
   262  039F                     clear_ram0:	
   263                           ;	Called with FSR containing the base address, and
   264                           ;	W with the last address+1
   265                           
   266  039F  0064               	clrwdt	;clear the watchdog before getting into this loop
   267  03A0                     clrloop0:	
   268  03A0  0180               	clrf	0	;clear RAM location pointed to by FSR
   269  03A1  0A84               	incf	4,f	;increment pointer
   270  03A2  0604               	xorwf	4,w	;XOR with final address
   271  03A3  1903               	btfsc	3,2	;have we reached the end yet?
   272  03A4  3400               	retlw	0	;all done for this memory range, return
   273  03A5  0604               	xorwf	4,w	;XOR again to restore value
   274  03A6  2BA0               	goto	clrloop0	;do the next byte
   275                           
   276                           	psect	cstackCOMMON
   277  0072                     __pcstackCOMMON:	
   278  0072                     ?_mode2_a:	
   279  0072                     ?_mode3_a:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0072                     ?_mode4_a:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0072                     ?_mode5_a:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0072                     ?_mode1_a:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0072                     ?_mode1_b:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0072                     ?_mode1_c:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0072                     ?_mode1_d:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0072                     ?_mode1_e:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0072                     ?_CheckTouchKey:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0072                     ?_Init_System:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0072                     ?_Refurbish_Sfr:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0072                     ?_procKey1:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0072                     ?_procKey2:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0072                     ?_startPWM:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0072                     ?_KeyServer:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0072                     ?_checkIRKey:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0072                     ?_Isr_Timer:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0072                     ??_Isr_Timer:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0072                     ?_main:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0072                     ?_KeyIsIn:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0072                     ?_KeyClearOne:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0072                     ?_KeyClearIn:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0072                     ?_KeyStopClear:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0072                     ?_ClearResSum:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0072                     ?_GetTouchKeyValue:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0072                     ?_CheckOnceResult:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0072                     ?_CheckKeyOldValue:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0072                     ?_TurnKeyFlags:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0072                     ?_CheckValidTime:	
   364                           ; 1 bytes @ 0x0
   365                           
   366                           
   367                           ; 1 bytes @ 0x0
   368  0072                     	ds	2
   369  0074                     ??_mode2_a:	
   370  0074                     ??_mode3_a:	
   371                           ; 1 bytes @ 0x2
   372                           
   373  0074                     ??_mode4_a:	
   374                           ; 1 bytes @ 0x2
   375                           
   376  0074                     ??_mode5_a:	
   377                           ; 1 bytes @ 0x2
   378                           
   379  0074                     ??_mode1_a:	
   380                           ; 1 bytes @ 0x2
   381                           
   382  0074                     ??_mode1_b:	
   383                           ; 1 bytes @ 0x2
   384                           
   385  0074                     ??_mode1_c:	
   386                           ; 1 bytes @ 0x2
   387                           
   388  0074                     ??_mode1_d:	
   389                           ; 1 bytes @ 0x2
   390                           
   391  0074                     ??_mode1_e:	
   392                           ; 1 bytes @ 0x2
   393                           
   394  0074                     ??_Init_System:	
   395                           ; 1 bytes @ 0x2
   396                           
   397  0074                     ??_Refurbish_Sfr:	
   398                           ; 1 bytes @ 0x2
   399                           
   400  0074                     ??_procKey1:	
   401                           ; 1 bytes @ 0x2
   402                           
   403  0074                     ??_procKey2:	
   404                           ; 1 bytes @ 0x2
   405                           
   406  0074                     ??_startPWM:	
   407                           ; 1 bytes @ 0x2
   408                           
   409  0074                     ??_KeyServer:	
   410                           ; 1 bytes @ 0x2
   411                           
   412  0074                     ??_checkIRKey:	
   413                           ; 1 bytes @ 0x2
   414                           
   415  0074                     ??_KeyIsIn:	
   416                           ; 1 bytes @ 0x2
   417                           
   418  0074                     ??_KeyClearOne:	
   419                           ; 1 bytes @ 0x2
   420                           
   421  0074                     ??_ClearResSum:	
   422                           ; 1 bytes @ 0x2
   423                           
   424  0074                     ?_KeyHave:	
   425                           ; 1 bytes @ 0x2
   426                           
   427  0074                     ??_CheckValidTime:	
   428                           ; 1 bytes @ 0x2
   429                           
   430  0074                     KeyIsIn@i:	
   431                           ; 1 bytes @ 0x2
   432                           
   433  0074                     KeyClearOne@cnt:	
   434                           ; 1 bytes @ 0x2
   435                           
   436  0074                     ClearResSum@cnt:	
   437                           ; 1 bytes @ 0x2
   438                           
   439  0074                     KeyServer@i:	
   440                           ; 1 bytes @ 0x2
   441                           
   442  0074                     KeyHave@flag:	
   443                           ; 2 bytes @ 0x2
   444                           
   445                           
   446                           ; 2 bytes @ 0x2
   447  0074                     	ds	1
   448  0075                     ??_KeyStopClear:	
   449  0075                     ??_GetTouchKeyValue:	
   450                           ; 1 bytes @ 0x3
   451                           
   452  0075                     KeyIsIn@cnt:	
   453                           ; 1 bytes @ 0x3
   454                           
   455  0075                     KeyStopClear@i:	
   456                           ; 1 bytes @ 0x3
   457                           
   458  0075                     GetTouchKeyValue@temp:	
   459                           ; 1 bytes @ 0x3
   460                           
   461                           
   462                           ; 1 bytes @ 0x3
   463  0075                     	ds	1
   464  0076                     ??_KeyClearIn:	
   465  0076                     ??_KeyHave:	
   466                           ; 1 bytes @ 0x4
   467                           
   468  0076                     ??_CheckKeyOldValue:	
   469                           ; 1 bytes @ 0x4
   470                           
   471  0076                     KeyClearIn@cnt:	
   472                           ; 1 bytes @ 0x4
   473                           
   474  0076                     KeyHave@cnt:	
   475                           ; 1 bytes @ 0x4
   476                           
   477  0076                     GetTouchKeyValue@cnt:	
   478                           ; 1 bytes @ 0x4
   479                           
   480                           
   481                           ; 1 bytes @ 0x4
   482  0076                     	ds	1
   483  0077                     ??_TurnKeyFlags:	
   484                           
   485                           ; 1 bytes @ 0x5
   486  0077                     	ds	1
   487  0078                     ??_CheckTouchKey:	
   488  0078                     ??_main:	
   489                           ; 1 bytes @ 0x6
   490                           
   491                           
   492                           	psect	cstackBANK0
   493  0049                     __pcstackBANK0:	
   494                           ; 1 bytes @ 0x6
   495                           
   496  0049                     ??_CheckOnceResult:	
   497  0049                     CheckKeyOldValue@KeyResTemp:	
   498                           ; 1 bytes @ 0x0
   499                           
   500                           
   501                           ; 2 bytes @ 0x0
   502  0049                     	ds	2
   503  004B                     CheckKeyOldValue@KeyOldTemp:	
   504                           
   505                           ; 2 bytes @ 0x2
   506  004B                     	ds	2
   507  004D                     CheckKeyOldValue@cnt:	
   508  004D                     CheckOnceResult@OldValue:	
   509                           ; 1 bytes @ 0x4
   510                           
   511                           
   512                           ; 2 bytes @ 0x4
   513  004D                     	ds	2
   514  004F                     CheckOnceResult@flag:	
   515                           
   516                           ; 1 bytes @ 0x6
   517  004F                     	ds	1
   518  0050                     CheckOnceResult@KeyValue:	
   519                           
   520                           ; 2 bytes @ 0x7
   521  0050                     	ds	2
   522  0052                     CheckOnceResult@KeyDown:	
   523                           
   524                           ; 1 bytes @ 0x9
   525  0052                     	ds	1
   526  0053                     CheckOnceResult@KeyResTemp:	
   527                           
   528                           ; 2 bytes @ 0xA
   529  0053                     	ds	2
   530  0055                     CheckOnceResult@cnt:	
   531                           
   532                           ; 1 bytes @ 0xC
   533  0055                     	ds	1
   534                           
   535                           	psect	maintext
   536  02E6                     __pmaintext:	
   537 ;;
   538 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   539 ;;
   540 ;; *************** function _main *****************
   541 ;; Defined at:
   542 ;;		line 278 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
   543 ;; Parameters:    Size  Location     Type
   544 ;;		None
   545 ;; Auto vars:     Size  Location     Type
   546 ;;		None
   547 ;; Return value:  Size  Location     Type
   548 ;;                  1    wreg      void 
   549 ;; Registers used:
   550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   551 ;; Tracked objects:
   552 ;;		On entry : B00/0
   553 ;;		On exit  : 300/0
   554 ;;		Unchanged: 0/0
   555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   556 ;;      Params:         0       0       0       0
   557 ;;      Locals:         0       0       0       0
   558 ;;      Temps:          0       0       0       0
   559 ;;      Totals:         0       0       0       0
   560 ;;Total ram usage:        0 bytes
   561 ;; Hardware stack levels required when called:    6
   562 ;; This function calls:
   563 ;;		_CheckTouchKey
   564 ;;		_Init_System
   565 ;;		_KeyServer
   566 ;;		_Refurbish_Sfr
   567 ;;		_checkIRKey
   568 ;;		_startPWM
   569 ;; This function is called by:
   570 ;;		Startup code after reset
   571 ;; This function uses a non-reentrant model
   572 ;;
   573                           
   574                           
   575                           ;psect for function _main
   576  02E6                     _main:	
   577                           
   578                           ;main.c: 280: Init_System();
   579                           
   580                           ;incstack = 0
   581                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   582  02E6  235C               	fcall	_Init_System
   583                           
   584                           ;main.c: 281: sendFlag = 1;
   585  02E7  1478               	bsf	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
   586  02E8                     l2781:	
   587                           
   588                           ;main.c: 285: {
   589                           ;main.c: 286: if(B_MainLoop)
   590  02E8  1C71               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   591  02E9  2AE8               	goto	l2781
   592                           
   593                           ;main.c: 287: {
   594                           ;main.c: 288: B_MainLoop = 0;
   595  02EA  1071               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   596  02EB  0064               	clrwdt	;# 
   597                           
   598                           ;main.c: 291: CheckTouchKey();
   599  02EC  224D               	fcall	_CheckTouchKey
   600                           
   601                           ;main.c: 293: Refurbish_Sfr();
   602  02ED  2324               	fcall	_Refurbish_Sfr
   603                           
   604                           ;main.c: 294: KeyServer();
   605  02EE  2187               	fcall	_KeyServer
   606                           
   607                           ;main.c: 295: checkIRKey();
   608  02EF  21C0               	fcall	_checkIRKey
   609                           
   610                           ;main.c: 296: if(ONFlag && pwmFlag == 0)
   611  02F0  1AF0               	btfsc	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   612  02F1  1A70               	btfsc	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
   613  02F2  2AF5               	goto	l557
   614                           
   615                           ;main.c: 297: {
   616                           ;main.c: 298: startPWM();
   617  02F3  23C3               	fcall	_startPWM
   618                           
   619                           ;main.c: 299: }
   620  02F4  2AE8               	goto	l2781
   621  02F5                     l557:	
   622                           
   623                           ;main.c: 300: else if(ONFlag == 0 && pwmFlag == 1)
   624  02F5  1EF0               	btfss	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   625  02F6  1E70               	btfss	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
   626  02F7  2AE8               	goto	l2781
   627                           
   628                           ;main.c: 301: {
   629                           ;main.c: 302: PWMCON0 = 0;
   630  02F8  0193               	clrf	19	;volatile
   631                           
   632                           ;main.c: 303: pwmFlag = 0;
   633  02F9  1270               	bcf	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
   634  02FA  2AE8               	goto	l2781
   635  02FB                     __end_of_main:	
   636                           
   637                           	psect	text1
   638  03C3                     __ptext1:	
   639 ;; *************** function _startPWM *****************
   640 ;; Defined at:
   641 ;;		line 146 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
   642 ;; Parameters:    Size  Location     Type
   643 ;;		None
   644 ;; Auto vars:     Size  Location     Type
   645 ;;		None
   646 ;; Return value:  Size  Location     Type
   647 ;;                  1    wreg      void 
   648 ;; Registers used:
   649 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   650 ;; Tracked objects:
   651 ;;		On entry : 300/0
   652 ;;		On exit  : 300/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   655 ;;      Params:         0       0       0       0
   656 ;;      Locals:         0       0       0       0
   657 ;;      Temps:          0       0       0       0
   658 ;;      Totals:         0       0       0       0
   659 ;;Total ram usage:        0 bytes
   660 ;; Hardware stack levels used:    1
   661 ;; Hardware stack levels required when called:    3
   662 ;; This function calls:
   663 ;;		_procKey1
   664 ;;		_procKey2
   665 ;; This function is called by:
   666 ;;		_main
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           
   671                           ;psect for function _startPWM
   672  03C3                     _startPWM:	
   673                           
   674                           ;main.c: 148: pwm0Step--;
   675                           
   676                           ;incstack = 0
   677                           ; Regs used in _startPWM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   678  03C3  03D7               	decf	_pwm0Step,f
   679                           
   680                           ;main.c: 149: pwm1Step--;
   681  03C4  03D6               	decf	_pwm1Step,f
   682                           
   683                           ;main.c: 150: procKey1();
   684  03C5  22B2               	fcall	_procKey1
   685                           
   686                           ;main.c: 151: procKey2();
   687  03C6  2A96               	ljmp	l2271
   688  03C7                     __end_of_startPWM:	
   689                           
   690                           	psect	text2
   691  01C0                     __ptext2:	
   692 ;; *************** function _checkIRKey *****************
   693 ;; Defined at:
   694 ;;		line 204 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;		None
   697 ;; Auto vars:     Size  Location     Type
   698 ;;		None
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      void 
   701 ;; Registers used:
   702 ;;		wreg, status,2, status,0
   703 ;; Tracked objects:
   704 ;;		On entry : 300/0
   705 ;;		On exit  : 300/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   708 ;;      Params:         0       0       0       0
   709 ;;      Locals:         0       0       0       0
   710 ;;      Temps:          1       0       0       0
   711 ;;      Totals:         1       0       0       0
   712 ;;Total ram usage:        1 bytes
   713 ;; Hardware stack levels used:    1
   714 ;; Hardware stack levels required when called:    1
   715 ;; This function calls:
   716 ;;		Nothing
   717 ;; This function is called by:
   718 ;;		_main
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           
   723                           ;psect for function _checkIRKey
   724  01C0                     _checkIRKey:	
   725                           
   726                           ;main.c: 206: if(((PORTB) >> (2)&1))
   727                           
   728                           ;incstack = 0
   729                           ; Regs used in _checkIRKey: [wreg+status,2+status,0]
   730  01C0  0806               	movf	6,w	;volatile
   731  01C1  00F4               	movwf	??_checkIRKey
   732  01C2  1003               	clrc
   733  01C3  0CF4               	rrf	??_checkIRKey,f
   734  01C4  1003               	clrc
   735  01C5  0CF4               	rrf	??_checkIRKey,f
   736  01C6  1C74               	btfss	??_checkIRKey,0
   737  01C7  29CB               	goto	l2521
   738  01C8  3002               	movlw	2
   739                           
   740                           ;main.c: 207: {
   741                           ;main.c: 208: revCount++;
   742  01C9  0AC6               	incf	_revCount,f
   743                           
   744                           ;main.c: 209: irStep = 2;
   745  01CA  00C7               	movwf	_irStep	;volatile
   746  01CB                     l2521:	
   747                           
   748                           ;main.c: 210: }
   749                           ;main.c: 212: if(checkCount > 3 && revCount > 2)
   750  01CB  3004               	movlw	4
   751  01CC  0245               	subwf	_checkCount,w
   752  01CD  1C03               	skipc
   753  01CE  29E0               	goto	l532
   754  01CF  3003               	movlw	3
   755  01D0  0246               	subwf	_revCount,w
   756  01D1  1C03               	skipc
   757  01D2  29E0               	goto	l532
   758                           
   759                           ;main.c: 213: {
   760                           ;main.c: 214: sendFlag = 0;
   761  01D3  1078               	bcf	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
   762                           
   763                           ;main.c: 215: if(irStep == 0)
   764  01D4  0847               	movf	_irStep,w	;volatile
   765  01D5  1D03               	btfss	3,2
   766  01D6  29E6               	goto	l2541
   767                           
   768                           ;main.c: 216: {
   769                           ;main.c: 217: if(ONFlag = 1)
   770  01D7  16F0               	bsf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   771  01D8  1EF0               	btfss	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   772  01D9  29DC               	goto	l534
   773                           
   774                           ;main.c: 218: ONFlag = 0;
   775  01DA  12F0               	bcf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   776  01DB  29DD               	goto	l2533
   777  01DC                     l534:	
   778                           
   779                           ;main.c: 219: else
   780                           ;main.c: 220: ONFlag = 1;
   781  01DC  16F0               	bsf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   782  01DD                     l2533:	
   783                           
   784                           ;main.c: 221: irStep = 1;
   785  01DD  3001               	movlw	1
   786  01DE  00C7               	movwf	_irStep	;volatile
   787  01DF  29E6               	goto	l2541
   788  01E0                     l532:	
   789                           
   790                           ;main.c: 224: else
   791                           ;main.c: 225: {
   792                           ;main.c: 226: sendFlag = 1;
   793  01E0  1478               	bsf	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
   794                           
   795                           ;main.c: 227: if(irStep)
   796  01E1  0847               	movf	_irStep,w	;volatile
   797  01E2  1903               	btfsc	3,2
   798  01E3  29E6               	goto	l2541
   799                           
   800                           ;main.c: 228: {
   801                           ;main.c: 229: irStep = 0;
   802  01E4  01C7               	clrf	_irStep	;volatile
   803                           
   804                           ;main.c: 230: ONFlag = 1;
   805  01E5  16F0               	bsf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   806  01E6                     l2541:	
   807                           
   808                           ;main.c: 231: }
   809                           ;main.c: 232: }
   810                           ;main.c: 234: if(++checkCount >= 30)
   811  01E6  301E               	movlw	30
   812  01E7  0AC5               	incf	_checkCount,f
   813  01E8  0245               	subwf	_checkCount,w
   814  01E9  1C03               	skipc
   815  01EA  0008               	return
   816                           
   817                           ;main.c: 235: {
   818                           ;main.c: 236: sendFlag = 1;
   819  01EB  1478               	bsf	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
   820                           
   821                           ;main.c: 237: checkCount = 0;
   822  01EC  01C5               	clrf	_checkCount
   823                           
   824                           ;main.c: 238: revCount = 0;
   825  01ED  01C6               	clrf	_revCount
   826  01EE  0008               	return
   827  01EF                     __end_of_checkIRKey:	
   828                           
   829                           	psect	text3
   830  0324                     __ptext3:	
   831 ;; *************** function _Refurbish_Sfr *****************
   832 ;; Defined at:
   833 ;;		line 47 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;		None
   836 ;; Auto vars:     Size  Location     Type
   837 ;;		None
   838 ;; Return value:  Size  Location     Type
   839 ;;                  1    wreg      void 
   840 ;; Registers used:
   841 ;;		wreg, status,2, status,0
   842 ;; Tracked objects:
   843 ;;		On entry : 300/0
   844 ;;		On exit  : 300/0
   845 ;;		Unchanged: 0/0
   846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   847 ;;      Params:         0       0       0       0
   848 ;;      Locals:         0       0       0       0
   849 ;;      Temps:          0       0       0       0
   850 ;;      Totals:         0       0       0       0
   851 ;;Total ram usage:        0 bytes
   852 ;; Hardware stack levels used:    1
   853 ;; Hardware stack levels required when called:    1
   854 ;; This function calls:
   855 ;;		Nothing
   856 ;; This function is called by:
   857 ;;		_main
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861                           
   862                           ;psect for function _Refurbish_Sfr
   863  0324                     _Refurbish_Sfr:	
   864                           
   865                           ;main.c: 85: OPTION_REG = 0;
   866                           
   867                           ;incstack = 0
   868                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
   869  0324  1683               	bsf	3,5	;RP0=1, select bank1
   870                           
   871                           ;main.c: 89: PIE1 = 2;
   872                           
   873                           ;main.c: 90: PR2 = 250;
   874  0325  2330               	fcall	PL12	;call to abstracted procedure
   875                           
   876                           ;main.c: 91: INTCON = 0XC0;
   877  0326  30C0               	movlw	192
   878  0327  008B               	movwf	11	;volatile
   879                           
   880                           ;main.c: 92: if(4 != T2CON)
   881  0328  3004               	movlw	4
   882  0329  1283               	bcf	3,5	;RP0=0, select bank0
   883  032A  0612               	xorwf	18,w	;volatile
   884  032B  1903               	btfsc	3,2
   885  032C  0008               	return
   886                           
   887                           ;main.c: 93: T2CON = 4;
   888  032D  3004               	movlw	4
   889  032E  0092               	movwf	18	;volatile
   890  032F  0008               	return
   891  0330                     __end_of_Refurbish_Sfr:	
   892  0330                     PL12:	
   893  0330  0181               	clrf	1	;volatile
   894  0331  3002               	movlw	2
   895  0332  1283               	bcf	3,5	;RP0=0, select bank0
   896  0333  008D               	movwf	13	;volatile
   897  0334  30FA               	movlw	250
   898  0335  1683               	bsf	3,5	;RP0=1, select bank1
   899  0336  0091               	movwf	17	;volatile
   900  0337  0008               	return
   901  0338                     __end_ofPL12:	
   902                           
   903                           	psect	text4
   904  0187                     __ptext4:	
   905 ;; *************** function _KeyServer *****************
   906 ;; Defined at:
   907 ;;		line 159 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;		None
   910 ;; Auto vars:     Size  Location     Type
   911 ;;  i               2    2[COMMON] unsigned int 
   912 ;; Return value:  Size  Location     Type
   913 ;;                  1    wreg      void 
   914 ;; Registers used:
   915 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   916 ;; Tracked objects:
   917 ;;		On entry : 300/0
   918 ;;		On exit  : 300/0
   919 ;;		Unchanged: 0/0
   920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   921 ;;      Params:         0       0       0       0
   922 ;;      Locals:         2       0       0       0
   923 ;;      Temps:          0       0       0       0
   924 ;;      Totals:         2       0       0       0
   925 ;;Total ram usage:        2 bytes
   926 ;; Hardware stack levels used:    1
   927 ;; Hardware stack levels required when called:    3
   928 ;; This function calls:
   929 ;;		_procKey1
   930 ;;		_procKey2
   931 ;; This function is called by:
   932 ;;		_main
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           
   937                           ;psect for function _KeyServer
   938  0187                     _KeyServer:	
   939                           
   940                           ;main.c: 161: static unsigned int KeyOldFlag = 0;
   941                           ;main.c: 162: unsigned int i = (unsigned int)((KeyFlag[1]<<8) | KeyFlag[0]);
   942                           
   943                           ;incstack = 0
   944                           ; Regs used in _KeyServer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   945  0187  083F               	movf	_KeyFlag+1,w	;volatile
   946  0188  00F5               	movwf	KeyServer@i+1
   947  0189  083E               	movf	_KeyFlag,w	;volatile
   948  018A  00F4               	movwf	KeyServer@i
   949                           
   950                           ;main.c: 163: if(i)
   951  018B  0475               	iorwf	KeyServer@i+1,w
   952  018C  1903               	btfsc	3,2
   953  018D  29BD               	goto	l2509
   954                           
   955                           ;main.c: 164: {
   956                           ;main.c: 165: if(i != KeyOldFlag)
   957  018E  083B               	movf	KeyServer@KeyOldFlag+1,w
   958  018F  0675               	xorwf	KeyServer@i+1,w
   959  0190  1D03               	skipz
   960  0191  2994               	goto	u1105
   961  0192  083A               	movf	KeyServer@KeyOldFlag,w
   962  0193  0674               	xorwf	KeyServer@i,w
   963  0194                     u1105:	
   964  0194  1903               	skipnz
   965  0195  0008               	return
   966                           
   967                           ;main.c: 166: {
   968                           ;main.c: 167: KeyOldFlag = i;
   969  0196  0875               	movf	KeyServer@i+1,w
   970  0197  00BB               	movwf	KeyServer@KeyOldFlag+1
   971  0198  0874               	movf	KeyServer@i,w
   972  0199  00BA               	movwf	KeyServer@KeyOldFlag
   973                           
   974                           ;main.c: 168: switch(i)
   975  019A  29A7               	goto	l2507
   976  019B                     l2493:	
   977                           
   978                           ;main.c: 171: procKey1();
   979  019B  2AB2               	ljmp	l2253
   980  019C                     l2495:	
   981                           ;main.c: 172: break;
   982                           
   983                           
   984                           ;main.c: 174: procKey2();
   985  019C  2A96               	ljmp	l2271
   986  019D                     l520:	
   987                           ;main.c: 176: case 3:
   988                           
   989                           ;main.c: 175: break;
   990                           
   991                           
   992                           ;main.c: 177: doublePressFlag = 1;
   993  019D  1770               	bsf	_doublePressFlag/(0+8),_doublePressFlag& (0+7)	;volatile
   994                           
   995                           ;main.c: 178: break;
   996  019E  0008               	return
   997  019F                     l523:	
   998                           ;main.c: 185: default:
   999                           
  1000                           
  1001                           ;main.c: 186: if(doublePressFlag)
  1002  019F  1F70               	btfss	_doublePressFlag/(0+8),_doublePressFlag& (0+7)	;volatile
  1003  01A0  0008               	return
  1004                           
  1005                           ;main.c: 187: {
  1006                           ;main.c: 189: if(ONFlag)
  1007  01A1  1EF0               	btfss	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
  1008  01A2  29A5               	goto	l525
  1009                           
  1010                           ;main.c: 190: ONFlag = 0;
  1011  01A3  12F0               	bcf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
  1012  01A4  0008               	return
  1013  01A5                     l525:	
  1014                           
  1015                           ;main.c: 191: else
  1016                           ;main.c: 192: ONFlag = 1;
  1017  01A5  16F0               	bsf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
  1018  01A6  0008               	return
  1019  01A7                     l2507:	
  1020                           
  1021                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1022                           ; Switch size 1, requested type "space"
  1023                           ; Number of cases is 1, Range of values is 0 to 0
  1024                           ; switch strategies available:
  1025                           ; Name         Instructions Cycles
  1026                           ; simple_byte            4     3 (average)
  1027                           ; direct_byte            7     6 (fixed)
  1028                           ; jumptable            260     6 (fixed)
  1029                           ;	Chosen strategy is simple_byte
  1030  01A7  0875               	movf	KeyServer@i+1,w
  1031  01A8  3A00               	xorlw	0	; case 0
  1032  01A9  1903               	skipnz
  1033  01AA  29AC               	goto	l2845
  1034  01AB  299F               	goto	l523
  1035  01AC                     l2845:	
  1036                           
  1037                           ; Switch size 1, requested type "space"
  1038                           ; Number of cases is 5, Range of values is 1 to 8
  1039                           ; switch strategies available:
  1040                           ; Name         Instructions Cycles
  1041                           ; simple_byte           16     9 (average)
  1042                           ; direct_byte           17     9 (fixed)
  1043                           ; jumptable            263     9 (fixed)
  1044                           ;	Chosen strategy is simple_byte
  1045  01AC  0874               	movf	KeyServer@i,w
  1046  01AD  3A01               	xorlw	1	; case 1
  1047  01AE  1903               	skipnz
  1048  01AF  299B               	goto	l2493
  1049  01B0  3A03               	xorlw	3	; case 2
  1050  01B1  1903               	skipnz
  1051  01B2  299C               	goto	l2495
  1052  01B3  3A01               	xorlw	1	; case 3
  1053  01B4  1903               	skipnz
  1054  01B5  299D               	goto	l520
  1055  01B6  3A07               	xorlw	7	; case 4
  1056  01B7  1903               	skipnz
  1057  01B8  299B               	goto	l2493
  1058  01B9  3A0C               	xorlw	12	; case 8
  1059  01BA  1903               	skipnz
  1060  01BB  299C               	goto	l2495
  1061  01BC  299F               	goto	l523
  1062  01BD                     l2509:	
  1063                           
  1064                           ;main.c: 198: else
  1065                           ;main.c: 199: {
  1066                           ;main.c: 200: KeyOldFlag = 0;
  1067  01BD  01BA               	clrf	KeyServer@KeyOldFlag
  1068  01BE  01BB               	clrf	KeyServer@KeyOldFlag+1
  1069  01BF  0008               	return
  1070  01C0                     __end_of_KeyServer:	
  1071                           
  1072                           	psect	text5
  1073  0296                     __ptext5:	
  1074 ;; *************** function _procKey2 *****************
  1075 ;; Defined at:
  1076 ;;		line 120 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
  1077 ;; Parameters:    Size  Location     Type
  1078 ;;		None
  1079 ;; Auto vars:     Size  Location     Type
  1080 ;;		None
  1081 ;; Return value:  Size  Location     Type
  1082 ;;                  1    wreg      void 
  1083 ;; Registers used:
  1084 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1085 ;; Tracked objects:
  1086 ;;		On entry : 300/0
  1087 ;;		On exit  : 300/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1090 ;;      Params:         0       0       0       0
  1091 ;;      Locals:         0       0       0       0
  1092 ;;      Temps:          0       0       0       0
  1093 ;;      Totals:         0       0       0       0
  1094 ;;Total ram usage:        0 bytes
  1095 ;; Hardware stack levels used:    1
  1096 ;; Hardware stack levels required when called:    2
  1097 ;; This function calls:
  1098 ;;		_mode1_a
  1099 ;;		_mode1_b
  1100 ;;		_mode1_c
  1101 ;;		_mode1_d
  1102 ;;		_mode1_e
  1103 ;; This function is called by:
  1104 ;;		_startPWM
  1105 ;;		_KeyServer
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109                           
  1110                           ;psect for function _procKey2
  1111  0296                     _procKey2:	
  1112  0296                     l2271:	
  1113                           ;incstack = 0
  1114                           ; Regs used in _procKey2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1115                           
  1116                           
  1117                           ;main.c: 122: pwmFlag = 1;
  1118  0296  1670               	bsf	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
  1119                           
  1120                           ;main.c: 123: if(++pwm1Step > 5)
  1121  0297  3006               	movlw	6
  1122  0298  0AD6               	incf	_pwm1Step,f
  1123  0299  0256               	subwf	_pwm1Step,w
  1124  029A  1C03               	skipc
  1125  029B  2A9E               	goto	l2289
  1126                           
  1127                           ;main.c: 124: pwm1Step = 1;
  1128  029C  01D6               	clrf	_pwm1Step
  1129  029D  0AD6               	incf	_pwm1Step,f
  1130  029E                     l2289:	
  1131                           ;main.c: 141: break;
  1132                           
  1133  029E  0857               	movf	_pwm0Step,w
  1134                           
  1135                           ; Switch size 1, requested type "space"
  1136                           ; Number of cases is 5, Range of values is 1 to 5
  1137                           ; switch strategies available:
  1138                           ; Name         Instructions Cycles
  1139                           ; direct_byte           14     9 (fixed)
  1140                           ; simple_byte           16     9 (average)
  1141                           ; jumptable            263     9 (fixed)
  1142                           ;	Chosen strategy is direct_byte
  1143  029F  3EFF               	addlw	-1
  1144  02A0  1C03               	skipc
  1145  02A1  0008               	return
  1146  02A2  0084               	movwf	4
  1147  02A3  3005               	movlw	5
  1148  02A4  0204               	subwf	4,w
  1149  02A5  1803               	skipnc
  1150  02A6  0008               	return
  1151  02A7  3003               	movlw	high S2847
  1152  02A8  008A               	movwf	10
  1153  02A9  30BE               	movlw	low S2847
  1154  02AA  0704               	addwf	4,w
  1155  02AB  0082               	movwf	2
  1156  02AC  0008               	return
  1157  02AD                     l2277:	
  1158                           
  1159                           ;main.c: 128: mode1_a();
  1160  02AD  2BCF               	ljmp	l2179
  1161  02AE                     l2279:	
  1162                           ;main.c: 129: break;
  1163                           
  1164                           
  1165                           ;main.c: 131: mode1_b();
  1166  02AE  2BB7               	ljmp	l2189
  1167  02AF                     l2281:	
  1168                           ;main.c: 132: break;
  1169                           
  1170                           
  1171                           ;main.c: 134: mode1_c();
  1172  02AF  2BCB               	ljmp	l2199
  1173  02B0                     l2283:	
  1174                           ;main.c: 135: break;
  1175                           
  1176                           
  1177                           ;main.c: 137: mode1_d();
  1178  02B0  2B96               	ljmp	l2205
  1179  02B1                     l2285:	
  1180                           ;main.c: 138: break;
  1181                           
  1182                           
  1183                           ;main.c: 140: mode1_e();
  1184  02B1  2BC7               	ljmp	l2211
  1185  02B2                     __end_of_procKey2:	
  1186                           
  1187                           	psect	swtext1
  1188  03BE                     __pswtext1:	
  1189  03BE                     S2847:	
  1190  03BE  2AAD               	ljmp	l2277
  1191  03BF  2AAE               	ljmp	l2279
  1192  03C0  2AAF               	ljmp	l2281
  1193  03C1  2AB0               	ljmp	l2283
  1194  03C2  2AB1               	ljmp	l2285
  1195                           
  1196                           	psect	text6
  1197  03C7                     __ptext6:	
  1198 ;; *************** function _mode1_e *****************
  1199 ;; Defined at:
  1200 ;;		line 54 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;		None
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;		None
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      void 
  1207 ;; Registers used:
  1208 ;;		wreg, status,2, status,0
  1209 ;; Tracked objects:
  1210 ;;		On entry : 300/0
  1211 ;;		On exit  : 300/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1214 ;;      Params:         0       0       0       0
  1215 ;;      Locals:         0       0       0       0
  1216 ;;      Temps:          0       0       0       0
  1217 ;;      Totals:         0       0       0       0
  1218 ;;Total ram usage:        0 bytes
  1219 ;; Hardware stack levels used:    1
  1220 ;; Hardware stack levels required when called:    1
  1221 ;; This function calls:
  1222 ;;		Nothing
  1223 ;; This function is called by:
  1224 ;;		_procKey2
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           
  1229                           ;psect for function _mode1_e
  1230  03C7                     _mode1_e:	
  1231  03C7                     l2211:	
  1232                           ;incstack = 0
  1233                           ; Regs used in _mode1_e: [wreg+status,2+status,0]
  1234                           
  1235                           
  1236                           ;pwm.c: 56: PWMD0L = 1;
  1237  03C7  3001               	movlw	1
  1238  03C8  0097               	movwf	23	;volatile
  1239                           
  1240                           ;pwm.c: 57: PWMD1L = 95;
  1241  03C9  305F               	movlw	95
  1242                           
  1243                           ;pwm.c: 58: PWMTH = 0;
  1244                           
  1245                           ;pwm.c: 59: PWMCON0 |= 0x03;
  1246  03CA  2B9A               	ljmp	PL18	;call to abstracted procedure
  1247  03CB                     __end_of_mode1_e:	
  1248                           
  1249                           	psect	text7
  1250  0396                     __ptext7:	
  1251 ;; *************** function _mode1_d *****************
  1252 ;; Defined at:
  1253 ;;		line 45 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;		None
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;		None
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  1    wreg      void 
  1260 ;; Registers used:
  1261 ;;		wreg, status,2, status,0
  1262 ;; Tracked objects:
  1263 ;;		On entry : 300/0
  1264 ;;		On exit  : 300/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1267 ;;      Params:         0       0       0       0
  1268 ;;      Locals:         0       0       0       0
  1269 ;;      Temps:          0       0       0       0
  1270 ;;      Totals:         0       0       0       0
  1271 ;;Total ram usage:        0 bytes
  1272 ;; Hardware stack levels used:    1
  1273 ;; Hardware stack levels required when called:    1
  1274 ;; This function calls:
  1275 ;;		Nothing
  1276 ;; This function is called by:
  1277 ;;		_procKey2
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281                           
  1282                           ;psect for function _mode1_d
  1283  0396                     _mode1_d:	
  1284  0396                     l2205:	
  1285                           ;incstack = 0
  1286                           ; Regs used in _mode1_d: [wreg+status,2+status,0]
  1287                           
  1288                           
  1289                           ;pwm.c: 47: PWMD0L = 1;
  1290  0396  3001               	movlw	1
  1291  0397  0097               	movwf	23	;volatile
  1292                           
  1293                           ;pwm.c: 48: PWMD1L = 63;
  1294  0398  303F               	movlw	63
  1295                           
  1296                           ;pwm.c: 49: PWMTH = 0;
  1297                           
  1298                           ;pwm.c: 50: PWMCON0 |= 0x03;
  1299  0399  2B9A               	ljmp	PL18	;call to abstracted procedure
  1300  039A                     __end_of_mode1_d:	
  1301  039A                     PL18:	
  1302  039A  0098               	movwf	24	;volatile
  1303  039B  0196               	clrf	22	;volatile
  1304  039C  3003               	movlw	3
  1305  039D  0493               	iorwf	19,f	;volatile
  1306  039E  0008               	return
  1307  039F                     __end_ofPL18:	
  1308                           
  1309                           	psect	text8
  1310  03CB                     __ptext8:	
  1311 ;; *************** function _mode1_c *****************
  1312 ;; Defined at:
  1313 ;;		line 36 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;		None
  1316 ;; Auto vars:     Size  Location     Type
  1317 ;;		None
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  1    wreg      void 
  1320 ;; Registers used:
  1321 ;;		wreg, status,2, status,0
  1322 ;; Tracked objects:
  1323 ;;		On entry : 300/0
  1324 ;;		On exit  : 300/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1327 ;;      Params:         0       0       0       0
  1328 ;;      Locals:         0       0       0       0
  1329 ;;      Temps:          0       0       0       0
  1330 ;;      Totals:         0       0       0       0
  1331 ;;Total ram usage:        0 bytes
  1332 ;; Hardware stack levels used:    1
  1333 ;; Hardware stack levels required when called:    1
  1334 ;; This function calls:
  1335 ;;		Nothing
  1336 ;; This function is called by:
  1337 ;;		_procKey2
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341                           
  1342                           ;psect for function _mode1_c
  1343  03CB                     _mode1_c:	
  1344  03CB                     l2199:	
  1345                           ;incstack = 0
  1346                           ; Regs used in _mode1_c: [wreg+status,2+status,0]
  1347                           
  1348                           
  1349                           ;pwm.c: 38: PWMD0L = 1;
  1350  03CB  3001               	movlw	1
  1351  03CC  0097               	movwf	23	;volatile
  1352                           
  1353                           ;pwm.c: 39: PWMD1L = 32;
  1354  03CD  3020               	movlw	32
  1355                           
  1356                           ;pwm.c: 40: PWMTH = 0;
  1357                           
  1358                           ;pwm.c: 41: PWMCON0 |= 0x03;
  1359  03CE  2B9A               	ljmp	PL18	;call to abstracted procedure
  1360  03CF                     __end_of_mode1_c:	
  1361                           
  1362                           	psect	text9
  1363  03B7                     __ptext9:	
  1364 ;; *************** function _mode1_b *****************
  1365 ;; Defined at:
  1366 ;;		line 26 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;		None
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;		None
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  1    wreg      void 
  1373 ;; Registers used:
  1374 ;;		wreg, status,2
  1375 ;; Tracked objects:
  1376 ;;		On entry : 300/0
  1377 ;;		On exit  : 300/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1380 ;;      Params:         0       0       0       0
  1381 ;;      Locals:         0       0       0       0
  1382 ;;      Temps:          0       0       0       0
  1383 ;;      Totals:         0       0       0       0
  1384 ;;Total ram usage:        0 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; Hardware stack levels required when called:    1
  1387 ;; This function calls:
  1388 ;;		Nothing
  1389 ;; This function is called by:
  1390 ;;		_procKey2
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           
  1395                           ;psect for function _mode1_b
  1396  03B7                     _mode1_b:	
  1397  03B7                     l2189:	
  1398                           ;incstack = 0
  1399                           ; Regs used in _mode1_b: [wreg+status,2]
  1400                           
  1401                           
  1402                           ;pwm.c: 28: PWMD0L = 1;
  1403  03B7  3001               	movlw	1
  1404  03B8  0097               	movwf	23	;volatile
  1405                           
  1406                           ;pwm.c: 29: PWMD1L = 0;
  1407  03B9  0198               	clrf	24	;volatile
  1408                           
  1409                           ;pwm.c: 30: PWMTH = 0;
  1410  03BA  0196               	clrf	22	;volatile
  1411                           
  1412                           ;pwm.c: 31: PWMCON0 |= 0x01;
  1413  03BB  1413               	bsf	19,0	;volatile
  1414                           
  1415                           ;pwm.c: 32: PORTB&=~(1<<7);
  1416  03BC  1386               	bcf	6,7	;volatile
  1417  03BD  0008               	return
  1418  03BE                     __end_of_mode1_b:	
  1419                           
  1420                           	psect	text10
  1421  03CF                     __ptext10:	
  1422 ;; *************** function _mode1_a *****************
  1423 ;; Defined at:
  1424 ;;		line 16 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;		None
  1427 ;; Auto vars:     Size  Location     Type
  1428 ;;		None
  1429 ;; Return value:  Size  Location     Type
  1430 ;;                  1    wreg      void 
  1431 ;; Registers used:
  1432 ;;		wreg, status,2
  1433 ;; Tracked objects:
  1434 ;;		On entry : 300/0
  1435 ;;		On exit  : 300/0
  1436 ;;		Unchanged: 0/0
  1437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1438 ;;      Params:         0       0       0       0
  1439 ;;      Locals:         0       0       0       0
  1440 ;;      Temps:          0       0       0       0
  1441 ;;      Totals:         0       0       0       0
  1442 ;;Total ram usage:        0 bytes
  1443 ;; Hardware stack levels used:    1
  1444 ;; Hardware stack levels required when called:    1
  1445 ;; This function calls:
  1446 ;;		Nothing
  1447 ;; This function is called by:
  1448 ;;		_procKey2
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           
  1453                           ;psect for function _mode1_a
  1454  03CF                     _mode1_a:	
  1455  03CF                     l2179:	
  1456                           ;incstack = 0
  1457                           ; Regs used in _mode1_a: [wreg+status,2]
  1458                           
  1459                           
  1460                           ;pwm.c: 18: PWMD0L = 1;
  1461  03CF  3001               	movlw	1
  1462                           
  1463                           ;pwm.c: 19: PWMD1L = 0;
  1464                           
  1465                           ;pwm.c: 20: PWMTH = 0;
  1466                           
  1467                           ;pwm.c: 21: PWMCON0 |= 0x01;
  1468                           
  1469                           ;pwm.c: 22: PORTB|=(1<<7);
  1470  03D0  2BB1               	ljmp	PL8	;call to abstracted procedure
  1471  03D1                     __end_of_mode1_a:	
  1472                           
  1473                           	psect	text11
  1474  02B2                     __ptext11:	
  1475 ;; *************** function _procKey1 *****************
  1476 ;; Defined at:
  1477 ;;		line 96 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;		None
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;		None
  1482 ;; Return value:  Size  Location     Type
  1483 ;;                  1    wreg      void 
  1484 ;; Registers used:
  1485 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1486 ;; Tracked objects:
  1487 ;;		On entry : 300/0
  1488 ;;		On exit  : 300/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1491 ;;      Params:         0       0       0       0
  1492 ;;      Locals:         0       0       0       0
  1493 ;;      Temps:          0       0       0       0
  1494 ;;      Totals:         0       0       0       0
  1495 ;;Total ram usage:        0 bytes
  1496 ;; Hardware stack levels used:    1
  1497 ;; Hardware stack levels required when called:    2
  1498 ;; This function calls:
  1499 ;;		_mode2_a
  1500 ;;		_mode3_a
  1501 ;;		_mode4_a
  1502 ;;		_mode5_a
  1503 ;; This function is called by:
  1504 ;;		_startPWM
  1505 ;;		_KeyServer
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           
  1510                           ;psect for function _procKey1
  1511  02B2                     _procKey1:	
  1512  02B2                     l2253:	
  1513                           ;incstack = 0
  1514                           ; Regs used in _procKey1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1515                           
  1516                           
  1517                           ;main.c: 98: pwmFlag = 1;
  1518  02B2  1670               	bsf	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
  1519                           
  1520                           ;main.c: 99: if(++pwm0Step > 4)
  1521  02B3  3005               	movlw	5
  1522  02B4  0AD7               	incf	_pwm0Step,f
  1523  02B5  0257               	subwf	_pwm0Step,w
  1524  02B6  1C03               	skipc
  1525  02B7  2ABA               	goto	l2269
  1526                           
  1527                           ;main.c: 100: pwm0Step = 1;
  1528  02B8  01D7               	clrf	_pwm0Step
  1529  02B9  0AD7               	incf	_pwm0Step,f
  1530  02BA                     l2269:	
  1531                           ;main.c: 114: break;
  1532                           
  1533  02BA  0857               	movf	_pwm0Step,w
  1534                           
  1535                           ; Switch size 1, requested type "space"
  1536                           ; Number of cases is 4, Range of values is 1 to 4
  1537                           ; switch strategies available:
  1538                           ; Name         Instructions Cycles
  1539                           ; simple_byte           13     7 (average)
  1540                           ; direct_byte           13     9 (fixed)
  1541                           ; jumptable            263     9 (fixed)
  1542                           ;	Chosen strategy is simple_byte
  1543  02BB  3A01               	xorlw	1	; case 1
  1544  02BC  1903               	skipnz
  1545  02BD  2AC8               	goto	l2259
  1546  02BE  3A03               	xorlw	3	; case 2
  1547  02BF  1903               	skipnz
  1548  02C0  2AC9               	goto	l2261
  1549  02C1  3A01               	xorlw	1	; case 3
  1550  02C2  1903               	skipnz
  1551  02C3  2ACA               	goto	l2263
  1552  02C4  3A07               	xorlw	7	; case 4
  1553  02C5  1903               	skipnz
  1554  02C6  2ACB               	goto	l2265
  1555  02C7  2ACC               	goto	l495
  1556  02C8                     l2259:	
  1557                           
  1558                           ;main.c: 104: mode2_a();
  1559  02C8  2BD3               	ljmp	l2141
  1560  02C9                     l2261:	
  1561                           ;main.c: 105: break;
  1562                           
  1563                           
  1564                           ;main.c: 107: mode3_a();
  1565  02C9  2BD1               	ljmp	l2151
  1566  02CA                     l2263:	
  1567                           ;main.c: 108: break;
  1568                           
  1569                           
  1570                           ;main.c: 110: mode4_a();
  1571  02CA  2BAF               	ljmp	l2161
  1572  02CB                     l2265:	
  1573                           ;main.c: 111: break;
  1574                           
  1575                           
  1576                           ;main.c: 113: mode5_a();
  1577  02CB  2BA7               	ljmp	l2171
  1578  02CC                     l495:	
  1579  02CC  0008               	return
  1580  02CD                     __end_of_procKey1:	
  1581                           
  1582                           	psect	text12
  1583  03A7                     __ptext12:	
  1584 ;; *************** function _mode5_a *****************
  1585 ;; Defined at:
  1586 ;;		line 93 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;		None
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;		None
  1591 ;; Return value:  Size  Location     Type
  1592 ;;                  1    wreg      void 
  1593 ;; Registers used:
  1594 ;;		wreg, status,2
  1595 ;; Tracked objects:
  1596 ;;		On entry : 300/0
  1597 ;;		On exit  : 300/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1600 ;;      Params:         0       0       0       0
  1601 ;;      Locals:         0       0       0       0
  1602 ;;      Temps:          0       0       0       0
  1603 ;;      Totals:         0       0       0       0
  1604 ;;Total ram usage:        0 bytes
  1605 ;; Hardware stack levels used:    1
  1606 ;; Hardware stack levels required when called:    1
  1607 ;; This function calls:
  1608 ;;		Nothing
  1609 ;; This function is called by:
  1610 ;;		_procKey1
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           
  1615                           ;psect for function _mode5_a
  1616  03A7                     _mode5_a:	
  1617  03A7                     l2171:	
  1618                           ;incstack = 0
  1619                           ; Regs used in _mode5_a: [wreg+status,2]
  1620                           
  1621                           
  1622                           ;pwm.c: 95: PWMD0L = 0;
  1623  03A7  0197               	clrf	23	;volatile
  1624                           
  1625                           ;pwm.c: 96: PWMD1L = 0;
  1626  03A8  0198               	clrf	24	;volatile
  1627                           
  1628                           ;pwm.c: 97: PWMTH = 0;
  1629  03A9  0196               	clrf	22	;volatile
  1630                           
  1631                           ;pwm.c: 98: PWMCON0 = 0x60;
  1632  03AA  3060               	movlw	96
  1633  03AB  0093               	movwf	19	;volatile
  1634                           
  1635                           ;pwm.c: 99: PORTB|=(1<<7);
  1636  03AC  1786               	bsf	6,7	;volatile
  1637                           
  1638                           ;pwm.c: 100: PORTA|=(1<<5);
  1639  03AD  1685               	bsf	5,5	;volatile
  1640  03AE  0008               	return
  1641  03AF                     __end_of_mode5_a:	
  1642                           
  1643                           	psect	text13
  1644  03AF                     __ptext13:	
  1645 ;; *************** function _mode4_a *****************
  1646 ;; Defined at:
  1647 ;;		line 83 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;		None
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;		None
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  1    wreg      void 
  1654 ;; Registers used:
  1655 ;;		wreg, status,2
  1656 ;; Tracked objects:
  1657 ;;		On entry : 300/0
  1658 ;;		On exit  : 300/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1661 ;;      Params:         0       0       0       0
  1662 ;;      Locals:         0       0       0       0
  1663 ;;      Temps:          0       0       0       0
  1664 ;;      Totals:         0       0       0       0
  1665 ;;Total ram usage:        0 bytes
  1666 ;; Hardware stack levels used:    1
  1667 ;; Hardware stack levels required when called:    1
  1668 ;; This function calls:
  1669 ;;		Nothing
  1670 ;; This function is called by:
  1671 ;;		_procKey1
  1672 ;; This function uses a non-reentrant model
  1673 ;;
  1674                           
  1675                           
  1676                           ;psect for function _mode4_a
  1677  03AF                     _mode4_a:	
  1678  03AF                     l2161:	
  1679                           ;incstack = 0
  1680                           ; Regs used in _mode4_a: [wreg+status,2]
  1681                           
  1682                           
  1683                           ;pwm.c: 85: PWMD0L = 72;
  1684  03AF  3048               	movlw	72
  1685                           
  1686                           ;pwm.c: 86: PWMD1L = 0;
  1687                           
  1688                           ;pwm.c: 87: PWMTH = 0;
  1689                           
  1690                           ;pwm.c: 88: PWMCON0 |= 0x01;
  1691                           
  1692                           ;pwm.c: 89: PORTB|=(1<<7);
  1693  03B0  2BB1               	ljmp	PL8	;call to abstracted procedure
  1694  03B1                     __end_of_mode4_a:	
  1695  03B1                     PL8:	
  1696  03B1  0097               	movwf	23	;volatile
  1697  03B2  0198               	clrf	24	;volatile
  1698  03B3  0196               	clrf	22	;volatile
  1699  03B4  1413               	bsf	19,0	;volatile
  1700  03B5  1786               	bsf	6,7	;volatile
  1701  03B6  0008               	return
  1702  03B7                     __end_ofPL8:	
  1703                           
  1704                           	psect	text14
  1705  03D1                     __ptext14:	
  1706 ;; *************** function _mode3_a *****************
  1707 ;; Defined at:
  1708 ;;		line 73 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;		None
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;		None
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      void 
  1715 ;; Registers used:
  1716 ;;		wreg, status,2
  1717 ;; Tracked objects:
  1718 ;;		On entry : 300/0
  1719 ;;		On exit  : 300/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1722 ;;      Params:         0       0       0       0
  1723 ;;      Locals:         0       0       0       0
  1724 ;;      Temps:          0       0       0       0
  1725 ;;      Totals:         0       0       0       0
  1726 ;;Total ram usage:        0 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    1
  1729 ;; This function calls:
  1730 ;;		Nothing
  1731 ;; This function is called by:
  1732 ;;		_procKey1
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           
  1737                           ;psect for function _mode3_a
  1738  03D1                     _mode3_a:	
  1739  03D1                     l2151:	
  1740                           ;incstack = 0
  1741                           ; Regs used in _mode3_a: [wreg+status,2]
  1742                           
  1743                           
  1744                           ;pwm.c: 75: PWMD0L = 20;
  1745  03D1  3014               	movlw	20
  1746                           
  1747                           ;pwm.c: 76: PWMD1L = 0;
  1748                           
  1749                           ;pwm.c: 77: PWMTH = 0;
  1750                           
  1751                           ;pwm.c: 78: PWMCON0 |= 0x01;
  1752                           
  1753                           ;pwm.c: 79: PORTB|=(1<<7);
  1754  03D2  2BB1               	ljmp	PL8	;call to abstracted procedure
  1755  03D3                     __end_of_mode3_a:	
  1756                           
  1757                           	psect	text15
  1758  03D3                     __ptext15:	
  1759 ;; *************** function _mode2_a *****************
  1760 ;; Defined at:
  1761 ;;		line 63 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;		None
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;		None
  1766 ;; Return value:  Size  Location     Type
  1767 ;;                  1    wreg      void 
  1768 ;; Registers used:
  1769 ;;		wreg, status,2
  1770 ;; Tracked objects:
  1771 ;;		On entry : 300/0
  1772 ;;		On exit  : 300/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1775 ;;      Params:         0       0       0       0
  1776 ;;      Locals:         0       0       0       0
  1777 ;;      Temps:          0       0       0       0
  1778 ;;      Totals:         0       0       0       0
  1779 ;;Total ram usage:        0 bytes
  1780 ;; Hardware stack levels used:    1
  1781 ;; Hardware stack levels required when called:    1
  1782 ;; This function calls:
  1783 ;;		Nothing
  1784 ;; This function is called by:
  1785 ;;		_procKey1
  1786 ;; This function uses a non-reentrant model
  1787 ;;
  1788                           
  1789                           
  1790                           ;psect for function _mode2_a
  1791  03D3                     _mode2_a:	
  1792  03D3                     l2141:	
  1793                           ;incstack = 0
  1794                           ; Regs used in _mode2_a: [wreg+status,2]
  1795                           
  1796                           
  1797                           ;pwm.c: 65: PWMD0L = 12;
  1798  03D3  300C               	movlw	12
  1799                           
  1800                           ;pwm.c: 66: PWMD1L = 0;
  1801                           
  1802                           ;pwm.c: 67: PWMTH = 0;
  1803                           
  1804                           ;pwm.c: 68: PWMCON0 |= 0x01;
  1805                           
  1806                           ;pwm.c: 69: PORTB|=(1<<7);
  1807  03D4  2BB1               	ljmp	PL8	;call to abstracted procedure
  1808  03D5                     __end_of_mode2_a:	
  1809                           
  1810                           	psect	text16
  1811  035C                     __ptext16:	
  1812 ;; *************** function _Init_System *****************
  1813 ;; Defined at:
  1814 ;;		line 21 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;		None
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;		None
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  1    wreg      void 
  1821 ;; Registers used:
  1822 ;;		wreg, status,2
  1823 ;; Tracked objects:
  1824 ;;		On entry : B00/0
  1825 ;;		On exit  : 300/100
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1828 ;;      Params:         0       0       0       0
  1829 ;;      Locals:         0       0       0       0
  1830 ;;      Temps:          0       0       0       0
  1831 ;;      Totals:         0       0       0       0
  1832 ;;Total ram usage:        0 bytes
  1833 ;; Hardware stack levels used:    1
  1834 ;; Hardware stack levels required when called:    1
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_main
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842                           
  1843                           ;psect for function _Init_System
  1844  035C                     _Init_System:	
  1845                           
  1846                           ;incstack = 0
  1847                           ; Regs used in _Init_System: [wreg+status,2]
  1848  035C  0000               	nop	;# 
  1849  035D  0064               	clrwdt	;# 
  1850                           
  1851                           ;main.c: 25: INTCON = 0;
  1852  035E  018B               	clrf	11	;volatile
  1853                           
  1854                           ;main.c: 26: OSCCON = 0X71;
  1855  035F  3071               	movlw	113
  1856  0360  1683               	bsf	3,5	;RP0=1, select bank1
  1857  0361  1303               	bcf	3,6	;RP1=0, select bank1
  1858  0362  0088               	movwf	8	;volatile
  1859                           
  1860                           ;main.c: 27: OPTION_REG = 0;
  1861                           
  1862                           ;main.c: 34: PIE1 = 2;
  1863                           
  1864                           ;main.c: 35: PR2 = 250;
  1865  0363  2330               	fcall	PL12	;call to abstracted procedure
  1866                           
  1867                           ;main.c: 36: T2CON = 4;
  1868  0364  3004               	movlw	4
  1869  0365  1283               	bcf	3,5	;RP0=0, select bank0
  1870  0366  0092               	movwf	18	;volatile
  1871                           
  1872                           ;main.c: 37: TRISA = 0x00;
  1873  0367  1683               	bsf	3,5	;RP0=1, select bank1
  1874  0368  0185               	clrf	5	;volatile
  1875                           
  1876                           ;main.c: 38: TRISB = 0x04;
  1877  0369  0086               	movwf	6	;volatile
  1878                           
  1879                           ;main.c: 40: INTCON = 0XC0;
  1880  036A  30C0               	movlw	192
  1881  036B  008B               	movwf	11	;volatile
  1882  036C  0008               	return
  1883  036D                     __end_of_Init_System:	
  1884                           
  1885                           	psect	text17
  1886  024D                     __ptext17:	
  1887 ;; *************** function _CheckTouchKey *****************
  1888 ;; Defined at:
  1889 ;;		line 495 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  1890 ;; Parameters:    Size  Location     Type
  1891 ;;		None
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;		None
  1894 ;; Return value:  Size  Location     Type
  1895 ;;                  1    wreg      void 
  1896 ;; Registers used:
  1897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1898 ;; Tracked objects:
  1899 ;;		On entry : 0/100
  1900 ;;		On exit  : 300/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1903 ;;      Params:         0       0       0       0
  1904 ;;      Locals:         0       0       0       0
  1905 ;;      Temps:          0       0       0       0
  1906 ;;      Totals:         0       0       0       0
  1907 ;;Total ram usage:        0 bytes
  1908 ;; Hardware stack levels used:    1
  1909 ;; Hardware stack levels required when called:    5
  1910 ;; This function calls:
  1911 ;;		_CheckKeyOldValue
  1912 ;;		_CheckOnceResult
  1913 ;;		_CheckValidTime
  1914 ;;		_ClearResSum
  1915 ;;		_GetTouchKeyValue
  1916 ;;		_KeyStopClear
  1917 ;;		_TurnKeyFlags
  1918 ;; This function is called by:
  1919 ;;		_main
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           
  1924                           ;psect for function _CheckTouchKey
  1925  024D                     _CheckTouchKey:	
  1926                           
  1927                           ;CheckTouchKey.c: 497: if(!b_kover)
  1928                           
  1929                           ;incstack = 0
  1930                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1931  024D  19F0               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1932  024E  2A59               	goto	l1165
  1933                           
  1934                           ;CheckTouchKey.c: 498: {
  1935                           ;CheckTouchKey.c: 500: GetTouchKeyValue();
  1936  024F  221E               	fcall	_GetTouchKeyValue
  1937                           
  1938                           ;CheckTouchKey.c: 501: if(++KeyCounter >= 8)
  1939  0250  3008               	movlw	8
  1940  0251  1283               	bcf	3,5	;RP0=0, select bank0
  1941  0252  0AC4               	incf	_KeyCounter,f
  1942  0253  0244               	subwf	_KeyCounter,w
  1943  0254  1C03               	skipc
  1944  0255  2A72               	goto	l2775
  1945                           
  1946                           ;CheckTouchKey.c: 502: {
  1947                           ;CheckTouchKey.c: 503: KeyCounter = 0;
  1948  0256  01C4               	clrf	_KeyCounter
  1949                           
  1950                           ;CheckTouchKey.c: 504: b_kover = 1;
  1951  0257  15F0               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1952  0258  2A72               	goto	l2775
  1953  0259                     l1165:	
  1954                           
  1955                           ;CheckTouchKey.c: 507: else if(!b_kover1)
  1956  0259  1970               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1957  025A  2A6E               	goto	l2769
  1958                           
  1959                           ;CheckTouchKey.c: 508: {
  1960                           ;CheckTouchKey.c: 510: CheckOnceResult();
  1961  025B  2018               	fcall	_CheckOnceResult
  1962                           
  1963                           ;CheckTouchKey.c: 513: TurnKeyFlags();
  1964  025C  21EF               	fcall	_TurnKeyFlags
  1965                           
  1966                           ;CheckTouchKey.c: 514: b_kover1 = 1;
  1967  025D  1570               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1968                           
  1969                           ;CheckTouchKey.c: 520: if(b_kerr || KeyCounter > KeyValidNumber)
  1970  025E  1870               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1971  025F  2A66               	goto	l2759
  1972  0260  3002               	movlw	2
  1973  0261  1283               	bcf	3,5	;RP0=0, select bank0
  1974  0262  1303               	bcf	3,6	;RP1=0, select bank0
  1975  0263  0244               	subwf	_KeyCounter,w
  1976  0264  1C03               	skipc
  1977  0265  2A6A               	goto	l2767
  1978  0266                     l2759:	
  1979                           
  1980                           ;CheckTouchKey.c: 521: {
  1981                           ;CheckTouchKey.c: 522: KeyStopClear();
  1982  0266  22FB               	fcall	_KeyStopClear
  1983                           
  1984                           ;CheckTouchKey.c: 523: b_kerr = 0;
  1985  0267  1070               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1986                           
  1987                           ;CheckTouchKey.c: 524: b_kover = 0;
  1988  0268  11F0               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1989                           
  1990                           ;CheckTouchKey.c: 525: b_kover1 = 0;
  1991  0269  1170               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1992  026A                     l2767:	
  1993                           
  1994                           ;CheckTouchKey.c: 526: }
  1995                           ;CheckTouchKey.c: 527: KeyCounter = 0;
  1996  026A  1283               	bcf	3,5	;RP0=0, select bank0
  1997  026B  1303               	bcf	3,6	;RP1=0, select bank0
  1998  026C  01C4               	clrf	_KeyCounter
  1999                           
  2000                           ;CheckTouchKey.c: 528: }
  2001  026D  2A72               	goto	l2775
  2002  026E                     l2769:	
  2003                           
  2004                           ;CheckTouchKey.c: 529: else
  2005                           ;CheckTouchKey.c: 530: {
  2006                           ;CheckTouchKey.c: 532: CheckKeyOldValue();
  2007  026E  2106               	fcall	_CheckKeyOldValue
  2008                           
  2009                           ;CheckTouchKey.c: 534: ClearResSum();
  2010  026F  236D               	fcall	_ClearResSum
  2011                           
  2012                           ;CheckTouchKey.c: 536: b_kover = 0;
  2013  0270  11F0               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  2014                           
  2015                           ;CheckTouchKey.c: 537: b_kover1 = 0;
  2016  0271  1170               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  2017  0272                     l2775:	
  2018                           
  2019                           ;CheckTouchKey.c: 538: }
  2020                           ;CheckTouchKey.c: 540: CheckValidTime();
  2021  0272  2B38               	ljmp	l2469
  2022  0273                     __end_of_CheckTouchKey:	
  2023                           
  2024                           	psect	text18
  2025  01EF                     __ptext18:	
  2026 ;; *************** function _TurnKeyFlags *****************
  2027 ;; Defined at:
  2028 ;;		line 382 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;		None
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;		None
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  1    wreg      void 
  2035 ;; Registers used:
  2036 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2037 ;; Tracked objects:
  2038 ;;		On entry : B00/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2042 ;;      Params:         0       0       0       0
  2043 ;;      Locals:         0       0       0       0
  2044 ;;      Temps:          0       0       0       0
  2045 ;;      Totals:         0       0       0       0
  2046 ;;Total ram usage:        0 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:    4
  2049 ;; This function calls:
  2050 ;;		_KeyClearIn
  2051 ;; This function is called by:
  2052 ;;		_CheckTouchKey
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           
  2057                           ;psect for function _TurnKeyFlags
  2058  01EF                     _TurnKeyFlags:	
  2059                           
  2060                           ;CheckTouchKey.c: 384: static unsigned char KeyHaveTimes = 0;
  2061                           ;CheckTouchKey.c: 385: static unsigned char KeyNoTimes = 0;
  2062                           ;CheckTouchKey.c: 387: if(KeyData[0] | KeyData[1])
  2063                           
  2064                           ;incstack = 0
  2065                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2066  01EF  0837               	movf	_KeyData+1,w	;volatile
  2067  01F0  0436               	iorwf	_KeyData,w	;volatile
  2068  01F1  1903               	btfsc	3,2
  2069  01F2  2A11               	goto	l2461
  2070                           
  2071                           ;CheckTouchKey.c: 388: {
  2072                           ;CheckTouchKey.c: 389: KeyNoTimes = 0;
  2073  01F3  01C0               	clrf	TurnKeyFlags@KeyNoTimes
  2074                           
  2075                           ;CheckTouchKey.c: 391: if(KeyData[0] == KeyOldData[0] && KeyData[1] == KeyOldData[1])
  2076  01F4  0836               	movf	_KeyData,w	;volatile
  2077  01F5  0638               	xorwf	_KeyOldData,w	;volatile
  2078  01F6  1D03               	skipz
  2079  01F7  2A0A               	goto	l1146
  2080  01F8  0837               	movf	_KeyData+1,w	;volatile
  2081  01F9  0639               	xorwf	_KeyOldData+1,w	;volatile
  2082  01FA  1D03               	skipz
  2083  01FB  2A0A               	goto	l1146
  2084  01FC  3002               	movlw	2
  2085  01FD  0AC1               	incf	TurnKeyFlags@KeyHaveTimes,f
  2086  01FE  0241               	subwf	TurnKeyFlags@KeyHaveTimes,w
  2087  01FF  1C03               	skipc
  2088  0200  0008               	return
  2089                           
  2090                           ;CheckTouchKey.c: 394: {
  2091                           ;CheckTouchKey.c: 395: KeyHaveTimes = 0;
  2092  0201  01C1               	clrf	TurnKeyFlags@KeyHaveTimes
  2093                           
  2094                           ;CheckTouchKey.c: 396: KeyFlag[0] = KeyData[0];
  2095  0202  0836               	movf	_KeyData,w	;volatile
  2096  0203  00BE               	movwf	_KeyFlag	;volatile
  2097                           
  2098                           ;CheckTouchKey.c: 397: KeyFlag[1] = KeyData[1];
  2099  0204  0837               	movf	_KeyData+1,w	;volatile
  2100  0205  00BF               	movwf	_KeyFlag+1	;volatile
  2101                           
  2102                           ;CheckTouchKey.c: 400: {
  2103                           ;CheckTouchKey.c: 401: if(!b_kclr)
  2104  0206  18F0               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2105  0207  0008               	return
  2106                           
  2107                           ;CheckTouchKey.c: 402: {
  2108                           ;CheckTouchKey.c: 403: b_kclr = 1;
  2109  0208  14F0               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2110                           
  2111                           ;CheckTouchKey.c: 404: KeyClearIn();
  2112  0209  2B7C               	ljmp	l2217
  2113  020A                     l1146:	
  2114                           
  2115                           ;CheckTouchKey.c: 409: else
  2116                           ;CheckTouchKey.c: 410: {
  2117                           ;CheckTouchKey.c: 411: b_kclr = 0;
  2118  020A  10F0               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2119                           
  2120                           ;CheckTouchKey.c: 412: KeyOldData[0] = KeyData[0];
  2121  020B  0836               	movf	_KeyData,w	;volatile
  2122  020C  00B8               	movwf	_KeyOldData	;volatile
  2123                           
  2124                           ;CheckTouchKey.c: 413: KeyOldData[1] = KeyData[1];
  2125  020D  0837               	movf	_KeyData+1,w	;volatile
  2126  020E  00B9               	movwf	_KeyOldData+1	;volatile
  2127                           
  2128                           ;CheckTouchKey.c: 414: KeyHaveTimes = 0;
  2129  020F  01C1               	clrf	TurnKeyFlags@KeyHaveTimes
  2130                           
  2131                           ;CheckTouchKey.c: 415: }
  2132                           ;CheckTouchKey.c: 416: }
  2133  0210  0008               	return
  2134  0211                     l2461:	
  2135                           
  2136                           ;CheckTouchKey.c: 417: else
  2137                           ;CheckTouchKey.c: 418: {
  2138                           ;CheckTouchKey.c: 419: KeyHaveTimes = 0;
  2139  0211  01C1               	clrf	TurnKeyFlags@KeyHaveTimes
  2140                           
  2141                           ;CheckTouchKey.c: 420: KeyOldData[0] = 0;
  2142  0212  01B8               	clrf	_KeyOldData	;volatile
  2143                           
  2144                           ;CheckTouchKey.c: 421: KeyOldData[1] = 0;
  2145  0213  01B9               	clrf	_KeyOldData+1	;volatile
  2146                           
  2147                           ;CheckTouchKey.c: 423: if(++KeyNoTimes >=2)
  2148  0214  3002               	movlw	2
  2149  0215  0AC0               	incf	TurnKeyFlags@KeyNoTimes,f
  2150  0216  0240               	subwf	TurnKeyFlags@KeyNoTimes,w
  2151  0217  1C03               	skipc
  2152  0218  0008               	return
  2153                           
  2154                           ;CheckTouchKey.c: 424: {
  2155                           ;CheckTouchKey.c: 425: KeyNoTimes = 0;
  2156  0219  01C0               	clrf	TurnKeyFlags@KeyNoTimes
  2157                           
  2158                           ;CheckTouchKey.c: 426: KeyFlag[0] = 0;
  2159  021A  01BE               	clrf	_KeyFlag	;volatile
  2160                           
  2161                           ;CheckTouchKey.c: 427: KeyFlag[1] = 0;
  2162  021B  01BF               	clrf	_KeyFlag+1	;volatile
  2163                           
  2164                           ;CheckTouchKey.c: 429: b_kclr = 0;
  2165  021C  10F0               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2166  021D  0008               	return
  2167  021E                     __end_of_TurnKeyFlags:	
  2168                           
  2169                           	psect	text19
  2170  037C                     __ptext19:	
  2171 ;; *************** function _KeyClearIn *****************
  2172 ;; Defined at:
  2173 ;;		line 88 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;		None
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  cnt             1    4[COMMON] unsigned char 
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  1    wreg      void 
  2180 ;; Registers used:
  2181 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : B00/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2187 ;;      Params:         0       0       0       0
  2188 ;;      Locals:         1       0       0       0
  2189 ;;      Temps:          0       0       0       0
  2190 ;;      Totals:         1       0       0       0
  2191 ;;Total ram usage:        1 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    3
  2194 ;; This function calls:
  2195 ;;		_KeyClearOne
  2196 ;;		_KeyIsIn
  2197 ;; This function is called by:
  2198 ;;		_TurnKeyFlags
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           
  2203                           ;psect for function _KeyClearIn
  2204  037C                     _KeyClearIn:	
  2205  037C                     l2217:	
  2206                           ;incstack = 0
  2207                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2208                           
  2209                           
  2210                           ;CheckTouchKey.c: 90: unsigned char cnt;
  2211                           ;CheckTouchKey.c: 91: for(cnt=0;cnt < KeyTotalNumber;cnt++)
  2212  037C  01F6               	clrf	KeyClearIn@cnt
  2213  037D                     l2223:	
  2214                           
  2215                           ;CheckTouchKey.c: 92: {
  2216                           ;CheckTouchKey.c: 93: if(!KeyIsIn(cnt))
  2217  037D  0876               	movf	KeyClearIn@cnt,w
  2218  037E  234A               	fcall	_KeyIsIn
  2219  037F  3A00               	xorlw	0
  2220  0380  1D03               	skipz
  2221  0381  2B84               	goto	l2227
  2222                           
  2223                           ;CheckTouchKey.c: 94: {
  2224                           ;CheckTouchKey.c: 95: KeyClearOne(cnt);
  2225  0382  0876               	movf	KeyClearIn@cnt,w
  2226  0383  22CD               	fcall	_KeyClearOne
  2227  0384                     l2227:	
  2228  0384  3002               	movlw	2
  2229  0385  0AF6               	incf	KeyClearIn@cnt,f
  2230  0386  0276               	subwf	KeyClearIn@cnt,w
  2231  0387  1803               	btfsc	3,0
  2232  0388  0008               	return
  2233  0389  2B7D               	goto	l2223
  2234  038A                     __end_of_KeyClearIn:	
  2235                           
  2236                           	psect	text20
  2237  02FB                     __ptext20:	
  2238 ;; *************** function _KeyStopClear *****************
  2239 ;; Defined at:
  2240 ;;		line 107 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2241 ;; Parameters:    Size  Location     Type
  2242 ;;		None
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;  i               1    3[COMMON] unsigned char 
  2245 ;; Return value:  Size  Location     Type
  2246 ;;                  1    wreg      void 
  2247 ;; Registers used:
  2248 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/100
  2251 ;;		On exit  : 800/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2254 ;;      Params:         0       0       0       0
  2255 ;;      Locals:         1       0       0       0
  2256 ;;      Temps:          0       0       0       0
  2257 ;;      Totals:         1       0       0       0
  2258 ;;Total ram usage:        1 bytes
  2259 ;; Hardware stack levels used:    1
  2260 ;; Hardware stack levels required when called:    2
  2261 ;; This function calls:
  2262 ;;		_KeyClearOne
  2263 ;; This function is called by:
  2264 ;;		_CheckTouchKey
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           
  2269                           ;psect for function _KeyStopClear
  2270  02FB                     _KeyStopClear:	
  2271                           
  2272                           ;CheckTouchKey.c: 109: unsigned char i;
  2273                           ;CheckTouchKey.c: 110: KeyFlag[0] = 0;
  2274                           
  2275                           ;incstack = 0
  2276                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2277  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  2278  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  2279  02FD  01BE               	clrf	_KeyFlag	;volatile
  2280                           
  2281                           ;CheckTouchKey.c: 111: KeyFlag[1] = 0;
  2282  02FE  01BF               	clrf	_KeyFlag+1	;volatile
  2283                           
  2284                           ;CheckTouchKey.c: 112: for(i = 0; i < KeyTotalNumber; i++)
  2285  02FF  01F5               	clrf	KeyStopClear@i
  2286  0300                     l2301:	
  2287                           
  2288                           ;CheckTouchKey.c: 113: {
  2289                           ;CheckTouchKey.c: 114: KeyResSum[i] = 0;
  2290  0300  1003               	clrc
  2291  0301  0D75               	rlf	KeyStopClear@i,w
  2292  0302  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2293  0303  0084               	movwf	4
  2294  0304  1383               	bcf	3,7	;select IRP bank0
  2295  0305  0180               	clrf	0
  2296  0306  0A84               	incf	4,f
  2297  0307  0180               	clrf	0
  2298                           
  2299                           ;CheckTouchKey.c: 115: KeyClearOne(i);
  2300  0308  0875               	movf	KeyStopClear@i,w
  2301  0309  22CD               	fcall	_KeyClearOne
  2302  030A  3002               	movlw	2
  2303  030B  0AF5               	incf	KeyStopClear@i,f
  2304  030C  0275               	subwf	KeyStopClear@i,w
  2305  030D  1803               	btfsc	3,0
  2306  030E  0008               	return
  2307  030F  2B00               	goto	l2301
  2308  0310                     __end_of_KeyStopClear:	
  2309                           
  2310                           	psect	text21
  2311  021E                     __ptext21:	
  2312 ;; *************** function _GetTouchKeyValue *****************
  2313 ;; Defined at:
  2314 ;;		line 180 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2315 ;; Parameters:    Size  Location     Type
  2316 ;;		None
  2317 ;; Auto vars:     Size  Location     Type
  2318 ;;  cnt             1    4[COMMON] unsigned char 
  2319 ;;  temp            1    3[COMMON] unsigned char 
  2320 ;; Return value:  Size  Location     Type
  2321 ;;                  1    wreg      void 
  2322 ;; Registers used:
  2323 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/100
  2326 ;;		On exit  : A00/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2329 ;;      Params:         0       0       0       0
  2330 ;;      Locals:         2       0       0       0
  2331 ;;      Temps:          0       0       0       0
  2332 ;;      Totals:         2       0       0       0
  2333 ;;Total ram usage:        2 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; Hardware stack levels required when called:    2
  2336 ;; This function calls:
  2337 ;;		_ClearResSum
  2338 ;; This function is called by:
  2339 ;;		_CheckTouchKey
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           
  2344                           ;psect for function _GetTouchKeyValue
  2345  021E                     _GetTouchKeyValue:	
  2346                           
  2347                           ;CheckTouchKey.c: 182: unsigned char cnt = 0,temp;
  2348                           
  2349                           ;incstack = 0
  2350                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2351  021E  01F6               	clrf	GetTouchKeyValue@cnt
  2352  021F                     l1086:	
  2353                           ;CheckTouchKey.c: 184: do
  2354                           
  2355                           
  2356                           ;CheckTouchKey.c: 185: {
  2357                           ;CheckTouchKey.c: 186: KEYCON0 = 0;
  2358  021F  1683               	bsf	3,5	;RP0=1, select bank1
  2359  0220  1303               	bcf	3,6	;RP1=0, select bank1
  2360  0221  0192               	clrf	18	;volatile
  2361                           
  2362                           ;CheckTouchKey.c: 187: KEYCON1 = 0;
  2363  0222  0193               	clrf	19	;volatile
  2364                           
  2365                           ;CheckTouchKey.c: 194: KEYCON0 = Table_KeyCap[cnt];
  2366  0223  0876               	movf	GetTouchKeyValue@cnt,w
  2367  0224  3E0B               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  2368  0225  0084               	movwf	4
  2369  0226  2310               	fcall	stringdir
  2370  0227  0092               	movwf	18	;volatile
  2371                           
  2372                           ;CheckTouchKey.c: 195: KEYCON1 = Table_KeyChannel[cnt];
  2373  0228  0876               	movf	GetTouchKeyValue@cnt,w
  2374  0229  3E0D               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  2375  022A  0084               	movwf	4
  2376  022B  2310               	fcall	stringdir
  2377  022C  0093               	movwf	19	;volatile
  2378                           
  2379                           ;CheckTouchKey.c: 196: KEYCON0 |= 0x1;
  2380  022D  1412               	bsf	18,0	;volatile
  2381                           
  2382                           ;CheckTouchKey.c: 198: temp = 0;
  2383  022E  01F5               	clrf	GetTouchKeyValue@temp
  2384  022F                     l1087:	
  2385                           ;CheckTouchKey.c: 199: while(!(KEYCON0&0x80))
  2386                           
  2387  022F  1B92               	btfsc	18,7	;volatile
  2388  0230  2A37               	goto	l2323
  2389                           
  2390                           ;CheckTouchKey.c: 200: {
  2391                           ;CheckTouchKey.c: 201: if(0 == (--temp))
  2392  0231  0BF5               	decfsz	GetTouchKeyValue@temp,f
  2393  0232  2A2F               	goto	l1087
  2394                           
  2395                           ;CheckTouchKey.c: 202: {
  2396                           ;CheckTouchKey.c: 203: KeyCounter = 255;
  2397  0233  30FF               	movlw	255
  2398  0234  1283               	bcf	3,5	;RP0=0, select bank0
  2399  0235  00C4               	movwf	_KeyCounter
  2400                           
  2401                           ;CheckTouchKey.c: 204: ClearResSum();
  2402  0236  2B6D               	ljmp	l2231
  2403  0237                     l2323:	
  2404                           
  2405                           ;CheckTouchKey.c: 206: }
  2406                           ;CheckTouchKey.c: 207: }
  2407                           ;CheckTouchKey.c: 209: KeyResSum[cnt] += (unsigned int)((KEYDATAH<<8) | KEYDATAL);
  2408  0237  1003               	clrc
  2409  0238  0D76               	rlf	GetTouchKeyValue@cnt,w
  2410  0239  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2411  023A  0084               	movwf	4
  2412  023B  0814               	movf	20,w	;volatile
  2413  023C  1383               	bcf	3,7	;select IRP bank0
  2414  023D  0780               	addwf	0,f
  2415  023E  0F84               	incfsz	4,f
  2416  023F  0800               	movf	0,w
  2417  0240  1803               	skipnc
  2418  0241  0A00               	incf	0,w
  2419  0242  00FF               	movwf	127
  2420  0243  0815               	movf	21,w	;volatile
  2421  0244  077F               	addwf	127,w
  2422  0245  0080               	movwf	0
  2423  0246  3002               	movlw	2
  2424  0247  0384               	decf	4,f
  2425  0248  0AF6               	incf	GetTouchKeyValue@cnt,f
  2426  0249  0276               	subwf	GetTouchKeyValue@cnt,w
  2427  024A  1803               	btfsc	3,0
  2428  024B  0008               	return
  2429  024C  2A1F               	goto	l1086
  2430  024D                     __end_of_GetTouchKeyValue:	
  2431                           
  2432                           	psect	text22
  2433  036D                     __ptext22:	
  2434 ;; *************** function _ClearResSum *****************
  2435 ;; Defined at:
  2436 ;;		line 126 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;		None
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;  cnt             1    2[COMMON] unsigned char 
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  1    wreg      void 
  2443 ;; Registers used:
  2444 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2445 ;; Tracked objects:
  2446 ;;		On entry : 300/0
  2447 ;;		On exit  : B00/0
  2448 ;;		Unchanged: 300/0
  2449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2450 ;;      Params:         0       0       0       0
  2451 ;;      Locals:         1       0       0       0
  2452 ;;      Temps:          0       0       0       0
  2453 ;;      Totals:         1       0       0       0
  2454 ;;Total ram usage:        1 bytes
  2455 ;; Hardware stack levels used:    1
  2456 ;; Hardware stack levels required when called:    1
  2457 ;; This function calls:
  2458 ;;		Nothing
  2459 ;; This function is called by:
  2460 ;;		_GetTouchKeyValue
  2461 ;;		_CheckTouchKey
  2462 ;; This function uses a non-reentrant model
  2463 ;;
  2464                           
  2465                           
  2466                           ;psect for function _ClearResSum
  2467  036D                     _ClearResSum:	
  2468  036D                     l2231:	
  2469                           ;incstack = 0
  2470                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  2471                           
  2472                           
  2473                           ;CheckTouchKey.c: 128: unsigned char cnt = 0;
  2474  036D  01F4               	clrf	ClearResSum@cnt
  2475  036E                     l2233:	
  2476                           
  2477                           ;CheckTouchKey.c: 130: {
  2478                           ;CheckTouchKey.c: 131: KeyResSum[cnt] = 0;
  2479  036E  1003               	clrc
  2480  036F  0D74               	rlf	ClearResSum@cnt,w
  2481  0370  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2482  0371  0084               	movwf	4
  2483  0372  3002               	movlw	2
  2484  0373  1383               	bcf	3,7	;select IRP bank0
  2485  0374  0180               	clrf	0
  2486  0375  0A84               	incf	4,f
  2487  0376  0180               	clrf	0
  2488  0377  0AF4               	incf	ClearResSum@cnt,f
  2489  0378  0274               	subwf	ClearResSum@cnt,w
  2490  0379  1803               	btfsc	3,0
  2491  037A  0008               	return
  2492  037B  2B6E               	goto	l2233
  2493  037C                     __end_of_ClearResSum:	
  2494                           
  2495                           	psect	text23
  2496  0338                     __ptext23:	
  2497 ;; *************** function _CheckValidTime *****************
  2498 ;; Defined at:
  2499 ;;		line 467 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;		None
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;		None
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  1    wreg      void 
  2506 ;; Registers used:
  2507 ;;		wreg, status,2, status,0
  2508 ;; Tracked objects:
  2509 ;;		On entry : 300/0
  2510 ;;		On exit  : 300/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2513 ;;      Params:         0       0       0       0
  2514 ;;      Locals:         0       0       0       0
  2515 ;;      Temps:          0       0       0       0
  2516 ;;      Totals:         0       0       0       0
  2517 ;;Total ram usage:        0 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    1
  2520 ;; This function calls:
  2521 ;;		Nothing
  2522 ;; This function is called by:
  2523 ;;		_CheckTouchKey
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           
  2528                           ;psect for function _CheckValidTime
  2529  0338                     _CheckValidTime:	
  2530  0338                     l2469:	
  2531                           ;incstack = 0
  2532                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  2533                           
  2534                           
  2535                           ;CheckTouchKey.c: 472: {
  2536                           ;CheckTouchKey.c: 473: if(KeyFlag[0] | KeyFlag[1])
  2537  0338  083F               	movf	_KeyFlag+1,w	;volatile
  2538  0339  043E               	iorwf	_KeyFlag,w	;volatile
  2539  033A  1903               	btfsc	3,2
  2540  033B  2B47               	goto	l2475
  2541  033C  0AB4               	incf	CheckValidTime@validtime,f
  2542  033D  1903               	skipnz
  2543  033E  0AB5               	incf	CheckValidTime@validtime+1,f
  2544  033F  303A               	movlw	58
  2545  0340  0235               	subwf	CheckValidTime@validtime+1,w
  2546  0341  3098               	movlw	152
  2547  0342  1903               	skipnz
  2548  0343  0234               	subwf	CheckValidTime@validtime,w
  2549  0344  1C03               	skipc
  2550  0345  0008               	return
  2551                           
  2552                           ;CheckTouchKey.c: 476: {
  2553                           ;CheckTouchKey.c: 477: b_kerr = 1;
  2554  0346  1470               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  2555  0347                     l2475:	
  2556                           
  2557                           ;CheckTouchKey.c: 478: validtime = 0;
  2558  0347  01B4               	clrf	CheckValidTime@validtime
  2559  0348  01B5               	clrf	CheckValidTime@validtime+1
  2560  0349  0008               	return
  2561  034A                     __end_of_CheckValidTime:	
  2562                           
  2563                           	psect	text24
  2564  0018                     __ptext24:	
  2565 ;; *************** function _CheckOnceResult *****************
  2566 ;; Defined at:
  2567 ;;		line 221 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;		None
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;  KeyResTemp      2   10[BANK0 ] unsigned int 
  2572 ;;  KeyValue        2    7[BANK0 ] unsigned int 
  2573 ;;  OldValue        2    4[BANK0 ] unsigned int 
  2574 ;;  cnt             1   12[BANK0 ] unsigned char 
  2575 ;;  KeyDown         1    9[BANK0 ] unsigned char 
  2576 ;;  flag            1    6[BANK0 ] unsigned char 
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  1    wreg      void 
  2579 ;; Registers used:
  2580 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/100
  2583 ;;		On exit  : B00/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2586 ;;      Params:         0       0       0       0
  2587 ;;      Locals:         0       9       0       0
  2588 ;;      Temps:          0       4       0       0
  2589 ;;      Totals:         0      13       0       0
  2590 ;;Total ram usage:       13 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    3
  2593 ;; This function calls:
  2594 ;;		_KeyClearOne
  2595 ;;		_KeyHave
  2596 ;;		_KeyIsIn
  2597 ;; This function is called by:
  2598 ;;		_CheckTouchKey
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           
  2603                           ;psect for function _CheckOnceResult
  2604  0018                     _CheckOnceResult:	
  2605                           
  2606                           ;CheckTouchKey.c: 223: unsigned char cnt = 0;
  2607                           
  2608                           ;incstack = 0
  2609                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2610  0018  1283               	bcf	3,5	;RP0=0, select bank0
  2611  0019  1303               	bcf	3,6	;RP1=0, select bank0
  2612  001A  01D5               	clrf	CheckOnceResult@cnt
  2613                           
  2614                           ;CheckTouchKey.c: 224: unsigned char KeyDown;
  2615                           ;CheckTouchKey.c: 225: unsigned char flag;
  2616                           ;CheckTouchKey.c: 227: unsigned int KeyResTemp;
  2617                           ;CheckTouchKey.c: 228: unsigned int KeyValue;
  2618                           ;CheckTouchKey.c: 229: unsigned int OldValue;
  2619                           ;CheckTouchKey.c: 231: KeyData[0] = 0;
  2620  001B  01B6               	clrf	_KeyData	;volatile
  2621                           
  2622                           ;CheckTouchKey.c: 232: KeyData[1] = 0;
  2623  001C  01B7               	clrf	_KeyData+1	;volatile
  2624                           
  2625                           ;CheckTouchKey.c: 233: KeyMaxSub = 0;
  2626  001D  01C3               	clrf	_KeyMaxSub
  2627  001E                     l2675:	
  2628                           
  2629                           ;CheckTouchKey.c: 237: {
  2630                           ;CheckTouchKey.c: 238: flag = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  2631  001E  0855               	movf	CheckOnceResult@cnt,w
  2632  001F  3907               	andlw	7
  2633  0020  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  2634  0021  0084               	movwf	4
  2635  0022  2310               	fcall	stringdir
  2636  0023  00CF               	movwf	CheckOnceResult@flag
  2637                           
  2638                           ;CheckTouchKey.c: 240: KeyResSum[cnt] >>= 3;
  2639  0024  1003               	clrc
  2640  0025  0D55               	rlf	CheckOnceResult@cnt,w
  2641  0026  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2642  0027  0084               	movwf	4
  2643  0028  3003               	movlw	3
  2644  0029                     u1355:	
  2645  0029  0A84               	incf	4,f
  2646  002A  1003               	clrc
  2647  002B  1383               	bcf	3,7	;select IRP bank0
  2648  002C  0C80               	rrf	0,f
  2649  002D  0384               	decf	4,f
  2650  002E  0C80               	rrf	0,f
  2651  002F  3EFF               	addlw	-1
  2652  0030  1D03               	skipz
  2653  0031  2829               	goto	u1355
  2654                           
  2655                           ;CheckTouchKey.c: 241: KeyResTemp = KeyResSum[cnt];
  2656  0032  1003               	clrc
  2657  0033  0D55               	rlf	CheckOnceResult@cnt,w
  2658  0034  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2659  0035  0084               	movwf	4
  2660  0036  0800               	movf	0,w
  2661  0037  00D3               	movwf	CheckOnceResult@KeyResTemp
  2662  0038  0A84               	incf	4,f
  2663  0039  0800               	movf	0,w
  2664  003A  00D4               	movwf	CheckOnceResult@KeyResTemp+1
  2665                           
  2666                           ;CheckTouchKey.c: 242: KeyDown = Table_KeyDown[cnt];
  2667  003B  0855               	movf	CheckOnceResult@cnt,w
  2668  003C  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  2669  003D  0084               	movwf	4
  2670  003E  2310               	fcall	stringdir
  2671  003F  00D2               	movwf	CheckOnceResult@KeyDown
  2672                           
  2673                           ;CheckTouchKey.c: 244: KeyValue = KeyResTemp + KeyDown;
  2674  0040  00D0               	movwf	CheckOnceResult@KeyValue
  2675  0041  01D1               	clrf	CheckOnceResult@KeyValue+1
  2676  0042  0853               	movf	CheckOnceResult@KeyResTemp,w
  2677  0043  07D0               	addwf	CheckOnceResult@KeyValue,f
  2678  0044  1803               	skipnc
  2679  0045  0AD1               	incf	CheckOnceResult@KeyValue+1,f
  2680  0046  0854               	movf	CheckOnceResult@KeyResTemp+1,w
  2681  0047  07D1               	addwf	CheckOnceResult@KeyValue+1,f
  2682                           
  2683                           ;CheckTouchKey.c: 246: if(!KeyIsIn(cnt))
  2684  0048  0855               	movf	CheckOnceResult@cnt,w
  2685  0049  234A               	fcall	_KeyIsIn
  2686  004A  3A00               	xorlw	0
  2687                           
  2688                           ;CheckTouchKey.c: 247: {
  2689                           ;CheckTouchKey.c: 249: OldValue = KeyOldValue2[cnt];
  2690  004B  1003               	clrc
  2691  004C  1D03               	skipz
  2692  004D  28A5               	goto	L3
  2693  004E  0D55               	rlf	CheckOnceResult@cnt,w
  2694  004F  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2695  0050  0084               	movwf	4
  2696  0051  1383               	bcf	3,7	;select IRP bank0
  2697  0052  0800               	movf	0,w
  2698  0053  00CD               	movwf	CheckOnceResult@OldValue
  2699  0054  0A84               	incf	4,f
  2700  0055  0800               	movf	0,w
  2701  0056  00CE               	movwf	CheckOnceResult@OldValue+1
  2702                           
  2703                           ;CheckTouchKey.c: 251: if(KeyReference[cnt] > KeyValue)
  2704  0057  1003               	clrc
  2705  0058  0D55               	rlf	CheckOnceResult@cnt,w
  2706  0059  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2707  005A  20FF               	fcall	PL6	;call to abstracted procedure
  2708  005B  0251               	subwf	CheckOnceResult@KeyValue+1,w
  2709  005C  1D03               	skipz
  2710  005D  2860               	goto	u1375
  2711  005E  0849               	movf	??_CheckOnceResult,w
  2712  005F  0250               	subwf	CheckOnceResult@KeyValue,w
  2713  0060                     u1375:	
  2714  0060  1803               	skipnc
  2715  0061  286E               	goto	l2693
  2716                           
  2717                           ;CheckTouchKey.c: 252: {
  2718                           ;CheckTouchKey.c: 253: KeyResTemp = KeyReference[cnt] - KeyResTemp;
  2719  0062  1003               	clrc
  2720  0063  0D55               	rlf	CheckOnceResult@cnt,w
  2721  0064  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2722  0065  20FF               	fcall	PL6	;call to abstracted procedure
  2723  0066  0853               	movf	CheckOnceResult@KeyResTemp,w
  2724  0067  0249               	subwf	??_CheckOnceResult,w
  2725  0068  00D3               	movwf	CheckOnceResult@KeyResTemp
  2726  0069  0854               	movf	CheckOnceResult@KeyResTemp+1,w
  2727  006A  1C03               	skipc
  2728  006B  0A54               	incf	CheckOnceResult@KeyResTemp+1,w
  2729  006C  024A               	subwf	??_CheckOnceResult+1,w
  2730  006D  2891               	goto	L1
  2731  006E                     l2693:	
  2732                           ;CheckTouchKey.c: 254: }
  2733                           
  2734                           
  2735                           ;CheckTouchKey.c: 255: else if ((OldValue > KeyValue) && (KeyOldValue1[cnt] > KeyValue))
  2736  006E  084E               	movf	CheckOnceResult@OldValue+1,w
  2737  006F  0251               	subwf	CheckOnceResult@KeyValue+1,w
  2738  0070  1D03               	skipz
  2739  0071  2874               	goto	u1385
  2740  0072  084D               	movf	CheckOnceResult@OldValue,w
  2741  0073  0250               	subwf	CheckOnceResult@KeyValue,w
  2742  0074                     u1385:	
  2743  0074  1803               	skipnc
  2744  0075  28E5               	goto	l2739
  2745  0076  1003               	clrc
  2746  0077  0D55               	rlf	CheckOnceResult@cnt,w
  2747  0078  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2748  0079  20FF               	fcall	PL6	;call to abstracted procedure
  2749  007A  0251               	subwf	CheckOnceResult@KeyValue+1,w
  2750  007B  1D03               	skipz
  2751  007C  287F               	goto	u1395
  2752  007D  0849               	movf	??_CheckOnceResult,w
  2753  007E  0250               	subwf	CheckOnceResult@KeyValue,w
  2754  007F                     u1395:	
  2755  007F  1803               	skipnc
  2756  0080  28E5               	goto	l2739
  2757                           
  2758                           ;CheckTouchKey.c: 256: {
  2759                           ;CheckTouchKey.c: 257: KeyReference[cnt] = OldValue;
  2760  0081  1003               	clrc
  2761  0082  0D55               	rlf	CheckOnceResult@cnt,w
  2762  0083  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2763  0084  0084               	movwf	4
  2764  0085  084D               	movf	CheckOnceResult@OldValue,w
  2765  0086  0080               	movwf	0
  2766  0087  0A84               	incf	4,f
  2767  0088  084E               	movf	CheckOnceResult@OldValue+1,w
  2768  0089  0080               	movwf	0
  2769                           
  2770                           ;CheckTouchKey.c: 258: KeyResTemp = OldValue - KeyResTemp;
  2771  008A  0853               	movf	CheckOnceResult@KeyResTemp,w
  2772  008B  024D               	subwf	CheckOnceResult@OldValue,w
  2773  008C  00D3               	movwf	CheckOnceResult@KeyResTemp
  2774  008D  0854               	movf	CheckOnceResult@KeyResTemp+1,w
  2775  008E  1C03               	skipc
  2776  008F  0A54               	incf	CheckOnceResult@KeyResTemp+1,w
  2777  0090  024E               	subwf	CheckOnceResult@OldValue+1,w
  2778  0091                     L1:	
  2779  0091  00D4               	movwf	CheckOnceResult@KeyResTemp+1
  2780                           
  2781                           ;CheckTouchKey.c: 263: }
  2782                           ;CheckTouchKey.c: 265: KeyUpShake[cnt] = 0;
  2783                           
  2784                           ;CheckTouchKey.c: 259: }
  2785  0092  0855               	movf	CheckOnceResult@cnt,w
  2786  0093  3E3C               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2787  0094  0084               	movwf	4
  2788  0095  0180               	clrf	0
  2789                           
  2790                           ;CheckTouchKey.c: 268: {
  2791                           ;CheckTouchKey.c: 269: if(KeyResTemp >> 8)
  2792  0096  0854               	movf	CheckOnceResult@KeyResTemp+1,w
  2793  0097  1903               	btfsc	3,2
  2794  0098  289B               	goto	l2707
  2795                           
  2796                           ;CheckTouchKey.c: 270: {
  2797                           ;CheckTouchKey.c: 271: KeyDown = 0xFF;
  2798  0099  30FF               	movlw	255
  2799  009A  289C               	goto	L2
  2800  009B                     l2707:	
  2801                           ;CheckTouchKey.c: 272: }
  2802                           
  2803                           
  2804                           ;CheckTouchKey.c: 273: else
  2805                           ;CheckTouchKey.c: 274: {
  2806                           ;CheckTouchKey.c: 275: KeyDown = KeyResTemp & 0xFF;
  2807  009B  0853               	movf	CheckOnceResult@KeyResTemp,w
  2808  009C                     L2:	
  2809  009C  00D2               	movwf	CheckOnceResult@KeyDown
  2810                           
  2811                           ;CheckTouchKey.c: 276: }
  2812                           ;CheckTouchKey.c: 278: if(KeyMaxSub < KeyDown)
  2813  009D  0243               	subwf	_KeyMaxSub,w
  2814  009E  1803               	skipnc
  2815  009F  28A3               	goto	l2713
  2816                           
  2817                           ;CheckTouchKey.c: 279: {
  2818                           ;CheckTouchKey.c: 280: KeyMaxSub = KeyDown;
  2819  00A0  0852               	movf	CheckOnceResult@KeyDown,w
  2820  00A1  00C3               	movwf	_KeyMaxSub
  2821  00A2  28E0               	goto	l2737
  2822  00A3                     l2713:	
  2823                           ;CheckTouchKey.c: 282: }
  2824                           
  2825                           ;CheckTouchKey.c: 281: KeyHave(cnt,flag);
  2826                           
  2827                           
  2828                           ;CheckTouchKey.c: 283: else
  2829                           ;CheckTouchKey.c: 284: {
  2830                           ;CheckTouchKey.c: 285: KeyCounter++;
  2831  00A3  0AC4               	incf	_KeyCounter,f
  2832  00A4  28E5               	goto	l2739
  2833  00A5                     L3:	
  2834                           ;CheckTouchKey.c: 294: else
  2835                           ;CheckTouchKey.c: 295: {
  2836                           ;CheckTouchKey.c: 298: if(KeyReference[cnt]+1 < KeyValue)
  2837                           
  2838  00A5  0D55               	rlf	CheckOnceResult@cnt,w
  2839  00A6  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2840  00A7  0084               	movwf	4
  2841  00A8  1383               	bcf	3,7	;select IRP bank0
  2842  00A9  0800               	movf	0,w
  2843  00AA  00C9               	movwf	??_CheckOnceResult
  2844  00AB  0A84               	incf	4,f
  2845  00AC  0800               	movf	0,w
  2846  00AD  00CA               	movwf	??_CheckOnceResult+1
  2847  00AE  0849               	movf	??_CheckOnceResult,w
  2848  00AF  3E01               	addlw	1
  2849  00B0  00CB               	movwf	??_CheckOnceResult+2
  2850  00B1  084A               	movf	??_CheckOnceResult+1,w
  2851  00B2  1803               	skipnc
  2852  00B3  3E01               	addlw	1
  2853  00B4  00CC               	movwf	??_CheckOnceResult+3
  2854  00B5  0851               	movf	CheckOnceResult@KeyValue+1,w
  2855  00B6  024C               	subwf	??_CheckOnceResult+3,w
  2856  00B7  1D03               	skipz
  2857  00B8  28BB               	goto	u1425
  2858  00B9  0850               	movf	CheckOnceResult@KeyValue,w
  2859  00BA  024B               	subwf	??_CheckOnceResult+2,w
  2860  00BB                     u1425:	
  2861  00BB  1C03               	btfss	3,0
  2862  00BC  28E5               	goto	l2739
  2863                           
  2864                           ;CheckTouchKey.c: 302: else if((KeyOldValue2[cnt]+KeyDown<KeyResTemp) || (KeyOldValue1[c
      +                          nt]+KeyDown<KeyResTemp))
  2865  00BD  1003               	clrc
  2866  00BE  0D55               	rlf	CheckOnceResult@cnt,w
  2867  00BF  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2868  00C0  0084               	movwf	4
  2869  00C1  0800               	movf	0,w
  2870  00C2  20ED               	fcall	PL4	;call to abstracted procedure
  2871  00C3  1C03               	skipc
  2872  00C4  28CD               	goto	l2727
  2873  00C5  1003               	clrc
  2874  00C6  0D55               	rlf	CheckOnceResult@cnt,w
  2875  00C7  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2876  00C8  0084               	movwf	4
  2877  00C9  0800               	movf	0,w
  2878  00CA  20ED               	fcall	PL4	;call to abstracted procedure
  2879  00CB  1803               	skipnc
  2880  00CC  28D8               	goto	l2731
  2881  00CD                     l2727:	
  2882                           
  2883                           ;CheckTouchKey.c: 303: {
  2884                           ;CheckTouchKey.c: 304: if(++KeyUpShake[cnt] > 8)
  2885  00CD  0855               	movf	CheckOnceResult@cnt,w
  2886  00CE  3E3C               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2887  00CF  0084               	movwf	4
  2888  00D0  3009               	movlw	9
  2889  00D1  0A80               	incf	0,f
  2890  00D2  0200               	subwf	0,w
  2891  00D3  1C03               	skipc
  2892  00D4  28DC               	goto	l2735
  2893                           
  2894                           ;CheckTouchKey.c: 305: {
  2895                           ;CheckTouchKey.c: 306: KeyClearOne(cnt);
  2896  00D5  0855               	movf	CheckOnceResult@cnt,w
  2897  00D6  22CD               	fcall	_KeyClearOne
  2898                           
  2899                           ;CheckTouchKey.c: 307: continue;
  2900  00D7  28E5               	goto	l2739
  2901  00D8                     l2731:	
  2902                           
  2903                           ;CheckTouchKey.c: 310: else
  2904                           ;CheckTouchKey.c: 311: {
  2905                           ;CheckTouchKey.c: 312: KeyUpShake[cnt] = 0;
  2906  00D8  0855               	movf	CheckOnceResult@cnt,w
  2907  00D9  3E3C               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2908  00DA  0084               	movwf	4
  2909  00DB  0180               	clrf	0
  2910  00DC                     l2735:	
  2911                           
  2912                           ;CheckTouchKey.c: 319: else if(!(KeyData[0] | KeyData[1]))
  2913  00DC  0837               	movf	_KeyData+1,w	;volatile
  2914  00DD  0436               	iorwf	_KeyData,w	;volatile
  2915  00DE  1D03               	btfss	3,2
  2916  00DF  28E5               	goto	l2739
  2917  00E0                     l2737:	
  2918                           
  2919                           ;CheckTouchKey.c: 320: {
  2920                           ;CheckTouchKey.c: 321: KeyHave(cnt,flag);
  2921  00E0  084F               	movf	CheckOnceResult@flag,w
  2922  00E1  00F4               	movwf	KeyHave@flag
  2923  00E2  01F5               	clrf	KeyHave@flag+1
  2924  00E3  0855               	movf	CheckOnceResult@cnt,w
  2925  00E4  238A               	fcall	_KeyHave
  2926  00E5                     l2739:	
  2927  00E5  3002               	movlw	2
  2928  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  2929  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  2930  00E8  0AD5               	incf	CheckOnceResult@cnt,f
  2931  00E9  0255               	subwf	CheckOnceResult@cnt,w
  2932  00EA  1803               	btfsc	3,0
  2933  00EB  0008               	return
  2934  00EC  281E               	goto	l2675
  2935  00ED                     __end_of_CheckOnceResult:	
  2936  00ED                     PL4:	
  2937  00ED  00C9               	movwf	??_CheckOnceResult
  2938  00EE  0A84               	incf	4,f
  2939  00EF  0800               	movf	0,w
  2940  00F0  00CA               	movwf	??_CheckOnceResult+1
  2941  00F1  0852               	movf	CheckOnceResult@KeyDown,w
  2942  00F2  0749               	addwf	??_CheckOnceResult,w
  2943  00F3  00CB               	movwf	??_CheckOnceResult+2
  2944  00F4  084A               	movf	??_CheckOnceResult+1,w
  2945  00F5  1803               	skipnc
  2946  00F6  0A4A               	incf	??_CheckOnceResult+1,w
  2947  00F7  00CC               	movwf	??_CheckOnceResult+3
  2948  00F8  0854               	movf	CheckOnceResult@KeyResTemp+1,w
  2949  00F9  024C               	subwf	??_CheckOnceResult+3,w
  2950  00FA  1D03               	skipz
  2951  00FB  0008               	return
  2952  00FC  0853               	movf	CheckOnceResult@KeyResTemp,w
  2953  00FD  024B               	subwf	??_CheckOnceResult+2,w
  2954  00FE  0008               	return
  2955  00FF                     __end_ofPL4:	
  2956  00FF                     PL6:	
  2957  00FF  0084               	movwf	4
  2958  0100  0800               	movf	0,w
  2959  0101  00C9               	movwf	??_CheckOnceResult
  2960  0102  0A84               	incf	4,f
  2961  0103  0800               	movf	0,w
  2962  0104  00CA               	movwf	??_CheckOnceResult+1
  2963  0105  0008               	return
  2964  0106                     __end_ofPL6:	
  2965                           
  2966                           	psect	text25
  2967  038A                     __ptext25:	
  2968 ;; *************** function _KeyHave *****************
  2969 ;; Defined at:
  2970 ;;		line 142 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;  cnt             1    wreg     unsigned char 
  2973 ;;  flag            2    2[COMMON] unsigned int 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;  cnt             1    4[COMMON] unsigned char 
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      void 
  2978 ;; Registers used:
  2979 ;;		wreg, status,2, status,0
  2980 ;; Tracked objects:
  2981 ;;		On entry : B00/0
  2982 ;;		On exit  : B00/0
  2983 ;;		Unchanged: 800/0
  2984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2985 ;;      Params:         2       0       0       0
  2986 ;;      Locals:         1       0       0       0
  2987 ;;      Temps:          0       0       0       0
  2988 ;;      Totals:         3       0       0       0
  2989 ;;Total ram usage:        3 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:    1
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		_CheckOnceResult
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           
  3000                           ;psect for function _KeyHave
  3001  038A                     _KeyHave:	
  3002                           
  3003                           ;incstack = 0
  3004                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  3005                           ;KeyHave@cnt stored from wreg
  3006  038A  00F6               	movwf	KeyHave@cnt
  3007                           
  3008                           ;CheckTouchKey.c: 144: KeyCounter++;
  3009  038B  0AC4               	incf	_KeyCounter,f
  3010                           
  3011                           ;CheckTouchKey.c: 147: {
  3012                           ;CheckTouchKey.c: 148: KeyData[0] = 0;
  3013  038C  01B6               	clrf	_KeyData	;volatile
  3014                           
  3015                           ;CheckTouchKey.c: 149: KeyData[1] = 0;
  3016  038D  01B7               	clrf	_KeyData+1	;volatile
  3017                           
  3018                           ;CheckTouchKey.c: 150: if(cnt&0x8)
  3019  038E  1DF6               	btfss	KeyHave@cnt,3
  3020  038F  2B93               	goto	l2247
  3021                           
  3022                           ;CheckTouchKey.c: 151: {
  3023                           ;CheckTouchKey.c: 152: KeyData[1] = flag;
  3024  0390  0874               	movf	KeyHave@flag,w
  3025  0391  00B7               	movwf	_KeyData+1	;volatile
  3026                           
  3027                           ;CheckTouchKey.c: 153: }
  3028  0392  0008               	return
  3029  0393                     l2247:	
  3030                           
  3031                           ;CheckTouchKey.c: 154: else
  3032                           ;CheckTouchKey.c: 155: {
  3033                           ;CheckTouchKey.c: 156: KeyData[0] = flag;
  3034  0393  0874               	movf	KeyHave@flag,w
  3035  0394  00B6               	movwf	_KeyData	;volatile
  3036  0395  0008               	return
  3037  0396                     __end_of_KeyHave:	
  3038                           
  3039                           	psect	text26
  3040  02CD                     __ptext26:	
  3041 ;; *************** function _KeyClearOne *****************
  3042 ;; Defined at:
  3043 ;;		line 80 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;  cnt             1    wreg     unsigned char 
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;  cnt             1    2[COMMON] unsigned char 
  3048 ;; Return value:  Size  Location     Type
  3049 ;;                  1    wreg      void 
  3050 ;; Registers used:
  3051 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 800/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3057 ;;      Params:         0       0       0       0
  3058 ;;      Locals:         1       0       0       0
  3059 ;;      Temps:          0       0       0       0
  3060 ;;      Totals:         1       0       0       0
  3061 ;;Total ram usage:        1 bytes
  3062 ;; Hardware stack levels used:    1
  3063 ;; Hardware stack levels required when called:    1
  3064 ;; This function calls:
  3065 ;;		Nothing
  3066 ;; This function is called by:
  3067 ;;		_KeyClearIn
  3068 ;;		_KeyStopClear
  3069 ;;		_CheckOnceResult
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           
  3074                           ;psect for function _KeyClearOne
  3075  02CD                     _KeyClearOne:	
  3076                           
  3077                           ;incstack = 0
  3078                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  3079                           ;KeyClearOne@cnt stored from wreg
  3080  02CD  00F4               	movwf	KeyClearOne@cnt
  3081                           
  3082                           ;CheckTouchKey.c: 82: KeyOldValue0[cnt] = 0;
  3083  02CE  1003               	clrc
  3084  02CF  0D74               	rlf	KeyClearOne@cnt,w
  3085  02D0  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3086  02D1  0084               	movwf	4
  3087  02D2  1383               	bcf	3,7	;select IRP bank0
  3088                           
  3089                           ;CheckTouchKey.c: 83: KeyOldValue1[cnt] = 0;
  3090  02D3  22E0               	fcall	PL16	;call to abstracted procedure
  3091  02D4  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3092  02D5  0084               	movwf	4
  3093                           
  3094                           ;CheckTouchKey.c: 84: KeyOldValue2[cnt] = 0;
  3095  02D6  22E0               	fcall	PL16	;call to abstracted procedure
  3096  02D7  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3097  02D8  0084               	movwf	4
  3098                           
  3099                           ;CheckTouchKey.c: 85: KeyReference[cnt] = 0;
  3100  02D9  22E0               	fcall	PL16	;call to abstracted procedure
  3101  02DA  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  3102  02DB  0084               	movwf	4
  3103  02DC  0180               	clrf	0
  3104  02DD  0A84               	incf	4,f
  3105  02DE  0180               	clrf	0
  3106  02DF  0008               	return
  3107  02E0                     __end_of_KeyClearOne:	
  3108  02E0                     PL16:	
  3109  02E0  0180               	clrf	0
  3110  02E1  0A84               	incf	4,f
  3111  02E2  0180               	clrf	0
  3112  02E3  1003               	clrc
  3113  02E4  0D74               	rlf	KeyClearOne@cnt,w
  3114  02E5  0008               	return
  3115  02E6                     __end_ofPL16:	
  3116                           
  3117                           	psect	text27
  3118  0106                     __ptext27:	
  3119 ;; *************** function _CheckKeyOldValue *****************
  3120 ;; Defined at:
  3121 ;;		line 335 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;		None
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  KeyOldTemp      2    2[BANK0 ] unsigned int 
  3126 ;;  KeyResTemp      2    0[BANK0 ] unsigned int 
  3127 ;;  cnt             1    4[BANK0 ] unsigned char 
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  1    wreg      void 
  3130 ;; Registers used:
  3131 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/100
  3134 ;;		On exit  : 300/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3137 ;;      Params:         0       0       0       0
  3138 ;;      Locals:         0       5       0       0
  3139 ;;      Temps:          2       0       0       0
  3140 ;;      Totals:         2       5       0       0
  3141 ;;Total ram usage:        7 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    3
  3144 ;; This function calls:
  3145 ;;		_KeyIsIn
  3146 ;; This function is called by:
  3147 ;;		_CheckTouchKey
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           
  3152                           ;psect for function _CheckKeyOldValue
  3153  0106                     _CheckKeyOldValue:	
  3154  0106  3004               	movlw	4
  3155                           
  3156                           ;CheckTouchKey.c: 337: static unsigned char counter = 0;
  3157                           ;CheckTouchKey.c: 338: unsigned char cnt = 0;
  3158                           
  3159                           ;incstack = 0
  3160                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3161  0107  1283               	bcf	3,5	;RP0=0, select bank0
  3162  0108  1303               	bcf	3,6	;RP1=0, select bank0
  3163  0109  01CD               	clrf	CheckKeyOldValue@cnt
  3164                           
  3165                           ;CheckTouchKey.c: 339: unsigned int KeyResTemp;
  3166                           ;CheckTouchKey.c: 340: unsigned int KeyOldTemp;
  3167                           ;CheckTouchKey.c: 342: if(++counter < 4)
  3168  010A  0AC2               	incf	CheckKeyOldValue@counter,f
  3169  010B  0242               	subwf	CheckKeyOldValue@counter,w
  3170  010C  1C03               	btfss	3,0
  3171  010D  0008               	return
  3172                           
  3173                           ;CheckTouchKey.c: 344: counter = 0;
  3174  010E  01C2               	clrf	CheckKeyOldValue@counter
  3175  010F                     l2403:	
  3176                           
  3177                           ;CheckTouchKey.c: 347: {
  3178                           ;CheckTouchKey.c: 348: KeyResTemp = KeyResSum[cnt];
  3179  010F  1003               	clrc
  3180  0110  0D4D               	rlf	CheckKeyOldValue@cnt,w
  3181  0111  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  3182  0112  0084               	movwf	4
  3183  0113  1383               	bcf	3,7	;select IRP bank0
  3184  0114  0800               	movf	0,w
  3185  0115  00C9               	movwf	CheckKeyOldValue@KeyResTemp
  3186  0116  0A84               	incf	4,f
  3187  0117  0800               	movf	0,w
  3188  0118  00CA               	movwf	CheckKeyOldValue@KeyResTemp+1
  3189                           
  3190                           ;CheckTouchKey.c: 349: if(!KeyIsIn(cnt))
  3191  0119  084D               	movf	CheckKeyOldValue@cnt,w
  3192  011A  234A               	fcall	_KeyIsIn
  3193  011B  3A00               	xorlw	0
  3194                           
  3195                           ;CheckTouchKey.c: 350: {
  3196                           ;CheckTouchKey.c: 352: KeyOldTemp = KeyOldValue0[cnt] - KeyResTemp;
  3197  011C  1003               	clrc
  3198  011D  1D03               	skipz
  3199  011E  294F               	goto	L7
  3200  011F  0D4D               	rlf	CheckKeyOldValue@cnt,w
  3201  0120  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3202  0121  0084               	movwf	4
  3203  0122  1383               	bcf	3,7	;select IRP bank0
  3204                           
  3205                           ;CheckTouchKey.c: 353: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3206  0123  2160               	fcall	PL2	;call to abstracted procedure
  3207  0124  1903               	skipnz
  3208  0125  024B               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3209  0126  1C03               	skipc
  3210  0127  292E               	goto	L4
  3211  0128  0F4B               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3212  0129  294E               	goto	l1128
  3213  012A  0A4C               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3214                           
  3215                           ;CheckTouchKey.c: 354: {
  3216                           ;CheckTouchKey.c: 355: KeyOldTemp = KeyOldValue1[cnt] - KeyResTemp;
  3217  012B  1003               	clrc
  3218  012C  1D03               	btfss	3,2
  3219  012D  294F               	goto	L7
  3220  012E                     L4:	
  3221  012E  0D4D               	rlf	CheckKeyOldValue@cnt,w
  3222  012F  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3223  0130  0084               	movwf	4
  3224                           
  3225                           ;CheckTouchKey.c: 356: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3226  0131  2160               	fcall	PL2	;call to abstracted procedure
  3227  0132  1903               	skipnz
  3228  0133  024B               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3229  0134  1C03               	skipc
  3230  0135  293C               	goto	L5
  3231  0136  0F4B               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3232  0137  294E               	goto	l1128
  3233  0138  0A4C               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3234                           
  3235                           ;CheckTouchKey.c: 357: {
  3236                           ;CheckTouchKey.c: 358: KeyOldTemp = KeyOldValue2[cnt] - KeyResTemp;
  3237  0139  1003               	clrc
  3238  013A  1D03               	btfss	3,2
  3239  013B  294F               	goto	L7
  3240  013C                     L5:	
  3241  013C  0D4D               	rlf	CheckKeyOldValue@cnt,w
  3242  013D  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3243  013E  0084               	movwf	4
  3244                           
  3245                           ;CheckTouchKey.c: 359: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3246  013F  2160               	fcall	PL2	;call to abstracted procedure
  3247  0140  1903               	skipnz
  3248  0141  024B               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3249  0142  1C03               	skipc
  3250  0143  294A               	goto	L6
  3251  0144  0F4B               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3252  0145  294E               	goto	l1128
  3253  0146  0A4C               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3254                           
  3255                           ;CheckTouchKey.c: 360: {
  3256                           ;CheckTouchKey.c: 361: KeyReference[cnt] = KeyResTemp;
  3257  0147  1003               	clrc
  3258  0148  1D03               	btfss	3,2
  3259  0149  294F               	goto	L7
  3260  014A                     L6:	
  3261  014A  0D4D               	rlf	CheckKeyOldValue@cnt,w
  3262  014B  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  3263  014C  0084               	movwf	4
  3264  014D  2181               	fcall	PL20	;call to abstracted procedure
  3265  014E                     l1128:	
  3266                           
  3267                           ;CheckTouchKey.c: 362: }
  3268                           ;CheckTouchKey.c: 363: }
  3269                           ;CheckTouchKey.c: 364: }
  3270                           ;CheckTouchKey.c: 365: }
  3271                           ;CheckTouchKey.c: 368: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  3272  014E  1003               	clrc
  3273  014F                     L7:	
  3274  014F  0D4D               	rlf	CheckKeyOldValue@cnt,w
  3275  0150  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3276  0151  0084               	movwf	4
  3277  0152  1383               	bcf	3,7	;select IRP bank0
  3278  0153  2179               	fcall	PL14	;call to abstracted procedure
  3279  0154  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3280                           
  3281                           ;CheckTouchKey.c: 369: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  3282  0155  216E               	fcall	PL10	;call to abstracted procedure
  3283  0156  2179               	fcall	PL14	;call to abstracted procedure
  3284  0157  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3285                           
  3286                           ;CheckTouchKey.c: 370: KeyOldValue0[cnt] = KeyResTemp;
  3287  0158  216E               	fcall	PL10	;call to abstracted procedure
  3288  0159  2181               	fcall	PL20	;call to abstracted procedure
  3289  015A  3002               	movlw	2
  3290  015B  0ACD               	incf	CheckKeyOldValue@cnt,f
  3291  015C  024D               	subwf	CheckKeyOldValue@cnt,w
  3292  015D  1803               	btfsc	3,0
  3293  015E  0008               	return
  3294  015F  290F               	goto	l2403
  3295  0160                     __end_of_CheckKeyOldValue:	
  3296  0160                     PL2:	
  3297  0160  0800               	movf	0,w
  3298  0161  00CB               	movwf	CheckKeyOldValue@KeyOldTemp
  3299  0162  0A84               	incf	4,f
  3300  0163  0800               	movf	0,w
  3301  0164  00CC               	movwf	CheckKeyOldValue@KeyOldTemp+1
  3302  0165  0849               	movf	CheckKeyOldValue@KeyResTemp,w
  3303  0166  02CB               	subwf	CheckKeyOldValue@KeyOldTemp,f
  3304  0167  084A               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3305  0168  1C03               	skipc
  3306  0169  03CC               	decf	CheckKeyOldValue@KeyOldTemp+1,f
  3307  016A  02CC               	subwf	CheckKeyOldValue@KeyOldTemp+1,f
  3308  016B  3000               	movlw	0
  3309  016C  024C               	subwf	CheckKeyOldValue@KeyOldTemp+1,w
  3310  016D  3402               	retlw	2
  3311  016E                     __end_ofPL2:	
  3312  016E                     PL10:	
  3313  016E  0084               	movwf	4
  3314  016F  0876               	movf	??_CheckKeyOldValue,w
  3315  0170  0080               	movwf	0
  3316  0171  0A84               	incf	4,f
  3317  0172  0877               	movf	??_CheckKeyOldValue+1,w
  3318  0173  0080               	movwf	0
  3319  0174  1003               	clrc
  3320  0175  0D4D               	rlf	CheckKeyOldValue@cnt,w
  3321  0176  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3322  0177  0084               	movwf	4
  3323  0178  0008               	return
  3324  0179                     __end_ofPL10:	
  3325  0179                     PL14:	
  3326  0179  0800               	movf	0,w
  3327  017A  00F6               	movwf	??_CheckKeyOldValue
  3328  017B  0A84               	incf	4,f
  3329  017C  0800               	movf	0,w
  3330  017D  00F7               	movwf	??_CheckKeyOldValue+1
  3331  017E  1003               	clrc
  3332  017F  0D4D               	rlf	CheckKeyOldValue@cnt,w
  3333  0180  0008               	return
  3334  0181                     __end_ofPL14:	
  3335  0181                     PL20:	
  3336  0181  0849               	movf	CheckKeyOldValue@KeyResTemp,w
  3337  0182  0080               	movwf	0
  3338  0183  0A84               	incf	4,f
  3339  0184  084A               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3340  0185  0080               	movwf	0
  3341  0186  0008               	return
  3342  0187                     __end_ofPL20:	
  3343                           
  3344                           	psect	text28
  3345  034A                     __ptext28:	
  3346 ;; *************** function _KeyIsIn *****************
  3347 ;; Defined at:
  3348 ;;		line 58 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3349 ;; Parameters:    Size  Location     Type
  3350 ;;  cnt             1    wreg     unsigned char 
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;  cnt             1    3[COMMON] unsigned char 
  3353 ;;  i               1    2[COMMON] unsigned char 
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  1    wreg      unsigned char 
  3356 ;; Registers used:
  3357 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 300/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3363 ;;      Params:         0       0       0       0
  3364 ;;      Locals:         2       0       0       0
  3365 ;;      Temps:          0       0       0       0
  3366 ;;      Totals:         2       0       0       0
  3367 ;;Total ram usage:        2 bytes
  3368 ;; Hardware stack levels used:    2
  3369 ;; Hardware stack levels required when called:    1
  3370 ;; This function calls:
  3371 ;;		Nothing
  3372 ;; This function is called by:
  3373 ;;		_KeyClearIn
  3374 ;;		_CheckOnceResult
  3375 ;;		_CheckKeyOldValue
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           
  3380                           ;psect for function _KeyIsIn
  3381  034A                     _KeyIsIn:	
  3382                           
  3383                           ;incstack = 0
  3384                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  3385                           ;KeyIsIn@cnt stored from wreg
  3386  034A  00F5               	movwf	KeyIsIn@cnt
  3387                           
  3388                           ;CheckTouchKey.c: 60: unsigned char i = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  3389  034B  3907               	andlw	7
  3390  034C  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  3391  034D  0084               	movwf	4
  3392  034E  2310               	fcall	stringdir
  3393  034F  00F4               	movwf	KeyIsIn@i
  3394                           
  3395                           ;CheckTouchKey.c: 62: if(cnt&0x8)
  3396  0350  1DF5               	btfss	KeyIsIn@cnt,3
  3397  0351  2B56               	goto	l2133
  3398                           
  3399                           ;CheckTouchKey.c: 63: {
  3400                           ;CheckTouchKey.c: 64: i &= KeyFlag[1];
  3401  0352  1283               	bcf	3,5	;RP0=0, select bank0
  3402  0353  1303               	bcf	3,6	;RP1=0, select bank0
  3403  0354  083F               	movf	_KeyFlag+1,w	;volatile
  3404  0355  2B59               	goto	L8
  3405  0356                     l2133:	
  3406                           ;CheckTouchKey.c: 65: }
  3407                           
  3408                           
  3409                           ;CheckTouchKey.c: 66: else
  3410                           ;CheckTouchKey.c: 67: {
  3411                           ;CheckTouchKey.c: 68: i &= KeyFlag[0];
  3412  0356  1283               	bcf	3,5	;RP0=0, select bank0
  3413  0357  1303               	bcf	3,6	;RP1=0, select bank0
  3414  0358  083E               	movf	_KeyFlag,w	;volatile
  3415  0359                     L8:	
  3416  0359  05F4               	andwf	KeyIsIn@i,f
  3417                           
  3418                           ;CheckTouchKey.c: 69: }
  3419                           ;CheckTouchKey.c: 70: return i;
  3420  035A  0874               	movf	KeyIsIn@i,w
  3421  035B  0008               	return
  3422  035C                     __end_of_KeyIsIn:	
  3423                           
  3424                           	psect	text29
  3425  0273                     __ptext29:	
  3426 ;; *************** function _Isr_Timer *****************
  3427 ;; Defined at:
  3428 ;;		line 247 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;		None
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;		None
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  1    wreg      void 
  3435 ;; Registers used:
  3436 ;;		wreg, status,2, status,0
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 300/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3442 ;;      Params:         0       0       0       0
  3443 ;;      Locals:         0       0       0       0
  3444 ;;      Temps:          2       0       0       0
  3445 ;;      Totals:         2       0       0       0
  3446 ;;Total ram usage:        2 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; This function calls:
  3449 ;;		Nothing
  3450 ;; This function is called by:
  3451 ;;		Interrupt level 1
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           
  3456                           ;psect for function _Isr_Timer
  3457  0273                     _Isr_Timer:	
  3458                           
  3459                           ;main.c: 249: if(TMR2IF)
  3460  0273  1283               	bcf	3,5	;RP0=0, select bank0
  3461  0274  1303               	bcf	3,6	;RP1=0, select bank0
  3462  0275  1C8C               	btfss	12,1	;volatile
  3463  0276  2A8E               	goto	i1l2603
  3464                           
  3465                           ;main.c: 250: {
  3466                           ;main.c: 251: TMR2IF = 0;
  3467  0277  108C               	bcf	12,1	;volatile
  3468                           
  3469                           ;main.c: 253: if(++MainTime >= 32)
  3470  0278  3020               	movlw	32
  3471  0279  0AC8               	incf	_MainTime,f	;volatile
  3472  027A  0248               	subwf	_MainTime,w	;volatile
  3473  027B  1C03               	skipc
  3474  027C  2A7F               	goto	i1l2593
  3475                           
  3476                           ;main.c: 254: {
  3477                           ;main.c: 255: MainTime = 0;
  3478  027D  01C8               	clrf	_MainTime	;volatile
  3479                           
  3480                           ;main.c: 256: B_MainLoop = 1;
  3481  027E  1471               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  3482  027F                     i1l2593:	
  3483                           
  3484                           ;main.c: 257: }
  3485                           ;main.c: 259: if(pwmTime < 12 && sendFlag)
  3486  027F  300C               	movlw	12
  3487  0280  0279               	subwf	_pwmTime,w	;volatile
  3488  0281  1C03               	btfss	3,0
  3489  0282  1C78               	btfss	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
  3490  0283  2A86               	goto	i1l546
  3491                           
  3492                           ;main.c: 260: PORTA&=~(1<<3);
  3493  0284  1185               	bcf	5,3	;volatile
  3494  0285  2A87               	goto	i1l2599
  3495  0286                     i1l546:	
  3496                           
  3497                           ;main.c: 261: else
  3498                           ;main.c: 262: PORTA|=(1<<3);
  3499  0286  1585               	bsf	5,3	;volatile
  3500  0287                     i1l2599:	
  3501                           
  3502                           ;main.c: 263: if(++pwmTime >= 44)
  3503  0287  302C               	movlw	44
  3504  0288  0AF9               	incf	_pwmTime,f	;volatile
  3505  0289  0279               	subwf	_pwmTime,w	;volatile
  3506  028A  1C03               	skipc
  3507  028B  2A8F               	goto	i1l550
  3508                           
  3509                           ;main.c: 264: {
  3510                           ;main.c: 265: pwmTime = 0;
  3511  028C  01F9               	clrf	_pwmTime	;volatile
  3512  028D  2A8F               	goto	i1l550
  3513  028E                     i1l2603:	
  3514                           
  3515                           ;main.c: 268: else
  3516                           ;main.c: 269: {
  3517                           ;main.c: 270: PIR1 = 0;
  3518  028E  018C               	clrf	12	;volatile
  3519  028F                     i1l550:	
  3520  028F  0873               	movf	??_Isr_Timer+1,w
  3521  0290  008A               	movwf	10
  3522  0291  0E72               	swapf	??_Isr_Timer^(0+-128),w
  3523  0292  0083               	movwf	3
  3524  0293  0EFE               	swapf	126,f
  3525  0294  0E7E               	swapf	126,w
  3526  0295  0009               	retfie
  3527  0296                     __end_of_Isr_Timer:	
  3528  007E                     btemp	set	126	;btemp
  3529  007E                     wtemp0	set	126
  3530                           
  3531                           	psect	intentry
  3532  0004                     __pintentry:	
  3533                           ;incstack = 0
  3534                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  3535                           
  3536  0004                     interrupt_function:	
  3537  007E                     saved_w	set	btemp
  3538  0004  00FE               	movwf	btemp
  3539  0005  0E03               	swapf	3,w
  3540  0006  00F2               	movwf	??_Isr_Timer
  3541  0007  080A               	movf	10,w
  3542  0008  00F3               	movwf	??_Isr_Timer+1
  3543  0009  2A73               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    14
    Data        2
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     13      56
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _CheckTouchKey->_CheckKeyOldValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3191
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                         _checkIRKey
                           _startPWM
 ---------------------------------------------------------------------------------
 (1) _startPWM                                             0     0      0       0
                           _procKey1
                           _procKey2
 ---------------------------------------------------------------------------------
 (1) _checkIRKey                                           1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            2     2      0      89
                                              2 COMMON     2     2      0
                           _procKey1
                           _procKey2
 ---------------------------------------------------------------------------------
 (2) _procKey2                                             0     0      0       0
                            _mode1_a
                            _mode1_b
                            _mode1_c
                            _mode1_d
                            _mode1_e
 ---------------------------------------------------------------------------------
 (3) _mode1_e                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode1_d                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode1_c                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode1_b                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode1_a                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _procKey1                                             0     0      0       0
                            _mode2_a
                            _mode3_a
                            _mode4_a
                            _mode5_a
 ---------------------------------------------------------------------------------
 (3) _mode5_a                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode4_a                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode3_a                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode2_a                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3102
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _GetTouchKeyValue                                     2     2      0     157
                                              3 COMMON     2     2      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (3) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1892
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     304
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (4) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
     _procKey1
       _mode2_a
       _mode3_a
       _mode4_a
       _mode5_a
     _procKey2
       _mode1_a
       _mode1_b
       _mode1_c
       _mode1_d
       _mode1_e
   _Refurbish_Sfr
   _checkIRKey
   _startPWM
     _procKey1
       _mode2_a
       _mode3_a
       _mode4_a
       _mode5_a
     _procKey2
       _mode1_a
       _mode1_b
       _mode1_c
       _mode1_d
       _mode1_e

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK2               50      0       0       9        0.0%
BITBANK2            50      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      D      38       3       70.0%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       3       0       21.4%
CODE                 0      0       0       0        0.0%
DATA                 0      0      42      10        0.0%
ABS                  0      0      42       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jul 02 01:06:23 2020

                KeyIsIn@cnt 0075                  KeyHave@cnt 0076                 KeyHave@flag 0074  
                         pc 0002                          PL2 0160                          PL4 00ED  
                        PL6 00FF                          PL8 03B1               ??_KeyClearOne 0074  
     __size_of_TurnKeyFlags 002F                          fsr 0004            ??_CheckValidTime 0074  
                       PL10 016E                         PL20 0181                         PL12 0330  
                       PL14 0179                         PL16 02E0                         PL18 039A  
                       l520 019D                         l523 019F                         l532 01E0  
                       l525 01A5                         l534 01DC                         l557 02F5  
                       l495 02CC                         _PR2 0091                         fsr0 0004  
                       indf 0000         CheckOnceResult@flag 004F           ?_GetTouchKeyValue 0072  
                      S2847 03BE    __end_of_Table_KeyChannel 0324                  KeyServer@i 0074  
        ??_GetTouchKeyValue 0075                        l1128 014E                        l1146 020A  
                      l2211 03C7                        l2133 0356                        l2301 0300  
                      l1165 0259                        l2141 03D3                        l2205 0396  
                      l1086 021F                        l2231 036D                        l1087 022F  
                      l2223 037D                        l2151 03D1                        l2233 036E  
                      l2217 037C                        l2161 03AF                        l2403 010F  
                      l2323 0237                        l2227 0384                        l2171 03A7  
                      l2261 02C9                        l2253 02B2                        l2247 0393  
                      l2263 02CA                        l2271 0296                        l2265 02CB  
                      l2281 02AF                        l2521 01CB                        l2259 02C8  
                      l2179 03CF                        l2283 02B0                        l2507 01A7  
                      l2461 0211                        l2269 02BA                        l2189 03B7  
                      l2285 02B1                        l2277 02AD                        l2509 01BD  
                      l2533 01DD                        l2541 01E6                        l2199 03CB  
                      l2279 02AE                        l2713 00A3                        l2289 029E  
                      l2731 00D8                        l2707 009B                        l2475 0347  
                      l2469 0338                        l2493 019B                        l2735 00DC  
                      l2727 00CD                        l2495 019C                        l2737 00E0  
                      l2739 00E5                        l2675 001E                        l2693 006E  
                      l2845 01AC                        l2781 02E8                        l2767 026A  
                      l2759 0266                        l2775 0272                        l2769 026E  
                      u1105 0194                        u1425 00BB                        u1355 0029  
                      u1375 0060                        u1385 0074                        u1395 007F  
                      _PIE1 000D                        _PIR1 000C                        _main 02E6  
                      btemp 007E               ?_KeyStopClear 0072                        start 000A  
              _TurnKeyFlags 01EF             __end_of_KeyIsIn 035C             __end_of_KeyHave 0396  
CheckKeyOldValue@KeyOldTemp 004B               ??_Init_System 0074  CheckKeyOldValue@KeyResTemp 0049  
                     ?_main 0072                       _T2CON 0012                       i1l550 028F  
                     i1l546 0286                       _PORTA 0005                       _PORTB 0006  
                     _TRISA 0085                       _TRISB 0086                       _PWMTH 0016  
       __end_of_KeyClearOne 02E0             __end_of_mode1_a 03D1             __end_of_mode1_b 03BE  
           __end_of_mode1_c 03CF             __end_of_mode1_d 039A             __end_of_mode2_a 03D5  
           __end_of_mode1_e 03CB             __end_of_mode3_a 03D3             __end_of_mode4_a 03B1  
           __end_of_mode5_a 03AF                  _KeyClearIn 037C              __pbitbssCOMMON 0380  
                     pclath 000A                 _ClearResSum 036D                  _KeyCounter 0044  
                _KeyOldData 0038              ??_KeyStopClear 0075                       status 0003  
                     wtemp0 007E                  _KeyUpShake 003C             __initialization 000B  
              __end_of_main 02FB                      ??_main 0078         __end_of_Init_System 036D  
                    i1l2603 028E                      i1l2593 027F                      i1l2599 0287  
                    _INTCON 000B          __size_of_KeyServer 0039                      _OSCCON 0088  
                    _TMR2IF 0061                      _PWMD0L 0017                      _PWMD1L 0018  
                    _ONFlag 0385                   ??_KeyIsIn 0074                   ??_KeyHave 0076  
        __size_of_Isr_Timer 0023   CheckOnceResult@KeyResTemp 0053      CheckOnceResult@KeyDown 0052  
 __size_of_CheckKeyOldValue 005A                      _b_kclr 0381                      _b_kerr 0380  
                    _irStep 0047                 _KeyClearOne 02CD                   ??_mode1_a 0074  
                 ??_mode1_b 0074                   ??_mode1_c 0074                   ??_mode1_d 0074  
                 ??_mode1_e 0074                   ??_mode2_a 0074                   ??_mode3_a 0074  
                 ??_mode4_a 0074                   ??_mode5_a 0074               _Table_KeyFalg 0316  
             _Table_KeyDown 031E            __end_of_procKey1 02CD            __end_of_procKey2 02B2  
                    saved_w 007E      __size_of_CheckTouchKey 0026            __end_of_startPWM 03C7  
               ?_KeyClearIn 0072             _CheckOnceResult 0018     __end_of__initialization 0016  
            __pcstackCOMMON 0072                __pidataBANK0 0000                 _Init_System 035C  
                __end_ofPL2 016E                  __end_ofPL4 00FF                  __end_ofPL6 0106  
                __end_ofPL8 03B7           __end_of_KeyServer 01C0        __end_of_KeyStopClear 0310  
         __end_of_Isr_Timer 0296             _doublePressFlag 0386                  _checkIRKey 01C0  
                _checkCount 0045                  __pbssBANK0 0020   __size_of_GetTouchKeyValue 002F  
             _CheckTouchKey 024D                  __pmaintext 02E6                  __pintentry 0004  
       __size_of_KeyClearIn 000E     __end_of_CheckOnceResult 00ED                     _KEYCON0 0092  
                   _KEYCON1 0093               KeyStopClear@i 0075      __size_of_Refurbish_Sfr 000C  
                   _PWMCON0 0013        __end_of_Table_KeyCap 0322                  __stringtab 0310  
              ?_ClearResSum 0072                     _KeyData 0036                     _KeyFlag 003E  
                   _KeyIsIn 034A                     _KeyHave 038A              ClearResSum@cnt 0074  
            ?_CheckTouchKey 0072                   ?_procKey1 0072                   ?_procKey2 0072  
   CheckOnceResult@KeyValue 0050            _CheckKeyOldValue 0106     CheckOnceResult@OldValue 004D  
                 ?_startPWM 0072      TurnKeyFlags@KeyNoTimes 0040        GetTouchKeyValue@temp 0075  
                   _b_kover 0383                     __ptext1 03C3                     __ptext2 01C0  
                   __ptext3 0324                     __ptext4 0187                     __ptext5 0296  
                   __ptext6 03C7                     __ptext7 0396                     __ptext8 03CB  
                   __ptext9 03B7                     _mode1_a 03CF                     _mode1_b 03B7  
                   _mode1_c 03CB                     _mode1_d 0396                     _mode2_a 03D3  
                   _mode1_e 03C7                     _mode3_a 03D1                     _mode4_a 03AF  
                   _mode5_a 03A7                     _pwmFlag 0384                 ?_checkIRKey 0072  
                   _pwmTime 0079     __size_of_CheckValidTime 0012                     clrloop0 03A0  
      end_of_initialization 0016                  ??_procKey1 0074                  ??_procKey2 0074  
             _Refurbish_Sfr 0324                _KeyOldValue0 002C                _KeyOldValue1 0028  
              _KeyOldValue2 0024       __size_of_KeyStopClear 0015                  ??_startPWM 0074  
              ?_KeyClearOne 0072                _KeyReference 0020            ?_CheckOnceResult 0072  
              ??_KeyClearIn 0076          CheckOnceResult@cnt 0055             ??_CheckTouchKey 0078  
              _KeyStopClear 02FB            _GetTouchKeyValue 021E              ?_Refurbish_Sfr 0072  
       __size_of_checkIRKey 002F                ?_Init_System 0072          __end_of_KeyClearIn 038A  
                 _KeyMaxSub 0043                   _KeyResSum 0030                 __end_ofPL10 0179  
               __end_ofPL20 0187                 __end_ofPL12 0338                 __end_ofPL14 0181  
               __end_ofPL16 02E6                 __end_ofPL18 039F               __pbitnvCOMMON 03C0  
       start_initialization 000B                   _KeyServer 0187                   _Isr_Timer 0273  
      __size_of_ClearResSum 000F               _sendStartFlag 0387               ?_TurnKeyFlags 0072  
  TurnKeyFlags@KeyHaveTimes 0041                 __pdataBANK0 0056                _Table_KeyCap 0320  
               __pbssCOMMON 0079                  ?_KeyServer 0072                   ___latbits 0000  
             __pcstackBANK0 0049              _CheckValidTime 0338    __end_of_CheckKeyOldValue 0160  
                ?_Isr_Timer 0072         KeyServer@KeyOldFlag 003A                    ?_KeyIsIn 0072  
                  ?_KeyHave 0074             ??_Refurbish_Sfr 0074              ??_TurnKeyFlags 0077  
         __size_of_procKey1 001B           __size_of_procKey2 001C                   __pstrings 0310  
         __size_of_startPWM 0004                   __pswtext1 03BE        __size_of_KeyClearOne 0013  
                  ?_mode1_a 0072                    ?_mode1_b 0072                    ?_mode1_c 0072  
                  ?_mode1_d 0072                    ?_mode1_e 0072                    ?_mode2_a 0072  
                  ?_mode3_a 0072                    ?_mode4_a 0072                    ?_mode5_a 0072  
    __end_of_CheckValidTime 034A                ??_checkIRKey 0074         GetTouchKeyValue@cnt 0076  
                  _KEYDATAH 0095                    _KEYDATAL 0094           interrupt_function 0004  
                 clear_ram0 039F         CheckKeyOldValue@cnt 004D          __end_of_checkIRKey 01EF  
                  KeyIsIn@i 0074                 __stringbase 0315        __size_of_Init_System 0011  
     __end_of_Table_KeyFalg 031E       __end_of_Table_KeyDown 0320    __end_of_GetTouchKeyValue 024D  
           ?_CheckValidTime 0072                 ??_KeyServer 0074                 ??_Isr_Timer 0072  
                  _MainTime 0048            __size_of_KeyIsIn 0012            __size_of_KeyHave 000C  
          _Table_KeyChannel 0322          __end_of__stringtab 0316                    _b_kover1 0382  
      __end_of_TurnKeyFlags 021E            __size_of_mode1_a 0002            __size_of_mode1_b 0007  
          __size_of_mode1_c 0004            __size_of_mode1_d 0004            __size_of_mode2_a 0002  
          __size_of_mode1_e 0004            __size_of_mode3_a 0002            __size_of_mode4_a 0002  
          __size_of_mode5_a 0008     CheckValidTime@validtime 0034                    __ptext10 03CF  
                  __ptext11 02B2                    __ptext20 02FB                    __ptext12 03A7  
                  __ptext21 021E                    __ptext13 03AF                    __ptext22 036D  
                  __ptext14 03D1                    __ptext23 0338                    __ptext15 03D3  
                  __ptext24 0018                    __ptext16 035C                    __ptext25 038A  
                  __ptext17 024D                    __ptext26 02CD                    __ptext18 01EF  
                  __ptext27 0106                    __ptext19 037C                    __ptext28 034A  
                  __ptext29 0273    __size_of_CheckOnceResult 00D5               __size_of_main 0015  
                  _sendFlag 03C0                    _revCount 0046                    _pwm0Step 0057  
                  _pwm1Step 0056       __end_of_CheckTouchKey 0273                    _procKey1 02B2  
                  _procKey2 0296                    _startPWM 03C3     CheckKeyOldValue@counter 0042  
         ?_CheckKeyOldValue 0072                    intlevel1 0000               ??_ClearResSum 0074  
        ??_CheckKeyOldValue 0076                   stringcode 0310                  _B_MainLoop 0388  
                _OPTION_REG 0081                    stringdir 0310                    stringtab 0310  
            KeyClearOne@cnt 0074               KeyClearIn@cnt 0076       __end_of_Refurbish_Sfr 0330  
       __end_of_ClearResSum 037C           ??_CheckOnceResult 0049  
