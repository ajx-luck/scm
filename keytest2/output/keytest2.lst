

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sun Aug 02 15:32:02 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F2852
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	bitnvCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	swtext1,local,class=CONST,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	pa_nodes0,global,class=CODE,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC16F887 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataBANK0
    86  0000                     __pidataBANK0:	
    87                           
    88                           	psect	strings
    89  0300                     __pstrings:	
    90  0300                     stringtab:	
    91  0300                     __stringtab:	
    92  0300                     stringcode:	
    93                           ;	String table - string pointers are 1 byte each
    94                           
    95  0300                     stringdir:	
    96  0300  3003               	movlw	high stringdir
    97  0301  008A               	movwf	10
    98  0302  0804               	movf	4,w
    99  0303  0A84               	incf	4,f
   100  0304  0782               	addwf	2,f
   101  0305                     __stringbase:	
   102  0305  3400               	retlw	0
   103  0306                     __end_of__stringtab:	
   104  0306                     _Table_KeyFalg:	
   105  0306  3401               	retlw	1
   106  0307  3402               	retlw	2
   107  0308  3404               	retlw	4
   108  0309  3408               	retlw	8
   109  030A  3410               	retlw	16
   110  030B  3420               	retlw	32
   111  030C  3440               	retlw	64
   112  030D  3480               	retlw	128
   113  030E                     __end_of_Table_KeyFalg:	
   114  030E                     _Table_KeyDown:	
   115  030E  340A               	retlw	10
   116  030F  340A               	retlw	10
   117  0310                     __end_of_Table_KeyDown:	
   118  0310                     _Table_KeyCap:	
   119  0310  3402               	retlw	2
   120  0311  3402               	retlw	2
   121  0312                     __end_of_Table_KeyCap:	
   122  0312                     _Table_KeyChannel:	
   123  0312  3460               	retlw	96
   124  0313  3461               	retlw	97
   125  0314                     __end_of_Table_KeyChannel:	
   126                           
   127                           	psect	bitnvCOMMON
   128  03C0                     __pbitnvCOMMON:	
   129  03C0                     _sendFlag:	
   130  03C0                     	ds	1
   131  001D                     _PWMCON2	set	29
   132  001C                     _PWMD01H	set	28
   133  0018                     _PWMD1L	set	24
   134  0017                     _PWMD0L	set	23
   135  0016                     _PWMTH	set	22
   136  0015                     _PWMTL	set	21
   137  0014                     _PWMCON1	set	20
   138  0013                     _PWMCON0	set	19
   139  0012                     _T2CON	set	18
   140  000D                     _PIE1	set	13
   141  000C                     _PIR1	set	12
   142  000B                     _INTCON	set	11
   143  0006                     _PORTB	set	6
   144  0005                     _PORTA	set	5
   145  0061                     _TMR2IF	set	97
   146  0095                     _KEYDATAH	set	149
   147  0094                     _KEYDATAL	set	148
   148  0093                     _KEYCON1	set	147
   149  0092                     _KEYCON0	set	146
   150  0091                     _PR2	set	145
   151  0088                     _OSCCON	set	136
   152  0086                     _TRISB	set	134
   153  0085                     _TRISA	set	133
   154  0081                     _OPTION_REG	set	129
   155                           
   156                           	psect	cinit
   157  000B                     start_initialization:	
   158                           ; #config settings
   159                           
   160  000B                     __initialization:	
   161                           
   162                           ;initializer for _pwm1Step
   163  000B  3001               	movlw	1
   164  000C  00D4               	movwf	__pdataBANK0& (0+127)
   165                           
   166                           ;initializer for _pwm0Step
   167  000D  00D5               	movwf	(__pdataBANK0+1)& (0+127)
   168  000E  3020               	movlw	low __pbssBANK0
   169                           
   170                           ; Clear objects allocated to BANK0
   171  000F  1383               	bcf	3,7	;select IRP bank0
   172  0010  0084               	movwf	4
   173  0011  3047               	movlw	low (__pbssBANK0+39)
   174  0012  2389               	fcall	clear_ram0
   175                           
   176                           ; Clear objects allocated to COMMON
   177  0013  01F9               	clrf	__pbssCOMMON& (0+127)
   178                           
   179                           ; Clear objects allocated to BITCOMMON
   180  0014  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   181  0015  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   182  0016                     end_of_initialization:	
   183                           ;End of C runtime variable initialization code
   184                           
   185  0016                     __end_of__initialization:	
   186  0016  0183               	clrf	3
   187  0017  2ABA               	ljmp	_main	;jump to C main() function
   188                           
   189                           	psect	bitbssCOMMON
   190  0380                     __pbitbssCOMMON:	
   191  0380                     _b_kerr:	
   192  0380                     	ds	1
   193  0381                     _b_kclr:	
   194  0381                     	ds	1
   195  0382                     _b_kover1:	
   196  0382                     	ds	1
   197  0383                     _b_kover:	
   198  0383                     	ds	1
   199  0384                     _doubleTouchFlag:	
   200  0384                     	ds	1
   201  0385                     _keyLockFlag:	
   202  0385                     	ds	1
   203  0386                     _pwmFlag:	
   204  0386                     	ds	1
   205  0387                     _ONFlag:	
   206  0387                     	ds	1
   207  0388                     _doublePressFlag:	
   208  0388                     	ds	1
   209  0389                     _sendStartFlag:	
   210  0389                     	ds	1
   211  038A                     _B_MainLoop:	
   212  038A                     	ds	1
   213                           
   214                           	psect	bssCOMMON
   215  0079                     __pbssCOMMON:	
   216  0079                     _pwmTime:	
   217  0079                     	ds	1
   218                           
   219                           	psect	bssBANK0
   220  0020                     __pbssBANK0:	
   221  0020                     _KeyReference:	
   222  0020                     	ds	4
   223  0024                     _KeyOldValue2:	
   224  0024                     	ds	4
   225  0028                     _KeyOldValue1:	
   226  0028                     	ds	4
   227  002C                     _KeyOldValue0:	
   228  002C                     	ds	4
   229  0030                     _KeyResSum:	
   230  0030                     	ds	4
   231  0034                     CheckValidTime@validtime:	
   232  0034                     	ds	2
   233  0036                     _KeyData:	
   234  0036                     	ds	2
   235  0038                     _KeyOldData:	
   236  0038                     	ds	2
   237  003A                     KeyServer@KeyOldFlag:	
   238  003A                     	ds	2
   239  003C                     _KeyUpShake:	
   240  003C                     	ds	2
   241  003E                     _KeyFlag:	
   242  003E                     	ds	2
   243  0040                     TurnKeyFlags@KeyNoTimes:	
   244  0040                     	ds	1
   245  0041                     TurnKeyFlags@KeyHaveTimes:	
   246  0041                     	ds	1
   247  0042                     CheckKeyOldValue@counter:	
   248  0042                     	ds	1
   249  0043                     _KeyMaxSub:	
   250  0043                     	ds	1
   251  0044                     _KeyCounter:	
   252  0044                     	ds	1
   253  0045                     _irStep:	
   254  0045                     	ds	1
   255  0046                     _MainTime:	
   256  0046                     	ds	1
   257                           
   258                           	psect	dataBANK0
   259  0054                     __pdataBANK0:	
   260  0054                     _pwm1Step:	
   261  0054                     	ds	1
   262  0055                     _pwm0Step:	
   263  0055                     	ds	1
   264                           
   265                           	psect	clrtext
   266  0389                     clear_ram0:	
   267                           ;	Called with FSR containing the base address, and
   268                           ;	W with the last address+1
   269                           
   270  0389  0064               	clrwdt	;clear the watchdog before getting into this loop
   271  038A                     clrloop0:	
   272  038A  0180               	clrf	0	;clear RAM location pointed to by FSR
   273  038B  0A84               	incf	4,f	;increment pointer
   274  038C  0604               	xorwf	4,w	;XOR with final address
   275  038D  1903               	btfsc	3,2	;have we reached the end yet?
   276  038E  3400               	retlw	0	;all done for this memory range, return
   277  038F  0604               	xorwf	4,w	;XOR again to restore value
   278  0390  2B8A               	goto	clrloop0	;do the next byte
   279                           
   280                           	psect	cstackCOMMON
   281  0072                     __pcstackCOMMON:	
   282  0072                     ?_mode2_a:	
   283  0072                     ?_mode3_a:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0072                     ?_mode4_a:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0072                     ?_mode5_a:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0072                     ?_mode1_a:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0072                     ?_mode1_b:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0072                     ?_mode1_c:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0072                     ?_mode1_d:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0072                     ?_mode1_e:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0072                     ?_initPWM:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0072                     ?_CheckTouchKey:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0072                     ?_Init_System:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0072                     ?_Refurbish_Sfr:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0072                     ?_procKey1:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0072                     ?_procKey2:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0072                     ?_startPWM:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0072                     ?_KeyServer:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0072                     ?_Isr_Timer:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0072                     ??_Isr_Timer:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0072                     ?_main:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0072                     ?_KeyIsIn:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0072                     ?_KeyClearOne:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0072                     ?_KeyClearIn:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0072                     ?_KeyStopClear:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0072                     ?_ClearResSum:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0072                     ?_GetTouchKeyValue:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0072                     ?_CheckOnceResult:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0072                     ?_CheckKeyOldValue:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0072                     ?_TurnKeyFlags:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0072                     ?_CheckValidTime:	
   368                           ; 1 bytes @ 0x0
   369                           
   370                           
   371                           ; 1 bytes @ 0x0
   372  0072                     	ds	2
   373  0074                     ??_mode2_a:	
   374  0074                     ??_mode3_a:	
   375                           ; 1 bytes @ 0x2
   376                           
   377  0074                     ??_mode4_a:	
   378                           ; 1 bytes @ 0x2
   379                           
   380  0074                     ??_mode5_a:	
   381                           ; 1 bytes @ 0x2
   382                           
   383  0074                     ??_mode1_a:	
   384                           ; 1 bytes @ 0x2
   385                           
   386  0074                     ??_mode1_b:	
   387                           ; 1 bytes @ 0x2
   388                           
   389  0074                     ??_mode1_c:	
   390                           ; 1 bytes @ 0x2
   391                           
   392  0074                     ??_mode1_d:	
   393                           ; 1 bytes @ 0x2
   394                           
   395  0074                     ??_mode1_e:	
   396                           ; 1 bytes @ 0x2
   397                           
   398  0074                     ??_initPWM:	
   399                           ; 1 bytes @ 0x2
   400                           
   401  0074                     ??_Init_System:	
   402                           ; 1 bytes @ 0x2
   403                           
   404  0074                     ??_Refurbish_Sfr:	
   405                           ; 1 bytes @ 0x2
   406                           
   407  0074                     ??_procKey1:	
   408                           ; 1 bytes @ 0x2
   409                           
   410  0074                     ??_procKey2:	
   411                           ; 1 bytes @ 0x2
   412                           
   413  0074                     ??_startPWM:	
   414                           ; 1 bytes @ 0x2
   415                           
   416  0074                     ??_KeyServer:	
   417                           ; 1 bytes @ 0x2
   418                           
   419  0074                     ??_KeyIsIn:	
   420                           ; 1 bytes @ 0x2
   421                           
   422  0074                     ??_KeyClearOne:	
   423                           ; 1 bytes @ 0x2
   424                           
   425  0074                     ??_ClearResSum:	
   426                           ; 1 bytes @ 0x2
   427                           
   428  0074                     ?_KeyHave:	
   429                           ; 1 bytes @ 0x2
   430                           
   431  0074                     ??_CheckValidTime:	
   432                           ; 1 bytes @ 0x2
   433                           
   434  0074                     KeyIsIn@i:	
   435                           ; 1 bytes @ 0x2
   436                           
   437  0074                     KeyClearOne@cnt:	
   438                           ; 1 bytes @ 0x2
   439                           
   440  0074                     ClearResSum@cnt:	
   441                           ; 1 bytes @ 0x2
   442                           
   443  0074                     KeyServer@i:	
   444                           ; 1 bytes @ 0x2
   445                           
   446  0074                     KeyHave@flag:	
   447                           ; 2 bytes @ 0x2
   448                           
   449                           
   450                           ; 2 bytes @ 0x2
   451  0074                     	ds	1
   452  0075                     ??_KeyStopClear:	
   453  0075                     ??_GetTouchKeyValue:	
   454                           ; 1 bytes @ 0x3
   455                           
   456  0075                     KeyIsIn@cnt:	
   457                           ; 1 bytes @ 0x3
   458                           
   459  0075                     KeyStopClear@i:	
   460                           ; 1 bytes @ 0x3
   461                           
   462  0075                     GetTouchKeyValue@temp:	
   463                           ; 1 bytes @ 0x3
   464                           
   465                           
   466                           ; 1 bytes @ 0x3
   467  0075                     	ds	1
   468  0076                     ??_KeyClearIn:	
   469  0076                     ??_KeyHave:	
   470                           ; 1 bytes @ 0x4
   471                           
   472  0076                     ??_CheckKeyOldValue:	
   473                           ; 1 bytes @ 0x4
   474                           
   475  0076                     KeyClearIn@cnt:	
   476                           ; 1 bytes @ 0x4
   477                           
   478  0076                     KeyHave@cnt:	
   479                           ; 1 bytes @ 0x4
   480                           
   481  0076                     GetTouchKeyValue@cnt:	
   482                           ; 1 bytes @ 0x4
   483                           
   484                           
   485                           ; 1 bytes @ 0x4
   486  0076                     	ds	1
   487  0077                     ??_TurnKeyFlags:	
   488                           
   489                           ; 1 bytes @ 0x5
   490  0077                     	ds	1
   491  0078                     ??_CheckTouchKey:	
   492  0078                     ??_main:	
   493                           ; 1 bytes @ 0x6
   494                           
   495                           
   496                           	psect	cstackBANK0
   497  0047                     __pcstackBANK0:	
   498                           ; 1 bytes @ 0x6
   499                           
   500  0047                     ??_CheckOnceResult:	
   501  0047                     CheckKeyOldValue@KeyResTemp:	
   502                           ; 1 bytes @ 0x0
   503                           
   504                           
   505                           ; 2 bytes @ 0x0
   506  0047                     	ds	2
   507  0049                     CheckKeyOldValue@KeyOldTemp:	
   508                           
   509                           ; 2 bytes @ 0x2
   510  0049                     	ds	2
   511  004B                     CheckKeyOldValue@cnt:	
   512  004B                     CheckOnceResult@OldValue:	
   513                           ; 1 bytes @ 0x4
   514                           
   515                           
   516                           ; 2 bytes @ 0x4
   517  004B                     	ds	2
   518  004D                     CheckOnceResult@flag:	
   519                           
   520                           ; 1 bytes @ 0x6
   521  004D                     	ds	1
   522  004E                     CheckOnceResult@KeyValue:	
   523                           
   524                           ; 2 bytes @ 0x7
   525  004E                     	ds	2
   526  0050                     CheckOnceResult@KeyDown:	
   527                           
   528                           ; 1 bytes @ 0x9
   529  0050                     	ds	1
   530  0051                     CheckOnceResult@KeyResTemp:	
   531                           
   532                           ; 2 bytes @ 0xA
   533  0051                     	ds	2
   534  0053                     CheckOnceResult@cnt:	
   535                           
   536                           ; 1 bytes @ 0xC
   537  0053                     	ds	1
   538                           
   539                           	psect	maintext
   540  02BA                     __pmaintext:	
   541 ;;
   542 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   543 ;;
   544 ;; *************** function _main *****************
   545 ;; Defined at:
   546 ;;		line 288 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
   547 ;; Parameters:    Size  Location     Type
   548 ;;		None
   549 ;; Auto vars:     Size  Location     Type
   550 ;;		None
   551 ;; Return value:  Size  Location     Type
   552 ;;                  1    wreg      void 
   553 ;; Registers used:
   554 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   555 ;; Tracked objects:
   556 ;;		On entry : B00/0
   557 ;;		On exit  : 300/0
   558 ;;		Unchanged: 0/0
   559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   560 ;;      Params:         0       0       0       0
   561 ;;      Locals:         0       0       0       0
   562 ;;      Temps:          0       0       0       0
   563 ;;      Totals:         0       0       0       0
   564 ;;Total ram usage:        0 bytes
   565 ;; Hardware stack levels required when called:    6
   566 ;; This function calls:
   567 ;;		_CheckTouchKey
   568 ;;		_Init_System
   569 ;;		_KeyServer
   570 ;;		_Refurbish_Sfr
   571 ;;		_initPWM
   572 ;;		_startPWM
   573 ;; This function is called by:
   574 ;;		Startup code after reset
   575 ;; This function uses a non-reentrant model
   576 ;;
   577                           
   578                           
   579                           ;psect for function _main
   580  02BA                     _main:	
   581                           
   582                           ;main.c: 290: Init_System();
   583                           
   584                           ;incstack = 0
   585                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   586  02BA  2338               	fcall	_Init_System
   587                           
   588                           ;main.c: 291: sendFlag = 1;
   589  02BB  1478               	bsf	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
   590                           
   591                           ;main.c: 292: initPWM();
   592  02BC  2358               	fcall	_initPWM
   593  02BD                     l2744:	
   594                           
   595                           ;main.c: 295: {
   596                           ;main.c: 296: if(B_MainLoop)
   597  02BD  1D71               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   598  02BE  2ABD               	goto	l2744
   599                           
   600                           ;main.c: 297: {
   601                           ;main.c: 298: B_MainLoop = 0;
   602  02BF  1171               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   603  02C0  0064               	clrwdt	;# 
   604                           
   605                           ;main.c: 300: Refurbish_Sfr();
   606  02C1  22CF               	fcall	_Refurbish_Sfr
   607                           
   608                           ;main.c: 301: CheckTouchKey();
   609  02C2  221F               	fcall	_CheckTouchKey
   610                           
   611                           ;main.c: 302: KeyServer();
   612  02C3  2183               	fcall	_KeyServer
   613                           
   614                           ;main.c: 304: if(ONFlag && pwmFlag == 0)
   615  02C4  1BF0               	btfsc	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   616  02C5  1B70               	btfsc	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
   617  02C6  2AC9               	goto	l562
   618                           
   619                           ;main.c: 305: {
   620                           ;main.c: 306: startPWM();
   621  02C7  23A8               	fcall	_startPWM
   622                           
   623                           ;main.c: 307: }
   624  02C8  2ABD               	goto	l2744
   625  02C9                     l562:	
   626                           
   627                           ;main.c: 308: else if(ONFlag == 0 && pwmFlag == 1)
   628  02C9  1FF0               	btfss	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   629  02CA  1F70               	btfss	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
   630  02CB  2ABD               	goto	l2744
   631                           
   632                           ;main.c: 309: {
   633                           ;main.c: 310: PWMCON0 = 0;
   634  02CC  0193               	clrf	19	;volatile
   635                           
   636                           ;main.c: 311: pwmFlag = 0;
   637  02CD  1370               	bcf	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
   638  02CE  2ABD               	goto	l2744
   639  02CF                     __end_of_main:	
   640                           
   641                           	psect	text1
   642  03A8                     __ptext1:	
   643 ;; *************** function _startPWM *****************
   644 ;; Defined at:
   645 ;;		line 150 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;		None
   648 ;; Auto vars:     Size  Location     Type
   649 ;;		None
   650 ;; Return value:  Size  Location     Type
   651 ;;                  1    wreg      void 
   652 ;; Registers used:
   653 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   654 ;; Tracked objects:
   655 ;;		On entry : 300/0
   656 ;;		On exit  : 300/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   659 ;;      Params:         0       0       0       0
   660 ;;      Locals:         0       0       0       0
   661 ;;      Temps:          0       0       0       0
   662 ;;      Totals:         0       0       0       0
   663 ;;Total ram usage:        0 bytes
   664 ;; Hardware stack levels used:    1
   665 ;; Hardware stack levels required when called:    3
   666 ;; This function calls:
   667 ;;		_procKey1
   668 ;;		_procKey2
   669 ;; This function is called by:
   670 ;;		_main
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           
   675                           ;psect for function _startPWM
   676  03A8                     _startPWM:	
   677                           
   678                           ;main.c: 152: pwm0Step--;
   679                           
   680                           ;incstack = 0
   681                           ; Regs used in _startPWM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   682  03A8  03D5               	decf	_pwm0Step,f
   683                           
   684                           ;main.c: 153: pwm1Step--;
   685  03A9  03D4               	decf	_pwm1Step,f
   686                           
   687                           ;main.c: 154: procKey1();
   688  03AA  2285               	fcall	_procKey1
   689                           
   690                           ;main.c: 155: procKey2();
   691  03AB  2A68               	ljmp	l2258
   692  03AC                     __end_of_startPWM:	
   693                           
   694                           	psect	text2
   695  0358                     __ptext2:	
   696 ;; *************** function _initPWM *****************
   697 ;; Defined at:
   698 ;;		line 4 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;		None
   701 ;; Auto vars:     Size  Location     Type
   702 ;;		None
   703 ;; Return value:  Size  Location     Type
   704 ;;                  1    wreg      void 
   705 ;; Registers used:
   706 ;;		wreg, status,2
   707 ;; Tracked objects:
   708 ;;		On entry : 300/100
   709 ;;		On exit  : 300/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   712 ;;      Params:         0       0       0       0
   713 ;;      Locals:         0       0       0       0
   714 ;;      Temps:          0       0       0       0
   715 ;;      Totals:         0       0       0       0
   716 ;;Total ram usage:        0 bytes
   717 ;; Hardware stack levels used:    1
   718 ;; Hardware stack levels required when called:    1
   719 ;; This function calls:
   720 ;;		Nothing
   721 ;; This function is called by:
   722 ;;		_main
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726                           
   727                           ;psect for function _initPWM
   728  0358                     _initPWM:	
   729                           
   730                           ;pwm.c: 6: PWMCON1 = 0x40;
   731                           
   732                           ;incstack = 0
   733                           ; Regs used in _initPWM: [wreg+status,2]
   734  0358  3040               	movlw	64
   735  0359  1283               	bcf	3,5	;RP0=0, select bank0
   736  035A  0094               	movwf	20	;volatile
   737                           
   738                           ;pwm.c: 7: PWMCON0 = 0x21;
   739  035B  3021               	movlw	33
   740  035C  0093               	movwf	19	;volatile
   741                           
   742                           ;pwm.c: 8: PWMCON2 = 0;
   743  035D  019D               	clrf	29	;volatile
   744                           
   745                           ;pwm.c: 9: PWMTH = 0;
   746  035E  0196               	clrf	22	;volatile
   747                           
   748                           ;pwm.c: 10: PWMTL = 126;
   749  035F  307E               	movlw	126
   750  0360  0095               	movwf	21	;volatile
   751                           
   752                           ;pwm.c: 11: PWMD0L = 1;
   753  0361  3001               	movlw	1
   754  0362  0097               	movwf	23	;volatile
   755                           
   756                           ;pwm.c: 12: PWMD1L = 1;
   757  0363  0098               	movwf	24	;volatile
   758                           
   759                           ;pwm.c: 13: PWMD01H = 0;
   760  0364  019C               	clrf	28	;volatile
   761  0365  0008               	return
   762  0366                     __end_of_initPWM:	
   763                           
   764                           	psect	text3
   765  02CF                     __ptext3:	
   766 ;; *************** function _Refurbish_Sfr *****************
   767 ;; Defined at:
   768 ;;		line 49 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;		None
   771 ;; Auto vars:     Size  Location     Type
   772 ;;		None
   773 ;; Return value:  Size  Location     Type
   774 ;;                  1    wreg      void 
   775 ;; Registers used:
   776 ;;		wreg, status,2, status,0
   777 ;; Tracked objects:
   778 ;;		On entry : 0/0
   779 ;;		On exit  : 300/0
   780 ;;		Unchanged: 0/0
   781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   782 ;;      Params:         0       0       0       0
   783 ;;      Locals:         0       0       0       0
   784 ;;      Temps:          0       0       0       0
   785 ;;      Totals:         0       0       0       0
   786 ;;Total ram usage:        0 bytes
   787 ;; Hardware stack levels used:    1
   788 ;; Hardware stack levels required when called:    1
   789 ;; This function calls:
   790 ;;		Nothing
   791 ;; This function is called by:
   792 ;;		_main
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796                           
   797                           ;psect for function _Refurbish_Sfr
   798  02CF                     _Refurbish_Sfr:	
   799                           
   800                           ;main.c: 87: OPTION_REG = 0;
   801                           
   802                           ;incstack = 0
   803                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
   804  02CF  1683               	bsf	3,5	;RP0=1, select bank1
   805  02D0  1303               	bcf	3,6	;RP1=0, select bank1
   806                           
   807                           ;main.c: 91: PIE1 = 2;
   808                           
   809                           ;main.c: 92: PR2 = 250;
   810  02D1  22DC               	fcall	PL12	;call to abstracted procedure
   811                           
   812                           ;main.c: 93: INTCON = 0XC0;
   813  02D2  30C0               	movlw	192
   814  02D3  008B               	movwf	11	;volatile
   815                           
   816                           ;main.c: 94: if(4 != T2CON)
   817  02D4  3004               	movlw	4
   818  02D5  1283               	bcf	3,5	;RP0=0, select bank0
   819  02D6  0612               	xorwf	18,w	;volatile
   820  02D7  1903               	btfsc	3,2
   821  02D8  0008               	return
   822                           
   823                           ;main.c: 95: T2CON = 4;
   824  02D9  3004               	movlw	4
   825  02DA  0092               	movwf	18	;volatile
   826  02DB  0008               	return
   827  02DC                     __end_of_Refurbish_Sfr:	
   828  02DC                     PL12:	
   829  02DC  0181               	clrf	1	;volatile
   830  02DD  3002               	movlw	2
   831  02DE  1283               	bcf	3,5	;RP0=0, select bank0
   832  02DF  008D               	movwf	13	;volatile
   833  02E0  30FA               	movlw	250
   834  02E1  1683               	bsf	3,5	;RP0=1, select bank1
   835  02E2  0091               	movwf	17	;volatile
   836  02E3  0008               	return
   837  02E4                     __end_ofPL12:	
   838                           
   839                           	psect	text4
   840  0183                     __ptext4:	
   841 ;; *************** function _KeyServer *****************
   842 ;; Defined at:
   843 ;;		line 163 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
   844 ;; Parameters:    Size  Location     Type
   845 ;;		None
   846 ;; Auto vars:     Size  Location     Type
   847 ;;  i               2    2[COMMON] unsigned int 
   848 ;; Return value:  Size  Location     Type
   849 ;;                  1    wreg      void 
   850 ;; Registers used:
   851 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   852 ;; Tracked objects:
   853 ;;		On entry : 300/0
   854 ;;		On exit  : 300/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   857 ;;      Params:         0       0       0       0
   858 ;;      Locals:         2       0       0       0
   859 ;;      Temps:          0       0       0       0
   860 ;;      Totals:         2       0       0       0
   861 ;;Total ram usage:        2 bytes
   862 ;; Hardware stack levels used:    1
   863 ;; Hardware stack levels required when called:    3
   864 ;; This function calls:
   865 ;;		_procKey1
   866 ;;		_procKey2
   867 ;; This function is called by:
   868 ;;		_main
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872                           
   873                           ;psect for function _KeyServer
   874  0183                     _KeyServer:	
   875                           
   876                           ;main.c: 165: static unsigned int KeyOldFlag = 0;
   877                           ;main.c: 166: unsigned int i = (unsigned int)((KeyFlag[1]<<8) | KeyFlag[0]);
   878                           
   879                           ;incstack = 0
   880                           ; Regs used in _KeyServer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   881  0183  083F               	movf	_KeyFlag+1,w	;volatile
   882  0184  00F5               	movwf	KeyServer@i+1
   883  0185  083E               	movf	_KeyFlag,w	;volatile
   884  0186  00F4               	movwf	KeyServer@i
   885                           
   886                           ;main.c: 167: if(i)
   887  0187  0475               	iorwf	KeyServer@i+1,w
   888  0188  1903               	btfsc	3,2
   889  0189  29B9               	goto	l2496
   890                           
   891                           ;main.c: 168: {
   892                           ;main.c: 170: if(i != KeyOldFlag)
   893  018A  083B               	movf	KeyServer@KeyOldFlag+1,w
   894  018B  0675               	xorwf	KeyServer@i+1,w
   895  018C  1D03               	skipz
   896  018D  2990               	goto	u1035
   897  018E  083A               	movf	KeyServer@KeyOldFlag,w
   898  018F  0674               	xorwf	KeyServer@i,w
   899  0190                     u1035:	
   900  0190  1903               	skipnz
   901  0191  29B7               	goto	l521
   902                           
   903                           ;main.c: 171: {
   904                           ;main.c: 172: if(keyLockFlag)
   905  0192  1EF0               	btfss	_keyLockFlag/(0+8),_keyLockFlag& (0+7)	;volatile
   906  0193  2996               	goto	l2482
   907                           
   908                           ;main.c: 173: {
   909                           ;main.c: 174: doubleTouchFlag = 1;
   910  0194  1670               	bsf	_doubleTouchFlag/(0+8),_doubleTouchFlag& (0+7)	;volatile
   911                           
   912                           ;main.c: 175: return;
   913  0195  0008               	return
   914  0196                     l2482:	
   915                           
   916                           ;main.c: 176: }
   917                           ;main.c: 177: KeyOldFlag = i;
   918  0196  0875               	movf	KeyServer@i+1,w
   919  0197  00BB               	movwf	KeyServer@KeyOldFlag+1
   920  0198  0874               	movf	KeyServer@i,w
   921  0199  00BA               	movwf	KeyServer@KeyOldFlag
   922                           
   923                           ;main.c: 178: switch(i)
   924  019A  29A1               	goto	l2494
   925  019B                     l2484:	
   926                           
   927                           ;main.c: 181: procKey1();
   928  019B  2285               	fcall	_procKey1
   929                           
   930                           ;main.c: 182: break;
   931  019C  29B7               	goto	l521
   932  019D                     l2486:	
   933                           
   934                           ;main.c: 184: procKey2();
   935  019D  2268               	fcall	_procKey2
   936                           
   937                           ;main.c: 185: break;
   938  019E  29B7               	goto	l521
   939  019F                     l528:	
   940                           ;main.c: 186: case 3:
   941                           
   942                           
   943                           ;main.c: 187: doublePressFlag = 1;
   944  019F  1471               	bsf	_doublePressFlag/(0+8),_doublePressFlag& (0+7)	;volatile
   945                           
   946                           ;main.c: 188: break;
   947  01A0  29B7               	goto	l521
   948  01A1                     l2494:	
   949                           
   950                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   951                           ; Switch size 1, requested type "space"
   952                           ; Number of cases is 1, Range of values is 0 to 0
   953                           ; switch strategies available:
   954                           ; Name         Instructions Cycles
   955                           ; simple_byte            4     3 (average)
   956                           ; direct_byte            7     6 (fixed)
   957                           ; jumptable            260     6 (fixed)
   958                           ;	Chosen strategy is simple_byte
   959  01A1  0875               	movf	KeyServer@i+1,w
   960  01A2  3A00               	xorlw	0	; case 0
   961  01A3  1903               	skipnz
   962  01A4  29A6               	goto	l2806
   963  01A5  29B7               	goto	l521
   964  01A6                     l2806:	
   965                           
   966                           ; Switch size 1, requested type "space"
   967                           ; Number of cases is 5, Range of values is 1 to 8
   968                           ; switch strategies available:
   969                           ; Name         Instructions Cycles
   970                           ; simple_byte           16     9 (average)
   971                           ; direct_byte           17     9 (fixed)
   972                           ; jumptable            263     9 (fixed)
   973                           ;	Chosen strategy is simple_byte
   974  01A6  0874               	movf	KeyServer@i,w
   975  01A7  3A01               	xorlw	1	; case 1
   976  01A8  1903               	skipnz
   977  01A9  299B               	goto	l2484
   978  01AA  3A03               	xorlw	3	; case 2
   979  01AB  1903               	skipnz
   980  01AC  299D               	goto	l2486
   981  01AD  3A01               	xorlw	1	; case 3
   982  01AE  1903               	skipnz
   983  01AF  299F               	goto	l528
   984  01B0  3A07               	xorlw	7	; case 4
   985  01B1  1903               	skipnz
   986  01B2  299B               	goto	l2484
   987  01B3  3A0C               	xorlw	12	; case 8
   988  01B4  1903               	skipnz
   989  01B5  299D               	goto	l2486
   990  01B6  29B7               	goto	l521
   991  01B7                     l521:	
   992                           
   993                           ;main.c: 198: }
   994                           ;main.c: 199: keyLockFlag = 1;
   995  01B7  16F0               	bsf	_keyLockFlag/(0+8),_keyLockFlag& (0+7)	;volatile
   996                           
   997                           ;main.c: 200: }
   998  01B8  0008               	return
   999  01B9                     l2496:	
  1000                           
  1001                           ;main.c: 201: else
  1002                           ;main.c: 202: {
  1003                           ;main.c: 203: KeyOldFlag = 0;
  1004  01B9  01BA               	clrf	KeyServer@KeyOldFlag
  1005  01BA  01BB               	clrf	KeyServer@KeyOldFlag+1
  1006                           
  1007                           ;main.c: 204: keyLockFlag = 0;
  1008  01BB  12F0               	bcf	_keyLockFlag/(0+8),_keyLockFlag& (0+7)	;volatile
  1009                           
  1010                           ;main.c: 205: if(doubleTouchFlag)
  1011  01BC  1E70               	btfss	_doubleTouchFlag/(0+8),_doubleTouchFlag& (0+7)	;volatile
  1012  01BD  0008               	return
  1013                           
  1014                           ;main.c: 206: {
  1015                           ;main.c: 208: ONFlag = !ONFlag;
  1016  01BE  3080               	movlw	(0+1) shl (_ONFlag& (0+7))
  1017  01BF  06F0               	xorwf	_ONFlag/(0+8),f
  1018                           
  1019                           ;main.c: 209: }
  1020                           ;main.c: 210: doubleTouchFlag = 0;
  1021  01C0  1270               	bcf	_doubleTouchFlag/(0+8),_doubleTouchFlag& (0+7)	;volatile
  1022  01C1  0008               	return
  1023  01C2                     __end_of_KeyServer:	
  1024                           
  1025                           	psect	text5
  1026  0268                     __ptext5:	
  1027 ;; *************** function _procKey2 *****************
  1028 ;; Defined at:
  1029 ;;		line 123 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
  1030 ;; Parameters:    Size  Location     Type
  1031 ;;		None
  1032 ;; Auto vars:     Size  Location     Type
  1033 ;;		None
  1034 ;; Return value:  Size  Location     Type
  1035 ;;                  1    wreg      void 
  1036 ;; Registers used:
  1037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1038 ;; Tracked objects:
  1039 ;;		On entry : 300/0
  1040 ;;		On exit  : 300/0
  1041 ;;		Unchanged: 0/0
  1042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1043 ;;      Params:         0       0       0       0
  1044 ;;      Locals:         0       0       0       0
  1045 ;;      Temps:          0       0       0       0
  1046 ;;      Totals:         0       0       0       0
  1047 ;;Total ram usage:        0 bytes
  1048 ;; Hardware stack levels used:    1
  1049 ;; Hardware stack levels required when called:    2
  1050 ;; This function calls:
  1051 ;;		_mode1_a
  1052 ;;		_mode1_b
  1053 ;;		_mode1_c
  1054 ;;		_mode1_d
  1055 ;;		_mode1_e
  1056 ;; This function is called by:
  1057 ;;		_startPWM
  1058 ;;		_KeyServer
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           
  1063                           ;psect for function _procKey2
  1064  0268                     _procKey2:	
  1065  0268                     l2258:	
  1066                           ;incstack = 0
  1067                           ; Regs used in _procKey2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1068                           
  1069                           
  1070                           ;main.c: 125: pwmFlag = 1;
  1071  0268  1770               	bsf	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
  1072                           
  1073                           ;main.c: 126: ONFlag = 1;
  1074  0269  17F0               	bsf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
  1075                           
  1076                           ;main.c: 127: if(++pwm1Step > 5)
  1077  026A  3006               	movlw	6
  1078  026B  0AD4               	incf	_pwm1Step,f
  1079  026C  0254               	subwf	_pwm1Step,w
  1080  026D  1C03               	skipc
  1081  026E  2A71               	goto	l2276
  1082                           
  1083                           ;main.c: 128: pwm1Step = 1;
  1084  026F  01D4               	clrf	_pwm1Step
  1085  0270  0AD4               	incf	_pwm1Step,f
  1086  0271                     l2276:	
  1087                           ;main.c: 145: break;
  1088                           
  1089  0271  0854               	movf	_pwm1Step,w
  1090                           
  1091                           ; Switch size 1, requested type "space"
  1092                           ; Number of cases is 5, Range of values is 1 to 5
  1093                           ; switch strategies available:
  1094                           ; Name         Instructions Cycles
  1095                           ; direct_byte           14     9 (fixed)
  1096                           ; simple_byte           16     9 (average)
  1097                           ; jumptable            263     9 (fixed)
  1098                           ;	Chosen strategy is direct_byte
  1099  0272  3EFF               	addlw	-1
  1100  0273  1C03               	skipc
  1101  0274  0008               	return
  1102  0275  0084               	movwf	4
  1103  0276  3005               	movlw	5
  1104  0277  0204               	subwf	4,w
  1105  0278  1803               	skipnc
  1106  0279  0008               	return
  1107  027A  3002               	movlw	high S2808
  1108  027B  008A               	movwf	10
  1109  027C  30F9               	movlw	low S2808
  1110  027D  0704               	addwf	4,w
  1111  027E  0082               	movwf	2
  1112  027F  0008               	return
  1113  0280                     l2264:	
  1114                           
  1115                           ;main.c: 132: mode1_a();
  1116  0280  2BB4               	ljmp	l2166
  1117  0281                     l2266:	
  1118                           ;main.c: 133: break;
  1119                           
  1120                           
  1121                           ;main.c: 135: mode1_b();
  1122  0281  2BA1               	ljmp	l2176
  1123  0282                     l2268:	
  1124                           ;main.c: 136: break;
  1125                           
  1126                           
  1127                           ;main.c: 138: mode1_c();
  1128  0282  2BB0               	ljmp	l2186
  1129  0283                     l2270:	
  1130                           ;main.c: 139: break;
  1131                           
  1132                           
  1133                           ;main.c: 141: mode1_d();
  1134  0283  2B80               	ljmp	l2192
  1135  0284                     l2272:	
  1136                           ;main.c: 142: break;
  1137                           
  1138                           
  1139                           ;main.c: 144: mode1_e();
  1140  0284  2BAC               	ljmp	l2198
  1141  0285                     __end_of_procKey2:	
  1142                           
  1143                           	psect	swtext1
  1144  02F9                     __pswtext1:	
  1145  02F9                     S2808:	
  1146  02F9  2A80               	ljmp	l2264
  1147  02FA  2A81               	ljmp	l2266
  1148  02FB  2A82               	ljmp	l2268
  1149  02FC  2A83               	ljmp	l2270
  1150  02FD  2A84               	ljmp	l2272
  1151                           
  1152                           	psect	text6
  1153  03AC                     __ptext6:	
  1154 ;; *************** function _mode1_e *****************
  1155 ;; Defined at:
  1156 ;;		line 54 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1157 ;; Parameters:    Size  Location     Type
  1158 ;;		None
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;		None
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  1    wreg      void 
  1163 ;; Registers used:
  1164 ;;		wreg, status,2, status,0
  1165 ;; Tracked objects:
  1166 ;;		On entry : 300/0
  1167 ;;		On exit  : 300/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1170 ;;      Params:         0       0       0       0
  1171 ;;      Locals:         0       0       0       0
  1172 ;;      Temps:          0       0       0       0
  1173 ;;      Totals:         0       0       0       0
  1174 ;;Total ram usage:        0 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; Hardware stack levels required when called:    1
  1177 ;; This function calls:
  1178 ;;		Nothing
  1179 ;; This function is called by:
  1180 ;;		_procKey2
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           
  1185                           ;psect for function _mode1_e
  1186  03AC                     _mode1_e:	
  1187  03AC                     l2198:	
  1188                           ;incstack = 0
  1189                           ; Regs used in _mode1_e: [wreg+status,2+status,0]
  1190                           
  1191                           
  1192                           ;pwm.c: 56: PWMD0L = 1;
  1193  03AC  3001               	movlw	1
  1194  03AD  0097               	movwf	23	;volatile
  1195                           
  1196                           ;pwm.c: 57: PWMD1L = 95;
  1197  03AE  305F               	movlw	95
  1198                           
  1199                           ;pwm.c: 58: PWMTH = 0;
  1200                           
  1201                           ;pwm.c: 59: PWMCON0 |= 0x03;
  1202  03AF  2B84               	ljmp	PL18	;call to abstracted procedure
  1203  03B0                     __end_of_mode1_e:	
  1204                           
  1205                           	psect	text7
  1206  0380                     __ptext7:	
  1207 ;; *************** function _mode1_d *****************
  1208 ;; Defined at:
  1209 ;;		line 45 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1210 ;; Parameters:    Size  Location     Type
  1211 ;;		None
  1212 ;; Auto vars:     Size  Location     Type
  1213 ;;		None
  1214 ;; Return value:  Size  Location     Type
  1215 ;;                  1    wreg      void 
  1216 ;; Registers used:
  1217 ;;		wreg, status,2, status,0
  1218 ;; Tracked objects:
  1219 ;;		On entry : 300/0
  1220 ;;		On exit  : 300/0
  1221 ;;		Unchanged: 0/0
  1222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1223 ;;      Params:         0       0       0       0
  1224 ;;      Locals:         0       0       0       0
  1225 ;;      Temps:          0       0       0       0
  1226 ;;      Totals:         0       0       0       0
  1227 ;;Total ram usage:        0 bytes
  1228 ;; Hardware stack levels used:    1
  1229 ;; Hardware stack levels required when called:    1
  1230 ;; This function calls:
  1231 ;;		Nothing
  1232 ;; This function is called by:
  1233 ;;		_procKey2
  1234 ;; This function uses a non-reentrant model
  1235 ;;
  1236                           
  1237                           
  1238                           ;psect for function _mode1_d
  1239  0380                     _mode1_d:	
  1240  0380                     l2192:	
  1241                           ;incstack = 0
  1242                           ; Regs used in _mode1_d: [wreg+status,2+status,0]
  1243                           
  1244                           
  1245                           ;pwm.c: 47: PWMD0L = 1;
  1246  0380  3001               	movlw	1
  1247  0381  0097               	movwf	23	;volatile
  1248                           
  1249                           ;pwm.c: 48: PWMD1L = 63;
  1250  0382  303F               	movlw	63
  1251                           
  1252                           ;pwm.c: 49: PWMTH = 0;
  1253                           
  1254                           ;pwm.c: 50: PWMCON0 |= 0x03;
  1255  0383  2B84               	ljmp	PL18	;call to abstracted procedure
  1256  0384                     __end_of_mode1_d:	
  1257  0384                     PL18:	
  1258  0384  0098               	movwf	24	;volatile
  1259  0385  0196               	clrf	22	;volatile
  1260  0386  3003               	movlw	3
  1261  0387  0493               	iorwf	19,f	;volatile
  1262  0388  0008               	return
  1263  0389                     __end_ofPL18:	
  1264                           
  1265                           	psect	text8
  1266  03B0                     __ptext8:	
  1267 ;; *************** function _mode1_c *****************
  1268 ;; Defined at:
  1269 ;;		line 36 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1270 ;; Parameters:    Size  Location     Type
  1271 ;;		None
  1272 ;; Auto vars:     Size  Location     Type
  1273 ;;		None
  1274 ;; Return value:  Size  Location     Type
  1275 ;;                  1    wreg      void 
  1276 ;; Registers used:
  1277 ;;		wreg, status,2, status,0
  1278 ;; Tracked objects:
  1279 ;;		On entry : 300/0
  1280 ;;		On exit  : 300/0
  1281 ;;		Unchanged: 0/0
  1282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1283 ;;      Params:         0       0       0       0
  1284 ;;      Locals:         0       0       0       0
  1285 ;;      Temps:          0       0       0       0
  1286 ;;      Totals:         0       0       0       0
  1287 ;;Total ram usage:        0 bytes
  1288 ;; Hardware stack levels used:    1
  1289 ;; Hardware stack levels required when called:    1
  1290 ;; This function calls:
  1291 ;;		Nothing
  1292 ;; This function is called by:
  1293 ;;		_procKey2
  1294 ;; This function uses a non-reentrant model
  1295 ;;
  1296                           
  1297                           
  1298                           ;psect for function _mode1_c
  1299  03B0                     _mode1_c:	
  1300  03B0                     l2186:	
  1301                           ;incstack = 0
  1302                           ; Regs used in _mode1_c: [wreg+status,2+status,0]
  1303                           
  1304                           
  1305                           ;pwm.c: 38: PWMD0L = 1;
  1306  03B0  3001               	movlw	1
  1307  03B1  0097               	movwf	23	;volatile
  1308                           
  1309                           ;pwm.c: 39: PWMD1L = 32;
  1310  03B2  3020               	movlw	32
  1311                           
  1312                           ;pwm.c: 40: PWMTH = 0;
  1313                           
  1314                           ;pwm.c: 41: PWMCON0 |= 0x03;
  1315  03B3  2B84               	ljmp	PL18	;call to abstracted procedure
  1316  03B4                     __end_of_mode1_c:	
  1317                           
  1318                           	psect	text9
  1319  03A1                     __ptext9:	
  1320 ;; *************** function _mode1_b *****************
  1321 ;; Defined at:
  1322 ;;		line 26 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;		None
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      void 
  1329 ;; Registers used:
  1330 ;;		wreg, status,2
  1331 ;; Tracked objects:
  1332 ;;		On entry : 300/0
  1333 ;;		On exit  : 300/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1336 ;;      Params:         0       0       0       0
  1337 ;;      Locals:         0       0       0       0
  1338 ;;      Temps:          0       0       0       0
  1339 ;;      Totals:         0       0       0       0
  1340 ;;Total ram usage:        0 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; Hardware stack levels required when called:    1
  1343 ;; This function calls:
  1344 ;;		Nothing
  1345 ;; This function is called by:
  1346 ;;		_procKey2
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           
  1351                           ;psect for function _mode1_b
  1352  03A1                     _mode1_b:	
  1353  03A1                     l2176:	
  1354                           ;incstack = 0
  1355                           ; Regs used in _mode1_b: [wreg+status,2]
  1356                           
  1357                           
  1358                           ;pwm.c: 28: PWMD0L = 1;
  1359  03A1  3001               	movlw	1
  1360  03A2  0097               	movwf	23	;volatile
  1361                           
  1362                           ;pwm.c: 29: PWMD1L = 0;
  1363  03A3  0198               	clrf	24	;volatile
  1364                           
  1365                           ;pwm.c: 30: PWMTH = 0;
  1366  03A4  0196               	clrf	22	;volatile
  1367                           
  1368                           ;pwm.c: 31: PWMCON0 |= 0x01;
  1369  03A5  1413               	bsf	19,0	;volatile
  1370                           
  1371                           ;pwm.c: 32: PORTB&=~(1<<7);
  1372  03A6  1386               	bcf	6,7	;volatile
  1373  03A7  0008               	return
  1374  03A8                     __end_of_mode1_b:	
  1375                           
  1376                           	psect	text10
  1377  03B4                     __ptext10:	
  1378 ;; *************** function _mode1_a *****************
  1379 ;; Defined at:
  1380 ;;		line 16 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;		None
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;		None
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  1    wreg      void 
  1387 ;; Registers used:
  1388 ;;		wreg, status,2
  1389 ;; Tracked objects:
  1390 ;;		On entry : 300/0
  1391 ;;		On exit  : 300/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1394 ;;      Params:         0       0       0       0
  1395 ;;      Locals:         0       0       0       0
  1396 ;;      Temps:          0       0       0       0
  1397 ;;      Totals:         0       0       0       0
  1398 ;;Total ram usage:        0 bytes
  1399 ;; Hardware stack levels used:    1
  1400 ;; Hardware stack levels required when called:    1
  1401 ;; This function calls:
  1402 ;;		Nothing
  1403 ;; This function is called by:
  1404 ;;		_procKey2
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           
  1409                           ;psect for function _mode1_a
  1410  03B4                     _mode1_a:	
  1411  03B4                     l2166:	
  1412                           ;incstack = 0
  1413                           ; Regs used in _mode1_a: [wreg+status,2]
  1414                           
  1415                           
  1416                           ;pwm.c: 18: PWMD0L = 1;
  1417  03B4  3001               	movlw	1
  1418                           
  1419                           ;pwm.c: 19: PWMD1L = 0;
  1420                           
  1421                           ;pwm.c: 20: PWMTH = 0;
  1422                           
  1423                           ;pwm.c: 21: PWMCON0 |= 0x01;
  1424                           
  1425                           ;pwm.c: 22: PORTB|=(1<<7);
  1426  03B5  2B9B               	ljmp	PL8	;call to abstracted procedure
  1427  03B6                     __end_of_mode1_a:	
  1428                           
  1429                           	psect	text11
  1430  0285                     __ptext11:	
  1431 ;; *************** function _procKey1 *****************
  1432 ;; Defined at:
  1433 ;;		line 98 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;		None
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;		None
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  1    wreg      void 
  1440 ;; Registers used:
  1441 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1442 ;; Tracked objects:
  1443 ;;		On entry : 300/0
  1444 ;;		On exit  : 300/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1447 ;;      Params:         0       0       0       0
  1448 ;;      Locals:         0       0       0       0
  1449 ;;      Temps:          0       0       0       0
  1450 ;;      Totals:         0       0       0       0
  1451 ;;Total ram usage:        0 bytes
  1452 ;; Hardware stack levels used:    1
  1453 ;; Hardware stack levels required when called:    2
  1454 ;; This function calls:
  1455 ;;		_mode2_a
  1456 ;;		_mode3_a
  1457 ;;		_mode4_a
  1458 ;;		_mode5_a
  1459 ;; This function is called by:
  1460 ;;		_startPWM
  1461 ;;		_KeyServer
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465                           
  1466                           ;psect for function _procKey1
  1467  0285                     _procKey1:	
  1468                           
  1469                           ;main.c: 100: pwmFlag = 1;
  1470                           
  1471                           ;incstack = 0
  1472                           ; Regs used in _procKey1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1473  0285  1770               	bsf	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
  1474                           
  1475                           ;main.c: 101: ONFlag = 1;
  1476  0286  17F0               	bsf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
  1477                           
  1478                           ;main.c: 102: if(++pwm0Step > 4)
  1479  0287  3005               	movlw	5
  1480  0288  0AD5               	incf	_pwm0Step,f
  1481  0289  0255               	subwf	_pwm0Step,w
  1482  028A  1C03               	skipc
  1483  028B  2A8E               	goto	l2256
  1484                           
  1485                           ;main.c: 103: pwm0Step = 1;
  1486  028C  01D5               	clrf	_pwm0Step
  1487  028D  0AD5               	incf	_pwm0Step,f
  1488  028E                     l2256:	
  1489                           ;main.c: 117: break;
  1490                           
  1491  028E  0855               	movf	_pwm0Step,w
  1492                           
  1493                           ; Switch size 1, requested type "space"
  1494                           ; Number of cases is 4, Range of values is 1 to 4
  1495                           ; switch strategies available:
  1496                           ; Name         Instructions Cycles
  1497                           ; simple_byte           13     7 (average)
  1498                           ; direct_byte           13     9 (fixed)
  1499                           ; jumptable            263     9 (fixed)
  1500                           ;	Chosen strategy is simple_byte
  1501  028F  3A01               	xorlw	1	; case 1
  1502  0290  1903               	skipnz
  1503  0291  2A9C               	goto	l2246
  1504  0292  3A03               	xorlw	3	; case 2
  1505  0293  1903               	skipnz
  1506  0294  2A9D               	goto	l2248
  1507  0295  3A01               	xorlw	1	; case 3
  1508  0296  1903               	skipnz
  1509  0297  2A9E               	goto	l2250
  1510  0298  3A07               	xorlw	7	; case 4
  1511  0299  1903               	skipnz
  1512  029A  2A9F               	goto	l2252
  1513  029B  2AA0               	goto	l501
  1514  029C                     l2246:	
  1515                           
  1516                           ;main.c: 107: mode2_a();
  1517  029C  2BB8               	ljmp	l2128
  1518  029D                     l2248:	
  1519                           ;main.c: 108: break;
  1520                           
  1521                           
  1522                           ;main.c: 110: mode3_a();
  1523  029D  2BB6               	ljmp	l2138
  1524  029E                     l2250:	
  1525                           ;main.c: 111: break;
  1526                           
  1527                           
  1528                           ;main.c: 113: mode4_a();
  1529  029E  2B99               	ljmp	l2148
  1530  029F                     l2252:	
  1531                           ;main.c: 114: break;
  1532                           
  1533                           
  1534                           ;main.c: 116: mode5_a();
  1535  029F  2B91               	ljmp	l2158
  1536  02A0                     l501:	
  1537  02A0  0008               	return
  1538  02A1                     __end_of_procKey1:	
  1539                           
  1540                           	psect	text12
  1541  0391                     __ptext12:	
  1542 ;; *************** function _mode5_a *****************
  1543 ;; Defined at:
  1544 ;;		line 93 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;		None
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;		None
  1549 ;; Return value:  Size  Location     Type
  1550 ;;                  1    wreg      void 
  1551 ;; Registers used:
  1552 ;;		wreg, status,2
  1553 ;; Tracked objects:
  1554 ;;		On entry : 300/0
  1555 ;;		On exit  : 300/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1558 ;;      Params:         0       0       0       0
  1559 ;;      Locals:         0       0       0       0
  1560 ;;      Temps:          0       0       0       0
  1561 ;;      Totals:         0       0       0       0
  1562 ;;Total ram usage:        0 bytes
  1563 ;; Hardware stack levels used:    1
  1564 ;; Hardware stack levels required when called:    1
  1565 ;; This function calls:
  1566 ;;		Nothing
  1567 ;; This function is called by:
  1568 ;;		_procKey1
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           
  1573                           ;psect for function _mode5_a
  1574  0391                     _mode5_a:	
  1575  0391                     l2158:	
  1576                           ;incstack = 0
  1577                           ; Regs used in _mode5_a: [wreg+status,2]
  1578                           
  1579                           
  1580                           ;pwm.c: 95: PWMD0L = 0;
  1581  0391  0197               	clrf	23	;volatile
  1582                           
  1583                           ;pwm.c: 96: PWMD1L = 0;
  1584  0392  0198               	clrf	24	;volatile
  1585                           
  1586                           ;pwm.c: 97: PWMTH = 0;
  1587  0393  0196               	clrf	22	;volatile
  1588                           
  1589                           ;pwm.c: 98: PWMCON0 = 0x60;
  1590  0394  3060               	movlw	96
  1591  0395  0093               	movwf	19	;volatile
  1592                           
  1593                           ;pwm.c: 99: PORTB|=(1<<7);
  1594  0396  1786               	bsf	6,7	;volatile
  1595                           
  1596                           ;pwm.c: 100: PORTA|=(1<<5);
  1597  0397  1685               	bsf	5,5	;volatile
  1598  0398  0008               	return
  1599  0399                     __end_of_mode5_a:	
  1600                           
  1601                           	psect	text13
  1602  0399                     __ptext13:	
  1603 ;; *************** function _mode4_a *****************
  1604 ;; Defined at:
  1605 ;;		line 83 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;		None
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;		None
  1610 ;; Return value:  Size  Location     Type
  1611 ;;                  1    wreg      void 
  1612 ;; Registers used:
  1613 ;;		wreg, status,2
  1614 ;; Tracked objects:
  1615 ;;		On entry : 300/0
  1616 ;;		On exit  : 300/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1619 ;;      Params:         0       0       0       0
  1620 ;;      Locals:         0       0       0       0
  1621 ;;      Temps:          0       0       0       0
  1622 ;;      Totals:         0       0       0       0
  1623 ;;Total ram usage:        0 bytes
  1624 ;; Hardware stack levels used:    1
  1625 ;; Hardware stack levels required when called:    1
  1626 ;; This function calls:
  1627 ;;		Nothing
  1628 ;; This function is called by:
  1629 ;;		_procKey1
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           
  1634                           ;psect for function _mode4_a
  1635  0399                     _mode4_a:	
  1636  0399                     l2148:	
  1637                           ;incstack = 0
  1638                           ; Regs used in _mode4_a: [wreg+status,2]
  1639                           
  1640                           
  1641                           ;pwm.c: 85: PWMD0L = 72;
  1642  0399  3048               	movlw	72
  1643                           
  1644                           ;pwm.c: 86: PWMD1L = 0;
  1645                           
  1646                           ;pwm.c: 87: PWMTH = 0;
  1647                           
  1648                           ;pwm.c: 88: PWMCON0 |= 0x01;
  1649                           
  1650                           ;pwm.c: 89: PORTB|=(1<<7);
  1651  039A  2B9B               	ljmp	PL8	;call to abstracted procedure
  1652  039B                     __end_of_mode4_a:	
  1653  039B                     PL8:	
  1654  039B  0097               	movwf	23	;volatile
  1655  039C  0198               	clrf	24	;volatile
  1656  039D  0196               	clrf	22	;volatile
  1657  039E  1413               	bsf	19,0	;volatile
  1658  039F  1786               	bsf	6,7	;volatile
  1659  03A0  0008               	return
  1660  03A1                     __end_ofPL8:	
  1661                           
  1662                           	psect	text14
  1663  03B6                     __ptext14:	
  1664 ;; *************** function _mode3_a *****************
  1665 ;; Defined at:
  1666 ;;		line 73 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;		None
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;		None
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      void 
  1673 ;; Registers used:
  1674 ;;		wreg, status,2
  1675 ;; Tracked objects:
  1676 ;;		On entry : 300/0
  1677 ;;		On exit  : 300/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1680 ;;      Params:         0       0       0       0
  1681 ;;      Locals:         0       0       0       0
  1682 ;;      Temps:          0       0       0       0
  1683 ;;      Totals:         0       0       0       0
  1684 ;;Total ram usage:        0 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    1
  1687 ;; This function calls:
  1688 ;;		Nothing
  1689 ;; This function is called by:
  1690 ;;		_procKey1
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           
  1695                           ;psect for function _mode3_a
  1696  03B6                     _mode3_a:	
  1697  03B6                     l2138:	
  1698                           ;incstack = 0
  1699                           ; Regs used in _mode3_a: [wreg+status,2]
  1700                           
  1701                           
  1702                           ;pwm.c: 75: PWMD0L = 20;
  1703  03B6  3014               	movlw	20
  1704                           
  1705                           ;pwm.c: 76: PWMD1L = 0;
  1706                           
  1707                           ;pwm.c: 77: PWMTH = 0;
  1708                           
  1709                           ;pwm.c: 78: PWMCON0 |= 0x01;
  1710                           
  1711                           ;pwm.c: 79: PORTB|=(1<<7);
  1712  03B7  2B9B               	ljmp	PL8	;call to abstracted procedure
  1713  03B8                     __end_of_mode3_a:	
  1714                           
  1715                           	psect	text15
  1716  03B8                     __ptext15:	
  1717 ;; *************** function _mode2_a *****************
  1718 ;; Defined at:
  1719 ;;		line 63 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;		None
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;		None
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  1    wreg      void 
  1726 ;; Registers used:
  1727 ;;		wreg, status,2
  1728 ;; Tracked objects:
  1729 ;;		On entry : 300/0
  1730 ;;		On exit  : 300/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1733 ;;      Params:         0       0       0       0
  1734 ;;      Locals:         0       0       0       0
  1735 ;;      Temps:          0       0       0       0
  1736 ;;      Totals:         0       0       0       0
  1737 ;;Total ram usage:        0 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    1
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_procKey1
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           
  1748                           ;psect for function _mode2_a
  1749  03B8                     _mode2_a:	
  1750  03B8                     l2128:	
  1751                           ;incstack = 0
  1752                           ; Regs used in _mode2_a: [wreg+status,2]
  1753                           
  1754                           
  1755                           ;pwm.c: 65: PWMD0L = 12;
  1756  03B8  300C               	movlw	12
  1757                           
  1758                           ;pwm.c: 66: PWMD1L = 0;
  1759                           
  1760                           ;pwm.c: 67: PWMTH = 0;
  1761                           
  1762                           ;pwm.c: 68: PWMCON0 |= 0x01;
  1763                           
  1764                           ;pwm.c: 69: PORTB|=(1<<7);
  1765  03B9  2B9B               	ljmp	PL8	;call to abstracted procedure
  1766  03BA                     __end_of_mode2_a:	
  1767                           
  1768                           	psect	text16
  1769  0338                     __ptext16:	
  1770 ;; *************** function _Init_System *****************
  1771 ;; Defined at:
  1772 ;;		line 23 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;		None
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;		None
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  1    wreg      void 
  1779 ;; Registers used:
  1780 ;;		wreg, status,2
  1781 ;; Tracked objects:
  1782 ;;		On entry : B00/0
  1783 ;;		On exit  : 300/100
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1786 ;;      Params:         0       0       0       0
  1787 ;;      Locals:         0       0       0       0
  1788 ;;      Temps:          0       0       0       0
  1789 ;;      Totals:         0       0       0       0
  1790 ;;Total ram usage:        0 bytes
  1791 ;; Hardware stack levels used:    1
  1792 ;; Hardware stack levels required when called:    1
  1793 ;; This function calls:
  1794 ;;		Nothing
  1795 ;; This function is called by:
  1796 ;;		_main
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           
  1801                           ;psect for function _Init_System
  1802  0338                     _Init_System:	
  1803                           
  1804                           ;incstack = 0
  1805                           ; Regs used in _Init_System: [wreg+status,2]
  1806  0338  0000               	nop	;# 
  1807  0339  0064               	clrwdt	;# 
  1808                           
  1809                           ;main.c: 27: INTCON = 0;
  1810  033A  018B               	clrf	11	;volatile
  1811                           
  1812                           ;main.c: 28: OSCCON = 0X71;
  1813  033B  3071               	movlw	113
  1814  033C  1683               	bsf	3,5	;RP0=1, select bank1
  1815  033D  1303               	bcf	3,6	;RP1=0, select bank1
  1816  033E  0088               	movwf	8	;volatile
  1817                           
  1818                           ;main.c: 29: OPTION_REG = 0;
  1819                           
  1820                           ;main.c: 36: PIE1 = 2;
  1821                           
  1822                           ;main.c: 37: PR2 = 250;
  1823  033F  22DC               	fcall	PL12	;call to abstracted procedure
  1824                           
  1825                           ;main.c: 38: T2CON = 4;
  1826  0340  3004               	movlw	4
  1827  0341  1283               	bcf	3,5	;RP0=0, select bank0
  1828  0342  0092               	movwf	18	;volatile
  1829                           
  1830                           ;main.c: 39: TRISA = 0x00;
  1831  0343  1683               	bsf	3,5	;RP0=1, select bank1
  1832  0344  0185               	clrf	5	;volatile
  1833                           
  1834                           ;main.c: 40: TRISB = 0x04;
  1835  0345  0086               	movwf	6	;volatile
  1836                           
  1837                           ;main.c: 42: INTCON = 0XC0;
  1838  0346  30C0               	movlw	192
  1839  0347  008B               	movwf	11	;volatile
  1840  0348  0008               	return
  1841  0349                     __end_of_Init_System:	
  1842                           
  1843                           	psect	text17
  1844  021F                     __ptext17:	
  1845 ;; *************** function _CheckTouchKey *****************
  1846 ;; Defined at:
  1847 ;;		line 495 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  1    wreg      void 
  1854 ;; Registers used:
  1855 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1856 ;; Tracked objects:
  1857 ;;		On entry : 300/0
  1858 ;;		On exit  : 300/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1861 ;;      Params:         0       0       0       0
  1862 ;;      Locals:         0       0       0       0
  1863 ;;      Temps:          0       0       0       0
  1864 ;;      Totals:         0       0       0       0
  1865 ;;Total ram usage:        0 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    5
  1868 ;; This function calls:
  1869 ;;		_CheckKeyOldValue
  1870 ;;		_CheckOnceResult
  1871 ;;		_CheckValidTime
  1872 ;;		_ClearResSum
  1873 ;;		_GetTouchKeyValue
  1874 ;;		_KeyStopClear
  1875 ;;		_TurnKeyFlags
  1876 ;; This function is called by:
  1877 ;;		_main
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881                           
  1882                           ;psect for function _CheckTouchKey
  1883  021F                     _CheckTouchKey:	
  1884                           
  1885                           ;CheckTouchKey.c: 497: if(!b_kover)
  1886                           
  1887                           ;incstack = 0
  1888                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1889  021F  19F0               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1890  0220  2A2B               	goto	l1170
  1891                           
  1892                           ;CheckTouchKey.c: 498: {
  1893                           ;CheckTouchKey.c: 500: GetTouchKeyValue();
  1894  0221  21F1               	fcall	_GetTouchKeyValue
  1895                           
  1896                           ;CheckTouchKey.c: 501: if(++KeyCounter >= 8)
  1897  0222  3008               	movlw	8
  1898  0223  1283               	bcf	3,5	;RP0=0, select bank0
  1899  0224  0AC4               	incf	_KeyCounter,f
  1900  0225  0244               	subwf	_KeyCounter,w
  1901  0226  1C03               	skipc
  1902  0227  2A44               	goto	l2738
  1903                           
  1904                           ;CheckTouchKey.c: 502: {
  1905                           ;CheckTouchKey.c: 503: KeyCounter = 0;
  1906  0228  01C4               	clrf	_KeyCounter
  1907                           
  1908                           ;CheckTouchKey.c: 504: b_kover = 1;
  1909  0229  15F0               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1910  022A  2A44               	goto	l2738
  1911  022B                     l1170:	
  1912                           
  1913                           ;CheckTouchKey.c: 507: else if(!b_kover1)
  1914  022B  1970               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1915  022C  2A40               	goto	l2732
  1916                           
  1917                           ;CheckTouchKey.c: 508: {
  1918                           ;CheckTouchKey.c: 510: CheckOnceResult();
  1919  022D  2018               	fcall	_CheckOnceResult
  1920                           
  1921                           ;CheckTouchKey.c: 513: TurnKeyFlags();
  1922  022E  21C2               	fcall	_TurnKeyFlags
  1923                           
  1924                           ;CheckTouchKey.c: 514: b_kover1 = 1;
  1925  022F  1570               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1926                           
  1927                           ;CheckTouchKey.c: 520: if(b_kerr || KeyCounter > KeyValidNumber)
  1928  0230  1870               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1929  0231  2A38               	goto	l2722
  1930  0232  3002               	movlw	2
  1931  0233  1283               	bcf	3,5	;RP0=0, select bank0
  1932  0234  1303               	bcf	3,6	;RP1=0, select bank0
  1933  0235  0244               	subwf	_KeyCounter,w
  1934  0236  1C03               	skipc
  1935  0237  2A3C               	goto	l2730
  1936  0238                     l2722:	
  1937                           
  1938                           ;CheckTouchKey.c: 521: {
  1939                           ;CheckTouchKey.c: 522: KeyStopClear();
  1940  0238  22E4               	fcall	_KeyStopClear
  1941                           
  1942                           ;CheckTouchKey.c: 523: b_kerr = 0;
  1943  0239  1070               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1944                           
  1945                           ;CheckTouchKey.c: 524: b_kover = 0;
  1946  023A  11F0               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1947                           
  1948                           ;CheckTouchKey.c: 525: b_kover1 = 0;
  1949  023B  1170               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1950  023C                     l2730:	
  1951                           
  1952                           ;CheckTouchKey.c: 526: }
  1953                           ;CheckTouchKey.c: 527: KeyCounter = 0;
  1954  023C  1283               	bcf	3,5	;RP0=0, select bank0
  1955  023D  1303               	bcf	3,6	;RP1=0, select bank0
  1956  023E  01C4               	clrf	_KeyCounter
  1957                           
  1958                           ;CheckTouchKey.c: 528: }
  1959  023F  2A44               	goto	l2738
  1960  0240                     l2732:	
  1961                           
  1962                           ;CheckTouchKey.c: 529: else
  1963                           ;CheckTouchKey.c: 530: {
  1964                           ;CheckTouchKey.c: 532: CheckKeyOldValue();
  1965  0240  2104               	fcall	_CheckKeyOldValue
  1966                           
  1967                           ;CheckTouchKey.c: 534: ClearResSum();
  1968  0241  2349               	fcall	_ClearResSum
  1969                           
  1970                           ;CheckTouchKey.c: 536: b_kover = 0;
  1971  0242  11F0               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1972                           
  1973                           ;CheckTouchKey.c: 537: b_kover1 = 0;
  1974  0243  1170               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1975  0244                     l2738:	
  1976                           
  1977                           ;CheckTouchKey.c: 538: }
  1978                           ;CheckTouchKey.c: 540: CheckValidTime();
  1979  0244  2B14               	ljmp	l2456
  1980  0245                     __end_of_CheckTouchKey:	
  1981                           
  1982                           	psect	text18
  1983  01C2                     __ptext18:	
  1984 ;; *************** function _TurnKeyFlags *****************
  1985 ;; Defined at:
  1986 ;;		line 382 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;		None
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;		None
  1991 ;; Return value:  Size  Location     Type
  1992 ;;                  1    wreg      void 
  1993 ;; Registers used:
  1994 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1995 ;; Tracked objects:
  1996 ;;		On entry : B00/0
  1997 ;;		On exit  : 0/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2000 ;;      Params:         0       0       0       0
  2001 ;;      Locals:         0       0       0       0
  2002 ;;      Temps:          0       0       0       0
  2003 ;;      Totals:         0       0       0       0
  2004 ;;Total ram usage:        0 bytes
  2005 ;; Hardware stack levels used:    1
  2006 ;; Hardware stack levels required when called:    4
  2007 ;; This function calls:
  2008 ;;		_KeyClearIn
  2009 ;; This function is called by:
  2010 ;;		_CheckTouchKey
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           
  2015                           ;psect for function _TurnKeyFlags
  2016  01C2                     _TurnKeyFlags:	
  2017                           
  2018                           ;CheckTouchKey.c: 384: static unsigned char KeyHaveTimes = 0;
  2019                           ;CheckTouchKey.c: 385: static unsigned char KeyNoTimes = 0;
  2020                           ;CheckTouchKey.c: 387: if(KeyData[0] | KeyData[1])
  2021                           
  2022                           ;incstack = 0
  2023                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2024  01C2  0837               	movf	_KeyData+1,w	;volatile
  2025  01C3  0436               	iorwf	_KeyData,w	;volatile
  2026  01C4  1903               	btfsc	3,2
  2027  01C5  29E4               	goto	l2448
  2028                           
  2029                           ;CheckTouchKey.c: 388: {
  2030                           ;CheckTouchKey.c: 389: KeyNoTimes = 0;
  2031  01C6  01C0               	clrf	TurnKeyFlags@KeyNoTimes
  2032                           
  2033                           ;CheckTouchKey.c: 391: if(KeyData[0] == KeyOldData[0] && KeyData[1] == KeyOldData[1])
  2034  01C7  0836               	movf	_KeyData,w	;volatile
  2035  01C8  0638               	xorwf	_KeyOldData,w	;volatile
  2036  01C9  1D03               	skipz
  2037  01CA  29DD               	goto	l1151
  2038  01CB  0837               	movf	_KeyData+1,w	;volatile
  2039  01CC  0639               	xorwf	_KeyOldData+1,w	;volatile
  2040  01CD  1D03               	skipz
  2041  01CE  29DD               	goto	l1151
  2042  01CF  3002               	movlw	2
  2043  01D0  0AC1               	incf	TurnKeyFlags@KeyHaveTimes,f
  2044  01D1  0241               	subwf	TurnKeyFlags@KeyHaveTimes,w
  2045  01D2  1C03               	skipc
  2046  01D3  0008               	return
  2047                           
  2048                           ;CheckTouchKey.c: 394: {
  2049                           ;CheckTouchKey.c: 395: KeyHaveTimes = 0;
  2050  01D4  01C1               	clrf	TurnKeyFlags@KeyHaveTimes
  2051                           
  2052                           ;CheckTouchKey.c: 396: KeyFlag[0] = KeyData[0];
  2053  01D5  0836               	movf	_KeyData,w	;volatile
  2054  01D6  00BE               	movwf	_KeyFlag	;volatile
  2055                           
  2056                           ;CheckTouchKey.c: 397: KeyFlag[1] = KeyData[1];
  2057  01D7  0837               	movf	_KeyData+1,w	;volatile
  2058  01D8  00BF               	movwf	_KeyFlag+1	;volatile
  2059                           
  2060                           ;CheckTouchKey.c: 400: {
  2061                           ;CheckTouchKey.c: 401: if(!b_kclr)
  2062  01D9  18F0               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2063  01DA  0008               	return
  2064                           
  2065                           ;CheckTouchKey.c: 402: {
  2066                           ;CheckTouchKey.c: 403: b_kclr = 1;
  2067  01DB  14F0               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2068                           
  2069                           ;CheckTouchKey.c: 404: KeyClearIn();
  2070  01DC  2B66               	ljmp	l2204
  2071  01DD                     l1151:	
  2072                           
  2073                           ;CheckTouchKey.c: 409: else
  2074                           ;CheckTouchKey.c: 410: {
  2075                           ;CheckTouchKey.c: 411: b_kclr = 0;
  2076  01DD  10F0               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2077                           
  2078                           ;CheckTouchKey.c: 412: KeyOldData[0] = KeyData[0];
  2079  01DE  0836               	movf	_KeyData,w	;volatile
  2080  01DF  00B8               	movwf	_KeyOldData	;volatile
  2081                           
  2082                           ;CheckTouchKey.c: 413: KeyOldData[1] = KeyData[1];
  2083  01E0  0837               	movf	_KeyData+1,w	;volatile
  2084  01E1  00B9               	movwf	_KeyOldData+1	;volatile
  2085                           
  2086                           ;CheckTouchKey.c: 414: KeyHaveTimes = 0;
  2087  01E2  01C1               	clrf	TurnKeyFlags@KeyHaveTimes
  2088                           
  2089                           ;CheckTouchKey.c: 415: }
  2090                           ;CheckTouchKey.c: 416: }
  2091  01E3  0008               	return
  2092  01E4                     l2448:	
  2093                           
  2094                           ;CheckTouchKey.c: 417: else
  2095                           ;CheckTouchKey.c: 418: {
  2096                           ;CheckTouchKey.c: 419: KeyHaveTimes = 0;
  2097  01E4  01C1               	clrf	TurnKeyFlags@KeyHaveTimes
  2098                           
  2099                           ;CheckTouchKey.c: 420: KeyOldData[0] = 0;
  2100  01E5  01B8               	clrf	_KeyOldData	;volatile
  2101                           
  2102                           ;CheckTouchKey.c: 421: KeyOldData[1] = 0;
  2103  01E6  01B9               	clrf	_KeyOldData+1	;volatile
  2104                           
  2105                           ;CheckTouchKey.c: 423: if(++KeyNoTimes >=2)
  2106  01E7  3002               	movlw	2
  2107  01E8  0AC0               	incf	TurnKeyFlags@KeyNoTimes,f
  2108  01E9  0240               	subwf	TurnKeyFlags@KeyNoTimes,w
  2109  01EA  1C03               	skipc
  2110  01EB  0008               	return
  2111                           
  2112                           ;CheckTouchKey.c: 424: {
  2113                           ;CheckTouchKey.c: 425: KeyNoTimes = 0;
  2114  01EC  01C0               	clrf	TurnKeyFlags@KeyNoTimes
  2115                           
  2116                           ;CheckTouchKey.c: 426: KeyFlag[0] = 0;
  2117  01ED  01BE               	clrf	_KeyFlag	;volatile
  2118                           
  2119                           ;CheckTouchKey.c: 427: KeyFlag[1] = 0;
  2120  01EE  01BF               	clrf	_KeyFlag+1	;volatile
  2121                           
  2122                           ;CheckTouchKey.c: 429: b_kclr = 0;
  2123  01EF  10F0               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2124  01F0  0008               	return
  2125  01F1                     __end_of_TurnKeyFlags:	
  2126                           
  2127                           	psect	text19
  2128  0366                     __ptext19:	
  2129 ;; *************** function _KeyClearIn *****************
  2130 ;; Defined at:
  2131 ;;		line 88 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;		None
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;  cnt             1    4[COMMON] unsigned char 
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      void 
  2138 ;; Registers used:
  2139 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2140 ;; Tracked objects:
  2141 ;;		On entry : B00/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2145 ;;      Params:         0       0       0       0
  2146 ;;      Locals:         1       0       0       0
  2147 ;;      Temps:          0       0       0       0
  2148 ;;      Totals:         1       0       0       0
  2149 ;;Total ram usage:        1 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    3
  2152 ;; This function calls:
  2153 ;;		_KeyClearOne
  2154 ;;		_KeyIsIn
  2155 ;; This function is called by:
  2156 ;;		_TurnKeyFlags
  2157 ;; This function uses a non-reentrant model
  2158 ;;
  2159                           
  2160                           
  2161                           ;psect for function _KeyClearIn
  2162  0366                     _KeyClearIn:	
  2163  0366                     l2204:	
  2164                           ;incstack = 0
  2165                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2166                           
  2167                           
  2168                           ;CheckTouchKey.c: 90: unsigned char cnt;
  2169                           ;CheckTouchKey.c: 91: for(cnt=0;cnt < KeyTotalNumber;cnt++)
  2170  0366  01F6               	clrf	KeyClearIn@cnt
  2171  0367                     l2210:	
  2172                           
  2173                           ;CheckTouchKey.c: 92: {
  2174                           ;CheckTouchKey.c: 93: if(!KeyIsIn(cnt))
  2175  0367  0876               	movf	KeyClearIn@cnt,w
  2176  0368  2326               	fcall	_KeyIsIn
  2177  0369  3A00               	xorlw	0
  2178  036A  1D03               	skipz
  2179  036B  2B6E               	goto	l2214
  2180                           
  2181                           ;CheckTouchKey.c: 94: {
  2182                           ;CheckTouchKey.c: 95: KeyClearOne(cnt);
  2183  036C  0876               	movf	KeyClearIn@cnt,w
  2184  036D  22A1               	fcall	_KeyClearOne
  2185  036E                     l2214:	
  2186  036E  3002               	movlw	2
  2187  036F  0AF6               	incf	KeyClearIn@cnt,f
  2188  0370  0276               	subwf	KeyClearIn@cnt,w
  2189  0371  1803               	btfsc	3,0
  2190  0372  0008               	return
  2191  0373  2B67               	goto	l2210
  2192  0374                     __end_of_KeyClearIn:	
  2193                           
  2194                           	psect	text20
  2195  02E4                     __ptext20:	
  2196 ;; *************** function _KeyStopClear *****************
  2197 ;; Defined at:
  2198 ;;		line 107 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;		None
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  i               1    3[COMMON] unsigned char 
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 800/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2212 ;;      Params:         0       0       0       0
  2213 ;;      Locals:         1       0       0       0
  2214 ;;      Temps:          0       0       0       0
  2215 ;;      Totals:         1       0       0       0
  2216 ;;Total ram usage:        1 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; Hardware stack levels required when called:    2
  2219 ;; This function calls:
  2220 ;;		_KeyClearOne
  2221 ;; This function is called by:
  2222 ;;		_CheckTouchKey
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           
  2227                           ;psect for function _KeyStopClear
  2228  02E4                     _KeyStopClear:	
  2229                           
  2230                           ;CheckTouchKey.c: 109: unsigned char i;
  2231                           ;CheckTouchKey.c: 110: KeyFlag[0] = 0;
  2232                           
  2233                           ;incstack = 0
  2234                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2235  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  2236  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  2237  02E6  01BE               	clrf	_KeyFlag	;volatile
  2238                           
  2239                           ;CheckTouchKey.c: 111: KeyFlag[1] = 0;
  2240  02E7  01BF               	clrf	_KeyFlag+1	;volatile
  2241                           
  2242                           ;CheckTouchKey.c: 112: for(i = 0; i < KeyTotalNumber; i++)
  2243  02E8  01F5               	clrf	KeyStopClear@i
  2244  02E9                     l2288:	
  2245                           
  2246                           ;CheckTouchKey.c: 113: {
  2247                           ;CheckTouchKey.c: 114: KeyResSum[i] = 0;
  2248  02E9  1003               	clrc
  2249  02EA  0D75               	rlf	KeyStopClear@i,w
  2250  02EB  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2251  02EC  0084               	movwf	4
  2252  02ED  1383               	bcf	3,7	;select IRP bank0
  2253  02EE  0180               	clrf	0
  2254  02EF  0A84               	incf	4,f
  2255  02F0  0180               	clrf	0
  2256                           
  2257                           ;CheckTouchKey.c: 115: KeyClearOne(i);
  2258  02F1  0875               	movf	KeyStopClear@i,w
  2259  02F2  22A1               	fcall	_KeyClearOne
  2260  02F3  3002               	movlw	2
  2261  02F4  0AF5               	incf	KeyStopClear@i,f
  2262  02F5  0275               	subwf	KeyStopClear@i,w
  2263  02F6  1803               	btfsc	3,0
  2264  02F7  0008               	return
  2265  02F8  2AE9               	goto	l2288
  2266  02F9                     __end_of_KeyStopClear:	
  2267                           
  2268                           	psect	text21
  2269  01F1                     __ptext21:	
  2270 ;; *************** function _GetTouchKeyValue *****************
  2271 ;; Defined at:
  2272 ;;		line 180 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;		None
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  cnt             1    4[COMMON] unsigned char 
  2277 ;;  temp            1    3[COMMON] unsigned char 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  1    wreg      void 
  2280 ;; Registers used:
  2281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 300/0
  2284 ;;		On exit  : A00/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2287 ;;      Params:         0       0       0       0
  2288 ;;      Locals:         2       0       0       0
  2289 ;;      Temps:          0       0       0       0
  2290 ;;      Totals:         2       0       0       0
  2291 ;;Total ram usage:        2 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    2
  2294 ;; This function calls:
  2295 ;;		_ClearResSum
  2296 ;; This function is called by:
  2297 ;;		_CheckTouchKey
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           
  2302                           ;psect for function _GetTouchKeyValue
  2303  01F1                     _GetTouchKeyValue:	
  2304                           
  2305                           ;CheckTouchKey.c: 182: unsigned char cnt = 0,temp;
  2306                           
  2307                           ;incstack = 0
  2308                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2309  01F1  01F6               	clrf	GetTouchKeyValue@cnt
  2310  01F2                     l1091:	
  2311                           ;CheckTouchKey.c: 184: do
  2312                           
  2313                           
  2314                           ;CheckTouchKey.c: 185: {
  2315                           ;CheckTouchKey.c: 186: KEYCON0 = 0;
  2316  01F2  1683               	bsf	3,5	;RP0=1, select bank1
  2317  01F3  0192               	clrf	18	;volatile
  2318                           
  2319                           ;CheckTouchKey.c: 187: KEYCON1 = 0;
  2320  01F4  0193               	clrf	19	;volatile
  2321                           
  2322                           ;CheckTouchKey.c: 194: KEYCON0 = Table_KeyCap[cnt];
  2323  01F5  0876               	movf	GetTouchKeyValue@cnt,w
  2324  01F6  3E0B               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  2325  01F7  0084               	movwf	4
  2326  01F8  2300               	fcall	stringdir
  2327  01F9  0092               	movwf	18	;volatile
  2328                           
  2329                           ;CheckTouchKey.c: 195: KEYCON1 = Table_KeyChannel[cnt];
  2330  01FA  0876               	movf	GetTouchKeyValue@cnt,w
  2331  01FB  3E0D               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  2332  01FC  0084               	movwf	4
  2333  01FD  2300               	fcall	stringdir
  2334  01FE  0093               	movwf	19	;volatile
  2335                           
  2336                           ;CheckTouchKey.c: 196: KEYCON0 |= 0x1;
  2337  01FF  1412               	bsf	18,0	;volatile
  2338                           
  2339                           ;CheckTouchKey.c: 198: temp = 0;
  2340  0200  01F5               	clrf	GetTouchKeyValue@temp
  2341  0201                     l1092:	
  2342                           ;CheckTouchKey.c: 199: while(!(KEYCON0&0x80))
  2343                           
  2344  0201  1B92               	btfsc	18,7	;volatile
  2345  0202  2A09               	goto	l2310
  2346                           
  2347                           ;CheckTouchKey.c: 200: {
  2348                           ;CheckTouchKey.c: 201: if(0 == (--temp))
  2349  0203  0BF5               	decfsz	GetTouchKeyValue@temp,f
  2350  0204  2A01               	goto	l1092
  2351                           
  2352                           ;CheckTouchKey.c: 202: {
  2353                           ;CheckTouchKey.c: 203: KeyCounter = 255;
  2354  0205  30FF               	movlw	255
  2355  0206  1283               	bcf	3,5	;RP0=0, select bank0
  2356  0207  00C4               	movwf	_KeyCounter
  2357                           
  2358                           ;CheckTouchKey.c: 204: ClearResSum();
  2359  0208  2B49               	ljmp	l2218
  2360  0209                     l2310:	
  2361                           
  2362                           ;CheckTouchKey.c: 206: }
  2363                           ;CheckTouchKey.c: 207: }
  2364                           ;CheckTouchKey.c: 209: KeyResSum[cnt] += (unsigned int)((KEYDATAH<<8) | KEYDATAL);
  2365  0209  1003               	clrc
  2366  020A  0D76               	rlf	GetTouchKeyValue@cnt,w
  2367  020B  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2368  020C  0084               	movwf	4
  2369  020D  0814               	movf	20,w	;volatile
  2370  020E  1383               	bcf	3,7	;select IRP bank0
  2371  020F  0780               	addwf	0,f
  2372  0210  0F84               	incfsz	4,f
  2373  0211  0800               	movf	0,w
  2374  0212  1803               	skipnc
  2375  0213  0A00               	incf	0,w
  2376  0214  00FF               	movwf	127
  2377  0215  0815               	movf	21,w	;volatile
  2378  0216  077F               	addwf	127,w
  2379  0217  0080               	movwf	0
  2380  0218  3002               	movlw	2
  2381  0219  0384               	decf	4,f
  2382  021A  0AF6               	incf	GetTouchKeyValue@cnt,f
  2383  021B  0276               	subwf	GetTouchKeyValue@cnt,w
  2384  021C  1803               	btfsc	3,0
  2385  021D  0008               	return
  2386  021E  29F2               	goto	l1091
  2387  021F                     __end_of_GetTouchKeyValue:	
  2388                           
  2389                           	psect	text22
  2390  0349                     __ptext22:	
  2391 ;; *************** function _ClearResSum *****************
  2392 ;; Defined at:
  2393 ;;		line 126 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;		None
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;  cnt             1    2[COMMON] unsigned char 
  2398 ;; Return value:  Size  Location     Type
  2399 ;;                  1    wreg      void 
  2400 ;; Registers used:
  2401 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2402 ;; Tracked objects:
  2403 ;;		On entry : 300/0
  2404 ;;		On exit  : B00/0
  2405 ;;		Unchanged: 300/0
  2406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2407 ;;      Params:         0       0       0       0
  2408 ;;      Locals:         1       0       0       0
  2409 ;;      Temps:          0       0       0       0
  2410 ;;      Totals:         1       0       0       0
  2411 ;;Total ram usage:        1 bytes
  2412 ;; Hardware stack levels used:    1
  2413 ;; Hardware stack levels required when called:    1
  2414 ;; This function calls:
  2415 ;;		Nothing
  2416 ;; This function is called by:
  2417 ;;		_GetTouchKeyValue
  2418 ;;		_CheckTouchKey
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           
  2423                           ;psect for function _ClearResSum
  2424  0349                     _ClearResSum:	
  2425  0349                     l2218:	
  2426                           ;incstack = 0
  2427                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  2428                           
  2429                           
  2430                           ;CheckTouchKey.c: 128: unsigned char cnt = 0;
  2431  0349  01F4               	clrf	ClearResSum@cnt
  2432  034A                     l2220:	
  2433                           
  2434                           ;CheckTouchKey.c: 130: {
  2435                           ;CheckTouchKey.c: 131: KeyResSum[cnt] = 0;
  2436  034A  1003               	clrc
  2437  034B  0D74               	rlf	ClearResSum@cnt,w
  2438  034C  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2439  034D  0084               	movwf	4
  2440  034E  3002               	movlw	2
  2441  034F  1383               	bcf	3,7	;select IRP bank0
  2442  0350  0180               	clrf	0
  2443  0351  0A84               	incf	4,f
  2444  0352  0180               	clrf	0
  2445  0353  0AF4               	incf	ClearResSum@cnt,f
  2446  0354  0274               	subwf	ClearResSum@cnt,w
  2447  0355  1803               	btfsc	3,0
  2448  0356  0008               	return
  2449  0357  2B4A               	goto	l2220
  2450  0358                     __end_of_ClearResSum:	
  2451                           
  2452                           	psect	text23
  2453  0314                     __ptext23:	
  2454 ;; *************** function _CheckValidTime *****************
  2455 ;; Defined at:
  2456 ;;		line 467 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;		None
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      void 
  2463 ;; Registers used:
  2464 ;;		wreg, status,2, status,0
  2465 ;; Tracked objects:
  2466 ;;		On entry : 300/0
  2467 ;;		On exit  : 300/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2470 ;;      Params:         0       0       0       0
  2471 ;;      Locals:         0       0       0       0
  2472 ;;      Temps:          0       0       0       0
  2473 ;;      Totals:         0       0       0       0
  2474 ;;Total ram usage:        0 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    1
  2477 ;; This function calls:
  2478 ;;		Nothing
  2479 ;; This function is called by:
  2480 ;;		_CheckTouchKey
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           
  2485                           ;psect for function _CheckValidTime
  2486  0314                     _CheckValidTime:	
  2487  0314                     l2456:	
  2488                           ;incstack = 0
  2489                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  2490                           
  2491                           
  2492                           ;CheckTouchKey.c: 472: {
  2493                           ;CheckTouchKey.c: 473: if(KeyFlag[0] | KeyFlag[1])
  2494  0314  083F               	movf	_KeyFlag+1,w	;volatile
  2495  0315  043E               	iorwf	_KeyFlag,w	;volatile
  2496  0316  1903               	btfsc	3,2
  2497  0317  2B23               	goto	l2462
  2498  0318  0AB4               	incf	CheckValidTime@validtime,f
  2499  0319  1903               	skipnz
  2500  031A  0AB5               	incf	CheckValidTime@validtime+1,f
  2501  031B  303A               	movlw	58
  2502  031C  0235               	subwf	CheckValidTime@validtime+1,w
  2503  031D  3098               	movlw	152
  2504  031E  1903               	skipnz
  2505  031F  0234               	subwf	CheckValidTime@validtime,w
  2506  0320  1C03               	skipc
  2507  0321  0008               	return
  2508                           
  2509                           ;CheckTouchKey.c: 476: {
  2510                           ;CheckTouchKey.c: 477: b_kerr = 1;
  2511  0322  1470               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  2512  0323                     l2462:	
  2513                           
  2514                           ;CheckTouchKey.c: 478: validtime = 0;
  2515  0323  01B4               	clrf	CheckValidTime@validtime
  2516  0324  01B5               	clrf	CheckValidTime@validtime+1
  2517  0325  0008               	return
  2518  0326                     __end_of_CheckValidTime:	
  2519                           
  2520                           	psect	text24
  2521  0018                     __ptext24:	
  2522 ;; *************** function _CheckOnceResult *****************
  2523 ;; Defined at:
  2524 ;;		line 221 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;  KeyResTemp      2   10[BANK0 ] unsigned int 
  2529 ;;  KeyValue        2    7[BANK0 ] unsigned int 
  2530 ;;  OldValue        2    4[BANK0 ] unsigned int 
  2531 ;;  cnt             1   12[BANK0 ] unsigned char 
  2532 ;;  KeyDown         1    9[BANK0 ] unsigned char 
  2533 ;;  flag            1    6[BANK0 ] unsigned char 
  2534 ;; Return value:  Size  Location     Type
  2535 ;;                  1    wreg      void 
  2536 ;; Registers used:
  2537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2538 ;; Tracked objects:
  2539 ;;		On entry : 300/0
  2540 ;;		On exit  : B00/0
  2541 ;;		Unchanged: 0/0
  2542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2543 ;;      Params:         0       0       0       0
  2544 ;;      Locals:         0       9       0       0
  2545 ;;      Temps:          0       4       0       0
  2546 ;;      Totals:         0      13       0       0
  2547 ;;Total ram usage:       13 bytes
  2548 ;; Hardware stack levels used:    1
  2549 ;; Hardware stack levels required when called:    3
  2550 ;; This function calls:
  2551 ;;		_KeyClearOne
  2552 ;;		_KeyHave
  2553 ;;		_KeyIsIn
  2554 ;; This function is called by:
  2555 ;;		_CheckTouchKey
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           
  2560                           ;psect for function _CheckOnceResult
  2561  0018                     _CheckOnceResult:	
  2562                           
  2563                           ;CheckTouchKey.c: 223: unsigned char cnt = 0;
  2564                           
  2565                           ;incstack = 0
  2566                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2567  0018  01D3               	clrf	CheckOnceResult@cnt
  2568                           
  2569                           ;CheckTouchKey.c: 224: unsigned char KeyDown;
  2570                           ;CheckTouchKey.c: 225: unsigned char flag;
  2571                           ;CheckTouchKey.c: 227: unsigned int KeyResTemp;
  2572                           ;CheckTouchKey.c: 228: unsigned int KeyValue;
  2573                           ;CheckTouchKey.c: 229: unsigned int OldValue;
  2574                           ;CheckTouchKey.c: 231: KeyData[0] = 0;
  2575  0019  01B6               	clrf	_KeyData	;volatile
  2576                           
  2577                           ;CheckTouchKey.c: 232: KeyData[1] = 0;
  2578  001A  01B7               	clrf	_KeyData+1	;volatile
  2579                           
  2580                           ;CheckTouchKey.c: 233: KeyMaxSub = 0;
  2581  001B  01C3               	clrf	_KeyMaxSub
  2582  001C                     l2638:	
  2583                           
  2584                           ;CheckTouchKey.c: 237: {
  2585                           ;CheckTouchKey.c: 238: flag = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  2586  001C  0853               	movf	CheckOnceResult@cnt,w
  2587  001D  3907               	andlw	7
  2588  001E  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  2589  001F  0084               	movwf	4
  2590  0020  2300               	fcall	stringdir
  2591  0021  00CD               	movwf	CheckOnceResult@flag
  2592                           
  2593                           ;CheckTouchKey.c: 240: KeyResSum[cnt] >>= 3;
  2594  0022  1003               	clrc
  2595  0023  0D53               	rlf	CheckOnceResult@cnt,w
  2596  0024  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2597  0025  0084               	movwf	4
  2598  0026  3003               	movlw	3
  2599  0027                     u1215:	
  2600  0027  0A84               	incf	4,f
  2601  0028  1003               	clrc
  2602  0029  1383               	bcf	3,7	;select IRP bank0
  2603  002A  0C80               	rrf	0,f
  2604  002B  0384               	decf	4,f
  2605  002C  0C80               	rrf	0,f
  2606  002D  3EFF               	addlw	-1
  2607  002E  1D03               	skipz
  2608  002F  2827               	goto	u1215
  2609                           
  2610                           ;CheckTouchKey.c: 241: KeyResTemp = KeyResSum[cnt];
  2611  0030  1003               	clrc
  2612  0031  0D53               	rlf	CheckOnceResult@cnt,w
  2613  0032  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2614  0033  0084               	movwf	4
  2615  0034  0800               	movf	0,w
  2616  0035  00D1               	movwf	CheckOnceResult@KeyResTemp
  2617  0036  0A84               	incf	4,f
  2618  0037  0800               	movf	0,w
  2619  0038  00D2               	movwf	CheckOnceResult@KeyResTemp+1
  2620                           
  2621                           ;CheckTouchKey.c: 242: KeyDown = Table_KeyDown[cnt];
  2622  0039  0853               	movf	CheckOnceResult@cnt,w
  2623  003A  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  2624  003B  0084               	movwf	4
  2625  003C  2300               	fcall	stringdir
  2626  003D  00D0               	movwf	CheckOnceResult@KeyDown
  2627                           
  2628                           ;CheckTouchKey.c: 244: KeyValue = KeyResTemp + KeyDown;
  2629  003E  00CE               	movwf	CheckOnceResult@KeyValue
  2630  003F  01CF               	clrf	CheckOnceResult@KeyValue+1
  2631  0040  0851               	movf	CheckOnceResult@KeyResTemp,w
  2632  0041  07CE               	addwf	CheckOnceResult@KeyValue,f
  2633  0042  1803               	skipnc
  2634  0043  0ACF               	incf	CheckOnceResult@KeyValue+1,f
  2635  0044  0852               	movf	CheckOnceResult@KeyResTemp+1,w
  2636  0045  07CF               	addwf	CheckOnceResult@KeyValue+1,f
  2637                           
  2638                           ;CheckTouchKey.c: 246: if(!KeyIsIn(cnt))
  2639  0046  0853               	movf	CheckOnceResult@cnt,w
  2640  0047  2326               	fcall	_KeyIsIn
  2641  0048  3A00               	xorlw	0
  2642                           
  2643                           ;CheckTouchKey.c: 247: {
  2644                           ;CheckTouchKey.c: 249: OldValue = KeyOldValue2[cnt];
  2645  0049  1003               	clrc
  2646  004A  1D03               	skipz
  2647  004B  28A3               	goto	L4
  2648  004C  0D53               	rlf	CheckOnceResult@cnt,w
  2649  004D  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2650  004E  0084               	movwf	4
  2651  004F  1383               	bcf	3,7	;select IRP bank0
  2652  0050  0800               	movf	0,w
  2653  0051  00CB               	movwf	CheckOnceResult@OldValue
  2654  0052  0A84               	incf	4,f
  2655  0053  0800               	movf	0,w
  2656  0054  00CC               	movwf	CheckOnceResult@OldValue+1
  2657                           
  2658                           ;CheckTouchKey.c: 251: if(KeyReference[cnt] > KeyValue)
  2659  0055  1003               	clrc
  2660  0056  0D53               	rlf	CheckOnceResult@cnt,w
  2661  0057  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2662  0058  20FD               	fcall	PL6	;call to abstracted procedure
  2663  0059  024F               	subwf	CheckOnceResult@KeyValue+1,w
  2664  005A  1D03               	skipz
  2665  005B  285E               	goto	u1235
  2666  005C  0847               	movf	??_CheckOnceResult,w
  2667  005D  024E               	subwf	CheckOnceResult@KeyValue,w
  2668  005E                     u1235:	
  2669  005E  1803               	skipnc
  2670  005F  286C               	goto	l2656
  2671                           
  2672                           ;CheckTouchKey.c: 252: {
  2673                           ;CheckTouchKey.c: 253: KeyResTemp = KeyReference[cnt] - KeyResTemp;
  2674  0060  1003               	clrc
  2675  0061  0D53               	rlf	CheckOnceResult@cnt,w
  2676  0062  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2677  0063  20FD               	fcall	PL6	;call to abstracted procedure
  2678  0064  0851               	movf	CheckOnceResult@KeyResTemp,w
  2679  0065  0247               	subwf	??_CheckOnceResult,w
  2680  0066  00D1               	movwf	CheckOnceResult@KeyResTemp
  2681  0067  0852               	movf	CheckOnceResult@KeyResTemp+1,w
  2682  0068  1C03               	skipc
  2683  0069  0A52               	incf	CheckOnceResult@KeyResTemp+1,w
  2684  006A  0248               	subwf	??_CheckOnceResult+1,w
  2685  006B  288F               	goto	L2
  2686  006C                     l2656:	
  2687                           ;CheckTouchKey.c: 254: }
  2688                           
  2689                           
  2690                           ;CheckTouchKey.c: 255: else if ((OldValue > KeyValue) && (KeyOldValue1[cnt] > KeyValue))
  2691  006C  084C               	movf	CheckOnceResult@OldValue+1,w
  2692  006D  024F               	subwf	CheckOnceResult@KeyValue+1,w
  2693  006E  1D03               	skipz
  2694  006F  2872               	goto	u1245
  2695  0070  084B               	movf	CheckOnceResult@OldValue,w
  2696  0071  024E               	subwf	CheckOnceResult@KeyValue,w
  2697  0072                     u1245:	
  2698  0072  1803               	skipnc
  2699  0073  28E3               	goto	l2702
  2700  0074  1003               	clrc
  2701  0075  0D53               	rlf	CheckOnceResult@cnt,w
  2702  0076  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2703  0077  20FD               	fcall	PL6	;call to abstracted procedure
  2704  0078  024F               	subwf	CheckOnceResult@KeyValue+1,w
  2705  0079  1D03               	skipz
  2706  007A  287D               	goto	u1255
  2707  007B  0847               	movf	??_CheckOnceResult,w
  2708  007C  024E               	subwf	CheckOnceResult@KeyValue,w
  2709  007D                     u1255:	
  2710  007D  1803               	skipnc
  2711  007E  28E3               	goto	l2702
  2712                           
  2713                           ;CheckTouchKey.c: 256: {
  2714                           ;CheckTouchKey.c: 257: KeyReference[cnt] = OldValue;
  2715  007F  1003               	clrc
  2716  0080  0D53               	rlf	CheckOnceResult@cnt,w
  2717  0081  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2718  0082  0084               	movwf	4
  2719  0083  084B               	movf	CheckOnceResult@OldValue,w
  2720  0084  0080               	movwf	0
  2721  0085  0A84               	incf	4,f
  2722  0086  084C               	movf	CheckOnceResult@OldValue+1,w
  2723  0087  0080               	movwf	0
  2724                           
  2725                           ;CheckTouchKey.c: 258: KeyResTemp = OldValue - KeyResTemp;
  2726  0088  0851               	movf	CheckOnceResult@KeyResTemp,w
  2727  0089  024B               	subwf	CheckOnceResult@OldValue,w
  2728  008A  00D1               	movwf	CheckOnceResult@KeyResTemp
  2729  008B  0852               	movf	CheckOnceResult@KeyResTemp+1,w
  2730  008C  1C03               	skipc
  2731  008D  0A52               	incf	CheckOnceResult@KeyResTemp+1,w
  2732  008E  024C               	subwf	CheckOnceResult@OldValue+1,w
  2733  008F                     L2:	
  2734  008F  00D2               	movwf	CheckOnceResult@KeyResTemp+1
  2735                           
  2736                           ;CheckTouchKey.c: 263: }
  2737                           ;CheckTouchKey.c: 265: KeyUpShake[cnt] = 0;
  2738                           
  2739                           ;CheckTouchKey.c: 259: }
  2740  0090  0853               	movf	CheckOnceResult@cnt,w
  2741  0091  3E3C               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2742  0092  0084               	movwf	4
  2743  0093  0180               	clrf	0
  2744                           
  2745                           ;CheckTouchKey.c: 268: {
  2746                           ;CheckTouchKey.c: 269: if(KeyResTemp >> 8)
  2747  0094  0852               	movf	CheckOnceResult@KeyResTemp+1,w
  2748  0095  1903               	btfsc	3,2
  2749  0096  2899               	goto	l2670
  2750                           
  2751                           ;CheckTouchKey.c: 270: {
  2752                           ;CheckTouchKey.c: 271: KeyDown = 0xFF;
  2753  0097  30FF               	movlw	255
  2754  0098  289A               	goto	L3
  2755  0099                     l2670:	
  2756                           ;CheckTouchKey.c: 272: }
  2757                           
  2758                           
  2759                           ;CheckTouchKey.c: 273: else
  2760                           ;CheckTouchKey.c: 274: {
  2761                           ;CheckTouchKey.c: 275: KeyDown = KeyResTemp & 0xFF;
  2762  0099  0851               	movf	CheckOnceResult@KeyResTemp,w
  2763  009A                     L3:	
  2764  009A  00D0               	movwf	CheckOnceResult@KeyDown
  2765                           
  2766                           ;CheckTouchKey.c: 276: }
  2767                           ;CheckTouchKey.c: 278: if(KeyMaxSub < KeyDown)
  2768  009B  0243               	subwf	_KeyMaxSub,w
  2769  009C  1803               	skipnc
  2770  009D  28A1               	goto	l2676
  2771                           
  2772                           ;CheckTouchKey.c: 279: {
  2773                           ;CheckTouchKey.c: 280: KeyMaxSub = KeyDown;
  2774  009E  0850               	movf	CheckOnceResult@KeyDown,w
  2775  009F  00C3               	movwf	_KeyMaxSub
  2776  00A0  28DE               	goto	l2700
  2777  00A1                     l2676:	
  2778                           ;CheckTouchKey.c: 282: }
  2779                           
  2780                           ;CheckTouchKey.c: 281: KeyHave(cnt,flag);
  2781                           
  2782                           
  2783                           ;CheckTouchKey.c: 283: else
  2784                           ;CheckTouchKey.c: 284: {
  2785                           ;CheckTouchKey.c: 285: KeyCounter++;
  2786  00A1  0AC4               	incf	_KeyCounter,f
  2787  00A2  28E3               	goto	l2702
  2788  00A3                     L4:	
  2789                           ;CheckTouchKey.c: 294: else
  2790                           ;CheckTouchKey.c: 295: {
  2791                           ;CheckTouchKey.c: 298: if(KeyReference[cnt]+1 < KeyValue)
  2792                           
  2793  00A3  0D53               	rlf	CheckOnceResult@cnt,w
  2794  00A4  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2795  00A5  0084               	movwf	4
  2796  00A6  1383               	bcf	3,7	;select IRP bank0
  2797  00A7  0800               	movf	0,w
  2798  00A8  00C7               	movwf	??_CheckOnceResult
  2799  00A9  0A84               	incf	4,f
  2800  00AA  0800               	movf	0,w
  2801  00AB  00C8               	movwf	??_CheckOnceResult+1
  2802  00AC  0847               	movf	??_CheckOnceResult,w
  2803  00AD  3E01               	addlw	1
  2804  00AE  00C9               	movwf	??_CheckOnceResult+2
  2805  00AF  0848               	movf	??_CheckOnceResult+1,w
  2806  00B0  1803               	skipnc
  2807  00B1  3E01               	addlw	1
  2808  00B2  00CA               	movwf	??_CheckOnceResult+3
  2809  00B3  084F               	movf	CheckOnceResult@KeyValue+1,w
  2810  00B4  024A               	subwf	??_CheckOnceResult+3,w
  2811  00B5  1D03               	skipz
  2812  00B6  28B9               	goto	u1285
  2813  00B7  084E               	movf	CheckOnceResult@KeyValue,w
  2814  00B8  0249               	subwf	??_CheckOnceResult+2,w
  2815  00B9                     u1285:	
  2816  00B9  1C03               	btfss	3,0
  2817  00BA  28E3               	goto	l2702
  2818                           
  2819                           ;CheckTouchKey.c: 302: else if((KeyOldValue2[cnt]+KeyDown<KeyResTemp) || (KeyOldValue1[c
      +                          nt]+KeyDown<KeyResTemp))
  2820  00BB  1003               	clrc
  2821  00BC  0D53               	rlf	CheckOnceResult@cnt,w
  2822  00BD  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2823  00BE  0084               	movwf	4
  2824  00BF  0800               	movf	0,w
  2825  00C0  20EB               	fcall	PL4	;call to abstracted procedure
  2826  00C1  1C03               	skipc
  2827  00C2  28CB               	goto	l2690
  2828  00C3  1003               	clrc
  2829  00C4  0D53               	rlf	CheckOnceResult@cnt,w
  2830  00C5  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2831  00C6  0084               	movwf	4
  2832  00C7  0800               	movf	0,w
  2833  00C8  20EB               	fcall	PL4	;call to abstracted procedure
  2834  00C9  1803               	skipnc
  2835  00CA  28D6               	goto	l2694
  2836  00CB                     l2690:	
  2837                           
  2838                           ;CheckTouchKey.c: 303: {
  2839                           ;CheckTouchKey.c: 304: if(++KeyUpShake[cnt] > 8)
  2840  00CB  0853               	movf	CheckOnceResult@cnt,w
  2841  00CC  3E3C               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2842  00CD  0084               	movwf	4
  2843  00CE  3009               	movlw	9
  2844  00CF  0A80               	incf	0,f
  2845  00D0  0200               	subwf	0,w
  2846  00D1  1C03               	skipc
  2847  00D2  28DA               	goto	l2698
  2848                           
  2849                           ;CheckTouchKey.c: 305: {
  2850                           ;CheckTouchKey.c: 306: KeyClearOne(cnt);
  2851  00D3  0853               	movf	CheckOnceResult@cnt,w
  2852  00D4  22A1               	fcall	_KeyClearOne
  2853                           
  2854                           ;CheckTouchKey.c: 307: continue;
  2855  00D5  28E3               	goto	l2702
  2856  00D6                     l2694:	
  2857                           
  2858                           ;CheckTouchKey.c: 310: else
  2859                           ;CheckTouchKey.c: 311: {
  2860                           ;CheckTouchKey.c: 312: KeyUpShake[cnt] = 0;
  2861  00D6  0853               	movf	CheckOnceResult@cnt,w
  2862  00D7  3E3C               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2863  00D8  0084               	movwf	4
  2864  00D9  0180               	clrf	0
  2865  00DA                     l2698:	
  2866                           
  2867                           ;CheckTouchKey.c: 319: else if(!(KeyData[0] | KeyData[1]))
  2868  00DA  0837               	movf	_KeyData+1,w	;volatile
  2869  00DB  0436               	iorwf	_KeyData,w	;volatile
  2870  00DC  1D03               	btfss	3,2
  2871  00DD  28E3               	goto	l2702
  2872  00DE                     l2700:	
  2873                           
  2874                           ;CheckTouchKey.c: 320: {
  2875                           ;CheckTouchKey.c: 321: KeyHave(cnt,flag);
  2876  00DE  084D               	movf	CheckOnceResult@flag,w
  2877  00DF  00F4               	movwf	KeyHave@flag
  2878  00E0  01F5               	clrf	KeyHave@flag+1
  2879  00E1  0853               	movf	CheckOnceResult@cnt,w
  2880  00E2  2374               	fcall	_KeyHave
  2881  00E3                     l2702:	
  2882  00E3  3002               	movlw	2
  2883  00E4  1283               	bcf	3,5	;RP0=0, select bank0
  2884  00E5  1303               	bcf	3,6	;RP1=0, select bank0
  2885  00E6  0AD3               	incf	CheckOnceResult@cnt,f
  2886  00E7  0253               	subwf	CheckOnceResult@cnt,w
  2887  00E8  1803               	btfsc	3,0
  2888  00E9  0008               	return
  2889  00EA  281C               	goto	l2638
  2890  00EB                     __end_of_CheckOnceResult:	
  2891  00EB                     PL4:	
  2892  00EB  00C7               	movwf	??_CheckOnceResult
  2893  00EC  0A84               	incf	4,f
  2894  00ED  0800               	movf	0,w
  2895  00EE  00C8               	movwf	??_CheckOnceResult+1
  2896  00EF  0850               	movf	CheckOnceResult@KeyDown,w
  2897  00F0  0747               	addwf	??_CheckOnceResult,w
  2898  00F1  00C9               	movwf	??_CheckOnceResult+2
  2899  00F2  0848               	movf	??_CheckOnceResult+1,w
  2900  00F3  1803               	skipnc
  2901  00F4  0A48               	incf	??_CheckOnceResult+1,w
  2902  00F5  00CA               	movwf	??_CheckOnceResult+3
  2903  00F6  0852               	movf	CheckOnceResult@KeyResTemp+1,w
  2904  00F7  024A               	subwf	??_CheckOnceResult+3,w
  2905  00F8  1D03               	skipz
  2906  00F9  0008               	return
  2907  00FA  0851               	movf	CheckOnceResult@KeyResTemp,w
  2908  00FB  0249               	subwf	??_CheckOnceResult+2,w
  2909  00FC  0008               	return
  2910  00FD                     __end_ofPL4:	
  2911  00FD                     PL6:	
  2912  00FD  0084               	movwf	4
  2913  00FE  0800               	movf	0,w
  2914  00FF  00C7               	movwf	??_CheckOnceResult
  2915  0100  0A84               	incf	4,f
  2916  0101  0800               	movf	0,w
  2917  0102  00C8               	movwf	??_CheckOnceResult+1
  2918  0103  0008               	return
  2919  0104                     __end_ofPL6:	
  2920                           
  2921                           	psect	text25
  2922  0374                     __ptext25:	
  2923 ;; *************** function _KeyHave *****************
  2924 ;; Defined at:
  2925 ;;		line 142 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;  cnt             1    wreg     unsigned char 
  2928 ;;  flag            2    2[COMMON] unsigned int 
  2929 ;; Auto vars:     Size  Location     Type
  2930 ;;  cnt             1    4[COMMON] unsigned char 
  2931 ;; Return value:  Size  Location     Type
  2932 ;;                  1    wreg      void 
  2933 ;; Registers used:
  2934 ;;		wreg, status,2, status,0
  2935 ;; Tracked objects:
  2936 ;;		On entry : B00/0
  2937 ;;		On exit  : B00/0
  2938 ;;		Unchanged: 800/0
  2939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2940 ;;      Params:         2       0       0       0
  2941 ;;      Locals:         1       0       0       0
  2942 ;;      Temps:          0       0       0       0
  2943 ;;      Totals:         3       0       0       0
  2944 ;;Total ram usage:        3 bytes
  2945 ;; Hardware stack levels used:    1
  2946 ;; Hardware stack levels required when called:    1
  2947 ;; This function calls:
  2948 ;;		Nothing
  2949 ;; This function is called by:
  2950 ;;		_CheckOnceResult
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           
  2955                           ;psect for function _KeyHave
  2956  0374                     _KeyHave:	
  2957                           
  2958                           ;incstack = 0
  2959                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  2960                           ;KeyHave@cnt stored from wreg
  2961  0374  00F6               	movwf	KeyHave@cnt
  2962                           
  2963                           ;CheckTouchKey.c: 144: KeyCounter++;
  2964  0375  0AC4               	incf	_KeyCounter,f
  2965                           
  2966                           ;CheckTouchKey.c: 147: {
  2967                           ;CheckTouchKey.c: 148: KeyData[0] = 0;
  2968  0376  01B6               	clrf	_KeyData	;volatile
  2969                           
  2970                           ;CheckTouchKey.c: 149: KeyData[1] = 0;
  2971  0377  01B7               	clrf	_KeyData+1	;volatile
  2972                           
  2973                           ;CheckTouchKey.c: 150: if(cnt&0x8)
  2974  0378  1DF6               	btfss	KeyHave@cnt,3
  2975  0379  2B7D               	goto	l2234
  2976                           
  2977                           ;CheckTouchKey.c: 151: {
  2978                           ;CheckTouchKey.c: 152: KeyData[1] = flag;
  2979  037A  0874               	movf	KeyHave@flag,w
  2980  037B  00B7               	movwf	_KeyData+1	;volatile
  2981                           
  2982                           ;CheckTouchKey.c: 153: }
  2983  037C  0008               	return
  2984  037D                     l2234:	
  2985                           
  2986                           ;CheckTouchKey.c: 154: else
  2987                           ;CheckTouchKey.c: 155: {
  2988                           ;CheckTouchKey.c: 156: KeyData[0] = flag;
  2989  037D  0874               	movf	KeyHave@flag,w
  2990  037E  00B6               	movwf	_KeyData	;volatile
  2991  037F  0008               	return
  2992  0380                     __end_of_KeyHave:	
  2993                           
  2994                           	psect	text26
  2995  02A1                     __ptext26:	
  2996 ;; *************** function _KeyClearOne *****************
  2997 ;; Defined at:
  2998 ;;		line 80 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2999 ;; Parameters:    Size  Location     Type
  3000 ;;  cnt             1    wreg     unsigned char 
  3001 ;; Auto vars:     Size  Location     Type
  3002 ;;  cnt             1    2[COMMON] unsigned char 
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  1    wreg      void 
  3005 ;; Registers used:
  3006 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 800/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3012 ;;      Params:         0       0       0       0
  3013 ;;      Locals:         1       0       0       0
  3014 ;;      Temps:          0       0       0       0
  3015 ;;      Totals:         1       0       0       0
  3016 ;;Total ram usage:        1 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; Hardware stack levels required when called:    1
  3019 ;; This function calls:
  3020 ;;		Nothing
  3021 ;; This function is called by:
  3022 ;;		_KeyClearIn
  3023 ;;		_KeyStopClear
  3024 ;;		_CheckOnceResult
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           
  3029                           ;psect for function _KeyClearOne
  3030  02A1                     _KeyClearOne:	
  3031                           
  3032                           ;incstack = 0
  3033                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  3034                           ;KeyClearOne@cnt stored from wreg
  3035  02A1  00F4               	movwf	KeyClearOne@cnt
  3036                           
  3037                           ;CheckTouchKey.c: 82: KeyOldValue0[cnt] = 0;
  3038  02A2  1003               	clrc
  3039  02A3  0D74               	rlf	KeyClearOne@cnt,w
  3040  02A4  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3041  02A5  0084               	movwf	4
  3042  02A6  1383               	bcf	3,7	;select IRP bank0
  3043                           
  3044                           ;CheckTouchKey.c: 83: KeyOldValue1[cnt] = 0;
  3045  02A7  22B4               	fcall	PL16	;call to abstracted procedure
  3046  02A8  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3047  02A9  0084               	movwf	4
  3048                           
  3049                           ;CheckTouchKey.c: 84: KeyOldValue2[cnt] = 0;
  3050  02AA  22B4               	fcall	PL16	;call to abstracted procedure
  3051  02AB  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3052  02AC  0084               	movwf	4
  3053                           
  3054                           ;CheckTouchKey.c: 85: KeyReference[cnt] = 0;
  3055  02AD  22B4               	fcall	PL16	;call to abstracted procedure
  3056  02AE  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  3057  02AF  0084               	movwf	4
  3058  02B0  0180               	clrf	0
  3059  02B1  0A84               	incf	4,f
  3060  02B2  0180               	clrf	0
  3061  02B3  0008               	return
  3062  02B4                     __end_of_KeyClearOne:	
  3063  02B4                     PL16:	
  3064  02B4  0180               	clrf	0
  3065  02B5  0A84               	incf	4,f
  3066  02B6  0180               	clrf	0
  3067  02B7  1003               	clrc
  3068  02B8  0D74               	rlf	KeyClearOne@cnt,w
  3069  02B9  0008               	return
  3070  02BA                     __end_ofPL16:	
  3071                           
  3072                           	psect	text27
  3073  0104                     __ptext27:	
  3074 ;; *************** function _CheckKeyOldValue *****************
  3075 ;; Defined at:
  3076 ;;		line 335 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;		None
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;  KeyOldTemp      2    2[BANK0 ] unsigned int 
  3081 ;;  KeyResTemp      2    0[BANK0 ] unsigned int 
  3082 ;;  cnt             1    4[BANK0 ] unsigned char 
  3083 ;; Return value:  Size  Location     Type
  3084 ;;                  1    wreg      void 
  3085 ;; Registers used:
  3086 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3087 ;; Tracked objects:
  3088 ;;		On entry : 300/0
  3089 ;;		On exit  : 300/0
  3090 ;;		Unchanged: 0/0
  3091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3092 ;;      Params:         0       0       0       0
  3093 ;;      Locals:         0       5       0       0
  3094 ;;      Temps:          2       0       0       0
  3095 ;;      Totals:         2       5       0       0
  3096 ;;Total ram usage:        7 bytes
  3097 ;; Hardware stack levels used:    1
  3098 ;; Hardware stack levels required when called:    3
  3099 ;; This function calls:
  3100 ;;		_KeyIsIn
  3101 ;; This function is called by:
  3102 ;;		_CheckTouchKey
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           
  3107                           ;psect for function _CheckKeyOldValue
  3108  0104                     _CheckKeyOldValue:	
  3109  0104  3004               	movlw	4
  3110                           
  3111                           ;CheckTouchKey.c: 337: static unsigned char counter = 0;
  3112                           ;CheckTouchKey.c: 338: unsigned char cnt = 0;
  3113                           
  3114                           ;incstack = 0
  3115                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3116  0105  01CB               	clrf	CheckKeyOldValue@cnt
  3117                           
  3118                           ;CheckTouchKey.c: 339: unsigned int KeyResTemp;
  3119                           ;CheckTouchKey.c: 340: unsigned int KeyOldTemp;
  3120                           ;CheckTouchKey.c: 342: if(++counter < 4)
  3121  0106  0AC2               	incf	CheckKeyOldValue@counter,f
  3122  0107  0242               	subwf	CheckKeyOldValue@counter,w
  3123  0108  1C03               	btfss	3,0
  3124  0109  0008               	return
  3125                           
  3126                           ;CheckTouchKey.c: 344: counter = 0;
  3127  010A  01C2               	clrf	CheckKeyOldValue@counter
  3128  010B                     l2390:	
  3129                           
  3130                           ;CheckTouchKey.c: 347: {
  3131                           ;CheckTouchKey.c: 348: KeyResTemp = KeyResSum[cnt];
  3132  010B  1003               	clrc
  3133  010C  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3134  010D  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  3135  010E  0084               	movwf	4
  3136  010F  1383               	bcf	3,7	;select IRP bank0
  3137  0110  0800               	movf	0,w
  3138  0111  00C7               	movwf	CheckKeyOldValue@KeyResTemp
  3139  0112  0A84               	incf	4,f
  3140  0113  0800               	movf	0,w
  3141  0114  00C8               	movwf	CheckKeyOldValue@KeyResTemp+1
  3142                           
  3143                           ;CheckTouchKey.c: 349: if(!KeyIsIn(cnt))
  3144  0115  084B               	movf	CheckKeyOldValue@cnt,w
  3145  0116  2326               	fcall	_KeyIsIn
  3146  0117  3A00               	xorlw	0
  3147                           
  3148                           ;CheckTouchKey.c: 350: {
  3149                           ;CheckTouchKey.c: 352: KeyOldTemp = KeyOldValue0[cnt] - KeyResTemp;
  3150  0118  1003               	clrc
  3151  0119  1D03               	skipz
  3152  011A  294B               	goto	L8
  3153  011B  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3154  011C  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3155  011D  0084               	movwf	4
  3156  011E  1383               	bcf	3,7	;select IRP bank0
  3157                           
  3158                           ;CheckTouchKey.c: 353: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3159  011F  215C               	fcall	PL2	;call to abstracted procedure
  3160  0120  1903               	skipnz
  3161  0121  0249               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3162  0122  1C03               	skipc
  3163  0123  292A               	goto	L5
  3164  0124  0F49               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3165  0125  294A               	goto	l1133
  3166  0126  0A4A               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3167                           
  3168                           ;CheckTouchKey.c: 354: {
  3169                           ;CheckTouchKey.c: 355: KeyOldTemp = KeyOldValue1[cnt] - KeyResTemp;
  3170  0127  1003               	clrc
  3171  0128  1D03               	btfss	3,2
  3172  0129  294B               	goto	L8
  3173  012A                     L5:	
  3174  012A  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3175  012B  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3176  012C  0084               	movwf	4
  3177                           
  3178                           ;CheckTouchKey.c: 356: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3179  012D  215C               	fcall	PL2	;call to abstracted procedure
  3180  012E  1903               	skipnz
  3181  012F  0249               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3182  0130  1C03               	skipc
  3183  0131  2938               	goto	L6
  3184  0132  0F49               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3185  0133  294A               	goto	l1133
  3186  0134  0A4A               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3187                           
  3188                           ;CheckTouchKey.c: 357: {
  3189                           ;CheckTouchKey.c: 358: KeyOldTemp = KeyOldValue2[cnt] - KeyResTemp;
  3190  0135  1003               	clrc
  3191  0136  1D03               	btfss	3,2
  3192  0137  294B               	goto	L8
  3193  0138                     L6:	
  3194  0138  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3195  0139  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3196  013A  0084               	movwf	4
  3197                           
  3198                           ;CheckTouchKey.c: 359: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3199  013B  215C               	fcall	PL2	;call to abstracted procedure
  3200  013C  1903               	skipnz
  3201  013D  0249               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3202  013E  1C03               	skipc
  3203  013F  2946               	goto	L7
  3204  0140  0F49               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3205  0141  294A               	goto	l1133
  3206  0142  0A4A               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3207                           
  3208                           ;CheckTouchKey.c: 360: {
  3209                           ;CheckTouchKey.c: 361: KeyReference[cnt] = KeyResTemp;
  3210  0143  1003               	clrc
  3211  0144  1D03               	btfss	3,2
  3212  0145  294B               	goto	L8
  3213  0146                     L7:	
  3214  0146  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3215  0147  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  3216  0148  0084               	movwf	4
  3217  0149  217D               	fcall	PL20	;call to abstracted procedure
  3218  014A                     l1133:	
  3219                           
  3220                           ;CheckTouchKey.c: 362: }
  3221                           ;CheckTouchKey.c: 363: }
  3222                           ;CheckTouchKey.c: 364: }
  3223                           ;CheckTouchKey.c: 365: }
  3224                           ;CheckTouchKey.c: 368: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  3225  014A  1003               	clrc
  3226  014B                     L8:	
  3227  014B  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3228  014C  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3229  014D  0084               	movwf	4
  3230  014E  1383               	bcf	3,7	;select IRP bank0
  3231  014F  2175               	fcall	PL14	;call to abstracted procedure
  3232  0150  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3233                           
  3234                           ;CheckTouchKey.c: 369: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  3235  0151  216A               	fcall	PL10	;call to abstracted procedure
  3236  0152  2175               	fcall	PL14	;call to abstracted procedure
  3237  0153  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3238                           
  3239                           ;CheckTouchKey.c: 370: KeyOldValue0[cnt] = KeyResTemp;
  3240  0154  216A               	fcall	PL10	;call to abstracted procedure
  3241  0155  217D               	fcall	PL20	;call to abstracted procedure
  3242  0156  3002               	movlw	2
  3243  0157  0ACB               	incf	CheckKeyOldValue@cnt,f
  3244  0158  024B               	subwf	CheckKeyOldValue@cnt,w
  3245  0159  1803               	btfsc	3,0
  3246  015A  0008               	return
  3247  015B  290B               	goto	l2390
  3248  015C                     __end_of_CheckKeyOldValue:	
  3249  015C                     PL2:	
  3250  015C  0800               	movf	0,w
  3251  015D  00C9               	movwf	CheckKeyOldValue@KeyOldTemp
  3252  015E  0A84               	incf	4,f
  3253  015F  0800               	movf	0,w
  3254  0160  00CA               	movwf	CheckKeyOldValue@KeyOldTemp+1
  3255  0161  0847               	movf	CheckKeyOldValue@KeyResTemp,w
  3256  0162  02C9               	subwf	CheckKeyOldValue@KeyOldTemp,f
  3257  0163  0848               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3258  0164  1C03               	skipc
  3259  0165  03CA               	decf	CheckKeyOldValue@KeyOldTemp+1,f
  3260  0166  02CA               	subwf	CheckKeyOldValue@KeyOldTemp+1,f
  3261  0167  3000               	movlw	0
  3262  0168  024A               	subwf	CheckKeyOldValue@KeyOldTemp+1,w
  3263  0169  3402               	retlw	2
  3264  016A                     __end_ofPL2:	
  3265  016A                     PL10:	
  3266  016A  0084               	movwf	4
  3267  016B  0876               	movf	??_CheckKeyOldValue,w
  3268  016C  0080               	movwf	0
  3269  016D  0A84               	incf	4,f
  3270  016E  0877               	movf	??_CheckKeyOldValue+1,w
  3271  016F  0080               	movwf	0
  3272  0170  1003               	clrc
  3273  0171  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3274  0172  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3275  0173  0084               	movwf	4
  3276  0174  0008               	return
  3277  0175                     __end_ofPL10:	
  3278  0175                     PL14:	
  3279  0175  0800               	movf	0,w
  3280  0176  00F6               	movwf	??_CheckKeyOldValue
  3281  0177  0A84               	incf	4,f
  3282  0178  0800               	movf	0,w
  3283  0179  00F7               	movwf	??_CheckKeyOldValue+1
  3284  017A  1003               	clrc
  3285  017B  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3286  017C  0008               	return
  3287  017D                     __end_ofPL14:	
  3288  017D                     PL20:	
  3289  017D  0847               	movf	CheckKeyOldValue@KeyResTemp,w
  3290  017E  0080               	movwf	0
  3291  017F  0A84               	incf	4,f
  3292  0180  0848               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3293  0181  0080               	movwf	0
  3294  0182  0008               	return
  3295  0183                     __end_ofPL20:	
  3296                           
  3297                           	psect	text28
  3298  0326                     __ptext28:	
  3299 ;; *************** function _KeyIsIn *****************
  3300 ;; Defined at:
  3301 ;;		line 58 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;  cnt             1    wreg     unsigned char 
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;  cnt             1    3[COMMON] unsigned char 
  3306 ;;  i               1    2[COMMON] unsigned char 
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      unsigned char 
  3309 ;; Registers used:
  3310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 300/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3316 ;;      Params:         0       0       0       0
  3317 ;;      Locals:         2       0       0       0
  3318 ;;      Temps:          0       0       0       0
  3319 ;;      Totals:         2       0       0       0
  3320 ;;Total ram usage:        2 bytes
  3321 ;; Hardware stack levels used:    2
  3322 ;; Hardware stack levels required when called:    1
  3323 ;; This function calls:
  3324 ;;		Nothing
  3325 ;; This function is called by:
  3326 ;;		_KeyClearIn
  3327 ;;		_CheckOnceResult
  3328 ;;		_CheckKeyOldValue
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           
  3333                           ;psect for function _KeyIsIn
  3334  0326                     _KeyIsIn:	
  3335                           
  3336                           ;incstack = 0
  3337                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  3338                           ;KeyIsIn@cnt stored from wreg
  3339  0326  00F5               	movwf	KeyIsIn@cnt
  3340                           
  3341                           ;CheckTouchKey.c: 60: unsigned char i = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  3342  0327  3907               	andlw	7
  3343  0328  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  3344  0329  0084               	movwf	4
  3345  032A  2300               	fcall	stringdir
  3346  032B  00F4               	movwf	KeyIsIn@i
  3347                           
  3348                           ;CheckTouchKey.c: 62: if(cnt&0x8)
  3349  032C  1DF5               	btfss	KeyIsIn@cnt,3
  3350  032D  2B32               	goto	l2120
  3351                           
  3352                           ;CheckTouchKey.c: 63: {
  3353                           ;CheckTouchKey.c: 64: i &= KeyFlag[1];
  3354  032E  1283               	bcf	3,5	;RP0=0, select bank0
  3355  032F  1303               	bcf	3,6	;RP1=0, select bank0
  3356  0330  083F               	movf	_KeyFlag+1,w	;volatile
  3357  0331  2B35               	goto	L9
  3358  0332                     l2120:	
  3359                           ;CheckTouchKey.c: 65: }
  3360                           
  3361                           
  3362                           ;CheckTouchKey.c: 66: else
  3363                           ;CheckTouchKey.c: 67: {
  3364                           ;CheckTouchKey.c: 68: i &= KeyFlag[0];
  3365  0332  1283               	bcf	3,5	;RP0=0, select bank0
  3366  0333  1303               	bcf	3,6	;RP1=0, select bank0
  3367  0334  083E               	movf	_KeyFlag,w	;volatile
  3368  0335                     L9:	
  3369  0335  05F4               	andwf	KeyIsIn@i,f
  3370                           
  3371                           ;CheckTouchKey.c: 69: }
  3372                           ;CheckTouchKey.c: 70: return i;
  3373  0336  0874               	movf	KeyIsIn@i,w
  3374  0337  0008               	return
  3375  0338                     __end_of_KeyIsIn:	
  3376                           
  3377                           	psect	text29
  3378  0245                     __ptext29:	
  3379 ;; *************** function _Isr_Timer *****************
  3380 ;; Defined at:
  3381 ;;		line 257 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;		None
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;		None
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      void 
  3388 ;; Registers used:
  3389 ;;		wreg, status,2, status,0
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 300/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3395 ;;      Params:         0       0       0       0
  3396 ;;      Locals:         0       0       0       0
  3397 ;;      Temps:          2       0       0       0
  3398 ;;      Totals:         2       0       0       0
  3399 ;;Total ram usage:        2 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; This function calls:
  3402 ;;		Nothing
  3403 ;; This function is called by:
  3404 ;;		Interrupt level 1
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           
  3409                           ;psect for function _Isr_Timer
  3410  0245                     _Isr_Timer:	
  3411                           
  3412                           ;main.c: 259: if(TMR2IF)
  3413  0245  1283               	bcf	3,5	;RP0=0, select bank0
  3414  0246  1303               	bcf	3,6	;RP1=0, select bank0
  3415  0247  1C8C               	btfss	12,1	;volatile
  3416  0248  2A60               	goto	i1l2568
  3417                           
  3418                           ;main.c: 260: {
  3419                           ;main.c: 261: TMR2IF = 0;
  3420  0249  108C               	bcf	12,1	;volatile
  3421                           
  3422                           ;main.c: 263: if(++MainTime >= 32)
  3423  024A  3020               	movlw	32
  3424  024B  0AC6               	incf	_MainTime,f	;volatile
  3425  024C  0246               	subwf	_MainTime,w	;volatile
  3426  024D  1C03               	skipc
  3427  024E  2A51               	goto	i1l2558
  3428                           
  3429                           ;main.c: 264: {
  3430                           ;main.c: 265: MainTime = 0;
  3431  024F  01C6               	clrf	_MainTime	;volatile
  3432                           
  3433                           ;main.c: 266: B_MainLoop = 1;
  3434  0250  1571               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  3435  0251                     i1l2558:	
  3436                           
  3437                           ;main.c: 267: }
  3438                           ;main.c: 269: if(pwmTime < 12 && sendFlag)
  3439  0251  300C               	movlw	12
  3440  0252  0279               	subwf	_pwmTime,w	;volatile
  3441  0253  1C03               	btfss	3,0
  3442  0254  1C78               	btfss	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
  3443  0255  2A58               	goto	i1l551
  3444                           
  3445                           ;main.c: 270: PORTA&=~(1<<3);
  3446  0256  1185               	bcf	5,3	;volatile
  3447  0257  2A59               	goto	i1l2564
  3448  0258                     i1l551:	
  3449                           
  3450                           ;main.c: 271: else
  3451                           ;main.c: 272: PORTA|=(1<<3);
  3452  0258  1585               	bsf	5,3	;volatile
  3453  0259                     i1l2564:	
  3454                           
  3455                           ;main.c: 273: if(++pwmTime >= 44)
  3456  0259  302C               	movlw	44
  3457  025A  0AF9               	incf	_pwmTime,f	;volatile
  3458  025B  0279               	subwf	_pwmTime,w	;volatile
  3459  025C  1C03               	skipc
  3460  025D  2A61               	goto	i1l555
  3461                           
  3462                           ;main.c: 274: {
  3463                           ;main.c: 275: pwmTime = 0;
  3464  025E  01F9               	clrf	_pwmTime	;volatile
  3465  025F  2A61               	goto	i1l555
  3466  0260                     i1l2568:	
  3467                           
  3468                           ;main.c: 278: else
  3469                           ;main.c: 279: {
  3470                           ;main.c: 280: PIR1 = 0;
  3471  0260  018C               	clrf	12	;volatile
  3472  0261                     i1l555:	
  3473  0261  0873               	movf	??_Isr_Timer+1,w
  3474  0262  008A               	movwf	10
  3475  0263  0E72               	swapf	??_Isr_Timer^(0+-128),w
  3476  0264  0083               	movwf	3
  3477  0265  0EFE               	swapf	126,f
  3478  0266  0E7E               	swapf	126,w
  3479  0267  0009               	retfie
  3480  0268                     __end_of_Isr_Timer:	
  3481  007E                     btemp	set	126	;btemp
  3482  007E                     wtemp0	set	126
  3483                           
  3484                           	psect	intentry
  3485  0004                     __pintentry:	
  3486                           ;incstack = 0
  3487                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  3488                           
  3489  0004                     interrupt_function:	
  3490  007E                     saved_w	set	btemp
  3491  0004  00FE               	movwf	btemp
  3492  0005  0E03               	swapf	3,w
  3493  0006  00F2               	movwf	??_Isr_Timer
  3494  0007  080A               	movf	10,w
  3495  0008  00F3               	movwf	??_Isr_Timer+1
  3496  0009  2A45               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    14
    Data        2
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     13      54
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _CheckTouchKey->_CheckKeyOldValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3191
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                            _initPWM
                           _startPWM
 ---------------------------------------------------------------------------------
 (1) _startPWM                                             0     0      0       0
                           _procKey1
                           _procKey2
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            2     2      0      89
                                              2 COMMON     2     2      0
                           _procKey1
                           _procKey2
 ---------------------------------------------------------------------------------
 (2) _procKey2                                             0     0      0       0
                            _mode1_a
                            _mode1_b
                            _mode1_c
                            _mode1_d
                            _mode1_e
 ---------------------------------------------------------------------------------
 (3) _mode1_e                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode1_d                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode1_c                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode1_b                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode1_a                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _procKey1                                             0     0      0       0
                            _mode2_a
                            _mode3_a
                            _mode4_a
                            _mode5_a
 ---------------------------------------------------------------------------------
 (3) _mode5_a                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode4_a                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode3_a                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode2_a                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3102
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _GetTouchKeyValue                                     2     2      0     157
                                              3 COMMON     2     2      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (3) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1892
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     304
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (4) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
     _procKey1
       _mode2_a
       _mode3_a
       _mode4_a
       _mode5_a
     _procKey2
       _mode1_a
       _mode1_b
       _mode1_c
       _mode1_d
       _mode1_e
   _Refurbish_Sfr
   _initPWM
   _startPWM
     _procKey1
       _mode2_a
       _mode3_a
       _mode4_a
       _mode5_a
     _procKey2
       _mode1_a
       _mode1_b
       _mode1_c
       _mode1_d
       _mode1_e

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK2               50      0       0       9        0.0%
BITBANK2            50      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      D      36       3       67.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       3       0       21.4%
CODE                 0      0       0       0        0.0%
DATA                 0      0      40      10        0.0%
ABS                  0      0      40       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Aug 02 15:32:02 2020

                KeyIsIn@cnt 0075                  KeyHave@cnt 0076                 KeyHave@flag 0074  
                         pc 0002                          PL2 015C                          PL4 00EB  
                        PL6 00FD                          PL8 039B               ??_KeyClearOne 0074  
     __size_of_TurnKeyFlags 002F                          fsr 0004            ??_CheckValidTime 0074  
                       PL10 016A                         PL20 017D                         PL12 02DC  
                       PL14 0175                         PL16 02B4                         PL18 0384  
                       l501 02A0                         l521 01B7                         l528 019F  
                       l562 02C9                         _PR2 0091                         fsr0 0004  
                       indf 0000         CheckOnceResult@flag 004D           ?_GetTouchKeyValue 0072  
                      S2808 02F9    __end_of_Table_KeyChannel 0314                  KeyServer@i 0074  
        ??_GetTouchKeyValue 0075                        l1133 014A                        l1151 01DD  
                      l2120 0332                        l2210 0367                        l1170 022B  
                      l1091 01F2                        l2220 034A                        l1092 0201  
                      l2204 0366                        l2310 0209                        l2214 036E  
                      l2128 03B8                        l2234 037D                        l2218 0349  
                      l2138 03B6                        l2250 029E                        l2148 0399  
                      l2252 029F                        l2158 0391                        l2246 029C  
                      l2166 03B4                        l2270 0283                        l2248 029D  
                      l2256 028E                        l2176 03A1                        l2192 0380  
                      l2272 0284                        l2264 0280                        l2186 03B0  
                      l2266 0281                        l2258 0268                        l2700 00DE  
                      l2268 0282                        l2276 0271                        l2390 010B  
                      l2702 00E3                        l2462 0323                        l2198 03AC  
                      l2456 0314                        l2288 02E9                        l2448 01E4  
                      l2730 023C                        l2722 0238                        l2482 0196  
                      l2732 0240                        l2484 019B                        l2670 0099  
                      l2638 001C                        l2806 01A6                        l2486 019D  
                      l2494 01A1                        l2656 006C                        l2496 01B9  
                      l2744 02BD                        l2690 00CB                        l2738 0244  
                      l2676 00A1                        l2694 00D6                        l2698 00DA  
                      u1035 0190                        u1215 0027                        u1235 005E  
                      u1245 0072                        u1255 007D                        u1285 00B9  
                      _PIE1 000D                        _PIR1 000C                        _main 02BA  
                      btemp 007E               ?_KeyStopClear 0072                        start 000A  
              _TurnKeyFlags 01C2             __end_of_KeyIsIn 0338             __end_of_KeyHave 0380  
CheckKeyOldValue@KeyOldTemp 0049               ??_Init_System 0074  CheckKeyOldValue@KeyResTemp 0047  
                     ?_main 0072                       _T2CON 0012                       i1l551 0258  
                     i1l555 0261                       _PORTA 0005                       _PORTB 0006  
                     _TRISA 0085                       _TRISB 0086                       _PWMTH 0016  
                     _PWMTL 0015         __end_of_KeyClearOne 02B4             __end_of_mode1_a 03B6  
           __end_of_initPWM 0366             __end_of_mode1_b 03A8             __end_of_mode1_c 03B4  
           __end_of_mode1_d 0384             __end_of_mode2_a 03BA             __end_of_mode1_e 03B0  
           __end_of_mode3_a 03B8             __end_of_mode4_a 039B             __end_of_mode5_a 0399  
                _KeyClearIn 0366              __pbitbssCOMMON 0380                       pclath 000A  
               _ClearResSum 0349                  _KeyCounter 0044                  _KeyOldData 0038  
            ??_KeyStopClear 0075                       status 0003                       wtemp0 007E  
                _KeyUpShake 003C             __initialization 000B                __end_of_main 02CF  
                    ??_main 0078         __end_of_Init_System 0349                      i1l2564 0259  
                    i1l2558 0251                      i1l2568 0260                      _INTCON 000B  
        __size_of_KeyServer 003F                      _OSCCON 0088                      _TMR2IF 0061  
                    _PWMD0L 0017                      _PWMD1L 0018                      _ONFlag 0387  
                 ??_KeyIsIn 0074                   ??_KeyHave 0076          __size_of_Isr_Timer 0023  
 CheckOnceResult@KeyResTemp 0051      CheckOnceResult@KeyDown 0050   __size_of_CheckKeyOldValue 0058  
                    _b_kclr 0381                      _b_kerr 0380                      _irStep 0045  
               _KeyClearOne 02A1                   ??_initPWM 0074                   ??_mode1_a 0074  
                 ??_mode1_b 0074                   ??_mode1_c 0074                   ??_mode1_d 0074  
                 ??_mode1_e 0074                   ??_mode2_a 0074                   ??_mode3_a 0074  
                 ??_mode4_a 0074                   ??_mode5_a 0074               _Table_KeyFalg 0306  
             _Table_KeyDown 030E            __end_of_procKey1 02A1            __end_of_procKey2 0285  
                    saved_w 007E      __size_of_CheckTouchKey 0026            __end_of_startPWM 03AC  
               ?_KeyClearIn 0072             _CheckOnceResult 0018     __end_of__initialization 0016  
            __pcstackCOMMON 0072                __pidataBANK0 0000                 _Init_System 0338  
                __end_ofPL2 016A                  __end_ofPL4 00FD                  __end_ofPL6 0104  
                __end_ofPL8 03A1           __end_of_KeyServer 01C2        __end_of_KeyStopClear 02F9  
         __end_of_Isr_Timer 0268             _doublePressFlag 0388                  __pbssBANK0 0020  
           _doubleTouchFlag 0384   __size_of_GetTouchKeyValue 002E               _CheckTouchKey 021F  
                __pmaintext 02BA                  __pintentry 0004         __size_of_KeyClearIn 000E  
   __end_of_CheckOnceResult 00EB                     _KEYCON0 0092                     _KEYCON1 0093  
             KeyStopClear@i 0075                     _PWMD01H 001C      __size_of_Refurbish_Sfr 000D  
                   _PWMCON0 0013                     _PWMCON1 0014                     _PWMCON2 001D  
      __end_of_Table_KeyCap 0312                  __stringtab 0300                ?_ClearResSum 0072  
                   _KeyData 0036                     _KeyFlag 003E                     _KeyIsIn 0326  
                   _KeyHave 0374              ClearResSum@cnt 0074              ?_CheckTouchKey 0072  
                 ?_procKey1 0072                   ?_procKey2 0072     CheckOnceResult@KeyValue 004E  
          _CheckKeyOldValue 0104     CheckOnceResult@OldValue 004B                   ?_startPWM 0072  
    TurnKeyFlags@KeyNoTimes 0040        GetTouchKeyValue@temp 0075                     _b_kover 0383  
                   __ptext1 03A8                     __ptext2 0358                     __ptext3 02CF  
                   __ptext4 0183                     __ptext5 0268                     __ptext6 03AC  
                   __ptext7 0380                     __ptext8 03B0                     __ptext9 03A1  
                   _mode1_a 03B4                     _initPWM 0358                     _mode1_b 03A1  
                   _mode1_c 03B0                     _mode1_d 0380                     _mode2_a 03B8  
                   _mode1_e 03AC                     _mode3_a 03B6                     _mode4_a 0399  
                   _mode5_a 0391                     _pwmFlag 0386                     _pwmTime 0079  
   __size_of_CheckValidTime 0012                     clrloop0 038A        end_of_initialization 0016  
                ??_procKey1 0074                  ??_procKey2 0074               _Refurbish_Sfr 02CF  
              _KeyOldValue0 002C                _KeyOldValue1 0028                _KeyOldValue2 0024  
     __size_of_KeyStopClear 0015                  ??_startPWM 0074                ?_KeyClearOne 0072  
              _KeyReference 0020            ?_CheckOnceResult 0072                ??_KeyClearIn 0076  
        CheckOnceResult@cnt 0053             ??_CheckTouchKey 0078                _KeyStopClear 02E4  
          _GetTouchKeyValue 01F1              ?_Refurbish_Sfr 0072                ?_Init_System 0072  
        __end_of_KeyClearIn 0374                   _KeyMaxSub 0043                   _KeyResSum 0030  
               __end_ofPL10 0175                 __end_ofPL20 0183                 __end_ofPL12 02E4  
               __end_ofPL14 017D                 __end_ofPL16 02BA                 __end_ofPL18 0389  
             __pbitnvCOMMON 03C0         start_initialization 000B                   _KeyServer 0183  
                 _Isr_Timer 0245        __size_of_ClearResSum 000F               _sendStartFlag 0389  
             ?_TurnKeyFlags 0072    TurnKeyFlags@KeyHaveTimes 0041                 __pdataBANK0 0054  
              _Table_KeyCap 0310                 __pbssCOMMON 0079                  ?_KeyServer 0072  
                 ___latbits 0000               __pcstackBANK0 0047              _CheckValidTime 0314  
  __end_of_CheckKeyOldValue 015C                  ?_Isr_Timer 0072         KeyServer@KeyOldFlag 003A  
                  ?_KeyIsIn 0072                    ?_KeyHave 0074             ??_Refurbish_Sfr 0074  
            ??_TurnKeyFlags 0077           __size_of_procKey1 001C           __size_of_procKey2 001D  
                 __pstrings 0300           __size_of_startPWM 0004                   __pswtext1 02F9  
      __size_of_KeyClearOne 0013                    ?_initPWM 0072                    ?_mode1_a 0072  
                  ?_mode1_b 0072                    ?_mode1_c 0072                    ?_mode1_d 0072  
                  ?_mode1_e 0072                    ?_mode2_a 0072                    ?_mode3_a 0072  
                  ?_mode4_a 0072                    ?_mode5_a 0072      __end_of_CheckValidTime 0326  
       GetTouchKeyValue@cnt 0076                    _KEYDATAH 0095                    _KEYDATAL 0094  
         interrupt_function 0004                   clear_ram0 0389         CheckKeyOldValue@cnt 004B  
                  KeyIsIn@i 0074                 __stringbase 0305        __size_of_Init_System 0011  
     __end_of_Table_KeyFalg 030E       __end_of_Table_KeyDown 0310    __end_of_GetTouchKeyValue 021F  
           ?_CheckValidTime 0072                 ??_KeyServer 0074                 _keyLockFlag 0385  
               ??_Isr_Timer 0072                    _MainTime 0046            __size_of_KeyIsIn 0012  
          __size_of_KeyHave 000C            _Table_KeyChannel 0312          __end_of__stringtab 0306  
                  _b_kover1 0382        __end_of_TurnKeyFlags 01F1            __size_of_mode1_a 0002  
          __size_of_initPWM 000E            __size_of_mode1_b 0007            __size_of_mode1_c 0004  
          __size_of_mode1_d 0004            __size_of_mode2_a 0002            __size_of_mode1_e 0004  
          __size_of_mode3_a 0002            __size_of_mode4_a 0002            __size_of_mode5_a 0008  
   CheckValidTime@validtime 0034                    __ptext10 03B4                    __ptext11 0285  
                  __ptext20 02E4                    __ptext12 0391                    __ptext21 01F1  
                  __ptext13 0399                    __ptext22 0349                    __ptext14 03B6  
                  __ptext23 0314                    __ptext15 03B8                    __ptext24 0018  
                  __ptext16 0338                    __ptext25 0374                    __ptext17 021F  
                  __ptext26 02A1                    __ptext18 01C2                    __ptext27 0104  
                  __ptext19 0366                    __ptext28 0326                    __ptext29 0245  
  __size_of_CheckOnceResult 00D3               __size_of_main 0015                    _sendFlag 03C0  
                  _pwm0Step 0055                    _pwm1Step 0054       __end_of_CheckTouchKey 0245  
                  _procKey1 0285                    _procKey2 0268                    _startPWM 03A8  
   CheckKeyOldValue@counter 0042           ?_CheckKeyOldValue 0072                    intlevel1 0000  
             ??_ClearResSum 0074          ??_CheckKeyOldValue 0076                   stringcode 0300  
                _B_MainLoop 038A                  _OPTION_REG 0081                    stringdir 0300  
                  stringtab 0300              KeyClearOne@cnt 0074               KeyClearIn@cnt 0076  
     __end_of_Refurbish_Sfr 02DC         __end_of_ClearResSum 0358           ??_CheckOnceResult 0047  
