

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Wed Aug 05 22:06:22 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F2852
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	bitnvCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	swtext1,local,class=CONST,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	swtext2,local,class=CONST,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	intentry,global,class=CODE,delta=2
    49                           	psect	pa_nodes0,global,class=CODE,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     
    52                           ; Version 1.45
    53                           ; Generated 16/11/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC16F887 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	idataBANK0
    88  0000                     __pidataBANK0:	
    89                           
    90                           	psect	strings
    91  0300                     __pstrings:	
    92  0300                     stringtab:	
    93  0300                     __stringtab:	
    94  0300                     stringcode:	
    95                           ;	String table - string pointers are 1 byte each
    96                           
    97  0300                     stringdir:	
    98  0300  3003               	movlw	high stringdir
    99  0301  008A               	movwf	10
   100  0302  0804               	movf	4,w
   101  0303  0A84               	incf	4,f
   102  0304  0782               	addwf	2,f
   103  0305                     __stringbase:	
   104  0305  3400               	retlw	0
   105  0306                     __end_of__stringtab:	
   106  0306                     _Table_KeyFalg:	
   107  0306  3401               	retlw	1
   108  0307  3402               	retlw	2
   109  0308  3404               	retlw	4
   110  0309  3408               	retlw	8
   111  030A  3410               	retlw	16
   112  030B  3420               	retlw	32
   113  030C  3440               	retlw	64
   114  030D  3480               	retlw	128
   115  030E                     __end_of_Table_KeyFalg:	
   116  030E                     _Table_KeyDown:	
   117  030E  340A               	retlw	10
   118  030F  340A               	retlw	10
   119  0310                     __end_of_Table_KeyDown:	
   120  0310                     _Table_KeyCap:	
   121  0310  3402               	retlw	2
   122  0311  3402               	retlw	2
   123  0312                     __end_of_Table_KeyCap:	
   124  0312                     _Table_KeyChannel:	
   125  0312  3460               	retlw	96
   126  0313  3461               	retlw	97
   127  0314                     __end_of_Table_KeyChannel:	
   128                           
   129                           	psect	bitnvCOMMON
   130  03C0                     __pbitnvCOMMON:	
   131  03C0                     _sendFlag:	
   132  03C0                     	ds	1
   133  001D                     _PWMCON2	set	29
   134  001C                     _PWMD01H	set	28
   135  0018                     _PWMD1L	set	24
   136  0017                     _PWMD0L	set	23
   137  0016                     _PWMTH	set	22
   138  0015                     _PWMTL	set	21
   139  0014                     _PWMCON1	set	20
   140  0013                     _PWMCON0	set	19
   141  0012                     _T2CON	set	18
   142  000D                     _PIE1	set	13
   143  000C                     _PIR1	set	12
   144  000B                     _INTCON	set	11
   145  0006                     _PORTB	set	6
   146  0005                     _PORTA	set	5
   147  0061                     _TMR2IF	set	97
   148  0095                     _KEYDATAH	set	149
   149  0094                     _KEYDATAL	set	148
   150  0093                     _KEYCON1	set	147
   151  0092                     _KEYCON0	set	146
   152  0091                     _PR2	set	145
   153  0088                     _OSCCON	set	136
   154  0086                     _TRISB	set	134
   155  0085                     _TRISA	set	133
   156  0081                     _OPTION_REG	set	129
   157                           
   158                           	psect	cinit
   159  000B                     start_initialization:	
   160                           ; #config settings
   161                           
   162  000B                     __initialization:	
   163                           
   164                           ;initializer for _pwm1Step
   165  000B  3001               	movlw	1
   166  000C  00D4               	movwf	__pdataBANK0& (0+127)
   167                           
   168                           ;initializer for _pwm0Step
   169  000D  00D5               	movwf	(__pdataBANK0+1)& (0+127)
   170  000E  3020               	movlw	low __pbssBANK0
   171                           
   172                           ; Clear objects allocated to BANK0
   173  000F  1383               	bcf	3,7	;select IRP bank0
   174  0010  0084               	movwf	4
   175  0011  3047               	movlw	low (__pbssBANK0+39)
   176  0012  2380               	fcall	clear_ram0
   177                           
   178                           ; Clear objects allocated to COMMON
   179  0013  01F9               	clrf	__pbssCOMMON& (0+127)
   180                           
   181                           ; Clear objects allocated to BITCOMMON
   182  0014  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   183  0015  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   184  0016                     end_of_initialization:	
   185                           ;End of C runtime variable initialization code
   186                           
   187  0016                     __end_of__initialization:	
   188  0016  0183               	clrf	3
   189  0017  2ABB               	ljmp	_main	;jump to C main() function
   190                           
   191                           	psect	bitbssCOMMON
   192  0380                     __pbitbssCOMMON:	
   193  0380                     _b_kerr:	
   194  0380                     	ds	1
   195  0381                     _b_kclr:	
   196  0381                     	ds	1
   197  0382                     _b_kover1:	
   198  0382                     	ds	1
   199  0383                     _b_kover:	
   200  0383                     	ds	1
   201  0384                     _doubleTouchFlag:	
   202  0384                     	ds	1
   203  0385                     _keyLockFlag:	
   204  0385                     	ds	1
   205  0386                     _pwmFlag:	
   206  0386                     	ds	1
   207  0387                     _ONFlag:	
   208  0387                     	ds	1
   209  0388                     _doublePressFlag:	
   210  0388                     	ds	1
   211  0389                     _sendStartFlag:	
   212  0389                     	ds	1
   213  038A                     _B_MainLoop:	
   214  038A                     	ds	1
   215                           
   216                           	psect	bssCOMMON
   217  0079                     __pbssCOMMON:	
   218  0079                     _pwmTime:	
   219  0079                     	ds	1
   220                           
   221                           	psect	bssBANK0
   222  0020                     __pbssBANK0:	
   223  0020                     _KeyReference:	
   224  0020                     	ds	4
   225  0024                     _KeyOldValue2:	
   226  0024                     	ds	4
   227  0028                     _KeyOldValue1:	
   228  0028                     	ds	4
   229  002C                     _KeyOldValue0:	
   230  002C                     	ds	4
   231  0030                     _KeyResSum:	
   232  0030                     	ds	4
   233  0034                     CheckValidTime@validtime:	
   234  0034                     	ds	2
   235  0036                     _KeyData:	
   236  0036                     	ds	2
   237  0038                     _KeyOldData:	
   238  0038                     	ds	2
   239  003A                     KeyServer@KeyOldFlag:	
   240  003A                     	ds	2
   241  003C                     _KeyUpShake:	
   242  003C                     	ds	2
   243  003E                     _KeyFlag:	
   244  003E                     	ds	2
   245  0040                     TurnKeyFlags@KeyNoTimes:	
   246  0040                     	ds	1
   247  0041                     TurnKeyFlags@KeyHaveTimes:	
   248  0041                     	ds	1
   249  0042                     CheckKeyOldValue@counter:	
   250  0042                     	ds	1
   251  0043                     _KeyMaxSub:	
   252  0043                     	ds	1
   253  0044                     _KeyCounter:	
   254  0044                     	ds	1
   255  0045                     _irStep:	
   256  0045                     	ds	1
   257  0046                     _MainTime:	
   258  0046                     	ds	1
   259                           
   260                           	psect	dataBANK0
   261  0054                     __pdataBANK0:	
   262  0054                     _pwm1Step:	
   263  0054                     	ds	1
   264  0055                     _pwm0Step:	
   265  0055                     	ds	1
   266                           
   267                           	psect	clrtext
   268  0380                     clear_ram0:	
   269                           ;	Called with FSR containing the base address, and
   270                           ;	W with the last address+1
   271                           
   272  0380  0064               	clrwdt	;clear the watchdog before getting into this loop
   273  0381                     clrloop0:	
   274  0381  0180               	clrf	0	;clear RAM location pointed to by FSR
   275  0382  0A84               	incf	4,f	;increment pointer
   276  0383  0604               	xorwf	4,w	;XOR with final address
   277  0384  1903               	btfsc	3,2	;have we reached the end yet?
   278  0385  3400               	retlw	0	;all done for this memory range, return
   279  0386  0604               	xorwf	4,w	;XOR again to restore value
   280  0387  2B81               	goto	clrloop0	;do the next byte
   281                           
   282                           	psect	cstackCOMMON
   283  0072                     __pcstackCOMMON:	
   284  0072                     ?_mode1:	
   285  0072                     ?_mode2:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0072                     ?_mode3:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0072                     ?_mode4:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0072                     ?_mode5:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0072                     ?_modea:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0072                     ?_modeb:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0072                     ?_modec:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0072                     ?_moded:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0072                     ?_modee:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0072                     ?_initPWM:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0072                     ?_CheckTouchKey:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0072                     ?_Init_System:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0072                     ?_Refurbish_Sfr:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0072                     ?_procKey1:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0072                     ?_procKey2:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0072                     ?_startPWM:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0072                     ?_KeyServer:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0072                     ?_Isr_Timer:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0072                     ??_Isr_Timer:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0072                     ?_main:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0072                     ?_KeyIsIn:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0072                     ?_KeyClearOne:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0072                     ?_KeyClearIn:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0072                     ?_KeyStopClear:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0072                     ?_ClearResSum:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0072                     ?_GetTouchKeyValue:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0072                     ?_CheckOnceResult:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0072                     ?_CheckKeyOldValue:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0072                     ?_TurnKeyFlags:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0072                     ?_CheckValidTime:	
   373                           ; 1 bytes @ 0x0
   374                           
   375                           
   376                           ; 1 bytes @ 0x0
   377  0072                     	ds	2
   378  0074                     ??_mode1:	
   379  0074                     ??_mode2:	
   380                           ; 1 bytes @ 0x2
   381                           
   382  0074                     ??_mode3:	
   383                           ; 1 bytes @ 0x2
   384                           
   385  0074                     ??_mode4:	
   386                           ; 1 bytes @ 0x2
   387                           
   388  0074                     ??_mode5:	
   389                           ; 1 bytes @ 0x2
   390                           
   391  0074                     ??_modea:	
   392                           ; 1 bytes @ 0x2
   393                           
   394  0074                     ??_modeb:	
   395                           ; 1 bytes @ 0x2
   396                           
   397  0074                     ??_modec:	
   398                           ; 1 bytes @ 0x2
   399                           
   400  0074                     ??_moded:	
   401                           ; 1 bytes @ 0x2
   402                           
   403  0074                     ??_modee:	
   404                           ; 1 bytes @ 0x2
   405                           
   406  0074                     ??_initPWM:	
   407                           ; 1 bytes @ 0x2
   408                           
   409  0074                     ??_Init_System:	
   410                           ; 1 bytes @ 0x2
   411                           
   412  0074                     ??_Refurbish_Sfr:	
   413                           ; 1 bytes @ 0x2
   414                           
   415  0074                     ??_procKey1:	
   416                           ; 1 bytes @ 0x2
   417                           
   418  0074                     ??_procKey2:	
   419                           ; 1 bytes @ 0x2
   420                           
   421  0074                     ??_startPWM:	
   422                           ; 1 bytes @ 0x2
   423                           
   424  0074                     ??_KeyServer:	
   425                           ; 1 bytes @ 0x2
   426                           
   427  0074                     ??_KeyIsIn:	
   428                           ; 1 bytes @ 0x2
   429                           
   430  0074                     ??_KeyClearOne:	
   431                           ; 1 bytes @ 0x2
   432                           
   433  0074                     ??_ClearResSum:	
   434                           ; 1 bytes @ 0x2
   435                           
   436  0074                     ?_KeyHave:	
   437                           ; 1 bytes @ 0x2
   438                           
   439  0074                     ??_CheckValidTime:	
   440                           ; 1 bytes @ 0x2
   441                           
   442  0074                     KeyIsIn@i:	
   443                           ; 1 bytes @ 0x2
   444                           
   445  0074                     KeyClearOne@cnt:	
   446                           ; 1 bytes @ 0x2
   447                           
   448  0074                     ClearResSum@cnt:	
   449                           ; 1 bytes @ 0x2
   450                           
   451  0074                     KeyServer@i:	
   452                           ; 1 bytes @ 0x2
   453                           
   454  0074                     KeyHave@flag:	
   455                           ; 2 bytes @ 0x2
   456                           
   457                           
   458                           ; 2 bytes @ 0x2
   459  0074                     	ds	1
   460  0075                     ??_KeyStopClear:	
   461  0075                     ??_GetTouchKeyValue:	
   462                           ; 1 bytes @ 0x3
   463                           
   464  0075                     KeyIsIn@cnt:	
   465                           ; 1 bytes @ 0x3
   466                           
   467  0075                     KeyStopClear@i:	
   468                           ; 1 bytes @ 0x3
   469                           
   470  0075                     GetTouchKeyValue@temp:	
   471                           ; 1 bytes @ 0x3
   472                           
   473                           
   474                           ; 1 bytes @ 0x3
   475  0075                     	ds	1
   476  0076                     ??_KeyClearIn:	
   477  0076                     ??_KeyHave:	
   478                           ; 1 bytes @ 0x4
   479                           
   480  0076                     ??_CheckKeyOldValue:	
   481                           ; 1 bytes @ 0x4
   482                           
   483  0076                     KeyClearIn@cnt:	
   484                           ; 1 bytes @ 0x4
   485                           
   486  0076                     KeyHave@cnt:	
   487                           ; 1 bytes @ 0x4
   488                           
   489  0076                     GetTouchKeyValue@cnt:	
   490                           ; 1 bytes @ 0x4
   491                           
   492                           
   493                           ; 1 bytes @ 0x4
   494  0076                     	ds	1
   495  0077                     ??_TurnKeyFlags:	
   496                           
   497                           ; 1 bytes @ 0x5
   498  0077                     	ds	1
   499  0078                     ??_CheckTouchKey:	
   500  0078                     ??_main:	
   501                           ; 1 bytes @ 0x6
   502                           
   503                           
   504                           	psect	cstackBANK0
   505  0047                     __pcstackBANK0:	
   506                           ; 1 bytes @ 0x6
   507                           
   508  0047                     ??_CheckOnceResult:	
   509  0047                     CheckKeyOldValue@KeyResTemp:	
   510                           ; 1 bytes @ 0x0
   511                           
   512                           
   513                           ; 2 bytes @ 0x0
   514  0047                     	ds	2
   515  0049                     CheckKeyOldValue@KeyOldTemp:	
   516                           
   517                           ; 2 bytes @ 0x2
   518  0049                     	ds	2
   519  004B                     CheckKeyOldValue@cnt:	
   520  004B                     CheckOnceResult@OldValue:	
   521                           ; 1 bytes @ 0x4
   522                           
   523                           
   524                           ; 2 bytes @ 0x4
   525  004B                     	ds	2
   526  004D                     CheckOnceResult@flag:	
   527                           
   528                           ; 1 bytes @ 0x6
   529  004D                     	ds	1
   530  004E                     CheckOnceResult@KeyValue:	
   531                           
   532                           ; 2 bytes @ 0x7
   533  004E                     	ds	2
   534  0050                     CheckOnceResult@KeyDown:	
   535                           
   536                           ; 1 bytes @ 0x9
   537  0050                     	ds	1
   538  0051                     CheckOnceResult@KeyResTemp:	
   539                           
   540                           ; 2 bytes @ 0xA
   541  0051                     	ds	2
   542  0053                     CheckOnceResult@cnt:	
   543                           
   544                           ; 1 bytes @ 0xC
   545  0053                     	ds	1
   546                           
   547                           	psect	maintext
   548  02BB                     __pmaintext:	
   549 ;;
   550 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   551 ;;
   552 ;; *************** function _main *****************
   553 ;; Defined at:
   554 ;;		line 291 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
   555 ;; Parameters:    Size  Location     Type
   556 ;;		None
   557 ;; Auto vars:     Size  Location     Type
   558 ;;		None
   559 ;; Return value:  Size  Location     Type
   560 ;;                  1    wreg      void 
   561 ;; Registers used:
   562 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   563 ;; Tracked objects:
   564 ;;		On entry : B00/0
   565 ;;		On exit  : 300/0
   566 ;;		Unchanged: 0/0
   567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   568 ;;      Params:         0       0       0       0
   569 ;;      Locals:         0       0       0       0
   570 ;;      Temps:          0       0       0       0
   571 ;;      Totals:         0       0       0       0
   572 ;;Total ram usage:        0 bytes
   573 ;; Hardware stack levels required when called:    6
   574 ;; This function calls:
   575 ;;		_CheckTouchKey
   576 ;;		_Init_System
   577 ;;		_KeyServer
   578 ;;		_Refurbish_Sfr
   579 ;;		_initPWM
   580 ;;		_startPWM
   581 ;; This function is called by:
   582 ;;		Startup code after reset
   583 ;; This function uses a non-reentrant model
   584 ;;
   585                           
   586                           
   587                           ;psect for function _main
   588  02BB                     _main:	
   589                           
   590                           ;main.c: 293: Init_System();
   591                           
   592                           ;incstack = 0
   593                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   594  02BB  2338               	fcall	_Init_System
   595                           
   596                           ;main.c: 294: sendFlag = 1;
   597  02BC  1478               	bsf	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
   598                           
   599                           ;main.c: 295: initPWM();
   600  02BD  2358               	fcall	_initPWM
   601  02BE                     l2718:	
   602                           
   603                           ;main.c: 297: {
   604                           ;main.c: 298: if(B_MainLoop)
   605  02BE  1D71               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   606  02BF  2ABE               	goto	l2718
   607                           
   608                           ;main.c: 299: {
   609                           ;main.c: 300: B_MainLoop = 0;
   610  02C0  1171               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   611  02C1  0064               	clrwdt	;# 
   612                           
   613                           ;main.c: 302: Refurbish_Sfr();
   614  02C2  22D0               	fcall	_Refurbish_Sfr
   615                           
   616                           ;main.c: 303: CheckTouchKey();
   617  02C3  221F               	fcall	_CheckTouchKey
   618                           
   619                           ;main.c: 304: KeyServer();
   620  02C4  2183               	fcall	_KeyServer
   621                           
   622                           ;main.c: 306: if(ONFlag && pwmFlag == 0)
   623  02C5  1BF0               	btfsc	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   624  02C6  1B70               	btfsc	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
   625  02C7  2ACA               	goto	l565
   626                           
   627                           ;main.c: 307: {
   628                           ;main.c: 308: startPWM();
   629  02C8  2393               	fcall	_startPWM
   630                           
   631                           ;main.c: 309: }
   632  02C9  2ABE               	goto	l2718
   633  02CA                     l565:	
   634                           
   635                           ;main.c: 310: else if(ONFlag == 0 && pwmFlag == 1)
   636  02CA  1FF0               	btfss	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
   637  02CB  1F70               	btfss	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
   638  02CC  2ABE               	goto	l2718
   639                           
   640                           ;main.c: 311: {
   641                           ;main.c: 312: PWMCON0 = 0;
   642  02CD  0193               	clrf	19	;volatile
   643                           
   644                           ;main.c: 313: pwmFlag = 0;
   645  02CE  1370               	bcf	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
   646  02CF  2ABE               	goto	l2718
   647  02D0                     __end_of_main:	
   648                           
   649                           	psect	text1
   650  0393                     __ptext1:	
   651 ;; *************** function _startPWM *****************
   652 ;; Defined at:
   653 ;;		line 153 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
   654 ;; Parameters:    Size  Location     Type
   655 ;;		None
   656 ;; Auto vars:     Size  Location     Type
   657 ;;		None
   658 ;; Return value:  Size  Location     Type
   659 ;;                  1    wreg      void 
   660 ;; Registers used:
   661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   662 ;; Tracked objects:
   663 ;;		On entry : 300/0
   664 ;;		On exit  : 300/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   667 ;;      Params:         0       0       0       0
   668 ;;      Locals:         0       0       0       0
   669 ;;      Temps:          0       0       0       0
   670 ;;      Totals:         0       0       0       0
   671 ;;Total ram usage:        0 bytes
   672 ;; Hardware stack levels used:    1
   673 ;; Hardware stack levels required when called:    3
   674 ;; This function calls:
   675 ;;		_procKey1
   676 ;;		_procKey2
   677 ;; This function is called by:
   678 ;;		_main
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           
   683                           ;psect for function _startPWM
   684  0393                     _startPWM:	
   685                           
   686                           ;main.c: 155: pwm0Step--;
   687                           
   688                           ;incstack = 0
   689                           ; Regs used in _startPWM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   690  0393  03D5               	decf	_pwm0Step,f
   691                           
   692                           ;main.c: 156: pwm1Step--;
   693  0394  03D4               	decf	_pwm1Step,f
   694                           
   695                           ;main.c: 157: procKey1();
   696  0395  2285               	fcall	_procKey1
   697                           
   698                           ;main.c: 158: procKey2();
   699  0396  2A68               	ljmp	l2212
   700  0397                     __end_of_startPWM:	
   701                           
   702                           	psect	text2
   703  0358                     __ptext2:	
   704 ;; *************** function _initPWM *****************
   705 ;; Defined at:
   706 ;;		line 4 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
   707 ;; Parameters:    Size  Location     Type
   708 ;;		None
   709 ;; Auto vars:     Size  Location     Type
   710 ;;		None
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, status,2
   715 ;; Tracked objects:
   716 ;;		On entry : 300/100
   717 ;;		On exit  : 300/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   720 ;;      Params:         0       0       0       0
   721 ;;      Locals:         0       0       0       0
   722 ;;      Temps:          0       0       0       0
   723 ;;      Totals:         0       0       0       0
   724 ;;Total ram usage:        0 bytes
   725 ;; Hardware stack levels used:    1
   726 ;; Hardware stack levels required when called:    1
   727 ;; This function calls:
   728 ;;		Nothing
   729 ;; This function is called by:
   730 ;;		_main
   731 ;; This function uses a non-reentrant model
   732 ;;
   733                           
   734                           
   735                           ;psect for function _initPWM
   736  0358                     _initPWM:	
   737                           
   738                           ;pwm.c: 6: PWMCON1 = 0x40;
   739                           
   740                           ;incstack = 0
   741                           ; Regs used in _initPWM: [wreg+status,2]
   742  0358  3040               	movlw	64
   743  0359  1283               	bcf	3,5	;RP0=0, select bank0
   744  035A  0094               	movwf	20	;volatile
   745                           
   746                           ;pwm.c: 7: PWMCON0 = 0x23;
   747  035B  3023               	movlw	35
   748  035C  0093               	movwf	19	;volatile
   749                           
   750                           ;pwm.c: 8: PWMCON2 = 0;
   751  035D  019D               	clrf	29	;volatile
   752                           
   753                           ;pwm.c: 9: PWMTH = 0;
   754  035E  0196               	clrf	22	;volatile
   755                           
   756                           ;pwm.c: 10: PWMTL = 125;
   757  035F  307D               	movlw	125
   758  0360  0095               	movwf	21	;volatile
   759                           
   760                           ;pwm.c: 11: PWMD0L = 1;
   761  0361  3001               	movlw	1
   762  0362  0097               	movwf	23	;volatile
   763                           
   764                           ;pwm.c: 12: PWMD1L = 1;
   765  0363  0098               	movwf	24	;volatile
   766                           
   767                           ;pwm.c: 13: PWMD01H = 0;
   768  0364  019C               	clrf	28	;volatile
   769  0365  0008               	return
   770  0366                     __end_of_initPWM:	
   771                           
   772                           	psect	text3
   773  02D0                     __ptext3:	
   774 ;; *************** function _Refurbish_Sfr *****************
   775 ;; Defined at:
   776 ;;		line 49 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
   777 ;; Parameters:    Size  Location     Type
   778 ;;		None
   779 ;; Auto vars:     Size  Location     Type
   780 ;;		None
   781 ;; Return value:  Size  Location     Type
   782 ;;                  1    wreg      void 
   783 ;; Registers used:
   784 ;;		wreg, status,2, status,0
   785 ;; Tracked objects:
   786 ;;		On entry : 0/0
   787 ;;		On exit  : 300/0
   788 ;;		Unchanged: 0/0
   789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   790 ;;      Params:         0       0       0       0
   791 ;;      Locals:         0       0       0       0
   792 ;;      Temps:          0       0       0       0
   793 ;;      Totals:         0       0       0       0
   794 ;;Total ram usage:        0 bytes
   795 ;; Hardware stack levels used:    1
   796 ;; Hardware stack levels required when called:    1
   797 ;; This function calls:
   798 ;;		Nothing
   799 ;; This function is called by:
   800 ;;		_main
   801 ;; This function uses a non-reentrant model
   802 ;;
   803                           
   804                           
   805                           ;psect for function _Refurbish_Sfr
   806  02D0                     _Refurbish_Sfr:	
   807                           
   808                           ;main.c: 87: OPTION_REG = 0;
   809                           
   810                           ;incstack = 0
   811                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
   812  02D0  1683               	bsf	3,5	;RP0=1, select bank1
   813  02D1  1303               	bcf	3,6	;RP1=0, select bank1
   814                           
   815                           ;main.c: 91: PIE1 = 2;
   816                           
   817                           ;main.c: 92: PR2 = 250;
   818  02D2  22DD               	fcall	PL12	;call to abstracted procedure
   819                           
   820                           ;main.c: 93: INTCON = 0XC0;
   821  02D3  30C0               	movlw	192
   822  02D4  008B               	movwf	11	;volatile
   823                           
   824                           ;main.c: 94: if(4 != T2CON)
   825  02D5  3004               	movlw	4
   826  02D6  1283               	bcf	3,5	;RP0=0, select bank0
   827  02D7  0612               	xorwf	18,w	;volatile
   828  02D8  1903               	btfsc	3,2
   829  02D9  0008               	return
   830                           
   831                           ;main.c: 95: T2CON = 4;
   832  02DA  3004               	movlw	4
   833  02DB  0092               	movwf	18	;volatile
   834  02DC  0008               	return
   835  02DD                     __end_of_Refurbish_Sfr:	
   836  02DD                     PL12:	
   837  02DD  0181               	clrf	1	;volatile
   838  02DE  3002               	movlw	2
   839  02DF  1283               	bcf	3,5	;RP0=0, select bank0
   840  02E0  008D               	movwf	13	;volatile
   841  02E1  30FA               	movlw	250
   842  02E2  1683               	bsf	3,5	;RP0=1, select bank1
   843  02E3  0091               	movwf	17	;volatile
   844  02E4  0008               	return
   845  02E5                     __end_ofPL12:	
   846                           
   847                           	psect	text4
   848  0183                     __ptext4:	
   849 ;; *************** function _KeyServer *****************
   850 ;; Defined at:
   851 ;;		line 166 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;		None
   854 ;; Auto vars:     Size  Location     Type
   855 ;;  i               2    2[COMMON] unsigned int 
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   860 ;; Tracked objects:
   861 ;;		On entry : 300/0
   862 ;;		On exit  : 300/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   865 ;;      Params:         0       0       0       0
   866 ;;      Locals:         2       0       0       0
   867 ;;      Temps:          0       0       0       0
   868 ;;      Totals:         2       0       0       0
   869 ;;Total ram usage:        2 bytes
   870 ;; Hardware stack levels used:    1
   871 ;; Hardware stack levels required when called:    3
   872 ;; This function calls:
   873 ;;		_procKey1
   874 ;;		_procKey2
   875 ;; This function is called by:
   876 ;;		_main
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880                           
   881                           ;psect for function _KeyServer
   882  0183                     _KeyServer:	
   883                           
   884                           ;main.c: 168: static unsigned int KeyOldFlag = 0;
   885                           ;main.c: 169: unsigned int i = (unsigned int)((KeyFlag[1]<<8) | KeyFlag[0]);
   886                           
   887                           ;incstack = 0
   888                           ; Regs used in _KeyServer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   889  0183  083F               	movf	_KeyFlag+1,w	;volatile
   890  0184  00F5               	movwf	KeyServer@i+1
   891  0185  083E               	movf	_KeyFlag,w	;volatile
   892  0186  00F4               	movwf	KeyServer@i
   893                           
   894                           ;main.c: 170: if(i)
   895  0187  0475               	iorwf	KeyServer@i+1,w
   896  0188  1903               	btfsc	3,2
   897  0189  29B9               	goto	l2450
   898                           
   899                           ;main.c: 171: {
   900                           ;main.c: 173: if(i != KeyOldFlag)
   901  018A  083B               	movf	KeyServer@KeyOldFlag+1,w
   902  018B  0675               	xorwf	KeyServer@i+1,w
   903  018C  1D03               	skipz
   904  018D  2990               	goto	u1035
   905  018E  083A               	movf	KeyServer@KeyOldFlag,w
   906  018F  0674               	xorwf	KeyServer@i,w
   907  0190                     u1035:	
   908  0190  1903               	skipnz
   909  0191  29B7               	goto	l524
   910                           
   911                           ;main.c: 174: {
   912                           ;main.c: 175: if(keyLockFlag)
   913  0192  1EF0               	btfss	_keyLockFlag/(0+8),_keyLockFlag& (0+7)	;volatile
   914  0193  2996               	goto	l2436
   915                           
   916                           ;main.c: 176: {
   917                           ;main.c: 177: doubleTouchFlag = 1;
   918  0194  1670               	bsf	_doubleTouchFlag/(0+8),_doubleTouchFlag& (0+7)	;volatile
   919                           
   920                           ;main.c: 178: return;
   921  0195  0008               	return
   922  0196                     l2436:	
   923                           
   924                           ;main.c: 179: }
   925                           ;main.c: 180: KeyOldFlag = i;
   926  0196  0875               	movf	KeyServer@i+1,w
   927  0197  00BB               	movwf	KeyServer@KeyOldFlag+1
   928  0198  0874               	movf	KeyServer@i,w
   929  0199  00BA               	movwf	KeyServer@KeyOldFlag
   930                           
   931                           ;main.c: 181: switch(i)
   932  019A  29A1               	goto	l2448
   933  019B                     l2438:	
   934                           
   935                           ;main.c: 184: procKey1();
   936  019B  2285               	fcall	_procKey1
   937                           
   938                           ;main.c: 185: break;
   939  019C  29B7               	goto	l524
   940  019D                     l2440:	
   941                           
   942                           ;main.c: 187: procKey2();
   943  019D  2268               	fcall	_procKey2
   944                           
   945                           ;main.c: 188: break;
   946  019E  29B7               	goto	l524
   947  019F                     l531:	
   948                           ;main.c: 189: case 3:
   949                           
   950                           
   951                           ;main.c: 190: doublePressFlag = 1;
   952  019F  1471               	bsf	_doublePressFlag/(0+8),_doublePressFlag& (0+7)	;volatile
   953                           
   954                           ;main.c: 191: break;
   955  01A0  29B7               	goto	l524
   956  01A1                     l2448:	
   957                           
   958                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   959                           ; Switch size 1, requested type "space"
   960                           ; Number of cases is 1, Range of values is 0 to 0
   961                           ; switch strategies available:
   962                           ; Name         Instructions Cycles
   963                           ; simple_byte            4     3 (average)
   964                           ; direct_byte            7     6 (fixed)
   965                           ; jumptable            260     6 (fixed)
   966                           ;	Chosen strategy is simple_byte
   967  01A1  0875               	movf	KeyServer@i+1,w
   968  01A2  3A00               	xorlw	0	; case 0
   969  01A3  1903               	skipnz
   970  01A4  29A6               	goto	l2800
   971  01A5  29B7               	goto	l524
   972  01A6                     l2800:	
   973                           
   974                           ; Switch size 1, requested type "space"
   975                           ; Number of cases is 5, Range of values is 1 to 8
   976                           ; switch strategies available:
   977                           ; Name         Instructions Cycles
   978                           ; simple_byte           16     9 (average)
   979                           ; direct_byte           17     9 (fixed)
   980                           ; jumptable            263     9 (fixed)
   981                           ;	Chosen strategy is simple_byte
   982  01A6  0874               	movf	KeyServer@i,w
   983  01A7  3A01               	xorlw	1	; case 1
   984  01A8  1903               	skipnz
   985  01A9  299B               	goto	l2438
   986  01AA  3A03               	xorlw	3	; case 2
   987  01AB  1903               	skipnz
   988  01AC  299D               	goto	l2440
   989  01AD  3A01               	xorlw	1	; case 3
   990  01AE  1903               	skipnz
   991  01AF  299F               	goto	l531
   992  01B0  3A07               	xorlw	7	; case 4
   993  01B1  1903               	skipnz
   994  01B2  299B               	goto	l2438
   995  01B3  3A0C               	xorlw	12	; case 8
   996  01B4  1903               	skipnz
   997  01B5  299D               	goto	l2440
   998  01B6  29B7               	goto	l524
   999  01B7                     l524:	
  1000                           
  1001                           ;main.c: 201: }
  1002                           ;main.c: 202: keyLockFlag = 1;
  1003  01B7  16F0               	bsf	_keyLockFlag/(0+8),_keyLockFlag& (0+7)	;volatile
  1004                           
  1005                           ;main.c: 203: }
  1006  01B8  0008               	return
  1007  01B9                     l2450:	
  1008                           
  1009                           ;main.c: 204: else
  1010                           ;main.c: 205: {
  1011                           ;main.c: 206: KeyOldFlag = 0;
  1012  01B9  01BA               	clrf	KeyServer@KeyOldFlag
  1013  01BA  01BB               	clrf	KeyServer@KeyOldFlag+1
  1014                           
  1015                           ;main.c: 207: keyLockFlag = 0;
  1016  01BB  12F0               	bcf	_keyLockFlag/(0+8),_keyLockFlag& (0+7)	;volatile
  1017                           
  1018                           ;main.c: 208: if(doubleTouchFlag)
  1019  01BC  1E70               	btfss	_doubleTouchFlag/(0+8),_doubleTouchFlag& (0+7)	;volatile
  1020  01BD  0008               	return
  1021                           
  1022                           ;main.c: 209: {
  1023                           ;main.c: 211: ONFlag = !ONFlag;
  1024  01BE  3080               	movlw	(0+1) shl (_ONFlag& (0+7))
  1025  01BF  06F0               	xorwf	_ONFlag/(0+8),f
  1026                           
  1027                           ;main.c: 212: }
  1028                           ;main.c: 213: doubleTouchFlag = 0;
  1029  01C0  1270               	bcf	_doubleTouchFlag/(0+8),_doubleTouchFlag& (0+7)	;volatile
  1030  01C1  0008               	return
  1031  01C2                     __end_of_KeyServer:	
  1032                           
  1033                           	psect	text5
  1034  0268                     __ptext5:	
  1035 ;; *************** function _procKey2 *****************
  1036 ;; Defined at:
  1037 ;;		line 126 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;		None
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;		None
  1042 ;; Return value:  Size  Location     Type
  1043 ;;                  1    wreg      void 
  1044 ;; Registers used:
  1045 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1046 ;; Tracked objects:
  1047 ;;		On entry : 300/0
  1048 ;;		On exit  : 300/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1051 ;;      Params:         0       0       0       0
  1052 ;;      Locals:         0       0       0       0
  1053 ;;      Temps:          0       0       0       0
  1054 ;;      Totals:         0       0       0       0
  1055 ;;Total ram usage:        0 bytes
  1056 ;; Hardware stack levels used:    1
  1057 ;; Hardware stack levels required when called:    2
  1058 ;; This function calls:
  1059 ;;		_modea
  1060 ;;		_modeb
  1061 ;;		_modec
  1062 ;;		_moded
  1063 ;;		_modee
  1064 ;; This function is called by:
  1065 ;;		_startPWM
  1066 ;;		_KeyServer
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           
  1071                           ;psect for function _procKey2
  1072  0268                     _procKey2:	
  1073  0268                     l2212:	
  1074                           ;incstack = 0
  1075                           ; Regs used in _procKey2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1076                           
  1077                           
  1078                           ;main.c: 128: pwmFlag = 1;
  1079  0268  1770               	bsf	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
  1080                           
  1081                           ;main.c: 129: ONFlag = 1;
  1082  0269  17F0               	bsf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
  1083                           
  1084                           ;main.c: 130: if(++pwm1Step > 5)
  1085  026A  3006               	movlw	6
  1086  026B  0AD4               	incf	_pwm1Step,f
  1087  026C  0254               	subwf	_pwm1Step,w
  1088  026D  1C03               	skipc
  1089  026E  2A71               	goto	l2230
  1090                           
  1091                           ;main.c: 131: pwm1Step = 1;
  1092  026F  01D4               	clrf	_pwm1Step
  1093  0270  0AD4               	incf	_pwm1Step,f
  1094  0271                     l2230:	
  1095                           ;main.c: 148: break;
  1096                           
  1097  0271  0854               	movf	_pwm1Step,w
  1098                           
  1099                           ; Switch size 1, requested type "space"
  1100                           ; Number of cases is 5, Range of values is 1 to 5
  1101                           ; switch strategies available:
  1102                           ; Name         Instructions Cycles
  1103                           ; direct_byte           14     9 (fixed)
  1104                           ; simple_byte           16     9 (average)
  1105                           ; jumptable            263     9 (fixed)
  1106                           ;	Chosen strategy is direct_byte
  1107  0272  3EFF               	addlw	-1
  1108  0273  1C03               	skipc
  1109  0274  0008               	return
  1110  0275  0084               	movwf	4
  1111  0276  3005               	movlw	5
  1112  0277  0204               	subwf	4,w
  1113  0278  1803               	skipnc
  1114  0279  0008               	return
  1115  027A  3002               	movlw	high S2802
  1116  027B  008A               	movwf	10
  1117  027C  30FA               	movlw	low S2802
  1118  027D  0704               	addwf	4,w
  1119  027E  0082               	movwf	2
  1120  027F  0008               	return
  1121  0280                     l2218:	
  1122                           
  1123                           ;main.c: 135: modea();
  1124  0280  2B9B               	ljmp	l2138
  1125  0281                     l2220:	
  1126                           ;main.c: 136: break;
  1127                           
  1128                           
  1129                           ;main.c: 138: modeb();
  1130  0281  2B97               	ljmp	l2142
  1131  0282                     l2222:	
  1132                           ;main.c: 139: break;
  1133                           
  1134                           
  1135                           ;main.c: 141: modec();
  1136  0282  2BB5               	ljmp	l2146
  1137  0283                     l2224:	
  1138                           ;main.c: 142: break;
  1139                           
  1140                           
  1141                           ;main.c: 144: moded();
  1142  0283  2B88               	ljmp	l2148
  1143  0284                     l2226:	
  1144                           ;main.c: 145: break;
  1145                           
  1146                           
  1147                           ;main.c: 147: modee();
  1148  0284  2BB3               	ljmp	l2150
  1149  0285                     __end_of_procKey2:	
  1150                           
  1151                           	psect	swtext1
  1152  02FA                     __pswtext1:	
  1153  02FA                     S2802:	
  1154  02FA  2A80               	ljmp	l2218
  1155  02FB  2A81               	ljmp	l2220
  1156  02FC  2A82               	ljmp	l2222
  1157  02FD  2A83               	ljmp	l2224
  1158  02FE  2A84               	ljmp	l2226
  1159                           
  1160                           	psect	text6
  1161  03B3                     __ptext6:	
  1162 ;; *************** function _modee *****************
  1163 ;; Defined at:
  1164 ;;		line 70 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;		None
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;		None
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg
  1173 ;; Tracked objects:
  1174 ;;		On entry : 300/0
  1175 ;;		On exit  : 300/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1178 ;;      Params:         0       0       0       0
  1179 ;;      Locals:         0       0       0       0
  1180 ;;      Temps:          0       0       0       0
  1181 ;;      Totals:         0       0       0       0
  1182 ;;Total ram usage:        0 bytes
  1183 ;; Hardware stack levels used:    1
  1184 ;; Hardware stack levels required when called:    1
  1185 ;; This function calls:
  1186 ;;		Nothing
  1187 ;; This function is called by:
  1188 ;;		_procKey2
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192                           
  1193                           ;psect for function _modee
  1194  03B3                     _modee:	
  1195  03B3                     l2150:	
  1196                           ;incstack = 0
  1197                           ; Regs used in _modee: [wreg]
  1198                           
  1199                           
  1200                           ;pwm.c: 72: PWMD1L = 94;
  1201  03B3  305E               	movlw	94
  1202                           
  1203                           ;pwm.c: 73: PWMCON0 = 0x23;
  1204  03B4  2B8A               	ljmp	PL18	;call to abstracted procedure
  1205  03B5                     __end_of_modee:	
  1206                           
  1207                           	psect	text7
  1208  0388                     __ptext7:	
  1209 ;; *************** function _moded *****************
  1210 ;; Defined at:
  1211 ;;		line 64 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;		None
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;		None
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg
  1220 ;; Tracked objects:
  1221 ;;		On entry : 300/0
  1222 ;;		On exit  : 300/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1225 ;;      Params:         0       0       0       0
  1226 ;;      Locals:         0       0       0       0
  1227 ;;      Temps:          0       0       0       0
  1228 ;;      Totals:         0       0       0       0
  1229 ;;Total ram usage:        0 bytes
  1230 ;; Hardware stack levels used:    1
  1231 ;; Hardware stack levels required when called:    1
  1232 ;; This function calls:
  1233 ;;		Nothing
  1234 ;; This function is called by:
  1235 ;;		_procKey2
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           
  1240                           ;psect for function _moded
  1241  0388                     _moded:	
  1242  0388                     l2148:	
  1243                           ;incstack = 0
  1244                           ; Regs used in _moded: [wreg]
  1245                           
  1246                           
  1247                           ;pwm.c: 66: PWMD1L = 62;
  1248  0388  303E               	movlw	62
  1249                           
  1250                           ;pwm.c: 67: PWMCON0 = 0x23;
  1251  0389  2B8A               	ljmp	PL18	;call to abstracted procedure
  1252  038A                     __end_of_moded:	
  1253  038A                     PL18:	
  1254  038A  0098               	movwf	24	;volatile
  1255  038B  3023               	movlw	35
  1256  038C  0093               	movwf	19	;volatile
  1257  038D  0008               	return
  1258  038E                     __end_ofPL18:	
  1259                           
  1260                           	psect	text8
  1261  03B5                     __ptext8:	
  1262 ;; *************** function _modec *****************
  1263 ;; Defined at:
  1264 ;;		line 58 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;		None
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;		None
  1269 ;; Return value:  Size  Location     Type
  1270 ;;                  1    wreg      void 
  1271 ;; Registers used:
  1272 ;;		wreg
  1273 ;; Tracked objects:
  1274 ;;		On entry : 300/0
  1275 ;;		On exit  : 300/0
  1276 ;;		Unchanged: 0/0
  1277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1278 ;;      Params:         0       0       0       0
  1279 ;;      Locals:         0       0       0       0
  1280 ;;      Temps:          0       0       0       0
  1281 ;;      Totals:         0       0       0       0
  1282 ;;Total ram usage:        0 bytes
  1283 ;; Hardware stack levels used:    1
  1284 ;; Hardware stack levels required when called:    1
  1285 ;; This function calls:
  1286 ;;		Nothing
  1287 ;; This function is called by:
  1288 ;;		_procKey2
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292                           
  1293                           ;psect for function _modec
  1294  03B5                     _modec:	
  1295  03B5                     l2146:	
  1296                           ;incstack = 0
  1297                           ; Regs used in _modec: [wreg]
  1298                           
  1299                           
  1300                           ;pwm.c: 60: PWMD1L = 31;
  1301  03B5  301F               	movlw	31
  1302                           
  1303                           ;pwm.c: 61: PWMCON0 = 0x23;
  1304  03B6  2B8A               	ljmp	PL18	;call to abstracted procedure
  1305  03B7                     __end_of_modec:	
  1306                           
  1307                           	psect	text9
  1308  0397                     __ptext9:	
  1309 ;; *************** function _modeb *****************
  1310 ;; Defined at:
  1311 ;;		line 52 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;		None
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;		None
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  1    wreg      void 
  1318 ;; Registers used:
  1319 ;;		wreg
  1320 ;; Tracked objects:
  1321 ;;		On entry : 300/0
  1322 ;;		On exit  : 300/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1325 ;;      Params:         0       0       0       0
  1326 ;;      Locals:         0       0       0       0
  1327 ;;      Temps:          0       0       0       0
  1328 ;;      Totals:         0       0       0       0
  1329 ;;Total ram usage:        0 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; Hardware stack levels required when called:    1
  1332 ;; This function calls:
  1333 ;;		Nothing
  1334 ;; This function is called by:
  1335 ;;		_procKey2
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           
  1340                           ;psect for function _modeb
  1341  0397                     _modeb:	
  1342  0397                     l2142:	
  1343                           ;incstack = 0
  1344                           ; Regs used in _modeb: [wreg]
  1345                           
  1346                           
  1347                           ;pwm.c: 54: PWMCON0 = 0x21;
  1348  0397  3021               	movlw	33
  1349  0398  0093               	movwf	19	;volatile
  1350                           
  1351                           ;pwm.c: 55: PORTB&=~(1<<7);
  1352  0399  1386               	bcf	6,7	;volatile
  1353  039A  0008               	return
  1354  039B                     __end_of_modeb:	
  1355                           
  1356                           	psect	text10
  1357  039B                     __ptext10:	
  1358 ;; *************** function _modea *****************
  1359 ;; Defined at:
  1360 ;;		line 46 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;		None
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;		None
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  1    wreg      void 
  1367 ;; Registers used:
  1368 ;;		wreg, status,2
  1369 ;; Tracked objects:
  1370 ;;		On entry : 300/0
  1371 ;;		On exit  : 300/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1374 ;;      Params:         0       0       0       0
  1375 ;;      Locals:         0       0       0       0
  1376 ;;      Temps:          0       0       0       0
  1377 ;;      Totals:         0       0       0       0
  1378 ;;Total ram usage:        0 bytes
  1379 ;; Hardware stack levels used:    1
  1380 ;; Hardware stack levels required when called:    1
  1381 ;; This function calls:
  1382 ;;		Nothing
  1383 ;; This function is called by:
  1384 ;;		_procKey2
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           
  1389                           ;psect for function _modea
  1390  039B                     _modea:	
  1391  039B                     l2138:	
  1392                           ;incstack = 0
  1393                           ; Regs used in _modea: [wreg+status,2]
  1394                           
  1395                           
  1396                           ;pwm.c: 48: PWMD1L = 125;
  1397  039B  307D               	movlw	125
  1398  039C  0098               	movwf	24	;volatile
  1399                           
  1400                           ;pwm.c: 49: PWMD01H = 0;
  1401  039D  019C               	clrf	28	;volatile
  1402  039E  0008               	return
  1403  039F                     __end_of_modea:	
  1404                           
  1405                           	psect	text11
  1406  0285                     __ptext11:	
  1407 ;; *************** function _procKey1 *****************
  1408 ;; Defined at:
  1409 ;;		line 98 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;		None
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;		None
  1414 ;; Return value:  Size  Location     Type
  1415 ;;                  1    wreg      void 
  1416 ;; Registers used:
  1417 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1418 ;; Tracked objects:
  1419 ;;		On entry : 300/0
  1420 ;;		On exit  : 300/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1423 ;;      Params:         0       0       0       0
  1424 ;;      Locals:         0       0       0       0
  1425 ;;      Temps:          0       0       0       0
  1426 ;;      Totals:         0       0       0       0
  1427 ;;Total ram usage:        0 bytes
  1428 ;; Hardware stack levels used:    1
  1429 ;; Hardware stack levels required when called:    2
  1430 ;; This function calls:
  1431 ;;		_mode1
  1432 ;;		_mode2
  1433 ;;		_mode3
  1434 ;;		_mode4
  1435 ;;		_mode5
  1436 ;; This function is called by:
  1437 ;;		_startPWM
  1438 ;;		_KeyServer
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           
  1443                           ;psect for function _procKey1
  1444  0285                     _procKey1:	
  1445                           
  1446                           ;main.c: 100: pwmFlag = 1;
  1447                           
  1448                           ;incstack = 0
  1449                           ; Regs used in _procKey1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1450  0285  1770               	bsf	_pwmFlag/(0+8),_pwmFlag& (0+7)	;volatile
  1451                           
  1452                           ;main.c: 101: ONFlag = 1;
  1453  0286  17F0               	bsf	_ONFlag/(0+8),_ONFlag& (0+7)	;volatile
  1454                           
  1455                           ;main.c: 102: if(++pwm0Step > 4)
  1456  0287  3005               	movlw	5
  1457  0288  0AD5               	incf	_pwm0Step,f
  1458  0289  0255               	subwf	_pwm0Step,w
  1459  028A  1C03               	skipc
  1460  028B  2A8E               	goto	l2206
  1461                           
  1462                           ;main.c: 103: pwm0Step = 1;
  1463  028C  01D5               	clrf	_pwm0Step
  1464  028D  0AD5               	incf	_pwm0Step,f
  1465  028E                     l2206:	
  1466                           ;main.c: 120: break;
  1467                           
  1468  028E  0855               	movf	_pwm0Step,w
  1469                           
  1470                           ; Switch size 1, requested type "space"
  1471                           ; Number of cases is 5, Range of values is 1 to 5
  1472                           ; switch strategies available:
  1473                           ; Name         Instructions Cycles
  1474                           ; direct_byte           14     9 (fixed)
  1475                           ; simple_byte           16     9 (average)
  1476                           ; jumptable            263     9 (fixed)
  1477                           ;	Chosen strategy is direct_byte
  1478  028F  3EFF               	addlw	-1
  1479  0290  1C03               	skipc
  1480  0291  0008               	return
  1481  0292  0084               	movwf	4
  1482  0293  3005               	movlw	5
  1483  0294  0204               	subwf	4,w
  1484  0295  1803               	skipnc
  1485  0296  0008               	return
  1486  0297  3003               	movlw	high S2804
  1487  0298  008A               	movwf	10
  1488  0299  308E               	movlw	low S2804
  1489  029A  0704               	addwf	4,w
  1490  029B  0082               	movwf	2
  1491  029C  0008               	return
  1492  029D                     l2194:	
  1493                           
  1494                           ;main.c: 107: mode1();
  1495  029D  2BAF               	ljmp	l2118
  1496  029E                     l2196:	
  1497                           ;main.c: 108: break;
  1498                           
  1499                           
  1500                           ;main.c: 110: mode2();
  1501  029E  2BAB               	ljmp	l2122
  1502  029F                     l2198:	
  1503                           ;main.c: 111: break;
  1504                           
  1505                           
  1506                           ;main.c: 113: mode3();
  1507  029F  2BA7               	ljmp	l2126
  1508  02A0                     l2200:	
  1509                           ;main.c: 114: break;
  1510                           
  1511                           
  1512                           ;main.c: 116: mode4();
  1513  02A0  2BA3               	ljmp	l2130
  1514  02A1                     l2202:	
  1515                           ;main.c: 117: break;
  1516                           
  1517                           
  1518                           ;main.c: 119: mode5();
  1519  02A1  2B9F               	ljmp	l2134
  1520  02A2                     __end_of_procKey1:	
  1521                           
  1522                           	psect	swtext2
  1523  038E                     __pswtext2:	
  1524  038E                     S2804:	
  1525  038E  2A9D               	ljmp	l2194
  1526  038F  2A9E               	ljmp	l2196
  1527  0390  2A9F               	ljmp	l2198
  1528  0391  2AA0               	ljmp	l2200
  1529  0392  2AA1               	ljmp	l2202
  1530                           
  1531                           	psect	text12
  1532  039F                     __ptext12:	
  1533 ;; *************** function _mode5 *****************
  1534 ;; Defined at:
  1535 ;;		line 40 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;		None
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;		None
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  1    wreg      void 
  1542 ;; Registers used:
  1543 ;;		wreg, status,2
  1544 ;; Tracked objects:
  1545 ;;		On entry : 300/0
  1546 ;;		On exit  : 300/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1549 ;;      Params:         0       0       0       0
  1550 ;;      Locals:         0       0       0       0
  1551 ;;      Temps:          0       0       0       0
  1552 ;;      Totals:         0       0       0       0
  1553 ;;Total ram usage:        0 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; Hardware stack levels required when called:    1
  1556 ;; This function calls:
  1557 ;;		Nothing
  1558 ;; This function is called by:
  1559 ;;		_procKey1
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           
  1564                           ;psect for function _mode5
  1565  039F                     _mode5:	
  1566  039F                     l2134:	
  1567                           ;incstack = 0
  1568                           ; Regs used in _mode5: [wreg+status,2]
  1569                           
  1570                           
  1571                           ;pwm.c: 42: PWMD0L = 125;
  1572  039F  307D               	movlw	125
  1573  03A0  0097               	movwf	23	;volatile
  1574                           
  1575                           ;pwm.c: 43: PWMD01H = 0;
  1576  03A1  019C               	clrf	28	;volatile
  1577  03A2  0008               	return
  1578  03A3                     __end_of_mode5:	
  1579                           
  1580                           	psect	text13
  1581  03A3                     __ptext13:	
  1582 ;; *************** function _mode4 *****************
  1583 ;; Defined at:
  1584 ;;		line 34 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;		None
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;		None
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      void 
  1591 ;; Registers used:
  1592 ;;		wreg, status,2
  1593 ;; Tracked objects:
  1594 ;;		On entry : 300/0
  1595 ;;		On exit  : 300/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1598 ;;      Params:         0       0       0       0
  1599 ;;      Locals:         0       0       0       0
  1600 ;;      Temps:          0       0       0       0
  1601 ;;      Totals:         0       0       0       0
  1602 ;;Total ram usage:        0 bytes
  1603 ;; Hardware stack levels used:    1
  1604 ;; Hardware stack levels required when called:    1
  1605 ;; This function calls:
  1606 ;;		Nothing
  1607 ;; This function is called by:
  1608 ;;		_procKey1
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612                           
  1613                           ;psect for function _mode4
  1614  03A3                     _mode4:	
  1615  03A3                     l2130:	
  1616                           ;incstack = 0
  1617                           ; Regs used in _mode4: [wreg+status,2]
  1618                           
  1619                           
  1620                           ;pwm.c: 36: PWMD0L = 71;
  1621  03A3  3047               	movlw	71
  1622  03A4  0097               	movwf	23	;volatile
  1623                           
  1624                           ;pwm.c: 37: PWMD01H = 0;
  1625  03A5  019C               	clrf	28	;volatile
  1626  03A6  0008               	return
  1627  03A7                     __end_of_mode4:	
  1628                           
  1629                           	psect	text14
  1630  03A7                     __ptext14:	
  1631 ;; *************** function _mode3 *****************
  1632 ;; Defined at:
  1633 ;;		line 28 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1634 ;; Parameters:    Size  Location     Type
  1635 ;;		None
  1636 ;; Auto vars:     Size  Location     Type
  1637 ;;		None
  1638 ;; Return value:  Size  Location     Type
  1639 ;;                  1    wreg      void 
  1640 ;; Registers used:
  1641 ;;		wreg, status,2
  1642 ;; Tracked objects:
  1643 ;;		On entry : 300/0
  1644 ;;		On exit  : 300/0
  1645 ;;		Unchanged: 0/0
  1646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1647 ;;      Params:         0       0       0       0
  1648 ;;      Locals:         0       0       0       0
  1649 ;;      Temps:          0       0       0       0
  1650 ;;      Totals:         0       0       0       0
  1651 ;;Total ram usage:        0 bytes
  1652 ;; Hardware stack levels used:    1
  1653 ;; Hardware stack levels required when called:    1
  1654 ;; This function calls:
  1655 ;;		Nothing
  1656 ;; This function is called by:
  1657 ;;		_procKey1
  1658 ;; This function uses a non-reentrant model
  1659 ;;
  1660                           
  1661                           
  1662                           ;psect for function _mode3
  1663  03A7                     _mode3:	
  1664  03A7                     l2126:	
  1665                           ;incstack = 0
  1666                           ; Regs used in _mode3: [wreg+status,2]
  1667                           
  1668                           
  1669                           ;pwm.c: 30: PWMD0L = 20;
  1670  03A7  3014               	movlw	20
  1671  03A8  0097               	movwf	23	;volatile
  1672                           
  1673                           ;pwm.c: 31: PWMD01H = 0;
  1674  03A9  019C               	clrf	28	;volatile
  1675  03AA  0008               	return
  1676  03AB                     __end_of_mode3:	
  1677                           
  1678                           	psect	text15
  1679  03AB                     __ptext15:	
  1680 ;; *************** function _mode2 *****************
  1681 ;; Defined at:
  1682 ;;		line 22 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;		None
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;		None
  1687 ;; Return value:  Size  Location     Type
  1688 ;;                  1    wreg      void 
  1689 ;; Registers used:
  1690 ;;		wreg, status,2
  1691 ;; Tracked objects:
  1692 ;;		On entry : 300/0
  1693 ;;		On exit  : 300/0
  1694 ;;		Unchanged: 0/0
  1695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1696 ;;      Params:         0       0       0       0
  1697 ;;      Locals:         0       0       0       0
  1698 ;;      Temps:          0       0       0       0
  1699 ;;      Totals:         0       0       0       0
  1700 ;;Total ram usage:        0 bytes
  1701 ;; Hardware stack levels used:    1
  1702 ;; Hardware stack levels required when called:    1
  1703 ;; This function calls:
  1704 ;;		Nothing
  1705 ;; This function is called by:
  1706 ;;		_procKey1
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           
  1711                           ;psect for function _mode2
  1712  03AB                     _mode2:	
  1713  03AB                     l2122:	
  1714                           ;incstack = 0
  1715                           ; Regs used in _mode2: [wreg+status,2]
  1716                           
  1717                           
  1718                           ;pwm.c: 24: PWMD0L = 12;
  1719  03AB  300C               	movlw	12
  1720  03AC  0097               	movwf	23	;volatile
  1721                           
  1722                           ;pwm.c: 25: PWMD01H = 0;
  1723  03AD  019C               	clrf	28	;volatile
  1724  03AE  0008               	return
  1725  03AF                     __end_of_mode2:	
  1726                           
  1727                           	psect	text16
  1728  03AF                     __ptext16:	
  1729 ;; *************** function _mode1 *****************
  1730 ;; Defined at:
  1731 ;;		line 16 in file "C:\Users\hhmm6\Desktop\scm\keytest2\pwm.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;		None
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;		None
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  1    wreg      void 
  1738 ;; Registers used:
  1739 ;;		wreg, status,2
  1740 ;; Tracked objects:
  1741 ;;		On entry : 300/0
  1742 ;;		On exit  : 300/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1745 ;;      Params:         0       0       0       0
  1746 ;;      Locals:         0       0       0       0
  1747 ;;      Temps:          0       0       0       0
  1748 ;;      Totals:         0       0       0       0
  1749 ;;Total ram usage:        0 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; Hardware stack levels required when called:    1
  1752 ;; This function calls:
  1753 ;;		Nothing
  1754 ;; This function is called by:
  1755 ;;		_procKey1
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           
  1760                           ;psect for function _mode1
  1761  03AF                     _mode1:	
  1762  03AF                     l2118:	
  1763                           ;incstack = 0
  1764                           ; Regs used in _mode1: [wreg+status,2]
  1765                           
  1766                           
  1767                           ;pwm.c: 18: PWMD0L = 1;
  1768  03AF  3001               	movlw	1
  1769  03B0  0097               	movwf	23	;volatile
  1770                           
  1771                           ;pwm.c: 19: PWMD01H = 0;
  1772  03B1  019C               	clrf	28	;volatile
  1773  03B2  0008               	return
  1774  03B3                     __end_of_mode1:	
  1775                           
  1776                           	psect	text17
  1777  0338                     __ptext17:	
  1778 ;; *************** function _Init_System *****************
  1779 ;; Defined at:
  1780 ;;		line 23 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;		None
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		wreg, status,2
  1789 ;; Tracked objects:
  1790 ;;		On entry : B00/0
  1791 ;;		On exit  : 300/100
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1794 ;;      Params:         0       0       0       0
  1795 ;;      Locals:         0       0       0       0
  1796 ;;      Temps:          0       0       0       0
  1797 ;;      Totals:         0       0       0       0
  1798 ;;Total ram usage:        0 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    1
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_main
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           
  1809                           ;psect for function _Init_System
  1810  0338                     _Init_System:	
  1811                           
  1812                           ;incstack = 0
  1813                           ; Regs used in _Init_System: [wreg+status,2]
  1814  0338  0000               	nop	;# 
  1815  0339  0064               	clrwdt	;# 
  1816                           
  1817                           ;main.c: 27: INTCON = 0;
  1818  033A  018B               	clrf	11	;volatile
  1819                           
  1820                           ;main.c: 28: OSCCON = 0X71;
  1821  033B  3071               	movlw	113
  1822  033C  1683               	bsf	3,5	;RP0=1, select bank1
  1823  033D  1303               	bcf	3,6	;RP1=0, select bank1
  1824  033E  0088               	movwf	8	;volatile
  1825                           
  1826                           ;main.c: 29: OPTION_REG = 0;
  1827                           
  1828                           ;main.c: 36: PIE1 = 2;
  1829                           
  1830                           ;main.c: 37: PR2 = 250;
  1831  033F  22DD               	fcall	PL12	;call to abstracted procedure
  1832                           
  1833                           ;main.c: 38: T2CON = 4;
  1834  0340  3004               	movlw	4
  1835  0341  1283               	bcf	3,5	;RP0=0, select bank0
  1836  0342  0092               	movwf	18	;volatile
  1837                           
  1838                           ;main.c: 39: TRISA = 0x00;
  1839  0343  1683               	bsf	3,5	;RP0=1, select bank1
  1840  0344  0185               	clrf	5	;volatile
  1841                           
  1842                           ;main.c: 40: TRISB = 0x04;
  1843  0345  0086               	movwf	6	;volatile
  1844                           
  1845                           ;main.c: 42: INTCON = 0XC0;
  1846  0346  30C0               	movlw	192
  1847  0347  008B               	movwf	11	;volatile
  1848  0348  0008               	return
  1849  0349                     __end_of_Init_System:	
  1850                           
  1851                           	psect	text18
  1852  021F                     __ptext18:	
  1853 ;; *************** function _CheckTouchKey *****************
  1854 ;; Defined at:
  1855 ;;		line 495 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;		None
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;		None
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 300/0
  1866 ;;		On exit  : 300/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1869 ;;      Params:         0       0       0       0
  1870 ;;      Locals:         0       0       0       0
  1871 ;;      Temps:          0       0       0       0
  1872 ;;      Totals:         0       0       0       0
  1873 ;;Total ram usage:        0 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    5
  1876 ;; This function calls:
  1877 ;;		_CheckKeyOldValue
  1878 ;;		_CheckOnceResult
  1879 ;;		_CheckValidTime
  1880 ;;		_ClearResSum
  1881 ;;		_GetTouchKeyValue
  1882 ;;		_KeyStopClear
  1883 ;;		_TurnKeyFlags
  1884 ;; This function is called by:
  1885 ;;		_main
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889                           
  1890                           ;psect for function _CheckTouchKey
  1891  021F                     _CheckTouchKey:	
  1892                           
  1893                           ;CheckTouchKey.c: 497: if(!b_kover)
  1894                           
  1895                           ;incstack = 0
  1896                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1897  021F  19F0               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1898  0220  2A2B               	goto	l1176
  1899                           
  1900                           ;CheckTouchKey.c: 498: {
  1901                           ;CheckTouchKey.c: 500: GetTouchKeyValue();
  1902  0221  21F1               	fcall	_GetTouchKeyValue
  1903                           
  1904                           ;CheckTouchKey.c: 501: if(++KeyCounter >= 8)
  1905  0222  3008               	movlw	8
  1906  0223  1283               	bcf	3,5	;RP0=0, select bank0
  1907  0224  0AC4               	incf	_KeyCounter,f
  1908  0225  0244               	subwf	_KeyCounter,w
  1909  0226  1C03               	skipc
  1910  0227  2A44               	goto	l2712
  1911                           
  1912                           ;CheckTouchKey.c: 502: {
  1913                           ;CheckTouchKey.c: 503: KeyCounter = 0;
  1914  0228  01C4               	clrf	_KeyCounter
  1915                           
  1916                           ;CheckTouchKey.c: 504: b_kover = 1;
  1917  0229  15F0               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1918  022A  2A44               	goto	l2712
  1919  022B                     l1176:	
  1920                           
  1921                           ;CheckTouchKey.c: 507: else if(!b_kover1)
  1922  022B  1970               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1923  022C  2A40               	goto	l2706
  1924                           
  1925                           ;CheckTouchKey.c: 508: {
  1926                           ;CheckTouchKey.c: 510: CheckOnceResult();
  1927  022D  2018               	fcall	_CheckOnceResult
  1928                           
  1929                           ;CheckTouchKey.c: 513: TurnKeyFlags();
  1930  022E  21C2               	fcall	_TurnKeyFlags
  1931                           
  1932                           ;CheckTouchKey.c: 514: b_kover1 = 1;
  1933  022F  1570               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1934                           
  1935                           ;CheckTouchKey.c: 520: if(b_kerr || KeyCounter > KeyValidNumber)
  1936  0230  1870               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1937  0231  2A38               	goto	l2696
  1938  0232  3002               	movlw	2
  1939  0233  1283               	bcf	3,5	;RP0=0, select bank0
  1940  0234  1303               	bcf	3,6	;RP1=0, select bank0
  1941  0235  0244               	subwf	_KeyCounter,w
  1942  0236  1C03               	skipc
  1943  0237  2A3C               	goto	l2704
  1944  0238                     l2696:	
  1945                           
  1946                           ;CheckTouchKey.c: 521: {
  1947                           ;CheckTouchKey.c: 522: KeyStopClear();
  1948  0238  22E5               	fcall	_KeyStopClear
  1949                           
  1950                           ;CheckTouchKey.c: 523: b_kerr = 0;
  1951  0239  1070               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1952                           
  1953                           ;CheckTouchKey.c: 524: b_kover = 0;
  1954  023A  11F0               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1955                           
  1956                           ;CheckTouchKey.c: 525: b_kover1 = 0;
  1957  023B  1170               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1958  023C                     l2704:	
  1959                           
  1960                           ;CheckTouchKey.c: 526: }
  1961                           ;CheckTouchKey.c: 527: KeyCounter = 0;
  1962  023C  1283               	bcf	3,5	;RP0=0, select bank0
  1963  023D  1303               	bcf	3,6	;RP1=0, select bank0
  1964  023E  01C4               	clrf	_KeyCounter
  1965                           
  1966                           ;CheckTouchKey.c: 528: }
  1967  023F  2A44               	goto	l2712
  1968  0240                     l2706:	
  1969                           
  1970                           ;CheckTouchKey.c: 529: else
  1971                           ;CheckTouchKey.c: 530: {
  1972                           ;CheckTouchKey.c: 532: CheckKeyOldValue();
  1973  0240  2104               	fcall	_CheckKeyOldValue
  1974                           
  1975                           ;CheckTouchKey.c: 534: ClearResSum();
  1976  0241  2349               	fcall	_ClearResSum
  1977                           
  1978                           ;CheckTouchKey.c: 536: b_kover = 0;
  1979  0242  11F0               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1980                           
  1981                           ;CheckTouchKey.c: 537: b_kover1 = 0;
  1982  0243  1170               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1983  0244                     l2712:	
  1984                           
  1985                           ;CheckTouchKey.c: 538: }
  1986                           ;CheckTouchKey.c: 540: CheckValidTime();
  1987  0244  2B14               	ljmp	l2410
  1988  0245                     __end_of_CheckTouchKey:	
  1989                           
  1990                           	psect	text19
  1991  01C2                     __ptext19:	
  1992 ;; *************** function _TurnKeyFlags *****************
  1993 ;; Defined at:
  1994 ;;		line 382 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;		None
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;		None
  1999 ;; Return value:  Size  Location     Type
  2000 ;;                  1    wreg      void 
  2001 ;; Registers used:
  2002 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2003 ;; Tracked objects:
  2004 ;;		On entry : B00/0
  2005 ;;		On exit  : 0/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2008 ;;      Params:         0       0       0       0
  2009 ;;      Locals:         0       0       0       0
  2010 ;;      Temps:          0       0       0       0
  2011 ;;      Totals:         0       0       0       0
  2012 ;;Total ram usage:        0 bytes
  2013 ;; Hardware stack levels used:    1
  2014 ;; Hardware stack levels required when called:    4
  2015 ;; This function calls:
  2016 ;;		_KeyClearIn
  2017 ;; This function is called by:
  2018 ;;		_CheckTouchKey
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022                           
  2023                           ;psect for function _TurnKeyFlags
  2024  01C2                     _TurnKeyFlags:	
  2025                           
  2026                           ;CheckTouchKey.c: 384: static unsigned char KeyHaveTimes = 0;
  2027                           ;CheckTouchKey.c: 385: static unsigned char KeyNoTimes = 0;
  2028                           ;CheckTouchKey.c: 387: if(KeyData[0] | KeyData[1])
  2029                           
  2030                           ;incstack = 0
  2031                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2032  01C2  0837               	movf	_KeyData+1,w	;volatile
  2033  01C3  0436               	iorwf	_KeyData,w	;volatile
  2034  01C4  1903               	btfsc	3,2
  2035  01C5  29E4               	goto	l2402
  2036                           
  2037                           ;CheckTouchKey.c: 388: {
  2038                           ;CheckTouchKey.c: 389: KeyNoTimes = 0;
  2039  01C6  01C0               	clrf	TurnKeyFlags@KeyNoTimes
  2040                           
  2041                           ;CheckTouchKey.c: 391: if(KeyData[0] == KeyOldData[0] && KeyData[1] == KeyOldData[1])
  2042  01C7  0836               	movf	_KeyData,w	;volatile
  2043  01C8  0638               	xorwf	_KeyOldData,w	;volatile
  2044  01C9  1D03               	skipz
  2045  01CA  29DD               	goto	l1157
  2046  01CB  0837               	movf	_KeyData+1,w	;volatile
  2047  01CC  0639               	xorwf	_KeyOldData+1,w	;volatile
  2048  01CD  1D03               	skipz
  2049  01CE  29DD               	goto	l1157
  2050  01CF  3002               	movlw	2
  2051  01D0  0AC1               	incf	TurnKeyFlags@KeyHaveTimes,f
  2052  01D1  0241               	subwf	TurnKeyFlags@KeyHaveTimes,w
  2053  01D2  1C03               	skipc
  2054  01D3  0008               	return
  2055                           
  2056                           ;CheckTouchKey.c: 394: {
  2057                           ;CheckTouchKey.c: 395: KeyHaveTimes = 0;
  2058  01D4  01C1               	clrf	TurnKeyFlags@KeyHaveTimes
  2059                           
  2060                           ;CheckTouchKey.c: 396: KeyFlag[0] = KeyData[0];
  2061  01D5  0836               	movf	_KeyData,w	;volatile
  2062  01D6  00BE               	movwf	_KeyFlag	;volatile
  2063                           
  2064                           ;CheckTouchKey.c: 397: KeyFlag[1] = KeyData[1];
  2065  01D7  0837               	movf	_KeyData+1,w	;volatile
  2066  01D8  00BF               	movwf	_KeyFlag+1	;volatile
  2067                           
  2068                           ;CheckTouchKey.c: 400: {
  2069                           ;CheckTouchKey.c: 401: if(!b_kclr)
  2070  01D9  18F0               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2071  01DA  0008               	return
  2072                           
  2073                           ;CheckTouchKey.c: 402: {
  2074                           ;CheckTouchKey.c: 403: b_kclr = 1;
  2075  01DB  14F0               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2076                           
  2077                           ;CheckTouchKey.c: 404: KeyClearIn();
  2078  01DC  2B66               	ljmp	l2152
  2079  01DD                     l1157:	
  2080                           
  2081                           ;CheckTouchKey.c: 409: else
  2082                           ;CheckTouchKey.c: 410: {
  2083                           ;CheckTouchKey.c: 411: b_kclr = 0;
  2084  01DD  10F0               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2085                           
  2086                           ;CheckTouchKey.c: 412: KeyOldData[0] = KeyData[0];
  2087  01DE  0836               	movf	_KeyData,w	;volatile
  2088  01DF  00B8               	movwf	_KeyOldData	;volatile
  2089                           
  2090                           ;CheckTouchKey.c: 413: KeyOldData[1] = KeyData[1];
  2091  01E0  0837               	movf	_KeyData+1,w	;volatile
  2092  01E1  00B9               	movwf	_KeyOldData+1	;volatile
  2093                           
  2094                           ;CheckTouchKey.c: 414: KeyHaveTimes = 0;
  2095  01E2  01C1               	clrf	TurnKeyFlags@KeyHaveTimes
  2096                           
  2097                           ;CheckTouchKey.c: 415: }
  2098                           ;CheckTouchKey.c: 416: }
  2099  01E3  0008               	return
  2100  01E4                     l2402:	
  2101                           
  2102                           ;CheckTouchKey.c: 417: else
  2103                           ;CheckTouchKey.c: 418: {
  2104                           ;CheckTouchKey.c: 419: KeyHaveTimes = 0;
  2105  01E4  01C1               	clrf	TurnKeyFlags@KeyHaveTimes
  2106                           
  2107                           ;CheckTouchKey.c: 420: KeyOldData[0] = 0;
  2108  01E5  01B8               	clrf	_KeyOldData	;volatile
  2109                           
  2110                           ;CheckTouchKey.c: 421: KeyOldData[1] = 0;
  2111  01E6  01B9               	clrf	_KeyOldData+1	;volatile
  2112                           
  2113                           ;CheckTouchKey.c: 423: if(++KeyNoTimes >=2)
  2114  01E7  3002               	movlw	2
  2115  01E8  0AC0               	incf	TurnKeyFlags@KeyNoTimes,f
  2116  01E9  0240               	subwf	TurnKeyFlags@KeyNoTimes,w
  2117  01EA  1C03               	skipc
  2118  01EB  0008               	return
  2119                           
  2120                           ;CheckTouchKey.c: 424: {
  2121                           ;CheckTouchKey.c: 425: KeyNoTimes = 0;
  2122  01EC  01C0               	clrf	TurnKeyFlags@KeyNoTimes
  2123                           
  2124                           ;CheckTouchKey.c: 426: KeyFlag[0] = 0;
  2125  01ED  01BE               	clrf	_KeyFlag	;volatile
  2126                           
  2127                           ;CheckTouchKey.c: 427: KeyFlag[1] = 0;
  2128  01EE  01BF               	clrf	_KeyFlag+1	;volatile
  2129                           
  2130                           ;CheckTouchKey.c: 429: b_kclr = 0;
  2131  01EF  10F0               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  2132  01F0  0008               	return
  2133  01F1                     __end_of_TurnKeyFlags:	
  2134                           
  2135                           	psect	text20
  2136  0366                     __ptext20:	
  2137 ;; *************** function _KeyClearIn *****************
  2138 ;; Defined at:
  2139 ;;		line 88 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2140 ;; Parameters:    Size  Location     Type
  2141 ;;		None
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;  cnt             1    4[COMMON] unsigned char 
  2144 ;; Return value:  Size  Location     Type
  2145 ;;                  1    wreg      void 
  2146 ;; Registers used:
  2147 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2148 ;; Tracked objects:
  2149 ;;		On entry : B00/0
  2150 ;;		On exit  : 0/0
  2151 ;;		Unchanged: 0/0
  2152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2153 ;;      Params:         0       0       0       0
  2154 ;;      Locals:         1       0       0       0
  2155 ;;      Temps:          0       0       0       0
  2156 ;;      Totals:         1       0       0       0
  2157 ;;Total ram usage:        1 bytes
  2158 ;; Hardware stack levels used:    1
  2159 ;; Hardware stack levels required when called:    3
  2160 ;; This function calls:
  2161 ;;		_KeyClearOne
  2162 ;;		_KeyIsIn
  2163 ;; This function is called by:
  2164 ;;		_TurnKeyFlags
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           
  2169                           ;psect for function _KeyClearIn
  2170  0366                     _KeyClearIn:	
  2171  0366                     l2152:	
  2172                           ;incstack = 0
  2173                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2174                           
  2175                           
  2176                           ;CheckTouchKey.c: 90: unsigned char cnt;
  2177                           ;CheckTouchKey.c: 91: for(cnt=0;cnt < KeyTotalNumber;cnt++)
  2178  0366  01F6               	clrf	KeyClearIn@cnt
  2179  0367                     l2158:	
  2180                           
  2181                           ;CheckTouchKey.c: 92: {
  2182                           ;CheckTouchKey.c: 93: if(!KeyIsIn(cnt))
  2183  0367  0876               	movf	KeyClearIn@cnt,w
  2184  0368  2326               	fcall	_KeyIsIn
  2185  0369  3A00               	xorlw	0
  2186  036A  1D03               	skipz
  2187  036B  2B6E               	goto	l2162
  2188                           
  2189                           ;CheckTouchKey.c: 94: {
  2190                           ;CheckTouchKey.c: 95: KeyClearOne(cnt);
  2191  036C  0876               	movf	KeyClearIn@cnt,w
  2192  036D  22A2               	fcall	_KeyClearOne
  2193  036E                     l2162:	
  2194  036E  3002               	movlw	2
  2195  036F  0AF6               	incf	KeyClearIn@cnt,f
  2196  0370  0276               	subwf	KeyClearIn@cnt,w
  2197  0371  1803               	btfsc	3,0
  2198  0372  0008               	return
  2199  0373  2B67               	goto	l2158
  2200  0374                     __end_of_KeyClearIn:	
  2201                           
  2202                           	psect	text21
  2203  02E5                     __ptext21:	
  2204 ;; *************** function _KeyStopClear *****************
  2205 ;; Defined at:
  2206 ;;		line 107 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;		None
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;  i               1    3[COMMON] unsigned char 
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  1    wreg      void 
  2213 ;; Registers used:
  2214 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 800/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2220 ;;      Params:         0       0       0       0
  2221 ;;      Locals:         1       0       0       0
  2222 ;;      Temps:          0       0       0       0
  2223 ;;      Totals:         1       0       0       0
  2224 ;;Total ram usage:        1 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    2
  2227 ;; This function calls:
  2228 ;;		_KeyClearOne
  2229 ;; This function is called by:
  2230 ;;		_CheckTouchKey
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           
  2235                           ;psect for function _KeyStopClear
  2236  02E5                     _KeyStopClear:	
  2237                           
  2238                           ;CheckTouchKey.c: 109: unsigned char i;
  2239                           ;CheckTouchKey.c: 110: KeyFlag[0] = 0;
  2240                           
  2241                           ;incstack = 0
  2242                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2243  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  2244  02E6  1303               	bcf	3,6	;RP1=0, select bank0
  2245  02E7  01BE               	clrf	_KeyFlag	;volatile
  2246                           
  2247                           ;CheckTouchKey.c: 111: KeyFlag[1] = 0;
  2248  02E8  01BF               	clrf	_KeyFlag+1	;volatile
  2249                           
  2250                           ;CheckTouchKey.c: 112: for(i = 0; i < KeyTotalNumber; i++)
  2251  02E9  01F5               	clrf	KeyStopClear@i
  2252  02EA                     l2242:	
  2253                           
  2254                           ;CheckTouchKey.c: 113: {
  2255                           ;CheckTouchKey.c: 114: KeyResSum[i] = 0;
  2256  02EA  1003               	clrc
  2257  02EB  0D75               	rlf	KeyStopClear@i,w
  2258  02EC  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2259  02ED  0084               	movwf	4
  2260  02EE  1383               	bcf	3,7	;select IRP bank0
  2261  02EF  0180               	clrf	0
  2262  02F0  0A84               	incf	4,f
  2263  02F1  0180               	clrf	0
  2264                           
  2265                           ;CheckTouchKey.c: 115: KeyClearOne(i);
  2266  02F2  0875               	movf	KeyStopClear@i,w
  2267  02F3  22A2               	fcall	_KeyClearOne
  2268  02F4  3002               	movlw	2
  2269  02F5  0AF5               	incf	KeyStopClear@i,f
  2270  02F6  0275               	subwf	KeyStopClear@i,w
  2271  02F7  1803               	btfsc	3,0
  2272  02F8  0008               	return
  2273  02F9  2AEA               	goto	l2242
  2274  02FA                     __end_of_KeyStopClear:	
  2275                           
  2276                           	psect	text22
  2277  01F1                     __ptext22:	
  2278 ;; *************** function _GetTouchKeyValue *****************
  2279 ;; Defined at:
  2280 ;;		line 180 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;		None
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;  cnt             1    4[COMMON] unsigned char 
  2285 ;;  temp            1    3[COMMON] unsigned char 
  2286 ;; Return value:  Size  Location     Type
  2287 ;;                  1    wreg      void 
  2288 ;; Registers used:
  2289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2290 ;; Tracked objects:
  2291 ;;		On entry : 300/0
  2292 ;;		On exit  : A00/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2295 ;;      Params:         0       0       0       0
  2296 ;;      Locals:         2       0       0       0
  2297 ;;      Temps:          0       0       0       0
  2298 ;;      Totals:         2       0       0       0
  2299 ;;Total ram usage:        2 bytes
  2300 ;; Hardware stack levels used:    1
  2301 ;; Hardware stack levels required when called:    2
  2302 ;; This function calls:
  2303 ;;		_ClearResSum
  2304 ;; This function is called by:
  2305 ;;		_CheckTouchKey
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           
  2310                           ;psect for function _GetTouchKeyValue
  2311  01F1                     _GetTouchKeyValue:	
  2312                           
  2313                           ;CheckTouchKey.c: 182: unsigned char cnt = 0,temp;
  2314                           
  2315                           ;incstack = 0
  2316                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2317  01F1  01F6               	clrf	GetTouchKeyValue@cnt
  2318  01F2                     l1097:	
  2319                           ;CheckTouchKey.c: 184: do
  2320                           
  2321                           
  2322                           ;CheckTouchKey.c: 185: {
  2323                           ;CheckTouchKey.c: 186: KEYCON0 = 0;
  2324  01F2  1683               	bsf	3,5	;RP0=1, select bank1
  2325  01F3  0192               	clrf	18	;volatile
  2326                           
  2327                           ;CheckTouchKey.c: 187: KEYCON1 = 0;
  2328  01F4  0193               	clrf	19	;volatile
  2329                           
  2330                           ;CheckTouchKey.c: 194: KEYCON0 = Table_KeyCap[cnt];
  2331  01F5  0876               	movf	GetTouchKeyValue@cnt,w
  2332  01F6  3E0B               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  2333  01F7  0084               	movwf	4
  2334  01F8  2300               	fcall	stringdir
  2335  01F9  0092               	movwf	18	;volatile
  2336                           
  2337                           ;CheckTouchKey.c: 195: KEYCON1 = Table_KeyChannel[cnt];
  2338  01FA  0876               	movf	GetTouchKeyValue@cnt,w
  2339  01FB  3E0D               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  2340  01FC  0084               	movwf	4
  2341  01FD  2300               	fcall	stringdir
  2342  01FE  0093               	movwf	19	;volatile
  2343                           
  2344                           ;CheckTouchKey.c: 196: KEYCON0 |= 0x1;
  2345  01FF  1412               	bsf	18,0	;volatile
  2346                           
  2347                           ;CheckTouchKey.c: 198: temp = 0;
  2348  0200  01F5               	clrf	GetTouchKeyValue@temp
  2349  0201                     l1098:	
  2350                           ;CheckTouchKey.c: 199: while(!(KEYCON0&0x80))
  2351                           
  2352  0201  1B92               	btfsc	18,7	;volatile
  2353  0202  2A09               	goto	l2264
  2354                           
  2355                           ;CheckTouchKey.c: 200: {
  2356                           ;CheckTouchKey.c: 201: if(0 == (--temp))
  2357  0203  0BF5               	decfsz	GetTouchKeyValue@temp,f
  2358  0204  2A01               	goto	l1098
  2359                           
  2360                           ;CheckTouchKey.c: 202: {
  2361                           ;CheckTouchKey.c: 203: KeyCounter = 255;
  2362  0205  30FF               	movlw	255
  2363  0206  1283               	bcf	3,5	;RP0=0, select bank0
  2364  0207  00C4               	movwf	_KeyCounter
  2365                           
  2366                           ;CheckTouchKey.c: 204: ClearResSum();
  2367  0208  2B49               	ljmp	l2166
  2368  0209                     l2264:	
  2369                           
  2370                           ;CheckTouchKey.c: 206: }
  2371                           ;CheckTouchKey.c: 207: }
  2372                           ;CheckTouchKey.c: 209: KeyResSum[cnt] += (unsigned int)((KEYDATAH<<8) | KEYDATAL);
  2373  0209  1003               	clrc
  2374  020A  0D76               	rlf	GetTouchKeyValue@cnt,w
  2375  020B  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2376  020C  0084               	movwf	4
  2377  020D  0814               	movf	20,w	;volatile
  2378  020E  1383               	bcf	3,7	;select IRP bank0
  2379  020F  0780               	addwf	0,f
  2380  0210  0F84               	incfsz	4,f
  2381  0211  0800               	movf	0,w
  2382  0212  1803               	skipnc
  2383  0213  0A00               	incf	0,w
  2384  0214  00FF               	movwf	127
  2385  0215  0815               	movf	21,w	;volatile
  2386  0216  077F               	addwf	127,w
  2387  0217  0080               	movwf	0
  2388  0218  3002               	movlw	2
  2389  0219  0384               	decf	4,f
  2390  021A  0AF6               	incf	GetTouchKeyValue@cnt,f
  2391  021B  0276               	subwf	GetTouchKeyValue@cnt,w
  2392  021C  1803               	btfsc	3,0
  2393  021D  0008               	return
  2394  021E  29F2               	goto	l1097
  2395  021F                     __end_of_GetTouchKeyValue:	
  2396                           
  2397                           	psect	text23
  2398  0349                     __ptext23:	
  2399 ;; *************** function _ClearResSum *****************
  2400 ;; Defined at:
  2401 ;;		line 126 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;		None
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;  cnt             1    2[COMMON] unsigned char 
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  1    wreg      void 
  2408 ;; Registers used:
  2409 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2410 ;; Tracked objects:
  2411 ;;		On entry : 300/0
  2412 ;;		On exit  : B00/0
  2413 ;;		Unchanged: 300/0
  2414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2415 ;;      Params:         0       0       0       0
  2416 ;;      Locals:         1       0       0       0
  2417 ;;      Temps:          0       0       0       0
  2418 ;;      Totals:         1       0       0       0
  2419 ;;Total ram usage:        1 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:    1
  2422 ;; This function calls:
  2423 ;;		Nothing
  2424 ;; This function is called by:
  2425 ;;		_GetTouchKeyValue
  2426 ;;		_CheckTouchKey
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           
  2431                           ;psect for function _ClearResSum
  2432  0349                     _ClearResSum:	
  2433  0349                     l2166:	
  2434                           ;incstack = 0
  2435                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  2436                           
  2437                           
  2438                           ;CheckTouchKey.c: 128: unsigned char cnt = 0;
  2439  0349  01F4               	clrf	ClearResSum@cnt
  2440  034A                     l2168:	
  2441                           
  2442                           ;CheckTouchKey.c: 130: {
  2443                           ;CheckTouchKey.c: 131: KeyResSum[cnt] = 0;
  2444  034A  1003               	clrc
  2445  034B  0D74               	rlf	ClearResSum@cnt,w
  2446  034C  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2447  034D  0084               	movwf	4
  2448  034E  3002               	movlw	2
  2449  034F  1383               	bcf	3,7	;select IRP bank0
  2450  0350  0180               	clrf	0
  2451  0351  0A84               	incf	4,f
  2452  0352  0180               	clrf	0
  2453  0353  0AF4               	incf	ClearResSum@cnt,f
  2454  0354  0274               	subwf	ClearResSum@cnt,w
  2455  0355  1803               	btfsc	3,0
  2456  0356  0008               	return
  2457  0357  2B4A               	goto	l2168
  2458  0358                     __end_of_ClearResSum:	
  2459                           
  2460                           	psect	text24
  2461  0314                     __ptext24:	
  2462 ;; *************** function _CheckValidTime *****************
  2463 ;; Defined at:
  2464 ;;		line 467 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;		None
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;		None
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  1    wreg      void 
  2471 ;; Registers used:
  2472 ;;		wreg, status,2, status,0
  2473 ;; Tracked objects:
  2474 ;;		On entry : 300/0
  2475 ;;		On exit  : 300/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2478 ;;      Params:         0       0       0       0
  2479 ;;      Locals:         0       0       0       0
  2480 ;;      Temps:          0       0       0       0
  2481 ;;      Totals:         0       0       0       0
  2482 ;;Total ram usage:        0 bytes
  2483 ;; Hardware stack levels used:    1
  2484 ;; Hardware stack levels required when called:    1
  2485 ;; This function calls:
  2486 ;;		Nothing
  2487 ;; This function is called by:
  2488 ;;		_CheckTouchKey
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492                           
  2493                           ;psect for function _CheckValidTime
  2494  0314                     _CheckValidTime:	
  2495  0314                     l2410:	
  2496                           ;incstack = 0
  2497                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  2498                           
  2499                           
  2500                           ;CheckTouchKey.c: 472: {
  2501                           ;CheckTouchKey.c: 473: if(KeyFlag[0] | KeyFlag[1])
  2502  0314  083F               	movf	_KeyFlag+1,w	;volatile
  2503  0315  043E               	iorwf	_KeyFlag,w	;volatile
  2504  0316  1903               	btfsc	3,2
  2505  0317  2B23               	goto	l2416
  2506  0318  0AB4               	incf	CheckValidTime@validtime,f
  2507  0319  1903               	skipnz
  2508  031A  0AB5               	incf	CheckValidTime@validtime+1,f
  2509  031B  303A               	movlw	58
  2510  031C  0235               	subwf	CheckValidTime@validtime+1,w
  2511  031D  3098               	movlw	152
  2512  031E  1903               	skipnz
  2513  031F  0234               	subwf	CheckValidTime@validtime,w
  2514  0320  1C03               	skipc
  2515  0321  0008               	return
  2516                           
  2517                           ;CheckTouchKey.c: 476: {
  2518                           ;CheckTouchKey.c: 477: b_kerr = 1;
  2519  0322  1470               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  2520  0323                     l2416:	
  2521                           
  2522                           ;CheckTouchKey.c: 478: validtime = 0;
  2523  0323  01B4               	clrf	CheckValidTime@validtime
  2524  0324  01B5               	clrf	CheckValidTime@validtime+1
  2525  0325  0008               	return
  2526  0326                     __end_of_CheckValidTime:	
  2527                           
  2528                           	psect	text25
  2529  0018                     __ptext25:	
  2530 ;; *************** function _CheckOnceResult *****************
  2531 ;; Defined at:
  2532 ;;		line 221 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;		None
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;  KeyResTemp      2   10[BANK0 ] unsigned int 
  2537 ;;  KeyValue        2    7[BANK0 ] unsigned int 
  2538 ;;  OldValue        2    4[BANK0 ] unsigned int 
  2539 ;;  cnt             1   12[BANK0 ] unsigned char 
  2540 ;;  KeyDown         1    9[BANK0 ] unsigned char 
  2541 ;;  flag            1    6[BANK0 ] unsigned char 
  2542 ;; Return value:  Size  Location     Type
  2543 ;;                  1    wreg      void 
  2544 ;; Registers used:
  2545 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2546 ;; Tracked objects:
  2547 ;;		On entry : 300/0
  2548 ;;		On exit  : B00/0
  2549 ;;		Unchanged: 0/0
  2550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2551 ;;      Params:         0       0       0       0
  2552 ;;      Locals:         0       9       0       0
  2553 ;;      Temps:          0       4       0       0
  2554 ;;      Totals:         0      13       0       0
  2555 ;;Total ram usage:       13 bytes
  2556 ;; Hardware stack levels used:    1
  2557 ;; Hardware stack levels required when called:    3
  2558 ;; This function calls:
  2559 ;;		_KeyClearOne
  2560 ;;		_KeyHave
  2561 ;;		_KeyIsIn
  2562 ;; This function is called by:
  2563 ;;		_CheckTouchKey
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           
  2568                           ;psect for function _CheckOnceResult
  2569  0018                     _CheckOnceResult:	
  2570                           
  2571                           ;CheckTouchKey.c: 223: unsigned char cnt = 0;
  2572                           
  2573                           ;incstack = 0
  2574                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2575  0018  01D3               	clrf	CheckOnceResult@cnt
  2576                           
  2577                           ;CheckTouchKey.c: 224: unsigned char KeyDown;
  2578                           ;CheckTouchKey.c: 225: unsigned char flag;
  2579                           ;CheckTouchKey.c: 227: unsigned int KeyResTemp;
  2580                           ;CheckTouchKey.c: 228: unsigned int KeyValue;
  2581                           ;CheckTouchKey.c: 229: unsigned int OldValue;
  2582                           ;CheckTouchKey.c: 231: KeyData[0] = 0;
  2583  0019  01B6               	clrf	_KeyData	;volatile
  2584                           
  2585                           ;CheckTouchKey.c: 232: KeyData[1] = 0;
  2586  001A  01B7               	clrf	_KeyData+1	;volatile
  2587                           
  2588                           ;CheckTouchKey.c: 233: KeyMaxSub = 0;
  2589  001B  01C3               	clrf	_KeyMaxSub
  2590  001C                     l2612:	
  2591                           
  2592                           ;CheckTouchKey.c: 237: {
  2593                           ;CheckTouchKey.c: 238: flag = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  2594  001C  0853               	movf	CheckOnceResult@cnt,w
  2595  001D  3907               	andlw	7
  2596  001E  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  2597  001F  0084               	movwf	4
  2598  0020  2300               	fcall	stringdir
  2599  0021  00CD               	movwf	CheckOnceResult@flag
  2600                           
  2601                           ;CheckTouchKey.c: 240: KeyResSum[cnt] >>= 3;
  2602  0022  1003               	clrc
  2603  0023  0D53               	rlf	CheckOnceResult@cnt,w
  2604  0024  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2605  0025  0084               	movwf	4
  2606  0026  3003               	movlw	3
  2607  0027                     u1215:	
  2608  0027  0A84               	incf	4,f
  2609  0028  1003               	clrc
  2610  0029  1383               	bcf	3,7	;select IRP bank0
  2611  002A  0C80               	rrf	0,f
  2612  002B  0384               	decf	4,f
  2613  002C  0C80               	rrf	0,f
  2614  002D  3EFF               	addlw	-1
  2615  002E  1D03               	skipz
  2616  002F  2827               	goto	u1215
  2617                           
  2618                           ;CheckTouchKey.c: 241: KeyResTemp = KeyResSum[cnt];
  2619  0030  1003               	clrc
  2620  0031  0D53               	rlf	CheckOnceResult@cnt,w
  2621  0032  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  2622  0033  0084               	movwf	4
  2623  0034  0800               	movf	0,w
  2624  0035  00D1               	movwf	CheckOnceResult@KeyResTemp
  2625  0036  0A84               	incf	4,f
  2626  0037  0800               	movf	0,w
  2627  0038  00D2               	movwf	CheckOnceResult@KeyResTemp+1
  2628                           
  2629                           ;CheckTouchKey.c: 242: KeyDown = Table_KeyDown[cnt];
  2630  0039  0853               	movf	CheckOnceResult@cnt,w
  2631  003A  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  2632  003B  0084               	movwf	4
  2633  003C  2300               	fcall	stringdir
  2634  003D  00D0               	movwf	CheckOnceResult@KeyDown
  2635                           
  2636                           ;CheckTouchKey.c: 244: KeyValue = KeyResTemp + KeyDown;
  2637  003E  00CE               	movwf	CheckOnceResult@KeyValue
  2638  003F  01CF               	clrf	CheckOnceResult@KeyValue+1
  2639  0040  0851               	movf	CheckOnceResult@KeyResTemp,w
  2640  0041  07CE               	addwf	CheckOnceResult@KeyValue,f
  2641  0042  1803               	skipnc
  2642  0043  0ACF               	incf	CheckOnceResult@KeyValue+1,f
  2643  0044  0852               	movf	CheckOnceResult@KeyResTemp+1,w
  2644  0045  07CF               	addwf	CheckOnceResult@KeyValue+1,f
  2645                           
  2646                           ;CheckTouchKey.c: 246: if(!KeyIsIn(cnt))
  2647  0046  0853               	movf	CheckOnceResult@cnt,w
  2648  0047  2326               	fcall	_KeyIsIn
  2649  0048  3A00               	xorlw	0
  2650                           
  2651                           ;CheckTouchKey.c: 247: {
  2652                           ;CheckTouchKey.c: 249: OldValue = KeyOldValue2[cnt];
  2653  0049  1003               	clrc
  2654  004A  1D03               	skipz
  2655  004B  28A3               	goto	L4
  2656  004C  0D53               	rlf	CheckOnceResult@cnt,w
  2657  004D  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2658  004E  0084               	movwf	4
  2659  004F  1383               	bcf	3,7	;select IRP bank0
  2660  0050  0800               	movf	0,w
  2661  0051  00CB               	movwf	CheckOnceResult@OldValue
  2662  0052  0A84               	incf	4,f
  2663  0053  0800               	movf	0,w
  2664  0054  00CC               	movwf	CheckOnceResult@OldValue+1
  2665                           
  2666                           ;CheckTouchKey.c: 251: if(KeyReference[cnt] > KeyValue)
  2667  0055  1003               	clrc
  2668  0056  0D53               	rlf	CheckOnceResult@cnt,w
  2669  0057  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2670  0058  20FD               	fcall	PL6	;call to abstracted procedure
  2671  0059  024F               	subwf	CheckOnceResult@KeyValue+1,w
  2672  005A  1D03               	skipz
  2673  005B  285E               	goto	u1235
  2674  005C  0847               	movf	??_CheckOnceResult,w
  2675  005D  024E               	subwf	CheckOnceResult@KeyValue,w
  2676  005E                     u1235:	
  2677  005E  1803               	skipnc
  2678  005F  286C               	goto	l2630
  2679                           
  2680                           ;CheckTouchKey.c: 252: {
  2681                           ;CheckTouchKey.c: 253: KeyResTemp = KeyReference[cnt] - KeyResTemp;
  2682  0060  1003               	clrc
  2683  0061  0D53               	rlf	CheckOnceResult@cnt,w
  2684  0062  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2685  0063  20FD               	fcall	PL6	;call to abstracted procedure
  2686  0064  0851               	movf	CheckOnceResult@KeyResTemp,w
  2687  0065  0247               	subwf	??_CheckOnceResult,w
  2688  0066  00D1               	movwf	CheckOnceResult@KeyResTemp
  2689  0067  0852               	movf	CheckOnceResult@KeyResTemp+1,w
  2690  0068  1C03               	skipc
  2691  0069  0A52               	incf	CheckOnceResult@KeyResTemp+1,w
  2692  006A  0248               	subwf	??_CheckOnceResult+1,w
  2693  006B  288F               	goto	L2
  2694  006C                     l2630:	
  2695                           ;CheckTouchKey.c: 254: }
  2696                           
  2697                           
  2698                           ;CheckTouchKey.c: 255: else if ((OldValue > KeyValue) && (KeyOldValue1[cnt] > KeyValue))
  2699  006C  084C               	movf	CheckOnceResult@OldValue+1,w
  2700  006D  024F               	subwf	CheckOnceResult@KeyValue+1,w
  2701  006E  1D03               	skipz
  2702  006F  2872               	goto	u1245
  2703  0070  084B               	movf	CheckOnceResult@OldValue,w
  2704  0071  024E               	subwf	CheckOnceResult@KeyValue,w
  2705  0072                     u1245:	
  2706  0072  1803               	skipnc
  2707  0073  28E3               	goto	l2676
  2708  0074  1003               	clrc
  2709  0075  0D53               	rlf	CheckOnceResult@cnt,w
  2710  0076  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2711  0077  20FD               	fcall	PL6	;call to abstracted procedure
  2712  0078  024F               	subwf	CheckOnceResult@KeyValue+1,w
  2713  0079  1D03               	skipz
  2714  007A  287D               	goto	u1255
  2715  007B  0847               	movf	??_CheckOnceResult,w
  2716  007C  024E               	subwf	CheckOnceResult@KeyValue,w
  2717  007D                     u1255:	
  2718  007D  1803               	skipnc
  2719  007E  28E3               	goto	l2676
  2720                           
  2721                           ;CheckTouchKey.c: 256: {
  2722                           ;CheckTouchKey.c: 257: KeyReference[cnt] = OldValue;
  2723  007F  1003               	clrc
  2724  0080  0D53               	rlf	CheckOnceResult@cnt,w
  2725  0081  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2726  0082  0084               	movwf	4
  2727  0083  084B               	movf	CheckOnceResult@OldValue,w
  2728  0084  0080               	movwf	0
  2729  0085  0A84               	incf	4,f
  2730  0086  084C               	movf	CheckOnceResult@OldValue+1,w
  2731  0087  0080               	movwf	0
  2732                           
  2733                           ;CheckTouchKey.c: 258: KeyResTemp = OldValue - KeyResTemp;
  2734  0088  0851               	movf	CheckOnceResult@KeyResTemp,w
  2735  0089  024B               	subwf	CheckOnceResult@OldValue,w
  2736  008A  00D1               	movwf	CheckOnceResult@KeyResTemp
  2737  008B  0852               	movf	CheckOnceResult@KeyResTemp+1,w
  2738  008C  1C03               	skipc
  2739  008D  0A52               	incf	CheckOnceResult@KeyResTemp+1,w
  2740  008E  024C               	subwf	CheckOnceResult@OldValue+1,w
  2741  008F                     L2:	
  2742  008F  00D2               	movwf	CheckOnceResult@KeyResTemp+1
  2743                           
  2744                           ;CheckTouchKey.c: 263: }
  2745                           ;CheckTouchKey.c: 265: KeyUpShake[cnt] = 0;
  2746                           
  2747                           ;CheckTouchKey.c: 259: }
  2748  0090  0853               	movf	CheckOnceResult@cnt,w
  2749  0091  3E3C               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2750  0092  0084               	movwf	4
  2751  0093  0180               	clrf	0
  2752                           
  2753                           ;CheckTouchKey.c: 268: {
  2754                           ;CheckTouchKey.c: 269: if(KeyResTemp >> 8)
  2755  0094  0852               	movf	CheckOnceResult@KeyResTemp+1,w
  2756  0095  1903               	btfsc	3,2
  2757  0096  2899               	goto	l2644
  2758                           
  2759                           ;CheckTouchKey.c: 270: {
  2760                           ;CheckTouchKey.c: 271: KeyDown = 0xFF;
  2761  0097  30FF               	movlw	255
  2762  0098  289A               	goto	L3
  2763  0099                     l2644:	
  2764                           ;CheckTouchKey.c: 272: }
  2765                           
  2766                           
  2767                           ;CheckTouchKey.c: 273: else
  2768                           ;CheckTouchKey.c: 274: {
  2769                           ;CheckTouchKey.c: 275: KeyDown = KeyResTemp & 0xFF;
  2770  0099  0851               	movf	CheckOnceResult@KeyResTemp,w
  2771  009A                     L3:	
  2772  009A  00D0               	movwf	CheckOnceResult@KeyDown
  2773                           
  2774                           ;CheckTouchKey.c: 276: }
  2775                           ;CheckTouchKey.c: 278: if(KeyMaxSub < KeyDown)
  2776  009B  0243               	subwf	_KeyMaxSub,w
  2777  009C  1803               	skipnc
  2778  009D  28A1               	goto	l2650
  2779                           
  2780                           ;CheckTouchKey.c: 279: {
  2781                           ;CheckTouchKey.c: 280: KeyMaxSub = KeyDown;
  2782  009E  0850               	movf	CheckOnceResult@KeyDown,w
  2783  009F  00C3               	movwf	_KeyMaxSub
  2784  00A0  28DE               	goto	l2674
  2785  00A1                     l2650:	
  2786                           ;CheckTouchKey.c: 282: }
  2787                           
  2788                           ;CheckTouchKey.c: 281: KeyHave(cnt,flag);
  2789                           
  2790                           
  2791                           ;CheckTouchKey.c: 283: else
  2792                           ;CheckTouchKey.c: 284: {
  2793                           ;CheckTouchKey.c: 285: KeyCounter++;
  2794  00A1  0AC4               	incf	_KeyCounter,f
  2795  00A2  28E3               	goto	l2676
  2796  00A3                     L4:	
  2797                           ;CheckTouchKey.c: 294: else
  2798                           ;CheckTouchKey.c: 295: {
  2799                           ;CheckTouchKey.c: 298: if(KeyReference[cnt]+1 < KeyValue)
  2800                           
  2801  00A3  0D53               	rlf	CheckOnceResult@cnt,w
  2802  00A4  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  2803  00A5  0084               	movwf	4
  2804  00A6  1383               	bcf	3,7	;select IRP bank0
  2805  00A7  0800               	movf	0,w
  2806  00A8  00C7               	movwf	??_CheckOnceResult
  2807  00A9  0A84               	incf	4,f
  2808  00AA  0800               	movf	0,w
  2809  00AB  00C8               	movwf	??_CheckOnceResult+1
  2810  00AC  0847               	movf	??_CheckOnceResult,w
  2811  00AD  3E01               	addlw	1
  2812  00AE  00C9               	movwf	??_CheckOnceResult+2
  2813  00AF  0848               	movf	??_CheckOnceResult+1,w
  2814  00B0  1803               	skipnc
  2815  00B1  3E01               	addlw	1
  2816  00B2  00CA               	movwf	??_CheckOnceResult+3
  2817  00B3  084F               	movf	CheckOnceResult@KeyValue+1,w
  2818  00B4  024A               	subwf	??_CheckOnceResult+3,w
  2819  00B5  1D03               	skipz
  2820  00B6  28B9               	goto	u1285
  2821  00B7  084E               	movf	CheckOnceResult@KeyValue,w
  2822  00B8  0249               	subwf	??_CheckOnceResult+2,w
  2823  00B9                     u1285:	
  2824  00B9  1C03               	btfss	3,0
  2825  00BA  28E3               	goto	l2676
  2826                           
  2827                           ;CheckTouchKey.c: 302: else if((KeyOldValue2[cnt]+KeyDown<KeyResTemp) || (KeyOldValue1[c
      +                          nt]+KeyDown<KeyResTemp))
  2828  00BB  1003               	clrc
  2829  00BC  0D53               	rlf	CheckOnceResult@cnt,w
  2830  00BD  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2831  00BE  0084               	movwf	4
  2832  00BF  0800               	movf	0,w
  2833  00C0  20EB               	fcall	PL4	;call to abstracted procedure
  2834  00C1  1C03               	skipc
  2835  00C2  28CB               	goto	l2664
  2836  00C3  1003               	clrc
  2837  00C4  0D53               	rlf	CheckOnceResult@cnt,w
  2838  00C5  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2839  00C6  0084               	movwf	4
  2840  00C7  0800               	movf	0,w
  2841  00C8  20EB               	fcall	PL4	;call to abstracted procedure
  2842  00C9  1803               	skipnc
  2843  00CA  28D6               	goto	l2668
  2844  00CB                     l2664:	
  2845                           
  2846                           ;CheckTouchKey.c: 303: {
  2847                           ;CheckTouchKey.c: 304: if(++KeyUpShake[cnt] > 8)
  2848  00CB  0853               	movf	CheckOnceResult@cnt,w
  2849  00CC  3E3C               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2850  00CD  0084               	movwf	4
  2851  00CE  3009               	movlw	9
  2852  00CF  0A80               	incf	0,f
  2853  00D0  0200               	subwf	0,w
  2854  00D1  1C03               	skipc
  2855  00D2  28DA               	goto	l2672
  2856                           
  2857                           ;CheckTouchKey.c: 305: {
  2858                           ;CheckTouchKey.c: 306: KeyClearOne(cnt);
  2859  00D3  0853               	movf	CheckOnceResult@cnt,w
  2860  00D4  22A2               	fcall	_KeyClearOne
  2861                           
  2862                           ;CheckTouchKey.c: 307: continue;
  2863  00D5  28E3               	goto	l2676
  2864  00D6                     l2668:	
  2865                           
  2866                           ;CheckTouchKey.c: 310: else
  2867                           ;CheckTouchKey.c: 311: {
  2868                           ;CheckTouchKey.c: 312: KeyUpShake[cnt] = 0;
  2869  00D6  0853               	movf	CheckOnceResult@cnt,w
  2870  00D7  3E3C               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2871  00D8  0084               	movwf	4
  2872  00D9  0180               	clrf	0
  2873  00DA                     l2672:	
  2874                           
  2875                           ;CheckTouchKey.c: 319: else if(!(KeyData[0] | KeyData[1]))
  2876  00DA  0837               	movf	_KeyData+1,w	;volatile
  2877  00DB  0436               	iorwf	_KeyData,w	;volatile
  2878  00DC  1D03               	btfss	3,2
  2879  00DD  28E3               	goto	l2676
  2880  00DE                     l2674:	
  2881                           
  2882                           ;CheckTouchKey.c: 320: {
  2883                           ;CheckTouchKey.c: 321: KeyHave(cnt,flag);
  2884  00DE  084D               	movf	CheckOnceResult@flag,w
  2885  00DF  00F4               	movwf	KeyHave@flag
  2886  00E0  01F5               	clrf	KeyHave@flag+1
  2887  00E1  0853               	movf	CheckOnceResult@cnt,w
  2888  00E2  2374               	fcall	_KeyHave
  2889  00E3                     l2676:	
  2890  00E3  3002               	movlw	2
  2891  00E4  1283               	bcf	3,5	;RP0=0, select bank0
  2892  00E5  1303               	bcf	3,6	;RP1=0, select bank0
  2893  00E6  0AD3               	incf	CheckOnceResult@cnt,f
  2894  00E7  0253               	subwf	CheckOnceResult@cnt,w
  2895  00E8  1803               	btfsc	3,0
  2896  00E9  0008               	return
  2897  00EA  281C               	goto	l2612
  2898  00EB                     __end_of_CheckOnceResult:	
  2899  00EB                     PL4:	
  2900  00EB  00C7               	movwf	??_CheckOnceResult
  2901  00EC  0A84               	incf	4,f
  2902  00ED  0800               	movf	0,w
  2903  00EE  00C8               	movwf	??_CheckOnceResult+1
  2904  00EF  0850               	movf	CheckOnceResult@KeyDown,w
  2905  00F0  0747               	addwf	??_CheckOnceResult,w
  2906  00F1  00C9               	movwf	??_CheckOnceResult+2
  2907  00F2  0848               	movf	??_CheckOnceResult+1,w
  2908  00F3  1803               	skipnc
  2909  00F4  0A48               	incf	??_CheckOnceResult+1,w
  2910  00F5  00CA               	movwf	??_CheckOnceResult+3
  2911  00F6  0852               	movf	CheckOnceResult@KeyResTemp+1,w
  2912  00F7  024A               	subwf	??_CheckOnceResult+3,w
  2913  00F8  1D03               	skipz
  2914  00F9  0008               	return
  2915  00FA  0851               	movf	CheckOnceResult@KeyResTemp,w
  2916  00FB  0249               	subwf	??_CheckOnceResult+2,w
  2917  00FC  0008               	return
  2918  00FD                     __end_ofPL4:	
  2919  00FD                     PL6:	
  2920  00FD  0084               	movwf	4
  2921  00FE  0800               	movf	0,w
  2922  00FF  00C7               	movwf	??_CheckOnceResult
  2923  0100  0A84               	incf	4,f
  2924  0101  0800               	movf	0,w
  2925  0102  00C8               	movwf	??_CheckOnceResult+1
  2926  0103  0008               	return
  2927  0104                     __end_ofPL6:	
  2928                           
  2929                           	psect	text26
  2930  0374                     __ptext26:	
  2931 ;; *************** function _KeyHave *****************
  2932 ;; Defined at:
  2933 ;;		line 142 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  cnt             1    wreg     unsigned char 
  2936 ;;  flag            2    2[COMMON] unsigned int 
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;  cnt             1    4[COMMON] unsigned char 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  1    wreg      void 
  2941 ;; Registers used:
  2942 ;;		wreg, status,2, status,0
  2943 ;; Tracked objects:
  2944 ;;		On entry : B00/0
  2945 ;;		On exit  : B00/0
  2946 ;;		Unchanged: 800/0
  2947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2948 ;;      Params:         2       0       0       0
  2949 ;;      Locals:         1       0       0       0
  2950 ;;      Temps:          0       0       0       0
  2951 ;;      Totals:         3       0       0       0
  2952 ;;Total ram usage:        3 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    1
  2955 ;; This function calls:
  2956 ;;		Nothing
  2957 ;; This function is called by:
  2958 ;;		_CheckOnceResult
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           
  2963                           ;psect for function _KeyHave
  2964  0374                     _KeyHave:	
  2965                           
  2966                           ;incstack = 0
  2967                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  2968                           ;KeyHave@cnt stored from wreg
  2969  0374  00F6               	movwf	KeyHave@cnt
  2970                           
  2971                           ;CheckTouchKey.c: 144: KeyCounter++;
  2972  0375  0AC4               	incf	_KeyCounter,f
  2973                           
  2974                           ;CheckTouchKey.c: 147: {
  2975                           ;CheckTouchKey.c: 148: KeyData[0] = 0;
  2976  0376  01B6               	clrf	_KeyData	;volatile
  2977                           
  2978                           ;CheckTouchKey.c: 149: KeyData[1] = 0;
  2979  0377  01B7               	clrf	_KeyData+1	;volatile
  2980                           
  2981                           ;CheckTouchKey.c: 150: if(cnt&0x8)
  2982  0378  1DF6               	btfss	KeyHave@cnt,3
  2983  0379  2B7D               	goto	l2182
  2984                           
  2985                           ;CheckTouchKey.c: 151: {
  2986                           ;CheckTouchKey.c: 152: KeyData[1] = flag;
  2987  037A  0874               	movf	KeyHave@flag,w
  2988  037B  00B7               	movwf	_KeyData+1	;volatile
  2989                           
  2990                           ;CheckTouchKey.c: 153: }
  2991  037C  0008               	return
  2992  037D                     l2182:	
  2993                           
  2994                           ;CheckTouchKey.c: 154: else
  2995                           ;CheckTouchKey.c: 155: {
  2996                           ;CheckTouchKey.c: 156: KeyData[0] = flag;
  2997  037D  0874               	movf	KeyHave@flag,w
  2998  037E  00B6               	movwf	_KeyData	;volatile
  2999  037F  0008               	return
  3000  0380                     __end_of_KeyHave:	
  3001                           
  3002                           	psect	text27
  3003  02A2                     __ptext27:	
  3004 ;; *************** function _KeyClearOne *****************
  3005 ;; Defined at:
  3006 ;;		line 80 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  cnt             1    wreg     unsigned char 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  cnt             1    2[COMMON] unsigned char 
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  1    wreg      void 
  3013 ;; Registers used:
  3014 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 800/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3020 ;;      Params:         0       0       0       0
  3021 ;;      Locals:         1       0       0       0
  3022 ;;      Temps:          0       0       0       0
  3023 ;;      Totals:         1       0       0       0
  3024 ;;Total ram usage:        1 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    1
  3027 ;; This function calls:
  3028 ;;		Nothing
  3029 ;; This function is called by:
  3030 ;;		_KeyClearIn
  3031 ;;		_KeyStopClear
  3032 ;;		_CheckOnceResult
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           
  3037                           ;psect for function _KeyClearOne
  3038  02A2                     _KeyClearOne:	
  3039                           
  3040                           ;incstack = 0
  3041                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  3042                           ;KeyClearOne@cnt stored from wreg
  3043  02A2  00F4               	movwf	KeyClearOne@cnt
  3044                           
  3045                           ;CheckTouchKey.c: 82: KeyOldValue0[cnt] = 0;
  3046  02A3  1003               	clrc
  3047  02A4  0D74               	rlf	KeyClearOne@cnt,w
  3048  02A5  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3049  02A6  0084               	movwf	4
  3050  02A7  1383               	bcf	3,7	;select IRP bank0
  3051                           
  3052                           ;CheckTouchKey.c: 83: KeyOldValue1[cnt] = 0;
  3053  02A8  22B5               	fcall	PL14	;call to abstracted procedure
  3054  02A9  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3055  02AA  0084               	movwf	4
  3056                           
  3057                           ;CheckTouchKey.c: 84: KeyOldValue2[cnt] = 0;
  3058  02AB  22B5               	fcall	PL14	;call to abstracted procedure
  3059  02AC  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3060  02AD  0084               	movwf	4
  3061                           
  3062                           ;CheckTouchKey.c: 85: KeyReference[cnt] = 0;
  3063  02AE  22B5               	fcall	PL14	;call to abstracted procedure
  3064  02AF  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  3065  02B0  0084               	movwf	4
  3066  02B1  0180               	clrf	0
  3067  02B2  0A84               	incf	4,f
  3068  02B3  0180               	clrf	0
  3069  02B4  0008               	return
  3070  02B5                     __end_of_KeyClearOne:	
  3071  02B5                     PL14:	
  3072  02B5  0180               	clrf	0
  3073  02B6  0A84               	incf	4,f
  3074  02B7  0180               	clrf	0
  3075  02B8  1003               	clrc
  3076  02B9  0D74               	rlf	KeyClearOne@cnt,w
  3077  02BA  0008               	return
  3078  02BB                     __end_ofPL14:	
  3079                           
  3080                           	psect	text28
  3081  0104                     __ptext28:	
  3082 ;; *************** function _CheckKeyOldValue *****************
  3083 ;; Defined at:
  3084 ;;		line 335 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;		None
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;  KeyOldTemp      2    2[BANK0 ] unsigned int 
  3089 ;;  KeyResTemp      2    0[BANK0 ] unsigned int 
  3090 ;;  cnt             1    4[BANK0 ] unsigned char 
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      void 
  3093 ;; Registers used:
  3094 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3095 ;; Tracked objects:
  3096 ;;		On entry : 300/0
  3097 ;;		On exit  : 300/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3100 ;;      Params:         0       0       0       0
  3101 ;;      Locals:         0       5       0       0
  3102 ;;      Temps:          2       0       0       0
  3103 ;;      Totals:         2       5       0       0
  3104 ;;Total ram usage:        7 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; Hardware stack levels required when called:    3
  3107 ;; This function calls:
  3108 ;;		_KeyIsIn
  3109 ;; This function is called by:
  3110 ;;		_CheckTouchKey
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           
  3115                           ;psect for function _CheckKeyOldValue
  3116  0104                     _CheckKeyOldValue:	
  3117  0104  3004               	movlw	4
  3118                           
  3119                           ;CheckTouchKey.c: 337: static unsigned char counter = 0;
  3120                           ;CheckTouchKey.c: 338: unsigned char cnt = 0;
  3121                           
  3122                           ;incstack = 0
  3123                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3124  0105  01CB               	clrf	CheckKeyOldValue@cnt
  3125                           
  3126                           ;CheckTouchKey.c: 339: unsigned int KeyResTemp;
  3127                           ;CheckTouchKey.c: 340: unsigned int KeyOldTemp;
  3128                           ;CheckTouchKey.c: 342: if(++counter < 4)
  3129  0106  0AC2               	incf	CheckKeyOldValue@counter,f
  3130  0107  0242               	subwf	CheckKeyOldValue@counter,w
  3131  0108  1C03               	btfss	3,0
  3132  0109  0008               	return
  3133                           
  3134                           ;CheckTouchKey.c: 344: counter = 0;
  3135  010A  01C2               	clrf	CheckKeyOldValue@counter
  3136  010B                     l2344:	
  3137                           
  3138                           ;CheckTouchKey.c: 347: {
  3139                           ;CheckTouchKey.c: 348: KeyResTemp = KeyResSum[cnt];
  3140  010B  1003               	clrc
  3141  010C  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3142  010D  3E30               	addlw	(low (_KeyResSum| 0))& (0+255)
  3143  010E  0084               	movwf	4
  3144  010F  1383               	bcf	3,7	;select IRP bank0
  3145  0110  0800               	movf	0,w
  3146  0111  00C7               	movwf	CheckKeyOldValue@KeyResTemp
  3147  0112  0A84               	incf	4,f
  3148  0113  0800               	movf	0,w
  3149  0114  00C8               	movwf	CheckKeyOldValue@KeyResTemp+1
  3150                           
  3151                           ;CheckTouchKey.c: 349: if(!KeyIsIn(cnt))
  3152  0115  084B               	movf	CheckKeyOldValue@cnt,w
  3153  0116  2326               	fcall	_KeyIsIn
  3154  0117  3A00               	xorlw	0
  3155                           
  3156                           ;CheckTouchKey.c: 350: {
  3157                           ;CheckTouchKey.c: 352: KeyOldTemp = KeyOldValue0[cnt] - KeyResTemp;
  3158  0118  1003               	clrc
  3159  0119  1D03               	skipz
  3160  011A  294B               	goto	L8
  3161  011B  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3162  011C  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3163  011D  0084               	movwf	4
  3164  011E  1383               	bcf	3,7	;select IRP bank0
  3165                           
  3166                           ;CheckTouchKey.c: 353: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3167  011F  215C               	fcall	PL2	;call to abstracted procedure
  3168  0120  1903               	skipnz
  3169  0121  0249               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3170  0122  1C03               	skipc
  3171  0123  292A               	goto	L5
  3172  0124  0F49               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3173  0125  294A               	goto	l1139
  3174  0126  0A4A               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3175                           
  3176                           ;CheckTouchKey.c: 354: {
  3177                           ;CheckTouchKey.c: 355: KeyOldTemp = KeyOldValue1[cnt] - KeyResTemp;
  3178  0127  1003               	clrc
  3179  0128  1D03               	btfss	3,2
  3180  0129  294B               	goto	L8
  3181  012A                     L5:	
  3182  012A  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3183  012B  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3184  012C  0084               	movwf	4
  3185                           
  3186                           ;CheckTouchKey.c: 356: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3187  012D  215C               	fcall	PL2	;call to abstracted procedure
  3188  012E  1903               	skipnz
  3189  012F  0249               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3190  0130  1C03               	skipc
  3191  0131  2938               	goto	L6
  3192  0132  0F49               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3193  0133  294A               	goto	l1139
  3194  0134  0A4A               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3195                           
  3196                           ;CheckTouchKey.c: 357: {
  3197                           ;CheckTouchKey.c: 358: KeyOldTemp = KeyOldValue2[cnt] - KeyResTemp;
  3198  0135  1003               	clrc
  3199  0136  1D03               	btfss	3,2
  3200  0137  294B               	goto	L8
  3201  0138                     L6:	
  3202  0138  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3203  0139  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3204  013A  0084               	movwf	4
  3205                           
  3206                           ;CheckTouchKey.c: 359: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  3207  013B  215C               	fcall	PL2	;call to abstracted procedure
  3208  013C  1903               	skipnz
  3209  013D  0249               	subwf	CheckKeyOldValue@KeyOldTemp,w
  3210  013E  1C03               	skipc
  3211  013F  2946               	goto	L7
  3212  0140  0F49               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  3213  0141  294A               	goto	l1139
  3214  0142  0A4A               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  3215                           
  3216                           ;CheckTouchKey.c: 360: {
  3217                           ;CheckTouchKey.c: 361: KeyReference[cnt] = KeyResTemp;
  3218  0143  1003               	clrc
  3219  0144  1D03               	btfss	3,2
  3220  0145  294B               	goto	L8
  3221  0146                     L7:	
  3222  0146  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3223  0147  3E20               	addlw	(low (_KeyReference| 0))& (0+255)
  3224  0148  0084               	movwf	4
  3225  0149  217D               	fcall	PL16	;call to abstracted procedure
  3226  014A                     l1139:	
  3227                           
  3228                           ;CheckTouchKey.c: 362: }
  3229                           ;CheckTouchKey.c: 363: }
  3230                           ;CheckTouchKey.c: 364: }
  3231                           ;CheckTouchKey.c: 365: }
  3232                           ;CheckTouchKey.c: 368: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  3233  014A  1003               	clrc
  3234  014B                     L8:	
  3235  014B  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3236  014C  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3237  014D  0084               	movwf	4
  3238  014E  1383               	bcf	3,7	;select IRP bank0
  3239  014F  2175               	fcall	PL10	;call to abstracted procedure
  3240  0150  3E24               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3241                           
  3242                           ;CheckTouchKey.c: 369: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  3243  0151  216A               	fcall	PL8	;call to abstracted procedure
  3244  0152  2175               	fcall	PL10	;call to abstracted procedure
  3245  0153  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3246                           
  3247                           ;CheckTouchKey.c: 370: KeyOldValue0[cnt] = KeyResTemp;
  3248  0154  216A               	fcall	PL8	;call to abstracted procedure
  3249  0155  217D               	fcall	PL16	;call to abstracted procedure
  3250  0156  3002               	movlw	2
  3251  0157  0ACB               	incf	CheckKeyOldValue@cnt,f
  3252  0158  024B               	subwf	CheckKeyOldValue@cnt,w
  3253  0159  1803               	btfsc	3,0
  3254  015A  0008               	return
  3255  015B  290B               	goto	l2344
  3256  015C                     __end_of_CheckKeyOldValue:	
  3257  015C                     PL2:	
  3258  015C  0800               	movf	0,w
  3259  015D  00C9               	movwf	CheckKeyOldValue@KeyOldTemp
  3260  015E  0A84               	incf	4,f
  3261  015F  0800               	movf	0,w
  3262  0160  00CA               	movwf	CheckKeyOldValue@KeyOldTemp+1
  3263  0161  0847               	movf	CheckKeyOldValue@KeyResTemp,w
  3264  0162  02C9               	subwf	CheckKeyOldValue@KeyOldTemp,f
  3265  0163  0848               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3266  0164  1C03               	skipc
  3267  0165  03CA               	decf	CheckKeyOldValue@KeyOldTemp+1,f
  3268  0166  02CA               	subwf	CheckKeyOldValue@KeyOldTemp+1,f
  3269  0167  3000               	movlw	0
  3270  0168  024A               	subwf	CheckKeyOldValue@KeyOldTemp+1,w
  3271  0169  3402               	retlw	2
  3272  016A                     __end_ofPL2:	
  3273  016A                     PL8:	
  3274  016A  0084               	movwf	4
  3275  016B  0876               	movf	??_CheckKeyOldValue,w
  3276  016C  0080               	movwf	0
  3277  016D  0A84               	incf	4,f
  3278  016E  0877               	movf	??_CheckKeyOldValue+1,w
  3279  016F  0080               	movwf	0
  3280  0170  1003               	clrc
  3281  0171  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3282  0172  3E2C               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3283  0173  0084               	movwf	4
  3284  0174  0008               	return
  3285  0175                     __end_ofPL8:	
  3286  0175                     PL10:	
  3287  0175  0800               	movf	0,w
  3288  0176  00F6               	movwf	??_CheckKeyOldValue
  3289  0177  0A84               	incf	4,f
  3290  0178  0800               	movf	0,w
  3291  0179  00F7               	movwf	??_CheckKeyOldValue+1
  3292  017A  1003               	clrc
  3293  017B  0D4B               	rlf	CheckKeyOldValue@cnt,w
  3294  017C  0008               	return
  3295  017D                     __end_ofPL10:	
  3296  017D                     PL16:	
  3297  017D  0847               	movf	CheckKeyOldValue@KeyResTemp,w
  3298  017E  0080               	movwf	0
  3299  017F  0A84               	incf	4,f
  3300  0180  0848               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3301  0181  0080               	movwf	0
  3302  0182  0008               	return
  3303  0183                     __end_ofPL16:	
  3304                           
  3305                           	psect	text29
  3306  0326                     __ptext29:	
  3307 ;; *************** function _KeyIsIn *****************
  3308 ;; Defined at:
  3309 ;;		line 58 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Normal\XC8\SC251\CheckTouchKey.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;  cnt             1    wreg     unsigned char 
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;  cnt             1    3[COMMON] unsigned char 
  3314 ;;  i               1    2[COMMON] unsigned char 
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  1    wreg      unsigned char 
  3317 ;; Registers used:
  3318 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 300/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3324 ;;      Params:         0       0       0       0
  3325 ;;      Locals:         2       0       0       0
  3326 ;;      Temps:          0       0       0       0
  3327 ;;      Totals:         2       0       0       0
  3328 ;;Total ram usage:        2 bytes
  3329 ;; Hardware stack levels used:    2
  3330 ;; Hardware stack levels required when called:    1
  3331 ;; This function calls:
  3332 ;;		Nothing
  3333 ;; This function is called by:
  3334 ;;		_KeyClearIn
  3335 ;;		_CheckOnceResult
  3336 ;;		_CheckKeyOldValue
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           
  3341                           ;psect for function _KeyIsIn
  3342  0326                     _KeyIsIn:	
  3343                           
  3344                           ;incstack = 0
  3345                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  3346                           ;KeyIsIn@cnt stored from wreg
  3347  0326  00F5               	movwf	KeyIsIn@cnt
  3348                           
  3349                           ;CheckTouchKey.c: 60: unsigned char i = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  3350  0327  3907               	andlw	7
  3351  0328  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  3352  0329  0084               	movwf	4
  3353  032A  2300               	fcall	stringdir
  3354  032B  00F4               	movwf	KeyIsIn@i
  3355                           
  3356                           ;CheckTouchKey.c: 62: if(cnt&0x8)
  3357  032C  1DF5               	btfss	KeyIsIn@cnt,3
  3358  032D  2B32               	goto	l2110
  3359                           
  3360                           ;CheckTouchKey.c: 63: {
  3361                           ;CheckTouchKey.c: 64: i &= KeyFlag[1];
  3362  032E  1283               	bcf	3,5	;RP0=0, select bank0
  3363  032F  1303               	bcf	3,6	;RP1=0, select bank0
  3364  0330  083F               	movf	_KeyFlag+1,w	;volatile
  3365  0331  2B35               	goto	L9
  3366  0332                     l2110:	
  3367                           ;CheckTouchKey.c: 65: }
  3368                           
  3369                           
  3370                           ;CheckTouchKey.c: 66: else
  3371                           ;CheckTouchKey.c: 67: {
  3372                           ;CheckTouchKey.c: 68: i &= KeyFlag[0];
  3373  0332  1283               	bcf	3,5	;RP0=0, select bank0
  3374  0333  1303               	bcf	3,6	;RP1=0, select bank0
  3375  0334  083E               	movf	_KeyFlag,w	;volatile
  3376  0335                     L9:	
  3377  0335  05F4               	andwf	KeyIsIn@i,f
  3378                           
  3379                           ;CheckTouchKey.c: 69: }
  3380                           ;CheckTouchKey.c: 70: return i;
  3381  0336  0874               	movf	KeyIsIn@i,w
  3382  0337  0008               	return
  3383  0338                     __end_of_KeyIsIn:	
  3384                           
  3385                           	psect	text30
  3386  0245                     __ptext30:	
  3387 ;; *************** function _Isr_Timer *****************
  3388 ;; Defined at:
  3389 ;;		line 260 in file "C:\Users\hhmm6\Desktop\scm\keytest2\main.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;		None
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  1    wreg      void 
  3396 ;; Registers used:
  3397 ;;		wreg, status,2, status,0
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 300/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3403 ;;      Params:         0       0       0       0
  3404 ;;      Locals:         0       0       0       0
  3405 ;;      Temps:          2       0       0       0
  3406 ;;      Totals:         2       0       0       0
  3407 ;;Total ram usage:        2 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; This function calls:
  3410 ;;		Nothing
  3411 ;; This function is called by:
  3412 ;;		Interrupt level 1
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           
  3417                           ;psect for function _Isr_Timer
  3418  0245                     _Isr_Timer:	
  3419                           
  3420                           ;main.c: 262: if(TMR2IF)
  3421  0245  1283               	bcf	3,5	;RP0=0, select bank0
  3422  0246  1303               	bcf	3,6	;RP1=0, select bank0
  3423  0247  1C8C               	btfss	12,1	;volatile
  3424  0248  2A60               	goto	i1l2522
  3425                           
  3426                           ;main.c: 263: {
  3427                           ;main.c: 264: TMR2IF = 0;
  3428  0249  108C               	bcf	12,1	;volatile
  3429                           
  3430                           ;main.c: 266: if(++MainTime >= 32)
  3431  024A  3020               	movlw	32
  3432  024B  0AC6               	incf	_MainTime,f	;volatile
  3433  024C  0246               	subwf	_MainTime,w	;volatile
  3434  024D  1C03               	skipc
  3435  024E  2A51               	goto	i1l2512
  3436                           
  3437                           ;main.c: 267: {
  3438                           ;main.c: 268: MainTime = 0;
  3439  024F  01C6               	clrf	_MainTime	;volatile
  3440                           
  3441                           ;main.c: 269: B_MainLoop = 1;
  3442  0250  1571               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  3443  0251                     i1l2512:	
  3444                           
  3445                           ;main.c: 270: }
  3446                           ;main.c: 272: if(pwmTime < 12 && sendFlag)
  3447  0251  300C               	movlw	12
  3448  0252  0279               	subwf	_pwmTime,w	;volatile
  3449  0253  1C03               	btfss	3,0
  3450  0254  1C78               	btfss	_sendFlag/(0+8),_sendFlag& (0+7)	;volatile
  3451  0255  2A58               	goto	i1l554
  3452                           
  3453                           ;main.c: 273: PORTA&=~(1<<3);
  3454  0256  1185               	bcf	5,3	;volatile
  3455  0257  2A59               	goto	i1l2518
  3456  0258                     i1l554:	
  3457                           
  3458                           ;main.c: 274: else
  3459                           ;main.c: 275: PORTA|=(1<<3);
  3460  0258  1585               	bsf	5,3	;volatile
  3461  0259                     i1l2518:	
  3462                           
  3463                           ;main.c: 276: if(++pwmTime >= 44)
  3464  0259  302C               	movlw	44
  3465  025A  0AF9               	incf	_pwmTime,f	;volatile
  3466  025B  0279               	subwf	_pwmTime,w	;volatile
  3467  025C  1C03               	skipc
  3468  025D  2A61               	goto	i1l558
  3469                           
  3470                           ;main.c: 277: {
  3471                           ;main.c: 278: pwmTime = 0;
  3472  025E  01F9               	clrf	_pwmTime	;volatile
  3473  025F  2A61               	goto	i1l558
  3474  0260                     i1l2522:	
  3475                           
  3476                           ;main.c: 281: else
  3477                           ;main.c: 282: {
  3478                           ;main.c: 283: PIR1 = 0;
  3479  0260  018C               	clrf	12	;volatile
  3480  0261                     i1l558:	
  3481  0261  0873               	movf	??_Isr_Timer+1,w
  3482  0262  008A               	movwf	10
  3483  0263  0E72               	swapf	??_Isr_Timer^(0+-128),w
  3484  0264  0083               	movwf	3
  3485  0265  0EFE               	swapf	126,f
  3486  0266  0E7E               	swapf	126,w
  3487  0267  0009               	retfie
  3488  0268                     __end_of_Isr_Timer:	
  3489  007E                     btemp	set	126	;btemp
  3490  007E                     wtemp0	set	126
  3491                           
  3492                           	psect	intentry
  3493  0004                     __pintentry:	
  3494                           ;incstack = 0
  3495                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  3496                           
  3497  0004                     interrupt_function:	
  3498  007E                     saved_w	set	btemp
  3499  0004  00FE               	movwf	btemp
  3500  0005  0E03               	swapf	3,w
  3501  0006  00F2               	movwf	??_Isr_Timer
  3502  0007  080A               	movf	10,w
  3503  0008  00F3               	movwf	??_Isr_Timer+1
  3504  0009  2A45               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    14
    Data        2
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     13      54
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _CheckTouchKey->_CheckKeyOldValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3191
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                            _initPWM
                           _startPWM
 ---------------------------------------------------------------------------------
 (1) _startPWM                                             0     0      0       0
                           _procKey1
                           _procKey2
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            2     2      0      89
                                              2 COMMON     2     2      0
                           _procKey1
                           _procKey2
 ---------------------------------------------------------------------------------
 (2) _procKey2                                             0     0      0       0
                              _modea
                              _modeb
                              _modec
                              _moded
                              _modee
 ---------------------------------------------------------------------------------
 (3) _modee                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _moded                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _modec                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _modeb                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _modea                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _procKey1                                             0     0      0       0
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                              _mode5
 ---------------------------------------------------------------------------------
 (3) _mode5                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode4                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode3                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode2                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mode1                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3102
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _GetTouchKeyValue                                     2     2      0     157
                                              3 COMMON     2     2      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (3) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1892
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     304
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (4) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
     _procKey1
       _mode1
       _mode2
       _mode3
       _mode4
       _mode5
     _procKey2
       _modea
       _modeb
       _modec
       _moded
       _modee
   _Refurbish_Sfr
   _initPWM
   _startPWM
     _procKey1
       _mode1
       _mode2
       _mode3
       _mode4
       _mode5
     _procKey2
       _modea
       _modeb
       _modec
       _moded
       _modee

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK2               50      0       0       9        0.0%
BITBANK2            50      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      D      36       3       67.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       3       0       21.4%
CODE                 0      0       0       0        0.0%
DATA                 0      0      40      10        0.0%
ABS                  0      0      40       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Aug 05 22:06:22 2020

                KeyIsIn@cnt 0075                  KeyHave@cnt 0076                 KeyHave@flag 0074  
                         pc 0002                          PL2 015C                          PL4 00EB  
                        PL6 00FD                          PL8 016A               ??_KeyClearOne 0074  
     __size_of_TurnKeyFlags 002F                          fsr 0004            ??_CheckValidTime 0074  
                       PL10 0175                         PL12 02DD                         PL14 02B5  
                       PL16 017D                         PL18 038A                         l531 019F  
                       l524 01B7                         l565 02CA                         _PR2 0091  
                       fsr0 0004                         indf 0000         CheckOnceResult@flag 004D  
         ?_GetTouchKeyValue 0072                        S2802 02FA                        S2804 038E  
  __end_of_Table_KeyChannel 0314                  KeyServer@i 0074          ??_GetTouchKeyValue 0075  
                      l2110 0332                        l2200 02A0                        l2122 03AB  
                      l2130 03A3                        l2202 02A1                        l1139 014A  
                      l2220 0281                        l2212 0268                        l1157 01DD  
                      l2118 03AF                        l2126 03A7                        l2134 039F  
                      l2206 028E                        l2142 0397                        l2150 03B3  
                      l2222 0282                        l2230 0271                        l2152 0366  
                      l1176 022B                        l2224 0283                        l1097 01F2  
                      l2410 0314                        l1098 0201                        l2242 02EA  
                      l2162 036E                        l2402 01E4                        l2138 039B  
                      l2146 03B5                        l2226 0284                        l2218 0280  
                      l2148 0388                        l2182 037D                        l2166 0349  
                      l2158 0367                        l2344 010B                        l2416 0323  
                      l2168 034A                        l2264 0209                        l2440 019D  
                      l2194 029D                        l2450 01B9                        l2612 001C  
                      l2196 029E                        l2436 0196                        l2630 006C  
                      l2198 029F                        l2438 019B                        l2704 023C  
                      l2712 0244                        l2800 01A6                        l2448 01A1  
                      l2650 00A1                        l2706 0240                        l2644 0099  
                      l2718 02BE                        l2672 00DA                        l2664 00CB  
                      l2674 00DE                        l2668 00D6                        l2676 00E3  
                      l2696 0238                        u1035 0190                        u1215 0027  
                      u1235 005E                        u1245 0072                        u1255 007D  
                      u1285 00B9                        _PIE1 000D                        _PIR1 000C  
                      _main 02BB                        btemp 007E               ?_KeyStopClear 0072  
                      start 000A                _TurnKeyFlags 01C2             __end_of_KeyIsIn 0338  
           __end_of_KeyHave 0380  CheckKeyOldValue@KeyOldTemp 0049               ??_Init_System 0074  
CheckKeyOldValue@KeyResTemp 0047                       ?_main 0072                       _T2CON 0012  
                     i1l554 0258                       i1l558 0261                       _PORTA 0005  
                     _PORTB 0006                       _TRISA 0085                       _TRISB 0086  
                     _PWMTH 0016                       _PWMTL 0015         __end_of_KeyClearOne 02B5  
           __end_of_initPWM 0366                       _mode1 03AF                       _mode2 03AB  
                     _mode3 03A7                       _mode4 03A3                       _mode5 039F  
                     _modea 039B                       _modeb 0397                       _modec 03B5  
                     _moded 0388                       _modee 03B3                  _KeyClearIn 0366  
            __pbitbssCOMMON 0380                       pclath 000A                 _ClearResSum 0349  
                _KeyCounter 0044                  _KeyOldData 0038              ??_KeyStopClear 0075  
                     status 0003                       wtemp0 007E                  _KeyUpShake 003C  
           __initialization 000B                __end_of_main 02D0                      ??_main 0078  
       __end_of_Init_System 0349                      ?_mode1 0072                      ?_mode2 0072  
                    ?_mode3 0072                      ?_mode4 0072                      ?_mode5 0072  
                    ?_modea 0072                      ?_modeb 0072                      ?_modec 0072  
                    ?_moded 0072                      ?_modee 0072                      i1l2512 0251  
                    i1l2522 0260                      i1l2518 0259                      _INTCON 000B  
        __size_of_KeyServer 003F                      _OSCCON 0088                      _TMR2IF 0061  
                    _PWMD0L 0017                      _PWMD1L 0018                      _ONFlag 0387  
                 ??_KeyIsIn 0074                   ??_KeyHave 0076          __size_of_Isr_Timer 0023  
 CheckOnceResult@KeyResTemp 0051      CheckOnceResult@KeyDown 0050   __size_of_CheckKeyOldValue 0058  
                    _b_kclr 0381                      _b_kerr 0380                      _irStep 0045  
               _KeyClearOne 02A2                   ??_initPWM 0074               _Table_KeyFalg 0306  
             _Table_KeyDown 030E            __end_of_procKey1 02A2            __end_of_procKey2 0285  
                    saved_w 007E      __size_of_CheckTouchKey 0026            __end_of_startPWM 0397  
               ?_KeyClearIn 0072             _CheckOnceResult 0018     __end_of__initialization 0016  
            __pcstackCOMMON 0072                __pidataBANK0 0000               __end_of_mode1 03B3  
             __end_of_mode2 03AF               __end_of_mode3 03AB               __end_of_mode4 03A7  
             __end_of_mode5 03A3               __end_of_modea 039F               __end_of_modeb 039B  
             __end_of_modec 03B7               __end_of_moded 038A               __end_of_modee 03B5  
               _Init_System 0338                  __end_ofPL2 016A                  __end_ofPL4 00FD  
                __end_ofPL6 0104                  __end_ofPL8 0175           __end_of_KeyServer 01C2  
      __end_of_KeyStopClear 02FA           __end_of_Isr_Timer 0268             _doublePressFlag 0388  
                   ??_mode1 0074                     ??_mode2 0074                     ??_mode3 0074  
                   ??_mode4 0074                     ??_mode5 0074                     ??_modea 0074  
                   ??_modeb 0074                     ??_modec 0074                     ??_moded 0074  
                   ??_modee 0074                  __pbssBANK0 0020             _doubleTouchFlag 0384  
 __size_of_GetTouchKeyValue 002E               _CheckTouchKey 021F                  __pmaintext 02BB  
                __pintentry 0004         __size_of_KeyClearIn 000E     __end_of_CheckOnceResult 00EB  
                   _KEYCON0 0092                     _KEYCON1 0093               KeyStopClear@i 0075  
                   _PWMD01H 001C      __size_of_Refurbish_Sfr 000D                     _PWMCON0 0013  
                   _PWMCON1 0014                     _PWMCON2 001D        __end_of_Table_KeyCap 0312  
                __stringtab 0300                ?_ClearResSum 0072                     _KeyData 0036  
                   _KeyFlag 003E                     _KeyIsIn 0326                     _KeyHave 0374  
            ClearResSum@cnt 0074              ?_CheckTouchKey 0072                   ?_procKey1 0072  
                 ?_procKey2 0072     CheckOnceResult@KeyValue 004E            _CheckKeyOldValue 0104  
   CheckOnceResult@OldValue 004B                   ?_startPWM 0072      TurnKeyFlags@KeyNoTimes 0040  
      GetTouchKeyValue@temp 0075                     _b_kover 0383                     __ptext1 0393  
                   __ptext2 0358                     __ptext3 02D0                     __ptext4 0183  
                   __ptext5 0268                     __ptext6 03B3                     __ptext7 0388  
                   __ptext8 03B5                     __ptext9 0397                     _initPWM 0358  
                   _pwmFlag 0386                     _pwmTime 0079     __size_of_CheckValidTime 0012  
                   clrloop0 0381        end_of_initialization 0016                  ??_procKey1 0074  
                ??_procKey2 0074               _Refurbish_Sfr 02D0                _KeyOldValue0 002C  
              _KeyOldValue1 0028                _KeyOldValue2 0024       __size_of_KeyStopClear 0015  
                ??_startPWM 0074                ?_KeyClearOne 0072                _KeyReference 0020  
          ?_CheckOnceResult 0072                ??_KeyClearIn 0076          CheckOnceResult@cnt 0053  
           ??_CheckTouchKey 0078                _KeyStopClear 02E5            _GetTouchKeyValue 01F1  
            ?_Refurbish_Sfr 0072                ?_Init_System 0072          __end_of_KeyClearIn 0374  
                 _KeyMaxSub 0043                   _KeyResSum 0030                 __end_ofPL10 017D  
               __end_ofPL12 02E5                 __end_ofPL14 02BB                 __end_ofPL16 0183  
               __end_ofPL18 038E               __pbitnvCOMMON 03C0         start_initialization 000B  
                 _KeyServer 0183                   _Isr_Timer 0245        __size_of_ClearResSum 000F  
             _sendStartFlag 0389               ?_TurnKeyFlags 0072    TurnKeyFlags@KeyHaveTimes 0041  
               __pdataBANK0 0054                _Table_KeyCap 0310                 __pbssCOMMON 0079  
                ?_KeyServer 0072                   ___latbits 0000               __pcstackBANK0 0047  
            _CheckValidTime 0314    __end_of_CheckKeyOldValue 015C                  ?_Isr_Timer 0072  
       KeyServer@KeyOldFlag 003A                    ?_KeyIsIn 0072                    ?_KeyHave 0074  
           ??_Refurbish_Sfr 0074              ??_TurnKeyFlags 0077           __size_of_procKey1 001D  
         __size_of_procKey2 001D                   __pstrings 0300           __size_of_startPWM 0004  
                 __pswtext1 02FA                   __pswtext2 038E        __size_of_KeyClearOne 0013  
                  ?_initPWM 0072      __end_of_CheckValidTime 0326         GetTouchKeyValue@cnt 0076  
            __size_of_mode1 0004              __size_of_mode2 0004              __size_of_mode3 0004  
            __size_of_mode4 0004              __size_of_mode5 0004              __size_of_modea 0004  
            __size_of_modeb 0004              __size_of_modec 0002              __size_of_moded 0002  
            __size_of_modee 0002                    _KEYDATAH 0095                    _KEYDATAL 0094  
         interrupt_function 0004                   clear_ram0 0380         CheckKeyOldValue@cnt 004B  
                  KeyIsIn@i 0074                 __stringbase 0305        __size_of_Init_System 0011  
     __end_of_Table_KeyFalg 030E       __end_of_Table_KeyDown 0310    __end_of_GetTouchKeyValue 021F  
           ?_CheckValidTime 0072                 ??_KeyServer 0074                 _keyLockFlag 0385  
               ??_Isr_Timer 0072                    _MainTime 0046            __size_of_KeyIsIn 0012  
          __size_of_KeyHave 000C            _Table_KeyChannel 0312          __end_of__stringtab 0306  
                  _b_kover1 0382        __end_of_TurnKeyFlags 01F1            __size_of_initPWM 000E  
   CheckValidTime@validtime 0034                    __ptext10 039B                    __ptext11 0285  
                  __ptext20 0366                    __ptext12 039F                    __ptext21 02E5  
                  __ptext13 03A3                    __ptext30 0245                    __ptext22 01F1  
                  __ptext14 03A7                    __ptext23 0349                    __ptext15 03AB  
                  __ptext24 0314                    __ptext16 03AF                    __ptext25 0018  
                  __ptext17 0338                    __ptext26 0374                    __ptext18 021F  
                  __ptext27 02A2                    __ptext19 01C2                    __ptext28 0104  
                  __ptext29 0326    __size_of_CheckOnceResult 00D3               __size_of_main 0015  
                  _sendFlag 03C0                    _pwm0Step 0055                    _pwm1Step 0054  
     __end_of_CheckTouchKey 0245                    _procKey1 0285                    _procKey2 0268  
                  _startPWM 0393     CheckKeyOldValue@counter 0042           ?_CheckKeyOldValue 0072  
                  intlevel1 0000               ??_ClearResSum 0074          ??_CheckKeyOldValue 0076  
                 stringcode 0300                  _B_MainLoop 038A                  _OPTION_REG 0081  
                  stringdir 0300                    stringtab 0300              KeyClearOne@cnt 0074  
             KeyClearIn@cnt 0076       __end_of_Refurbish_Sfr 02DD         __end_of_ClearResSum 0358  
         ??_CheckOnceResult 0047  
