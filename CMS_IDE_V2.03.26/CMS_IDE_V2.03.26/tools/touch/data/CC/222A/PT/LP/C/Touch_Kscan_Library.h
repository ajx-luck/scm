#ifndef	_CHECKTOUCHKEY_H_
#define	_CHECKTOUCHKEY_H_

#include "TouchKeyConst.h"
#pragma warning disable 752,759
//接口函数声明
extern void CheckTouchKey(void);		//按键扫描主过程函数,建议在2.5ms~5ms内调用
extern volatile bit b_kerr;				//复位按键标志
extern volatile bit KeyOnceOver,KeyOnceHave,KeySleepStr;//休眠唤醒用
//KeyOnceHave = 1说明有按键，芯片唤醒
//当休眠时KeySleepStr = 1，唤醒后KeySleepStr = 0;为1时执行CheckTouchKey将减少芯片执行触摸检测时间

//每个按键对应于寄存器的1个位,由高至低一一对应
//KeyFlag[0]对应于Key8,...,Key2,Key1
//KeyFlag[1]对应于Key12,...,Key10,Key9
//按键有效时相应位为1,无效时为0
extern volatile unsigned char KeyFlag[2];

//防水模式选择,不定义则为组合键模式
#define 	WaterMode

//同时最大允许有效按键数,超过该值将认为是干扰,范围1~12
#define		C_VALID_KEY		3

//按键最大允许生效时间,以扫描时间（例如4ms）为基准换算,为0时将忽略,范围0~65535
#define		C_VALID_TIME	(1000/4)*20

//按键按下消抖次数
#define		C_KEY_SHAKE		2//2~8

//待检测按键总数,常量
#define 	C_KEY_TOTAL		2//触摸按键数,范围1~12

//内部比较器参考电压设定,在下列值中选取
//C_KVREF_04	=>	0.4VDD
//C_KVREF_05	=>	0.5VDD
//C_KVREF_06	=>	0.6VDD
//C_KVREF_07	=>	0.7VDD
#define		C_KVREF			C_KVREF_05

//转换时钟设定,在下列值中选取
//C_KCLK_SYS2	=>	系统时钟的2分频
//C_KCLK_SYS4	=>	系统时钟的4分频
#define		C_KCLK			C_KCLK_SYS4

//噪声阈值
#define		VOL_VALUE		25//无干扰下的最大触摸波动值*2，25~127

//触摸基准值更新消抖次数
#define		CM_BASE			4//消抖时间约为调用周期4ms（主程序时间例如4ms）*按键个数*CM_BASE,范围5~255

//跳频使能，使能后不能选C_KCLK_SYS2
//0：关闭
//1：开启
#define		C_TP_EN			0//3.5V以下工作，此位需为0

//使用时根据实际硬件连接修改下面这三个数组的内容
//注意数组的大小不能小于检测的按键总数

//检测通道设定,为C_KCHS1至C_KCHS12其中之一
const unsigned char Table_KeyChannel[] = {

};

//内部并联电容选择，用来调整长短线，以最长的线为0，适当调大短线的值，范围:C_KCAP0至C_KCAP7
const unsigned char Table_KeyCap[] = {

};

//下降有效幅度选择,调整长短线后再用这个修正灵敏度差异,设定值不可低于6,不能大于255
//灵敏度阈值
const unsigned char Table_KeyDown[] = {

};

/***********************************************************
下面的内容一般情况下不用修改
***********************************************************/
//高灵敏触摸使能
//0不使能
//1使能
#define		HIGHSENSITIVE	1

//触摸结束滤波次数
#define		CM_LVBO			5			//0~7

#define		LV_MODE			1			//0\1
#define		TK_MODE			2			//1\2\3




/***********************************************************
下面的内容请勿修改
***********************************************************/
unsigned int  KeyResSum[C_KEY_TOTAL];
unsigned int  KeyOldValue0[C_KEY_TOTAL];
unsigned int  KeyOldValue1[C_KEY_TOTAL];
unsigned int  KeyOldValue2[C_KEY_TOTAL];
unsigned int  KeyReference[C_KEY_TOTAL];
unsigned char KeyUpShake[C_KEY_TOTAL];

const unsigned int  KeyValidTime = C_VALID_TIME;
const unsigned char KeyTotalNumber = C_KEY_TOTAL;
const unsigned char KeyShakeCounter = C_KEY_SHAKE;
const unsigned char KeyValidNumber = C_VALID_KEY;
const unsigned char C_Tp_En = C_TP_EN;

const unsigned char VolValue = VOL_VALUE;
const unsigned char CmBase = CM_BASE;
const unsigned char HighSensitive = HIGHSENSITIVE;
const unsigned char CMLvbo = CM_LVBO;
const unsigned char LVMode = LV_MODE;
const unsigned char TKMode = TK_MODE;

#ifdef	WaterMode
const unsigned char WaterModeSel = 1;
#else
const unsigned char WaterModeSel = 0;
#endif

unsigned int FactorRawDat[C_KEY_TOTAL];
unsigned int Disp_KeyDown[C_KEY_TOTAL];
unsigned int NoiseDat[C_KEY_TOTAL];

#endif





