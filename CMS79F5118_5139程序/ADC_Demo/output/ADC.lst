

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Dec 03 10:53:33 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	79F5139
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	pa_nodes0,global,class=CODE,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 1.45
    15                           ; Generated 16/11/2017 GMT
    16                           ; 
    17                           ; Copyright 漏 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F887 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     
    49                           	psect	text0
    50  0000                     __ptext0:	
    51  001F                     _ADCON0	set	31
    52  001E                     _ADRESH	set	30
    53  00F9                     _GODONE	set	249
    54  009F                     _ADCON1	set	159
    55  009E                     _ADRESL	set	158
    56  0085                     _TRISA	set	133
    57                           
    58                           	psect	cinit
    59  07F2                     start_initialization:	
    60                           ; #config settings
    61                           
    62  07F2                     __initialization:	
    63                           
    64                           ; Clear objects allocated to COMMON
    65  07F2  01F8               	clrf	__pbssCOMMON& (0+127)
    66  07F3  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
    67  07F4  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
    68  07F5  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
    69  07F6  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
    70                           
    71                           ; Clear objects allocated to BANK0
    72  07F7  1283               	bcf	3,5	;RP0=0, select bank0
    73  07F8  1303               	bcf	3,6	;RP1=0, select bank0
    74  07F9  01A0               	clrf	__pbssBANK0& (0+127)
    75  07FA  01A1               	clrf	(__pbssBANK0+1)& (0+127)
    76  07FB  01A2               	clrf	(__pbssBANK0+2)& (0+127)
    77  07FC  01A3               	clrf	(__pbssBANK0+3)& (0+127)
    78  07FD                     end_of_initialization:	
    79                           ;End of C runtime variable initialization code
    80                           
    81  07FD                     __end_of__initialization:	
    82  07FD  0183               	clrf	3
    83  07FE  118A  2F46         	ljmp	_main	;jump to C main() function
    84                           
    85                           	psect	bssCOMMON
    86  0078                     __pbssCOMMON:	
    87  0078                     AD_Testing@admax:	
    88  0078                     	ds	2
    89  007A                     AD_Testing@admin:	
    90  007A                     	ds	2
    91  007C                     AD_Testing@adtimes:	
    92  007C                     	ds	1
    93                           
    94                           	psect	bssBANK0
    95  0020                     __pbssBANK0:	
    96  0020                     AD_Testing@adsum:	
    97  0020                     	ds	2
    98  0022                     _AD_Result:	
    99  0022                     	ds	2
   100                           
   101                           	psect	cstackCOMMON
   102  0070                     __pcstackCOMMON:	
   103  0070                     ?_AD_Testing:	
   104  0070                     ?_main:	
   105                           ; 1 bytes @ 0x0
   106                           
   107  0070                     AD_Testing@ad_ch:	
   108                           ; 1 bytes @ 0x0
   109                           
   110                           
   111                           ; 1 bytes @ 0x0
   112  0070                     	ds	1
   113  0071                     AD_Testing@ad_lr:	
   114                           
   115                           ; 1 bytes @ 0x1
   116  0071                     	ds	1
   117  0072                     ??_AD_Testing:	
   118                           
   119                           ; 1 bytes @ 0x2
   120  0072                     	ds	2
   121  0074                     AD_Testing@ad_fd:	
   122                           
   123                           ; 1 bytes @ 0x4
   124  0074                     	ds	1
   125  0075                     AD_Testing@i:	
   126                           
   127                           ; 1 bytes @ 0x5
   128  0075                     	ds	1
   129  0076                     AD_Testing@data:	
   130                           
   131                           ; 2 bytes @ 0x6
   132  0076                     	ds	2
   133  0078                     ??_main:	
   134                           
   135                           	psect	maintext
   136  0746                     __pmaintext:	
   137                           ; 1 bytes @ 0x8
   138 ;;
   139 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   140 ;;
   141 ;; *************** function _main *****************
   142 ;; Defined at:
   143 ;;		line 22 in file "C:\Edward_work_FILE\work_file\开发文件\雾化器\CMS79F5139_VER\雾化器开发包20201203\CMS79F5118_5139程
      +序\ADC_Demo\ADC.c"
   144 ;; Parameters:    Size  Location     Type
   145 ;;		None
   146 ;; Auto vars:     Size  Location     Type
   147 ;;		None
   148 ;; Return value:  Size  Location     Type
   149 ;;                  1    wreg      void 
   150 ;; Registers used:
   151 ;;		wreg, status,2, status,0, pclath, cstack
   152 ;; Tracked objects:
   153 ;;		On entry : B00/0
   154 ;;		On exit  : 0/0
   155 ;;		Unchanged: 0/0
   156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   157 ;;      Params:         0       0       0       0       0
   158 ;;      Locals:         0       0       0       0       0
   159 ;;      Temps:          0       0       0       0       0
   160 ;;      Totals:         0       0       0       0       0
   161 ;;Total ram usage:        0 bytes
   162 ;; Hardware stack levels required when called:    1
   163 ;; This function calls:
   164 ;;		_AD_Testing
   165 ;; This function is called by:
   166 ;;		Startup code after reset
   167 ;; This function uses a non-reentrant model
   168 ;;
   169                           
   170                           
   171                           ;psect for function _main
   172  0746                     _main:	
   173                           
   174                           ;incstack = 0
   175                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   176  0746  0000               	nop	;# 
   177  0747  0064               	clrwdt	;# 
   178                           
   179                           ;ADC.c: 27: TRISA = 0B00000010;
   180  0748  3002               	movlw	2
   181  0749  1683               	bsf	3,5	;RP0=1, select bank1
   182  074A  1303               	bcf	3,6	;RP1=0, select bank1
   183  074B  0085               	movwf	5	;volatile
   184  074C                     l1243:	
   185  074C  3001               	movlw	1
   186                           
   187                           ;ADC.c: 30: {
   188                           ;ADC.c: 31: AD_Testing(1,1,1);
   189  074D  01F0               	clrf	AD_Testing@ad_ch
   190  074E  0AF0               	incf	AD_Testing@ad_ch,f
   191  074F  01F1               	clrf	AD_Testing@ad_lr
   192  0750  0AF1               	incf	AD_Testing@ad_lr,f
   193  0751  118A  2756  118A   	fcall	_AD_Testing
   194  0754  0064               	clrwdt	;# 
   195  0755  2F4C               	goto	l1243
   196  0756                     __end_of_main:	
   197                           
   198                           	psect	text1
   199  0756                     __ptext1:	
   200 ;; *************** function _AD_Testing *****************
   201 ;; Defined at:
   202 ;;		line 48 in file "C:\Edward_work_FILE\work_file\开发文件\雾化器\CMS79F5139_VER\雾化器开发包20201203\CMS79F5118_5139程
      +序\ADC_Demo\ADC.c"
   203 ;; Parameters:    Size  Location     Type
   204 ;;  ad_fd           1    wreg     unsigned char 
   205 ;;  ad_ch           1    0[COMMON] unsigned char 
   206 ;;  ad_lr           1    1[COMMON] unsigned char 
   207 ;; Auto vars:     Size  Location     Type
   208 ;;  ad_fd           1    4[COMMON] unsigned char 
   209 ;;  data            2    6[COMMON] volatile unsigned int 
   210 ;;  i               1    5[COMMON] volatile unsigned char 
   211 ;; Return value:  Size  Location     Type
   212 ;;                  1    wreg      void 
   213 ;; Registers used:
   214 ;;		wreg, status,2, status,0
   215 ;; Tracked objects:
   216 ;;		On entry : 0/100
   217 ;;		On exit  : 0/0
   218 ;;		Unchanged: 0/0
   219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   220 ;;      Params:         2       0       0       0       0
   221 ;;      Locals:         4       0       0       0       0
   222 ;;      Temps:          2       0       0       0       0
   223 ;;      Totals:         8       0       0       0       0
   224 ;;Total ram usage:        8 bytes
   225 ;; Hardware stack levels used:    1
   226 ;; This function calls:
   227 ;;		Nothing
   228 ;; This function is called by:
   229 ;;		_main
   230 ;; This function uses a non-reentrant model
   231 ;;
   232                           
   233                           
   234                           ;psect for function _AD_Testing
   235  0756                     _AD_Testing:	
   236                           
   237                           ;incstack = 0
   238                           ; Regs used in _AD_Testing: [wreg+status,2+status,0]
   239                           ;AD_Testing@ad_fd stored from wreg
   240  0756  00F4               	movwf	AD_Testing@ad_fd
   241                           
   242                           ;ADC.c: 50: static volatile unsigned char adtimes;
   243                           ;ADC.c: 51: static volatile unsigned int admin,admax,adsum;
   244                           ;ADC.c: 52: volatile unsigned int data;
   245                           ;ADC.c: 53: volatile unsigned char i = 0;
   246  0757  01F5               	clrf	AD_Testing@i	;volatile
   247                           
   248                           ;ADC.c: 56: if(!ad_lr)
   249  0758  0871               	movf	AD_Testing@ad_lr,w
   250  0759  1D03               	btfss	3,2
   251  075A  2F5F               	goto	l1191
   252                           
   253                           ;ADC.c: 57: ADCON1 = 0;
   254  075B  1683               	bsf	3,5	;RP0=1, select bank1
   255  075C  1303               	bcf	3,6	;RP1=0, select bank1
   256  075D  019F               	clrf	31	;volatile
   257  075E  2F63               	goto	l1193
   258  075F                     l1191:	
   259                           
   260                           ;ADC.c: 58: else
   261                           ;ADC.c: 59: ADCON1 = 0x80;
   262  075F  3080               	movlw	128
   263  0760  1683               	bsf	3,5	;RP0=1, select bank1
   264  0761  1303               	bcf	3,6	;RP1=0, select bank1
   265  0762  009F               	movwf	31	;volatile
   266  0763                     l1193:	
   267                           
   268                           ;ADC.c: 61: ADCON0 = 0;
   269  0763  1283               	bcf	3,5	;RP0=0, select bank0
   270  0764  019F               	clrf	31	;volatile
   271                           
   272                           ;ADC.c: 62: ADCON0 |= (unsigned char)(ad_fd << 6);
   273  0765  0874               	movf	AD_Testing@ad_fd,w
   274  0766  00F2               	movwf	??_AD_Testing
   275  0767  0CF2               	rrf	??_AD_Testing,f
   276  0768  0CF2               	rrf	??_AD_Testing,f
   277  0769  0C72               	rrf	??_AD_Testing,w
   278  076A  39C0               	andlw	192
   279  076B  049F               	iorwf	31,f	;volatile
   280                           
   281                           ;ADC.c: 63: ADCON0 |= (unsigned char)(ad_ch << 2);
   282  076C  0870               	movf	AD_Testing@ad_ch,w
   283  076D  00F2               	movwf	??_AD_Testing
   284  076E  3001               	movlw	1
   285  076F  1003               	clrc
   286  0770                     L1:	
   287  0770  0DF2               	rlf	??_AD_Testing,f
   288  0771  3EFF               	addlw	-1
   289  0772  1003               	clrc
   290  0773  1D03               	skipz
   291  0774  2F70               	goto	L1
   292  0775  0D72               	rlf	??_AD_Testing,w
   293  0776  049F               	iorwf	31,f	;volatile
   294                           
   295                           ;ADC.c: 64: ADCON0 |= 0x01;
   296  0777  141F               	bsf	31,0	;volatile
   297  0778  0000               	nop	;# 
   298  0779  0000               	nop	;# 
   299                           
   300                           ;ADC.c: 68: GODONE = 1;
   301  077A  1283               	bcf	3,5	;RP0=0, select bank0
   302  077B  1303               	bcf	3,6	;RP1=0, select bank0
   303  077C  149F               	bsf	31,1	;volatile
   304  077D                     l737:	
   305                           ;ADC.c: 70: while(GODONE)
   306                           
   307  077D  1283               	bcf	3,5	;RP0=0, select bank0
   308  077E  1303               	bcf	3,6	;RP1=0, select bank0
   309  077F  1C9F               	btfss	31,1	;volatile
   310  0780  2F86               	goto	l1205
   311  0781  0000               	nop	;# 
   312  0782  0000               	nop	;# 
   313                           
   314                           ;ADC.c: 74: if(0 == (--i))
   315  0783  0BF5               	decfsz	AD_Testing@i,f	;volatile
   316  0784  2F7D               	goto	l737
   317  0785  0008               	return
   318  0786                     l1205:	
   319                           
   320                           ;ADC.c: 76: }
   321                           ;ADC.c: 78: if(!ad_lr)
   322  0786  0871               	movf	AD_Testing@ad_lr,w
   323  0787  1D03               	btfss	3,2
   324  0788  2F99               	goto	l1211
   325                           
   326                           ;ADC.c: 79: {
   327                           ;ADC.c: 80: data = (unsigned int)(ADRESH<<4);
   328  0789  081E               	movf	30,w	;volatile
   329  078A  00F6               	movwf	AD_Testing@data	;volatile
   330  078B  01F7               	clrf	AD_Testing@data+1	;volatile
   331  078C  0EF6               	swapf	AD_Testing@data,f	;volatile
   332  078D  0EF7               	swapf	AD_Testing@data+1,f	;volatile
   333  078E  30F0               	movlw	240
   334  078F  05F7               	andwf	AD_Testing@data+1,f	;volatile
   335  0790  0876               	movf	AD_Testing@data,w	;volatile
   336  0791  390F               	andlw	15
   337  0792  04F7               	iorwf	AD_Testing@data+1,f	;volatile
   338  0793  30F0               	movlw	240
   339  0794  05F6               	andwf	AD_Testing@data,f	;volatile
   340                           
   341                           ;ADC.c: 81: data |= (unsigned int)(ADRESL>>4);
   342  0795  1683               	bsf	3,5	;RP0=1, select bank1
   343  0796  0E1E               	swapf	30,w	;volatile
   344  0797  390F               	andlw	15
   345  0798  2F9E               	goto	L2
   346  0799                     l1211:	
   347                           ;ADC.c: 82: }
   348                           
   349                           
   350                           ;ADC.c: 83: else
   351                           ;ADC.c: 84: {
   352                           ;ADC.c: 85: data = (unsigned int)(ADRESH<<8);
   353  0799  081E               	movf	30,w	;volatile
   354  079A  00F7               	movwf	AD_Testing@data+1	;volatile
   355  079B  01F6               	clrf	AD_Testing@data	;volatile
   356                           
   357                           ;ADC.c: 86: data |= (unsigned int)ADRESL;
   358  079C  1683               	bsf	3,5	;RP0=1, select bank1
   359  079D  081E               	movf	30,w	;volatile
   360  079E                     L2:	
   361  079E  04F6               	iorwf	AD_Testing@data,f	;volatile
   362                           
   363                           ;ADC.c: 87: }
   364                           ;ADC.c: 89: if(0 == adtimes)
   365  079F  087C               	movf	AD_Testing@adtimes,w	;volatile
   366  07A0  1D03               	btfss	3,2
   367  07A1  2FA5               	goto	l1217
   368                           
   369                           ;ADC.c: 90: {
   370                           ;ADC.c: 91: admax = data;
   371  07A2  27ED  118A         	fcall	PL2	;call to abstracted procedure
   372  07A4  2FB8               	goto	l1223
   373  07A5                     l1217:	
   374                           ;ADC.c: 93: }
   375                           
   376                           ;ADC.c: 92: admin = data;
   377                           
   378                           
   379                           ;ADC.c: 94: else if(data > admax)
   380  07A5  0877               	movf	AD_Testing@data+1,w	;volatile
   381  07A6  0279               	subwf	AD_Testing@admax+1,w	;volatile
   382  07A7  1D03               	skipz
   383  07A8  2FAB               	goto	u165
   384  07A9  0876               	movf	AD_Testing@data,w	;volatile
   385  07AA  0278               	subwf	AD_Testing@admax,w	;volatile
   386  07AB                     u165:	
   387  07AB  1803               	skipnc
   388  07AC  2FB0               	goto	l1221
   389                           
   390                           ;ADC.c: 95: {
   391                           ;ADC.c: 96: admax = data;
   392  07AD  27ED  118A         	fcall	PL2	;call to abstracted procedure
   393                           
   394                           ;ADC.c: 97: }
   395  07AF  2FBC               	goto	l745
   396  07B0                     l1221:	
   397                           
   398                           ;ADC.c: 98: else if(data < admin)
   399  07B0  087B               	movf	AD_Testing@admin+1,w	;volatile
   400  07B1  0277               	subwf	AD_Testing@data+1,w	;volatile
   401  07B2  1D03               	skipz
   402  07B3  2FB6               	goto	u175
   403  07B4  087A               	movf	AD_Testing@admin,w	;volatile
   404  07B5  0276               	subwf	AD_Testing@data,w	;volatile
   405  07B6                     u175:	
   406  07B6  1803               	skipnc
   407  07B7  2FBC               	goto	l745
   408  07B8                     l1223:	
   409                           
   410                           ;ADC.c: 99: {
   411                           ;ADC.c: 100: admin = data;
   412  07B8  0877               	movf	AD_Testing@data+1,w	;volatile
   413  07B9  00FB               	movwf	AD_Testing@admin+1	;volatile
   414  07BA  0876               	movf	AD_Testing@data,w	;volatile
   415  07BB  00FA               	movwf	AD_Testing@admin	;volatile
   416  07BC                     l745:	
   417                           
   418                           ;ADC.c: 101: }
   419                           ;ADC.c: 103: adsum += data;
   420  07BC  0876               	movf	AD_Testing@data,w	;volatile
   421  07BD  1283               	bcf	3,5	;RP0=0, select bank0
   422  07BE  07A0               	addwf	AD_Testing@adsum,f	;volatile
   423  07BF  1803               	skipnc
   424  07C0  0AA1               	incf	AD_Testing@adsum+1,f	;volatile
   425  07C1  0877               	movf	AD_Testing@data+1,w	;volatile
   426  07C2  07A1               	addwf	AD_Testing@adsum+1,f	;volatile
   427                           
   428                           ;ADC.c: 104: if(++adtimes >= 10)
   429  07C3  300A               	movlw	10
   430  07C4  0AFC               	incf	AD_Testing@adtimes,f	;volatile
   431  07C5  027C               	subwf	AD_Testing@adtimes,w	;volatile
   432  07C6  1C03               	skipc
   433  07C7  0008               	return
   434                           
   435                           ;ADC.c: 105: {
   436                           ;ADC.c: 106: adsum -= admax;
   437  07C8  0878               	movf	AD_Testing@admax,w	;volatile
   438  07C9  02A0               	subwf	AD_Testing@adsum,f	;volatile
   439  07CA  0879               	movf	AD_Testing@admax+1,w	;volatile
   440  07CB  1C03               	skipc
   441  07CC  03A1               	decf	AD_Testing@adsum+1,f	;volatile
   442  07CD  02A1               	subwf	AD_Testing@adsum+1,f	;volatile
   443                           
   444                           ;ADC.c: 107: adsum -= admin;
   445  07CE  087A               	movf	AD_Testing@admin,w	;volatile
   446  07CF  02A0               	subwf	AD_Testing@adsum,f	;volatile
   447  07D0  087B               	movf	AD_Testing@admin+1,w	;volatile
   448  07D1  1C03               	skipc
   449  07D2  03A1               	decf	AD_Testing@adsum+1,f	;volatile
   450  07D3  02A1               	subwf	AD_Testing@adsum+1,f	;volatile
   451                           
   452                           ;ADC.c: 109: AD_Result = adsum >> 3;
   453  07D4  0821               	movf	AD_Testing@adsum+1,w	;volatile
   454  07D5  00F3               	movwf	??_AD_Testing+1
   455  07D6  0820               	movf	AD_Testing@adsum,w	;volatile
   456  07D7  00F2               	movwf	??_AD_Testing
   457  07D8  1003               	clrc
   458  07D9  0CF3               	rrf	??_AD_Testing+1,f
   459  07DA  0CF2               	rrf	??_AD_Testing,f
   460  07DB  1003               	clrc
   461  07DC  0CF3               	rrf	??_AD_Testing+1,f
   462  07DD  0CF2               	rrf	??_AD_Testing,f
   463  07DE  1003               	clrc
   464  07DF  0CF3               	rrf	??_AD_Testing+1,f
   465  07E0  0CF2               	rrf	??_AD_Testing,f
   466  07E1  0872               	movf	??_AD_Testing,w
   467  07E2  00A2               	movwf	_AD_Result	;volatile
   468  07E3  0873               	movf	??_AD_Testing+1,w
   469  07E4  00A3               	movwf	_AD_Result+1	;volatile
   470                           
   471                           ;ADC.c: 111: adsum = 0;
   472  07E5  01A0               	clrf	AD_Testing@adsum	;volatile
   473  07E6  01A1               	clrf	AD_Testing@adsum+1	;volatile
   474                           
   475                           ;ADC.c: 112: admin = 0;
   476  07E7  01FA               	clrf	AD_Testing@admin	;volatile
   477  07E8  01FB               	clrf	AD_Testing@admin+1	;volatile
   478                           
   479                           ;ADC.c: 113: admax = 0;
   480  07E9  01F8               	clrf	AD_Testing@admax	;volatile
   481  07EA  01F9               	clrf	AD_Testing@admax+1	;volatile
   482                           
   483                           ;ADC.c: 114: adtimes = 0;
   484  07EB  01FC               	clrf	AD_Testing@adtimes	;volatile
   485  07EC  0008               	return
   486  07ED                     __end_of_AD_Testing:	
   487  007E                     btemp	set	126	;btemp
   488  007E                     wtemp0	set	126
   489  07ED                     PL2:	
   490  07ED  0877               	movf	AD_Testing@data+1,w	;volatile
   491  07EE  00F9               	movwf	AD_Testing@admax+1	;volatile
   492  07EF  0876               	movf	AD_Testing@data,w	;volatile
   493  07F0  00F8               	movwf	AD_Testing@admax	;volatile
   494  07F1  0008               	return
   495  07F2                     __end_ofPL2:	


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80      0       4
    BANK1            80      0       0
    BANK3            88      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_AD_Testing

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     356
                         _AD_Testing
 ---------------------------------------------------------------------------------
 (1) _AD_Testing                                           8     6      2     356
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Testing

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      11       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            58      0       0       8        0.0%
BANK3               58      0       0       9        0.0%
BITBANK2            50      0       0      10        0.0%
BANK2               50      0       0      11        0.0%
DATA                 0      0      11      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Dec 03 10:53:33 2020

                     PL2 07ED                      l745 07BC                      l737 077D  
                    u165 07AB                      u175 07B6                     l1211 0799  
                   l1221 07B0                     l1205 0786                     l1223 07B8  
                   l1217 07A5                     l1243 074C                     l1191 075F  
                   l1193 0763                     _main 0746                     btemp 007E  
                   start 0000                    ?_main 0070      __size_of_AD_Testing 0097  
                  _TRISA 0085                    status 0003                    wtemp0 007E  
        __initialization 07F2             __end_of_main 0756                   ??_main 0078  
                 _ADCON0 001F                   _ADCON1 009F                   _ADRESH 001E  
                 _ADRESL 009E                   _GODONE 00F9             ??_AD_Testing 0072  
__end_of__initialization 07FD           __pcstackCOMMON 0070               __end_ofPL2 07F2  
     __end_of_AD_Testing 07ED               __pbssBANK0 0020               __pmaintext 0746  
        AD_Testing@ad_ch 0070          AD_Testing@ad_fd 0074          AD_Testing@ad_lr 0071  
        AD_Testing@admax 0078          AD_Testing@admin 007A          AD_Testing@adsum 0020  
                __ptext0 0000                  __ptext1 0756                _AD_Result 0022  
   end_of_initialization 07FD      start_initialization 07F2        AD_Testing@adtimes 007C  
            __pbssCOMMON 0078                ___latbits 0001           AD_Testing@data 0076  
             _AD_Testing 0756            __size_of_main 0010              AD_Testing@i 0075  
            ?_AD_Testing 0070  
