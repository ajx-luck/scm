

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Dec 03 10:55:13 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	79F5139
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	pa_nodes0,global,class=CODE,delta=2
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 1.45
    16                           ; Generated 16/11/2017 GMT
    17                           ; 
    18                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F887 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     
    50                           	psect	text0
    51  0000                     __ptext0:	
    52  005F                     _GIE	set	95
    53  010E                     _EEDATH	set	270
    54  010D                     _EEADR	set	269
    55  010C                     _EEDAT	set	268
    56  018D                     _EECON2	set	397
    57  0C60                     _RD	set	3168
    58  0C61                     _WR	set	3169
    59  0C62                     _WREN	set	3170
    60  0C67                     _EEPGD	set	3175
    61                           
    62                           	psect	cinit
    63  07F9                     start_initialization:	
    64                           ; #config settings
    65                           
    66  07F9                     __initialization:	
    67                           
    68                           ; Clear objects allocated to BITCOMMON
    69  07F9  01F7               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
    70                           
    71                           ; Clear objects allocated to COMMON
    72  07FA  01F4               	clrf	__pbssCOMMON& (0+127)
    73  07FB  01F5               	clrf	(__pbssCOMMON+1)& (0+127)
    74  07FC  01F6               	clrf	(__pbssCOMMON+2)& (0+127)
    75  07FD                     end_of_initialization:	
    76                           ;End of C runtime variable initialization code
    77                           
    78  07FD                     __end_of__initialization:	
    79  07FD  0183               	clrf	3
    80  07FE  118A  2FB6         	ljmp	_main	;jump to C main() function
    81                           
    82                           	psect	bitbssCOMMON
    83  03B8                     __pbitbssCOMMON:	
    84  03B8                     Memory_Write@B_GIE_On:	
    85  03B8                     	ds	1
    86                           
    87                           	psect	bssCOMMON
    88  0074                     __pbssCOMMON:	
    89  0074                     _t:	
    90  0074                     	ds	2
    91  0076                     Memory_Write@i:	
    92  0076                     	ds	1
    93                           
    94                           	psect	cstackCOMMON
    95  0070                     __pcstackCOMMON:	
    96  0070                     ?_Memory_Write:	
    97  0070                     ?_main:	
    98                           ; 1 bytes @ 0x0
    99                           
   100  0070                     ?_Memory_Read:	
   101                           ; 1 bytes @ 0x0
   102                           
   103  0070                     Memory_Write@Addr:	
   104                           ; 2 bytes @ 0x0
   105                           
   106  0070                     Memory_Read@Addr:	
   107                           ; 2 bytes @ 0x0
   108                           
   109                           
   110                           ; 2 bytes @ 0x0
   111  0070                     	ds	2
   112  0072                     ??_Memory_Read:	
   113  0072                     Memory_Write@Value:	
   114                           ; 1 bytes @ 0x2
   115                           
   116                           
   117                           ; 2 bytes @ 0x2
   118  0072                     	ds	2
   119  0074                     ??_Memory_Write:	
   120  0074                     ??_main:	
   121                           ; 1 bytes @ 0x4
   122                           
   123                           
   124                           	psect	maintext
   125  07B6                     __pmaintext:	
   126                           ; 1 bytes @ 0x4
   127 ;;
   128 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   129 ;;
   130 ;; *************** function _main *****************
   131 ;; Defined at:
   132 ;;		line 30 in file "C:\Users\edwar\Desktop\CMS79F5118_5139³ÌÐò\EEPRom_Demo\EEPRom_Demo.c"
   133 ;; Parameters:    Size  Location     Type
   134 ;;		None
   135 ;; Auto vars:     Size  Location     Type
   136 ;;		None
   137 ;; Return value:  Size  Location     Type
   138 ;;                  1    wreg      void 
   139 ;; Registers used:
   140 ;;		wreg, status,2, status,0, pclath, cstack
   141 ;; Tracked objects:
   142 ;;		On entry : B00/0
   143 ;;		On exit  : 300/200
   144 ;;		Unchanged: 0/0
   145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   146 ;;      Params:         0       0       0       0       0
   147 ;;      Locals:         0       0       0       0       0
   148 ;;      Temps:          0       0       0       0       0
   149 ;;      Totals:         0       0       0       0       0
   150 ;;Total ram usage:        0 bytes
   151 ;; Hardware stack levels required when called:    1
   152 ;; This function calls:
   153 ;;		_Memory_Read
   154 ;;		_Memory_Write
   155 ;; This function is called by:
   156 ;;		Startup code after reset
   157 ;; This function uses a non-reentrant model
   158 ;;
   159                           
   160                           
   161                           ;psect for function _main
   162  07B6                     _main:	
   163                           
   164                           ;incstack = 0
   165                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   166  07B6  0000               	nop	;# 
   167  07B7  0064               	clrwdt	;# 
   168  07B8  305A               	movlw	90
   169                           
   170                           ;EEPRom_Demo.c: 36: Memory_Write(0x0000,0x5a);
   171  07B9  01F0               	clrf	Memory_Write@Addr
   172  07BA  01F1               	clrf	Memory_Write@Addr+1
   173  07BB  00F2               	movwf	Memory_Write@Value
   174  07BC  01F3               	clrf	Memory_Write@Value+1
   175  07BD  118A  27CF  118A   	fcall	_Memory_Write
   176  07C0                     l723:	
   177                           ;EEPRom_Demo.c: 37: while(1)
   178                           
   179  07C0  0064               	clrwdt	;# 
   180                           
   181                           ;EEPRom_Demo.c: 41: if(!WR)
   182  07C1  1683               	bsf	3,5	;RP0=1, select bank3
   183  07C2  1703               	bsf	3,6	;RP1=1, select bank3
   184  07C3  188C               	btfsc	12,1	;volsfr
   185  07C4  2FC0               	goto	l723
   186                           
   187                           ;EEPRom_Demo.c: 42: t = Memory_Read(0x0000);
   188  07C5  01F0               	clrf	Memory_Read@Addr
   189  07C6  01F1               	clrf	Memory_Read@Addr+1
   190  07C7  118A  27A6  118A   	fcall	_Memory_Read
   191  07CA  0871               	movf	?_Memory_Read+1,w
   192  07CB  00F5               	movwf	_t+1	;volatile
   193  07CC  0870               	movf	?_Memory_Read,w
   194  07CD  00F4               	movwf	_t	;volatile
   195  07CE  2FC0               	goto	l723
   196  07CF                     __end_of_main:	
   197                           
   198                           	psect	text1
   199  07CF                     __ptext1:	
   200 ;; *************** function _Memory_Write *****************
   201 ;; Defined at:
   202 ;;		line 55 in file "C:\Users\edwar\Desktop\CMS79F5118_5139³ÌÐò\EEPRom_Demo\EEPRom_Demo.c"
   203 ;; Parameters:    Size  Location     Type
   204 ;;  Addr            2    0[COMMON] unsigned int 
   205 ;;  Value           2    2[COMMON] unsigned int 
   206 ;; Auto vars:     Size  Location     Type
   207 ;;		None
   208 ;; Return value:  Size  Location     Type
   209 ;;                  1    wreg      unsigned char 
   210 ;; Registers used:
   211 ;;		wreg
   212 ;; Tracked objects:
   213 ;;		On entry : 0/0
   214 ;;		On exit  : 0/0
   215 ;;		Unchanged: 0/0
   216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   217 ;;      Params:         4       0       0       0       0
   218 ;;      Locals:         0       0       0       0       0
   219 ;;      Temps:          0       0       0       0       0
   220 ;;      Totals:         4       0       0       0       0
   221 ;;Total ram usage:        4 bytes
   222 ;; Hardware stack levels used:    1
   223 ;; This function calls:
   224 ;;		Nothing
   225 ;; This function is called by:
   226 ;;		_main
   227 ;; This function uses a non-reentrant model
   228 ;;
   229                           
   230                           
   231                           ;psect for function _Memory_Write
   232  07CF                     _Memory_Write:	
   233                           
   234                           ;EEPRom_Demo.c: 57: static volatile bit B_GIE_On;
   235                           ;EEPRom_Demo.c: 58: static volatile unsigned char i = 0;
   236                           ;EEPRom_Demo.c: 60: if(WR)
   237                           
   238                           ;incstack = 0
   239                           ; Regs used in _Memory_Write: [wreg]
   240  07CF  1683               	bsf	3,5	;RP0=1, select bank3
   241  07D0  1703               	bsf	3,6	;RP1=1, select bank3
   242  07D1  1C8C               	btfss	12,1	;volsfr
   243  07D2  2FD4               	goto	l734
   244  07D3  0008               	return
   245  07D4                     l734:	
   246                           
   247                           ;EEPRom_Demo.c: 63: B_GIE_On = 0;
   248  07D4  1077               	bcf	Memory_Write@B_GIE_On/(0+8),Memory_Write@B_GIE_On& (0+7)	;volatile
   249                           
   250                           ;EEPRom_Demo.c: 64: if(GIE)
   251  07D5  1B8B               	btfsc	11,7	;volatile
   252                           
   253                           ;EEPRom_Demo.c: 65: B_GIE_On = 1;
   254  07D6  1477               	bsf	Memory_Write@B_GIE_On/(0+8),Memory_Write@B_GIE_On& (0+7)	;volatile
   255                           
   256                           ;EEPRom_Demo.c: 68: EEADR = Addr;
   257  07D7  0870               	movf	Memory_Write@Addr,w
   258  07D8  1283               	bcf	3,5	;RP0=0, select bank2
   259  07D9  008D               	movwf	13	;volatile
   260                           
   261                           ;EEPRom_Demo.c: 69: EEPGD = 0;
   262  07DA  1683               	bsf	3,5	;RP0=1, select bank3
   263  07DB  138C               	bcf	12,7	;volsfr
   264                           
   265                           ;EEPRom_Demo.c: 76: EEDATH=(Value >> 8);
   266  07DC  0873               	movf	Memory_Write@Value+1,w
   267  07DD  1283               	bcf	3,5	;RP0=0, select bank2
   268  07DE  008E               	movwf	14	;volatile
   269                           
   270                           ;EEPRom_Demo.c: 77: EEDAT=(Value & 0xff);
   271  07DF  0872               	movf	Memory_Write@Value,w
   272  07E0  008C               	movwf	12	;volatile
   273                           
   274                           ;EEPRom_Demo.c: 79: WREN = 1;
   275  07E1  1683               	bsf	3,5	;RP0=1, select bank3
   276  07E2  150C               	bsf	12,2	;volsfr
   277                           
   278                           ;EEPRom_Demo.c: 80: GIE = 0;
   279  07E3  138B               	bcf	11,7	;volatile
   280  07E4                     l737:	
   281                           ;EEPRom_Demo.c: 82: while(GIE)
   282                           
   283  07E4  1F8B               	btfss	11,7	;volatile
   284  07E5  2FEA               	goto	l1176
   285                           
   286                           ;EEPRom_Demo.c: 83: {
   287                           ;EEPRom_Demo.c: 84: GIE = 0;
   288  07E6  138B               	bcf	11,7	;volatile
   289                           
   290                           ;EEPRom_Demo.c: 85: if(0 == --i)
   291  07E7  0BF6               	decfsz	Memory_Write@i,f	;volatile
   292  07E8  2FE4               	goto	l737
   293  07E9  0008               	return
   294  07EA                     l1176:	
   295                           
   296                           ;EEPRom_Demo.c: 87: }
   297                           ;EEPRom_Demo.c: 89: EECON2 = 0x55;
   298  07EA  3055               	movlw	85
   299  07EB  1683               	bsf	3,5	;RP0=1, select bank3
   300  07EC  1703               	bsf	3,6	;RP1=1, select bank3
   301  07ED  008D               	movwf	13	;volsfr
   302                           
   303                           ;EEPRom_Demo.c: 90: EECON2 = 0xaa;
   304  07EE  30AA               	movlw	170
   305  07EF  008D               	movwf	13	;volsfr
   306                           
   307                           ;EEPRom_Demo.c: 91: WR = 1;
   308  07F0  148C               	bsf	12,1	;volsfr
   309  07F1  0000               	nop	;# 
   310  07F2  0000               	nop	;# 
   311                           
   312                           ;EEPRom_Demo.c: 95: if(B_GIE_On)
   313  07F3  1877               	btfsc	Memory_Write@B_GIE_On/(0+8),Memory_Write@B_GIE_On& (0+7)	;volatile
   314                           
   315                           ;EEPRom_Demo.c: 96: GIE = 1;
   316  07F4  178B               	bsf	11,7	;volatile
   317                           
   318                           ;EEPRom_Demo.c: 98: WREN = 0;
   319  07F5  1683               	bsf	3,5	;RP0=1, select bank3
   320  07F6  1703               	bsf	3,6	;RP1=1, select bank3
   321  07F7  110C               	bcf	12,2	;volsfr
   322                           
   323                           ;EEPRom_Demo.c: 99: return 1;
   324                           ;	Return value of _Memory_Write is never used
   325  07F8  0008               	return
   326  07F9                     __end_of_Memory_Write:	
   327                           
   328                           	psect	text2
   329  07A6                     __ptext2:	
   330 ;; *************** function _Memory_Read *****************
   331 ;; Defined at:
   332 ;;		line 110 in file "C:\Users\edwar\Desktop\CMS79F5118_5139³ÌÐò\EEPRom_Demo\EEPRom_Demo.c"
   333 ;; Parameters:    Size  Location     Type
   334 ;;  Addr            2    0[COMMON] unsigned int 
   335 ;; Auto vars:     Size  Location     Type
   336 ;;		None
   337 ;; Return value:  Size  Location     Type
   338 ;;                  2    0[COMMON] unsigned int 
   339 ;; Registers used:
   340 ;;		wreg
   341 ;; Tracked objects:
   342 ;;		On entry : 300/300
   343 ;;		On exit  : 300/200
   344 ;;		Unchanged: 0/0
   345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   346 ;;      Params:         2       0       0       0       0
   347 ;;      Locals:         0       0       0       0       0
   348 ;;      Temps:          0       0       0       0       0
   349 ;;      Totals:         2       0       0       0       0
   350 ;;Total ram usage:        2 bytes
   351 ;; Hardware stack levels used:    1
   352 ;; This function calls:
   353 ;;		Nothing
   354 ;; This function is called by:
   355 ;;		_main
   356 ;; This function uses a non-reentrant model
   357 ;;
   358                           
   359                           
   360                           ;psect for function _Memory_Read
   361  07A6                     _Memory_Read:	
   362                           
   363                           ;EEPRom_Demo.c: 113: EEADR = Addr;
   364                           
   365                           ;incstack = 0
   366                           ; Regs used in _Memory_Read: [wreg]
   367  07A6  0870               	movf	Memory_Read@Addr,w
   368  07A7  1283               	bcf	3,5	;RP0=0, select bank2
   369  07A8  008D               	movwf	13	;volatile
   370                           
   371                           ;EEPRom_Demo.c: 114: EEPGD = 0;
   372  07A9  1683               	bsf	3,5	;RP0=1, select bank3
   373  07AA  138C               	bcf	12,7	;volsfr
   374                           
   375                           ;EEPRom_Demo.c: 121: RD=1;
   376  07AB  140C               	bsf	12,0	;volsfr
   377  07AC  0000               	nop	;# 
   378  07AD  0000               	nop	;# 
   379                           
   380                           ;EEPRom_Demo.c: 125: return ((EEDATH << 8) | EEDAT);
   381  07AE  1283               	bcf	3,5	;RP0=0, select bank2
   382  07AF  1703               	bsf	3,6	;RP1=1, select bank2
   383  07B0  080E               	movf	14,w	;volatile
   384  07B1  00F1               	movwf	?_Memory_Read+1
   385  07B2  01F0               	clrf	?_Memory_Read
   386  07B3  080C               	movf	12,w	;volatile
   387  07B4  04F0               	iorwf	?_Memory_Read,f
   388  07B5  0008               	return
   389  07B6                     __end_of_Memory_Read:	
   390  007E                     btemp	set	126	;btemp
   391  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            88      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Memory_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     218
                        _Memory_Read
                       _Memory_Write
 ---------------------------------------------------------------------------------
 (1) _Memory_Write                                         4     0      4     153
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) _Memory_Read                                          2     0      2      65
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Memory_Read
   _Memory_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      4       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       8       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            58      0       0       8        0.0%
BANK3               58      0       0       9        0.0%
BITBANK2            50      0       0      10        0.0%
BANK2               50      0       0      11        0.0%
DATA                 0      0       8      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Dec 03 10:55:13 2020

                      _t 0074                       _RD 0C60                       _WR 0C61  
                    l723 07C0                      l734 07D4                      l737 07E4  
                    _GIE 005F                     l1176 07EA                     _WREN 0C62  
                   _main 07B6                     btemp 007E                     start 0000  
                  ?_main 0070                    _EEADR 010D                    _EEDAT 010C  
                  _EEPGD 0C67            ??_Memory_Read 0072           __pbitbssCOMMON 03B8  
                  status 0003                    wtemp0 007E          __initialization 07F9  
           __end_of_main 07CF            ?_Memory_Write 0070                   ??_main 0074  
   Memory_Write@B_GIE_On 03B8                   _EEDATH 010E                   _EECON2 018D  
    __end_of_Memory_Read 07B6           ??_Memory_Write 0074  __end_of__initialization 07FD  
         __pcstackCOMMON 0070              _Memory_Read 07A6               __pmaintext 07B6  
   __end_of_Memory_Write 07F9                  __ptext0 0000                  __ptext1 07CF  
                __ptext2 07A6     end_of_initialization 07FD        Memory_Write@Value 0072  
    start_initialization 07F9    __size_of_Memory_Write 002A             ?_Memory_Read 0070  
           _Memory_Write 07CF              __pbssCOMMON 0074                ___latbits 0001  
          Memory_Write@i 0076         Memory_Write@Addr 0070     __size_of_Memory_Read 0010  
        Memory_Read@Addr 0070            __size_of_main 0019  
