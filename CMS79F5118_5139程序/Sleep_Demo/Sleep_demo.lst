---- C:\Edward_work_FILE\work_file\开发文件\雾化器\CMS79F5139_VER\雾化器开发包20201203\CMS79F5118_5139程序\Sleep_Demo\Sleep_Demo.c ----------------------------------------------------------------------
1:                /*-------------------------------------------
2:                
3:                程序名称：休眠模式及唤醒程序
4:                日期版本：2018/6/15 <V1.1>
5:                
6:                备注：WDT已在CONFIG中禁止，休眠模式下利用PORTB电平变化唤醒
7:                
8:                *本程序由 中微半导体有限公司 &应用支持部& 编写整理
9:                *公司网址 www.mcu.com.cn
10:               *技术支持QQ 3001082102  罗工
11:                           3001085706	陈工
12:               -------------------------------------------*/
13:               
14:               
15:               #include <cms.h>
16:               /*************************************************************************/
17:               volatile unsigned char KEYRAM0 @ 0x113;
18:               volatile unsigned char KEYRAM1 @ 0x114;
19:               volatile unsigned char KEYRAM2 @ 0x117;
20:               volatile unsigned char KEYRAM3 @ 0x118;
21:               
22:               volatile unsigned char PFGRAM0 @ 0x11B;
23:               volatile unsigned char PFGRAM1 @ 0x11E;
24:               /*************************************************************************/
25:               
26:               void Init_System();
27:               void Sleep_Mode();
28:               
29:               void main()
30:               {
31:               	Init_System();
  006F    118A    CLRB	0xA,3
  0070    2048    CALL	0x48
  0071    118A    CLRB	0xA,3
32:               	while(1)
  0072    0064    CLRWDT
33:               	{
34:               		asm("clrwdt");
35:               		
36:               		Sleep_Mode();
  0073    118A    CLRB	0xA,3
  0074    2010    CALL	0x10
  0075    118A    CLRB	0xA,3
  0076    2872    JP	0x72
37:               	}
38:               }
39:               
40:               
41:               /***********************************************
42:               函数名称：Sleep_Mode
43:               函数功能：进入休眠模式
44:               入口参数：无
45:               出口参数：无
46:               备注：
47:               ************************************************/
48:               void Sleep_Mode()
49:               {
50:               	INTCON = 0;		
  0010    018B    CLR	0xB
51:               	
52:               	OPTION_REG = 0;
  0011    1683    SETB	0x3,5
  0012    1303    CLRB	0x3,6
  0013    0181    CLR	0x1
53:               
54:               	KEYRAM0 = 0;
  0014    1283    CLRB	0x3,5
  0015    1703    SETB	0x3,6
  0016    0193    CLR	0x13
55:               	KEYRAM1 = 0;
  0017    0194    CLR	0x14
56:               	KEYRAM2 = 0;
  0018    0197    CLR	0x17
57:               	KEYRAM3 = 0;
  0019    0198    CLR	0x18
58:               	PFGRAM0 = 0;
  001A    019B    CLR	0x1B
59:               	PFGRAM1 = 0;
  001B    019E    CLR	0x1E
60:               	
61:               	ANSEL = 0;					//都为数字通道
  001C    1683    SETB	0x3,5
  001D    0188    CLR	0x8
62:               	ANSELH = 0;
  001E    0189    CLR	0x9
63:               	 
64:               	TRISA = 0B00000000; 		//关闭所有输出
  001F    1303    CLRB	0x3,6
  0020    0185    CLR	0x5
65:               	PORTA = 0B00000000;
  0021    1283    CLRB	0x3,5
  0022    0185    CLR	0x5
66:               	WPUA  = 0B00000000;
  0023    1683    SETB	0x3,5
  0024    1703    SETB	0x3,6
  0025    018E    CLR	0xE
67:               	
68:               	TRISB = 0B00000100;	
  0026    3004    LDIA	0x4
  0027    1303    CLRB	0x3,6
  0028    0086    LD	0x6,A
69:               	PORTB = 0B00000000;
  0029    1283    CLRB	0x3,5
  002A    0186    CLR	0x6
70:               	WPUB  = 0B00000100;		
  002B    1683    SETB	0x3,5
  002C    0095    LD	0x15,A
71:               
72:               	IOCA = 0B00000000;
  002D    0187    CLR	0x7
73:               	IOCB = 0B00000100;			//允许RB1的IO口电平变化中断
  002E    0096    LD	0x16,A
74:               	RBIE = 1;					//允许PORTB电平变化中断
  002F    158B    SETB	0xB,3
75:               	GIE = 1;					//
  0030    178B    SETB	0xB,7
76:               	
77:               	ADCON0 = 0;					//关闭所有模块
  0031    1283    CLRB	0x3,5
  0032    019F    CLR	0x1F
78:               	PWMCON0 = 0;
  0033    1703    SETB	0x3,6
  0034    0187    CLR	0x7
79:               	EECON1 = 0;					//清此寄存器,有好处(测试组建议)
  0035    1683    SETB	0x3,5
  0036    018C    CLR	0xC
80:               	OPA0CON = 0;
  0037    1303    CLRB	0x3,6
  0038    019A    CLR	0x1A
81:               	WDTCON = 0;					//关闭看门狗
  0039    1283    CLRB	0x3,5
  003A    1703    SETB	0x3,6
  003B    0185    CLR	0x5
82:               	
83:               	PORTB;						//读PORTB值并锁存			
  003C    1303    CLRB	0x3,6
  003D    0806    LD	A,0x6
  003E    0064    CLRWDT
  003F    0063    STOP
  0040    0000    NOP
  0041    0000    NOP
  0042    0064    CLRWDT
84:               	asm("clrwdt");
85:               
86:               	asm("sleep");				//进入休眠模式
87:               	
88:               	asm("nop");
89:               	asm("nop");
90:               	asm("clrwdt");
91:               	
92:               	WDTCON = 0x01;				//重新开启看门狗
  0043    3001    LDIA	0x1
  0044    1283    CLRB	0x3,5
  0045    1703    SETB	0x3,6
  0046    0085    LD	0x5,A
93:               	Init_System();				//唤醒产生中断后返回此处
  0047    2848    JP	0x48
94:               }
95:               
96:               /***********************************************
97:               函数名称：Init_System
98:               函数功能：系统初始化
99:               入口参数：无
100:              出口参数：无
101:              备注：
102:              ************************************************/
103:              void Init_System()
104:              {
105:              	asm("nop");
106:              	asm("clrwdt");
107:              	INTCON = 0;					//系统初始化
  004A    018B    CLR	0xB
108:              	OSCCON = 0X71;				//配置振荡为8M
  004B    3071    LDIA	0x71
  004C    1683    SETB	0x3,5
  004D    1303    CLRB	0x3,6
  004E    008F    LD	0xF,A
109:              	OPTION_REG = 0;
  004F    0181    CLR	0x1
110:              	
111:                  WPUA  = 0B00000011;			//初始化上拉
  0050    3003    LDIA	0x3
  0051    1703    SETB	0x3,6
  0052    008E    LD	0xE,A
112:                  WPUB  = 0B00000100;				
  0053    3004    LDIA	0x4
  0054    1303    CLRB	0x3,6
  0055    0095    LD	0x15,A
113:               
114:              	TRISA = 0B00000011;			//初始化IO状态
  0056    3003    LDIA	0x3
  0057    0085    LD	0x5,A
115:              	TRISB = 0B00000100;
  0058    3004    LDIA	0x4
  0059    0086    LD	0x6,A
116:               
117:              	PORTA = 0B00000000;
  005A    1283    CLRB	0x3,5
  005B    0185    CLR	0x5
118:              	PORTB = 0B00000000;			//初始化输出
  005C    0186    CLR	0x6
119:              	
120:              	ANSEL = 0;
  005D    1683    SETB	0x3,5
  005E    1703    SETB	0x3,6
  005F    0188    CLR	0x8
121:              	ANSELH = 0;
  0060    0189    CLR	0x9
  0061    0008    RET
122:              }
123:              
124:              
125:              /***********************************************
126:              函数名称：PB_Isr
127:              函数功能：PB电平变化中断服务
128:              入口参数：无
129:              出口参数：无
130:              备注：
131:              ************************************************/
132:              void interrupt PB_Isr()
133:              {
134:              	if(RBIF)
  0062    1C0B    SNZB	0xB,0
  0063    2868    JP	0x68
135:              	{
136:              		PORTB;				//读PORTB值
  0064    1283    CLRB	0x3,5
  0065    1303    CLRB	0x3,6
  0066    0806    LD	A,0x6
137:              		RBIF = 0;			//清中断标志
  0067    100B    CLRB	0xB,0
  0068    0871    LD	A,0x71
  0069    008A    LD	0xA,A
  006A    0E70    SWAPA	0x70
  006B    0083    LD	0x3,A
  006C    0EFE    SWAPR	0x7E
  006D    0E7E    SWAPA	0x7E
  006E    0009    RETI
138:              		
139:              	}
140:              }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280B    JP	0xB
  000B    118A    CLRB	0xA,3
  000C    280D    JP	0xD
---- start_initialization ------------------------------------------------------------------
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F0    LD	0x70,A
  0007    080A    LD	A,0xA
  0008    00F1    LD	0x71,A
  0009    118A    CLRB	0xA,3
  000A    2862    JP	0x62
---- common_function ------------------------------------------------------------------
  000D    0183    CLR	0x3
  000E    118A    CLRB	0xA,3
  000F    286F    JP	0x6F
  0048    0000    NOP
  0049    0064    CLRWDT
