

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Dec 03 11:02:34 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	79F5139
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	psect	pa_nodes0,global,class=CODE,delta=2
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 1.45
    16                           ; Generated 16/11/2017 GMT
    17                           ; 
    18                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F887 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     
    50                           	psect	text0
    51  0000                     __ptext0:	
    52  001A                     _RCREG	set	26
    53  0019                     _TXREG	set	25
    54  000D                     _PIR2	set	13
    55  000C                     _PIR1	set	12
    56  000B                     _INTCON	set	11
    57  0005                     _PORTA	set	5
    58  00C1                     _OERR	set	193
    59  00C2                     _FERR	set	194
    60  00C4                     _CREN	set	196
    61  00C6                     _RX9EN	set	198
    62  00C7                     _SPEN	set	199
    63  0065                     _RCIF	set	101
    64  0099                     _SPBRG	set	153
    65  008F                     _OSCCON	set	143
    66  008D                     _PIE2	set	141
    67  008C                     _PIE1	set	140
    68  0085                     _TRISA	set	133
    69  04C1                     _TRMT	set	1217
    70  04C3                     _SCKP	set	1219
    71  04C4                     _SYNC	set	1220
    72  04C5                     _TXEN	set	1221
    73  04C6                     _TX9EN	set	1222
    74  0464                     _TXIE	set	1124
    75  0465                     _RCIE	set	1125
    76                           
    77                           	psect	cinit
    78  000F                     start_initialization:	
    79                           ; #config settings
    80                           
    81  000F                     __initialization:	
    82                           
    83                           ; Clear objects allocated to COMMON
    84  000F  01F0               	clrf	__pbssCOMMON& (0+127)
    85  0010  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
    86  0011  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
    87  0012  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
    88  0013  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
    89  0014  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
    90  0015  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
    91  0016  01F7               	clrf	(__pbssCOMMON+7)& (0+127)
    92  0017  01F8               	clrf	(__pbssCOMMON+8)& (0+127)
    93  0018  01F9               	clrf	(__pbssCOMMON+9)& (0+127)
    94  0019                     end_of_initialization:	
    95                           ;End of C runtime variable initialization code
    96                           
    97  0019                     __end_of__initialization:	
    98  0019  0183               	clrf	3
    99  001A  118A  281C         	ljmp	_main	;jump to C main() function
   100                           
   101                           	psect	bssCOMMON
   102  0070                     __pbssCOMMON:	
   103  0070                     _Sendbuffer:	
   104  0070                     	ds	4
   105  0074                     _Recebuffer:	
   106  0074                     	ds	4
   107  0078                     _rececount:	
   108  0078                     	ds	1
   109  0079                     _sendcount:	
   110  0079                     	ds	1
   111                           
   112                           	psect	cstackCOMMON
   113  007A                     __pcstackCOMMON:	
   114  007A                     ?_Set_Usart_Async:	
   115  007A                     ?_main:	
   116                           ; 1 bytes @ 0x0
   117                           
   118  007A                     ?_Usart_Isr:	
   119                           ; 1 bytes @ 0x0
   120                           
   121  007A                     ??_Usart_Isr:	
   122                           ; 1 bytes @ 0x0
   123                           
   124                           
   125                           ; 1 bytes @ 0x0
   126  007A                     	ds	3
   127  007D                     ??_Set_Usart_Async:	
   128  007D                     ??_main:	
   129                           ; 1 bytes @ 0x3
   130                           
   131                           
   132                           	psect	maintext
   133  001C                     __pmaintext:	
   134                           ; 1 bytes @ 0x3
   135 ;;
   136 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   137 ;;
   138 ;; *************** function _main *****************
   139 ;; Defined at:
   140 ;;		line 36 in file "C:\Users\edwar\Desktop\CMS79F5118_5139³ÌÐò\Usart_Demo\Async_Usart_Demo.c"
   141 ;; Parameters:    Size  Location     Type
   142 ;;		None
   143 ;; Auto vars:     Size  Location     Type
   144 ;;		None
   145 ;; Return value:  Size  Location     Type
   146 ;;                  1    wreg      void 
   147 ;; Registers used:
   148 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   149 ;; Tracked objects:
   150 ;;		On entry : B00/0
   151 ;;		On exit  : 300/0
   152 ;;		Unchanged: 0/0
   153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   154 ;;      Params:         0       0       0       0       0
   155 ;;      Locals:         0       0       0       0       0
   156 ;;      Temps:          0       0       0       0       0
   157 ;;      Totals:         0       0       0       0       0
   158 ;;Total ram usage:        0 bytes
   159 ;; Hardware stack levels required when called:    2
   160 ;; This function calls:
   161 ;;		_Set_Usart_Async
   162 ;; This function is called by:
   163 ;;		Startup code after reset
   164 ;; This function uses a non-reentrant model
   165 ;;
   166                           
   167                           
   168                           ;psect for function _main
   169  001C                     _main:	
   170                           
   171                           ;incstack = 0
   172                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   173  001C  0000               	nop	;# 
   174  001D  0064               	clrwdt	;# 
   175                           
   176                           ;Async_Usart_Demo.c: 41: OSCCON = 0x71;
   177  001E  3071               	movlw	113
   178  001F  1683               	bsf	3,5	;RP0=1, select bank1
   179  0020  1303               	bcf	3,6	;RP1=0, select bank1
   180  0021  008F               	movwf	15	;volatile
   181                           
   182                           ;Async_Usart_Demo.c: 42: INTCON = 0;
   183  0022  018B               	clrf	11	;volatile
   184                           
   185                           ;Async_Usart_Demo.c: 44: PIR1 = 0;
   186  0023  1283               	bcf	3,5	;RP0=0, select bank0
   187  0024  018C               	clrf	12	;volatile
   188                           
   189                           ;Async_Usart_Demo.c: 45: PIE1 = 0;
   190  0025  1683               	bsf	3,5	;RP0=1, select bank1
   191  0026  018C               	clrf	12	;volatile
   192                           
   193                           ;Async_Usart_Demo.c: 46: PIR2 = 0;
   194  0027  1283               	bcf	3,5	;RP0=0, select bank0
   195  0028  018D               	clrf	13	;volatile
   196                           
   197                           ;Async_Usart_Demo.c: 47: PIE2 = 0;
   198  0029  1683               	bsf	3,5	;RP0=1, select bank1
   199  002A  018D               	clrf	13	;volatile
   200                           
   201                           ;Async_Usart_Demo.c: 49: TRISA = 0B00000000;
   202  002B  0185               	clrf	5	;volatile
   203                           
   204                           ;Async_Usart_Demo.c: 50: PORTA = 0B00000000;
   205  002C  1283               	bcf	3,5	;RP0=0, select bank0
   206  002D  0185               	clrf	5	;volatile
   207                           
   208                           ;Async_Usart_Demo.c: 53: Set_Usart_Async();
   209  002E  118A  206B  118A   	fcall	_Set_Usart_Async
   210                           
   211                           ;Async_Usart_Demo.c: 56: INTCON = 0XC0;
   212  0031  30C0               	movlw	192
   213  0032  008B               	movwf	11	;volatile
   214  0033                     l727:	
   215                           ;Async_Usart_Demo.c: 59: while(1)
   216                           
   217  0033  0064               	clrwdt	;# 
   218                           
   219                           ;Async_Usart_Demo.c: 63: PORTA = Recebuffer[0];
   220  0034  0874               	movf	_Recebuffer,w
   221  0035  1283               	bcf	3,5	;RP0=0, select bank0
   222  0036  1303               	bcf	3,6	;RP1=0, select bank0
   223  0037  0085               	movwf	5	;volatile
   224                           
   225                           ;Async_Usart_Demo.c: 67: if(TRMT)
   226  0038  1683               	bsf	3,5	;RP0=1, select bank1
   227  0039  1C98               	btfss	24,1	;volatile
   228  003A  2833               	goto	l727
   229                           
   230                           ;Async_Usart_Demo.c: 68: {
   231                           ;Async_Usart_Demo.c: 69: TXREG = Sendbuffer[sendcount];
   232  003B  0879               	movf	_sendcount,w
   233  003C  3E70               	addlw	(low (_Sendbuffer| 0))& (0+255)
   234  003D  0084               	movwf	4
   235  003E  0800               	movf	0,w
   236  003F  1283               	bcf	3,5	;RP0=0, select bank0
   237  0040  0099               	movwf	25	;volatile
   238                           
   239                           ;Async_Usart_Demo.c: 71: Sendbuffer[sendcount] ++;
   240  0041  0879               	movf	_sendcount,w
   241  0042  3E70               	addlw	(low (_Sendbuffer| 0))& (0+255)
   242  0043  0084               	movwf	4
   243  0044  3004               	movlw	4
   244  0045  0A80               	incf	0,f
   245                           
   246                           ;Async_Usart_Demo.c: 73: sendcount++;
   247  0046  0AF9               	incf	_sendcount,f
   248                           
   249                           ;Async_Usart_Demo.c: 74: if(sendcount >= 4)
   250  0047  0279               	subwf	_sendcount,w
   251  0048  1C03               	skipc
   252  0049  2833               	goto	l727
   253                           
   254                           ;Async_Usart_Demo.c: 75: {
   255                           ;Async_Usart_Demo.c: 76: sendcount = 0;
   256  004A  01F9               	clrf	_sendcount
   257  004B  2833               	goto	l727
   258  004C                     __end_of_main:	
   259                           
   260                           	psect	text1
   261  006B                     __ptext1:	
   262 ;; *************** function _Set_Usart_Async *****************
   263 ;; Defined at:
   264 ;;		line 134 in file "C:\Users\edwar\Desktop\CMS79F5118_5139³ÌÐò\Usart_Demo\Async_Usart_Demo.c"
   265 ;; Parameters:    Size  Location     Type
   266 ;;		None
   267 ;; Auto vars:     Size  Location     Type
   268 ;;		None
   269 ;; Return value:  Size  Location     Type
   270 ;;                  1    wreg      void 
   271 ;; Registers used:
   272 ;;		wreg
   273 ;; Tracked objects:
   274 ;;		On entry : 300/0
   275 ;;		On exit  : 300/100
   276 ;;		Unchanged: 0/0
   277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   278 ;;      Params:         0       0       0       0       0
   279 ;;      Locals:         0       0       0       0       0
   280 ;;      Temps:          0       0       0       0       0
   281 ;;      Totals:         0       0       0       0       0
   282 ;;Total ram usage:        0 bytes
   283 ;; Hardware stack levels used:    1
   284 ;; Hardware stack levels required when called:    1
   285 ;; This function calls:
   286 ;;		Nothing
   287 ;; This function is called by:
   288 ;;		_main
   289 ;; This function uses a non-reentrant model
   290 ;;
   291                           
   292                           
   293                           ;psect for function _Set_Usart_Async
   294  006B                     _Set_Usart_Async:	
   295                           
   296                           ;Async_Usart_Demo.c: 136: SPBRG = 47;
   297                           
   298                           ;incstack = 0
   299                           ; Regs used in _Set_Usart_Async: [wreg]
   300  006B  302F               	movlw	47
   301  006C  1683               	bsf	3,5	;RP0=1, select bank1
   302  006D  0099               	movwf	25	;volatile
   303                           
   304                           ;Async_Usart_Demo.c: 138: SYNC = 0;
   305  006E  1218               	bcf	24,4	;volatile
   306                           
   307                           ;Async_Usart_Demo.c: 139: SCKP = 0;
   308  006F  1198               	bcf	24,3	;volatile
   309                           
   310                           ;Async_Usart_Demo.c: 141: SPEN = 1;
   311  0070  1283               	bcf	3,5	;RP0=0, select bank0
   312  0071  1798               	bsf	24,7	;volatile
   313                           
   314                           ;Async_Usart_Demo.c: 142: RCIE = 1;
   315  0072  1683               	bsf	3,5	;RP0=1, select bank1
   316  0073  168C               	bsf	12,5	;volatile
   317                           
   318                           ;Async_Usart_Demo.c: 143: TXIE = 0;
   319  0074  120C               	bcf	12,4	;volatile
   320                           
   321                           ;Async_Usart_Demo.c: 144: RX9EN = 0;
   322  0075  1283               	bcf	3,5	;RP0=0, select bank0
   323  0076  1318               	bcf	24,6	;volatile
   324                           
   325                           ;Async_Usart_Demo.c: 145: TX9EN = 0;
   326  0077  1683               	bsf	3,5	;RP0=1, select bank1
   327  0078  1318               	bcf	24,6	;volatile
   328                           
   329                           ;Async_Usart_Demo.c: 146: CREN = 1;
   330  0079  1283               	bcf	3,5	;RP0=0, select bank0
   331  007A  1618               	bsf	24,4	;volatile
   332                           
   333                           ;Async_Usart_Demo.c: 147: TXEN = 1;
   334  007B  1683               	bsf	3,5	;RP0=1, select bank1
   335  007C  1698               	bsf	24,5	;volatile
   336  007D  0008               	return
   337  007E                     __end_of_Set_Usart_Async:	
   338                           
   339                           	psect	text2
   340  004C                     __ptext2:	
   341 ;; *************** function _Usart_Isr *****************
   342 ;; Defined at:
   343 ;;		line 86 in file "C:\Users\edwar\Desktop\CMS79F5118_5139³ÌÐò\Usart_Demo\Async_Usart_Demo.c"
   344 ;; Parameters:    Size  Location     Type
   345 ;;		None
   346 ;; Auto vars:     Size  Location     Type
   347 ;;		None
   348 ;; Return value:  Size  Location     Type
   349 ;;                  1    wreg      void 
   350 ;; Registers used:
   351 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   352 ;; Tracked objects:
   353 ;;		On entry : 0/0
   354 ;;		On exit  : 300/0
   355 ;;		Unchanged: 0/0
   356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   357 ;;      Params:         0       0       0       0       0
   358 ;;      Locals:         0       0       0       0       0
   359 ;;      Temps:          3       0       0       0       0
   360 ;;      Totals:         3       0       0       0       0
   361 ;;Total ram usage:        3 bytes
   362 ;; Hardware stack levels used:    1
   363 ;; This function calls:
   364 ;;		Nothing
   365 ;; This function is called by:
   366 ;;		Interrupt level 1
   367 ;; This function uses a non-reentrant model
   368 ;;
   369                           
   370                           
   371                           ;psect for function _Usart_Isr
   372  004C                     _Usart_Isr:	
   373                           
   374                           ;Async_Usart_Demo.c: 88: static unsigned char tcount = 0;
   375                           ;Async_Usart_Demo.c: 94: if(RCIF)
   376  004C  1283               	bcf	3,5	;RP0=0, select bank0
   377  004D  1303               	bcf	3,6	;RP1=0, select bank0
   378  004E  1E8C               	btfss	12,5	;volatile
   379  004F  2862               	goto	i1l741
   380                           
   381                           ;Async_Usart_Demo.c: 95: {
   382                           ;Async_Usart_Demo.c: 96: if(FERR)
   383  0050  1D18               	btfss	24,2	;volatile
   384  0051  2854               	goto	i1l1184
   385                           
   386                           ;Async_Usart_Demo.c: 97: {
   387                           ;Async_Usart_Demo.c: 98: RCREG;
   388  0052  081A               	movf	26,w	;volatile
   389  0053  2862               	goto	i1l741
   390  0054                     i1l1184:	
   391                           
   392                           ;Async_Usart_Demo.c: 100: }
   393                           ;Async_Usart_Demo.c: 102: Recebuffer[rececount] = RCREG;
   394  0054  0878               	movf	_rececount,w
   395  0055  3E74               	addlw	(low (_Recebuffer| 0))& (0+255)
   396  0056  0084               	movwf	4
   397  0057  081A               	movf	26,w	;volatile
   398  0058  0080               	movwf	0
   399  0059  3004               	movlw	4
   400                           
   401                           ;Async_Usart_Demo.c: 103: rececount++;
   402  005A  0AF8               	incf	_rececount,f
   403                           
   404                           ;Async_Usart_Demo.c: 105: if(rececount >= 4)
   405  005B  0278               	subwf	_rececount,w
   406  005C  1803               	btfsc	3,0
   407                           
   408                           ;Async_Usart_Demo.c: 106: {
   409                           ;Async_Usart_Demo.c: 107: rececount = 0;
   410  005D  01F8               	clrf	_rececount
   411                           
   412                           ;Async_Usart_Demo.c: 108: }
   413                           ;Async_Usart_Demo.c: 110: if(OERR)
   414  005E  1C98               	btfss	24,1	;volatile
   415  005F  2862               	goto	i1l741
   416                           
   417                           ;Async_Usart_Demo.c: 111: {
   418                           ;Async_Usart_Demo.c: 112: CREN = 0;
   419  0060  1218               	bcf	24,4	;volatile
   420                           
   421                           ;Async_Usart_Demo.c: 113: CREN = 1;
   422  0061  1618               	bsf	24,4	;volatile
   423  0062                     i1l741:	
   424  0062  087C               	movf	??_Usart_Isr+2,w
   425  0063  008A               	movwf	10
   426  0064  087B               	movf	??_Usart_Isr+1,w
   427  0065  0084               	movwf	4
   428  0066  0E7A               	swapf	??_Usart_Isr^(0+-128),w
   429  0067  0083               	movwf	3
   430  0068  0EFE               	swapf	126,f
   431  0069  0E7E               	swapf	126,w
   432  006A  0009               	retfie
   433  006B                     __end_of_Usart_Isr:	
   434  007E                     btemp	set	126	;btemp
   435  007E                     wtemp0	set	126
   436                           
   437                           	psect	intentry
   438  0004                     __pintentry:	
   439                           ;incstack = 0
   440                           ; Regs used in _Usart_Isr: [wreg-fsr0h+status,2+status,0]
   441                           
   442  0004                     interrupt_function:	
   443  007E                     saved_w	set	btemp
   444  0004  00FE               	movwf	btemp
   445  0005  0E03               	swapf	3,w
   446  0006  00FA               	movwf	??_Usart_Isr
   447  0007  0804               	movf	4,w
   448  0008  00FB               	movwf	??_Usart_Isr+1
   449  0009  080A               	movf	10,w
   450  000A  00FC               	movwf	??_Usart_Isr+2
   451  000B  118A  284C         	ljmp	_Usart_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      3      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            88      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Usart_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Usart_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Usart_Isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Usart_Isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Usart_Isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                    _Set_Usart_Async
 ---------------------------------------------------------------------------------
 (1) _Set_Usart_Async                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Usart_Isr                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Set_Usart_Async

 _Usart_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      3       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            58      0       0       8        0.0%
BANK3               58      0       0       9        0.0%
BITBANK2            50      0       0      10        0.0%
BANK2               50      0       0      11        0.0%
DATA                 0      0       D      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Dec 03 11:02:34 2020

                     l727 0033                       fsr0 0004                       indf 0000  
                    _CREN 00C4                      _FERR 00C2                      _PIE1 008C  
                    _PIE2 008D                      _RCIE 0465                      _RCIF 0065  
                    _PIR1 000C                      _PIR2 000D                      _OERR 00C1  
                    _SCKP 04C3                      _SPEN 00C7                      _TRMT 04C1  
                    _TXIE 0464                      _TXEN 04C5                      _SYNC 04C4  
                    _main 001C                      btemp 007E                      start 000D  
                   ?_main 007A   __end_of_Set_Usart_Async 007E                     i1l741 0062  
                   _RCREG 001A                     _RX9EN 00C6                     _SPBRG 0099  
                   _PORTA 0005                     _TX9EN 04C6                     _TRISA 0085  
                   _TXREG 0019                     pclath 000A                     status 0003  
                   wtemp0 007E           __initialization 000F              __end_of_main 004C  
                  ??_main 007D                _Recebuffer 0074                    i1l1184 0054  
                  _INTCON 000B                    _OSCCON 008F                _Sendbuffer 0070  
        ?_Set_Usart_Async 007A                    saved_w 007E        __size_of_Usart_Isr 001F  
 __end_of__initialization 0019            __pcstackCOMMON 007A                __pmaintext 001C  
              __pintentry 0004         __end_of_Usart_Isr 006B                   __ptext0 0000  
                 __ptext1 006B                   __ptext2 004C      end_of_initialization 0019  
     start_initialization 000F  __size_of_Set_Usart_Async 0013                 _Usart_Isr 004C  
             __pbssCOMMON 0070                 ___latbits 0001                ?_Usart_Isr 007A  
               _rececount 0078         interrupt_function 0004         ??_Set_Usart_Async 007D  
               _sendcount 0079               ??_Usart_Isr 007A             __size_of_main 0030  
                intlevel1 0000           _Set_Usart_Async 006B  
