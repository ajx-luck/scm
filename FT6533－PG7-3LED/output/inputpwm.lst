

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 20 15:00:29 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1152A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	pa_nodes0,global,class=CODE,delta=2
    16                           	dabs	1,0x4E,2
    17  0000                     
    18                           ; Version 1.45
    19                           ; Generated 16/11/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	text0
    54  0000                     __ptext0:	
    55  0014                     _PWM_PRD	set	20
    56  0013                     _PWMR	set	19
    57  000F                     _TMR0PRD	set	15
    58  000E                     _IOCB	set	14
    59  000D                     _WPUB	set	13
    60  0009                     _INTCON	set	9
    61  0008                     _OSCCON	set	8
    62  0007                     _OPTION_REG	set	7
    63  0006                     _TRISB	set	6
    64  0005                     _PORTB	set	5
    65  0001                     _TMR0	set	1
    66  0090                     _PWMS0	set	144
    67  0091                     _PWMS1	set	145
    68  0092                     _PWMS2	set	146
    69  0094                     _PWMCK0	set	148
    70  0095                     _PWMCK1	set	149
    71  0096                     _PWMPRD8	set	150
    72  0097                     _PWMPRD9	set	151
    73  0088                     _PWMR08	set	136
    74  0089                     _PWMR09	set	137
    75  0080                     _PWMEN0	set	128
    76  0081                     _PWMEN1	set	129
    77  0082                     _PWMEN2	set	130
    78  004A                     _T0IF	set	74
    79                           
    80                           	psect	cinit
    81  000B                     start_initialization:	
    82                           ; #config settings
    83                           
    84  000B                     __initialization:	
    85                           
    86                           ; Clear objects allocated to COMMON
    87  000B  01C0               	clrf	__pbssCOMMON& (0+127)
    88  000C  01C1               	clrf	(__pbssCOMMON+1)& (0+127)
    89  000D  01C2               	clrf	(__pbssCOMMON+2)& (0+127)
    90  000E  01C3               	clrf	(__pbssCOMMON+3)& (0+127)
    91  000F  01C4               	clrf	(__pbssCOMMON+4)& (0+127)
    92  0010  01C5               	clrf	(__pbssCOMMON+5)& (0+127)
    93  0011  01C6               	clrf	(__pbssCOMMON+6)& (0+127)
    94  0012  01C7               	clrf	(__pbssCOMMON+7)& (0+127)
    95  0013                     end_of_initialization:	
    96                           ;End of C runtime variable initialization code
    97                           
    98  0013                     __end_of__initialization:	
    99  0013  0183               	clrf	3
   100  0014  287F               	ljmp	_main	;jump to C main() function
   101                           
   102                           	psect	bssCOMMON
   103  0040                     __pbssCOMMON:	
   104  0040                     _timeoutFlag:	
   105  0040                     	ds	1
   106  0041                     _nub:	
   107  0041                     	ds	1
   108  0042                     _pb3max:	
   109  0042                     	ds	1
   110  0043                     _pb3h:	
   111  0043                     	ds	1
   112  0044                     _pb4max:	
   113  0044                     	ds	1
   114  0045                     _pb4h:	
   115  0045                     	ds	1
   116  0046                     _pb5max:	
   117  0046                     	ds	1
   118  0047                     _pb5h:	
   119  0047                     	ds	1
   120                           
   121                           	psect	cstackCOMMON
   122  0048                     __pcstackCOMMON:	
   123  0048                     ?_Init_System:	
   124  0048                     ?_setPWM:	
   125                           ; 1 bytes @ 0x0
   126                           
   127  0048                     ?_main:	
   128                           ; 1 bytes @ 0x0
   129                           
   130  0048                     ?_Timer0_Isr:	
   131                           ; 1 bytes @ 0x0
   132                           
   133  0048                     ??_Timer0_Isr:	
   134                           ; 1 bytes @ 0x0
   135                           
   136                           
   137                           ; 1 bytes @ 0x0
   138  0048                     	ds	2
   139  004A                     ??_Init_System:	
   140  004A                     ?_checkPB:	
   141                           ; 1 bytes @ 0x2
   142                           
   143  004A                     ??_setPWM:	
   144                           ; 1 bytes @ 0x2
   145                           
   146  004A                     checkPB@pbCountmax:	
   147                           ; 1 bytes @ 0x2
   148                           
   149                           
   150                           ; 1 bytes @ 0x2
   151  004A                     	ds	1
   152  004B                     checkPB@bitNub:	
   153                           
   154                           ; 1 bytes @ 0x3
   155  004B                     	ds	1
   156  004C                     ??_main:	
   157                           
   158                           	psect	cstackBANK0
   159  0020                     __pcstackBANK0:	
   160                           ; 1 bytes @ 0x4
   161                           
   162  0020                     ??_checkPB:	
   163                           
   164                           ; 1 bytes @ 0x0
   165  0020                     	ds	1
   166  0021                     checkPB@pbCount:	
   167                           
   168                           ; 1 bytes @ 0x1
   169  0021                     	ds	1
   170                           
   171                           	psect	maintext
   172  007F                     __pmaintext:	
   173 ;;
   174 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   175 ;;
   176 ;; *************** function _main *****************
   177 ;; Defined at:
   178 ;;		line 14 in file "E:\project\scm\inputpwm\inputpwm.c"
   179 ;; Parameters:    Size  Location     Type
   180 ;;		None
   181 ;; Auto vars:     Size  Location     Type
   182 ;;		None
   183 ;; Return value:  Size  Location     Type
   184 ;;                  1    wreg      void 
   185 ;; Registers used:
   186 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   187 ;; Tracked objects:
   188 ;;		On entry : B00/0
   189 ;;		On exit  : 0/0
   190 ;;		Unchanged: 0/0
   191 ;; Data sizes:     COMMON   BANK0
   192 ;;      Params:         0       0
   193 ;;      Locals:         0       0
   194 ;;      Temps:          0       0
   195 ;;      Totals:         0       0
   196 ;;Total ram usage:        0 bytes
   197 ;; Hardware stack levels required when called:    2
   198 ;; This function calls:
   199 ;;		_Init_System
   200 ;;		_checkPB
   201 ;;		_setPWM
   202 ;; This function is called by:
   203 ;;		Startup code after reset
   204 ;; This function uses a non-reentrant model
   205 ;;
   206                           
   207                           
   208                           ;psect for function _main
   209  007F                     _main:	
   210                           
   211                           ;inputpwm.c: 17: Init_System();
   212                           
   213                           ;incstack = 0
   214                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   215  007F  205E               	fcall	_Init_System
   216  0080                     l876:	
   217                           
   218                           ;inputpwm.c: 19: {
   219                           ;inputpwm.c: 21: if(timeoutFlag)
   220  0080  0840               	movf	_timeoutFlag,w
   221  0081  1903               	btfsc	3,2
   222  0082  2880               	goto	l876
   223  0083  3042               	movlw	(low (_pb3max| 0))& (0+255)
   224                           
   225                           ;inputpwm.c: 22: {
   226                           ;inputpwm.c: 23: nub++;
   227  0084  0AC1               	incf	_nub,f
   228                           
   229                           ;inputpwm.c: 24: checkPB(&pb3h,&pb3max,3);
   230  0085  00CA               	movwf	checkPB@pbCountmax
   231  0086  3003               	movlw	3
   232  0087  00CB               	movwf	checkPB@bitNub
   233  0088  3043               	movlw	(low (_pb3h| 0))& (0+255)
   234  0089  2015               	fcall	_checkPB
   235                           
   236                           ;inputpwm.c: 25: checkPB(&pb4h,&pb4max,4);
   237  008A  3044               	movlw	(low (_pb4max| 0))& (0+255)
   238  008B  00CA               	movwf	checkPB@pbCountmax
   239  008C  3004               	movlw	4
   240  008D  00CB               	movwf	checkPB@bitNub
   241  008E  3045               	movlw	(low (_pb4h| 0))& (0+255)
   242  008F  2015               	fcall	_checkPB
   243                           
   244                           ;inputpwm.c: 26: checkPB(&pb5h,&pb5max,5);
   245  0090  3046               	movlw	(low (_pb5max| 0))& (0+255)
   246  0091  00CA               	movwf	checkPB@pbCountmax
   247  0092  3005               	movlw	5
   248  0093  00CB               	movwf	checkPB@bitNub
   249  0094  3047               	movlw	(low (_pb5h| 0))& (0+255)
   250  0095  2015               	fcall	_checkPB
   251  0096  3064               	movlw	100
   252                           
   253                           ;inputpwm.c: 27: timeoutFlag = 0;
   254  0097  01C0               	clrf	_timeoutFlag
   255                           
   256                           ;inputpwm.c: 28: if(nub == 100)
   257  0098  0641               	xorwf	_nub,w
   258  0099  1D03               	btfss	3,2
   259  009A  2880               	goto	l876
   260                           
   261                           ;inputpwm.c: 29: {
   262                           ;inputpwm.c: 30: setPWM();
   263  009B  203C               	fcall	_setPWM
   264                           
   265                           ;inputpwm.c: 31: nub = 0;
   266  009C  01C1               	clrf	_nub
   267  009D  2880               	goto	l876
   268  009E                     __end_of_main:	
   269                           
   270                           	psect	text1
   271  003C                     __ptext1:	
   272 ;; *************** function _setPWM *****************
   273 ;; Defined at:
   274 ;;		line 39 in file "E:\project\scm\inputpwm\inputpwm.c"
   275 ;; Parameters:    Size  Location     Type
   276 ;;		None
   277 ;; Auto vars:     Size  Location     Type
   278 ;;		None
   279 ;; Return value:  Size  Location     Type
   280 ;;                  1    wreg      void 
   281 ;; Registers used:
   282 ;;		wreg, status,2, status,0
   283 ;; Tracked objects:
   284 ;;		On entry : 0/0
   285 ;;		On exit  : 0/0
   286 ;;		Unchanged: 0/0
   287 ;; Data sizes:     COMMON   BANK0
   288 ;;      Params:         0       0
   289 ;;      Locals:         0       0
   290 ;;      Temps:          0       0
   291 ;;      Totals:         0       0
   292 ;;Total ram usage:        0 bytes
   293 ;; Hardware stack levels used:    1
   294 ;; Hardware stack levels required when called:    1
   295 ;; This function calls:
   296 ;;		Nothing
   297 ;; This function is called by:
   298 ;;		_main
   299 ;; This function uses a non-reentrant model
   300 ;;
   301                           
   302                           
   303                           ;psect for function _setPWM
   304  003C                     _setPWM:	
   305                           
   306                           ;inputpwm.c: 42: PWMS0 = 0;
   307                           
   308                           ;incstack = 0
   309                           ; Regs used in _setPWM: [wreg+status,2+status,0]
   310                           
   311                           ;inputpwm.c: 43: PWMS1 = 0;
   312                           
   313                           ;inputpwm.c: 44: PWMS2 = 0;
   314                           
   315                           ;inputpwm.c: 47: PWMR08 = 0;
   316                           
   317                           ;inputpwm.c: 48: PWMR09 = 0;
   318  003C  2058               	fcall	PL6	;call to abstracted procedure
   319                           
   320                           ;inputpwm.c: 49: PWMR = 0X64-pb5max;
   321  003D  0846               	movf	_pb5max,w
   322  003E  3C64               	sublw	100
   323  003F  0093               	movwf	19	;volatile
   324                           
   325                           ;inputpwm.c: 50: PWMEN0 = 1;
   326                           
   327                           ;inputpwm.c: 53: PWMS0 = 1;
   328                           
   329                           ;inputpwm.c: 54: PWMS1 = 0;
   330                           
   331                           ;inputpwm.c: 55: PWMS2 = 0;
   332                           
   333                           ;inputpwm.c: 58: PWMR08 = 0;
   334                           
   335                           ;inputpwm.c: 59: PWMR09 = 0;
   336  0040  204A               	fcall	PL2	;call to abstracted procedure
   337                           
   338                           ;inputpwm.c: 60: PWMR = 0X64-pb4max;
   339  0041  0844               	movf	_pb4max,w
   340  0042  3C64               	sublw	100
   341  0043  0093               	movwf	19	;volatile
   342                           
   343                           ;inputpwm.c: 61: PWMEN1 = 1;
   344                           
   345                           ;inputpwm.c: 64: PWMS0 = 0;
   346                           
   347                           ;inputpwm.c: 65: PWMS1 = 1;
   348                           
   349                           ;inputpwm.c: 66: PWMS2 = 0;
   350                           
   351                           ;inputpwm.c: 69: PWMR08 = 0;
   352                           
   353                           ;inputpwm.c: 70: PWMR09 = 0;
   354  0044  2051               	fcall	PL4	;call to abstracted procedure
   355                           
   356                           ;inputpwm.c: 71: PWMR = 0X64-pb3max;
   357  0045  0842               	movf	_pb3max,w
   358  0046  3C64               	sublw	100
   359  0047  0093               	movwf	19	;volatile
   360                           
   361                           ;inputpwm.c: 72: PWMEN2 = 1;
   362  0048  1510               	bsf	16,2	;volatile
   363  0049  0008               	return
   364  004A                     __end_of_setPWM:	
   365  004A                     PL2:	
   366  004A  1410               	bsf	16,0	;volatile
   367  004B  1412               	bsf	18,0	;volatile
   368  004C  1092               	bcf	18,1	;volatile
   369  004D  1112               	bcf	18,2	;volatile
   370  004E  1011               	bcf	17,0	;volatile
   371  004F  1091               	bcf	17,1	;volatile
   372  0050  0008               	return
   373  0051                     __end_ofPL2:	
   374  0051                     PL4:	
   375  0051  1490               	bsf	16,1	;volatile
   376  0052  1012               	bcf	18,0	;volatile
   377  0053  1492               	bsf	18,1	;volatile
   378  0054  1112               	bcf	18,2	;volatile
   379  0055  1011               	bcf	17,0	;volatile
   380  0056  1091               	bcf	17,1	;volatile
   381  0057  0008               	return
   382  0058                     __end_ofPL4:	
   383  0058                     PL6:	
   384  0058  1012               	bcf	18,0	;volatile
   385  0059  1092               	bcf	18,1	;volatile
   386  005A  1112               	bcf	18,2	;volatile
   387  005B  1011               	bcf	17,0	;volatile
   388  005C  1091               	bcf	17,1	;volatile
   389  005D  0008               	return
   390  005E                     __end_ofPL6:	
   391                           
   392                           	psect	text2
   393  0015                     __ptext2:	
   394 ;; *************** function _checkPB *****************
   395 ;; Defined at:
   396 ;;		line 75 in file "E:\project\scm\inputpwm\inputpwm.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;  pbCount         1    wreg     PTR unsigned char 
   399 ;;		 -> pb5h(1), pb4h(1), pb3h(1), 
   400 ;;  pbCountmax      1    2[COMMON] PTR unsigned char 
   401 ;;		 -> pb5max(1), pb4max(1), pb3max(1), 
   402 ;;  bitNub          1    3[COMMON] unsigned char 
   403 ;; Auto vars:     Size  Location     Type
   404 ;;  pbCount         1    1[BANK0 ] PTR unsigned char 
   405 ;;		 -> pb5h(1), pb4h(1), pb3h(1), 
   406 ;; Return value:  Size  Location     Type
   407 ;;                  1    wreg      void 
   408 ;; Registers used:
   409 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   410 ;; Tracked objects:
   411 ;;		On entry : 0/0
   412 ;;		On exit  : 0/0
   413 ;;		Unchanged: 0/0
   414 ;; Data sizes:     COMMON   BANK0
   415 ;;      Params:         2       0
   416 ;;      Locals:         0       1
   417 ;;      Temps:          0       1
   418 ;;      Totals:         2       2
   419 ;;Total ram usage:        4 bytes
   420 ;; Hardware stack levels used:    1
   421 ;; Hardware stack levels required when called:    1
   422 ;; This function calls:
   423 ;;		Nothing
   424 ;; This function is called by:
   425 ;;		_main
   426 ;; This function uses a non-reentrant model
   427 ;;
   428                           
   429                           
   430                           ;psect for function _checkPB
   431  0015                     _checkPB:	
   432                           
   433                           ;incstack = 0
   434                           ; Regs used in _checkPB: [wreg-fsr0h+status,2+status,0]
   435                           ;checkPB@pbCount stored from wreg
   436  0015  00A1               	movwf	checkPB@pbCount
   437                           
   438                           ;inputpwm.c: 77: if(((PORTB) >> (bitNub)&1) == 1)
   439  0016  0805               	movf	5,w	;volatile
   440  0017  00A0               	movwf	??_checkPB
   441  0018  0A4B               	incf	checkPB@bitNub,w
   442  0019  281C               	goto	u124
   443  001A                     u125:	
   444  001A  1003               	clrc
   445  001B  0CA0               	rrf	??_checkPB,f
   446  001C                     u124:	
   447  001C  3EFF               	addlw	-1
   448  001D  1D03               	skipz
   449  001E  281A               	goto	u125
   450  001F  1C20               	btfss	??_checkPB,0
   451  0020  282B               	goto	l868
   452                           
   453                           ;inputpwm.c: 78: {
   454                           ;inputpwm.c: 79: *pbCount = *pbCount + 1;
   455  0021  0821               	movf	checkPB@pbCount,w
   456  0022  0084               	movwf	4
   457  0023  0800               	movf	0,w
   458  0024  3E01               	addlw	1
   459  0025  00A0               	movwf	??_checkPB
   460  0026  0821               	movf	checkPB@pbCount,w
   461  0027  0084               	movwf	4
   462  0028  0820               	movf	??_checkPB,w
   463  0029  0080               	movwf	0
   464                           
   465                           ;inputpwm.c: 80: }
   466  002A  0008               	return
   467  002B                     l868:	
   468                           
   469                           ;inputpwm.c: 81: else
   470                           ;inputpwm.c: 82: {
   471                           ;inputpwm.c: 83: if(*pbCount !=0)
   472  002B  0821               	movf	checkPB@pbCount,w
   473  002C  0084               	movwf	4
   474  002D  0800               	movf	0,w
   475  002E  1903               	btfsc	3,2
   476  002F  2838               	goto	l872
   477                           
   478                           ;inputpwm.c: 84: {
   479                           ;inputpwm.c: 85: *pbCountmax = *pbCount;
   480  0030  0821               	movf	checkPB@pbCount,w
   481  0031  0084               	movwf	4
   482  0032  0800               	movf	0,w
   483  0033  00A0               	movwf	??_checkPB
   484  0034  084A               	movf	checkPB@pbCountmax,w
   485  0035  0084               	movwf	4
   486  0036  0820               	movf	??_checkPB,w
   487  0037  0080               	movwf	0
   488  0038                     l872:	
   489                           
   490                           ;inputpwm.c: 86: }
   491                           ;inputpwm.c: 87: *pbCount = 0;
   492  0038  0821               	movf	checkPB@pbCount,w
   493  0039  0084               	movwf	4
   494  003A  0180               	clrf	0
   495  003B  0008               	return
   496  003C                     __end_of_checkPB:	
   497                           
   498                           	psect	text3
   499  005E                     __ptext3:	
   500 ;; *************** function _Init_System *****************
   501 ;; Defined at:
   502 ;;		line 99 in file "E:\project\scm\inputpwm\inputpwm.c"
   503 ;; Parameters:    Size  Location     Type
   504 ;;		None
   505 ;; Auto vars:     Size  Location     Type
   506 ;;		None
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		wreg, status,2
   511 ;; Tracked objects:
   512 ;;		On entry : B00/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMMON   BANK0
   516 ;;      Params:         0       0
   517 ;;      Locals:         0       0
   518 ;;      Temps:          0       0
   519 ;;      Totals:         0       0
   520 ;;Total ram usage:        0 bytes
   521 ;; Hardware stack levels used:    1
   522 ;; Hardware stack levels required when called:    1
   523 ;; This function calls:
   524 ;;		Nothing
   525 ;; This function is called by:
   526 ;;		_main
   527 ;; This function uses a non-reentrant model
   528 ;;
   529                           
   530                           
   531                           ;psect for function _Init_System
   532  005E                     _Init_System:	
   533                           
   534                           ;incstack = 0
   535                           ; Regs used in _Init_System: [wreg+status,2]
   536  005E  0000               	nop	;# 
   537  005F  0064               	clrwdt	;# 
   538                           
   539                           ;inputpwm.c: 103: INTCON = 0;
   540  0060  0189               	clrf	9	;volatile
   541                           
   542                           ;inputpwm.c: 104: OSCCON = 0X71;
   543  0061  3071               	movlw	113
   544  0062  0088               	movwf	8	;volatile
   545                           
   546                           ;inputpwm.c: 105: WPUB = 0xFF;
   547  0063  30FF               	movlw	255
   548  0064  008D               	movwf	13	;volatile
   549                           
   550                           ;inputpwm.c: 106: OPTION_REG = 0xD0;
   551  0065  30D0               	movlw	208
   552  0066  0087               	movwf	7	;volatile
   553                           
   554                           ;inputpwm.c: 107: TMR0 = 0;
   555  0067  0181               	clrf	1	;volatile
   556                           
   557                           ;inputpwm.c: 108: INTCON = 0xE0;
   558  0068  30E0               	movlw	224
   559  0069  0089               	movwf	9	;volatile
   560                           
   561                           ;inputpwm.c: 109: TMR0PRD = 100;
   562  006A  3064               	movlw	100
   563  006B  008F               	movwf	15	;volatile
   564                           
   565                           ;inputpwm.c: 112: TRISB = 0B00111000;
   566  006C  3038               	movlw	56
   567  006D  0086               	movwf	6	;volatile
   568                           
   569                           ;inputpwm.c: 113: PORTB = 0B00111000;
   570  006E  0085               	movwf	5	;volatile
   571                           
   572                           ;inputpwm.c: 114: IOCB = 0xFF;
   573  006F  30FF               	movlw	255
   574  0070  008E               	movwf	14	;volatile
   575                           
   576                           ;inputpwm.c: 117: PWMCK0 = 1;
   577  0071  1612               	bsf	18,4	;volatile
   578                           
   579                           ;inputpwm.c: 118: PWMCK1 = 0;
   580  0072  1292               	bcf	18,5	;volatile
   581                           
   582                           ;inputpwm.c: 119: PWMPRD8 = 0;
   583  0073  1312               	bcf	18,6	;volatile
   584                           
   585                           ;inputpwm.c: 120: PWMPRD9 = 0;
   586  0074  1392               	bcf	18,7	;volatile
   587                           
   588                           ;inputpwm.c: 121: PWM_PRD = 99;
   589  0075  3063               	movlw	99
   590  0076  0094               	movwf	20	;volatile
   591                           
   592                           ;inputpwm.c: 124: PWMS0 = 0;
   593                           
   594                           ;inputpwm.c: 125: PWMS1 = 0;
   595                           
   596                           ;inputpwm.c: 126: PWMS2 = 0;
   597                           
   598                           ;inputpwm.c: 129: PWMR08 = 0;
   599                           
   600                           ;inputpwm.c: 130: PWMR09 = 0;
   601  0077  2058               	fcall	PL6	;call to abstracted procedure
   602                           
   603                           ;inputpwm.c: 131: PWMR = 0;
   604  0078  0193               	clrf	19	;volatile
   605                           
   606                           ;inputpwm.c: 132: PWMEN0 = 1;
   607                           
   608                           ;inputpwm.c: 134: PWMS0 = 1;
   609                           
   610                           ;inputpwm.c: 135: PWMS1 = 0;
   611                           
   612                           ;inputpwm.c: 136: PWMS2 = 0;
   613                           
   614                           ;inputpwm.c: 137: PWMR08 = 0;
   615                           
   616                           ;inputpwm.c: 138: PWMR09 = 0;
   617  0079  204A               	fcall	PL2	;call to abstracted procedure
   618                           
   619                           ;inputpwm.c: 139: PWMR = 0;
   620  007A  0193               	clrf	19	;volatile
   621                           
   622                           ;inputpwm.c: 140: PWMEN1 = 1;
   623                           
   624                           ;inputpwm.c: 143: PWMS0 = 0;
   625                           
   626                           ;inputpwm.c: 144: PWMS1 = 1;
   627                           
   628                           ;inputpwm.c: 145: PWMS2 = 0;
   629                           
   630                           ;inputpwm.c: 146: PWMR08 = 0;
   631                           
   632                           ;inputpwm.c: 147: PWMR09 = 0;
   633  007B  2051               	fcall	PL4	;call to abstracted procedure
   634                           
   635                           ;inputpwm.c: 148: PWMR = 0;
   636  007C  0193               	clrf	19	;volatile
   637                           
   638                           ;inputpwm.c: 149: PWMEN2 = 1;
   639  007D  1510               	bsf	16,2	;volatile
   640  007E  0008               	return
   641  007F                     __end_of_Init_System:	
   642                           
   643                           	psect	text4
   644  009E                     __ptext4:	
   645 ;; *************** function _Timer0_Isr *****************
   646 ;; Defined at:
   647 ;;		line 159 in file "E:\project\scm\inputpwm\inputpwm.c"
   648 ;; Parameters:    Size  Location     Type
   649 ;;		None
   650 ;; Auto vars:     Size  Location     Type
   651 ;;		None
   652 ;; Return value:  Size  Location     Type
   653 ;;                  1    wreg      void 
   654 ;; Registers used:
   655 ;;		None
   656 ;; Tracked objects:
   657 ;;		On entry : 0/0
   658 ;;		On exit  : 0/0
   659 ;;		Unchanged: 0/0
   660 ;; Data sizes:     COMMON   BANK0
   661 ;;      Params:         0       0
   662 ;;      Locals:         0       0
   663 ;;      Temps:          2       0
   664 ;;      Totals:         2       0
   665 ;;Total ram usage:        2 bytes
   666 ;; Hardware stack levels used:    1
   667 ;; This function calls:
   668 ;;		Nothing
   669 ;; This function is called by:
   670 ;;		Interrupt level 1
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           
   675                           ;psect for function _Timer0_Isr
   676  009E                     _Timer0_Isr:	
   677                           
   678                           ;inputpwm.c: 161: if(T0IF)
   679  009E  1D09               	btfss	9,2	;volatile
   680  009F  28A3               	goto	i1l328
   681                           
   682                           ;inputpwm.c: 162: {
   683                           ;inputpwm.c: 167: T0IF = 0;
   684  00A0  1109               	bcf	9,2	;volatile
   685                           
   686                           ;inputpwm.c: 168: timeoutFlag = 1;
   687  00A1  01C0               	clrf	_timeoutFlag
   688  00A2  0AC0               	incf	_timeoutFlag,f
   689  00A3                     i1l328:	
   690  00A3  0849               	movf	??_Timer0_Isr+1,w
   691  00A4  008A               	movwf	10
   692  00A5  0E48               	swapf	??_Timer0_Isr^(0+-128),w
   693  00A6  0083               	movwf	3
   694  00A7  0ECE               	swapf	78,f
   695  00A8  0E4E               	swapf	78,w
   696  00A9  0009               	retfie
   697  00AA                     __end_of_Timer0_Isr:	
   698  004E                     btemp	set	78	;btemp
   699  004E                     wtemp0	set	78
   700                           
   701                           	psect	intentry
   702  0004                     __pintentry:	
   703                           ;incstack = 0
   704                           ; Regs used in _Timer0_Isr: []
   705                           
   706  0004                     interrupt_function:	
   707  004E                     saved_w	set	btemp
   708  0004  00CE               	movwf	btemp
   709  0005  0E03               	swapf	3,w
   710  0006  00C8               	movwf	??_Timer0_Isr
   711  0007  080A               	movf	10,w
   712  0008  00C9               	movwf	??_Timer0_Isr+1
   713  0009  289E               	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4      12
    BANK0            32      2       2

Pointer List with Targets:

    checkPB@pbCountmax	PTR unsigned char  size(1) Largest target is 1
		 -> pb5max(COMMON[1]), pb4max(COMMON[1]), pb3max(COMMON[1]), 

    checkPB@pbCount	PTR unsigned char  size(1) Largest target is 1
		 -> pb5h(COMMON[1]), pb4h(COMMON[1]), pb3h(COMMON[1]), 


Critical Paths under _main in COMMON

    _main->_checkPB

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkPB

Critical Paths under _Timer0_Isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     697
                        _Init_System
                            _checkPB
                             _setPWM
 ---------------------------------------------------------------------------------
 (1) _setPWM                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkPB                                              4     2      2     697
                                              2 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Timer0_Isr                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_System
   _checkPB
   _setPWM

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      4       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               20      2       2       3        6.3%
ABS                  0      0       E       4        0.0%
BITBANK0            20      0       0       5        0.0%
DATA                 0      0       E       6        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 20 15:00:29 2020

                     PL2 004A                       PL4 0051                       PL6 0058  
                    l872 0038                      l868 002B                      l876 0080  
                    u124 001C                      u125 001A                      _nub 0041  
                    fsr0 0004                      indf 0000                     _T0IF 004A  
                   _IOCB 000E                     _TMR0 0001                     _PWMR 0013  
                   _WPUB 000D                     _pb3h 0043                     _pb4h 0045  
                   _pb5h 0047                     _main 007F                     btemp 004E  
                   start 000A            ??_Init_System 004A                    ?_main 0048  
                  i1l328 00A3                    _PORTB 0005          __end_of_checkPB 003C  
                  _PWMS0 0090                    _PWMS1 0091                    _PWMS2 0092  
                  _TRISB 0006            checkPB@bitNub 004B                    pclath 000A  
                  status 0003                    wtemp0 004E          __initialization 000B  
           __end_of_main 009E                   ??_main 004C      __end_of_Init_System 007F  
                 _INTCON 0009                   _OSCCON 0008                   _PWMCK0 0094  
                 _PWMCK1 0095                   _PWMEN0 0080                   _PWMR08 0088  
                 _PWMEN1 0081                   _PWMR09 0089                   _PWMEN2 0082  
             _Timer0_Isr 009E                   _pb3max 0042                   _pb4max 0044  
                 _pb5max 0046           checkPB@pbCount 0021                ??_checkPB 0020  
                 _setPWM 003C                   saved_w 004E  __end_of__initialization 0013  
         __pcstackCOMMON 0048              _Init_System 005E               __end_ofPL2 0051  
             __end_ofPL4 0058               __end_ofPL6 005E              ?_Timer0_Isr 0048  
             __pmaintext 007F               __pintentry 0004                  ?_setPWM 0048  
                _TMR0PRD 000F                  _PWMPRD8 0096                  _PWMPRD9 0097  
                _PWM_PRD 0014                  _checkPB 0015          __size_of_setPWM 000E  
                __ptext0 0000                  __ptext1 003C                  __ptext2 0015  
                __ptext3 005E                  __ptext4 009E      __size_of_Timer0_Isr 000C  
   end_of_initialization 0013             ?_Init_System 0048           __end_of_setPWM 004A  
    start_initialization 000B             ??_Timer0_Isr 0048                 ??_setPWM 004A  
            __pbssCOMMON 0040                ___latbits 0000            __pcstackBANK0 0020  
     __end_of_Timer0_Isr 00AA        checkPB@pbCountmax 004A                 ?_checkPB 004A  
      interrupt_function 0004     __size_of_Init_System 0021         __size_of_checkPB 0027  
          __size_of_main 001F                 intlevel1 0000               _OPTION_REG 0007  
            _timeoutFlag 0040  
