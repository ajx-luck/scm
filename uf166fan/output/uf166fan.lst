

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue May 12 17:52:16 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1711C
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	swtext1,local,class=CONST,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	swtext2,local,class=CONST,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	pa_nodes0,global,class=CODE,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 1.45
    48                           ; Generated 16/11/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F887 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	idataCOMMON
    83  0000                     __pidataCOMMON:	
    84  001F                     _ADCON0	set	31
    85  001E                     _ADRESH	set	30
    86  0017                     _CCP1CON	set	23
    87  0015                     _CCPR1L	set	21
    88  0012                     _T2CON	set	18
    89  000B                     _INTCON	set	11
    90  0007                     _PORTC	set	7
    91  0006                     _PORTB	set	6
    92  0005                     _PORTA	set	5
    93  0001                     _TMR0	set	1
    94  00F9                     _GODONE	set	249
    95  0061                     _TMR2IF	set	97
    96  005F                     _GIE	set	95
    97  005B                     _RBIE	set	91
    98  005A                     _T0IF	set	90
    99  0058                     _RBIF	set	88
   100  001C                     _TO	set	28
   101  009F                     _ADCON1	set	159
   102  009E                     _ADRESL	set	158
   103  0096                     _IOCB	set	150
   104  0095                     _WPUB	set	149
   105  0092                     _PR2	set	146
   106  008F                     _OSCCON	set	143
   107  0087                     _TRISC	set	135
   108  0086                     _TRISB	set	134
   109  0085                     _TRISA	set	133
   110  0081                     _OPTION_REG	set	129
   111  018F                     _WPUC	set	399
   112  018E                     _WPUA	set	398
   113                           
   114                           	psect	cinit
   115  000D                     start_initialization:	
   116                           ; #config settings
   117                           
   118  000D                     __initialization:	
   119                           
   120                           ;initializer for _FAN_STATUS
   121  000D  3002               	movlw	2
   122  000E  00F7               	movwf	__pdataCOMMON& (0+127)
   123                           
   124                           ;initializer for _currentLevel
   125  000F  3003               	movlw	3
   126  0010  00F8               	movwf	(__pdataCOMMON+1)& (0+127)
   127  0011  3020               	movlw	low __pbssBANK0
   128                           
   129                           ; Clear objects allocated to BANK0
   130  0012  1383               	bcf	3,7	;select IRP bank0
   131  0013  0084               	movwf	4
   132  0014  3046               	movlw	low (__pbssBANK0+38)
   133  0015  235D               	fcall	clear_ram0
   134                           
   135                           ; Clear objects allocated to COMMON
   136  0016  01F9               	clrf	__pbssCOMMON& (0+127)
   137  0017                     end_of_initialization:	
   138                           ;End of C runtime variable initialization code
   139                           
   140  0017                     __end_of__initialization:	
   141  0017  0183               	clrf	3
   142  0018  2A0F               	ljmp	_main	;jump to C main() function
   143                           
   144                           	psect	bssCOMMON
   145  0079                     __pbssCOMMON:	
   146  0079                     _time0Flag:	
   147  0079                     	ds	1
   148                           
   149                           	psect	dataCOMMON
   150  0077                     __pdataCOMMON:	
   151  0077                     _FAN_STATUS:	
   152  0077                     	ds	1
   153  0078                     _currentLevel:	
   154  0078                     	ds	1
   155                           
   156                           	psect	bssBANK0
   157  0020                     __pbssBANK0:	
   158  0020                     ADC_Sample@adsum:	
   159  0020                     	ds	4
   160  0024                     ADC_Sample@admax:	
   161  0024                     	ds	2
   162  0026                     ADC_Sample@admin:	
   163  0026                     	ds	2
   164  0028                     _fan_check_time:	
   165  0028                     	ds	2
   166  002A                     _count10Ms:	
   167  002A                     	ds	2
   168  002C                     _countTime:	
   169  002C                     	ds	2
   170  002E                     _adresult:	
   171  002E                     	ds	2
   172  0030                     ADC_Sample@adtimes:	
   173  0030                     	ds	1
   174  0031                     _key3:	
   175  0031                     	ds	7
   176  0038                     _key2:	
   177  0038                     	ds	7
   178  003F                     _key1:	
   179  003F                     	ds	7
   180                           
   181                           	psect	clrtext
   182  035D                     clear_ram0:	
   183                           ;	Called with FSR containing the base address, and
   184                           ;	W with the last address+1
   185                           
   186  035D  0064               	clrwdt	;clear the watchdog before getting into this loop
   187  035E                     clrloop0:	
   188  035E  0180               	clrf	0	;clear RAM location pointed to by FSR
   189  035F  0A84               	incf	4,f	;increment pointer
   190  0360  0604               	xorwf	4,w	;XOR with final address
   191  0361  1903               	btfsc	3,2	;have we reached the end yet?
   192  0362  3400               	retlw	0	;all done for this memory range, return
   193  0363  0604               	xorwf	4,w	;XOR again to restore value
   194  0364  2B5E               	goto	clrloop0	;do the next byte
   195                           
   196                           	psect	cstackCOMMON
   197  0070                     __pcstackCOMMON:	
   198  0070                     ?_setLedOn:	
   199  0070                     ?_sacnKeyInput:	
   200                           ; 1 bytes @ 0x0
   201                           
   202  0070                     ?_key_driver:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  0070                     ?_Sleep_Mode:	
   206                           ; 1 bytes @ 0x0
   207                           
   208  0070                     ?_Init_Config:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0070                     ?_readVrefADC:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0070                     ?_Init_System:	
   215                           ; 1 bytes @ 0x0
   216                           
   217  0070                     ?_Init_GPIO:	
   218                           ; 1 bytes @ 0x0
   219                           
   220  0070                     ?_Init_Interupt:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0070                     ?_resetKey:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0070                     ?_checkUsbStatus:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ?_Init_PWM:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     ?_setFanLevel:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ?_closeFan:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ?_checkFan:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ?_scanKeys:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_checkKeys:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_main:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_Timer0_Isr:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_ADC_Sample:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_ADC_Result:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_DelayXms:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ?i1_Init_PWM:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ??i1_Init_PWM:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?i1_Init_Config:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ?i1_resetKey:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ??i1_resetKey:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?i1_Init_System:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ??i1_Init_System:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ?i1_Init_GPIO:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ??i1_Init_GPIO:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ?i1_Init_Interupt:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ??i1_Init_Interupt:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0070                     i1resetKey@key:	
   296                           ; 1 bytes @ 0x0
   297                           
   298                           
   299                           ; 1 bytes @ 0x0
   300  0070                     	ds	1
   301  0071                     ??_Timer0_Isr:	
   302  0071                     ??i1_Init_Config:	
   303                           ; 1 bytes @ 0x1
   304                           
   305                           
   306                           ; 1 bytes @ 0x1
   307  0071                     	ds	3
   308  0074                     ??_setLedOn:	
   309  0074                     ??_sacnKeyInput:	
   310                           ; 1 bytes @ 0x4
   311                           
   312  0074                     ??_key_driver:	
   313                           ; 1 bytes @ 0x4
   314                           
   315  0074                     ??_Sleep_Mode:	
   316                           ; 1 bytes @ 0x4
   317                           
   318  0074                     ??_Init_System:	
   319                           ; 1 bytes @ 0x4
   320                           
   321  0074                     ??_Init_GPIO:	
   322                           ; 1 bytes @ 0x4
   323                           
   324  0074                     ??_Init_Interupt:	
   325                           ; 1 bytes @ 0x4
   326                           
   327  0074                     ??_resetKey:	
   328                           ; 1 bytes @ 0x4
   329                           
   330  0074                     ??_checkUsbStatus:	
   331                           ; 1 bytes @ 0x4
   332                           
   333  0074                     ??_Init_PWM:	
   334                           ; 1 bytes @ 0x4
   335                           
   336  0074                     ??_ADC_Result:	
   337                           ; 1 bytes @ 0x4
   338                           
   339  0074                     ??_DelayXms:	
   340                           ; 1 bytes @ 0x4
   341                           
   342  0074                     ??___awdiv:	
   343                           ; 1 bytes @ 0x4
   344                           
   345  0074                     setLedOn@ledIndex:	
   346                           ; 1 bytes @ 0x4
   347                           
   348  0074                     key_driver@key_return:	
   349                           ; 1 bytes @ 0x4
   350                           
   351  0074                     resetKey@key:	
   352                           ; 1 bytes @ 0x4
   353                           
   354  0074                     DelayXms@x:	
   355                           ; 1 bytes @ 0x4
   356                           
   357                           
   358                           ; 1 bytes @ 0x4
   359  0074                     	ds	1
   360  0075                     ??_Init_Config:	
   361  0075                     ??_setFanLevel:	
   362                           ; 1 bytes @ 0x5
   363                           
   364  0075                     ??_closeFan:	
   365                           ; 1 bytes @ 0x5
   366                           
   367  0075                     setFanLevel@level:	
   368                           ; 1 bytes @ 0x5
   369                           
   370  0075                     key_driver@key_read:	
   371                           ; 1 bytes @ 0x5
   372                           
   373  0075                     ADC_Result@adch:	
   374                           ; 1 bytes @ 0x5
   375                           
   376  0075                     DelayXms@i:	
   377                           ; 1 bytes @ 0x5
   378                           
   379                           
   380                           ; 1 bytes @ 0x5
   381  0075                     	ds	1
   382  0076                     setFanLevel@tempLevel:	
   383  0076                     sacnKeyInput@key:	
   384                           ; 1 bytes @ 0x6
   385                           
   386  0076                     key_driver@key:	
   387                           ; 1 bytes @ 0x6
   388                           
   389  0076                     ADC_Result@i:	
   390                           ; 1 bytes @ 0x6
   391                           
   392  0076                     DelayXms@j:	
   393                           ; 1 bytes @ 0x6
   394                           
   395                           
   396                           ; 1 bytes @ 0x6
   397  0076                     	ds	1
   398  0077                     ??_readVrefADC:	
   399  0077                     ??_scanKeys:	
   400                           ; 1 bytes @ 0x7
   401                           
   402  0077                     ??_checkKeys:	
   403                           ; 1 bytes @ 0x7
   404                           
   405  0077                     ??_main:	
   406                           ; 1 bytes @ 0x7
   407                           
   408                           
   409                           	psect	cstackBANK0
   410  0046                     __pcstackBANK0:	
   411                           ; 1 bytes @ 0x7
   412                           
   413  0046                     ??_ADC_Sample:	
   414  0046                     ?___awdiv:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0046                     ___awdiv@divisor:	
   418                           ; 2 bytes @ 0x0
   419                           
   420                           
   421                           ; 2 bytes @ 0x0
   422  0046                     	ds	2
   423  0048                     ___awdiv@dividend:	
   424                           
   425                           ; 2 bytes @ 0x2
   426  0048                     	ds	2
   427  004A                     ADC_Sample@adch:	
   428  004A                     ___awdiv@counter:	
   429                           ; 1 bytes @ 0x4
   430                           
   431                           
   432                           ; 1 bytes @ 0x4
   433  004A                     	ds	1
   434  004B                     ADC_Sample@i:	
   435  004B                     ___awdiv@sign:	
   436                           ; 1 bytes @ 0x5
   437                           
   438                           
   439                           ; 1 bytes @ 0x5
   440  004B                     	ds	1
   441  004C                     ADC_Sample@ad_temp:	
   442  004C                     ___awdiv@quotient:	
   443                           ; 2 bytes @ 0x6
   444                           
   445                           
   446                           ; 2 bytes @ 0x6
   447  004C                     	ds	2
   448  004E                     ??_checkFan:	
   449                           
   450                           ; 1 bytes @ 0x8
   451  004E                     	ds	1
   452  004F                     checkKeys@key2Status:	
   453                           
   454                           ; 1 bytes @ 0x9
   455  004F                     	ds	1
   456  0050                     checkKeys@key3Status:	
   457                           
   458                           ; 1 bytes @ 0xA
   459  0050                     	ds	1
   460                           
   461                           	psect	maintext
   462  020F                     __pmaintext:	
   463 ;;
   464 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   465 ;;
   466 ;; *************** function _main *****************
   467 ;; Defined at:
   468 ;;		line 244 in file "E:\project\project0508\scm\uf166fan\main.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;		None
   471 ;; Auto vars:     Size  Location     Type
   472 ;;		None
   473 ;; Return value:  Size  Location     Type
   474 ;;                  1    wreg      void 
   475 ;; Registers used:
   476 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   477 ;; Tracked objects:
   478 ;;		On entry : B00/0
   479 ;;		On exit  : 300/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMMON   BANK0   BANK1
   482 ;;      Params:         0       0       0
   483 ;;      Locals:         0       0       0
   484 ;;      Temps:          0       0       0
   485 ;;      Totals:         0       0       0
   486 ;;Total ram usage:        0 bytes
   487 ;; Hardware stack levels required when called:    7
   488 ;; This function calls:
   489 ;;		_Init_Config
   490 ;;		_Sleep_Mode
   491 ;;		_checkKeys
   492 ;;		_checkUsbStatus
   493 ;;		_readVrefADC
   494 ;;		_scanKeys
   495 ;; This function is called by:
   496 ;;		Startup code after reset
   497 ;; This function uses a non-reentrant model
   498 ;;
   499                           
   500                           
   501                           ;psect for function _main
   502  020F                     _main:	
   503                           
   504                           ;main.c: 245: Sleep_Mode();
   505                           
   506                           ;incstack = 0
   507                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   508  020F  2230               	fcall	_Sleep_Mode
   509                           
   510                           ;main.c: 246: Init_Config();
   511  0210  2348               	fcall	_Init_Config
   512  0211                     l3480:	
   513                           
   514                           ;main.c: 249: if (time0Flag) {
   515  0211  0879               	movf	_time0Flag,w
   516  0212  1903               	btfsc	3,2
   517  0213  2A1A               	goto	l3490
   518  0214  0064               	clrwdt	;# 
   519                           
   520                           ;main.c: 251: time0Flag = 0;
   521  0215  01F9               	clrf	_time0Flag
   522                           
   523                           ;main.c: 252: scanKeys();
   524  0216  22ED               	fcall	_scanKeys
   525                           
   526                           ;main.c: 253: count10Ms++;
   527  0217  0AAA               	incf	_count10Ms,f
   528  0218  1903               	skipnz
   529  0219  0AAB               	incf	_count10Ms+1,f
   530  021A                     l3490:	
   531                           
   532                           ;main.c: 254: }
   533                           ;main.c: 257: if (count10Ms == 100) {
   534  021A  3064               	movlw	100
   535  021B  1283               	bcf	3,5	;RP0=0, select bank0
   536  021C  062A               	xorwf	_count10Ms,w
   537  021D  042B               	iorwf	_count10Ms+1,w
   538  021E  1D03               	btfss	3,2
   539  021F  2A26               	goto	l3500
   540                           
   541                           ;main.c: 258: checkKeys();
   542  0220  21ED               	fcall	_checkKeys
   543                           
   544                           ;main.c: 259: count10Ms = 0;
   545  0221  1283               	bcf	3,5	;RP0=0, select bank0
   546  0222  01AA               	clrf	_count10Ms
   547  0223  01AB               	clrf	_count10Ms+1
   548                           
   549                           ;main.c: 261: checkUsbStatus();
   550  0224  22A8               	fcall	_checkUsbStatus
   551                           
   552                           ;main.c: 263: readVrefADC();
   553  0225  236C               	fcall	_readVrefADC
   554  0226                     l3500:	
   555                           
   556                           ;main.c: 264: }
   557                           ;main.c: 266: if (countTime == 1000) {
   558  0226  30E8               	movlw	232
   559  0227  062C               	xorwf	_countTime,w
   560  0228  3003               	movlw	3
   561  0229  1903               	skipnz
   562  022A  062D               	xorwf	_countTime+1,w
   563  022B  1D03               	btfss	3,2
   564  022C  2A11               	goto	l3480
   565                           
   566                           ;main.c: 267: countTime = 0;
   567  022D  01AC               	clrf	_countTime
   568  022E  01AD               	clrf	_countTime+1
   569  022F  2A11               	goto	l3480
   570  0230                     __end_of_main:	
   571                           
   572                           	psect	text1
   573  02ED                     __ptext1:	
   574 ;; *************** function _scanKeys *****************
   575 ;; Defined at:
   576 ;;		line 202 in file "E:\project\project0508\scm\uf166fan\main.c"
   577 ;; Parameters:    Size  Location     Type
   578 ;;		None
   579 ;; Auto vars:     Size  Location     Type
   580 ;;		None
   581 ;; Return value:  Size  Location     Type
   582 ;;                  1    wreg      void 
   583 ;; Registers used:
   584 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   585 ;; Tracked objects:
   586 ;;		On entry : 0/100
   587 ;;		On exit  : B00/0
   588 ;;		Unchanged: 0/0
   589 ;; Data sizes:     COMMON   BANK0   BANK1
   590 ;;      Params:         0       0       0
   591 ;;      Locals:         0       0       0
   592 ;;      Temps:          0       0       0
   593 ;;      Totals:         0       0       0
   594 ;;Total ram usage:        0 bytes
   595 ;; Hardware stack levels used:    1
   596 ;; Hardware stack levels required when called:    4
   597 ;; This function calls:
   598 ;;		_sacnKeyInput
   599 ;; This function is called by:
   600 ;;		_main
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604                           
   605                           ;psect for function _scanKeys
   606  02ED                     _scanKeys:	
   607                           
   608                           ;main.c: 203: key1.key_addr_result = key2.key_addr_result = key3.key_addr_result = PORTB
      +                          ;
   609                           
   610                           ;incstack = 0
   611                           ; Regs used in _scanKeys: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   612  02ED  1283               	bcf	3,5	;RP0=0, select bank0
   613  02EE  1303               	bcf	3,6	;RP1=0, select bank0
   614  02EF  0806               	movf	6,w	;volatile
   615  02F0  00B6               	movwf	_key3+5
   616  02F1  00BD               	movwf	_key2+5
   617  02F2  00C4               	movwf	_key1+5
   618                           
   619                           ;main.c: 204: sacnKeyInput(&key1);
   620  02F3  303F               	movlw	(low (_key1| 0))& (0+255)
   621  02F4  226E               	fcall	_sacnKeyInput
   622                           
   623                           ;main.c: 205: sacnKeyInput(&key2);
   624  02F5  3038               	movlw	(low (_key2| 0))& (0+255)
   625  02F6  226E               	fcall	_sacnKeyInput
   626                           
   627                           ;main.c: 206: sacnKeyInput(&key3);
   628  02F7  3031               	movlw	(low (_key3| 0))& (0+255)
   629  02F8  226E               	fcall	_sacnKeyInput
   630                           
   631                           ;main.c: 207: countTime++;
   632  02F9  1283               	bcf	3,5	;RP0=0, select bank0
   633  02FA  1303               	bcf	3,6	;RP1=0, select bank0
   634  02FB  0AAC               	incf	_countTime,f
   635  02FC  1903               	skipnz
   636  02FD  0AAD               	incf	_countTime+1,f
   637  02FE  0008               	return
   638  02FF                     __end_of_scanKeys:	
   639                           
   640                           	psect	text2
   641  026E                     __ptext2:	
   642 ;; *************** function _sacnKeyInput *****************
   643 ;; Defined at:
   644 ;;		line 3 in file "E:\project\project0508\scm\uf166fan\scankey.c"
   645 ;; Parameters:    Size  Location     Type
   646 ;;  key             1    wreg     PTR struct Keys
   647 ;;		 -> key3(7), key2(7), key1(7), 
   648 ;; Auto vars:     Size  Location     Type
   649 ;;  key             1    6[COMMON] PTR struct Keys
   650 ;;		 -> key3(7), key2(7), key1(7), 
   651 ;; Return value:  Size  Location     Type
   652 ;;                  1    wreg      void 
   653 ;; Registers used:
   654 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   655 ;; Tracked objects:
   656 ;;		On entry : 0/0
   657 ;;		On exit  : 800/0
   658 ;;		Unchanged: 0/0
   659 ;; Data sizes:     COMMON   BANK0   BANK1
   660 ;;      Params:         0       0       0
   661 ;;      Locals:         1       0       0
   662 ;;      Temps:          2       0       0
   663 ;;      Totals:         3       0       0
   664 ;;Total ram usage:        3 bytes
   665 ;; Hardware stack levels used:    1
   666 ;; Hardware stack levels required when called:    3
   667 ;; This function calls:
   668 ;;		Nothing
   669 ;; This function is called by:
   670 ;;		_scanKeys
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           
   675                           ;psect for function _sacnKeyInput
   676  026E                     _sacnKeyInput:	
   677                           
   678                           ;incstack = 0
   679                           ; Regs used in _sacnKeyInput: [wreg-fsr0h+status,2+status,0]
   680                           ;sacnKeyInput@key stored from wreg
   681  026E  00F6               	movwf	sacnKeyInput@key
   682                           
   683                           ;scankey.c: 4: key->key_input = ((key->key_addr_result) >> (key->key_index)&1);
   684  026F  3E05               	addlw	5
   685  0270  0084               	movwf	4
   686  0271  1383               	bcf	3,7	;select IRP bank0
   687  0272  0800               	movf	0,w
   688  0273  00F4               	movwf	??_sacnKeyInput
   689  0274  0876               	movf	sacnKeyInput@key,w
   690  0275  3E06               	addlw	6
   691  0276  0084               	movwf	4
   692  0277  0A00               	incf	0,w
   693  0278  2A7B               	goto	u664
   694  0279                     u665:	
   695  0279  1003               	clrc
   696  027A  0CF4               	rrf	??_sacnKeyInput,f
   697  027B                     u664:	
   698  027B  3EFF               	addlw	-1
   699  027C  1D03               	skipz
   700  027D  2A79               	goto	u665
   701  027E  0874               	movf	??_sacnKeyInput,w
   702  027F  00F5               	movwf	??_sacnKeyInput+1
   703  0280  0876               	movf	sacnKeyInput@key,w
   704  0281  3E04               	addlw	4
   705  0282  0084               	movwf	4
   706  0283  0875               	movf	??_sacnKeyInput+1,w
   707  0284  0080               	movwf	0
   708  0285  0876               	movf	sacnKeyInput@key,w
   709  0286  3E04               	addlw	4
   710  0287  0084               	movwf	4
   711  0288  3001               	movlw	1
   712  0289  0580               	andwf	0,f
   713  028A  0008               	return
   714  028B                     __end_of_sacnKeyInput:	
   715                           
   716                           	psect	text3
   717  036C                     __ptext3:	
   718 ;; *************** function _readVrefADC *****************
   719 ;; Defined at:
   720 ;;		line 90 in file "E:\project\project0508\scm\uf166fan\adc.c"
   721 ;; Parameters:    Size  Location     Type
   722 ;;		None
   723 ;; Auto vars:     Size  Location     Type
   724 ;;  result          1    0        unsigned char 
   725 ;; Return value:  Size  Location     Type
   726 ;;                  1    wreg      unsigned char 
   727 ;; Registers used:
   728 ;;		wreg, status,2, status,0, pclath, cstack
   729 ;; Tracked objects:
   730 ;;		On entry : 300/0
   731 ;;		On exit  : 300/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMMON   BANK0   BANK1
   734 ;;      Params:         0       0       0
   735 ;;      Locals:         0       1       0
   736 ;;      Temps:          0       0       0
   737 ;;      Totals:         0       1       0
   738 ;;Total ram usage:        1 bytes
   739 ;; Hardware stack levels used:    1
   740 ;; Hardware stack levels required when called:    4
   741 ;; This function calls:
   742 ;;		_ADC_Result
   743 ;;		_ADC_Sample
   744 ;;		_DelayXms
   745 ;; This function is called by:
   746 ;;		_main
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750                           
   751                           ;psect for function _readVrefADC
   752  036C                     _readVrefADC:	
   753                           
   754                           ;adc.c: 92: DelayXms(1);
   755                           
   756                           ;incstack = 0
   757                           ; Regs used in _readVrefADC: [wreg+status,2+status,0+pclath+cstack]
   758  036C  3001               	movlw	1
   759  036D  233D               	fcall	_DelayXms
   760                           
   761                           ;adc.c: 93: ADC_Sample(15);
   762  036E  300F               	movlw	15
   763  036F  2019               	fcall	_ADC_Sample
   764  0370  300F               	movlw	15
   765  0371  2A8B               	ljmp	_ADC_Result
   766  0372                     __end_of_readVrefADC:	
   767                           
   768                           	psect	text4
   769  033D                     __ptext4:	
   770 ;; *************** function _DelayXms *****************
   771 ;; Defined at:
   772 ;;		line 82 in file "E:\project\project0508\scm\uf166fan\adc.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;  x               1    wreg     unsigned char 
   775 ;; Auto vars:     Size  Location     Type
   776 ;;  x               1    4[COMMON] unsigned char 
   777 ;;  j               1    6[COMMON] unsigned char 
   778 ;;  i               1    5[COMMON] unsigned char 
   779 ;; Return value:  Size  Location     Type
   780 ;;                  1    wreg      void 
   781 ;; Registers used:
   782 ;;		wreg, status,2, status,0
   783 ;; Tracked objects:
   784 ;;		On entry : 300/0
   785 ;;		On exit  : 300/0
   786 ;;		Unchanged: 300/0
   787 ;; Data sizes:     COMMON   BANK0   BANK1
   788 ;;      Params:         0       0       0
   789 ;;      Locals:         3       0       0
   790 ;;      Temps:          0       0       0
   791 ;;      Totals:         3       0       0
   792 ;;Total ram usage:        3 bytes
   793 ;; Hardware stack levels used:    1
   794 ;; Hardware stack levels required when called:    3
   795 ;; This function calls:
   796 ;;		Nothing
   797 ;; This function is called by:
   798 ;;		_readVrefADC
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           
   803                           ;psect for function _DelayXms
   804  033D                     _DelayXms:	
   805                           
   806                           ;incstack = 0
   807                           ; Regs used in _DelayXms: [wreg+status,2+status,0]
   808                           ;DelayXms@x stored from wreg
   809  033D  00F4               	movwf	DelayXms@x
   810                           
   811                           ;adc.c: 84: unsigned char i,j;
   812                           ;adc.c: 85: for(i=x;i>0;i--)
   813  033E  00F5               	movwf	DelayXms@i
   814  033F                     l3422:	
   815  033F  0875               	movf	DelayXms@i,w
   816  0340  1903               	btfsc	3,2
   817  0341  0008               	return
   818                           
   819                           ;adc.c: 86: for(j=153;j>0;j--);
   820  0342  3099               	movlw	153
   821  0343  00F6               	movwf	DelayXms@j
   822  0344                     l3432:	
   823  0344  0BF6               	decfsz	DelayXms@j,f
   824  0345  2B44               	goto	l3432
   825  0346  03F5               	decf	DelayXms@i,f
   826  0347  2B3F               	goto	l3422
   827  0348                     __end_of_DelayXms:	
   828                           
   829                           	psect	text5
   830  0019                     __ptext5:	
   831 ;; *************** function _ADC_Sample *****************
   832 ;; Defined at:
   833 ;;		line 11 in file "E:\project\project0508\scm\uf166fan\adc.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;  adch            1    wreg     unsigned char 
   836 ;; Auto vars:     Size  Location     Type
   837 ;;  adch            1    4[BANK0 ] unsigned char 
   838 ;;  ad_temp         2    6[BANK0 ] volatile unsigned int 
   839 ;;  i               1    5[BANK0 ] unsigned char 
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, status,2, status,0
   844 ;; Tracked objects:
   845 ;;		On entry : 300/0
   846 ;;		On exit  : 300/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMMON   BANK0   BANK1
   849 ;;      Params:         0       0       0
   850 ;;      Locals:         0       4       0
   851 ;;      Temps:          0       4       0
   852 ;;      Totals:         0       8       0
   853 ;;Total ram usage:        8 bytes
   854 ;; Hardware stack levels used:    1
   855 ;; Hardware stack levels required when called:    3
   856 ;; This function calls:
   857 ;;		Nothing
   858 ;; This function is called by:
   859 ;;		_readVrefADC
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           
   864                           ;psect for function _ADC_Sample
   865  0019                     _ADC_Sample:	
   866                           
   867                           ;incstack = 0
   868                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
   869                           ;ADC_Sample@adch stored from wreg
   870  0019  00CA               	movwf	ADC_Sample@adch
   871                           
   872                           ;adc.c: 13: static unsigned long adsum = 0;
   873                           ;adc.c: 14: static unsigned int admin = 0,admax = 0;
   874                           ;adc.c: 15: static unsigned char adtimes = 0;
   875                           ;adc.c: 16: volatile unsigned int ad_temp;
   876                           ;adc.c: 17: ADCON1 = 0;
   877  001A  1683               	bsf	3,5	;RP0=1, select bank1
   878  001B  019F               	clrf	31	;volatile
   879                           
   880                           ;adc.c: 18: ADCON0 = 0X41 | (adch << 2);
   881  001C  1283               	bcf	3,5	;RP0=0, select bank0
   882  001D  084A               	movf	ADC_Sample@adch,w
   883  001E  00C6               	movwf	??_ADC_Sample
   884  001F  3001               	movlw	1
   885  0020  1003               	clrc
   886  0021                     L1:	
   887  0021  0DC6               	rlf	??_ADC_Sample,f
   888  0022  3EFF               	addlw	-1
   889  0023  1003               	clrc
   890  0024  1D03               	skipz
   891  0025  2821               	goto	L1
   892  0026  0D46               	rlf	??_ADC_Sample,w
   893  0027  3841               	iorlw	65
   894  0028  009F               	movwf	31	;volatile
   895  0029  0000               	nop	;# 
   896  002A  0000               	nop	;# 
   897                           
   898                           ;adc.c: 21: GODONE = 1;
   899  002B  1283               	bcf	3,5	;RP0=0, select bank0
   900  002C  1303               	bcf	3,6	;RP1=0, select bank0
   901  002D  149F               	bsf	31,1	;volatile
   902                           
   903                           ;adc.c: 23: unsigned char i = 0;
   904  002E  01CB               	clrf	ADC_Sample@i
   905  002F                     l1785:	
   906                           ;adc.c: 24: while(GODONE)
   907                           
   908  002F  1C9F               	btfss	31,1	;volatile
   909  0030  2834               	goto	l3374
   910                           
   911                           ;adc.c: 25: {
   912                           ;adc.c: 26: if(0 == (--i))
   913  0031  0BCB               	decfsz	ADC_Sample@i,f
   914  0032  282F               	goto	l1785
   915  0033  0008               	return
   916  0034                     l3374:	
   917                           
   918                           ;adc.c: 28: }
   919                           ;adc.c: 30: ad_temp=(ADRESH<<4)+(ADRESL>>4);
   920  0034  081E               	movf	30,w	;volatile
   921  0035  00CC               	movwf	ADC_Sample@ad_temp	;volatile
   922  0036  01CD               	clrf	ADC_Sample@ad_temp+1	;volatile
   923  0037  0ECC               	swapf	ADC_Sample@ad_temp,f	;volatile
   924  0038  0ECD               	swapf	ADC_Sample@ad_temp+1,f	;volatile
   925  0039  30F0               	movlw	240
   926  003A  05CD               	andwf	ADC_Sample@ad_temp+1,f	;volatile
   927  003B  084C               	movf	ADC_Sample@ad_temp,w	;volatile
   928  003C  390F               	andlw	15
   929  003D  04CD               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
   930  003E  30F0               	movlw	240
   931  003F  05CC               	andwf	ADC_Sample@ad_temp,f	;volatile
   932  0040  1683               	bsf	3,5	;RP0=1, select bank1
   933  0041  0E1E               	swapf	30,w	;volatile
   934  0042  390F               	andlw	15
   935  0043  1283               	bcf	3,5	;RP0=0, select bank0
   936  0044  07CC               	addwf	ADC_Sample@ad_temp,f	;volatile
   937  0045  1803               	skipnc
   938  0046  0ACD               	incf	ADC_Sample@ad_temp+1,f	;volatile
   939                           
   940                           ;adc.c: 32: if(0 == admax)
   941  0047  0824               	movf	ADC_Sample@admax,w
   942  0048  0425               	iorwf	ADC_Sample@admax+1,w
   943  0049  1D03               	btfss	3,2
   944  004A  284D               	goto	l3382
   945                           
   946                           ;adc.c: 33: {
   947                           ;adc.c: 34: admax = ad_temp;
   948  004B  20BE               	fcall	PL20	;call to abstracted procedure
   949  004C  285F               	goto	l3388
   950  004D                     l3382:	
   951                           ;adc.c: 36: }
   952                           
   953                           ;adc.c: 35: admin = ad_temp;
   954                           
   955                           
   956                           ;adc.c: 37: else if(ad_temp > admax)
   957  004D  084D               	movf	ADC_Sample@ad_temp+1,w	;volatile
   958  004E  0225               	subwf	ADC_Sample@admax+1,w
   959  004F  1D03               	skipz
   960  0050  2853               	goto	u1205
   961  0051  084C               	movf	ADC_Sample@ad_temp,w	;volatile
   962  0052  0224               	subwf	ADC_Sample@admax,w
   963  0053                     u1205:	
   964  0053  1803               	skipnc
   965  0054  2857               	goto	l3386
   966                           
   967                           ;adc.c: 38: admax = ad_temp;
   968  0055  20BE               	fcall	PL20	;call to abstracted procedure
   969  0056  2863               	goto	l1791
   970  0057                     l3386:	
   971                           
   972                           ;adc.c: 39: else if(ad_temp < admin)
   973  0057  0827               	movf	ADC_Sample@admin+1,w
   974  0058  024D               	subwf	ADC_Sample@ad_temp+1,w	;volatile
   975  0059  1D03               	skipz
   976  005A  285D               	goto	u1215
   977  005B  0826               	movf	ADC_Sample@admin,w
   978  005C  024C               	subwf	ADC_Sample@ad_temp,w	;volatile
   979  005D                     u1215:	
   980  005D  1803               	skipnc
   981  005E  2863               	goto	l1791
   982  005F                     l3388:	
   983                           
   984                           ;adc.c: 40: admin = ad_temp;
   985  005F  084D               	movf	ADC_Sample@ad_temp+1,w	;volatile
   986  0060  00A7               	movwf	ADC_Sample@admin+1
   987  0061  084C               	movf	ADC_Sample@ad_temp,w	;volatile
   988  0062  00A6               	movwf	ADC_Sample@admin
   989  0063                     l1791:	
   990                           
   991                           ;adc.c: 42: adsum += ad_temp;
   992  0063  084C               	movf	ADC_Sample@ad_temp,w	;volatile
   993  0064  00C6               	movwf	??_ADC_Sample
   994  0065  084D               	movf	ADC_Sample@ad_temp+1,w	;volatile
   995  0066  00C7               	movwf	??_ADC_Sample+1
   996  0067  01C8               	clrf	??_ADC_Sample+2
   997  0068  01C9               	clrf	??_ADC_Sample+3
   998  0069  0846               	movf	??_ADC_Sample,w
   999  006A  07A0               	addwf	ADC_Sample@adsum,f
  1000  006B  0847               	movf	??_ADC_Sample+1,w
  1001  006C  1103               	clrz
  1002  006D  1803               	skipnc
  1003  006E  3E01               	addlw	1
  1004  006F  1D03               	btfss	3,2
  1005  0070  07A1               	addwf	ADC_Sample@adsum+1,f
  1006  0071  0848               	movf	??_ADC_Sample+2,w
  1007  0072  1103               	clrz
  1008  0073  1803               	skipnc
  1009  0074  3E01               	addlw	1
  1010  0075  1D03               	btfss	3,2
  1011  0076  07A2               	addwf	ADC_Sample@adsum+2,f
  1012  0077  0849               	movf	??_ADC_Sample+3,w
  1013  0078  1103               	clrz
  1014  0079  1803               	skipnc
  1015  007A  3E01               	addlw	1
  1016  007B  1D03               	btfss	3,2
  1017  007C  07A3               	addwf	ADC_Sample@adsum+3,f
  1018                           
  1019                           ;adc.c: 43: if(++adtimes >= 10)
  1020  007D  300A               	movlw	10
  1021  007E  0AB0               	incf	ADC_Sample@adtimes,f
  1022  007F  0230               	subwf	ADC_Sample@adtimes,w
  1023  0080  1C03               	skipc
  1024  0081  0008               	return
  1025                           
  1026                           ;adc.c: 44: {
  1027                           ;adc.c: 45: adsum -= admax;
  1028  0082  0824               	movf	ADC_Sample@admax,w
  1029  0083  00C6               	movwf	??_ADC_Sample
  1030  0084  0825               	movf	ADC_Sample@admax+1,w
  1031  0085  20AF               	fcall	PL4	;call to abstracted procedure
  1032  0086  1C03               	skipc
  1033  0087  0F49               	incfsz	??_ADC_Sample+3,w
  1034  0088  02A3               	subwf	ADC_Sample@adsum+3,f
  1035                           
  1036                           ;adc.c: 46: adsum -= admin;
  1037  0089  0826               	movf	ADC_Sample@admin,w
  1038  008A  00C6               	movwf	??_ADC_Sample
  1039  008B  0827               	movf	ADC_Sample@admin+1,w
  1040  008C  20AF               	fcall	PL4	;call to abstracted procedure
  1041  008D  1C03               	skipc
  1042  008E  0F49               	incfsz	??_ADC_Sample+3,w
  1043  008F  02A3               	subwf	ADC_Sample@adsum+3,f
  1044                           
  1045                           ;adc.c: 48: adresult = adsum >> 3;
  1046  0090  0820               	movf	ADC_Sample@adsum,w
  1047  0091  00C6               	movwf	??_ADC_Sample
  1048  0092  0821               	movf	ADC_Sample@adsum+1,w
  1049  0093  00C7               	movwf	??_ADC_Sample+1
  1050  0094  0822               	movf	ADC_Sample@adsum+2,w
  1051  0095  00C8               	movwf	??_ADC_Sample+2
  1052  0096  0823               	movf	ADC_Sample@adsum+3,w
  1053  0097  00C9               	movwf	??_ADC_Sample+3
  1054  0098  3003               	movlw	3
  1055  0099                     u1265:	
  1056  0099  1003               	clrc
  1057  009A  0CC9               	rrf	??_ADC_Sample+3,f
  1058  009B  0CC8               	rrf	??_ADC_Sample+2,f
  1059  009C  0CC7               	rrf	??_ADC_Sample+1,f
  1060  009D  0CC6               	rrf	??_ADC_Sample,f
  1061  009E  3EFF               	addlw	-1
  1062  009F  1D03               	skipz
  1063  00A0  2899               	goto	u1265
  1064  00A1  0847               	movf	??_ADC_Sample+1,w
  1065  00A2  00AF               	movwf	_adresult+1	;volatile
  1066  00A3  0846               	movf	??_ADC_Sample,w
  1067  00A4  00AE               	movwf	_adresult	;volatile
  1068                           
  1069                           ;adc.c: 50: adsum = 0;
  1070  00A5  01A0               	clrf	ADC_Sample@adsum
  1071  00A6  01A1               	clrf	ADC_Sample@adsum+1
  1072  00A7  01A2               	clrf	ADC_Sample@adsum+2
  1073  00A8  01A3               	clrf	ADC_Sample@adsum+3
  1074                           
  1075                           ;adc.c: 51: admin = 0;
  1076  00A9  01A6               	clrf	ADC_Sample@admin
  1077  00AA  01A7               	clrf	ADC_Sample@admin+1
  1078                           
  1079                           ;adc.c: 52: admax = 0;
  1080  00AB  01A4               	clrf	ADC_Sample@admax
  1081  00AC  01A5               	clrf	ADC_Sample@admax+1
  1082                           
  1083                           ;adc.c: 53: adtimes = 0;
  1084  00AD  01B0               	clrf	ADC_Sample@adtimes
  1085  00AE  0008               	return
  1086  00AF                     __end_of_ADC_Sample:	
  1087  00AF                     PL4:	
  1088  00AF  00C7               	movwf	??_ADC_Sample+1
  1089  00B0  01C8               	clrf	??_ADC_Sample+2
  1090  00B1  01C9               	clrf	??_ADC_Sample+3
  1091  00B2  0846               	movf	??_ADC_Sample,w
  1092  00B3  02A0               	subwf	ADC_Sample@adsum,f
  1093  00B4  0847               	movf	??_ADC_Sample+1,w
  1094  00B5  1C03               	skipc
  1095  00B6  0F47               	incfsz	??_ADC_Sample+1,w
  1096  00B7  02A1               	subwf	ADC_Sample@adsum+1,f
  1097  00B8  0848               	movf	??_ADC_Sample+2,w
  1098  00B9  1C03               	skipc
  1099  00BA  0F48               	incfsz	??_ADC_Sample+2,w
  1100  00BB  02A2               	subwf	ADC_Sample@adsum+2,f
  1101  00BC  0849               	movf	??_ADC_Sample+3,w
  1102  00BD  0008               	return
  1103  00BE                     __end_ofPL4:	
  1104  00BE                     PL20:	
  1105  00BE  084D               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1106  00BF  00A5               	movwf	ADC_Sample@admax+1
  1107  00C0  084C               	movf	ADC_Sample@ad_temp,w	;volatile
  1108  00C1  00A4               	movwf	ADC_Sample@admax
  1109  00C2  0008               	return
  1110  00C3                     __end_ofPL20:	
  1111                           
  1112                           	psect	text6
  1113  028B                     __ptext6:	
  1114 ;; *************** function _ADC_Result *****************
  1115 ;; Defined at:
  1116 ;;		line 59 in file "E:\project\project0508\scm\uf166fan\adc.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;  adch            1    wreg     unsigned char 
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;  adch            1    5[COMMON] unsigned char 
  1121 ;;  i               1    6[COMMON] unsigned char 
  1122 ;; Return value:  Size  Location     Type
  1123 ;;                  1    wreg      unsigned char 
  1124 ;; Registers used:
  1125 ;;		wreg, status,2, status,0
  1126 ;; Tracked objects:
  1127 ;;		On entry : 300/0
  1128 ;;		On exit  : 300/0
  1129 ;;		Unchanged: 0/0
  1130 ;; Data sizes:     COMMON   BANK0   BANK1
  1131 ;;      Params:         0       0       0
  1132 ;;      Locals:         2       0       0
  1133 ;;      Temps:          1       0       0
  1134 ;;      Totals:         3       0       0
  1135 ;;Total ram usage:        3 bytes
  1136 ;; Hardware stack levels used:    1
  1137 ;; Hardware stack levels required when called:    3
  1138 ;; This function calls:
  1139 ;;		Nothing
  1140 ;; This function is called by:
  1141 ;;		_readVrefADC
  1142 ;; This function uses a non-reentrant model
  1143 ;;
  1144                           
  1145                           
  1146                           ;psect for function _ADC_Result
  1147  028B                     _ADC_Result:	
  1148                           
  1149                           ;incstack = 0
  1150                           ; Regs used in _ADC_Result: [wreg+status,2+status,0]
  1151                           ;ADC_Result@adch stored from wreg
  1152  028B  00F5               	movwf	ADC_Result@adch
  1153                           
  1154                           ;adc.c: 61: ADCON1 = 0;
  1155  028C  1683               	bsf	3,5	;RP0=1, select bank1
  1156  028D  019F               	clrf	31	;volatile
  1157                           
  1158                           ;adc.c: 62: ADCON0 = 0X41 | (adch << 2);
  1159  028E  0875               	movf	ADC_Result@adch,w
  1160  028F  00F4               	movwf	??_ADC_Result
  1161  0290  3001               	movlw	1
  1162  0291  1003               	clrc
  1163  0292                     L2:	
  1164  0292  0DF4               	rlf	??_ADC_Result,f
  1165  0293  3EFF               	addlw	-1
  1166  0294  1003               	clrc
  1167  0295  1D03               	skipz
  1168  0296  2A92               	goto	L2
  1169  0297  0D74               	rlf	??_ADC_Result,w
  1170  0298  3841               	iorlw	65
  1171  0299  1283               	bcf	3,5	;RP0=0, select bank0
  1172  029A  009F               	movwf	31	;volatile
  1173  029B  0000               	nop	;# 
  1174  029C  0000               	nop	;# 
  1175                           
  1176                           ;adc.c: 65: GODONE = 1;
  1177  029D  1283               	bcf	3,5	;RP0=0, select bank0
  1178  029E  1303               	bcf	3,6	;RP1=0, select bank0
  1179  029F  149F               	bsf	31,1	;volatile
  1180                           
  1181                           ;adc.c: 67: unsigned char i = 0;
  1182  02A0  01F6               	clrf	ADC_Result@i
  1183  02A1                     l1798:	
  1184                           ;adc.c: 68: while(GODONE)
  1185                           
  1186  02A1  1C9F               	btfss	31,1	;volatile
  1187  02A2  2AA6               	goto	l3416
  1188                           
  1189                           ;adc.c: 69: {
  1190                           ;adc.c: 70: if(0 == (--i))
  1191  02A3  0BF6               	decfsz	ADC_Result@i,f
  1192  02A4  2AA1               	goto	l1798
  1193                           
  1194                           ;adc.c: 71: return 0;
  1195  02A5  3400               	retlw	0
  1196  02A6                     l3416:	
  1197                           
  1198                           ;adc.c: 72: }
  1199                           ;adc.c: 73: return ADRESH;
  1200  02A6  081E               	movf	30,w	;volatile
  1201  02A7  0008               	return
  1202  02A8                     __end_of_ADC_Result:	
  1203                           
  1204                           	psect	text7
  1205  02A8                     __ptext7:	
  1206 ;; *************** function _checkUsbStatus *****************
  1207 ;; Defined at:
  1208 ;;		line 37 in file "E:\project\project0508\scm\uf166fan\main.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;		None
  1211 ;; Auto vars:     Size  Location     Type
  1212 ;;		None
  1213 ;; Return value:  Size  Location     Type
  1214 ;;                  1    wreg      void 
  1215 ;; Registers used:
  1216 ;;		wreg, status,2, status,0
  1217 ;; Tracked objects:
  1218 ;;		On entry : 300/0
  1219 ;;		On exit  : 300/0
  1220 ;;		Unchanged: 0/0
  1221 ;; Data sizes:     COMMON   BANK0   BANK1
  1222 ;;      Params:         0       0       0
  1223 ;;      Locals:         0       0       0
  1224 ;;      Temps:          1       0       0
  1225 ;;      Totals:         1       0       0
  1226 ;;Total ram usage:        1 bytes
  1227 ;; Hardware stack levels used:    1
  1228 ;; Hardware stack levels required when called:    3
  1229 ;; This function calls:
  1230 ;;		Nothing
  1231 ;; This function is called by:
  1232 ;;		_main
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235                           
  1236                           
  1237                           ;psect for function _checkUsbStatus
  1238  02A8                     _checkUsbStatus:	
  1239                           
  1240                           ;main.c: 38: if (((PORTB) >> (2)&1) == 1) {
  1241                           
  1242                           ;incstack = 0
  1243                           ; Regs used in _checkUsbStatus: [wreg+status,2+status,0]
  1244  02A8  0806               	movf	6,w	;volatile
  1245  02A9  00F4               	movwf	??_checkUsbStatus
  1246  02AA  1003               	clrc
  1247  02AB  0CF4               	rrf	??_checkUsbStatus,f
  1248  02AC  1003               	clrc
  1249  02AD  0CF4               	rrf	??_checkUsbStatus,f
  1250  02AE  1C74               	btfss	??_checkUsbStatus,0
  1251  02AF  2AC2               	goto	l579
  1252                           
  1253                           ;main.c: 39: if (((PORTB) >> (1)&1) == 1) {
  1254  02B0  0806               	movf	6,w	;volatile
  1255  02B1  00F4               	movwf	??_checkUsbStatus
  1256  02B2  1003               	clrc
  1257  02B3  0CF4               	rrf	??_checkUsbStatus,f
  1258  02B4  1C74               	btfss	??_checkUsbStatus,0
  1259  02B5  2AB8               	goto	l3052
  1260                           
  1261                           ;main.c: 41: PORTA&=~(1<<0);
  1262  02B6  1005               	bcf	5,0	;volatile
  1263                           
  1264                           ;main.c: 42: } else if (countTime == 1000) {
  1265  02B7  0008               	return
  1266  02B8                     l3052:	
  1267  02B8  30E8               	movlw	232
  1268  02B9  062C               	xorwf	_countTime,w
  1269  02BA  3003               	movlw	3
  1270  02BB  1903               	skipnz
  1271  02BC  062D               	xorwf	_countTime+1,w
  1272  02BD  1D03               	btfss	3,2
  1273  02BE  0008               	return
  1274                           
  1275                           ;main.c: 44: PORTA^=(1<<0);
  1276  02BF  3001               	movlw	1
  1277  02C0  0685               	xorwf	5,f	;volatile
  1278  02C1  0008               	return
  1279  02C2                     l579:	
  1280                           
  1281                           ;main.c: 48: PORTA|=(1<<0);
  1282  02C2  1405               	bsf	5,0	;volatile
  1283  02C3  0008               	return
  1284  02C4                     __end_of_checkUsbStatus:	
  1285                           
  1286                           	psect	text8
  1287  01ED                     __ptext8:	
  1288 ;; *************** function _checkKeys *****************
  1289 ;; Defined at:
  1290 ;;		line 212 in file "E:\project\project0508\scm\uf166fan\main.c"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;		None
  1293 ;; Auto vars:     Size  Location     Type
  1294 ;;  key3Status      1   10[BANK0 ] unsigned char 
  1295 ;;  key2Status      1    9[BANK0 ] unsigned char 
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      void 
  1298 ;; Registers used:
  1299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1300 ;; Tracked objects:
  1301 ;;		On entry : 300/0
  1302 ;;		On exit  : 200/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMMON   BANK0   BANK1
  1305 ;;      Params:         0       0       0
  1306 ;;      Locals:         0       2       0
  1307 ;;      Temps:          0       0       0
  1308 ;;      Totals:         0       2       0
  1309 ;;Total ram usage:        2 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    6
  1312 ;; This function calls:
  1313 ;;		_checkFan
  1314 ;;		_closeFan
  1315 ;;		_key_driver
  1316 ;;		_setFanLevel
  1317 ;; This function is called by:
  1318 ;;		_main
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           
  1323                           ;psect for function _checkKeys
  1324  01ED                     _checkKeys:	
  1325                           
  1326                           ;main.c: 213: if (key_driver(&key1) == 1) {
  1327                           
  1328                           ;incstack = 0
  1329                           ; Regs used in _checkKeys: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1330  01ED  303F               	movlw	(low (_key1| 0))& (0+255)
  1331  01EE  2108               	fcall	_key_driver
  1332  01EF  3A01               	xorlw	1
  1333  01F0  1D03               	skipz
  1334  01F1  29F8               	goto	l3454
  1335                           
  1336                           ;main.c: 216: if (FAN_STATUS == 1) {
  1337  01F2  0B77               	decfsz	_FAN_STATUS,w
  1338  01F3  29F5               	goto	l3446
  1339                           
  1340                           ;main.c: 218: closeFan();
  1341  01F4  2B2F               	ljmp	l2820
  1342  01F5                     l3446:	
  1343                           ;main.c: 219: } else {
  1344                           
  1345                           
  1346                           ;main.c: 220: FAN_STATUS = 2;
  1347  01F5  3002               	movlw	2
  1348  01F6  00F7               	movwf	_FAN_STATUS
  1349                           
  1350                           ;main.c: 221: checkFan();
  1351  01F7  29C1               	ljmp	l3342
  1352  01F8                     l3454:	
  1353  01F8  3002               	movlw	2
  1354  01F9  0677               	xorwf	_FAN_STATUS,w
  1355  01FA  1D03               	btfss	3,2
  1356  01FB  29FD               	goto	l630
  1357                           
  1358                           ;main.c: 225: checkFan();
  1359  01FC  21C1               	fcall	_checkFan
  1360  01FD                     l630:	
  1361                           
  1362                           ;main.c: 226: }
  1363                           ;main.c: 228: unsigned char key2Status = key_driver(&key2);
  1364  01FD  3038               	movlw	(low (_key2| 0))& (0+255)
  1365  01FE  2108               	fcall	_key_driver
  1366  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  1367  0200  1303               	bcf	3,6	;RP1=0, select bank0
  1368  0201  00CF               	movwf	checkKeys@key2Status
  1369                           
  1370                           ;main.c: 229: if (key2Status == 1) {
  1371  0202  0B4F               	decfsz	checkKeys@key2Status,w
  1372  0203  2A06               	goto	l3464
  1373                           
  1374                           ;main.c: 231: setFanLevel(1);
  1375  0204  3001               	movlw	1
  1376  0205  294A               	ljmp	_setFanLevel
  1377  0206                     l3464:	
  1378                           
  1379                           ;main.c: 233: }
  1380                           ;main.c: 234: unsigned char key3Status = key_driver(&key3);
  1381  0206  3031               	movlw	(low (_key3| 0))& (0+255)
  1382  0207  2108               	fcall	_key_driver
  1383  0208  1283               	bcf	3,5	;RP0=0, select bank0
  1384  0209  1303               	bcf	3,6	;RP1=0, select bank0
  1385  020A  00D0               	movwf	checkKeys@key3Status
  1386                           
  1387                           ;main.c: 235: if (key3Status == 1) {
  1388  020B  0B50               	decfsz	checkKeys@key3Status,w
  1389  020C  0008               	return
  1390                           
  1391                           ;main.c: 237: setFanLevel(-1);
  1392  020D  30FF               	movlw	255
  1393  020E  294A               	ljmp	_setFanLevel
  1394  020F                     __end_of_checkKeys:	
  1395                           
  1396                           	psect	text9
  1397  0108                     __ptext9:	
  1398 ;; *************** function _key_driver *****************
  1399 ;; Defined at:
  1400 ;;		line 9 in file "E:\project\project0508\scm\uf166fan\scankey.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;  key             1    wreg     PTR struct Keys
  1403 ;;		 -> key3(7), key2(7), key1(7), 
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;  key             1    6[COMMON] PTR struct Keys
  1406 ;;		 -> key3(7), key2(7), key1(7), 
  1407 ;;  key_read        1    5[COMMON] unsigned char 
  1408 ;;  key_return      1    4[COMMON] unsigned char 
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  1    wreg      unsigned char 
  1411 ;; Registers used:
  1412 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 800/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMMON   BANK0   BANK1
  1418 ;;      Params:         0       0       0
  1419 ;;      Locals:         3       0       0
  1420 ;;      Temps:          0       0       0
  1421 ;;      Totals:         3       0       0
  1422 ;;Total ram usage:        3 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; Hardware stack levels required when called:    3
  1425 ;; This function calls:
  1426 ;;		Nothing
  1427 ;; This function is called by:
  1428 ;;		_checkKeys
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           
  1433                           ;psect for function _key_driver
  1434  0108                     _key_driver:	
  1435                           
  1436                           ;incstack = 0
  1437                           ; Regs used in _key_driver: [wreg-fsr0h+status,2+status,0]
  1438                           ;key_driver@key stored from wreg
  1439  0108  00F6               	movwf	key_driver@key
  1440                           
  1441                           ;scankey.c: 12: unsigned char key_return = 0;
  1442  0109  01F4               	clrf	key_driver@key_return
  1443                           
  1444                           ;scankey.c: 13: unsigned char key_read = key->key_input;
  1445  010A  3E04               	addlw	4
  1446  010B  0084               	movwf	4
  1447  010C  1383               	bcf	3,7	;select IRP bank0
  1448  010D  0800               	movf	0,w
  1449  010E  00F5               	movwf	key_driver@key_read
  1450                           
  1451                           ;scankey.c: 15: switch (key->key_state_buffer1) {
  1452  010F  293B               	goto	l2892
  1453  0110                     l2862:	
  1454                           
  1455                           ;scankey.c: 17: if (key_read == 0) {
  1456  0110  0875               	movf	key_driver@key_read,w
  1457  0111  1D03               	btfss	3,2
  1458  0112  2948               	goto	l2894
  1459                           
  1460                           ;scankey.c: 18: key->key_state_buffer1 = 1;
  1461  0113  0A76               	incf	key_driver@key,w
  1462  0114  0084               	movwf	4
  1463  0115  0180               	clrf	0
  1464  0116  0A80               	incf	0,f
  1465  0117  2948               	goto	l2894
  1466  0118                     l2866:	
  1467                           
  1468                           ;scankey.c: 25: if (key_read == 0) {
  1469  0118  0875               	movf	key_driver@key_read,w
  1470  0119  1D03               	btfss	3,2
  1471  011A  2937               	goto	l2888
  1472                           
  1473                           ;scankey.c: 26: key->key_timer_cnt1 = 0;
  1474  011B  0876               	movf	key_driver@key,w
  1475  011C  0084               	movwf	4
  1476  011D  0180               	clrf	0
  1477                           
  1478                           ;scankey.c: 27: key->key_state_buffer1 = 2;
  1479  011E  0A76               	incf	key_driver@key,w
  1480  011F  0084               	movwf	4
  1481  0120  3002               	movlw	2
  1482  0121  2933               	goto	L3
  1483  0122                     l2874:	
  1484                           ;scankey.c: 32: key->key_state_buffer1 = 0;
  1485                           
  1486                           ;scankey.c: 31: } else {
  1487                           
  1488                           
  1489                           ;scankey.c: 39: if (key_read == 1) {
  1490  0122  0B75               	decfsz	key_driver@key_read,w
  1491  0123  2927               	goto	l2880
  1492                           
  1493                           ;scankey.c: 40: key_return = 1;
  1494  0124  01F4               	clrf	key_driver@key_return
  1495  0125  0AF4               	incf	key_driver@key_return,f
  1496  0126  2937               	goto	l2888
  1497  0127                     l2880:	
  1498                           ;scankey.c: 42: } else if (++(key->key_timer_cnt1) >= 100)
  1499                           
  1500                           ;scankey.c: 41: key->key_state_buffer1 = 0;
  1501                           
  1502  0127  0876               	movf	key_driver@key,w
  1503  0128  0084               	movwf	4
  1504  0129  3064               	movlw	100
  1505  012A  0A80               	incf	0,f
  1506  012B  0200               	subwf	0,w
  1507  012C  1C03               	skipc
  1508  012D  2948               	goto	l2894
  1509                           
  1510                           ;scankey.c: 43: {
  1511                           ;scankey.c: 44: key_return = 3;
  1512  012E  3003               	movlw	3
  1513  012F  00F4               	movwf	key_driver@key_return
  1514                           
  1515                           ;scankey.c: 45: key->key_state_buffer1 = 3;
  1516  0130  0A76               	incf	key_driver@key,w
  1517  0131  0084               	movwf	4
  1518  0132  3003               	movlw	3
  1519  0133                     L3:	
  1520  0133  0080               	movwf	0
  1521  0134  2948               	goto	l2894
  1522  0135                     l2886:	
  1523                           
  1524                           ;scankey.c: 51: if (key_read == 1)
  1525  0135  0B75               	decfsz	key_driver@key_read,w
  1526  0136  2948               	goto	l2894
  1527  0137                     l2888:	
  1528                           
  1529                           ;scankey.c: 52: {
  1530                           ;scankey.c: 53: key->key_state_buffer1 = 0;
  1531  0137  0A76               	incf	key_driver@key,w
  1532  0138  0084               	movwf	4
  1533  0139  0180               	clrf	0
  1534  013A  2948               	goto	l2894
  1535  013B                     l2892:	
  1536  013B  0A76               	incf	key_driver@key,w
  1537  013C  0084               	movwf	4
  1538  013D  0800               	movf	0,w
  1539                           
  1540                           ; Switch size 1, requested type "space"
  1541                           ; Number of cases is 4, Range of values is 0 to 3
  1542                           ; switch strategies available:
  1543                           ; Name         Instructions Cycles
  1544                           ; direct_byte           10     6 (fixed)
  1545                           ; simple_byte           13     7 (average)
  1546                           ; jumptable            260     6 (fixed)
  1547                           ;	Chosen strategy is direct_byte
  1548  013E  0084               	movwf	4
  1549  013F  3004               	movlw	4
  1550  0140  0204               	subwf	4,w
  1551  0141  1803               	skipnc
  1552  0142  2948               	goto	l2894
  1553  0143  3003               	movlw	high S3554
  1554  0144  008A               	movwf	10
  1555  0145  3077               	movlw	low S3554
  1556  0146  0704               	addwf	4,w
  1557  0147  0082               	movwf	2
  1558  0148                     l2894:	
  1559                           
  1560                           ;scankey.c: 58: return key_return;
  1561  0148  0874               	movf	key_driver@key_return,w
  1562  0149  0008               	return
  1563  014A                     __end_of_key_driver:	
  1564                           
  1565                           	psect	swtext1
  1566  0377                     __pswtext1:	
  1567  0377                     S3554:	
  1568  0377  2910               	ljmp	l2862
  1569  0378  2918               	ljmp	l2866
  1570  0379  2922               	ljmp	l2874
  1571  037A  2935               	ljmp	l2886
  1572                           
  1573                           	psect	text10
  1574  01C1                     __ptext10:	
  1575 ;; *************** function _checkFan *****************
  1576 ;; Defined at:
  1577 ;;		line 121 in file "E:\project\project0508\scm\uf166fan\main.c"
  1578 ;; Parameters:    Size  Location     Type
  1579 ;;		None
  1580 ;; Auto vars:     Size  Location     Type
  1581 ;;		None
  1582 ;; Return value:  Size  Location     Type
  1583 ;;                  1    wreg      void 
  1584 ;; Registers used:
  1585 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1586 ;; Tracked objects:
  1587 ;;		On entry : 800/0
  1588 ;;		On exit  : 200/0
  1589 ;;		Unchanged: 0/0
  1590 ;; Data sizes:     COMMON   BANK0   BANK1
  1591 ;;      Params:         0       0       0
  1592 ;;      Locals:         0       0       0
  1593 ;;      Temps:          0       1       0
  1594 ;;      Totals:         0       1       0
  1595 ;;Total ram usage:        1 bytes
  1596 ;; Hardware stack levels used:    1
  1597 ;; Hardware stack levels required when called:    5
  1598 ;; This function calls:
  1599 ;;		_closeFan
  1600 ;;		_setFanLevel
  1601 ;; This function is called by:
  1602 ;;		_checkKeys
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           
  1607                           ;psect for function _checkFan
  1608  01C1                     _checkFan:	
  1609  01C1                     l3342:	
  1610                           ;incstack = 0
  1611                           ; Regs used in _checkFan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1612                           
  1613                           
  1614                           ;main.c: 122: TRISA&=~(1<<1);
  1615  01C1  1683               	bsf	3,5	;RP0=1, select bank1
  1616  01C2  1303               	bcf	3,6	;RP1=0, select bank1
  1617  01C3  1085               	bcf	5,1	;volatile
  1618                           
  1619                           ;main.c: 123: PORTA|=(1<<1);
  1620  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  1621  01C5  1485               	bsf	5,1	;volatile
  1622                           
  1623                           ;main.c: 125: TRISC&=~(1<<2);
  1624  01C6  1683               	bsf	3,5	;RP0=1, select bank1
  1625  01C7  1107               	bcf	7,2	;volatile
  1626                           
  1627                           ;main.c: 126: PORTA|=(1<<2);
  1628  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  1629  01C9  1505               	bsf	5,2	;volatile
  1630                           
  1631                           ;main.c: 127: T2CON = 0X04;
  1632  01CA  3004               	movlw	4
  1633  01CB  0092               	movwf	18	;volatile
  1634                           
  1635                           ;main.c: 130: if (((PORTB) >> (6)&1) == 0) {
  1636  01CC  0806               	movf	6,w	;volatile
  1637  01CD  00CE               	movwf	??_checkFan
  1638  01CE  3006               	movlw	6
  1639  01CF                     u1125:	
  1640  01CF  1003               	clrc
  1641  01D0  0CCE               	rrf	??_checkFan,f
  1642  01D1  3EFF               	addlw	-1
  1643  01D2  1D03               	skipz
  1644  01D3  29CF               	goto	u1125
  1645  01D4  184E               	btfsc	??_checkFan,0
  1646  01D5  29D9               	goto	l3350
  1647                           
  1648                           ;main.c: 131: FAN_STATUS = 1;
  1649  01D6  01F7               	clrf	_FAN_STATUS
  1650  01D7  0AF7               	incf	_FAN_STATUS,f
  1651                           
  1652                           ;main.c: 132: } else {
  1653  01D8  29DB               	goto	l3352
  1654  01D9                     l3350:	
  1655                           
  1656                           ;main.c: 133: FAN_STATUS = 2;
  1657  01D9  3002               	movlw	2
  1658  01DA  00F7               	movwf	_FAN_STATUS
  1659  01DB                     l3352:	
  1660                           
  1661                           ;main.c: 134: }
  1662                           ;main.c: 136: setFanLevel(0);
  1663  01DB  3000               	movlw	0
  1664  01DC  214A               	fcall	_setFanLevel
  1665                           
  1666                           ;main.c: 139: if (FAN_STATUS == 2) {
  1667  01DD  3002               	movlw	2
  1668  01DE  0677               	xorwf	_FAN_STATUS,w
  1669  01DF  1D03               	btfss	3,2
  1670  01E0  0008               	return
  1671                           
  1672                           ;main.c: 140: fan_check_time++;
  1673  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1674  01E2  0AA8               	incf	_fan_check_time,f
  1675  01E3  1903               	skipnz
  1676  01E4  0AA9               	incf	_fan_check_time+1,f
  1677                           
  1678                           ;main.c: 141: if (fan_check_time == 3000) {
  1679  01E5  30B8               	movlw	184
  1680  01E6  0628               	xorwf	_fan_check_time,w
  1681  01E7  300B               	movlw	11
  1682  01E8  1903               	skipnz
  1683  01E9  0629               	xorwf	_fan_check_time+1,w
  1684  01EA  1D03               	btfss	3,2
  1685  01EB  0008               	return
  1686                           
  1687                           ;main.c: 142: closeFan();
  1688  01EC  2B2F               	ljmp	l2820
  1689  01ED                     __end_of_checkFan:	
  1690                           
  1691                           	psect	text11
  1692  014A                     __ptext11:	
  1693 ;; *************** function _setFanLevel *****************
  1694 ;; Defined at:
  1695 ;;		line 66 in file "E:\project\project0508\scm\uf166fan\main.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;  level           1    wreg     unsigned char 
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;  level           1    5[COMMON] unsigned char 
  1700 ;;  levelWidth      2    0        unsigned int 
  1701 ;;  tempLevel       1    6[COMMON] unsigned char 
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  1    wreg      void 
  1704 ;; Registers used:
  1705 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1706 ;; Tracked objects:
  1707 ;;		On entry : B00/0
  1708 ;;		On exit  : 200/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMMON   BANK0   BANK1
  1711 ;;      Params:         0       0       0
  1712 ;;      Locals:         2       0       0
  1713 ;;      Temps:          0       0       0
  1714 ;;      Totals:         2       0       0
  1715 ;;Total ram usage:        2 bytes
  1716 ;; Hardware stack levels used:    1
  1717 ;; Hardware stack levels required when called:    4
  1718 ;; This function calls:
  1719 ;;		___awdiv
  1720 ;;		_setLedOn
  1721 ;; This function is called by:
  1722 ;;		_checkFan
  1723 ;;		_checkKeys
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727                           
  1728                           ;psect for function _setFanLevel
  1729  014A                     _setFanLevel:	
  1730                           
  1731                           ;incstack = 0
  1732                           ; Regs used in _setFanLevel: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1733                           ;setFanLevel@level stored from wreg
  1734  014A  00F5               	movwf	setFanLevel@level
  1735                           
  1736                           ;main.c: 67: if(level == 0)
  1737  014B  0875               	movf	setFanLevel@level,w
  1738  014C  1D03               	btfss	3,2
  1739  014D  2950               	goto	l3312
  1740                           
  1741                           ;main.c: 68: {
  1742                           ;main.c: 69: currentLevel = 3;
  1743  014E  3003               	movlw	3
  1744  014F  00F8               	movwf	_currentLevel
  1745  0150                     l3312:	
  1746                           
  1747                           ;main.c: 70: }
  1748                           ;main.c: 71: unsigned int levelWidth = (PR2 + 1) / 4;
  1749  0150  1683               	bsf	3,5	;RP0=1, select bank1
  1750  0151  0812               	movf	18,w	;volatile
  1751  0152  1283               	bcf	3,5	;RP0=0, select bank0
  1752  0153  00C8               	movwf	___awdiv@dividend
  1753  0154  01C9               	clrf	___awdiv@dividend+1
  1754  0155  0AC8               	incf	___awdiv@dividend,f
  1755  0156  1903               	skipnz
  1756  0157  0AC9               	incf	___awdiv@dividend+1,f
  1757  0158  3004               	movlw	4
  1758  0159  00C6               	movwf	___awdiv@divisor
  1759  015A  01C7               	clrf	___awdiv@divisor+1
  1760  015B  20C3               	fcall	___awdiv
  1761                           
  1762                           ;main.c: 72: char tempLevel = currentLevel + level;
  1763  015C  0875               	movf	setFanLevel@level,w
  1764  015D  0778               	addwf	_currentLevel,w
  1765  015E  00F6               	movwf	setFanLevel@tempLevel
  1766                           
  1767                           ;main.c: 73: if (tempLevel > 4) {
  1768  015F  3005               	movlw	5
  1769  0160  0276               	subwf	setFanLevel@tempLevel,w
  1770  0161  1C03               	skipc
  1771  0162  2965               	goto	l3320
  1772                           
  1773                           ;main.c: 74: tempLevel = 4;
  1774  0163  3004               	movlw	4
  1775  0164  00F6               	movwf	setFanLevel@tempLevel
  1776  0165                     l3320:	
  1777                           
  1778                           ;main.c: 75: }
  1779                           ;main.c: 77: if (tempLevel < 1) {
  1780  0165  0876               	movf	setFanLevel@tempLevel,w
  1781  0166  1D03               	btfss	3,2
  1782  0167  296A               	goto	l3324
  1783                           
  1784                           ;main.c: 78: tempLevel = 1;
  1785  0168  01F6               	clrf	setFanLevel@tempLevel
  1786  0169  0AF6               	incf	setFanLevel@tempLevel,f
  1787  016A                     l3324:	
  1788                           
  1789                           ;main.c: 79: }
  1790                           ;main.c: 82: if (FAN_STATUS == 1) {
  1791  016A  0B77               	decfsz	_FAN_STATUS,w
  1792  016B  0008               	return
  1793                           
  1794                           ;main.c: 83: currentLevel = tempLevel;
  1795  016C  0876               	movf	setFanLevel@tempLevel,w
  1796  016D  00F8               	movwf	_currentLevel
  1797                           
  1798                           ;main.c: 84: switch(currentLevel)
  1799  016E  2978               	goto	l3338
  1800  016F                     l3328:	
  1801                           
  1802                           ;main.c: 87: CCPR1L = 1;
  1803  016F  3001               	movlw	1
  1804  0170  2976               	goto	L6
  1805  0171                     l3330:	
  1806                           ;main.c: 88: break;
  1807                           
  1808                           
  1809                           ;main.c: 90: CCPR1L = 2;
  1810  0171  3002               	movlw	2
  1811  0172  2976               	goto	L6
  1812  0173                     l3332:	
  1813                           ;main.c: 91: break;
  1814                           
  1815                           
  1816                           ;main.c: 93: CCPR1L = 3;
  1817  0173  3003               	movlw	3
  1818  0174  2976               	goto	L6
  1819  0175                     l3334:	
  1820                           ;main.c: 94: break;
  1821                           
  1822                           
  1823                           ;main.c: 96: CCPR1L = 5;
  1824  0175  3005               	movlw	5
  1825  0176                     L6:	
  1826  0176  0095               	movwf	21	;volatile
  1827                           
  1828                           ;main.c: 97: break;
  1829  0177  2986               	goto	l3340
  1830  0178                     l3338:	
  1831  0178  0878               	movf	_currentLevel,w
  1832                           
  1833                           ; Switch size 1, requested type "space"
  1834                           ; Number of cases is 4, Range of values is 1 to 4
  1835                           ; switch strategies available:
  1836                           ; Name         Instructions Cycles
  1837                           ; simple_byte           13     7 (average)
  1838                           ; direct_byte           13     9 (fixed)
  1839                           ; jumptable            263     9 (fixed)
  1840                           ;	Chosen strategy is simple_byte
  1841  0179  3A01               	xorlw	1	; case 1
  1842  017A  1903               	skipnz
  1843  017B  296F               	goto	l3328
  1844  017C  3A03               	xorlw	3	; case 2
  1845  017D  1903               	skipnz
  1846  017E  2971               	goto	l3330
  1847  017F  3A01               	xorlw	1	; case 3
  1848  0180  1903               	skipnz
  1849  0181  2973               	goto	l3332
  1850  0182  3A07               	xorlw	7	; case 4
  1851  0183  1903               	skipnz
  1852  0184  2975               	goto	l3334
  1853  0185  2986               	goto	l3340
  1854  0186                     l3340:	
  1855                           
  1856                           ;main.c: 101: setLedOn(currentLevel);
  1857  0186  0878               	movf	_currentLevel,w
  1858  0187  2988               	ljmp	_setLedOn
  1859  0188                     __end_of_setFanLevel:	
  1860                           
  1861                           	psect	text12
  1862  00C3                     __ptext12:	
  1863 ;; *************** function ___awdiv *****************
  1864 ;; Defined at:
  1865 ;;		line 6 in file "E:\cms\SCMCU_IDE_V2.00.07\data\sources\common\awdiv.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;  divisor         2    0[BANK0 ] int 
  1868 ;;  dividend        2    2[BANK0 ] int 
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;  quotient        2    6[BANK0 ] int 
  1871 ;;  sign            1    5[BANK0 ] unsigned char 
  1872 ;;  counter         1    4[BANK0 ] unsigned char 
  1873 ;; Return value:  Size  Location     Type
  1874 ;;                  2    0[BANK0 ] int 
  1875 ;; Registers used:
  1876 ;;		wreg, status,2, status,0
  1877 ;; Tracked objects:
  1878 ;;		On entry : B00/0
  1879 ;;		On exit  : B00/0
  1880 ;;		Unchanged: 800/0
  1881 ;; Data sizes:     COMMON   BANK0   BANK1
  1882 ;;      Params:         0       4       0
  1883 ;;      Locals:         0       4       0
  1884 ;;      Temps:          0       0       0
  1885 ;;      Totals:         0       8       0
  1886 ;;Total ram usage:        8 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:    3
  1889 ;; This function calls:
  1890 ;;		Nothing
  1891 ;; This function is called by:
  1892 ;;		_setFanLevel
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           
  1897                           ;psect for function ___awdiv
  1898  00C3                     ___awdiv:	
  1899                           
  1900                           ;incstack = 0
  1901                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1902  00C3  01CB               	clrf	___awdiv@sign
  1903  00C4  1FC7               	btfss	___awdiv@divisor+1,7
  1904  00C5  28CD               	goto	l3272
  1905  00C6  09C6               	comf	___awdiv@divisor,f
  1906  00C7  09C7               	comf	___awdiv@divisor+1,f
  1907  00C8  0AC6               	incf	___awdiv@divisor,f
  1908  00C9  1903               	skipnz
  1909  00CA  0AC7               	incf	___awdiv@divisor+1,f
  1910  00CB  01CB               	clrf	___awdiv@sign
  1911  00CC  0ACB               	incf	___awdiv@sign,f
  1912  00CD                     l3272:	
  1913  00CD  1FC9               	btfss	___awdiv@dividend+1,7
  1914  00CE  28D6               	goto	l3278
  1915  00CF  09C8               	comf	___awdiv@dividend,f
  1916  00D0  09C9               	comf	___awdiv@dividend+1,f
  1917  00D1  0AC8               	incf	___awdiv@dividend,f
  1918  00D2  1903               	skipnz
  1919  00D3  0AC9               	incf	___awdiv@dividend+1,f
  1920  00D4  3001               	movlw	1
  1921  00D5  06CB               	xorwf	___awdiv@sign,f
  1922  00D6                     l3278:	
  1923  00D6  01CC               	clrf	___awdiv@quotient
  1924  00D7  01CD               	clrf	___awdiv@quotient+1
  1925  00D8  0846               	movf	___awdiv@divisor,w
  1926  00D9  0447               	iorwf	___awdiv@divisor+1,w
  1927  00DA  1903               	btfsc	3,2
  1928  00DB  28FB               	goto	l3300
  1929  00DC  01CA               	clrf	___awdiv@counter
  1930  00DD                     L7:	
  1931  00DD  0ACA               	incf	___awdiv@counter,f
  1932  00DE  1BC7               	btfsc	___awdiv@divisor+1,7
  1933  00DF  28E4               	goto	l3288
  1934  00E0  1003               	clrc
  1935  00E1  0DC6               	rlf	___awdiv@divisor,f
  1936  00E2  0DC7               	rlf	___awdiv@divisor+1,f
  1937  00E3  28DD               	goto	L7
  1938  00E4                     l3288:	
  1939  00E4  1003               	clrc
  1940  00E5  0DCC               	rlf	___awdiv@quotient,f
  1941  00E6  0DCD               	rlf	___awdiv@quotient+1,f
  1942  00E7  0847               	movf	___awdiv@divisor+1,w
  1943  00E8  0249               	subwf	___awdiv@dividend+1,w
  1944  00E9  1D03               	skipz
  1945  00EA  28ED               	goto	u1055
  1946  00EB  0846               	movf	___awdiv@divisor,w
  1947  00EC  0248               	subwf	___awdiv@dividend,w
  1948  00ED                     u1055:	
  1949  00ED  1C03               	skipc
  1950  00EE  28F7               	goto	L8
  1951  00EF  0846               	movf	___awdiv@divisor,w
  1952  00F0  02C8               	subwf	___awdiv@dividend,f
  1953  00F1  0847               	movf	___awdiv@divisor+1,w
  1954  00F2  1C03               	skipc
  1955  00F3  03C9               	decf	___awdiv@dividend+1,f
  1956  00F4  02C9               	subwf	___awdiv@dividend+1,f
  1957  00F5  144C               	bsf	___awdiv@quotient,0
  1958  00F6  1003               	clrc
  1959  00F7                     L8:	
  1960  00F7  0CC7               	rrf	___awdiv@divisor+1,f
  1961  00F8  0CC6               	rrf	___awdiv@divisor,f
  1962  00F9  0BCA               	decfsz	___awdiv@counter,f
  1963  00FA  28E4               	goto	l3288
  1964  00FB                     l3300:	
  1965  00FB  084B               	movf	___awdiv@sign,w
  1966  00FC  1903               	btfsc	3,2
  1967  00FD  2903               	goto	l3304
  1968  00FE  09CC               	comf	___awdiv@quotient,f
  1969  00FF  09CD               	comf	___awdiv@quotient+1,f
  1970  0100  0ACC               	incf	___awdiv@quotient,f
  1971  0101  1903               	skipnz
  1972  0102  0ACD               	incf	___awdiv@quotient+1,f
  1973  0103                     l3304:	
  1974  0103  084D               	movf	___awdiv@quotient+1,w
  1975  0104  00C7               	movwf	?___awdiv+1
  1976  0105  084C               	movf	___awdiv@quotient,w
  1977  0106  00C6               	movwf	?___awdiv
  1978  0107  0008               	return
  1979  0108                     __end_of___awdiv:	
  1980                           
  1981                           	psect	text13
  1982  032F                     __ptext13:	
  1983 ;; *************** function _closeFan *****************
  1984 ;; Defined at:
  1985 ;;		line 107 in file "E:\project\project0508\scm\uf166fan\main.c"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;		None
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;		None
  1990 ;; Return value:  Size  Location     Type
  1991 ;;                  1    wreg      void 
  1992 ;; Registers used:
  1993 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1994 ;; Tracked objects:
  1995 ;;		On entry : 0/0
  1996 ;;		On exit  : 300/0
  1997 ;;		Unchanged: 0/0
  1998 ;; Data sizes:     COMMON   BANK0   BANK1
  1999 ;;      Params:         0       0       0
  2000 ;;      Locals:         0       0       0
  2001 ;;      Temps:          0       0       0
  2002 ;;      Totals:         0       0       0
  2003 ;;Total ram usage:        0 bytes
  2004 ;; Hardware stack levels used:    1
  2005 ;; Hardware stack levels required when called:    4
  2006 ;; This function calls:
  2007 ;;		_Init_PWM
  2008 ;;		_setLedOn
  2009 ;; This function is called by:
  2010 ;;		_checkFan
  2011 ;;		_checkKeys
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           
  2016                           ;psect for function _closeFan
  2017  032F                     _closeFan:	
  2018  032F                     l2820:	
  2019                           ;incstack = 0
  2020                           ; Regs used in _closeFan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2021                           
  2022                           
  2023                           ;main.c: 108: Init_PWM();
  2024  032F  230F               	fcall	_Init_PWM
  2025                           
  2026                           ;main.c: 109: currentLevel = 2;
  2027  0330  3002               	movlw	2
  2028  0331  00F8               	movwf	_currentLevel
  2029                           
  2030                           ;main.c: 110: setLedOn(5);
  2031  0332  3005               	movlw	5
  2032  0333  2188               	fcall	_setLedOn
  2033                           
  2034                           ;main.c: 111: PORTA|=(1<<0);
  2035  0334  1283               	bcf	3,5	;RP0=0, select bank0
  2036  0335  1405               	bsf	5,0	;volatile
  2037                           
  2038                           ;main.c: 113: TRISC|=(1<<2);
  2039  0336  1683               	bsf	3,5	;RP0=1, select bank1
  2040  0337  1507               	bsf	7,2	;volatile
  2041                           
  2042                           ;main.c: 114: fan_check_time = 0;
  2043  0338  1283               	bcf	3,5	;RP0=0, select bank0
  2044  0339  01A8               	clrf	_fan_check_time
  2045  033A  01A9               	clrf	_fan_check_time+1
  2046                           
  2047                           ;main.c: 115: FAN_STATUS = 0;
  2048  033B  01F7               	clrf	_FAN_STATUS
  2049  033C  0008               	return
  2050  033D                     __end_of_closeFan:	
  2051                           
  2052                           	psect	text14
  2053  0188                     __ptext14:	
  2054 ;; *************** function _setLedOn *****************
  2055 ;; Defined at:
  2056 ;;		line 152 in file "E:\project\project0508\scm\uf166fan\main.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;  ledIndex        1    wreg     unsigned char 
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  ledIndex        1    4[COMMON] unsigned char 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      void 
  2063 ;; Registers used:
  2064 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2065 ;; Tracked objects:
  2066 ;;		On entry : 200/0
  2067 ;;		On exit  : 200/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMMON   BANK0   BANK1
  2070 ;;      Params:         0       0       0
  2071 ;;      Locals:         1       0       0
  2072 ;;      Temps:          0       0       0
  2073 ;;      Totals:         1       0       0
  2074 ;;Total ram usage:        1 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    3
  2077 ;; This function calls:
  2078 ;;		Nothing
  2079 ;; This function is called by:
  2080 ;;		_setFanLevel
  2081 ;;		_closeFan
  2082 ;; This function uses a non-reentrant model
  2083 ;;
  2084                           
  2085                           
  2086                           ;psect for function _setLedOn
  2087  0188                     _setLedOn:	
  2088                           
  2089                           ;incstack = 0
  2090                           ; Regs used in _setLedOn: [wreg-fsr0h+status,2+status,0]
  2091                           ;setLedOn@ledIndex stored from wreg
  2092  0188  00F4               	movwf	setLedOn@ledIndex
  2093                           
  2094                           ;main.c: 153: switch(ledIndex) {
  2095  0189  29A5               	goto	l2736
  2096  018A                     l614:	
  2097                           ;main.c: 154: case 1:
  2098                           
  2099                           
  2100                           ;main.c: 156: TRISC&=~(1<<1);
  2101                           
  2102                           ;main.c: 157: TRISA|=(1<<7);
  2103                           
  2104                           ;main.c: 158: TRISC&=~(1<<0);
  2105                           
  2106                           ;main.c: 159: PORTA&=~(1<<7);
  2107  018A  21B4               	fcall	PL14	;call to abstracted procedure
  2108                           
  2109                           ;main.c: 160: PORTC|=(1<<0);
  2110  018B  1407               	bsf	7,0	;volatile
  2111                           
  2112                           ;main.c: 161: PORTC&=~(1<<1);
  2113  018C  1087               	bcf	7,1	;volatile
  2114                           
  2115                           ;main.c: 162: break;
  2116  018D  0008               	return
  2117  018E                     l616:	
  2118                           ;main.c: 163: case 2:
  2119                           
  2120                           
  2121                           ;main.c: 164: TRISC&=~(1<<1);
  2122                           
  2123                           ;main.c: 165: TRISA|=(1<<7);
  2124                           
  2125                           ;main.c: 166: TRISC&=~(1<<0);
  2126                           
  2127                           ;main.c: 167: PORTA&=~(1<<7);
  2128  018E  21B4               	fcall	PL14	;call to abstracted procedure
  2129                           
  2130                           ;main.c: 168: PORTC&=~(1<<0);
  2131  018F  1007               	bcf	7,0	;volatile
  2132                           
  2133                           ;main.c: 169: PORTC|=(1<<1);
  2134  0190  1487               	bsf	7,1	;volatile
  2135                           
  2136                           ;main.c: 170: break;
  2137  0191  0008               	return
  2138  0192                     l617:	
  2139                           ;main.c: 171: case 3:
  2140                           
  2141                           
  2142                           ;main.c: 173: TRISC|=(1<<0);
  2143                           
  2144                           ;main.c: 174: TRISA&=~(1<<7);
  2145                           
  2146                           ;main.c: 175: TRISC&=~(1<<1);
  2147                           
  2148                           ;main.c: 176: PORTA|=(1<<7);
  2149  0192  21BB               	fcall	PL18	;call to abstracted procedure
  2150  0193  1785               	bsf	5,7	;volatile
  2151                           
  2152                           ;main.c: 177: PORTC&=~(1<<0);
  2153  0194  1007               	bcf	7,0	;volatile
  2154                           
  2155                           ;main.c: 178: PORTC&=~(1<<1);
  2156  0195  1087               	bcf	7,1	;volatile
  2157                           
  2158                           ;main.c: 179: break;
  2159  0196  0008               	return
  2160  0197                     l618:	
  2161                           ;main.c: 180: case 4:
  2162                           
  2163                           
  2164                           ;main.c: 181: TRISC|=(1<<0);
  2165                           
  2166                           ;main.c: 182: TRISA&=~(1<<7);
  2167                           
  2168                           ;main.c: 183: TRISC&=~(1<<1);
  2169                           
  2170                           ;main.c: 184: PORTA&=~(1<<7);
  2171  0197  21BB               	fcall	PL18	;call to abstracted procedure
  2172  0198  1385               	bcf	5,7	;volatile
  2173                           
  2174                           ;main.c: 185: PORTC|=(1<<0);
  2175  0199  1407               	bsf	7,0	;volatile
  2176                           
  2177                           ;main.c: 186: PORTC|=(1<<1);
  2178  019A  1487               	bsf	7,1	;volatile
  2179                           
  2180                           ;main.c: 187: break;
  2181  019B  0008               	return
  2182  019C                     l619:	
  2183                           ;main.c: 188: case 5:
  2184                           
  2185                           
  2186                           ;main.c: 190: TRISC|=(1<<0);
  2187  019C  1683               	bsf	3,5	;RP0=1, select bank1
  2188  019D  1407               	bsf	7,0	;volatile
  2189                           
  2190                           ;main.c: 191: TRISA|=(1<<7);
  2191  019E  1785               	bsf	5,7	;volatile
  2192                           
  2193                           ;main.c: 192: TRISC|=(1<<1);
  2194  019F  1487               	bsf	7,1	;volatile
  2195                           
  2196                           ;main.c: 193: PORTC&=~(1<<0);
  2197  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  2198  01A1  1007               	bcf	7,0	;volatile
  2199                           
  2200                           ;main.c: 194: PORTA&=~(1<<7);
  2201  01A2  1385               	bcf	5,7	;volatile
  2202                           
  2203                           ;main.c: 195: PORTC&=~(1<<1);
  2204  01A3  1087               	bcf	7,1	;volatile
  2205                           
  2206                           ;main.c: 196: break;
  2207  01A4  0008               	return
  2208  01A5                     l2736:	
  2209  01A5  0874               	movf	setLedOn@ledIndex,w
  2210                           
  2211                           ; Switch size 1, requested type "space"
  2212                           ; Number of cases is 5, Range of values is 1 to 5
  2213                           ; switch strategies available:
  2214                           ; Name         Instructions Cycles
  2215                           ; direct_byte           14     9 (fixed)
  2216                           ; simple_byte           16     9 (average)
  2217                           ; jumptable            263     9 (fixed)
  2218                           ;	Chosen strategy is direct_byte
  2219  01A6  3EFF               	addlw	-1
  2220  01A7  1C03               	skipc
  2221  01A8  0008               	return
  2222  01A9  0084               	movwf	4
  2223  01AA  3005               	movlw	5
  2224  01AB  0204               	subwf	4,w
  2225  01AC  1803               	skipnc
  2226  01AD  0008               	return
  2227  01AE  3003               	movlw	high S3556
  2228  01AF  008A               	movwf	10
  2229  01B0  3072               	movlw	low S3556
  2230  01B1  0704               	addwf	4,w
  2231  01B2  0082               	movwf	2
  2232  01B3  0008               	return
  2233  01B4                     __end_of_setLedOn:	
  2234  01B4                     PL14:	
  2235  01B4  1683               	bsf	3,5	;RP0=1, select bank1
  2236  01B5  1087               	bcf	7,1	;volatile
  2237  01B6  1785               	bsf	5,7	;volatile
  2238  01B7  1007               	bcf	7,0	;volatile
  2239  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  2240  01B9  1385               	bcf	5,7	;volatile
  2241  01BA  0008               	return
  2242  01BB                     __end_ofPL14:	
  2243  01BB                     PL18:	
  2244  01BB  1683               	bsf	3,5	;RP0=1, select bank1
  2245  01BC  1407               	bsf	7,0	;volatile
  2246  01BD  1385               	bcf	5,7	;volatile
  2247  01BE  1087               	bcf	7,1	;volatile
  2248  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  2249  01C0  0008               	return
  2250  01C1                     __end_ofPL18:	
  2251                           
  2252                           	psect	swtext2
  2253  0372                     __pswtext2:	
  2254  0372                     S3556:	
  2255  0372  298A               	ljmp	l614
  2256  0373  298E               	ljmp	l616
  2257  0374  2992               	ljmp	l617
  2258  0375  2997               	ljmp	l618
  2259  0376  299C               	ljmp	l619
  2260                           
  2261                           	psect	text15
  2262  0230                     __ptext15:	
  2263 ;; *************** function _Sleep_Mode *****************
  2264 ;; Defined at:
  2265 ;;		line 301 in file "E:\project\project0508\scm\uf166fan\main.c"
  2266 ;; Parameters:    Size  Location     Type
  2267 ;;		None
  2268 ;; Auto vars:     Size  Location     Type
  2269 ;;		None
  2270 ;; Return value:  Size  Location     Type
  2271 ;;                  1    wreg      void 
  2272 ;; Registers used:
  2273 ;;		wreg, status,2
  2274 ;; Tracked objects:
  2275 ;;		On entry : B00/0
  2276 ;;		On exit  : 0/0
  2277 ;;		Unchanged: 0/0
  2278 ;; Data sizes:     COMMON   BANK0   BANK1
  2279 ;;      Params:         0       0       0
  2280 ;;      Locals:         0       0       0
  2281 ;;      Temps:          0       0       0
  2282 ;;      Totals:         0       0       0
  2283 ;;Total ram usage:        0 bytes
  2284 ;; Hardware stack levels used:    1
  2285 ;; Hardware stack levels required when called:    3
  2286 ;; This function calls:
  2287 ;;		Nothing
  2288 ;; This function is called by:
  2289 ;;		_main
  2290 ;; This function uses a non-reentrant model
  2291 ;;
  2292                           
  2293                           
  2294                           ;psect for function _Sleep_Mode
  2295  0230                     _Sleep_Mode:	
  2296                           
  2297                           ;main.c: 302: INTCON = 0;
  2298                           
  2299                           ;incstack = 0
  2300                           ; Regs used in _Sleep_Mode: [wreg+status,2]
  2301  0230  018B               	clrf	11	;volatile
  2302                           
  2303                           ;main.c: 304: OPTION_REG = 0;
  2304  0231  1683               	bsf	3,5	;RP0=1, select bank1
  2305  0232  0181               	clrf	1	;volatile
  2306                           
  2307                           ;main.c: 306: TRISA = 0B00000000;
  2308  0233  0185               	clrf	5	;volatile
  2309                           
  2310                           ;main.c: 307: PORTA = 0B00000000;
  2311  0234  1283               	bcf	3,5	;RP0=0, select bank0
  2312  0235  0185               	clrf	5	;volatile
  2313                           
  2314                           ;main.c: 308: WPUA = 0B00000000;
  2315  0236  1683               	bsf	3,5	;RP0=1, select bank3
  2316  0237  1703               	bsf	3,6	;RP1=1, select bank3
  2317  0238  018E               	clrf	14	;volatile
  2318                           
  2319                           ;main.c: 310: TRISB = 0B00100000;
  2320  0239  3020               	movlw	32
  2321  023A  1303               	bcf	3,6	;RP1=0, select bank1
  2322  023B  0086               	movwf	6	;volatile
  2323                           
  2324                           ;main.c: 311: PORTB = 0B00000000;
  2325  023C  1283               	bcf	3,5	;RP0=0, select bank0
  2326  023D  0186               	clrf	6	;volatile
  2327                           
  2328                           ;main.c: 313: PORTB = 0;
  2329  023E  0186               	clrf	6	;volatile
  2330                           
  2331                           ;main.c: 314: WPUB = 0B00100000;
  2332  023F  1683               	bsf	3,5	;RP0=1, select bank1
  2333  0240  0095               	movwf	21	;volatile
  2334                           
  2335                           ;main.c: 316: IOCB = 0B00100000;
  2336  0241  0096               	movwf	22	;volatile
  2337                           
  2338                           ;main.c: 317: RBIE = 1;
  2339  0242  158B               	bsf	11,3	;volatile
  2340                           
  2341                           ;main.c: 318: GIE = 1;
  2342  0243  178B               	bsf	11,7	;volatile
  2343                           
  2344                           ;main.c: 320: ADCON0 = 0;
  2345  0244  1283               	bcf	3,5	;RP0=0, select bank0
  2346  0245  019F               	clrf	31	;volatile
  2347                           
  2348                           ;main.c: 322: OSCCON = 0X70;
  2349  0246  3070               	movlw	112
  2350  0247  1683               	bsf	3,5	;RP0=1, select bank1
  2351  0248  008F               	movwf	15	;volatile
  2352                           
  2353                           ;main.c: 324: PORTB;
  2354  0249  1283               	bcf	3,5	;RP0=0, select bank0
  2355  024A  0806               	movf	6,w	;volatile
  2356  024B  0064               	clrwdt	;# 
  2357  024C  0063               	sleep	;# 
  2358  024D  0000               	nop	;# 
  2359  024E  0008               	return
  2360  024F                     __end_of_Sleep_Mode:	
  2361                           
  2362                           	psect	text16
  2363  0348                     __ptext16:	
  2364 ;; *************** function _Init_Config *****************
  2365 ;; Defined at:
  2366 ;;		line 274 in file "E:\project\project0508\scm\uf166fan\main.c"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;		None
  2369 ;; Auto vars:     Size  Location     Type
  2370 ;;		None
  2371 ;; Return value:  Size  Location     Type
  2372 ;;                  1    wreg      void 
  2373 ;; Registers used:
  2374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2375 ;; Tracked objects:
  2376 ;;		On entry : 0/0
  2377 ;;		On exit  : B00/100
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMMON   BANK0   BANK1
  2380 ;;      Params:         0       0       0
  2381 ;;      Locals:         0       0       0
  2382 ;;      Temps:          0       0       0
  2383 ;;      Totals:         0       0       0
  2384 ;;Total ram usage:        0 bytes
  2385 ;; Hardware stack levels used:    1
  2386 ;; Hardware stack levels required when called:    4
  2387 ;; This function calls:
  2388 ;;		_Init_GPIO
  2389 ;;		_Init_Interupt
  2390 ;;		_Init_PWM
  2391 ;;		_Init_System
  2392 ;;		_resetKey
  2393 ;; This function is called by:
  2394 ;;		_main
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           
  2399                           ;psect for function _Init_Config
  2400  0348                     _Init_Config:	
  2401                           
  2402                           ;main.c: 276: Init_System();
  2403                           
  2404                           ;incstack = 0
  2405                           ; Regs used in _Init_Config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2406  0348  237B               	fcall	_Init_System
  2407                           
  2408                           ;main.c: 277: Init_GPIO();
  2409  0349  22DA               	fcall	_Init_GPIO
  2410                           
  2411                           ;main.c: 278: Init_Interupt();
  2412  034A  2365               	fcall	_Init_Interupt
  2413                           
  2414                           ;main.c: 279: Init_PWM();
  2415  034B  230F               	fcall	_Init_PWM
  2416                           
  2417                           ;main.c: 281: IOCB = 0x04;
  2418                           
  2419                           ;main.c: 282: TMR0 = 155;
  2420                           
  2421                           ;main.c: 283: TO = 0;
  2422                           
  2423                           ;main.c: 286: key1.key_index = 5;
  2424                           
  2425                           ;main.c: 288: key2.key_index = 4;
  2426                           
  2427                           ;main.c: 290: key3.key_index = 3;
  2428                           
  2429                           ;main.c: 291: resetKey(&key1);
  2430  034C  225A               	fcall	PL6	;call to abstracted procedure
  2431  034D  22FF               	fcall	_resetKey
  2432                           
  2433                           ;main.c: 292: resetKey(&key2);
  2434  034E  3038               	movlw	(low (_key2| 0))& (0+255)
  2435  034F  22FF               	fcall	_resetKey
  2436                           
  2437                           ;main.c: 293: resetKey(&key3);
  2438  0350  3031               	movlw	(low (_key3| 0))& (0+255)
  2439  0351  22FF               	fcall	_resetKey
  2440                           
  2441                           ;main.c: 295: TRISA = 0;
  2442                           
  2443                           ;main.c: 296: TRISB = 0x7E;
  2444                           
  2445                           ;main.c: 297: TRISC = 0;
  2446  0352  2A67               	ljmp	PL12	;call to abstracted procedure
  2447  0353                     __end_of_Init_Config:	
  2448                           
  2449                           	psect	text17
  2450  02FF                     __ptext17:	
  2451 ;; *************** function _resetKey *****************
  2452 ;; Defined at:
  2453 ;;		line 100 in file "E:\project\project0508\scm\uf166fan\scankey.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  key             1    wreg     PTR struct Keys
  2456 ;;		 -> key3(7), key2(7), key1(7), 
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;  key             1    4[COMMON] PTR struct Keys
  2459 ;;		 -> key3(7), key2(7), key1(7), 
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 800/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMMON   BANK0   BANK1
  2469 ;;      Params:         0       0       0
  2470 ;;      Locals:         1       0       0
  2471 ;;      Temps:          0       0       0
  2472 ;;      Totals:         1       0       0
  2473 ;;Total ram usage:        1 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    3
  2476 ;; This function calls:
  2477 ;;		Nothing
  2478 ;; This function is called by:
  2479 ;;		_Init_Config
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           
  2484                           ;psect for function _resetKey
  2485  02FF                     _resetKey:	
  2486                           
  2487                           ;incstack = 0
  2488                           ; Regs used in _resetKey: [wreg-fsr0h+status,2+status,0]
  2489                           ;resetKey@key stored from wreg
  2490  02FF  00F4               	movwf	resetKey@key
  2491                           
  2492                           ;scankey.c: 101: key->key_timer_cnt1 = key->key_timer_cnt2 = key->key_state_buffer1 = ke
      +                          y->key_state_buffer2 = 0;
  2493  0300  3E03               	addlw	3
  2494  0301  0084               	movwf	4
  2495  0302  1383               	bcf	3,7	;select IRP bank0
  2496  0303  0180               	clrf	0
  2497  0304  0A74               	incf	resetKey@key,w
  2498  0305  0084               	movwf	4
  2499  0306  0180               	clrf	0
  2500  0307  0874               	movf	resetKey@key,w
  2501  0308  3E02               	addlw	2
  2502  0309  0084               	movwf	4
  2503  030A  0180               	clrf	0
  2504  030B  0874               	movf	resetKey@key,w
  2505  030C  0084               	movwf	4
  2506  030D  0180               	clrf	0
  2507  030E  0008               	return
  2508  030F                     __end_of_resetKey:	
  2509                           
  2510                           	psect	text18
  2511  037B                     __ptext18:	
  2512 ;; *************** function _Init_System *****************
  2513 ;; Defined at:
  2514 ;;		line 3 in file "E:\project\project0508\scm\uf166fan\init.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;		None
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;		None
  2519 ;; Return value:  Size  Location     Type
  2520 ;;                  1    wreg      void 
  2521 ;; Registers used:
  2522 ;;		wreg, status,2
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 300/100
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMMON   BANK0   BANK1
  2528 ;;      Params:         0       0       0
  2529 ;;      Locals:         0       0       0
  2530 ;;      Temps:          0       0       0
  2531 ;;      Totals:         0       0       0
  2532 ;;Total ram usage:        0 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    3
  2535 ;; This function calls:
  2536 ;;		Nothing
  2537 ;; This function is called by:
  2538 ;;		_Init_Config
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           
  2543                           ;psect for function _Init_System
  2544  037B                     _Init_System:	
  2545                           
  2546                           ;incstack = 0
  2547                           ; Regs used in _Init_System: [wreg+status,2]
  2548  037B  0000               	nop	;# 
  2549  037C  0064               	clrwdt	;# 
  2550                           
  2551                           ;init.c: 6: INTCON = 0;
  2552                           
  2553                           ;init.c: 7: OSCCON = 0X71;
  2554                           
  2555                           ;init.c: 8: OPTION_REG = 0x00;
  2556  037D  2B56               	ljmp	PL10	;call to abstracted procedure
  2557  037E                     __end_of_Init_System:	
  2558                           
  2559                           	psect	text19
  2560  030F                     __ptext19:	
  2561 ;; *************** function _Init_PWM *****************
  2562 ;; Defined at:
  2563 ;;		line 52 in file "E:\project\project0508\scm\uf166fan\main.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;		None
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;		None
  2568 ;; Return value:  Size  Location     Type
  2569 ;;                  1    wreg      void 
  2570 ;; Registers used:
  2571 ;;		wreg, status,2
  2572 ;; Tracked objects:
  2573 ;;		On entry : 0/0
  2574 ;;		On exit  : 300/100
  2575 ;;		Unchanged: 0/0
  2576 ;; Data sizes:     COMMON   BANK0   BANK1
  2577 ;;      Params:         0       0       0
  2578 ;;      Locals:         0       0       0
  2579 ;;      Temps:          0       0       0
  2580 ;;      Totals:         0       0       0
  2581 ;;Total ram usage:        0 bytes
  2582 ;; Hardware stack levels used:    1
  2583 ;; Hardware stack levels required when called:    3
  2584 ;; This function calls:
  2585 ;;		Nothing
  2586 ;; This function is called by:
  2587 ;;		_closeFan
  2588 ;;		_Init_Config
  2589 ;; This function uses a non-reentrant model
  2590 ;;
  2591                           
  2592                           
  2593                           ;psect for function _Init_PWM
  2594  030F                     _Init_PWM:	
  2595                           
  2596                           ;main.c: 53: CCP1CON = 0x0F;
  2597                           
  2598                           ;incstack = 0
  2599                           ; Regs used in _Init_PWM: [wreg+status,2]
  2600  030F  300F               	movlw	15
  2601  0310  1283               	bcf	3,5	;RP0=0, select bank0
  2602  0311  1303               	bcf	3,6	;RP1=0, select bank0
  2603                           
  2604                           ;main.c: 54: T2CON = 0;
  2605                           
  2606                           ;main.c: 55: PR2 = 7;
  2607                           
  2608                           ;main.c: 57: CCPR1L = 0;
  2609                           
  2610                           ;main.c: 58: TMR2IF = 0;
  2611                           
  2612                           ;main.c: 59: T2CON = 0;
  2613                           
  2614                           ;main.c: 61: TRISC&=~(1<<2);
  2615  0312  2B13               	ljmp	PL8	;call to abstracted procedure
  2616  0313                     __end_of_Init_PWM:	
  2617  0313                     PL8:	
  2618  0313  0097               	movwf	23	;volatile
  2619  0314  0192               	clrf	18	;volatile
  2620  0315  3007               	movlw	7
  2621  0316  1683               	bsf	3,5	;RP0=1, select bank1
  2622  0317  0092               	movwf	18	;volatile
  2623  0318  1283               	bcf	3,5	;RP0=0, select bank0
  2624  0319  0195               	clrf	21	;volatile
  2625  031A  108C               	bcf	12,1	;volatile
  2626  031B  0192               	clrf	18	;volatile
  2627  031C  1683               	bsf	3,5	;RP0=1, select bank1
  2628  031D  1107               	bcf	7,2	;volatile
  2629  031E  0008               	return
  2630  031F                     __end_ofPL8:	
  2631                           
  2632                           	psect	text20
  2633  0365                     __ptext20:	
  2634 ;; *************** function _Init_Interupt *****************
  2635 ;; Defined at:
  2636 ;;		line 27 in file "E:\project\project0508\scm\uf166fan\init.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;		None
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;		None
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		wreg, status,2
  2645 ;; Tracked objects:
  2646 ;;		On entry : 300/100
  2647 ;;		On exit  : 300/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMMON   BANK0   BANK1
  2650 ;;      Params:         0       0       0
  2651 ;;      Locals:         0       0       0
  2652 ;;      Temps:          0       0       0
  2653 ;;      Totals:         0       0       0
  2654 ;;Total ram usage:        0 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; Hardware stack levels required when called:    3
  2657 ;; This function calls:
  2658 ;;		Nothing
  2659 ;; This function is called by:
  2660 ;;		_Init_Config
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           
  2665                           ;psect for function _Init_Interupt
  2666  0365                     _Init_Interupt:	
  2667                           
  2668                           ;init.c: 28: OPTION_REG = 0x00;
  2669                           
  2670                           ;incstack = 0
  2671                           ; Regs used in _Init_Interupt: [wreg+status,2]
  2672                           
  2673                           ;init.c: 29: TMR0 = 0;
  2674                           
  2675                           ;init.c: 30: INTCON = 0xE0;
  2676  0365  2B66               	ljmp	PL16	;call to abstracted procedure
  2677  0366                     __end_of_Init_Interupt:	
  2678  0366                     PL16:	
  2679  0366  0181               	clrf	1	;volatile
  2680  0367  1283               	bcf	3,5	;RP0=0, select bank0
  2681  0368  0181               	clrf	1	;volatile
  2682  0369  30E0               	movlw	224
  2683  036A  008B               	movwf	11	;volatile
  2684  036B  0008               	return
  2685  036C                     __end_ofPL16:	
  2686                           
  2687                           	psect	text21
  2688  02DA                     __ptext21:	
  2689 ;; *************** function _Init_GPIO *****************
  2690 ;; Defined at:
  2691 ;;		line 13 in file "E:\project\project0508\scm\uf166fan\init.c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;		None
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;		None
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      void 
  2698 ;; Registers used:
  2699 ;;		wreg, status,2
  2700 ;; Tracked objects:
  2701 ;;		On entry : 300/100
  2702 ;;		On exit  : 300/100
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMMON   BANK0   BANK1
  2705 ;;      Params:         0       0       0
  2706 ;;      Locals:         0       0       0
  2707 ;;      Temps:          0       0       0
  2708 ;;      Totals:         0       0       0
  2709 ;;Total ram usage:        0 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    3
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_Init_Config
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           
  2720                           ;psect for function _Init_GPIO
  2721  02DA                     _Init_GPIO:	
  2722                           
  2723                           ;init.c: 14: TRISA = 0;
  2724                           
  2725                           ;incstack = 0
  2726                           ; Regs used in _Init_GPIO: [wreg+status,2]
  2727                           
  2728                           ;init.c: 15: TRISB = 0;
  2729                           
  2730                           ;init.c: 16: TRISC = 0;
  2731                           
  2732                           ;init.c: 17: WPUA = 0xFF;
  2733                           
  2734                           ;init.c: 18: WPUB = 0xFF;
  2735                           
  2736                           ;init.c: 19: WPUC = 0xFF;
  2737                           
  2738                           ;init.c: 20: PORTA = 0xFF;
  2739                           
  2740                           ;init.c: 21: PORTB = 0xFF;
  2741                           
  2742                           ;init.c: 22: PORTC = 0xFF;
  2743                           
  2744                           ;init.c: 23: IOCB = 0x00;
  2745  02DA  2ADB               	ljmp	PL2	;call to abstracted procedure
  2746  02DB                     __end_of_Init_GPIO:	
  2747  02DB                     PL2:	
  2748  02DB  0185               	clrf	5	;volatile
  2749  02DC  0186               	clrf	6	;volatile
  2750  02DD  0187               	clrf	7	;volatile
  2751  02DE  30FF               	movlw	255
  2752  02DF  1703               	bsf	3,6	;RP1=1, select bank3
  2753  02E0  008E               	movwf	14	;volatile
  2754  02E1  1303               	bcf	3,6	;RP1=0, select bank1
  2755  02E2  0095               	movwf	21	;volatile
  2756  02E3  1703               	bsf	3,6	;RP1=1, select bank3
  2757  02E4  008F               	movwf	15	;volatile
  2758  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  2759  02E6  1303               	bcf	3,6	;RP1=0, select bank0
  2760  02E7  0085               	movwf	5	;volatile
  2761  02E8  0086               	movwf	6	;volatile
  2762  02E9  0087               	movwf	7	;volatile
  2763  02EA  1683               	bsf	3,5	;RP0=1, select bank1
  2764  02EB  0196               	clrf	22	;volatile
  2765  02EC  0008               	return
  2766  02ED                     __end_ofPL2:	
  2767                           
  2768                           	psect	text22
  2769  02C4                     __ptext22:	
  2770 ;; *************** function _Timer0_Isr *****************
  2771 ;; Defined at:
  2772 ;;		line 344 in file "E:\project\project0508\scm\uf166fan\main.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;		None
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;		None
  2777 ;; Return value:  Size  Location     Type
  2778 ;;                  1    wreg      void 
  2779 ;; Registers used:
  2780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMMON   BANK0   BANK1
  2786 ;;      Params:         0       0       0
  2787 ;;      Locals:         0       0       0
  2788 ;;      Temps:          3       0       0
  2789 ;;      Totals:         3       0       0
  2790 ;;Total ram usage:        3 bytes
  2791 ;; Hardware stack levels used:    1
  2792 ;; Hardware stack levels required when called:    2
  2793 ;; This function calls:
  2794 ;;		i1_Init_Config
  2795 ;; This function is called by:
  2796 ;;		Interrupt level 1
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           
  2801                           ;psect for function _Timer0_Isr
  2802  02C4                     _Timer0_Isr:	
  2803                           
  2804                           ;main.c: 345: if (T0IF) {
  2805  02C4  1D0B               	btfss	11,2	;volatile
  2806  02C5  2ACD               	goto	i1l3208
  2807                           
  2808                           ;main.c: 347: TMR0 += 155;
  2809  02C6  309B               	movlw	155
  2810  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  2811  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  2812  02C9  0781               	addwf	1,f	;volatile
  2813                           
  2814                           ;main.c: 350: T0IF = 0;
  2815  02CA  110B               	bcf	11,2	;volatile
  2816                           
  2817                           ;main.c: 351: time0Flag = 1;
  2818  02CB  01F9               	clrf	_time0Flag
  2819  02CC  0AF9               	incf	_time0Flag,f
  2820  02CD                     i1l3208:	
  2821                           
  2822                           ;main.c: 353: }
  2823                           ;main.c: 355: if (RBIF) {
  2824  02CD  1C0B               	btfss	11,0	;volatile
  2825  02CE  2AD1               	goto	i1l657
  2826                           
  2827                           ;main.c: 356: RBIF = 0;
  2828  02CF  100B               	bcf	11,0	;volatile
  2829                           
  2830                           ;main.c: 357: Init_Config();
  2831  02D0  224F               	fcall	i1_Init_Config
  2832  02D1                     i1l657:	
  2833  02D1  0873               	movf	??_Timer0_Isr+2,w
  2834  02D2  008A               	movwf	10
  2835  02D3  0872               	movf	??_Timer0_Isr+1,w
  2836  02D4  0084               	movwf	4
  2837  02D5  0E71               	swapf	??_Timer0_Isr^(0+-128),w
  2838  02D6  0083               	movwf	3
  2839  02D7  0EFE               	swapf	126,f
  2840  02D8  0E7E               	swapf	126,w
  2841  02D9  0009               	retfie
  2842  02DA                     __end_of_Timer0_Isr:	
  2843                           
  2844                           	psect	intentry
  2845  0004                     __pintentry:	
  2846                           ;incstack = 0
  2847                           ; Regs used in _Timer0_Isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2848                           
  2849  0004                     interrupt_function:	
  2850  007E                     saved_w	set	btemp
  2851  0004  00FE               	movwf	btemp
  2852  0005  0E03               	swapf	3,w
  2853  0006  00F1               	movwf	??_Timer0_Isr
  2854  0007  0804               	movf	4,w
  2855  0008  00F2               	movwf	??_Timer0_Isr+1
  2856  0009  080A               	movf	10,w
  2857  000A  00F3               	movwf	??_Timer0_Isr+2
  2858  000B  2AC4               	ljmp	_Timer0_Isr
  2859                           
  2860                           	psect	text23
  2861  024F                     __ptext23:	
  2862 ;; *************** function i1_Init_Config *****************
  2863 ;; Defined at:
  2864 ;;		line 274 in file "E:\project\project0508\scm\uf166fan\main.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;		None
  2867 ;; Auto vars:     Size  Location     Type
  2868 ;;		None
  2869 ;; Return value:  Size  Location     Type
  2870 ;;                  1    wreg      void 
  2871 ;; Registers used:
  2872 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2873 ;; Tracked objects:
  2874 ;;		On entry : 0/0
  2875 ;;		On exit  : B00/100
  2876 ;;		Unchanged: 0/0
  2877 ;; Data sizes:     COMMON   BANK0   BANK1
  2878 ;;      Params:         0       0       0
  2879 ;;      Locals:         0       0       0
  2880 ;;      Temps:          0       0       0
  2881 ;;      Totals:         0       0       0
  2882 ;;Total ram usage:        0 bytes
  2883 ;; Hardware stack levels used:    1
  2884 ;; Hardware stack levels required when called:    1
  2885 ;; This function calls:
  2886 ;;		i1_Init_GPIO
  2887 ;;		i1_Init_Interupt
  2888 ;;		i1_Init_PWM
  2889 ;;		i1_Init_System
  2890 ;;		i1_resetKey
  2891 ;; This function is called by:
  2892 ;;		_Timer0_Isr
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           
  2897                           ;psect for function i1_Init_Config
  2898  024F                     i1_Init_Config:	
  2899                           
  2900                           ;main.c: 276: Init_System();
  2901                           
  2902                           ;incstack = 0
  2903                           ; Regs used in i1_Init_Config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2904  024F  2353               	fcall	i1_Init_System
  2905                           
  2906                           ;main.c: 277: Init_GPIO();
  2907  0250  2381               	fcall	i1_Init_GPIO
  2908                           
  2909                           ;main.c: 278: Init_Interupt();
  2910  0251  2380               	fcall	i1_Init_Interupt
  2911                           
  2912                           ;main.c: 279: Init_PWM();
  2913  0252  237E               	fcall	i1_Init_PWM
  2914                           
  2915                           ;main.c: 281: IOCB = 0x04;
  2916                           
  2917                           ;main.c: 282: TMR0 = 155;
  2918                           
  2919                           ;main.c: 283: TO = 0;
  2920                           
  2921                           ;main.c: 286: key1.key_index = 5;
  2922                           
  2923                           ;main.c: 288: key2.key_index = 4;
  2924                           
  2925                           ;main.c: 290: key3.key_index = 3;
  2926                           
  2927                           ;main.c: 291: resetKey(&key1);
  2928  0253  225A               	fcall	PL6	;call to abstracted procedure
  2929  0254  231F               	fcall	i1_resetKey
  2930                           
  2931                           ;main.c: 292: resetKey(&key2);
  2932  0255  3038               	movlw	(low (_key2| 0))& (0+255)
  2933  0256  231F               	fcall	i1_resetKey
  2934                           
  2935                           ;main.c: 293: resetKey(&key3);
  2936  0257  3031               	movlw	(low (_key3| 0))& (0+255)
  2937  0258  231F               	fcall	i1_resetKey
  2938                           
  2939                           ;main.c: 295: TRISA = 0;
  2940                           
  2941                           ;main.c: 296: TRISB = 0x7E;
  2942                           
  2943                           ;main.c: 297: TRISC = 0;
  2944  0259  2A67               	ljmp	PL12	;call to abstracted procedure
  2945  025A                     __end_ofi1_Init_Config:	
  2946  025A                     PL6:	
  2947  025A  3004               	movlw	4
  2948  025B  0096               	movwf	22	;volatile
  2949  025C  309B               	movlw	155
  2950  025D  1283               	bcf	3,5	;RP0=0, select bank0
  2951  025E  0081               	movwf	1	;volatile
  2952  025F  1203               	bcf	3,4	;volatile
  2953  0260  3005               	movlw	5
  2954  0261  00C5               	movwf	_key1+6
  2955  0262  3004               	movlw	4
  2956  0263  00BE               	movwf	_key2+6
  2957  0264  3003               	movlw	3
  2958  0265  00B7               	movwf	_key3+6
  2959  0266  343F               	retlw	(low (_key1| 0))& (0+255)
  2960  0267                     __end_ofPL6:	
  2961  0267                     PL12:	
  2962  0267  1683               	bsf	3,5	;RP0=1, select bank1
  2963  0268  1303               	bcf	3,6	;RP1=0, select bank1
  2964  0269  0185               	clrf	5	;volatile
  2965  026A  307E               	movlw	126
  2966  026B  0086               	movwf	6	;volatile
  2967  026C  0187               	clrf	7	;volatile
  2968  026D  0008               	return
  2969  026E                     __end_ofPL12:	
  2970                           
  2971                           	psect	text24
  2972  031F                     __ptext24:	
  2973 ;; *************** function i1_resetKey *****************
  2974 ;; Defined at:
  2975 ;;		line 100 in file "E:\project\project0508\scm\uf166fan\scankey.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  key             1    wreg     PTR struct Keys
  2978 ;;		 -> key3(7), key2(7), key1(7), 
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;  key             1    0[COMMON] PTR struct Keys
  2981 ;;		 -> key3(7), key2(7), key1(7), 
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      void 
  2984 ;; Registers used:
  2985 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 800/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMMON   BANK0   BANK1
  2991 ;;      Params:         0       0       0
  2992 ;;      Locals:         1       0       0
  2993 ;;      Temps:          0       0       0
  2994 ;;      Totals:         1       0       0
  2995 ;;Total ram usage:        1 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; This function calls:
  2998 ;;		Nothing
  2999 ;; This function is called by:
  3000 ;;		i1_Init_Config
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           
  3005                           ;psect for function i1_resetKey
  3006  031F                     i1_resetKey:	
  3007                           
  3008                           ;incstack = 0
  3009                           ; Regs used in i1_resetKey: [wreg-fsr0h+status,2+status,0]
  3010                           ;i1resetKey@key stored from wreg
  3011  031F  00F0               	movwf	i1resetKey@key
  3012                           
  3013                           ;scankey.c: 101: key->key_timer_cnt1 = key->key_timer_cnt2 = key->key_state_buffer1 = ke
      +                          y->key_state_buffer2 = 0;
  3014  0320  3E03               	addlw	3
  3015  0321  0084               	movwf	4
  3016  0322  1383               	bcf	3,7	;select IRP bank0
  3017  0323  0180               	clrf	0
  3018  0324  0A70               	incf	i1resetKey@key,w
  3019  0325  0084               	movwf	4
  3020  0326  0180               	clrf	0
  3021  0327  0870               	movf	i1resetKey@key,w
  3022  0328  3E02               	addlw	2
  3023  0329  0084               	movwf	4
  3024  032A  0180               	clrf	0
  3025  032B  0870               	movf	i1resetKey@key,w
  3026  032C  0084               	movwf	4
  3027  032D  0180               	clrf	0
  3028  032E  0008               	return
  3029  032F                     __end_ofi1_resetKey:	
  3030                           
  3031                           	psect	text25
  3032  0353                     __ptext25:	
  3033 ;; *************** function i1_Init_System *****************
  3034 ;; Defined at:
  3035 ;;		line 3 in file "E:\project\project0508\scm\uf166fan\init.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;		None
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;		None
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  1    wreg      void 
  3042 ;; Registers used:
  3043 ;;		wreg, status,2
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 300/100
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMMON   BANK0   BANK1
  3049 ;;      Params:         0       0       0
  3050 ;;      Locals:         0       0       0
  3051 ;;      Temps:          0       0       0
  3052 ;;      Totals:         0       0       0
  3053 ;;Total ram usage:        0 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; This function calls:
  3056 ;;		Nothing
  3057 ;; This function is called by:
  3058 ;;		i1_Init_Config
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           
  3063                           ;psect for function i1_Init_System
  3064  0353                     i1_Init_System:	
  3065                           
  3066                           ;incstack = 0
  3067                           ; Regs used in i1_Init_System: [wreg+status,2]
  3068  0353  0000               	nop	;# 
  3069  0354  0064               	clrwdt	;# 
  3070                           
  3071                           ;init.c: 6: INTCON = 0;
  3072                           
  3073                           ;init.c: 7: OSCCON = 0X71;
  3074                           
  3075                           ;init.c: 8: OPTION_REG = 0x00;
  3076  0355  2B56               	ljmp	PL10	;call to abstracted procedure
  3077  0356                     __end_ofi1_Init_System:	
  3078  0356                     PL10:	
  3079  0356  018B               	clrf	11	;volatile
  3080  0357  3071               	movlw	113
  3081  0358  1683               	bsf	3,5	;RP0=1, select bank1
  3082  0359  1303               	bcf	3,6	;RP1=0, select bank1
  3083  035A  008F               	movwf	15	;volatile
  3084  035B  0181               	clrf	1	;volatile
  3085  035C  0008               	return
  3086  035D                     __end_ofPL10:	
  3087                           
  3088                           	psect	text26
  3089  037E                     __ptext26:	
  3090 ;; *************** function i1_Init_PWM *****************
  3091 ;; Defined at:
  3092 ;;		line 52 in file "E:\project\project0508\scm\uf166fan\main.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;		None
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;		None
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  1    wreg      void 
  3099 ;; Registers used:
  3100 ;;		wreg, status,2
  3101 ;; Tracked objects:
  3102 ;;		On entry : 300/0
  3103 ;;		On exit  : 300/100
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMMON   BANK0   BANK1
  3106 ;;      Params:         0       0       0
  3107 ;;      Locals:         0       0       0
  3108 ;;      Temps:          0       0       0
  3109 ;;      Totals:         0       0       0
  3110 ;;Total ram usage:        0 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; This function calls:
  3113 ;;		Nothing
  3114 ;; This function is called by:
  3115 ;;		i1_Init_Config
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           
  3120                           ;psect for function i1_Init_PWM
  3121  037E                     i1_Init_PWM:	
  3122                           
  3123                           ;main.c: 53: CCP1CON = 0x0F;
  3124                           
  3125                           ;incstack = 0
  3126                           ; Regs used in i1_Init_PWM: [wreg+status,2]
  3127  037E  300F               	movlw	15
  3128                           
  3129                           ;main.c: 54: T2CON = 0;
  3130                           
  3131                           ;main.c: 55: PR2 = 7;
  3132                           
  3133                           ;main.c: 57: CCPR1L = 0;
  3134                           
  3135                           ;main.c: 58: TMR2IF = 0;
  3136                           
  3137                           ;main.c: 59: T2CON = 0;
  3138                           
  3139                           ;main.c: 61: TRISC&=~(1<<2);
  3140  037F  2B13               	ljmp	PL8	;call to abstracted procedure
  3141  0380                     __end_ofi1_Init_PWM:	
  3142                           
  3143                           	psect	text27
  3144  0380                     __ptext27:	
  3145 ;; *************** function i1_Init_Interupt *****************
  3146 ;; Defined at:
  3147 ;;		line 27 in file "E:\project\project0508\scm\uf166fan\init.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;		None
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;		None
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      void 
  3154 ;; Registers used:
  3155 ;;		wreg, status,2
  3156 ;; Tracked objects:
  3157 ;;		On entry : 300/100
  3158 ;;		On exit  : 300/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMMON   BANK0   BANK1
  3161 ;;      Params:         0       0       0
  3162 ;;      Locals:         0       0       0
  3163 ;;      Temps:          0       0       0
  3164 ;;      Totals:         0       0       0
  3165 ;;Total ram usage:        0 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; This function calls:
  3168 ;;		Nothing
  3169 ;; This function is called by:
  3170 ;;		i1_Init_Config
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           
  3175                           ;psect for function i1_Init_Interupt
  3176  0380                     i1_Init_Interupt:	
  3177                           
  3178                           ;init.c: 28: OPTION_REG = 0x00;
  3179                           
  3180                           ;incstack = 0
  3181                           ; Regs used in i1_Init_Interupt: [wreg+status,2]
  3182                           
  3183                           ;init.c: 29: TMR0 = 0;
  3184                           
  3185                           ;init.c: 30: INTCON = 0xE0;
  3186  0380  2B66               	ljmp	PL16	;call to abstracted procedure
  3187  0381                     __end_ofi1_Init_Interupt:	
  3188                           
  3189                           	psect	text28
  3190  0381                     __ptext28:	
  3191 ;; *************** function i1_Init_GPIO *****************
  3192 ;; Defined at:
  3193 ;;		line 13 in file "E:\project\project0508\scm\uf166fan\init.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;		None
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;		None
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  1    wreg      void 
  3200 ;; Registers used:
  3201 ;;		wreg, status,2
  3202 ;; Tracked objects:
  3203 ;;		On entry : 300/100
  3204 ;;		On exit  : 300/100
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMMON   BANK0   BANK1
  3207 ;;      Params:         0       0       0
  3208 ;;      Locals:         0       0       0
  3209 ;;      Temps:          0       0       0
  3210 ;;      Totals:         0       0       0
  3211 ;;Total ram usage:        0 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; This function calls:
  3214 ;;		Nothing
  3215 ;; This function is called by:
  3216 ;;		i1_Init_Config
  3217 ;; This function uses a non-reentrant model
  3218 ;;
  3219                           
  3220                           
  3221                           ;psect for function i1_Init_GPIO
  3222  0381                     i1_Init_GPIO:	
  3223                           
  3224                           ;init.c: 14: TRISA = 0;
  3225                           
  3226                           ;incstack = 0
  3227                           ; Regs used in i1_Init_GPIO: [wreg+status,2]
  3228                           
  3229                           ;init.c: 15: TRISB = 0;
  3230                           
  3231                           ;init.c: 16: TRISC = 0;
  3232                           
  3233                           ;init.c: 17: WPUA = 0xFF;
  3234                           
  3235                           ;init.c: 18: WPUB = 0xFF;
  3236                           
  3237                           ;init.c: 19: WPUC = 0xFF;
  3238                           
  3239                           ;init.c: 20: PORTA = 0xFF;
  3240                           
  3241                           ;init.c: 21: PORTB = 0xFF;
  3242                           
  3243                           ;init.c: 22: PORTC = 0xFF;
  3244                           
  3245                           ;init.c: 23: IOCB = 0x00;
  3246  0381  2ADB               	ljmp	PL2	;call to abstracted procedure
  3247  0382                     __end_ofi1_Init_GPIO:	
  3248  007E                     btemp	set	126	;btemp
  3249  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     11      49
    BANK1            80      0       0

Pointer List with Targets:

    resetKey@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 

    key_driver@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 

    sacnKeyInput@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 


Critical Paths under _main in COMMON

    _scanKeys->_sacnKeyInput
    _readVrefADC->_ADC_Result
    _readVrefADC->_DelayXms
    _checkKeys->_key_driver
    _checkKeys->_setFanLevel
    _checkFan->_setFanLevel
    _setFanLevel->_setLedOn
    _closeFan->_setLedOn
    _Init_Config->_resetKey

Critical Paths under _Timer0_Isr in COMMON

    i1_Init_Config->i1_resetKey

Critical Paths under _main in BANK0

    _main->_checkKeys
    _readVrefADC->_ADC_Sample
    _checkKeys->_checkFan
    _setFanLevel->___awdiv

Critical Paths under _Timer0_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer0_Isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3009
                        _Init_Config
                         _Sleep_Mode
                          _checkKeys
                     _checkUsbStatus
                        _readVrefADC
                           _scanKeys
 ---------------------------------------------------------------------------------
 (1) _scanKeys                                             0     0      0     169
                       _sacnKeyInput
 ---------------------------------------------------------------------------------
 (2) _sacnKeyInput                                         3     3      0     169
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _readVrefADC                                          1     1      0     533
                                              8 BANK0      1     1      0
                         _ADC_Result
                         _ADC_Sample
                           _DelayXms
 ---------------------------------------------------------------------------------
 (2) _DelayXms                                             3     3      0     167
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                           8     8      0     291
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Result                                           3     3      0      65
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _checkUsbStatus                                       1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _checkKeys                                            2     2      0    2138
                                              9 BANK0      2     2      0
                           _checkFan
                           _closeFan
                         _key_driver
                        _setFanLevel
 ---------------------------------------------------------------------------------
 (2) _key_driver                                           3     3      0     442
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _checkFan                                             1     1      0     814
                                              8 BANK0      1     1      0
                           _closeFan
                        _setFanLevel
 ---------------------------------------------------------------------------------
 (2) _setFanLevel                                          4     4      0     792
                                              5 COMMON     2     2      0
                            ___awdiv
                           _setLedOn
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     606
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _closeFan                                             0     0      0      22
                           _Init_PWM
                           _setLedOn
 ---------------------------------------------------------------------------------
 (3) _setLedOn                                             1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Config                                          0     0      0     169
                          _Init_GPIO
                      _Init_Interupt
                           _Init_PWM
                        _Init_System
                           _resetKey
 ---------------------------------------------------------------------------------
 (2) _resetKey                                             1     1      0     169
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_Interupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Timer0_Isr                                           3     3      0      88
                                              1 COMMON     3     3      0
                      i1_Init_Config
 ---------------------------------------------------------------------------------
 (6) i1_Init_Config                                        0     0      0      88
                        i1_Init_GPIO
                    i1_Init_Interupt
                         i1_Init_PWM
                      i1_Init_System
                         i1_resetKey
 ---------------------------------------------------------------------------------
 (7) i1_resetKey                                           1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) i1_Init_System                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_Init_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_Init_Interupt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_Init_GPIO                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_Config
     _Init_GPIO
     _Init_Interupt
     _Init_PWM
     _Init_System
     _resetKey
   _Sleep_Mode
   _checkKeys
     _checkFan
       _closeFan
         _Init_PWM
         _setLedOn
       _setFanLevel
         ___awdiv
         _setLedOn
     _closeFan
       _Init_PWM
       _setLedOn
     _key_driver
     _setFanLevel
       ___awdiv
       _setLedOn
   _checkUsbStatus
   _readVrefADC
     _ADC_Result
     _ADC_Sample
     _DelayXms
   _scanKeys
     _sacnKeyInput

 _Timer0_Isr (ROOT)
   i1_Init_Config
     i1_Init_GPIO
     i1_Init_Interupt
     i1_Init_PWM
     i1_Init_System
     i1_resetKey

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      B      31       5       61.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3B       8        0.0%
ABS                  0      0      3B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue May 12 17:52:16 2020

         ??i1_Init_System 0070                         pc 0002                        PL2 02DB  
                      PL4 00AF                        PL6 025A                        PL8 0313  
                      _TO 001C              ___awdiv@sign 004B                        fsr 0004  
                     PL10 0356                       PL20 00BE                       PL12 0267  
                     PL14 01B4                       PL16 0366                       PL18 01BB  
                     l614 018A                       l630 01FD                       l616 018E  
                     l617 0192                       l618 0197                       l619 019C  
                     l579 02C2                       _GIE 005F                       _PR2 0092  
                     u664 027B                       u665 0279       __size_of_ADC_Sample 0096  
     __size_of_ADC_Result 001D                       fsr0 0004                       indf 0000  
                    S3554 0377                      S3556 0372                      l3300 00FB  
                    l3052 02B8                      l3304 0103                      l3320 0165  
                    l3312 0150                      l3330 0171                      l3332 0173  
                    l3340 0186                      l3324 016A                      l3500 0226  
                    l3334 0175                      l3350 01D9                      l3342 01C1  
                    l3422 033F                      l3272 00CD                      l3328 016F  
                    l3352 01DB                      l3416 02A6                      l3432 0344  
                    l3338 0178                      l2820 032F                      l3278 00D6  
                    l3446 01F5                      l3454 01F8                      l3382 004D  
                    l3374 0034                      l1791 0063                      l2736 01A5  
                    l3288 00E4                      l3464 0206                      l3480 0211  
                    l1785 002F                      l3386 0057                      l3490 021A  
                    l3388 005F                      l2862 0110                      l1798 02A1  
                    l2880 0127                      l2874 0122                      l2866 0118  
                    l2892 013B                      l2886 0135                      l2894 0148  
                    l2888 0137                      _T0IF 005A                      u1125 01CF  
                    u1205 0053                      u1055 00ED                      u1215 005D  
                    _IOCB 0096                      u1265 0099                      _RBIE 005B  
                    _RBIF 0058                      _TMR0 0001    __end_of_checkUsbStatus 02C4  
                    _WPUA 018E                      _WPUB 0095                      _WPUC 018F  
                    _key1 003F                      _key2 0038                      _key3 0031  
                    _main 020F                      btemp 007E                i1_resetKey 031F  
                    start 000C             ??_Init_Config 0075             ??_Init_System 0074  
           _Init_Interupt 0365                     ?_main 0070           __end_of___awdiv 0108  
         ___awdiv@divisor 0046                     _T2CON 0012              ?_readVrefADC 0070  
      key_driver@key_read 0075                     i1l657 02D1           ___awdiv@counter 004A  
                   _PORTA 0005                     _PORTB 0006                     _PORTC 0007  
                   _TRISA 0085                     _TRISB 0086                     _TRISC 0087  
             ?i1_Init_PWM 0070                     pclath 000A           ?_checkUsbStatus 0070  
                   status 0003                     wtemp0 007E          __end_of_DelayXms 0348  
            ?_setFanLevel 0070           __initialization 000D              __end_of_main 0230  
        __end_of_Init_PWM 0313            ?_Init_Interupt 0070       __end_of_Init_Config 0353  
          _fan_check_time 0028                    ??_main 0077       __end_of_Init_System 037E  
                  _ADCON0 001F                    _ADCON1 009F                    _ADRESH 001E  
                  _ADRESL 009E                    _CCPR1L 0015          ___awdiv@dividend 0048  
                  _GODONE 00F9                    i1l3208 02CD                    _INTCON 000B  
           ?_sacnKeyInput 0070        __size_of_Init_GPIO 0001                    _OSCCON 008F  
                  _TMR2IF 0061              ??_ADC_Sample 0046          __end_of_checkFan 01ED  
            ??_ADC_Result 0074               ?i1_resetKey 0070                _Sleep_Mode 0230  
              _Timer0_Isr 02C4          __end_of_closeFan 033D          setLedOn@ledIndex 0074  
               ??___awdiv 0074       __size_ofi1_Init_PWM 0002              ?i1_Init_GPIO 0070  
        __end_of_scanKeys 02FF          ___awdiv@quotient 004C          __end_of_setLedOn 01B4  
        __end_of_resetKey 030F              __pdataCOMMON 0077        __end_of_ADC_Sample 00AF  
      __end_of_ADC_Result 02A8           i1_Init_Interupt 0380                    saved_w 007E  
          ??_sacnKeyInput 0074   __end_of__initialization 0017               _Init_Config 0348  
          __pcstackCOMMON 0070           ??_Init_Interupt 0074        __size_of_checkKeys 0022  
             _Init_System 037B                __end_ofPL2 02ED                __end_ofPL4 00BE  
              __end_ofPL6 0267                __end_ofPL8 031F         __end_of_Init_GPIO 02DB  
     __size_ofi1_resetKey 0010                 ?_DelayXms 0070      __size_of_readVrefADC 0006  
              __pbssBANK0 0020                 ?_Init_PWM 0070               ?_Sleep_Mode 0070  
             ?_Timer0_Isr 0070     __end_ofi1_Init_Config 025A                __pmaintext 020F  
    __size_of_setFanLevel 003E                __pintentry 0004                   _CCP1CON 0017  
   __end_ofi1_Init_System 0356   __end_ofi1_Init_Interupt 0381                 ?_checkFan 0070  
    key_driver@key_return 0074                ??_DelayXms 0074          ??_checkUsbStatus 0074  
               ?_closeFan 0070              ??i1_Init_PWM 0070         __end_of_checkKeys 020F  
              ??_Init_PWM 0074                 ?_scanKeys 0070                 ?_setLedOn 0070  
               ?_resetKey 0070               resetKey@key 0074           ADC_Sample@admax 0024  
         ADC_Sample@admin 0026           ADC_Sample@adsum 0020                   ___awdiv 00C3  
              _key_driver 0108      __end_of_sacnKeyInput 028B        __end_ofi1_Init_PWM 0380  
                 __ptext1 02ED                   __ptext2 026E                   __ptext3 036C  
                 __ptext4 033D                   __ptext5 0019                   __ptext6 028B  
                 __ptext7 02A8                   __ptext8 01ED                   __ptext9 0108  
    __size_ofi1_Init_GPIO 0001                ??_checkFan 004E       __size_of_Sleep_Mode 001F  
     __size_of_Timer0_Isr 0016                ??_closeFan 0075                   clrloop0 035E  
    end_of_initialization 0017                 DelayXms@i 0075                 DelayXms@j 0076  
               DelayXms@x 0074                ??_scanKeys 0077              ??i1_resetKey 0070  
              ??_setLedOn 0074                ??_resetKey 0074           sacnKeyInput@key 0076  
        ?i1_Init_Interupt 0070        __end_ofi1_resetKey 032F              ?_Init_Config 0070  
             ?_key_driver 0070              ?_Init_System 0070          setFanLevel@level 0075  
           __pidataCOMMON 0000               __end_ofPL10 035D               __end_ofPL20 00C3  
             __end_ofPL12 026E               __end_ofPL14 01BB               __end_ofPL16 036C  
             __end_ofPL18 01C1       start_initialization 000D                 _Init_GPIO 02DA  
       __size_of_DelayXms 000B         __size_of_Init_PWM 0004              ??_Sleep_Mode 0074  
            ??_Timer0_Isr 0071     __size_of_sacnKeyInput 001D         ADC_Sample@ad_temp 004C  
   __end_of_Init_Interupt 0366         ADC_Sample@adtimes 0030             ??_readVrefADC 0077  
             __pbssCOMMON 0079                ?_Init_GPIO 0070                 ___latbits 0000  
           __pcstackBANK0 0046         __size_of_checkFan 002C        __end_of_Sleep_Mode 024F  
      __end_of_Timer0_Isr 02DA       __size_of_key_driver 0042         __size_of_closeFan 000E  
            _sacnKeyInput 026E              _currentLevel 0078                 _checkKeys 01ED  
     checkKeys@key2Status 004F             ??_setFanLevel 0075       checkKeys@key3Status 0050  
       __size_of_scanKeys 0012         __size_of_setLedOn 002C                  ?___awdiv 0046  
       __size_of_resetKey 0010                 __pswtext1 0377                 __pswtext2 0372  
               _count10Ms 002A                 _countTime 002C            ADC_Sample@adch 004A  
  __size_ofi1_Init_Config 000B       __end_of_readVrefADC 0372               ADC_Sample@i 004B  
  __size_ofi1_Init_System 0003         interrupt_function 0004               ADC_Result@i 0076  
              ?_checkKeys 0070                 _time0Flag 0079                 clear_ram0 035D  
    __size_of_Init_Config 000B      setFanLevel@tempLevel 0076             ??i1_Init_GPIO 0070  
     __end_of_setFanLevel 0188      __size_of_Init_System 0003            ADC_Result@adch 0075  
             ??_Init_GPIO 0074                  _DelayXms 033D                  _Init_PWM 030F  
              _ADC_Sample 0019                _ADC_Result 028B   __size_of_checkUsbStatus 001C  
           i1_Init_Config 024F              ??_key_driver 0074          __size_of___awdiv 0045  
           key_driver@key 0076             i1_Init_System 0353               _readVrefADC 036C  
                _checkFan 01C1                _FAN_STATUS 0077       __end_ofi1_Init_GPIO 0382  
                _adresult 002E  __size_ofi1_Init_Interupt 0001                  __ptext10 01C1  
                __ptext11 014A                  __ptext20 0365                  __ptext12 00C3  
                __ptext21 02DA                  __ptext13 032F                  __ptext22 02C4  
                __ptext14 0188                  __ptext23 024F                  __ptext15 0230  
                __ptext24 031F                  __ptext16 0348                  __ptext25 0353  
                __ptext17 02FF                  __ptext26 037E                  __ptext18 037B  
                __ptext27 0380                  __ptext19 030F                  __ptext28 0381  
                _closeFan 032F        __end_of_key_driver 014A             __size_of_main 0021  
             ??_checkKeys 0077                  _scanKeys 02ED                  _setLedOn 0188  
                _resetKey 02FF               _setFanLevel 014A            ?i1_Init_Config 0070  
          ?i1_Init_System 0070                  intlevel1 0000               ?_ADC_Sample 0070  
             ?_ADC_Result 0070             i1resetKey@key 0070               i1_Init_GPIO 0381  
              _OPTION_REG 0081                i1_Init_PWM 037E    __size_of_Init_Interupt 0001  
       ??i1_Init_Interupt 0070            _checkUsbStatus 02A8           ??i1_Init_Config 0071  
