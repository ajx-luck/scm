

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 04 21:37:20 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1711C
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	swtext1,local,class=CONST,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	swtext2,local,class=CONST,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	pa_nodes0,global,class=CODE,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 1.45
    47                           ; Generated 16/11/2017 GMT
    48                           ; 
    49                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F887 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     
    81                           	psect	idataCOMMON
    82  0000                     __pidataCOMMON:	
    83  001F                     _ADCON0	set	31
    84  001E                     _ADRESH	set	30
    85  0017                     _CCP1CON	set	23
    86  0015                     _CCPR1L	set	21
    87  0012                     _T2CON	set	18
    88  000B                     _INTCON	set	11
    89  0007                     _PORTC	set	7
    90  0006                     _PORTB	set	6
    91  0005                     _PORTA	set	5
    92  0001                     _TMR0	set	1
    93  00F9                     _GODONE	set	249
    94  0061                     _TMR2IF	set	97
    95  005A                     _T0IF	set	90
    96  0058                     _RBIF	set	88
    97  001C                     _TO	set	28
    98  009F                     _ADCON1	set	159
    99  009E                     _ADRESL	set	158
   100  0096                     _IOCB	set	150
   101  0095                     _WPUB	set	149
   102  0092                     _PR2	set	146
   103  008F                     _OSCCON	set	143
   104  0087                     _TRISC	set	135
   105  0086                     _TRISB	set	134
   106  0085                     _TRISA	set	133
   107  0081                     _OPTION_REG	set	129
   108  018F                     _WPUC	set	399
   109  018E                     _WPUA	set	398
   110                           
   111                           	psect	cinit
   112  000D                     start_initialization:	
   113                           ; #config settings
   114                           
   115  000D                     __initialization:	
   116                           
   117                           ;initializer for _FAN_STATUS
   118  000D  3002               	movlw	2
   119  000E  00F7               	movwf	__pdataCOMMON& (0+127)
   120                           
   121                           ;initializer for _currentLevel
   122  000F  3003               	movlw	3
   123  0010  00F8               	movwf	(__pdataCOMMON+1)& (0+127)
   124  0011  3020               	movlw	low __pbssBANK0
   125                           
   126                           ; Clear objects allocated to BANK0
   127  0012  1383               	bcf	3,7	;select IRP bank0
   128  0013  0084               	movwf	4
   129  0014  3046               	movlw	low (__pbssBANK0+38)
   130  0015  233D               	fcall	clear_ram0
   131                           
   132                           ; Clear objects allocated to COMMON
   133  0016  01F9               	clrf	__pbssCOMMON& (0+127)
   134  0017                     end_of_initialization:	
   135                           ;End of C runtime variable initialization code
   136                           
   137  0017                     __end_of__initialization:	
   138  0017  0183               	clrf	3
   139  0018  2A0F               	ljmp	_main	;jump to C main() function
   140                           
   141                           	psect	bssCOMMON
   142  0079                     __pbssCOMMON:	
   143  0079                     _time0Flag:	
   144  0079                     	ds	1
   145                           
   146                           	psect	dataCOMMON
   147  0077                     __pdataCOMMON:	
   148  0077                     _FAN_STATUS:	
   149  0077                     	ds	1
   150  0078                     _currentLevel:	
   151  0078                     	ds	1
   152                           
   153                           	psect	bssBANK0
   154  0020                     __pbssBANK0:	
   155  0020                     ADC_Sample@adsum:	
   156  0020                     	ds	4
   157  0024                     ADC_Sample@admax:	
   158  0024                     	ds	2
   159  0026                     ADC_Sample@admin:	
   160  0026                     	ds	2
   161  0028                     _fan_check_time:	
   162  0028                     	ds	2
   163  002A                     _count10Ms:	
   164  002A                     	ds	2
   165  002C                     _countTime:	
   166  002C                     	ds	2
   167  002E                     _adresult:	
   168  002E                     	ds	2
   169  0030                     ADC_Sample@adtimes:	
   170  0030                     	ds	1
   171  0031                     _key3:	
   172  0031                     	ds	7
   173  0038                     _key2:	
   174  0038                     	ds	7
   175  003F                     _key1:	
   176  003F                     	ds	7
   177                           
   178                           	psect	clrtext
   179  033D                     clear_ram0:	
   180                           ;	Called with FSR containing the base address, and
   181                           ;	W with the last address+1
   182                           
   183  033D  0064               	clrwdt	;clear the watchdog before getting into this loop
   184  033E                     clrloop0:	
   185  033E  0180               	clrf	0	;clear RAM location pointed to by FSR
   186  033F  0A84               	incf	4,f	;increment pointer
   187  0340  0604               	xorwf	4,w	;XOR with final address
   188  0341  1903               	btfsc	3,2	;have we reached the end yet?
   189  0342  3400               	retlw	0	;all done for this memory range, return
   190  0343  0604               	xorwf	4,w	;XOR again to restore value
   191  0344  2B3E               	goto	clrloop0	;do the next byte
   192                           
   193                           	psect	cstackCOMMON
   194  0070                     __pcstackCOMMON:	
   195  0070                     ?_setLedOn:	
   196  0070                     ?_sacnKeyInput:	
   197                           ; 1 bytes @ 0x0
   198                           
   199  0070                     ?_key_driver:	
   200                           ; 1 bytes @ 0x0
   201                           
   202  0070                     ?_Init_Config:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  0070                     ?_readVrefADC:	
   206                           ; 1 bytes @ 0x0
   207                           
   208  0070                     ?_Init_System:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0070                     ?_Init_GPIO:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0070                     ?_Init_Interupt:	
   215                           ; 1 bytes @ 0x0
   216                           
   217  0070                     ?_resetKey:	
   218                           ; 1 bytes @ 0x0
   219                           
   220  0070                     ?_checkUsbStatus:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0070                     ?_Init_PWM:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0070                     ?_setFanLevel:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ?_closeFan:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     ?_checkFan:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ?_scanKeys:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ?_checkKeys:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ?_main:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_Timer0_Isr:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_ADC_Sample:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_ADC_Result:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_DelayXms:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?i1_Init_PWM:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ??i1_Init_PWM:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ?i1_Init_Config:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?i1_resetKey:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ??i1_resetKey:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ?i1_Init_System:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ??i1_Init_System:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?i1_Init_GPIO:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ??i1_Init_GPIO:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ?i1_Init_Interupt:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ??i1_Init_Interupt:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     i1resetKey@key:	
   290                           ; 1 bytes @ 0x0
   291                           
   292                           
   293                           ; 1 bytes @ 0x0
   294  0070                     	ds	1
   295  0071                     ??_Timer0_Isr:	
   296  0071                     ??i1_Init_Config:	
   297                           ; 1 bytes @ 0x1
   298                           
   299                           
   300                           ; 1 bytes @ 0x1
   301  0071                     	ds	3
   302  0074                     ??_setLedOn:	
   303  0074                     ??_sacnKeyInput:	
   304                           ; 1 bytes @ 0x4
   305                           
   306  0074                     ??_key_driver:	
   307                           ; 1 bytes @ 0x4
   308                           
   309  0074                     ??_Init_System:	
   310                           ; 1 bytes @ 0x4
   311                           
   312  0074                     ??_Init_GPIO:	
   313                           ; 1 bytes @ 0x4
   314                           
   315  0074                     ??_Init_Interupt:	
   316                           ; 1 bytes @ 0x4
   317                           
   318  0074                     ??_resetKey:	
   319                           ; 1 bytes @ 0x4
   320                           
   321  0074                     ??_checkUsbStatus:	
   322                           ; 1 bytes @ 0x4
   323                           
   324  0074                     ??_Init_PWM:	
   325                           ; 1 bytes @ 0x4
   326                           
   327  0074                     ??_ADC_Result:	
   328                           ; 1 bytes @ 0x4
   329                           
   330  0074                     ??_DelayXms:	
   331                           ; 1 bytes @ 0x4
   332                           
   333  0074                     ??___awdiv:	
   334                           ; 1 bytes @ 0x4
   335                           
   336  0074                     setLedOn@ledIndex:	
   337                           ; 1 bytes @ 0x4
   338                           
   339  0074                     key_driver@key_return:	
   340                           ; 1 bytes @ 0x4
   341                           
   342  0074                     resetKey@key:	
   343                           ; 1 bytes @ 0x4
   344                           
   345  0074                     DelayXms@x:	
   346                           ; 1 bytes @ 0x4
   347                           
   348                           
   349                           ; 1 bytes @ 0x4
   350  0074                     	ds	1
   351  0075                     ??_Init_Config:	
   352  0075                     ??_setFanLevel:	
   353                           ; 1 bytes @ 0x5
   354                           
   355  0075                     ??_closeFan:	
   356                           ; 1 bytes @ 0x5
   357                           
   358  0075                     setFanLevel@level:	
   359                           ; 1 bytes @ 0x5
   360                           
   361  0075                     key_driver@key_read:	
   362                           ; 1 bytes @ 0x5
   363                           
   364  0075                     ADC_Result@adch:	
   365                           ; 1 bytes @ 0x5
   366                           
   367  0075                     DelayXms@i:	
   368                           ; 1 bytes @ 0x5
   369                           
   370                           
   371                           ; 1 bytes @ 0x5
   372  0075                     	ds	1
   373  0076                     setFanLevel@tempLevel:	
   374  0076                     sacnKeyInput@key:	
   375                           ; 1 bytes @ 0x6
   376                           
   377  0076                     key_driver@key:	
   378                           ; 1 bytes @ 0x6
   379                           
   380  0076                     ADC_Result@i:	
   381                           ; 1 bytes @ 0x6
   382                           
   383  0076                     DelayXms@j:	
   384                           ; 1 bytes @ 0x6
   385                           
   386                           
   387                           ; 1 bytes @ 0x6
   388  0076                     	ds	1
   389  0077                     ??_readVrefADC:	
   390  0077                     ??_scanKeys:	
   391                           ; 1 bytes @ 0x7
   392                           
   393  0077                     ??_checkKeys:	
   394                           ; 1 bytes @ 0x7
   395                           
   396  0077                     ??_main:	
   397                           ; 1 bytes @ 0x7
   398                           
   399                           
   400                           	psect	cstackBANK0
   401  0046                     __pcstackBANK0:	
   402                           ; 1 bytes @ 0x7
   403                           
   404  0046                     ??_ADC_Sample:	
   405  0046                     ?___awdiv:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0046                     ___awdiv@divisor:	
   409                           ; 2 bytes @ 0x0
   410                           
   411                           
   412                           ; 2 bytes @ 0x0
   413  0046                     	ds	2
   414  0048                     ___awdiv@dividend:	
   415                           
   416                           ; 2 bytes @ 0x2
   417  0048                     	ds	2
   418  004A                     ADC_Sample@adch:	
   419  004A                     ___awdiv@counter:	
   420                           ; 1 bytes @ 0x4
   421                           
   422                           
   423                           ; 1 bytes @ 0x4
   424  004A                     	ds	1
   425  004B                     ADC_Sample@i:	
   426  004B                     ___awdiv@sign:	
   427                           ; 1 bytes @ 0x5
   428                           
   429                           
   430                           ; 1 bytes @ 0x5
   431  004B                     	ds	1
   432  004C                     ADC_Sample@ad_temp:	
   433  004C                     ___awdiv@quotient:	
   434                           ; 2 bytes @ 0x6
   435                           
   436                           
   437                           ; 2 bytes @ 0x6
   438  004C                     	ds	2
   439  004E                     ??_checkFan:	
   440                           
   441                           ; 1 bytes @ 0x8
   442  004E                     	ds	1
   443  004F                     checkKeys@key2Status:	
   444                           
   445                           ; 1 bytes @ 0x9
   446  004F                     	ds	1
   447  0050                     checkKeys@key3Status:	
   448                           
   449                           ; 1 bytes @ 0xA
   450  0050                     	ds	1
   451                           
   452                           	psect	maintext
   453  020F                     __pmaintext:	
   454 ;;
   455 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   456 ;;
   457 ;; *************** function _main *****************
   458 ;; Defined at:
   459 ;;		line 244 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;		None
   462 ;; Auto vars:     Size  Location     Type
   463 ;;		None
   464 ;; Return value:  Size  Location     Type
   465 ;;                  1    wreg      void 
   466 ;; Registers used:
   467 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   468 ;; Tracked objects:
   469 ;;		On entry : B00/0
   470 ;;		On exit  : 300/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMMON   BANK0   BANK1
   473 ;;      Params:         0       0       0
   474 ;;      Locals:         0       0       0
   475 ;;      Temps:          0       0       0
   476 ;;      Totals:         0       0       0
   477 ;;Total ram usage:        0 bytes
   478 ;; Hardware stack levels required when called:    7
   479 ;; This function calls:
   480 ;;		_Init_Config
   481 ;;		_checkKeys
   482 ;;		_checkUsbStatus
   483 ;;		_readVrefADC
   484 ;;		_scanKeys
   485 ;; This function is called by:
   486 ;;		Startup code after reset
   487 ;; This function uses a non-reentrant model
   488 ;;
   489                           
   490                           
   491                           ;psect for function _main
   492  020F                     _main:	
   493                           
   494                           ;main.c: 245: Init_Config();
   495                           
   496                           ;incstack = 0
   497                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   498  020F  222F               	fcall	_Init_Config
   499  0210                     l3436:	
   500                           
   501                           ;main.c: 248: if (time0Flag) {
   502  0210  0879               	movf	_time0Flag,w
   503  0211  1903               	btfsc	3,2
   504  0212  2A19               	goto	l3446
   505  0213  0064               	clrwdt	;# 
   506                           
   507                           ;main.c: 250: time0Flag = 0;
   508  0214  01F9               	clrf	_time0Flag
   509                           
   510                           ;main.c: 251: scanKeys();
   511  0215  22CD               	fcall	_scanKeys
   512                           
   513                           ;main.c: 252: count10Ms++;
   514  0216  0AAA               	incf	_count10Ms,f
   515  0217  1903               	skipnz
   516  0218  0AAB               	incf	_count10Ms+1,f
   517  0219                     l3446:	
   518                           
   519                           ;main.c: 253: }
   520                           ;main.c: 256: if (count10Ms == 100) {
   521  0219  3064               	movlw	100
   522  021A  1283               	bcf	3,5	;RP0=0, select bank0
   523  021B  062A               	xorwf	_count10Ms,w
   524  021C  042B               	iorwf	_count10Ms+1,w
   525  021D  1D03               	btfss	3,2
   526  021E  2A25               	goto	l3456
   527                           
   528                           ;main.c: 257: checkKeys();
   529  021F  21ED               	fcall	_checkKeys
   530                           
   531                           ;main.c: 258: count10Ms = 0;
   532  0220  1283               	bcf	3,5	;RP0=0, select bank0
   533  0221  01AA               	clrf	_count10Ms
   534  0222  01AB               	clrf	_count10Ms+1
   535                           
   536                           ;main.c: 260: checkUsbStatus();
   537  0223  2288               	fcall	_checkUsbStatus
   538                           
   539                           ;main.c: 261: readVrefADC();
   540  0224  234C               	fcall	_readVrefADC
   541  0225                     l3456:	
   542                           
   543                           ;main.c: 262: }
   544                           ;main.c: 264: if (countTime == 1000) {
   545  0225  30E8               	movlw	232
   546  0226  062C               	xorwf	_countTime,w
   547  0227  3003               	movlw	3
   548  0228  1903               	skipnz
   549  0229  062D               	xorwf	_countTime+1,w
   550  022A  1D03               	btfss	3,2
   551  022B  2A10               	goto	l3436
   552                           
   553                           ;main.c: 265: countTime = 0;
   554  022C  01AC               	clrf	_countTime
   555  022D  01AD               	clrf	_countTime+1
   556  022E  2A10               	goto	l3436
   557  022F                     __end_of_main:	
   558                           
   559                           	psect	text1
   560  02CD                     __ptext1:	
   561 ;; *************** function _scanKeys *****************
   562 ;; Defined at:
   563 ;;		line 202 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
   564 ;; Parameters:    Size  Location     Type
   565 ;;		None
   566 ;; Auto vars:     Size  Location     Type
   567 ;;		None
   568 ;; Return value:  Size  Location     Type
   569 ;;                  1    wreg      void 
   570 ;; Registers used:
   571 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   572 ;; Tracked objects:
   573 ;;		On entry : 0/100
   574 ;;		On exit  : B00/0
   575 ;;		Unchanged: 0/0
   576 ;; Data sizes:     COMMON   BANK0   BANK1
   577 ;;      Params:         0       0       0
   578 ;;      Locals:         0       0       0
   579 ;;      Temps:          0       0       0
   580 ;;      Totals:         0       0       0
   581 ;;Total ram usage:        0 bytes
   582 ;; Hardware stack levels used:    1
   583 ;; Hardware stack levels required when called:    4
   584 ;; This function calls:
   585 ;;		_sacnKeyInput
   586 ;; This function is called by:
   587 ;;		_main
   588 ;; This function uses a non-reentrant model
   589 ;;
   590                           
   591                           
   592                           ;psect for function _scanKeys
   593  02CD                     _scanKeys:	
   594                           
   595                           ;main.c: 203: key1.key_addr_result = key2.key_addr_result = key3.key_addr_result = PORTB
      +                          ;
   596                           
   597                           ;incstack = 0
   598                           ; Regs used in _scanKeys: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   599  02CD  1283               	bcf	3,5	;RP0=0, select bank0
   600  02CE  1303               	bcf	3,6	;RP1=0, select bank0
   601  02CF  0806               	movf	6,w	;volatile
   602  02D0  00B6               	movwf	_key3+5
   603  02D1  00BD               	movwf	_key2+5
   604  02D2  00C4               	movwf	_key1+5
   605                           
   606                           ;main.c: 204: sacnKeyInput(&key1);
   607  02D3  303F               	movlw	(low (_key1| 0))& (0+255)
   608  02D4  224E               	fcall	_sacnKeyInput
   609                           
   610                           ;main.c: 205: sacnKeyInput(&key2);
   611  02D5  3038               	movlw	(low (_key2| 0))& (0+255)
   612  02D6  224E               	fcall	_sacnKeyInput
   613                           
   614                           ;main.c: 206: sacnKeyInput(&key3);
   615  02D7  3031               	movlw	(low (_key3| 0))& (0+255)
   616  02D8  224E               	fcall	_sacnKeyInput
   617                           
   618                           ;main.c: 207: countTime++;
   619  02D9  1283               	bcf	3,5	;RP0=0, select bank0
   620  02DA  1303               	bcf	3,6	;RP1=0, select bank0
   621  02DB  0AAC               	incf	_countTime,f
   622  02DC  1903               	skipnz
   623  02DD  0AAD               	incf	_countTime+1,f
   624  02DE  0008               	return
   625  02DF                     __end_of_scanKeys:	
   626                           
   627                           	psect	text2
   628  024E                     __ptext2:	
   629 ;; *************** function _sacnKeyInput *****************
   630 ;; Defined at:
   631 ;;		line 3 in file "C:\SCMCU WorkSpace\uf166fan\scankey.c"
   632 ;; Parameters:    Size  Location     Type
   633 ;;  key             1    wreg     PTR struct Keys
   634 ;;		 -> key3(7), key2(7), key1(7), 
   635 ;; Auto vars:     Size  Location     Type
   636 ;;  key             1    6[COMMON] PTR struct Keys
   637 ;;		 -> key3(7), key2(7), key1(7), 
   638 ;; Return value:  Size  Location     Type
   639 ;;                  1    wreg      void 
   640 ;; Registers used:
   641 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   642 ;; Tracked objects:
   643 ;;		On entry : 0/0
   644 ;;		On exit  : 800/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMMON   BANK0   BANK1
   647 ;;      Params:         0       0       0
   648 ;;      Locals:         1       0       0
   649 ;;      Temps:          2       0       0
   650 ;;      Totals:         3       0       0
   651 ;;Total ram usage:        3 bytes
   652 ;; Hardware stack levels used:    1
   653 ;; Hardware stack levels required when called:    3
   654 ;; This function calls:
   655 ;;		Nothing
   656 ;; This function is called by:
   657 ;;		_scanKeys
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           
   662                           ;psect for function _sacnKeyInput
   663  024E                     _sacnKeyInput:	
   664                           
   665                           ;incstack = 0
   666                           ; Regs used in _sacnKeyInput: [wreg-fsr0h+status,2+status,0]
   667                           ;sacnKeyInput@key stored from wreg
   668  024E  00F6               	movwf	sacnKeyInput@key
   669                           
   670                           ;scankey.c: 4: key->key_input = ((key->key_addr_result) >> (key->key_index)&1);
   671  024F  3E05               	addlw	5
   672  0250  0084               	movwf	4
   673  0251  1383               	bcf	3,7	;select IRP bank0
   674  0252  0800               	movf	0,w
   675  0253  00F4               	movwf	??_sacnKeyInput
   676  0254  0876               	movf	sacnKeyInput@key,w
   677  0255  3E06               	addlw	6
   678  0256  0084               	movwf	4
   679  0257  0A00               	incf	0,w
   680  0258  2A5B               	goto	u664
   681  0259                     u665:	
   682  0259  1003               	clrc
   683  025A  0CF4               	rrf	??_sacnKeyInput,f
   684  025B                     u664:	
   685  025B  3EFF               	addlw	-1
   686  025C  1D03               	skipz
   687  025D  2A59               	goto	u665
   688  025E  0874               	movf	??_sacnKeyInput,w
   689  025F  00F5               	movwf	??_sacnKeyInput+1
   690  0260  0876               	movf	sacnKeyInput@key,w
   691  0261  3E04               	addlw	4
   692  0262  0084               	movwf	4
   693  0263  0875               	movf	??_sacnKeyInput+1,w
   694  0264  0080               	movwf	0
   695  0265  0876               	movf	sacnKeyInput@key,w
   696  0266  3E04               	addlw	4
   697  0267  0084               	movwf	4
   698  0268  3001               	movlw	1
   699  0269  0580               	andwf	0,f
   700  026A  0008               	return
   701  026B                     __end_of_sacnKeyInput:	
   702                           
   703                           	psect	text3
   704  034C                     __ptext3:	
   705 ;; *************** function _readVrefADC *****************
   706 ;; Defined at:
   707 ;;		line 90 in file "C:\SCMCU WorkSpace\uf166fan\adc.c"
   708 ;; Parameters:    Size  Location     Type
   709 ;;		None
   710 ;; Auto vars:     Size  Location     Type
   711 ;;  result          1    0        unsigned char 
   712 ;; Return value:  Size  Location     Type
   713 ;;                  1    wreg      unsigned char 
   714 ;; Registers used:
   715 ;;		wreg, status,2, status,0, pclath, cstack
   716 ;; Tracked objects:
   717 ;;		On entry : 300/0
   718 ;;		On exit  : 300/0
   719 ;;		Unchanged: 0/0
   720 ;; Data sizes:     COMMON   BANK0   BANK1
   721 ;;      Params:         0       0       0
   722 ;;      Locals:         0       1       0
   723 ;;      Temps:          0       0       0
   724 ;;      Totals:         0       1       0
   725 ;;Total ram usage:        1 bytes
   726 ;; Hardware stack levels used:    1
   727 ;; Hardware stack levels required when called:    4
   728 ;; This function calls:
   729 ;;		_ADC_Result
   730 ;;		_ADC_Sample
   731 ;;		_DelayXms
   732 ;; This function is called by:
   733 ;;		_main
   734 ;; This function uses a non-reentrant model
   735 ;;
   736                           
   737                           
   738                           ;psect for function _readVrefADC
   739  034C                     _readVrefADC:	
   740                           
   741                           ;adc.c: 92: DelayXms(1);
   742                           
   743                           ;incstack = 0
   744                           ; Regs used in _readVrefADC: [wreg+status,2+status,0+pclath+cstack]
   745  034C  3001               	movlw	1
   746  034D  231D               	fcall	_DelayXms
   747                           
   748                           ;adc.c: 93: ADC_Sample(15);
   749  034E  300F               	movlw	15
   750  034F  2019               	fcall	_ADC_Sample
   751  0350  300F               	movlw	15
   752  0351  2A6B               	ljmp	_ADC_Result
   753  0352                     __end_of_readVrefADC:	
   754                           
   755                           	psect	text4
   756  031D                     __ptext4:	
   757 ;; *************** function _DelayXms *****************
   758 ;; Defined at:
   759 ;;		line 82 in file "C:\SCMCU WorkSpace\uf166fan\adc.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;  x               1    wreg     unsigned char 
   762 ;; Auto vars:     Size  Location     Type
   763 ;;  x               1    4[COMMON] unsigned char 
   764 ;;  j               1    6[COMMON] unsigned char 
   765 ;;  i               1    5[COMMON] unsigned char 
   766 ;; Return value:  Size  Location     Type
   767 ;;                  1    wreg      void 
   768 ;; Registers used:
   769 ;;		wreg, status,2, status,0
   770 ;; Tracked objects:
   771 ;;		On entry : 300/0
   772 ;;		On exit  : 300/0
   773 ;;		Unchanged: 300/0
   774 ;; Data sizes:     COMMON   BANK0   BANK1
   775 ;;      Params:         0       0       0
   776 ;;      Locals:         3       0       0
   777 ;;      Temps:          0       0       0
   778 ;;      Totals:         3       0       0
   779 ;;Total ram usage:        3 bytes
   780 ;; Hardware stack levels used:    1
   781 ;; Hardware stack levels required when called:    3
   782 ;; This function calls:
   783 ;;		Nothing
   784 ;; This function is called by:
   785 ;;		_readVrefADC
   786 ;; This function uses a non-reentrant model
   787 ;;
   788                           
   789                           
   790                           ;psect for function _DelayXms
   791  031D                     _DelayXms:	
   792                           
   793                           ;incstack = 0
   794                           ; Regs used in _DelayXms: [wreg+status,2+status,0]
   795                           ;DelayXms@x stored from wreg
   796  031D  00F4               	movwf	DelayXms@x
   797                           
   798                           ;adc.c: 84: unsigned char i,j;
   799                           ;adc.c: 85: for(i=x;i>0;i--)
   800  031E  00F5               	movwf	DelayXms@i
   801  031F                     l3380:	
   802  031F  0875               	movf	DelayXms@i,w
   803  0320  1903               	btfsc	3,2
   804  0321  0008               	return
   805                           
   806                           ;adc.c: 86: for(j=153;j>0;j--);
   807  0322  3099               	movlw	153
   808  0323  00F6               	movwf	DelayXms@j
   809  0324                     l3390:	
   810  0324  0BF6               	decfsz	DelayXms@j,f
   811  0325  2B24               	goto	l3390
   812  0326  03F5               	decf	DelayXms@i,f
   813  0327  2B1F               	goto	l3380
   814  0328                     __end_of_DelayXms:	
   815                           
   816                           	psect	text5
   817  0019                     __ptext5:	
   818 ;; *************** function _ADC_Sample *****************
   819 ;; Defined at:
   820 ;;		line 11 in file "C:\SCMCU WorkSpace\uf166fan\adc.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;  adch            1    wreg     unsigned char 
   823 ;; Auto vars:     Size  Location     Type
   824 ;;  adch            1    4[BANK0 ] unsigned char 
   825 ;;  ad_temp         2    6[BANK0 ] volatile unsigned int 
   826 ;;  i               1    5[BANK0 ] unsigned char 
   827 ;; Return value:  Size  Location     Type
   828 ;;                  1    wreg      void 
   829 ;; Registers used:
   830 ;;		wreg, status,2, status,0
   831 ;; Tracked objects:
   832 ;;		On entry : 300/0
   833 ;;		On exit  : 300/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMMON   BANK0   BANK1
   836 ;;      Params:         0       0       0
   837 ;;      Locals:         0       4       0
   838 ;;      Temps:          0       4       0
   839 ;;      Totals:         0       8       0
   840 ;;Total ram usage:        8 bytes
   841 ;; Hardware stack levels used:    1
   842 ;; Hardware stack levels required when called:    3
   843 ;; This function calls:
   844 ;;		Nothing
   845 ;; This function is called by:
   846 ;;		_readVrefADC
   847 ;; This function uses a non-reentrant model
   848 ;;
   849                           
   850                           
   851                           ;psect for function _ADC_Sample
   852  0019                     _ADC_Sample:	
   853                           
   854                           ;incstack = 0
   855                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
   856                           ;ADC_Sample@adch stored from wreg
   857  0019  00CA               	movwf	ADC_Sample@adch
   858                           
   859                           ;adc.c: 13: static unsigned long adsum = 0;
   860                           ;adc.c: 14: static unsigned int admin = 0,admax = 0;
   861                           ;adc.c: 15: static unsigned char adtimes = 0;
   862                           ;adc.c: 16: volatile unsigned int ad_temp;
   863                           ;adc.c: 17: ADCON1 = 0;
   864  001A  1683               	bsf	3,5	;RP0=1, select bank1
   865  001B  019F               	clrf	31	;volatile
   866                           
   867                           ;adc.c: 18: ADCON0 = 0X41 | (adch << 2);
   868  001C  1283               	bcf	3,5	;RP0=0, select bank0
   869  001D  084A               	movf	ADC_Sample@adch,w
   870  001E  00C6               	movwf	??_ADC_Sample
   871  001F  3001               	movlw	1
   872  0020  1003               	clrc
   873  0021                     L1:	
   874  0021  0DC6               	rlf	??_ADC_Sample,f
   875  0022  3EFF               	addlw	-1
   876  0023  1003               	clrc
   877  0024  1D03               	skipz
   878  0025  2821               	goto	L1
   879  0026  0D46               	rlf	??_ADC_Sample,w
   880  0027  3841               	iorlw	65
   881  0028  009F               	movwf	31	;volatile
   882  0029  0000               	nop	;# 
   883  002A  0000               	nop	;# 
   884                           
   885                           ;adc.c: 21: GODONE = 1;
   886  002B  1283               	bcf	3,5	;RP0=0, select bank0
   887  002C  1303               	bcf	3,6	;RP1=0, select bank0
   888  002D  149F               	bsf	31,1	;volatile
   889                           
   890                           ;adc.c: 23: unsigned char i = 0;
   891  002E  01CB               	clrf	ADC_Sample@i
   892  002F                     l1783:	
   893                           ;adc.c: 24: while(GODONE)
   894                           
   895  002F  1C9F               	btfss	31,1	;volatile
   896  0030  2834               	goto	l3332
   897                           
   898                           ;adc.c: 25: {
   899                           ;adc.c: 26: if(0 == (--i))
   900  0031  0BCB               	decfsz	ADC_Sample@i,f
   901  0032  282F               	goto	l1783
   902  0033  0008               	return
   903  0034                     l3332:	
   904                           
   905                           ;adc.c: 28: }
   906                           ;adc.c: 30: ad_temp=(ADRESH<<4)+(ADRESL>>4);
   907  0034  081E               	movf	30,w	;volatile
   908  0035  00CC               	movwf	ADC_Sample@ad_temp	;volatile
   909  0036  01CD               	clrf	ADC_Sample@ad_temp+1	;volatile
   910  0037  0ECC               	swapf	ADC_Sample@ad_temp,f	;volatile
   911  0038  0ECD               	swapf	ADC_Sample@ad_temp+1,f	;volatile
   912  0039  30F0               	movlw	240
   913  003A  05CD               	andwf	ADC_Sample@ad_temp+1,f	;volatile
   914  003B  084C               	movf	ADC_Sample@ad_temp,w	;volatile
   915  003C  390F               	andlw	15
   916  003D  04CD               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
   917  003E  30F0               	movlw	240
   918  003F  05CC               	andwf	ADC_Sample@ad_temp,f	;volatile
   919  0040  1683               	bsf	3,5	;RP0=1, select bank1
   920  0041  0E1E               	swapf	30,w	;volatile
   921  0042  390F               	andlw	15
   922  0043  1283               	bcf	3,5	;RP0=0, select bank0
   923  0044  07CC               	addwf	ADC_Sample@ad_temp,f	;volatile
   924  0045  1803               	skipnc
   925  0046  0ACD               	incf	ADC_Sample@ad_temp+1,f	;volatile
   926                           
   927                           ;adc.c: 32: if(0 == admax)
   928  0047  0824               	movf	ADC_Sample@admax,w
   929  0048  0425               	iorwf	ADC_Sample@admax+1,w
   930  0049  1D03               	btfss	3,2
   931  004A  284D               	goto	l3340
   932                           
   933                           ;adc.c: 33: {
   934                           ;adc.c: 34: admax = ad_temp;
   935  004B  20BE               	fcall	PL20	;call to abstracted procedure
   936  004C  285F               	goto	l3346
   937  004D                     l3340:	
   938                           ;adc.c: 36: }
   939                           
   940                           ;adc.c: 35: admin = ad_temp;
   941                           
   942                           
   943                           ;adc.c: 37: else if(ad_temp > admax)
   944  004D  084D               	movf	ADC_Sample@ad_temp+1,w	;volatile
   945  004E  0225               	subwf	ADC_Sample@admax+1,w
   946  004F  1D03               	skipz
   947  0050  2853               	goto	u1205
   948  0051  084C               	movf	ADC_Sample@ad_temp,w	;volatile
   949  0052  0224               	subwf	ADC_Sample@admax,w
   950  0053                     u1205:	
   951  0053  1803               	skipnc
   952  0054  2857               	goto	l3344
   953                           
   954                           ;adc.c: 38: admax = ad_temp;
   955  0055  20BE               	fcall	PL20	;call to abstracted procedure
   956  0056  2863               	goto	l1789
   957  0057                     l3344:	
   958                           
   959                           ;adc.c: 39: else if(ad_temp < admin)
   960  0057  0827               	movf	ADC_Sample@admin+1,w
   961  0058  024D               	subwf	ADC_Sample@ad_temp+1,w	;volatile
   962  0059  1D03               	skipz
   963  005A  285D               	goto	u1215
   964  005B  0826               	movf	ADC_Sample@admin,w
   965  005C  024C               	subwf	ADC_Sample@ad_temp,w	;volatile
   966  005D                     u1215:	
   967  005D  1803               	skipnc
   968  005E  2863               	goto	l1789
   969  005F                     l3346:	
   970                           
   971                           ;adc.c: 40: admin = ad_temp;
   972  005F  084D               	movf	ADC_Sample@ad_temp+1,w	;volatile
   973  0060  00A7               	movwf	ADC_Sample@admin+1
   974  0061  084C               	movf	ADC_Sample@ad_temp,w	;volatile
   975  0062  00A6               	movwf	ADC_Sample@admin
   976  0063                     l1789:	
   977                           
   978                           ;adc.c: 42: adsum += ad_temp;
   979  0063  084C               	movf	ADC_Sample@ad_temp,w	;volatile
   980  0064  00C6               	movwf	??_ADC_Sample
   981  0065  084D               	movf	ADC_Sample@ad_temp+1,w	;volatile
   982  0066  00C7               	movwf	??_ADC_Sample+1
   983  0067  01C8               	clrf	??_ADC_Sample+2
   984  0068  01C9               	clrf	??_ADC_Sample+3
   985  0069  0846               	movf	??_ADC_Sample,w
   986  006A  07A0               	addwf	ADC_Sample@adsum,f
   987  006B  0847               	movf	??_ADC_Sample+1,w
   988  006C  1103               	clrz
   989  006D  1803               	skipnc
   990  006E  3E01               	addlw	1
   991  006F  1D03               	btfss	3,2
   992  0070  07A1               	addwf	ADC_Sample@adsum+1,f
   993  0071  0848               	movf	??_ADC_Sample+2,w
   994  0072  1103               	clrz
   995  0073  1803               	skipnc
   996  0074  3E01               	addlw	1
   997  0075  1D03               	btfss	3,2
   998  0076  07A2               	addwf	ADC_Sample@adsum+2,f
   999  0077  0849               	movf	??_ADC_Sample+3,w
  1000  0078  1103               	clrz
  1001  0079  1803               	skipnc
  1002  007A  3E01               	addlw	1
  1003  007B  1D03               	btfss	3,2
  1004  007C  07A3               	addwf	ADC_Sample@adsum+3,f
  1005                           
  1006                           ;adc.c: 43: if(++adtimes >= 10)
  1007  007D  300A               	movlw	10
  1008  007E  0AB0               	incf	ADC_Sample@adtimes,f
  1009  007F  0230               	subwf	ADC_Sample@adtimes,w
  1010  0080  1C03               	skipc
  1011  0081  0008               	return
  1012                           
  1013                           ;adc.c: 44: {
  1014                           ;adc.c: 45: adsum -= admax;
  1015  0082  0824               	movf	ADC_Sample@admax,w
  1016  0083  00C6               	movwf	??_ADC_Sample
  1017  0084  0825               	movf	ADC_Sample@admax+1,w
  1018  0085  20AF               	fcall	PL4	;call to abstracted procedure
  1019  0086  1C03               	skipc
  1020  0087  0F49               	incfsz	??_ADC_Sample+3,w
  1021  0088  02A3               	subwf	ADC_Sample@adsum+3,f
  1022                           
  1023                           ;adc.c: 46: adsum -= admin;
  1024  0089  0826               	movf	ADC_Sample@admin,w
  1025  008A  00C6               	movwf	??_ADC_Sample
  1026  008B  0827               	movf	ADC_Sample@admin+1,w
  1027  008C  20AF               	fcall	PL4	;call to abstracted procedure
  1028  008D  1C03               	skipc
  1029  008E  0F49               	incfsz	??_ADC_Sample+3,w
  1030  008F  02A3               	subwf	ADC_Sample@adsum+3,f
  1031                           
  1032                           ;adc.c: 48: adresult = adsum >> 3;
  1033  0090  0820               	movf	ADC_Sample@adsum,w
  1034  0091  00C6               	movwf	??_ADC_Sample
  1035  0092  0821               	movf	ADC_Sample@adsum+1,w
  1036  0093  00C7               	movwf	??_ADC_Sample+1
  1037  0094  0822               	movf	ADC_Sample@adsum+2,w
  1038  0095  00C8               	movwf	??_ADC_Sample+2
  1039  0096  0823               	movf	ADC_Sample@adsum+3,w
  1040  0097  00C9               	movwf	??_ADC_Sample+3
  1041  0098  3003               	movlw	3
  1042  0099                     u1265:	
  1043  0099  1003               	clrc
  1044  009A  0CC9               	rrf	??_ADC_Sample+3,f
  1045  009B  0CC8               	rrf	??_ADC_Sample+2,f
  1046  009C  0CC7               	rrf	??_ADC_Sample+1,f
  1047  009D  0CC6               	rrf	??_ADC_Sample,f
  1048  009E  3EFF               	addlw	-1
  1049  009F  1D03               	skipz
  1050  00A0  2899               	goto	u1265
  1051  00A1  0847               	movf	??_ADC_Sample+1,w
  1052  00A2  00AF               	movwf	_adresult+1	;volatile
  1053  00A3  0846               	movf	??_ADC_Sample,w
  1054  00A4  00AE               	movwf	_adresult	;volatile
  1055                           
  1056                           ;adc.c: 50: adsum = 0;
  1057  00A5  01A0               	clrf	ADC_Sample@adsum
  1058  00A6  01A1               	clrf	ADC_Sample@adsum+1
  1059  00A7  01A2               	clrf	ADC_Sample@adsum+2
  1060  00A8  01A3               	clrf	ADC_Sample@adsum+3
  1061                           
  1062                           ;adc.c: 51: admin = 0;
  1063  00A9  01A6               	clrf	ADC_Sample@admin
  1064  00AA  01A7               	clrf	ADC_Sample@admin+1
  1065                           
  1066                           ;adc.c: 52: admax = 0;
  1067  00AB  01A4               	clrf	ADC_Sample@admax
  1068  00AC  01A5               	clrf	ADC_Sample@admax+1
  1069                           
  1070                           ;adc.c: 53: adtimes = 0;
  1071  00AD  01B0               	clrf	ADC_Sample@adtimes
  1072  00AE  0008               	return
  1073  00AF                     __end_of_ADC_Sample:	
  1074  00AF                     PL4:	
  1075  00AF  00C7               	movwf	??_ADC_Sample+1
  1076  00B0  01C8               	clrf	??_ADC_Sample+2
  1077  00B1  01C9               	clrf	??_ADC_Sample+3
  1078  00B2  0846               	movf	??_ADC_Sample,w
  1079  00B3  02A0               	subwf	ADC_Sample@adsum,f
  1080  00B4  0847               	movf	??_ADC_Sample+1,w
  1081  00B5  1C03               	skipc
  1082  00B6  0F47               	incfsz	??_ADC_Sample+1,w
  1083  00B7  02A1               	subwf	ADC_Sample@adsum+1,f
  1084  00B8  0848               	movf	??_ADC_Sample+2,w
  1085  00B9  1C03               	skipc
  1086  00BA  0F48               	incfsz	??_ADC_Sample+2,w
  1087  00BB  02A2               	subwf	ADC_Sample@adsum+2,f
  1088  00BC  0849               	movf	??_ADC_Sample+3,w
  1089  00BD  0008               	return
  1090  00BE                     __end_ofPL4:	
  1091  00BE                     PL20:	
  1092  00BE  084D               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1093  00BF  00A5               	movwf	ADC_Sample@admax+1
  1094  00C0  084C               	movf	ADC_Sample@ad_temp,w	;volatile
  1095  00C1  00A4               	movwf	ADC_Sample@admax
  1096  00C2  0008               	return
  1097  00C3                     __end_ofPL20:	
  1098                           
  1099                           	psect	text6
  1100  026B                     __ptext6:	
  1101 ;; *************** function _ADC_Result *****************
  1102 ;; Defined at:
  1103 ;;		line 59 in file "C:\SCMCU WorkSpace\uf166fan\adc.c"
  1104 ;; Parameters:    Size  Location     Type
  1105 ;;  adch            1    wreg     unsigned char 
  1106 ;; Auto vars:     Size  Location     Type
  1107 ;;  adch            1    5[COMMON] unsigned char 
  1108 ;;  i               1    6[COMMON] unsigned char 
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  1    wreg      unsigned char 
  1111 ;; Registers used:
  1112 ;;		wreg, status,2, status,0
  1113 ;; Tracked objects:
  1114 ;;		On entry : 300/0
  1115 ;;		On exit  : 300/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMMON   BANK0   BANK1
  1118 ;;      Params:         0       0       0
  1119 ;;      Locals:         2       0       0
  1120 ;;      Temps:          1       0       0
  1121 ;;      Totals:         3       0       0
  1122 ;;Total ram usage:        3 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; Hardware stack levels required when called:    3
  1125 ;; This function calls:
  1126 ;;		Nothing
  1127 ;; This function is called by:
  1128 ;;		_readVrefADC
  1129 ;; This function uses a non-reentrant model
  1130 ;;
  1131                           
  1132                           
  1133                           ;psect for function _ADC_Result
  1134  026B                     _ADC_Result:	
  1135                           
  1136                           ;incstack = 0
  1137                           ; Regs used in _ADC_Result: [wreg+status,2+status,0]
  1138                           ;ADC_Result@adch stored from wreg
  1139  026B  00F5               	movwf	ADC_Result@adch
  1140                           
  1141                           ;adc.c: 61: ADCON1 = 0;
  1142  026C  1683               	bsf	3,5	;RP0=1, select bank1
  1143  026D  019F               	clrf	31	;volatile
  1144                           
  1145                           ;adc.c: 62: ADCON0 = 0X41 | (adch << 2);
  1146  026E  0875               	movf	ADC_Result@adch,w
  1147  026F  00F4               	movwf	??_ADC_Result
  1148  0270  3001               	movlw	1
  1149  0271  1003               	clrc
  1150  0272                     L2:	
  1151  0272  0DF4               	rlf	??_ADC_Result,f
  1152  0273  3EFF               	addlw	-1
  1153  0274  1003               	clrc
  1154  0275  1D03               	skipz
  1155  0276  2A72               	goto	L2
  1156  0277  0D74               	rlf	??_ADC_Result,w
  1157  0278  3841               	iorlw	65
  1158  0279  1283               	bcf	3,5	;RP0=0, select bank0
  1159  027A  009F               	movwf	31	;volatile
  1160  027B  0000               	nop	;# 
  1161  027C  0000               	nop	;# 
  1162                           
  1163                           ;adc.c: 65: GODONE = 1;
  1164  027D  1283               	bcf	3,5	;RP0=0, select bank0
  1165  027E  1303               	bcf	3,6	;RP1=0, select bank0
  1166  027F  149F               	bsf	31,1	;volatile
  1167                           
  1168                           ;adc.c: 67: unsigned char i = 0;
  1169  0280  01F6               	clrf	ADC_Result@i
  1170  0281                     l1796:	
  1171                           ;adc.c: 68: while(GODONE)
  1172                           
  1173  0281  1C9F               	btfss	31,1	;volatile
  1174  0282  2A86               	goto	l3374
  1175                           
  1176                           ;adc.c: 69: {
  1177                           ;adc.c: 70: if(0 == (--i))
  1178  0283  0BF6               	decfsz	ADC_Result@i,f
  1179  0284  2A81               	goto	l1796
  1180                           
  1181                           ;adc.c: 71: return 0;
  1182  0285  3400               	retlw	0
  1183  0286                     l3374:	
  1184                           
  1185                           ;adc.c: 72: }
  1186                           ;adc.c: 73: return ADRESH;
  1187  0286  081E               	movf	30,w	;volatile
  1188  0287  0008               	return
  1189  0288                     __end_of_ADC_Result:	
  1190                           
  1191                           	psect	text7
  1192  0288                     __ptext7:	
  1193 ;; *************** function _checkUsbStatus *****************
  1194 ;; Defined at:
  1195 ;;		line 37 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;		None
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;		None
  1200 ;; Return value:  Size  Location     Type
  1201 ;;                  1    wreg      void 
  1202 ;; Registers used:
  1203 ;;		wreg, status,2, status,0
  1204 ;; Tracked objects:
  1205 ;;		On entry : 300/0
  1206 ;;		On exit  : 300/0
  1207 ;;		Unchanged: 0/0
  1208 ;; Data sizes:     COMMON   BANK0   BANK1
  1209 ;;      Params:         0       0       0
  1210 ;;      Locals:         0       0       0
  1211 ;;      Temps:          1       0       0
  1212 ;;      Totals:         1       0       0
  1213 ;;Total ram usage:        1 bytes
  1214 ;; Hardware stack levels used:    1
  1215 ;; Hardware stack levels required when called:    3
  1216 ;; This function calls:
  1217 ;;		Nothing
  1218 ;; This function is called by:
  1219 ;;		_main
  1220 ;; This function uses a non-reentrant model
  1221 ;;
  1222                           
  1223                           
  1224                           ;psect for function _checkUsbStatus
  1225  0288                     _checkUsbStatus:	
  1226                           
  1227                           ;main.c: 38: if (((PORTB) >> (2)&1) == 1) {
  1228                           
  1229                           ;incstack = 0
  1230                           ; Regs used in _checkUsbStatus: [wreg+status,2+status,0]
  1231  0288  0806               	movf	6,w	;volatile
  1232  0289  00F4               	movwf	??_checkUsbStatus
  1233  028A  1003               	clrc
  1234  028B  0CF4               	rrf	??_checkUsbStatus,f
  1235  028C  1003               	clrc
  1236  028D  0CF4               	rrf	??_checkUsbStatus,f
  1237  028E  1C74               	btfss	??_checkUsbStatus,0
  1238  028F  2AA2               	goto	l577
  1239                           
  1240                           ;main.c: 39: if (((PORTB) >> (1)&1) == 1) {
  1241  0290  0806               	movf	6,w	;volatile
  1242  0291  00F4               	movwf	??_checkUsbStatus
  1243  0292  1003               	clrc
  1244  0293  0CF4               	rrf	??_checkUsbStatus,f
  1245  0294  1C74               	btfss	??_checkUsbStatus,0
  1246  0295  2A98               	goto	l3030
  1247                           
  1248                           ;main.c: 41: PORTA&=~(1<<0);
  1249  0296  1005               	bcf	5,0	;volatile
  1250                           
  1251                           ;main.c: 42: } else if (countTime == 1000) {
  1252  0297  0008               	return
  1253  0298                     l3030:	
  1254  0298  30E8               	movlw	232
  1255  0299  062C               	xorwf	_countTime,w
  1256  029A  3003               	movlw	3
  1257  029B  1903               	skipnz
  1258  029C  062D               	xorwf	_countTime+1,w
  1259  029D  1D03               	btfss	3,2
  1260  029E  0008               	return
  1261                           
  1262                           ;main.c: 44: PORTA^=(1<<0);
  1263  029F  3001               	movlw	1
  1264  02A0  0685               	xorwf	5,f	;volatile
  1265  02A1  0008               	return
  1266  02A2                     l577:	
  1267                           
  1268                           ;main.c: 48: PORTA|=(1<<0);
  1269  02A2  1405               	bsf	5,0	;volatile
  1270  02A3  0008               	return
  1271  02A4                     __end_of_checkUsbStatus:	
  1272                           
  1273                           	psect	text8
  1274  01ED                     __ptext8:	
  1275 ;; *************** function _checkKeys *****************
  1276 ;; Defined at:
  1277 ;;		line 212 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  1278 ;; Parameters:    Size  Location     Type
  1279 ;;		None
  1280 ;; Auto vars:     Size  Location     Type
  1281 ;;  key3Status      1   10[BANK0 ] unsigned char 
  1282 ;;  key2Status      1    9[BANK0 ] unsigned char 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 300/0
  1289 ;;		On exit  : 200/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMMON   BANK0   BANK1
  1292 ;;      Params:         0       0       0
  1293 ;;      Locals:         0       2       0
  1294 ;;      Temps:          0       0       0
  1295 ;;      Totals:         0       2       0
  1296 ;;Total ram usage:        2 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    6
  1299 ;; This function calls:
  1300 ;;		_checkFan
  1301 ;;		_closeFan
  1302 ;;		_key_driver
  1303 ;;		_setFanLevel
  1304 ;; This function is called by:
  1305 ;;		_main
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           
  1310                           ;psect for function _checkKeys
  1311  01ED                     _checkKeys:	
  1312                           
  1313                           ;main.c: 213: if (key_driver(&key1) == 1) {
  1314                           
  1315                           ;incstack = 0
  1316                           ; Regs used in _checkKeys: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1317  01ED  303F               	movlw	(low (_key1| 0))& (0+255)
  1318  01EE  2108               	fcall	_key_driver
  1319  01EF  3A01               	xorlw	1
  1320  01F0  1D03               	skipz
  1321  01F1  29F8               	goto	l3412
  1322                           
  1323                           ;main.c: 216: if (FAN_STATUS == 1) {
  1324  01F2  0B77               	decfsz	_FAN_STATUS,w
  1325  01F3  29F5               	goto	l3404
  1326                           
  1327                           ;main.c: 218: closeFan();
  1328  01F4  2B0F               	ljmp	l2798
  1329  01F5                     l3404:	
  1330                           ;main.c: 219: } else {
  1331                           
  1332                           
  1333                           ;main.c: 220: FAN_STATUS = 2;
  1334  01F5  3002               	movlw	2
  1335  01F6  00F7               	movwf	_FAN_STATUS
  1336                           
  1337                           ;main.c: 221: checkFan();
  1338  01F7  29C1               	ljmp	l3300
  1339  01F8                     l3412:	
  1340  01F8  3002               	movlw	2
  1341  01F9  0677               	xorwf	_FAN_STATUS,w
  1342  01FA  1D03               	btfss	3,2
  1343  01FB  29FD               	goto	l628
  1344                           
  1345                           ;main.c: 225: checkFan();
  1346  01FC  21C1               	fcall	_checkFan
  1347  01FD                     l628:	
  1348                           
  1349                           ;main.c: 226: }
  1350                           ;main.c: 228: unsigned char key2Status = key_driver(&key2);
  1351  01FD  3038               	movlw	(low (_key2| 0))& (0+255)
  1352  01FE  2108               	fcall	_key_driver
  1353  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  1354  0200  1303               	bcf	3,6	;RP1=0, select bank0
  1355  0201  00CF               	movwf	checkKeys@key2Status
  1356                           
  1357                           ;main.c: 229: if (key2Status == 1) {
  1358  0202  0B4F               	decfsz	checkKeys@key2Status,w
  1359  0203  2A06               	goto	l3422
  1360                           
  1361                           ;main.c: 231: setFanLevel(1);
  1362  0204  3001               	movlw	1
  1363  0205  294A               	ljmp	_setFanLevel
  1364  0206                     l3422:	
  1365                           
  1366                           ;main.c: 233: }
  1367                           ;main.c: 234: unsigned char key3Status = key_driver(&key3);
  1368  0206  3031               	movlw	(low (_key3| 0))& (0+255)
  1369  0207  2108               	fcall	_key_driver
  1370  0208  1283               	bcf	3,5	;RP0=0, select bank0
  1371  0209  1303               	bcf	3,6	;RP1=0, select bank0
  1372  020A  00D0               	movwf	checkKeys@key3Status
  1373                           
  1374                           ;main.c: 235: if (key3Status == 1) {
  1375  020B  0B50               	decfsz	checkKeys@key3Status,w
  1376  020C  0008               	return
  1377                           
  1378                           ;main.c: 237: setFanLevel(-1);
  1379  020D  30FF               	movlw	255
  1380  020E  294A               	ljmp	_setFanLevel
  1381  020F                     __end_of_checkKeys:	
  1382                           
  1383                           	psect	text9
  1384  0108                     __ptext9:	
  1385 ;; *************** function _key_driver *****************
  1386 ;; Defined at:
  1387 ;;		line 9 in file "C:\SCMCU WorkSpace\uf166fan\scankey.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;  key             1    wreg     PTR struct Keys
  1390 ;;		 -> key3(7), key2(7), key1(7), 
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  key             1    6[COMMON] PTR struct Keys
  1393 ;;		 -> key3(7), key2(7), key1(7), 
  1394 ;;  key_read        1    5[COMMON] unsigned char 
  1395 ;;  key_return      1    4[COMMON] unsigned char 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      unsigned char 
  1398 ;; Registers used:
  1399 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 800/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMMON   BANK0   BANK1
  1405 ;;      Params:         0       0       0
  1406 ;;      Locals:         3       0       0
  1407 ;;      Temps:          0       0       0
  1408 ;;      Totals:         3       0       0
  1409 ;;Total ram usage:        3 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; Hardware stack levels required when called:    3
  1412 ;; This function calls:
  1413 ;;		Nothing
  1414 ;; This function is called by:
  1415 ;;		_checkKeys
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           
  1420                           ;psect for function _key_driver
  1421  0108                     _key_driver:	
  1422                           
  1423                           ;incstack = 0
  1424                           ; Regs used in _key_driver: [wreg-fsr0h+status,2+status,0]
  1425                           ;key_driver@key stored from wreg
  1426  0108  00F6               	movwf	key_driver@key
  1427                           
  1428                           ;scankey.c: 12: unsigned char key_return = 0;
  1429  0109  01F4               	clrf	key_driver@key_return
  1430                           
  1431                           ;scankey.c: 13: unsigned char key_read = key->key_input;
  1432  010A  3E04               	addlw	4
  1433  010B  0084               	movwf	4
  1434  010C  1383               	bcf	3,7	;select IRP bank0
  1435  010D  0800               	movf	0,w
  1436  010E  00F5               	movwf	key_driver@key_read
  1437                           
  1438                           ;scankey.c: 15: switch (key->key_state_buffer1) {
  1439  010F  293B               	goto	l2870
  1440  0110                     l2840:	
  1441                           
  1442                           ;scankey.c: 17: if (key_read == 0) {
  1443  0110  0875               	movf	key_driver@key_read,w
  1444  0111  1D03               	btfss	3,2
  1445  0112  2948               	goto	l2872
  1446                           
  1447                           ;scankey.c: 18: key->key_state_buffer1 = 1;
  1448  0113  0A76               	incf	key_driver@key,w
  1449  0114  0084               	movwf	4
  1450  0115  0180               	clrf	0
  1451  0116  0A80               	incf	0,f
  1452  0117  2948               	goto	l2872
  1453  0118                     l2844:	
  1454                           
  1455                           ;scankey.c: 25: if (key_read == 0) {
  1456  0118  0875               	movf	key_driver@key_read,w
  1457  0119  1D03               	btfss	3,2
  1458  011A  2937               	goto	l2866
  1459                           
  1460                           ;scankey.c: 26: key->key_timer_cnt1 = 0;
  1461  011B  0876               	movf	key_driver@key,w
  1462  011C  0084               	movwf	4
  1463  011D  0180               	clrf	0
  1464                           
  1465                           ;scankey.c: 27: key->key_state_buffer1 = 2;
  1466  011E  0A76               	incf	key_driver@key,w
  1467  011F  0084               	movwf	4
  1468  0120  3002               	movlw	2
  1469  0121  2933               	goto	L3
  1470  0122                     l2852:	
  1471                           ;scankey.c: 32: key->key_state_buffer1 = 0;
  1472                           
  1473                           ;scankey.c: 31: } else {
  1474                           
  1475                           
  1476                           ;scankey.c: 39: if (key_read == 1) {
  1477  0122  0B75               	decfsz	key_driver@key_read,w
  1478  0123  2927               	goto	l2858
  1479                           
  1480                           ;scankey.c: 40: key_return = 1;
  1481  0124  01F4               	clrf	key_driver@key_return
  1482  0125  0AF4               	incf	key_driver@key_return,f
  1483  0126  2937               	goto	l2866
  1484  0127                     l2858:	
  1485                           ;scankey.c: 42: } else if (++(key->key_timer_cnt1) >= 100)
  1486                           
  1487                           ;scankey.c: 41: key->key_state_buffer1 = 0;
  1488                           
  1489  0127  0876               	movf	key_driver@key,w
  1490  0128  0084               	movwf	4
  1491  0129  3064               	movlw	100
  1492  012A  0A80               	incf	0,f
  1493  012B  0200               	subwf	0,w
  1494  012C  1C03               	skipc
  1495  012D  2948               	goto	l2872
  1496                           
  1497                           ;scankey.c: 43: {
  1498                           ;scankey.c: 44: key_return = 3;
  1499  012E  3003               	movlw	3
  1500  012F  00F4               	movwf	key_driver@key_return
  1501                           
  1502                           ;scankey.c: 45: key->key_state_buffer1 = 3;
  1503  0130  0A76               	incf	key_driver@key,w
  1504  0131  0084               	movwf	4
  1505  0132  3003               	movlw	3
  1506  0133                     L3:	
  1507  0133  0080               	movwf	0
  1508  0134  2948               	goto	l2872
  1509  0135                     l2864:	
  1510                           
  1511                           ;scankey.c: 51: if (key_read == 1)
  1512  0135  0B75               	decfsz	key_driver@key_read,w
  1513  0136  2948               	goto	l2872
  1514  0137                     l2866:	
  1515                           
  1516                           ;scankey.c: 52: {
  1517                           ;scankey.c: 53: key->key_state_buffer1 = 0;
  1518  0137  0A76               	incf	key_driver@key,w
  1519  0138  0084               	movwf	4
  1520  0139  0180               	clrf	0
  1521  013A  2948               	goto	l2872
  1522  013B                     l2870:	
  1523  013B  0A76               	incf	key_driver@key,w
  1524  013C  0084               	movwf	4
  1525  013D  0800               	movf	0,w
  1526                           
  1527                           ; Switch size 1, requested type "space"
  1528                           ; Number of cases is 4, Range of values is 0 to 3
  1529                           ; switch strategies available:
  1530                           ; Name         Instructions Cycles
  1531                           ; direct_byte           10     6 (fixed)
  1532                           ; simple_byte           13     7 (average)
  1533                           ; jumptable            260     6 (fixed)
  1534                           ;	Chosen strategy is direct_byte
  1535  013E  0084               	movwf	4
  1536  013F  3004               	movlw	4
  1537  0140  0204               	subwf	4,w
  1538  0141  1803               	skipnc
  1539  0142  2948               	goto	l2872
  1540  0143  3003               	movlw	high S3510
  1541  0144  008A               	movwf	10
  1542  0145  3057               	movlw	low S3510
  1543  0146  0704               	addwf	4,w
  1544  0147  0082               	movwf	2
  1545  0148                     l2872:	
  1546                           
  1547                           ;scankey.c: 58: return key_return;
  1548  0148  0874               	movf	key_driver@key_return,w
  1549  0149  0008               	return
  1550  014A                     __end_of_key_driver:	
  1551                           
  1552                           	psect	swtext1
  1553  0357                     __pswtext1:	
  1554  0357                     S3510:	
  1555  0357  2910               	ljmp	l2840
  1556  0358  2918               	ljmp	l2844
  1557  0359  2922               	ljmp	l2852
  1558  035A  2935               	ljmp	l2864
  1559                           
  1560                           	psect	text10
  1561  01C1                     __ptext10:	
  1562 ;; *************** function _checkFan *****************
  1563 ;; Defined at:
  1564 ;;		line 121 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;		None
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;		None
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1573 ;; Tracked objects:
  1574 ;;		On entry : 800/0
  1575 ;;		On exit  : 200/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMMON   BANK0   BANK1
  1578 ;;      Params:         0       0       0
  1579 ;;      Locals:         0       0       0
  1580 ;;      Temps:          0       1       0
  1581 ;;      Totals:         0       1       0
  1582 ;;Total ram usage:        1 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    5
  1585 ;; This function calls:
  1586 ;;		_closeFan
  1587 ;;		_setFanLevel
  1588 ;; This function is called by:
  1589 ;;		_checkKeys
  1590 ;; This function uses a non-reentrant model
  1591 ;;
  1592                           
  1593                           
  1594                           ;psect for function _checkFan
  1595  01C1                     _checkFan:	
  1596  01C1                     l3300:	
  1597                           ;incstack = 0
  1598                           ; Regs used in _checkFan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1599                           
  1600                           
  1601                           ;main.c: 122: TRISA&=~(1<<1);
  1602  01C1  1683               	bsf	3,5	;RP0=1, select bank1
  1603  01C2  1303               	bcf	3,6	;RP1=0, select bank1
  1604  01C3  1085               	bcf	5,1	;volatile
  1605                           
  1606                           ;main.c: 123: PORTA|=(1<<1);
  1607  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  1608  01C5  1485               	bsf	5,1	;volatile
  1609                           
  1610                           ;main.c: 125: TRISC&=~(1<<2);
  1611  01C6  1683               	bsf	3,5	;RP0=1, select bank1
  1612  01C7  1107               	bcf	7,2	;volatile
  1613                           
  1614                           ;main.c: 126: PORTA|=(1<<2);
  1615  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  1616  01C9  1505               	bsf	5,2	;volatile
  1617                           
  1618                           ;main.c: 127: T2CON = 0X04;
  1619  01CA  3004               	movlw	4
  1620  01CB  0092               	movwf	18	;volatile
  1621                           
  1622                           ;main.c: 130: if (((PORTB) >> (6)&1) == 0) {
  1623  01CC  0806               	movf	6,w	;volatile
  1624  01CD  00CE               	movwf	??_checkFan
  1625  01CE  3006               	movlw	6
  1626  01CF                     u1125:	
  1627  01CF  1003               	clrc
  1628  01D0  0CCE               	rrf	??_checkFan,f
  1629  01D1  3EFF               	addlw	-1
  1630  01D2  1D03               	skipz
  1631  01D3  29CF               	goto	u1125
  1632  01D4  184E               	btfsc	??_checkFan,0
  1633  01D5  29D9               	goto	l3308
  1634                           
  1635                           ;main.c: 131: FAN_STATUS = 1;
  1636  01D6  01F7               	clrf	_FAN_STATUS
  1637  01D7  0AF7               	incf	_FAN_STATUS,f
  1638                           
  1639                           ;main.c: 132: } else {
  1640  01D8  29DB               	goto	l3310
  1641  01D9                     l3308:	
  1642                           
  1643                           ;main.c: 133: FAN_STATUS = 2;
  1644  01D9  3002               	movlw	2
  1645  01DA  00F7               	movwf	_FAN_STATUS
  1646  01DB                     l3310:	
  1647                           
  1648                           ;main.c: 134: }
  1649                           ;main.c: 136: setFanLevel(0);
  1650  01DB  3000               	movlw	0
  1651  01DC  214A               	fcall	_setFanLevel
  1652                           
  1653                           ;main.c: 139: if (FAN_STATUS == 2) {
  1654  01DD  3002               	movlw	2
  1655  01DE  0677               	xorwf	_FAN_STATUS,w
  1656  01DF  1D03               	btfss	3,2
  1657  01E0  0008               	return
  1658                           
  1659                           ;main.c: 140: fan_check_time++;
  1660  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1661  01E2  0AA8               	incf	_fan_check_time,f
  1662  01E3  1903               	skipnz
  1663  01E4  0AA9               	incf	_fan_check_time+1,f
  1664                           
  1665                           ;main.c: 141: if (fan_check_time == 3000) {
  1666  01E5  30B8               	movlw	184
  1667  01E6  0628               	xorwf	_fan_check_time,w
  1668  01E7  300B               	movlw	11
  1669  01E8  1903               	skipnz
  1670  01E9  0629               	xorwf	_fan_check_time+1,w
  1671  01EA  1D03               	btfss	3,2
  1672  01EB  0008               	return
  1673                           
  1674                           ;main.c: 142: closeFan();
  1675  01EC  2B0F               	ljmp	l2798
  1676  01ED                     __end_of_checkFan:	
  1677                           
  1678                           	psect	text11
  1679  014A                     __ptext11:	
  1680 ;; *************** function _setFanLevel *****************
  1681 ;; Defined at:
  1682 ;;		line 66 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;  level           1    wreg     unsigned char 
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;  level           1    5[COMMON] unsigned char 
  1687 ;;  levelWidth      2    0        unsigned int 
  1688 ;;  tempLevel       1    6[COMMON] unsigned char 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      void 
  1691 ;; Registers used:
  1692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1693 ;; Tracked objects:
  1694 ;;		On entry : B00/0
  1695 ;;		On exit  : 200/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMMON   BANK0   BANK1
  1698 ;;      Params:         0       0       0
  1699 ;;      Locals:         2       0       0
  1700 ;;      Temps:          0       0       0
  1701 ;;      Totals:         2       0       0
  1702 ;;Total ram usage:        2 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:    4
  1705 ;; This function calls:
  1706 ;;		___awdiv
  1707 ;;		_setLedOn
  1708 ;; This function is called by:
  1709 ;;		_checkFan
  1710 ;;		_checkKeys
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714                           
  1715                           ;psect for function _setFanLevel
  1716  014A                     _setFanLevel:	
  1717                           
  1718                           ;incstack = 0
  1719                           ; Regs used in _setFanLevel: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1720                           ;setFanLevel@level stored from wreg
  1721  014A  00F5               	movwf	setFanLevel@level
  1722                           
  1723                           ;main.c: 67: if(level == 0)
  1724  014B  0875               	movf	setFanLevel@level,w
  1725  014C  1D03               	btfss	3,2
  1726  014D  2950               	goto	l3270
  1727                           
  1728                           ;main.c: 68: {
  1729                           ;main.c: 69: currentLevel = 3;
  1730  014E  3003               	movlw	3
  1731  014F  00F8               	movwf	_currentLevel
  1732  0150                     l3270:	
  1733                           
  1734                           ;main.c: 70: }
  1735                           ;main.c: 71: unsigned int levelWidth = (PR2 + 1) / 4;
  1736  0150  1683               	bsf	3,5	;RP0=1, select bank1
  1737  0151  0812               	movf	18,w	;volatile
  1738  0152  1283               	bcf	3,5	;RP0=0, select bank0
  1739  0153  00C8               	movwf	___awdiv@dividend
  1740  0154  01C9               	clrf	___awdiv@dividend+1
  1741  0155  0AC8               	incf	___awdiv@dividend,f
  1742  0156  1903               	skipnz
  1743  0157  0AC9               	incf	___awdiv@dividend+1,f
  1744  0158  3004               	movlw	4
  1745  0159  00C6               	movwf	___awdiv@divisor
  1746  015A  01C7               	clrf	___awdiv@divisor+1
  1747  015B  20C3               	fcall	___awdiv
  1748                           
  1749                           ;main.c: 72: char tempLevel = currentLevel + level;
  1750  015C  0875               	movf	setFanLevel@level,w
  1751  015D  0778               	addwf	_currentLevel,w
  1752  015E  00F6               	movwf	setFanLevel@tempLevel
  1753                           
  1754                           ;main.c: 73: if (tempLevel > 4) {
  1755  015F  3005               	movlw	5
  1756  0160  0276               	subwf	setFanLevel@tempLevel,w
  1757  0161  1C03               	skipc
  1758  0162  2965               	goto	l3278
  1759                           
  1760                           ;main.c: 74: tempLevel = 4;
  1761  0163  3004               	movlw	4
  1762  0164  00F6               	movwf	setFanLevel@tempLevel
  1763  0165                     l3278:	
  1764                           
  1765                           ;main.c: 75: }
  1766                           ;main.c: 77: if (tempLevel < 1) {
  1767  0165  0876               	movf	setFanLevel@tempLevel,w
  1768  0166  1D03               	btfss	3,2
  1769  0167  296A               	goto	l3282
  1770                           
  1771                           ;main.c: 78: tempLevel = 1;
  1772  0168  01F6               	clrf	setFanLevel@tempLevel
  1773  0169  0AF6               	incf	setFanLevel@tempLevel,f
  1774  016A                     l3282:	
  1775                           
  1776                           ;main.c: 79: }
  1777                           ;main.c: 82: if (FAN_STATUS == 1) {
  1778  016A  0B77               	decfsz	_FAN_STATUS,w
  1779  016B  0008               	return
  1780                           
  1781                           ;main.c: 83: currentLevel = tempLevel;
  1782  016C  0876               	movf	setFanLevel@tempLevel,w
  1783  016D  00F8               	movwf	_currentLevel
  1784                           
  1785                           ;main.c: 84: switch(currentLevel)
  1786  016E  2978               	goto	l3296
  1787  016F                     l3286:	
  1788                           
  1789                           ;main.c: 87: CCPR1L = 1;
  1790  016F  3001               	movlw	1
  1791  0170  2976               	goto	L6
  1792  0171                     l3288:	
  1793                           ;main.c: 88: break;
  1794                           
  1795                           
  1796                           ;main.c: 90: CCPR1L = 2;
  1797  0171  3002               	movlw	2
  1798  0172  2976               	goto	L6
  1799  0173                     l3290:	
  1800                           ;main.c: 91: break;
  1801                           
  1802                           
  1803                           ;main.c: 93: CCPR1L = 3;
  1804  0173  3003               	movlw	3
  1805  0174  2976               	goto	L6
  1806  0175                     l3292:	
  1807                           ;main.c: 94: break;
  1808                           
  1809                           
  1810                           ;main.c: 96: CCPR1L = 5;
  1811  0175  3005               	movlw	5
  1812  0176                     L6:	
  1813  0176  0095               	movwf	21	;volatile
  1814                           
  1815                           ;main.c: 97: break;
  1816  0177  2986               	goto	l3298
  1817  0178                     l3296:	
  1818  0178  0878               	movf	_currentLevel,w
  1819                           
  1820                           ; Switch size 1, requested type "space"
  1821                           ; Number of cases is 4, Range of values is 1 to 4
  1822                           ; switch strategies available:
  1823                           ; Name         Instructions Cycles
  1824                           ; simple_byte           13     7 (average)
  1825                           ; direct_byte           13     9 (fixed)
  1826                           ; jumptable            263     9 (fixed)
  1827                           ;	Chosen strategy is simple_byte
  1828  0179  3A01               	xorlw	1	; case 1
  1829  017A  1903               	skipnz
  1830  017B  296F               	goto	l3286
  1831  017C  3A03               	xorlw	3	; case 2
  1832  017D  1903               	skipnz
  1833  017E  2971               	goto	l3288
  1834  017F  3A01               	xorlw	1	; case 3
  1835  0180  1903               	skipnz
  1836  0181  2973               	goto	l3290
  1837  0182  3A07               	xorlw	7	; case 4
  1838  0183  1903               	skipnz
  1839  0184  2975               	goto	l3292
  1840  0185  2986               	goto	l3298
  1841  0186                     l3298:	
  1842                           
  1843                           ;main.c: 101: setLedOn(currentLevel);
  1844  0186  0878               	movf	_currentLevel,w
  1845  0187  2988               	ljmp	_setLedOn
  1846  0188                     __end_of_setFanLevel:	
  1847                           
  1848                           	psect	text12
  1849  00C3                     __ptext12:	
  1850 ;; *************** function ___awdiv *****************
  1851 ;; Defined at:
  1852 ;;		line 6 in file "C:\¹¤¾ß\µ¥Æ¬»úÑ§Ï°×ÊÁÏ\SC8P\SCMCU_IDE_V2.00.07\data\sources\common\awdiv.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;  divisor         2    0[BANK0 ] int 
  1855 ;;  dividend        2    2[BANK0 ] int 
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;  quotient        2    6[BANK0 ] int 
  1858 ;;  sign            1    5[BANK0 ] unsigned char 
  1859 ;;  counter         1    4[BANK0 ] unsigned char 
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  2    0[BANK0 ] int 
  1862 ;; Registers used:
  1863 ;;		wreg, status,2, status,0
  1864 ;; Tracked objects:
  1865 ;;		On entry : B00/0
  1866 ;;		On exit  : B00/0
  1867 ;;		Unchanged: 800/0
  1868 ;; Data sizes:     COMMON   BANK0   BANK1
  1869 ;;      Params:         0       4       0
  1870 ;;      Locals:         0       4       0
  1871 ;;      Temps:          0       0       0
  1872 ;;      Totals:         0       8       0
  1873 ;;Total ram usage:        8 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    3
  1876 ;; This function calls:
  1877 ;;		Nothing
  1878 ;; This function is called by:
  1879 ;;		_setFanLevel
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           
  1884                           ;psect for function ___awdiv
  1885  00C3                     ___awdiv:	
  1886                           
  1887                           ;incstack = 0
  1888                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1889  00C3  01CB               	clrf	___awdiv@sign
  1890  00C4  1FC7               	btfss	___awdiv@divisor+1,7
  1891  00C5  28CD               	goto	l3230
  1892  00C6  09C6               	comf	___awdiv@divisor,f
  1893  00C7  09C7               	comf	___awdiv@divisor+1,f
  1894  00C8  0AC6               	incf	___awdiv@divisor,f
  1895  00C9  1903               	skipnz
  1896  00CA  0AC7               	incf	___awdiv@divisor+1,f
  1897  00CB  01CB               	clrf	___awdiv@sign
  1898  00CC  0ACB               	incf	___awdiv@sign,f
  1899  00CD                     l3230:	
  1900  00CD  1FC9               	btfss	___awdiv@dividend+1,7
  1901  00CE  28D6               	goto	l3236
  1902  00CF  09C8               	comf	___awdiv@dividend,f
  1903  00D0  09C9               	comf	___awdiv@dividend+1,f
  1904  00D1  0AC8               	incf	___awdiv@dividend,f
  1905  00D2  1903               	skipnz
  1906  00D3  0AC9               	incf	___awdiv@dividend+1,f
  1907  00D4  3001               	movlw	1
  1908  00D5  06CB               	xorwf	___awdiv@sign,f
  1909  00D6                     l3236:	
  1910  00D6  01CC               	clrf	___awdiv@quotient
  1911  00D7  01CD               	clrf	___awdiv@quotient+1
  1912  00D8  0846               	movf	___awdiv@divisor,w
  1913  00D9  0447               	iorwf	___awdiv@divisor+1,w
  1914  00DA  1903               	btfsc	3,2
  1915  00DB  28FB               	goto	l3258
  1916  00DC  01CA               	clrf	___awdiv@counter
  1917  00DD                     L7:	
  1918  00DD  0ACA               	incf	___awdiv@counter,f
  1919  00DE  1BC7               	btfsc	___awdiv@divisor+1,7
  1920  00DF  28E4               	goto	l3246
  1921  00E0  1003               	clrc
  1922  00E1  0DC6               	rlf	___awdiv@divisor,f
  1923  00E2  0DC7               	rlf	___awdiv@divisor+1,f
  1924  00E3  28DD               	goto	L7
  1925  00E4                     l3246:	
  1926  00E4  1003               	clrc
  1927  00E5  0DCC               	rlf	___awdiv@quotient,f
  1928  00E6  0DCD               	rlf	___awdiv@quotient+1,f
  1929  00E7  0847               	movf	___awdiv@divisor+1,w
  1930  00E8  0249               	subwf	___awdiv@dividend+1,w
  1931  00E9  1D03               	skipz
  1932  00EA  28ED               	goto	u1055
  1933  00EB  0846               	movf	___awdiv@divisor,w
  1934  00EC  0248               	subwf	___awdiv@dividend,w
  1935  00ED                     u1055:	
  1936  00ED  1C03               	skipc
  1937  00EE  28F7               	goto	L8
  1938  00EF  0846               	movf	___awdiv@divisor,w
  1939  00F0  02C8               	subwf	___awdiv@dividend,f
  1940  00F1  0847               	movf	___awdiv@divisor+1,w
  1941  00F2  1C03               	skipc
  1942  00F3  03C9               	decf	___awdiv@dividend+1,f
  1943  00F4  02C9               	subwf	___awdiv@dividend+1,f
  1944  00F5  144C               	bsf	___awdiv@quotient,0
  1945  00F6  1003               	clrc
  1946  00F7                     L8:	
  1947  00F7  0CC7               	rrf	___awdiv@divisor+1,f
  1948  00F8  0CC6               	rrf	___awdiv@divisor,f
  1949  00F9  0BCA               	decfsz	___awdiv@counter,f
  1950  00FA  28E4               	goto	l3246
  1951  00FB                     l3258:	
  1952  00FB  084B               	movf	___awdiv@sign,w
  1953  00FC  1903               	btfsc	3,2
  1954  00FD  2903               	goto	l3262
  1955  00FE  09CC               	comf	___awdiv@quotient,f
  1956  00FF  09CD               	comf	___awdiv@quotient+1,f
  1957  0100  0ACC               	incf	___awdiv@quotient,f
  1958  0101  1903               	skipnz
  1959  0102  0ACD               	incf	___awdiv@quotient+1,f
  1960  0103                     l3262:	
  1961  0103  084D               	movf	___awdiv@quotient+1,w
  1962  0104  00C7               	movwf	?___awdiv+1
  1963  0105  084C               	movf	___awdiv@quotient,w
  1964  0106  00C6               	movwf	?___awdiv
  1965  0107  0008               	return
  1966  0108                     __end_of___awdiv:	
  1967                           
  1968                           	psect	text13
  1969  030F                     __ptext13:	
  1970 ;; *************** function _closeFan *****************
  1971 ;; Defined at:
  1972 ;;		line 107 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;		None
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;		None
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  1    wreg      void 
  1979 ;; Registers used:
  1980 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 300/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMMON   BANK0   BANK1
  1986 ;;      Params:         0       0       0
  1987 ;;      Locals:         0       0       0
  1988 ;;      Temps:          0       0       0
  1989 ;;      Totals:         0       0       0
  1990 ;;Total ram usage:        0 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:    4
  1993 ;; This function calls:
  1994 ;;		_Init_PWM
  1995 ;;		_setLedOn
  1996 ;; This function is called by:
  1997 ;;		_checkFan
  1998 ;;		_checkKeys
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           
  2003                           ;psect for function _closeFan
  2004  030F                     _closeFan:	
  2005  030F                     l2798:	
  2006                           ;incstack = 0
  2007                           ; Regs used in _closeFan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2008                           
  2009                           
  2010                           ;main.c: 108: Init_PWM();
  2011  030F  22EF               	fcall	_Init_PWM
  2012                           
  2013                           ;main.c: 109: currentLevel = 2;
  2014  0310  3002               	movlw	2
  2015  0311  00F8               	movwf	_currentLevel
  2016                           
  2017                           ;main.c: 110: setLedOn(5);
  2018  0312  3005               	movlw	5
  2019  0313  2188               	fcall	_setLedOn
  2020                           
  2021                           ;main.c: 111: PORTA|=(1<<0);
  2022  0314  1283               	bcf	3,5	;RP0=0, select bank0
  2023  0315  1405               	bsf	5,0	;volatile
  2024                           
  2025                           ;main.c: 113: TRISC|=(1<<2);
  2026  0316  1683               	bsf	3,5	;RP0=1, select bank1
  2027  0317  1507               	bsf	7,2	;volatile
  2028                           
  2029                           ;main.c: 114: fan_check_time = 0;
  2030  0318  1283               	bcf	3,5	;RP0=0, select bank0
  2031  0319  01A8               	clrf	_fan_check_time
  2032  031A  01A9               	clrf	_fan_check_time+1
  2033                           
  2034                           ;main.c: 115: FAN_STATUS = 0;
  2035  031B  01F7               	clrf	_FAN_STATUS
  2036  031C  0008               	return
  2037  031D                     __end_of_closeFan:	
  2038                           
  2039                           	psect	text14
  2040  0188                     __ptext14:	
  2041 ;; *************** function _setLedOn *****************
  2042 ;; Defined at:
  2043 ;;		line 152 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;  ledIndex        1    wreg     unsigned char 
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;  ledIndex        1    4[COMMON] unsigned char 
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  1    wreg      void 
  2050 ;; Registers used:
  2051 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2052 ;; Tracked objects:
  2053 ;;		On entry : 200/0
  2054 ;;		On exit  : 200/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMMON   BANK0   BANK1
  2057 ;;      Params:         0       0       0
  2058 ;;      Locals:         1       0       0
  2059 ;;      Temps:          0       0       0
  2060 ;;      Totals:         1       0       0
  2061 ;;Total ram usage:        1 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; Hardware stack levels required when called:    3
  2064 ;; This function calls:
  2065 ;;		Nothing
  2066 ;; This function is called by:
  2067 ;;		_setFanLevel
  2068 ;;		_closeFan
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           
  2073                           ;psect for function _setLedOn
  2074  0188                     _setLedOn:	
  2075                           
  2076                           ;incstack = 0
  2077                           ; Regs used in _setLedOn: [wreg-fsr0h+status,2+status,0]
  2078                           ;setLedOn@ledIndex stored from wreg
  2079  0188  00F4               	movwf	setLedOn@ledIndex
  2080                           
  2081                           ;main.c: 153: switch(ledIndex) {
  2082  0189  29A5               	goto	l2714
  2083  018A                     l612:	
  2084                           ;main.c: 154: case 1:
  2085                           
  2086                           
  2087                           ;main.c: 156: TRISC&=~(1<<1);
  2088                           
  2089                           ;main.c: 157: TRISA|=(1<<7);
  2090                           
  2091                           ;main.c: 158: TRISC&=~(1<<0);
  2092                           
  2093                           ;main.c: 159: PORTA&=~(1<<7);
  2094  018A  21B4               	fcall	PL16	;call to abstracted procedure
  2095                           
  2096                           ;main.c: 160: PORTC|=(1<<0);
  2097  018B  1407               	bsf	7,0	;volatile
  2098                           
  2099                           ;main.c: 161: PORTC&=~(1<<1);
  2100  018C  1087               	bcf	7,1	;volatile
  2101                           
  2102                           ;main.c: 162: break;
  2103  018D  0008               	return
  2104  018E                     l614:	
  2105                           ;main.c: 163: case 2:
  2106                           
  2107                           
  2108                           ;main.c: 164: TRISC&=~(1<<1);
  2109                           
  2110                           ;main.c: 165: TRISA|=(1<<7);
  2111                           
  2112                           ;main.c: 166: TRISC&=~(1<<0);
  2113                           
  2114                           ;main.c: 167: PORTA&=~(1<<7);
  2115  018E  21B4               	fcall	PL16	;call to abstracted procedure
  2116                           
  2117                           ;main.c: 168: PORTC&=~(1<<0);
  2118  018F  1007               	bcf	7,0	;volatile
  2119                           
  2120                           ;main.c: 169: PORTC|=(1<<1);
  2121  0190  1487               	bsf	7,1	;volatile
  2122                           
  2123                           ;main.c: 170: break;
  2124  0191  0008               	return
  2125  0192                     l615:	
  2126                           ;main.c: 171: case 3:
  2127                           
  2128                           
  2129                           ;main.c: 173: TRISC|=(1<<0);
  2130                           
  2131                           ;main.c: 174: TRISA&=~(1<<7);
  2132                           
  2133                           ;main.c: 175: TRISC&=~(1<<1);
  2134                           
  2135                           ;main.c: 176: PORTA|=(1<<7);
  2136  0192  21BB               	fcall	PL18	;call to abstracted procedure
  2137  0193  1785               	bsf	5,7	;volatile
  2138                           
  2139                           ;main.c: 177: PORTC&=~(1<<0);
  2140  0194  1007               	bcf	7,0	;volatile
  2141                           
  2142                           ;main.c: 178: PORTC&=~(1<<1);
  2143  0195  1087               	bcf	7,1	;volatile
  2144                           
  2145                           ;main.c: 179: break;
  2146  0196  0008               	return
  2147  0197                     l616:	
  2148                           ;main.c: 180: case 4:
  2149                           
  2150                           
  2151                           ;main.c: 181: TRISC|=(1<<0);
  2152                           
  2153                           ;main.c: 182: TRISA&=~(1<<7);
  2154                           
  2155                           ;main.c: 183: TRISC&=~(1<<1);
  2156                           
  2157                           ;main.c: 184: PORTA&=~(1<<7);
  2158  0197  21BB               	fcall	PL18	;call to abstracted procedure
  2159  0198  1385               	bcf	5,7	;volatile
  2160                           
  2161                           ;main.c: 185: PORTC|=(1<<0);
  2162  0199  1407               	bsf	7,0	;volatile
  2163                           
  2164                           ;main.c: 186: PORTC|=(1<<1);
  2165  019A  1487               	bsf	7,1	;volatile
  2166                           
  2167                           ;main.c: 187: break;
  2168  019B  0008               	return
  2169  019C                     l617:	
  2170                           ;main.c: 188: case 5:
  2171                           
  2172                           
  2173                           ;main.c: 190: TRISC|=(1<<0);
  2174  019C  1683               	bsf	3,5	;RP0=1, select bank1
  2175  019D  1407               	bsf	7,0	;volatile
  2176                           
  2177                           ;main.c: 191: TRISA|=(1<<7);
  2178  019E  1785               	bsf	5,7	;volatile
  2179                           
  2180                           ;main.c: 192: TRISC|=(1<<1);
  2181  019F  1487               	bsf	7,1	;volatile
  2182                           
  2183                           ;main.c: 193: PORTC&=~(1<<0);
  2184  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  2185  01A1  1007               	bcf	7,0	;volatile
  2186                           
  2187                           ;main.c: 194: PORTA&=~(1<<7);
  2188  01A2  1385               	bcf	5,7	;volatile
  2189                           
  2190                           ;main.c: 195: PORTC&=~(1<<1);
  2191  01A3  1087               	bcf	7,1	;volatile
  2192                           
  2193                           ;main.c: 196: break;
  2194  01A4  0008               	return
  2195  01A5                     l2714:	
  2196  01A5  0874               	movf	setLedOn@ledIndex,w
  2197                           
  2198                           ; Switch size 1, requested type "space"
  2199                           ; Number of cases is 5, Range of values is 1 to 5
  2200                           ; switch strategies available:
  2201                           ; Name         Instructions Cycles
  2202                           ; direct_byte           14     9 (fixed)
  2203                           ; simple_byte           16     9 (average)
  2204                           ; jumptable            263     9 (fixed)
  2205                           ;	Chosen strategy is direct_byte
  2206  01A6  3EFF               	addlw	-1
  2207  01A7  1C03               	skipc
  2208  01A8  0008               	return
  2209  01A9  0084               	movwf	4
  2210  01AA  3005               	movlw	5
  2211  01AB  0204               	subwf	4,w
  2212  01AC  1803               	skipnc
  2213  01AD  0008               	return
  2214  01AE  3003               	movlw	high S3512
  2215  01AF  008A               	movwf	10
  2216  01B0  3052               	movlw	low S3512
  2217  01B1  0704               	addwf	4,w
  2218  01B2  0082               	movwf	2
  2219  01B3  0008               	return
  2220  01B4                     __end_of_setLedOn:	
  2221  01B4                     PL16:	
  2222  01B4  1683               	bsf	3,5	;RP0=1, select bank1
  2223  01B5  1087               	bcf	7,1	;volatile
  2224  01B6  1785               	bsf	5,7	;volatile
  2225  01B7  1007               	bcf	7,0	;volatile
  2226  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  2227  01B9  1385               	bcf	5,7	;volatile
  2228  01BA  0008               	return
  2229  01BB                     __end_ofPL16:	
  2230  01BB                     PL18:	
  2231  01BB  1683               	bsf	3,5	;RP0=1, select bank1
  2232  01BC  1407               	bsf	7,0	;volatile
  2233  01BD  1385               	bcf	5,7	;volatile
  2234  01BE  1087               	bcf	7,1	;volatile
  2235  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  2236  01C0  0008               	return
  2237  01C1                     __end_ofPL18:	
  2238                           
  2239                           	psect	swtext2
  2240  0352                     __pswtext2:	
  2241  0352                     S3512:	
  2242  0352  298A               	ljmp	l612
  2243  0353  298E               	ljmp	l614
  2244  0354  2992               	ljmp	l615
  2245  0355  2997               	ljmp	l616
  2246  0356  299C               	ljmp	l617
  2247                           
  2248                           	psect	text15
  2249  022F                     __ptext15:	
  2250 ;; *************** function _Init_Config *****************
  2251 ;; Defined at:
  2252 ;;		line 272 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;		None
  2255 ;; Auto vars:     Size  Location     Type
  2256 ;;		None
  2257 ;; Return value:  Size  Location     Type
  2258 ;;                  1    wreg      void 
  2259 ;; Registers used:
  2260 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2261 ;; Tracked objects:
  2262 ;;		On entry : B00/0
  2263 ;;		On exit  : B00/100
  2264 ;;		Unchanged: 0/0
  2265 ;; Data sizes:     COMMON   BANK0   BANK1
  2266 ;;      Params:         0       0       0
  2267 ;;      Locals:         0       0       0
  2268 ;;      Temps:          0       0       0
  2269 ;;      Totals:         0       0       0
  2270 ;;Total ram usage:        0 bytes
  2271 ;; Hardware stack levels used:    1
  2272 ;; Hardware stack levels required when called:    4
  2273 ;; This function calls:
  2274 ;;		_Init_GPIO
  2275 ;;		_Init_Interupt
  2276 ;;		_Init_PWM
  2277 ;;		_Init_System
  2278 ;;		_resetKey
  2279 ;; This function is called by:
  2280 ;;		_main
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           
  2285                           ;psect for function _Init_Config
  2286  022F                     _Init_Config:	
  2287                           
  2288                           ;main.c: 274: Init_System();
  2289                           
  2290                           ;incstack = 0
  2291                           ; Regs used in _Init_Config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2292  022F  235B               	fcall	_Init_System
  2293                           
  2294                           ;main.c: 275: Init_GPIO();
  2295  0230  22BA               	fcall	_Init_GPIO
  2296                           
  2297                           ;main.c: 276: Init_Interupt();
  2298  0231  2345               	fcall	_Init_Interupt
  2299                           
  2300                           ;main.c: 277: Init_PWM();
  2301  0232  22EF               	fcall	_Init_PWM
  2302                           
  2303                           ;main.c: 279: IOCB = 0x04;
  2304                           
  2305                           ;main.c: 280: TMR0 = 155;
  2306                           
  2307                           ;main.c: 281: TO = 0;
  2308                           
  2309                           ;main.c: 284: key1.key_index = 5;
  2310                           
  2311                           ;main.c: 286: key2.key_index = 4;
  2312                           
  2313                           ;main.c: 288: key3.key_index = 3;
  2314                           
  2315                           ;main.c: 289: resetKey(&key1);
  2316  0233  223A               	fcall	PL6	;call to abstracted procedure
  2317  0234  22DF               	fcall	_resetKey
  2318                           
  2319                           ;main.c: 290: resetKey(&key2);
  2320  0235  3038               	movlw	(low (_key2| 0))& (0+255)
  2321  0236  22DF               	fcall	_resetKey
  2322                           
  2323                           ;main.c: 291: resetKey(&key3);
  2324  0237  3031               	movlw	(low (_key3| 0))& (0+255)
  2325  0238  22DF               	fcall	_resetKey
  2326                           
  2327                           ;main.c: 293: TRISA = 0;
  2328                           
  2329                           ;main.c: 294: TRISB = 0x7E;
  2330                           
  2331                           ;main.c: 295: TRISC = 0;
  2332  0239  2A47               	ljmp	PL12	;call to abstracted procedure
  2333  023A                     __end_of_Init_Config:	
  2334  023A                     PL6:	
  2335  023A  3004               	movlw	4
  2336  023B  0096               	movwf	22	;volatile
  2337  023C  309B               	movlw	155
  2338  023D  1283               	bcf	3,5	;RP0=0, select bank0
  2339  023E  0081               	movwf	1	;volatile
  2340  023F  1203               	bcf	3,4	;volatile
  2341  0240  3005               	movlw	5
  2342  0241  00C5               	movwf	_key1+6
  2343  0242  3004               	movlw	4
  2344  0243  00BE               	movwf	_key2+6
  2345  0244  3003               	movlw	3
  2346  0245  00B7               	movwf	_key3+6
  2347  0246  343F               	retlw	(low (_key1| 0))& (0+255)
  2348  0247                     __end_ofPL6:	
  2349  0247                     PL12:	
  2350  0247  1683               	bsf	3,5	;RP0=1, select bank1
  2351  0248  1303               	bcf	3,6	;RP1=0, select bank1
  2352  0249  0185               	clrf	5	;volatile
  2353  024A  307E               	movlw	126
  2354  024B  0086               	movwf	6	;volatile
  2355  024C  0187               	clrf	7	;volatile
  2356  024D  0008               	return
  2357  024E                     __end_ofPL12:	
  2358                           
  2359                           	psect	text16
  2360  02DF                     __ptext16:	
  2361 ;; *************** function _resetKey *****************
  2362 ;; Defined at:
  2363 ;;		line 100 in file "C:\SCMCU WorkSpace\uf166fan\scankey.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;  key             1    wreg     PTR struct Keys
  2366 ;;		 -> key3(7), key2(7), key1(7), 
  2367 ;; Auto vars:     Size  Location     Type
  2368 ;;  key             1    4[COMMON] PTR struct Keys
  2369 ;;		 -> key3(7), key2(7), key1(7), 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      void 
  2372 ;; Registers used:
  2373 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 800/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMMON   BANK0   BANK1
  2379 ;;      Params:         0       0       0
  2380 ;;      Locals:         1       0       0
  2381 ;;      Temps:          0       0       0
  2382 ;;      Totals:         1       0       0
  2383 ;;Total ram usage:        1 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    3
  2386 ;; This function calls:
  2387 ;;		Nothing
  2388 ;; This function is called by:
  2389 ;;		_Init_Config
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           
  2394                           ;psect for function _resetKey
  2395  02DF                     _resetKey:	
  2396                           
  2397                           ;incstack = 0
  2398                           ; Regs used in _resetKey: [wreg-fsr0h+status,2+status,0]
  2399                           ;resetKey@key stored from wreg
  2400  02DF  00F4               	movwf	resetKey@key
  2401                           
  2402                           ;scankey.c: 101: key->key_timer_cnt1 = key->key_timer_cnt2 = key->key_state_buffer1 = ke
      +                          y->key_state_buffer2 = 0;
  2403  02E0  3E03               	addlw	3
  2404  02E1  0084               	movwf	4
  2405  02E2  1383               	bcf	3,7	;select IRP bank0
  2406  02E3  0180               	clrf	0
  2407  02E4  0A74               	incf	resetKey@key,w
  2408  02E5  0084               	movwf	4
  2409  02E6  0180               	clrf	0
  2410  02E7  0874               	movf	resetKey@key,w
  2411  02E8  3E02               	addlw	2
  2412  02E9  0084               	movwf	4
  2413  02EA  0180               	clrf	0
  2414  02EB  0874               	movf	resetKey@key,w
  2415  02EC  0084               	movwf	4
  2416  02ED  0180               	clrf	0
  2417  02EE  0008               	return
  2418  02EF                     __end_of_resetKey:	
  2419                           
  2420                           	psect	text17
  2421  035B                     __ptext17:	
  2422 ;; *************** function _Init_System *****************
  2423 ;; Defined at:
  2424 ;;		line 3 in file "C:\SCMCU WorkSpace\uf166fan\init.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;		None
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;		None
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  1    wreg      void 
  2431 ;; Registers used:
  2432 ;;		wreg, status,2
  2433 ;; Tracked objects:
  2434 ;;		On entry : B00/0
  2435 ;;		On exit  : 300/100
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMMON   BANK0   BANK1
  2438 ;;      Params:         0       0       0
  2439 ;;      Locals:         0       0       0
  2440 ;;      Temps:          0       0       0
  2441 ;;      Totals:         0       0       0
  2442 ;;Total ram usage:        0 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; Hardware stack levels required when called:    3
  2445 ;; This function calls:
  2446 ;;		Nothing
  2447 ;; This function is called by:
  2448 ;;		_Init_Config
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           
  2453                           ;psect for function _Init_System
  2454  035B                     _Init_System:	
  2455                           
  2456                           ;incstack = 0
  2457                           ; Regs used in _Init_System: [wreg+status,2]
  2458  035B  0000               	nop	;# 
  2459  035C  0064               	clrwdt	;# 
  2460                           
  2461                           ;init.c: 6: INTCON = 0;
  2462                           
  2463                           ;init.c: 7: OSCCON = 0X71;
  2464                           
  2465                           ;init.c: 8: OPTION_REG = 0x00;
  2466  035D  2B36               	ljmp	PL10	;call to abstracted procedure
  2467  035E                     __end_of_Init_System:	
  2468                           
  2469                           	psect	text18
  2470  02EF                     __ptext18:	
  2471 ;; *************** function _Init_PWM *****************
  2472 ;; Defined at:
  2473 ;;		line 52 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  2474 ;; Parameters:    Size  Location     Type
  2475 ;;		None
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;		None
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  1    wreg      void 
  2480 ;; Registers used:
  2481 ;;		wreg, status,2
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 300/100
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMMON   BANK0   BANK1
  2487 ;;      Params:         0       0       0
  2488 ;;      Locals:         0       0       0
  2489 ;;      Temps:          0       0       0
  2490 ;;      Totals:         0       0       0
  2491 ;;Total ram usage:        0 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    3
  2494 ;; This function calls:
  2495 ;;		Nothing
  2496 ;; This function is called by:
  2497 ;;		_closeFan
  2498 ;;		_Init_Config
  2499 ;; This function uses a non-reentrant model
  2500 ;;
  2501                           
  2502                           
  2503                           ;psect for function _Init_PWM
  2504  02EF                     _Init_PWM:	
  2505                           
  2506                           ;main.c: 53: CCP1CON = 0x0F;
  2507                           
  2508                           ;incstack = 0
  2509                           ; Regs used in _Init_PWM: [wreg+status,2]
  2510  02EF  300F               	movlw	15
  2511  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  2512  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  2513                           
  2514                           ;main.c: 54: T2CON = 0;
  2515                           
  2516                           ;main.c: 55: PR2 = 7;
  2517                           
  2518                           ;main.c: 57: CCPR1L = 0;
  2519                           
  2520                           ;main.c: 58: TMR2IF = 0;
  2521                           
  2522                           ;main.c: 59: T2CON = 0;
  2523                           
  2524                           ;main.c: 61: TRISC&=~(1<<2);
  2525  02F2  2AF3               	ljmp	PL8	;call to abstracted procedure
  2526  02F3                     __end_of_Init_PWM:	
  2527  02F3                     PL8:	
  2528  02F3  0097               	movwf	23	;volatile
  2529  02F4  0192               	clrf	18	;volatile
  2530  02F5  3007               	movlw	7
  2531  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  2532  02F7  0092               	movwf	18	;volatile
  2533  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  2534  02F9  0195               	clrf	21	;volatile
  2535  02FA  108C               	bcf	12,1	;volatile
  2536  02FB  0192               	clrf	18	;volatile
  2537  02FC  1683               	bsf	3,5	;RP0=1, select bank1
  2538  02FD  1107               	bcf	7,2	;volatile
  2539  02FE  0008               	return
  2540  02FF                     __end_ofPL8:	
  2541                           
  2542                           	psect	text19
  2543  0345                     __ptext19:	
  2544 ;; *************** function _Init_Interupt *****************
  2545 ;; Defined at:
  2546 ;;		line 27 in file "C:\SCMCU WorkSpace\uf166fan\init.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;		None
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;		None
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		wreg, status,2
  2555 ;; Tracked objects:
  2556 ;;		On entry : 300/100
  2557 ;;		On exit  : 300/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMMON   BANK0   BANK1
  2560 ;;      Params:         0       0       0
  2561 ;;      Locals:         0       0       0
  2562 ;;      Temps:          0       0       0
  2563 ;;      Totals:         0       0       0
  2564 ;;Total ram usage:        0 bytes
  2565 ;; Hardware stack levels used:    1
  2566 ;; Hardware stack levels required when called:    3
  2567 ;; This function calls:
  2568 ;;		Nothing
  2569 ;; This function is called by:
  2570 ;;		_Init_Config
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           
  2575                           ;psect for function _Init_Interupt
  2576  0345                     _Init_Interupt:	
  2577                           
  2578                           ;init.c: 28: OPTION_REG = 0x00;
  2579                           
  2580                           ;incstack = 0
  2581                           ; Regs used in _Init_Interupt: [wreg+status,2]
  2582                           
  2583                           ;init.c: 29: TMR0 = 0;
  2584                           
  2585                           ;init.c: 30: INTCON = 0xE0;
  2586  0345  2B46               	ljmp	PL14	;call to abstracted procedure
  2587  0346                     __end_of_Init_Interupt:	
  2588  0346                     PL14:	
  2589  0346  0181               	clrf	1	;volatile
  2590  0347  1283               	bcf	3,5	;RP0=0, select bank0
  2591  0348  0181               	clrf	1	;volatile
  2592  0349  30E0               	movlw	224
  2593  034A  008B               	movwf	11	;volatile
  2594  034B  0008               	return
  2595  034C                     __end_ofPL14:	
  2596                           
  2597                           	psect	text20
  2598  02BA                     __ptext20:	
  2599 ;; *************** function _Init_GPIO *****************
  2600 ;; Defined at:
  2601 ;;		line 13 in file "C:\SCMCU WorkSpace\uf166fan\init.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;		None
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;		None
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      void 
  2608 ;; Registers used:
  2609 ;;		wreg, status,2
  2610 ;; Tracked objects:
  2611 ;;		On entry : 300/100
  2612 ;;		On exit  : 300/100
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMMON   BANK0   BANK1
  2615 ;;      Params:         0       0       0
  2616 ;;      Locals:         0       0       0
  2617 ;;      Temps:          0       0       0
  2618 ;;      Totals:         0       0       0
  2619 ;;Total ram usage:        0 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    3
  2622 ;; This function calls:
  2623 ;;		Nothing
  2624 ;; This function is called by:
  2625 ;;		_Init_Config
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           
  2630                           ;psect for function _Init_GPIO
  2631  02BA                     _Init_GPIO:	
  2632                           
  2633                           ;init.c: 14: TRISA = 0;
  2634                           
  2635                           ;incstack = 0
  2636                           ; Regs used in _Init_GPIO: [wreg+status,2]
  2637                           
  2638                           ;init.c: 15: TRISB = 0;
  2639                           
  2640                           ;init.c: 16: TRISC = 0;
  2641                           
  2642                           ;init.c: 17: WPUA = 0xFF;
  2643                           
  2644                           ;init.c: 18: WPUB = 0xFF;
  2645                           
  2646                           ;init.c: 19: WPUC = 0xFF;
  2647                           
  2648                           ;init.c: 20: PORTA = 0xFF;
  2649                           
  2650                           ;init.c: 21: PORTB = 0xFF;
  2651                           
  2652                           ;init.c: 22: PORTC = 0xFF;
  2653                           
  2654                           ;init.c: 23: IOCB = 0x00;
  2655  02BA  2ABB               	ljmp	PL2	;call to abstracted procedure
  2656  02BB                     __end_of_Init_GPIO:	
  2657  02BB                     PL2:	
  2658  02BB  0185               	clrf	5	;volatile
  2659  02BC  0186               	clrf	6	;volatile
  2660  02BD  0187               	clrf	7	;volatile
  2661  02BE  30FF               	movlw	255
  2662  02BF  1703               	bsf	3,6	;RP1=1, select bank3
  2663  02C0  008E               	movwf	14	;volatile
  2664  02C1  1303               	bcf	3,6	;RP1=0, select bank1
  2665  02C2  0095               	movwf	21	;volatile
  2666  02C3  1703               	bsf	3,6	;RP1=1, select bank3
  2667  02C4  008F               	movwf	15	;volatile
  2668  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  2669  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  2670  02C7  0085               	movwf	5	;volatile
  2671  02C8  0086               	movwf	6	;volatile
  2672  02C9  0087               	movwf	7	;volatile
  2673  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  2674  02CB  0196               	clrf	22	;volatile
  2675  02CC  0008               	return
  2676  02CD                     __end_ofPL2:	
  2677                           
  2678                           	psect	text21
  2679  02A4                     __ptext21:	
  2680 ;; *************** function _Timer0_Isr *****************
  2681 ;; Defined at:
  2682 ;;		line 342 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;		None
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;		None
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  1    wreg      void 
  2689 ;; Registers used:
  2690 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMMON   BANK0   BANK1
  2696 ;;      Params:         0       0       0
  2697 ;;      Locals:         0       0       0
  2698 ;;      Temps:          3       0       0
  2699 ;;      Totals:         3       0       0
  2700 ;;Total ram usage:        3 bytes
  2701 ;; Hardware stack levels used:    1
  2702 ;; Hardware stack levels required when called:    2
  2703 ;; This function calls:
  2704 ;;		i1_Init_Config
  2705 ;; This function is called by:
  2706 ;;		Interrupt level 1
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           
  2711                           ;psect for function _Timer0_Isr
  2712  02A4                     _Timer0_Isr:	
  2713                           
  2714                           ;main.c: 343: if (T0IF) {
  2715  02A4  1D0B               	btfss	11,2	;volatile
  2716  02A5  2AAD               	goto	i1l3166
  2717                           
  2718                           ;main.c: 345: TMR0 += 155;
  2719  02A6  309B               	movlw	155
  2720  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2721  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  2722  02A9  0781               	addwf	1,f	;volatile
  2723                           
  2724                           ;main.c: 348: T0IF = 0;
  2725  02AA  110B               	bcf	11,2	;volatile
  2726                           
  2727                           ;main.c: 349: time0Flag = 1;
  2728  02AB  01F9               	clrf	_time0Flag
  2729  02AC  0AF9               	incf	_time0Flag,f
  2730  02AD                     i1l3166:	
  2731                           
  2732                           ;main.c: 351: }
  2733                           ;main.c: 353: if (RBIF) {
  2734  02AD  1C0B               	btfss	11,0	;volatile
  2735  02AE  2AB1               	goto	i1l655
  2736                           
  2737                           ;main.c: 354: RBIF = 0;
  2738  02AF  100B               	bcf	11,0	;volatile
  2739                           
  2740                           ;main.c: 355: Init_Config();
  2741  02B0  2328               	fcall	i1_Init_Config
  2742  02B1                     i1l655:	
  2743  02B1  0873               	movf	??_Timer0_Isr+2,w
  2744  02B2  008A               	movwf	10
  2745  02B3  0872               	movf	??_Timer0_Isr+1,w
  2746  02B4  0084               	movwf	4
  2747  02B5  0E71               	swapf	??_Timer0_Isr^(0+-128),w
  2748  02B6  0083               	movwf	3
  2749  02B7  0EFE               	swapf	126,f
  2750  02B8  0E7E               	swapf	126,w
  2751  02B9  0009               	retfie
  2752  02BA                     __end_of_Timer0_Isr:	
  2753                           
  2754                           	psect	intentry
  2755  0004                     __pintentry:	
  2756                           ;incstack = 0
  2757                           ; Regs used in _Timer0_Isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2758                           
  2759  0004                     interrupt_function:	
  2760  007E                     saved_w	set	btemp
  2761  0004  00FE               	movwf	btemp
  2762  0005  0E03               	swapf	3,w
  2763  0006  00F1               	movwf	??_Timer0_Isr
  2764  0007  0804               	movf	4,w
  2765  0008  00F2               	movwf	??_Timer0_Isr+1
  2766  0009  080A               	movf	10,w
  2767  000A  00F3               	movwf	??_Timer0_Isr+2
  2768  000B  2AA4               	ljmp	_Timer0_Isr
  2769                           
  2770                           	psect	text22
  2771  0328                     __ptext22:	
  2772 ;; *************** function i1_Init_Config *****************
  2773 ;; Defined at:
  2774 ;;		line 272 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;		None
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;		None
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  1    wreg      void 
  2781 ;; Registers used:
  2782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : B00/100
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMMON   BANK0   BANK1
  2788 ;;      Params:         0       0       0
  2789 ;;      Locals:         0       0       0
  2790 ;;      Temps:          0       0       0
  2791 ;;      Totals:         0       0       0
  2792 ;;Total ram usage:        0 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; Hardware stack levels required when called:    1
  2795 ;; This function calls:
  2796 ;;		i1_Init_GPIO
  2797 ;;		i1_Init_Interupt
  2798 ;;		i1_Init_PWM
  2799 ;;		i1_Init_System
  2800 ;;		i1_resetKey
  2801 ;; This function is called by:
  2802 ;;		_Timer0_Isr
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           
  2807                           ;psect for function i1_Init_Config
  2808  0328                     i1_Init_Config:	
  2809                           
  2810                           ;main.c: 274: Init_System();
  2811                           
  2812                           ;incstack = 0
  2813                           ; Regs used in i1_Init_Config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2814  0328  2333               	fcall	i1_Init_System
  2815                           
  2816                           ;main.c: 275: Init_GPIO();
  2817  0329  2361               	fcall	i1_Init_GPIO
  2818                           
  2819                           ;main.c: 276: Init_Interupt();
  2820  032A  2360               	fcall	i1_Init_Interupt
  2821                           
  2822                           ;main.c: 277: Init_PWM();
  2823  032B  235E               	fcall	i1_Init_PWM
  2824                           
  2825                           ;main.c: 279: IOCB = 0x04;
  2826                           
  2827                           ;main.c: 280: TMR0 = 155;
  2828                           
  2829                           ;main.c: 281: TO = 0;
  2830                           
  2831                           ;main.c: 284: key1.key_index = 5;
  2832                           
  2833                           ;main.c: 286: key2.key_index = 4;
  2834                           
  2835                           ;main.c: 288: key3.key_index = 3;
  2836                           
  2837                           ;main.c: 289: resetKey(&key1);
  2838  032C  223A               	fcall	PL6	;call to abstracted procedure
  2839  032D  22FF               	fcall	i1_resetKey
  2840                           
  2841                           ;main.c: 290: resetKey(&key2);
  2842  032E  3038               	movlw	(low (_key2| 0))& (0+255)
  2843  032F  22FF               	fcall	i1_resetKey
  2844                           
  2845                           ;main.c: 291: resetKey(&key3);
  2846  0330  3031               	movlw	(low (_key3| 0))& (0+255)
  2847  0331  22FF               	fcall	i1_resetKey
  2848                           
  2849                           ;main.c: 293: TRISA = 0;
  2850                           
  2851                           ;main.c: 294: TRISB = 0x7E;
  2852                           
  2853                           ;main.c: 295: TRISC = 0;
  2854  0332  2A47               	ljmp	PL12	;call to abstracted procedure
  2855  0333                     __end_ofi1_Init_Config:	
  2856                           
  2857                           	psect	text23
  2858  02FF                     __ptext23:	
  2859 ;; *************** function i1_resetKey *****************
  2860 ;; Defined at:
  2861 ;;		line 100 in file "C:\SCMCU WorkSpace\uf166fan\scankey.c"
  2862 ;; Parameters:    Size  Location     Type
  2863 ;;  key             1    wreg     PTR struct Keys
  2864 ;;		 -> key3(7), key2(7), key1(7), 
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;  key             1    0[COMMON] PTR struct Keys
  2867 ;;		 -> key3(7), key2(7), key1(7), 
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      void 
  2870 ;; Registers used:
  2871 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 800/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMMON   BANK0   BANK1
  2877 ;;      Params:         0       0       0
  2878 ;;      Locals:         1       0       0
  2879 ;;      Temps:          0       0       0
  2880 ;;      Totals:         1       0       0
  2881 ;;Total ram usage:        1 bytes
  2882 ;; Hardware stack levels used:    1
  2883 ;; This function calls:
  2884 ;;		Nothing
  2885 ;; This function is called by:
  2886 ;;		i1_Init_Config
  2887 ;; This function uses a non-reentrant model
  2888 ;;
  2889                           
  2890                           
  2891                           ;psect for function i1_resetKey
  2892  02FF                     i1_resetKey:	
  2893                           
  2894                           ;incstack = 0
  2895                           ; Regs used in i1_resetKey: [wreg-fsr0h+status,2+status,0]
  2896                           ;i1resetKey@key stored from wreg
  2897  02FF  00F0               	movwf	i1resetKey@key
  2898                           
  2899                           ;scankey.c: 101: key->key_timer_cnt1 = key->key_timer_cnt2 = key->key_state_buffer1 = ke
      +                          y->key_state_buffer2 = 0;
  2900  0300  3E03               	addlw	3
  2901  0301  0084               	movwf	4
  2902  0302  1383               	bcf	3,7	;select IRP bank0
  2903  0303  0180               	clrf	0
  2904  0304  0A70               	incf	i1resetKey@key,w
  2905  0305  0084               	movwf	4
  2906  0306  0180               	clrf	0
  2907  0307  0870               	movf	i1resetKey@key,w
  2908  0308  3E02               	addlw	2
  2909  0309  0084               	movwf	4
  2910  030A  0180               	clrf	0
  2911  030B  0870               	movf	i1resetKey@key,w
  2912  030C  0084               	movwf	4
  2913  030D  0180               	clrf	0
  2914  030E  0008               	return
  2915  030F                     __end_ofi1_resetKey:	
  2916                           
  2917                           	psect	text24
  2918  0333                     __ptext24:	
  2919 ;; *************** function i1_Init_System *****************
  2920 ;; Defined at:
  2921 ;;		line 3 in file "C:\SCMCU WorkSpace\uf166fan\init.c"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;		None
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;		None
  2926 ;; Return value:  Size  Location     Type
  2927 ;;                  1    wreg      void 
  2928 ;; Registers used:
  2929 ;;		wreg, status,2
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 300/100
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMMON   BANK0   BANK1
  2935 ;;      Params:         0       0       0
  2936 ;;      Locals:         0       0       0
  2937 ;;      Temps:          0       0       0
  2938 ;;      Totals:         0       0       0
  2939 ;;Total ram usage:        0 bytes
  2940 ;; Hardware stack levels used:    1
  2941 ;; This function calls:
  2942 ;;		Nothing
  2943 ;; This function is called by:
  2944 ;;		i1_Init_Config
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           
  2949                           ;psect for function i1_Init_System
  2950  0333                     i1_Init_System:	
  2951                           
  2952                           ;incstack = 0
  2953                           ; Regs used in i1_Init_System: [wreg+status,2]
  2954  0333  0000               	nop	;# 
  2955  0334  0064               	clrwdt	;# 
  2956                           
  2957                           ;init.c: 6: INTCON = 0;
  2958                           
  2959                           ;init.c: 7: OSCCON = 0X71;
  2960                           
  2961                           ;init.c: 8: OPTION_REG = 0x00;
  2962  0335  2B36               	ljmp	PL10	;call to abstracted procedure
  2963  0336                     __end_ofi1_Init_System:	
  2964  0336                     PL10:	
  2965  0336  018B               	clrf	11	;volatile
  2966  0337  3071               	movlw	113
  2967  0338  1683               	bsf	3,5	;RP0=1, select bank1
  2968  0339  1303               	bcf	3,6	;RP1=0, select bank1
  2969  033A  008F               	movwf	15	;volatile
  2970  033B  0181               	clrf	1	;volatile
  2971  033C  0008               	return
  2972  033D                     __end_ofPL10:	
  2973                           
  2974                           	psect	text25
  2975  035E                     __ptext25:	
  2976 ;; *************** function i1_Init_PWM *****************
  2977 ;; Defined at:
  2978 ;;		line 52 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;		None
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;		None
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      void 
  2985 ;; Registers used:
  2986 ;;		wreg, status,2
  2987 ;; Tracked objects:
  2988 ;;		On entry : 300/0
  2989 ;;		On exit  : 300/100
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMMON   BANK0   BANK1
  2992 ;;      Params:         0       0       0
  2993 ;;      Locals:         0       0       0
  2994 ;;      Temps:          0       0       0
  2995 ;;      Totals:         0       0       0
  2996 ;;Total ram usage:        0 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; This function calls:
  2999 ;;		Nothing
  3000 ;; This function is called by:
  3001 ;;		i1_Init_Config
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           
  3006                           ;psect for function i1_Init_PWM
  3007  035E                     i1_Init_PWM:	
  3008                           
  3009                           ;main.c: 53: CCP1CON = 0x0F;
  3010                           
  3011                           ;incstack = 0
  3012                           ; Regs used in i1_Init_PWM: [wreg+status,2]
  3013  035E  300F               	movlw	15
  3014                           
  3015                           ;main.c: 54: T2CON = 0;
  3016                           
  3017                           ;main.c: 55: PR2 = 7;
  3018                           
  3019                           ;main.c: 57: CCPR1L = 0;
  3020                           
  3021                           ;main.c: 58: TMR2IF = 0;
  3022                           
  3023                           ;main.c: 59: T2CON = 0;
  3024                           
  3025                           ;main.c: 61: TRISC&=~(1<<2);
  3026  035F  2AF3               	ljmp	PL8	;call to abstracted procedure
  3027  0360                     __end_ofi1_Init_PWM:	
  3028                           
  3029                           	psect	text26
  3030  0360                     __ptext26:	
  3031 ;; *************** function i1_Init_Interupt *****************
  3032 ;; Defined at:
  3033 ;;		line 27 in file "C:\SCMCU WorkSpace\uf166fan\init.c"
  3034 ;; Parameters:    Size  Location     Type
  3035 ;;		None
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;		None
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  1    wreg      void 
  3040 ;; Registers used:
  3041 ;;		wreg, status,2
  3042 ;; Tracked objects:
  3043 ;;		On entry : 300/100
  3044 ;;		On exit  : 300/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMMON   BANK0   BANK1
  3047 ;;      Params:         0       0       0
  3048 ;;      Locals:         0       0       0
  3049 ;;      Temps:          0       0       0
  3050 ;;      Totals:         0       0       0
  3051 ;;Total ram usage:        0 bytes
  3052 ;; Hardware stack levels used:    1
  3053 ;; This function calls:
  3054 ;;		Nothing
  3055 ;; This function is called by:
  3056 ;;		i1_Init_Config
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           
  3061                           ;psect for function i1_Init_Interupt
  3062  0360                     i1_Init_Interupt:	
  3063                           
  3064                           ;init.c: 28: OPTION_REG = 0x00;
  3065                           
  3066                           ;incstack = 0
  3067                           ; Regs used in i1_Init_Interupt: [wreg+status,2]
  3068                           
  3069                           ;init.c: 29: TMR0 = 0;
  3070                           
  3071                           ;init.c: 30: INTCON = 0xE0;
  3072  0360  2B46               	ljmp	PL14	;call to abstracted procedure
  3073  0361                     __end_ofi1_Init_Interupt:	
  3074                           
  3075                           	psect	text27
  3076  0361                     __ptext27:	
  3077 ;; *************** function i1_Init_GPIO *****************
  3078 ;; Defined at:
  3079 ;;		line 13 in file "C:\SCMCU WorkSpace\uf166fan\init.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;		None
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;		None
  3084 ;; Return value:  Size  Location     Type
  3085 ;;                  1    wreg      void 
  3086 ;; Registers used:
  3087 ;;		wreg, status,2
  3088 ;; Tracked objects:
  3089 ;;		On entry : 300/100
  3090 ;;		On exit  : 300/100
  3091 ;;		Unchanged: 0/0
  3092 ;; Data sizes:     COMMON   BANK0   BANK1
  3093 ;;      Params:         0       0       0
  3094 ;;      Locals:         0       0       0
  3095 ;;      Temps:          0       0       0
  3096 ;;      Totals:         0       0       0
  3097 ;;Total ram usage:        0 bytes
  3098 ;; Hardware stack levels used:    1
  3099 ;; This function calls:
  3100 ;;		Nothing
  3101 ;; This function is called by:
  3102 ;;		i1_Init_Config
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           
  3107                           ;psect for function i1_Init_GPIO
  3108  0361                     i1_Init_GPIO:	
  3109                           
  3110                           ;init.c: 14: TRISA = 0;
  3111                           
  3112                           ;incstack = 0
  3113                           ; Regs used in i1_Init_GPIO: [wreg+status,2]
  3114                           
  3115                           ;init.c: 15: TRISB = 0;
  3116                           
  3117                           ;init.c: 16: TRISC = 0;
  3118                           
  3119                           ;init.c: 17: WPUA = 0xFF;
  3120                           
  3121                           ;init.c: 18: WPUB = 0xFF;
  3122                           
  3123                           ;init.c: 19: WPUC = 0xFF;
  3124                           
  3125                           ;init.c: 20: PORTA = 0xFF;
  3126                           
  3127                           ;init.c: 21: PORTB = 0xFF;
  3128                           
  3129                           ;init.c: 22: PORTC = 0xFF;
  3130                           
  3131                           ;init.c: 23: IOCB = 0x00;
  3132  0361  2ABB               	ljmp	PL2	;call to abstracted procedure
  3133  0362                     __end_ofi1_Init_GPIO:	
  3134  007E                     btemp	set	126	;btemp
  3135  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     11      49
    BANK1            80      0       0

Pointer List with Targets:

    resetKey@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 

    key_driver@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 

    sacnKeyInput@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 


Critical Paths under _main in COMMON

    _scanKeys->_sacnKeyInput
    _readVrefADC->_ADC_Result
    _readVrefADC->_DelayXms
    _checkKeys->_key_driver
    _checkKeys->_setFanLevel
    _checkFan->_setFanLevel
    _setFanLevel->_setLedOn
    _closeFan->_setLedOn
    _Init_Config->_resetKey

Critical Paths under _Timer0_Isr in COMMON

    i1_Init_Config->i1_resetKey

Critical Paths under _main in BANK0

    _main->_checkKeys
    _readVrefADC->_ADC_Sample
    _checkKeys->_checkFan
    _setFanLevel->___awdiv

Critical Paths under _Timer0_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer0_Isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3009
                        _Init_Config
                          _checkKeys
                     _checkUsbStatus
                        _readVrefADC
                           _scanKeys
 ---------------------------------------------------------------------------------
 (1) _scanKeys                                             0     0      0     169
                       _sacnKeyInput
 ---------------------------------------------------------------------------------
 (2) _sacnKeyInput                                         3     3      0     169
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _readVrefADC                                          1     1      0     533
                                              8 BANK0      1     1      0
                         _ADC_Result
                         _ADC_Sample
                           _DelayXms
 ---------------------------------------------------------------------------------
 (2) _DelayXms                                             3     3      0     167
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                           8     8      0     291
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Result                                           3     3      0      65
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _checkUsbStatus                                       1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _checkKeys                                            2     2      0    2138
                                              9 BANK0      2     2      0
                           _checkFan
                           _closeFan
                         _key_driver
                        _setFanLevel
 ---------------------------------------------------------------------------------
 (2) _key_driver                                           3     3      0     442
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _checkFan                                             1     1      0     814
                                              8 BANK0      1     1      0
                           _closeFan
                        _setFanLevel
 ---------------------------------------------------------------------------------
 (2) _setFanLevel                                          4     4      0     792
                                              5 COMMON     2     2      0
                            ___awdiv
                           _setLedOn
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     606
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _closeFan                                             0     0      0      22
                           _Init_PWM
                           _setLedOn
 ---------------------------------------------------------------------------------
 (3) _setLedOn                                             1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_Config                                          0     0      0     169
                          _Init_GPIO
                      _Init_Interupt
                           _Init_PWM
                        _Init_System
                           _resetKey
 ---------------------------------------------------------------------------------
 (2) _resetKey                                             1     1      0     169
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_Interupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Timer0_Isr                                           3     3      0      88
                                              1 COMMON     3     3      0
                      i1_Init_Config
 ---------------------------------------------------------------------------------
 (6) i1_Init_Config                                        0     0      0      88
                        i1_Init_GPIO
                    i1_Init_Interupt
                         i1_Init_PWM
                      i1_Init_System
                         i1_resetKey
 ---------------------------------------------------------------------------------
 (7) i1_resetKey                                           1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) i1_Init_System                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_Init_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_Init_Interupt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_Init_GPIO                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_Config
     _Init_GPIO
     _Init_Interupt
     _Init_PWM
     _Init_System
     _resetKey
   _checkKeys
     _checkFan
       _closeFan
         _Init_PWM
         _setLedOn
       _setFanLevel
         ___awdiv
         _setLedOn
     _closeFan
       _Init_PWM
       _setLedOn
     _key_driver
     _setFanLevel
       ___awdiv
       _setLedOn
   _checkUsbStatus
   _readVrefADC
     _ADC_Result
     _ADC_Sample
     _DelayXms
   _scanKeys
     _sacnKeyInput

 _Timer0_Isr (ROOT)
   i1_Init_Config
     i1_Init_GPIO
     i1_Init_Interupt
     i1_Init_PWM
     i1_Init_System
     i1_resetKey

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      B      31       5       61.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3B       8        0.0%
ABS                  0      0      3B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 04 21:37:20 2020

         ??i1_Init_System 0070                         pc 0002                        PL2 02BB  
                      PL4 00AF                        PL6 023A                        PL8 02F3  
                      _TO 001C              ___awdiv@sign 004B                        fsr 0004  
                     PL10 0336                       PL20 00BE                       PL12 0247  
                     PL14 0346                       PL16 01B4                       PL18 01BB  
                     l612 018A                       l614 018E                       l615 0192  
                     l616 0197                       l617 019C                       l628 01FD  
                     l577 02A2                       _PR2 0092                       u664 025B  
                     u665 0259       __size_of_ADC_Sample 0096       __size_of_ADC_Result 001D  
                     fsr0 0004                       indf 0000                      S3510 0357  
                    S3512 0352                      l3030 0298                      l3300 01C1  
                    l3230 00CD                      l3310 01DB                      l3236 00D6  
                    l3308 01D9                      l3404 01F5                      l3412 01F8  
                    l3340 004D                      l3332 0034                      l3262 0103  
                    l3246 00E4                      l3270 0150                      l3422 0206  
                    l3344 0057                      l2714 01A5                      l3258 00FB  
                    l3290 0173                      l3282 016A                      l3346 005F  
                    l3292 0175                      l3380 031F                      l3436 0210  
                    l3286 016F                      l3278 0165                      l3374 0286  
                    l3390 0324                      l3446 0219                      l1783 002F  
                    l3288 0171                      l3296 0178                      l2840 0110  
                    l3456 0225                      l3298 0186                      l2852 0122  
                    l2844 0118                      l1796 0281                      l1789 0063  
                    l2870 013B                      l2864 0135                      l2872 0148  
                    l2866 0137                      l2858 0127                      l2798 030F  
                    _T0IF 005A                      u1125 01CF                      u1205 0053  
                    u1055 00ED                      u1215 005D                      _IOCB 0096  
                    u1265 0099                      _RBIF 0058                      _TMR0 0001  
  __end_of_checkUsbStatus 02A4                      _WPUA 018E                      _WPUB 0095  
                    _WPUC 018F                      _key1 003F                      _key2 0038  
                    _key3 0031                      _main 020F                      btemp 007E  
              i1_resetKey 02FF                      start 000C             ??_Init_Config 0075  
           ??_Init_System 0074             _Init_Interupt 0345                     ?_main 0070  
         __end_of___awdiv 0108           ___awdiv@divisor 0046                     _T2CON 0012  
            ?_readVrefADC 0070        key_driver@key_read 0075                     i1l655 02B1  
         ___awdiv@counter 004A                     _PORTA 0005                     _PORTB 0006  
                   _PORTC 0007                     _TRISA 0085                     _TRISB 0086  
                   _TRISC 0087               ?i1_Init_PWM 0070                     pclath 000A  
         ?_checkUsbStatus 0070                     status 0003                     wtemp0 007E  
        __end_of_DelayXms 0328              ?_setFanLevel 0070           __initialization 000D  
            __end_of_main 022F          __end_of_Init_PWM 02F3            ?_Init_Interupt 0070  
     __end_of_Init_Config 023A            _fan_check_time 0028                    ??_main 0077  
     __end_of_Init_System 035E                    _ADCON0 001F                    _ADCON1 009F  
                  _ADRESH 001E                    _ADRESL 009E                    _CCPR1L 0015  
        ___awdiv@dividend 0048                    _GODONE 00F9                    i1l3166 02AD  
                  _INTCON 000B             ?_sacnKeyInput 0070        __size_of_Init_GPIO 0001  
                  _OSCCON 008F                    _TMR2IF 0061              ??_ADC_Sample 0046  
        __end_of_checkFan 01ED              ??_ADC_Result 0074               ?i1_resetKey 0070  
              _Timer0_Isr 02A4          __end_of_closeFan 031D          setLedOn@ledIndex 0074  
               ??___awdiv 0074       __size_ofi1_Init_PWM 0002              ?i1_Init_GPIO 0070  
        __end_of_scanKeys 02DF          ___awdiv@quotient 004C          __end_of_setLedOn 01B4  
        __end_of_resetKey 02EF              __pdataCOMMON 0077        __end_of_ADC_Sample 00AF  
      __end_of_ADC_Result 0288           i1_Init_Interupt 0360                    saved_w 007E  
          ??_sacnKeyInput 0074   __end_of__initialization 0017               _Init_Config 022F  
          __pcstackCOMMON 0070           ??_Init_Interupt 0074        __size_of_checkKeys 0022  
             _Init_System 035B                __end_ofPL2 02CD                __end_ofPL4 00BE  
              __end_ofPL6 0247                __end_ofPL8 02FF         __end_of_Init_GPIO 02BB  
     __size_ofi1_resetKey 0010                 ?_DelayXms 0070      __size_of_readVrefADC 0006  
              __pbssBANK0 0020                 ?_Init_PWM 0070               ?_Timer0_Isr 0070  
   __end_ofi1_Init_Config 0333                __pmaintext 020F      __size_of_setFanLevel 003E  
              __pintentry 0004                   _CCP1CON 0017     __end_ofi1_Init_System 0336  
 __end_ofi1_Init_Interupt 0361                 ?_checkFan 0070      key_driver@key_return 0074  
              ??_DelayXms 0074          ??_checkUsbStatus 0074                 ?_closeFan 0070  
            ??i1_Init_PWM 0070         __end_of_checkKeys 020F                ??_Init_PWM 0074  
               ?_scanKeys 0070                 ?_setLedOn 0070                 ?_resetKey 0070  
             resetKey@key 0074           ADC_Sample@admax 0024           ADC_Sample@admin 0026  
         ADC_Sample@adsum 0020                   ___awdiv 00C3                _key_driver 0108  
    __end_of_sacnKeyInput 026B        __end_ofi1_Init_PWM 0360                   __ptext1 02CD  
                 __ptext2 024E                   __ptext3 034C                   __ptext4 031D  
                 __ptext5 0019                   __ptext6 026B                   __ptext7 0288  
                 __ptext8 01ED                   __ptext9 0108      __size_ofi1_Init_GPIO 0001  
              ??_checkFan 004E       __size_of_Timer0_Isr 0016                ??_closeFan 0075  
                 clrloop0 033E      end_of_initialization 0017                 DelayXms@i 0075  
               DelayXms@j 0076                 DelayXms@x 0074                ??_scanKeys 0077  
            ??i1_resetKey 0070                ??_setLedOn 0074                ??_resetKey 0074  
         sacnKeyInput@key 0076          ?i1_Init_Interupt 0070        __end_ofi1_resetKey 030F  
            ?_Init_Config 0070               ?_key_driver 0070              ?_Init_System 0070  
        setFanLevel@level 0075             __pidataCOMMON 0000               __end_ofPL10 033D  
             __end_ofPL20 00C3               __end_ofPL12 024E               __end_ofPL14 034C  
             __end_ofPL16 01BB               __end_ofPL18 01C1       start_initialization 000D  
               _Init_GPIO 02BA         __size_of_DelayXms 000B         __size_of_Init_PWM 0004  
            ??_Timer0_Isr 0071     __size_of_sacnKeyInput 001D         ADC_Sample@ad_temp 004C  
   __end_of_Init_Interupt 0346         ADC_Sample@adtimes 0030             ??_readVrefADC 0077  
             __pbssCOMMON 0079                ?_Init_GPIO 0070                 ___latbits 0000  
           __pcstackBANK0 0046         __size_of_checkFan 002C        __end_of_Timer0_Isr 02BA  
     __size_of_key_driver 0042         __size_of_closeFan 000E              _sacnKeyInput 024E  
            _currentLevel 0078                 _checkKeys 01ED       checkKeys@key2Status 004F  
           ??_setFanLevel 0075       checkKeys@key3Status 0050         __size_of_scanKeys 0012  
       __size_of_setLedOn 002C                  ?___awdiv 0046         __size_of_resetKey 0010  
               __pswtext1 0357                 __pswtext2 0352                 _count10Ms 002A  
               _countTime 002C            ADC_Sample@adch 004A    __size_ofi1_Init_Config 000B  
     __end_of_readVrefADC 0352               ADC_Sample@i 004B    __size_ofi1_Init_System 0003  
       interrupt_function 0004               ADC_Result@i 0076                ?_checkKeys 0070  
               _time0Flag 0079                 clear_ram0 033D      __size_of_Init_Config 000B  
    setFanLevel@tempLevel 0076             ??i1_Init_GPIO 0070       __end_of_setFanLevel 0188  
    __size_of_Init_System 0003            ADC_Result@adch 0075               ??_Init_GPIO 0074  
                _DelayXms 031D                  _Init_PWM 02EF                _ADC_Sample 0019  
              _ADC_Result 026B   __size_of_checkUsbStatus 001C             i1_Init_Config 0328  
            ??_key_driver 0074          __size_of___awdiv 0045             key_driver@key 0076  
           i1_Init_System 0333               _readVrefADC 034C                  _checkFan 01C1  
              _FAN_STATUS 0077       __end_ofi1_Init_GPIO 0362                  _adresult 002E  
__size_ofi1_Init_Interupt 0001                  __ptext10 01C1                  __ptext11 014A  
                __ptext20 02BA                  __ptext12 00C3                  __ptext21 02A4  
                __ptext13 030F                  __ptext22 0328                  __ptext14 0188  
                __ptext23 02FF                  __ptext15 022F                  __ptext24 0333  
                __ptext16 02DF                  __ptext25 035E                  __ptext17 035B  
                __ptext26 0360                  __ptext18 02EF                  __ptext27 0361  
                __ptext19 0345                  _closeFan 030F        __end_of_key_driver 014A  
           __size_of_main 0020               ??_checkKeys 0077                  _scanKeys 02CD  
                _setLedOn 0188                  _resetKey 02DF               _setFanLevel 014A  
          ?i1_Init_Config 0070            ?i1_Init_System 0070                  intlevel1 0000  
             ?_ADC_Sample 0070               ?_ADC_Result 0070             i1resetKey@key 0070  
             i1_Init_GPIO 0361                _OPTION_REG 0081                i1_Init_PWM 035E  
  __size_of_Init_Interupt 0001         ??i1_Init_Interupt 0070            _checkUsbStatus 0288  
         ??i1_Init_Config 0071  
