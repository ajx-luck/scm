

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 15 18:53:18 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1711C
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	swtext1,local,class=CONST,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	swtext2,local,class=CONST,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	pa_nodes0,global,class=CODE,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 1.45
    48                           ; Generated 16/11/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F887 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	idataCOMMON
    83  0000                     __pidataCOMMON:	
    84  001F                     _ADCON0	set	31
    85  001E                     _ADRESH	set	30
    86  0017                     _CCP1CON	set	23
    87  0015                     _CCPR1L	set	21
    88  0012                     _T2CON	set	18
    89  000B                     _INTCON	set	11
    90  0007                     _PORTC	set	7
    91  0006                     _PORTB	set	6
    92  0005                     _PORTA	set	5
    93  0001                     _TMR0	set	1
    94  00F9                     _GODONE	set	249
    95  0061                     _TMR2IF	set	97
    96  005F                     _GIE	set	95
    97  005B                     _RBIE	set	91
    98  005A                     _T0IF	set	90
    99  0058                     _RBIF	set	88
   100  001C                     _TO	set	28
   101  009F                     _ADCON1	set	159
   102  009E                     _ADRESL	set	158
   103  0096                     _IOCB	set	150
   104  0095                     _WPUB	set	149
   105  0092                     _PR2	set	146
   106  008F                     _OSCCON	set	143
   107  0087                     _TRISC	set	135
   108  0086                     _TRISB	set	134
   109  0085                     _TRISA	set	133
   110  0081                     _OPTION_REG	set	129
   111  018F                     _WPUC	set	399
   112  018E                     _WPUA	set	398
   113                           
   114                           	psect	cinit
   115  000D                     start_initialization:	
   116                           ; #config settings
   117                           
   118  000D                     __initialization:	
   119                           
   120                           ;initializer for _FAN_STATUS
   121  000D  3002               	movlw	2
   122  000E  00F8               	movwf	__pdataCOMMON& (0+127)
   123                           
   124                           ;initializer for _currentLevel
   125  000F  3003               	movlw	3
   126  0010  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   127  0011  3020               	movlw	low __pbssBANK0
   128                           
   129                           ; Clear objects allocated to BANK0
   130  0012  1383               	bcf	3,7	;select IRP bank0
   131  0013  0084               	movwf	4
   132  0014  3047               	movlw	low (__pbssBANK0+39)
   133  0015  23E3               	fcall	clear_ram0
   134                           
   135                           ; Clear objects allocated to COMMON
   136  0016  01F6               	clrf	__pbssCOMMON& (0+127)
   137  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   138  0018                     end_of_initialization:	
   139                           ;End of C runtime variable initialization code
   140                           
   141  0018                     __end_of__initialization:	
   142  0018  0183               	clrf	3
   143  0019  2A34               	ljmp	_main	;jump to C main() function
   144                           
   145                           	psect	bssCOMMON
   146  0076                     __pbssCOMMON:	
   147  0076                     _count300ms:	
   148  0076                     	ds	1
   149  0077                     _time0Flag:	
   150  0077                     	ds	1
   151                           
   152                           	psect	dataCOMMON
   153  0078                     __pdataCOMMON:	
   154  0078                     _FAN_STATUS:	
   155  0078                     	ds	1
   156  0079                     _currentLevel:	
   157  0079                     	ds	1
   158                           
   159                           	psect	bssBANK0
   160  0020                     __pbssBANK0:	
   161  0020                     ADC_Sample@adsum:	
   162  0020                     	ds	4
   163  0024                     ADC_Sample@admax:	
   164  0024                     	ds	2
   165  0026                     ADC_Sample@admin:	
   166  0026                     	ds	2
   167  0028                     _fan_check_time:	
   168  0028                     	ds	2
   169  002A                     _count10Ms:	
   170  002A                     	ds	2
   171  002C                     _countTime:	
   172  002C                     	ds	2
   173  002E                     _adresult:	
   174  002E                     	ds	2
   175  0030                     ADC_Sample@adtimes:	
   176  0030                     	ds	1
   177  0031                     _lowVTime:	
   178  0031                     	ds	1
   179  0032                     _key3:	
   180  0032                     	ds	7
   181  0039                     _key2:	
   182  0039                     	ds	7
   183  0040                     _key1:	
   184  0040                     	ds	7
   185                           
   186                           	psect	clrtext
   187  03E3                     clear_ram0:	
   188                           ;	Called with FSR containing the base address, and
   189                           ;	W with the last address+1
   190                           
   191  03E3  0064               	clrwdt	;clear the watchdog before getting into this loop
   192  03E4                     clrloop0:	
   193  03E4  0180               	clrf	0	;clear RAM location pointed to by FSR
   194  03E5  0A84               	incf	4,f	;increment pointer
   195  03E6  0604               	xorwf	4,w	;XOR with final address
   196  03E7  1903               	btfsc	3,2	;have we reached the end yet?
   197  03E8  3400               	retlw	0	;all done for this memory range, return
   198  03E9  0604               	xorwf	4,w	;XOR again to restore value
   199  03EA  2BE4               	goto	clrloop0	;do the next byte
   200                           
   201                           	psect	cstackCOMMON
   202  0070                     __pcstackCOMMON:	
   203  0070                     ?_closeFan:	
   204  0070                     ?_setLedOn:	
   205                           ; 1 bytes @ 0x0
   206                           
   207  0070                     ?_Sleep_Mode:	
   208                           ; 1 bytes @ 0x0
   209                           
   210  0070                     ?_sacnKeyInput:	
   211                           ; 1 bytes @ 0x0
   212                           
   213  0070                     ?_key_driver:	
   214                           ; 1 bytes @ 0x0
   215                           
   216  0070                     ?_Init_Config:	
   217                           ; 1 bytes @ 0x0
   218                           
   219  0070                     ?_readVrefADC:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ?_Init_System:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     ?_Init_GPIO:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ?_Init_Interupt:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_resetKey:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ?_checkUsbStatus:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ?_Init_PWM:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ?_setFanLevel:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_checkFan:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     ?_scanKeys:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     ?_checkKeys:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_main:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_Timer0_Isr:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_ADC_Sample:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_ADC_Result:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?_DelayXms:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?i1_Init_PWM:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ??i1_Init_PWM:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?i1_Init_Config:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?i1_resetKey:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ??i1_resetKey:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?i1_Init_System:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ??i1_Init_System:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?i1_Init_GPIO:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ??i1_Init_GPIO:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?i1_Init_Interupt:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ??i1_Init_Interupt:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     i1resetKey@key:	
   301                           ; 1 bytes @ 0x0
   302                           
   303                           
   304                           ; 1 bytes @ 0x0
   305  0070                     	ds	1
   306  0071                     ??_Timer0_Isr:	
   307  0071                     ??i1_Init_Config:	
   308                           ; 1 bytes @ 0x1
   309                           
   310                           
   311                           ; 1 bytes @ 0x1
   312  0071                     	ds	3
   313  0074                     ??_setLedOn:	
   314  0074                     ??_sacnKeyInput:	
   315                           ; 1 bytes @ 0x4
   316                           
   317  0074                     ??_key_driver:	
   318                           ; 1 bytes @ 0x4
   319                           
   320  0074                     ??_Init_System:	
   321                           ; 1 bytes @ 0x4
   322                           
   323  0074                     ??_Init_GPIO:	
   324                           ; 1 bytes @ 0x4
   325                           
   326  0074                     ??_Init_Interupt:	
   327                           ; 1 bytes @ 0x4
   328                           
   329  0074                     ??_resetKey:	
   330                           ; 1 bytes @ 0x4
   331                           
   332  0074                     ??_Init_PWM:	
   333                           ; 1 bytes @ 0x4
   334                           
   335  0074                     ??_ADC_Result:	
   336                           ; 1 bytes @ 0x4
   337                           
   338  0074                     ??_DelayXms:	
   339                           ; 1 bytes @ 0x4
   340                           
   341  0074                     ??___awdiv:	
   342                           ; 1 bytes @ 0x4
   343                           
   344  0074                     setLedOn@ledIndex:	
   345                           ; 1 bytes @ 0x4
   346                           
   347  0074                     resetKey@key:	
   348                           ; 1 bytes @ 0x4
   349                           
   350                           
   351                           ; 1 bytes @ 0x4
   352  0074                     	ds	1
   353  0075                     ??_closeFan:	
   354  0075                     ??_Sleep_Mode:	
   355                           ; 1 bytes @ 0x5
   356                           
   357  0075                     ??_Init_Config:	
   358                           ; 1 bytes @ 0x5
   359                           
   360  0075                     ??_readVrefADC:	
   361                           ; 1 bytes @ 0x5
   362                           
   363  0075                     ??_setFanLevel:	
   364                           ; 1 bytes @ 0x5
   365                           
   366                           
   367                           ; 1 bytes @ 0x5
   368  0075                     	ds	1
   369  0076                     ??_scanKeys:	
   370  0076                     ??_checkKeys:	
   371                           ; 1 bytes @ 0x6
   372                           
   373  0076                     ??_main:	
   374                           ; 1 bytes @ 0x6
   375                           
   376                           
   377                           	psect	cstackBANK0
   378  0047                     __pcstackBANK0:	
   379                           ; 1 bytes @ 0x6
   380                           
   381  0047                     ??_checkUsbStatus:	
   382  0047                     ??_ADC_Sample:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0047                     ?___awdiv:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0047                     sacnKeyInput@key:	
   389                           ; 2 bytes @ 0x0
   390                           
   391  0047                     key_driver@key_return:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0047                     ADC_Result@adch:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0047                     DelayXms@x:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0047                     ___awdiv@divisor:	
   401                           ; 1 bytes @ 0x0
   402                           
   403                           
   404                           ; 2 bytes @ 0x0
   405  0047                     	ds	1
   406  0048                     key_driver@key_read:	
   407  0048                     ADC_Result@i:	
   408                           ; 1 bytes @ 0x1
   409                           
   410  0048                     DelayXms@i:	
   411                           ; 1 bytes @ 0x1
   412                           
   413                           
   414                           ; 1 bytes @ 0x1
   415  0048                     	ds	1
   416  0049                     key_driver@key:	
   417  0049                     DelayXms@j:	
   418                           ; 1 bytes @ 0x2
   419                           
   420  0049                     ___awdiv@dividend:	
   421                           ; 1 bytes @ 0x2
   422                           
   423                           
   424                           ; 2 bytes @ 0x2
   425  0049                     	ds	2
   426  004B                     ADC_Sample@adch:	
   427  004B                     ___awdiv@counter:	
   428                           ; 1 bytes @ 0x4
   429                           
   430                           
   431                           ; 1 bytes @ 0x4
   432  004B                     	ds	1
   433  004C                     ADC_Sample@i:	
   434  004C                     ___awdiv@sign:	
   435                           ; 1 bytes @ 0x5
   436                           
   437                           
   438                           ; 1 bytes @ 0x5
   439  004C                     	ds	1
   440  004D                     ADC_Sample@ad_temp:	
   441  004D                     ___awdiv@quotient:	
   442                           ; 2 bytes @ 0x6
   443                           
   444                           
   445                           ; 2 bytes @ 0x6
   446  004D                     	ds	2
   447  004F                     setFanLevel@level:	
   448                           
   449                           ; 1 bytes @ 0x8
   450  004F                     	ds	1
   451  0050                     setFanLevel@tempLevel:	
   452                           
   453                           ; 1 bytes @ 0x9
   454  0050                     	ds	1
   455  0051                     ??_checkFan:	
   456                           
   457                           ; 1 bytes @ 0xA
   458  0051                     	ds	1
   459  0052                     checkKeys@key2Status:	
   460                           
   461                           ; 1 bytes @ 0xB
   462  0052                     	ds	1
   463  0053                     checkKeys@key3Status:	
   464                           
   465                           ; 1 bytes @ 0xC
   466  0053                     	ds	1
   467                           
   468                           	psect	maintext
   469  0234                     __pmaintext:	
   470 ;;
   471 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   472 ;;
   473 ;; *************** function _main *****************
   474 ;; Defined at:
   475 ;;		line 276 in file "E:\project\project0508\scm\uf166fan\main.c"
   476 ;; Parameters:    Size  Location     Type
   477 ;;		None
   478 ;; Auto vars:     Size  Location     Type
   479 ;;		None
   480 ;; Return value:  Size  Location     Type
   481 ;;                  1    wreg      void 
   482 ;; Registers used:
   483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   484 ;; Tracked objects:
   485 ;;		On entry : B00/0
   486 ;;		On exit  : 300/0
   487 ;;		Unchanged: 0/0
   488 ;; Data sizes:     COMMON   BANK0   BANK1
   489 ;;      Params:         0       0       0
   490 ;;      Locals:         0       0       0
   491 ;;      Temps:          0       0       0
   492 ;;      Totals:         0       0       0
   493 ;;Total ram usage:        0 bytes
   494 ;; Hardware stack levels required when called:    8
   495 ;; This function calls:
   496 ;;		_Init_Config
   497 ;;		_checkKeys
   498 ;;		_checkUsbStatus
   499 ;;		_closeFan
   500 ;;		_readVrefADC
   501 ;;		_scanKeys
   502 ;; This function is called by:
   503 ;;		Startup code after reset
   504 ;; This function uses a non-reentrant model
   505 ;;
   506                           
   507                           
   508                           ;psect for function _main
   509  0234                     _main:	
   510                           
   511                           ;main.c: 278: Init_Config();
   512                           
   513                           ;incstack = 0
   514                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   515  0234  22AA               	fcall	_Init_Config
   516                           
   517                           ;main.c: 279: closeFan();
   518  0235  2325               	fcall	_closeFan
   519  0236                     l3798:	
   520                           
   521                           ;main.c: 282: if (time0Flag) {
   522  0236  0877               	movf	_time0Flag,w
   523  0237  1903               	btfsc	3,2
   524  0238  2A3F               	goto	l3808
   525  0239  0064               	clrwdt	;# 
   526                           
   527                           ;main.c: 284: time0Flag = 0;
   528  023A  01F7               	clrf	_time0Flag
   529                           
   530                           ;main.c: 285: scanKeys();
   531  023B  23BA               	fcall	_scanKeys
   532                           
   533                           ;main.c: 286: count10Ms++;
   534  023C  0AAA               	incf	_count10Ms,f
   535  023D  1903               	skipnz
   536  023E  0AAB               	incf	_count10Ms+1,f
   537  023F                     l3808:	
   538                           
   539                           ;main.c: 287: }
   540                           ;main.c: 290: if (count10Ms == 100) {
   541  023F  3064               	movlw	100
   542  0240  1283               	bcf	3,5	;RP0=0, select bank0
   543  0241  1303               	bcf	3,6	;RP1=0, select bank0
   544  0242  062A               	xorwf	_count10Ms,w
   545  0243  042B               	iorwf	_count10Ms+1,w
   546  0244  1D03               	btfss	3,2
   547  0245  2A51               	goto	l3820
   548                           
   549                           ;main.c: 291: countTime++;
   550  0246  0AAC               	incf	_countTime,f
   551  0247  1903               	skipnz
   552  0248  0AAD               	incf	_countTime+1,f
   553                           
   554                           ;main.c: 292: count300ms++;
   555  0249  0AF6               	incf	_count300ms,f
   556                           
   557                           ;main.c: 293: checkKeys();
   558  024A  22CD               	fcall	_checkKeys
   559                           
   560                           ;main.c: 294: count10Ms = 0;
   561  024B  1283               	bcf	3,5	;RP0=0, select bank0
   562  024C  1303               	bcf	3,6	;RP1=0, select bank0
   563  024D  01AA               	clrf	_count10Ms
   564  024E  01AB               	clrf	_count10Ms+1
   565                           
   566                           ;main.c: 296: checkUsbStatus();
   567  024F  20C4               	fcall	_checkUsbStatus
   568                           
   569                           ;main.c: 298: readVrefADC();
   570  0250  23EB               	fcall	_readVrefADC
   571  0251                     l3820:	
   572                           
   573                           ;main.c: 299: }
   574                           ;main.c: 301: if(count300ms == 10)
   575  0251  300A               	movlw	10
   576  0252  0676               	xorwf	_count300ms,w
   577  0253  1903               	btfsc	3,2
   578                           
   579                           ;main.c: 302: {
   580                           ;main.c: 303: count300ms = 0;
   581  0254  01F6               	clrf	_count300ms
   582                           
   583                           ;main.c: 304: }
   584                           ;main.c: 306: if (countTime == 50) {
   585  0255  3032               	movlw	50
   586  0256  062C               	xorwf	_countTime,w
   587  0257  042D               	iorwf	_countTime+1,w
   588  0258  1D03               	btfss	3,2
   589  0259  2A36               	goto	l3798
   590                           
   591                           ;main.c: 307: countTime = 0;
   592  025A  01AC               	clrf	_countTime
   593  025B  01AD               	clrf	_countTime+1
   594  025C  2A36               	goto	l3798
   595  025D                     __end_of_main:	
   596                           
   597                           	psect	text1
   598  03BA                     __ptext1:	
   599 ;; *************** function _scanKeys *****************
   600 ;; Defined at:
   601 ;;		line 235 in file "E:\project\project0508\scm\uf166fan\main.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;		None
   604 ;; Auto vars:     Size  Location     Type
   605 ;;		None
   606 ;; Return value:  Size  Location     Type
   607 ;;                  1    wreg      void 
   608 ;; Registers used:
   609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   610 ;; Tracked objects:
   611 ;;		On entry : 0/0
   612 ;;		On exit  : B00/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMMON   BANK0   BANK1
   615 ;;      Params:         0       0       0
   616 ;;      Locals:         0       0       0
   617 ;;      Temps:          0       0       0
   618 ;;      Totals:         0       0       0
   619 ;;Total ram usage:        0 bytes
   620 ;; Hardware stack levels used:    1
   621 ;; Hardware stack levels required when called:    4
   622 ;; This function calls:
   623 ;;		_sacnKeyInput
   624 ;; This function is called by:
   625 ;;		_main
   626 ;; This function uses a non-reentrant model
   627 ;;
   628                           
   629                           
   630                           ;psect for function _scanKeys
   631  03BA                     _scanKeys:	
   632                           
   633                           ;main.c: 236: key1.key_addr_result = key2.key_addr_result = key3.key_addr_result = PORTB
      +                          ;
   634                           
   635                           ;incstack = 0
   636                           ; Regs used in _scanKeys: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   637  03BA  1283               	bcf	3,5	;RP0=0, select bank0
   638  03BB  1303               	bcf	3,6	;RP1=0, select bank0
   639  03BC  0806               	movf	6,w	;volatile
   640  03BD  00B7               	movwf	_key3+5
   641  03BE  00BE               	movwf	_key2+5
   642  03BF  00C5               	movwf	_key1+5
   643                           
   644                           ;main.c: 237: sacnKeyInput(&key1);
   645  03C0  3040               	movlw	(low (_key1| 0))& (0+255)
   646  03C1  22EB               	fcall	_sacnKeyInput
   647                           
   648                           ;main.c: 238: sacnKeyInput(&key2);
   649  03C2  3039               	movlw	(low (_key2| 0))& (0+255)
   650  03C3  22EB               	fcall	_sacnKeyInput
   651                           
   652                           ;main.c: 239: sacnKeyInput(&key3);
   653  03C4  3032               	movlw	(low (_key3| 0))& (0+255)
   654  03C5  2AEB               	ljmp	_sacnKeyInput
   655  03C6                     __end_of_scanKeys:	
   656                           
   657                           	psect	text2
   658  02EB                     __ptext2:	
   659 ;; *************** function _sacnKeyInput *****************
   660 ;; Defined at:
   661 ;;		line 3 in file "E:\project\project0508\scm\uf166fan\scankey.c"
   662 ;; Parameters:    Size  Location     Type
   663 ;;  key             1    wreg     PTR struct Keys
   664 ;;		 -> key3(7), key2(7), key1(7), 
   665 ;; Auto vars:     Size  Location     Type
   666 ;;  key             1    0[BANK0 ] PTR struct Keys
   667 ;;		 -> key3(7), key2(7), key1(7), 
   668 ;; Return value:  Size  Location     Type
   669 ;;                  1    wreg      void 
   670 ;; Registers used:
   671 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   672 ;; Tracked objects:
   673 ;;		On entry : 300/0
   674 ;;		On exit  : B00/0
   675 ;;		Unchanged: 0/0
   676 ;; Data sizes:     COMMON   BANK0   BANK1
   677 ;;      Params:         0       0       0
   678 ;;      Locals:         0       1       0
   679 ;;      Temps:          2       0       0
   680 ;;      Totals:         2       1       0
   681 ;;Total ram usage:        3 bytes
   682 ;; Hardware stack levels used:    1
   683 ;; Hardware stack levels required when called:    3
   684 ;; This function calls:
   685 ;;		Nothing
   686 ;; This function is called by:
   687 ;;		_scanKeys
   688 ;; This function uses a non-reentrant model
   689 ;;
   690                           
   691                           
   692                           ;psect for function _sacnKeyInput
   693  02EB                     _sacnKeyInput:	
   694                           
   695                           ;incstack = 0
   696                           ; Regs used in _sacnKeyInput: [wreg-fsr0h+status,2+status,0]
   697                           ;sacnKeyInput@key stored from wreg
   698  02EB  00C7               	movwf	sacnKeyInput@key
   699                           
   700                           ;scankey.c: 4: key->key_input = ((key->key_addr_result) >> (key->key_index)&1);
   701  02EC  3E05               	addlw	5
   702  02ED  0084               	movwf	4
   703  02EE  1383               	bcf	3,7	;select IRP bank0
   704  02EF  0800               	movf	0,w
   705  02F0  00F4               	movwf	??_sacnKeyInput
   706  02F1  0847               	movf	sacnKeyInput@key,w
   707  02F2  3E06               	addlw	6
   708  02F3  0084               	movwf	4
   709  02F4  0A00               	incf	0,w
   710  02F5  2AF8               	goto	u1334
   711  02F6                     u1335:	
   712  02F6  1003               	clrc
   713  02F7  0CF4               	rrf	??_sacnKeyInput,f
   714  02F8                     u1334:	
   715  02F8  3EFF               	addlw	-1
   716  02F9  1D03               	skipz
   717  02FA  2AF6               	goto	u1335
   718  02FB  0874               	movf	??_sacnKeyInput,w
   719  02FC  00F5               	movwf	??_sacnKeyInput+1
   720  02FD  0847               	movf	sacnKeyInput@key,w
   721  02FE  3E04               	addlw	4
   722  02FF  0084               	movwf	4
   723  0300  0875               	movf	??_sacnKeyInput+1,w
   724  0301  0080               	movwf	0
   725  0302  0847               	movf	sacnKeyInput@key,w
   726  0303  3E04               	addlw	4
   727  0304  0084               	movwf	4
   728  0305  3001               	movlw	1
   729  0306  0580               	andwf	0,f
   730  0307  0008               	return
   731  0308                     __end_of_sacnKeyInput:	
   732                           
   733                           	psect	text3
   734  03EB                     __ptext3:	
   735 ;; *************** function _readVrefADC *****************
   736 ;; Defined at:
   737 ;;		line 90 in file "E:\project\project0508\scm\uf166fan\adc.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;		None
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  result          1    0        unsigned char 
   742 ;; Return value:  Size  Location     Type
   743 ;;                  1    wreg      unsigned char 
   744 ;; Registers used:
   745 ;;		wreg, status,2, status,0, pclath, cstack
   746 ;; Tracked objects:
   747 ;;		On entry : 300/0
   748 ;;		On exit  : 300/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMMON   BANK0   BANK1
   751 ;;      Params:         0       0       0
   752 ;;      Locals:         1       0       0
   753 ;;      Temps:          0       0       0
   754 ;;      Totals:         1       0       0
   755 ;;Total ram usage:        1 bytes
   756 ;; Hardware stack levels used:    1
   757 ;; Hardware stack levels required when called:    4
   758 ;; This function calls:
   759 ;;		_ADC_Result
   760 ;;		_ADC_Sample
   761 ;;		_DelayXms
   762 ;; This function is called by:
   763 ;;		_main
   764 ;; This function uses a non-reentrant model
   765 ;;
   766                           
   767                           
   768                           ;psect for function _readVrefADC
   769  03EB                     _readVrefADC:	
   770                           
   771                           ;adc.c: 92: DelayXms(1);
   772                           
   773                           ;incstack = 0
   774                           ; Regs used in _readVrefADC: [wreg+status,2+status,0+pclath+cstack]
   775  03EB  3001               	movlw	1
   776  03EC  23C6               	fcall	_DelayXms
   777                           
   778                           ;adc.c: 93: ADC_Sample(15);
   779  03ED  300F               	movlw	15
   780  03EE  201A               	fcall	_ADC_Sample
   781  03EF  300F               	movlw	15
   782  03F0  2B08               	ljmp	_ADC_Result
   783  03F1                     __end_of_readVrefADC:	
   784                           
   785                           	psect	text4
   786  03C6                     __ptext4:	
   787 ;; *************** function _DelayXms *****************
   788 ;; Defined at:
   789 ;;		line 82 in file "E:\project\project0508\scm\uf166fan\adc.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;  x               1    wreg     unsigned char 
   792 ;; Auto vars:     Size  Location     Type
   793 ;;  x               1    0[BANK0 ] unsigned char 
   794 ;;  j               1    2[BANK0 ] unsigned char 
   795 ;;  i               1    1[BANK0 ] unsigned char 
   796 ;; Return value:  Size  Location     Type
   797 ;;                  1    wreg      void 
   798 ;; Registers used:
   799 ;;		wreg, status,2, status,0
   800 ;; Tracked objects:
   801 ;;		On entry : 300/0
   802 ;;		On exit  : 300/0
   803 ;;		Unchanged: 0/0
   804 ;; Data sizes:     COMMON   BANK0   BANK1
   805 ;;      Params:         0       0       0
   806 ;;      Locals:         0       3       0
   807 ;;      Temps:          0       0       0
   808 ;;      Totals:         0       3       0
   809 ;;Total ram usage:        3 bytes
   810 ;; Hardware stack levels used:    1
   811 ;; Hardware stack levels required when called:    3
   812 ;; This function calls:
   813 ;;		Nothing
   814 ;; This function is called by:
   815 ;;		_readVrefADC
   816 ;; This function uses a non-reentrant model
   817 ;;
   818                           
   819                           
   820                           ;psect for function _DelayXms
   821  03C6                     _DelayXms:	
   822                           
   823                           ;incstack = 0
   824                           ; Regs used in _DelayXms: [wreg+status,2+status,0]
   825                           ;DelayXms@x stored from wreg
   826  03C6  00C7               	movwf	DelayXms@x
   827                           
   828                           ;adc.c: 84: unsigned char i,j;
   829                           ;adc.c: 85: for(i=x;i>0;i--)
   830  03C7  00C8               	movwf	DelayXms@i
   831  03C8                     l3674:	
   832  03C8  0848               	movf	DelayXms@i,w
   833  03C9  1903               	btfsc	3,2
   834  03CA  0008               	return
   835                           
   836                           ;adc.c: 86: for(j=153;j>0;j--);
   837  03CB  3099               	movlw	153
   838  03CC  00C9               	movwf	DelayXms@j
   839  03CD                     l3684:	
   840  03CD  0BC9               	decfsz	DelayXms@j,f
   841  03CE  2BCD               	goto	l3684
   842  03CF  03C8               	decf	DelayXms@i,f
   843  03D0  2BC8               	goto	l3674
   844  03D1                     __end_of_DelayXms:	
   845                           
   846                           	psect	text5
   847  001A                     __ptext5:	
   848 ;; *************** function _ADC_Sample *****************
   849 ;; Defined at:
   850 ;;		line 11 in file "E:\project\project0508\scm\uf166fan\adc.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;  adch            1    wreg     unsigned char 
   853 ;; Auto vars:     Size  Location     Type
   854 ;;  adch            1    4[BANK0 ] unsigned char 
   855 ;;  ad_temp         2    6[BANK0 ] volatile unsigned int 
   856 ;;  i               1    5[BANK0 ] unsigned char 
   857 ;; Return value:  Size  Location     Type
   858 ;;                  1    wreg      void 
   859 ;; Registers used:
   860 ;;		wreg, status,2, status,0
   861 ;; Tracked objects:
   862 ;;		On entry : 300/0
   863 ;;		On exit  : 300/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMMON   BANK0   BANK1
   866 ;;      Params:         0       0       0
   867 ;;      Locals:         0       4       0
   868 ;;      Temps:          0       4       0
   869 ;;      Totals:         0       8       0
   870 ;;Total ram usage:        8 bytes
   871 ;; Hardware stack levels used:    1
   872 ;; Hardware stack levels required when called:    3
   873 ;; This function calls:
   874 ;;		Nothing
   875 ;; This function is called by:
   876 ;;		_readVrefADC
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880                           
   881                           ;psect for function _ADC_Sample
   882  001A                     _ADC_Sample:	
   883                           
   884                           ;incstack = 0
   885                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
   886                           ;ADC_Sample@adch stored from wreg
   887  001A  00CB               	movwf	ADC_Sample@adch
   888                           
   889                           ;adc.c: 13: static unsigned long adsum = 0;
   890                           ;adc.c: 14: static unsigned int admin = 0,admax = 0;
   891                           ;adc.c: 15: static unsigned char adtimes = 0;
   892                           ;adc.c: 16: volatile unsigned int ad_temp;
   893                           ;adc.c: 17: ADCON1 = 0;
   894  001B  1683               	bsf	3,5	;RP0=1, select bank1
   895  001C  019F               	clrf	31	;volatile
   896                           
   897                           ;adc.c: 18: ADCON0 = 0X41 | (adch << 2);
   898  001D  1283               	bcf	3,5	;RP0=0, select bank0
   899  001E  084B               	movf	ADC_Sample@adch,w
   900  001F  00C7               	movwf	??_ADC_Sample
   901  0020  3001               	movlw	1
   902  0021  1003               	clrc
   903  0022                     L1:	
   904  0022  0DC7               	rlf	??_ADC_Sample,f
   905  0023  3EFF               	addlw	-1
   906  0024  1003               	clrc
   907  0025  1D03               	skipz
   908  0026  2822               	goto	L1
   909  0027  0D47               	rlf	??_ADC_Sample,w
   910  0028  3841               	iorlw	65
   911  0029  009F               	movwf	31	;volatile
   912  002A  0000               	nop	;# 
   913  002B  0000               	nop	;# 
   914                           
   915                           ;adc.c: 21: GODONE = 1;
   916  002C  1283               	bcf	3,5	;RP0=0, select bank0
   917  002D  1303               	bcf	3,6	;RP1=0, select bank0
   918  002E  149F               	bsf	31,1	;volatile
   919                           
   920                           ;adc.c: 23: unsigned char i = 0;
   921  002F  01CC               	clrf	ADC_Sample@i
   922  0030                     l1799:	
   923                           ;adc.c: 24: while(GODONE)
   924                           
   925  0030  1C9F               	btfss	31,1	;volatile
   926  0031  2835               	goto	l3626
   927                           
   928                           ;adc.c: 25: {
   929                           ;adc.c: 26: if(0 == (--i))
   930  0032  0BCC               	decfsz	ADC_Sample@i,f
   931  0033  2830               	goto	l1799
   932  0034  0008               	return
   933  0035                     l3626:	
   934                           
   935                           ;adc.c: 28: }
   936                           ;adc.c: 30: ad_temp=(ADRESH<<4)+(ADRESL>>4);
   937  0035  081E               	movf	30,w	;volatile
   938  0036  00CD               	movwf	ADC_Sample@ad_temp	;volatile
   939  0037  01CE               	clrf	ADC_Sample@ad_temp+1	;volatile
   940  0038  0ECD               	swapf	ADC_Sample@ad_temp,f	;volatile
   941  0039  0ECE               	swapf	ADC_Sample@ad_temp+1,f	;volatile
   942  003A  30F0               	movlw	240
   943  003B  05CE               	andwf	ADC_Sample@ad_temp+1,f	;volatile
   944  003C  084D               	movf	ADC_Sample@ad_temp,w	;volatile
   945  003D  390F               	andlw	15
   946  003E  04CE               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
   947  003F  30F0               	movlw	240
   948  0040  05CD               	andwf	ADC_Sample@ad_temp,f	;volatile
   949  0041  1683               	bsf	3,5	;RP0=1, select bank1
   950  0042  0E1E               	swapf	30,w	;volatile
   951  0043  390F               	andlw	15
   952  0044  1283               	bcf	3,5	;RP0=0, select bank0
   953  0045  07CD               	addwf	ADC_Sample@ad_temp,f	;volatile
   954  0046  1803               	skipnc
   955  0047  0ACE               	incf	ADC_Sample@ad_temp+1,f	;volatile
   956                           
   957                           ;adc.c: 32: if(0 == admax)
   958  0048  0824               	movf	ADC_Sample@admax,w
   959  0049  0425               	iorwf	ADC_Sample@admax+1,w
   960  004A  1D03               	btfss	3,2
   961  004B  284E               	goto	l3634
   962                           
   963                           ;adc.c: 33: {
   964                           ;adc.c: 34: admax = ad_temp;
   965  004C  20BF               	fcall	PL10	;call to abstracted procedure
   966  004D  2860               	goto	l3640
   967  004E                     l3634:	
   968                           ;adc.c: 36: }
   969                           
   970                           ;adc.c: 35: admin = ad_temp;
   971                           
   972                           
   973                           ;adc.c: 37: else if(ad_temp > admax)
   974  004E  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
   975  004F  0225               	subwf	ADC_Sample@admax+1,w
   976  0050  1D03               	skipz
   977  0051  2854               	goto	u1435
   978  0052  084D               	movf	ADC_Sample@ad_temp,w	;volatile
   979  0053  0224               	subwf	ADC_Sample@admax,w
   980  0054                     u1435:	
   981  0054  1803               	skipnc
   982  0055  2858               	goto	l3638
   983                           
   984                           ;adc.c: 38: admax = ad_temp;
   985  0056  20BF               	fcall	PL10	;call to abstracted procedure
   986  0057  2864               	goto	l1805
   987  0058                     l3638:	
   988                           
   989                           ;adc.c: 39: else if(ad_temp < admin)
   990  0058  0827               	movf	ADC_Sample@admin+1,w
   991  0059  024E               	subwf	ADC_Sample@ad_temp+1,w	;volatile
   992  005A  1D03               	skipz
   993  005B  285E               	goto	u1445
   994  005C  0826               	movf	ADC_Sample@admin,w
   995  005D  024D               	subwf	ADC_Sample@ad_temp,w	;volatile
   996  005E                     u1445:	
   997  005E  1803               	skipnc
   998  005F  2864               	goto	l1805
   999  0060                     l3640:	
  1000                           
  1001                           ;adc.c: 40: admin = ad_temp;
  1002  0060  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1003  0061  00A7               	movwf	ADC_Sample@admin+1
  1004  0062  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  1005  0063  00A6               	movwf	ADC_Sample@admin
  1006  0064                     l1805:	
  1007                           
  1008                           ;adc.c: 42: adsum += ad_temp;
  1009  0064  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  1010  0065  00C7               	movwf	??_ADC_Sample
  1011  0066  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1012  0067  00C8               	movwf	??_ADC_Sample+1
  1013  0068  01C9               	clrf	??_ADC_Sample+2
  1014  0069  01CA               	clrf	??_ADC_Sample+3
  1015  006A  0847               	movf	??_ADC_Sample,w
  1016  006B  07A0               	addwf	ADC_Sample@adsum,f
  1017  006C  0848               	movf	??_ADC_Sample+1,w
  1018  006D  1103               	clrz
  1019  006E  1803               	skipnc
  1020  006F  3E01               	addlw	1
  1021  0070  1D03               	btfss	3,2
  1022  0071  07A1               	addwf	ADC_Sample@adsum+1,f
  1023  0072  0849               	movf	??_ADC_Sample+2,w
  1024  0073  1103               	clrz
  1025  0074  1803               	skipnc
  1026  0075  3E01               	addlw	1
  1027  0076  1D03               	btfss	3,2
  1028  0077  07A2               	addwf	ADC_Sample@adsum+2,f
  1029  0078  084A               	movf	??_ADC_Sample+3,w
  1030  0079  1103               	clrz
  1031  007A  1803               	skipnc
  1032  007B  3E01               	addlw	1
  1033  007C  1D03               	btfss	3,2
  1034  007D  07A3               	addwf	ADC_Sample@adsum+3,f
  1035                           
  1036                           ;adc.c: 43: if(++adtimes >= 10)
  1037  007E  300A               	movlw	10
  1038  007F  0AB0               	incf	ADC_Sample@adtimes,f
  1039  0080  0230               	subwf	ADC_Sample@adtimes,w
  1040  0081  1C03               	skipc
  1041  0082  0008               	return
  1042                           
  1043                           ;adc.c: 44: {
  1044                           ;adc.c: 45: adsum -= admax;
  1045  0083  0824               	movf	ADC_Sample@admax,w
  1046  0084  00C7               	movwf	??_ADC_Sample
  1047  0085  0825               	movf	ADC_Sample@admax+1,w
  1048  0086  20B0               	fcall	PL4	;call to abstracted procedure
  1049  0087  1C03               	skipc
  1050  0088  0F4A               	incfsz	??_ADC_Sample+3,w
  1051  0089  02A3               	subwf	ADC_Sample@adsum+3,f
  1052                           
  1053                           ;adc.c: 46: adsum -= admin;
  1054  008A  0826               	movf	ADC_Sample@admin,w
  1055  008B  00C7               	movwf	??_ADC_Sample
  1056  008C  0827               	movf	ADC_Sample@admin+1,w
  1057  008D  20B0               	fcall	PL4	;call to abstracted procedure
  1058  008E  1C03               	skipc
  1059  008F  0F4A               	incfsz	??_ADC_Sample+3,w
  1060  0090  02A3               	subwf	ADC_Sample@adsum+3,f
  1061                           
  1062                           ;adc.c: 48: adresult = adsum >> 3;
  1063  0091  0820               	movf	ADC_Sample@adsum,w
  1064  0092  00C7               	movwf	??_ADC_Sample
  1065  0093  0821               	movf	ADC_Sample@adsum+1,w
  1066  0094  00C8               	movwf	??_ADC_Sample+1
  1067  0095  0822               	movf	ADC_Sample@adsum+2,w
  1068  0096  00C9               	movwf	??_ADC_Sample+2
  1069  0097  0823               	movf	ADC_Sample@adsum+3,w
  1070  0098  00CA               	movwf	??_ADC_Sample+3
  1071  0099  3003               	movlw	3
  1072  009A                     u1495:	
  1073  009A  1003               	clrc
  1074  009B  0CCA               	rrf	??_ADC_Sample+3,f
  1075  009C  0CC9               	rrf	??_ADC_Sample+2,f
  1076  009D  0CC8               	rrf	??_ADC_Sample+1,f
  1077  009E  0CC7               	rrf	??_ADC_Sample,f
  1078  009F  3EFF               	addlw	-1
  1079  00A0  1D03               	skipz
  1080  00A1  289A               	goto	u1495
  1081  00A2  0848               	movf	??_ADC_Sample+1,w
  1082  00A3  00AF               	movwf	_adresult+1	;volatile
  1083  00A4  0847               	movf	??_ADC_Sample,w
  1084  00A5  00AE               	movwf	_adresult	;volatile
  1085                           
  1086                           ;adc.c: 50: adsum = 0;
  1087  00A6  01A0               	clrf	ADC_Sample@adsum
  1088  00A7  01A1               	clrf	ADC_Sample@adsum+1
  1089  00A8  01A2               	clrf	ADC_Sample@adsum+2
  1090  00A9  01A3               	clrf	ADC_Sample@adsum+3
  1091                           
  1092                           ;adc.c: 51: admin = 0;
  1093  00AA  01A6               	clrf	ADC_Sample@admin
  1094  00AB  01A7               	clrf	ADC_Sample@admin+1
  1095                           
  1096                           ;adc.c: 52: admax = 0;
  1097  00AC  01A4               	clrf	ADC_Sample@admax
  1098  00AD  01A5               	clrf	ADC_Sample@admax+1
  1099                           
  1100                           ;adc.c: 53: adtimes = 0;
  1101  00AE  01B0               	clrf	ADC_Sample@adtimes
  1102  00AF  0008               	return
  1103  00B0                     __end_of_ADC_Sample:	
  1104  00B0                     PL4:	
  1105  00B0  00C8               	movwf	??_ADC_Sample+1
  1106  00B1  01C9               	clrf	??_ADC_Sample+2
  1107  00B2  01CA               	clrf	??_ADC_Sample+3
  1108  00B3  0847               	movf	??_ADC_Sample,w
  1109  00B4  02A0               	subwf	ADC_Sample@adsum,f
  1110  00B5  0848               	movf	??_ADC_Sample+1,w
  1111  00B6  1C03               	skipc
  1112  00B7  0F48               	incfsz	??_ADC_Sample+1,w
  1113  00B8  02A1               	subwf	ADC_Sample@adsum+1,f
  1114  00B9  0849               	movf	??_ADC_Sample+2,w
  1115  00BA  1C03               	skipc
  1116  00BB  0F49               	incfsz	??_ADC_Sample+2,w
  1117  00BC  02A2               	subwf	ADC_Sample@adsum+2,f
  1118  00BD  084A               	movf	??_ADC_Sample+3,w
  1119  00BE  0008               	return
  1120  00BF                     __end_ofPL4:	
  1121  00BF                     PL10:	
  1122  00BF  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1123  00C0  00A5               	movwf	ADC_Sample@admax+1
  1124  00C1  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  1125  00C2  00A4               	movwf	ADC_Sample@admax
  1126  00C3  0008               	return
  1127  00C4                     __end_ofPL10:	
  1128                           
  1129                           	psect	text6
  1130  0308                     __ptext6:	
  1131 ;; *************** function _ADC_Result *****************
  1132 ;; Defined at:
  1133 ;;		line 59 in file "E:\project\project0508\scm\uf166fan\adc.c"
  1134 ;; Parameters:    Size  Location     Type
  1135 ;;  adch            1    wreg     unsigned char 
  1136 ;; Auto vars:     Size  Location     Type
  1137 ;;  adch            1    0[BANK0 ] unsigned char 
  1138 ;;  i               1    1[BANK0 ] unsigned char 
  1139 ;; Return value:  Size  Location     Type
  1140 ;;                  1    wreg      unsigned char 
  1141 ;; Registers used:
  1142 ;;		wreg, status,2, status,0
  1143 ;; Tracked objects:
  1144 ;;		On entry : 300/0
  1145 ;;		On exit  : 300/0
  1146 ;;		Unchanged: 0/0
  1147 ;; Data sizes:     COMMON   BANK0   BANK1
  1148 ;;      Params:         0       0       0
  1149 ;;      Locals:         0       2       0
  1150 ;;      Temps:          1       0       0
  1151 ;;      Totals:         1       2       0
  1152 ;;Total ram usage:        3 bytes
  1153 ;; Hardware stack levels used:    1
  1154 ;; Hardware stack levels required when called:    3
  1155 ;; This function calls:
  1156 ;;		Nothing
  1157 ;; This function is called by:
  1158 ;;		_readVrefADC
  1159 ;; This function uses a non-reentrant model
  1160 ;;
  1161                           
  1162                           
  1163                           ;psect for function _ADC_Result
  1164  0308                     _ADC_Result:	
  1165                           
  1166                           ;incstack = 0
  1167                           ; Regs used in _ADC_Result: [wreg+status,2+status,0]
  1168                           ;ADC_Result@adch stored from wreg
  1169  0308  00C7               	movwf	ADC_Result@adch
  1170                           
  1171                           ;adc.c: 61: ADCON1 = 0;
  1172  0309  1683               	bsf	3,5	;RP0=1, select bank1
  1173  030A  019F               	clrf	31	;volatile
  1174                           
  1175                           ;adc.c: 62: ADCON0 = 0X41 | (adch << 2);
  1176  030B  1283               	bcf	3,5	;RP0=0, select bank0
  1177  030C  0847               	movf	ADC_Result@adch,w
  1178  030D  00F4               	movwf	??_ADC_Result
  1179  030E  3001               	movlw	1
  1180  030F  1003               	clrc
  1181  0310                     L2:	
  1182  0310  0DF4               	rlf	??_ADC_Result,f
  1183  0311  3EFF               	addlw	-1
  1184  0312  1003               	clrc
  1185  0313  1D03               	skipz
  1186  0314  2B10               	goto	L2
  1187  0315  0D74               	rlf	??_ADC_Result,w
  1188  0316  3841               	iorlw	65
  1189  0317  009F               	movwf	31	;volatile
  1190  0318  0000               	nop	;# 
  1191  0319  0000               	nop	;# 
  1192                           
  1193                           ;adc.c: 65: GODONE = 1;
  1194  031A  1283               	bcf	3,5	;RP0=0, select bank0
  1195  031B  1303               	bcf	3,6	;RP1=0, select bank0
  1196  031C  149F               	bsf	31,1	;volatile
  1197                           
  1198                           ;adc.c: 67: unsigned char i = 0;
  1199  031D  01C8               	clrf	ADC_Result@i
  1200  031E                     l1812:	
  1201                           ;adc.c: 68: while(GODONE)
  1202                           
  1203  031E  1C9F               	btfss	31,1	;volatile
  1204  031F  2B23               	goto	l3668
  1205                           
  1206                           ;adc.c: 69: {
  1207                           ;adc.c: 70: if(0 == (--i))
  1208  0320  0BC8               	decfsz	ADC_Result@i,f
  1209  0321  2B1E               	goto	l1812
  1210                           
  1211                           ;adc.c: 71: return 0;
  1212  0322  3400               	retlw	0
  1213  0323                     l3668:	
  1214                           
  1215                           ;adc.c: 72: }
  1216                           ;adc.c: 73: return ADRESH;
  1217  0323  081E               	movf	30,w	;volatile
  1218  0324  0008               	return
  1219  0325                     __end_of_ADC_Result:	
  1220                           
  1221                           	psect	text7
  1222  00C4                     __ptext7:	
  1223 ;; *************** function _checkUsbStatus *****************
  1224 ;; Defined at:
  1225 ;;		line 42 in file "E:\project\project0508\scm\uf166fan\main.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;		None
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;		None
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  1    wreg      void 
  1232 ;; Registers used:
  1233 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1234 ;; Tracked objects:
  1235 ;;		On entry : 300/0
  1236 ;;		On exit  : 300/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMMON   BANK0   BANK1
  1239 ;;      Params:         0       0       0
  1240 ;;      Locals:         0       0       0
  1241 ;;      Temps:          0       2       0
  1242 ;;      Totals:         0       2       0
  1243 ;;Total ram usage:        2 bytes
  1244 ;; Hardware stack levels used:    1
  1245 ;; Hardware stack levels required when called:    6
  1246 ;; This function calls:
  1247 ;;		_closeFan
  1248 ;; This function is called by:
  1249 ;;		_main
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           
  1254                           ;psect for function _checkUsbStatus
  1255  00C4                     _checkUsbStatus:	
  1256                           
  1257                           ;main.c: 43: if (((PORTB) >> (2)&1) == 1) {
  1258                           
  1259                           ;incstack = 0
  1260                           ; Regs used in _checkUsbStatus: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1261  00C4  0806               	movf	6,w	;volatile
  1262  00C5  00C7               	movwf	??_checkUsbStatus
  1263  00C6  1003               	clrc
  1264  00C7  0CC7               	rrf	??_checkUsbStatus,f
  1265  00C8  1003               	clrc
  1266  00C9  0CC7               	rrf	??_checkUsbStatus,f
  1267  00CA  1C47               	btfss	??_checkUsbStatus,0
  1268  00CB  28DD               	goto	l585
  1269                           
  1270                           ;main.c: 44: if (((PORTB) >> (1)&1) == 0) {
  1271  00CC  0806               	movf	6,w	;volatile
  1272  00CD  00C7               	movwf	??_checkUsbStatus
  1273  00CE  1003               	clrc
  1274  00CF  0CC7               	rrf	??_checkUsbStatus,f
  1275  00D0  1847               	btfsc	??_checkUsbStatus,0
  1276  00D1  28D4               	goto	l3698
  1277  00D2                     l3696:	
  1278                           
  1279                           ;main.c: 46: PORTA&=~(1<<0);
  1280  00D2  1005               	bcf	5,0	;volatile
  1281                           
  1282                           ;main.c: 47: } else if (countTime < 15) {
  1283  00D3  0008               	return
  1284  00D4                     l3698:	
  1285  00D4  3000               	movlw	0
  1286  00D5  022D               	subwf	_countTime+1,w
  1287  00D6  300F               	movlw	15
  1288  00D7  1903               	skipnz
  1289  00D8  022C               	subwf	_countTime,w
  1290  00D9  1C03               	btfss	3,0
  1291  00DA  28D2               	goto	l3696
  1292                           
  1293                           ;main.c: 51: PORTA|=(1<<0);
  1294  00DB  1405               	bsf	5,0	;volatile
  1295  00DC  0008               	return
  1296  00DD                     l585:	
  1297                           
  1298                           ;main.c: 55: PORTA|=(1<<0);
  1299  00DD  1405               	bsf	5,0	;volatile
  1300                           
  1301                           ;main.c: 56: if((adresult/8) > 0x63 && count300ms == 0)
  1302  00DE  20F9               	fcall	PL2	;call to abstracted procedure
  1303  00DF  3064               	movlw	100
  1304  00E0  1903               	skipnz
  1305  00E1  0247               	subwf	??_checkUsbStatus,w
  1306  00E2  1C03               	skipc
  1307  00E3  28F0               	goto	l3714
  1308  00E4  0876               	movf	_count300ms,w
  1309  00E5  1D03               	btfss	3,2
  1310  00E6  28F0               	goto	l3714
  1311                           
  1312                           ;main.c: 57: {
  1313                           ;main.c: 58: if(lowVTime < 20)
  1314  00E7  3014               	movlw	20
  1315  00E8  0231               	subwf	_lowVTime,w
  1316  00E9  1803               	skipnc
  1317  00EA  28EF               	goto	l3712
  1318  00EB  3001               	movlw	1
  1319                           
  1320                           ;main.c: 59: {
  1321                           ;main.c: 60: lowVTime++;
  1322  00EC  0AB1               	incf	_lowVTime,f
  1323                           
  1324                           ;main.c: 62: PORTA^=(1<<0);
  1325  00ED  0685               	xorwf	5,f	;volatile
  1326                           
  1327                           ;main.c: 63: }else
  1328  00EE  28F0               	goto	l3714
  1329  00EF                     l3712:	
  1330                           
  1331                           ;main.c: 64: {
  1332                           ;main.c: 66: closeFan();
  1333  00EF  2325               	fcall	_closeFan
  1334  00F0                     l3714:	
  1335                           
  1336                           ;main.c: 67: }
  1337                           ;main.c: 68: }
  1338                           ;main.c: 69: if((adresult/8) < 0x63)
  1339  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  1340  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  1341  00F2  20F9               	fcall	PL2	;call to abstracted procedure
  1342  00F3  3063               	movlw	99
  1343  00F4  1903               	skipnz
  1344  00F5  0247               	subwf	??_checkUsbStatus,w
  1345  00F6  1C03               	btfss	3,0
  1346                           
  1347                           ;main.c: 70: {
  1348                           ;main.c: 71: lowVTime = 0;
  1349  00F7  01B1               	clrf	_lowVTime
  1350  00F8  0008               	return
  1351  00F9                     __end_of_checkUsbStatus:	
  1352  00F9                     PL2:	
  1353  00F9  082F               	movf	_adresult+1,w	;volatile
  1354  00FA  00C8               	movwf	??_checkUsbStatus+1
  1355  00FB  082E               	movf	_adresult,w	;volatile
  1356  00FC  00C7               	movwf	??_checkUsbStatus
  1357  00FD  3000               	movlw	0
  1358  00FE  1003               	clrc
  1359  00FF  0CC8               	rrf	??_checkUsbStatus+1,f
  1360  0100  0CC7               	rrf	??_checkUsbStatus,f
  1361  0101  1003               	clrc
  1362  0102  0CC8               	rrf	??_checkUsbStatus+1,f
  1363  0103  0CC7               	rrf	??_checkUsbStatus,f
  1364  0104  1003               	clrc
  1365  0105  0CC8               	rrf	??_checkUsbStatus+1,f
  1366  0106  0CC7               	rrf	??_checkUsbStatus,f
  1367  0107  0248               	subwf	??_checkUsbStatus+1,w
  1368  0108  0008               	return
  1369  0109                     __end_ofPL2:	
  1370                           
  1371                           	psect	text8
  1372  02CD                     __ptext8:	
  1373 ;; *************** function _checkKeys *****************
  1374 ;; Defined at:
  1375 ;;		line 244 in file "E:\project\project0508\scm\uf166fan\main.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;		None
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;  key3Status      1   12[BANK0 ] unsigned char 
  1380 ;;  key2Status      1   11[BANK0 ] unsigned char 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 300/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMMON   BANK0   BANK1
  1390 ;;      Params:         0       0       0
  1391 ;;      Locals:         0       2       0
  1392 ;;      Temps:          0       0       0
  1393 ;;      Totals:         0       2       0
  1394 ;;Total ram usage:        2 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    7
  1397 ;; This function calls:
  1398 ;;		_checkFan
  1399 ;;		_closeFan
  1400 ;;		_key_driver
  1401 ;;		_setFanLevel
  1402 ;; This function is called by:
  1403 ;;		_main
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           
  1408                           ;psect for function _checkKeys
  1409  02CD                     _checkKeys:	
  1410                           
  1411                           ;main.c: 245: if (key_driver(&key1) == 1) {
  1412                           
  1413                           ;incstack = 0
  1414                           ; Regs used in _checkKeys: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1415  02CD  3040               	movlw	(low (_key1| 0))& (0+255)
  1416  02CE  214E               	fcall	_key_driver
  1417  02CF  3A01               	xorlw	1
  1418  02D0  1D03               	skipz
  1419  02D1  2AD8               	goto	l3740
  1420                           
  1421                           ;main.c: 248: if (FAN_STATUS == 1) {
  1422  02D2  0B78               	decfsz	_FAN_STATUS,w
  1423  02D3  2AD5               	goto	l3732
  1424                           
  1425                           ;main.c: 250: closeFan();
  1426  02D4  2B25               	ljmp	l3486
  1427  02D5                     l3732:	
  1428                           ;main.c: 251: } else {
  1429                           
  1430                           
  1431                           ;main.c: 252: FAN_STATUS = 2;
  1432  02D5  3002               	movlw	2
  1433  02D6  00F8               	movwf	_FAN_STATUS
  1434                           
  1435                           ;main.c: 253: checkFan();
  1436  02D7  2A0A               	ljmp	l3546
  1437  02D8                     l3740:	
  1438  02D8  3002               	movlw	2
  1439  02D9  0678               	xorwf	_FAN_STATUS,w
  1440  02DA  1D03               	btfss	3,2
  1441  02DB  2ADD               	goto	l642
  1442                           
  1443                           ;main.c: 257: checkFan();
  1444  02DC  220A               	fcall	_checkFan
  1445  02DD                     l642:	
  1446                           
  1447                           ;main.c: 258: }
  1448                           ;main.c: 260: unsigned char key2Status = key_driver(&key2);
  1449  02DD  3039               	movlw	(low (_key2| 0))& (0+255)
  1450  02DE  214E               	fcall	_key_driver
  1451  02DF  00D2               	movwf	checkKeys@key2Status
  1452                           
  1453                           ;main.c: 261: if (key2Status == 1) {
  1454  02E0  0B52               	decfsz	checkKeys@key2Status,w
  1455  02E1  2AE4               	goto	l3750
  1456                           
  1457                           ;main.c: 263: setFanLevel(1);
  1458  02E2  3001               	movlw	1
  1459  02E3  2992               	ljmp	_setFanLevel
  1460  02E4                     l3750:	
  1461                           
  1462                           ;main.c: 265: }
  1463                           ;main.c: 266: unsigned char key3Status = key_driver(&key3);
  1464  02E4  3032               	movlw	(low (_key3| 0))& (0+255)
  1465  02E5  214E               	fcall	_key_driver
  1466  02E6  00D3               	movwf	checkKeys@key3Status
  1467                           
  1468                           ;main.c: 267: if (key3Status == 1) {
  1469  02E7  0B53               	decfsz	checkKeys@key3Status,w
  1470  02E8  0008               	return
  1471                           
  1472                           ;main.c: 269: setFanLevel(-1);
  1473  02E9  30FF               	movlw	255
  1474  02EA  2992               	ljmp	_setFanLevel
  1475  02EB                     __end_of_checkKeys:	
  1476                           
  1477                           	psect	text9
  1478  014E                     __ptext9:	
  1479 ;; *************** function _key_driver *****************
  1480 ;; Defined at:
  1481 ;;		line 9 in file "E:\project\project0508\scm\uf166fan\scankey.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;  key             1    wreg     PTR struct Keys
  1484 ;;		 -> key3(7), key2(7), key1(7), 
  1485 ;; Auto vars:     Size  Location     Type
  1486 ;;  key             1    2[BANK0 ] PTR struct Keys
  1487 ;;		 -> key3(7), key2(7), key1(7), 
  1488 ;;  key_read        1    1[BANK0 ] unsigned char 
  1489 ;;  key_return      1    0[BANK0 ] unsigned char 
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      unsigned char 
  1492 ;; Registers used:
  1493 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : B00/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMMON   BANK0   BANK1
  1499 ;;      Params:         0       0       0
  1500 ;;      Locals:         0       3       0
  1501 ;;      Temps:          0       0       0
  1502 ;;      Totals:         0       3       0
  1503 ;;Total ram usage:        3 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; Hardware stack levels required when called:    3
  1506 ;; This function calls:
  1507 ;;		Nothing
  1508 ;; This function is called by:
  1509 ;;		_checkKeys
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513                           
  1514                           ;psect for function _key_driver
  1515  014E                     _key_driver:	
  1516                           
  1517                           ;incstack = 0
  1518                           ; Regs used in _key_driver: [wreg-fsr0h+status,2+status,0]
  1519                           ;key_driver@key stored from wreg
  1520  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1521  014F  1303               	bcf	3,6	;RP1=0, select bank0
  1522  0150  00C9               	movwf	key_driver@key
  1523                           
  1524                           ;scankey.c: 12: unsigned char key_return = 0;
  1525  0151  01C7               	clrf	key_driver@key_return
  1526                           
  1527                           ;scankey.c: 13: unsigned char key_read = key->key_input;
  1528  0152  3E04               	addlw	4
  1529  0153  0084               	movwf	4
  1530  0154  1383               	bcf	3,7	;select IRP bank0
  1531  0155  0800               	movf	0,w
  1532  0156  00C8               	movwf	key_driver@key_read
  1533                           
  1534                           ;scankey.c: 15: switch (key->key_state_buffer1) {
  1535  0157  2983               	goto	l3604
  1536  0158                     l3574:	
  1537                           
  1538                           ;scankey.c: 17: if (key_read == 0) {
  1539  0158  0848               	movf	key_driver@key_read,w
  1540  0159  1D03               	btfss	3,2
  1541  015A  2990               	goto	l3606
  1542                           
  1543                           ;scankey.c: 18: key->key_state_buffer1 = 1;
  1544  015B  0A49               	incf	key_driver@key,w
  1545  015C  0084               	movwf	4
  1546  015D  0180               	clrf	0
  1547  015E  0A80               	incf	0,f
  1548  015F  2990               	goto	l3606
  1549  0160                     l3578:	
  1550                           
  1551                           ;scankey.c: 25: if (key_read == 0) {
  1552  0160  0848               	movf	key_driver@key_read,w
  1553  0161  1D03               	btfss	3,2
  1554  0162  297F               	goto	l3600
  1555                           
  1556                           ;scankey.c: 26: key->key_timer_cnt1 = 0;
  1557  0163  0849               	movf	key_driver@key,w
  1558  0164  0084               	movwf	4
  1559  0165  0180               	clrf	0
  1560                           
  1561                           ;scankey.c: 27: key->key_state_buffer1 = 2;
  1562  0166  0A49               	incf	key_driver@key,w
  1563  0167  0084               	movwf	4
  1564  0168  3002               	movlw	2
  1565  0169  297B               	goto	L3
  1566  016A                     l3586:	
  1567                           ;scankey.c: 32: key->key_state_buffer1 = 0;
  1568                           
  1569                           ;scankey.c: 31: } else {
  1570                           
  1571                           
  1572                           ;scankey.c: 39: if (key_read == 1) {
  1573  016A  0B48               	decfsz	key_driver@key_read,w
  1574  016B  296F               	goto	l3592
  1575                           
  1576                           ;scankey.c: 40: key_return = 1;
  1577  016C  01C7               	clrf	key_driver@key_return
  1578  016D  0AC7               	incf	key_driver@key_return,f
  1579  016E  297F               	goto	l3600
  1580  016F                     l3592:	
  1581                           ;scankey.c: 42: } else if (++(key->key_timer_cnt1) >= 100)
  1582                           
  1583                           ;scankey.c: 41: key->key_state_buffer1 = 0;
  1584                           
  1585  016F  0849               	movf	key_driver@key,w
  1586  0170  0084               	movwf	4
  1587  0171  3064               	movlw	100
  1588  0172  0A80               	incf	0,f
  1589  0173  0200               	subwf	0,w
  1590  0174  1C03               	skipc
  1591  0175  2990               	goto	l3606
  1592                           
  1593                           ;scankey.c: 43: {
  1594                           ;scankey.c: 44: key_return = 3;
  1595  0176  3003               	movlw	3
  1596  0177  00C7               	movwf	key_driver@key_return
  1597                           
  1598                           ;scankey.c: 45: key->key_state_buffer1 = 3;
  1599  0178  0A49               	incf	key_driver@key,w
  1600  0179  0084               	movwf	4
  1601  017A  3003               	movlw	3
  1602  017B                     L3:	
  1603  017B  0080               	movwf	0
  1604  017C  2990               	goto	l3606
  1605  017D                     l3598:	
  1606                           
  1607                           ;scankey.c: 51: if (key_read == 1)
  1608  017D  0B48               	decfsz	key_driver@key_read,w
  1609  017E  2990               	goto	l3606
  1610  017F                     l3600:	
  1611                           
  1612                           ;scankey.c: 52: {
  1613                           ;scankey.c: 53: key->key_state_buffer1 = 0;
  1614  017F  0A49               	incf	key_driver@key,w
  1615  0180  0084               	movwf	4
  1616  0181  0180               	clrf	0
  1617  0182  2990               	goto	l3606
  1618  0183                     l3604:	
  1619  0183  0A49               	incf	key_driver@key,w
  1620  0184  0084               	movwf	4
  1621  0185  0800               	movf	0,w
  1622                           
  1623                           ; Switch size 1, requested type "space"
  1624                           ; Number of cases is 4, Range of values is 0 to 3
  1625                           ; switch strategies available:
  1626                           ; Name         Instructions Cycles
  1627                           ; direct_byte           10     6 (fixed)
  1628                           ; simple_byte           13     7 (average)
  1629                           ; jumptable            260     6 (fixed)
  1630                           ;	Chosen strategy is direct_byte
  1631  0186  0084               	movwf	4
  1632  0187  3004               	movlw	4
  1633  0188  0204               	subwf	4,w
  1634  0189  1803               	skipnc
  1635  018A  2990               	goto	l3606
  1636  018B  3004               	movlw	high S3878
  1637  018C  008A               	movwf	10
  1638  018D  3005               	movlw	low S3878
  1639  018E  0704               	addwf	4,w
  1640  018F  0082               	movwf	2
  1641  0190                     l3606:	
  1642                           
  1643                           ;scankey.c: 58: return key_return;
  1644  0190  0847               	movf	key_driver@key_return,w
  1645  0191  0008               	return
  1646  0192                     __end_of_key_driver:	
  1647                           
  1648                           	psect	swtext1
  1649  0405                     __pswtext1:	
  1650  0405                     S3878:	
  1651  0405  2958               	ljmp	l3574
  1652  0406  2960               	ljmp	l3578
  1653  0407  296A               	ljmp	l3586
  1654  0408  297D               	ljmp	l3598
  1655                           
  1656                           	psect	text10
  1657  020A                     __ptext10:	
  1658 ;; *************** function _checkFan *****************
  1659 ;; Defined at:
  1660 ;;		line 154 in file "E:\project\project0508\scm\uf166fan\main.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;		None
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;		None
  1665 ;; Return value:  Size  Location     Type
  1666 ;;                  1    wreg      void 
  1667 ;; Registers used:
  1668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1669 ;; Tracked objects:
  1670 ;;		On entry : B00/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: 0/0
  1673 ;; Data sizes:     COMMON   BANK0   BANK1
  1674 ;;      Params:         0       0       0
  1675 ;;      Locals:         0       0       0
  1676 ;;      Temps:          0       1       0
  1677 ;;      Totals:         0       1       0
  1678 ;;Total ram usage:        1 bytes
  1679 ;; Hardware stack levels used:    1
  1680 ;; Hardware stack levels required when called:    6
  1681 ;; This function calls:
  1682 ;;		_closeFan
  1683 ;;		_setFanLevel
  1684 ;; This function is called by:
  1685 ;;		_checkKeys
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689                           
  1690                           ;psect for function _checkFan
  1691  020A                     _checkFan:	
  1692  020A                     l3546:	
  1693                           ;incstack = 0
  1694                           ; Regs used in _checkFan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1695                           
  1696                           
  1697                           ;main.c: 155: TRISA&=~(1<<1);
  1698  020A  1683               	bsf	3,5	;RP0=1, select bank1
  1699  020B  1085               	bcf	5,1	;volatile
  1700                           
  1701                           ;main.c: 156: PORTA|=(1<<1);
  1702  020C  1283               	bcf	3,5	;RP0=0, select bank0
  1703  020D  1485               	bsf	5,1	;volatile
  1704                           
  1705                           ;main.c: 158: TRISC&=~(1<<2);
  1706  020E  1683               	bsf	3,5	;RP0=1, select bank1
  1707  020F  1107               	bcf	7,2	;volatile
  1708                           
  1709                           ;main.c: 159: PORTA|=(1<<2);
  1710  0210  1283               	bcf	3,5	;RP0=0, select bank0
  1711  0211  1505               	bsf	5,2	;volatile
  1712                           
  1713                           ;main.c: 160: T2CON = 0X04;
  1714  0212  3004               	movlw	4
  1715  0213  0092               	movwf	18	;volatile
  1716                           
  1717                           ;main.c: 163: if (((PORTB) >> (6)&1) == 0) {
  1718  0214  0806               	movf	6,w	;volatile
  1719  0215  00D1               	movwf	??_checkFan
  1720  0216  3006               	movlw	6
  1721  0217                     u1295:	
  1722  0217  1003               	clrc
  1723  0218  0CD1               	rrf	??_checkFan,f
  1724  0219  3EFF               	addlw	-1
  1725  021A  1D03               	skipz
  1726  021B  2A17               	goto	u1295
  1727  021C  1851               	btfsc	??_checkFan,0
  1728  021D  2A21               	goto	l3554
  1729                           
  1730                           ;main.c: 164: FAN_STATUS = 1;
  1731  021E  01F8               	clrf	_FAN_STATUS
  1732  021F  0AF8               	incf	_FAN_STATUS,f
  1733                           
  1734                           ;main.c: 165: } else {
  1735  0220  2A23               	goto	l3556
  1736  0221                     l3554:	
  1737                           
  1738                           ;main.c: 166: FAN_STATUS = 2;
  1739  0221  3002               	movlw	2
  1740  0222  00F8               	movwf	_FAN_STATUS
  1741  0223                     l3556:	
  1742                           
  1743                           ;main.c: 167: }
  1744                           ;main.c: 169: setFanLevel(0);
  1745  0223  3000               	movlw	0
  1746  0224  2192               	fcall	_setFanLevel
  1747                           
  1748                           ;main.c: 172: if (FAN_STATUS == 2) {
  1749  0225  3002               	movlw	2
  1750  0226  0678               	xorwf	_FAN_STATUS,w
  1751  0227  1D03               	btfss	3,2
  1752  0228  0008               	return
  1753                           
  1754                           ;main.c: 173: fan_check_time++;
  1755  0229  0AA8               	incf	_fan_check_time,f
  1756  022A  1903               	skipnz
  1757  022B  0AA9               	incf	_fan_check_time+1,f
  1758                           
  1759                           ;main.c: 174: if (fan_check_time == 3000) {
  1760  022C  30B8               	movlw	184
  1761  022D  0628               	xorwf	_fan_check_time,w
  1762  022E  300B               	movlw	11
  1763  022F  1903               	skipnz
  1764  0230  0629               	xorwf	_fan_check_time+1,w
  1765  0231  1D03               	btfss	3,2
  1766  0232  0008               	return
  1767                           
  1768                           ;main.c: 175: closeFan();
  1769  0233  2B25               	ljmp	l3486
  1770  0234                     __end_of_checkFan:	
  1771                           
  1772                           	psect	text11
  1773  0192                     __ptext11:	
  1774 ;; *************** function _setFanLevel *****************
  1775 ;; Defined at:
  1776 ;;		line 90 in file "E:\project\project0508\scm\uf166fan\main.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  level           1    wreg     unsigned char 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  level           1    8[BANK0 ] unsigned char 
  1781 ;;  levelWidth      2    0        unsigned int 
  1782 ;;  tempLevel       1    9[BANK0 ] unsigned char 
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      void 
  1785 ;; Registers used:
  1786 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : B00/0
  1789 ;;		On exit  : 300/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMMON   BANK0   BANK1
  1792 ;;      Params:         0       0       0
  1793 ;;      Locals:         0       2       0
  1794 ;;      Temps:          0       0       0
  1795 ;;      Totals:         0       2       0
  1796 ;;Total ram usage:        2 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    4
  1799 ;; This function calls:
  1800 ;;		_Init_PWM
  1801 ;;		___awdiv
  1802 ;;		_setLedOn
  1803 ;; This function is called by:
  1804 ;;		_checkFan
  1805 ;;		_checkKeys
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           
  1810                           ;psect for function _setFanLevel
  1811  0192                     _setFanLevel:	
  1812                           
  1813                           ;incstack = 0
  1814                           ; Regs used in _setFanLevel: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1815                           ;setFanLevel@level stored from wreg
  1816  0192  00CF               	movwf	setFanLevel@level
  1817                           
  1818                           ;main.c: 91: Init_PWM();
  1819  0193  238A               	fcall	_Init_PWM
  1820                           
  1821                           ;main.c: 92: if(level == 0)
  1822  0194  084F               	movf	setFanLevel@level,w
  1823  0195  1D03               	btfss	3,2
  1824  0196  2999               	goto	l3516
  1825                           
  1826                           ;main.c: 93: {
  1827                           ;main.c: 94: currentLevel = 3;
  1828  0197  3003               	movlw	3
  1829  0198  00F9               	movwf	_currentLevel
  1830  0199                     l3516:	
  1831                           
  1832                           ;main.c: 95: }
  1833                           ;main.c: 96: unsigned int levelWidth = (PR2 + 1) / 4;
  1834  0199  1683               	bsf	3,5	;RP0=1, select bank1
  1835  019A  0812               	movf	18,w	;volatile
  1836  019B  1283               	bcf	3,5	;RP0=0, select bank0
  1837  019C  00C9               	movwf	___awdiv@dividend
  1838  019D  01CA               	clrf	___awdiv@dividend+1
  1839  019E  0AC9               	incf	___awdiv@dividend,f
  1840  019F  1903               	skipnz
  1841  01A0  0ACA               	incf	___awdiv@dividend+1,f
  1842  01A1  3004               	movlw	4
  1843  01A2  00C7               	movwf	___awdiv@divisor
  1844  01A3  01C8               	clrf	___awdiv@divisor+1
  1845  01A4  2109               	fcall	___awdiv
  1846                           
  1847                           ;main.c: 97: char tempLevel = currentLevel + level;
  1848  01A5  084F               	movf	setFanLevel@level,w
  1849  01A6  0779               	addwf	_currentLevel,w
  1850  01A7  00D0               	movwf	setFanLevel@tempLevel
  1851                           
  1852                           ;main.c: 98: if (tempLevel > 4) {
  1853  01A8  3005               	movlw	5
  1854  01A9  0250               	subwf	setFanLevel@tempLevel,w
  1855  01AA  1C03               	skipc
  1856  01AB  29AE               	goto	l3524
  1857                           
  1858                           ;main.c: 99: tempLevel = 4;
  1859  01AC  3004               	movlw	4
  1860  01AD  00D0               	movwf	setFanLevel@tempLevel
  1861  01AE                     l3524:	
  1862                           
  1863                           ;main.c: 100: }
  1864                           ;main.c: 102: if (tempLevel < 1) {
  1865  01AE  0850               	movf	setFanLevel@tempLevel,w
  1866  01AF  1D03               	btfss	3,2
  1867  01B0  29B3               	goto	l3528
  1868                           
  1869                           ;main.c: 103: tempLevel = 1;
  1870  01B1  01D0               	clrf	setFanLevel@tempLevel
  1871  01B2  0AD0               	incf	setFanLevel@tempLevel,f
  1872  01B3                     l3528:	
  1873                           
  1874                           ;main.c: 104: }
  1875                           ;main.c: 107: if (FAN_STATUS == 1) {
  1876  01B3  0B78               	decfsz	_FAN_STATUS,w
  1877  01B4  0008               	return
  1878                           
  1879                           ;main.c: 108: currentLevel = tempLevel;
  1880  01B5  0850               	movf	setFanLevel@tempLevel,w
  1881  01B6  00F9               	movwf	_currentLevel
  1882                           
  1883                           ;main.c: 109: switch(currentLevel)
  1884  01B7  29C1               	goto	l3542
  1885  01B8                     l3532:	
  1886                           
  1887                           ;main.c: 112: CCPR1L = 1;
  1888  01B8  3001               	movlw	1
  1889  01B9  29BF               	goto	L6
  1890  01BA                     l3534:	
  1891                           ;main.c: 113: break;
  1892                           
  1893                           
  1894                           ;main.c: 115: CCPR1L = 2;
  1895  01BA  3002               	movlw	2
  1896  01BB  29BF               	goto	L6
  1897  01BC                     l3536:	
  1898                           ;main.c: 116: break;
  1899                           
  1900                           
  1901                           ;main.c: 118: CCPR1L = 3;
  1902  01BC  3003               	movlw	3
  1903  01BD  29BF               	goto	L6
  1904  01BE                     l3538:	
  1905                           ;main.c: 119: break;
  1906                           
  1907                           
  1908                           ;main.c: 121: CCPR1L = 5;
  1909  01BE  3005               	movlw	5
  1910  01BF                     L6:	
  1911  01BF  0095               	movwf	21	;volatile
  1912                           
  1913                           ;main.c: 122: break;
  1914  01C0  29CF               	goto	l3544
  1915  01C1                     l3542:	
  1916  01C1  0879               	movf	_currentLevel,w
  1917                           
  1918                           ; Switch size 1, requested type "space"
  1919                           ; Number of cases is 4, Range of values is 1 to 4
  1920                           ; switch strategies available:
  1921                           ; Name         Instructions Cycles
  1922                           ; simple_byte           13     7 (average)
  1923                           ; direct_byte           13     9 (fixed)
  1924                           ; jumptable            263     9 (fixed)
  1925                           ;	Chosen strategy is simple_byte
  1926  01C2  3A01               	xorlw	1	; case 1
  1927  01C3  1903               	skipnz
  1928  01C4  29B8               	goto	l3532
  1929  01C5  3A03               	xorlw	3	; case 2
  1930  01C6  1903               	skipnz
  1931  01C7  29BA               	goto	l3534
  1932  01C8  3A01               	xorlw	1	; case 3
  1933  01C9  1903               	skipnz
  1934  01CA  29BC               	goto	l3536
  1935  01CB  3A07               	xorlw	7	; case 4
  1936  01CC  1903               	skipnz
  1937  01CD  29BE               	goto	l3538
  1938  01CE  29CF               	goto	l3544
  1939  01CF                     l3544:	
  1940                           
  1941                           ;main.c: 126: setLedOn(currentLevel);
  1942  01CF  0879               	movf	_currentLevel,w
  1943  01D0  29D1               	ljmp	_setLedOn
  1944  01D1                     __end_of_setFanLevel:	
  1945                           
  1946                           	psect	text12
  1947  0109                     __ptext12:	
  1948 ;; *************** function ___awdiv *****************
  1949 ;; Defined at:
  1950 ;;		line 6 in file "E:\cms\SCMCU_IDE_V2.00.07\data\sources\common\awdiv.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;  divisor         2    0[BANK0 ] int 
  1953 ;;  dividend        2    2[BANK0 ] int 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;  quotient        2    6[BANK0 ] int 
  1956 ;;  sign            1    5[BANK0 ] unsigned char 
  1957 ;;  counter         1    4[BANK0 ] unsigned char 
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  2    0[BANK0 ] int 
  1960 ;; Registers used:
  1961 ;;		wreg, status,2, status,0
  1962 ;; Tracked objects:
  1963 ;;		On entry : 300/0
  1964 ;;		On exit  : 300/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMMON   BANK0   BANK1
  1967 ;;      Params:         0       4       0
  1968 ;;      Locals:         0       4       0
  1969 ;;      Temps:          0       0       0
  1970 ;;      Totals:         0       8       0
  1971 ;;Total ram usage:        8 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; Hardware stack levels required when called:    3
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_setFanLevel
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           
  1982                           ;psect for function ___awdiv
  1983  0109                     ___awdiv:	
  1984                           
  1985                           ;incstack = 0
  1986                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1987  0109  01CC               	clrf	___awdiv@sign
  1988  010A  1FC8               	btfss	___awdiv@divisor+1,7
  1989  010B  2913               	goto	l3450
  1990  010C  09C7               	comf	___awdiv@divisor,f
  1991  010D  09C8               	comf	___awdiv@divisor+1,f
  1992  010E  0AC7               	incf	___awdiv@divisor,f
  1993  010F  1903               	skipnz
  1994  0110  0AC8               	incf	___awdiv@divisor+1,f
  1995  0111  01CC               	clrf	___awdiv@sign
  1996  0112  0ACC               	incf	___awdiv@sign,f
  1997  0113                     l3450:	
  1998  0113  1FCA               	btfss	___awdiv@dividend+1,7
  1999  0114  291C               	goto	l3456
  2000  0115  09C9               	comf	___awdiv@dividend,f
  2001  0116  09CA               	comf	___awdiv@dividend+1,f
  2002  0117  0AC9               	incf	___awdiv@dividend,f
  2003  0118  1903               	skipnz
  2004  0119  0ACA               	incf	___awdiv@dividend+1,f
  2005  011A  3001               	movlw	1
  2006  011B  06CC               	xorwf	___awdiv@sign,f
  2007  011C                     l3456:	
  2008  011C  01CD               	clrf	___awdiv@quotient
  2009  011D  01CE               	clrf	___awdiv@quotient+1
  2010  011E  0847               	movf	___awdiv@divisor,w
  2011  011F  0448               	iorwf	___awdiv@divisor+1,w
  2012  0120  1903               	btfsc	3,2
  2013  0121  2941               	goto	l3478
  2014  0122  01CB               	clrf	___awdiv@counter
  2015  0123                     L7:	
  2016  0123  0ACB               	incf	___awdiv@counter,f
  2017  0124  1BC8               	btfsc	___awdiv@divisor+1,7
  2018  0125  292A               	goto	l3466
  2019  0126  1003               	clrc
  2020  0127  0DC7               	rlf	___awdiv@divisor,f
  2021  0128  0DC8               	rlf	___awdiv@divisor+1,f
  2022  0129  2923               	goto	L7
  2023  012A                     l3466:	
  2024  012A  1003               	clrc
  2025  012B  0DCD               	rlf	___awdiv@quotient,f
  2026  012C  0DCE               	rlf	___awdiv@quotient+1,f
  2027  012D  0848               	movf	___awdiv@divisor+1,w
  2028  012E  024A               	subwf	___awdiv@dividend+1,w
  2029  012F  1D03               	skipz
  2030  0130  2933               	goto	u1215
  2031  0131  0847               	movf	___awdiv@divisor,w
  2032  0132  0249               	subwf	___awdiv@dividend,w
  2033  0133                     u1215:	
  2034  0133  1C03               	skipc
  2035  0134  293D               	goto	L8
  2036  0135  0847               	movf	___awdiv@divisor,w
  2037  0136  02C9               	subwf	___awdiv@dividend,f
  2038  0137  0848               	movf	___awdiv@divisor+1,w
  2039  0138  1C03               	skipc
  2040  0139  03CA               	decf	___awdiv@dividend+1,f
  2041  013A  02CA               	subwf	___awdiv@dividend+1,f
  2042  013B  144D               	bsf	___awdiv@quotient,0
  2043  013C  1003               	clrc
  2044  013D                     L8:	
  2045  013D  0CC8               	rrf	___awdiv@divisor+1,f
  2046  013E  0CC7               	rrf	___awdiv@divisor,f
  2047  013F  0BCB               	decfsz	___awdiv@counter,f
  2048  0140  292A               	goto	l3466
  2049  0141                     l3478:	
  2050  0141  084C               	movf	___awdiv@sign,w
  2051  0142  1903               	btfsc	3,2
  2052  0143  2949               	goto	l3482
  2053  0144  09CD               	comf	___awdiv@quotient,f
  2054  0145  09CE               	comf	___awdiv@quotient+1,f
  2055  0146  0ACD               	incf	___awdiv@quotient,f
  2056  0147  1903               	skipnz
  2057  0148  0ACE               	incf	___awdiv@quotient+1,f
  2058  0149                     l3482:	
  2059  0149  084E               	movf	___awdiv@quotient+1,w
  2060  014A  00C8               	movwf	?___awdiv+1
  2061  014B  084D               	movf	___awdiv@quotient,w
  2062  014C  00C7               	movwf	?___awdiv
  2063  014D  0008               	return
  2064  014E                     __end_of___awdiv:	
  2065                           
  2066                           	psect	text13
  2067  0325                     __ptext13:	
  2068 ;; *************** function _closeFan *****************
  2069 ;; Defined at:
  2070 ;;		line 132 in file "E:\project\project0508\scm\uf166fan\main.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;		None
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      void 
  2077 ;; Registers used:
  2078 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2079 ;; Tracked objects:
  2080 ;;		On entry : 300/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMMON   BANK0   BANK1
  2084 ;;      Params:         0       0       0
  2085 ;;      Locals:         0       0       0
  2086 ;;      Temps:          1       0       0
  2087 ;;      Totals:         1       0       0
  2088 ;;Total ram usage:        1 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:    5
  2091 ;; This function calls:
  2092 ;;		_Sleep_Mode
  2093 ;;		_setLedOn
  2094 ;; This function is called by:
  2095 ;;		_checkUsbStatus
  2096 ;;		_checkFan
  2097 ;;		_checkKeys
  2098 ;;		_main
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           
  2103                           ;psect for function _closeFan
  2104  0325                     _closeFan:	
  2105  0325                     l3486:	
  2106                           ;incstack = 0
  2107                           ; Regs used in _closeFan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2108                           
  2109                           
  2110                           ;main.c: 133: CCP1CON = 0x00;
  2111  0325  0197               	clrf	23	;volatile
  2112                           
  2113                           ;main.c: 134: T2CON = 0X00;
  2114  0326  0192               	clrf	18	;volatile
  2115                           
  2116                           ;main.c: 136: currentLevel = 2;
  2117  0327  3002               	movlw	2
  2118  0328  00F9               	movwf	_currentLevel
  2119                           
  2120                           ;main.c: 137: setLedOn(5);
  2121  0329  3005               	movlw	5
  2122  032A  21D1               	fcall	_setLedOn
  2123                           
  2124                           ;main.c: 138: PORTA|=(1<<0);
  2125  032B  1405               	bsf	5,0	;volatile
  2126                           
  2127                           ;main.c: 140: TRISC&=~(1<<2);
  2128  032C  1683               	bsf	3,5	;RP0=1, select bank1
  2129  032D  1107               	bcf	7,2	;volatile
  2130                           
  2131                           ;main.c: 141: PORTC&=~(1<<2);
  2132  032E  1283               	bcf	3,5	;RP0=0, select bank0
  2133  032F  1107               	bcf	7,2	;volatile
  2134                           
  2135                           ;main.c: 142: TRISA&=~(1<<2);
  2136  0330  1683               	bsf	3,5	;RP0=1, select bank1
  2137  0331  1105               	bcf	5,2	;volatile
  2138                           
  2139                           ;main.c: 143: PORTA&=~(1<<2);
  2140  0332  1283               	bcf	3,5	;RP0=0, select bank0
  2141  0333  1105               	bcf	5,2	;volatile
  2142                           
  2143                           ;main.c: 144: fan_check_time = 0;
  2144  0334  01A8               	clrf	_fan_check_time
  2145  0335  01A9               	clrf	_fan_check_time+1
  2146                           
  2147                           ;main.c: 145: FAN_STATUS = 0;
  2148  0336  01F8               	clrf	_FAN_STATUS
  2149                           
  2150                           ;main.c: 147: if (((PORTB) >> (2)&1) == 0) {
  2151  0337  0806               	movf	6,w	;volatile
  2152  0338  00F5               	movwf	??_closeFan
  2153  0339  1003               	clrc
  2154  033A  0CF5               	rrf	??_closeFan,f
  2155  033B  1003               	clrc
  2156  033C  0CF5               	rrf	??_closeFan,f
  2157  033D  1875               	btfsc	??_closeFan,0
  2158  033E  0008               	return
  2159                           
  2160                           ;main.c: 148: Sleep_Mode();
  2161  033F  2A5D               	ljmp	l3416
  2162  0340                     __end_of_closeFan:	
  2163                           
  2164                           	psect	text14
  2165  025D                     __ptext14:	
  2166 ;; *************** function _Sleep_Mode *****************
  2167 ;; Defined at:
  2168 ;;		line 345 in file "E:\project\project0508\scm\uf166fan\main.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;		None
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;		None
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      void 
  2175 ;; Registers used:
  2176 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 300/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMMON   BANK0   BANK1
  2182 ;;      Params:         0       0       0
  2183 ;;      Locals:         0       0       0
  2184 ;;      Temps:          0       0       0
  2185 ;;      Totals:         0       0       0
  2186 ;;Total ram usage:        0 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    4
  2189 ;; This function calls:
  2190 ;;		_setLedOn
  2191 ;; This function is called by:
  2192 ;;		_closeFan
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           
  2197                           ;psect for function _Sleep_Mode
  2198  025D                     _Sleep_Mode:	
  2199  025D                     l3416:	
  2200                           ;incstack = 0
  2201                           ; Regs used in _Sleep_Mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2202                           
  2203                           
  2204                           ;main.c: 346: INTCON = 0;
  2205  025D  018B               	clrf	11	;volatile
  2206                           
  2207                           ;main.c: 348: OPTION_REG = 0;
  2208  025E  1683               	bsf	3,5	;RP0=1, select bank1
  2209  025F  0181               	clrf	1	;volatile
  2210                           
  2211                           ;main.c: 350: TRISA = 0B00000000;
  2212  0260  0185               	clrf	5	;volatile
  2213                           
  2214                           ;main.c: 351: PORTA = 0B01000001;
  2215  0261  3041               	movlw	65
  2216  0262  1283               	bcf	3,5	;RP0=0, select bank0
  2217  0263  0085               	movwf	5	;volatile
  2218                           
  2219                           ;main.c: 352: WPUA = 0B00000000;
  2220  0264  1683               	bsf	3,5	;RP0=1, select bank3
  2221  0265  1703               	bsf	3,6	;RP1=1, select bank3
  2222  0266  018E               	clrf	14	;volatile
  2223                           
  2224                           ;main.c: 354: TRISB = 0B00100100;
  2225  0267  3024               	movlw	36
  2226  0268  1303               	bcf	3,6	;RP1=0, select bank1
  2227  0269  0086               	movwf	6	;volatile
  2228                           
  2229                           ;main.c: 355: PORTB = 0B01000000;
  2230  026A  3040               	movlw	64
  2231  026B  1283               	bcf	3,5	;RP0=0, select bank0
  2232  026C  0086               	movwf	6	;volatile
  2233                           
  2234                           ;main.c: 357: TRISC = 0B00000000;
  2235  026D  1683               	bsf	3,5	;RP0=1, select bank1
  2236  026E  0187               	clrf	7	;volatile
  2237                           
  2238                           ;main.c: 358: PORTC = 0B00000011;
  2239  026F  3003               	movlw	3
  2240  0270  1283               	bcf	3,5	;RP0=0, select bank0
  2241  0271  0087               	movwf	7	;volatile
  2242                           
  2243                           ;main.c: 359: setLedOn(5);
  2244  0272  3005               	movlw	5
  2245  0273  21D1               	fcall	_setLedOn
  2246                           
  2247                           ;main.c: 360: WPUB = 0B00100000;
  2248  0274  3020               	movlw	32
  2249  0275  1683               	bsf	3,5	;RP0=1, select bank1
  2250  0276  0095               	movwf	21	;volatile
  2251                           
  2252                           ;main.c: 363: IOCB = 0B00100100;
  2253  0277  3024               	movlw	36
  2254  0278  0096               	movwf	22	;volatile
  2255                           
  2256                           ;main.c: 364: RBIE = 1;
  2257  0279  158B               	bsf	11,3	;volatile
  2258                           
  2259                           ;main.c: 365: GIE = 1;
  2260  027A  178B               	bsf	11,7	;volatile
  2261                           
  2262                           ;main.c: 367: ADCON0 = 0;
  2263  027B  1283               	bcf	3,5	;RP0=0, select bank0
  2264  027C  019F               	clrf	31	;volatile
  2265                           
  2266                           ;main.c: 369: OSCCON = 0X70;
  2267  027D  3070               	movlw	112
  2268  027E  1683               	bsf	3,5	;RP0=1, select bank1
  2269  027F  008F               	movwf	15	;volatile
  2270                           
  2271                           ;main.c: 371: PORTB;
  2272  0280  1283               	bcf	3,5	;RP0=0, select bank0
  2273  0281  0806               	movf	6,w	;volatile
  2274  0282  0064               	clrwdt	;# 
  2275  0283  0063               	sleep	;# 
  2276  0284  0000               	nop	;# 
  2277  0285  0008               	return
  2278  0286                     __end_of_Sleep_Mode:	
  2279                           
  2280                           	psect	text15
  2281  01D1                     __ptext15:	
  2282 ;; *************** function _setLedOn *****************
  2283 ;; Defined at:
  2284 ;;		line 185 in file "E:\project\project0508\scm\uf166fan\main.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;  ledIndex        1    wreg     unsigned char 
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;  ledIndex        1    4[COMMON] unsigned char 
  2289 ;; Return value:  Size  Location     Type
  2290 ;;                  1    wreg      void 
  2291 ;; Registers used:
  2292 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2293 ;; Tracked objects:
  2294 ;;		On entry : 300/0
  2295 ;;		On exit  : 300/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMMON   BANK0   BANK1
  2298 ;;      Params:         0       0       0
  2299 ;;      Locals:         1       0       0
  2300 ;;      Temps:          0       0       0
  2301 ;;      Totals:         1       0       0
  2302 ;;Total ram usage:        1 bytes
  2303 ;; Hardware stack levels used:    1
  2304 ;; Hardware stack levels required when called:    3
  2305 ;; This function calls:
  2306 ;;		Nothing
  2307 ;; This function is called by:
  2308 ;;		_setFanLevel
  2309 ;;		_closeFan
  2310 ;;		_Sleep_Mode
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           
  2315                           ;psect for function _setLedOn
  2316  01D1                     _setLedOn:	
  2317                           
  2318                           ;incstack = 0
  2319                           ; Regs used in _setLedOn: [wreg-fsr0h+status,2+status,0]
  2320                           ;setLedOn@ledIndex stored from wreg
  2321  01D1  00F4               	movwf	setLedOn@ledIndex
  2322                           
  2323                           ;main.c: 186: switch(ledIndex) {
  2324  01D2  29EE               	goto	l3398
  2325  01D3                     l626:	
  2326                           ;main.c: 187: case 1:
  2327                           
  2328                           
  2329                           ;main.c: 189: TRISC&=~(1<<1);
  2330                           
  2331                           ;main.c: 190: TRISA|=(1<<7);
  2332                           
  2333                           ;main.c: 191: TRISC&=~(1<<0);
  2334                           
  2335                           ;main.c: 192: PORTA&=~(1<<7);
  2336  01D3  21FD               	fcall	PL6	;call to abstracted procedure
  2337                           
  2338                           ;main.c: 193: PORTC|=(1<<0);
  2339  01D4  1407               	bsf	7,0	;volatile
  2340                           
  2341                           ;main.c: 194: PORTC&=~(1<<1);
  2342  01D5  1087               	bcf	7,1	;volatile
  2343                           
  2344                           ;main.c: 195: break;
  2345  01D6  0008               	return
  2346  01D7                     l628:	
  2347                           ;main.c: 196: case 2:
  2348                           
  2349                           
  2350                           ;main.c: 197: TRISC&=~(1<<1);
  2351                           
  2352                           ;main.c: 198: TRISA|=(1<<7);
  2353                           
  2354                           ;main.c: 199: TRISC&=~(1<<0);
  2355                           
  2356                           ;main.c: 200: PORTA&=~(1<<7);
  2357  01D7  21FD               	fcall	PL6	;call to abstracted procedure
  2358                           
  2359                           ;main.c: 201: PORTC&=~(1<<0);
  2360  01D8  1007               	bcf	7,0	;volatile
  2361                           
  2362                           ;main.c: 202: PORTC|=(1<<1);
  2363  01D9  1487               	bsf	7,1	;volatile
  2364                           
  2365                           ;main.c: 203: break;
  2366  01DA  0008               	return
  2367  01DB                     l629:	
  2368                           ;main.c: 204: case 3:
  2369                           
  2370                           
  2371                           ;main.c: 206: TRISC|=(1<<0);
  2372                           
  2373                           ;main.c: 207: TRISA&=~(1<<7);
  2374                           
  2375                           ;main.c: 208: TRISC&=~(1<<1);
  2376                           
  2377                           ;main.c: 209: PORTA|=(1<<7);
  2378  01DB  2204               	fcall	PL8	;call to abstracted procedure
  2379  01DC  1785               	bsf	5,7	;volatile
  2380                           
  2381                           ;main.c: 210: PORTC&=~(1<<0);
  2382  01DD  1007               	bcf	7,0	;volatile
  2383                           
  2384                           ;main.c: 211: PORTC&=~(1<<1);
  2385  01DE  1087               	bcf	7,1	;volatile
  2386                           
  2387                           ;main.c: 212: break;
  2388  01DF  0008               	return
  2389  01E0                     l630:	
  2390                           ;main.c: 213: case 4:
  2391                           
  2392                           
  2393                           ;main.c: 214: TRISC|=(1<<0);
  2394                           
  2395                           ;main.c: 215: TRISA&=~(1<<7);
  2396                           
  2397                           ;main.c: 216: TRISC&=~(1<<1);
  2398                           
  2399                           ;main.c: 217: PORTA&=~(1<<7);
  2400  01E0  2204               	fcall	PL8	;call to abstracted procedure
  2401  01E1  1385               	bcf	5,7	;volatile
  2402                           
  2403                           ;main.c: 218: PORTC|=(1<<0);
  2404  01E2  1407               	bsf	7,0	;volatile
  2405                           
  2406                           ;main.c: 219: PORTC|=(1<<1);
  2407  01E3  1487               	bsf	7,1	;volatile
  2408                           
  2409                           ;main.c: 220: break;
  2410  01E4  0008               	return
  2411  01E5                     l631:	
  2412                           ;main.c: 221: case 5:
  2413                           
  2414                           
  2415                           ;main.c: 223: TRISC|=(1<<0);
  2416  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  2417  01E6  1407               	bsf	7,0	;volatile
  2418                           
  2419                           ;main.c: 224: TRISA|=(1<<7);
  2420  01E7  1785               	bsf	5,7	;volatile
  2421                           
  2422                           ;main.c: 225: TRISC|=(1<<1);
  2423  01E8  1487               	bsf	7,1	;volatile
  2424                           
  2425                           ;main.c: 226: PORTA|=(1<<7);
  2426  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  2427  01EA  1785               	bsf	5,7	;volatile
  2428                           
  2429                           ;main.c: 227: PORTC|=(1<<0);
  2430  01EB  1407               	bsf	7,0	;volatile
  2431                           
  2432                           ;main.c: 228: PORTC|=(1<<1);
  2433  01EC  1487               	bsf	7,1	;volatile
  2434                           
  2435                           ;main.c: 229: break;
  2436  01ED  0008               	return
  2437  01EE                     l3398:	
  2438  01EE  0874               	movf	setLedOn@ledIndex,w
  2439                           
  2440                           ; Switch size 1, requested type "space"
  2441                           ; Number of cases is 5, Range of values is 1 to 5
  2442                           ; switch strategies available:
  2443                           ; Name         Instructions Cycles
  2444                           ; direct_byte           14     9 (fixed)
  2445                           ; simple_byte           16     9 (average)
  2446                           ; jumptable            263     9 (fixed)
  2447                           ;	Chosen strategy is direct_byte
  2448  01EF  3EFF               	addlw	-1
  2449  01F0  1C03               	skipc
  2450  01F1  0008               	return
  2451  01F2  0084               	movwf	4
  2452  01F3  3005               	movlw	5
  2453  01F4  0204               	subwf	4,w
  2454  01F5  1803               	skipnc
  2455  01F6  0008               	return
  2456  01F7  3004               	movlw	high S3880
  2457  01F8  008A               	movwf	10
  2458  01F9  3000               	movlw	low S3880
  2459  01FA  0704               	addwf	4,w
  2460  01FB  0082               	movwf	2
  2461  01FC  0008               	return
  2462  01FD                     __end_of_setLedOn:	
  2463  01FD                     PL6:	
  2464  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  2465  01FE  1087               	bcf	7,1	;volatile
  2466  01FF  1785               	bsf	5,7	;volatile
  2467  0200  1007               	bcf	7,0	;volatile
  2468  0201  1283               	bcf	3,5	;RP0=0, select bank0
  2469  0202  1385               	bcf	5,7	;volatile
  2470  0203  0008               	return
  2471  0204                     __end_ofPL6:	
  2472  0204                     PL8:	
  2473  0204  1683               	bsf	3,5	;RP0=1, select bank1
  2474  0205  1407               	bsf	7,0	;volatile
  2475  0206  1385               	bcf	5,7	;volatile
  2476  0207  1087               	bcf	7,1	;volatile
  2477  0208  1283               	bcf	3,5	;RP0=0, select bank0
  2478  0209  0008               	return
  2479  020A                     __end_ofPL8:	
  2480                           
  2481                           	psect	swtext2
  2482  0400                     __pswtext2:	
  2483  0400                     S3880:	
  2484  0400  29D3               	ljmp	l626
  2485  0401  29D7               	ljmp	l628
  2486  0402  29DB               	ljmp	l629
  2487  0403  29E0               	ljmp	l630
  2488  0404  29E5               	ljmp	l631
  2489                           
  2490                           	psect	text16
  2491  02AA                     __ptext16:	
  2492 ;; *************** function _Init_Config *****************
  2493 ;; Defined at:
  2494 ;;		line 314 in file "E:\project\project0508\scm\uf166fan\main.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;		None
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;		None
  2499 ;; Return value:  Size  Location     Type
  2500 ;;                  1    wreg      void 
  2501 ;; Registers used:
  2502 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2503 ;; Tracked objects:
  2504 ;;		On entry : B00/0
  2505 ;;		On exit  : 300/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMMON   BANK0   BANK1
  2508 ;;      Params:         0       0       0
  2509 ;;      Locals:         0       0       0
  2510 ;;      Temps:          0       0       0
  2511 ;;      Totals:         0       0       0
  2512 ;;Total ram usage:        0 bytes
  2513 ;; Hardware stack levels used:    1
  2514 ;; Hardware stack levels required when called:    4
  2515 ;; This function calls:
  2516 ;;		_Init_GPIO
  2517 ;;		_Init_Interupt
  2518 ;;		_Init_PWM
  2519 ;;		_Init_System
  2520 ;;		_resetKey
  2521 ;; This function is called by:
  2522 ;;		_main
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526                           
  2527                           ;psect for function _Init_Config
  2528  02AA                     _Init_Config:	
  2529                           
  2530                           ;main.c: 315: if(FAN_STATUS == 1)
  2531                           
  2532                           ;incstack = 0
  2533                           ; Regs used in _Init_Config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2534  02AA  0B78               	decfsz	_FAN_STATUS,w
  2535  02AB  2AAD               	goto	l3762
  2536  02AC  0008               	return
  2537  02AD                     l3762:	
  2538                           
  2539                           ;main.c: 318: }
  2540                           ;main.c: 319: Init_System();
  2541  02AD  23D1               	fcall	_Init_System
  2542                           
  2543                           ;main.c: 320: Init_GPIO();
  2544  02AE  2356               	fcall	_Init_GPIO
  2545                           
  2546                           ;main.c: 321: Init_Interupt();
  2547  02AF  23F1               	fcall	_Init_Interupt
  2548                           
  2549                           ;main.c: 322: Init_PWM();
  2550  02B0  238A               	fcall	_Init_PWM
  2551                           
  2552                           ;main.c: 324: IOCB = 0x04;
  2553  02B1  3004               	movlw	4
  2554  02B2  1683               	bsf	3,5	;RP0=1, select bank1
  2555  02B3  0096               	movwf	22	;volatile
  2556                           
  2557                           ;main.c: 325: TMR0 = 155;
  2558  02B4  309B               	movlw	155
  2559  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  2560  02B6  0081               	movwf	1	;volatile
  2561                           
  2562                           ;main.c: 326: TO = 0;
  2563  02B7  1203               	bcf	3,4	;volatile
  2564                           
  2565                           ;main.c: 329: key1.key_index = 5;
  2566  02B8  3005               	movlw	5
  2567  02B9  00C6               	movwf	_key1+6
  2568                           
  2569                           ;main.c: 331: key2.key_index = 4;
  2570  02BA  3004               	movlw	4
  2571  02BB  00BF               	movwf	_key2+6
  2572                           
  2573                           ;main.c: 333: key3.key_index = 3;
  2574  02BC  3003               	movlw	3
  2575  02BD  00B8               	movwf	_key3+6
  2576                           
  2577                           ;main.c: 334: resetKey(&key1);
  2578  02BE  3040               	movlw	(low (_key1| 0))& (0+255)
  2579  02BF  237A               	fcall	_resetKey
  2580                           
  2581                           ;main.c: 335: resetKey(&key2);
  2582  02C0  3039               	movlw	(low (_key2| 0))& (0+255)
  2583  02C1  237A               	fcall	_resetKey
  2584                           
  2585                           ;main.c: 336: resetKey(&key3);
  2586  02C2  3032               	movlw	(low (_key3| 0))& (0+255)
  2587  02C3  237A               	fcall	_resetKey
  2588                           
  2589                           ;main.c: 338: TRISA = 0;
  2590  02C4  1683               	bsf	3,5	;RP0=1, select bank1
  2591  02C5  1303               	bcf	3,6	;RP1=0, select bank1
  2592  02C6  0185               	clrf	5	;volatile
  2593                           
  2594                           ;main.c: 339: TRISB = 0x7E;
  2595  02C7  307E               	movlw	126
  2596  02C8  0086               	movwf	6	;volatile
  2597                           
  2598                           ;main.c: 340: TRISC = 0;
  2599  02C9  0187               	clrf	7	;volatile
  2600                           
  2601                           ;main.c: 341: lowVTime = 0;
  2602  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  2603  02CB  01B1               	clrf	_lowVTime
  2604                           
  2605                           ;main.c: 342: Init_PWM();
  2606  02CC  2B8A               	ljmp	l3404
  2607  02CD                     __end_of_Init_Config:	
  2608                           
  2609                           	psect	text17
  2610  037A                     __ptext17:	
  2611 ;; *************** function _resetKey *****************
  2612 ;; Defined at:
  2613 ;;		line 100 in file "E:\project\project0508\scm\uf166fan\scankey.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  key             1    wreg     PTR struct Keys
  2616 ;;		 -> key3(7), key2(7), key1(7), 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;  key             1    4[COMMON] PTR struct Keys
  2619 ;;		 -> key3(7), key2(7), key1(7), 
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 800/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMMON   BANK0   BANK1
  2629 ;;      Params:         0       0       0
  2630 ;;      Locals:         1       0       0
  2631 ;;      Temps:          0       0       0
  2632 ;;      Totals:         1       0       0
  2633 ;;Total ram usage:        1 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:    3
  2636 ;; This function calls:
  2637 ;;		Nothing
  2638 ;; This function is called by:
  2639 ;;		_Init_Config
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643                           
  2644                           ;psect for function _resetKey
  2645  037A                     _resetKey:	
  2646                           
  2647                           ;incstack = 0
  2648                           ; Regs used in _resetKey: [wreg-fsr0h+status,2+status,0]
  2649                           ;resetKey@key stored from wreg
  2650  037A  00F4               	movwf	resetKey@key
  2651                           
  2652                           ;scankey.c: 101: key->key_timer_cnt1 = key->key_timer_cnt2 = key->key_state_buffer1 = ke
      +                          y->key_state_buffer2 = 0;
  2653  037B  3E03               	addlw	3
  2654  037C  0084               	movwf	4
  2655  037D  1383               	bcf	3,7	;select IRP bank0
  2656  037E  0180               	clrf	0
  2657  037F  0A74               	incf	resetKey@key,w
  2658  0380  0084               	movwf	4
  2659  0381  0180               	clrf	0
  2660  0382  0874               	movf	resetKey@key,w
  2661  0383  3E02               	addlw	2
  2662  0384  0084               	movwf	4
  2663  0385  0180               	clrf	0
  2664  0386  0874               	movf	resetKey@key,w
  2665  0387  0084               	movwf	4
  2666  0388  0180               	clrf	0
  2667  0389  0008               	return
  2668  038A                     __end_of_resetKey:	
  2669                           
  2670                           	psect	text18
  2671  03D1                     __ptext18:	
  2672 ;; *************** function _Init_System *****************
  2673 ;; Defined at:
  2674 ;;		line 3 in file "E:\project\project0508\scm\uf166fan\init.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;		None
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;		None
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  1    wreg      void 
  2681 ;; Registers used:
  2682 ;;		wreg, status,2
  2683 ;; Tracked objects:
  2684 ;;		On entry : B00/0
  2685 ;;		On exit  : 300/100
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMMON   BANK0   BANK1
  2688 ;;      Params:         0       0       0
  2689 ;;      Locals:         0       0       0
  2690 ;;      Temps:          0       0       0
  2691 ;;      Totals:         0       0       0
  2692 ;;Total ram usage:        0 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    3
  2695 ;; This function calls:
  2696 ;;		Nothing
  2697 ;; This function is called by:
  2698 ;;		_Init_Config
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           
  2703                           ;psect for function _Init_System
  2704  03D1                     _Init_System:	
  2705                           
  2706                           ;incstack = 0
  2707                           ; Regs used in _Init_System: [wreg+status,2]
  2708  03D1  0000               	nop	;# 
  2709  03D2  0064               	clrwdt	;# 
  2710                           
  2711                           ;init.c: 6: INTCON = 0;
  2712  03D3  018B               	clrf	11	;volatile
  2713                           
  2714                           ;init.c: 7: OSCCON = 0X71;
  2715  03D4  3071               	movlw	113
  2716  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  2717  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  2718  03D7  008F               	movwf	15	;volatile
  2719                           
  2720                           ;init.c: 8: OPTION_REG = 0x00;
  2721  03D8  0181               	clrf	1	;volatile
  2722  03D9  0008               	return
  2723  03DA                     __end_of_Init_System:	
  2724                           
  2725                           	psect	text19
  2726  038A                     __ptext19:	
  2727 ;; *************** function _Init_PWM *****************
  2728 ;; Defined at:
  2729 ;;		line 76 in file "E:\project\project0508\scm\uf166fan\main.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;		None
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;		None
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  1    wreg      void 
  2736 ;; Registers used:
  2737 ;;		wreg, status,2
  2738 ;; Tracked objects:
  2739 ;;		On entry : 300/0
  2740 ;;		On exit  : 300/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMMON   BANK0   BANK1
  2743 ;;      Params:         0       0       0
  2744 ;;      Locals:         0       0       0
  2745 ;;      Temps:          0       0       0
  2746 ;;      Totals:         0       0       0
  2747 ;;Total ram usage:        0 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; Hardware stack levels required when called:    3
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_setFanLevel
  2754 ;;		_Init_Config
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758                           
  2759                           ;psect for function _Init_PWM
  2760  038A                     _Init_PWM:	
  2761  038A                     l3404:	
  2762                           ;incstack = 0
  2763                           ; Regs used in _Init_PWM: [wreg+status,2]
  2764                           
  2765                           
  2766                           ;main.c: 77: CCP1CON = 0x0F;
  2767  038A  300F               	movlw	15
  2768  038B  0097               	movwf	23	;volatile
  2769                           
  2770                           ;main.c: 78: T2CON = 0;
  2771  038C  0192               	clrf	18	;volatile
  2772                           
  2773                           ;main.c: 79: PR2 = 7;
  2774  038D  3007               	movlw	7
  2775  038E  1683               	bsf	3,5	;RP0=1, select bank1
  2776  038F  0092               	movwf	18	;volatile
  2777                           
  2778                           ;main.c: 81: CCPR1L = 0;
  2779  0390  1283               	bcf	3,5	;RP0=0, select bank0
  2780  0391  0195               	clrf	21	;volatile
  2781                           
  2782                           ;main.c: 82: TMR2IF = 0;
  2783  0392  108C               	bcf	12,1	;volatile
  2784                           
  2785                           ;main.c: 83: T2CON = 0;
  2786  0393  0192               	clrf	18	;volatile
  2787                           
  2788                           ;main.c: 85: TRISC&=~(1<<2);
  2789  0394  1683               	bsf	3,5	;RP0=1, select bank1
  2790  0395  1107               	bcf	7,2	;volatile
  2791                           
  2792                           ;main.c: 86: T2CON = 0X04;
  2793  0396  3004               	movlw	4
  2794  0397  1283               	bcf	3,5	;RP0=0, select bank0
  2795  0398  0092               	movwf	18	;volatile
  2796  0399  0008               	return
  2797  039A                     __end_of_Init_PWM:	
  2798                           
  2799                           	psect	text20
  2800  03F1                     __ptext20:	
  2801 ;; *************** function _Init_Interupt *****************
  2802 ;; Defined at:
  2803 ;;		line 27 in file "E:\project\project0508\scm\uf166fan\init.c"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;		None
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;		None
  2808 ;; Return value:  Size  Location     Type
  2809 ;;                  1    wreg      void 
  2810 ;; Registers used:
  2811 ;;		wreg, status,2
  2812 ;; Tracked objects:
  2813 ;;		On entry : 300/100
  2814 ;;		On exit  : 300/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMMON   BANK0   BANK1
  2817 ;;      Params:         0       0       0
  2818 ;;      Locals:         0       0       0
  2819 ;;      Temps:          0       0       0
  2820 ;;      Totals:         0       0       0
  2821 ;;Total ram usage:        0 bytes
  2822 ;; Hardware stack levels used:    1
  2823 ;; Hardware stack levels required when called:    3
  2824 ;; This function calls:
  2825 ;;		Nothing
  2826 ;; This function is called by:
  2827 ;;		_Init_Config
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           
  2832                           ;psect for function _Init_Interupt
  2833  03F1                     _Init_Interupt:	
  2834                           
  2835                           ;init.c: 28: OPTION_REG = 0x00;
  2836                           
  2837                           ;incstack = 0
  2838                           ; Regs used in _Init_Interupt: [wreg+status,2]
  2839  03F1  0181               	clrf	1	;volatile
  2840                           
  2841                           ;init.c: 29: TMR0 = 0;
  2842  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  2843  03F3  0181               	clrf	1	;volatile
  2844                           
  2845                           ;init.c: 30: INTCON = 0xE0;
  2846  03F4  30E0               	movlw	224
  2847  03F5  008B               	movwf	11	;volatile
  2848  03F6  0008               	return
  2849  03F7                     __end_of_Init_Interupt:	
  2850                           
  2851                           	psect	text21
  2852  0356                     __ptext21:	
  2853 ;; *************** function _Init_GPIO *****************
  2854 ;; Defined at:
  2855 ;;		line 13 in file "E:\project\project0508\scm\uf166fan\init.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;		None
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;		None
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		wreg, status,2
  2864 ;; Tracked objects:
  2865 ;;		On entry : 300/100
  2866 ;;		On exit  : 300/100
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMMON   BANK0   BANK1
  2869 ;;      Params:         0       0       0
  2870 ;;      Locals:         0       0       0
  2871 ;;      Temps:          0       0       0
  2872 ;;      Totals:         0       0       0
  2873 ;;Total ram usage:        0 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    3
  2876 ;; This function calls:
  2877 ;;		Nothing
  2878 ;; This function is called by:
  2879 ;;		_Init_Config
  2880 ;; This function uses a non-reentrant model
  2881 ;;
  2882                           
  2883                           
  2884                           ;psect for function _Init_GPIO
  2885  0356                     _Init_GPIO:	
  2886                           
  2887                           ;init.c: 14: TRISA = 0;
  2888                           
  2889                           ;incstack = 0
  2890                           ; Regs used in _Init_GPIO: [wreg+status,2]
  2891  0356  0185               	clrf	5	;volatile
  2892                           
  2893                           ;init.c: 15: TRISB = 0;
  2894  0357  0186               	clrf	6	;volatile
  2895                           
  2896                           ;init.c: 16: TRISC = 0;
  2897  0358  0187               	clrf	7	;volatile
  2898                           
  2899                           ;init.c: 17: WPUA = 0xFF;
  2900  0359  30FF               	movlw	255
  2901  035A  1703               	bsf	3,6	;RP1=1, select bank3
  2902  035B  008E               	movwf	14	;volatile
  2903                           
  2904                           ;init.c: 18: WPUB = 0xFF;
  2905  035C  1303               	bcf	3,6	;RP1=0, select bank1
  2906  035D  0095               	movwf	21	;volatile
  2907                           
  2908                           ;init.c: 19: WPUC = 0xFF;
  2909  035E  1703               	bsf	3,6	;RP1=1, select bank3
  2910  035F  008F               	movwf	15	;volatile
  2911                           
  2912                           ;init.c: 20: PORTA = 0xFF;
  2913  0360  1283               	bcf	3,5	;RP0=0, select bank0
  2914  0361  1303               	bcf	3,6	;RP1=0, select bank0
  2915  0362  0085               	movwf	5	;volatile
  2916                           
  2917                           ;init.c: 21: PORTB = 0xFF;
  2918  0363  0086               	movwf	6	;volatile
  2919                           
  2920                           ;init.c: 22: PORTC = 0xFF;
  2921  0364  0087               	movwf	7	;volatile
  2922                           
  2923                           ;init.c: 23: IOCB = 0x00;
  2924  0365  1683               	bsf	3,5	;RP0=1, select bank1
  2925  0366  0196               	clrf	22	;volatile
  2926  0367  0008               	return
  2927  0368                     __end_of_Init_GPIO:	
  2928                           
  2929                           	psect	text22
  2930  0340                     __ptext22:	
  2931 ;; *************** function _Timer0_Isr *****************
  2932 ;; Defined at:
  2933 ;;		line 395 in file "E:\project\project0508\scm\uf166fan\main.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;		None
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;		None
  2938 ;; Return value:  Size  Location     Type
  2939 ;;                  1    wreg      void 
  2940 ;; Registers used:
  2941 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMMON   BANK0   BANK1
  2947 ;;      Params:         0       0       0
  2948 ;;      Locals:         0       0       0
  2949 ;;      Temps:          3       0       0
  2950 ;;      Totals:         3       0       0
  2951 ;;Total ram usage:        3 bytes
  2952 ;; Hardware stack levels used:    1
  2953 ;; Hardware stack levels required when called:    2
  2954 ;; This function calls:
  2955 ;;		i1_Init_Config
  2956 ;; This function is called by:
  2957 ;;		Interrupt level 1
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           
  2962                           ;psect for function _Timer0_Isr
  2963  0340                     _Timer0_Isr:	
  2964                           
  2965                           ;main.c: 396: if (T0IF) {
  2966  0340  1D0B               	btfss	11,2	;volatile
  2967  0341  2B49               	goto	i1l3338
  2968                           
  2969                           ;main.c: 398: TMR0 += 155;
  2970  0342  309B               	movlw	155
  2971  0343  1283               	bcf	3,5	;RP0=0, select bank0
  2972  0344  1303               	bcf	3,6	;RP1=0, select bank0
  2973  0345  0781               	addwf	1,f	;volatile
  2974                           
  2975                           ;main.c: 401: T0IF = 0;
  2976  0346  110B               	bcf	11,2	;volatile
  2977                           
  2978                           ;main.c: 402: time0Flag = 1;
  2979  0347  01F7               	clrf	_time0Flag
  2980  0348  0AF7               	incf	_time0Flag,f
  2981  0349                     i1l3338:	
  2982                           
  2983                           ;main.c: 404: }
  2984                           ;main.c: 406: if (RBIF) {
  2985  0349  1C0B               	btfss	11,0	;volatile
  2986  034A  2B4D               	goto	i1l671
  2987                           
  2988                           ;main.c: 407: RBIF = 0;
  2989  034B  100B               	bcf	11,0	;volatile
  2990                           
  2991                           ;main.c: 408: Init_Config();
  2992  034C  2286               	fcall	i1_Init_Config
  2993  034D                     i1l671:	
  2994  034D  0873               	movf	??_Timer0_Isr+2,w
  2995  034E  008A               	movwf	10
  2996  034F  0872               	movf	??_Timer0_Isr+1,w
  2997  0350  0084               	movwf	4
  2998  0351  0E71               	swapf	??_Timer0_Isr^(0+-128),w
  2999  0352  0083               	movwf	3
  3000  0353  0EFE               	swapf	126,f
  3001  0354  0E7E               	swapf	126,w
  3002  0355  0009               	retfie
  3003  0356                     __end_of_Timer0_Isr:	
  3004                           
  3005                           	psect	intentry
  3006  0004                     __pintentry:	
  3007                           ;incstack = 0
  3008                           ; Regs used in _Timer0_Isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3009                           
  3010  0004                     interrupt_function:	
  3011  007E                     saved_w	set	btemp
  3012  0004  00FE               	movwf	btemp
  3013  0005  0E03               	swapf	3,w
  3014  0006  00F1               	movwf	??_Timer0_Isr
  3015  0007  0804               	movf	4,w
  3016  0008  00F2               	movwf	??_Timer0_Isr+1
  3017  0009  080A               	movf	10,w
  3018  000A  00F3               	movwf	??_Timer0_Isr+2
  3019  000B  2B40               	ljmp	_Timer0_Isr
  3020                           
  3021                           	psect	text23
  3022  0286                     __ptext23:	
  3023 ;; *************** function i1_Init_Config *****************
  3024 ;; Defined at:
  3025 ;;		line 314 in file "E:\project\project0508\scm\uf166fan\main.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;		None
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;		None
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  1    wreg      void 
  3032 ;; Registers used:
  3033 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMMON   BANK0   BANK1
  3039 ;;      Params:         0       0       0
  3040 ;;      Locals:         0       0       0
  3041 ;;      Temps:          0       0       0
  3042 ;;      Totals:         0       0       0
  3043 ;;Total ram usage:        0 bytes
  3044 ;; Hardware stack levels used:    1
  3045 ;; Hardware stack levels required when called:    1
  3046 ;; This function calls:
  3047 ;;		i1_Init_GPIO
  3048 ;;		i1_Init_Interupt
  3049 ;;		i1_Init_PWM
  3050 ;;		i1_Init_System
  3051 ;;		i1_resetKey
  3052 ;; This function is called by:
  3053 ;;		_Timer0_Isr
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           
  3058                           ;psect for function i1_Init_Config
  3059  0286                     i1_Init_Config:	
  3060                           
  3061                           ;main.c: 315: if(FAN_STATUS == 1)
  3062                           
  3063                           ;incstack = 0
  3064                           ; Regs used in i1_Init_Config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3065  0286  0B78               	decfsz	_FAN_STATUS,w
  3066  0287  2A89               	goto	i1l3268
  3067  0288  0008               	return
  3068  0289                     i1l3268:	
  3069                           
  3070                           ;main.c: 318: }
  3071                           ;main.c: 319: Init_System();
  3072  0289  23DA               	fcall	i1_Init_System
  3073                           
  3074                           ;main.c: 320: Init_GPIO();
  3075  028A  2368               	fcall	i1_Init_GPIO
  3076                           
  3077                           ;main.c: 321: Init_Interupt();
  3078  028B  23F7               	fcall	i1_Init_Interupt
  3079                           
  3080                           ;main.c: 322: Init_PWM();
  3081  028C  23AA               	fcall	i1_Init_PWM
  3082                           
  3083                           ;main.c: 324: IOCB = 0x04;
  3084  028D  3004               	movlw	4
  3085  028E  1683               	bsf	3,5	;RP0=1, select bank1
  3086  028F  0096               	movwf	22	;volatile
  3087                           
  3088                           ;main.c: 325: TMR0 = 155;
  3089  0290  309B               	movlw	155
  3090  0291  1283               	bcf	3,5	;RP0=0, select bank0
  3091  0292  0081               	movwf	1	;volatile
  3092                           
  3093                           ;main.c: 326: TO = 0;
  3094  0293  1203               	bcf	3,4	;volatile
  3095                           
  3096                           ;main.c: 329: key1.key_index = 5;
  3097  0294  3005               	movlw	5
  3098  0295  00C6               	movwf	_key1+6
  3099                           
  3100                           ;main.c: 331: key2.key_index = 4;
  3101  0296  3004               	movlw	4
  3102  0297  00BF               	movwf	_key2+6
  3103                           
  3104                           ;main.c: 333: key3.key_index = 3;
  3105  0298  3003               	movlw	3
  3106  0299  00B8               	movwf	_key3+6
  3107                           
  3108                           ;main.c: 334: resetKey(&key1);
  3109  029A  3040               	movlw	(low (_key1| 0))& (0+255)
  3110  029B  239A               	fcall	i1_resetKey
  3111                           
  3112                           ;main.c: 335: resetKey(&key2);
  3113  029C  3039               	movlw	(low (_key2| 0))& (0+255)
  3114  029D  239A               	fcall	i1_resetKey
  3115                           
  3116                           ;main.c: 336: resetKey(&key3);
  3117  029E  3032               	movlw	(low (_key3| 0))& (0+255)
  3118  029F  239A               	fcall	i1_resetKey
  3119                           
  3120                           ;main.c: 338: TRISA = 0;
  3121  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  3122  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  3123  02A2  0185               	clrf	5	;volatile
  3124                           
  3125                           ;main.c: 339: TRISB = 0x7E;
  3126  02A3  307E               	movlw	126
  3127  02A4  0086               	movwf	6	;volatile
  3128                           
  3129                           ;main.c: 340: TRISC = 0;
  3130  02A5  0187               	clrf	7	;volatile
  3131                           
  3132                           ;main.c: 341: lowVTime = 0;
  3133  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  3134  02A7  01B1               	clrf	_lowVTime
  3135                           
  3136                           ;main.c: 342: Init_PWM();
  3137  02A8  23AA               	fcall	i1_Init_PWM
  3138  02A9  0008               	return
  3139  02AA                     __end_ofi1_Init_Config:	
  3140                           
  3141                           	psect	text24
  3142  039A                     __ptext24:	
  3143 ;; *************** function i1_resetKey *****************
  3144 ;; Defined at:
  3145 ;;		line 100 in file "E:\project\project0508\scm\uf166fan\scankey.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;  key             1    wreg     PTR struct Keys
  3148 ;;		 -> key3(7), key2(7), key1(7), 
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  key             1    0[COMMON] PTR struct Keys
  3151 ;;		 -> key3(7), key2(7), key1(7), 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      void 
  3154 ;; Registers used:
  3155 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 800/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMMON   BANK0   BANK1
  3161 ;;      Params:         0       0       0
  3162 ;;      Locals:         1       0       0
  3163 ;;      Temps:          0       0       0
  3164 ;;      Totals:         1       0       0
  3165 ;;Total ram usage:        1 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; This function calls:
  3168 ;;		Nothing
  3169 ;; This function is called by:
  3170 ;;		i1_Init_Config
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           
  3175                           ;psect for function i1_resetKey
  3176  039A                     i1_resetKey:	
  3177                           
  3178                           ;incstack = 0
  3179                           ; Regs used in i1_resetKey: [wreg-fsr0h+status,2+status,0]
  3180                           ;i1resetKey@key stored from wreg
  3181  039A  00F0               	movwf	i1resetKey@key
  3182                           
  3183                           ;scankey.c: 101: key->key_timer_cnt1 = key->key_timer_cnt2 = key->key_state_buffer1 = ke
      +                          y->key_state_buffer2 = 0;
  3184  039B  3E03               	addlw	3
  3185  039C  0084               	movwf	4
  3186  039D  1383               	bcf	3,7	;select IRP bank0
  3187  039E  0180               	clrf	0
  3188  039F  0A70               	incf	i1resetKey@key,w
  3189  03A0  0084               	movwf	4
  3190  03A1  0180               	clrf	0
  3191  03A2  0870               	movf	i1resetKey@key,w
  3192  03A3  3E02               	addlw	2
  3193  03A4  0084               	movwf	4
  3194  03A5  0180               	clrf	0
  3195  03A6  0870               	movf	i1resetKey@key,w
  3196  03A7  0084               	movwf	4
  3197  03A8  0180               	clrf	0
  3198  03A9  0008               	return
  3199  03AA                     __end_ofi1_resetKey:	
  3200                           
  3201                           	psect	text25
  3202  03DA                     __ptext25:	
  3203 ;; *************** function i1_Init_System *****************
  3204 ;; Defined at:
  3205 ;;		line 3 in file "E:\project\project0508\scm\uf166fan\init.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;		None
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;		None
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  1    wreg      void 
  3212 ;; Registers used:
  3213 ;;		wreg, status,2
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 300/100
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMMON   BANK0   BANK1
  3219 ;;      Params:         0       0       0
  3220 ;;      Locals:         0       0       0
  3221 ;;      Temps:          0       0       0
  3222 ;;      Totals:         0       0       0
  3223 ;;Total ram usage:        0 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; This function calls:
  3226 ;;		Nothing
  3227 ;; This function is called by:
  3228 ;;		i1_Init_Config
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           
  3233                           ;psect for function i1_Init_System
  3234  03DA                     i1_Init_System:	
  3235                           
  3236                           ;incstack = 0
  3237                           ; Regs used in i1_Init_System: [wreg+status,2]
  3238  03DA  0000               	nop	;# 
  3239  03DB  0064               	clrwdt	;# 
  3240                           
  3241                           ;init.c: 6: INTCON = 0;
  3242  03DC  018B               	clrf	11	;volatile
  3243                           
  3244                           ;init.c: 7: OSCCON = 0X71;
  3245  03DD  3071               	movlw	113
  3246  03DE  1683               	bsf	3,5	;RP0=1, select bank1
  3247  03DF  1303               	bcf	3,6	;RP1=0, select bank1
  3248  03E0  008F               	movwf	15	;volatile
  3249                           
  3250                           ;init.c: 8: OPTION_REG = 0x00;
  3251  03E1  0181               	clrf	1	;volatile
  3252  03E2  0008               	return
  3253  03E3                     __end_ofi1_Init_System:	
  3254                           
  3255                           	psect	text26
  3256  03AA                     __ptext26:	
  3257 ;; *************** function i1_Init_PWM *****************
  3258 ;; Defined at:
  3259 ;;		line 76 in file "E:\project\project0508\scm\uf166fan\main.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;		None
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;		None
  3264 ;; Return value:  Size  Location     Type
  3265 ;;                  1    wreg      void 
  3266 ;; Registers used:
  3267 ;;		wreg, status,2
  3268 ;; Tracked objects:
  3269 ;;		On entry : 300/0
  3270 ;;		On exit  : 300/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMMON   BANK0   BANK1
  3273 ;;      Params:         0       0       0
  3274 ;;      Locals:         0       0       0
  3275 ;;      Temps:          0       0       0
  3276 ;;      Totals:         0       0       0
  3277 ;;Total ram usage:        0 bytes
  3278 ;; Hardware stack levels used:    1
  3279 ;; This function calls:
  3280 ;;		Nothing
  3281 ;; This function is called by:
  3282 ;;		i1_Init_Config
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           
  3287                           ;psect for function i1_Init_PWM
  3288  03AA                     i1_Init_PWM:	
  3289                           
  3290                           ;main.c: 77: CCP1CON = 0x0F;
  3291                           
  3292                           ;incstack = 0
  3293                           ; Regs used in i1_Init_PWM: [wreg+status,2]
  3294  03AA  300F               	movlw	15
  3295  03AB  0097               	movwf	23	;volatile
  3296                           
  3297                           ;main.c: 78: T2CON = 0;
  3298  03AC  0192               	clrf	18	;volatile
  3299                           
  3300                           ;main.c: 79: PR2 = 7;
  3301  03AD  3007               	movlw	7
  3302  03AE  1683               	bsf	3,5	;RP0=1, select bank1
  3303  03AF  0092               	movwf	18	;volatile
  3304                           
  3305                           ;main.c: 81: CCPR1L = 0;
  3306  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  3307  03B1  0195               	clrf	21	;volatile
  3308                           
  3309                           ;main.c: 82: TMR2IF = 0;
  3310  03B2  108C               	bcf	12,1	;volatile
  3311                           
  3312                           ;main.c: 83: T2CON = 0;
  3313  03B3  0192               	clrf	18	;volatile
  3314                           
  3315                           ;main.c: 85: TRISC&=~(1<<2);
  3316  03B4  1683               	bsf	3,5	;RP0=1, select bank1
  3317  03B5  1107               	bcf	7,2	;volatile
  3318                           
  3319                           ;main.c: 86: T2CON = 0X04;
  3320  03B6  3004               	movlw	4
  3321  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  3322  03B8  0092               	movwf	18	;volatile
  3323  03B9  0008               	return
  3324  03BA                     __end_ofi1_Init_PWM:	
  3325                           
  3326                           	psect	text27
  3327  03F7                     __ptext27:	
  3328 ;; *************** function i1_Init_Interupt *****************
  3329 ;; Defined at:
  3330 ;;		line 27 in file "E:\project\project0508\scm\uf166fan\init.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;		None
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;		None
  3335 ;; Return value:  Size  Location     Type
  3336 ;;                  1    wreg      void 
  3337 ;; Registers used:
  3338 ;;		wreg, status,2
  3339 ;; Tracked objects:
  3340 ;;		On entry : 300/100
  3341 ;;		On exit  : 300/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMMON   BANK0   BANK1
  3344 ;;      Params:         0       0       0
  3345 ;;      Locals:         0       0       0
  3346 ;;      Temps:          0       0       0
  3347 ;;      Totals:         0       0       0
  3348 ;;Total ram usage:        0 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; This function calls:
  3351 ;;		Nothing
  3352 ;; This function is called by:
  3353 ;;		i1_Init_Config
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           
  3358                           ;psect for function i1_Init_Interupt
  3359  03F7                     i1_Init_Interupt:	
  3360                           
  3361                           ;init.c: 28: OPTION_REG = 0x00;
  3362                           
  3363                           ;incstack = 0
  3364                           ; Regs used in i1_Init_Interupt: [wreg+status,2]
  3365  03F7  0181               	clrf	1	;volatile
  3366                           
  3367                           ;init.c: 29: TMR0 = 0;
  3368  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  3369  03F9  0181               	clrf	1	;volatile
  3370                           
  3371                           ;init.c: 30: INTCON = 0xE0;
  3372  03FA  30E0               	movlw	224
  3373  03FB  008B               	movwf	11	;volatile
  3374  03FC  0008               	return
  3375  03FD                     __end_ofi1_Init_Interupt:	
  3376                           
  3377                           	psect	text28
  3378  0368                     __ptext28:	
  3379 ;; *************** function i1_Init_GPIO *****************
  3380 ;; Defined at:
  3381 ;;		line 13 in file "E:\project\project0508\scm\uf166fan\init.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;		None
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;		None
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      void 
  3388 ;; Registers used:
  3389 ;;		wreg, status,2
  3390 ;; Tracked objects:
  3391 ;;		On entry : 300/100
  3392 ;;		On exit  : 300/100
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMMON   BANK0   BANK1
  3395 ;;      Params:         0       0       0
  3396 ;;      Locals:         0       0       0
  3397 ;;      Temps:          0       0       0
  3398 ;;      Totals:         0       0       0
  3399 ;;Total ram usage:        0 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; This function calls:
  3402 ;;		Nothing
  3403 ;; This function is called by:
  3404 ;;		i1_Init_Config
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           
  3409                           ;psect for function i1_Init_GPIO
  3410  0368                     i1_Init_GPIO:	
  3411                           
  3412                           ;init.c: 14: TRISA = 0;
  3413                           
  3414                           ;incstack = 0
  3415                           ; Regs used in i1_Init_GPIO: [wreg+status,2]
  3416  0368  0185               	clrf	5	;volatile
  3417                           
  3418                           ;init.c: 15: TRISB = 0;
  3419  0369  0186               	clrf	6	;volatile
  3420                           
  3421                           ;init.c: 16: TRISC = 0;
  3422  036A  0187               	clrf	7	;volatile
  3423                           
  3424                           ;init.c: 17: WPUA = 0xFF;
  3425  036B  30FF               	movlw	255
  3426  036C  1703               	bsf	3,6	;RP1=1, select bank3
  3427  036D  008E               	movwf	14	;volatile
  3428                           
  3429                           ;init.c: 18: WPUB = 0xFF;
  3430  036E  1303               	bcf	3,6	;RP1=0, select bank1
  3431  036F  0095               	movwf	21	;volatile
  3432                           
  3433                           ;init.c: 19: WPUC = 0xFF;
  3434  0370  1703               	bsf	3,6	;RP1=1, select bank3
  3435  0371  008F               	movwf	15	;volatile
  3436                           
  3437                           ;init.c: 20: PORTA = 0xFF;
  3438  0372  1283               	bcf	3,5	;RP0=0, select bank0
  3439  0373  1303               	bcf	3,6	;RP1=0, select bank0
  3440  0374  0085               	movwf	5	;volatile
  3441                           
  3442                           ;init.c: 21: PORTB = 0xFF;
  3443  0375  0086               	movwf	6	;volatile
  3444                           
  3445                           ;init.c: 22: PORTC = 0xFF;
  3446  0376  0087               	movwf	7	;volatile
  3447                           
  3448                           ;init.c: 23: IOCB = 0x00;
  3449  0377  1683               	bsf	3,5	;RP0=1, select bank1
  3450  0378  0196               	clrf	22	;volatile
  3451  0379  0008               	return
  3452  037A                     __end_ofi1_Init_GPIO:	
  3453  007E                     btemp	set	126	;btemp
  3454  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     13      52
    BANK1            80      0       0

Pointer List with Targets:

    resetKey@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 

    key_driver@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 

    sacnKeyInput@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 


Critical Paths under _main in COMMON

    _main->_closeFan
    _main->_readVrefADC
    _scanKeys->_sacnKeyInput
    _readVrefADC->_ADC_Result
    _checkUsbStatus->_closeFan
    _checkKeys->_closeFan
    _checkFan->_closeFan
    _setFanLevel->_setLedOn
    _closeFan->_setLedOn
    _Sleep_Mode->_setLedOn
    _Init_Config->_resetKey

Critical Paths under _Timer0_Isr in COMMON

    i1_Init_Config->i1_resetKey

Critical Paths under _main in BANK0

    _main->_checkKeys
    _scanKeys->_sacnKeyInput
    _readVrefADC->_ADC_Sample
    _checkKeys->_checkFan
    _checkFan->_setFanLevel
    _setFanLevel->___awdiv

Critical Paths under _Timer0_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer0_Isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3431
                        _Init_Config
                          _checkKeys
                     _checkUsbStatus
                           _closeFan
                        _readVrefADC
                           _scanKeys
 ---------------------------------------------------------------------------------
 (1) _scanKeys                                             0     0      0     214
                       _sacnKeyInput
 ---------------------------------------------------------------------------------
 (2) _sacnKeyInput                                         3     3      0     214
                                              4 COMMON     2     2      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _readVrefADC                                          1     1      0     533
                                              5 COMMON     1     1      0
                         _ADC_Result
                         _ADC_Sample
                           _DelayXms
 ---------------------------------------------------------------------------------
 (2) _DelayXms                                             3     3      0     167
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                           8     8      0     291
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Result                                           3     3      0      65
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _checkUsbStatus                                       2     2      0      62
                                              0 BANK0      2     2      0
                           _closeFan
 ---------------------------------------------------------------------------------
 (1) _checkKeys                                            2     2      0    2391
                                             11 BANK0      2     2      0
                           _checkFan
                           _closeFan
                         _key_driver
                        _setFanLevel
 ---------------------------------------------------------------------------------
 (2) _key_driver                                           3     3      0     597
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _checkFan                                             1     1      0     863
                                             10 BANK0      1     1      0
                           _closeFan
                        _setFanLevel
 ---------------------------------------------------------------------------------
 (2) _setFanLevel                                          4     4      0     801
                                              8 BANK0      2     2      0
                           _Init_PWM
                            ___awdiv
                           _setLedOn
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     606
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _closeFan                                             1     1      0      62
                                              5 COMMON     1     1      0
                         _Sleep_Mode
                           _setLedOn
 ---------------------------------------------------------------------------------
 (2) _Sleep_Mode                                           0     0      0      31
                           _setLedOn
 ---------------------------------------------------------------------------------
 (2) _setLedOn                                             1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_Config                                          0     0      0     169
                          _Init_GPIO
                      _Init_Interupt
                           _Init_PWM
                        _Init_System
                           _resetKey
 ---------------------------------------------------------------------------------
 (2) _resetKey                                             1     1      0     169
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_Interupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Timer0_Isr                                           3     3      0      88
                                              1 COMMON     3     3      0
                      i1_Init_Config
 ---------------------------------------------------------------------------------
 (7) i1_Init_Config                                        0     0      0      88
                        i1_Init_GPIO
                    i1_Init_Interupt
                         i1_Init_PWM
                      i1_Init_System
                         i1_resetKey
 ---------------------------------------------------------------------------------
 (8) i1_resetKey                                           1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Init_System                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_Init_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_Init_Interupt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_Init_GPIO                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_Config
     _Init_GPIO
     _Init_Interupt
     _Init_PWM
     _Init_System
     _resetKey
   _checkKeys
     _checkFan
       _closeFan
         _Sleep_Mode
           _setLedOn
         _setLedOn
       _setFanLevel
         _Init_PWM
         ___awdiv
         _setLedOn
     _closeFan
       _Sleep_Mode
         _setLedOn
       _setLedOn
     _key_driver
     _setFanLevel
       _Init_PWM
       ___awdiv
       _setLedOn
   _checkUsbStatus
     _closeFan
       _Sleep_Mode
         _setLedOn
       _setLedOn
   _closeFan
     _Sleep_Mode
       _setLedOn
     _setLedOn
   _readVrefADC
     _ADC_Result
     _ADC_Sample
     _DelayXms
   _scanKeys
     _sacnKeyInput

 _Timer0_Isr (ROOT)
   i1_Init_Config
     i1_Init_GPIO
     i1_Init_Interupt
     i1_Init_PWM
     i1_Init_System
     i1_resetKey

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      D      34       5       65.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3E       8        0.0%
ABS                  0      0      3E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 15 18:53:18 2020

         ??i1_Init_System 0070                         pc 0002                        PL2 00F9  
                      PL4 00B0                        PL6 01FD                        PL8 0204  
                      _TO 001C              ___awdiv@sign 004C                        fsr 0004  
                     PL10 00BF                       l630 01E0                       l631 01E5  
                     l626 01D3                       l642 02DD                       l628 01D7  
                     l629 01DB                       l585 00DD                       _GIE 005F  
                     _PR2 0092       __size_of_ADC_Sample 0096       __size_of_ADC_Result 001D  
                     fsr0 0004                       indf 0000                      S3880 0400  
                    S3878 0405                      l3404 038A                      l1812 031E  
                    l1805 0064                      l3416 025D                      l3600 017F  
                    l3450 0113                      l3532 01B8                      l3524 01AE  
                    l3516 0199                      l3604 0183                      l3534 01BA  
                    l3542 01C1                      l3606 0190                      l3456 011C  
                    l3536 01BC                      l3544 01CF                      l3528 01B3  
                    l3712 00EF                      l3640 0060                      l3482 0149  
                    l3466 012A                      l3538 01BE                      l3554 0221  
                    l3546 020A                      l3714 00F0                      l3634 004E  
                    l3626 0035                      l3556 0223                      l3732 02D5  
                    l3740 02D8                      l3820 0251                      l3398 01EE  
                    l3486 0325                      l3478 0141                      l3574 0158  
                    l3750 02E4                      l3638 0058                      l1799 0030  
                    l3592 016F                      l3808 023F                      l3762 02AD  
                    l3586 016A                      l3578 0160                      l3674 03C8  
                    l3668 0323                      l3684 03CD                      l3598 017D  
                    l3696 00D2                      l3698 00D4                      l3798 0236  
                    _T0IF 005A                      u1215 0133                      _IOCB 0096  
                    u1334 02F8                      u1335 02F6                      u1435 0054  
                    u1445 005E                      u1295 0217                      u1495 009A  
                    _RBIE 005B                      _RBIF 0058                      _TMR0 0001  
  __end_of_checkUsbStatus 00F9                      _WPUA 018E                      _WPUB 0095  
                    _WPUC 018F                      _key1 0040                      _key2 0039  
                    _key3 0032                      _main 0234                      btemp 007E  
              i1_resetKey 039A                      start 000C             ??_Init_Config 0075  
           ??_Init_System 0074             _Init_Interupt 03F1                     ?_main 0070  
         __end_of___awdiv 014E           ___awdiv@divisor 0047                     _T2CON 0012  
            ?_readVrefADC 0070        key_driver@key_read 0048                     i1l671 034D  
         ___awdiv@counter 004B                     _PORTA 0005                     _PORTB 0006  
                   _PORTC 0007                     _TRISA 0085                     _TRISB 0086  
                   _TRISC 0087               ?i1_Init_PWM 0070                     pclath 000A  
         ?_checkUsbStatus 0070                     status 0003                     wtemp0 007E  
        __end_of_DelayXms 03D1              ?_setFanLevel 0070           __initialization 000D  
            __end_of_main 025D          __end_of_Init_PWM 039A            ?_Init_Interupt 0070  
     __end_of_Init_Config 02CD            _fan_check_time 0028                    ??_main 0076  
     __end_of_Init_System 03DA                    _ADCON0 001F                    _ADCON1 009F  
                  _ADRESH 001E                    _ADRESL 009E                    _CCPR1L 0015  
        ___awdiv@dividend 0049                    _GODONE 00F9                    i1l3338 0349  
                  i1l3268 0289                    _INTCON 000B             ?_sacnKeyInput 0070  
      __size_of_Init_GPIO 0012                    _OSCCON 008F                    _TMR2IF 0061  
            ??_ADC_Sample 0047          __end_of_checkFan 0234              ??_ADC_Result 0074  
             ?i1_resetKey 0070                _Sleep_Mode 025D                _Timer0_Isr 0340  
        __end_of_closeFan 0340          setLedOn@ledIndex 0074                 ??___awdiv 0074  
     __size_ofi1_Init_PWM 0010              ?i1_Init_GPIO 0070          __end_of_scanKeys 03C6  
        ___awdiv@quotient 004D          __end_of_setLedOn 01FD          __end_of_resetKey 038A  
            __pdataCOMMON 0078        __end_of_ADC_Sample 00B0        __end_of_ADC_Result 0325  
         i1_Init_Interupt 03F7                    saved_w 007E            ??_sacnKeyInput 0074  
 __end_of__initialization 0018               _Init_Config 02AA            __pcstackCOMMON 0070  
         ??_Init_Interupt 0074        __size_of_checkKeys 001E               _Init_System 03D1  
              __end_ofPL2 0109                __end_ofPL4 00BF                __end_ofPL6 0204  
              __end_ofPL8 020A         __end_of_Init_GPIO 0368       __size_ofi1_resetKey 0010  
               ?_DelayXms 0070      __size_of_readVrefADC 0006                __pbssBANK0 0020  
               ?_Init_PWM 0070               ?_Sleep_Mode 0070               ?_Timer0_Isr 0070  
   __end_ofi1_Init_Config 02AA                __pmaintext 0234      __size_of_setFanLevel 003F  
              __pintentry 0004                   _CCP1CON 0017     __end_ofi1_Init_System 03E3  
 __end_ofi1_Init_Interupt 03FD                 ?_checkFan 0070      key_driver@key_return 0047  
              ??_DelayXms 0074          ??_checkUsbStatus 0047                _count300ms 0076  
               ?_closeFan 0070              ??i1_Init_PWM 0070         __end_of_checkKeys 02EB  
              ??_Init_PWM 0074                 ?_scanKeys 0070                 ?_setLedOn 0070  
               ?_resetKey 0070               resetKey@key 0074           ADC_Sample@admax 0024  
         ADC_Sample@admin 0026           ADC_Sample@adsum 0020                   ___awdiv 0109  
              _key_driver 014E      __end_of_sacnKeyInput 0308        __end_ofi1_Init_PWM 03BA  
                 __ptext1 03BA                   __ptext2 02EB                   __ptext3 03EB  
                 __ptext4 03C6                   __ptext5 001A                   __ptext6 0308  
                 __ptext7 00C4                   __ptext8 02CD                   __ptext9 014E  
    __size_ofi1_Init_GPIO 0012                ??_checkFan 0051       __size_of_Sleep_Mode 0029  
     __size_of_Timer0_Isr 0016                ??_closeFan 0075                   clrloop0 03E4  
    end_of_initialization 0018                 DelayXms@i 0048                 DelayXms@j 0049  
               DelayXms@x 0047                ??_scanKeys 0076              ??i1_resetKey 0070  
              ??_setLedOn 0074                ??_resetKey 0074           sacnKeyInput@key 0047  
        ?i1_Init_Interupt 0070        __end_ofi1_resetKey 03AA              ?_Init_Config 0070  
             ?_key_driver 0070              ?_Init_System 0070          setFanLevel@level 004F  
           __pidataCOMMON 0000               __end_ofPL10 00C4       start_initialization 000D  
               _Init_GPIO 0356         __size_of_DelayXms 000B         __size_of_Init_PWM 0010  
            ??_Sleep_Mode 0075              ??_Timer0_Isr 0071     __size_of_sacnKeyInput 001D  
       ADC_Sample@ad_temp 004D     __end_of_Init_Interupt 03F7         ADC_Sample@adtimes 0030  
           ??_readVrefADC 0075               __pbssCOMMON 0076                ?_Init_GPIO 0070  
               ___latbits 0000             __pcstackBANK0 0047         __size_of_checkFan 002A  
      __end_of_Sleep_Mode 0286        __end_of_Timer0_Isr 0356       __size_of_key_driver 0044  
       __size_of_closeFan 001B              _sacnKeyInput 02EB              _currentLevel 0079  
               _checkKeys 02CD       checkKeys@key2Status 0052             ??_setFanLevel 0075  
     checkKeys@key3Status 0053         __size_of_scanKeys 000C         __size_of_setLedOn 002C  
                ?___awdiv 0047         __size_of_resetKey 0010                 __pswtext1 0405  
               __pswtext2 0400                 _count10Ms 002A                 _countTime 002C  
          ADC_Sample@adch 004B    __size_ofi1_Init_Config 0024       __end_of_readVrefADC 03F1  
             ADC_Sample@i 004C    __size_ofi1_Init_System 0009         interrupt_function 0004  
             ADC_Result@i 0048                ?_checkKeys 0070                 _time0Flag 0077  
               clear_ram0 03E3      __size_of_Init_Config 0023      setFanLevel@tempLevel 0050  
           ??i1_Init_GPIO 0070       __end_of_setFanLevel 01D1      __size_of_Init_System 0009  
          ADC_Result@adch 0047               ??_Init_GPIO 0074                  _DelayXms 03C6  
                _Init_PWM 038A                _ADC_Sample 001A                _ADC_Result 0308  
 __size_of_checkUsbStatus 0035             i1_Init_Config 0286              ??_key_driver 0074  
        __size_of___awdiv 0045             key_driver@key 0049             i1_Init_System 03DA  
             _readVrefADC 03EB                  _checkFan 020A                _FAN_STATUS 0078  
     __end_ofi1_Init_GPIO 037A                  _adresult 002E  __size_ofi1_Init_Interupt 0006  
                __ptext10 020A                  __ptext11 0192                  __ptext20 03F1  
                __ptext12 0109                  __ptext21 0356                  __ptext13 0325  
                __ptext22 0340                  __ptext14 025D                  __ptext23 0286  
                __ptext15 01D1                  __ptext24 039A                  __ptext16 02AA  
                __ptext25 03DA                  __ptext17 037A                  __ptext26 03AA  
                __ptext18 03D1                  __ptext27 03F7                  __ptext19 038A  
                __ptext28 0368                  _closeFan 0325        __end_of_key_driver 0192  
           __size_of_main 0029               ??_checkKeys 0076                  _scanKeys 03BA  
                _lowVTime 0031                  _setLedOn 01D1                  _resetKey 037A  
             _setFanLevel 0192            ?i1_Init_Config 0070            ?i1_Init_System 0070  
                intlevel1 0000               ?_ADC_Sample 0070               ?_ADC_Result 0070  
           i1resetKey@key 0070               i1_Init_GPIO 0368                _OPTION_REG 0081  
              i1_Init_PWM 03AA    __size_of_Init_Interupt 0006         ??i1_Init_Interupt 0070  
          _checkUsbStatus 00C4           ??i1_Init_Config 0071  
