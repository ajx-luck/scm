

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu May 14 19:05:29 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1711C
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	swtext1,local,class=CONST,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	swtext2,local,class=CONST,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	pa_nodes0,global,class=CODE,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 1.45
    48                           ; Generated 16/11/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F887 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	idataCOMMON
    83  0000                     __pidataCOMMON:	
    84  001F                     _ADCON0	set	31
    85  001E                     _ADRESH	set	30
    86  0017                     _CCP1CON	set	23
    87  0015                     _CCPR1L	set	21
    88  0012                     _T2CON	set	18
    89  000B                     _INTCON	set	11
    90  0007                     _PORTC	set	7
    91  0006                     _PORTB	set	6
    92  0005                     _PORTA	set	5
    93  0001                     _TMR0	set	1
    94  00F9                     _GODONE	set	249
    95  0061                     _TMR2IF	set	97
    96  005F                     _GIE	set	95
    97  005B                     _RBIE	set	91
    98  005A                     _T0IF	set	90
    99  0058                     _RBIF	set	88
   100  001C                     _TO	set	28
   101  009F                     _ADCON1	set	159
   102  009E                     _ADRESL	set	158
   103  0096                     _IOCB	set	150
   104  0095                     _WPUB	set	149
   105  0092                     _PR2	set	146
   106  008F                     _OSCCON	set	143
   107  0087                     _TRISC	set	135
   108  0086                     _TRISB	set	134
   109  0085                     _TRISA	set	133
   110  0081                     _OPTION_REG	set	129
   111  018F                     _WPUC	set	399
   112  018E                     _WPUA	set	398
   113                           
   114                           	psect	cinit
   115  000D                     start_initialization:	
   116                           ; #config settings
   117                           
   118  000D                     __initialization:	
   119                           
   120                           ;initializer for _FAN_STATUS
   121  000D  3002               	movlw	2
   122  000E  00F8               	movwf	__pdataCOMMON& (0+127)
   123                           
   124                           ;initializer for _currentLevel
   125  000F  3003               	movlw	3
   126  0010  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   127  0011  3020               	movlw	low __pbssBANK0
   128                           
   129                           ; Clear objects allocated to BANK0
   130  0012  1383               	bcf	3,7	;select IRP bank0
   131  0013  0084               	movwf	4
   132  0014  3047               	movlw	low (__pbssBANK0+39)
   133  0015  2385               	fcall	clear_ram0
   134                           
   135                           ; Clear objects allocated to COMMON
   136  0016  01F6               	clrf	__pbssCOMMON& (0+127)
   137  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   138  0018                     end_of_initialization:	
   139                           ;End of C runtime variable initialization code
   140                           
   141  0018                     __end_of__initialization:	
   142  0018  0183               	clrf	3
   143  0019  2A32               	ljmp	_main	;jump to C main() function
   144                           
   145                           	psect	bssCOMMON
   146  0076                     __pbssCOMMON:	
   147  0076                     _count300ms:	
   148  0076                     	ds	1
   149  0077                     _time0Flag:	
   150  0077                     	ds	1
   151                           
   152                           	psect	dataCOMMON
   153  0078                     __pdataCOMMON:	
   154  0078                     _FAN_STATUS:	
   155  0078                     	ds	1
   156  0079                     _currentLevel:	
   157  0079                     	ds	1
   158                           
   159                           	psect	bssBANK0
   160  0020                     __pbssBANK0:	
   161  0020                     ADC_Sample@adsum:	
   162  0020                     	ds	4
   163  0024                     ADC_Sample@admax:	
   164  0024                     	ds	2
   165  0026                     ADC_Sample@admin:	
   166  0026                     	ds	2
   167  0028                     _fan_check_time:	
   168  0028                     	ds	2
   169  002A                     _count10Ms:	
   170  002A                     	ds	2
   171  002C                     _countTime:	
   172  002C                     	ds	2
   173  002E                     _adresult:	
   174  002E                     	ds	2
   175  0030                     ADC_Sample@adtimes:	
   176  0030                     	ds	1
   177  0031                     _lowVTime:	
   178  0031                     	ds	1
   179  0032                     _key3:	
   180  0032                     	ds	7
   181  0039                     _key2:	
   182  0039                     	ds	7
   183  0040                     _key1:	
   184  0040                     	ds	7
   185                           
   186                           	psect	clrtext
   187  0385                     clear_ram0:	
   188                           ;	Called with FSR containing the base address, and
   189                           ;	W with the last address+1
   190                           
   191  0385  0064               	clrwdt	;clear the watchdog before getting into this loop
   192  0386                     clrloop0:	
   193  0386  0180               	clrf	0	;clear RAM location pointed to by FSR
   194  0387  0A84               	incf	4,f	;increment pointer
   195  0388  0604               	xorwf	4,w	;XOR with final address
   196  0389  1903               	btfsc	3,2	;have we reached the end yet?
   197  038A  3400               	retlw	0	;all done for this memory range, return
   198  038B  0604               	xorwf	4,w	;XOR again to restore value
   199  038C  2B86               	goto	clrloop0	;do the next byte
   200                           
   201                           	psect	cstackCOMMON
   202  0070                     __pcstackCOMMON:	
   203  0070                     ?_closeFan:	
   204  0070                     ?_setLedOn:	
   205                           ; 1 bytes @ 0x0
   206                           
   207  0070                     ?_Sleep_Mode:	
   208                           ; 1 bytes @ 0x0
   209                           
   210  0070                     ?_sacnKeyInput:	
   211                           ; 1 bytes @ 0x0
   212                           
   213  0070                     ?_key_driver:	
   214                           ; 1 bytes @ 0x0
   215                           
   216  0070                     ?_Init_Config:	
   217                           ; 1 bytes @ 0x0
   218                           
   219  0070                     ?_readVrefADC:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ?_Init_System:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     ?_Init_GPIO:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ?_Init_Interupt:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_resetKey:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ?_checkUsbStatus:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ?_Init_PWM:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ?_setFanLevel:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_checkFan:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     ?_scanKeys:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     ?_checkKeys:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_main:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_Timer0_Isr:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_ADC_Sample:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_ADC_Result:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?_DelayXms:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?i1_Init_PWM:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ??i1_Init_PWM:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?i1_Init_Config:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?i1_resetKey:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ??i1_resetKey:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?i1_Init_System:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ??i1_Init_System:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?i1_Init_GPIO:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ??i1_Init_GPIO:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?i1_Init_Interupt:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ??i1_Init_Interupt:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     i1resetKey@key:	
   301                           ; 1 bytes @ 0x0
   302                           
   303                           
   304                           ; 1 bytes @ 0x0
   305  0070                     	ds	1
   306  0071                     ??_Timer0_Isr:	
   307  0071                     ??i1_Init_Config:	
   308                           ; 1 bytes @ 0x1
   309                           
   310                           
   311                           ; 1 bytes @ 0x1
   312  0071                     	ds	3
   313  0074                     ??_setLedOn:	
   314  0074                     ??_Sleep_Mode:	
   315                           ; 1 bytes @ 0x4
   316                           
   317  0074                     ??_sacnKeyInput:	
   318                           ; 1 bytes @ 0x4
   319                           
   320  0074                     ??_key_driver:	
   321                           ; 1 bytes @ 0x4
   322                           
   323  0074                     ??_Init_System:	
   324                           ; 1 bytes @ 0x4
   325                           
   326  0074                     ??_Init_GPIO:	
   327                           ; 1 bytes @ 0x4
   328                           
   329  0074                     ??_Init_Interupt:	
   330                           ; 1 bytes @ 0x4
   331                           
   332  0074                     ??_resetKey:	
   333                           ; 1 bytes @ 0x4
   334                           
   335  0074                     ??_Init_PWM:	
   336                           ; 1 bytes @ 0x4
   337                           
   338  0074                     ??_ADC_Result:	
   339                           ; 1 bytes @ 0x4
   340                           
   341  0074                     ??_DelayXms:	
   342                           ; 1 bytes @ 0x4
   343                           
   344  0074                     ??___awdiv:	
   345                           ; 1 bytes @ 0x4
   346                           
   347  0074                     setLedOn@ledIndex:	
   348                           ; 1 bytes @ 0x4
   349                           
   350  0074                     resetKey@key:	
   351                           ; 1 bytes @ 0x4
   352                           
   353                           
   354                           ; 1 bytes @ 0x4
   355  0074                     	ds	1
   356  0075                     ??_closeFan:	
   357  0075                     ??_Init_Config:	
   358                           ; 1 bytes @ 0x5
   359                           
   360  0075                     ??_readVrefADC:	
   361                           ; 1 bytes @ 0x5
   362                           
   363  0075                     ??_setFanLevel:	
   364                           ; 1 bytes @ 0x5
   365                           
   366  0075                     ??_checkFan:	
   367                           ; 1 bytes @ 0x5
   368                           
   369                           
   370                           ; 1 bytes @ 0x5
   371  0075                     	ds	1
   372  0076                     ??_scanKeys:	
   373  0076                     ??_checkKeys:	
   374                           ; 1 bytes @ 0x6
   375                           
   376  0076                     ??_main:	
   377                           ; 1 bytes @ 0x6
   378                           
   379                           
   380                           	psect	cstackBANK0
   381  0047                     __pcstackBANK0:	
   382                           ; 1 bytes @ 0x6
   383                           
   384  0047                     ??_checkUsbStatus:	
   385  0047                     ??_ADC_Sample:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0047                     ?___awdiv:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0047                     sacnKeyInput@key:	
   392                           ; 2 bytes @ 0x0
   393                           
   394  0047                     key_driver@key_return:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0047                     ADC_Result@adch:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0047                     DelayXms@x:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0047                     ___awdiv@divisor:	
   404                           ; 1 bytes @ 0x0
   405                           
   406                           
   407                           ; 2 bytes @ 0x0
   408  0047                     	ds	1
   409  0048                     key_driver@key_read:	
   410  0048                     ADC_Result@i:	
   411                           ; 1 bytes @ 0x1
   412                           
   413  0048                     DelayXms@i:	
   414                           ; 1 bytes @ 0x1
   415                           
   416                           
   417                           ; 1 bytes @ 0x1
   418  0048                     	ds	1
   419  0049                     key_driver@key:	
   420  0049                     DelayXms@j:	
   421                           ; 1 bytes @ 0x2
   422                           
   423  0049                     ___awdiv@dividend:	
   424                           ; 1 bytes @ 0x2
   425                           
   426                           
   427                           ; 2 bytes @ 0x2
   428  0049                     	ds	2
   429  004B                     ADC_Sample@adch:	
   430  004B                     ___awdiv@counter:	
   431                           ; 1 bytes @ 0x4
   432                           
   433                           
   434                           ; 1 bytes @ 0x4
   435  004B                     	ds	1
   436  004C                     ADC_Sample@i:	
   437  004C                     ___awdiv@sign:	
   438                           ; 1 bytes @ 0x5
   439                           
   440                           
   441                           ; 1 bytes @ 0x5
   442  004C                     	ds	1
   443  004D                     ADC_Sample@ad_temp:	
   444  004D                     ___awdiv@quotient:	
   445                           ; 2 bytes @ 0x6
   446                           
   447                           
   448                           ; 2 bytes @ 0x6
   449  004D                     	ds	2
   450  004F                     setFanLevel@level:	
   451                           
   452                           ; 1 bytes @ 0x8
   453  004F                     	ds	1
   454  0050                     setFanLevel@tempLevel:	
   455                           
   456                           ; 1 bytes @ 0x9
   457  0050                     	ds	1
   458  0051                     checkKeys@key2Status:	
   459                           
   460                           ; 1 bytes @ 0xA
   461  0051                     	ds	1
   462  0052                     checkKeys@key3Status:	
   463                           
   464                           ; 1 bytes @ 0xB
   465  0052                     	ds	1
   466                           
   467                           	psect	maintext
   468  0232                     __pmaintext:	
   469 ;;
   470 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   471 ;;
   472 ;; *************** function _main *****************
   473 ;; Defined at:
   474 ;;		line 266 in file "E:\project\project0508\scm\uf166fan\main.c"
   475 ;; Parameters:    Size  Location     Type
   476 ;;		None
   477 ;; Auto vars:     Size  Location     Type
   478 ;;		None
   479 ;; Return value:  Size  Location     Type
   480 ;;                  1    wreg      void 
   481 ;; Registers used:
   482 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   483 ;; Tracked objects:
   484 ;;		On entry : B00/0
   485 ;;		On exit  : 300/0
   486 ;;		Unchanged: 0/0
   487 ;; Data sizes:     COMMON   BANK0   BANK1
   488 ;;      Params:         0       0       0
   489 ;;      Locals:         0       0       0
   490 ;;      Temps:          0       0       0
   491 ;;      Totals:         0       0       0
   492 ;;Total ram usage:        0 bytes
   493 ;; Hardware stack levels required when called:    7
   494 ;; This function calls:
   495 ;;		_Init_Config
   496 ;;		_Sleep_Mode
   497 ;;		_checkKeys
   498 ;;		_checkUsbStatus
   499 ;;		_readVrefADC
   500 ;;		_scanKeys
   501 ;; This function is called by:
   502 ;;		Startup code after reset
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506                           
   507                           ;psect for function _main
   508  0232                     _main:	
   509                           
   510                           ;main.c: 267: Sleep_Mode();
   511                           
   512                           ;incstack = 0
   513                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   514  0232  2256               	fcall	_Sleep_Mode
   515                           
   516                           ;main.c: 268: Init_Config();
   517  0233  2370               	fcall	_Init_Config
   518  0234                     l3657:	
   519                           
   520                           ;main.c: 271: if (time0Flag) {
   521  0234  0877               	movf	_time0Flag,w
   522  0235  1903               	btfsc	3,2
   523  0236  2A3D               	goto	l3667
   524  0237  0064               	clrwdt	;# 
   525                           
   526                           ;main.c: 273: time0Flag = 0;
   527  0238  01F7               	clrf	_time0Flag
   528                           
   529                           ;main.c: 274: scanKeys();
   530  0239  2319               	fcall	_scanKeys
   531                           
   532                           ;main.c: 275: count10Ms++;
   533  023A  0AAA               	incf	_count10Ms,f
   534  023B  1903               	skipnz
   535  023C  0AAB               	incf	_count10Ms+1,f
   536  023D                     l3667:	
   537                           
   538                           ;main.c: 276: }
   539                           ;main.c: 279: if (count10Ms == 100) {
   540  023D  3064               	movlw	100
   541  023E  062A               	xorwf	_count10Ms,w
   542  023F  042B               	iorwf	_count10Ms+1,w
   543  0240  1D03               	btfss	3,2
   544  0241  2A4A               	goto	l3679
   545                           
   546                           ;main.c: 280: count300ms++;
   547  0242  0AF6               	incf	_count300ms,f
   548                           
   549                           ;main.c: 281: checkKeys();
   550  0243  2298               	fcall	_checkKeys
   551                           
   552                           ;main.c: 282: count10Ms = 0;
   553  0244  1283               	bcf	3,5	;RP0=0, select bank0
   554  0245  1303               	bcf	3,6	;RP1=0, select bank0
   555  0246  01AA               	clrf	_count10Ms
   556  0247  01AB               	clrf	_count10Ms+1
   557                           
   558                           ;main.c: 284: checkUsbStatus();
   559  0248  214D               	fcall	_checkUsbStatus
   560                           
   561                           ;main.c: 286: readVrefADC();
   562  0249  2394               	fcall	_readVrefADC
   563  024A                     l3679:	
   564                           
   565                           ;main.c: 287: }
   566                           ;main.c: 289: if(count300ms == 30)
   567  024A  301E               	movlw	30
   568  024B  0676               	xorwf	_count300ms,w
   569  024C  1903               	btfsc	3,2
   570                           
   571                           ;main.c: 290: {
   572                           ;main.c: 291: count300ms = 0;
   573  024D  01F6               	clrf	_count300ms
   574                           
   575                           ;main.c: 292: }
   576                           ;main.c: 294: if (countTime == 100) {
   577  024E  3064               	movlw	100
   578  024F  062C               	xorwf	_countTime,w
   579  0250  042D               	iorwf	_countTime+1,w
   580  0251  1D03               	btfss	3,2
   581  0252  2A34               	goto	l3657
   582                           
   583                           ;main.c: 295: countTime = 0;
   584  0253  01AC               	clrf	_countTime
   585  0254  01AD               	clrf	_countTime+1
   586  0255  2A34               	goto	l3657
   587  0256                     __end_of_main:	
   588                           
   589                           	psect	text1
   590  0319                     __ptext1:	
   591 ;; *************** function _scanKeys *****************
   592 ;; Defined at:
   593 ;;		line 224 in file "E:\project\project0508\scm\uf166fan\main.c"
   594 ;; Parameters:    Size  Location     Type
   595 ;;		None
   596 ;; Auto vars:     Size  Location     Type
   597 ;;		None
   598 ;; Return value:  Size  Location     Type
   599 ;;                  1    wreg      void 
   600 ;; Registers used:
   601 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   602 ;; Tracked objects:
   603 ;;		On entry : 0/0
   604 ;;		On exit  : B00/0
   605 ;;		Unchanged: 0/0
   606 ;; Data sizes:     COMMON   BANK0   BANK1
   607 ;;      Params:         0       0       0
   608 ;;      Locals:         0       0       0
   609 ;;      Temps:          0       0       0
   610 ;;      Totals:         0       0       0
   611 ;;Total ram usage:        0 bytes
   612 ;; Hardware stack levels used:    1
   613 ;; Hardware stack levels required when called:    4
   614 ;; This function calls:
   615 ;;		_sacnKeyInput
   616 ;; This function is called by:
   617 ;;		_main
   618 ;; This function uses a non-reentrant model
   619 ;;
   620                           
   621                           
   622                           ;psect for function _scanKeys
   623  0319                     _scanKeys:	
   624                           
   625                           ;main.c: 225: key1.key_addr_result = key2.key_addr_result = key3.key_addr_result = PORTB
      +                          ;
   626                           
   627                           ;incstack = 0
   628                           ; Regs used in _scanKeys: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   629  0319  1283               	bcf	3,5	;RP0=0, select bank0
   630  031A  1303               	bcf	3,6	;RP1=0, select bank0
   631  031B  0806               	movf	6,w	;volatile
   632  031C  00B7               	movwf	_key3+5
   633  031D  00BE               	movwf	_key2+5
   634  031E  00C5               	movwf	_key1+5
   635                           
   636                           ;main.c: 226: sacnKeyInput(&key1);
   637  031F  3040               	movlw	(low (_key1| 0))& (0+255)
   638  0320  22B6               	fcall	_sacnKeyInput
   639                           
   640                           ;main.c: 227: sacnKeyInput(&key2);
   641  0321  3039               	movlw	(low (_key2| 0))& (0+255)
   642  0322  22B6               	fcall	_sacnKeyInput
   643                           
   644                           ;main.c: 228: sacnKeyInput(&key3);
   645  0323  3032               	movlw	(low (_key3| 0))& (0+255)
   646  0324  22B6               	fcall	_sacnKeyInput
   647                           
   648                           ;main.c: 229: countTime++;
   649  0325  0AAC               	incf	_countTime,f
   650  0326  1903               	skipnz
   651  0327  0AAD               	incf	_countTime+1,f
   652  0328  0008               	return
   653  0329                     __end_of_scanKeys:	
   654                           
   655                           	psect	text2
   656  02B6                     __ptext2:	
   657 ;; *************** function _sacnKeyInput *****************
   658 ;; Defined at:
   659 ;;		line 3 in file "E:\project\project0508\scm\uf166fan\scankey.c"
   660 ;; Parameters:    Size  Location     Type
   661 ;;  key             1    wreg     PTR struct Keys
   662 ;;		 -> key3(7), key2(7), key1(7), 
   663 ;; Auto vars:     Size  Location     Type
   664 ;;  key             1    0[BANK0 ] PTR struct Keys
   665 ;;		 -> key3(7), key2(7), key1(7), 
   666 ;; Return value:  Size  Location     Type
   667 ;;                  1    wreg      void 
   668 ;; Registers used:
   669 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   670 ;; Tracked objects:
   671 ;;		On entry : 300/0
   672 ;;		On exit  : B00/0
   673 ;;		Unchanged: 0/0
   674 ;; Data sizes:     COMMON   BANK0   BANK1
   675 ;;      Params:         0       0       0
   676 ;;      Locals:         0       1       0
   677 ;;      Temps:          2       0       0
   678 ;;      Totals:         2       1       0
   679 ;;Total ram usage:        3 bytes
   680 ;; Hardware stack levels used:    1
   681 ;; Hardware stack levels required when called:    3
   682 ;; This function calls:
   683 ;;		Nothing
   684 ;; This function is called by:
   685 ;;		_scanKeys
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689                           
   690                           ;psect for function _sacnKeyInput
   691  02B6                     _sacnKeyInput:	
   692                           
   693                           ;incstack = 0
   694                           ; Regs used in _sacnKeyInput: [wreg-fsr0h+status,2+status,0]
   695                           ;sacnKeyInput@key stored from wreg
   696  02B6  00C7               	movwf	sacnKeyInput@key
   697                           
   698                           ;scankey.c: 4: key->key_input = ((key->key_addr_result) >> (key->key_index)&1);
   699  02B7  3E05               	addlw	5
   700  02B8  0084               	movwf	4
   701  02B9  1383               	bcf	3,7	;select IRP bank0
   702  02BA  0800               	movf	0,w
   703  02BB  00F4               	movwf	??_sacnKeyInput
   704  02BC  0847               	movf	sacnKeyInput@key,w
   705  02BD  3E06               	addlw	6
   706  02BE  0084               	movwf	4
   707  02BF  0A00               	incf	0,w
   708  02C0  2AC3               	goto	u1264
   709  02C1                     u1265:	
   710  02C1  1003               	clrc
   711  02C2  0CF4               	rrf	??_sacnKeyInput,f
   712  02C3                     u1264:	
   713  02C3  3EFF               	addlw	-1
   714  02C4  1D03               	skipz
   715  02C5  2AC1               	goto	u1265
   716  02C6  0874               	movf	??_sacnKeyInput,w
   717  02C7  00F5               	movwf	??_sacnKeyInput+1
   718  02C8  0847               	movf	sacnKeyInput@key,w
   719  02C9  3E04               	addlw	4
   720  02CA  0084               	movwf	4
   721  02CB  0875               	movf	??_sacnKeyInput+1,w
   722  02CC  0080               	movwf	0
   723  02CD  0847               	movf	sacnKeyInput@key,w
   724  02CE  3E04               	addlw	4
   725  02CF  0084               	movwf	4
   726  02D0  3001               	movlw	1
   727  02D1  0580               	andwf	0,f
   728  02D2  0008               	return
   729  02D3                     __end_of_sacnKeyInput:	
   730                           
   731                           	psect	text3
   732  0394                     __ptext3:	
   733 ;; *************** function _readVrefADC *****************
   734 ;; Defined at:
   735 ;;		line 90 in file "E:\project\project0508\scm\uf166fan\adc.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;		None
   738 ;; Auto vars:     Size  Location     Type
   739 ;;  result          1    0        unsigned char 
   740 ;; Return value:  Size  Location     Type
   741 ;;                  1    wreg      unsigned char 
   742 ;; Registers used:
   743 ;;		wreg, status,2, status,0, pclath, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 300/0
   746 ;;		On exit  : 300/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMMON   BANK0   BANK1
   749 ;;      Params:         0       0       0
   750 ;;      Locals:         1       0       0
   751 ;;      Temps:          0       0       0
   752 ;;      Totals:         1       0       0
   753 ;;Total ram usage:        1 bytes
   754 ;; Hardware stack levels used:    1
   755 ;; Hardware stack levels required when called:    4
   756 ;; This function calls:
   757 ;;		_ADC_Result
   758 ;;		_ADC_Sample
   759 ;;		_DelayXms
   760 ;; This function is called by:
   761 ;;		_main
   762 ;; This function uses a non-reentrant model
   763 ;;
   764                           
   765                           
   766                           ;psect for function _readVrefADC
   767  0394                     _readVrefADC:	
   768                           
   769                           ;adc.c: 92: DelayXms(1);
   770                           
   771                           ;incstack = 0
   772                           ; Regs used in _readVrefADC: [wreg+status,2+status,0+pclath+cstack]
   773  0394  3001               	movlw	1
   774  0395  2365               	fcall	_DelayXms
   775                           
   776                           ;adc.c: 93: ADC_Sample(15);
   777  0396  300F               	movlw	15
   778  0397  201A               	fcall	_ADC_Sample
   779  0398  300F               	movlw	15
   780  0399  2AD3               	ljmp	_ADC_Result
   781  039A                     __end_of_readVrefADC:	
   782                           
   783                           	psect	text4
   784  0365                     __ptext4:	
   785 ;; *************** function _DelayXms *****************
   786 ;; Defined at:
   787 ;;		line 82 in file "E:\project\project0508\scm\uf166fan\adc.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  x               1    wreg     unsigned char 
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  x               1    0[BANK0 ] unsigned char 
   792 ;;  j               1    2[BANK0 ] unsigned char 
   793 ;;  i               1    1[BANK0 ] unsigned char 
   794 ;; Return value:  Size  Location     Type
   795 ;;                  1    wreg      void 
   796 ;; Registers used:
   797 ;;		wreg, status,2, status,0
   798 ;; Tracked objects:
   799 ;;		On entry : 300/0
   800 ;;		On exit  : 300/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMMON   BANK0   BANK1
   803 ;;      Params:         0       0       0
   804 ;;      Locals:         0       3       0
   805 ;;      Temps:          0       0       0
   806 ;;      Totals:         0       3       0
   807 ;;Total ram usage:        3 bytes
   808 ;; Hardware stack levels used:    1
   809 ;; Hardware stack levels required when called:    3
   810 ;; This function calls:
   811 ;;		Nothing
   812 ;; This function is called by:
   813 ;;		_readVrefADC
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           
   818                           ;psect for function _DelayXms
   819  0365                     _DelayXms:	
   820                           
   821                           ;incstack = 0
   822                           ; Regs used in _DelayXms: [wreg+status,2+status,0]
   823                           ;DelayXms@x stored from wreg
   824  0365  00C7               	movwf	DelayXms@x
   825                           
   826                           ;adc.c: 84: unsigned char i,j;
   827                           ;adc.c: 85: for(i=x;i>0;i--)
   828  0366  00C8               	movwf	DelayXms@i
   829  0367                     l3563:	
   830  0367  0848               	movf	DelayXms@i,w
   831  0368  1903               	btfsc	3,2
   832  0369  0008               	return
   833                           
   834                           ;adc.c: 86: for(j=153;j>0;j--);
   835  036A  3099               	movlw	153
   836  036B  00C9               	movwf	DelayXms@j
   837  036C                     l3573:	
   838  036C  0BC9               	decfsz	DelayXms@j,f
   839  036D  2B6C               	goto	l3573
   840  036E  03C8               	decf	DelayXms@i,f
   841  036F  2B67               	goto	l3563
   842  0370                     __end_of_DelayXms:	
   843                           
   844                           	psect	text5
   845  001A                     __ptext5:	
   846 ;; *************** function _ADC_Sample *****************
   847 ;; Defined at:
   848 ;;		line 11 in file "E:\project\project0508\scm\uf166fan\adc.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;  adch            1    wreg     unsigned char 
   851 ;; Auto vars:     Size  Location     Type
   852 ;;  adch            1    4[BANK0 ] unsigned char 
   853 ;;  ad_temp         2    6[BANK0 ] volatile unsigned int 
   854 ;;  i               1    5[BANK0 ] unsigned char 
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      void 
   857 ;; Registers used:
   858 ;;		wreg, status,2, status,0
   859 ;; Tracked objects:
   860 ;;		On entry : 300/0
   861 ;;		On exit  : 300/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMMON   BANK0   BANK1
   864 ;;      Params:         0       0       0
   865 ;;      Locals:         0       4       0
   866 ;;      Temps:          0       4       0
   867 ;;      Totals:         0       8       0
   868 ;;Total ram usage:        8 bytes
   869 ;; Hardware stack levels used:    1
   870 ;; Hardware stack levels required when called:    3
   871 ;; This function calls:
   872 ;;		Nothing
   873 ;; This function is called by:
   874 ;;		_readVrefADC
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           
   879                           ;psect for function _ADC_Sample
   880  001A                     _ADC_Sample:	
   881                           
   882                           ;incstack = 0
   883                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
   884                           ;ADC_Sample@adch stored from wreg
   885  001A  00CB               	movwf	ADC_Sample@adch
   886                           
   887                           ;adc.c: 13: static unsigned long adsum = 0;
   888                           ;adc.c: 14: static unsigned int admin = 0,admax = 0;
   889                           ;adc.c: 15: static unsigned char adtimes = 0;
   890                           ;adc.c: 16: volatile unsigned int ad_temp;
   891                           ;adc.c: 17: ADCON1 = 0;
   892  001B  1683               	bsf	3,5	;RP0=1, select bank1
   893  001C  019F               	clrf	31	;volatile
   894                           
   895                           ;adc.c: 18: ADCON0 = 0X41 | (adch << 2);
   896  001D  1283               	bcf	3,5	;RP0=0, select bank0
   897  001E  084B               	movf	ADC_Sample@adch,w
   898  001F  00C7               	movwf	??_ADC_Sample
   899  0020  3001               	movlw	1
   900  0021  1003               	clrc
   901  0022                     L1:	
   902  0022  0DC7               	rlf	??_ADC_Sample,f
   903  0023  3EFF               	addlw	-1
   904  0024  1003               	clrc
   905  0025  1D03               	skipz
   906  0026  2822               	goto	L1
   907  0027  0D47               	rlf	??_ADC_Sample,w
   908  0028  3841               	iorlw	65
   909  0029  009F               	movwf	31	;volatile
   910  002A  0000               	nop	;# 
   911  002B  0000               	nop	;# 
   912                           
   913                           ;adc.c: 21: GODONE = 1;
   914  002C  1283               	bcf	3,5	;RP0=0, select bank0
   915  002D  1303               	bcf	3,6	;RP1=0, select bank0
   916  002E  149F               	bsf	31,1	;volatile
   917                           
   918                           ;adc.c: 23: unsigned char i = 0;
   919  002F  01CC               	clrf	ADC_Sample@i
   920  0030                     l1796:	
   921                           ;adc.c: 24: while(GODONE)
   922                           
   923  0030  1C9F               	btfss	31,1	;volatile
   924  0031  2835               	goto	l3515
   925                           
   926                           ;adc.c: 25: {
   927                           ;adc.c: 26: if(0 == (--i))
   928  0032  0BCC               	decfsz	ADC_Sample@i,f
   929  0033  2830               	goto	l1796
   930  0034  0008               	return
   931  0035                     l3515:	
   932                           
   933                           ;adc.c: 28: }
   934                           ;adc.c: 30: ad_temp=(ADRESH<<4)+(ADRESL>>4);
   935  0035  081E               	movf	30,w	;volatile
   936  0036  00CD               	movwf	ADC_Sample@ad_temp	;volatile
   937  0037  01CE               	clrf	ADC_Sample@ad_temp+1	;volatile
   938  0038  0ECD               	swapf	ADC_Sample@ad_temp,f	;volatile
   939  0039  0ECE               	swapf	ADC_Sample@ad_temp+1,f	;volatile
   940  003A  30F0               	movlw	240
   941  003B  05CE               	andwf	ADC_Sample@ad_temp+1,f	;volatile
   942  003C  084D               	movf	ADC_Sample@ad_temp,w	;volatile
   943  003D  390F               	andlw	15
   944  003E  04CE               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
   945  003F  30F0               	movlw	240
   946  0040  05CD               	andwf	ADC_Sample@ad_temp,f	;volatile
   947  0041  1683               	bsf	3,5	;RP0=1, select bank1
   948  0042  0E1E               	swapf	30,w	;volatile
   949  0043  390F               	andlw	15
   950  0044  1283               	bcf	3,5	;RP0=0, select bank0
   951  0045  07CD               	addwf	ADC_Sample@ad_temp,f	;volatile
   952  0046  1803               	skipnc
   953  0047  0ACE               	incf	ADC_Sample@ad_temp+1,f	;volatile
   954                           
   955                           ;adc.c: 32: if(0 == admax)
   956  0048  0824               	movf	ADC_Sample@admax,w
   957  0049  0425               	iorwf	ADC_Sample@admax+1,w
   958  004A  1D03               	btfss	3,2
   959  004B  284E               	goto	l3523
   960                           
   961                           ;adc.c: 33: {
   962                           ;adc.c: 34: admax = ad_temp;
   963  004C  20BF               	fcall	PL22	;call to abstracted procedure
   964  004D  2860               	goto	l3529
   965  004E                     l3523:	
   966                           ;adc.c: 36: }
   967                           
   968                           ;adc.c: 35: admin = ad_temp;
   969                           
   970                           
   971                           ;adc.c: 37: else if(ad_temp > admax)
   972  004E  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
   973  004F  0225               	subwf	ADC_Sample@admax+1,w
   974  0050  1D03               	skipz
   975  0051  2854               	goto	u1365
   976  0052  084D               	movf	ADC_Sample@ad_temp,w	;volatile
   977  0053  0224               	subwf	ADC_Sample@admax,w
   978  0054                     u1365:	
   979  0054  1803               	skipnc
   980  0055  2858               	goto	l3527
   981                           
   982                           ;adc.c: 38: admax = ad_temp;
   983  0056  20BF               	fcall	PL22	;call to abstracted procedure
   984  0057  2864               	goto	l1802
   985  0058                     l3527:	
   986                           
   987                           ;adc.c: 39: else if(ad_temp < admin)
   988  0058  0827               	movf	ADC_Sample@admin+1,w
   989  0059  024E               	subwf	ADC_Sample@ad_temp+1,w	;volatile
   990  005A  1D03               	skipz
   991  005B  285E               	goto	u1375
   992  005C  0826               	movf	ADC_Sample@admin,w
   993  005D  024D               	subwf	ADC_Sample@ad_temp,w	;volatile
   994  005E                     u1375:	
   995  005E  1803               	skipnc
   996  005F  2864               	goto	l1802
   997  0060                     l3529:	
   998                           
   999                           ;adc.c: 40: admin = ad_temp;
  1000  0060  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1001  0061  00A7               	movwf	ADC_Sample@admin+1
  1002  0062  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  1003  0063  00A6               	movwf	ADC_Sample@admin
  1004  0064                     l1802:	
  1005                           
  1006                           ;adc.c: 42: adsum += ad_temp;
  1007  0064  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  1008  0065  00C7               	movwf	??_ADC_Sample
  1009  0066  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1010  0067  00C8               	movwf	??_ADC_Sample+1
  1011  0068  01C9               	clrf	??_ADC_Sample+2
  1012  0069  01CA               	clrf	??_ADC_Sample+3
  1013  006A  0847               	movf	??_ADC_Sample,w
  1014  006B  07A0               	addwf	ADC_Sample@adsum,f
  1015  006C  0848               	movf	??_ADC_Sample+1,w
  1016  006D  1103               	clrz
  1017  006E  1803               	skipnc
  1018  006F  3E01               	addlw	1
  1019  0070  1D03               	btfss	3,2
  1020  0071  07A1               	addwf	ADC_Sample@adsum+1,f
  1021  0072  0849               	movf	??_ADC_Sample+2,w
  1022  0073  1103               	clrz
  1023  0074  1803               	skipnc
  1024  0075  3E01               	addlw	1
  1025  0076  1D03               	btfss	3,2
  1026  0077  07A2               	addwf	ADC_Sample@adsum+2,f
  1027  0078  084A               	movf	??_ADC_Sample+3,w
  1028  0079  1103               	clrz
  1029  007A  1803               	skipnc
  1030  007B  3E01               	addlw	1
  1031  007C  1D03               	btfss	3,2
  1032  007D  07A3               	addwf	ADC_Sample@adsum+3,f
  1033                           
  1034                           ;adc.c: 43: if(++adtimes >= 10)
  1035  007E  300A               	movlw	10
  1036  007F  0AB0               	incf	ADC_Sample@adtimes,f
  1037  0080  0230               	subwf	ADC_Sample@adtimes,w
  1038  0081  1C03               	skipc
  1039  0082  0008               	return
  1040                           
  1041                           ;adc.c: 44: {
  1042                           ;adc.c: 45: adsum -= admax;
  1043  0083  0824               	movf	ADC_Sample@admax,w
  1044  0084  00C7               	movwf	??_ADC_Sample
  1045  0085  0825               	movf	ADC_Sample@admax+1,w
  1046  0086  20B0               	fcall	PL6	;call to abstracted procedure
  1047  0087  1C03               	skipc
  1048  0088  0F4A               	incfsz	??_ADC_Sample+3,w
  1049  0089  02A3               	subwf	ADC_Sample@adsum+3,f
  1050                           
  1051                           ;adc.c: 46: adsum -= admin;
  1052  008A  0826               	movf	ADC_Sample@admin,w
  1053  008B  00C7               	movwf	??_ADC_Sample
  1054  008C  0827               	movf	ADC_Sample@admin+1,w
  1055  008D  20B0               	fcall	PL6	;call to abstracted procedure
  1056  008E  1C03               	skipc
  1057  008F  0F4A               	incfsz	??_ADC_Sample+3,w
  1058  0090  02A3               	subwf	ADC_Sample@adsum+3,f
  1059                           
  1060                           ;adc.c: 48: adresult = adsum >> 3;
  1061  0091  0820               	movf	ADC_Sample@adsum,w
  1062  0092  00C7               	movwf	??_ADC_Sample
  1063  0093  0821               	movf	ADC_Sample@adsum+1,w
  1064  0094  00C8               	movwf	??_ADC_Sample+1
  1065  0095  0822               	movf	ADC_Sample@adsum+2,w
  1066  0096  00C9               	movwf	??_ADC_Sample+2
  1067  0097  0823               	movf	ADC_Sample@adsum+3,w
  1068  0098  00CA               	movwf	??_ADC_Sample+3
  1069  0099  3003               	movlw	3
  1070  009A                     u1425:	
  1071  009A  1003               	clrc
  1072  009B  0CCA               	rrf	??_ADC_Sample+3,f
  1073  009C  0CC9               	rrf	??_ADC_Sample+2,f
  1074  009D  0CC8               	rrf	??_ADC_Sample+1,f
  1075  009E  0CC7               	rrf	??_ADC_Sample,f
  1076  009F  3EFF               	addlw	-1
  1077  00A0  1D03               	skipz
  1078  00A1  289A               	goto	u1425
  1079  00A2  0848               	movf	??_ADC_Sample+1,w
  1080  00A3  00AF               	movwf	_adresult+1	;volatile
  1081  00A4  0847               	movf	??_ADC_Sample,w
  1082  00A5  00AE               	movwf	_adresult	;volatile
  1083                           
  1084                           ;adc.c: 50: adsum = 0;
  1085  00A6  01A0               	clrf	ADC_Sample@adsum
  1086  00A7  01A1               	clrf	ADC_Sample@adsum+1
  1087  00A8  01A2               	clrf	ADC_Sample@adsum+2
  1088  00A9  01A3               	clrf	ADC_Sample@adsum+3
  1089                           
  1090                           ;adc.c: 51: admin = 0;
  1091  00AA  01A6               	clrf	ADC_Sample@admin
  1092  00AB  01A7               	clrf	ADC_Sample@admin+1
  1093                           
  1094                           ;adc.c: 52: admax = 0;
  1095  00AC  01A4               	clrf	ADC_Sample@admax
  1096  00AD  01A5               	clrf	ADC_Sample@admax+1
  1097                           
  1098                           ;adc.c: 53: adtimes = 0;
  1099  00AE  01B0               	clrf	ADC_Sample@adtimes
  1100  00AF  0008               	return
  1101  00B0                     __end_of_ADC_Sample:	
  1102  00B0                     PL6:	
  1103  00B0  00C8               	movwf	??_ADC_Sample+1
  1104  00B1  01C9               	clrf	??_ADC_Sample+2
  1105  00B2  01CA               	clrf	??_ADC_Sample+3
  1106  00B3  0847               	movf	??_ADC_Sample,w
  1107  00B4  02A0               	subwf	ADC_Sample@adsum,f
  1108  00B5  0848               	movf	??_ADC_Sample+1,w
  1109  00B6  1C03               	skipc
  1110  00B7  0F48               	incfsz	??_ADC_Sample+1,w
  1111  00B8  02A1               	subwf	ADC_Sample@adsum+1,f
  1112  00B9  0849               	movf	??_ADC_Sample+2,w
  1113  00BA  1C03               	skipc
  1114  00BB  0F49               	incfsz	??_ADC_Sample+2,w
  1115  00BC  02A2               	subwf	ADC_Sample@adsum+2,f
  1116  00BD  084A               	movf	??_ADC_Sample+3,w
  1117  00BE  0008               	return
  1118  00BF                     __end_ofPL6:	
  1119  00BF                     PL22:	
  1120  00BF  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1121  00C0  00A5               	movwf	ADC_Sample@admax+1
  1122  00C1  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  1123  00C2  00A4               	movwf	ADC_Sample@admax
  1124  00C3  0008               	return
  1125  00C4                     __end_ofPL22:	
  1126                           
  1127                           	psect	text6
  1128  02D3                     __ptext6:	
  1129 ;; *************** function _ADC_Result *****************
  1130 ;; Defined at:
  1131 ;;		line 59 in file "E:\project\project0508\scm\uf166fan\adc.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;  adch            1    wreg     unsigned char 
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;  adch            1    0[BANK0 ] unsigned char 
  1136 ;;  i               1    1[BANK0 ] unsigned char 
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  1    wreg      unsigned char 
  1139 ;; Registers used:
  1140 ;;		wreg, status,2, status,0
  1141 ;; Tracked objects:
  1142 ;;		On entry : 300/0
  1143 ;;		On exit  : 300/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMMON   BANK0   BANK1
  1146 ;;      Params:         0       0       0
  1147 ;;      Locals:         0       2       0
  1148 ;;      Temps:          1       0       0
  1149 ;;      Totals:         1       2       0
  1150 ;;Total ram usage:        3 bytes
  1151 ;; Hardware stack levels used:    1
  1152 ;; Hardware stack levels required when called:    3
  1153 ;; This function calls:
  1154 ;;		Nothing
  1155 ;; This function is called by:
  1156 ;;		_readVrefADC
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           
  1161                           ;psect for function _ADC_Result
  1162  02D3                     _ADC_Result:	
  1163                           
  1164                           ;incstack = 0
  1165                           ; Regs used in _ADC_Result: [wreg+status,2+status,0]
  1166                           ;ADC_Result@adch stored from wreg
  1167  02D3  00C7               	movwf	ADC_Result@adch
  1168                           
  1169                           ;adc.c: 61: ADCON1 = 0;
  1170  02D4  1683               	bsf	3,5	;RP0=1, select bank1
  1171  02D5  019F               	clrf	31	;volatile
  1172                           
  1173                           ;adc.c: 62: ADCON0 = 0X41 | (adch << 2);
  1174  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  1175  02D7  0847               	movf	ADC_Result@adch,w
  1176  02D8  00F4               	movwf	??_ADC_Result
  1177  02D9  3001               	movlw	1
  1178  02DA  1003               	clrc
  1179  02DB                     L2:	
  1180  02DB  0DF4               	rlf	??_ADC_Result,f
  1181  02DC  3EFF               	addlw	-1
  1182  02DD  1003               	clrc
  1183  02DE  1D03               	skipz
  1184  02DF  2ADB               	goto	L2
  1185  02E0  0D74               	rlf	??_ADC_Result,w
  1186  02E1  3841               	iorlw	65
  1187  02E2  009F               	movwf	31	;volatile
  1188  02E3  0000               	nop	;# 
  1189  02E4  0000               	nop	;# 
  1190                           
  1191                           ;adc.c: 65: GODONE = 1;
  1192  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  1193  02E6  1303               	bcf	3,6	;RP1=0, select bank0
  1194  02E7  149F               	bsf	31,1	;volatile
  1195                           
  1196                           ;adc.c: 67: unsigned char i = 0;
  1197  02E8  01C8               	clrf	ADC_Result@i
  1198  02E9                     l1809:	
  1199                           ;adc.c: 68: while(GODONE)
  1200                           
  1201  02E9  1C9F               	btfss	31,1	;volatile
  1202  02EA  2AEE               	goto	l3557
  1203                           
  1204                           ;adc.c: 69: {
  1205                           ;adc.c: 70: if(0 == (--i))
  1206  02EB  0BC8               	decfsz	ADC_Result@i,f
  1207  02EC  2AE9               	goto	l1809
  1208                           
  1209                           ;adc.c: 71: return 0;
  1210  02ED  3400               	retlw	0
  1211  02EE                     l3557:	
  1212                           
  1213                           ;adc.c: 72: }
  1214                           ;adc.c: 73: return ADRESH;
  1215  02EE  081E               	movf	30,w	;volatile
  1216  02EF  0008               	return
  1217  02F0                     __end_of_ADC_Result:	
  1218                           
  1219                           	psect	text7
  1220  014D                     __ptext7:	
  1221 ;; *************** function _checkUsbStatus *****************
  1222 ;; Defined at:
  1223 ;;		line 42 in file "E:\project\project0508\scm\uf166fan\main.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;		None
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      void 
  1230 ;; Registers used:
  1231 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1232 ;; Tracked objects:
  1233 ;;		On entry : 300/0
  1234 ;;		On exit  : 300/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMMON   BANK0   BANK1
  1237 ;;      Params:         0       0       0
  1238 ;;      Locals:         0       0       0
  1239 ;;      Temps:          0       2       0
  1240 ;;      Totals:         0       2       0
  1241 ;;Total ram usage:        2 bytes
  1242 ;; Hardware stack levels used:    1
  1243 ;; Hardware stack levels required when called:    5
  1244 ;; This function calls:
  1245 ;;		_closeFan
  1246 ;; This function is called by:
  1247 ;;		_main
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           
  1252                           ;psect for function _checkUsbStatus
  1253  014D                     _checkUsbStatus:	
  1254                           
  1255                           ;main.c: 43: if (((PORTB) >> (2)&1) == 1) {
  1256                           
  1257                           ;incstack = 0
  1258                           ; Regs used in _checkUsbStatus: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1259  014D  0806               	movf	6,w	;volatile
  1260  014E  00C7               	movwf	??_checkUsbStatus
  1261  014F  1003               	clrc
  1262  0150  0CC7               	rrf	??_checkUsbStatus,f
  1263  0151  1003               	clrc
  1264  0152  0CC7               	rrf	??_checkUsbStatus,f
  1265  0153  1C47               	btfss	??_checkUsbStatus,0
  1266  0154  2964               	goto	l585
  1267                           
  1268                           ;main.c: 44: if (((PORTB) >> (1)&1) == 1) {
  1269  0155  0806               	movf	6,w	;volatile
  1270  0156  00C7               	movwf	??_checkUsbStatus
  1271  0157  1003               	clrc
  1272  0158  0CC7               	rrf	??_checkUsbStatus,f
  1273  0159  1C47               	btfss	??_checkUsbStatus,0
  1274  015A  295D               	goto	l3587
  1275                           
  1276                           ;main.c: 46: PORTA&=~(1<<0);
  1277  015B  1005               	bcf	5,0	;volatile
  1278                           
  1279                           ;main.c: 47: } else if (countTime == 0) {
  1280  015C  0008               	return
  1281  015D                     l3587:	
  1282  015D  082C               	movf	_countTime,w
  1283  015E  042D               	iorwf	_countTime+1,w
  1284  015F  1D03               	btfss	3,2
  1285  0160  0008               	return
  1286                           
  1287                           ;main.c: 49: PORTA^=(1<<0);
  1288  0161  3001               	movlw	1
  1289  0162  0685               	xorwf	5,f	;volatile
  1290  0163  0008               	return
  1291  0164                     l585:	
  1292                           
  1293                           ;main.c: 53: PORTA|=(1<<0);
  1294  0164  1405               	bsf	5,0	;volatile
  1295                           
  1296                           ;main.c: 54: if((adresult/8) > 0x63 && count300ms == 0)
  1297  0165  2180               	fcall	PL4	;call to abstracted procedure
  1298  0166  3064               	movlw	100
  1299  0167  1903               	skipnz
  1300  0168  0247               	subwf	??_checkUsbStatus,w
  1301  0169  1C03               	skipc
  1302  016A  2977               	goto	l3603
  1303  016B  0876               	movf	_count300ms,w
  1304  016C  1D03               	btfss	3,2
  1305  016D  2977               	goto	l3603
  1306                           
  1307                           ;main.c: 55: {
  1308                           ;main.c: 56: if(lowVTime < 20)
  1309  016E  3014               	movlw	20
  1310  016F  0231               	subwf	_lowVTime,w
  1311  0170  1803               	skipnc
  1312  0171  2976               	goto	l3601
  1313  0172  3001               	movlw	1
  1314                           
  1315                           ;main.c: 57: {
  1316                           ;main.c: 58: lowVTime++;
  1317  0173  0AB1               	incf	_lowVTime,f
  1318                           
  1319                           ;main.c: 60: PORTA^=(1<<0);
  1320  0174  0685               	xorwf	5,f	;volatile
  1321                           
  1322                           ;main.c: 61: }else
  1323  0175  2977               	goto	l3603
  1324  0176                     l3601:	
  1325                           
  1326                           ;main.c: 62: {
  1327                           ;main.c: 64: closeFan();
  1328  0176  2349               	fcall	_closeFan
  1329  0177                     l3603:	
  1330                           
  1331                           ;main.c: 65: }
  1332                           ;main.c: 66: }
  1333                           ;main.c: 67: if((adresult/8) < 0x63)
  1334  0177  1283               	bcf	3,5	;RP0=0, select bank0
  1335  0178  1303               	bcf	3,6	;RP1=0, select bank0
  1336  0179  2180               	fcall	PL4	;call to abstracted procedure
  1337  017A  3063               	movlw	99
  1338  017B  1903               	skipnz
  1339  017C  0247               	subwf	??_checkUsbStatus,w
  1340  017D  1C03               	btfss	3,0
  1341                           
  1342                           ;main.c: 68: {
  1343                           ;main.c: 69: lowVTime = 0;
  1344  017E  01B1               	clrf	_lowVTime
  1345  017F  0008               	return
  1346  0180                     __end_of_checkUsbStatus:	
  1347  0180                     PL4:	
  1348  0180  082F               	movf	_adresult+1,w	;volatile
  1349  0181  00C8               	movwf	??_checkUsbStatus+1
  1350  0182  082E               	movf	_adresult,w	;volatile
  1351  0183  00C7               	movwf	??_checkUsbStatus
  1352  0184  3000               	movlw	0
  1353  0185  1003               	clrc
  1354  0186  0CC8               	rrf	??_checkUsbStatus+1,f
  1355  0187  0CC7               	rrf	??_checkUsbStatus,f
  1356  0188  1003               	clrc
  1357  0189  0CC8               	rrf	??_checkUsbStatus+1,f
  1358  018A  0CC7               	rrf	??_checkUsbStatus,f
  1359  018B  1003               	clrc
  1360  018C  0CC8               	rrf	??_checkUsbStatus+1,f
  1361  018D  0CC7               	rrf	??_checkUsbStatus,f
  1362  018E  0248               	subwf	??_checkUsbStatus+1,w
  1363  018F  0008               	return
  1364  0190                     __end_ofPL4:	
  1365                           
  1366                           	psect	text8
  1367  0298                     __ptext8:	
  1368 ;; *************** function _checkKeys *****************
  1369 ;; Defined at:
  1370 ;;		line 234 in file "E:\project\project0508\scm\uf166fan\main.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;		None
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;  key3Status      1   11[BANK0 ] unsigned char 
  1375 ;;  key2Status      1   10[BANK0 ] unsigned char 
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  1    wreg      void 
  1378 ;; Registers used:
  1379 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1380 ;; Tracked objects:
  1381 ;;		On entry : 300/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMMON   BANK0   BANK1
  1385 ;;      Params:         0       0       0
  1386 ;;      Locals:         0       2       0
  1387 ;;      Temps:          0       0       0
  1388 ;;      Totals:         0       2       0
  1389 ;;Total ram usage:        2 bytes
  1390 ;; Hardware stack levels used:    1
  1391 ;; Hardware stack levels required when called:    6
  1392 ;; This function calls:
  1393 ;;		_checkFan
  1394 ;;		_closeFan
  1395 ;;		_key_driver
  1396 ;;		_setFanLevel
  1397 ;; This function is called by:
  1398 ;;		_main
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402                           
  1403                           ;psect for function _checkKeys
  1404  0298                     _checkKeys:	
  1405                           
  1406                           ;main.c: 235: if (key_driver(&key1) == 1) {
  1407                           
  1408                           ;incstack = 0
  1409                           ; Regs used in _checkKeys: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1410  0298  3040               	movlw	(low (_key1| 0))& (0+255)
  1411  0299  2109               	fcall	_key_driver
  1412  029A  3A01               	xorlw	1
  1413  029B  1D03               	skipz
  1414  029C  2AA3               	goto	l3631
  1415                           
  1416                           ;main.c: 238: if (FAN_STATUS == 1) {
  1417  029D  0B78               	decfsz	_FAN_STATUS,w
  1418  029E  2AA0               	goto	l3623
  1419                           
  1420                           ;main.c: 240: closeFan();
  1421  029F  2B49               	ljmp	l3385
  1422  02A0                     l3623:	
  1423                           ;main.c: 241: } else {
  1424                           
  1425                           
  1426                           ;main.c: 242: FAN_STATUS = 2;
  1427  02A0  3002               	movlw	2
  1428  02A1  00F8               	movwf	_FAN_STATUS
  1429                           
  1430                           ;main.c: 243: checkFan();
  1431  02A2  2A07               	ljmp	l3435
  1432  02A3                     l3631:	
  1433  02A3  3002               	movlw	2
  1434  02A4  0678               	xorwf	_FAN_STATUS,w
  1435  02A5  1D03               	btfss	3,2
  1436  02A6  2AA8               	goto	l640
  1437                           
  1438                           ;main.c: 247: checkFan();
  1439  02A7  2207               	fcall	_checkFan
  1440  02A8                     l640:	
  1441                           
  1442                           ;main.c: 248: }
  1443                           ;main.c: 250: unsigned char key2Status = key_driver(&key2);
  1444  02A8  3039               	movlw	(low (_key2| 0))& (0+255)
  1445  02A9  2109               	fcall	_key_driver
  1446  02AA  00D1               	movwf	checkKeys@key2Status
  1447                           
  1448                           ;main.c: 251: if (key2Status == 1) {
  1449  02AB  0B51               	decfsz	checkKeys@key2Status,w
  1450  02AC  2AAF               	goto	l3641
  1451                           
  1452                           ;main.c: 253: setFanLevel(1);
  1453  02AD  3001               	movlw	1
  1454  02AE  2990               	ljmp	_setFanLevel
  1455  02AF                     l3641:	
  1456                           
  1457                           ;main.c: 255: }
  1458                           ;main.c: 256: unsigned char key3Status = key_driver(&key3);
  1459  02AF  3032               	movlw	(low (_key3| 0))& (0+255)
  1460  02B0  2109               	fcall	_key_driver
  1461  02B1  00D2               	movwf	checkKeys@key3Status
  1462                           
  1463                           ;main.c: 257: if (key3Status == 1) {
  1464  02B2  0B52               	decfsz	checkKeys@key3Status,w
  1465  02B3  0008               	return
  1466                           
  1467                           ;main.c: 259: setFanLevel(-1);
  1468  02B4  30FF               	movlw	255
  1469  02B5  2990               	ljmp	_setFanLevel
  1470  02B6                     __end_of_checkKeys:	
  1471                           
  1472                           	psect	text9
  1473  0109                     __ptext9:	
  1474 ;; *************** function _key_driver *****************
  1475 ;; Defined at:
  1476 ;;		line 9 in file "E:\project\project0508\scm\uf166fan\scankey.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  key             1    wreg     PTR struct Keys
  1479 ;;		 -> key3(7), key2(7), key1(7), 
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;  key             1    2[BANK0 ] PTR struct Keys
  1482 ;;		 -> key3(7), key2(7), key1(7), 
  1483 ;;  key_read        1    1[BANK0 ] unsigned char 
  1484 ;;  key_return      1    0[BANK0 ] unsigned char 
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  1    wreg      unsigned char 
  1487 ;; Registers used:
  1488 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : B00/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMMON   BANK0   BANK1
  1494 ;;      Params:         0       0       0
  1495 ;;      Locals:         0       3       0
  1496 ;;      Temps:          0       0       0
  1497 ;;      Totals:         0       3       0
  1498 ;;Total ram usage:        3 bytes
  1499 ;; Hardware stack levels used:    1
  1500 ;; Hardware stack levels required when called:    3
  1501 ;; This function calls:
  1502 ;;		Nothing
  1503 ;; This function is called by:
  1504 ;;		_checkKeys
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508                           
  1509                           ;psect for function _key_driver
  1510  0109                     _key_driver:	
  1511                           
  1512                           ;incstack = 0
  1513                           ; Regs used in _key_driver: [wreg-fsr0h+status,2+status,0]
  1514                           ;key_driver@key stored from wreg
  1515  0109  1283               	bcf	3,5	;RP0=0, select bank0
  1516  010A  1303               	bcf	3,6	;RP1=0, select bank0
  1517  010B  00C9               	movwf	key_driver@key
  1518                           
  1519                           ;scankey.c: 12: unsigned char key_return = 0;
  1520  010C  01C7               	clrf	key_driver@key_return
  1521                           
  1522                           ;scankey.c: 13: unsigned char key_read = key->key_input;
  1523  010D  3E04               	addlw	4
  1524  010E  0084               	movwf	4
  1525  010F  1383               	bcf	3,7	;select IRP bank0
  1526  0110  0800               	movf	0,w
  1527  0111  00C8               	movwf	key_driver@key_read
  1528                           
  1529                           ;scankey.c: 15: switch (key->key_state_buffer1) {
  1530  0112  293E               	goto	l3493
  1531  0113                     l3463:	
  1532                           
  1533                           ;scankey.c: 17: if (key_read == 0) {
  1534  0113  0848               	movf	key_driver@key_read,w
  1535  0114  1D03               	btfss	3,2
  1536  0115  294B               	goto	l3495
  1537                           
  1538                           ;scankey.c: 18: key->key_state_buffer1 = 1;
  1539  0116  0A49               	incf	key_driver@key,w
  1540  0117  0084               	movwf	4
  1541  0118  0180               	clrf	0
  1542  0119  0A80               	incf	0,f
  1543  011A  294B               	goto	l3495
  1544  011B                     l3467:	
  1545                           
  1546                           ;scankey.c: 25: if (key_read == 0) {
  1547  011B  0848               	movf	key_driver@key_read,w
  1548  011C  1D03               	btfss	3,2
  1549  011D  293A               	goto	l3489
  1550                           
  1551                           ;scankey.c: 26: key->key_timer_cnt1 = 0;
  1552  011E  0849               	movf	key_driver@key,w
  1553  011F  0084               	movwf	4
  1554  0120  0180               	clrf	0
  1555                           
  1556                           ;scankey.c: 27: key->key_state_buffer1 = 2;
  1557  0121  0A49               	incf	key_driver@key,w
  1558  0122  0084               	movwf	4
  1559  0123  3002               	movlw	2
  1560  0124  2936               	goto	L3
  1561  0125                     l3475:	
  1562                           ;scankey.c: 32: key->key_state_buffer1 = 0;
  1563                           
  1564                           ;scankey.c: 31: } else {
  1565                           
  1566                           
  1567                           ;scankey.c: 39: if (key_read == 1) {
  1568  0125  0B48               	decfsz	key_driver@key_read,w
  1569  0126  292A               	goto	l3481
  1570                           
  1571                           ;scankey.c: 40: key_return = 1;
  1572  0127  01C7               	clrf	key_driver@key_return
  1573  0128  0AC7               	incf	key_driver@key_return,f
  1574  0129  293A               	goto	l3489
  1575  012A                     l3481:	
  1576                           ;scankey.c: 42: } else if (++(key->key_timer_cnt1) >= 100)
  1577                           
  1578                           ;scankey.c: 41: key->key_state_buffer1 = 0;
  1579                           
  1580  012A  0849               	movf	key_driver@key,w
  1581  012B  0084               	movwf	4
  1582  012C  3064               	movlw	100
  1583  012D  0A80               	incf	0,f
  1584  012E  0200               	subwf	0,w
  1585  012F  1C03               	skipc
  1586  0130  294B               	goto	l3495
  1587                           
  1588                           ;scankey.c: 43: {
  1589                           ;scankey.c: 44: key_return = 3;
  1590  0131  3003               	movlw	3
  1591  0132  00C7               	movwf	key_driver@key_return
  1592                           
  1593                           ;scankey.c: 45: key->key_state_buffer1 = 3;
  1594  0133  0A49               	incf	key_driver@key,w
  1595  0134  0084               	movwf	4
  1596  0135  3003               	movlw	3
  1597  0136                     L3:	
  1598  0136  0080               	movwf	0
  1599  0137  294B               	goto	l3495
  1600  0138                     l3487:	
  1601                           
  1602                           ;scankey.c: 51: if (key_read == 1)
  1603  0138  0B48               	decfsz	key_driver@key_read,w
  1604  0139  294B               	goto	l3495
  1605  013A                     l3489:	
  1606                           
  1607                           ;scankey.c: 52: {
  1608                           ;scankey.c: 53: key->key_state_buffer1 = 0;
  1609  013A  0A49               	incf	key_driver@key,w
  1610  013B  0084               	movwf	4
  1611  013C  0180               	clrf	0
  1612  013D  294B               	goto	l3495
  1613  013E                     l3493:	
  1614  013E  0A49               	incf	key_driver@key,w
  1615  013F  0084               	movwf	4
  1616  0140  0800               	movf	0,w
  1617                           
  1618                           ; Switch size 1, requested type "space"
  1619                           ; Number of cases is 4, Range of values is 0 to 3
  1620                           ; switch strategies available:
  1621                           ; Name         Instructions Cycles
  1622                           ; direct_byte           10     6 (fixed)
  1623                           ; simple_byte           13     7 (average)
  1624                           ; jumptable            260     6 (fixed)
  1625                           ;	Chosen strategy is direct_byte
  1626  0141  0084               	movwf	4
  1627  0142  3004               	movlw	4
  1628  0143  0204               	subwf	4,w
  1629  0144  1803               	skipnc
  1630  0145  294B               	goto	l3495
  1631  0146  3003               	movlw	high S3737
  1632  0147  008A               	movwf	10
  1633  0148  309F               	movlw	low S3737
  1634  0149  0704               	addwf	4,w
  1635  014A  0082               	movwf	2
  1636  014B                     l3495:	
  1637                           
  1638                           ;scankey.c: 58: return key_return;
  1639  014B  0847               	movf	key_driver@key_return,w
  1640  014C  0008               	return
  1641  014D                     __end_of_key_driver:	
  1642                           
  1643                           	psect	swtext1
  1644  039F                     __pswtext1:	
  1645  039F                     S3737:	
  1646  039F  2913               	ljmp	l3463
  1647  03A0  291B               	ljmp	l3467
  1648  03A1  2925               	ljmp	l3475
  1649  03A2  2938               	ljmp	l3487
  1650                           
  1651                           	psect	text10
  1652  0207                     __ptext10:	
  1653 ;; *************** function _checkFan *****************
  1654 ;; Defined at:
  1655 ;;		line 143 in file "E:\project\project0508\scm\uf166fan\main.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;		None
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;		None
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      void 
  1662 ;; Registers used:
  1663 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1664 ;; Tracked objects:
  1665 ;;		On entry : B00/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMMON   BANK0   BANK1
  1669 ;;      Params:         0       0       0
  1670 ;;      Locals:         0       0       0
  1671 ;;      Temps:          1       0       0
  1672 ;;      Totals:         1       0       0
  1673 ;;Total ram usage:        1 bytes
  1674 ;; Hardware stack levels used:    1
  1675 ;; Hardware stack levels required when called:    5
  1676 ;; This function calls:
  1677 ;;		_closeFan
  1678 ;;		_setFanLevel
  1679 ;; This function is called by:
  1680 ;;		_checkKeys
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           
  1685                           ;psect for function _checkFan
  1686  0207                     _checkFan:	
  1687  0207                     l3435:	
  1688                           ;incstack = 0
  1689                           ; Regs used in _checkFan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1690                           
  1691                           
  1692                           ;main.c: 144: TRISA&=~(1<<1);
  1693  0207  1683               	bsf	3,5	;RP0=1, select bank1
  1694  0208  1085               	bcf	5,1	;volatile
  1695                           
  1696                           ;main.c: 145: PORTA|=(1<<1);
  1697  0209  1283               	bcf	3,5	;RP0=0, select bank0
  1698  020A  1485               	bsf	5,1	;volatile
  1699                           
  1700                           ;main.c: 147: TRISC&=~(1<<2);
  1701  020B  1683               	bsf	3,5	;RP0=1, select bank1
  1702  020C  1107               	bcf	7,2	;volatile
  1703                           
  1704                           ;main.c: 148: PORTA|=(1<<2);
  1705  020D  1283               	bcf	3,5	;RP0=0, select bank0
  1706  020E  1505               	bsf	5,2	;volatile
  1707                           
  1708                           ;main.c: 149: T2CON = 0X04;
  1709  020F  3004               	movlw	4
  1710  0210  0092               	movwf	18	;volatile
  1711                           
  1712                           ;main.c: 152: if (((PORTB) >> (6)&1) == 0) {
  1713  0211  0806               	movf	6,w	;volatile
  1714  0212  00F5               	movwf	??_checkFan
  1715  0213  3006               	movlw	6
  1716  0214                     u1225:	
  1717  0214  1003               	clrc
  1718  0215  0CF5               	rrf	??_checkFan,f
  1719  0216  3EFF               	addlw	-1
  1720  0217  1D03               	skipz
  1721  0218  2A14               	goto	u1225
  1722  0219  1875               	btfsc	??_checkFan,0
  1723  021A  2A1E               	goto	l3443
  1724                           
  1725                           ;main.c: 153: FAN_STATUS = 1;
  1726  021B  01F8               	clrf	_FAN_STATUS
  1727  021C  0AF8               	incf	_FAN_STATUS,f
  1728                           
  1729                           ;main.c: 154: } else {
  1730  021D  2A20               	goto	l3445
  1731  021E                     l3443:	
  1732                           
  1733                           ;main.c: 155: FAN_STATUS = 2;
  1734  021E  3002               	movlw	2
  1735  021F  00F8               	movwf	_FAN_STATUS
  1736  0220                     l3445:	
  1737                           
  1738                           ;main.c: 156: }
  1739                           ;main.c: 158: setFanLevel(0);
  1740  0220  3000               	movlw	0
  1741  0221  2190               	fcall	_setFanLevel
  1742                           
  1743                           ;main.c: 161: if (FAN_STATUS == 2) {
  1744  0222  3002               	movlw	2
  1745  0223  0678               	xorwf	_FAN_STATUS,w
  1746  0224  1D03               	btfss	3,2
  1747  0225  0008               	return
  1748                           
  1749                           ;main.c: 162: fan_check_time++;
  1750  0226  1283               	bcf	3,5	;RP0=0, select bank0
  1751  0227  0AA8               	incf	_fan_check_time,f
  1752  0228  1903               	skipnz
  1753  0229  0AA9               	incf	_fan_check_time+1,f
  1754                           
  1755                           ;main.c: 163: if (fan_check_time == 3000) {
  1756  022A  30B8               	movlw	184
  1757  022B  0628               	xorwf	_fan_check_time,w
  1758  022C  300B               	movlw	11
  1759  022D  1903               	skipnz
  1760  022E  0629               	xorwf	_fan_check_time+1,w
  1761  022F  1D03               	btfss	3,2
  1762  0230  0008               	return
  1763                           
  1764                           ;main.c: 164: closeFan();
  1765  0231  2B49               	ljmp	l3385
  1766  0232                     __end_of_checkFan:	
  1767                           
  1768                           	psect	text11
  1769  0190                     __ptext11:	
  1770 ;; *************** function _setFanLevel *****************
  1771 ;; Defined at:
  1772 ;;		line 88 in file "E:\project\project0508\scm\uf166fan\main.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;  level           1    wreg     unsigned char 
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;  level           1    8[BANK0 ] unsigned char 
  1777 ;;  levelWidth      2    0        unsigned int 
  1778 ;;  tempLevel       1    9[BANK0 ] unsigned char 
  1779 ;; Return value:  Size  Location     Type
  1780 ;;                  1    wreg      void 
  1781 ;; Registers used:
  1782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1783 ;; Tracked objects:
  1784 ;;		On entry : B00/0
  1785 ;;		On exit  : 200/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMMON   BANK0   BANK1
  1788 ;;      Params:         0       0       0
  1789 ;;      Locals:         0       2       0
  1790 ;;      Temps:          0       0       0
  1791 ;;      Totals:         0       2       0
  1792 ;;Total ram usage:        2 bytes
  1793 ;; Hardware stack levels used:    1
  1794 ;; Hardware stack levels required when called:    4
  1795 ;; This function calls:
  1796 ;;		___awdiv
  1797 ;;		_setLedOn
  1798 ;; This function is called by:
  1799 ;;		_checkFan
  1800 ;;		_checkKeys
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           
  1805                           ;psect for function _setFanLevel
  1806  0190                     _setFanLevel:	
  1807                           
  1808                           ;incstack = 0
  1809                           ; Regs used in _setFanLevel: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1810                           ;setFanLevel@level stored from wreg
  1811  0190  00CF               	movwf	setFanLevel@level
  1812                           
  1813                           ;main.c: 89: if(level == 0)
  1814  0191  084F               	movf	setFanLevel@level,w
  1815  0192  1D03               	btfss	3,2
  1816  0193  2996               	goto	l3405
  1817                           
  1818                           ;main.c: 90: {
  1819                           ;main.c: 91: currentLevel = 3;
  1820  0194  3003               	movlw	3
  1821  0195  00F9               	movwf	_currentLevel
  1822  0196                     l3405:	
  1823                           
  1824                           ;main.c: 92: }
  1825                           ;main.c: 93: unsigned int levelWidth = (PR2 + 1) / 4;
  1826  0196  1683               	bsf	3,5	;RP0=1, select bank1
  1827  0197  0812               	movf	18,w	;volatile
  1828  0198  1283               	bcf	3,5	;RP0=0, select bank0
  1829  0199  00C9               	movwf	___awdiv@dividend
  1830  019A  01CA               	clrf	___awdiv@dividend+1
  1831  019B  0AC9               	incf	___awdiv@dividend,f
  1832  019C  1903               	skipnz
  1833  019D  0ACA               	incf	___awdiv@dividend+1,f
  1834  019E  3004               	movlw	4
  1835  019F  00C7               	movwf	___awdiv@divisor
  1836  01A0  01C8               	clrf	___awdiv@divisor+1
  1837  01A1  20C4               	fcall	___awdiv
  1838                           
  1839                           ;main.c: 94: char tempLevel = currentLevel + level;
  1840  01A2  084F               	movf	setFanLevel@level,w
  1841  01A3  0779               	addwf	_currentLevel,w
  1842  01A4  00D0               	movwf	setFanLevel@tempLevel
  1843                           
  1844                           ;main.c: 95: if (tempLevel > 4) {
  1845  01A5  3005               	movlw	5
  1846  01A6  0250               	subwf	setFanLevel@tempLevel,w
  1847  01A7  1C03               	skipc
  1848  01A8  29AB               	goto	l3413
  1849                           
  1850                           ;main.c: 96: tempLevel = 4;
  1851  01A9  3004               	movlw	4
  1852  01AA  00D0               	movwf	setFanLevel@tempLevel
  1853  01AB                     l3413:	
  1854                           
  1855                           ;main.c: 97: }
  1856                           ;main.c: 99: if (tempLevel < 1) {
  1857  01AB  0850               	movf	setFanLevel@tempLevel,w
  1858  01AC  1D03               	btfss	3,2
  1859  01AD  29B0               	goto	l3417
  1860                           
  1861                           ;main.c: 100: tempLevel = 1;
  1862  01AE  01D0               	clrf	setFanLevel@tempLevel
  1863  01AF  0AD0               	incf	setFanLevel@tempLevel,f
  1864  01B0                     l3417:	
  1865                           
  1866                           ;main.c: 101: }
  1867                           ;main.c: 104: if (FAN_STATUS == 1) {
  1868  01B0  0B78               	decfsz	_FAN_STATUS,w
  1869  01B1  0008               	return
  1870                           
  1871                           ;main.c: 105: currentLevel = tempLevel;
  1872  01B2  0850               	movf	setFanLevel@tempLevel,w
  1873  01B3  00F9               	movwf	_currentLevel
  1874                           
  1875                           ;main.c: 106: switch(currentLevel)
  1876  01B4  29BE               	goto	l3431
  1877  01B5                     l3421:	
  1878                           
  1879                           ;main.c: 109: CCPR1L = 1;
  1880  01B5  3001               	movlw	1
  1881  01B6  29BC               	goto	L6
  1882  01B7                     l3423:	
  1883                           ;main.c: 110: break;
  1884                           
  1885                           
  1886                           ;main.c: 112: CCPR1L = 2;
  1887  01B7  3002               	movlw	2
  1888  01B8  29BC               	goto	L6
  1889  01B9                     l3425:	
  1890                           ;main.c: 113: break;
  1891                           
  1892                           
  1893                           ;main.c: 115: CCPR1L = 3;
  1894  01B9  3003               	movlw	3
  1895  01BA  29BC               	goto	L6
  1896  01BB                     l3427:	
  1897                           ;main.c: 116: break;
  1898                           
  1899                           
  1900                           ;main.c: 118: CCPR1L = 5;
  1901  01BB  3005               	movlw	5
  1902  01BC                     L6:	
  1903  01BC  0095               	movwf	21	;volatile
  1904                           
  1905                           ;main.c: 119: break;
  1906  01BD  29CC               	goto	l3433
  1907  01BE                     l3431:	
  1908  01BE  0879               	movf	_currentLevel,w
  1909                           
  1910                           ; Switch size 1, requested type "space"
  1911                           ; Number of cases is 4, Range of values is 1 to 4
  1912                           ; switch strategies available:
  1913                           ; Name         Instructions Cycles
  1914                           ; simple_byte           13     7 (average)
  1915                           ; direct_byte           13     9 (fixed)
  1916                           ; jumptable            263     9 (fixed)
  1917                           ;	Chosen strategy is simple_byte
  1918  01BF  3A01               	xorlw	1	; case 1
  1919  01C0  1903               	skipnz
  1920  01C1  29B5               	goto	l3421
  1921  01C2  3A03               	xorlw	3	; case 2
  1922  01C3  1903               	skipnz
  1923  01C4  29B7               	goto	l3423
  1924  01C5  3A01               	xorlw	1	; case 3
  1925  01C6  1903               	skipnz
  1926  01C7  29B9               	goto	l3425
  1927  01C8  3A07               	xorlw	7	; case 4
  1928  01C9  1903               	skipnz
  1929  01CA  29BB               	goto	l3427
  1930  01CB  29CC               	goto	l3433
  1931  01CC                     l3433:	
  1932                           
  1933                           ;main.c: 123: setLedOn(currentLevel);
  1934  01CC  0879               	movf	_currentLevel,w
  1935  01CD  29CE               	ljmp	_setLedOn
  1936  01CE                     __end_of_setFanLevel:	
  1937                           
  1938                           	psect	text12
  1939  00C4                     __ptext12:	
  1940 ;; *************** function ___awdiv *****************
  1941 ;; Defined at:
  1942 ;;		line 6 in file "E:\cms\SCMCU_IDE_V2.00.07\data\sources\common\awdiv.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  divisor         2    0[BANK0 ] int 
  1945 ;;  dividend        2    2[BANK0 ] int 
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;  quotient        2    6[BANK0 ] int 
  1948 ;;  sign            1    5[BANK0 ] unsigned char 
  1949 ;;  counter         1    4[BANK0 ] unsigned char 
  1950 ;; Return value:  Size  Location     Type
  1951 ;;                  2    0[BANK0 ] int 
  1952 ;; Registers used:
  1953 ;;		wreg, status,2, status,0
  1954 ;; Tracked objects:
  1955 ;;		On entry : B00/0
  1956 ;;		On exit  : B00/0
  1957 ;;		Unchanged: 800/0
  1958 ;; Data sizes:     COMMON   BANK0   BANK1
  1959 ;;      Params:         0       4       0
  1960 ;;      Locals:         0       4       0
  1961 ;;      Temps:          0       0       0
  1962 ;;      Totals:         0       8       0
  1963 ;;Total ram usage:        8 bytes
  1964 ;; Hardware stack levels used:    1
  1965 ;; Hardware stack levels required when called:    3
  1966 ;; This function calls:
  1967 ;;		Nothing
  1968 ;; This function is called by:
  1969 ;;		_setFanLevel
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           
  1974                           ;psect for function ___awdiv
  1975  00C4                     ___awdiv:	
  1976                           
  1977                           ;incstack = 0
  1978                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1979  00C4  01CC               	clrf	___awdiv@sign
  1980  00C5  1FC8               	btfss	___awdiv@divisor+1,7
  1981  00C6  28CE               	goto	l3349
  1982  00C7  09C7               	comf	___awdiv@divisor,f
  1983  00C8  09C8               	comf	___awdiv@divisor+1,f
  1984  00C9  0AC7               	incf	___awdiv@divisor,f
  1985  00CA  1903               	skipnz
  1986  00CB  0AC8               	incf	___awdiv@divisor+1,f
  1987  00CC  01CC               	clrf	___awdiv@sign
  1988  00CD  0ACC               	incf	___awdiv@sign,f
  1989  00CE                     l3349:	
  1990  00CE  1FCA               	btfss	___awdiv@dividend+1,7
  1991  00CF  28D7               	goto	l3355
  1992  00D0  09C9               	comf	___awdiv@dividend,f
  1993  00D1  09CA               	comf	___awdiv@dividend+1,f
  1994  00D2  0AC9               	incf	___awdiv@dividend,f
  1995  00D3  1903               	skipnz
  1996  00D4  0ACA               	incf	___awdiv@dividend+1,f
  1997  00D5  3001               	movlw	1
  1998  00D6  06CC               	xorwf	___awdiv@sign,f
  1999  00D7                     l3355:	
  2000  00D7  01CD               	clrf	___awdiv@quotient
  2001  00D8  01CE               	clrf	___awdiv@quotient+1
  2002  00D9  0847               	movf	___awdiv@divisor,w
  2003  00DA  0448               	iorwf	___awdiv@divisor+1,w
  2004  00DB  1903               	btfsc	3,2
  2005  00DC  28FC               	goto	l3377
  2006  00DD  01CB               	clrf	___awdiv@counter
  2007  00DE                     L7:	
  2008  00DE  0ACB               	incf	___awdiv@counter,f
  2009  00DF  1BC8               	btfsc	___awdiv@divisor+1,7
  2010  00E0  28E5               	goto	l3365
  2011  00E1  1003               	clrc
  2012  00E2  0DC7               	rlf	___awdiv@divisor,f
  2013  00E3  0DC8               	rlf	___awdiv@divisor+1,f
  2014  00E4  28DE               	goto	L7
  2015  00E5                     l3365:	
  2016  00E5  1003               	clrc
  2017  00E6  0DCD               	rlf	___awdiv@quotient,f
  2018  00E7  0DCE               	rlf	___awdiv@quotient+1,f
  2019  00E8  0848               	movf	___awdiv@divisor+1,w
  2020  00E9  024A               	subwf	___awdiv@dividend+1,w
  2021  00EA  1D03               	skipz
  2022  00EB  28EE               	goto	u1155
  2023  00EC  0847               	movf	___awdiv@divisor,w
  2024  00ED  0249               	subwf	___awdiv@dividend,w
  2025  00EE                     u1155:	
  2026  00EE  1C03               	skipc
  2027  00EF  28F8               	goto	L8
  2028  00F0  0847               	movf	___awdiv@divisor,w
  2029  00F1  02C9               	subwf	___awdiv@dividend,f
  2030  00F2  0848               	movf	___awdiv@divisor+1,w
  2031  00F3  1C03               	skipc
  2032  00F4  03CA               	decf	___awdiv@dividend+1,f
  2033  00F5  02CA               	subwf	___awdiv@dividend+1,f
  2034  00F6  144D               	bsf	___awdiv@quotient,0
  2035  00F7  1003               	clrc
  2036  00F8                     L8:	
  2037  00F8  0CC8               	rrf	___awdiv@divisor+1,f
  2038  00F9  0CC7               	rrf	___awdiv@divisor,f
  2039  00FA  0BCB               	decfsz	___awdiv@counter,f
  2040  00FB  28E5               	goto	l3365
  2041  00FC                     l3377:	
  2042  00FC  084C               	movf	___awdiv@sign,w
  2043  00FD  1903               	btfsc	3,2
  2044  00FE  2904               	goto	l3381
  2045  00FF  09CD               	comf	___awdiv@quotient,f
  2046  0100  09CE               	comf	___awdiv@quotient+1,f
  2047  0101  0ACD               	incf	___awdiv@quotient,f
  2048  0102  1903               	skipnz
  2049  0103  0ACE               	incf	___awdiv@quotient+1,f
  2050  0104                     l3381:	
  2051  0104  084E               	movf	___awdiv@quotient+1,w
  2052  0105  00C8               	movwf	?___awdiv+1
  2053  0106  084D               	movf	___awdiv@quotient,w
  2054  0107  00C7               	movwf	?___awdiv
  2055  0108  0008               	return
  2056  0109                     __end_of___awdiv:	
  2057                           
  2058                           	psect	text13
  2059  0349                     __ptext13:	
  2060 ;; *************** function _closeFan *****************
  2061 ;; Defined at:
  2062 ;;		line 129 in file "E:\project\project0508\scm\uf166fan\main.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;		None
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;		None
  2067 ;; Return value:  Size  Location     Type
  2068 ;;                  1    wreg      void 
  2069 ;; Registers used:
  2070 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2071 ;; Tracked objects:
  2072 ;;		On entry : 300/0
  2073 ;;		On exit  : 0/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMMON   BANK0   BANK1
  2076 ;;      Params:         0       0       0
  2077 ;;      Locals:         0       0       0
  2078 ;;      Temps:          0       0       0
  2079 ;;      Totals:         0       0       0
  2080 ;;Total ram usage:        0 bytes
  2081 ;; Hardware stack levels used:    1
  2082 ;; Hardware stack levels required when called:    4
  2083 ;; This function calls:
  2084 ;;		_Init_PWM
  2085 ;;		_Sleep_Mode
  2086 ;;		_setLedOn
  2087 ;; This function is called by:
  2088 ;;		_checkUsbStatus
  2089 ;;		_checkFan
  2090 ;;		_checkKeys
  2091 ;; This function uses a non-reentrant model
  2092 ;;
  2093                           
  2094                           
  2095                           ;psect for function _closeFan
  2096  0349                     _closeFan:	
  2097  0349                     l3385:	
  2098                           ;incstack = 0
  2099                           ; Regs used in _closeFan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2100                           
  2101                           
  2102                           ;main.c: 130: Init_PWM();
  2103  0349  2357               	fcall	_Init_PWM
  2104                           
  2105                           ;main.c: 131: currentLevel = 2;
  2106  034A  3002               	movlw	2
  2107  034B  00F9               	movwf	_currentLevel
  2108                           
  2109                           ;main.c: 132: setLedOn(5);
  2110  034C  3005               	movlw	5
  2111  034D  21CE               	fcall	_setLedOn
  2112                           
  2113                           ;main.c: 133: PORTA|=(1<<0);
  2114  034E  1283               	bcf	3,5	;RP0=0, select bank0
  2115  034F  1405               	bsf	5,0	;volatile
  2116                           
  2117                           ;main.c: 135: TRISC|=(1<<2);
  2118  0350  1683               	bsf	3,5	;RP0=1, select bank1
  2119  0351  1507               	bsf	7,2	;volatile
  2120                           
  2121                           ;main.c: 136: fan_check_time = 0;
  2122  0352  1283               	bcf	3,5	;RP0=0, select bank0
  2123  0353  01A8               	clrf	_fan_check_time
  2124  0354  01A9               	clrf	_fan_check_time+1
  2125                           
  2126                           ;main.c: 137: FAN_STATUS = 0;
  2127  0355  01F8               	clrf	_FAN_STATUS
  2128                           
  2129                           ;main.c: 138: Sleep_Mode();
  2130  0356  2A56               	ljmp	l2781
  2131  0357                     __end_of_closeFan:	
  2132                           
  2133                           	psect	text14
  2134  01CE                     __ptext14:	
  2135 ;; *************** function _setLedOn *****************
  2136 ;; Defined at:
  2137 ;;		line 174 in file "E:\project\project0508\scm\uf166fan\main.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  ledIndex        1    wreg     unsigned char 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  ledIndex        1    4[COMMON] unsigned char 
  2142 ;; Return value:  Size  Location     Type
  2143 ;;                  1    wreg      void 
  2144 ;; Registers used:
  2145 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2146 ;; Tracked objects:
  2147 ;;		On entry : 200/0
  2148 ;;		On exit  : 200/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMMON   BANK0   BANK1
  2151 ;;      Params:         0       0       0
  2152 ;;      Locals:         1       0       0
  2153 ;;      Temps:          0       0       0
  2154 ;;      Totals:         1       0       0
  2155 ;;Total ram usage:        1 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    3
  2158 ;; This function calls:
  2159 ;;		Nothing
  2160 ;; This function is called by:
  2161 ;;		_setFanLevel
  2162 ;;		_closeFan
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           
  2167                           ;psect for function _setLedOn
  2168  01CE                     _setLedOn:	
  2169                           
  2170                           ;incstack = 0
  2171                           ; Regs used in _setLedOn: [wreg-fsr0h+status,2+status,0]
  2172                           ;setLedOn@ledIndex stored from wreg
  2173  01CE  00F4               	movwf	setLedOn@ledIndex
  2174                           
  2175                           ;main.c: 175: switch(ledIndex) {
  2176  01CF  29EB               	goto	l3335
  2177  01D0                     l624:	
  2178                           ;main.c: 176: case 1:
  2179                           
  2180                           
  2181                           ;main.c: 178: TRISC&=~(1<<1);
  2182                           
  2183                           ;main.c: 179: TRISA|=(1<<7);
  2184                           
  2185                           ;main.c: 180: TRISC&=~(1<<0);
  2186                           
  2187                           ;main.c: 181: PORTA&=~(1<<7);
  2188  01D0  21FA               	fcall	PL18	;call to abstracted procedure
  2189                           
  2190                           ;main.c: 182: PORTC|=(1<<0);
  2191  01D1  1407               	bsf	7,0	;volatile
  2192                           
  2193                           ;main.c: 183: PORTC&=~(1<<1);
  2194  01D2  1087               	bcf	7,1	;volatile
  2195                           
  2196                           ;main.c: 184: break;
  2197  01D3  0008               	return
  2198  01D4                     l626:	
  2199                           ;main.c: 185: case 2:
  2200                           
  2201                           
  2202                           ;main.c: 186: TRISC&=~(1<<1);
  2203                           
  2204                           ;main.c: 187: TRISA|=(1<<7);
  2205                           
  2206                           ;main.c: 188: TRISC&=~(1<<0);
  2207                           
  2208                           ;main.c: 189: PORTA&=~(1<<7);
  2209  01D4  21FA               	fcall	PL18	;call to abstracted procedure
  2210                           
  2211                           ;main.c: 190: PORTC&=~(1<<0);
  2212  01D5  1007               	bcf	7,0	;volatile
  2213                           
  2214                           ;main.c: 191: PORTC|=(1<<1);
  2215  01D6  1487               	bsf	7,1	;volatile
  2216                           
  2217                           ;main.c: 192: break;
  2218  01D7  0008               	return
  2219  01D8                     l627:	
  2220                           ;main.c: 193: case 3:
  2221                           
  2222                           
  2223                           ;main.c: 195: TRISC|=(1<<0);
  2224                           
  2225                           ;main.c: 196: TRISA&=~(1<<7);
  2226                           
  2227                           ;main.c: 197: TRISC&=~(1<<1);
  2228                           
  2229                           ;main.c: 198: PORTA|=(1<<7);
  2230  01D8  2201               	fcall	PL20	;call to abstracted procedure
  2231  01D9  1785               	bsf	5,7	;volatile
  2232                           
  2233                           ;main.c: 199: PORTC&=~(1<<0);
  2234  01DA  1007               	bcf	7,0	;volatile
  2235                           
  2236                           ;main.c: 200: PORTC&=~(1<<1);
  2237  01DB  1087               	bcf	7,1	;volatile
  2238                           
  2239                           ;main.c: 201: break;
  2240  01DC  0008               	return
  2241  01DD                     l628:	
  2242                           ;main.c: 202: case 4:
  2243                           
  2244                           
  2245                           ;main.c: 203: TRISC|=(1<<0);
  2246                           
  2247                           ;main.c: 204: TRISA&=~(1<<7);
  2248                           
  2249                           ;main.c: 205: TRISC&=~(1<<1);
  2250                           
  2251                           ;main.c: 206: PORTA&=~(1<<7);
  2252  01DD  2201               	fcall	PL20	;call to abstracted procedure
  2253  01DE  1385               	bcf	5,7	;volatile
  2254                           
  2255                           ;main.c: 207: PORTC|=(1<<0);
  2256  01DF  1407               	bsf	7,0	;volatile
  2257                           
  2258                           ;main.c: 208: PORTC|=(1<<1);
  2259  01E0  1487               	bsf	7,1	;volatile
  2260                           
  2261                           ;main.c: 209: break;
  2262  01E1  0008               	return
  2263  01E2                     l629:	
  2264                           ;main.c: 210: case 5:
  2265                           
  2266                           
  2267                           ;main.c: 212: TRISC|=(1<<0);
  2268  01E2  1683               	bsf	3,5	;RP0=1, select bank1
  2269  01E3  1407               	bsf	7,0	;volatile
  2270                           
  2271                           ;main.c: 213: TRISA|=(1<<7);
  2272  01E4  1785               	bsf	5,7	;volatile
  2273                           
  2274                           ;main.c: 214: TRISC|=(1<<1);
  2275  01E5  1487               	bsf	7,1	;volatile
  2276                           
  2277                           ;main.c: 215: PORTC&=~(1<<0);
  2278  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  2279  01E7  1007               	bcf	7,0	;volatile
  2280                           
  2281                           ;main.c: 216: PORTA&=~(1<<7);
  2282  01E8  1385               	bcf	5,7	;volatile
  2283                           
  2284                           ;main.c: 217: PORTC&=~(1<<1);
  2285  01E9  1087               	bcf	7,1	;volatile
  2286                           
  2287                           ;main.c: 218: break;
  2288  01EA  0008               	return
  2289  01EB                     l3335:	
  2290  01EB  0874               	movf	setLedOn@ledIndex,w
  2291                           
  2292                           ; Switch size 1, requested type "space"
  2293                           ; Number of cases is 5, Range of values is 1 to 5
  2294                           ; switch strategies available:
  2295                           ; Name         Instructions Cycles
  2296                           ; direct_byte           14     9 (fixed)
  2297                           ; simple_byte           16     9 (average)
  2298                           ; jumptable            263     9 (fixed)
  2299                           ;	Chosen strategy is direct_byte
  2300  01EC  3EFF               	addlw	-1
  2301  01ED  1C03               	skipc
  2302  01EE  0008               	return
  2303  01EF  0084               	movwf	4
  2304  01F0  3005               	movlw	5
  2305  01F1  0204               	subwf	4,w
  2306  01F2  1803               	skipnc
  2307  01F3  0008               	return
  2308  01F4  3003               	movlw	high S3739
  2309  01F5  008A               	movwf	10
  2310  01F6  309A               	movlw	low S3739
  2311  01F7  0704               	addwf	4,w
  2312  01F8  0082               	movwf	2
  2313  01F9  0008               	return
  2314  01FA                     __end_of_setLedOn:	
  2315  01FA                     PL18:	
  2316  01FA  1683               	bsf	3,5	;RP0=1, select bank1
  2317  01FB  1087               	bcf	7,1	;volatile
  2318  01FC  1785               	bsf	5,7	;volatile
  2319  01FD  1007               	bcf	7,0	;volatile
  2320  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  2321  01FF  1385               	bcf	5,7	;volatile
  2322  0200  0008               	return
  2323  0201                     __end_ofPL18:	
  2324  0201                     PL20:	
  2325  0201  1683               	bsf	3,5	;RP0=1, select bank1
  2326  0202  1407               	bsf	7,0	;volatile
  2327  0203  1385               	bcf	5,7	;volatile
  2328  0204  1087               	bcf	7,1	;volatile
  2329  0205  1283               	bcf	3,5	;RP0=0, select bank0
  2330  0206  0008               	return
  2331  0207                     __end_ofPL20:	
  2332                           
  2333                           	psect	swtext2
  2334  039A                     __pswtext2:	
  2335  039A                     S3739:	
  2336  039A  29D0               	ljmp	l624
  2337  039B  29D4               	ljmp	l626
  2338  039C  29D8               	ljmp	l627
  2339  039D  29DD               	ljmp	l628
  2340  039E  29E2               	ljmp	l629
  2341                           
  2342                           	psect	text15
  2343  0256                     __ptext15:	
  2344 ;; *************** function _Sleep_Mode *****************
  2345 ;; Defined at:
  2346 ;;		line 330 in file "E:\project\project0508\scm\uf166fan\main.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;		None
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;		None
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  1    wreg      void 
  2353 ;; Registers used:
  2354 ;;		wreg, status,2
  2355 ;; Tracked objects:
  2356 ;;		On entry : 300/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMMON   BANK0   BANK1
  2360 ;;      Params:         0       0       0
  2361 ;;      Locals:         0       0       0
  2362 ;;      Temps:          0       0       0
  2363 ;;      Totals:         0       0       0
  2364 ;;Total ram usage:        0 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    3
  2367 ;; This function calls:
  2368 ;;		Nothing
  2369 ;; This function is called by:
  2370 ;;		_closeFan
  2371 ;;		_main
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           
  2376                           ;psect for function _Sleep_Mode
  2377  0256                     _Sleep_Mode:	
  2378  0256                     l2781:	
  2379                           ;incstack = 0
  2380                           ; Regs used in _Sleep_Mode: [wreg+status,2]
  2381                           
  2382                           
  2383                           ;main.c: 331: INTCON = 0;
  2384  0256  018B               	clrf	11	;volatile
  2385                           
  2386                           ;main.c: 333: OPTION_REG = 0;
  2387  0257  1683               	bsf	3,5	;RP0=1, select bank1
  2388  0258  0181               	clrf	1	;volatile
  2389                           
  2390                           ;main.c: 335: TRISA = 0B00000000;
  2391  0259  0185               	clrf	5	;volatile
  2392                           
  2393                           ;main.c: 336: PORTA = 0B00000000;
  2394  025A  1283               	bcf	3,5	;RP0=0, select bank0
  2395  025B  0185               	clrf	5	;volatile
  2396                           
  2397                           ;main.c: 337: WPUA = 0B00000000;
  2398  025C  1683               	bsf	3,5	;RP0=1, select bank3
  2399  025D  1703               	bsf	3,6	;RP1=1, select bank3
  2400  025E  018E               	clrf	14	;volatile
  2401                           
  2402                           ;main.c: 339: TRISB = 0B00100100;
  2403  025F  3024               	movlw	36
  2404  0260  1303               	bcf	3,6	;RP1=0, select bank1
  2405  0261  0086               	movwf	6	;volatile
  2406                           
  2407                           ;main.c: 340: PORTB = 0B00000000;
  2408  0262  1283               	bcf	3,5	;RP0=0, select bank0
  2409  0263  0186               	clrf	6	;volatile
  2410                           
  2411                           ;main.c: 342: PORTB = 0;
  2412  0264  0186               	clrf	6	;volatile
  2413                           
  2414                           ;main.c: 343: WPUB = 0B00100000;
  2415  0265  3020               	movlw	32
  2416  0266  1683               	bsf	3,5	;RP0=1, select bank1
  2417  0267  0095               	movwf	21	;volatile
  2418                           
  2419                           ;main.c: 345: IOCB = 0B00100100;
  2420  0268  3024               	movlw	36
  2421  0269  0096               	movwf	22	;volatile
  2422                           
  2423                           ;main.c: 346: RBIE = 1;
  2424  026A  158B               	bsf	11,3	;volatile
  2425                           
  2426                           ;main.c: 347: GIE = 1;
  2427  026B  178B               	bsf	11,7	;volatile
  2428                           
  2429                           ;main.c: 349: ADCON0 = 0;
  2430  026C  1283               	bcf	3,5	;RP0=0, select bank0
  2431  026D  019F               	clrf	31	;volatile
  2432                           
  2433                           ;main.c: 351: OSCCON = 0X70;
  2434  026E  3070               	movlw	112
  2435  026F  1683               	bsf	3,5	;RP0=1, select bank1
  2436  0270  008F               	movwf	15	;volatile
  2437                           
  2438                           ;main.c: 353: PORTB;
  2439  0271  1283               	bcf	3,5	;RP0=0, select bank0
  2440  0272  0806               	movf	6,w	;volatile
  2441  0273  0064               	clrwdt	;# 
  2442  0274  0063               	sleep	;# 
  2443  0275  0000               	nop	;# 
  2444  0276  0008               	return
  2445  0277                     __end_of_Sleep_Mode:	
  2446                           
  2447                           	psect	text16
  2448  0370                     __ptext16:	
  2449 ;; *************** function _Init_Config *****************
  2450 ;; Defined at:
  2451 ;;		line 302 in file "E:\project\project0508\scm\uf166fan\main.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;		None
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      void 
  2458 ;; Registers used:
  2459 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : B00/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMMON   BANK0   BANK1
  2465 ;;      Params:         0       0       0
  2466 ;;      Locals:         0       0       0
  2467 ;;      Temps:          0       0       0
  2468 ;;      Totals:         0       0       0
  2469 ;;Total ram usage:        0 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    4
  2472 ;; This function calls:
  2473 ;;		_Init_GPIO
  2474 ;;		_Init_Interupt
  2475 ;;		_Init_PWM
  2476 ;;		_Init_System
  2477 ;;		_resetKey
  2478 ;; This function is called by:
  2479 ;;		_main
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           
  2484                           ;psect for function _Init_Config
  2485  0370                     _Init_Config:	
  2486                           
  2487                           ;main.c: 304: Init_System();
  2488                           
  2489                           ;incstack = 0
  2490                           ; Regs used in _Init_Config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2491  0370  23A3               	fcall	_Init_System
  2492                           
  2493                           ;main.c: 305: Init_GPIO();
  2494  0371  2306               	fcall	_Init_GPIO
  2495                           
  2496                           ;main.c: 306: Init_Interupt();
  2497  0372  238D               	fcall	_Init_Interupt
  2498                           
  2499                           ;main.c: 307: Init_PWM();
  2500  0373  2357               	fcall	_Init_PWM
  2501                           
  2502                           ;main.c: 309: IOCB = 0x04;
  2503                           
  2504                           ;main.c: 310: TMR0 = 155;
  2505                           
  2506                           ;main.c: 311: TO = 0;
  2507                           
  2508                           ;main.c: 314: key1.key_index = 5;
  2509                           
  2510                           ;main.c: 316: key2.key_index = 4;
  2511                           
  2512                           ;main.c: 318: key3.key_index = 3;
  2513                           
  2514                           ;main.c: 319: resetKey(&key1);
  2515  0374  2282               	fcall	PL8	;call to abstracted procedure
  2516  0375  2329               	fcall	_resetKey
  2517                           
  2518                           ;main.c: 320: resetKey(&key2);
  2519  0376  3039               	movlw	(low (_key2| 0))& (0+255)
  2520  0377  2329               	fcall	_resetKey
  2521                           
  2522                           ;main.c: 321: resetKey(&key3);
  2523  0378  3032               	movlw	(low (_key3| 0))& (0+255)
  2524  0379  2329               	fcall	_resetKey
  2525                           
  2526                           ;main.c: 323: TRISA = 0;
  2527                           
  2528                           ;main.c: 324: TRISB = 0x7E;
  2529                           
  2530                           ;main.c: 325: TRISC = 0;
  2531                           
  2532                           ;main.c: 326: lowVTime = 0;
  2533  037A  2A8F               	ljmp	PL12	;call to abstracted procedure
  2534  037B                     __end_of_Init_Config:	
  2535                           
  2536                           	psect	text17
  2537  0329                     __ptext17:	
  2538 ;; *************** function _resetKey *****************
  2539 ;; Defined at:
  2540 ;;		line 100 in file "E:\project\project0508\scm\uf166fan\scankey.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;  key             1    wreg     PTR struct Keys
  2543 ;;		 -> key3(7), key2(7), key1(7), 
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;  key             1    4[COMMON] PTR struct Keys
  2546 ;;		 -> key3(7), key2(7), key1(7), 
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  1    wreg      void 
  2549 ;; Registers used:
  2550 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 800/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMMON   BANK0   BANK1
  2556 ;;      Params:         0       0       0
  2557 ;;      Locals:         1       0       0
  2558 ;;      Temps:          0       0       0
  2559 ;;      Totals:         1       0       0
  2560 ;;Total ram usage:        1 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; Hardware stack levels required when called:    3
  2563 ;; This function calls:
  2564 ;;		Nothing
  2565 ;; This function is called by:
  2566 ;;		_Init_Config
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           
  2571                           ;psect for function _resetKey
  2572  0329                     _resetKey:	
  2573                           
  2574                           ;incstack = 0
  2575                           ; Regs used in _resetKey: [wreg-fsr0h+status,2+status,0]
  2576                           ;resetKey@key stored from wreg
  2577  0329  00F4               	movwf	resetKey@key
  2578                           
  2579                           ;scankey.c: 101: key->key_timer_cnt1 = key->key_timer_cnt2 = key->key_state_buffer1 = ke
      +                          y->key_state_buffer2 = 0;
  2580  032A  3E03               	addlw	3
  2581  032B  0084               	movwf	4
  2582  032C  1383               	bcf	3,7	;select IRP bank0
  2583  032D  0180               	clrf	0
  2584  032E  0A74               	incf	resetKey@key,w
  2585  032F  0084               	movwf	4
  2586  0330  0180               	clrf	0
  2587  0331  0874               	movf	resetKey@key,w
  2588  0332  3E02               	addlw	2
  2589  0333  0084               	movwf	4
  2590  0334  0180               	clrf	0
  2591  0335  0874               	movf	resetKey@key,w
  2592  0336  0084               	movwf	4
  2593  0337  0180               	clrf	0
  2594  0338  0008               	return
  2595  0339                     __end_of_resetKey:	
  2596                           
  2597                           	psect	text18
  2598  03A3                     __ptext18:	
  2599 ;; *************** function _Init_System *****************
  2600 ;; Defined at:
  2601 ;;		line 3 in file "E:\project\project0508\scm\uf166fan\init.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;		None
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;		None
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      void 
  2608 ;; Registers used:
  2609 ;;		wreg, status,2
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 300/100
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMMON   BANK0   BANK1
  2615 ;;      Params:         0       0       0
  2616 ;;      Locals:         0       0       0
  2617 ;;      Temps:          0       0       0
  2618 ;;      Totals:         0       0       0
  2619 ;;Total ram usage:        0 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    3
  2622 ;; This function calls:
  2623 ;;		Nothing
  2624 ;; This function is called by:
  2625 ;;		_Init_Config
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           
  2630                           ;psect for function _Init_System
  2631  03A3                     _Init_System:	
  2632                           
  2633                           ;incstack = 0
  2634                           ; Regs used in _Init_System: [wreg+status,2]
  2635  03A3  0000               	nop	;# 
  2636  03A4  0064               	clrwdt	;# 
  2637                           
  2638                           ;init.c: 6: INTCON = 0;
  2639                           
  2640                           ;init.c: 7: OSCCON = 0X71;
  2641                           
  2642                           ;init.c: 8: OPTION_REG = 0x00;
  2643  03A5  2B7E               	ljmp	PL14	;call to abstracted procedure
  2644  03A6                     __end_of_Init_System:	
  2645                           
  2646                           	psect	text19
  2647  0357                     __ptext19:	
  2648 ;; *************** function _Init_PWM *****************
  2649 ;; Defined at:
  2650 ;;		line 74 in file "E:\project\project0508\scm\uf166fan\main.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;		None
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;		None
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  1    wreg      void 
  2657 ;; Registers used:
  2658 ;;		wreg, status,2
  2659 ;; Tracked objects:
  2660 ;;		On entry : 300/0
  2661 ;;		On exit  : 300/100
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMMON   BANK0   BANK1
  2664 ;;      Params:         0       0       0
  2665 ;;      Locals:         0       0       0
  2666 ;;      Temps:          0       0       0
  2667 ;;      Totals:         0       0       0
  2668 ;;Total ram usage:        0 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    3
  2671 ;; This function calls:
  2672 ;;		Nothing
  2673 ;; This function is called by:
  2674 ;;		_closeFan
  2675 ;;		_Init_Config
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           
  2680                           ;psect for function _Init_PWM
  2681  0357                     _Init_PWM:	
  2682                           
  2683                           ;main.c: 75: CCP1CON = 0x0F;
  2684                           
  2685                           ;incstack = 0
  2686                           ; Regs used in _Init_PWM: [wreg+status,2]
  2687                           
  2688                           ;main.c: 76: T2CON = 0;
  2689                           
  2690                           ;main.c: 77: PR2 = 7;
  2691                           
  2692                           ;main.c: 79: CCPR1L = 0;
  2693                           
  2694                           ;main.c: 80: TMR2IF = 0;
  2695                           
  2696                           ;main.c: 81: T2CON = 0;
  2697                           
  2698                           ;main.c: 83: TRISC&=~(1<<2);
  2699  0357  2B58               	ljmp	PL10	;call to abstracted procedure
  2700  0358                     __end_of_Init_PWM:	
  2701  0358                     PL10:	
  2702  0358  300F               	movlw	15
  2703  0359  0097               	movwf	23	;volatile
  2704  035A  0192               	clrf	18	;volatile
  2705  035B  3007               	movlw	7
  2706  035C  1683               	bsf	3,5	;RP0=1, select bank1
  2707  035D  0092               	movwf	18	;volatile
  2708  035E  1283               	bcf	3,5	;RP0=0, select bank0
  2709  035F  0195               	clrf	21	;volatile
  2710  0360  108C               	bcf	12,1	;volatile
  2711  0361  0192               	clrf	18	;volatile
  2712  0362  1683               	bsf	3,5	;RP0=1, select bank1
  2713  0363  1107               	bcf	7,2	;volatile
  2714  0364  0008               	return
  2715  0365                     __end_ofPL10:	
  2716                           
  2717                           	psect	text20
  2718  038D                     __ptext20:	
  2719 ;; *************** function _Init_Interupt *****************
  2720 ;; Defined at:
  2721 ;;		line 27 in file "E:\project\project0508\scm\uf166fan\init.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;		None
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;		None
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      void 
  2728 ;; Registers used:
  2729 ;;		wreg, status,2
  2730 ;; Tracked objects:
  2731 ;;		On entry : 300/100
  2732 ;;		On exit  : 300/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMMON   BANK0   BANK1
  2735 ;;      Params:         0       0       0
  2736 ;;      Locals:         0       0       0
  2737 ;;      Temps:          0       0       0
  2738 ;;      Totals:         0       0       0
  2739 ;;Total ram usage:        0 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; Hardware stack levels required when called:    3
  2742 ;; This function calls:
  2743 ;;		Nothing
  2744 ;; This function is called by:
  2745 ;;		_Init_Config
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           
  2750                           ;psect for function _Init_Interupt
  2751  038D                     _Init_Interupt:	
  2752                           
  2753                           ;init.c: 28: OPTION_REG = 0x00;
  2754                           
  2755                           ;incstack = 0
  2756                           ; Regs used in _Init_Interupt: [wreg+status,2]
  2757                           
  2758                           ;init.c: 29: TMR0 = 0;
  2759                           
  2760                           ;init.c: 30: INTCON = 0xE0;
  2761  038D  2B8E               	ljmp	PL16	;call to abstracted procedure
  2762  038E                     __end_of_Init_Interupt:	
  2763  038E                     PL16:	
  2764  038E  0181               	clrf	1	;volatile
  2765  038F  1283               	bcf	3,5	;RP0=0, select bank0
  2766  0390  0181               	clrf	1	;volatile
  2767  0391  30E0               	movlw	224
  2768  0392  008B               	movwf	11	;volatile
  2769  0393  0008               	return
  2770  0394                     __end_ofPL16:	
  2771                           
  2772                           	psect	text21
  2773  0306                     __ptext21:	
  2774 ;; *************** function _Init_GPIO *****************
  2775 ;; Defined at:
  2776 ;;		line 13 in file "E:\project\project0508\scm\uf166fan\init.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;		None
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;		None
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      void 
  2783 ;; Registers used:
  2784 ;;		wreg, status,2
  2785 ;; Tracked objects:
  2786 ;;		On entry : 300/100
  2787 ;;		On exit  : 300/100
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMMON   BANK0   BANK1
  2790 ;;      Params:         0       0       0
  2791 ;;      Locals:         0       0       0
  2792 ;;      Temps:          0       0       0
  2793 ;;      Totals:         0       0       0
  2794 ;;Total ram usage:        0 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    3
  2797 ;; This function calls:
  2798 ;;		Nothing
  2799 ;; This function is called by:
  2800 ;;		_Init_Config
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           
  2805                           ;psect for function _Init_GPIO
  2806  0306                     _Init_GPIO:	
  2807                           
  2808                           ;init.c: 14: TRISA = 0;
  2809                           
  2810                           ;incstack = 0
  2811                           ; Regs used in _Init_GPIO: [wreg+status,2]
  2812                           
  2813                           ;init.c: 15: TRISB = 0;
  2814                           
  2815                           ;init.c: 16: TRISC = 0;
  2816                           
  2817                           ;init.c: 17: WPUA = 0xFF;
  2818                           
  2819                           ;init.c: 18: WPUB = 0xFF;
  2820                           
  2821                           ;init.c: 19: WPUC = 0xFF;
  2822                           
  2823                           ;init.c: 20: PORTA = 0xFF;
  2824                           
  2825                           ;init.c: 21: PORTB = 0xFF;
  2826                           
  2827                           ;init.c: 22: PORTC = 0xFF;
  2828                           
  2829                           ;init.c: 23: IOCB = 0x00;
  2830  0306  2B07               	ljmp	PL2	;call to abstracted procedure
  2831  0307                     __end_of_Init_GPIO:	
  2832  0307                     PL2:	
  2833  0307  0185               	clrf	5	;volatile
  2834  0308  0186               	clrf	6	;volatile
  2835  0309  0187               	clrf	7	;volatile
  2836  030A  30FF               	movlw	255
  2837  030B  1703               	bsf	3,6	;RP1=1, select bank3
  2838  030C  008E               	movwf	14	;volatile
  2839  030D  1303               	bcf	3,6	;RP1=0, select bank1
  2840  030E  0095               	movwf	21	;volatile
  2841  030F  1703               	bsf	3,6	;RP1=1, select bank3
  2842  0310  008F               	movwf	15	;volatile
  2843  0311  1283               	bcf	3,5	;RP0=0, select bank0
  2844  0312  1303               	bcf	3,6	;RP1=0, select bank0
  2845  0313  0085               	movwf	5	;volatile
  2846  0314  0086               	movwf	6	;volatile
  2847  0315  0087               	movwf	7	;volatile
  2848  0316  1683               	bsf	3,5	;RP0=1, select bank1
  2849  0317  0196               	clrf	22	;volatile
  2850  0318  0008               	return
  2851  0319                     __end_ofPL2:	
  2852                           
  2853                           	psect	text22
  2854  02F0                     __ptext22:	
  2855 ;; *************** function _Timer0_Isr *****************
  2856 ;; Defined at:
  2857 ;;		line 373 in file "E:\project\project0508\scm\uf166fan\main.c"
  2858 ;; Parameters:    Size  Location     Type
  2859 ;;		None
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;		None
  2862 ;; Return value:  Size  Location     Type
  2863 ;;                  1    wreg      void 
  2864 ;; Registers used:
  2865 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2866 ;; Tracked objects:
  2867 ;;		On entry : 0/0
  2868 ;;		On exit  : 0/0
  2869 ;;		Unchanged: 0/0
  2870 ;; Data sizes:     COMMON   BANK0   BANK1
  2871 ;;      Params:         0       0       0
  2872 ;;      Locals:         0       0       0
  2873 ;;      Temps:          3       0       0
  2874 ;;      Totals:         3       0       0
  2875 ;;Total ram usage:        3 bytes
  2876 ;; Hardware stack levels used:    1
  2877 ;; Hardware stack levels required when called:    2
  2878 ;; This function calls:
  2879 ;;		i1_Init_Config
  2880 ;; This function is called by:
  2881 ;;		Interrupt level 1
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           
  2886                           ;psect for function _Timer0_Isr
  2887  02F0                     _Timer0_Isr:	
  2888                           
  2889                           ;main.c: 374: if (T0IF) {
  2890  02F0  1D0B               	btfss	11,2	;volatile
  2891  02F1  2AF9               	goto	i1l3275
  2892                           
  2893                           ;main.c: 376: TMR0 += 155;
  2894  02F2  309B               	movlw	155
  2895  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  2896  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  2897  02F5  0781               	addwf	1,f	;volatile
  2898                           
  2899                           ;main.c: 379: T0IF = 0;
  2900  02F6  110B               	bcf	11,2	;volatile
  2901                           
  2902                           ;main.c: 380: time0Flag = 1;
  2903  02F7  01F7               	clrf	_time0Flag
  2904  02F8  0AF7               	incf	_time0Flag,f
  2905  02F9                     i1l3275:	
  2906                           
  2907                           ;main.c: 382: }
  2908                           ;main.c: 384: if (RBIF) {
  2909  02F9  1C0B               	btfss	11,0	;volatile
  2910  02FA  2AFD               	goto	i1l668
  2911                           
  2912                           ;main.c: 385: RBIF = 0;
  2913  02FB  100B               	bcf	11,0	;volatile
  2914                           
  2915                           ;main.c: 386: Init_Config();
  2916  02FC  2277               	fcall	i1_Init_Config
  2917  02FD                     i1l668:	
  2918  02FD  0873               	movf	??_Timer0_Isr+2,w
  2919  02FE  008A               	movwf	10
  2920  02FF  0872               	movf	??_Timer0_Isr+1,w
  2921  0300  0084               	movwf	4
  2922  0301  0E71               	swapf	??_Timer0_Isr^(0+-128),w
  2923  0302  0083               	movwf	3
  2924  0303  0EFE               	swapf	126,f
  2925  0304  0E7E               	swapf	126,w
  2926  0305  0009               	retfie
  2927  0306                     __end_of_Timer0_Isr:	
  2928                           
  2929                           	psect	intentry
  2930  0004                     __pintentry:	
  2931                           ;incstack = 0
  2932                           ; Regs used in _Timer0_Isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2933                           
  2934  0004                     interrupt_function:	
  2935  007E                     saved_w	set	btemp
  2936  0004  00FE               	movwf	btemp
  2937  0005  0E03               	swapf	3,w
  2938  0006  00F1               	movwf	??_Timer0_Isr
  2939  0007  0804               	movf	4,w
  2940  0008  00F2               	movwf	??_Timer0_Isr+1
  2941  0009  080A               	movf	10,w
  2942  000A  00F3               	movwf	??_Timer0_Isr+2
  2943  000B  2AF0               	ljmp	_Timer0_Isr
  2944                           
  2945                           	psect	text23
  2946  0277                     __ptext23:	
  2947 ;; *************** function i1_Init_Config *****************
  2948 ;; Defined at:
  2949 ;;		line 302 in file "E:\project\project0508\scm\uf166fan\main.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;		None
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;		None
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  1    wreg      void 
  2956 ;; Registers used:
  2957 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : B00/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMMON   BANK0   BANK1
  2963 ;;      Params:         0       0       0
  2964 ;;      Locals:         0       0       0
  2965 ;;      Temps:          0       0       0
  2966 ;;      Totals:         0       0       0
  2967 ;;Total ram usage:        0 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; Hardware stack levels required when called:    1
  2970 ;; This function calls:
  2971 ;;		i1_Init_GPIO
  2972 ;;		i1_Init_Interupt
  2973 ;;		i1_Init_PWM
  2974 ;;		i1_Init_System
  2975 ;;		i1_resetKey
  2976 ;; This function is called by:
  2977 ;;		_Timer0_Isr
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           
  2982                           ;psect for function i1_Init_Config
  2983  0277                     i1_Init_Config:	
  2984                           
  2985                           ;main.c: 304: Init_System();
  2986                           
  2987                           ;incstack = 0
  2988                           ; Regs used in i1_Init_Config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2989  0277  237B               	fcall	i1_Init_System
  2990                           
  2991                           ;main.c: 305: Init_GPIO();
  2992  0278  23A8               	fcall	i1_Init_GPIO
  2993                           
  2994                           ;main.c: 306: Init_Interupt();
  2995  0279  23A7               	fcall	i1_Init_Interupt
  2996                           
  2997                           ;main.c: 307: Init_PWM();
  2998  027A  23A6               	fcall	i1_Init_PWM
  2999                           
  3000                           ;main.c: 309: IOCB = 0x04;
  3001                           
  3002                           ;main.c: 310: TMR0 = 155;
  3003                           
  3004                           ;main.c: 311: TO = 0;
  3005                           
  3006                           ;main.c: 314: key1.key_index = 5;
  3007                           
  3008                           ;main.c: 316: key2.key_index = 4;
  3009                           
  3010                           ;main.c: 318: key3.key_index = 3;
  3011                           
  3012                           ;main.c: 319: resetKey(&key1);
  3013  027B  2282               	fcall	PL8	;call to abstracted procedure
  3014  027C  2339               	fcall	i1_resetKey
  3015                           
  3016                           ;main.c: 320: resetKey(&key2);
  3017  027D  3039               	movlw	(low (_key2| 0))& (0+255)
  3018  027E  2339               	fcall	i1_resetKey
  3019                           
  3020                           ;main.c: 321: resetKey(&key3);
  3021  027F  3032               	movlw	(low (_key3| 0))& (0+255)
  3022  0280  2339               	fcall	i1_resetKey
  3023                           
  3024                           ;main.c: 323: TRISA = 0;
  3025                           
  3026                           ;main.c: 324: TRISB = 0x7E;
  3027                           
  3028                           ;main.c: 325: TRISC = 0;
  3029                           
  3030                           ;main.c: 326: lowVTime = 0;
  3031  0281  2A8F               	ljmp	PL12	;call to abstracted procedure
  3032  0282                     __end_ofi1_Init_Config:	
  3033  0282                     PL8:	
  3034  0282  3004               	movlw	4
  3035  0283  0096               	movwf	22	;volatile
  3036  0284  309B               	movlw	155
  3037  0285  1283               	bcf	3,5	;RP0=0, select bank0
  3038  0286  0081               	movwf	1	;volatile
  3039  0287  1203               	bcf	3,4	;volatile
  3040  0288  3005               	movlw	5
  3041  0289  00C6               	movwf	_key1+6
  3042  028A  3004               	movlw	4
  3043  028B  00BF               	movwf	_key2+6
  3044  028C  3003               	movlw	3
  3045  028D  00B8               	movwf	_key3+6
  3046  028E  3440               	retlw	(low (_key1| 0))& (0+255)
  3047  028F                     __end_ofPL8:	
  3048  028F                     PL12:	
  3049  028F  1683               	bsf	3,5	;RP0=1, select bank1
  3050  0290  1303               	bcf	3,6	;RP1=0, select bank1
  3051  0291  0185               	clrf	5	;volatile
  3052  0292  307E               	movlw	126
  3053  0293  0086               	movwf	6	;volatile
  3054  0294  0187               	clrf	7	;volatile
  3055  0295  1283               	bcf	3,5	;RP0=0, select bank0
  3056  0296  01B1               	clrf	_lowVTime
  3057  0297  0008               	return
  3058  0298                     __end_ofPL12:	
  3059                           
  3060                           	psect	text24
  3061  0339                     __ptext24:	
  3062 ;; *************** function i1_resetKey *****************
  3063 ;; Defined at:
  3064 ;;		line 100 in file "E:\project\project0508\scm\uf166fan\scankey.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;  key             1    wreg     PTR struct Keys
  3067 ;;		 -> key3(7), key2(7), key1(7), 
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;  key             1    0[COMMON] PTR struct Keys
  3070 ;;		 -> key3(7), key2(7), key1(7), 
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  1    wreg      void 
  3073 ;; Registers used:
  3074 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 800/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMMON   BANK0   BANK1
  3080 ;;      Params:         0       0       0
  3081 ;;      Locals:         1       0       0
  3082 ;;      Temps:          0       0       0
  3083 ;;      Totals:         1       0       0
  3084 ;;Total ram usage:        1 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; This function calls:
  3087 ;;		Nothing
  3088 ;; This function is called by:
  3089 ;;		i1_Init_Config
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           
  3094                           ;psect for function i1_resetKey
  3095  0339                     i1_resetKey:	
  3096                           
  3097                           ;incstack = 0
  3098                           ; Regs used in i1_resetKey: [wreg-fsr0h+status,2+status,0]
  3099                           ;i1resetKey@key stored from wreg
  3100  0339  00F0               	movwf	i1resetKey@key
  3101                           
  3102                           ;scankey.c: 101: key->key_timer_cnt1 = key->key_timer_cnt2 = key->key_state_buffer1 = ke
      +                          y->key_state_buffer2 = 0;
  3103  033A  3E03               	addlw	3
  3104  033B  0084               	movwf	4
  3105  033C  1383               	bcf	3,7	;select IRP bank0
  3106  033D  0180               	clrf	0
  3107  033E  0A70               	incf	i1resetKey@key,w
  3108  033F  0084               	movwf	4
  3109  0340  0180               	clrf	0
  3110  0341  0870               	movf	i1resetKey@key,w
  3111  0342  3E02               	addlw	2
  3112  0343  0084               	movwf	4
  3113  0344  0180               	clrf	0
  3114  0345  0870               	movf	i1resetKey@key,w
  3115  0346  0084               	movwf	4
  3116  0347  0180               	clrf	0
  3117  0348  0008               	return
  3118  0349                     __end_ofi1_resetKey:	
  3119                           
  3120                           	psect	text25
  3121  037B                     __ptext25:	
  3122 ;; *************** function i1_Init_System *****************
  3123 ;; Defined at:
  3124 ;;		line 3 in file "E:\project\project0508\scm\uf166fan\init.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;		None
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      void 
  3131 ;; Registers used:
  3132 ;;		wreg, status,2
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 300/100
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMMON   BANK0   BANK1
  3138 ;;      Params:         0       0       0
  3139 ;;      Locals:         0       0       0
  3140 ;;      Temps:          0       0       0
  3141 ;;      Totals:         0       0       0
  3142 ;;Total ram usage:        0 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; This function calls:
  3145 ;;		Nothing
  3146 ;; This function is called by:
  3147 ;;		i1_Init_Config
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           
  3152                           ;psect for function i1_Init_System
  3153  037B                     i1_Init_System:	
  3154                           
  3155                           ;incstack = 0
  3156                           ; Regs used in i1_Init_System: [wreg+status,2]
  3157  037B  0000               	nop	;# 
  3158  037C  0064               	clrwdt	;# 
  3159                           
  3160                           ;init.c: 6: INTCON = 0;
  3161                           
  3162                           ;init.c: 7: OSCCON = 0X71;
  3163                           
  3164                           ;init.c: 8: OPTION_REG = 0x00;
  3165  037D  2B7E               	ljmp	PL14	;call to abstracted procedure
  3166  037E                     __end_ofi1_Init_System:	
  3167  037E                     PL14:	
  3168  037E  018B               	clrf	11	;volatile
  3169  037F  3071               	movlw	113
  3170  0380  1683               	bsf	3,5	;RP0=1, select bank1
  3171  0381  1303               	bcf	3,6	;RP1=0, select bank1
  3172  0382  008F               	movwf	15	;volatile
  3173  0383  0181               	clrf	1	;volatile
  3174  0384  0008               	return
  3175  0385                     __end_ofPL14:	
  3176                           
  3177                           	psect	text26
  3178  03A6                     __ptext26:	
  3179 ;; *************** function i1_Init_PWM *****************
  3180 ;; Defined at:
  3181 ;;		line 74 in file "E:\project\project0508\scm\uf166fan\main.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;		None
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;		None
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  1    wreg      void 
  3188 ;; Registers used:
  3189 ;;		wreg, status,2
  3190 ;; Tracked objects:
  3191 ;;		On entry : 300/0
  3192 ;;		On exit  : 300/100
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMMON   BANK0   BANK1
  3195 ;;      Params:         0       0       0
  3196 ;;      Locals:         0       0       0
  3197 ;;      Temps:          0       0       0
  3198 ;;      Totals:         0       0       0
  3199 ;;Total ram usage:        0 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; This function calls:
  3202 ;;		Nothing
  3203 ;; This function is called by:
  3204 ;;		i1_Init_Config
  3205 ;; This function uses a non-reentrant model
  3206 ;;
  3207                           
  3208                           
  3209                           ;psect for function i1_Init_PWM
  3210  03A6                     i1_Init_PWM:	
  3211                           
  3212                           ;main.c: 75: CCP1CON = 0x0F;
  3213                           
  3214                           ;incstack = 0
  3215                           ; Regs used in i1_Init_PWM: [wreg+status,2]
  3216                           
  3217                           ;main.c: 76: T2CON = 0;
  3218                           
  3219                           ;main.c: 77: PR2 = 7;
  3220                           
  3221                           ;main.c: 79: CCPR1L = 0;
  3222                           
  3223                           ;main.c: 80: TMR2IF = 0;
  3224                           
  3225                           ;main.c: 81: T2CON = 0;
  3226                           
  3227                           ;main.c: 83: TRISC&=~(1<<2);
  3228  03A6  2B58               	ljmp	PL10	;call to abstracted procedure
  3229  03A7                     __end_ofi1_Init_PWM:	
  3230                           
  3231                           	psect	text27
  3232  03A7                     __ptext27:	
  3233 ;; *************** function i1_Init_Interupt *****************
  3234 ;; Defined at:
  3235 ;;		line 27 in file "E:\project\project0508\scm\uf166fan\init.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;		None
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;		None
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		wreg, status,2
  3244 ;; Tracked objects:
  3245 ;;		On entry : 300/100
  3246 ;;		On exit  : 300/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMMON   BANK0   BANK1
  3249 ;;      Params:         0       0       0
  3250 ;;      Locals:         0       0       0
  3251 ;;      Temps:          0       0       0
  3252 ;;      Totals:         0       0       0
  3253 ;;Total ram usage:        0 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; This function calls:
  3256 ;;		Nothing
  3257 ;; This function is called by:
  3258 ;;		i1_Init_Config
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           
  3263                           ;psect for function i1_Init_Interupt
  3264  03A7                     i1_Init_Interupt:	
  3265                           
  3266                           ;init.c: 28: OPTION_REG = 0x00;
  3267                           
  3268                           ;incstack = 0
  3269                           ; Regs used in i1_Init_Interupt: [wreg+status,2]
  3270                           
  3271                           ;init.c: 29: TMR0 = 0;
  3272                           
  3273                           ;init.c: 30: INTCON = 0xE0;
  3274  03A7  2B8E               	ljmp	PL16	;call to abstracted procedure
  3275  03A8                     __end_ofi1_Init_Interupt:	
  3276                           
  3277                           	psect	text28
  3278  03A8                     __ptext28:	
  3279 ;; *************** function i1_Init_GPIO *****************
  3280 ;; Defined at:
  3281 ;;		line 13 in file "E:\project\project0508\scm\uf166fan\init.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;		None
  3284 ;; Auto vars:     Size  Location     Type
  3285 ;;		None
  3286 ;; Return value:  Size  Location     Type
  3287 ;;                  1    wreg      void 
  3288 ;; Registers used:
  3289 ;;		wreg, status,2
  3290 ;; Tracked objects:
  3291 ;;		On entry : 300/100
  3292 ;;		On exit  : 300/100
  3293 ;;		Unchanged: 0/0
  3294 ;; Data sizes:     COMMON   BANK0   BANK1
  3295 ;;      Params:         0       0       0
  3296 ;;      Locals:         0       0       0
  3297 ;;      Temps:          0       0       0
  3298 ;;      Totals:         0       0       0
  3299 ;;Total ram usage:        0 bytes
  3300 ;; Hardware stack levels used:    1
  3301 ;; This function calls:
  3302 ;;		Nothing
  3303 ;; This function is called by:
  3304 ;;		i1_Init_Config
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           
  3309                           ;psect for function i1_Init_GPIO
  3310  03A8                     i1_Init_GPIO:	
  3311                           
  3312                           ;init.c: 14: TRISA = 0;
  3313                           
  3314                           ;incstack = 0
  3315                           ; Regs used in i1_Init_GPIO: [wreg+status,2]
  3316                           
  3317                           ;init.c: 15: TRISB = 0;
  3318                           
  3319                           ;init.c: 16: TRISC = 0;
  3320                           
  3321                           ;init.c: 17: WPUA = 0xFF;
  3322                           
  3323                           ;init.c: 18: WPUB = 0xFF;
  3324                           
  3325                           ;init.c: 19: WPUC = 0xFF;
  3326                           
  3327                           ;init.c: 20: PORTA = 0xFF;
  3328                           
  3329                           ;init.c: 21: PORTB = 0xFF;
  3330                           
  3331                           ;init.c: 22: PORTC = 0xFF;
  3332                           
  3333                           ;init.c: 23: IOCB = 0x00;
  3334  03A8  2B07               	ljmp	PL2	;call to abstracted procedure
  3335  03A9                     __end_ofi1_Init_GPIO:	
  3336  007E                     btemp	set	126	;btemp
  3337  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     12      51
    BANK1            80      0       0

Pointer List with Targets:

    resetKey@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 

    key_driver@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 

    sacnKeyInput@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 


Critical Paths under _main in COMMON

    _main->_readVrefADC
    _scanKeys->_sacnKeyInput
    _readVrefADC->_ADC_Result
    _checkKeys->_checkFan
    _setFanLevel->_setLedOn
    _closeFan->_setLedOn
    _Init_Config->_resetKey

Critical Paths under _Timer0_Isr in COMMON

    i1_Init_Config->i1_resetKey

Critical Paths under _main in BANK0

    _main->_checkKeys
    _scanKeys->_sacnKeyInput
    _readVrefADC->_ADC_Sample
    _checkKeys->_setFanLevel
    _checkFan->_setFanLevel
    _setFanLevel->___awdiv

Critical Paths under _Timer0_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer0_Isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3276
                        _Init_Config
                         _Sleep_Mode
                          _checkKeys
                     _checkUsbStatus
                        _readVrefADC
                           _scanKeys
 ---------------------------------------------------------------------------------
 (1) _scanKeys                                             0     0      0     214
                       _sacnKeyInput
 ---------------------------------------------------------------------------------
 (2) _sacnKeyInput                                         3     3      0     214
                                              4 COMMON     2     2      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _readVrefADC                                          1     1      0     533
                                              5 COMMON     1     1      0
                         _ADC_Result
                         _ADC_Sample
                           _DelayXms
 ---------------------------------------------------------------------------------
 (2) _DelayXms                                             3     3      0     167
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                           8     8      0     291
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Result                                           3     3      0      65
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _checkUsbStatus                                       2     2      0      31
                                              0 BANK0      2     2      0
                           _closeFan
 ---------------------------------------------------------------------------------
 (1) _checkKeys                                            2     2      0    2329
                                             10 BANK0      2     2      0
                           _checkFan
                           _closeFan
                         _key_driver
                        _setFanLevel
 ---------------------------------------------------------------------------------
 (2) _key_driver                                           3     3      0     597
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _checkFan                                             1     1      0     832
                                              5 COMMON     1     1      0
                           _closeFan
                        _setFanLevel
 ---------------------------------------------------------------------------------
 (2) _setFanLevel                                          4     4      0     801
                                              8 BANK0      2     2      0
                            ___awdiv
                           _setLedOn
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     606
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _closeFan                                             0     0      0      31
                           _Init_PWM
                         _Sleep_Mode
                           _setLedOn
 ---------------------------------------------------------------------------------
 (3) _setLedOn                                             1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sleep_Mode                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Config                                          0     0      0     169
                          _Init_GPIO
                      _Init_Interupt
                           _Init_PWM
                        _Init_System
                           _resetKey
 ---------------------------------------------------------------------------------
 (2) _resetKey                                             1     1      0     169
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_Interupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Timer0_Isr                                           3     3      0      88
                                              1 COMMON     3     3      0
                      i1_Init_Config
 ---------------------------------------------------------------------------------
 (6) i1_Init_Config                                        0     0      0      88
                        i1_Init_GPIO
                    i1_Init_Interupt
                         i1_Init_PWM
                      i1_Init_System
                         i1_resetKey
 ---------------------------------------------------------------------------------
 (7) i1_resetKey                                           1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) i1_Init_System                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_Init_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_Init_Interupt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_Init_GPIO                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_Config
     _Init_GPIO
     _Init_Interupt
     _Init_PWM
     _Init_System
     _resetKey
   _Sleep_Mode
   _checkKeys
     _checkFan
       _closeFan
         _Init_PWM
         _Sleep_Mode
         _setLedOn
       _setFanLevel
         ___awdiv
         _setLedOn
     _closeFan
       _Init_PWM
       _Sleep_Mode
       _setLedOn
     _key_driver
     _setFanLevel
       ___awdiv
       _setLedOn
   _checkUsbStatus
     _closeFan
       _Init_PWM
       _Sleep_Mode
       _setLedOn
   _readVrefADC
     _ADC_Result
     _ADC_Sample
     _DelayXms
   _scanKeys
     _sacnKeyInput

 _Timer0_Isr (ROOT)
   i1_Init_Config
     i1_Init_GPIO
     i1_Init_Interupt
     i1_Init_PWM
     i1_Init_System
     i1_resetKey

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      C      33       5       63.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3D       8        0.0%
ABS                  0      0      3D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu May 14 19:05:29 2020

         ??i1_Init_System 0070                         pc 0002                        PL2 0307  
                      PL4 0180                        PL6 00B0                        PL8 0282  
                      _TO 001C              ___awdiv@sign 004C                        fsr 0004  
                     PL10 0358                       PL20 0201                       PL12 028F  
                     PL22 00BF                       PL14 037E                       PL16 038E  
                     PL18 01FA                       l624 01D0                       l640 02A8  
                     l626 01D4                       l627 01D8                       l628 01DD  
                     l629 01E2                       l585 0164                       _GIE 005F  
                     _PR2 0092       __size_of_ADC_Sample 0096       __size_of_ADC_Result 001D  
                     fsr0 0004                       indf 0000                      S3737 039F  
                    S3739 039A                      l1802 0064                      l3421 01B5  
                    l3413 01AB                      l3405 0196                      l3335 01EB  
                    l3423 01B7                      l3431 01BE                      l3425 01B9  
                    l3433 01CC                      l3417 01B0                      l3601 0176  
                    l1809 02E9                      l3355 00D7                      l3427 01BB  
                    l3443 021E                      l3435 0207                      l3603 0177  
                    l3523 004E                      l3515 0035                      l3381 0104  
                    l3365 00E5                      l3349 00CE                      l3445 0220  
                    l3463 0113                      l3623 02A0                      l3631 02A3  
                    l3527 0058                      l3385 0349                      l3377 00FC  
                    l3481 012A                      l3641 02AF                      l3529 0060  
                    l3475 0125                      l3467 011B                      l3563 0367  
                    l1796 0030                      l2781 0256                      l3493 013E  
                    l3557 02EE                      l3573 036C                      l3487 0138  
                    l3495 014B                      l3489 013A                      l3657 0234  
                    l3587 015D                      l3667 023D                      l3679 024A  
                    _T0IF 005A                      u1225 0214                      u1155 00EE  
                    _IOCB 0096                      u1264 02C3                      u1425 009A  
                    u1265 02C1                      u1365 0054                      u1375 005E  
                    _RBIE 005B                      _RBIF 0058                      _TMR0 0001  
  __end_of_checkUsbStatus 0180                      _WPUA 018E                      _WPUB 0095  
                    _WPUC 018F                      _key1 0040                      _key2 0039  
                    _key3 0032                      _main 0232                      btemp 007E  
              i1_resetKey 0339                      start 000C             ??_Init_Config 0075  
           ??_Init_System 0074             _Init_Interupt 038D                     ?_main 0070  
         __end_of___awdiv 0109           ___awdiv@divisor 0047                     _T2CON 0012  
            ?_readVrefADC 0070        key_driver@key_read 0048                     i1l668 02FD  
         ___awdiv@counter 004B                     _PORTA 0005                     _PORTB 0006  
                   _PORTC 0007                     _TRISA 0085                     _TRISB 0086  
                   _TRISC 0087               ?i1_Init_PWM 0070                     pclath 000A  
         ?_checkUsbStatus 0070                     status 0003                     wtemp0 007E  
        __end_of_DelayXms 0370              ?_setFanLevel 0070           __initialization 000D  
            __end_of_main 0256          __end_of_Init_PWM 0358            ?_Init_Interupt 0070  
     __end_of_Init_Config 037B            _fan_check_time 0028                    ??_main 0076  
     __end_of_Init_System 03A6                    _ADCON0 001F                    _ADCON1 009F  
                  _ADRESH 001E                    _ADRESL 009E                    _CCPR1L 0015  
        ___awdiv@dividend 0049                    _GODONE 00F9                    i1l3275 02F9  
                  _INTCON 000B             ?_sacnKeyInput 0070        __size_of_Init_GPIO 0001  
                  _OSCCON 008F                    _TMR2IF 0061              ??_ADC_Sample 0047  
        __end_of_checkFan 0232              ??_ADC_Result 0074               ?i1_resetKey 0070  
              _Sleep_Mode 0256                _Timer0_Isr 02F0          __end_of_closeFan 0357  
        setLedOn@ledIndex 0074                 ??___awdiv 0074       __size_ofi1_Init_PWM 0001  
            ?i1_Init_GPIO 0070          __end_of_scanKeys 0329          ___awdiv@quotient 004D  
        __end_of_setLedOn 01FA          __end_of_resetKey 0339              __pdataCOMMON 0078  
      __end_of_ADC_Sample 00B0        __end_of_ADC_Result 02F0           i1_Init_Interupt 03A7  
                  saved_w 007E            ??_sacnKeyInput 0074   __end_of__initialization 0018  
             _Init_Config 0370            __pcstackCOMMON 0070           ??_Init_Interupt 0074  
      __size_of_checkKeys 001E               _Init_System 03A3                __end_ofPL2 0319  
              __end_ofPL4 0190                __end_ofPL6 00BF                __end_ofPL8 028F  
       __end_of_Init_GPIO 0307       __size_ofi1_resetKey 0010                 ?_DelayXms 0070  
    __size_of_readVrefADC 0006                __pbssBANK0 0020                 ?_Init_PWM 0070  
             ?_Sleep_Mode 0070               ?_Timer0_Isr 0070     __end_ofi1_Init_Config 0282  
              __pmaintext 0232      __size_of_setFanLevel 003E                __pintentry 0004  
                 _CCP1CON 0017     __end_ofi1_Init_System 037E   __end_ofi1_Init_Interupt 03A8  
               ?_checkFan 0070      key_driver@key_return 0047                ??_DelayXms 0074  
        ??_checkUsbStatus 0047                _count300ms 0076                 ?_closeFan 0070  
            ??i1_Init_PWM 0070         __end_of_checkKeys 02B6                ??_Init_PWM 0074  
               ?_scanKeys 0070                 ?_setLedOn 0070                 ?_resetKey 0070  
             resetKey@key 0074           ADC_Sample@admax 0024           ADC_Sample@admin 0026  
         ADC_Sample@adsum 0020                   ___awdiv 00C4                _key_driver 0109  
    __end_of_sacnKeyInput 02D3        __end_ofi1_Init_PWM 03A7                   __ptext1 0319  
                 __ptext2 02B6                   __ptext3 0394                   __ptext4 0365  
                 __ptext5 001A                   __ptext6 02D3                   __ptext7 014D  
                 __ptext8 0298                   __ptext9 0109      __size_ofi1_Init_GPIO 0001  
              ??_checkFan 0075       __size_of_Sleep_Mode 0021       __size_of_Timer0_Isr 0016  
              ??_closeFan 0075                   clrloop0 0386      end_of_initialization 0018  
               DelayXms@i 0048                 DelayXms@j 0049                 DelayXms@x 0047  
              ??_scanKeys 0076              ??i1_resetKey 0070                ??_setLedOn 0074  
              ??_resetKey 0074           sacnKeyInput@key 0047          ?i1_Init_Interupt 0070  
      __end_ofi1_resetKey 0349              ?_Init_Config 0070               ?_key_driver 0070  
            ?_Init_System 0070          setFanLevel@level 004F             __pidataCOMMON 0000  
             __end_ofPL10 0365               __end_ofPL20 0207               __end_ofPL12 0298  
             __end_ofPL22 00C4               __end_ofPL14 0385               __end_ofPL16 0394  
             __end_ofPL18 0201       start_initialization 000D                 _Init_GPIO 0306  
       __size_of_DelayXms 000B         __size_of_Init_PWM 0001              ??_Sleep_Mode 0074  
            ??_Timer0_Isr 0071     __size_of_sacnKeyInput 001D         ADC_Sample@ad_temp 004D  
   __end_of_Init_Interupt 038E         ADC_Sample@adtimes 0030             ??_readVrefADC 0075  
             __pbssCOMMON 0076                ?_Init_GPIO 0070                 ___latbits 0000  
           __pcstackBANK0 0047         __size_of_checkFan 002B        __end_of_Sleep_Mode 0277  
      __end_of_Timer0_Isr 0306       __size_of_key_driver 0044         __size_of_closeFan 000E  
            _sacnKeyInput 02B6              _currentLevel 0079                 _checkKeys 0298  
     checkKeys@key2Status 0051             ??_setFanLevel 0075       checkKeys@key3Status 0052  
       __size_of_scanKeys 0010         __size_of_setLedOn 002C                  ?___awdiv 0047  
       __size_of_resetKey 0010                 __pswtext1 039F                 __pswtext2 039A  
               _count10Ms 002A                 _countTime 002C            ADC_Sample@adch 004B  
  __size_ofi1_Init_Config 000B       __end_of_readVrefADC 039A               ADC_Sample@i 004C  
  __size_ofi1_Init_System 0003         interrupt_function 0004               ADC_Result@i 0048  
              ?_checkKeys 0070                 _time0Flag 0077                 clear_ram0 0385  
    __size_of_Init_Config 000B      setFanLevel@tempLevel 0050             ??i1_Init_GPIO 0070  
     __end_of_setFanLevel 01CE      __size_of_Init_System 0003            ADC_Result@adch 0047  
             ??_Init_GPIO 0074                  _DelayXms 0365                  _Init_PWM 0357  
              _ADC_Sample 001A                _ADC_Result 02D3   __size_of_checkUsbStatus 0033  
           i1_Init_Config 0277              ??_key_driver 0074          __size_of___awdiv 0045  
           key_driver@key 0049             i1_Init_System 037B               _readVrefADC 0394  
                _checkFan 0207                _FAN_STATUS 0078       __end_ofi1_Init_GPIO 03A9  
                _adresult 002E  __size_ofi1_Init_Interupt 0001                  __ptext10 0207  
                __ptext11 0190                  __ptext20 038D                  __ptext12 00C4  
                __ptext21 0306                  __ptext13 0349                  __ptext22 02F0  
                __ptext14 01CE                  __ptext23 0277                  __ptext15 0256  
                __ptext24 0339                  __ptext16 0370                  __ptext25 037B  
                __ptext17 0329                  __ptext26 03A6                  __ptext18 03A3  
                __ptext27 03A7                  __ptext19 0357                  __ptext28 03A8  
                _closeFan 0349        __end_of_key_driver 014D             __size_of_main 0024  
             ??_checkKeys 0076                  _scanKeys 0319                  _lowVTime 0031  
                _setLedOn 01CE                  _resetKey 0329               _setFanLevel 0190  
          ?i1_Init_Config 0070            ?i1_Init_System 0070                  intlevel1 0000  
             ?_ADC_Sample 0070               ?_ADC_Result 0070             i1resetKey@key 0070  
             i1_Init_GPIO 03A8                _OPTION_REG 0081                i1_Init_PWM 03A6  
  __size_of_Init_Interupt 0001         ??i1_Init_Interupt 0070            _checkUsbStatus 014D  
         ??i1_Init_Config 0071  
