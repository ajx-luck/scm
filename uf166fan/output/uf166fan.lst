

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 15 15:35:25 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1711C
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	swtext1,local,class=CONST,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	swtext2,local,class=CONST,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	pa_nodes0,global,class=CODE,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 1.45
    48                           ; Generated 16/11/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F887 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	idataCOMMON
    83  0000                     __pidataCOMMON:	
    84  001F                     _ADCON0	set	31
    85  001E                     _ADRESH	set	30
    86  0017                     _CCP1CON	set	23
    87  0015                     _CCPR1L	set	21
    88  0012                     _T2CON	set	18
    89  000B                     _INTCON	set	11
    90  0007                     _PORTC	set	7
    91  0006                     _PORTB	set	6
    92  0005                     _PORTA	set	5
    93  0001                     _TMR0	set	1
    94  00F9                     _GODONE	set	249
    95  0061                     _TMR2IF	set	97
    96  005F                     _GIE	set	95
    97  005B                     _RBIE	set	91
    98  005A                     _T0IF	set	90
    99  0058                     _RBIF	set	88
   100  001C                     _TO	set	28
   101  009F                     _ADCON1	set	159
   102  009E                     _ADRESL	set	158
   103  0096                     _IOCB	set	150
   104  0095                     _WPUB	set	149
   105  0092                     _PR2	set	146
   106  008F                     _OSCCON	set	143
   107  0087                     _TRISC	set	135
   108  0086                     _TRISB	set	134
   109  0085                     _TRISA	set	133
   110  0081                     _OPTION_REG	set	129
   111  018F                     _WPUC	set	399
   112  018E                     _WPUA	set	398
   113                           
   114                           	psect	cinit
   115  000D                     start_initialization:	
   116                           ; #config settings
   117                           
   118  000D                     __initialization:	
   119                           
   120                           ;initializer for _FAN_STATUS
   121  000D  3002               	movlw	2
   122  000E  00F8               	movwf	__pdataCOMMON& (0+127)
   123                           
   124                           ;initializer for _currentLevel
   125  000F  3003               	movlw	3
   126  0010  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   127  0011  3020               	movlw	low __pbssBANK0
   128                           
   129                           ; Clear objects allocated to BANK0
   130  0012  1383               	bcf	3,7	;select IRP bank0
   131  0013  0084               	movwf	4
   132  0014  3047               	movlw	low (__pbssBANK0+39)
   133  0015  2395               	fcall	clear_ram0
   134                           
   135                           ; Clear objects allocated to COMMON
   136  0016  01F6               	clrf	__pbssCOMMON& (0+127)
   137  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   138  0018                     end_of_initialization:	
   139                           ;End of C runtime variable initialization code
   140                           
   141  0018                     __end_of__initialization:	
   142  0018  0183               	clrf	3
   143  0019  2A08               	ljmp	_main	;jump to C main() function
   144                           
   145                           	psect	bssCOMMON
   146  0076                     __pbssCOMMON:	
   147  0076                     _count300ms:	
   148  0076                     	ds	1
   149  0077                     _time0Flag:	
   150  0077                     	ds	1
   151                           
   152                           	psect	dataCOMMON
   153  0078                     __pdataCOMMON:	
   154  0078                     _FAN_STATUS:	
   155  0078                     	ds	1
   156  0079                     _currentLevel:	
   157  0079                     	ds	1
   158                           
   159                           	psect	bssBANK0
   160  0020                     __pbssBANK0:	
   161  0020                     ADC_Sample@adsum:	
   162  0020                     	ds	4
   163  0024                     ADC_Sample@admax:	
   164  0024                     	ds	2
   165  0026                     ADC_Sample@admin:	
   166  0026                     	ds	2
   167  0028                     _fan_check_time:	
   168  0028                     	ds	2
   169  002A                     _count10Ms:	
   170  002A                     	ds	2
   171  002C                     _countTime:	
   172  002C                     	ds	2
   173  002E                     _adresult:	
   174  002E                     	ds	2
   175  0030                     ADC_Sample@adtimes:	
   176  0030                     	ds	1
   177  0031                     _lowVTime:	
   178  0031                     	ds	1
   179  0032                     _key3:	
   180  0032                     	ds	7
   181  0039                     _key2:	
   182  0039                     	ds	7
   183  0040                     _key1:	
   184  0040                     	ds	7
   185                           
   186                           	psect	clrtext
   187  0395                     clear_ram0:	
   188                           ;	Called with FSR containing the base address, and
   189                           ;	W with the last address+1
   190                           
   191  0395  0064               	clrwdt	;clear the watchdog before getting into this loop
   192  0396                     clrloop0:	
   193  0396  0180               	clrf	0	;clear RAM location pointed to by FSR
   194  0397  0A84               	incf	4,f	;increment pointer
   195  0398  0604               	xorwf	4,w	;XOR with final address
   196  0399  1903               	btfsc	3,2	;have we reached the end yet?
   197  039A  3400               	retlw	0	;all done for this memory range, return
   198  039B  0604               	xorwf	4,w	;XOR again to restore value
   199  039C  2B96               	goto	clrloop0	;do the next byte
   200                           
   201                           	psect	cstackCOMMON
   202  0070                     __pcstackCOMMON:	
   203  0070                     ?_closeFan:	
   204  0070                     ?_setLedOn:	
   205                           ; 1 bytes @ 0x0
   206                           
   207  0070                     ?_Sleep_Mode:	
   208                           ; 1 bytes @ 0x0
   209                           
   210  0070                     ?_sacnKeyInput:	
   211                           ; 1 bytes @ 0x0
   212                           
   213  0070                     ?_key_driver:	
   214                           ; 1 bytes @ 0x0
   215                           
   216  0070                     ?_Init_Config:	
   217                           ; 1 bytes @ 0x0
   218                           
   219  0070                     ?_readVrefADC:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ?_Init_System:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     ?_Init_GPIO:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ?_Init_Interupt:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_resetKey:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ?_checkUsbStatus:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ?_Init_PWM:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ?_setFanLevel:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_checkFan:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     ?_scanKeys:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     ?_checkKeys:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_main:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_Timer0_Isr:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_ADC_Sample:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_ADC_Result:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?_DelayXms:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?i1_Init_PWM:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ??i1_Init_PWM:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?i1_Init_Config:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?i1_resetKey:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ??i1_resetKey:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?i1_Init_System:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ??i1_Init_System:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?i1_Init_GPIO:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ??i1_Init_GPIO:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?i1_Init_Interupt:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ??i1_Init_Interupt:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     i1resetKey@key:	
   301                           ; 1 bytes @ 0x0
   302                           
   303                           
   304                           ; 1 bytes @ 0x0
   305  0070                     	ds	1
   306  0071                     ??_Timer0_Isr:	
   307  0071                     ??i1_Init_Config:	
   308                           ; 1 bytes @ 0x1
   309                           
   310                           
   311                           ; 1 bytes @ 0x1
   312  0071                     	ds	3
   313  0074                     ??_setLedOn:	
   314  0074                     ??_Sleep_Mode:	
   315                           ; 1 bytes @ 0x4
   316                           
   317  0074                     ??_sacnKeyInput:	
   318                           ; 1 bytes @ 0x4
   319                           
   320  0074                     ??_key_driver:	
   321                           ; 1 bytes @ 0x4
   322                           
   323  0074                     ??_Init_System:	
   324                           ; 1 bytes @ 0x4
   325                           
   326  0074                     ??_Init_GPIO:	
   327                           ; 1 bytes @ 0x4
   328                           
   329  0074                     ??_Init_Interupt:	
   330                           ; 1 bytes @ 0x4
   331                           
   332  0074                     ??_resetKey:	
   333                           ; 1 bytes @ 0x4
   334                           
   335  0074                     ??_Init_PWM:	
   336                           ; 1 bytes @ 0x4
   337                           
   338  0074                     ??_ADC_Result:	
   339                           ; 1 bytes @ 0x4
   340                           
   341  0074                     ??_DelayXms:	
   342                           ; 1 bytes @ 0x4
   343                           
   344  0074                     ??___awdiv:	
   345                           ; 1 bytes @ 0x4
   346                           
   347  0074                     setLedOn@ledIndex:	
   348                           ; 1 bytes @ 0x4
   349                           
   350  0074                     resetKey@key:	
   351                           ; 1 bytes @ 0x4
   352                           
   353                           
   354                           ; 1 bytes @ 0x4
   355  0074                     	ds	1
   356  0075                     ??_closeFan:	
   357  0075                     ??_Init_Config:	
   358                           ; 1 bytes @ 0x5
   359                           
   360  0075                     ??_readVrefADC:	
   361                           ; 1 bytes @ 0x5
   362                           
   363  0075                     ??_setFanLevel:	
   364                           ; 1 bytes @ 0x5
   365                           
   366                           
   367                           ; 1 bytes @ 0x5
   368  0075                     	ds	1
   369  0076                     ??_scanKeys:	
   370  0076                     ??_checkKeys:	
   371                           ; 1 bytes @ 0x6
   372                           
   373                           
   374                           	psect	cstackBANK0
   375  0047                     __pcstackBANK0:	
   376                           ; 1 bytes @ 0x6
   377                           
   378  0047                     ??_checkUsbStatus:	
   379  0047                     ??_ADC_Sample:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0047                     ?___awdiv:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0047                     sacnKeyInput@key:	
   386                           ; 2 bytes @ 0x0
   387                           
   388  0047                     key_driver@key_return:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0047                     ADC_Result@adch:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0047                     DelayXms@x:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0047                     ___awdiv@divisor:	
   398                           ; 1 bytes @ 0x0
   399                           
   400                           
   401                           ; 2 bytes @ 0x0
   402  0047                     	ds	1
   403  0048                     key_driver@key_read:	
   404  0048                     ADC_Result@i:	
   405                           ; 1 bytes @ 0x1
   406                           
   407  0048                     DelayXms@i:	
   408                           ; 1 bytes @ 0x1
   409                           
   410                           
   411                           ; 1 bytes @ 0x1
   412  0048                     	ds	1
   413  0049                     key_driver@key:	
   414  0049                     DelayXms@j:	
   415                           ; 1 bytes @ 0x2
   416                           
   417  0049                     ___awdiv@dividend:	
   418                           ; 1 bytes @ 0x2
   419                           
   420                           
   421                           ; 2 bytes @ 0x2
   422  0049                     	ds	2
   423  004B                     ADC_Sample@adch:	
   424  004B                     ___awdiv@counter:	
   425                           ; 1 bytes @ 0x4
   426                           
   427                           
   428                           ; 1 bytes @ 0x4
   429  004B                     	ds	1
   430  004C                     ADC_Sample@i:	
   431  004C                     ___awdiv@sign:	
   432                           ; 1 bytes @ 0x5
   433                           
   434                           
   435                           ; 1 bytes @ 0x5
   436  004C                     	ds	1
   437  004D                     ADC_Sample@ad_temp:	
   438  004D                     ___awdiv@quotient:	
   439                           ; 2 bytes @ 0x6
   440                           
   441                           
   442                           ; 2 bytes @ 0x6
   443  004D                     	ds	2
   444  004F                     setFanLevel@level:	
   445                           
   446                           ; 1 bytes @ 0x8
   447  004F                     	ds	1
   448  0050                     setFanLevel@tempLevel:	
   449                           
   450                           ; 1 bytes @ 0x9
   451  0050                     	ds	1
   452  0051                     ??_checkFan:	
   453                           
   454                           ; 1 bytes @ 0xA
   455  0051                     	ds	1
   456  0052                     checkKeys@key2Status:	
   457                           
   458                           ; 1 bytes @ 0xB
   459  0052                     	ds	1
   460  0053                     checkKeys@key3Status:	
   461                           
   462                           ; 1 bytes @ 0xC
   463  0053                     	ds	1
   464  0054                     ??_main:	
   465                           
   466                           ; 1 bytes @ 0xD
   467  0054                     	ds	1
   468                           
   469                           	psect	maintext
   470  0208                     __pmaintext:	
   471 ;;
   472 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   473 ;;
   474 ;; *************** function _main *****************
   475 ;; Defined at:
   476 ;;		line 267 in file "E:\project\project0508\scm\uf166fan\main.c"
   477 ;; Parameters:    Size  Location     Type
   478 ;;		None
   479 ;; Auto vars:     Size  Location     Type
   480 ;;		None
   481 ;; Return value:  Size  Location     Type
   482 ;;                  1    wreg      void 
   483 ;; Registers used:
   484 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : B00/0
   487 ;;		On exit  : 300/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMMON   BANK0   BANK1
   490 ;;      Params:         0       0       0
   491 ;;      Locals:         0       0       0
   492 ;;      Temps:          0       1       0
   493 ;;      Totals:         0       1       0
   494 ;;Total ram usage:        1 bytes
   495 ;; Hardware stack levels required when called:    7
   496 ;; This function calls:
   497 ;;		_Init_Config
   498 ;;		_Sleep_Mode
   499 ;;		_checkKeys
   500 ;;		_checkUsbStatus
   501 ;;		_readVrefADC
   502 ;;		_scanKeys
   503 ;; This function is called by:
   504 ;;		Startup code after reset
   505 ;; This function uses a non-reentrant model
   506 ;;
   507                           
   508                           
   509                           ;psect for function _main
   510  0208                     _main:	
   511                           
   512                           ;main.c: 268: if (((PORTB) >> (2)&1) == 0) {
   513                           
   514                           ;incstack = 0
   515                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   516  0208  0806               	movf	6,w	;volatile
   517  0209  00D4               	movwf	??_main
   518  020A  1003               	clrc
   519  020B  0CD4               	rrf	??_main,f
   520  020C  1003               	clrc
   521  020D  0CD4               	rrf	??_main,f
   522  020E  1854               	btfsc	??_main,0
   523  020F  2A11               	goto	l3663
   524                           
   525                           ;main.c: 269: Sleep_Mode();
   526  0210  2262               	fcall	_Sleep_Mode
   527  0211                     l3663:	
   528                           
   529                           ;main.c: 270: }
   530                           ;main.c: 272: Init_Config();
   531  0211  2380               	fcall	_Init_Config
   532  0212                     l3665:	
   533                           
   534                           ;main.c: 275: if (time0Flag) {
   535  0212  0877               	movf	_time0Flag,w
   536  0213  1903               	btfsc	3,2
   537  0214  2A1B               	goto	l3675
   538  0215  0064               	clrwdt	;# 
   539                           
   540                           ;main.c: 277: time0Flag = 0;
   541  0216  01F7               	clrf	_time0Flag
   542                           
   543                           ;main.c: 278: scanKeys();
   544  0217  2369               	fcall	_scanKeys
   545                           
   546                           ;main.c: 279: count10Ms++;
   547  0218  0AAA               	incf	_count10Ms,f
   548  0219  1903               	skipnz
   549  021A  0AAB               	incf	_count10Ms+1,f
   550  021B                     l3675:	
   551                           
   552                           ;main.c: 280: }
   553                           ;main.c: 283: if (count10Ms == 100) {
   554  021B  3064               	movlw	100
   555  021C  062A               	xorwf	_count10Ms,w
   556  021D  042B               	iorwf	_count10Ms+1,w
   557  021E  1D03               	btfss	3,2
   558  021F  2A2B               	goto	l3687
   559                           
   560                           ;main.c: 284: countTime++;
   561  0220  0AAC               	incf	_countTime,f
   562  0221  1903               	skipnz
   563  0222  0AAD               	incf	_countTime+1,f
   564                           
   565                           ;main.c: 285: count300ms++;
   566  0223  0AF6               	incf	_count300ms,f
   567                           
   568                           ;main.c: 286: checkKeys();
   569  0224  22A4               	fcall	_checkKeys
   570                           
   571                           ;main.c: 287: count10Ms = 0;
   572  0225  1283               	bcf	3,5	;RP0=0, select bank0
   573  0226  1303               	bcf	3,6	;RP1=0, select bank0
   574  0227  01AA               	clrf	_count10Ms
   575  0228  01AB               	clrf	_count10Ms+1
   576                           
   577                           ;main.c: 289: checkUsbStatus();
   578  0229  2109               	fcall	_checkUsbStatus
   579                           
   580                           ;main.c: 291: readVrefADC();
   581  022A  23A4               	fcall	_readVrefADC
   582  022B                     l3687:	
   583                           
   584                           ;main.c: 292: }
   585                           ;main.c: 294: if(count300ms == 30)
   586  022B  301E               	movlw	30
   587  022C  0676               	xorwf	_count300ms,w
   588  022D  1903               	btfsc	3,2
   589                           
   590                           ;main.c: 295: {
   591                           ;main.c: 296: count300ms = 0;
   592  022E  01F6               	clrf	_count300ms
   593                           
   594                           ;main.c: 297: }
   595                           ;main.c: 299: if (countTime == 100) {
   596  022F  3064               	movlw	100
   597  0230  062C               	xorwf	_countTime,w
   598  0231  042D               	iorwf	_countTime+1,w
   599  0232  1D03               	btfss	3,2
   600  0233  2A12               	goto	l3665
   601                           
   602                           ;main.c: 300: countTime = 0;
   603  0234  01AC               	clrf	_countTime
   604  0235  01AD               	clrf	_countTime+1
   605  0236  2A12               	goto	l3665
   606  0237                     __end_of_main:	
   607                           
   608                           	psect	text1
   609  0369                     __ptext1:	
   610 ;; *************** function _scanKeys *****************
   611 ;; Defined at:
   612 ;;		line 226 in file "E:\project\project0508\scm\uf166fan\main.c"
   613 ;; Parameters:    Size  Location     Type
   614 ;;		None
   615 ;; Auto vars:     Size  Location     Type
   616 ;;		None
   617 ;; Return value:  Size  Location     Type
   618 ;;                  1    wreg      void 
   619 ;; Registers used:
   620 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   621 ;; Tracked objects:
   622 ;;		On entry : 0/0
   623 ;;		On exit  : B00/0
   624 ;;		Unchanged: 0/0
   625 ;; Data sizes:     COMMON   BANK0   BANK1
   626 ;;      Params:         0       0       0
   627 ;;      Locals:         0       0       0
   628 ;;      Temps:          0       0       0
   629 ;;      Totals:         0       0       0
   630 ;;Total ram usage:        0 bytes
   631 ;; Hardware stack levels used:    1
   632 ;; Hardware stack levels required when called:    4
   633 ;; This function calls:
   634 ;;		_sacnKeyInput
   635 ;; This function is called by:
   636 ;;		_main
   637 ;; This function uses a non-reentrant model
   638 ;;
   639                           
   640                           
   641                           ;psect for function _scanKeys
   642  0369                     _scanKeys:	
   643                           
   644                           ;main.c: 227: key1.key_addr_result = key2.key_addr_result = key3.key_addr_result = PORTB
      +                          ;
   645                           
   646                           ;incstack = 0
   647                           ; Regs used in _scanKeys: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   648  0369  1283               	bcf	3,5	;RP0=0, select bank0
   649  036A  1303               	bcf	3,6	;RP1=0, select bank0
   650  036B  0806               	movf	6,w	;volatile
   651  036C  00B7               	movwf	_key3+5
   652  036D  00BE               	movwf	_key2+5
   653  036E  00C5               	movwf	_key1+5
   654                           
   655                           ;main.c: 228: sacnKeyInput(&key1);
   656  036F  3040               	movlw	(low (_key1| 0))& (0+255)
   657  0370  22C2               	fcall	_sacnKeyInput
   658                           
   659                           ;main.c: 229: sacnKeyInput(&key2);
   660  0371  3039               	movlw	(low (_key2| 0))& (0+255)
   661  0372  22C2               	fcall	_sacnKeyInput
   662                           
   663                           ;main.c: 230: sacnKeyInput(&key3);
   664  0373  3032               	movlw	(low (_key3| 0))& (0+255)
   665  0374  2AC2               	ljmp	_sacnKeyInput
   666  0375                     __end_of_scanKeys:	
   667                           
   668                           	psect	text2
   669  02C2                     __ptext2:	
   670 ;; *************** function _sacnKeyInput *****************
   671 ;; Defined at:
   672 ;;		line 3 in file "E:\project\project0508\scm\uf166fan\scankey.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;  key             1    wreg     PTR struct Keys
   675 ;;		 -> key3(7), key2(7), key1(7), 
   676 ;; Auto vars:     Size  Location     Type
   677 ;;  key             1    0[BANK0 ] PTR struct Keys
   678 ;;		 -> key3(7), key2(7), key1(7), 
   679 ;; Return value:  Size  Location     Type
   680 ;;                  1    wreg      void 
   681 ;; Registers used:
   682 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   683 ;; Tracked objects:
   684 ;;		On entry : 300/0
   685 ;;		On exit  : B00/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMMON   BANK0   BANK1
   688 ;;      Params:         0       0       0
   689 ;;      Locals:         0       1       0
   690 ;;      Temps:          2       0       0
   691 ;;      Totals:         2       1       0
   692 ;;Total ram usage:        3 bytes
   693 ;; Hardware stack levels used:    1
   694 ;; Hardware stack levels required when called:    3
   695 ;; This function calls:
   696 ;;		Nothing
   697 ;; This function is called by:
   698 ;;		_scanKeys
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702                           
   703                           ;psect for function _sacnKeyInput
   704  02C2                     _sacnKeyInput:	
   705                           
   706                           ;incstack = 0
   707                           ; Regs used in _sacnKeyInput: [wreg-fsr0h+status,2+status,0]
   708                           ;sacnKeyInput@key stored from wreg
   709  02C2  00C7               	movwf	sacnKeyInput@key
   710                           
   711                           ;scankey.c: 4: key->key_input = ((key->key_addr_result) >> (key->key_index)&1);
   712  02C3  3E05               	addlw	5
   713  02C4  0084               	movwf	4
   714  02C5  1383               	bcf	3,7	;select IRP bank0
   715  02C6  0800               	movf	0,w
   716  02C7  00F4               	movwf	??_sacnKeyInput
   717  02C8  0847               	movf	sacnKeyInput@key,w
   718  02C9  3E06               	addlw	6
   719  02CA  0084               	movwf	4
   720  02CB  0A00               	incf	0,w
   721  02CC  2ACF               	goto	u1314
   722  02CD                     u1315:	
   723  02CD  1003               	clrc
   724  02CE  0CF4               	rrf	??_sacnKeyInput,f
   725  02CF                     u1314:	
   726  02CF  3EFF               	addlw	-1
   727  02D0  1D03               	skipz
   728  02D1  2ACD               	goto	u1315
   729  02D2  0874               	movf	??_sacnKeyInput,w
   730  02D3  00F5               	movwf	??_sacnKeyInput+1
   731  02D4  0847               	movf	sacnKeyInput@key,w
   732  02D5  3E04               	addlw	4
   733  02D6  0084               	movwf	4
   734  02D7  0875               	movf	??_sacnKeyInput+1,w
   735  02D8  0080               	movwf	0
   736  02D9  0847               	movf	sacnKeyInput@key,w
   737  02DA  3E04               	addlw	4
   738  02DB  0084               	movwf	4
   739  02DC  3001               	movlw	1
   740  02DD  0580               	andwf	0,f
   741  02DE  0008               	return
   742  02DF                     __end_of_sacnKeyInput:	
   743                           
   744                           	psect	text3
   745  03A4                     __ptext3:	
   746 ;; *************** function _readVrefADC *****************
   747 ;; Defined at:
   748 ;;		line 90 in file "E:\project\project0508\scm\uf166fan\adc.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;		None
   751 ;; Auto vars:     Size  Location     Type
   752 ;;  result          1    0        unsigned char 
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      unsigned char 
   755 ;; Registers used:
   756 ;;		wreg, status,2, status,0, pclath, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 300/0
   759 ;;		On exit  : 300/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMMON   BANK0   BANK1
   762 ;;      Params:         0       0       0
   763 ;;      Locals:         1       0       0
   764 ;;      Temps:          0       0       0
   765 ;;      Totals:         1       0       0
   766 ;;Total ram usage:        1 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; Hardware stack levels required when called:    4
   769 ;; This function calls:
   770 ;;		_ADC_Result
   771 ;;		_ADC_Sample
   772 ;;		_DelayXms
   773 ;; This function is called by:
   774 ;;		_main
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778                           
   779                           ;psect for function _readVrefADC
   780  03A4                     _readVrefADC:	
   781                           
   782                           ;adc.c: 92: DelayXms(1);
   783                           
   784                           ;incstack = 0
   785                           ; Regs used in _readVrefADC: [wreg+status,2+status,0+pclath+cstack]
   786  03A4  3001               	movlw	1
   787  03A5  2375               	fcall	_DelayXms
   788                           
   789                           ;adc.c: 93: ADC_Sample(15);
   790  03A6  300F               	movlw	15
   791  03A7  201A               	fcall	_ADC_Sample
   792  03A8  300F               	movlw	15
   793  03A9  2ADF               	ljmp	_ADC_Result
   794  03AA                     __end_of_readVrefADC:	
   795                           
   796                           	psect	text4
   797  0375                     __ptext4:	
   798 ;; *************** function _DelayXms *****************
   799 ;; Defined at:
   800 ;;		line 82 in file "E:\project\project0508\scm\uf166fan\adc.c"
   801 ;; Parameters:    Size  Location     Type
   802 ;;  x               1    wreg     unsigned char 
   803 ;; Auto vars:     Size  Location     Type
   804 ;;  x               1    0[BANK0 ] unsigned char 
   805 ;;  j               1    2[BANK0 ] unsigned char 
   806 ;;  i               1    1[BANK0 ] unsigned char 
   807 ;; Return value:  Size  Location     Type
   808 ;;                  1    wreg      void 
   809 ;; Registers used:
   810 ;;		wreg, status,2, status,0
   811 ;; Tracked objects:
   812 ;;		On entry : 300/0
   813 ;;		On exit  : 300/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMMON   BANK0   BANK1
   816 ;;      Params:         0       0       0
   817 ;;      Locals:         0       3       0
   818 ;;      Temps:          0       0       0
   819 ;;      Totals:         0       3       0
   820 ;;Total ram usage:        3 bytes
   821 ;; Hardware stack levels used:    1
   822 ;; Hardware stack levels required when called:    3
   823 ;; This function calls:
   824 ;;		Nothing
   825 ;; This function is called by:
   826 ;;		_readVrefADC
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           
   831                           ;psect for function _DelayXms
   832  0375                     _DelayXms:	
   833                           
   834                           ;incstack = 0
   835                           ; Regs used in _DelayXms: [wreg+status,2+status,0]
   836                           ;DelayXms@x stored from wreg
   837  0375  00C7               	movwf	DelayXms@x
   838                           
   839                           ;adc.c: 84: unsigned char i,j;
   840                           ;adc.c: 85: for(i=x;i>0;i--)
   841  0376  00C8               	movwf	DelayXms@i
   842  0377                     l3571:	
   843  0377  0848               	movf	DelayXms@i,w
   844  0378  1903               	btfsc	3,2
   845  0379  0008               	return
   846                           
   847                           ;adc.c: 86: for(j=153;j>0;j--);
   848  037A  3099               	movlw	153
   849  037B  00C9               	movwf	DelayXms@j
   850  037C                     l3581:	
   851  037C  0BC9               	decfsz	DelayXms@j,f
   852  037D  2B7C               	goto	l3581
   853  037E  03C8               	decf	DelayXms@i,f
   854  037F  2B77               	goto	l3571
   855  0380                     __end_of_DelayXms:	
   856                           
   857                           	psect	text5
   858  001A                     __ptext5:	
   859 ;; *************** function _ADC_Sample *****************
   860 ;; Defined at:
   861 ;;		line 11 in file "E:\project\project0508\scm\uf166fan\adc.c"
   862 ;; Parameters:    Size  Location     Type
   863 ;;  adch            1    wreg     unsigned char 
   864 ;; Auto vars:     Size  Location     Type
   865 ;;  adch            1    4[BANK0 ] unsigned char 
   866 ;;  ad_temp         2    6[BANK0 ] volatile unsigned int 
   867 ;;  i               1    5[BANK0 ] unsigned char 
   868 ;; Return value:  Size  Location     Type
   869 ;;                  1    wreg      void 
   870 ;; Registers used:
   871 ;;		wreg, status,2, status,0
   872 ;; Tracked objects:
   873 ;;		On entry : 300/0
   874 ;;		On exit  : 300/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMMON   BANK0   BANK1
   877 ;;      Params:         0       0       0
   878 ;;      Locals:         0       4       0
   879 ;;      Temps:          0       4       0
   880 ;;      Totals:         0       8       0
   881 ;;Total ram usage:        8 bytes
   882 ;; Hardware stack levels used:    1
   883 ;; Hardware stack levels required when called:    3
   884 ;; This function calls:
   885 ;;		Nothing
   886 ;; This function is called by:
   887 ;;		_readVrefADC
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           
   892                           ;psect for function _ADC_Sample
   893  001A                     _ADC_Sample:	
   894                           
   895                           ;incstack = 0
   896                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
   897                           ;ADC_Sample@adch stored from wreg
   898  001A  00CB               	movwf	ADC_Sample@adch
   899                           
   900                           ;adc.c: 13: static unsigned long adsum = 0;
   901                           ;adc.c: 14: static unsigned int admin = 0,admax = 0;
   902                           ;adc.c: 15: static unsigned char adtimes = 0;
   903                           ;adc.c: 16: volatile unsigned int ad_temp;
   904                           ;adc.c: 17: ADCON1 = 0;
   905  001B  1683               	bsf	3,5	;RP0=1, select bank1
   906  001C  019F               	clrf	31	;volatile
   907                           
   908                           ;adc.c: 18: ADCON0 = 0X41 | (adch << 2);
   909  001D  1283               	bcf	3,5	;RP0=0, select bank0
   910  001E  084B               	movf	ADC_Sample@adch,w
   911  001F  00C7               	movwf	??_ADC_Sample
   912  0020  3001               	movlw	1
   913  0021  1003               	clrc
   914  0022                     L1:	
   915  0022  0DC7               	rlf	??_ADC_Sample,f
   916  0023  3EFF               	addlw	-1
   917  0024  1003               	clrc
   918  0025  1D03               	skipz
   919  0026  2822               	goto	L1
   920  0027  0D47               	rlf	??_ADC_Sample,w
   921  0028  3841               	iorlw	65
   922  0029  009F               	movwf	31	;volatile
   923  002A  0000               	nop	;# 
   924  002B  0000               	nop	;# 
   925                           
   926                           ;adc.c: 21: GODONE = 1;
   927  002C  1283               	bcf	3,5	;RP0=0, select bank0
   928  002D  1303               	bcf	3,6	;RP1=0, select bank0
   929  002E  149F               	bsf	31,1	;volatile
   930                           
   931                           ;adc.c: 23: unsigned char i = 0;
   932  002F  01CC               	clrf	ADC_Sample@i
   933  0030                     l1798:	
   934                           ;adc.c: 24: while(GODONE)
   935                           
   936  0030  1C9F               	btfss	31,1	;volatile
   937  0031  2835               	goto	l3523
   938                           
   939                           ;adc.c: 25: {
   940                           ;adc.c: 26: if(0 == (--i))
   941  0032  0BCC               	decfsz	ADC_Sample@i,f
   942  0033  2830               	goto	l1798
   943  0034  0008               	return
   944  0035                     l3523:	
   945                           
   946                           ;adc.c: 28: }
   947                           ;adc.c: 30: ad_temp=(ADRESH<<4)+(ADRESL>>4);
   948  0035  081E               	movf	30,w	;volatile
   949  0036  00CD               	movwf	ADC_Sample@ad_temp	;volatile
   950  0037  01CE               	clrf	ADC_Sample@ad_temp+1	;volatile
   951  0038  0ECD               	swapf	ADC_Sample@ad_temp,f	;volatile
   952  0039  0ECE               	swapf	ADC_Sample@ad_temp+1,f	;volatile
   953  003A  30F0               	movlw	240
   954  003B  05CE               	andwf	ADC_Sample@ad_temp+1,f	;volatile
   955  003C  084D               	movf	ADC_Sample@ad_temp,w	;volatile
   956  003D  390F               	andlw	15
   957  003E  04CE               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
   958  003F  30F0               	movlw	240
   959  0040  05CD               	andwf	ADC_Sample@ad_temp,f	;volatile
   960  0041  1683               	bsf	3,5	;RP0=1, select bank1
   961  0042  0E1E               	swapf	30,w	;volatile
   962  0043  390F               	andlw	15
   963  0044  1283               	bcf	3,5	;RP0=0, select bank0
   964  0045  07CD               	addwf	ADC_Sample@ad_temp,f	;volatile
   965  0046  1803               	skipnc
   966  0047  0ACE               	incf	ADC_Sample@ad_temp+1,f	;volatile
   967                           
   968                           ;adc.c: 32: if(0 == admax)
   969  0048  0824               	movf	ADC_Sample@admax,w
   970  0049  0425               	iorwf	ADC_Sample@admax+1,w
   971  004A  1D03               	btfss	3,2
   972  004B  284E               	goto	l3531
   973                           
   974                           ;adc.c: 33: {
   975                           ;adc.c: 34: admax = ad_temp;
   976  004C  20BF               	fcall	PL22	;call to abstracted procedure
   977  004D  2860               	goto	l3537
   978  004E                     l3531:	
   979                           ;adc.c: 36: }
   980                           
   981                           ;adc.c: 35: admin = ad_temp;
   982                           
   983                           
   984                           ;adc.c: 37: else if(ad_temp > admax)
   985  004E  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
   986  004F  0225               	subwf	ADC_Sample@admax+1,w
   987  0050  1D03               	skipz
   988  0051  2854               	goto	u1415
   989  0052  084D               	movf	ADC_Sample@ad_temp,w	;volatile
   990  0053  0224               	subwf	ADC_Sample@admax,w
   991  0054                     u1415:	
   992  0054  1803               	skipnc
   993  0055  2858               	goto	l3535
   994                           
   995                           ;adc.c: 38: admax = ad_temp;
   996  0056  20BF               	fcall	PL22	;call to abstracted procedure
   997  0057  2864               	goto	l1804
   998  0058                     l3535:	
   999                           
  1000                           ;adc.c: 39: else if(ad_temp < admin)
  1001  0058  0827               	movf	ADC_Sample@admin+1,w
  1002  0059  024E               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1003  005A  1D03               	skipz
  1004  005B  285E               	goto	u1425
  1005  005C  0826               	movf	ADC_Sample@admin,w
  1006  005D  024D               	subwf	ADC_Sample@ad_temp,w	;volatile
  1007  005E                     u1425:	
  1008  005E  1803               	skipnc
  1009  005F  2864               	goto	l1804
  1010  0060                     l3537:	
  1011                           
  1012                           ;adc.c: 40: admin = ad_temp;
  1013  0060  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1014  0061  00A7               	movwf	ADC_Sample@admin+1
  1015  0062  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  1016  0063  00A6               	movwf	ADC_Sample@admin
  1017  0064                     l1804:	
  1018                           
  1019                           ;adc.c: 42: adsum += ad_temp;
  1020  0064  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  1021  0065  00C7               	movwf	??_ADC_Sample
  1022  0066  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1023  0067  00C8               	movwf	??_ADC_Sample+1
  1024  0068  01C9               	clrf	??_ADC_Sample+2
  1025  0069  01CA               	clrf	??_ADC_Sample+3
  1026  006A  0847               	movf	??_ADC_Sample,w
  1027  006B  07A0               	addwf	ADC_Sample@adsum,f
  1028  006C  0848               	movf	??_ADC_Sample+1,w
  1029  006D  1103               	clrz
  1030  006E  1803               	skipnc
  1031  006F  3E01               	addlw	1
  1032  0070  1D03               	btfss	3,2
  1033  0071  07A1               	addwf	ADC_Sample@adsum+1,f
  1034  0072  0849               	movf	??_ADC_Sample+2,w
  1035  0073  1103               	clrz
  1036  0074  1803               	skipnc
  1037  0075  3E01               	addlw	1
  1038  0076  1D03               	btfss	3,2
  1039  0077  07A2               	addwf	ADC_Sample@adsum+2,f
  1040  0078  084A               	movf	??_ADC_Sample+3,w
  1041  0079  1103               	clrz
  1042  007A  1803               	skipnc
  1043  007B  3E01               	addlw	1
  1044  007C  1D03               	btfss	3,2
  1045  007D  07A3               	addwf	ADC_Sample@adsum+3,f
  1046                           
  1047                           ;adc.c: 43: if(++adtimes >= 10)
  1048  007E  300A               	movlw	10
  1049  007F  0AB0               	incf	ADC_Sample@adtimes,f
  1050  0080  0230               	subwf	ADC_Sample@adtimes,w
  1051  0081  1C03               	skipc
  1052  0082  0008               	return
  1053                           
  1054                           ;adc.c: 44: {
  1055                           ;adc.c: 45: adsum -= admax;
  1056  0083  0824               	movf	ADC_Sample@admax,w
  1057  0084  00C7               	movwf	??_ADC_Sample
  1058  0085  0825               	movf	ADC_Sample@admax+1,w
  1059  0086  20B0               	fcall	PL6	;call to abstracted procedure
  1060  0087  1C03               	skipc
  1061  0088  0F4A               	incfsz	??_ADC_Sample+3,w
  1062  0089  02A3               	subwf	ADC_Sample@adsum+3,f
  1063                           
  1064                           ;adc.c: 46: adsum -= admin;
  1065  008A  0826               	movf	ADC_Sample@admin,w
  1066  008B  00C7               	movwf	??_ADC_Sample
  1067  008C  0827               	movf	ADC_Sample@admin+1,w
  1068  008D  20B0               	fcall	PL6	;call to abstracted procedure
  1069  008E  1C03               	skipc
  1070  008F  0F4A               	incfsz	??_ADC_Sample+3,w
  1071  0090  02A3               	subwf	ADC_Sample@adsum+3,f
  1072                           
  1073                           ;adc.c: 48: adresult = adsum >> 3;
  1074  0091  0820               	movf	ADC_Sample@adsum,w
  1075  0092  00C7               	movwf	??_ADC_Sample
  1076  0093  0821               	movf	ADC_Sample@adsum+1,w
  1077  0094  00C8               	movwf	??_ADC_Sample+1
  1078  0095  0822               	movf	ADC_Sample@adsum+2,w
  1079  0096  00C9               	movwf	??_ADC_Sample+2
  1080  0097  0823               	movf	ADC_Sample@adsum+3,w
  1081  0098  00CA               	movwf	??_ADC_Sample+3
  1082  0099  3003               	movlw	3
  1083  009A                     u1475:	
  1084  009A  1003               	clrc
  1085  009B  0CCA               	rrf	??_ADC_Sample+3,f
  1086  009C  0CC9               	rrf	??_ADC_Sample+2,f
  1087  009D  0CC8               	rrf	??_ADC_Sample+1,f
  1088  009E  0CC7               	rrf	??_ADC_Sample,f
  1089  009F  3EFF               	addlw	-1
  1090  00A0  1D03               	skipz
  1091  00A1  289A               	goto	u1475
  1092  00A2  0848               	movf	??_ADC_Sample+1,w
  1093  00A3  00AF               	movwf	_adresult+1	;volatile
  1094  00A4  0847               	movf	??_ADC_Sample,w
  1095  00A5  00AE               	movwf	_adresult	;volatile
  1096                           
  1097                           ;adc.c: 50: adsum = 0;
  1098  00A6  01A0               	clrf	ADC_Sample@adsum
  1099  00A7  01A1               	clrf	ADC_Sample@adsum+1
  1100  00A8  01A2               	clrf	ADC_Sample@adsum+2
  1101  00A9  01A3               	clrf	ADC_Sample@adsum+3
  1102                           
  1103                           ;adc.c: 51: admin = 0;
  1104  00AA  01A6               	clrf	ADC_Sample@admin
  1105  00AB  01A7               	clrf	ADC_Sample@admin+1
  1106                           
  1107                           ;adc.c: 52: admax = 0;
  1108  00AC  01A4               	clrf	ADC_Sample@admax
  1109  00AD  01A5               	clrf	ADC_Sample@admax+1
  1110                           
  1111                           ;adc.c: 53: adtimes = 0;
  1112  00AE  01B0               	clrf	ADC_Sample@adtimes
  1113  00AF  0008               	return
  1114  00B0                     __end_of_ADC_Sample:	
  1115  00B0                     PL6:	
  1116  00B0  00C8               	movwf	??_ADC_Sample+1
  1117  00B1  01C9               	clrf	??_ADC_Sample+2
  1118  00B2  01CA               	clrf	??_ADC_Sample+3
  1119  00B3  0847               	movf	??_ADC_Sample,w
  1120  00B4  02A0               	subwf	ADC_Sample@adsum,f
  1121  00B5  0848               	movf	??_ADC_Sample+1,w
  1122  00B6  1C03               	skipc
  1123  00B7  0F48               	incfsz	??_ADC_Sample+1,w
  1124  00B8  02A1               	subwf	ADC_Sample@adsum+1,f
  1125  00B9  0849               	movf	??_ADC_Sample+2,w
  1126  00BA  1C03               	skipc
  1127  00BB  0F49               	incfsz	??_ADC_Sample+2,w
  1128  00BC  02A2               	subwf	ADC_Sample@adsum+2,f
  1129  00BD  084A               	movf	??_ADC_Sample+3,w
  1130  00BE  0008               	return
  1131  00BF                     __end_ofPL6:	
  1132  00BF                     PL22:	
  1133  00BF  084E               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1134  00C0  00A5               	movwf	ADC_Sample@admax+1
  1135  00C1  084D               	movf	ADC_Sample@ad_temp,w	;volatile
  1136  00C2  00A4               	movwf	ADC_Sample@admax
  1137  00C3  0008               	return
  1138  00C4                     __end_ofPL22:	
  1139                           
  1140                           	psect	text6
  1141  02DF                     __ptext6:	
  1142 ;; *************** function _ADC_Result *****************
  1143 ;; Defined at:
  1144 ;;		line 59 in file "E:\project\project0508\scm\uf166fan\adc.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;  adch            1    wreg     unsigned char 
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;  adch            1    0[BANK0 ] unsigned char 
  1149 ;;  i               1    1[BANK0 ] unsigned char 
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  1    wreg      unsigned char 
  1152 ;; Registers used:
  1153 ;;		wreg, status,2, status,0
  1154 ;; Tracked objects:
  1155 ;;		On entry : 300/0
  1156 ;;		On exit  : 300/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMMON   BANK0   BANK1
  1159 ;;      Params:         0       0       0
  1160 ;;      Locals:         0       2       0
  1161 ;;      Temps:          1       0       0
  1162 ;;      Totals:         1       2       0
  1163 ;;Total ram usage:        3 bytes
  1164 ;; Hardware stack levels used:    1
  1165 ;; Hardware stack levels required when called:    3
  1166 ;; This function calls:
  1167 ;;		Nothing
  1168 ;; This function is called by:
  1169 ;;		_readVrefADC
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           
  1174                           ;psect for function _ADC_Result
  1175  02DF                     _ADC_Result:	
  1176                           
  1177                           ;incstack = 0
  1178                           ; Regs used in _ADC_Result: [wreg+status,2+status,0]
  1179                           ;ADC_Result@adch stored from wreg
  1180  02DF  00C7               	movwf	ADC_Result@adch
  1181                           
  1182                           ;adc.c: 61: ADCON1 = 0;
  1183  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  1184  02E1  019F               	clrf	31	;volatile
  1185                           
  1186                           ;adc.c: 62: ADCON0 = 0X41 | (adch << 2);
  1187  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  1188  02E3  0847               	movf	ADC_Result@adch,w
  1189  02E4  00F4               	movwf	??_ADC_Result
  1190  02E5  3001               	movlw	1
  1191  02E6  1003               	clrc
  1192  02E7                     L2:	
  1193  02E7  0DF4               	rlf	??_ADC_Result,f
  1194  02E8  3EFF               	addlw	-1
  1195  02E9  1003               	clrc
  1196  02EA  1D03               	skipz
  1197  02EB  2AE7               	goto	L2
  1198  02EC  0D74               	rlf	??_ADC_Result,w
  1199  02ED  3841               	iorlw	65
  1200  02EE  009F               	movwf	31	;volatile
  1201  02EF  0000               	nop	;# 
  1202  02F0  0000               	nop	;# 
  1203                           
  1204                           ;adc.c: 65: GODONE = 1;
  1205  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  1206  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  1207  02F3  149F               	bsf	31,1	;volatile
  1208                           
  1209                           ;adc.c: 67: unsigned char i = 0;
  1210  02F4  01C8               	clrf	ADC_Result@i
  1211  02F5                     l1811:	
  1212                           ;adc.c: 68: while(GODONE)
  1213                           
  1214  02F5  1C9F               	btfss	31,1	;volatile
  1215  02F6  2AFA               	goto	l3565
  1216                           
  1217                           ;adc.c: 69: {
  1218                           ;adc.c: 70: if(0 == (--i))
  1219  02F7  0BC8               	decfsz	ADC_Result@i,f
  1220  02F8  2AF5               	goto	l1811
  1221                           
  1222                           ;adc.c: 71: return 0;
  1223  02F9  3400               	retlw	0
  1224  02FA                     l3565:	
  1225                           
  1226                           ;adc.c: 72: }
  1227                           ;adc.c: 73: return ADRESH;
  1228  02FA  081E               	movf	30,w	;volatile
  1229  02FB  0008               	return
  1230  02FC                     __end_of_ADC_Result:	
  1231                           
  1232                           	psect	text7
  1233  0109                     __ptext7:	
  1234 ;; *************** function _checkUsbStatus *****************
  1235 ;; Defined at:
  1236 ;;		line 42 in file "E:\project\project0508\scm\uf166fan\main.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;		None
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;		None
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  1    wreg      void 
  1243 ;; Registers used:
  1244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1245 ;; Tracked objects:
  1246 ;;		On entry : 300/0
  1247 ;;		On exit  : 300/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMMON   BANK0   BANK1
  1250 ;;      Params:         0       0       0
  1251 ;;      Locals:         0       0       0
  1252 ;;      Temps:          0       2       0
  1253 ;;      Totals:         0       2       0
  1254 ;;Total ram usage:        2 bytes
  1255 ;; Hardware stack levels used:    1
  1256 ;; Hardware stack levels required when called:    5
  1257 ;; This function calls:
  1258 ;;		_closeFan
  1259 ;; This function is called by:
  1260 ;;		_main
  1261 ;; This function uses a non-reentrant model
  1262 ;;
  1263                           
  1264                           
  1265                           ;psect for function _checkUsbStatus
  1266  0109                     _checkUsbStatus:	
  1267                           
  1268                           ;main.c: 43: if (((PORTB) >> (2)&1) == 1) {
  1269                           
  1270                           ;incstack = 0
  1271                           ; Regs used in _checkUsbStatus: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1272  0109  0806               	movf	6,w	;volatile
  1273  010A  00C7               	movwf	??_checkUsbStatus
  1274  010B  1003               	clrc
  1275  010C  0CC7               	rrf	??_checkUsbStatus,f
  1276  010D  1003               	clrc
  1277  010E  0CC7               	rrf	??_checkUsbStatus,f
  1278  010F  1C47               	btfss	??_checkUsbStatus,0
  1279  0110  2921               	goto	l585
  1280                           
  1281                           ;main.c: 44: if (((PORTB) >> (1)&1) == 1) {
  1282  0111  0806               	movf	6,w	;volatile
  1283  0112  00C7               	movwf	??_checkUsbStatus
  1284  0113  1003               	clrc
  1285  0114  0CC7               	rrf	??_checkUsbStatus,f
  1286  0115  1C47               	btfss	??_checkUsbStatus,0
  1287  0116  2919               	goto	l3595
  1288                           
  1289                           ;main.c: 46: PORTA&=~(1<<0);
  1290  0117  1005               	bcf	5,0	;volatile
  1291                           
  1292                           ;main.c: 47: } else if (countTime == 50) {
  1293  0118  0008               	return
  1294  0119                     l3595:	
  1295  0119  3032               	movlw	50
  1296  011A  062C               	xorwf	_countTime,w
  1297  011B  042D               	iorwf	_countTime+1,w
  1298  011C  1D03               	btfss	3,2
  1299  011D  0008               	return
  1300                           
  1301                           ;main.c: 49: PORTA^=(1<<0);
  1302  011E  3001               	movlw	1
  1303  011F  0685               	xorwf	5,f	;volatile
  1304  0120  0008               	return
  1305  0121                     l585:	
  1306                           
  1307                           ;main.c: 53: PORTA|=(1<<0);
  1308  0121  1405               	bsf	5,0	;volatile
  1309                           
  1310                           ;main.c: 54: if((adresult/8) > 0x63 && count300ms == 0)
  1311  0122  213D               	fcall	PL4	;call to abstracted procedure
  1312  0123  3064               	movlw	100
  1313  0124  1903               	skipnz
  1314  0125  0247               	subwf	??_checkUsbStatus,w
  1315  0126  1C03               	skipc
  1316  0127  2934               	goto	l3611
  1317  0128  0876               	movf	_count300ms,w
  1318  0129  1D03               	btfss	3,2
  1319  012A  2934               	goto	l3611
  1320                           
  1321                           ;main.c: 55: {
  1322                           ;main.c: 56: if(lowVTime < 20)
  1323  012B  3014               	movlw	20
  1324  012C  0231               	subwf	_lowVTime,w
  1325  012D  1803               	skipnc
  1326  012E  2933               	goto	l3609
  1327  012F  3001               	movlw	1
  1328                           
  1329                           ;main.c: 57: {
  1330                           ;main.c: 58: lowVTime++;
  1331  0130  0AB1               	incf	_lowVTime,f
  1332                           
  1333                           ;main.c: 60: PORTA^=(1<<0);
  1334  0131  0685               	xorwf	5,f	;volatile
  1335                           
  1336                           ;main.c: 61: }else
  1337  0132  2934               	goto	l3611
  1338  0133                     l3609:	
  1339                           
  1340                           ;main.c: 62: {
  1341                           ;main.c: 64: closeFan();
  1342  0133  22FC               	fcall	_closeFan
  1343  0134                     l3611:	
  1344                           
  1345                           ;main.c: 65: }
  1346                           ;main.c: 66: }
  1347                           ;main.c: 67: if((adresult/8) < 0x63)
  1348  0134  1283               	bcf	3,5	;RP0=0, select bank0
  1349  0135  1303               	bcf	3,6	;RP1=0, select bank0
  1350  0136  213D               	fcall	PL4	;call to abstracted procedure
  1351  0137  3063               	movlw	99
  1352  0138  1903               	skipnz
  1353  0139  0247               	subwf	??_checkUsbStatus,w
  1354  013A  1C03               	btfss	3,0
  1355                           
  1356                           ;main.c: 68: {
  1357                           ;main.c: 69: lowVTime = 0;
  1358  013B  01B1               	clrf	_lowVTime
  1359  013C  0008               	return
  1360  013D                     __end_of_checkUsbStatus:	
  1361  013D                     PL4:	
  1362  013D  082F               	movf	_adresult+1,w	;volatile
  1363  013E  00C8               	movwf	??_checkUsbStatus+1
  1364  013F  082E               	movf	_adresult,w	;volatile
  1365  0140  00C7               	movwf	??_checkUsbStatus
  1366  0141  3000               	movlw	0
  1367  0142  1003               	clrc
  1368  0143  0CC8               	rrf	??_checkUsbStatus+1,f
  1369  0144  0CC7               	rrf	??_checkUsbStatus,f
  1370  0145  1003               	clrc
  1371  0146  0CC8               	rrf	??_checkUsbStatus+1,f
  1372  0147  0CC7               	rrf	??_checkUsbStatus,f
  1373  0148  1003               	clrc
  1374  0149  0CC8               	rrf	??_checkUsbStatus+1,f
  1375  014A  0CC7               	rrf	??_checkUsbStatus,f
  1376  014B  0248               	subwf	??_checkUsbStatus+1,w
  1377  014C  0008               	return
  1378  014D                     __end_ofPL4:	
  1379                           
  1380                           	psect	text8
  1381  02A4                     __ptext8:	
  1382 ;; *************** function _checkKeys *****************
  1383 ;; Defined at:
  1384 ;;		line 235 in file "E:\project\project0508\scm\uf166fan\main.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;		None
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;  key3Status      1   12[BANK0 ] unsigned char 
  1389 ;;  key2Status      1   11[BANK0 ] unsigned char 
  1390 ;; Return value:  Size  Location     Type
  1391 ;;                  1    wreg      void 
  1392 ;; Registers used:
  1393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1394 ;; Tracked objects:
  1395 ;;		On entry : 300/0
  1396 ;;		On exit  : 0/0
  1397 ;;		Unchanged: 0/0
  1398 ;; Data sizes:     COMMON   BANK0   BANK1
  1399 ;;      Params:         0       0       0
  1400 ;;      Locals:         0       2       0
  1401 ;;      Temps:          0       0       0
  1402 ;;      Totals:         0       2       0
  1403 ;;Total ram usage:        2 bytes
  1404 ;; Hardware stack levels used:    1
  1405 ;; Hardware stack levels required when called:    6
  1406 ;; This function calls:
  1407 ;;		_checkFan
  1408 ;;		_closeFan
  1409 ;;		_key_driver
  1410 ;;		_setFanLevel
  1411 ;; This function is called by:
  1412 ;;		_main
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           
  1417                           ;psect for function _checkKeys
  1418  02A4                     _checkKeys:	
  1419                           
  1420                           ;main.c: 236: if (key_driver(&key1) == 1) {
  1421                           
  1422                           ;incstack = 0
  1423                           ; Regs used in _checkKeys: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1424  02A4  3040               	movlw	(low (_key1| 0))& (0+255)
  1425  02A5  214D               	fcall	_key_driver
  1426  02A6  3A01               	xorlw	1
  1427  02A7  1D03               	skipz
  1428  02A8  2AAF               	goto	l3637
  1429                           
  1430                           ;main.c: 239: if (FAN_STATUS == 1) {
  1431  02A9  0B78               	decfsz	_FAN_STATUS,w
  1432  02AA  2AAC               	goto	l3629
  1433                           
  1434                           ;main.c: 241: closeFan();
  1435  02AB  2AFC               	ljmp	l3391
  1436  02AC                     l3629:	
  1437                           ;main.c: 242: } else {
  1438                           
  1439                           
  1440                           ;main.c: 243: FAN_STATUS = 2;
  1441  02AC  3002               	movlw	2
  1442  02AD  00F8               	movwf	_FAN_STATUS
  1443                           
  1444                           ;main.c: 244: checkFan();
  1445  02AE  2A37               	ljmp	l3443
  1446  02AF                     l3637:	
  1447  02AF  3002               	movlw	2
  1448  02B0  0678               	xorwf	_FAN_STATUS,w
  1449  02B1  1D03               	btfss	3,2
  1450  02B2  2AB4               	goto	l641
  1451                           
  1452                           ;main.c: 248: checkFan();
  1453  02B3  2237               	fcall	_checkFan
  1454  02B4                     l641:	
  1455                           
  1456                           ;main.c: 249: }
  1457                           ;main.c: 251: unsigned char key2Status = key_driver(&key2);
  1458  02B4  3039               	movlw	(low (_key2| 0))& (0+255)
  1459  02B5  214D               	fcall	_key_driver
  1460  02B6  00D2               	movwf	checkKeys@key2Status
  1461                           
  1462                           ;main.c: 252: if (key2Status == 1) {
  1463  02B7  0B52               	decfsz	checkKeys@key2Status,w
  1464  02B8  2ABB               	goto	l3647
  1465                           
  1466                           ;main.c: 254: setFanLevel(1);
  1467  02B9  3001               	movlw	1
  1468  02BA  2991               	ljmp	_setFanLevel
  1469  02BB                     l3647:	
  1470                           
  1471                           ;main.c: 256: }
  1472                           ;main.c: 257: unsigned char key3Status = key_driver(&key3);
  1473  02BB  3032               	movlw	(low (_key3| 0))& (0+255)
  1474  02BC  214D               	fcall	_key_driver
  1475  02BD  00D3               	movwf	checkKeys@key3Status
  1476                           
  1477                           ;main.c: 258: if (key3Status == 1) {
  1478  02BE  0B53               	decfsz	checkKeys@key3Status,w
  1479  02BF  0008               	return
  1480                           
  1481                           ;main.c: 260: setFanLevel(-1);
  1482  02C0  30FF               	movlw	255
  1483  02C1  2991               	ljmp	_setFanLevel
  1484  02C2                     __end_of_checkKeys:	
  1485                           
  1486                           	psect	text9
  1487  014D                     __ptext9:	
  1488 ;; *************** function _key_driver *****************
  1489 ;; Defined at:
  1490 ;;		line 9 in file "E:\project\project0508\scm\uf166fan\scankey.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;  key             1    wreg     PTR struct Keys
  1493 ;;		 -> key3(7), key2(7), key1(7), 
  1494 ;; Auto vars:     Size  Location     Type
  1495 ;;  key             1    2[BANK0 ] PTR struct Keys
  1496 ;;		 -> key3(7), key2(7), key1(7), 
  1497 ;;  key_read        1    1[BANK0 ] unsigned char 
  1498 ;;  key_return      1    0[BANK0 ] unsigned char 
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      unsigned char 
  1501 ;; Registers used:
  1502 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : B00/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMMON   BANK0   BANK1
  1508 ;;      Params:         0       0       0
  1509 ;;      Locals:         0       3       0
  1510 ;;      Temps:          0       0       0
  1511 ;;      Totals:         0       3       0
  1512 ;;Total ram usage:        3 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    3
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_checkKeys
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           
  1523                           ;psect for function _key_driver
  1524  014D                     _key_driver:	
  1525                           
  1526                           ;incstack = 0
  1527                           ; Regs used in _key_driver: [wreg-fsr0h+status,2+status,0]
  1528                           ;key_driver@key stored from wreg
  1529  014D  1283               	bcf	3,5	;RP0=0, select bank0
  1530  014E  1303               	bcf	3,6	;RP1=0, select bank0
  1531  014F  00C9               	movwf	key_driver@key
  1532                           
  1533                           ;scankey.c: 12: unsigned char key_return = 0;
  1534  0150  01C7               	clrf	key_driver@key_return
  1535                           
  1536                           ;scankey.c: 13: unsigned char key_read = key->key_input;
  1537  0151  3E04               	addlw	4
  1538  0152  0084               	movwf	4
  1539  0153  1383               	bcf	3,7	;select IRP bank0
  1540  0154  0800               	movf	0,w
  1541  0155  00C8               	movwf	key_driver@key_read
  1542                           
  1543                           ;scankey.c: 15: switch (key->key_state_buffer1) {
  1544  0156  2982               	goto	l3501
  1545  0157                     l3471:	
  1546                           
  1547                           ;scankey.c: 17: if (key_read == 0) {
  1548  0157  0848               	movf	key_driver@key_read,w
  1549  0158  1D03               	btfss	3,2
  1550  0159  298F               	goto	l3503
  1551                           
  1552                           ;scankey.c: 18: key->key_state_buffer1 = 1;
  1553  015A  0A49               	incf	key_driver@key,w
  1554  015B  0084               	movwf	4
  1555  015C  0180               	clrf	0
  1556  015D  0A80               	incf	0,f
  1557  015E  298F               	goto	l3503
  1558  015F                     l3475:	
  1559                           
  1560                           ;scankey.c: 25: if (key_read == 0) {
  1561  015F  0848               	movf	key_driver@key_read,w
  1562  0160  1D03               	btfss	3,2
  1563  0161  297E               	goto	l3497
  1564                           
  1565                           ;scankey.c: 26: key->key_timer_cnt1 = 0;
  1566  0162  0849               	movf	key_driver@key,w
  1567  0163  0084               	movwf	4
  1568  0164  0180               	clrf	0
  1569                           
  1570                           ;scankey.c: 27: key->key_state_buffer1 = 2;
  1571  0165  0A49               	incf	key_driver@key,w
  1572  0166  0084               	movwf	4
  1573  0167  3002               	movlw	2
  1574  0168  297A               	goto	L3
  1575  0169                     l3483:	
  1576                           ;scankey.c: 32: key->key_state_buffer1 = 0;
  1577                           
  1578                           ;scankey.c: 31: } else {
  1579                           
  1580                           
  1581                           ;scankey.c: 39: if (key_read == 1) {
  1582  0169  0B48               	decfsz	key_driver@key_read,w
  1583  016A  296E               	goto	l3489
  1584                           
  1585                           ;scankey.c: 40: key_return = 1;
  1586  016B  01C7               	clrf	key_driver@key_return
  1587  016C  0AC7               	incf	key_driver@key_return,f
  1588  016D  297E               	goto	l3497
  1589  016E                     l3489:	
  1590                           ;scankey.c: 42: } else if (++(key->key_timer_cnt1) >= 100)
  1591                           
  1592                           ;scankey.c: 41: key->key_state_buffer1 = 0;
  1593                           
  1594  016E  0849               	movf	key_driver@key,w
  1595  016F  0084               	movwf	4
  1596  0170  3064               	movlw	100
  1597  0171  0A80               	incf	0,f
  1598  0172  0200               	subwf	0,w
  1599  0173  1C03               	skipc
  1600  0174  298F               	goto	l3503
  1601                           
  1602                           ;scankey.c: 43: {
  1603                           ;scankey.c: 44: key_return = 3;
  1604  0175  3003               	movlw	3
  1605  0176  00C7               	movwf	key_driver@key_return
  1606                           
  1607                           ;scankey.c: 45: key->key_state_buffer1 = 3;
  1608  0177  0A49               	incf	key_driver@key,w
  1609  0178  0084               	movwf	4
  1610  0179  3003               	movlw	3
  1611  017A                     L3:	
  1612  017A  0080               	movwf	0
  1613  017B  298F               	goto	l3503
  1614  017C                     l3495:	
  1615                           
  1616                           ;scankey.c: 51: if (key_read == 1)
  1617  017C  0B48               	decfsz	key_driver@key_read,w
  1618  017D  298F               	goto	l3503
  1619  017E                     l3497:	
  1620                           
  1621                           ;scankey.c: 52: {
  1622                           ;scankey.c: 53: key->key_state_buffer1 = 0;
  1623  017E  0A49               	incf	key_driver@key,w
  1624  017F  0084               	movwf	4
  1625  0180  0180               	clrf	0
  1626  0181  298F               	goto	l3503
  1627  0182                     l3501:	
  1628  0182  0A49               	incf	key_driver@key,w
  1629  0183  0084               	movwf	4
  1630  0184  0800               	movf	0,w
  1631                           
  1632                           ; Switch size 1, requested type "space"
  1633                           ; Number of cases is 4, Range of values is 0 to 3
  1634                           ; switch strategies available:
  1635                           ; Name         Instructions Cycles
  1636                           ; direct_byte           10     6 (fixed)
  1637                           ; simple_byte           13     7 (average)
  1638                           ; jumptable            260     6 (fixed)
  1639                           ;	Chosen strategy is direct_byte
  1640  0185  0084               	movwf	4
  1641  0186  3004               	movlw	4
  1642  0187  0204               	subwf	4,w
  1643  0188  1803               	skipnc
  1644  0189  298F               	goto	l3503
  1645  018A  3003               	movlw	high S3745
  1646  018B  008A               	movwf	10
  1647  018C  30AF               	movlw	low S3745
  1648  018D  0704               	addwf	4,w
  1649  018E  0082               	movwf	2
  1650  018F                     l3503:	
  1651                           
  1652                           ;scankey.c: 58: return key_return;
  1653  018F  0847               	movf	key_driver@key_return,w
  1654  0190  0008               	return
  1655  0191                     __end_of_key_driver:	
  1656                           
  1657                           	psect	swtext1
  1658  03AF                     __pswtext1:	
  1659  03AF                     S3745:	
  1660  03AF  2957               	ljmp	l3471
  1661  03B0  295F               	ljmp	l3475
  1662  03B1  2969               	ljmp	l3483
  1663  03B2  297C               	ljmp	l3495
  1664                           
  1665                           	psect	text10
  1666  0237                     __ptext10:	
  1667 ;; *************** function _checkFan *****************
  1668 ;; Defined at:
  1669 ;;		line 145 in file "E:\project\project0508\scm\uf166fan\main.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;		None
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;		None
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  1    wreg      void 
  1676 ;; Registers used:
  1677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1678 ;; Tracked objects:
  1679 ;;		On entry : B00/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMMON   BANK0   BANK1
  1683 ;;      Params:         0       0       0
  1684 ;;      Locals:         0       0       0
  1685 ;;      Temps:          0       1       0
  1686 ;;      Totals:         0       1       0
  1687 ;;Total ram usage:        1 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    5
  1690 ;; This function calls:
  1691 ;;		_closeFan
  1692 ;;		_setFanLevel
  1693 ;; This function is called by:
  1694 ;;		_checkKeys
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           
  1699                           ;psect for function _checkFan
  1700  0237                     _checkFan:	
  1701  0237                     l3443:	
  1702                           ;incstack = 0
  1703                           ; Regs used in _checkFan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1704                           
  1705                           
  1706                           ;main.c: 146: TRISA&=~(1<<1);
  1707  0237  1683               	bsf	3,5	;RP0=1, select bank1
  1708  0238  1085               	bcf	5,1	;volatile
  1709                           
  1710                           ;main.c: 147: PORTA|=(1<<1);
  1711  0239  1283               	bcf	3,5	;RP0=0, select bank0
  1712  023A  1485               	bsf	5,1	;volatile
  1713                           
  1714                           ;main.c: 149: TRISC&=~(1<<2);
  1715  023B  1683               	bsf	3,5	;RP0=1, select bank1
  1716  023C  1107               	bcf	7,2	;volatile
  1717                           
  1718                           ;main.c: 150: PORTA|=(1<<2);
  1719  023D  1283               	bcf	3,5	;RP0=0, select bank0
  1720  023E  1505               	bsf	5,2	;volatile
  1721                           
  1722                           ;main.c: 151: T2CON = 0X04;
  1723  023F  3004               	movlw	4
  1724  0240  0092               	movwf	18	;volatile
  1725                           
  1726                           ;main.c: 154: if (((PORTB) >> (6)&1) == 0) {
  1727  0241  0806               	movf	6,w	;volatile
  1728  0242  00D1               	movwf	??_checkFan
  1729  0243  3006               	movlw	6
  1730  0244                     u1275:	
  1731  0244  1003               	clrc
  1732  0245  0CD1               	rrf	??_checkFan,f
  1733  0246  3EFF               	addlw	-1
  1734  0247  1D03               	skipz
  1735  0248  2A44               	goto	u1275
  1736  0249  1851               	btfsc	??_checkFan,0
  1737  024A  2A4E               	goto	l3451
  1738                           
  1739                           ;main.c: 155: FAN_STATUS = 1;
  1740  024B  01F8               	clrf	_FAN_STATUS
  1741  024C  0AF8               	incf	_FAN_STATUS,f
  1742                           
  1743                           ;main.c: 156: } else {
  1744  024D  2A50               	goto	l3453
  1745  024E                     l3451:	
  1746                           
  1747                           ;main.c: 157: FAN_STATUS = 2;
  1748  024E  3002               	movlw	2
  1749  024F  00F8               	movwf	_FAN_STATUS
  1750  0250                     l3453:	
  1751                           
  1752                           ;main.c: 158: }
  1753                           ;main.c: 160: setFanLevel(0);
  1754  0250  3000               	movlw	0
  1755  0251  2191               	fcall	_setFanLevel
  1756                           
  1757                           ;main.c: 163: if (FAN_STATUS == 2) {
  1758  0252  3002               	movlw	2
  1759  0253  0678               	xorwf	_FAN_STATUS,w
  1760  0254  1D03               	btfss	3,2
  1761  0255  0008               	return
  1762                           
  1763                           ;main.c: 164: fan_check_time++;
  1764  0256  1283               	bcf	3,5	;RP0=0, select bank0
  1765  0257  0AA8               	incf	_fan_check_time,f
  1766  0258  1903               	skipnz
  1767  0259  0AA9               	incf	_fan_check_time+1,f
  1768                           
  1769                           ;main.c: 165: if (fan_check_time == 3000) {
  1770  025A  30B8               	movlw	184
  1771  025B  0628               	xorwf	_fan_check_time,w
  1772  025C  300B               	movlw	11
  1773  025D  1903               	skipnz
  1774  025E  0629               	xorwf	_fan_check_time+1,w
  1775  025F  1D03               	btfss	3,2
  1776  0260  0008               	return
  1777                           
  1778                           ;main.c: 166: closeFan();
  1779  0261  2AFC               	ljmp	l3391
  1780  0262                     __end_of_checkFan:	
  1781                           
  1782                           	psect	text11
  1783  0191                     __ptext11:	
  1784 ;; *************** function _setFanLevel *****************
  1785 ;; Defined at:
  1786 ;;		line 88 in file "E:\project\project0508\scm\uf166fan\main.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;  level           1    wreg     unsigned char 
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;  level           1    8[BANK0 ] unsigned char 
  1791 ;;  levelWidth      2    0        unsigned int 
  1792 ;;  tempLevel       1    9[BANK0 ] unsigned char 
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1    wreg      void 
  1795 ;; Registers used:
  1796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1797 ;; Tracked objects:
  1798 ;;		On entry : B00/0
  1799 ;;		On exit  : 200/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMMON   BANK0   BANK1
  1802 ;;      Params:         0       0       0
  1803 ;;      Locals:         0       2       0
  1804 ;;      Temps:          0       0       0
  1805 ;;      Totals:         0       2       0
  1806 ;;Total ram usage:        2 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; Hardware stack levels required when called:    4
  1809 ;; This function calls:
  1810 ;;		___awdiv
  1811 ;;		_setLedOn
  1812 ;; This function is called by:
  1813 ;;		_checkFan
  1814 ;;		_checkKeys
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           
  1819                           ;psect for function _setFanLevel
  1820  0191                     _setFanLevel:	
  1821                           
  1822                           ;incstack = 0
  1823                           ; Regs used in _setFanLevel: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1824                           ;setFanLevel@level stored from wreg
  1825  0191  00CF               	movwf	setFanLevel@level
  1826                           
  1827                           ;main.c: 89: if(level == 0)
  1828  0192  084F               	movf	setFanLevel@level,w
  1829  0193  1D03               	btfss	3,2
  1830  0194  2997               	goto	l3413
  1831                           
  1832                           ;main.c: 90: {
  1833                           ;main.c: 91: currentLevel = 3;
  1834  0195  3003               	movlw	3
  1835  0196  00F9               	movwf	_currentLevel
  1836  0197                     l3413:	
  1837                           
  1838                           ;main.c: 92: }
  1839                           ;main.c: 93: unsigned int levelWidth = (PR2 + 1) / 4;
  1840  0197  1683               	bsf	3,5	;RP0=1, select bank1
  1841  0198  0812               	movf	18,w	;volatile
  1842  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1843  019A  00C9               	movwf	___awdiv@dividend
  1844  019B  01CA               	clrf	___awdiv@dividend+1
  1845  019C  0AC9               	incf	___awdiv@dividend,f
  1846  019D  1903               	skipnz
  1847  019E  0ACA               	incf	___awdiv@dividend+1,f
  1848  019F  3004               	movlw	4
  1849  01A0  00C7               	movwf	___awdiv@divisor
  1850  01A1  01C8               	clrf	___awdiv@divisor+1
  1851  01A2  20C4               	fcall	___awdiv
  1852                           
  1853                           ;main.c: 94: char tempLevel = currentLevel + level;
  1854  01A3  084F               	movf	setFanLevel@level,w
  1855  01A4  0779               	addwf	_currentLevel,w
  1856  01A5  00D0               	movwf	setFanLevel@tempLevel
  1857                           
  1858                           ;main.c: 95: if (tempLevel > 4) {
  1859  01A6  3005               	movlw	5
  1860  01A7  0250               	subwf	setFanLevel@tempLevel,w
  1861  01A8  1C03               	skipc
  1862  01A9  29AC               	goto	l3421
  1863                           
  1864                           ;main.c: 96: tempLevel = 4;
  1865  01AA  3004               	movlw	4
  1866  01AB  00D0               	movwf	setFanLevel@tempLevel
  1867  01AC                     l3421:	
  1868                           
  1869                           ;main.c: 97: }
  1870                           ;main.c: 99: if (tempLevel < 1) {
  1871  01AC  0850               	movf	setFanLevel@tempLevel,w
  1872  01AD  1D03               	btfss	3,2
  1873  01AE  29B1               	goto	l3425
  1874                           
  1875                           ;main.c: 100: tempLevel = 1;
  1876  01AF  01D0               	clrf	setFanLevel@tempLevel
  1877  01B0  0AD0               	incf	setFanLevel@tempLevel,f
  1878  01B1                     l3425:	
  1879                           
  1880                           ;main.c: 101: }
  1881                           ;main.c: 104: if (FAN_STATUS == 1) {
  1882  01B1  0B78               	decfsz	_FAN_STATUS,w
  1883  01B2  0008               	return
  1884                           
  1885                           ;main.c: 105: currentLevel = tempLevel;
  1886  01B3  0850               	movf	setFanLevel@tempLevel,w
  1887  01B4  00F9               	movwf	_currentLevel
  1888                           
  1889                           ;main.c: 106: switch(currentLevel)
  1890  01B5  29BF               	goto	l3439
  1891  01B6                     l3429:	
  1892                           
  1893                           ;main.c: 109: CCPR1L = 1;
  1894  01B6  3001               	movlw	1
  1895  01B7  29BD               	goto	L6
  1896  01B8                     l3431:	
  1897                           ;main.c: 110: break;
  1898                           
  1899                           
  1900                           ;main.c: 112: CCPR1L = 2;
  1901  01B8  3002               	movlw	2
  1902  01B9  29BD               	goto	L6
  1903  01BA                     l3433:	
  1904                           ;main.c: 113: break;
  1905                           
  1906                           
  1907                           ;main.c: 115: CCPR1L = 3;
  1908  01BA  3003               	movlw	3
  1909  01BB  29BD               	goto	L6
  1910  01BC                     l3435:	
  1911                           ;main.c: 116: break;
  1912                           
  1913                           
  1914                           ;main.c: 118: CCPR1L = 5;
  1915  01BC  3005               	movlw	5
  1916  01BD                     L6:	
  1917  01BD  0095               	movwf	21	;volatile
  1918                           
  1919                           ;main.c: 119: break;
  1920  01BE  29CD               	goto	l3441
  1921  01BF                     l3439:	
  1922  01BF  0879               	movf	_currentLevel,w
  1923                           
  1924                           ; Switch size 1, requested type "space"
  1925                           ; Number of cases is 4, Range of values is 1 to 4
  1926                           ; switch strategies available:
  1927                           ; Name         Instructions Cycles
  1928                           ; simple_byte           13     7 (average)
  1929                           ; direct_byte           13     9 (fixed)
  1930                           ; jumptable            263     9 (fixed)
  1931                           ;	Chosen strategy is simple_byte
  1932  01C0  3A01               	xorlw	1	; case 1
  1933  01C1  1903               	skipnz
  1934  01C2  29B6               	goto	l3429
  1935  01C3  3A03               	xorlw	3	; case 2
  1936  01C4  1903               	skipnz
  1937  01C5  29B8               	goto	l3431
  1938  01C6  3A01               	xorlw	1	; case 3
  1939  01C7  1903               	skipnz
  1940  01C8  29BA               	goto	l3433
  1941  01C9  3A07               	xorlw	7	; case 4
  1942  01CA  1903               	skipnz
  1943  01CB  29BC               	goto	l3435
  1944  01CC  29CD               	goto	l3441
  1945  01CD                     l3441:	
  1946                           
  1947                           ;main.c: 123: setLedOn(currentLevel);
  1948  01CD  0879               	movf	_currentLevel,w
  1949  01CE  29CF               	ljmp	_setLedOn
  1950  01CF                     __end_of_setFanLevel:	
  1951                           
  1952                           	psect	text12
  1953  00C4                     __ptext12:	
  1954 ;; *************** function ___awdiv *****************
  1955 ;; Defined at:
  1956 ;;		line 6 in file "E:\cms\SCMCU_IDE_V2.00.07\data\sources\common\awdiv.c"
  1957 ;; Parameters:    Size  Location     Type
  1958 ;;  divisor         2    0[BANK0 ] int 
  1959 ;;  dividend        2    2[BANK0 ] int 
  1960 ;; Auto vars:     Size  Location     Type
  1961 ;;  quotient        2    6[BANK0 ] int 
  1962 ;;  sign            1    5[BANK0 ] unsigned char 
  1963 ;;  counter         1    4[BANK0 ] unsigned char 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  2    0[BANK0 ] int 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0
  1968 ;; Tracked objects:
  1969 ;;		On entry : B00/0
  1970 ;;		On exit  : B00/0
  1971 ;;		Unchanged: 800/0
  1972 ;; Data sizes:     COMMON   BANK0   BANK1
  1973 ;;      Params:         0       4       0
  1974 ;;      Locals:         0       4       0
  1975 ;;      Temps:          0       0       0
  1976 ;;      Totals:         0       8       0
  1977 ;;Total ram usage:        8 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    3
  1980 ;; This function calls:
  1981 ;;		Nothing
  1982 ;; This function is called by:
  1983 ;;		_setFanLevel
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           
  1988                           ;psect for function ___awdiv
  1989  00C4                     ___awdiv:	
  1990                           
  1991                           ;incstack = 0
  1992                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1993  00C4  01CC               	clrf	___awdiv@sign
  1994  00C5  1FC8               	btfss	___awdiv@divisor+1,7
  1995  00C6  28CE               	goto	l3355
  1996  00C7  09C7               	comf	___awdiv@divisor,f
  1997  00C8  09C8               	comf	___awdiv@divisor+1,f
  1998  00C9  0AC7               	incf	___awdiv@divisor,f
  1999  00CA  1903               	skipnz
  2000  00CB  0AC8               	incf	___awdiv@divisor+1,f
  2001  00CC  01CC               	clrf	___awdiv@sign
  2002  00CD  0ACC               	incf	___awdiv@sign,f
  2003  00CE                     l3355:	
  2004  00CE  1FCA               	btfss	___awdiv@dividend+1,7
  2005  00CF  28D7               	goto	l3361
  2006  00D0  09C9               	comf	___awdiv@dividend,f
  2007  00D1  09CA               	comf	___awdiv@dividend+1,f
  2008  00D2  0AC9               	incf	___awdiv@dividend,f
  2009  00D3  1903               	skipnz
  2010  00D4  0ACA               	incf	___awdiv@dividend+1,f
  2011  00D5  3001               	movlw	1
  2012  00D6  06CC               	xorwf	___awdiv@sign,f
  2013  00D7                     l3361:	
  2014  00D7  01CD               	clrf	___awdiv@quotient
  2015  00D8  01CE               	clrf	___awdiv@quotient+1
  2016  00D9  0847               	movf	___awdiv@divisor,w
  2017  00DA  0448               	iorwf	___awdiv@divisor+1,w
  2018  00DB  1903               	btfsc	3,2
  2019  00DC  28FC               	goto	l3383
  2020  00DD  01CB               	clrf	___awdiv@counter
  2021  00DE                     L7:	
  2022  00DE  0ACB               	incf	___awdiv@counter,f
  2023  00DF  1BC8               	btfsc	___awdiv@divisor+1,7
  2024  00E0  28E5               	goto	l3371
  2025  00E1  1003               	clrc
  2026  00E2  0DC7               	rlf	___awdiv@divisor,f
  2027  00E3  0DC8               	rlf	___awdiv@divisor+1,f
  2028  00E4  28DE               	goto	L7
  2029  00E5                     l3371:	
  2030  00E5  1003               	clrc
  2031  00E6  0DCD               	rlf	___awdiv@quotient,f
  2032  00E7  0DCE               	rlf	___awdiv@quotient+1,f
  2033  00E8  0848               	movf	___awdiv@divisor+1,w
  2034  00E9  024A               	subwf	___awdiv@dividend+1,w
  2035  00EA  1D03               	skipz
  2036  00EB  28EE               	goto	u1195
  2037  00EC  0847               	movf	___awdiv@divisor,w
  2038  00ED  0249               	subwf	___awdiv@dividend,w
  2039  00EE                     u1195:	
  2040  00EE  1C03               	skipc
  2041  00EF  28F8               	goto	L8
  2042  00F0  0847               	movf	___awdiv@divisor,w
  2043  00F1  02C9               	subwf	___awdiv@dividend,f
  2044  00F2  0848               	movf	___awdiv@divisor+1,w
  2045  00F3  1C03               	skipc
  2046  00F4  03CA               	decf	___awdiv@dividend+1,f
  2047  00F5  02CA               	subwf	___awdiv@dividend+1,f
  2048  00F6  144D               	bsf	___awdiv@quotient,0
  2049  00F7  1003               	clrc
  2050  00F8                     L8:	
  2051  00F8  0CC8               	rrf	___awdiv@divisor+1,f
  2052  00F9  0CC7               	rrf	___awdiv@divisor,f
  2053  00FA  0BCB               	decfsz	___awdiv@counter,f
  2054  00FB  28E5               	goto	l3371
  2055  00FC                     l3383:	
  2056  00FC  084C               	movf	___awdiv@sign,w
  2057  00FD  1903               	btfsc	3,2
  2058  00FE  2904               	goto	l3387
  2059  00FF  09CD               	comf	___awdiv@quotient,f
  2060  0100  09CE               	comf	___awdiv@quotient+1,f
  2061  0101  0ACD               	incf	___awdiv@quotient,f
  2062  0102  1903               	skipnz
  2063  0103  0ACE               	incf	___awdiv@quotient+1,f
  2064  0104                     l3387:	
  2065  0104  084E               	movf	___awdiv@quotient+1,w
  2066  0105  00C8               	movwf	?___awdiv+1
  2067  0106  084D               	movf	___awdiv@quotient,w
  2068  0107  00C7               	movwf	?___awdiv
  2069  0108  0008               	return
  2070  0109                     __end_of___awdiv:	
  2071                           
  2072                           	psect	text13
  2073  02FC                     __ptext13:	
  2074 ;; *************** function _closeFan *****************
  2075 ;; Defined at:
  2076 ;;		line 129 in file "E:\project\project0508\scm\uf166fan\main.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;		None
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;		None
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  1    wreg      void 
  2083 ;; Registers used:
  2084 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2085 ;; Tracked objects:
  2086 ;;		On entry : 300/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMMON   BANK0   BANK1
  2090 ;;      Params:         0       0       0
  2091 ;;      Locals:         0       0       0
  2092 ;;      Temps:          1       0       0
  2093 ;;      Totals:         1       0       0
  2094 ;;Total ram usage:        1 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; Hardware stack levels required when called:    4
  2097 ;; This function calls:
  2098 ;;		_Init_PWM
  2099 ;;		_Sleep_Mode
  2100 ;;		_setLedOn
  2101 ;; This function is called by:
  2102 ;;		_checkUsbStatus
  2103 ;;		_checkFan
  2104 ;;		_checkKeys
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108                           
  2109                           ;psect for function _closeFan
  2110  02FC                     _closeFan:	
  2111  02FC                     l3391:	
  2112                           ;incstack = 0
  2113                           ; Regs used in _closeFan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2114                           
  2115                           
  2116                           ;main.c: 130: Init_PWM();
  2117  02FC  235B               	fcall	_Init_PWM
  2118                           
  2119                           ;main.c: 131: currentLevel = 2;
  2120  02FD  3002               	movlw	2
  2121  02FE  00F9               	movwf	_currentLevel
  2122                           
  2123                           ;main.c: 132: setLedOn(5);
  2124  02FF  3005               	movlw	5
  2125  0300  21CF               	fcall	_setLedOn
  2126                           
  2127                           ;main.c: 133: PORTA|=(1<<0);
  2128  0301  1283               	bcf	3,5	;RP0=0, select bank0
  2129  0302  1405               	bsf	5,0	;volatile
  2130                           
  2131                           ;main.c: 135: TRISC|=(1<<2);
  2132  0303  1683               	bsf	3,5	;RP0=1, select bank1
  2133  0304  1507               	bsf	7,2	;volatile
  2134                           
  2135                           ;main.c: 136: fan_check_time = 0;
  2136  0305  1283               	bcf	3,5	;RP0=0, select bank0
  2137  0306  01A8               	clrf	_fan_check_time
  2138  0307  01A9               	clrf	_fan_check_time+1
  2139                           
  2140                           ;main.c: 137: FAN_STATUS = 0;
  2141  0308  01F8               	clrf	_FAN_STATUS
  2142                           
  2143                           ;main.c: 138: if (((PORTB) >> (2)&1) == 0) {
  2144  0309  0806               	movf	6,w	;volatile
  2145  030A  00F5               	movwf	??_closeFan
  2146  030B  1003               	clrc
  2147  030C  0CF5               	rrf	??_closeFan,f
  2148  030D  1003               	clrc
  2149  030E  0CF5               	rrf	??_closeFan,f
  2150  030F  1875               	btfsc	??_closeFan,0
  2151  0310  0008               	return
  2152                           
  2153                           ;main.c: 139: Sleep_Mode();
  2154  0311  2A62               	ljmp	l2785
  2155  0312                     __end_of_closeFan:	
  2156                           
  2157                           	psect	text14
  2158  01CF                     __ptext14:	
  2159 ;; *************** function _setLedOn *****************
  2160 ;; Defined at:
  2161 ;;		line 176 in file "E:\project\project0508\scm\uf166fan\main.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  ledIndex        1    wreg     unsigned char 
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;  ledIndex        1    4[COMMON] unsigned char 
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      void 
  2168 ;; Registers used:
  2169 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2170 ;; Tracked objects:
  2171 ;;		On entry : 200/0
  2172 ;;		On exit  : 200/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMMON   BANK0   BANK1
  2175 ;;      Params:         0       0       0
  2176 ;;      Locals:         1       0       0
  2177 ;;      Temps:          0       0       0
  2178 ;;      Totals:         1       0       0
  2179 ;;Total ram usage:        1 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:    3
  2182 ;; This function calls:
  2183 ;;		Nothing
  2184 ;; This function is called by:
  2185 ;;		_setFanLevel
  2186 ;;		_closeFan
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           
  2191                           ;psect for function _setLedOn
  2192  01CF                     _setLedOn:	
  2193                           
  2194                           ;incstack = 0
  2195                           ; Regs used in _setLedOn: [wreg-fsr0h+status,2+status,0]
  2196                           ;setLedOn@ledIndex stored from wreg
  2197  01CF  00F4               	movwf	setLedOn@ledIndex
  2198                           
  2199                           ;main.c: 177: switch(ledIndex) {
  2200  01D0  29EC               	goto	l3341
  2201  01D1                     l625:	
  2202                           ;main.c: 178: case 1:
  2203                           
  2204                           
  2205                           ;main.c: 180: TRISC&=~(1<<1);
  2206                           
  2207                           ;main.c: 181: TRISA|=(1<<7);
  2208                           
  2209                           ;main.c: 182: TRISC&=~(1<<0);
  2210                           
  2211                           ;main.c: 183: PORTA&=~(1<<7);
  2212  01D1  21FB               	fcall	PL18	;call to abstracted procedure
  2213                           
  2214                           ;main.c: 184: PORTC|=(1<<0);
  2215  01D2  1407               	bsf	7,0	;volatile
  2216                           
  2217                           ;main.c: 185: PORTC&=~(1<<1);
  2218  01D3  1087               	bcf	7,1	;volatile
  2219                           
  2220                           ;main.c: 186: break;
  2221  01D4  0008               	return
  2222  01D5                     l627:	
  2223                           ;main.c: 187: case 2:
  2224                           
  2225                           
  2226                           ;main.c: 188: TRISC&=~(1<<1);
  2227                           
  2228                           ;main.c: 189: TRISA|=(1<<7);
  2229                           
  2230                           ;main.c: 190: TRISC&=~(1<<0);
  2231                           
  2232                           ;main.c: 191: PORTA&=~(1<<7);
  2233  01D5  21FB               	fcall	PL18	;call to abstracted procedure
  2234                           
  2235                           ;main.c: 192: PORTC&=~(1<<0);
  2236  01D6  1007               	bcf	7,0	;volatile
  2237                           
  2238                           ;main.c: 193: PORTC|=(1<<1);
  2239  01D7  1487               	bsf	7,1	;volatile
  2240                           
  2241                           ;main.c: 194: break;
  2242  01D8  0008               	return
  2243  01D9                     l628:	
  2244                           ;main.c: 195: case 3:
  2245                           
  2246                           
  2247                           ;main.c: 197: TRISC|=(1<<0);
  2248                           
  2249                           ;main.c: 198: TRISA&=~(1<<7);
  2250                           
  2251                           ;main.c: 199: TRISC&=~(1<<1);
  2252                           
  2253                           ;main.c: 200: PORTA|=(1<<7);
  2254  01D9  2202               	fcall	PL20	;call to abstracted procedure
  2255  01DA  1785               	bsf	5,7	;volatile
  2256                           
  2257                           ;main.c: 201: PORTC&=~(1<<0);
  2258  01DB  1007               	bcf	7,0	;volatile
  2259                           
  2260                           ;main.c: 202: PORTC&=~(1<<1);
  2261  01DC  1087               	bcf	7,1	;volatile
  2262                           
  2263                           ;main.c: 203: break;
  2264  01DD  0008               	return
  2265  01DE                     l629:	
  2266                           ;main.c: 204: case 4:
  2267                           
  2268                           
  2269                           ;main.c: 205: TRISC|=(1<<0);
  2270                           
  2271                           ;main.c: 206: TRISA&=~(1<<7);
  2272                           
  2273                           ;main.c: 207: TRISC&=~(1<<1);
  2274                           
  2275                           ;main.c: 208: PORTA&=~(1<<7);
  2276  01DE  2202               	fcall	PL20	;call to abstracted procedure
  2277  01DF  1385               	bcf	5,7	;volatile
  2278                           
  2279                           ;main.c: 209: PORTC|=(1<<0);
  2280  01E0  1407               	bsf	7,0	;volatile
  2281                           
  2282                           ;main.c: 210: PORTC|=(1<<1);
  2283  01E1  1487               	bsf	7,1	;volatile
  2284                           
  2285                           ;main.c: 211: break;
  2286  01E2  0008               	return
  2287  01E3                     l630:	
  2288                           ;main.c: 212: case 5:
  2289                           
  2290                           
  2291                           ;main.c: 214: TRISC|=(1<<0);
  2292  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  2293  01E4  1407               	bsf	7,0	;volatile
  2294                           
  2295                           ;main.c: 215: TRISA|=(1<<7);
  2296  01E5  1785               	bsf	5,7	;volatile
  2297                           
  2298                           ;main.c: 216: TRISC|=(1<<1);
  2299  01E6  1487               	bsf	7,1	;volatile
  2300                           
  2301                           ;main.c: 217: PORTC&=~(1<<0);
  2302  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  2303  01E8  1007               	bcf	7,0	;volatile
  2304                           
  2305                           ;main.c: 218: PORTA&=~(1<<7);
  2306  01E9  1385               	bcf	5,7	;volatile
  2307                           
  2308                           ;main.c: 219: PORTC&=~(1<<1);
  2309  01EA  1087               	bcf	7,1	;volatile
  2310                           
  2311                           ;main.c: 220: break;
  2312  01EB  0008               	return
  2313  01EC                     l3341:	
  2314  01EC  0874               	movf	setLedOn@ledIndex,w
  2315                           
  2316                           ; Switch size 1, requested type "space"
  2317                           ; Number of cases is 5, Range of values is 1 to 5
  2318                           ; switch strategies available:
  2319                           ; Name         Instructions Cycles
  2320                           ; direct_byte           14     9 (fixed)
  2321                           ; simple_byte           16     9 (average)
  2322                           ; jumptable            263     9 (fixed)
  2323                           ;	Chosen strategy is direct_byte
  2324  01ED  3EFF               	addlw	-1
  2325  01EE  1C03               	skipc
  2326  01EF  0008               	return
  2327  01F0  0084               	movwf	4
  2328  01F1  3005               	movlw	5
  2329  01F2  0204               	subwf	4,w
  2330  01F3  1803               	skipnc
  2331  01F4  0008               	return
  2332  01F5  3003               	movlw	high S3747
  2333  01F6  008A               	movwf	10
  2334  01F7  30AA               	movlw	low S3747
  2335  01F8  0704               	addwf	4,w
  2336  01F9  0082               	movwf	2
  2337  01FA  0008               	return
  2338  01FB                     __end_of_setLedOn:	
  2339  01FB                     PL18:	
  2340  01FB  1683               	bsf	3,5	;RP0=1, select bank1
  2341  01FC  1087               	bcf	7,1	;volatile
  2342  01FD  1785               	bsf	5,7	;volatile
  2343  01FE  1007               	bcf	7,0	;volatile
  2344  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  2345  0200  1385               	bcf	5,7	;volatile
  2346  0201  0008               	return
  2347  0202                     __end_ofPL18:	
  2348  0202                     PL20:	
  2349  0202  1683               	bsf	3,5	;RP0=1, select bank1
  2350  0203  1407               	bsf	7,0	;volatile
  2351  0204  1385               	bcf	5,7	;volatile
  2352  0205  1087               	bcf	7,1	;volatile
  2353  0206  1283               	bcf	3,5	;RP0=0, select bank0
  2354  0207  0008               	return
  2355  0208                     __end_ofPL20:	
  2356                           
  2357                           	psect	swtext2
  2358  03AA                     __pswtext2:	
  2359  03AA                     S3747:	
  2360  03AA  29D1               	ljmp	l625
  2361  03AB  29D5               	ljmp	l627
  2362  03AC  29D9               	ljmp	l628
  2363  03AD  29DE               	ljmp	l629
  2364  03AE  29E3               	ljmp	l630
  2365                           
  2366                           	psect	text15
  2367  0262                     __ptext15:	
  2368 ;; *************** function _Sleep_Mode *****************
  2369 ;; Defined at:
  2370 ;;		line 335 in file "E:\project\project0508\scm\uf166fan\main.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;		None
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;		None
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  1    wreg      void 
  2377 ;; Registers used:
  2378 ;;		wreg, status,2
  2379 ;; Tracked objects:
  2380 ;;		On entry : 300/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMMON   BANK0   BANK1
  2384 ;;      Params:         0       0       0
  2385 ;;      Locals:         0       0       0
  2386 ;;      Temps:          0       0       0
  2387 ;;      Totals:         0       0       0
  2388 ;;Total ram usage:        0 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; Hardware stack levels required when called:    3
  2391 ;; This function calls:
  2392 ;;		Nothing
  2393 ;; This function is called by:
  2394 ;;		_closeFan
  2395 ;;		_main
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           
  2400                           ;psect for function _Sleep_Mode
  2401  0262                     _Sleep_Mode:	
  2402  0262                     l2785:	
  2403                           ;incstack = 0
  2404                           ; Regs used in _Sleep_Mode: [wreg+status,2]
  2405                           
  2406                           
  2407                           ;main.c: 336: INTCON = 0;
  2408  0262  018B               	clrf	11	;volatile
  2409                           
  2410                           ;main.c: 338: OPTION_REG = 0;
  2411  0263  1683               	bsf	3,5	;RP0=1, select bank1
  2412  0264  0181               	clrf	1	;volatile
  2413                           
  2414                           ;main.c: 340: TRISA = 0B00000000;
  2415  0265  0185               	clrf	5	;volatile
  2416                           
  2417                           ;main.c: 341: PORTA = 0B00000000;
  2418  0266  1283               	bcf	3,5	;RP0=0, select bank0
  2419  0267  0185               	clrf	5	;volatile
  2420                           
  2421                           ;main.c: 342: WPUA = 0B00000000;
  2422  0268  1683               	bsf	3,5	;RP0=1, select bank3
  2423  0269  1703               	bsf	3,6	;RP1=1, select bank3
  2424  026A  018E               	clrf	14	;volatile
  2425                           
  2426                           ;main.c: 344: TRISB = 0B00100100;
  2427  026B  3024               	movlw	36
  2428  026C  1303               	bcf	3,6	;RP1=0, select bank1
  2429  026D  0086               	movwf	6	;volatile
  2430                           
  2431                           ;main.c: 345: PORTB = 0B00000000;
  2432  026E  1283               	bcf	3,5	;RP0=0, select bank0
  2433  026F  0186               	clrf	6	;volatile
  2434                           
  2435                           ;main.c: 347: PORTB = 0;
  2436  0270  0186               	clrf	6	;volatile
  2437                           
  2438                           ;main.c: 348: WPUB = 0B00100000;
  2439  0271  3020               	movlw	32
  2440  0272  1683               	bsf	3,5	;RP0=1, select bank1
  2441  0273  0095               	movwf	21	;volatile
  2442                           
  2443                           ;main.c: 350: IOCB = 0B00100100;
  2444  0274  3024               	movlw	36
  2445  0275  0096               	movwf	22	;volatile
  2446                           
  2447                           ;main.c: 351: RBIE = 1;
  2448  0276  158B               	bsf	11,3	;volatile
  2449                           
  2450                           ;main.c: 352: GIE = 1;
  2451  0277  178B               	bsf	11,7	;volatile
  2452                           
  2453                           ;main.c: 354: ADCON0 = 0;
  2454  0278  1283               	bcf	3,5	;RP0=0, select bank0
  2455  0279  019F               	clrf	31	;volatile
  2456                           
  2457                           ;main.c: 356: OSCCON = 0X70;
  2458  027A  3070               	movlw	112
  2459  027B  1683               	bsf	3,5	;RP0=1, select bank1
  2460  027C  008F               	movwf	15	;volatile
  2461                           
  2462                           ;main.c: 358: PORTB;
  2463  027D  1283               	bcf	3,5	;RP0=0, select bank0
  2464  027E  0806               	movf	6,w	;volatile
  2465  027F  0064               	clrwdt	;# 
  2466  0280  0063               	sleep	;# 
  2467  0281  0000               	nop	;# 
  2468  0282  0008               	return
  2469  0283                     __end_of_Sleep_Mode:	
  2470                           
  2471                           	psect	text16
  2472  0380                     __ptext16:	
  2473 ;; *************** function _Init_Config *****************
  2474 ;; Defined at:
  2475 ;;		line 307 in file "E:\project\project0508\scm\uf166fan\main.c"
  2476 ;; Parameters:    Size  Location     Type
  2477 ;;		None
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;		None
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  1    wreg      void 
  2482 ;; Registers used:
  2483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : B00/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMMON   BANK0   BANK1
  2489 ;;      Params:         0       0       0
  2490 ;;      Locals:         0       0       0
  2491 ;;      Temps:          0       0       0
  2492 ;;      Totals:         0       0       0
  2493 ;;Total ram usage:        0 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:    4
  2496 ;; This function calls:
  2497 ;;		_Init_GPIO
  2498 ;;		_Init_Interupt
  2499 ;;		_Init_PWM
  2500 ;;		_Init_System
  2501 ;;		_resetKey
  2502 ;; This function is called by:
  2503 ;;		_main
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           
  2508                           ;psect for function _Init_Config
  2509  0380                     _Init_Config:	
  2510                           
  2511                           ;main.c: 309: Init_System();
  2512                           
  2513                           ;incstack = 0
  2514                           ; Regs used in _Init_Config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2515  0380  23B3               	fcall	_Init_System
  2516                           
  2517                           ;main.c: 310: Init_GPIO();
  2518  0381  2328               	fcall	_Init_GPIO
  2519                           
  2520                           ;main.c: 311: Init_Interupt();
  2521  0382  239D               	fcall	_Init_Interupt
  2522                           
  2523                           ;main.c: 312: Init_PWM();
  2524  0383  235B               	fcall	_Init_PWM
  2525                           
  2526                           ;main.c: 314: IOCB = 0x04;
  2527                           
  2528                           ;main.c: 315: TMR0 = 155;
  2529                           
  2530                           ;main.c: 316: TO = 0;
  2531                           
  2532                           ;main.c: 319: key1.key_index = 5;
  2533                           
  2534                           ;main.c: 321: key2.key_index = 4;
  2535                           
  2536                           ;main.c: 323: key3.key_index = 3;
  2537                           
  2538                           ;main.c: 324: resetKey(&key1);
  2539  0384  228E               	fcall	PL8	;call to abstracted procedure
  2540  0385  233B               	fcall	_resetKey
  2541                           
  2542                           ;main.c: 325: resetKey(&key2);
  2543  0386  3039               	movlw	(low (_key2| 0))& (0+255)
  2544  0387  233B               	fcall	_resetKey
  2545                           
  2546                           ;main.c: 326: resetKey(&key3);
  2547  0388  3032               	movlw	(low (_key3| 0))& (0+255)
  2548  0389  233B               	fcall	_resetKey
  2549                           
  2550                           ;main.c: 328: TRISA = 0;
  2551                           
  2552                           ;main.c: 329: TRISB = 0x7E;
  2553                           
  2554                           ;main.c: 330: TRISC = 0;
  2555                           
  2556                           ;main.c: 331: lowVTime = 0;
  2557  038A  2A9B               	ljmp	PL12	;call to abstracted procedure
  2558  038B                     __end_of_Init_Config:	
  2559                           
  2560                           	psect	text17
  2561  033B                     __ptext17:	
  2562 ;; *************** function _resetKey *****************
  2563 ;; Defined at:
  2564 ;;		line 100 in file "E:\project\project0508\scm\uf166fan\scankey.c"
  2565 ;; Parameters:    Size  Location     Type
  2566 ;;  key             1    wreg     PTR struct Keys
  2567 ;;		 -> key3(7), key2(7), key1(7), 
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;  key             1    4[COMMON] PTR struct Keys
  2570 ;;		 -> key3(7), key2(7), key1(7), 
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  1    wreg      void 
  2573 ;; Registers used:
  2574 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 800/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMMON   BANK0   BANK1
  2580 ;;      Params:         0       0       0
  2581 ;;      Locals:         1       0       0
  2582 ;;      Temps:          0       0       0
  2583 ;;      Totals:         1       0       0
  2584 ;;Total ram usage:        1 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:    3
  2587 ;; This function calls:
  2588 ;;		Nothing
  2589 ;; This function is called by:
  2590 ;;		_Init_Config
  2591 ;; This function uses a non-reentrant model
  2592 ;;
  2593                           
  2594                           
  2595                           ;psect for function _resetKey
  2596  033B                     _resetKey:	
  2597                           
  2598                           ;incstack = 0
  2599                           ; Regs used in _resetKey: [wreg-fsr0h+status,2+status,0]
  2600                           ;resetKey@key stored from wreg
  2601  033B  00F4               	movwf	resetKey@key
  2602                           
  2603                           ;scankey.c: 101: key->key_timer_cnt1 = key->key_timer_cnt2 = key->key_state_buffer1 = ke
      +                          y->key_state_buffer2 = 0;
  2604  033C  3E03               	addlw	3
  2605  033D  0084               	movwf	4
  2606  033E  1383               	bcf	3,7	;select IRP bank0
  2607  033F  0180               	clrf	0
  2608  0340  0A74               	incf	resetKey@key,w
  2609  0341  0084               	movwf	4
  2610  0342  0180               	clrf	0
  2611  0343  0874               	movf	resetKey@key,w
  2612  0344  3E02               	addlw	2
  2613  0345  0084               	movwf	4
  2614  0346  0180               	clrf	0
  2615  0347  0874               	movf	resetKey@key,w
  2616  0348  0084               	movwf	4
  2617  0349  0180               	clrf	0
  2618  034A  0008               	return
  2619  034B                     __end_of_resetKey:	
  2620                           
  2621                           	psect	text18
  2622  03B3                     __ptext18:	
  2623 ;; *************** function _Init_System *****************
  2624 ;; Defined at:
  2625 ;;		line 3 in file "E:\project\project0508\scm\uf166fan\init.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;		None
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;		None
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  1    wreg      void 
  2632 ;; Registers used:
  2633 ;;		wreg, status,2
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 300/100
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMMON   BANK0   BANK1
  2639 ;;      Params:         0       0       0
  2640 ;;      Locals:         0       0       0
  2641 ;;      Temps:          0       0       0
  2642 ;;      Totals:         0       0       0
  2643 ;;Total ram usage:        0 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    3
  2646 ;; This function calls:
  2647 ;;		Nothing
  2648 ;; This function is called by:
  2649 ;;		_Init_Config
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           
  2654                           ;psect for function _Init_System
  2655  03B3                     _Init_System:	
  2656                           
  2657                           ;incstack = 0
  2658                           ; Regs used in _Init_System: [wreg+status,2]
  2659  03B3  0000               	nop	;# 
  2660  03B4  0064               	clrwdt	;# 
  2661                           
  2662                           ;init.c: 6: INTCON = 0;
  2663                           
  2664                           ;init.c: 7: OSCCON = 0X71;
  2665                           
  2666                           ;init.c: 8: OPTION_REG = 0x00;
  2667  03B5  2B8E               	ljmp	PL14	;call to abstracted procedure
  2668  03B6                     __end_of_Init_System:	
  2669                           
  2670                           	psect	text19
  2671  035B                     __ptext19:	
  2672 ;; *************** function _Init_PWM *****************
  2673 ;; Defined at:
  2674 ;;		line 74 in file "E:\project\project0508\scm\uf166fan\main.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;		None
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;		None
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  1    wreg      void 
  2681 ;; Registers used:
  2682 ;;		wreg, status,2
  2683 ;; Tracked objects:
  2684 ;;		On entry : 300/0
  2685 ;;		On exit  : 300/100
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMMON   BANK0   BANK1
  2688 ;;      Params:         0       0       0
  2689 ;;      Locals:         0       0       0
  2690 ;;      Temps:          0       0       0
  2691 ;;      Totals:         0       0       0
  2692 ;;Total ram usage:        0 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    3
  2695 ;; This function calls:
  2696 ;;		Nothing
  2697 ;; This function is called by:
  2698 ;;		_closeFan
  2699 ;;		_Init_Config
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           
  2704                           ;psect for function _Init_PWM
  2705  035B                     _Init_PWM:	
  2706                           
  2707                           ;main.c: 75: CCP1CON = 0x0F;
  2708                           
  2709                           ;incstack = 0
  2710                           ; Regs used in _Init_PWM: [wreg+status,2]
  2711                           
  2712                           ;main.c: 76: T2CON = 0;
  2713                           
  2714                           ;main.c: 77: PR2 = 7;
  2715                           
  2716                           ;main.c: 79: CCPR1L = 0;
  2717                           
  2718                           ;main.c: 80: TMR2IF = 0;
  2719                           
  2720                           ;main.c: 81: T2CON = 0;
  2721                           
  2722                           ;main.c: 83: TRISC&=~(1<<2);
  2723  035B  2B5C               	ljmp	PL10	;call to abstracted procedure
  2724  035C                     __end_of_Init_PWM:	
  2725  035C                     PL10:	
  2726  035C  300F               	movlw	15
  2727  035D  0097               	movwf	23	;volatile
  2728  035E  0192               	clrf	18	;volatile
  2729  035F  3007               	movlw	7
  2730  0360  1683               	bsf	3,5	;RP0=1, select bank1
  2731  0361  0092               	movwf	18	;volatile
  2732  0362  1283               	bcf	3,5	;RP0=0, select bank0
  2733  0363  0195               	clrf	21	;volatile
  2734  0364  108C               	bcf	12,1	;volatile
  2735  0365  0192               	clrf	18	;volatile
  2736  0366  1683               	bsf	3,5	;RP0=1, select bank1
  2737  0367  1107               	bcf	7,2	;volatile
  2738  0368  0008               	return
  2739  0369                     __end_ofPL10:	
  2740                           
  2741                           	psect	text20
  2742  039D                     __ptext20:	
  2743 ;; *************** function _Init_Interupt *****************
  2744 ;; Defined at:
  2745 ;;		line 27 in file "E:\project\project0508\scm\uf166fan\init.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;		None
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;		None
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  1    wreg      void 
  2752 ;; Registers used:
  2753 ;;		wreg, status,2
  2754 ;; Tracked objects:
  2755 ;;		On entry : 300/100
  2756 ;;		On exit  : 300/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMMON   BANK0   BANK1
  2759 ;;      Params:         0       0       0
  2760 ;;      Locals:         0       0       0
  2761 ;;      Temps:          0       0       0
  2762 ;;      Totals:         0       0       0
  2763 ;;Total ram usage:        0 bytes
  2764 ;; Hardware stack levels used:    1
  2765 ;; Hardware stack levels required when called:    3
  2766 ;; This function calls:
  2767 ;;		Nothing
  2768 ;; This function is called by:
  2769 ;;		_Init_Config
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           
  2774                           ;psect for function _Init_Interupt
  2775  039D                     _Init_Interupt:	
  2776                           
  2777                           ;init.c: 28: OPTION_REG = 0x00;
  2778                           
  2779                           ;incstack = 0
  2780                           ; Regs used in _Init_Interupt: [wreg+status,2]
  2781                           
  2782                           ;init.c: 29: TMR0 = 0;
  2783                           
  2784                           ;init.c: 30: INTCON = 0xE0;
  2785  039D  2B9E               	ljmp	PL16	;call to abstracted procedure
  2786  039E                     __end_of_Init_Interupt:	
  2787  039E                     PL16:	
  2788  039E  0181               	clrf	1	;volatile
  2789  039F  1283               	bcf	3,5	;RP0=0, select bank0
  2790  03A0  0181               	clrf	1	;volatile
  2791  03A1  30E0               	movlw	224
  2792  03A2  008B               	movwf	11	;volatile
  2793  03A3  0008               	return
  2794  03A4                     __end_ofPL16:	
  2795                           
  2796                           	psect	text21
  2797  0328                     __ptext21:	
  2798 ;; *************** function _Init_GPIO *****************
  2799 ;; Defined at:
  2800 ;;		line 13 in file "E:\project\project0508\scm\uf166fan\init.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;		None
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;		None
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      void 
  2807 ;; Registers used:
  2808 ;;		wreg, status,2
  2809 ;; Tracked objects:
  2810 ;;		On entry : 300/100
  2811 ;;		On exit  : 300/100
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMMON   BANK0   BANK1
  2814 ;;      Params:         0       0       0
  2815 ;;      Locals:         0       0       0
  2816 ;;      Temps:          0       0       0
  2817 ;;      Totals:         0       0       0
  2818 ;;Total ram usage:        0 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    3
  2821 ;; This function calls:
  2822 ;;		Nothing
  2823 ;; This function is called by:
  2824 ;;		_Init_Config
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           
  2829                           ;psect for function _Init_GPIO
  2830  0328                     _Init_GPIO:	
  2831                           
  2832                           ;init.c: 14: TRISA = 0;
  2833                           
  2834                           ;incstack = 0
  2835                           ; Regs used in _Init_GPIO: [wreg+status,2]
  2836                           
  2837                           ;init.c: 15: TRISB = 0;
  2838                           
  2839                           ;init.c: 16: TRISC = 0;
  2840                           
  2841                           ;init.c: 17: WPUA = 0xFF;
  2842                           
  2843                           ;init.c: 18: WPUB = 0xFF;
  2844                           
  2845                           ;init.c: 19: WPUC = 0xFF;
  2846                           
  2847                           ;init.c: 20: PORTA = 0xFF;
  2848                           
  2849                           ;init.c: 21: PORTB = 0xFF;
  2850                           
  2851                           ;init.c: 22: PORTC = 0xFF;
  2852                           
  2853                           ;init.c: 23: IOCB = 0x00;
  2854  0328  2B29               	ljmp	PL2	;call to abstracted procedure
  2855  0329                     __end_of_Init_GPIO:	
  2856  0329                     PL2:	
  2857  0329  0185               	clrf	5	;volatile
  2858  032A  0186               	clrf	6	;volatile
  2859  032B  0187               	clrf	7	;volatile
  2860  032C  30FF               	movlw	255
  2861  032D  1703               	bsf	3,6	;RP1=1, select bank3
  2862  032E  008E               	movwf	14	;volatile
  2863  032F  1303               	bcf	3,6	;RP1=0, select bank1
  2864  0330  0095               	movwf	21	;volatile
  2865  0331  1703               	bsf	3,6	;RP1=1, select bank3
  2866  0332  008F               	movwf	15	;volatile
  2867  0333  1283               	bcf	3,5	;RP0=0, select bank0
  2868  0334  1303               	bcf	3,6	;RP1=0, select bank0
  2869  0335  0085               	movwf	5	;volatile
  2870  0336  0086               	movwf	6	;volatile
  2871  0337  0087               	movwf	7	;volatile
  2872  0338  1683               	bsf	3,5	;RP0=1, select bank1
  2873  0339  0196               	clrf	22	;volatile
  2874  033A  0008               	return
  2875  033B                     __end_ofPL2:	
  2876                           
  2877                           	psect	text22
  2878  0312                     __ptext22:	
  2879 ;; *************** function _Timer0_Isr *****************
  2880 ;; Defined at:
  2881 ;;		line 378 in file "E:\project\project0508\scm\uf166fan\main.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;		None
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;		None
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  1    wreg      void 
  2888 ;; Registers used:
  2889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMMON   BANK0   BANK1
  2895 ;;      Params:         0       0       0
  2896 ;;      Locals:         0       0       0
  2897 ;;      Temps:          3       0       0
  2898 ;;      Totals:         3       0       0
  2899 ;;Total ram usage:        3 bytes
  2900 ;; Hardware stack levels used:    1
  2901 ;; Hardware stack levels required when called:    2
  2902 ;; This function calls:
  2903 ;;		i1_Init_Config
  2904 ;; This function is called by:
  2905 ;;		Interrupt level 1
  2906 ;; This function uses a non-reentrant model
  2907 ;;
  2908                           
  2909                           
  2910                           ;psect for function _Timer0_Isr
  2911  0312                     _Timer0_Isr:	
  2912                           
  2913                           ;main.c: 379: if (T0IF) {
  2914  0312  1D0B               	btfss	11,2	;volatile
  2915  0313  2B1B               	goto	i1l3281
  2916                           
  2917                           ;main.c: 381: TMR0 += 155;
  2918  0314  309B               	movlw	155
  2919  0315  1283               	bcf	3,5	;RP0=0, select bank0
  2920  0316  1303               	bcf	3,6	;RP1=0, select bank0
  2921  0317  0781               	addwf	1,f	;volatile
  2922                           
  2923                           ;main.c: 384: T0IF = 0;
  2924  0318  110B               	bcf	11,2	;volatile
  2925                           
  2926                           ;main.c: 385: time0Flag = 1;
  2927  0319  01F7               	clrf	_time0Flag
  2928  031A  0AF7               	incf	_time0Flag,f
  2929  031B                     i1l3281:	
  2930                           
  2931                           ;main.c: 387: }
  2932                           ;main.c: 389: if (RBIF) {
  2933  031B  1C0B               	btfss	11,0	;volatile
  2934  031C  2B1F               	goto	i1l670
  2935                           
  2936                           ;main.c: 390: RBIF = 0;
  2937  031D  100B               	bcf	11,0	;volatile
  2938                           
  2939                           ;main.c: 391: Init_Config();
  2940  031E  2283               	fcall	i1_Init_Config
  2941  031F                     i1l670:	
  2942  031F  0873               	movf	??_Timer0_Isr+2,w
  2943  0320  008A               	movwf	10
  2944  0321  0872               	movf	??_Timer0_Isr+1,w
  2945  0322  0084               	movwf	4
  2946  0323  0E71               	swapf	??_Timer0_Isr^(0+-128),w
  2947  0324  0083               	movwf	3
  2948  0325  0EFE               	swapf	126,f
  2949  0326  0E7E               	swapf	126,w
  2950  0327  0009               	retfie
  2951  0328                     __end_of_Timer0_Isr:	
  2952                           
  2953                           	psect	intentry
  2954  0004                     __pintentry:	
  2955                           ;incstack = 0
  2956                           ; Regs used in _Timer0_Isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2957                           
  2958  0004                     interrupt_function:	
  2959  007E                     saved_w	set	btemp
  2960  0004  00FE               	movwf	btemp
  2961  0005  0E03               	swapf	3,w
  2962  0006  00F1               	movwf	??_Timer0_Isr
  2963  0007  0804               	movf	4,w
  2964  0008  00F2               	movwf	??_Timer0_Isr+1
  2965  0009  080A               	movf	10,w
  2966  000A  00F3               	movwf	??_Timer0_Isr+2
  2967  000B  2B12               	ljmp	_Timer0_Isr
  2968                           
  2969                           	psect	text23
  2970  0283                     __ptext23:	
  2971 ;; *************** function i1_Init_Config *****************
  2972 ;; Defined at:
  2973 ;;		line 307 in file "E:\project\project0508\scm\uf166fan\main.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;		None
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;		None
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  1    wreg      void 
  2980 ;; Registers used:
  2981 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : B00/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMMON   BANK0   BANK1
  2987 ;;      Params:         0       0       0
  2988 ;;      Locals:         0       0       0
  2989 ;;      Temps:          0       0       0
  2990 ;;      Totals:         0       0       0
  2991 ;;Total ram usage:        0 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:    1
  2994 ;; This function calls:
  2995 ;;		i1_Init_GPIO
  2996 ;;		i1_Init_Interupt
  2997 ;;		i1_Init_PWM
  2998 ;;		i1_Init_System
  2999 ;;		i1_resetKey
  3000 ;; This function is called by:
  3001 ;;		_Timer0_Isr
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           
  3006                           ;psect for function i1_Init_Config
  3007  0283                     i1_Init_Config:	
  3008                           
  3009                           ;main.c: 309: Init_System();
  3010                           
  3011                           ;incstack = 0
  3012                           ; Regs used in i1_Init_Config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3013  0283  238B               	fcall	i1_Init_System
  3014                           
  3015                           ;main.c: 310: Init_GPIO();
  3016  0284  23B8               	fcall	i1_Init_GPIO
  3017                           
  3018                           ;main.c: 311: Init_Interupt();
  3019  0285  23B7               	fcall	i1_Init_Interupt
  3020                           
  3021                           ;main.c: 312: Init_PWM();
  3022  0286  23B6               	fcall	i1_Init_PWM
  3023                           
  3024                           ;main.c: 314: IOCB = 0x04;
  3025                           
  3026                           ;main.c: 315: TMR0 = 155;
  3027                           
  3028                           ;main.c: 316: TO = 0;
  3029                           
  3030                           ;main.c: 319: key1.key_index = 5;
  3031                           
  3032                           ;main.c: 321: key2.key_index = 4;
  3033                           
  3034                           ;main.c: 323: key3.key_index = 3;
  3035                           
  3036                           ;main.c: 324: resetKey(&key1);
  3037  0287  228E               	fcall	PL8	;call to abstracted procedure
  3038  0288  234B               	fcall	i1_resetKey
  3039                           
  3040                           ;main.c: 325: resetKey(&key2);
  3041  0289  3039               	movlw	(low (_key2| 0))& (0+255)
  3042  028A  234B               	fcall	i1_resetKey
  3043                           
  3044                           ;main.c: 326: resetKey(&key3);
  3045  028B  3032               	movlw	(low (_key3| 0))& (0+255)
  3046  028C  234B               	fcall	i1_resetKey
  3047                           
  3048                           ;main.c: 328: TRISA = 0;
  3049                           
  3050                           ;main.c: 329: TRISB = 0x7E;
  3051                           
  3052                           ;main.c: 330: TRISC = 0;
  3053                           
  3054                           ;main.c: 331: lowVTime = 0;
  3055  028D  2A9B               	ljmp	PL12	;call to abstracted procedure
  3056  028E                     __end_ofi1_Init_Config:	
  3057  028E                     PL8:	
  3058  028E  3004               	movlw	4
  3059  028F  0096               	movwf	22	;volatile
  3060  0290  309B               	movlw	155
  3061  0291  1283               	bcf	3,5	;RP0=0, select bank0
  3062  0292  0081               	movwf	1	;volatile
  3063  0293  1203               	bcf	3,4	;volatile
  3064  0294  3005               	movlw	5
  3065  0295  00C6               	movwf	_key1+6
  3066  0296  3004               	movlw	4
  3067  0297  00BF               	movwf	_key2+6
  3068  0298  3003               	movlw	3
  3069  0299  00B8               	movwf	_key3+6
  3070  029A  3440               	retlw	(low (_key1| 0))& (0+255)
  3071  029B                     __end_ofPL8:	
  3072  029B                     PL12:	
  3073  029B  1683               	bsf	3,5	;RP0=1, select bank1
  3074  029C  1303               	bcf	3,6	;RP1=0, select bank1
  3075  029D  0185               	clrf	5	;volatile
  3076  029E  307E               	movlw	126
  3077  029F  0086               	movwf	6	;volatile
  3078  02A0  0187               	clrf	7	;volatile
  3079  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  3080  02A2  01B1               	clrf	_lowVTime
  3081  02A3  0008               	return
  3082  02A4                     __end_ofPL12:	
  3083                           
  3084                           	psect	text24
  3085  034B                     __ptext24:	
  3086 ;; *************** function i1_resetKey *****************
  3087 ;; Defined at:
  3088 ;;		line 100 in file "E:\project\project0508\scm\uf166fan\scankey.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;  key             1    wreg     PTR struct Keys
  3091 ;;		 -> key3(7), key2(7), key1(7), 
  3092 ;; Auto vars:     Size  Location     Type
  3093 ;;  key             1    0[COMMON] PTR struct Keys
  3094 ;;		 -> key3(7), key2(7), key1(7), 
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  1    wreg      void 
  3097 ;; Registers used:
  3098 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 800/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMMON   BANK0   BANK1
  3104 ;;      Params:         0       0       0
  3105 ;;      Locals:         1       0       0
  3106 ;;      Temps:          0       0       0
  3107 ;;      Totals:         1       0       0
  3108 ;;Total ram usage:        1 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; This function calls:
  3111 ;;		Nothing
  3112 ;; This function is called by:
  3113 ;;		i1_Init_Config
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           
  3118                           ;psect for function i1_resetKey
  3119  034B                     i1_resetKey:	
  3120                           
  3121                           ;incstack = 0
  3122                           ; Regs used in i1_resetKey: [wreg-fsr0h+status,2+status,0]
  3123                           ;i1resetKey@key stored from wreg
  3124  034B  00F0               	movwf	i1resetKey@key
  3125                           
  3126                           ;scankey.c: 101: key->key_timer_cnt1 = key->key_timer_cnt2 = key->key_state_buffer1 = ke
      +                          y->key_state_buffer2 = 0;
  3127  034C  3E03               	addlw	3
  3128  034D  0084               	movwf	4
  3129  034E  1383               	bcf	3,7	;select IRP bank0
  3130  034F  0180               	clrf	0
  3131  0350  0A70               	incf	i1resetKey@key,w
  3132  0351  0084               	movwf	4
  3133  0352  0180               	clrf	0
  3134  0353  0870               	movf	i1resetKey@key,w
  3135  0354  3E02               	addlw	2
  3136  0355  0084               	movwf	4
  3137  0356  0180               	clrf	0
  3138  0357  0870               	movf	i1resetKey@key,w
  3139  0358  0084               	movwf	4
  3140  0359  0180               	clrf	0
  3141  035A  0008               	return
  3142  035B                     __end_ofi1_resetKey:	
  3143                           
  3144                           	psect	text25
  3145  038B                     __ptext25:	
  3146 ;; *************** function i1_Init_System *****************
  3147 ;; Defined at:
  3148 ;;		line 3 in file "E:\project\project0508\scm\uf166fan\init.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;		None
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;		None
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      void 
  3155 ;; Registers used:
  3156 ;;		wreg, status,2
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 300/100
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMMON   BANK0   BANK1
  3162 ;;      Params:         0       0       0
  3163 ;;      Locals:         0       0       0
  3164 ;;      Temps:          0       0       0
  3165 ;;      Totals:         0       0       0
  3166 ;;Total ram usage:        0 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; This function calls:
  3169 ;;		Nothing
  3170 ;; This function is called by:
  3171 ;;		i1_Init_Config
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           
  3176                           ;psect for function i1_Init_System
  3177  038B                     i1_Init_System:	
  3178                           
  3179                           ;incstack = 0
  3180                           ; Regs used in i1_Init_System: [wreg+status,2]
  3181  038B  0000               	nop	;# 
  3182  038C  0064               	clrwdt	;# 
  3183                           
  3184                           ;init.c: 6: INTCON = 0;
  3185                           
  3186                           ;init.c: 7: OSCCON = 0X71;
  3187                           
  3188                           ;init.c: 8: OPTION_REG = 0x00;
  3189  038D  2B8E               	ljmp	PL14	;call to abstracted procedure
  3190  038E                     __end_ofi1_Init_System:	
  3191  038E                     PL14:	
  3192  038E  018B               	clrf	11	;volatile
  3193  038F  3071               	movlw	113
  3194  0390  1683               	bsf	3,5	;RP0=1, select bank1
  3195  0391  1303               	bcf	3,6	;RP1=0, select bank1
  3196  0392  008F               	movwf	15	;volatile
  3197  0393  0181               	clrf	1	;volatile
  3198  0394  0008               	return
  3199  0395                     __end_ofPL14:	
  3200                           
  3201                           	psect	text26
  3202  03B6                     __ptext26:	
  3203 ;; *************** function i1_Init_PWM *****************
  3204 ;; Defined at:
  3205 ;;		line 74 in file "E:\project\project0508\scm\uf166fan\main.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;		None
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;		None
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  1    wreg      void 
  3212 ;; Registers used:
  3213 ;;		wreg, status,2
  3214 ;; Tracked objects:
  3215 ;;		On entry : 300/0
  3216 ;;		On exit  : 300/100
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMMON   BANK0   BANK1
  3219 ;;      Params:         0       0       0
  3220 ;;      Locals:         0       0       0
  3221 ;;      Temps:          0       0       0
  3222 ;;      Totals:         0       0       0
  3223 ;;Total ram usage:        0 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; This function calls:
  3226 ;;		Nothing
  3227 ;; This function is called by:
  3228 ;;		i1_Init_Config
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           
  3233                           ;psect for function i1_Init_PWM
  3234  03B6                     i1_Init_PWM:	
  3235                           
  3236                           ;main.c: 75: CCP1CON = 0x0F;
  3237                           
  3238                           ;incstack = 0
  3239                           ; Regs used in i1_Init_PWM: [wreg+status,2]
  3240                           
  3241                           ;main.c: 76: T2CON = 0;
  3242                           
  3243                           ;main.c: 77: PR2 = 7;
  3244                           
  3245                           ;main.c: 79: CCPR1L = 0;
  3246                           
  3247                           ;main.c: 80: TMR2IF = 0;
  3248                           
  3249                           ;main.c: 81: T2CON = 0;
  3250                           
  3251                           ;main.c: 83: TRISC&=~(1<<2);
  3252  03B6  2B5C               	ljmp	PL10	;call to abstracted procedure
  3253  03B7                     __end_ofi1_Init_PWM:	
  3254                           
  3255                           	psect	text27
  3256  03B7                     __ptext27:	
  3257 ;; *************** function i1_Init_Interupt *****************
  3258 ;; Defined at:
  3259 ;;		line 27 in file "E:\project\project0508\scm\uf166fan\init.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;		None
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;		None
  3264 ;; Return value:  Size  Location     Type
  3265 ;;                  1    wreg      void 
  3266 ;; Registers used:
  3267 ;;		wreg, status,2
  3268 ;; Tracked objects:
  3269 ;;		On entry : 300/100
  3270 ;;		On exit  : 300/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMMON   BANK0   BANK1
  3273 ;;      Params:         0       0       0
  3274 ;;      Locals:         0       0       0
  3275 ;;      Temps:          0       0       0
  3276 ;;      Totals:         0       0       0
  3277 ;;Total ram usage:        0 bytes
  3278 ;; Hardware stack levels used:    1
  3279 ;; This function calls:
  3280 ;;		Nothing
  3281 ;; This function is called by:
  3282 ;;		i1_Init_Config
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           
  3287                           ;psect for function i1_Init_Interupt
  3288  03B7                     i1_Init_Interupt:	
  3289                           
  3290                           ;init.c: 28: OPTION_REG = 0x00;
  3291                           
  3292                           ;incstack = 0
  3293                           ; Regs used in i1_Init_Interupt: [wreg+status,2]
  3294                           
  3295                           ;init.c: 29: TMR0 = 0;
  3296                           
  3297                           ;init.c: 30: INTCON = 0xE0;
  3298  03B7  2B9E               	ljmp	PL16	;call to abstracted procedure
  3299  03B8                     __end_ofi1_Init_Interupt:	
  3300                           
  3301                           	psect	text28
  3302  03B8                     __ptext28:	
  3303 ;; *************** function i1_Init_GPIO *****************
  3304 ;; Defined at:
  3305 ;;		line 13 in file "E:\project\project0508\scm\uf166fan\init.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;		None
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;		None
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      void 
  3312 ;; Registers used:
  3313 ;;		wreg, status,2
  3314 ;; Tracked objects:
  3315 ;;		On entry : 300/100
  3316 ;;		On exit  : 300/100
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMMON   BANK0   BANK1
  3319 ;;      Params:         0       0       0
  3320 ;;      Locals:         0       0       0
  3321 ;;      Temps:          0       0       0
  3322 ;;      Totals:         0       0       0
  3323 ;;Total ram usage:        0 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; This function calls:
  3326 ;;		Nothing
  3327 ;; This function is called by:
  3328 ;;		i1_Init_Config
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           
  3333                           ;psect for function i1_Init_GPIO
  3334  03B8                     i1_Init_GPIO:	
  3335                           
  3336                           ;init.c: 14: TRISA = 0;
  3337                           
  3338                           ;incstack = 0
  3339                           ; Regs used in i1_Init_GPIO: [wreg+status,2]
  3340                           
  3341                           ;init.c: 15: TRISB = 0;
  3342                           
  3343                           ;init.c: 16: TRISC = 0;
  3344                           
  3345                           ;init.c: 17: WPUA = 0xFF;
  3346                           
  3347                           ;init.c: 18: WPUB = 0xFF;
  3348                           
  3349                           ;init.c: 19: WPUC = 0xFF;
  3350                           
  3351                           ;init.c: 20: PORTA = 0xFF;
  3352                           
  3353                           ;init.c: 21: PORTB = 0xFF;
  3354                           
  3355                           ;init.c: 22: PORTC = 0xFF;
  3356                           
  3357                           ;init.c: 23: IOCB = 0x00;
  3358  03B8  2B29               	ljmp	PL2	;call to abstracted procedure
  3359  03B9                     __end_ofi1_Init_GPIO:	
  3360  007E                     btemp	set	126	;btemp
  3361  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     14      53
    BANK1            80      0       0

Pointer List with Targets:

    resetKey@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 

    key_driver@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 

    sacnKeyInput@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 


Critical Paths under _main in COMMON

    _main->_readVrefADC
    _scanKeys->_sacnKeyInput
    _readVrefADC->_ADC_Result
    _checkUsbStatus->_closeFan
    _checkKeys->_closeFan
    _checkFan->_closeFan
    _setFanLevel->_setLedOn
    _closeFan->_setLedOn
    _Init_Config->_resetKey

Critical Paths under _Timer0_Isr in COMMON

    i1_Init_Config->i1_resetKey

Critical Paths under _main in BANK0

    _main->_checkKeys
    _scanKeys->_sacnKeyInput
    _readVrefADC->_ADC_Sample
    _checkKeys->_checkFan
    _checkFan->_setFanLevel
    _setFanLevel->___awdiv

Critical Paths under _Timer0_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer0_Isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    3276
                                             13 BANK0      1     1      0
                        _Init_Config
                         _Sleep_Mode
                          _checkKeys
                     _checkUsbStatus
                        _readVrefADC
                           _scanKeys
 ---------------------------------------------------------------------------------
 (1) _scanKeys                                             0     0      0     214
                       _sacnKeyInput
 ---------------------------------------------------------------------------------
 (2) _sacnKeyInput                                         3     3      0     214
                                              4 COMMON     2     2      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _readVrefADC                                          1     1      0     533
                                              5 COMMON     1     1      0
                         _ADC_Result
                         _ADC_Sample
                           _DelayXms
 ---------------------------------------------------------------------------------
 (2) _DelayXms                                             3     3      0     167
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                           8     8      0     291
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Result                                           3     3      0      65
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _checkUsbStatus                                       2     2      0      31
                                              0 BANK0      2     2      0
                           _closeFan
 ---------------------------------------------------------------------------------
 (1) _checkKeys                                            2     2      0    2329
                                             11 BANK0      2     2      0
                           _checkFan
                           _closeFan
                         _key_driver
                        _setFanLevel
 ---------------------------------------------------------------------------------
 (2) _key_driver                                           3     3      0     597
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _checkFan                                             1     1      0     832
                                             10 BANK0      1     1      0
                           _closeFan
                        _setFanLevel
 ---------------------------------------------------------------------------------
 (2) _setFanLevel                                          4     4      0     801
                                              8 BANK0      2     2      0
                            ___awdiv
                           _setLedOn
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     606
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _closeFan                                             1     1      0      31
                                              5 COMMON     1     1      0
                           _Init_PWM
                         _Sleep_Mode
                           _setLedOn
 ---------------------------------------------------------------------------------
 (3) _setLedOn                                             1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sleep_Mode                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Config                                          0     0      0     169
                          _Init_GPIO
                      _Init_Interupt
                           _Init_PWM
                        _Init_System
                           _resetKey
 ---------------------------------------------------------------------------------
 (2) _resetKey                                             1     1      0     169
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_Interupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Timer0_Isr                                           3     3      0      88
                                              1 COMMON     3     3      0
                      i1_Init_Config
 ---------------------------------------------------------------------------------
 (6) i1_Init_Config                                        0     0      0      88
                        i1_Init_GPIO
                    i1_Init_Interupt
                         i1_Init_PWM
                      i1_Init_System
                         i1_resetKey
 ---------------------------------------------------------------------------------
 (7) i1_resetKey                                           1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) i1_Init_System                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_Init_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_Init_Interupt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_Init_GPIO                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_Config
     _Init_GPIO
     _Init_Interupt
     _Init_PWM
     _Init_System
     _resetKey
   _Sleep_Mode
   _checkKeys
     _checkFan
       _closeFan
         _Init_PWM
         _Sleep_Mode
         _setLedOn
       _setFanLevel
         ___awdiv
         _setLedOn
     _closeFan
       _Init_PWM
       _Sleep_Mode
       _setLedOn
     _key_driver
     _setFanLevel
       ___awdiv
       _setLedOn
   _checkUsbStatus
     _closeFan
       _Init_PWM
       _Sleep_Mode
       _setLedOn
   _readVrefADC
     _ADC_Result
     _ADC_Sample
     _DelayXms
   _scanKeys
     _sacnKeyInput

 _Timer0_Isr (ROOT)
   i1_Init_Config
     i1_Init_GPIO
     i1_Init_Interupt
     i1_Init_PWM
     i1_Init_System
     i1_resetKey

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      E      35       5       66.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3F       8        0.0%
ABS                  0      0      3F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 15 15:35:25 2020

         ??i1_Init_System 0070                         pc 0002                        PL2 0329  
                      PL4 013D                        PL6 00B0                        PL8 028E  
                      _TO 001C              ___awdiv@sign 004C                        fsr 0004  
                     PL10 035C                       PL20 0202                       PL12 029B  
                     PL22 00BF                       PL14 038E                       PL16 039E  
                     PL18 01FB                       l630 01E3                       l625 01D1  
                     l641 02B4                       l627 01D5                       l628 01D9  
                     l629 01DE                       l585 0121                       _GIE 005F  
                     _PR2 0092       __size_of_ADC_Sample 0096       __size_of_ADC_Result 001D  
                     fsr0 0004                       indf 0000                      S3745 03AF  
                    S3747 03AA                      l1811 02F5                      l1804 0064  
                    l3341 01EC                      l3421 01AC                      l3413 0197  
                    l3501 0182                      l3431 01B8                      l3503 018F  
                    l3361 00D7                      l3433 01BA                      l3441 01CD  
                    l3425 01B1                      l3371 00E5                      l3355 00CE  
                    l3435 01BC                      l3451 024E                      l3443 0237  
                    l3611 0134                      l3531 004E                      l3523 0035  
                    l3429 01B6                      l3453 0250                      l3391 02FC  
                    l3383 00FC                      l3439 01BF                      l3471 0157  
                    l3535 0058                      l3609 0133                      l3537 0060  
                    l3387 0104                      l3483 0169                      l3475 015F  
                    l3571 0377                      l3629 02AC                      l3637 02AF  
                    l3565 02FA                      l3581 037C                      l1798 0030  
                    l3495 017C                      l3647 02BB                      l3663 0211  
                    l2785 0262                      l3497 017E                      l3489 016E  
                    l3665 0212                      l3595 0119                      l3675 021B  
                    l3687 022B                      _T0IF 005A                      u1314 02CF  
                    u1315 02CD                      _IOCB 0096                      u1415 0054  
                    u1425 005E                      u1195 00EE                      u1275 0244  
                    u1475 009A                      _RBIE 005B                      _RBIF 0058  
                    _TMR0 0001    __end_of_checkUsbStatus 013D                      _WPUA 018E  
                    _WPUB 0095                      _WPUC 018F                      _key1 0040  
                    _key2 0039                      _key3 0032                      _main 0208  
                    btemp 007E                i1_resetKey 034B                      start 000C  
           ??_Init_Config 0075             ??_Init_System 0074             _Init_Interupt 039D  
                   ?_main 0070           __end_of___awdiv 0109           ___awdiv@divisor 0047  
                   _T2CON 0012              ?_readVrefADC 0070        key_driver@key_read 0048  
                   i1l670 031F           ___awdiv@counter 004B                     _PORTA 0005  
                   _PORTB 0006                     _PORTC 0007                     _TRISA 0085  
                   _TRISB 0086                     _TRISC 0087               ?i1_Init_PWM 0070  
                   pclath 000A           ?_checkUsbStatus 0070                     status 0003  
                   wtemp0 007E          __end_of_DelayXms 0380              ?_setFanLevel 0070  
         __initialization 000D              __end_of_main 0237          __end_of_Init_PWM 035C  
          ?_Init_Interupt 0070       __end_of_Init_Config 038B            _fan_check_time 0028  
                  ??_main 0054       __end_of_Init_System 03B6                    _ADCON0 001F  
                  _ADCON1 009F                    _ADRESH 001E                    _ADRESL 009E  
                  _CCPR1L 0015          ___awdiv@dividend 0049                    _GODONE 00F9  
                  i1l3281 031B                    _INTCON 000B             ?_sacnKeyInput 0070  
      __size_of_Init_GPIO 0001                    _OSCCON 008F                    _TMR2IF 0061  
            ??_ADC_Sample 0047          __end_of_checkFan 0262              ??_ADC_Result 0074  
             ?i1_resetKey 0070                _Sleep_Mode 0262                _Timer0_Isr 0312  
        __end_of_closeFan 0312          setLedOn@ledIndex 0074                 ??___awdiv 0074  
     __size_ofi1_Init_PWM 0001              ?i1_Init_GPIO 0070          __end_of_scanKeys 0375  
        ___awdiv@quotient 004D          __end_of_setLedOn 01FB          __end_of_resetKey 034B  
            __pdataCOMMON 0078        __end_of_ADC_Sample 00B0        __end_of_ADC_Result 02FC  
         i1_Init_Interupt 03B7                    saved_w 007E            ??_sacnKeyInput 0074  
 __end_of__initialization 0018               _Init_Config 0380            __pcstackCOMMON 0070  
         ??_Init_Interupt 0074        __size_of_checkKeys 001E               _Init_System 03B3  
              __end_ofPL2 033B                __end_ofPL4 014D                __end_ofPL6 00BF  
              __end_ofPL8 029B         __end_of_Init_GPIO 0329       __size_ofi1_resetKey 0010  
               ?_DelayXms 0070      __size_of_readVrefADC 0006                __pbssBANK0 0020  
               ?_Init_PWM 0070               ?_Sleep_Mode 0070               ?_Timer0_Isr 0070  
   __end_ofi1_Init_Config 028E                __pmaintext 0208      __size_of_setFanLevel 003E  
              __pintentry 0004                   _CCP1CON 0017     __end_ofi1_Init_System 038E  
 __end_ofi1_Init_Interupt 03B8                 ?_checkFan 0070      key_driver@key_return 0047  
              ??_DelayXms 0074          ??_checkUsbStatus 0047                _count300ms 0076  
               ?_closeFan 0070              ??i1_Init_PWM 0070         __end_of_checkKeys 02C2  
              ??_Init_PWM 0074                 ?_scanKeys 0070                 ?_setLedOn 0070  
               ?_resetKey 0070               resetKey@key 0074           ADC_Sample@admax 0024  
         ADC_Sample@admin 0026           ADC_Sample@adsum 0020                   ___awdiv 00C4  
              _key_driver 014D      __end_of_sacnKeyInput 02DF        __end_ofi1_Init_PWM 03B7  
                 __ptext1 0369                   __ptext2 02C2                   __ptext3 03A4  
                 __ptext4 0375                   __ptext5 001A                   __ptext6 02DF  
                 __ptext7 0109                   __ptext8 02A4                   __ptext9 014D  
    __size_ofi1_Init_GPIO 0001                ??_checkFan 0051       __size_of_Sleep_Mode 0021  
     __size_of_Timer0_Isr 0016                ??_closeFan 0075                   clrloop0 0396  
    end_of_initialization 0018                 DelayXms@i 0048                 DelayXms@j 0049  
               DelayXms@x 0047                ??_scanKeys 0076              ??i1_resetKey 0070  
              ??_setLedOn 0074                ??_resetKey 0074           sacnKeyInput@key 0047  
        ?i1_Init_Interupt 0070        __end_ofi1_resetKey 035B              ?_Init_Config 0070  
             ?_key_driver 0070              ?_Init_System 0070          setFanLevel@level 004F  
           __pidataCOMMON 0000               __end_ofPL10 0369               __end_ofPL20 0208  
             __end_ofPL12 02A4               __end_ofPL22 00C4               __end_ofPL14 0395  
             __end_ofPL16 03A4               __end_ofPL18 0202       start_initialization 000D  
               _Init_GPIO 0328         __size_of_DelayXms 000B         __size_of_Init_PWM 0001  
            ??_Sleep_Mode 0074              ??_Timer0_Isr 0071     __size_of_sacnKeyInput 001D  
       ADC_Sample@ad_temp 004D     __end_of_Init_Interupt 039E         ADC_Sample@adtimes 0030  
           ??_readVrefADC 0075               __pbssCOMMON 0076                ?_Init_GPIO 0070  
               ___latbits 0000             __pcstackBANK0 0047         __size_of_checkFan 002B  
      __end_of_Sleep_Mode 0283        __end_of_Timer0_Isr 0328       __size_of_key_driver 0044  
       __size_of_closeFan 0016              _sacnKeyInput 02C2              _currentLevel 0079  
               _checkKeys 02A4       checkKeys@key2Status 0052             ??_setFanLevel 0075  
     checkKeys@key3Status 0053         __size_of_scanKeys 000C         __size_of_setLedOn 002C  
                ?___awdiv 0047         __size_of_resetKey 0010                 __pswtext1 03AF  
               __pswtext2 03AA                 _count10Ms 002A                 _countTime 002C  
          ADC_Sample@adch 004B    __size_ofi1_Init_Config 000B       __end_of_readVrefADC 03AA  
             ADC_Sample@i 004C    __size_ofi1_Init_System 0003         interrupt_function 0004  
             ADC_Result@i 0048                ?_checkKeys 0070                 _time0Flag 0077  
               clear_ram0 0395      __size_of_Init_Config 000B      setFanLevel@tempLevel 0050  
           ??i1_Init_GPIO 0070       __end_of_setFanLevel 01CF      __size_of_Init_System 0003  
          ADC_Result@adch 0047               ??_Init_GPIO 0074                  _DelayXms 0375  
                _Init_PWM 035B                _ADC_Sample 001A                _ADC_Result 02DF  
 __size_of_checkUsbStatus 0034             i1_Init_Config 0283              ??_key_driver 0074  
        __size_of___awdiv 0045             key_driver@key 0049             i1_Init_System 038B  
             _readVrefADC 03A4                  _checkFan 0237                _FAN_STATUS 0078  
     __end_ofi1_Init_GPIO 03B9                  _adresult 002E  __size_ofi1_Init_Interupt 0001  
                __ptext10 0237                  __ptext11 0191                  __ptext20 039D  
                __ptext12 00C4                  __ptext21 0328                  __ptext13 02FC  
                __ptext22 0312                  __ptext14 01CF                  __ptext23 0283  
                __ptext15 0262                  __ptext24 034B                  __ptext16 0380  
                __ptext25 038B                  __ptext17 033B                  __ptext26 03B6  
                __ptext18 03B3                  __ptext27 03B7                  __ptext19 035B  
                __ptext28 03B8                  _closeFan 02FC        __end_of_key_driver 0191  
           __size_of_main 002F               ??_checkKeys 0076                  _scanKeys 0369  
                _lowVTime 0031                  _setLedOn 01CF                  _resetKey 033B  
             _setFanLevel 0191            ?i1_Init_Config 0070            ?i1_Init_System 0070  
                intlevel1 0000               ?_ADC_Sample 0070               ?_ADC_Result 0070  
           i1resetKey@key 0070               i1_Init_GPIO 03B8                _OPTION_REG 0081  
              i1_Init_PWM 03B6    __size_of_Init_Interupt 0001         ??i1_Init_Interupt 0070  
          _checkUsbStatus 0109           ??i1_Init_Config 0071  
