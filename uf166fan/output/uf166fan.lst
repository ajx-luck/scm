

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 29 03:07:11 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1711C
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	swtext1,local,class=CONST,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	pa_nodes0,global,class=CODE,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 1.45
    37                           ; Generated 16/11/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F887 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71                           	psect	idataBANK0
    72  0000                     __pidataBANK0:	
    73  0017                     _CCP1CON	set	23
    74  0015                     _CCPR1L	set	21
    75  0012                     _T2CON	set	18
    76  000B                     _INTCON	set	11
    77  0007                     _PORTC	set	7
    78  0006                     _PORTB	set	6
    79  0005                     _PORTA	set	5
    80  0001                     _TMR0	set	1
    81  0061                     _TMR2IF	set	97
    82  005A                     _T0IF	set	90
    83  001C                     _TO	set	28
    84  0096                     _IOCB	set	150
    85  0095                     _WPUB	set	149
    86  0092                     _PR2	set	146
    87  008F                     _OSCCON	set	143
    88  0087                     _TRISC	set	135
    89  0086                     _TRISB	set	134
    90  0085                     _TRISA	set	133
    91  0081                     _OPTION_REG	set	129
    92  018F                     _WPUC	set	399
    93  018E                     _WPUA	set	398
    94                           
    95                           	psect	cinit
    96  000B                     start_initialization:	
    97                           ; #config settings
    98                           
    99  000B                     __initialization:	
   100                           
   101                           ;initializer for _FAN_STATUS
   102  000B  3002               	movlw	2
   103  000C  00C1               	movwf	__pdataBANK0& (0+127)
   104                           
   105                           ;initializer for _currentLevel
   106  000D  00C2               	movwf	(__pdataBANK0+1)& (0+127)
   107  000E  3020               	movlw	low __pbssBANK0
   108                           
   109                           ; Clear objects allocated to BANK0
   110  000F  1383               	bcf	3,7	;select IRP bank0
   111  0010  0084               	movwf	4
   112  0011  3039               	movlw	low (__pbssBANK0+25)
   113  0012  2260               	fcall	clear_ram0
   114                           
   115                           ; Clear objects allocated to COMMON
   116  0013  01F8               	clrf	__pbssCOMMON& (0+127)
   117  0014  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   118  0015  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   119  0016                     end_of_initialization:	
   120                           ;End of C runtime variable initialization code
   121                           
   122  0016                     __end_of__initialization:	
   123  0016  0183               	clrf	3
   124  0017  28A0               	ljmp	_main	;jump to C main() function
   125                           
   126                           	psect	bssCOMMON
   127  0078                     __pbssCOMMON:	
   128  0078                     _countTime:	
   129  0078                     	ds	2
   130  007A                     _time0Flag:	
   131  007A                     	ds	1
   132                           
   133                           	psect	bssBANK0
   134  0020                     __pbssBANK0:	
   135  0020                     _fan_check_time:	
   136  0020                     	ds	2
   137  0022                     _count10Ms:	
   138  0022                     	ds	2
   139  0024                     _key3:	
   140  0024                     	ds	7
   141  002B                     _key2:	
   142  002B                     	ds	7
   143  0032                     _key1:	
   144  0032                     	ds	7
   145                           
   146                           	psect	dataBANK0
   147  0041                     __pdataBANK0:	
   148  0041                     _FAN_STATUS:	
   149  0041                     	ds	1
   150  0042                     _currentLevel:	
   151  0042                     	ds	1
   152                           
   153                           	psect	clrtext
   154  0260                     clear_ram0:	
   155                           ;	Called with FSR containing the base address, and
   156                           ;	W with the last address+1
   157                           
   158  0260  0064               	clrwdt	;clear the watchdog before getting into this loop
   159  0261                     clrloop0:	
   160  0261  0180               	clrf	0	;clear RAM location pointed to by FSR
   161  0262  0A84               	incf	4,f	;increment pointer
   162  0263  0604               	xorwf	4,w	;XOR with final address
   163  0264  1903               	btfsc	3,2	;have we reached the end yet?
   164  0265  3400               	retlw	0	;all done for this memory range, return
   165  0266  0604               	xorwf	4,w	;XOR again to restore value
   166  0267  2A61               	goto	clrloop0	;do the next byte
   167                           
   168                           	psect	cstackCOMMON
   169  0070                     __pcstackCOMMON:	
   170  0070                     ?_sacnKeyInput:	
   171  0070                     ?_key_read:	
   172                           ; 1 bytes @ 0x0
   173                           
   174  0070                     ?_Init_System:	
   175                           ; 1 bytes @ 0x0
   176                           
   177  0070                     ?_Init_GPIO:	
   178                           ; 1 bytes @ 0x0
   179                           
   180  0070                     ?_Init_Interupt:	
   181                           ; 1 bytes @ 0x0
   182                           
   183  0070                     ?_resetKey:	
   184                           ; 1 bytes @ 0x0
   185                           
   186  0070                     ?_checkUsbStatus:	
   187                           ; 1 bytes @ 0x0
   188                           
   189  0070                     ?_Init_PWM:	
   190                           ; 1 bytes @ 0x0
   191                           
   192  0070                     ?_setFanLevel:	
   193                           ; 1 bytes @ 0x0
   194                           
   195  0070                     ?_closeFan:	
   196                           ; 1 bytes @ 0x0
   197                           
   198  0070                     ?_checkFan:	
   199                           ; 1 bytes @ 0x0
   200                           
   201  0070                     ?_scanKeys:	
   202                           ; 1 bytes @ 0x0
   203                           
   204  0070                     ?_checkKeys:	
   205                           ; 1 bytes @ 0x0
   206                           
   207  0070                     ?_main:	
   208                           ; 1 bytes @ 0x0
   209                           
   210  0070                     ?_Timer0_Isr:	
   211                           ; 1 bytes @ 0x0
   212                           
   213  0070                     ??_Timer0_Isr:	
   214                           ; 1 bytes @ 0x0
   215                           
   216  0070                     ?_key_driver:	
   217                           ; 1 bytes @ 0x0
   218                           
   219                           
   220                           ; 1 bytes @ 0x0
   221  0070                     	ds	2
   222  0072                     ?_setLedOn:	
   223  0072                     ??_sacnKeyInput:	
   224                           ; 1 bytes @ 0x2
   225                           
   226  0072                     ??_Init_System:	
   227                           ; 1 bytes @ 0x2
   228                           
   229  0072                     ??_Init_GPIO:	
   230                           ; 1 bytes @ 0x2
   231                           
   232  0072                     ??_Init_Interupt:	
   233                           ; 1 bytes @ 0x2
   234                           
   235  0072                     ??_resetKey:	
   236                           ; 1 bytes @ 0x2
   237                           
   238  0072                     ??_checkUsbStatus:	
   239                           ; 1 bytes @ 0x2
   240                           
   241  0072                     ??_Init_PWM:	
   242                           ; 1 bytes @ 0x2
   243                           
   244  0072                     ??_key_driver:	
   245                           ; 1 bytes @ 0x2
   246                           
   247  0072                     ?___bmul:	
   248                           ; 1 bytes @ 0x2
   249                           
   250  0072                     ?___awdiv:	
   251                           ; 1 bytes @ 0x2
   252                           
   253  0072                     key_driver@key_return:	
   254                           ; 2 bytes @ 0x2
   255                           
   256  0072                     resetKey@key:	
   257                           ; 1 bytes @ 0x2
   258                           
   259  0072                     ___bmul@multiplicand:	
   260                           ; 1 bytes @ 0x2
   261                           
   262  0072                     setLedOn@ledIndex:	
   263                           ; 1 bytes @ 0x2
   264                           
   265  0072                     ___awdiv@divisor:	
   266                           ; 2 bytes @ 0x2
   267                           
   268                           
   269                           ; 2 bytes @ 0x2
   270  0072                     	ds	1
   271  0073                     ??___bmul:	
   272  0073                     key_driver@key_read:	
   273                           ; 1 bytes @ 0x3
   274                           
   275  0073                     ___bmul@product:	
   276                           ; 1 bytes @ 0x3
   277                           
   278                           
   279                           ; 1 bytes @ 0x3
   280  0073                     	ds	1
   281  0074                     ??_setLedOn:	
   282  0074                     ??_closeFan:	
   283                           ; 1 bytes @ 0x4
   284                           
   285  0074                     sacnKeyInput@key:	
   286                           ; 1 bytes @ 0x4
   287                           
   288  0074                     key_driver@key:	
   289                           ; 1 bytes @ 0x4
   290                           
   291  0074                     ___bmul@multiplier:	
   292                           ; 1 bytes @ 0x4
   293                           
   294  0074                     ___awdiv@dividend:	
   295                           ; 1 bytes @ 0x4
   296                           
   297                           
   298                           ; 2 bytes @ 0x4
   299  0074                     	ds	1
   300  0075                     ??_key_read:	
   301  0075                     ??_scanKeys:	
   302                           ; 1 bytes @ 0x5
   303                           
   304  0075                     key_read@key_return:	
   305                           ; 1 bytes @ 0x5
   306                           
   307                           
   308                           ; 1 bytes @ 0x5
   309  0075                     	ds	1
   310  0076                     ??_setFanLevel:	
   311  0076                     ??_checkFan:	
   312                           ; 1 bytes @ 0x6
   313                           
   314  0076                     ??___awdiv:	
   315                           ; 1 bytes @ 0x6
   316                           
   317  0076                     key_read@key_read:	
   318                           ; 1 bytes @ 0x6
   319                           
   320                           
   321                           ; 1 bytes @ 0x6
   322  0076                     	ds	1
   323  0077                     key_read@key:	
   324                           
   325                           ; 1 bytes @ 0x7
   326  0077                     	ds	1
   327  0078                     ??_checkKeys:	
   328  0078                     ??_main:	
   329                           ; 1 bytes @ 0x8
   330                           
   331                           
   332                           	psect	cstackBANK0
   333  0039                     __pcstackBANK0:	
   334                           ; 1 bytes @ 0x8
   335                           
   336  0039                     ___awdiv@counter:	
   337                           
   338                           ; 1 bytes @ 0x0
   339  0039                     	ds	1
   340  003A                     ___awdiv@sign:	
   341                           
   342                           ; 1 bytes @ 0x1
   343  003A                     	ds	1
   344  003B                     ___awdiv@quotient:	
   345                           
   346                           ; 2 bytes @ 0x2
   347  003B                     	ds	2
   348  003D                     setFanLevel@level:	
   349                           
   350                           ; 1 bytes @ 0x4
   351  003D                     	ds	1
   352  003E                     setFanLevel@levelWidth:	
   353                           
   354                           ; 2 bytes @ 0x5
   355  003E                     	ds	2
   356  0040                     setFanLevel@tempLevel:	
   357                           
   358                           ; 1 bytes @ 0x7
   359  0040                     	ds	1
   360                           
   361                           	psect	maintext
   362  00A0                     __pmaintext:	
   363 ;;
   364 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   365 ;;
   366 ;; *************** function _main *****************
   367 ;; Defined at:
   368 ;;		line 214 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
   369 ;; Parameters:    Size  Location     Type
   370 ;;		None
   371 ;; Auto vars:     Size  Location     Type
   372 ;;		None
   373 ;; Return value:  Size  Location     Type
   374 ;;                  1    wreg      void 
   375 ;; Registers used:
   376 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   377 ;; Tracked objects:
   378 ;;		On entry : B00/0
   379 ;;		On exit  : 300/0
   380 ;;		Unchanged: 0/0
   381 ;; Data sizes:     COMMON   BANK0   BANK1
   382 ;;      Params:         0       0       0
   383 ;;      Locals:         0       0       0
   384 ;;      Temps:          0       0       0
   385 ;;      Totals:         0       0       0
   386 ;;Total ram usage:        0 bytes
   387 ;; Hardware stack levels required when called:    5
   388 ;; This function calls:
   389 ;;		_Init_GPIO
   390 ;;		_Init_Interupt
   391 ;;		_Init_PWM
   392 ;;		_Init_System
   393 ;;		_checkKeys
   394 ;;		_checkUsbStatus
   395 ;;		_resetKey
   396 ;;		_scanKeys
   397 ;; This function is called by:
   398 ;;		Startup code after reset
   399 ;; This function uses a non-reentrant model
   400 ;;
   401                           
   402                           
   403                           ;psect for function _main
   404  00A0                     _main:	
   405                           
   406                           ;main.c: 216: Init_System();
   407                           
   408                           ;incstack = 0
   409                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   410  00A0  2256               	fcall	_Init_System
   411                           
   412                           ;main.c: 217: Init_GPIO();
   413  00A1  21F9               	fcall	_Init_GPIO
   414                           
   415                           ;main.c: 218: Init_Interupt();
   416  00A2  2268               	fcall	_Init_Interupt
   417                           
   418                           ;main.c: 219: Init_PWM();
   419  00A3  2249               	fcall	_Init_PWM
   420                           
   421                           ;main.c: 221: IOCB = 0x04;
   422  00A4  3004               	movlw	4
   423  00A5  0096               	movwf	22	;volatile
   424                           
   425                           ;main.c: 222: TMR0 = 155;
   426  00A6  309B               	movlw	155
   427  00A7  1283               	bcf	3,5	;RP0=0, select bank0
   428  00A8  0081               	movwf	1	;volatile
   429                           
   430                           ;main.c: 223: TO = 0;
   431  00A9  1203               	bcf	3,4	;volatile
   432                           
   433                           ;main.c: 226: key1.key_index = 5;
   434  00AA  3005               	movlw	5
   435  00AB  00B8               	movwf	_key1+6
   436                           
   437                           ;main.c: 228: key2.key_index = 4;
   438  00AC  3004               	movlw	4
   439  00AD  00B1               	movwf	_key2+6
   440                           
   441                           ;main.c: 230: key3.key_index = 3;
   442  00AE  3003               	movlw	3
   443  00AF  00AA               	movwf	_key3+6
   444                           
   445                           ;main.c: 231: resetKey(&key1);
   446  00B0  3032               	movlw	(low (_key1| 0))& (0+255)
   447  00B1  220B               	fcall	_resetKey
   448                           
   449                           ;main.c: 232: resetKey(&key2);
   450  00B2  302B               	movlw	(low (_key2| 0))& (0+255)
   451  00B3  220B               	fcall	_resetKey
   452                           
   453                           ;main.c: 233: resetKey(&key3);
   454  00B4  3024               	movlw	(low (_key3| 0))& (0+255)
   455  00B5  220B               	fcall	_resetKey
   456                           
   457                           ;main.c: 235: TRISA = 0;
   458  00B6  1683               	bsf	3,5	;RP0=1, select bank1
   459  00B7  1303               	bcf	3,6	;RP1=0, select bank1
   460  00B8  0185               	clrf	5	;volatile
   461                           
   462                           ;main.c: 236: TRISB = 0x7E;
   463  00B9  307E               	movlw	126
   464  00BA  0086               	movwf	6	;volatile
   465                           
   466                           ;main.c: 237: TRISC = 0;
   467  00BB  0187               	clrf	7	;volatile
   468  00BC                     l2516:	
   469                           
   470                           ;main.c: 239: {
   471                           ;main.c: 241: if(time0Flag)
   472  00BC  087A               	movf	_time0Flag,w
   473  00BD  1903               	btfsc	3,2
   474  00BE  28C2               	goto	l2524
   475  00BF  0064               	clrwdt	;# 
   476                           
   477                           ;main.c: 244: time0Flag = 0;
   478  00C0  01FA               	clrf	_time0Flag
   479                           
   480                           ;main.c: 245: scanKeys();
   481  00C1  21E4               	fcall	_scanKeys
   482  00C2                     l2524:	
   483                           
   484                           ;main.c: 246: }
   485                           ;main.c: 249: if(count10Ms == 10)
   486  00C2  300A               	movlw	10
   487  00C3  1283               	bcf	3,5	;RP0=0, select bank0
   488  00C4  0622               	xorwf	_count10Ms,w
   489  00C5  0423               	iorwf	_count10Ms+1,w
   490  00C6  1D03               	btfss	3,2
   491  00C7  28CE               	goto	l2532
   492                           
   493                           ;main.c: 250: {
   494                           ;main.c: 251: checkKeys();
   495  00C8  2189               	fcall	_checkKeys
   496                           
   497                           ;main.c: 252: count10Ms = 0;
   498  00C9  1283               	bcf	3,5	;RP0=0, select bank0
   499  00CA  1303               	bcf	3,6	;RP1=0, select bank0
   500  00CB  01A2               	clrf	_count10Ms
   501  00CC  01A3               	clrf	_count10Ms+1
   502                           
   503                           ;main.c: 254: checkUsbStatus();
   504  00CD  21C8               	fcall	_checkUsbStatus
   505  00CE                     l2532:	
   506                           
   507                           ;main.c: 255: }
   508                           ;main.c: 257: if(countTime == 1000)
   509  00CE  30E8               	movlw	232
   510  00CF  0678               	xorwf	_countTime,w
   511  00D0  3003               	movlw	3
   512  00D1  1903               	skipnz
   513  00D2  0679               	xorwf	_countTime+1,w
   514  00D3  1D03               	btfss	3,2
   515  00D4  28BC               	goto	l2516
   516                           
   517                           ;main.c: 258: {
   518                           ;main.c: 259: countTime = 0;
   519  00D5  01F8               	clrf	_countTime
   520  00D6  01F9               	clrf	_countTime+1
   521  00D7  28BC               	goto	l2516
   522  00D8                     __end_of_main:	
   523                           
   524                           	psect	text1
   525  01E4                     __ptext1:	
   526 ;; *************** function _scanKeys *****************
   527 ;; Defined at:
   528 ;;		line 162 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
   529 ;; Parameters:    Size  Location     Type
   530 ;;		None
   531 ;; Auto vars:     Size  Location     Type
   532 ;;		None
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      void 
   535 ;; Registers used:
   536 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   537 ;; Tracked objects:
   538 ;;		On entry : 0/100
   539 ;;		On exit  : B00/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMMON   BANK0   BANK1
   542 ;;      Params:         0       0       0
   543 ;;      Locals:         0       0       0
   544 ;;      Temps:          0       0       0
   545 ;;      Totals:         0       0       0
   546 ;;Total ram usage:        0 bytes
   547 ;; Hardware stack levels used:    1
   548 ;; Hardware stack levels required when called:    2
   549 ;; This function calls:
   550 ;;		_sacnKeyInput
   551 ;; This function is called by:
   552 ;;		_main
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           
   557                           ;psect for function _scanKeys
   558  01E4                     _scanKeys:	
   559                           
   560                           ;main.c: 164: key1.key_addr_result = key2.key_addr_result = key3.key_addr_result = PORTB
      +                          ;
   561                           
   562                           ;incstack = 0
   563                           ; Regs used in _scanKeys: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   564  01E4  1283               	bcf	3,5	;RP0=0, select bank0
   565  01E5  1303               	bcf	3,6	;RP1=0, select bank0
   566  01E6  0806               	movf	6,w	;volatile
   567  01E7  00A9               	movwf	_key3+5
   568  01E8  00B0               	movwf	_key2+5
   569  01E9  00B7               	movwf	_key1+5
   570                           
   571                           ;main.c: 165: sacnKeyInput(&key1);
   572  01EA  3032               	movlw	(low (_key1| 0))& (0+255)
   573  01EB  21AB               	fcall	_sacnKeyInput
   574                           
   575                           ;main.c: 166: sacnKeyInput(&key2);
   576  01EC  302B               	movlw	(low (_key2| 0))& (0+255)
   577  01ED  21AB               	fcall	_sacnKeyInput
   578                           
   579                           ;main.c: 167: sacnKeyInput(&key3);
   580  01EE  3024               	movlw	(low (_key3| 0))& (0+255)
   581  01EF  21AB               	fcall	_sacnKeyInput
   582                           
   583                           ;main.c: 168: countTime++;
   584  01F0  0AF8               	incf	_countTime,f
   585  01F1  1903               	skipnz
   586  01F2  0AF9               	incf	_countTime+1,f
   587                           
   588                           ;main.c: 169: count10Ms++;
   589  01F3  1283               	bcf	3,5	;RP0=0, select bank0
   590  01F4  1303               	bcf	3,6	;RP1=0, select bank0
   591  01F5  0AA2               	incf	_count10Ms,f
   592  01F6  1903               	skipnz
   593  01F7  0AA3               	incf	_count10Ms+1,f
   594  01F8  0008               	return
   595  01F9                     __end_of_scanKeys:	
   596                           
   597                           	psect	text2
   598  01AB                     __ptext2:	
   599 ;; *************** function _sacnKeyInput *****************
   600 ;; Defined at:
   601 ;;		line 3 in file "C:\SCMCU WorkSpace\uf166fan\scankey.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;  key             1    wreg     PTR struct Keys
   604 ;;		 -> key3(7), key2(7), key1(7), 
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  key             1    4[COMMON] PTR struct Keys
   607 ;;		 -> key3(7), key2(7), key1(7), 
   608 ;; Return value:  Size  Location     Type
   609 ;;                  1    wreg      void 
   610 ;; Registers used:
   611 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   612 ;; Tracked objects:
   613 ;;		On entry : 0/0
   614 ;;		On exit  : 800/0
   615 ;;		Unchanged: 0/0
   616 ;; Data sizes:     COMMON   BANK0   BANK1
   617 ;;      Params:         0       0       0
   618 ;;      Locals:         1       0       0
   619 ;;      Temps:          2       0       0
   620 ;;      Totals:         3       0       0
   621 ;;Total ram usage:        3 bytes
   622 ;; Hardware stack levels used:    1
   623 ;; Hardware stack levels required when called:    1
   624 ;; This function calls:
   625 ;;		Nothing
   626 ;; This function is called by:
   627 ;;		_scanKeys
   628 ;; This function uses a non-reentrant model
   629 ;;
   630                           
   631                           
   632                           ;psect for function _sacnKeyInput
   633  01AB                     _sacnKeyInput:	
   634                           
   635                           ;incstack = 0
   636                           ; Regs used in _sacnKeyInput: [wreg-fsr0h+status,2+status,0]
   637                           ;sacnKeyInput@key stored from wreg
   638  01AB  00F4               	movwf	sacnKeyInput@key
   639                           
   640                           ;scankey.c: 5: key->key_input = ((key->key_addr_result) >> (key->key_index)&1);
   641  01AC  3E05               	addlw	5
   642  01AD  0084               	movwf	4
   643  01AE  1383               	bcf	3,7	;select IRP bank0
   644  01AF  0800               	movf	0,w
   645  01B0  00F2               	movwf	??_sacnKeyInput
   646  01B1  0874               	movf	sacnKeyInput@key,w
   647  01B2  3E06               	addlw	6
   648  01B3  0084               	movwf	4
   649  01B4  0A00               	incf	0,w
   650  01B5  29B8               	goto	u594
   651  01B6                     u595:	
   652  01B6  1003               	clrc
   653  01B7  0CF2               	rrf	??_sacnKeyInput,f
   654  01B8                     u594:	
   655  01B8  3EFF               	addlw	-1
   656  01B9  1D03               	skipz
   657  01BA  29B6               	goto	u595
   658  01BB  0872               	movf	??_sacnKeyInput,w
   659  01BC  00F3               	movwf	??_sacnKeyInput+1
   660  01BD  0874               	movf	sacnKeyInput@key,w
   661  01BE  3E04               	addlw	4
   662  01BF  0084               	movwf	4
   663  01C0  0873               	movf	??_sacnKeyInput+1,w
   664  01C1  0080               	movwf	0
   665  01C2  0874               	movf	sacnKeyInput@key,w
   666  01C3  3E04               	addlw	4
   667  01C4  0084               	movwf	4
   668  01C5  3001               	movlw	1
   669  01C6  0580               	andwf	0,f
   670  01C7  0008               	return
   671  01C8                     __end_of_sacnKeyInput:	
   672                           
   673                           	psect	text3
   674  020B                     __ptext3:	
   675 ;; *************** function _resetKey *****************
   676 ;; Defined at:
   677 ;;		line 115 in file "C:\SCMCU WorkSpace\uf166fan\scankey.c"
   678 ;; Parameters:    Size  Location     Type
   679 ;;  key             1    wreg     PTR struct Keys
   680 ;;		 -> key3(7), key2(7), key1(7), 
   681 ;; Auto vars:     Size  Location     Type
   682 ;;  key             1    2[COMMON] PTR struct Keys
   683 ;;		 -> key3(7), key2(7), key1(7), 
   684 ;; Return value:  Size  Location     Type
   685 ;;                  1    wreg      void 
   686 ;; Registers used:
   687 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   688 ;; Tracked objects:
   689 ;;		On entry : 0/0
   690 ;;		On exit  : 800/0
   691 ;;		Unchanged: 0/0
   692 ;; Data sizes:     COMMON   BANK0   BANK1
   693 ;;      Params:         0       0       0
   694 ;;      Locals:         1       0       0
   695 ;;      Temps:          0       0       0
   696 ;;      Totals:         1       0       0
   697 ;;Total ram usage:        1 bytes
   698 ;; Hardware stack levels used:    1
   699 ;; Hardware stack levels required when called:    1
   700 ;; This function calls:
   701 ;;		Nothing
   702 ;; This function is called by:
   703 ;;		_main
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           
   708                           ;psect for function _resetKey
   709  020B                     _resetKey:	
   710                           
   711                           ;incstack = 0
   712                           ; Regs used in _resetKey: [wreg-fsr0h+status,2+status,0]
   713                           ;resetKey@key stored from wreg
   714  020B  00F2               	movwf	resetKey@key
   715                           
   716                           ;scankey.c: 117: key->key_timer_cnt1 =key->key_timer_cnt2 = key->key_state_buffer1 = key
      +                          ->key_state_buffer2 = 0;
   717  020C  3E03               	addlw	3
   718  020D  0084               	movwf	4
   719  020E  1383               	bcf	3,7	;select IRP bank0
   720  020F  0180               	clrf	0
   721  0210  0A72               	incf	resetKey@key,w
   722  0211  0084               	movwf	4
   723  0212  0180               	clrf	0
   724  0213  0872               	movf	resetKey@key,w
   725  0214  3E02               	addlw	2
   726  0215  0084               	movwf	4
   727  0216  0180               	clrf	0
   728  0217  0872               	movf	resetKey@key,w
   729  0218  0084               	movwf	4
   730  0219  0180               	clrf	0
   731  021A  0008               	return
   732  021B                     __end_of_resetKey:	
   733                           
   734                           	psect	text4
   735  01C8                     __ptext4:	
   736 ;; *************** function _checkUsbStatus *****************
   737 ;; Defined at:
   738 ;;		line 29 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
   739 ;; Parameters:    Size  Location     Type
   740 ;;		None
   741 ;; Auto vars:     Size  Location     Type
   742 ;;		None
   743 ;; Return value:  Size  Location     Type
   744 ;;                  1    wreg      void 
   745 ;; Registers used:
   746 ;;		wreg, status,2, status,0
   747 ;; Tracked objects:
   748 ;;		On entry : 300/0
   749 ;;		On exit  : 300/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMMON   BANK0   BANK1
   752 ;;      Params:         0       0       0
   753 ;;      Locals:         0       0       0
   754 ;;      Temps:          1       0       0
   755 ;;      Totals:         1       0       0
   756 ;;Total ram usage:        1 bytes
   757 ;; Hardware stack levels used:    1
   758 ;; Hardware stack levels required when called:    1
   759 ;; This function calls:
   760 ;;		Nothing
   761 ;; This function is called by:
   762 ;;		_main
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           
   767                           ;psect for function _checkUsbStatus
   768  01C8                     _checkUsbStatus:	
   769                           
   770                           ;main.c: 31: if(((PORTB) >> (2)&1) == 1){
   771                           
   772                           ;incstack = 0
   773                           ; Regs used in _checkUsbStatus: [wreg+status,2+status,0]
   774  01C8  0806               	movf	6,w	;volatile
   775  01C9  00F2               	movwf	??_checkUsbStatus
   776  01CA  1003               	clrc
   777  01CB  0CF2               	rrf	??_checkUsbStatus,f
   778  01CC  1003               	clrc
   779  01CD  0CF2               	rrf	??_checkUsbStatus,f
   780  01CE  1C72               	btfss	??_checkUsbStatus,0
   781  01CF  29E2               	goto	l571
   782                           
   783                           ;main.c: 32: if(((PORTB) >> (1)&1) == 1){
   784  01D0  0806               	movf	6,w	;volatile
   785  01D1  00F2               	movwf	??_checkUsbStatus
   786  01D2  1003               	clrc
   787  01D3  0CF2               	rrf	??_checkUsbStatus,f
   788  01D4  1C72               	btfss	??_checkUsbStatus,0
   789  01D5  29D8               	goto	l2204
   790                           
   791                           ;main.c: 34: PORTA&=~(1<<0);
   792  01D6  1005               	bcf	5,0	;volatile
   793                           
   794                           ;main.c: 35: }else if(countTime == 1000){
   795  01D7  0008               	return
   796  01D8                     l2204:	
   797  01D8  30E8               	movlw	232
   798  01D9  0678               	xorwf	_countTime,w
   799  01DA  3003               	movlw	3
   800  01DB  1903               	skipnz
   801  01DC  0679               	xorwf	_countTime+1,w
   802  01DD  1D03               	btfss	3,2
   803  01DE  0008               	return
   804                           
   805                           ;main.c: 37: PORTA^=(1<<0);
   806  01DF  3001               	movlw	1
   807  01E0  0685               	xorwf	5,f	;volatile
   808  01E1  0008               	return
   809  01E2                     l571:	
   810                           
   811                           ;main.c: 41: PORTA|=(1<<0);
   812  01E2  1405               	bsf	5,0	;volatile
   813  01E3  0008               	return
   814  01E4                     __end_of_checkUsbStatus:	
   815                           
   816                           	psect	text5
   817  0189                     __ptext5:	
   818 ;; *************** function _checkKeys *****************
   819 ;; Defined at:
   820 ;;		line 173 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;		None
   823 ;; Auto vars:     Size  Location     Type
   824 ;;		None
   825 ;; Return value:  Size  Location     Type
   826 ;;                  1    wreg      void 
   827 ;; Registers used:
   828 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   829 ;; Tracked objects:
   830 ;;		On entry : 300/0
   831 ;;		On exit  : 0/0
   832 ;;		Unchanged: 0/0
   833 ;; Data sizes:     COMMON   BANK0   BANK1
   834 ;;      Params:         0       0       0
   835 ;;      Locals:         0       0       0
   836 ;;      Temps:          0       0       0
   837 ;;      Totals:         0       0       0
   838 ;;Total ram usage:        0 bytes
   839 ;; Hardware stack levels used:    1
   840 ;; Hardware stack levels required when called:    4
   841 ;; This function calls:
   842 ;;		_checkFan
   843 ;;		_closeFan
   844 ;;		_key_read
   845 ;;		_setFanLevel
   846 ;; This function is called by:
   847 ;;		_main
   848 ;; This function uses a non-reentrant model
   849 ;;
   850                           
   851                           
   852                           ;psect for function _checkKeys
   853  0189                     _checkKeys:	
   854                           
   855                           ;main.c: 175: if(key_read(&key1) != 0)
   856                           
   857                           ;incstack = 0
   858                           ; Regs used in _checkKeys: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   859  0189  3032               	movlw	(low (_key1| 0))& (0+255)
   860  018A  20D8               	fcall	_key_read
   861  018B  3A00               	xorlw	0
   862  018C  1903               	skipnz
   863  018D  2996               	goto	l2476
   864                           
   865                           ;main.c: 176: {
   866                           ;main.c: 179: if(FAN_STATUS == 1)
   867  018E  1283               	bcf	3,5	;RP0=0, select bank0
   868  018F  1303               	bcf	3,6	;RP1=0, select bank0
   869  0190  0B41               	decfsz	_FAN_STATUS,w
   870  0191  2993               	goto	l2468
   871                           
   872                           ;main.c: 180: {
   873                           ;main.c: 182: closeFan();
   874  0192  2A1B               	ljmp	l2082
   875  0193                     l2468:	
   876                           ;main.c: 183: }else
   877                           
   878                           
   879                           ;main.c: 184: {
   880                           ;main.c: 185: FAN_STATUS = 2;
   881  0193  3002               	movlw	2
   882  0194  00C1               	movwf	_FAN_STATUS
   883                           
   884                           ;main.c: 186: checkFan();
   885  0195  2963               	ljmp	l2438
   886  0196                     l2476:	
   887                           
   888                           ;main.c: 190: else if(FAN_STATUS == 2)
   889  0196  3002               	movlw	2
   890  0197  1283               	bcf	3,5	;RP0=0, select bank0
   891  0198  1303               	bcf	3,6	;RP1=0, select bank0
   892  0199  0641               	xorwf	_FAN_STATUS,w
   893  019A  1D03               	btfss	3,2
   894  019B  299D               	goto	l615
   895                           
   896                           ;main.c: 191: {
   897                           ;main.c: 192: checkFan();
   898  019C  2163               	fcall	_checkFan
   899  019D                     l615:	
   900                           
   901                           ;main.c: 193: }
   902                           ;main.c: 197: if(key_read(&key2) != 0)
   903  019D  302B               	movlw	(low (_key2| 0))& (0+255)
   904  019E  20D8               	fcall	_key_read
   905  019F  3A00               	xorlw	0
   906  01A0  1903               	skipnz
   907  01A1  29A4               	goto	l2484
   908                           
   909                           ;main.c: 198: {
   910                           ;main.c: 200: setFanLevel(1);
   911  01A2  3001               	movlw	1
   912  01A3  290D               	ljmp	_setFanLevel
   913  01A4                     l2484:	
   914                           
   915                           ;main.c: 202: }
   916                           ;main.c: 204: if(key_read(&key3) != 0)
   917  01A4  3024               	movlw	(low (_key3| 0))& (0+255)
   918  01A5  20D8               	fcall	_key_read
   919  01A6  3A00               	xorlw	0
   920  01A7  1903               	skipnz
   921  01A8  0008               	return
   922                           
   923                           ;main.c: 205: {
   924                           ;main.c: 207: setFanLevel(-1);
   925  01A9  30FF               	movlw	255
   926  01AA  290D               	ljmp	_setFanLevel
   927  01AB                     __end_of_checkKeys:	
   928                           
   929                           	psect	text6
   930  00D8                     __ptext6:	
   931 ;; *************** function _key_read *****************
   932 ;; Defined at:
   933 ;;		line 75 in file "C:\SCMCU WorkSpace\uf166fan\scankey.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;  key             1    wreg     PTR struct Keys
   936 ;;		 -> key3(7), key2(7), key1(7), 
   937 ;; Auto vars:     Size  Location     Type
   938 ;;  key             1    7[COMMON] PTR struct Keys
   939 ;;		 -> key3(7), key2(7), key1(7), 
   940 ;;  key_read        1    6[COMMON] unsigned char 
   941 ;;  key_return      1    5[COMMON] unsigned char 
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      unsigned char 
   944 ;; Registers used:
   945 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 800/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMMON   BANK0   BANK1
   951 ;;      Params:         0       0       0
   952 ;;      Locals:         3       0       0
   953 ;;      Temps:          0       0       0
   954 ;;      Totals:         3       0       0
   955 ;;Total ram usage:        3 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; Hardware stack levels required when called:    2
   958 ;; This function calls:
   959 ;;		_key_driver
   960 ;; This function is called by:
   961 ;;		_checkKeys
   962 ;; This function uses a non-reentrant model
   963 ;;
   964                           
   965                           
   966                           ;psect for function _key_read
   967  00D8                     _key_read:	
   968                           
   969                           ;incstack = 0
   970                           ; Regs used in _key_read: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   971                           ;key_read@key stored from wreg
   972  00D8  00F7               	movwf	key_read@key
   973                           
   974                           ;scankey.c: 78: unsigned char key_return = 0;
   975  00D9  01F5               	clrf	key_read@key_return
   976                           
   977                           ;scankey.c: 79: unsigned char key_read = key_driver(key);
   978  00DA  205E               	fcall	_key_driver
   979  00DB  00F6               	movwf	key_read@key_read
   980                           
   981                           ;scankey.c: 81: switch(key->key_state_buffer2)
   982  00DC  2900               	goto	l2192
   983  00DD                     l2172:	
   984                           
   985                           ;scankey.c: 84: if(key_read == 1)
   986  00DD  0B76               	decfsz	key_read@key_read,w
   987  00DE  28E9               	goto	l2176
   988                           
   989                           ;scankey.c: 85: {
   990                           ;scankey.c: 86: key->key_timer_cnt2 = 0;
   991  00DF  0877               	movf	key_read@key,w
   992  00E0  3E02               	addlw	2
   993  00E1  0084               	movwf	4
   994  00E2  0180               	clrf	0
   995                           
   996                           ;scankey.c: 87: key->key_state_buffer2 = 1;
   997  00E3  0877               	movf	key_read@key,w
   998  00E4  3E03               	addlw	3
   999  00E5  0084               	movwf	4
  1000  00E6  0180               	clrf	0
  1001  00E7  0A80               	incf	0,f
  1002                           
  1003                           ;scankey.c: 88: }
  1004  00E8  290B               	goto	l2194
  1005  00E9                     l2176:	
  1006                           
  1007                           ;scankey.c: 89: else
  1008                           ;scankey.c: 90: key_return = key_read;
  1009  00E9  0876               	movf	key_read@key_read,w
  1010  00EA  00F5               	movwf	key_read@key_return
  1011  00EB  290B               	goto	l2194
  1012  00EC                     l2178:	
  1013                           
  1014                           ;scankey.c: 94: if(key_read == 1)
  1015  00EC  0B76               	decfsz	key_read@key_read,w
  1016  00ED  28F1               	goto	l2184
  1017                           
  1018                           ;scankey.c: 95: {
  1019                           ;scankey.c: 96: key_return = 2;
  1020  00EE  3002               	movlw	2
  1021  00EF  00F5               	movwf	key_read@key_return
  1022  00F0  28FB               	goto	l2188
  1023  00F1                     l2184:	
  1024                           ;scankey.c: 98: }
  1025                           
  1026                           ;scankey.c: 97: key->key_state_buffer2 = 0;
  1027                           
  1028                           
  1029                           ;scankey.c: 99: else if(++(key->key_timer_cnt2) >= 50)
  1030  00F1  0877               	movf	key_read@key,w
  1031  00F2  3E02               	addlw	2
  1032  00F3  0084               	movwf	4
  1033  00F4  3032               	movlw	50
  1034  00F5  0A80               	incf	0,f
  1035  00F6  0200               	subwf	0,w
  1036  00F7  1C03               	skipc
  1037  00F8  290B               	goto	l2194
  1038                           
  1039                           ;scankey.c: 100: {
  1040                           ;scankey.c: 104: key_return = 1;
  1041  00F9  01F5               	clrf	key_read@key_return
  1042  00FA  0AF5               	incf	key_read@key_return,f
  1043  00FB                     l2188:	
  1044                           
  1045                           ;scankey.c: 105: key->key_state_buffer2 = 0;
  1046  00FB  0877               	movf	key_read@key,w
  1047  00FC  3E03               	addlw	3
  1048  00FD  0084               	movwf	4
  1049  00FE  0180               	clrf	0
  1050  00FF  290B               	goto	l2194
  1051  0100                     l2192:	
  1052  0100  0877               	movf	key_read@key,w
  1053  0101  3E03               	addlw	3
  1054  0102  0084               	movwf	4
  1055  0103  0800               	movf	0,w
  1056                           
  1057                           ; Switch size 1, requested type "space"
  1058                           ; Number of cases is 2, Range of values is 0 to 1
  1059                           ; switch strategies available:
  1060                           ; Name         Instructions Cycles
  1061                           ; simple_byte            7     4 (average)
  1062                           ; direct_byte            8     6 (fixed)
  1063                           ; jumptable            260     6 (fixed)
  1064                           ;	Chosen strategy is simple_byte
  1065  0104  3A00               	xorlw	0	; case 0
  1066  0105  1903               	skipnz
  1067  0106  28DD               	goto	l2172
  1068  0107  3A01               	xorlw	1	; case 1
  1069  0108  1903               	skipnz
  1070  0109  28EC               	goto	l2178
  1071  010A  290B               	goto	l2194
  1072  010B                     l2194:	
  1073                           
  1074                           ;scankey.c: 111: return key_return;
  1075  010B  0875               	movf	key_read@key_return,w
  1076  010C  0008               	return
  1077  010D                     __end_of_key_read:	
  1078                           
  1079                           	psect	text7
  1080  005E                     __ptext7:	
  1081 ;; *************** function _key_driver *****************
  1082 ;; Defined at:
  1083 ;;		line 10 in file "C:\SCMCU WorkSpace\uf166fan\scankey.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;  key             1    wreg     PTR struct Keys
  1086 ;;		 -> key3(7), key2(7), key1(7), 
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;  key             1    4[COMMON] PTR struct Keys
  1089 ;;		 -> key3(7), key2(7), key1(7), 
  1090 ;;  key_read        1    3[COMMON] unsigned char 
  1091 ;;  key_return      1    2[COMMON] unsigned char 
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  1    wreg      unsigned char 
  1094 ;; Registers used:
  1095 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 800/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMMON   BANK0   BANK1
  1101 ;;      Params:         0       0       0
  1102 ;;      Locals:         3       0       0
  1103 ;;      Temps:          0       0       0
  1104 ;;      Totals:         3       0       0
  1105 ;;Total ram usage:        3 bytes
  1106 ;; Hardware stack levels used:    1
  1107 ;; Hardware stack levels required when called:    1
  1108 ;; This function calls:
  1109 ;;		Nothing
  1110 ;; This function is called by:
  1111 ;;		_key_read
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114                           
  1115                           
  1116                           ;psect for function _key_driver
  1117  005E                     _key_driver:	
  1118                           
  1119                           ;incstack = 0
  1120                           ; Regs used in _key_driver: [wreg-fsr0h+status,2+status,0]
  1121                           ;key_driver@key stored from wreg
  1122  005E  00F4               	movwf	key_driver@key
  1123                           
  1124                           ;scankey.c: 14: unsigned char key_return = 0;
  1125  005F  01F2               	clrf	key_driver@key_return
  1126                           
  1127                           ;scankey.c: 15: unsigned char key_read = key->key_input;
  1128  0060  3E04               	addlw	4
  1129  0061  0084               	movwf	4
  1130  0062  1383               	bcf	3,7	;select IRP bank0
  1131  0063  0800               	movf	0,w
  1132  0064  00F3               	movwf	key_driver@key_read
  1133                           
  1134                           ;scankey.c: 17: switch(key->key_state_buffer1)
  1135  0065  2891               	goto	l2130
  1136  0066                     l2100:	
  1137                           
  1138                           ;scankey.c: 20: if(key_read == 0)
  1139  0066  0873               	movf	key_driver@key_read,w
  1140  0067  1D03               	btfss	3,2
  1141  0068  289E               	goto	l2132
  1142                           
  1143                           ;scankey.c: 21: {
  1144                           ;scankey.c: 22: key->key_state_buffer1 = 1;
  1145  0069  0A74               	incf	key_driver@key,w
  1146  006A  0084               	movwf	4
  1147  006B  0180               	clrf	0
  1148  006C  0A80               	incf	0,f
  1149  006D  289E               	goto	l2132
  1150  006E                     l2104:	
  1151                           
  1152                           ;scankey.c: 29: if(key_read == 0)
  1153  006E  0873               	movf	key_driver@key_read,w
  1154  006F  1D03               	btfss	3,2
  1155  0070  288D               	goto	l2126
  1156                           
  1157                           ;scankey.c: 30: {
  1158                           ;scankey.c: 31: key->key_timer_cnt1 = 0;
  1159  0071  0874               	movf	key_driver@key,w
  1160  0072  0084               	movwf	4
  1161  0073  0180               	clrf	0
  1162                           
  1163                           ;scankey.c: 32: key->key_state_buffer1 = 2;
  1164  0074  0A74               	incf	key_driver@key,w
  1165  0075  0084               	movwf	4
  1166  0076  3002               	movlw	2
  1167  0077  2889               	goto	L1
  1168  0078                     l2112:	
  1169                           ;scankey.c: 37: else
  1170                           ;scankey.c: 38: {
  1171                           ;scankey.c: 39: key->key_state_buffer1 = 0;
  1172                           
  1173                           ;scankey.c: 36: }
  1174                           
  1175                           
  1176                           ;scankey.c: 46: if(key_read == 1)
  1177  0078  0B73               	decfsz	key_driver@key_read,w
  1178  0079  287D               	goto	l2118
  1179                           
  1180                           ;scankey.c: 47: {
  1181                           ;scankey.c: 48: key_return = 1;
  1182  007A  01F2               	clrf	key_driver@key_return
  1183  007B  0AF2               	incf	key_driver@key_return,f
  1184  007C  288D               	goto	l2126
  1185  007D                     l2118:	
  1186                           ;scankey.c: 50: }
  1187                           
  1188                           ;scankey.c: 49: key->key_state_buffer1 = 0;
  1189                           
  1190                           
  1191                           ;scankey.c: 51: else if(++(key->key_timer_cnt1) >= 100)
  1192  007D  0874               	movf	key_driver@key,w
  1193  007E  0084               	movwf	4
  1194  007F  3064               	movlw	100
  1195  0080  0A80               	incf	0,f
  1196  0081  0200               	subwf	0,w
  1197  0082  1C03               	skipc
  1198  0083  289E               	goto	l2132
  1199                           
  1200                           ;scankey.c: 52: {
  1201                           ;scankey.c: 53: key_return = 3;
  1202  0084  3003               	movlw	3
  1203  0085  00F2               	movwf	key_driver@key_return
  1204                           
  1205                           ;scankey.c: 54: key->key_state_buffer1 = 3;
  1206  0086  0A74               	incf	key_driver@key,w
  1207  0087  0084               	movwf	4
  1208  0088  3003               	movlw	3
  1209  0089                     L1:	
  1210  0089  0080               	movwf	0
  1211  008A  289E               	goto	l2132
  1212  008B                     l2124:	
  1213                           
  1214                           ;scankey.c: 60: if(key_read == 1)
  1215  008B  0B73               	decfsz	key_driver@key_read,w
  1216  008C  289E               	goto	l2132
  1217  008D                     l2126:	
  1218                           
  1219                           ;scankey.c: 61: {
  1220                           ;scankey.c: 62: key->key_state_buffer1 = 0;
  1221  008D  0A74               	incf	key_driver@key,w
  1222  008E  0084               	movwf	4
  1223  008F  0180               	clrf	0
  1224  0090  289E               	goto	l2132
  1225  0091                     l2130:	
  1226  0091  0A74               	incf	key_driver@key,w
  1227  0092  0084               	movwf	4
  1228  0093  0800               	movf	0,w
  1229                           
  1230                           ; Switch size 1, requested type "space"
  1231                           ; Number of cases is 4, Range of values is 0 to 3
  1232                           ; switch strategies available:
  1233                           ; Name         Instructions Cycles
  1234                           ; direct_byte           10     6 (fixed)
  1235                           ; simple_byte           13     7 (average)
  1236                           ; jumptable            260     6 (fixed)
  1237                           ;	Chosen strategy is direct_byte
  1238  0094  0084               	movwf	4
  1239  0095  3004               	movlw	4
  1240  0096  0204               	subwf	4,w
  1241  0097  1803               	skipnc
  1242  0098  289E               	goto	l2132
  1243  0099  3002               	movlw	high S2586
  1244  009A  008A               	movwf	10
  1245  009B  306E               	movlw	low S2586
  1246  009C  0704               	addwf	4,w
  1247  009D  0082               	movwf	2
  1248  009E                     l2132:	
  1249                           
  1250                           ;scankey.c: 67: return key_return;
  1251  009E  0872               	movf	key_driver@key_return,w
  1252  009F  0008               	return
  1253  00A0                     __end_of_key_driver:	
  1254                           
  1255                           	psect	swtext1
  1256  026E                     __pswtext1:	
  1257  026E                     S2586:	
  1258  026E  2866               	ljmp	l2100
  1259  026F  286E               	ljmp	l2104
  1260  0270  2878               	ljmp	l2112
  1261  0271  288B               	ljmp	l2124
  1262                           
  1263                           	psect	text8
  1264  0163                     __ptext8:	
  1265 ;; *************** function _checkFan *****************
  1266 ;; Defined at:
  1267 ;;		line 99 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;		None
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;		None
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  1    wreg      void 
  1274 ;; Registers used:
  1275 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1276 ;; Tracked objects:
  1277 ;;		On entry : B00/0
  1278 ;;		On exit  : 300/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMMON   BANK0   BANK1
  1281 ;;      Params:         0       0       0
  1282 ;;      Locals:         0       0       0
  1283 ;;      Temps:          1       0       0
  1284 ;;      Totals:         1       0       0
  1285 ;;Total ram usage:        1 bytes
  1286 ;; Hardware stack levels used:    1
  1287 ;; Hardware stack levels required when called:    3
  1288 ;; This function calls:
  1289 ;;		_closeFan
  1290 ;;		_setFanLevel
  1291 ;; This function is called by:
  1292 ;;		_checkKeys
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           
  1297                           ;psect for function _checkFan
  1298  0163                     _checkFan:	
  1299  0163                     l2438:	
  1300                           ;incstack = 0
  1301                           ; Regs used in _checkFan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1302                           
  1303                           
  1304                           ;main.c: 102: PORTA|=(1<<1);
  1305  0163  1485               	bsf	5,1	;volatile
  1306                           
  1307                           ;main.c: 103: setFanLevel(0);
  1308  0164  3000               	movlw	0
  1309  0165  210D               	fcall	_setFanLevel
  1310                           
  1311                           ;main.c: 105: TRISC&=~(1<<2);
  1312  0166  1683               	bsf	3,5	;RP0=1, select bank1
  1313  0167  1107               	bcf	7,2	;volatile
  1314                           
  1315                           ;main.c: 106: T2CON = 0X04;
  1316  0168  3004               	movlw	4
  1317  0169  1283               	bcf	3,5	;RP0=0, select bank0
  1318  016A  0092               	movwf	18	;volatile
  1319                           
  1320                           ;main.c: 109: if(((PORTB) >> (6)&1) == 0)
  1321  016B  0806               	movf	6,w	;volatile
  1322  016C  00F6               	movwf	??_checkFan
  1323  016D  3006               	movlw	6
  1324  016E                     u845:	
  1325  016E  1003               	clrc
  1326  016F  0CF6               	rrf	??_checkFan,f
  1327  0170  3EFF               	addlw	-1
  1328  0171  1D03               	skipz
  1329  0172  296E               	goto	u845
  1330  0173  1876               	btfsc	??_checkFan,0
  1331  0174  2978               	goto	l2450
  1332                           
  1333                           ;main.c: 110: {
  1334                           ;main.c: 111: FAN_STATUS = 1;
  1335  0175  01C1               	clrf	_FAN_STATUS
  1336  0176  0AC1               	incf	_FAN_STATUS,f
  1337                           
  1338                           ;main.c: 112: }else
  1339  0177  297A               	goto	l2452
  1340  0178                     l2450:	
  1341                           
  1342                           ;main.c: 113: {
  1343                           ;main.c: 114: FAN_STATUS = 2;
  1344  0178  3002               	movlw	2
  1345  0179  00C1               	movwf	_FAN_STATUS
  1346  017A                     l2452:	
  1347                           
  1348                           ;main.c: 115: }
  1349                           ;main.c: 118: if(FAN_STATUS == 2)
  1350  017A  3002               	movlw	2
  1351  017B  0641               	xorwf	_FAN_STATUS,w
  1352  017C  1D03               	btfss	3,2
  1353  017D  0008               	return
  1354                           
  1355                           ;main.c: 119: {
  1356                           ;main.c: 120: fan_check_time++;
  1357  017E  0AA0               	incf	_fan_check_time,f
  1358  017F  1903               	skipnz
  1359  0180  0AA1               	incf	_fan_check_time+1,f
  1360                           
  1361                           ;main.c: 121: if(fan_check_time == 3000)
  1362  0181  30B8               	movlw	184
  1363  0182  0620               	xorwf	_fan_check_time,w
  1364  0183  300B               	movlw	11
  1365  0184  1903               	skipnz
  1366  0185  0621               	xorwf	_fan_check_time+1,w
  1367  0186  1D03               	btfss	3,2
  1368  0187  0008               	return
  1369                           
  1370                           ;main.c: 122: {
  1371                           ;main.c: 123: closeFan();
  1372  0188  2A1B               	ljmp	l2082
  1373  0189                     __end_of_checkFan:	
  1374                           
  1375                           	psect	text9
  1376  010D                     __ptext9:	
  1377 ;; *************** function _setFanLevel *****************
  1378 ;; Defined at:
  1379 ;;		line 60 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;  level           1    wreg     unsigned char 
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  level           1    4[BANK0 ] unsigned char 
  1384 ;;  levelWidth      2    5[BANK0 ] unsigned int 
  1385 ;;  tempLevel       1    7[BANK0 ] unsigned char 
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  1    wreg      void 
  1388 ;; Registers used:
  1389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1390 ;; Tracked objects:
  1391 ;;		On entry : 800/0
  1392 ;;		On exit  : 300/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMMON   BANK0   BANK1
  1395 ;;      Params:         0       0       0
  1396 ;;      Locals:         0       4       0
  1397 ;;      Temps:          0       0       0
  1398 ;;      Totals:         0       4       0
  1399 ;;Total ram usage:        4 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; Hardware stack levels required when called:    2
  1402 ;; This function calls:
  1403 ;;		___awdiv
  1404 ;;		___bmul
  1405 ;;		_setLedOn
  1406 ;; This function is called by:
  1407 ;;		_checkFan
  1408 ;;		_checkKeys
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           
  1413                           ;psect for function _setFanLevel
  1414  010D                     _setFanLevel:	
  1415                           
  1416                           ;incstack = 0
  1417                           ; Regs used in _setFanLevel: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1418                           ;setFanLevel@level stored from wreg
  1419  010D  1283               	bcf	3,5	;RP0=0, select bank0
  1420  010E  1303               	bcf	3,6	;RP1=0, select bank0
  1421  010F  00BD               	movwf	setFanLevel@level
  1422                           
  1423                           ;main.c: 62: unsigned int levelWidth = (PR2+1)/4;
  1424  0110  1683               	bsf	3,5	;RP0=1, select bank1
  1425  0111  0812               	movf	18,w	;volatile
  1426  0112  00F4               	movwf	___awdiv@dividend
  1427  0113  01F5               	clrf	___awdiv@dividend+1
  1428  0114  0AF4               	incf	___awdiv@dividend,f
  1429  0115  1903               	skipnz
  1430  0116  0AF5               	incf	___awdiv@dividend+1,f
  1431  0117  3004               	movlw	4
  1432  0118  00F2               	movwf	___awdiv@divisor
  1433  0119  01F3               	clrf	___awdiv@divisor+1
  1434  011A  2018               	fcall	___awdiv
  1435  011B  0873               	movf	?___awdiv+1,w
  1436  011C  00BF               	movwf	setFanLevel@levelWidth+1
  1437  011D  0872               	movf	?___awdiv,w
  1438  011E  00BE               	movwf	setFanLevel@levelWidth
  1439                           
  1440                           ;main.c: 63: char tempLevel = currentLevel + level;
  1441  011F  083D               	movf	setFanLevel@level,w
  1442  0120  0742               	addwf	_currentLevel,w
  1443  0121  00C0               	movwf	setFanLevel@tempLevel
  1444                           
  1445                           ;main.c: 64: if(tempLevel > 4)
  1446  0122  3005               	movlw	5
  1447  0123  0240               	subwf	setFanLevel@tempLevel,w
  1448  0124  1C03               	skipc
  1449  0125  2928               	goto	l2426
  1450                           
  1451                           ;main.c: 65: {
  1452                           ;main.c: 66: tempLevel = 4;
  1453  0126  3004               	movlw	4
  1454  0127  00C0               	movwf	setFanLevel@tempLevel
  1455  0128                     l2426:	
  1456                           
  1457                           ;main.c: 67: }
  1458                           ;main.c: 69: if(tempLevel < 1)
  1459  0128  0840               	movf	setFanLevel@tempLevel,w
  1460  0129  1D03               	btfss	3,2
  1461  012A  292D               	goto	l2430
  1462                           
  1463                           ;main.c: 70: {
  1464                           ;main.c: 71: tempLevel = 1;
  1465  012B  01C0               	clrf	setFanLevel@tempLevel
  1466  012C  0AC0               	incf	setFanLevel@tempLevel,f
  1467  012D                     l2430:	
  1468                           
  1469                           ;main.c: 72: }
  1470                           ;main.c: 73: currentLevel = tempLevel;
  1471  012D  0840               	movf	setFanLevel@tempLevel,w
  1472  012E  00C2               	movwf	_currentLevel
  1473                           
  1474                           ;main.c: 75: CCPR1L = levelWidth*currentLevel;
  1475  012F  083E               	movf	setFanLevel@levelWidth,w
  1476  0130  00F2               	movwf	___bmul@multiplicand
  1477  0131  0842               	movf	_currentLevel,w
  1478  0132  223B               	fcall	___bmul
  1479  0133  0095               	movwf	21	;volatile
  1480                           
  1481                           ;main.c: 76: if(FAN_STATUS == 1)
  1482  0134  0B41               	decfsz	_FAN_STATUS,w
  1483  0135  0008               	return
  1484                           
  1485                           ;main.c: 77: {
  1486                           ;main.c: 78: setLedOn(currentLevel);
  1487  0136  0842               	movf	_currentLevel,w
  1488  0137  00F2               	movwf	setLedOn@ledIndex
  1489  0138  01F3               	clrf	setLedOn@ledIndex+1
  1490  0139  293A               	ljmp	l1992
  1491  013A                     __end_of_setFanLevel:	
  1492                           
  1493                           	psect	text10
  1494  023B                     __ptext10:	
  1495 ;; *************** function ___bmul *****************
  1496 ;; Defined at:
  1497 ;;		line 4 in file "C:\¹¤¾ß\µ¥Æ¬»úÑ§Ï°×ÊÁÏ\SC8P\SCMCU_IDE_V2.00.07\data\sources\common\Umul8.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;  multiplier      1    wreg     unsigned char 
  1500 ;;  multiplicand    1    2[COMMON] unsigned char 
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;  multiplier      1    4[COMMON] unsigned char 
  1503 ;;  product         1    3[COMMON] unsigned char 
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      unsigned char 
  1506 ;; Registers used:
  1507 ;;		wreg, status,2, status,0
  1508 ;; Tracked objects:
  1509 ;;		On entry : B00/0
  1510 ;;		On exit  : B00/0
  1511 ;;		Unchanged: B00/0
  1512 ;; Data sizes:     COMMON   BANK0   BANK1
  1513 ;;      Params:         1       0       0
  1514 ;;      Locals:         2       0       0
  1515 ;;      Temps:          0       0       0
  1516 ;;      Totals:         3       0       0
  1517 ;;Total ram usage:        3 bytes
  1518 ;; Hardware stack levels used:    1
  1519 ;; Hardware stack levels required when called:    1
  1520 ;; This function calls:
  1521 ;;		Nothing
  1522 ;; This function is called by:
  1523 ;;		_setFanLevel
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527                           
  1528                           ;psect for function ___bmul
  1529  023B                     ___bmul:	
  1530                           
  1531                           ;incstack = 0
  1532                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1533                           ;___bmul@multiplier stored from wreg
  1534  023B  00F4               	movwf	___bmul@multiplier
  1535  023C  01F3               	clrf	___bmul@product
  1536  023D                     l2006:	
  1537  023D  0872               	movf	___bmul@multiplicand,w
  1538  023E  1874               	btfsc	___bmul@multiplier,0
  1539  023F  07F3               	addwf	___bmul@product,f
  1540  0240  1003               	clrc
  1541  0241  0DF2               	rlf	___bmul@multiplicand,f
  1542  0242  1003               	clrc
  1543  0243  0CF4               	rrf	___bmul@multiplier,f
  1544  0244  0874               	movf	___bmul@multiplier,w
  1545  0245  1D03               	btfss	3,2
  1546  0246  2A3D               	goto	l2006
  1547  0247  0873               	movf	___bmul@product,w
  1548  0248  0008               	return
  1549  0249                     __end_of___bmul:	
  1550                           
  1551                           	psect	text11
  1552  0018                     __ptext11:	
  1553 ;; *************** function ___awdiv *****************
  1554 ;; Defined at:
  1555 ;;		line 6 in file "C:\¹¤¾ß\µ¥Æ¬»úÑ§Ï°×ÊÁÏ\SC8P\SCMCU_IDE_V2.00.07\data\sources\common\awdiv.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;  divisor         2    2[COMMON] int 
  1558 ;;  dividend        2    4[COMMON] int 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;  quotient        2    2[BANK0 ] int 
  1561 ;;  sign            1    1[BANK0 ] unsigned char 
  1562 ;;  counter         1    0[BANK0 ] unsigned char 
  1563 ;; Return value:  Size  Location     Type
  1564 ;;                  2    2[COMMON] int 
  1565 ;; Registers used:
  1566 ;;		wreg, status,2, status,0
  1567 ;; Tracked objects:
  1568 ;;		On entry : B00/100
  1569 ;;		On exit  : B00/0
  1570 ;;		Unchanged: 800/0
  1571 ;; Data sizes:     COMMON   BANK0   BANK1
  1572 ;;      Params:         4       0       0
  1573 ;;      Locals:         0       4       0
  1574 ;;      Temps:          0       0       0
  1575 ;;      Totals:         4       4       0
  1576 ;;Total ram usage:        8 bytes
  1577 ;; Hardware stack levels used:    1
  1578 ;; Hardware stack levels required when called:    1
  1579 ;; This function calls:
  1580 ;;		Nothing
  1581 ;; This function is called by:
  1582 ;;		_setFanLevel
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           
  1587                           ;psect for function ___awdiv
  1588  0018                     ___awdiv:	
  1589                           
  1590                           ;incstack = 0
  1591                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1592  0018  1283               	bcf	3,5	;RP0=0, select bank0
  1593  0019  01BA               	clrf	___awdiv@sign
  1594  001A  1FF3               	btfss	___awdiv@divisor+1,7
  1595  001B  2823               	goto	l2382
  1596  001C  09F2               	comf	___awdiv@divisor,f
  1597  001D  09F3               	comf	___awdiv@divisor+1,f
  1598  001E  0AF2               	incf	___awdiv@divisor,f
  1599  001F  1903               	skipnz
  1600  0020  0AF3               	incf	___awdiv@divisor+1,f
  1601  0021  01BA               	clrf	___awdiv@sign
  1602  0022  0ABA               	incf	___awdiv@sign,f
  1603  0023                     l2382:	
  1604  0023  1FF5               	btfss	___awdiv@dividend+1,7
  1605  0024  282C               	goto	l2388
  1606  0025  09F4               	comf	___awdiv@dividend,f
  1607  0026  09F5               	comf	___awdiv@dividend+1,f
  1608  0027  0AF4               	incf	___awdiv@dividend,f
  1609  0028  1903               	skipnz
  1610  0029  0AF5               	incf	___awdiv@dividend+1,f
  1611  002A  3001               	movlw	1
  1612  002B  06BA               	xorwf	___awdiv@sign,f
  1613  002C                     l2388:	
  1614  002C  01BB               	clrf	___awdiv@quotient
  1615  002D  01BC               	clrf	___awdiv@quotient+1
  1616  002E  0872               	movf	___awdiv@divisor,w
  1617  002F  0473               	iorwf	___awdiv@divisor+1,w
  1618  0030  1903               	btfsc	3,2
  1619  0031  2851               	goto	l2410
  1620  0032  01B9               	clrf	___awdiv@counter
  1621  0033                     L2:	
  1622  0033  0AB9               	incf	___awdiv@counter,f
  1623  0034  1BF3               	btfsc	___awdiv@divisor+1,7
  1624  0035  283A               	goto	l2398
  1625  0036  1003               	clrc
  1626  0037  0DF2               	rlf	___awdiv@divisor,f
  1627  0038  0DF3               	rlf	___awdiv@divisor+1,f
  1628  0039  2833               	goto	L2
  1629  003A                     l2398:	
  1630  003A  1003               	clrc
  1631  003B  0DBB               	rlf	___awdiv@quotient,f
  1632  003C  0DBC               	rlf	___awdiv@quotient+1,f
  1633  003D  0873               	movf	___awdiv@divisor+1,w
  1634  003E  0275               	subwf	___awdiv@dividend+1,w
  1635  003F  1D03               	skipz
  1636  0040  2843               	goto	u785
  1637  0041  0872               	movf	___awdiv@divisor,w
  1638  0042  0274               	subwf	___awdiv@dividend,w
  1639  0043                     u785:	
  1640  0043  1C03               	skipc
  1641  0044  284D               	goto	L3
  1642  0045  0872               	movf	___awdiv@divisor,w
  1643  0046  02F4               	subwf	___awdiv@dividend,f
  1644  0047  0873               	movf	___awdiv@divisor+1,w
  1645  0048  1C03               	skipc
  1646  0049  03F5               	decf	___awdiv@dividend+1,f
  1647  004A  02F5               	subwf	___awdiv@dividend+1,f
  1648  004B  143B               	bsf	___awdiv@quotient,0
  1649  004C  1003               	clrc
  1650  004D                     L3:	
  1651  004D  0CF3               	rrf	___awdiv@divisor+1,f
  1652  004E  0CF2               	rrf	___awdiv@divisor,f
  1653  004F  0BB9               	decfsz	___awdiv@counter,f
  1654  0050  283A               	goto	l2398
  1655  0051                     l2410:	
  1656  0051  083A               	movf	___awdiv@sign,w
  1657  0052  1903               	btfsc	3,2
  1658  0053  2859               	goto	l2414
  1659  0054  09BB               	comf	___awdiv@quotient,f
  1660  0055  09BC               	comf	___awdiv@quotient+1,f
  1661  0056  0ABB               	incf	___awdiv@quotient,f
  1662  0057  1903               	skipnz
  1663  0058  0ABC               	incf	___awdiv@quotient+1,f
  1664  0059                     l2414:	
  1665  0059  083C               	movf	___awdiv@quotient+1,w
  1666  005A  00F3               	movwf	?___awdiv+1
  1667  005B  083B               	movf	___awdiv@quotient,w
  1668  005C  00F2               	movwf	?___awdiv
  1669  005D  0008               	return
  1670  005E                     __end_of___awdiv:	
  1671                           
  1672                           	psect	text12
  1673  021B                     __ptext12:	
  1674 ;; *************** function _closeFan *****************
  1675 ;; Defined at:
  1676 ;;		line 84 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;		None
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;		None
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      void 
  1683 ;; Registers used:
  1684 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1685 ;; Tracked objects:
  1686 ;;		On entry : 300/0
  1687 ;;		On exit  : 300/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMMON   BANK0   BANK1
  1690 ;;      Params:         0       0       0
  1691 ;;      Locals:         0       0       0
  1692 ;;      Temps:          0       0       0
  1693 ;;      Totals:         0       0       0
  1694 ;;Total ram usage:        0 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; Hardware stack levels required when called:    2
  1697 ;; This function calls:
  1698 ;;		_Init_PWM
  1699 ;;		_setLedOn
  1700 ;; This function is called by:
  1701 ;;		_checkFan
  1702 ;;		_checkKeys
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           
  1707                           ;psect for function _closeFan
  1708  021B                     _closeFan:	
  1709  021B                     l2082:	
  1710                           ;incstack = 0
  1711                           ; Regs used in _closeFan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1712                           
  1713                           
  1714                           ;main.c: 86: Init_PWM();
  1715  021B  2249               	fcall	_Init_PWM
  1716                           
  1717                           ;main.c: 87: currentLevel = 2;
  1718  021C  3002               	movlw	2
  1719  021D  1283               	bcf	3,5	;RP0=0, select bank0
  1720  021E  00C2               	movwf	_currentLevel
  1721                           
  1722                           ;main.c: 88: setLedOn(5);
  1723  021F  3005               	movlw	5
  1724  0220  00F2               	movwf	setLedOn@ledIndex
  1725  0221  01F3               	clrf	setLedOn@ledIndex+1
  1726  0222  213A               	fcall	_setLedOn
  1727                           
  1728                           ;main.c: 89: PORTA|=(1<<0);
  1729  0223  1405               	bsf	5,0	;volatile
  1730                           
  1731                           ;main.c: 91: TRISC|=(1<<2);
  1732  0224  1683               	bsf	3,5	;RP0=1, select bank1
  1733  0225  1507               	bsf	7,2	;volatile
  1734                           
  1735                           ;main.c: 92: fan_check_time = 0;
  1736  0226  1283               	bcf	3,5	;RP0=0, select bank0
  1737  0227  01A0               	clrf	_fan_check_time
  1738  0228  01A1               	clrf	_fan_check_time+1
  1739                           
  1740                           ;main.c: 93: FAN_STATUS = 0;
  1741  0229  01C1               	clrf	_FAN_STATUS
  1742  022A  0008               	return
  1743  022B                     __end_of_closeFan:	
  1744                           
  1745                           	psect	text13
  1746  013A                     __ptext13:	
  1747 ;; *************** function _setLedOn *****************
  1748 ;; Defined at:
  1749 ;;		line 138 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;  ledIndex        2    2[COMMON] int 
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;		None
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  1    wreg      void 
  1756 ;; Registers used:
  1757 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1758 ;; Tracked objects:
  1759 ;;		On entry : 300/0
  1760 ;;		On exit  : 300/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMMON   BANK0   BANK1
  1763 ;;      Params:         2       0       0
  1764 ;;      Locals:         0       0       0
  1765 ;;      Temps:          0       0       0
  1766 ;;      Totals:         2       0       0
  1767 ;;Total ram usage:        2 bytes
  1768 ;; Hardware stack levels used:    1
  1769 ;; Hardware stack levels required when called:    1
  1770 ;; This function calls:
  1771 ;;		Nothing
  1772 ;; This function is called by:
  1773 ;;		_setFanLevel
  1774 ;;		_closeFan
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           
  1779                           ;psect for function _setLedOn
  1780  013A                     _setLedOn:	
  1781  013A                     l1992:	
  1782                           ;incstack = 0
  1783                           ; Regs used in _setLedOn: [wreg-fsr0h+status,2+status,0]
  1784                           
  1785                           
  1786                           ;main.c: 140: switch(ledIndex)
  1787  013A  294F               	goto	l1998
  1788  013B                     l599:	
  1789                           ;main.c: 141: {
  1790                           ;main.c: 142: case 1:
  1791                           
  1792                           
  1793                           ;main.c: 143: PORTB&=~(1<<7); PORTC|=(1<<0); PORTC&=~(1<<1);
  1794  013B  1386               	bcf	6,7	;volatile
  1795  013C  1407               	bsf	7,0	;volatile
  1796  013D  1087               	bcf	7,1	;volatile
  1797                           
  1798                           ;main.c: 144: break;
  1799  013E  0008               	return
  1800  013F                     l601:	
  1801                           ;main.c: 145: case 2:
  1802                           
  1803                           
  1804                           ;main.c: 146: PORTB|=(1<<7); PORTC&=~(1<<0); PORTC|=(1<<1);
  1805  013F  1786               	bsf	6,7	;volatile
  1806  0140  1007               	bcf	7,0	;volatile
  1807  0141  1487               	bsf	7,1	;volatile
  1808                           
  1809                           ;main.c: 147: break;
  1810  0142  0008               	return
  1811  0143                     l602:	
  1812                           ;main.c: 149: case 3:
  1813                           
  1814                           
  1815                           ;main.c: 150: PORTB|=(1<<7); PORTC&=~(1<<0); PORTC&=~(1<<1);
  1816  0143  1786               	bsf	6,7	;volatile
  1817  0144  1007               	bcf	7,0	;volatile
  1818  0145  1087               	bcf	7,1	;volatile
  1819                           
  1820                           ;main.c: 151: break;
  1821  0146  0008               	return
  1822  0147                     l603:	
  1823                           ;main.c: 152: case 4:
  1824                           
  1825                           
  1826                           ;main.c: 153: PORTB&=~(1<<7); PORTC|=(1<<0); PORTC|=(1<<1);
  1827  0147  1386               	bcf	6,7	;volatile
  1828  0148  1407               	bsf	7,0	;volatile
  1829  0149  1487               	bsf	7,1	;volatile
  1830                           
  1831                           ;main.c: 154: break;
  1832  014A  0008               	return
  1833  014B                     l604:	
  1834                           ;main.c: 155: default:
  1835                           
  1836                           
  1837                           ;main.c: 156: PORTB&=~(1<<7); PORTC&=~(1<<0); PORTC&=~(1<<1);
  1838  014B  1386               	bcf	6,7	;volatile
  1839  014C  1007               	bcf	7,0	;volatile
  1840  014D  1087               	bcf	7,1	;volatile
  1841                           
  1842                           ;main.c: 157: break;
  1843  014E  0008               	return
  1844  014F                     l1998:	
  1845                           
  1846                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1847                           ; Switch size 1, requested type "space"
  1848                           ; Number of cases is 1, Range of values is 0 to 0
  1849                           ; switch strategies available:
  1850                           ; Name         Instructions Cycles
  1851                           ; simple_byte            4     3 (average)
  1852                           ; direct_byte            7     6 (fixed)
  1853                           ; jumptable            260     6 (fixed)
  1854                           ;	Chosen strategy is simple_byte
  1855  014F  0873               	movf	setLedOn@ledIndex+1,w
  1856  0150  3A00               	xorlw	0	; case 0
  1857  0151  1903               	skipnz
  1858  0152  2954               	goto	l2588
  1859  0153  294B               	goto	l604
  1860  0154                     l2588:	
  1861                           
  1862                           ; Switch size 1, requested type "space"
  1863                           ; Number of cases is 4, Range of values is 1 to 4
  1864                           ; switch strategies available:
  1865                           ; Name         Instructions Cycles
  1866                           ; simple_byte           13     7 (average)
  1867                           ; direct_byte           13     9 (fixed)
  1868                           ; jumptable            263     9 (fixed)
  1869                           ;	Chosen strategy is simple_byte
  1870  0154  0872               	movf	setLedOn@ledIndex,w
  1871  0155  3A01               	xorlw	1	; case 1
  1872  0156  1903               	skipnz
  1873  0157  293B               	goto	l599
  1874  0158  3A03               	xorlw	3	; case 2
  1875  0159  1903               	skipnz
  1876  015A  293F               	goto	l601
  1877  015B  3A01               	xorlw	1	; case 3
  1878  015C  1903               	skipnz
  1879  015D  2943               	goto	l602
  1880  015E  3A07               	xorlw	7	; case 4
  1881  015F  1903               	skipnz
  1882  0160  2947               	goto	l603
  1883  0161  294B               	goto	l604
  1884  0162  0008               	return
  1885  0163                     __end_of_setLedOn:	
  1886                           
  1887                           	psect	text14
  1888  0249                     __ptext14:	
  1889 ;; *************** function _Init_PWM *****************
  1890 ;; Defined at:
  1891 ;;		line 45 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg, status,2
  1900 ;; Tracked objects:
  1901 ;;		On entry : 300/0
  1902 ;;		On exit  : 300/100
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMMON   BANK0   BANK1
  1905 ;;      Params:         0       0       0
  1906 ;;      Locals:         0       0       0
  1907 ;;      Temps:          0       0       0
  1908 ;;      Totals:         0       0       0
  1909 ;;Total ram usage:        0 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:    1
  1912 ;; This function calls:
  1913 ;;		Nothing
  1914 ;; This function is called by:
  1915 ;;		_closeFan
  1916 ;;		_main
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           
  1921                           ;psect for function _Init_PWM
  1922  0249                     _Init_PWM:	
  1923                           
  1924                           ;main.c: 47: CCP1CON = 0x0F;
  1925                           
  1926                           ;incstack = 0
  1927                           ; Regs used in _Init_PWM: [wreg+status,2]
  1928  0249  300F               	movlw	15
  1929  024A  0097               	movwf	23	;volatile
  1930                           
  1931                           ;main.c: 48: T2CON = 0;
  1932  024B  0192               	clrf	18	;volatile
  1933                           
  1934                           ;main.c: 49: PR2 = 199;
  1935  024C  30C7               	movlw	199
  1936  024D  1683               	bsf	3,5	;RP0=1, select bank1
  1937  024E  0092               	movwf	18	;volatile
  1938                           
  1939                           ;main.c: 51: CCPR1L = 0;
  1940  024F  1283               	bcf	3,5	;RP0=0, select bank0
  1941  0250  0195               	clrf	21	;volatile
  1942                           
  1943                           ;main.c: 52: TMR2IF = 0;
  1944  0251  108C               	bcf	12,1	;volatile
  1945                           
  1946                           ;main.c: 53: T2CON = 0;
  1947  0252  0192               	clrf	18	;volatile
  1948                           
  1949                           ;main.c: 55: TRISC&=~(1<<2);
  1950  0253  1683               	bsf	3,5	;RP0=1, select bank1
  1951  0254  1107               	bcf	7,2	;volatile
  1952  0255  0008               	return
  1953  0256                     __end_of_Init_PWM:	
  1954                           
  1955                           	psect	text15
  1956  0256                     __ptext15:	
  1957 ;; *************** function _Init_System *****************
  1958 ;; Defined at:
  1959 ;;		line 3 in file "C:\SCMCU WorkSpace\uf166fan\init.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;		None
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;		None
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2
  1968 ;; Tracked objects:
  1969 ;;		On entry : B00/0
  1970 ;;		On exit  : 300/100
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMMON   BANK0   BANK1
  1973 ;;      Params:         0       0       0
  1974 ;;      Locals:         0       0       0
  1975 ;;      Temps:          0       0       0
  1976 ;;      Totals:         0       0       0
  1977 ;;Total ram usage:        0 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    1
  1980 ;; This function calls:
  1981 ;;		Nothing
  1982 ;; This function is called by:
  1983 ;;		_main
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           
  1988                           ;psect for function _Init_System
  1989  0256                     _Init_System:	
  1990                           
  1991                           ;incstack = 0
  1992                           ; Regs used in _Init_System: [wreg+status,2]
  1993  0256  0000               	nop	;# 
  1994  0257  0064               	clrwdt	;# 
  1995                           
  1996                           ;init.c: 7: INTCON = 0;
  1997  0258  018B               	clrf	11	;volatile
  1998                           
  1999                           ;init.c: 8: OSCCON = 0X71;
  2000  0259  3071               	movlw	113
  2001  025A  1683               	bsf	3,5	;RP0=1, select bank1
  2002  025B  1303               	bcf	3,6	;RP1=0, select bank1
  2003  025C  008F               	movwf	15	;volatile
  2004                           
  2005                           ;init.c: 9: OPTION_REG = 0x00;
  2006  025D  0181               	clrf	1	;volatile
  2007                           
  2008                           ;init.c: 10: INTCON = 0x00;
  2009  025E  018B               	clrf	11	;volatile
  2010  025F  0008               	return
  2011  0260                     __end_of_Init_System:	
  2012                           
  2013                           	psect	text16
  2014  0268                     __ptext16:	
  2015 ;; *************** function _Init_Interupt *****************
  2016 ;; Defined at:
  2017 ;;		line 32 in file "C:\SCMCU WorkSpace\uf166fan\init.c"
  2018 ;; Parameters:    Size  Location     Type
  2019 ;;		None
  2020 ;; Auto vars:     Size  Location     Type
  2021 ;;		None
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  1    wreg      void 
  2024 ;; Registers used:
  2025 ;;		wreg, status,2
  2026 ;; Tracked objects:
  2027 ;;		On entry : 300/100
  2028 ;;		On exit  : 300/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMMON   BANK0   BANK1
  2031 ;;      Params:         0       0       0
  2032 ;;      Locals:         0       0       0
  2033 ;;      Temps:          0       0       0
  2034 ;;      Totals:         0       0       0
  2035 ;;Total ram usage:        0 bytes
  2036 ;; Hardware stack levels used:    1
  2037 ;; Hardware stack levels required when called:    1
  2038 ;; This function calls:
  2039 ;;		Nothing
  2040 ;; This function is called by:
  2041 ;;		_main
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           
  2046                           ;psect for function _Init_Interupt
  2047  0268                     _Init_Interupt:	
  2048                           
  2049                           ;init.c: 34: OPTION_REG = 0x00;
  2050                           
  2051                           ;incstack = 0
  2052                           ; Regs used in _Init_Interupt: [wreg+status,2]
  2053  0268  0181               	clrf	1	;volatile
  2054                           
  2055                           ;init.c: 35: TMR0 = 0;
  2056  0269  1283               	bcf	3,5	;RP0=0, select bank0
  2057  026A  0181               	clrf	1	;volatile
  2058                           
  2059                           ;init.c: 36: INTCON = 0xE0;
  2060  026B  30E0               	movlw	224
  2061  026C  008B               	movwf	11	;volatile
  2062  026D  0008               	return
  2063  026E                     __end_of_Init_Interupt:	
  2064                           
  2065                           	psect	text17
  2066  01F9                     __ptext17:	
  2067 ;; *************** function _Init_GPIO *****************
  2068 ;; Defined at:
  2069 ;;		line 17 in file "C:\SCMCU WorkSpace\uf166fan\init.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      void 
  2076 ;; Registers used:
  2077 ;;		wreg, status,2
  2078 ;; Tracked objects:
  2079 ;;		On entry : 300/100
  2080 ;;		On exit  : 300/100
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMMON   BANK0   BANK1
  2083 ;;      Params:         0       0       0
  2084 ;;      Locals:         0       0       0
  2085 ;;      Temps:          0       0       0
  2086 ;;      Totals:         0       0       0
  2087 ;;Total ram usage:        0 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:    1
  2090 ;; This function calls:
  2091 ;;		Nothing
  2092 ;; This function is called by:
  2093 ;;		_main
  2094 ;; This function uses a non-reentrant model
  2095 ;;
  2096                           
  2097                           
  2098                           ;psect for function _Init_GPIO
  2099  01F9                     _Init_GPIO:	
  2100                           
  2101                           ;init.c: 19: TRISA = 0;
  2102                           
  2103                           ;incstack = 0
  2104                           ; Regs used in _Init_GPIO: [wreg+status,2]
  2105  01F9  0185               	clrf	5	;volatile
  2106                           
  2107                           ;init.c: 20: TRISB = 0;
  2108  01FA  0186               	clrf	6	;volatile
  2109                           
  2110                           ;init.c: 21: TRISC = 0;
  2111  01FB  0187               	clrf	7	;volatile
  2112                           
  2113                           ;init.c: 22: WPUA = 0xFF;
  2114  01FC  30FF               	movlw	255
  2115  01FD  1703               	bsf	3,6	;RP1=1, select bank3
  2116  01FE  008E               	movwf	14	;volatile
  2117                           
  2118                           ;init.c: 23: WPUB = 0xFF;
  2119  01FF  1303               	bcf	3,6	;RP1=0, select bank1
  2120  0200  0095               	movwf	21	;volatile
  2121                           
  2122                           ;init.c: 24: WPUC = 0xFF;
  2123  0201  1703               	bsf	3,6	;RP1=1, select bank3
  2124  0202  008F               	movwf	15	;volatile
  2125                           
  2126                           ;init.c: 25: PORTA = 0xFF;
  2127  0203  1283               	bcf	3,5	;RP0=0, select bank0
  2128  0204  1303               	bcf	3,6	;RP1=0, select bank0
  2129  0205  0085               	movwf	5	;volatile
  2130                           
  2131                           ;init.c: 26: PORTB = 0xFF;
  2132  0206  0086               	movwf	6	;volatile
  2133                           
  2134                           ;init.c: 27: PORTC = 0xFF;
  2135  0207  0087               	movwf	7	;volatile
  2136                           
  2137                           ;init.c: 28: IOCB = 0x00;
  2138  0208  1683               	bsf	3,5	;RP0=1, select bank1
  2139  0209  0196               	clrf	22	;volatile
  2140  020A  0008               	return
  2141  020B                     __end_of_Init_GPIO:	
  2142                           
  2143                           	psect	text18
  2144  022B                     __ptext18:	
  2145 ;; *************** function _Timer0_Isr *****************
  2146 ;; Defined at:
  2147 ;;		line 273 in file "C:\SCMCU WorkSpace\uf166fan\main.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;		None
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;		None
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  1    wreg      void 
  2154 ;; Registers used:
  2155 ;;		wreg, status,2, status,0
  2156 ;; Tracked objects:
  2157 ;;		On entry : 0/0
  2158 ;;		On exit  : 0/0
  2159 ;;		Unchanged: 0/0
  2160 ;; Data sizes:     COMMON   BANK0   BANK1
  2161 ;;      Params:         0       0       0
  2162 ;;      Locals:         0       0       0
  2163 ;;      Temps:          2       0       0
  2164 ;;      Totals:         2       0       0
  2165 ;;Total ram usage:        2 bytes
  2166 ;; Hardware stack levels used:    1
  2167 ;; This function calls:
  2168 ;;		Nothing
  2169 ;; This function is called by:
  2170 ;;		Interrupt level 1
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173                           
  2174                           
  2175                           ;psect for function _Timer0_Isr
  2176  022B                     _Timer0_Isr:	
  2177                           
  2178                           ;main.c: 275: if(T0IF)
  2179  022B  1D0B               	btfss	11,2	;volatile
  2180  022C  2A34               	goto	i1l635
  2181                           
  2182                           ;main.c: 276: {
  2183                           ;main.c: 278: TMR0 += 155;
  2184  022D  309B               	movlw	155
  2185  022E  1283               	bcf	3,5	;RP0=0, select bank0
  2186  022F  1303               	bcf	3,6	;RP1=0, select bank0
  2187  0230  0781               	addwf	1,f	;volatile
  2188                           
  2189                           ;main.c: 281: T0IF = 0;
  2190  0231  110B               	bcf	11,2	;volatile
  2191                           
  2192                           ;main.c: 282: time0Flag =1;
  2193  0232  01FA               	clrf	_time0Flag
  2194  0233  0AFA               	incf	_time0Flag,f
  2195  0234                     i1l635:	
  2196  0234  0871               	movf	??_Timer0_Isr+1,w
  2197  0235  008A               	movwf	10
  2198  0236  0E70               	swapf	??_Timer0_Isr^(0+-128),w
  2199  0237  0083               	movwf	3
  2200  0238  0EFE               	swapf	126,f
  2201  0239  0E7E               	swapf	126,w
  2202  023A  0009               	retfie
  2203  023B                     __end_of_Timer0_Isr:	
  2204  007E                     btemp	set	126	;btemp
  2205  007E                     wtemp0	set	126
  2206                           
  2207                           	psect	intentry
  2208  0004                     __pintentry:	
  2209                           ;incstack = 0
  2210                           ; Regs used in _Timer0_Isr: [wreg+status,2+status,0]
  2211                           
  2212  0004                     interrupt_function:	
  2213  007E                     saved_w	set	btemp
  2214  0004  00FE               	movwf	btemp
  2215  0005  0E03               	swapf	3,w
  2216  0006  00F0               	movwf	??_Timer0_Isr
  2217  0007  080A               	movf	10,w
  2218  0008  00F1               	movwf	??_Timer0_Isr+1
  2219  0009  2A2B               	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80      8      35
    BANK1            80      0       0

Pointer List with Targets:

    resetKey@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 

    key_read@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 

    key_driver@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 

    sacnKeyInput@key	PTR struct Keys size(1) Largest target is 7
		 -> key3(BANK0[7]), key2(BANK0[7]), key1(BANK0[7]), 


Critical Paths under _main in COMMON

    _scanKeys->_sacnKeyInput
    _checkKeys->_key_read
    _key_read->_key_driver
    _setFanLevel->___awdiv
    _closeFan->_setLedOn

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    _checkKeys->_setFanLevel
    _checkFan->_setFanLevel
    _setFanLevel->___awdiv

Critical Paths under _Timer0_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer0_Isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3375
                          _Init_GPIO
                      _Init_Interupt
                           _Init_PWM
                        _Init_System
                          _checkKeys
                     _checkUsbStatus
                           _resetKey
                           _scanKeys
 ---------------------------------------------------------------------------------
 (1) _scanKeys                                             0     0      0     169
                       _sacnKeyInput
 ---------------------------------------------------------------------------------
 (2) _sacnKeyInput                                         3     3      0     169
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetKey                                             1     1      0     169
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _checkUsbStatus                                       1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _checkKeys                                            0     0      0    3037
                           _checkFan
                           _closeFan
                           _key_read
                        _setFanLevel
 ---------------------------------------------------------------------------------
 (2) _key_read                                             3     3      0     689
                                              5 COMMON     3     3      0
                         _key_driver
 ---------------------------------------------------------------------------------
 (3) _key_driver                                           3     3      0     361
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _checkFan                                             1     1      0    1174
                                              6 COMMON     1     1      0
                           _closeFan
                        _setFanLevel
 ---------------------------------------------------------------------------------
 (2) _setFanLevel                                          4     4      0    1046
                                              4 BANK0      4     4      0
                            ___awdiv
                             ___bmul
                           _setLedOn
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     145
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     606
                                              2 COMMON     4     0      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _closeFan                                             0     0      0     128
                           _Init_PWM
                           _setLedOn
 ---------------------------------------------------------------------------------
 (3) _setLedOn                                             2     0      2     128
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _Init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Interupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Timer0_Isr                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_GPIO
   _Init_Interupt
   _Init_PWM
   _Init_System
   _checkKeys
     _checkFan
       _closeFan
         _Init_PWM
         _setLedOn
       _setFanLevel
         ___awdiv
         ___bmul
         _setLedOn
     _closeFan
       _Init_PWM
       _setLedOn
     _key_read
       _key_driver
     _setFanLevel
       ___awdiv
       ___bmul
       _setLedOn
   _checkUsbStatus
   _resetKey
   _scanKeys
     _sacnKeyInput

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      8      23       5       43.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2E       8        0.0%
ABS                  0      0      2E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 29 03:07:11 2020

                      pc 0002           ___bmul@product 0073                       _TO 001C  
           ___awdiv@sign 003A                       fsr 0004                      l601 013F  
                    l602 0143                      l603 0147                      l604 014B  
                    l615 019D                      l571 01E2                      l599 013B  
                    _PR2 0092                      u594 01B8                      u595 01B6  
                    u845 016E                      u785 0043                      fsr0 0004  
                    indf 0000                     S2586 026E                     l2100 0066  
                   l2006 023D                     l2112 0078                     l2104 006E  
                   l2130 0091                     l2124 008B                     l2132 009E  
                   l2204 01D8                     l2126 008D                     l2118 007D  
                   l2082 021B                     l2410 0051                     l2172 00DD  
                   l2414 0059                     l2430 012D                     l2184 00F1  
                   l2176 00E9                     l2192 0100                     l2426 0128  
                   l2450 0178                     l2178 00EC                     l2194 010B  
                   l2452 017A                     l2188 00FB                     l2532 00CE  
                   l2524 00C2                     l2516 00BC                     l2382 0023  
                   l2438 0163                     l2388 002C                     l2484 01A4  
                   l2468 0193                     l2476 0196                     l2398 003A  
                   l2588 0154                     l1992 013A                     l1998 014F  
                   _T0IF 005A                     _IOCB 0096                     _TMR0 0001  
 __end_of_checkUsbStatus 01E4                     _WPUA 018E                     _WPUB 0095  
                   _WPUC 018F                     _key1 0032                     _key2 002B  
                   _key3 0024                     _main 00A0                     btemp 007E  
                   start 000A        ___bmul@multiplier 0074            ??_Init_System 0072  
          _Init_Interupt 0268                    ?_main 0070          __end_of___awdiv 005E  
        ___awdiv@divisor 0072                    _T2CON 0012       key_driver@key_read 0073  
                  i1l635 0234          ___awdiv@counter 0039                    _PORTA 0005  
                  _PORTB 0006                    _PORTC 0007                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    pclath 000A  
        ?_checkUsbStatus 0070                    status 0003                    wtemp0 007E  
           ?_setFanLevel 0070          __initialization 000B             __end_of_main 00D8  
       __end_of_Init_PWM 0256           ?_Init_Interupt 0070           _fan_check_time 0020  
                 ??_main 0078      __end_of_Init_System 0260                   _CCPR1L 0015  
       ___awdiv@dividend 0074                   _INTCON 000B            ?_sacnKeyInput 0070  
     __size_of_Init_GPIO 0012                   _OSCCON 008F                   _TMR2IF 0061  
       __end_of_checkFan 0189               _Timer0_Isr 022B         __end_of_closeFan 022B  
                 ___bmul 023B         setLedOn@ledIndex 0072                ??___awdiv 0076  
            key_read@key 0077         __end_of_key_read 010D         __end_of_scanKeys 01F9  
       ___awdiv@quotient 003B         __end_of_setLedOn 0163         __end_of_resetKey 021B  
                 saved_w 007E           ??_sacnKeyInput 0072  __end_of__initialization 0016  
    ___bmul@multiplicand 0072           __pcstackCOMMON 0070          ??_Init_Interupt 0072  
           __pidataBANK0 0000       __size_of_checkKeys 0022              _Init_System 0256  
      __end_of_Init_GPIO 020B               __pbssBANK0 0020                ?_Init_PWM 0070  
            ?_Timer0_Isr 0070               __pmaintext 00A0                  ?___bmul 0072  
   __size_of_setFanLevel 002D               __pintentry 0004                  _CCP1CON 0017  
              ?_checkFan 0070     key_driver@key_return 0072         ??_checkUsbStatus 0072  
              ?_closeFan 0070        __end_of_checkKeys 01AB               ??_Init_PWM 0072  
              ?_key_read 0070                ?_scanKeys 0070                ?_setLedOn 0072  
              ?_resetKey 0070              resetKey@key 0072          __size_of___bmul 000E  
                ___awdiv 0018               _key_driver 005E     __end_of_sacnKeyInput 01C8  
                __ptext1 01E4                  __ptext2 01AB                  __ptext3 020B  
                __ptext4 01C8                  __ptext5 0189                  __ptext6 00D8  
                __ptext7 005E                  __ptext8 0163                  __ptext9 010D  
             ??_checkFan 0076    setFanLevel@levelWidth 003E      __size_of_Timer0_Isr 0010  
             ??_closeFan 0074                  clrloop0 0261     end_of_initialization 0016  
             ??_key_read 0075               ??_scanKeys 0075               ??_setLedOn 0074  
     key_read@key_return 0075               ??_resetKey 0072          sacnKeyInput@key 0074  
            ?_key_driver 0070           __end_of___bmul 0249             ?_Init_System 0070  
       setFanLevel@level 003D      start_initialization 000B                _Init_GPIO 01F9  
      __size_of_Init_PWM 000D             ??_Timer0_Isr 0070    __size_of_sacnKeyInput 001D  
               ??___bmul 0073              __pdataBANK0 0041    __end_of_Init_Interupt 026E  
       key_read@key_read 0076              __pbssCOMMON 0078               ?_Init_GPIO 0070  
              ___latbits 0000            __pcstackBANK0 0039        __size_of_checkFan 0026  
     __end_of_Timer0_Isr 023B      __size_of_key_driver 0042        __size_of_closeFan 0010  
           _sacnKeyInput 01AB             _currentLevel 0042                _checkKeys 0189  
      __size_of_key_read 0035            ??_setFanLevel 0076        __size_of_scanKeys 0015  
      __size_of_setLedOn 0029                 ?___awdiv 0072        __size_of_resetKey 0010  
              __pswtext1 026E                _count10Ms 0022                _countTime 0078  
      interrupt_function 0004               ?_checkKeys 0070                _time0Flag 007A  
              clear_ram0 0260     setFanLevel@tempLevel 0040      __end_of_setFanLevel 013A  
   __size_of_Init_System 000A              ??_Init_GPIO 0072                 _Init_PWM 0249  
__size_of_checkUsbStatus 001C             ??_key_driver 0072         __size_of___awdiv 0046  
          key_driver@key 0074                 _checkFan 0163               _FAN_STATUS 0041  
               __ptext10 023B                 __ptext11 0018                 __ptext12 021B  
               __ptext13 013A                 __ptext14 0249                 __ptext15 0256  
               __ptext16 0268                 __ptext17 01F9                 __ptext18 022B  
               _closeFan 021B       __end_of_key_driver 00A0                 _key_read 00D8  
          __size_of_main 0038              ??_checkKeys 0078                 _scanKeys 01E4  
               _setLedOn 013A                 _resetKey 020B              _setFanLevel 010D  
               intlevel1 0000               _OPTION_REG 0081   __size_of_Init_Interupt 0006  
         _checkUsbStatus 01C8  
