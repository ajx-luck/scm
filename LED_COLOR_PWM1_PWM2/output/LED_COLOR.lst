

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat May 02 16:17:00 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1152A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	pa_nodes0,global,class=CODE,delta=2
    19                           	dabs	1,0x4E,2
    20  0000                     
    21                           ; Version 1.45
    22                           ; Generated 16/11/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F887 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     
    56                           	psect	nvBANK0
    57  0027                     __pnvBANK0:	
    58  0027                     _FirstFlag:	
    59  0027                     	ds	1
    60  0014                     _PWM_PRD	set	20
    61  000F                     _TMR0PRD	set	15
    62  000E                     _IOCB	set	14
    63  000D                     _WPUB	set	13
    64  0009                     _INTCON	set	9
    65  0008                     _OSCCON	set	8
    66  0007                     _OPTION_REG	set	7
    67  0006                     _TRISB	set	6
    68  0005                     _PORTB	set	5
    69  0001                     _TMR0	set	1
    70  0090                     _PWMS0	set	144
    71  0091                     _PWMS1	set	145
    72  0092                     _PWMS2	set	146
    73  0094                     _PWMCK0	set	148
    74  0095                     _PWMCK1	set	149
    75  0096                     _PWMPRD8	set	150
    76  0097                     _PWMPRD9	set	151
    77  004A                     _T0IF	set	74
    78                           
    79                           	psect	cinit
    80  000B                     start_initialization:	
    81                           ; #config settings
    82                           
    83  000B                     __initialization:	
    84                           
    85                           ; Clear objects allocated to COMMON
    86  000B  01C9               	clrf	__pbssCOMMON& (0+127)
    87  000C  01CA               	clrf	(__pbssCOMMON+1)& (0+127)
    88  000D  01CB               	clrf	(__pbssCOMMON+2)& (0+127)
    89                           
    90                           ; Clear objects allocated to BANK0
    91  000E  01A0               	clrf	__pbssBANK0& (0+127)
    92  000F  01A1               	clrf	(__pbssBANK0+1)& (0+127)
    93  0010  01A2               	clrf	(__pbssBANK0+2)& (0+127)
    94  0011  01A3               	clrf	(__pbssBANK0+3)& (0+127)
    95  0012  01A4               	clrf	(__pbssBANK0+4)& (0+127)
    96  0013                     end_of_initialization:	
    97                           ;End of C runtime variable initialization code
    98                           
    99  0013                     __end_of__initialization:	
   100  0013  0183               	clrf	3
   101  0014  2815               	ljmp	_main	;jump to C main() function
   102                           
   103                           	psect	bssCOMMON
   104  0049                     __pbssCOMMON:	
   105  0049                     _count1:	
   106  0049                     	ds	2
   107  004B                     _timeout1MSFlag:	
   108  004B                     	ds	1
   109                           
   110                           	psect	bssBANK0
   111  0020                     __pbssBANK0:	
   112  0020                     _count3:	
   113  0020                     	ds	2
   114  0022                     _count2:	
   115  0022                     	ds	2
   116  0024                     _timeoutFlag:	
   117  0024                     	ds	1
   118                           
   119                           	psect	cstackCOMMON
   120  0040                     __pcstackCOMMON:	
   121  0040                     ?_Init_System:	
   122  0040                     ?_resetTimeCount:	
   123                           ; 1 bytes @ 0x0
   124                           
   125  0040                     ?_main:	
   126                           ; 1 bytes @ 0x0
   127                           
   128  0040                     ?_Timer0_Isr:	
   129                           ; 1 bytes @ 0x0
   130                           
   131  0040                     ??_Timer0_Isr:	
   132                           ; 1 bytes @ 0x0
   133                           
   134                           
   135                           ; 1 bytes @ 0x0
   136  0040                     	ds	2
   137  0042                     ??_Init_System:	
   138  0042                     ??_resetTimeCount:	
   139                           ; 1 bytes @ 0x2
   140                           
   141  0042                     ?___lwdiv:	
   142                           ; 1 bytes @ 0x2
   143                           
   144  0042                     ___lwdiv@divisor:	
   145                           ; 2 bytes @ 0x2
   146                           
   147                           
   148                           ; 2 bytes @ 0x2
   149  0042                     	ds	2
   150  0044                     ___lwdiv@dividend:	
   151                           
   152                           ; 2 bytes @ 0x4
   153  0044                     	ds	2
   154  0046                     ??___lwdiv:	
   155  0046                     ___lwdiv@quotient:	
   156                           ; 1 bytes @ 0x6
   157                           
   158                           
   159                           ; 2 bytes @ 0x6
   160  0046                     	ds	2
   161  0048                     ___lwdiv@counter:	
   162                           
   163                           ; 1 bytes @ 0x8
   164  0048                     	ds	1
   165  0049                     ??_setPWM1:	
   166  0049                     ??_setPWM2:	
   167                           ; 1 bytes @ 0x9
   168                           
   169  0049                     ??_main:	
   170                           ; 1 bytes @ 0x9
   171                           
   172                           
   173                           	psect	cstackBANK0
   174  0025                     __pcstackBANK0:	
   175                           ; 1 bytes @ 0x9
   176                           
   177  0025                     ?_setPWM1:	
   178  0025                     ?_setPWM2:	
   179                           ; 1 bytes @ 0x0
   180                           
   181  0025                     setPWM1@width:	
   182                           ; 1 bytes @ 0x0
   183                           
   184  0025                     setPWM2@width:	
   185                           ; 2 bytes @ 0x0
   186                           
   187                           
   188                           ; 2 bytes @ 0x0
   189  0025                     	ds	2
   190                           
   191                           	psect	maintext
   192  0015                     __pmaintext:	
   193 ;;
   194 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   195 ;;
   196 ;; *************** function _main *****************
   197 ;; Defined at:
   198 ;;		line 108 in file "C:\SCMCU WorkSpace\LED_COLOR_PWM1_PWM2\led.c"
   199 ;; Parameters:    Size  Location     Type
   200 ;;		None
   201 ;; Auto vars:     Size  Location     Type
   202 ;;		None
   203 ;; Return value:  Size  Location     Type
   204 ;;                  1    wreg      void 
   205 ;; Registers used:
   206 ;;		wreg, status,2, status,0, pclath, cstack
   207 ;; Tracked objects:
   208 ;;		On entry : B00/0
   209 ;;		On exit  : 0/0
   210 ;;		Unchanged: 0/0
   211 ;; Data sizes:     COMMON   BANK0
   212 ;;      Params:         0       0
   213 ;;      Locals:         0       0
   214 ;;      Temps:          0       0
   215 ;;      Totals:         0       0
   216 ;;Total ram usage:        0 bytes
   217 ;; Hardware stack levels required when called:    3
   218 ;; This function calls:
   219 ;;		_Init_System
   220 ;;		_resetTimeCount
   221 ;;		_setPWM1
   222 ;;		_setPWM2
   223 ;; This function is called by:
   224 ;;		Startup code after reset
   225 ;; This function uses a non-reentrant model
   226 ;;
   227                           
   228                           
   229                           ;psect for function _main
   230  0015                     _main:	
   231                           
   232                           ;led.c: 110: Init_System();
   233                           
   234                           ;incstack = 0
   235                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   236  0015  2116               	fcall	_Init_System
   237                           
   238                           ;led.c: 111: INTCON = 0xE0;
   239  0016  30E0               	movlw	224
   240  0017  0089               	movwf	9	;volatile
   241  0018                     l1009:	
   242                           
   243                           ;led.c: 113: {
   244                           ;led.c: 114: if(timeoutFlag)
   245  0018  0824               	movf	_timeoutFlag,w
   246  0019  1903               	btfsc	3,2
   247  001A  2818               	goto	l1009
   248                           
   249                           ;led.c: 115: {
   250                           ;led.c: 116: timeoutFlag = 0;
   251  001B  01A4               	clrf	_timeoutFlag
   252  001C  0064               	clrwdt	;# 
   253                           
   254                           ;led.c: 119: resetTimeCount();
   255  001D  20AE               	fcall	_resetTimeCount
   256                           
   257                           ;led.c: 121: if(timeout1MSFlag == 0)
   258  001E  084B               	movf	_timeout1MSFlag,w
   259  001F  1D03               	btfss	3,2
   260  0020  2882               	goto	l1043
   261                           
   262                           ;led.c: 122: {
   263                           ;led.c: 124: if(count1 <275)
   264  0021  3001               	movlw	1
   265  0022  024A               	subwf	_count1+1,w
   266  0023  3013               	movlw	19
   267  0024  1903               	skipnz
   268  0025  0249               	subwf	_count1,w
   269  0026  1803               	skipnc
   270  0027  282D               	goto	l1021
   271                           
   272                           ;led.c: 125: {
   273                           ;led.c: 126: setPWM1(count1);
   274  0028  084A               	movf	_count1+1,w
   275  0029  00A6               	movwf	setPWM1@width+1
   276  002A  0849               	movf	_count1,w
   277  002B  00A5               	movwf	setPWM1@width
   278  002C  20F6               	fcall	_setPWM1
   279  002D                     l1021:	
   280                           
   281                           ;led.c: 127: }
   282                           ;led.c: 129: if(count1 >=275 && count1<=550)
   283  002D  3001               	movlw	1
   284  002E  024A               	subwf	_count1+1,w
   285  002F  3013               	movlw	19
   286  0030  1903               	skipnz
   287  0031  0249               	subwf	_count1,w
   288  0032  1C03               	skipc
   289  0033  2846               	goto	l1027
   290  0034  3002               	movlw	2
   291  0035  024A               	subwf	_count1+1,w
   292  0036  3027               	movlw	39
   293  0037  1903               	skipnz
   294  0038  0249               	subwf	_count1,w
   295  0039  1803               	skipnc
   296  003A  2846               	goto	l1027
   297                           
   298                           ;led.c: 130: {
   299                           ;led.c: 131: setPWM1(550 - count1);
   300  003B  3026               	movlw	38
   301  003C  00A5               	movwf	setPWM1@width
   302  003D  3002               	movlw	2
   303  003E  00A6               	movwf	setPWM1@width+1
   304  003F  0849               	movf	_count1,w
   305  0040  02A5               	subwf	setPWM1@width,f
   306  0041  084A               	movf	_count1+1,w
   307  0042  1C03               	skipc
   308  0043  03A6               	decf	setPWM1@width+1,f
   309  0044  02A6               	subwf	setPWM1@width+1,f
   310  0045  20F6               	fcall	_setPWM1
   311  0046                     l1027:	
   312                           
   313                           ;led.c: 132: }
   314                           ;led.c: 135: if(FirstFlag)
   315  0046  0827               	movf	_FirstFlag,w
   316  0047  1903               	btfsc	3,2
   317  0048  2859               	goto	l1033
   318                           
   319                           ;led.c: 136: {
   320                           ;led.c: 137: if(count2 >=450)
   321  0049  3001               	movlw	1
   322  004A  0223               	subwf	_count2+1,w
   323  004B  30C2               	movlw	194
   324  004C  1903               	skipnz
   325  004D  0222               	subwf	_count2,w
   326  004E  1C03               	skipc
   327  004F  285D               	goto	l326
   328                           
   329                           ;led.c: 138: {
   330                           ;led.c: 139: count3 = count2-450;
   331  0050  0822               	movf	_count2,w
   332  0051  3E3E               	addlw	62
   333  0052  00A0               	movwf	_count3
   334  0053  0823               	movf	_count2+1,w
   335  0054  1803               	skipnc
   336  0055  3E01               	addlw	1
   337  0056  3EFE               	addlw	254
   338  0057  00A1               	movwf	_count3+1
   339  0058  285D               	goto	l326
   340  0059                     l1033:	
   341                           
   342                           ;led.c: 142: {
   343                           ;led.c: 143: count3 = count2;
   344  0059  0823               	movf	_count2+1,w
   345  005A  00A1               	movwf	_count3+1
   346  005B  0822               	movf	_count2,w
   347  005C  00A0               	movwf	_count3
   348  005D                     l326:	
   349                           
   350                           ;led.c: 144: }
   351                           ;led.c: 146: if(count3 <275)
   352  005D  3001               	movlw	1
   353  005E  0221               	subwf	_count3+1,w
   354  005F  3013               	movlw	19
   355  0060  1903               	skipnz
   356  0061  0220               	subwf	_count3,w
   357  0062  1803               	skipnc
   358  0063  2869               	goto	l1037
   359                           
   360                           ;led.c: 147: {
   361                           ;led.c: 148: setPWM2(count3);
   362  0064  0821               	movf	_count3+1,w
   363  0065  00A6               	movwf	setPWM2@width+1
   364  0066  0820               	movf	_count3,w
   365  0067  00A5               	movwf	setPWM2@width
   366  0068  20D6               	fcall	_setPWM2
   367  0069                     l1037:	
   368                           
   369                           ;led.c: 149: }
   370                           ;led.c: 151: if(count3 >=275 && count3<=550)
   371  0069  3001               	movlw	1
   372  006A  0221               	subwf	_count3+1,w
   373  006B  3013               	movlw	19
   374  006C  1903               	skipnz
   375  006D  0220               	subwf	_count3,w
   376  006E  1C03               	skipc
   377  006F  2882               	goto	l1043
   378  0070  3002               	movlw	2
   379  0071  0221               	subwf	_count3+1,w
   380  0072  3027               	movlw	39
   381  0073  1903               	skipnz
   382  0074  0220               	subwf	_count3,w
   383  0075  1803               	skipnc
   384  0076  2882               	goto	l1043
   385                           
   386                           ;led.c: 152: {
   387                           ;led.c: 153: setPWM2(550 - count3);
   388  0077  3026               	movlw	38
   389  0078  00A5               	movwf	setPWM2@width
   390  0079  3002               	movlw	2
   391  007A  00A6               	movwf	setPWM2@width+1
   392  007B  0820               	movf	_count3,w
   393  007C  02A5               	subwf	setPWM2@width,f
   394  007D  0821               	movf	_count3+1,w
   395  007E  1C03               	skipc
   396  007F  03A6               	decf	setPWM2@width+1,f
   397  0080  02A6               	subwf	setPWM2@width+1,f
   398  0081  20D6               	fcall	_setPWM2
   399  0082                     l1043:	
   400                           
   401                           ;led.c: 154: }
   402                           ;led.c: 156: }
   403                           ;led.c: 160: timeout1MSFlag++;
   404  0082  0ACB               	incf	_timeout1MSFlag,f
   405  0083  2818               	goto	l1009
   406  0084                     __end_of_main:	
   407                           
   408                           	psect	text1
   409  00D6                     __ptext1:	
   410 ;; *************** function _setPWM2 *****************
   411 ;; Defined at:
   412 ;;		line 64 in file "C:\SCMCU WorkSpace\LED_COLOR_PWM1_PWM2\led.c"
   413 ;; Parameters:    Size  Location     Type
   414 ;;  width           2    0[BANK0 ] unsigned int 
   415 ;; Auto vars:     Size  Location     Type
   416 ;;		None
   417 ;; Return value:  Size  Location     Type
   418 ;;                  1    wreg      void 
   419 ;; Registers used:
   420 ;;		wreg, status,2, status,0, pclath, cstack
   421 ;; Tracked objects:
   422 ;;		On entry : 0/0
   423 ;;		On exit  : 0/0
   424 ;;		Unchanged: 0/0
   425 ;; Data sizes:     COMMON   BANK0
   426 ;;      Params:         0       2
   427 ;;      Locals:         0       0
   428 ;;      Temps:          0       0
   429 ;;      Totals:         0       2
   430 ;;Total ram usage:        2 bytes
   431 ;; Hardware stack levels used:    1
   432 ;; Hardware stack levels required when called:    2
   433 ;; This function calls:
   434 ;;		___lwdiv
   435 ;; This function is called by:
   436 ;;		_main
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440                           
   441                           ;psect for function _setPWM2
   442  00D6                     _setPWM2:	
   443                           
   444                           ;led.c: 67: PWMS0 = 0;
   445                           
   446                           ;incstack = 0
   447                           ; Regs used in _setPWM2: [wreg+status,2+status,0+pclath+cstack]
   448  00D6  1012               	bcf	18,0	;volatile
   449                           
   450                           ;led.c: 68: PWMS1 = 1;
   451  00D7  1492               	bsf	18,1	;volatile
   452                           
   453                           ;led.c: 69: PWMS2 = 0;
   454  00D8  1112               	bcf	18,2	;volatile
   455                           
   456                           ;led.c: 70: PWMPRD9 = 0;
   457  00D9  1392               	bcf	18,7	;volatile
   458                           
   459                           ;led.c: 71: if(width > 255)
   460  00DA  3001               	movlw	1
   461  00DB  0226               	subwf	setPWM2@width+1,w
   462  00DC  3000               	movlw	0
   463  00DD  1903               	skipnz
   464  00DE  0225               	subwf	setPWM2@width,w
   465  00DF  1C03               	skipc
   466  00E0  28F2               	goto	l305
   467                           
   468                           ;led.c: 72: {
   469                           ;led.c: 73: PWMPRD8 = width/255;
   470  00E1  30FF               	movlw	255
   471  00E2  00C2               	movwf	___lwdiv@divisor
   472  00E3  01C3               	clrf	___lwdiv@divisor+1
   473  00E4  0826               	movf	setPWM2@width+1,w
   474  00E5  00C5               	movwf	___lwdiv@dividend+1
   475  00E6  0825               	movf	setPWM2@width,w
   476  00E7  00C4               	movwf	___lwdiv@dividend
   477  00E8  2084               	fcall	___lwdiv
   478  00E9  1C42               	btfss	?___lwdiv,0
   479  00EA  28ED               	goto	u570
   480  00EB  1712               	bsf	18,6	;volatile
   481  00EC  28EE               	goto	l1001
   482  00ED                     u570:	
   483  00ED  1312               	bcf	18,6	;volatile
   484  00EE                     l1001:	
   485                           
   486                           ;led.c: 74: PWM_PRD = width-255;
   487  00EE  0825               	movf	setPWM2@width,w
   488  00EF  3E01               	addlw	1
   489  00F0  0094               	movwf	20	;volatile
   490                           
   491                           ;led.c: 75: }else
   492  00F1  0008               	return
   493  00F2                     l305:	
   494                           
   495                           ;led.c: 76: {
   496                           ;led.c: 77: PWMPRD8 = 0;
   497  00F2  1312               	bcf	18,6	;volatile
   498                           
   499                           ;led.c: 78: PWM_PRD = width;
   500  00F3  0825               	movf	setPWM2@width,w
   501  00F4  0094               	movwf	20	;volatile
   502  00F5  0008               	return
   503  00F6                     __end_of_setPWM2:	
   504                           
   505                           	psect	text2
   506  00F6                     __ptext2:	
   507 ;; *************** function _setPWM1 *****************
   508 ;; Defined at:
   509 ;;		line 46 in file "C:\SCMCU WorkSpace\LED_COLOR_PWM1_PWM2\led.c"
   510 ;; Parameters:    Size  Location     Type
   511 ;;  width           2    0[BANK0 ] unsigned int 
   512 ;; Auto vars:     Size  Location     Type
   513 ;;		None
   514 ;; Return value:  Size  Location     Type
   515 ;;                  1    wreg      void 
   516 ;; Registers used:
   517 ;;		wreg, status,2, status,0, pclath, cstack
   518 ;; Tracked objects:
   519 ;;		On entry : 0/0
   520 ;;		On exit  : 0/0
   521 ;;		Unchanged: 0/0
   522 ;; Data sizes:     COMMON   BANK0
   523 ;;      Params:         0       2
   524 ;;      Locals:         0       0
   525 ;;      Temps:          0       0
   526 ;;      Totals:         0       2
   527 ;;Total ram usage:        2 bytes
   528 ;; Hardware stack levels used:    1
   529 ;; Hardware stack levels required when called:    2
   530 ;; This function calls:
   531 ;;		___lwdiv
   532 ;; This function is called by:
   533 ;;		_main
   534 ;; This function uses a non-reentrant model
   535 ;;
   536                           
   537                           
   538                           ;psect for function _setPWM1
   539  00F6                     _setPWM1:	
   540                           
   541                           ;led.c: 49: PWMS0 = 1;
   542                           
   543                           ;incstack = 0
   544                           ; Regs used in _setPWM1: [wreg+status,2+status,0+pclath+cstack]
   545  00F6  1412               	bsf	18,0	;volatile
   546                           
   547                           ;led.c: 50: PWMS1 = 0;
   548  00F7  1092               	bcf	18,1	;volatile
   549                           
   550                           ;led.c: 51: PWMS2 = 0;
   551  00F8  1112               	bcf	18,2	;volatile
   552                           
   553                           ;led.c: 52: PWMPRD9 = 0;
   554  00F9  1392               	bcf	18,7	;volatile
   555                           
   556                           ;led.c: 53: if(width > 255)
   557  00FA  3001               	movlw	1
   558  00FB  0226               	subwf	setPWM1@width+1,w
   559  00FC  3000               	movlw	0
   560  00FD  1903               	skipnz
   561  00FE  0225               	subwf	setPWM1@width,w
   562  00FF  1C03               	skipc
   563  0100  2912               	goto	l300
   564                           
   565                           ;led.c: 54: {
   566                           ;led.c: 55: PWMPRD8 = width/255;
   567  0101  30FF               	movlw	255
   568  0102  00C2               	movwf	___lwdiv@divisor
   569  0103  01C3               	clrf	___lwdiv@divisor+1
   570  0104  0826               	movf	setPWM1@width+1,w
   571  0105  00C5               	movwf	___lwdiv@dividend+1
   572  0106  0825               	movf	setPWM1@width,w
   573  0107  00C4               	movwf	___lwdiv@dividend
   574  0108  2084               	fcall	___lwdiv
   575  0109  1C42               	btfss	?___lwdiv,0
   576  010A  290D               	goto	u540
   577  010B  1712               	bsf	18,6	;volatile
   578  010C  290E               	goto	l991
   579  010D                     u540:	
   580  010D  1312               	bcf	18,6	;volatile
   581  010E                     l991:	
   582                           
   583                           ;led.c: 56: PWM_PRD = width-255;
   584  010E  0825               	movf	setPWM1@width,w
   585  010F  3E01               	addlw	1
   586  0110  0094               	movwf	20	;volatile
   587                           
   588                           ;led.c: 57: }else
   589  0111  0008               	return
   590  0112                     l300:	
   591                           
   592                           ;led.c: 58: {
   593                           ;led.c: 59: PWMPRD8 = 0;
   594  0112  1312               	bcf	18,6	;volatile
   595                           
   596                           ;led.c: 60: PWM_PRD = width;
   597  0113  0825               	movf	setPWM1@width,w
   598  0114  0094               	movwf	20	;volatile
   599  0115  0008               	return
   600  0116                     __end_of_setPWM1:	
   601                           
   602                           	psect	text3
   603  0084                     __ptext3:	
   604 ;; *************** function ___lwdiv *****************
   605 ;; Defined at:
   606 ;;		line 6 in file "C:\¹¤¾ß\µ¥Æ¬»úÑ§Ï°×ÊÁÏ\SC8P\SCMCU_IDE_V2.00.07\data\sources\common\lwdiv.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;  divisor         2    2[COMMON] unsigned int 
   609 ;;  dividend        2    4[COMMON] unsigned int 
   610 ;; Auto vars:     Size  Location     Type
   611 ;;  quotient        2    6[COMMON] unsigned int 
   612 ;;  counter         1    8[COMMON] unsigned char 
   613 ;; Return value:  Size  Location     Type
   614 ;;                  2    2[COMMON] unsigned int 
   615 ;; Registers used:
   616 ;;		wreg, status,2, status,0
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMMON   BANK0
   622 ;;      Params:         4       0
   623 ;;      Locals:         3       0
   624 ;;      Temps:          0       0
   625 ;;      Totals:         7       0
   626 ;;Total ram usage:        7 bytes
   627 ;; Hardware stack levels used:    1
   628 ;; Hardware stack levels required when called:    1
   629 ;; This function calls:
   630 ;;		Nothing
   631 ;; This function is called by:
   632 ;;		_setPWM1
   633 ;;		_setPWM2
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637                           
   638                           ;psect for function ___lwdiv
   639  0084                     ___lwdiv:	
   640                           
   641                           ;incstack = 0
   642                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
   643  0084  01C6               	clrf	___lwdiv@quotient
   644  0085  01C7               	clrf	___lwdiv@quotient+1
   645  0086  0842               	movf	___lwdiv@divisor,w
   646  0087  0443               	iorwf	___lwdiv@divisor+1,w
   647  0088  1903               	btfsc	3,2
   648  0089  28A9               	goto	l871
   649  008A  01C8               	clrf	___lwdiv@counter
   650  008B                     L1:	
   651  008B  0AC8               	incf	___lwdiv@counter,f
   652  008C  1BC3               	btfsc	___lwdiv@divisor+1,7
   653  008D  2892               	goto	l859
   654  008E  1003               	clrc
   655  008F  0DC2               	rlf	___lwdiv@divisor,f
   656  0090  0DC3               	rlf	___lwdiv@divisor+1,f
   657  0091  288B               	goto	L1
   658  0092                     l859:	
   659  0092  1003               	clrc
   660  0093  0DC6               	rlf	___lwdiv@quotient,f
   661  0094  0DC7               	rlf	___lwdiv@quotient+1,f
   662  0095  0843               	movf	___lwdiv@divisor+1,w
   663  0096  0245               	subwf	___lwdiv@dividend+1,w
   664  0097  1D03               	skipz
   665  0098  289B               	goto	u295
   666  0099  0842               	movf	___lwdiv@divisor,w
   667  009A  0244               	subwf	___lwdiv@dividend,w
   668  009B                     u295:	
   669  009B  1C03               	skipc
   670  009C  28A5               	goto	L2
   671  009D  0842               	movf	___lwdiv@divisor,w
   672  009E  02C4               	subwf	___lwdiv@dividend,f
   673  009F  0843               	movf	___lwdiv@divisor+1,w
   674  00A0  1C03               	skipc
   675  00A1  03C5               	decf	___lwdiv@dividend+1,f
   676  00A2  02C5               	subwf	___lwdiv@dividend+1,f
   677  00A3  1446               	bsf	___lwdiv@quotient,0
   678  00A4  1003               	clrc
   679  00A5                     L2:	
   680  00A5  0CC3               	rrf	___lwdiv@divisor+1,f
   681  00A6  0CC2               	rrf	___lwdiv@divisor,f
   682  00A7  0BC8               	decfsz	___lwdiv@counter,f
   683  00A8  2892               	goto	l859
   684  00A9                     l871:	
   685  00A9  0847               	movf	___lwdiv@quotient+1,w
   686  00AA  00C3               	movwf	?___lwdiv+1
   687  00AB  0846               	movf	___lwdiv@quotient,w
   688  00AC  00C2               	movwf	?___lwdiv
   689  00AD  0008               	return
   690  00AE                     __end_of___lwdiv:	
   691                           
   692                           	psect	text4
   693  00AE                     __ptext4:	
   694 ;; *************** function _resetTimeCount *****************
   695 ;; Defined at:
   696 ;;		line 83 in file "C:\SCMCU WorkSpace\LED_COLOR_PWM1_PWM2\led.c"
   697 ;; Parameters:    Size  Location     Type
   698 ;;		None
   699 ;; Auto vars:     Size  Location     Type
   700 ;;		None
   701 ;; Return value:  Size  Location     Type
   702 ;;                  1    wreg      void 
   703 ;; Registers used:
   704 ;;		wreg, status,2, status,0
   705 ;; Tracked objects:
   706 ;;		On entry : 0/0
   707 ;;		On exit  : 0/0
   708 ;;		Unchanged: 0/0
   709 ;; Data sizes:     COMMON   BANK0
   710 ;;      Params:         0       0
   711 ;;      Locals:         0       0
   712 ;;      Temps:          0       0
   713 ;;      Totals:         0       0
   714 ;;Total ram usage:        0 bytes
   715 ;; Hardware stack levels used:    1
   716 ;; Hardware stack levels required when called:    1
   717 ;; This function calls:
   718 ;;		Nothing
   719 ;; This function is called by:
   720 ;;		_main
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           
   725                           ;psect for function _resetTimeCount
   726  00AE                     _resetTimeCount:	
   727                           
   728                           ;led.c: 85: if(count2 == 1350)
   729                           
   730                           ;incstack = 0
   731                           ; Regs used in _resetTimeCount: [wreg+status,2+status,0]
   732  00AE  3046               	movlw	70
   733  00AF  0622               	xorwf	_count2,w
   734  00B0  3005               	movlw	5
   735  00B1  1903               	skipnz
   736  00B2  0623               	xorwf	_count2+1,w
   737  00B3  1903               	btfsc	3,2
   738                           
   739                           ;led.c: 86: {
   740                           ;led.c: 87: FirstFlag = 0;
   741  00B4  01A7               	clrf	_FirstFlag
   742                           
   743                           ;led.c: 88: }
   744                           ;led.c: 90: if(count1 == 950)
   745  00B5  30B6               	movlw	182
   746  00B6  0649               	xorwf	_count1,w
   747  00B7  3003               	movlw	3
   748  00B8  1903               	skipnz
   749  00B9  064A               	xorwf	_count1+1,w
   750  00BA  1D03               	btfss	3,2
   751  00BB  28BE               	goto	l927
   752                           
   753                           ;led.c: 91: {
   754                           ;led.c: 92: count1 = 0;
   755  00BC  01C9               	clrf	_count1
   756  00BD  01CA               	clrf	_count1+1
   757  00BE                     l927:	
   758                           
   759                           ;led.c: 93: }
   760                           ;led.c: 94: if(FirstFlag == 0 && count2 == 950)
   761  00BE  0827               	movf	_FirstFlag,w
   762  00BF  1D03               	btfss	3,2
   763  00C0  28CA               	goto	l933
   764  00C1  30B6               	movlw	182
   765  00C2  0622               	xorwf	_count2,w
   766  00C3  3003               	movlw	3
   767  00C4  1903               	skipnz
   768  00C5  0623               	xorwf	_count2+1,w
   769  00C6  1D03               	btfss	3,2
   770  00C7  28CA               	goto	l933
   771                           
   772                           ;led.c: 95: {
   773                           ;led.c: 96: count2 = 0;
   774  00C8  01A2               	clrf	_count2
   775  00C9  01A3               	clrf	_count2+1
   776  00CA                     l933:	
   777                           
   778                           ;led.c: 97: }
   779                           ;led.c: 98: if(timeout1MSFlag == 100)
   780  00CA  3064               	movlw	100
   781  00CB  064B               	xorwf	_timeout1MSFlag,w
   782  00CC  1D03               	btfss	3,2
   783  00CD  0008               	return
   784                           
   785                           ;led.c: 99: {
   786                           ;led.c: 100: timeout1MSFlag = 0;
   787  00CE  01CB               	clrf	_timeout1MSFlag
   788                           
   789                           ;led.c: 101: count1++;
   790  00CF  0AC9               	incf	_count1,f
   791  00D0  1903               	skipnz
   792  00D1  0ACA               	incf	_count1+1,f
   793                           
   794                           ;led.c: 102: count2++;
   795  00D2  0AA2               	incf	_count2,f
   796  00D3  1903               	skipnz
   797  00D4  0AA3               	incf	_count2+1,f
   798  00D5  0008               	return
   799  00D6                     __end_of_resetTimeCount:	
   800                           
   801                           	psect	text5
   802  0116                     __ptext5:	
   803 ;; *************** function _Init_System *****************
   804 ;; Defined at:
   805 ;;		line 17 in file "C:\SCMCU WorkSpace\LED_COLOR_PWM1_PWM2\led.c"
   806 ;; Parameters:    Size  Location     Type
   807 ;;		None
   808 ;; Auto vars:     Size  Location     Type
   809 ;;		None
   810 ;; Return value:  Size  Location     Type
   811 ;;                  1    wreg      void 
   812 ;; Registers used:
   813 ;;		wreg, status,2
   814 ;; Tracked objects:
   815 ;;		On entry : B00/0
   816 ;;		On exit  : 0/0
   817 ;;		Unchanged: 0/0
   818 ;; Data sizes:     COMMON   BANK0
   819 ;;      Params:         0       0
   820 ;;      Locals:         0       0
   821 ;;      Temps:          0       0
   822 ;;      Totals:         0       0
   823 ;;Total ram usage:        0 bytes
   824 ;; Hardware stack levels used:    1
   825 ;; Hardware stack levels required when called:    1
   826 ;; This function calls:
   827 ;;		Nothing
   828 ;; This function is called by:
   829 ;;		_main
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           
   834                           ;psect for function _Init_System
   835  0116                     _Init_System:	
   836                           
   837                           ;incstack = 0
   838                           ; Regs used in _Init_System: [wreg+status,2]
   839  0116  0000               	nop	;# 
   840  0117  0064               	clrwdt	;# 
   841                           
   842                           ;led.c: 21: INTCON = 0;
   843  0118  0189               	clrf	9	;volatile
   844                           
   845                           ;led.c: 22: OSCCON = 0X71;
   846  0119  3071               	movlw	113
   847  011A  0088               	movwf	8	;volatile
   848                           
   849                           ;led.c: 23: WPUB = 0xFF;
   850  011B  30FF               	movlw	255
   851  011C  008D               	movwf	13	;volatile
   852                           
   853                           ;led.c: 24: OPTION_REG = 0xD0;
   854  011D  30D0               	movlw	208
   855  011E  0087               	movwf	7	;volatile
   856                           
   857                           ;led.c: 25: TMR0 = 0;
   858  011F  0181               	clrf	1	;volatile
   859                           
   860                           ;led.c: 26: TMR0PRD = 100;
   861  0120  3064               	movlw	100
   862  0121  008F               	movwf	15	;volatile
   863                           
   864                           ;led.c: 29: TRISB = 0B00111001;
   865  0122  3039               	movlw	57
   866  0123  0086               	movwf	6	;volatile
   867                           
   868                           ;led.c: 30: PORTB = 0B00111001;
   869  0124  0085               	movwf	5	;volatile
   870                           
   871                           ;led.c: 31: IOCB = 0xFF;
   872  0125  30FF               	movlw	255
   873  0126  008E               	movwf	14	;volatile
   874                           
   875                           ;led.c: 34: PWMCK0 = 1;
   876  0127  1612               	bsf	18,4	;volatile
   877                           
   878                           ;led.c: 35: PWMCK1 = 0;
   879  0128  1292               	bcf	18,5	;volatile
   880                           
   881                           ;led.c: 36: PWMPRD8 = 0;
   882  0129  1312               	bcf	18,6	;volatile
   883                           
   884                           ;led.c: 37: PWMPRD9 = 1;
   885  012A  1792               	bsf	18,7	;volatile
   886                           
   887                           ;led.c: 38: PWM_PRD = 13;
   888  012B  300D               	movlw	13
   889  012C  0094               	movwf	20	;volatile
   890                           
   891                           ;led.c: 41: width1=width2=0;
   892  012D  01A0               	clrf	_count3
   893  012E  01A1               	clrf	_count3+1
   894  012F  01A2               	clrf	_count2
   895  0130  01A3               	clrf	_count2+1
   896  0131  01C9               	clrf	_count1
   897  0132  01CA               	clrf	_count1+1
   898                           
   899                           ;led.c: 42: FirstFlag = 1;
   900  0133  01A7               	clrf	_FirstFlag
   901  0134  0AA7               	incf	_FirstFlag,f
   902  0135  0008               	return
   903  0136                     __end_of_Init_System:	
   904                           
   905                           	psect	text6
   906  0136                     __ptext6:	
   907 ;; *************** function _Timer0_Isr *****************
   908 ;; Defined at:
   909 ;;		line 178 in file "C:\SCMCU WorkSpace\LED_COLOR_PWM1_PWM2\led.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;		None
   912 ;; Auto vars:     Size  Location     Type
   913 ;;		None
   914 ;; Return value:  Size  Location     Type
   915 ;;                  1    wreg      void 
   916 ;; Registers used:
   917 ;;		None
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMMON   BANK0
   923 ;;      Params:         0       0
   924 ;;      Locals:         0       0
   925 ;;      Temps:          2       0
   926 ;;      Totals:         2       0
   927 ;;Total ram usage:        2 bytes
   928 ;; Hardware stack levels used:    1
   929 ;; This function calls:
   930 ;;		Nothing
   931 ;; This function is called by:
   932 ;;		Interrupt level 1
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           
   937                           ;psect for function _Timer0_Isr
   938  0136                     _Timer0_Isr:	
   939                           
   940                           ;led.c: 180: if(T0IF)
   941  0136  1D09               	btfss	9,2	;volatile
   942  0137  293B               	goto	i1l337
   943                           
   944                           ;led.c: 181: {
   945                           ;led.c: 186: T0IF = 0;
   946  0138  1109               	bcf	9,2	;volatile
   947                           
   948                           ;led.c: 187: timeoutFlag = 1;
   949  0139  01A4               	clrf	_timeoutFlag
   950  013A  0AA4               	incf	_timeoutFlag,f
   951  013B                     i1l337:	
   952  013B  0841               	movf	??_Timer0_Isr+1,w
   953  013C  008A               	movwf	10
   954  013D  0E40               	swapf	??_Timer0_Isr^(0+-128),w
   955  013E  0083               	movwf	3
   956  013F  0ECE               	swapf	78,f
   957  0140  0E4E               	swapf	78,w
   958  0141  0009               	retfie
   959  0142                     __end_of_Timer0_Isr:	
   960  004E                     btemp	set	78	;btemp
   961  004E                     wtemp0	set	78
   962                           
   963                           	psect	intentry
   964  0004                     __pintentry:	
   965                           ;incstack = 0
   966                           ; Regs used in _Timer0_Isr: []
   967                           
   968  0004                     interrupt_function:	
   969  004E                     saved_w	set	btemp
   970  0004  00CE               	movwf	btemp
   971  0005  0E03               	swapf	3,w
   972  0006  00C0               	movwf	??_Timer0_Isr
   973  0007  080A               	movf	10,w
   974  0008  00C1               	movwf	??_Timer0_Isr+1
   975  0009  2936               	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         8
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      12
    BANK0            32      2       8

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _setPWM2->___lwdiv
    _setPWM1->___lwdiv

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_setPWM1
    _main->_setPWM2

Critical Paths under _Timer0_Isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1194
                        _Init_System
                     _resetTimeCount
                            _setPWM1
                            _setPWM2
 ---------------------------------------------------------------------------------
 (1) _setPWM2                                              2     0      2     597
                                              0 BANK0      2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (1) _setPWM1                                              2     0      2     597
                                              0 BANK0      2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     334
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _resetTimeCount                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Timer0_Isr                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_System
   _resetTimeCount
   _setPWM1
     ___lwdiv
   _setPWM2
     ___lwdiv

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               20      2       8       3       25.0%
ABS                  0      0      14       4        0.0%
BITBANK0            20      0       0       5        0.0%
DATA                 0      0      14       6        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat May 02 16:17:00 2020

                    l300 0112                      l305 00F2                      l326 005D  
                    l933 00CA                      l927 00BE                      l871 00A9  
                    l859 0092                      l991 010E                      u540 010D  
                    u295 009B                      u570 00ED                     l1001 00EE  
                   l1021 002D                     l1033 0059                     l1009 0018  
                   l1027 0046                     l1043 0082                     l1037 0069  
                   _T0IF 004A                     _IOCB 000E                     _TMR0 0001  
                   _WPUB 000D                     _main 0015                     btemp 004E  
                   start 000A            ??_Init_System 0042                    ?_main 0040  
        __end_of___lwdiv 00AE                    i1l337 013B                    _PORTB 0005  
                  _PWMS0 0090                    _PWMS1 0091                    _PWMS2 0092  
                  _TRISB 0006          __end_of_setPWM1 0116          __end_of_setPWM2 00F6  
                  pclath 000A                    status 0003                    wtemp0 004E  
        __initialization 000B             __end_of_main 0084                   ??_main 0049  
    __end_of_Init_System 0136                   _INTCON 0009                   _OSCCON 0008  
                 _PWMCK0 0094                   _PWMCK1 0095  __size_of_resetTimeCount 0028  
             _Timer0_Isr 0136                ??___lwdiv 0046                   _count1 0049  
                 _count2 0022                   _count3 0020                ??_setPWM1 0049  
              ??_setPWM2 0049                   saved_w 004E  __end_of__initialization 0013  
         __pcstackCOMMON 0040              _Init_System 0116               __pbssBANK0 0020  
            ?_Timer0_Isr 0040               __pmaintext 0015               __pintentry 0004  
                _TMR0PRD 000F                  _PWMPRD8 0096                  _PWMPRD9 0097  
                _PWM_PRD 0014           _resetTimeCount 00AE                  ___lwdiv 0084  
                __ptext1 00D6                  __ptext2 00F6                  __ptext3 0084  
                __ptext4 00AE                  __ptext5 0116                  __ptext6 0136  
                _setPWM1 00F6                  _setPWM2 00D6      __size_of_Timer0_Isr 000C  
   end_of_initialization 0013   __end_of_resetTimeCount 00D6          ?_resetTimeCount 0040  
           setPWM1@width 0025             setPWM2@width 0025             ?_Init_System 0040  
              _FirstFlag 0027      start_initialization 000B             ??_Timer0_Isr 0040  
            __pbssCOMMON 0049                ___latbits 0000            __pcstackBANK0 0025  
     __end_of_Timer0_Isr 0142                __pnvBANK0 0027         ___lwdiv@dividend 0044  
               ?___lwdiv 0042                 ?_setPWM1 0025                 ?_setPWM2 0025  
       ___lwdiv@quotient 0046        interrupt_function 0004     __size_of_Init_System 0020  
       ??_resetTimeCount 0042           _timeout1MSFlag 004B         __size_of___lwdiv 002A  
       __size_of_setPWM1 0020         __size_of_setPWM2 0020          ___lwdiv@divisor 0042  
        ___lwdiv@counter 0048            __size_of_main 006F                 intlevel1 0000  
             _OPTION_REG 0007              _timeoutFlag 0024  
