

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue May 06 17:54:11 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F6790
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text20,local,class=CODE,merge=1,delta=2
    16                           	psect	text24,local,class=CODE,merge=1,delta=2
    17                           	psect	text37,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	pa_nodes0,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.45
    23                           ; Generated 16/11/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F887 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	strings
    58  0800                     __pstrings:	
    59  0800                     stringtab:	
    60  0800                     __stringtab:	
    61  0800                     stringcode:	
    62                           ;	String table - string pointers are 1 byte each
    63                           
    64  0800                     stringdir:	
    65  0800  3008               	movlw	high stringdir
    66  0801  008A               	movwf	10
    67  0802  0804               	movf	4,w
    68  0803  0A84               	incf	4,f
    69  0804  0782               	addwf	2,f
    70  0805                     __stringbase:	
    71  0805  3400               	retlw	0
    72  0806                     __end_of__stringtab:	
    73  0806                     _numArray:	
    74  0806  343F               	retlw	63
    75  0807  3406               	retlw	6
    76  0808  345B               	retlw	91
    77  0809  344F               	retlw	79
    78  080A  3466               	retlw	102
    79  080B  346D               	retlw	109
    80  080C  347D               	retlw	125
    81  080D  3407               	retlw	7
    82  080E  347F               	retlw	127
    83  080F  346F               	retlw	111
    84  0810  3471               	retlw	113
    85  0811  3479               	retlw	121
    86  0812  3450               	retlw	80
    87  0813  3473               	retlw	115
    88  0814                     __end_of_numArray:	
    89  0814                     _Table_KeyFalg:	
    90  0814  3401               	retlw	1
    91  0815  3402               	retlw	2
    92  0816  3404               	retlw	4
    93  0817  3408               	retlw	8
    94  0818  3410               	retlw	16
    95  0819  3420               	retlw	32
    96  081A  3440               	retlw	64
    97  081B  3480               	retlw	128
    98  081C                     __end_of_Table_KeyFalg:	
    99  081C                     _Table_KeyDown:	
   100  081C  340A               	retlw	10
   101  081D  340A               	retlw	10
   102  081E  340A               	retlw	10
   103  081F                     __end_of_Table_KeyDown:	
   104  081F                     _Table_KeyCap:	
   105  081F  343A               	retlw	58
   106  0820  341A               	retlw	26
   107  0821  3402               	retlw	2
   108  0822                     __end_of_Table_KeyCap:	
   109  0822                     _Table_KeyChannel:	
   110  0822  3458               	retlw	88
   111  0823  3459               	retlw	89
   112  0824  345A               	retlw	90
   113  0825                     __end_of_Table_KeyChannel:	
   114  001D                     _PWMCON2	set	29
   115  001C                     _PWMD01H	set	28
   116  001A                     _PWMD3L	set	26
   117  0017                     _PWMD0L	set	23
   118  0016                     _PWMTH	set	22
   119  0015                     _PWMTL	set	21
   120  0014                     _PWMCON1	set	20
   121  0013                     _PWMCON0	set	19
   122  0012                     _T2CON	set	18
   123  000E                     _PWMD23H	set	14
   124  000D                     _PIE1	set	13
   125  000C                     _PIR1	set	12
   126  000B                     _INTCON	set	11
   127  0008                     _WPUB	set	8
   128  0006                     _PORTB	set	6
   129  0005                     _PORTA	set	5
   130  0001                     _TMR0	set	1
   131  0061                     _TMR2IF	set	97
   132  0058                     _RBIF	set	88
   133  0036                     _RB6	set	54
   134  0037                     _RB7	set	55
   135  009F                     _ADRESH	set	159
   136  009E                     _ADRESL	set	158
   137  009D                     _ADCON0	set	157
   138  009C                     _ADCON1	set	156
   139  0097                     _KEYCON2	set	151
   140  0095                     _KEYDATAH	set	149
   141  0094                     _KEYDATAL	set	148
   142  0093                     _KEYCON1	set	147
   143  0092                     _KEYCON0	set	146
   144  0091                     _PR2	set	145
   145  0088                     _OSCCON	set	136
   146  0086                     _TRISB	set	134
   147  0085                     _TRISA	set	133
   148  0081                     _OPTION_REG	set	129
   149  04E8                     _ADON	set	1256
   150  04E9                     _GODONE	set	1257
   151  04E6                     _CHS4	set	1254
   152  0441                     _SWDTEN	set	1089
   153  0436                     _TRISB6	set	1078
   154  0115                     _WPUC	set	277
   155  0112                     _ANSEL2	set	274
   156  0111                     _ANSEL1	set	273
   157  0110                     _ANSEL0	set	272
   158  0108                     _PIE2	set	264
   159  0107                     _PIR2	set	263
   160  0841                     _RACIE	set	2113
   161  0839                     _RACIF	set	2105
   162  083A                     _RCCIF	set	2106
   163  018D                     _PWMIOS1	set	397
   164  018C                     _PWMIOS0	set	396
   165  0188                     _IOCA	set	392
   166  0186                     _TRISC	set	390
   167  0185                     _PORTC	set	389
   168  0C28                     _RC0	set	3112
   169                           
   170                           	psect	cinit
   171  000D                     start_initialization:	
   172                           ; #config settings
   173                           
   174  000D                     __initialization:	
   175  000D  3020               	movlw	low __pbssBANK0
   176                           
   177                           ; Clear objects allocated to BITCOMMON
   178  000E  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   179                           
   180                           ; Clear objects allocated to COMMON
   181  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   182  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   183                           
   184                           ; Clear objects allocated to BANK0
   185  0011  1383               	bcf	3,7	;select IRP bank0
   186  0012  0084               	movwf	4
   187  0013  3065               	movlw	low (__pbssBANK0+69)
   188  0014  118A  27F0  118A   	fcall	clear_ram0
   189                           
   190                           ; Clear objects allocated to BANK1
   191  0017  30A0               	movlw	low __pbssBANK1
   192  0018  0084               	movwf	4
   193  0019  30BB               	movlw	low (__pbssBANK1+27)
   194  001A  118A  27F0         	fcall	clear_ram0
   195  001C                     end_of_initialization:	
   196                           ;End of C runtime variable initialization code
   197                           
   198  001C                     __end_of__initialization:	
   199  001C  0183               	clrf	3
   200  001D  158A  2D8E         	ljmp	_main	;jump to C main() function
   201                           
   202                           	psect	bitbssCOMMON
   203  03C8                     __pbitbssCOMMON:	
   204  03C8                     _b_ksleep:	
   205  03C8                     	ds	1
   206  03C9                     _b_kerr:	
   207  03C9                     	ds	1
   208  03CA                     _b_kclr:	
   209  03CA                     	ds	1
   210  03CB                     _b_kover1:	
   211  03CB                     	ds	1
   212  03CC                     _b_kover:	
   213  03CC                     	ds	1
   214  03CD                     _B_OnOff:	
   215  03CD                     	ds	1
   216  03CE                     _B_MainLoop:	
   217  03CE                     	ds	1
   218                           
   219                           	psect	bssCOMMON
   220  007A                     __pbssCOMMON:	
   221  007A                     _zeroStep:	
   222  007A                     	ds	1
   223  007B                     _workStep:	
   224  007B                     	ds	1
   225                           
   226                           	psect	bssBANK0
   227  0020                     __pbssBANK0:	
   228  0020                     _KeyOldValue1:	
   229  0020                     	ds	6
   230  0026                     CheckValidTime@validtime:	
   231  0026                     	ds	2
   232  0028                     _KeyData:	
   233  0028                     	ds	2
   234  002A                     _KeyOldData:	
   235  002A                     	ds	2
   236  002C                     _tempResult:	
   237  002C                     	ds	2
   238  002E                     _sleepTime:	
   239  002E                     	ds	2
   240  0030                     _count900s:	
   241  0030                     	ds	2
   242  0032                     _chrgFullTime:	
   243  0032                     	ds	2
   244  0034                     _chrgResult:	
   245  0034                     	ds	2
   246  0036                     _batResult:	
   247  0036                     	ds	2
   248  0038                     _ledLightTime:	
   249  0038                     	ds	2
   250  003A                     _keyCount3:	
   251  003A                     	ds	2
   252  003C                     _keyCount2:	
   253  003C                     	ds	2
   254  003E                     _keyCount1:	
   255  003E                     	ds	2
   256  0040                     _firstTime:	
   257  0040                     	ds	2
   258  0042                     _KeyFlag:	
   259  0042                     	ds	2
   260  0044                     TurnKeyFlags@KeyNoTimes:	
   261  0044                     	ds	1
   262  0045                     TurnKeyFlags@KeyHaveTimes:	
   263  0045                     	ds	1
   264  0046                     CheckKeyOldValue@counter:	
   265  0046                     	ds	1
   266  0047                     _KeyMaxSub:	
   267  0047                     	ds	1
   268  0048                     _KeyCounter:	
   269  0048                     	ds	1
   270  0049                     _preZero:	
   271  0049                     	ds	1
   272  004A                     _keyCancelTime:	
   273  004A                     	ds	1
   274  004B                     _key3ProtectTime:	
   275  004B                     	ds	1
   276  004C                     _key2ProtectTime:	
   277  004C                     	ds	1
   278  004D                     _key1ProtectTime:	
   279  004D                     	ds	1
   280  004E                     _chrgBatStepTime:	
   281  004E                     	ds	1
   282  004F                     _checkTempTime:	
   283  004F                     	ds	1
   284  0050                     _lowBatTime:	
   285  0050                     	ds	1
   286  0051                     _lowBatFlag:	
   287  0051                     	ds	1
   288  0052                     _chrgLockFlag:	
   289  0052                     	ds	1
   290  0053                     _count15s:	
   291  0053                     	ds	1
   292  0054                     _subTime:	
   293  0054                     	ds	1
   294  0055                     _addTime:	
   295  0055                     	ds	1
   296  0056                     _chrgDuty:	
   297  0056                     	ds	1
   298  0057                     _chrgFullFlag:	
   299  0057                     	ds	1
   300  0058                     _count50:	
   301  0058                     	ds	1
   302  0059                     _preBatValue:	
   303  0059                     	ds	1
   304  005A                     _batValue:	
   305  005A                     	ds	1
   306  005B                     _chrgFlag:	
   307  005B                     	ds	1
   308  005C                     _count1s:	
   309  005C                     	ds	1
   310  005D                     _count64ms:	
   311  005D                     	ds	1
   312  005E                     _showLed2:	
   313  005E                     	ds	1
   314  005F                     _showLed1:	
   315  005F                     	ds	1
   316  0060                     _showGeWei:	
   317  0060                     	ds	1
   318  0061                     _showShiWei:	
   319  0061                     	ds	1
   320  0062                     _showFlag:	
   321  0062                     	ds	1
   322  0063                     _longKeyFalg:	
   323  0063                     	ds	1
   324  0064                     _MainTime:	
   325  0064                     	ds	1
   326                           
   327                           	psect	bssBANK1
   328  00A0                     __pbssBANK1:	
   329  00A0                     _KeyReference:	
   330  00A0                     	ds	6
   331  00A6                     _KeyOldValue2:	
   332  00A6                     	ds	6
   333  00AC                     _KeyOldValue0:	
   334  00AC                     	ds	6
   335  00B2                     _KeyResSum:	
   336  00B2                     	ds	6
   337  00B8                     _KeyUpShake:	
   338  00B8                     	ds	3
   339                           
   340                           	psect	clrtext
   341  07F0                     clear_ram0:	
   342                           ;	Called with FSR containing the base address, and
   343                           ;	W with the last address+1
   344                           
   345  07F0  0064               	clrwdt	;clear the watchdog before getting into this loop
   346  07F1                     clrloop0:	
   347  07F1  0180               	clrf	0	;clear RAM location pointed to by FSR
   348  07F2  0A84               	incf	4,f	;increment pointer
   349  07F3  0604               	xorwf	4,w	;XOR with final address
   350  07F4  1903               	btfsc	3,2	;have we reached the end yet?
   351  07F5  3400               	retlw	0	;all done for this memory range, return
   352  07F6  0604               	xorwf	4,w	;XOR again to restore value
   353  07F7  2FF1               	goto	clrloop0	;do the next byte
   354                           
   355                           	psect	cstackCOMMON
   356  0070                     __pcstackCOMMON:	
   357  0070                     ?_SystemEnterSleep:	
   358  0070                     ?_CheckTouchKey:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     ?_Init_System:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0070                     ?_Refurbish_Sfr:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0070                     ?_KeyServer:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     ?_checkChrgAD:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0070                     ?_checkTempAD:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  0070                     ?_checkBat:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0070                     ?_Isr_Timer:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ??_Isr_Timer:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ?_WorkSleep:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0070                     ?_TM1650_START:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     ?_TM1650_STOP:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0070                     ?_write_8bit:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ?_initTM1650:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ?_refreshTM1650:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ?_setZeroStep:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0070                     ?_setZeroStep2:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ?_showCtr:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_workCtr:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_chrgCtr:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ?_task1:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ?_main:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_KeyIsIn:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ?_KeyClearOne:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_KeyClearIn:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     ?_KeyStopClear:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     ?_ClearResSum:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ?_GetTouchKeyValue:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0070                     ?_CheckOnceResult:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0070                     ?_CheckKeyOldValue:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0070                     ?_TurnKeyFlags:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0070                     ?_CheckValidTime:	
   452                           ; 1 bytes @ 0x0
   453                           
   454                           
   455                           ; 1 bytes @ 0x0
   456  0070                     	ds	2
   457  0072                     ??_Init_System:	
   458  0072                     ??_Refurbish_Sfr:	
   459                           ; 1 bytes @ 0x2
   460                           
   461  0072                     ??_KeyServer:	
   462                           ; 1 bytes @ 0x2
   463                           
   464  0072                     ??_TM1650_START:	
   465                           ; 1 bytes @ 0x2
   466                           
   467  0072                     ??_TM1650_STOP:	
   468                           ; 1 bytes @ 0x2
   469                           
   470  0072                     ??_write_8bit:	
   471                           ; 1 bytes @ 0x2
   472                           
   473  0072                     ??_setZeroStep:	
   474                           ; 1 bytes @ 0x2
   475                           
   476  0072                     ??_setZeroStep2:	
   477                           ; 1 bytes @ 0x2
   478                           
   479  0072                     ??_KeyIsIn:	
   480                           ; 1 bytes @ 0x2
   481                           
   482  0072                     ??_KeyClearOne:	
   483                           ; 1 bytes @ 0x2
   484                           
   485  0072                     ??_ClearResSum:	
   486                           ; 1 bytes @ 0x2
   487                           
   488  0072                     ?_KeyHave:	
   489                           ; 1 bytes @ 0x2
   490                           
   491  0072                     ??_CheckValidTime:	
   492                           ; 1 bytes @ 0x2
   493                           
   494  0072                     ?___lbdiv:	
   495                           ; 1 bytes @ 0x2
   496                           
   497  0072                     ?___lbmod:	
   498                           ; 1 bytes @ 0x2
   499                           
   500  0072                     ?_Read_ADC:	
   501                           ; 1 bytes @ 0x2
   502                           
   503  0072                     ?___lwmod:	
   504                           ; 2 bytes @ 0x2
   505                           
   506  0072                     Read_ADC@ADCLDORef:	
   507                           ; 2 bytes @ 0x2
   508                           
   509  0072                     write_8bit@dat:	
   510                           ; 1 bytes @ 0x2
   511                           
   512  0072                     KeyIsIn@i:	
   513                           ; 1 bytes @ 0x2
   514                           
   515  0072                     KeyClearOne@cnt:	
   516                           ; 1 bytes @ 0x2
   517                           
   518  0072                     ClearResSum@cnt:	
   519                           ; 1 bytes @ 0x2
   520                           
   521  0072                     ___lbdiv@divisor:	
   522                           ; 1 bytes @ 0x2
   523                           
   524  0072                     ___lbmod@divisor:	
   525                           ; 1 bytes @ 0x2
   526                           
   527  0072                     KeyHave@flag:	
   528                           ; 1 bytes @ 0x2
   529                           
   530  0072                     ___lwmod@divisor:	
   531                           ; 2 bytes @ 0x2
   532                           
   533                           
   534                           ; 2 bytes @ 0x2
   535  0072                     	ds	1
   536  0073                     ??_KeyStopClear:	
   537  0073                     ??_GetTouchKeyValue:	
   538                           ; 1 bytes @ 0x3
   539                           
   540  0073                     ??___lbdiv:	
   541                           ; 1 bytes @ 0x3
   542                           
   543  0073                     ??___lbmod:	
   544                           ; 1 bytes @ 0x3
   545                           
   546  0073                     write_8bit@i:	
   547                           ; 1 bytes @ 0x3
   548                           
   549  0073                     KeyIsIn@cnt:	
   550                           ; 1 bytes @ 0x3
   551                           
   552  0073                     KeyStopClear@i:	
   553                           ; 1 bytes @ 0x3
   554                           
   555  0073                     ___lbdiv@dividend:	
   556                           ; 1 bytes @ 0x3
   557                           
   558  0073                     GetTouchKeyValue@temp:	
   559                           ; 1 bytes @ 0x3
   560                           
   561                           
   562                           ; 2 bytes @ 0x3
   563  0073                     	ds	1
   564  0074                     ??_Read_ADC:	
   565  0074                     ?_tm1650cmd:	
   566                           ; 1 bytes @ 0x4
   567                           
   568  0074                     ??_KeyClearIn:	
   569                           ; 1 bytes @ 0x4
   570                           
   571  0074                     ??_KeyHave:	
   572                           ; 1 bytes @ 0x4
   573                           
   574  0074                     ??_CheckKeyOldValue:	
   575                           ; 1 bytes @ 0x4
   576                           
   577  0074                     tm1650cmd@seg_data:	
   578                           ; 1 bytes @ 0x4
   579                           
   580  0074                     KeyClearIn@cnt:	
   581                           ; 1 bytes @ 0x4
   582                           
   583  0074                     KeyHave@cnt:	
   584                           ; 1 bytes @ 0x4
   585                           
   586  0074                     ___lbdiv@counter:	
   587                           ; 1 bytes @ 0x4
   588                           
   589  0074                     ___lbmod@dividend:	
   590                           ; 1 bytes @ 0x4
   591                           
   592  0074                     ___lwmod@dividend:	
   593                           ; 1 bytes @ 0x4
   594                           
   595                           
   596                           ; 2 bytes @ 0x4
   597  0074                     	ds	1
   598  0075                     ??_tm1650cmd:	
   599  0075                     ??_CheckOnceResult:	
   600                           ; 1 bytes @ 0x5
   601                           
   602  0075                     ??_TurnKeyFlags:	
   603                           ; 1 bytes @ 0x5
   604                           
   605  0075                     tm1650cmd@digAddr:	
   606                           ; 1 bytes @ 0x5
   607                           
   608  0075                     ___lbdiv@quotient:	
   609                           ; 1 bytes @ 0x5
   610                           
   611  0075                     ___lbmod@counter:	
   612                           ; 1 bytes @ 0x5
   613                           
   614  0075                     Read_ADC@Adc_Result:	
   615                           ; 1 bytes @ 0x5
   616                           
   617  0075                     GetTouchKeyValue@wake:	
   618                           ; 2 bytes @ 0x5
   619                           
   620                           
   621                           ; 2 bytes @ 0x5
   622  0075                     	ds	1
   623  0076                     ??_initTM1650:	
   624  0076                     ??_refreshTM1650:	
   625                           ; 1 bytes @ 0x6
   626                           
   627  0076                     ??_task1:	
   628                           ; 1 bytes @ 0x6
   629                           
   630  0076                     ??___lwmod:	
   631                           ; 1 bytes @ 0x6
   632                           
   633  0076                     ___lbmod@rem:	
   634                           ; 1 bytes @ 0x6
   635                           
   636  0076                     ___lwmod@counter:	
   637                           ; 1 bytes @ 0x6
   638                           
   639                           
   640                           ; 1 bytes @ 0x6
   641  0076                     	ds	1
   642  0077                     Read_ADC@i:	
   643  0077                     GetTouchKeyValue@cnt:	
   644                           ; 1 bytes @ 0x7
   645                           
   646                           
   647                           ; 1 bytes @ 0x7
   648  0077                     	ds	1
   649  0078                     ??_WorkSleep:	
   650  0078                     ??_showCtr:	
   651                           ; 1 bytes @ 0x8
   652                           
   653  0078                     Read_ADC@ADCchannel:	
   654                           ; 1 bytes @ 0x8
   655                           
   656                           
   657                           ; 1 bytes @ 0x8
   658  0078                     	ds	1
   659  0079                     ??_CheckTouchKey:	
   660  0079                     ??_checkChrgAD:	
   661                           ; 1 bytes @ 0x9
   662                           
   663  0079                     ??_checkTempAD:	
   664                           ; 1 bytes @ 0x9
   665                           
   666  0079                     ??_workCtr:	
   667                           ; 1 bytes @ 0x9
   668                           
   669  0079                     ??_chrgCtr:	
   670                           ; 1 bytes @ 0x9
   671                           
   672  0079                     ??_main:	
   673                           ; 1 bytes @ 0x9
   674                           
   675                           
   676                           	psect	cstackBANK0
   677  0065                     __pcstackBANK0:	
   678                           ; 1 bytes @ 0x9
   679                           
   680  0065                     ??_SystemEnterSleep:	
   681  0065                     ??_checkBat:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0065                     CheckOnceResult@OldValue:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0065                     CheckKeyOldValue@KeyResTemp:	
   688                           ; 2 bytes @ 0x0
   689                           
   690                           
   691                           ; 2 bytes @ 0x0
   692  0065                     	ds	2
   693  0067                     CheckOnceResult@KeyValue:	
   694  0067                     CheckKeyOldValue@KeyOldTemp:	
   695                           ; 2 bytes @ 0x2
   696                           
   697  0067                     SystemEnterSleep@KeyValue:	
   698                           ; 2 bytes @ 0x2
   699                           
   700                           
   701                           ; 2 bytes @ 0x2
   702  0067                     	ds	2
   703  0069                     CheckOnceResult@flag:	
   704  0069                     CheckKeyOldValue@cnt:	
   705                           ; 1 bytes @ 0x4
   706                           
   707  0069                     SystemEnterSleep@KeyResTemp:	
   708                           ; 1 bytes @ 0x4
   709                           
   710                           
   711                           ; 2 bytes @ 0x4
   712  0069                     	ds	1
   713  006A                     CheckOnceResult@KeyDown:	
   714                           
   715                           ; 1 bytes @ 0x5
   716  006A                     	ds	1
   717  006B                     CheckOnceResult@KeyResTemp:	
   718  006B                     SystemEnterSleep@wake:	
   719                           ; 2 bytes @ 0x6
   720                           
   721                           
   722                           ; 2 bytes @ 0x6
   723  006B                     	ds	2
   724  006D                     CheckOnceResult@cnt:	
   725  006D                     SystemEnterSleep@cnt:	
   726                           ; 1 bytes @ 0x8
   727                           
   728                           
   729                           ; 1 bytes @ 0x8
   730  006D                     	ds	1
   731                           
   732                           	psect	maintext
   733  0D8E                     __pmaintext:	
   734 ;;
   735 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   736 ;;
   737 ;; *************** function _main *****************
   738 ;; Defined at:
   739 ;;		line 1061 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;		None
   742 ;; Auto vars:     Size  Location     Type
   743 ;;		None
   744 ;; Return value:  Size  Location     Type
   745 ;;                  1    wreg      void 
   746 ;; Registers used:
   747 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   748 ;; Tracked objects:
   749 ;;		On entry : B00/0
   750 ;;		On exit  : 300/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   753 ;;      Params:         0       0       0       0       0
   754 ;;      Locals:         0       0       0       0       0
   755 ;;      Temps:          0       0       0       0       0
   756 ;;      Totals:         0       0       0       0       0
   757 ;;Total ram usage:        0 bytes
   758 ;; Hardware stack levels required when called:    6
   759 ;; This function calls:
   760 ;;		_CheckTouchKey
   761 ;;		_Init_System
   762 ;;		_KeyServer
   763 ;;		_Refurbish_Sfr
   764 ;;		_checkBat
   765 ;;		_chrgCtr
   766 ;;		_initTM1650
   767 ;;		_showCtr
   768 ;;		_task1
   769 ;;		_workCtr
   770 ;; This function is called by:
   771 ;;		Startup code after reset
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775                           
   776                           ;psect for function _main
   777  0D8E                     _main:	
   778                           
   779                           ;main.c: 1063: Init_System();
   780                           
   781                           ;incstack = 0
   782                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   783  0D8E  118A  2640  158A   	fcall	_Init_System
   784                           
   785                           ;main.c: 1064: initTM1650();
   786  0D91  118A  268C  158A   	fcall	_initTM1650
   787                           
   788                           ;main.c: 1065: firstTime = 250;
   789  0D94  30FA               	movlw	250
   790  0D95  00C0               	movwf	_firstTime
   791  0D96  01C1               	clrf	_firstTime+1
   792  0D97                     l4792:	
   793                           
   794                           ;main.c: 1067: {
   795                           ;main.c: 1068: if(B_MainLoop)
   796  0D97  1F79               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   797  0D98  2D97               	goto	l4792
   798                           
   799                           ;main.c: 1069: {
   800                           ;main.c: 1070: B_MainLoop = 0;
   801  0D99  1379               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   802  0D9A  0064               	clrwdt	;# 
   803                           
   804                           ;main.c: 1073: CheckTouchKey();
   805  0D9B  118A  207A  158A   	fcall	_CheckTouchKey
   806                           
   807                           ;main.c: 1075: Refurbish_Sfr();
   808  0D9E  118A  260E  158A   	fcall	_Refurbish_Sfr
   809                           
   810                           ;main.c: 1076: if(chrgFlag == 0)
   811  0DA1  085B               	movf	_chrgFlag,w
   812  0DA2  1D03               	btfss	3,2
   813  0DA3  2DA7               	goto	l4804
   814                           
   815                           ;main.c: 1077: KeyServer();
   816  0DA4  158A  25B7  158A   	fcall	_KeyServer
   817  0DA7                     l4804:	
   818                           
   819                           ;main.c: 1078: showCtr();
   820  0DA7  118A  2222  158A   	fcall	_showCtr
   821                           
   822                           ;main.c: 1079: workCtr();
   823  0DAA  158A  2728  158A   	fcall	_workCtr
   824                           
   825                           ;main.c: 1080: checkBat();
   826  0DAD  158A  26D8  158A   	fcall	_checkBat
   827                           
   828                           ;main.c: 1081: chrgCtr();
   829  0DB0  158A  26A1  158A   	fcall	_chrgCtr
   830                           
   831                           ;main.c: 1082: task1();
   832  0DB3  118A  201F  158A   	fcall	_task1
   833  0DB6  2D97               	goto	l4792
   834  0DB7                     __end_of_main:	
   835                           
   836                           	psect	text3
   837  001F                     __ptext3:	
   838 ;; *************** function _task1 *****************
   839 ;; Defined at:
   840 ;;		line 988 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;		None
   843 ;; Auto vars:     Size  Location     Type
   844 ;;		None
   845 ;; Return value:  Size  Location     Type
   846 ;;                  1    wreg      void 
   847 ;; Registers used:
   848 ;;		wreg, status,2, status,0, pclath, cstack
   849 ;; Tracked objects:
   850 ;;		On entry : 300/0
   851 ;;		On exit  : 300/0
   852 ;;		Unchanged: 0/0
   853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   854 ;;      Params:         0       0       0       0       0
   855 ;;      Locals:         0       0       0       0       0
   856 ;;      Temps:          0       0       0       0       0
   857 ;;      Totals:         0       0       0       0       0
   858 ;;Total ram usage:        0 bytes
   859 ;; Hardware stack levels used:    1
   860 ;; Hardware stack levels required when called:    4
   861 ;; This function calls:
   862 ;;		_refreshTM1650
   863 ;; This function is called by:
   864 ;;		_main
   865 ;; This function uses a non-reentrant model
   866 ;;
   867                           
   868                           
   869                           ;psect for function _task1
   870  001F                     _task1:	
   871                           
   872                           ;main.c: 990: if(firstTime > 0)
   873                           
   874                           ;incstack = 0
   875                           ; Regs used in _task1: [wreg+status,2+status,0+pclath+cstack]
   876  001F  0840               	movf	_firstTime,w
   877  0020  0441               	iorwf	_firstTime+1,w
   878  0021  1903               	btfsc	3,2
   879  0022  282E               	goto	l4398
   880                           
   881                           ;main.c: 991: {
   882                           ;main.c: 992: firstTime--;
   883  0023  3001               	movlw	1
   884  0024  02C0               	subwf	_firstTime,f
   885  0025  1C03               	skipc
   886  0026  03C1               	decf	_firstTime+1,f
   887                           
   888                           ;main.c: 993: if(preBatValue < batValue)
   889  0027  085A               	movf	_batValue,w
   890  0028  0259               	subwf	_preBatValue,w
   891  0029  1803               	skipnc
   892  002A  2830               	goto	l4400
   893                           
   894                           ;main.c: 994: {
   895                           ;main.c: 995: preBatValue = batValue;
   896  002B  085A               	movf	_batValue,w
   897  002C  00D9               	movwf	_preBatValue
   898  002D  2830               	goto	l4400
   899  002E                     l4398:	
   900                           
   901                           ;main.c: 998: else
   902                           ;main.c: 999: {
   903                           ;main.c: 1000: refreshTM1650();
   904  002E  233B  118A         	fcall	_refreshTM1650
   905  0030                     l4400:	
   906                           
   907                           ;main.c: 1001: }
   908                           ;main.c: 1002: if(++count1s >= 250)
   909  0030  30FA               	movlw	250
   910  0031  0ADC               	incf	_count1s,f
   911  0032  025C               	subwf	_count1s,w
   912  0033  1C03               	skipc
   913  0034  0008               	return
   914                           
   915                           ;main.c: 1003: {
   916                           ;main.c: 1004: count1s = 0;
   917  0035  01DC               	clrf	_count1s
   918                           
   919                           ;main.c: 1005: if(workStep > 0)
   920  0036  087B               	movf	_workStep,w
   921  0037  1903               	btfsc	3,2
   922  0038  284A               	goto	l4410
   923                           
   924                           ;main.c: 1006: {
   925                           ;main.c: 1007: if(++count900s > 675)
   926  0039  0AB0               	incf	_count900s,f
   927  003A  1903               	skipnz
   928  003B  0AB1               	incf	_count900s+1,f
   929  003C  3002               	movlw	2
   930  003D  0231               	subwf	_count900s+1,w
   931  003E  30A4               	movlw	164
   932  003F  1903               	skipnz
   933  0040  0230               	subwf	_count900s,w
   934  0041  1C03               	skipc
   935  0042  284C               	goto	l4412
   936                           
   937                           ;main.c: 1008: {
   938                           ;main.c: 1009: count900s = 0;
   939  0043  01B0               	clrf	_count900s
   940  0044  01B1               	clrf	_count900s+1
   941                           
   942                           ;main.c: 1010: workStep = 0;
   943  0045  01FB               	clrf	_workStep
   944                           
   945                           ;main.c: 1011: zeroStep = 0;
   946  0046  01FA               	clrf	_zeroStep
   947                           
   948                           ;main.c: 1012: ledLightTime = 0;
   949  0047  01B8               	clrf	_ledLightTime
   950  0048  01B9               	clrf	_ledLightTime+1
   951  0049  284C               	goto	l4412
   952  004A                     l4410:	
   953                           
   954                           ;main.c: 1015: else
   955                           ;main.c: 1016: {
   956                           ;main.c: 1017: count900s = 0;
   957  004A  01B0               	clrf	_count900s
   958  004B  01B1               	clrf	_count900s+1
   959  004C                     l4412:	
   960                           
   961                           ;main.c: 1018: }
   962                           ;main.c: 1019: if(ledLightTime > 0)
   963  004C  0838               	movf	_ledLightTime,w
   964  004D  0439               	iorwf	_ledLightTime+1,w
   965  004E  1903               	btfsc	3,2
   966  004F  2856               	goto	l4416
   967                           
   968                           ;main.c: 1020: {
   969                           ;main.c: 1021: ledLightTime--;
   970  0050  3001               	movlw	1
   971  0051  02B8               	subwf	_ledLightTime,f
   972  0052  3000               	movlw	0
   973  0053  1C03               	skipc
   974  0054  03B9               	decf	_ledLightTime+1,f
   975  0055  02B9               	subwf	_ledLightTime+1,f
   976  0056                     l4416:	
   977                           
   978                           ;main.c: 1022: }
   979                           ;main.c: 1023: if(chrgFlag)
   980  0056  085B               	movf	_chrgFlag,w
   981  0057  1903               	btfsc	3,2
   982  0058  286B               	goto	l4430
   983                           
   984                           ;main.c: 1024: {
   985                           ;main.c: 1025: if(preBatValue < 99 && preBatValue < batValue)
   986  0059  3063               	movlw	99
   987  005A  0259               	subwf	_preBatValue,w
   988  005B  1803               	skipnc
   989  005C  2869               	goto	l4428
   990  005D  085A               	movf	_batValue,w
   991  005E  0259               	subwf	_preBatValue,w
   992  005F  1803               	skipnc
   993  0060  2869               	goto	l4428
   994                           
   995                           ;main.c: 1026: {
   996                           ;main.c: 1027: if(++count15s >= 15)
   997  0061  300F               	movlw	15
   998  0062  0AD3               	incf	_count15s,f
   999  0063  0253               	subwf	_count15s,w
  1000  0064  1C03               	skipc
  1001  0065  0008               	return
  1002                           
  1003                           ;main.c: 1028: {
  1004                           ;main.c: 1029: count15s = 0;
  1005  0066  01D3               	clrf	_count15s
  1006                           
  1007                           ;main.c: 1030: preBatValue++;
  1008  0067  0AD9               	incf	_preBatValue,f
  1009  0068  0008               	return
  1010  0069                     l4428:	
  1011                           
  1012                           ;main.c: 1033: else
  1013                           ;main.c: 1034: {
  1014                           ;main.c: 1035: count15s = 0;
  1015  0069  01D3               	clrf	_count15s
  1016  006A  0008               	return
  1017  006B                     l4430:	
  1018                           
  1019                           ;main.c: 1038: else
  1020                           ;main.c: 1039: {
  1021                           ;main.c: 1040: if(preBatValue > 0 && preBatValue > batValue)
  1022  006B  0859               	movf	_preBatValue,w
  1023  006C  1903               	btfsc	3,2
  1024  006D  2869               	goto	l4428
  1025  006E  0859               	movf	_preBatValue,w
  1026  006F  025A               	subwf	_batValue,w
  1027  0070  1803               	skipnc
  1028  0071  2869               	goto	l4428
  1029                           
  1030                           ;main.c: 1041: {
  1031                           ;main.c: 1042: if(++count15s >= 15)
  1032  0072  300F               	movlw	15
  1033  0073  0AD3               	incf	_count15s,f
  1034  0074  0253               	subwf	_count15s,w
  1035  0075  1C03               	skipc
  1036  0076  0008               	return
  1037                           
  1038                           ;main.c: 1043: {
  1039                           ;main.c: 1044: count15s = 0;
  1040  0077  01D3               	clrf	_count15s
  1041                           
  1042                           ;main.c: 1045: preBatValue--;
  1043  0078  03D9               	decf	_preBatValue,f
  1044  0079  0008               	return
  1045  007A                     __end_of_task1:	
  1046  007A                     __ptext25:	
  1047 ;; *************** function _CheckTouchKey *****************
  1048 ;; Defined at:
  1049 ;;		line 529 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1050 ;; Parameters:    Size  Location     Type
  1051 ;;		None
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;		None
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  1    wreg      void 
  1056 ;; Registers used:
  1057 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1058 ;; Tracked objects:
  1059 ;;		On entry : 0/0
  1060 ;;		On exit  : 300/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1063 ;;      Params:         0       0       0       0       0
  1064 ;;      Locals:         0       0       0       0       0
  1065 ;;      Temps:          0       0       0       0       0
  1066 ;;      Totals:         0       0       0       0       0
  1067 ;;Total ram usage:        0 bytes
  1068 ;; Hardware stack levels used:    1
  1069 ;; Hardware stack levels required when called:    5
  1070 ;; This function calls:
  1071 ;;		_CheckKeyOldValue
  1072 ;;		_CheckOnceResult
  1073 ;;		_CheckValidTime
  1074 ;;		_ClearResSum
  1075 ;;		_GetTouchKeyValue
  1076 ;;		_KeyStopClear
  1077 ;;		_TurnKeyFlags
  1078 ;; This function is called by:
  1079 ;;		_main
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           
  1084                           ;psect for function _CheckTouchKey
  1085  007A                     _CheckTouchKey:	
  1086                           
  1087                           ;CheckTouchKey.c: 531: if(!b_kover)
  1088                           
  1089                           ;incstack = 0
  1090                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1091  007A  1A79               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1092  007B  2888               	goto	l1659
  1093                           
  1094                           ;CheckTouchKey.c: 532: {
  1095                           ;CheckTouchKey.c: 534: GetTouchKeyValue();
  1096  007C  2582  118A         	fcall	_GetTouchKeyValue
  1097                           
  1098                           ;CheckTouchKey.c: 535: if(++KeyCounter >= 8)
  1099  007E  3008               	movlw	8
  1100  007F  1283               	bcf	3,5	;RP0=0, select bank0
  1101  0080  1303               	bcf	3,6	;RP1=0, select bank0
  1102  0081  0AC8               	incf	_KeyCounter,f
  1103  0082  0248               	subwf	_KeyCounter,w
  1104  0083  1C03               	skipc
  1105  0084  28A6               	goto	l4476
  1106                           
  1107                           ;CheckTouchKey.c: 536: {
  1108                           ;CheckTouchKey.c: 537: KeyCounter = 0;
  1109  0085  01C8               	clrf	_KeyCounter
  1110                           
  1111                           ;CheckTouchKey.c: 538: b_kover = 1;
  1112  0086  1679               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1113  0087  28A6               	goto	l4476
  1114  0088                     l1659:	
  1115                           
  1116                           ;CheckTouchKey.c: 541: else if(!b_kover1)
  1117  0088  19F9               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1118  0089  28A0               	goto	l4470
  1119                           
  1120                           ;CheckTouchKey.c: 542: {
  1121                           ;CheckTouchKey.c: 544: CheckOnceResult();
  1122  008A  210B  118A         	fcall	_CheckOnceResult
  1123                           
  1124                           ;CheckTouchKey.c: 547: TurnKeyFlags();
  1125  008C  25E1  118A         	fcall	_TurnKeyFlags
  1126                           
  1127                           ;CheckTouchKey.c: 548: b_kover1 = 1;
  1128  008E  15F9               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1129                           
  1130                           ;CheckTouchKey.c: 554: if(b_kerr || KeyCounter > KeyValidNumber)
  1131  008F  18F9               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1132  0090  2897               	goto	l4460
  1133  0091  3004               	movlw	4
  1134  0092  1283               	bcf	3,5	;RP0=0, select bank0
  1135  0093  1303               	bcf	3,6	;RP1=0, select bank0
  1136  0094  0248               	subwf	_KeyCounter,w
  1137  0095  1C03               	skipc
  1138  0096  289C               	goto	l4468
  1139  0097                     l4460:	
  1140                           
  1141                           ;CheckTouchKey.c: 555: {
  1142                           ;CheckTouchKey.c: 556: KeyStopClear();
  1143  0097  220C  118A         	fcall	_KeyStopClear
  1144                           
  1145                           ;CheckTouchKey.c: 557: b_kerr = 0;
  1146  0099  10F9               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1147                           
  1148                           ;CheckTouchKey.c: 558: b_kover = 0;
  1149  009A  1279               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1150                           
  1151                           ;CheckTouchKey.c: 559: b_kover1 = 0;
  1152  009B  11F9               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1153  009C                     l4468:	
  1154                           
  1155                           ;CheckTouchKey.c: 560: }
  1156                           ;CheckTouchKey.c: 561: KeyCounter = 0;
  1157  009C  1283               	bcf	3,5	;RP0=0, select bank0
  1158  009D  1303               	bcf	3,6	;RP1=0, select bank0
  1159  009E  01C8               	clrf	_KeyCounter
  1160                           
  1161                           ;CheckTouchKey.c: 562: }
  1162  009F  28A6               	goto	l4476
  1163  00A0                     l4470:	
  1164                           
  1165                           ;CheckTouchKey.c: 563: else
  1166                           ;CheckTouchKey.c: 564: {
  1167                           ;CheckTouchKey.c: 566: CheckKeyOldValue();
  1168  00A0  20A7  118A         	fcall	_CheckKeyOldValue
  1169                           
  1170                           ;CheckTouchKey.c: 568: ClearResSum();
  1171  00A2  255E  118A         	fcall	_ClearResSum
  1172                           
  1173                           ;CheckTouchKey.c: 570: b_kover = 0;
  1174  00A4  1279               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1175                           
  1176                           ;CheckTouchKey.c: 571: b_kover1 = 0;
  1177  00A5  11F9               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1178  00A6                     l4476:	
  1179                           
  1180                           ;CheckTouchKey.c: 572: }
  1181                           ;CheckTouchKey.c: 574: CheckValidTime();
  1182  00A6  2E1C               	ljmp	l3934
  1183  00A7                     __end_of_CheckTouchKey:	
  1184  00A7                     __ptext35:	
  1185 ;; *************** function _CheckKeyOldValue *****************
  1186 ;; Defined at:
  1187 ;;		line 369 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;		None
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;  KeyOldTemp      2    2[BANK0 ] unsigned int 
  1192 ;;  KeyResTemp      2    0[BANK0 ] unsigned int 
  1193 ;;  cnt             1    4[BANK0 ] unsigned char 
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  1    wreg      void 
  1196 ;; Registers used:
  1197 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 300/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1203 ;;      Params:         0       0       0       0       0
  1204 ;;      Locals:         0       5       0       0       0
  1205 ;;      Temps:          2       0       0       0       0
  1206 ;;      Totals:         2       5       0       0       0
  1207 ;;Total ram usage:        7 bytes
  1208 ;; Hardware stack levels used:    1
  1209 ;; Hardware stack levels required when called:    3
  1210 ;; This function calls:
  1211 ;;		_KeyIsIn
  1212 ;; This function is called by:
  1213 ;;		_CheckTouchKey
  1214 ;; This function uses a non-reentrant model
  1215 ;;
  1216                           
  1217                           
  1218                           ;psect for function _CheckKeyOldValue
  1219  00A7                     _CheckKeyOldValue:	
  1220                           
  1221                           ;CheckTouchKey.c: 371: static unsigned char counter = 0;
  1222                           ;CheckTouchKey.c: 372: unsigned char cnt = 0;
  1223                           
  1224                           ;incstack = 0
  1225                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1226  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  1227  00A8  3004               	movlw	4
  1228  00A9  1303               	bcf	3,6	;RP1=0, select bank0
  1229  00AA  01E9               	clrf	CheckKeyOldValue@cnt
  1230                           
  1231                           ;CheckTouchKey.c: 373: unsigned int KeyResTemp;
  1232                           ;CheckTouchKey.c: 374: unsigned int KeyOldTemp;
  1233                           ;CheckTouchKey.c: 376: if(++counter < 4)
  1234  00AB  0AC6               	incf	CheckKeyOldValue@counter,f
  1235  00AC  0246               	subwf	CheckKeyOldValue@counter,w
  1236  00AD  1C03               	btfss	3,0
  1237  00AE  0008               	return
  1238                           
  1239                           ;CheckTouchKey.c: 378: counter = 0;
  1240  00AF  01C6               	clrf	CheckKeyOldValue@counter
  1241  00B0                     l3868:	
  1242                           
  1243                           ;CheckTouchKey.c: 381: {
  1244                           ;CheckTouchKey.c: 382: KeyResTemp = KeyResSum[cnt];
  1245  00B0  1003               	clrc
  1246  00B1  0D69               	rlf	CheckKeyOldValue@cnt,w
  1247  00B2  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  1248  00B3  0084               	movwf	4
  1249  00B4  1383               	bcf	3,7	;select IRP bank1
  1250  00B5  0800               	movf	0,w
  1251  00B6  00E5               	movwf	CheckKeyOldValue@KeyResTemp
  1252  00B7  0A84               	incf	4,f
  1253  00B8  0800               	movf	0,w
  1254  00B9  00E6               	movwf	CheckKeyOldValue@KeyResTemp+1
  1255                           
  1256                           ;CheckTouchKey.c: 383: if(!KeyIsIn(cnt))
  1257  00BA  0869               	movf	CheckKeyOldValue@cnt,w
  1258  00BB  21EC  118A         	fcall	_KeyIsIn
  1259  00BD  3A00               	xorlw	0
  1260                           
  1261                           ;CheckTouchKey.c: 384: {
  1262                           ;CheckTouchKey.c: 386: KeyOldTemp = KeyOldValue0[cnt] - KeyResTemp;
  1263  00BE  1003               	clrc
  1264  00BF  1D03               	skipz
  1265  00C0  28F5               	goto	L27
  1266  00C1  0D69               	rlf	CheckKeyOldValue@cnt,w
  1267  00C2  3EAC               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  1268  00C3  0084               	movwf	4
  1269  00C4  1383               	bcf	3,7	;select IRP bank1
  1270                           
  1271                           ;CheckTouchKey.c: 387: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  1272  00C5  277B  118A         	fcall	PL2	;call to abstracted procedure
  1273  00C7  1903               	skipnz
  1274  00C8  0267               	subwf	CheckKeyOldValue@KeyOldTemp,w
  1275  00C9  1C03               	skipc
  1276  00CA  28D1               	goto	L24
  1277  00CB  0F67               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  1278  00CC  28F4               	goto	l1622
  1279  00CD  0A68               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  1280                           
  1281                           ;CheckTouchKey.c: 388: {
  1282                           ;CheckTouchKey.c: 389: KeyOldTemp = KeyOldValue1[cnt] - KeyResTemp;
  1283  00CE  1003               	clrc
  1284  00CF  1D03               	btfss	3,2
  1285  00D0  28F5               	goto	L27
  1286  00D1                     L24:	
  1287  00D1  0D69               	rlf	CheckKeyOldValue@cnt,w
  1288  00D2  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1289  00D3  0084               	movwf	4
  1290                           
  1291                           ;CheckTouchKey.c: 390: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  1292  00D4  277B  118A         	fcall	PL2	;call to abstracted procedure
  1293  00D6  1903               	skipnz
  1294  00D7  0267               	subwf	CheckKeyOldValue@KeyOldTemp,w
  1295  00D8  1C03               	skipc
  1296  00D9  28E0               	goto	L25
  1297  00DA  0F67               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  1298  00DB  28F4               	goto	l1622
  1299  00DC  0A68               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  1300                           
  1301                           ;CheckTouchKey.c: 391: {
  1302                           ;CheckTouchKey.c: 392: KeyOldTemp = KeyOldValue2[cnt] - KeyResTemp;
  1303  00DD  1003               	clrc
  1304  00DE  1D03               	btfss	3,2
  1305  00DF  28F5               	goto	L27
  1306  00E0                     L25:	
  1307  00E0  0D69               	rlf	CheckKeyOldValue@cnt,w
  1308  00E1  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1309  00E2  0084               	movwf	4
  1310                           
  1311                           ;CheckTouchKey.c: 393: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  1312  00E3  277B  118A         	fcall	PL2	;call to abstracted procedure
  1313  00E5  1903               	skipnz
  1314  00E6  0267               	subwf	CheckKeyOldValue@KeyOldTemp,w
  1315  00E7  1C03               	skipc
  1316  00E8  28EF               	goto	L26
  1317  00E9  0F67               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  1318  00EA  28F4               	goto	l1622
  1319  00EB  0A68               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  1320                           
  1321                           ;CheckTouchKey.c: 394: {
  1322                           ;CheckTouchKey.c: 395: KeyReference[cnt] = KeyResTemp;
  1323  00EC  1003               	clrc
  1324  00ED  1D03               	btfss	3,2
  1325  00EE  28F5               	goto	L27
  1326  00EF                     L26:	
  1327  00EF  0D69               	rlf	CheckKeyOldValue@cnt,w
  1328  00F0  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  1329  00F1  0084               	movwf	4
  1330  00F2  27DA  118A         	fcall	PL22	;call to abstracted procedure
  1331  00F4                     l1622:	
  1332                           
  1333                           ;CheckTouchKey.c: 396: }
  1334                           ;CheckTouchKey.c: 397: }
  1335                           ;CheckTouchKey.c: 398: }
  1336                           ;CheckTouchKey.c: 399: }
  1337                           ;CheckTouchKey.c: 402: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  1338  00F4  1003               	clrc
  1339  00F5                     L27:	
  1340  00F5  0D69               	rlf	CheckKeyOldValue@cnt,w
  1341  00F6  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1342  00F7  0084               	movwf	4
  1343  00F8  1383               	bcf	3,7	;select IRP bank0
  1344  00F9  27BF  118A         	fcall	PL14	;call to abstracted procedure
  1345  00FB  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1346                           
  1347                           ;CheckTouchKey.c: 403: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  1348  00FC  27AD  118A         	fcall	PL10	;call to abstracted procedure
  1349  00FE  27BF  118A         	fcall	PL14	;call to abstracted procedure
  1350  0100  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1351                           
  1352                           ;CheckTouchKey.c: 404: KeyOldValue0[cnt] = KeyResTemp;
  1353  0101  27AD  118A         	fcall	PL10	;call to abstracted procedure
  1354  0103  27DA  118A         	fcall	PL22	;call to abstracted procedure
  1355  0105  3003               	movlw	3
  1356  0106  0AE9               	incf	CheckKeyOldValue@cnt,f
  1357  0107  0269               	subwf	CheckKeyOldValue@cnt,w
  1358  0108  1803               	btfsc	3,0
  1359  0109  0008               	return
  1360  010A  28B0               	goto	l3868
  1361  010B                     __end_of_CheckKeyOldValue:	
  1362  010B                     __ptext32:	
  1363 ;; *************** function _CheckOnceResult *****************
  1364 ;; Defined at:
  1365 ;;		line 255 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;		None
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  KeyResTemp      2    6[BANK0 ] unsigned int 
  1370 ;;  KeyValue        2    2[BANK0 ] unsigned int 
  1371 ;;  OldValue        2    0[BANK0 ] unsigned int 
  1372 ;;  cnt             1    8[BANK0 ] unsigned char 
  1373 ;;  KeyDown         1    5[BANK0 ] unsigned char 
  1374 ;;  flag            1    4[BANK0 ] unsigned char 
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  1    wreg      void 
  1377 ;; Registers used:
  1378 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : B00/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1384 ;;      Params:         0       0       0       0       0
  1385 ;;      Locals:         0       9       0       0       0
  1386 ;;      Temps:          4       0       0       0       0
  1387 ;;      Totals:         4       9       0       0       0
  1388 ;;Total ram usage:       13 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    3
  1391 ;; This function calls:
  1392 ;;		_KeyClearOne
  1393 ;;		_KeyHave
  1394 ;;		_KeyIsIn
  1395 ;; This function is called by:
  1396 ;;		_CheckTouchKey
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           
  1401                           ;psect for function _CheckOnceResult
  1402  010B                     _CheckOnceResult:	
  1403                           
  1404                           ;CheckTouchKey.c: 257: unsigned char cnt = 0;
  1405                           
  1406                           ;incstack = 0
  1407                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1408  010B  1283               	bcf	3,5	;RP0=0, select bank0
  1409  010C  1303               	bcf	3,6	;RP1=0, select bank0
  1410  010D  01ED               	clrf	CheckOnceResult@cnt
  1411                           
  1412                           ;CheckTouchKey.c: 258: unsigned char KeyDown;
  1413                           ;CheckTouchKey.c: 259: unsigned char flag;
  1414                           ;CheckTouchKey.c: 261: unsigned int KeyResTemp;
  1415                           ;CheckTouchKey.c: 262: unsigned int KeyValue;
  1416                           ;CheckTouchKey.c: 263: unsigned int OldValue;
  1417                           ;CheckTouchKey.c: 265: KeyData[0] = 0;
  1418  010E  01A8               	clrf	_KeyData	;volatile
  1419                           
  1420                           ;CheckTouchKey.c: 266: KeyData[1] = 0;
  1421  010F  01A9               	clrf	_KeyData+1	;volatile
  1422                           
  1423                           ;CheckTouchKey.c: 267: KeyMaxSub = 0;
  1424  0110  01C7               	clrf	_KeyMaxSub
  1425  0111                     l3794:	
  1426                           
  1427                           ;CheckTouchKey.c: 271: {
  1428                           ;CheckTouchKey.c: 272: flag = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  1429  0111  086D               	movf	CheckOnceResult@cnt,w
  1430  0112  3907               	andlw	7
  1431  0113  3E0F               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  1432  0114  0084               	movwf	4
  1433  0115  158A  2000  118A   	fcall	stringdir
  1434  0118  00E9               	movwf	CheckOnceResult@flag
  1435                           
  1436                           ;CheckTouchKey.c: 274: KeyResSum[cnt] >>= 3;
  1437  0119  1003               	clrc
  1438  011A  0D6D               	rlf	CheckOnceResult@cnt,w
  1439  011B  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  1440  011C  0084               	movwf	4
  1441  011D  3003               	movlw	3
  1442  011E                     u2655:	
  1443  011E  0A84               	incf	4,f
  1444  011F  1003               	clrc
  1445  0120  1383               	bcf	3,7	;select IRP bank1
  1446  0121  0C80               	rrf	0,f
  1447  0122  0384               	decf	4,f
  1448  0123  0C80               	rrf	0,f
  1449  0124  3EFF               	addlw	-1
  1450  0125  1D03               	skipz
  1451  0126  291E               	goto	u2655
  1452                           
  1453                           ;CheckTouchKey.c: 275: KeyResTemp = KeyResSum[cnt];
  1454  0127  1003               	clrc
  1455  0128  0D6D               	rlf	CheckOnceResult@cnt,w
  1456  0129  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  1457  012A  0084               	movwf	4
  1458  012B  0800               	movf	0,w
  1459  012C  00EB               	movwf	CheckOnceResult@KeyResTemp
  1460  012D  0A84               	incf	4,f
  1461  012E  0800               	movf	0,w
  1462  012F  00EC               	movwf	CheckOnceResult@KeyResTemp+1
  1463                           
  1464                           ;CheckTouchKey.c: 276: KeyDown = Table_KeyDown[cnt];
  1465  0130  086D               	movf	CheckOnceResult@cnt,w
  1466  0131  3E17               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  1467  0132  0084               	movwf	4
  1468  0133  158A  2000  118A   	fcall	stringdir
  1469  0136  00EA               	movwf	CheckOnceResult@KeyDown
  1470                           
  1471                           ;CheckTouchKey.c: 278: KeyValue = KeyResTemp + KeyDown;
  1472  0137  00E7               	movwf	CheckOnceResult@KeyValue
  1473  0138  01E8               	clrf	CheckOnceResult@KeyValue+1
  1474  0139  086B               	movf	CheckOnceResult@KeyResTemp,w
  1475  013A  07E7               	addwf	CheckOnceResult@KeyValue,f
  1476  013B  1803               	skipnc
  1477  013C  0AE8               	incf	CheckOnceResult@KeyValue+1,f
  1478  013D  086C               	movf	CheckOnceResult@KeyResTemp+1,w
  1479  013E  07E8               	addwf	CheckOnceResult@KeyValue+1,f
  1480                           
  1481                           ;CheckTouchKey.c: 280: if(!KeyIsIn(cnt))
  1482  013F  086D               	movf	CheckOnceResult@cnt,w
  1483  0140  21EC  118A         	fcall	_KeyIsIn
  1484  0142  3A00               	xorlw	0
  1485                           
  1486                           ;CheckTouchKey.c: 281: {
  1487                           ;CheckTouchKey.c: 283: OldValue = KeyOldValue2[cnt];
  1488  0143  1003               	clrc
  1489  0144  1D03               	skipz
  1490  0145  29A0               	goto	L23
  1491  0146  0D6D               	rlf	CheckOnceResult@cnt,w
  1492  0147  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1493  0148  0084               	movwf	4
  1494  0149  1383               	bcf	3,7	;select IRP bank1
  1495  014A  0800               	movf	0,w
  1496  014B  00E5               	movwf	CheckOnceResult@OldValue
  1497  014C  0A84               	incf	4,f
  1498  014D  0800               	movf	0,w
  1499  014E  00E6               	movwf	CheckOnceResult@OldValue+1
  1500                           
  1501                           ;CheckTouchKey.c: 285: if(KeyReference[cnt] > KeyValue)
  1502  014F  1003               	clrc
  1503  0150  0D6D               	rlf	CheckOnceResult@cnt,w
  1504  0151  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  1505  0152  279B  118A         	fcall	PL6	;call to abstracted procedure
  1506  0154  0268               	subwf	CheckOnceResult@KeyValue+1,w
  1507  0155  1D03               	skipz
  1508  0156  2959               	goto	u2675
  1509  0157  0875               	movf	??_CheckOnceResult,w
  1510  0158  0267               	subwf	CheckOnceResult@KeyValue,w
  1511  0159                     u2675:	
  1512  0159  1803               	skipnc
  1513  015A  2968               	goto	l3812
  1514                           
  1515                           ;CheckTouchKey.c: 286: {
  1516                           ;CheckTouchKey.c: 287: KeyResTemp = KeyReference[cnt] - KeyResTemp;
  1517  015B  1003               	clrc
  1518  015C  0D6D               	rlf	CheckOnceResult@cnt,w
  1519  015D  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  1520  015E  279B  118A         	fcall	PL6	;call to abstracted procedure
  1521  0160  086B               	movf	CheckOnceResult@KeyResTemp,w
  1522  0161  0275               	subwf	??_CheckOnceResult,w
  1523  0162  00EB               	movwf	CheckOnceResult@KeyResTemp
  1524  0163  086C               	movf	CheckOnceResult@KeyResTemp+1,w
  1525  0164  1C03               	skipc
  1526  0165  0A6C               	incf	CheckOnceResult@KeyResTemp+1,w
  1527  0166  0276               	subwf	??_CheckOnceResult+1,w
  1528  0167  298C               	goto	L21
  1529  0168                     l3812:	
  1530                           ;CheckTouchKey.c: 288: }
  1531                           
  1532                           
  1533                           ;CheckTouchKey.c: 289: else if ((OldValue > KeyValue) && (KeyOldValue1[cnt] > KeyValue))
  1534  0168  0866               	movf	CheckOnceResult@OldValue+1,w
  1535  0169  0268               	subwf	CheckOnceResult@KeyValue+1,w
  1536  016A  1D03               	skipz
  1537  016B  296E               	goto	u2685
  1538  016C  0865               	movf	CheckOnceResult@OldValue,w
  1539  016D  0267               	subwf	CheckOnceResult@KeyValue,w
  1540  016E                     u2685:	
  1541  016E  1803               	skipnc
  1542  016F  29E4               	goto	l3858
  1543  0170  1003               	clrc
  1544  0171  0D6D               	rlf	CheckOnceResult@cnt,w
  1545  0172  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1546  0173  279B  118A         	fcall	PL6	;call to abstracted procedure
  1547  0175  0268               	subwf	CheckOnceResult@KeyValue+1,w
  1548  0176  1D03               	skipz
  1549  0177  297A               	goto	u2695
  1550  0178  0875               	movf	??_CheckOnceResult,w
  1551  0179  0267               	subwf	CheckOnceResult@KeyValue,w
  1552  017A                     u2695:	
  1553  017A  1803               	skipnc
  1554  017B  29E4               	goto	l3858
  1555                           
  1556                           ;CheckTouchKey.c: 290: {
  1557                           ;CheckTouchKey.c: 291: KeyReference[cnt] = OldValue;
  1558  017C  1003               	clrc
  1559  017D  0D6D               	rlf	CheckOnceResult@cnt,w
  1560  017E  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  1561  017F  0084               	movwf	4
  1562  0180  0865               	movf	CheckOnceResult@OldValue,w
  1563  0181  0080               	movwf	0
  1564  0182  0A84               	incf	4,f
  1565  0183  0866               	movf	CheckOnceResult@OldValue+1,w
  1566  0184  0080               	movwf	0
  1567                           
  1568                           ;CheckTouchKey.c: 292: KeyResTemp = OldValue - KeyResTemp;
  1569  0185  086B               	movf	CheckOnceResult@KeyResTemp,w
  1570  0186  0265               	subwf	CheckOnceResult@OldValue,w
  1571  0187  00EB               	movwf	CheckOnceResult@KeyResTemp
  1572  0188  086C               	movf	CheckOnceResult@KeyResTemp+1,w
  1573  0189  1C03               	skipc
  1574  018A  0A6C               	incf	CheckOnceResult@KeyResTemp+1,w
  1575  018B  0266               	subwf	CheckOnceResult@OldValue+1,w
  1576  018C                     L21:	
  1577  018C  00EC               	movwf	CheckOnceResult@KeyResTemp+1
  1578                           
  1579                           ;CheckTouchKey.c: 297: }
  1580                           ;CheckTouchKey.c: 299: KeyUpShake[cnt] = 0;
  1581                           
  1582                           ;CheckTouchKey.c: 293: }
  1583  018D  086D               	movf	CheckOnceResult@cnt,w
  1584  018E  3EB8               	addlw	(low (_KeyUpShake| 0))& (0+255)
  1585  018F  0084               	movwf	4
  1586  0190  0180               	clrf	0
  1587                           
  1588                           ;CheckTouchKey.c: 302: {
  1589                           ;CheckTouchKey.c: 303: if(KeyResTemp >> 8)
  1590  0191  086C               	movf	CheckOnceResult@KeyResTemp+1,w
  1591  0192  1903               	btfsc	3,2
  1592  0193  2996               	goto	l3826
  1593                           
  1594                           ;CheckTouchKey.c: 304: {
  1595                           ;CheckTouchKey.c: 305: KeyDown = 0xFF;
  1596  0194  30FF               	movlw	255
  1597  0195  2997               	goto	L22
  1598  0196                     l3826:	
  1599                           ;CheckTouchKey.c: 306: }
  1600                           
  1601                           
  1602                           ;CheckTouchKey.c: 307: else
  1603                           ;CheckTouchKey.c: 308: {
  1604                           ;CheckTouchKey.c: 309: KeyDown = KeyResTemp & 0xFF;
  1605  0196  086B               	movf	CheckOnceResult@KeyResTemp,w
  1606  0197                     L22:	
  1607  0197  00EA               	movwf	CheckOnceResult@KeyDown
  1608                           
  1609                           ;CheckTouchKey.c: 310: }
  1610                           ;CheckTouchKey.c: 312: if(KeyMaxSub < KeyDown)
  1611  0198  0247               	subwf	_KeyMaxSub,w
  1612  0199  1803               	skipnc
  1613  019A  299E               	goto	l3832
  1614                           
  1615                           ;CheckTouchKey.c: 313: {
  1616                           ;CheckTouchKey.c: 314: KeyMaxSub = KeyDown;
  1617  019B  086A               	movf	CheckOnceResult@KeyDown,w
  1618  019C  00C7               	movwf	_KeyMaxSub
  1619  019D  29DE               	goto	l3856
  1620  019E                     l3832:	
  1621                           ;CheckTouchKey.c: 316: }
  1622                           
  1623                           ;CheckTouchKey.c: 315: KeyHave(cnt,flag);
  1624                           
  1625                           
  1626                           ;CheckTouchKey.c: 317: else
  1627                           ;CheckTouchKey.c: 318: {
  1628                           ;CheckTouchKey.c: 319: KeyCounter++;
  1629  019E  0AC8               	incf	_KeyCounter,f
  1630  019F  29E4               	goto	l3858
  1631  01A0                     L23:	
  1632                           ;CheckTouchKey.c: 328: else
  1633                           ;CheckTouchKey.c: 329: {
  1634                           ;CheckTouchKey.c: 332: if(KeyReference[cnt]+1 < KeyValue)
  1635                           
  1636  01A0  0D6D               	rlf	CheckOnceResult@cnt,w
  1637  01A1  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  1638  01A2  0084               	movwf	4
  1639  01A3  1383               	bcf	3,7	;select IRP bank1
  1640  01A4  0800               	movf	0,w
  1641  01A5  00F5               	movwf	??_CheckOnceResult
  1642  01A6  0A84               	incf	4,f
  1643  01A7  0800               	movf	0,w
  1644  01A8  00F6               	movwf	??_CheckOnceResult+1
  1645  01A9  0875               	movf	??_CheckOnceResult,w
  1646  01AA  3E01               	addlw	1
  1647  01AB  00F7               	movwf	??_CheckOnceResult+2
  1648  01AC  0876               	movf	??_CheckOnceResult+1,w
  1649  01AD  1803               	skipnc
  1650  01AE  3E01               	addlw	1
  1651  01AF  00F8               	movwf	??_CheckOnceResult+3
  1652  01B0  0868               	movf	CheckOnceResult@KeyValue+1,w
  1653  01B1  0278               	subwf	??_CheckOnceResult+3,w
  1654  01B2  1D03               	skipz
  1655  01B3  29B6               	goto	u2725
  1656  01B4  0867               	movf	CheckOnceResult@KeyValue,w
  1657  01B5  0277               	subwf	??_CheckOnceResult+2,w
  1658  01B6                     u2725:	
  1659  01B6  1C03               	btfss	3,0
  1660  01B7  29E4               	goto	l3858
  1661                           
  1662                           ;CheckTouchKey.c: 336: else if((KeyOldValue2[cnt]+KeyDown<KeyResTemp) || (KeyOldValue1[c
      +                          nt]+KeyDown<KeyResTemp))
  1663  01B8  1003               	clrc
  1664  01B9  0D6D               	rlf	CheckOnceResult@cnt,w
  1665  01BA  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1666  01BB  0084               	movwf	4
  1667  01BC  0800               	movf	0,w
  1668  01BD  2789  118A         	fcall	PL4	;call to abstracted procedure
  1669  01BF  1C03               	skipc
  1670  01C0  29CA               	goto	l3846
  1671  01C1  1003               	clrc
  1672  01C2  0D6D               	rlf	CheckOnceResult@cnt,w
  1673  01C3  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1674  01C4  0084               	movwf	4
  1675  01C5  0800               	movf	0,w
  1676  01C6  2789  118A         	fcall	PL4	;call to abstracted procedure
  1677  01C8  1803               	skipnc
  1678  01C9  29D6               	goto	l3850
  1679  01CA                     l3846:	
  1680                           
  1681                           ;CheckTouchKey.c: 337: {
  1682                           ;CheckTouchKey.c: 338: if(++KeyUpShake[cnt] > 8)
  1683  01CA  086D               	movf	CheckOnceResult@cnt,w
  1684  01CB  3EB8               	addlw	(low (_KeyUpShake| 0))& (0+255)
  1685  01CC  0084               	movwf	4
  1686  01CD  3009               	movlw	9
  1687  01CE  0A80               	incf	0,f
  1688  01CF  0200               	subwf	0,w
  1689  01D0  1C03               	skipc
  1690  01D1  29DA               	goto	l3854
  1691                           
  1692                           ;CheckTouchKey.c: 339: {
  1693                           ;CheckTouchKey.c: 340: KeyClearOne(cnt);
  1694  01D2  086D               	movf	CheckOnceResult@cnt,w
  1695  01D3  256D  118A         	fcall	_KeyClearOne
  1696                           
  1697                           ;CheckTouchKey.c: 341: continue;
  1698  01D5  29E4               	goto	l3858
  1699  01D6                     l3850:	
  1700                           
  1701                           ;CheckTouchKey.c: 344: else
  1702                           ;CheckTouchKey.c: 345: {
  1703                           ;CheckTouchKey.c: 346: KeyUpShake[cnt] = 0;
  1704  01D6  086D               	movf	CheckOnceResult@cnt,w
  1705  01D7  3EB8               	addlw	(low (_KeyUpShake| 0))& (0+255)
  1706  01D8  0084               	movwf	4
  1707  01D9  0180               	clrf	0
  1708  01DA                     l3854:	
  1709                           
  1710                           ;CheckTouchKey.c: 353: else if(!(KeyData[0] | KeyData[1]))
  1711  01DA  0829               	movf	_KeyData+1,w	;volatile
  1712  01DB  0428               	iorwf	_KeyData,w	;volatile
  1713  01DC  1D03               	btfss	3,2
  1714  01DD  29E4               	goto	l3858
  1715  01DE                     l3856:	
  1716                           
  1717                           ;CheckTouchKey.c: 354: {
  1718                           ;CheckTouchKey.c: 355: KeyHave(cnt,flag);
  1719  01DE  0869               	movf	CheckOnceResult@flag,w
  1720  01DF  00F2               	movwf	KeyHave@flag
  1721  01E0  01F3               	clrf	KeyHave@flag+1
  1722  01E1  086D               	movf	CheckOnceResult@cnt,w
  1723  01E2  2200  118A         	fcall	_KeyHave
  1724  01E4                     l3858:	
  1725  01E4  3003               	movlw	3
  1726  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  1727  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  1728  01E7  0AED               	incf	CheckOnceResult@cnt,f
  1729  01E8  026D               	subwf	CheckOnceResult@cnt,w
  1730  01E9  1803               	btfsc	3,0
  1731  01EA  0008               	return
  1732  01EB  2911               	goto	l3794
  1733  01EC                     __end_of_CheckOnceResult:	
  1734  01EC                     __ptext36:	
  1735 ;; *************** function _KeyIsIn *****************
  1736 ;; Defined at:
  1737 ;;		line 74 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  cnt             1    wreg     unsigned char 
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  cnt             1    3[COMMON] unsigned char 
  1742 ;;  i               1    2[COMMON] unsigned char 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      unsigned char 
  1745 ;; Registers used:
  1746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 300/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1752 ;;      Params:         0       0       0       0       0
  1753 ;;      Locals:         2       0       0       0       0
  1754 ;;      Temps:          0       0       0       0       0
  1755 ;;      Totals:         2       0       0       0       0
  1756 ;;Total ram usage:        2 bytes
  1757 ;; Hardware stack levels used:    2
  1758 ;; Hardware stack levels required when called:    1
  1759 ;; This function calls:
  1760 ;;		Nothing
  1761 ;; This function is called by:
  1762 ;;		_KeyClearIn
  1763 ;;		_CheckOnceResult
  1764 ;;		_CheckKeyOldValue
  1765 ;; This function uses a non-reentrant model
  1766 ;;
  1767                           
  1768                           
  1769                           ;psect for function _KeyIsIn
  1770  01EC                     _KeyIsIn:	
  1771                           
  1772                           ;incstack = 0
  1773                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  1774                           ;KeyIsIn@cnt stored from wreg
  1775  01EC  00F3               	movwf	KeyIsIn@cnt
  1776                           
  1777                           ;CheckTouchKey.c: 76: unsigned char i = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  1778  01ED  3907               	andlw	7
  1779  01EE  3E0F               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  1780  01EF  0084               	movwf	4
  1781  01F0  158A  2000  118A   	fcall	stringdir
  1782  01F3  00F2               	movwf	KeyIsIn@i
  1783                           
  1784                           ;CheckTouchKey.c: 78: if(cnt&0x8)
  1785  01F4  1DF3               	btfss	KeyIsIn@cnt,3
  1786  01F5  29FA               	goto	l3328
  1787                           
  1788                           ;CheckTouchKey.c: 79: {
  1789                           ;CheckTouchKey.c: 80: i &= KeyFlag[1];
  1790  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  1791  01F7  1303               	bcf	3,6	;RP1=0, select bank0
  1792  01F8  0843               	movf	_KeyFlag+1,w	;volatile
  1793  01F9  29FD               	goto	L28
  1794  01FA                     l3328:	
  1795                           ;CheckTouchKey.c: 81: }
  1796                           
  1797                           
  1798                           ;CheckTouchKey.c: 82: else
  1799                           ;CheckTouchKey.c: 83: {
  1800                           ;CheckTouchKey.c: 84: i &= KeyFlag[0];
  1801  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  1802  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  1803  01FC  0842               	movf	_KeyFlag,w	;volatile
  1804  01FD                     L28:	
  1805  01FD  05F2               	andwf	KeyIsIn@i,f
  1806                           
  1807                           ;CheckTouchKey.c: 85: }
  1808                           ;CheckTouchKey.c: 86: return i;
  1809  01FE  0872               	movf	KeyIsIn@i,w
  1810  01FF  0008               	return
  1811  0200                     __end_of_KeyIsIn:	
  1812  0200                     __ptext33:	
  1813 ;; *************** function _KeyHave *****************
  1814 ;; Defined at:
  1815 ;;		line 158 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;  cnt             1    wreg     unsigned char 
  1818 ;;  flag            2    2[COMMON] unsigned int 
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;  cnt             1    4[COMMON] unsigned char 
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, status,2, status,0
  1825 ;; Tracked objects:
  1826 ;;		On entry : B00/0
  1827 ;;		On exit  : B00/0
  1828 ;;		Unchanged: 800/0
  1829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1830 ;;      Params:         2       0       0       0       0
  1831 ;;      Locals:         1       0       0       0       0
  1832 ;;      Temps:          0       0       0       0       0
  1833 ;;      Totals:         3       0       0       0       0
  1834 ;;Total ram usage:        3 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    1
  1837 ;; This function calls:
  1838 ;;		Nothing
  1839 ;; This function is called by:
  1840 ;;		_CheckOnceResult
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           
  1845                           ;psect for function _KeyHave
  1846  0200                     _KeyHave:	
  1847                           
  1848                           ;incstack = 0
  1849                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  1850                           ;KeyHave@cnt stored from wreg
  1851  0200  00F4               	movwf	KeyHave@cnt
  1852                           
  1853                           ;CheckTouchKey.c: 160: KeyCounter++;
  1854  0201  0AC8               	incf	_KeyCounter,f
  1855                           
  1856                           ;CheckTouchKey.c: 163: {
  1857                           ;CheckTouchKey.c: 164: KeyData[0] = 0;
  1858  0202  01A8               	clrf	_KeyData	;volatile
  1859                           
  1860                           ;CheckTouchKey.c: 165: KeyData[1] = 0;
  1861  0203  01A9               	clrf	_KeyData+1	;volatile
  1862                           
  1863                           ;CheckTouchKey.c: 166: if(cnt&0x8)
  1864  0204  1DF4               	btfss	KeyHave@cnt,3
  1865  0205  2A09               	goto	l3560
  1866                           
  1867                           ;CheckTouchKey.c: 167: {
  1868                           ;CheckTouchKey.c: 168: KeyData[1] = flag;
  1869  0206  0872               	movf	KeyHave@flag,w
  1870  0207  00A9               	movwf	_KeyData+1	;volatile
  1871                           
  1872                           ;CheckTouchKey.c: 169: }
  1873  0208  0008               	return
  1874  0209                     l3560:	
  1875                           
  1876                           ;CheckTouchKey.c: 170: else
  1877                           ;CheckTouchKey.c: 171: {
  1878                           ;CheckTouchKey.c: 172: KeyData[0] = flag;
  1879  0209  0872               	movf	KeyHave@flag,w
  1880  020A  00A8               	movwf	_KeyData	;volatile
  1881  020B  0008               	return
  1882  020C                     __end_of_KeyHave:	
  1883  020C                     __ptext28:	
  1884 ;; *************** function _KeyStopClear *****************
  1885 ;; Defined at:
  1886 ;;		line 123 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;		None
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  i               1    3[COMMON] unsigned char 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  1    wreg      void 
  1893 ;; Registers used:
  1894 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 800/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1900 ;;      Params:         0       0       0       0       0
  1901 ;;      Locals:         1       0       0       0       0
  1902 ;;      Temps:          0       0       0       0       0
  1903 ;;      Totals:         1       0       0       0       0
  1904 ;;Total ram usage:        1 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:    2
  1907 ;; This function calls:
  1908 ;;		_KeyClearOne
  1909 ;; This function is called by:
  1910 ;;		_CheckTouchKey
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           
  1915                           ;psect for function _KeyStopClear
  1916  020C                     _KeyStopClear:	
  1917                           
  1918                           ;CheckTouchKey.c: 125: unsigned char i;
  1919                           ;CheckTouchKey.c: 126: KeyFlag[0] = 0;
  1920                           
  1921                           ;incstack = 0
  1922                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1923  020C  1283               	bcf	3,5	;RP0=0, select bank0
  1924  020D  1303               	bcf	3,6	;RP1=0, select bank0
  1925  020E  01C2               	clrf	_KeyFlag	;volatile
  1926                           
  1927                           ;CheckTouchKey.c: 127: KeyFlag[1] = 0;
  1928  020F  01C3               	clrf	_KeyFlag+1	;volatile
  1929                           
  1930                           ;CheckTouchKey.c: 128: for(i = 0; i < KeyTotalNumber; i++)
  1931  0210  01F3               	clrf	KeyStopClear@i
  1932  0211                     l3784:	
  1933                           
  1934                           ;CheckTouchKey.c: 129: {
  1935                           ;CheckTouchKey.c: 130: KeyResSum[i] = 0;
  1936  0211  1003               	clrc
  1937  0212  0D73               	rlf	KeyStopClear@i,w
  1938  0213  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  1939  0214  0084               	movwf	4
  1940  0215  1383               	bcf	3,7	;select IRP bank1
  1941  0216  0180               	clrf	0
  1942  0217  0A84               	incf	4,f
  1943  0218  0180               	clrf	0
  1944                           
  1945                           ;CheckTouchKey.c: 131: KeyClearOne(i);
  1946  0219  0873               	movf	KeyStopClear@i,w
  1947  021A  256D  118A         	fcall	_KeyClearOne
  1948  021C  3003               	movlw	3
  1949  021D  0AF3               	incf	KeyStopClear@i,f
  1950  021E  0273               	subwf	KeyStopClear@i,w
  1951  021F  1803               	btfsc	3,0
  1952  0220  0008               	return
  1953  0221  2A11               	goto	l3784
  1954  0222                     __end_of_KeyStopClear:	
  1955  0222                     __ptext5:	
  1956 ;; *************** function _showCtr *****************
  1957 ;; Defined at:
  1958 ;;		line 785 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;		None
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;		None
  1963 ;; Return value:  Size  Location     Type
  1964 ;;                  1    wreg      void 
  1965 ;; Registers used:
  1966 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1967 ;; Tracked objects:
  1968 ;;		On entry : 300/0
  1969 ;;		On exit  : 200/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1972 ;;      Params:         0       0       0       0       0
  1973 ;;      Locals:         0       0       0       0       0
  1974 ;;      Temps:          0       0       0       0       0
  1975 ;;      Totals:         0       0       0       0       0
  1976 ;;Total ram usage:        0 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    5
  1979 ;; This function calls:
  1980 ;;		_WorkSleep
  1981 ;;		___lbdiv
  1982 ;;		___lbmod
  1983 ;;		___lwmod
  1984 ;;		_initTM1650
  1985 ;;		_setZeroStep
  1986 ;;		_setZeroStep2
  1987 ;;		_tm1650cmd
  1988 ;; This function is called by:
  1989 ;;		_main
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           
  1994                           ;psect for function _showCtr
  1995  0222                     _showCtr:	
  1996                           
  1997                           ;main.c: 787: if(firstTime > 0)
  1998                           
  1999                           ;incstack = 0
  2000                           ; Regs used in _showCtr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2001  0222  0840               	movf	_firstTime,w
  2002  0223  0441               	iorwf	_firstTime+1,w
  2003  0224  1903               	btfsc	3,2
  2004  0225  2A2B               	goto	l4690
  2005                           
  2006                           ;main.c: 788: {
  2007                           ;main.c: 789: showFlag = 1;
  2008  0226  01E2               	clrf	_showFlag
  2009  0227  0AE2               	incf	_showFlag,f
  2010                           
  2011                           ;main.c: 790: sleepTime = 0;
  2012  0228  01AE               	clrf	_sleepTime
  2013  0229  01AF               	clrf	_sleepTime+1
  2014                           
  2015                           ;main.c: 791: initTM1650();
  2016  022A  2E8C               	ljmp	l3622
  2017  022B                     l4690:	
  2018                           ;main.c: 792: }
  2019                           
  2020                           
  2021                           ;main.c: 793: else if(workStep > 0)
  2022  022B  087B               	movf	_workStep,w
  2023  022C  1903               	btfsc	3,2
  2024  022D  2A49               	goto	l4704
  2025  022E  30FF               	movlw	255
  2026                           
  2027                           ;main.c: 794: {
  2028                           ;main.c: 795: showFlag = 1;
  2029  022F  01E2               	clrf	_showFlag
  2030  0230  0AE2               	incf	_showFlag,f
  2031                           
  2032                           ;main.c: 796: sleepTime = 0;
  2033  0231  01AE               	clrf	_sleepTime
  2034  0232  01AF               	clrf	_sleepTime+1
  2035                           
  2036                           ;main.c: 797: showLed1 = 0xFF;
  2037  0233  00DF               	movwf	_showLed1
  2038                           
  2039                           ;main.c: 798: showLed2 = 0xFF;
  2040  0234  00DE               	movwf	_showLed2
  2041                           
  2042                           ;main.c: 799: showShiWei = numArray[workStep / 10];
  2043  0235  300A               	movlw	10
  2044  0236  00F2               	movwf	___lbdiv@divisor
  2045  0237  087B               	movf	_workStep,w
  2046  0238  22E0               	fcall	___lbdiv
  2047  0239  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  2048  023A  0084               	movwf	4
  2049  023B  158A  2000  118A   	fcall	stringdir
  2050  023E  00E1               	movwf	_showShiWei
  2051                           
  2052                           ;main.c: 800: showGeWei = numArray[workStep % 10];
  2053  023F  300A               	movlw	10
  2054  0240  00F2               	movwf	___lbmod@divisor
  2055  0241  087B               	movf	_workStep,w
  2056  0242  22FB               	fcall	___lbmod
  2057  0243  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  2058  0244  0084               	movwf	4
  2059  0245  158A  2000         	fcall	stringdir
  2060  0247  00E0               	movwf	_showGeWei
  2061                           
  2062                           ;main.c: 801: }
  2063  0248  0008               	return
  2064  0249                     l4704:	
  2065                           
  2066                           ;main.c: 802: else if(ledLightTime > 0)
  2067  0249  0838               	movf	_ledLightTime,w
  2068  024A  0439               	iorwf	_ledLightTime+1,w
  2069  024B  1903               	btfsc	3,2
  2070  024C  2A83               	goto	l4736
  2071  024D  3055               	movlw	85
  2072                           
  2073                           ;main.c: 803: {
  2074                           ;main.c: 804: showFlag = 1;
  2075  024E  01E2               	clrf	_showFlag
  2076  024F  0AE2               	incf	_showFlag,f
  2077                           
  2078                           ;main.c: 805: sleepTime = 0;
  2079  0250  01AE               	clrf	_sleepTime
  2080  0251  01AF               	clrf	_sleepTime+1
  2081                           
  2082                           ;main.c: 806: if(preBatValue >= 85)
  2083  0252  0259               	subwf	_preBatValue,w
  2084  0253  1C03               	skipc
  2085  0254  2A5D               	goto	l4714
  2086                           
  2087                           ;main.c: 807: {
  2088                           ;main.c: 808: showShiWei = numArray[9];
  2089  0255  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
  2090  0256  0084               	movwf	4
  2091  0257  158A  2000  118A   	fcall	stringdir
  2092  025A  00E1               	movwf	_showShiWei
  2093                           
  2094                           ;main.c: 809: showGeWei = numArray[9];
  2095  025B  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
  2096  025C  2A7B               	goto	L2
  2097  025D                     l4714:	
  2098                           ;main.c: 810: }
  2099                           
  2100                           
  2101                           ;main.c: 811: else if(preBatValue > 60)
  2102  025D  303D               	movlw	61
  2103  025E  0259               	subwf	_preBatValue,w
  2104  025F  1C03               	skipc
  2105  0260  2A63               	goto	l4718
  2106                           
  2107                           ;main.c: 812: {
  2108                           ;main.c: 813: showShiWei = numArray[8];
  2109  0261  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
  2110  0262  2A75               	goto	L3
  2111  0263                     l4718:	
  2112                           ;main.c: 815: }
  2113                           
  2114                           ;main.c: 814: showGeWei = numArray[0];
  2115                           
  2116                           
  2117                           ;main.c: 816: else if(preBatValue > 40)
  2118  0263  3029               	movlw	41
  2119  0264  0259               	subwf	_preBatValue,w
  2120  0265  1C03               	skipc
  2121  0266  2A69               	goto	l4722
  2122                           
  2123                           ;main.c: 817: {
  2124                           ;main.c: 818: showShiWei = numArray[6];
  2125  0267  3007               	movlw	low (((_numArray+6)-__stringbase)| (0+32768))
  2126  0268  2A75               	goto	L3
  2127  0269                     l4722:	
  2128                           ;main.c: 820: }
  2129                           
  2130                           ;main.c: 819: showGeWei = numArray[0];
  2131                           
  2132                           
  2133                           ;main.c: 821: else if(preBatValue > 20)
  2134  0269  3015               	movlw	21
  2135  026A  0259               	subwf	_preBatValue,w
  2136  026B  1C03               	skipc
  2137  026C  2A6F               	goto	l4726
  2138                           
  2139                           ;main.c: 822: {
  2140                           ;main.c: 823: showShiWei = numArray[4];
  2141  026D  3005               	movlw	low (((_numArray+4)-__stringbase)| (0+32768))
  2142  026E  2A75               	goto	L3
  2143  026F                     l4726:	
  2144                           ;main.c: 825: }
  2145                           
  2146                           ;main.c: 824: showGeWei = numArray[0];
  2147                           
  2148                           
  2149                           ;main.c: 826: else if(preBatValue > 0)
  2150  026F  0859               	movf	_preBatValue,w
  2151  0270  1903               	btfsc	3,2
  2152  0271  2A74               	goto	l4730
  2153                           
  2154                           ;main.c: 827: {
  2155                           ;main.c: 828: showShiWei = numArray[2];
  2156  0272  3003               	movlw	low (((_numArray+2)-__stringbase)| (0+32768))
  2157  0273  2A75               	goto	L3
  2158  0274                     l4730:	
  2159                           ;main.c: 830: }
  2160                           
  2161                           ;main.c: 829: showGeWei = numArray[0];
  2162                           
  2163                           
  2164                           ;main.c: 831: else
  2165                           ;main.c: 832: {
  2166                           ;main.c: 833: showShiWei = numArray[0];
  2167  0274  3001               	movlw	low (_numArray-__stringbase)
  2168  0275                     L3:	
  2169  0275  0084               	movwf	4
  2170  0276  158A  2000  118A   	fcall	stringdir
  2171  0279  00E1               	movwf	_showShiWei
  2172                           
  2173                           ;main.c: 834: showGeWei = numArray[0];
  2174  027A  3001               	movlw	low (_numArray-__stringbase)
  2175  027B                     L2:	
  2176  027B  0084               	movwf	4
  2177  027C  158A  2000         	fcall	stringdir
  2178  027E  00E0               	movwf	_showGeWei
  2179                           
  2180                           ;main.c: 835: }
  2181                           ;main.c: 836: showLed1 = 0xFF;
  2182  027F  30FF               	movlw	255
  2183  0280  00DF               	movwf	_showLed1
  2184                           
  2185                           ;main.c: 837: showLed2 = 0xFF;
  2186  0281  00DE               	movwf	_showLed2
  2187                           
  2188                           ;main.c: 838: }
  2189  0282  0008               	return
  2190  0283                     l4736:	
  2191                           
  2192                           ;main.c: 839: else if(chrgFlag)
  2193  0283  085B               	movf	_chrgFlag,w
  2194  0284  1903               	btfsc	3,2
  2195  0285  2AAC               	goto	l4762
  2196  0286  3040               	movlw	64
  2197                           
  2198                           ;main.c: 840: {
  2199                           ;main.c: 841: showFlag = 1;
  2200  0287  01E2               	clrf	_showFlag
  2201  0288  0AE2               	incf	_showFlag,f
  2202                           
  2203                           ;main.c: 842: sleepTime = 0;
  2204  0289  01AE               	clrf	_sleepTime
  2205  028A  01AF               	clrf	_sleepTime+1
  2206                           
  2207                           ;main.c: 843: if(++chrgBatStepTime > 63)
  2208  028B  0ACE               	incf	_chrgBatStepTime,f
  2209  028C  024E               	subwf	_chrgBatStepTime,w
  2210  028D  1C03               	skipc
  2211  028E  2AAB               	goto	l4760
  2212  028F  3063               	movlw	99
  2213                           
  2214                           ;main.c: 844: {
  2215                           ;main.c: 845: chrgBatStepTime = 0;
  2216  0290  01CE               	clrf	_chrgBatStepTime
  2217                           
  2218                           ;main.c: 846: if(preBatValue >= 99)
  2219  0291  0259               	subwf	_preBatValue,w
  2220  0292  1C03               	skipc
  2221  0293  2AA2               	goto	l4754
  2222  0294  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
  2223                           
  2224                           ;main.c: 847: {
  2225                           ;main.c: 848: zeroStep = 0;
  2226  0295  01FA               	clrf	_zeroStep
  2227                           
  2228                           ;main.c: 849: showShiWei = numArray[9];
  2229  0296  0084               	movwf	4
  2230  0297  158A  2000  118A   	fcall	stringdir
  2231  029A  00E1               	movwf	_showShiWei
  2232                           
  2233                           ;main.c: 850: showGeWei = numArray[9];
  2234  029B  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
  2235  029C  0084               	movwf	4
  2236  029D  158A  2000  118A   	fcall	stringdir
  2237  02A0  00E0               	movwf	_showGeWei
  2238                           
  2239                           ;main.c: 851: }
  2240  02A1  2AAB               	goto	l4760
  2241  02A2                     l4754:	
  2242                           
  2243                           ;main.c: 852: else
  2244                           ;main.c: 853: {
  2245                           ;main.c: 854: if(++zeroStep > 12)
  2246  02A2  300D               	movlw	13
  2247  02A3  0AFA               	incf	_zeroStep,f
  2248  02A4  027A               	subwf	_zeroStep,w
  2249  02A5  1C03               	skipc
  2250  02A6  2AA9               	goto	l4758
  2251                           
  2252                           ;main.c: 855: {
  2253                           ;main.c: 856: zeroStep = 1;
  2254  02A7  01FA               	clrf	_zeroStep
  2255  02A8  0AFA               	incf	_zeroStep,f
  2256  02A9                     l4758:	
  2257                           
  2258                           ;main.c: 857: }
  2259                           ;main.c: 858: showShiWei = 0x00;
  2260  02A9  01E1               	clrf	_showShiWei
  2261                           
  2262                           ;main.c: 859: showGeWei = 0x00;
  2263  02AA  01E0               	clrf	_showGeWei
  2264  02AB                     l4760:	
  2265                           
  2266                           ;main.c: 860: }
  2267                           ;main.c: 861: }
  2268                           ;main.c: 862: setZeroStep2();
  2269  02AB  2F1E               	ljmp	l3702
  2270  02AC                     l4762:	
  2271                           ;main.c: 864: }
  2272                           
  2273                           
  2274                           ;main.c: 865: else if(zeroStep > 0)
  2275  02AC  087A               	movf	_zeroStep,w
  2276  02AD  1903               	btfsc	3,2
  2277  02AE  2AB6               	goto	l4770
  2278                           
  2279                           ;main.c: 866: {
  2280                           ;main.c: 867: showFlag = 1;
  2281  02AF  01E2               	clrf	_showFlag
  2282  02B0  0AE2               	incf	_showFlag,f
  2283                           
  2284                           ;main.c: 868: sleepTime = 0;
  2285  02B1  01AE               	clrf	_sleepTime
  2286  02B2  01AF               	clrf	_sleepTime+1
  2287                           
  2288                           ;main.c: 869: showShiWei = showGeWei = 0;
  2289  02B3  01E0               	clrf	_showGeWei
  2290  02B4  01E1               	clrf	_showShiWei
  2291                           
  2292                           ;main.c: 870: setZeroStep();
  2293  02B5  2EBC               	ljmp	l3640
  2294  02B6                     l4770:	
  2295                           ;main.c: 871: }
  2296                           
  2297                           
  2298                           ;main.c: 872: else
  2299                           ;main.c: 873: {
  2300                           ;main.c: 874: if(sleepTime > 10 && sleepTime % 20 == 0)
  2301  02B6  3000               	movlw	0
  2302  02B7  022F               	subwf	_sleepTime+1,w
  2303  02B8  300B               	movlw	11
  2304  02B9  1903               	skipnz
  2305  02BA  022E               	subwf	_sleepTime,w
  2306  02BB  1C03               	skipc
  2307  02BC  2AD3               	goto	l4782
  2308  02BD  3014               	movlw	20
  2309  02BE  00F2               	movwf	___lwmod@divisor
  2310  02BF  01F3               	clrf	___lwmod@divisor+1
  2311  02C0  082F               	movf	_sleepTime+1,w
  2312  02C1  00F5               	movwf	___lwmod@dividend+1
  2313  02C2  082E               	movf	_sleepTime,w
  2314  02C3  00F4               	movwf	___lwmod@dividend
  2315  02C4  2317  118A         	fcall	___lwmod
  2316  02C6  0872               	movf	?___lwmod,w
  2317  02C7  0473               	iorwf	?___lwmod+1,w
  2318  02C8  1D03               	btfss	3,2
  2319  02C9  2AD3               	goto	l4782
  2320  02CA  3004               	movlw	4
  2321                           
  2322                           ;main.c: 875: {
  2323                           ;main.c: 876: showFlag = 0;
  2324  02CB  01E2               	clrf	_showFlag
  2325                           
  2326                           ;main.c: 877: tm1650cmd(0X48,0x04);
  2327  02CC  00F4               	movwf	tm1650cmd@seg_data
  2328  02CD  3048               	movlw	72
  2329  02CE  23B5  118A         	fcall	_tm1650cmd
  2330                           
  2331                           ;main.c: 878: PORTC |= 0x01;
  2332                           
  2333                           ;main.c: 879: PORTB |= 0x80;
  2334  02D0  27D4  118A         	fcall	PL20	;call to abstracted procedure
  2335  02D2  1786               	bsf	6,7	;volatile
  2336  02D3                     l4782:	
  2337                           
  2338                           ;main.c: 880: }
  2339                           ;main.c: 881: if(++sleepTime > 40)
  2340  02D3  0AAE               	incf	_sleepTime,f
  2341  02D4  1903               	skipnz
  2342  02D5  0AAF               	incf	_sleepTime+1,f
  2343  02D6  3000               	movlw	0
  2344  02D7  022F               	subwf	_sleepTime+1,w
  2345  02D8  3029               	movlw	41
  2346  02D9  1903               	skipnz
  2347  02DA  022E               	subwf	_sleepTime,w
  2348  02DB  1C03               	skipc
  2349  02DC  0008               	return
  2350                           
  2351                           ;main.c: 882: {
  2352                           ;main.c: 883: sleepTime = 0;
  2353  02DD  01AE               	clrf	_sleepTime
  2354  02DE  01AF               	clrf	_sleepTime+1
  2355                           
  2356                           ;main.c: 884: WorkSleep();
  2357  02DF  2C92               	ljmp	l4612
  2358  02E0                     __end_of_showCtr:	
  2359  02E0                     __ptext15:	
  2360 ;; *************** function ___lbdiv *****************
  2361 ;; Defined at:
  2362 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;  dividend        1    wreg     unsigned char 
  2365 ;;  divisor         1    2[COMMON] unsigned char 
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  dividend        1    3[COMMON] unsigned char 
  2368 ;;  quotient        1    5[COMMON] unsigned char 
  2369 ;;  counter         1    4[COMMON] unsigned char 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      unsigned char 
  2372 ;; Registers used:
  2373 ;;		wreg, status,2, status,0
  2374 ;; Tracked objects:
  2375 ;;		On entry : 300/0
  2376 ;;		On exit  : 300/0
  2377 ;;		Unchanged: 300/0
  2378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2379 ;;      Params:         1       0       0       0       0
  2380 ;;      Locals:         3       0       0       0       0
  2381 ;;      Temps:          0       0       0       0       0
  2382 ;;      Totals:         4       0       0       0       0
  2383 ;;Total ram usage:        4 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    1
  2386 ;; This function calls:
  2387 ;;		Nothing
  2388 ;; This function is called by:
  2389 ;;		_showCtr
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           
  2394                           ;psect for function ___lbdiv
  2395  02E0                     ___lbdiv:	
  2396                           
  2397                           ;incstack = 0
  2398                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2399                           ;___lbdiv@dividend stored from wreg
  2400  02E0  00F3               	movwf	___lbdiv@dividend
  2401  02E1  01F5               	clrf	___lbdiv@quotient
  2402  02E2  0872               	movf	___lbdiv@divisor,w
  2403  02E3  1903               	btfsc	3,2
  2404  02E4  2AF9               	goto	l3964
  2405  02E5  01F4               	clrf	___lbdiv@counter
  2406  02E6                     l3950:	
  2407  02E6  0AF4               	incf	___lbdiv@counter,f
  2408  02E7  1BF2               	btfsc	___lbdiv@divisor,7
  2409  02E8  2AEC               	goto	l1952
  2410  02E9  1003               	clrc
  2411  02EA  0DF2               	rlf	___lbdiv@divisor,f
  2412  02EB  2AE6               	goto	l3950
  2413  02EC                     l1952:	
  2414  02EC  1003               	clrc
  2415  02ED  0DF5               	rlf	___lbdiv@quotient,f
  2416  02EE  0872               	movf	___lbdiv@divisor,w
  2417  02EF  0273               	subwf	___lbdiv@dividend,w
  2418  02F0  1C03               	skipc
  2419  02F1  2AF6               	goto	L14
  2420  02F2  0872               	movf	___lbdiv@divisor,w
  2421  02F3  02F3               	subwf	___lbdiv@dividend,f
  2422  02F4  1475               	bsf	___lbdiv@quotient,0
  2423  02F5  1003               	clrc
  2424  02F6                     L14:	
  2425  02F6  0CF2               	rrf	___lbdiv@divisor,f
  2426  02F7  0BF4               	decfsz	___lbdiv@counter,f
  2427  02F8  2AEC               	goto	l1952
  2428  02F9                     l3964:	
  2429  02F9  0875               	movf	___lbdiv@quotient,w
  2430  02FA  0008               	return
  2431  02FB                     __end_of___lbdiv:	
  2432  02FB                     __ptext14:	
  2433 ;; *************** function ___lbmod *****************
  2434 ;; Defined at:
  2435 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;  dividend        1    wreg     unsigned char 
  2438 ;;  divisor         1    2[COMMON] unsigned char 
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;  dividend        1    4[COMMON] unsigned char 
  2441 ;;  rem             1    6[COMMON] unsigned char 
  2442 ;;  counter         1    5[COMMON] unsigned char 
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  1    wreg      unsigned char 
  2445 ;; Registers used:
  2446 ;;		wreg, status,2, status,0
  2447 ;; Tracked objects:
  2448 ;;		On entry : 300/0
  2449 ;;		On exit  : 300/0
  2450 ;;		Unchanged: 300/0
  2451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2452 ;;      Params:         1       0       0       0       0
  2453 ;;      Locals:         3       0       0       0       0
  2454 ;;      Temps:          1       0       0       0       0
  2455 ;;      Totals:         5       0       0       0       0
  2456 ;;Total ram usage:        5 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    1
  2459 ;; This function calls:
  2460 ;;		Nothing
  2461 ;; This function is called by:
  2462 ;;		_showCtr
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           
  2467                           ;psect for function ___lbmod
  2468  02FB                     ___lbmod:	
  2469                           
  2470                           ;incstack = 0
  2471                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  2472                           ;___lbmod@dividend stored from wreg
  2473  02FB  00F4               	movwf	___lbmod@dividend
  2474  02FC  3008               	movlw	8
  2475  02FD  00F5               	movwf	___lbmod@counter
  2476  02FE  01F6               	clrf	___lbmod@rem
  2477  02FF                     l3972:	
  2478  02FF  0874               	movf	___lbmod@dividend,w
  2479  0300  00F3               	movwf	??___lbmod
  2480  0301  3007               	movlw	7
  2481  0302  1003               	clrc
  2482  0303                     L13:	
  2483  0303  0CF3               	rrf	??___lbmod,f
  2484  0304  3EFF               	addlw	-1
  2485  0305  1003               	clrc
  2486  0306  1D03               	skipz
  2487  0307  2B03               	goto	L13
  2488  0308  0D76               	rlf	___lbmod@rem,w
  2489  0309  0473               	iorwf	??___lbmod,w
  2490  030A  00F6               	movwf	___lbmod@rem
  2491  030B  1003               	clrc
  2492  030C  0DF4               	rlf	___lbmod@dividend,f
  2493  030D  0872               	movf	___lbmod@divisor,w
  2494  030E  0276               	subwf	___lbmod@rem,w
  2495  030F  1C03               	skipc
  2496  0310  2B13               	goto	l3980
  2497  0311  0872               	movf	___lbmod@divisor,w
  2498  0312  02F6               	subwf	___lbmod@rem,f
  2499  0313                     l3980:	
  2500  0313  0BF5               	decfsz	___lbmod@counter,f
  2501  0314  2AFF               	goto	l3972
  2502  0315  0876               	movf	___lbmod@rem,w
  2503  0316  0008               	return
  2504  0317                     __end_of___lbmod:	
  2505  0317                     __ptext13:	
  2506 ;; *************** function ___lwmod *****************
  2507 ;; Defined at:
  2508 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;  divisor         2    2[COMMON] unsigned int 
  2511 ;;  dividend        2    4[COMMON] unsigned int 
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;  counter         1    6[COMMON] unsigned char 
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  2    2[COMMON] unsigned int 
  2516 ;; Registers used:
  2517 ;;		wreg, status,2, status,0
  2518 ;; Tracked objects:
  2519 ;;		On entry : 300/0
  2520 ;;		On exit  : 300/0
  2521 ;;		Unchanged: 300/0
  2522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2523 ;;      Params:         4       0       0       0       0
  2524 ;;      Locals:         1       0       0       0       0
  2525 ;;      Temps:          0       0       0       0       0
  2526 ;;      Totals:         5       0       0       0       0
  2527 ;;Total ram usage:        5 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; Hardware stack levels required when called:    1
  2530 ;; This function calls:
  2531 ;;		Nothing
  2532 ;; This function is called by:
  2533 ;;		_showCtr
  2534 ;; This function uses a non-reentrant model
  2535 ;;
  2536                           
  2537                           
  2538                           ;psect for function ___lwmod
  2539  0317                     ___lwmod:	
  2540                           
  2541                           ;incstack = 0
  2542                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2543  0317  0872               	movf	___lwmod@divisor,w
  2544  0318  0473               	iorwf	___lwmod@divisor+1,w
  2545  0319  1903               	btfsc	3,2
  2546  031A  2B36               	goto	l4002
  2547  031B  01F6               	clrf	___lwmod@counter
  2548  031C                     L11:	
  2549  031C  0AF6               	incf	___lwmod@counter,f
  2550  031D  1BF3               	btfsc	___lwmod@divisor+1,7
  2551  031E  2B23               	goto	l3994
  2552  031F  1003               	clrc
  2553  0320  0DF2               	rlf	___lwmod@divisor,f
  2554  0321  0DF3               	rlf	___lwmod@divisor+1,f
  2555  0322  2B1C               	goto	L11
  2556  0323                     l3994:	
  2557  0323  0873               	movf	___lwmod@divisor+1,w
  2558  0324  0275               	subwf	___lwmod@dividend+1,w
  2559  0325  1D03               	skipz
  2560  0326  2B29               	goto	u3045
  2561  0327  0872               	movf	___lwmod@divisor,w
  2562  0328  0274               	subwf	___lwmod@dividend,w
  2563  0329                     u3045:	
  2564  0329  1C03               	skipc
  2565  032A  2B32               	goto	L12
  2566  032B  0872               	movf	___lwmod@divisor,w
  2567  032C  02F4               	subwf	___lwmod@dividend,f
  2568  032D  0873               	movf	___lwmod@divisor+1,w
  2569  032E  1C03               	skipc
  2570  032F  03F5               	decf	___lwmod@dividend+1,f
  2571  0330  02F5               	subwf	___lwmod@dividend+1,f
  2572  0331  1003               	clrc
  2573  0332                     L12:	
  2574  0332  0CF3               	rrf	___lwmod@divisor+1,f
  2575  0333  0CF2               	rrf	___lwmod@divisor,f
  2576  0334  0BF6               	decfsz	___lwmod@counter,f
  2577  0335  2B23               	goto	l3994
  2578  0336                     l4002:	
  2579  0336  0875               	movf	___lwmod@dividend+1,w
  2580  0337  00F3               	movwf	?___lwmod+1
  2581  0338  0874               	movf	___lwmod@dividend,w
  2582  0339  00F2               	movwf	?___lwmod
  2583  033A  0008               	return
  2584  033B                     __end_of___lwmod:	
  2585  033B                     __ptext4:	
  2586 ;; *************** function _refreshTM1650 *****************
  2587 ;; Defined at:
  2588 ;;		line 612 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;		None
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;		None
  2593 ;; Return value:  Size  Location     Type
  2594 ;;                  1    wreg      void 
  2595 ;; Registers used:
  2596 ;;		wreg, status,2, status,0, pclath, cstack
  2597 ;; Tracked objects:
  2598 ;;		On entry : 300/0
  2599 ;;		On exit  : 300/0
  2600 ;;		Unchanged: 0/0
  2601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2602 ;;      Params:         0       0       0       0       0
  2603 ;;      Locals:         0       0       0       0       0
  2604 ;;      Temps:          0       0       0       0       0
  2605 ;;      Totals:         0       0       0       0       0
  2606 ;;Total ram usage:        0 bytes
  2607 ;; Hardware stack levels used:    1
  2608 ;; Hardware stack levels required when called:    3
  2609 ;; This function calls:
  2610 ;;		_tm1650cmd
  2611 ;; This function is called by:
  2612 ;;		_task1
  2613 ;; This function uses a non-reentrant model
  2614 ;;
  2615                           
  2616                           
  2617                           ;psect for function _refreshTM1650
  2618  033B                     _refreshTM1650:	
  2619                           
  2620                           ;main.c: 614: if(showFlag)
  2621                           
  2622                           ;incstack = 0
  2623                           ; Regs used in _refreshTM1650: [wreg+status,2+status,0+pclath+cstack]
  2624  033B  0862               	movf	_showFlag,w
  2625  033C  1903               	btfsc	3,2
  2626  033D  2B76               	goto	l3628
  2627                           
  2628                           ;main.c: 615: {
  2629                           ;main.c: 616: tm1650cmd(0X48,0x21);
  2630  033E  3021               	movlw	33
  2631  033F  00F4               	movwf	tm1650cmd@seg_data
  2632  0340  3048               	movlw	72
  2633  0341  23B5  118A         	fcall	_tm1650cmd
  2634  0343  0000               	nop	;# 
  2635  0344  0000               	nop	;# 
  2636  0345  0000               	nop	;# 
  2637  0346  0000               	nop	;# 
  2638  0347  0000               	nop	;# 
  2639  0348  0000               	nop	;# 
  2640                           
  2641                           ;main.c: 618: tm1650cmd(0X68,showLed2);
  2642  0349  1283               	bcf	3,5	;RP0=0, select bank0
  2643  034A  1303               	bcf	3,6	;RP1=0, select bank0
  2644  034B  085E               	movf	_showLed2,w
  2645  034C  00F4               	movwf	tm1650cmd@seg_data
  2646  034D  3068               	movlw	104
  2647  034E  23B5  118A         	fcall	_tm1650cmd
  2648  0350  0000               	nop	;# 
  2649  0351  0000               	nop	;# 
  2650  0352  0000               	nop	;# 
  2651  0353  0000               	nop	;# 
  2652  0354  0000               	nop	;# 
  2653  0355  0000               	nop	;# 
  2654                           
  2655                           ;main.c: 620: tm1650cmd(0X6A,showShiWei);
  2656  0356  1283               	bcf	3,5	;RP0=0, select bank0
  2657  0357  1303               	bcf	3,6	;RP1=0, select bank0
  2658  0358  0861               	movf	_showShiWei,w
  2659  0359  00F4               	movwf	tm1650cmd@seg_data
  2660  035A  306A               	movlw	106
  2661  035B  23B5  118A         	fcall	_tm1650cmd
  2662  035D  0000               	nop	;# 
  2663  035E  0000               	nop	;# 
  2664  035F  0000               	nop	;# 
  2665  0360  0000               	nop	;# 
  2666  0361  0000               	nop	;# 
  2667  0362  0000               	nop	;# 
  2668                           
  2669                           ;main.c: 622: tm1650cmd(0X6C,showGeWei);
  2670  0363  1283               	bcf	3,5	;RP0=0, select bank0
  2671  0364  1303               	bcf	3,6	;RP1=0, select bank0
  2672  0365  0860               	movf	_showGeWei,w
  2673  0366  00F4               	movwf	tm1650cmd@seg_data
  2674  0367  306C               	movlw	108
  2675  0368  23B5  118A         	fcall	_tm1650cmd
  2676  036A  0000               	nop	;# 
  2677  036B  0000               	nop	;# 
  2678  036C  0000               	nop	;# 
  2679  036D  0000               	nop	;# 
  2680  036E  0000               	nop	;# 
  2681  036F  0000               	nop	;# 
  2682                           
  2683                           ;main.c: 624: tm1650cmd(0X6E,showLed1);
  2684  0370  1283               	bcf	3,5	;RP0=0, select bank0
  2685  0371  1303               	bcf	3,6	;RP1=0, select bank0
  2686  0372  085F               	movf	_showLed1,w
  2687  0373  00F4               	movwf	tm1650cmd@seg_data
  2688  0374  306E               	movlw	110
  2689  0375  2BB5               	ljmp	_tm1650cmd
  2690  0376                     l3628:	
  2691                           ;main.c: 625: }
  2692                           
  2693                           
  2694                           ;main.c: 626: else if(sleepTime < 10)
  2695  0376  3000               	movlw	0
  2696  0377  022F               	subwf	_sleepTime+1,w
  2697  0378  300A               	movlw	10
  2698  0379  1903               	skipnz
  2699  037A  022E               	subwf	_sleepTime,w
  2700  037B  1803               	skipnc
  2701  037C  0008               	return
  2702  037D  3068               	movlw	104
  2703                           
  2704                           ;main.c: 627: {
  2705                           ;main.c: 628: tm1650cmd(0X68,0);
  2706  037E  01F4               	clrf	tm1650cmd@seg_data
  2707  037F  23B5  118A         	fcall	_tm1650cmd
  2708  0381  0000               	nop	;# 
  2709  0382  0000               	nop	;# 
  2710  0383  0000               	nop	;# 
  2711  0384  0000               	nop	;# 
  2712  0385  0000               	nop	;# 
  2713  0386  0000               	nop	;# 
  2714  0387  306A               	movlw	106
  2715                           
  2716                           ;main.c: 630: tm1650cmd(0X6A,0);
  2717  0388  01F4               	clrf	tm1650cmd@seg_data
  2718  0389  23B5  118A         	fcall	_tm1650cmd
  2719  038B  0000               	nop	;# 
  2720  038C  0000               	nop	;# 
  2721  038D  0000               	nop	;# 
  2722  038E  0000               	nop	;# 
  2723  038F  0000               	nop	;# 
  2724  0390  0000               	nop	;# 
  2725  0391  306C               	movlw	108
  2726                           
  2727                           ;main.c: 632: tm1650cmd(0X6C,0);
  2728  0392  01F4               	clrf	tm1650cmd@seg_data
  2729  0393  23B5  118A         	fcall	_tm1650cmd
  2730  0395  0000               	nop	;# 
  2731  0396  0000               	nop	;# 
  2732  0397  0000               	nop	;# 
  2733  0398  0000               	nop	;# 
  2734  0399  0000               	nop	;# 
  2735  039A  0000               	nop	;# 
  2736  039B  306E               	movlw	110
  2737                           
  2738                           ;main.c: 634: tm1650cmd(0X6E,0);
  2739  039C  01F4               	clrf	tm1650cmd@seg_data
  2740  039D  23B5  118A         	fcall	_tm1650cmd
  2741  039F  0000               	nop	;# 
  2742  03A0  0000               	nop	;# 
  2743  03A1  0000               	nop	;# 
  2744  03A2  0000               	nop	;# 
  2745  03A3  0000               	nop	;# 
  2746  03A4  0000               	nop	;# 
  2747  03A5  3048               	movlw	72
  2748                           
  2749                           ;main.c: 636: tm1650cmd(0X48,0x00);
  2750  03A6  01F4               	clrf	tm1650cmd@seg_data
  2751  03A7  23B5               	fcall	_tm1650cmd
  2752  03A8  0000               	nop	;# 
  2753  03A9  0000               	nop	;# 
  2754  03AA  0000               	nop	;# 
  2755  03AB  0000               	nop	;# 
  2756  03AC  0000               	nop	;# 
  2757  03AD  0000               	nop	;# 
  2758                           
  2759                           ;main.c: 638: showShiWei = 0x00;
  2760  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  2761  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  2762  03B0  01E1               	clrf	_showShiWei
  2763                           
  2764                           ;main.c: 639: showGeWei = 0x00;
  2765  03B1  01E0               	clrf	_showGeWei
  2766                           
  2767                           ;main.c: 640: showLed1 = 0x00;
  2768  03B2  01DF               	clrf	_showLed1
  2769                           
  2770                           ;main.c: 641: showLed2 = 0x00;
  2771  03B3  01DE               	clrf	_showLed2
  2772  03B4  0008               	return
  2773  03B5                     __end_of_refreshTM1650:	
  2774  03B5                     __ptext9:	
  2775 ;; *************** function _tm1650cmd *****************
  2776 ;; Defined at:
  2777 ;;		line 588 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;  digAddr         1    wreg     unsigned char 
  2780 ;;  seg_data        1    4[COMMON] unsigned char 
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;  digAddr         1    5[COMMON] unsigned char 
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      void 
  2785 ;; Registers used:
  2786 ;;		wreg, status,2, status,0, pclath, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 300/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2792 ;;      Params:         1       0       0       0       0
  2793 ;;      Locals:         1       0       0       0       0
  2794 ;;      Temps:          0       0       0       0       0
  2795 ;;      Totals:         2       0       0       0       0
  2796 ;;Total ram usage:        2 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    2
  2799 ;; This function calls:
  2800 ;;		_TM1650_START
  2801 ;;		_TM1650_STOP
  2802 ;;		_write_8bit
  2803 ;; This function is called by:
  2804 ;;		_initTM1650
  2805 ;;		_refreshTM1650
  2806 ;;		_showCtr
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           
  2811                           ;psect for function _tm1650cmd
  2812  03B5                     _tm1650cmd:	
  2813                           
  2814                           ;incstack = 0
  2815                           ; Regs used in _tm1650cmd: [wreg+status,2+status,0+pclath+cstack]
  2816                           ;tm1650cmd@digAddr stored from wreg
  2817  03B5  00F5               	movwf	tm1650cmd@digAddr
  2818                           
  2819                           ;main.c: 590: TM1650_START();
  2820  03B6  247D  118A         	fcall	_TM1650_START
  2821                           
  2822                           ;main.c: 591: write_8bit(digAddr);
  2823  03B8  0875               	movf	tm1650cmd@digAddr,w
  2824  03B9  23BF  118A         	fcall	_write_8bit
  2825                           
  2826                           ;main.c: 592: write_8bit(seg_data);
  2827  03BB  0874               	movf	tm1650cmd@seg_data,w
  2828  03BC  23BF  118A         	fcall	_write_8bit
  2829                           
  2830                           ;main.c: 593: TM1650_STOP();
  2831  03BE  2E6A               	ljmp	l3306
  2832  03BF                     __end_of_tm1650cmd:	
  2833  03BF                     __ptext10:	
  2834 ;; *************** function _write_8bit *****************
  2835 ;; Defined at:
  2836 ;;		line 486 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  dat             1    wreg     unsigned char 
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;  dat             1    2[COMMON] unsigned char 
  2841 ;;  i               1    3[COMMON] unsigned char 
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  1    wreg      void 
  2844 ;; Registers used:
  2845 ;;		wreg, status,2, status,0
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/300
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2851 ;;      Params:         0       0       0       0       0
  2852 ;;      Locals:         2       0       0       0       0
  2853 ;;      Temps:          0       0       0       0       0
  2854 ;;      Totals:         2       0       0       0       0
  2855 ;;Total ram usage:        2 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    1
  2858 ;; This function calls:
  2859 ;;		Nothing
  2860 ;; This function is called by:
  2861 ;;		_tm1650cmd
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           
  2866                           ;psect for function _write_8bit
  2867  03BF                     _write_8bit:	
  2868                           
  2869                           ;incstack = 0
  2870                           ; Regs used in _write_8bit: [wreg+status,2+status,0]
  2871                           ;write_8bit@dat stored from wreg
  2872  03BF  00F2               	movwf	write_8bit@dat
  2873                           
  2874                           ;main.c: 488: unsigned char i;
  2875                           ;main.c: 489: RC0=0;
  2876  03C0  1683               	bsf	3,5	;RP0=1, select bank3
  2877  03C1  1703               	bsf	3,6	;RP1=1, select bank3
  2878  03C2  1005               	bcf	5,0	;volatile
  2879                           
  2880                           ;main.c: 490: for(i=0;i<8;i++)
  2881  03C3  01F3               	clrf	write_8bit@i
  2882  03C4                     l1296:	
  2883                           
  2884                           ;main.c: 491: {
  2885                           ;main.c: 492: if(dat&0x80)
  2886  03C4  1FF2               	btfss	write_8bit@dat,7
  2887  03C5  2BF7               	goto	l1298
  2888                           
  2889                           ;main.c: 493: {
  2890                           ;main.c: 494: RB7=1;
  2891  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  2892  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  2893  03C8  1786               	bsf	6,7	;volatile
  2894  03C9  0000               	nop	;# 
  2895  03CA  0000               	nop	;# 
  2896  03CB  0000               	nop	;# 
  2897  03CC  0000               	nop	;# 
  2898  03CD  0000               	nop	;# 
  2899  03CE  0000               	nop	;# 
  2900  03CF  0000               	nop	;# 
  2901  03D0  0000               	nop	;# 
  2902  03D1  0000               	nop	;# 
  2903  03D2  0000               	nop	;# 
  2904  03D3  0000               	nop	;# 
  2905  03D4  0000               	nop	;# 
  2906                           
  2907                           ;main.c: 497: RC0=1;
  2908  03D5  1683               	bsf	3,5	;RP0=1, select bank3
  2909  03D6  1703               	bsf	3,6	;RP1=1, select bank3
  2910  03D7  1405               	bsf	5,0	;volatile
  2911  03D8  0000               	nop	;# 
  2912  03D9  0000               	nop	;# 
  2913  03DA  0000               	nop	;# 
  2914  03DB  0000               	nop	;# 
  2915  03DC  0000               	nop	;# 
  2916  03DD  0000               	nop	;# 
  2917  03DE  0000               	nop	;# 
  2918  03DF  0000               	nop	;# 
  2919  03E0  0000               	nop	;# 
  2920  03E1  0000               	nop	;# 
  2921  03E2  0000               	nop	;# 
  2922  03E3  0000               	nop	;# 
  2923  03E4  0000               	nop	;# 
  2924  03E5  0000               	nop	;# 
  2925  03E6  0000               	nop	;# 
  2926  03E7  0000               	nop	;# 
  2927  03E8  0000               	nop	;# 
  2928  03E9  0000               	nop	;# 
  2929  03EA  0000               	nop	;# 
  2930  03EB  0000               	nop	;# 
  2931  03EC  0000               	nop	;# 
  2932  03ED  0000               	nop	;# 
  2933  03EE  0000               	nop	;# 
  2934  03EF  0000               	nop	;# 
  2935  03F0  0000               	nop	;# 
  2936  03F1  0000               	nop	;# 
  2937  03F2  0000               	nop	;# 
  2938  03F3  0000               	nop	;# 
  2939  03F4  0000               	nop	;# 
  2940  03F5  0000               	nop	;# 
  2941  03F6  2C27               	goto	L10
  2942  03F7                     l1298:	
  2943                           ;main.c: 504: }
  2944                           
  2945                           ;main.c: 503: RC0=0;
  2946                           
  2947                           
  2948                           ;main.c: 505: else
  2949                           ;main.c: 506: {
  2950                           ;main.c: 507: RB7=0;
  2951  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2952  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  2953  03F9  1386               	bcf	6,7	;volatile
  2954  03FA  0000               	nop	;# 
  2955  03FB  0000               	nop	;# 
  2956  03FC  0000               	nop	;# 
  2957  03FD  0000               	nop	;# 
  2958  03FE  0000               	nop	;# 
  2959  03FF  0000               	nop	;# 
  2960  0400  0000               	nop	;# 
  2961  0401  0000               	nop	;# 
  2962  0402  0000               	nop	;# 
  2963  0403  0000               	nop	;# 
  2964  0404  0000               	nop	;# 
  2965  0405  0000               	nop	;# 
  2966                           
  2967                           ;main.c: 510: RC0=1;
  2968  0406  1683               	bsf	3,5	;RP0=1, select bank3
  2969  0407  1703               	bsf	3,6	;RP1=1, select bank3
  2970  0408  1405               	bsf	5,0	;volatile
  2971  0409  0000               	nop	;# 
  2972  040A  0000               	nop	;# 
  2973  040B  0000               	nop	;# 
  2974  040C  0000               	nop	;# 
  2975  040D  0000               	nop	;# 
  2976  040E  0000               	nop	;# 
  2977  040F  0000               	nop	;# 
  2978  0410  0000               	nop	;# 
  2979  0411  0000               	nop	;# 
  2980  0412  0000               	nop	;# 
  2981  0413  0000               	nop	;# 
  2982  0414  0000               	nop	;# 
  2983  0415  0000               	nop	;# 
  2984  0416  0000               	nop	;# 
  2985  0417  0000               	nop	;# 
  2986  0418  0000               	nop	;# 
  2987  0419  0000               	nop	;# 
  2988  041A  0000               	nop	;# 
  2989  041B  0000               	nop	;# 
  2990  041C  0000               	nop	;# 
  2991  041D  0000               	nop	;# 
  2992  041E  0000               	nop	;# 
  2993  041F  0000               	nop	;# 
  2994  0420  0000               	nop	;# 
  2995  0421  0000               	nop	;# 
  2996  0422  0000               	nop	;# 
  2997  0423  0000               	nop	;# 
  2998  0424  0000               	nop	;# 
  2999  0425  0000               	nop	;# 
  3000  0426  0000               	nop	;# 
  3001  0427                     L10:	
  3002                           
  3003                           ;main.c: 516: RC0=0;
  3004  0427  1683               	bsf	3,5	;RP0=1, select bank3
  3005  0428  1703               	bsf	3,6	;RP1=1, select bank3
  3006  0429  1005               	bcf	5,0	;volatile
  3007  042A  3008               	movlw	8
  3008                           
  3009                           ;main.c: 517: }
  3010                           ;main.c: 518: dat<<=1;
  3011  042B  1003               	clrc
  3012  042C  0DF2               	rlf	write_8bit@dat,f
  3013  042D  0AF3               	incf	write_8bit@i,f
  3014  042E  0273               	subwf	write_8bit@i,w
  3015  042F  1C03               	skipc
  3016  0430  2BC4               	goto	l1296
  3017                           
  3018                           ;main.c: 519: }
  3019                           ;main.c: 520: RB7=1;
  3020  0431  1283               	bcf	3,5	;RP0=0, select bank0
  3021  0432  1303               	bcf	3,6	;RP1=0, select bank0
  3022  0433  1786               	bsf	6,7	;volatile
  3023  0434  0000               	nop	;# 
  3024  0435  0000               	nop	;# 
  3025  0436  0000               	nop	;# 
  3026  0437  0000               	nop	;# 
  3027  0438  0000               	nop	;# 
  3028  0439  0000               	nop	;# 
  3029  043A  0000               	nop	;# 
  3030  043B  0000               	nop	;# 
  3031  043C  0000               	nop	;# 
  3032  043D  0000               	nop	;# 
  3033  043E  0000               	nop	;# 
  3034  043F  0000               	nop	;# 
  3035  0440  0000               	nop	;# 
  3036  0441  0000               	nop	;# 
  3037  0442  0000               	nop	;# 
  3038  0443  0000               	nop	;# 
  3039  0444  0000               	nop	;# 
  3040  0445  0000               	nop	;# 
  3041  0446  0000               	nop	;# 
  3042  0447  0000               	nop	;# 
  3043  0448  0000               	nop	;# 
  3044  0449  0000               	nop	;# 
  3045  044A  0000               	nop	;# 
  3046  044B  0000               	nop	;# 
  3047                           
  3048                           ;main.c: 525: RC0=1;
  3049  044C  1683               	bsf	3,5	;RP0=1, select bank3
  3050  044D  1703               	bsf	3,6	;RP1=1, select bank3
  3051  044E  1405               	bsf	5,0	;volatile
  3052  044F  0000               	nop	;# 
  3053  0450  0000               	nop	;# 
  3054  0451  0000               	nop	;# 
  3055  0452  0000               	nop	;# 
  3056  0453  0000               	nop	;# 
  3057  0454  0000               	nop	;# 
  3058  0455  0000               	nop	;# 
  3059  0456  0000               	nop	;# 
  3060  0457  0000               	nop	;# 
  3061  0458  0000               	nop	;# 
  3062  0459  0000               	nop	;# 
  3063  045A  0000               	nop	;# 
  3064  045B  0000               	nop	;# 
  3065  045C  0000               	nop	;# 
  3066  045D  0000               	nop	;# 
  3067  045E  0000               	nop	;# 
  3068  045F  0000               	nop	;# 
  3069  0460  0000               	nop	;# 
  3070  0461  0000               	nop	;# 
  3071  0462  0000               	nop	;# 
  3072  0463  0000               	nop	;# 
  3073  0464  0000               	nop	;# 
  3074  0465  0000               	nop	;# 
  3075  0466  0000               	nop	;# 
  3076  0467  0000               	nop	;# 
  3077  0468  0000               	nop	;# 
  3078  0469  0000               	nop	;# 
  3079  046A  0000               	nop	;# 
  3080  046B  0000               	nop	;# 
  3081  046C  0000               	nop	;# 
  3082                           
  3083                           ;main.c: 531: RC0=0;
  3084  046D  1683               	bsf	3,5	;RP0=1, select bank3
  3085  046E  1703               	bsf	3,6	;RP1=1, select bank3
  3086  046F  1005               	bcf	5,0	;volatile
  3087  0470  0000               	nop	;# 
  3088  0471  0000               	nop	;# 
  3089  0472  0000               	nop	;# 
  3090  0473  0000               	nop	;# 
  3091  0474  0000               	nop	;# 
  3092  0475  0000               	nop	;# 
  3093  0476  0000               	nop	;# 
  3094  0477  0000               	nop	;# 
  3095  0478  0000               	nop	;# 
  3096  0479  0000               	nop	;# 
  3097  047A  0000               	nop	;# 
  3098  047B  0000               	nop	;# 
  3099  047C  0008               	return
  3100  047D                     __end_of_write_8bit:	
  3101  047D                     __ptext12:	
  3102 ;; *************** function _TM1650_START *****************
  3103 ;; Defined at:
  3104 ;;		line 461 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;		None
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;		None
  3109 ;; Return value:  Size  Location     Type
  3110 ;;                  1    wreg      void 
  3111 ;; Registers used:
  3112 ;;		None
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 300/300
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3118 ;;      Params:         0       0       0       0       0
  3119 ;;      Locals:         0       0       0       0       0
  3120 ;;      Temps:          0       0       0       0       0
  3121 ;;      Totals:         0       0       0       0       0
  3122 ;;Total ram usage:        0 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; Hardware stack levels required when called:    1
  3125 ;; This function calls:
  3126 ;;		Nothing
  3127 ;; This function is called by:
  3128 ;;		_tm1650cmd
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           
  3133                           ;psect for function _TM1650_START
  3134  047D                     _TM1650_START:	
  3135                           
  3136                           ;main.c: 463: RC0=1;
  3137                           
  3138                           ;incstack = 0
  3139                           ; Regs used in _TM1650_START: []
  3140                           
  3141                           ;main.c: 464: RB7=1;
  3142  047D  27D4               	fcall	PL20	;call to abstracted procedure
  3143  047E  1786               	bsf	6,7	;volatile
  3144  047F  0000               	nop	;# 
  3145  0480  0000               	nop	;# 
  3146  0481  0000               	nop	;# 
  3147  0482  0000               	nop	;# 
  3148  0483  0000               	nop	;# 
  3149  0484  0000               	nop	;# 
  3150                           
  3151                           ;main.c: 466: RB7=0;
  3152  0485  1283               	bcf	3,5	;RP0=0, select bank0
  3153  0486  1303               	bcf	3,6	;RP1=0, select bank0
  3154  0487  1386               	bcf	6,7	;volatile
  3155  0488  0000               	nop	;# 
  3156  0489  0000               	nop	;# 
  3157  048A  0000               	nop	;# 
  3158  048B  0000               	nop	;# 
  3159  048C  0000               	nop	;# 
  3160  048D  0000               	nop	;# 
  3161                           
  3162                           ;main.c: 468: RC0=0;
  3163  048E  1683               	bsf	3,5	;RP0=1, select bank3
  3164  048F  1703               	bsf	3,6	;RP1=1, select bank3
  3165  0490  1005               	bcf	5,0	;volatile
  3166  0491  0008               	return
  3167  0492                     __end_of_TM1650_START:	
  3168  0492                     __ptext16:	
  3169 ;; *************** function _WorkSleep *****************
  3170 ;; Defined at:
  3171 ;;		line 393 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;		None
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;		None
  3176 ;; Return value:  Size  Location     Type
  3177 ;;                  1    wreg      void 
  3178 ;; Registers used:
  3179 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3180 ;; Tracked objects:
  3181 ;;		On entry : 300/0
  3182 ;;		On exit  : 300/100
  3183 ;;		Unchanged: 0/0
  3184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3185 ;;      Params:         0       0       0       0       0
  3186 ;;      Locals:         0       0       0       0       0
  3187 ;;      Temps:          0       0       0       0       0
  3188 ;;      Totals:         0       0       0       0       0
  3189 ;;Total ram usage:        0 bytes
  3190 ;; Hardware stack levels used:    1
  3191 ;; Hardware stack levels required when called:    4
  3192 ;; This function calls:
  3193 ;;		_Init_System
  3194 ;;		_Refurbish_Sfr
  3195 ;;		_SystemEnterSleep
  3196 ;; This function is called by:
  3197 ;;		_showCtr
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           
  3202                           ;psect for function _WorkSleep
  3203  0492                     _WorkSleep:	
  3204  0492                     l4612:	
  3205                           ;incstack = 0
  3206                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3207                           
  3208                           
  3209                           ;main.c: 405: INTCON = 0;
  3210  0492  018B               	clrf	11	;volatile
  3211                           
  3212                           ;main.c: 406: PIE1 = 0;
  3213  0493  018D               	clrf	13	;volatile
  3214                           
  3215                           ;main.c: 407: PIE2 = 0;
  3216  0494  1703               	bsf	3,6	;RP1=1, select bank2
  3217  0495  0188               	clrf	8	;volatile
  3218                           
  3219                           ;main.c: 408: PIR1 = 0;
  3220  0496  1303               	bcf	3,6	;RP1=0, select bank0
  3221  0497  018C               	clrf	12	;volatile
  3222                           
  3223                           ;main.c: 409: PIR2 = 0;
  3224  0498  1703               	bsf	3,6	;RP1=1, select bank2
  3225  0499  0187               	clrf	7	;volatile
  3226                           
  3227                           ;main.c: 410: T2CON = 0;
  3228  049A  1303               	bcf	3,6	;RP1=0, select bank0
  3229  049B  0192               	clrf	18	;volatile
  3230                           
  3231                           ;main.c: 411: ADCON1 = 0;
  3232  049C  1683               	bsf	3,5	;RP0=1, select bank1
  3233  049D  019C               	clrf	28	;volatile
  3234                           
  3235                           ;main.c: 412: SWDTEN = 0;
  3236  049E  1088               	bcf	8,1	;volatile
  3237  049F  0064               	clrwdt	;# 
  3238                           
  3239                           ;main.c: 415: ADCON0 = 0;
  3240  04A0  1683               	bsf	3,5	;RP0=1, select bank1
  3241  04A1  1303               	bcf	3,6	;RP1=0, select bank1
  3242  04A2  019D               	clrf	29	;volatile
  3243                           
  3244                           ;main.c: 418: TRISA = 0x22;
  3245  04A3  3022               	movlw	34
  3246                           
  3247                           ;main.c: 419: PORTA = 0;
  3248                           
  3249                           ;main.c: 420: TRISB = 0x18;
  3250  04A4  27CD  118A         	fcall	PL18	;call to abstracted procedure
  3251                           
  3252                           ;main.c: 421: TRISC = 0x00;
  3253  04A6  1703               	bsf	3,6	;RP1=1, select bank3
  3254  04A7  0186               	clrf	6	;volatile
  3255                           
  3256                           ;main.c: 422: PORTC = 0x01;
  3257  04A8  3001               	movlw	1
  3258  04A9  0085               	movwf	5	;volatile
  3259                           
  3260                           ;main.c: 423: PORTB = 0x80;
  3261  04AA  3080               	movlw	128
  3262  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  3263  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  3264  04AD  0086               	movwf	6	;volatile
  3265                           
  3266                           ;main.c: 424: RACIF = 0;
  3267  04AE  1703               	bsf	3,6	;RP1=1, select bank2
  3268  04AF  1087               	bcf	7,1	;volatile
  3269                           
  3270                           ;main.c: 425: IOCA = 0x20;
  3271  04B0  3020               	movlw	32
  3272  04B1  1683               	bsf	3,5	;RP0=1, select bank3
  3273  04B2  0088               	movwf	8	;volatile
  3274                           
  3275                           ;main.c: 426: RACIE = 1;
  3276  04B3  1283               	bcf	3,5	;RP0=0, select bank2
  3277  04B4  1488               	bsf	8,1	;volatile
  3278                           
  3279                           ;main.c: 427: PORTA;
  3280  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  3281  04B6  0805               	movf	5,w	;volatile
  3282                           
  3283                           ;main.c: 439: SystemEnterSleep();
  3284  04B7  24CF  118A         	fcall	_SystemEnterSleep
  3285  04B9  0000               	nop	;# 
  3286  04BA  0000               	nop	;# 
  3287  04BB  0000               	nop	;# 
  3288  04BC  0000               	nop	;# 
  3289  04BD  0000               	nop	;# 
  3290  04BE  0000               	nop	;# 
  3291                           
  3292                           ;main.c: 441: if(RACIF)
  3293  04BF  1283               	bcf	3,5	;RP0=0, select bank2
  3294  04C0  1703               	bsf	3,6	;RP1=1, select bank2
  3295  04C1  1C87               	btfss	7,1	;volatile
  3296  04C2  2CC6               	goto	l4642
  3297                           
  3298                           ;main.c: 442: {
  3299                           ;main.c: 443: RACIF = 0;
  3300  04C3  1087               	bcf	7,1	;volatile
  3301                           
  3302                           ;main.c: 444: PORTA;
  3303  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  3304  04C5  0805               	movf	5,w	;volatile
  3305  04C6                     l4642:	
  3306                           
  3307                           ;main.c: 445: }
  3308                           ;main.c: 446: if(RCCIF)
  3309  04C6  1703               	bsf	3,6	;RP1=1, select bank2
  3310  04C7  1D07               	btfss	7,2	;volatile
  3311  04C8  2CCC               	goto	l4648
  3312                           
  3313                           ;main.c: 447: {
  3314                           ;main.c: 448: RCCIF = 0;
  3315  04C9  1107               	bcf	7,2	;volatile
  3316                           
  3317                           ;main.c: 449: PORTC;
  3318  04CA  1683               	bsf	3,5	;RP0=1, select bank3
  3319  04CB  0805               	movf	5,w	;volatile
  3320  04CC                     l4648:	
  3321                           
  3322                           ;main.c: 450: }
  3323                           ;main.c: 452: Refurbish_Sfr();
  3324  04CC  260E  118A         	fcall	_Refurbish_Sfr
  3325                           
  3326                           ;main.c: 453: Init_System();
  3327  04CE  2E40               	ljmp	l3376
  3328  04CF                     __end_of_WorkSleep:	
  3329  04CF                     __ptext17:	
  3330 ;; *************** function _SystemEnterSleep *****************
  3331 ;; Defined at:
  3332 ;;		line 578 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;		None
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;  wake            2    6[BANK0 ] unsigned int 
  3337 ;;  KeyResTemp      2    4[BANK0 ] unsigned int 
  3338 ;;  KeyValue        2    2[BANK0 ] unsigned int 
  3339 ;;  cnt             1    8[BANK0 ] unsigned char 
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  1    wreg      void 
  3342 ;; Registers used:
  3343 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3344 ;; Tracked objects:
  3345 ;;		On entry : 300/0
  3346 ;;		On exit  : B00/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3349 ;;      Params:         0       0       0       0       0
  3350 ;;      Locals:         0       7       0       0       0
  3351 ;;      Temps:          0       2       0       0       0
  3352 ;;      Totals:         0       9       0       0       0
  3353 ;;Total ram usage:        9 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; Hardware stack levels required when called:    3
  3356 ;; This function calls:
  3357 ;;		_ClearResSum
  3358 ;;		_GetTouchKeyValue
  3359 ;;		_KeyClearOne
  3360 ;; This function is called by:
  3361 ;;		_WorkSleep
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365                           
  3366                           ;psect for function _SystemEnterSleep
  3367  04CF                     _SystemEnterSleep:	
  3368  04CF                     l1671:	
  3369                           ;incstack = 0
  3370                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3371                           ;CheckTouchKey.c: 587: {
  3372                           ;CheckTouchKey.c: 588: while(1)
  3373                           
  3374  04CF  0064               	clrwdt	;# 
  3375                           
  3376                           ;CheckTouchKey.c: 593: TMR0 = 0;
  3377  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  3378  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  3379  04D2  0181               	clrf	1	;volatile
  3380                           
  3381                           ;CheckTouchKey.c: 594: OPTION_REG |= 0x07;
  3382  04D3  3007               	movlw	7
  3383  04D4  1683               	bsf	3,5	;RP0=1, select bank1
  3384  04D5  0481               	iorwf	1,f	;volatile
  3385                           
  3386                           ;CheckTouchKey.c: 596: OPTION_REG |= 0x08;
  3387  04D6  1581               	bsf	1,3	;volatile
  3388  04D7  0064               	clrwdt	;# 
  3389  04D8  300A               	movlw	10
  3390  04D9  1683               	bsf	3,5	;RP0=1, select bank1
  3391  04DA  1303               	bcf	3,6	;RP1=0, select bank1
  3392  04DB  0081               	movwf	1	;volatile
  3393  04DC  0064               	clrwdt	;# 
  3394                           
  3395                           ;CheckTouchKey.c: 602: KEYCON0 = 0;
  3396  04DD  1683               	bsf	3,5	;RP0=1, select bank1
  3397  04DE  1303               	bcf	3,6	;RP1=0, select bank1
  3398  04DF  0192               	clrf	18	;volatile
  3399                           
  3400                           ;CheckTouchKey.c: 603: KEYCON2 = 0;
  3401  04E0  0197               	clrf	23	;volatile
  3402                           
  3403                           ;CheckTouchKey.c: 605: OSCCON = 0x1;
  3404  04E1  3001               	movlw	1
  3405  04E2  0088               	movwf	8	;volatile
  3406  04E3  0063               	sleep	;# 
  3407  04E4  0000               	nop	;# 
  3408  04E5  0064               	clrwdt	;# 
  3409                           
  3410                           ;CheckTouchKey.c: 609: OSCCON = 0x71;
  3411  04E6  3071               	movlw	113
  3412  04E7  1683               	bsf	3,5	;RP0=1, select bank1
  3413  04E8  1303               	bcf	3,6	;RP1=0, select bank1
  3414  04E9  0088               	movwf	8	;volatile
  3415                           
  3416                           ;CheckTouchKey.c: 613: ClearResSum();
  3417  04EA  255E  118A         	fcall	_ClearResSum
  3418                           
  3419                           ;CheckTouchKey.c: 614: b_ksleep = 1;
  3420  04EC  1479               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3421                           
  3422                           ;CheckTouchKey.c: 615: GetTouchKeyValue();
  3423  04ED  2582  118A         	fcall	_GetTouchKeyValue
  3424                           
  3425                           ;CheckTouchKey.c: 617: cnt = 0;
  3426  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  3427  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  3428                           
  3429                           ;CheckTouchKey.c: 618: wake = 1;
  3430  04F1  27E6  118A         	fcall	PL26	;call to abstracted procedure
  3431                           
  3432                           ;CheckTouchKey.c: 619: if( RBIF || RCCIF || RACIF)
  3433  04F3  180B               	btfsc	11,0	;volatile
  3434  04F4  2CFA               	goto	l4560
  3435  04F5  1703               	bsf	3,6	;RP1=1, select bank2
  3436  04F6  1907               	btfsc	7,2	;volatile
  3437  04F7  2CFA               	goto	l4560
  3438  04F8  1C87               	btfss	7,1	;volatile
  3439  04F9  2D01               	goto	l4572
  3440  04FA                     l4560:	
  3441                           
  3442                           ;CheckTouchKey.c: 620: {
  3443                           ;CheckTouchKey.c: 621: ClearResSum();
  3444  04FA  255E               	fcall	_ClearResSum
  3445                           
  3446                           ;CheckTouchKey.c: 622: KeyCounter = 0;
  3447  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  3448  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  3449  04FD  01C8               	clrf	_KeyCounter
  3450                           
  3451                           ;CheckTouchKey.c: 623: b_kover = 0;
  3452  04FE  1279               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3453                           
  3454                           ;CheckTouchKey.c: 624: b_kover1 = 0;
  3455  04FF  11F9               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3456  0500  0008               	return
  3457  0501                     l4572:	
  3458  0501  1303               	bcf	3,6	;RP1=0, select bank0
  3459  0502  086B               	movf	SystemEnterSleep@wake,w
  3460  0503  3907               	andlw	7
  3461                           
  3462                           ;CheckTouchKey.c: 631: {
  3463                           ;CheckTouchKey.c: 633: KeyValue = KeyResTemp = KeyResSum[cnt];
  3464  0504  1003               	clrc
  3465  0505  1903               	btfsc	3,2
  3466  0506  2D58               	goto	L16
  3467  0507  0D6D               	rlf	SystemEnterSleep@cnt,w
  3468  0508  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  3469  0509  0084               	movwf	4
  3470  050A  1383               	bcf	3,7	;select IRP bank1
  3471  050B  0800               	movf	0,w
  3472  050C  00E9               	movwf	SystemEnterSleep@KeyResTemp
  3473  050D  0A84               	incf	4,f
  3474  050E  0800               	movf	0,w
  3475  050F  00EA               	movwf	SystemEnterSleep@KeyResTemp+1
  3476  0510  00E8               	movwf	SystemEnterSleep@KeyValue+1
  3477  0511  0869               	movf	SystemEnterSleep@KeyResTemp,w
  3478  0512  00E7               	movwf	SystemEnterSleep@KeyValue
  3479                           
  3480                           ;CheckTouchKey.c: 634: if(KeyResTemp)
  3481  0513  0869               	movf	SystemEnterSleep@KeyResTemp,w
  3482  0514  046A               	iorwf	SystemEnterSleep@KeyResTemp+1,w
  3483  0515  1903               	btfsc	3,2
  3484  0516  2D57               	goto	l4606
  3485                           
  3486                           ;CheckTouchKey.c: 635: {
  3487                           ;CheckTouchKey.c: 636: KeyValue += Table_KeyDown[cnt];
  3488  0517  086D               	movf	SystemEnterSleep@cnt,w
  3489  0518  3E17               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  3490  0519  0084               	movwf	4
  3491  051A  158A  2000  118A   	fcall	stringdir
  3492  051D  07E7               	addwf	SystemEnterSleep@KeyValue,f
  3493  051E  1803               	skipnc
  3494  051F  0AE8               	incf	SystemEnterSleep@KeyValue+1,f
  3495                           
  3496                           ;CheckTouchKey.c: 638: if(KeyOldValue2[cnt] >= KeyValue)
  3497  0520  1003               	clrc
  3498  0521  0D6D               	rlf	SystemEnterSleep@cnt,w
  3499  0522  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3500  0523  27B8  118A         	fcall	PL12	;call to abstracted procedure
  3501  0525  0868               	movf	SystemEnterSleep@KeyValue+1,w
  3502  0526  0266               	subwf	??_SystemEnterSleep+1,w
  3503  0527  1D03               	skipz
  3504  0528  2D2B               	goto	u4175
  3505  0529  0867               	movf	SystemEnterSleep@KeyValue,w
  3506  052A  0265               	subwf	??_SystemEnterSleep,w
  3507  052B                     u4175:	
  3508  052B  1C03               	skipc
  3509  052C  2D3F               	goto	L15
  3510                           
  3511                           ;CheckTouchKey.c: 639: {
  3512                           ;CheckTouchKey.c: 640: cnt = 0;
  3513                           
  3514                           ;CheckTouchKey.c: 641: wake = 1;
  3515  052D  27E6  118A         	fcall	PL26	;call to abstracted procedure
  3516  052F                     l4586:	
  3517  052F  086B               	movf	SystemEnterSleep@wake,w
  3518  0530  3907               	andlw	7
  3519  0531  1D03               	btfss	3,2
  3520  0532  2D36               	goto	l4590
  3521                           
  3522                           ;CheckTouchKey.c: 645: {
  3523                           ;CheckTouchKey.c: 646: KeyClearOne(cnt);
  3524  0533  086D               	movf	SystemEnterSleep@cnt,w
  3525  0534  256D  118A         	fcall	_KeyClearOne
  3526  0536                     l4590:	
  3527                           
  3528                           ;CheckTouchKey.c: 647: }
  3529                           ;CheckTouchKey.c: 648: wake <<= 1;
  3530  0536  1283               	bcf	3,5	;RP0=0, select bank0
  3531  0537  3003               	movlw	3
  3532  0538  1303               	bcf	3,6	;RP1=0, select bank0
  3533  0539  1003               	clrc
  3534  053A  27EB  118A         	fcall	PL28	;call to abstracted procedure
  3535  053C  1803               	btfsc	3,0
  3536  053D  2CFA               	goto	l4560
  3537  053E  2D2F               	goto	l4586
  3538  053F                     L15:	
  3539                           ;CheckTouchKey.c: 656: }
  3540                           ;CheckTouchKey.c: 658: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  3541                           
  3542  053F  0D6D               	rlf	SystemEnterSleep@cnt,w
  3543  0540  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3544  0541  27B8  118A         	fcall	PL12	;call to abstracted procedure
  3545  0543  1003               	clrc
  3546  0544  0D6D               	rlf	SystemEnterSleep@cnt,w
  3547  0545  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3548                           
  3549                           ;CheckTouchKey.c: 659: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  3550  0546  27A2  118A         	fcall	PL8	;call to abstracted procedure
  3551  0548  0800               	movf	0,w
  3552  0549  00E5               	movwf	??_SystemEnterSleep
  3553  054A  0A84               	incf	4,f
  3554  054B  0800               	movf	0,w
  3555  054C  00E6               	movwf	??_SystemEnterSleep+1
  3556  054D  1003               	clrc
  3557  054E  0D6D               	rlf	SystemEnterSleep@cnt,w
  3558  054F  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3559                           
  3560                           ;CheckTouchKey.c: 660: KeyOldValue0[cnt] = KeyResTemp;
  3561  0550  27A2  118A         	fcall	PL8	;call to abstracted procedure
  3562  0552  0869               	movf	SystemEnterSleep@KeyResTemp,w
  3563  0553  0080               	movwf	0
  3564  0554  0A84               	incf	4,f
  3565  0555  086A               	movf	SystemEnterSleep@KeyResTemp+1,w
  3566  0556  0080               	movwf	0
  3567  0557                     l4606:	
  3568                           
  3569                           ;CheckTouchKey.c: 661: }
  3570                           ;CheckTouchKey.c: 662: }
  3571                           ;CheckTouchKey.c: 663: wake <<= 1;
  3572  0557  1003               	clrc
  3573  0558                     L16:	
  3574  0558  3003               	movlw	3
  3575  0559  27EB  118A         	fcall	PL28	;call to abstracted procedure
  3576  055B  1803               	btfsc	3,0
  3577  055C  2CCF               	goto	l1671
  3578  055D  2D01               	goto	l4572
  3579  055E                     __end_of_SystemEnterSleep:	
  3580  055E                     __ptext30:	
  3581 ;; *************** function _ClearResSum *****************
  3582 ;; Defined at:
  3583 ;;		line 142 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;		None
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;  cnt             1    2[COMMON] unsigned char 
  3588 ;; Return value:  Size  Location     Type
  3589 ;;                  1    wreg      void 
  3590 ;; Registers used:
  3591 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/100
  3594 ;;		On exit  : 800/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3597 ;;      Params:         0       0       0       0       0
  3598 ;;      Locals:         1       0       0       0       0
  3599 ;;      Temps:          0       0       0       0       0
  3600 ;;      Totals:         1       0       0       0       0
  3601 ;;Total ram usage:        1 bytes
  3602 ;; Hardware stack levels used:    1
  3603 ;; Hardware stack levels required when called:    1
  3604 ;; This function calls:
  3605 ;;		Nothing
  3606 ;; This function is called by:
  3607 ;;		_GetTouchKeyValue
  3608 ;;		_CheckTouchKey
  3609 ;;		_SystemEnterSleep
  3610 ;; This function uses a non-reentrant model
  3611 ;;
  3612                           
  3613                           
  3614                           ;psect for function _ClearResSum
  3615  055E                     _ClearResSum:	
  3616  055E                     l3298:	
  3617                           ;incstack = 0
  3618                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  3619                           
  3620                           
  3621                           ;CheckTouchKey.c: 144: unsigned char cnt = 0;
  3622  055E  01F2               	clrf	ClearResSum@cnt
  3623  055F                     l3300:	
  3624                           
  3625                           ;CheckTouchKey.c: 146: {
  3626                           ;CheckTouchKey.c: 147: KeyResSum[cnt] = 0;
  3627  055F  1003               	clrc
  3628  0560  0D72               	rlf	ClearResSum@cnt,w
  3629  0561  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  3630  0562  0084               	movwf	4
  3631  0563  3003               	movlw	3
  3632  0564  1383               	bcf	3,7	;select IRP bank1
  3633  0565  0180               	clrf	0
  3634  0566  0A84               	incf	4,f
  3635  0567  0180               	clrf	0
  3636  0568  0AF2               	incf	ClearResSum@cnt,f
  3637  0569  0272               	subwf	ClearResSum@cnt,w
  3638  056A  1803               	btfsc	3,0
  3639  056B  0008               	return
  3640  056C  2D5F               	goto	l3300
  3641  056D                     __end_of_ClearResSum:	
  3642  056D                     __ptext34:	
  3643 ;; *************** function _KeyClearOne *****************
  3644 ;; Defined at:
  3645 ;;		line 96 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3646 ;; Parameters:    Size  Location     Type
  3647 ;;  cnt             1    wreg     unsigned char 
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;  cnt             1    2[COMMON] unsigned char 
  3650 ;; Return value:  Size  Location     Type
  3651 ;;                  1    wreg      void 
  3652 ;; Registers used:
  3653 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3654 ;; Tracked objects:
  3655 ;;		On entry : 0/0
  3656 ;;		On exit  : 800/0
  3657 ;;		Unchanged: 0/0
  3658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3659 ;;      Params:         0       0       0       0       0
  3660 ;;      Locals:         1       0       0       0       0
  3661 ;;      Temps:          0       0       0       0       0
  3662 ;;      Totals:         1       0       0       0       0
  3663 ;;Total ram usage:        1 bytes
  3664 ;; Hardware stack levels used:    1
  3665 ;; Hardware stack levels required when called:    1
  3666 ;; This function calls:
  3667 ;;		Nothing
  3668 ;; This function is called by:
  3669 ;;		_KeyClearIn
  3670 ;;		_KeyStopClear
  3671 ;;		_CheckOnceResult
  3672 ;;		_SystemEnterSleep
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           
  3677                           ;psect for function _KeyClearOne
  3678  056D                     _KeyClearOne:	
  3679                           
  3680                           ;incstack = 0
  3681                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  3682                           ;KeyClearOne@cnt stored from wreg
  3683  056D  00F2               	movwf	KeyClearOne@cnt
  3684                           
  3685                           ;CheckTouchKey.c: 98: KeyOldValue0[cnt] = 0;
  3686  056E  1003               	clrc
  3687  056F  0D72               	rlf	KeyClearOne@cnt,w
  3688  0570  3EAC               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3689  0571  0084               	movwf	4
  3690  0572  1383               	bcf	3,7	;select IRP bank1
  3691                           
  3692                           ;CheckTouchKey.c: 99: KeyOldValue1[cnt] = 0;
  3693  0573  27C7  118A         	fcall	PL16	;call to abstracted procedure
  3694  0575  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3695  0576  0084               	movwf	4
  3696                           
  3697                           ;CheckTouchKey.c: 100: KeyOldValue2[cnt] = 0;
  3698  0577  27C7  118A         	fcall	PL16	;call to abstracted procedure
  3699  0579  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3700  057A  0084               	movwf	4
  3701                           
  3702                           ;CheckTouchKey.c: 101: KeyReference[cnt] = 0;
  3703  057B  27C7               	fcall	PL16	;call to abstracted procedure
  3704  057C  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  3705  057D  0084               	movwf	4
  3706  057E  0180               	clrf	0
  3707  057F  0A84               	incf	4,f
  3708  0580  0180               	clrf	0
  3709  0581  0008               	return
  3710  0582                     __end_of_KeyClearOne:	
  3711  0582                     __ptext29:	
  3712 ;; *************** function _GetTouchKeyValue *****************
  3713 ;; Defined at:
  3714 ;;		line 196 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3715 ;; Parameters:    Size  Location     Type
  3716 ;;		None
  3717 ;; Auto vars:     Size  Location     Type
  3718 ;;  wake            2    5[COMMON] unsigned int 
  3719 ;;  temp            2    3[COMMON] unsigned int 
  3720 ;;  cnt             1    7[COMMON] unsigned char 
  3721 ;; Return value:  Size  Location     Type
  3722 ;;                  1    wreg      void 
  3723 ;; Registers used:
  3724 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3725 ;; Tracked objects:
  3726 ;;		On entry : 0/100
  3727 ;;		On exit  : 0/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3730 ;;      Params:         0       0       0       0       0
  3731 ;;      Locals:         5       0       0       0       0
  3732 ;;      Temps:          0       0       0       0       0
  3733 ;;      Totals:         5       0       0       0       0
  3734 ;;Total ram usage:        5 bytes
  3735 ;; Hardware stack levels used:    1
  3736 ;; Hardware stack levels required when called:    2
  3737 ;; This function calls:
  3738 ;;		_ClearResSum
  3739 ;; This function is called by:
  3740 ;;		_CheckTouchKey
  3741 ;;		_SystemEnterSleep
  3742 ;; This function uses a non-reentrant model
  3743 ;;
  3744                           
  3745                           
  3746                           ;psect for function _GetTouchKeyValue
  3747  0582                     _GetTouchKeyValue:	
  3748                           
  3749                           ;CheckTouchKey.c: 198: unsigned char cnt = 0;
  3750                           
  3751                           ;incstack = 0
  3752                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3753  0582  01F7               	clrf	GetTouchKeyValue@cnt
  3754                           
  3755                           ;CheckTouchKey.c: 199: unsigned int wake = 1;
  3756  0583  01F5               	clrf	GetTouchKeyValue@wake
  3757  0584  0AF5               	incf	GetTouchKeyValue@wake,f
  3758  0585  01F6               	clrf	GetTouchKeyValue@wake+1
  3759  0586                     l3340:	
  3760  0586  1C79               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3761  0587  2D8C               	goto	l3344
  3762  0588  0875               	movf	GetTouchKeyValue@wake,w
  3763  0589  3907               	andlw	7
  3764  058A  1903               	btfsc	3,2
  3765  058B  2DD7               	goto	l3372
  3766  058C                     l3344:	
  3767                           
  3768                           ;CheckTouchKey.c: 204: {
  3769                           ;CheckTouchKey.c: 205: KEYCON0 = 0;
  3770  058C  1683               	bsf	3,5	;RP0=1, select bank1
  3771  058D  1303               	bcf	3,6	;RP1=0, select bank1
  3772  058E  0192               	clrf	18	;volatile
  3773                           
  3774                           ;CheckTouchKey.c: 206: KEYCON1 = 0;
  3775  058F  0193               	clrf	19	;volatile
  3776                           
  3777                           ;CheckTouchKey.c: 207: KEYCON2 = 0x01;
  3778  0590  3001               	movlw	1
  3779  0591  0097               	movwf	23	;volatile
  3780                           
  3781                           ;CheckTouchKey.c: 209: TRISB6 = 0;
  3782  0592  1306               	bcf	6,6	;volatile
  3783                           
  3784                           ;CheckTouchKey.c: 210: RB6 = 0;
  3785  0593  1283               	bcf	3,5	;RP0=0, select bank0
  3786  0594  1306               	bcf	6,6	;volatile
  3787  0595  0000               	nop	;# 
  3788  0596  0000               	nop	;# 
  3789  0597  0000               	nop	;# 
  3790  0598  0000               	nop	;# 
  3791  0599  0000               	nop	;# 
  3792  059A  0000               	nop	;# 
  3793  059B  0000               	nop	;# 
  3794  059C  0000               	nop	;# 
  3795                           
  3796                           ;CheckTouchKey.c: 219: TRISB6 = 1;
  3797  059D  1683               	bsf	3,5	;RP0=1, select bank1
  3798  059E  1303               	bcf	3,6	;RP1=0, select bank1
  3799  059F  1706               	bsf	6,6	;volatile
  3800                           
  3801                           ;CheckTouchKey.c: 221: KEYCON0 = Table_KeyCap[cnt];
  3802  05A0  0877               	movf	GetTouchKeyValue@cnt,w
  3803  05A1  3E1A               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  3804  05A2  0084               	movwf	4
  3805  05A3  158A  2000  118A   	fcall	stringdir
  3806  05A6  0092               	movwf	18	;volatile
  3807                           
  3808                           ;CheckTouchKey.c: 222: KEYCON1 = Table_KeyChannel[cnt];
  3809  05A7  0877               	movf	GetTouchKeyValue@cnt,w
  3810  05A8  3E1D               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  3811  05A9  0084               	movwf	4
  3812  05AA  158A  2000  118A   	fcall	stringdir
  3813  05AD  0093               	movwf	19	;volatile
  3814  05AE  0000               	nop	;# 
  3815  05AF  0000               	nop	;# 
  3816  05B0  0000               	nop	;# 
  3817  05B1  0000               	nop	;# 
  3818                           
  3819                           ;CheckTouchKey.c: 227: KEYCON0 |= 0x1;
  3820  05B2  1683               	bsf	3,5	;RP0=1, select bank1
  3821  05B3  1303               	bcf	3,6	;RP1=0, select bank1
  3822  05B4  1412               	bsf	18,0	;volatile
  3823                           
  3824                           ;CheckTouchKey.c: 229: temp = 2000;
  3825  05B5  30D0               	movlw	208
  3826  05B6  00F3               	movwf	GetTouchKeyValue@temp
  3827  05B7  3007               	movlw	7
  3828  05B8  00F4               	movwf	GetTouchKeyValue@temp+1
  3829  05B9                     l1581:	
  3830                           ;CheckTouchKey.c: 230: while(!(KEYCON0&0x80))
  3831                           
  3832  05B9  1B92               	btfsc	18,7	;volatile
  3833  05BA  2DC7               	goto	l3370
  3834                           
  3835                           ;CheckTouchKey.c: 231: {
  3836                           ;CheckTouchKey.c: 232: if(0 == (--temp))
  3837  05BB  3001               	movlw	1
  3838  05BC  02F3               	subwf	GetTouchKeyValue@temp,f
  3839  05BD  1C03               	skipc
  3840  05BE  03F4               	decf	GetTouchKeyValue@temp+1,f
  3841  05BF  0873               	movf	GetTouchKeyValue@temp,w
  3842  05C0  0474               	iorwf	GetTouchKeyValue@temp+1,w
  3843  05C1  1D03               	btfss	3,2
  3844  05C2  2DB9               	goto	l1581
  3845                           
  3846                           ;CheckTouchKey.c: 233: {
  3847                           ;CheckTouchKey.c: 234: KeyCounter = 255;
  3848  05C3  30FF               	movlw	255
  3849  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  3850  05C5  00C8               	movwf	_KeyCounter
  3851                           
  3852                           ;CheckTouchKey.c: 235: ClearResSum();
  3853  05C6  2D5E               	ljmp	l3298
  3854  05C7                     l3370:	
  3855                           
  3856                           ;CheckTouchKey.c: 237: }
  3857                           ;CheckTouchKey.c: 238: }
  3858                           ;CheckTouchKey.c: 240: KeyResSum[cnt] += (unsigned int)((KEYDATAH<<8) | KEYDATAL);
  3859  05C7  1003               	clrc
  3860  05C8  0D77               	rlf	GetTouchKeyValue@cnt,w
  3861  05C9  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  3862  05CA  0084               	movwf	4
  3863  05CB  0814               	movf	20,w	;volatile
  3864  05CC  1383               	bcf	3,7	;select IRP bank1
  3865  05CD  0780               	addwf	0,f
  3866  05CE  0F84               	incfsz	4,f
  3867  05CF  0800               	movf	0,w
  3868  05D0  1803               	skipnc
  3869  05D1  0A00               	incf	0,w
  3870  05D2  00FF               	movwf	127
  3871  05D3  0815               	movf	21,w	;volatile
  3872  05D4  077F               	addwf	127,w
  3873  05D5  0080               	movwf	0
  3874  05D6  0384               	decf	4,f
  3875  05D7                     l3372:	
  3876  05D7  3003               	movlw	3
  3877                           
  3878                           ;CheckTouchKey.c: 241: }
  3879                           ;CheckTouchKey.c: 242: wake <<= 1;
  3880  05D8  1003               	clrc
  3881  05D9  0DF5               	rlf	GetTouchKeyValue@wake,f
  3882  05DA  0DF6               	rlf	GetTouchKeyValue@wake+1,f
  3883  05DB  0AF7               	incf	GetTouchKeyValue@cnt,f
  3884  05DC  0277               	subwf	GetTouchKeyValue@cnt,w
  3885  05DD  1C03               	skipc
  3886  05DE  2D86               	goto	l3340
  3887                           
  3888                           ;CheckTouchKey.c: 244: b_ksleep = 0;
  3889  05DF  1079               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3890  05E0  0008               	return
  3891  05E1                     __end_of_GetTouchKeyValue:	
  3892  05E1                     __ptext26:	
  3893 ;; *************** function _TurnKeyFlags *****************
  3894 ;; Defined at:
  3895 ;;		line 416 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;		None
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;		None
  3900 ;; Return value:  Size  Location     Type
  3901 ;;                  1    wreg      void 
  3902 ;; Registers used:
  3903 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3904 ;; Tracked objects:
  3905 ;;		On entry : B00/0
  3906 ;;		On exit  : 0/0
  3907 ;;		Unchanged: 0/0
  3908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3909 ;;      Params:         0       0       0       0       0
  3910 ;;      Locals:         0       0       0       0       0
  3911 ;;      Temps:          0       0       0       0       0
  3912 ;;      Totals:         0       0       0       0       0
  3913 ;;Total ram usage:        0 bytes
  3914 ;; Hardware stack levels used:    1
  3915 ;; Hardware stack levels required when called:    4
  3916 ;; This function calls:
  3917 ;;		_KeyClearIn
  3918 ;; This function is called by:
  3919 ;;		_CheckTouchKey
  3920 ;; This function uses a non-reentrant model
  3921 ;;
  3922                           
  3923                           
  3924                           ;psect for function _TurnKeyFlags
  3925  05E1                     _TurnKeyFlags:	
  3926                           
  3927                           ;CheckTouchKey.c: 418: static unsigned char KeyHaveTimes = 0;
  3928                           ;CheckTouchKey.c: 419: static unsigned char KeyNoTimes = 0;
  3929                           ;CheckTouchKey.c: 421: if(KeyData[0] | KeyData[1])
  3930                           
  3931                           ;incstack = 0
  3932                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3933  05E1  0829               	movf	_KeyData+1,w	;volatile
  3934  05E2  0428               	iorwf	_KeyData,w	;volatile
  3935  05E3  1903               	btfsc	3,2
  3936  05E4  2E01               	goto	l3926
  3937                           
  3938                           ;CheckTouchKey.c: 422: {
  3939                           ;CheckTouchKey.c: 423: KeyNoTimes = 0;
  3940  05E5  01C4               	clrf	TurnKeyFlags@KeyNoTimes
  3941                           
  3942                           ;CheckTouchKey.c: 425: if(KeyData[0] == KeyOldData[0] && KeyData[1] == KeyOldData[1])
  3943  05E6  0828               	movf	_KeyData,w	;volatile
  3944  05E7  062A               	xorwf	_KeyOldData,w	;volatile
  3945  05E8  1D03               	skipz
  3946  05E9  2DFA               	goto	l1640
  3947  05EA  0829               	movf	_KeyData+1,w	;volatile
  3948  05EB  062B               	xorwf	_KeyOldData+1,w	;volatile
  3949  05EC  1D03               	skipz
  3950  05ED  2DFA               	goto	l1640
  3951  05EE  0AC5               	incf	TurnKeyFlags@KeyHaveTimes,f
  3952  05EF  1903               	btfsc	3,2
  3953  05F0  0008               	return
  3954                           
  3955                           ;CheckTouchKey.c: 428: {
  3956                           ;CheckTouchKey.c: 429: KeyHaveTimes = 0;
  3957  05F1  01C5               	clrf	TurnKeyFlags@KeyHaveTimes
  3958                           
  3959                           ;CheckTouchKey.c: 430: KeyFlag[0] = KeyData[0];
  3960  05F2  0828               	movf	_KeyData,w	;volatile
  3961  05F3  00C2               	movwf	_KeyFlag	;volatile
  3962                           
  3963                           ;CheckTouchKey.c: 431: KeyFlag[1] = KeyData[1];
  3964  05F4  0829               	movf	_KeyData+1,w	;volatile
  3965  05F5  00C3               	movwf	_KeyFlag+1	;volatile
  3966                           
  3967                           ;CheckTouchKey.c: 434: {
  3968                           ;CheckTouchKey.c: 435: if(!b_kclr)
  3969  05F6  1979               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  3970  05F7  0008               	return
  3971                           
  3972                           ;CheckTouchKey.c: 436: {
  3973                           ;CheckTouchKey.c: 437: b_kclr = 1;
  3974  05F8  1579               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  3975                           
  3976                           ;CheckTouchKey.c: 438: KeyClearIn();
  3977  05F9  2E30               	ljmp	l3536
  3978  05FA                     l1640:	
  3979                           
  3980                           ;CheckTouchKey.c: 443: else
  3981                           ;CheckTouchKey.c: 444: {
  3982                           ;CheckTouchKey.c: 445: b_kclr = 0;
  3983  05FA  1179               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  3984                           
  3985                           ;CheckTouchKey.c: 446: KeyOldData[0] = KeyData[0];
  3986  05FB  0828               	movf	_KeyData,w	;volatile
  3987  05FC  00AA               	movwf	_KeyOldData	;volatile
  3988                           
  3989                           ;CheckTouchKey.c: 447: KeyOldData[1] = KeyData[1];
  3990  05FD  0829               	movf	_KeyData+1,w	;volatile
  3991  05FE  00AB               	movwf	_KeyOldData+1	;volatile
  3992                           
  3993                           ;CheckTouchKey.c: 448: KeyHaveTimes = 0;
  3994  05FF  01C5               	clrf	TurnKeyFlags@KeyHaveTimes
  3995                           
  3996                           ;CheckTouchKey.c: 449: }
  3997                           ;CheckTouchKey.c: 450: }
  3998  0600  0008               	return
  3999  0601                     l3926:	
  4000                           
  4001                           ;CheckTouchKey.c: 451: else
  4002                           ;CheckTouchKey.c: 452: {
  4003                           ;CheckTouchKey.c: 453: KeyHaveTimes = 0;
  4004  0601  01C5               	clrf	TurnKeyFlags@KeyHaveTimes
  4005                           
  4006                           ;CheckTouchKey.c: 454: KeyOldData[0] = 0;
  4007  0602  01AA               	clrf	_KeyOldData	;volatile
  4008                           
  4009                           ;CheckTouchKey.c: 455: KeyOldData[1] = 0;
  4010  0603  01AB               	clrf	_KeyOldData+1	;volatile
  4011                           
  4012                           ;CheckTouchKey.c: 457: if(++KeyNoTimes >=2)
  4013  0604  3002               	movlw	2
  4014  0605  0AC4               	incf	TurnKeyFlags@KeyNoTimes,f
  4015  0606  0244               	subwf	TurnKeyFlags@KeyNoTimes,w
  4016  0607  1C03               	skipc
  4017  0608  0008               	return
  4018                           
  4019                           ;CheckTouchKey.c: 458: {
  4020                           ;CheckTouchKey.c: 459: KeyNoTimes = 0;
  4021  0609  01C4               	clrf	TurnKeyFlags@KeyNoTimes
  4022                           
  4023                           ;CheckTouchKey.c: 460: KeyFlag[0] = 0;
  4024  060A  01C2               	clrf	_KeyFlag	;volatile
  4025                           
  4026                           ;CheckTouchKey.c: 461: KeyFlag[1] = 0;
  4027  060B  01C3               	clrf	_KeyFlag+1	;volatile
  4028                           
  4029                           ;CheckTouchKey.c: 463: b_kclr = 0;
  4030  060C  1179               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4031  060D  0008               	return
  4032  060E                     __end_of_TurnKeyFlags:	
  4033  060E                     __ptext18:	
  4034 ;; *************** function _Refurbish_Sfr *****************
  4035 ;; Defined at:
  4036 ;;		line 117 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;		None
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;		None
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  1    wreg      void 
  4043 ;; Registers used:
  4044 ;;		wreg, status,2, status,0
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 300/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4050 ;;      Params:         0       0       0       0       0
  4051 ;;      Locals:         0       0       0       0       0
  4052 ;;      Temps:          0       0       0       0       0
  4053 ;;      Totals:         0       0       0       0       0
  4054 ;;Total ram usage:        0 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    1
  4057 ;; This function calls:
  4058 ;;		Nothing
  4059 ;; This function is called by:
  4060 ;;		_WorkSleep
  4061 ;;		_main
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           
  4066                           ;psect for function _Refurbish_Sfr
  4067  060E                     _Refurbish_Sfr:	
  4068                           
  4069                           ;main.c: 119: PIE1 = 2;
  4070                           
  4071                           ;incstack = 0
  4072                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  4073  060E  3002               	movlw	2
  4074  060F  1283               	bcf	3,5	;RP0=0, select bank0
  4075                           
  4076                           ;main.c: 120: PR2 = 250;
  4077  0610  27E0  118A         	fcall	PL24	;call to abstracted procedure
  4078                           
  4079                           ;main.c: 121: INTCON = 0XC0;
  4080  0612  30C0               	movlw	192
  4081  0613  008B               	movwf	11	;volatile
  4082                           
  4083                           ;main.c: 122: if (4 != T2CON)
  4084  0614  3004               	movlw	4
  4085  0615  1283               	bcf	3,5	;RP0=0, select bank0
  4086  0616  0612               	xorwf	18,w	;volatile
  4087  0617  1903               	btfsc	3,2
  4088  0618  0008               	return
  4089                           
  4090                           ;main.c: 123: T2CON = 4;
  4091  0619  3004               	movlw	4
  4092  061A  0092               	movwf	18	;volatile
  4093  061B  0008               	return
  4094  061C                     __end_of_Refurbish_Sfr:	
  4095  061C                     __ptext31:	
  4096 ;; *************** function _CheckValidTime *****************
  4097 ;; Defined at:
  4098 ;;		line 501 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;		None
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;		None
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		wreg, status,2, status,0
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 300/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4112 ;;      Params:         0       0       0       0       0
  4113 ;;      Locals:         0       0       0       0       0
  4114 ;;      Temps:          0       0       0       0       0
  4115 ;;      Totals:         0       0       0       0       0
  4116 ;;Total ram usage:        0 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    1
  4119 ;; This function calls:
  4120 ;;		Nothing
  4121 ;; This function is called by:
  4122 ;;		_CheckTouchKey
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           
  4127                           ;psect for function _CheckValidTime
  4128  061C                     _CheckValidTime:	
  4129  061C                     l3934:	
  4130                           ;incstack = 0
  4131                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  4132                           
  4133                           
  4134                           ;CheckTouchKey.c: 506: {
  4135                           ;CheckTouchKey.c: 507: if(KeyFlag[0] | KeyFlag[1])
  4136  061C  1283               	bcf	3,5	;RP0=0, select bank0
  4137  061D  1303               	bcf	3,6	;RP1=0, select bank0
  4138  061E  0843               	movf	_KeyFlag+1,w	;volatile
  4139  061F  0442               	iorwf	_KeyFlag,w	;volatile
  4140  0620  1903               	btfsc	3,2
  4141  0621  2E2D               	goto	l3940
  4142  0622  0AA6               	incf	CheckValidTime@validtime,f
  4143  0623  1903               	skipnz
  4144  0624  0AA7               	incf	CheckValidTime@validtime+1,f
  4145  0625  303A               	movlw	58
  4146  0626  0227               	subwf	CheckValidTime@validtime+1,w
  4147  0627  3098               	movlw	152
  4148  0628  1903               	skipnz
  4149  0629  0226               	subwf	CheckValidTime@validtime,w
  4150  062A  1C03               	skipc
  4151  062B  0008               	return
  4152                           
  4153                           ;CheckTouchKey.c: 510: {
  4154                           ;CheckTouchKey.c: 511: b_kerr = 1;
  4155  062C  14F9               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4156  062D                     l3940:	
  4157                           
  4158                           ;CheckTouchKey.c: 512: validtime = 0;
  4159  062D  01A6               	clrf	CheckValidTime@validtime
  4160  062E  01A7               	clrf	CheckValidTime@validtime+1
  4161  062F  0008               	return
  4162  0630                     __end_of_CheckValidTime:	
  4163  0630                     __ptext27:	
  4164 ;; *************** function _KeyClearIn *****************
  4165 ;; Defined at:
  4166 ;;		line 104 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;		None
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;  cnt             1    4[COMMON] unsigned char 
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  1    wreg      void 
  4173 ;; Registers used:
  4174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4175 ;; Tracked objects:
  4176 ;;		On entry : B00/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4180 ;;      Params:         0       0       0       0       0
  4181 ;;      Locals:         1       0       0       0       0
  4182 ;;      Temps:          0       0       0       0       0
  4183 ;;      Totals:         1       0       0       0       0
  4184 ;;Total ram usage:        1 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    3
  4187 ;; This function calls:
  4188 ;;		_KeyClearOne
  4189 ;;		_KeyIsIn
  4190 ;; This function is called by:
  4191 ;;		_TurnKeyFlags
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           
  4196                           ;psect for function _KeyClearIn
  4197  0630                     _KeyClearIn:	
  4198  0630                     l3536:	
  4199                           ;incstack = 0
  4200                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4201                           
  4202                           
  4203                           ;CheckTouchKey.c: 106: unsigned char cnt;
  4204                           ;CheckTouchKey.c: 107: for(cnt=0;cnt < KeyTotalNumber;cnt++)
  4205  0630  01F4               	clrf	KeyClearIn@cnt
  4206  0631                     l3542:	
  4207                           
  4208                           ;CheckTouchKey.c: 108: {
  4209                           ;CheckTouchKey.c: 109: if(!KeyIsIn(cnt))
  4210  0631  0874               	movf	KeyClearIn@cnt,w
  4211  0632  21EC  118A         	fcall	_KeyIsIn
  4212  0634  3A00               	xorlw	0
  4213  0635  1D03               	skipz
  4214  0636  2E3A               	goto	l3546
  4215                           
  4216                           ;CheckTouchKey.c: 110: {
  4217                           ;CheckTouchKey.c: 111: KeyClearOne(cnt);
  4218  0637  0874               	movf	KeyClearIn@cnt,w
  4219  0638  256D  118A         	fcall	_KeyClearOne
  4220  063A                     l3546:	
  4221  063A  3003               	movlw	3
  4222  063B  0AF4               	incf	KeyClearIn@cnt,f
  4223  063C  0274               	subwf	KeyClearIn@cnt,w
  4224  063D  1803               	btfsc	3,0
  4225  063E  0008               	return
  4226  063F  2E31               	goto	l3542
  4227  0640                     __end_of_KeyClearIn:	
  4228  0640                     __ptext19:	
  4229 ;; *************** function _Init_System *****************
  4230 ;; Defined at:
  4231 ;;		line 76 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;		None
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;		None
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  1    wreg      void 
  4238 ;; Registers used:
  4239 ;;		wreg, status,2
  4240 ;; Tracked objects:
  4241 ;;		On entry : 300/0
  4242 ;;		On exit  : 300/100
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4245 ;;      Params:         0       0       0       0       0
  4246 ;;      Locals:         0       0       0       0       0
  4247 ;;      Temps:          0       0       0       0       0
  4248 ;;      Totals:         0       0       0       0       0
  4249 ;;Total ram usage:        0 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    1
  4252 ;; This function calls:
  4253 ;;		Nothing
  4254 ;; This function is called by:
  4255 ;;		_WorkSleep
  4256 ;;		_main
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260                           
  4261                           ;psect for function _Init_System
  4262  0640                     _Init_System:	
  4263  0640                     l3376:	
  4264                           ;incstack = 0
  4265                           ; Regs used in _Init_System: [wreg+status,2]
  4266                           
  4267  0640  0000               	nop	;# 
  4268  0641  0064               	clrwdt	;# 
  4269                           
  4270                           ;main.c: 80: INTCON = 0;
  4271  0642  018B               	clrf	11	;volatile
  4272                           
  4273                           ;main.c: 81: OSCCON = 0X71;
  4274  0643  3071               	movlw	113
  4275  0644  1683               	bsf	3,5	;RP0=1, select bank1
  4276  0645  1303               	bcf	3,6	;RP1=0, select bank1
  4277  0646  0088               	movwf	8	;volatile
  4278                           
  4279                           ;main.c: 82: OPTION_REG = 0;
  4280  0647  0181               	clrf	1	;volatile
  4281                           
  4282                           ;main.c: 83: SWDTEN = 1;
  4283  0648  1488               	bsf	8,1	;volatile
  4284  0649  0064               	clrwdt	;# 
  4285                           
  4286                           ;main.c: 88: TRISA = 0x22;
  4287  064A  3022               	movlw	34
  4288  064B  1683               	bsf	3,5	;RP0=1, select bank1
  4289  064C  1303               	bcf	3,6	;RP1=0, select bank1
  4290                           
  4291                           ;main.c: 89: PORTA = 0;
  4292                           
  4293                           ;main.c: 90: TRISB = 0x18;
  4294  064D  27CD  118A         	fcall	PL18	;call to abstracted procedure
  4295                           
  4296                           ;main.c: 91: PORTB = 0;
  4297  064F  1283               	bcf	3,5	;RP0=0, select bank0
  4298  0650  0186               	clrf	6	;volatile
  4299                           
  4300                           ;main.c: 92: WPUB = 0x00;
  4301  0651  0188               	clrf	8	;volatile
  4302                           
  4303                           ;main.c: 93: TRISC = 0;
  4304  0652  1683               	bsf	3,5	;RP0=1, select bank3
  4305  0653  1703               	bsf	3,6	;RP1=1, select bank3
  4306  0654  0186               	clrf	6	;volatile
  4307                           
  4308                           ;main.c: 94: PORTC = 0;
  4309  0655  0185               	clrf	5	;volatile
  4310                           
  4311                           ;main.c: 95: WPUC = 0x00;
  4312  0656  1283               	bcf	3,5	;RP0=0, select bank2
  4313  0657  0195               	clrf	21	;volatile
  4314                           
  4315                           ;main.c: 96: ANSEL0 = 0x01;
  4316  0658  3001               	movlw	1
  4317  0659  0090               	movwf	16	;volatile
  4318                           
  4319                           ;main.c: 97: ANSEL1 = 0x04;
  4320  065A  3004               	movlw	4
  4321  065B  0091               	movwf	17	;volatile
  4322                           
  4323                           ;main.c: 98: ANSEL2 = 0x01;
  4324  065C  3001               	movlw	1
  4325  065D  0092               	movwf	18	;volatile
  4326                           
  4327                           ;main.c: 100: PIE1 = 2;
  4328  065E  3002               	movlw	2
  4329                           
  4330                           ;main.c: 101: PR2 = 250;
  4331  065F  27E0               	fcall	PL24	;call to abstracted procedure
  4332                           
  4333                           ;main.c: 102: T2CON = 4;
  4334  0660  3004               	movlw	4
  4335  0661  1283               	bcf	3,5	;RP0=0, select bank0
  4336  0662  0092               	movwf	18	;volatile
  4337                           
  4338                           ;main.c: 104: INTCON = 0XC0;
  4339  0663  30C0               	movlw	192
  4340  0664  008B               	movwf	11	;volatile
  4341                           
  4342                           ;main.c: 105: ADCON0 = 0XC1;
  4343  0665  30C1               	movlw	193
  4344  0666  1683               	bsf	3,5	;RP0=1, select bank1
  4345  0667  009D               	movwf	29	;volatile
  4346                           
  4347                           ;main.c: 106: ADON = 1;
  4348  0668  141D               	bsf	29,0	;volatile
  4349  0669  0008               	return
  4350  066A                     __end_of_Init_System:	
  4351  066A                     __ptext11:	
  4352 ;; *************** function _TM1650_STOP *****************
  4353 ;; Defined at:
  4354 ;;		line 472 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4355 ;; Parameters:    Size  Location     Type
  4356 ;;		None
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;		None
  4359 ;; Return value:  Size  Location     Type
  4360 ;;                  1    wreg      void 
  4361 ;; Registers used:
  4362 ;;		None
  4363 ;; Tracked objects:
  4364 ;;		On entry : 0/300
  4365 ;;		On exit  : 300/0
  4366 ;;		Unchanged: 0/0
  4367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4368 ;;      Params:         0       0       0       0       0
  4369 ;;      Locals:         0       0       0       0       0
  4370 ;;      Temps:          0       0       0       0       0
  4371 ;;      Totals:         0       0       0       0       0
  4372 ;;Total ram usage:        0 bytes
  4373 ;; Hardware stack levels used:    1
  4374 ;; Hardware stack levels required when called:    1
  4375 ;; This function calls:
  4376 ;;		Nothing
  4377 ;; This function is called by:
  4378 ;;		_tm1650cmd
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           
  4383                           ;psect for function _TM1650_STOP
  4384  066A                     _TM1650_STOP:	
  4385  066A                     l3306:	
  4386                           ;incstack = 0
  4387                           ; Regs used in _TM1650_STOP: []
  4388                           
  4389                           
  4390                           ;main.c: 474: RB7=0;
  4391  066A  1283               	bcf	3,5	;RP0=0, select bank0
  4392  066B  1303               	bcf	3,6	;RP1=0, select bank0
  4393  066C  1386               	bcf	6,7	;volatile
  4394  066D  0000               	nop	;# 
  4395  066E  0000               	nop	;# 
  4396  066F  0000               	nop	;# 
  4397  0670  0000               	nop	;# 
  4398  0671  0000               	nop	;# 
  4399  0672  0000               	nop	;# 
  4400                           
  4401                           ;main.c: 476: RC0=1;
  4402  0673  1683               	bsf	3,5	;RP0=1, select bank3
  4403  0674  1703               	bsf	3,6	;RP1=1, select bank3
  4404  0675  1405               	bsf	5,0	;volatile
  4405  0676  0000               	nop	;# 
  4406  0677  0000               	nop	;# 
  4407  0678  0000               	nop	;# 
  4408  0679  0000               	nop	;# 
  4409  067A  0000               	nop	;# 
  4410  067B  0000               	nop	;# 
  4411                           
  4412                           ;main.c: 478: RB7=1;
  4413  067C  1283               	bcf	3,5	;RP0=0, select bank0
  4414  067D  1303               	bcf	3,6	;RP1=0, select bank0
  4415  067E  1786               	bsf	6,7	;volatile
  4416  067F  0000               	nop	;# 
  4417  0680  0000               	nop	;# 
  4418  0681  0000               	nop	;# 
  4419  0682  0000               	nop	;# 
  4420  0683  0000               	nop	;# 
  4421  0684  0000               	nop	;# 
  4422                           
  4423                           ;main.c: 480: RC0=0;
  4424  0685  1683               	bsf	3,5	;RP0=1, select bank3
  4425  0686  1703               	bsf	3,6	;RP1=1, select bank3
  4426  0687  1005               	bcf	5,0	;volatile
  4427                           
  4428                           ;main.c: 481: RB7=0;
  4429  0688  1283               	bcf	3,5	;RP0=0, select bank0
  4430  0689  1303               	bcf	3,6	;RP1=0, select bank0
  4431  068A  1386               	bcf	6,7	;volatile
  4432  068B  0008               	return
  4433  068C                     __end_of_TM1650_STOP:	
  4434  068C                     __ptext8:	
  4435 ;; *************** function _initTM1650 *****************
  4436 ;; Defined at:
  4437 ;;		line 597 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;		None
  4440 ;; Auto vars:     Size  Location     Type
  4441 ;;		None
  4442 ;; Return value:  Size  Location     Type
  4443 ;;                  1    wreg      void 
  4444 ;; Registers used:
  4445 ;;		wreg, status,2, status,0, pclath, cstack
  4446 ;; Tracked objects:
  4447 ;;		On entry : 200/100
  4448 ;;		On exit  : 300/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4451 ;;      Params:         0       0       0       0       0
  4452 ;;      Locals:         0       0       0       0       0
  4453 ;;      Temps:          0       0       0       0       0
  4454 ;;      Totals:         0       0       0       0       0
  4455 ;;Total ram usage:        0 bytes
  4456 ;; Hardware stack levels used:    1
  4457 ;; Hardware stack levels required when called:    3
  4458 ;; This function calls:
  4459 ;;		_tm1650cmd
  4460 ;; This function is called by:
  4461 ;;		_showCtr
  4462 ;;		_main
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           
  4467                           ;psect for function _initTM1650
  4468  068C                     _initTM1650:	
  4469  068C                     l3622:	
  4470                           ;incstack = 0
  4471                           ; Regs used in _initTM1650: [wreg+status,2+status,0+pclath+cstack]
  4472                           
  4473                           
  4474                           ;main.c: 599: tm1650cmd(0X48,0x11);
  4475  068C  3011               	movlw	17
  4476  068D  00F4               	movwf	tm1650cmd@seg_data
  4477  068E  3048               	movlw	72
  4478  068F  23B5  118A         	fcall	_tm1650cmd
  4479  0691  0000               	nop	;# 
  4480  0692  0000               	nop	;# 
  4481  0693  0000               	nop	;# 
  4482  0694  0000               	nop	;# 
  4483  0695  0000               	nop	;# 
  4484  0696  0000               	nop	;# 
  4485                           
  4486                           ;main.c: 601: tm1650cmd(0X68,0xFF);
  4487  0697  30FF               	movlw	255
  4488  0698  00F4               	movwf	tm1650cmd@seg_data
  4489  0699  3068               	movlw	104
  4490  069A  23B5  118A         	fcall	_tm1650cmd
  4491  069C  0000               	nop	;# 
  4492  069D  0000               	nop	;# 
  4493  069E  0000               	nop	;# 
  4494  069F  0000               	nop	;# 
  4495  06A0  0000               	nop	;# 
  4496  06A1  0000               	nop	;# 
  4497                           
  4498                           ;main.c: 603: tm1650cmd(0X6A,0xFF);
  4499  06A2  30FF               	movlw	255
  4500  06A3  00F4               	movwf	tm1650cmd@seg_data
  4501  06A4  306A               	movlw	106
  4502  06A5  23B5  118A         	fcall	_tm1650cmd
  4503  06A7  0000               	nop	;# 
  4504  06A8  0000               	nop	;# 
  4505  06A9  0000               	nop	;# 
  4506  06AA  0000               	nop	;# 
  4507  06AB  0000               	nop	;# 
  4508  06AC  0000               	nop	;# 
  4509                           
  4510                           ;main.c: 605: tm1650cmd(0X6C,0xFF);
  4511  06AD  30FF               	movlw	255
  4512  06AE  00F4               	movwf	tm1650cmd@seg_data
  4513  06AF  306C               	movlw	108
  4514  06B0  23B5  118A         	fcall	_tm1650cmd
  4515  06B2  0000               	nop	;# 
  4516  06B3  0000               	nop	;# 
  4517  06B4  0000               	nop	;# 
  4518  06B5  0000               	nop	;# 
  4519  06B6  0000               	nop	;# 
  4520  06B7  0000               	nop	;# 
  4521                           
  4522                           ;main.c: 607: tm1650cmd(0X6E,0xFF);
  4523  06B8  30FF               	movlw	255
  4524  06B9  00F4               	movwf	tm1650cmd@seg_data
  4525  06BA  306E               	movlw	110
  4526  06BB  2BB5               	ljmp	_tm1650cmd
  4527  06BC                     __end_of_initTM1650:	
  4528  06BC                     __ptext7:	
  4529 ;; *************** function _setZeroStep *****************
  4530 ;; Defined at:
  4531 ;;		line 646 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;		None
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;		None
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		wreg, status,2, status,0
  4540 ;; Tracked objects:
  4541 ;;		On entry : 300/0
  4542 ;;		On exit  : 300/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4545 ;;      Params:         0       0       0       0       0
  4546 ;;      Locals:         0       0       0       0       0
  4547 ;;      Temps:          0       0       0       0       0
  4548 ;;      Totals:         0       0       0       0       0
  4549 ;;Total ram usage:        0 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:    1
  4552 ;; This function calls:
  4553 ;;		Nothing
  4554 ;; This function is called by:
  4555 ;;		_showCtr
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           
  4560                           ;psect for function _setZeroStep
  4561  06BC                     _setZeroStep:	
  4562  06BC                     l3640:	
  4563                           ;incstack = 0
  4564                           ; Regs used in _setZeroStep: [wreg+status,2+status,0]
  4565                           
  4566                           
  4567                           ;main.c: 648: if(zeroStep == 0)
  4568  06BC  087A               	movf	_zeroStep,w
  4569  06BD  1D03               	btfss	3,2
  4570  06BE  2EC2               	goto	l3644
  4571                           
  4572                           ;main.c: 649: {
  4573                           ;main.c: 650: showLed1 = 0x00;
  4574  06BF  01DF               	clrf	_showLed1
  4575                           
  4576                           ;main.c: 651: showLed2 = 0x00;
  4577  06C0  01DE               	clrf	_showLed2
  4578                           
  4579                           ;main.c: 652: }
  4580  06C1  0008               	return
  4581  06C2                     l3644:	
  4582                           
  4583                           ;main.c: 653: else if(zeroStep == 1)
  4584  06C2  0B7A               	decfsz	_zeroStep,w
  4585  06C3  2ECE               	goto	l3650
  4586                           
  4587                           ;main.c: 654: {
  4588                           ;main.c: 655: showLed1 = 0xE1;
  4589  06C4  30E1               	movlw	225
  4590  06C5  2ECB               	goto	L9
  4591  06C6                     l3652:	
  4592                           
  4593                           ;main.c: 659: {
  4594                           ;main.c: 660: showLed1 = 0xE3;
  4595  06C6  30E3               	movlw	227
  4596  06C7  2ECB               	goto	L9
  4597  06C8                     l3658:	
  4598                           
  4599                           ;main.c: 664: {
  4600                           ;main.c: 665: showLed1 = 0xE7;
  4601  06C8  30E7               	movlw	231
  4602  06C9  2ECB               	goto	L9
  4603  06CA                     l3664:	
  4604                           
  4605                           ;main.c: 669: {
  4606                           ;main.c: 670: showLed1 = 0xFF;
  4607  06CA  30FF               	movlw	255
  4608  06CB                     L9:	
  4609  06CB  00DF               	movwf	_showLed1
  4610                           
  4611                           ;main.c: 656: showLed2 = 0x00;
  4612  06CC  01DE               	clrf	_showLed2
  4613                           
  4614                           ;main.c: 657: }
  4615  06CD  0008               	return
  4616  06CE                     l3650:	
  4617                           
  4618                           ;main.c: 658: else if(zeroStep == 2)
  4619  06CE  3002               	movlw	2
  4620  06CF  067A               	xorwf	_zeroStep,w
  4621  06D0  1903               	btfsc	3,2
  4622  06D1  2EC6               	goto	l3652
  4623                           
  4624                           ;main.c: 663: else if(zeroStep == 3)
  4625  06D2  3003               	movlw	3
  4626  06D3  067A               	xorwf	_zeroStep,w
  4627  06D4  1903               	btfsc	3,2
  4628  06D5  2EC8               	goto	l3658
  4629                           
  4630                           ;main.c: 668: else if(zeroStep == 4)
  4631  06D6  3004               	movlw	4
  4632  06D7  067A               	xorwf	_zeroStep,w
  4633  06D8  1903               	btfsc	3,2
  4634  06D9  2ECA               	goto	l3664
  4635                           
  4636                           ;main.c: 673: else if(zeroStep == 5)
  4637  06DA  3005               	movlw	5
  4638  06DB  067A               	xorwf	_zeroStep,w
  4639  06DC  1D03               	btfss	3,2
  4640  06DD  2EE3               	goto	l3674
  4641                           
  4642                           ;main.c: 674: {
  4643                           ;main.c: 675: showLed1 = 0xFF;
  4644  06DE  30FF               	movlw	255
  4645  06DF  00DF               	movwf	_showLed1
  4646                           
  4647                           ;main.c: 676: showLed2 = 0x01;
  4648  06E0  01DE               	clrf	_showLed2
  4649  06E1  0ADE               	incf	_showLed2,f
  4650                           
  4651                           ;main.c: 677: }
  4652  06E2  0008               	return
  4653  06E3                     l3674:	
  4654                           
  4655                           ;main.c: 678: else if(zeroStep == 6)
  4656  06E3  3006               	movlw	6
  4657  06E4  067A               	xorwf	_zeroStep,w
  4658  06E5  1D03               	btfss	3,2
  4659  06E6  2EEC               	goto	l3678
  4660                           
  4661                           ;main.c: 679: {
  4662                           ;main.c: 680: showLed1 = 0xFF;
  4663  06E7  30FF               	movlw	255
  4664  06E8  00DF               	movwf	_showLed1
  4665                           
  4666                           ;main.c: 681: showLed2 = 0x03;
  4667  06E9  3003               	movlw	3
  4668  06EA  00DE               	movwf	_showLed2
  4669                           
  4670                           ;main.c: 682: }
  4671  06EB  0008               	return
  4672  06EC                     l3678:	
  4673                           
  4674                           ;main.c: 683: else if(zeroStep == 7)
  4675  06EC  3007               	movlw	7
  4676  06ED  067A               	xorwf	_zeroStep,w
  4677  06EE  1D03               	btfss	3,2
  4678  06EF  2EF5               	goto	l3682
  4679                           
  4680                           ;main.c: 684: {
  4681                           ;main.c: 685: showLed1 = 0xFF;
  4682  06F0  30FF               	movlw	255
  4683  06F1  00DF               	movwf	_showLed1
  4684                           
  4685                           ;main.c: 686: showLed2 = 0x07;
  4686  06F2  3007               	movlw	7
  4687  06F3  00DE               	movwf	_showLed2
  4688                           
  4689                           ;main.c: 687: }
  4690  06F4  0008               	return
  4691  06F5                     l3682:	
  4692                           
  4693                           ;main.c: 688: else if(zeroStep == 8)
  4694  06F5  3008               	movlw	8
  4695  06F6  067A               	xorwf	_zeroStep,w
  4696  06F7  1D03               	btfss	3,2
  4697  06F8  2EFE               	goto	l3686
  4698                           
  4699                           ;main.c: 689: {
  4700                           ;main.c: 690: showLed1 = 0xFF;
  4701  06F9  30FF               	movlw	255
  4702  06FA  00DF               	movwf	_showLed1
  4703                           
  4704                           ;main.c: 691: showLed2 = 0x0F;
  4705  06FB  300F               	movlw	15
  4706  06FC  00DE               	movwf	_showLed2
  4707                           
  4708                           ;main.c: 692: }
  4709  06FD  0008               	return
  4710  06FE                     l3686:	
  4711                           
  4712                           ;main.c: 693: else if(zeroStep == 9)
  4713  06FE  3009               	movlw	9
  4714  06FF  067A               	xorwf	_zeroStep,w
  4715  0700  1D03               	btfss	3,2
  4716  0701  2F07               	goto	l3690
  4717                           
  4718                           ;main.c: 694: {
  4719                           ;main.c: 695: showLed1 = 0xFF;
  4720  0702  30FF               	movlw	255
  4721  0703  00DF               	movwf	_showLed1
  4722                           
  4723                           ;main.c: 696: showLed2 = 0x2F;
  4724  0704  302F               	movlw	47
  4725  0705  00DE               	movwf	_showLed2
  4726                           
  4727                           ;main.c: 697: }
  4728  0706  0008               	return
  4729  0707                     l3690:	
  4730                           
  4731                           ;main.c: 698: else if(zeroStep == 10)
  4732  0707  300A               	movlw	10
  4733  0708  067A               	xorwf	_zeroStep,w
  4734  0709  1D03               	btfss	3,2
  4735  070A  2F10               	goto	l3694
  4736                           
  4737                           ;main.c: 699: {
  4738                           ;main.c: 700: showLed1 = 0xFF;
  4739  070B  30FF               	movlw	255
  4740  070C  00DF               	movwf	_showLed1
  4741                           
  4742                           ;main.c: 701: showLed2 = 0x6F;
  4743  070D  306F               	movlw	111
  4744  070E  00DE               	movwf	_showLed2
  4745                           
  4746                           ;main.c: 702: }
  4747  070F  0008               	return
  4748  0710                     l3694:	
  4749                           
  4750                           ;main.c: 703: else if(zeroStep == 11)
  4751  0710  300B               	movlw	11
  4752  0711  067A               	xorwf	_zeroStep,w
  4753  0712  1D03               	btfss	3,2
  4754  0713  2F19               	goto	l3698
  4755  0714                     l3696:	
  4756                           
  4757                           ;main.c: 704: {
  4758                           ;main.c: 705: showLed1 = 0xFF;
  4759  0714  30FF               	movlw	255
  4760  0715  00DF               	movwf	_showLed1
  4761                           
  4762                           ;main.c: 706: showLed2 = 0xEF;
  4763  0716  30EF               	movlw	239
  4764  0717  00DE               	movwf	_showLed2
  4765                           
  4766                           ;main.c: 707: }
  4767  0718  0008               	return
  4768  0719                     l3698:	
  4769                           
  4770                           ;main.c: 708: else if(zeroStep == 12)
  4771  0719  300C               	movlw	12
  4772  071A  067A               	xorwf	_zeroStep,w
  4773  071B  1D03               	btfss	3,2
  4774  071C  0008               	return
  4775  071D  2F14               	goto	l3696
  4776  071E                     __end_of_setZeroStep:	
  4777  071E                     __ptext6:	
  4778 ;; *************** function _setZeroStep2 *****************
  4779 ;; Defined at:
  4780 ;;		line 716 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;		None
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;		None
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  1    wreg      void 
  4787 ;; Registers used:
  4788 ;;		wreg, status,2, status,0
  4789 ;; Tracked objects:
  4790 ;;		On entry : 300/0
  4791 ;;		On exit  : 300/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4794 ;;      Params:         0       0       0       0       0
  4795 ;;      Locals:         0       0       0       0       0
  4796 ;;      Temps:          0       0       0       0       0
  4797 ;;      Totals:         0       0       0       0       0
  4798 ;;Total ram usage:        0 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:    1
  4801 ;; This function calls:
  4802 ;;		Nothing
  4803 ;; This function is called by:
  4804 ;;		_showCtr
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           
  4809                           ;psect for function _setZeroStep2
  4810  071E                     _setZeroStep2:	
  4811  071E                     l3702:	
  4812                           ;incstack = 0
  4813                           ; Regs used in _setZeroStep2: [wreg+status,2+status,0]
  4814                           
  4815                           
  4816                           ;main.c: 718: if(zeroStep == 0)
  4817  071E  087A               	movf	_zeroStep,w
  4818  071F  1D03               	btfss	3,2
  4819  0720  2F24               	goto	l3706
  4820                           
  4821                           ;main.c: 719: {
  4822                           ;main.c: 720: showLed1 = 0x00;
  4823  0721  01DF               	clrf	_showLed1
  4824                           
  4825                           ;main.c: 721: showLed2 = 0x00;
  4826  0722  01DE               	clrf	_showLed2
  4827                           
  4828                           ;main.c: 722: }
  4829  0723  0008               	return
  4830  0724                     l3706:	
  4831                           
  4832                           ;main.c: 723: else if(zeroStep == 1)
  4833  0724  0B7A               	decfsz	_zeroStep,w
  4834  0725  2F2F               	goto	l3712
  4835                           
  4836                           ;main.c: 724: {
  4837                           ;main.c: 725: showLed1 = 0x01;
  4838  0726  01DF               	clrf	_showLed1
  4839  0727  0ADF               	incf	_showLed1,f
  4840  0728  2F2D               	goto	l3710
  4841  0729                     l3714:	
  4842                           
  4843                           ;main.c: 729: {
  4844                           ;main.c: 730: showLed1 = 0x02;
  4845  0729  3002               	movlw	2
  4846                           
  4847                           ;main.c: 734: {
  4848                           ;main.c: 735: showLed1 = 0x04;
  4849  072A  2F2C               	goto	L5
  4850  072B                     l3726:	
  4851                           
  4852                           ;main.c: 739: {
  4853                           ;main.c: 740: showLed1 = 0x10;
  4854  072B  3010               	movlw	16
  4855  072C                     L5:	
  4856  072C  00DF               	movwf	_showLed1
  4857  072D                     l3710:	
  4858                           
  4859                           ;main.c: 726: showLed2 = 0x00;
  4860  072D  01DE               	clrf	_showLed2
  4861                           
  4862                           ;main.c: 727: }
  4863  072E  0008               	return
  4864  072F                     l3712:	
  4865                           
  4866                           ;main.c: 728: else if(zeroStep == 2)
  4867  072F  3002               	movlw	2
  4868  0730  067A               	xorwf	_zeroStep,w
  4869  0731  1903               	btfsc	3,2
  4870  0732  2F29               	goto	l3714
  4871                           
  4872                           ;main.c: 733: else if(zeroStep == 3)
  4873  0733  3003               	movlw	3
  4874  0734  067A               	xorwf	_zeroStep,w
  4875                           
  4876                           ;main.c: 738: else if(zeroStep == 4)
  4877  0735  3004               	movlw	4
  4878  0736  1903               	btfsc	3,2
  4879  0737  2F2C               	goto	L5
  4880  0738  067A               	xorwf	_zeroStep,w
  4881  0739  1903               	btfsc	3,2
  4882  073A  2F2B               	goto	l3726
  4883                           
  4884                           ;main.c: 743: else if(zeroStep == 5)
  4885  073B  3005               	movlw	5
  4886  073C  067A               	xorwf	_zeroStep,w
  4887  073D  1D03               	btfss	3,2
  4888  073E  2F43               	goto	l3736
  4889                           
  4890                           ;main.c: 744: {
  4891                           ;main.c: 745: showLed1 = 0x00;
  4892  073F  01DF               	clrf	_showLed1
  4893                           
  4894                           ;main.c: 746: showLed2 = 0x01;
  4895  0740  01DE               	clrf	_showLed2
  4896  0741  0ADE               	incf	_showLed2,f
  4897                           
  4898                           ;main.c: 747: }
  4899  0742  0008               	return
  4900  0743                     l3736:	
  4901                           
  4902                           ;main.c: 748: else if(zeroStep == 6)
  4903  0743  3006               	movlw	6
  4904  0744  067A               	xorwf	_zeroStep,w
  4905  0745  1D03               	btfss	3,2
  4906  0746  2F4B               	goto	l3742
  4907  0747  3002               	movlw	2
  4908                           
  4909                           ;main.c: 749: {
  4910                           ;main.c: 750: showLed1 = 0x00;
  4911  0748  01DF               	clrf	_showLed1
  4912                           
  4913                           ;main.c: 751: showLed2 = 0x02;
  4914  0749  00DE               	movwf	_showLed2
  4915                           
  4916                           ;main.c: 752: }
  4917  074A  0008               	return
  4918  074B                     l3742:	
  4919                           
  4920                           ;main.c: 753: else if(zeroStep == 7)
  4921  074B  3007               	movlw	7
  4922  074C  067A               	xorwf	_zeroStep,w
  4923  074D  1D03               	btfss	3,2
  4924  074E  2F53               	goto	l3748
  4925  074F  3004               	movlw	4
  4926                           
  4927                           ;main.c: 754: {
  4928                           ;main.c: 755: showLed1 = 0x00;
  4929  0750  01DF               	clrf	_showLed1
  4930                           
  4931                           ;main.c: 756: showLed2 = 0x04;
  4932  0751  00DE               	movwf	_showLed2
  4933                           
  4934                           ;main.c: 757: }
  4935  0752  0008               	return
  4936  0753                     l3748:	
  4937                           
  4938                           ;main.c: 758: else if(zeroStep == 8)
  4939  0753  3008               	movlw	8
  4940  0754  067A               	xorwf	_zeroStep,w
  4941  0755  1D03               	btfss	3,2
  4942  0756  2F5B               	goto	l3754
  4943  0757  3008               	movlw	8
  4944                           
  4945                           ;main.c: 759: {
  4946                           ;main.c: 760: showLed1 = 0x00;
  4947  0758  01DF               	clrf	_showLed1
  4948                           
  4949                           ;main.c: 761: showLed2 = 0x08;
  4950  0759  00DE               	movwf	_showLed2
  4951                           
  4952                           ;main.c: 762: }
  4953  075A  0008               	return
  4954  075B                     l3754:	
  4955                           
  4956                           ;main.c: 763: else if(zeroStep == 9)
  4957  075B  3009               	movlw	9
  4958  075C  067A               	xorwf	_zeroStep,w
  4959  075D  1D03               	btfss	3,2
  4960  075E  2F63               	goto	l3760
  4961  075F  3020               	movlw	32
  4962                           
  4963                           ;main.c: 764: {
  4964                           ;main.c: 765: showLed1 = 0x00;
  4965  0760  01DF               	clrf	_showLed1
  4966                           
  4967                           ;main.c: 766: showLed2 = 0x20;
  4968  0761  00DE               	movwf	_showLed2
  4969                           
  4970                           ;main.c: 767: }
  4971  0762  0008               	return
  4972  0763                     l3760:	
  4973                           
  4974                           ;main.c: 768: else if(zeroStep == 10)
  4975  0763  300A               	movlw	10
  4976  0764  067A               	xorwf	_zeroStep,w
  4977  0765  1D03               	btfss	3,2
  4978  0766  2F6B               	goto	l3766
  4979  0767  3040               	movlw	64
  4980                           
  4981                           ;main.c: 769: {
  4982                           ;main.c: 770: showLed1 = 0x00;
  4983  0768  01DF               	clrf	_showLed1
  4984                           
  4985                           ;main.c: 771: showLed2 = 0x40;
  4986  0769  00DE               	movwf	_showLed2
  4987                           
  4988                           ;main.c: 772: }
  4989  076A  0008               	return
  4990  076B                     l3766:	
  4991                           
  4992                           ;main.c: 773: else if(zeroStep == 11)
  4993  076B  300B               	movlw	11
  4994  076C  067A               	xorwf	_zeroStep,w
  4995  076D  1D03               	btfss	3,2
  4996  076E  2F73               	goto	l3772
  4997  076F  3080               	movlw	128
  4998                           
  4999                           ;main.c: 774: {
  5000                           ;main.c: 775: showLed1 = 0x00;
  5001  0770  01DF               	clrf	_showLed1
  5002                           
  5003                           ;main.c: 776: showLed2 = 0x80;
  5004  0771  00DE               	movwf	_showLed2
  5005                           
  5006                           ;main.c: 777: }
  5007  0772  0008               	return
  5008  0773                     l3772:	
  5009                           
  5010                           ;main.c: 778: else if(zeroStep == 12)
  5011  0773  300C               	movlw	12
  5012  0774  067A               	xorwf	_zeroStep,w
  5013  0775  1D03               	btfss	3,2
  5014  0776  0008               	return
  5015  0777  3010               	movlw	16
  5016                           
  5017                           ;main.c: 779: {
  5018                           ;main.c: 780: showLed1 = 0x00;
  5019  0778  01DF               	clrf	_showLed1
  5020                           
  5021                           ;main.c: 781: showLed2 = 0x10;
  5022  0779  00DE               	movwf	_showLed2
  5023  077A  0008               	return
  5024  077B                     __end_of_setZeroStep2:	
  5025  077B                     PL2:	
  5026  077B  0800               	movf	0,w
  5027  077C  00E7               	movwf	CheckKeyOldValue@KeyOldTemp
  5028  077D  0A84               	incf	4,f
  5029  077E  0800               	movf	0,w
  5030  077F  00E8               	movwf	CheckKeyOldValue@KeyOldTemp+1
  5031  0780  0865               	movf	CheckKeyOldValue@KeyResTemp,w
  5032  0781  02E7               	subwf	CheckKeyOldValue@KeyOldTemp,f
  5033  0782  0866               	movf	CheckKeyOldValue@KeyResTemp+1,w
  5034  0783  1C03               	skipc
  5035  0784  03E8               	decf	CheckKeyOldValue@KeyOldTemp+1,f
  5036  0785  02E8               	subwf	CheckKeyOldValue@KeyOldTemp+1,f
  5037  0786  3000               	movlw	0
  5038  0787  0268               	subwf	CheckKeyOldValue@KeyOldTemp+1,w
  5039  0788  3402               	retlw	2
  5040  0789                     __end_ofPL2:	
  5041  0789                     PL4:	
  5042  0789  00F5               	movwf	??_CheckOnceResult
  5043  078A  0A84               	incf	4,f
  5044  078B  0800               	movf	0,w
  5045  078C  00F6               	movwf	??_CheckOnceResult+1
  5046  078D  086A               	movf	CheckOnceResult@KeyDown,w
  5047  078E  0775               	addwf	??_CheckOnceResult,w
  5048  078F  00F7               	movwf	??_CheckOnceResult+2
  5049  0790  0876               	movf	??_CheckOnceResult+1,w
  5050  0791  1803               	skipnc
  5051  0792  0A76               	incf	??_CheckOnceResult+1,w
  5052  0793  00F8               	movwf	??_CheckOnceResult+3
  5053  0794  086C               	movf	CheckOnceResult@KeyResTemp+1,w
  5054  0795  0278               	subwf	??_CheckOnceResult+3,w
  5055  0796  1D03               	skipz
  5056  0797  0008               	return
  5057  0798  086B               	movf	CheckOnceResult@KeyResTemp,w
  5058  0799  0277               	subwf	??_CheckOnceResult+2,w
  5059  079A  0008               	return
  5060  079B                     __end_ofPL4:	
  5061  079B                     PL6:	
  5062  079B  0084               	movwf	4
  5063  079C  0800               	movf	0,w
  5064  079D  00F5               	movwf	??_CheckOnceResult
  5065  079E  0A84               	incf	4,f
  5066  079F  0800               	movf	0,w
  5067  07A0  00F6               	movwf	??_CheckOnceResult+1
  5068  07A1  0008               	return
  5069  07A2                     __end_ofPL6:	
  5070  07A2                     PL8:	
  5071  07A2  0084               	movwf	4
  5072  07A3  0865               	movf	??_SystemEnterSleep,w
  5073  07A4  0080               	movwf	0
  5074  07A5  0A84               	incf	4,f
  5075  07A6  0866               	movf	??_SystemEnterSleep+1,w
  5076  07A7  0080               	movwf	0
  5077  07A8  1003               	clrc
  5078  07A9  0D6D               	rlf	SystemEnterSleep@cnt,w
  5079  07AA  3EAC               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5080  07AB  0084               	movwf	4
  5081  07AC  0008               	return
  5082  07AD                     __end_ofPL8:	
  5083  07AD                     PL10:	
  5084  07AD  0084               	movwf	4
  5085  07AE  0874               	movf	??_CheckKeyOldValue,w
  5086  07AF  0080               	movwf	0
  5087  07B0  0A84               	incf	4,f
  5088  07B1  0875               	movf	??_CheckKeyOldValue+1,w
  5089  07B2  0080               	movwf	0
  5090  07B3  1003               	clrc
  5091  07B4  0D69               	rlf	CheckKeyOldValue@cnt,w
  5092  07B5  3EAC               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5093  07B6  0084               	movwf	4
  5094  07B7  0008               	return
  5095  07B8                     __end_ofPL10:	
  5096  07B8                     PL12:	
  5097  07B8  0084               	movwf	4
  5098  07B9  0800               	movf	0,w
  5099  07BA  00E5               	movwf	??_SystemEnterSleep
  5100  07BB  0A84               	incf	4,f
  5101  07BC  0800               	movf	0,w
  5102  07BD  00E6               	movwf	??_SystemEnterSleep+1
  5103  07BE  0008               	return
  5104  07BF                     __end_ofPL12:	
  5105  07BF                     PL14:	
  5106  07BF  0800               	movf	0,w
  5107  07C0  00F4               	movwf	??_CheckKeyOldValue
  5108  07C1  0A84               	incf	4,f
  5109  07C2  0800               	movf	0,w
  5110  07C3  00F5               	movwf	??_CheckKeyOldValue+1
  5111  07C4  1003               	clrc
  5112  07C5  0D69               	rlf	CheckKeyOldValue@cnt,w
  5113  07C6  0008               	return
  5114  07C7                     __end_ofPL14:	
  5115  07C7                     PL16:	
  5116  07C7  0180               	clrf	0
  5117  07C8  0A84               	incf	4,f
  5118  07C9  0180               	clrf	0
  5119  07CA  1003               	clrc
  5120  07CB  0D72               	rlf	KeyClearOne@cnt,w
  5121  07CC  0008               	return
  5122  07CD                     __end_ofPL16:	
  5123  07CD                     PL18:	
  5124  07CD  0085               	movwf	5	;volatile
  5125  07CE  1283               	bcf	3,5	;RP0=0, select bank0
  5126  07CF  0185               	clrf	5	;volatile
  5127  07D0  3018               	movlw	24
  5128  07D1  1683               	bsf	3,5	;RP0=1, select bank1
  5129  07D2  0086               	movwf	6	;volatile
  5130  07D3  0008               	return
  5131  07D4                     __end_ofPL18:	
  5132  07D4                     PL20:	
  5133  07D4  1683               	bsf	3,5	;RP0=1, select bank3
  5134  07D5  1703               	bsf	3,6	;RP1=1, select bank3
  5135  07D6  1405               	bsf	5,0	;volatile
  5136  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  5137  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  5138  07D9  0008               	return
  5139  07DA                     __end_ofPL20:	
  5140  07DA                     PL22:	
  5141  07DA  0865               	movf	CheckKeyOldValue@KeyResTemp,w
  5142  07DB  0080               	movwf	0
  5143  07DC  0A84               	incf	4,f
  5144  07DD  0866               	movf	CheckKeyOldValue@KeyResTemp+1,w
  5145  07DE  0080               	movwf	0
  5146  07DF  0008               	return
  5147  07E0                     __end_ofPL22:	
  5148  07E0                     PL24:	
  5149  07E0  1303               	bcf	3,6	;RP1=0, select bank0
  5150  07E1  008D               	movwf	13	;volatile
  5151  07E2  30FA               	movlw	250
  5152  07E3  1683               	bsf	3,5	;RP0=1, select bank1
  5153  07E4  0091               	movwf	17	;volatile
  5154  07E5  0008               	return
  5155  07E6                     __end_ofPL24:	
  5156  07E6                     PL26:	
  5157  07E6  01ED               	clrf	SystemEnterSleep@cnt
  5158  07E7  01EB               	clrf	SystemEnterSleep@wake
  5159  07E8  0AEB               	incf	SystemEnterSleep@wake,f
  5160  07E9  01EC               	clrf	SystemEnterSleep@wake+1
  5161  07EA  0008               	return
  5162  07EB                     __end_ofPL26:	
  5163  07EB                     PL28:	
  5164  07EB  0DEB               	rlf	SystemEnterSleep@wake,f
  5165  07EC  0DEC               	rlf	SystemEnterSleep@wake+1,f
  5166  07ED  0AED               	incf	SystemEnterSleep@cnt,f
  5167  07EE  026D               	subwf	SystemEnterSleep@cnt,w
  5168  07EF  0008               	return
  5169  07F0                     __end_ofPL28:	
  5170                           
  5171                           	psect	text20
  5172  0EA1                     __ptext20:	
  5173 ;; *************** function _chrgCtr *****************
  5174 ;; Defined at:
  5175 ;;		line 952 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;		None
  5178 ;; Auto vars:     Size  Location     Type
  5179 ;;		None
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  1    wreg      void 
  5182 ;; Registers used:
  5183 ;;		wreg, status,2, status,0, pclath, cstack
  5184 ;; Tracked objects:
  5185 ;;		On entry : 300/0
  5186 ;;		On exit  : 300/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5189 ;;      Params:         0       0       0       0       0
  5190 ;;      Locals:         0       0       0       0       0
  5191 ;;      Temps:          0       0       0       0       0
  5192 ;;      Totals:         0       0       0       0       0
  5193 ;;Total ram usage:        0 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:    3
  5196 ;; This function calls:
  5197 ;;		_checkChrgAD
  5198 ;; This function is called by:
  5199 ;;		_main
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           
  5204                           ;psect for function _chrgCtr
  5205  0EA1                     _chrgCtr:	
  5206                           
  5207                           ;main.c: 954: if(0x20 & PORTA)
  5208                           
  5209                           ;incstack = 0
  5210                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  5211  0EA1  1E85               	btfss	5,5	;volatile
  5212  0EA2  2EC4               	goto	l4388
  5213                           
  5214                           ;main.c: 955: {
  5215                           ;main.c: 956: checkChrgAD();
  5216  0EA3  26CE  158A         	fcall	_checkChrgAD
  5217  0EA5  3006               	movlw	6
  5218                           
  5219                           ;main.c: 957: chrgFlag = 1;
  5220  0EA6  01DB               	clrf	_chrgFlag
  5221  0EA7  0ADB               	incf	_chrgFlag,f
  5222                           
  5223                           ;main.c: 958: workStep = 0;
  5224  0EA8  01FB               	clrf	_workStep
  5225                           
  5226                           ;main.c: 959: lowBatFlag = 0;
  5227  0EA9  01D1               	clrf	_lowBatFlag
  5228                           
  5229                           ;main.c: 960: ledLightTime = 0;
  5230  0EAA  01B8               	clrf	_ledLightTime
  5231  0EAB  01B9               	clrf	_ledLightTime+1
  5232                           
  5233                           ;main.c: 961: if(batResult > 1555)
  5234  0EAC  0237               	subwf	_batResult+1,w
  5235  0EAD  3014               	movlw	20
  5236  0EAE  1903               	skipnz
  5237  0EAF  0236               	subwf	_batResult,w
  5238  0EB0  1C03               	skipc
  5239  0EB1  2EC1               	goto	l4386
  5240                           
  5241                           ;main.c: 962: {
  5242                           ;main.c: 963: if(++chrgFullTime > 2500)
  5243  0EB2  0AB2               	incf	_chrgFullTime,f
  5244  0EB3  1903               	skipnz
  5245  0EB4  0AB3               	incf	_chrgFullTime+1,f
  5246  0EB5  3009               	movlw	9
  5247  0EB6  0233               	subwf	_chrgFullTime+1,w
  5248  0EB7  30C5               	movlw	197
  5249  0EB8  1903               	skipnz
  5250  0EB9  0232               	subwf	_chrgFullTime,w
  5251  0EBA  1C03               	skipc
  5252  0EBB  0008               	return
  5253                           
  5254                           ;main.c: 964: {
  5255                           ;main.c: 965: chrgFullTime = 0;
  5256  0EBC  01B2               	clrf	_chrgFullTime
  5257  0EBD  01B3               	clrf	_chrgFullTime+1
  5258                           
  5259                           ;main.c: 966: chrgFullFlag = 1;
  5260  0EBE  01D7               	clrf	_chrgFullFlag
  5261  0EBF  0AD7               	incf	_chrgFullFlag,f
  5262  0EC0  0008               	return
  5263  0EC1                     l4386:	
  5264                           
  5265                           ;main.c: 969: else
  5266                           ;main.c: 970: {
  5267                           ;main.c: 971: chrgFullTime = 0;
  5268  0EC1  01B2               	clrf	_chrgFullTime
  5269  0EC2  01B3               	clrf	_chrgFullTime+1
  5270  0EC3  0008               	return
  5271  0EC4                     l4388:	
  5272                           
  5273                           ;main.c: 974: else
  5274                           ;main.c: 975: {
  5275                           ;main.c: 976: if(chrgFlag)
  5276  0EC4  085B               	movf	_chrgFlag,w
  5277  0EC5  1D03               	btfss	3,2
  5278                           
  5279                           ;main.c: 977: {
  5280                           ;main.c: 978: zeroStep = 0;
  5281  0EC6  01FA               	clrf	_zeroStep
  5282                           
  5283                           ;main.c: 979: }
  5284                           ;main.c: 980: chrgFlag = 0;
  5285  0EC7  01DB               	clrf	_chrgFlag
  5286                           
  5287                           ;main.c: 981: chrgFullFlag = 0;
  5288  0EC8  01D7               	clrf	_chrgFullFlag
  5289                           
  5290                           ;main.c: 982: chrgFullTime = 0;
  5291  0EC9  01B2               	clrf	_chrgFullTime
  5292  0ECA  01B3               	clrf	_chrgFullTime+1
  5293                           
  5294                           ;main.c: 983: chrgDuty = 0;
  5295  0ECB  01D6               	clrf	_chrgDuty
  5296                           
  5297                           ;main.c: 984: chrgLockFlag = 0;
  5298  0ECC  01D2               	clrf	_chrgLockFlag
  5299  0ECD  0008               	return
  5300  0ECE                     __end_of_chrgCtr:	
  5301  0ECE                     __ptext21:	
  5302 ;; *************** function _checkChrgAD *****************
  5303 ;; Defined at:
  5304 ;;		line 300 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5305 ;; Parameters:    Size  Location     Type
  5306 ;;		None
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;		None
  5309 ;; Return value:  Size  Location     Type
  5310 ;;                  1    wreg      void 
  5311 ;; Registers used:
  5312 ;;		wreg, status,2, status,0, pclath, cstack
  5313 ;; Tracked objects:
  5314 ;;		On entry : 300/0
  5315 ;;		On exit  : 300/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5318 ;;      Params:         0       0       0       0       0
  5319 ;;      Locals:         0       0       0       0       0
  5320 ;;      Temps:          0       0       0       0       0
  5321 ;;      Totals:         0       0       0       0       0
  5322 ;;Total ram usage:        0 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; Hardware stack levels required when called:    2
  5325 ;; This function calls:
  5326 ;;		_Read_ADC
  5327 ;; This function is called by:
  5328 ;;		_chrgCtr
  5329 ;; This function uses a non-reentrant model
  5330 ;;
  5331                           
  5332                           
  5333                           ;psect for function _checkChrgAD
  5334  0ECE                     _checkChrgAD:	
  5335                           
  5336                           ;incstack = 0
  5337                           ; Regs used in _checkChrgAD: [wreg+status,2+status,0+pclath+cstack]
  5338  0ECE  3010               	movlw	16
  5339                           
  5340                           ;main.c: 302: chrgResult = Read_ADC(16,1);
  5341  0ECF  01F2               	clrf	Read_ADC@ADCLDORef
  5342  0ED0  0AF2               	incf	Read_ADC@ADCLDORef,f
  5343  0ED1  27B7               	fcall	_Read_ADC
  5344  0ED2  0873               	movf	?_Read_ADC+1,w
  5345  0ED3  1283               	bcf	3,5	;RP0=0, select bank0
  5346  0ED4  00B5               	movwf	_chrgResult+1
  5347  0ED5  0872               	movf	?_Read_ADC,w
  5348  0ED6  00B4               	movwf	_chrgResult
  5349  0ED7  0008               	return
  5350  0ED8                     __end_of_checkChrgAD:	
  5351  0ED8                     __ptext22:	
  5352 ;; *************** function _checkBat *****************
  5353 ;; Defined at:
  5354 ;;		line 325 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5355 ;; Parameters:    Size  Location     Type
  5356 ;;		None
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;		None
  5359 ;; Return value:  Size  Location     Type
  5360 ;;                  1    wreg      void 
  5361 ;; Registers used:
  5362 ;;		wreg, status,2, status,0, pclath, cstack
  5363 ;; Tracked objects:
  5364 ;;		On entry : 300/0
  5365 ;;		On exit  : 300/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5368 ;;      Params:         0       0       0       0       0
  5369 ;;      Locals:         0       0       0       0       0
  5370 ;;      Temps:          0       2       0       0       0
  5371 ;;      Totals:         0       2       0       0       0
  5372 ;;Total ram usage:        2 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; Hardware stack levels required when called:    2
  5375 ;; This function calls:
  5376 ;;		_Read_ADC
  5377 ;; This function is called by:
  5378 ;;		_main
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           
  5383                           ;psect for function _checkBat
  5384  0ED8                     _checkBat:	
  5385                           
  5386                           ;incstack = 0
  5387                           ; Regs used in _checkBat: [wreg+status,2+status,0+pclath+cstack]
  5388  0ED8  300A               	movlw	10
  5389                           
  5390                           ;main.c: 327: batResult = Read_ADC(10,1);
  5391  0ED9  01F2               	clrf	Read_ADC@ADCLDORef
  5392  0EDA  0AF2               	incf	Read_ADC@ADCLDORef,f
  5393  0EDB  27B7  158A         	fcall	_Read_ADC
  5394  0EDD  0873               	movf	?_Read_ADC+1,w
  5395  0EDE  1283               	bcf	3,5	;RP0=0, select bank0
  5396  0EDF  00B7               	movwf	_batResult+1
  5397  0EE0  0872               	movf	?_Read_ADC,w
  5398  0EE1  00B6               	movwf	_batResult
  5399                           
  5400                           ;main.c: 328: if(batResult < 1118)
  5401  0EE2  3004               	movlw	4
  5402  0EE3  0237               	subwf	_batResult+1,w
  5403  0EE4  305E               	movlw	94
  5404  0EE5  1903               	skipnz
  5405  0EE6  0236               	subwf	_batResult,w
  5406  0EE7  1803               	skipnc
  5407  0EE8  2EFB               	goto	l4670
  5408                           
  5409                           ;main.c: 329: {
  5410                           ;main.c: 330: batValue = 0;
  5411  0EE9  01DA               	clrf	_batValue
  5412                           
  5413                           ;main.c: 331: if(workStep > 0 && ++lowBatTime > 200)
  5414  0EEA  087B               	movf	_workStep,w
  5415  0EEB  1903               	btfsc	3,2
  5416  0EEC  0008               	return
  5417  0EED  30C9               	movlw	201
  5418  0EEE  0AD0               	incf	_lowBatTime,f
  5419  0EEF  0250               	subwf	_lowBatTime,w
  5420  0EF0  1C03               	skipc
  5421  0EF1  0008               	return
  5422  0EF2  300C               	movlw	12
  5423                           
  5424                           ;main.c: 332: {
  5425                           ;main.c: 333: lowBatTime = 0;
  5426  0EF3  01D0               	clrf	_lowBatTime
  5427                           
  5428                           ;main.c: 334: lowBatFlag = 1;
  5429  0EF4  01D1               	clrf	_lowBatFlag
  5430  0EF5  0AD1               	incf	_lowBatFlag,f
  5431                           
  5432                           ;main.c: 335: workStep = 0;
  5433  0EF6  01FB               	clrf	_workStep
  5434                           
  5435                           ;main.c: 336: zeroStep = 12;
  5436  0EF7  00FA               	movwf	_zeroStep
  5437                           
  5438                           ;main.c: 337: ledLightTime = 0;
  5439  0EF8  01B8               	clrf	_ledLightTime
  5440  0EF9  01B9               	clrf	_ledLightTime+1
  5441  0EFA  0008               	return
  5442  0EFB                     l4670:	
  5443  0EFB  3005               	movlw	5
  5444                           
  5445                           ;main.c: 340: else
  5446                           ;main.c: 341: {
  5447                           ;main.c: 342: lowBatTime = 0;
  5448  0EFC  01D0               	clrf	_lowBatTime
  5449                           
  5450                           ;main.c: 343: if(batResult >= 1376)
  5451  0EFD  0237               	subwf	_batResult+1,w
  5452  0EFE  3060               	movlw	96
  5453  0EFF  1903               	skipnz
  5454  0F00  0236               	subwf	_batResult,w
  5455                           
  5456                           ;main.c: 344: {
  5457                           ;main.c: 345: batValue = ((batResult - 1376) /2) + 16;
  5458  0F01  0836               	movf	_batResult,w
  5459  0F02  1C03               	skipc
  5460  0F03  2F11               	goto	L18
  5461  0F04  3EA0               	addlw	160
  5462  0F05  00E5               	movwf	??_checkBat
  5463  0F06  0837               	movf	_batResult+1,w
  5464  0F07  1803               	skipnc
  5465  0F08  3E01               	addlw	1
  5466  0F09  3EFA               	addlw	250
  5467  0F0A  00E6               	movwf	??_checkBat+1
  5468  0F0B  1003               	clrc
  5469  0F0C  0CE6               	rrf	??_checkBat+1,f
  5470  0F0D  0CE5               	rrf	??_checkBat,f
  5471  0F0E  0865               	movf	??_checkBat,w
  5472  0F0F  3E10               	addlw	16
  5473  0F10  2F20               	goto	L17
  5474  0F11                     L18:	
  5475                           ;main.c: 347: else
  5476                           ;main.c: 348: {
  5477                           ;main.c: 349: batValue = (batResult - 1118) / 16;
  5478                           
  5479                           ;main.c: 346: }
  5480                           
  5481  0F11  3EA2               	addlw	162
  5482  0F12  00E5               	movwf	??_checkBat
  5483  0F13  0837               	movf	_batResult+1,w
  5484  0F14  1803               	skipnc
  5485  0F15  3E01               	addlw	1
  5486  0F16  3EFB               	addlw	251
  5487  0F17  00E6               	movwf	??_checkBat+1
  5488  0F18  3004               	movlw	4
  5489  0F19                     u4275:	
  5490  0F19  1003               	clrc
  5491  0F1A  0CE6               	rrf	??_checkBat+1,f
  5492  0F1B  0CE5               	rrf	??_checkBat,f
  5493  0F1C  3EFF               	addlw	-1
  5494  0F1D  1D03               	skipz
  5495  0F1E  2F19               	goto	u4275
  5496  0F1F  0865               	movf	??_checkBat,w
  5497  0F20                     L17:	
  5498  0F20  00DA               	movwf	_batValue
  5499                           
  5500                           ;main.c: 350: }
  5501                           ;main.c: 352: if(batValue > 99)
  5502  0F21  3064               	movlw	100
  5503  0F22  025A               	subwf	_batValue,w
  5504  0F23  1C03               	skipc
  5505  0F24  0008               	return
  5506                           
  5507                           ;main.c: 353: batValue = 99;
  5508  0F25  3063               	movlw	99
  5509  0F26  00DA               	movwf	_batValue
  5510  0F27  0008               	return
  5511  0F28                     __end_of_checkBat:	
  5512  0F28                     __ptext1:	
  5513 ;; *************** function _workCtr *****************
  5514 ;; Defined at:
  5515 ;;		line 890 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;		None
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;		None
  5520 ;; Return value:  Size  Location     Type
  5521 ;;                  1    wreg      void 
  5522 ;; Registers used:
  5523 ;;		wreg, status,2, status,0, pclath, cstack
  5524 ;; Tracked objects:
  5525 ;;		On entry : 200/0
  5526 ;;		On exit  : 300/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5529 ;;      Params:         0       0       0       0       0
  5530 ;;      Locals:         0       0       0       0       0
  5531 ;;      Temps:          0       0       0       0       0
  5532 ;;      Totals:         0       0       0       0       0
  5533 ;;Total ram usage:        0 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; Hardware stack levels required when called:    3
  5536 ;; This function calls:
  5537 ;;		_checkTempAD
  5538 ;; This function is called by:
  5539 ;;		_main
  5540 ;; This function uses a non-reentrant model
  5541 ;;
  5542                           
  5543                           
  5544                           ;psect for function _workCtr
  5545  0F28                     _workCtr:	
  5546                           
  5547                           ;main.c: 892: if(workStep > 0)
  5548                           
  5549                           ;incstack = 0
  5550                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
  5551  0F28  087B               	movf	_workStep,w
  5552  0F29  1903               	btfsc	3,2
  5553  0F2A  2F47               	goto	l4320
  5554                           
  5555                           ;main.c: 893: {
  5556                           ;main.c: 894: checkTempAD();
  5557  0F2B  279A  158A         	fcall	_checkTempAD
  5558                           
  5559                           ;main.c: 895: PWMIOS0 = 0x01;
  5560  0F2D  3001               	movlw	1
  5561  0F2E  1683               	bsf	3,5	;RP0=1, select bank3
  5562  0F2F  1703               	bsf	3,6	;RP1=1, select bank3
  5563  0F30  008C               	movwf	12	;volsfr
  5564                           
  5565                           ;main.c: 896: PWMTH = 0x00;
  5566  0F31  1283               	bcf	3,5	;RP0=0, select bank0
  5567  0F32  1303               	bcf	3,6	;RP1=0, select bank0
  5568  0F33  0196               	clrf	22	;volatile
  5569                           
  5570                           ;main.c: 897: PWMTL = 100;
  5571  0F34  3064               	movlw	100
  5572  0F35  0095               	movwf	21	;volatile
  5573                           
  5574                           ;main.c: 898: PWMD01H = 0x00;
  5575  0F36  019C               	clrf	28	;volatile
  5576                           
  5577                           ;main.c: 899: if(workStep <= 10)
  5578  0F37  300B               	movlw	11
  5579  0F38  027B               	subwf	_workStep,w
  5580  0F39  1803               	skipnc
  5581  0F3A  2F3E               	goto	l4312
  5582                           
  5583                           ;main.c: 900: {
  5584                           ;main.c: 901: PWMD0L = 50 + workStep;
  5585  0F3B  087B               	movf	_workStep,w
  5586  0F3C  3E32               	addlw	50
  5587  0F3D  2F41               	goto	L1
  5588  0F3E                     l4312:	
  5589                           ;main.c: 902: }
  5590                           
  5591                           
  5592                           ;main.c: 903: else
  5593                           ;main.c: 904: {
  5594                           ;main.c: 905: PWMD0L = 40 + (workStep*2);
  5595  0F3E  1003               	clrc
  5596  0F3F  0D7B               	rlf	_workStep,w
  5597  0F40  3E28               	addlw	40
  5598  0F41                     L1:	
  5599  0F41  0097               	movwf	23	;volatile
  5600                           
  5601                           ;main.c: 906: }
  5602                           ;main.c: 907: PWMCON1 = 0x00;
  5603  0F42  0194               	clrf	20	;volatile
  5604                           
  5605                           ;main.c: 908: PWMCON2 = 0x00;
  5606  0F43  019D               	clrf	29	;volatile
  5607                           
  5608                           ;main.c: 909: PWMCON0 = 0x41;
  5609  0F44  3041               	movlw	65
  5610  0F45  0093               	movwf	19	;volatile
  5611                           
  5612                           ;main.c: 910: }
  5613  0F46  0008               	return
  5614  0F47                     l4320:	
  5615                           
  5616                           ;main.c: 911: else if(chrgFlag && chrgFullFlag == 0 && chrgLockFlag == 0)
  5617  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  5618  0F48  085B               	movf	_chrgFlag,w
  5619  0F49  1903               	btfsc	3,2
  5620  0F4A  2F98               	goto	l4364
  5621  0F4B  0857               	movf	_chrgFullFlag,w
  5622  0F4C  1D03               	btfss	3,2
  5623  0F4D  2F98               	goto	l4364
  5624  0F4E  0852               	movf	_chrgLockFlag,w
  5625  0F4F  1D03               	btfss	3,2
  5626  0F50  2F98               	goto	l4364
  5627                           
  5628                           ;main.c: 912: {
  5629                           ;main.c: 913: if(chrgResult < 70 && batResult <= 1555)
  5630  0F51  3000               	movlw	0
  5631  0F52  0235               	subwf	_chrgResult+1,w
  5632  0F53  3046               	movlw	70
  5633  0F54  1903               	skipnz
  5634  0F55  0234               	subwf	_chrgResult,w
  5635  0F56  1803               	skipnc
  5636  0F57  2F6B               	goto	l4338
  5637  0F58  3006               	movlw	6
  5638  0F59  0237               	subwf	_batResult+1,w
  5639  0F5A  3014               	movlw	20
  5640  0F5B  1903               	skipnz
  5641  0F5C  0236               	subwf	_batResult,w
  5642  0F5D  1803               	skipnc
  5643  0F5E  2F6B               	goto	l4338
  5644                           
  5645                           ;main.c: 914: {
  5646                           ;main.c: 915: if(++addTime > 10 && chrgDuty < 35)
  5647  0F5F  300B               	movlw	11
  5648  0F60  0AD5               	incf	_addTime,f
  5649  0F61  0255               	subwf	_addTime,w
  5650  0F62  1C03               	skipc
  5651  0F63  2F6C               	goto	l4340
  5652  0F64  3023               	movlw	35
  5653  0F65  0256               	subwf	_chrgDuty,w
  5654  0F66  1803               	skipnc
  5655  0F67  2F6C               	goto	l4340
  5656                           
  5657                           ;main.c: 916: {
  5658                           ;main.c: 917: addTime = 0;
  5659  0F68  01D5               	clrf	_addTime
  5660                           
  5661                           ;main.c: 918: chrgDuty++;
  5662  0F69  0AD6               	incf	_chrgDuty,f
  5663  0F6A  2F6C               	goto	l4340
  5664  0F6B                     l4338:	
  5665                           
  5666                           ;main.c: 921: else
  5667                           ;main.c: 922: {
  5668                           ;main.c: 923: addTime = 0;
  5669  0F6B  01D5               	clrf	_addTime
  5670  0F6C                     l4340:	
  5671                           
  5672                           ;main.c: 924: }
  5673                           ;main.c: 925: if(chrgResult > 80 || batResult > 1555)
  5674  0F6C  3000               	movlw	0
  5675  0F6D  0235               	subwf	_chrgResult+1,w
  5676  0F6E  3051               	movlw	81
  5677  0F6F  1903               	skipnz
  5678  0F70  0234               	subwf	_chrgResult,w
  5679  0F71  1803               	skipnc
  5680  0F72  2F7A               	goto	l4344
  5681  0F73  3006               	movlw	6
  5682  0F74  0237               	subwf	_batResult+1,w
  5683  0F75  3014               	movlw	20
  5684  0F76  1903               	skipnz
  5685  0F77  0236               	subwf	_batResult,w
  5686  0F78  1C03               	skipc
  5687  0F79  2F86               	goto	l4352
  5688  0F7A                     l4344:	
  5689                           
  5690                           ;main.c: 926: {
  5691                           ;main.c: 927: if(++subTime > 10 && chrgDuty > 10)
  5692  0F7A  300B               	movlw	11
  5693  0F7B  0AD4               	incf	_subTime,f
  5694  0F7C  0254               	subwf	_subTime,w
  5695  0F7D  1C03               	skipc
  5696  0F7E  2F87               	goto	l4354
  5697  0F7F  300B               	movlw	11
  5698  0F80  0256               	subwf	_chrgDuty,w
  5699  0F81  1C03               	skipc
  5700  0F82  2F87               	goto	l4354
  5701                           
  5702                           ;main.c: 928: {
  5703                           ;main.c: 929: subTime = 0;
  5704  0F83  01D4               	clrf	_subTime
  5705                           
  5706                           ;main.c: 930: chrgDuty--;
  5707  0F84  03D6               	decf	_chrgDuty,f
  5708  0F85  2F87               	goto	l4354
  5709  0F86                     l4352:	
  5710                           
  5711                           ;main.c: 933: else
  5712                           ;main.c: 934: {
  5713                           ;main.c: 935: subTime = 0;
  5714  0F86  01D4               	clrf	_subTime
  5715  0F87                     l4354:	
  5716                           
  5717                           ;main.c: 936: }
  5718                           ;main.c: 937: PWMIOS1 = 0x20;
  5719  0F87  3020               	movlw	32
  5720  0F88  1683               	bsf	3,5	;RP0=1, select bank3
  5721  0F89  1703               	bsf	3,6	;RP1=1, select bank3
  5722  0F8A  008D               	movwf	13	;volsfr
  5723                           
  5724                           ;main.c: 938: PWMTH = 0x00;
  5725  0F8B  1283               	bcf	3,5	;RP0=0, select bank0
  5726  0F8C  1303               	bcf	3,6	;RP1=0, select bank0
  5727  0F8D  0196               	clrf	22	;volatile
  5728                           
  5729                           ;main.c: 939: PWMTL = 70;
  5730  0F8E  3046               	movlw	70
  5731  0F8F  0095               	movwf	21	;volatile
  5732                           
  5733                           ;main.c: 940: PWMD23H = 0x00;
  5734  0F90  018E               	clrf	14	;volatile
  5735                           
  5736                           ;main.c: 941: PWMD3L = chrgDuty;
  5737  0F91  0856               	movf	_chrgDuty,w
  5738  0F92  009A               	movwf	26	;volatile
  5739                           
  5740                           ;main.c: 942: PWMCON1 = 0x00;
  5741  0F93  0194               	clrf	20	;volatile
  5742                           
  5743                           ;main.c: 943: PWMCON2 = 0x00;
  5744  0F94  019D               	clrf	29	;volatile
  5745                           
  5746                           ;main.c: 944: PWMCON0 = 0x08;
  5747  0F95  3008               	movlw	8
  5748  0F96  0093               	movwf	19	;volatile
  5749                           
  5750                           ;main.c: 945: }
  5751  0F97  0008               	return
  5752  0F98                     l4364:	
  5753                           
  5754                           ;main.c: 946: else
  5755                           ;main.c: 947: {
  5756                           ;main.c: 948: PWMCON0 = 0x00;
  5757  0F98  0193               	clrf	19	;volatile
  5758  0F99  0008               	return
  5759  0F9A                     __end_of_workCtr:	
  5760  0F9A                     __ptext2:	
  5761 ;; *************** function _checkTempAD *****************
  5762 ;; Defined at:
  5763 ;;		line 305 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;		None
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;		None
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  1    wreg      void 
  5770 ;; Registers used:
  5771 ;;		wreg, status,2, status,0, pclath, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 200/0
  5774 ;;		On exit  : 300/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5777 ;;      Params:         0       0       0       0       0
  5778 ;;      Locals:         0       0       0       0       0
  5779 ;;      Temps:          0       0       0       0       0
  5780 ;;      Totals:         0       0       0       0       0
  5781 ;;Total ram usage:        0 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    2
  5784 ;; This function calls:
  5785 ;;		_Read_ADC
  5786 ;; This function is called by:
  5787 ;;		_workCtr
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           
  5792                           ;psect for function _checkTempAD
  5793  0F9A                     _checkTempAD:	
  5794                           
  5795                           ;main.c: 307: PORTA |= 0x01;
  5796                           
  5797                           ;incstack = 0
  5798                           ; Regs used in _checkTempAD: [wreg+status,2+status,0+pclath+cstack]
  5799  0F9A  1283               	bcf	3,5	;RP0=0, select bank0
  5800  0F9B  1405               	bsf	5,0	;volatile
  5801  0F9C  3001               	movlw	1
  5802                           
  5803                           ;main.c: 308: tempResult = Read_ADC(1,1);
  5804  0F9D  01F2               	clrf	Read_ADC@ADCLDORef
  5805  0F9E  0AF2               	incf	Read_ADC@ADCLDORef,f
  5806  0F9F  27B7  158A         	fcall	_Read_ADC
  5807  0FA1  0873               	movf	?_Read_ADC+1,w
  5808  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  5809  0FA3  00AD               	movwf	_tempResult+1
  5810  0FA4  0872               	movf	?_Read_ADC,w
  5811  0FA5  00AC               	movwf	_tempResult
  5812                           
  5813                           ;main.c: 309: if(tempResult < 130)
  5814  0FA6  3000               	movlw	0
  5815  0FA7  022D               	subwf	_tempResult+1,w
  5816  0FA8  3082               	movlw	130
  5817  0FA9  1903               	skipnz
  5818  0FAA  022C               	subwf	_tempResult,w
  5819  0FAB  1803               	skipnc
  5820  0FAC  2FB5               	goto	l3578
  5821                           
  5822                           ;main.c: 310: {
  5823                           ;main.c: 312: if(++checkTempTime > 200)
  5824  0FAD  30C9               	movlw	201
  5825  0FAE  0ACF               	incf	_checkTempTime,f
  5826  0FAF  024F               	subwf	_checkTempTime,w
  5827  0FB0  1C03               	skipc
  5828  0FB1  0008               	return
  5829                           
  5830                           ;main.c: 313: {
  5831                           ;main.c: 314: checkTempTime = 0;
  5832  0FB2  01CF               	clrf	_checkTempTime
  5833                           
  5834                           ;main.c: 315: workStep = 0;
  5835  0FB3  01FB               	clrf	_workStep
  5836  0FB4  0008               	return
  5837  0FB5                     l3578:	
  5838                           
  5839                           ;main.c: 319: else
  5840                           ;main.c: 320: {
  5841                           ;main.c: 321: checkTempTime = 0;
  5842  0FB5  01CF               	clrf	_checkTempTime
  5843  0FB6  0008               	return
  5844  0FB7                     __end_of_checkTempAD:	
  5845  0FB7                     __ptext23:	
  5846 ;; *************** function _Read_ADC *****************
  5847 ;; Defined at:
  5848 ;;		line 259 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;  ADCchannel      1    wreg     unsigned char 
  5851 ;;  ADCLDORef       1    2[COMMON] unsigned char 
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;  ADCchannel      1    8[COMMON] unsigned char 
  5854 ;;  Adc_Result      2    5[COMMON] unsigned int 
  5855 ;;  Adc_ResultSu    2    0        unsigned int 
  5856 ;;  i               1    7[COMMON] unsigned char 
  5857 ;; Return value:  Size  Location     Type
  5858 ;;                  2    2[COMMON] unsigned int 
  5859 ;; Registers used:
  5860 ;;		wreg, status,2, status,0
  5861 ;; Tracked objects:
  5862 ;;		On entry : 300/0
  5863 ;;		On exit  : 300/100
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5866 ;;      Params:         2       0       0       0       0
  5867 ;;      Locals:         4       0       0       0       0
  5868 ;;      Temps:          1       0       0       0       0
  5869 ;;      Totals:         7       0       0       0       0
  5870 ;;Total ram usage:        7 bytes
  5871 ;; Hardware stack levels used:    1
  5872 ;; Hardware stack levels required when called:    1
  5873 ;; This function calls:
  5874 ;;		Nothing
  5875 ;; This function is called by:
  5876 ;;		_checkChrgAD
  5877 ;;		_checkTempAD
  5878 ;;		_checkBat
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           
  5883                           ;psect for function _Read_ADC
  5884  0FB7                     _Read_ADC:	
  5885                           
  5886                           ;incstack = 0
  5887                           ; Regs used in _Read_ADC: [wreg+status,2+status,0]
  5888                           ;Read_ADC@ADCchannel stored from wreg
  5889  0FB7  00F8               	movwf	Read_ADC@ADCchannel
  5890                           
  5891                           ;main.c: 263: unsigned char i=200;
  5892  0FB8  30C8               	movlw	200
  5893  0FB9  00F7               	movwf	Read_ADC@i
  5894                           
  5895                           ;main.c: 265: if(ADCLDORef==0)
  5896  0FBA  0872               	movf	Read_ADC@ADCLDORef,w
  5897  0FBB  1D03               	btfss	3,2
  5898  0FBC  2FC0               	goto	l3420
  5899                           
  5900                           ;main.c: 266: {
  5901                           ;main.c: 267: ADCON1 = 0B00000000;
  5902  0FBD  1683               	bsf	3,5	;RP0=1, select bank1
  5903  0FBE  019C               	clrf	28	;volatile
  5904                           
  5905                           ;main.c: 268: }
  5906  0FBF  2FC7               	goto	l3426
  5907  0FC0                     l3420:	
  5908                           
  5909                           ;main.c: 269: else if(ADCLDORef==1)
  5910  0FC0  0B72               	decfsz	Read_ADC@ADCLDORef,w
  5911  0FC1  2FC4               	goto	l3424
  5912                           
  5913                           ;main.c: 270: {
  5914                           ;main.c: 271: ADCON1 = 0B00000101;
  5915  0FC2  3005               	movlw	5
  5916  0FC3  2FC5               	goto	L20
  5917  0FC4                     l3424:	
  5918                           ;main.c: 272: }
  5919                           
  5920                           
  5921                           ;main.c: 273: else
  5922                           ;main.c: 274: {
  5923                           ;main.c: 275: ADCON1 = 0B00000110;
  5924  0FC4  3006               	movlw	6
  5925  0FC5                     L20:	
  5926  0FC5  1683               	bsf	3,5	;RP0=1, select bank1
  5927  0FC6  009C               	movwf	28	;volatile
  5928  0FC7                     l3426:	
  5929                           
  5930                           ;main.c: 276: }
  5931                           ;main.c: 278: CHS4 = 0;
  5932  0FC7  131C               	bcf	28,6	;volatile
  5933                           
  5934                           ;main.c: 279: if(ADCchannel >=16)
  5935  0FC8  3010               	movlw	16
  5936  0FC9  0278               	subwf	Read_ADC@ADCchannel,w
  5937  0FCA  1C03               	skipc
  5938  0FCB  2FCF               	goto	l1245
  5939                           
  5940                           ;main.c: 280: {
  5941                           ;main.c: 281: ADCchannel -= 16;
  5942  0FCC  3010               	movlw	16
  5943  0FCD  02F8               	subwf	Read_ADC@ADCchannel,f
  5944                           
  5945                           ;main.c: 282: CHS4 = 1;
  5946  0FCE  171C               	bsf	28,6	;volatile
  5947  0FCF                     l1245:	
  5948                           
  5949                           ;main.c: 283: }
  5950                           ;main.c: 285: ADCON0 &= 0b11000011;
  5951  0FCF  30C3               	movlw	195
  5952  0FD0  059D               	andwf	29,f	;volatile
  5953                           
  5954                           ;main.c: 286: ADCON0 |= ADCchannel<<2;
  5955  0FD1  0878               	movf	Read_ADC@ADCchannel,w
  5956  0FD2  00F4               	movwf	??_Read_ADC
  5957  0FD3  3001               	movlw	1
  5958  0FD4  1003               	clrc
  5959  0FD5                     L19:	
  5960  0FD5  0DF4               	rlf	??_Read_ADC,f
  5961  0FD6  3EFF               	addlw	-1
  5962  0FD7  1003               	clrc
  5963  0FD8  1D03               	skipz
  5964  0FD9  2FD5               	goto	L19
  5965  0FDA  0D74               	rlf	??_Read_ADC,w
  5966  0FDB  049D               	iorwf	29,f	;volatile
  5967  0FDC  0000               	nop	;# 
  5968                           
  5969                           ;main.c: 288: GODONE = 1;
  5970  0FDD  1683               	bsf	3,5	;RP0=1, select bank1
  5971  0FDE  1303               	bcf	3,6	;RP1=0, select bank1
  5972  0FDF  149D               	bsf	29,1	;volatile
  5973                           
  5974                           ;main.c: 289: while(GODONE==1&&i>0)
  5975  0FE0  2FE6               	goto	l3436
  5976  0FE1                     l3438:	
  5977  0FE1  0877               	movf	Read_ADC@i,w
  5978  0FE2  1903               	btfsc	3,2
  5979  0FE3  2FEA               	goto	l3440
  5980                           
  5981                           ;main.c: 290: {
  5982                           ;main.c: 291: i--;
  5983  0FE4  03F7               	decf	Read_ADC@i,f
  5984  0FE5  0000               	nop	;# 
  5985  0FE6                     l3436:	
  5986  0FE6  1683               	bsf	3,5	;RP0=1, select bank1
  5987  0FE7  1303               	bcf	3,6	;RP1=0, select bank1
  5988  0FE8  189D               	btfsc	29,1	;volatile
  5989  0FE9  2FE1               	goto	l3438
  5990  0FEA                     l3440:	
  5991                           
  5992                           ;main.c: 293: }
  5993                           ;main.c: 294: Adc_Result = ADRESH<<4;
  5994  0FEA  081F               	movf	31,w	;volatile
  5995  0FEB  00F5               	movwf	Read_ADC@Adc_Result
  5996  0FEC  30F0               	movlw	240
  5997  0FED  01F6               	clrf	Read_ADC@Adc_Result+1
  5998  0FEE  0EF5               	swapf	Read_ADC@Adc_Result,f
  5999  0FEF  0EF6               	swapf	Read_ADC@Adc_Result+1,f
  6000  0FF0  05F6               	andwf	Read_ADC@Adc_Result+1,f
  6001  0FF1  0875               	movf	Read_ADC@Adc_Result,w
  6002  0FF2  390F               	andlw	15
  6003  0FF3  04F6               	iorwf	Read_ADC@Adc_Result+1,f
  6004  0FF4  30F0               	movlw	240
  6005  0FF5  05F5               	andwf	Read_ADC@Adc_Result,f
  6006                           
  6007                           ;main.c: 295: Adc_Result += ADRESL>>4;
  6008  0FF6  0E1E               	swapf	30,w	;volatile
  6009  0FF7  390F               	andlw	15
  6010  0FF8  07F5               	addwf	Read_ADC@Adc_Result,f
  6011  0FF9  1803               	skipnc
  6012  0FFA  0AF6               	incf	Read_ADC@Adc_Result+1,f
  6013                           
  6014                           ;main.c: 296: return Adc_Result;
  6015  0FFB  0876               	movf	Read_ADC@Adc_Result+1,w
  6016  0FFC  00F3               	movwf	?_Read_ADC+1
  6017  0FFD  0875               	movf	Read_ADC@Adc_Result,w
  6018  0FFE  00F2               	movwf	?_Read_ADC
  6019  0FFF  0008               	return
  6020  1000                     __end_of_Read_ADC:	
  6021                           
  6022                           	psect	text24
  6023  0DB7                     __ptext24:	
  6024 ;; *************** function _KeyServer *****************
  6025 ;; Defined at:
  6026 ;;		line 127 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  6027 ;; Parameters:    Size  Location     Type
  6028 ;;		None
  6029 ;; Auto vars:     Size  Location     Type
  6030 ;;		None
  6031 ;; Return value:  Size  Location     Type
  6032 ;;                  1    wreg      void 
  6033 ;; Registers used:
  6034 ;;		wreg, status,2, status,0
  6035 ;; Tracked objects:
  6036 ;;		On entry : 300/0
  6037 ;;		On exit  : 300/0
  6038 ;;		Unchanged: 0/0
  6039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6040 ;;      Params:         0       0       0       0       0
  6041 ;;      Locals:         0       0       0       0       0
  6042 ;;      Temps:          0       0       0       0       0
  6043 ;;      Totals:         0       0       0       0       0
  6044 ;;Total ram usage:        0 bytes
  6045 ;; Hardware stack levels used:    1
  6046 ;; Hardware stack levels required when called:    1
  6047 ;; This function calls:
  6048 ;;		Nothing
  6049 ;; This function is called by:
  6050 ;;		_main
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           
  6055                           ;psect for function _KeyServer
  6056  0DB7                     _KeyServer:	
  6057                           
  6058                           ;main.c: 128: if(key1ProtectTime > 0)
  6059                           
  6060                           ;incstack = 0
  6061                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  6062  0DB7  084D               	movf	_key1ProtectTime,w
  6063  0DB8  1D03               	btfss	3,2
  6064                           
  6065                           ;main.c: 129: {
  6066                           ;main.c: 130: key1ProtectTime--;
  6067  0DB9  03CD               	decf	_key1ProtectTime,f
  6068                           
  6069                           ;main.c: 131: }
  6070                           ;main.c: 132: if(key2ProtectTime > 0)
  6071  0DBA  084C               	movf	_key2ProtectTime,w
  6072  0DBB  1D03               	btfss	3,2
  6073                           
  6074                           ;main.c: 133: {
  6075                           ;main.c: 134: key2ProtectTime--;
  6076  0DBC  03CC               	decf	_key2ProtectTime,f
  6077                           
  6078                           ;main.c: 135: }
  6079                           ;main.c: 136: if(key3ProtectTime > 0)
  6080  0DBD  084B               	movf	_key3ProtectTime,w
  6081  0DBE  1D03               	btfss	3,2
  6082                           
  6083                           ;main.c: 137: {
  6084                           ;main.c: 138: key3ProtectTime--;
  6085  0DBF  03CB               	decf	_key3ProtectTime,f
  6086                           
  6087                           ;main.c: 142: NoTouchTime = 0;
  6088  0DC0  0842               	movf	_KeyFlag,w	;volatile
  6089  0DC1  1903               	btfsc	3,2
  6090  0DC2  2E60               	goto	l4116
  6091                           
  6092                           ;main.c: 143: sleepTime = 0;
  6093  0DC3  01AE               	clrf	_sleepTime
  6094  0DC4  01AF               	clrf	_sleepTime+1
  6095                           
  6096                           ;main.c: 144: if ((KeyFlag[0] & 0x2) && key2ProtectTime == 0 && key3ProtectTime == 0) {
  6097  0DC5  1CC2               	btfss	_KeyFlag,1	;volatile
  6098  0DC6  2DE7               	goto	l4040
  6099  0DC7  084C               	movf	_key2ProtectTime,w
  6100  0DC8  1D03               	btfss	3,2
  6101  0DC9  2DE7               	goto	l4040
  6102  0DCA  084B               	movf	_key3ProtectTime,w
  6103  0DCB  1D03               	btfss	3,2
  6104  0DCC  2DE7               	goto	l4040
  6105                           
  6106                           ;main.c: 146: key1ProtectTime = 5;
  6107  0DCD  3005               	movlw	5
  6108  0DCE  00CD               	movwf	_key1ProtectTime
  6109                           
  6110                           ;main.c: 147: if(++keyCount1 > 45)
  6111  0DCF  0ABE               	incf	_keyCount1,f
  6112  0DD0  1903               	skipnz
  6113  0DD1  0ABF               	incf	_keyCount1+1,f
  6114  0DD2  3000               	movlw	0
  6115  0DD3  023F               	subwf	_keyCount1+1,w
  6116  0DD4  302E               	movlw	46
  6117  0DD5  1903               	skipnz
  6118  0DD6  023E               	subwf	_keyCount1,w
  6119  0DD7  1C03               	skipc
  6120  0DD8  2DE7               	goto	l4040
  6121                           
  6122                           ;main.c: 148: {
  6123                           ;main.c: 149: keyCount1 = 45;
  6124  0DD9  302D               	movlw	45
  6125  0DDA  00BE               	movwf	_keyCount1
  6126  0DDB  3002               	movlw	2
  6127  0DDC  01BF               	clrf	_keyCount1+1
  6128                           
  6129                           ;main.c: 150: if(workStep > 1 && ++count50 > 25)
  6130  0DDD  027B               	subwf	_workStep,w
  6131  0DDE  1C03               	skipc
  6132  0DDF  2DE7               	goto	l4040
  6133  0DE0  301A               	movlw	26
  6134  0DE1  0AD8               	incf	_count50,f
  6135  0DE2  0258               	subwf	_count50,w
  6136  0DE3  1C03               	skipc
  6137  0DE4  2DE7               	goto	l4040
  6138                           
  6139                           ;main.c: 151: {
  6140                           ;main.c: 152: workStep--;
  6141  0DE5  03FB               	decf	_workStep,f
  6142                           
  6143                           ;main.c: 153: count50 = 0;
  6144  0DE6  01D8               	clrf	_count50
  6145  0DE7                     l4040:	
  6146                           
  6147                           ;main.c: 154: }
  6148                           ;main.c: 155: }
  6149                           ;main.c: 156: }
  6150                           ;main.c: 157: if ((KeyFlag[0] & 0x1) && key1ProtectTime == 0 && key3ProtectTime == 0) {
  6151  0DE7  1C42               	btfss	_KeyFlag,0	;volatile
  6152  0DE8  2E10               	goto	l4062
  6153  0DE9  084D               	movf	_key1ProtectTime,w
  6154  0DEA  1D03               	btfss	3,2
  6155  0DEB  2E10               	goto	l4062
  6156  0DEC  084B               	movf	_key3ProtectTime,w
  6157  0DED  1D03               	btfss	3,2
  6158  0DEE  2E10               	goto	l4062
  6159                           
  6160                           ;main.c: 159: key2ProtectTime = 5;
  6161  0DEF  3005               	movlw	5
  6162  0DF0  00CC               	movwf	_key2ProtectTime
  6163                           
  6164                           ;main.c: 160: if(++keyCount2 > 45)
  6165  0DF1  0ABC               	incf	_keyCount2,f
  6166  0DF2  1903               	skipnz
  6167  0DF3  0ABD               	incf	_keyCount2+1,f
  6168  0DF4  3000               	movlw	0
  6169  0DF5  023D               	subwf	_keyCount2+1,w
  6170  0DF6  302E               	movlw	46
  6171  0DF7  1903               	skipnz
  6172  0DF8  023C               	subwf	_keyCount2,w
  6173  0DF9  1C03               	skipc
  6174  0DFA  2E10               	goto	l4062
  6175                           
  6176                           ;main.c: 161: {
  6177                           ;main.c: 162: keyCount2 = 45;
  6178  0DFB  302D               	movlw	45
  6179  0DFC  00BC               	movwf	_keyCount2
  6180  0DFD  3014               	movlw	20
  6181  0DFE  01BD               	clrf	_keyCount2+1
  6182                           
  6183                           ;main.c: 163: if(workStep < 20 && (workStep > 0 || ledLightTime > 0) && ++count50 > 25)
  6184  0DFF  027B               	subwf	_workStep,w
  6185  0E00  1803               	skipnc
  6186  0E01  2E10               	goto	l4062
  6187  0E02  087B               	movf	_workStep,w
  6188  0E03  1D03               	btfss	3,2
  6189  0E04  2E09               	goto	l4056
  6190  0E05  0838               	movf	_ledLightTime,w
  6191  0E06  0439               	iorwf	_ledLightTime+1,w
  6192  0E07  1903               	btfsc	3,2
  6193  0E08  2E10               	goto	l4062
  6194  0E09                     l4056:	
  6195  0E09  301A               	movlw	26
  6196  0E0A  0AD8               	incf	_count50,f
  6197  0E0B  0258               	subwf	_count50,w
  6198  0E0C  1C03               	skipc
  6199  0E0D  2E10               	goto	l4062
  6200                           
  6201                           ;main.c: 164: {
  6202                           ;main.c: 165: workStep++;
  6203  0E0E  0AFB               	incf	_workStep,f
  6204                           
  6205                           ;main.c: 166: count50 = 0;
  6206  0E0F  01D8               	clrf	_count50
  6207  0E10                     l4062:	
  6208                           
  6209                           ;main.c: 167: }
  6210                           ;main.c: 168: }
  6211                           ;main.c: 169: }
  6212                           ;main.c: 170: if ((KeyFlag[0] & 0x4) && key2ProtectTime == 0 && key1ProtectTime == 0) {
  6213  0E10  1D42               	btfss	_KeyFlag,2	;volatile
  6214  0E11  2E5E               	goto	l4114
  6215  0E12  084C               	movf	_key2ProtectTime,w
  6216  0E13  1D03               	btfss	3,2
  6217  0E14  2E5E               	goto	l4114
  6218  0E15  084D               	movf	_key1ProtectTime,w
  6219  0E16  1D03               	btfss	3,2
  6220  0E17  2E5E               	goto	l4114
  6221                           
  6222                           ;main.c: 172: key3ProtectTime = 5;
  6223  0E18  3005               	movlw	5
  6224  0E19  00CB               	movwf	_key3ProtectTime
  6225                           
  6226                           ;main.c: 173: if(++keyCount3 > 200)
  6227  0E1A  0ABA               	incf	_keyCount3,f
  6228  0E1B  1903               	skipnz
  6229  0E1C  0ABB               	incf	_keyCount3+1,f
  6230  0E1D  3000               	movlw	0
  6231  0E1E  023B               	subwf	_keyCount3+1,w
  6232  0E1F  30C9               	movlw	201
  6233  0E20  1903               	skipnz
  6234  0E21  023A               	subwf	_keyCount3,w
  6235  0E22  1C03               	skipc
  6236  0E23  2E4D               	goto	l4102
  6237                           
  6238                           ;main.c: 174: {
  6239                           ;main.c: 175: keyCount3 = 200;
  6240  0E24  30C8               	movlw	200
  6241  0E25  00BA               	movwf	_keyCount3
  6242  0E26  01BB               	clrf	_keyCount3+1
  6243                           
  6244                           ;main.c: 176: if(longKeyFalg == 0)
  6245  0E27  0863               	movf	_longKeyFalg,w
  6246  0E28  1D03               	btfss	3,2
  6247  0E29  2E43               	goto	l4094
  6248                           
  6249                           ;main.c: 177: {
  6250                           ;main.c: 178: longKeyFalg = 1;
  6251  0E2A  01E3               	clrf	_longKeyFalg
  6252  0E2B  0AE3               	incf	_longKeyFalg,f
  6253                           
  6254                           ;main.c: 179: if(workStep > 0 || ledLightTime > 0)
  6255  0E2C  087B               	movf	_workStep,w
  6256  0E2D  1D03               	btfss	3,2
  6257  0E2E  2E33               	goto	l4082
  6258  0E2F  0838               	movf	_ledLightTime,w
  6259  0E30  0439               	iorwf	_ledLightTime+1,w
  6260  0E31  1903               	btfsc	3,2
  6261  0E32  2E39               	goto	l4088
  6262  0E33                     l4082:	
  6263  0E33  300C               	movlw	12
  6264                           
  6265                           ;main.c: 180: {
  6266                           ;main.c: 181: workStep = 0;
  6267  0E34  01FB               	clrf	_workStep
  6268                           
  6269                           ;main.c: 182: zeroStep = 12;
  6270  0E35  00FA               	movwf	_zeroStep
  6271                           
  6272                           ;main.c: 183: ledLightTime = 0;
  6273  0E36  01B8               	clrf	_ledLightTime
  6274  0E37  01B9               	clrf	_ledLightTime+1
  6275                           
  6276                           ;main.c: 184: }
  6277  0E38  2E4D               	goto	l4102
  6278  0E39                     l4088:	
  6279                           
  6280                           ;main.c: 185: else if(lowBatFlag == 0)
  6281  0E39  0851               	movf	_lowBatFlag,w
  6282  0E3A  1D03               	btfss	3,2
  6283  0E3B  2E4D               	goto	l4102
  6284  0E3C  302C               	movlw	44
  6285                           
  6286                           ;main.c: 186: {
  6287                           ;main.c: 187: workStep = 0;
  6288  0E3D  01FB               	clrf	_workStep
  6289                           
  6290                           ;main.c: 188: zeroStep = 0;
  6291  0E3E  01FA               	clrf	_zeroStep
  6292                           
  6293                           ;main.c: 189: ledLightTime = 300;
  6294  0E3F  00B8               	movwf	_ledLightTime
  6295  0E40  3001               	movlw	1
  6296  0E41  00B9               	movwf	_ledLightTime+1
  6297                           
  6298                           ;main.c: 191: {
  6299                           ;main.c: 192: shanShuoTime = 250;
  6300  0E42  2E4D               	goto	l4102
  6301  0E43                     l4094:	
  6302                           
  6303                           ;main.c: 196: else if(zeroStep > 0 && ++count64ms >= 12)
  6304  0E43  087A               	movf	_zeroStep,w
  6305  0E44  1903               	btfsc	3,2
  6306  0E45  2E4D               	goto	l4102
  6307  0E46  300C               	movlw	12
  6308  0E47  0ADD               	incf	_count64ms,f
  6309  0E48  025D               	subwf	_count64ms,w
  6310  0E49  1C03               	skipc
  6311  0E4A  2E4D               	goto	l4102
  6312                           
  6313                           ;main.c: 197: {
  6314                           ;main.c: 198: zeroStep--;
  6315  0E4B  03FA               	decf	_zeroStep,f
  6316                           
  6317                           ;main.c: 199: count64ms = 0;
  6318  0E4C  01DD               	clrf	_count64ms
  6319  0E4D                     l4102:	
  6320                           
  6321                           ;main.c: 200: }
  6322                           ;main.c: 201: }
  6323                           ;main.c: 202: if(lowBatFlag == 0 && ledLightTime == 0 && longKeyFalg == 0 && keyCount3 %
      +                           16 == 0)
  6324  0E4D  0851               	movf	_lowBatFlag,w
  6325  0E4E  1D03               	btfss	3,2
  6326  0E4F  2E5E               	goto	l4114
  6327  0E50  0838               	movf	_ledLightTime,w
  6328  0E51  0439               	iorwf	_ledLightTime+1,w
  6329  0E52  1D03               	btfss	3,2
  6330  0E53  2E5E               	goto	l4114
  6331  0E54  0863               	movf	_longKeyFalg,w
  6332  0E55  1D03               	btfss	3,2
  6333  0E56  2E5E               	goto	l4114
  6334  0E57  083A               	movf	_keyCount3,w
  6335  0E58  390F               	andlw	15
  6336  0E59  1D03               	btfss	3,2
  6337  0E5A  2E5E               	goto	l4114
  6338                           
  6339                           ;main.c: 203: {
  6340                           ;main.c: 204: zeroStep++;
  6341  0E5B  0AFA               	incf	_zeroStep,f
  6342                           
  6343                           ;main.c: 205: preZero = zeroStep;
  6344  0E5C  087A               	movf	_zeroStep,w
  6345  0E5D  00C9               	movwf	_preZero
  6346  0E5E                     l4114:	
  6347                           
  6348                           ;main.c: 206: }
  6349                           ;main.c: 207: }
  6350                           ;main.c: 208: keyCancelTime = 0;
  6351  0E5E  01CA               	clrf	_keyCancelTime
  6352                           
  6353                           ;main.c: 209: }
  6354  0E5F  0008               	return
  6355  0E60                     l4116:	
  6356                           
  6357                           ;main.c: 210: else
  6358                           ;main.c: 211: {
  6359                           ;main.c: 212: if(++keyCancelTime > 5)
  6360  0E60  3006               	movlw	6
  6361  0E61  0ACA               	incf	_keyCancelTime,f
  6362  0E62  024A               	subwf	_keyCancelTime,w
  6363  0E63  1C03               	skipc
  6364  0E64  2E89               	goto	l4140
  6365  0E65  3000               	movlw	0
  6366                           
  6367                           ;main.c: 213: {
  6368                           ;main.c: 214: keyCancelTime = 0;
  6369  0E66  01CA               	clrf	_keyCancelTime
  6370                           
  6371                           ;main.c: 215: if(keyCount1 > 5 && workStep > 1)
  6372  0E67  023F               	subwf	_keyCount1+1,w
  6373  0E68  3006               	movlw	6
  6374  0E69  1903               	skipnz
  6375  0E6A  023E               	subwf	_keyCount1,w
  6376  0E6B  1C03               	skipc
  6377  0E6C  2E72               	goto	l4126
  6378  0E6D  3002               	movlw	2
  6379  0E6E  027B               	subwf	_workStep,w
  6380  0E6F  1C03               	skipc
  6381  0E70  2E72               	goto	l4126
  6382                           
  6383                           ;main.c: 216: {
  6384                           ;main.c: 217: workStep--;
  6385  0E71  03FB               	decf	_workStep,f
  6386  0E72                     l4126:	
  6387  0E72  3000               	movlw	0
  6388                           
  6389                           ;main.c: 218: }
  6390                           ;main.c: 219: keyCount1 = 0;
  6391  0E73  01BE               	clrf	_keyCount1
  6392  0E74  01BF               	clrf	_keyCount1+1
  6393                           
  6394                           ;main.c: 221: if(keyCount2 > 5 && workStep < 20 && (workStep > 0 || ledLightTime > 0))
  6395  0E75  023D               	subwf	_keyCount2+1,w
  6396  0E76  3006               	movlw	6
  6397  0E77  1903               	skipnz
  6398  0E78  023C               	subwf	_keyCount2,w
  6399  0E79  1C03               	skipc
  6400  0E7A  2E87               	goto	l4138
  6401  0E7B  3014               	movlw	20
  6402  0E7C  027B               	subwf	_workStep,w
  6403  0E7D  1803               	skipnc
  6404  0E7E  2E87               	goto	l4138
  6405  0E7F  087B               	movf	_workStep,w
  6406  0E80  1D03               	btfss	3,2
  6407  0E81  2E86               	goto	l4136
  6408  0E82  0838               	movf	_ledLightTime,w
  6409  0E83  0439               	iorwf	_ledLightTime+1,w
  6410  0E84  1903               	btfsc	3,2
  6411  0E85  2E87               	goto	l4138
  6412  0E86                     l4136:	
  6413                           
  6414                           ;main.c: 222: {
  6415                           ;main.c: 223: workStep++;
  6416  0E86  0AFB               	incf	_workStep,f
  6417  0E87                     l4138:	
  6418                           
  6419                           ;main.c: 224: }
  6420                           ;main.c: 225: keyCount2 = 0;
  6421  0E87  01BC               	clrf	_keyCount2
  6422  0E88  01BD               	clrf	_keyCount2+1
  6423  0E89                     l4140:	
  6424                           
  6425                           ;main.c: 226: }
  6426                           ;main.c: 233: if(preZero == 1 || preZero == 2)
  6427  0E89  0349               	decf	_preZero,w
  6428  0E8A  1903               	btfsc	3,2
  6429  0E8B  2E90               	goto	l4144
  6430  0E8C  3002               	movlw	2
  6431  0E8D  0649               	xorwf	_preZero,w
  6432  0E8E  1D03               	btfss	3,2
  6433  0E8F  2E93               	goto	l4148
  6434  0E90                     l4144:	
  6435  0E90  3003               	movlw	3
  6436                           
  6437                           ;main.c: 234: {
  6438                           ;main.c: 235: preZero = 0;
  6439  0E91  01C9               	clrf	_preZero
  6440                           
  6441                           ;main.c: 236: zeroStep = 3;
  6442  0E92  00FA               	movwf	_zeroStep
  6443  0E93                     l4148:	
  6444                           
  6445                           ;main.c: 237: }
  6446                           ;main.c: 238: longKeyFalg = 0;
  6447  0E93  01E3               	clrf	_longKeyFalg
  6448                           
  6449                           ;main.c: 239: keyCount3 = 0;
  6450  0E94  01BA               	clrf	_keyCount3
  6451  0E95  01BB               	clrf	_keyCount3+1
  6452                           
  6453                           ;main.c: 240: if(zeroStep > 0 && ++count64ms >= 12)
  6454  0E96  087A               	movf	_zeroStep,w
  6455  0E97  1903               	btfsc	3,2
  6456  0E98  0008               	return
  6457  0E99  300C               	movlw	12
  6458  0E9A  0ADD               	incf	_count64ms,f
  6459  0E9B  025D               	subwf	_count64ms,w
  6460  0E9C  1C03               	skipc
  6461  0E9D  0008               	return
  6462                           
  6463                           ;main.c: 241: {
  6464                           ;main.c: 242: zeroStep--;
  6465  0E9E  03FA               	decf	_zeroStep,f
  6466                           
  6467                           ;main.c: 243: count64ms = 0;
  6468  0E9F  01DD               	clrf	_count64ms
  6469  0EA0  0008               	return
  6470  0EA1                     __end_of_KeyServer:	
  6471                           
  6472                           	psect	text37
  6473  0D6D                     __ptext37:	
  6474 ;; *************** function _Isr_Timer *****************
  6475 ;; Defined at:
  6476 ;;		line 361 in file "C:\mcuproject\scm\D17_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;		None
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;		None
  6481 ;; Return value:  Size  Location     Type
  6482 ;;                  1    wreg      void 
  6483 ;; Registers used:
  6484 ;;		wreg, status,2, status,0
  6485 ;; Tracked objects:
  6486 ;;		On entry : 0/0
  6487 ;;		On exit  : 200/200
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6490 ;;      Params:         0       0       0       0       0
  6491 ;;      Locals:         0       0       0       0       0
  6492 ;;      Temps:          2       0       0       0       0
  6493 ;;      Totals:         2       0       0       0       0
  6494 ;;Total ram usage:        2 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; This function calls:
  6497 ;;		Nothing
  6498 ;; This function is called by:
  6499 ;;		Interrupt level 1
  6500 ;; This function uses a non-reentrant model
  6501 ;;
  6502                           
  6503                           
  6504                           ;psect for function _Isr_Timer
  6505  0D6D                     _Isr_Timer:	
  6506                           
  6507                           ;main.c: 363: if(TMR2IF)
  6508  0D6D  1283               	bcf	3,5	;RP0=0, select bank0
  6509  0D6E  1303               	bcf	3,6	;RP1=0, select bank0
  6510  0D6F  1C8C               	btfss	12,1	;volatile
  6511  0D70  2D7A               	goto	i1l4488
  6512                           
  6513                           ;main.c: 364: {
  6514                           ;main.c: 365: TMR2IF = 0;
  6515  0D71  108C               	bcf	12,1	;volatile
  6516                           
  6517                           ;main.c: 366: if(++MainTime >= 32)
  6518  0D72  3020               	movlw	32
  6519  0D73  0AE4               	incf	_MainTime,f	;volatile
  6520  0D74  0264               	subwf	_MainTime,w	;volatile
  6521  0D75  1C03               	skipc
  6522  0D76  2D7B               	goto	i1l4490
  6523                           
  6524                           ;main.c: 367: {
  6525                           ;main.c: 368: MainTime = 0;
  6526  0D77  01E4               	clrf	_MainTime	;volatile
  6527                           
  6528                           ;main.c: 369: B_MainLoop = 1;
  6529  0D78  1779               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  6530  0D79  2D7B               	goto	i1l4490
  6531  0D7A                     i1l4488:	
  6532                           
  6533                           ;main.c: 372: else
  6534                           ;main.c: 373: {
  6535                           ;main.c: 374: PIR1 = 0;
  6536  0D7A  018C               	clrf	12	;volatile
  6537  0D7B                     i1l4490:	
  6538                           
  6539                           ;main.c: 375: }
  6540                           ;main.c: 377: if(RACIF)
  6541  0D7B  1703               	bsf	3,6	;RP1=1, select bank2
  6542  0D7C  1C87               	btfss	7,1	;volatile
  6543  0D7D  2D81               	goto	i1l4496
  6544                           
  6545                           ;main.c: 378: {
  6546                           ;main.c: 379: RACIF = 0;
  6547  0D7E  1087               	bcf	7,1	;volatile
  6548                           
  6549                           ;main.c: 380: PORTA;
  6550  0D7F  1303               	bcf	3,6	;RP1=0, select bank0
  6551  0D80  0805               	movf	5,w	;volatile
  6552  0D81                     i1l4496:	
  6553                           
  6554                           ;main.c: 382: }
  6555                           ;main.c: 385: if(RCCIF)
  6556  0D81  1703               	bsf	3,6	;RP1=1, select bank2
  6557  0D82  1D07               	btfss	7,2	;volatile
  6558  0D83  2D87               	goto	i1l1279
  6559                           
  6560                           ;main.c: 386: {
  6561                           ;main.c: 387: RCCIF = 0;
  6562  0D84  1107               	bcf	7,2	;volatile
  6563                           
  6564                           ;main.c: 388: PORTC;
  6565  0D85  1683               	bsf	3,5	;RP0=1, select bank3
  6566  0D86  0805               	movf	5,w	;volatile
  6567  0D87                     i1l1279:	
  6568  0D87  0871               	movf	??_Isr_Timer+1,w
  6569  0D88  008A               	movwf	10
  6570  0D89  0E70               	swapf	??_Isr_Timer^(0+-128),w
  6571  0D8A  0083               	movwf	3
  6572  0D8B  0EFE               	swapf	126,f
  6573  0D8C  0E7E               	swapf	126,w
  6574  0D8D  0009               	retfie
  6575  0D8E                     __end_of_Isr_Timer:	
  6576  007E                     btemp	set	126	;btemp
  6577  007E                     wtemp0	set	126
  6578                           
  6579                           	psect	intentry
  6580  0004                     __pintentry:	
  6581                           ;incstack = 0
  6582                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  6583                           
  6584  0004                     interrupt_function:	
  6585  007E                     saved_w	set	btemp
  6586  0004  00FE               	movwf	btemp
  6587  0005  0E03               	swapf	3,w
  6588  0006  00F0               	movwf	??_Isr_Timer
  6589  0007  080A               	movf	10,w
  6590  0008  00F1               	movwf	??_Isr_Timer+1
  6591  0009  158A  2D6D         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    31
    Data        0
    BSS         98
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      12
    BANK0            80      9      78
    BANK1            80      0      27
    BANK3            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _checkTempAD->_Read_ADC
    _refreshTM1650->_tm1650cmd
    _initTM1650->_tm1650cmd
    _tm1650cmd->_write_8bit
    _SystemEnterSleep->_GetTouchKeyValue
    _checkChrgAD->_Read_ADC
    _checkBat->_Read_ADC
    _CheckTouchKey->_CheckOnceResult
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Isr_Timer in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8191
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                           _checkBat
                            _chrgCtr
                         _initTM1650
                            _showCtr
                              _task1
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0     267
                        _checkTempAD
 ---------------------------------------------------------------------------------
 (2) _checkTempAD                                          0     0      0     267
                           _Read_ADC
 ---------------------------------------------------------------------------------
 (1) _task1                                                0     0      0     801
                      _refreshTM1650
 ---------------------------------------------------------------------------------
 (2) _refreshTM1650                                        0     0      0     801
                          _tm1650cmd
 ---------------------------------------------------------------------------------
 (1) _showCtr                                              0     0      0    3091
                          _WorkSleep
                            ___lbdiv
                            ___lbmod
                            ___lwmod
                         _initTM1650
                        _setZeroStep
                       _setZeroStep2
                          _tm1650cmd
 ---------------------------------------------------------------------------------
 (2) _setZeroStep2                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setZeroStep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initTM1650                                           0     0      0     801
                          _tm1650cmd
 ---------------------------------------------------------------------------------
 (3) _tm1650cmd                                            2     1      1     801
                                              4 COMMON     2     1      1
                       _TM1650_START
                        _TM1650_STOP
                         _write_8bit
 ---------------------------------------------------------------------------------
 (4) _write_8bit                                           2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _TM1650_STOP                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TM1650_START                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     245
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     202
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     205
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _WorkSleep                                            0     0      0     837
                        _Init_System
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (3) _SystemEnterSleep                                     9     9      0     837
                                              0 BANK0      9     9      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0     267
                        _checkChrgAD
 ---------------------------------------------------------------------------------
 (2) _checkChrgAD                                          0     0      0     267
                           _Read_ADC
 ---------------------------------------------------------------------------------
 (1) _checkBat                                             2     2      0     267
                                              0 BANK0      2     2      0
                           _Read_ADC
 ---------------------------------------------------------------------------------
 (3) _Read_ADC                                             9     7      2     267
                                              2 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    2697
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (4) _GetTouchKeyValue                                     5     5      0     181
                                              3 COMMON     5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (5) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1463
                                              5 COMMON     4     4      0
                                              0 BANK0      9     9      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     304
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (4) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _checkBat
     _Read_ADC
   _chrgCtr
     _checkChrgAD
       _Read_ADC
   _initTM1650
     _tm1650cmd
       _TM1650_START
       _TM1650_STOP
       _write_8bit
   _showCtr
     _WorkSleep
       _Init_System
       _Refurbish_Sfr
       _SystemEnterSleep
         _ClearResSum
         _GetTouchKeyValue
           _ClearResSum
         _KeyClearOne
     ___lbdiv
     ___lbmod
     ___lwmod
     _initTM1650
       _tm1650cmd
         _TM1650_START
         _TM1650_STOP
         _write_8bit
     _setZeroStep
     _setZeroStep2
     _tm1650cmd
       _TM1650_START
       _TM1650_STOP
       _write_8bit
   _task1
     _refreshTM1650
       _tm1650cmd
         _TM1650_START
         _TM1650_STOP
         _write_8bit
   _workCtr
     _checkTempAD
       _Read_ADC

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      9      4E       4       97.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0      1B       6       33.8%
BITBANK3            50      0       0       7        0.0%
BANK3               50      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
ABS                  0      0      75      11        0.0%
DATA                 0      0      75      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue May 06 17:54:11 2025

                KeyIsIn@cnt 0073                  KeyHave@cnt 0074                 KeyHave@flag 0072  
              ?_TM1650_STOP 0070                           pc 0002                          PL2 077B  
                        PL4 0789                          PL6 079B                          PL8 07A2  
             ?_TM1650_START 0070               ??_KeyClearOne 0072       __size_of_TurnKeyFlags 002D  
                        fsr 0004            ??_CheckValidTime 0072  SystemEnterSleep@KeyResTemp 0069  
                       PL10 07AD                         PL20 07D4                         PL12 07B8  
                       PL22 07DA                         PL14 07BF                         PL24 07E0  
                       PL16 07C7                         PL26 07E6                         PL18 07CD  
                       PL28 07EB                         _RC0 0C28                         _RB6 0036  
                       _RB7 0037                         _PR2 0091                         fsr0 0004  
                       indf 0000         CheckOnceResult@flag 0069           ?_GetTouchKeyValue 0070  
  __end_of_Table_KeyChannel 0825          ??_GetTouchKeyValue 0073                        l1245 0FCF  
                      l4002 0336                        l3300 055F                        l1622 00F4  
                      l4102 0E4D                        l1640 05FA                        l4040 0DE7  
                      l1296 03C4                        l4114 0E5E                        l3306 066A  
                      l1298 03F7                        l3340 0586                        l4140 0E89  
                      l4116 0E60                        l3420 0FC0                        l1581 05B9  
                      l4126 0E72                        l4062 0E10                        l1671 04CF  
                      l3328 01FA                        l3344 058C                        l4144 0E90  
                      l4136 0E86                        l4056 0E09                        l3440 0FEA  
                      l3424 0FC4                        l4400 0030                        l4312 0F3E  
                      l4320 0F47                        l3370 05C7                        l4138 0E87  
                      l4082 0E33                        l3426 0FC7                        l4410 004A  
                      l1659 0088                        l3372 05D7                        l4148 0E93  
                      l3436 0FE6                        l4412 004C                        l4340 0F6C  
                      l3542 0631                        l4094 0E43                        l3438 0FE1  
                      l3622 068C                        l3710 072D                        l3702 071E  
                      l4430 006B                        l3560 0209                        l3536 0630  
                      l4088 0E39                        l3376 0640                        l1952 02EC  
                      l3640 06BC                        l3712 072F                        l4416 0056  
                      l4352 0F86                        l4344 0F7A                        l3298 055E  
                      l3546 063A                        l3650 06CE                        l3714 0729  
                      l3706 0724                        l4354 0F87                        l4338 0F6B  
                      l3812 0168                        l4460 0097                        l4612 0492  
                      l3652 06C6                        l3644 06C2                        l3628 0376  
                      l4428 0069                        l4364 0F98                        l4470 00A0  
                      l4606 0557                        l3742 074B                        l3726 072B  
                      l3832 019E                        l4560 04FA                        l3664 06CA  
                      l3760 0763                        l3736 0743                        l4704 0249  
                      l3850 01D6                        l3826 0196                        l4386 0EC1  
                      l4642 04C6                        l3690 0707                        l3682 06F5  
                      l3674 06E3                        l3658 06C8                        l3754 075B  
                      l4730 0274                        l4722 0269                        l4714 025D  
                      l3578 0FB5                        l3940 062D                        l4468 009C  
                      l4476 00A6                        l4388 0EC4                        l4572 0501  
                      l3772 0773                        l3748 0753                        l4804 0DA7  
                      l3854 01DA                        l3846 01CA                        l3934 061C  
                      l3926 0601                        l4670 0EFB                        l4590 0536  
                      l3950 02E6                        l3694 0710                        l3686 06FE  
                      l3678 06EC                        l3766 076B                        l4726 026F  
                      l4718 0263                        l4398 002E                        l3856 01DE  
                      l3784 0211                        l4648 04CC                        l3696 0714  
                      l4760 02AB                        l4736 0283                        l3858 01E4  
                      l3794 0111                        l4586 052F                        l3698 0719  
                      l4770 02B6                        l4754 02A2                        l4762 02AC  
                      l4690 022B                        l3868 00B0                        l3964 02F9  
                      l3980 0313                        l3972 02FF                        l4782 02D3  
                      l4758 02A9                        l4792 0D97                        l3994 0323  
                      _ADON 04E8                        _CHS4 04E6                        _IOCA 0188  
                      u3045 0329                        _PIE1 000D                        _PIE2 0108  
                      u2725 01B6                        u2655 011E                        u4175 052B  
                      u2675 0159                        u4275 0F19                        u2685 016E  
                      u2695 017A                        _RBIF 0058                        _PIR1 000C  
                      _PIR2 0107                        _TMR0 0001                        _WPUB 0008  
                      _WPUC 0115                        _main 0D8E                        btemp 007E  
             ?_KeyStopClear 0070                        start 000B                _TurnKeyFlags 05E1  
           __end_of_KeyIsIn 0200             __end_of_KeyHave 020C              ??_TM1650_START 0072  
CheckKeyOldValue@KeyOldTemp 0067               ??_Init_System 0072  CheckKeyOldValue@KeyResTemp 0065  
     __end_of_refreshTM1650 03B5                       ?_main 0070             __end_of___lbdiv 02FB  
      __size_of_checkChrgAD 000A             __end_of___lbmod 0317                       _T2CON 0012  
  __end_of_SystemEnterSleep 055E                       _RACIE 0841                       _RACIF 0839  
           __end_of___lwmod 033B                       _RCCIF 083A                       _PORTA 0005  
                     _PORTB 0006                       _PORTC 0185                       _TRISA 0085  
                     _TRISB 0086                       _PWMTH 0016                       _TRISC 0186  
                     _PWMTL 0015        __size_of_checkTempAD 001D             __end_of_chrgCtr 0ECE  
       __end_of_KeyClearOne 0582                  _KeyClearIn 0630                       _task1 001F  
            __pbitbssCOMMON 03C8                       pclath 000A             __end_of_showCtr 02E0  
               _ClearResSum 055E                  _KeyCounter 0048                  _KeyOldData 002A  
            ??_KeyStopClear 0073                       status 0003          Read_ADC@ADCchannel 0078  
                     wtemp0 007E             __end_of_workCtr 0F9A             ___lbdiv@divisor 0072  
                _KeyUpShake 00B8             ___lbdiv@counter 0074             __initialization 000D  
              __end_of_main 0DB7            __end_of_Read_ADC 1000                      ??_main 0079  
       __end_of_Init_System 066A                      _ADCON0 009D                      _ADCON1 009C  
                    _ADRESH 009F                      _ADRESL 009E                      ?_task1 0070  
                    _ANSEL0 0110                      _ANSEL1 0111                      _ANSEL2 0112  
                    _GODONE 04E9                      i1l1279 0D87                      i1l4490 0D7B  
                    i1l4496 0D81                      i1l4488 0D7A                      _INTCON 000B  
        __size_of_KeyServer 00EA                      _OSCCON 0088                      _TMR2IF 0061  
                    _PWMD0L 0017                      _PWMD3L 001A                      _TRISB6 0436  
          __end_of_checkBat 0F28                ?_setZeroStep 0070                      _SWDTEN 0441  
                 ??_KeyIsIn 0072                   ??_KeyHave 0074          __size_of_Isr_Timer 0021  
 CheckOnceResult@KeyResTemp 006B      CheckOnceResult@KeyDown 006A   __size_of_CheckKeyOldValue 0064  
                    _b_kclr 03CA                      _b_kerr 03C9                   ??___lbdiv 0073  
                 ??___lbmod 0073                   ??___lwmod 0076                 _KeyClearOne 056D  
      __size_of_TM1650_STOP 0022                   ??_chrgCtr 0079             _key1ProtectTime 004D  
          __end_of_numArray 0814               _Table_KeyFalg 0814               _Table_KeyDown 081C  
                    saved_w 007E      __size_of_CheckTouchKey 002D                   ??_showCtr 0078  
               ?_KeyClearIn 0070                   ??_workCtr 0079             _CheckOnceResult 010B  
          ___lbdiv@dividend 0073        __end_of_TM1650_START 0492             ___lbmod@divisor 0072  
   __end_of__initialization 001C             ___lbmod@counter 0075             _key2ProtectTime 004C  
        __size_of_WorkSleep 003D          __size_of_tm1650cmd 000A              __pcstackCOMMON 0070  
             __end_of_task1 007A                 _Init_System 0640                  __end_ofPL2 0789  
                __end_ofPL4 079B                  __end_ofPL6 07A2                  __end_ofPL8 07AD  
          ___lbdiv@quotient 0075           __end_of_KeyServer 0EA1             _key3ProtectTime 004B  
      __end_of_KeyStopClear 0222           __end_of_Isr_Timer 0D8E                     ??_task1 0076  
        Read_ADC@Adc_Result 0075                  __pbssBANK0 0020                  __pbssBANK1 00A0  
                 ?_Read_ADC 0072                _chrgFullFlag 0057   __size_of_GetTouchKeyValue 005F  
              _chrgLockFlag 0052                _chrgFullTime 0032               _CheckTouchKey 007A  
                __pmaintext 0D8E                  _chrgResult 0034                  __pintentry 0004  
       __size_of_KeyClearIn 0010           __end_of_WorkSleep 04CF           ?_SystemEnterSleep 0070  
   __end_of_CheckOnceResult 01EC                     _KEYCON0 0092                     _KEYCON1 0093  
                   _KEYCON2 0097                   ?_checkBat 0070           __end_of_tm1650cmd 03BF  
             KeyStopClear@i 0073          ??_SystemEnterSleep 0065                     _B_OnOff 03CD  
                   _PWMD01H 001C                     _PWMD23H 000E      __size_of_Refurbish_Sfr 000E  
                   _PWMCON0 0013                     _PWMCON1 0014                     _PWMCON2 001D  
                   _PWMIOS0 018C                     _PWMIOS1 018D               ?_setZeroStep2 0070  
      __end_of_Table_KeyCap 0822                  __stringtab 0800                ?_ClearResSum 0070  
                ??_Read_ADC 0074                  _initTM1650 068C                     _KeyData 0028  
                   _KeyFlag 0042                     _KeyIsIn 01EC                     _KeyHave 0200  
            ClearResSum@cnt 0072              ?_CheckTouchKey 0070        __size_of_setZeroStep 0062  
           _chrgBatStepTime 004E     CheckOnceResult@KeyValue 0067            _CheckKeyOldValue 00A7  
                   ___lbdiv 02E0                     ___lbmod 02FB                     _addTime 0055  
   CheckOnceResult@OldValue 0065                _ledLightTime 0038      TurnKeyFlags@KeyNoTimes 0044  
             ??_checkChrgAD 0079                     ___lwmod 0317        GetTouchKeyValue@wake 0075  
      GetTouchKeyValue@temp 0073                     _b_kover 03CC                     _chrgCtr 0EA1  
             ??_checkTempAD 0079                  _lowBatFlag 0051                     __ptext1 0F28  
                   __ptext2 0F9A                     __ptext3 001F                     __ptext4 033B  
                   __ptext5 0222                     __ptext6 071E                     __ptext7 06BC  
                   __ptext8 068C                     __ptext9 03B5                  _lowBatTime 0050  
                   _count50 0058                     _count1s 005C                  ??_checkBat 0065  
     __size_of_TM1650_START 0015                     _preZero 0049                     _showCtr 0222  
                   _subTime 0054              ??_setZeroStep2 0072     __size_of_CheckValidTime 0014  
                   clrloop0 07F1                     _workCtr 0F28        end_of_initialization 001C  
    __size_of_refreshTM1650 007A                  _tempResult 002C               _Refurbish_Sfr 060E  
              _KeyOldValue0 00AC                _KeyOldValue1 0020                _KeyOldValue2 00A6  
     __size_of_KeyStopClear 0016                _TM1650_START 047D                  _showShiWei 0061  
              ?_KeyClearOne 0070                _KeyReference 00A0               _checkTempTime 004F  
          ?_CheckOnceResult 0070         __end_of_checkChrgAD 0ED8            ___lbmod@dividend 0074  
       __end_of_checkTempAD 0FB7                ??_KeyClearIn 0074          CheckOnceResult@cnt 006D  
               ___lbmod@rem 0076                   Read_ADC@i 0077                 ?_initTM1650 0070  
           ??_CheckTouchKey 0079                _KeyStopClear 020C            _GetTouchKeyValue 0582  
            ?_Refurbish_Sfr 0070           Read_ADC@ADCLDORef 0072               ??_TM1650_STOP 0072  
                _write_8bit 03BF                ?_Init_System 0070          __end_of_KeyClearIn 0640  
             _refreshTM1650 033B                   _KeyMaxSub 0047                   _KeyResSum 00B2  
               __end_ofPL10 07B8                 __end_ofPL20 07DA                 __end_ofPL12 07BF  
               __end_ofPL22 07E0                 __end_ofPL14 07C7                 __end_ofPL24 07E6  
               __end_ofPL16 07CD                 __end_ofPL26 07EB                 __end_ofPL18 07D4  
               __end_ofPL28 07F0         start_initialization 000D                   _KeyServer 0DB7  
                 _Isr_Timer 0D6D        __size_of_ClearResSum 000F           __size_of_Read_ADC 0049  
             ?_TurnKeyFlags 0070        __end_of_setZeroStep2 077B    TurnKeyFlags@KeyHaveTimes 0045  
               _checkChrgAD 0ECE                _Table_KeyCap 081F              ?_refreshTM1650 0070  
               _checkTempAD 0F9A         __end_of_TM1650_STOP 068C         __size_of_initTM1650 0030  
               __pbssCOMMON 007A                  ?_KeyServer 0070                   ___latbits 0001  
             __pcstackBANK0 0065                   _WorkSleep 0492           __size_of_checkBat 0050  
            _CheckValidTime 061C    __end_of_CheckKeyOldValue 010B                   _tm1650cmd 03B5  
                ?_Isr_Timer 0070                   _batResult 0036                    ?_KeyIsIn 0070  
                  ?_KeyHave 0072   __size_of_SystemEnterSleep 008F             ??_Refurbish_Sfr 0072  
            ??_TurnKeyFlags 0075                    ?___lbdiv 0072                    ?___lbmod 0072  
               ?_write_8bit 0070                    ?___lwmod 0072                    ?_chrgCtr 0070  
                 __pstrings 0800                   _count900s 0030                   _count64ms 005D  
      __size_of_KeyClearOne 0015                   _keyCount1 003E                   _keyCount2 003C  
                 _keyCount3 003A      __end_of_CheckValidTime 0630                   _firstTime 0040  
                ?_WorkSleep 0070                    ?_showCtr 0070         GetTouchKeyValue@cnt 0077  
                ?_tm1650cmd 0074                    ?_workCtr 0070              __size_of_task1 005B  
                  _KEYDATAH 0095                    _KEYDATAL 0094           interrupt_function 0004  
             ??_setZeroStep 0072                   clear_ram0 07F0                   _sleepTime 002E  
               write_8bit@i 0073                   _showGeWei 0060                 _TM1650_STOP 066A  
       CheckKeyOldValue@cnt 0069             ??_refreshTM1650 0076                    KeyIsIn@i 0072  
               __stringbase 0805        __size_of_Init_System 002A       __end_of_Table_KeyFalg 081C  
     __end_of_Table_KeyDown 081F    __end_of_GetTouchKeyValue 05E1             ?_CheckValidTime 0070  
               ??_KeyServer 0072                 ??_Isr_Timer 0070                    _MainTime 0064  
       __size_of_write_8bit 00BE                    _Read_ADC 0FB7                ??_initTM1650 0076  
     __size_of_setZeroStep2 005D           tm1650cmd@seg_data 0074            __size_of_KeyIsIn 0014  
          __size_of_KeyHave 000C            _Table_KeyChannel 0822         __end_of_setZeroStep 071E  
          __size_of___lbdiv 001B    SystemEnterSleep@KeyValue 0067            __size_of___lbmod 001C  
          __size_of___lwmod 0024          __end_of__stringtab 0806            __size_of_chrgCtr 002D  
                  _batValue 005A                    _b_kover1 03CB                    _b_ksleep 03C8  
                  _checkBat 0ED8          __end_of_initTM1650 06BC        __end_of_TurnKeyFlags 060E  
                  _chrgFlag 005B                    _chrgDuty 0056                 ??_WorkSleep 0078  
   CheckValidTime@validtime 0026                    __ptext10 03BF                    __ptext11 066A  
                  __ptext20 0EA1                    __ptext12 047D                    __ptext21 0ECE  
                  __ptext13 0317                    __ptext30 055E                    __ptext22 0ED8  
                  __ptext14 02FB                    __ptext31 061C                    __ptext23 0FB7  
                  __ptext15 02E0                    __ptext32 010B                    __ptext24 0DB7  
                  __ptext16 0492                    __ptext33 0200                    __ptext25 007A  
                  __ptext17 04CF                    __ptext34 056D                    __ptext26 05E1  
                  __ptext18 060E                    __ptext35 00A7                    __ptext27 0630  
                  __ptext19 0640                    __ptext36 01EC                    __ptext28 020C  
                  __ptext37 0D6D                    __ptext29 0582                 ??_tm1650cmd 0075  
          __size_of_showCtr 00BE                _setZeroStep2 071E                    _count15s 0053  
          __size_of_workCtr 0072    __size_of_CheckOnceResult 00E1               __size_of_main 0029  
               _longKeyFalg 0063            _SystemEnterSleep 04CF                 _preBatValue 0059  
     __end_of_CheckTouchKey 00A7                    _numArray 0806                    _showLed1 005F  
                  _showLed2 005E                    _showFlag 0062                ?_checkChrgAD 0070  
          tm1650cmd@digAddr 0075                    _zeroStep 007A                    _workStep 007B  
              ?_checkTempAD 0070     CheckKeyOldValue@counter 0046           ?_CheckKeyOldValue 0070  
                  intlevel1 0000               ??_ClearResSum 0072          ??_CheckKeyOldValue 0074  
          ___lwmod@dividend 0074                 _setZeroStep 06BC                   stringcode 0800  
      SystemEnterSleep@wake 006B               write_8bit@dat 0072                ??_write_8bit 0072  
                _B_MainLoop 03CE                  _OPTION_REG 0081             ___lwmod@divisor 0072  
           ___lwmod@counter 0076                    stringdir 0800         SystemEnterSleep@cnt 006D  
                  stringtab 0800              KeyClearOne@cnt 0072               KeyClearIn@cnt 0074  
        __end_of_write_8bit 047D       __end_of_Refurbish_Sfr 061C         __end_of_ClearResSum 056D  
         ??_CheckOnceResult 0075               _keyCancelTime 004A  
