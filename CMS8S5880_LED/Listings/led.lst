C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 17:21:20 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE LED
OBJECT MODULE PLACED IN .\Objects\led.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE led.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\led.lst)
                    - TABS(2) OBJECT(.\Objects\led.obj)

line level    source

   1          /**
   2            *
   3            *
   4            *左Led灯旋转
   5            */
   6          #include <CMS/CMS8S5880.H>
   7          #include "time.h"
*** WARNING C318 IN LINE 7 OF led.c: can't open file 'time.h'
   8          
   9          //***********define constant*********//
  10          
  11          #define   MAIN_CLOCK_FREQ   16000000uL    //unit:Hz
  12          #define   TM0_OF_us     1000      //timer0 overflow times unit:us
  13          #define   divider       4
  14          #define   TM_value      (65535-(TM0_OF_us*(MAIN_CLOCK_FREQ/(4*1000000))))
  15          
  16          #define G1 P2_5
  17          #define B1 P2_4
  18          #define R1 P2_3
  19          #define G2 P2_2
  20          #define B2 P1_7
  21          #define R2 P1_6
  22          #define G3 P1_5
  23          #define B3 P1_4
  24          #define R3 P1_3
  25          
  26          #define SCL P0_5
  27          #define SDA P0_4
  28          
  29          #define MAX_TIME (29127)
  30          #define MIN_TIME (0)
  31          #define SPEEDS (80)         
  32          
  33          #define speed 60
  34          
  35          //*******************variable*********************//
  36          
  37          static unsigned char vlee=0;
  38          
  39          unsigned int times = 0;
  40          
  41          volatile unsigned int temp = 0X00;
  42          
  43          unsigned int km = 0;
  44           static unsigned int num=0;
  45          
  46          /*-------这样定义OK 之后,你在程序中就可以使用,比如Flg_RFSleep=0;-----*/
  47          union
  48            {
  49              unsigned char Flg;
  50              struct
  51                {unsigned char          Flg_key:1;
  52                              unsigned char          Flg_RxChanle:1;
  53                               unsigned char         Flg_RxTimeCoutEn:1;
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 17:21:20 PAGE 2   

  54                                unsigned char        Flg_DcIn:1;
  55                                unsigned char        Flg_RFSleep:1;
  56                                unsigned char        Flg_Wor:1;
  57                                 unsigned char       Flg_Pre:1;
  58                                 unsigned char       Flg_Sync:1;
  59                }sflg;
  60            }uFlg;
  61            
  62            
  63          /*--------------------------------------------------------------------*/
  64          
  65          //*******************initial*********************//
  66          
  67          void Timer0_init();               //
  68          void INT_init();                //interrupt initial
  69          void Timer0_INT();
  70            //toggle watch IO
  71            
  72            
  73          void GPIO_Init(void)
  74          {
  75   1        P2TRIS |= 0X3C;    /*output*/
  76   1        P2UP = 0x3C;
  77   1        P2RD = 0x00;
  78   1        
  79   1        P1TRIS |= 0XF8;    /*output*/
  80   1        P1UP  = 0XF8;    /* */
  81   1        P1RD  = 0X00;    /*output speed up to 2mhz */
  82   1        
  83   1        P2TRIS &= 0XBF;
  84   1        P2UP |= 0X40;    /*???????*/
  85   1        P2RD &= 0XBF;    /*PD6  KEY ????  */
  86   1        
  87   1        P0TRIS |= 0X30;
  88   1        P0UP  = 0X30;
  89   1        P0RD  = 0X00;     /*PB5    */
  90   1        P05CFG = 0;
  91   1        R1 = R2 = R3 = G1 = G2 = G3 = B1 = B2 = B3 = 1;
  92   1        
  93   1        SCL=1;
  94   1        SDA = 1;
  95   1       uFlg.sflg.Flg_key = 0;
  96   1      }
  97          
  98          #pragma OT(0)  
  99          void delay_us(unsigned int a)
 100          {
 101   1               //16M 1.02us
 102   1               while(a--);
 103   1      }
 104          
 105          #pragma OT(0) 
 106          void delay_ms(unsigned int ms) //16MHZ
 107          { 
 108   1         unsigned int ti; 
 109   1        clrwdt();
 110   1         while(ms--) 
 111   1          { 
 112   2            for(ti=0;ti<947;ti++){}  //
 113   2           } 
 114   1      }
 115          
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 17:21:20 PAGE 3   

 116          void Delay(unsigned int nCount)
 117          {
 118   1        for(; nCount != 0; nCount--);
 119   1      } 
 120          /*------------------------------------------------------------------*/
 121          void KEY_Scan(void)
 122          {
 123   1        if(P2_6 == 0)
 124   1        {
 125   2        
 126   2          num++;
 127   2          if((P2_6 == 0) &&(num >= 300))   //3s
 128   2          {       
 129   3                     
 130   3                num = 0; 
 131   3                uFlg.sflg.Flg_key = 1; 
 132   3               // SCL = ~SCL; 
 133   3      
 134   3          }
 135   2          else
 136   2          {
 137   3            num = 0;
 138   3          }
 139   2          
 140   2        }
 141   1        else
 142   1        {
 143   2           num = 0;
 144   2        }
 145   1      }
 146          
 147          /*       ????      */
 148          void disp(void)
 149          {
 150   1         SCL = 0;
 151   1         R3 = R2 = G1 = 0;                    delay_ms(speed);  
 152   1         R1 = R2 = 1;G1 = G2 = R3= 0;         delay_ms(speed); 
 153   1         R1 = R2 = R3 = 1;  G1 = G2 = G3 = 0; delay_ms(speed);  
 154   1         G1 = 1; G2 = B1 = G3 = 0;            delay_ms(speed); 
 155   1         G1 = G2 = 1; B1 = B2 = G3 = 0 ;      delay_ms(speed);  
 156   1         G1 = G2 = G3 = 1; B1 = B2 = B3 = 0;  delay_ms(speed);  
 157   1         B1 = 1; R1 = B2 = B3 = 0;            delay_ms(speed);  
 158   1         B1 = B2 = 1; R1 = R2 = B3 = 0;       delay_ms(speed);  
 159   1         B1 = B2 = B3 = 1; R1 = B2 = R3 = 0; 
 160   1        delay_ms(speed); 
 161   1        SCL = 1;
 162   1        delay_ms(1);
 163   1      }
 164          /*----------------------R??----------------------------------------------*/
 165          void LED_LOOP_R(unsigned int on, unsigned int off)    //LED????
 166          {
 167   1       
 168   1        R3 = R2 = R1 = 0; 
 169   1        Delay(on); 
 170   1        R3 = R2 = R1 = 1; 
 171   1        Delay(off); 
 172   1      }
 173          /*-------------LED????------------------------------------*/
 174          void LED_BREATH_R(void)
 175          {
 176   1          /*??*/
 177   1        times = MAX_TIME;
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 17:21:20 PAGE 4   

 178   1        while(1)
 179   1        {
 180   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 181   2          times -= SPEEDS;
 182   2          LED_LOOP_R(MAX_TIME-times,times);
 183   2          if(times < SPEEDS)
 184   2            break;
 185   2        }
 186   1         /*??*/
 187   1        times = MAX_TIME;
 188   1        while(1)
 189   1        {
 190   2           if(uFlg.sflg.Flg_key== 1) {  break;  }
 191   2          times -= SPEEDS;
 192   2          LED_LOOP_R(times,MAX_TIME-times);
 193   2          if(times < SPEEDS)
 194   2            break;
 195   2        }
 196   1        
 197   1      }
 198          /*------------------------------------------------------------*/
 199          
 200          /*----------------------G??----------------------------------------------*/
 201          void LED_LOOP_G(unsigned int on, unsigned int off)    //LED????
 202          {
 203   1       
 204   1        G3 = G2 = G1 = 0; 
 205   1        Delay(on); 
 206   1        G3 = G2 = G1 = 1; 
 207   1        Delay(off); 
 208   1      }
 209          /*-------------LED????------------------------------------*/
 210          void LED_BREATH_G(void)
 211          {
 212   1          /*??*/
 213   1        times = MAX_TIME;
 214   1        while(1)
 215   1        {
 216   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 217   2          times -= SPEEDS;
 218   2          LED_LOOP_G(MAX_TIME-times,times);
 219   2          if(times < SPEEDS)
 220   2            break;
 221   2        }
 222   1        
 223   1         /*??*/
 224   1        times = MAX_TIME;
 225   1        while(1)
 226   1        {
 227   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 228   2          times -= SPEEDS;
 229   2          LED_LOOP_G(times,MAX_TIME-times);
 230   2          if(times < SPEEDS)
 231   2            break;
 232   2        }
 233   1        
 234   1      }
 235          /*------------------------------------------------------------*/
 236          /*----------------------B??----------------------------------------------*/
 237          void LED_LOOP_B(unsigned int on, unsigned int off)    //LED????
 238          {
 239   1       
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 17:21:20 PAGE 5   

 240   1        B3 = B2 = B1 = 0; 
 241   1        Delay(on); 
 242   1        B3 = B2 = B1 = 1; 
 243   1        Delay(off); 
 244   1      }
 245          /*-------------LED????------------------------------------*/
 246          void LED_BREATH_B(void)
 247          {
 248   1          /*??*/
 249   1        times = MAX_TIME;
 250   1        while(1)
 251   1        {
 252   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 253   2          times -= SPEEDS;
 254   2          LED_LOOP_B(MAX_TIME-times,times);
 255   2          if(times < SPEEDS)
 256   2            break;
 257   2        }
 258   1        
 259   1         /*??*/
 260   1        times = MAX_TIME;
 261   1        while(1)
 262   1        {
 263   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 264   2          times -= SPEEDS;
 265   2          LED_LOOP_B(times,MAX_TIME-times);
 266   2          if(times < SPEEDS)
 267   2            break;
 268   2        }
 269   1        
 270   1      }
 271          /*----------------------RG??----------------------------------------------*/
 272          void LED_LOOP_RG(unsigned int on, unsigned int off)    //LED????
 273          {
 274   1       
 275   1        G3 = G2 = G1 = R3 = R2 = R1 = 0;  
 276   1        Delay(on); 
 277   1        G3 = G2 = G1 = R3 = R2 = R1 = 1;  
 278   1        Delay(off); 
 279   1      }
 280          /*-------------LED????------------------------------------*/
 281          void LED_BREATH_RG(void)
 282          {
 283   1          /*??*/
 284   1        times = MAX_TIME;
 285   1        while(1)
 286   1        {
 287   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 288   2          times -= SPEEDS;
 289   2          LED_LOOP_RG(MAX_TIME-times,times);
 290   2          if(times < SPEEDS)
 291   2            break;
 292   2        }
 293   1        
 294   1         /*??*/
 295   1        times = MAX_TIME;
 296   1        while(1)
 297   1        {
 298   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 299   2          times -= SPEEDS;
 300   2          LED_LOOP_RG(times,MAX_TIME-times);
 301   2          if(times < SPEEDS)
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 17:21:20 PAGE 6   

 302   2            break;
 303   2        }
 304   1        
 305   1      }
 306          /*------------------------------------------------------------*/
 307          /*----------------------GB??----------------------------------------------*/
 308          void LED_LOOP_GB(unsigned int on, unsigned int off)    //LED????
 309          {
 310   1       
 311   1        G3 = G2 = G1 = B3 = B2 = B1 = 0;  
 312   1        Delay(on); 
 313   1        G3 = G2 = G1 = B3 = B2 = B1 = 1;  
 314   1        Delay(off); 
 315   1      }
 316          /*-------------LED????------------------------------------*/
 317          void LED_BREATH_GB(void)
 318          {
 319   1          /*??*/
 320   1        times = MAX_TIME;
 321   1        while(1)
 322   1        {
 323   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 324   2          times -= SPEEDS;
 325   2          LED_LOOP_GB(MAX_TIME-times,times);
 326   2          if(times < SPEEDS)
 327   2            break;
 328   2        }
 329   1        
 330   1         /*??*/
 331   1        times = MAX_TIME;
 332   1        while(1)
 333   1        {
 334   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 335   2          times -= SPEEDS;
 336   2          LED_LOOP_GB(times,MAX_TIME-times);
 337   2          if(times < SPEEDS)
 338   2            break;
 339   2        }
 340   1        
 341   1      }
 342          /*------------------------------------------------------------*/
 343          /*----------------------RGB??----------------------------------------------*/
 344          void LED_LOOP_RGB(unsigned int on, unsigned int off)    //LED????
 345          {
 346   1       
 347   1        R1 = R2 = R3 = G3 = G2 = G1 = B3 = B2 = B1 = 0;  
 348   1        Delay(on); 
 349   1        R1 = R2 = R3 = G3 = G2 = G1 = B3 = B2 = B1 = 1;  
 350   1        Delay(off); 
 351   1      }
 352          /*-------------LED????------------------------------------*/
 353          void LED_BREATH_RGB(void)
 354          {
 355   1          /*??*/
 356   1        times = MAX_TIME;
 357   1        while(1)
 358   1        {
 359   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 360   2          times -= SPEEDS;
 361   2          LED_LOOP_RGB(MAX_TIME-times,times);
 362   2          if(times < SPEEDS)
 363   2            break;
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 17:21:20 PAGE 7   

 364   2        }
 365   1        
 366   1         /*??*/
 367   1        times = MAX_TIME;
 368   1        while(1)
 369   1        {
 370   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 371   2          times -= SPEEDS;
 372   2          LED_LOOP_RGB(times,MAX_TIME-times);
 373   2          if(times < SPEEDS)
 374   2            break;
 375   2        }
 376   1        
 377   1      }
 378          /*------------------------------------------------------------*/
 379          /*----------------------RGB??----------------------------------------------*/
 380          void LED_LOOP_RB(unsigned int on, unsigned int off)    //LED????
 381          {
 382   1       
 383   1        R1 = R2 = R3 = B3 = B2 = B1 = 0;  
 384   1        Delay(on); 
 385   1        R1 = R2 = R3 = B3 = B2 = B1 = 1;  
 386   1        Delay(off); 
 387   1      }
 388          /*-------------LED????------------------------------------*/
 389          void LED_BREATH_RB(void)
 390          {
 391   1          /*??*/
 392   1        times = MAX_TIME;
 393   1        while(1)
 394   1        {
 395   2           if(uFlg.sflg.Flg_key == 1) {  break;  }
 396   2          times -= SPEEDS;
 397   2          LED_LOOP_RB(MAX_TIME-times,times);
 398   2          if(times < SPEEDS)
 399   2            break;
 400   2        }
 401   1        
 402   1         /*??*/
 403   1        times = MAX_TIME;
 404   1        while(1)
 405   1        {
 406   2          if(uFlg.sflg.Flg_key == 1) {  break;  }
 407   2          times -= SPEEDS;
 408   2          LED_LOOP_RB(times,MAX_TIME-times);
 409   2          if(times < SPEEDS)
 410   2            break;
 411   2        }
 412   1        
 413   1      }
 414          
 415          
 416          //*******************MAIN*********************//
 417          
 418          void main()
 419          {
 420   1        
 421   1        GPIO_Init();
 422   1        Timer0_init();                //timer0 initinal
 423   1        INT_init();                 //
 424   1        delay_ms(2500);
 425   1        delay_ms(2500);
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 17:21:20 PAGE 8   

 426   1        delay_ms(2500);
 427   1        
 428   1        while(1)                  //main loop
 429   1        {
 430   2          clrwdt();
 431   2          if(uFlg.sflg.Flg_key == 0)
 432   2          {
 433   3           
 434   3          disp();
 435   3          //  vlee = P2;
 436   3          //  P2 = 0;
 437   3      
 438   3          //LED_BREATH_R();         
 439   3          //LED_BREATH_RB();
 440   3          //LED_BREATH_G();         
 441   3          //LED_BREATH_B();         
 442   3          //LED_BREATH_RG();
 443   3          //LED_BREATH_GB();
 444   3          //LED_BREATH_RGB();
 445   3          
 446   3          }
 447   2          if(uFlg.sflg.Flg_key == 1)
 448   2          {
 449   3            R1 = R2 = R3 = G1 = G2 = G3 = B1 = B2 = B3 = 1;
 450   3            SCL = 0;
 451   3          }  
 452   2          
 453   2        }
 454   1        
 455   1      }
 456          
 457          /*************************************************
 458          function name: Timer0_init()
 459          function work: initial the timer0 overflow time
 460          input data   : the constant define the fsys and the overflow time
 461          output data  : null
 462          note     : setting the timer0 
 463          *************************************************/
 464          void Timer0_init()                //T_overflow unit:us 16 bit timer mode
 465          {
 466   1      
 467   1        TMOD    |=  0x01;
 468   1        
 469   1        //timer1 for bit7~4
 470   1        //bit7 gatebit 1:enable 0:disable
 471   1        //bit6 timer/counter 0:timer 1:counter
 472   1        //bit5~4 00:mode0 13bit timer/counter 01:mode1 16bit timer/counter 
 473   1        //     01:mode2 8bit aoto reload timer/counter mode3:stop counter
 474   1        
 475   1        //timer0 for bit3~0
 476   1        //bit3 gatebit 1:enable 0:disable
 477   1        //bit2 timer/counter 0:timer 1:counter
 478   1        //bit1~0 00:mode0 13bit timer/counter 01:mode1 16bit timer/counter 
 479   1        //     10:mode2 8bit aoto reload timer/counter mode3:independent timer/counter
 480   1        
 481   1        CKCON   |=  0x08;
 482   1        
 483   1        //bit7~6 WDT overflow time 00:2^17*tsys 01:2^20*tsys 10:2^23*tsys 11:2^26*tsys
 484   1        //bit4:timer1 clocksource 0:fsys/12 1:fsys/4
 485   1        //bit3:timer0 clocksource 0:fsys/12 1:fsys/4
 486   1      
 487   1      
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 17:21:20 PAGE 9   

 488   1        //initial value for 16bit counter
 489   1        
 490   1        TH0     = TM_value/256;
 491   1        TL0     = TM_value;
 492   1        
 493   1        TCON    |=  0x10;
 494   1        
 495   1        //bit7 flag 0:timer1 not overflow 1:timer1 over flow 
 496   1        //bit6 0:timer1 disable 1:timer1 enable
 497   1        //bit5 flag 0:timer0 not overflow 1:timer0 over flow 
 498   1        //bit4 0:timer0 disable 1:timer0 enable
 499   1        //bit3~0 is for external pin interrupt
 500   1        
 501   1      }
 502          /*************************************************
 503          function name: INT_init()
 504          function work: initial the INT function
 505          input data   : null
 506          output data  : null
 507          note     : setting the interrupt function
 508          *************************************************/
 509          void INT_init()                 //intterrupt initinal
 510          {
 511   1        IE    = 0x02;
 512   1        
 513   1      //Bit7  EA  Global interrupt enable bit 0:disable 1:enable
 514   1      //Bit6  ES1 UART1 interrupt enable bit  0:disable 1:enable
 515   1      //Bit5  ET2 Timer2 global interrupt enable bit  0:disable 1:enable
 516   1      //Bit4  ES0 UART0 interrupt enable bit  0:disable 1:enable
 517   1      //Bit3  ET1 Timer1 interrupt enable bit  0:disable 1:enable
 518   1      //Bit2  EX1 INT1 interrupt enable bit  0:disable 1:enable
 519   1      //Bit1  ET0 Timer0 interrupt enable bit  0:disable 1:enable
 520   1      //Bit0  EX0 INT0 interrupt enable bit  0:disable 1:enable
 521   1      
 522   1        IP    = 0x00;
 523   1        
 524   1      //Bit6  PS1   UART1 interrupt priority control bit 0:high priority 1:low priority
 525   1      //Bit5  PT2   Timer2 interrupt priority control bit 0:high priority 1:low priority
 526   1      //Bit4  PS0   UART0 interrupt priority control bit 0:high priority 1:low priority
 527   1      //Bit3  PT1   Timer1 interrupt priority control bit 0:high priority 1:low priority
 528   1      //Bit2  PX1   INT1 interrupt priority control bit 0:high priority 1:low priority
 529   1      //Bit1  PT0   Timer0 interrupt priority control bit 0:high priority 1:low priority
 530   1      //Bit0  PX0   INT0 interrupt priority control bit 0:high priority 1:low priority
 531   1      
 532   1        EA    = 1;    //Bit7  EA  Global interrupt enable bit 0:disable 1:enable
 533   1        
 534   1      }
 535          
 536          /*************************************************
 537          function name: Timer0_INT()
 538          function work: timer0 INT function
 539          input data   : null
 540          output data  : null
 541          note     : watch the P15 toggle and measure pulse is the overflow time
 542          *************************************************/
 543          void Timer0_INT() interrupt TIMER0_VECTOR
 544          {
 545   1      
 546   1        TH0     = TM_value/256;
 547   1        TL0     = TM_value;
 548   1        
 549   1        
C51 COMPILER V9.56.0.0   LED                                                               04/26/2020 17:21:20 PAGE 10  

 550   1      }
 551          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1588    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     46    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
