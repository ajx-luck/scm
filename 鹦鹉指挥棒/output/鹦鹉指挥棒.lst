

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat Sep 05 18:33:36 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1152A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	pa_nodes0,global,class=CODE,delta=2
    15                           	dabs	1,0x4E,2
    16  0000                     
    17                           ; Version 1.45
    18                           ; Generated 16/11/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     
    52                           	psect	text0
    53  0000                     __ptext0:	
    54  000D                     _WPUB	set	13
    55  0009                     _INTCON	set	9
    56  0008                     _OSCCON	set	8
    57  0007                     _OPTION_REG	set	7
    58  0006                     _TRISB	set	6
    59  0005                     _PORTB	set	5
    60  0001                     _TMR0	set	1
    61  004A                     _T0IF	set	74
    62                           
    63                           	psect	cinit
    64  000B                     start_initialization:	
    65                           ; #config settings
    66                           
    67  000B                     __initialization:	
    68                           
    69                           ; Clear objects allocated to BITCOMMON
    70  000B  01CC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
    71                           
    72                           ; Clear objects allocated to COMMON
    73  000C  01C0               	clrf	__pbssCOMMON& (0+127)
    74  000D  01C1               	clrf	(__pbssCOMMON+1)& (0+127)
    75  000E  01C2               	clrf	(__pbssCOMMON+2)& (0+127)
    76  000F  01C3               	clrf	(__pbssCOMMON+3)& (0+127)
    77  0010  01C4               	clrf	(__pbssCOMMON+4)& (0+127)
    78  0011  01C5               	clrf	(__pbssCOMMON+5)& (0+127)
    79  0012  01C6               	clrf	(__pbssCOMMON+6)& (0+127)
    80  0013  01C7               	clrf	(__pbssCOMMON+7)& (0+127)
    81  0014  01C8               	clrf	(__pbssCOMMON+8)& (0+127)
    82  0015                     end_of_initialization:	
    83                           ;End of C runtime variable initialization code
    84                           
    85  0015                     __end_of__initialization:	
    86  0015  0183               	clrf	3
    87  0016  2888               	ljmp	_main	;jump to C main() function
    88                           
    89                           	psect	bitbssCOMMON
    90  0260                     __pbitbssCOMMON:	
    91  0260                     _B_MainLoop:	
    92  0260                     	ds	1
    93                           
    94                           	psect	bssCOMMON
    95  0040                     __pbssCOMMON:	
    96  0040                     _MainTime:	
    97  0040                     	ds	1
    98  0041                     _pwmTime:	
    99  0041                     	ds	1
   100  0042                     _checkCount:	
   101  0042                     	ds	1
   102  0043                     _revRightZeroCount:	
   103  0043                     	ds	1
   104  0044                     _revLeftZeroCount:	
   105  0044                     	ds	1
   106  0045                     _revRightCount:	
   107  0045                     	ds	1
   108  0046                     _revLeftCount:	
   109  0046                     	ds	1
   110  0047                     _irRightStep:	
   111  0047                     	ds	1
   112  0048                     _irLeftStep:	
   113  0048                     	ds	1
   114                           
   115                           	psect	cstackCOMMON
   116  0049                     __pcstackCOMMON:	
   117  0049                     ?_Init_System:	
   118  0049                     ?_checkIRKey:	
   119                           ; 1 bytes @ 0x0
   120                           
   121  0049                     ?_main:	
   122                           ; 1 bytes @ 0x0
   123                           
   124  0049                     ?_Isr_Timer:	
   125                           ; 1 bytes @ 0x0
   126                           
   127  0049                     ??_Isr_Timer:	
   128                           ; 1 bytes @ 0x0
   129                           
   130                           
   131                           ; 1 bytes @ 0x0
   132  0049                     	ds	2
   133  004B                     ??_Init_System:	
   134  004B                     ??_checkIRKey:	
   135                           ; 1 bytes @ 0x2
   136                           
   137                           
   138                           ; 1 bytes @ 0x2
   139  004B                     	ds	1
   140  004C                     ??_main:	
   141                           
   142                           	psect	maintext
   143  0088                     __pmaintext:	
   144                           ; 1 bytes @ 0x3
   145 ;;
   146 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   147 ;;
   148 ;; *************** function _main *****************
   149 ;; Defined at:
   150 ;;		line 22 in file "C:\mcuproject\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   151 ;; Parameters:    Size  Location     Type
   152 ;;		None
   153 ;; Auto vars:     Size  Location     Type
   154 ;;		None
   155 ;; Return value:  Size  Location     Type
   156 ;;                  1    wreg      void 
   157 ;; Registers used:
   158 ;;		wreg, status,2, status,0, pclath, cstack
   159 ;; Tracked objects:
   160 ;;		On entry : B00/0
   161 ;;		On exit  : 0/0
   162 ;;		Unchanged: 0/0
   163 ;; Data sizes:     COMMON   BANK0
   164 ;;      Params:         0       0
   165 ;;      Locals:         0       0
   166 ;;      Temps:          0       0
   167 ;;      Totals:         0       0
   168 ;;Total ram usage:        0 bytes
   169 ;; Hardware stack levels required when called:    2
   170 ;; This function calls:
   171 ;;		_Init_System
   172 ;;		_checkIRKey
   173 ;; This function is called by:
   174 ;;		Startup code after reset
   175 ;; This function uses a non-reentrant model
   176 ;;
   177                           
   178                           
   179                           ;psect for function _main
   180  0088                     _main:	
   181                           
   182                           ;main.c: 24: PORTB = 0x00;
   183                           
   184                           ;incstack = 0
   185                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   186  0088  0185               	clrf	5	;volatile
   187                           
   188                           ;main.c: 25: Init_System();
   189  0089  2079               	fcall	_Init_System
   190  008A                     l307:	
   191                           ;main.c: 26: while(1)
   192                           
   193  008A  0064               	clrwdt	;# 
   194                           
   195                           ;main.c: 29: if(B_MainLoop)
   196  008B  1C4C               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   197  008C  288A               	goto	l307
   198                           
   199                           ;main.c: 30: {
   200                           ;main.c: 31: B_MainLoop = 0;
   201  008D  104C               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   202                           
   203                           ;main.c: 32: checkIRKey();
   204  008E  2017               	fcall	_checkIRKey
   205  008F  288A               	goto	l307
   206  0090                     __end_of_main:	
   207                           
   208                           	psect	text1
   209  0017                     __ptext1:	
   210 ;; *************** function _checkIRKey *****************
   211 ;; Defined at:
   212 ;;		line 56 in file "C:\mcuproject\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   213 ;; Parameters:    Size  Location     Type
   214 ;;		None
   215 ;; Auto vars:     Size  Location     Type
   216 ;;		None
   217 ;; Return value:  Size  Location     Type
   218 ;;                  1    wreg      void 
   219 ;; Registers used:
   220 ;;		wreg, status,2, status,0
   221 ;; Tracked objects:
   222 ;;		On entry : 0/0
   223 ;;		On exit  : 0/0
   224 ;;		Unchanged: 0/0
   225 ;; Data sizes:     COMMON   BANK0
   226 ;;      Params:         0       0
   227 ;;      Locals:         0       0
   228 ;;      Temps:          1       0
   229 ;;      Totals:         1       0
   230 ;;Total ram usage:        1 bytes
   231 ;; Hardware stack levels used:    1
   232 ;; Hardware stack levels required when called:    1
   233 ;; This function calls:
   234 ;;		Nothing
   235 ;; This function is called by:
   236 ;;		_main
   237 ;; This function uses a non-reentrant model
   238 ;;
   239                           
   240                           
   241                           ;psect for function _checkIRKey
   242  0017                     _checkIRKey:	
   243                           
   244                           ;main.c: 58: if(((PORTB) >> (4)&1))
   245                           
   246                           ;incstack = 0
   247                           ; Regs used in _checkIRKey: [wreg+status,2+status,0]
   248  0017  0805               	movf	5,w	;volatile
   249  0018  00CB               	movwf	??_checkIRKey
   250  0019  3004               	movlw	4
   251  001A                     u15:	
   252  001A  1003               	clrc
   253  001B  0CCB               	rrf	??_checkIRKey,f
   254  001C  3EFF               	addlw	-1
   255  001D  1D03               	skipz
   256  001E  281A               	goto	u15
   257  001F  184B               	btfsc	??_checkIRKey,0
   258                           
   259                           ;main.c: 59: {
   260                           ;main.c: 60: revLeftCount++;
   261  0020  0AC6               	incf	_revLeftCount,f
   262                           
   263                           ;main.c: 61: }
   264                           ;main.c: 63: if(((PORTB) >> (3)&1))
   265  0021  0805               	movf	5,w	;volatile
   266  0022  00CB               	movwf	??_checkIRKey
   267  0023  1003               	clrc
   268  0024  0CCB               	rrf	??_checkIRKey,f
   269  0025  1003               	clrc
   270  0026  0CCB               	rrf	??_checkIRKey,f
   271  0027  1003               	clrc
   272  0028  0CCB               	rrf	??_checkIRKey,f
   273  0029  184B               	btfsc	??_checkIRKey,0
   274                           
   275                           ;main.c: 64: {
   276                           ;main.c: 65: revRightCount++;
   277  002A  0AC5               	incf	_revRightCount,f
   278                           
   279                           ;main.c: 66: }
   280                           ;main.c: 68: if(++checkCount >= 20)
   281  002B  3014               	movlw	20
   282  002C  0AC2               	incf	_checkCount,f
   283  002D  0242               	subwf	_checkCount,w
   284  002E  1C03               	skipc
   285  002F  0008               	return
   286                           
   287                           ;main.c: 69: {
   288                           ;main.c: 70: if(revLeftCount > 2)
   289  0030  3003               	movlw	3
   290  0031  0246               	subwf	_revLeftCount,w
   291  0032  1C03               	skipc
   292  0033  283B               	goto	l748
   293                           
   294                           ;main.c: 71: {
   295                           ;main.c: 72: if(irLeftStep == 0)
   296  0034  0848               	movf	_irLeftStep,w	;volatile
   297  0035  1D03               	btfss	3,2
   298  0036  2839               	goto	l746
   299                           
   300                           ;main.c: 73: {
   301                           ;main.c: 74: irLeftStep = 1;
   302  0037  3001               	movlw	1
   303  0038  00C8               	movwf	_irLeftStep	;volatile
   304  0039                     l746:	
   305                           
   306                           ;main.c: 76: }
   307                           ;main.c: 77: revLeftZeroCount = 0;
   308  0039  01C4               	clrf	_revLeftZeroCount
   309                           
   310                           ;main.c: 78: }
   311  003A  2843               	goto	l754
   312  003B                     l748:	
   313                           
   314                           ;main.c: 79: else
   315                           ;main.c: 80: {
   316                           ;main.c: 81: if(++revLeftZeroCount > 1)
   317  003B  3002               	movlw	2
   318  003C  0AC4               	incf	_revLeftZeroCount,f
   319  003D  0244               	subwf	_revLeftZeroCount,w
   320  003E  1C03               	skipc
   321  003F  2843               	goto	l754
   322                           
   323                           ;main.c: 82: {
   324                           ;main.c: 83: revLeftZeroCount = 1;
   325  0040  01C4               	clrf	_revLeftZeroCount
   326  0041  0AC4               	incf	_revLeftZeroCount,f
   327                           
   328                           ;main.c: 84: irLeftStep = 0;
   329  0042  01C8               	clrf	_irLeftStep	;volatile
   330  0043                     l754:	
   331                           
   332                           ;main.c: 85: }
   333                           ;main.c: 86: }
   334                           ;main.c: 88: if(revRightCount > 2)
   335  0043  3003               	movlw	3
   336  0044  0245               	subwf	_revRightCount,w
   337  0045  1C03               	skipc
   338  0046  284E               	goto	l762
   339                           
   340                           ;main.c: 89: {
   341                           ;main.c: 90: if(irRightStep == 0)
   342  0047  0847               	movf	_irRightStep,w	;volatile
   343  0048  1D03               	btfss	3,2
   344  0049  284C               	goto	l760
   345                           
   346                           ;main.c: 91: {
   347                           ;main.c: 92: irRightStep = 1;
   348  004A  3001               	movlw	1
   349  004B  00C7               	movwf	_irRightStep	;volatile
   350  004C                     l760:	
   351                           
   352                           ;main.c: 94: }
   353                           ;main.c: 95: revRightZeroCount = 0;
   354  004C  01C3               	clrf	_revRightZeroCount
   355                           
   356                           ;main.c: 96: }
   357  004D  2856               	goto	l326
   358  004E                     l762:	
   359                           
   360                           ;main.c: 97: else
   361                           ;main.c: 98: {
   362                           ;main.c: 99: if(++revRightZeroCount > 1)
   363  004E  3002               	movlw	2
   364  004F  0AC3               	incf	_revRightZeroCount,f
   365  0050  0243               	subwf	_revRightZeroCount,w
   366  0051  1C03               	skipc
   367  0052  2856               	goto	l326
   368                           
   369                           ;main.c: 100: {
   370                           ;main.c: 101: revRightZeroCount = 1;
   371  0053  01C3               	clrf	_revRightZeroCount
   372  0054  0AC3               	incf	_revRightZeroCount,f
   373                           
   374                           ;main.c: 102: irRightStep = 0;
   375  0055  01C7               	clrf	_irRightStep	;volatile
   376  0056                     l326:	
   377                           
   378                           ;main.c: 103: }
   379                           ;main.c: 104: }
   380                           ;main.c: 108: checkCount = 0;
   381  0056  01C2               	clrf	_checkCount
   382                           
   383                           ;main.c: 109: revLeftCount = 0;
   384  0057  01C6               	clrf	_revLeftCount
   385                           
   386                           ;main.c: 110: revRightCount = 0;
   387  0058  01C5               	clrf	_revRightCount
   388  0059  0008               	return
   389  005A                     __end_of_checkIRKey:	
   390                           
   391                           	psect	text2
   392  0079                     __ptext2:	
   393 ;; *************** function _Init_System *****************
   394 ;; Defined at:
   395 ;;		line 38 in file "C:\mcuproject\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   396 ;; Parameters:    Size  Location     Type
   397 ;;		None
   398 ;; Auto vars:     Size  Location     Type
   399 ;;		None
   400 ;; Return value:  Size  Location     Type
   401 ;;                  1    wreg      void 
   402 ;; Registers used:
   403 ;;		wreg, status,2
   404 ;; Tracked objects:
   405 ;;		On entry : B00/0
   406 ;;		On exit  : 0/0
   407 ;;		Unchanged: 0/0
   408 ;; Data sizes:     COMMON   BANK0
   409 ;;      Params:         0       0
   410 ;;      Locals:         0       0
   411 ;;      Temps:          0       0
   412 ;;      Totals:         0       0
   413 ;;Total ram usage:        0 bytes
   414 ;; Hardware stack levels used:    1
   415 ;; Hardware stack levels required when called:    1
   416 ;; This function calls:
   417 ;;		Nothing
   418 ;; This function is called by:
   419 ;;		_main
   420 ;; This function uses a non-reentrant model
   421 ;;
   422                           
   423                           
   424                           ;psect for function _Init_System
   425  0079                     _Init_System:	
   426                           
   427                           ;incstack = 0
   428                           ; Regs used in _Init_System: [wreg+status,2]
   429  0079  0000               	nop	;# 
   430  007A  0064               	clrwdt	;# 
   431                           
   432                           ;main.c: 42: INTCON = 0;
   433  007B  0189               	clrf	9	;volatile
   434                           
   435                           ;main.c: 43: OSCCON = 0X71;
   436  007C  3071               	movlw	113
   437  007D  0088               	movwf	8	;volatile
   438                           
   439                           ;main.c: 44: OPTION_REG = 0;
   440  007E  0187               	clrf	7	;volatile
   441                           
   442                           ;main.c: 48: WPUB = 0x00;
   443  007F  018D               	clrf	13	;volatile
   444                           
   445                           ;main.c: 49: TMR0 = 5;
   446  0080  3005               	movlw	5
   447  0081  0081               	movwf	1	;volatile
   448                           
   449                           ;main.c: 50: TRISB = 0x18;
   450  0082  3018               	movlw	24
   451  0083  0086               	movwf	6	;volatile
   452                           
   453                           ;main.c: 51: PORTB = 0x00;
   454  0084  0185               	clrf	5	;volatile
   455                           
   456                           ;main.c: 52: INTCON = 0XC0;
   457  0085  30C0               	movlw	192
   458  0086  0089               	movwf	9	;volatile
   459  0087  0008               	return
   460  0088                     __end_of_Init_System:	
   461                           
   462                           	psect	text3
   463  005A                     __ptext3:	
   464 ;; *************** function _Isr_Timer *****************
   465 ;; Defined at:
   466 ;;		line 118 in file "C:\mcuproject\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;		None
   469 ;; Auto vars:     Size  Location     Type
   470 ;;		None
   471 ;; Return value:  Size  Location     Type
   472 ;;                  1    wreg      void 
   473 ;; Registers used:
   474 ;;		wreg, status,2, status,0
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMMON   BANK0
   480 ;;      Params:         0       0
   481 ;;      Locals:         0       0
   482 ;;      Temps:          2       0
   483 ;;      Totals:         2       0
   484 ;;Total ram usage:        2 bytes
   485 ;; Hardware stack levels used:    1
   486 ;; This function calls:
   487 ;;		Nothing
   488 ;; This function is called by:
   489 ;;		Interrupt level 1
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493                           
   494                           ;psect for function _Isr_Timer
   495  005A                     _Isr_Timer:	
   496                           
   497                           ;main.c: 120: if(T0IF)
   498  005A  1D09               	btfss	9,2	;volatile
   499  005B  2872               	goto	i1l338
   500                           
   501                           ;main.c: 121: {
   502                           ;main.c: 122: T0IF = 0;
   503  005C  1109               	bcf	9,2	;volatile
   504                           
   505                           ;main.c: 123: TMR0 += 5;
   506  005D  3005               	movlw	5
   507  005E  0781               	addwf	1,f	;volatile
   508                           
   509                           ;main.c: 124: if(++MainTime >= 32)
   510  005F  3020               	movlw	32
   511  0060  0AC0               	incf	_MainTime,f	;volatile
   512  0061  0240               	subwf	_MainTime,w	;volatile
   513  0062  1C03               	skipc
   514  0063  2866               	goto	i1l788
   515                           
   516                           ;main.c: 125: {
   517                           ;main.c: 126: MainTime = 0;
   518  0064  01C0               	clrf	_MainTime	;volatile
   519                           
   520                           ;main.c: 127: B_MainLoop = 1;
   521  0065  144C               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   522  0066                     i1l788:	
   523                           
   524                           ;main.c: 128: }
   525                           ;main.c: 130: if(pwmTime < 12)
   526  0066  300C               	movlw	12
   527  0067  0241               	subwf	_pwmTime,w	;volatile
   528  0068  1803               	skipnc
   529  0069  286C               	goto	i1l335
   530                           
   531                           ;main.c: 131: PORTB &= 0xDF;
   532  006A  1285               	bcf	5,5	;volatile
   533  006B  286D               	goto	i1l792
   534  006C                     i1l335:	
   535                           
   536                           ;main.c: 132: else
   537                           ;main.c: 133: PORTB |= 0x20;
   538  006C  1685               	bsf	5,5	;volatile
   539  006D                     i1l792:	
   540                           
   541                           ;main.c: 134: if(++pwmTime >= 44)
   542  006D  302C               	movlw	44
   543  006E  0AC1               	incf	_pwmTime,f	;volatile
   544  006F  0241               	subwf	_pwmTime,w	;volatile
   545  0070  1803               	btfsc	3,0
   546                           
   547                           ;main.c: 135: {
   548                           ;main.c: 136: pwmTime = 0;
   549  0071  01C1               	clrf	_pwmTime	;volatile
   550  0072                     i1l338:	
   551  0072  084A               	movf	??_Isr_Timer+1,w
   552  0073  008A               	movwf	10
   553  0074  0E49               	swapf	??_Isr_Timer^(0+-128),w
   554  0075  0083               	movwf	3
   555  0076  0ECE               	swapf	78,f
   556  0077  0E4E               	swapf	78,w
   557  0078  0009               	retfie
   558  0079                     __end_of_Isr_Timer:	
   559  004E                     btemp	set	78	;btemp
   560  004E                     wtemp0	set	78
   561                           
   562                           	psect	intentry
   563  0004                     __pintentry:	
   564                           ;incstack = 0
   565                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
   566                           
   567  0004                     interrupt_function:	
   568  004E                     saved_w	set	btemp
   569  0004  00CE               	movwf	btemp
   570  0005  0E03               	swapf	3,w
   571  0006  00C9               	movwf	??_Isr_Timer
   572  0007  080A               	movf	10,w
   573  0008  00CA               	movwf	??_Isr_Timer+1
   574  0009  285A               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      3      13
    BANK0            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_checkIRKey

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Isr_Timer in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                        _Init_System
                         _checkIRKey
 ---------------------------------------------------------------------------------
 (1) _checkIRKey                                           1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_System
   _checkIRKey

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      3       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               20      0       0       3        0.0%
ABS                  0      0       D       4        0.0%
BITBANK0            20      0       0       5        0.0%
DATA                 0      0       D       6        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Sep 05 18:33:36 2020

                     u15 001A                      l307 008A                      l326 0056  
                    l760 004C                      l762 004E                      l754 0043  
                    l746 0039                      l748 003B                     _T0IF 004A  
                   _TMR0 0001                     _WPUB 000D                     _main 0088  
                   btemp 004E                     start 000A            ??_Init_System 004B  
                  ?_main 0049                    i1l335 006C                    i1l338 0072  
                  i1l792 006D                    i1l788 0066                    _PORTB 0005  
                  _TRISB 0006         _revLeftZeroCount 0044           __pbitbssCOMMON 0260  
                  pclath 000A                    status 0003                    wtemp0 004E  
        __initialization 000B             __end_of_main 0090                   ??_main 004C  
    __end_of_Init_System 0088                   _INTCON 0009                   _OSCCON 0008  
     __size_of_Isr_Timer 001F                   saved_w 004E  __end_of__initialization 0015  
         __pcstackCOMMON 0049        _revRightZeroCount 0043              _Init_System 0079  
      __end_of_Isr_Timer 0079               _checkIRKey 0017               _checkCount 0042  
             __pmaintext 0088               __pintentry 0004               _irLeftStep 0048  
                __ptext0 0000                  __ptext1 0017                  __ptext2 0079  
                __ptext3 005A              ?_checkIRKey 0049                  _pwmTime 0041  
   end_of_initialization 0015      __size_of_checkIRKey 0043             ?_Init_System 0049  
    start_initialization 000B            _revRightCount 0045                _Isr_Timer 005A  
            __pbssCOMMON 0040                ___latbits 0000               ?_Isr_Timer 0049  
           ??_checkIRKey 004B        interrupt_function 0004       __end_of_checkIRKey 005A  
            _irRightStep 0047             _revLeftCount 0046     __size_of_Init_System 000F  
            ??_Isr_Timer 0049                 _MainTime 0040            __size_of_main 0008  
               intlevel1 0000               _B_MainLoop 0260               _OPTION_REG 0007  
