

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Sep 07 17:50:57 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1152A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	pa_nodes0,global,class=CODE,delta=2
    18                           	dabs	1,0x4E,2
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	text0
    56  0000                     __ptext0:	
    57  000D                     _WPUB	set	13
    58  000B                     _PDCONB	set	11
    59  0009                     _INTCON	set	9
    60  0008                     _OSCCON	set	8
    61  0007                     _OPTION_REG	set	7
    62  0006                     _TRISB	set	6
    63  0005                     _PORTB	set	5
    64  0001                     _TMR0	set	1
    65  004A                     _T0IF	set	74
    66                           
    67                           	psect	cinit
    68  000B                     start_initialization:	
    69                           ; #config settings
    70                           
    71  000B                     __initialization:	
    72                           
    73                           ; Clear objects allocated to BITCOMMON
    74  000B  01CB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
    75                           
    76                           ; Clear objects allocated to COMMON
    77  000C  01C0               	clrf	__pbssCOMMON& (0+127)
    78  000D  01C1               	clrf	(__pbssCOMMON+1)& (0+127)
    79  000E  01C2               	clrf	(__pbssCOMMON+2)& (0+127)
    80  000F  01C3               	clrf	(__pbssCOMMON+3)& (0+127)
    81  0010  01C4               	clrf	(__pbssCOMMON+4)& (0+127)
    82  0011  01C5               	clrf	(__pbssCOMMON+5)& (0+127)
    83  0012  01C6               	clrf	(__pbssCOMMON+6)& (0+127)
    84  0013  01C7               	clrf	(__pbssCOMMON+7)& (0+127)
    85  0014  01C8               	clrf	(__pbssCOMMON+8)& (0+127)
    86                           
    87                           ; Clear objects allocated to BANK0
    88  0015  01A0               	clrf	__pbssBANK0& (0+127)
    89  0016  01A1               	clrf	(__pbssBANK0+1)& (0+127)
    90  0017  01A2               	clrf	(__pbssBANK0+2)& (0+127)
    91  0018  01A3               	clrf	(__pbssBANK0+3)& (0+127)
    92  0019                     end_of_initialization:	
    93                           ;End of C runtime variable initialization code
    94                           
    95  0019                     __end_of__initialization:	
    96  0019  0183               	clrf	3
    97  001A  28E0               	ljmp	_main	;jump to C main() function
    98                           
    99                           	psect	bitbssCOMMON
   100  0258                     __pbitbssCOMMON:	
   101  0258                     _B_MainLoop:	
   102  0258                     	ds	1
   103                           
   104                           	psect	bssCOMMON
   105  0040                     __pbssCOMMON:	
   106  0040                     _waitTimeCount:	
   107  0040                     	ds	2
   108  0042                     _MainTime:	
   109  0042                     	ds	1
   110  0043                     _pwmTime:	
   111  0043                     	ds	1
   112  0044                     _lowDealy:	
   113  0044                     	ds	1
   114  0045                     _revLeftCount:	
   115  0045                     	ds	1
   116  0046                     _irRightStep:	
   117  0046                     	ds	1
   118  0047                     _irLeftStep:	
   119  0047                     	ds	1
   120  0048                     _workStep:	
   121  0048                     	ds	1
   122                           
   123                           	psect	bssBANK0
   124  0020                     __pbssBANK0:	
   125  0020                     _checkCount:	
   126  0020                     	ds	1
   127  0021                     _revRightZeroCount:	
   128  0021                     	ds	1
   129  0022                     _revLeftZeroCount:	
   130  0022                     	ds	1
   131  0023                     _revRightCount:	
   132  0023                     	ds	1
   133                           
   134                           	psect	cstackCOMMON
   135  0049                     __pcstackCOMMON:	
   136  0049                     ?_Init_System:	
   137  0049                     ?_checkIRKey:	
   138                           ; 1 bytes @ 0x0
   139                           
   140  0049                     ?_procesWork:	
   141                           ; 1 bytes @ 0x0
   142                           
   143  0049                     ?_main:	
   144                           ; 1 bytes @ 0x0
   145                           
   146  0049                     ?_Isr_Timer:	
   147                           ; 1 bytes @ 0x0
   148                           
   149  0049                     ??_Isr_Timer:	
   150                           ; 1 bytes @ 0x0
   151                           
   152                           
   153                           ; 1 bytes @ 0x0
   154  0049                     	ds	2
   155  004B                     ??_Init_System:	
   156  004B                     ??_main:	
   157                           ; 1 bytes @ 0x2
   158                           
   159                           
   160                           	psect	cstackBANK0
   161  0024                     __pcstackBANK0:	
   162                           ; 1 bytes @ 0x2
   163                           
   164  0024                     ??_checkIRKey:	
   165  0024                     ??_procesWork:	
   166                           ; 1 bytes @ 0x0
   167                           
   168                           
   169                           ; 1 bytes @ 0x0
   170  0024                     	ds	1
   171  0025                     procesWork@tempC:	
   172                           
   173                           ; 1 bytes @ 0x1
   174  0025                     	ds	1
   175                           
   176                           	psect	maintext
   177  00E0                     __pmaintext:	
   178 ;;
   179 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   180 ;;
   181 ;; *************** function _main *****************
   182 ;; Defined at:
   183 ;;		line 28 in file "C:\mcuproject\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   184 ;; Parameters:    Size  Location     Type
   185 ;;		None
   186 ;; Auto vars:     Size  Location     Type
   187 ;;		None
   188 ;; Return value:  Size  Location     Type
   189 ;;                  1    wreg      void 
   190 ;; Registers used:
   191 ;;		wreg, status,2, status,0, pclath, cstack
   192 ;; Tracked objects:
   193 ;;		On entry : B00/0
   194 ;;		On exit  : 0/0
   195 ;;		Unchanged: 0/0
   196 ;; Data sizes:     COMMON   BANK0
   197 ;;      Params:         0       0
   198 ;;      Locals:         0       0
   199 ;;      Temps:          0       0
   200 ;;      Totals:         0       0
   201 ;;Total ram usage:        0 bytes
   202 ;; Hardware stack levels required when called:    2
   203 ;; This function calls:
   204 ;;		_Init_System
   205 ;;		_checkIRKey
   206 ;;		_procesWork
   207 ;; This function is called by:
   208 ;;		Startup code after reset
   209 ;; This function uses a non-reentrant model
   210 ;;
   211                           
   212                           
   213                           ;psect for function _main
   214  00E0                     _main:	
   215                           
   216                           ;main.c: 30: PORTB = 0x00;
   217                           
   218                           ;incstack = 0
   219                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   220  00E0  0185               	clrf	5	;volatile
   221                           
   222                           ;main.c: 31: Init_System();
   223  00E1  20CE               	fcall	_Init_System
   224  00E2                     l315:	
   225                           ;main.c: 32: while(1)
   226                           
   227  00E2  0064               	clrwdt	;# 
   228                           
   229                           ;main.c: 35: if(B_MainLoop)
   230  00E3  1C4B               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   231  00E4  28E2               	goto	l315
   232                           
   233                           ;main.c: 36: {
   234                           ;main.c: 37: B_MainLoop = 0;
   235  00E5  104B               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   236                           
   237                           ;main.c: 38: checkIRKey();
   238  00E6  201B               	fcall	_checkIRKey
   239                           
   240                           ;main.c: 39: procesWork();
   241  00E7  2090               	fcall	_procesWork
   242  00E8  28E2               	goto	l315
   243  00E9                     __end_of_main:	
   244                           
   245                           	psect	text1
   246  0090                     __ptext1:	
   247 ;; *************** function _procesWork *****************
   248 ;; Defined at:
   249 ;;		line 44 in file "C:\mcuproject\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   250 ;; Parameters:    Size  Location     Type
   251 ;;		None
   252 ;; Auto vars:     Size  Location     Type
   253 ;;  tempC           1    1[BANK0 ] unsigned char 
   254 ;; Return value:  Size  Location     Type
   255 ;;                  1    wreg      void 
   256 ;; Registers used:
   257 ;;		wreg, status,2, status,0
   258 ;; Tracked objects:
   259 ;;		On entry : 0/0
   260 ;;		On exit  : 0/0
   261 ;;		Unchanged: 0/0
   262 ;; Data sizes:     COMMON   BANK0
   263 ;;      Params:         0       0
   264 ;;      Locals:         0       1
   265 ;;      Temps:          0       1
   266 ;;      Totals:         0       2
   267 ;;Total ram usage:        2 bytes
   268 ;; Hardware stack levels used:    1
   269 ;; Hardware stack levels required when called:    1
   270 ;; This function calls:
   271 ;;		Nothing
   272 ;; This function is called by:
   273 ;;		_main
   274 ;; This function uses a non-reentrant model
   275 ;;
   276                           
   277                           
   278                           ;psect for function _procesWork
   279  0090                     _procesWork:	
   280                           
   281                           ;main.c: 47: if(workStep > 0)
   282                           
   283                           ;incstack = 0
   284                           ; Regs used in _procesWork: [wreg+status,2+status,0]
   285  0090  0848               	movf	_workStep,w
   286  0091  1903               	btfsc	3,2
   287  0092  28A5               	goto	l1010
   288                           
   289                           ;main.c: 48: {
   290                           ;main.c: 49: unsigned char tempC = (~(0x01<<(workStep+2)));
   291  0093  3001               	movlw	1
   292  0094  00A4               	movwf	??_procesWork
   293  0095  0848               	movf	_workStep,w
   294  0096  3E02               	addlw	2
   295  0097  3E01               	addlw	1
   296  0098  289B               	goto	u574
   297  0099                     u575:	
   298  0099  1003               	clrc
   299  009A  0DA4               	rlf	??_procesWork,f
   300  009B                     u574:	
   301  009B  3EFF               	addlw	-1
   302  009C  1D03               	skipz
   303  009D  2899               	goto	u575
   304  009E  0824               	movf	??_procesWork,w
   305  009F  3AFF               	xorlw	255
   306  00A0  00A5               	movwf	procesWork@tempC
   307                           
   308                           ;main.c: 50: WPUB &= tempC;
   309  00A1  058D               	andwf	13,f	;volatile
   310                           
   311                           ;main.c: 51: TRISB &= tempC;
   312  00A2  0586               	andwf	6,f	;volatile
   313                           
   314                           ;main.c: 52: PORTB &= tempC;
   315  00A3  0585               	andwf	5,f	;volatile
   316                           
   317                           ;main.c: 53: workStep = 0;
   318  00A4  01C8               	clrf	_workStep
   319  00A5                     l1010:	
   320                           
   321                           ;main.c: 54: }
   322                           ;main.c: 55: if(lowDealy > 0)
   323  00A5  0844               	movf	_lowDealy,w
   324  00A6  1D03               	btfss	3,2
   325                           
   326                           ;main.c: 56: {
   327                           ;main.c: 58: if(--lowDealy == 0)
   328  00A7  0BC4               	decfsz	_lowDealy,f
   329  00A8  0008               	return
   330                           
   331                           ;main.c: 59: {
   332                           ;main.c: 60: TRISB = 0x3E;
   333  00A9  303E               	movlw	62
   334  00AA  0086               	movwf	6	;volatile
   335                           
   336                           ;main.c: 61: WPUB = 0x38;
   337  00AB  3038               	movlw	56
   338  00AC  008D               	movwf	13	;volatile
   339                           
   340                           ;main.c: 62: workStep = 0;
   341  00AD  01C8               	clrf	_workStep
   342  00AE  0008               	return
   343  00AF                     __end_of_procesWork:	
   344                           
   345                           	psect	text2
   346  001B                     __ptext2:	
   347 ;; *************** function _checkIRKey *****************
   348 ;; Defined at:
   349 ;;		line 88 in file "C:\mcuproject\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   350 ;; Parameters:    Size  Location     Type
   351 ;;		None
   352 ;; Auto vars:     Size  Location     Type
   353 ;;		None
   354 ;; Return value:  Size  Location     Type
   355 ;;                  1    wreg      void 
   356 ;; Registers used:
   357 ;;		wreg, status,2, status,0
   358 ;; Tracked objects:
   359 ;;		On entry : 0/0
   360 ;;		On exit  : 0/0
   361 ;;		Unchanged: 0/0
   362 ;; Data sizes:     COMMON   BANK0
   363 ;;      Params:         0       0
   364 ;;      Locals:         0       0
   365 ;;      Temps:          0       1
   366 ;;      Totals:         0       1
   367 ;;Total ram usage:        1 bytes
   368 ;; Hardware stack levels used:    1
   369 ;; Hardware stack levels required when called:    1
   370 ;; This function calls:
   371 ;;		Nothing
   372 ;; This function is called by:
   373 ;;		_main
   374 ;; This function uses a non-reentrant model
   375 ;;
   376                           
   377                           
   378                           ;psect for function _checkIRKey
   379  001B                     _checkIRKey:	
   380                           
   381                           ;main.c: 90: if(((PORTB) >> (1)&1))
   382                           
   383                           ;incstack = 0
   384                           ; Regs used in _checkIRKey: [wreg+status,2+status,0]
   385  001B  0805               	movf	5,w	;volatile
   386  001C  00A4               	movwf	??_checkIRKey
   387  001D  1003               	clrc
   388  001E  0CA4               	rrf	??_checkIRKey,f
   389  001F  1824               	btfsc	??_checkIRKey,0
   390                           
   391                           ;main.c: 91: {
   392                           ;main.c: 92: revLeftCount++;
   393  0020  0AC5               	incf	_revLeftCount,f
   394                           
   395                           ;main.c: 93: }
   396                           ;main.c: 95: if(((PORTB) >> (2)&1))
   397  0021  0805               	movf	5,w	;volatile
   398  0022  00A4               	movwf	??_checkIRKey
   399  0023  1003               	clrc
   400  0024  0CA4               	rrf	??_checkIRKey,f
   401  0025  1003               	clrc
   402  0026  0CA4               	rrf	??_checkIRKey,f
   403  0027  1824               	btfsc	??_checkIRKey,0
   404                           
   405                           ;main.c: 96: {
   406                           ;main.c: 97: revRightCount++;
   407  0028  0AA3               	incf	_revRightCount,f
   408                           
   409                           ;main.c: 98: }
   410                           ;main.c: 100: if(waitTimeCount > 0)
   411  0029  0840               	movf	_waitTimeCount,w
   412  002A  0441               	iorwf	_waitTimeCount+1,w
   413  002B  1903               	btfsc	3,2
   414  002C  2839               	goto	l954
   415                           
   416                           ;main.c: 101: {
   417                           ;main.c: 102: waitTimeCount++;
   418  002D  0AC0               	incf	_waitTimeCount,f
   419  002E  1903               	skipnz
   420  002F  0AC1               	incf	_waitTimeCount+1,f
   421                           
   422                           ;main.c: 103: if(waitTimeCount > 375)
   423  0030  3001               	movlw	1
   424  0031  0241               	subwf	_waitTimeCount+1,w
   425  0032  3078               	movlw	120
   426  0033  1903               	skipnz
   427  0034  0240               	subwf	_waitTimeCount,w
   428  0035  1C03               	skipc
   429  0036  2839               	goto	l954
   430                           
   431                           ;main.c: 104: {
   432                           ;main.c: 105: waitTimeCount = 0;
   433  0037  01C0               	clrf	_waitTimeCount
   434  0038  01C1               	clrf	_waitTimeCount+1
   435  0039                     l954:	
   436                           
   437                           ;main.c: 106: }
   438                           ;main.c: 107: }
   439                           ;main.c: 108: if(++checkCount >= 20)
   440  0039  3014               	movlw	20
   441  003A  0AA0               	incf	_checkCount,f
   442  003B  0220               	subwf	_checkCount,w
   443  003C  1C03               	skipc
   444  003D  0008               	return
   445                           
   446                           ;main.c: 109: {
   447                           ;main.c: 110: if(revLeftCount > 5)
   448  003E  3006               	movlw	6
   449  003F  0245               	subwf	_revLeftCount,w
   450  0040  1C03               	skipc
   451  0041  285A               	goto	l974
   452                           
   453                           ;main.c: 111: {
   454                           ;main.c: 112: if(irLeftStep == 0)
   455  0042  0847               	movf	_irLeftStep,w	;volatile
   456  0043  1D03               	btfss	3,2
   457  0044  2858               	goto	l972
   458                           
   459                           ;main.c: 113: {
   460                           ;main.c: 114: irLeftStep = 1;
   461  0045  3001               	movlw	1
   462  0046  00C7               	movwf	_irLeftStep	;volatile
   463                           
   464                           ;main.c: 115: if(waitTimeCount == 0)
   465  0047  0840               	movf	_waitTimeCount,w
   466  0048  0441               	iorwf	_waitTimeCount+1,w
   467  0049  1D03               	btfss	3,2
   468  004A  284F               	goto	l966
   469                           
   470                           ;main.c: 116: {
   471                           ;main.c: 117: waitTimeCount = 1;
   472  004B  01C0               	clrf	_waitTimeCount
   473  004C  0AC0               	incf	_waitTimeCount,f
   474  004D  01C1               	clrf	_waitTimeCount+1
   475                           
   476                           ;main.c: 118: }
   477  004E  2858               	goto	l972
   478  004F                     l966:	
   479                           
   480                           ;main.c: 119: else
   481                           ;main.c: 120: {
   482                           ;main.c: 121: lowDealy = 12;
   483                           
   484                           ;main.c: 122: if(waitTimeCount > 30)
   485  004F  208B               	fcall	PL2	;call to abstracted procedure
   486  0050  1903               	skipnz
   487  0051  0240               	subwf	_waitTimeCount,w
   488  0052  1C03               	skipc
   489  0053  2856               	goto	l970
   490                           
   491                           ;main.c: 123: {
   492                           ;main.c: 124: workStep = 2;
   493  0054  3002               	movlw	2
   494  0055  2857               	goto	L1
   495  0056                     l970:	
   496                           ;main.c: 125: }
   497                           
   498                           
   499                           ;main.c: 126: else
   500                           ;main.c: 127: {
   501                           ;main.c: 128: workStep = 3;
   502  0056  3003               	movlw	3
   503  0057                     L1:	
   504  0057  00C8               	movwf	_workStep
   505  0058                     l972:	
   506                           
   507                           ;main.c: 129: }
   508                           ;main.c: 130: }
   509                           ;main.c: 131: }
   510                           ;main.c: 132: revLeftZeroCount = 0;
   511  0058  01A2               	clrf	_revLeftZeroCount
   512                           
   513                           ;main.c: 133: }
   514  0059  2862               	goto	l980
   515  005A                     l974:	
   516                           
   517                           ;main.c: 134: else
   518                           ;main.c: 135: {
   519                           ;main.c: 136: if(++revLeftZeroCount > 1)
   520  005A  3002               	movlw	2
   521  005B  0AA2               	incf	_revLeftZeroCount,f
   522  005C  0222               	subwf	_revLeftZeroCount,w
   523  005D  1C03               	skipc
   524  005E  2862               	goto	l980
   525                           
   526                           ;main.c: 137: {
   527                           ;main.c: 138: revLeftZeroCount = 1;
   528  005F  01A2               	clrf	_revLeftZeroCount
   529  0060  0AA2               	incf	_revLeftZeroCount,f
   530                           
   531                           ;main.c: 139: irLeftStep = 0;
   532  0061  01C7               	clrf	_irLeftStep	;volatile
   533  0062                     l980:	
   534                           
   535                           ;main.c: 140: }
   536                           ;main.c: 141: }
   537                           ;main.c: 143: if(revRightCount > 5)
   538  0062  3006               	movlw	6
   539  0063  0223               	subwf	_revRightCount,w
   540  0064  1C03               	skipc
   541  0065  287F               	goto	l998
   542                           
   543                           ;main.c: 144: {
   544                           ;main.c: 145: if(irRightStep == 0)
   545  0066  0846               	movf	_irRightStep,w	;volatile
   546  0067  1D03               	btfss	3,2
   547  0068  287D               	goto	l996
   548                           
   549                           ;main.c: 146: {
   550                           ;main.c: 147: irRightStep = 1;
   551  0069  3001               	movlw	1
   552  006A  00C6               	movwf	_irRightStep	;volatile
   553                           
   554                           ;main.c: 148: if(waitTimeCount == 0)
   555  006B  0840               	movf	_waitTimeCount,w
   556  006C  0441               	iorwf	_waitTimeCount+1,w
   557  006D  1D03               	btfss	3,2
   558  006E  2873               	goto	l990
   559                           
   560                           ;main.c: 149: {
   561                           ;main.c: 150: waitTimeCount = 1;
   562  006F  01C0               	clrf	_waitTimeCount
   563  0070  0AC0               	incf	_waitTimeCount,f
   564  0071  01C1               	clrf	_waitTimeCount+1
   565                           
   566                           ;main.c: 151: }
   567  0072  287D               	goto	l996
   568  0073                     l990:	
   569                           
   570                           ;main.c: 152: else
   571                           ;main.c: 153: {
   572                           ;main.c: 154: lowDealy = 12;
   573                           
   574                           ;main.c: 155: if(waitTimeCount > 30)
   575  0073  208B               	fcall	PL2	;call to abstracted procedure
   576  0074  1903               	skipnz
   577  0075  0240               	subwf	_waitTimeCount,w
   578  0076  1C03               	skipc
   579  0077  287B               	goto	l994
   580                           
   581                           ;main.c: 156: {
   582                           ;main.c: 158: workStep = 1;
   583  0078  01C8               	clrf	_workStep
   584  0079  0AC8               	incf	_workStep,f
   585                           
   586                           ;main.c: 159: }
   587  007A  287D               	goto	l996
   588  007B                     l994:	
   589                           
   590                           ;main.c: 160: else
   591                           ;main.c: 161: {
   592                           ;main.c: 162: workStep = 3;
   593  007B  3003               	movlw	3
   594  007C  00C8               	movwf	_workStep
   595  007D                     l996:	
   596                           
   597                           ;main.c: 163: }
   598                           ;main.c: 164: }
   599                           ;main.c: 166: }
   600                           ;main.c: 167: revRightZeroCount = 0;
   601  007D  01A1               	clrf	_revRightZeroCount
   602                           
   603                           ;main.c: 168: }
   604  007E  2887               	goto	l350
   605  007F                     l998:	
   606                           
   607                           ;main.c: 169: else
   608                           ;main.c: 170: {
   609                           ;main.c: 171: if(++revRightZeroCount > 1)
   610  007F  3002               	movlw	2
   611  0080  0AA1               	incf	_revRightZeroCount,f
   612  0081  0221               	subwf	_revRightZeroCount,w
   613  0082  1C03               	skipc
   614  0083  2887               	goto	l350
   615                           
   616                           ;main.c: 172: {
   617                           ;main.c: 173: revRightZeroCount = 1;
   618  0084  01A1               	clrf	_revRightZeroCount
   619  0085  0AA1               	incf	_revRightZeroCount,f
   620                           
   621                           ;main.c: 174: irRightStep = 0;
   622  0086  01C6               	clrf	_irRightStep	;volatile
   623  0087                     l350:	
   624                           
   625                           ;main.c: 175: }
   626                           ;main.c: 176: }
   627                           ;main.c: 180: checkCount = 0;
   628  0087  01A0               	clrf	_checkCount
   629                           
   630                           ;main.c: 181: revLeftCount = 0;
   631  0088  01C5               	clrf	_revLeftCount
   632                           
   633                           ;main.c: 182: revRightCount = 0;
   634  0089  01A3               	clrf	_revRightCount
   635  008A  0008               	return
   636  008B                     __end_of_checkIRKey:	
   637  008B                     PL2:	
   638  008B  300C               	movlw	12
   639  008C  00C4               	movwf	_lowDealy
   640  008D  3000               	movlw	0
   641  008E  0241               	subwf	_waitTimeCount+1,w
   642  008F  341F               	retlw	31
   643  0090                     __end_ofPL2:	
   644                           
   645                           	psect	text3
   646  00CE                     __ptext3:	
   647 ;; *************** function _Init_System *****************
   648 ;; Defined at:
   649 ;;		line 69 in file "C:\mcuproject\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   650 ;; Parameters:    Size  Location     Type
   651 ;;		None
   652 ;; Auto vars:     Size  Location     Type
   653 ;;		None
   654 ;; Return value:  Size  Location     Type
   655 ;;                  1    wreg      void 
   656 ;; Registers used:
   657 ;;		wreg, status,2
   658 ;; Tracked objects:
   659 ;;		On entry : B00/0
   660 ;;		On exit  : 0/0
   661 ;;		Unchanged: 0/0
   662 ;; Data sizes:     COMMON   BANK0
   663 ;;      Params:         0       0
   664 ;;      Locals:         0       0
   665 ;;      Temps:          0       0
   666 ;;      Totals:         0       0
   667 ;;Total ram usage:        0 bytes
   668 ;; Hardware stack levels used:    1
   669 ;; Hardware stack levels required when called:    1
   670 ;; This function calls:
   671 ;;		Nothing
   672 ;; This function is called by:
   673 ;;		_main
   674 ;; This function uses a non-reentrant model
   675 ;;
   676                           
   677                           
   678                           ;psect for function _Init_System
   679  00CE                     _Init_System:	
   680                           
   681                           ;incstack = 0
   682                           ; Regs used in _Init_System: [wreg+status,2]
   683  00CE  0000               	nop	;# 
   684  00CF  0064               	clrwdt	;# 
   685                           
   686                           ;main.c: 73: INTCON = 0;
   687  00D0  0189               	clrf	9	;volatile
   688                           
   689                           ;main.c: 74: OSCCON = 0X71;
   690  00D1  3071               	movlw	113
   691  00D2  0088               	movwf	8	;volatile
   692                           
   693                           ;main.c: 75: OPTION_REG = 0;
   694  00D3  0187               	clrf	7	;volatile
   695                           
   696                           ;main.c: 79: TMR0 = 5;
   697  00D4  3005               	movlw	5
   698  00D5  0081               	movwf	1	;volatile
   699                           
   700                           ;main.c: 80: TRISB = 0x3E;
   701  00D6  303E               	movlw	62
   702  00D7  0086               	movwf	6	;volatile
   703                           
   704                           ;main.c: 81: PDCONB = 0x06;
   705  00D8  3006               	movlw	6
   706  00D9  008B               	movwf	11	;volatile
   707                           
   708                           ;main.c: 82: WPUB = 0x38;
   709  00DA  3038               	movlw	56
   710  00DB  008D               	movwf	13	;volatile
   711                           
   712                           ;main.c: 83: PORTB = 0x00;
   713  00DC  0185               	clrf	5	;volatile
   714                           
   715                           ;main.c: 84: INTCON = 0XA0;
   716  00DD  30A0               	movlw	160
   717  00DE  0089               	movwf	9	;volatile
   718  00DF  0008               	return
   719  00E0                     __end_of_Init_System:	
   720                           
   721                           	psect	text4
   722  00AF                     __ptext4:	
   723 ;; *************** function _Isr_Timer *****************
   724 ;; Defined at:
   725 ;;		line 190 in file "C:\mcuproject\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   726 ;; Parameters:    Size  Location     Type
   727 ;;		None
   728 ;; Auto vars:     Size  Location     Type
   729 ;;		None
   730 ;; Return value:  Size  Location     Type
   731 ;;                  1    wreg      void 
   732 ;; Registers used:
   733 ;;		wreg, status,2, status,0
   734 ;; Tracked objects:
   735 ;;		On entry : 0/0
   736 ;;		On exit  : 0/0
   737 ;;		Unchanged: 0/0
   738 ;; Data sizes:     COMMON   BANK0
   739 ;;      Params:         0       0
   740 ;;      Locals:         0       0
   741 ;;      Temps:          2       0
   742 ;;      Totals:         2       0
   743 ;;Total ram usage:        2 bytes
   744 ;; Hardware stack levels used:    1
   745 ;; This function calls:
   746 ;;		Nothing
   747 ;; This function is called by:
   748 ;;		Interrupt level 1
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           
   753                           ;psect for function _Isr_Timer
   754  00AF                     _Isr_Timer:	
   755                           
   756                           ;main.c: 192: if(T0IF)
   757  00AF  1D09               	btfss	9,2	;volatile
   758  00B0  28C7               	goto	i1l362
   759                           
   760                           ;main.c: 193: {
   761                           ;main.c: 194: T0IF = 0;
   762  00B1  1109               	bcf	9,2	;volatile
   763                           
   764                           ;main.c: 195: TMR0 += 5;
   765  00B2  3005               	movlw	5
   766  00B3  0781               	addwf	1,f	;volatile
   767                           
   768                           ;main.c: 196: if(++MainTime >= 32)
   769  00B4  3020               	movlw	32
   770  00B5  0AC2               	incf	_MainTime,f	;volatile
   771  00B6  0242               	subwf	_MainTime,w	;volatile
   772  00B7  1C03               	skipc
   773  00B8  28BB               	goto	i1l854
   774                           
   775                           ;main.c: 197: {
   776                           ;main.c: 198: MainTime = 0;
   777  00B9  01C2               	clrf	_MainTime	;volatile
   778                           
   779                           ;main.c: 199: B_MainLoop = 1;
   780  00BA  144B               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   781  00BB                     i1l854:	
   782                           
   783                           ;main.c: 200: }
   784                           ;main.c: 202: if(pwmTime < 12)
   785  00BB  300C               	movlw	12
   786  00BC  0243               	subwf	_pwmTime,w	;volatile
   787  00BD  1803               	skipnc
   788  00BE  28C1               	goto	i1l359
   789                           
   790                           ;main.c: 203: PORTB &= 0xFE;
   791  00BF  1005               	bcf	5,0	;volatile
   792  00C0  28C2               	goto	i1l858
   793  00C1                     i1l359:	
   794                           
   795                           ;main.c: 204: else
   796                           ;main.c: 205: PORTB |= 0x01;
   797  00C1  1405               	bsf	5,0	;volatile
   798  00C2                     i1l858:	
   799                           
   800                           ;main.c: 206: if(++pwmTime >= 44)
   801  00C2  302C               	movlw	44
   802  00C3  0AC3               	incf	_pwmTime,f	;volatile
   803  00C4  0243               	subwf	_pwmTime,w	;volatile
   804  00C5  1803               	btfsc	3,0
   805                           
   806                           ;main.c: 207: {
   807                           ;main.c: 208: pwmTime = 0;
   808  00C6  01C3               	clrf	_pwmTime	;volatile
   809  00C7                     i1l362:	
   810  00C7  084A               	movf	??_Isr_Timer+1,w
   811  00C8  008A               	movwf	10
   812  00C9  0E49               	swapf	??_Isr_Timer^(0+-128),w
   813  00CA  0083               	movwf	3
   814  00CB  0ECE               	swapf	78,f
   815  00CC  0E4E               	swapf	78,w
   816  00CD  0009               	retfie
   817  00CE                     __end_of_Isr_Timer:	
   818  004E                     btemp	set	78	;btemp
   819  004E                     wtemp0	set	78
   820                           
   821                           	psect	intentry
   822  0004                     __pintentry:	
   823                           ;incstack = 0
   824                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
   825                           
   826  0004                     interrupt_function:	
   827  004E                     saved_w	set	btemp
   828  0004  00CE               	movwf	btemp
   829  0005  0E03               	swapf	3,w
   830  0006  00C9               	movwf	??_Isr_Timer
   831  0007  080A               	movf	10,w
   832  0008  00CA               	movwf	??_Isr_Timer+1
   833  0009  28AF               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      2      12
    BANK0            32      2       6

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_procesWork

Critical Paths under _Isr_Timer in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      67
                        _Init_System
                         _checkIRKey
                         _procesWork
 ---------------------------------------------------------------------------------
 (1) _procesWork                                           2     2      0      67
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _checkIRKey                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_System
   _checkIRKey
   _procesWork

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      2       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               20      2       6       3       18.8%
ABS                  0      0      12       4        0.0%
BITBANK0            20      0       0       5        0.0%
DATA                 0      0      12       6        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Sep 07 17:50:57 2020

                     PL2 008B                      l315 00E2                      l350 0087  
                    l970 0056                      l954 0039                      l980 0062  
                    l972 0058                      l990 0073                      l966 004F  
                    l974 005A                      l994 007B                      l996 007D  
                    l998 007F                      u574 009B                      u575 0099  
                   l1010 00A5                     _T0IF 004A                     _TMR0 0001  
                   _WPUB 000D                     _main 00E0                     btemp 004E  
                   start 000A            ??_Init_System 004B                    ?_main 0049  
                  i1l362 00C7                    i1l359 00C1                    i1l854 00BB  
                  i1l858 00C2                    _PORTB 0005                    _TRISB 0006  
       _revLeftZeroCount 0022           __pbitbssCOMMON 0258                    pclath 000A  
                  status 0003                    wtemp0 004E          __initialization 000B  
           __end_of_main 00E9                   ??_main 004B      __end_of_Init_System 00E0  
                 _PDCONB 000B                   _INTCON 0009                   _OSCCON 0008  
     __size_of_Isr_Timer 001F                   saved_w 004E  __end_of__initialization 0019  
         __pcstackCOMMON 0049        _revRightZeroCount 0021              _Init_System 00CE  
             __end_ofPL2 0090          procesWork@tempC 0025        __end_of_Isr_Timer 00CE  
             _checkIRKey 001B               _checkCount 0020               __pbssBANK0 0020  
             __pmaintext 00E0               __pintentry 0004               _irLeftStep 0047  
                __ptext0 0000                  __ptext1 0090                  __ptext2 001B  
                __ptext3 00CE                  __ptext4 00AF              ?_checkIRKey 0049  
                _pwmTime 0043     end_of_initialization 0019               _procesWork 0090  
    __size_of_checkIRKey 0070             ?_Init_System 0049      start_initialization 000B  
          _revRightCount 0023                _Isr_Timer 00AF              ?_procesWork 0049  
            __pbssCOMMON 0040                ___latbits 0000            __pcstackBANK0 0024  
             ?_Isr_Timer 0049             ??_checkIRKey 0024        interrupt_function 0004  
    __size_of_procesWork 001F       __end_of_checkIRKey 008B              _irRightStep 0046  
           _revLeftCount 0045     __size_of_Init_System 0012            _waitTimeCount 0040  
            ??_Isr_Timer 0049                 _MainTime 0042            __size_of_main 0009  
               _lowDealy 0044                 _workStep 0048             ??_procesWork 0024  
               intlevel1 0000       __end_of_procesWork 00AF               _B_MainLoop 0258  
             _OPTION_REG 0007  
