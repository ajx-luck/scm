

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sun Sep 06 17:01:56 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1152A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	pa_nodes0,global,class=CODE,delta=2
    18                           	dabs	1,0x4E,2
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	text0
    56  0000                     __ptext0:	
    57  000D                     _WPUB	set	13
    58  000B                     _PDCONB	set	11
    59  0009                     _INTCON	set	9
    60  0008                     _OSCCON	set	8
    61  0007                     _OPTION_REG	set	7
    62  0006                     _TRISB	set	6
    63  0005                     _PORTB	set	5
    64  0001                     _TMR0	set	1
    65  004A                     _T0IF	set	74
    66                           
    67                           	psect	cinit
    68  000B                     start_initialization:	
    69                           ; #config settings
    70                           
    71  000B                     __initialization:	
    72                           
    73                           ; Clear objects allocated to BITCOMMON
    74  000B  01CC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
    75                           
    76                           ; Clear objects allocated to COMMON
    77  000C  01C0               	clrf	__pbssCOMMON& (0+127)
    78  000D  01C1               	clrf	(__pbssCOMMON+1)& (0+127)
    79  000E  01C2               	clrf	(__pbssCOMMON+2)& (0+127)
    80  000F  01C3               	clrf	(__pbssCOMMON+3)& (0+127)
    81  0010  01C4               	clrf	(__pbssCOMMON+4)& (0+127)
    82  0011  01C5               	clrf	(__pbssCOMMON+5)& (0+127)
    83  0012  01C6               	clrf	(__pbssCOMMON+6)& (0+127)
    84  0013  01C7               	clrf	(__pbssCOMMON+7)& (0+127)
    85  0014  01C8               	clrf	(__pbssCOMMON+8)& (0+127)
    86  0015  01C9               	clrf	(__pbssCOMMON+9)& (0+127)
    87                           
    88                           ; Clear objects allocated to BANK0
    89  0016  01A0               	clrf	__pbssBANK0& (0+127)
    90  0017  01A1               	clrf	(__pbssBANK0+1)& (0+127)
    91  0018  01A2               	clrf	(__pbssBANK0+2)& (0+127)
    92  0019                     end_of_initialization:	
    93                           ;End of C runtime variable initialization code
    94                           
    95  0019                     __end_of__initialization:	
    96  0019  0183               	clrf	3
    97  001A  28C9               	ljmp	_main	;jump to C main() function
    98                           
    99                           	psect	bitbssCOMMON
   100  0260                     __pbitbssCOMMON:	
   101  0260                     _B_MainLoop:	
   102  0260                     	ds	1
   103                           
   104                           	psect	bssCOMMON
   105  0040                     __pbssCOMMON:	
   106  0040                     _waitTimeCount:	
   107  0040                     	ds	2
   108  0042                     _MainTime:	
   109  0042                     	ds	1
   110  0043                     _pwmTime:	
   111  0043                     	ds	1
   112  0044                     _lowDealy:	
   113  0044                     	ds	1
   114  0045                     _revLeftZeroCount:	
   115  0045                     	ds	1
   116  0046                     _revRightCount:	
   117  0046                     	ds	1
   118  0047                     _revLeftCount:	
   119  0047                     	ds	1
   120  0048                     _irRightStep:	
   121  0048                     	ds	1
   122  0049                     _irLeftStep:	
   123  0049                     	ds	1
   124                           
   125                           	psect	bssBANK0
   126  0020                     __pbssBANK0:	
   127  0020                     _workStep:	
   128  0020                     	ds	1
   129  0021                     _checkCount:	
   130  0021                     	ds	1
   131  0022                     _revRightZeroCount:	
   132  0022                     	ds	1
   133                           
   134                           	psect	cstackCOMMON
   135  004A                     __pcstackCOMMON:	
   136  004A                     ?_Init_System:	
   137  004A                     ?_checkIRKey:	
   138                           ; 1 bytes @ 0x0
   139                           
   140  004A                     ?_procesWork:	
   141                           ; 1 bytes @ 0x0
   142                           
   143  004A                     ?_main:	
   144                           ; 1 bytes @ 0x0
   145                           
   146  004A                     ?_Isr_Timer:	
   147                           ; 1 bytes @ 0x0
   148                           
   149  004A                     ??_Isr_Timer:	
   150                           ; 1 bytes @ 0x0
   151                           
   152                           
   153                           ; 1 bytes @ 0x0
   154  004A                     	ds	2
   155                           
   156                           	psect	cstackBANK0
   157  0023                     __pcstackBANK0:	
   158  0023                     ??_Init_System:	
   159  0023                     ??_checkIRKey:	
   160                           ; 1 bytes @ 0x0
   161                           
   162  0023                     ??_procesWork:	
   163                           ; 1 bytes @ 0x0
   164                           
   165                           
   166                           ; 1 bytes @ 0x0
   167  0023                     	ds	1
   168  0024                     ??_main:	
   169                           
   170                           	psect	maintext
   171  00C9                     __pmaintext:	
   172                           ; 1 bytes @ 0x1
   173 ;;
   174 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   175 ;;
   176 ;; *************** function _main *****************
   177 ;; Defined at:
   178 ;;		line 28 in file "C:\Users\mxy\Desktop\ÐÂ½¨ÎÄ¼þ¼Ð\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   179 ;; Parameters:    Size  Location     Type
   180 ;;		None
   181 ;; Auto vars:     Size  Location     Type
   182 ;;		None
   183 ;; Return value:  Size  Location     Type
   184 ;;                  1    wreg      void 
   185 ;; Registers used:
   186 ;;		wreg, status,2, status,0, pclath, cstack
   187 ;; Tracked objects:
   188 ;;		On entry : B00/0
   189 ;;		On exit  : 0/0
   190 ;;		Unchanged: 0/0
   191 ;; Data sizes:     COMMON   BANK0
   192 ;;      Params:         0       0
   193 ;;      Locals:         0       0
   194 ;;      Temps:          0       0
   195 ;;      Totals:         0       0
   196 ;;Total ram usage:        0 bytes
   197 ;; Hardware stack levels required when called:    2
   198 ;; This function calls:
   199 ;;		_Init_System
   200 ;;		_checkIRKey
   201 ;;		_procesWork
   202 ;; This function is called by:
   203 ;;		Startup code after reset
   204 ;; This function uses a non-reentrant model
   205 ;;
   206                           
   207                           
   208                           ;psect for function _main
   209  00C9                     _main:	
   210                           
   211                           ;main.c: 30: PORTB = 0x00;
   212                           
   213                           ;incstack = 0
   214                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   215  00C9  0185               	clrf	5	;volatile
   216                           
   217                           ;main.c: 31: Init_System();
   218  00CA  20AF               	fcall	_Init_System
   219  00CB                     l315:	
   220                           ;main.c: 32: while(1)
   221                           
   222  00CB  0064               	clrwdt	;# 
   223                           
   224                           ;main.c: 35: if(B_MainLoop)
   225  00CC  1C4C               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   226  00CD  28CB               	goto	l315
   227                           
   228                           ;main.c: 36: {
   229                           ;main.c: 37: B_MainLoop = 0;
   230  00CE  104C               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   231                           
   232                           ;main.c: 38: checkIRKey();
   233  00CF  201B               	fcall	_checkIRKey
   234                           
   235                           ;main.c: 39: procesWork();
   236  00D0  20BF               	fcall	_procesWork
   237  00D1  28CB               	goto	l315
   238  00D2                     __end_of_main:	
   239                           
   240                           	psect	text1
   241  00BF                     __ptext1:	
   242 ;; *************** function _procesWork *****************
   243 ;; Defined at:
   244 ;;		line 44 in file "C:\Users\mxy\Desktop\ÐÂ½¨ÎÄ¼þ¼Ð\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   245 ;; Parameters:    Size  Location     Type
   246 ;;		None
   247 ;; Auto vars:     Size  Location     Type
   248 ;;		None
   249 ;; Return value:  Size  Location     Type
   250 ;;                  1    wreg      void 
   251 ;; Registers used:
   252 ;;		wreg, status,2, status,0
   253 ;; Tracked objects:
   254 ;;		On entry : 0/0
   255 ;;		On exit  : 0/0
   256 ;;		Unchanged: 0/0
   257 ;; Data sizes:     COMMON   BANK0
   258 ;;      Params:         0       0
   259 ;;      Locals:         0       0
   260 ;;      Temps:          0       0
   261 ;;      Totals:         0       0
   262 ;;Total ram usage:        0 bytes
   263 ;; Hardware stack levels used:    1
   264 ;; Hardware stack levels required when called:    1
   265 ;; This function calls:
   266 ;;		Nothing
   267 ;; This function is called by:
   268 ;;		_main
   269 ;; This function uses a non-reentrant model
   270 ;;
   271                           
   272                           
   273                           ;psect for function _procesWork
   274  00BF                     _procesWork:	
   275                           
   276                           ;main.c: 47: if(workStep == 3)
   277                           
   278                           ;incstack = 0
   279                           ; Regs used in _procesWork: [wreg+status,2+status,0]
   280  00BF  3003               	movlw	3
   281  00C0  0620               	xorwf	_workStep,w
   282  00C1  1903               	btfsc	3,2
   283                           
   284                           ;main.c: 48: {
   285                           ;main.c: 49: workStep = 0;
   286  00C2  01A0               	clrf	_workStep
   287                           
   288                           ;main.c: 50: }
   289                           ;main.c: 51: if(lowDealy > 0)
   290  00C3  0844               	movf	_lowDealy,w
   291  00C4  1D03               	btfss	3,2
   292                           
   293                           ;main.c: 52: {
   294                           ;main.c: 54: if(--lowDealy == 0)
   295  00C5  0BC4               	decfsz	_lowDealy,f
   296  00C6  0008               	return
   297                           
   298                           ;main.c: 55: {
   299                           ;main.c: 57: workStep = 0;
   300  00C7  01A0               	clrf	_workStep
   301  00C8  0008               	return
   302  00C9                     __end_of_procesWork:	
   303                           
   304                           	psect	text2
   305  001B                     __ptext2:	
   306 ;; *************** function _checkIRKey *****************
   307 ;; Defined at:
   308 ;;		line 83 in file "C:\Users\mxy\Desktop\ÐÂ½¨ÎÄ¼þ¼Ð\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   309 ;; Parameters:    Size  Location     Type
   310 ;;		None
   311 ;; Auto vars:     Size  Location     Type
   312 ;;		None
   313 ;; Return value:  Size  Location     Type
   314 ;;                  1    wreg      void 
   315 ;; Registers used:
   316 ;;		wreg, status,2, status,0
   317 ;; Tracked objects:
   318 ;;		On entry : 0/0
   319 ;;		On exit  : 0/0
   320 ;;		Unchanged: 0/0
   321 ;; Data sizes:     COMMON   BANK0
   322 ;;      Params:         0       0
   323 ;;      Locals:         0       0
   324 ;;      Temps:          0       1
   325 ;;      Totals:         0       1
   326 ;;Total ram usage:        1 bytes
   327 ;; Hardware stack levels used:    1
   328 ;; Hardware stack levels required when called:    1
   329 ;; This function calls:
   330 ;;		Nothing
   331 ;; This function is called by:
   332 ;;		_main
   333 ;; This function uses a non-reentrant model
   334 ;;
   335                           
   336                           
   337                           ;psect for function _checkIRKey
   338  001B                     _checkIRKey:	
   339                           
   340                           ;main.c: 85: if(((PORTB) >> (1)&1))
   341                           
   342                           ;incstack = 0
   343                           ; Regs used in _checkIRKey: [wreg+status,2+status,0]
   344  001B  0805               	movf	5,w	;volatile
   345  001C  00A3               	movwf	??_checkIRKey
   346  001D  1003               	clrc
   347  001E  0CA3               	rrf	??_checkIRKey,f
   348  001F  1823               	btfsc	??_checkIRKey,0
   349                           
   350                           ;main.c: 86: {
   351                           ;main.c: 87: revLeftCount++;
   352  0020  0AC7               	incf	_revLeftCount,f
   353                           
   354                           ;main.c: 88: }
   355                           ;main.c: 90: if(((PORTB) >> (2)&1))
   356  0021  0805               	movf	5,w	;volatile
   357  0022  00A3               	movwf	??_checkIRKey
   358  0023  1003               	clrc
   359  0024  0CA3               	rrf	??_checkIRKey,f
   360  0025  1003               	clrc
   361  0026  0CA3               	rrf	??_checkIRKey,f
   362  0027  1823               	btfsc	??_checkIRKey,0
   363                           
   364                           ;main.c: 91: {
   365                           ;main.c: 92: revRightCount++;
   366  0028  0AC6               	incf	_revRightCount,f
   367                           
   368                           ;main.c: 93: }
   369                           ;main.c: 95: if(waitTimeCount > 0)
   370  0029  0840               	movf	_waitTimeCount,w
   371  002A  0441               	iorwf	_waitTimeCount+1,w
   372  002B  1903               	btfsc	3,2
   373  002C  2839               	goto	l980
   374                           
   375                           ;main.c: 96: {
   376                           ;main.c: 97: waitTimeCount++;
   377  002D  0AC0               	incf	_waitTimeCount,f
   378  002E  1903               	skipnz
   379  002F  0AC1               	incf	_waitTimeCount+1,f
   380                           
   381                           ;main.c: 98: if(waitTimeCount > 375)
   382  0030  3001               	movlw	1
   383  0031  0241               	subwf	_waitTimeCount+1,w
   384  0032  3078               	movlw	120
   385  0033  1903               	skipnz
   386  0034  0240               	subwf	_waitTimeCount,w
   387  0035  1C03               	skipc
   388  0036  2839               	goto	l980
   389                           
   390                           ;main.c: 99: {
   391                           ;main.c: 100: waitTimeCount = 0;
   392  0037  01C0               	clrf	_waitTimeCount
   393  0038  01C1               	clrf	_waitTimeCount+1
   394  0039                     l980:	
   395                           
   396                           ;main.c: 101: }
   397                           ;main.c: 102: }
   398                           ;main.c: 103: if(++checkCount >= 20)
   399  0039  3014               	movlw	20
   400  003A  0AA1               	incf	_checkCount,f
   401  003B  0221               	subwf	_checkCount,w
   402  003C  1C03               	skipc
   403  003D  0008               	return
   404                           
   405                           ;main.c: 104: {
   406                           ;main.c: 105: if(revLeftCount > 5)
   407  003E  3006               	movlw	6
   408  003F  0247               	subwf	_revLeftCount,w
   409  0040  1C03               	skipc
   410  0041  285A               	goto	l1000
   411                           
   412                           ;main.c: 106: {
   413                           ;main.c: 107: if(irLeftStep == 0)
   414  0042  0849               	movf	_irLeftStep,w	;volatile
   415  0043  1D03               	btfss	3,2
   416  0044  2858               	goto	l998
   417                           
   418                           ;main.c: 108: {
   419                           ;main.c: 109: irLeftStep = 1;
   420  0045  3001               	movlw	1
   421  0046  00C9               	movwf	_irLeftStep	;volatile
   422                           
   423                           ;main.c: 110: if(waitTimeCount == 0)
   424  0047  0840               	movf	_waitTimeCount,w
   425  0048  0441               	iorwf	_waitTimeCount+1,w
   426  0049  1D03               	btfss	3,2
   427  004A  284F               	goto	l992
   428                           
   429                           ;main.c: 111: {
   430                           ;main.c: 112: waitTimeCount = 1;
   431  004B  01C0               	clrf	_waitTimeCount
   432  004C  0AC0               	incf	_waitTimeCount,f
   433  004D  01C1               	clrf	_waitTimeCount+1
   434                           
   435                           ;main.c: 113: }
   436  004E  2858               	goto	l998
   437  004F                     l992:	
   438                           
   439                           ;main.c: 114: else
   440                           ;main.c: 115: {
   441                           ;main.c: 116: lowDealy = 12;
   442                           
   443                           ;main.c: 117: if(waitTimeCount > 30)
   444  004F  208B               	fcall	PL2	;call to abstracted procedure
   445  0050  1903               	skipnz
   446  0051  0240               	subwf	_waitTimeCount,w
   447  0052  1C03               	skipc
   448  0053  2856               	goto	l996
   449                           
   450                           ;main.c: 118: {
   451                           ;main.c: 119: workStep = 2;
   452  0054  3002               	movlw	2
   453  0055  2857               	goto	L1
   454  0056                     l996:	
   455                           ;main.c: 120: }
   456                           
   457                           
   458                           ;main.c: 121: else
   459                           ;main.c: 122: {
   460                           ;main.c: 123: workStep = 3;
   461  0056  3003               	movlw	3
   462  0057                     L1:	
   463  0057  00A0               	movwf	_workStep
   464  0058                     l998:	
   465                           
   466                           ;main.c: 124: }
   467                           ;main.c: 125: }
   468                           ;main.c: 126: }
   469                           ;main.c: 127: revLeftZeroCount = 0;
   470  0058  01C5               	clrf	_revLeftZeroCount
   471                           
   472                           ;main.c: 128: }
   473  0059  2862               	goto	l1006
   474  005A                     l1000:	
   475                           
   476                           ;main.c: 129: else
   477                           ;main.c: 130: {
   478                           ;main.c: 131: if(++revLeftZeroCount > 1)
   479  005A  3002               	movlw	2
   480  005B  0AC5               	incf	_revLeftZeroCount,f
   481  005C  0245               	subwf	_revLeftZeroCount,w
   482  005D  1C03               	skipc
   483  005E  2862               	goto	l1006
   484                           
   485                           ;main.c: 132: {
   486                           ;main.c: 133: revLeftZeroCount = 1;
   487  005F  01C5               	clrf	_revLeftZeroCount
   488  0060  0AC5               	incf	_revLeftZeroCount,f
   489                           
   490                           ;main.c: 134: irLeftStep = 0;
   491  0061  01C9               	clrf	_irLeftStep	;volatile
   492  0062                     l1006:	
   493                           
   494                           ;main.c: 135: }
   495                           ;main.c: 136: }
   496                           ;main.c: 138: if(revRightCount > 5)
   497  0062  3006               	movlw	6
   498  0063  0246               	subwf	_revRightCount,w
   499  0064  1C03               	skipc
   500  0065  287F               	goto	l1024
   501                           
   502                           ;main.c: 139: {
   503                           ;main.c: 140: if(irRightStep == 0)
   504  0066  0848               	movf	_irRightStep,w	;volatile
   505  0067  1D03               	btfss	3,2
   506  0068  287D               	goto	l1022
   507                           
   508                           ;main.c: 141: {
   509                           ;main.c: 142: irRightStep = 1;
   510  0069  3001               	movlw	1
   511  006A  00C8               	movwf	_irRightStep	;volatile
   512                           
   513                           ;main.c: 143: if(waitTimeCount == 0)
   514  006B  0840               	movf	_waitTimeCount,w
   515  006C  0441               	iorwf	_waitTimeCount+1,w
   516  006D  1D03               	btfss	3,2
   517  006E  2873               	goto	l1016
   518                           
   519                           ;main.c: 144: {
   520                           ;main.c: 145: waitTimeCount = 1;
   521  006F  01C0               	clrf	_waitTimeCount
   522  0070  0AC0               	incf	_waitTimeCount,f
   523  0071  01C1               	clrf	_waitTimeCount+1
   524                           
   525                           ;main.c: 146: }
   526  0072  287D               	goto	l1022
   527  0073                     l1016:	
   528                           
   529                           ;main.c: 147: else
   530                           ;main.c: 148: {
   531                           ;main.c: 149: lowDealy = 12;
   532                           
   533                           ;main.c: 150: if(waitTimeCount > 30)
   534  0073  208B               	fcall	PL2	;call to abstracted procedure
   535  0074  1903               	skipnz
   536  0075  0240               	subwf	_waitTimeCount,w
   537  0076  1C03               	skipc
   538  0077  287B               	goto	l1020
   539                           
   540                           ;main.c: 151: {
   541                           ;main.c: 153: workStep = 1;
   542  0078  01A0               	clrf	_workStep
   543  0079  0AA0               	incf	_workStep,f
   544                           
   545                           ;main.c: 154: }
   546  007A  287D               	goto	l1022
   547  007B                     l1020:	
   548                           
   549                           ;main.c: 155: else
   550                           ;main.c: 156: {
   551                           ;main.c: 157: workStep = 3;
   552  007B  3003               	movlw	3
   553  007C  00A0               	movwf	_workStep
   554  007D                     l1022:	
   555                           
   556                           ;main.c: 158: }
   557                           ;main.c: 159: }
   558                           ;main.c: 161: }
   559                           ;main.c: 162: revRightZeroCount = 0;
   560  007D  01A2               	clrf	_revRightZeroCount
   561                           
   562                           ;main.c: 163: }
   563  007E  2887               	goto	l350
   564  007F                     l1024:	
   565                           
   566                           ;main.c: 164: else
   567                           ;main.c: 165: {
   568                           ;main.c: 166: if(++revRightZeroCount > 1)
   569  007F  3002               	movlw	2
   570  0080  0AA2               	incf	_revRightZeroCount,f
   571  0081  0222               	subwf	_revRightZeroCount,w
   572  0082  1C03               	skipc
   573  0083  2887               	goto	l350
   574                           
   575                           ;main.c: 167: {
   576                           ;main.c: 168: revRightZeroCount = 1;
   577  0084  01A2               	clrf	_revRightZeroCount
   578  0085  0AA2               	incf	_revRightZeroCount,f
   579                           
   580                           ;main.c: 169: irRightStep = 0;
   581  0086  01C8               	clrf	_irRightStep	;volatile
   582  0087                     l350:	
   583                           
   584                           ;main.c: 170: }
   585                           ;main.c: 171: }
   586                           ;main.c: 175: checkCount = 0;
   587  0087  01A1               	clrf	_checkCount
   588                           
   589                           ;main.c: 176: revLeftCount = 0;
   590  0088  01C7               	clrf	_revLeftCount
   591                           
   592                           ;main.c: 177: revRightCount = 0;
   593  0089  01C6               	clrf	_revRightCount
   594  008A  0008               	return
   595  008B                     __end_of_checkIRKey:	
   596  008B                     PL2:	
   597  008B  300C               	movlw	12
   598  008C  00C4               	movwf	_lowDealy
   599  008D  3000               	movlw	0
   600  008E  0241               	subwf	_waitTimeCount+1,w
   601  008F  341F               	retlw	31
   602  0090                     __end_ofPL2:	
   603                           
   604                           	psect	text3
   605  00AF                     __ptext3:	
   606 ;; *************** function _Init_System *****************
   607 ;; Defined at:
   608 ;;		line 64 in file "C:\Users\mxy\Desktop\ÐÂ½¨ÎÄ¼þ¼Ð\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   609 ;; Parameters:    Size  Location     Type
   610 ;;		None
   611 ;; Auto vars:     Size  Location     Type
   612 ;;		None
   613 ;; Return value:  Size  Location     Type
   614 ;;                  1    wreg      void 
   615 ;; Registers used:
   616 ;;		wreg, status,2
   617 ;; Tracked objects:
   618 ;;		On entry : B00/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMMON   BANK0
   622 ;;      Params:         0       0
   623 ;;      Locals:         0       0
   624 ;;      Temps:          0       0
   625 ;;      Totals:         0       0
   626 ;;Total ram usage:        0 bytes
   627 ;; Hardware stack levels used:    1
   628 ;; Hardware stack levels required when called:    1
   629 ;; This function calls:
   630 ;;		Nothing
   631 ;; This function is called by:
   632 ;;		_main
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           
   637                           ;psect for function _Init_System
   638  00AF                     _Init_System:	
   639                           
   640                           ;incstack = 0
   641                           ; Regs used in _Init_System: [wreg+status,2]
   642  00AF  0000               	nop	;# 
   643  00B0  0064               	clrwdt	;# 
   644                           
   645                           ;main.c: 68: INTCON = 0;
   646  00B1  0189               	clrf	9	;volatile
   647                           
   648                           ;main.c: 69: OSCCON = 0X71;
   649  00B2  3071               	movlw	113
   650  00B3  0088               	movwf	8	;volatile
   651                           
   652                           ;main.c: 70: OPTION_REG = 0;
   653  00B4  0187               	clrf	7	;volatile
   654                           
   655                           ;main.c: 74: WPUB = 0x00;
   656  00B5  018D               	clrf	13	;volatile
   657                           
   658                           ;main.c: 75: TMR0 = 5;
   659  00B6  3005               	movlw	5
   660  00B7  0081               	movwf	1	;volatile
   661                           
   662                           ;main.c: 76: TRISB = 0x06;
   663  00B8  3006               	movlw	6
   664  00B9  0086               	movwf	6	;volatile
   665                           
   666                           ;main.c: 77: PDCONB = 0x06;
   667  00BA  008B               	movwf	11	;volatile
   668                           
   669                           ;main.c: 78: PORTB = 0x00;
   670  00BB  0185               	clrf	5	;volatile
   671                           
   672                           ;main.c: 79: INTCON = 0XA0;
   673  00BC  30A0               	movlw	160
   674  00BD  0089               	movwf	9	;volatile
   675  00BE  0008               	return
   676  00BF                     __end_of_Init_System:	
   677                           
   678                           	psect	text4
   679  0090                     __ptext4:	
   680 ;; *************** function _Isr_Timer *****************
   681 ;; Defined at:
   682 ;;		line 185 in file "C:\Users\mxy\Desktop\ÐÂ½¨ÎÄ¼þ¼Ð\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;		None
   685 ;; Auto vars:     Size  Location     Type
   686 ;;		None
   687 ;; Return value:  Size  Location     Type
   688 ;;                  1    wreg      void 
   689 ;; Registers used:
   690 ;;		wreg, status,2, status,0
   691 ;; Tracked objects:
   692 ;;		On entry : 0/0
   693 ;;		On exit  : 0/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMMON   BANK0
   696 ;;      Params:         0       0
   697 ;;      Locals:         0       0
   698 ;;      Temps:          2       0
   699 ;;      Totals:         2       0
   700 ;;Total ram usage:        2 bytes
   701 ;; Hardware stack levels used:    1
   702 ;; This function calls:
   703 ;;		Nothing
   704 ;; This function is called by:
   705 ;;		Interrupt level 1
   706 ;; This function uses a non-reentrant model
   707 ;;
   708                           
   709                           
   710                           ;psect for function _Isr_Timer
   711  0090                     _Isr_Timer:	
   712                           
   713                           ;main.c: 187: if(T0IF)
   714  0090  1D09               	btfss	9,2	;volatile
   715  0091  28A8               	goto	i1l362
   716                           
   717                           ;main.c: 188: {
   718                           ;main.c: 189: T0IF = 0;
   719  0092  1109               	bcf	9,2	;volatile
   720                           
   721                           ;main.c: 190: TMR0 += 5;
   722  0093  3005               	movlw	5
   723  0094  0781               	addwf	1,f	;volatile
   724                           
   725                           ;main.c: 191: if(++MainTime >= 32)
   726  0095  3020               	movlw	32
   727  0096  0AC2               	incf	_MainTime,f	;volatile
   728  0097  0242               	subwf	_MainTime,w	;volatile
   729  0098  1C03               	skipc
   730  0099  289C               	goto	i1l852
   731                           
   732                           ;main.c: 192: {
   733                           ;main.c: 193: MainTime = 0;
   734  009A  01C2               	clrf	_MainTime	;volatile
   735                           
   736                           ;main.c: 194: B_MainLoop = 1;
   737  009B  144C               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   738  009C                     i1l852:	
   739                           
   740                           ;main.c: 195: }
   741                           ;main.c: 197: if(pwmTime < 12)
   742  009C  300C               	movlw	12
   743  009D  0243               	subwf	_pwmTime,w	;volatile
   744  009E  1803               	skipnc
   745  009F  28A2               	goto	i1l359
   746                           
   747                           ;main.c: 198: PORTB &= 0xDF;
   748  00A0  1285               	bcf	5,5	;volatile
   749  00A1  28A3               	goto	i1l856
   750  00A2                     i1l359:	
   751                           
   752                           ;main.c: 199: else
   753                           ;main.c: 200: PORTB |= 0x20;
   754  00A2  1685               	bsf	5,5	;volatile
   755  00A3                     i1l856:	
   756                           
   757                           ;main.c: 201: if(++pwmTime >= 44)
   758  00A3  302C               	movlw	44
   759  00A4  0AC3               	incf	_pwmTime,f	;volatile
   760  00A5  0243               	subwf	_pwmTime,w	;volatile
   761  00A6  1803               	btfsc	3,0
   762                           
   763                           ;main.c: 202: {
   764                           ;main.c: 203: pwmTime = 0;
   765  00A7  01C3               	clrf	_pwmTime	;volatile
   766  00A8                     i1l362:	
   767  00A8  084B               	movf	??_Isr_Timer+1,w
   768  00A9  008A               	movwf	10
   769  00AA  0E4A               	swapf	??_Isr_Timer^(0+-128),w
   770  00AB  0083               	movwf	3
   771  00AC  0ECE               	swapf	78,f
   772  00AD  0E4E               	swapf	78,w
   773  00AE  0009               	retfie
   774  00AF                     __end_of_Isr_Timer:	
   775  004E                     btemp	set	78	;btemp
   776  004E                     wtemp0	set	78
   777                           
   778                           	psect	intentry
   779  0004                     __pintentry:	
   780                           ;incstack = 0
   781                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
   782                           
   783  0004                     interrupt_function:	
   784  004E                     saved_w	set	btemp
   785  0004  00CE               	movwf	btemp
   786  0005  0E03               	swapf	3,w
   787  0006  00CA               	movwf	??_Isr_Timer
   788  0007  080A               	movf	10,w
   789  0008  00CB               	movwf	??_Isr_Timer+1
   790  0009  2890               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      2      13
    BANK0            32      1       4

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkIRKey

Critical Paths under _Isr_Timer in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                        _Init_System
                         _checkIRKey
                         _procesWork
 ---------------------------------------------------------------------------------
 (1) _procesWork                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkIRKey                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_System
   _checkIRKey
   _procesWork

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      2       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               20      1       4       3       12.5%
ABS                  0      0      11       4        0.0%
BITBANK0            20      0       0       5        0.0%
DATA                 0      0      11       6        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Sep 06 17:01:56 2020

                     PL2 008B                      l315 00CB                      l350 0087  
                    l980 0039                      l992 004F                      l996 0056  
                    l998 0058                     l1000 005A                     l1020 007B  
                   l1022 007D                     l1006 0062                     l1016 0073  
                   l1024 007F                     _T0IF 004A                     _TMR0 0001  
                   _WPUB 000D                     _main 00C9                     btemp 004E  
                   start 000A            ??_Init_System 0023                    ?_main 004A  
                  i1l362 00A8                    i1l359 00A2                    i1l852 009C  
                  i1l856 00A3                    _PORTB 0005                    _TRISB 0006  
       _revLeftZeroCount 0045           __pbitbssCOMMON 0260                    pclath 000A  
                  status 0003                    wtemp0 004E          __initialization 000B  
           __end_of_main 00D2                   ??_main 0024      __end_of_Init_System 00BF  
                 _PDCONB 000B                   _INTCON 0009                   _OSCCON 0008  
     __size_of_Isr_Timer 001F                   saved_w 004E  __end_of__initialization 0019  
         __pcstackCOMMON 004A        _revRightZeroCount 0022              _Init_System 00AF  
             __end_ofPL2 0090        __end_of_Isr_Timer 00AF               _checkIRKey 001B  
             _checkCount 0021               __pbssBANK0 0020               __pmaintext 00C9  
             __pintentry 0004               _irLeftStep 0049                  __ptext0 0000  
                __ptext1 00BF                  __ptext2 001B                  __ptext3 00AF  
                __ptext4 0090              ?_checkIRKey 004A                  _pwmTime 0043  
   end_of_initialization 0019               _procesWork 00BF      __size_of_checkIRKey 0070  
           ?_Init_System 004A      start_initialization 000B            _revRightCount 0046  
              _Isr_Timer 0090              ?_procesWork 004A              __pbssCOMMON 0040  
              ___latbits 0000            __pcstackBANK0 0023               ?_Isr_Timer 004A  
           ??_checkIRKey 0023        interrupt_function 0004      __size_of_procesWork 000A  
     __end_of_checkIRKey 008B              _irRightStep 0048             _revLeftCount 0047  
   __size_of_Init_System 0010            _waitTimeCount 0040              ??_Isr_Timer 004A  
               _MainTime 0042            __size_of_main 0009                 _lowDealy 0044  
               _workStep 0020             ??_procesWork 0023                 intlevel1 0000  
     __end_of_procesWork 00C9               _B_MainLoop 0260               _OPTION_REG 0007  
