

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat Sep 05 21:24:19 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1152A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	pa_nodes0,global,class=CODE,delta=2
    18                           	dabs	1,0x4E,2
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	text0
    56  0000                     __ptext0:	
    57  000D                     _WPUB	set	13
    58  0009                     _INTCON	set	9
    59  0008                     _OSCCON	set	8
    60  0007                     _OPTION_REG	set	7
    61  0006                     _TRISB	set	6
    62  0005                     _PORTB	set	5
    63  0001                     _TMR0	set	1
    64  004A                     _T0IF	set	74
    65                           
    66                           	psect	cinit
    67  000B                     start_initialization:	
    68                           ; #config settings
    69                           
    70  000B                     __initialization:	
    71                           
    72                           ; Clear objects allocated to BITCOMMON
    73  000B  01CC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
    74                           
    75                           ; Clear objects allocated to COMMON
    76  000C  01C0               	clrf	__pbssCOMMON& (0+127)
    77  000D  01C1               	clrf	(__pbssCOMMON+1)& (0+127)
    78  000E  01C2               	clrf	(__pbssCOMMON+2)& (0+127)
    79  000F  01C3               	clrf	(__pbssCOMMON+3)& (0+127)
    80  0010  01C4               	clrf	(__pbssCOMMON+4)& (0+127)
    81  0011  01C5               	clrf	(__pbssCOMMON+5)& (0+127)
    82  0012  01C6               	clrf	(__pbssCOMMON+6)& (0+127)
    83  0013  01C7               	clrf	(__pbssCOMMON+7)& (0+127)
    84  0014  01C8               	clrf	(__pbssCOMMON+8)& (0+127)
    85  0015  01C9               	clrf	(__pbssCOMMON+9)& (0+127)
    86                           
    87                           ; Clear objects allocated to BANK0
    88  0016  01A0               	clrf	__pbssBANK0& (0+127)
    89  0017  01A1               	clrf	(__pbssBANK0+1)& (0+127)
    90  0018  01A2               	clrf	(__pbssBANK0+2)& (0+127)
    91  0019                     end_of_initialization:	
    92                           ;End of C runtime variable initialization code
    93                           
    94  0019                     __end_of__initialization:	
    95  0019  0183               	clrf	3
    96  001A  28DA               	ljmp	_main	;jump to C main() function
    97                           
    98                           	psect	bitbssCOMMON
    99  0260                     __pbitbssCOMMON:	
   100  0260                     _B_MainLoop:	
   101  0260                     	ds	1
   102                           
   103                           	psect	bssCOMMON
   104  0040                     __pbssCOMMON:	
   105  0040                     _waitTimeCount:	
   106  0040                     	ds	2
   107  0042                     _MainTime:	
   108  0042                     	ds	1
   109  0043                     _pwmTime:	
   110  0043                     	ds	1
   111  0044                     _lowDealy:	
   112  0044                     	ds	1
   113  0045                     _revLeftZeroCount:	
   114  0045                     	ds	1
   115  0046                     _revRightCount:	
   116  0046                     	ds	1
   117  0047                     _revLeftCount:	
   118  0047                     	ds	1
   119  0048                     _irRightStep:	
   120  0048                     	ds	1
   121  0049                     _irLeftStep:	
   122  0049                     	ds	1
   123                           
   124                           	psect	bssBANK0
   125  0020                     __pbssBANK0:	
   126  0020                     _workStep:	
   127  0020                     	ds	1
   128  0021                     _checkCount:	
   129  0021                     	ds	1
   130  0022                     _revRightZeroCount:	
   131  0022                     	ds	1
   132                           
   133                           	psect	cstackCOMMON
   134  004A                     __pcstackCOMMON:	
   135  004A                     ?_Init_System:	
   136  004A                     ?_checkIRKey:	
   137                           ; 1 bytes @ 0x0
   138                           
   139  004A                     ?_procesWork:	
   140                           ; 1 bytes @ 0x0
   141                           
   142  004A                     ?_main:	
   143                           ; 1 bytes @ 0x0
   144                           
   145  004A                     ?_Isr_Timer:	
   146                           ; 1 bytes @ 0x0
   147                           
   148  004A                     ??_Isr_Timer:	
   149                           ; 1 bytes @ 0x0
   150                           
   151                           
   152                           ; 1 bytes @ 0x0
   153  004A                     	ds	2
   154                           
   155                           	psect	cstackBANK0
   156  0023                     __pcstackBANK0:	
   157  0023                     ??_Init_System:	
   158  0023                     ??_checkIRKey:	
   159                           ; 1 bytes @ 0x0
   160                           
   161  0023                     ??_procesWork:	
   162                           ; 1 bytes @ 0x0
   163                           
   164                           
   165                           ; 1 bytes @ 0x0
   166  0023                     	ds	1
   167  0024                     ??_main:	
   168                           
   169                           	psect	maintext
   170  00DA                     __pmaintext:	
   171                           ; 1 bytes @ 0x1
   172 ;;
   173 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   174 ;;
   175 ;; *************** function _main *****************
   176 ;; Defined at:
   177 ;;		line 28 in file "C:\mcuproject\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   178 ;; Parameters:    Size  Location     Type
   179 ;;		None
   180 ;; Auto vars:     Size  Location     Type
   181 ;;		None
   182 ;; Return value:  Size  Location     Type
   183 ;;                  1    wreg      void 
   184 ;; Registers used:
   185 ;;		wreg, status,2, status,0, pclath, cstack
   186 ;; Tracked objects:
   187 ;;		On entry : B00/0
   188 ;;		On exit  : 0/0
   189 ;;		Unchanged: 0/0
   190 ;; Data sizes:     COMMON   BANK0
   191 ;;      Params:         0       0
   192 ;;      Locals:         0       0
   193 ;;      Temps:          0       0
   194 ;;      Totals:         0       0
   195 ;;Total ram usage:        0 bytes
   196 ;; Hardware stack levels required when called:    2
   197 ;; This function calls:
   198 ;;		_Init_System
   199 ;;		_checkIRKey
   200 ;;		_procesWork
   201 ;; This function is called by:
   202 ;;		Startup code after reset
   203 ;; This function uses a non-reentrant model
   204 ;;
   205                           
   206                           
   207                           ;psect for function _main
   208  00DA                     _main:	
   209                           
   210                           ;main.c: 30: PORTB = 0x00;
   211                           
   212                           ;incstack = 0
   213                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   214  00DA  0185               	clrf	5	;volatile
   215                           
   216                           ;main.c: 31: Init_System();
   217  00DB  20CB               	fcall	_Init_System
   218  00DC                     l315:	
   219                           ;main.c: 32: while(1)
   220                           
   221  00DC  0064               	clrwdt	;# 
   222                           
   223                           ;main.c: 35: if(B_MainLoop)
   224  00DD  1C4C               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   225  00DE  28DC               	goto	l315
   226                           
   227                           ;main.c: 36: {
   228                           ;main.c: 37: B_MainLoop = 0;
   229  00DF  104C               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   230                           
   231                           ;main.c: 38: checkIRKey();
   232  00E0  201B               	fcall	_checkIRKey
   233                           
   234                           ;main.c: 39: procesWork();
   235  00E1  20B4               	fcall	_procesWork
   236  00E2  28DC               	goto	l315
   237  00E3                     __end_of_main:	
   238                           
   239                           	psect	text1
   240  00B4                     __ptext1:	
   241 ;; *************** function _procesWork *****************
   242 ;; Defined at:
   243 ;;		line 44 in file "C:\mcuproject\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   244 ;; Parameters:    Size  Location     Type
   245 ;;		None
   246 ;; Auto vars:     Size  Location     Type
   247 ;;		None
   248 ;; Return value:  Size  Location     Type
   249 ;;                  1    wreg      void 
   250 ;; Registers used:
   251 ;;		wreg, status,2, status,0
   252 ;; Tracked objects:
   253 ;;		On entry : 0/0
   254 ;;		On exit  : 0/0
   255 ;;		Unchanged: 0/0
   256 ;; Data sizes:     COMMON   BANK0
   257 ;;      Params:         0       0
   258 ;;      Locals:         0       0
   259 ;;      Temps:          0       1
   260 ;;      Totals:         0       1
   261 ;;Total ram usage:        1 bytes
   262 ;; Hardware stack levels used:    1
   263 ;; Hardware stack levels required when called:    1
   264 ;; This function calls:
   265 ;;		Nothing
   266 ;; This function is called by:
   267 ;;		_main
   268 ;; This function uses a non-reentrant model
   269 ;;
   270                           
   271                           
   272                           ;psect for function _procesWork
   273  00B4                     _procesWork:	
   274                           
   275                           ;main.c: 46: if(lowDealy > 0)
   276                           
   277                           ;incstack = 0
   278                           ; Regs used in _procesWork: [wreg+status,2+status,0]
   279  00B4  0844               	movf	_lowDealy,w
   280  00B5  1903               	btfsc	3,2
   281  00B6  0008               	return
   282                           
   283                           ;main.c: 47: {
   284                           ;main.c: 48: if(--lowDealy == 0)
   285  00B7  0BC4               	decfsz	_lowDealy,f
   286  00B8  28BC               	goto	l1033
   287                           
   288                           ;main.c: 49: {
   289                           ;main.c: 50: PORTB |= 0x07;
   290  00B9  3007               	movlw	7
   291  00BA  0485               	iorwf	5,f	;volatile
   292                           
   293                           ;main.c: 51: workStep = 0;
   294  00BB  01A0               	clrf	_workStep
   295  00BC                     l1033:	
   296                           
   297                           ;main.c: 52: }
   298                           ;main.c: 53: PORTB &= (~(0x01<<(workStep-1)));
   299  00BC  3001               	movlw	1
   300  00BD  00A3               	movwf	??_procesWork
   301  00BE  0820               	movf	_workStep,w
   302  00BF  3EFF               	addlw	-1
   303  00C0  3E01               	addlw	1
   304  00C1  28C4               	goto	u634
   305  00C2                     u635:	
   306  00C2  1003               	clrc
   307  00C3  0DA3               	rlf	??_procesWork,f
   308  00C4                     u634:	
   309  00C4  3EFF               	addlw	-1
   310  00C5  1D03               	skipz
   311  00C6  28C2               	goto	u635
   312  00C7  0823               	movf	??_procesWork,w
   313  00C8  3AFF               	xorlw	255
   314  00C9  0585               	andwf	5,f	;volatile
   315  00CA  0008               	return
   316  00CB                     __end_of_procesWork:	
   317                           
   318                           	psect	text2
   319  001B                     __ptext2:	
   320 ;; *************** function _checkIRKey *****************
   321 ;; Defined at:
   322 ;;		line 77 in file "C:\mcuproject\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   323 ;; Parameters:    Size  Location     Type
   324 ;;		None
   325 ;; Auto vars:     Size  Location     Type
   326 ;;		None
   327 ;; Return value:  Size  Location     Type
   328 ;;                  1    wreg      void 
   329 ;; Registers used:
   330 ;;		wreg, status,2, status,0
   331 ;; Tracked objects:
   332 ;;		On entry : 0/0
   333 ;;		On exit  : 0/0
   334 ;;		Unchanged: 0/0
   335 ;; Data sizes:     COMMON   BANK0
   336 ;;      Params:         0       0
   337 ;;      Locals:         0       0
   338 ;;      Temps:          0       1
   339 ;;      Totals:         0       1
   340 ;;Total ram usage:        1 bytes
   341 ;; Hardware stack levels used:    1
   342 ;; Hardware stack levels required when called:    1
   343 ;; This function calls:
   344 ;;		Nothing
   345 ;; This function is called by:
   346 ;;		_main
   347 ;; This function uses a non-reentrant model
   348 ;;
   349                           
   350                           
   351                           ;psect for function _checkIRKey
   352  001B                     _checkIRKey:	
   353                           
   354                           ;main.c: 79: if(((PORTB) >> (4)&1))
   355                           
   356                           ;incstack = 0
   357                           ; Regs used in _checkIRKey: [wreg+status,2+status,0]
   358  001B  0805               	movf	5,w	;volatile
   359  001C  00A3               	movwf	??_checkIRKey
   360  001D  3004               	movlw	4
   361  001E                     u455:	
   362  001E  1003               	clrc
   363  001F  0CA3               	rrf	??_checkIRKey,f
   364  0020  3EFF               	addlw	-1
   365  0021  1D03               	skipz
   366  0022  281E               	goto	u455
   367  0023  1823               	btfsc	??_checkIRKey,0
   368                           
   369                           ;main.c: 80: {
   370                           ;main.c: 81: revLeftCount++;
   371  0024  0AC7               	incf	_revLeftCount,f
   372                           
   373                           ;main.c: 82: }
   374                           ;main.c: 84: if(((PORTB) >> (3)&1))
   375  0025  0805               	movf	5,w	;volatile
   376  0026  00A3               	movwf	??_checkIRKey
   377  0027  1003               	clrc
   378  0028  0CA3               	rrf	??_checkIRKey,f
   379  0029  1003               	clrc
   380  002A  0CA3               	rrf	??_checkIRKey,f
   381  002B  1003               	clrc
   382  002C  0CA3               	rrf	??_checkIRKey,f
   383  002D  1823               	btfsc	??_checkIRKey,0
   384                           
   385                           ;main.c: 85: {
   386                           ;main.c: 86: revRightCount++;
   387  002E  0AC6               	incf	_revRightCount,f
   388                           
   389                           ;main.c: 87: }
   390                           ;main.c: 89: if(waitTimeCount > 0)
   391  002F  0840               	movf	_waitTimeCount,w
   392  0030  0441               	iorwf	_waitTimeCount+1,w
   393  0031  1903               	btfsc	3,2
   394  0032  283F               	goto	l975
   395                           
   396                           ;main.c: 90: {
   397                           ;main.c: 91: waitTimeCount++;
   398  0033  0AC0               	incf	_waitTimeCount,f
   399  0034  1903               	skipnz
   400  0035  0AC1               	incf	_waitTimeCount+1,f
   401                           
   402                           ;main.c: 92: if(waitTimeCount > 20000)
   403  0036  304E               	movlw	78
   404  0037  0241               	subwf	_waitTimeCount+1,w
   405  0038  3021               	movlw	33
   406  0039  1903               	skipnz
   407  003A  0240               	subwf	_waitTimeCount,w
   408  003B  1C03               	skipc
   409  003C  283F               	goto	l975
   410                           
   411                           ;main.c: 93: {
   412                           ;main.c: 94: waitTimeCount = 0;
   413  003D  01C0               	clrf	_waitTimeCount
   414  003E  01C1               	clrf	_waitTimeCount+1
   415  003F                     l975:	
   416                           
   417                           ;main.c: 95: }
   418                           ;main.c: 96: }
   419                           ;main.c: 97: if(++checkCount >= 20)
   420  003F  3014               	movlw	20
   421  0040  0AA1               	incf	_checkCount,f
   422  0041  0221               	subwf	_checkCount,w
   423  0042  1C03               	skipc
   424  0043  0008               	return
   425                           
   426                           ;main.c: 98: {
   427                           ;main.c: 99: if(revLeftCount > 2)
   428  0044  3003               	movlw	3
   429  0045  0247               	subwf	_revLeftCount,w
   430  0046  1C03               	skipc
   431  0047  2862               	goto	l995
   432                           
   433                           ;main.c: 100: {
   434                           ;main.c: 101: if(irLeftStep == 0)
   435  0048  0849               	movf	_irLeftStep,w	;volatile
   436  0049  1D03               	btfss	3,2
   437  004A  2860               	goto	l993
   438                           
   439                           ;main.c: 102: {
   440                           ;main.c: 103: irLeftStep = 1;
   441  004B  3001               	movlw	1
   442  004C  00C9               	movwf	_irLeftStep	;volatile
   443                           
   444                           ;main.c: 104: if(waitTimeCount == 0)
   445  004D  0840               	movf	_waitTimeCount,w
   446  004E  0441               	iorwf	_waitTimeCount+1,w
   447  004F  1D03               	btfss	3,2
   448  0050  2855               	goto	l987
   449                           
   450                           ;main.c: 105: {
   451                           ;main.c: 106: waitTimeCount = 1;
   452  0051  01C0               	clrf	_waitTimeCount
   453  0052  0AC0               	incf	_waitTimeCount,f
   454  0053  01C1               	clrf	_waitTimeCount+1
   455                           
   456                           ;main.c: 107: }
   457  0054  2860               	goto	l993
   458  0055                     l987:	
   459                           
   460                           ;main.c: 108: else
   461                           ;main.c: 109: {
   462                           ;main.c: 110: if(waitTimeCount > 30)
   463  0055  3000               	movlw	0
   464  0056  0241               	subwf	_waitTimeCount+1,w
   465  0057  301F               	movlw	31
   466  0058  1903               	skipnz
   467  0059  0240               	subwf	_waitTimeCount,w
   468  005A  1C03               	skipc
   469  005B  285E               	goto	l991
   470                           
   471                           ;main.c: 111: {
   472                           ;main.c: 112: workStep = 2;
   473  005C  3002               	movlw	2
   474  005D  285F               	goto	L1
   475  005E                     l991:	
   476                           ;main.c: 113: }
   477                           
   478                           
   479                           ;main.c: 114: else
   480                           ;main.c: 115: {
   481                           ;main.c: 116: workStep = 3;
   482  005E  3003               	movlw	3
   483  005F                     L1:	
   484  005F  00A0               	movwf	_workStep
   485  0060                     l993:	
   486                           
   487                           ;main.c: 117: }
   488                           ;main.c: 118: }
   489                           ;main.c: 119: }
   490                           ;main.c: 120: revLeftZeroCount = 0;
   491  0060  01C5               	clrf	_revLeftZeroCount
   492                           
   493                           ;main.c: 121: }
   494  0061  286A               	goto	l1001
   495  0062                     l995:	
   496                           
   497                           ;main.c: 122: else
   498                           ;main.c: 123: {
   499                           ;main.c: 124: if(++revLeftZeroCount > 1)
   500  0062  3002               	movlw	2
   501  0063  0AC5               	incf	_revLeftZeroCount,f
   502  0064  0245               	subwf	_revLeftZeroCount,w
   503  0065  1C03               	skipc
   504  0066  286A               	goto	l1001
   505                           
   506                           ;main.c: 125: {
   507                           ;main.c: 126: revLeftZeroCount = 1;
   508  0067  01C5               	clrf	_revLeftZeroCount
   509  0068  0AC5               	incf	_revLeftZeroCount,f
   510                           
   511                           ;main.c: 127: irLeftStep = 0;
   512  0069  01C9               	clrf	_irLeftStep	;volatile
   513  006A                     l1001:	
   514                           
   515                           ;main.c: 128: }
   516                           ;main.c: 129: }
   517                           ;main.c: 131: if(revRightCount > 2)
   518  006A  3003               	movlw	3
   519  006B  0246               	subwf	_revRightCount,w
   520  006C  1C03               	skipc
   521  006D  2889               	goto	l1019
   522                           
   523                           ;main.c: 132: {
   524                           ;main.c: 133: if(irRightStep == 0)
   525  006E  0848               	movf	_irRightStep,w	;volatile
   526  006F  1D03               	btfss	3,2
   527  0070  2887               	goto	l1017
   528                           
   529                           ;main.c: 134: {
   530                           ;main.c: 135: irRightStep = 1;
   531  0071  3001               	movlw	1
   532  0072  00C8               	movwf	_irRightStep	;volatile
   533                           
   534                           ;main.c: 136: if(waitTimeCount == 0)
   535  0073  0840               	movf	_waitTimeCount,w
   536  0074  0441               	iorwf	_waitTimeCount+1,w
   537  0075  1D03               	btfss	3,2
   538  0076  287B               	goto	l1011
   539                           
   540                           ;main.c: 137: {
   541                           ;main.c: 138: waitTimeCount = 1;
   542  0077  01C0               	clrf	_waitTimeCount
   543  0078  0AC0               	incf	_waitTimeCount,f
   544  0079  01C1               	clrf	_waitTimeCount+1
   545                           
   546                           ;main.c: 139: }
   547  007A  2887               	goto	l1017
   548  007B                     l1011:	
   549                           
   550                           ;main.c: 140: else
   551                           ;main.c: 141: {
   552                           ;main.c: 142: if(waitTimeCount > 30)
   553  007B  3000               	movlw	0
   554  007C  0241               	subwf	_waitTimeCount+1,w
   555  007D  301F               	movlw	31
   556  007E  1903               	skipnz
   557  007F  0240               	subwf	_waitTimeCount,w
   558  0080  1C03               	skipc
   559  0081  2885               	goto	l1015
   560                           
   561                           ;main.c: 143: {
   562                           ;main.c: 144: workStep = 1;
   563  0082  01A0               	clrf	_workStep
   564  0083  0AA0               	incf	_workStep,f
   565                           
   566                           ;main.c: 145: }
   567  0084  2887               	goto	l1017
   568  0085                     l1015:	
   569                           
   570                           ;main.c: 146: else
   571                           ;main.c: 147: {
   572                           ;main.c: 148: workStep = 3;
   573  0085  3003               	movlw	3
   574  0086  00A0               	movwf	_workStep
   575  0087                     l1017:	
   576                           
   577                           ;main.c: 149: }
   578                           ;main.c: 150: }
   579                           ;main.c: 152: }
   580                           ;main.c: 153: revRightZeroCount = 0;
   581  0087  01A2               	clrf	_revRightZeroCount
   582                           
   583                           ;main.c: 154: }
   584  0088  2891               	goto	l349
   585  0089                     l1019:	
   586                           
   587                           ;main.c: 155: else
   588                           ;main.c: 156: {
   589                           ;main.c: 157: if(++revRightZeroCount > 1)
   590  0089  3002               	movlw	2
   591  008A  0AA2               	incf	_revRightZeroCount,f
   592  008B  0222               	subwf	_revRightZeroCount,w
   593  008C  1C03               	skipc
   594  008D  2891               	goto	l349
   595                           
   596                           ;main.c: 158: {
   597                           ;main.c: 159: revRightZeroCount = 1;
   598  008E  01A2               	clrf	_revRightZeroCount
   599  008F  0AA2               	incf	_revRightZeroCount,f
   600                           
   601                           ;main.c: 160: irRightStep = 0;
   602  0090  01C8               	clrf	_irRightStep	;volatile
   603  0091                     l349:	
   604                           
   605                           ;main.c: 161: }
   606                           ;main.c: 162: }
   607                           ;main.c: 166: checkCount = 0;
   608  0091  01A1               	clrf	_checkCount
   609                           
   610                           ;main.c: 167: revLeftCount = 0;
   611  0092  01C7               	clrf	_revLeftCount
   612                           
   613                           ;main.c: 168: revRightCount = 0;
   614  0093  01C6               	clrf	_revRightCount
   615  0094  0008               	return
   616  0095                     __end_of_checkIRKey:	
   617                           
   618                           	psect	text3
   619  00CB                     __ptext3:	
   620 ;; *************** function _Init_System *****************
   621 ;; Defined at:
   622 ;;		line 59 in file "C:\mcuproject\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;		None
   625 ;; Auto vars:     Size  Location     Type
   626 ;;		None
   627 ;; Return value:  Size  Location     Type
   628 ;;                  1    wreg      void 
   629 ;; Registers used:
   630 ;;		wreg, status,2
   631 ;; Tracked objects:
   632 ;;		On entry : B00/0
   633 ;;		On exit  : 0/0
   634 ;;		Unchanged: 0/0
   635 ;; Data sizes:     COMMON   BANK0
   636 ;;      Params:         0       0
   637 ;;      Locals:         0       0
   638 ;;      Temps:          0       0
   639 ;;      Totals:         0       0
   640 ;;Total ram usage:        0 bytes
   641 ;; Hardware stack levels used:    1
   642 ;; Hardware stack levels required when called:    1
   643 ;; This function calls:
   644 ;;		Nothing
   645 ;; This function is called by:
   646 ;;		_main
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           
   651                           ;psect for function _Init_System
   652  00CB                     _Init_System:	
   653                           
   654                           ;incstack = 0
   655                           ; Regs used in _Init_System: [wreg+status,2]
   656  00CB  0000               	nop	;# 
   657  00CC  0064               	clrwdt	;# 
   658                           
   659                           ;main.c: 63: INTCON = 0;
   660  00CD  0189               	clrf	9	;volatile
   661                           
   662                           ;main.c: 64: OSCCON = 0X71;
   663  00CE  3071               	movlw	113
   664  00CF  0088               	movwf	8	;volatile
   665                           
   666                           ;main.c: 65: OPTION_REG = 0;
   667  00D0  0187               	clrf	7	;volatile
   668                           
   669                           ;main.c: 69: WPUB = 0x00;
   670  00D1  018D               	clrf	13	;volatile
   671                           
   672                           ;main.c: 70: TMR0 = 5;
   673  00D2  3005               	movlw	5
   674  00D3  0081               	movwf	1	;volatile
   675                           
   676                           ;main.c: 71: TRISB = 0x18;
   677  00D4  3018               	movlw	24
   678  00D5  0086               	movwf	6	;volatile
   679                           
   680                           ;main.c: 72: PORTB = 0x00;
   681  00D6  0185               	clrf	5	;volatile
   682                           
   683                           ;main.c: 73: INTCON = 0XC0;
   684  00D7  30C0               	movlw	192
   685  00D8  0089               	movwf	9	;volatile
   686  00D9  0008               	return
   687  00DA                     __end_of_Init_System:	
   688                           
   689                           	psect	text4
   690  0095                     __ptext4:	
   691 ;; *************** function _Isr_Timer *****************
   692 ;; Defined at:
   693 ;;		line 176 in file "C:\mcuproject\scm\ðÐðÄÖ¸»Ó°ô\main.c"
   694 ;; Parameters:    Size  Location     Type
   695 ;;		None
   696 ;; Auto vars:     Size  Location     Type
   697 ;;		None
   698 ;; Return value:  Size  Location     Type
   699 ;;                  1    wreg      void 
   700 ;; Registers used:
   701 ;;		wreg, status,2, status,0
   702 ;; Tracked objects:
   703 ;;		On entry : 0/0
   704 ;;		On exit  : 0/0
   705 ;;		Unchanged: 0/0
   706 ;; Data sizes:     COMMON   BANK0
   707 ;;      Params:         0       0
   708 ;;      Locals:         0       0
   709 ;;      Temps:          2       0
   710 ;;      Totals:         2       0
   711 ;;Total ram usage:        2 bytes
   712 ;; Hardware stack levels used:    1
   713 ;; This function calls:
   714 ;;		Nothing
   715 ;; This function is called by:
   716 ;;		Interrupt level 1
   717 ;; This function uses a non-reentrant model
   718 ;;
   719                           
   720                           
   721                           ;psect for function _Isr_Timer
   722  0095                     _Isr_Timer:	
   723                           
   724                           ;main.c: 178: if(T0IF)
   725  0095  1D09               	btfss	9,2	;volatile
   726  0096  28AD               	goto	i1l361
   727                           
   728                           ;main.c: 179: {
   729                           ;main.c: 180: T0IF = 0;
   730  0097  1109               	bcf	9,2	;volatile
   731                           
   732                           ;main.c: 181: TMR0 += 5;
   733  0098  3005               	movlw	5
   734  0099  0781               	addwf	1,f	;volatile
   735                           
   736                           ;main.c: 182: if(++MainTime >= 32)
   737  009A  3020               	movlw	32
   738  009B  0AC2               	incf	_MainTime,f	;volatile
   739  009C  0242               	subwf	_MainTime,w	;volatile
   740  009D  1C03               	skipc
   741  009E  28A1               	goto	i1l849
   742                           
   743                           ;main.c: 183: {
   744                           ;main.c: 184: MainTime = 0;
   745  009F  01C2               	clrf	_MainTime	;volatile
   746                           
   747                           ;main.c: 185: B_MainLoop = 1;
   748  00A0  144C               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   749  00A1                     i1l849:	
   750                           
   751                           ;main.c: 186: }
   752                           ;main.c: 188: if(pwmTime < 12)
   753  00A1  300C               	movlw	12
   754  00A2  0243               	subwf	_pwmTime,w	;volatile
   755  00A3  1803               	skipnc
   756  00A4  28A7               	goto	i1l358
   757                           
   758                           ;main.c: 189: PORTB &= 0xDF;
   759  00A5  1285               	bcf	5,5	;volatile
   760  00A6  28A8               	goto	i1l853
   761  00A7                     i1l358:	
   762                           
   763                           ;main.c: 190: else
   764                           ;main.c: 191: PORTB |= 0x20;
   765  00A7  1685               	bsf	5,5	;volatile
   766  00A8                     i1l853:	
   767                           
   768                           ;main.c: 192: if(++pwmTime >= 44)
   769  00A8  302C               	movlw	44
   770  00A9  0AC3               	incf	_pwmTime,f	;volatile
   771  00AA  0243               	subwf	_pwmTime,w	;volatile
   772  00AB  1803               	btfsc	3,0
   773                           
   774                           ;main.c: 193: {
   775                           ;main.c: 194: pwmTime = 0;
   776  00AC  01C3               	clrf	_pwmTime	;volatile
   777  00AD                     i1l361:	
   778  00AD  084B               	movf	??_Isr_Timer+1,w
   779  00AE  008A               	movwf	10
   780  00AF  0E4A               	swapf	??_Isr_Timer^(0+-128),w
   781  00B0  0083               	movwf	3
   782  00B1  0ECE               	swapf	78,f
   783  00B2  0E4E               	swapf	78,w
   784  00B3  0009               	retfie
   785  00B4                     __end_of_Isr_Timer:	
   786  004E                     btemp	set	78	;btemp
   787  004E                     wtemp0	set	78
   788                           
   789                           	psect	intentry
   790  0004                     __pintentry:	
   791                           ;incstack = 0
   792                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
   793                           
   794  0004                     interrupt_function:	
   795  004E                     saved_w	set	btemp
   796  0004  00CE               	movwf	btemp
   797  0005  0E03               	swapf	3,w
   798  0006  00CA               	movwf	??_Isr_Timer
   799  0007  080A               	movf	10,w
   800  0008  00CB               	movwf	??_Isr_Timer+1
   801  0009  2895               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      2      13
    BANK0            32      1       4

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkIRKey
    _main->_procesWork

Critical Paths under _Isr_Timer in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                        _Init_System
                         _checkIRKey
                         _procesWork
 ---------------------------------------------------------------------------------
 (1) _procesWork                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _checkIRKey                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_System
   _checkIRKey
   _procesWork

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      2       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               20      1       4       3       12.5%
ABS                  0      0      11       4        0.0%
BITBANK0            20      0       0       5        0.0%
DATA                 0      0      11       6        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Sep 05 21:24:19 2020

                    l315 00DC                      l349 0091                      l991 005E  
                    l975 003F                      l993 0060                      l987 0055  
                    l995 0062                      u455 001E                      u634 00C4  
                    u635 00C2                     l1001 006A                     l1011 007B  
                   l1015 0085                     l1017 0087                     l1033 00BC  
                   l1019 0089                     _T0IF 004A                     _TMR0 0001  
                   _WPUB 000D                     _main 00DA                     btemp 004E  
                   start 000A            ??_Init_System 0023                    ?_main 004A  
                  i1l361 00AD                    i1l358 00A7                    i1l853 00A8  
                  i1l849 00A1                    _PORTB 0005                    _TRISB 0006  
       _revLeftZeroCount 0045           __pbitbssCOMMON 0260                    pclath 000A  
                  status 0003                    wtemp0 004E          __initialization 000B  
           __end_of_main 00E3                   ??_main 0024      __end_of_Init_System 00DA  
                 _INTCON 0009                   _OSCCON 0008       __size_of_Isr_Timer 001F  
                 saved_w 004E  __end_of__initialization 0019           __pcstackCOMMON 004A  
      _revRightZeroCount 0022              _Init_System 00CB        __end_of_Isr_Timer 00B4  
             _checkIRKey 001B               _checkCount 0021               __pbssBANK0 0020  
             __pmaintext 00DA               __pintentry 0004               _irLeftStep 0049  
                __ptext0 0000                  __ptext1 00B4                  __ptext2 001B  
                __ptext3 00CB                  __ptext4 0095              ?_checkIRKey 004A  
                _pwmTime 0043     end_of_initialization 0019               _procesWork 00B4  
    __size_of_checkIRKey 007A             ?_Init_System 004A      start_initialization 000B  
          _revRightCount 0046                _Isr_Timer 0095              ?_procesWork 004A  
            __pbssCOMMON 0040                ___latbits 0000            __pcstackBANK0 0023  
             ?_Isr_Timer 004A             ??_checkIRKey 0023        interrupt_function 0004  
    __size_of_procesWork 0017       __end_of_checkIRKey 0095              _irRightStep 0048  
           _revLeftCount 0047     __size_of_Init_System 000F            _waitTimeCount 0040  
            ??_Isr_Timer 004A                 _MainTime 0042            __size_of_main 0009  
               _lowDealy 0044                 _workStep 0020             ??_procesWork 0023  
               intlevel1 0000       __end_of_procesWork 00CB               _B_MainLoop 0260  
             _OPTION_REG 0007  
