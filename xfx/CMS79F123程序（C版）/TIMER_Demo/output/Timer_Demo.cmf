%CMF
# %PSECTS Section
# For each object file, details of its psects are enumerated here.
# The begining of the section is indicated by %PSECTS.  The first
# line indicates the name of the first object file, e.g.
#    $foo.obj
# Each line that follows describes a psect in that object file, until
# the next object file.  The lines that describe a psect have the
# format:
#    <psect name> <class name> <space> <link address> <load addresses> <length> <delta>
# All addresses and the length are given in unqualified hexadecimal
# in delta units.  Any other numeric values are decimal.
%PSECTS
$Timer_Demo.obj
cinit CODE 0 D D 3 2
text1 CODE 0 23 23 10 2
maintext CODE 0 10 10 13 2
cstackCOMMON COMMON 1 70 70 2 1
intentry CODE 0 4 4 7 2
$startup.obj
reset_vec CODE 0 0 0 2 2
end_init CODE 0 B B 2 2
# %UNUSED Section
# This section enumerates the unused ranges of each CLASS. Each entry
# is described on a single line as follows:
#    <class name> <range> <delta>
# Addresses given in the range are in hexadecimal and units of delta.
%UNUSED
RAM 20-6F 1
RAM A0-EF 1
RAM 120-16F 1
RAM 198-1EF 1
BANK0 20-6F 1
BANK1 A0-EF 1
BANK2 120-16F 1
BANK3 198-1EF 1
CONST 2-3 2
CONST 33-FFF 2
ENTRY 2-3 2
ENTRY 33-FFF 2
IDLOC 2000-2003 2
STACK 198-1EF 1
CODE 2-3 2
CODE 33-FFF 2
SFR0 0-1F 1
SFR1 80-9F 1
SFR2 100-11F 1
SFR3 180-197 1
COMMON 72-7D 1
CONFIG 2007-2008 2
STRCODE 2-3 2
STRCODE 33-FFF 2
STRING 2-3 2
STRING 33-FFF 2
# %LINETAB Section
# This section enumerates the file/line to address mappings.
# The beginning of the section is indicated by %LINETAB.
# The first line indicates the name of the first object file, e.g.
#   $foo.obj
# Each line that follows describes a single mapping until the next
# object file.  Mappings have the following format:
#    <address> <psect name> <class name> ><line number>:<file name>
# The address is absolute and given given in unqualified hex 
# in delta units of the psect. All mappings within an object file
# are in ascending order of addresses.
# All other numeric values are in decimal.
%LINETAB
$Timer_Demo.obj
D cinit CODE >51:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\output\Timer_Demo.as
D cinit CODE >54:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\output\Timer_Demo.as
D cinit CODE >60:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\output\Timer_Demo.as
D cinit CODE >62:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\output\Timer_Demo.as
E cinit CODE >63:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\output\Timer_Demo.as
4 intentry CODE >43:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
23 text1 CODE >43:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
23 text1 CODE >45:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
25 text1 CODE >48:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
29 text1 CODE >51:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
2A text1 CODE >53:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
2C text1 CODE >55:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
10 maintext CODE >14:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
10 maintext CODE >16:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
11 maintext CODE >17:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
12 maintext CODE >19:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
16 maintext CODE >22:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
18 maintext CODE >23:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
1B maintext CODE >24:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
1D maintext CODE >27:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
1F maintext CODE >28:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
21 maintext CODE >30:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
21 maintext CODE >32:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\Timer0_Demo.c
$startup.obj
B end_init CODE >79:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\output\startup.as
B init CODE >76:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\output\startup.as
0 functab ENTRY >42:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\output\startup.as
0 functab ENTRY >43:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\output\startup.as
0 functab ENTRY >44:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\output\startup.as
0 functab ENTRY >45:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\output\startup.as
0 functab ENTRY >46:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\output\startup.as
0 functab ENTRY >47:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\output\startup.as
0 reset_vec CODE >66:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\output\startup.as
0 reset_vec CODE >71:E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\TIMER\output\startup.as
# %SYMTAB Section
# An enumeration of all symbols in the program.
# The beginning of the section is indicated by %SYMTAB.
# Each line describes a single symbol as follows:
#    <label> <value> [-]<load-adj> <class> <space> <psect> <file-name>
# The value and load-adj are both in unqualified hexadecimal.
# All other numeric values are in decimal.  The load-adj is the
# quantity one needs to add to the symbol value in order to obtain the load
# address of the symbol.  This value may be signed. If the symbol
# was defined in a psect then <psect> will be "-". File-name
# is the name of the object file in which the symbol was defined.
%SYMTAB
___latbits 1 0 ABS 0 - Timer_Demo.obj
__Hspace_0 33 0 ABS 0 - -
__Hspace_1 72 0 ABS 0 - -
__Hspace_2 0 0 ABS 0 - -
__Hspace_3 0 0 ABS 0 - -
__Heeprom_data 0 0 EEDATA 3 eeprom_data -
__Hstrings 0 0 ABS 0 strings -
_T0IF 5A 0 ABS 0 - Timer_Demo.obj
_TMR0 1 0 ABS 0 - Timer_Demo.obj
___sp 0 0 STACK 2 stack startup.obj
_main 20 0 CODE 0 maintext Timer_Demo.obj
btemp 7E 0 ABS 0 - Timer_Demo.obj
start 16 0 CODE 0 init startup.obj
__size_of_main 0 0 ABS 0 - Timer_Demo.obj
__Hpowerup 0 0 CODE 0 powerup -
intlevel0 0 0 ENTRY 0 functab startup.obj
intlevel1 0 0 ENTRY 0 functab startup.obj
intlevel2 0 0 ENTRY 0 functab startup.obj
intlevel3 0 0 ENTRY 0 functab startup.obj
intlevel4 0 0 ENTRY 0 functab startup.obj
intlevel5 0 0 ENTRY 0 functab startup.obj
wtemp0 7E 0 ABS 0 - Timer_Demo.obj
__Hfunctab 0 0 ENTRY 0 functab -
__Hclrtext 0 0 ABS 0 clrtext -
__Hpa_nodes0 0 0 ABS 0 pa_nodes0 -
__Lmaintext 0 0 ABS 0 maintext -
_INTCON B 0 ABS 0 - Timer_Demo.obj
_OPTION_REG 81 0 ABS 0 - Timer_Demo.obj
__Lpa_nodes0 0 0 ABS 0 pa_nodes0 -
start_initialization 1A 0 CODE 0 cinit Timer_Demo.obj
_OSCCON 8F 0 ABS 0 - Timer_Demo.obj
___int_sp 0 0 STACK 2 stack startup.obj
__Hbank0 0 0 ABS 0 bank0 -
__Hbank1 0 0 ABS 0 bank1 -
__Hbank2 0 0 ABS 0 bank2 -
__Hbank3 0 0 ABS 0 bank3 -
__Hcinit 20 0 CODE 0 cinit -
__Hidloc 0 0 IDLOC 0 idloc -
__Hstack 0 0 STACK 2 stack -
__Hmaintext 0 0 ABS 0 maintext -
__Hcommon 0 0 ABS 0 common -
__Hconfig 0 0 CONFIG 0 config -
__Lbank0 0 0 ABS 0 bank0 -
__Lbank1 0 0 ABS 0 bank1 -
__Lbank2 0 0 ABS 0 bank2 -
__Lbank3 0 0 ABS 0 bank3 -
__Lcinit 1A 0 CODE 0 cinit -
__Lidloc 0 0 IDLOC 0 idloc -
__Lstack 0 0 STACK 2 stack -
__Habs1 0 0 ABS 0 abs1 -
__Hcode 0 0 ABS 0 code -
__Hinit 16 0 CODE 0 init -
__Hsfr0 0 0 ABS 0 sfr0 -
__Hsfr1 0 0 ABS 0 sfr1 -
__Hsfr2 0 0 ABS 0 sfr2 -
__Hsfr3 0 0 ABS 0 sfr3 -
__Htext 0 0 ABS 0 text -
__Labs1 0 0 ABS 0 abs1 -
__Lcode 0 0 ABS 0 code -
__Linit 16 0 CODE 0 init -
__Lsfr0 0 0 ABS 0 sfr0 -
__Lsfr1 0 0 ABS 0 sfr1 -
__Lsfr2 0 0 ABS 0 sfr2 -
__Lsfr3 0 0 ABS 0 sfr3 -
__Ltext 0 0 ABS 0 text -
__HcstackCOMMON 0 0 ABS 0 cstackCOMMON -
__S0 33 0 ABS 0 - -
__S1 72 0 ABS 0 - -
__S2 0 0 ABS 0 - -
saved_w 7E 0 ABS 0 - Timer_Demo.obj
_Timer0_Isr 46 0 CODE 0 text1 Timer_Demo.obj
__Lintentry 8 0 CODE 0 intentry -
reset_vec 0 0 CODE 0 reset_vec startup.obj
__pmaintext 20 0 CODE 0 maintext Timer_Demo.obj
__Lcommon 0 0 ABS 0 common -
__Lconfig 0 0 CONFIG 0 config -
__end_of_Timer0_Isr 66 0 CODE 0 text1 Timer_Demo.obj
stackhi 0 0 ABS 0 - startup.obj
stacklo 0 0 ABS 0 - startup.obj
__Lspace_0 0 0 ABS 0 - -
__Lspace_1 0 0 ABS 0 - -
__Lspace_2 0 0 ABS 0 - -
__Lspace_3 0 0 ABS 0 - -
__Lend_init 16 0 CODE 0 end_init -
__LcstackCOMMON 0 0 ABS 0 cstackCOMMON -
end_of_initialization 1A 0 CODE 0 cinit Timer_Demo.obj
__Hintentry 16 0 CODE 0 intentry -
__Lstrings 0 0 ABS 0 strings -
__Hreset_vec 4 0 CODE 0 reset_vec -
__ptext0 0 0 CODE 0 text0 Timer_Demo.obj
__ptext1 46 0 CODE 0 text1 Timer_Demo.obj
__Lpowerup 0 0 CODE 0 powerup -
__Leeprom_data 0 0 EEDATA 3 eeprom_data -
__Lreset_vec 0 0 CODE 0 reset_vec -
__end_of__initialization 1A 0 CODE 0 cinit Timer_Demo.obj
__Lfunctab 0 0 ENTRY 0 functab -
__Lclrtext 0 0 ABS 0 clrtext -
__pcstackCOMMON 70 0 COMMON 1 cstackCOMMON Timer_Demo.obj
__Hend_init 1A 0 CODE 0 end_init -
__end_of_main 46 0 CODE 0 maintext Timer_Demo.obj
_PORTB 6 0 ABS 0 - Timer_Demo.obj
_TRISB 86 0 ABS 0 - Timer_Demo.obj
__Hram 0 0 ABS 0 ram -
__Lram 0 0 ABS 0 ram -
interrupt_function 8 0 CODE 0 intentry Timer_Demo.obj
__pintentry 8 0 CODE 0 intentry Timer_Demo.obj
__initialization 1A 0 CODE 0 cinit Timer_Demo.obj
__size_of_Timer0_Isr 0 0 ABS 0 - Timer_Demo.obj
# %SPLITSTAB Section
# This section enumerates all the psect splits performed by the assembler.
# The beginning of the section is indicated by %SPLITSTAB.
# Each line is a record a particular split, where the parent psect is on
# the left and the child on the right.  Note that a child psect is always
# split form the top of the parent psect. All splits from a given parent
# are listed in the order in which they occurred.
%SPLITSTAB
# %DABS Section
# This section contains a table of all usuage of the assember
# directive DABS in the program. Each line has the following format:
#   <name> <space> <address> <size>
# If the DABS was originally labelled then that shall be <name>,
# otherwise name will be "-".  The <space> number is in decimal.
# <address> and <size> are in byte units as unqaulified hexadecimal
%DABS
- 1 7E 2
# %SEGMENTS Section
# This sections enumerates the segments of the program.  Each segment
# is described on a single line as follows:
#    <name> <space> <link address> <file address> <size> <delta>
# Addresses and size are in unqualified hexadecimal.  The link address
# and size are in units of delta. The file address is in units of bytes.
# All other numeric quantities are in decimal.
%SEGMENTS
cstackCOMMON 1 70 70 2 1
intentry 0 4 8 2F 2
reset_vec 0 0 0 2 2
