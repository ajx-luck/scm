---- E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\Sleep_Demo\Sleep_Demo.c ----------------------------------------------------------------------
1:                /*-------------------------------------------
2:                程序名称：休眠模式及唤醒程序演示
3:                版本：V1.0
4:                日期：2020.06.20 
5:                
6:                备注：
7:                1、WDT已在CONFIG中禁止，休眠模式下利用PORTA电平变化唤醒
8:                2、休眠时，如果作输入口且外部输入电平不为0.9*VDD以上或0.1VDD以下，会有一定的电流产生，且越接近0.5*VDD电流越大。
9:                
10:               *本程序由 中微半导体 &应用支持部& 编写整理
11:               *公司网址 www.mcu.com.cn
12:               *技术支持QQ 3001082102  罗工
13:                           3001030138	莫工
14:               -------------------------------------------*/
15:               
16:               
17:               #include <cms.h>
18:               
19:               
20:               void Init_System();
21:               void Sleep_Mode();
22:               
23:               void main()
24:               {
25:               	Init_System();
  005B    118A    CLRB	0xA,3
  005C    203B    CALL	0x3B
  005D    118A    CLRB	0xA,3
26:               	while(1)
  005E    0064    CLRWDT
27:               	{
28:               		asm("clrwdt");
29:               		
30:               		Sleep_Mode();
  005F    118A    CLRB	0xA,3
  0060    2010    CALL	0x10
  0061    118A    CLRB	0xA,3
  0062    285E    JP	0x5E
31:               	}
32:               }
33:               
34:               
35:               /***********************************************
36:               函数名称：Sleep_Mode
37:               函数功能：进入休眠模式
38:               入口参数：无
39:               出口参数：无
40:               备注：
41:               ************************************************/
42:               void Sleep_Mode()
43:               {
44:               	INTCON = 0;		
  0010    018B    CLR	0xB
45:               	
46:               	OPTION_REG = 0;
  0011    1683    SETB	0x3,5
  0012    1303    CLRB	0x3,6
  0013    0181    CLR	0x1
47:               		 
48:               	TRISA = 0B00000001; 		//关闭所有输出
  0014    3001    LDIA	0x1
  0015    0085    LD	0x5,A
49:               	PORTA = 0B00000000;
  0016    1283    CLRB	0x3,5
  0017    0185    CLR	0x5
50:               	WPUA  = 0B00000001;
  0018    1683    SETB	0x3,5
  0019    1703    SETB	0x3,6
  001A    008E    LD	0xE,A
51:               	
52:               	TRISB = 0B00000000;	
  001B    1303    CLRB	0x3,6
  001C    0186    CLR	0x6
53:               	PORTB = 0B00000000;
  001D    1283    CLRB	0x3,5
  001E    0186    CLR	0x6
54:               	WPUB  = 0B00000000;	
  001F    1683    SETB	0x3,5
  0020    0195    CLR	0x15
55:                  			
56:               	
57:               
58:               	IOCA = 0B00000001;			//允许RA0的IO口电平变化中断
  0021    0087    LD	0x7,A
59:               	RAIF = 0;					//清PORTA电平变化中断标志位	
  0022    1283    CLRB	0x3,5
  0023    138C    CLRB	0xC,7
60:               	RAIE = 1;					//允许PORTA电平变化中断
  0024    1683    SETB	0x3,5
  0025    178C    SETB	0xC,7
61:               	PEIE = 1;				    //允许外设中断
  0026    170B    SETB	0xB,6
62:               	GIE = 1;					//
  0027    178B    SETB	0xB,7
63:               	ADCON0 = 0;					//关闭所有模块,减少电流消耗
  0028    1283    CLRB	0x3,5
  0029    019F    CLR	0x1F
64:               	EECON1 = 0;					
  002A    1683    SETB	0x3,5
  002B    1703    SETB	0x3,6
  002C    018C    CLR	0xC
65:               	WDTCON = 0;					//关闭看门狗
  002D    1283    CLRB	0x3,5
  002E    0185    CLR	0x5
66:               	
67:               	PORTA;						//读PORTA值并锁存,必须添加			
  002F    1303    CLRB	0x3,6
  0030    0805    LD	A,0x5
  0031    0064    CLRWDT
  0032    0063    STOP
  0033    0000    NOP
  0034    0000    NOP
  0035    0064    CLRWDT
68:               	asm("clrwdt");
69:               	asm("sleep");				//进入休眠模式,在C中写STOP有可能不编译
70:               	
71:               	asm("nop");					//必须加入该指令
72:               	asm("nop");					//必须加入该指令	
73:               	asm("clrwdt");				//休眠唤醒后必须清看门狗
74:               	
75:               	WDTCON = 0x01;				//重新开启看门狗
  0036    3001    LDIA	0x1
  0037    1283    CLRB	0x3,5
  0038    1703    SETB	0x3,6
  0039    0085    LD	0x5,A
76:               	Init_System();				//唤醒产生中断后返回此处
  003A    283B    JP	0x3B
77:               }
78:               
79:               /***********************************************
80:               函数名称：Init_System
81:               函数功能：系统初始化
82:               入口参数：无
83:               出口参数：无
84:               备注：
85:               ************************************************/
86:               void Init_System()
  003B    0000    NOP
  003C    0064    CLRWDT
87:               {
88:               	asm("nop");
89:               	asm("clrwdt");
90:               	INTCON = 0;					//系统初始化
  003D    018B    CLR	0xB
91:               	OSCCON = 0X71;				//配置振荡为8M
  003E    3071    LDIA	0x71
  003F    1683    SETB	0x3,5
  0040    1303    CLRB	0x3,6
  0041    008F    LD	0xF,A
92:               	OPTION_REG = 0;
  0042    0181    CLR	0x1
93:               	
94:                   WPUA  = 0B00000001;			//初始化上拉
  0043    3001    LDIA	0x1
  0044    1703    SETB	0x3,6
  0045    008E    LD	0xE,A
95:                   WPUB  = 0B00000000;								
  0046    1303    CLRB	0x3,6
  0047    0195    CLR	0x15
96:                
97:               	TRISA = 0B00000001;			//初始化IO状态
  0048    0085    LD	0x5,A
98:               	TRISB = 0B00000000;
  0049    0186    CLR	0x6
99:                
100:              	PORTA = 0B00000000;
  004A    1283    CLRB	0x3,5
  004B    0185    CLR	0x5
101:              	PORTB = 0B00000000;			//初始化输出
  004C    0186    CLR	0x6
  004D    0008    RET
102:              }
103:              
104:              /***********************************************
105:              函数名称：PA_Isr
106:              函数功能：PA电平变化中断服务
107:              入口参数：无
108:              出口参数：无
109:              备注：
110:              ************************************************/
111:              void interrupt PA_Isr()
112:              {
113:              	if(RAIF)
  004E    1283    CLRB	0x3,5
  004F    1303    CLRB	0x3,6
  0050    1F8C    SNZB	0xC,7
  0051    2854    JP	0x54
114:              	{
115:              		PORTA;				//读取PORTA状态
  0052    0805    LD	A,0x5
116:              		RAIF = 0;			//清中断标志
  0053    138C    CLRB	0xC,7
  0054    0871    LD	A,0x71
  0055    008A    LD	0xA,A
  0056    0E70    SWAPA	0x70
  0057    0083    LD	0x3,A
  0058    0EFE    SWAPR	0x7E
  0059    0E7E    SWAPA	0x7E
  005A    0009    RETI
117:              		
118:              	}
119:              }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280B    JP	0xB
  000B    118A    CLRB	0xA,3
  000C    280D    JP	0xD
---- start_initialization ------------------------------------------------------------------
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F0    LD	0x70,A
  0007    080A    LD	A,0xA
  0008    00F1    LD	0x71,A
  0009    118A    CLRB	0xA,3
  000A    284E    JP	0x4E
---- common_function ------------------------------------------------------------------
  000D    0183    CLR	0x3
  000E    118A    CLRB	0xA,3
  000F    285B    JP	0x5B
