

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Aug 15 09:54:58 2023

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	79F5135
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	psect	pa_nodes0,global,class=CODE,delta=2
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 1.45
    16                           ; Generated 16/11/2017 GMT
    17                           ; 
    18                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F887 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     
    50                           	psect	text0
    51  0000                     __ptext0:	
    52  001A                     _RCREG	set	26
    53  0019                     _TXREG	set	25
    54  000D                     _PIR2	set	13
    55  000C                     _PIR1	set	12
    56  000B                     _INTCON	set	11
    57  0005                     _PORTA	set	5
    58  00C1                     _OERR	set	193
    59  00C4                     _CREN	set	196
    60  00C6                     _RX9EN	set	198
    61  00C7                     _SPEN	set	199
    62  0065                     _RCIF	set	101
    63  0099                     _SPBRG	set	153
    64  008F                     _OSCCON	set	143
    65  008D                     _PIE2	set	141
    66  008C                     _PIE1	set	140
    67  0085                     _TRISA	set	133
    68  04C1                     _TRMT	set	1217
    69  04C3                     _SCKP	set	1219
    70  04C4                     _SYNC	set	1220
    71  04C5                     _TXEN	set	1221
    72  04C6                     _TX9EN	set	1222
    73  0464                     _TXIE	set	1124
    74  0465                     _RCIE	set	1125
    75                           
    76                           	psect	cinit
    77  000F                     start_initialization:	
    78                           ; #config settings
    79                           
    80  000F                     __initialization:	
    81                           
    82                           ; Clear objects allocated to COMMON
    83  000F  01F0               	clrf	__pbssCOMMON& (0+127)
    84  0010  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
    85  0011  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
    86  0012  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
    87  0013  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
    88  0014  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
    89  0015  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
    90  0016  01F7               	clrf	(__pbssCOMMON+7)& (0+127)
    91  0017  01F8               	clrf	(__pbssCOMMON+8)& (0+127)
    92  0018  01F9               	clrf	(__pbssCOMMON+9)& (0+127)
    93  0019                     end_of_initialization:	
    94                           ;End of C runtime variable initialization code
    95                           
    96  0019                     __end_of__initialization:	
    97  0019  0183               	clrf	3
    98  001A  118A  281C         	ljmp	_main	;jump to C main() function
    99                           
   100                           	psect	bssCOMMON
   101  0070                     __pbssCOMMON:	
   102  0070                     _Sendbuffer:	
   103  0070                     	ds	4
   104  0074                     _Recebuffer:	
   105  0074                     	ds	4
   106  0078                     _rececount:	
   107  0078                     	ds	1
   108  0079                     _sendcount:	
   109  0079                     	ds	1
   110                           
   111                           	psect	cstackCOMMON
   112  007A                     __pcstackCOMMON:	
   113  007A                     ?_Set_Usart_Async:	
   114  007A                     ?_main:	
   115                           ; 1 bytes @ 0x0
   116                           
   117  007A                     ?_Usart_Isr:	
   118                           ; 1 bytes @ 0x0
   119                           
   120  007A                     ??_Usart_Isr:	
   121                           ; 1 bytes @ 0x0
   122                           
   123                           
   124                           ; 1 bytes @ 0x0
   125  007A                     	ds	3
   126  007D                     ??_Set_Usart_Async:	
   127  007D                     ??_main:	
   128                           ; 1 bytes @ 0x3
   129                           
   130                           
   131                           	psect	maintext
   132  001C                     __pmaintext:	
   133                           ; 1 bytes @ 0x3
   134 ;;
   135 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   136 ;;
   137 ;; *************** function _main *****************
   138 ;; Defined at:
   139 ;;		line 35 in file "C:\mcuproject\scm\xfx\CMS79F123³ÌÐò£¨C°æ£©\Usart_Demo\Async_Usart_Demo.c"
   140 ;; Parameters:    Size  Location     Type
   141 ;;		None
   142 ;; Auto vars:     Size  Location     Type
   143 ;;		None
   144 ;; Return value:  Size  Location     Type
   145 ;;                  1    wreg      void 
   146 ;; Registers used:
   147 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   148 ;; Tracked objects:
   149 ;;		On entry : B00/0
   150 ;;		On exit  : 300/0
   151 ;;		Unchanged: 0/0
   152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   153 ;;      Params:         0       0       0       0       0
   154 ;;      Locals:         0       0       0       0       0
   155 ;;      Temps:          0       0       0       0       0
   156 ;;      Totals:         0       0       0       0       0
   157 ;;Total ram usage:        0 bytes
   158 ;; Hardware stack levels required when called:    2
   159 ;; This function calls:
   160 ;;		_Set_Usart_Async
   161 ;; This function is called by:
   162 ;;		Startup code after reset
   163 ;; This function uses a non-reentrant model
   164 ;;
   165                           
   166                           
   167                           ;psect for function _main
   168  001C                     _main:	
   169                           
   170                           ;incstack = 0
   171                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   172  001C  0000               	nop	;# 
   173  001D  0064               	clrwdt	;# 
   174                           
   175                           ;Async_Usart_Demo.c: 40: OSCCON = 0x71;
   176  001E  3071               	movlw	113
   177  001F  1683               	bsf	3,5	;RP0=1, select bank1
   178  0020  1303               	bcf	3,6	;RP1=0, select bank1
   179  0021  008F               	movwf	15	;volatile
   180                           
   181                           ;Async_Usart_Demo.c: 41: INTCON = 0;
   182  0022  018B               	clrf	11	;volatile
   183                           
   184                           ;Async_Usart_Demo.c: 43: PIR1 = 0;
   185  0023  1283               	bcf	3,5	;RP0=0, select bank0
   186  0024  018C               	clrf	12	;volatile
   187                           
   188                           ;Async_Usart_Demo.c: 44: PIE1 = 0;
   189  0025  1683               	bsf	3,5	;RP0=1, select bank1
   190  0026  018C               	clrf	12	;volatile
   191                           
   192                           ;Async_Usart_Demo.c: 45: PIR2 = 0;
   193  0027  1283               	bcf	3,5	;RP0=0, select bank0
   194  0028  018D               	clrf	13	;volatile
   195                           
   196                           ;Async_Usart_Demo.c: 46: PIE2 = 0;
   197  0029  1683               	bsf	3,5	;RP0=1, select bank1
   198  002A  018D               	clrf	13	;volatile
   199                           
   200                           ;Async_Usart_Demo.c: 48: TRISA = 0B00000000;
   201  002B  0185               	clrf	5	;volatile
   202                           
   203                           ;Async_Usart_Demo.c: 49: PORTA = 0B00000000;
   204  002C  1283               	bcf	3,5	;RP0=0, select bank0
   205  002D  0185               	clrf	5	;volatile
   206                           
   207                           ;Async_Usart_Demo.c: 52: Set_Usart_Async();
   208  002E  118A  2067  118A   	fcall	_Set_Usart_Async
   209                           
   210                           ;Async_Usart_Demo.c: 55: INTCON = 0XC0;
   211  0031  30C0               	movlw	192
   212  0032  008B               	movwf	11	;volatile
   213  0033                     l727:	
   214                           ;Async_Usart_Demo.c: 58: while(1)
   215                           
   216  0033  0064               	clrwdt	;# 
   217                           
   218                           ;Async_Usart_Demo.c: 62: PORTA = Recebuffer[0];
   219  0034  0874               	movf	_Recebuffer,w
   220  0035  1283               	bcf	3,5	;RP0=0, select bank0
   221  0036  1303               	bcf	3,6	;RP1=0, select bank0
   222  0037  0085               	movwf	5	;volatile
   223                           
   224                           ;Async_Usart_Demo.c: 68: if(TRMT)
   225  0038  1683               	bsf	3,5	;RP0=1, select bank1
   226  0039  1C98               	btfss	24,1	;volatile
   227  003A  2833               	goto	l727
   228                           
   229                           ;Async_Usart_Demo.c: 69: {
   230                           ;Async_Usart_Demo.c: 70: TXREG = Sendbuffer[sendcount];
   231  003B  0879               	movf	_sendcount,w
   232  003C  3E70               	addlw	(low (_Sendbuffer| 0))& (0+255)
   233  003D  0084               	movwf	4
   234  003E  0800               	movf	0,w
   235  003F  1283               	bcf	3,5	;RP0=0, select bank0
   236  0040  0099               	movwf	25	;volatile
   237                           
   238                           ;Async_Usart_Demo.c: 72: Sendbuffer[sendcount] ++;
   239  0041  0879               	movf	_sendcount,w
   240  0042  3E70               	addlw	(low (_Sendbuffer| 0))& (0+255)
   241  0043  0084               	movwf	4
   242  0044  3004               	movlw	4
   243  0045  0A80               	incf	0,f
   244                           
   245                           ;Async_Usart_Demo.c: 74: sendcount++;
   246  0046  0AF9               	incf	_sendcount,f
   247                           
   248                           ;Async_Usart_Demo.c: 75: if(sendcount >= 4)
   249  0047  0279               	subwf	_sendcount,w
   250  0048  1C03               	skipc
   251  0049  2833               	goto	l727
   252                           
   253                           ;Async_Usart_Demo.c: 76: {
   254                           ;Async_Usart_Demo.c: 77: sendcount = 0;
   255  004A  01F9               	clrf	_sendcount
   256  004B  2833               	goto	l727
   257  004C                     __end_of_main:	
   258                           
   259                           	psect	text1
   260  0067                     __ptext1:	
   261 ;; *************** function _Set_Usart_Async *****************
   262 ;; Defined at:
   263 ;;		line 125 in file "C:\mcuproject\scm\xfx\CMS79F123³ÌÐò£¨C°æ£©\Usart_Demo\Async_Usart_Demo.c"
   264 ;; Parameters:    Size  Location     Type
   265 ;;		None
   266 ;; Auto vars:     Size  Location     Type
   267 ;;		None
   268 ;; Return value:  Size  Location     Type
   269 ;;                  1    wreg      void 
   270 ;; Registers used:
   271 ;;		wreg
   272 ;; Tracked objects:
   273 ;;		On entry : 300/0
   274 ;;		On exit  : 300/100
   275 ;;		Unchanged: 0/0
   276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   277 ;;      Params:         0       0       0       0       0
   278 ;;      Locals:         0       0       0       0       0
   279 ;;      Temps:          0       0       0       0       0
   280 ;;      Totals:         0       0       0       0       0
   281 ;;Total ram usage:        0 bytes
   282 ;; Hardware stack levels used:    1
   283 ;; Hardware stack levels required when called:    1
   284 ;; This function calls:
   285 ;;		Nothing
   286 ;; This function is called by:
   287 ;;		_main
   288 ;; This function uses a non-reentrant model
   289 ;;
   290                           
   291                           
   292                           ;psect for function _Set_Usart_Async
   293  0067                     _Set_Usart_Async:	
   294                           
   295                           ;Async_Usart_Demo.c: 127: SPBRG = 95;
   296                           
   297                           ;incstack = 0
   298                           ; Regs used in _Set_Usart_Async: [wreg]
   299  0067  305F               	movlw	95
   300  0068  1683               	bsf	3,5	;RP0=1, select bank1
   301  0069  0099               	movwf	25	;volatile
   302                           
   303                           ;Async_Usart_Demo.c: 129: SYNC = 0;
   304  006A  1218               	bcf	24,4	;volatile
   305                           
   306                           ;Async_Usart_Demo.c: 130: SCKP = 0;
   307  006B  1198               	bcf	24,3	;volatile
   308                           
   309                           ;Async_Usart_Demo.c: 132: SPEN = 1;
   310  006C  1283               	bcf	3,5	;RP0=0, select bank0
   311  006D  1798               	bsf	24,7	;volatile
   312                           
   313                           ;Async_Usart_Demo.c: 133: RCIE = 1;
   314  006E  1683               	bsf	3,5	;RP0=1, select bank1
   315  006F  168C               	bsf	12,5	;volatile
   316                           
   317                           ;Async_Usart_Demo.c: 134: TXIE = 0;
   318  0070  120C               	bcf	12,4	;volatile
   319                           
   320                           ;Async_Usart_Demo.c: 135: RX9EN = 0;
   321  0071  1283               	bcf	3,5	;RP0=0, select bank0
   322  0072  1318               	bcf	24,6	;volatile
   323                           
   324                           ;Async_Usart_Demo.c: 136: TX9EN = 0;
   325  0073  1683               	bsf	3,5	;RP0=1, select bank1
   326  0074  1318               	bcf	24,6	;volatile
   327                           
   328                           ;Async_Usart_Demo.c: 137: CREN = 1;
   329  0075  1283               	bcf	3,5	;RP0=0, select bank0
   330  0076  1618               	bsf	24,4	;volatile
   331                           
   332                           ;Async_Usart_Demo.c: 138: TXEN = 1;
   333  0077  1683               	bsf	3,5	;RP0=1, select bank1
   334  0078  1698               	bsf	24,5	;volatile
   335  0079  0008               	return
   336  007A                     __end_of_Set_Usart_Async:	
   337                           
   338                           	psect	text2
   339  004C                     __ptext2:	
   340 ;; *************** function _Usart_Isr *****************
   341 ;; Defined at:
   342 ;;		line 87 in file "C:\mcuproject\scm\xfx\CMS79F123³ÌÐò£¨C°æ£©\Usart_Demo\Async_Usart_Demo.c"
   343 ;; Parameters:    Size  Location     Type
   344 ;;		None
   345 ;; Auto vars:     Size  Location     Type
   346 ;;		None
   347 ;; Return value:  Size  Location     Type
   348 ;;                  1    wreg      void 
   349 ;; Registers used:
   350 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   351 ;; Tracked objects:
   352 ;;		On entry : 0/0
   353 ;;		On exit  : 300/0
   354 ;;		Unchanged: 0/0
   355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   356 ;;      Params:         0       0       0       0       0
   357 ;;      Locals:         0       0       0       0       0
   358 ;;      Temps:          3       0       0       0       0
   359 ;;      Totals:         3       0       0       0       0
   360 ;;Total ram usage:        3 bytes
   361 ;; Hardware stack levels used:    1
   362 ;; This function calls:
   363 ;;		Nothing
   364 ;; This function is called by:
   365 ;;		Interrupt level 1
   366 ;; This function uses a non-reentrant model
   367 ;;
   368                           
   369                           
   370                           ;psect for function _Usart_Isr
   371  004C                     _Usart_Isr:	
   372                           
   373                           ;Async_Usart_Demo.c: 89: static unsigned char tcount = 0;
   374                           ;Async_Usart_Demo.c: 95: if(RCIF)
   375  004C  1283               	bcf	3,5	;RP0=0, select bank0
   376  004D  1303               	bcf	3,6	;RP1=0, select bank0
   377  004E  1E8C               	btfss	12,5	;volatile
   378  004F  285E               	goto	i1l742
   379                           
   380                           ;Async_Usart_Demo.c: 96: {
   381                           ;Async_Usart_Demo.c: 99: Recebuffer[rececount] = RCREG;
   382  0050  0878               	movf	_rececount,w
   383  0051  3E74               	addlw	(low (_Recebuffer| 0))& (0+255)
   384  0052  0084               	movwf	4
   385  0053  081A               	movf	26,w	;volatile
   386  0054  0080               	movwf	0
   387  0055  3004               	movlw	4
   388                           
   389                           ;Async_Usart_Demo.c: 100: rececount++;
   390  0056  0AF8               	incf	_rececount,f
   391                           
   392                           ;Async_Usart_Demo.c: 102: if(rececount >= 4)
   393  0057  0278               	subwf	_rececount,w
   394  0058  1803               	btfsc	3,0
   395                           
   396                           ;Async_Usart_Demo.c: 103: {
   397                           ;Async_Usart_Demo.c: 104: rececount = 0;
   398  0059  01F8               	clrf	_rececount
   399                           
   400                           ;Async_Usart_Demo.c: 105: }
   401                           ;Async_Usart_Demo.c: 107: if(OERR)
   402  005A  1C98               	btfss	24,1	;volatile
   403  005B  285E               	goto	i1l742
   404                           
   405                           ;Async_Usart_Demo.c: 108: {
   406                           ;Async_Usart_Demo.c: 109: CREN = 0;
   407  005C  1218               	bcf	24,4	;volatile
   408                           
   409                           ;Async_Usart_Demo.c: 110: CREN = 1;
   410  005D  1618               	bsf	24,4	;volatile
   411  005E                     i1l742:	
   412  005E  087C               	movf	??_Usart_Isr+2,w
   413  005F  008A               	movwf	10
   414  0060  087B               	movf	??_Usart_Isr+1,w
   415  0061  0084               	movwf	4
   416  0062  0E7A               	swapf	??_Usart_Isr^(0+-128),w
   417  0063  0083               	movwf	3
   418  0064  0EFE               	swapf	126,f
   419  0065  0E7E               	swapf	126,w
   420  0066  0009               	retfie
   421  0067                     __end_of_Usart_Isr:	
   422  007E                     btemp	set	126	;btemp
   423  007E                     wtemp0	set	126
   424                           
   425                           	psect	intentry
   426  0004                     __pintentry:	
   427                           ;incstack = 0
   428                           ; Regs used in _Usart_Isr: [wreg-fsr0h+status,2+status,0]
   429                           
   430  0004                     interrupt_function:	
   431  007E                     saved_w	set	btemp
   432  0004  00FE               	movwf	btemp
   433  0005  0E03               	swapf	3,w
   434  0006  00FA               	movwf	??_Usart_Isr
   435  0007  0804               	movf	4,w
   436  0008  00FB               	movwf	??_Usart_Isr+1
   437  0009  080A               	movf	10,w
   438  000A  00FC               	movwf	??_Usart_Isr+2
   439  000B  118A  284C         	ljmp	_Usart_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      3      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            88      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Usart_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Usart_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Usart_Isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Usart_Isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Usart_Isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                    _Set_Usart_Async
 ---------------------------------------------------------------------------------
 (1) _Set_Usart_Async                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Usart_Isr                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Set_Usart_Async

 _Usart_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      3       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            58      0       0       8        0.0%
BANK3               58      0       0       9        0.0%
BITBANK2            50      0       0      10        0.0%
BANK2               50      0       0      11        0.0%
DATA                 0      0       D      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Aug 15 09:54:58 2023

                     l727 0033                       fsr0 0004                       indf 0000  
                    _CREN 00C4                      _PIE1 008C                      _PIE2 008D  
                    _RCIE 0465                      _RCIF 0065                      _PIR1 000C  
                    _PIR2 000D                      _OERR 00C1                      _SCKP 04C3  
                    _SPEN 00C7                      _TRMT 04C1                      _TXIE 0464  
                    _TXEN 04C5                      _SYNC 04C4                      _main 001C  
                    btemp 007E                      start 000D                     ?_main 007A  
 __end_of_Set_Usart_Async 007A                     i1l742 005E                     _RCREG 001A  
                   _RX9EN 00C6                     _SPBRG 0099                     _PORTA 0005  
                   _TX9EN 04C6                     _TRISA 0085                     _TXREG 0019  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __initialization 000F              __end_of_main 004C                    ??_main 007D  
              _Recebuffer 0074                    _INTCON 000B                    _OSCCON 008F  
              _Sendbuffer 0070          ?_Set_Usart_Async 007A                    saved_w 007E  
      __size_of_Usart_Isr 001B   __end_of__initialization 0019            __pcstackCOMMON 007A  
              __pmaintext 001C                __pintentry 0004         __end_of_Usart_Isr 0067  
                 __ptext0 0000                   __ptext1 0067                   __ptext2 004C  
    end_of_initialization 0019       start_initialization 000F  __size_of_Set_Usart_Async 0013  
               _Usart_Isr 004C               __pbssCOMMON 0070                 ___latbits 0001  
              ?_Usart_Isr 007A                 _rececount 0078         interrupt_function 0004  
       ??_Set_Usart_Async 007D                 _sendcount 0079               ??_Usart_Isr 007A  
           __size_of_main 0030                  intlevel1 0000           _Set_Usart_Async 0067  
