

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jul 28 14:24:43 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	79F123
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	pa_nodes0,global,class=CODE,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 1.45
    15                           ; Generated 16/11/2017 GMT
    16                           ; 
    17                           ; Copyright 漏 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F887 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     
    49                           	psect	text0
    50  0000                     __ptext0:	
    51  001F                     _ADCON0	set	31
    52  001E                     _ADRESH	set	30
    53  00F9                     _GODONE	set	249
    54  009F                     _ADCON1	set	159
    55  009E                     _ADRESL	set	158
    56  0085                     _TRISA	set	133
    57  0188                     _ANSEL	set	392
    58                           
    59                           	psect	cinit
    60  07F2                     start_initialization:	
    61                           ; #config settings
    62                           
    63  07F2                     __initialization:	
    64                           
    65                           ; Clear objects allocated to COMMON
    66  07F2  01F8               	clrf	__pbssCOMMON& (0+127)
    67  07F3  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
    68  07F4  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
    69  07F5  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
    70  07F6  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
    71                           
    72                           ; Clear objects allocated to BANK0
    73  07F7  1283               	bcf	3,5	;RP0=0, select bank0
    74  07F8  1303               	bcf	3,6	;RP1=0, select bank0
    75  07F9  01A0               	clrf	__pbssBANK0& (0+127)
    76  07FA  01A1               	clrf	(__pbssBANK0+1)& (0+127)
    77  07FB  01A2               	clrf	(__pbssBANK0+2)& (0+127)
    78  07FC  01A3               	clrf	(__pbssBANK0+3)& (0+127)
    79  07FD                     end_of_initialization:	
    80                           ;End of C runtime variable initialization code
    81                           
    82  07FD                     __end_of__initialization:	
    83  07FD  0183               	clrf	3
    84  07FE  118A  2F40         	ljmp	_main	;jump to C main() function
    85                           
    86                           	psect	bssCOMMON
    87  0078                     __pbssCOMMON:	
    88  0078                     AD_Testing@admax:	
    89  0078                     	ds	2
    90  007A                     AD_Testing@admin:	
    91  007A                     	ds	2
    92  007C                     AD_Testing@adtimes:	
    93  007C                     	ds	1
    94                           
    95                           	psect	bssBANK0
    96  0020                     __pbssBANK0:	
    97  0020                     AD_Testing@adsum:	
    98  0020                     	ds	2
    99  0022                     _AD_Result:	
   100  0022                     	ds	2
   101                           
   102                           	psect	cstackCOMMON
   103  0070                     __pcstackCOMMON:	
   104  0070                     ?_AD_Testing:	
   105  0070                     ?_main:	
   106                           ; 1 bytes @ 0x0
   107                           
   108  0070                     AD_Testing@ad_ch:	
   109                           ; 1 bytes @ 0x0
   110                           
   111                           
   112                           ; 1 bytes @ 0x0
   113  0070                     	ds	1
   114  0071                     AD_Testing@ad_lr:	
   115                           
   116                           ; 1 bytes @ 0x1
   117  0071                     	ds	1
   118  0072                     ??_AD_Testing:	
   119                           
   120                           ; 1 bytes @ 0x2
   121  0072                     	ds	2
   122  0074                     AD_Testing@ad_fd:	
   123                           
   124                           ; 1 bytes @ 0x4
   125  0074                     	ds	1
   126  0075                     AD_Testing@i:	
   127                           
   128                           ; 1 bytes @ 0x5
   129  0075                     	ds	1
   130  0076                     AD_Testing@data:	
   131                           
   132                           ; 2 bytes @ 0x6
   133  0076                     	ds	2
   134  0078                     ??_main:	
   135                           
   136                           	psect	maintext
   137  0740                     __pmaintext:	
   138                           ; 1 bytes @ 0x8
   139 ;;
   140 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   141 ;;
   142 ;; *************** function _main *****************
   143 ;; Defined at:
   144 ;;		line 21 in file "E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\ADC\ADC.c"
   145 ;; Parameters:    Size  Location     Type
   146 ;;		None
   147 ;; Auto vars:     Size  Location     Type
   148 ;;		None
   149 ;; Return value:  Size  Location     Type
   150 ;;                  1    wreg      void 
   151 ;; Registers used:
   152 ;;		wreg, status,2, status,0, pclath, cstack
   153 ;; Tracked objects:
   154 ;;		On entry : B00/0
   155 ;;		On exit  : 0/0
   156 ;;		Unchanged: 0/0
   157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   158 ;;      Params:         0       0       0       0       0
   159 ;;      Locals:         0       0       0       0       0
   160 ;;      Temps:          0       0       0       0       0
   161 ;;      Totals:         0       0       0       0       0
   162 ;;Total ram usage:        0 bytes
   163 ;; Hardware stack levels required when called:    1
   164 ;; This function calls:
   165 ;;		_AD_Testing
   166 ;; This function is called by:
   167 ;;		Startup code after reset
   168 ;; This function uses a non-reentrant model
   169 ;;
   170                           
   171                           
   172                           ;psect for function _main
   173  0740                     _main:	
   174                           
   175                           ;incstack = 0
   176                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   177  0740  0000               	nop	;# 
   178  0741  0064               	clrwdt	;# 
   179                           
   180                           ;ADC.c: 26: TRISA = 0B00000010;
   181  0742  3002               	movlw	2
   182  0743  1683               	bsf	3,5	;RP0=1, select bank1
   183  0744  1303               	bcf	3,6	;RP1=0, select bank1
   184  0745  0085               	movwf	5	;volatile
   185                           
   186                           ;ADC.c: 27: ANSEL = 0B00000010;
   187  0746  1703               	bsf	3,6	;RP1=1, select bank3
   188  0747  0088               	movwf	8	;volatile
   189  0748                     l1256:	
   190  0748  3001               	movlw	1
   191                           
   192                           ;ADC.c: 31: {
   193                           ;ADC.c: 32: AD_Testing(1,1,1);
   194  0749  01F0               	clrf	AD_Testing@ad_ch
   195  074A  0AF0               	incf	AD_Testing@ad_ch,f
   196  074B  01F1               	clrf	AD_Testing@ad_lr
   197  074C  0AF1               	incf	AD_Testing@ad_lr,f
   198  074D  118A  2752  118A   	fcall	_AD_Testing
   199  0750  0064               	clrwdt	;# 
   200  0751  2F48               	goto	l1256
   201  0752                     __end_of_main:	
   202                           
   203                           	psect	text1
   204  0752                     __ptext1:	
   205 ;; *************** function _AD_Testing *****************
   206 ;; Defined at:
   207 ;;		line 47 in file "E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\ADC\ADC.c"
   208 ;; Parameters:    Size  Location     Type
   209 ;;  ad_fd           1    wreg     unsigned char 
   210 ;;  ad_ch           1    0[COMMON] unsigned char 
   211 ;;  ad_lr           1    1[COMMON] unsigned char 
   212 ;; Auto vars:     Size  Location     Type
   213 ;;  ad_fd           1    4[COMMON] unsigned char 
   214 ;;  data            2    6[COMMON] volatile unsigned int 
   215 ;;  i               1    5[COMMON] volatile unsigned char 
   216 ;; Return value:  Size  Location     Type
   217 ;;                  1    wreg      void 
   218 ;; Registers used:
   219 ;;		wreg, status,2, status,0
   220 ;; Tracked objects:
   221 ;;		On entry : 0/300
   222 ;;		On exit  : 0/0
   223 ;;		Unchanged: 0/0
   224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   225 ;;      Params:         2       0       0       0       0
   226 ;;      Locals:         4       0       0       0       0
   227 ;;      Temps:          2       0       0       0       0
   228 ;;      Totals:         8       0       0       0       0
   229 ;;Total ram usage:        8 bytes
   230 ;; Hardware stack levels used:    1
   231 ;; This function calls:
   232 ;;		Nothing
   233 ;; This function is called by:
   234 ;;		_main
   235 ;; This function uses a non-reentrant model
   236 ;;
   237                           
   238                           
   239                           ;psect for function _AD_Testing
   240  0752                     _AD_Testing:	
   241                           
   242                           ;incstack = 0
   243                           ; Regs used in _AD_Testing: [wreg+status,2+status,0]
   244                           ;AD_Testing@ad_fd stored from wreg
   245  0752  00F4               	movwf	AD_Testing@ad_fd
   246                           
   247                           ;ADC.c: 49: static volatile unsigned char adtimes;
   248                           ;ADC.c: 50: static volatile unsigned int admin,admax,adsum;
   249                           ;ADC.c: 51: volatile unsigned int data;
   250                           ;ADC.c: 53: volatile unsigned char i = 0;
   251  0753  01F5               	clrf	AD_Testing@i	;volatile
   252                           
   253                           ;ADC.c: 55: if(!ad_lr)
   254  0754  0871               	movf	AD_Testing@ad_lr,w
   255  0755  1D03               	btfss	3,2
   256  0756  2F5B               	goto	l1198
   257                           
   258                           ;ADC.c: 56: ADCON1 = 0;
   259  0757  1683               	bsf	3,5	;RP0=1, select bank1
   260  0758  1303               	bcf	3,6	;RP1=0, select bank1
   261  0759  019F               	clrf	31	;volatile
   262  075A  2F5F               	goto	l1200
   263  075B                     l1198:	
   264                           
   265                           ;ADC.c: 57: else
   266                           ;ADC.c: 58: ADCON1 = 0x80;
   267  075B  3080               	movlw	128
   268  075C  1683               	bsf	3,5	;RP0=1, select bank1
   269  075D  1303               	bcf	3,6	;RP1=0, select bank1
   270  075E  009F               	movwf	31	;volatile
   271  075F                     l1200:	
   272                           
   273                           ;ADC.c: 60: if(ad_ch & 0x10)
   274  075F  1A70               	btfsc	AD_Testing@ad_ch,4
   275                           
   276                           ;ADC.c: 61: ADCON1 |= 0x40;
   277  0760  171F               	bsf	31,6	;volatile
   278                           
   279                           ;ADC.c: 63: ADCON0 = 0;
   280  0761  1283               	bcf	3,5	;RP0=0, select bank0
   281  0762  019F               	clrf	31	;volatile
   282                           
   283                           ;ADC.c: 64: ad_ch &= 0x0f;
   284  0763  300F               	movlw	15
   285  0764  05F0               	andwf	AD_Testing@ad_ch,f
   286                           
   287                           ;ADC.c: 65: ADCON0 |= (unsigned char)(ad_fd << 6);
   288  0765  0874               	movf	AD_Testing@ad_fd,w
   289  0766  00F2               	movwf	??_AD_Testing
   290  0767  0CF2               	rrf	??_AD_Testing,f
   291  0768  0CF2               	rrf	??_AD_Testing,f
   292  0769  0C72               	rrf	??_AD_Testing,w
   293  076A  39C0               	andlw	192
   294  076B  049F               	iorwf	31,f	;volatile
   295                           
   296                           ;ADC.c: 66: ADCON0 |= (unsigned char)(ad_ch << 2);
   297  076C  0870               	movf	AD_Testing@ad_ch,w
   298  076D  00F2               	movwf	??_AD_Testing
   299  076E  3001               	movlw	1
   300  076F  1003               	clrc
   301  0770                     L1:	
   302  0770  0DF2               	rlf	??_AD_Testing,f
   303  0771  3EFF               	addlw	-1
   304  0772  1003               	clrc
   305  0773  1D03               	skipz
   306  0774  2F70               	goto	L1
   307  0775  0D72               	rlf	??_AD_Testing,w
   308  0776  049F               	iorwf	31,f	;volatile
   309                           
   310                           ;ADC.c: 67: ADCON0 |= 0x01;
   311  0777  141F               	bsf	31,0	;volatile
   312  0778  0000               	nop	;# 
   313  0779  0000               	nop	;# 
   314                           
   315                           ;ADC.c: 71: GODONE = 1;
   316  077A  1283               	bcf	3,5	;RP0=0, select bank0
   317  077B  1303               	bcf	3,6	;RP1=0, select bank0
   318  077C  149F               	bsf	31,1	;volatile
   319  077D                     l738:	
   320                           ;ADC.c: 73: while(GODONE)
   321                           
   322  077D  1283               	bcf	3,5	;RP0=0, select bank0
   323  077E  1303               	bcf	3,6	;RP1=0, select bank0
   324  077F  1C9F               	btfss	31,1	;volatile
   325  0780  2F86               	goto	l1218
   326  0781  0000               	nop	;# 
   327  0782  0000               	nop	;# 
   328                           
   329                           ;ADC.c: 77: if((--i) == 0)
   330  0783  0BF5               	decfsz	AD_Testing@i,f	;volatile
   331  0784  2F7D               	goto	l738
   332  0785  0008               	return
   333  0786                     l1218:	
   334                           
   335                           ;ADC.c: 79: }
   336                           ;ADC.c: 81: if(!ad_lr)
   337  0786  0871               	movf	AD_Testing@ad_lr,w
   338  0787  1D03               	btfss	3,2
   339  0788  2F99               	goto	l1224
   340                           
   341                           ;ADC.c: 82: {
   342                           ;ADC.c: 83: data = (unsigned int)(ADRESH<<4);
   343  0789  081E               	movf	30,w	;volatile
   344  078A  00F6               	movwf	AD_Testing@data	;volatile
   345  078B  01F7               	clrf	AD_Testing@data+1	;volatile
   346  078C  0EF6               	swapf	AD_Testing@data,f	;volatile
   347  078D  0EF7               	swapf	AD_Testing@data+1,f	;volatile
   348  078E  30F0               	movlw	240
   349  078F  05F7               	andwf	AD_Testing@data+1,f	;volatile
   350  0790  0876               	movf	AD_Testing@data,w	;volatile
   351  0791  390F               	andlw	15
   352  0792  04F7               	iorwf	AD_Testing@data+1,f	;volatile
   353  0793  30F0               	movlw	240
   354  0794  05F6               	andwf	AD_Testing@data,f	;volatile
   355                           
   356                           ;ADC.c: 84: data |= (unsigned int)(ADRESL>>4);
   357  0795  1683               	bsf	3,5	;RP0=1, select bank1
   358  0796  0E1E               	swapf	30,w	;volatile
   359  0797  390F               	andlw	15
   360  0798  2F9E               	goto	L2
   361  0799                     l1224:	
   362                           ;ADC.c: 85: }
   363                           
   364                           
   365                           ;ADC.c: 86: else
   366                           ;ADC.c: 87: {
   367                           ;ADC.c: 88: data = (unsigned int)(ADRESH<<8);
   368  0799  081E               	movf	30,w	;volatile
   369  079A  00F7               	movwf	AD_Testing@data+1	;volatile
   370  079B  01F6               	clrf	AD_Testing@data	;volatile
   371                           
   372                           ;ADC.c: 89: data |= (unsigned int)ADRESL;
   373  079C  1683               	bsf	3,5	;RP0=1, select bank1
   374  079D  081E               	movf	30,w	;volatile
   375  079E                     L2:	
   376  079E  04F6               	iorwf	AD_Testing@data,f	;volatile
   377                           
   378                           ;ADC.c: 90: }
   379                           ;ADC.c: 92: if(adtimes == 0)
   380  079F  087C               	movf	AD_Testing@adtimes,w	;volatile
   381  07A0  1D03               	btfss	3,2
   382  07A1  2FA5               	goto	l1230
   383                           
   384                           ;ADC.c: 93: {
   385                           ;ADC.c: 94: admax = data;
   386  07A2  27ED  118A         	fcall	PL2	;call to abstracted procedure
   387  07A4  2FB8               	goto	l1236
   388  07A5                     l1230:	
   389                           ;ADC.c: 96: }
   390                           
   391                           ;ADC.c: 95: admin = data;
   392                           
   393                           
   394                           ;ADC.c: 97: else if(data > admax)
   395  07A5  0877               	movf	AD_Testing@data+1,w	;volatile
   396  07A6  0279               	subwf	AD_Testing@admax+1,w	;volatile
   397  07A7  1D03               	skipz
   398  07A8  2FAB               	goto	u185
   399  07A9  0876               	movf	AD_Testing@data,w	;volatile
   400  07AA  0278               	subwf	AD_Testing@admax,w	;volatile
   401  07AB                     u185:	
   402  07AB  1803               	skipnc
   403  07AC  2FB0               	goto	l1234
   404                           
   405                           ;ADC.c: 98: {
   406                           ;ADC.c: 99: admax = data;
   407  07AD  27ED  118A         	fcall	PL2	;call to abstracted procedure
   408                           
   409                           ;ADC.c: 100: }
   410  07AF  2FBC               	goto	l746
   411  07B0                     l1234:	
   412                           
   413                           ;ADC.c: 101: else if(data < admin)
   414  07B0  087B               	movf	AD_Testing@admin+1,w	;volatile
   415  07B1  0277               	subwf	AD_Testing@data+1,w	;volatile
   416  07B2  1D03               	skipz
   417  07B3  2FB6               	goto	u195
   418  07B4  087A               	movf	AD_Testing@admin,w	;volatile
   419  07B5  0276               	subwf	AD_Testing@data,w	;volatile
   420  07B6                     u195:	
   421  07B6  1803               	skipnc
   422  07B7  2FBC               	goto	l746
   423  07B8                     l1236:	
   424                           
   425                           ;ADC.c: 102: {
   426                           ;ADC.c: 103: admin = data;
   427  07B8  0877               	movf	AD_Testing@data+1,w	;volatile
   428  07B9  00FB               	movwf	AD_Testing@admin+1	;volatile
   429  07BA  0876               	movf	AD_Testing@data,w	;volatile
   430  07BB  00FA               	movwf	AD_Testing@admin	;volatile
   431  07BC                     l746:	
   432                           
   433                           ;ADC.c: 104: }
   434                           ;ADC.c: 106: adsum += data;
   435  07BC  0876               	movf	AD_Testing@data,w	;volatile
   436  07BD  1283               	bcf	3,5	;RP0=0, select bank0
   437  07BE  07A0               	addwf	AD_Testing@adsum,f	;volatile
   438  07BF  1803               	skipnc
   439  07C0  0AA1               	incf	AD_Testing@adsum+1,f	;volatile
   440  07C1  0877               	movf	AD_Testing@data+1,w	;volatile
   441  07C2  07A1               	addwf	AD_Testing@adsum+1,f	;volatile
   442                           
   443                           ;ADC.c: 107: if(++adtimes >= 10)
   444  07C3  300A               	movlw	10
   445  07C4  0AFC               	incf	AD_Testing@adtimes,f	;volatile
   446  07C5  027C               	subwf	AD_Testing@adtimes,w	;volatile
   447  07C6  1C03               	skipc
   448  07C7  0008               	return
   449                           
   450                           ;ADC.c: 108: {
   451                           ;ADC.c: 109: adsum -= admax;
   452  07C8  0878               	movf	AD_Testing@admax,w	;volatile
   453  07C9  02A0               	subwf	AD_Testing@adsum,f	;volatile
   454  07CA  0879               	movf	AD_Testing@admax+1,w	;volatile
   455  07CB  1C03               	skipc
   456  07CC  03A1               	decf	AD_Testing@adsum+1,f	;volatile
   457  07CD  02A1               	subwf	AD_Testing@adsum+1,f	;volatile
   458                           
   459                           ;ADC.c: 110: adsum -= admin;
   460  07CE  087A               	movf	AD_Testing@admin,w	;volatile
   461  07CF  02A0               	subwf	AD_Testing@adsum,f	;volatile
   462  07D0  087B               	movf	AD_Testing@admin+1,w	;volatile
   463  07D1  1C03               	skipc
   464  07D2  03A1               	decf	AD_Testing@adsum+1,f	;volatile
   465  07D3  02A1               	subwf	AD_Testing@adsum+1,f	;volatile
   466                           
   467                           ;ADC.c: 112: AD_Result = adsum >> 3;
   468  07D4  0821               	movf	AD_Testing@adsum+1,w	;volatile
   469  07D5  00F3               	movwf	??_AD_Testing+1
   470  07D6  0820               	movf	AD_Testing@adsum,w	;volatile
   471  07D7  00F2               	movwf	??_AD_Testing
   472  07D8  1003               	clrc
   473  07D9  0CF3               	rrf	??_AD_Testing+1,f
   474  07DA  0CF2               	rrf	??_AD_Testing,f
   475  07DB  1003               	clrc
   476  07DC  0CF3               	rrf	??_AD_Testing+1,f
   477  07DD  0CF2               	rrf	??_AD_Testing,f
   478  07DE  1003               	clrc
   479  07DF  0CF3               	rrf	??_AD_Testing+1,f
   480  07E0  0CF2               	rrf	??_AD_Testing,f
   481  07E1  0872               	movf	??_AD_Testing,w
   482  07E2  00A2               	movwf	_AD_Result	;volatile
   483  07E3  0873               	movf	??_AD_Testing+1,w
   484  07E4  00A3               	movwf	_AD_Result+1	;volatile
   485                           
   486                           ;ADC.c: 114: adsum = 0;
   487  07E5  01A0               	clrf	AD_Testing@adsum	;volatile
   488  07E6  01A1               	clrf	AD_Testing@adsum+1	;volatile
   489                           
   490                           ;ADC.c: 115: admin = 0;
   491  07E7  01FA               	clrf	AD_Testing@admin	;volatile
   492  07E8  01FB               	clrf	AD_Testing@admin+1	;volatile
   493                           
   494                           ;ADC.c: 116: admax = 0;
   495  07E9  01F8               	clrf	AD_Testing@admax	;volatile
   496  07EA  01F9               	clrf	AD_Testing@admax+1	;volatile
   497                           
   498                           ;ADC.c: 117: adtimes = 0;
   499  07EB  01FC               	clrf	AD_Testing@adtimes	;volatile
   500  07EC  0008               	return
   501  07ED                     __end_of_AD_Testing:	
   502  007E                     btemp	set	126	;btemp
   503  007E                     wtemp0	set	126
   504  07ED                     PL2:	
   505  07ED  0877               	movf	AD_Testing@data+1,w	;volatile
   506  07EE  00F9               	movwf	AD_Testing@admax+1	;volatile
   507  07EF  0876               	movf	AD_Testing@data,w	;volatile
   508  07F0  00F8               	movwf	AD_Testing@admax	;volatile
   509  07F1  0008               	return
   510  07F2                     __end_ofPL2:	


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80      0       4
    BANK1            80      0       0
    BANK3            88      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_AD_Testing

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     379
                         _AD_Testing
 ---------------------------------------------------------------------------------
 (1) _AD_Testing                                           8     6      2     379
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Testing

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      11       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            58      0       0       8        0.0%
BANK3               58      0       0       9        0.0%
BITBANK2            50      0       0      10        0.0%
BANK2               50      0       0      11        0.0%
DATA                 0      0      11      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jul 28 14:24:43 2020

                     PL2 07ED                      l746 07BC                      l738 077D  
                    u185 07AB                      u195 07B6                     l1200 075F  
                   l1230 07A5                     l1224 0799                     l1234 07B0  
                   l1218 0786                     l1236 07B8                     l1256 0748  
                   l1198 075B                     _main 0740                     btemp 007E  
                   start 0000                    ?_main 0070      __size_of_AD_Testing 009B  
                  _ANSEL 0188                    _TRISA 0085                    status 0003  
                  wtemp0 007E          __initialization 07F2             __end_of_main 0752  
                 ??_main 0078                   _ADCON0 001F                   _ADCON1 009F  
                 _ADRESH 001E                   _ADRESL 009E                   _GODONE 00F9  
           ??_AD_Testing 0072  __end_of__initialization 07FD           __pcstackCOMMON 0070  
             __end_ofPL2 07F2       __end_of_AD_Testing 07ED               __pbssBANK0 0020  
             __pmaintext 0740          AD_Testing@ad_ch 0070          AD_Testing@ad_fd 0074  
        AD_Testing@ad_lr 0071          AD_Testing@admax 0078          AD_Testing@admin 007A  
        AD_Testing@adsum 0020                  __ptext0 0000                  __ptext1 0752  
              _AD_Result 0022     end_of_initialization 07FD      start_initialization 07F2  
      AD_Testing@adtimes 007C              __pbssCOMMON 0078                ___latbits 0001  
         AD_Testing@data 0076               _AD_Testing 0752            __size_of_main 0012  
            AD_Testing@i 0075              ?_AD_Testing 0070  
