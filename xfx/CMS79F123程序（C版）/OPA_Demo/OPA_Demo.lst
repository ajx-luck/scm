---- E:\ZW PROJECT\DEMO程序\模板\79F系列_Demo(C语言)\CMS79F123程序（C版）\OPA_Demo\OPA_Demo.c ----------------------------------------------------------------------
1:                /*-------------------------------------------
2:                
3:                程序名称：运算放大器调零程序
4:                日期版本：2018/6/15 <V1.1>
5:                
6:                备注：若OPA使用到相关的IO口，用户必须将其置为输入
7:                
8:                *本程序由 中微半导体有限公司 &应用支持部& 编写整理
9:                *公司网址 www.mcu.com.cn
10:               *技术支持QQ 3001082102  罗工
11:                           3001085706	莫工
12:               -------------------------------------------*/
13:               
14:               #include <cms.h>
15:               
16:               
17:               void Set_OPA();
18:               void DelayXus(unsigned char X);
19:               
20:               void main()
  07D4    0000    NOP
  07D5    0064    CLRWDT
21:               {
22:               	asm("nop");
23:               	asm("clrwdt");
24:               	
25:               	TRISA = 0B00000111;
  07D6    3007    LDIA	0x7
  07D7    1683    SETB	0x3,5
  07D8    1303    CLRB	0x3,6
  07D9    0085    LD	0x5,A
26:               	
27:               	Set_OPA();
  07DA    118A    CLRB	0xA,3
  07DB    27DF    CALL	0x7DF
  07DC    118A    CLRB	0xA,3
28:               	
29:               	while(1)
  07DD    0064    CLRWDT
  07DE    2FDD    JP	0x7DD
30:               	{
31:               		asm("clrwdt");
32:               	}
33:               }
34:               
35:               /***********************************************
36:               函数名称：Set_OPA
37:               函数功能：设置芯片内置运算放大器
38:               入口参数：无
39:               出口参数：无
40:               备注：RA1运放正端输入，R2运放负端输入，RA0运放输出
41:               ************************************************/
42:               void Set_OPA()
43:               {
44:               	static bit OPA_Out;
45:               	
46:               	//用户根据需要修改寄存器
47:               		OPA0ADJ = 0B01111111;		//调节模式，调节模式正端输入，失调电压调节位为1FH
  07DF    307F    LDIA	0x7F
  07E0    009B    LD	0x1B,A
48:               		OPA0CON = 0B11000000;			
  07E1    30C0    LDIA	0xC0
  07E2    009A    LD	0x1A,A
49:               	//--------------------
50:               	while(1)
51:               	{
52:               		DelayXus(10);				//一小段延时后检测输出
  07E3    300A    LDIA	0xA
  07E4    27F8    CALL	0x7F8
  07E5    118A    CLRB	0xA,3
53:               		
54:               		if(0X80 & OPA0ADJ)			//运放输出是否翻转
  07E6    1B9B    SZB	0x1B,7
  07E7    2FEF    JP	0x7EF
55:               			break;
56:               		else
57:               		{
58:               			OPA0ADJ--;				//运放输出未翻转，递减调节位
  07E8    039B    DECR	0x1B
59:               			
60:               			if(!(0x1f & OPA0ADJ))	//是否调到了最小值
  07E9    081B    LD	A,0x1B
  07EA    391F    ANDIA	0x1F
  07EB    1D03    SNZB	0x3,2
  07EC    2FE3    JP	0x7E3
61:               			{
62:               				OPA0ADJ = 0x10;		//调不到零点，赋中间值
  07ED    3010    LDIA	0x10
  07EE    009B    LD	0x1B,A
63:               				break;
64:               			}
65:               		}
66:               	}
67:               	
68:               	OPA0ADJ &= 0x1f;				//运放工作在正常模式
  07EF    301F    LDIA	0x1F
  07F0    059B    ANDR	0x1B
69:               	
70:               	if(0x20 & OPA0ADJ)				//避免溢出
  07F1    1E9B    SNZB	0x1B,5
  07F2    2FF5    JP	0x7F5
71:               	{
72:               		OPA0ADJ = 0x1f;
  07F3    301F    LDIA	0x1F
  07F4    009B    LD	0x1B,A
73:               	}
74:               	
75:               		OPA0CON = 0B11000000;		//运放所有端口接至相应IO
  07F5    30C0    LDIA	0xC0
  07F6    009A    LD	0x1A,A
  07F7    0008    RET
76:               		
77:               }
78:               
79:               void DelayXus(unsigned char X)
  07F8    00F0    LD	0x70,A
80:               {
81:               	while(X--);
  07F9    03F0    DECR	0x70
  07FA    0F70    SZINCA	0x70
  07FB    2FF9    JP	0x7F9
  07FC    0008    RET
82:               }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    2FFD    JP	0x7FD
---- start_initialization ------------------------------------------------------------------
---- interrupt_function_enter ----------------------------------------------------------
---- common_function ------------------------------------------------------------------
  07FD    0183    CLR	0x3
  07FE    118A    CLRB	0xA,3
  07FF    2FD4    JP	0x7D4
