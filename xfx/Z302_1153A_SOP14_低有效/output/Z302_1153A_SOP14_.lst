

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Wed Jun 16 14:41:19 2021

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1153A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	psect	pa_nodes0,global,class=CODE,delta=2
    22                           	dabs	1,0x4E,2
    23  0000                     
    24                           ; Version 1.45
    25                           ; Generated 16/11/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F887 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     
    59                           	psect	text0
    60  0000                     __ptext0:	
    61  0018                     _TRISA	set	24
    62  0017                     _PORTA	set	23
    63  000E                     _IOCB	set	14
    64  000D                     _WPUB	set	13
    65  000B                     _PDCONB	set	11
    66  0009                     _INTCON	set	9
    67  0008                     _OSCCON	set	8
    68  0007                     _OPTION_REG	set	7
    69  0006                     _TRISB	set	6
    70  0005                     _PORTB	set	5
    71  0001                     _TMR0	set	1
    72  0048                     _RBIF	set	72
    73  004A                     _T0IF	set	74
    74  004B                     _RBIE	set	75
    75  004F                     _GIE	set	79
    76                           
    77                           	psect	cinit
    78  000B                     start_initialization:	
    79                           ; #config settings
    80                           
    81  000B                     __initialization:	
    82                           
    83                           ; Clear objects allocated to BANK0
    84  000B  3020               	movlw	low __pbssBANK0
    85  000C  0084               	movwf	4
    86  000D  3033               	movlw	low (__pbssBANK0+19)
    87  000E  2177               	fcall	clear_ram0
    88  000F                     end_of_initialization:	
    89                           ;End of C runtime variable initialization code
    90                           
    91  000F                     __end_of__initialization:	
    92  000F  0183               	clrf	3
    93  0010  2905               	ljmp	_main	;jump to C main() function
    94                           
    95                           	psect	bssBANK0
    96  0020                     __pbssBANK0:	
    97  0020                     _sleepTime:	
    98  0020                     	ds	1
    99  0021                     _chrgFullCount:	
   100  0021                     	ds	1
   101  0022                     _chrgFlag:	
   102  0022                     	ds	1
   103  0023                     _keyCount:	
   104  0023                     	ds	1
   105  0024                     _ledCount:	
   106  0024                     	ds	1
   107  0025                     _count1s:	
   108  0025                     	ds	1
   109  0026                     _workTime:	
   110  0026                     	ds	1
   111  0027                     _waitTime:	
   112  0027                     	ds	1
   113  0028                     _workStep:	
   114  0028                     	ds	1
   115  0029                     _delayTime:	
   116  0029                     	ds	1
   117  002A                     _lastBlue:	
   118  002A                     	ds	1
   119  002B                     _blue:	
   120  002B                     	ds	1
   121  002C                     _lastGreen:	
   122  002C                     	ds	1
   123  002D                     _green:	
   124  002D                     	ds	1
   125  002E                     _lastRed:	
   126  002E                     	ds	1
   127  002F                     _red:	
   128  002F                     	ds	1
   129  0030                     _colorStep:	
   130  0030                     	ds	1
   131  0031                     _intCount:	
   132  0031                     	ds	1
   133  0032                     _IntFlag:	
   134  0032                     	ds	1
   135                           
   136                           	psect	clrtext
   137  0177                     clear_ram0:	
   138                           ;	Called with FSR containing the base address, and
   139                           ;	W with the last address+1
   140                           
   141  0177  0064               	clrwdt	;clear the watchdog before getting into this loop
   142  0178                     clrloop0:	
   143  0178  0180               	clrf	0	;clear RAM location pointed to by FSR
   144  0179  0A84               	incf	4,f	;increment pointer
   145  017A  0604               	xorwf	4,w	;XOR with final address
   146  017B  1903               	btfsc	3,2	;have we reached the end yet?
   147  017C  3400               	retlw	0	;all done for this memory range, return
   148  017D  0604               	xorwf	4,w	;XOR again to restore value
   149  017E  2978               	goto	clrloop0	;do the next byte
   150                           
   151                           	psect	cstackCOMMON
   152  0000                     __pcstackCOMMON:	
   153  0000                     ??_InitSys:	
   154  0000                     ??_showRGB:	
   155                           ; 1 bytes @ 0x0
   156                           
   157  0000                     ??_chrgCtr:	
   158                           ; 1 bytes @ 0x0
   159                           
   160  0000                     ??_keyCtr:	
   161                           ; 1 bytes @ 0x0
   162                           
   163  0000                     ??_workCtr:	
   164                           ; 1 bytes @ 0x0
   165                           
   166  0000                     ??_gotoSleep:	
   167                           ; 1 bytes @ 0x0
   168                           
   169  0000                     ??_rainbow:	
   170                           ; 1 bytes @ 0x0
   171                           
   172  0000                     ??_keyRead:	
   173                           ; 1 bytes @ 0x0
   174                           
   175  0000                     ??_main:	
   176                           ; 1 bytes @ 0x0
   177                           
   178                           
   179                           	psect	cstackBANK0
   180  0033                     __pcstackBANK0:	
   181                           ; 1 bytes @ 0x0
   182                           
   183  0033                     ?_InitSys:	
   184  0033                     ?_showRGB:	
   185                           ; 1 bytes @ 0x0
   186                           
   187  0033                     ?_chrgCtr:	
   188                           ; 1 bytes @ 0x0
   189                           
   190  0033                     ?_keyCtr:	
   191                           ; 1 bytes @ 0x0
   192                           
   193  0033                     ?_workCtr:	
   194                           ; 1 bytes @ 0x0
   195                           
   196  0033                     ?_gotoSleep:	
   197                           ; 1 bytes @ 0x0
   198                           
   199  0033                     ?_rainbow:	
   200                           ; 1 bytes @ 0x0
   201                           
   202  0033                     ?_keyRead:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  0033                     ?_main:	
   206                           ; 1 bytes @ 0x0
   207                           
   208  0033                     ?_Timer0_Isr:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0033                     ??_Timer0_Isr:	
   212                           ; 1 bytes @ 0x0
   213                           
   214                           
   215                           ; 1 bytes @ 0x0
   216  0033                     	ds	2
   217  0035                     keyRead@KeyStatus:	
   218                           
   219                           ; 1 bytes @ 0x2
   220  0035                     	ds	1
   221                           
   222                           	psect	maintext
   223  0105                     __pmaintext:	
   224 ;;
   225 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   226 ;;
   227 ;; *************** function _main *****************
   228 ;; Defined at:
   229 ;;		line 36 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_µÍÓÐÐ§\main.c"
   230 ;; Parameters:    Size  Location     Type
   231 ;;		None
   232 ;; Auto vars:     Size  Location     Type
   233 ;;		None
   234 ;; Return value:  Size  Location     Type
   235 ;;                  1    wreg      void 
   236 ;; Registers used:
   237 ;;		wreg, status,2, status,0, pclath, cstack
   238 ;; Tracked objects:
   239 ;;		On entry : B00/0
   240 ;;		On exit  : 0/0
   241 ;;		Unchanged: 0/0
   242 ;; Data sizes:     COMMON   BANK0
   243 ;;      Params:         0       0
   244 ;;      Locals:         0       0
   245 ;;      Temps:          0       0
   246 ;;      Totals:         0       0
   247 ;;Total ram usage:        0 bytes
   248 ;; Hardware stack levels required when called:    3
   249 ;; This function calls:
   250 ;;		_InitSys
   251 ;;		_chrgCtr
   252 ;;		_gotoSleep
   253 ;;		_keyCtr
   254 ;;		_showRGB
   255 ;;		_workCtr
   256 ;; This function is called by:
   257 ;;		Startup code after reset
   258 ;; This function uses a non-reentrant model
   259 ;;
   260                           
   261                           
   262                           ;psect for function _main
   263  0105                     _main:	
   264                           
   265                           ;main.c: 38: InitSys();
   266                           
   267                           ;incstack = 0
   268                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   269  0105  2124               	fcall	_InitSys
   270  0106                     l401:	
   271                           ;main.c: 39: while(1)
   272                           
   273  0106  0064               	clrwdt	;# 
   274                           
   275                           ;main.c: 42: if(workStep == 1)
   276  0107  0B28               	decfsz	_workStep,w
   277  0108  290A               	goto	l1441
   278                           
   279                           ;main.c: 43: {
   280                           ;main.c: 44: showRGB();
   281  0109  20E5               	fcall	_showRGB
   282  010A                     l1441:	
   283                           
   284                           ;main.c: 45: }
   285                           ;main.c: 46: if(!IntFlag)
   286  010A  0832               	movf	_IntFlag,w
   287  010B  1903               	btfsc	3,2
   288  010C  2906               	goto	l401
   289                           
   290                           ;main.c: 48: IntFlag = 0;
   291  010D  01B2               	clrf	_IntFlag
   292                           
   293                           ;main.c: 49: chrgCtr();
   294  010E  209E               	fcall	_chrgCtr
   295                           
   296                           ;main.c: 50: if(chrgFlag == 0)
   297  010F  0822               	movf	_chrgFlag,w
   298  0110  1D03               	btfss	3,2
   299  0111  2913               	goto	l405
   300                           
   301                           ;main.c: 51: keyCtr();
   302  0112  213D               	fcall	_keyCtr
   303  0113                     l405:	
   304                           
   305                           ;main.c: 52: workCtr();
   306  0113  2079               	fcall	_workCtr
   307                           
   308                           ;main.c: 53: if((0x10 & PORTB) == 0 && keyCount == 0 && workStep == 0)
   309  0114  1A05               	btfsc	5,4	;volatile
   310  0115  2906               	goto	l401
   311  0116  0823               	movf	_keyCount,w
   312  0117  1D03               	btfss	3,2
   313  0118  2906               	goto	l401
   314  0119  0828               	movf	_workStep,w
   315  011A  1D03               	btfss	3,2
   316  011B  2906               	goto	l401
   317                           
   318                           ;main.c: 54: {
   319                           ;main.c: 55: if(++sleepTime > 200)
   320  011C  30C9               	movlw	201
   321  011D  0AA0               	incf	_sleepTime,f
   322  011E  0220               	subwf	_sleepTime,w
   323  011F  1C03               	skipc
   324  0120  2906               	goto	l401
   325                           
   326                           ;main.c: 56: {
   327                           ;main.c: 57: sleepTime = 0;
   328  0121  01A0               	clrf	_sleepTime
   329                           
   330                           ;main.c: 58: gotoSleep();
   331  0122  2152               	fcall	_gotoSleep
   332  0123  2906               	goto	l401
   333  0124                     __end_of_main:	
   334                           
   335                           	psect	text1
   336  0079                     __ptext1:	
   337 ;; *************** function _workCtr *****************
   338 ;; Defined at:
   339 ;;		line 135 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_µÍÓÐÐ§\main.c"
   340 ;; Parameters:    Size  Location     Type
   341 ;;		None
   342 ;; Auto vars:     Size  Location     Type
   343 ;;		None
   344 ;; Return value:  Size  Location     Type
   345 ;;                  1    wreg      void 
   346 ;; Registers used:
   347 ;;		wreg, status,2, status,0, pclath, cstack
   348 ;; Tracked objects:
   349 ;;		On entry : 0/0
   350 ;;		On exit  : 0/0
   351 ;;		Unchanged: 0/0
   352 ;; Data sizes:     COMMON   BANK0
   353 ;;      Params:         0       0
   354 ;;      Locals:         0       0
   355 ;;      Temps:          0       0
   356 ;;      Totals:         0       0
   357 ;;Total ram usage:        0 bytes
   358 ;; Hardware stack levels used:    1
   359 ;; Hardware stack levels required when called:    2
   360 ;; This function calls:
   361 ;;		_rainbow
   362 ;; This function is called by:
   363 ;;		_main
   364 ;; This function uses a non-reentrant model
   365 ;;
   366                           
   367                           
   368                           ;psect for function _workCtr
   369  0079                     _workCtr:	
   370                           
   371                           ;main.c: 137: if(workStep == 1)
   372                           
   373                           ;incstack = 0
   374                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   375  0079  0B28               	decfsz	_workStep,w
   376  007A  2884               	goto	l1389
   377                           
   378                           ;main.c: 138: {
   379                           ;main.c: 139: PORTA |= 0x06;
   380  007B  3006               	movlw	6
   381  007C  0497               	iorwf	23,f	;volatile
   382                           
   383                           ;main.c: 140: rainbow();
   384  007D  2011               	fcall	_rainbow
   385                           
   386                           ;main.c: 141: if(workTime == 0)
   387  007E  0826               	movf	_workTime,w
   388  007F  1D03               	btfss	3,2
   389  0080  0008               	return
   390                           
   391                           ;main.c: 142: {
   392                           ;main.c: 143: workStep = 2;
   393  0081  3002               	movlw	2
   394  0082  00A8               	movwf	_workStep
   395  0083  0008               	return
   396  0084                     l1389:	
   397                           
   398                           ;main.c: 146: else if(workStep == 0)
   399  0084  0828               	movf	_workStep,w
   400  0085  1D03               	btfss	3,2
   401  0086  2891               	goto	l1399
   402                           
   403                           ;main.c: 147: {
   404                           ;main.c: 148: if(chrgFlag)
   405  0087  0822               	movf	_chrgFlag,w
   406  0088  1903               	btfsc	3,2
   407  0089  288E               	goto	l1397
   408                           
   409                           ;main.c: 149: {
   410                           ;main.c: 150: PORTA &= 0x01;
   411  008A  3001               	movlw	1
   412  008B  0597               	andwf	23,f	;volatile
   413                           
   414                           ;main.c: 152: PORTB &= 0xFE;
   415  008C  1005               	bcf	5,0	;volatile
   416                           
   417                           ;main.c: 153: }
   418  008D  0008               	return
   419  008E                     l1397:	
   420                           
   421                           ;main.c: 154: else
   422                           ;main.c: 155: {
   423                           ;main.c: 156: PORTA = 0x00;
   424  008E  0197               	clrf	23	;volatile
   425                           
   426                           ;main.c: 157: PORTB = 0x00;
   427  008F  0185               	clrf	5	;volatile
   428  0090  0008               	return
   429  0091                     l1399:	
   430                           
   431                           ;main.c: 160: else if(workStep == 2)
   432  0091  3002               	movlw	2
   433  0092  0628               	xorwf	_workStep,w
   434  0093  1D03               	btfss	3,2
   435  0094  0008               	return
   436                           
   437                           ;main.c: 161: {
   438                           ;main.c: 162: PORTB &= 0xF9;
   439  0095  30F9               	movlw	249
   440  0096  0585               	andwf	5,f	;volatile
   441                           
   442                           ;main.c: 163: PORTA = 0x00;
   443  0097  0197               	clrf	23	;volatile
   444                           
   445                           ;main.c: 167: PORTB |= 0x41;
   446  0098  3041               	movlw	65
   447  0099  0485               	iorwf	5,f	;volatile
   448                           
   449                           ;main.c: 168: if(waitTime == 0)
   450  009A  0827               	movf	_waitTime,w
   451  009B  1903               	btfsc	3,2
   452                           
   453                           ;main.c: 169: {
   454                           ;main.c: 170: workStep = 0;
   455  009C  01A8               	clrf	_workStep
   456  009D  0008               	return
   457  009E                     __end_of_workCtr:	
   458                           
   459                           	psect	text2
   460  0011                     __ptext2:	
   461 ;; *************** function _rainbow *****************
   462 ;; Defined at:
   463 ;;		line 276 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_µÍÓÐÐ§\main.c"
   464 ;; Parameters:    Size  Location     Type
   465 ;;		None
   466 ;; Auto vars:     Size  Location     Type
   467 ;;		None
   468 ;; Return value:  Size  Location     Type
   469 ;;                  1    wreg      void 
   470 ;; Registers used:
   471 ;;		wreg, status,2, status,0
   472 ;; Tracked objects:
   473 ;;		On entry : 0/0
   474 ;;		On exit  : 0/0
   475 ;;		Unchanged: 0/0
   476 ;; Data sizes:     COMMON   BANK0
   477 ;;      Params:         0       0
   478 ;;      Locals:         0       0
   479 ;;      Temps:          0       0
   480 ;;      Totals:         0       0
   481 ;;Total ram usage:        0 bytes
   482 ;; Hardware stack levels used:    1
   483 ;; Hardware stack levels required when called:    1
   484 ;; This function calls:
   485 ;;		Nothing
   486 ;; This function is called by:
   487 ;;		_workCtr
   488 ;; This function uses a non-reentrant model
   489 ;;
   490                           
   491                           
   492                           ;psect for function _rainbow
   493  0011                     _rainbow:	
   494                           
   495                           ;main.c: 279: if(red > lastRed)
   496                           
   497                           ;incstack = 0
   498                           ; Regs used in _rainbow: [wreg+status,2+status,0]
   499  0011  082F               	movf	_red,w
   500  0012  022E               	subwf	_lastRed,w
   501  0013  1C03               	btfss	3,0
   502                           
   503                           ;main.c: 280: red--;
   504  0014  03AF               	decf	_red,f
   505                           
   506                           ;main.c: 281: if(green > lastGreen)
   507  0015  082D               	movf	_green,w
   508  0016  022C               	subwf	_lastGreen,w
   509  0017  1C03               	btfss	3,0
   510                           
   511                           ;main.c: 282: green--;
   512  0018  03AD               	decf	_green,f
   513                           
   514                           ;main.c: 283: if(blue > lastBlue)
   515  0019  082B               	movf	_blue,w
   516  001A  022A               	subwf	_lastBlue,w
   517  001B  1C03               	btfss	3,0
   518                           
   519                           ;main.c: 284: blue--;
   520  001C  03AB               	decf	_blue,f
   521                           
   522                           ;main.c: 285: if(red < lastRed)
   523  001D  082E               	movf	_lastRed,w
   524  001E  022F               	subwf	_red,w
   525  001F  1C03               	btfss	3,0
   526                           
   527                           ;main.c: 286: red++;
   528  0020  0AAF               	incf	_red,f
   529                           
   530                           ;main.c: 287: if(green < lastGreen)
   531  0021  082C               	movf	_lastGreen,w
   532  0022  022D               	subwf	_green,w
   533  0023  1C03               	btfss	3,0
   534                           
   535                           ;main.c: 288: green++;
   536  0024  0AAD               	incf	_green,f
   537                           
   538                           ;main.c: 289: if(blue < lastBlue)
   539  0025  082A               	movf	_lastBlue,w
   540  0026  022B               	subwf	_blue,w
   541  0027  1C03               	btfss	3,0
   542                           
   543                           ;main.c: 290: blue++;
   544  0028  0AAB               	incf	_blue,f
   545                           
   546                           ;main.c: 291: if(delayTime > 0)
   547  0029  0829               	movf	_delayTime,w
   548  002A  1903               	btfsc	3,2
   549  002B  282E               	goto	l1213
   550                           
   551                           ;main.c: 292: {
   552                           ;main.c: 293: delayTime--;
   553  002C  03A9               	decf	_delayTime,f
   554  002D  0008               	return
   555  002E                     l1213:	
   556                           
   557                           ;main.c: 295: }
   558                           ;main.c: 296: if(colorStep == 1)
   559  002E  0B30               	decfsz	_colorStep,w
   560  002F  2835               	goto	l1221
   561  0030                     l1215:	
   562                           
   563                           ;main.c: 297: {
   564                           ;main.c: 298: lastRed = 255;
   565  0030  30FF               	movlw	255
   566  0031  00AE               	movwf	_lastRed
   567                           
   568                           ;main.c: 299: lastGreen = 0;
   569  0032  01AC               	clrf	_lastGreen
   570  0033                     l1219:	
   571                           
   572                           ;main.c: 300: lastBlue = 0;
   573  0033  01AA               	clrf	_lastBlue
   574                           
   575                           ;main.c: 302: }
   576  0034  2860               	goto	l472
   577  0035                     l1221:	
   578                           
   579                           ;main.c: 303: else if(colorStep == 2)
   580  0035  3002               	movlw	2
   581  0036  0630               	xorwf	_colorStep,w
   582  0037  1D03               	btfss	3,2
   583  0038  283C               	goto	l1227
   584  0039                     l1223:	
   585                           
   586                           ;main.c: 304: {
   587                           ;main.c: 305: lastRed = 255;
   588  0039  30FF               	movlw	255
   589  003A  00AE               	movwf	_lastRed
   590  003B  2842               	goto	L1
   591  003C                     l1227:	
   592                           ;main.c: 306: lastGreen = 255;
   593                           
   594                           
   595                           ;main.c: 309: else if(colorStep == 3)
   596  003C  3003               	movlw	3
   597  003D  0630               	xorwf	_colorStep,w
   598  003E  1D03               	btfss	3,2
   599  003F  2844               	goto	l1235
   600  0040                     l1229:	
   601  0040  30FF               	movlw	255
   602                           
   603                           ;main.c: 310: {
   604                           ;main.c: 311: lastRed = 0;
   605  0041  01AE               	clrf	_lastRed
   606  0042                     L1:	
   607                           ;main.c: 312: lastGreen = 255;
   608                           
   609  0042  00AC               	movwf	_lastGreen
   610  0043  2833               	goto	l1219
   611  0044                     l1235:	
   612                           
   613                           ;main.c: 315: else if(colorStep == 4)
   614  0044  3004               	movlw	4
   615  0045  0630               	xorwf	_colorStep,w
   616  0046  1D03               	btfss	3,2
   617  0047  284D               	goto	l1241
   618                           
   619                           ;main.c: 316: {
   620                           ;main.c: 317: lastRed = 0;
   621  0048  01AE               	clrf	_lastRed
   622  0049                     L2:	
   623  0049  30FF               	movlw	255
   624                           
   625                           ;main.c: 318: lastGreen = 0;
   626  004A  01AC               	clrf	_lastGreen
   627                           
   628                           ;main.c: 319: lastBlue = 255;
   629  004B  00AA               	movwf	_lastBlue
   630                           
   631                           ;main.c: 320: }
   632  004C  2860               	goto	l472
   633  004D                     l1241:	
   634                           
   635                           ;main.c: 321: else if(colorStep == 5)
   636  004D  3005               	movlw	5
   637  004E  0630               	xorwf	_colorStep,w
   638  004F  1D03               	btfss	3,2
   639  0050  2854               	goto	l1249
   640                           
   641                           ;main.c: 322: {
   642                           ;main.c: 323: lastRed = 255;
   643  0051  30FF               	movlw	255
   644  0052  00AE               	movwf	_lastRed
   645  0053  2849               	goto	L2
   646  0054                     l1249:	
   647                           ;main.c: 324: lastGreen = 0;
   648                           
   649                           
   650                           ;main.c: 327: else if(colorStep == 6)
   651  0054  3006               	movlw	6
   652  0055  0630               	xorwf	_colorStep,w
   653  0056  1903               	btfsc	3,2
   654  0057  2830               	goto	l1215
   655                           
   656                           ;main.c: 333: else if(colorStep == 7)
   657  0058  3007               	movlw	7
   658  0059  0630               	xorwf	_colorStep,w
   659  005A  1903               	btfsc	3,2
   660  005B  2839               	goto	l1223
   661                           
   662                           ;main.c: 339: else if(colorStep == 8)
   663  005C  3008               	movlw	8
   664  005D  0630               	xorwf	_colorStep,w
   665  005E  1903               	btfsc	3,2
   666  005F  2840               	goto	l1229
   667  0060                     l472:	
   668                           
   669                           ;main.c: 344: }
   670                           ;main.c: 347: if(red == lastRed && blue == lastBlue && green == lastGreen)
   671  0060  082F               	movf	_red,w
   672  0061  062E               	xorwf	_lastRed,w
   673  0062  1D03               	skipz
   674  0063  0008               	return
   675  0064  082B               	movf	_blue,w
   676  0065  062A               	xorwf	_lastBlue,w
   677  0066  1D03               	skipz
   678  0067  0008               	return
   679  0068  082D               	movf	_green,w
   680  0069  062C               	xorwf	_lastGreen,w
   681  006A  1D03               	skipz
   682  006B  0008               	return
   683                           
   684                           ;main.c: 348: {
   685                           ;main.c: 349: if(++colorStep > 8)
   686  006C  3009               	movlw	9
   687  006D  0AB0               	incf	_colorStep,f
   688  006E  0230               	subwf	_colorStep,w
   689  006F  1C03               	skipc
   690  0070  2873               	goto	l1279
   691                           
   692                           ;main.c: 350: {
   693                           ;main.c: 351: colorStep = 4;
   694  0071  3004               	movlw	4
   695  0072  00B0               	movwf	_colorStep
   696  0073                     l1279:	
   697                           
   698                           ;main.c: 352: }
   699                           ;main.c: 353: if(delayTime == 0)
   700  0073  0829               	movf	_delayTime,w
   701  0074  1D03               	btfss	3,2
   702  0075  0008               	return
   703                           
   704                           ;main.c: 354: delayTime = 90;
   705  0076  305A               	movlw	90
   706  0077  00A9               	movwf	_delayTime
   707  0078  0008               	return
   708  0079                     __end_of_rainbow:	
   709                           
   710                           	psect	text3
   711  00E5                     __ptext3:	
   712 ;; *************** function _showRGB *****************
   713 ;; Defined at:
   714 ;;		line 176 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_µÍÓÐÐ§\main.c"
   715 ;; Parameters:    Size  Location     Type
   716 ;;		None
   717 ;; Auto vars:     Size  Location     Type
   718 ;;		None
   719 ;; Return value:  Size  Location     Type
   720 ;;                  1    wreg      void 
   721 ;; Registers used:
   722 ;;		wreg, status,2, status,0
   723 ;; Tracked objects:
   724 ;;		On entry : 0/0
   725 ;;		On exit  : 0/0
   726 ;;		Unchanged: 0/0
   727 ;; Data sizes:     COMMON   BANK0
   728 ;;      Params:         0       0
   729 ;;      Locals:         0       0
   730 ;;      Temps:          0       0
   731 ;;      Totals:         0       0
   732 ;;Total ram usage:        0 bytes
   733 ;; Hardware stack levels used:    1
   734 ;; Hardware stack levels required when called:    1
   735 ;; This function calls:
   736 ;;		Nothing
   737 ;; This function is called by:
   738 ;;		_main
   739 ;; This function uses a non-reentrant model
   740 ;;
   741                           
   742                           
   743                           ;psect for function _showRGB
   744  00E5                     _showRGB:	
   745                           
   746                           ;main.c: 179: if(blue > ledCount)
   747                           
   748                           ;incstack = 0
   749                           ; Regs used in _showRGB: [wreg+status,2+status,0]
   750  00E5  082B               	movf	_blue,w
   751  00E6  0224               	subwf	_ledCount,w
   752  00E7  1803               	skipnc
   753  00E8  28EC               	goto	l1327
   754                           
   755                           ;main.c: 180: {
   756                           ;main.c: 181: PORTB |= 0x41;
   757  00E9  3041               	movlw	65
   758  00EA  0485               	iorwf	5,f	;volatile
   759                           
   760                           ;main.c: 182: }
   761  00EB  28EE               	goto	l1329
   762  00EC                     l1327:	
   763                           
   764                           ;main.c: 183: else
   765                           ;main.c: 184: {
   766                           ;main.c: 185: PORTB &= 0xBE;
   767  00EC  30BE               	movlw	190
   768  00ED  0585               	andwf	5,f	;volatile
   769  00EE                     l1329:	
   770                           
   771                           ;main.c: 186: }
   772                           ;main.c: 188: if(red > ledCount)
   773  00EE  082F               	movf	_red,w
   774  00EF  0224               	subwf	_ledCount,w
   775  00F0  1803               	skipnc
   776  00F1  28F5               	goto	l439
   777                           
   778                           ;main.c: 189: {
   779                           ;main.c: 190: PORTA |= 0x01;
   780  00F2  1417               	bsf	23,0	;volatile
   781                           
   782                           ;main.c: 191: PORTB |= 0x04;
   783  00F3  1505               	bsf	5,2	;volatile
   784                           
   785                           ;main.c: 192: }
   786  00F4  28F7               	goto	l1333
   787  00F5                     l439:	
   788                           
   789                           ;main.c: 193: else
   790                           ;main.c: 194: {
   791                           ;main.c: 195: PORTA &= 0xFE;
   792  00F5  1017               	bcf	23,0	;volatile
   793                           
   794                           ;main.c: 196: PORTB &= 0xFB;
   795  00F6  1105               	bcf	5,2	;volatile
   796  00F7                     l1333:	
   797                           
   798                           ;main.c: 197: }
   799                           ;main.c: 199: if(green > ledCount)
   800  00F7  082D               	movf	_green,w
   801  00F8  0224               	subwf	_ledCount,w
   802  00F9  1803               	skipnc
   803  00FA  28FE               	goto	l1337
   804                           
   805                           ;main.c: 200: {
   806                           ;main.c: 201: PORTB |= 0x82;
   807  00FB  3082               	movlw	130
   808  00FC  0485               	iorwf	5,f	;volatile
   809                           
   810                           ;main.c: 202: }
   811  00FD  2900               	goto	l442
   812  00FE                     l1337:	
   813                           
   814                           ;main.c: 203: else
   815                           ;main.c: 204: {
   816                           ;main.c: 205: PORTB &= 0x7D;
   817  00FE  307D               	movlw	125
   818  00FF  0585               	andwf	5,f	;volatile
   819  0100                     l442:	
   820                           
   821                           ;main.c: 206: }
   822                           ;main.c: 207: if(++ledCount > 254)
   823  0100  0AA4               	incf	_ledCount,f
   824  0101  0F24               	incfsz	_ledCount,w
   825  0102  0008               	return
   826                           
   827                           ;main.c: 208: ledCount = 0;
   828  0103  01A4               	clrf	_ledCount
   829  0104  0008               	return
   830  0105                     __end_of_showRGB:	
   831                           
   832                           	psect	text4
   833  013D                     __ptext4:	
   834 ;; *************** function _keyCtr *****************
   835 ;; Defined at:
   836 ;;		line 234 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_µÍÓÐÐ§\main.c"
   837 ;; Parameters:    Size  Location     Type
   838 ;;		None
   839 ;; Auto vars:     Size  Location     Type
   840 ;;		None
   841 ;; Return value:  Size  Location     Type
   842 ;;                  1    wreg      void 
   843 ;; Registers used:
   844 ;;		wreg, status,2, status,0, pclath, cstack
   845 ;; Tracked objects:
   846 ;;		On entry : 0/0
   847 ;;		On exit  : 0/0
   848 ;;		Unchanged: 0/0
   849 ;; Data sizes:     COMMON   BANK0
   850 ;;      Params:         0       0
   851 ;;      Locals:         0       0
   852 ;;      Temps:          0       0
   853 ;;      Totals:         0       0
   854 ;;Total ram usage:        0 bytes
   855 ;; Hardware stack levels used:    1
   856 ;; Hardware stack levels required when called:    2
   857 ;; This function calls:
   858 ;;		_keyRead
   859 ;; This function is called by:
   860 ;;		_main
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864                           
   865                           ;psect for function _keyCtr
   866  013D                     _keyCtr:	
   867                           
   868                           ;main.c: 236: PORTB;
   869                           
   870                           ;incstack = 0
   871                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
   872  013D  0805               	movf	5,w	;volatile
   873                           
   874                           ;main.c: 237: if(keyRead(0x08 & (~PORTB)))
   875  013E  0905               	comf	5,w	;volatile
   876  013F  3908               	andlw	8
   877  0140  2165               	fcall	_keyRead
   878  0141  3A00               	xorlw	0
   879  0142  1903               	skipnz
   880  0143  0008               	return
   881                           
   882                           ;main.c: 238: {
   883                           ;main.c: 239: if(workStep == 1)
   884  0144  0B28               	decfsz	_workStep,w
   885  0145  294B               	goto	l451
   886                           
   887                           ;main.c: 240: {
   888                           ;main.c: 241: workStep = 2;
   889  0146  3002               	movlw	2
   890  0147  00A8               	movwf	_workStep
   891                           
   892                           ;main.c: 242: waitTime = 30;
   893  0148  301E               	movlw	30
   894  0149  00A7               	movwf	_waitTime
   895                           
   896                           ;main.c: 243: }
   897  014A  0008               	return
   898  014B                     l451:	
   899  014B  3078               	movlw	120
   900                           
   901                           ;main.c: 244: else
   902                           ;main.c: 245: {
   903                           ;main.c: 246: workStep = 1;
   904  014C  01A8               	clrf	_workStep
   905  014D  0AA8               	incf	_workStep,f
   906                           
   907                           ;main.c: 247: colorStep = 1;
   908  014E  01B0               	clrf	_colorStep
   909  014F  0AB0               	incf	_colorStep,f
   910                           
   911                           ;main.c: 248: workTime = 120;
   912  0150  00A6               	movwf	_workTime
   913  0151  0008               	return
   914  0152                     __end_of_keyCtr:	
   915                           
   916                           	psect	text5
   917  0165                     __ptext5:	
   918 ;; *************** function _keyRead *****************
   919 ;; Defined at:
   920 ;;		line 253 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_µÍÓÐÐ§\main.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;  KeyStatus       1    wreg     unsigned char 
   923 ;; Auto vars:     Size  Location     Type
   924 ;;  KeyStatus       1    2[BANK0 ] unsigned char 
   925 ;; Return value:  Size  Location     Type
   926 ;;                  1    wreg      unsigned char 
   927 ;; Registers used:
   928 ;;		wreg, status,2, status,0
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMMON   BANK0
   934 ;;      Params:         0       0
   935 ;;      Locals:         0       1
   936 ;;      Temps:          0       0
   937 ;;      Totals:         0       1
   938 ;;Total ram usage:        1 bytes
   939 ;; Hardware stack levels used:    1
   940 ;; Hardware stack levels required when called:    1
   941 ;; This function calls:
   942 ;;		Nothing
   943 ;; This function is called by:
   944 ;;		_keyCtr
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           
   949                           ;psect for function _keyRead
   950  0165                     _keyRead:	
   951                           
   952                           ;incstack = 0
   953                           ; Regs used in _keyRead: [wreg+status,2+status,0]
   954                           ;keyRead@KeyStatus stored from wreg
   955  0165  00B5               	movwf	keyRead@KeyStatus
   956                           
   957                           ;main.c: 255: if (KeyStatus)
   958  0166  0835               	movf	keyRead@KeyStatus,w
   959  0167  1903               	btfsc	3,2
   960  0168  2971               	goto	l1289
   961                           
   962                           ;main.c: 256: {
   963                           ;main.c: 257: if(++keyCount >= 150)
   964  0169  3096               	movlw	150
   965  016A  0AA3               	incf	_keyCount,f
   966  016B  0223               	subwf	_keyCount,w
   967  016C  1C03               	skipc
   968  016D  3400               	retlw	0
   969                           
   970                           ;main.c: 258: {
   971                           ;main.c: 259: keyCount = 150;
   972  016E  3096               	movlw	150
   973  016F  00A3               	movwf	_keyCount
   974  0170  3400               	retlw	0
   975  0171                     l1289:	
   976                           
   977                           ;main.c: 262: else
   978                           ;main.c: 263: {
   979                           ;main.c: 264: if(keyCount >= 5)
   980  0171  3005               	movlw	5
   981  0172  0223               	subwf	_keyCount,w
   982                           
   983                           ;main.c: 265: {
   984                           ;main.c: 266: keyCount = 0;
   985  0173  01A3               	clrf	_keyCount
   986  0174  1803               	btfsc	3,0
   987                           
   988                           ;main.c: 267: return 1;
   989  0175  3401               	retlw	1
   990  0176  3400               	retlw	0
   991  0177                     __end_of_keyRead:	
   992                           ;main.c: 270: }
   993                           ;main.c: 271: return 0;
   994                           
   995                           ;main.c: 268: }
   996                           ;main.c: 269: keyCount = 0;
   997                           
   998                           
   999                           	psect	text6
  1000  0152                     __ptext6:	
  1001 ;; *************** function _gotoSleep *****************
  1002 ;; Defined at:
  1003 ;;		line 65 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_µÍÓÐÐ§\main.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;		None
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;		None
  1008 ;; Return value:  Size  Location     Type
  1009 ;;                  1    wreg      void 
  1010 ;; Registers used:
  1011 ;;		wreg, status,2
  1012 ;; Tracked objects:
  1013 ;;		On entry : 0/0
  1014 ;;		On exit  : 0/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMMON   BANK0
  1017 ;;      Params:         0       0
  1018 ;;      Locals:         0       0
  1019 ;;      Temps:          0       0
  1020 ;;      Totals:         0       0
  1021 ;;Total ram usage:        0 bytes
  1022 ;; Hardware stack levels used:    1
  1023 ;; Hardware stack levels required when called:    1
  1024 ;; This function calls:
  1025 ;;		Nothing
  1026 ;; This function is called by:
  1027 ;;		_main
  1028 ;; This function uses a non-reentrant model
  1029 ;;
  1030                           
  1031                           
  1032                           ;psect for function _gotoSleep
  1033  0152                     _gotoSleep:	
  1034                           
  1035                           ;main.c: 67: sleepTime = 0;
  1036                           
  1037                           ;incstack = 0
  1038                           ; Regs used in _gotoSleep: [wreg+status,2]
  1039  0152  01A0               	clrf	_sleepTime
  1040                           
  1041                           ;main.c: 68: RBIE = 1;
  1042  0153  1589               	bsf	9,3	;volatile
  1043                           
  1044                           ;main.c: 69: GIE = 0;
  1045  0154  1389               	bcf	9,7	;volatile
  1046                           
  1047                           ;main.c: 71: IOCB = 0x18;
  1048  0155  3018               	movlw	24
  1049  0156  008E               	movwf	14	;volatile
  1050                           
  1051                           ;main.c: 72: OSCCON = 0X71;
  1052  0157  3071               	movlw	113
  1053  0158  0088               	movwf	8	;volatile
  1054                           
  1055                           ;main.c: 73: PORTA;
  1056  0159  0817               	movf	23,w	;volatile
  1057                           
  1058                           ;main.c: 74: PORTB;
  1059  015A  0805               	movf	5,w	;volatile
  1060  015B  0064               	clrwdt	;# 
  1061  015C  0063               	sleep	;# 
  1062  015D  0000               	nop	;# 
  1063                           
  1064                           ;main.c: 81: OSCCON = 0X81;
  1065  015E  3081               	movlw	129
  1066  015F  0088               	movwf	8	;volatile
  1067                           
  1068                           ;main.c: 82: PORTA;
  1069  0160  0817               	movf	23,w	;volatile
  1070                           
  1071                           ;main.c: 83: PORTB;
  1072  0161  0805               	movf	5,w	;volatile
  1073                           
  1074                           ;main.c: 84: IOCB = 0x00;
  1075  0162  018E               	clrf	14	;volatile
  1076                           
  1077                           ;main.c: 85: RBIE = 0;
  1078  0163  1189               	bcf	9,3	;volatile
  1079  0164  0008               	return
  1080  0165                     __end_of_gotoSleep:	
  1081                           
  1082                           	psect	text7
  1083  009E                     __ptext7:	
  1084 ;; *************** function _chrgCtr *****************
  1085 ;; Defined at:
  1086 ;;		line 89 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_µÍÓÐÐ§\main.c"
  1087 ;; Parameters:    Size  Location     Type
  1088 ;;		None
  1089 ;; Auto vars:     Size  Location     Type
  1090 ;;		None
  1091 ;; Return value:  Size  Location     Type
  1092 ;;                  1    wreg      void 
  1093 ;; Registers used:
  1094 ;;		wreg, status,2, status,0
  1095 ;; Tracked objects:
  1096 ;;		On entry : 0/0
  1097 ;;		On exit  : 0/0
  1098 ;;		Unchanged: 0/0
  1099 ;; Data sizes:     COMMON   BANK0
  1100 ;;      Params:         0       0
  1101 ;;      Locals:         0       0
  1102 ;;      Temps:          0       0
  1103 ;;      Totals:         0       0
  1104 ;;Total ram usage:        0 bytes
  1105 ;; Hardware stack levels used:    1
  1106 ;; Hardware stack levels required when called:    1
  1107 ;; This function calls:
  1108 ;;		Nothing
  1109 ;; This function is called by:
  1110 ;;		_main
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114                           
  1115                           ;psect for function _chrgCtr
  1116  009E                     _chrgCtr:	
  1117                           
  1118                           ;main.c: 91: if(0x10 & PORTB)
  1119                           
  1120                           ;incstack = 0
  1121                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  1122  009E  1E05               	btfss	5,4	;volatile
  1123  009F  28C0               	goto	l1367
  1124                           
  1125                           ;main.c: 92: {
  1126                           ;main.c: 94: workStep = 0;
  1127  00A0  01A8               	clrf	_workStep
  1128                           
  1129                           ;main.c: 95: waitTime = 0;
  1130  00A1  01A7               	clrf	_waitTime
  1131                           
  1132                           ;main.c: 96: workTime = 0;
  1133  00A2  01A6               	clrf	_workTime
  1134                           
  1135                           ;main.c: 97: chrgFlag = 1;
  1136  00A3  01A2               	clrf	_chrgFlag
  1137  00A4  0AA2               	incf	_chrgFlag,f
  1138                           
  1139                           ;main.c: 98: if(0x20 & PORTB)
  1140  00A5  1E85               	btfss	5,5	;volatile
  1141  00A6  28B3               	goto	l1359
  1142                           
  1143                           ;main.c: 99: {
  1144                           ;main.c: 101: if(++chrgFullCount > 200)
  1145  00A7  30C9               	movlw	201
  1146  00A8  0AA1               	incf	_chrgFullCount,f
  1147  00A9  0221               	subwf	_chrgFullCount,w
  1148  00AA  1C03               	skipc
  1149  00AB  0008               	return
  1150                           
  1151                           ;main.c: 102: {
  1152                           ;main.c: 103: chrgFullCount = 200;
  1153  00AC  30C8               	movlw	200
  1154  00AD  00A1               	movwf	_chrgFullCount
  1155                           
  1156                           ;main.c: 105: PORTA &= 0xFE;
  1157  00AE  1017               	bcf	23,0	;volatile
  1158                           
  1159                           ;main.c: 106: PORTB &= 0xFB;
  1160  00AF  1105               	bcf	5,2	;volatile
  1161                           
  1162                           ;main.c: 108: PORTB |= 0x82;
  1163  00B0  3082               	movlw	130
  1164  00B1  0485               	iorwf	5,f	;volatile
  1165  00B2  0008               	return
  1166  00B3                     l1359:	
  1167  00B3  3079               	movlw	121
  1168                           
  1169                           ;main.c: 111: else
  1170                           ;main.c: 112: {
  1171                           ;main.c: 113: chrgFullCount = 0;
  1172  00B4  01A1               	clrf	_chrgFullCount
  1173                           
  1174                           ;main.c: 115: PORTB &= 0x79;
  1175  00B5  0585               	andwf	5,f	;volatile
  1176                           
  1177                           ;main.c: 116: if(count1s < 50)
  1178  00B6  3032               	movlw	50
  1179  00B7  0225               	subwf	_count1s,w
  1180  00B8  1803               	skipnc
  1181  00B9  28BD               	goto	l419
  1182                           
  1183                           ;main.c: 117: {
  1184                           ;main.c: 118: PORTA |= 0x01;
  1185  00BA  1417               	bsf	23,0	;volatile
  1186                           
  1187                           ;main.c: 119: PORTB |= 0x04;
  1188  00BB  1505               	bsf	5,2	;volatile
  1189                           
  1190                           ;main.c: 120: }
  1191  00BC  0008               	return
  1192  00BD                     l419:	
  1193                           
  1194                           ;main.c: 121: else
  1195                           ;main.c: 122: {
  1196                           ;main.c: 123: PORTA &= 0xFE;
  1197  00BD  1017               	bcf	23,0	;volatile
  1198                           
  1199                           ;main.c: 124: PORTB &= 0xFB;
  1200  00BE  1105               	bcf	5,2	;volatile
  1201  00BF  0008               	return
  1202  00C0                     l1367:	
  1203                           
  1204                           ;main.c: 128: else
  1205                           ;main.c: 129: {
  1206                           ;main.c: 130: chrgFlag = 0;
  1207  00C0  01A2               	clrf	_chrgFlag
  1208  00C1  0008               	return
  1209  00C2                     __end_of_chrgCtr:	
  1210                           
  1211                           	psect	text8
  1212  0124                     __ptext8:	
  1213 ;; *************** function _InitSys *****************
  1214 ;; Defined at:
  1215 ;;		line 213 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_µÍÓÐÐ§\main.c"
  1216 ;; Parameters:    Size  Location     Type
  1217 ;;		None
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;		None
  1220 ;; Return value:  Size  Location     Type
  1221 ;;                  1    wreg      void 
  1222 ;; Registers used:
  1223 ;;		wreg, status,2
  1224 ;; Tracked objects:
  1225 ;;		On entry : B00/0
  1226 ;;		On exit  : 0/0
  1227 ;;		Unchanged: 0/0
  1228 ;; Data sizes:     COMMON   BANK0
  1229 ;;      Params:         0       0
  1230 ;;      Locals:         0       0
  1231 ;;      Temps:          0       0
  1232 ;;      Totals:         0       0
  1233 ;;Total ram usage:        0 bytes
  1234 ;; Hardware stack levels used:    1
  1235 ;; Hardware stack levels required when called:    1
  1236 ;; This function calls:
  1237 ;;		Nothing
  1238 ;; This function is called by:
  1239 ;;		_main
  1240 ;; This function uses a non-reentrant model
  1241 ;;
  1242                           
  1243                           
  1244                           ;psect for function _InitSys
  1245  0124                     _InitSys:	
  1246                           
  1247                           ;incstack = 0
  1248                           ; Regs used in _InitSys: [wreg+status,2]
  1249  0124  0000               	nop	;# 
  1250  0125  0064               	clrwdt	;# 
  1251                           
  1252                           ;main.c: 217: PORTA = 0x01;
  1253  0126  3001               	movlw	1
  1254  0127  0097               	movwf	23	;volatile
  1255                           
  1256                           ;main.c: 218: PORTB = 0xFF;
  1257  0128  30FF               	movlw	255
  1258  0129  0085               	movwf	5	;volatile
  1259                           
  1260                           ;main.c: 219: INTCON = 0;
  1261  012A  0189               	clrf	9	;volatile
  1262                           
  1263                           ;main.c: 220: OSCCON = 0X71;
  1264  012B  3071               	movlw	113
  1265  012C  0088               	movwf	8	;volatile
  1266                           
  1267                           ;main.c: 221: OPTION_REG = 0x00;
  1268  012D  0187               	clrf	7	;volatile
  1269                           
  1270                           ;main.c: 222: TMR0 = 155;
  1271  012E  309B               	movlw	155
  1272  012F  0081               	movwf	1	;volatile
  1273                           
  1274                           ;main.c: 223: INTCON = 0xE0;
  1275  0130  30E0               	movlw	224
  1276  0131  0089               	movwf	9	;volatile
  1277                           
  1278                           ;main.c: 224: TRISA = 0x00;
  1279  0132  0198               	clrf	24	;volatile
  1280                           
  1281                           ;main.c: 225: TRISB = 0x38;
  1282  0133  3038               	movlw	56
  1283  0134  0086               	movwf	6	;volatile
  1284                           
  1285                           ;main.c: 226: PORTA = 0x01;
  1286  0135  3001               	movlw	1
  1287  0136  0097               	movwf	23	;volatile
  1288                           
  1289                           ;main.c: 227: PORTB = 0xFF;
  1290  0137  30FF               	movlw	255
  1291  0138  0085               	movwf	5	;volatile
  1292                           
  1293                           ;main.c: 228: PDCONB = 0x00;
  1294  0139  018B               	clrf	11	;volatile
  1295                           
  1296                           ;main.c: 229: WPUB = 0x28;
  1297  013A  3028               	movlw	40
  1298  013B  008D               	movwf	13	;volatile
  1299  013C  0008               	return
  1300  013D                     __end_of_InitSys:	
  1301                           
  1302                           	psect	text9
  1303  00C2                     __ptext9:	
  1304 ;; *************** function _Timer0_Isr *****************
  1305 ;; Defined at:
  1306 ;;		line 365 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_µÍÓÐÐ§\main.c"
  1307 ;; Parameters:    Size  Location     Type
  1308 ;;		None
  1309 ;; Auto vars:     Size  Location     Type
  1310 ;;		None
  1311 ;; Return value:  Size  Location     Type
  1312 ;;                  1    wreg      void 
  1313 ;; Registers used:
  1314 ;;		wreg, status,2, status,0
  1315 ;; Tracked objects:
  1316 ;;		On entry : 0/0
  1317 ;;		On exit  : 0/0
  1318 ;;		Unchanged: 0/0
  1319 ;; Data sizes:     COMMON   BANK0
  1320 ;;      Params:         0       0
  1321 ;;      Locals:         0       0
  1322 ;;      Temps:          0       2
  1323 ;;      Totals:         0       2
  1324 ;;Total ram usage:        2 bytes
  1325 ;; Hardware stack levels used:    1
  1326 ;; This function calls:
  1327 ;;		Nothing
  1328 ;; This function is called by:
  1329 ;;		Interrupt level 1
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           
  1334                           ;psect for function _Timer0_Isr
  1335  00C2                     _Timer0_Isr:	
  1336                           
  1337                           ;main.c: 366: if (T0IF) {
  1338  00C2  1D09               	btfss	9,2	;volatile
  1339  00C3  28DC               	goto	i1l1179
  1340                           
  1341                           ;main.c: 368: TMR0 += 155;
  1342  00C4  309B               	movlw	155
  1343  00C5  0781               	addwf	1,f	;volatile
  1344                           
  1345                           ;main.c: 371: T0IF = 0;
  1346  00C6  1109               	bcf	9,2	;volatile
  1347                           
  1348                           ;main.c: 372: if(++intCount >= 100)
  1349  00C7  3064               	movlw	100
  1350  00C8  0AB1               	incf	_intCount,f
  1351  00C9  0231               	subwf	_intCount,w
  1352  00CA  1C03               	skipc
  1353  00CB  28DC               	goto	i1l1179
  1354  00CC  3064               	movlw	100
  1355                           
  1356                           ;main.c: 373: {
  1357                           ;main.c: 374: IntFlag = 1;
  1358  00CD  01B2               	clrf	_IntFlag
  1359  00CE  0AB2               	incf	_IntFlag,f
  1360                           
  1361                           ;main.c: 375: intCount = 0;
  1362  00CF  01B1               	clrf	_intCount
  1363                           
  1364                           ;main.c: 376: if(++count1s >= 100)
  1365  00D0  0AA5               	incf	_count1s,f
  1366  00D1  0225               	subwf	_count1s,w
  1367  00D2  1C03               	skipc
  1368  00D3  28DC               	goto	i1l1179
  1369                           
  1370                           ;main.c: 377: {
  1371                           ;main.c: 378: count1s = 0;
  1372  00D4  01A5               	clrf	_count1s
  1373                           
  1374                           ;main.c: 379: if(workTime > 0)
  1375  00D5  0826               	movf	_workTime,w
  1376  00D6  1903               	btfsc	3,2
  1377  00D7  28D9               	goto	i1l1175
  1378                           
  1379                           ;main.c: 380: workTime--;
  1380  00D8  03A6               	decf	_workTime,f
  1381  00D9                     i1l1175:	
  1382                           
  1383                           ;main.c: 381: if(waitTime > 0)
  1384  00D9  0827               	movf	_waitTime,w
  1385  00DA  1D03               	btfss	3,2
  1386                           
  1387                           ;main.c: 382: waitTime--;
  1388  00DB  03A7               	decf	_waitTime,f
  1389  00DC                     i1l1179:	
  1390                           
  1391                           ;main.c: 383: }
  1392                           ;main.c: 384: }
  1393                           ;main.c: 386: }
  1394                           ;main.c: 388: if (RBIF) {
  1395  00DC  1809               	btfsc	9,0	;volatile
  1396                           
  1397                           ;main.c: 389: RBIF = 0;
  1398  00DD  1009               	bcf	9,0	;volatile
  1399  00DE  0834               	movf	??_Timer0_Isr+1,w
  1400  00DF  008A               	movwf	10
  1401  00E0  0E33               	swapf	??_Timer0_Isr^0,w
  1402  00E1  0083               	movwf	3
  1403  00E2  0ECE               	swapf	78,f
  1404  00E3  0E4E               	swapf	78,w
  1405  00E4  0009               	retfie
  1406  00E5                     __end_of_Timer0_Isr:	
  1407  004E                     btemp	set	78	;btemp
  1408  004E                     wtemp0	set	78
  1409                           
  1410                           	psect	intentry
  1411  0004                     __pintentry:	
  1412                           ;incstack = 0
  1413                           ; Regs used in _Timer0_Isr: [wreg+status,2+status,0]
  1414                           
  1415  0004                     interrupt_function:	
  1416  004E                     saved_w	set	btemp
  1417  0004  00CE               	movwf	btemp
  1418  0005  0E03               	swapf	3,w
  1419  0006  00B3               	movwf	??_Timer0_Isr
  1420  0007  080A               	movf	10,w
  1421  0008  00B4               	movwf	??_Timer0_Isr+1
  1422  0009  28C2               	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            46      3      22

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    _keyCtr->_keyRead

Critical Paths under _Timer0_Isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      22
                            _InitSys
                            _chrgCtr
                          _gotoSleep
                             _keyCtr
                            _showRGB
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _rainbow
 ---------------------------------------------------------------------------------
 (2) _rainbow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _showRGB                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               0     0      0      22
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _gotoSleep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSys                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Timer0_Isr                                           2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitSys
   _chrgCtr
   _gotoSleep
   _keyCtr
     _keyRead
   _showRGB
   _workCtr
     _rainbow

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               2E      3      16       3       47.8%
ABS                  0      0      16       4        0.0%
BITBANK0            2E      0       0       5        0.0%
DATA                 0      0      16       6        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Jun 16 14:41:19 2021

                     fsr 0004                      l401 0106                      l405 0113  
                    l442 0100                      l419 00BD                      l451 014B  
                    l439 00F5                      l472 0060                      _GIE 004F  
                    _red 002F                      indf 0000                     l1221 0035  
                   l1213 002E                     l1223 0039                     l1215 0030  
                   l1241 004D                     l1235 0044                     l1227 003C  
                   l1219 0033                     l1333 00F7                     l1229 0040  
                   l1327 00EC                     l1337 00FE                     l1329 00EE  
                   l1249 0054                     l1441 010A                     l1359 00B3  
                   l1367 00C0                     l1279 0073                     l1289 0171  
                   l1397 008E                     l1389 0084                     l1399 0091  
                   _T0IF 004A                     _IOCB 000E                     _RBIE 004B  
                   _RBIF 0048                     _TMR0 0001                     _WPUB 000D  
                   _blue 002B                     _main 0105                     btemp 004E  
                   start 000A          __end_of_InitSys 013D                    ?_main 0033  
                  _PORTA 0017                    _PORTB 0005                    _TRISA 0018  
                  _TRISB 0006          __end_of_chrgCtr 00C2          __end_of_keyRead 0177  
                  _green 002D          __end_of_rainbow 0079                    pclath 000A  
        __end_of_showRGB 0105                    status 0003                    wtemp0 004E  
        __end_of_workCtr 009E          __initialization 000B             __end_of_main 0124  
                 ??_main 0000                   i1l1175 00D9                   i1l1179 00DC  
                 _PDCONB 000B                   _INTCON 0009                   _OSCCON 0008  
              ??_InitSys 0000               _Timer0_Isr 00C2                   _keyCtr 013D  
              ??_chrgCtr 0000                ??_keyRead 0000                ??_rainbow 0000  
                 saved_w 004E                ??_showRGB 0000                ??_workCtr 0000  
__end_of__initialization 000F           __pcstackCOMMON 0000               __pbssBANK0 0020  
     __size_of_gotoSleep 0013              ?_Timer0_Isr 0033               __pmaintext 0105  
             __pintentry 0004                  ?_keyCtr 0033                  _IntFlag 0032  
                _InitSys 0124          __size_of_keyCtr 0015                  _chrgCtr 009E  
                __ptext0 0000                  __ptext1 0079                  __ptext2 0011  
                __ptext3 00E5                  __ptext4 013D                  __ptext5 0165  
                __ptext6 0152                  __ptext7 009E                  __ptext8 0124  
                __ptext9 00C2                  _count1s 0025                  _keyRead 0165  
                _lastRed 002E        __end_of_gotoSleep 0165                  _rainbow 0011  
                _showRGB 00E5      __size_of_Timer0_Isr 0023                  clrloop0 0178  
                _workCtr 0079     end_of_initialization 000F           __end_of_keyCtr 0152  
    start_initialization 000B             ??_Timer0_Isr 0033                 ??_keyCtr 0000  
       keyRead@KeyStatus 0035                ___latbits 0000            __pcstackBANK0 0033  
     __end_of_Timer0_Isr 00E5            _chrgFullCount 0021                 ?_InitSys 0033  
              _delayTime 0029                 ?_chrgCtr 0033                _colorStep 0030  
               ?_keyRead 0033                 ?_rainbow 0033                _lastGreen 002C  
               ?_showRGB 0033                _gotoSleep 0152                 ?_workCtr 0033  
      interrupt_function 0004                clear_ram0 0177                _sleepTime 0020  
             ?_gotoSleep 0033         __size_of_InitSys 0019         __size_of_chrgCtr 0024  
       __size_of_keyRead 0012                 _chrgFlag 0022         __size_of_rainbow 0068  
               _ledCount 0024         __size_of_showRGB 0020         __size_of_workCtr 0025  
               _keyCount 0023                 _lastBlue 002A                 _intCount 0031  
          __size_of_main 001F                 _waitTime 0027                 _workTime 0026  
               _workStep 0028              ??_gotoSleep 0000                 intlevel1 0000  
             _OPTION_REG 0007  
