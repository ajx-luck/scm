

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Aug 22 14:47:32 2023

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	79F5135
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text26,local,class=CODE,merge=1,delta=2
    26                           	psect	text28,local,class=CODE,merge=1,delta=2
    27                           	psect	text30,local,class=CODE,merge=1,delta=2
    28                           	psect	text31,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	pa_nodes0,global,class=CODE,delta=2
    31                           	dabs	1,0x7E,2
    32  0000                     
    33                           ; Version 1.45
    34                           ; Generated 16/11/2017 GMT
    35                           ; 
    36                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC16F887 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	strings
    69  0704                     __pstrings:	
    70  0704                     stringtab:	
    71  0704                     __stringtab:	
    72  0704                     stringcode:	
    73                           ;	String table - string pointers are 1 byte each
    74                           
    75  0704                     stringdir:	
    76  0704  3007               	movlw	high stringdir
    77  0705  008A               	movwf	10
    78  0706  0804               	movf	4,w
    79  0707  0A84               	incf	4,f
    80  0708  0782               	addwf	2,f
    81  0709                     __stringbase:	
    82  0709  3400               	retlw	0
    83  070A                     __end_of__stringtab:	
    84  070A                     _pfg_select:	
    85  070A  3402               	retlw	2
    86  070B                     __end_of_pfg_select:	
    87  070B                     _curset:	
    88  070B  341E               	retlw	30
    89  070C                     __end_of_curset:	
    90  070C                     _Cur_Adcon:	
    91  070C  3404               	retlw	4
    92  070D                     __end_of_Cur_Adcon:	
    93  001F                     _ADCON0	set	31
    94  001E                     _ADRESH	set	30
    95  001A                     _RCREG	set	26
    96  0019                     _TXREG	set	25
    97  0012                     _T2CON	set	18
    98  000D                     _PIR2	set	13
    99  000C                     _PIR1	set	12
   100  000B                     _INTCON	set	11
   101  0006                     _PORTB	set	6
   102  0005                     _PORTA	set	5
   103  00F9                     _GODONE	set	249
   104  00C1                     _OERR	set	193
   105  00C4                     _CREN	set	196
   106  00C6                     _RX9EN	set	198
   107  00C7                     _SPEN	set	199
   108  0061                     _TMR2IF	set	97
   109  0065                     _RCIF	set	101
   110  005F                     _GIE	set	95
   111  0088                     _PFGSTOP	set	136
   112  009F                     _ADCON1	set	159
   113  009E                     _ADRESL	set	158
   114  0099                     _SPBRG	set	153
   115  0096                     _IOCB	set	150
   116  0095                     _WPUB	set	149
   117  0094                     _PWM23DT	set	148
   118  0093                     _PWM01DT	set	147
   119  0092                     _PR2	set	146
   120  008F                     _OSCCON	set	143
   121  008D                     _PIE2	set	141
   122  008C                     _PIE1	set	140
   123  0086                     _TRISB	set	134
   124  0085                     _TRISA	set	133
   125  0081                     _OPTION_REG	set	129
   126  04C1                     _TRMT	set	1217
   127  04C3                     _SCKP	set	1219
   128  04C4                     _SYNC	set	1220
   129  04C5                     _TXEN	set	1221
   130  04C6                     _TX9EN	set	1222
   131  0464                     _TXIE	set	1124
   132  0465                     _RCIE	set	1125
   133  011E                     _PFGCON1	set	286
   134  011B                     _PFGCON	set	283
   135  0119                     _PFGADJ	set	281
   136  011F                     _PFGDATA1	set	287
   137  011C                     _PWMD01H	set	284
   138  010D                     _EEADR	set	269
   139  010C                     _EEDAT	set	268
   140  0109                     _PWMCON2	set	265
   141  0108                     _PWMCON1	set	264
   142  0107                     _PWMCON0	set	263
   143  0105                     _WDTCON	set	261
   144  0194                     _PWMD1L	set	404
   145  0191                     _PWMT4L	set	401
   146  0190                     _PWMTH	set	400
   147  018F                     _PWMTL	set	399
   148  018E                     _WPUA	set	398
   149  0C60                     _RD	set	3168
   150  0C67                     _EEPGD	set	3175
   151                           
   152                           	psect	cinit
   153  000F                     start_initialization:	
   154                           ; #config settings
   155                           
   156  000F                     __initialization:	
   157  000F  3020               	movlw	low __pbssBANK0
   158                           
   159                           ; Clear objects allocated to BITCOMMON
   160  0010  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   161  0011  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   162                           
   163                           ; Clear objects allocated to COMMON
   164  0012  01F8               	clrf	__pbssCOMMON& (0+127)
   165  0013  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   166  0014  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   167  0015  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   168                           
   169                           ; Clear objects allocated to BANK0
   170  0016  1383               	bcf	3,7	;select IRP bank0
   171  0017  0084               	movwf	4
   172  0018  305E               	movlw	low (__pbssBANK0+62)
   173  0019  118A  2716  118A   	fcall	clear_ram0
   174                           
   175                           ; Clear objects allocated to BANK1
   176  001C  30A0               	movlw	low __pbssBANK1
   177  001D  0084               	movwf	4
   178  001E  30AE               	movlw	low (__pbssBANK1+14)
   179  001F  118A  2716         	fcall	clear_ram0
   180  0021                     end_of_initialization:	
   181                           ;End of C runtime variable initialization code
   182                           
   183  0021                     __end_of__initialization:	
   184  0021  0183               	clrf	3
   185  0022  118A  2D7A         	ljmp	_main	;jump to C main() function
   186                           
   187                           	psect	bitbssCOMMON
   188  0380                     __pbitbssCOMMON:	
   189  0380                     Test_Pwm@curokf1:	
   190  0380                     	ds	1
   191  0381                     Test_water@watnof:	
   192  0381                     	ds	1
   193  0382                     Set_Pwm_Onoff@adonf:	
   194  0382                     	ds	1
   195  0383                     _PfgChangef:	
   196  0383                     	ds	1
   197  0384                     _curupf:	
   198  0384                     	ds	1
   199  0385                     _onoff_fst:	
   200  0385                     	ds	1
   201  0386                     _PFGchgf:	
   202  0386                     	ds	1
   203  0387                     _curokf:	
   204  0387                     	ds	1
   205  0388                     _ponecf:	
   206  0388                     	ds	1
   207  0389                     _pwmtonf:	
   208  0389                     	ds	1
   209  038A                     _pwmtf1:	
   210  038A                     	ds	1
   211  038B                     _pwmtf:	
   212  038B                     	ds	1
   213  038C                     _on_off:	
   214  038C                     	ds	1
   215  038D                     _onoff:	
   216  038D                     	ds	1
   217  038E                     _errff:	
   218  038E                     	ds	1
   219  038F                     _errf:	
   220  038F                     	ds	1
   221                           
   222                           	psect	bssCOMMON
   223  0078                     __pbssCOMMON:	
   224  0078                     _pfgonetemp:	
   225  0078                     	ds	2
   226  007A                     _whFlag:	
   227  007A                     	ds	1
   228  007B                     _currDuty:	
   229  007B                     	ds	1
   230                           
   231                           	psect	bssBANK0
   232  0020                     __pbssBANK0:	
   233  0020                     Test_water@curstrold:	
   234  0020                     	ds	2
   235  0022                     _pwmlv:	
   236  0022                     	ds	2
   237  0024                     _pwmold:	
   238  0024                     	ds	2
   239  0026                     _cursum:	
   240  0026                     	ds	2
   241  0028                     _pwmnold:	
   242  0028                     	ds	2
   243  002A                     _pwmlst:	
   244  002A                     	ds	2
   245  002C                     _pwmfst:	
   246  002C                     	ds	2
   247  002E                     _adonetemp:	
   248  002E                     	ds	2
   249  0030                     AD_Testing@adsum:	
   250  0030                     	ds	2
   251  0032                     AD_Testing@admax:	
   252  0032                     	ds	2
   253  0034                     AD_Testing@admin:	
   254  0034                     	ds	2
   255  0036                     _AD_Result:	
   256  0036                     	ds	2
   257  0038                     Test_Pwm@ondly:	
   258  0038                     	ds	1
   259  0039                     Set_Pwm_Onoff@funold:	
   260  0039                     	ds	1
   261  003A                     Set_Pwm_Onoff@cur_adcl:	
   262  003A                     	ds	1
   263  003B                     Set_Pwm_Onoff@pwmcl:	
   264  003B                     	ds	1
   265  003C                     Test_Pwm_Cur@curdowncl:	
   266  003C                     	ds	1
   267  003D                     Test_Pwm_Cur@curupcl:	
   268  003D                     	ds	1
   269  003E                     _curmax:	
   270  003E                     	ds	1
   271  003F                     _pwmlc:	
   272  003F                     	ds	1
   273  0040                     _pwmhc:	
   274  0040                     	ds	1
   275  0041                     _whavecl:	
   276  0041                     	ds	1
   277  0042                     _wnoncl:	
   278  0042                     	ds	1
   279  0043                     _Ytzpcl:	
   280  0043                     	ds	1
   281  0044                     _curokcl:	
   282  0044                     	ds	1
   283  0045                     _cur_addatold2:	
   284  0045                     	ds	1
   285  0046                     _cur_addatold1:	
   286  0046                     	ds	1
   287  0047                     _cur_addatold0:	
   288  0047                     	ds	1
   289  0048                     _curdownc:	
   290  0048                     	ds	1
   291  0049                     _curupc:	
   292  0049                     	ds	1
   293  004A                     _ponesec:	
   294  004A                     	ds	1
   295  004B                     _cur_addat:	
   296  004B                     	ds	1
   297  004C                     AD_Testing@adtimes:	
   298  004C                     	ds	1
   299  004D                     _ganshaoCheckTime:	
   300  004D                     	ds	1
   301  004E                     _rececount:	
   302  004E                     	ds	1
   303  004F                     _chrgFullTime:	
   304  004F                     	ds	1
   305  0050                     _chrgFullFlag:	
   306  0050                     	ds	1
   307  0051                     _longKey3PressFlag:	
   308  0051                     	ds	1
   309  0052                     _longKeyPressFlag:	
   310  0052                     	ds	1
   311  0053                     _keyCount3:	
   312  0053                     	ds	1
   313  0054                     _keyCount2:	
   314  0054                     	ds	1
   315  0055                     _chrgStep:	
   316  0055                     	ds	1
   317  0056                     _led2Step:	
   318  0056                     	ds	1
   319  0057                     _led1Step:	
   320  0057                     	ds	1
   321  0058                     _sendcount:	
   322  0058                     	ds	1
   323  0059                     _waitSendTime:	
   324  0059                     	ds	1
   325  005A                     _keyCount:	
   326  005A                     	ds	1
   327  005B                     _subTime:	
   328  005B                     	ds	1
   329  005C                     _addTime:	
   330  005C                     	ds	1
   331  005D                     _tcount:	
   332  005D                     	ds	1
   333                           
   334                           	psect	bssBANK1
   335  00A0                     __pbssBANK1:	
   336  00A0                     _Recebuffer:	
   337  00A0                     	ds	4
   338  00A4                     _Sendbuffer:	
   339  00A4                     	ds	4
   340  00A8                     Test_water@strupc:	
   341  00A8                     	ds	2
   342  00AA                     Set_Pwm_Onoff@cursumt:	
   343  00AA                     	ds	2
   344  00AC                     _chrgGreenLedTime:	
   345  00AC                     	ds	2
   346                           
   347                           	psect	clrtext
   348  0716                     clear_ram0:	
   349                           ;	Called with FSR containing the base address, and
   350                           ;	W with the last address+1
   351                           
   352  0716  0064               	clrwdt	;clear the watchdog before getting into this loop
   353  0717                     clrloop0:	
   354  0717  0180               	clrf	0	;clear RAM location pointed to by FSR
   355  0718  0A84               	incf	4,f	;increment pointer
   356  0719  0604               	xorwf	4,w	;XOR with final address
   357  071A  1903               	btfsc	3,2	;have we reached the end yet?
   358  071B  3400               	retlw	0	;all done for this memory range, return
   359  071C  0604               	xorwf	4,w	;XOR again to restore value
   360  071D  2F17               	goto	clrloop0	;do the next byte
   361                           
   362                           	psect	cstackCOMMON
   363  0072                     __pcstackCOMMON:	
   364  0072                     ?_Set_jiyi_re:	
   365  0072                     ?_Test_Pwm:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0072                     ?_Set_Pwm_Onoff:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0072                     ??_Set_Pwm_Onoff:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0072                     ?_Set_Usart_Async:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0072                     ?_Set_CCP_PWM:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0072                     ?_checkVoll:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0072                     ?_closePWM:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0072                     ?_keyCtr:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0072                     ?_chrgCtr:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0072                     ?_uartSendCtr:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0072                     ?_Init_ic:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0072                     ?_Init_ram:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0072                     ?_Sys_set:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0072                     ?_Pwm_Test:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0072                     ?_Set_Work:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0072                     ?_time0:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0072                     ?_main:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0072                     ?_keyRead:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0072                     ?_keyRead2:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0072                     ?_keyRead3:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0072                     ?_Test_Pwm_Cur:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0072                     ?_PFG_read_fst:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0072                     ?_Work_RAM_CLR:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0072                     ?_Get_CUR_Dat:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0072                     ?_YTPFG_Flash:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0072                     ?_Test_PWM_Fst:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0072                     ?_Test_water:	
   444                           ; 1 bytes @ 0x0
   445                           
   446                           
   447                           ; 1 bytes @ 0x0
   448  0072                     	ds	1
   449  0073                     Set_Pwm_Onoff@funod:	
   450                           
   451                           ; 1 bytes @ 0x1
   452  0073                     	ds	1
   453  0074                     Set_Pwm_Onoff@fun:	
   454                           
   455                           ; 1 bytes @ 0x2
   456  0074                     	ds	1
   457  0075                     ??_time0:	
   458                           
   459                           ; 1 bytes @ 0x3
   460  0075                     	ds	3
   461                           
   462                           	psect	cstackBANK0
   463  005E                     __pcstackBANK0:	
   464  005E                     ??_Set_jiyi_re:	
   465  005E                     ??_Set_Usart_Async:	
   466                           ; 1 bytes @ 0x0
   467                           
   468  005E                     ?_AD_Testing:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  005E                     ??_Set_CCP_PWM:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  005E                     ??_checkVoll:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  005E                     ??_closePWM:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  005E                     ??_chrgCtr:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  005E                     ??_uartSendCtr:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  005E                     ?_Delay:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  005E                     ??_Init_ic:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  005E                     ??_Init_ram:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  005E                     ??_Sys_set:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  005E                     ??_Set_Work:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  005E                     ??_keyRead:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  005E                     ??_keyRead2:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  005E                     ??_keyRead3:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  005E                     ?_Pwm_add:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  005E                     ?_Pwm_dec:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  005E                     ??_Work_RAM_CLR:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  005E                     ??_YTPFG_Flash:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  005E                     ??_Test_water:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  005E                     ?___awdiv:	
   526                           ; 1 bytes @ 0x0
   527                           
   528  005E                     Set_jiyi_re@raddr:	
   529                           ; 2 bytes @ 0x0
   530                           
   531  005E                     AD_Testing@ad_ch:	
   532                           ; 1 bytes @ 0x0
   533                           
   534  005E                     keyRead@keyStatus:	
   535                           ; 1 bytes @ 0x0
   536                           
   537  005E                     keyRead2@keyStatus:	
   538                           ; 1 bytes @ 0x0
   539                           
   540  005E                     keyRead3@keyStatus:	
   541                           ; 1 bytes @ 0x0
   542                           
   543  005E                     Delay@dtemp:	
   544                           ; 1 bytes @ 0x0
   545                           
   546  005E                     Pwm_add@pwmlset:	
   547                           ; 2 bytes @ 0x0
   548                           
   549  005E                     Pwm_dec@pwmfset:	
   550                           ; 2 bytes @ 0x0
   551                           
   552  005E                     ___awdiv@divisor:	
   553                           ; 2 bytes @ 0x0
   554                           
   555                           
   556                           ; 2 bytes @ 0x0
   557  005E                     	ds	1
   558  005F                     ??_keyCtr:	
   559  005F                     Set_jiyi_re@redata:	
   560                           ; 1 bytes @ 0x1
   561                           
   562  005F                     AD_Testing@ad_lr:	
   563                           ; 1 bytes @ 0x1
   564                           
   565  005F                     keyCtr@kclick:	
   566                           ; 1 bytes @ 0x1
   567                           
   568                           
   569                           ; 1 bytes @ 0x1
   570  005F                     	ds	1
   571  0060                     ??_AD_Testing:	
   572  0060                     ??_Delay:	
   573                           ; 1 bytes @ 0x2
   574                           
   575  0060                     ?_Delay_nms:	
   576                           ; 1 bytes @ 0x2
   577                           
   578  0060                     ??_Pwm_add:	
   579                           ; 1 bytes @ 0x2
   580                           
   581  0060                     ??_Pwm_dec:	
   582                           ; 1 bytes @ 0x2
   583                           
   584  0060                     ??_PFG_read_fst:	
   585                           ; 1 bytes @ 0x2
   586                           
   587  0060                     YTPFG_Flash@templ:	
   588                           ; 1 bytes @ 0x2
   589                           
   590  0060                     Delay_nms@inittempl:	
   591                           ; 1 bytes @ 0x2
   592                           
   593  0060                     ___awdiv@dividend:	
   594                           ; 2 bytes @ 0x2
   595                           
   596                           
   597                           ; 2 bytes @ 0x2
   598  0060                     	ds	1
   599  0061                     Test_water@temph:	
   600  0061                     YTPFG_Flash@temp:	
   601                           ; 1 bytes @ 0x3
   602                           
   603                           
   604                           ; 2 bytes @ 0x3
   605  0061                     	ds	1
   606  0062                     ??_Delay_nms:	
   607  0062                     ??___awdiv:	
   608                           ; 1 bytes @ 0x4
   609                           
   610  0062                     AD_Testing@ad_fd:	
   611                           ; 1 bytes @ 0x4
   612                           
   613  0062                     Pwm_add@addcl:	
   614                           ; 1 bytes @ 0x4
   615                           
   616  0062                     Pwm_dec@deccl:	
   617                           ; 1 bytes @ 0x4
   618                           
   619  0062                     PFG_read_fst@templ:	
   620                           ; 1 bytes @ 0x4
   621                           
   622  0062                     ___awdiv@counter:	
   623                           ; 1 bytes @ 0x4
   624                           
   625  0062                     Delay_nms@i:	
   626                           ; 1 bytes @ 0x4
   627                           
   628  0062                     Test_water@temp:	
   629                           ; 2 bytes @ 0x4
   630                           
   631                           
   632                           ; 2 bytes @ 0x4
   633  0062                     	ds	1
   634  0063                     AD_Testing@i:	
   635  0063                     PFG_read_fst@temph:	
   636                           ; 1 bytes @ 0x5
   637                           
   638  0063                     ___awdiv@sign:	
   639                           ; 1 bytes @ 0x5
   640                           
   641  0063                     Pwm_add@temp:	
   642                           ; 1 bytes @ 0x5
   643                           
   644  0063                     Pwm_dec@temp:	
   645                           ; 2 bytes @ 0x5
   646                           
   647                           
   648                           ; 2 bytes @ 0x5
   649  0063                     	ds	1
   650  0064                     Delay_nms@gtemp:	
   651  0064                     PFG_read_fst@pfgconset:	
   652                           ; 1 bytes @ 0x6
   653                           
   654  0064                     AD_Testing@data:	
   655                           ; 1 bytes @ 0x6
   656                           
   657  0064                     ___awdiv@quotient:	
   658                           ; 2 bytes @ 0x6
   659                           
   660                           
   661                           ; 2 bytes @ 0x6
   662  0064                     	ds	1
   663  0065                     ??_Test_Pwm_Cur:	
   664  0065                     Test_Pwm_Cur@temph:	
   665                           ; 1 bytes @ 0x7
   666                           
   667  0065                     PFG_read_fst@temp:	
   668                           ; 1 bytes @ 0x7
   669                           
   670                           
   671                           ; 2 bytes @ 0x7
   672  0065                     	ds	1
   673  0066                     ??_Get_CUR_Dat:	
   674  0066                     Test_Pwm_Cur@templ:	
   675                           ; 1 bytes @ 0x8
   676                           
   677                           
   678                           ; 1 bytes @ 0x8
   679  0066                     	ds	1
   680  0067                     ??_Test_PWM_Fst:	
   681  0067                     Test_PWM_Fst@templ:	
   682                           ; 1 bytes @ 0x9
   683                           
   684                           
   685                           ; 1 bytes @ 0x9
   686  0067                     	ds	1
   687  0068                     ??_Test_Pwm:	
   688                           
   689                           ; 1 bytes @ 0xA
   690  0068                     	ds	4
   691  006C                     Test_Pwm@templ:	
   692                           
   693                           ; 1 bytes @ 0xE
   694  006C                     	ds	1
   695  006D                     ??_Pwm_Test:	
   696  006D                     Pwm_Test@templ:	
   697                           ; 1 bytes @ 0xF
   698                           
   699                           
   700                           ; 1 bytes @ 0xF
   701  006D                     	ds	1
   702  006E                     ??_main:	
   703                           
   704                           	psect	maintext
   705  057A                     __pmaintext:	
   706                           ; 1 bytes @ 0x10
   707 ;;
   708 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   709 ;;
   710 ;; *************** function _main *****************
   711 ;; Defined at:
   712 ;;		line 208 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
   713 ;; Parameters:    Size  Location     Type
   714 ;;		None
   715 ;; Auto vars:     Size  Location     Type
   716 ;;		None
   717 ;; Return value:  Size  Location     Type
   718 ;;                  1    wreg      void 
   719 ;; Registers used:
   720 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   721 ;; Tracked objects:
   722 ;;		On entry : B00/0
   723 ;;		On exit  : 300/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   726 ;;      Params:         0       0       0       0       0
   727 ;;      Locals:         0       0       0       0       0
   728 ;;      Temps:          0       0       0       0       0
   729 ;;      Totals:         0       0       0       0       0
   730 ;;Total ram usage:        0 bytes
   731 ;; Hardware stack levels required when called:    7
   732 ;; This function calls:
   733 ;;		_AD_Testing
   734 ;;		_Delay_nms
   735 ;;		_Init_ic
   736 ;;		_Init_ram
   737 ;;		_Pwm_Test
   738 ;;		_Set_CCP_PWM
   739 ;;		_Set_Usart_Async
   740 ;;		_Set_Work
   741 ;;		_Sys_set
   742 ;;		_checkVoll
   743 ;;		_chrgCtr
   744 ;;		_closePWM
   745 ;;		_keyCtr
   746 ;;		_uartSendCtr
   747 ;; This function is called by:
   748 ;;		Startup code after reset
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           
   753                           ;psect for function _main
   754  057A                     _main:	
   755                           
   756                           ;incstack = 0
   757                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   758  057A  0064               	clrwdt	;# 
   759                           
   760                           ;main.c: 213: Init_ic();
   761  057B  118A  25DF  118A   	fcall	_Init_ic
   762                           
   763                           ;main.c: 214: Delay_nms(200);
   764  057E  30C8               	movlw	200
   765  057F  1283               	bcf	3,5	;RP0=0, select bank0
   766  0580  00E0               	movwf	Delay_nms@inittempl
   767  0581  01E1               	clrf	Delay_nms@inittempl+1
   768  0582  118A  262E  118A   	fcall	_Delay_nms
   769                           
   770                           ;main.c: 215: Init_ram();
   771  0585  118A  26F7  118A   	fcall	_Init_ram
   772                           
   773                           ;main.c: 216: Set_Usart_Async();
   774  0588  118A  26E4  118A   	fcall	_Set_Usart_Async
   775  058B                     l8465:	
   776                           
   777                           ;main.c: 218: {
   778                           ;main.c: 219: if(tcount >= 40)
   779  058B  3028               	movlw	40
   780  058C  1283               	bcf	3,5	;RP0=0, select bank0
   781  058D  025D               	subwf	_tcount,w	;volatile
   782  058E  1C03               	skipc
   783  058F  2D8B               	goto	l8465
   784                           
   785                           ;main.c: 220: {
   786                           ;main.c: 221: tcount = 0;
   787  0590  01DD               	clrf	_tcount	;volatile
   788                           
   789                           ;main.c: 222: Sys_set();
   790  0591  118A  25CC  118A   	fcall	_Sys_set
   791                           
   792                           ;main.c: 226: if(whFlag)
   793  0594  087A               	movf	_whFlag,w
   794  0595  1903               	btfsc	3,2
   795  0596  2DAB               	goto	l8485
   796                           
   797                           ;main.c: 227: {
   798                           ;main.c: 228: Set_Work();
   799  0597  118A  271E  118A   	fcall	_Set_Work
   800                           
   801                           ;main.c: 230: onoff=1;
   802  059A  16F1               	bsf	_onoff/(0+8),_onoff& (0+7)	;volatile
   803                           
   804                           ;main.c: 231: AD_Testing(1,13,1);
   805  059B  300D               	movlw	13
   806  059C  00DE               	movwf	AD_Testing@ad_ch
   807  059D  3001               	movlw	1
   808  059E  01DF               	clrf	AD_Testing@ad_lr
   809  059F  0ADF               	incf	AD_Testing@ad_lr,f
   810  05A0  118A  244A  118A   	fcall	_AD_Testing
   811                           
   812                           ;main.c: 232: Set_CCP_PWM();
   813  05A3  118A  26CF  118A   	fcall	_Set_CCP_PWM
   814                           
   815                           ;main.c: 233: checkVoll();
   816  05A6  118A  2682  118A   	fcall	_checkVoll
   817                           
   818                           ;main.c: 235: PORTA |= 0x08;
   819  05A9  1585               	bsf	5,3	;volatile
   820                           
   821                           ;main.c: 236: }
   822  05AA  2DB1               	goto	l8491
   823  05AB                     l8485:	
   824                           
   825                           ;main.c: 237: else
   826                           ;main.c: 238: {
   827                           ;main.c: 239: closePWM();
   828  05AB  118A  270D  118A   	fcall	_closePWM
   829                           
   830                           ;main.c: 240: onoff=0;
   831  05AE  12F1               	bcf	_onoff/(0+8),_onoff& (0+7)	;volatile
   832                           
   833                           ;main.c: 241: PORTA &= 0xF7;
   834  05AF  1303               	bcf	3,6	;RP1=0, select bank0
   835  05B0  1185               	bcf	5,3	;volatile
   836  05B1                     l8491:	
   837                           
   838                           ;main.c: 242: }
   839                           ;main.c: 243: Pwm_Test();
   840  05B1  118A  2024  118A   	fcall	_Pwm_Test
   841                           
   842                           ;main.c: 244: keyCtr();
   843  05B4  118A  24E4  118A   	fcall	_keyCtr
   844                           
   845                           ;main.c: 245: chrgCtr();
   846  05B7  118A  25FF  118A   	fcall	_chrgCtr
   847                           
   848                           ;main.c: 246: uartSendCtr();
   849  05BA  118A  265A  118A   	fcall	_uartSendCtr
   850                           
   851                           ;main.c: 248: if(PORTB & 0x10)
   852  05BD  1283               	bcf	3,5	;RP0=0, select bank0
   853  05BE  1E06               	btfss	6,4	;volatile
   854  05BF  2DC2               	goto	l8503
   855                           
   856                           ;main.c: 249: {
   857                           ;main.c: 250: ganshaoCheckTime = 0;
   858  05C0  01CD               	clrf	_ganshaoCheckTime
   859                           
   860                           ;main.c: 251: }
   861  05C1  2D8B               	goto	l8465
   862  05C2                     l8503:	
   863                           
   864                           ;main.c: 252: else
   865                           ;main.c: 253: {
   866                           ;main.c: 254: if(++ganshaoCheckTime > 10)
   867  05C2  300B               	movlw	11
   868  05C3  0ACD               	incf	_ganshaoCheckTime,f
   869  05C4  024D               	subwf	_ganshaoCheckTime,w
   870  05C5  1C03               	skipc
   871  05C6  2D8B               	goto	l8465
   872                           
   873                           ;main.c: 255: {
   874                           ;main.c: 256: ganshaoCheckTime = 0;
   875  05C7  01CD               	clrf	_ganshaoCheckTime
   876                           
   877                           ;main.c: 257: whFlag = 0;
   878  05C8  01FA               	clrf	_whFlag
   879                           
   880                           ;main.c: 258: led1Step = 0;
   881  05C9  01D7               	clrf	_led1Step
   882                           
   883                           ;main.c: 259: led2Step = 0;
   884  05CA  01D6               	clrf	_led2Step
   885  05CB  2D8B               	goto	l8465
   886  05CC                     __end_of_main:	
   887                           
   888                           	psect	text1
   889  065A                     __ptext1:	
   890 ;; *************** function _uartSendCtr *****************
   891 ;; Defined at:
   892 ;;		line 612 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
   893 ;; Parameters:    Size  Location     Type
   894 ;;		None
   895 ;; Auto vars:     Size  Location     Type
   896 ;;		None
   897 ;; Return value:  Size  Location     Type
   898 ;;                  1    wreg      void 
   899 ;; Registers used:
   900 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   901 ;; Tracked objects:
   902 ;;		On entry : 200/0
   903 ;;		On exit  : 200/0
   904 ;;		Unchanged: 0/0
   905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   906 ;;      Params:         0       0       0       0       0
   907 ;;      Locals:         0       0       0       0       0
   908 ;;      Temps:          0       0       0       0       0
   909 ;;      Totals:         0       0       0       0       0
   910 ;;Total ram usage:        0 bytes
   911 ;; Hardware stack levels used:    1
   912 ;; Hardware stack levels required when called:    2
   913 ;; This function calls:
   914 ;;		Nothing
   915 ;; This function is called by:
   916 ;;		_main
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           
   921                           ;psect for function _uartSendCtr
   922  065A                     _uartSendCtr:	
   923                           
   924                           ;main.c: 614: Sendbuffer[0] = whFlag;
   925                           
   926                           ;incstack = 0
   927                           ; Regs used in _uartSendCtr: [wreg-fsr0h+status,2+status,0]
   928  065A  087A               	movf	_whFlag,w
   929  065B  1683               	bsf	3,5	;RP0=1, select bank1
   930  065C  00A4               	movwf	_Sendbuffer^(0+128)
   931                           
   932                           ;main.c: 615: Sendbuffer[1] = led1Step;
   933  065D  1283               	bcf	3,5	;RP0=0, select bank0
   934  065E  0857               	movf	_led1Step,w
   935  065F  1683               	bsf	3,5	;RP0=1, select bank1
   936  0660  00A5               	movwf	(_Sendbuffer^(0+128)+1)
   937                           
   938                           ;main.c: 616: Sendbuffer[2] = led2Step;
   939  0661  1283               	bcf	3,5	;RP0=0, select bank0
   940  0662  0856               	movf	_led2Step,w
   941  0663  1683               	bsf	3,5	;RP0=1, select bank1
   942  0664  00A6               	movwf	(_Sendbuffer^(0+128)+2)
   943                           
   944                           ;main.c: 617: Sendbuffer[3] = chrgStep;
   945  0665  1283               	bcf	3,5	;RP0=0, select bank0
   946  0666  0855               	movf	_chrgStep,w
   947  0667  1683               	bsf	3,5	;RP0=1, select bank1
   948  0668  00A7               	movwf	(_Sendbuffer^(0+128)+3)
   949                           
   950                           ;main.c: 618: if(waitSendTime > 0)
   951  0669  1283               	bcf	3,5	;RP0=0, select bank0
   952  066A  0859               	movf	_waitSendTime,w
   953  066B  1903               	btfsc	3,2
   954  066C  2E6F               	goto	l2437
   955                           
   956                           ;main.c: 619: {
   957                           ;main.c: 620: waitSendTime--;
   958  066D  03D9               	decf	_waitSendTime,f
   959                           
   960                           ;main.c: 621: }
   961  066E  0008               	return
   962  066F                     l2437:	
   963                           
   964                           ;main.c: 622: else if(TRMT)
   965  066F  1683               	bsf	3,5	;RP0=1, select bank1
   966  0670  1C98               	btfss	24,1	;volatile
   967  0671  0008               	return
   968                           
   969                           ;main.c: 623: {
   970                           ;main.c: 626: TXREG = Sendbuffer[sendcount];
   971  0672  1283               	bcf	3,5	;RP0=0, select bank0
   972  0673  0858               	movf	_sendcount,w
   973  0674  3EA4               	addlw	(low (_Sendbuffer| 0))& (0+255)
   974  0675  0084               	movwf	4
   975  0676  1383               	bcf	3,7	;select IRP bank1
   976  0677  0800               	movf	0,w
   977  0678  0099               	movwf	25	;volatile
   978  0679  3004               	movlw	4
   979                           
   980                           ;main.c: 630: sendcount++;
   981  067A  0AD8               	incf	_sendcount,f
   982                           
   983                           ;main.c: 631: if(sendcount >= 4)
   984  067B  0258               	subwf	_sendcount,w
   985  067C  1C03               	skipc
   986  067D  0008               	return
   987  067E  3064               	movlw	100
   988                           
   989                           ;main.c: 632: {
   990                           ;main.c: 633: sendcount = 0;
   991  067F  01D8               	clrf	_sendcount
   992                           
   993                           ;main.c: 634: waitSendTime = 100;
   994  0680  00D9               	movwf	_waitSendTime
   995  0681  0008               	return
   996  0682                     __end_of_uartSendCtr:	
   997                           
   998                           	psect	text2
   999  04E4                     __ptext2:	
  1000 ;; *************** function _keyCtr *****************
  1001 ;; Defined at:
  1002 ;;		line 490 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;		None
  1005 ;; Auto vars:     Size  Location     Type
  1006 ;;  kclick          1    1[BANK0 ] unsigned char 
  1007 ;; Return value:  Size  Location     Type
  1008 ;;                  1    wreg      void 
  1009 ;; Registers used:
  1010 ;;		wreg, status,2, status,0, pclath, cstack
  1011 ;; Tracked objects:
  1012 ;;		On entry : 300/0
  1013 ;;		On exit  : 300/0
  1014 ;;		Unchanged: 0/0
  1015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1016 ;;      Params:         0       0       0       0       0
  1017 ;;      Locals:         0       1       0       0       0
  1018 ;;      Temps:          0       0       0       0       0
  1019 ;;      Totals:         0       1       0       0       0
  1020 ;;Total ram usage:        1 bytes
  1021 ;; Hardware stack levels used:    1
  1022 ;; Hardware stack levels required when called:    3
  1023 ;; This function calls:
  1024 ;;		_keyRead
  1025 ;;		_keyRead2
  1026 ;;		_keyRead3
  1027 ;; This function is called by:
  1028 ;;		_main
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031                           
  1032                           
  1033                           ;psect for function _keyCtr
  1034  04E4                     _keyCtr:	
  1035                           
  1036                           ;main.c: 492: char kclick = keyRead(0x20 & (~PORTA));
  1037                           
  1038                           ;incstack = 0
  1039                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1040  04E4  0905               	comf	5,w	;volatile
  1041  04E5  3920               	andlw	32
  1042  04E6  2528  118A         	fcall	_keyRead
  1043  04E8  00DF               	movwf	keyCtr@kclick
  1044                           
  1045                           ;main.c: 493: if(kclick == 2)
  1046  04E9  3A02               	xorlw	2
  1047  04EA  1D03               	btfss	3,2
  1048  04EB  2CF9               	goto	l8393
  1049                           
  1050                           ;main.c: 494: {
  1051                           ;main.c: 495: if(whFlag)
  1052  04EC  087A               	movf	_whFlag,w
  1053  04ED  1903               	btfsc	3,2
  1054  04EE  2CF3               	goto	l2401
  1055                           
  1056                           ;main.c: 496: {
  1057                           ;main.c: 497: whFlag = 0;
  1058  04EF  01FA               	clrf	_whFlag
  1059                           
  1060                           ;main.c: 498: led1Step = 0;
  1061  04F0  01D7               	clrf	_led1Step
  1062                           
  1063                           ;main.c: 499: led2Step = 0;
  1064  04F1  01D6               	clrf	_led2Step
  1065                           
  1066                           ;main.c: 500: }
  1067  04F2  2CF9               	goto	l8393
  1068  04F3                     l2401:	
  1069                           
  1070                           ;main.c: 501: else
  1071                           ;main.c: 502: {
  1072                           ;main.c: 503: whFlag = 1;
  1073  04F3  01FA               	clrf	_whFlag
  1074  04F4  0AFA               	incf	_whFlag,f
  1075                           
  1076                           ;main.c: 504: led1Step = 1;
  1077  04F5  01D7               	clrf	_led1Step
  1078  04F6  0AD7               	incf	_led1Step,f
  1079                           
  1080                           ;main.c: 505: led2Step = 1;
  1081  04F7  01D6               	clrf	_led2Step
  1082  04F8  0AD6               	incf	_led2Step,f
  1083  04F9                     l8393:	
  1084                           
  1085                           ;main.c: 506: }
  1086                           ;main.c: 508: }
  1087                           ;main.c: 509: kclick = keyRead2(0x10 & (~PORTA));
  1088  04F9  0905               	comf	5,w	;volatile
  1089  04FA  3910               	andlw	16
  1090  04FB  2546  118A         	fcall	_keyRead2
  1091  04FD  00DF               	movwf	keyCtr@kclick
  1092                           
  1093                           ;main.c: 510: if(whFlag && kclick == 1)
  1094  04FE  087A               	movf	_whFlag,w
  1095  04FF  1903               	btfsc	3,2
  1096  0500  2D0A               	goto	l8403
  1097  0501  0B5F               	decfsz	keyCtr@kclick,w
  1098  0502  2D0A               	goto	l8403
  1099                           
  1100                           ;main.c: 511: {
  1101                           ;main.c: 512: if(++led1Step > 3)
  1102  0503  3004               	movlw	4
  1103  0504  0AD7               	incf	_led1Step,f
  1104  0505  0257               	subwf	_led1Step,w
  1105  0506  1C03               	skipc
  1106  0507  2D0A               	goto	l8403
  1107                           
  1108                           ;main.c: 513: {
  1109                           ;main.c: 514: led1Step = 1;
  1110  0508  01D7               	clrf	_led1Step
  1111  0509  0AD7               	incf	_led1Step,f
  1112  050A                     l8403:	
  1113                           
  1114                           ;main.c: 515: }
  1115                           ;main.c: 516: }
  1116                           ;main.c: 517: kclick = keyRead3(0x04 & (~PORTA));
  1117  050A  0905               	comf	5,w	;volatile
  1118  050B  3904               	andlw	4
  1119  050C  2558  118A         	fcall	_keyRead3
  1120  050E  00DF               	movwf	keyCtr@kclick
  1121                           
  1122                           ;main.c: 518: if(whFlag)
  1123  050F  087A               	movf	_whFlag,w
  1124  0510  1903               	btfsc	3,2
  1125  0511  0008               	return
  1126                           
  1127                           ;main.c: 519: {
  1128                           ;main.c: 520: if(kclick == 1 && led2Step)
  1129  0512  0B5F               	decfsz	keyCtr@kclick,w
  1130  0513  2D1F               	goto	l8415
  1131  0514  0856               	movf	_led2Step,w
  1132  0515  1903               	btfsc	3,2
  1133  0516  2D1F               	goto	l8415
  1134                           
  1135                           ;main.c: 521: {
  1136                           ;main.c: 522: if(++led2Step > 3)
  1137  0517  3004               	movlw	4
  1138  0518  0AD6               	incf	_led2Step,f
  1139  0519  0256               	subwf	_led2Step,w
  1140  051A  1C03               	skipc
  1141  051B  0008               	return
  1142  051C                     l8413:	
  1143                           
  1144                           ;main.c: 523: {
  1145                           ;main.c: 524: led2Step = 1;
  1146  051C  01D6               	clrf	_led2Step
  1147  051D  0AD6               	incf	_led2Step,f
  1148  051E  0008               	return
  1149  051F                     l8415:	
  1150                           
  1151                           ;main.c: 527: else if(kclick == 2)
  1152  051F  3002               	movlw	2
  1153  0520  065F               	xorwf	keyCtr@kclick,w
  1154  0521  1D03               	btfss	3,2
  1155  0522  0008               	return
  1156                           
  1157                           ;main.c: 528: {
  1158                           ;main.c: 529: if(led2Step)
  1159  0523  0856               	movf	_led2Step,w
  1160  0524  1903               	btfsc	3,2
  1161  0525  2D1C               	goto	l8413
  1162                           
  1163                           ;main.c: 530: {
  1164                           ;main.c: 531: led2Step = 0;
  1165  0526  01D6               	clrf	_led2Step
  1166                           
  1167                           ;main.c: 532: }
  1168  0527  0008               	return
  1169  0528                     __end_of_keyCtr:	
  1170  0528                     __ptext5:	
  1171 ;; *************** function _keyRead *****************
  1172 ;; Defined at:
  1173 ;;		line 400 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
  1174 ;; Parameters:    Size  Location     Type
  1175 ;;  keyStatus       1    wreg     unsigned char 
  1176 ;; Auto vars:     Size  Location     Type
  1177 ;;  keyStatus       1    0[BANK0 ] unsigned char 
  1178 ;; Return value:  Size  Location     Type
  1179 ;;                  1    wreg      unsigned char 
  1180 ;; Registers used:
  1181 ;;		wreg, status,2, status,0
  1182 ;; Tracked objects:
  1183 ;;		On entry : 300/0
  1184 ;;		On exit  : 300/0
  1185 ;;		Unchanged: 0/0
  1186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1187 ;;      Params:         0       0       0       0       0
  1188 ;;      Locals:         0       1       0       0       0
  1189 ;;      Temps:          0       0       0       0       0
  1190 ;;      Totals:         0       1       0       0       0
  1191 ;;Total ram usage:        1 bytes
  1192 ;; Hardware stack levels used:    1
  1193 ;; Hardware stack levels required when called:    2
  1194 ;; This function calls:
  1195 ;;		Nothing
  1196 ;; This function is called by:
  1197 ;;		_keyCtr
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           
  1202                           ;psect for function _keyRead
  1203  0528                     _keyRead:	
  1204                           
  1205                           ;incstack = 0
  1206                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1207                           ;keyRead@keyStatus stored from wreg
  1208  0528  00DE               	movwf	keyRead@keyStatus
  1209                           
  1210                           ;main.c: 402: if(keyStatus)
  1211  0529  085E               	movf	keyRead@keyStatus,w
  1212  052A  3064               	movlw	100
  1213  052B  1903               	btfsc	3,2
  1214  052C  2D3A               	goto	L3
  1215                           
  1216                           ;main.c: 403: {
  1217                           ;main.c: 404: keyCount++;
  1218  052D  0ADA               	incf	_keyCount,f
  1219                           
  1220                           ;main.c: 405: if(keyCount >= 100)
  1221  052E  025A               	subwf	_keyCount,w
  1222  052F  1C03               	skipc
  1223  0530  3400               	retlw	0
  1224                           
  1225                           ;main.c: 406: {
  1226                           ;main.c: 407: keyCount = 100;
  1227  0531  3064               	movlw	100
  1228  0532  00DA               	movwf	_keyCount
  1229                           
  1230                           ;main.c: 408: if(longKeyPressFlag == 0)
  1231  0533  0852               	movf	_longKeyPressFlag,w
  1232  0534  1D03               	btfss	3,2
  1233  0535  3400               	retlw	0
  1234  0536  3002               	movlw	2
  1235                           
  1236                           ;main.c: 409: {
  1237                           ;main.c: 410: longKeyPressFlag = 1;
  1238  0537  01D2               	clrf	_longKeyPressFlag
  1239  0538  0AD2               	incf	_longKeyPressFlag,f
  1240                           
  1241                           ;main.c: 411: return 2;
  1242  0539  0008               	return
  1243  053A                     L3:	
  1244                           ;main.c: 415: else
  1245                           ;main.c: 416: {
  1246                           ;main.c: 417: if(keyCount >= 100)
  1247                           
  1248  053A  025A               	subwf	_keyCount,w
  1249  053B  1C03               	skipc
  1250  053C  2D40               	goto	l8109
  1251                           
  1252                           ;main.c: 418: {
  1253                           ;main.c: 419: keyCount = 0;
  1254  053D  01DA               	clrf	_keyCount
  1255                           
  1256                           ;main.c: 420: longKeyPressFlag = 0;
  1257  053E  01D2               	clrf	_longKeyPressFlag
  1258                           
  1259                           ;main.c: 421: return 0;
  1260  053F  3400               	retlw	0
  1261  0540                     l8109:	
  1262                           
  1263                           ;main.c: 423: else if(keyCount >= 4)
  1264  0540  3004               	movlw	4
  1265  0541  025A               	subwf	_keyCount,w
  1266                           
  1267                           ;main.c: 424: {
  1268                           ;main.c: 425: keyCount = 0;
  1269  0542  01DA               	clrf	_keyCount
  1270  0543  1803               	btfsc	3,0
  1271                           
  1272                           ;main.c: 426: return 1;
  1273  0544  3401               	retlw	1
  1274  0545  3400               	retlw	0
  1275  0546                     __end_of_keyRead:	
  1276                           ;main.c: 427: }
  1277                           ;main.c: 428: keyCount = 0;
  1278                           
  1279  0546                     __ptext4:	
  1280 ;; *************** function _keyRead2 *****************
  1281 ;; Defined at:
  1282 ;;		line 433 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;  keyStatus       1    wreg     unsigned char 
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;  keyStatus       1    0[BANK0 ] unsigned char 
  1287 ;; Return value:  Size  Location     Type
  1288 ;;                  1    wreg      unsigned char 
  1289 ;; Registers used:
  1290 ;;		wreg, status,2, status,0
  1291 ;; Tracked objects:
  1292 ;;		On entry : 300/0
  1293 ;;		On exit  : 300/0
  1294 ;;		Unchanged: 0/0
  1295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1296 ;;      Params:         0       0       0       0       0
  1297 ;;      Locals:         0       1       0       0       0
  1298 ;;      Temps:          0       0       0       0       0
  1299 ;;      Totals:         0       1       0       0       0
  1300 ;;Total ram usage:        1 bytes
  1301 ;; Hardware stack levels used:    1
  1302 ;; Hardware stack levels required when called:    2
  1303 ;; This function calls:
  1304 ;;		Nothing
  1305 ;; This function is called by:
  1306 ;;		_keyCtr
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           
  1311                           ;psect for function _keyRead2
  1312  0546                     _keyRead2:	
  1313                           
  1314                           ;incstack = 0
  1315                           ; Regs used in _keyRead2: [wreg+status,2+status,0]
  1316                           ;keyRead2@keyStatus stored from wreg
  1317  0546  00DE               	movwf	keyRead2@keyStatus
  1318                           
  1319                           ;main.c: 435: if(keyStatus)
  1320  0547  085E               	movf	keyRead2@keyStatus,w
  1321  0548  1903               	btfsc	3,2
  1322  0549  2D52               	goto	l8131
  1323  054A  3064               	movlw	100
  1324                           
  1325                           ;main.c: 436: {
  1326                           ;main.c: 437: keyCount2++;
  1327  054B  0AD4               	incf	_keyCount2,f
  1328                           
  1329                           ;main.c: 438: if(keyCount2 >= 100)
  1330  054C  0254               	subwf	_keyCount2,w
  1331  054D  1C03               	skipc
  1332  054E  3400               	retlw	0
  1333                           
  1334                           ;main.c: 439: {
  1335                           ;main.c: 440: keyCount2 = 100;
  1336  054F  3064               	movlw	100
  1337  0550  00D4               	movwf	_keyCount2
  1338  0551  3400               	retlw	0
  1339  0552                     l8131:	
  1340                           
  1341                           ;main.c: 443: else
  1342                           ;main.c: 444: {
  1343                           ;main.c: 445: if(keyCount2 >= 4)
  1344  0552  3004               	movlw	4
  1345  0553  0254               	subwf	_keyCount2,w
  1346                           
  1347                           ;main.c: 446: {
  1348                           ;main.c: 447: keyCount2 = 0;
  1349  0554  01D4               	clrf	_keyCount2
  1350  0555  1803               	btfsc	3,0
  1351                           
  1352                           ;main.c: 448: return 1;
  1353  0556  3401               	retlw	1
  1354  0557  3400               	retlw	0
  1355  0558                     __end_of_keyRead2:	
  1356                           ;main.c: 451: }
  1357                           ;main.c: 452: return 0;
  1358                           
  1359                           ;main.c: 449: }
  1360                           ;main.c: 450: keyCount2 = 0;
  1361                           
  1362  0558                     __ptext3:	
  1363 ;; *************** function _keyRead3 *****************
  1364 ;; Defined at:
  1365 ;;		line 455 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;  keyStatus       1    wreg     unsigned char 
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  keyStatus       1    0[BANK0 ] unsigned char 
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      unsigned char 
  1372 ;; Registers used:
  1373 ;;		wreg, status,2, status,0
  1374 ;; Tracked objects:
  1375 ;;		On entry : 300/0
  1376 ;;		On exit  : 300/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1379 ;;      Params:         0       0       0       0       0
  1380 ;;      Locals:         0       1       0       0       0
  1381 ;;      Temps:          0       0       0       0       0
  1382 ;;      Totals:         0       1       0       0       0
  1383 ;;Total ram usage:        1 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; Hardware stack levels required when called:    2
  1386 ;; This function calls:
  1387 ;;		Nothing
  1388 ;; This function is called by:
  1389 ;;		_keyCtr
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           
  1394                           ;psect for function _keyRead3
  1395  0558                     _keyRead3:	
  1396                           
  1397                           ;incstack = 0
  1398                           ; Regs used in _keyRead3: [wreg+status,2+status,0]
  1399                           ;keyRead3@keyStatus stored from wreg
  1400  0558  00DE               	movwf	keyRead3@keyStatus
  1401                           
  1402                           ;main.c: 457: if(keyStatus)
  1403  0559  085E               	movf	keyRead3@keyStatus,w
  1404  055A  3064               	movlw	100
  1405  055B  1903               	btfsc	3,2
  1406  055C  2D6A               	goto	L1
  1407                           
  1408                           ;main.c: 458: {
  1409                           ;main.c: 459: keyCount3++;
  1410  055D  0AD3               	incf	_keyCount3,f
  1411                           
  1412                           ;main.c: 460: if(keyCount3 >= 100)
  1413  055E  0253               	subwf	_keyCount3,w
  1414  055F  1C03               	skipc
  1415  0560  3400               	retlw	0
  1416                           
  1417                           ;main.c: 461: {
  1418                           ;main.c: 462: keyCount3 = 100;
  1419  0561  3064               	movlw	100
  1420  0562  00D3               	movwf	_keyCount3
  1421                           
  1422                           ;main.c: 463: if(longKey3PressFlag == 0)
  1423  0563  0851               	movf	_longKey3PressFlag,w
  1424  0564  1D03               	btfss	3,2
  1425  0565  3400               	retlw	0
  1426  0566  3002               	movlw	2
  1427                           
  1428                           ;main.c: 464: {
  1429                           ;main.c: 465: longKey3PressFlag = 1;
  1430  0567  01D1               	clrf	_longKey3PressFlag
  1431  0568  0AD1               	incf	_longKey3PressFlag,f
  1432                           
  1433                           ;main.c: 466: return 2;
  1434  0569  0008               	return
  1435  056A                     L1:	
  1436                           ;main.c: 470: else
  1437                           ;main.c: 471: {
  1438                           ;main.c: 472: if(keyCount3 >= 100)
  1439                           
  1440  056A  0253               	subwf	_keyCount3,w
  1441  056B  1C03               	skipc
  1442  056C  2D70               	goto	l8171
  1443                           
  1444                           ;main.c: 473: {
  1445                           ;main.c: 474: keyCount3 = 0;
  1446  056D  01D3               	clrf	_keyCount3
  1447                           
  1448                           ;main.c: 475: longKey3PressFlag = 0;
  1449  056E  01D1               	clrf	_longKey3PressFlag
  1450                           
  1451                           ;main.c: 476: return 0;
  1452  056F  3400               	retlw	0
  1453  0570                     l8171:	
  1454                           
  1455                           ;main.c: 478: else if(keyCount3 >= 4)
  1456  0570  3004               	movlw	4
  1457  0571  0253               	subwf	_keyCount3,w
  1458  0572  1C03               	skipc
  1459  0573  2D77               	goto	l8179
  1460  0574  3001               	movlw	1
  1461                           
  1462                           ;main.c: 479: {
  1463                           ;main.c: 480: keyCount3 = 0;
  1464  0575  01D3               	clrf	_keyCount3
  1465                           
  1466                           ;main.c: 481: return 1;
  1467  0576  0008               	return
  1468  0577                     l8179:	
  1469                           
  1470                           ;main.c: 482: }
  1471                           ;main.c: 483: longKey3PressFlag = 0;
  1472  0577  01D1               	clrf	_longKey3PressFlag
  1473                           
  1474                           ;main.c: 484: keyCount3 = 0;
  1475  0578  01D3               	clrf	_keyCount3
  1476  0579  3400               	retlw	0
  1477  057A                     __end_of_keyRead3:	
  1478                           
  1479                           	psect	text6
  1480  070D                     __ptext6:	
  1481 ;; *************** function _closePWM *****************
  1482 ;; Defined at:
  1483 ;;		line 390 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;		None
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;		None
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  1    wreg      void 
  1490 ;; Registers used:
  1491 ;;		status,2
  1492 ;; Tracked objects:
  1493 ;;		On entry : 300/0
  1494 ;;		On exit  : 300/200
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1497 ;;      Params:         0       0       0       0       0
  1498 ;;      Locals:         0       0       0       0       0
  1499 ;;      Temps:          0       0       0       0       0
  1500 ;;      Totals:         0       0       0       0       0
  1501 ;;Total ram usage:        0 bytes
  1502 ;; Hardware stack levels used:    1
  1503 ;; Hardware stack levels required when called:    2
  1504 ;; This function calls:
  1505 ;;		Nothing
  1506 ;; This function is called by:
  1507 ;;		_main
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511                           
  1512                           ;psect for function _closePWM
  1513  070D                     _closePWM:	
  1514                           
  1515                           ;main.c: 392: PWMD1L = 0;
  1516                           
  1517                           ;incstack = 0
  1518                           ; Regs used in _closePWM: [status,2]
  1519  070D  1683               	bsf	3,5	;RP0=1, select bank3
  1520  070E  1703               	bsf	3,6	;RP1=1, select bank3
  1521  070F  0194               	clrf	20	;volatile
  1522                           
  1523                           ;main.c: 393: PWMD01H = 0x00;
  1524  0710  1283               	bcf	3,5	;RP0=0, select bank2
  1525  0711  019C               	clrf	28	;volatile
  1526                           
  1527                           ;main.c: 394: PWMCON2 = 0B00000000;
  1528  0712  0189               	clrf	9	;volatile
  1529                           
  1530                           ;main.c: 395: PWMCON1 = 0B00000000;
  1531  0713  0188               	clrf	8	;volatile
  1532                           
  1533                           ;main.c: 396: PWMCON0 = 0B00000000;
  1534  0714  0187               	clrf	7	;volatile
  1535  0715  0008               	return
  1536  0716                     __end_of_closePWM:	
  1537                           
  1538                           	psect	text7
  1539  05FF                     __ptext7:	
  1540 ;; *************** function _chrgCtr *****************
  1541 ;; Defined at:
  1542 ;;		line 541 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;		None
  1545 ;; Auto vars:     Size  Location     Type
  1546 ;;		None
  1547 ;; Return value:  Size  Location     Type
  1548 ;;                  1    wreg      void 
  1549 ;; Registers used:
  1550 ;;		wreg, status,2, status,0
  1551 ;; Tracked objects:
  1552 ;;		On entry : 300/0
  1553 ;;		On exit  : 200/0
  1554 ;;		Unchanged: 0/0
  1555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1556 ;;      Params:         0       0       0       0       0
  1557 ;;      Locals:         0       0       0       0       0
  1558 ;;      Temps:          0       0       0       0       0
  1559 ;;      Totals:         0       0       0       0       0
  1560 ;;Total ram usage:        0 bytes
  1561 ;; Hardware stack levels used:    1
  1562 ;; Hardware stack levels required when called:    2
  1563 ;; This function calls:
  1564 ;;		Nothing
  1565 ;; This function is called by:
  1566 ;;		_main
  1567 ;; This function uses a non-reentrant model
  1568 ;;
  1569                           
  1570                           
  1571                           ;psect for function _chrgCtr
  1572  05FF                     _chrgCtr:	
  1573                           
  1574                           ;main.c: 544: {
  1575                           ;main.c: 545: chrgFlag = 1;
  1576                           
  1577                           ;incstack = 0
  1578                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  1579  05FF  1F05               	btfss	5,6	;volatile
  1580  0600  2E27               	goto	l8443
  1581                           
  1582                           ;main.c: 546: if(0x80 & PORTA)
  1583  0601  1F85               	btfss	5,7	;volatile
  1584  0602  2E0A               	goto	l8429
  1585                           
  1586                           ;main.c: 547: {
  1587                           ;main.c: 548: if(++chrgFullTime > 200)
  1588  0603  30C9               	movlw	201
  1589  0604  0ACF               	incf	_chrgFullTime,f
  1590  0605  024F               	subwf	_chrgFullTime,w
  1591  0606  1C03               	skipc
  1592  0607  2E0B               	goto	l8433
  1593                           
  1594                           ;main.c: 549: {
  1595                           ;main.c: 550: chrgFullFlag = 1;
  1596  0608  01D0               	clrf	_chrgFullFlag
  1597  0609  0AD0               	incf	_chrgFullFlag,f
  1598  060A                     l8429:	
  1599                           
  1600                           ;main.c: 551: chrgFullTime = 0;
  1601  060A  01CF               	clrf	_chrgFullTime
  1602  060B                     l8433:	
  1603                           
  1604                           ;main.c: 557: }
  1605                           ;main.c: 558: if(chrgFullFlag)
  1606  060B  0850               	movf	_chrgFullFlag,w
  1607  060C  1903               	btfsc	3,2
  1608  060D  2E24               	goto	l2419
  1609                           
  1610                           ;main.c: 559: {
  1611                           ;main.c: 560: if(++chrgGreenLedTime > 1000)
  1612  060E  1683               	bsf	3,5	;RP0=1, select bank1
  1613  060F  0AAC               	incf	_chrgGreenLedTime^(0+128),f
  1614  0610  1903               	skipnz
  1615  0611  0AAD               	incf	(_chrgGreenLedTime+1)^(0+128),f
  1616  0612  3003               	movlw	3
  1617  0613  022D               	subwf	(_chrgGreenLedTime+1)^(0+128),w
  1618  0614  30E9               	movlw	233
  1619  0615  1903               	skipnz
  1620  0616  022C               	subwf	_chrgGreenLedTime^(0+128),w
  1621  0617  1C03               	skipc
  1622  0618  2E20               	goto	l8441
  1623                           
  1624                           ;main.c: 561: {
  1625                           ;main.c: 562: chrgGreenLedTime = 1000;
  1626  0619  30E8               	movlw	232
  1627  061A  00AC               	movwf	_chrgGreenLedTime^(0+128)
  1628  061B  3003               	movlw	3
  1629  061C  00AD               	movwf	(_chrgGreenLedTime^(0+128)+1)
  1630                           
  1631                           ;main.c: 563: chrgStep = 0;
  1632  061D  1283               	bcf	3,5	;RP0=0, select bank0
  1633  061E  01D5               	clrf	_chrgStep
  1634                           
  1635                           ;main.c: 564: }
  1636  061F  0008               	return
  1637  0620                     l8441:	
  1638                           
  1639                           ;main.c: 565: else
  1640                           ;main.c: 566: {
  1641                           ;main.c: 567: chrgStep = 2;
  1642  0620  3002               	movlw	2
  1643  0621  1283               	bcf	3,5	;RP0=0, select bank0
  1644  0622  00D5               	movwf	_chrgStep
  1645  0623  0008               	return
  1646  0624                     l2419:	
  1647                           
  1648                           ;main.c: 570: else
  1649                           ;main.c: 571: {
  1650                           ;main.c: 572: chrgStep = 1;
  1651  0624  01D5               	clrf	_chrgStep
  1652  0625  0AD5               	incf	_chrgStep,f
  1653  0626  0008               	return
  1654  0627                     l8443:	
  1655                           
  1656                           ;main.c: 578: chrgFlag = 0;
  1657  0627  01D5               	clrf	_chrgStep
  1658                           
  1659                           ;main.c: 579: chrgFullFlag = 0;
  1660  0628  01D0               	clrf	_chrgFullFlag
  1661                           
  1662                           ;main.c: 580: chrgFullTime = 0;
  1663  0629  01CF               	clrf	_chrgFullTime
  1664                           
  1665                           ;main.c: 581: chrgGreenLedTime = 0;
  1666  062A  1683               	bsf	3,5	;RP0=1, select bank1
  1667  062B  01AC               	clrf	_chrgGreenLedTime^(0+128)
  1668  062C  01AD               	clrf	(_chrgGreenLedTime+1)^(0+128)
  1669  062D  0008               	return
  1670  062E                     __end_of_chrgCtr:	
  1671                           
  1672                           	psect	text8
  1673  0682                     __ptext8:	
  1674 ;; *************** function _checkVoll *****************
  1675 ;; Defined at:
  1676 ;;		line 585 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;		None
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;		None
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      void 
  1683 ;; Registers used:
  1684 ;;		wreg, status,2, status,0
  1685 ;; Tracked objects:
  1686 ;;		On entry : 300/200
  1687 ;;		On exit  : 300/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1690 ;;      Params:         0       0       0       0       0
  1691 ;;      Locals:         0       0       0       0       0
  1692 ;;      Temps:          0       0       0       0       0
  1693 ;;      Totals:         0       0       0       0       0
  1694 ;;Total ram usage:        0 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; Hardware stack levels required when called:    2
  1697 ;; This function calls:
  1698 ;;		Nothing
  1699 ;; This function is called by:
  1700 ;;		_main
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           
  1705                           ;psect for function _checkVoll
  1706  0682                     _checkVoll:	
  1707                           
  1708                           ;main.c: 587: if(AD_Result > 182)
  1709                           
  1710                           ;incstack = 0
  1711                           ; Regs used in _checkVoll: [wreg+status,2+status,0]
  1712  0682  3000               	movlw	0
  1713  0683  1303               	bcf	3,6	;RP1=0, select bank0
  1714  0684  0237               	subwf	_AD_Result+1,w	;volatile
  1715  0685  30B7               	movlw	183
  1716  0686  1903               	skipnz
  1717  0687  0236               	subwf	_AD_Result,w	;volatile
  1718  0688  1C03               	skipc
  1719  0689  2E96               	goto	l8373
  1720                           
  1721                           ;main.c: 588: {
  1722                           ;main.c: 589: if(++addTime > 5)
  1723  068A  3006               	movlw	6
  1724  068B  0ADC               	incf	_addTime,f	;volatile
  1725  068C  025C               	subwf	_addTime,w	;volatile
  1726  068D  1C03               	skipc
  1727  068E  2E94               	goto	l8371
  1728                           
  1729                           ;main.c: 590: {
  1730                           ;main.c: 591: addTime = 0;
  1731  068F  01DC               	clrf	_addTime	;volatile
  1732                           
  1733                           ;main.c: 592: if(currDuty > 1)
  1734  0690  3002               	movlw	2
  1735  0691  027B               	subwf	_currDuty,w	;volatile
  1736  0692  1803               	btfsc	3,0
  1737                           
  1738                           ;main.c: 593: {
  1739                           ;main.c: 594: currDuty--;
  1740  0693  03FB               	decf	_currDuty,f	;volatile
  1741  0694                     l8371:	
  1742                           
  1743                           ;main.c: 595: }
  1744                           ;main.c: 596: }
  1745                           ;main.c: 597: subTime = 0;
  1746  0694  01DB               	clrf	_subTime	;volatile
  1747                           
  1748                           ;main.c: 598: }
  1749  0695  0008               	return
  1750  0696                     l8373:	
  1751                           
  1752                           ;main.c: 599: else if(AD_Result < 166)
  1753  0696  3000               	movlw	0
  1754  0697  0237               	subwf	_AD_Result+1,w	;volatile
  1755  0698  30A6               	movlw	166
  1756  0699  1903               	skipnz
  1757  069A  0236               	subwf	_AD_Result,w	;volatile
  1758  069B  1803               	skipnc
  1759  069C  0008               	return
  1760                           
  1761                           ;main.c: 600: {
  1762                           ;main.c: 601: if(++subTime > 5)
  1763  069D  3006               	movlw	6
  1764  069E  0ADB               	incf	_subTime,f	;volatile
  1765  069F  025B               	subwf	_subTime,w	;volatile
  1766  06A0  1C03               	skipc
  1767  06A1  2EA7               	goto	l8381
  1768                           
  1769                           ;main.c: 602: {
  1770                           ;main.c: 603: if(currDuty < 74)
  1771  06A2  304A               	movlw	74
  1772  06A3  027B               	subwf	_currDuty,w	;volatile
  1773  06A4  1803               	skipnc
  1774  06A5  2EA7               	goto	l8381
  1775                           
  1776                           ;main.c: 604: {
  1777                           ;main.c: 605: currDuty++;
  1778  06A6  0AFB               	incf	_currDuty,f	;volatile
  1779  06A7                     l8381:	
  1780                           
  1781                           ;main.c: 606: }
  1782                           ;main.c: 607: }
  1783                           ;main.c: 608: addTime = 0;
  1784  06A7  01DC               	clrf	_addTime	;volatile
  1785  06A8  0008               	return
  1786  06A9                     __end_of_checkVoll:	
  1787                           
  1788                           	psect	text9
  1789  05CC                     __ptext9:	
  1790 ;; *************** function _Sys_set *****************
  1791 ;; Defined at:
  1792 ;;		line 113 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;		None
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;		None
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  1    wreg      void 
  1799 ;; Registers used:
  1800 ;;		wreg, status,2, status,0
  1801 ;; Tracked objects:
  1802 ;;		On entry : 300/0
  1803 ;;		On exit  : 300/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1806 ;;      Params:         0       0       0       0       0
  1807 ;;      Locals:         0       0       0       0       0
  1808 ;;      Temps:          0       0       0       0       0
  1809 ;;      Totals:         0       0       0       0       0
  1810 ;;Total ram usage:        0 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; Hardware stack levels required when called:    2
  1813 ;; This function calls:
  1814 ;;		Nothing
  1815 ;; This function is called by:
  1816 ;;		_main
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           
  1821                           ;psect for function _Sys_set
  1822  05CC                     _Sys_set:	
  1823                           
  1824                           ;incstack = 0
  1825                           ; Regs used in _Sys_set: [wreg+status,2+status,0]
  1826  05CC  0064               	clrwdt	;# 
  1827                           
  1828                           ;main.c: 116: WDTCON = 0x01;
  1829  05CD  3001               	movlw	1
  1830  05CE  1283               	bcf	3,5	;RP0=0, select bank2
  1831                           
  1832                           ;main.c: 117: TRISA = 0xf6;
  1833                           
  1834                           ;main.c: 118: TRISB = 0xdd;
  1835                           
  1836                           ;main.c: 119: OPTION_REG = 0;
  1837  05CF  25F5  118A         	fcall	PL4	;call to abstracted procedure
  1838                           
  1839                           ;main.c: 120: PIE1 = 0B00000010;
  1840  05D1  3002               	movlw	2
  1841  05D2  008C               	movwf	12	;volatile
  1842                           
  1843                           ;main.c: 121: PR2 = 250;
  1844  05D3  30FA               	movlw	250
  1845  05D4  0092               	movwf	18	;volatile
  1846                           
  1847                           ;main.c: 122: INTCON = 0XC0;
  1848  05D5  30C0               	movlw	192
  1849  05D6  008B               	movwf	11	;volatile
  1850                           
  1851                           ;main.c: 123: if(5 != T2CON)
  1852  05D7  3005               	movlw	5
  1853  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  1854  05D9  0612               	xorwf	18,w	;volatile
  1855  05DA  1903               	btfsc	3,2
  1856  05DB  0008               	return
  1857                           
  1858                           ;main.c: 124: T2CON = 5;
  1859  05DC  3005               	movlw	5
  1860  05DD  0092               	movwf	18	;volatile
  1861  05DE  0008               	return
  1862  05DF                     __end_of_Sys_set:	
  1863  05DF                     __ptext27:	
  1864 ;; *************** function _Init_ic *****************
  1865 ;; Defined at:
  1866 ;;		line 74 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.
      +4M\main.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;		None
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;		None
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  1    wreg      void 
  1873 ;; Registers used:
  1874 ;;		wreg, status,2
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 300/100
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1880 ;;      Params:         0       0       0       0       0
  1881 ;;      Locals:         0       0       0       0       0
  1882 ;;      Temps:          0       0       0       0       0
  1883 ;;      Totals:         0       0       0       0       0
  1884 ;;Total ram usage:        0 bytes
  1885 ;; Hardware stack levels used:    1
  1886 ;; Hardware stack levels required when called:    2
  1887 ;; This function calls:
  1888 ;;		Nothing
  1889 ;; This function is called by:
  1890 ;;		_main
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           
  1895                           ;psect for function _Init_ic
  1896  05DF                     _Init_ic:	
  1897                           
  1898                           ;main.c: 76: PORTA = 0;
  1899                           
  1900                           ;incstack = 0
  1901                           ; Regs used in _Init_ic: [wreg+status,2]
  1902  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  1903  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  1904  05E1  0185               	clrf	5	;volatile
  1905                           
  1906                           ;main.c: 77: PORTB = 0;
  1907  05E2  0186               	clrf	6	;volatile
  1908                           
  1909                           ;main.c: 78: INTCON = 0xC0;
  1910  05E3  30C0               	movlw	192
  1911  05E4  008B               	movwf	11	;volatile
  1912                           
  1913                           ;main.c: 79: PIR1 = 0;
  1914  05E5  018C               	clrf	12	;volatile
  1915                           
  1916                           ;main.c: 80: PIR2 = 0;
  1917  05E6  018D               	clrf	13	;volatile
  1918                           
  1919                           ;main.c: 81: WDTCON = 0x01;
  1920  05E7  3001               	movlw	1
  1921                           
  1922                           ;main.c: 82: TRISA = 0xf6;
  1923                           
  1924                           ;main.c: 83: TRISB = 0xdd;
  1925                           
  1926                           ;main.c: 84: OPTION_REG = 0;
  1927  05E8  25F5               	fcall	PL4	;call to abstracted procedure
  1928                           
  1929                           ;main.c: 85: OSCCON = 0x71;
  1930  05E9  3071               	movlw	113
  1931  05EA  008F               	movwf	15	;volatile
  1932                           
  1933                           ;main.c: 86: PIE1 = 0;
  1934  05EB  018C               	clrf	12	;volatile
  1935                           
  1936                           ;main.c: 87: PIE2 = 0;
  1937  05EC  018D               	clrf	13	;volatile
  1938                           
  1939                           ;main.c: 88: IOCB = 0;
  1940  05ED  0196               	clrf	22	;volatile
  1941                           
  1942                           ;main.c: 89: WPUA = 0xB4;
  1943  05EE  30B4               	movlw	180
  1944  05EF  1703               	bsf	3,6	;RP1=1, select bank3
  1945  05F0  008E               	movwf	14	;volatile
  1946                           
  1947                           ;main.c: 90: WPUB = 0x10;
  1948  05F1  3010               	movlw	16
  1949  05F2  1303               	bcf	3,6	;RP1=0, select bank1
  1950  05F3  0095               	movwf	21	;volatile
  1951  05F4  0008               	return
  1952  05F5                     __end_of_Init_ic:	
  1953  05F5                     PL4:	
  1954  05F5  1703               	bsf	3,6	;RP1=1, select bank2
  1955  05F6  0085               	movwf	5	;volatile
  1956  05F7  30F6               	movlw	246
  1957  05F8  1683               	bsf	3,5	;RP0=1, select bank1
  1958  05F9  1303               	bcf	3,6	;RP1=0, select bank1
  1959  05FA  0085               	movwf	5	;volatile
  1960  05FB  30DD               	movlw	221
  1961  05FC  0086               	movwf	6	;volatile
  1962  05FD  0181               	clrf	1	;volatile
  1963  05FE  0008               	return
  1964  05FF                     __end_ofPL4:	
  1965                           
  1966                           	psect	text10
  1967  071E                     __ptext10:	
  1968 ;; *************** function _Set_Work *****************
  1969 ;; Defined at:
  1970 ;;		line 150 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;		None
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;		None
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  1    wreg      void 
  1977 ;; Registers used:
  1978 ;;		status,2
  1979 ;; Tracked objects:
  1980 ;;		On entry : 300/0
  1981 ;;		On exit  : 300/0
  1982 ;;		Unchanged: 300/0
  1983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1984 ;;      Params:         0       0       0       0       0
  1985 ;;      Locals:         0       0       0       0       0
  1986 ;;      Temps:          0       0       0       0       0
  1987 ;;      Totals:         0       0       0       0       0
  1988 ;;Total ram usage:        0 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; Hardware stack levels required when called:    2
  1991 ;; This function calls:
  1992 ;;		Nothing
  1993 ;; This function is called by:
  1994 ;;		_main
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           
  1999                           ;psect for function _Set_Work
  2000  071E                     _Set_Work:	
  2001                           
  2002                           ;main.c: 152: if(errf)
  2003                           
  2004                           ;incstack = 0
  2005                           ; Regs used in _Set_Work: [status,2]
  2006  071E  1FF1               	btfss	_errf/(0+8),_errf& (0+7)	;volatile
  2007  071F  0008               	return
  2008                           
  2009                           ;main.c: 153: {
  2010                           ;main.c: 154: errf = 0;
  2011  0720  13F1               	bcf	_errf/(0+8),_errf& (0+7)	;volatile
  2012                           
  2013                           ;main.c: 155: onoff = 0;
  2014  0721  12F1               	bcf	_onoff/(0+8),_onoff& (0+7)	;volatile
  2015                           
  2016                           ;main.c: 156: whFlag = 0;
  2017  0722  01FA               	clrf	_whFlag
  2018  0723  0008               	return
  2019  0724                     __end_of_Set_Work:	
  2020                           
  2021                           	psect	text11
  2022  06E4                     __ptext11:	
  2023 ;; *************** function _Set_Usart_Async *****************
  2024 ;; Defined at:
  2025 ;;		line 648 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;		None
  2028 ;; Auto vars:     Size  Location     Type
  2029 ;;		None
  2030 ;; Return value:  Size  Location     Type
  2031 ;;                  1    wreg      void 
  2032 ;; Registers used:
  2033 ;;		wreg
  2034 ;; Tracked objects:
  2035 ;;		On entry : 300/0
  2036 ;;		On exit  : 300/100
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2039 ;;      Params:         0       0       0       0       0
  2040 ;;      Locals:         0       0       0       0       0
  2041 ;;      Temps:          0       0       0       0       0
  2042 ;;      Totals:         0       0       0       0       0
  2043 ;;Total ram usage:        0 bytes
  2044 ;; Hardware stack levels used:    1
  2045 ;; Hardware stack levels required when called:    2
  2046 ;; This function calls:
  2047 ;;		Nothing
  2048 ;; This function is called by:
  2049 ;;		_main
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           
  2054                           ;psect for function _Set_Usart_Async
  2055  06E4                     _Set_Usart_Async:	
  2056                           
  2057                           ;main.c: 650: SPBRG = 95;
  2058                           
  2059                           ;incstack = 0
  2060                           ; Regs used in _Set_Usart_Async: [wreg]
  2061  06E4  305F               	movlw	95
  2062  06E5  1683               	bsf	3,5	;RP0=1, select bank1
  2063  06E6  0099               	movwf	25	;volatile
  2064                           
  2065                           ;main.c: 652: SYNC = 0;
  2066  06E7  1218               	bcf	24,4	;volatile
  2067                           
  2068                           ;main.c: 653: SCKP = 0;
  2069  06E8  1198               	bcf	24,3	;volatile
  2070                           
  2071                           ;main.c: 655: SPEN = 1;
  2072  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  2073  06EA  1798               	bsf	24,7	;volatile
  2074                           
  2075                           ;main.c: 656: RCIE = 1;
  2076  06EB  1683               	bsf	3,5	;RP0=1, select bank1
  2077  06EC  168C               	bsf	12,5	;volatile
  2078                           
  2079                           ;main.c: 657: TXIE = 0;
  2080  06ED  120C               	bcf	12,4	;volatile
  2081                           
  2082                           ;main.c: 658: RX9EN = 0;
  2083  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  2084  06EF  1318               	bcf	24,6	;volatile
  2085                           
  2086                           ;main.c: 659: TX9EN = 0;
  2087  06F0  1683               	bsf	3,5	;RP0=1, select bank1
  2088  06F1  1318               	bcf	24,6	;volatile
  2089                           
  2090                           ;main.c: 660: CREN = 1;
  2091  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  2092  06F3  1618               	bsf	24,4	;volatile
  2093                           
  2094                           ;main.c: 661: TXEN = 1;
  2095  06F4  1683               	bsf	3,5	;RP0=1, select bank1
  2096  06F5  1698               	bsf	24,5	;volatile
  2097  06F6  0008               	return
  2098  06F7                     __end_of_Set_Usart_Async:	
  2099                           
  2100                           	psect	text12
  2101  06CF                     __ptext12:	
  2102 ;; *************** function _Set_CCP_PWM *****************
  2103 ;; Defined at:
  2104 ;;		line 369 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;		None
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;		None
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, status,2
  2113 ;; Tracked objects:
  2114 ;;		On entry : 300/0
  2115 ;;		On exit  : 300/200
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2118 ;;      Params:         0       0       0       0       0
  2119 ;;      Locals:         0       0       0       0       0
  2120 ;;      Temps:          0       0       0       0       0
  2121 ;;      Totals:         0       0       0       0       0
  2122 ;;Total ram usage:        0 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    2
  2125 ;; This function calls:
  2126 ;;		Nothing
  2127 ;; This function is called by:
  2128 ;;		_main
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           
  2133                           ;psect for function _Set_CCP_PWM
  2134  06CF                     _Set_CCP_PWM:	
  2135                           
  2136                           ;main.c: 371: PWMTL = 108;
  2137                           
  2138                           ;incstack = 0
  2139                           ; Regs used in _Set_CCP_PWM: [wreg+status,2]
  2140  06CF  306C               	movlw	108
  2141  06D0  1683               	bsf	3,5	;RP0=1, select bank3
  2142  06D1  1703               	bsf	3,6	;RP1=1, select bank3
  2143  06D2  008F               	movwf	15	;volatile
  2144                           
  2145                           ;main.c: 372: PWMTH = 0x00;
  2146  06D3  0190               	clrf	16	;volatile
  2147                           
  2148                           ;main.c: 373: PWMT4L = 0x00;
  2149  06D4  0191               	clrf	17	;volatile
  2150                           
  2151                           ;main.c: 377: PWMD1L = currDuty;
  2152  06D5  087B               	movf	_currDuty,w	;volatile
  2153  06D6  0094               	movwf	20	;volatile
  2154                           
  2155                           ;main.c: 378: PWMD01H = 0x00;
  2156  06D7  1283               	bcf	3,5	;RP0=0, select bank2
  2157  06D8  019C               	clrf	28	;volatile
  2158                           
  2159                           ;main.c: 381: PWM01DT = 0;
  2160  06D9  1683               	bsf	3,5	;RP0=1, select bank1
  2161  06DA  1303               	bcf	3,6	;RP1=0, select bank1
  2162  06DB  0193               	clrf	19	;volatile
  2163                           
  2164                           ;main.c: 382: PWM23DT = 0;
  2165  06DC  0194               	clrf	20	;volatile
  2166                           
  2167                           ;main.c: 384: PWMCON2 = 0B00000000;
  2168  06DD  1283               	bcf	3,5	;RP0=0, select bank2
  2169  06DE  1703               	bsf	3,6	;RP1=1, select bank2
  2170  06DF  0189               	clrf	9	;volatile
  2171                           
  2172                           ;main.c: 385: PWMCON1 = 0B00000000;
  2173  06E0  0188               	clrf	8	;volatile
  2174                           
  2175                           ;main.c: 386: PWMCON0 = 0B00000010;
  2176  06E1  3002               	movlw	2
  2177  06E2  0087               	movwf	7	;volatile
  2178  06E3  0008               	return
  2179  06E4                     __end_of_Set_CCP_PWM:	
  2180                           
  2181                           	psect	text13
  2182  0024                     __ptext13:	
  2183 ;; *************** function _Pwm_Test *****************
  2184 ;; Defined at:
  2185 ;;		line 133 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;  templ           1   15[BANK0 ] unsigned char 
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  1    wreg      void 
  2192 ;; Registers used:
  2193 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2194 ;; Tracked objects:
  2195 ;;		On entry : 300/0
  2196 ;;		On exit  : 300/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2199 ;;      Params:         0       0       0       0       0
  2200 ;;      Locals:         0       1       0       0       0
  2201 ;;      Temps:          0       0       0       0       0
  2202 ;;      Totals:         0       1       0       0       0
  2203 ;;Total ram usage:        1 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    6
  2206 ;; This function calls:
  2207 ;;		_Test_Pwm
  2208 ;; This function is called by:
  2209 ;;		_main
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           
  2214                           ;psect for function _Pwm_Test
  2215  0024                     _Pwm_Test:	
  2216                           
  2217                           ;main.c: 135: unsigned char templ;
  2218                           ;main.c: 136: templ = Test_Pwm();
  2219                           
  2220                           ;incstack = 0
  2221                           ; Regs used in _Pwm_Test: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2222  0024  202F  118A         	fcall	_Test_Pwm
  2223  0026  00ED               	movwf	Pwm_Test@templ
  2224                           
  2225                           ;main.c: 138: if(0x55 == templ)
  2226  0027  3A55               	xorlw	85
  2227  0028  1D03               	btfss	3,2
  2228  0029  282C               	goto	l8259
  2229  002A                     l8257:	
  2230                           
  2231                           ;main.c: 139: errf = 1;
  2232  002A  17F1               	bsf	_errf/(0+8),_errf& (0+7)	;volatile
  2233  002B  0008               	return
  2234  002C                     l8259:	
  2235                           
  2236                           ;main.c: 140: else if(0xff == templ)
  2237  002C  0F6D               	incfsz	Pwm_Test@templ,w
  2238  002D  0008               	return
  2239  002E  282A               	goto	l8257
  2240  002F                     __end_of_Pwm_Test:	
  2241  002F                     __ptext14:	
  2242 ;; *************** function _Test_Pwm *****************
  2243 ;; Defined at:
  2244 ;;		line 736 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;		None
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;  templ           1   14[BANK0 ] unsigned char 
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  1    wreg      unsigned char 
  2251 ;; Registers used:
  2252 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2253 ;; Tracked objects:
  2254 ;;		On entry : 300/0
  2255 ;;		On exit  : 300/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2258 ;;      Params:         0       0       0       0       0
  2259 ;;      Locals:         0       1       0       0       0
  2260 ;;      Temps:          0       4       0       0       0
  2261 ;;      Totals:         0       5       0       0       0
  2262 ;;Total ram usage:        5 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    5
  2265 ;; This function calls:
  2266 ;;		_Get_CUR_Dat
  2267 ;;		_PFG_read_fst
  2268 ;;		_Test_PWM_Fst
  2269 ;;		_Test_Pwm_Cur
  2270 ;;		_Test_water
  2271 ;;		_Work_RAM_CLR
  2272 ;;		_YTPFG_Flash
  2273 ;; This function is called by:
  2274 ;;		_Pwm_Test
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278                           
  2279                           ;psect for function _Test_Pwm
  2280  002F                     _Test_Pwm:	
  2281                           
  2282                           ;WHQ_TP_ZPGS_V1.2.c: 743: if(0 == pfgonetemp.pfgtemp)
  2283                           
  2284                           ;incstack = 0
  2285                           ; Regs used in _Test_Pwm: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2286  002F  0878               	movf	_pfgonetemp,w
  2287  0030  0479               	iorwf	_pfgonetemp+1,w
  2288  0031  1D03               	btfss	3,2
  2289  0032  2835               	goto	l4954
  2290                           
  2291                           ;WHQ_TP_ZPGS_V1.2.c: 744: {
  2292                           ;WHQ_TP_ZPGS_V1.2.c: 745: PFG_read_fst();
  2293  0033  229A               	fcall	_PFG_read_fst
  2294                           
  2295                           ;WHQ_TP_ZPGS_V1.2.c: 746: }
  2296  0034  3400               	retlw	0
  2297  0035                     l4954:	
  2298                           
  2299                           ;WHQ_TP_ZPGS_V1.2.c: 748: else
  2300                           ;WHQ_TP_ZPGS_V1.2.c: 749: {
  2301                           ;WHQ_TP_ZPGS_V1.2.c: 750: if(!on_off)
  2302  0035  1A71               	btfsc	_on_off/(0+8),_on_off& (0+7)	;volatile
  2303  0036  283B               	goto	l4956
  2304                           
  2305                           ;WHQ_TP_ZPGS_V1.2.c: 751: {
  2306                           ;WHQ_TP_ZPGS_V1.2.c: 752: Work_RAM_CLR();
  2307  0037  2322               	fcall	_Work_RAM_CLR
  2308                           
  2309                           ;WHQ_TP_ZPGS_V1.2.c: 753: ondly = 0;
  2310  0038  1303               	bcf	3,6	;RP1=0, select bank0
  2311  0039  01B8               	clrf	Test_Pwm@ondly
  2312                           
  2313                           ;WHQ_TP_ZPGS_V1.2.c: 754: }
  2314  003A  3400               	retlw	0
  2315  003B                     l4956:	
  2316                           
  2317                           ;WHQ_TP_ZPGS_V1.2.c: 756: else
  2318                           ;WHQ_TP_ZPGS_V1.2.c: 757: {
  2319                           ;WHQ_TP_ZPGS_V1.2.c: 758: if(!onoff_fst)
  2320  003B  1AF0               	btfsc	_onoff_fst/(0+8),_onoff_fst& (0+7)	;volatile
  2321  003C  2847               	goto	l4958
  2322                           
  2323                           ;WHQ_TP_ZPGS_V1.2.c: 759: {
  2324                           ;WHQ_TP_ZPGS_V1.2.c: 760: if(++ondly >= 20)
  2325  003D  3014               	movlw	20
  2326  003E  0AB8               	incf	Test_Pwm@ondly,f
  2327  003F  0238               	subwf	Test_Pwm@ondly,w
  2328  0040  1C03               	skipc
  2329  0041  2856               	goto	l4960
  2330                           
  2331                           ;WHQ_TP_ZPGS_V1.2.c: 761: {
  2332                           ;WHQ_TP_ZPGS_V1.2.c: 762: ondly = 0;
  2333  0042  01B8               	clrf	Test_Pwm@ondly
  2334                           
  2335                           ;WHQ_TP_ZPGS_V1.2.c: 763: onoff_fst = 1;
  2336  0043  16F0               	bsf	_onoff_fst/(0+8),_onoff_fst& (0+7)	;volatile
  2337                           
  2338                           ;WHQ_TP_ZPGS_V1.2.c: 764: curokf = 0;
  2339  0044  13F0               	bcf	_curokf/(0+8),_curokf& (0+7)	;volatile
  2340                           
  2341                           ;WHQ_TP_ZPGS_V1.2.c: 765: curokf1 = 0;
  2342  0045  1070               	bcf	Test_Pwm@curokf1/(0+8),Test_Pwm@curokf1& (0+7)
  2343  0046  2856               	goto	l4960
  2344  0047                     l4958:	
  2345                           
  2346                           ;WHQ_TP_ZPGS_V1.2.c: 769: else
  2347                           ;WHQ_TP_ZPGS_V1.2.c: 770: {
  2348                           ;WHQ_TP_ZPGS_V1.2.c: 771: if(curokf)
  2349  0047  1FF0               	btfss	_curokf/(0+8),_curokf& (0+7)	;volatile
  2350  0048  2856               	goto	l4960
  2351                           
  2352                           ;WHQ_TP_ZPGS_V1.2.c: 772: {
  2353                           ;WHQ_TP_ZPGS_V1.2.c: 773: curokf = 0;
  2354  0049  13F0               	bcf	_curokf/(0+8),_curokf& (0+7)	;volatile
  2355                           
  2356                           ;WHQ_TP_ZPGS_V1.2.c: 774: Get_CUR_Dat();
  2357  004A  2089  118A         	fcall	_Get_CUR_Dat
  2358                           
  2359                           ;WHQ_TP_ZPGS_V1.2.c: 775: curokf1 = 1;
  2360  004C  1470               	bsf	Test_Pwm@curokf1/(0+8),Test_Pwm@curokf1& (0+7)
  2361                           
  2362                           ;WHQ_TP_ZPGS_V1.2.c: 777: {
  2363                           ;WHQ_TP_ZPGS_V1.2.c: 778: templ = Test_water();
  2364  004D  2157  118A         	fcall	_Test_water
  2365  004F  1283               	bcf	3,5	;RP0=0, select bank0
  2366  0050  00EC               	movwf	Test_Pwm@templ
  2367                           
  2368                           ;WHQ_TP_ZPGS_V1.2.c: 779: if(0 != templ)
  2369  0051  086C               	movf	Test_Pwm@templ,w
  2370  0052  1903               	btfsc	3,2
  2371  0053  2856               	goto	l4960
  2372  0054                     l8035:	
  2373                           
  2374                           ;WHQ_TP_ZPGS_V1.2.c: 780: {
  2375                           ;WHQ_TP_ZPGS_V1.2.c: 781: return templ;
  2376  0054  086C               	movf	Test_Pwm@templ,w
  2377  0055  0008               	return
  2378  0056                     l4960:	
  2379                           
  2380                           ;WHQ_TP_ZPGS_V1.2.c: 782: }
  2381                           ;WHQ_TP_ZPGS_V1.2.c: 783: }
  2382                           ;WHQ_TP_ZPGS_V1.2.c: 784: }
  2383                           ;WHQ_TP_ZPGS_V1.2.c: 785: }
  2384                           ;WHQ_TP_ZPGS_V1.2.c: 787: if(curokf1)
  2385  0056  1C70               	btfss	Test_Pwm@curokf1/(0+8),Test_Pwm@curokf1& (0+7)
  2386  0057  3400               	retlw	0
  2387                           
  2388                           ;WHQ_TP_ZPGS_V1.2.c: 790: if(pwmtf)
  2389  0058  1070               	bcf	Test_Pwm@curokf1/(0+8),Test_Pwm@curokf1& (0+7)
  2390                           
  2391                           ;WHQ_TP_ZPGS_V1.2.c: 795: }
  2392                           ;WHQ_TP_ZPGS_V1.2.c: 796: }
  2393                           ;WHQ_TP_ZPGS_V1.2.c: 797: if((!pwmtf) || (!pwmtf1))
  2394  0059  1DF1               	btfss	_pwmtf/(0+8),_pwmtf& (0+7)	;volatile
  2395  005A  285D               	goto	l8049
  2396  005B  1971               	btfsc	_pwmtf1/(0+8),_pwmtf1& (0+7)	;volatile
  2397  005C  2861               	goto	l4968
  2398  005D                     l8049:	
  2399                           
  2400                           ;WHQ_TP_ZPGS_V1.2.c: 798: {
  2401                           ;WHQ_TP_ZPGS_V1.2.c: 799: templ = Test_PWM_Fst();
  2402  005D  20BC  118A         	fcall	_Test_PWM_Fst
  2403  005F  00EC               	movwf	Test_Pwm@templ
  2404  0060  2854               	goto	l8035
  2405  0061                     l4968:	
  2406                           
  2407                           ;WHQ_TP_ZPGS_V1.2.c: 802: else
  2408                           ;WHQ_TP_ZPGS_V1.2.c: 803: {
  2409                           ;WHQ_TP_ZPGS_V1.2.c: 804: if(!ponecf)
  2410  0061  1871               	btfsc	_ponecf/(0+8),_ponecf& (0+7)	;volatile
  2411  0062  287E               	goto	l8067
  2412                           
  2413                           ;WHQ_TP_ZPGS_V1.2.c: 805: {
  2414                           ;WHQ_TP_ZPGS_V1.2.c: 806: if(++ponesec >= 125)
  2415  0063  307D               	movlw	125
  2416  0064  0ACA               	incf	_ponesec,f	;volatile
  2417  0065  024A               	subwf	_ponesec,w	;volatile
  2418  0066  1C03               	skipc
  2419  0067  3400               	retlw	0
  2420                           
  2421                           ;WHQ_TP_ZPGS_V1.2.c: 807: {
  2422                           ;WHQ_TP_ZPGS_V1.2.c: 808: ponesec = 0;
  2423  0068  01CA               	clrf	_ponesec	;volatile
  2424                           
  2425                           ;WHQ_TP_ZPGS_V1.2.c: 809: ondly = 0;
  2426  0069  01B8               	clrf	Test_Pwm@ondly
  2427                           
  2428                           ;WHQ_TP_ZPGS_V1.2.c: 810: ponecf = 1;
  2429  006A  1471               	bsf	_ponecf/(0+8),_ponecf& (0+7)	;volatile
  2430                           
  2431                           ;WHQ_TP_ZPGS_V1.2.c: 811: pfgonetemp.pfgtemp = (pfgonetemp.pfgtemp & 0xfc00) + (pwmnold 
      +                          & 0x03ff);
  2432  006B  0828               	movf	_pwmnold,w	;volatile
  2433  006C  00E8               	movwf	??_Test_Pwm
  2434  006D  3003               	movlw	3
  2435  006E  0529               	andwf	_pwmnold+1,w	;volatile
  2436  006F  00E9               	movwf	??_Test_Pwm+1
  2437  0070  30FC               	movlw	252
  2438  0071  01EA               	clrf	??_Test_Pwm+2
  2439  0072  0579               	andwf	_pfgonetemp+1,w
  2440  0073  00EB               	movwf	??_Test_Pwm+3
  2441  0074  0868               	movf	??_Test_Pwm,w
  2442  0075  076A               	addwf	??_Test_Pwm+2,w
  2443  0076  00F8               	movwf	_pfgonetemp
  2444  0077  0869               	movf	??_Test_Pwm+1,w
  2445  0078  1803               	skipnc
  2446  0079  0A69               	incf	??_Test_Pwm+1,w
  2447  007A  076B               	addwf	??_Test_Pwm+3,w
  2448  007B  00F9               	movwf	_pfgonetemp+1
  2449                           
  2450                           ;WHQ_TP_ZPGS_V1.2.c: 812: PfgChangef = 1;
  2451  007C  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  2452  007D  3400               	retlw	0
  2453  007E                     l8067:	
  2454                           
  2455                           ;WHQ_TP_ZPGS_V1.2.c: 815: else
  2456                           ;WHQ_TP_ZPGS_V1.2.c: 816: {
  2457                           ;WHQ_TP_ZPGS_V1.2.c: 817: if(++ondly >= 4)
  2458  007E  3004               	movlw	4
  2459  007F  0AB8               	incf	Test_Pwm@ondly,f
  2460  0080  0238               	subwf	Test_Pwm@ondly,w
  2461  0081  1C03               	skipc
  2462  0082  3400               	retlw	0
  2463                           
  2464                           ;WHQ_TP_ZPGS_V1.2.c: 818: {
  2465                           ;WHQ_TP_ZPGS_V1.2.c: 819: ondly = 0;
  2466  0083  01B8               	clrf	Test_Pwm@ondly
  2467                           
  2468                           ;WHQ_TP_ZPGS_V1.2.c: 820: Test_Pwm_Cur();
  2469  0084  20E3  118A         	fcall	_Test_Pwm_Cur
  2470                           
  2471                           ;WHQ_TP_ZPGS_V1.2.c: 821: pwmnold = pfgonetemp.pfgtemp & 0x7fff;
  2472  0086  2370               	fcall	PL14	;call to abstracted procedure
  2473                           
  2474                           ;WHQ_TP_ZPGS_V1.2.c: 822: ponecf = 0;
  2475  0087  1071               	bcf	_ponecf/(0+8),_ponecf& (0+7)	;volatile
  2476                           
  2477                           ;WHQ_TP_ZPGS_V1.2.c: 823: }
  2478                           ;WHQ_TP_ZPGS_V1.2.c: 824: }
  2479                           ;WHQ_TP_ZPGS_V1.2.c: 825: }
  2480                           ;WHQ_TP_ZPGS_V1.2.c: 826: }
  2481                           ;WHQ_TP_ZPGS_V1.2.c: 827: }
  2482                           ;WHQ_TP_ZPGS_V1.2.c: 828: }
  2483                           ;WHQ_TP_ZPGS_V1.2.c: 829: return 0;
  2484  0088  3400               	retlw	0
  2485  0089                     __end_of_Test_Pwm:	
  2486  0089                     __ptext24:	
  2487 ;; *************** function _Get_CUR_Dat *****************
  2488 ;; Defined at:
  2489 ;;		line 465 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;		None
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;		None
  2494 ;; Return value:  Size  Location     Type
  2495 ;;                  1    wreg      void 
  2496 ;; Registers used:
  2497 ;;		wreg, status,2, status,0, pclath, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 300/0
  2500 ;;		On exit  : 300/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2503 ;;      Params:         0       0       0       0       0
  2504 ;;      Locals:         0       0       0       0       0
  2505 ;;      Temps:          0       2       0       0       0
  2506 ;;      Totals:         0       2       0       0       0
  2507 ;;Total ram usage:        2 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    3
  2510 ;; This function calls:
  2511 ;;		___awdiv
  2512 ;; This function is called by:
  2513 ;;		_Test_Pwm
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           
  2518                           ;psect for function _Get_CUR_Dat
  2519  0089                     _Get_CUR_Dat:	
  2520                           
  2521                           ;WHQ_TP_ZPGS_V1.2.c: 467: cur_addat = cursum/32;
  2522                           
  2523                           ;incstack = 0
  2524                           ; Regs used in _Get_CUR_Dat: [wreg+status,2+status,0+pclath+cstack]
  2525  0089  0827               	movf	_cursum+1,w	;volatile
  2526  008A  00E7               	movwf	??_Get_CUR_Dat+1
  2527  008B  0826               	movf	_cursum,w	;volatile
  2528  008C  00E6               	movwf	??_Get_CUR_Dat
  2529  008D  3005               	movlw	5
  2530  008E                     u3125:	
  2531  008E  1003               	clrc
  2532  008F  0CE7               	rrf	??_Get_CUR_Dat+1,f
  2533  0090  0CE6               	rrf	??_Get_CUR_Dat,f
  2534  0091  3EFF               	addlw	-1
  2535  0092  1D03               	skipz
  2536  0093  288E               	goto	u3125
  2537  0094  0866               	movf	??_Get_CUR_Dat,w
  2538  0095  00CB               	movwf	_cur_addat	;volatile
  2539                           
  2540                           ;WHQ_TP_ZPGS_V1.2.c: 468: if(0 == cur_addatold0)
  2541  0096  0847               	movf	_cur_addatold0,w	;volatile
  2542  0097  1D03               	btfss	3,2
  2543  0098  28A0               	goto	l7803
  2544                           
  2545                           ;WHQ_TP_ZPGS_V1.2.c: 469: {
  2546                           ;WHQ_TP_ZPGS_V1.2.c: 470: cur_addatold0 = cur_addat;
  2547  0099  084B               	movf	_cur_addat,w	;volatile
  2548  009A  00C7               	movwf	_cur_addatold0	;volatile
  2549                           
  2550                           ;WHQ_TP_ZPGS_V1.2.c: 471: cur_addatold1 = cur_addat;
  2551  009B  084B               	movf	_cur_addat,w	;volatile
  2552  009C  00C6               	movwf	_cur_addatold1	;volatile
  2553                           
  2554                           ;WHQ_TP_ZPGS_V1.2.c: 472: cur_addatold2 = cur_addat;
  2555  009D  084B               	movf	_cur_addat,w	;volatile
  2556  009E  00C5               	movwf	_cur_addatold2	;volatile
  2557                           
  2558                           ;WHQ_TP_ZPGS_V1.2.c: 473: }
  2559  009F  28B5               	goto	l7805
  2560  00A0                     l7803:	
  2561                           
  2562                           ;WHQ_TP_ZPGS_V1.2.c: 474: else
  2563                           ;WHQ_TP_ZPGS_V1.2.c: 475: {
  2564                           ;WHQ_TP_ZPGS_V1.2.c: 476: cur_addat = (unsigned char)((cur_addat + cur_addatold0 + cur_a
      +                          ddatold1 + cur_addatold2)/4);
  2565  00A0  084B               	movf	_cur_addat,w	;volatile
  2566  00A1  00E0               	movwf	___awdiv@dividend
  2567  00A2  01E1               	clrf	___awdiv@dividend+1
  2568  00A3  0847               	movf	_cur_addatold0,w	;volatile
  2569  00A4  07E0               	addwf	___awdiv@dividend,f
  2570  00A5  1803               	skipnc
  2571  00A6  0AE1               	incf	___awdiv@dividend+1,f
  2572  00A7  0846               	movf	_cur_addatold1,w	;volatile
  2573  00A8  07E0               	addwf	___awdiv@dividend,f
  2574  00A9  1803               	skipnc
  2575  00AA  0AE1               	incf	___awdiv@dividend+1,f
  2576  00AB  0845               	movf	_cur_addatold2,w	;volatile
  2577  00AC  07E0               	addwf	___awdiv@dividend,f
  2578  00AD  1803               	skipnc
  2579  00AE  0AE1               	incf	___awdiv@dividend+1,f
  2580  00AF  3004               	movlw	4
  2581  00B0  00DE               	movwf	___awdiv@divisor
  2582  00B1  01DF               	clrf	___awdiv@divisor+1
  2583  00B2  2255               	fcall	___awdiv
  2584  00B3  085E               	movf	?___awdiv,w
  2585  00B4  00CB               	movwf	_cur_addat	;volatile
  2586  00B5                     l7805:	
  2587                           
  2588                           ;WHQ_TP_ZPGS_V1.2.c: 477: }
  2589                           ;WHQ_TP_ZPGS_V1.2.c: 478: cur_addatold2 = cur_addatold1;
  2590  00B5  0846               	movf	_cur_addatold1,w	;volatile
  2591  00B6  00C5               	movwf	_cur_addatold2	;volatile
  2592                           
  2593                           ;WHQ_TP_ZPGS_V1.2.c: 479: cur_addatold1 = cur_addatold0;
  2594  00B7  0847               	movf	_cur_addatold0,w	;volatile
  2595  00B8  00C6               	movwf	_cur_addatold1	;volatile
  2596                           
  2597                           ;WHQ_TP_ZPGS_V1.2.c: 480: cur_addatold0 = cur_addat;
  2598  00B9  084B               	movf	_cur_addat,w	;volatile
  2599  00BA  00C7               	movwf	_cur_addatold0	;volatile
  2600  00BB  0008               	return
  2601  00BC                     __end_of_Get_CUR_Dat:	
  2602  00BC                     __ptext17:	
  2603 ;; *************** function _Test_PWM_Fst *****************
  2604 ;; Defined at:
  2605 ;;		line 501 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;		None
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;  templ           1    9[BANK0 ] unsigned char 
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      unsigned char 
  2612 ;; Registers used:
  2613 ;;		wreg, status,2, status,0, pclath, cstack
  2614 ;; Tracked objects:
  2615 ;;		On entry : 300/0
  2616 ;;		On exit  : 300/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2619 ;;      Params:         0       0       0       0       0
  2620 ;;      Locals:         0       1       0       0       0
  2621 ;;      Temps:          0       0       0       0       0
  2622 ;;      Totals:         0       1       0       0       0
  2623 ;;Total ram usage:        1 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    4
  2626 ;; This function calls:
  2627 ;;		_Test_Pwm_Cur
  2628 ;;		_YTPFG_Flash
  2629 ;; This function is called by:
  2630 ;;		_Test_Pwm
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           
  2635                           ;psect for function _Test_PWM_Fst
  2636  00BC                     _Test_PWM_Fst:	
  2637                           
  2638                           ;WHQ_TP_ZPGS_V1.2.c: 503: unsigned char templ;
  2639                           ;WHQ_TP_ZPGS_V1.2.c: 505: templ = Test_Pwm_Cur();
  2640                           
  2641                           ;incstack = 0
  2642                           ; Regs used in _Test_PWM_Fst: [wreg+status,2+status,0+pclath+cstack]
  2643  00BC  20E3  118A         	fcall	_Test_Pwm_Cur
  2644  00BE  00E7               	movwf	Test_PWM_Fst@templ
  2645                           
  2646                           ;WHQ_TP_ZPGS_V1.2.c: 506: if((0xff == templ) || (cur_addat == curset))
  2647  00BF  0A67               	incf	Test_PWM_Fst@templ,w
  2648  00C0  1903               	btfsc	3,2
  2649  00C1  28C6               	goto	l4883
  2650  00C2  301E               	movlw	30
  2651  00C3  064B               	xorwf	_cur_addat,w	;volatile
  2652  00C4  1D03               	btfss	3,2
  2653  00C5  28DE               	goto	l7845
  2654  00C6                     l4883:	
  2655                           
  2656                           ;WHQ_TP_ZPGS_V1.2.c: 507: {
  2657                           ;WHQ_TP_ZPGS_V1.2.c: 508: pwmtonf = 1;
  2658  00C6  14F1               	bsf	_pwmtonf/(0+8),_pwmtonf& (0+7)	;volatile
  2659                           
  2660                           ;WHQ_TP_ZPGS_V1.2.c: 509: if(++curokcl >= 3)
  2661  00C7  3003               	movlw	3
  2662  00C8  0AC4               	incf	_curokcl,f	;volatile
  2663  00C9  0244               	subwf	_curokcl,w	;volatile
  2664  00CA  1C03               	skipc
  2665  00CB  3400               	retlw	0
  2666                           
  2667                           ;WHQ_TP_ZPGS_V1.2.c: 510: {
  2668                           ;WHQ_TP_ZPGS_V1.2.c: 511: curokcl = 0;
  2669  00CC  01C4               	clrf	_curokcl	;volatile
  2670                           
  2671                           ;WHQ_TP_ZPGS_V1.2.c: 512: if(!pwmtf)
  2672  00CD  19F1               	btfsc	_pwmtf/(0+8),_pwmtf& (0+7)	;volatile
  2673  00CE  28D3               	goto	l4885
  2674                           
  2675                           ;WHQ_TP_ZPGS_V1.2.c: 513: {
  2676                           ;WHQ_TP_ZPGS_V1.2.c: 514: Ytzpcl = 0;
  2677  00CF  01C3               	clrf	_Ytzpcl	;volatile
  2678                           
  2679                           ;WHQ_TP_ZPGS_V1.2.c: 515: onoff_fst = 0;
  2680  00D0  12F0               	bcf	_onoff_fst/(0+8),_onoff_fst& (0+7)	;volatile
  2681                           
  2682                           ;WHQ_TP_ZPGS_V1.2.c: 516: pwmtf = 1;
  2683  00D1  15F1               	bsf	_pwmtf/(0+8),_pwmtf& (0+7)	;volatile
  2684  00D2  28D4               	goto	l4886
  2685  00D3                     l4885:	
  2686                           
  2687                           ;WHQ_TP_ZPGS_V1.2.c: 528: else if(!pwmtf1)
  2688  00D3  1D71               	btfss	_pwmtf1/(0+8),_pwmtf1& (0+7)	;volatile
  2689  00D4                     l4886:	
  2690                           
  2691                           ;WHQ_TP_ZPGS_V1.2.c: 523: else
  2692                           ;WHQ_TP_ZPGS_V1.2.c: 524: {
  2693                           ;WHQ_TP_ZPGS_V1.2.c: 525: pwmtf1 = 1;
  2694  00D4  1571               	bsf	_pwmtf1/(0+8),_pwmtf1& (0+7)	;volatile
  2695                           
  2696                           ;WHQ_TP_ZPGS_V1.2.c: 531: }
  2697                           ;WHQ_TP_ZPGS_V1.2.c: 532: pfgonetemp.pfgtemp = pfgonetemp.pfgtemp-2;
  2698  00D5  30FE               	movlw	254
  2699  00D6  07F8               	addwf	_pfgonetemp,f
  2700  00D7  1803               	skipnc
  2701  00D8  0AF9               	incf	_pfgonetemp+1,f
  2702  00D9  30FF               	movlw	255
  2703  00DA  07F9               	addwf	_pfgonetemp+1,f
  2704                           
  2705                           ;WHQ_TP_ZPGS_V1.2.c: 533: PfgChangef = 1;
  2706  00DB  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  2707                           
  2708                           ;WHQ_TP_ZPGS_V1.2.c: 534: pwmnold = pfgonetemp.pfgtemp&0x7fff;
  2709  00DC  2370               	fcall	PL14	;call to abstracted procedure
  2710                           
  2711                           ;WHQ_TP_ZPGS_V1.2.c: 535: return 0xaa;
  2712  00DD  34AA               	retlw	170
  2713  00DE                     l7845:	
  2714                           
  2715                           ;WHQ_TP_ZPGS_V1.2.c: 538: else if(0x55 == templ)
  2716  00DE  3055               	movlw	85
  2717  00DF  0667               	xorwf	Test_PWM_Fst@templ,w
  2718  00E0  1903               	btfsc	3,2
  2719                           
  2720                           ;WHQ_TP_ZPGS_V1.2.c: 539: {
  2721                           ;WHQ_TP_ZPGS_V1.2.c: 540: return 0x55;
  2722  00E1  3455               	retlw	85
  2723                           
  2724                           ;WHQ_TP_ZPGS_V1.2.c: 541: }
  2725                           ;WHQ_TP_ZPGS_V1.2.c: 542: return 0x00;
  2726  00E2  3400               	retlw	0
  2727  00E3                     __end_of_Test_PWM_Fst:	
  2728  00E3                     __ptext19:	
  2729 ;; *************** function _Test_Pwm_Cur *****************
  2730 ;; Defined at:
  2731 ;;		line 144 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;		None
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;  templ           1    8[BANK0 ] unsigned char 
  2736 ;;  temph           1    7[BANK0 ] unsigned char 
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  1    wreg      unsigned char 
  2739 ;; Registers used:
  2740 ;;		wreg, status,2, status,0, pclath, cstack
  2741 ;; Tracked objects:
  2742 ;;		On entry : 300/0
  2743 ;;		On exit  : 300/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2746 ;;      Params:         0       0       0       0       0
  2747 ;;      Locals:         0       2       0       0       0
  2748 ;;      Temps:          0       0       0       0       0
  2749 ;;      Totals:         0       2       0       0       0
  2750 ;;Total ram usage:        2 bytes
  2751 ;; Hardware stack levels used:    1
  2752 ;; Hardware stack levels required when called:    3
  2753 ;; This function calls:
  2754 ;;		_Pwm_add
  2755 ;;		_Pwm_dec
  2756 ;; This function is called by:
  2757 ;;		_Test_PWM_Fst
  2758 ;;		_Test_Pwm
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           
  2763                           ;psect for function _Test_Pwm_Cur
  2764  00E3                     _Test_Pwm_Cur:	
  2765                           
  2766                           ;incstack = 0
  2767                           ; Regs used in _Test_Pwm_Cur: [wreg+status,2+status,0+pclath+cstack]
  2768  00E3  301F               	movlw	31
  2769  00E4  024B               	subwf	_cur_addat,w	;volatile
  2770  00E5  1C03               	skipc
  2771  00E6  28FB               	goto	l7591
  2772  00E7  3002               	movlw	2
  2773                           
  2774                           ;WHQ_TP_ZPGS_V1.2.c: 150: {
  2775                           ;WHQ_TP_ZPGS_V1.2.c: 151: curdowncl = 0;
  2776  00E8  01BC               	clrf	Test_Pwm_Cur@curdowncl
  2777                           
  2778                           ;WHQ_TP_ZPGS_V1.2.c: 152: if(++curupcl >= 2)
  2779  00E9  0ABD               	incf	Test_Pwm_Cur@curupcl,f
  2780  00EA  023D               	subwf	Test_Pwm_Cur@curupcl,w
  2781  00EB  1C03               	skipc
  2782  00EC  3400               	retlw	0
  2783                           
  2784                           ;WHQ_TP_ZPGS_V1.2.c: 153: {
  2785                           ;WHQ_TP_ZPGS_V1.2.c: 154: PFGchgf = 1;
  2786  00ED  1770               	bsf	_PFGchgf/(0+8),_PFGchgf& (0+7)	;volatile
  2787                           
  2788                           ;WHQ_TP_ZPGS_V1.2.c: 155: curupcl = 0;
  2789  00EE  01BD               	clrf	Test_Pwm_Cur@curupcl
  2790                           
  2791                           ;WHQ_TP_ZPGS_V1.2.c: 156: if(0 == Pwm_dec(1,pwmfst))
  2792  00EF  082D               	movf	_pwmfst+1,w	;volatile
  2793  00F0  00DF               	movwf	Pwm_dec@pwmfset+1
  2794  00F1  082C               	movf	_pwmfst,w	;volatile
  2795  00F2  00DE               	movwf	Pwm_dec@pwmfset
  2796  00F3  3001               	movlw	1
  2797  00F4  213F  118A         	fcall	_Pwm_dec
  2798  00F6  3A00               	xorlw	0
  2799  00F7  1D03               	skipz
  2800  00F8  34FF               	retlw	255
  2801  00F9                     l7579:	
  2802                           
  2803                           ;WHQ_TP_ZPGS_V1.2.c: 157: {
  2804                           ;WHQ_TP_ZPGS_V1.2.c: 158: pfgonetemp.pfgtemp = pwmfst;
  2805                           
  2806                           ;WHQ_TP_ZPGS_V1.2.c: 159: PfgChangef = 1;
  2807  00F9  236A               	fcall	PL12	;call to abstracted procedure
  2808                           
  2809                           ;WHQ_TP_ZPGS_V1.2.c: 160: return 0x55;
  2810  00FA  3455               	retlw	85
  2811  00FB                     l7591:	
  2812                           ;WHQ_TP_ZPGS_V1.2.c: 162: else
  2813                           ;WHQ_TP_ZPGS_V1.2.c: 163: return 0xff;
  2814                           
  2815  00FB  301E               	movlw	30
  2816  00FC  024B               	subwf	_cur_addat,w	;volatile
  2817                           
  2818                           ;WHQ_TP_ZPGS_V1.2.c: 167: {
  2819                           ;WHQ_TP_ZPGS_V1.2.c: 168: curupcl = 0;
  2820  00FD  01BD               	clrf	Test_Pwm_Cur@curupcl
  2821  00FE  1803               	skipnc
  2822  00FF  2924               	goto	L6
  2823                           
  2824                           ;WHQ_TP_ZPGS_V1.2.c: 169: if(++curdowncl >= 2)
  2825  0100  3002               	movlw	2
  2826  0101  0ABC               	incf	Test_Pwm_Cur@curdowncl,f
  2827  0102  023C               	subwf	Test_Pwm_Cur@curdowncl,w
  2828  0103  1C03               	skipc
  2829  0104  3400               	retlw	0
  2830                           
  2831                           ;WHQ_TP_ZPGS_V1.2.c: 170: {
  2832                           ;WHQ_TP_ZPGS_V1.2.c: 171: PFGchgf = 1;
  2833  0105  1770               	bsf	_PFGchgf/(0+8),_PFGchgf& (0+7)	;volatile
  2834                           
  2835                           ;WHQ_TP_ZPGS_V1.2.c: 172: curdowncl = 0;
  2836  0106  01BC               	clrf	Test_Pwm_Cur@curdowncl
  2837  0107  084B               	movf	_cur_addat,w	;volatile
  2838  0108  3C1E               	sublw	30
  2839  0109  00E6               	movwf	Test_Pwm_Cur@templ
  2840                           
  2841                           ;WHQ_TP_ZPGS_V1.2.c: 174: if(templ >= 20)
  2842  010A  3014               	movlw	20
  2843  010B  0266               	subwf	Test_Pwm_Cur@templ,w
  2844  010C  1C03               	skipc
  2845  010D  2910               	goto	l7607
  2846                           
  2847                           ;WHQ_TP_ZPGS_V1.2.c: 175: temph = 4;
  2848  010E  3004               	movlw	4
  2849  010F  2915               	goto	L5
  2850  0110                     l7607:	
  2851                           
  2852                           ;WHQ_TP_ZPGS_V1.2.c: 176: else if(templ >= 15)
  2853  0110  300F               	movlw	15
  2854  0111  0266               	subwf	Test_Pwm_Cur@templ,w
  2855  0112  1C03               	skipc
  2856  0113  2917               	goto	l4809
  2857                           
  2858                           ;WHQ_TP_ZPGS_V1.2.c: 177: {
  2859                           ;WHQ_TP_ZPGS_V1.2.c: 178: temph = 2;
  2860  0114  3002               	movlw	2
  2861  0115                     L5:	
  2862  0115  00E5               	movwf	Test_Pwm_Cur@temph
  2863                           
  2864                           ;WHQ_TP_ZPGS_V1.2.c: 179: }
  2865  0116  2919               	goto	l7611
  2866  0117                     l4809:	
  2867                           
  2868                           ;WHQ_TP_ZPGS_V1.2.c: 180: else
  2869                           ;WHQ_TP_ZPGS_V1.2.c: 181: temph = 1;
  2870  0117  01E5               	clrf	Test_Pwm_Cur@temph
  2871  0118  0AE5               	incf	Test_Pwm_Cur@temph,f
  2872  0119                     l7611:	
  2873                           
  2874                           ;WHQ_TP_ZPGS_V1.2.c: 182: if(0 == Pwm_add(temph,pwmlst))
  2875  0119  082B               	movf	_pwmlst+1,w	;volatile
  2876  011A  00DF               	movwf	Pwm_add@pwmlset+1
  2877  011B  082A               	movf	_pwmlst,w	;volatile
  2878  011C  00DE               	movwf	Pwm_add@pwmlset
  2879  011D  0865               	movf	Test_Pwm_Cur@temph,w
  2880  011E  2126  118A         	fcall	_Pwm_add
  2881  0120  3A00               	xorlw	0
  2882  0121  1D03               	skipz
  2883                           
  2884                           ;WHQ_TP_ZPGS_V1.2.c: 188: else
  2885                           ;WHQ_TP_ZPGS_V1.2.c: 189: return 0xaa;
  2886  0122  34AA               	retlw	170
  2887  0123  28F9               	goto	l7579
  2888  0124                     L6:	
  2889                           ;WHQ_TP_ZPGS_V1.2.c: 192: else
  2890                           ;WHQ_TP_ZPGS_V1.2.c: 193: {
  2891                           ;WHQ_TP_ZPGS_V1.2.c: 194: curupcl = 0;
  2892                           
  2893                           
  2894                           ;WHQ_TP_ZPGS_V1.2.c: 195: curdowncl = 0;
  2895  0124  01BC               	clrf	Test_Pwm_Cur@curdowncl
  2896                           
  2897                           ;WHQ_TP_ZPGS_V1.2.c: 196: }
  2898                           ;WHQ_TP_ZPGS_V1.2.c: 197: return 0x00;
  2899  0125  3400               	retlw	0
  2900  0126                     __end_of_Test_Pwm_Cur:	
  2901  0126                     __ptext21:	
  2902 ;; *************** function _Pwm_add *****************
  2903 ;; Defined at:
  2904 ;;		line 105 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  2905 ;; Parameters:    Size  Location     Type
  2906 ;;  addcl           1    wreg     unsigned char 
  2907 ;;  pwmlset         2    0[BANK0 ] unsigned int 
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;  addcl           1    4[BANK0 ] unsigned char 
  2910 ;;  temp            2    5[BANK0 ] unsigned int 
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      unsigned char 
  2913 ;; Registers used:
  2914 ;;		wreg
  2915 ;; Tracked objects:
  2916 ;;		On entry : 300/0
  2917 ;;		On exit  : 300/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2920 ;;      Params:         0       2       0       0       0
  2921 ;;      Locals:         0       3       0       0       0
  2922 ;;      Temps:          0       2       0       0       0
  2923 ;;      Totals:         0       7       0       0       0
  2924 ;;Total ram usage:        7 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:    2
  2927 ;; This function calls:
  2928 ;;		Nothing
  2929 ;; This function is called by:
  2930 ;;		_Test_Pwm_Cur
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           
  2935                           ;psect for function _Pwm_add
  2936  0126                     _Pwm_add:	
  2937                           
  2938                           ;incstack = 0
  2939                           ; Regs used in _Pwm_add: [wreg]
  2940                           ;Pwm_add@addcl stored from wreg
  2941  0126  00E2               	movwf	Pwm_add@addcl
  2942                           
  2943                           ;WHQ_TP_ZPGS_V1.2.c: 108: unsigned int temp;
  2944                           ;WHQ_TP_ZPGS_V1.2.c: 110: pfgonetemp.pfgtemp = pfgonetemp.pfgtemp + addcl;
  2945  0127  07F8               	addwf	_pfgonetemp,f
  2946  0128  1803               	skipnc
  2947  0129  0AF9               	incf	_pfgonetemp+1,f
  2948                           
  2949                           ;WHQ_TP_ZPGS_V1.2.c: 111: PfgChangef = 1;
  2950  012A  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  2951                           
  2952                           ;WHQ_TP_ZPGS_V1.2.c: 112: temp = pfgonetemp.pfgtemp & 0x03ff;
  2953  012B  0879               	movf	_pfgonetemp+1,w
  2954  012C  00E4               	movwf	Pwm_add@temp+1
  2955  012D  0878               	movf	_pfgonetemp,w
  2956  012E  00E3               	movwf	Pwm_add@temp
  2957  012F  3003               	movlw	3
  2958  0130  05E4               	andwf	Pwm_add@temp+1,f
  2959                           
  2960                           ;WHQ_TP_ZPGS_V1.2.c: 113: if(temp > (pwmlset & 0x03ff)) return 0;
  2961  0131  085E               	movf	Pwm_add@pwmlset,w
  2962  0132  00E0               	movwf	??_Pwm_add
  2963  0133  3003               	movlw	3
  2964  0134  055F               	andwf	Pwm_add@pwmlset+1,w
  2965  0135  00E1               	movwf	??_Pwm_add+1
  2966  0136  0864               	movf	Pwm_add@temp+1,w
  2967  0137  0261               	subwf	??_Pwm_add+1,w
  2968  0138  1D03               	skipz
  2969  0139  293C               	goto	u2935
  2970  013A  0863               	movf	Pwm_add@temp,w
  2971  013B  0260               	subwf	??_Pwm_add,w
  2972  013C                     u2935:	
  2973  013C  1C03               	btfss	3,0
  2974  013D  3400               	retlw	0
  2975                           
  2976                           ;WHQ_TP_ZPGS_V1.2.c: 114: return 1;
  2977  013E  3401               	retlw	1
  2978  013F                     __end_of_Pwm_add:	
  2979  013F                     __ptext20:	
  2980 ;; *************** function _Pwm_dec *****************
  2981 ;; Defined at:
  2982 ;;		line 124 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;  deccl           1    wreg     unsigned char 
  2985 ;;  pwmfset         2    0[BANK0 ] unsigned int 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  deccl           1    4[BANK0 ] unsigned char 
  2988 ;;  temp            2    5[BANK0 ] unsigned int 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  1    wreg      unsigned char 
  2991 ;; Registers used:
  2992 ;;		wreg
  2993 ;; Tracked objects:
  2994 ;;		On entry : 300/0
  2995 ;;		On exit  : 300/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2998 ;;      Params:         0       2       0       0       0
  2999 ;;      Locals:         0       3       0       0       0
  3000 ;;      Temps:          0       2       0       0       0
  3001 ;;      Totals:         0       7       0       0       0
  3002 ;;Total ram usage:        7 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    2
  3005 ;; This function calls:
  3006 ;;		Nothing
  3007 ;; This function is called by:
  3008 ;;		_Test_Pwm_Cur
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           
  3013                           ;psect for function _Pwm_dec
  3014  013F                     _Pwm_dec:	
  3015                           
  3016                           ;incstack = 0
  3017                           ; Regs used in _Pwm_dec: [wreg]
  3018                           ;Pwm_dec@deccl stored from wreg
  3019  013F  00E2               	movwf	Pwm_dec@deccl
  3020                           
  3021                           ;WHQ_TP_ZPGS_V1.2.c: 127: unsigned int temp;
  3022                           ;WHQ_TP_ZPGS_V1.2.c: 129: pfgonetemp.pfgtemp = pfgonetemp.pfgtemp - deccl;
  3023  0140  02F8               	subwf	_pfgonetemp,f
  3024  0141  1C03               	skipc
  3025  0142  03F9               	decf	_pfgonetemp+1,f
  3026                           
  3027                           ;WHQ_TP_ZPGS_V1.2.c: 130: PfgChangef = 1;
  3028  0143  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  3029                           
  3030                           ;WHQ_TP_ZPGS_V1.2.c: 131: temp = pfgonetemp.pfgtemp & 0x03ff;
  3031  0144  0879               	movf	_pfgonetemp+1,w
  3032  0145  00E4               	movwf	Pwm_dec@temp+1
  3033  0146  0878               	movf	_pfgonetemp,w
  3034  0147  00E3               	movwf	Pwm_dec@temp
  3035  0148  3003               	movlw	3
  3036  0149  05E4               	andwf	Pwm_dec@temp+1,f
  3037                           
  3038                           ;WHQ_TP_ZPGS_V1.2.c: 132: if(temp < (pwmfset & 0x03ff)) return 0;
  3039  014A  085E               	movf	Pwm_dec@pwmfset,w
  3040  014B  00E0               	movwf	??_Pwm_dec
  3041  014C  3003               	movlw	3
  3042  014D  055F               	andwf	Pwm_dec@pwmfset+1,w
  3043  014E  00E1               	movwf	??_Pwm_dec+1
  3044  014F  0264               	subwf	Pwm_dec@temp+1,w
  3045  0150  1D03               	skipz
  3046  0151  2954               	goto	u2945
  3047  0152  0860               	movf	??_Pwm_dec,w
  3048  0153  0263               	subwf	Pwm_dec@temp,w
  3049  0154                     u2945:	
  3050  0154  1C03               	btfss	3,0
  3051  0155  3400               	retlw	0
  3052                           
  3053                           ;WHQ_TP_ZPGS_V1.2.c: 133: return 1;
  3054  0156  3401               	retlw	1
  3055  0157                     __end_of_Pwm_dec:	
  3056  0157                     __ptext16:	
  3057 ;; *************** function _Test_water *****************
  3058 ;; Defined at:
  3059 ;;		line 548 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;		None
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  temp            2    4[BANK0 ] unsigned int 
  3064 ;;  temph           1    3[BANK0 ] unsigned char 
  3065 ;;  templ           1    0        unsigned char 
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  1    wreg      unsigned char 
  3068 ;; Registers used:
  3069 ;;		wreg, status,2, status,0, btemp+1
  3070 ;; Tracked objects:
  3071 ;;		On entry : 300/0
  3072 ;;		On exit  : 200/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3075 ;;      Params:         0       0       0       0       0
  3076 ;;      Locals:         0       4       0       0       0
  3077 ;;      Temps:          0       2       0       0       0
  3078 ;;      Totals:         0       6       0       0       0
  3079 ;;Total ram usage:        6 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    2
  3082 ;; This function calls:
  3083 ;;		Nothing
  3084 ;; This function is called by:
  3085 ;;		_Test_Pwm
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           
  3090                           ;psect for function _Test_water
  3091  0157                     _Test_water:	
  3092                           
  3093                           ;WHQ_TP_ZPGS_V1.2.c: 550: unsigned char templ,temph;
  3094                           ;WHQ_TP_ZPGS_V1.2.c: 551: unsigned int temp;
  3095                           ;WHQ_TP_ZPGS_V1.2.c: 552: static unsigned int curstrold;
  3096                           ;WHQ_TP_ZPGS_V1.2.c: 553: static unsigned int strupc;
  3097                           ;WHQ_TP_ZPGS_V1.2.c: 554: static unsigned int ytdly;
  3098                           ;WHQ_TP_ZPGS_V1.2.c: 555: static bit watnof = 0;
  3099                           ;WHQ_TP_ZPGS_V1.2.c: 557: watnof=0;
  3100                           
  3101                           ;incstack = 0
  3102                           ; Regs used in _Test_water: [wreg+status,2+status,0+btemp+1]
  3103  0157  10F0               	bcf	Test_water@watnof/(0+8),Test_water@watnof& (0+7)
  3104                           
  3105                           ;WHQ_TP_ZPGS_V1.2.c: 559: if(!pwmtf)
  3106  0158  19F1               	btfsc	_pwmtf/(0+8),_pwmtf& (0+7)	;volatile
  3107  0159  29E3               	goto	l4903
  3108                           
  3109                           ;WHQ_TP_ZPGS_V1.2.c: 560: {
  3110                           ;WHQ_TP_ZPGS_V1.2.c: 561: if(pwmtonf)
  3111  015A  1CF1               	btfss	_pwmtonf/(0+8),_pwmtonf& (0+7)	;volatile
  3112  015B  2985               	goto	l7877
  3113                           
  3114                           ;WHQ_TP_ZPGS_V1.2.c: 562: {
  3115                           ;WHQ_TP_ZPGS_V1.2.c: 563: if((pfgonetemp.pfgtemp & 0x03ff) > pwmlv)
  3116  015C  235D  118A         	fcall	PL8	;call to abstracted procedure
  3117  015E  0223               	subwf	_pwmlv+1,w	;volatile
  3118  015F  1D03               	skipz
  3119  0160  2963               	goto	u3225
  3120  0161  085E               	movf	??_Test_water,w
  3121  0162  0222               	subwf	_pwmlv,w	;volatile
  3122  0163                     u3225:	
  3123  0163  1803               	skipnc
  3124  0164  2978               	goto	l4905
  3125                           
  3126                           ;WHQ_TP_ZPGS_V1.2.c: 564: {
  3127                           ;WHQ_TP_ZPGS_V1.2.c: 565: temp = (pfgonetemp.pfgtemp&0x03ff) - pwmlv;
  3128  0165  0879               	movf	_pfgonetemp+1,w
  3129  0166  00E3               	movwf	Test_water@temp+1
  3130  0167  0878               	movf	_pfgonetemp,w
  3131  0168  00E2               	movwf	Test_water@temp
  3132  0169  3003               	movlw	3
  3133  016A  05E3               	andwf	Test_water@temp+1,f
  3134                           
  3135                           ;WHQ_TP_ZPGS_V1.2.c: 566: xldisp = temp;
  3136  016B  0822               	movf	_pwmlv,w	;volatile
  3137  016C  02E2               	subwf	Test_water@temp,f
  3138  016D  0823               	movf	_pwmlv+1,w	;volatile
  3139  016E  1C03               	skipc
  3140  016F  03E3               	decf	Test_water@temp+1,f
  3141  0170  02E3               	subwf	Test_water@temp+1,f
  3142  0171  3000               	movlw	0
  3143  0172  0263               	subwf	Test_water@temp+1,w
  3144  0173  3006               	movlw	6
  3145  0174  1903               	skipnz
  3146  0175  0262               	subwf	Test_water@temp,w
  3147  0176  1C03               	btfss	3,0
  3148                           
  3149                           ;WHQ_TP_ZPGS_V1.2.c: 568: {
  3150                           ;WHQ_TP_ZPGS_V1.2.c: 569: return 0xff;
  3151  0177  34FF               	retlw	255
  3152  0178                     l4905:	
  3153                           
  3154                           ;WHQ_TP_ZPGS_V1.2.c: 570: }
  3155                           ;WHQ_TP_ZPGS_V1.2.c: 571: }
  3156                           ;WHQ_TP_ZPGS_V1.2.c: 572: if(!curupf)
  3157  0178  1E70               	btfss	_curupf/(0+8),_curupf& (0+7)	;volatile
  3158  0179  34FF               	retlw	255
  3159  017A  084B               	movf	_cur_addat,w	;volatile
  3160  017B  3E05               	addlw	5
  3161  017C  2353  118A         	fcall	PL6	;call to abstracted procedure
  3162  017E  1D03               	skipz
  3163  017F  2982               	goto	u3255
  3164  0180  301F               	movlw	31
  3165  0181  025E               	subwf	??_Test_water,w
  3166  0182                     u3255:	
  3167  0182  1C03               	btfss	3,0
  3168  0183  2A3E               	goto	l7875
  3169  0184  2A3F               	goto	l4927
  3170  0185                     l7877:	
  3171  0185  3012               	movlw	18
  3172  0186  024B               	subwf	_cur_addat,w	;volatile
  3173  0187  1803               	skipnc
  3174  0188  2991               	goto	l7885
  3175                           
  3176                           ;WHQ_TP_ZPGS_V1.2.c: 587: {
  3177                           ;WHQ_TP_ZPGS_V1.2.c: 588: strupc = 0;
  3178  0189  1683               	bsf	3,5	;RP0=1, select bank1
  3179  018A  01A8               	clrf	Test_water@strupc^(0+128)
  3180  018B  01A9               	clrf	(Test_water@strupc+1)^(0+128)
  3181                           
  3182                           ;WHQ_TP_ZPGS_V1.2.c: 589: pwmlv = pfgonetemp.pfgtemp&0x03ff;
  3183  018C  0879               	movf	_pfgonetemp+1,w
  3184  018D  1283               	bcf	3,5	;RP0=0, select bank0
  3185  018E  234B  118A         	fcall	PL2	;call to abstracted procedure
  3186                           
  3187                           ;WHQ_TP_ZPGS_V1.2.c: 590: }
  3188  0190  299F               	goto	l4913
  3189  0191                     l7885:	
  3190                           
  3191                           ;WHQ_TP_ZPGS_V1.2.c: 591: else
  3192                           ;WHQ_TP_ZPGS_V1.2.c: 592: {
  3193                           ;WHQ_TP_ZPGS_V1.2.c: 593: if(++strupc >= 500)
  3194  0191  1683               	bsf	3,5	;RP0=1, select bank1
  3195  0192  0AA8               	incf	Test_water@strupc^(0+128),f
  3196  0193  1903               	skipnz
  3197  0194  0AA9               	incf	(Test_water@strupc+1)^(0+128),f
  3198  0195  3001               	movlw	1
  3199  0196  0229               	subwf	(Test_water@strupc+1)^(0+128),w
  3200  0197  30F4               	movlw	244
  3201  0198  1903               	skipnz
  3202  0199  0228               	subwf	Test_water@strupc^(0+128),w
  3203  019A  1C03               	skipc
  3204  019B  299F               	goto	l4913
  3205                           
  3206                           ;WHQ_TP_ZPGS_V1.2.c: 594: {
  3207                           ;WHQ_TP_ZPGS_V1.2.c: 595: strupc=0;
  3208  019C  01A8               	clrf	Test_water@strupc^(0+128)
  3209  019D  01A9               	clrf	(Test_water@strupc+1)^(0+128)
  3210  019E  34FF               	retlw	255
  3211  019F                     l4913:	
  3212                           
  3213                           ;WHQ_TP_ZPGS_V1.2.c: 597: }
  3214                           ;WHQ_TP_ZPGS_V1.2.c: 598: }
  3215                           ;WHQ_TP_ZPGS_V1.2.c: 599: if(curupf)
  3216  019F  1E70               	btfss	_curupf/(0+8),_curupf& (0+7)	;volatile
  3217  01A0  29AB               	goto	l7901
  3218                           
  3219                           ;WHQ_TP_ZPGS_V1.2.c: 600: {
  3220                           ;WHQ_TP_ZPGS_V1.2.c: 601: curstrold = 0;
  3221  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  3222  01A2  01A0               	clrf	Test_water@curstrold
  3223  01A3  01A1               	clrf	Test_water@curstrold+1
  3224                           
  3225                           ;WHQ_TP_ZPGS_V1.2.c: 602: if(curmax < cur_addat)
  3226  01A4  084B               	movf	_cur_addat,w	;volatile
  3227  01A5  023E               	subwf	_curmax,w	;volatile
  3228  01A6  1803               	skipnc
  3229  01A7  2A3F               	goto	l4927
  3230                           
  3231                           ;WHQ_TP_ZPGS_V1.2.c: 603: {
  3232                           ;WHQ_TP_ZPGS_V1.2.c: 604: curmax = cur_addat;
  3233  01A8  084B               	movf	_cur_addat,w	;volatile
  3234  01A9  00BE               	movwf	_curmax	;volatile
  3235                           
  3236                           ;WHQ_TP_ZPGS_V1.2.c: 609: }
  3237                           ;WHQ_TP_ZPGS_V1.2.c: 610: }
  3238                           
  3239                           ;WHQ_TP_ZPGS_V1.2.c: 605: }
  3240  01AA  2A3F               	goto	l4927
  3241  01AB                     l7901:	
  3242                           
  3243                           ;WHQ_TP_ZPGS_V1.2.c: 611: else
  3244                           ;WHQ_TP_ZPGS_V1.2.c: 612: {
  3245                           ;WHQ_TP_ZPGS_V1.2.c: 613: curmax = 0;
  3246  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  3247  01AC  01BE               	clrf	_curmax	;volatile
  3248                           
  3249                           ;WHQ_TP_ZPGS_V1.2.c: 614: if(0 != curstrold)
  3250  01AD  0820               	movf	Test_water@curstrold,w
  3251  01AE  0421               	iorwf	Test_water@curstrold+1,w
  3252  01AF  1903               	btfsc	3,2
  3253  01B0  29DF               	goto	l4920
  3254                           
  3255                           ;WHQ_TP_ZPGS_V1.2.c: 615: {
  3256                           ;WHQ_TP_ZPGS_V1.2.c: 616: if(curstrold > cur_addat)
  3257  01B1  084B               	movf	_cur_addat,w	;volatile
  3258  01B2  00DE               	movwf	??_Test_water
  3259  01B3  01DF               	clrf	??_Test_water+1
  3260  01B4  0821               	movf	Test_water@curstrold+1,w
  3261  01B5  025F               	subwf	??_Test_water+1,w
  3262  01B6  1D03               	skipz
  3263  01B7  29BA               	goto	u3315
  3264  01B8  0820               	movf	Test_water@curstrold,w
  3265  01B9  025E               	subwf	??_Test_water,w
  3266  01BA                     u3315:	
  3267  01BA  1803               	skipnc
  3268  01BB  29C7               	goto	l7917
  3269                           
  3270                           ;WHQ_TP_ZPGS_V1.2.c: 617: {
  3271                           ;WHQ_TP_ZPGS_V1.2.c: 618: curdownc++;
  3272  01BC  0AC8               	incf	_curdownc,f	;volatile
  3273                           
  3274                           ;WHQ_TP_ZPGS_V1.2.c: 619: if(curdownc >= 2)
  3275  01BD  3002               	movlw	2
  3276  01BE  0248               	subwf	_curdownc,w	;volatile
  3277  01BF  1C03               	skipc
  3278  01C0  29DF               	goto	l4920
  3279                           
  3280                           ;WHQ_TP_ZPGS_V1.2.c: 620: {
  3281                           ;WHQ_TP_ZPGS_V1.2.c: 621: curdownc = 0;
  3282  01C1  01C8               	clrf	_curdownc	;volatile
  3283                           
  3284                           ;WHQ_TP_ZPGS_V1.2.c: 622: curupc = 0;
  3285  01C2  01C9               	clrf	_curupc	;volatile
  3286                           
  3287                           ;WHQ_TP_ZPGS_V1.2.c: 623: pwmlv = pfgonetemp.pfgtemp&0x03ff;
  3288  01C3  0879               	movf	_pfgonetemp+1,w
  3289  01C4  234B  118A         	fcall	PL2	;call to abstracted procedure
  3290  01C6  29DF               	goto	l4920
  3291  01C7                     l7917:	
  3292                           
  3293                           ;WHQ_TP_ZPGS_V1.2.c: 626: else if(curstrold < cur_addat)
  3294  01C7  084B               	movf	_cur_addat,w	;volatile
  3295  01C8  00DE               	movwf	??_Test_water
  3296  01C9  01DF               	clrf	??_Test_water+1
  3297  01CA  085F               	movf	??_Test_water+1,w
  3298  01CB  0221               	subwf	Test_water@curstrold+1,w
  3299  01CC  1D03               	skipz
  3300  01CD  29D0               	goto	u3335
  3301  01CE  085E               	movf	??_Test_water,w
  3302  01CF  0220               	subwf	Test_water@curstrold,w
  3303  01D0                     u3335:	
  3304  01D0  1803               	skipnc
  3305  01D1  29DF               	goto	l4920
  3306                           
  3307                           ;WHQ_TP_ZPGS_V1.2.c: 627: {
  3308                           ;WHQ_TP_ZPGS_V1.2.c: 628: curupc++;
  3309  01D2  0AC9               	incf	_curupc,f	;volatile
  3310                           
  3311                           ;WHQ_TP_ZPGS_V1.2.c: 629: if(curupc >= 3)
  3312  01D3  3003               	movlw	3
  3313  01D4  0249               	subwf	_curupc,w	;volatile
  3314  01D5  1C03               	skipc
  3315  01D6  29DF               	goto	l4920
  3316                           
  3317                           ;WHQ_TP_ZPGS_V1.2.c: 630: {
  3318                           ;WHQ_TP_ZPGS_V1.2.c: 631: curupc = 0;
  3319  01D7  01C9               	clrf	_curupc	;volatile
  3320                           
  3321                           ;WHQ_TP_ZPGS_V1.2.c: 632: curdownc = 0;
  3322  01D8  01C8               	clrf	_curdownc	;volatile
  3323                           
  3324                           ;WHQ_TP_ZPGS_V1.2.c: 633: if(0 == curupf)
  3325  01D9  1A70               	btfsc	_curupf/(0+8),_curupf& (0+7)	;volatile
  3326  01DA  29DF               	goto	l4920
  3327                           
  3328                           ;WHQ_TP_ZPGS_V1.2.c: 634: {
  3329                           ;WHQ_TP_ZPGS_V1.2.c: 635: pwmlv = pfgonetemp.pfgtemp&0x03ff;
  3330  01DB  0879               	movf	_pfgonetemp+1,w
  3331  01DC  234B  118A         	fcall	PL2	;call to abstracted procedure
  3332                           
  3333                           ;WHQ_TP_ZPGS_V1.2.c: 636: }
  3334                           ;WHQ_TP_ZPGS_V1.2.c: 637: curupf = 1;
  3335  01DE  1670               	bsf	_curupf/(0+8),_curupf& (0+7)	;volatile
  3336  01DF                     l4920:	
  3337                           
  3338                           ;WHQ_TP_ZPGS_V1.2.c: 638: }
  3339                           ;WHQ_TP_ZPGS_V1.2.c: 639: }
  3340                           ;WHQ_TP_ZPGS_V1.2.c: 640: }
  3341                           ;WHQ_TP_ZPGS_V1.2.c: 641: curstrold = cur_addat;
  3342  01DF  084B               	movf	_cur_addat,w	;volatile
  3343  01E0  00A0               	movwf	Test_water@curstrold
  3344  01E1  01A1               	clrf	Test_water@curstrold+1
  3345  01E2  2A3F               	goto	l4927
  3346  01E3                     l4903:	
  3347                           
  3348                           ;WHQ_TP_ZPGS_V1.2.c: 646: else
  3349                           ;WHQ_TP_ZPGS_V1.2.c: 647: {
  3350                           ;WHQ_TP_ZPGS_V1.2.c: 648: if(!pwmtf1)
  3351  01E3  1971               	btfsc	_pwmtf1/(0+8),_pwmtf1& (0+7)	;volatile
  3352  01E4  29EC               	goto	l7939
  3353                           
  3354                           ;WHQ_TP_ZPGS_V1.2.c: 649: {
  3355                           ;WHQ_TP_ZPGS_V1.2.c: 650: if(++Ytzpcl >= 125)
  3356  01E5  307D               	movlw	125
  3357  01E6  0AC3               	incf	_Ytzpcl,f	;volatile
  3358  01E7  0243               	subwf	_Ytzpcl,w	;volatile
  3359  01E8  1C03               	skipc
  3360  01E9  2A3F               	goto	l4927
  3361                           
  3362                           ;WHQ_TP_ZPGS_V1.2.c: 651: {
  3363                           ;WHQ_TP_ZPGS_V1.2.c: 652: Ytzpcl=0;
  3364  01EA  01C3               	clrf	_Ytzpcl	;volatile
  3365  01EB  34FF               	retlw	255
  3366  01EC                     l7939:	
  3367  01EC  3021               	movlw	33
  3368  01ED  024B               	subwf	_cur_addat,w	;volatile
  3369  01EE  1C03               	skipc
  3370  01EF  29FA               	goto	l7943
  3371  01F0  084B               	movf	_cur_addat,w	;volatile
  3372  01F1  3E02               	addlw	2
  3373  01F2  2353  118A         	fcall	PL6	;call to abstracted procedure
  3374  01F4  1D03               	skipz
  3375  01F5  29F8               	goto	u3395
  3376  01F6  301E               	movlw	30
  3377  01F7  025E               	subwf	??_Test_water,w
  3378  01F8                     u3395:	
  3379  01F8  1C03               	skipc
  3380  01F9  29FF               	goto	l4931
  3381  01FA                     l7943:	
  3382                           
  3383                           ;WHQ_TP_ZPGS_V1.2.c: 659: {
  3384                           ;WHQ_TP_ZPGS_V1.2.c: 660: pwmlc = 0;
  3385  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  3386  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  3387  01FC  01BF               	clrf	_pwmlc	;volatile
  3388                           
  3389                           ;WHQ_TP_ZPGS_V1.2.c: 661: pwmhc = 0;
  3390  01FD  01C0               	clrf	_pwmhc	;volatile
  3391                           
  3392                           ;WHQ_TP_ZPGS_V1.2.c: 662: }
  3393  01FE  2A33               	goto	l4934
  3394  01FF                     l4931:	
  3395                           
  3396                           ;WHQ_TP_ZPGS_V1.2.c: 663: else
  3397                           ;WHQ_TP_ZPGS_V1.2.c: 664: {
  3398                           ;WHQ_TP_ZPGS_V1.2.c: 665: if(PFGchgf)
  3399  01FF  1F70               	btfss	_PFGchgf/(0+8),_PFGchgf& (0+7)	;volatile
  3400  0200  2A33               	goto	l4934
  3401                           
  3402                           ;WHQ_TP_ZPGS_V1.2.c: 666: {
  3403                           ;WHQ_TP_ZPGS_V1.2.c: 667: PFGchgf = 0;
  3404  0201  1370               	bcf	_PFGchgf/(0+8),_PFGchgf& (0+7)	;volatile
  3405                           
  3406                           ;WHQ_TP_ZPGS_V1.2.c: 668: if(0 != pwmold)
  3407  0202  1283               	bcf	3,5	;RP0=0, select bank0
  3408  0203  1303               	bcf	3,6	;RP1=0, select bank0
  3409  0204  0824               	movf	_pwmold,w	;volatile
  3410  0205  0425               	iorwf	_pwmold+1,w	;volatile
  3411  0206  1903               	btfsc	3,2
  3412  0207  2A2B               	goto	l7973
  3413                           
  3414                           ;WHQ_TP_ZPGS_V1.2.c: 669: {
  3415                           ;WHQ_TP_ZPGS_V1.2.c: 670: if((pfgonetemp.pfgtemp & 0x03ff) > pwmold)
  3416  0208  235D  118A         	fcall	PL8	;call to abstracted procedure
  3417  020A  0225               	subwf	_pwmold+1,w	;volatile
  3418  020B  1D03               	skipz
  3419  020C  2A0F               	goto	u3425
  3420  020D  085E               	movf	??_Test_water,w
  3421  020E  0224               	subwf	_pwmold,w	;volatile
  3422  020F                     u3425:	
  3423  020F  1803               	skipnc
  3424  0210  2A19               	goto	l7961
  3425                           
  3426                           ;WHQ_TP_ZPGS_V1.2.c: 671: {
  3427                           ;WHQ_TP_ZPGS_V1.2.c: 672: pwmlc = 0;
  3428  0211  01BF               	clrf	_pwmlc	;volatile
  3429                           
  3430                           ;WHQ_TP_ZPGS_V1.2.c: 673: if(++pwmhc >= 6)
  3431  0212  3006               	movlw	6
  3432  0213  0AC0               	incf	_pwmhc,f	;volatile
  3433  0214  0240               	subwf	_pwmhc,w	;volatile
  3434  0215  1C03               	skipc
  3435  0216  2A2B               	goto	l7973
  3436                           
  3437                           ;WHQ_TP_ZPGS_V1.2.c: 674: {
  3438                           ;WHQ_TP_ZPGS_V1.2.c: 675: pwmhc = 0;
  3439  0217  01C0               	clrf	_pwmhc	;volatile
  3440  0218  34FF               	retlw	255
  3441  0219                     l7961:	
  3442                           
  3443                           ;WHQ_TP_ZPGS_V1.2.c: 679: else if((pfgonetemp.pfgtemp & 0x03ff) < pwmold)
  3444  0219  235D  118A         	fcall	PL8	;call to abstracted procedure
  3445  021B  0825               	movf	_pwmold+1,w	;volatile
  3446  021C  025F               	subwf	??_Test_water+1,w
  3447  021D  1D03               	skipz
  3448  021E  2A21               	goto	u3445
  3449  021F  0824               	movf	_pwmold,w	;volatile
  3450  0220  025E               	subwf	??_Test_water,w
  3451  0221                     u3445:	
  3452  0221  1803               	skipnc
  3453  0222  2A2B               	goto	l7973
  3454                           
  3455                           ;WHQ_TP_ZPGS_V1.2.c: 680: {
  3456                           ;WHQ_TP_ZPGS_V1.2.c: 681: pwmhc = 0;
  3457  0223  01C0               	clrf	_pwmhc	;volatile
  3458                           
  3459                           ;WHQ_TP_ZPGS_V1.2.c: 682: if(++pwmlc >= 6)
  3460  0224  3006               	movlw	6
  3461  0225  0ABF               	incf	_pwmlc,f	;volatile
  3462  0226  023F               	subwf	_pwmlc,w	;volatile
  3463  0227  1C03               	skipc
  3464  0228  2A2B               	goto	l7973
  3465                           
  3466                           ;WHQ_TP_ZPGS_V1.2.c: 683: {
  3467                           ;WHQ_TP_ZPGS_V1.2.c: 684: pwmlc = 0;
  3468  0229  01BF               	clrf	_pwmlc	;volatile
  3469  022A  34FF               	retlw	255
  3470  022B                     l7973:	
  3471                           
  3472                           ;WHQ_TP_ZPGS_V1.2.c: 686: }
  3473                           ;WHQ_TP_ZPGS_V1.2.c: 687: }
  3474                           ;WHQ_TP_ZPGS_V1.2.c: 689: }
  3475                           ;WHQ_TP_ZPGS_V1.2.c: 690: pwmold = pfgonetemp.pfgtemp & 0x03ff;
  3476  022B  0879               	movf	_pfgonetemp+1,w
  3477  022C  00A5               	movwf	_pwmold+1	;volatile
  3478  022D  0878               	movf	_pfgonetemp,w
  3479  022E  00A4               	movwf	_pwmold	;volatile
  3480  022F  30FF               	movlw	255
  3481  0230  05A4               	andwf	_pwmold,f	;volatile
  3482  0231  3003               	movlw	3
  3483  0232  05A5               	andwf	_pwmold+1,f	;volatile
  3484  0233                     l4934:	
  3485  0233  3024               	movlw	36
  3486  0234  1283               	bcf	3,5	;RP0=0, select bank0
  3487  0235  1303               	bcf	3,6	;RP1=0, select bank0
  3488  0236  00E1               	movwf	Test_water@temph
  3489                           
  3490                           ;WHQ_TP_ZPGS_V1.2.c: 695: if(cur_addat <= templ)
  3491  0237  301A               	movlw	26
  3492  0238  024B               	subwf	_cur_addat,w	;volatile
  3493  0239  1C03               	btfss	3,0
  3494                           
  3495                           ;WHQ_TP_ZPGS_V1.2.c: 696: {
  3496                           ;WHQ_TP_ZPGS_V1.2.c: 697: watnof = 1;
  3497  023A  14F0               	bsf	Test_water@watnof/(0+8),Test_water@watnof& (0+7)
  3498                           
  3499                           ;WHQ_TP_ZPGS_V1.2.c: 698: }
  3500                           ;WHQ_TP_ZPGS_V1.2.c: 699: if(cur_addat >= temph)
  3501  023B  3024               	movlw	36
  3502  023C  024B               	subwf	_cur_addat,w	;volatile
  3503  023D  1803               	btfsc	3,0
  3504  023E                     l7875:	
  3505                           
  3506                           ;WHQ_TP_ZPGS_V1.2.c: 579: {
  3507                           ;WHQ_TP_ZPGS_V1.2.c: 580: watnof=1;
  3508  023E  14F0               	bsf	Test_water@watnof/(0+8),Test_water@watnof& (0+7)
  3509  023F                     l4927:	
  3510                           
  3511                           ;WHQ_TP_ZPGS_V1.2.c: 702: }
  3512                           ;WHQ_TP_ZPGS_V1.2.c: 703: }
  3513                           ;WHQ_TP_ZPGS_V1.2.c: 704: }
  3514                           ;WHQ_TP_ZPGS_V1.2.c: 706: if(watnof)
  3515  023F  1CF0               	btfss	Test_water@watnof/(0+8),Test_water@watnof& (0+7)
  3516  0240  2A4B               	goto	l7993
  3517                           
  3518                           ;WHQ_TP_ZPGS_V1.2.c: 707: {
  3519                           ;WHQ_TP_ZPGS_V1.2.c: 708: wnoncl++;
  3520  0241  1283               	bcf	3,5	;RP0=0, select bank0
  3521  0242  1303               	bcf	3,6	;RP1=0, select bank0
  3522  0243  0AC2               	incf	_wnoncl,f	;volatile
  3523                           
  3524                           ;WHQ_TP_ZPGS_V1.2.c: 709: whavecl=0;
  3525  0244  01C1               	clrf	_whavecl	;volatile
  3526                           
  3527                           ;WHQ_TP_ZPGS_V1.2.c: 710: if(wnoncl >= 2)
  3528  0245  3002               	movlw	2
  3529  0246  0242               	subwf	_wnoncl,w	;volatile
  3530  0247  1C03               	skipc
  3531  0248  3400               	retlw	0
  3532                           
  3533                           ;WHQ_TP_ZPGS_V1.2.c: 711: {
  3534                           ;WHQ_TP_ZPGS_V1.2.c: 712: wnoncl=0;
  3535  0249  01C2               	clrf	_wnoncl	;volatile
  3536  024A  34FF               	retlw	255
  3537  024B                     l7993:	
  3538                           
  3539                           ;WHQ_TP_ZPGS_V1.2.c: 716: else
  3540                           ;WHQ_TP_ZPGS_V1.2.c: 717: {
  3541                           ;WHQ_TP_ZPGS_V1.2.c: 718: whavecl++;
  3542  024B  1283               	bcf	3,5	;RP0=0, select bank0
  3543  024C  1303               	bcf	3,6	;RP1=0, select bank0
  3544  024D  0AC1               	incf	_whavecl,f	;volatile
  3545                           
  3546                           ;WHQ_TP_ZPGS_V1.2.c: 719: if(whavecl>=5)
  3547  024E  3005               	movlw	5
  3548  024F  0241               	subwf	_whavecl,w	;volatile
  3549  0250  1C03               	skipc
  3550  0251  3400               	retlw	0
  3551                           
  3552                           ;WHQ_TP_ZPGS_V1.2.c: 720: {
  3553                           ;WHQ_TP_ZPGS_V1.2.c: 721: whavecl=0;
  3554  0252  01C1               	clrf	_whavecl	;volatile
  3555                           
  3556                           ;WHQ_TP_ZPGS_V1.2.c: 722: wnoncl=0;
  3557  0253  01C2               	clrf	_wnoncl	;volatile
  3558                           
  3559                           ;WHQ_TP_ZPGS_V1.2.c: 723: }
  3560                           ;WHQ_TP_ZPGS_V1.2.c: 724: }
  3561                           ;WHQ_TP_ZPGS_V1.2.c: 725: return 0;
  3562  0254  3400               	retlw	0
  3563  0255                     __end_of_Test_water:	
  3564  0255                     __ptext25:	
  3565 ;; *************** function ___awdiv *****************
  3566 ;; Defined at:
  3567 ;;		line 6 in file "C:\mcuproject\scm\CMS_IDE_V2.03.26\CMS_IDE_V2.03.26\data\sources\common\awdiv.c"
  3568 ;; Parameters:    Size  Location     Type
  3569 ;;  divisor         2    0[BANK0 ] int 
  3570 ;;  dividend        2    2[BANK0 ] int 
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;  quotient        2    6[BANK0 ] int 
  3573 ;;  sign            1    5[BANK0 ] unsigned char 
  3574 ;;  counter         1    4[BANK0 ] unsigned char 
  3575 ;; Return value:  Size  Location     Type
  3576 ;;                  2    0[BANK0 ] int 
  3577 ;; Registers used:
  3578 ;;		wreg, status,2, status,0
  3579 ;; Tracked objects:
  3580 ;;		On entry : 300/0
  3581 ;;		On exit  : 300/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3584 ;;      Params:         0       4       0       0       0
  3585 ;;      Locals:         0       4       0       0       0
  3586 ;;      Temps:          0       0       0       0       0
  3587 ;;      Totals:         0       8       0       0       0
  3588 ;;Total ram usage:        8 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:    2
  3591 ;; This function calls:
  3592 ;;		Nothing
  3593 ;; This function is called by:
  3594 ;;		_Get_CUR_Dat
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           
  3599                           ;psect for function ___awdiv
  3600  0255                     ___awdiv:	
  3601                           
  3602                           ;incstack = 0
  3603                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3604  0255  01E3               	clrf	___awdiv@sign
  3605  0256  1FDF               	btfss	___awdiv@divisor+1,7
  3606  0257  2A5F               	goto	l7647
  3607  0258  09DE               	comf	___awdiv@divisor,f
  3608  0259  09DF               	comf	___awdiv@divisor+1,f
  3609  025A  0ADE               	incf	___awdiv@divisor,f
  3610  025B  1903               	skipnz
  3611  025C  0ADF               	incf	___awdiv@divisor+1,f
  3612  025D  01E3               	clrf	___awdiv@sign
  3613  025E  0AE3               	incf	___awdiv@sign,f
  3614  025F                     l7647:	
  3615  025F  1FE1               	btfss	___awdiv@dividend+1,7
  3616  0260  2A68               	goto	l7653
  3617  0261  09E0               	comf	___awdiv@dividend,f
  3618  0262  09E1               	comf	___awdiv@dividend+1,f
  3619  0263  0AE0               	incf	___awdiv@dividend,f
  3620  0264  1903               	skipnz
  3621  0265  0AE1               	incf	___awdiv@dividend+1,f
  3622  0266  3001               	movlw	1
  3623  0267  06E3               	xorwf	___awdiv@sign,f
  3624  0268                     l7653:	
  3625  0268  01E4               	clrf	___awdiv@quotient
  3626  0269  01E5               	clrf	___awdiv@quotient+1
  3627  026A  085E               	movf	___awdiv@divisor,w
  3628  026B  045F               	iorwf	___awdiv@divisor+1,w
  3629  026C  1903               	btfsc	3,2
  3630  026D  2A8D               	goto	l7675
  3631  026E  01E2               	clrf	___awdiv@counter
  3632  026F                     L10:	
  3633  026F  0AE2               	incf	___awdiv@counter,f
  3634  0270  1BDF               	btfsc	___awdiv@divisor+1,7
  3635  0271  2A76               	goto	l7663
  3636  0272  1003               	clrc
  3637  0273  0DDE               	rlf	___awdiv@divisor,f
  3638  0274  0DDF               	rlf	___awdiv@divisor+1,f
  3639  0275  2A6F               	goto	L10
  3640  0276                     l7663:	
  3641  0276  1003               	clrc
  3642  0277  0DE4               	rlf	___awdiv@quotient,f
  3643  0278  0DE5               	rlf	___awdiv@quotient+1,f
  3644  0279  085F               	movf	___awdiv@divisor+1,w
  3645  027A  0261               	subwf	___awdiv@dividend+1,w
  3646  027B  1D03               	skipz
  3647  027C  2A7F               	goto	u3075
  3648  027D  085E               	movf	___awdiv@divisor,w
  3649  027E  0260               	subwf	___awdiv@dividend,w
  3650  027F                     u3075:	
  3651  027F  1C03               	skipc
  3652  0280  2A89               	goto	L11
  3653  0281  085E               	movf	___awdiv@divisor,w
  3654  0282  02E0               	subwf	___awdiv@dividend,f
  3655  0283  085F               	movf	___awdiv@divisor+1,w
  3656  0284  1C03               	skipc
  3657  0285  03E1               	decf	___awdiv@dividend+1,f
  3658  0286  02E1               	subwf	___awdiv@dividend+1,f
  3659  0287  1464               	bsf	___awdiv@quotient,0
  3660  0288  1003               	clrc
  3661  0289                     L11:	
  3662  0289  0CDF               	rrf	___awdiv@divisor+1,f
  3663  028A  0CDE               	rrf	___awdiv@divisor,f
  3664  028B  0BE2               	decfsz	___awdiv@counter,f
  3665  028C  2A76               	goto	l7663
  3666  028D                     l7675:	
  3667  028D  0863               	movf	___awdiv@sign,w
  3668  028E  1903               	btfsc	3,2
  3669  028F  2A95               	goto	l7679
  3670  0290  09E4               	comf	___awdiv@quotient,f
  3671  0291  09E5               	comf	___awdiv@quotient+1,f
  3672  0292  0AE4               	incf	___awdiv@quotient,f
  3673  0293  1903               	skipnz
  3674  0294  0AE5               	incf	___awdiv@quotient+1,f
  3675  0295                     l7679:	
  3676  0295  0865               	movf	___awdiv@quotient+1,w
  3677  0296  00DF               	movwf	?___awdiv+1
  3678  0297  0864               	movf	___awdiv@quotient,w
  3679  0298  00DE               	movwf	?___awdiv
  3680  0299  0008               	return
  3681  029A                     __end_of___awdiv:	
  3682  029A                     __ptext22:	
  3683 ;; *************** function _PFG_read_fst *****************
  3684 ;; Defined at:
  3685 ;;		line 206 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;		None
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;  temp            2    7[BANK0 ] unsigned int 
  3690 ;;  pfgconset       1    6[BANK0 ] unsigned char 
  3691 ;;  temph           1    5[BANK0 ] unsigned char 
  3692 ;;  templ           1    4[BANK0 ] unsigned char 
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  1    wreg      void 
  3695 ;; Registers used:
  3696 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3697 ;; Tracked objects:
  3698 ;;		On entry : 300/0
  3699 ;;		On exit  : 300/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3702 ;;      Params:         0       0       0       0       0
  3703 ;;      Locals:         0       5       0       0       0
  3704 ;;      Temps:          0       2       0       0       0
  3705 ;;      Totals:         0       7       0       0       0
  3706 ;;Total ram usage:        7 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:    3
  3709 ;; This function calls:
  3710 ;;		_Set_jiyi_re
  3711 ;; This function is called by:
  3712 ;;		_Test_Pwm
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           
  3717                           ;psect for function _PFG_read_fst
  3718  029A                     _PFG_read_fst:	
  3719                           
  3720                           ;WHQ_TP_ZPGS_V1.2.c: 208: unsigned char templ,temph;
  3721                           ;WHQ_TP_ZPGS_V1.2.c: 209: unsigned int temp;
  3722                           ;WHQ_TP_ZPGS_V1.2.c: 210: unsigned char pfgconset;
  3723                           ;WHQ_TP_ZPGS_V1.2.c: 212: switch(pfg_select)
  3724                           
  3725                           ;incstack = 0
  3726                           ; Regs used in _PFG_read_fst: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3727  029A  2AC4               	goto	l7703
  3728  029B                     l7685:	
  3729                           
  3730                           ;WHQ_TP_ZPGS_V1.2.c: 215: {
  3731                           ;WHQ_TP_ZPGS_V1.2.c: 216: templ = Set_jiyi_re(0x18);
  3732  029B  3018               	movlw	24
  3733  029C  230E  118A         	fcall	_Set_jiyi_re
  3734  029E  00E2               	movwf	PFG_read_fst@templ
  3735                           
  3736                           ;WHQ_TP_ZPGS_V1.2.c: 217: temph = Set_jiyi_re(0x19);
  3737  029F  3019               	movlw	25
  3738  02A0  230E  118A         	fcall	_Set_jiyi_re
  3739  02A2  00E3               	movwf	PFG_read_fst@temph
  3740                           
  3741                           ;WHQ_TP_ZPGS_V1.2.c: 218: pfgconset = 0x04;
  3742  02A3  3004               	movlw	4
  3743  02A4  2AC2               	goto	L9
  3744  02A5                     l7689:	
  3745                           ;WHQ_TP_ZPGS_V1.2.c: 219: break;
  3746                           
  3747                           
  3748                           ;WHQ_TP_ZPGS_V1.2.c: 222: {
  3749                           ;WHQ_TP_ZPGS_V1.2.c: 223: templ = Set_jiyi_re(0x1a);
  3750  02A5  301A               	movlw	26
  3751  02A6  230E  118A         	fcall	_Set_jiyi_re
  3752  02A8  00E2               	movwf	PFG_read_fst@templ
  3753                           
  3754                           ;WHQ_TP_ZPGS_V1.2.c: 224: temph = Set_jiyi_re(0x1b);
  3755  02A9  301B               	movlw	27
  3756  02AA  230E  118A         	fcall	_Set_jiyi_re
  3757  02AC  00E3               	movwf	PFG_read_fst@temph
  3758                           
  3759                           ;WHQ_TP_ZPGS_V1.2.c: 225: pfgconset = 0x24;
  3760  02AD  3024               	movlw	36
  3761  02AE  2AC2               	goto	L9
  3762  02AF                     l7693:	
  3763                           ;WHQ_TP_ZPGS_V1.2.c: 226: break;
  3764                           
  3765                           
  3766                           ;WHQ_TP_ZPGS_V1.2.c: 229: {
  3767                           ;WHQ_TP_ZPGS_V1.2.c: 230: templ = Set_jiyi_re(0x1c);
  3768  02AF  301C               	movlw	28
  3769  02B0  230E  118A         	fcall	_Set_jiyi_re
  3770  02B2  00E2               	movwf	PFG_read_fst@templ
  3771                           
  3772                           ;WHQ_TP_ZPGS_V1.2.c: 231: temph = Set_jiyi_re(0x1d);
  3773  02B3  301D               	movlw	29
  3774  02B4  230E  118A         	fcall	_Set_jiyi_re
  3775  02B6  00E3               	movwf	PFG_read_fst@temph
  3776                           
  3777                           ;WHQ_TP_ZPGS_V1.2.c: 232: pfgconset = 0x44;
  3778  02B7  3044               	movlw	68
  3779  02B8  2AC2               	goto	L9
  3780  02B9                     l7697:	
  3781                           ;WHQ_TP_ZPGS_V1.2.c: 233: break;
  3782                           
  3783                           
  3784                           ;WHQ_TP_ZPGS_V1.2.c: 236: {
  3785                           ;WHQ_TP_ZPGS_V1.2.c: 237: templ = Set_jiyi_re(0x1e);
  3786  02B9  301E               	movlw	30
  3787  02BA  230E  118A         	fcall	_Set_jiyi_re
  3788  02BC  00E2               	movwf	PFG_read_fst@templ
  3789                           
  3790                           ;WHQ_TP_ZPGS_V1.2.c: 238: temph = Set_jiyi_re(0x1f);
  3791  02BD  301F               	movlw	31
  3792  02BE  230E  118A         	fcall	_Set_jiyi_re
  3793  02C0  00E3               	movwf	PFG_read_fst@temph
  3794                           
  3795                           ;WHQ_TP_ZPGS_V1.2.c: 239: pfgconset = 0x64;
  3796  02C1  3064               	movlw	100
  3797  02C2                     L9:	
  3798  02C2  00E4               	movwf	PFG_read_fst@pfgconset
  3799                           
  3800                           ;WHQ_TP_ZPGS_V1.2.c: 240: break;
  3801  02C3  2AD6               	goto	l7705
  3802  02C4                     l7703:	
  3803  02C4  3001               	movlw	low (_pfg_select-__stringbase)
  3804  02C5  0084               	movwf	4
  3805  02C6  118A  2704  118A   	fcall	stringdir
  3806                           
  3807                           ; Switch size 1, requested type "space"
  3808                           ; Number of cases is 4, Range of values is 1 to 4
  3809                           ; switch strategies available:
  3810                           ; Name         Instructions Cycles
  3811                           ; simple_byte           13     7 (average)
  3812                           ; direct_byte           18    10 (fixed)
  3813                           ; jumptable            263     9 (fixed)
  3814                           ;	Chosen strategy is simple_byte
  3815  02C9  3A01               	xorlw	1	; case 1
  3816  02CA  1903               	skipnz
  3817  02CB  2A9B               	goto	l7685
  3818  02CC  3A03               	xorlw	3	; case 2
  3819  02CD  1903               	skipnz
  3820  02CE  2AA5               	goto	l7689
  3821  02CF  3A01               	xorlw	1	; case 3
  3822  02D0  1903               	skipnz
  3823  02D1  2AAF               	goto	l7693
  3824  02D2  3A07               	xorlw	7	; case 4
  3825  02D3  1903               	skipnz
  3826  02D4  2AB9               	goto	l7697
  3827  02D5  2AD6               	goto	l7705
  3828  02D6                     l7705:	
  3829                           
  3830                           ;WHQ_TP_ZPGS_V1.2.c: 244: temph = (unsigned char)(temph&0x03);
  3831  02D6  3003               	movlw	3
  3832  02D7  05E3               	andwf	PFG_read_fst@temph,f
  3833                           
  3834                           ;WHQ_TP_ZPGS_V1.2.c: 245: temp = (unsigned int)(temph*256 + templ);
  3835  02D8  0863               	movf	PFG_read_fst@temph,w
  3836  02D9  00E6               	movwf	PFG_read_fst@temp+1
  3837  02DA  01E5               	clrf	PFG_read_fst@temp
  3838  02DB  0862               	movf	PFG_read_fst@templ,w
  3839  02DC  07E5               	addwf	PFG_read_fst@temp,f
  3840  02DD  1803               	skipnc
  3841  02DE  0AE6               	incf	PFG_read_fst@temp+1,f
  3842  02DF  3000               	movlw	0
  3843  02E0  0266               	subwf	PFG_read_fst@temp+1,w
  3844  02E1  30FB               	movlw	251
  3845  02E2  1903               	skipnz
  3846  02E3  0265               	subwf	PFG_read_fst@temp,w
  3847  02E4  1C03               	skipc
  3848  02E5  2AEF               	goto	l7715
  3849  02E6  0865               	movf	PFG_read_fst@temp,w
  3850  02E7  3E06               	addlw	6
  3851  02E8  00AC               	movwf	_pwmfst	;volatile
  3852  02E9  0866               	movf	PFG_read_fst@temp+1,w
  3853  02EA  1803               	skipnc
  3854  02EB  3E01               	addlw	1
  3855  02EC  3EFF               	addlw	255
  3856  02ED  00AD               	movwf	_pwmfst+1	;volatile
  3857  02EE  2AF1               	goto	l7717
  3858  02EF                     l7715:	
  3859                           
  3860                           ;WHQ_TP_ZPGS_V1.2.c: 248: else
  3861                           ;WHQ_TP_ZPGS_V1.2.c: 249: pwmfst = 0;
  3862  02EF  01AC               	clrf	_pwmfst	;volatile
  3863  02F0  01AD               	clrf	_pwmfst+1	;volatile
  3864  02F1                     l7717:	
  3865  02F1  0865               	movf	PFG_read_fst@temp,w
  3866  02F2  3EFA               	addlw	250
  3867  02F3  00AA               	movwf	_pwmlst	;volatile
  3868  02F4  0866               	movf	PFG_read_fst@temp+1,w
  3869  02F5  1803               	skipnc
  3870  02F6  3E01               	addlw	1
  3871  02F7  3E00               	addlw	0
  3872  02F8  00AB               	movwf	_pwmlst+1	;volatile
  3873                           
  3874                           ;WHQ_TP_ZPGS_V1.2.c: 252: if((pwmlst&0x0400) != 0)
  3875  02F9  1D2B               	btfss	_pwmlst+1,2	;volatile
  3876  02FA  2AFE               	goto	l7723
  3877                           
  3878                           ;WHQ_TP_ZPGS_V1.2.c: 253: pwmlst = 1024;
  3879  02FB  01AA               	clrf	_pwmlst	;volatile
  3880  02FC  3004               	movlw	4
  3881  02FD  00AB               	movwf	_pwmlst+1	;volatile
  3882  02FE                     l7723:	
  3883                           
  3884                           ;WHQ_TP_ZPGS_V1.2.c: 255: pwmfst = (unsigned int)(pwmfst|(unsigned int)(pfgconset<<8));
  3885  02FE  2363  118A         	fcall	PL10	;call to abstracted procedure
  3886  0300  04AC               	iorwf	_pwmfst,f	;volatile
  3887  0301  0861               	movf	??_PFG_read_fst+1,w
  3888  0302  04AD               	iorwf	_pwmfst+1,f	;volatile
  3889                           
  3890                           ;WHQ_TP_ZPGS_V1.2.c: 256: pwmlst = (unsigned int)(pwmlst|(unsigned int)(pfgconset<<8));
  3891  0303  2363  118A         	fcall	PL10	;call to abstracted procedure
  3892  0305  04AA               	iorwf	_pwmlst,f	;volatile
  3893  0306  0861               	movf	??_PFG_read_fst+1,w
  3894  0307  04AB               	iorwf	_pwmlst+1,f	;volatile
  3895                           
  3896                           ;WHQ_TP_ZPGS_V1.2.c: 257: pfgonetemp.pfgtemp = pwmfst;
  3897                           
  3898                           ;WHQ_TP_ZPGS_V1.2.c: 258: PfgChangef = 1;
  3899  0308  236A               	fcall	PL12	;call to abstracted procedure
  3900                           
  3901                           ;WHQ_TP_ZPGS_V1.2.c: 259: pwmnold = pfgonetemp.pfgtemp;
  3902  0309  0879               	movf	_pfgonetemp+1,w
  3903  030A  00A9               	movwf	_pwmnold+1	;volatile
  3904  030B  0878               	movf	_pfgonetemp,w
  3905  030C  00A8               	movwf	_pwmnold	;volatile
  3906  030D  0008               	return
  3907  030E                     __end_of_PFG_read_fst:	
  3908  030E                     __ptext23:	
  3909 ;; *************** function _Set_jiyi_re *****************
  3910 ;; Defined at:
  3911 ;;		line 68 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.
      +4M\Eeprom.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;  raddr           1    wreg     unsigned char 
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;  raddr           1    0[BANK0 ] unsigned char 
  3916 ;;  redata          1    1[BANK0 ] unsigned char 
  3917 ;; Return value:  Size  Location     Type
  3918 ;;                  1    wreg      unsigned char 
  3919 ;; Registers used:
  3920 ;;		wreg
  3921 ;; Tracked objects:
  3922 ;;		On entry : 300/0
  3923 ;;		On exit  : 300/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3926 ;;      Params:         0       0       0       0       0
  3927 ;;      Locals:         0       2       0       0       0
  3928 ;;      Temps:          0       0       0       0       0
  3929 ;;      Totals:         0       2       0       0       0
  3930 ;;Total ram usage:        2 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    2
  3933 ;; This function calls:
  3934 ;;		Nothing
  3935 ;; This function is called by:
  3936 ;;		_PFG_read_fst
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           
  3941                           ;psect for function _Set_jiyi_re
  3942  030E                     _Set_jiyi_re:	
  3943                           
  3944                           ;incstack = 0
  3945                           ; Regs used in _Set_jiyi_re: [wreg]
  3946                           ;Set_jiyi_re@raddr stored from wreg
  3947  030E  00DE               	movwf	Set_jiyi_re@raddr
  3948                           
  3949                           ;Eeprom.c: 70: unsigned char redata;
  3950                           ;Eeprom.c: 72: EEADR = raddr;
  3951  030F  1703               	bsf	3,6	;RP1=1, select bank2
  3952  0310  008D               	movwf	13	;volatile
  3953  0311  0000               	nop	;# 
  3954                           
  3955                           ;Eeprom.c: 74: EEPGD = 0;
  3956  0312  1683               	bsf	3,5	;RP0=1, select bank3
  3957  0313  1703               	bsf	3,6	;RP1=1, select bank3
  3958  0314  138C               	bcf	12,7	;volsfr
  3959  0315  0000               	nop	;# 
  3960                           
  3961                           ;Eeprom.c: 76: RD = 1;
  3962  0316  1683               	bsf	3,5	;RP0=1, select bank3
  3963  0317  1703               	bsf	3,6	;RP1=1, select bank3
  3964  0318  140C               	bsf	12,0	;volsfr
  3965  0319  0000               	nop	;# 
  3966  031A  0000               	nop	;# 
  3967  031B  0000               	nop	;# 
  3968                           
  3969                           ;Eeprom.c: 80: redata = EEDAT;
  3970  031C  1283               	bcf	3,5	;RP0=0, select bank2
  3971  031D  1703               	bsf	3,6	;RP1=1, select bank2
  3972  031E  080C               	movf	12,w	;volatile
  3973  031F  1303               	bcf	3,6	;RP1=0, select bank0
  3974  0320  00DF               	movwf	Set_jiyi_re@redata
  3975                           
  3976                           ;Eeprom.c: 81: return redata;
  3977  0321  0008               	return
  3978  0322                     __end_of_Set_jiyi_re:	
  3979  0322                     __ptext15:	
  3980 ;; *************** function _Work_RAM_CLR *****************
  3981 ;; Defined at:
  3982 ;;		line 416 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  3983 ;; Parameters:    Size  Location     Type
  3984 ;;		None
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;		None
  3987 ;; Return value:  Size  Location     Type
  3988 ;;                  1    wreg      void 
  3989 ;; Registers used:
  3990 ;;		wreg, status,2, status,0
  3991 ;; Tracked objects:
  3992 ;;		On entry : 300/0
  3993 ;;		On exit  : 300/200
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3996 ;;      Params:         0       0       0       0       0
  3997 ;;      Locals:         0       0       0       0       0
  3998 ;;      Temps:          0       2       0       0       0
  3999 ;;      Totals:         0       2       0       0       0
  4000 ;;Total ram usage:        2 bytes
  4001 ;; Hardware stack levels used:    1
  4002 ;; Hardware stack levels required when called:    2
  4003 ;; This function calls:
  4004 ;;		Nothing
  4005 ;; This function is called by:
  4006 ;;		_Test_Pwm
  4007 ;; This function uses a non-reentrant model
  4008 ;;
  4009                           
  4010                           
  4011                           ;psect for function _Work_RAM_CLR
  4012  0322                     _Work_RAM_CLR:	
  4013                           
  4014                           ;WHQ_TP_ZPGS_V1.2.c: 435: else
  4015                           ;WHQ_TP_ZPGS_V1.2.c: 436: {
  4016                           ;WHQ_TP_ZPGS_V1.2.c: 437: pwmtf = 0;
  4017                           
  4018                           ;incstack = 0
  4019                           ; Regs used in _Work_RAM_CLR: [wreg+status,2+status,0]
  4020  0322  11F1               	bcf	_pwmtf/(0+8),_pwmtf& (0+7)	;volatile
  4021                           
  4022                           ;WHQ_TP_ZPGS_V1.2.c: 438: pwmtf1 = 0;
  4023  0323  1171               	bcf	_pwmtf1/(0+8),_pwmtf1& (0+7)	;volatile
  4024                           
  4025                           ;WHQ_TP_ZPGS_V1.2.c: 439: pwmtonf = 0;
  4026  0324  10F1               	bcf	_pwmtonf/(0+8),_pwmtonf& (0+7)	;volatile
  4027                           
  4028                           ;WHQ_TP_ZPGS_V1.2.c: 440: pfgonetemp.pfgtemp = (pfgonetemp.pfgtemp & 0x8000) + pwmfst;
  4029  0325  3080               	movlw	128
  4030  0326  01DE               	clrf	??_Work_RAM_CLR
  4031  0327  0579               	andwf	_pfgonetemp+1,w
  4032  0328  00DF               	movwf	??_Work_RAM_CLR+1
  4033  0329  082C               	movf	_pwmfst,w	;volatile
  4034  032A  075E               	addwf	??_Work_RAM_CLR,w
  4035  032B  00F8               	movwf	_pfgonetemp
  4036  032C  082D               	movf	_pwmfst+1,w	;volatile
  4037  032D  1803               	skipnc
  4038  032E  0A2D               	incf	_pwmfst+1,w	;volatile
  4039  032F  075F               	addwf	??_Work_RAM_CLR+1,w
  4040  0330  00F9               	movwf	_pfgonetemp+1
  4041                           
  4042                           ;WHQ_TP_ZPGS_V1.2.c: 441: pwmnold = pfgonetemp.pfgtemp & 0x7fff;
  4043  0331  00A9               	movwf	_pwmnold+1	;volatile
  4044  0332  0878               	movf	_pfgonetemp,w
  4045  0333  00A8               	movwf	_pwmnold	;volatile
  4046  0334  13A9               	bcf	_pwmnold+1,7	;volatile
  4047                           
  4048                           ;WHQ_TP_ZPGS_V1.2.c: 442: PfgChangef = 1;
  4049  0335  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  4050                           
  4051                           ;WHQ_TP_ZPGS_V1.2.c: 443: ponecf = 0;
  4052  0336  1071               	bcf	_ponecf/(0+8),_ponecf& (0+7)	;volatile
  4053                           
  4054                           ;WHQ_TP_ZPGS_V1.2.c: 444: cur_addatold0 = 0;
  4055  0337  01C7               	clrf	_cur_addatold0	;volatile
  4056                           
  4057                           ;WHQ_TP_ZPGS_V1.2.c: 445: cur_addatold1 = 0;
  4058  0338  01C6               	clrf	_cur_addatold1	;volatile
  4059                           
  4060                           ;WHQ_TP_ZPGS_V1.2.c: 446: cur_addatold2 = 0;
  4061  0339  01C5               	clrf	_cur_addatold2	;volatile
  4062                           
  4063                           ;WHQ_TP_ZPGS_V1.2.c: 447: curokcl = 0;
  4064  033A  01C4               	clrf	_curokcl	;volatile
  4065                           
  4066                           ;WHQ_TP_ZPGS_V1.2.c: 448: onoff_fst = 0;
  4067  033B  12F0               	bcf	_onoff_fst/(0+8),_onoff_fst& (0+7)	;volatile
  4068                           
  4069                           ;WHQ_TP_ZPGS_V1.2.c: 449: whavecl = 0;
  4070  033C  01C1               	clrf	_whavecl	;volatile
  4071                           
  4072                           ;WHQ_TP_ZPGS_V1.2.c: 450: wnoncl = 0;
  4073  033D  01C2               	clrf	_wnoncl	;volatile
  4074                           
  4075                           ;WHQ_TP_ZPGS_V1.2.c: 451: ponesec = 0;
  4076  033E  01CA               	clrf	_ponesec	;volatile
  4077                           
  4078                           ;WHQ_TP_ZPGS_V1.2.c: 452: curupc = 0;
  4079  033F  01C9               	clrf	_curupc	;volatile
  4080                           
  4081                           ;WHQ_TP_ZPGS_V1.2.c: 453: curdownc = 0;
  4082  0340  01C8               	clrf	_curdownc	;volatile
  4083                           
  4084                           ;WHQ_TP_ZPGS_V1.2.c: 454: curupf = 0;
  4085  0341  1270               	bcf	_curupf/(0+8),_curupf& (0+7)	;volatile
  4086                           
  4087                           ;WHQ_TP_ZPGS_V1.2.c: 455: pwmlv = 0;
  4088  0342  01A2               	clrf	_pwmlv	;volatile
  4089  0343  01A3               	clrf	_pwmlv+1	;volatile
  4090                           
  4091                           ;WHQ_TP_ZPGS_V1.2.c: 456: pwmold = 0;
  4092  0344  01A4               	clrf	_pwmold	;volatile
  4093  0345  01A5               	clrf	_pwmold+1	;volatile
  4094                           
  4095                           ;WHQ_TP_ZPGS_V1.2.c: 457: pwmhc = 0;
  4096  0346  01C0               	clrf	_pwmhc	;volatile
  4097                           
  4098                           ;WHQ_TP_ZPGS_V1.2.c: 458: pwmlc = 0;
  4099  0347  01BF               	clrf	_pwmlc	;volatile
  4100                           
  4101                           ;WHQ_TP_ZPGS_V1.2.c: 459: PFGCON1 &= ~0x80;
  4102  0348  1703               	bsf	3,6	;RP1=1, select bank2
  4103  0349  139E               	bcf	30,7	;volatile
  4104  034A  0008               	return
  4105  034B                     __end_of_Work_RAM_CLR:	
  4106  034B                     PL2:	
  4107  034B  00A3               	movwf	_pwmlv+1	;volatile
  4108  034C  0878               	movf	_pfgonetemp,w
  4109  034D  00A2               	movwf	_pwmlv	;volatile
  4110  034E  30FF               	movlw	255
  4111  034F  05A2               	andwf	_pwmlv,f	;volatile
  4112  0350  3003               	movlw	3
  4113  0351  05A3               	andwf	_pwmlv+1,f	;volatile
  4114  0352  0008               	return
  4115  0353                     __end_ofPL2:	
  4116  0353                     PL6:	
  4117  0353  00DE               	movwf	??_Test_water
  4118  0354  3000               	movlw	0
  4119  0355  1803               	skipnc
  4120  0356  3001               	movlw	1
  4121  0357  00DF               	movwf	??_Test_water+1
  4122  0358  3A80               	xorlw	128
  4123  0359  00FF               	movwf	127
  4124  035A  3080               	movlw	128
  4125  035B  027F               	subwf	127,w
  4126  035C  0008               	return
  4127  035D                     __end_ofPL6:	
  4128  035D                     PL8:	
  4129  035D  0878               	movf	_pfgonetemp,w
  4130  035E  00DE               	movwf	??_Test_water
  4131  035F  3003               	movlw	3
  4132  0360  0579               	andwf	_pfgonetemp+1,w
  4133  0361  00DF               	movwf	??_Test_water+1
  4134  0362  0008               	return
  4135  0363                     __end_ofPL8:	
  4136  0363                     PL10:	
  4137  0363  0864               	movf	PFG_read_fst@pfgconset,w
  4138  0364  00E0               	movwf	??_PFG_read_fst
  4139  0365  01E1               	clrf	??_PFG_read_fst+1
  4140  0366  00E1               	movwf	??_PFG_read_fst+1
  4141  0367  01E0               	clrf	??_PFG_read_fst
  4142  0368  0860               	movf	??_PFG_read_fst,w
  4143  0369  0008               	return
  4144  036A                     __end_ofPL10:	
  4145  036A                     PL12:	
  4146  036A  082D               	movf	_pwmfst+1,w	;volatile
  4147  036B  00F9               	movwf	_pfgonetemp+1
  4148  036C  082C               	movf	_pwmfst,w	;volatile
  4149  036D  00F8               	movwf	_pfgonetemp
  4150  036E  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  4151  036F  0008               	return
  4152  0370                     __end_ofPL12:	
  4153  0370                     PL14:	
  4154  0370  0879               	movf	_pfgonetemp+1,w
  4155  0371  00A9               	movwf	_pwmnold+1	;volatile
  4156  0372  0878               	movf	_pfgonetemp,w
  4157  0373  00A8               	movwf	_pwmnold	;volatile
  4158  0374  13A9               	bcf	_pwmnold+1,7	;volatile
  4159  0375  0008               	return
  4160  0376                     __end_ofPL14:	
  4161                           
  4162                           	psect	text18
  4163  06A9                     __ptext18:	
  4164 ;; *************** function _YTPFG_Flash *****************
  4165 ;; Defined at:
  4166 ;;		line 485 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;		None
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;  temp            2    3[BANK0 ] unsigned int 
  4171 ;;  templ           1    2[BANK0 ] unsigned char 
  4172 ;; Return value:  Size  Location     Type
  4173 ;;                  1    wreg      void 
  4174 ;; Registers used:
  4175 ;;		wreg, status,2, status,0
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 300/200
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4181 ;;      Params:         0       0       0       0       0
  4182 ;;      Locals:         0       3       0       0       0
  4183 ;;      Temps:          0       2       0       0       0
  4184 ;;      Totals:         0       5       0       0       0
  4185 ;;Total ram usage:        5 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; Hardware stack levels required when called:    2
  4188 ;; This function calls:
  4189 ;;		Nothing
  4190 ;; This function is called by:
  4191 ;;		_Test_PWM_Fst
  4192 ;;		_Test_Pwm
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           
  4197                           ;psect for function _YTPFG_Flash
  4198  06A9                     _YTPFG_Flash:	
  4199                           
  4200                           ;WHQ_TP_ZPGS_V1.2.c: 487: unsigned char templ;
  4201                           ;WHQ_TP_ZPGS_V1.2.c: 488: unsigned int temp;
  4202                           ;WHQ_TP_ZPGS_V1.2.c: 490: temp = (pfgonetemp.pfgtemp & 0x03ff) + Drange;
  4203                           
  4204                           ;incstack = 0
  4205                           ; Regs used in _YTPFG_Flash: [wreg+status,2+status,0]
  4206  06A9  0879               	movf	_pfgonetemp+1,w
  4207  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  4208  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  4209  06AC  00E2               	movwf	YTPFG_Flash@temp+1
  4210  06AD  0878               	movf	_pfgonetemp,w
  4211  06AE  00E1               	movwf	YTPFG_Flash@temp
  4212  06AF  3003               	movlw	3
  4213  06B0  05E2               	andwf	YTPFG_Flash@temp+1,f
  4214  06B1  3010               	movlw	16
  4215  06B2  07E1               	addwf	YTPFG_Flash@temp,f
  4216  06B3  1803               	skipnc
  4217  06B4  0AE2               	incf	YTPFG_Flash@temp+1,f
  4218                           
  4219                           ;WHQ_TP_ZPGS_V1.2.c: 491: PFGDATA1 = (unsigned char)(temp);
  4220  06B5  0861               	movf	YTPFG_Flash@temp,w
  4221  06B6  1703               	bsf	3,6	;RP1=1, select bank2
  4222  06B7  009F               	movwf	31	;volatile
  4223                           
  4224                           ;WHQ_TP_ZPGS_V1.2.c: 492: templ = (unsigned char)((temp >> 3) & 0x60);
  4225  06B8  1303               	bcf	3,6	;RP1=0, select bank0
  4226  06B9  0862               	movf	YTPFG_Flash@temp+1,w
  4227  06BA  00DF               	movwf	??_YTPFG_Flash+1
  4228  06BB  0861               	movf	YTPFG_Flash@temp,w
  4229  06BC  00DE               	movwf	??_YTPFG_Flash
  4230  06BD  1003               	clrc
  4231  06BE  0CDF               	rrf	??_YTPFG_Flash+1,f
  4232  06BF  0CDE               	rrf	??_YTPFG_Flash,f
  4233  06C0  1003               	clrc
  4234  06C1  0CDF               	rrf	??_YTPFG_Flash+1,f
  4235  06C2  0CDE               	rrf	??_YTPFG_Flash,f
  4236  06C3  1003               	clrc
  4237  06C4  0CDF               	rrf	??_YTPFG_Flash+1,f
  4238  06C5  0CDE               	rrf	??_YTPFG_Flash,f
  4239  06C6  085E               	movf	??_YTPFG_Flash,w
  4240  06C7  00E0               	movwf	YTPFG_Flash@templ
  4241  06C8  3060               	movlw	96
  4242  06C9  05E0               	andwf	YTPFG_Flash@templ,f
  4243  06CA  0860               	movf	YTPFG_Flash@templ,w
  4244  06CB  388A               	iorlw	138
  4245  06CC  1703               	bsf	3,6	;RP1=1, select bank2
  4246  06CD  009E               	movwf	30	;volatile
  4247  06CE  0008               	return
  4248  06CF                     __end_of_YTPFG_Flash:	
  4249                           
  4250                           	psect	text26
  4251  06F7                     __ptext26:	
  4252 ;; *************** function _Init_ram *****************
  4253 ;; Defined at:
  4254 ;;		line 98 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.
      +4M\main.c"
  4255 ;; Parameters:    Size  Location     Type
  4256 ;;		None
  4257 ;; Auto vars:     Size  Location     Type
  4258 ;;		None
  4259 ;; Return value:  Size  Location     Type
  4260 ;;                  1    wreg      void 
  4261 ;; Registers used:
  4262 ;;		wreg, status,2
  4263 ;; Tracked objects:
  4264 ;;		On entry : 300/0
  4265 ;;		On exit  : 300/0
  4266 ;;		Unchanged: 0/0
  4267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4268 ;;      Params:         0       0       0       0       0
  4269 ;;      Locals:         0       0       0       0       0
  4270 ;;      Temps:          0       0       0       0       0
  4271 ;;      Totals:         0       0       0       0       0
  4272 ;;Total ram usage:        0 bytes
  4273 ;; Hardware stack levels used:    1
  4274 ;; Hardware stack levels required when called:    2
  4275 ;; This function calls:
  4276 ;;		Nothing
  4277 ;; This function is called by:
  4278 ;;		_main
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           
  4283                           ;psect for function _Init_ram
  4284  06F7                     _Init_ram:	
  4285                           
  4286                           ;main.c: 100: PIE2 = 0;
  4287                           
  4288                           ;incstack = 0
  4289                           ; Regs used in _Init_ram: [wreg+status,2]
  4290  06F7  1683               	bsf	3,5	;RP0=1, select bank1
  4291  06F8  018D               	clrf	13	;volatile
  4292                           
  4293                           ;main.c: 101: PIE1 = 0B00000010;
  4294  06F9  3002               	movlw	2
  4295  06FA  008C               	movwf	12	;volatile
  4296                           
  4297                           ;main.c: 102: PR2 = 250;
  4298  06FB  30FA               	movlw	250
  4299  06FC  0092               	movwf	18	;volatile
  4300                           
  4301                           ;main.c: 103: T2CON = 5;
  4302  06FD  3005               	movlw	5
  4303  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  4304  06FF  0092               	movwf	18	;volatile
  4305                           
  4306                           ;main.c: 104: INTCON = 0XC0;
  4307  0700  30C0               	movlw	192
  4308  0701  008B               	movwf	11	;volatile
  4309                           
  4310                           ;main.c: 105: onoff = 1;
  4311  0702  16F1               	bsf	_onoff/(0+8),_onoff& (0+7)	;volatile
  4312  0703  0008               	return
  4313  0704                     __end_of_Init_ram:	
  4314                           
  4315                           	psect	text28
  4316  062E                     __ptext28:	
  4317 ;; *************** function _Delay_nms *****************
  4318 ;; Defined at:
  4319 ;;		line 15 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.
      +4M\delay.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;  inittempl       2    2[BANK0 ] unsigned int 
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  i               2    4[BANK0 ] unsigned int 
  4324 ;;  gtemp           1    6[BANK0 ] unsigned char 
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  1    wreg      void 
  4327 ;; Registers used:
  4328 ;;		wreg, status,2, status,0, pclath, cstack
  4329 ;; Tracked objects:
  4330 ;;		On entry : 300/0
  4331 ;;		On exit  : 300/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4334 ;;      Params:         0       2       0       0       0
  4335 ;;      Locals:         0       3       0       0       0
  4336 ;;      Temps:          0       0       0       0       0
  4337 ;;      Totals:         0       5       0       0       0
  4338 ;;Total ram usage:        5 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    3
  4341 ;; This function calls:
  4342 ;;		_Delay
  4343 ;; This function is called by:
  4344 ;;		_main
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           
  4349                           ;psect for function _Delay_nms
  4350  062E                     _Delay_nms:	
  4351                           
  4352                           ;delay.c: 17: unsigned int i;
  4353                           ;delay.c: 18: unsigned char gtemp;
  4354                           ;delay.c: 20: gtemp=0;
  4355                           
  4356                           ;incstack = 0
  4357                           ; Regs used in _Delay_nms: [wreg+status,2+status,0+pclath+cstack]
  4358  062E  01E4               	clrf	Delay_nms@gtemp
  4359                           
  4360                           ;delay.c: 21: if(GIE==1)
  4361  062F  1F8B               	btfss	11,7	;volatile
  4362  0630  2E34               	goto	l8191
  4363                           
  4364                           ;delay.c: 22: {
  4365                           ;delay.c: 23: gtemp=1;
  4366  0631  01E4               	clrf	Delay_nms@gtemp
  4367  0632  0AE4               	incf	Delay_nms@gtemp,f
  4368                           
  4369                           ;delay.c: 24: GIE=0;
  4370  0633  138B               	bcf	11,7	;volatile
  4371  0634                     l8191:	
  4372                           
  4373                           ;delay.c: 25: }
  4374                           ;delay.c: 26: for(i=0;i<inittempl;i++)
  4375  0634  01E2               	clrf	Delay_nms@i
  4376  0635  01E3               	clrf	Delay_nms@i+1
  4377  0636                     l8197:	
  4378  0636  0861               	movf	Delay_nms@inittempl+1,w
  4379  0637  0263               	subwf	Delay_nms@i+1,w
  4380  0638  1D03               	skipz
  4381  0639  2E3C               	goto	u3785
  4382  063A  0860               	movf	Delay_nms@inittempl,w
  4383  063B  0262               	subwf	Delay_nms@i,w
  4384  063C                     u3785:	
  4385  063C  1803               	btfsc	3,0
  4386  063D  2E4A               	goto	l8199
  4387                           
  4388                           ;delay.c: 27: {
  4389                           ;delay.c: 28: Delay(154);
  4390  063E  309A               	movlw	154
  4391  063F  00DE               	movwf	Delay@dtemp
  4392  0640  01DF               	clrf	Delay@dtemp+1
  4393  0641  264E  118A         	fcall	_Delay
  4394  0643  0064               	clrwdt	;# 
  4395  0644  1283               	bcf	3,5	;RP0=0, select bank0
  4396  0645  1303               	bcf	3,6	;RP1=0, select bank0
  4397  0646  0AE2               	incf	Delay_nms@i,f
  4398  0647  1903               	skipnz
  4399  0648  0AE3               	incf	Delay_nms@i+1,f
  4400  0649  2E36               	goto	l8197
  4401  064A                     l8199:	
  4402                           
  4403                           ;delay.c: 30: }
  4404                           ;delay.c: 31: if(gtemp==1) GIE=1;
  4405  064A  0B64               	decfsz	Delay_nms@gtemp,w
  4406  064B  0008               	return
  4407  064C  178B               	bsf	11,7	;volatile
  4408  064D  0008               	return
  4409  064E                     __end_of_Delay_nms:	
  4410  064E                     __ptext29:	
  4411 ;; *************** function _Delay *****************
  4412 ;; Defined at:
  4413 ;;		line 8 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4
      +M\delay.c"
  4414 ;; Parameters:    Size  Location     Type
  4415 ;;  dtemp           2    0[BANK0 ] unsigned int 
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;		None
  4418 ;; Return value:  Size  Location     Type
  4419 ;;                  1    wreg      void 
  4420 ;; Registers used:
  4421 ;;		wreg, status,2, status,0
  4422 ;; Tracked objects:
  4423 ;;		On entry : 300/0
  4424 ;;		On exit  : 300/0
  4425 ;;		Unchanged: 0/0
  4426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4427 ;;      Params:         0       2       0       0       0
  4428 ;;      Locals:         0       0       0       0       0
  4429 ;;      Temps:          0       0       0       0       0
  4430 ;;      Totals:         0       2       0       0       0
  4431 ;;Total ram usage:        2 bytes
  4432 ;; Hardware stack levels used:    1
  4433 ;; Hardware stack levels required when called:    2
  4434 ;; This function calls:
  4435 ;;		Nothing
  4436 ;; This function is called by:
  4437 ;;		_Delay_nms
  4438 ;; This function uses a non-reentrant model
  4439 ;;
  4440                           
  4441                           
  4442                           ;psect for function _Delay
  4443  064E                     _Delay:	
  4444  064E                     l8005:	
  4445                           ;delay.c: 10: while(dtemp--);
  4446                           
  4447                           ;incstack = 0
  4448                           ; Regs used in _Delay: [wreg+status,2+status,0]
  4449                           
  4450  064E  3001               	movlw	1
  4451  064F  02DE               	subwf	Delay@dtemp,f
  4452  0650  3000               	movlw	0
  4453  0651  1C03               	skipc
  4454  0652  03DF               	decf	Delay@dtemp+1,f
  4455  0653  02DF               	subwf	Delay@dtemp+1,f
  4456  0654  0F5E               	incfsz	Delay@dtemp,w
  4457  0655  2E4E               	goto	l8005
  4458  0656  0A5F               	incf	Delay@dtemp+1,w
  4459  0657  1903               	btfsc	3,2
  4460  0658  0008               	return
  4461  0659  2E4E               	goto	l8005
  4462  065A                     __end_of_Delay:	
  4463                           
  4464                           	psect	text30
  4465  044A                     __ptext30:	
  4466 ;; *************** function _AD_Testing *****************
  4467 ;; Defined at:
  4468 ;;		line 290 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;  ad_fd           1    wreg     unsigned char 
  4471 ;;  ad_ch           1    0[BANK0 ] unsigned char 
  4472 ;;  ad_lr           1    1[BANK0 ] unsigned char 
  4473 ;; Auto vars:     Size  Location     Type
  4474 ;;  ad_fd           1    4[BANK0 ] unsigned char 
  4475 ;;  data            2    6[BANK0 ] volatile unsigned int 
  4476 ;;  i               1    5[BANK0 ] volatile unsigned char 
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  1    wreg      void 
  4479 ;; Registers used:
  4480 ;;		wreg, status,2, status,0
  4481 ;; Tracked objects:
  4482 ;;		On entry : 300/0
  4483 ;;		On exit  : 300/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4486 ;;      Params:         0       2       0       0       0
  4487 ;;      Locals:         0       4       0       0       0
  4488 ;;      Temps:          0       2       0       0       0
  4489 ;;      Totals:         0       8       0       0       0
  4490 ;;Total ram usage:        8 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    2
  4493 ;; This function calls:
  4494 ;;		Nothing
  4495 ;; This function is called by:
  4496 ;;		_main
  4497 ;; This function uses a non-reentrant model
  4498 ;;
  4499                           
  4500                           
  4501                           ;psect for function _AD_Testing
  4502  044A                     _AD_Testing:	
  4503                           
  4504                           ;incstack = 0
  4505                           ; Regs used in _AD_Testing: [wreg+status,2+status,0]
  4506                           ;AD_Testing@ad_fd stored from wreg
  4507  044A  00E2               	movwf	AD_Testing@ad_fd
  4508                           
  4509                           ;main.c: 292: static volatile unsigned char adtimes;
  4510                           ;main.c: 293: static volatile unsigned int admin,admax,adsum;
  4511                           ;main.c: 294: volatile unsigned int data;
  4512                           ;main.c: 295: volatile unsigned char i = 0;
  4513  044B  01E3               	clrf	AD_Testing@i	;volatile
  4514                           
  4515                           ;main.c: 298: if(!ad_lr)
  4516  044C  085F               	movf	AD_Testing@ad_lr,w
  4517  044D  1D03               	btfss	3,2
  4518  044E  2C52               	goto	l8295
  4519                           
  4520                           ;main.c: 299: ADCON1 = 0;
  4521  044F  1683               	bsf	3,5	;RP0=1, select bank1
  4522  0450  019F               	clrf	31	;volatile
  4523  0451  2C55               	goto	l8297
  4524  0452                     l8295:	
  4525                           
  4526                           ;main.c: 300: else
  4527                           ;main.c: 301: ADCON1 = 0x80;
  4528  0452  3080               	movlw	128
  4529  0453  1683               	bsf	3,5	;RP0=1, select bank1
  4530  0454  009F               	movwf	31	;volatile
  4531  0455                     l8297:	
  4532                           
  4533                           ;main.c: 303: ADCON0 = 0;
  4534  0455  1283               	bcf	3,5	;RP0=0, select bank0
  4535  0456  019F               	clrf	31	;volatile
  4536                           
  4537                           ;main.c: 304: ADCON0 |= (unsigned char)(ad_fd << 6);
  4538  0457  0862               	movf	AD_Testing@ad_fd,w
  4539  0458  00E0               	movwf	??_AD_Testing
  4540  0459  0CE0               	rrf	??_AD_Testing,f
  4541  045A  0CE0               	rrf	??_AD_Testing,f
  4542  045B  0C60               	rrf	??_AD_Testing,w
  4543  045C  39C0               	andlw	192
  4544  045D  049F               	iorwf	31,f	;volatile
  4545                           
  4546                           ;main.c: 305: ADCON0 |= (unsigned char)(ad_ch << 2);
  4547  045E  085E               	movf	AD_Testing@ad_ch,w
  4548  045F  00E0               	movwf	??_AD_Testing
  4549  0460  3001               	movlw	1
  4550  0461  1003               	clrc
  4551  0462                     L12:	
  4552  0462  0DE0               	rlf	??_AD_Testing,f
  4553  0463  3EFF               	addlw	-1
  4554  0464  1003               	clrc
  4555  0465  1D03               	skipz
  4556  0466  2C62               	goto	L12
  4557  0467  0D60               	rlf	??_AD_Testing,w
  4558  0468  049F               	iorwf	31,f	;volatile
  4559                           
  4560                           ;main.c: 306: ADCON0 |= 0x01;
  4561  0469  141F               	bsf	31,0	;volatile
  4562  046A  0000               	nop	;# 
  4563  046B  0000               	nop	;# 
  4564                           
  4565                           ;main.c: 310: GODONE = 1;
  4566  046C  1283               	bcf	3,5	;RP0=0, select bank0
  4567  046D  1303               	bcf	3,6	;RP1=0, select bank0
  4568  046E  149F               	bsf	31,1	;volatile
  4569  046F                     l2352:	
  4570                           ;main.c: 312: while(GODONE)
  4571                           
  4572  046F  1C9F               	btfss	31,1	;volatile
  4573  0470  2C78               	goto	l8309
  4574  0471  0000               	nop	;# 
  4575  0472  0000               	nop	;# 
  4576                           
  4577                           ;main.c: 316: if(0 == (--i))
  4578  0473  1283               	bcf	3,5	;RP0=0, select bank0
  4579  0474  1303               	bcf	3,6	;RP1=0, select bank0
  4580  0475  0BE3               	decfsz	AD_Testing@i,f	;volatile
  4581  0476  2C6F               	goto	l2352
  4582  0477  0008               	return
  4583  0478                     l8309:	
  4584                           
  4585                           ;main.c: 318: }
  4586                           ;main.c: 320: if(!ad_lr)
  4587  0478  085F               	movf	AD_Testing@ad_lr,w
  4588  0479  1D03               	btfss	3,2
  4589  047A  2C8B               	goto	l8315
  4590                           
  4591                           ;main.c: 321: {
  4592                           ;main.c: 322: data = (unsigned int)(ADRESH<<4);
  4593  047B  081E               	movf	30,w	;volatile
  4594  047C  00E4               	movwf	AD_Testing@data	;volatile
  4595  047D  01E5               	clrf	AD_Testing@data+1	;volatile
  4596  047E  0EE4               	swapf	AD_Testing@data,f	;volatile
  4597  047F  0EE5               	swapf	AD_Testing@data+1,f	;volatile
  4598  0480  30F0               	movlw	240
  4599  0481  05E5               	andwf	AD_Testing@data+1,f	;volatile
  4600  0482  0864               	movf	AD_Testing@data,w	;volatile
  4601  0483  390F               	andlw	15
  4602  0484  04E5               	iorwf	AD_Testing@data+1,f	;volatile
  4603  0485  30F0               	movlw	240
  4604  0486  05E4               	andwf	AD_Testing@data,f	;volatile
  4605                           
  4606                           ;main.c: 323: data |= (unsigned int)(ADRESL>>4);
  4607  0487  1683               	bsf	3,5	;RP0=1, select bank1
  4608  0488  0E1E               	swapf	30,w	;volatile
  4609  0489  390F               	andlw	15
  4610  048A  2C90               	goto	L13
  4611  048B                     l8315:	
  4612                           ;main.c: 324: }
  4613                           
  4614                           
  4615                           ;main.c: 325: else
  4616                           ;main.c: 326: {
  4617                           ;main.c: 327: data = (unsigned int)(ADRESH<<8);
  4618  048B  081E               	movf	30,w	;volatile
  4619  048C  00E5               	movwf	AD_Testing@data+1	;volatile
  4620  048D  01E4               	clrf	AD_Testing@data	;volatile
  4621                           
  4622                           ;main.c: 328: data |= (unsigned int)ADRESL;
  4623  048E  1683               	bsf	3,5	;RP0=1, select bank1
  4624  048F  081E               	movf	30,w	;volatile
  4625  0490                     L13:	
  4626  0490  1283               	bcf	3,5	;RP0=0, select bank0
  4627  0491  04E4               	iorwf	AD_Testing@data,f	;volatile
  4628                           
  4629                           ;main.c: 329: }
  4630                           ;main.c: 331: if(0 == adtimes)
  4631  0492  084C               	movf	AD_Testing@adtimes,w	;volatile
  4632  0493  1D03               	btfss	3,2
  4633  0494  2C98               	goto	l8321
  4634                           
  4635                           ;main.c: 332: {
  4636                           ;main.c: 333: admax = data;
  4637  0495  24DF  118A         	fcall	PL16	;call to abstracted procedure
  4638  0497  2CAB               	goto	l8327
  4639  0498                     l8321:	
  4640                           ;main.c: 335: }
  4641                           
  4642                           ;main.c: 334: admin = data;
  4643                           
  4644                           
  4645                           ;main.c: 336: else if(data > admax)
  4646  0498  0865               	movf	AD_Testing@data+1,w	;volatile
  4647  0499  0233               	subwf	AD_Testing@admax+1,w	;volatile
  4648  049A  1D03               	skipz
  4649  049B  2C9E               	goto	u3905
  4650  049C  0864               	movf	AD_Testing@data,w	;volatile
  4651  049D  0232               	subwf	AD_Testing@admax,w	;volatile
  4652  049E                     u3905:	
  4653  049E  1803               	skipnc
  4654  049F  2CA3               	goto	l8325
  4655                           
  4656                           ;main.c: 337: {
  4657                           ;main.c: 338: admax = data;
  4658  04A0  24DF  118A         	fcall	PL16	;call to abstracted procedure
  4659                           
  4660                           ;main.c: 339: }
  4661  04A2  2CAF               	goto	l2360
  4662  04A3                     l8325:	
  4663                           
  4664                           ;main.c: 340: else if(data < admin)
  4665  04A3  0835               	movf	AD_Testing@admin+1,w	;volatile
  4666  04A4  0265               	subwf	AD_Testing@data+1,w	;volatile
  4667  04A5  1D03               	skipz
  4668  04A6  2CA9               	goto	u3915
  4669  04A7  0834               	movf	AD_Testing@admin,w	;volatile
  4670  04A8  0264               	subwf	AD_Testing@data,w	;volatile
  4671  04A9                     u3915:	
  4672  04A9  1803               	skipnc
  4673  04AA  2CAF               	goto	l2360
  4674  04AB                     l8327:	
  4675                           
  4676                           ;main.c: 341: {
  4677                           ;main.c: 342: admin = data;
  4678  04AB  0865               	movf	AD_Testing@data+1,w	;volatile
  4679  04AC  00B5               	movwf	AD_Testing@admin+1	;volatile
  4680  04AD  0864               	movf	AD_Testing@data,w	;volatile
  4681  04AE  00B4               	movwf	AD_Testing@admin	;volatile
  4682  04AF                     l2360:	
  4683                           
  4684                           ;main.c: 343: }
  4685                           ;main.c: 345: adsum += data;
  4686  04AF  0864               	movf	AD_Testing@data,w	;volatile
  4687  04B0  07B0               	addwf	AD_Testing@adsum,f	;volatile
  4688  04B1  1803               	skipnc
  4689  04B2  0AB1               	incf	AD_Testing@adsum+1,f	;volatile
  4690  04B3  0865               	movf	AD_Testing@data+1,w	;volatile
  4691  04B4  07B1               	addwf	AD_Testing@adsum+1,f	;volatile
  4692                           
  4693                           ;main.c: 346: if(++adtimes >= 10)
  4694  04B5  300A               	movlw	10
  4695  04B6  0ACC               	incf	AD_Testing@adtimes,f	;volatile
  4696  04B7  024C               	subwf	AD_Testing@adtimes,w	;volatile
  4697  04B8  1C03               	skipc
  4698  04B9  0008               	return
  4699                           
  4700                           ;main.c: 347: {
  4701                           ;main.c: 348: adsum -= admax;
  4702  04BA  0832               	movf	AD_Testing@admax,w	;volatile
  4703  04BB  02B0               	subwf	AD_Testing@adsum,f	;volatile
  4704  04BC  0833               	movf	AD_Testing@admax+1,w	;volatile
  4705  04BD  1C03               	skipc
  4706  04BE  03B1               	decf	AD_Testing@adsum+1,f	;volatile
  4707  04BF  02B1               	subwf	AD_Testing@adsum+1,f	;volatile
  4708                           
  4709                           ;main.c: 349: adsum -= admin;
  4710  04C0  0834               	movf	AD_Testing@admin,w	;volatile
  4711  04C1  02B0               	subwf	AD_Testing@adsum,f	;volatile
  4712  04C2  0835               	movf	AD_Testing@admin+1,w	;volatile
  4713  04C3  1C03               	skipc
  4714  04C4  03B1               	decf	AD_Testing@adsum+1,f	;volatile
  4715  04C5  02B1               	subwf	AD_Testing@adsum+1,f	;volatile
  4716                           
  4717                           ;main.c: 351: AD_Result = adsum >> 3;
  4718  04C6  0831               	movf	AD_Testing@adsum+1,w	;volatile
  4719  04C7  00E1               	movwf	??_AD_Testing+1
  4720  04C8  0830               	movf	AD_Testing@adsum,w	;volatile
  4721  04C9  00E0               	movwf	??_AD_Testing
  4722  04CA  1003               	clrc
  4723  04CB  0CE1               	rrf	??_AD_Testing+1,f
  4724  04CC  0CE0               	rrf	??_AD_Testing,f
  4725  04CD  1003               	clrc
  4726  04CE  0CE1               	rrf	??_AD_Testing+1,f
  4727  04CF  0CE0               	rrf	??_AD_Testing,f
  4728  04D0  1003               	clrc
  4729  04D1  0CE1               	rrf	??_AD_Testing+1,f
  4730  04D2  0CE0               	rrf	??_AD_Testing,f
  4731  04D3  0860               	movf	??_AD_Testing,w
  4732  04D4  00B6               	movwf	_AD_Result	;volatile
  4733  04D5  0861               	movf	??_AD_Testing+1,w
  4734  04D6  00B7               	movwf	_AD_Result+1	;volatile
  4735                           
  4736                           ;main.c: 353: adsum = 0;
  4737  04D7  01B0               	clrf	AD_Testing@adsum	;volatile
  4738  04D8  01B1               	clrf	AD_Testing@adsum+1	;volatile
  4739                           
  4740                           ;main.c: 354: admin = 0;
  4741  04D9  01B4               	clrf	AD_Testing@admin	;volatile
  4742  04DA  01B5               	clrf	AD_Testing@admin+1	;volatile
  4743                           
  4744                           ;main.c: 355: admax = 0;
  4745  04DB  01B2               	clrf	AD_Testing@admax	;volatile
  4746  04DC  01B3               	clrf	AD_Testing@admax+1	;volatile
  4747                           
  4748                           ;main.c: 356: adtimes = 0;
  4749  04DD  01CC               	clrf	AD_Testing@adtimes	;volatile
  4750  04DE  0008               	return
  4751  04DF                     __end_of_AD_Testing:	
  4752  04DF                     PL16:	
  4753  04DF  0865               	movf	AD_Testing@data+1,w	;volatile
  4754  04E0  00B3               	movwf	AD_Testing@admax+1	;volatile
  4755  04E1  0864               	movf	AD_Testing@data,w	;volatile
  4756  04E2  00B2               	movwf	AD_Testing@admax	;volatile
  4757  04E3  0008               	return
  4758  04E4                     __end_ofPL16:	
  4759                           
  4760                           	psect	text31
  4761  0376                     __ptext31:	
  4762 ;; *************** function _time0 *****************
  4763 ;; Defined at:
  4764 ;;		line 163 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0822)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M\main.c"
  4765 ;; Parameters:    Size  Location     Type
  4766 ;;		None
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;		None
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  1    wreg      void 
  4771 ;; Registers used:
  4772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4778 ;;      Params:         0       0       0       0       0
  4779 ;;      Locals:         0       0       0       0       0
  4780 ;;      Temps:          3       0       0       0       0
  4781 ;;      Totals:         3       0       0       0       0
  4782 ;;Total ram usage:        3 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    1
  4785 ;; This function calls:
  4786 ;;		_Set_Pwm_Onoff
  4787 ;; This function is called by:
  4788 ;;		Interrupt level 1
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           
  4793                           ;psect for function _time0
  4794  0376                     _time0:	
  4795                           
  4796                           ;main.c: 166: {
  4797                           ;main.c: 168: revTime = 0;
  4798  0376  1283               	bcf	3,5	;RP0=0, select bank0
  4799  0377  1303               	bcf	3,6	;RP1=0, select bank0
  4800  0378  1E8C               	btfss	12,5	;volatile
  4801  0379  2B89               	goto	i1l2312
  4802                           
  4803                           ;main.c: 169: Recebuffer[rececount] = RCREG;
  4804  037A  084E               	movf	_rececount,w
  4805  037B  3EA0               	addlw	(low (_Recebuffer| 0))& (0+255)
  4806  037C  0084               	movwf	4
  4807  037D  081A               	movf	26,w	;volatile
  4808  037E  1383               	bcf	3,7	;select IRP bank1
  4809  037F  0080               	movwf	0
  4810  0380  3004               	movlw	4
  4811                           
  4812                           ;main.c: 170: rececount++;
  4813  0381  0ACE               	incf	_rececount,f
  4814                           
  4815                           ;main.c: 172: if(rececount >= 4)
  4816  0382  024E               	subwf	_rececount,w
  4817  0383  1803               	btfsc	3,0
  4818                           
  4819                           ;main.c: 173: {
  4820                           ;main.c: 174: rececount = 0;
  4821  0384  01CE               	clrf	_rececount
  4822                           
  4823                           ;main.c: 175: }
  4824                           ;main.c: 177: if(OERR)
  4825  0385  1C98               	btfss	24,1	;volatile
  4826  0386  2B89               	goto	i1l2312
  4827                           
  4828                           ;main.c: 178: {
  4829                           ;main.c: 179: CREN = 0;
  4830  0387  1218               	bcf	24,4	;volatile
  4831                           
  4832                           ;main.c: 180: CREN = 1;
  4833  0388  1618               	bsf	24,4	;volatile
  4834  0389                     i1l2312:	
  4835                           
  4836                           ;main.c: 181: }
  4837                           ;main.c: 183: }
  4838                           ;main.c: 185: if(TMR2IF)
  4839  0389  1C8C               	btfss	12,1	;volatile
  4840  038A  2B97               	goto	i1l7487
  4841                           
  4842                           ;main.c: 186: {
  4843                           ;main.c: 187: TMR2IF = 0;
  4844  038B  108C               	bcf	12,1	;volatile
  4845                           
  4846                           ;main.c: 188: tcount ++;
  4847  038C  0ADD               	incf	_tcount,f	;volatile
  4848                           
  4849                           ;main.c: 189: if(onoff)
  4850  038D  1EF1               	btfss	_onoff/(0+8),_onoff& (0+7)	;volatile
  4851  038E  2B93               	goto	i1l7485
  4852                           
  4853                           ;main.c: 190: {
  4854                           ;main.c: 191: Set_Pwm_Onoff(20);
  4855  038F  3014               	movlw	20
  4856  0390  23A2  118A         	fcall	_Set_Pwm_Onoff
  4857                           
  4858                           ;main.c: 192: }
  4859  0392  2B99               	goto	i1l2319
  4860  0393                     i1l7485:	
  4861                           
  4862                           ;main.c: 193: else
  4863                           ;main.c: 194: {
  4864                           ;main.c: 195: Set_Pwm_Onoff(0);
  4865  0393  3000               	movlw	0
  4866  0394  23A2  118A         	fcall	_Set_Pwm_Onoff
  4867  0396  2B99               	goto	i1l2319
  4868  0397                     i1l7487:	
  4869                           
  4870                           ;main.c: 198: else
  4871                           ;main.c: 199: {
  4872                           ;main.c: 200: PIR1 = 0;
  4873  0397  018C               	clrf	12	;volatile
  4874                           
  4875                           ;main.c: 201: PIR2 = 0;
  4876  0398  018D               	clrf	13	;volatile
  4877  0399                     i1l2319:	
  4878  0399  0877               	movf	??_time0+2,w
  4879  039A  008A               	movwf	10
  4880  039B  0876               	movf	??_time0+1,w
  4881  039C  0084               	movwf	4
  4882  039D  0E75               	swapf	??_time0^(0+-128),w
  4883  039E  0083               	movwf	3
  4884  039F  0EFE               	swapf	126,f
  4885  03A0  0E7E               	swapf	126,w
  4886  03A1  0009               	retfie
  4887  03A2                     __end_of_time0:	
  4888  03A2                     __ptext32:	
  4889 ;; *************** function _Set_Pwm_Onoff *****************
  4890 ;; Defined at:
  4891 ;;		line 273 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;  fun             1    wreg     unsigned char 
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;  fun             1    2[COMMON] unsigned char 
  4896 ;;  funod           1    1[COMMON] unsigned char 
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  1    wreg      void 
  4899 ;; Registers used:
  4900 ;;		wreg, status,2, status,0
  4901 ;; Tracked objects:
  4902 ;;		On entry : 300/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4906 ;;      Params:         0       0       0       0       0
  4907 ;;      Locals:         2       0       0       0       0
  4908 ;;      Temps:          1       0       0       0       0
  4909 ;;      Totals:         3       0       0       0       0
  4910 ;;Total ram usage:        3 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; This function calls:
  4913 ;;		Nothing
  4914 ;; This function is called by:
  4915 ;;		_time0
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           
  4920                           ;psect for function _Set_Pwm_Onoff
  4921  03A2                     _Set_Pwm_Onoff:	
  4922                           
  4923                           ;incstack = 0
  4924                           ; Regs used in _Set_Pwm_Onoff: [wreg+status,2+status,0]
  4925                           ;Set_Pwm_Onoff@fun stored from wreg
  4926  03A2  00F4               	movwf	Set_Pwm_Onoff@fun
  4927                           
  4928                           ;WHQ_TP_ZPGS_V1.2.c: 275: unsigned char funod;
  4929                           ;WHQ_TP_ZPGS_V1.2.c: 277: static unsigned char pwmcl = 0;
  4930                           ;WHQ_TP_ZPGS_V1.2.c: 278: static bit adonf = 0;
  4931                           ;WHQ_TP_ZPGS_V1.2.c: 279: static unsigned char cur_adcl = 0;
  4932                           ;WHQ_TP_ZPGS_V1.2.c: 280: static unsigned int cursumt = 0;
  4933                           ;WHQ_TP_ZPGS_V1.2.c: 281: static unsigned char funold;
  4934                           ;WHQ_TP_ZPGS_V1.2.c: 283: PFGCON |= 0x04;
  4935  03A3  1703               	bsf	3,6	;RP1=1, select bank2
  4936  03A4  151B               	bsf	27,2	;volatile
  4937                           
  4938                           ;WHQ_TP_ZPGS_V1.2.c: 284: TRISA &= 0xfe;
  4939  03A5  1683               	bsf	3,5	;RP0=1, select bank1
  4940  03A6  1303               	bcf	3,6	;RP1=0, select bank1
  4941  03A7  1005               	bcf	5,0	;volatile
  4942                           
  4943                           ;WHQ_TP_ZPGS_V1.2.c: 285: PORTA = (unsigned char)(PORTA & 0xfe);
  4944  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  4945  03A9  1005               	bcf	5,0	;volatile
  4946                           
  4947                           ;WHQ_TP_ZPGS_V1.2.c: 286: if(0 != pfgonetemp.pfgtemp)
  4948  03AA  0878               	movf	_pfgonetemp,w
  4949  03AB  0479               	iorwf	_pfgonetemp+1,w
  4950  03AC  1903               	btfsc	3,2
  4951  03AD  0008               	return
  4952                           
  4953                           ;WHQ_TP_ZPGS_V1.2.c: 287: {
  4954                           ;WHQ_TP_ZPGS_V1.2.c: 288: if(PfgChangef)
  4955  03AE  1DF0               	btfss	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  4956  03AF  2BCE               	goto	i1l7201
  4957                           
  4958                           ;WHQ_TP_ZPGS_V1.2.c: 289: {
  4959                           ;WHQ_TP_ZPGS_V1.2.c: 290: PfgChangef = 0;
  4960  03B0  11F0               	bcf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  4961                           
  4962                           ;WHQ_TP_ZPGS_V1.2.c: 291: if((0 == (pfgonetemp.pfgonebyte.pfgtemph & 0x80)) && ((PFGCON&
      +                          0x80) != 0))
  4963  03B1  1BF9               	btfsc	_pfgonetemp+1,7
  4964  03B2  2BBC               	goto	i1l7191
  4965  03B3  1703               	bsf	3,6	;RP1=1, select bank2
  4966  03B4  1F9B               	btfss	27,7	;volatile
  4967  03B5  2BBC               	goto	i1l7191
  4968                           
  4969                           ;WHQ_TP_ZPGS_V1.2.c: 292: {
  4970                           ;WHQ_TP_ZPGS_V1.2.c: 293: PFGCON1 &= ~0x80;
  4971  03B6  139E               	bcf	30,7	;volatile
  4972                           
  4973                           ;WHQ_TP_ZPGS_V1.2.c: 294: PFGSTOP = 0xfa;
  4974  03B7  30FA               	movlw	250
  4975  03B8  1683               	bsf	3,5	;RP0=1, select bank1
  4976  03B9  1303               	bcf	3,6	;RP1=0, select bank1
  4977  03BA  0088               	movwf	8	;volatile
  4978                           
  4979                           ;WHQ_TP_ZPGS_V1.2.c: 295: }
  4980  03BB  2BCE               	goto	i1l7201
  4981  03BC                     i1l7191:	
  4982                           
  4983                           ;WHQ_TP_ZPGS_V1.2.c: 296: else
  4984                           ;WHQ_TP_ZPGS_V1.2.c: 297: {
  4985                           ;WHQ_TP_ZPGS_V1.2.c: 298: if((pfgonetemp.pfgonebyte.pfgtemph & 0x03) >= (PFGCON & 0x03))
  4986  03BC  3003               	movlw	3
  4987  03BD  0579               	andwf	_pfgonetemp+1,w
  4988  03BE  00F2               	movwf	??_Set_Pwm_Onoff
  4989  03BF  1703               	bsf	3,6	;RP1=1, select bank2
  4990  03C0  081B               	movf	27,w	;volatile
  4991  03C1  3903               	andlw	3
  4992  03C2  0272               	subwf	??_Set_Pwm_Onoff,w
  4993  03C3  1C03               	skipc
  4994  03C4  2BCA               	goto	i1l7195
  4995                           
  4996                           ;WHQ_TP_ZPGS_V1.2.c: 299: {
  4997                           ;WHQ_TP_ZPGS_V1.2.c: 300: PFGADJ = pfgonetemp.pfgonebyte.pfgtempl;
  4998  03C5  0878               	movf	_pfgonetemp,w
  4999  03C6  0099               	movwf	25	;volatile
  5000                           
  5001                           ;WHQ_TP_ZPGS_V1.2.c: 301: PFGCON = pfgonetemp.pfgonebyte.pfgtemph;
  5002  03C7  0879               	movf	_pfgonetemp+1,w
  5003  03C8  009B               	movwf	27	;volatile
  5004                           
  5005                           ;WHQ_TP_ZPGS_V1.2.c: 302: }
  5006  03C9  2BCE               	goto	i1l7201
  5007  03CA                     i1l7195:	
  5008                           
  5009                           ;WHQ_TP_ZPGS_V1.2.c: 303: else
  5010                           ;WHQ_TP_ZPGS_V1.2.c: 304: {
  5011                           ;WHQ_TP_ZPGS_V1.2.c: 305: PFGCON = pfgonetemp.pfgonebyte.pfgtemph;
  5012  03CA  0879               	movf	_pfgonetemp+1,w
  5013  03CB  009B               	movwf	27	;volatile
  5014                           
  5015                           ;WHQ_TP_ZPGS_V1.2.c: 306: PFGADJ = pfgonetemp.pfgonebyte.pfgtempl;
  5016  03CC  0878               	movf	_pfgonetemp,w
  5017  03CD  0099               	movwf	25	;volatile
  5018  03CE                     i1l7201:	
  5019                           
  5020                           ;WHQ_TP_ZPGS_V1.2.c: 315: }
  5021                           ;WHQ_TP_ZPGS_V1.2.c: 316: }
  5022                           ;WHQ_TP_ZPGS_V1.2.c: 318: if(0 == fun)
  5023  03CE  0874               	movf	Set_Pwm_Onoff@fun,w
  5024  03CF  1D03               	btfss	3,2
  5025  03D0  2BDD               	goto	i1l4847
  5026                           
  5027                           ;WHQ_TP_ZPGS_V1.2.c: 319: {
  5028                           ;WHQ_TP_ZPGS_V1.2.c: 321: pfgonetemp.pfgonebyte.pfgtemph &= ~0x80;
  5029  03D1  13F9               	bcf	_pfgonetemp+1,7
  5030                           
  5031                           ;WHQ_TP_ZPGS_V1.2.c: 322: PfgChangef = 1;
  5032  03D2  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  5033                           
  5034                           ;WHQ_TP_ZPGS_V1.2.c: 323: cur_addat = 0;
  5035  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  5036  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  5037  03D5  01CB               	clrf	_cur_addat	;volatile
  5038                           
  5039                           ;WHQ_TP_ZPGS_V1.2.c: 324: curokf = 0;
  5040  03D6  13F0               	bcf	_curokf/(0+8),_curokf& (0+7)	;volatile
  5041                           
  5042                           ;WHQ_TP_ZPGS_V1.2.c: 325: pwmcl = 0;
  5043  03D7  01BB               	clrf	Set_Pwm_Onoff@pwmcl
  5044                           
  5045                           ;WHQ_TP_ZPGS_V1.2.c: 326: cursumt = 0;
  5046  03D8  1683               	bsf	3,5	;RP0=1, select bank1
  5047  03D9  01AA               	clrf	Set_Pwm_Onoff@cursumt^(0+128)
  5048  03DA  01AB               	clrf	(Set_Pwm_Onoff@cursumt+1)^(0+128)
  5049                           
  5050                           ;WHQ_TP_ZPGS_V1.2.c: 327: on_off = 0;
  5051  03DB  1271               	bcf	_on_off/(0+8),_on_off& (0+7)	;volatile
  5052                           
  5053                           ;WHQ_TP_ZPGS_V1.2.c: 328: }
  5054  03DC  0008               	return
  5055  03DD                     i1l4847:	
  5056                           
  5057                           ;WHQ_TP_ZPGS_V1.2.c: 329: else
  5058                           ;WHQ_TP_ZPGS_V1.2.c: 330: {
  5059                           ;WHQ_TP_ZPGS_V1.2.c: 332: on_off = 1;
  5060  03DD  1671               	bsf	_on_off/(0+8),_on_off& (0+7)	;volatile
  5061                           
  5062                           ;WHQ_TP_ZPGS_V1.2.c: 334: if(!pwmtf)
  5063  03DE  19F1               	btfsc	_pwmtf/(0+8),_pwmtf& (0+7)	;volatile
  5064  03DF  2BE3               	goto	i1l7213
  5065  03E0  3018               	movlw	24
  5066  03E1  00F3               	movwf	Set_Pwm_Onoff@funod
  5067  03E2  2BEA               	goto	L14
  5068  03E3                     i1l7213:	
  5069                           ;WHQ_TP_ZPGS_V1.2.c: 338: }
  5070                           
  5071                           ;WHQ_TP_ZPGS_V1.2.c: 337: funold = funod;
  5072                           
  5073  03E3  3031               	movlw	49
  5074  03E4  0274               	subwf	Set_Pwm_Onoff@fun,w
  5075  03E5  1803               	skipnc
  5076  03E6  2BEE               	goto	i1l7217
  5077                           
  5078                           ;WHQ_TP_ZPGS_V1.2.c: 342: {
  5079                           ;WHQ_TP_ZPGS_V1.2.c: 343: funod = fun;
  5080  03E7  0874               	movf	Set_Pwm_Onoff@fun,w
  5081  03E8  00F3               	movwf	Set_Pwm_Onoff@funod
  5082                           
  5083                           ;WHQ_TP_ZPGS_V1.2.c: 344: funold = fun;
  5084  03E9  0874               	movf	Set_Pwm_Onoff@fun,w
  5085  03EA                     L14:	
  5086  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  5087  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  5088  03EC  00B9               	movwf	Set_Pwm_Onoff@funold
  5089                           
  5090                           ;WHQ_TP_ZPGS_V1.2.c: 345: }
  5091  03ED  2BF2               	goto	i1l7219
  5092  03EE                     i1l7217:	
  5093                           
  5094                           ;WHQ_TP_ZPGS_V1.2.c: 346: else
  5095                           ;WHQ_TP_ZPGS_V1.2.c: 347: funod = funold;
  5096  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  5097  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  5098  03F0  0839               	movf	Set_Pwm_Onoff@funold,w
  5099  03F1  00F3               	movwf	Set_Pwm_Onoff@funod
  5100  03F2                     i1l7219:	
  5101  03F2  3030               	movlw	48
  5102  03F3  0673               	xorwf	Set_Pwm_Onoff@funod,w
  5103  03F4  1D03               	btfss	3,2
  5104  03F5  2BF9               	goto	i1l7223
  5105  03F6                     i1l7221:	
  5106                           
  5107                           ;WHQ_TP_ZPGS_V1.2.c: 350: {
  5108                           ;WHQ_TP_ZPGS_V1.2.c: 351: ((pfgonetemp.pfgtemp) |= (1 << (15)));
  5109  03F6  17F9               	bsf	_pfgonetemp+1,7
  5110  03F7                     L15:	
  5111                           
  5112                           ;WHQ_TP_ZPGS_V1.2.c: 352: PfgChangef = 1;
  5113  03F7  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  5114                           
  5115                           ;WHQ_TP_ZPGS_V1.2.c: 353: }
  5116  03F8  2C0A               	goto	i1l7237
  5117  03F9                     i1l7223:	
  5118                           
  5119                           ;WHQ_TP_ZPGS_V1.2.c: 354: else
  5120                           ;WHQ_TP_ZPGS_V1.2.c: 355: {
  5121                           ;WHQ_TP_ZPGS_V1.2.c: 356: pwmcl++;
  5122  03F9  0ABB               	incf	Set_Pwm_Onoff@pwmcl,f
  5123                           
  5124                           ;WHQ_TP_ZPGS_V1.2.c: 357: if(pwmcl <= funod)
  5125  03FA  083B               	movf	Set_Pwm_Onoff@pwmcl,w
  5126  03FB  0273               	subwf	Set_Pwm_Onoff@funod,w
  5127  03FC  1C03               	skipc
  5128  03FD  2C02               	goto	i1l4855
  5129                           
  5130                           ;WHQ_TP_ZPGS_V1.2.c: 358: {
  5131                           ;WHQ_TP_ZPGS_V1.2.c: 359: if((((pfgonetemp.pfgtemp) & (1 << (15))) == 0))
  5132  03FE  1BF9               	btfsc	_pfgonetemp+1,7
  5133  03FF  2BF7               	goto	L15
  5134                           
  5135                           ;WHQ_TP_ZPGS_V1.2.c: 360: adonf = 0;
  5136  0400  1170               	bcf	Set_Pwm_Onoff@adonf/(0+8),Set_Pwm_Onoff@adonf& (0+7)
  5137  0401  2BF6               	goto	i1l7221
  5138  0402                     i1l4855:	
  5139                           
  5140                           ;WHQ_TP_ZPGS_V1.2.c: 364: else
  5141                           ;WHQ_TP_ZPGS_V1.2.c: 365: {
  5142                           ;WHQ_TP_ZPGS_V1.2.c: 366: if(((pfgonetemp.pfgtemp) & (1 << (15))))
  5143  0402  1BF9               	btfsc	_pfgonetemp+1,7
  5144                           
  5145                           ;WHQ_TP_ZPGS_V1.2.c: 367: adonf = 0;
  5146  0403  1170               	bcf	Set_Pwm_Onoff@adonf/(0+8),Set_Pwm_Onoff@adonf& (0+7)
  5147                           
  5148                           ;WHQ_TP_ZPGS_V1.2.c: 368: pfgonetemp.pfgtemp &= ~0x8000;
  5149  0404  13F9               	bcf	_pfgonetemp+1,7
  5150                           
  5151                           ;WHQ_TP_ZPGS_V1.2.c: 369: PfgChangef = 1;
  5152  0405  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  5153  0406  3030               	movlw	48
  5154  0407  023B               	subwf	Set_Pwm_Onoff@pwmcl,w
  5155  0408  1803               	btfsc	3,0
  5156                           
  5157                           ;WHQ_TP_ZPGS_V1.2.c: 371: pwmcl = 0;
  5158  0409  01BB               	clrf	Set_Pwm_Onoff@pwmcl
  5159  040A                     i1l7237:	
  5160                           
  5161                           ;WHQ_TP_ZPGS_V1.2.c: 372: }
  5162                           ;WHQ_TP_ZPGS_V1.2.c: 373: }
  5163                           ;WHQ_TP_ZPGS_V1.2.c: 377: if(0xff != fun)
  5164  040A  0A74               	incf	Set_Pwm_Onoff@fun,w
  5165  040B  1903               	btfsc	3,2
  5166  040C  2C48               	goto	i1l4860
  5167                           
  5168                           ;WHQ_TP_ZPGS_V1.2.c: 378: {
  5169                           ;WHQ_TP_ZPGS_V1.2.c: 379: if(adonf&&((((ADCON0) & (1 << (1))) == 0)))
  5170  040D  1970               	btfsc	Set_Pwm_Onoff@adonf/(0+8),Set_Pwm_Onoff@adonf& (0+7)
  5171  040E  189F               	btfsc	31,1	;volatile
  5172  040F  2C35               	goto	i1l7259
  5173                           
  5174                           ;WHQ_TP_ZPGS_V1.2.c: 380: {
  5175                           ;WHQ_TP_ZPGS_V1.2.c: 381: adonf = 0;
  5176  0410  1170               	bcf	Set_Pwm_Onoff@adonf/(0+8),Set_Pwm_Onoff@adonf& (0+7)
  5177                           
  5178                           ;WHQ_TP_ZPGS_V1.2.c: 382: adonetemp.adonebyte.adtempl = ADRESL;
  5179  0411  1683               	bsf	3,5	;RP0=1, select bank1
  5180  0412  081E               	movf	30,w	;volatile
  5181  0413  1283               	bcf	3,5	;RP0=0, select bank0
  5182  0414  00AE               	movwf	_adonetemp
  5183                           
  5184                           ;WHQ_TP_ZPGS_V1.2.c: 383: adonetemp.adonebyte.adtemph = (unsigned char)(ADRESH&0x03);
  5185  0415  081E               	movf	30,w	;volatile
  5186  0416  00AF               	movwf	_adonetemp+1
  5187  0417  3003               	movlw	3
  5188  0418  05AF               	andwf	_adonetemp+1,f
  5189                           
  5190                           ;WHQ_TP_ZPGS_V1.2.c: 384: cursumt = adonetemp.adtemp + cursumt;
  5191  0419  082E               	movf	_adonetemp,w
  5192  041A  1683               	bsf	3,5	;RP0=1, select bank1
  5193  041B  07AA               	addwf	Set_Pwm_Onoff@cursumt^(0+128),f
  5194  041C  1803               	skipnc
  5195  041D  0AAB               	incf	(Set_Pwm_Onoff@cursumt+1)^(0+128),f
  5196  041E  1283               	bcf	3,5	;RP0=0, select bank0
  5197  041F  082F               	movf	_adonetemp+1,w
  5198  0420  1683               	bsf	3,5	;RP0=1, select bank1
  5199  0421  07AB               	addwf	(Set_Pwm_Onoff@cursumt+1)^(0+128),f
  5200                           
  5201                           ;WHQ_TP_ZPGS_V1.2.c: 385: if(++cur_adcl >= 32)
  5202  0422  3020               	movlw	32
  5203  0423  1283               	bcf	3,5	;RP0=0, select bank0
  5204  0424  0ABA               	incf	Set_Pwm_Onoff@cur_adcl,f
  5205  0425  023A               	subwf	Set_Pwm_Onoff@cur_adcl,w
  5206  0426  1C03               	skipc
  5207  0427  2C35               	goto	i1l7259
  5208                           
  5209                           ;WHQ_TP_ZPGS_V1.2.c: 386: {
  5210                           ;WHQ_TP_ZPGS_V1.2.c: 387: cur_adcl = 0;
  5211  0428  01BA               	clrf	Set_Pwm_Onoff@cur_adcl
  5212                           
  5213                           ;WHQ_TP_ZPGS_V1.2.c: 388: cursum = cursumt;
  5214  0429  1683               	bsf	3,5	;RP0=1, select bank1
  5215  042A  082B               	movf	(Set_Pwm_Onoff@cursumt+1)^(0+128),w
  5216  042B  1283               	bcf	3,5	;RP0=0, select bank0
  5217  042C  00A7               	movwf	_cursum+1	;volatile
  5218  042D  1683               	bsf	3,5	;RP0=1, select bank1
  5219  042E  082A               	movf	Set_Pwm_Onoff@cursumt^(0+128),w
  5220  042F  1283               	bcf	3,5	;RP0=0, select bank0
  5221  0430  00A6               	movwf	_cursum	;volatile
  5222                           
  5223                           ;WHQ_TP_ZPGS_V1.2.c: 389: cursumt = 0;
  5224  0431  1683               	bsf	3,5	;RP0=1, select bank1
  5225  0432  01AA               	clrf	Set_Pwm_Onoff@cursumt^(0+128)
  5226  0433  01AB               	clrf	(Set_Pwm_Onoff@cursumt+1)^(0+128)
  5227                           
  5228                           ;WHQ_TP_ZPGS_V1.2.c: 390: curokf = 1;
  5229  0434  17F0               	bsf	_curokf/(0+8),_curokf& (0+7)	;volatile
  5230  0435                     i1l7259:	
  5231                           
  5232                           ;WHQ_TP_ZPGS_V1.2.c: 391: }
  5233                           ;WHQ_TP_ZPGS_V1.2.c: 392: }
  5234                           ;WHQ_TP_ZPGS_V1.2.c: 394: if((PFGCON&0x80) != 0)
  5235  0435  1283               	bcf	3,5	;RP0=0, select bank2
  5236  0436  1703               	bsf	3,6	;RP1=1, select bank2
  5237  0437  1F9B               	btfss	27,7	;volatile
  5238  0438  0008               	return
  5239                           
  5240                           ;WHQ_TP_ZPGS_V1.2.c: 395: {
  5241                           ;WHQ_TP_ZPGS_V1.2.c: 396: ADCON0 = 0;
  5242  0439  1303               	bcf	3,6	;RP1=0, select bank0
  5243  043A  019F               	clrf	31	;volatile
  5244                           
  5245                           ;WHQ_TP_ZPGS_V1.2.c: 397: ADCON1 = 0x80;
  5246  043B  3080               	movlw	128
  5247  043C  1683               	bsf	3,5	;RP0=1, select bank1
  5248  043D  009F               	movwf	31	;volatile
  5249  043E  3045               	movlw	69
  5250  043F  1283               	bcf	3,5	;RP0=0, select bank0
  5251  0440  009F               	movwf	31	;volatile
  5252  0441  0000               	nop	;# 
  5253  0442  0000               	nop	;# 
  5254                           
  5255                           ;WHQ_TP_ZPGS_V1.2.c: 401: adonf = 1;
  5256  0443  1570               	bsf	Set_Pwm_Onoff@adonf/(0+8),Set_Pwm_Onoff@adonf& (0+7)
  5257                           
  5258                           ;WHQ_TP_ZPGS_V1.2.c: 402: ((ADCON0) |= (1 << (1)));
  5259  0444  1283               	bcf	3,5	;RP0=0, select bank0
  5260  0445  1303               	bcf	3,6	;RP1=0, select bank0
  5261  0446  149F               	bsf	31,1	;volatile
  5262  0447  0008               	return
  5263  0448                     i1l4860:	
  5264                           
  5265                           ;WHQ_TP_ZPGS_V1.2.c: 405: else
  5266                           ;WHQ_TP_ZPGS_V1.2.c: 406: {
  5267                           ;WHQ_TP_ZPGS_V1.2.c: 407: adonf = 0;
  5268  0448  1170               	bcf	Set_Pwm_Onoff@adonf/(0+8),Set_Pwm_Onoff@adonf& (0+7)
  5269  0449  0008               	return
  5270  044A                     __end_of_Set_Pwm_Onoff:	
  5271  007E                     btemp	set	126	;btemp
  5272  007E                     wtemp0	set	126
  5273                           
  5274                           	psect	intentry
  5275  0004                     __pintentry:	
  5276                           ;incstack = 0
  5277                           ; Regs used in _time0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5278                           
  5279  0004                     interrupt_function:	
  5280  007E                     saved_w	set	btemp
  5281  0004  00FE               	movwf	btemp
  5282  0005  0E03               	swapf	3,w
  5283  0006  00F5               	movwf	??_time0
  5284  0007  0804               	movf	4,w
  5285  0008  00F6               	movwf	??_time0+1
  5286  0009  080A               	movf	10,w
  5287  000A  00F7               	movwf	??_time0+2
  5288  000B  118A  2B76         	ljmp	_time0


Data Sizes:
    Strings     0
    Constant    3
    Data        0
    BSS         80
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     16      78
    BANK1            80      0      14
    BANK3            88      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _time0 in COMMON

    _time0->_Set_Pwm_Onoff

Critical Paths under _main in BANK0

    _main->_Pwm_Test
    _keyCtr->_keyRead
    _keyCtr->_keyRead2
    _keyCtr->_keyRead3
    _Pwm_Test->_Test_Pwm
    _Test_Pwm->_Get_CUR_Dat
    _Test_Pwm->_Test_PWM_Fst
    _Test_PWM_Fst->_Test_Pwm_Cur
    _Test_Pwm_Cur->_Pwm_add
    _Test_Pwm_Cur->_Pwm_dec
    _PFG_read_fst->_Set_jiyi_re
    _Get_CUR_Dat->___awdiv
    _Delay_nms->_Delay

Critical Paths under _time0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _time0 in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _time0 in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _time0 in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3829
                         _AD_Testing
                          _Delay_nms
                            _Init_ic
                           _Init_ram
                           _Pwm_Test
                        _Set_CCP_PWM
                    _Set_Usart_Async
                           _Set_Work
                            _Sys_set
                          _checkVoll
                            _chrgCtr
                           _closePWM
                             _keyCtr
                        _uartSendCtr
 ---------------------------------------------------------------------------------
 (1) _uartSendCtr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0     226
                                              1 BANK0      1     1      0
                            _keyRead
                           _keyRead2
                           _keyRead3
 ---------------------------------------------------------------------------------
 (2) _keyRead3                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _keyRead2                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _closePWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkVoll                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Sys_set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_Work                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_Usart_Async                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_CCP_PWM                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Pwm_Test                                             1     1      0    2661
                                             15 BANK0      1     1      0
                           _Test_Pwm
 ---------------------------------------------------------------------------------
 (2) _Test_Pwm                                             5     5      0    2596
                                             10 BANK0      5     5      0
                        _Get_CUR_Dat
                       _PFG_read_fst
                       _Test_PWM_Fst
                       _Test_Pwm_Cur
                         _Test_water
                       _Work_RAM_CLR
                        _YTPFG_Flash
 ---------------------------------------------------------------------------------
 (3) _Work_RAM_CLR                                         2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Test_water                                           6     6      0     121
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) _Test_PWM_Fst                                         1     1      0     684
                                              9 BANK0      1     1      0
                       _Test_Pwm_Cur
                        _YTPFG_Flash
 ---------------------------------------------------------------------------------
 (3) _YTPFG_Flash                                          5     5      0     108
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _Test_Pwm_Cur                                         2     2      0     511
                                              7 BANK0      2     2      0
                            _Pwm_add
                            _Pwm_dec
 ---------------------------------------------------------------------------------
 (4) _Pwm_dec                                              7     5      2     203
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (4) _Pwm_add                                              7     5      2     203
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (3) _PFG_read_fst                                         7     7      0     327
                                              2 BANK0      7     7      0
                        _Set_jiyi_re
 ---------------------------------------------------------------------------------
 (4) _Set_jiyi_re                                          2     2      0      65
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Get_CUR_Dat                                          2     2      0     746
                                              8 BANK0      2     2      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     746
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Init_ram                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ic                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay_nms                                            5     3      2     344
                                              2 BANK0      5     3      2
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _Delay                                                2     0      2     135
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _AD_Testing                                           8     6      2     598
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _time0                                                3     3      0     179
                                              3 COMMON     3     3      0
                      _Set_Pwm_Onoff
 ---------------------------------------------------------------------------------
 (7) _Set_Pwm_Onoff                                        3     3      0     179
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Testing
   _Delay_nms
     _Delay
   _Init_ic
   _Init_ram
   _Pwm_Test
     _Test_Pwm
       _Get_CUR_Dat
         ___awdiv
       _PFG_read_fst
         _Set_jiyi_re
       _Test_PWM_Fst
         _Test_Pwm_Cur
           _Pwm_add
           _Pwm_dec
         _YTPFG_Flash
       _Test_Pwm_Cur
         _Pwm_add
         _Pwm_dec
       _Test_water
       _Work_RAM_CLR
       _YTPFG_Flash
   _Set_CCP_PWM
   _Set_Usart_Async
   _Set_Work
   _Sys_set
   _checkVoll
   _chrgCtr
   _closePWM
   _keyCtr
     _keyRead
     _keyRead2
     _keyRead3
   _uartSendCtr

 _time0 (ROOT)
   _Set_Pwm_Onoff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       2       0       14.3%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      68       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     10      4E       5       97.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       E       7       17.5%
BITBANK3            58      0       0       8        0.0%
BANK3               58      0       0       9        0.0%
BITBANK2            50      0       0      10        0.0%
BANK2               50      0       0      11        0.0%
DATA                 0      0      68      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Aug 22 14:47:32 2023

   __end_of_Set_Pwm_Onoff 044A                         pc 0002       __end_of_Get_CUR_Dat 00BC  
                      PL2 034B                        PL4 05F5                        PL6 0353  
                      PL8 035D                        _RD 0C60              ___awdiv@sign 0063  
                      fsr 0004                       PL10 0363                       PL12 036A  
                     PL14 0370                       PL16 04DF                       _GIE 005F  
                     _PR2 0092           YTPFG_Flash@temp 0061       Test_water@curstrold 0020  
                     fsr0 0004                       indf 0000              _Work_RAM_CLR 0322  
                    l2401 04F3                      l2360 04AF                      l2352 046F  
                    l2419 0624                      l2437 066F                      l8005 064E  
                    l4903 01E3                      l4920 01DF                      l4809 0117  
                    l4913 019F                      l4905 0178                      l4931 01FF  
                    l8035 0054                      l8131 0552                      l8109 0540  
                    l4934 0233                      l4927 023F                      l4960 0056  
                    l8321 0498                      l8049 005D                      l4954 0035  
                    l8315 048B                      l7611 0119                      l4883 00C6  
                    l8067 007E                      l8171 0570                      l8403 050A  
                    l4956 003B                      l8325 04A3                      l8309 0478  
                    l4885 00D3                      l8413 051C                      l4886 00D4  
                    l4958 0047                      l8327 04AB                      l8191 0634  
                    l7703 02C4                      l7607 0110                      l8415 051F  
                    l8503 05C2                      l4968 0061                      l7705 02D6  
                    l8257 002A                      l8441 0620                      l8433 060B  
                    l7803 00A0                      l7723 02FE                      l7715 02EF  
                    l8259 002C                      l8371 0694                      l8443 0627  
                    l8179 0577                      l8197 0636                      l7653 0268  
                    l7805 00B5                      l7717 02F1                      l7901 01AB  
                    l8381 06A7                      l8373 0696                      l8429 060A  
                    l8295 0452                      l8199 064A                      l7663 0276  
                    l7647 025F                      l7591 00FB                      l8297 0455  
                    l8393 04F9                      l8465 058B                      l7675 028D  
                    l7579 00F9                      l8491 05B1                      l7693 02AF  
                    l7685 029B                      l7845 00DE                      l7917 01C7  
                    l8485 05AB                      l7679 0295                      l7943 01FA  
                    l7697 02B9                      l7689 02A5                      l7961 0219  
                    l7939 01EC                      l7875 023E                      l7973 022B  
                    l7885 0191                      l7877 0185                      l7993 024B  
                    _CREN 00C4                      _IOCB 0096                      u3125 008E  
                    u3225 0163                      u3075 027F                      u3315 01BA  
                    u3335 01D0                      u3255 0182                      _PIE1 008C  
                    _PIE2 008D                      u3425 020F                      u3445 0221  
                    u3395 01F8                      u2935 013C                      u3905 049E  
                    u2945 0154                      u3915 04A9                      _RCIE 0465  
                    _RCIF 0065                      u3785 063C                      _PIR1 000C  
                    _PIR2 000D                      _OERR 00C1                      _SCKP 04C3  
        YTPFG_Flash@templ 0060                      _SPEN 00C7                      _TRMT 04C1  
                    _TXIE 0464                      _TXEN 04C5                      _SYNC 04C4  
                    _WPUA 018E                      _WPUB 0095                      _main 057A  
                    _errf 038F                      btemp 007E                      start 000D  
         __end_of_Init_ic 05F5           __end_of_Pwm_add 013F           __end_of_Pwm_dec 0157  
                   ?_main 0072       __size_of_AD_Testing 0095           __end_of___awdiv 029A  
                   _EEADR 010D                     _EEDAT 010C                     _EEPGD 0C67  
         ___awdiv@divisor 005E   __end_of_Set_Usart_Async 06F7                     _T2CON 0012  
         __end_of_Sys_set 05DF           ___awdiv@counter 0062                     _RCREG 001A  
             _YTPFG_Flash 06A9                     _RX9EN 00C6                     _SPBRG 0099  
                   _PORTA 0005                     _PORTB 0006                     _TX9EN 04C6  
                   _TRISA 0085                     _PWMTH 0190                     _TRISB 0086  
                   _PWMTL 018F                     _TXREG 0019                     _Delay 064E  
         __end_of_chrgCtr 062E             _cur_addatold0 0047             _cur_addatold1 0046  
           _cur_addatold2 0045           __end_of_keyRead 0546                     _errff 038E  
                   _time0 0376                     _onoff 038D                     _pwmhc 0040  
                   _pwmlc 003F                     _pwmlv 0022                     _pwmtf 038B  
          __pbitbssCOMMON 0380                     pclath 000A                _PfgChangef 0383  
           ??_Set_CCP_PWM 005E                     status 0003                     wtemp0 007E  
             _Get_CUR_Dat 0089           __initialization 000F              __end_of_main 05CC  
        __end_of_Init_ram 0704        __size_of_Delay_nms 0020                    ??_main 006E  
        PFG_read_fst@temp 0065                _Recebuffer 00A0          __end_of_Set_Work 0724  
        _chrgGreenLedTime 00AC                    ?_Delay 005E          __end_of_Test_Pwm 0089  
        __end_of_Pwm_Test 002F                    _ADCON0 001F                    _ADCON1 009F  
                  _ADRESH 001E                    _ADRESL 009E                    ?_time0 0072  
      Set_Pwm_Onoff@adonf 0382          ___awdiv@dividend 0060        Set_Pwm_Onoff@funod 0073  
                  _GODONE 00F9                    i1l2312 0389                    i1l2319 0399  
                  _PFGADJ 0119                    i1l7201 03CE                    i1l7221 03F6  
                  i1l7213 03E3                    i1l7223 03F9                    i1l7217 03EE  
                  i1l7219 03F2                    i1l4860 0448                    i1l7237 040A  
                  i1l4855 0402                    i1l4847 03DD                    i1l7191 03BC  
                  i1l7259 0435                    i1l7195 03CA                    i1l7485 0393  
                  i1l7487 0397                    _PFGCON 011B                    _INTCON 000B  
      Set_Pwm_Onoff@pwmcl 003B                    _OSCCON 008F                    _TMR2IF 0061  
                  _PWMD1L 0194                    _WDTCON 0105                    _PWMT4L 0191  
              _Sendbuffer 00A4              keyCtr@kclick 005F             ??_Set_jiyi_re 005E  
               ??_Init_ic 005E          __end_of_closePWM 0716       __end_of_Set_CCP_PWM 06E4  
               ??_Pwm_add 0060                 ??_Pwm_dec 0060                 ??___awdiv 0062  
            ?_uartSendCtr 0072          __end_of_keyRead2 0558          __end_of_keyRead3 057A  
                  _Ytzpcl 0043                 ??_Sys_set 005E                    _keyCtr 04E4  
                  _curmax 003E                    _curokf 0387                    _curset 070B  
                  _curupc 0049                    _curupf 0384                    _cursum 0026  
                  _whFlag 007A                    _on_off 038C          ___awdiv@quotient 0064  
               ??_chrgCtr 005E                    _ponecf 0388                    _tcount 005D  
                  _pwmtf1 038A                    _pwmfst 002C                    _pwmold 0024  
                  _pwmlst 002A                    _wnoncl 0042                _Test_water 0157  
               ??_keyRead 005E          ?_Set_Usart_Async 0072         Test_PWM_Fst@templ 0067  
                  saved_w 007E        Delay_nms@inittempl 0060              ??_AD_Testing 0060  
       __end_of_Delay_nms 064E   __end_of__initialization 0021           Test_water@temph 0061  
           __end_of_Delay 065A            __pcstackCOMMON 0072         __end_of_Cur_Adcon 070D  
      __size_of_checkVoll 0027       __end_of_Set_jiyi_re 0322             __end_of_time0 03A2  
              __end_ofPL2 0353                __end_ofPL4 05FF                __end_ofPL6 035D  
              __end_ofPL8 0363        __end_of_AD_Testing 04DF                   ??_Delay 0060  
                 ??_time0 0075         PFG_read_fst@temph 0063         PFG_read_fst@templ 0062  
              __pbssBANK0 0020                __pbssBANK1 00A0             ?_PFG_read_fst 0072  
               ?_Init_ram 0072               _Set_CCP_PWM 06CF              _chrgFullFlag 0050  
            _chrgFullTime 004F                 ?_Set_Work 0072                __pmaintext 057A  
               ?_Test_Pwm 0072                 ?_Pwm_Test 0072                __pintentry 0004  
                 ?_keyCtr 0072       Test_Pwm_Cur@curupcl 003D               ?_Test_water 0072  
     Set_Pwm_Onoff@funold 0039              ?_YTPFG_Flash 0072             ?_Test_PWM_Fst 0072  
                 _PFGCON1 011E                   _PFGSTOP 0088                   _PWM01DT 0093  
                 _PWM23DT 0094                   _PFGchgf 0386                   _PWMD01H 011C  
                 _PWMCON0 0107                   _PWMCON1 0108                   _PWMCON2 0109  
               ?_closePWM 0072            ??_PFG_read_fst 0060         __end_of_checkVoll 06A9  
              __stringtab 0704    __size_of_Set_Pwm_Onoff 00A8                 ?_keyRead2 0072  
               ?_keyRead3 0072             ?_Test_Pwm_Cur 0072                ??_Init_ram 005E  
            ?_Get_CUR_Dat 0072                   _Init_ic 05DF               _Set_jiyi_re 030E  
              ??_Set_Work 005E           AD_Testing@ad_ch 005E           AD_Testing@ad_fd 0062  
         AD_Testing@ad_lr 005F           AD_Testing@admax 0032           AD_Testing@admin 0034  
         AD_Testing@adsum 0030                   _Pwm_add 0126                ??_Test_Pwm 0068  
                 _Pwm_dec 013F     Test_Pwm_Cur@curdowncl 003C                ??_Pwm_Test 006D  
                 ___awdiv 0255                   _addTime 005C                   _Sys_set 05CC  
         __size_of_keyCtr 0044      __size_of_uartSendCtr 0028                   _chrgCtr 05FF  
   Set_Pwm_Onoff@cur_adcl 003A                   __ptext1 065A                   __ptext2 04E4  
                 __ptext3 0558                   __ptext4 0546                   __ptext5 0528  
                 __ptext6 070D                   __ptext7 05FF                   __ptext8 0682  
                 __ptext9 05CC          Set_jiyi_re@raddr 005E            ??_Test_PWM_Fst 0067  
              _pfg_select 070A                   _keyRead 0528                 _AD_Result 0036  
                 _curokcl 0044          _longKeyPressFlag 0052                   _ponesec 004A  
                 _subTime 005B                   _whavecl 0041                _pfgonetemp 0078  
              ??_closePWM 005E                   _pwmnold 0028                   clrloop0 0717  
                 _pwmtonf 0389      end_of_initialization 0021                ??_keyRead2 005E  
              ??_keyRead3 005E            ??_Test_Pwm_Cur 0065            Delay_nms@gtemp 0064  
             Pwm_add@temp 0063       __size_of_Test_water 00FE               Pwm_dec@temp 0063  
           _Set_Pwm_Onoff 03A2          _ganshaoCheckTime 004D         _longKey3PressFlag 0051  
        Test_water@watnof 0381          Test_water@strupc 00A8                 _Delay_nms 062E  
          ?_Set_Pwm_Onoff 0072      __end_of_PFG_read_fst 030E                 _Cur_Adcon 070C  
          __end_of_keyCtr 0528            __end_of_curset 070C               __end_ofPL10 036A  
             __end_ofPL12 0370               __end_ofPL14 0376               __end_ofPL16 04E4  
     start_initialization 000F      __size_of_YTPFG_Flash 0026             ?_Work_RAM_CLR 0072  
__size_of_Set_Usart_Async 0013              ?_Set_CCP_PWM 0072      __end_of_Test_PWM_Fst 00E3  
       __size_of_Init_ram 000D                ?_Delay_nms 0060      __size_of_Get_CUR_Dat 0033  
       AD_Testing@adtimes 004C         __size_of_Set_Work 0006                  ??_keyCtr 005F  
       __size_of_Test_Pwm 005A         __size_of_Pwm_Test 000B      __end_of_Test_Pwm_Cur 0126  
            ??_Test_water 005E            Test_water@temp 0062               __pbssCOMMON 0078  
               ___latbits 0001             __pcstackBANK0 005E            ??_Work_RAM_CLR 005E  
       __size_of_closePWM 0009         __size_of_keyRead2 0012         __size_of_keyRead3 0022  
               _checkVoll 0682                 _adonetemp 002E                  ?_Init_ic 0072  
            ?_Set_jiyi_re 0072        __end_of_Test_water 0255            Pwm_add@pwmlset 005E  
         ??_Set_Pwm_Onoff 0072                  ?_Pwm_add 005E                  ?_Pwm_dec 005E  
           Test_Pwm@ondly 0038             Test_Pwm@templ 006C                  ?___awdiv 005E  
                ?_Sys_set 0072           Test_Pwm@curokf1 0380                  ?_chrgCtr 0072  
               __pstrings 0704                  ?_keyRead 0072                 _keyCount2 0054  
               _keyCount3 0053                 _cur_addat 004B            __size_of_Delay 000C  
          AD_Testing@data 0064            __size_of_time0 002C      Set_Pwm_Onoff@cursumt 00AA  
               _rececount 004E         interrupt_function 0004            Pwm_dec@pwmfset 005E  
                _PFGDATA1 011F                ?_checkVoll 0072                 clear_ram0 0716  
       ??_Set_Usart_Async 005E               ??_Delay_nms 0062                 _sendcount 0058  
               _onoff_fst 0385     __size_of_PFG_read_fst 0074             ??_uartSendCtr 005E  
             __stringbase 0709          keyRead@keyStatus 005E     __size_of_Test_PWM_Fst 0027  
            _PFG_read_fst 029A                  _Init_ram 06F7             Pwm_Test@templ 006D  
    __size_of_Set_CCP_PWM 0015          Set_Pwm_Onoff@fun 0074                  _Set_Work 071E  
        __size_of_Init_ic 0016     __size_of_Test_Pwm_Cur 0043                  _Test_Pwm 002F  
    __end_of_Work_RAM_CLR 034B                  _Pwm_Test 0024          __size_of_Pwm_add 0019  
        __size_of_Pwm_dec 0018          __size_of___awdiv 0045          __size_of_Sys_set 0013  
      __end_of__stringtab 070A          __size_of_chrgCtr 002F       __end_of_uartSendCtr 0682  
            _Test_PWM_Fst 00BC          __size_of_keyRead 001E                  _led1Step 0057  
                _led2Step 0056                  _chrgStep 0055                  __ptext10 071E  
                __ptext11 06E4                  __ptext20 013F                  __ptext12 06CF  
                __ptext21 0126                  __ptext13 0024                  __ptext30 044A  
                __ptext22 029A                  __ptext14 002F                  __ptext31 0376  
                __ptext23 030E                  __ptext15 0322                  __ptext32 03A2  
                __ptext24 0089                  __ptext16 0157                  __ptext25 0255  
                __ptext17 00BC                  __ptext26 06F7                  __ptext18 06A9  
                __ptext27 05DF                  __ptext19 00E3                  __ptext28 062E  
                __ptext29 064E                  _closePWM 070D         Test_Pwm_Cur@temph 0065  
       Test_Pwm_Cur@templ 0066         Set_jiyi_re@redata 005F                  _keyRead2 0546  
                _keyRead3 0558                  _keyCount 005A                _AD_Testing 044A  
                _currDuty 007B                  _curdownc 0048              _Test_Pwm_Cur 00E3  
           __size_of_main 0052               ??_checkVoll 005E        __end_of_pfg_select 070B  
    __size_of_Set_jiyi_re 0014              _waitSendTime 0059                Delay@dtemp 005E  
           ??_YTPFG_Flash 005E                Delay_nms@i 0062              Pwm_add@addcl 0062  
                intlevel1 0000              Pwm_dec@deccl 0062             ??_Get_CUR_Dat 0066  
       keyRead2@keyStatus 005E                 stringcode 0704               _uartSendCtr 065A  
       keyRead3@keyStatus 005E     PFG_read_fst@pfgconset 0064                _OPTION_REG 0081  
             AD_Testing@i 0063                  stringdir 0704                  stringtab 0704  
         _Set_Usart_Async 06E4       __end_of_YTPFG_Flash 06CF               ?_AD_Testing 005E  
   __size_of_Work_RAM_CLR 0029  
