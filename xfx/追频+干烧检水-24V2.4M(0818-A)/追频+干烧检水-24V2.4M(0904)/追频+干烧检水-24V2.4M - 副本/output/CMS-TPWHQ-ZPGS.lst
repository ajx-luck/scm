

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Sep 04 13:59:45 2023

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	79F5135
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text28,local,class=CODE,merge=1,delta=2
    27                           	psect	text30,local,class=CODE,merge=1,delta=2
    28                           	psect	text32,local,class=CODE,merge=1,delta=2
    29                           	psect	text33,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	pa_nodes0,global,class=CODE,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 1.45
    35                           ; Generated 16/11/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	strings
    70  07F4                     __pstrings:	
    71  07F4                     stringtab:	
    72  07F4                     __stringtab:	
    73  07F4                     stringcode:	
    74                           ;	String table - string pointers are 1 byte each
    75                           
    76  07F4                     stringdir:	
    77  07F4  3007               	movlw	high stringdir
    78  07F5  008A               	movwf	10
    79  07F6  0804               	movf	4,w
    80  07F7  0A84               	incf	4,f
    81  07F8  0782               	addwf	2,f
    82  07F9                     __stringbase:	
    83  07F9  3400               	retlw	0
    84  07FA                     __end_of__stringtab:	
    85  07FA                     _pfg_select:	
    86  07FA  3402               	retlw	2
    87  07FB                     __end_of_pfg_select:	
    88  07FB                     _curset:	
    89  07FB  341E               	retlw	30
    90  07FC                     __end_of_curset:	
    91  07FC                     _Cur_Adcon:	
    92  07FC  3404               	retlw	4
    93  07FD                     __end_of_Cur_Adcon:	
    94  001F                     _ADCON0	set	31
    95  001E                     _ADRESH	set	30
    96  001A                     _RCREG	set	26
    97  0012                     _T2CON	set	18
    98  000D                     _PIR2	set	13
    99  000C                     _PIR1	set	12
   100  000B                     _INTCON	set	11
   101  0006                     _PORTB	set	6
   102  0005                     _PORTA	set	5
   103  00F9                     _GODONE	set	249
   104  00C1                     _OERR	set	193
   105  00C4                     _CREN	set	196
   106  00C6                     _RX9EN	set	198
   107  00C7                     _SPEN	set	199
   108  0061                     _TMR2IF	set	97
   109  0065                     _RCIF	set	101
   110  005F                     _GIE	set	95
   111  0088                     _PFGSTOP	set	136
   112  009F                     _ADCON1	set	159
   113  009E                     _ADRESL	set	158
   114  0099                     _SPBRG	set	153
   115  0096                     _IOCB	set	150
   116  0095                     _WPUB	set	149
   117  0094                     _PWM23DT	set	148
   118  0093                     _PWM01DT	set	147
   119  0092                     _PR2	set	146
   120  008F                     _OSCCON	set	143
   121  008D                     _PIE2	set	141
   122  008C                     _PIE1	set	140
   123  0086                     _TRISB	set	134
   124  0085                     _TRISA	set	133
   125  0081                     _OPTION_REG	set	129
   126  04C3                     _SCKP	set	1219
   127  04C4                     _SYNC	set	1220
   128  04C5                     _TXEN	set	1221
   129  04C6                     _TX9EN	set	1222
   130  0464                     _TXIE	set	1124
   131  0465                     _RCIE	set	1125
   132  011E                     _PFGCON1	set	286
   133  011B                     _PFGCON	set	283
   134  0119                     _PFGADJ	set	281
   135  011F                     _PFGDATA1	set	287
   136  011C                     _PWMD01H	set	284
   137  010D                     _EEADR	set	269
   138  010C                     _EEDAT	set	268
   139  0109                     _PWMCON2	set	265
   140  0108                     _PWMCON1	set	264
   141  0107                     _PWMCON0	set	263
   142  0105                     _WDTCON	set	261
   143  0194                     _PWMD1L	set	404
   144  0191                     _PWMT4L	set	401
   145  0190                     _PWMTH	set	400
   146  018F                     _PWMTL	set	399
   147  018E                     _WPUA	set	398
   148  0C60                     _RD	set	3168
   149  0C67                     _EEPGD	set	3175
   150                           
   151                           	psect	cinit
   152  000F                     start_initialization:	
   153                           ; #config settings
   154                           
   155  000F                     __initialization:	
   156  000F  3020               	movlw	low __pbssBANK0
   157                           
   158                           ; Clear objects allocated to BITCOMMON
   159  0010  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   160  0011  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   161                           
   162                           ; Clear objects allocated to COMMON
   163  0012  01F8               	clrf	__pbssCOMMON& (0+127)
   164  0013  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   165  0014  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   166  0015  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   167                           
   168                           ; Clear objects allocated to BANK0
   169  0016  1383               	bcf	3,7	;select IRP bank0
   170  0017  0084               	movwf	4
   171  0018  305F               	movlw	low (__pbssBANK0+63)
   172  0019  158A  27EF  118A   	fcall	clear_ram0
   173                           
   174                           ; Clear objects allocated to BANK1
   175  001C  30A0               	movlw	low __pbssBANK1
   176  001D  0084               	movwf	4
   177  001E  30B4               	movlw	low (__pbssBANK1+20)
   178  001F  158A  27EF         	fcall	clear_ram0
   179  0021                     end_of_initialization:	
   180                           ;End of C runtime variable initialization code
   181                           
   182  0021                     __end_of__initialization:	
   183  0021  0183               	clrf	3
   184  0022  118A  2E06         	ljmp	_main	;jump to C main() function
   185                           
   186                           	psect	bitbssCOMMON
   187  0380                     __pbitbssCOMMON:	
   188  0380                     Test_Pwm@curokf1:	
   189  0380                     	ds	1
   190  0381                     Test_water@watnof:	
   191  0381                     	ds	1
   192  0382                     Set_Pwm_Onoff@adonf:	
   193  0382                     	ds	1
   194  0383                     _PfgChangef:	
   195  0383                     	ds	1
   196  0384                     _curupf:	
   197  0384                     	ds	1
   198  0385                     _onoff_fst:	
   199  0385                     	ds	1
   200  0386                     _PFGchgf:	
   201  0386                     	ds	1
   202  0387                     _curokf:	
   203  0387                     	ds	1
   204  0388                     _ponecf:	
   205  0388                     	ds	1
   206  0389                     _pwmtonf:	
   207  0389                     	ds	1
   208  038A                     _pwmtf1:	
   209  038A                     	ds	1
   210  038B                     _pwmtf:	
   211  038B                     	ds	1
   212  038C                     _on_off:	
   213  038C                     	ds	1
   214  038D                     _onoff:	
   215  038D                     	ds	1
   216  038E                     _errff:	
   217  038E                     	ds	1
   218  038F                     _errf:	
   219  038F                     	ds	1
   220                           
   221                           	psect	bssCOMMON
   222  0078                     __pbssCOMMON:	
   223  0078                     _pfgonetemp:	
   224  0078                     	ds	2
   225  007A                     _curLedCnt:	
   226  007A                     	ds	1
   227  007B                     _cBlueDuty:	
   228  007B                     	ds	1
   229                           
   230                           	psect	bssBANK0
   231  0020                     __pbssBANK0:	
   232  0020                     _pwmlv:	
   233  0020                     	ds	2
   234  0022                     _pwmold:	
   235  0022                     	ds	2
   236  0024                     _pwmnold:	
   237  0024                     	ds	2
   238  0026                     _pwmlst:	
   239  0026                     	ds	2
   240  0028                     _pwmfst:	
   241  0028                     	ds	2
   242  002A                     AD_Testing@admax:	
   243  002A                     	ds	2
   244  002C                     AD_Testing@admin:	
   245  002C                     	ds	2
   246  002E                     _AD_Result:	
   247  002E                     	ds	2
   248  0030                     Test_Pwm@ondly:	
   249  0030                     	ds	1
   250  0031                     Set_Pwm_Onoff@pwmcl:	
   251  0031                     	ds	1
   252  0032                     _curmax:	
   253  0032                     	ds	1
   254  0033                     _pwmlc:	
   255  0033                     	ds	1
   256  0034                     _pwmhc:	
   257  0034                     	ds	1
   258  0035                     _whavecl:	
   259  0035                     	ds	1
   260  0036                     _wnoncl:	
   261  0036                     	ds	1
   262  0037                     _Ytzpcl:	
   263  0037                     	ds	1
   264  0038                     _curokcl:	
   265  0038                     	ds	1
   266  0039                     _cur_addatold2:	
   267  0039                     	ds	1
   268  003A                     _cur_addatold1:	
   269  003A                     	ds	1
   270  003B                     _cur_addatold0:	
   271  003B                     	ds	1
   272  003C                     _curdownc:	
   273  003C                     	ds	1
   274  003D                     _curupc:	
   275  003D                     	ds	1
   276  003E                     _ponesec:	
   277  003E                     	ds	1
   278  003F                     _cur_addat:	
   279  003F                     	ds	1
   280  0040                     AD_Testing@adtimes:	
   281  0040                     	ds	1
   282  0041                     _count125us:	
   283  0041                     	ds	1
   284  0042                     _tm2Flag:	
   285  0042                     	ds	1
   286  0043                     _cClorStep:	
   287  0043                     	ds	1
   288  0044                     _cdelayTime:	
   289  0044                     	ds	1
   290  0045                     _clastBlue:	
   291  0045                     	ds	1
   292  0046                     _clastGreen:	
   293  0046                     	ds	1
   294  0047                     _clastRed:	
   295  0047                     	ds	1
   296  0048                     _ganshaoFlag:	
   297  0048                     	ds	1
   298  0049                     _mClorStep:	
   299  0049                     	ds	1
   300  004A                     _delayTime:	
   301  004A                     	ds	1
   302  004B                     _lastBlue:	
   303  004B                     	ds	1
   304  004C                     _lastGreen:	
   305  004C                     	ds	1
   306  004D                     _lastRed:	
   307  004D                     	ds	1
   308  004E                     _count2:	
   309  004E                     	ds	1
   310  004F                     _count2s:	
   311  004F                     	ds	1
   312  0050                     _startTime:	
   313  0050                     	ds	1
   314  0051                     _revTime:	
   315  0051                     	ds	1
   316  0052                     _cRedDuty:	
   317  0052                     	ds	1
   318  0053                     _blueDuty:	
   319  0053                     	ds	1
   320  0054                     _greenDuty:	
   321  0054                     	ds	1
   322  0055                     _redDuty:	
   323  0055                     	ds	1
   324  0056                     _led2Step:	
   325  0056                     	ds	1
   326  0057                     _led1Step:	
   327  0057                     	ds	1
   328  0058                     _rececount:	
   329  0058                     	ds	1
   330  0059                     _whFlag:	
   331  0059                     	ds	1
   332  005A                     _subTime:	
   333  005A                     	ds	1
   334  005B                     _addTime:	
   335  005B                     	ds	1
   336  005C                     _currDuty:	
   337  005C                     	ds	1
   338  005D                     _tcount:	
   339  005D                     	ds	1
   340  005E                     _cGreenDuty:	
   341  005E                     	ds	1
   342                           
   343                           	psect	bssBANK1
   344  00A0                     __pbssBANK1:	
   345  00A0                     _Recebuffer:	
   346  00A0                     	ds	4
   347  00A4                     Test_water@strupc:	
   348  00A4                     	ds	2
   349  00A6                     Test_water@curstrold:	
   350  00A6                     	ds	2
   351  00A8                     Set_Pwm_Onoff@cursumt:	
   352  00A8                     	ds	2
   353  00AA                     _cursum:	
   354  00AA                     	ds	2
   355  00AC                     _adonetemp:	
   356  00AC                     	ds	2
   357  00AE                     AD_Testing@adsum:	
   358  00AE                     	ds	2
   359  00B0                     Set_Pwm_Onoff@funold:	
   360  00B0                     	ds	1
   361  00B1                     Set_Pwm_Onoff@cur_adcl:	
   362  00B1                     	ds	1
   363  00B2                     Test_Pwm_Cur@curdowncl:	
   364  00B2                     	ds	1
   365  00B3                     Test_Pwm_Cur@curupcl:	
   366  00B3                     	ds	1
   367                           
   368                           	psect	clrtext
   369  0FEF                     clear_ram0:	
   370                           ;	Called with FSR containing the base address, and
   371                           ;	W with the last address+1
   372                           
   373  0FEF  0064               	clrwdt	;clear the watchdog before getting into this loop
   374  0FF0                     clrloop0:	
   375  0FF0  0180               	clrf	0	;clear RAM location pointed to by FSR
   376  0FF1  0A84               	incf	4,f	;increment pointer
   377  0FF2  0604               	xorwf	4,w	;XOR with final address
   378  0FF3  1903               	btfsc	3,2	;have we reached the end yet?
   379  0FF4  3400               	retlw	0	;all done for this memory range, return
   380  0FF5  0604               	xorwf	4,w	;XOR again to restore value
   381  0FF6  2FF0               	goto	clrloop0	;do the next byte
   382                           
   383                           	psect	cstackCOMMON
   384  0072                     __pcstackCOMMON:	
   385  0072                     ?_Set_jiyi_re:	
   386  0072                     ?_Test_Pwm:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0072                     ?_Set_Pwm_Onoff:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0072                     ??_Set_Pwm_Onoff:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0072                     ?_Set_Usart_Async:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0072                     ?_rgbShow:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0072                     ?_Set_CCP_PWM:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0072                     ?_checkVoll:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0072                     ?_colorCtr:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0072                     ?_closePWM:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0072                     ?_uartRevCtr:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0072                     ?_checkLed:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0072                     ?_rainbow2:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0072                     ?_rainbow:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0072                     ?_breathAddLed:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0072                     ?_breathSubLed:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0072                     ?_Init_ic:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0072                     ?_Init_ram:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0072                     ?_Sys_set:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0072                     ?_Pwm_Test:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0072                     ?_Set_Work:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0072                     ?_time0:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0072                     ?_main:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0072                     ?_Test_Pwm_Cur:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0072                     ?_PFG_read_fst:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0072                     ?_Work_RAM_CLR:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0072                     ?_Get_CUR_Dat:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0072                     ?_YTPFG_Flash:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0072                     ?_Test_PWM_Fst:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0072                     ?_Test_water:	
   471                           ; 1 bytes @ 0x0
   472                           
   473                           
   474                           ; 1 bytes @ 0x0
   475  0072                     	ds	1
   476  0073                     Set_Pwm_Onoff@funod:	
   477                           
   478                           ; 1 bytes @ 0x1
   479  0073                     	ds	1
   480  0074                     Set_Pwm_Onoff@fun:	
   481                           
   482                           ; 1 bytes @ 0x2
   483  0074                     	ds	1
   484  0075                     ??_time0:	
   485                           
   486                           ; 1 bytes @ 0x3
   487  0075                     	ds	3
   488                           
   489                           	psect	cstackBANK0
   490  005F                     __pcstackBANK0:	
   491  005F                     ??_Set_jiyi_re:	
   492  005F                     ??_Set_Usart_Async:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  005F                     ??_rgbShow:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  005F                     ?_AD_Testing:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  005F                     ??_Set_CCP_PWM:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  005F                     ??_checkVoll:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  005F                     ??_closePWM:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  005F                     ??_uartRevCtr:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  005F                     ??_checkLed:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  005F                     ??_rainbow2:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  005F                     ??_rainbow:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  005F                     ??_breathAddLed:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  005F                     ??_breathSubLed:	
   526                           ; 1 bytes @ 0x0
   527                           
   528  005F                     ?_Delay:	
   529                           ; 1 bytes @ 0x0
   530                           
   531  005F                     ??_Init_ic:	
   532                           ; 1 bytes @ 0x0
   533                           
   534  005F                     ??_Init_ram:	
   535                           ; 1 bytes @ 0x0
   536                           
   537  005F                     ??_Sys_set:	
   538                           ; 1 bytes @ 0x0
   539                           
   540  005F                     ??_Set_Work:	
   541                           ; 1 bytes @ 0x0
   542                           
   543  005F                     ?_Pwm_add:	
   544                           ; 1 bytes @ 0x0
   545                           
   546  005F                     ?_Pwm_dec:	
   547                           ; 1 bytes @ 0x0
   548                           
   549  005F                     ??_Work_RAM_CLR:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  005F                     ??_YTPFG_Flash:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  005F                     ??_Test_water:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  005F                     ?___awdiv:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  005F                     Set_jiyi_re@raddr:	
   562                           ; 2 bytes @ 0x0
   563                           
   564  005F                     AD_Testing@ad_ch:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  005F                     breathAddLed@ledDuty:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  005F                     breathSubLed@ledDuty:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  005F                     Delay@dtemp:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  005F                     Pwm_add@pwmlset:	
   577                           ; 2 bytes @ 0x0
   578                           
   579  005F                     Pwm_dec@pwmfset:	
   580                           ; 2 bytes @ 0x0
   581                           
   582  005F                     ___awdiv@divisor:	
   583                           ; 2 bytes @ 0x0
   584                           
   585                           
   586                           ; 2 bytes @ 0x0
   587  005F                     	ds	1
   588  0060                     ??_colorCtr:	
   589  0060                     Set_jiyi_re@redata:	
   590                           ; 1 bytes @ 0x1
   591                           
   592  0060                     AD_Testing@ad_lr:	
   593                           ; 1 bytes @ 0x1
   594                           
   595                           
   596                           ; 1 bytes @ 0x1
   597  0060                     	ds	1
   598  0061                     ??_AD_Testing:	
   599  0061                     ??_Delay:	
   600                           ; 1 bytes @ 0x2
   601                           
   602  0061                     ?_Delay_nms:	
   603                           ; 1 bytes @ 0x2
   604                           
   605  0061                     ??_Pwm_add:	
   606                           ; 1 bytes @ 0x2
   607                           
   608  0061                     ??_Pwm_dec:	
   609                           ; 1 bytes @ 0x2
   610                           
   611  0061                     ??_PFG_read_fst:	
   612                           ; 1 bytes @ 0x2
   613                           
   614  0061                     YTPFG_Flash@templ:	
   615                           ; 1 bytes @ 0x2
   616                           
   617  0061                     Delay_nms@inittempl:	
   618                           ; 1 bytes @ 0x2
   619                           
   620  0061                     ___awdiv@dividend:	
   621                           ; 2 bytes @ 0x2
   622                           
   623                           
   624                           ; 2 bytes @ 0x2
   625  0061                     	ds	1
   626  0062                     Test_water@temph:	
   627  0062                     YTPFG_Flash@temp:	
   628                           ; 1 bytes @ 0x3
   629                           
   630                           
   631                           ; 2 bytes @ 0x3
   632  0062                     	ds	1
   633  0063                     ??_Delay_nms:	
   634  0063                     ??___awdiv:	
   635                           ; 1 bytes @ 0x4
   636                           
   637  0063                     AD_Testing@ad_fd:	
   638                           ; 1 bytes @ 0x4
   639                           
   640  0063                     Pwm_add@addcl:	
   641                           ; 1 bytes @ 0x4
   642                           
   643  0063                     Pwm_dec@deccl:	
   644                           ; 1 bytes @ 0x4
   645                           
   646  0063                     PFG_read_fst@templ:	
   647                           ; 1 bytes @ 0x4
   648                           
   649  0063                     ___awdiv@counter:	
   650                           ; 1 bytes @ 0x4
   651                           
   652  0063                     Delay_nms@i:	
   653                           ; 1 bytes @ 0x4
   654                           
   655  0063                     Test_water@temp:	
   656                           ; 2 bytes @ 0x4
   657                           
   658                           
   659                           ; 2 bytes @ 0x4
   660  0063                     	ds	1
   661  0064                     AD_Testing@i:	
   662  0064                     PFG_read_fst@temph:	
   663                           ; 1 bytes @ 0x5
   664                           
   665  0064                     ___awdiv@sign:	
   666                           ; 1 bytes @ 0x5
   667                           
   668  0064                     Pwm_add@temp:	
   669                           ; 1 bytes @ 0x5
   670                           
   671  0064                     Pwm_dec@temp:	
   672                           ; 2 bytes @ 0x5
   673                           
   674                           
   675                           ; 2 bytes @ 0x5
   676  0064                     	ds	1
   677  0065                     Delay_nms@gtemp:	
   678  0065                     PFG_read_fst@pfgconset:	
   679                           ; 1 bytes @ 0x6
   680                           
   681  0065                     AD_Testing@data:	
   682                           ; 1 bytes @ 0x6
   683                           
   684  0065                     ___awdiv@quotient:	
   685                           ; 2 bytes @ 0x6
   686                           
   687                           
   688                           ; 2 bytes @ 0x6
   689  0065                     	ds	1
   690  0066                     ??_Test_Pwm_Cur:	
   691  0066                     Test_Pwm_Cur@temph:	
   692                           ; 1 bytes @ 0x7
   693                           
   694  0066                     PFG_read_fst@temp:	
   695                           ; 1 bytes @ 0x7
   696                           
   697                           
   698                           ; 2 bytes @ 0x7
   699  0066                     	ds	1
   700  0067                     ??_Get_CUR_Dat:	
   701  0067                     Test_Pwm_Cur@templ:	
   702                           ; 1 bytes @ 0x8
   703                           
   704                           
   705                           ; 1 bytes @ 0x8
   706  0067                     	ds	1
   707  0068                     ??_Test_PWM_Fst:	
   708  0068                     Test_PWM_Fst@templ:	
   709                           ; 1 bytes @ 0x9
   710                           
   711                           
   712                           ; 1 bytes @ 0x9
   713  0068                     	ds	1
   714  0069                     ??_Test_Pwm:	
   715                           
   716                           ; 1 bytes @ 0xA
   717  0069                     	ds	4
   718  006D                     Test_Pwm@templ:	
   719                           
   720                           ; 1 bytes @ 0xE
   721  006D                     	ds	1
   722  006E                     ??_Pwm_Test:	
   723  006E                     Pwm_Test@templ:	
   724                           ; 1 bytes @ 0xF
   725                           
   726                           
   727                           ; 1 bytes @ 0xF
   728  006E                     	ds	1
   729  006F                     ??_main:	
   730                           
   731                           	psect	maintext
   732  0606                     __pmaintext:	
   733                           ; 1 bytes @ 0x10
   734 ;;
   735 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   736 ;;
   737 ;; *************** function _main *****************
   738 ;; Defined at:
   739 ;;		line 237 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;		None
   742 ;; Auto vars:     Size  Location     Type
   743 ;;		None
   744 ;; Return value:  Size  Location     Type
   745 ;;                  1    wreg      void 
   746 ;; Registers used:
   747 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   748 ;; Tracked objects:
   749 ;;		On entry : B00/0
   750 ;;		On exit  : 300/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   753 ;;      Params:         0       0       0       0       0
   754 ;;      Locals:         0       0       0       0       0
   755 ;;      Temps:          0       0       0       0       0
   756 ;;      Totals:         0       0       0       0       0
   757 ;;Total ram usage:        0 bytes
   758 ;; Hardware stack levels required when called:    7
   759 ;; This function calls:
   760 ;;		_AD_Testing
   761 ;;		_Delay_nms
   762 ;;		_Init_ic
   763 ;;		_Init_ram
   764 ;;		_Pwm_Test
   765 ;;		_Set_CCP_PWM
   766 ;;		_Set_Usart_Async
   767 ;;		_Set_Work
   768 ;;		_Sys_set
   769 ;;		_checkLed
   770 ;;		_checkVoll
   771 ;;		_closePWM
   772 ;;		_colorCtr
   773 ;;		_rgbShow
   774 ;;		_uartRevCtr
   775 ;; This function is called by:
   776 ;;		Startup code after reset
   777 ;; This function uses a non-reentrant model
   778 ;;
   779                           
   780                           
   781                           ;psect for function _main
   782  0606                     _main:	
   783                           
   784                           ;incstack = 0
   785                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   786  0606  0064               	clrwdt	;# 
   787                           
   788                           ;main.c: 242: Init_ic();
   789  0607  118A  26F7  118A   	fcall	_Init_ic
   790                           
   791                           ;main.c: 243: Delay_nms(200);
   792  060A  30C8               	movlw	200
   793  060B  1283               	bcf	3,5	;RP0=0, select bank0
   794  060C  00E1               	movwf	Delay_nms@inittempl
   795  060D  01E2               	clrf	Delay_nms@inittempl+1
   796  060E  118A  2742  118A   	fcall	_Delay_nms
   797                           
   798                           ;main.c: 244: Init_ram();
   799  0611  118A  27E7  118A   	fcall	_Init_ram
   800                           
   801                           ;main.c: 245: Set_Usart_Async();
   802  0614  118A  27D4  118A   	fcall	_Set_Usart_Async
   803                           
   804                           ;main.c: 246: whFlag = 1;
   805  0617  1283               	bcf	3,5	;RP0=0, select bank0
   806  0618  3003               	movlw	3
   807  0619  01D9               	clrf	_whFlag
   808  061A  0AD9               	incf	_whFlag,f
   809                           
   810                           ;main.c: 247: led1Step = 3;
   811  061B  00D7               	movwf	_led1Step
   812                           
   813                           ;main.c: 248: led2Step = 3;
   814  061C  00D6               	movwf	_led2Step
   815                           
   816                           ;main.c: 249: startTime = 200;
   817  061D  30C8               	movlw	200
   818  061E  00D0               	movwf	_startTime
   819  061F                     l8936:	
   820                           
   821                           ;main.c: 251: {
   822                           ;main.c: 252: if(whFlag || startTime > 0)
   823  061F  0859               	movf	_whFlag,w
   824  0620  1903               	btfsc	3,2
   825  0621  0850               	movf	_startTime,w
   826  0622  1903               	btfsc	3,2
   827  0623  2E2B               	goto	l8946
   828                           
   829                           ;main.c: 253: {
   830                           ;main.c: 254: if(tm2Flag)
   831  0624  0842               	movf	_tm2Flag,w
   832  0625  1903               	btfsc	3,2
   833  0626  2E2B               	goto	l8946
   834                           
   835                           ;main.c: 255: {
   836                           ;main.c: 256: tm2Flag = 0;
   837  0627  01C2               	clrf	_tm2Flag
   838                           
   839                           ;main.c: 257: rgbShow();
   840  0628  118A  266F  118A   	fcall	_rgbShow
   841  062B                     l8946:	
   842                           
   843                           ;main.c: 258: }
   844                           ;main.c: 259: }
   845                           ;main.c: 260: if(tcount >= 40)
   846  062B  3028               	movlw	40
   847  062C  025D               	subwf	_tcount,w	;volatile
   848  062D  1C03               	skipc
   849  062E  2E1F               	goto	l8936
   850                           
   851                           ;main.c: 261: {
   852                           ;main.c: 262: tcount = 0;
   853  062F  01DD               	clrf	_tcount	;volatile
   854                           
   855                           ;main.c: 263: Sys_set();
   856  0630  118A  26E4  118A   	fcall	_Sys_set
   857                           
   858                           ;main.c: 267: if(whFlag)
   859  0633  0859               	movf	_whFlag,w
   860  0634  1903               	btfsc	3,2
   861  0635  2E55               	goto	l8976
   862                           
   863                           ;main.c: 268: {
   864                           ;main.c: 269: startTime = 0;
   865  0636  01D0               	clrf	_startTime
   866                           
   867                           ;main.c: 270: Set_Work();
   868  0637  158A  27E8  118A   	fcall	_Set_Work
   869                           
   870                           ;main.c: 271: onoff=1;
   871  063A  16F1               	bsf	_onoff/(0+8),_onoff& (0+7)	;volatile
   872                           
   873                           ;main.c: 272: AD_Testing(1,13,1);
   874  063B  300D               	movlw	13
   875  063C  00DF               	movwf	AD_Testing@ad_ch
   876  063D  3001               	movlw	1
   877  063E  01E0               	clrf	AD_Testing@ad_lr
   878  063F  0AE0               	incf	AD_Testing@ad_lr,f
   879  0640  118A  255C  118A   	fcall	_AD_Testing
   880                           
   881                           ;main.c: 273: Set_CCP_PWM();
   882  0643  118A  27BB  118A   	fcall	_Set_CCP_PWM
   883                           
   884                           ;main.c: 274: checkVoll();
   885  0646  118A  276E  118A   	fcall	_checkVoll
   886                           
   887                           ;main.c: 275: if(led1Step != 1)
   888  0649  0B57               	decfsz	_led1Step,w
   889                           
   890                           ;main.c: 276: {
   891                           ;main.c: 277: PORTA &= 0xF7;
   892  064A  1185               	bcf	5,3	;volatile
   893                           
   894                           ;main.c: 278: }
   895                           ;main.c: 279: if(++count2 > 1)
   896  064B  3002               	movlw	2
   897  064C  0ACE               	incf	_count2,f
   898  064D  024E               	subwf	_count2,w
   899  064E  1C03               	skipc
   900  064F  2E5F               	goto	l8986
   901                           
   902                           ;main.c: 280: {
   903                           ;main.c: 281: count2 = 0;
   904  0650  01CE               	clrf	_count2
   905                           
   906                           ;main.c: 282: colorCtr();
   907  0651  118A  2390  118A   	fcall	_colorCtr
   908  0654  2E5F               	goto	l8986
   909  0655                     l8976:	
   910                           
   911                           ;main.c: 285: else if(startTime == 0)
   912  0655  0850               	movf	_startTime,w
   913  0656  1D03               	btfss	3,2
   914  0657  2E5F               	goto	l8986
   915                           
   916                           ;main.c: 286: {
   917                           ;main.c: 287: closePWM();
   918  0658  158A  27F7  118A   	fcall	_closePWM
   919                           
   920                           ;main.c: 288: onoff=0;
   921  065B  12F1               	bcf	_onoff/(0+8),_onoff& (0+7)	;volatile
   922                           
   923                           ;main.c: 290: PORTA = 0x00;
   924  065C  1303               	bcf	3,6	;RP1=0, select bank0
   925  065D  0185               	clrf	5	;volatile
   926                           
   927                           ;main.c: 291: PORTB = 0x00;
   928  065E  0186               	clrf	6	;volatile
   929  065F                     l8986:	
   930                           
   931                           ;main.c: 292: }
   932                           ;main.c: 293: Pwm_Test();
   933  065F  118A  2024  118A   	fcall	_Pwm_Test
   934                           
   935                           ;main.c: 294: uartRevCtr();
   936  0662  118A  26AB  118A   	fcall	_uartRevCtr
   937                           
   938                           ;main.c: 295: checkLed();
   939  0665  118A  2716  118A   	fcall	_checkLed
   940                           
   941                           ;main.c: 296: if(ganshaoFlag)
   942  0668  0848               	movf	_ganshaoFlag,w
   943  0669  1903               	btfsc	3,2
   944  066A  2E6D               	goto	l2376
   945                           
   946                           ;main.c: 297: {
   947                           ;main.c: 298: PORTB &= 0xDF;
   948  066B  1286               	bcf	6,5	;volatile
   949                           
   950                           ;main.c: 299: }
   951  066C  2E1F               	goto	l8936
   952  066D                     l2376:	
   953                           
   954                           ;main.c: 300: else
   955                           ;main.c: 301: {
   956                           ;main.c: 302: PORTB |= 0x20;
   957  066D  1686               	bsf	6,5	;volatile
   958  066E  2E1F               	goto	l8936
   959  066F                     __end_of_main:	
   960                           
   961                           	psect	text1
   962  06AB                     __ptext1:	
   963 ;; *************** function _uartRevCtr *****************
   964 ;; Defined at:
   965 ;;		line 349 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
   966 ;; Parameters:    Size  Location     Type
   967 ;;		None
   968 ;; Auto vars:     Size  Location     Type
   969 ;;		None
   970 ;; Return value:  Size  Location     Type
   971 ;;                  1    wreg      void 
   972 ;; Registers used:
   973 ;;		wreg, status,2, status,0
   974 ;; Tracked objects:
   975 ;;		On entry : 300/0
   976 ;;		On exit  : 300/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   979 ;;      Params:         0       0       0       0       0
   980 ;;      Locals:         0       0       0       0       0
   981 ;;      Temps:          0       0       0       0       0
   982 ;;      Totals:         0       0       0       0       0
   983 ;;Total ram usage:        0 bytes
   984 ;; Hardware stack levels used:    1
   985 ;; Hardware stack levels required when called:    2
   986 ;; This function calls:
   987 ;;		Nothing
   988 ;; This function is called by:
   989 ;;		_main
   990 ;; This function uses a non-reentrant model
   991 ;;
   992                           
   993                           
   994                           ;psect for function _uartRevCtr
   995  06AB                     _uartRevCtr:	
   996                           
   997                           ;main.c: 351: if(++revTime > 10)
   998                           
   999                           ;incstack = 0
  1000                           ; Regs used in _uartRevCtr: [wreg+status,2+status,0]
  1001  06AB  300B               	movlw	11
  1002  06AC  0AD1               	incf	_revTime,f
  1003  06AD  0251               	subwf	_revTime,w
  1004  06AE  1C03               	skipc
  1005  06AF  0008               	return
  1006                           
  1007                           ;main.c: 352: {
  1008                           ;main.c: 353: revTime = 10;
  1009  06B0  300A               	movlw	10
  1010  06B1  00D1               	movwf	_revTime
  1011                           
  1012                           ;main.c: 354: if(whFlag != Recebuffer[0])
  1013  06B2  0859               	movf	_whFlag,w
  1014  06B3  1683               	bsf	3,5	;RP0=1, select bank1
  1015  06B4  0620               	xorwf	_Recebuffer^(0+128),w
  1016                           
  1017                           ;main.c: 355: {
  1018                           ;main.c: 356: ganshaoFlag = 0;
  1019  06B5  1283               	bcf	3,5	;RP0=0, select bank0
  1020  06B6  1D03               	btfss	3,2
  1021  06B7  01C8               	clrf	_ganshaoFlag
  1022                           
  1023                           ;main.c: 357: }
  1024                           ;main.c: 358: whFlag = Recebuffer[0];
  1025  06B8  1683               	bsf	3,5	;RP0=1, select bank1
  1026  06B9  0820               	movf	_Recebuffer^(0+128),w
  1027  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  1028  06BB  00D9               	movwf	_whFlag
  1029                           
  1030                           ;main.c: 359: if(Recebuffer[1] == 3 && led1Step != 3)
  1031  06BC  3003               	movlw	3
  1032  06BD  1683               	bsf	3,5	;RP0=1, select bank1
  1033  06BE  0621               	xorwf	(_Recebuffer^(0+128)+1),w
  1034  06BF  1D03               	btfss	3,2
  1035  06C0  2ECB               	goto	l8872
  1036  06C1  3003               	movlw	3
  1037  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  1038  06C3  0657               	xorwf	_led1Step,w
  1039  06C4  1903               	btfsc	3,2
  1040  06C5  2ECB               	goto	l8872
  1041                           
  1042                           ;main.c: 360: {
  1043                           ;main.c: 361: redDuty = 64;
  1044  06C6  3040               	movlw	64
  1045  06C7  00D5               	movwf	_redDuty
  1046                           
  1047                           ;main.c: 362: greenDuty = 64;
  1048  06C8  00D4               	movwf	_greenDuty
  1049                           
  1050                           ;main.c: 363: blueDuty = 64;
  1051  06C9  00D3               	movwf	_blueDuty
  1052                           
  1053                           ;main.c: 364: count2s = 0;
  1054  06CA  01CF               	clrf	_count2s
  1055  06CB                     l8872:	
  1056                           
  1057                           ;main.c: 365: }
  1058                           ;main.c: 366: led1Step = Recebuffer[1];
  1059  06CB  1683               	bsf	3,5	;RP0=1, select bank1
  1060  06CC  0821               	movf	(_Recebuffer^(0+128)+1),w
  1061  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  1062  06CE  00D7               	movwf	_led1Step
  1063                           
  1064                           ;main.c: 367: if(Recebuffer[2] == 3 && led2Step != 3)
  1065  06CF  3003               	movlw	3
  1066  06D0  1683               	bsf	3,5	;RP0=1, select bank1
  1067  06D1  0622               	xorwf	(_Recebuffer^(0+128)+2),w
  1068  06D2  1D03               	btfss	3,2
  1069  06D3  2EDE               	goto	l8882
  1070  06D4  3003               	movlw	3
  1071  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  1072  06D6  0656               	xorwf	_led2Step,w
  1073  06D7  1903               	btfsc	3,2
  1074  06D8  2EDE               	goto	l8882
  1075                           
  1076                           ;main.c: 368: {
  1077                           ;main.c: 369: cRedDuty = 64;
  1078  06D9  3040               	movlw	64
  1079  06DA  00D2               	movwf	_cRedDuty
  1080                           
  1081                           ;main.c: 370: cGreenDuty = 64;
  1082  06DB  00DE               	movwf	_cGreenDuty
  1083                           
  1084                           ;main.c: 371: cBlueDuty = 64;
  1085  06DC  00FB               	movwf	_cBlueDuty
  1086                           
  1087                           ;main.c: 372: count2s = 0;
  1088  06DD  01CF               	clrf	_count2s
  1089  06DE                     l8882:	
  1090                           
  1091                           ;main.c: 375: chrgStep = Recebuffer[3];
  1092  06DE  1683               	bsf	3,5	;RP0=1, select bank1
  1093  06DF  0822               	movf	(_Recebuffer^(0+128)+2),w
  1094  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  1095  06E1  00D6               	movwf	_led2Step
  1096                           
  1097                           ;main.c: 376: rececount = 0;
  1098  06E2  01D8               	clrf	_rececount
  1099  06E3  0008               	return
  1100  06E4                     __end_of_uartRevCtr:	
  1101                           
  1102                           	psect	text2
  1103  066F                     __ptext2:	
  1104 ;; *************** function _rgbShow *****************
  1105 ;; Defined at:
  1106 ;;		line 760 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;		None
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;		None
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  1    wreg      void 
  1113 ;; Registers used:
  1114 ;;		wreg, status,2, status,0
  1115 ;; Tracked objects:
  1116 ;;		On entry : 300/0
  1117 ;;		On exit  : 300/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1120 ;;      Params:         0       0       0       0       0
  1121 ;;      Locals:         0       0       0       0       0
  1122 ;;      Temps:          0       0       0       0       0
  1123 ;;      Totals:         0       0       0       0       0
  1124 ;;Total ram usage:        0 bytes
  1125 ;; Hardware stack levels used:    1
  1126 ;; Hardware stack levels required when called:    2
  1127 ;; This function calls:
  1128 ;;		Nothing
  1129 ;; This function is called by:
  1130 ;;		_main
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134                           
  1135                           ;psect for function _rgbShow
  1136  066F                     _rgbShow:	
  1137                           
  1138                           ;main.c: 762: if(++curLedCnt > 64)
  1139                           
  1140                           ;incstack = 0
  1141                           ; Regs used in _rgbShow: [wreg+status,2+status,0]
  1142  066F  3041               	movlw	65
  1143  0670  0AFA               	incf	_curLedCnt,f
  1144  0671  027A               	subwf	_curLedCnt,w
  1145  0672  1803               	btfsc	3,0
  1146                           
  1147                           ;main.c: 763: {
  1148                           ;main.c: 764: curLedCnt = 0;
  1149  0673  01FA               	clrf	_curLedCnt
  1150                           
  1151                           ;main.c: 765: }
  1152                           ;main.c: 766: if(redDuty <= curLedCnt)
  1153  0674  0855               	movf	_redDuty,w
  1154  0675  027A               	subwf	_curLedCnt,w
  1155  0676  1C03               	skipc
  1156  0677  2E7A               	goto	l2516
  1157                           
  1158                           ;main.c: 767: {
  1159                           ;main.c: 768: PORTA &= 0xEF;
  1160  0678  1205               	bcf	5,4	;volatile
  1161                           
  1162                           ;main.c: 769: }
  1163  0679  2E7B               	goto	l8690
  1164  067A                     l2516:	
  1165                           
  1166                           ;main.c: 770: else
  1167                           ;main.c: 771: {
  1168                           ;main.c: 772: PORTA |= 0x10;
  1169  067A  1605               	bsf	5,4	;volatile
  1170  067B                     l8690:	
  1171                           
  1172                           ;main.c: 773: }
  1173                           ;main.c: 774: PORTA = PORTA;
  1174  067B  0805               	movf	5,w	;volatile
  1175  067C  0085               	movwf	5	;volatile
  1176                           
  1177                           ;main.c: 775: if(greenDuty <= curLedCnt)
  1178  067D  0854               	movf	_greenDuty,w
  1179  067E  027A               	subwf	_curLedCnt,w
  1180  067F  1C03               	skipc
  1181  0680  2E83               	goto	l2518
  1182                           
  1183                           ;main.c: 776: {
  1184                           ;main.c: 777: PORTA &= 0xBF;
  1185  0681  1305               	bcf	5,6	;volatile
  1186                           
  1187                           ;main.c: 778: }
  1188  0682  2E84               	goto	l8694
  1189  0683                     l2518:	
  1190                           
  1191                           ;main.c: 779: else
  1192                           ;main.c: 780: {
  1193                           ;main.c: 781: PORTA |= 0x40;
  1194  0683  1705               	bsf	5,6	;volatile
  1195  0684                     l8694:	
  1196                           
  1197                           ;main.c: 782: }
  1198                           ;main.c: 783: PORTA = PORTA;
  1199  0684  0805               	movf	5,w	;volatile
  1200  0685  0085               	movwf	5	;volatile
  1201                           
  1202                           ;main.c: 784: if(blueDuty <= curLedCnt)
  1203  0686  0853               	movf	_blueDuty,w
  1204  0687  027A               	subwf	_curLedCnt,w
  1205  0688  1C03               	skipc
  1206  0689  2E8C               	goto	l2520
  1207                           
  1208                           ;main.c: 785: {
  1209                           ;main.c: 786: PORTA &= 0xDF;
  1210  068A  1285               	bcf	5,5	;volatile
  1211                           
  1212                           ;main.c: 787: }
  1213  068B  2E8D               	goto	l8698
  1214  068C                     l2520:	
  1215                           
  1216                           ;main.c: 788: else
  1217                           ;main.c: 789: {
  1218                           ;main.c: 790: PORTA |= 0x20;
  1219  068C  1685               	bsf	5,5	;volatile
  1220  068D                     l8698:	
  1221                           
  1222                           ;main.c: 791: }
  1223                           ;main.c: 792: PORTA = PORTA;
  1224  068D  0805               	movf	5,w	;volatile
  1225  068E  0085               	movwf	5	;volatile
  1226                           
  1227                           ;main.c: 793: if(cRedDuty <= curLedCnt)
  1228  068F  0852               	movf	_cRedDuty,w
  1229  0690  027A               	subwf	_curLedCnt,w
  1230  0691  1C03               	skipc
  1231  0692  2E95               	goto	l2522
  1232                           
  1233                           ;main.c: 794: {
  1234                           ;main.c: 795: PORTA &= 0x7F;
  1235  0693  1385               	bcf	5,7	;volatile
  1236                           
  1237                           ;main.c: 796: }
  1238  0694  2E96               	goto	l8702
  1239  0695                     l2522:	
  1240                           
  1241                           ;main.c: 797: else
  1242                           ;main.c: 798: {
  1243                           ;main.c: 799: PORTA |= 0x80;
  1244  0695  1785               	bsf	5,7	;volatile
  1245  0696                     l8702:	
  1246                           
  1247                           ;main.c: 800: }
  1248                           ;main.c: 801: PORTA = PORTA;
  1249  0696  0805               	movf	5,w	;volatile
  1250  0697  0085               	movwf	5	;volatile
  1251                           
  1252                           ;main.c: 802: if(cGreenDuty <= curLedCnt)
  1253  0698  085E               	movf	_cGreenDuty,w
  1254  0699  027A               	subwf	_curLedCnt,w
  1255  069A  1C03               	skipc
  1256  069B  2E9E               	goto	l2524
  1257                           
  1258                           ;main.c: 803: {
  1259                           ;main.c: 804: PORTB &= 0xF7;
  1260  069C  1186               	bcf	6,3	;volatile
  1261                           
  1262                           ;main.c: 805: }
  1263  069D  2E9F               	goto	l8706
  1264  069E                     l2524:	
  1265                           
  1266                           ;main.c: 806: else
  1267                           ;main.c: 807: {
  1268                           ;main.c: 808: PORTB |= 0x08;
  1269  069E  1586               	bsf	6,3	;volatile
  1270  069F                     l8706:	
  1271                           
  1272                           ;main.c: 809: }
  1273                           ;main.c: 810: PORTB = PORTB;
  1274  069F  0806               	movf	6,w	;volatile
  1275  06A0  0086               	movwf	6	;volatile
  1276                           
  1277                           ;main.c: 811: if(cBlueDuty <= curLedCnt)
  1278  06A1  087B               	movf	_cBlueDuty,w
  1279  06A2  027A               	subwf	_curLedCnt,w
  1280  06A3  1C03               	skipc
  1281  06A4  2EA7               	goto	l2526
  1282                           
  1283                           ;main.c: 812: {
  1284                           ;main.c: 813: PORTB &= 0xFB;
  1285  06A5  1106               	bcf	6,2	;volatile
  1286                           
  1287                           ;main.c: 814: }
  1288  06A6  2EA8               	goto	l8710
  1289  06A7                     l2526:	
  1290                           
  1291                           ;main.c: 815: else
  1292                           ;main.c: 816: {
  1293                           ;main.c: 817: PORTB |= 0x04;
  1294  06A7  1506               	bsf	6,2	;volatile
  1295  06A8                     l8710:	
  1296                           
  1297                           ;main.c: 818: }
  1298                           ;main.c: 819: PORTB = PORTB;
  1299  06A8  0806               	movf	6,w	;volatile
  1300  06A9  0086               	movwf	6	;volatile
  1301  06AA  0008               	return
  1302  06AB                     __end_of_rgbShow:	
  1303                           
  1304                           	psect	text3
  1305  0390                     __ptext3:	
  1306 ;; *************** function _colorCtr *****************
  1307 ;; Defined at:
  1308 ;;		line 569 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;		None
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1317 ;; Tracked objects:
  1318 ;;		On entry : 300/0
  1319 ;;		On exit  : 300/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1322 ;;      Params:         0       0       0       0       0
  1323 ;;      Locals:         0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0
  1325 ;;      Totals:         0       0       0       0       0
  1326 ;;Total ram usage:        0 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    3
  1329 ;; This function calls:
  1330 ;;		_breathAddLed
  1331 ;;		_breathSubLed
  1332 ;;		_rainbow
  1333 ;;		_rainbow2
  1334 ;; This function is called by:
  1335 ;;		_main
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           
  1340                           ;psect for function _colorCtr
  1341  0390                     _colorCtr:	
  1342                           
  1343                           ;main.c: 572: if(++count2s > 3)
  1344                           
  1345                           ;incstack = 0
  1346                           ; Regs used in _colorCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1347  0390  3004               	movlw	4
  1348  0391  0ACF               	incf	_count2s,f
  1349  0392  024F               	subwf	_count2s,w
  1350  0393  1C03               	skipc
  1351  0394  2BA2               	goto	l8818
  1352  0395  3003               	movlw	3
  1353                           
  1354                           ;main.c: 573: {
  1355                           ;main.c: 574: count2s = 0;
  1356  0396  01CF               	clrf	_count2s
  1357                           
  1358                           ;main.c: 575: if(led2Step == 3)
  1359  0397  0656               	xorwf	_led2Step,w
  1360  0398  1D03               	btfss	3,2
  1361  0399  2B9C               	goto	l8814
  1362                           
  1363                           ;main.c: 576: {
  1364                           ;main.c: 577: rainbow2();
  1365  039A  2439  118A         	fcall	_rainbow2
  1366  039C                     l8814:	
  1367                           
  1368                           ;main.c: 578: }
  1369                           ;main.c: 579: if(led1Step == 3)
  1370  039C  3003               	movlw	3
  1371  039D  0657               	xorwf	_led1Step,w
  1372  039E  1D03               	btfss	3,2
  1373  039F  2BA2               	goto	l8818
  1374                           
  1375                           ;main.c: 580: {
  1376                           ;main.c: 581: rainbow();
  1377  03A0  23EE  118A         	fcall	_rainbow
  1378  03A2                     l8818:	
  1379                           
  1380                           ;main.c: 582: }
  1381                           ;main.c: 583: }
  1382                           ;main.c: 587: if(count2s < 125)
  1383  03A2  307D               	movlw	125
  1384  03A3  024F               	subwf	_count2s,w
  1385  03A4  1803               	skipnc
  1386  03A5  2BB8               	goto	l8832
  1387                           
  1388                           ;main.c: 588: {
  1389                           ;main.c: 589: if(led2Step == 1)
  1390  03A6  0B56               	decfsz	_led2Step,w
  1391  03A7  2BAE               	goto	l8826
  1392  03A8  305E               	movlw	(low (_cGreenDuty| 0))& (0+255)
  1393                           
  1394                           ;main.c: 590: {
  1395                           ;main.c: 591: cRedDuty = 0;
  1396  03A9  01D2               	clrf	_cRedDuty
  1397                           
  1398                           ;main.c: 592: cBlueDuty = 0;
  1399  03AA  01FB               	clrf	_cBlueDuty
  1400                           
  1401                           ;main.c: 593: breathAddLed(&cGreenDuty);
  1402  03AB  23D9  118A         	fcall	_breathAddLed
  1403                           
  1404                           ;main.c: 594: }
  1405  03AD  2BC7               	goto	l8844
  1406  03AE                     l8826:	
  1407                           
  1408                           ;main.c: 595: else if(led2Step == 2)
  1409  03AE  3002               	movlw	2
  1410  03AF  0656               	xorwf	_led2Step,w
  1411  03B0  1D03               	btfss	3,2
  1412  03B1  2BC7               	goto	l8844
  1413  03B2  307B               	movlw	(low (_cBlueDuty| 0))& (0+255)
  1414                           
  1415                           ;main.c: 596: {
  1416                           ;main.c: 597: cRedDuty = 0;
  1417  03B3  01D2               	clrf	_cRedDuty
  1418                           
  1419                           ;main.c: 598: cGreenDuty = 0;
  1420  03B4  01DE               	clrf	_cGreenDuty
  1421                           
  1422                           ;main.c: 599: breathAddLed(&cBlueDuty);
  1423  03B5  23D9  118A         	fcall	_breathAddLed
  1424  03B7  2BC7               	goto	l8844
  1425  03B8                     l8832:	
  1426                           
  1427                           ;main.c: 603: else
  1428                           ;main.c: 604: {
  1429                           ;main.c: 605: if(led2Step == 1)
  1430  03B8  0B56               	decfsz	_led2Step,w
  1431  03B9  2BBE               	goto	l8838
  1432  03BA  305E               	movlw	(low (_cGreenDuty| 0))& (0+255)
  1433                           
  1434                           ;main.c: 606: {
  1435                           ;main.c: 607: cRedDuty = 0;
  1436  03BB  01D2               	clrf	_cRedDuty
  1437                           
  1438                           ;main.c: 608: cBlueDuty = 0;
  1439  03BC  01FB               	clrf	_cBlueDuty
  1440                           
  1441                           ;main.c: 609: breathSubLed(&cGreenDuty);
  1442  03BD  2BC5               	goto	L1
  1443  03BE                     l8838:	
  1444                           ;main.c: 610: }
  1445                           
  1446                           
  1447                           ;main.c: 611: else if(led2Step == 2)
  1448  03BE  3002               	movlw	2
  1449  03BF  0656               	xorwf	_led2Step,w
  1450  03C0  1D03               	btfss	3,2
  1451  03C1  2BC7               	goto	l8844
  1452  03C2  307B               	movlw	(low (_cBlueDuty| 0))& (0+255)
  1453                           
  1454                           ;main.c: 612: {
  1455                           ;main.c: 613: cRedDuty = 0;
  1456  03C3  01D2               	clrf	_cRedDuty
  1457                           
  1458                           ;main.c: 614: cGreenDuty = 0;
  1459  03C4  01DE               	clrf	_cGreenDuty
  1460  03C5                     L1:	
  1461                           ;main.c: 615: breathSubLed(&cBlueDuty);
  1462                           
  1463  03C5  23E4  118A         	fcall	_breathSubLed
  1464  03C7                     l8844:	
  1465                           
  1466                           ;main.c: 616: }
  1467                           ;main.c: 618: }
  1468                           ;main.c: 622: if(led1Step == 1)
  1469  03C7  0B57               	decfsz	_led1Step,w
  1470  03C8  2BCE               	goto	l8850
  1471                           
  1472                           ;main.c: 623: {
  1473                           ;main.c: 624: redDuty = 0;
  1474  03C9  01D5               	clrf	_redDuty
  1475                           
  1476                           ;main.c: 625: greenDuty = 0;
  1477  03CA  01D4               	clrf	_greenDuty
  1478                           
  1479                           ;main.c: 626: blueDuty = 0;
  1480  03CB  01D3               	clrf	_blueDuty
  1481                           
  1482                           ;main.c: 627: PORTA |= 0x08;
  1483  03CC  1585               	bsf	5,3	;volatile
  1484                           
  1485                           ;main.c: 628: }
  1486  03CD  0008               	return
  1487  03CE                     l8850:	
  1488                           
  1489                           ;main.c: 629: else if(led1Step == 2)
  1490  03CE  3002               	movlw	2
  1491  03CF  0657               	xorwf	_led1Step,w
  1492  03D0  1D03               	btfss	3,2
  1493  03D1  0008               	return
  1494                           
  1495                           ;main.c: 630: {
  1496                           ;main.c: 631: redDuty = 46;
  1497  03D2  302E               	movlw	46
  1498  03D3  00D5               	movwf	_redDuty
  1499                           
  1500                           ;main.c: 632: greenDuty = 51;
  1501  03D4  3033               	movlw	51
  1502  03D5  00D4               	movwf	_greenDuty
  1503                           
  1504                           ;main.c: 633: blueDuty = 62;
  1505  03D6  303E               	movlw	62
  1506  03D7  00D3               	movwf	_blueDuty
  1507  03D8  0008               	return
  1508  03D9                     __end_of_colorCtr:	
  1509  03D9                     __ptext7:	
  1510 ;; *************** function _breathAddLed *****************
  1511 ;; Defined at:
  1512 ;;		line 744 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;  ledDuty         1    wreg     PTR unsigned char 
  1515 ;;		 -> cBlueDuty(1), cGreenDuty(1), 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  ledDuty         1    0[BANK0 ] PTR unsigned char 
  1518 ;;		 -> cBlueDuty(1), cGreenDuty(1), 
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  1    wreg      void 
  1521 ;; Registers used:
  1522 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1523 ;; Tracked objects:
  1524 ;;		On entry : 300/0
  1525 ;;		On exit  : B00/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1528 ;;      Params:         0       0       0       0       0
  1529 ;;      Locals:         0       1       0       0       0
  1530 ;;      Temps:          0       0       0       0       0
  1531 ;;      Totals:         0       1       0       0       0
  1532 ;;Total ram usage:        1 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; Hardware stack levels required when called:    2
  1535 ;; This function calls:
  1536 ;;		Nothing
  1537 ;; This function is called by:
  1538 ;;		_colorCtr
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           
  1543                           ;psect for function _breathAddLed
  1544  03D9                     _breathAddLed:	
  1545                           
  1546                           ;incstack = 0
  1547                           ; Regs used in _breathAddLed: [wreg-fsr0h+status,2+status,0]
  1548                           ;breathAddLed@ledDuty stored from wreg
  1549  03D9  00DF               	movwf	breathAddLed@ledDuty
  1550                           
  1551                           ;main.c: 746: if((*ledDuty) < 64)
  1552  03DA  0084               	movwf	4
  1553  03DB  3040               	movlw	64
  1554  03DC  1383               	bcf	3,7	;select IRP bank0
  1555  03DD  0200               	subwf	0,w
  1556  03DE  1803               	skipnc
  1557  03DF  0008               	return
  1558                           
  1559                           ;main.c: 747: {
  1560                           ;main.c: 748: (*ledDuty)++;
  1561  03E0  085F               	movf	breathAddLed@ledDuty,w
  1562  03E1  0084               	movwf	4
  1563  03E2  0A80               	incf	0,f
  1564  03E3  0008               	return
  1565  03E4                     __end_of_breathAddLed:	
  1566  03E4                     __ptext6:	
  1567 ;; *************** function _breathSubLed *****************
  1568 ;; Defined at:
  1569 ;;		line 752 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  1570 ;; Parameters:    Size  Location     Type
  1571 ;;  ledDuty         1    wreg     PTR unsigned char 
  1572 ;;		 -> cBlueDuty(1), cGreenDuty(1), 
  1573 ;; Auto vars:     Size  Location     Type
  1574 ;;  ledDuty         1    0[BANK0 ] PTR unsigned char 
  1575 ;;		 -> cBlueDuty(1), cGreenDuty(1), 
  1576 ;; Return value:  Size  Location     Type
  1577 ;;                  1    wreg      void 
  1578 ;; Registers used:
  1579 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1580 ;; Tracked objects:
  1581 ;;		On entry : 300/0
  1582 ;;		On exit  : B00/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1585 ;;      Params:         0       0       0       0       0
  1586 ;;      Locals:         0       1       0       0       0
  1587 ;;      Temps:          0       0       0       0       0
  1588 ;;      Totals:         0       1       0       0       0
  1589 ;;Total ram usage:        1 bytes
  1590 ;; Hardware stack levels used:    1
  1591 ;; Hardware stack levels required when called:    2
  1592 ;; This function calls:
  1593 ;;		Nothing
  1594 ;; This function is called by:
  1595 ;;		_colorCtr
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599                           
  1600                           ;psect for function _breathSubLed
  1601  03E4                     _breathSubLed:	
  1602                           
  1603                           ;incstack = 0
  1604                           ; Regs used in _breathSubLed: [wreg-fsr0h+status,2+status,0]
  1605                           ;breathSubLed@ledDuty stored from wreg
  1606  03E4  00DF               	movwf	breathSubLed@ledDuty
  1607                           
  1608                           ;main.c: 754: if((*ledDuty) > 0)
  1609  03E5  0084               	movwf	4
  1610  03E6  1383               	bcf	3,7	;select IRP bank0
  1611  03E7  0800               	movf	0,w
  1612  03E8  1903               	btfsc	3,2
  1613  03E9  0008               	return
  1614                           
  1615                           ;main.c: 755: {
  1616                           ;main.c: 756: (*ledDuty)--;
  1617  03EA  085F               	movf	breathSubLed@ledDuty,w
  1618  03EB  0084               	movwf	4
  1619  03EC  0380               	decf	0,f
  1620  03ED  0008               	return
  1621  03EE                     __end_of_breathSubLed:	
  1622  03EE                     __ptext5:	
  1623 ;; *************** function _rainbow *****************
  1624 ;; Defined at:
  1625 ;;		line 691 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;		None
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;		None
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		wreg, status,2, status,0
  1634 ;; Tracked objects:
  1635 ;;		On entry : 300/0
  1636 ;;		On exit  : 300/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1639 ;;      Params:         0       0       0       0       0
  1640 ;;      Locals:         0       0       0       0       0
  1641 ;;      Temps:          0       0       0       0       0
  1642 ;;      Totals:         0       0       0       0       0
  1643 ;;Total ram usage:        0 bytes
  1644 ;; Hardware stack levels used:    1
  1645 ;; Hardware stack levels required when called:    2
  1646 ;; This function calls:
  1647 ;;		Nothing
  1648 ;; This function is called by:
  1649 ;;		_colorCtr
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           
  1654                           ;psect for function _rainbow
  1655  03EE                     _rainbow:	
  1656                           
  1657                           ;main.c: 694: if(redDuty > lastRed)
  1658                           
  1659                           ;incstack = 0
  1660                           ; Regs used in _rainbow: [wreg+status,2+status,0]
  1661  03EE  0855               	movf	_redDuty,w
  1662  03EF  024D               	subwf	_lastRed,w
  1663  03F0  1C03               	btfss	3,0
  1664                           
  1665                           ;main.c: 695: redDuty--;
  1666  03F1  03D5               	decf	_redDuty,f
  1667                           
  1668                           ;main.c: 696: if(greenDuty > lastGreen)
  1669  03F2  0854               	movf	_greenDuty,w
  1670  03F3  024C               	subwf	_lastGreen,w
  1671  03F4  1C03               	btfss	3,0
  1672                           
  1673                           ;main.c: 697: greenDuty--;
  1674  03F5  03D4               	decf	_greenDuty,f
  1675                           
  1676                           ;main.c: 698: if(blueDuty > lastBlue)
  1677  03F6  0853               	movf	_blueDuty,w
  1678  03F7  024B               	subwf	_lastBlue,w
  1679  03F8  1C03               	btfss	3,0
  1680                           
  1681                           ;main.c: 699: blueDuty--;
  1682  03F9  03D3               	decf	_blueDuty,f
  1683                           
  1684                           ;main.c: 700: if(redDuty < lastRed)
  1685  03FA  084D               	movf	_lastRed,w
  1686  03FB  0255               	subwf	_redDuty,w
  1687  03FC  1C03               	btfss	3,0
  1688                           
  1689                           ;main.c: 701: redDuty++;
  1690  03FD  0AD5               	incf	_redDuty,f
  1691                           
  1692                           ;main.c: 702: if(greenDuty < lastGreen)
  1693  03FE  084C               	movf	_lastGreen,w
  1694  03FF  0254               	subwf	_greenDuty,w
  1695  0400  1C03               	btfss	3,0
  1696                           
  1697                           ;main.c: 703: greenDuty++;
  1698  0401  0AD4               	incf	_greenDuty,f
  1699                           
  1700                           ;main.c: 704: if(blueDuty < lastBlue)
  1701  0402  084B               	movf	_lastBlue,w
  1702  0403  0253               	subwf	_blueDuty,w
  1703  0404  1C03               	btfss	3,0
  1704                           
  1705                           ;main.c: 705: blueDuty++;
  1706  0405  0AD3               	incf	_blueDuty,f
  1707                           
  1708                           ;main.c: 706: if(delayTime > 0)
  1709  0406  084A               	movf	_delayTime,w
  1710  0407  1903               	btfsc	3,2
  1711  0408  2C0B               	goto	l8536
  1712                           
  1713                           ;main.c: 707: {
  1714                           ;main.c: 708: delayTime--;
  1715  0409  03CA               	decf	_delayTime,f
  1716  040A  0008               	return
  1717  040B                     l8536:	
  1718                           
  1719                           ;main.c: 710: }
  1720                           ;main.c: 711: if(mClorStep == 1)
  1721  040B  0B49               	decfsz	_mClorStep,w
  1722  040C  2C11               	goto	l8544
  1723                           
  1724                           ;main.c: 712: {
  1725                           ;main.c: 713: lastRed = 64;
  1726  040D  3040               	movlw	64
  1727  040E  00CD               	movwf	_lastRed
  1728                           
  1729                           ;main.c: 714: lastGreen = 0;
  1730  040F  01CC               	clrf	_lastGreen
  1731                           
  1732                           ;main.c: 717: }
  1733  0410  2C21               	goto	l8542
  1734  0411                     l8544:	
  1735                           
  1736                           ;main.c: 718: else if(mClorStep == 2)
  1737  0411  3002               	movlw	2
  1738  0412  0649               	xorwf	_mClorStep,w
  1739  0413  1D03               	btfss	3,2
  1740  0414  2C1A               	goto	l8550
  1741  0415  3040               	movlw	64
  1742                           
  1743                           ;main.c: 719: {
  1744                           ;main.c: 720: lastRed = 0;
  1745  0416  01CD               	clrf	_lastRed
  1746                           
  1747                           ;main.c: 721: lastGreen = 0;
  1748  0417  01CC               	clrf	_lastGreen
  1749                           
  1750                           ;main.c: 722: lastBlue = 64;
  1751  0418  00CB               	movwf	_lastBlue
  1752                           
  1753                           ;main.c: 723: }
  1754  0419  2C22               	goto	l2498
  1755  041A                     l8550:	
  1756                           
  1757                           ;main.c: 724: else if(mClorStep == 3)
  1758  041A  3003               	movlw	3
  1759  041B  0649               	xorwf	_mClorStep,w
  1760  041C  1D03               	btfss	3,2
  1761  041D  2C22               	goto	l2498
  1762  041E  3040               	movlw	64
  1763                           
  1764                           ;main.c: 725: {
  1765                           ;main.c: 726: lastRed = 0;
  1766  041F  01CD               	clrf	_lastRed
  1767                           
  1768                           ;main.c: 727: lastGreen = 64;
  1769  0420  00CC               	movwf	_lastGreen
  1770  0421                     l8542:	
  1771                           
  1772                           ;main.c: 715: lastBlue = 0;
  1773  0421  01CB               	clrf	_lastBlue
  1774  0422                     l2498:	
  1775                           
  1776                           ;main.c: 729: }
  1777                           ;main.c: 732: if(redDuty == lastRed && blueDuty == lastBlue && greenDuty == lastGreen)
  1778  0422  0855               	movf	_redDuty,w
  1779  0423  064D               	xorwf	_lastRed,w
  1780  0424  1D03               	skipz
  1781  0425  0008               	return
  1782  0426  0853               	movf	_blueDuty,w
  1783  0427  064B               	xorwf	_lastBlue,w
  1784  0428  1D03               	skipz
  1785  0429  0008               	return
  1786  042A  0854               	movf	_greenDuty,w
  1787  042B  064C               	xorwf	_lastGreen,w
  1788  042C  1D03               	skipz
  1789  042D  0008               	return
  1790                           
  1791                           ;main.c: 733: {
  1792                           ;main.c: 734: if(++mClorStep > 3)
  1793  042E  3004               	movlw	4
  1794  042F  0AC9               	incf	_mClorStep,f
  1795  0430  0249               	subwf	_mClorStep,w
  1796  0431  1803               	btfsc	3,0
  1797                           
  1798                           ;main.c: 735: {
  1799                           ;main.c: 736: mClorStep = 0;
  1800  0432  01C9               	clrf	_mClorStep
  1801                           
  1802                           ;main.c: 737: }
  1803                           ;main.c: 738: if(delayTime == 0)
  1804  0433  084A               	movf	_delayTime,w
  1805  0434  1D03               	btfss	3,2
  1806  0435  0008               	return
  1807                           
  1808                           ;main.c: 739: delayTime = 5;
  1809  0436  3005               	movlw	5
  1810  0437  00CA               	movwf	_delayTime
  1811  0438  0008               	return
  1812  0439                     __end_of_rainbow:	
  1813  0439                     __ptext4:	
  1814 ;; *************** function _rainbow2 *****************
  1815 ;; Defined at:
  1816 ;;		line 637 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;		None
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;		None
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, status,2, status,0
  1825 ;; Tracked objects:
  1826 ;;		On entry : 300/0
  1827 ;;		On exit  : 300/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1830 ;;      Params:         0       0       0       0       0
  1831 ;;      Locals:         0       0       0       0       0
  1832 ;;      Temps:          0       0       0       0       0
  1833 ;;      Totals:         0       0       0       0       0
  1834 ;;Total ram usage:        0 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    2
  1837 ;; This function calls:
  1838 ;;		Nothing
  1839 ;; This function is called by:
  1840 ;;		_colorCtr
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           
  1845                           ;psect for function _rainbow2
  1846  0439                     _rainbow2:	
  1847                           
  1848                           ;main.c: 640: if(cRedDuty > clastRed)
  1849                           
  1850                           ;incstack = 0
  1851                           ; Regs used in _rainbow2: [wreg+status,2+status,0]
  1852  0439  0852               	movf	_cRedDuty,w
  1853  043A  0247               	subwf	_clastRed,w
  1854  043B  1C03               	btfss	3,0
  1855                           
  1856                           ;main.c: 641: cRedDuty--;
  1857  043C  03D2               	decf	_cRedDuty,f
  1858                           
  1859                           ;main.c: 642: if(cGreenDuty > clastGreen)
  1860  043D  085E               	movf	_cGreenDuty,w
  1861  043E  0246               	subwf	_clastGreen,w
  1862  043F  1C03               	btfss	3,0
  1863                           
  1864                           ;main.c: 643: cGreenDuty--;
  1865  0440  03DE               	decf	_cGreenDuty,f
  1866                           
  1867                           ;main.c: 644: if(cBlueDuty > clastBlue)
  1868  0441  087B               	movf	_cBlueDuty,w
  1869  0442  0245               	subwf	_clastBlue,w
  1870  0443  1C03               	btfss	3,0
  1871                           
  1872                           ;main.c: 645: cBlueDuty--;
  1873  0444  03FB               	decf	_cBlueDuty,f
  1874                           
  1875                           ;main.c: 646: if(cRedDuty < clastRed)
  1876  0445  0847               	movf	_clastRed,w
  1877  0446  0252               	subwf	_cRedDuty,w
  1878  0447  1C03               	btfss	3,0
  1879                           
  1880                           ;main.c: 647: cRedDuty++;
  1881  0448  0AD2               	incf	_cRedDuty,f
  1882                           
  1883                           ;main.c: 648: if(cGreenDuty < clastGreen)
  1884  0449  0846               	movf	_clastGreen,w
  1885  044A  025E               	subwf	_cGreenDuty,w
  1886  044B  1C03               	btfss	3,0
  1887                           
  1888                           ;main.c: 649: cGreenDuty++;
  1889  044C  0ADE               	incf	_cGreenDuty,f
  1890                           
  1891                           ;main.c: 650: if(cBlueDuty < clastBlue)
  1892  044D  0845               	movf	_clastBlue,w
  1893  044E  027B               	subwf	_cBlueDuty,w
  1894  044F  1C03               	btfss	3,0
  1895                           
  1896                           ;main.c: 651: cBlueDuty++;
  1897  0450  0AFB               	incf	_cBlueDuty,f
  1898                           
  1899                           ;main.c: 652: if(cdelayTime > 0)
  1900  0451  0844               	movf	_cdelayTime,w
  1901  0452  1903               	btfsc	3,2
  1902  0453  2C56               	goto	l8472
  1903                           
  1904                           ;main.c: 653: {
  1905                           ;main.c: 654: cdelayTime--;
  1906  0454  03C4               	decf	_cdelayTime,f
  1907  0455  0008               	return
  1908  0456                     l8472:	
  1909                           
  1910                           ;main.c: 656: }
  1911                           ;main.c: 657: if(cClorStep == 1)
  1912  0456  0B43               	decfsz	_cClorStep,w
  1913  0457  2C5C               	goto	l8480
  1914                           
  1915                           ;main.c: 658: {
  1916                           ;main.c: 659: clastRed = 64;
  1917  0458  3040               	movlw	64
  1918  0459  00C7               	movwf	_clastRed
  1919                           
  1920                           ;main.c: 660: clastGreen = 0;
  1921  045A  01C6               	clrf	_clastGreen
  1922                           
  1923                           ;main.c: 663: }
  1924  045B  2C6C               	goto	l8478
  1925  045C                     l8480:	
  1926                           
  1927                           ;main.c: 664: else if(cClorStep == 2)
  1928  045C  3002               	movlw	2
  1929  045D  0643               	xorwf	_cClorStep,w
  1930  045E  1D03               	btfss	3,2
  1931  045F  2C65               	goto	l8486
  1932  0460  3040               	movlw	64
  1933                           
  1934                           ;main.c: 665: {
  1935                           ;main.c: 666: clastRed = 0;
  1936  0461  01C7               	clrf	_clastRed
  1937                           
  1938                           ;main.c: 667: clastGreen = 0;
  1939  0462  01C6               	clrf	_clastGreen
  1940                           
  1941                           ;main.c: 668: clastBlue = 64;
  1942  0463  00C5               	movwf	_clastBlue
  1943                           
  1944                           ;main.c: 669: }
  1945  0464  2C6D               	goto	l2480
  1946  0465                     l8486:	
  1947                           
  1948                           ;main.c: 670: else if(cClorStep == 3)
  1949  0465  3003               	movlw	3
  1950  0466  0643               	xorwf	_cClorStep,w
  1951  0467  1D03               	btfss	3,2
  1952  0468  2C6D               	goto	l2480
  1953  0469  3040               	movlw	64
  1954                           
  1955                           ;main.c: 671: {
  1956                           ;main.c: 672: clastRed = 0;
  1957  046A  01C7               	clrf	_clastRed
  1958                           
  1959                           ;main.c: 673: clastGreen = 64;
  1960  046B  00C6               	movwf	_clastGreen
  1961  046C                     l8478:	
  1962                           
  1963                           ;main.c: 661: clastBlue = 0;
  1964  046C  01C5               	clrf	_clastBlue
  1965  046D                     l2480:	
  1966                           
  1967                           ;main.c: 675: }
  1968                           ;main.c: 679: if(cRedDuty == clastRed && cBlueDuty == cBlueDuty && cGreenDuty == clastGr
      +                          een)
  1969  046D  0852               	movf	_cRedDuty,w
  1970  046E  0647               	xorwf	_clastRed,w
  1971  046F  1D03               	skipz
  1972  0470  0008               	return
  1973  0471  087B               	movf	_cBlueDuty,w
  1974  0472  067B               	xorwf	_cBlueDuty,w
  1975  0473  1D03               	skipz
  1976  0474  0008               	return
  1977  0475  085E               	movf	_cGreenDuty,w
  1978  0476  0646               	xorwf	_clastGreen,w
  1979  0477  1D03               	skipz
  1980  0478  0008               	return
  1981                           
  1982                           ;main.c: 680: {
  1983                           ;main.c: 681: if(++cClorStep > 3)
  1984  0479  3004               	movlw	4
  1985  047A  0AC3               	incf	_cClorStep,f
  1986  047B  0243               	subwf	_cClorStep,w
  1987  047C  1803               	btfsc	3,0
  1988                           
  1989                           ;main.c: 682: {
  1990                           ;main.c: 683: cClorStep = 0;
  1991  047D  01C3               	clrf	_cClorStep
  1992                           
  1993                           ;main.c: 684: }
  1994                           ;main.c: 685: if(cdelayTime == 0)
  1995  047E  0844               	movf	_cdelayTime,w
  1996  047F  1D03               	btfss	3,2
  1997  0480  0008               	return
  1998                           
  1999                           ;main.c: 686: cdelayTime = 5;
  2000  0481  3005               	movlw	5
  2001  0482  00C4               	movwf	_cdelayTime
  2002  0483  0008               	return
  2003  0484                     __end_of_rainbow2:	
  2004                           
  2005                           	psect	text8
  2006  0FF7                     __ptext8:	
  2007 ;; *************** function _closePWM *****************
  2008 ;; Defined at:
  2009 ;;		line 491 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;		None
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;		None
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      void 
  2016 ;; Registers used:
  2017 ;;		status,2
  2018 ;; Tracked objects:
  2019 ;;		On entry : 300/0
  2020 ;;		On exit  : 300/200
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2023 ;;      Params:         0       0       0       0       0
  2024 ;;      Locals:         0       0       0       0       0
  2025 ;;      Temps:          0       0       0       0       0
  2026 ;;      Totals:         0       0       0       0       0
  2027 ;;Total ram usage:        0 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:    2
  2030 ;; This function calls:
  2031 ;;		Nothing
  2032 ;; This function is called by:
  2033 ;;		_main
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036                           
  2037                           
  2038                           ;psect for function _closePWM
  2039  0FF7                     _closePWM:	
  2040                           
  2041                           ;main.c: 493: PWMD1L = 0;
  2042                           
  2043                           ;incstack = 0
  2044                           ; Regs used in _closePWM: [status,2]
  2045  0FF7  1683               	bsf	3,5	;RP0=1, select bank3
  2046  0FF8  1703               	bsf	3,6	;RP1=1, select bank3
  2047  0FF9  0194               	clrf	20	;volatile
  2048                           
  2049                           ;main.c: 494: PWMD01H = 0x00;
  2050  0FFA  1283               	bcf	3,5	;RP0=0, select bank2
  2051  0FFB  019C               	clrf	28	;volatile
  2052                           
  2053                           ;main.c: 495: PWMCON2 = 0B00000000;
  2054  0FFC  0189               	clrf	9	;volatile
  2055                           
  2056                           ;main.c: 496: PWMCON1 = 0B00000000;
  2057  0FFD  0188               	clrf	8	;volatile
  2058                           
  2059                           ;main.c: 497: PWMCON0 = 0B00000000;
  2060  0FFE  0187               	clrf	7	;volatile
  2061  0FFF  0008               	return
  2062  1000                     __end_of_closePWM:	
  2063                           
  2064                           	psect	text9
  2065  076E                     __ptext9:	
  2066 ;; *************** function _checkVoll *****************
  2067 ;; Defined at:
  2068 ;;		line 542 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  2069 ;; Parameters:    Size  Location     Type
  2070 ;;		None
  2071 ;; Auto vars:     Size  Location     Type
  2072 ;;		None
  2073 ;; Return value:  Size  Location     Type
  2074 ;;                  1    wreg      void 
  2075 ;; Registers used:
  2076 ;;		wreg, status,2, status,0
  2077 ;; Tracked objects:
  2078 ;;		On entry : 300/200
  2079 ;;		On exit  : 300/0
  2080 ;;		Unchanged: 0/0
  2081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2082 ;;      Params:         0       0       0       0       0
  2083 ;;      Locals:         0       0       0       0       0
  2084 ;;      Temps:          0       0       0       0       0
  2085 ;;      Totals:         0       0       0       0       0
  2086 ;;Total ram usage:        0 bytes
  2087 ;; Hardware stack levels used:    1
  2088 ;; Hardware stack levels required when called:    2
  2089 ;; This function calls:
  2090 ;;		Nothing
  2091 ;; This function is called by:
  2092 ;;		_main
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           
  2097                           ;psect for function _checkVoll
  2098  076E                     _checkVoll:	
  2099                           
  2100                           ;main.c: 544: if(AD_Result > 182)
  2101                           
  2102                           ;incstack = 0
  2103                           ; Regs used in _checkVoll: [wreg+status,2+status,0]
  2104  076E  3000               	movlw	0
  2105  076F  1303               	bcf	3,6	;RP1=0, select bank0
  2106  0770  022F               	subwf	_AD_Result+1,w	;volatile
  2107  0771  30B7               	movlw	183
  2108  0772  1903               	skipnz
  2109  0773  022E               	subwf	_AD_Result,w	;volatile
  2110  0774  1C03               	skipc
  2111  0775  2F82               	goto	l8796
  2112                           
  2113                           ;main.c: 545: {
  2114                           ;main.c: 546: if(++addTime > 5)
  2115  0776  3006               	movlw	6
  2116  0777  0ADB               	incf	_addTime,f	;volatile
  2117  0778  025B               	subwf	_addTime,w	;volatile
  2118  0779  1C03               	skipc
  2119  077A  2F80               	goto	l8794
  2120                           
  2121                           ;main.c: 547: {
  2122                           ;main.c: 548: addTime = 0;
  2123  077B  01DB               	clrf	_addTime	;volatile
  2124                           
  2125                           ;main.c: 549: if(currDuty > 1)
  2126  077C  3002               	movlw	2
  2127  077D  025C               	subwf	_currDuty,w	;volatile
  2128  077E  1803               	btfsc	3,0
  2129                           
  2130                           ;main.c: 550: {
  2131                           ;main.c: 551: currDuty--;
  2132  077F  03DC               	decf	_currDuty,f	;volatile
  2133  0780                     l8794:	
  2134                           
  2135                           ;main.c: 552: }
  2136                           ;main.c: 553: }
  2137                           ;main.c: 554: subTime = 0;
  2138  0780  01DA               	clrf	_subTime	;volatile
  2139                           
  2140                           ;main.c: 555: }
  2141  0781  0008               	return
  2142  0782                     l8796:	
  2143                           
  2144                           ;main.c: 556: else if(AD_Result < 166)
  2145  0782  3000               	movlw	0
  2146  0783  022F               	subwf	_AD_Result+1,w	;volatile
  2147  0784  30A6               	movlw	166
  2148  0785  1903               	skipnz
  2149  0786  022E               	subwf	_AD_Result,w	;volatile
  2150  0787  1803               	skipnc
  2151  0788  0008               	return
  2152                           
  2153                           ;main.c: 557: {
  2154                           ;main.c: 558: if(++subTime > 5)
  2155  0789  3006               	movlw	6
  2156  078A  0ADA               	incf	_subTime,f	;volatile
  2157  078B  025A               	subwf	_subTime,w	;volatile
  2158  078C  1C03               	skipc
  2159  078D  2F93               	goto	l8804
  2160                           
  2161                           ;main.c: 559: {
  2162                           ;main.c: 560: if(currDuty < 74)
  2163  078E  304A               	movlw	74
  2164  078F  025C               	subwf	_currDuty,w	;volatile
  2165  0790  1803               	skipnc
  2166  0791  2F93               	goto	l8804
  2167                           
  2168                           ;main.c: 561: {
  2169                           ;main.c: 562: currDuty++;
  2170  0792  0ADC               	incf	_currDuty,f	;volatile
  2171  0793                     l8804:	
  2172                           
  2173                           ;main.c: 563: }
  2174                           ;main.c: 564: }
  2175                           ;main.c: 565: addTime = 0;
  2176  0793  01DB               	clrf	_addTime	;volatile
  2177  0794  0008               	return
  2178  0795                     __end_of_checkVoll:	
  2179                           
  2180                           	psect	text10
  2181  0716                     __ptext10:	
  2182 ;; *************** function _checkLed *****************
  2183 ;; Defined at:
  2184 ;;		line 309 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;		None
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;		None
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  1    wreg      void 
  2191 ;; Registers used:
  2192 ;;		wreg, status,2, status,0
  2193 ;; Tracked objects:
  2194 ;;		On entry : 300/0
  2195 ;;		On exit  : 300/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2198 ;;      Params:         0       0       0       0       0
  2199 ;;      Locals:         0       0       0       0       0
  2200 ;;      Temps:          0       0       0       0       0
  2201 ;;      Totals:         0       0       0       0       0
  2202 ;;Total ram usage:        0 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; Hardware stack levels required when called:    2
  2205 ;; This function calls:
  2206 ;;		Nothing
  2207 ;; This function is called by:
  2208 ;;		_main
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           
  2213                           ;psect for function _checkLed
  2214  0716                     _checkLed:	
  2215                           
  2216                           ;main.c: 311: if(startTime > 0)
  2217                           
  2218                           ;incstack = 0
  2219                           ; Regs used in _checkLed: [wreg+status,2+status,0]
  2220  0716  0850               	movf	_startTime,w
  2221  0717  1903               	btfsc	3,2
  2222  0718  0008               	return
  2223                           
  2224                           ;main.c: 312: {
  2225                           ;main.c: 313: if(startTime > 150)
  2226  0719  3097               	movlw	151
  2227  071A  0250               	subwf	_startTime,w
  2228  071B  1C03               	skipc
  2229  071C  2F25               	goto	l8898
  2230                           
  2231                           ;main.c: 314: {
  2232                           ;main.c: 315: redDuty = 64;
  2233  071D  3040               	movlw	64
  2234  071E  00D5               	movwf	_redDuty
  2235  071F  3040               	movlw	64
  2236                           
  2237                           ;main.c: 316: greenDuty = 0;
  2238  0720  01D4               	clrf	_greenDuty
  2239  0721  01D3               	clrf	_blueDuty
  2240                           
  2241                           ;main.c: 318: cRedDuty = 64;
  2242  0722  00D2               	movwf	_cRedDuty
  2243                           
  2244                           ;main.c: 319: cGreenDuty = 0;
  2245  0723  01DE               	clrf	_cGreenDuty
  2246  0724  2F30               	goto	L2
  2247  0725                     l8898:	
  2248                           ;main.c: 322: }
  2249                           
  2250                           ;main.c: 320: cBlueDuty = 0;
  2251                           
  2252                           
  2253                           ;main.c: 323: else if(startTime > 100)
  2254  0725  3065               	movlw	101
  2255  0726  0250               	subwf	_startTime,w
  2256  0727  1C03               	skipc
  2257  0728  2F32               	goto	l8910
  2258  0729  3040               	movlw	64
  2259                           
  2260                           ;main.c: 324: {
  2261                           ;main.c: 325: redDuty = 0;
  2262  072A  01D5               	clrf	_redDuty
  2263                           
  2264                           ;main.c: 326: greenDuty = 64;
  2265  072B  00D4               	movwf	_greenDuty
  2266  072C  3040               	movlw	64
  2267                           
  2268                           ;main.c: 327: blueDuty = 0;
  2269  072D  01D3               	clrf	_blueDuty
  2270                           
  2271                           ;main.c: 328: cRedDuty = 0;
  2272  072E  01D2               	clrf	_cRedDuty
  2273                           
  2274                           ;main.c: 329: cGreenDuty = 64;
  2275  072F  00DE               	movwf	_cGreenDuty
  2276  0730                     L2:	
  2277                           
  2278                           ;main.c: 330: cBlueDuty = 0;
  2279  0730  01FB               	clrf	_cBlueDuty
  2280                           
  2281                           ;main.c: 331: }
  2282  0731  2F40               	goto	l8922
  2283  0732                     l8910:	
  2284                           
  2285                           ;main.c: 332: else if(startTime > 50)
  2286  0732  3033               	movlw	51
  2287  0733  0250               	subwf	_startTime,w
  2288  0734  1C03               	skipc
  2289  0735  2F3F               	goto	l2388
  2290  0736  3040               	movlw	64
  2291                           
  2292                           ;main.c: 333: {
  2293                           ;main.c: 334: redDuty = 0;
  2294  0737  01D5               	clrf	_redDuty
  2295                           
  2296                           ;main.c: 335: greenDuty = 0;
  2297  0738  01D4               	clrf	_greenDuty
  2298                           
  2299                           ;main.c: 336: blueDuty = 64;
  2300  0739  00D3               	movwf	_blueDuty
  2301  073A  3040               	movlw	64
  2302                           
  2303                           ;main.c: 337: cRedDuty = 0;
  2304  073B  01D2               	clrf	_cRedDuty
  2305                           
  2306                           ;main.c: 338: cGreenDuty = 0;
  2307  073C  01DE               	clrf	_cGreenDuty
  2308                           
  2309                           ;main.c: 339: cBlueDuty = 64;
  2310  073D  00FB               	movwf	_cBlueDuty
  2311                           
  2312                           ;main.c: 340: }
  2313  073E  2F40               	goto	l8922
  2314  073F                     l2388:	
  2315                           
  2316                           ;main.c: 341: else
  2317                           ;main.c: 342: {
  2318                           ;main.c: 343: PORTA |= 0x08;
  2319  073F  1585               	bsf	5,3	;volatile
  2320  0740                     l8922:	
  2321                           
  2322                           ;main.c: 344: }
  2323                           ;main.c: 345: startTime--;
  2324  0740  03D0               	decf	_startTime,f
  2325  0741  0008               	return
  2326  0742                     __end_of_checkLed:	
  2327                           
  2328                           	psect	text11
  2329  06E4                     __ptext11:	
  2330 ;; *************** function _Sys_set *****************
  2331 ;; Defined at:
  2332 ;;		line 132 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;		None
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;		None
  2337 ;; Return value:  Size  Location     Type
  2338 ;;                  1    wreg      void 
  2339 ;; Registers used:
  2340 ;;		wreg, status,2, status,0
  2341 ;; Tracked objects:
  2342 ;;		On entry : 300/0
  2343 ;;		On exit  : 300/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2346 ;;      Params:         0       0       0       0       0
  2347 ;;      Locals:         0       0       0       0       0
  2348 ;;      Temps:          0       0       0       0       0
  2349 ;;      Totals:         0       0       0       0       0
  2350 ;;Total ram usage:        0 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    2
  2353 ;; This function calls:
  2354 ;;		Nothing
  2355 ;; This function is called by:
  2356 ;;		_main
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           
  2361                           ;psect for function _Sys_set
  2362  06E4                     _Sys_set:	
  2363                           
  2364                           ;incstack = 0
  2365                           ; Regs used in _Sys_set: [wreg+status,2+status,0]
  2366  06E4  0064               	clrwdt	;# 
  2367                           
  2368                           ;main.c: 135: WDTCON = 0x01;
  2369  06E5  3001               	movlw	1
  2370  06E6  1283               	bcf	3,5	;RP0=0, select bank2
  2371                           
  2372                           ;main.c: 136: TRISA = 0x06;
  2373                           
  2374                           ;main.c: 137: TRISB = 0x11;
  2375                           
  2376                           ;main.c: 138: OPTION_REG = 0;
  2377  06E7  270C  118A         	fcall	PL6	;call to abstracted procedure
  2378                           
  2379                           ;main.c: 139: PIE1 = 0B00000010;
  2380  06E9  3002               	movlw	2
  2381  06EA  008C               	movwf	12	;volatile
  2382                           
  2383                           ;main.c: 140: PR2 = 50;
  2384  06EB  3032               	movlw	50
  2385  06EC  0092               	movwf	18	;volatile
  2386                           
  2387                           ;main.c: 141: INTCON = 0XC0;
  2388  06ED  30C0               	movlw	192
  2389  06EE  008B               	movwf	11	;volatile
  2390                           
  2391                           ;main.c: 142: if(5 != T2CON)
  2392  06EF  3005               	movlw	5
  2393  06F0  1283               	bcf	3,5	;RP0=0, select bank0
  2394  06F1  0612               	xorwf	18,w	;volatile
  2395  06F2  1903               	btfsc	3,2
  2396  06F3  0008               	return
  2397                           
  2398                           ;main.c: 143: T2CON = 5;
  2399  06F4  3005               	movlw	5
  2400  06F5  0092               	movwf	18	;volatile
  2401  06F6  0008               	return
  2402  06F7                     __end_of_Sys_set:	
  2403  06F7                     __ptext29:	
  2404 ;; *************** function _Init_ic *****************
  2405 ;; Defined at:
  2406 ;;		line 93 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.
      +4M - ¸±±¾\main.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;		None
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;		None
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      void 
  2413 ;; Registers used:
  2414 ;;		wreg, status,2
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 300/100
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2420 ;;      Params:         0       0       0       0       0
  2421 ;;      Locals:         0       0       0       0       0
  2422 ;;      Temps:          0       0       0       0       0
  2423 ;;      Totals:         0       0       0       0       0
  2424 ;;Total ram usage:        0 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    2
  2427 ;; This function calls:
  2428 ;;		Nothing
  2429 ;; This function is called by:
  2430 ;;		_main
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           
  2435                           ;psect for function _Init_ic
  2436  06F7                     _Init_ic:	
  2437                           
  2438                           ;main.c: 95: PORTA = 0;
  2439                           
  2440                           ;incstack = 0
  2441                           ; Regs used in _Init_ic: [wreg+status,2]
  2442  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  2443  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  2444  06F9  0185               	clrf	5	;volatile
  2445                           
  2446                           ;main.c: 96: PORTB = 0;
  2447  06FA  0186               	clrf	6	;volatile
  2448                           
  2449                           ;main.c: 97: INTCON = 0xC0;
  2450  06FB  30C0               	movlw	192
  2451  06FC  008B               	movwf	11	;volatile
  2452                           
  2453                           ;main.c: 98: PIR1 = 0;
  2454  06FD  018C               	clrf	12	;volatile
  2455                           
  2456                           ;main.c: 99: PIR2 = 0;
  2457  06FE  018D               	clrf	13	;volatile
  2458                           
  2459                           ;main.c: 100: WDTCON = 0x01;
  2460  06FF  3001               	movlw	1
  2461                           
  2462                           ;main.c: 101: TRISA = 0x06;
  2463                           
  2464                           ;main.c: 102: TRISB = 0x11;
  2465                           
  2466                           ;main.c: 103: OPTION_REG = 0;
  2467  0700  270C               	fcall	PL6	;call to abstracted procedure
  2468                           
  2469                           ;main.c: 104: OSCCON = 0x71;
  2470  0701  3071               	movlw	113
  2471  0702  008F               	movwf	15	;volatile
  2472                           
  2473                           ;main.c: 105: PIE1 = 0;
  2474  0703  018C               	clrf	12	;volatile
  2475                           
  2476                           ;main.c: 106: PIE2 = 0;
  2477  0704  018D               	clrf	13	;volatile
  2478                           
  2479                           ;main.c: 107: IOCB = 0;
  2480  0705  0196               	clrf	22	;volatile
  2481                           
  2482                           ;main.c: 108: WPUA = 0x20;
  2483  0706  3020               	movlw	32
  2484  0707  1703               	bsf	3,6	;RP1=1, select bank3
  2485  0708  008E               	movwf	14	;volatile
  2486                           
  2487                           ;main.c: 109: WPUB = 0;
  2488  0709  1303               	bcf	3,6	;RP1=0, select bank1
  2489  070A  0195               	clrf	21	;volatile
  2490  070B  0008               	return
  2491  070C                     __end_of_Init_ic:	
  2492  070C                     PL6:	
  2493  070C  1703               	bsf	3,6	;RP1=1, select bank2
  2494  070D  0085               	movwf	5	;volatile
  2495  070E  3006               	movlw	6
  2496  070F  1683               	bsf	3,5	;RP0=1, select bank1
  2497  0710  1303               	bcf	3,6	;RP1=0, select bank1
  2498  0711  0085               	movwf	5	;volatile
  2499  0712  3011               	movlw	17
  2500  0713  0086               	movwf	6	;volatile
  2501  0714  0181               	clrf	1	;volatile
  2502  0715  0008               	return
  2503  0716                     __end_ofPL6:	
  2504                           
  2505                           	psect	text12
  2506  0FE8                     __ptext12:	
  2507 ;; *************** function _Set_Work *****************
  2508 ;; Defined at:
  2509 ;;		line 169 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  2510 ;; Parameters:    Size  Location     Type
  2511 ;;		None
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;		None
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  1    wreg      void 
  2516 ;; Registers used:
  2517 ;;		None
  2518 ;; Tracked objects:
  2519 ;;		On entry : 300/0
  2520 ;;		On exit  : 300/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2523 ;;      Params:         0       0       0       0       0
  2524 ;;      Locals:         0       0       0       0       0
  2525 ;;      Temps:          0       0       0       0       0
  2526 ;;      Totals:         0       0       0       0       0
  2527 ;;Total ram usage:        0 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; Hardware stack levels required when called:    2
  2530 ;; This function calls:
  2531 ;;		Nothing
  2532 ;; This function is called by:
  2533 ;;		_main
  2534 ;; This function uses a non-reentrant model
  2535 ;;
  2536                           
  2537                           
  2538                           ;psect for function _Set_Work
  2539  0FE8                     _Set_Work:	
  2540                           
  2541                           ;main.c: 171: if(errf)
  2542                           
  2543                           ;incstack = 0
  2544                           ; Regs used in _Set_Work: []
  2545  0FE8  1FF1               	btfss	_errf/(0+8),_errf& (0+7)	;volatile
  2546  0FE9  0008               	return
  2547                           
  2548                           ;main.c: 172: {
  2549                           ;main.c: 173: errf = 0;
  2550  0FEA  13F1               	bcf	_errf/(0+8),_errf& (0+7)	;volatile
  2551                           
  2552                           ;main.c: 174: onoff = 0;
  2553  0FEB  12F1               	bcf	_onoff/(0+8),_onoff& (0+7)	;volatile
  2554                           
  2555                           ;main.c: 175: ganshaoFlag = 1;
  2556  0FEC  01C8               	clrf	_ganshaoFlag
  2557  0FED  0AC8               	incf	_ganshaoFlag,f
  2558  0FEE  0008               	return
  2559  0FEF                     __end_of_Set_Work:	
  2560                           
  2561                           	psect	text13
  2562  07D4                     __ptext13:	
  2563 ;; *************** function _Set_Usart_Async *****************
  2564 ;; Defined at:
  2565 ;;		line 832 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;		None
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;		None
  2570 ;; Return value:  Size  Location     Type
  2571 ;;                  1    wreg      void 
  2572 ;; Registers used:
  2573 ;;		wreg
  2574 ;; Tracked objects:
  2575 ;;		On entry : 300/0
  2576 ;;		On exit  : 300/100
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2579 ;;      Params:         0       0       0       0       0
  2580 ;;      Locals:         0       0       0       0       0
  2581 ;;      Temps:          0       0       0       0       0
  2582 ;;      Totals:         0       0       0       0       0
  2583 ;;Total ram usage:        0 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    2
  2586 ;; This function calls:
  2587 ;;		Nothing
  2588 ;; This function is called by:
  2589 ;;		_main
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           
  2594                           ;psect for function _Set_Usart_Async
  2595  07D4                     _Set_Usart_Async:	
  2596                           
  2597                           ;main.c: 834: SPBRG = 95;
  2598                           
  2599                           ;incstack = 0
  2600                           ; Regs used in _Set_Usart_Async: [wreg]
  2601  07D4  305F               	movlw	95
  2602  07D5  1683               	bsf	3,5	;RP0=1, select bank1
  2603  07D6  0099               	movwf	25	;volatile
  2604                           
  2605                           ;main.c: 836: SYNC = 0;
  2606  07D7  1218               	bcf	24,4	;volatile
  2607                           
  2608                           ;main.c: 837: SCKP = 0;
  2609  07D8  1198               	bcf	24,3	;volatile
  2610                           
  2611                           ;main.c: 839: SPEN = 1;
  2612  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  2613  07DA  1798               	bsf	24,7	;volatile
  2614                           
  2615                           ;main.c: 840: RCIE = 1;
  2616  07DB  1683               	bsf	3,5	;RP0=1, select bank1
  2617  07DC  168C               	bsf	12,5	;volatile
  2618                           
  2619                           ;main.c: 841: TXIE = 0;
  2620  07DD  120C               	bcf	12,4	;volatile
  2621                           
  2622                           ;main.c: 842: RX9EN = 0;
  2623  07DE  1283               	bcf	3,5	;RP0=0, select bank0
  2624  07DF  1318               	bcf	24,6	;volatile
  2625                           
  2626                           ;main.c: 843: TX9EN = 0;
  2627  07E0  1683               	bsf	3,5	;RP0=1, select bank1
  2628  07E1  1318               	bcf	24,6	;volatile
  2629                           
  2630                           ;main.c: 844: CREN = 1;
  2631  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  2632  07E3  1618               	bsf	24,4	;volatile
  2633                           
  2634                           ;main.c: 845: TXEN = 1;
  2635  07E4  1683               	bsf	3,5	;RP0=1, select bank1
  2636  07E5  1698               	bsf	24,5	;volatile
  2637  07E6  0008               	return
  2638  07E7                     __end_of_Set_Usart_Async:	
  2639                           
  2640                           	psect	text14
  2641  07BB                     __ptext14:	
  2642 ;; *************** function _Set_CCP_PWM *****************
  2643 ;; Defined at:
  2644 ;;		line 470 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;		None
  2647 ;; Auto vars:     Size  Location     Type
  2648 ;;		None
  2649 ;; Return value:  Size  Location     Type
  2650 ;;                  1    wreg      void 
  2651 ;; Registers used:
  2652 ;;		wreg, status,2
  2653 ;; Tracked objects:
  2654 ;;		On entry : 300/0
  2655 ;;		On exit  : 300/200
  2656 ;;		Unchanged: 0/0
  2657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2658 ;;      Params:         0       0       0       0       0
  2659 ;;      Locals:         0       0       0       0       0
  2660 ;;      Temps:          0       0       0       0       0
  2661 ;;      Totals:         0       0       0       0       0
  2662 ;;Total ram usage:        0 bytes
  2663 ;; Hardware stack levels used:    1
  2664 ;; Hardware stack levels required when called:    2
  2665 ;; This function calls:
  2666 ;;		Nothing
  2667 ;; This function is called by:
  2668 ;;		_main
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           
  2673                           ;psect for function _Set_CCP_PWM
  2674  07BB                     _Set_CCP_PWM:	
  2675                           
  2676                           ;main.c: 472: PWMTL = 108;
  2677                           
  2678                           ;incstack = 0
  2679                           ; Regs used in _Set_CCP_PWM: [wreg+status,2]
  2680  07BB  306C               	movlw	108
  2681  07BC  1683               	bsf	3,5	;RP0=1, select bank3
  2682  07BD  1703               	bsf	3,6	;RP1=1, select bank3
  2683  07BE  008F               	movwf	15	;volatile
  2684                           
  2685                           ;main.c: 473: PWMTH = 0x00;
  2686  07BF  0190               	clrf	16	;volatile
  2687                           
  2688                           ;main.c: 474: PWMT4L = 0x00;
  2689  07C0  0191               	clrf	17	;volatile
  2690                           
  2691                           ;main.c: 478: PWMD1L = currDuty;
  2692  07C1  1283               	bcf	3,5	;RP0=0, select bank0
  2693  07C2  1303               	bcf	3,6	;RP1=0, select bank0
  2694  07C3  085C               	movf	_currDuty,w	;volatile
  2695  07C4  1683               	bsf	3,5	;RP0=1, select bank3
  2696  07C5  1703               	bsf	3,6	;RP1=1, select bank3
  2697  07C6  0094               	movwf	20	;volatile
  2698                           
  2699                           ;main.c: 479: PWMD01H = 0x00;
  2700  07C7  1283               	bcf	3,5	;RP0=0, select bank2
  2701  07C8  019C               	clrf	28	;volatile
  2702                           
  2703                           ;main.c: 482: PWM01DT = 0;
  2704  07C9  1683               	bsf	3,5	;RP0=1, select bank1
  2705  07CA  1303               	bcf	3,6	;RP1=0, select bank1
  2706  07CB  0193               	clrf	19	;volatile
  2707                           
  2708                           ;main.c: 483: PWM23DT = 0;
  2709  07CC  0194               	clrf	20	;volatile
  2710                           
  2711                           ;main.c: 485: PWMCON2 = 0B00000000;
  2712  07CD  1283               	bcf	3,5	;RP0=0, select bank2
  2713  07CE  1703               	bsf	3,6	;RP1=1, select bank2
  2714  07CF  0189               	clrf	9	;volatile
  2715                           
  2716                           ;main.c: 486: PWMCON1 = 0B00000000;
  2717  07D0  0188               	clrf	8	;volatile
  2718                           
  2719                           ;main.c: 487: PWMCON0 = 0B00000010;
  2720  07D1  3002               	movlw	2
  2721  07D2  0087               	movwf	7	;volatile
  2722  07D3  0008               	return
  2723  07D4                     __end_of_Set_CCP_PWM:	
  2724                           
  2725                           	psect	text15
  2726  0024                     __ptext15:	
  2727 ;; *************** function _Pwm_Test *****************
  2728 ;; Defined at:
  2729 ;;		line 152 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;		None
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  templ           1   15[BANK0 ] unsigned char 
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  1    wreg      void 
  2736 ;; Registers used:
  2737 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2738 ;; Tracked objects:
  2739 ;;		On entry : 300/0
  2740 ;;		On exit  : 300/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2743 ;;      Params:         0       0       0       0       0
  2744 ;;      Locals:         0       1       0       0       0
  2745 ;;      Temps:          0       0       0       0       0
  2746 ;;      Totals:         0       1       0       0       0
  2747 ;;Total ram usage:        1 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; Hardware stack levels required when called:    6
  2750 ;; This function calls:
  2751 ;;		_Test_Pwm
  2752 ;; This function is called by:
  2753 ;;		_main
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           
  2758                           ;psect for function _Pwm_Test
  2759  0024                     _Pwm_Test:	
  2760                           
  2761                           ;main.c: 154: unsigned char templ;
  2762                           ;main.c: 155: templ = Test_Pwm();
  2763                           
  2764                           ;incstack = 0
  2765                           ; Regs used in _Pwm_Test: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2766  0024  202F  118A         	fcall	_Test_Pwm
  2767  0026  00EE               	movwf	Pwm_Test@templ
  2768                           
  2769                           ;main.c: 157: if(0x55 == templ)
  2770  0027  3A55               	xorlw	85
  2771  0028  1D03               	btfss	3,2
  2772  0029  282C               	goto	l8654
  2773  002A                     l8652:	
  2774                           
  2775                           ;main.c: 158: errf = 1;
  2776  002A  17F1               	bsf	_errf/(0+8),_errf& (0+7)	;volatile
  2777  002B  0008               	return
  2778  002C                     l8654:	
  2779                           
  2780                           ;main.c: 159: else if(0xff == templ)
  2781  002C  0F6E               	incfsz	Pwm_Test@templ,w
  2782  002D  0008               	return
  2783  002E  282A               	goto	l8652
  2784  002F                     __end_of_Pwm_Test:	
  2785  002F                     __ptext16:	
  2786 ;; *************** function _Test_Pwm *****************
  2787 ;; Defined at:
  2788 ;;		line 736 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  2789 ;; Parameters:    Size  Location     Type
  2790 ;;		None
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;  templ           1   14[BANK0 ] unsigned char 
  2793 ;; Return value:  Size  Location     Type
  2794 ;;                  1    wreg      unsigned char 
  2795 ;; Registers used:
  2796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2797 ;; Tracked objects:
  2798 ;;		On entry : 300/0
  2799 ;;		On exit  : 300/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2802 ;;      Params:         0       0       0       0       0
  2803 ;;      Locals:         0       1       0       0       0
  2804 ;;      Temps:          0       4       0       0       0
  2805 ;;      Totals:         0       5       0       0       0
  2806 ;;Total ram usage:        5 bytes
  2807 ;; Hardware stack levels used:    1
  2808 ;; Hardware stack levels required when called:    5
  2809 ;; This function calls:
  2810 ;;		_Get_CUR_Dat
  2811 ;;		_PFG_read_fst
  2812 ;;		_Test_PWM_Fst
  2813 ;;		_Test_Pwm_Cur
  2814 ;;		_Test_water
  2815 ;;		_Work_RAM_CLR
  2816 ;;		_YTPFG_Flash
  2817 ;; This function is called by:
  2818 ;;		_Pwm_Test
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           
  2823                           ;psect for function _Test_Pwm
  2824  002F                     _Test_Pwm:	
  2825                           
  2826                           ;WHQ_TP_ZPGS_V1.2.c: 743: if(0 == pfgonetemp.pfgtemp)
  2827                           
  2828                           ;incstack = 0
  2829                           ; Regs used in _Test_Pwm: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2830  002F  0878               	movf	_pfgonetemp,w
  2831  0030  0479               	iorwf	_pfgonetemp+1,w
  2832  0031  1D03               	btfss	3,2
  2833  0032  2835               	goto	l5041
  2834                           
  2835                           ;WHQ_TP_ZPGS_V1.2.c: 744: {
  2836                           ;WHQ_TP_ZPGS_V1.2.c: 745: PFG_read_fst();
  2837  0033  22BA               	fcall	_PFG_read_fst
  2838                           
  2839                           ;WHQ_TP_ZPGS_V1.2.c: 746: }
  2840  0034  3400               	retlw	0
  2841  0035                     l5041:	
  2842                           
  2843                           ;WHQ_TP_ZPGS_V1.2.c: 748: else
  2844                           ;WHQ_TP_ZPGS_V1.2.c: 749: {
  2845                           ;WHQ_TP_ZPGS_V1.2.c: 750: if(!on_off)
  2846  0035  1A71               	btfsc	_on_off/(0+8),_on_off& (0+7)	;volatile
  2847  0036  283B               	goto	l5043
  2848                           
  2849                           ;WHQ_TP_ZPGS_V1.2.c: 751: {
  2850                           ;WHQ_TP_ZPGS_V1.2.c: 752: Work_RAM_CLR();
  2851  0037  2342               	fcall	_Work_RAM_CLR
  2852                           
  2853                           ;WHQ_TP_ZPGS_V1.2.c: 753: ondly = 0;
  2854  0038  1303               	bcf	3,6	;RP1=0, select bank0
  2855  0039  01B0               	clrf	Test_Pwm@ondly
  2856                           
  2857                           ;WHQ_TP_ZPGS_V1.2.c: 754: }
  2858  003A  3400               	retlw	0
  2859  003B                     l5043:	
  2860                           
  2861                           ;WHQ_TP_ZPGS_V1.2.c: 756: else
  2862                           ;WHQ_TP_ZPGS_V1.2.c: 757: {
  2863                           ;WHQ_TP_ZPGS_V1.2.c: 758: if(!onoff_fst)
  2864  003B  1AF0               	btfsc	_onoff_fst/(0+8),_onoff_fst& (0+7)	;volatile
  2865  003C  2847               	goto	l5045
  2866                           
  2867                           ;WHQ_TP_ZPGS_V1.2.c: 759: {
  2868                           ;WHQ_TP_ZPGS_V1.2.c: 760: if(++ondly >= 20)
  2869  003D  3014               	movlw	20
  2870  003E  0AB0               	incf	Test_Pwm@ondly,f
  2871  003F  0230               	subwf	Test_Pwm@ondly,w
  2872  0040  1C03               	skipc
  2873  0041  2856               	goto	l5047
  2874                           
  2875                           ;WHQ_TP_ZPGS_V1.2.c: 761: {
  2876                           ;WHQ_TP_ZPGS_V1.2.c: 762: ondly = 0;
  2877  0042  01B0               	clrf	Test_Pwm@ondly
  2878                           
  2879                           ;WHQ_TP_ZPGS_V1.2.c: 763: onoff_fst = 1;
  2880  0043  16F0               	bsf	_onoff_fst/(0+8),_onoff_fst& (0+7)	;volatile
  2881                           
  2882                           ;WHQ_TP_ZPGS_V1.2.c: 764: curokf = 0;
  2883  0044  13F0               	bcf	_curokf/(0+8),_curokf& (0+7)	;volatile
  2884                           
  2885                           ;WHQ_TP_ZPGS_V1.2.c: 765: curokf1 = 0;
  2886  0045  1070               	bcf	Test_Pwm@curokf1/(0+8),Test_Pwm@curokf1& (0+7)
  2887  0046  2856               	goto	l5047
  2888  0047                     l5045:	
  2889                           
  2890                           ;WHQ_TP_ZPGS_V1.2.c: 769: else
  2891                           ;WHQ_TP_ZPGS_V1.2.c: 770: {
  2892                           ;WHQ_TP_ZPGS_V1.2.c: 771: if(curokf)
  2893  0047  1FF0               	btfss	_curokf/(0+8),_curokf& (0+7)	;volatile
  2894  0048  2856               	goto	l5047
  2895                           
  2896                           ;WHQ_TP_ZPGS_V1.2.c: 772: {
  2897                           ;WHQ_TP_ZPGS_V1.2.c: 773: curokf = 0;
  2898  0049  13F0               	bcf	_curokf/(0+8),_curokf& (0+7)	;volatile
  2899                           
  2900                           ;WHQ_TP_ZPGS_V1.2.c: 774: Get_CUR_Dat();
  2901  004A  208D  118A         	fcall	_Get_CUR_Dat
  2902                           
  2903                           ;WHQ_TP_ZPGS_V1.2.c: 775: curokf1 = 1;
  2904  004C  1470               	bsf	Test_Pwm@curokf1/(0+8),Test_Pwm@curokf1& (0+7)
  2905                           
  2906                           ;WHQ_TP_ZPGS_V1.2.c: 777: {
  2907                           ;WHQ_TP_ZPGS_V1.2.c: 778: templ = Test_water();
  2908  004D  216A  118A         	fcall	_Test_water
  2909  004F  1283               	bcf	3,5	;RP0=0, select bank0
  2910  0050  00ED               	movwf	Test_Pwm@templ
  2911                           
  2912                           ;WHQ_TP_ZPGS_V1.2.c: 779: if(0 != templ)
  2913  0051  086D               	movf	Test_Pwm@templ,w
  2914  0052  1903               	btfsc	3,2
  2915  0053  2856               	goto	l5047
  2916  0054                     l8394:	
  2917                           
  2918                           ;WHQ_TP_ZPGS_V1.2.c: 780: {
  2919                           ;WHQ_TP_ZPGS_V1.2.c: 781: return templ;
  2920  0054  086D               	movf	Test_Pwm@templ,w
  2921  0055  0008               	return
  2922  0056                     l5047:	
  2923                           
  2924                           ;WHQ_TP_ZPGS_V1.2.c: 782: }
  2925                           ;WHQ_TP_ZPGS_V1.2.c: 783: }
  2926                           ;WHQ_TP_ZPGS_V1.2.c: 784: }
  2927                           ;WHQ_TP_ZPGS_V1.2.c: 785: }
  2928                           ;WHQ_TP_ZPGS_V1.2.c: 787: if(curokf1)
  2929  0056  1C70               	btfss	Test_Pwm@curokf1/(0+8),Test_Pwm@curokf1& (0+7)
  2930  0057  3400               	retlw	0
  2931                           
  2932                           ;WHQ_TP_ZPGS_V1.2.c: 790: if(pwmtf)
  2933  0058  1070               	bcf	Test_Pwm@curokf1/(0+8),Test_Pwm@curokf1& (0+7)
  2934                           
  2935                           ;WHQ_TP_ZPGS_V1.2.c: 795: }
  2936                           ;WHQ_TP_ZPGS_V1.2.c: 796: }
  2937                           ;WHQ_TP_ZPGS_V1.2.c: 797: if((!pwmtf) || (!pwmtf1))
  2938  0059  1DF1               	btfss	_pwmtf/(0+8),_pwmtf& (0+7)	;volatile
  2939  005A  285D               	goto	l8408
  2940  005B  1971               	btfsc	_pwmtf1/(0+8),_pwmtf1& (0+7)	;volatile
  2941  005C  2861               	goto	l5055
  2942  005D                     l8408:	
  2943                           
  2944                           ;WHQ_TP_ZPGS_V1.2.c: 798: {
  2945                           ;WHQ_TP_ZPGS_V1.2.c: 799: templ = Test_PWM_Fst();
  2946  005D  20C4  118A         	fcall	_Test_PWM_Fst
  2947  005F  00ED               	movwf	Test_Pwm@templ
  2948  0060  2854               	goto	l8394
  2949  0061                     l5055:	
  2950                           
  2951                           ;WHQ_TP_ZPGS_V1.2.c: 802: else
  2952                           ;WHQ_TP_ZPGS_V1.2.c: 803: {
  2953                           ;WHQ_TP_ZPGS_V1.2.c: 804: if(!ponecf)
  2954  0061  1871               	btfsc	_ponecf/(0+8),_ponecf& (0+7)	;volatile
  2955  0062  287E               	goto	l8426
  2956                           
  2957                           ;WHQ_TP_ZPGS_V1.2.c: 805: {
  2958                           ;WHQ_TP_ZPGS_V1.2.c: 806: if(++ponesec >= 125)
  2959  0063  307D               	movlw	125
  2960  0064  0ABE               	incf	_ponesec,f	;volatile
  2961  0065  023E               	subwf	_ponesec,w	;volatile
  2962  0066  1C03               	skipc
  2963  0067  3400               	retlw	0
  2964                           
  2965                           ;WHQ_TP_ZPGS_V1.2.c: 807: {
  2966                           ;WHQ_TP_ZPGS_V1.2.c: 808: ponesec = 0;
  2967  0068  01BE               	clrf	_ponesec	;volatile
  2968                           
  2969                           ;WHQ_TP_ZPGS_V1.2.c: 809: ondly = 0;
  2970  0069  01B0               	clrf	Test_Pwm@ondly
  2971                           
  2972                           ;WHQ_TP_ZPGS_V1.2.c: 810: ponecf = 1;
  2973  006A  1471               	bsf	_ponecf/(0+8),_ponecf& (0+7)	;volatile
  2974                           
  2975                           ;WHQ_TP_ZPGS_V1.2.c: 811: pfgonetemp.pfgtemp = (pfgonetemp.pfgtemp & 0xfc00) + (pwmnold 
      +                          & 0x03ff);
  2976  006B  0824               	movf	_pwmnold,w	;volatile
  2977  006C  00E9               	movwf	??_Test_Pwm
  2978  006D  3003               	movlw	3
  2979  006E  0525               	andwf	_pwmnold+1,w	;volatile
  2980  006F  00EA               	movwf	??_Test_Pwm+1
  2981  0070  30FC               	movlw	252
  2982  0071  01EB               	clrf	??_Test_Pwm+2
  2983  0072  0579               	andwf	_pfgonetemp+1,w
  2984  0073  00EC               	movwf	??_Test_Pwm+3
  2985  0074  0869               	movf	??_Test_Pwm,w
  2986  0075  076B               	addwf	??_Test_Pwm+2,w
  2987  0076  00F8               	movwf	_pfgonetemp
  2988  0077  086A               	movf	??_Test_Pwm+1,w
  2989  0078  1803               	skipnc
  2990  0079  0A6A               	incf	??_Test_Pwm+1,w
  2991  007A  076C               	addwf	??_Test_Pwm+3,w
  2992  007B  00F9               	movwf	_pfgonetemp+1
  2993                           
  2994                           ;WHQ_TP_ZPGS_V1.2.c: 812: PfgChangef = 1;
  2995  007C  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  2996  007D  3400               	retlw	0
  2997  007E                     l8426:	
  2998                           
  2999                           ;WHQ_TP_ZPGS_V1.2.c: 815: else
  3000                           ;WHQ_TP_ZPGS_V1.2.c: 816: {
  3001                           ;WHQ_TP_ZPGS_V1.2.c: 817: if(++ondly >= 4)
  3002  007E  3004               	movlw	4
  3003  007F  0AB0               	incf	Test_Pwm@ondly,f
  3004  0080  0230               	subwf	Test_Pwm@ondly,w
  3005  0081  1C03               	skipc
  3006  0082  3400               	retlw	0
  3007                           
  3008                           ;WHQ_TP_ZPGS_V1.2.c: 818: {
  3009                           ;WHQ_TP_ZPGS_V1.2.c: 819: ondly = 0;
  3010  0083  01B0               	clrf	Test_Pwm@ondly
  3011                           
  3012                           ;WHQ_TP_ZPGS_V1.2.c: 820: Test_Pwm_Cur();
  3013  0084  20F0               	fcall	_Test_Pwm_Cur
  3014                           
  3015                           ;WHQ_TP_ZPGS_V1.2.c: 821: pwmnold = pfgonetemp.pfgtemp & 0x7fff;
  3016  0085  0879               	movf	_pfgonetemp+1,w
  3017  0086  1283               	bcf	3,5	;RP0=0, select bank0
  3018  0087  00A5               	movwf	_pwmnold+1	;volatile
  3019  0088  0878               	movf	_pfgonetemp,w
  3020  0089  00A4               	movwf	_pwmnold	;volatile
  3021  008A  13A5               	bcf	_pwmnold+1,7	;volatile
  3022                           
  3023                           ;WHQ_TP_ZPGS_V1.2.c: 822: ponecf = 0;
  3024  008B  1071               	bcf	_ponecf/(0+8),_ponecf& (0+7)	;volatile
  3025                           
  3026                           ;WHQ_TP_ZPGS_V1.2.c: 823: }
  3027                           ;WHQ_TP_ZPGS_V1.2.c: 824: }
  3028                           ;WHQ_TP_ZPGS_V1.2.c: 825: }
  3029                           ;WHQ_TP_ZPGS_V1.2.c: 826: }
  3030                           ;WHQ_TP_ZPGS_V1.2.c: 827: }
  3031                           ;WHQ_TP_ZPGS_V1.2.c: 828: }
  3032                           ;WHQ_TP_ZPGS_V1.2.c: 829: return 0;
  3033  008C  3400               	retlw	0
  3034  008D                     __end_of_Test_Pwm:	
  3035  008D                     __ptext26:	
  3036 ;; *************** function _Get_CUR_Dat *****************
  3037 ;; Defined at:
  3038 ;;		line 465 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;		None
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;		None
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  1    wreg      void 
  3045 ;; Registers used:
  3046 ;;		wreg, status,2, status,0, pclath, cstack
  3047 ;; Tracked objects:
  3048 ;;		On entry : 300/0
  3049 ;;		On exit  : 300/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3052 ;;      Params:         0       0       0       0       0
  3053 ;;      Locals:         0       0       0       0       0
  3054 ;;      Temps:          0       2       0       0       0
  3055 ;;      Totals:         0       2       0       0       0
  3056 ;;Total ram usage:        2 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; Hardware stack levels required when called:    3
  3059 ;; This function calls:
  3060 ;;		___awdiv
  3061 ;; This function is called by:
  3062 ;;		_Test_Pwm
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           
  3067                           ;psect for function _Get_CUR_Dat
  3068  008D                     _Get_CUR_Dat:	
  3069                           
  3070                           ;WHQ_TP_ZPGS_V1.2.c: 467: cur_addat = cursum/32;
  3071                           
  3072                           ;incstack = 0
  3073                           ; Regs used in _Get_CUR_Dat: [wreg+status,2+status,0+pclath+cstack]
  3074  008D  1683               	bsf	3,5	;RP0=1, select bank1
  3075  008E  082B               	movf	(_cursum+1)^(0+128),w	;volatile
  3076  008F  1283               	bcf	3,5	;RP0=0, select bank0
  3077  0090  00E8               	movwf	??_Get_CUR_Dat+1
  3078  0091  1683               	bsf	3,5	;RP0=1, select bank1
  3079  0092  082A               	movf	_cursum^(0+128),w	;volatile
  3080  0093  1283               	bcf	3,5	;RP0=0, select bank0
  3081  0094  00E7               	movwf	??_Get_CUR_Dat
  3082  0095  3005               	movlw	5
  3083  0096                     u3785:	
  3084  0096  1003               	clrc
  3085  0097  0CE8               	rrf	??_Get_CUR_Dat+1,f
  3086  0098  0CE7               	rrf	??_Get_CUR_Dat,f
  3087  0099  3EFF               	addlw	-1
  3088  009A  1D03               	skipz
  3089  009B  2896               	goto	u3785
  3090  009C  0867               	movf	??_Get_CUR_Dat,w
  3091  009D  00BF               	movwf	_cur_addat	;volatile
  3092                           
  3093                           ;WHQ_TP_ZPGS_V1.2.c: 468: if(0 == cur_addatold0)
  3094  009E  083B               	movf	_cur_addatold0,w	;volatile
  3095  009F  1D03               	btfss	3,2
  3096  00A0  28A8               	goto	l8162
  3097                           
  3098                           ;WHQ_TP_ZPGS_V1.2.c: 469: {
  3099                           ;WHQ_TP_ZPGS_V1.2.c: 470: cur_addatold0 = cur_addat;
  3100  00A1  083F               	movf	_cur_addat,w	;volatile
  3101  00A2  00BB               	movwf	_cur_addatold0	;volatile
  3102                           
  3103                           ;WHQ_TP_ZPGS_V1.2.c: 471: cur_addatold1 = cur_addat;
  3104  00A3  083F               	movf	_cur_addat,w	;volatile
  3105  00A4  00BA               	movwf	_cur_addatold1	;volatile
  3106                           
  3107                           ;WHQ_TP_ZPGS_V1.2.c: 472: cur_addatold2 = cur_addat;
  3108  00A5  083F               	movf	_cur_addat,w	;volatile
  3109  00A6  00B9               	movwf	_cur_addatold2	;volatile
  3110                           
  3111                           ;WHQ_TP_ZPGS_V1.2.c: 473: }
  3112  00A7  28BD               	goto	l8164
  3113  00A8                     l8162:	
  3114                           
  3115                           ;WHQ_TP_ZPGS_V1.2.c: 474: else
  3116                           ;WHQ_TP_ZPGS_V1.2.c: 475: {
  3117                           ;WHQ_TP_ZPGS_V1.2.c: 476: cur_addat = (unsigned char)((cur_addat + cur_addatold0 + cur_a
      +                          ddatold1 + cur_addatold2)/4);
  3118  00A8  083F               	movf	_cur_addat,w	;volatile
  3119  00A9  00E1               	movwf	___awdiv@dividend
  3120  00AA  01E2               	clrf	___awdiv@dividend+1
  3121  00AB  083B               	movf	_cur_addatold0,w	;volatile
  3122  00AC  07E1               	addwf	___awdiv@dividend,f
  3123  00AD  1803               	skipnc
  3124  00AE  0AE2               	incf	___awdiv@dividend+1,f
  3125  00AF  083A               	movf	_cur_addatold1,w	;volatile
  3126  00B0  07E1               	addwf	___awdiv@dividend,f
  3127  00B1  1803               	skipnc
  3128  00B2  0AE2               	incf	___awdiv@dividend+1,f
  3129  00B3  0839               	movf	_cur_addatold2,w	;volatile
  3130  00B4  07E1               	addwf	___awdiv@dividend,f
  3131  00B5  1803               	skipnc
  3132  00B6  0AE2               	incf	___awdiv@dividend+1,f
  3133  00B7  3004               	movlw	4
  3134  00B8  00DF               	movwf	___awdiv@divisor
  3135  00B9  01E0               	clrf	___awdiv@divisor+1
  3136  00BA  2275               	fcall	___awdiv
  3137  00BB  085F               	movf	?___awdiv,w
  3138  00BC  00BF               	movwf	_cur_addat	;volatile
  3139  00BD                     l8164:	
  3140                           
  3141                           ;WHQ_TP_ZPGS_V1.2.c: 477: }
  3142                           ;WHQ_TP_ZPGS_V1.2.c: 478: cur_addatold2 = cur_addatold1;
  3143  00BD  083A               	movf	_cur_addatold1,w	;volatile
  3144  00BE  00B9               	movwf	_cur_addatold2	;volatile
  3145                           
  3146                           ;WHQ_TP_ZPGS_V1.2.c: 479: cur_addatold1 = cur_addatold0;
  3147  00BF  083B               	movf	_cur_addatold0,w	;volatile
  3148  00C0  00BA               	movwf	_cur_addatold1	;volatile
  3149                           
  3150                           ;WHQ_TP_ZPGS_V1.2.c: 480: cur_addatold0 = cur_addat;
  3151  00C1  083F               	movf	_cur_addat,w	;volatile
  3152  00C2  00BB               	movwf	_cur_addatold0	;volatile
  3153  00C3  0008               	return
  3154  00C4                     __end_of_Get_CUR_Dat:	
  3155  00C4                     __ptext19:	
  3156 ;; *************** function _Test_PWM_Fst *****************
  3157 ;; Defined at:
  3158 ;;		line 501 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;		None
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;  templ           1    9[BANK0 ] unsigned char 
  3163 ;; Return value:  Size  Location     Type
  3164 ;;                  1    wreg      unsigned char 
  3165 ;; Registers used:
  3166 ;;		wreg, status,2, status,0, pclath, cstack
  3167 ;; Tracked objects:
  3168 ;;		On entry : 300/0
  3169 ;;		On exit  : 300/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3172 ;;      Params:         0       0       0       0       0
  3173 ;;      Locals:         0       1       0       0       0
  3174 ;;      Temps:          0       0       0       0       0
  3175 ;;      Totals:         0       1       0       0       0
  3176 ;;Total ram usage:        1 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; Hardware stack levels required when called:    4
  3179 ;; This function calls:
  3180 ;;		_Test_Pwm_Cur
  3181 ;;		_YTPFG_Flash
  3182 ;; This function is called by:
  3183 ;;		_Test_Pwm
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           
  3188                           ;psect for function _Test_PWM_Fst
  3189  00C4                     _Test_PWM_Fst:	
  3190                           
  3191                           ;WHQ_TP_ZPGS_V1.2.c: 503: unsigned char templ;
  3192                           ;WHQ_TP_ZPGS_V1.2.c: 505: templ = Test_Pwm_Cur();
  3193                           
  3194                           ;incstack = 0
  3195                           ; Regs used in _Test_PWM_Fst: [wreg+status,2+status,0+pclath+cstack]
  3196  00C4  20F0  118A         	fcall	_Test_Pwm_Cur
  3197  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  3198  00C7  00E8               	movwf	Test_PWM_Fst@templ
  3199                           
  3200                           ;WHQ_TP_ZPGS_V1.2.c: 506: if((0xff == templ) || (cur_addat == curset))
  3201  00C8  0A68               	incf	Test_PWM_Fst@templ,w
  3202  00C9  1903               	btfsc	3,2
  3203  00CA  28CF               	goto	l4970
  3204  00CB  301E               	movlw	30
  3205  00CC  063F               	xorwf	_cur_addat,w	;volatile
  3206  00CD  1D03               	btfss	3,2
  3207  00CE  28EB               	goto	l8204
  3208  00CF                     l4970:	
  3209                           
  3210                           ;WHQ_TP_ZPGS_V1.2.c: 507: {
  3211                           ;WHQ_TP_ZPGS_V1.2.c: 508: pwmtonf = 1;
  3212  00CF  14F1               	bsf	_pwmtonf/(0+8),_pwmtonf& (0+7)	;volatile
  3213                           
  3214                           ;WHQ_TP_ZPGS_V1.2.c: 509: if(++curokcl >= 3)
  3215  00D0  3003               	movlw	3
  3216  00D1  0AB8               	incf	_curokcl,f	;volatile
  3217  00D2  0238               	subwf	_curokcl,w	;volatile
  3218  00D3  1C03               	skipc
  3219  00D4  3400               	retlw	0
  3220                           
  3221                           ;WHQ_TP_ZPGS_V1.2.c: 510: {
  3222                           ;WHQ_TP_ZPGS_V1.2.c: 511: curokcl = 0;
  3223  00D5  01B8               	clrf	_curokcl	;volatile
  3224                           
  3225                           ;WHQ_TP_ZPGS_V1.2.c: 512: if(!pwmtf)
  3226  00D6  19F1               	btfsc	_pwmtf/(0+8),_pwmtf& (0+7)	;volatile
  3227  00D7  28DC               	goto	l4972
  3228                           
  3229                           ;WHQ_TP_ZPGS_V1.2.c: 513: {
  3230                           ;WHQ_TP_ZPGS_V1.2.c: 514: Ytzpcl = 0;
  3231  00D8  01B7               	clrf	_Ytzpcl	;volatile
  3232                           
  3233                           ;WHQ_TP_ZPGS_V1.2.c: 515: onoff_fst = 0;
  3234  00D9  12F0               	bcf	_onoff_fst/(0+8),_onoff_fst& (0+7)	;volatile
  3235                           
  3236                           ;WHQ_TP_ZPGS_V1.2.c: 516: pwmtf = 1;
  3237  00DA  15F1               	bsf	_pwmtf/(0+8),_pwmtf& (0+7)	;volatile
  3238  00DB  28DD               	goto	l4973
  3239  00DC                     l4972:	
  3240                           
  3241                           ;WHQ_TP_ZPGS_V1.2.c: 528: else if(!pwmtf1)
  3242  00DC  1D71               	btfss	_pwmtf1/(0+8),_pwmtf1& (0+7)	;volatile
  3243  00DD                     l4973:	
  3244                           
  3245                           ;WHQ_TP_ZPGS_V1.2.c: 523: else
  3246                           ;WHQ_TP_ZPGS_V1.2.c: 524: {
  3247                           ;WHQ_TP_ZPGS_V1.2.c: 525: pwmtf1 = 1;
  3248  00DD  1571               	bsf	_pwmtf1/(0+8),_pwmtf1& (0+7)	;volatile
  3249                           
  3250                           ;WHQ_TP_ZPGS_V1.2.c: 531: }
  3251                           ;WHQ_TP_ZPGS_V1.2.c: 532: pfgonetemp.pfgtemp = pfgonetemp.pfgtemp-2;
  3252  00DE  30FE               	movlw	254
  3253  00DF  07F8               	addwf	_pfgonetemp,f
  3254  00E0  1803               	skipnc
  3255  00E1  0AF9               	incf	_pfgonetemp+1,f
  3256  00E2  30FF               	movlw	255
  3257  00E3  07F9               	addwf	_pfgonetemp+1,f
  3258                           
  3259                           ;WHQ_TP_ZPGS_V1.2.c: 533: PfgChangef = 1;
  3260  00E4  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  3261                           
  3262                           ;WHQ_TP_ZPGS_V1.2.c: 534: pwmnold = pfgonetemp.pfgtemp&0x7fff;
  3263  00E5  0879               	movf	_pfgonetemp+1,w
  3264  00E6  00A5               	movwf	_pwmnold+1	;volatile
  3265  00E7  0878               	movf	_pfgonetemp,w
  3266  00E8  00A4               	movwf	_pwmnold	;volatile
  3267  00E9  13A5               	bcf	_pwmnold+1,7	;volatile
  3268                           
  3269                           ;WHQ_TP_ZPGS_V1.2.c: 535: return 0xaa;
  3270  00EA  34AA               	retlw	170
  3271  00EB                     l8204:	
  3272                           
  3273                           ;WHQ_TP_ZPGS_V1.2.c: 538: else if(0x55 == templ)
  3274  00EB  3055               	movlw	85
  3275  00EC  0668               	xorwf	Test_PWM_Fst@templ,w
  3276  00ED  1903               	btfsc	3,2
  3277                           
  3278                           ;WHQ_TP_ZPGS_V1.2.c: 539: {
  3279                           ;WHQ_TP_ZPGS_V1.2.c: 540: return 0x55;
  3280  00EE  3455               	retlw	85
  3281                           
  3282                           ;WHQ_TP_ZPGS_V1.2.c: 541: }
  3283                           ;WHQ_TP_ZPGS_V1.2.c: 542: return 0x00;
  3284  00EF  3400               	retlw	0
  3285  00F0                     __end_of_Test_PWM_Fst:	
  3286  00F0                     __ptext21:	
  3287 ;; *************** function _Test_Pwm_Cur *****************
  3288 ;; Defined at:
  3289 ;;		line 144 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;		None
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;  templ           1    8[BANK0 ] unsigned char 
  3294 ;;  temph           1    7[BANK0 ] unsigned char 
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  1    wreg      unsigned char 
  3297 ;; Registers used:
  3298 ;;		wreg, status,2, status,0, pclath, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 300/0
  3301 ;;		On exit  : 200/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3304 ;;      Params:         0       0       0       0       0
  3305 ;;      Locals:         0       2       0       0       0
  3306 ;;      Temps:          0       0       0       0       0
  3307 ;;      Totals:         0       2       0       0       0
  3308 ;;Total ram usage:        2 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    3
  3311 ;; This function calls:
  3312 ;;		_Pwm_add
  3313 ;;		_Pwm_dec
  3314 ;; This function is called by:
  3315 ;;		_Test_PWM_Fst
  3316 ;;		_Test_Pwm
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           
  3321                           ;psect for function _Test_Pwm_Cur
  3322  00F0                     _Test_Pwm_Cur:	
  3323                           
  3324                           ;incstack = 0
  3325                           ; Regs used in _Test_Pwm_Cur: [wreg+status,2+status,0+pclath+cstack]
  3326  00F0  301F               	movlw	31
  3327  00F1  023F               	subwf	_cur_addat,w	;volatile
  3328  00F2  1C03               	skipc
  3329  00F3  290A               	goto	l7950
  3330                           
  3331                           ;WHQ_TP_ZPGS_V1.2.c: 150: {
  3332                           ;WHQ_TP_ZPGS_V1.2.c: 151: curdowncl = 0;
  3333  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  3334  00F5  3002               	movlw	2
  3335  00F6  01B2               	clrf	Test_Pwm_Cur@curdowncl^(0+128)
  3336                           
  3337                           ;WHQ_TP_ZPGS_V1.2.c: 152: if(++curupcl >= 2)
  3338  00F7  0AB3               	incf	Test_Pwm_Cur@curupcl^(0+128),f
  3339  00F8  0233               	subwf	Test_Pwm_Cur@curupcl^(0+128),w
  3340  00F9  1C03               	skipc
  3341  00FA  3400               	retlw	0
  3342                           
  3343                           ;WHQ_TP_ZPGS_V1.2.c: 153: {
  3344                           ;WHQ_TP_ZPGS_V1.2.c: 154: PFGchgf = 1;
  3345  00FB  1770               	bsf	_PFGchgf/(0+8),_PFGchgf& (0+7)	;volatile
  3346                           
  3347                           ;WHQ_TP_ZPGS_V1.2.c: 155: curupcl = 0;
  3348  00FC  01B3               	clrf	Test_Pwm_Cur@curupcl^(0+128)
  3349                           
  3350                           ;WHQ_TP_ZPGS_V1.2.c: 156: if(0 == Pwm_dec(1,pwmfst))
  3351  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  3352  00FE  0829               	movf	_pwmfst+1,w	;volatile
  3353  00FF  00E0               	movwf	Pwm_dec@pwmfset+1
  3354  0100  0828               	movf	_pwmfst,w	;volatile
  3355  0101  00DF               	movwf	Pwm_dec@pwmfset
  3356  0102  3001               	movlw	1
  3357  0103  2152  118A         	fcall	_Pwm_dec
  3358  0105  3A00               	xorlw	0
  3359  0106  1D03               	skipz
  3360  0107  34FF               	retlw	255
  3361  0108                     l7938:	
  3362                           
  3363                           ;WHQ_TP_ZPGS_V1.2.c: 157: {
  3364                           ;WHQ_TP_ZPGS_V1.2.c: 158: pfgonetemp.pfgtemp = pwmfst;
  3365                           
  3366                           ;WHQ_TP_ZPGS_V1.2.c: 159: PfgChangef = 1;
  3367  0108  238A               	fcall	PL12	;call to abstracted procedure
  3368                           
  3369                           ;WHQ_TP_ZPGS_V1.2.c: 160: return 0x55;
  3370  0109  3455               	retlw	85
  3371  010A                     l7950:	
  3372                           ;WHQ_TP_ZPGS_V1.2.c: 162: else
  3373                           ;WHQ_TP_ZPGS_V1.2.c: 163: return 0xff;
  3374                           
  3375  010A  301E               	movlw	30
  3376  010B  023F               	subwf	_cur_addat,w	;volatile
  3377  010C  1803               	skipnc
  3378  010D  2935               	goto	l7984
  3379                           
  3380                           ;WHQ_TP_ZPGS_V1.2.c: 167: {
  3381                           ;WHQ_TP_ZPGS_V1.2.c: 168: curupcl = 0;
  3382  010E  1683               	bsf	3,5	;RP0=1, select bank1
  3383  010F  3002               	movlw	2
  3384  0110  01B3               	clrf	Test_Pwm_Cur@curupcl^(0+128)
  3385                           
  3386                           ;WHQ_TP_ZPGS_V1.2.c: 169: if(++curdowncl >= 2)
  3387  0111  0AB2               	incf	Test_Pwm_Cur@curdowncl^(0+128),f
  3388  0112  0232               	subwf	Test_Pwm_Cur@curdowncl^(0+128),w
  3389  0113  1C03               	skipc
  3390  0114  3400               	retlw	0
  3391                           
  3392                           ;WHQ_TP_ZPGS_V1.2.c: 170: {
  3393                           ;WHQ_TP_ZPGS_V1.2.c: 171: PFGchgf = 1;
  3394  0115  1770               	bsf	_PFGchgf/(0+8),_PFGchgf& (0+7)	;volatile
  3395                           
  3396                           ;WHQ_TP_ZPGS_V1.2.c: 172: curdowncl = 0;
  3397  0116  01B2               	clrf	Test_Pwm_Cur@curdowncl^(0+128)
  3398  0117  1283               	bcf	3,5	;RP0=0, select bank0
  3399  0118  083F               	movf	_cur_addat,w	;volatile
  3400  0119  3C1E               	sublw	30
  3401  011A  00E7               	movwf	Test_Pwm_Cur@templ
  3402                           
  3403                           ;WHQ_TP_ZPGS_V1.2.c: 174: if(templ >= 20)
  3404  011B  3014               	movlw	20
  3405  011C  0267               	subwf	Test_Pwm_Cur@templ,w
  3406  011D  1C03               	skipc
  3407  011E  2921               	goto	l7966
  3408                           
  3409                           ;WHQ_TP_ZPGS_V1.2.c: 175: temph = 4;
  3410  011F  3004               	movlw	4
  3411  0120  2926               	goto	L4
  3412  0121                     l7966:	
  3413                           
  3414                           ;WHQ_TP_ZPGS_V1.2.c: 176: else if(templ >= 15)
  3415  0121  300F               	movlw	15
  3416  0122  0267               	subwf	Test_Pwm_Cur@templ,w
  3417  0123  1C03               	skipc
  3418  0124  2928               	goto	l4896
  3419                           
  3420                           ;WHQ_TP_ZPGS_V1.2.c: 177: {
  3421                           ;WHQ_TP_ZPGS_V1.2.c: 178: temph = 2;
  3422  0125  3002               	movlw	2
  3423  0126                     L4:	
  3424  0126  00E6               	movwf	Test_Pwm_Cur@temph
  3425                           
  3426                           ;WHQ_TP_ZPGS_V1.2.c: 179: }
  3427  0127  292A               	goto	l7970
  3428  0128                     l4896:	
  3429                           
  3430                           ;WHQ_TP_ZPGS_V1.2.c: 180: else
  3431                           ;WHQ_TP_ZPGS_V1.2.c: 181: temph = 1;
  3432  0128  01E6               	clrf	Test_Pwm_Cur@temph
  3433  0129  0AE6               	incf	Test_Pwm_Cur@temph,f
  3434  012A                     l7970:	
  3435                           
  3436                           ;WHQ_TP_ZPGS_V1.2.c: 182: if(0 == Pwm_add(temph,pwmlst))
  3437  012A  0827               	movf	_pwmlst+1,w	;volatile
  3438  012B  00E0               	movwf	Pwm_add@pwmlset+1
  3439  012C  0826               	movf	_pwmlst,w	;volatile
  3440  012D  00DF               	movwf	Pwm_add@pwmlset
  3441  012E  0866               	movf	Test_Pwm_Cur@temph,w
  3442  012F  2139  118A         	fcall	_Pwm_add
  3443  0131  3A00               	xorlw	0
  3444  0132  1D03               	skipz
  3445                           
  3446                           ;WHQ_TP_ZPGS_V1.2.c: 188: else
  3447                           ;WHQ_TP_ZPGS_V1.2.c: 189: return 0xaa;
  3448  0133  34AA               	retlw	170
  3449  0134  2908               	goto	l7938
  3450  0135                     l7984:	
  3451                           
  3452                           ;WHQ_TP_ZPGS_V1.2.c: 192: else
  3453                           ;WHQ_TP_ZPGS_V1.2.c: 193: {
  3454                           ;WHQ_TP_ZPGS_V1.2.c: 194: curupcl = 0;
  3455  0135  1683               	bsf	3,5	;RP0=1, select bank1
  3456  0136  01B3               	clrf	Test_Pwm_Cur@curupcl^(0+128)
  3457                           
  3458                           ;WHQ_TP_ZPGS_V1.2.c: 195: curdowncl = 0;
  3459  0137  01B2               	clrf	Test_Pwm_Cur@curdowncl^(0+128)
  3460                           
  3461                           ;WHQ_TP_ZPGS_V1.2.c: 196: }
  3462                           ;WHQ_TP_ZPGS_V1.2.c: 197: return 0x00;
  3463  0138  3400               	retlw	0
  3464  0139                     __end_of_Test_Pwm_Cur:	
  3465  0139                     __ptext23:	
  3466 ;; *************** function _Pwm_add *****************
  3467 ;; Defined at:
  3468 ;;		line 105 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  addcl           1    wreg     unsigned char 
  3471 ;;  pwmlset         2    0[BANK0 ] unsigned int 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  addcl           1    4[BANK0 ] unsigned char 
  3474 ;;  temp            2    5[BANK0 ] unsigned int 
  3475 ;; Return value:  Size  Location     Type
  3476 ;;                  1    wreg      unsigned char 
  3477 ;; Registers used:
  3478 ;;		wreg
  3479 ;; Tracked objects:
  3480 ;;		On entry : 300/0
  3481 ;;		On exit  : 300/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3484 ;;      Params:         0       2       0       0       0
  3485 ;;      Locals:         0       3       0       0       0
  3486 ;;      Temps:          0       2       0       0       0
  3487 ;;      Totals:         0       7       0       0       0
  3488 ;;Total ram usage:        7 bytes
  3489 ;; Hardware stack levels used:    1
  3490 ;; Hardware stack levels required when called:    2
  3491 ;; This function calls:
  3492 ;;		Nothing
  3493 ;; This function is called by:
  3494 ;;		_Test_Pwm_Cur
  3495 ;; This function uses a non-reentrant model
  3496 ;;
  3497                           
  3498                           
  3499                           ;psect for function _Pwm_add
  3500  0139                     _Pwm_add:	
  3501                           
  3502                           ;incstack = 0
  3503                           ; Regs used in _Pwm_add: [wreg]
  3504                           ;Pwm_add@addcl stored from wreg
  3505  0139  00E3               	movwf	Pwm_add@addcl
  3506                           
  3507                           ;WHQ_TP_ZPGS_V1.2.c: 108: unsigned int temp;
  3508                           ;WHQ_TP_ZPGS_V1.2.c: 110: pfgonetemp.pfgtemp = pfgonetemp.pfgtemp + addcl;
  3509  013A  07F8               	addwf	_pfgonetemp,f
  3510  013B  1803               	skipnc
  3511  013C  0AF9               	incf	_pfgonetemp+1,f
  3512                           
  3513                           ;WHQ_TP_ZPGS_V1.2.c: 111: PfgChangef = 1;
  3514  013D  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  3515                           
  3516                           ;WHQ_TP_ZPGS_V1.2.c: 112: temp = pfgonetemp.pfgtemp & 0x03ff;
  3517  013E  0879               	movf	_pfgonetemp+1,w
  3518  013F  00E5               	movwf	Pwm_add@temp+1
  3519  0140  0878               	movf	_pfgonetemp,w
  3520  0141  00E4               	movwf	Pwm_add@temp
  3521  0142  3003               	movlw	3
  3522  0143  05E5               	andwf	Pwm_add@temp+1,f
  3523                           
  3524                           ;WHQ_TP_ZPGS_V1.2.c: 113: if(temp > (pwmlset & 0x03ff)) return 0;
  3525  0144  085F               	movf	Pwm_add@pwmlset,w
  3526  0145  00E1               	movwf	??_Pwm_add
  3527  0146  3003               	movlw	3
  3528  0147  0560               	andwf	Pwm_add@pwmlset+1,w
  3529  0148  00E2               	movwf	??_Pwm_add+1
  3530  0149  0865               	movf	Pwm_add@temp+1,w
  3531  014A  0262               	subwf	??_Pwm_add+1,w
  3532  014B  1D03               	skipz
  3533  014C  294F               	goto	u3595
  3534  014D  0864               	movf	Pwm_add@temp,w
  3535  014E  0261               	subwf	??_Pwm_add,w
  3536  014F                     u3595:	
  3537  014F  1C03               	btfss	3,0
  3538  0150  3400               	retlw	0
  3539                           
  3540                           ;WHQ_TP_ZPGS_V1.2.c: 114: return 1;
  3541  0151  3401               	retlw	1
  3542  0152                     __end_of_Pwm_add:	
  3543  0152                     __ptext22:	
  3544 ;; *************** function _Pwm_dec *****************
  3545 ;; Defined at:
  3546 ;;		line 124 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;  deccl           1    wreg     unsigned char 
  3549 ;;  pwmfset         2    0[BANK0 ] unsigned int 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;  deccl           1    4[BANK0 ] unsigned char 
  3552 ;;  temp            2    5[BANK0 ] unsigned int 
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  1    wreg      unsigned char 
  3555 ;; Registers used:
  3556 ;;		wreg
  3557 ;; Tracked objects:
  3558 ;;		On entry : 300/0
  3559 ;;		On exit  : 300/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3562 ;;      Params:         0       2       0       0       0
  3563 ;;      Locals:         0       3       0       0       0
  3564 ;;      Temps:          0       2       0       0       0
  3565 ;;      Totals:         0       7       0       0       0
  3566 ;;Total ram usage:        7 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:    2
  3569 ;; This function calls:
  3570 ;;		Nothing
  3571 ;; This function is called by:
  3572 ;;		_Test_Pwm_Cur
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           
  3577                           ;psect for function _Pwm_dec
  3578  0152                     _Pwm_dec:	
  3579                           
  3580                           ;incstack = 0
  3581                           ; Regs used in _Pwm_dec: [wreg]
  3582                           ;Pwm_dec@deccl stored from wreg
  3583  0152  00E3               	movwf	Pwm_dec@deccl
  3584                           
  3585                           ;WHQ_TP_ZPGS_V1.2.c: 127: unsigned int temp;
  3586                           ;WHQ_TP_ZPGS_V1.2.c: 129: pfgonetemp.pfgtemp = pfgonetemp.pfgtemp - deccl;
  3587  0153  02F8               	subwf	_pfgonetemp,f
  3588  0154  1C03               	skipc
  3589  0155  03F9               	decf	_pfgonetemp+1,f
  3590                           
  3591                           ;WHQ_TP_ZPGS_V1.2.c: 130: PfgChangef = 1;
  3592  0156  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  3593                           
  3594                           ;WHQ_TP_ZPGS_V1.2.c: 131: temp = pfgonetemp.pfgtemp & 0x03ff;
  3595  0157  0879               	movf	_pfgonetemp+1,w
  3596  0158  00E5               	movwf	Pwm_dec@temp+1
  3597  0159  0878               	movf	_pfgonetemp,w
  3598  015A  00E4               	movwf	Pwm_dec@temp
  3599  015B  3003               	movlw	3
  3600  015C  05E5               	andwf	Pwm_dec@temp+1,f
  3601                           
  3602                           ;WHQ_TP_ZPGS_V1.2.c: 132: if(temp < (pwmfset & 0x03ff)) return 0;
  3603  015D  085F               	movf	Pwm_dec@pwmfset,w
  3604  015E  00E1               	movwf	??_Pwm_dec
  3605  015F  3003               	movlw	3
  3606  0160  0560               	andwf	Pwm_dec@pwmfset+1,w
  3607  0161  00E2               	movwf	??_Pwm_dec+1
  3608  0162  0265               	subwf	Pwm_dec@temp+1,w
  3609  0163  1D03               	skipz
  3610  0164  2967               	goto	u3605
  3611  0165  0861               	movf	??_Pwm_dec,w
  3612  0166  0264               	subwf	Pwm_dec@temp,w
  3613  0167                     u3605:	
  3614  0167  1C03               	btfss	3,0
  3615  0168  3400               	retlw	0
  3616                           
  3617                           ;WHQ_TP_ZPGS_V1.2.c: 133: return 1;
  3618  0169  3401               	retlw	1
  3619  016A                     __end_of_Pwm_dec:	
  3620  016A                     __ptext18:	
  3621 ;; *************** function _Test_water *****************
  3622 ;; Defined at:
  3623 ;;		line 548 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  3624 ;; Parameters:    Size  Location     Type
  3625 ;;		None
  3626 ;; Auto vars:     Size  Location     Type
  3627 ;;  temp            2    4[BANK0 ] unsigned int 
  3628 ;;  temph           1    3[BANK0 ] unsigned char 
  3629 ;;  templ           1    0        unsigned char 
  3630 ;; Return value:  Size  Location     Type
  3631 ;;                  1    wreg      unsigned char 
  3632 ;; Registers used:
  3633 ;;		wreg, status,2, status,0, btemp+1
  3634 ;; Tracked objects:
  3635 ;;		On entry : 300/0
  3636 ;;		On exit  : 200/0
  3637 ;;		Unchanged: 0/0
  3638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3639 ;;      Params:         0       0       0       0       0
  3640 ;;      Locals:         0       4       0       0       0
  3641 ;;      Temps:          0       2       0       0       0
  3642 ;;      Totals:         0       6       0       0       0
  3643 ;;Total ram usage:        6 bytes
  3644 ;; Hardware stack levels used:    1
  3645 ;; Hardware stack levels required when called:    2
  3646 ;; This function calls:
  3647 ;;		Nothing
  3648 ;; This function is called by:
  3649 ;;		_Test_Pwm
  3650 ;; This function uses a non-reentrant model
  3651 ;;
  3652                           
  3653                           
  3654                           ;psect for function _Test_water
  3655  016A                     _Test_water:	
  3656                           
  3657                           ;WHQ_TP_ZPGS_V1.2.c: 550: unsigned char templ,temph;
  3658                           ;WHQ_TP_ZPGS_V1.2.c: 551: unsigned int temp;
  3659                           ;WHQ_TP_ZPGS_V1.2.c: 552: static unsigned int curstrold;
  3660                           ;WHQ_TP_ZPGS_V1.2.c: 553: static unsigned int strupc;
  3661                           ;WHQ_TP_ZPGS_V1.2.c: 554: static unsigned int ytdly;
  3662                           ;WHQ_TP_ZPGS_V1.2.c: 555: static bit watnof = 0;
  3663                           ;WHQ_TP_ZPGS_V1.2.c: 557: watnof=0;
  3664                           
  3665                           ;incstack = 0
  3666                           ; Regs used in _Test_water: [wreg+status,2+status,0+btemp+1]
  3667  016A  10F0               	bcf	Test_water@watnof/(0+8),Test_water@watnof& (0+7)
  3668                           
  3669                           ;WHQ_TP_ZPGS_V1.2.c: 559: if(!pwmtf)
  3670  016B  19F1               	btfsc	_pwmtf/(0+8),_pwmtf& (0+7)	;volatile
  3671  016C  2A03               	goto	l4990
  3672                           
  3673                           ;WHQ_TP_ZPGS_V1.2.c: 560: {
  3674                           ;WHQ_TP_ZPGS_V1.2.c: 561: if(pwmtonf)
  3675  016D  1CF1               	btfss	_pwmtonf/(0+8),_pwmtonf& (0+7)	;volatile
  3676  016E  2998               	goto	l8236
  3677                           
  3678                           ;WHQ_TP_ZPGS_V1.2.c: 562: {
  3679                           ;WHQ_TP_ZPGS_V1.2.c: 563: if((pfgonetemp.pfgtemp & 0x03ff) > pwmlv)
  3680  016F  237D  118A         	fcall	PL8	;call to abstracted procedure
  3681  0171  0221               	subwf	_pwmlv+1,w	;volatile
  3682  0172  1D03               	skipz
  3683  0173  2976               	goto	u3885
  3684  0174  085F               	movf	??_Test_water,w
  3685  0175  0220               	subwf	_pwmlv,w	;volatile
  3686  0176                     u3885:	
  3687  0176  1803               	skipnc
  3688  0177  298B               	goto	l4992
  3689                           
  3690                           ;WHQ_TP_ZPGS_V1.2.c: 564: {
  3691                           ;WHQ_TP_ZPGS_V1.2.c: 565: temp = (pfgonetemp.pfgtemp&0x03ff) - pwmlv;
  3692  0178  0879               	movf	_pfgonetemp+1,w
  3693  0179  00E4               	movwf	Test_water@temp+1
  3694  017A  0878               	movf	_pfgonetemp,w
  3695  017B  00E3               	movwf	Test_water@temp
  3696  017C  3003               	movlw	3
  3697  017D  05E4               	andwf	Test_water@temp+1,f
  3698                           
  3699                           ;WHQ_TP_ZPGS_V1.2.c: 566: xldisp = temp;
  3700  017E  0820               	movf	_pwmlv,w	;volatile
  3701  017F  02E3               	subwf	Test_water@temp,f
  3702  0180  0821               	movf	_pwmlv+1,w	;volatile
  3703  0181  1C03               	skipc
  3704  0182  03E4               	decf	Test_water@temp+1,f
  3705  0183  02E4               	subwf	Test_water@temp+1,f
  3706  0184  3000               	movlw	0
  3707  0185  0264               	subwf	Test_water@temp+1,w
  3708  0186  3006               	movlw	6
  3709  0187  1903               	skipnz
  3710  0188  0263               	subwf	Test_water@temp,w
  3711  0189  1C03               	btfss	3,0
  3712                           
  3713                           ;WHQ_TP_ZPGS_V1.2.c: 568: {
  3714                           ;WHQ_TP_ZPGS_V1.2.c: 569: return 0xff;
  3715  018A  34FF               	retlw	255
  3716  018B                     l4992:	
  3717                           
  3718                           ;WHQ_TP_ZPGS_V1.2.c: 570: }
  3719                           ;WHQ_TP_ZPGS_V1.2.c: 571: }
  3720                           ;WHQ_TP_ZPGS_V1.2.c: 572: if(!curupf)
  3721  018B  1E70               	btfss	_curupf/(0+8),_curupf& (0+7)	;volatile
  3722  018C  34FF               	retlw	255
  3723  018D  083F               	movf	_cur_addat,w	;volatile
  3724  018E  3E05               	addlw	5
  3725  018F  2373  118A         	fcall	PL4	;call to abstracted procedure
  3726  0191  1D03               	skipz
  3727  0192  2995               	goto	u3915
  3728  0193  301F               	movlw	31
  3729  0194  025F               	subwf	??_Test_water,w
  3730  0195                     u3915:	
  3731  0195  1C03               	btfss	3,0
  3732  0196  2A5E               	goto	l8234
  3733  0197  2A5F               	goto	l5014
  3734  0198                     l8236:	
  3735  0198  3012               	movlw	18
  3736  0199  023F               	subwf	_cur_addat,w	;volatile
  3737  019A  1803               	skipnc
  3738  019B  29A4               	goto	l8244
  3739                           
  3740                           ;WHQ_TP_ZPGS_V1.2.c: 587: {
  3741                           ;WHQ_TP_ZPGS_V1.2.c: 588: strupc = 0;
  3742  019C  1683               	bsf	3,5	;RP0=1, select bank1
  3743  019D  01A4               	clrf	Test_water@strupc^(0+128)
  3744  019E  01A5               	clrf	(Test_water@strupc+1)^(0+128)
  3745                           
  3746                           ;WHQ_TP_ZPGS_V1.2.c: 589: pwmlv = pfgonetemp.pfgtemp&0x03ff;
  3747  019F  0879               	movf	_pfgonetemp+1,w
  3748  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  3749  01A1  236B  118A         	fcall	PL2	;call to abstracted procedure
  3750                           
  3751                           ;WHQ_TP_ZPGS_V1.2.c: 590: }
  3752  01A3  29B2               	goto	l5000
  3753  01A4                     l8244:	
  3754                           
  3755                           ;WHQ_TP_ZPGS_V1.2.c: 591: else
  3756                           ;WHQ_TP_ZPGS_V1.2.c: 592: {
  3757                           ;WHQ_TP_ZPGS_V1.2.c: 593: if(++strupc >= 500)
  3758  01A4  1683               	bsf	3,5	;RP0=1, select bank1
  3759  01A5  0AA4               	incf	Test_water@strupc^(0+128),f
  3760  01A6  1903               	skipnz
  3761  01A7  0AA5               	incf	(Test_water@strupc+1)^(0+128),f
  3762  01A8  3001               	movlw	1
  3763  01A9  0225               	subwf	(Test_water@strupc+1)^(0+128),w
  3764  01AA  30F4               	movlw	244
  3765  01AB  1903               	skipnz
  3766  01AC  0224               	subwf	Test_water@strupc^(0+128),w
  3767  01AD  1C03               	skipc
  3768  01AE  29B2               	goto	l5000
  3769                           
  3770                           ;WHQ_TP_ZPGS_V1.2.c: 594: {
  3771                           ;WHQ_TP_ZPGS_V1.2.c: 595: strupc=0;
  3772  01AF  01A4               	clrf	Test_water@strupc^(0+128)
  3773  01B0  01A5               	clrf	(Test_water@strupc+1)^(0+128)
  3774  01B1  34FF               	retlw	255
  3775  01B2                     l5000:	
  3776                           
  3777                           ;WHQ_TP_ZPGS_V1.2.c: 597: }
  3778                           ;WHQ_TP_ZPGS_V1.2.c: 598: }
  3779                           ;WHQ_TP_ZPGS_V1.2.c: 599: if(curupf)
  3780  01B2  1E70               	btfss	_curupf/(0+8),_curupf& (0+7)	;volatile
  3781  01B3  29BF               	goto	l8260
  3782                           
  3783                           ;WHQ_TP_ZPGS_V1.2.c: 600: {
  3784                           ;WHQ_TP_ZPGS_V1.2.c: 601: curstrold = 0;
  3785  01B4  1683               	bsf	3,5	;RP0=1, select bank1
  3786  01B5  01A6               	clrf	Test_water@curstrold^(0+128)
  3787  01B6  01A7               	clrf	(Test_water@curstrold+1)^(0+128)
  3788                           
  3789                           ;WHQ_TP_ZPGS_V1.2.c: 602: if(curmax < cur_addat)
  3790  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  3791  01B8  083F               	movf	_cur_addat,w	;volatile
  3792  01B9  0232               	subwf	_curmax,w	;volatile
  3793  01BA  1803               	skipnc
  3794  01BB  2A5F               	goto	l5014
  3795                           
  3796                           ;WHQ_TP_ZPGS_V1.2.c: 603: {
  3797                           ;WHQ_TP_ZPGS_V1.2.c: 604: curmax = cur_addat;
  3798  01BC  083F               	movf	_cur_addat,w	;volatile
  3799  01BD  00B2               	movwf	_curmax	;volatile
  3800                           
  3801                           ;WHQ_TP_ZPGS_V1.2.c: 609: }
  3802                           ;WHQ_TP_ZPGS_V1.2.c: 610: }
  3803                           
  3804                           ;WHQ_TP_ZPGS_V1.2.c: 605: }
  3805  01BE  2A5F               	goto	l5014
  3806  01BF                     l8260:	
  3807                           
  3808                           ;WHQ_TP_ZPGS_V1.2.c: 611: else
  3809                           ;WHQ_TP_ZPGS_V1.2.c: 612: {
  3810                           ;WHQ_TP_ZPGS_V1.2.c: 613: curmax = 0;
  3811  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  3812  01C0  01B2               	clrf	_curmax	;volatile
  3813                           
  3814                           ;WHQ_TP_ZPGS_V1.2.c: 614: if(0 != curstrold)
  3815  01C1  1683               	bsf	3,5	;RP0=1, select bank1
  3816  01C2  0826               	movf	Test_water@curstrold^(0+128),w
  3817  01C3  0427               	iorwf	(Test_water@curstrold+1)^(0+128),w
  3818  01C4  1903               	btfsc	3,2
  3819  01C5  29FD               	goto	l5007
  3820                           
  3821                           ;WHQ_TP_ZPGS_V1.2.c: 615: {
  3822                           ;WHQ_TP_ZPGS_V1.2.c: 616: if(curstrold > cur_addat)
  3823  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  3824  01C7  083F               	movf	_cur_addat,w	;volatile
  3825  01C8  00DF               	movwf	??_Test_water
  3826  01C9  01E0               	clrf	??_Test_water+1
  3827  01CA  1683               	bsf	3,5	;RP0=1, select bank1
  3828  01CB  0827               	movf	(Test_water@curstrold+1)^(0+128),w
  3829  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  3830  01CD  0260               	subwf	??_Test_water+1,w
  3831  01CE  1D03               	skipz
  3832  01CF  29D4               	goto	u3975
  3833  01D0  1683               	bsf	3,5	;RP0=1, select bank1
  3834  01D1  0826               	movf	Test_water@curstrold^(0+128),w
  3835  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  3836  01D3  025F               	subwf	??_Test_water,w
  3837  01D4                     u3975:	
  3838  01D4  1803               	skipnc
  3839  01D5  29E1               	goto	l8276
  3840                           
  3841                           ;WHQ_TP_ZPGS_V1.2.c: 617: {
  3842                           ;WHQ_TP_ZPGS_V1.2.c: 618: curdownc++;
  3843  01D6  0ABC               	incf	_curdownc,f	;volatile
  3844                           
  3845                           ;WHQ_TP_ZPGS_V1.2.c: 619: if(curdownc >= 2)
  3846  01D7  3002               	movlw	2
  3847  01D8  023C               	subwf	_curdownc,w	;volatile
  3848  01D9  1C03               	skipc
  3849  01DA  29FD               	goto	l5007
  3850                           
  3851                           ;WHQ_TP_ZPGS_V1.2.c: 620: {
  3852                           ;WHQ_TP_ZPGS_V1.2.c: 621: curdownc = 0;
  3853  01DB  01BC               	clrf	_curdownc	;volatile
  3854                           
  3855                           ;WHQ_TP_ZPGS_V1.2.c: 622: curupc = 0;
  3856  01DC  01BD               	clrf	_curupc	;volatile
  3857                           
  3858                           ;WHQ_TP_ZPGS_V1.2.c: 623: pwmlv = pfgonetemp.pfgtemp&0x03ff;
  3859  01DD  0879               	movf	_pfgonetemp+1,w
  3860  01DE  236B  118A         	fcall	PL2	;call to abstracted procedure
  3861  01E0  29FD               	goto	l5007
  3862  01E1                     l8276:	
  3863                           
  3864                           ;WHQ_TP_ZPGS_V1.2.c: 626: else if(curstrold < cur_addat)
  3865  01E1  083F               	movf	_cur_addat,w	;volatile
  3866  01E2  00DF               	movwf	??_Test_water
  3867  01E3  01E0               	clrf	??_Test_water+1
  3868  01E4  0860               	movf	??_Test_water+1,w
  3869  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  3870  01E6  0227               	subwf	(Test_water@curstrold+1)^(0+128),w
  3871  01E7  1D03               	skipz
  3872  01E8  29ED               	goto	u3995
  3873  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  3874  01EA  085F               	movf	??_Test_water,w
  3875  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  3876  01EC  0226               	subwf	Test_water@curstrold^(0+128),w
  3877  01ED                     u3995:	
  3878  01ED  1803               	skipnc
  3879  01EE  29FD               	goto	l5007
  3880                           
  3881                           ;WHQ_TP_ZPGS_V1.2.c: 627: {
  3882                           ;WHQ_TP_ZPGS_V1.2.c: 628: curupc++;
  3883  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  3884  01F0  0ABD               	incf	_curupc,f	;volatile
  3885                           
  3886                           ;WHQ_TP_ZPGS_V1.2.c: 629: if(curupc >= 3)
  3887  01F1  3003               	movlw	3
  3888  01F2  023D               	subwf	_curupc,w	;volatile
  3889  01F3  1C03               	skipc
  3890  01F4  29FD               	goto	l5007
  3891                           
  3892                           ;WHQ_TP_ZPGS_V1.2.c: 630: {
  3893                           ;WHQ_TP_ZPGS_V1.2.c: 631: curupc = 0;
  3894  01F5  01BD               	clrf	_curupc	;volatile
  3895                           
  3896                           ;WHQ_TP_ZPGS_V1.2.c: 632: curdownc = 0;
  3897  01F6  01BC               	clrf	_curdownc	;volatile
  3898                           
  3899                           ;WHQ_TP_ZPGS_V1.2.c: 633: if(0 == curupf)
  3900  01F7  1A70               	btfsc	_curupf/(0+8),_curupf& (0+7)	;volatile
  3901  01F8  29FD               	goto	l5007
  3902                           
  3903                           ;WHQ_TP_ZPGS_V1.2.c: 634: {
  3904                           ;WHQ_TP_ZPGS_V1.2.c: 635: pwmlv = pfgonetemp.pfgtemp&0x03ff;
  3905  01F9  0879               	movf	_pfgonetemp+1,w
  3906  01FA  236B  118A         	fcall	PL2	;call to abstracted procedure
  3907                           
  3908                           ;WHQ_TP_ZPGS_V1.2.c: 636: }
  3909                           ;WHQ_TP_ZPGS_V1.2.c: 637: curupf = 1;
  3910  01FC  1670               	bsf	_curupf/(0+8),_curupf& (0+7)	;volatile
  3911  01FD                     l5007:	
  3912                           
  3913                           ;WHQ_TP_ZPGS_V1.2.c: 638: }
  3914                           ;WHQ_TP_ZPGS_V1.2.c: 639: }
  3915                           ;WHQ_TP_ZPGS_V1.2.c: 640: }
  3916                           ;WHQ_TP_ZPGS_V1.2.c: 641: curstrold = cur_addat;
  3917  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  3918  01FE  083F               	movf	_cur_addat,w	;volatile
  3919  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  3920  0200  00A6               	movwf	Test_water@curstrold^(0+128)
  3921  0201  01A7               	clrf	(Test_water@curstrold+1)^(0+128)
  3922  0202  2A5F               	goto	l5014
  3923  0203                     l4990:	
  3924                           
  3925                           ;WHQ_TP_ZPGS_V1.2.c: 646: else
  3926                           ;WHQ_TP_ZPGS_V1.2.c: 647: {
  3927                           ;WHQ_TP_ZPGS_V1.2.c: 648: if(!pwmtf1)
  3928  0203  1971               	btfsc	_pwmtf1/(0+8),_pwmtf1& (0+7)	;volatile
  3929  0204  2A0C               	goto	l8298
  3930                           
  3931                           ;WHQ_TP_ZPGS_V1.2.c: 649: {
  3932                           ;WHQ_TP_ZPGS_V1.2.c: 650: if(++Ytzpcl >= 125)
  3933  0205  307D               	movlw	125
  3934  0206  0AB7               	incf	_Ytzpcl,f	;volatile
  3935  0207  0237               	subwf	_Ytzpcl,w	;volatile
  3936  0208  1C03               	skipc
  3937  0209  2A5F               	goto	l5014
  3938                           
  3939                           ;WHQ_TP_ZPGS_V1.2.c: 651: {
  3940                           ;WHQ_TP_ZPGS_V1.2.c: 652: Ytzpcl=0;
  3941  020A  01B7               	clrf	_Ytzpcl	;volatile
  3942  020B  34FF               	retlw	255
  3943  020C                     l8298:	
  3944  020C  3021               	movlw	33
  3945  020D  023F               	subwf	_cur_addat,w	;volatile
  3946  020E  1C03               	skipc
  3947  020F  2A1A               	goto	l8302
  3948  0210  083F               	movf	_cur_addat,w	;volatile
  3949  0211  3E02               	addlw	2
  3950  0212  2373  118A         	fcall	PL4	;call to abstracted procedure
  3951  0214  1D03               	skipz
  3952  0215  2A18               	goto	u4055
  3953  0216  301E               	movlw	30
  3954  0217  025F               	subwf	??_Test_water,w
  3955  0218                     u4055:	
  3956  0218  1C03               	skipc
  3957  0219  2A1F               	goto	l5018
  3958  021A                     l8302:	
  3959                           
  3960                           ;WHQ_TP_ZPGS_V1.2.c: 659: {
  3961                           ;WHQ_TP_ZPGS_V1.2.c: 660: pwmlc = 0;
  3962  021A  1283               	bcf	3,5	;RP0=0, select bank0
  3963  021B  1303               	bcf	3,6	;RP1=0, select bank0
  3964  021C  01B3               	clrf	_pwmlc	;volatile
  3965                           
  3966                           ;WHQ_TP_ZPGS_V1.2.c: 661: pwmhc = 0;
  3967  021D  01B4               	clrf	_pwmhc	;volatile
  3968                           
  3969                           ;WHQ_TP_ZPGS_V1.2.c: 662: }
  3970  021E  2A53               	goto	l5021
  3971  021F                     l5018:	
  3972                           
  3973                           ;WHQ_TP_ZPGS_V1.2.c: 663: else
  3974                           ;WHQ_TP_ZPGS_V1.2.c: 664: {
  3975                           ;WHQ_TP_ZPGS_V1.2.c: 665: if(PFGchgf)
  3976  021F  1F70               	btfss	_PFGchgf/(0+8),_PFGchgf& (0+7)	;volatile
  3977  0220  2A53               	goto	l5021
  3978                           
  3979                           ;WHQ_TP_ZPGS_V1.2.c: 666: {
  3980                           ;WHQ_TP_ZPGS_V1.2.c: 667: PFGchgf = 0;
  3981  0221  1370               	bcf	_PFGchgf/(0+8),_PFGchgf& (0+7)	;volatile
  3982                           
  3983                           ;WHQ_TP_ZPGS_V1.2.c: 668: if(0 != pwmold)
  3984  0222  1283               	bcf	3,5	;RP0=0, select bank0
  3985  0223  1303               	bcf	3,6	;RP1=0, select bank0
  3986  0224  0822               	movf	_pwmold,w	;volatile
  3987  0225  0423               	iorwf	_pwmold+1,w	;volatile
  3988  0226  1903               	btfsc	3,2
  3989  0227  2A4B               	goto	l8332
  3990                           
  3991                           ;WHQ_TP_ZPGS_V1.2.c: 669: {
  3992                           ;WHQ_TP_ZPGS_V1.2.c: 670: if((pfgonetemp.pfgtemp & 0x03ff) > pwmold)
  3993  0228  237D  118A         	fcall	PL8	;call to abstracted procedure
  3994  022A  0223               	subwf	_pwmold+1,w	;volatile
  3995  022B  1D03               	skipz
  3996  022C  2A2F               	goto	u4085
  3997  022D  085F               	movf	??_Test_water,w
  3998  022E  0222               	subwf	_pwmold,w	;volatile
  3999  022F                     u4085:	
  4000  022F  1803               	skipnc
  4001  0230  2A39               	goto	l8320
  4002                           
  4003                           ;WHQ_TP_ZPGS_V1.2.c: 671: {
  4004                           ;WHQ_TP_ZPGS_V1.2.c: 672: pwmlc = 0;
  4005  0231  01B3               	clrf	_pwmlc	;volatile
  4006                           
  4007                           ;WHQ_TP_ZPGS_V1.2.c: 673: if(++pwmhc >= 6)
  4008  0232  3006               	movlw	6
  4009  0233  0AB4               	incf	_pwmhc,f	;volatile
  4010  0234  0234               	subwf	_pwmhc,w	;volatile
  4011  0235  1C03               	skipc
  4012  0236  2A4B               	goto	l8332
  4013                           
  4014                           ;WHQ_TP_ZPGS_V1.2.c: 674: {
  4015                           ;WHQ_TP_ZPGS_V1.2.c: 675: pwmhc = 0;
  4016  0237  01B4               	clrf	_pwmhc	;volatile
  4017  0238  34FF               	retlw	255
  4018  0239                     l8320:	
  4019                           
  4020                           ;WHQ_TP_ZPGS_V1.2.c: 679: else if((pfgonetemp.pfgtemp & 0x03ff) < pwmold)
  4021  0239  237D  118A         	fcall	PL8	;call to abstracted procedure
  4022  023B  0823               	movf	_pwmold+1,w	;volatile
  4023  023C  0260               	subwf	??_Test_water+1,w
  4024  023D  1D03               	skipz
  4025  023E  2A41               	goto	u4105
  4026  023F  0822               	movf	_pwmold,w	;volatile
  4027  0240  025F               	subwf	??_Test_water,w
  4028  0241                     u4105:	
  4029  0241  1803               	skipnc
  4030  0242  2A4B               	goto	l8332
  4031                           
  4032                           ;WHQ_TP_ZPGS_V1.2.c: 680: {
  4033                           ;WHQ_TP_ZPGS_V1.2.c: 681: pwmhc = 0;
  4034  0243  01B4               	clrf	_pwmhc	;volatile
  4035                           
  4036                           ;WHQ_TP_ZPGS_V1.2.c: 682: if(++pwmlc >= 6)
  4037  0244  3006               	movlw	6
  4038  0245  0AB3               	incf	_pwmlc,f	;volatile
  4039  0246  0233               	subwf	_pwmlc,w	;volatile
  4040  0247  1C03               	skipc
  4041  0248  2A4B               	goto	l8332
  4042                           
  4043                           ;WHQ_TP_ZPGS_V1.2.c: 683: {
  4044                           ;WHQ_TP_ZPGS_V1.2.c: 684: pwmlc = 0;
  4045  0249  01B3               	clrf	_pwmlc	;volatile
  4046  024A  34FF               	retlw	255
  4047  024B                     l8332:	
  4048                           
  4049                           ;WHQ_TP_ZPGS_V1.2.c: 686: }
  4050                           ;WHQ_TP_ZPGS_V1.2.c: 687: }
  4051                           ;WHQ_TP_ZPGS_V1.2.c: 689: }
  4052                           ;WHQ_TP_ZPGS_V1.2.c: 690: pwmold = pfgonetemp.pfgtemp & 0x03ff;
  4053  024B  0879               	movf	_pfgonetemp+1,w
  4054  024C  00A3               	movwf	_pwmold+1	;volatile
  4055  024D  0878               	movf	_pfgonetemp,w
  4056  024E  00A2               	movwf	_pwmold	;volatile
  4057  024F  30FF               	movlw	255
  4058  0250  05A2               	andwf	_pwmold,f	;volatile
  4059  0251  3003               	movlw	3
  4060  0252  05A3               	andwf	_pwmold+1,f	;volatile
  4061  0253                     l5021:	
  4062  0253  3024               	movlw	36
  4063  0254  1283               	bcf	3,5	;RP0=0, select bank0
  4064  0255  1303               	bcf	3,6	;RP1=0, select bank0
  4065  0256  00E2               	movwf	Test_water@temph
  4066                           
  4067                           ;WHQ_TP_ZPGS_V1.2.c: 695: if(cur_addat <= templ)
  4068  0257  301A               	movlw	26
  4069  0258  023F               	subwf	_cur_addat,w	;volatile
  4070  0259  1C03               	btfss	3,0
  4071                           
  4072                           ;WHQ_TP_ZPGS_V1.2.c: 696: {
  4073                           ;WHQ_TP_ZPGS_V1.2.c: 697: watnof = 1;
  4074  025A  14F0               	bsf	Test_water@watnof/(0+8),Test_water@watnof& (0+7)
  4075                           
  4076                           ;WHQ_TP_ZPGS_V1.2.c: 698: }
  4077                           ;WHQ_TP_ZPGS_V1.2.c: 699: if(cur_addat >= temph)
  4078  025B  3024               	movlw	36
  4079  025C  023F               	subwf	_cur_addat,w	;volatile
  4080  025D  1803               	btfsc	3,0
  4081  025E                     l8234:	
  4082                           
  4083                           ;WHQ_TP_ZPGS_V1.2.c: 579: {
  4084                           ;WHQ_TP_ZPGS_V1.2.c: 580: watnof=1;
  4085  025E  14F0               	bsf	Test_water@watnof/(0+8),Test_water@watnof& (0+7)
  4086  025F                     l5014:	
  4087                           
  4088                           ;WHQ_TP_ZPGS_V1.2.c: 702: }
  4089                           ;WHQ_TP_ZPGS_V1.2.c: 703: }
  4090                           ;WHQ_TP_ZPGS_V1.2.c: 704: }
  4091                           ;WHQ_TP_ZPGS_V1.2.c: 706: if(watnof)
  4092  025F  1CF0               	btfss	Test_water@watnof/(0+8),Test_water@watnof& (0+7)
  4093  0260  2A6B               	goto	l8352
  4094                           
  4095                           ;WHQ_TP_ZPGS_V1.2.c: 707: {
  4096                           ;WHQ_TP_ZPGS_V1.2.c: 708: wnoncl++;
  4097  0261  1283               	bcf	3,5	;RP0=0, select bank0
  4098  0262  1303               	bcf	3,6	;RP1=0, select bank0
  4099  0263  0AB6               	incf	_wnoncl,f	;volatile
  4100                           
  4101                           ;WHQ_TP_ZPGS_V1.2.c: 709: whavecl=0;
  4102  0264  01B5               	clrf	_whavecl	;volatile
  4103                           
  4104                           ;WHQ_TP_ZPGS_V1.2.c: 710: if(wnoncl >= 2)
  4105  0265  3002               	movlw	2
  4106  0266  0236               	subwf	_wnoncl,w	;volatile
  4107  0267  1C03               	skipc
  4108  0268  3400               	retlw	0
  4109                           
  4110                           ;WHQ_TP_ZPGS_V1.2.c: 711: {
  4111                           ;WHQ_TP_ZPGS_V1.2.c: 712: wnoncl=0;
  4112  0269  01B6               	clrf	_wnoncl	;volatile
  4113  026A  34FF               	retlw	255
  4114  026B                     l8352:	
  4115                           
  4116                           ;WHQ_TP_ZPGS_V1.2.c: 716: else
  4117                           ;WHQ_TP_ZPGS_V1.2.c: 717: {
  4118                           ;WHQ_TP_ZPGS_V1.2.c: 718: whavecl++;
  4119  026B  1283               	bcf	3,5	;RP0=0, select bank0
  4120  026C  1303               	bcf	3,6	;RP1=0, select bank0
  4121  026D  0AB5               	incf	_whavecl,f	;volatile
  4122                           
  4123                           ;WHQ_TP_ZPGS_V1.2.c: 719: if(whavecl>=5)
  4124  026E  3005               	movlw	5
  4125  026F  0235               	subwf	_whavecl,w	;volatile
  4126  0270  1C03               	skipc
  4127  0271  3400               	retlw	0
  4128                           
  4129                           ;WHQ_TP_ZPGS_V1.2.c: 720: {
  4130                           ;WHQ_TP_ZPGS_V1.2.c: 721: whavecl=0;
  4131  0272  01B5               	clrf	_whavecl	;volatile
  4132                           
  4133                           ;WHQ_TP_ZPGS_V1.2.c: 722: wnoncl=0;
  4134  0273  01B6               	clrf	_wnoncl	;volatile
  4135                           
  4136                           ;WHQ_TP_ZPGS_V1.2.c: 723: }
  4137                           ;WHQ_TP_ZPGS_V1.2.c: 724: }
  4138                           ;WHQ_TP_ZPGS_V1.2.c: 725: return 0;
  4139  0274  3400               	retlw	0
  4140  0275                     __end_of_Test_water:	
  4141  0275                     __ptext27:	
  4142 ;; *************** function ___awdiv *****************
  4143 ;; Defined at:
  4144 ;;		line 6 in file "C:\mcuproject\scm\CMS_IDE_V2.03.26\CMS_IDE_V2.03.26\data\sources\common\awdiv.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;  divisor         2    0[BANK0 ] int 
  4147 ;;  dividend        2    2[BANK0 ] int 
  4148 ;; Auto vars:     Size  Location     Type
  4149 ;;  quotient        2    6[BANK0 ] int 
  4150 ;;  sign            1    5[BANK0 ] unsigned char 
  4151 ;;  counter         1    4[BANK0 ] unsigned char 
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  2    0[BANK0 ] int 
  4154 ;; Registers used:
  4155 ;;		wreg, status,2, status,0
  4156 ;; Tracked objects:
  4157 ;;		On entry : 300/0
  4158 ;;		On exit  : 300/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4161 ;;      Params:         0       4       0       0       0
  4162 ;;      Locals:         0       4       0       0       0
  4163 ;;      Temps:          0       0       0       0       0
  4164 ;;      Totals:         0       8       0       0       0
  4165 ;;Total ram usage:        8 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    2
  4168 ;; This function calls:
  4169 ;;		Nothing
  4170 ;; This function is called by:
  4171 ;;		_Get_CUR_Dat
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           
  4176                           ;psect for function ___awdiv
  4177  0275                     ___awdiv:	
  4178                           
  4179                           ;incstack = 0
  4180                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4181  0275  01E4               	clrf	___awdiv@sign
  4182  0276  1FE0               	btfss	___awdiv@divisor+1,7
  4183  0277  2A7F               	goto	l8006
  4184  0278  09DF               	comf	___awdiv@divisor,f
  4185  0279  09E0               	comf	___awdiv@divisor+1,f
  4186  027A  0ADF               	incf	___awdiv@divisor,f
  4187  027B  1903               	skipnz
  4188  027C  0AE0               	incf	___awdiv@divisor+1,f
  4189  027D  01E4               	clrf	___awdiv@sign
  4190  027E  0AE4               	incf	___awdiv@sign,f
  4191  027F                     l8006:	
  4192  027F  1FE2               	btfss	___awdiv@dividend+1,7
  4193  0280  2A88               	goto	l8012
  4194  0281  09E1               	comf	___awdiv@dividend,f
  4195  0282  09E2               	comf	___awdiv@dividend+1,f
  4196  0283  0AE1               	incf	___awdiv@dividend,f
  4197  0284  1903               	skipnz
  4198  0285  0AE2               	incf	___awdiv@dividend+1,f
  4199  0286  3001               	movlw	1
  4200  0287  06E4               	xorwf	___awdiv@sign,f
  4201  0288                     l8012:	
  4202  0288  01E5               	clrf	___awdiv@quotient
  4203  0289  01E6               	clrf	___awdiv@quotient+1
  4204  028A  085F               	movf	___awdiv@divisor,w
  4205  028B  0460               	iorwf	___awdiv@divisor+1,w
  4206  028C  1903               	btfsc	3,2
  4207  028D  2AAD               	goto	l8034
  4208  028E  01E3               	clrf	___awdiv@counter
  4209  028F                     L8:	
  4210  028F  0AE3               	incf	___awdiv@counter,f
  4211  0290  1BE0               	btfsc	___awdiv@divisor+1,7
  4212  0291  2A96               	goto	l8022
  4213  0292  1003               	clrc
  4214  0293  0DDF               	rlf	___awdiv@divisor,f
  4215  0294  0DE0               	rlf	___awdiv@divisor+1,f
  4216  0295  2A8F               	goto	L8
  4217  0296                     l8022:	
  4218  0296  1003               	clrc
  4219  0297  0DE5               	rlf	___awdiv@quotient,f
  4220  0298  0DE6               	rlf	___awdiv@quotient+1,f
  4221  0299  0860               	movf	___awdiv@divisor+1,w
  4222  029A  0262               	subwf	___awdiv@dividend+1,w
  4223  029B  1D03               	skipz
  4224  029C  2A9F               	goto	u3735
  4225  029D  085F               	movf	___awdiv@divisor,w
  4226  029E  0261               	subwf	___awdiv@dividend,w
  4227  029F                     u3735:	
  4228  029F  1C03               	skipc
  4229  02A0  2AA9               	goto	L9
  4230  02A1  085F               	movf	___awdiv@divisor,w
  4231  02A2  02E1               	subwf	___awdiv@dividend,f
  4232  02A3  0860               	movf	___awdiv@divisor+1,w
  4233  02A4  1C03               	skipc
  4234  02A5  03E2               	decf	___awdiv@dividend+1,f
  4235  02A6  02E2               	subwf	___awdiv@dividend+1,f
  4236  02A7  1465               	bsf	___awdiv@quotient,0
  4237  02A8  1003               	clrc
  4238  02A9                     L9:	
  4239  02A9  0CE0               	rrf	___awdiv@divisor+1,f
  4240  02AA  0CDF               	rrf	___awdiv@divisor,f
  4241  02AB  0BE3               	decfsz	___awdiv@counter,f
  4242  02AC  2A96               	goto	l8022
  4243  02AD                     l8034:	
  4244  02AD  0864               	movf	___awdiv@sign,w
  4245  02AE  1903               	btfsc	3,2
  4246  02AF  2AB5               	goto	l8038
  4247  02B0  09E5               	comf	___awdiv@quotient,f
  4248  02B1  09E6               	comf	___awdiv@quotient+1,f
  4249  02B2  0AE5               	incf	___awdiv@quotient,f
  4250  02B3  1903               	skipnz
  4251  02B4  0AE6               	incf	___awdiv@quotient+1,f
  4252  02B5                     l8038:	
  4253  02B5  0866               	movf	___awdiv@quotient+1,w
  4254  02B6  00E0               	movwf	?___awdiv+1
  4255  02B7  0865               	movf	___awdiv@quotient,w
  4256  02B8  00DF               	movwf	?___awdiv
  4257  02B9  0008               	return
  4258  02BA                     __end_of___awdiv:	
  4259  02BA                     __ptext24:	
  4260 ;; *************** function _PFG_read_fst *****************
  4261 ;; Defined at:
  4262 ;;		line 206 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;		None
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;  temp            2    7[BANK0 ] unsigned int 
  4267 ;;  pfgconset       1    6[BANK0 ] unsigned char 
  4268 ;;  temph           1    5[BANK0 ] unsigned char 
  4269 ;;  templ           1    4[BANK0 ] unsigned char 
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  1    wreg      void 
  4272 ;; Registers used:
  4273 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4274 ;; Tracked objects:
  4275 ;;		On entry : 300/0
  4276 ;;		On exit  : 300/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4279 ;;      Params:         0       0       0       0       0
  4280 ;;      Locals:         0       5       0       0       0
  4281 ;;      Temps:          0       2       0       0       0
  4282 ;;      Totals:         0       7       0       0       0
  4283 ;;Total ram usage:        7 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    3
  4286 ;; This function calls:
  4287 ;;		_Set_jiyi_re
  4288 ;; This function is called by:
  4289 ;;		_Test_Pwm
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           
  4294                           ;psect for function _PFG_read_fst
  4295  02BA                     _PFG_read_fst:	
  4296                           
  4297                           ;WHQ_TP_ZPGS_V1.2.c: 208: unsigned char templ,temph;
  4298                           ;WHQ_TP_ZPGS_V1.2.c: 209: unsigned int temp;
  4299                           ;WHQ_TP_ZPGS_V1.2.c: 210: unsigned char pfgconset;
  4300                           ;WHQ_TP_ZPGS_V1.2.c: 212: switch(pfg_select)
  4301                           
  4302                           ;incstack = 0
  4303                           ; Regs used in _PFG_read_fst: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4304  02BA  2AE4               	goto	l8062
  4305  02BB                     l8044:	
  4306                           
  4307                           ;WHQ_TP_ZPGS_V1.2.c: 215: {
  4308                           ;WHQ_TP_ZPGS_V1.2.c: 216: templ = Set_jiyi_re(0x18);
  4309  02BB  3018               	movlw	24
  4310  02BC  232E  118A         	fcall	_Set_jiyi_re
  4311  02BE  00E3               	movwf	PFG_read_fst@templ
  4312                           
  4313                           ;WHQ_TP_ZPGS_V1.2.c: 217: temph = Set_jiyi_re(0x19);
  4314  02BF  3019               	movlw	25
  4315  02C0  232E  118A         	fcall	_Set_jiyi_re
  4316  02C2  00E4               	movwf	PFG_read_fst@temph
  4317                           
  4318                           ;WHQ_TP_ZPGS_V1.2.c: 218: pfgconset = 0x04;
  4319  02C3  3004               	movlw	4
  4320  02C4  2AE2               	goto	L7
  4321  02C5                     l8048:	
  4322                           ;WHQ_TP_ZPGS_V1.2.c: 219: break;
  4323                           
  4324                           
  4325                           ;WHQ_TP_ZPGS_V1.2.c: 222: {
  4326                           ;WHQ_TP_ZPGS_V1.2.c: 223: templ = Set_jiyi_re(0x1a);
  4327  02C5  301A               	movlw	26
  4328  02C6  232E  118A         	fcall	_Set_jiyi_re
  4329  02C8  00E3               	movwf	PFG_read_fst@templ
  4330                           
  4331                           ;WHQ_TP_ZPGS_V1.2.c: 224: temph = Set_jiyi_re(0x1b);
  4332  02C9  301B               	movlw	27
  4333  02CA  232E  118A         	fcall	_Set_jiyi_re
  4334  02CC  00E4               	movwf	PFG_read_fst@temph
  4335                           
  4336                           ;WHQ_TP_ZPGS_V1.2.c: 225: pfgconset = 0x24;
  4337  02CD  3024               	movlw	36
  4338  02CE  2AE2               	goto	L7
  4339  02CF                     l8052:	
  4340                           ;WHQ_TP_ZPGS_V1.2.c: 226: break;
  4341                           
  4342                           
  4343                           ;WHQ_TP_ZPGS_V1.2.c: 229: {
  4344                           ;WHQ_TP_ZPGS_V1.2.c: 230: templ = Set_jiyi_re(0x1c);
  4345  02CF  301C               	movlw	28
  4346  02D0  232E  118A         	fcall	_Set_jiyi_re
  4347  02D2  00E3               	movwf	PFG_read_fst@templ
  4348                           
  4349                           ;WHQ_TP_ZPGS_V1.2.c: 231: temph = Set_jiyi_re(0x1d);
  4350  02D3  301D               	movlw	29
  4351  02D4  232E  118A         	fcall	_Set_jiyi_re
  4352  02D6  00E4               	movwf	PFG_read_fst@temph
  4353                           
  4354                           ;WHQ_TP_ZPGS_V1.2.c: 232: pfgconset = 0x44;
  4355  02D7  3044               	movlw	68
  4356  02D8  2AE2               	goto	L7
  4357  02D9                     l8056:	
  4358                           ;WHQ_TP_ZPGS_V1.2.c: 233: break;
  4359                           
  4360                           
  4361                           ;WHQ_TP_ZPGS_V1.2.c: 236: {
  4362                           ;WHQ_TP_ZPGS_V1.2.c: 237: templ = Set_jiyi_re(0x1e);
  4363  02D9  301E               	movlw	30
  4364  02DA  232E  118A         	fcall	_Set_jiyi_re
  4365  02DC  00E3               	movwf	PFG_read_fst@templ
  4366                           
  4367                           ;WHQ_TP_ZPGS_V1.2.c: 238: temph = Set_jiyi_re(0x1f);
  4368  02DD  301F               	movlw	31
  4369  02DE  232E  118A         	fcall	_Set_jiyi_re
  4370  02E0  00E4               	movwf	PFG_read_fst@temph
  4371                           
  4372                           ;WHQ_TP_ZPGS_V1.2.c: 239: pfgconset = 0x64;
  4373  02E1  3064               	movlw	100
  4374  02E2                     L7:	
  4375  02E2  00E5               	movwf	PFG_read_fst@pfgconset
  4376                           
  4377                           ;WHQ_TP_ZPGS_V1.2.c: 240: break;
  4378  02E3  2AF6               	goto	l8064
  4379  02E4                     l8062:	
  4380  02E4  3001               	movlw	low (_pfg_select-__stringbase)
  4381  02E5  0084               	movwf	4
  4382  02E6  118A  27F4  118A   	fcall	stringdir
  4383                           
  4384                           ; Switch size 1, requested type "space"
  4385                           ; Number of cases is 4, Range of values is 1 to 4
  4386                           ; switch strategies available:
  4387                           ; Name         Instructions Cycles
  4388                           ; simple_byte           13     7 (average)
  4389                           ; direct_byte           18    10 (fixed)
  4390                           ; jumptable            263     9 (fixed)
  4391                           ;	Chosen strategy is simple_byte
  4392  02E9  3A01               	xorlw	1	; case 1
  4393  02EA  1903               	skipnz
  4394  02EB  2ABB               	goto	l8044
  4395  02EC  3A03               	xorlw	3	; case 2
  4396  02ED  1903               	skipnz
  4397  02EE  2AC5               	goto	l8048
  4398  02EF  3A01               	xorlw	1	; case 3
  4399  02F0  1903               	skipnz
  4400  02F1  2ACF               	goto	l8052
  4401  02F2  3A07               	xorlw	7	; case 4
  4402  02F3  1903               	skipnz
  4403  02F4  2AD9               	goto	l8056
  4404  02F5  2AF6               	goto	l8064
  4405  02F6                     l8064:	
  4406                           
  4407                           ;WHQ_TP_ZPGS_V1.2.c: 244: temph = (unsigned char)(temph&0x03);
  4408  02F6  3003               	movlw	3
  4409  02F7  05E4               	andwf	PFG_read_fst@temph,f
  4410                           
  4411                           ;WHQ_TP_ZPGS_V1.2.c: 245: temp = (unsigned int)(temph*256 + templ);
  4412  02F8  0864               	movf	PFG_read_fst@temph,w
  4413  02F9  00E7               	movwf	PFG_read_fst@temp+1
  4414  02FA  01E6               	clrf	PFG_read_fst@temp
  4415  02FB  0863               	movf	PFG_read_fst@templ,w
  4416  02FC  07E6               	addwf	PFG_read_fst@temp,f
  4417  02FD  1803               	skipnc
  4418  02FE  0AE7               	incf	PFG_read_fst@temp+1,f
  4419  02FF  3000               	movlw	0
  4420  0300  0267               	subwf	PFG_read_fst@temp+1,w
  4421  0301  30FB               	movlw	251
  4422  0302  1903               	skipnz
  4423  0303  0266               	subwf	PFG_read_fst@temp,w
  4424  0304  1C03               	skipc
  4425  0305  2B0F               	goto	l8074
  4426  0306  0866               	movf	PFG_read_fst@temp,w
  4427  0307  3E06               	addlw	6
  4428  0308  00A8               	movwf	_pwmfst	;volatile
  4429  0309  0867               	movf	PFG_read_fst@temp+1,w
  4430  030A  1803               	skipnc
  4431  030B  3E01               	addlw	1
  4432  030C  3EFF               	addlw	255
  4433  030D  00A9               	movwf	_pwmfst+1	;volatile
  4434  030E  2B11               	goto	l8076
  4435  030F                     l8074:	
  4436                           
  4437                           ;WHQ_TP_ZPGS_V1.2.c: 248: else
  4438                           ;WHQ_TP_ZPGS_V1.2.c: 249: pwmfst = 0;
  4439  030F  01A8               	clrf	_pwmfst	;volatile
  4440  0310  01A9               	clrf	_pwmfst+1	;volatile
  4441  0311                     l8076:	
  4442  0311  0866               	movf	PFG_read_fst@temp,w
  4443  0312  3EFA               	addlw	250
  4444  0313  00A6               	movwf	_pwmlst	;volatile
  4445  0314  0867               	movf	PFG_read_fst@temp+1,w
  4446  0315  1803               	skipnc
  4447  0316  3E01               	addlw	1
  4448  0317  3E00               	addlw	0
  4449  0318  00A7               	movwf	_pwmlst+1	;volatile
  4450                           
  4451                           ;WHQ_TP_ZPGS_V1.2.c: 252: if((pwmlst&0x0400) != 0)
  4452  0319  1D27               	btfss	_pwmlst+1,2	;volatile
  4453  031A  2B1E               	goto	l8082
  4454                           
  4455                           ;WHQ_TP_ZPGS_V1.2.c: 253: pwmlst = 1024;
  4456  031B  01A6               	clrf	_pwmlst	;volatile
  4457  031C  3004               	movlw	4
  4458  031D  00A7               	movwf	_pwmlst+1	;volatile
  4459  031E                     l8082:	
  4460                           
  4461                           ;WHQ_TP_ZPGS_V1.2.c: 255: pwmfst = (unsigned int)(pwmfst|(unsigned int)(pfgconset<<8));
  4462  031E  2383  118A         	fcall	PL10	;call to abstracted procedure
  4463  0320  04A8               	iorwf	_pwmfst,f	;volatile
  4464  0321  0862               	movf	??_PFG_read_fst+1,w
  4465  0322  04A9               	iorwf	_pwmfst+1,f	;volatile
  4466                           
  4467                           ;WHQ_TP_ZPGS_V1.2.c: 256: pwmlst = (unsigned int)(pwmlst|(unsigned int)(pfgconset<<8));
  4468  0323  2383  118A         	fcall	PL10	;call to abstracted procedure
  4469  0325  04A6               	iorwf	_pwmlst,f	;volatile
  4470  0326  0862               	movf	??_PFG_read_fst+1,w
  4471  0327  04A7               	iorwf	_pwmlst+1,f	;volatile
  4472                           
  4473                           ;WHQ_TP_ZPGS_V1.2.c: 257: pfgonetemp.pfgtemp = pwmfst;
  4474                           
  4475                           ;WHQ_TP_ZPGS_V1.2.c: 258: PfgChangef = 1;
  4476  0328  238A               	fcall	PL12	;call to abstracted procedure
  4477                           
  4478                           ;WHQ_TP_ZPGS_V1.2.c: 259: pwmnold = pfgonetemp.pfgtemp;
  4479  0329  0879               	movf	_pfgonetemp+1,w
  4480  032A  00A5               	movwf	_pwmnold+1	;volatile
  4481  032B  0878               	movf	_pfgonetemp,w
  4482  032C  00A4               	movwf	_pwmnold	;volatile
  4483  032D  0008               	return
  4484  032E                     __end_of_PFG_read_fst:	
  4485  032E                     __ptext25:	
  4486 ;; *************** function _Set_jiyi_re *****************
  4487 ;; Defined at:
  4488 ;;		line 68 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.
      +4M - ¸±±¾\Eeprom.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;  raddr           1    wreg     unsigned char 
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;  raddr           1    0[BANK0 ] unsigned char 
  4493 ;;  redata          1    1[BANK0 ] unsigned char 
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  1    wreg      unsigned char 
  4496 ;; Registers used:
  4497 ;;		wreg
  4498 ;; Tracked objects:
  4499 ;;		On entry : 300/0
  4500 ;;		On exit  : 300/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4503 ;;      Params:         0       0       0       0       0
  4504 ;;      Locals:         0       2       0       0       0
  4505 ;;      Temps:          0       0       0       0       0
  4506 ;;      Totals:         0       2       0       0       0
  4507 ;;Total ram usage:        2 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    2
  4510 ;; This function calls:
  4511 ;;		Nothing
  4512 ;; This function is called by:
  4513 ;;		_PFG_read_fst
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           
  4518                           ;psect for function _Set_jiyi_re
  4519  032E                     _Set_jiyi_re:	
  4520                           
  4521                           ;incstack = 0
  4522                           ; Regs used in _Set_jiyi_re: [wreg]
  4523                           ;Set_jiyi_re@raddr stored from wreg
  4524  032E  00DF               	movwf	Set_jiyi_re@raddr
  4525                           
  4526                           ;Eeprom.c: 70: unsigned char redata;
  4527                           ;Eeprom.c: 72: EEADR = raddr;
  4528  032F  1703               	bsf	3,6	;RP1=1, select bank2
  4529  0330  008D               	movwf	13	;volatile
  4530  0331  0000               	nop	;# 
  4531                           
  4532                           ;Eeprom.c: 74: EEPGD = 0;
  4533  0332  1683               	bsf	3,5	;RP0=1, select bank3
  4534  0333  1703               	bsf	3,6	;RP1=1, select bank3
  4535  0334  138C               	bcf	12,7	;volsfr
  4536  0335  0000               	nop	;# 
  4537                           
  4538                           ;Eeprom.c: 76: RD = 1;
  4539  0336  1683               	bsf	3,5	;RP0=1, select bank3
  4540  0337  1703               	bsf	3,6	;RP1=1, select bank3
  4541  0338  140C               	bsf	12,0	;volsfr
  4542  0339  0000               	nop	;# 
  4543  033A  0000               	nop	;# 
  4544  033B  0000               	nop	;# 
  4545                           
  4546                           ;Eeprom.c: 80: redata = EEDAT;
  4547  033C  1283               	bcf	3,5	;RP0=0, select bank2
  4548  033D  1703               	bsf	3,6	;RP1=1, select bank2
  4549  033E  080C               	movf	12,w	;volatile
  4550  033F  1303               	bcf	3,6	;RP1=0, select bank0
  4551  0340  00E0               	movwf	Set_jiyi_re@redata
  4552                           
  4553                           ;Eeprom.c: 81: return redata;
  4554  0341  0008               	return
  4555  0342                     __end_of_Set_jiyi_re:	
  4556  0342                     __ptext17:	
  4557 ;; *************** function _Work_RAM_CLR *****************
  4558 ;; Defined at:
  4559 ;;		line 416 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  4560 ;; Parameters:    Size  Location     Type
  4561 ;;		None
  4562 ;; Auto vars:     Size  Location     Type
  4563 ;;		None
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  1    wreg      void 
  4566 ;; Registers used:
  4567 ;;		wreg, status,2, status,0
  4568 ;; Tracked objects:
  4569 ;;		On entry : 300/0
  4570 ;;		On exit  : 300/200
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4573 ;;      Params:         0       0       0       0       0
  4574 ;;      Locals:         0       0       0       0       0
  4575 ;;      Temps:          0       2       0       0       0
  4576 ;;      Totals:         0       2       0       0       0
  4577 ;;Total ram usage:        2 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    2
  4580 ;; This function calls:
  4581 ;;		Nothing
  4582 ;; This function is called by:
  4583 ;;		_Test_Pwm
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           
  4588                           ;psect for function _Work_RAM_CLR
  4589  0342                     _Work_RAM_CLR:	
  4590                           
  4591                           ;WHQ_TP_ZPGS_V1.2.c: 435: else
  4592                           ;WHQ_TP_ZPGS_V1.2.c: 436: {
  4593                           ;WHQ_TP_ZPGS_V1.2.c: 437: pwmtf = 0;
  4594                           
  4595                           ;incstack = 0
  4596                           ; Regs used in _Work_RAM_CLR: [wreg+status,2+status,0]
  4597  0342  11F1               	bcf	_pwmtf/(0+8),_pwmtf& (0+7)	;volatile
  4598                           
  4599                           ;WHQ_TP_ZPGS_V1.2.c: 438: pwmtf1 = 0;
  4600  0343  1171               	bcf	_pwmtf1/(0+8),_pwmtf1& (0+7)	;volatile
  4601                           
  4602                           ;WHQ_TP_ZPGS_V1.2.c: 439: pwmtonf = 0;
  4603  0344  10F1               	bcf	_pwmtonf/(0+8),_pwmtonf& (0+7)	;volatile
  4604                           
  4605                           ;WHQ_TP_ZPGS_V1.2.c: 440: pfgonetemp.pfgtemp = (pfgonetemp.pfgtemp & 0x8000) + pwmfst;
  4606  0345  3080               	movlw	128
  4607  0346  01DF               	clrf	??_Work_RAM_CLR
  4608  0347  0579               	andwf	_pfgonetemp+1,w
  4609  0348  00E0               	movwf	??_Work_RAM_CLR+1
  4610  0349  0828               	movf	_pwmfst,w	;volatile
  4611  034A  075F               	addwf	??_Work_RAM_CLR,w
  4612  034B  00F8               	movwf	_pfgonetemp
  4613  034C  0829               	movf	_pwmfst+1,w	;volatile
  4614  034D  1803               	skipnc
  4615  034E  0A29               	incf	_pwmfst+1,w	;volatile
  4616  034F  0760               	addwf	??_Work_RAM_CLR+1,w
  4617  0350  00F9               	movwf	_pfgonetemp+1
  4618                           
  4619                           ;WHQ_TP_ZPGS_V1.2.c: 441: pwmnold = pfgonetemp.pfgtemp & 0x7fff;
  4620  0351  00A5               	movwf	_pwmnold+1	;volatile
  4621  0352  0878               	movf	_pfgonetemp,w
  4622  0353  00A4               	movwf	_pwmnold	;volatile
  4623  0354  13A5               	bcf	_pwmnold+1,7	;volatile
  4624                           
  4625                           ;WHQ_TP_ZPGS_V1.2.c: 442: PfgChangef = 1;
  4626  0355  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  4627                           
  4628                           ;WHQ_TP_ZPGS_V1.2.c: 443: ponecf = 0;
  4629  0356  1071               	bcf	_ponecf/(0+8),_ponecf& (0+7)	;volatile
  4630                           
  4631                           ;WHQ_TP_ZPGS_V1.2.c: 444: cur_addatold0 = 0;
  4632  0357  01BB               	clrf	_cur_addatold0	;volatile
  4633                           
  4634                           ;WHQ_TP_ZPGS_V1.2.c: 445: cur_addatold1 = 0;
  4635  0358  01BA               	clrf	_cur_addatold1	;volatile
  4636                           
  4637                           ;WHQ_TP_ZPGS_V1.2.c: 446: cur_addatold2 = 0;
  4638  0359  01B9               	clrf	_cur_addatold2	;volatile
  4639                           
  4640                           ;WHQ_TP_ZPGS_V1.2.c: 447: curokcl = 0;
  4641  035A  01B8               	clrf	_curokcl	;volatile
  4642                           
  4643                           ;WHQ_TP_ZPGS_V1.2.c: 448: onoff_fst = 0;
  4644  035B  12F0               	bcf	_onoff_fst/(0+8),_onoff_fst& (0+7)	;volatile
  4645                           
  4646                           ;WHQ_TP_ZPGS_V1.2.c: 449: whavecl = 0;
  4647  035C  01B5               	clrf	_whavecl	;volatile
  4648                           
  4649                           ;WHQ_TP_ZPGS_V1.2.c: 450: wnoncl = 0;
  4650  035D  01B6               	clrf	_wnoncl	;volatile
  4651                           
  4652                           ;WHQ_TP_ZPGS_V1.2.c: 451: ponesec = 0;
  4653  035E  01BE               	clrf	_ponesec	;volatile
  4654                           
  4655                           ;WHQ_TP_ZPGS_V1.2.c: 452: curupc = 0;
  4656  035F  01BD               	clrf	_curupc	;volatile
  4657                           
  4658                           ;WHQ_TP_ZPGS_V1.2.c: 453: curdownc = 0;
  4659  0360  01BC               	clrf	_curdownc	;volatile
  4660                           
  4661                           ;WHQ_TP_ZPGS_V1.2.c: 454: curupf = 0;
  4662  0361  1270               	bcf	_curupf/(0+8),_curupf& (0+7)	;volatile
  4663                           
  4664                           ;WHQ_TP_ZPGS_V1.2.c: 455: pwmlv = 0;
  4665  0362  01A0               	clrf	_pwmlv	;volatile
  4666  0363  01A1               	clrf	_pwmlv+1	;volatile
  4667                           
  4668                           ;WHQ_TP_ZPGS_V1.2.c: 456: pwmold = 0;
  4669  0364  01A2               	clrf	_pwmold	;volatile
  4670  0365  01A3               	clrf	_pwmold+1	;volatile
  4671                           
  4672                           ;WHQ_TP_ZPGS_V1.2.c: 457: pwmhc = 0;
  4673  0366  01B4               	clrf	_pwmhc	;volatile
  4674                           
  4675                           ;WHQ_TP_ZPGS_V1.2.c: 458: pwmlc = 0;
  4676  0367  01B3               	clrf	_pwmlc	;volatile
  4677                           
  4678                           ;WHQ_TP_ZPGS_V1.2.c: 459: PFGCON1 &= ~0x80;
  4679  0368  1703               	bsf	3,6	;RP1=1, select bank2
  4680  0369  139E               	bcf	30,7	;volatile
  4681  036A  0008               	return
  4682  036B                     __end_of_Work_RAM_CLR:	
  4683  036B                     PL2:	
  4684  036B  00A1               	movwf	_pwmlv+1	;volatile
  4685  036C  0878               	movf	_pfgonetemp,w
  4686  036D  00A0               	movwf	_pwmlv	;volatile
  4687  036E  30FF               	movlw	255
  4688  036F  05A0               	andwf	_pwmlv,f	;volatile
  4689  0370  3003               	movlw	3
  4690  0371  05A1               	andwf	_pwmlv+1,f	;volatile
  4691  0372  0008               	return
  4692  0373                     __end_ofPL2:	
  4693  0373                     PL4:	
  4694  0373  00DF               	movwf	??_Test_water
  4695  0374  3000               	movlw	0
  4696  0375  1803               	skipnc
  4697  0376  3001               	movlw	1
  4698  0377  00E0               	movwf	??_Test_water+1
  4699  0378  3A80               	xorlw	128
  4700  0379  00FF               	movwf	127
  4701  037A  3080               	movlw	128
  4702  037B  027F               	subwf	127,w
  4703  037C  0008               	return
  4704  037D                     __end_ofPL4:	
  4705  037D                     PL8:	
  4706  037D  0878               	movf	_pfgonetemp,w
  4707  037E  00DF               	movwf	??_Test_water
  4708  037F  3003               	movlw	3
  4709  0380  0579               	andwf	_pfgonetemp+1,w
  4710  0381  00E0               	movwf	??_Test_water+1
  4711  0382  0008               	return
  4712  0383                     __end_ofPL8:	
  4713  0383                     PL10:	
  4714  0383  0865               	movf	PFG_read_fst@pfgconset,w
  4715  0384  00E1               	movwf	??_PFG_read_fst
  4716  0385  01E2               	clrf	??_PFG_read_fst+1
  4717  0386  00E2               	movwf	??_PFG_read_fst+1
  4718  0387  01E1               	clrf	??_PFG_read_fst
  4719  0388  0861               	movf	??_PFG_read_fst,w
  4720  0389  0008               	return
  4721  038A                     __end_ofPL10:	
  4722  038A                     PL12:	
  4723  038A  0829               	movf	_pwmfst+1,w	;volatile
  4724  038B  00F9               	movwf	_pfgonetemp+1
  4725  038C  0828               	movf	_pwmfst,w	;volatile
  4726  038D  00F8               	movwf	_pfgonetemp
  4727  038E  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  4728  038F  0008               	return
  4729  0390                     __end_ofPL12:	
  4730                           
  4731                           	psect	text20
  4732  0795                     __ptext20:	
  4733 ;; *************** function _YTPFG_Flash *****************
  4734 ;; Defined at:
  4735 ;;		line 485 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;		None
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  temp            2    3[BANK0 ] unsigned int 
  4740 ;;  templ           1    2[BANK0 ] unsigned char 
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  1    wreg      void 
  4743 ;; Registers used:
  4744 ;;		wreg, status,2, status,0
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 300/200
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4750 ;;      Params:         0       0       0       0       0
  4751 ;;      Locals:         0       3       0       0       0
  4752 ;;      Temps:          0       2       0       0       0
  4753 ;;      Totals:         0       5       0       0       0
  4754 ;;Total ram usage:        5 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    2
  4757 ;; This function calls:
  4758 ;;		Nothing
  4759 ;; This function is called by:
  4760 ;;		_Test_PWM_Fst
  4761 ;;		_Test_Pwm
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           
  4766                           ;psect for function _YTPFG_Flash
  4767  0795                     _YTPFG_Flash:	
  4768                           
  4769                           ;WHQ_TP_ZPGS_V1.2.c: 487: unsigned char templ;
  4770                           ;WHQ_TP_ZPGS_V1.2.c: 488: unsigned int temp;
  4771                           ;WHQ_TP_ZPGS_V1.2.c: 490: temp = (pfgonetemp.pfgtemp & 0x03ff) + Drange;
  4772                           
  4773                           ;incstack = 0
  4774                           ; Regs used in _YTPFG_Flash: [wreg+status,2+status,0]
  4775  0795  0879               	movf	_pfgonetemp+1,w
  4776  0796  1283               	bcf	3,5	;RP0=0, select bank0
  4777  0797  1303               	bcf	3,6	;RP1=0, select bank0
  4778  0798  00E3               	movwf	YTPFG_Flash@temp+1
  4779  0799  0878               	movf	_pfgonetemp,w
  4780  079A  00E2               	movwf	YTPFG_Flash@temp
  4781  079B  3003               	movlw	3
  4782  079C  05E3               	andwf	YTPFG_Flash@temp+1,f
  4783  079D  3010               	movlw	16
  4784  079E  07E2               	addwf	YTPFG_Flash@temp,f
  4785  079F  1803               	skipnc
  4786  07A0  0AE3               	incf	YTPFG_Flash@temp+1,f
  4787                           
  4788                           ;WHQ_TP_ZPGS_V1.2.c: 491: PFGDATA1 = (unsigned char)(temp);
  4789  07A1  0862               	movf	YTPFG_Flash@temp,w
  4790  07A2  1703               	bsf	3,6	;RP1=1, select bank2
  4791  07A3  009F               	movwf	31	;volatile
  4792                           
  4793                           ;WHQ_TP_ZPGS_V1.2.c: 492: templ = (unsigned char)((temp >> 3) & 0x60);
  4794  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  4795  07A5  0863               	movf	YTPFG_Flash@temp+1,w
  4796  07A6  00E0               	movwf	??_YTPFG_Flash+1
  4797  07A7  0862               	movf	YTPFG_Flash@temp,w
  4798  07A8  00DF               	movwf	??_YTPFG_Flash
  4799  07A9  1003               	clrc
  4800  07AA  0CE0               	rrf	??_YTPFG_Flash+1,f
  4801  07AB  0CDF               	rrf	??_YTPFG_Flash,f
  4802  07AC  1003               	clrc
  4803  07AD  0CE0               	rrf	??_YTPFG_Flash+1,f
  4804  07AE  0CDF               	rrf	??_YTPFG_Flash,f
  4805  07AF  1003               	clrc
  4806  07B0  0CE0               	rrf	??_YTPFG_Flash+1,f
  4807  07B1  0CDF               	rrf	??_YTPFG_Flash,f
  4808  07B2  085F               	movf	??_YTPFG_Flash,w
  4809  07B3  00E1               	movwf	YTPFG_Flash@templ
  4810  07B4  3060               	movlw	96
  4811  07B5  05E1               	andwf	YTPFG_Flash@templ,f
  4812  07B6  0861               	movf	YTPFG_Flash@templ,w
  4813  07B7  388A               	iorlw	138
  4814  07B8  1703               	bsf	3,6	;RP1=1, select bank2
  4815  07B9  009E               	movwf	30	;volatile
  4816  07BA  0008               	return
  4817  07BB                     __end_of_YTPFG_Flash:	
  4818                           
  4819                           	psect	text28
  4820  07E7                     __ptext28:	
  4821 ;; *************** function _Init_ram *****************
  4822 ;; Defined at:
  4823 ;;		line 117 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;		None
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;		None
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  1    wreg      void 
  4830 ;; Registers used:
  4831 ;;		wreg, status,2
  4832 ;; Tracked objects:
  4833 ;;		On entry : 300/0
  4834 ;;		On exit  : 300/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4837 ;;      Params:         0       0       0       0       0
  4838 ;;      Locals:         0       0       0       0       0
  4839 ;;      Temps:          0       0       0       0       0
  4840 ;;      Totals:         0       0       0       0       0
  4841 ;;Total ram usage:        0 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; Hardware stack levels required when called:    2
  4844 ;; This function calls:
  4845 ;;		Nothing
  4846 ;; This function is called by:
  4847 ;;		_main
  4848 ;; This function uses a non-reentrant model
  4849 ;;
  4850                           
  4851                           
  4852                           ;psect for function _Init_ram
  4853  07E7                     _Init_ram:	
  4854                           
  4855                           ;main.c: 119: PIE2 = 0;
  4856                           
  4857                           ;incstack = 0
  4858                           ; Regs used in _Init_ram: [wreg+status,2]
  4859  07E7  1683               	bsf	3,5	;RP0=1, select bank1
  4860  07E8  018D               	clrf	13	;volatile
  4861                           
  4862                           ;main.c: 120: PIE1 = 0B00000010;
  4863  07E9  3002               	movlw	2
  4864  07EA  008C               	movwf	12	;volatile
  4865                           
  4866                           ;main.c: 121: PR2 = 50;
  4867  07EB  3032               	movlw	50
  4868  07EC  0092               	movwf	18	;volatile
  4869                           
  4870                           ;main.c: 122: T2CON = 5;
  4871  07ED  3005               	movlw	5
  4872  07EE  1283               	bcf	3,5	;RP0=0, select bank0
  4873  07EF  0092               	movwf	18	;volatile
  4874                           
  4875                           ;main.c: 123: INTCON = 0XC0;
  4876  07F0  30C0               	movlw	192
  4877  07F1  008B               	movwf	11	;volatile
  4878                           
  4879                           ;main.c: 124: onoff = 1;
  4880  07F2  16F1               	bsf	_onoff/(0+8),_onoff& (0+7)	;volatile
  4881  07F3  0008               	return
  4882  07F4                     __end_of_Init_ram:	
  4883                           
  4884                           	psect	text30
  4885  0742                     __ptext30:	
  4886 ;; *************** function _Delay_nms *****************
  4887 ;; Defined at:
  4888 ;;		line 15 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.
      +4M - ¸±±¾\delay.c"
  4889 ;; Parameters:    Size  Location     Type
  4890 ;;  inittempl       2    2[BANK0 ] unsigned int 
  4891 ;; Auto vars:     Size  Location     Type
  4892 ;;  i               2    4[BANK0 ] unsigned int 
  4893 ;;  gtemp           1    6[BANK0 ] unsigned char 
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  1    wreg      void 
  4896 ;; Registers used:
  4897 ;;		wreg, status,2, status,0, pclath, cstack
  4898 ;; Tracked objects:
  4899 ;;		On entry : 300/0
  4900 ;;		On exit  : 300/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4903 ;;      Params:         0       2       0       0       0
  4904 ;;      Locals:         0       3       0       0       0
  4905 ;;      Temps:          0       0       0       0       0
  4906 ;;      Totals:         0       5       0       0       0
  4907 ;;Total ram usage:        5 bytes
  4908 ;; Hardware stack levels used:    1
  4909 ;; Hardware stack levels required when called:    3
  4910 ;; This function calls:
  4911 ;;		_Delay
  4912 ;; This function is called by:
  4913 ;;		_main
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           
  4918                           ;psect for function _Delay_nms
  4919  0742                     _Delay_nms:	
  4920                           
  4921                           ;delay.c: 17: unsigned int i;
  4922                           ;delay.c: 18: unsigned char gtemp;
  4923                           ;delay.c: 20: gtemp=0;
  4924                           
  4925                           ;incstack = 0
  4926                           ; Regs used in _Delay_nms: [wreg+status,2+status,0+pclath+cstack]
  4927  0742  01E5               	clrf	Delay_nms@gtemp
  4928                           
  4929                           ;delay.c: 21: if(GIE==1)
  4930  0743  1F8B               	btfss	11,7	;volatile
  4931  0744  2F48               	goto	l8584
  4932                           
  4933                           ;delay.c: 22: {
  4934                           ;delay.c: 23: gtemp=1;
  4935  0745  01E5               	clrf	Delay_nms@gtemp
  4936  0746  0AE5               	incf	Delay_nms@gtemp,f
  4937                           
  4938                           ;delay.c: 24: GIE=0;
  4939  0747  138B               	bcf	11,7	;volatile
  4940  0748                     l8584:	
  4941                           
  4942                           ;delay.c: 25: }
  4943                           ;delay.c: 26: for(i=0;i<inittempl;i++)
  4944  0748  01E3               	clrf	Delay_nms@i
  4945  0749  01E4               	clrf	Delay_nms@i+1
  4946  074A                     l8590:	
  4947  074A  0862               	movf	Delay_nms@inittempl+1,w
  4948  074B  0264               	subwf	Delay_nms@i+1,w
  4949  074C  1D03               	skipz
  4950  074D  2F50               	goto	u4635
  4951  074E  0861               	movf	Delay_nms@inittempl,w
  4952  074F  0263               	subwf	Delay_nms@i,w
  4953  0750                     u4635:	
  4954  0750  1803               	btfsc	3,0
  4955  0751  2F5E               	goto	l8592
  4956                           
  4957                           ;delay.c: 27: {
  4958                           ;delay.c: 28: Delay(154);
  4959  0752  309A               	movlw	154
  4960  0753  00DF               	movwf	Delay@dtemp
  4961  0754  01E0               	clrf	Delay@dtemp+1
  4962  0755  2762  118A         	fcall	_Delay
  4963  0757  0064               	clrwdt	;# 
  4964  0758  1283               	bcf	3,5	;RP0=0, select bank0
  4965  0759  1303               	bcf	3,6	;RP1=0, select bank0
  4966  075A  0AE3               	incf	Delay_nms@i,f
  4967  075B  1903               	skipnz
  4968  075C  0AE4               	incf	Delay_nms@i+1,f
  4969  075D  2F4A               	goto	l8590
  4970  075E                     l8592:	
  4971                           
  4972                           ;delay.c: 30: }
  4973                           ;delay.c: 31: if(gtemp==1) GIE=1;
  4974  075E  0B65               	decfsz	Delay_nms@gtemp,w
  4975  075F  0008               	return
  4976  0760  178B               	bsf	11,7	;volatile
  4977  0761  0008               	return
  4978  0762                     __end_of_Delay_nms:	
  4979  0762                     __ptext31:	
  4980 ;; *************** function _Delay *****************
  4981 ;; Defined at:
  4982 ;;		line 8 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4
      +M - ¸±±¾\delay.c"
  4983 ;; Parameters:    Size  Location     Type
  4984 ;;  dtemp           2    0[BANK0 ] unsigned int 
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;		None
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  1    wreg      void 
  4989 ;; Registers used:
  4990 ;;		wreg, status,2, status,0
  4991 ;; Tracked objects:
  4992 ;;		On entry : 300/0
  4993 ;;		On exit  : 300/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4996 ;;      Params:         0       2       0       0       0
  4997 ;;      Locals:         0       0       0       0       0
  4998 ;;      Temps:          0       0       0       0       0
  4999 ;;      Totals:         0       2       0       0       0
  5000 ;;Total ram usage:        2 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; Hardware stack levels required when called:    2
  5003 ;; This function calls:
  5004 ;;		Nothing
  5005 ;; This function is called by:
  5006 ;;		_Delay_nms
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           
  5011                           ;psect for function _Delay
  5012  0762                     _Delay:	
  5013  0762                     l8364:	
  5014                           ;delay.c: 10: while(dtemp--);
  5015                           
  5016                           ;incstack = 0
  5017                           ; Regs used in _Delay: [wreg+status,2+status,0]
  5018                           
  5019  0762  3001               	movlw	1
  5020  0763  02DF               	subwf	Delay@dtemp,f
  5021  0764  3000               	movlw	0
  5022  0765  1C03               	skipc
  5023  0766  03E0               	decf	Delay@dtemp+1,f
  5024  0767  02E0               	subwf	Delay@dtemp+1,f
  5025  0768  0F5F               	incfsz	Delay@dtemp,w
  5026  0769  2F62               	goto	l8364
  5027  076A  0A60               	incf	Delay@dtemp+1,w
  5028  076B  1903               	btfsc	3,2
  5029  076C  0008               	return
  5030  076D  2F62               	goto	l8364
  5031  076E                     __end_of_Delay:	
  5032                           
  5033                           	psect	text32
  5034  055C                     __ptext32:	
  5035 ;; *************** function _AD_Testing *****************
  5036 ;; Defined at:
  5037 ;;		line 391 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  5038 ;; Parameters:    Size  Location     Type
  5039 ;;  ad_fd           1    wreg     unsigned char 
  5040 ;;  ad_ch           1    0[BANK0 ] unsigned char 
  5041 ;;  ad_lr           1    1[BANK0 ] unsigned char 
  5042 ;; Auto vars:     Size  Location     Type
  5043 ;;  ad_fd           1    4[BANK0 ] unsigned char 
  5044 ;;  data            2    6[BANK0 ] volatile unsigned int 
  5045 ;;  i               1    5[BANK0 ] volatile unsigned char 
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  1    wreg      void 
  5048 ;; Registers used:
  5049 ;;		wreg, status,2, status,0
  5050 ;; Tracked objects:
  5051 ;;		On entry : 300/0
  5052 ;;		On exit  : 300/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5055 ;;      Params:         0       2       0       0       0
  5056 ;;      Locals:         0       4       0       0       0
  5057 ;;      Temps:          0       2       0       0       0
  5058 ;;      Totals:         0       8       0       0       0
  5059 ;;Total ram usage:        8 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; Hardware stack levels required when called:    2
  5062 ;; This function calls:
  5063 ;;		Nothing
  5064 ;; This function is called by:
  5065 ;;		_main
  5066 ;; This function uses a non-reentrant model
  5067 ;;
  5068                           
  5069                           
  5070                           ;psect for function _AD_Testing
  5071  055C                     _AD_Testing:	
  5072                           
  5073                           ;incstack = 0
  5074                           ; Regs used in _AD_Testing: [wreg+status,2+status,0]
  5075                           ;AD_Testing@ad_fd stored from wreg
  5076  055C  00E3               	movwf	AD_Testing@ad_fd
  5077                           
  5078                           ;main.c: 393: static volatile unsigned char adtimes;
  5079                           ;main.c: 394: static volatile unsigned int admin,admax,adsum;
  5080                           ;main.c: 395: volatile unsigned int data;
  5081                           ;main.c: 396: volatile unsigned char i = 0;
  5082  055D  01E4               	clrf	AD_Testing@i	;volatile
  5083                           
  5084                           ;main.c: 399: if(!ad_lr)
  5085  055E  0860               	movf	AD_Testing@ad_lr,w
  5086  055F  1D03               	btfss	3,2
  5087  0560  2D64               	goto	l8718
  5088                           
  5089                           ;main.c: 400: ADCON1 = 0;
  5090  0561  1683               	bsf	3,5	;RP0=1, select bank1
  5091  0562  019F               	clrf	31	;volatile
  5092  0563  2D67               	goto	l8720
  5093  0564                     l8718:	
  5094                           
  5095                           ;main.c: 401: else
  5096                           ;main.c: 402: ADCON1 = 0x80;
  5097  0564  3080               	movlw	128
  5098  0565  1683               	bsf	3,5	;RP0=1, select bank1
  5099  0566  009F               	movwf	31	;volatile
  5100  0567                     l8720:	
  5101                           
  5102                           ;main.c: 404: ADCON0 = 0;
  5103  0567  1283               	bcf	3,5	;RP0=0, select bank0
  5104  0568  019F               	clrf	31	;volatile
  5105                           
  5106                           ;main.c: 405: ADCON0 |= (unsigned char)(ad_fd << 6);
  5107  0569  0863               	movf	AD_Testing@ad_fd,w
  5108  056A  00E1               	movwf	??_AD_Testing
  5109  056B  0CE1               	rrf	??_AD_Testing,f
  5110  056C  0CE1               	rrf	??_AD_Testing,f
  5111  056D  0C61               	rrf	??_AD_Testing,w
  5112  056E  39C0               	andlw	192
  5113  056F  049F               	iorwf	31,f	;volatile
  5114                           
  5115                           ;main.c: 406: ADCON0 |= (unsigned char)(ad_ch << 2);
  5116  0570  085F               	movf	AD_Testing@ad_ch,w
  5117  0571  00E1               	movwf	??_AD_Testing
  5118  0572  3001               	movlw	1
  5119  0573  1003               	clrc
  5120  0574                     L10:	
  5121  0574  0DE1               	rlf	??_AD_Testing,f
  5122  0575  3EFF               	addlw	-1
  5123  0576  1003               	clrc
  5124  0577  1D03               	skipz
  5125  0578  2D74               	goto	L10
  5126  0579  0D61               	rlf	??_AD_Testing,w
  5127  057A  049F               	iorwf	31,f	;volatile
  5128                           
  5129                           ;main.c: 407: ADCON0 |= 0x01;
  5130  057B  141F               	bsf	31,0	;volatile
  5131  057C  0000               	nop	;# 
  5132  057D  0000               	nop	;# 
  5133                           
  5134                           ;main.c: 411: GODONE = 1;
  5135  057E  1283               	bcf	3,5	;RP0=0, select bank0
  5136  057F  1303               	bcf	3,6	;RP1=0, select bank0
  5137  0580  149F               	bsf	31,1	;volatile
  5138  0581                     l2410:	
  5139                           ;main.c: 413: while(GODONE)
  5140                           
  5141  0581  1C9F               	btfss	31,1	;volatile
  5142  0582  2D8A               	goto	l8732
  5143  0583  0000               	nop	;# 
  5144  0584  0000               	nop	;# 
  5145                           
  5146                           ;main.c: 417: if(0 == (--i))
  5147  0585  1283               	bcf	3,5	;RP0=0, select bank0
  5148  0586  1303               	bcf	3,6	;RP1=0, select bank0
  5149  0587  0BE4               	decfsz	AD_Testing@i,f	;volatile
  5150  0588  2D81               	goto	l2410
  5151  0589  0008               	return
  5152  058A                     l8732:	
  5153                           
  5154                           ;main.c: 419: }
  5155                           ;main.c: 421: if(!ad_lr)
  5156  058A  0860               	movf	AD_Testing@ad_lr,w
  5157  058B  1D03               	btfss	3,2
  5158  058C  2D9D               	goto	l8738
  5159                           
  5160                           ;main.c: 422: {
  5161                           ;main.c: 423: data = (unsigned int)(ADRESH<<4);
  5162  058D  081E               	movf	30,w	;volatile
  5163  058E  00E5               	movwf	AD_Testing@data	;volatile
  5164  058F  01E6               	clrf	AD_Testing@data+1	;volatile
  5165  0590  0EE5               	swapf	AD_Testing@data,f	;volatile
  5166  0591  0EE6               	swapf	AD_Testing@data+1,f	;volatile
  5167  0592  30F0               	movlw	240
  5168  0593  05E6               	andwf	AD_Testing@data+1,f	;volatile
  5169  0594  0865               	movf	AD_Testing@data,w	;volatile
  5170  0595  390F               	andlw	15
  5171  0596  04E6               	iorwf	AD_Testing@data+1,f	;volatile
  5172  0597  30F0               	movlw	240
  5173  0598  05E5               	andwf	AD_Testing@data,f	;volatile
  5174                           
  5175                           ;main.c: 424: data |= (unsigned int)(ADRESL>>4);
  5176  0599  1683               	bsf	3,5	;RP0=1, select bank1
  5177  059A  0E1E               	swapf	30,w	;volatile
  5178  059B  390F               	andlw	15
  5179  059C  2DA2               	goto	L11
  5180  059D                     l8738:	
  5181                           ;main.c: 425: }
  5182                           
  5183                           
  5184                           ;main.c: 426: else
  5185                           ;main.c: 427: {
  5186                           ;main.c: 428: data = (unsigned int)(ADRESH<<8);
  5187  059D  081E               	movf	30,w	;volatile
  5188  059E  00E6               	movwf	AD_Testing@data+1	;volatile
  5189  059F  01E5               	clrf	AD_Testing@data	;volatile
  5190                           
  5191                           ;main.c: 429: data |= (unsigned int)ADRESL;
  5192  05A0  1683               	bsf	3,5	;RP0=1, select bank1
  5193  05A1  081E               	movf	30,w	;volatile
  5194  05A2                     L11:	
  5195  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  5196  05A3  04E5               	iorwf	AD_Testing@data,f	;volatile
  5197                           
  5198                           ;main.c: 430: }
  5199                           ;main.c: 432: if(0 == adtimes)
  5200  05A4  0840               	movf	AD_Testing@adtimes,w	;volatile
  5201  05A5  1D03               	btfss	3,2
  5202  05A6  2DAA               	goto	l8744
  5203                           
  5204                           ;main.c: 433: {
  5205                           ;main.c: 434: admax = data;
  5206  05A7  2601  118A         	fcall	PL14	;call to abstracted procedure
  5207  05A9  2DBD               	goto	l8750
  5208  05AA                     l8744:	
  5209                           ;main.c: 436: }
  5210                           
  5211                           ;main.c: 435: admin = data;
  5212                           
  5213                           
  5214                           ;main.c: 437: else if(data > admax)
  5215  05AA  0866               	movf	AD_Testing@data+1,w	;volatile
  5216  05AB  022B               	subwf	AD_Testing@admax+1,w	;volatile
  5217  05AC  1D03               	skipz
  5218  05AD  2DB0               	goto	u4825
  5219  05AE  0865               	movf	AD_Testing@data,w	;volatile
  5220  05AF  022A               	subwf	AD_Testing@admax,w	;volatile
  5221  05B0                     u4825:	
  5222  05B0  1803               	skipnc
  5223  05B1  2DB5               	goto	l8748
  5224                           
  5225                           ;main.c: 438: {
  5226                           ;main.c: 439: admax = data;
  5227  05B2  2601  118A         	fcall	PL14	;call to abstracted procedure
  5228                           
  5229                           ;main.c: 440: }
  5230  05B4  2DC1               	goto	l2418
  5231  05B5                     l8748:	
  5232                           
  5233                           ;main.c: 441: else if(data < admin)
  5234  05B5  082D               	movf	AD_Testing@admin+1,w	;volatile
  5235  05B6  0266               	subwf	AD_Testing@data+1,w	;volatile
  5236  05B7  1D03               	skipz
  5237  05B8  2DBB               	goto	u4835
  5238  05B9  082C               	movf	AD_Testing@admin,w	;volatile
  5239  05BA  0265               	subwf	AD_Testing@data,w	;volatile
  5240  05BB                     u4835:	
  5241  05BB  1803               	skipnc
  5242  05BC  2DC1               	goto	l2418
  5243  05BD                     l8750:	
  5244                           
  5245                           ;main.c: 442: {
  5246                           ;main.c: 443: admin = data;
  5247  05BD  0866               	movf	AD_Testing@data+1,w	;volatile
  5248  05BE  00AD               	movwf	AD_Testing@admin+1	;volatile
  5249  05BF  0865               	movf	AD_Testing@data,w	;volatile
  5250  05C0  00AC               	movwf	AD_Testing@admin	;volatile
  5251  05C1                     l2418:	
  5252                           
  5253                           ;main.c: 444: }
  5254                           ;main.c: 446: adsum += data;
  5255  05C1  0865               	movf	AD_Testing@data,w	;volatile
  5256  05C2  1683               	bsf	3,5	;RP0=1, select bank1
  5257  05C3  07AE               	addwf	AD_Testing@adsum^(0+128),f	;volatile
  5258  05C4  1803               	skipnc
  5259  05C5  0AAF               	incf	(AD_Testing@adsum+1)^(0+128),f	;volatile
  5260  05C6  1283               	bcf	3,5	;RP0=0, select bank0
  5261  05C7  0866               	movf	AD_Testing@data+1,w	;volatile
  5262  05C8  1683               	bsf	3,5	;RP0=1, select bank1
  5263  05C9  07AF               	addwf	(AD_Testing@adsum+1)^(0+128),f	;volatile
  5264                           
  5265                           ;main.c: 447: if(++adtimes >= 10)
  5266  05CA  300A               	movlw	10
  5267  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  5268  05CC  0AC0               	incf	AD_Testing@adtimes,f	;volatile
  5269  05CD  0240               	subwf	AD_Testing@adtimes,w	;volatile
  5270  05CE  1C03               	skipc
  5271  05CF  0008               	return
  5272                           
  5273                           ;main.c: 448: {
  5274                           ;main.c: 449: adsum -= admax;
  5275  05D0  082A               	movf	AD_Testing@admax,w	;volatile
  5276  05D1  1683               	bsf	3,5	;RP0=1, select bank1
  5277  05D2  02AE               	subwf	AD_Testing@adsum^(0+128),f	;volatile
  5278  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  5279  05D4  082B               	movf	AD_Testing@admax+1,w	;volatile
  5280  05D5  1683               	bsf	3,5	;RP0=1, select bank1
  5281  05D6  1C03               	skipc
  5282  05D7  03AF               	decf	(AD_Testing@adsum+1)^(0+128),f	;volatile
  5283  05D8  02AF               	subwf	(AD_Testing@adsum+1)^(0+128),f	;volatile
  5284                           
  5285                           ;main.c: 450: adsum -= admin;
  5286  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  5287  05DA  082C               	movf	AD_Testing@admin,w	;volatile
  5288  05DB  1683               	bsf	3,5	;RP0=1, select bank1
  5289  05DC  02AE               	subwf	AD_Testing@adsum^(0+128),f	;volatile
  5290  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  5291  05DE  082D               	movf	AD_Testing@admin+1,w	;volatile
  5292  05DF  1683               	bsf	3,5	;RP0=1, select bank1
  5293  05E0  1C03               	skipc
  5294  05E1  03AF               	decf	(AD_Testing@adsum+1)^(0+128),f	;volatile
  5295  05E2  02AF               	subwf	(AD_Testing@adsum+1)^(0+128),f	;volatile
  5296                           
  5297                           ;main.c: 452: AD_Result = adsum >> 3;
  5298  05E3  082F               	movf	(AD_Testing@adsum+1)^(0+128),w	;volatile
  5299  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  5300  05E5  00E2               	movwf	??_AD_Testing+1
  5301  05E6  1683               	bsf	3,5	;RP0=1, select bank1
  5302  05E7  082E               	movf	AD_Testing@adsum^(0+128),w	;volatile
  5303  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  5304  05E9  00E1               	movwf	??_AD_Testing
  5305  05EA  1003               	clrc
  5306  05EB  0CE2               	rrf	??_AD_Testing+1,f
  5307  05EC  0CE1               	rrf	??_AD_Testing,f
  5308  05ED  1003               	clrc
  5309  05EE  0CE2               	rrf	??_AD_Testing+1,f
  5310  05EF  0CE1               	rrf	??_AD_Testing,f
  5311  05F0  1003               	clrc
  5312  05F1  0CE2               	rrf	??_AD_Testing+1,f
  5313  05F2  0CE1               	rrf	??_AD_Testing,f
  5314  05F3  0861               	movf	??_AD_Testing,w
  5315  05F4  00AE               	movwf	_AD_Result	;volatile
  5316  05F5  0862               	movf	??_AD_Testing+1,w
  5317  05F6  00AF               	movwf	_AD_Result+1	;volatile
  5318                           
  5319                           ;main.c: 454: adsum = 0;
  5320  05F7  1683               	bsf	3,5	;RP0=1, select bank1
  5321  05F8  01AE               	clrf	AD_Testing@adsum^(0+128)	;volatile
  5322  05F9  01AF               	clrf	(AD_Testing@adsum+1)^(0+128)	;volatile
  5323                           
  5324                           ;main.c: 455: admin = 0;
  5325  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  5326  05FB  01AC               	clrf	AD_Testing@admin	;volatile
  5327  05FC  01AD               	clrf	AD_Testing@admin+1	;volatile
  5328                           
  5329                           ;main.c: 456: admax = 0;
  5330  05FD  01AA               	clrf	AD_Testing@admax	;volatile
  5331  05FE  01AB               	clrf	AD_Testing@admax+1	;volatile
  5332                           
  5333                           ;main.c: 457: adtimes = 0;
  5334  05FF  01C0               	clrf	AD_Testing@adtimes	;volatile
  5335  0600  0008               	return
  5336  0601                     __end_of_AD_Testing:	
  5337  0601                     PL14:	
  5338  0601  0866               	movf	AD_Testing@data+1,w	;volatile
  5339  0602  00AB               	movwf	AD_Testing@admax+1	;volatile
  5340  0603  0865               	movf	AD_Testing@data,w	;volatile
  5341  0604  00AA               	movwf	AD_Testing@admax	;volatile
  5342  0605  0008               	return
  5343  0606                     __end_ofPL14:	
  5344                           
  5345                           	psect	text33
  5346  0484                     __ptext33:	
  5347 ;; *************** function _time0 *****************
  5348 ;; Defined at:
  5349 ;;		line 183 in file "C:\mcuproject\scm\xfx\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0818-A)\×·Æµ+¸ÉÉÕ¼ìË®-24V2.4M(0904)\×·Æµ+¸ÉÉÕ¼ìË®-24V2
      +.4M - ¸±±¾\main.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;		None
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;		None
  5354 ;; Return value:  Size  Location     Type
  5355 ;;                  1    wreg      void 
  5356 ;; Registers used:
  5357 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5363 ;;      Params:         0       0       0       0       0
  5364 ;;      Locals:         0       0       0       0       0
  5365 ;;      Temps:          3       0       0       0       0
  5366 ;;      Totals:         3       0       0       0       0
  5367 ;;Total ram usage:        3 bytes
  5368 ;; Hardware stack levels used:    1
  5369 ;; Hardware stack levels required when called:    1
  5370 ;; This function calls:
  5371 ;;		_Set_Pwm_Onoff
  5372 ;; This function is called by:
  5373 ;;		Interrupt level 1
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           
  5378                           ;psect for function _time0
  5379  0484                     _time0:	
  5380                           
  5381                           ;main.c: 185: if(RCIF)
  5382  0484  1283               	bcf	3,5	;RP0=0, select bank0
  5383  0485  1303               	bcf	3,6	;RP1=0, select bank0
  5384  0486  1E8C               	btfss	12,5	;volatile
  5385  0487  2C98               	goto	i1l2350
  5386                           
  5387                           ;main.c: 186: {
  5388                           ;main.c: 188: revTime = 0;
  5389  0488  01D1               	clrf	_revTime
  5390                           
  5391                           ;main.c: 189: Recebuffer[rececount] = RCREG;
  5392  0489  0858               	movf	_rececount,w
  5393  048A  3EA0               	addlw	(low (_Recebuffer| 0))& (0+255)
  5394  048B  0084               	movwf	4
  5395  048C  081A               	movf	26,w	;volatile
  5396  048D  1383               	bcf	3,7	;select IRP bank1
  5397  048E  0080               	movwf	0
  5398  048F  3004               	movlw	4
  5399                           
  5400                           ;main.c: 190: rececount++;
  5401  0490  0AD8               	incf	_rececount,f
  5402                           
  5403                           ;main.c: 192: if(rececount >= 4)
  5404  0491  0258               	subwf	_rececount,w
  5405  0492  1803               	btfsc	3,0
  5406                           
  5407                           ;main.c: 193: {
  5408                           ;main.c: 194: rececount = 0;
  5409  0493  01D8               	clrf	_rececount
  5410                           
  5411                           ;main.c: 195: }
  5412                           ;main.c: 197: if(OERR)
  5413  0494  1C98               	btfss	24,1	;volatile
  5414  0495  2C98               	goto	i1l2350
  5415                           
  5416                           ;main.c: 198: {
  5417                           ;main.c: 199: CREN = 0;
  5418  0496  1218               	bcf	24,4	;volatile
  5419                           
  5420                           ;main.c: 200: CREN = 1;
  5421  0497  1618               	bsf	24,4	;volatile
  5422  0498                     i1l2350:	
  5423                           
  5424                           ;main.c: 201: }
  5425                           ;main.c: 203: }
  5426                           ;main.c: 205: if(TMR2IF)
  5427  0498  1C8C               	btfss	12,1	;volatile
  5428  0499  2CAE               	goto	i1l7820
  5429                           
  5430                           ;main.c: 206: {
  5431                           ;main.c: 207: TMR2IF = 0;
  5432  049A  108C               	bcf	12,1	;volatile
  5433  049B  3005               	movlw	5
  5434                           
  5435                           ;main.c: 208: tm2Flag = 1;
  5436  049C  01C2               	clrf	_tm2Flag
  5437  049D  0AC2               	incf	_tm2Flag,f
  5438                           
  5439                           ;main.c: 209: if(++count125us > 4)
  5440  049E  0AC1               	incf	_count125us,f
  5441  049F  0241               	subwf	_count125us,w
  5442  04A0  1C03               	skipc
  5443  04A1  2CB0               	goto	i1l2358
  5444                           
  5445                           ;main.c: 210: {
  5446                           ;main.c: 211: count125us = 0;
  5447  04A2  01C1               	clrf	_count125us
  5448                           
  5449                           ;main.c: 212: tcount ++;
  5450  04A3  0ADD               	incf	_tcount,f	;volatile
  5451                           
  5452                           ;main.c: 213: if(onoff)
  5453  04A4  1EF1               	btfss	_onoff/(0+8),_onoff& (0+7)	;volatile
  5454  04A5  2CAA               	goto	i1l7818
  5455                           
  5456                           ;main.c: 214: {
  5457                           ;main.c: 215: Set_Pwm_Onoff(20);
  5458  04A6  3014               	movlw	20
  5459  04A7  24B9  118A         	fcall	_Set_Pwm_Onoff
  5460                           
  5461                           ;main.c: 216: }
  5462  04A9  2CB0               	goto	i1l2358
  5463  04AA                     i1l7818:	
  5464                           
  5465                           ;main.c: 217: else
  5466                           ;main.c: 218: {
  5467                           ;main.c: 219: Set_Pwm_Onoff(0);
  5468  04AA  3000               	movlw	0
  5469  04AB  24B9  118A         	fcall	_Set_Pwm_Onoff
  5470  04AD  2CB0               	goto	i1l2358
  5471  04AE                     i1l7820:	
  5472                           
  5473                           ;main.c: 223: else
  5474                           ;main.c: 224: {
  5475                           ;main.c: 225: PIR1 = 0;
  5476  04AE  018C               	clrf	12	;volatile
  5477                           
  5478                           ;main.c: 226: PIR2 = 0;
  5479  04AF  018D               	clrf	13	;volatile
  5480  04B0                     i1l2358:	
  5481  04B0  0877               	movf	??_time0+2,w
  5482  04B1  008A               	movwf	10
  5483  04B2  0876               	movf	??_time0+1,w
  5484  04B3  0084               	movwf	4
  5485  04B4  0E75               	swapf	??_time0^(0+-128),w
  5486  04B5  0083               	movwf	3
  5487  04B6  0EFE               	swapf	126,f
  5488  04B7  0E7E               	swapf	126,w
  5489  04B8  0009               	retfie
  5490  04B9                     __end_of_time0:	
  5491  04B9                     __ptext34:	
  5492 ;; *************** function _Set_Pwm_Onoff *****************
  5493 ;; Defined at:
  5494 ;;		line 273 in file "E:\ZW PROJECT\2020 PROJECT\Îí»¯Æ÷ÏîÄ¿\CMS-TPWHQ(Ô´)\CMS-TPWHQ-ZPGS_V1.2(Ô´)\WHQ_TP_ZPGS_V1.2.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;  fun             1    wreg     unsigned char 
  5497 ;; Auto vars:     Size  Location     Type
  5498 ;;  fun             1    2[COMMON] unsigned char 
  5499 ;;  funod           1    1[COMMON] unsigned char 
  5500 ;; Return value:  Size  Location     Type
  5501 ;;                  1    wreg      void 
  5502 ;; Registers used:
  5503 ;;		wreg, status,2, status,0
  5504 ;; Tracked objects:
  5505 ;;		On entry : 300/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5509 ;;      Params:         0       0       0       0       0
  5510 ;;      Locals:         2       0       0       0       0
  5511 ;;      Temps:          1       0       0       0       0
  5512 ;;      Totals:         3       0       0       0       0
  5513 ;;Total ram usage:        3 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; This function calls:
  5516 ;;		Nothing
  5517 ;; This function is called by:
  5518 ;;		_time0
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           
  5523                           ;psect for function _Set_Pwm_Onoff
  5524  04B9                     _Set_Pwm_Onoff:	
  5525                           
  5526                           ;incstack = 0
  5527                           ; Regs used in _Set_Pwm_Onoff: [wreg+status,2+status,0]
  5528                           ;Set_Pwm_Onoff@fun stored from wreg
  5529  04B9  00F4               	movwf	Set_Pwm_Onoff@fun
  5530                           
  5531                           ;WHQ_TP_ZPGS_V1.2.c: 275: unsigned char funod;
  5532                           ;WHQ_TP_ZPGS_V1.2.c: 277: static unsigned char pwmcl = 0;
  5533                           ;WHQ_TP_ZPGS_V1.2.c: 278: static bit adonf = 0;
  5534                           ;WHQ_TP_ZPGS_V1.2.c: 279: static unsigned char cur_adcl = 0;
  5535                           ;WHQ_TP_ZPGS_V1.2.c: 280: static unsigned int cursumt = 0;
  5536                           ;WHQ_TP_ZPGS_V1.2.c: 281: static unsigned char funold;
  5537                           ;WHQ_TP_ZPGS_V1.2.c: 283: PFGCON |= 0x04;
  5538  04BA  1703               	bsf	3,6	;RP1=1, select bank2
  5539  04BB  151B               	bsf	27,2	;volatile
  5540                           
  5541                           ;WHQ_TP_ZPGS_V1.2.c: 284: TRISA &= 0xfe;
  5542  04BC  1683               	bsf	3,5	;RP0=1, select bank1
  5543  04BD  1303               	bcf	3,6	;RP1=0, select bank1
  5544  04BE  1005               	bcf	5,0	;volatile
  5545                           
  5546                           ;WHQ_TP_ZPGS_V1.2.c: 285: PORTA = (unsigned char)(PORTA & 0xfe);
  5547  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  5548  04C0  1005               	bcf	5,0	;volatile
  5549                           
  5550                           ;WHQ_TP_ZPGS_V1.2.c: 286: if(0 != pfgonetemp.pfgtemp)
  5551  04C1  0878               	movf	_pfgonetemp,w
  5552  04C2  0479               	iorwf	_pfgonetemp+1,w
  5553  04C3  1903               	btfsc	3,2
  5554  04C4  0008               	return
  5555                           
  5556                           ;WHQ_TP_ZPGS_V1.2.c: 287: {
  5557                           ;WHQ_TP_ZPGS_V1.2.c: 288: if(PfgChangef)
  5558  04C5  1DF0               	btfss	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  5559  04C6  2CE5               	goto	i1l7458
  5560                           
  5561                           ;WHQ_TP_ZPGS_V1.2.c: 289: {
  5562                           ;WHQ_TP_ZPGS_V1.2.c: 290: PfgChangef = 0;
  5563  04C7  11F0               	bcf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  5564                           
  5565                           ;WHQ_TP_ZPGS_V1.2.c: 291: if((0 == (pfgonetemp.pfgonebyte.pfgtemph & 0x80)) && ((PFGCON&
      +                          0x80) != 0))
  5566  04C8  1BF9               	btfsc	_pfgonetemp+1,7
  5567  04C9  2CD3               	goto	i1l7448
  5568  04CA  1703               	bsf	3,6	;RP1=1, select bank2
  5569  04CB  1F9B               	btfss	27,7	;volatile
  5570  04CC  2CD3               	goto	i1l7448
  5571                           
  5572                           ;WHQ_TP_ZPGS_V1.2.c: 292: {
  5573                           ;WHQ_TP_ZPGS_V1.2.c: 293: PFGCON1 &= ~0x80;
  5574  04CD  139E               	bcf	30,7	;volatile
  5575                           
  5576                           ;WHQ_TP_ZPGS_V1.2.c: 294: PFGSTOP = 0xfa;
  5577  04CE  30FA               	movlw	250
  5578  04CF  1683               	bsf	3,5	;RP0=1, select bank1
  5579  04D0  1303               	bcf	3,6	;RP1=0, select bank1
  5580  04D1  0088               	movwf	8	;volatile
  5581                           
  5582                           ;WHQ_TP_ZPGS_V1.2.c: 295: }
  5583  04D2  2CE5               	goto	i1l7458
  5584  04D3                     i1l7448:	
  5585                           
  5586                           ;WHQ_TP_ZPGS_V1.2.c: 296: else
  5587                           ;WHQ_TP_ZPGS_V1.2.c: 297: {
  5588                           ;WHQ_TP_ZPGS_V1.2.c: 298: if((pfgonetemp.pfgonebyte.pfgtemph & 0x03) >= (PFGCON & 0x03))
  5589  04D3  3003               	movlw	3
  5590  04D4  0579               	andwf	_pfgonetemp+1,w
  5591  04D5  00F2               	movwf	??_Set_Pwm_Onoff
  5592  04D6  1703               	bsf	3,6	;RP1=1, select bank2
  5593  04D7  081B               	movf	27,w	;volatile
  5594  04D8  3903               	andlw	3
  5595  04D9  0272               	subwf	??_Set_Pwm_Onoff,w
  5596  04DA  1C03               	skipc
  5597  04DB  2CE1               	goto	i1l7452
  5598                           
  5599                           ;WHQ_TP_ZPGS_V1.2.c: 299: {
  5600                           ;WHQ_TP_ZPGS_V1.2.c: 300: PFGADJ = pfgonetemp.pfgonebyte.pfgtempl;
  5601  04DC  0878               	movf	_pfgonetemp,w
  5602  04DD  0099               	movwf	25	;volatile
  5603                           
  5604                           ;WHQ_TP_ZPGS_V1.2.c: 301: PFGCON = pfgonetemp.pfgonebyte.pfgtemph;
  5605  04DE  0879               	movf	_pfgonetemp+1,w
  5606  04DF  009B               	movwf	27	;volatile
  5607                           
  5608                           ;WHQ_TP_ZPGS_V1.2.c: 302: }
  5609  04E0  2CE5               	goto	i1l7458
  5610  04E1                     i1l7452:	
  5611                           
  5612                           ;WHQ_TP_ZPGS_V1.2.c: 303: else
  5613                           ;WHQ_TP_ZPGS_V1.2.c: 304: {
  5614                           ;WHQ_TP_ZPGS_V1.2.c: 305: PFGCON = pfgonetemp.pfgonebyte.pfgtemph;
  5615  04E1  0879               	movf	_pfgonetemp+1,w
  5616  04E2  009B               	movwf	27	;volatile
  5617                           
  5618                           ;WHQ_TP_ZPGS_V1.2.c: 306: PFGADJ = pfgonetemp.pfgonebyte.pfgtempl;
  5619  04E3  0878               	movf	_pfgonetemp,w
  5620  04E4  0099               	movwf	25	;volatile
  5621  04E5                     i1l7458:	
  5622                           
  5623                           ;WHQ_TP_ZPGS_V1.2.c: 315: }
  5624                           ;WHQ_TP_ZPGS_V1.2.c: 316: }
  5625                           ;WHQ_TP_ZPGS_V1.2.c: 318: if(0 == fun)
  5626  04E5  0874               	movf	Set_Pwm_Onoff@fun,w
  5627  04E6  1D03               	btfss	3,2
  5628  04E7  2CF4               	goto	i1l4934
  5629                           
  5630                           ;WHQ_TP_ZPGS_V1.2.c: 319: {
  5631                           ;WHQ_TP_ZPGS_V1.2.c: 321: pfgonetemp.pfgonebyte.pfgtemph &= ~0x80;
  5632  04E8  13F9               	bcf	_pfgonetemp+1,7
  5633                           
  5634                           ;WHQ_TP_ZPGS_V1.2.c: 322: PfgChangef = 1;
  5635  04E9  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  5636                           
  5637                           ;WHQ_TP_ZPGS_V1.2.c: 323: cur_addat = 0;
  5638  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  5639  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  5640  04EC  01BF               	clrf	_cur_addat	;volatile
  5641                           
  5642                           ;WHQ_TP_ZPGS_V1.2.c: 324: curokf = 0;
  5643  04ED  13F0               	bcf	_curokf/(0+8),_curokf& (0+7)	;volatile
  5644                           
  5645                           ;WHQ_TP_ZPGS_V1.2.c: 325: pwmcl = 0;
  5646  04EE  01B1               	clrf	Set_Pwm_Onoff@pwmcl
  5647                           
  5648                           ;WHQ_TP_ZPGS_V1.2.c: 326: cursumt = 0;
  5649  04EF  1683               	bsf	3,5	;RP0=1, select bank1
  5650  04F0  01A8               	clrf	Set_Pwm_Onoff@cursumt^(0+128)
  5651  04F1  01A9               	clrf	(Set_Pwm_Onoff@cursumt+1)^(0+128)
  5652                           
  5653                           ;WHQ_TP_ZPGS_V1.2.c: 327: on_off = 0;
  5654  04F2  1271               	bcf	_on_off/(0+8),_on_off& (0+7)	;volatile
  5655                           
  5656                           ;WHQ_TP_ZPGS_V1.2.c: 328: }
  5657  04F3  0008               	return
  5658  04F4                     i1l4934:	
  5659                           
  5660                           ;WHQ_TP_ZPGS_V1.2.c: 329: else
  5661                           ;WHQ_TP_ZPGS_V1.2.c: 330: {
  5662                           ;WHQ_TP_ZPGS_V1.2.c: 332: on_off = 1;
  5663  04F4  1671               	bsf	_on_off/(0+8),_on_off& (0+7)	;volatile
  5664                           
  5665                           ;WHQ_TP_ZPGS_V1.2.c: 334: if(!pwmtf)
  5666  04F5  19F1               	btfsc	_pwmtf/(0+8),_pwmtf& (0+7)	;volatile
  5667  04F6  2CFA               	goto	i1l7470
  5668  04F7  3018               	movlw	24
  5669  04F8  00F3               	movwf	Set_Pwm_Onoff@funod
  5670  04F9  2D01               	goto	L12
  5671  04FA                     i1l7470:	
  5672                           ;WHQ_TP_ZPGS_V1.2.c: 338: }
  5673                           
  5674                           ;WHQ_TP_ZPGS_V1.2.c: 337: funold = funod;
  5675                           
  5676  04FA  3031               	movlw	49
  5677  04FB  0274               	subwf	Set_Pwm_Onoff@fun,w
  5678  04FC  1803               	skipnc
  5679  04FD  2D05               	goto	i1l7474
  5680                           
  5681                           ;WHQ_TP_ZPGS_V1.2.c: 342: {
  5682                           ;WHQ_TP_ZPGS_V1.2.c: 343: funod = fun;
  5683  04FE  0874               	movf	Set_Pwm_Onoff@fun,w
  5684  04FF  00F3               	movwf	Set_Pwm_Onoff@funod
  5685                           
  5686                           ;WHQ_TP_ZPGS_V1.2.c: 344: funold = fun;
  5687  0500  0874               	movf	Set_Pwm_Onoff@fun,w
  5688  0501                     L12:	
  5689  0501  1683               	bsf	3,5	;RP0=1, select bank1
  5690  0502  1303               	bcf	3,6	;RP1=0, select bank1
  5691  0503  00B0               	movwf	Set_Pwm_Onoff@funold^(0+128)
  5692                           
  5693                           ;WHQ_TP_ZPGS_V1.2.c: 345: }
  5694  0504  2D09               	goto	i1l7476
  5695  0505                     i1l7474:	
  5696                           
  5697                           ;WHQ_TP_ZPGS_V1.2.c: 346: else
  5698                           ;WHQ_TP_ZPGS_V1.2.c: 347: funod = funold;
  5699  0505  1683               	bsf	3,5	;RP0=1, select bank1
  5700  0506  1303               	bcf	3,6	;RP1=0, select bank1
  5701  0507  0830               	movf	Set_Pwm_Onoff@funold^(0+128),w
  5702  0508  00F3               	movwf	Set_Pwm_Onoff@funod
  5703  0509                     i1l7476:	
  5704  0509  3030               	movlw	48
  5705  050A  0673               	xorwf	Set_Pwm_Onoff@funod,w
  5706  050B  1D03               	btfss	3,2
  5707  050C  2D10               	goto	i1l7480
  5708  050D                     i1l7478:	
  5709                           
  5710                           ;WHQ_TP_ZPGS_V1.2.c: 350: {
  5711                           ;WHQ_TP_ZPGS_V1.2.c: 351: ((pfgonetemp.pfgtemp) |= (1 << (15)));
  5712  050D  17F9               	bsf	_pfgonetemp+1,7
  5713  050E                     L13:	
  5714                           
  5715                           ;WHQ_TP_ZPGS_V1.2.c: 352: PfgChangef = 1;
  5716  050E  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  5717                           
  5718                           ;WHQ_TP_ZPGS_V1.2.c: 353: }
  5719  050F  2D22               	goto	i1l7494
  5720  0510                     i1l7480:	
  5721                           
  5722                           ;WHQ_TP_ZPGS_V1.2.c: 354: else
  5723                           ;WHQ_TP_ZPGS_V1.2.c: 355: {
  5724                           ;WHQ_TP_ZPGS_V1.2.c: 356: pwmcl++;
  5725  0510  1283               	bcf	3,5	;RP0=0, select bank0
  5726  0511  0AB1               	incf	Set_Pwm_Onoff@pwmcl,f
  5727                           
  5728                           ;WHQ_TP_ZPGS_V1.2.c: 357: if(pwmcl <= funod)
  5729  0512  0831               	movf	Set_Pwm_Onoff@pwmcl,w
  5730  0513  0273               	subwf	Set_Pwm_Onoff@funod,w
  5731  0514  1C03               	skipc
  5732  0515  2D1A               	goto	i1l4942
  5733                           
  5734                           ;WHQ_TP_ZPGS_V1.2.c: 358: {
  5735                           ;WHQ_TP_ZPGS_V1.2.c: 359: if((((pfgonetemp.pfgtemp) & (1 << (15))) == 0))
  5736  0516  1BF9               	btfsc	_pfgonetemp+1,7
  5737  0517  2D0E               	goto	L13
  5738                           
  5739                           ;WHQ_TP_ZPGS_V1.2.c: 360: adonf = 0;
  5740  0518  1170               	bcf	Set_Pwm_Onoff@adonf/(0+8),Set_Pwm_Onoff@adonf& (0+7)
  5741  0519  2D0D               	goto	i1l7478
  5742  051A                     i1l4942:	
  5743                           
  5744                           ;WHQ_TP_ZPGS_V1.2.c: 364: else
  5745                           ;WHQ_TP_ZPGS_V1.2.c: 365: {
  5746                           ;WHQ_TP_ZPGS_V1.2.c: 366: if(((pfgonetemp.pfgtemp) & (1 << (15))))
  5747  051A  1BF9               	btfsc	_pfgonetemp+1,7
  5748                           
  5749                           ;WHQ_TP_ZPGS_V1.2.c: 367: adonf = 0;
  5750  051B  1170               	bcf	Set_Pwm_Onoff@adonf/(0+8),Set_Pwm_Onoff@adonf& (0+7)
  5751                           
  5752                           ;WHQ_TP_ZPGS_V1.2.c: 368: pfgonetemp.pfgtemp &= ~0x8000;
  5753  051C  13F9               	bcf	_pfgonetemp+1,7
  5754                           
  5755                           ;WHQ_TP_ZPGS_V1.2.c: 369: PfgChangef = 1;
  5756  051D  15F0               	bsf	_PfgChangef/(0+8),_PfgChangef& (0+7)	;volatile
  5757  051E  3030               	movlw	48
  5758  051F  0231               	subwf	Set_Pwm_Onoff@pwmcl,w
  5759  0520  1803               	btfsc	3,0
  5760                           
  5761                           ;WHQ_TP_ZPGS_V1.2.c: 371: pwmcl = 0;
  5762  0521  01B1               	clrf	Set_Pwm_Onoff@pwmcl
  5763  0522                     i1l7494:	
  5764                           
  5765                           ;WHQ_TP_ZPGS_V1.2.c: 372: }
  5766                           ;WHQ_TP_ZPGS_V1.2.c: 373: }
  5767                           ;WHQ_TP_ZPGS_V1.2.c: 377: if(0xff != fun)
  5768  0522  0A74               	incf	Set_Pwm_Onoff@fun,w
  5769  0523  1903               	btfsc	3,2
  5770  0524  2D5A               	goto	i1l4947
  5771                           
  5772                           ;WHQ_TP_ZPGS_V1.2.c: 378: {
  5773                           ;WHQ_TP_ZPGS_V1.2.c: 379: if(adonf&&((((ADCON0) & (1 << (1))) == 0)))
  5774  0525  1D70               	btfss	Set_Pwm_Onoff@adonf/(0+8),Set_Pwm_Onoff@adonf& (0+7)
  5775  0526  2D47               	goto	i1l7516
  5776  0527  1283               	bcf	3,5	;RP0=0, select bank0
  5777  0528  189F               	btfsc	31,1	;volatile
  5778  0529  2D47               	goto	i1l7516
  5779                           
  5780                           ;WHQ_TP_ZPGS_V1.2.c: 380: {
  5781                           ;WHQ_TP_ZPGS_V1.2.c: 381: adonf = 0;
  5782  052A  1170               	bcf	Set_Pwm_Onoff@adonf/(0+8),Set_Pwm_Onoff@adonf& (0+7)
  5783                           
  5784                           ;WHQ_TP_ZPGS_V1.2.c: 382: adonetemp.adonebyte.adtempl = ADRESL;
  5785  052B  1683               	bsf	3,5	;RP0=1, select bank1
  5786  052C  081E               	movf	30,w	;volatile
  5787  052D  00AC               	movwf	_adonetemp^(0+128)
  5788                           
  5789                           ;WHQ_TP_ZPGS_V1.2.c: 383: adonetemp.adonebyte.adtemph = (unsigned char)(ADRESH&0x03);
  5790  052E  1283               	bcf	3,5	;RP0=0, select bank0
  5791  052F  081E               	movf	30,w	;volatile
  5792  0530  1683               	bsf	3,5	;RP0=1, select bank1
  5793  0531  00AD               	movwf	(_adonetemp^(0+128)+1)
  5794  0532  3003               	movlw	3
  5795  0533  05AD               	andwf	(_adonetemp^(0+128)+1),f
  5796                           
  5797                           ;WHQ_TP_ZPGS_V1.2.c: 384: cursumt = adonetemp.adtemp + cursumt;
  5798  0534  082C               	movf	_adonetemp^(0+128),w
  5799  0535  07A8               	addwf	Set_Pwm_Onoff@cursumt^(0+128),f
  5800  0536  1803               	skipnc
  5801  0537  0AA9               	incf	(Set_Pwm_Onoff@cursumt+1)^(0+128),f
  5802  0538  082D               	movf	(_adonetemp+1)^(0+128),w
  5803  0539  07A9               	addwf	(Set_Pwm_Onoff@cursumt+1)^(0+128),f
  5804                           
  5805                           ;WHQ_TP_ZPGS_V1.2.c: 385: if(++cur_adcl >= 32)
  5806  053A  3020               	movlw	32
  5807  053B  0AB1               	incf	Set_Pwm_Onoff@cur_adcl^(0+128),f
  5808  053C  0231               	subwf	Set_Pwm_Onoff@cur_adcl^(0+128),w
  5809  053D  1C03               	skipc
  5810  053E  2D47               	goto	i1l7516
  5811                           
  5812                           ;WHQ_TP_ZPGS_V1.2.c: 386: {
  5813                           ;WHQ_TP_ZPGS_V1.2.c: 387: cur_adcl = 0;
  5814  053F  01B1               	clrf	Set_Pwm_Onoff@cur_adcl^(0+128)
  5815                           
  5816                           ;WHQ_TP_ZPGS_V1.2.c: 388: cursum = cursumt;
  5817  0540  0829               	movf	(Set_Pwm_Onoff@cursumt+1)^(0+128),w
  5818  0541  00AB               	movwf	(_cursum+1)^(0+128)	;volatile
  5819  0542  0828               	movf	Set_Pwm_Onoff@cursumt^(0+128),w
  5820  0543  00AA               	movwf	_cursum^(0+128)	;volatile
  5821                           
  5822                           ;WHQ_TP_ZPGS_V1.2.c: 389: cursumt = 0;
  5823  0544  01A8               	clrf	Set_Pwm_Onoff@cursumt^(0+128)
  5824  0545  01A9               	clrf	(Set_Pwm_Onoff@cursumt+1)^(0+128)
  5825                           
  5826                           ;WHQ_TP_ZPGS_V1.2.c: 390: curokf = 1;
  5827  0546  17F0               	bsf	_curokf/(0+8),_curokf& (0+7)	;volatile
  5828  0547                     i1l7516:	
  5829                           
  5830                           ;WHQ_TP_ZPGS_V1.2.c: 391: }
  5831                           ;WHQ_TP_ZPGS_V1.2.c: 392: }
  5832                           ;WHQ_TP_ZPGS_V1.2.c: 394: if((PFGCON&0x80) != 0)
  5833  0547  1283               	bcf	3,5	;RP0=0, select bank2
  5834  0548  1703               	bsf	3,6	;RP1=1, select bank2
  5835  0549  1F9B               	btfss	27,7	;volatile
  5836  054A  0008               	return
  5837                           
  5838                           ;WHQ_TP_ZPGS_V1.2.c: 395: {
  5839                           ;WHQ_TP_ZPGS_V1.2.c: 396: ADCON0 = 0;
  5840  054B  1303               	bcf	3,6	;RP1=0, select bank0
  5841  054C  019F               	clrf	31	;volatile
  5842                           
  5843                           ;WHQ_TP_ZPGS_V1.2.c: 397: ADCON1 = 0x80;
  5844  054D  3080               	movlw	128
  5845  054E  1683               	bsf	3,5	;RP0=1, select bank1
  5846  054F  009F               	movwf	31	;volatile
  5847  0550  3045               	movlw	69
  5848  0551  1283               	bcf	3,5	;RP0=0, select bank0
  5849  0552  009F               	movwf	31	;volatile
  5850  0553  0000               	nop	;# 
  5851  0554  0000               	nop	;# 
  5852                           
  5853                           ;WHQ_TP_ZPGS_V1.2.c: 401: adonf = 1;
  5854  0555  1570               	bsf	Set_Pwm_Onoff@adonf/(0+8),Set_Pwm_Onoff@adonf& (0+7)
  5855                           
  5856                           ;WHQ_TP_ZPGS_V1.2.c: 402: ((ADCON0) |= (1 << (1)));
  5857  0556  1283               	bcf	3,5	;RP0=0, select bank0
  5858  0557  1303               	bcf	3,6	;RP1=0, select bank0
  5859  0558  149F               	bsf	31,1	;volatile
  5860  0559  0008               	return
  5861  055A                     i1l4947:	
  5862                           
  5863                           ;WHQ_TP_ZPGS_V1.2.c: 405: else
  5864                           ;WHQ_TP_ZPGS_V1.2.c: 406: {
  5865                           ;WHQ_TP_ZPGS_V1.2.c: 407: adonf = 0;
  5866  055A  1170               	bcf	Set_Pwm_Onoff@adonf/(0+8),Set_Pwm_Onoff@adonf& (0+7)
  5867  055B  0008               	return
  5868  055C                     __end_of_Set_Pwm_Onoff:	
  5869  007E                     btemp	set	126	;btemp
  5870  007E                     wtemp0	set	126
  5871                           
  5872                           	psect	intentry
  5873  0004                     __pintentry:	
  5874                           ;incstack = 0
  5875                           ; Regs used in _time0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5876                           
  5877  0004                     interrupt_function:	
  5878  007E                     saved_w	set	btemp
  5879  0004  00FE               	movwf	btemp
  5880  0005  0E03               	swapf	3,w
  5881  0006  00F5               	movwf	??_time0
  5882  0007  0804               	movf	4,w
  5883  0008  00F6               	movwf	??_time0+1
  5884  0009  080A               	movf	10,w
  5885  000A  00F7               	movwf	??_time0+2
  5886  000B  118A  2C84         	ljmp	_time0


Data Sizes:
    Strings     0
    Constant    3
    Data        0
    BSS         87
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     16      79
    BANK1            80      0      20
    BANK3            88      0       0
    BANK2            80      0       0

Pointer List with Targets:

    breathSubLed@ledDuty	PTR unsigned char  size(1) Largest target is 1
		 -> cBlueDuty(COMMON[1]), cGreenDuty(BANK0[1]), 

    breathAddLed@ledDuty	PTR unsigned char  size(1) Largest target is 1
		 -> cBlueDuty(COMMON[1]), cGreenDuty(BANK0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _time0 in COMMON

    _time0->_Set_Pwm_Onoff

Critical Paths under _main in BANK0

    _main->_Pwm_Test
    _colorCtr->_breathAddLed
    _colorCtr->_breathSubLed
    _Pwm_Test->_Test_Pwm
    _Test_Pwm->_Get_CUR_Dat
    _Test_Pwm->_Test_PWM_Fst
    _Test_PWM_Fst->_Test_Pwm_Cur
    _Test_Pwm_Cur->_Pwm_add
    _Test_Pwm_Cur->_Pwm_dec
    _PFG_read_fst->_Set_jiyi_re
    _Get_CUR_Dat->___awdiv
    _Delay_nms->_Delay

Critical Paths under _time0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _time0 in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _time0 in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _time0 in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3883
                         _AD_Testing
                          _Delay_nms
                            _Init_ic
                           _Init_ram
                           _Pwm_Test
                        _Set_CCP_PWM
                    _Set_Usart_Async
                           _Set_Work
                            _Sys_set
                           _checkLed
                          _checkVoll
                           _closePWM
                           _colorCtr
                            _rgbShow
                         _uartRevCtr
 ---------------------------------------------------------------------------------
 (1) _uartRevCtr                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rgbShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _colorCtr                                             0     0      0     280
                       _breathAddLed
                       _breathSubLed
                            _rainbow
                           _rainbow2
 ---------------------------------------------------------------------------------
 (2) _rainbow2                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rainbow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _breathSubLed                                         1     1      0     140
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _breathAddLed                                         1     1      0     140
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _closePWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkVoll                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkLed                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Sys_set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_Work                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_Usart_Async                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_CCP_PWM                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Pwm_Test                                             1     1      0    2661
                                             15 BANK0      1     1      0
                           _Test_Pwm
 ---------------------------------------------------------------------------------
 (2) _Test_Pwm                                             5     5      0    2596
                                             10 BANK0      5     5      0
                        _Get_CUR_Dat
                       _PFG_read_fst
                       _Test_PWM_Fst
                       _Test_Pwm_Cur
                         _Test_water
                       _Work_RAM_CLR
                        _YTPFG_Flash
 ---------------------------------------------------------------------------------
 (3) _Work_RAM_CLR                                         2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Test_water                                           6     6      0     121
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) _Test_PWM_Fst                                         1     1      0     684
                                              9 BANK0      1     1      0
                       _Test_Pwm_Cur
                        _YTPFG_Flash
 ---------------------------------------------------------------------------------
 (3) _YTPFG_Flash                                          5     5      0     108
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _Test_Pwm_Cur                                         2     2      0     511
                                              7 BANK0      2     2      0
                            _Pwm_add
                            _Pwm_dec
 ---------------------------------------------------------------------------------
 (4) _Pwm_dec                                              7     5      2     203
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (4) _Pwm_add                                              7     5      2     203
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (3) _PFG_read_fst                                         7     7      0     327
                                              2 BANK0      7     7      0
                        _Set_jiyi_re
 ---------------------------------------------------------------------------------
 (4) _Set_jiyi_re                                          2     2      0      65
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Get_CUR_Dat                                          2     2      0     746
                                              8 BANK0      2     2      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     746
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Init_ram                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ic                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay_nms                                            5     3      2     344
                                              2 BANK0      5     3      2
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _Delay                                                2     0      2     135
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _AD_Testing                                           8     6      2     598
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _time0                                                3     3      0     179
                                              3 COMMON     3     3      0
                      _Set_Pwm_Onoff
 ---------------------------------------------------------------------------------
 (7) _Set_Pwm_Onoff                                        3     3      0     179
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Testing
   _Delay_nms
     _Delay
   _Init_ic
   _Init_ram
   _Pwm_Test
     _Test_Pwm
       _Get_CUR_Dat
         ___awdiv
       _PFG_read_fst
         _Set_jiyi_re
       _Test_PWM_Fst
         _Test_Pwm_Cur
           _Pwm_add
           _Pwm_dec
         _YTPFG_Flash
       _Test_Pwm_Cur
         _Pwm_add
         _Pwm_dec
       _Test_water
       _Work_RAM_CLR
       _YTPFG_Flash
   _Set_CCP_PWM
   _Set_Usart_Async
   _Set_Work
   _Sys_set
   _checkLed
   _checkVoll
   _closePWM
   _colorCtr
     _breathAddLed
     _breathSubLed
     _rainbow
     _rainbow2
   _rgbShow
   _uartRevCtr

 _time0 (ROOT)
   _Set_Pwm_Onoff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       2       0       14.3%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      6F       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     10      4F       5       98.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      14       7       25.0%
BITBANK3            58      0       0       8        0.0%
BANK3               58      0       0       9        0.0%
BITBANK2            50      0       0      10        0.0%
BANK2               50      0       0      11        0.0%
DATA                 0      0      6F      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Sep 04 13:59:45 2023

   __end_of_Set_Pwm_Onoff 055C                         pc 0002       __end_of_Get_CUR_Dat 00C4  
                      PL2 036B                        PL4 0373                        PL6 070C  
                      PL8 037D                        _RD 0C60              ___awdiv@sign 0064  
                      fsr 0004                       PL10 0383                       PL12 038A  
                     PL14 0601                       _GIE 005F                       _PR2 0092  
         YTPFG_Flash@temp 0062       Test_water@curstrold 00A6                       fsr0 0004  
                     indf 0000              _Work_RAM_CLR 0342                      l2410 0581  
                    l5000 01B2                      l2520 068C                      l2418 05C1  
                    l2522 0695                      l2524 069E                      l2516 067A  
                    l5021 0253                      l5014 025F                      l2526 06A7  
                    l2518 0683                      l5007 01FD                      l2480 046D  
                    l2376 066D                      l5041 0035                      l5018 021F  
                    l5043 003B                      l2388 073F                      l5045 0047  
                    l5055 0061                      l5047 0056                      l2498 0422  
                    l8012 0288                      l8022 0296                      l8006 027F  
                    l8034 02AD                      l8052 02CF                      l8044 02BB  
                    l8204 00EB                      l8038 02B5                      l8062 02E4  
                    l8302 021A                      l8056 02D9                      l8048 02C5  
                    l8064 02F6                      l8320 0239                      l8162 00A8  
                    l8082 031E                      l8074 030F                      l4970 00CF  
                    l8234 025E                      l8164 00BD                      l8076 0311  
                    l4972 00DC                      l8332 024B                      l8260 01BF  
                    l8244 01A4                      l8236 0198                      l4973 00DD  
                    l4990 0203                      l4896 0128                      l8352 026B  
                    l4992 018B                      l8408 005D                      l8426 007E  
                    l8364 0762                      l8276 01E1                      l8550 041A  
                    l8542 0421                      l8710 06A8                      l8702 0696  
                    l8720 0567                      l8544 0411                      l8536 040B  
                    l8480 045C                      l8472 0456                      l8298 020C  
                    l8394 0054                      l8706 069F                      l8732 058A  
                    l8652 002A                      l8804 0793                      l8750 05BD  
                    l8718 0564                      l8590 074A                      l7950 010A  
                    l8654 002C                      l8910 0732                      l8486 0465  
                    l8478 046C                      l8814 039C                      l8744 05AA  
                    l8592 075E                      l8584 0748                      l8832 03B8  
                    l8738 059D                      l7970 012A                      l7938 0108  
                    l8922 0740                      l8850 03CE                      l8826 03AE  
                    l8818 03A2                      l8690 067B                      l8748 05B5  
                    l8844 03C7                      l7966 0121                      l8838 03BE  
                    l8694 0684                      l7984 0135                      l8872 06CB  
                    l8936 061F                      l8794 0780                      l8698 068D  
                    l8882 06DE                      l8946 062B                      l8796 0782  
                    l8976 0655                      l8898 0725                      l8986 065F  
                    _CREN 00C4                      _IOCB 0096                      u4105 0241  
                    u4055 0218                      _PIE1 008C                      _PIE2 008D  
                    u3605 0167                      u4085 022F                      u3735 029F  
                    u4635 0750                      u3595 014F                      u3915 0195  
                    _RCIE 0465                      _RCIF 0065                      u4825 05B0  
                    u3785 0096                      _PIR1 000C                      _PIR2 000D  
                    u4835 05BB                      u3885 0176                      u3975 01D4  
                    _OERR 00C1                      u3995 01ED                      _SCKP 04C3  
        YTPFG_Flash@templ 0061                      _SPEN 00C7                      _TXIE 0464  
                    _TXEN 04C5                      _SYNC 04C4                      _WPUA 018E  
                    _WPUB 0095                      _main 0606                      _errf 038F  
                    btemp 007E                      start 000D           __end_of_Init_ic 070C  
         __end_of_Pwm_add 0152           __end_of_Pwm_dec 016A                     ?_main 0072  
     __size_of_AD_Testing 00A5           __end_of___awdiv 02BA                     _EEADR 010D  
                   _EEDAT 010C                     _EEPGD 0C67           ___awdiv@divisor 005F  
 __end_of_Set_Usart_Async 07E7                     _T2CON 0012           __end_of_Sys_set 06F7  
         ___awdiv@counter 0063                     _RCREG 001A               _YTPFG_Flash 0795  
                   _RX9EN 00C6                     _SPBRG 0099                     _PORTA 0005  
                   _PORTB 0006                     _TX9EN 04C6                     _TRISA 0085  
                   _PWMTH 0190                     _TRISB 0086                     _PWMTL 018F  
                   _Delay 0762             _cur_addatold0 003B             _cur_addatold1 003A  
           _cur_addatold2 0039                     _errff 038E           __end_of_rgbShow 06AB  
                   _time0 0484                     _onoff 038D           __end_of_rainbow 0439  
                   _pwmhc 0034                     _pwmlc 0033                     _pwmlv 0020  
                   _pwmtf 038B            __pbitbssCOMMON 0380                     pclath 000A  
              _PfgChangef 0383             ??_Set_CCP_PWM 005F                     status 0003  
                   wtemp0 007E               _Get_CUR_Dat 008D           __initialization 000F  
            __end_of_main 066F          __end_of_Init_ram 07F4        __size_of_Delay_nms 0020  
    __end_of_breathAddLed 03E4                    ??_main 006F          PFG_read_fst@temp 0066  
              _Recebuffer 00A0          __end_of_Set_Work 0FEF                    ?_Delay 005F  
        __end_of_Test_Pwm 008D      __end_of_breathSubLed 03EE          __end_of_Pwm_Test 002F  
                  _ADCON0 001F                    _ADCON1 009F                    _ADRESH 001E  
                  _ADRESL 009E                    ?_time0 0072        Set_Pwm_Onoff@adonf 0382  
        ___awdiv@dividend 0061        Set_Pwm_Onoff@funod 0073                    _GODONE 00F9  
     breathAddLed@ledDuty 005F                    i1l2350 0498                    i1l2358 04B0  
                  _PFGADJ 0119                    i1l4942 051A                    i1l4934 04F4  
                  i1l4947 055A                    i1l7516 0547                    i1l7452 04E1  
                  i1l7470 04FA                    i1l7480 0510                    i1l7448 04D3  
                  i1l7474 0505                    i1l7458 04E5                    i1l7476 0509  
                  i1l7820 04AE                    i1l7494 0522                    i1l7478 050D  
                  _PFGCON 011B                    i1l7818 04AA                    _INTCON 000B  
      Set_Pwm_Onoff@pwmcl 0031                    _OSCCON 008F                    _TMR2IF 0061  
                  _PWMD1L 0194                    _WDTCON 0105                    _PWMT4L 0191  
        __end_of_checkLed 0742             ??_Set_jiyi_re 005F                 ??_Init_ic 005F  
        __end_of_closePWM 1000                _cGreenDuty 005E       __end_of_Set_CCP_PWM 07D4  
        __end_of_colorCtr 03D9                 ??_Pwm_add 0061                 ??_Pwm_dec 0061  
               ??___awdiv 0063                    _Ytzpcl 0037                 ??_Sys_set 005F  
                  _count2 004E                    _curmax 0032                    _curokf 0387  
                  _curset 07FB                    _curupc 003D                    _curupf 0384  
                  _cursum 00AA                    _whFlag 0059                    _on_off 038C  
        ___awdiv@quotient 0065                    _ponecf 0388          __end_of_rainbow2 0484  
                  _tcount 005D                    _pwmtf1 038A                    _pwmfst 0028  
                  _pwmold 0022                    _pwmlst 0026                    _wnoncl 0036  
              _Test_water 016A          ?_Set_Usart_Async 0072         Test_PWM_Fst@templ 0068  
               ??_rgbShow 005F                 ??_rainbow 005F                    saved_w 007E  
      Delay_nms@inittempl 0061              ??_AD_Testing 0061         __end_of_Delay_nms 0762  
 __end_of__initialization 0021           Test_water@temph 0062             __end_of_Delay 076E  
          __pcstackCOMMON 0072         __end_of_Cur_Adcon 07FD        __size_of_checkVoll 0027  
     __end_of_Set_jiyi_re 0342             __end_of_time0 04B9                __end_ofPL2 0373  
              __end_ofPL4 037D                __end_ofPL6 0716                __end_ofPL8 0383  
      __end_of_AD_Testing 0601                   ??_Delay 0061                _cdelayTime 0044  
                 ??_time0 0075         PFG_read_fst@temph 0064         PFG_read_fst@templ 0063  
              __pbssBANK0 0020                __pbssBANK1 00A0             ?_PFG_read_fst 0072  
               ?_Init_ram 0072               _Set_CCP_PWM 07BB                 ?_Set_Work 0072  
              __pmaintext 0606                 ?_Test_Pwm 0072     __size_of_breathAddLed 000B  
               ?_Pwm_Test 0072                _clastGreen 0046                __pintentry 0004  
   __size_of_breathSubLed 000A       Test_Pwm_Cur@curupcl 00B3               ?_Test_water 0072  
     Set_Pwm_Onoff@funold 00B0              ?_YTPFG_Flash 0072             ?_Test_PWM_Fst 0072  
               ?_checkLed 0072                   _PFGCON1 011E                   _PFGSTOP 0088  
                 _PWM01DT 0093                   _PWM23DT 0094                   _PFGchgf 0386  
                 _PWMD01H 011C                   _PWMCON0 0107                   _PWMCON1 0108  
                 _PWMCON2 0109                _count125us 0041                 ?_closePWM 0072  
               ?_colorCtr 0072            ??_PFG_read_fst 0061         __end_of_checkVoll 0795  
              __stringtab 07F4    __size_of_Set_Pwm_Onoff 00A3             ?_Test_Pwm_Cur 0072  
              ??_Init_ram 005F              _breathAddLed 03D9                 ?_rainbow2 0072  
            ?_Get_CUR_Dat 0072                   _Init_ic 06F7               _Set_jiyi_re 032E  
              ??_Set_Work 005F           AD_Testing@ad_ch 005F           AD_Testing@ad_fd 0063  
         AD_Testing@ad_lr 0060           AD_Testing@admax 002A           AD_Testing@admin 002C  
            _breathSubLed 03E4           AD_Testing@adsum 00AE                   _Pwm_add 0139  
              ??_Test_Pwm 0069                   _Pwm_dec 0152     Test_Pwm_Cur@curdowncl 00B2  
              ??_Pwm_Test 006E                   ___awdiv 0275                   _addTime 005B  
                 _Sys_set 06E4                   _tm2Flag 0042     Set_Pwm_Onoff@cur_adcl 00B1  
                 __ptext1 06AB                   __ptext2 066F                   __ptext3 0390  
                 __ptext4 0439                   __ptext5 03EE                   __ptext6 03E4  
                 __ptext7 03D9                   __ptext8 0FF7                   __ptext9 076E  
        Set_jiyi_re@raddr 005F            ??_Test_PWM_Fst 0068                _pfg_select 07FA  
                 _count2s 004F                 _AD_Result 002E                   _lastRed 004D  
                 _redDuty 0055                   _curokcl 0038                ??_checkLed 005F  
                 _rgbShow 066F                   _rainbow 03EE                   _revTime 0051  
                 _ponesec 003E                   _subTime 005A                   _whavecl 0035  
              _pfgonetemp 0078                ??_closePWM 005F                   _pwmnold 0024  
                 clrloop0 0FF0                   _pwmtonf 0389                ??_colorCtr 0060  
    end_of_initialization 0021            ??_Test_Pwm_Cur 0066            Delay_nms@gtemp 0065  
              ??_rainbow2 005F               Pwm_add@temp 0064       __size_of_Test_water 010B  
             Pwm_dec@temp 0064                _uartRevCtr 06AB             _Set_Pwm_Onoff 04B9  
        Test_water@watnof 0381          Test_water@strupc 00A4                 _Delay_nms 0742  
          ?_Set_Pwm_Onoff 0072      __end_of_PFG_read_fst 032E                 _Cur_Adcon 07FC  
          __end_of_curset 07FC               __end_ofPL10 038A               __end_ofPL12 0390  
             __end_ofPL14 0606       start_initialization 000F      __size_of_YTPFG_Flash 0026  
           ?_Work_RAM_CLR 0072  __size_of_Set_Usart_Async 0013              ?_Set_CCP_PWM 0072  
               _cBlueDuty 007B      __end_of_Test_PWM_Fst 00F0                 _cClorStep 0043  
       __size_of_Init_ram 000D                ?_Delay_nms 0061      __size_of_Get_CUR_Dat 0037  
       AD_Testing@adtimes 0040               ?_uartRevCtr 0072         __size_of_Set_Work 0007  
       __size_of_Test_Pwm 005E         __size_of_Pwm_Test 000B      __end_of_Test_Pwm_Cur 0139  
            ??_Test_water 005F            Test_water@temp 0063               __pbssCOMMON 0078  
               ___latbits 0001             __pcstackBANK0 005F            ??_Work_RAM_CLR 005F  
               _mClorStep 0049         __size_of_checkLed 002C         __size_of_closePWM 0009  
       __size_of_colorCtr 0049                 _checkVoll 076E                 _adonetemp 00AC  
                ?_Init_ic 0072              ?_Set_jiyi_re 0072        __end_of_Test_water 0275  
               _delayTime 004A            Pwm_add@pwmlset 005F           ??_Set_Pwm_Onoff 0072  
       __size_of_rainbow2 004B                 _clastBlue 0045                  ?_Pwm_add 005F  
                ?_Pwm_dec 005F             Test_Pwm@ondly 0030             Test_Pwm@templ 006D  
                ?___awdiv 005F                  ?_Sys_set 0072           Test_Pwm@curokf1 0380  
               _curLedCnt 007A                 __pstrings 07F4                 _cur_addat 003F  
                ?_rgbShow 0072                 _greenDuty 0054                  ?_rainbow 0072  
               _lastGreen 004C            __size_of_Delay 000C       breathSubLed@ledDuty 005F  
          AD_Testing@data 0065               _ganshaoFlag 0048       __size_of_uartRevCtr 0039  
          __size_of_time0 0035      Set_Pwm_Onoff@cursumt 00A8                 _rececount 0058  
       interrupt_function 0004            Pwm_dec@pwmfset 005F                  _PFGDATA1 011F  
              ?_checkVoll 0072                 clear_ram0 0FEF         ??_Set_Usart_Async 005F  
             ??_Delay_nms 0063                 _onoff_fst 0385     __size_of_PFG_read_fst 0074  
             __stringbase 07F9                 _startTime 0050     __size_of_Test_PWM_Fst 002C  
            _PFG_read_fst 02BA                  _Init_ram 07E7             Pwm_Test@templ 006E  
    __size_of_Set_CCP_PWM 0019          Set_Pwm_Onoff@fun 0074                  _Set_Work 0FE8  
        __size_of_Init_ic 0015                  _cRedDuty 0052     __size_of_Test_Pwm_Cur 0049  
                _Test_Pwm 002F      __end_of_Work_RAM_CLR 036B                  _Pwm_Test 0024  
        __size_of_Pwm_add 0019          __size_of_Pwm_dec 0018          __size_of___awdiv 0045  
        __size_of_Sys_set 0013        __end_of__stringtab 07FA              _Test_PWM_Fst 00C4  
                _checkLed 0716                  _led1Step 0057                  _led2Step 0056  
        __size_of_rgbShow 003C          __size_of_rainbow 004B                  _clastRed 0047  
                _blueDuty 0053                  __ptext10 0716                  __ptext11 06E4  
                __ptext20 0795                  __ptext12 0FE8                  __ptext21 00F0  
                __ptext13 07D4                  __ptext30 0742                  __ptext22 0152  
                __ptext14 07BB                  __ptext31 0762                  __ptext23 0139  
                __ptext15 0024                  __ptext32 055C                  __ptext24 02BA  
                __ptext16 002F                  __ptext33 0484                  __ptext25 032E  
                __ptext17 0342                  __ptext34 04B9                  __ptext26 008D  
                __ptext18 016A                  __ptext27 0275                  __ptext19 00C4  
                __ptext28 07E7                  __ptext29 06F7                  _closePWM 0FF7  
       Test_Pwm_Cur@temph 0066         Test_Pwm_Cur@templ 0067                  _colorCtr 0390  
       Set_jiyi_re@redata 0060                  _lastBlue 004B                _AD_Testing 055C  
                _currDuty 005C                  _curdownc 003C              _Test_Pwm_Cur 00F0  
           __size_of_main 0069               ??_checkVoll 005F                  _rainbow2 0439  
      __end_of_pfg_select 07FB              ??_uartRevCtr 005F      __size_of_Set_jiyi_re 0014  
              Delay@dtemp 005F             ??_YTPFG_Flash 005F                Delay_nms@i 0063  
            Pwm_add@addcl 0063        __end_of_uartRevCtr 06E4                  intlevel1 0000  
           ?_breathAddLed 0072              Pwm_dec@deccl 0063             ??_Get_CUR_Dat 0067  
               stringcode 07F4             ?_breathSubLed 0072     PFG_read_fst@pfgconset 0065  
              _OPTION_REG 0081               AD_Testing@i 0064                  stringdir 07F4  
                stringtab 07F4           _Set_Usart_Async 07D4       __end_of_YTPFG_Flash 07BB  
          ??_breathAddLed 005F               ?_AD_Testing 005F     __size_of_Work_RAM_CLR 0029  
          ??_breathSubLed 005F  
