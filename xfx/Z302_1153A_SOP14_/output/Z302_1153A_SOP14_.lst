

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jun 05 18:55:39 2021

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1153A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	psect	pa_nodes0,global,class=CODE,delta=2
    22                           	dabs	1,0x4E,2
    23  0000                     
    24                           ; Version 1.45
    25                           ; Generated 16/11/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F887 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     
    59                           	psect	text0
    60  0000                     __ptext0:	
    61  0018                     _TRISA	set	24
    62  0017                     _PORTA	set	23
    63  000E                     _IOCB	set	14
    64  000D                     _WPUB	set	13
    65  000B                     _PDCONB	set	11
    66  0009                     _INTCON	set	9
    67  0008                     _OSCCON	set	8
    68  0007                     _OPTION_REG	set	7
    69  0006                     _TRISB	set	6
    70  0005                     _PORTB	set	5
    71  0001                     _TMR0	set	1
    72  0048                     _RBIF	set	72
    73  004A                     _T0IF	set	74
    74  004B                     _RBIE	set	75
    75  004F                     _GIE	set	79
    76                           
    77                           	psect	cinit
    78  000B                     start_initialization:	
    79                           ; #config settings
    80                           
    81  000B                     __initialization:	
    82                           
    83                           ; Clear objects allocated to BANK0
    84  000B  3020               	movlw	low __pbssBANK0
    85  000C  0084               	movwf	4
    86  000D  3033               	movlw	low (__pbssBANK0+19)
    87  000E  2174               	fcall	clear_ram0
    88  000F                     end_of_initialization:	
    89                           ;End of C runtime variable initialization code
    90                           
    91  000F                     __end_of__initialization:	
    92  000F  0183               	clrf	3
    93  0010  2902               	ljmp	_main	;jump to C main() function
    94                           
    95                           	psect	bssBANK0
    96  0020                     __pbssBANK0:	
    97  0020                     _sleepTime:	
    98  0020                     	ds	1
    99  0021                     _chrgFullCount:	
   100  0021                     	ds	1
   101  0022                     _chrgFlag:	
   102  0022                     	ds	1
   103  0023                     _keyCount:	
   104  0023                     	ds	1
   105  0024                     _ledCount:	
   106  0024                     	ds	1
   107  0025                     _count1s:	
   108  0025                     	ds	1
   109  0026                     _workTime:	
   110  0026                     	ds	1
   111  0027                     _waitTime:	
   112  0027                     	ds	1
   113  0028                     _workStep:	
   114  0028                     	ds	1
   115  0029                     _delayTime:	
   116  0029                     	ds	1
   117  002A                     _lastBlue:	
   118  002A                     	ds	1
   119  002B                     _blue:	
   120  002B                     	ds	1
   121  002C                     _lastGreen:	
   122  002C                     	ds	1
   123  002D                     _green:	
   124  002D                     	ds	1
   125  002E                     _lastRed:	
   126  002E                     	ds	1
   127  002F                     _red:	
   128  002F                     	ds	1
   129  0030                     _colorStep:	
   130  0030                     	ds	1
   131  0031                     _intCount:	
   132  0031                     	ds	1
   133  0032                     _IntFlag:	
   134  0032                     	ds	1
   135                           
   136                           	psect	clrtext
   137  0174                     clear_ram0:	
   138                           ;	Called with FSR containing the base address, and
   139                           ;	W with the last address+1
   140                           
   141  0174  0064               	clrwdt	;clear the watchdog before getting into this loop
   142  0175                     clrloop0:	
   143  0175  0180               	clrf	0	;clear RAM location pointed to by FSR
   144  0176  0A84               	incf	4,f	;increment pointer
   145  0177  0604               	xorwf	4,w	;XOR with final address
   146  0178  1903               	btfsc	3,2	;have we reached the end yet?
   147  0179  3400               	retlw	0	;all done for this memory range, return
   148  017A  0604               	xorwf	4,w	;XOR again to restore value
   149  017B  2975               	goto	clrloop0	;do the next byte
   150                           
   151                           	psect	cstackCOMMON
   152  0000                     __pcstackCOMMON:	
   153  0000                     ??_InitSys:	
   154  0000                     ??_showRGB:	
   155                           ; 1 bytes @ 0x0
   156                           
   157  0000                     ??_chrgCtr:	
   158                           ; 1 bytes @ 0x0
   159                           
   160  0000                     ??_keyCtr:	
   161                           ; 1 bytes @ 0x0
   162                           
   163  0000                     ??_workCtr:	
   164                           ; 1 bytes @ 0x0
   165                           
   166  0000                     ??_gotoSleep:	
   167                           ; 1 bytes @ 0x0
   168                           
   169  0000                     ??_rainbow:	
   170                           ; 1 bytes @ 0x0
   171                           
   172  0000                     ??_keyRead:	
   173                           ; 1 bytes @ 0x0
   174                           
   175  0000                     ??_main:	
   176                           ; 1 bytes @ 0x0
   177                           
   178                           
   179                           	psect	cstackBANK0
   180  0033                     __pcstackBANK0:	
   181                           ; 1 bytes @ 0x0
   182                           
   183  0033                     ?_InitSys:	
   184  0033                     ?_showRGB:	
   185                           ; 1 bytes @ 0x0
   186                           
   187  0033                     ?_chrgCtr:	
   188                           ; 1 bytes @ 0x0
   189                           
   190  0033                     ?_keyCtr:	
   191                           ; 1 bytes @ 0x0
   192                           
   193  0033                     ?_workCtr:	
   194                           ; 1 bytes @ 0x0
   195                           
   196  0033                     ?_gotoSleep:	
   197                           ; 1 bytes @ 0x0
   198                           
   199  0033                     ?_rainbow:	
   200                           ; 1 bytes @ 0x0
   201                           
   202  0033                     ?_keyRead:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  0033                     ?_main:	
   206                           ; 1 bytes @ 0x0
   207                           
   208  0033                     ?_Timer0_Isr:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0033                     ??_Timer0_Isr:	
   212                           ; 1 bytes @ 0x0
   213                           
   214                           
   215                           ; 1 bytes @ 0x0
   216  0033                     	ds	2
   217  0035                     keyRead@KeyStatus:	
   218                           
   219                           ; 1 bytes @ 0x2
   220  0035                     	ds	1
   221                           
   222                           	psect	maintext
   223  0102                     __pmaintext:	
   224 ;;
   225 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   226 ;;
   227 ;; *************** function _main *****************
   228 ;; Defined at:
   229 ;;		line 36 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_\main.c"
   230 ;; Parameters:    Size  Location     Type
   231 ;;		None
   232 ;; Auto vars:     Size  Location     Type
   233 ;;		None
   234 ;; Return value:  Size  Location     Type
   235 ;;                  1    wreg      void 
   236 ;; Registers used:
   237 ;;		wreg, status,2, status,0, pclath, cstack
   238 ;; Tracked objects:
   239 ;;		On entry : B00/0
   240 ;;		On exit  : 0/0
   241 ;;		Unchanged: 0/0
   242 ;; Data sizes:     COMMON   BANK0
   243 ;;      Params:         0       0
   244 ;;      Locals:         0       0
   245 ;;      Temps:          0       0
   246 ;;      Totals:         0       0
   247 ;;Total ram usage:        0 bytes
   248 ;; Hardware stack levels required when called:    3
   249 ;; This function calls:
   250 ;;		_InitSys
   251 ;;		_chrgCtr
   252 ;;		_gotoSleep
   253 ;;		_keyCtr
   254 ;;		_showRGB
   255 ;;		_workCtr
   256 ;; This function is called by:
   257 ;;		Startup code after reset
   258 ;; This function uses a non-reentrant model
   259 ;;
   260                           
   261                           
   262                           ;psect for function _main
   263  0102                     _main:	
   264                           
   265                           ;main.c: 38: InitSys();
   266                           
   267                           ;incstack = 0
   268                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   269  0102  2121               	fcall	_InitSys
   270  0103                     l401:	
   271                           ;main.c: 39: while(1)
   272                           
   273  0103  0064               	clrwdt	;# 
   274                           
   275                           ;main.c: 42: if(workStep == 1)
   276  0104  0B28               	decfsz	_workStep,w
   277  0105  2907               	goto	l1425
   278                           
   279                           ;main.c: 43: {
   280                           ;main.c: 44: showRGB();
   281  0106  20C2               	fcall	_showRGB
   282  0107                     l1425:	
   283                           
   284                           ;main.c: 45: }
   285                           ;main.c: 46: if(!IntFlag)
   286  0107  0832               	movf	_IntFlag,w
   287  0108  1903               	btfsc	3,2
   288  0109  2903               	goto	l401
   289                           
   290                           ;main.c: 48: IntFlag = 0;
   291  010A  01B2               	clrf	_IntFlag
   292                           
   293                           ;main.c: 49: chrgCtr();
   294  010B  20E2               	fcall	_chrgCtr
   295                           
   296                           ;main.c: 50: if(chrgFlag == 0)
   297  010C  0822               	movf	_chrgFlag,w
   298  010D  1D03               	btfss	3,2
   299  010E  2910               	goto	l405
   300                           
   301                           ;main.c: 51: keyCtr();
   302  010F  213A               	fcall	_keyCtr
   303  0110                     l405:	
   304                           
   305                           ;main.c: 52: workCtr();
   306  0110  2079               	fcall	_workCtr
   307                           
   308                           ;main.c: 53: if((0x10 & PORTB) == 0 && keyCount == 0 && workStep == 0)
   309  0111  1A05               	btfsc	5,4	;volatile
   310  0112  2903               	goto	l401
   311  0113  0823               	movf	_keyCount,w
   312  0114  1D03               	btfss	3,2
   313  0115  2903               	goto	l401
   314  0116  0828               	movf	_workStep,w
   315  0117  1D03               	btfss	3,2
   316  0118  2903               	goto	l401
   317                           
   318                           ;main.c: 54: {
   319                           ;main.c: 55: if(++sleepTime > 200)
   320  0119  30C9               	movlw	201
   321  011A  0AA0               	incf	_sleepTime,f
   322  011B  0220               	subwf	_sleepTime,w
   323  011C  1C03               	skipc
   324  011D  2903               	goto	l401
   325                           
   326                           ;main.c: 56: {
   327                           ;main.c: 57: sleepTime = 0;
   328  011E  01A0               	clrf	_sleepTime
   329                           
   330                           ;main.c: 58: gotoSleep();
   331  011F  214F               	fcall	_gotoSleep
   332  0120  2903               	goto	l401
   333  0121                     __end_of_main:	
   334                           
   335                           	psect	text1
   336  0079                     __ptext1:	
   337 ;; *************** function _workCtr *****************
   338 ;; Defined at:
   339 ;;		line 130 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_\main.c"
   340 ;; Parameters:    Size  Location     Type
   341 ;;		None
   342 ;; Auto vars:     Size  Location     Type
   343 ;;		None
   344 ;; Return value:  Size  Location     Type
   345 ;;                  1    wreg      void 
   346 ;; Registers used:
   347 ;;		wreg, status,2, status,0, pclath, cstack
   348 ;; Tracked objects:
   349 ;;		On entry : 0/0
   350 ;;		On exit  : 0/0
   351 ;;		Unchanged: 0/0
   352 ;; Data sizes:     COMMON   BANK0
   353 ;;      Params:         0       0
   354 ;;      Locals:         0       0
   355 ;;      Temps:          0       0
   356 ;;      Totals:         0       0
   357 ;;Total ram usage:        0 bytes
   358 ;; Hardware stack levels used:    1
   359 ;; Hardware stack levels required when called:    2
   360 ;; This function calls:
   361 ;;		_rainbow
   362 ;; This function is called by:
   363 ;;		_main
   364 ;; This function uses a non-reentrant model
   365 ;;
   366                           
   367                           
   368                           ;psect for function _workCtr
   369  0079                     _workCtr:	
   370                           
   371                           ;main.c: 132: if(workStep == 1)
   372                           
   373                           ;incstack = 0
   374                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   375  0079  0B28               	decfsz	_workStep,w
   376  007A  2884               	goto	l1379
   377                           
   378                           ;main.c: 133: {
   379                           ;main.c: 134: PORTA |= 0x06;
   380  007B  3006               	movlw	6
   381  007C  0497               	iorwf	23,f	;volatile
   382                           
   383                           ;main.c: 135: rainbow();
   384  007D  2011               	fcall	_rainbow
   385                           
   386                           ;main.c: 136: if(workTime == 0)
   387  007E  0826               	movf	_workTime,w
   388  007F  1D03               	btfss	3,2
   389  0080  0008               	return
   390                           
   391                           ;main.c: 137: {
   392                           ;main.c: 138: workStep = 2;
   393  0081  3002               	movlw	2
   394  0082  00A8               	movwf	_workStep
   395  0083  0008               	return
   396  0084                     l1379:	
   397                           
   398                           ;main.c: 141: else if(workStep == 0)
   399  0084  0828               	movf	_workStep,w
   400  0085  1D03               	btfss	3,2
   401  0086  2893               	goto	l1387
   402                           
   403                           ;main.c: 142: {
   404                           ;main.c: 143: if(chrgFlag)
   405  0087  0822               	movf	_chrgFlag,w
   406                           
   407                           ;main.c: 144: {
   408                           ;main.c: 145: PORTA &= 0x01;
   409  0088  3001               	movlw	1
   410  0089  1903               	btfsc	3,2
   411  008A  288F               	goto	L1
   412  008B  0597               	andwf	23,f	;volatile
   413                           
   414                           ;main.c: 146: PORTB |= 0x7F;
   415  008C  307F               	movlw	127
   416  008D  0485               	iorwf	5,f	;volatile
   417                           
   418                           ;main.c: 147: }
   419  008E  0008               	return
   420  008F                     L1:	
   421                           ;main.c: 148: else
   422                           ;main.c: 149: {
   423                           ;main.c: 150: PORTA = 0x01;
   424                           
   425  008F  0097               	movwf	23	;volatile
   426                           
   427                           ;main.c: 151: PORTB = 0xFF;
   428  0090  30FF               	movlw	255
   429  0091  0085               	movwf	5	;volatile
   430  0092  0008               	return
   431  0093                     l1387:	
   432                           
   433                           ;main.c: 154: else if(workStep == 2)
   434  0093  3002               	movlw	2
   435  0094  0628               	xorwf	_workStep,w
   436  0095  1D03               	btfss	3,2
   437  0096  0008               	return
   438                           
   439                           ;main.c: 155: {
   440                           ;main.c: 156: PORTB = 0xBE;
   441  0097  30BE               	movlw	190
   442  0098  0085               	movwf	5	;volatile
   443                           
   444                           ;main.c: 157: PORTA = 0x01;
   445  0099  3001               	movlw	1
   446  009A  0097               	movwf	23	;volatile
   447                           
   448                           ;main.c: 158: if(waitTime == 0)
   449  009B  0827               	movf	_waitTime,w
   450  009C  1903               	btfsc	3,2
   451                           
   452                           ;main.c: 159: {
   453                           ;main.c: 160: workStep = 0;
   454  009D  01A8               	clrf	_workStep
   455  009E  0008               	return
   456  009F                     __end_of_workCtr:	
   457                           
   458                           	psect	text2
   459  0011                     __ptext2:	
   460 ;; *************** function _rainbow *****************
   461 ;; Defined at:
   462 ;;		line 266 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_\main.c"
   463 ;; Parameters:    Size  Location     Type
   464 ;;		None
   465 ;; Auto vars:     Size  Location     Type
   466 ;;		None
   467 ;; Return value:  Size  Location     Type
   468 ;;                  1    wreg      void 
   469 ;; Registers used:
   470 ;;		wreg, status,2, status,0
   471 ;; Tracked objects:
   472 ;;		On entry : 0/0
   473 ;;		On exit  : 0/0
   474 ;;		Unchanged: 0/0
   475 ;; Data sizes:     COMMON   BANK0
   476 ;;      Params:         0       0
   477 ;;      Locals:         0       0
   478 ;;      Temps:          0       0
   479 ;;      Totals:         0       0
   480 ;;Total ram usage:        0 bytes
   481 ;; Hardware stack levels used:    1
   482 ;; Hardware stack levels required when called:    1
   483 ;; This function calls:
   484 ;;		Nothing
   485 ;; This function is called by:
   486 ;;		_workCtr
   487 ;; This function uses a non-reentrant model
   488 ;;
   489                           
   490                           
   491                           ;psect for function _rainbow
   492  0011                     _rainbow:	
   493                           
   494                           ;main.c: 269: if(red > lastRed)
   495                           
   496                           ;incstack = 0
   497                           ; Regs used in _rainbow: [wreg+status,2+status,0]
   498  0011  082F               	movf	_red,w
   499  0012  022E               	subwf	_lastRed,w
   500  0013  1C03               	btfss	3,0
   501                           
   502                           ;main.c: 270: red--;
   503  0014  03AF               	decf	_red,f
   504                           
   505                           ;main.c: 271: if(green > lastGreen)
   506  0015  082D               	movf	_green,w
   507  0016  022C               	subwf	_lastGreen,w
   508  0017  1C03               	btfss	3,0
   509                           
   510                           ;main.c: 272: green--;
   511  0018  03AD               	decf	_green,f
   512                           
   513                           ;main.c: 273: if(blue > lastBlue)
   514  0019  082B               	movf	_blue,w
   515  001A  022A               	subwf	_lastBlue,w
   516  001B  1C03               	btfss	3,0
   517                           
   518                           ;main.c: 274: blue--;
   519  001C  03AB               	decf	_blue,f
   520                           
   521                           ;main.c: 275: if(red < lastRed)
   522  001D  082E               	movf	_lastRed,w
   523  001E  022F               	subwf	_red,w
   524  001F  1C03               	btfss	3,0
   525                           
   526                           ;main.c: 276: red++;
   527  0020  0AAF               	incf	_red,f
   528                           
   529                           ;main.c: 277: if(green < lastGreen)
   530  0021  082C               	movf	_lastGreen,w
   531  0022  022D               	subwf	_green,w
   532  0023  1C03               	btfss	3,0
   533                           
   534                           ;main.c: 278: green++;
   535  0024  0AAD               	incf	_green,f
   536                           
   537                           ;main.c: 279: if(blue < lastBlue)
   538  0025  082A               	movf	_lastBlue,w
   539  0026  022B               	subwf	_blue,w
   540  0027  1C03               	btfss	3,0
   541                           
   542                           ;main.c: 280: blue++;
   543  0028  0AAB               	incf	_blue,f
   544                           
   545                           ;main.c: 281: if(delayTime > 0)
   546  0029  0829               	movf	_delayTime,w
   547  002A  1903               	btfsc	3,2
   548  002B  282E               	goto	l1205
   549                           
   550                           ;main.c: 282: {
   551                           ;main.c: 283: delayTime--;
   552  002C  03A9               	decf	_delayTime,f
   553  002D  0008               	return
   554  002E                     l1205:	
   555                           
   556                           ;main.c: 285: }
   557                           ;main.c: 286: if(colorStep == 1)
   558  002E  0B30               	decfsz	_colorStep,w
   559  002F  2835               	goto	l1213
   560  0030                     l1207:	
   561                           
   562                           ;main.c: 287: {
   563                           ;main.c: 288: lastRed = 255;
   564  0030  30FF               	movlw	255
   565  0031  00AE               	movwf	_lastRed
   566                           
   567                           ;main.c: 289: lastGreen = 0;
   568  0032  01AC               	clrf	_lastGreen
   569  0033                     l1211:	
   570                           
   571                           ;main.c: 290: lastBlue = 0;
   572  0033  01AA               	clrf	_lastBlue
   573                           
   574                           ;main.c: 292: }
   575  0034  2860               	goto	l472
   576  0035                     l1213:	
   577                           
   578                           ;main.c: 293: else if(colorStep == 2)
   579  0035  3002               	movlw	2
   580  0036  0630               	xorwf	_colorStep,w
   581  0037  1D03               	btfss	3,2
   582  0038  283C               	goto	l1219
   583  0039                     l1215:	
   584                           
   585                           ;main.c: 294: {
   586                           ;main.c: 295: lastRed = 255;
   587  0039  30FF               	movlw	255
   588  003A  00AE               	movwf	_lastRed
   589  003B  2842               	goto	L2
   590  003C                     l1219:	
   591                           ;main.c: 296: lastGreen = 255;
   592                           
   593                           
   594                           ;main.c: 299: else if(colorStep == 3)
   595  003C  3003               	movlw	3
   596  003D  0630               	xorwf	_colorStep,w
   597  003E  1D03               	btfss	3,2
   598  003F  2844               	goto	l1227
   599  0040                     l1221:	
   600  0040  30FF               	movlw	255
   601                           
   602                           ;main.c: 300: {
   603                           ;main.c: 301: lastRed = 0;
   604  0041  01AE               	clrf	_lastRed
   605  0042                     L2:	
   606                           ;main.c: 302: lastGreen = 255;
   607                           
   608  0042  00AC               	movwf	_lastGreen
   609  0043  2833               	goto	l1211
   610  0044                     l1227:	
   611                           
   612                           ;main.c: 305: else if(colorStep == 4)
   613  0044  3004               	movlw	4
   614  0045  0630               	xorwf	_colorStep,w
   615  0046  1D03               	btfss	3,2
   616  0047  284D               	goto	l1233
   617                           
   618                           ;main.c: 306: {
   619                           ;main.c: 307: lastRed = 0;
   620  0048  01AE               	clrf	_lastRed
   621  0049                     L3:	
   622  0049  30FF               	movlw	255
   623                           
   624                           ;main.c: 308: lastGreen = 0;
   625  004A  01AC               	clrf	_lastGreen
   626                           
   627                           ;main.c: 309: lastBlue = 255;
   628  004B  00AA               	movwf	_lastBlue
   629                           
   630                           ;main.c: 310: }
   631  004C  2860               	goto	l472
   632  004D                     l1233:	
   633                           
   634                           ;main.c: 311: else if(colorStep == 5)
   635  004D  3005               	movlw	5
   636  004E  0630               	xorwf	_colorStep,w
   637  004F  1D03               	btfss	3,2
   638  0050  2854               	goto	l1241
   639                           
   640                           ;main.c: 312: {
   641                           ;main.c: 313: lastRed = 255;
   642  0051  30FF               	movlw	255
   643  0052  00AE               	movwf	_lastRed
   644  0053  2849               	goto	L3
   645  0054                     l1241:	
   646                           ;main.c: 314: lastGreen = 0;
   647                           
   648                           
   649                           ;main.c: 317: else if(colorStep == 6)
   650  0054  3006               	movlw	6
   651  0055  0630               	xorwf	_colorStep,w
   652  0056  1903               	btfsc	3,2
   653  0057  2830               	goto	l1207
   654                           
   655                           ;main.c: 323: else if(colorStep == 7)
   656  0058  3007               	movlw	7
   657  0059  0630               	xorwf	_colorStep,w
   658  005A  1903               	btfsc	3,2
   659  005B  2839               	goto	l1215
   660                           
   661                           ;main.c: 329: else if(colorStep == 8)
   662  005C  3008               	movlw	8
   663  005D  0630               	xorwf	_colorStep,w
   664  005E  1903               	btfsc	3,2
   665  005F  2840               	goto	l1221
   666  0060                     l472:	
   667                           
   668                           ;main.c: 334: }
   669                           ;main.c: 337: if(red == lastRed && blue == lastBlue && green == lastGreen)
   670  0060  082F               	movf	_red,w
   671  0061  062E               	xorwf	_lastRed,w
   672  0062  1D03               	skipz
   673  0063  0008               	return
   674  0064  082B               	movf	_blue,w
   675  0065  062A               	xorwf	_lastBlue,w
   676  0066  1D03               	skipz
   677  0067  0008               	return
   678  0068  082D               	movf	_green,w
   679  0069  062C               	xorwf	_lastGreen,w
   680  006A  1D03               	skipz
   681  006B  0008               	return
   682                           
   683                           ;main.c: 338: {
   684                           ;main.c: 339: if(++colorStep > 8)
   685  006C  3009               	movlw	9
   686  006D  0AB0               	incf	_colorStep,f
   687  006E  0230               	subwf	_colorStep,w
   688  006F  1C03               	skipc
   689  0070  2873               	goto	l1271
   690                           
   691                           ;main.c: 340: {
   692                           ;main.c: 341: colorStep = 4;
   693  0071  3004               	movlw	4
   694  0072  00B0               	movwf	_colorStep
   695  0073                     l1271:	
   696                           
   697                           ;main.c: 342: }
   698                           ;main.c: 343: if(delayTime == 0)
   699  0073  0829               	movf	_delayTime,w
   700  0074  1D03               	btfss	3,2
   701  0075  0008               	return
   702                           
   703                           ;main.c: 344: delayTime = 90;
   704  0076  305A               	movlw	90
   705  0077  00A9               	movwf	_delayTime
   706  0078  0008               	return
   707  0079                     __end_of_rainbow:	
   708                           
   709                           	psect	text3
   710  00C2                     __ptext3:	
   711 ;; *************** function _showRGB *****************
   712 ;; Defined at:
   713 ;;		line 166 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_\main.c"
   714 ;; Parameters:    Size  Location     Type
   715 ;;		None
   716 ;; Auto vars:     Size  Location     Type
   717 ;;		None
   718 ;; Return value:  Size  Location     Type
   719 ;;                  1    wreg      void 
   720 ;; Registers used:
   721 ;;		wreg, status,2, status,0
   722 ;; Tracked objects:
   723 ;;		On entry : 0/0
   724 ;;		On exit  : 0/0
   725 ;;		Unchanged: 0/0
   726 ;; Data sizes:     COMMON   BANK0
   727 ;;      Params:         0       0
   728 ;;      Locals:         0       0
   729 ;;      Temps:          0       0
   730 ;;      Totals:         0       0
   731 ;;Total ram usage:        0 bytes
   732 ;; Hardware stack levels used:    1
   733 ;; Hardware stack levels required when called:    1
   734 ;; This function calls:
   735 ;;		Nothing
   736 ;; This function is called by:
   737 ;;		_main
   738 ;; This function uses a non-reentrant model
   739 ;;
   740                           
   741                           
   742                           ;psect for function _showRGB
   743  00C2                     _showRGB:	
   744                           
   745                           ;main.c: 169: if(blue > ledCount)
   746                           
   747                           ;incstack = 0
   748                           ; Regs used in _showRGB: [wreg+status,2+status,0]
   749  00C2  082B               	movf	_blue,w
   750  00C3  0224               	subwf	_ledCount,w
   751  00C4  1803               	skipnc
   752  00C5  28C9               	goto	l1319
   753                           
   754                           ;main.c: 170: {
   755                           ;main.c: 171: PORTB |= 0x41;
   756  00C6  3041               	movlw	65
   757  00C7  0485               	iorwf	5,f	;volatile
   758                           
   759                           ;main.c: 172: }
   760  00C8  28CB               	goto	l1321
   761  00C9                     l1319:	
   762                           
   763                           ;main.c: 173: else
   764                           ;main.c: 174: {
   765                           ;main.c: 175: PORTB &= 0xBE;
   766  00C9  30BE               	movlw	190
   767  00CA  0585               	andwf	5,f	;volatile
   768  00CB                     l1321:	
   769                           
   770                           ;main.c: 176: }
   771                           ;main.c: 178: if(red > ledCount)
   772  00CB  082F               	movf	_red,w
   773  00CC  0224               	subwf	_ledCount,w
   774  00CD  1803               	skipnc
   775  00CE  28D2               	goto	l439
   776                           
   777                           ;main.c: 179: {
   778                           ;main.c: 180: PORTA |= 0x01;
   779  00CF  1417               	bsf	23,0	;volatile
   780                           
   781                           ;main.c: 181: PORTB |= 0x04;
   782  00D0  1505               	bsf	5,2	;volatile
   783                           
   784                           ;main.c: 182: }
   785  00D1  28D4               	goto	l1325
   786  00D2                     l439:	
   787                           
   788                           ;main.c: 183: else
   789                           ;main.c: 184: {
   790                           ;main.c: 185: PORTA &= 0xFE;
   791  00D2  1017               	bcf	23,0	;volatile
   792                           
   793                           ;main.c: 186: PORTB &= 0xFB;
   794  00D3  1105               	bcf	5,2	;volatile
   795  00D4                     l1325:	
   796                           
   797                           ;main.c: 187: }
   798                           ;main.c: 189: if(green > ledCount)
   799  00D4  082D               	movf	_green,w
   800  00D5  0224               	subwf	_ledCount,w
   801  00D6  1803               	skipnc
   802  00D7  28DB               	goto	l1329
   803                           
   804                           ;main.c: 190: {
   805                           ;main.c: 191: PORTB |= 0x82;
   806  00D8  3082               	movlw	130
   807  00D9  0485               	iorwf	5,f	;volatile
   808                           
   809                           ;main.c: 192: }
   810  00DA  28DD               	goto	l442
   811  00DB                     l1329:	
   812                           
   813                           ;main.c: 193: else
   814                           ;main.c: 194: {
   815                           ;main.c: 195: PORTB &= 0x7D;
   816  00DB  307D               	movlw	125
   817  00DC  0585               	andwf	5,f	;volatile
   818  00DD                     l442:	
   819                           
   820                           ;main.c: 196: }
   821                           ;main.c: 197: if(++ledCount > 254)
   822  00DD  0AA4               	incf	_ledCount,f
   823  00DE  0F24               	incfsz	_ledCount,w
   824  00DF  0008               	return
   825                           
   826                           ;main.c: 198: ledCount = 0;
   827  00E0  01A4               	clrf	_ledCount
   828  00E1  0008               	return
   829  00E2                     __end_of_showRGB:	
   830                           
   831                           	psect	text4
   832  013A                     __ptext4:	
   833 ;; *************** function _keyCtr *****************
   834 ;; Defined at:
   835 ;;		line 224 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_\main.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;		None
   838 ;; Auto vars:     Size  Location     Type
   839 ;;		None
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, status,2, status,0, pclath, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMMON   BANK0
   849 ;;      Params:         0       0
   850 ;;      Locals:         0       0
   851 ;;      Temps:          0       0
   852 ;;      Totals:         0       0
   853 ;;Total ram usage:        0 bytes
   854 ;; Hardware stack levels used:    1
   855 ;; Hardware stack levels required when called:    2
   856 ;; This function calls:
   857 ;;		_keyRead
   858 ;; This function is called by:
   859 ;;		_main
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           
   864                           ;psect for function _keyCtr
   865  013A                     _keyCtr:	
   866                           
   867                           ;main.c: 226: PORTB;
   868                           
   869                           ;incstack = 0
   870                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
   871  013A  0805               	movf	5,w	;volatile
   872                           
   873                           ;main.c: 227: if(keyRead(0x08 & (~PORTB)))
   874  013B  0905               	comf	5,w	;volatile
   875  013C  3908               	andlw	8
   876  013D  2162               	fcall	_keyRead
   877  013E  3A00               	xorlw	0
   878  013F  1903               	skipnz
   879  0140  0008               	return
   880                           
   881                           ;main.c: 228: {
   882                           ;main.c: 229: if(workStep == 1)
   883  0141  0B28               	decfsz	_workStep,w
   884  0142  2948               	goto	l451
   885                           
   886                           ;main.c: 230: {
   887                           ;main.c: 231: workStep = 2;
   888  0143  3002               	movlw	2
   889  0144  00A8               	movwf	_workStep
   890                           
   891                           ;main.c: 232: waitTime = 30;
   892  0145  301E               	movlw	30
   893  0146  00A7               	movwf	_waitTime
   894                           
   895                           ;main.c: 233: }
   896  0147  0008               	return
   897  0148                     l451:	
   898  0148  3078               	movlw	120
   899                           
   900                           ;main.c: 234: else
   901                           ;main.c: 235: {
   902                           ;main.c: 236: workStep = 1;
   903  0149  01A8               	clrf	_workStep
   904  014A  0AA8               	incf	_workStep,f
   905                           
   906                           ;main.c: 237: colorStep = 1;
   907  014B  01B0               	clrf	_colorStep
   908  014C  0AB0               	incf	_colorStep,f
   909                           
   910                           ;main.c: 238: workTime = 120;
   911  014D  00A6               	movwf	_workTime
   912  014E  0008               	return
   913  014F                     __end_of_keyCtr:	
   914                           
   915                           	psect	text5
   916  0162                     __ptext5:	
   917 ;; *************** function _keyRead *****************
   918 ;; Defined at:
   919 ;;		line 243 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_\main.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;  KeyStatus       1    wreg     unsigned char 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  KeyStatus       1    2[BANK0 ] unsigned char 
   924 ;; Return value:  Size  Location     Type
   925 ;;                  1    wreg      unsigned char 
   926 ;; Registers used:
   927 ;;		wreg, status,2, status,0
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMMON   BANK0
   933 ;;      Params:         0       0
   934 ;;      Locals:         0       1
   935 ;;      Temps:          0       0
   936 ;;      Totals:         0       1
   937 ;;Total ram usage:        1 bytes
   938 ;; Hardware stack levels used:    1
   939 ;; Hardware stack levels required when called:    1
   940 ;; This function calls:
   941 ;;		Nothing
   942 ;; This function is called by:
   943 ;;		_keyCtr
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           
   948                           ;psect for function _keyRead
   949  0162                     _keyRead:	
   950                           
   951                           ;incstack = 0
   952                           ; Regs used in _keyRead: [wreg+status,2+status,0]
   953                           ;keyRead@KeyStatus stored from wreg
   954  0162  00B5               	movwf	keyRead@KeyStatus
   955                           
   956                           ;main.c: 245: if (KeyStatus)
   957  0163  0835               	movf	keyRead@KeyStatus,w
   958  0164  1903               	btfsc	3,2
   959  0165  296E               	goto	l1281
   960                           
   961                           ;main.c: 246: {
   962                           ;main.c: 247: if(++keyCount >= 150)
   963  0166  3096               	movlw	150
   964  0167  0AA3               	incf	_keyCount,f
   965  0168  0223               	subwf	_keyCount,w
   966  0169  1C03               	skipc
   967  016A  3400               	retlw	0
   968                           
   969                           ;main.c: 248: {
   970                           ;main.c: 249: keyCount = 150;
   971  016B  3096               	movlw	150
   972  016C  00A3               	movwf	_keyCount
   973  016D  3400               	retlw	0
   974  016E                     l1281:	
   975                           
   976                           ;main.c: 252: else
   977                           ;main.c: 253: {
   978                           ;main.c: 254: if(keyCount >= 5)
   979  016E  3005               	movlw	5
   980  016F  0223               	subwf	_keyCount,w
   981                           
   982                           ;main.c: 255: {
   983                           ;main.c: 256: keyCount = 0;
   984  0170  01A3               	clrf	_keyCount
   985  0171  1803               	btfsc	3,0
   986                           
   987                           ;main.c: 257: return 1;
   988  0172  3401               	retlw	1
   989  0173  3400               	retlw	0
   990  0174                     __end_of_keyRead:	
   991                           ;main.c: 260: }
   992                           ;main.c: 261: return 0;
   993                           
   994                           ;main.c: 258: }
   995                           ;main.c: 259: keyCount = 0;
   996                           
   997                           
   998                           	psect	text6
   999  014F                     __ptext6:	
  1000 ;; *************** function _gotoSleep *****************
  1001 ;; Defined at:
  1002 ;;		line 65 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_\main.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;		None
  1005 ;; Auto vars:     Size  Location     Type
  1006 ;;		None
  1007 ;; Return value:  Size  Location     Type
  1008 ;;                  1    wreg      void 
  1009 ;; Registers used:
  1010 ;;		wreg, status,2
  1011 ;; Tracked objects:
  1012 ;;		On entry : 0/0
  1013 ;;		On exit  : 0/0
  1014 ;;		Unchanged: 0/0
  1015 ;; Data sizes:     COMMON   BANK0
  1016 ;;      Params:         0       0
  1017 ;;      Locals:         0       0
  1018 ;;      Temps:          0       0
  1019 ;;      Totals:         0       0
  1020 ;;Total ram usage:        0 bytes
  1021 ;; Hardware stack levels used:    1
  1022 ;; Hardware stack levels required when called:    1
  1023 ;; This function calls:
  1024 ;;		Nothing
  1025 ;; This function is called by:
  1026 ;;		_main
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           
  1031                           ;psect for function _gotoSleep
  1032  014F                     _gotoSleep:	
  1033                           
  1034                           ;main.c: 67: sleepTime = 0;
  1035                           
  1036                           ;incstack = 0
  1037                           ; Regs used in _gotoSleep: [wreg+status,2]
  1038  014F  01A0               	clrf	_sleepTime
  1039                           
  1040                           ;main.c: 68: RBIE = 1;
  1041  0150  1589               	bsf	9,3	;volatile
  1042                           
  1043                           ;main.c: 69: GIE = 1;
  1044  0151  1789               	bsf	9,7	;volatile
  1045                           
  1046                           ;main.c: 71: IOCB = 0x18;
  1047  0152  3018               	movlw	24
  1048  0153  008E               	movwf	14	;volatile
  1049                           
  1050                           ;main.c: 72: OSCCON = 0X71;
  1051  0154  3071               	movlw	113
  1052  0155  0088               	movwf	8	;volatile
  1053                           
  1054                           ;main.c: 73: PORTA;
  1055  0156  0817               	movf	23,w	;volatile
  1056                           
  1057                           ;main.c: 74: PORTB;
  1058  0157  0805               	movf	5,w	;volatile
  1059  0158  0064               	clrwdt	;# 
  1060  0159  0063               	sleep	;# 
  1061  015A  0000               	nop	;# 
  1062                           
  1063                           ;main.c: 81: OSCCON = 0X81;
  1064  015B  3081               	movlw	129
  1065  015C  0088               	movwf	8	;volatile
  1066                           
  1067                           ;main.c: 82: PORTA;
  1068  015D  0817               	movf	23,w	;volatile
  1069                           
  1070                           ;main.c: 83: PORTB;
  1071  015E  0805               	movf	5,w	;volatile
  1072                           
  1073                           ;main.c: 84: IOCB = 0x00;
  1074  015F  018E               	clrf	14	;volatile
  1075                           
  1076                           ;main.c: 85: RBIE = 0;
  1077  0160  1189               	bcf	9,3	;volatile
  1078  0161  0008               	return
  1079  0162                     __end_of_gotoSleep:	
  1080                           
  1081                           	psect	text7
  1082  00E2                     __ptext7:	
  1083 ;; *************** function _chrgCtr *****************
  1084 ;; Defined at:
  1085 ;;		line 89 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_\main.c"
  1086 ;; Parameters:    Size  Location     Type
  1087 ;;		None
  1088 ;; Auto vars:     Size  Location     Type
  1089 ;;		None
  1090 ;; Return value:  Size  Location     Type
  1091 ;;                  1    wreg      void 
  1092 ;; Registers used:
  1093 ;;		wreg, status,2, status,0
  1094 ;; Tracked objects:
  1095 ;;		On entry : 0/0
  1096 ;;		On exit  : 0/0
  1097 ;;		Unchanged: 0/0
  1098 ;; Data sizes:     COMMON   BANK0
  1099 ;;      Params:         0       0
  1100 ;;      Locals:         0       0
  1101 ;;      Temps:          0       0
  1102 ;;      Totals:         0       0
  1103 ;;Total ram usage:        0 bytes
  1104 ;; Hardware stack levels used:    1
  1105 ;; Hardware stack levels required when called:    1
  1106 ;; This function calls:
  1107 ;;		Nothing
  1108 ;; This function is called by:
  1109 ;;		_main
  1110 ;; This function uses a non-reentrant model
  1111 ;;
  1112                           
  1113                           
  1114                           ;psect for function _chrgCtr
  1115  00E2                     _chrgCtr:	
  1116                           
  1117                           ;main.c: 91: if(0x10 & PORTB)
  1118                           
  1119                           ;incstack = 0
  1120                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  1121  00E2  1E05               	btfss	5,4	;volatile
  1122  00E3  2900               	goto	l1357
  1123                           
  1124                           ;main.c: 92: {
  1125                           ;main.c: 94: workStep = 0;
  1126  00E4  01A8               	clrf	_workStep
  1127                           
  1128                           ;main.c: 95: waitTime = 0;
  1129  00E5  01A7               	clrf	_waitTime
  1130                           
  1131                           ;main.c: 96: workTime = 0;
  1132  00E6  01A6               	clrf	_workTime
  1133                           
  1134                           ;main.c: 97: chrgFlag = 1;
  1135  00E7  01A2               	clrf	_chrgFlag
  1136  00E8  0AA2               	incf	_chrgFlag,f
  1137                           
  1138                           ;main.c: 98: if(0x20 & PORTB)
  1139  00E9  1E85               	btfss	5,5	;volatile
  1140  00EA  28F5               	goto	l1349
  1141                           
  1142                           ;main.c: 99: {
  1143                           ;main.c: 101: if(++chrgFullCount > 200)
  1144  00EB  30C9               	movlw	201
  1145  00EC  0AA1               	incf	_chrgFullCount,f
  1146  00ED  0221               	subwf	_chrgFullCount,w
  1147  00EE  1C03               	skipc
  1148  00EF  0008               	return
  1149                           
  1150                           ;main.c: 102: {
  1151                           ;main.c: 103: chrgFullCount = 200;
  1152  00F0  30C8               	movlw	200
  1153  00F1  00A1               	movwf	_chrgFullCount
  1154                           
  1155                           ;main.c: 104: PORTA |= 01;
  1156  00F2  1417               	bsf	23,0	;volatile
  1157                           
  1158                           ;main.c: 105: PORTB &= 0x7F;
  1159  00F3  1385               	bcf	5,7	;volatile
  1160  00F4  0008               	return
  1161  00F5                     l1349:	
  1162  00F5  30C3               	movlw	195
  1163                           
  1164                           ;main.c: 108: else
  1165                           ;main.c: 109: {
  1166                           ;main.c: 110: chrgFullCount = 0;
  1167  00F6  01A1               	clrf	_chrgFullCount
  1168                           
  1169                           ;main.c: 112: PORTB |= 0xC3;
  1170  00F7  0485               	iorwf	5,f	;volatile
  1171                           
  1172                           ;main.c: 113: if(count1s < 50)
  1173  00F8  3032               	movlw	50
  1174  00F9  0225               	subwf	_count1s,w
  1175  00FA  1803               	skipnc
  1176  00FB  28FE               	goto	l419
  1177                           
  1178                           ;main.c: 114: {
  1179                           ;main.c: 115: PORTA |= 0x01;
  1180  00FC  1417               	bsf	23,0	;volatile
  1181                           
  1182                           ;main.c: 116: }
  1183  00FD  0008               	return
  1184  00FE                     l419:	
  1185                           
  1186                           ;main.c: 117: else
  1187                           ;main.c: 118: {
  1188                           ;main.c: 119: PORTA &= 0xFE;
  1189  00FE  1017               	bcf	23,0	;volatile
  1190  00FF  0008               	return
  1191  0100                     l1357:	
  1192                           
  1193                           ;main.c: 123: else
  1194                           ;main.c: 124: {
  1195                           ;main.c: 125: chrgFlag = 0;
  1196  0100  01A2               	clrf	_chrgFlag
  1197  0101  0008               	return
  1198  0102                     __end_of_chrgCtr:	
  1199                           
  1200                           	psect	text8
  1201  0121                     __ptext8:	
  1202 ;; *************** function _InitSys *****************
  1203 ;; Defined at:
  1204 ;;		line 203 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_\main.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;		None
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;		None
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  1    wreg      void 
  1211 ;; Registers used:
  1212 ;;		wreg, status,2
  1213 ;; Tracked objects:
  1214 ;;		On entry : B00/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMMON   BANK0
  1218 ;;      Params:         0       0
  1219 ;;      Locals:         0       0
  1220 ;;      Temps:          0       0
  1221 ;;      Totals:         0       0
  1222 ;;Total ram usage:        0 bytes
  1223 ;; Hardware stack levels used:    1
  1224 ;; Hardware stack levels required when called:    1
  1225 ;; This function calls:
  1226 ;;		Nothing
  1227 ;; This function is called by:
  1228 ;;		_main
  1229 ;; This function uses a non-reentrant model
  1230 ;;
  1231                           
  1232                           
  1233                           ;psect for function _InitSys
  1234  0121                     _InitSys:	
  1235                           
  1236                           ;incstack = 0
  1237                           ; Regs used in _InitSys: [wreg+status,2]
  1238  0121  0000               	nop	;# 
  1239  0122  0064               	clrwdt	;# 
  1240                           
  1241                           ;main.c: 207: PORTA = 0x01;
  1242  0123  3001               	movlw	1
  1243  0124  0097               	movwf	23	;volatile
  1244                           
  1245                           ;main.c: 208: PORTB = 0xFF;
  1246  0125  30FF               	movlw	255
  1247  0126  0085               	movwf	5	;volatile
  1248                           
  1249                           ;main.c: 209: INTCON = 0;
  1250  0127  0189               	clrf	9	;volatile
  1251                           
  1252                           ;main.c: 210: OSCCON = 0X71;
  1253  0128  3071               	movlw	113
  1254  0129  0088               	movwf	8	;volatile
  1255                           
  1256                           ;main.c: 211: OPTION_REG = 0x00;
  1257  012A  0187               	clrf	7	;volatile
  1258                           
  1259                           ;main.c: 212: TMR0 = 155;
  1260  012B  309B               	movlw	155
  1261  012C  0081               	movwf	1	;volatile
  1262                           
  1263                           ;main.c: 213: INTCON = 0xE0;
  1264  012D  30E0               	movlw	224
  1265  012E  0089               	movwf	9	;volatile
  1266                           
  1267                           ;main.c: 214: TRISA = 0x00;
  1268  012F  0198               	clrf	24	;volatile
  1269                           
  1270                           ;main.c: 215: TRISB = 0x38;
  1271  0130  3038               	movlw	56
  1272  0131  0086               	movwf	6	;volatile
  1273                           
  1274                           ;main.c: 216: PORTA = 0x01;
  1275  0132  3001               	movlw	1
  1276  0133  0097               	movwf	23	;volatile
  1277                           
  1278                           ;main.c: 217: PORTB = 0xFF;
  1279  0134  30FF               	movlw	255
  1280  0135  0085               	movwf	5	;volatile
  1281                           
  1282                           ;main.c: 218: PDCONB = 0x00;
  1283  0136  018B               	clrf	11	;volatile
  1284                           
  1285                           ;main.c: 219: WPUB = 0x28;
  1286  0137  3028               	movlw	40
  1287  0138  008D               	movwf	13	;volatile
  1288  0139  0008               	return
  1289  013A                     __end_of_InitSys:	
  1290                           
  1291                           	psect	text9
  1292  009F                     __ptext9:	
  1293 ;; *************** function _Timer0_Isr *****************
  1294 ;; Defined at:
  1295 ;;		line 355 in file "C:\mcuproject\scm\xfx\Z302_1153A_SOP14_\main.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;		None
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;		None
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  1    wreg      void 
  1302 ;; Registers used:
  1303 ;;		wreg, status,2, status,0
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMMON   BANK0
  1309 ;;      Params:         0       0
  1310 ;;      Locals:         0       0
  1311 ;;      Temps:          0       2
  1312 ;;      Totals:         0       2
  1313 ;;Total ram usage:        2 bytes
  1314 ;; Hardware stack levels used:    1
  1315 ;; This function calls:
  1316 ;;		Nothing
  1317 ;; This function is called by:
  1318 ;;		Interrupt level 1
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           
  1323                           ;psect for function _Timer0_Isr
  1324  009F                     _Timer0_Isr:	
  1325                           
  1326                           ;main.c: 356: if (T0IF) {
  1327  009F  1D09               	btfss	9,2	;volatile
  1328  00A0  28B9               	goto	i1l1171
  1329                           
  1330                           ;main.c: 358: TMR0 += 155;
  1331  00A1  309B               	movlw	155
  1332  00A2  0781               	addwf	1,f	;volatile
  1333                           
  1334                           ;main.c: 361: T0IF = 0;
  1335  00A3  1109               	bcf	9,2	;volatile
  1336                           
  1337                           ;main.c: 362: if(++intCount >= 100)
  1338  00A4  3064               	movlw	100
  1339  00A5  0AB1               	incf	_intCount,f
  1340  00A6  0231               	subwf	_intCount,w
  1341  00A7  1C03               	skipc
  1342  00A8  28B9               	goto	i1l1171
  1343  00A9  3064               	movlw	100
  1344                           
  1345                           ;main.c: 363: {
  1346                           ;main.c: 364: IntFlag = 1;
  1347  00AA  01B2               	clrf	_IntFlag
  1348  00AB  0AB2               	incf	_IntFlag,f
  1349                           
  1350                           ;main.c: 365: intCount = 0;
  1351  00AC  01B1               	clrf	_intCount
  1352                           
  1353                           ;main.c: 366: if(++count1s >= 100)
  1354  00AD  0AA5               	incf	_count1s,f
  1355  00AE  0225               	subwf	_count1s,w
  1356  00AF  1C03               	skipc
  1357  00B0  28B9               	goto	i1l1171
  1358                           
  1359                           ;main.c: 367: {
  1360                           ;main.c: 368: count1s = 0;
  1361  00B1  01A5               	clrf	_count1s
  1362                           
  1363                           ;main.c: 369: if(workTime > 0)
  1364  00B2  0826               	movf	_workTime,w
  1365  00B3  1903               	btfsc	3,2
  1366  00B4  28B6               	goto	i1l1167
  1367                           
  1368                           ;main.c: 370: workTime--;
  1369  00B5  03A6               	decf	_workTime,f
  1370  00B6                     i1l1167:	
  1371                           
  1372                           ;main.c: 371: if(waitTime > 0)
  1373  00B6  0827               	movf	_waitTime,w
  1374  00B7  1D03               	btfss	3,2
  1375                           
  1376                           ;main.c: 372: waitTime--;
  1377  00B8  03A7               	decf	_waitTime,f
  1378  00B9                     i1l1171:	
  1379                           
  1380                           ;main.c: 373: }
  1381                           ;main.c: 374: }
  1382                           ;main.c: 376: }
  1383                           ;main.c: 378: if (RBIF) {
  1384  00B9  1809               	btfsc	9,0	;volatile
  1385                           
  1386                           ;main.c: 379: RBIF = 0;
  1387  00BA  1009               	bcf	9,0	;volatile
  1388  00BB  0834               	movf	??_Timer0_Isr+1,w
  1389  00BC  008A               	movwf	10
  1390  00BD  0E33               	swapf	??_Timer0_Isr^0,w
  1391  00BE  0083               	movwf	3
  1392  00BF  0ECE               	swapf	78,f
  1393  00C0  0E4E               	swapf	78,w
  1394  00C1  0009               	retfie
  1395  00C2                     __end_of_Timer0_Isr:	
  1396  004E                     btemp	set	78	;btemp
  1397  004E                     wtemp0	set	78
  1398                           
  1399                           	psect	intentry
  1400  0004                     __pintentry:	
  1401                           ;incstack = 0
  1402                           ; Regs used in _Timer0_Isr: [wreg+status,2+status,0]
  1403                           
  1404  0004                     interrupt_function:	
  1405  004E                     saved_w	set	btemp
  1406  0004  00CE               	movwf	btemp
  1407  0005  0E03               	swapf	3,w
  1408  0006  00B3               	movwf	??_Timer0_Isr
  1409  0007  080A               	movf	10,w
  1410  0008  00B4               	movwf	??_Timer0_Isr+1
  1411  0009  289F               	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            46      3      22

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    _keyCtr->_keyRead

Critical Paths under _Timer0_Isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      22
                            _InitSys
                            _chrgCtr
                          _gotoSleep
                             _keyCtr
                            _showRGB
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _rainbow
 ---------------------------------------------------------------------------------
 (2) _rainbow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _showRGB                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               0     0      0      22
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _gotoSleep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSys                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Timer0_Isr                                           2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitSys
   _chrgCtr
   _gotoSleep
   _keyCtr
     _keyRead
   _showRGB
   _workCtr
     _rainbow

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               2E      3      16       3       47.8%
ABS                  0      0      16       4        0.0%
BITBANK0            2E      0       0       5        0.0%
DATA                 0      0      16       6        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jun 05 18:55:39 2021

                     fsr 0004                      l401 0103                      l405 0110  
                    l442 00DD                      l419 00FE                      l451 0148  
                    l439 00D2                      l472 0060                      _GIE 004F  
                    _red 002F                      indf 0000                     l1211 0033  
                   l1221 0040                     l1213 0035                     l1205 002E  
                   l1215 0039                     l1207 0030                     l1321 00CB  
                   l1241 0054                     l1233 004D                     l1227 0044  
                   l1219 003C                     l1325 00D4                     l1319 00C9  
                   l1271 0073                     l1281 016E                     l1329 00DB  
                   l1425 0107                     l1349 00F5                     l1357 0100  
                   l1387 0093                     l1379 0084                     _T0IF 004A  
                   _IOCB 000E                     _RBIE 004B                     _RBIF 0048  
                   _TMR0 0001                     _WPUB 000D                     _blue 002B  
                   _main 0102                     btemp 004E                     start 000A  
        __end_of_InitSys 013A                    ?_main 0033                    _PORTA 0017  
                  _PORTB 0005                    _TRISA 0018                    _TRISB 0006  
        __end_of_chrgCtr 0102          __end_of_keyRead 0174                    _green 002D  
        __end_of_rainbow 0079                    pclath 000A          __end_of_showRGB 00E2  
                  status 0003                    wtemp0 004E          __end_of_workCtr 009F  
        __initialization 000B             __end_of_main 0121                   ??_main 0000  
                 i1l1171 00B9                   i1l1167 00B6                   _PDCONB 000B  
                 _INTCON 0009                   _OSCCON 0008                ??_InitSys 0000  
             _Timer0_Isr 009F                   _keyCtr 013A                ??_chrgCtr 0000  
              ??_keyRead 0000                ??_rainbow 0000                   saved_w 004E  
              ??_showRGB 0000                ??_workCtr 0000  __end_of__initialization 000F  
         __pcstackCOMMON 0000               __pbssBANK0 0020       __size_of_gotoSleep 0013  
            ?_Timer0_Isr 0033               __pmaintext 0102               __pintentry 0004  
                ?_keyCtr 0033                  _IntFlag 0032                  _InitSys 0121  
        __size_of_keyCtr 0015                  _chrgCtr 00E2                  __ptext0 0000  
                __ptext1 0079                  __ptext2 0011                  __ptext3 00C2  
                __ptext4 013A                  __ptext5 0162                  __ptext6 014F  
                __ptext7 00E2                  __ptext8 0121                  __ptext9 009F  
                _count1s 0025                  _keyRead 0162                  _lastRed 002E  
      __end_of_gotoSleep 0162                  _rainbow 0011                  _showRGB 00C2  
    __size_of_Timer0_Isr 0023                  clrloop0 0175                  _workCtr 0079  
   end_of_initialization 000F           __end_of_keyCtr 014F      start_initialization 000B  
           ??_Timer0_Isr 0033                 ??_keyCtr 0000         keyRead@KeyStatus 0035  
              ___latbits 0000            __pcstackBANK0 0033       __end_of_Timer0_Isr 00C2  
          _chrgFullCount 0021                 ?_InitSys 0033                _delayTime 0029  
               ?_chrgCtr 0033                _colorStep 0030                 ?_keyRead 0033  
               ?_rainbow 0033                _lastGreen 002C                 ?_showRGB 0033  
              _gotoSleep 014F                 ?_workCtr 0033        interrupt_function 0004  
              clear_ram0 0174                _sleepTime 0020               ?_gotoSleep 0033  
       __size_of_InitSys 0019         __size_of_chrgCtr 0020         __size_of_keyRead 0012  
               _chrgFlag 0022         __size_of_rainbow 0068                 _ledCount 0024  
       __size_of_showRGB 0020         __size_of_workCtr 0026                 _keyCount 0023  
               _lastBlue 002A                 _intCount 0031            __size_of_main 001F  
               _waitTime 0027                 _workTime 0026                 _workStep 0028  
            ??_gotoSleep 0000                 intlevel1 0000               _OPTION_REG 0007  
