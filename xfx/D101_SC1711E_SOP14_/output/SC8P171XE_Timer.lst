

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Wed Jun 30 10:43:51 2021

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1711E
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	pa_nodes0,global,class=CODE,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 1.45
    37                           ; Generated 16/11/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F887 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71                           	psect	idataBANK0
    72  0000                     __pidataBANK0:	
    73  001F                     _ADCON0	set	31
    74  001E                     _ADRESH	set	30
    75  001B                     _PWMCON	set	27
    76  001A                     _PWMTH	set	26
    77  0019                     _PWMTL	set	25
    78  0018                     _PWMD01H	set	24
    79  0017                     _PWMD1L	set	23
    80  0008                     _WPDA	set	8
    81  0007                     _WPUA	set	7
    82  0006                     _PORTB	set	6
    83  0005                     _PORTA	set	5
    84  0001                     _TMR0	set	1
    85  00F9                     _GODONE	set	249
    86  005A                     _T0IF	set	90
    87  005D                     _T0IE	set	93
    88  005F                     _GIE	set	95
    89  0030                     _RB0	set	48
    90  0031                     _RB1	set	49
    91  0032                     _RB2	set	50
    92  0033                     _RB3	set	51
    93  0035                     _RB5	set	53
    94  0028                     _RA0	set	40
    95  0029                     _RA1	set	41
    96  002A                     _RA2	set	42
    97  002C                     _RA4	set	44
    98  002D                     _RA5	set	45
    99  009F                     _ADCON1	set	159
   100  009E                     _ADRESL	set	158
   101  0095                     _WPUB	set	149
   102  008F                     _OSCCON	set	143
   103  0088                     _WDTCON	set	136
   104  0087                     _WPDB	set	135
   105  0086                     _TRISB	set	134
   106  0085                     _TRISA	set	133
   107  0081                     _OPTION_REG	set	129
   108  04FA                     _LDOEN	set	1274
   109  049B                     _ANS3	set	1179
   110  042B                     _TRISA3	set	1067
   111                           
   112                           	psect	cinit
   113  000B                     start_initialization:	
   114                           ; #config settings
   115                           
   116  000B                     __initialization:	
   117                           
   118                           ;initializer for _table
   119  000B  303F               	movlw	63
   120  000C  00BE               	movwf	__pdataBANK0& (0+127)
   121  000D  3006               	movlw	6
   122  000E  00BF               	movwf	(__pdataBANK0+1)& (0+127)
   123  000F  305B               	movlw	91
   124  0010  00C0               	movwf	(__pdataBANK0+2)& (0+127)
   125  0011  304F               	movlw	79
   126  0012  00C1               	movwf	(__pdataBANK0+3)& (0+127)
   127  0013  3066               	movlw	102
   128  0014  00C2               	movwf	(__pdataBANK0+4)& (0+127)
   129  0015  306D               	movlw	109
   130  0016  00C3               	movwf	(__pdataBANK0+5)& (0+127)
   131  0017  307D               	movlw	125
   132  0018  00C4               	movwf	(__pdataBANK0+6)& (0+127)
   133  0019  3007               	movlw	7
   134  001A  00C5               	movwf	(__pdataBANK0+7)& (0+127)
   135  001B  307F               	movlw	127
   136  001C  00C6               	movwf	(__pdataBANK0+8)& (0+127)
   137  001D  306F               	movlw	111
   138  001E  00C7               	movwf	(__pdataBANK0+9)& (0+127)
   139  001F  3071               	movlw	113
   140  0020  00C8               	movwf	(__pdataBANK0+10)& (0+127)
   141  0021  3038               	movlw	56
   142  0022  00C9               	movwf	(__pdataBANK0+11)& (0+127)
   143  0023  3020               	movlw	low __pbssBANK0
   144                           
   145                           ; Clear objects allocated to BANK0
   146  0024  1383               	bcf	3,7	;select IRP bank0
   147  0025  0084               	movwf	4
   148  0026  303E               	movlw	low (__pbssBANK0+30)
   149  0027  2376               	fcall	clear_ram0
   150                           
   151                           ; Clear objects allocated to COMMON
   152  0028  01F7               	clrf	__pbssCOMMON& (0+127)
   153  0029  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   154  002A  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   155  002B                     end_of_initialization:	
   156                           ;End of C runtime variable initialization code
   157                           
   158  002B                     __end_of__initialization:	
   159  002B  0183               	clrf	3
   160  002C  2973               	ljmp	_main	;jump to C main() function
   161                           
   162                           	psect	bssCOMMON
   163  0077                     __pbssCOMMON:	
   164  0077                     _adresult:	
   165  0077                     	ds	2
   166  0079                     _workStep:	
   167  0079                     	ds	1
   168                           
   169                           	psect	bssBANK0
   170  0020                     __pbssBANK0:	
   171  0020                     _adsum:	
   172  0020                     	ds	4
   173  0024                     _admax:	
   174  0024                     	ds	2
   175  0026                     _admin:	
   176  0026                     	ds	2
   177  0028                     _count3S:	
   178  0028                     	ds	2
   179  002A                     _count900s:	
   180  002A                     	ds	2
   181  002C                     _adtimes:	
   182  002C                     	ds	1
   183  002D                     _pwmFlag:	
   184  002D                     	ds	1
   185  002E                     _maxDuty:	
   186  002E                     	ds	1
   187  002F                     _firstTime:	
   188  002F                     	ds	1
   189  0030                     _adCheckTime:	
   190  0030                     	ds	1
   191  0031                     _gewei:	
   192  0031                     	ds	1
   193  0032                     _shiwei:	
   194  0032                     	ds	1
   195  0033                     _batValue:	
   196  0033                     	ds	1
   197  0034                     _chrgStep:	
   198  0034                     	ds	1
   199  0035                     _count1s:	
   200  0035                     	ds	1
   201  0036                     _longPressFlag:	
   202  0036                     	ds	1
   203  0037                     _duty:	
   204  0037                     	ds	1
   205  0038                     _keyCount:	
   206  0038                     	ds	1
   207  0039                     _sleepTime:	
   208  0039                     	ds	1
   209  003A                     _IntFlag:	
   210  003A                     	ds	1
   211  003B                     _intCount:	
   212  003B                     	ds	1
   213  003C                     _keyCount3:	
   214  003C                     	ds	1
   215  003D                     _keyCount2:	
   216  003D                     	ds	1
   217                           
   218                           	psect	dataBANK0
   219  003E                     __pdataBANK0:	
   220  003E                     _table:	
   221  003E                     	ds	12
   222                           
   223                           	psect	clrtext
   224  0376                     clear_ram0:	
   225                           ;	Called with FSR containing the base address, and
   226                           ;	W with the last address+1
   227                           
   228  0376  0064               	clrwdt	;clear the watchdog before getting into this loop
   229  0377                     clrloop0:	
   230  0377  0180               	clrf	0	;clear RAM location pointed to by FSR
   231  0378  0A84               	incf	4,f	;increment pointer
   232  0379  0604               	xorwf	4,w	;XOR with final address
   233  037A  1903               	btfsc	3,2	;have we reached the end yet?
   234  037B  3400               	retlw	0	;all done for this memory range, return
   235  037C  0604               	xorwf	4,w	;XOR again to restore value
   236  037D  2B77               	goto	clrloop0	;do the next byte
   237                           
   238                           	psect	cstackCOMMON
   239  0070                     __pcstackCOMMON:	
   240  0070                     ?_IO_Init:	
   241  0070                     ?_refresh:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_checkBatAD:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_chrgCtr:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_keyCtr:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_workCtr:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_pwmStop:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_gotoSleep:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ?_pwmInit:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?_ind_light_disp:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_delay_us:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ?_Delay10Us:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_main:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_keyRead:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_Timer0_Isr:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ??_Timer0_Isr:	
   284                           ; 1 bytes @ 0x0
   285                           
   286                           
   287                           ; 1 bytes @ 0x0
   288  0070                     	ds	2
   289  0072                     ??_IO_Init:	
   290  0072                     ??_chrgCtr:	
   291                           ; 1 bytes @ 0x2
   292                           
   293  0072                     ??_pwmStop:	
   294                           ; 1 bytes @ 0x2
   295                           
   296  0072                     ??_gotoSleep:	
   297                           ; 1 bytes @ 0x2
   298                           
   299  0072                     ??_pwmInit:	
   300                           ; 1 bytes @ 0x2
   301                           
   302  0072                     ?_ADC_Sample:	
   303                           ; 1 bytes @ 0x2
   304                           
   305  0072                     ??_ind_light_disp:	
   306                           ; 1 bytes @ 0x2
   307                           
   308  0072                     ??_delay_us:	
   309                           ; 1 bytes @ 0x2
   310                           
   311  0072                     ??_Delay10Us:	
   312                           ; 1 bytes @ 0x2
   313                           
   314  0072                     ??_keyRead:	
   315                           ; 1 bytes @ 0x2
   316                           
   317  0072                     ?_keyRead2:	
   318                           ; 1 bytes @ 0x2
   319                           
   320  0072                     ?___lbdiv:	
   321                           ; 1 bytes @ 0x2
   322                           
   323  0072                     ?___lbmod:	
   324                           ; 1 bytes @ 0x2
   325                           
   326  0072                     ?___lwmod:	
   327                           ; 1 bytes @ 0x2
   328                           
   329  0072                     ADC_Sample@adldo:	
   330                           ; 2 bytes @ 0x2
   331                           
   332  0072                     keyRead@KeyStatus:	
   333                           ; 1 bytes @ 0x2
   334                           
   335  0072                     keyRead2@keyCount:	
   336                           ; 1 bytes @ 0x2
   337                           
   338  0072                     ind_light_disp@udata:	
   339                           ; 1 bytes @ 0x2
   340                           
   341  0072                     delay_us@time:	
   342                           ; 1 bytes @ 0x2
   343                           
   344  0072                     ___lbdiv@divisor:	
   345                           ; 1 bytes @ 0x2
   346                           
   347  0072                     ___lbmod@divisor:	
   348                           ; 1 bytes @ 0x2
   349                           
   350  0072                     ___lwmod@divisor:	
   351                           ; 1 bytes @ 0x2
   352                           
   353                           
   354                           ; 2 bytes @ 0x2
   355  0072                     	ds	1
   356  0073                     ??_ADC_Sample:	
   357  0073                     ??_keyRead2:	
   358                           ; 1 bytes @ 0x3
   359                           
   360  0073                     ??___lbdiv:	
   361                           ; 1 bytes @ 0x3
   362                           
   363  0073                     ??___lbmod:	
   364                           ; 1 bytes @ 0x3
   365                           
   366  0073                     keyRead2@KeyStatus:	
   367                           ; 1 bytes @ 0x3
   368                           
   369  0073                     ind_light_disp@Count0:	
   370                           ; 1 bytes @ 0x3
   371                           
   372  0073                     ___lbdiv@dividend:	
   373                           ; 1 bytes @ 0x3
   374                           
   375                           
   376                           ; 1 bytes @ 0x3
   377  0073                     	ds	1
   378  0074                     ??_refresh:	
   379  0074                     ??_keyCtr:	
   380                           ; 1 bytes @ 0x4
   381                           
   382  0074                     keyCtr@kclick:	
   383                           ; 1 bytes @ 0x4
   384                           
   385  0074                     ___lbdiv@counter:	
   386                           ; 1 bytes @ 0x4
   387                           
   388  0074                     ___lbmod@dividend:	
   389                           ; 1 bytes @ 0x4
   390                           
   391  0074                     ___lwmod@dividend:	
   392                           ; 1 bytes @ 0x4
   393                           
   394                           
   395                           ; 2 bytes @ 0x4
   396  0074                     	ds	1
   397  0075                     ___lbdiv@quotient:	
   398  0075                     ___lbmod@counter:	
   399                           ; 1 bytes @ 0x5
   400                           
   401                           
   402                           ; 1 bytes @ 0x5
   403  0075                     	ds	1
   404  0076                     ??___lwmod:	
   405  0076                     ___lbmod@rem:	
   406                           ; 1 bytes @ 0x6
   407                           
   408  0076                     ___lwmod@counter:	
   409                           ; 1 bytes @ 0x6
   410                           
   411                           
   412                           ; 1 bytes @ 0x6
   413  0076                     	ds	1
   414  0077                     ??_checkBatAD:	
   415  0077                     ??_workCtr:	
   416                           ; 1 bytes @ 0x7
   417                           
   418  0077                     ??_main:	
   419                           ; 1 bytes @ 0x7
   420                           
   421                           
   422                           	psect	cstackBANK0
   423  004A                     __pcstackBANK0:	
   424                           ; 1 bytes @ 0x7
   425                           
   426  004A                     ADC_Sample@adch:	
   427                           
   428                           ; 1 bytes @ 0x0
   429  004A                     	ds	1
   430  004B                     ADC_Sample@i:	
   431                           
   432                           ; 1 bytes @ 0x1
   433  004B                     	ds	1
   434  004C                     ADC_Sample@ad_temp:	
   435                           
   436                           ; 2 bytes @ 0x2
   437  004C                     	ds	2
   438                           
   439                           	psect	maintext
   440  0173                     __pmaintext:	
   441 ;;
   442 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   443 ;;
   444 ;; *************** function _main *****************
   445 ;; Defined at:
   446 ;;		line 112 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
   447 ;; Parameters:    Size  Location     Type
   448 ;;		None
   449 ;; Auto vars:     Size  Location     Type
   450 ;;		None
   451 ;; Return value:  Size  Location     Type
   452 ;;                  1    wreg      void 
   453 ;; Registers used:
   454 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   455 ;; Tracked objects:
   456 ;;		On entry : B00/0
   457 ;;		On exit  : 100/0
   458 ;;		Unchanged: 0/0
   459 ;; Data sizes:     COMMON   BANK0   BANK1
   460 ;;      Params:         0       0       0
   461 ;;      Locals:         0       0       0
   462 ;;      Temps:          0       0       0
   463 ;;      Totals:         0       0       0
   464 ;;Total ram usage:        0 bytes
   465 ;; Hardware stack levels required when called:    4
   466 ;; This function calls:
   467 ;;		_IO_Init
   468 ;;		___lbdiv
   469 ;;		___lbmod
   470 ;;		_checkBatAD
   471 ;;		_chrgCtr
   472 ;;		_gotoSleep
   473 ;;		_keyCtr
   474 ;;		_pwmStop
   475 ;;		_refresh
   476 ;;		_workCtr
   477 ;; This function is called by:
   478 ;;		Startup code after reset
   479 ;; This function uses a non-reentrant model
   480 ;;
   481                           
   482                           
   483                           ;psect for function _main
   484  0173                     _main:	
   485                           
   486                           ;incstack = 0
   487                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   488  0173  0000               	nop	;# 
   489  0174  0064               	clrwdt	;# 
   490                           
   491                           ;SC8P171XE_Timer2.c: 116: OSCCON = 0X70;
   492  0175  3070               	movlw	112
   493  0176  1683               	bsf	3,5	;RP0=1, select bank1
   494  0177  008F               	movwf	15	;volatile
   495                           
   496                           ;SC8P171XE_Timer2.c: 117: WDTCON = 0x01;
   497  0178  3001               	movlw	1
   498  0179  0088               	movwf	8	;volatile
   499                           
   500                           ;SC8P171XE_Timer2.c: 118: TRISA = 0;
   501  017A  0185               	clrf	5	;volatile
   502                           
   503                           ;SC8P171XE_Timer2.c: 119: TRISB = 0;
   504  017B  0186               	clrf	6	;volatile
   505                           
   506                           ;SC8P171XE_Timer2.c: 120: IO_Init();
   507  017C  2359               	fcall	_IO_Init
   508                           
   509                           ;SC8P171XE_Timer2.c: 122: OPTION_REG = 0B00000000;
   510  017D  0181               	clrf	1	;volatile
   511                           
   512                           ;SC8P171XE_Timer2.c: 124: TMR0 = 155;
   513  017E  309B               	movlw	155
   514  017F  1283               	bcf	3,5	;RP0=0, select bank0
   515  0180  0081               	movwf	1	;volatile
   516                           
   517                           ;SC8P171XE_Timer2.c: 125: T0IF = 0;
   518  0181  110B               	bcf	11,2	;volatile
   519                           
   520                           ;SC8P171XE_Timer2.c: 126: T0IE = 1;
   521  0182  168B               	bsf	11,5	;volatile
   522                           
   523                           ;SC8P171XE_Timer2.c: 128: GIE = 1;
   524  0183  178B               	bsf	11,7	;volatile
   525  0184                     l593:	
   526                           ;SC8P171XE_Timer2.c: 130: while(1)
   527                           
   528  0184  0064               	clrwdt	;# 
   529                           
   530                           ;SC8P171XE_Timer2.c: 133: if(chrgStep)
   531  0185  1283               	bcf	3,5	;RP0=0, select bank0
   532  0186  0834               	movf	_chrgStep,w
   533  0187  1903               	btfsc	3,2
   534  0188  299F               	goto	l2226
   535                           
   536                           ;SC8P171XE_Timer2.c: 134: {
   537                           ;SC8P171XE_Timer2.c: 135: if(adCheckTime > 20)
   538  0189  3015               	movlw	21
   539  018A  0230               	subwf	_adCheckTime,w
   540  018B  1C03               	skipc
   541  018C  299D               	goto	l2224
   542                           
   543                           ;SC8P171XE_Timer2.c: 136: {
   544                           ;SC8P171XE_Timer2.c: 137: if(batValue < 100)
   545  018D  3064               	movlw	100
   546  018E  0233               	subwf	_batValue,w
   547                           
   548                           ;SC8P171XE_Timer2.c: 138: {
   549                           ;SC8P171XE_Timer2.c: 139: shiwei = batValue/10;
   550  018F  300A               	movlw	10
   551  0190  1803               	skipnc
   552  0191  299B               	goto	L2
   553  0192  00F2               	movwf	___lbdiv@divisor
   554  0193  0833               	movf	_batValue,w
   555  0194  2317               	fcall	___lbdiv
   556  0195  00B2               	movwf	_shiwei
   557                           
   558                           ;SC8P171XE_Timer2.c: 140: gewei = batValue%10;
   559  0196  300A               	movlw	10
   560  0197  00F2               	movwf	___lbmod@divisor
   561  0198  0833               	movf	_batValue,w
   562  0199  22E0               	fcall	___lbmod
   563  019A  29A3               	goto	L1
   564  019B                     L2:	
   565                           ;SC8P171XE_Timer2.c: 142: else
   566                           ;SC8P171XE_Timer2.c: 143: {
   567                           ;SC8P171XE_Timer2.c: 144: shiwei = gewei = 10;
   568                           
   569                           ;SC8P171XE_Timer2.c: 141: }
   570                           
   571  019B  00B1               	movwf	_gewei
   572  019C  00B2               	movwf	_shiwei
   573  019D                     l2224:	
   574                           
   575                           ;SC8P171XE_Timer2.c: 145: }
   576                           ;SC8P171XE_Timer2.c: 146: }
   577                           ;SC8P171XE_Timer2.c: 147: refresh();
   578  019D  2285               	fcall	_refresh
   579                           
   580                           ;SC8P171XE_Timer2.c: 148: }
   581  019E  29B0               	goto	l598
   582  019F                     l2226:	
   583                           
   584                           ;SC8P171XE_Timer2.c: 149: else if(workStep)
   585  019F  0879               	movf	_workStep,w
   586  01A0  1903               	btfsc	3,2
   587  01A1  29A5               	goto	l2234
   588                           
   589                           ;SC8P171XE_Timer2.c: 150: {
   590                           ;SC8P171XE_Timer2.c: 151: shiwei = 0;
   591  01A2  01B2               	clrf	_shiwei
   592  01A3                     L1:	
   593                           ;SC8P171XE_Timer2.c: 152: gewei = workStep;
   594                           
   595  01A3  00B1               	movwf	_gewei
   596  01A4  299D               	goto	l2224
   597  01A5                     l2234:	
   598                           
   599                           ;SC8P171XE_Timer2.c: 155: else
   600                           ;SC8P171XE_Timer2.c: 156: {
   601                           ;SC8P171XE_Timer2.c: 157: if(firstTime == 0)
   602  01A5  082F               	movf	_firstTime,w
   603  01A6  1D03               	btfss	3,2
   604  01A7  29AC               	goto	l2242
   605                           
   606                           ;SC8P171XE_Timer2.c: 158: {
   607                           ;SC8P171XE_Timer2.c: 159: PORTA |= 0x11;
   608  01A8  3011               	movlw	17
   609  01A9  0485               	iorwf	5,f	;volatile
   610                           
   611                           ;SC8P171XE_Timer2.c: 160: shiwei = gewei = 8;
   612  01AA  3008               	movlw	8
   613  01AB  299B               	goto	L2
   614  01AC                     l2242:	
   615                           
   616                           ;SC8P171XE_Timer2.c: 163: else
   617                           ;SC8P171XE_Timer2.c: 164: {
   618                           ;SC8P171XE_Timer2.c: 165: PORTA &= 0xEE;
   619  01AC  30EE               	movlw	238
   620  01AD  0585               	andwf	5,f	;volatile
   621                           
   622                           ;SC8P171XE_Timer2.c: 166: RA5 = 1;
   623  01AE  1685               	bsf	5,5	;volatile
   624                           
   625                           ;SC8P171XE_Timer2.c: 167: RB3 = 1;
   626  01AF  1586               	bsf	6,3	;volatile
   627  01B0                     l598:	
   628                           
   629                           ;SC8P171XE_Timer2.c: 168: }
   630                           ;SC8P171XE_Timer2.c: 169: }
   631                           ;SC8P171XE_Timer2.c: 170: if(!IntFlag)
   632  01B0  083A               	movf	_IntFlag,w
   633  01B1  1903               	btfsc	3,2
   634  01B2  2984               	goto	l593
   635  01B3  3028               	movlw	40
   636                           
   637                           ;SC8P171XE_Timer2.c: 172: IntFlag = 0;
   638  01B4  01BA               	clrf	_IntFlag
   639                           
   640                           ;SC8P171XE_Timer2.c: 173: if(++adCheckTime >= 40)
   641  01B5  0AB0               	incf	_adCheckTime,f
   642  01B6  0230               	subwf	_adCheckTime,w
   643  01B7  1803               	btfsc	3,0
   644                           
   645                           ;SC8P171XE_Timer2.c: 174: adCheckTime = 0;
   646  01B8  01B0               	clrf	_adCheckTime
   647                           
   648                           ;SC8P171XE_Timer2.c: 175: if(adCheckTime < 20)
   649  01B9  3014               	movlw	20
   650  01BA  0230               	subwf	_adCheckTime,w
   651  01BB  1803               	skipnc
   652  01BC  29BE               	goto	l606
   653                           
   654                           ;SC8P171XE_Timer2.c: 176: checkBatAD();
   655  01BD  2217               	fcall	_checkBatAD
   656  01BE                     l606:	
   657                           
   658                           ;SC8P171XE_Timer2.c: 177: chrgCtr();
   659  01BE  2346               	fcall	_chrgCtr
   660                           
   661                           ;SC8P171XE_Timer2.c: 178: keyCtr();
   662  01BF  21D9               	fcall	_keyCtr
   663                           
   664                           ;SC8P171XE_Timer2.c: 179: if(workStep)
   665  01C0  0879               	movf	_workStep,w
   666  01C1  1903               	btfsc	3,2
   667  01C2  29C5               	goto	l2266
   668                           
   669                           ;SC8P171XE_Timer2.c: 180: workCtr();
   670  01C3  210C               	fcall	_workCtr
   671  01C4  2984               	goto	l593
   672  01C5                     l2266:	
   673                           
   674                           ;SC8P171XE_Timer2.c: 181: else
   675                           ;SC8P171XE_Timer2.c: 182: {
   676                           ;SC8P171XE_Timer2.c: 183: if(keyCount == 0)
   677  01C5  0838               	movf	_keyCount,w
   678  01C6  1D03               	btfss	3,2
   679  01C7  29C9               	goto	l2270
   680                           
   681                           ;SC8P171XE_Timer2.c: 184: pwmStop();
   682  01C8  238C               	fcall	_pwmStop
   683  01C9                     l2270:	
   684                           
   685                           ;SC8P171XE_Timer2.c: 186: if(chrgStep == 0 && keyCount == 0)
   686  01C9  1283               	bcf	3,5	;RP0=0, select bank0
   687  01CA  0834               	movf	_chrgStep,w
   688  01CB  1D03               	btfss	3,2
   689  01CC  29D7               	goto	l2282
   690  01CD  0838               	movf	_keyCount,w
   691  01CE  1D03               	btfss	3,2
   692  01CF  29D7               	goto	l2282
   693                           
   694                           ;SC8P171XE_Timer2.c: 187: {
   695                           ;SC8P171XE_Timer2.c: 188: if(++sleepTime >= 100)
   696  01D0  3064               	movlw	100
   697  01D1  0AB9               	incf	_sleepTime,f
   698  01D2  0239               	subwf	_sleepTime,w
   699  01D3  1C03               	skipc
   700  01D4  2984               	goto	l593
   701                           
   702                           ;SC8P171XE_Timer2.c: 189: gotoSleep();
   703  01D5  2369               	fcall	_gotoSleep
   704  01D6  2984               	goto	l593
   705  01D7                     l2282:	
   706                           
   707                           ;SC8P171XE_Timer2.c: 193: {
   708                           ;SC8P171XE_Timer2.c: 194: sleepTime = 0;
   709  01D7  01B9               	clrf	_sleepTime
   710                           
   711                           ;SC8P171XE_Timer2.c: 195: }
   712  01D8  2984               	goto	l593
   713  01D9                     __end_of_main:	
   714                           
   715                           	psect	text1
   716  010C                     __ptext1:	
   717 ;; *************** function _workCtr *****************
   718 ;; Defined at:
   719 ;;		line 205 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
   720 ;; Parameters:    Size  Location     Type
   721 ;;		None
   722 ;; Auto vars:     Size  Location     Type
   723 ;;		None
   724 ;; Return value:  Size  Location     Type
   725 ;;                  1    wreg      void 
   726 ;; Registers used:
   727 ;;		wreg, status,2, status,0, pclath, cstack
   728 ;; Tracked objects:
   729 ;;		On entry : 100/0
   730 ;;		On exit  : 100/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMMON   BANK0   BANK1
   733 ;;      Params:         0       0       0
   734 ;;      Locals:         0       0       0
   735 ;;      Temps:          0       0       0
   736 ;;      Totals:         0       0       0
   737 ;;Total ram usage:        0 bytes
   738 ;; Hardware stack levels used:    1
   739 ;; Hardware stack levels required when called:    3
   740 ;; This function calls:
   741 ;;		___lwmod
   742 ;;		_gotoSleep
   743 ;;		_pwmInit
   744 ;; This function is called by:
   745 ;;		_main
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749                           
   750                           ;psect for function _workCtr
   751  010C                     _workCtr:	
   752                           
   753                           ;SC8P171XE_Timer2.c: 207: pwmInit();
   754                           
   755                           ;incstack = 0
   756                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   757  010C  2332               	fcall	_pwmInit
   758                           
   759                           ;SC8P171XE_Timer2.c: 209: if(workStep < 9)
   760  010D  3009               	movlw	9
   761  010E  0279               	subwf	_workStep,w
   762  010F  1803               	skipnc
   763  0110  2929               	goto	l1972
   764                           
   765                           ;SC8P171XE_Timer2.c: 210: {
   766                           ;SC8P171XE_Timer2.c: 211: maxDuty = 70 + workStep*3;
   767  0111  0879               	movf	_workStep,w
   768  0112  0779               	addwf	_workStep,w
   769  0113  0779               	addwf	_workStep,w
   770  0114  3E46               	addlw	70
   771  0115  1283               	bcf	3,5	;RP0=0, select bank0
   772  0116  00AE               	movwf	_maxDuty
   773                           
   774                           ;SC8P171XE_Timer2.c: 212: if(workStep == 1)
   775  0117  0B79               	decfsz	_workStep,w
   776  0118  291B               	goto	l1964
   777                           
   778                           ;SC8P171XE_Timer2.c: 213: maxDuty = 70;
   779  0119  3046               	movlw	70
   780  011A  2920               	goto	L3
   781  011B                     l1964:	
   782                           
   783                           ;SC8P171XE_Timer2.c: 214: else if(workStep == 8)
   784  011B  3008               	movlw	8
   785  011C  0679               	xorwf	_workStep,w
   786  011D  1D03               	btfss	3,2
   787  011E  2921               	goto	l621
   788                           
   789                           ;SC8P171XE_Timer2.c: 215: maxDuty = 94;
   790  011F  305E               	movlw	94
   791  0120                     L3:	
   792  0120  00AE               	movwf	_maxDuty
   793  0121                     l621:	
   794                           
   795                           ;SC8P171XE_Timer2.c: 216: if(duty < maxDuty)
   796  0121  082E               	movf	_maxDuty,w
   797  0122  0237               	subwf	_duty,w
   798  0123  1803               	skipnc
   799  0124  2927               	goto	l1970
   800                           
   801                           ;SC8P171XE_Timer2.c: 217: duty++;
   802  0125  0AB7               	incf	_duty,f
   803  0126  2959               	goto	l625
   804  0127                     l1970:	
   805                           
   806                           ;SC8P171XE_Timer2.c: 218: else
   807                           ;SC8P171XE_Timer2.c: 219: duty = maxDuty;
   808  0127  082E               	movf	_maxDuty,w
   809  0128  2958               	goto	L4
   810  0129                     l1972:	
   811                           
   812                           ;SC8P171XE_Timer2.c: 221: else
   813                           ;SC8P171XE_Timer2.c: 222: {
   814                           ;SC8P171XE_Timer2.c: 224: if(++count3S >= 300)
   815  0129  1283               	bcf	3,5	;RP0=0, select bank0
   816  012A  0AA8               	incf	_count3S,f
   817  012B  1903               	skipnz
   818  012C  0AA9               	incf	_count3S+1,f
   819  012D  3001               	movlw	1
   820  012E  0229               	subwf	_count3S+1,w
   821  012F  302C               	movlw	44
   822  0130  1903               	skipnz
   823  0131  0228               	subwf	_count3S,w
   824  0132  1C03               	skipc
   825  0133  2938               	goto	l1978
   826  0134  3046               	movlw	70
   827                           
   828                           ;SC8P171XE_Timer2.c: 225: {
   829                           ;SC8P171XE_Timer2.c: 226: count3S = 0;
   830  0135  01A8               	clrf	_count3S
   831  0136  01A9               	clrf	_count3S+1
   832                           
   833                           ;SC8P171XE_Timer2.c: 227: duty = 70;
   834  0137  00B7               	movwf	_duty
   835  0138                     l1978:	
   836                           
   837                           ;SC8P171XE_Timer2.c: 228: }
   838                           ;SC8P171XE_Timer2.c: 229: if(count3S % 9 == 0)
   839  0138  3009               	movlw	9
   840  0139  00F2               	movwf	___lwmod@divisor
   841  013A  01F3               	clrf	___lwmod@divisor+1
   842  013B  0829               	movf	_count3S+1,w
   843  013C  00F5               	movwf	___lwmod@dividend+1
   844  013D  0828               	movf	_count3S,w
   845  013E  00F4               	movwf	___lwmod@dividend
   846  013F  223D               	fcall	___lwmod
   847  0140  0872               	movf	?___lwmod,w
   848  0141  0473               	iorwf	?___lwmod+1,w
   849  0142  1D03               	btfss	3,2
   850  0143  2959               	goto	l625
   851                           
   852                           ;SC8P171XE_Timer2.c: 230: {
   853                           ;SC8P171XE_Timer2.c: 231: if(count3S < 150)
   854  0144  3000               	movlw	0
   855  0145  0229               	subwf	_count3S+1,w
   856  0146  3096               	movlw	150
   857  0147  1903               	skipnz
   858  0148  0228               	subwf	_count3S,w
   859  0149  1803               	skipnc
   860  014A  2952               	goto	l1986
   861                           
   862                           ;SC8P171XE_Timer2.c: 232: {
   863                           ;SC8P171XE_Timer2.c: 233: if(++duty > 94)
   864  014B  305F               	movlw	95
   865  014C  0AB7               	incf	_duty,f
   866  014D  0237               	subwf	_duty,w
   867  014E  1C03               	skipc
   868  014F  2959               	goto	l625
   869                           
   870                           ;SC8P171XE_Timer2.c: 234: duty = 94;
   871  0150  305E               	movlw	94
   872  0151  2958               	goto	L4
   873  0152                     l1986:	
   874                           
   875                           ;SC8P171XE_Timer2.c: 236: else
   876                           ;SC8P171XE_Timer2.c: 237: {
   877                           ;SC8P171XE_Timer2.c: 238: if(--duty < 70)
   878  0152  3046               	movlw	70
   879  0153  03B7               	decf	_duty,f
   880  0154  0237               	subwf	_duty,w
   881  0155  1803               	skipnc
   882  0156  2959               	goto	l625
   883                           
   884                           ;SC8P171XE_Timer2.c: 239: duty = 70;
   885  0157  3046               	movlw	70
   886  0158                     L4:	
   887  0158  00B7               	movwf	_duty
   888  0159                     l625:	
   889                           
   890                           ;SC8P171XE_Timer2.c: 240: }
   891                           ;SC8P171XE_Timer2.c: 241: }
   892                           ;SC8P171XE_Timer2.c: 242: }
   893                           ;SC8P171XE_Timer2.c: 247: PWMD1L = duty;
   894  0159  0837               	movf	_duty,w
   895  015A  0097               	movwf	23	;volatile
   896                           
   897                           ;SC8P171XE_Timer2.c: 248: if(adresult > 2260)
   898  015B  3008               	movlw	8
   899  015C  0278               	subwf	_adresult+1,w	;volatile
   900  015D  30D5               	movlw	213
   901  015E  1903               	skipnz
   902  015F  0277               	subwf	_adresult,w	;volatile
   903  0160  1C03               	skipc
   904  0161  2967               	goto	l632
   905                           
   906                           ;SC8P171XE_Timer2.c: 249: {
   907                           ;SC8P171XE_Timer2.c: 250: RA0 = 1;
   908  0162  1405               	bsf	5,0	;volatile
   909                           
   910                           ;SC8P171XE_Timer2.c: 251: PORTA;
   911  0163  0805               	movf	5,w	;volatile
   912                           
   913                           ;SC8P171XE_Timer2.c: 252: PORTB;
   914  0164  0806               	movf	6,w	;volatile
   915                           
   916                           ;SC8P171XE_Timer2.c: 253: RA4 = 0;
   917  0165  1205               	bcf	5,4	;volatile
   918                           
   919                           ;SC8P171XE_Timer2.c: 254: }
   920  0166  296B               	goto	l633
   921  0167                     l632:	
   922                           
   923                           ;SC8P171XE_Timer2.c: 255: else
   924                           ;SC8P171XE_Timer2.c: 256: {
   925                           ;SC8P171XE_Timer2.c: 257: RA0 = 0;
   926  0167  1005               	bcf	5,0	;volatile
   927                           
   928                           ;SC8P171XE_Timer2.c: 258: PORTA;
   929  0168  0805               	movf	5,w	;volatile
   930                           
   931                           ;SC8P171XE_Timer2.c: 259: PORTB;
   932  0169  0806               	movf	6,w	;volatile
   933                           
   934                           ;SC8P171XE_Timer2.c: 260: RA4 = 1;
   935  016A  1605               	bsf	5,4	;volatile
   936  016B                     l633:	
   937                           
   938                           ;SC8P171XE_Timer2.c: 261: }
   939                           ;SC8P171XE_Timer2.c: 263: if(count900s > 900)
   940  016B  3003               	movlw	3
   941  016C  022B               	subwf	_count900s+1,w
   942  016D  3085               	movlw	133
   943  016E  1903               	skipnz
   944  016F  022A               	subwf	_count900s,w
   945  0170  1C03               	skipc
   946  0171  0008               	return
   947                           
   948                           ;SC8P171XE_Timer2.c: 264: {
   949                           ;SC8P171XE_Timer2.c: 265: gotoSleep();
   950  0172  2B69               	ljmp	l1642
   951  0173                     __end_of_workCtr:	
   952                           
   953                           	psect	text2
   954  0332                     __ptext2:	
   955 ;; *************** function _pwmInit *****************
   956 ;; Defined at:
   957 ;;		line 272 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;		None
   960 ;; Auto vars:     Size  Location     Type
   961 ;;		None
   962 ;; Return value:  Size  Location     Type
   963 ;;                  1    wreg      void 
   964 ;; Registers used:
   965 ;;		wreg, status,2, status,0
   966 ;; Tracked objects:
   967 ;;		On entry : 100/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMMON   BANK0   BANK1
   971 ;;      Params:         0       0       0
   972 ;;      Locals:         0       0       0
   973 ;;      Temps:          0       0       0
   974 ;;      Totals:         0       0       0
   975 ;;Total ram usage:        0 bytes
   976 ;; Hardware stack levels used:    1
   977 ;; Hardware stack levels required when called:    1
   978 ;; This function calls:
   979 ;;		Nothing
   980 ;; This function is called by:
   981 ;;		_workCtr
   982 ;; This function uses a non-reentrant model
   983 ;;
   984                           
   985                           
   986                           ;psect for function _pwmInit
   987  0332                     _pwmInit:	
   988                           
   989                           ;SC8P171XE_Timer2.c: 274: if(pwmFlag == 0)
   990                           
   991                           ;incstack = 0
   992                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
   993  0332  082D               	movf	_pwmFlag,w
   994  0333  1D03               	btfss	3,2
   995  0334  0008               	return
   996                           
   997                           ;SC8P171XE_Timer2.c: 275: {
   998                           ;SC8P171XE_Timer2.c: 276: pwmFlag = 1;
   999  0335  01AD               	clrf	_pwmFlag
  1000  0336  0AAD               	incf	_pwmFlag,f
  1001                           
  1002                           ;SC8P171XE_Timer2.c: 277: TRISB |= 0x10;
  1003  0337  1683               	bsf	3,5	;RP0=1, select bank1
  1004  0338  1606               	bsf	6,4	;volatile
  1005                           
  1006                           ;SC8P171XE_Timer2.c: 278: PWMCON = 0x60;
  1007  0339  3060               	movlw	96
  1008  033A  1283               	bcf	3,5	;RP0=0, select bank0
  1009  033B  009B               	movwf	27	;volatile
  1010                           
  1011                           ;SC8P171XE_Timer2.c: 279: PWMTH = 0x00;
  1012  033C  019A               	clrf	26	;volatile
  1013                           
  1014                           ;SC8P171XE_Timer2.c: 280: PWMTL = 100;
  1015  033D  3064               	movlw	100
  1016  033E  0099               	movwf	25	;volatile
  1017                           
  1018                           ;SC8P171XE_Timer2.c: 281: PWMD01H = 0X00;
  1019  033F  0198               	clrf	24	;volatile
  1020                           
  1021                           ;SC8P171XE_Timer2.c: 282: PWMD1L = duty;
  1022  0340  0837               	movf	_duty,w
  1023  0341  0097               	movwf	23	;volatile
  1024                           
  1025                           ;SC8P171XE_Timer2.c: 283: PWMCON |= 0x02;
  1026  0342  149B               	bsf	27,1	;volatile
  1027                           
  1028                           ;SC8P171XE_Timer2.c: 284: TRISB &= 0xEF;
  1029  0343  1683               	bsf	3,5	;RP0=1, select bank1
  1030  0344  1206               	bcf	6,4	;volatile
  1031  0345  0008               	return
  1032  0346                     __end_of_pwmInit:	
  1033                           
  1034                           	psect	text3
  1035  0369                     __ptext3:	
  1036 ;; *************** function _gotoSleep *****************
  1037 ;; Defined at:
  1038 ;;		line 475 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;		None
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;		None
  1043 ;; Return value:  Size  Location     Type
  1044 ;;                  1    wreg      void 
  1045 ;; Registers used:
  1046 ;;		status,2, status,0, pclath, cstack
  1047 ;; Tracked objects:
  1048 ;;		On entry : 100/0
  1049 ;;		On exit  : 100/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMMON   BANK0   BANK1
  1052 ;;      Params:         0       0       0
  1053 ;;      Locals:         0       0       0
  1054 ;;      Temps:          0       0       0
  1055 ;;      Totals:         0       0       0
  1056 ;;Total ram usage:        0 bytes
  1057 ;; Hardware stack levels used:    1
  1058 ;; Hardware stack levels required when called:    2
  1059 ;; This function calls:
  1060 ;;		_pwmStop
  1061 ;; This function is called by:
  1062 ;;		_main
  1063 ;;		_workCtr
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           
  1068                           ;psect for function _gotoSleep
  1069  0369                     _gotoSleep:	
  1070  0369                     l1642:	
  1071                           ;incstack = 0
  1072                           ; Regs used in _gotoSleep: [status,2+status,0+pclath+cstack]
  1073                           
  1074                           
  1075                           ;SC8P171XE_Timer2.c: 479: ledFlag = 0;
  1076  0369  01AA               	clrf	_count900s
  1077  036A  01AB               	clrf	_count900s+1
  1078                           
  1079                           ;SC8P171XE_Timer2.c: 480: sleepTime = 0;
  1080  036B  01B9               	clrf	_sleepTime
  1081                           
  1082                           ;SC8P171XE_Timer2.c: 481: firstTime = 1;
  1083  036C  01AF               	clrf	_firstTime
  1084  036D  0AAF               	incf	_firstTime,f
  1085                           
  1086                           ;SC8P171XE_Timer2.c: 483: pwmStop();
  1087  036E  238C               	fcall	_pwmStop
  1088                           
  1089                           ;SC8P171XE_Timer2.c: 484: PORTA = 0x00;
  1090  036F  1283               	bcf	3,5	;RP0=0, select bank0
  1091  0370  0185               	clrf	5	;volatile
  1092                           
  1093                           ;SC8P171XE_Timer2.c: 485: PORTB = 0x00;
  1094  0371  0186               	clrf	6	;volatile
  1095                           
  1096                           ;SC8P171XE_Timer2.c: 486: workStep = 0;
  1097  0372  01F9               	clrf	_workStep
  1098                           
  1099                           ;SC8P171XE_Timer2.c: 487: RA5 = 1;
  1100  0373  1685               	bsf	5,5	;volatile
  1101                           
  1102                           ;SC8P171XE_Timer2.c: 488: RB3 = 1;
  1103  0374  1586               	bsf	6,3	;volatile
  1104  0375  0008               	return
  1105  0376                     __end_of_gotoSleep:	
  1106                           
  1107                           	psect	text4
  1108  038C                     __ptext4:	
  1109 ;; *************** function _pwmStop *****************
  1110 ;; Defined at:
  1111 ;;		line 289 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;		None
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;		None
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  1    wreg      void 
  1118 ;; Registers used:
  1119 ;;		status,2
  1120 ;; Tracked objects:
  1121 ;;		On entry : 100/0
  1122 ;;		On exit  : 100/100
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMMON   BANK0   BANK1
  1125 ;;      Params:         0       0       0
  1126 ;;      Locals:         0       0       0
  1127 ;;      Temps:          0       0       0
  1128 ;;      Totals:         0       0       0
  1129 ;;Total ram usage:        0 bytes
  1130 ;; Hardware stack levels used:    1
  1131 ;; Hardware stack levels required when called:    1
  1132 ;; This function calls:
  1133 ;;		Nothing
  1134 ;; This function is called by:
  1135 ;;		_main
  1136 ;;		_gotoSleep
  1137 ;; This function uses a non-reentrant model
  1138 ;;
  1139                           
  1140                           
  1141                           ;psect for function _pwmStop
  1142  038C                     _pwmStop:	
  1143                           
  1144                           ;SC8P171XE_Timer2.c: 291: pwmFlag = 0;
  1145                           
  1146                           ;incstack = 0
  1147                           ; Regs used in _pwmStop: [status,2]
  1148  038C  01AD               	clrf	_pwmFlag
  1149                           
  1150                           ;SC8P171XE_Timer2.c: 292: PWMCON &= 0xFD;
  1151  038D  109B               	bcf	27,1	;volatile
  1152                           
  1153                           ;SC8P171XE_Timer2.c: 293: TRISB |= 0x10;
  1154  038E  1683               	bsf	3,5	;RP0=1, select bank1
  1155  038F  1606               	bsf	6,4	;volatile
  1156  0390  0008               	return
  1157  0391                     __end_of_pwmStop:	
  1158                           
  1159                           	psect	text5
  1160  023D                     __ptext5:	
  1161 ;; *************** function ___lwmod *****************
  1162 ;; Defined at:
  1163 ;;		line 6 in file "C:\mcuproject\scm\SC8P171XE¿ª·¢°ü\SCMCU_IDE_V2.00.09_Beta4\data\sources\common\lwmod.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;  divisor         2    2[COMMON] unsigned int 
  1166 ;;  dividend        2    4[COMMON] unsigned int 
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  counter         1    6[COMMON] unsigned char 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  2    2[COMMON] unsigned int 
  1171 ;; Registers used:
  1172 ;;		wreg, status,2, status,0
  1173 ;; Tracked objects:
  1174 ;;		On entry : 100/0
  1175 ;;		On exit  : 100/0
  1176 ;;		Unchanged: 100/0
  1177 ;; Data sizes:     COMMON   BANK0   BANK1
  1178 ;;      Params:         4       0       0
  1179 ;;      Locals:         1       0       0
  1180 ;;      Temps:          0       0       0
  1181 ;;      Totals:         5       0       0
  1182 ;;Total ram usage:        5 bytes
  1183 ;; Hardware stack levels used:    1
  1184 ;; Hardware stack levels required when called:    1
  1185 ;; This function calls:
  1186 ;;		Nothing
  1187 ;; This function is called by:
  1188 ;;		_workCtr
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192                           
  1193                           ;psect for function ___lwmod
  1194  023D                     ___lwmod:	
  1195                           
  1196                           ;incstack = 0
  1197                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1198  023D  0872               	movf	___lwmod@divisor,w
  1199  023E  0473               	iorwf	___lwmod@divisor+1,w
  1200  023F  1903               	btfsc	3,2
  1201  0240  2A5C               	goto	l1852
  1202  0241  01F6               	clrf	___lwmod@counter
  1203  0242                     L5:	
  1204  0242  0AF6               	incf	___lwmod@counter,f
  1205  0243  1BF3               	btfsc	___lwmod@divisor+1,7
  1206  0244  2A49               	goto	l1844
  1207  0245  1003               	clrc
  1208  0246  0DF2               	rlf	___lwmod@divisor,f
  1209  0247  0DF3               	rlf	___lwmod@divisor+1,f
  1210  0248  2A42               	goto	L5
  1211  0249                     l1844:	
  1212  0249  0873               	movf	___lwmod@divisor+1,w
  1213  024A  0275               	subwf	___lwmod@dividend+1,w
  1214  024B  1D03               	skipz
  1215  024C  2A4F               	goto	u1125
  1216  024D  0872               	movf	___lwmod@divisor,w
  1217  024E  0274               	subwf	___lwmod@dividend,w
  1218  024F                     u1125:	
  1219  024F  1C03               	skipc
  1220  0250  2A58               	goto	L6
  1221  0251  0872               	movf	___lwmod@divisor,w
  1222  0252  02F4               	subwf	___lwmod@dividend,f
  1223  0253  0873               	movf	___lwmod@divisor+1,w
  1224  0254  1C03               	skipc
  1225  0255  03F5               	decf	___lwmod@dividend+1,f
  1226  0256  02F5               	subwf	___lwmod@dividend+1,f
  1227  0257  1003               	clrc
  1228  0258                     L6:	
  1229  0258  0CF3               	rrf	___lwmod@divisor+1,f
  1230  0259  0CF2               	rrf	___lwmod@divisor,f
  1231  025A  0BF6               	decfsz	___lwmod@counter,f
  1232  025B  2A49               	goto	l1844
  1233  025C                     l1852:	
  1234  025C  0875               	movf	___lwmod@dividend+1,w
  1235  025D  00F3               	movwf	?___lwmod+1
  1236  025E  0874               	movf	___lwmod@dividend,w
  1237  025F  00F2               	movwf	?___lwmod
  1238  0260  0008               	return
  1239  0261                     __end_of___lwmod:	
  1240                           
  1241                           	psect	text6
  1242  0285                     __ptext6:	
  1243 ;; *************** function _refresh *****************
  1244 ;; Defined at:
  1245 ;;		line 583 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;		None
  1248 ;; Auto vars:     Size  Location     Type
  1249 ;;		None
  1250 ;; Return value:  Size  Location     Type
  1251 ;;                  1    wreg      void 
  1252 ;; Registers used:
  1253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1254 ;; Tracked objects:
  1255 ;;		On entry : 100/0
  1256 ;;		On exit  : 100/0
  1257 ;;		Unchanged: 0/0
  1258 ;; Data sizes:     COMMON   BANK0   BANK1
  1259 ;;      Params:         0       0       0
  1260 ;;      Locals:         0       0       0
  1261 ;;      Temps:          0       0       0
  1262 ;;      Totals:         0       0       0
  1263 ;;Total ram usage:        0 bytes
  1264 ;; Hardware stack levels used:    1
  1265 ;; Hardware stack levels required when called:    3
  1266 ;; This function calls:
  1267 ;;		_delay_us
  1268 ;;		_ind_light_disp
  1269 ;; This function is called by:
  1270 ;;		_main
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           
  1275                           ;psect for function _refresh
  1276  0285                     _refresh:	
  1277                           
  1278                           ;SC8P171XE_Timer2.c: 585: RA5 = 1;
  1279                           
  1280                           ;incstack = 0
  1281                           ; Regs used in _refresh: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1282  0285  1685               	bsf	5,5	;volatile
  1283                           
  1284                           ;SC8P171XE_Timer2.c: 586: RB3 = 1;
  1285  0286  1586               	bsf	6,3	;volatile
  1286                           
  1287                           ;SC8P171XE_Timer2.c: 587: if(shiwei > 0)
  1288  0287  0832               	movf	_shiwei,w
  1289  0288  1903               	btfsc	3,2
  1290  0289  2A94               	goto	l1884
  1291                           
  1292                           ;SC8P171XE_Timer2.c: 588: {
  1293                           ;SC8P171XE_Timer2.c: 589: ind_light_disp(table[shiwei]);
  1294  028A  0832               	movf	_shiwei,w
  1295  028B  229F               	fcall	PL6	;call to abstracted procedure
  1296  028C  22FC               	fcall	_ind_light_disp
  1297                           
  1298                           ;SC8P171XE_Timer2.c: 590: RA5 = 1;
  1299  028D  1685               	bsf	5,5	;volatile
  1300                           
  1301                           ;SC8P171XE_Timer2.c: 591: RB3 = 0;
  1302  028E  1186               	bcf	6,3	;volatile
  1303                           
  1304                           ;SC8P171XE_Timer2.c: 592: delay_us(100);
  1305  028F  3064               	movlw	100
  1306  0290  2385               	fcall	_delay_us
  1307                           
  1308                           ;SC8P171XE_Timer2.c: 593: RA5 = 1;
  1309  0291  1283               	bcf	3,5	;RP0=0, select bank0
  1310  0292  1685               	bsf	5,5	;volatile
  1311                           
  1312                           ;SC8P171XE_Timer2.c: 594: RB3 = 1;
  1313  0293  1586               	bsf	6,3	;volatile
  1314  0294                     l1884:	
  1315                           
  1316                           ;SC8P171XE_Timer2.c: 595: }
  1317                           ;SC8P171XE_Timer2.c: 596: ind_light_disp(table[gewei]);
  1318  0294  0831               	movf	_gewei,w
  1319  0295  229F               	fcall	PL6	;call to abstracted procedure
  1320  0296  22FC               	fcall	_ind_light_disp
  1321                           
  1322                           ;SC8P171XE_Timer2.c: 597: RA5 = 0;
  1323  0297  1285               	bcf	5,5	;volatile
  1324                           
  1325                           ;SC8P171XE_Timer2.c: 598: RB3 = 1;
  1326  0298  1586               	bsf	6,3	;volatile
  1327                           
  1328                           ;SC8P171XE_Timer2.c: 599: delay_us(100);
  1329  0299  3064               	movlw	100
  1330  029A  2385               	fcall	_delay_us
  1331                           
  1332                           ;SC8P171XE_Timer2.c: 600: RA5 = 1;
  1333  029B  1283               	bcf	3,5	;RP0=0, select bank0
  1334  029C  1685               	bsf	5,5	;volatile
  1335                           
  1336                           ;SC8P171XE_Timer2.c: 601: RB3 = 1;
  1337  029D  1586               	bsf	6,3	;volatile
  1338  029E  0008               	return
  1339  029F                     __end_of_refresh:	
  1340  029F                     PL6:	
  1341  029F  3E3E               	addlw	(low (_table| 0))& (0+255)
  1342  02A0  0084               	movwf	4
  1343  02A1  1383               	bcf	3,7	;select IRP bank0
  1344  02A2  0800               	movf	0,w
  1345  02A3  0008               	return
  1346  02A4                     __end_ofPL6:	
  1347                           
  1348                           	psect	text7
  1349  02FC                     __ptext7:	
  1350 ;; *************** function _ind_light_disp *****************
  1351 ;; Defined at:
  1352 ;;		line 604 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;  udata           1    wreg     unsigned char 
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;  udata           1    2[COMMON] unsigned char 
  1357 ;;  Count0          1    3[COMMON] unsigned char 
  1358 ;; Return value:  Size  Location     Type
  1359 ;;                  1    wreg      void 
  1360 ;; Registers used:
  1361 ;;		wreg, status,2, status,0, pclath, cstack
  1362 ;; Tracked objects:
  1363 ;;		On entry : 900/0
  1364 ;;		On exit  : 100/0
  1365 ;;		Unchanged: 0/0
  1366 ;; Data sizes:     COMMON   BANK0   BANK1
  1367 ;;      Params:         0       0       0
  1368 ;;      Locals:         2       0       0
  1369 ;;      Temps:          0       0       0
  1370 ;;      Totals:         2       0       0
  1371 ;;Total ram usage:        2 bytes
  1372 ;; Hardware stack levels used:    1
  1373 ;; Hardware stack levels required when called:    2
  1374 ;; This function calls:
  1375 ;;		_Delay10Us
  1376 ;; This function is called by:
  1377 ;;		_refresh
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           
  1382                           ;psect for function _ind_light_disp
  1383  02FC                     _ind_light_disp:	
  1384                           
  1385                           ;incstack = 0
  1386                           ; Regs used in _ind_light_disp: [wreg+status,2+status,0+pclath+cstack]
  1387                           ;ind_light_disp@udata stored from wreg
  1388  02FC  00F2               	movwf	ind_light_disp@udata
  1389                           
  1390                           ;SC8P171XE_Timer2.c: 606: unsigned char Count0;
  1391                           ;SC8P171XE_Timer2.c: 607: for(Count0=0;Count0<=7;Count0++)
  1392  02FD  01F3               	clrf	ind_light_disp@Count0
  1393                           
  1394                           ;SC8P171XE_Timer2.c: 608: {
  1395                           ;SC8P171XE_Timer2.c: 609: RB1=0;
  1396  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  1397  02FF                     L7:	
  1398  02FF  1086               	bcf	6,1	;volatile
  1399                           
  1400                           ;SC8P171XE_Timer2.c: 610: Delay10Us();
  1401  0300  237E               	fcall	_Delay10Us
  1402                           
  1403                           ;SC8P171XE_Timer2.c: 611: if(udata&0x80)
  1404  0301  1FF2               	btfss	ind_light_disp@udata,7
  1405  0302  2B06               	goto	l726
  1406                           
  1407                           ;SC8P171XE_Timer2.c: 612: {
  1408                           ;SC8P171XE_Timer2.c: 613: RB0=1;
  1409  0303  1283               	bcf	3,5	;RP0=0, select bank0
  1410  0304  1406               	bsf	6,0	;volatile
  1411                           
  1412                           ;SC8P171XE_Timer2.c: 615: }
  1413  0305  2B08               	goto	l1792
  1414  0306                     l726:	
  1415                           
  1416                           ;SC8P171XE_Timer2.c: 616: else
  1417                           ;SC8P171XE_Timer2.c: 617: {
  1418                           ;SC8P171XE_Timer2.c: 618: RB0=0;
  1419  0306  1283               	bcf	3,5	;RP0=0, select bank0
  1420  0307  1006               	bcf	6,0	;volatile
  1421  0308                     l1792:	
  1422                           
  1423                           ;SC8P171XE_Timer2.c: 614: Delay10Us();
  1424  0308  237E               	fcall	_Delay10Us
  1425                           
  1426                           ;SC8P171XE_Timer2.c: 620: }
  1427                           ;SC8P171XE_Timer2.c: 621: RB1=1;
  1428  0309  1283               	bcf	3,5	;RP0=0, select bank0
  1429  030A  1486               	bsf	6,1	;volatile
  1430                           
  1431                           ;SC8P171XE_Timer2.c: 622: Delay10Us();
  1432  030B  237E               	fcall	_Delay10Us
  1433  030C  3008               	movlw	8
  1434                           
  1435                           ;SC8P171XE_Timer2.c: 623: udata<<=1;
  1436  030D  1003               	clrc
  1437  030E  0DF2               	rlf	ind_light_disp@udata,f
  1438  030F  0AF3               	incf	ind_light_disp@Count0,f
  1439  0310  0273               	subwf	ind_light_disp@Count0,w
  1440                           
  1441                           ;SC8P171XE_Timer2.c: 624: }
  1442                           ;SC8P171XE_Timer2.c: 625: RB1=0;
  1443  0311  1283               	bcf	3,5	;RP0=0, select bank0
  1444  0312  1C03               	skipc
  1445  0313  2AFF               	goto	L7
  1446  0314  1086               	bcf	6,1	;volatile
  1447                           
  1448                           ;SC8P171XE_Timer2.c: 626: RB0=0;
  1449  0315  1006               	bcf	6,0	;volatile
  1450  0316  0008               	return
  1451  0317                     __end_of_ind_light_disp:	
  1452                           
  1453                           	psect	text8
  1454  037E                     __ptext8:	
  1455 ;; *************** function _Delay10Us *****************
  1456 ;; Defined at:
  1457 ;;		line 644 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;		None
  1460 ;; Auto vars:     Size  Location     Type
  1461 ;;		None
  1462 ;; Return value:  Size  Location     Type
  1463 ;;                  1    wreg      void 
  1464 ;; Registers used:
  1465 ;;		None
  1466 ;; Tracked objects:
  1467 ;;		On entry : 100/0
  1468 ;;		On exit  : 0/0
  1469 ;;		Unchanged: 0/0
  1470 ;; Data sizes:     COMMON   BANK0   BANK1
  1471 ;;      Params:         0       0       0
  1472 ;;      Locals:         0       0       0
  1473 ;;      Temps:          0       0       0
  1474 ;;      Totals:         0       0       0
  1475 ;;Total ram usage:        0 bytes
  1476 ;; Hardware stack levels used:    1
  1477 ;; Hardware stack levels required when called:    1
  1478 ;; This function calls:
  1479 ;;		Nothing
  1480 ;; This function is called by:
  1481 ;;		_ind_light_disp
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           
  1486                           ;psect for function _Delay10Us
  1487  037E                     _Delay10Us:	
  1488                           
  1489                           ;SC8P171XE_Timer2.c: 646: __nop();
  1490                           
  1491                           ;incstack = 0
  1492                           ; Regs used in _Delay10Us: []
  1493  037E  0000               	nop
  1494                           
  1495                           ;SC8P171XE_Timer2.c: 647: __nop();
  1496  037F  0000               	nop
  1497                           
  1498                           ;SC8P171XE_Timer2.c: 648: __nop();
  1499  0380  0000               	nop
  1500                           
  1501                           ;SC8P171XE_Timer2.c: 649: __nop();
  1502  0381  0000               	nop
  1503                           
  1504                           ;SC8P171XE_Timer2.c: 650: __nop();
  1505  0382  0000               	nop
  1506                           
  1507                           ;SC8P171XE_Timer2.c: 651: __nop();
  1508  0383  0000               	nop
  1509  0384  0008               	return
  1510  0385                     __end_of_Delay10Us:	
  1511                           
  1512                           	psect	text9
  1513  0385                     __ptext9:	
  1514 ;; *************** function _delay_us *****************
  1515 ;; Defined at:
  1516 ;;		line 655 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;  time            1    wreg     unsigned char 
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;  time            1    2[COMMON] unsigned char 
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  1    wreg      void 
  1523 ;; Registers used:
  1524 ;;		wreg, status,2, status,0
  1525 ;; Tracked objects:
  1526 ;;		On entry : 100/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMMON   BANK0   BANK1
  1530 ;;      Params:         0       0       0
  1531 ;;      Locals:         1       0       0
  1532 ;;      Temps:          0       0       0
  1533 ;;      Totals:         1       0       0
  1534 ;;Total ram usage:        1 bytes
  1535 ;; Hardware stack levels used:    1
  1536 ;; Hardware stack levels required when called:    1
  1537 ;; This function calls:
  1538 ;;		Nothing
  1539 ;; This function is called by:
  1540 ;;		_refresh
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           
  1545                           ;psect for function _delay_us
  1546  0385                     _delay_us:	
  1547                           
  1548                           ;incstack = 0
  1549                           ; Regs used in _delay_us: [wreg+status,2+status,0]
  1550                           ;delay_us@time stored from wreg
  1551  0385  00F2               	movwf	delay_us@time
  1552  0386                     l1810:	
  1553                           ;SC8P171XE_Timer2.c: 657: while(time)
  1554                           
  1555  0386  0872               	movf	delay_us@time,w
  1556  0387  1903               	btfsc	3,2
  1557  0388  0008               	return
  1558                           
  1559                           ;SC8P171XE_Timer2.c: 658: {
  1560                           ;SC8P171XE_Timer2.c: 659: --time;
  1561  0389  03F2               	decf	delay_us@time,f
  1562                           
  1563                           ;SC8P171XE_Timer2.c: 660: __nop();
  1564  038A  0000               	nop
  1565  038B  2B86               	goto	l1810
  1566  038C                     __end_of_delay_us:	
  1567                           
  1568                           	psect	text10
  1569  01D9                     __ptext10:	
  1570 ;; *************** function _keyCtr *****************
  1571 ;; Defined at:
  1572 ;;		line 551 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;		None
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;  kclick          1    4[COMMON] unsigned char 
  1577 ;; Return value:  Size  Location     Type
  1578 ;;                  1    wreg      void 
  1579 ;; Registers used:
  1580 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1581 ;; Tracked objects:
  1582 ;;		On entry : 100/0
  1583 ;;		On exit  : 100/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMMON   BANK0   BANK1
  1586 ;;      Params:         0       0       0
  1587 ;;      Locals:         1       0       0
  1588 ;;      Temps:          0       0       0
  1589 ;;      Totals:         1       0       0
  1590 ;;Total ram usage:        1 bytes
  1591 ;; Hardware stack levels used:    1
  1592 ;; Hardware stack levels required when called:    2
  1593 ;; This function calls:
  1594 ;;		_keyRead
  1595 ;;		_keyRead2
  1596 ;; This function is called by:
  1597 ;;		_main
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           
  1602                           ;psect for function _keyCtr
  1603  01D9                     _keyCtr:	
  1604                           
  1605                           ;SC8P171XE_Timer2.c: 553: u8t kclick = keyRead(!RA2);
  1606                           
  1607                           ;incstack = 0
  1608                           ; Regs used in _keyCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1609  01D9  1003               	clrc
  1610  01DA  1D05               	btfss	5,2	;volatile
  1611  01DB  1403               	setc
  1612  01DC  3000               	movlw	0
  1613  01DD  1803               	skipnc
  1614  01DE  3001               	movlw	1
  1615  01DF  22C2               	fcall	_keyRead
  1616  01E0  00F4               	movwf	keyCtr@kclick
  1617                           
  1618                           ;SC8P171XE_Timer2.c: 554: if(kclick == 1)
  1619  01E1  0B74               	decfsz	keyCtr@kclick,w
  1620  01E2  29E5               	goto	l1936
  1621                           
  1622                           ;SC8P171XE_Timer2.c: 555: {
  1623                           ;SC8P171XE_Timer2.c: 557: workStep = 0;
  1624  01E3  01F9               	clrf	_workStep
  1625                           
  1626                           ;SC8P171XE_Timer2.c: 558: }
  1627  01E4  29ED               	goto	l1942
  1628  01E5                     l1936:	
  1629                           
  1630                           ;SC8P171XE_Timer2.c: 559: else if(kclick == 2)
  1631  01E5  3002               	movlw	2
  1632  01E6  0674               	xorwf	keyCtr@kclick,w
  1633  01E7  1D03               	btfss	3,2
  1634  01E8  29ED               	goto	l1942
  1635                           
  1636                           ;SC8P171XE_Timer2.c: 560: {
  1637                           ;SC8P171XE_Timer2.c: 561: workStep = 1;
  1638  01E9  01F9               	clrf	_workStep
  1639  01EA  0AF9               	incf	_workStep,f
  1640                           
  1641                           ;SC8P171XE_Timer2.c: 562: count900s = 0;
  1642  01EB  01AA               	clrf	_count900s
  1643  01EC  01AB               	clrf	_count900s+1
  1644  01ED                     l1942:	
  1645                           
  1646                           ;SC8P171XE_Timer2.c: 563: }
  1647                           ;SC8P171XE_Timer2.c: 564: if(workStep)
  1648  01ED  0879               	movf	_workStep,w
  1649  01EE  1903               	btfsc	3,2
  1650  01EF  0008               	return
  1651                           
  1652                           ;SC8P171XE_Timer2.c: 565: {
  1653                           ;SC8P171XE_Timer2.c: 566: if(keyRead2(!RA1,&keyCount2))
  1654  01F0  303D               	movlw	(low (_keyCount2| 0))& (0+255)
  1655  01F1  00F2               	movwf	keyRead2@keyCount
  1656  01F2  1003               	clrc
  1657  01F3  1C85               	btfss	5,1	;volatile
  1658  01F4  1403               	setc
  1659  01F5  3000               	movlw	0
  1660  01F6  1803               	skipnc
  1661  01F7  3001               	movlw	1
  1662  01F8  22A4               	fcall	_keyRead2
  1663  01F9  3A00               	xorlw	0
  1664  01FA  1903               	skipnz
  1665  01FB  2A03               	goto	l1950
  1666                           
  1667                           ;SC8P171XE_Timer2.c: 567: {
  1668                           ;SC8P171XE_Timer2.c: 569: if(++workStep >= 9)
  1669  01FC  3009               	movlw	9
  1670  01FD  0AF9               	incf	_workStep,f
  1671  01FE  0279               	subwf	_workStep,w
  1672  01FF  1C03               	skipc
  1673  0200  2A03               	goto	l1950
  1674                           
  1675                           ;SC8P171XE_Timer2.c: 570: workStep = 9;
  1676  0201  3009               	movlw	9
  1677  0202  00F9               	movwf	_workStep
  1678  0203                     l1950:	
  1679                           
  1680                           ;SC8P171XE_Timer2.c: 571: }
  1681                           ;SC8P171XE_Timer2.c: 573: if(keyRead2(!RB2,&keyCount3))
  1682  0203  303C               	movlw	(low (_keyCount3| 0))& (0+255)
  1683  0204  00F2               	movwf	keyRead2@keyCount
  1684  0205  1003               	clrc
  1685  0206  1D06               	btfss	6,2	;volatile
  1686  0207  1403               	setc
  1687  0208  3000               	movlw	0
  1688  0209  1803               	skipnc
  1689  020A  3001               	movlw	1
  1690  020B  22A4               	fcall	_keyRead2
  1691  020C  3A00               	xorlw	0
  1692  020D  1903               	skipnz
  1693  020E  0008               	return
  1694                           
  1695                           ;SC8P171XE_Timer2.c: 574: {
  1696                           ;SC8P171XE_Timer2.c: 576: if(--workStep <= 1)
  1697  020F  3002               	movlw	2
  1698  0210  03F9               	decf	_workStep,f
  1699  0211  0279               	subwf	_workStep,w
  1700  0212  1803               	skipnc
  1701  0213  0008               	return
  1702                           
  1703                           ;SC8P171XE_Timer2.c: 577: workStep = 1;
  1704  0214  01F9               	clrf	_workStep
  1705  0215  0AF9               	incf	_workStep,f
  1706  0216  0008               	return
  1707  0217                     __end_of_keyCtr:	
  1708                           
  1709                           	psect	text11
  1710  02A4                     __ptext11:	
  1711 ;; *************** function _keyRead2 *****************
  1712 ;; Defined at:
  1713 ;;		line 451 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;  KeyStatus       1    wreg     unsigned char 
  1716 ;;  keyCount        1    2[COMMON] PTR unsigned char 
  1717 ;;		 -> keyCount3(1), keyCount2(1), 
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;  KeyStatus       1    3[COMMON] unsigned char 
  1720 ;; Return value:  Size  Location     Type
  1721 ;;                  1    wreg      unsigned char 
  1722 ;; Registers used:
  1723 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1724 ;; Tracked objects:
  1725 ;;		On entry : 100/0
  1726 ;;		On exit  : 900/0
  1727 ;;		Unchanged: 100/0
  1728 ;; Data sizes:     COMMON   BANK0   BANK1
  1729 ;;      Params:         1       0       0
  1730 ;;      Locals:         1       0       0
  1731 ;;      Temps:          0       0       0
  1732 ;;      Totals:         2       0       0
  1733 ;;Total ram usage:        2 bytes
  1734 ;; Hardware stack levels used:    1
  1735 ;; Hardware stack levels required when called:    1
  1736 ;; This function calls:
  1737 ;;		Nothing
  1738 ;; This function is called by:
  1739 ;;		_keyCtr
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           
  1744                           ;psect for function _keyRead2
  1745  02A4                     _keyRead2:	
  1746                           
  1747                           ;incstack = 0
  1748                           ; Regs used in _keyRead2: [wreg-fsr0h+status,2+status,0]
  1749                           ;keyRead2@KeyStatus stored from wreg
  1750  02A4  00F3               	movwf	keyRead2@KeyStatus
  1751                           
  1752                           ;SC8P171XE_Timer2.c: 453: if (KeyStatus)
  1753  02A5  0873               	movf	keyRead2@KeyStatus,w
  1754  02A6  1903               	btfsc	3,2
  1755  02A7  2AB7               	goto	l1766
  1756                           
  1757                           ;SC8P171XE_Timer2.c: 454: {
  1758                           ;SC8P171XE_Timer2.c: 455: (*keyCount)++;
  1759  02A8  0872               	movf	keyRead2@keyCount,w
  1760  02A9  0084               	movwf	4
  1761  02AA  1383               	bcf	3,7	;select IRP bank0
  1762  02AB  0A80               	incf	0,f
  1763                           
  1764                           ;SC8P171XE_Timer2.c: 456: if(*keyCount >= 200)
  1765  02AC  0872               	movf	keyRead2@keyCount,w
  1766  02AD  0084               	movwf	4
  1767  02AE  30C8               	movlw	200
  1768  02AF  0200               	subwf	0,w
  1769  02B0  1C03               	skipc
  1770  02B1  3400               	retlw	0
  1771                           
  1772                           ;SC8P171XE_Timer2.c: 457: {
  1773                           ;SC8P171XE_Timer2.c: 458: *keyCount = 200;
  1774  02B2  0872               	movf	keyRead2@keyCount,w
  1775  02B3  0084               	movwf	4
  1776  02B4  30C8               	movlw	200
  1777  02B5  0080               	movwf	0
  1778  02B6  3400               	retlw	0
  1779  02B7                     l1766:	
  1780                           
  1781                           ;SC8P171XE_Timer2.c: 461: else
  1782                           ;SC8P171XE_Timer2.c: 462: {
  1783                           ;SC8P171XE_Timer2.c: 463: if(*keyCount >= 8)
  1784  02B7  0872               	movf	keyRead2@keyCount,w
  1785  02B8  0084               	movwf	4
  1786  02B9  3008               	movlw	8
  1787  02BA  1383               	bcf	3,7	;select IRP bank0
  1788  02BB  0200               	subwf	0,w
  1789                           
  1790                           ;SC8P171XE_Timer2.c: 464: {
  1791                           ;SC8P171XE_Timer2.c: 465: *keyCount = 0;
  1792  02BC  0872               	movf	keyRead2@keyCount,w
  1793  02BD  0084               	movwf	4
  1794  02BE  0180               	clrf	0
  1795  02BF  1803               	btfsc	3,0
  1796                           
  1797                           ;SC8P171XE_Timer2.c: 466: return 1;
  1798  02C0  3401               	retlw	1
  1799  02C1  3400               	retlw	0
  1800  02C2                     __end_of_keyRead2:	
  1801                           ;SC8P171XE_Timer2.c: 469: }
  1802                           ;SC8P171XE_Timer2.c: 470: return 0;
  1803                           
  1804                           ;SC8P171XE_Timer2.c: 467: }
  1805                           ;SC8P171XE_Timer2.c: 468: *keyCount = 0;
  1806                           
  1807                           
  1808                           	psect	text12
  1809  02C2                     __ptext12:	
  1810 ;; *************** function _keyRead *****************
  1811 ;; Defined at:
  1812 ;;		line 416 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  KeyStatus       1    wreg     unsigned char 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  KeyStatus       1    2[COMMON] unsigned char 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  1    wreg      unsigned char 
  1819 ;; Registers used:
  1820 ;;		wreg, status,2, status,0
  1821 ;; Tracked objects:
  1822 ;;		On entry : 100/0
  1823 ;;		On exit  : 100/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMMON   BANK0   BANK1
  1826 ;;      Params:         0       0       0
  1827 ;;      Locals:         1       0       0
  1828 ;;      Temps:          0       0       0
  1829 ;;      Totals:         1       0       0
  1830 ;;Total ram usage:        1 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; Hardware stack levels required when called:    1
  1833 ;; This function calls:
  1834 ;;		Nothing
  1835 ;; This function is called by:
  1836 ;;		_keyCtr
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           
  1841                           ;psect for function _keyRead
  1842  02C2                     _keyRead:	
  1843                           
  1844                           ;incstack = 0
  1845                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1846                           ;keyRead@KeyStatus stored from wreg
  1847  02C2  00F2               	movwf	keyRead@KeyStatus
  1848                           
  1849                           ;SC8P171XE_Timer2.c: 418: if (KeyStatus)
  1850  02C3  0872               	movf	keyRead@KeyStatus,w
  1851                           
  1852                           ;SC8P171XE_Timer2.c: 419: {
  1853                           ;SC8P171XE_Timer2.c: 420: if(++keyCount >= 150)
  1854  02C4  3096               	movlw	150
  1855  02C5  1903               	btfsc	3,2
  1856  02C6  2AD4               	goto	L8
  1857  02C7  0AB8               	incf	_keyCount,f
  1858  02C8  0238               	subwf	_keyCount,w
  1859  02C9  1C03               	skipc
  1860  02CA  3400               	retlw	0
  1861                           
  1862                           ;SC8P171XE_Timer2.c: 421: {
  1863                           ;SC8P171XE_Timer2.c: 422: keyCount = 150;
  1864  02CB  3096               	movlw	150
  1865  02CC  00B8               	movwf	_keyCount
  1866                           
  1867                           ;SC8P171XE_Timer2.c: 423: if(!longPressFlag)
  1868  02CD  0836               	movf	_longPressFlag,w
  1869  02CE  1D03               	btfss	3,2
  1870  02CF  3400               	retlw	0
  1871  02D0  3002               	movlw	2
  1872                           
  1873                           ;SC8P171XE_Timer2.c: 424: {
  1874                           ;SC8P171XE_Timer2.c: 425: longPressFlag = 1;
  1875  02D1  01B6               	clrf	_longPressFlag
  1876  02D2  0AB6               	incf	_longPressFlag,f
  1877                           
  1878                           ;SC8P171XE_Timer2.c: 426: return 2;
  1879  02D3  0008               	return
  1880  02D4                     L8:	
  1881                           ;SC8P171XE_Timer2.c: 431: else
  1882                           ;SC8P171XE_Timer2.c: 432: {
  1883                           ;SC8P171XE_Timer2.c: 433: if(keyCount >= 150)
  1884                           
  1885  02D4  0238               	subwf	_keyCount,w
  1886  02D5  1C03               	skipc
  1887  02D6  2ADA               	goto	l1744
  1888                           
  1889                           ;SC8P171XE_Timer2.c: 434: {
  1890                           ;SC8P171XE_Timer2.c: 435: keyCount = 0;
  1891  02D7  01B8               	clrf	_keyCount
  1892                           
  1893                           ;SC8P171XE_Timer2.c: 436: longPressFlag = 0;
  1894  02D8  01B6               	clrf	_longPressFlag
  1895                           
  1896                           ;SC8P171XE_Timer2.c: 437: return 0;
  1897  02D9  3400               	retlw	0
  1898  02DA                     l1744:	
  1899                           
  1900                           ;SC8P171XE_Timer2.c: 439: else if(keyCount >= 5)
  1901  02DA  3005               	movlw	5
  1902  02DB  0238               	subwf	_keyCount,w
  1903                           
  1904                           ;SC8P171XE_Timer2.c: 440: {
  1905                           ;SC8P171XE_Timer2.c: 441: keyCount = 0;
  1906  02DC  01B8               	clrf	_keyCount
  1907  02DD  1803               	btfsc	3,0
  1908                           
  1909                           ;SC8P171XE_Timer2.c: 442: return 1;
  1910  02DE  3401               	retlw	1
  1911  02DF  3400               	retlw	0
  1912  02E0                     __end_of_keyRead:	
  1913                           ;SC8P171XE_Timer2.c: 443: }
  1914                           ;SC8P171XE_Timer2.c: 444: keyCount = 0;
  1915                           
  1916                           
  1917                           	psect	text13
  1918  0346                     __ptext13:	
  1919 ;; *************** function _chrgCtr *****************
  1920 ;; Defined at:
  1921 ;;		line 521 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;		None
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;		None
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  1    wreg      void 
  1928 ;; Registers used:
  1929 ;;		wreg, status,2
  1930 ;; Tracked objects:
  1931 ;;		On entry : 100/0
  1932 ;;		On exit  : 100/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMMON   BANK0   BANK1
  1935 ;;      Params:         0       0       0
  1936 ;;      Locals:         0       0       0
  1937 ;;      Temps:          0       0       0
  1938 ;;      Totals:         0       0       0
  1939 ;;Total ram usage:        0 bytes
  1940 ;; Hardware stack levels used:    1
  1941 ;; Hardware stack levels required when called:    1
  1942 ;; This function calls:
  1943 ;;		Nothing
  1944 ;; This function is called by:
  1945 ;;		_main
  1946 ;; This function uses a non-reentrant model
  1947 ;;
  1948                           
  1949                           
  1950                           ;psect for function _chrgCtr
  1951  0346                     _chrgCtr:	
  1952                           
  1953                           ;SC8P171XE_Timer2.c: 523: if(RB5)
  1954                           
  1955                           ;incstack = 0
  1956                           ; Regs used in _chrgCtr: [wreg+status,2]
  1957  0346  1E86               	btfss	6,5	;volatile
  1958  0347  2B57               	goto	l1928
  1959  0348  3064               	movlw	100
  1960                           
  1961                           ;SC8P171XE_Timer2.c: 524: {
  1962                           ;SC8P171XE_Timer2.c: 526: chrgStep = 1;
  1963  0349  01B4               	clrf	_chrgStep
  1964  034A  0AB4               	incf	_chrgStep,f
  1965                           
  1966                           ;SC8P171XE_Timer2.c: 527: workStep = 0;
  1967  034B  01F9               	clrf	_workStep
  1968                           
  1969                           ;SC8P171XE_Timer2.c: 528: if(batValue > 99)
  1970  034C  0233               	subwf	_batValue,w
  1971  034D  1C03               	skipc
  1972  034E  2B53               	goto	l703
  1973                           
  1974                           ;SC8P171XE_Timer2.c: 529: {
  1975                           ;SC8P171XE_Timer2.c: 532: PORTA |= 0x01;
  1976  034F  1405               	bsf	5,0	;volatile
  1977                           
  1978                           ;SC8P171XE_Timer2.c: 533: PORTB;
  1979  0350  0806               	movf	6,w	;volatile
  1980                           
  1981                           ;SC8P171XE_Timer2.c: 534: PORTA &= 0xEF;
  1982  0351  1205               	bcf	5,4	;volatile
  1983                           
  1984                           ;SC8P171XE_Timer2.c: 535: }
  1985  0352  0008               	return
  1986  0353                     l703:	
  1987                           
  1988                           ;SC8P171XE_Timer2.c: 536: else
  1989                           ;SC8P171XE_Timer2.c: 537: {
  1990                           ;SC8P171XE_Timer2.c: 540: PORTA |= 0x10;
  1991  0353  1605               	bsf	5,4	;volatile
  1992                           
  1993                           ;SC8P171XE_Timer2.c: 541: PORTB;
  1994  0354  0806               	movf	6,w	;volatile
  1995                           
  1996                           ;SC8P171XE_Timer2.c: 542: PORTA &= 0xFE;
  1997  0355  1005               	bcf	5,0	;volatile
  1998  0356  0008               	return
  1999  0357                     l1928:	
  2000                           
  2001                           ;SC8P171XE_Timer2.c: 545: else
  2002                           ;SC8P171XE_Timer2.c: 546: {
  2003                           ;SC8P171XE_Timer2.c: 547: chrgStep = 0;
  2004  0357  01B4               	clrf	_chrgStep
  2005  0358  0008               	return
  2006  0359                     __end_of_chrgCtr:	
  2007                           
  2008                           	psect	text14
  2009  0217                     __ptext14:	
  2010 ;; *************** function _checkBatAD *****************
  2011 ;; Defined at:
  2012 ;;		line 297 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;		None
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;		None
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  1    wreg      void 
  2019 ;; Registers used:
  2020 ;;		wreg, status,2, status,0, pclath, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 100/0
  2023 ;;		On exit  : 100/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMMON   BANK0   BANK1
  2026 ;;      Params:         0       0       0
  2027 ;;      Locals:         0       0       0
  2028 ;;      Temps:          0       0       0
  2029 ;;      Totals:         0       0       0
  2030 ;;Total ram usage:        0 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    2
  2033 ;; This function calls:
  2034 ;;		_ADC_Sample
  2035 ;;		___lbdiv
  2036 ;; This function is called by:
  2037 ;;		_main
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           
  2042                           ;psect for function _checkBatAD
  2043  0217                     _checkBatAD:	
  2044                           
  2045                           ;SC8P171XE_Timer2.c: 299: ANS3 = 1;
  2046                           
  2047                           ;incstack = 0
  2048                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2049  0217  1683               	bsf	3,5	;RP0=1, select bank1
  2050  0218  1593               	bsf	19,3	;volatile
  2051                           
  2052                           ;SC8P171XE_Timer2.c: 300: TRISA3 = 1;
  2053  0219  1585               	bsf	5,3	;volatile
  2054                           
  2055                           ;SC8P171XE_Timer2.c: 301: ADC_Sample(3,5);
  2056  021A  3005               	movlw	5
  2057  021B  00F2               	movwf	ADC_Sample@adldo
  2058  021C  3003               	movlw	3
  2059  021D  202D               	fcall	_ADC_Sample
  2060                           
  2061                           ;SC8P171XE_Timer2.c: 303: if(adresult > 2800)
  2062  021E  300A               	movlw	10
  2063  021F  0278               	subwf	_adresult+1,w	;volatile
  2064  0220  30F1               	movlw	241
  2065  0221  1903               	skipnz
  2066  0222  0277               	subwf	_adresult,w	;volatile
  2067  0223  1C03               	skipc
  2068  0224  2A29               	goto	l2186
  2069                           
  2070                           ;SC8P171XE_Timer2.c: 304: adresult = 2800;
  2071  0225  30F0               	movlw	240
  2072  0226  00F7               	movwf	_adresult	;volatile
  2073  0227  300A               	movlw	10
  2074  0228  2A33               	goto	L10
  2075  0229                     l2186:	
  2076                           
  2077                           ;SC8P171XE_Timer2.c: 305: else if(adresult < 2200)
  2078  0229  3008               	movlw	8
  2079  022A  0278               	subwf	_adresult+1,w	;volatile
  2080  022B  3098               	movlw	152
  2081  022C  1903               	skipnz
  2082  022D  0277               	subwf	_adresult,w	;volatile
  2083  022E  1803               	skipnc
  2084  022F  2A34               	goto	l2190
  2085                           
  2086                           ;SC8P171XE_Timer2.c: 306: adresult = 2200;
  2087  0230  3098               	movlw	152
  2088  0231  00F7               	movwf	_adresult	;volatile
  2089  0232  3008               	movlw	8
  2090  0233                     L10:	
  2091  0233  00F8               	movwf	_adresult+1	;volatile
  2092  0234                     l2190:	
  2093                           
  2094                           ;SC8P171XE_Timer2.c: 307: batValue = adresult - 2200;
  2095  0234  0877               	movf	_adresult,w	;volatile
  2096  0235  3E68               	addlw	104
  2097  0236  00B3               	movwf	_batValue
  2098                           
  2099                           ;SC8P171XE_Timer2.c: 309: batValue= batValue/6;
  2100  0237  3006               	movlw	6
  2101  0238  00F2               	movwf	___lbdiv@divisor
  2102  0239  0833               	movf	_batValue,w
  2103  023A  2317               	fcall	___lbdiv
  2104  023B  00B3               	movwf	_batValue
  2105  023C  0008               	return
  2106  023D                     __end_of_checkBatAD:	
  2107                           
  2108                           	psect	text15
  2109  0317                     __ptext15:	
  2110 ;; *************** function ___lbdiv *****************
  2111 ;; Defined at:
  2112 ;;		line 4 in file "C:\mcuproject\scm\SC8P171XE¿ª·¢°ü\SCMCU_IDE_V2.00.09_Beta4\data\sources\common\lbdiv.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;  dividend        1    wreg     unsigned char 
  2115 ;;  divisor         1    2[COMMON] unsigned char 
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;  dividend        1    3[COMMON] unsigned char 
  2118 ;;  quotient        1    5[COMMON] unsigned char 
  2119 ;;  counter         1    4[COMMON] unsigned char 
  2120 ;; Return value:  Size  Location     Type
  2121 ;;                  1    wreg      unsigned char 
  2122 ;; Registers used:
  2123 ;;		wreg, status,2, status,0
  2124 ;; Tracked objects:
  2125 ;;		On entry : 100/0
  2126 ;;		On exit  : 100/0
  2127 ;;		Unchanged: 100/0
  2128 ;; Data sizes:     COMMON   BANK0   BANK1
  2129 ;;      Params:         1       0       0
  2130 ;;      Locals:         3       0       0
  2131 ;;      Temps:          0       0       0
  2132 ;;      Totals:         4       0       0
  2133 ;;Total ram usage:        4 bytes
  2134 ;; Hardware stack levels used:    1
  2135 ;; Hardware stack levels required when called:    1
  2136 ;; This function calls:
  2137 ;;		Nothing
  2138 ;; This function is called by:
  2139 ;;		_main
  2140 ;;		_checkBatAD
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           
  2145                           ;psect for function ___lbdiv
  2146  0317                     ___lbdiv:	
  2147                           
  2148                           ;incstack = 0
  2149                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2150                           ;___lbdiv@dividend stored from wreg
  2151  0317  00F3               	movwf	___lbdiv@dividend
  2152  0318  01F5               	clrf	___lbdiv@quotient
  2153  0319  0872               	movf	___lbdiv@divisor,w
  2154  031A  1903               	btfsc	3,2
  2155  031B  2B30               	goto	l1832
  2156  031C  01F4               	clrf	___lbdiv@counter
  2157  031D                     l1818:	
  2158  031D  0AF4               	incf	___lbdiv@counter,f
  2159  031E  1BF2               	btfsc	___lbdiv@divisor,7
  2160  031F  2B23               	goto	l1022
  2161  0320  1003               	clrc
  2162  0321  0DF2               	rlf	___lbdiv@divisor,f
  2163  0322  2B1D               	goto	l1818
  2164  0323                     l1022:	
  2165  0323  1003               	clrc
  2166  0324  0DF5               	rlf	___lbdiv@quotient,f
  2167  0325  0872               	movf	___lbdiv@divisor,w
  2168  0326  0273               	subwf	___lbdiv@dividend,w
  2169  0327  1C03               	skipc
  2170  0328  2B2D               	goto	L11
  2171  0329  0872               	movf	___lbdiv@divisor,w
  2172  032A  02F3               	subwf	___lbdiv@dividend,f
  2173  032B  1475               	bsf	___lbdiv@quotient,0
  2174  032C  1003               	clrc
  2175  032D                     L11:	
  2176  032D  0CF2               	rrf	___lbdiv@divisor,f
  2177  032E  0BF4               	decfsz	___lbdiv@counter,f
  2178  032F  2B23               	goto	l1022
  2179  0330                     l1832:	
  2180  0330  0875               	movf	___lbdiv@quotient,w
  2181  0331  0008               	return
  2182  0332                     __end_of___lbdiv:	
  2183                           
  2184                           	psect	text16
  2185  002D                     __ptext16:	
  2186 ;; *************** function _ADC_Sample *****************
  2187 ;; Defined at:
  2188 ;;		line 324 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;  adch            1    wreg     unsigned char 
  2191 ;;  adldo           1    2[COMMON] unsigned char 
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;  adch            1    0[BANK0 ] unsigned char 
  2194 ;;  ad_temp         2    2[BANK0 ] volatile unsigned int 
  2195 ;;  i               1    1[BANK0 ] unsigned char 
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg, status,2, status,0
  2200 ;; Tracked objects:
  2201 ;;		On entry : 100/100
  2202 ;;		On exit  : 100/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMMON   BANK0   BANK1
  2205 ;;      Params:         1       0       0
  2206 ;;      Locals:         0       4       0
  2207 ;;      Temps:          4       0       0
  2208 ;;      Totals:         5       4       0
  2209 ;;Total ram usage:        9 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    1
  2212 ;; This function calls:
  2213 ;;		Nothing
  2214 ;; This function is called by:
  2215 ;;		_checkBatAD
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           
  2220                           ;psect for function _ADC_Sample
  2221  002D                     _ADC_Sample:	
  2222                           
  2223                           ;incstack = 0
  2224                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2225                           ;ADC_Sample@adch stored from wreg
  2226  002D  1283               	bcf	3,5	;RP0=0, select bank0
  2227  002E  00CA               	movwf	ADC_Sample@adch
  2228                           
  2229                           ;SC8P171XE_Timer2.c: 326: volatile unsigned int ad_temp;
  2230                           ;SC8P171XE_Timer2.c: 328: if(LDOEN^(adldo!=0))
  2231  002F  1683               	bsf	3,5	;RP0=1, select bank1
  2232  0030  1D1F               	btfss	31,2	;volatile
  2233  0031  2834               	goto	u1570
  2234  0032  3001               	movlw	1
  2235  0033  2835               	goto	u1572
  2236  0034                     u1570:	
  2237  0034  3000               	movlw	0
  2238  0035                     u1572:	
  2239  0035  00F3               	movwf	??_ADC_Sample
  2240  0036  0872               	movf	ADC_Sample@adldo,w
  2241  0037  1903               	btfsc	3,2
  2242  0038  283B               	goto	u1580
  2243  0039  3001               	movlw	1
  2244  003A  283C               	goto	u1582
  2245  003B                     u1580:	
  2246  003B  3000               	movlw	0
  2247  003C                     u1582:	
  2248  003C  0673               	xorwf	??_ADC_Sample,w
  2249  003D  1903               	skipnz
  2250  003E  2847               	goto	l2136
  2251                           
  2252                           ;SC8P171XE_Timer2.c: 329: {
  2253                           ;SC8P171XE_Timer2.c: 330: ADCON1 = adldo;
  2254  003F  0872               	movf	ADC_Sample@adldo,w
  2255  0040  009F               	movwf	31	;volatile
  2256                           
  2257                           ;SC8P171XE_Timer2.c: 331: _delay((unsigned long)((100)*(8000000UL/4000000.0)));
  2258  0041  3042               	movlw	66
  2259  0042  00F3               	movwf	??_ADC_Sample
  2260  0043                     u1877:	
  2261  0043  0BF3               	decfsz	??_ADC_Sample,f
  2262  0044  2843               	goto	u1877
  2263  0045  0000               	nop
  2264                           
  2265                           ;SC8P171XE_Timer2.c: 332: }
  2266  0046  2849               	goto	l2138
  2267  0047                     l2136:	
  2268                           
  2269                           ;SC8P171XE_Timer2.c: 333: else
  2270                           ;SC8P171XE_Timer2.c: 334: ADCON1 = adldo;
  2271  0047  0872               	movf	ADC_Sample@adldo,w
  2272  0048  009F               	movwf	31	;volatile
  2273  0049                     l2138:	
  2274                           
  2275                           ;SC8P171XE_Timer2.c: 336: ADCON0 = 0X41 | (adch << 2);
  2276  0049  1283               	bcf	3,5	;RP0=0, select bank0
  2277  004A  084A               	movf	ADC_Sample@adch,w
  2278  004B  00F3               	movwf	??_ADC_Sample
  2279  004C  3001               	movlw	1
  2280  004D  1003               	clrc
  2281  004E                     L12:	
  2282  004E  0DF3               	rlf	??_ADC_Sample,f
  2283  004F  3EFF               	addlw	-1
  2284  0050  1003               	clrc
  2285  0051  1D03               	skipz
  2286  0052  284E               	goto	L12
  2287  0053  0D73               	rlf	??_ADC_Sample,w
  2288  0054  3841               	iorlw	65
  2289  0055  009F               	movwf	31	;volatile
  2290  0056  0000               	nop	;# 
  2291  0057  0000               	nop	;# 
  2292  0058  0000               	nop	;# 
  2293  0059  0000               	nop	;# 
  2294                           
  2295                           ;SC8P171XE_Timer2.c: 341: GODONE = 1;
  2296  005A  1283               	bcf	3,5	;RP0=0, select bank0
  2297  005B  149F               	bsf	31,1	;volatile
  2298                           
  2299                           ;SC8P171XE_Timer2.c: 343: unsigned char i = 0;
  2300  005C  01CB               	clrf	ADC_Sample@i
  2301  005D                     l653:	
  2302                           ;SC8P171XE_Timer2.c: 344: while(GODONE)
  2303                           
  2304  005D  1C9F               	btfss	31,1	;volatile
  2305  005E  2862               	goto	l2146
  2306                           
  2307                           ;SC8P171XE_Timer2.c: 345: {
  2308                           ;SC8P171XE_Timer2.c: 346: if(0 == (--i))
  2309  005F  0BCB               	decfsz	ADC_Sample@i,f
  2310  0060  285D               	goto	l653
  2311  0061  0008               	return
  2312  0062                     l2146:	
  2313                           
  2314                           ;SC8P171XE_Timer2.c: 348: }
  2315                           ;SC8P171XE_Timer2.c: 350: ad_temp=(ADRESH<<4)+(ADRESL>>4);
  2316  0062  081E               	movf	30,w	;volatile
  2317  0063  00CC               	movwf	ADC_Sample@ad_temp	;volatile
  2318  0064  01CD               	clrf	ADC_Sample@ad_temp+1	;volatile
  2319  0065  0ECC               	swapf	ADC_Sample@ad_temp,f	;volatile
  2320  0066  0ECD               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2321  0067  30F0               	movlw	240
  2322  0068  05CD               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2323  0069  084C               	movf	ADC_Sample@ad_temp,w	;volatile
  2324  006A  390F               	andlw	15
  2325  006B  04CD               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2326  006C  30F0               	movlw	240
  2327  006D  05CC               	andwf	ADC_Sample@ad_temp,f	;volatile
  2328  006E  1683               	bsf	3,5	;RP0=1, select bank1
  2329  006F  0E1E               	swapf	30,w	;volatile
  2330  0070  390F               	andlw	15
  2331  0071  1283               	bcf	3,5	;RP0=0, select bank0
  2332  0072  07CC               	addwf	ADC_Sample@ad_temp,f	;volatile
  2333  0073  1803               	skipnc
  2334  0074  0ACD               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2335                           
  2336                           ;SC8P171XE_Timer2.c: 352: if(0 == admax)
  2337  0075  0824               	movf	_admax,w	;volatile
  2338  0076  0425               	iorwf	_admax+1,w	;volatile
  2339  0077  1D03               	btfss	3,2
  2340  0078  287B               	goto	l2154
  2341                           
  2342                           ;SC8P171XE_Timer2.c: 353: {
  2343                           ;SC8P171XE_Timer2.c: 354: admax = ad_temp;
  2344  0079  2107               	fcall	PL4	;call to abstracted procedure
  2345  007A  288D               	goto	l2160
  2346  007B                     l2154:	
  2347                           ;SC8P171XE_Timer2.c: 356: }
  2348                           
  2349                           ;SC8P171XE_Timer2.c: 355: admin = ad_temp;
  2350                           
  2351                           
  2352                           ;SC8P171XE_Timer2.c: 357: else if(ad_temp > admax)
  2353  007B  084D               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2354  007C  0225               	subwf	_admax+1,w	;volatile
  2355  007D  1D03               	skipz
  2356  007E  2881               	goto	u1645
  2357  007F  084C               	movf	ADC_Sample@ad_temp,w	;volatile
  2358  0080  0224               	subwf	_admax,w	;volatile
  2359  0081                     u1645:	
  2360  0081  1803               	skipnc
  2361  0082  2885               	goto	l2158
  2362                           
  2363                           ;SC8P171XE_Timer2.c: 358: admax = ad_temp;
  2364  0083  2107               	fcall	PL4	;call to abstracted procedure
  2365  0084  2891               	goto	l659
  2366  0085                     l2158:	
  2367                           
  2368                           ;SC8P171XE_Timer2.c: 359: else if(ad_temp < admin)
  2369  0085  0827               	movf	_admin+1,w	;volatile
  2370  0086  024D               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2371  0087  1D03               	skipz
  2372  0088  288B               	goto	u1655
  2373  0089  0826               	movf	_admin,w	;volatile
  2374  008A  024C               	subwf	ADC_Sample@ad_temp,w	;volatile
  2375  008B                     u1655:	
  2376  008B  1803               	skipnc
  2377  008C  2891               	goto	l659
  2378  008D                     l2160:	
  2379                           
  2380                           ;SC8P171XE_Timer2.c: 360: admin = ad_temp;
  2381  008D  084D               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2382  008E  00A7               	movwf	_admin+1	;volatile
  2383  008F  084C               	movf	ADC_Sample@ad_temp,w	;volatile
  2384  0090  00A6               	movwf	_admin	;volatile
  2385  0091                     l659:	
  2386                           
  2387                           ;SC8P171XE_Timer2.c: 362: adsum += ad_temp;
  2388  0091  084C               	movf	ADC_Sample@ad_temp,w	;volatile
  2389  0092  00F3               	movwf	??_ADC_Sample
  2390  0093  084D               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2391  0094  00F4               	movwf	??_ADC_Sample+1
  2392  0095  01F5               	clrf	??_ADC_Sample+2
  2393  0096  01F6               	clrf	??_ADC_Sample+3
  2394  0097  0873               	movf	??_ADC_Sample,w
  2395  0098  07A0               	addwf	_adsum,f	;volatile
  2396  0099  0874               	movf	??_ADC_Sample+1,w
  2397  009A  1103               	clrz
  2398  009B  1803               	skipnc
  2399  009C  3E01               	addlw	1
  2400  009D  1D03               	btfss	3,2
  2401  009E  07A1               	addwf	_adsum+1,f	;volatile
  2402  009F  0875               	movf	??_ADC_Sample+2,w
  2403  00A0  1103               	clrz
  2404  00A1  1803               	skipnc
  2405  00A2  3E01               	addlw	1
  2406  00A3  1D03               	btfss	3,2
  2407  00A4  07A2               	addwf	_adsum+2,f	;volatile
  2408  00A5  0876               	movf	??_ADC_Sample+3,w
  2409  00A6  1103               	clrz
  2410  00A7  1803               	skipnc
  2411  00A8  3E01               	addlw	1
  2412  00A9  1D03               	btfss	3,2
  2413  00AA  07A3               	addwf	_adsum+3,f	;volatile
  2414                           
  2415                           ;SC8P171XE_Timer2.c: 363: if(++adtimes >= 10)
  2416  00AB  300A               	movlw	10
  2417  00AC  0AAC               	incf	_adtimes,f	;volatile
  2418  00AD  022C               	subwf	_adtimes,w	;volatile
  2419  00AE  1C03               	skipc
  2420  00AF  0008               	return
  2421                           
  2422                           ;SC8P171XE_Timer2.c: 364: {
  2423                           ;SC8P171XE_Timer2.c: 365: adsum -= admax;
  2424  00B0  0824               	movf	_admax,w	;volatile
  2425  00B1  00F3               	movwf	??_ADC_Sample
  2426  00B2  0825               	movf	_admax+1,w	;volatile
  2427  00B3  20F8               	fcall	PL2	;call to abstracted procedure
  2428  00B4  1C03               	skipc
  2429  00B5  0F76               	incfsz	??_ADC_Sample+3,w
  2430  00B6  02A3               	subwf	_adsum+3,f	;volatile
  2431                           
  2432                           ;SC8P171XE_Timer2.c: 366: if(adsum >= admin) adsum -= admin;
  2433  00B7  0826               	movf	_admin,w	;volatile
  2434  00B8  00F3               	movwf	??_ADC_Sample
  2435  00B9  0827               	movf	_admin+1,w	;volatile
  2436  00BA  00F4               	movwf	??_ADC_Sample+1
  2437  00BB  01F5               	clrf	??_ADC_Sample+2
  2438  00BC  01F6               	clrf	??_ADC_Sample+3
  2439  00BD  0876               	movf	??_ADC_Sample+3,w
  2440  00BE  0223               	subwf	_adsum+3,w	;volatile
  2441  00BF  1D03               	skipz
  2442  00C0  28CB               	goto	u1695
  2443  00C1  0875               	movf	??_ADC_Sample+2,w
  2444  00C2  0222               	subwf	_adsum+2,w	;volatile
  2445  00C3  1D03               	skipz
  2446  00C4  28CB               	goto	u1695
  2447  00C5  0874               	movf	??_ADC_Sample+1,w
  2448  00C6  0221               	subwf	_adsum+1,w	;volatile
  2449  00C7  1D03               	skipz
  2450  00C8  28CB               	goto	u1695
  2451  00C9  0873               	movf	??_ADC_Sample,w
  2452  00CA  0220               	subwf	_adsum,w	;volatile
  2453  00CB                     u1695:	
  2454  00CB  1C03               	skipc
  2455  00CC  28D5               	goto	l664
  2456  00CD  0826               	movf	_admin,w	;volatile
  2457  00CE  00F3               	movwf	??_ADC_Sample
  2458  00CF  0827               	movf	_admin+1,w	;volatile
  2459  00D0  20F8               	fcall	PL2	;call to abstracted procedure
  2460  00D1  1C03               	skipc
  2461  00D2  0F76               	incfsz	??_ADC_Sample+3,w
  2462  00D3  02A3               	subwf	_adsum+3,f	;volatile
  2463  00D4  28D9               	goto	l2168
  2464  00D5                     l664:	
  2465                           
  2466                           ;SC8P171XE_Timer2.c: 367: else adsum = 0;
  2467  00D5  01A0               	clrf	_adsum	;volatile
  2468  00D6  01A1               	clrf	_adsum+1	;volatile
  2469  00D7  01A2               	clrf	_adsum+2	;volatile
  2470  00D8  01A3               	clrf	_adsum+3	;volatile
  2471  00D9                     l2168:	
  2472                           
  2473                           ;SC8P171XE_Timer2.c: 369: adresult = (unsigned int)(adsum >> 3);
  2474  00D9  0820               	movf	_adsum,w	;volatile
  2475  00DA  00F3               	movwf	??_ADC_Sample
  2476  00DB  0821               	movf	_adsum+1,w	;volatile
  2477  00DC  00F4               	movwf	??_ADC_Sample+1
  2478  00DD  0822               	movf	_adsum+2,w	;volatile
  2479  00DE  00F5               	movwf	??_ADC_Sample+2
  2480  00DF  0823               	movf	_adsum+3,w	;volatile
  2481  00E0  00F6               	movwf	??_ADC_Sample+3
  2482  00E1  3003               	movlw	3
  2483  00E2                     u1715:	
  2484  00E2  1003               	clrc
  2485  00E3  0CF6               	rrf	??_ADC_Sample+3,f
  2486  00E4  0CF5               	rrf	??_ADC_Sample+2,f
  2487  00E5  0CF4               	rrf	??_ADC_Sample+1,f
  2488  00E6  0CF3               	rrf	??_ADC_Sample,f
  2489  00E7  3EFF               	addlw	-1
  2490  00E8  1D03               	skipz
  2491  00E9  28E2               	goto	u1715
  2492  00EA  0874               	movf	??_ADC_Sample+1,w
  2493  00EB  00F8               	movwf	_adresult+1	;volatile
  2494  00EC  0873               	movf	??_ADC_Sample,w
  2495  00ED  00F7               	movwf	_adresult	;volatile
  2496                           
  2497                           ;SC8P171XE_Timer2.c: 371: adsum = 0;
  2498  00EE  01A0               	clrf	_adsum	;volatile
  2499  00EF  01A1               	clrf	_adsum+1	;volatile
  2500  00F0  01A2               	clrf	_adsum+2	;volatile
  2501  00F1  01A3               	clrf	_adsum+3	;volatile
  2502                           
  2503                           ;SC8P171XE_Timer2.c: 372: admin = 0;
  2504  00F2  01A6               	clrf	_admin	;volatile
  2505  00F3  01A7               	clrf	_admin+1	;volatile
  2506                           
  2507                           ;SC8P171XE_Timer2.c: 373: admax = 0;
  2508  00F4  01A4               	clrf	_admax	;volatile
  2509  00F5  01A5               	clrf	_admax+1	;volatile
  2510                           
  2511                           ;SC8P171XE_Timer2.c: 374: adtimes = 0;
  2512  00F6  01AC               	clrf	_adtimes	;volatile
  2513  00F7  0008               	return
  2514  00F8                     __end_of_ADC_Sample:	
  2515  00F8                     PL2:	
  2516  00F8  00F4               	movwf	??_ADC_Sample+1
  2517  00F9  01F5               	clrf	??_ADC_Sample+2
  2518  00FA  01F6               	clrf	??_ADC_Sample+3
  2519  00FB  0873               	movf	??_ADC_Sample,w
  2520  00FC  02A0               	subwf	_adsum,f	;volatile
  2521  00FD  0874               	movf	??_ADC_Sample+1,w
  2522  00FE  1C03               	skipc
  2523  00FF  0F74               	incfsz	??_ADC_Sample+1,w
  2524  0100  02A1               	subwf	_adsum+1,f	;volatile
  2525  0101  0875               	movf	??_ADC_Sample+2,w
  2526  0102  1C03               	skipc
  2527  0103  0F75               	incfsz	??_ADC_Sample+2,w
  2528  0104  02A2               	subwf	_adsum+2,f	;volatile
  2529  0105  0876               	movf	??_ADC_Sample+3,w
  2530  0106  0008               	return
  2531  0107                     __end_ofPL2:	
  2532  0107                     PL4:	
  2533  0107  084D               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2534  0108  00A5               	movwf	_admax+1	;volatile
  2535  0109  084C               	movf	ADC_Sample@ad_temp,w	;volatile
  2536  010A  00A4               	movwf	_admax	;volatile
  2537  010B  0008               	return
  2538  010C                     __end_ofPL4:	
  2539                           
  2540                           	psect	text17
  2541  02E0                     __ptext17:	
  2542 ;; *************** function ___lbmod *****************
  2543 ;; Defined at:
  2544 ;;		line 4 in file "C:\mcuproject\scm\SC8P171XE¿ª·¢°ü\SCMCU_IDE_V2.00.09_Beta4\data\sources\common\lbmod.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;  dividend        1    wreg     unsigned char 
  2547 ;;  divisor         1    2[COMMON] unsigned char 
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;  dividend        1    4[COMMON] unsigned char 
  2550 ;;  rem             1    6[COMMON] unsigned char 
  2551 ;;  counter         1    5[COMMON] unsigned char 
  2552 ;; Return value:  Size  Location     Type
  2553 ;;                  1    wreg      unsigned char 
  2554 ;; Registers used:
  2555 ;;		wreg, status,2, status,0
  2556 ;; Tracked objects:
  2557 ;;		On entry : 100/0
  2558 ;;		On exit  : 100/0
  2559 ;;		Unchanged: 100/0
  2560 ;; Data sizes:     COMMON   BANK0   BANK1
  2561 ;;      Params:         1       0       0
  2562 ;;      Locals:         3       0       0
  2563 ;;      Temps:          1       0       0
  2564 ;;      Totals:         5       0       0
  2565 ;;Total ram usage:        5 bytes
  2566 ;; Hardware stack levels used:    1
  2567 ;; Hardware stack levels required when called:    1
  2568 ;; This function calls:
  2569 ;;		Nothing
  2570 ;; This function is called by:
  2571 ;;		_main
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           
  2576                           ;psect for function ___lbmod
  2577  02E0                     ___lbmod:	
  2578                           
  2579                           ;incstack = 0
  2580                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  2581                           ;___lbmod@dividend stored from wreg
  2582  02E0  00F4               	movwf	___lbmod@dividend
  2583  02E1  3008               	movlw	8
  2584  02E2  00F5               	movwf	___lbmod@counter
  2585  02E3  01F6               	clrf	___lbmod@rem
  2586  02E4                     l2006:	
  2587  02E4  0874               	movf	___lbmod@dividend,w
  2588  02E5  00F3               	movwf	??___lbmod
  2589  02E6  3007               	movlw	7
  2590  02E7  1003               	clrc
  2591  02E8                     L13:	
  2592  02E8  0CF3               	rrf	??___lbmod,f
  2593  02E9  3EFF               	addlw	-1
  2594  02EA  1003               	clrc
  2595  02EB  1D03               	skipz
  2596  02EC  2AE8               	goto	L13
  2597  02ED  0D76               	rlf	___lbmod@rem,w
  2598  02EE  0473               	iorwf	??___lbmod,w
  2599  02EF  00F6               	movwf	___lbmod@rem
  2600  02F0  1003               	clrc
  2601  02F1  0DF4               	rlf	___lbmod@dividend,f
  2602  02F2  0872               	movf	___lbmod@divisor,w
  2603  02F3  0276               	subwf	___lbmod@rem,w
  2604  02F4  1C03               	skipc
  2605  02F5  2AF8               	goto	l2014
  2606  02F6  0872               	movf	___lbmod@divisor,w
  2607  02F7  02F6               	subwf	___lbmod@rem,f
  2608  02F8                     l2014:	
  2609  02F8  0BF5               	decfsz	___lbmod@counter,f
  2610  02F9  2AE4               	goto	l2006
  2611  02FA  0876               	movf	___lbmod@rem,w
  2612  02FB  0008               	return
  2613  02FC                     __end_of___lbmod:	
  2614                           
  2615                           	psect	text18
  2616  0359                     __ptext18:	
  2617 ;; *************** function _IO_Init *****************
  2618 ;; Defined at:
  2619 ;;		line 629 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;		None
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;		None
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  1    wreg      void 
  2626 ;; Registers used:
  2627 ;;		wreg, status,2
  2628 ;; Tracked objects:
  2629 ;;		On entry : 100/100
  2630 ;;		On exit  : 100/100
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMMON   BANK0   BANK1
  2633 ;;      Params:         0       0       0
  2634 ;;      Locals:         0       0       0
  2635 ;;      Temps:          0       0       0
  2636 ;;      Totals:         0       0       0
  2637 ;;Total ram usage:        0 bytes
  2638 ;; Hardware stack levels used:    1
  2639 ;; Hardware stack levels required when called:    1
  2640 ;; This function calls:
  2641 ;;		Nothing
  2642 ;; This function is called by:
  2643 ;;		_main
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646                           
  2647                           
  2648                           ;psect for function _IO_Init
  2649  0359                     _IO_Init:	
  2650                           
  2651                           ;SC8P171XE_Timer2.c: 632: PORTA = 0x00;
  2652                           
  2653                           ;incstack = 0
  2654                           ; Regs used in _IO_Init: [wreg+status,2]
  2655  0359  1283               	bcf	3,5	;RP0=0, select bank0
  2656  035A  0185               	clrf	5	;volatile
  2657                           
  2658                           ;SC8P171XE_Timer2.c: 633: PORTB = 0x00;
  2659  035B  0186               	clrf	6	;volatile
  2660                           
  2661                           ;SC8P171XE_Timer2.c: 634: TRISB = 0x34;
  2662  035C  3034               	movlw	52
  2663  035D  1683               	bsf	3,5	;RP0=1, select bank1
  2664  035E  0086               	movwf	6	;volatile
  2665                           
  2666                           ;SC8P171XE_Timer2.c: 635: TRISA = 0x06;
  2667  035F  3006               	movlw	6
  2668  0360  0085               	movwf	5	;volatile
  2669                           
  2670                           ;SC8P171XE_Timer2.c: 636: WPUA = 0x06;
  2671  0361  1283               	bcf	3,5	;RP0=0, select bank0
  2672  0362  0087               	movwf	7	;volatile
  2673                           
  2674                           ;SC8P171XE_Timer2.c: 637: WPDA = 0x00;
  2675  0363  0188               	clrf	8	;volatile
  2676                           
  2677                           ;SC8P171XE_Timer2.c: 638: WPUB = 0x04;
  2678  0364  3004               	movlw	4
  2679  0365  1683               	bsf	3,5	;RP0=1, select bank1
  2680  0366  0095               	movwf	21	;volatile
  2681                           
  2682                           ;SC8P171XE_Timer2.c: 639: WPDB = 0x00;
  2683  0367  0187               	clrf	7	;volatile
  2684  0368  0008               	return
  2685  0369                     __end_of_IO_Init:	
  2686                           
  2687                           	psect	text19
  2688  0261                     __ptext19:	
  2689 ;; *************** function _Timer0_Isr *****************
  2690 ;; Defined at:
  2691 ;;		line 672 in file "C:\mcuproject\scm\xfx\D101_SC1711E_SOP14_\SC8P171XE_Timer2.c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;		None
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;		None
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      void 
  2698 ;; Registers used:
  2699 ;;		wreg, status,2, status,0
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMMON   BANK0   BANK1
  2705 ;;      Params:         0       0       0
  2706 ;;      Locals:         0       0       0
  2707 ;;      Temps:          2       0       0
  2708 ;;      Totals:         2       0       0
  2709 ;;Total ram usage:        2 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; This function calls:
  2712 ;;		Nothing
  2713 ;; This function is called by:
  2714 ;;		Interrupt level 1
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           
  2719                           ;psect for function _Timer0_Isr
  2720  0261                     _Timer0_Isr:	
  2721                           
  2722                           ;SC8P171XE_Timer2.c: 674: if(T0IF)
  2723  0261  1D0B               	btfss	11,2	;volatile
  2724  0262  2A7E               	goto	i1l756
  2725                           
  2726                           ;SC8P171XE_Timer2.c: 675: {
  2727                           ;SC8P171XE_Timer2.c: 676: TMR0 += 155;
  2728  0263  309B               	movlw	155
  2729  0264  1283               	bcf	3,5	;RP0=0, select bank0
  2730  0265  0781               	addwf	1,f	;volatile
  2731                           
  2732                           ;SC8P171XE_Timer2.c: 679: if(++intCount>=100)
  2733  0266  3064               	movlw	100
  2734  0267  0ABB               	incf	_intCount,f
  2735  0268  023B               	subwf	_intCount,w
  2736  0269  1C03               	skipc
  2737  026A  2A7D               	goto	i1l2130
  2738  026B  3064               	movlw	100
  2739                           
  2740                           ;SC8P171XE_Timer2.c: 680: {
  2741                           ;SC8P171XE_Timer2.c: 681: intCount = 0;
  2742  026C  01BB               	clrf	_intCount
  2743                           
  2744                           ;SC8P171XE_Timer2.c: 682: IntFlag = 1;
  2745  026D  01BA               	clrf	_IntFlag
  2746  026E  0ABA               	incf	_IntFlag,f
  2747                           
  2748                           ;SC8P171XE_Timer2.c: 683: if(++count1s >= 100)
  2749  026F  0AB5               	incf	_count1s,f
  2750  0270  0235               	subwf	_count1s,w
  2751  0271  1C03               	skipc
  2752  0272  2A7D               	goto	i1l2130
  2753                           
  2754                           ;SC8P171XE_Timer2.c: 684: {
  2755                           ;SC8P171XE_Timer2.c: 685: count1s = 0;
  2756  0273  01B5               	clrf	_count1s
  2757                           
  2758                           ;SC8P171XE_Timer2.c: 686: if(workStep)
  2759  0274  0879               	movf	_workStep,w
  2760  0275  1903               	btfsc	3,2
  2761  0276  2A7B               	goto	i1l2128
  2762                           
  2763                           ;SC8P171XE_Timer2.c: 687: {
  2764                           ;SC8P171XE_Timer2.c: 688: ++count900s;
  2765  0277  0AAA               	incf	_count900s,f
  2766  0278  1903               	skipnz
  2767  0279  0AAB               	incf	_count900s+1,f
  2768                           
  2769                           ;SC8P171XE_Timer2.c: 689: }
  2770  027A  2A7D               	goto	i1l2130
  2771  027B                     i1l2128:	
  2772                           
  2773                           ;SC8P171XE_Timer2.c: 690: else
  2774                           ;SC8P171XE_Timer2.c: 691: {
  2775                           ;SC8P171XE_Timer2.c: 692: count900s = 0;
  2776  027B  01AA               	clrf	_count900s
  2777  027C  01AB               	clrf	_count900s+1
  2778  027D                     i1l2130:	
  2779                           
  2780                           ;SC8P171XE_Timer2.c: 693: }
  2781                           ;SC8P171XE_Timer2.c: 694: }
  2782                           ;SC8P171XE_Timer2.c: 695: }
  2783                           ;SC8P171XE_Timer2.c: 696: T0IF = 0;
  2784  027D  110B               	bcf	11,2	;volatile
  2785  027E                     i1l756:	
  2786  027E  0871               	movf	??_Timer0_Isr+1,w
  2787  027F  008A               	movwf	10
  2788  0280  0E70               	swapf	??_Timer0_Isr^(0+-128),w
  2789  0281  0083               	movwf	3
  2790  0282  0EFE               	swapf	126,f
  2791  0283  0E7E               	swapf	126,w
  2792  0284  0009               	retfie
  2793  0285                     __end_of_Timer0_Isr:	
  2794  007E                     btemp	set	126	;btemp
  2795  007E                     wtemp0	set	126
  2796                           
  2797                           	psect	intentry
  2798  0004                     __pintentry:	
  2799                           ;incstack = 0
  2800                           ; Regs used in _Timer0_Isr: [wreg+status,2+status,0]
  2801                           
  2802  0004                     interrupt_function:	
  2803  007E                     saved_w	set	btemp
  2804  0004  00FE               	movwf	btemp
  2805  0005  0E03               	swapf	3,w
  2806  0006  00F0               	movwf	??_Timer0_Isr
  2807  0007  080A               	movf	10,w
  2808  0008  00F1               	movwf	??_Timer0_Isr+1
  2809  0009  2A61               	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80      4      46
    BANK1            80      0       0

Pointer List with Targets:

    keyRead2@keyCount	PTR unsigned char  size(1) Largest target is 1
		 -> keyCount3(BANK0[1]), keyCount2(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->___lbmod
    _workCtr->___lwmod
    _refresh->_ind_light_disp
    _keyCtr->_keyRead2
    _checkBatAD->_ADC_Sample

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    _checkBatAD->_ADC_Sample

Critical Paths under _Timer0_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer0_Isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1881
                            _IO_Init
                            ___lbdiv
                            ___lbmod
                         _checkBatAD
                            _chrgCtr
                          _gotoSleep
                             _keyCtr
                            _pwmStop
                            _refresh
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0     265
                            ___lwmod
                          _gotoSleep
                            _pwmInit
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gotoSleep                                            0     0      0       0
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (1) _refresh                                              0     0      0      92
                           _delay_us
                     _ind_light_disp
 ---------------------------------------------------------------------------------
 (2) _ind_light_disp                                       2     2      0      69
                                              2 COMMON     2     2      0
                          _Delay10Us
 ---------------------------------------------------------------------------------
 (3) _Delay10Us                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_us                                             1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0     327
                                              4 COMMON     1     1      0
                            _keyRead
                           _keyRead2
 ---------------------------------------------------------------------------------
 (2) _keyRead2                                             2     1      1     260
                                              2 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           0     0      0     717
                         _ADC_Sample
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     268
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                           9     8      1     449
                                              2 COMMON     5     4      1
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) ___lbmod                                              5     4      1     212
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _IO_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Timer0_Isr                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IO_Init
   ___lbdiv
   ___lbmod
   _checkBatAD
     _ADC_Sample
     ___lbdiv
   _chrgCtr
   _gotoSleep
     _pwmStop
   _keyCtr
     _keyRead
     _keyRead2
   _pwmStop
   _refresh
     _delay_us
     _ind_light_disp
       _Delay10Us
   _workCtr
     ___lwmod
     _gotoSleep
       _pwmStop
     _pwmInit

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               50      0       0       6        0.0%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      4      2E       4       57.5%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      38       8        0.0%
ABS                  0      0      38       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Jun 30 10:43:51 2021

                     PL2 00F8                       PL4 0107                       PL6 029F  
                     fsr 0004                      l621 0121                      l606 01BE  
                    l703 0353                      l632 0167                      l633 016B  
                    l625 0159                      l653 005D                      l726 0306  
                    l664 00D5                      l593 0184                      l659 0091  
                    l598 01B0                      _GIE 005F                      _RA0 0028  
                    _RA1 0029                      _RA2 002A                      _RB0 0030  
                    _RB1 0031                      _RA4 002C                      _RB2 0032  
                    _RA5 002D                      _RB3 0033                      _RB5 0035  
    __size_of_ADC_Sample 00CB                      fsr0 0004                      indf 0000  
                   l1022 0323                     l2014 02F8                     l2006 02E4  
                   l2160 008D                     l2136 0047                     l2224 019D  
                   l2154 007B                     l2146 0062                     l2138 0049  
                   l2242 01AC                     l2234 01A5                     l2226 019F  
                   l2158 0085                     l2190 0234                     l2270 01C9  
                   l2168 00D9                     l2186 0229                     l1810 0386  
                   l1642 0369                     l2282 01D7                     l2266 01C5  
                   l1832 0330                     l1744 02DA                     l1818 031D  
                   l1844 0249                     l1852 025C                     l1766 02B7  
                   l1950 0203                     l1942 01ED                     l1928 0357  
                   l1936 01E5                     l1792 0308                     l1970 0127  
                   l1884 0294                     l1964 011B                     l1972 0129  
                   l1986 0152                     l1978 0138                     _ANS3 049B  
                   _T0IE 005D                     _T0IF 005A                     u1125 024F  
                   u1570 0034                     u1715 00E2                     u1580 003B  
                   u1572 0035                     u1645 0081                     u1582 003C  
                   u1655 008B                     u1695 00CB                     u1877 0043  
                   _TMR0 0001                     _WPDA 0008                     _WPDB 0087  
                   _WPUA 0007                     _WPUB 0095          __end_of_IO_Init 0369  
                   _main 0173                     _duty 0037                     btemp 007E  
                   start 000A                    ?_main 0070          __end_of___lbdiv 0332  
        __end_of___lbmod 02FC                    _LDOEN 04FA          __end_of___lwmod 0261  
                  i1l756 027E                    _PORTA 0005                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0086                    _PWMTH 001A  
                  _PWMTL 0019          __end_of_chrgCtr 0359                    _admax 0024  
                  _admin 0026          __end_of_keyRead 02E0                    _adsum 0020  
                  _gewei 0031                    _table 003E          __end_of_refresh 029F  
                  pclath 000A          __end_of_pwmInit 0346          __end_of_pwmStop 0391  
                  status 0003                    wtemp0 007E          __end_of_workCtr 0173  
        ___lbdiv@divisor 0072          ___lbdiv@counter 0074          __initialization 000B  
           __end_of_main 01D9       __size_of_Delay10Us 0007                   ??_main 0077  
              ??_IO_Init 0072                   _ADCON0 001F                   _ADCON1 009F  
                 _ADRESH 001E                   _ADRESL 009E                   _GODONE 00F9  
                 i1l2130 027D                   i1l2128 027B                   _OSCCON 008F  
                 _PWMD1L 0017             ??_ADC_Sample 0073                   _WDTCON 0088  
                 _PWMCON 001B                   _TRISA3 042B             keyCtr@kclick 0074  
         _ind_light_disp 02FC         __end_of_delay_us 038C               _Timer0_Isr 0261  
              ??___lbdiv 0073         __end_of_keyRead2 02C2                ??___lbmod 0073  
              ??___lwmod 0076                   _keyCtr 01D9                ??_chrgCtr 0072  
                 _shiwei 0032                ??_keyRead 0072       __end_of_ADC_Sample 00F8  
              ??_refresh 0074                   saved_w 007E                ??_pwmInit 0072  
              ??_pwmStop 0072        __end_of_Delay10Us 0385                ??_workCtr 0077  
       ___lbdiv@dividend 0073          ___lbmod@divisor 0072   __end_of_ind_light_disp 0317  
__end_of__initialization 002B          ___lbmod@counter 0075           __pcstackCOMMON 0070  
           __pidataBANK0 0000               __end_ofPL2 0107               __end_ofPL4 010C  
             __end_ofPL6 02A4         ___lbdiv@quotient 0075               _checkBatAD 0217  
             __pbssBANK0 0020          ?_ind_light_disp 0070       __size_of_gotoSleep 000D  
            ?_Timer0_Isr 0070               __pmaintext 0173               __pintentry 0004  
                ?_keyCtr 0070                ?_delay_us 0070                  _PWMD01H 0018  
                _IO_Init 0359                ?_keyRead2 0072                  _IntFlag 003A  
        ADC_Sample@adldo 0072                  ___lbdiv 0317                  ___lbmod 02E0  
                ___lwmod 023D          __size_of_keyCtr 003E                  _adtimes 002C  
                _chrgCtr 0346                  __ptext1 010C                  __ptext2 0332  
                __ptext3 0369                  __ptext4 038C                  __ptext5 023D  
                __ptext6 0285                  __ptext7 02FC                  __ptext8 037E  
                __ptext9 0385              _adCheckTime 0030                  _count3S 0028  
                _count1s 0035                  _maxDuty 002E                  _keyRead 02C2  
      __end_of_gotoSleep 0376                  _refresh 0285               ??_delay_us 0072  
                _pwmFlag 002D                  _pwmInit 0332      __size_of_Timer0_Isr 0024  
            ?_checkBatAD 0070                  _pwmStop 038C                  clrloop0 0377  
                _workCtr 010C     end_of_initialization 002B               ??_keyRead2 0073  
       keyRead2@keyCount 0072            _longPressFlag 0036         ___lbmod@dividend 0074  
    ind_light_disp@udata 0072              ___lbmod@rem 0076                _Delay10Us 037E  
    __size_of_checkBatAD 0026           __end_of_keyCtr 0217      start_initialization 000B  
       ??_ind_light_disp 0072               ?_Delay10Us 0070             ??_Timer0_Isr 0070  
      ADC_Sample@ad_temp 004C              __pdataBANK0 003E                 ??_keyCtr 0074  
       keyRead@KeyStatus 0072              __pbssCOMMON 0077                ___latbits 0000  
          __pcstackBANK0 004A                 ?_IO_Init 0070       __end_of_Timer0_Isr 0285  
      __size_of_delay_us 0007        __size_of_keyRead2 001E                 ?___lbdiv 0072  
               ?___lbmod 0072                 ?___lwmod 0072                 ?_chrgCtr 0070  
              _count900s 002A                 ?_keyRead 0070                _keyCount2 003D  
              _keyCount3 003C                _firstTime 002F                 ?_refresh 0070  
         ADC_Sample@adch 004A                 ?_pwmInit 0070             ??_checkBatAD 0077  
               ?_pwmStop 0070                _gotoSleep 0369                 ?_workCtr 0070  
            ADC_Sample@i 004B        interrupt_function 0004              ??_Delay10Us 0072  
              clear_ram0 0376                _sleepTime 0039       __end_of_checkBatAD 023D  
             ?_gotoSleep 0070         __size_of_IO_Init 0010             delay_us@time 0072  
             _ADC_Sample 002D        keyRead2@KeyStatus 0073         __size_of___lbdiv 001B  
       __size_of___lbmod 001C         __size_of___lwmod 0024         __size_of_chrgCtr 0013  
               _batValue 0033         __size_of_keyRead 001E                 _adresult 0077  
               _delay_us 0385                 _chrgStep 0034         __size_of_refresh 001A  
               __ptext10 01D9                 __ptext11 02A4                 __ptext12 02C2  
               __ptext13 0346                 __ptext14 0217                 __ptext15 0317  
               __ptext16 002D                 __ptext17 02E0                 __ptext18 0359  
               __ptext19 0261         __size_of_pwmInit 0014         __size_of_pwmStop 0005  
       __size_of_workCtr 0067                 _keyRead2 02A4                 _keyCount 0038  
               _intCount 003B            __size_of_main 0066                 _workStep 0079  
            ??_gotoSleep 0072                 intlevel1 0000         ___lwmod@dividend 0074  
            ?_ADC_Sample 0072               _OPTION_REG 0081          ___lwmod@divisor 0072  
        ___lwmod@counter 0076  __size_of_ind_light_disp 001B     ind_light_disp@Count0 0073  
