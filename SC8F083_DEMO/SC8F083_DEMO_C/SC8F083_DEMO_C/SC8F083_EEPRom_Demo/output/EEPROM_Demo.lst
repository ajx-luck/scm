

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Nov 14 16:22:35 2023

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	_tmp4_text,global,class=CODE,delta=2
     6                           	psect	_tmp3_text,global,class=CODE,delta=2
     7                           	psect	_tmp2_text,global,class=CODE,delta=2
     8                           	psect	_tmp1_text,global,class=CODE,delta=2
     9                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	pa_nodes0,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0703                     _tmp4_absaddr	set	1795
    55  0702                     _tmp3_absaddr	set	1794
    56  0701                     _tmp2_absaddr	set	1793
    57  0700                     _tmp1_absaddr	set	1792
    58  0703                     _tmp4_absaddr	set	1795
    59                           
    60                           	psect	strings
    61  0000                     __pstrings:	
    62                           
    63                           	psect	_tmp4_text
    64  0703                     __p_tmp4_text:	
    65  0703                     _tmp4:	
    66  0703  34AA               	retlw	170
    67  0704                     __end_of_tmp4:	
    68  0702                     _tmp3_absaddr	set	1794
    69                           
    70                           	psect	_tmp3_text
    71  0702                     __p_tmp3_text:	
    72  0702                     _tmp3:	
    73  0702  34AA               	retlw	170
    74  0703                     __end_of_tmp3:	
    75  0701                     _tmp2_absaddr	set	1793
    76                           
    77                           	psect	_tmp2_text
    78  0701                     __p_tmp2_text:	
    79  0701                     _tmp2:	
    80  0701  34AA               	retlw	170
    81  0702                     __end_of_tmp2:	
    82  0700                     _tmp1_absaddr	set	1792
    83                           
    84                           	psect	_tmp1_text
    85  0700                     __p_tmp1_text:	
    86  0700                     _tmp1:	
    87  0700  34AA               	retlw	170
    88  0701                     __end_of_tmp1:	
    89                           
    90                           	psect	nvCOMMON
    91  007B                     __pnvCOMMON:	
    92  007B                     _datanum:	
    93  007B                     	ds	1
    94  005F                     _GIE	set	95
    95  0092                     _EEADRH	set	146
    96  0091                     _EEADR	set	145
    97  0090                     _EEDATH	set	144
    98  008F                     _EEDAT	set	143
    99  008E                     _EECON2	set	142
   100  0085                     _TRISA	set	133
   101  0468                     _RD	set	1128
   102  0469                     _WR	set	1129
   103  046A                     _WREN	set	1130
   104  046F                     _EEPGD	set	1135
   105  0430                     _RA0	set	1072
   106  0431                     _RA1	set	1073
   107                           
   108                           	psect	cinit
   109  0704                     start_initialization:	
   110                           ; #config settings
   111                           
   112  0704                     __initialization:	
   113                           
   114                           ; Clear objects allocated to COMMON
   115  0704  01F0               	clrf	__pbssCOMMON& (0+127)
   116  0705  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   117  0706  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   118  0707  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   119  0708  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   120  0709  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   121  070A                     end_of_initialization:	
   122                           ;End of C runtime variable initialization code
   123                           
   124  070A                     __end_of__initialization:	
   125  070A  0183               	clrf	3
   126  070B  118A  2F0D         	ljmp	_main	;jump to C main() function
   127                           
   128                           	psect	bssCOMMON
   129  0070                     __pbssCOMMON:	
   130  0070                     _read_data:	
   131  0070                     	ds	2
   132  0072                     _t:	
   133  0072                     	ds	2
   134  0074                     _read_rom_data:	
   135  0074                     	ds	1
   136  0075                     _data:	
   137  0075                     	ds	1
   138                           
   139                           	psect	cstackCOMMON
   140  0076                     __pcstackCOMMON:	
   141  0076                     ?_Memory_Write:	
   142  0076                     ?_Memory_Read:	
   143                           ; 1 bytes @ 0x0
   144                           
   145  0076                     ??_Memory_Read:	
   146                           ; 1 bytes @ 0x0
   147                           
   148  0076                     ?_Program_Read:	
   149                           ; 1 bytes @ 0x0
   150                           
   151  0076                     ?_main:	
   152                           ; 1 bytes @ 0x0
   153                           
   154  0076                     Memory_Write@Value:	
   155                           ; 1 bytes @ 0x0
   156                           
   157  0076                     Program_Read@P_Addr:	
   158                           ; 2 bytes @ 0x0
   159                           
   160                           
   161                           ; 2 bytes @ 0x0
   162  0076                     	ds	2
   163  0078                     ??_Memory_Write:	
   164  0078                     ??_Program_Read:	
   165                           ; 1 bytes @ 0x2
   166                           
   167  0078                     Memory_Write@Addr:	
   168                           ; 1 bytes @ 0x2
   169                           
   170  0078                     Memory_Read@Addr:	
   171                           ; 1 bytes @ 0x2
   172                           
   173                           
   174                           ; 1 bytes @ 0x2
   175  0078                     	ds	1
   176  0079                     ??_main:	
   177  0079                     main@read_addr:	
   178                           ; 1 bytes @ 0x3
   179                           
   180                           
   181                           ; 2 bytes @ 0x3
   182  0079                     	ds	2
   183                           
   184                           	psect	maintext
   185  070D                     __pmaintext:	
   186 ;;
   187 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   188 ;;
   189 ;; *************** function _main *****************
   190 ;; Defined at:
   191 ;;		line 23 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F083¿ª·¢°ü\SC8F083_DEMO_C\SC8F083_EEPRom_Demo\main.c"
   192 ;; Parameters:    Size  Location     Type
   193 ;;		None
   194 ;; Auto vars:     Size  Location     Type
   195 ;;  read_addr       2    3[COMMON] unsigned int 
   196 ;; Return value:  Size  Location     Type
   197 ;;                  1    wreg      void 
   198 ;; Registers used:
   199 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   200 ;; Tracked objects:
   201 ;;		On entry : B00/0
   202 ;;		On exit  : 300/100
   203 ;;		Unchanged: 0/0
   204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   205 ;;      Params:         0       0       0       0
   206 ;;      Locals:         2       0       0       0
   207 ;;      Temps:          0       0       0       0
   208 ;;      Totals:         2       0       0       0
   209 ;;Total ram usage:        2 bytes
   210 ;; Hardware stack levels required when called:    1
   211 ;; This function calls:
   212 ;;		_Memory_Read
   213 ;;		_Memory_Write
   214 ;;		_Program_Read
   215 ;; This function is called by:
   216 ;;		Startup code after reset
   217 ;; This function uses a non-reentrant model
   218 ;;
   219                           
   220                           
   221                           ;psect for function _main
   222  070D                     _main:	
   223                           
   224                           ;incstack = 0
   225                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   226  070D  0000               	nop	;# 
   227  070E  0064               	clrwdt	;# 
   228                           
   229                           ;main.c: 27: TRISA = 0;
   230  070F  1683               	bsf	3,5	;RP0=1, select bank1
   231  0710  1303               	bcf	3,6	;RP1=0, select bank1
   232  0711  0185               	clrf	5	;volatile
   233  0712                     L1:	
   234                           
   235                           ;main.c: 28: data = 0;
   236  0712  01F5               	clrf	_data	;volatile
   237  0713                     l843:	
   238                           ;main.c: 47: while(1)
   239                           
   240  0713  0064               	clrwdt	;# 
   241                           
   242                           ;main.c: 50: for(datanum=0;datanum<32;datanum++)
   243  0714  01FB               	clrf	_datanum	;volatile
   244  0715  3020               	movlw	32
   245  0716  027B               	subwf	_datanum,w	;volatile
   246  0717  1803               	btfsc	3,0
   247  0718  2F31               	goto	l1364
   248  0719                     l1354:	
   249                           
   250                           ;main.c: 51: {
   251                           ;main.c: 52: Memory_Write(datanum,0x55aa);
   252  0719  30AA               	movlw	170
   253  071A  00F6               	movwf	Memory_Write@Value
   254  071B  3055               	movlw	85
   255  071C  00F7               	movwf	Memory_Write@Value+1
   256  071D  087B               	movf	_datanum,w	;volatile
   257  071E  118A  2761  118A   	fcall	_Memory_Write
   258                           
   259                           ;main.c: 53: Memory_Read(datanum);
   260  0721  087B               	movf	_datanum,w	;volatile
   261  0722  118A  2780  118A   	fcall	_Memory_Read
   262                           
   263                           ;main.c: 54: if(0x55aa == read_data)
   264  0725  30AA               	movlw	170
   265  0726  0670               	xorwf	_read_data,w	;volatile
   266  0727  3055               	movlw	85
   267  0728  1903               	skipnz
   268  0729  0671               	xorwf	_read_data+1,w	;volatile
   269  072A  1903               	btfsc	3,2
   270                           
   271                           ;main.c: 55: {
   272                           ;main.c: 56: data++;
   273  072B  0AF5               	incf	_data,f	;volatile
   274  072C  0AFB               	incf	_datanum,f	;volatile
   275  072D  3020               	movlw	32
   276  072E  027B               	subwf	_datanum,w	;volatile
   277  072F  1C03               	skipc
   278  0730  2F19               	goto	l1354
   279  0731                     l1364:	
   280                           
   281                           ;main.c: 57: }
   282                           ;main.c: 59: }
   283                           ;main.c: 60: if(data == 32)
   284  0731  3020               	movlw	32
   285  0732  0675               	xorwf	_data,w	;volatile
   286  0733  1D03               	btfss	3,2
   287  0734  2F3A               	goto	l847
   288                           
   289                           ;main.c: 61: {
   290                           ;main.c: 62: RA0 = 1;
   291  0735  1683               	bsf	3,5	;RP0=1, select bank1
   292  0736  1303               	bcf	3,6	;RP1=0, select bank1
   293  0737  1406               	bsf	6,0	;volatile
   294                           
   295                           ;main.c: 63: data = 0;
   296  0738  01F5               	clrf	_data	;volatile
   297                           
   298                           ;main.c: 64: }
   299  0739  2F3D               	goto	l1370
   300  073A                     l847:	
   301                           
   302                           ;main.c: 65: else RA0 = 0;
   303  073A  1683               	bsf	3,5	;RP0=1, select bank1
   304  073B  1303               	bcf	3,6	;RP1=0, select bank1
   305  073C  1006               	bcf	6,0	;volatile
   306  073D                     l1370:	
   307                           
   308                           ;main.c: 67: for(datanum=0;datanum<4;datanum++)
   309  073D  01FB               	clrf	_datanum	;volatile
   310  073E  3004               	movlw	4
   311  073F  027B               	subwf	_datanum,w	;volatile
   312  0740  1803               	btfsc	3,0
   313  0741  2F59               	goto	l1386
   314  0742                     l1376:	
   315                           
   316                           ;main.c: 68: {
   317                           ;main.c: 69: unsigned int read_addr = 0x0700;
   318  0742  3007               	movlw	7
   319  0743  01F9               	clrf	main@read_addr
   320  0744  00FA               	movwf	main@read_addr+1
   321                           
   322                           ;main.c: 70: read_addr = read_addr + datanum;
   323  0745  087B               	movf	_datanum,w	;volatile
   324  0746  07F9               	addwf	main@read_addr,f
   325  0747  1803               	skipnc
   326  0748  0AFA               	incf	main@read_addr+1,f
   327                           
   328                           ;main.c: 71: Program_Read(read_addr);
   329  0749  087A               	movf	main@read_addr+1,w
   330  074A  00F7               	movwf	Program_Read@P_Addr+1
   331  074B  0879               	movf	main@read_addr,w
   332  074C  00F6               	movwf	Program_Read@P_Addr
   333  074D  118A  2795  118A   	fcall	_Program_Read
   334                           
   335                           ;main.c: 72: if(0xaa == read_rom_data)
   336  0750  30AA               	movlw	170
   337  0751  0674               	xorwf	_read_rom_data,w	;volatile
   338  0752  1903               	btfsc	3,2
   339                           
   340                           ;main.c: 73: {
   341                           ;main.c: 74: data++;
   342  0753  0AF5               	incf	_data,f	;volatile
   343  0754  0AFB               	incf	_datanum,f	;volatile
   344  0755  3004               	movlw	4
   345  0756  027B               	subwf	_datanum,w	;volatile
   346  0757  1C03               	skipc
   347  0758  2F42               	goto	l1376
   348  0759                     l1386:	
   349                           
   350                           ;main.c: 75: }
   351                           ;main.c: 77: }
   352                           ;main.c: 78: if(data == 4)
   353  0759  3004               	movlw	4
   354  075A  0675               	xorwf	_data,w	;volatile
   355  075B  1D03               	btfss	3,2
   356  075C  2F5F               	goto	l852
   357                           
   358                           ;main.c: 79: {
   359                           ;main.c: 80: RA1 = 1;
   360  075D  1486               	bsf	6,1	;volatile
   361  075E  2F12               	goto	L1
   362  075F                     l852:	
   363                           ;main.c: 82: }
   364                           
   365                           ;main.c: 81: data = 0;
   366                           
   367                           
   368                           ;main.c: 83: else RA1 = 0;
   369  075F  1086               	bcf	6,1	;volatile
   370  0760  2F13               	goto	l843
   371  0761                     __end_of_main:	
   372                           
   373                           	psect	text1
   374  0795                     __ptext1:	
   375 ;; *************** function _Program_Read *****************
   376 ;; Defined at:
   377 ;;		line 153 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F083¿ª·¢°ü\SC8F083_DEMO_C\SC8F083_EEPRom_Demo\main.c"
   378 ;; Parameters:    Size  Location     Type
   379 ;;  P_Addr          2    0[COMMON] unsigned int 
   380 ;; Auto vars:     Size  Location     Type
   381 ;;		None
   382 ;; Return value:  Size  Location     Type
   383 ;;                  1    wreg      void 
   384 ;; Registers used:
   385 ;;		wreg
   386 ;; Tracked objects:
   387 ;;		On entry : 200/100
   388 ;;		On exit  : 300/100
   389 ;;		Unchanged: 0/0
   390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   391 ;;      Params:         2       0       0       0
   392 ;;      Locals:         0       0       0       0
   393 ;;      Temps:          0       0       0       0
   394 ;;      Totals:         2       0       0       0
   395 ;;Total ram usage:        2 bytes
   396 ;; Hardware stack levels used:    1
   397 ;; This function calls:
   398 ;;		Nothing
   399 ;; This function is called by:
   400 ;;		_main
   401 ;; This function uses a non-reentrant model
   402 ;;
   403                           
   404                           
   405                           ;psect for function _Program_Read
   406  0795                     _Program_Read:	
   407                           
   408                           ;main.c: 156: EEADR = P_Addr & 0x00ff;
   409                           
   410                           ;incstack = 0
   411                           ; Regs used in _Program_Read: [wreg]
   412  0795  0876               	movf	Program_Read@P_Addr,w
   413  0796  1683               	bsf	3,5	;RP0=1, select bank1
   414  0797  0091               	movwf	17	;volatile
   415                           
   416                           ;main.c: 157: EEADRH = (P_Addr & 0xff00)>>8;
   417  0798  0877               	movf	Program_Read@P_Addr+1,w
   418  0799  0092               	movwf	18	;volatile
   419                           
   420                           ;main.c: 159: EEPGD = 1;
   421  079A  178D               	bsf	13,7	;volatile
   422                           
   423                           ;main.c: 161: RD = 1;
   424  079B  140D               	bsf	13,0	;volatile
   425  079C  0000               	nop	;# 
   426  079D  0000               	nop	;# 
   427                           
   428                           ;main.c: 165: read_rom_data = EEDAT;
   429  079E  1683               	bsf	3,5	;RP0=1, select bank1
   430  079F  1303               	bcf	3,6	;RP1=0, select bank1
   431  07A0  080F               	movf	15,w	;volatile
   432  07A1  00F4               	movwf	_read_rom_data	;volatile
   433  07A2  0008               	return
   434  07A3                     __end_of_Program_Read:	
   435                           
   436                           	psect	text2
   437  0761                     __ptext2:	
   438 ;; *************** function _Memory_Write *****************
   439 ;; Defined at:
   440 ;;		line 97 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F083¿ª·¢°ü\SC8F083_DEMO_C\SC8F083_EEPRom_Demo\main.c"
   441 ;; Parameters:    Size  Location     Type
   442 ;;  Addr            1    wreg     unsigned char 
   443 ;;  Value           2    0[COMMON] unsigned int 
   444 ;; Auto vars:     Size  Location     Type
   445 ;;  Addr            1    2[COMMON] unsigned char 
   446 ;; Return value:  Size  Location     Type
   447 ;;                  1    wreg      void 
   448 ;; Registers used:
   449 ;;		wreg
   450 ;; Tracked objects:
   451 ;;		On entry : 0/100
   452 ;;		On exit  : 300/100
   453 ;;		Unchanged: 0/0
   454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   455 ;;      Params:         2       0       0       0
   456 ;;      Locals:         1       0       0       0
   457 ;;      Temps:          0       0       0       0
   458 ;;      Totals:         3       0       0       0
   459 ;;Total ram usage:        3 bytes
   460 ;; Hardware stack levels used:    1
   461 ;; This function calls:
   462 ;;		Nothing
   463 ;; This function is called by:
   464 ;;		_main
   465 ;; This function uses a non-reentrant model
   466 ;;
   467                           
   468                           
   469                           ;psect for function _Memory_Write
   470  0761                     _Memory_Write:	
   471                           
   472                           ;incstack = 0
   473                           ; Regs used in _Memory_Write: [wreg]
   474                           ;Memory_Write@Addr stored from wreg
   475  0761  00F8               	movwf	Memory_Write@Addr
   476                           
   477                           ;main.c: 100: EEADR = Addr;
   478  0762  1683               	bsf	3,5	;RP0=1, select bank1
   479  0763  1303               	bcf	3,6	;RP1=0, select bank1
   480  0764  0091               	movwf	17	;volatile
   481                           
   482                           ;main.c: 101: EEPGD = 0;
   483  0765  138D               	bcf	13,7	;volatile
   484                           
   485                           ;main.c: 103: EEDAT = Value & 0x00ff;
   486  0766  0876               	movf	Memory_Write@Value,w
   487  0767  008F               	movwf	15	;volatile
   488                           
   489                           ;main.c: 104: EEDATH = (Value & 0xff00)>>8;
   490  0768  0877               	movf	Memory_Write@Value+1,w
   491  0769  0090               	movwf	16	;volatile
   492                           
   493                           ;main.c: 106: WREN = 1;
   494  076A  150D               	bsf	13,2	;volatile
   495  076B                     l1330:	
   496                           
   497                           ;main.c: 109: while(GIE) GIE = 0;
   498                           
   499                           ;main.c: 107: GIE = 0;
   500  076B  138B               	bcf	11,7	;volatile
   501  076C  1F8B               	btfss	11,7	;volatile
   502  076D  2F71               	goto	l861
   503  076E  1683               	bsf	3,5	;RP0=1, select bank1
   504  076F  1303               	bcf	3,6	;RP1=0, select bank1
   505  0770  2F6B               	goto	l1330
   506  0771                     l861:	
   507  0771  0064               	clrwdt	;# 
   508                           
   509                           ;main.c: 113: EECON2 = 0x55;
   510  0772  3055               	movlw	85
   511  0773  1683               	bsf	3,5	;RP0=1, select bank1
   512  0774  1303               	bcf	3,6	;RP1=0, select bank1
   513  0775  008E               	movwf	14	;volatile
   514                           
   515                           ;main.c: 114: EECON2 = 0xaa;
   516  0776  30AA               	movlw	170
   517  0777  008E               	movwf	14	;volatile
   518                           
   519                           ;main.c: 115: WR = 1;
   520  0778  148D               	bsf	13,1	;volatile
   521  0779  0000               	nop	;# 
   522  077A  0000               	nop	;# 
   523                           
   524                           ;main.c: 118: WREN = 0;
   525  077B  1683               	bsf	3,5	;RP0=1, select bank1
   526  077C  1303               	bcf	3,6	;RP1=0, select bank1
   527  077D  110D               	bcf	13,2	;volatile
   528                           
   529                           ;main.c: 119: GIE = 1;
   530  077E  178B               	bsf	11,7	;volatile
   531  077F  0008               	return
   532  0780                     __end_of_Memory_Write:	
   533                           
   534                           	psect	text3
   535  0780                     __ptext3:	
   536 ;; *************** function _Memory_Read *****************
   537 ;; Defined at:
   538 ;;		line 131 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F083¿ª·¢°ü\SC8F083_DEMO_C\SC8F083_EEPRom_Demo\main.c"
   539 ;; Parameters:    Size  Location     Type
   540 ;;  Addr            1    wreg     unsigned char 
   541 ;; Auto vars:     Size  Location     Type
   542 ;;  Addr            1    2[COMMON] unsigned char 
   543 ;; Return value:  Size  Location     Type
   544 ;;                  1    wreg      void 
   545 ;; Registers used:
   546 ;;		wreg, btemp+1
   547 ;; Tracked objects:
   548 ;;		On entry : 300/100
   549 ;;		On exit  : 300/100
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   552 ;;      Params:         0       0       0       0
   553 ;;      Locals:         1       0       0       0
   554 ;;      Temps:          2       0       0       0
   555 ;;      Totals:         3       0       0       0
   556 ;;Total ram usage:        3 bytes
   557 ;; Hardware stack levels used:    1
   558 ;; This function calls:
   559 ;;		Nothing
   560 ;; This function is called by:
   561 ;;		_main
   562 ;; This function uses a non-reentrant model
   563 ;;
   564                           
   565                           
   566                           ;psect for function _Memory_Read
   567  0780                     _Memory_Read:	
   568                           
   569                           ;incstack = 0
   570                           ; Regs used in _Memory_Read: [wreg+btemp+1]
   571                           ;Memory_Read@Addr stored from wreg
   572  0780  00F8               	movwf	Memory_Read@Addr
   573                           
   574                           ;main.c: 134: EEADR = Addr;
   575  0781  0091               	movwf	17	;volatile
   576                           
   577                           ;main.c: 135: EEPGD = 0;
   578  0782  138D               	bcf	13,7	;volatile
   579                           
   580                           ;main.c: 137: RD = 1;
   581  0783  140D               	bsf	13,0	;volatile
   582  0784  0000               	nop	;# 
   583  0785  0000               	nop	;# 
   584                           
   585                           ;main.c: 141: read_data = EEDAT;
   586  0786  1683               	bsf	3,5	;RP0=1, select bank1
   587  0787  1303               	bcf	3,6	;RP1=0, select bank1
   588  0788  080F               	movf	15,w	;volatile
   589  0789  00F0               	movwf	_read_data	;volatile
   590  078A  01F1               	clrf	_read_data+1	;volatile
   591                           
   592                           ;main.c: 142: read_data = read_data | (int)(EEDATH<<8);
   593  078B  0810               	movf	16,w	;volatile
   594  078C  00F6               	movwf	??_Memory_Read
   595  078D  01F7               	clrf	??_Memory_Read+1
   596  078E  00F7               	movwf	??_Memory_Read+1
   597  078F  01F6               	clrf	??_Memory_Read
   598  0790  0876               	movf	??_Memory_Read,w
   599  0791  04F0               	iorwf	_read_data,f	;volatile
   600  0792  0877               	movf	??_Memory_Read+1,w
   601  0793  04F1               	iorwf	_read_data+1,f	;volatile
   602  0794  0008               	return
   603  0795                     __end_of_Memory_Read:	
   604  007E                     btemp	set	126	;btemp
   605  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      12
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Memory_Read
    _main->_Memory_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     257
                                              3 COMMON     2     2      0
                        _Memory_Read
                       _Memory_Write
                       _Program_Read
 ---------------------------------------------------------------------------------
 (1) _Program_Read                                         2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Memory_Write                                         3     1      2     120
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Memory_Read                                          3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Memory_Read
   _Memory_Write
   _Program_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0       C       8        0.0%
DATA                 0      0       C       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Nov 14 16:22:35 2023

                      _t 0072                       _RD 0468                       _WR 0469  
                    l843 0713                      l852 075F                      l861 0771  
                    l847 073A                      _GIE 005F                      _RA0 0430  
                    _RA1 0431                     l1330 076B                     l1370 073D  
                   l1354 0719                     l1364 0731                     l1376 0742  
                   l1386 0759                     _WREN 046A                     _data 0075  
                   _main 070D                     _tmp1 0700                     _tmp2 0701  
                   _tmp3 0702                     _tmp4 0703                     btemp 007E  
                   start 0000                    ?_main 0076                    _EEADR 0091  
                  _EEDAT 008F                    _EEPGD 046F                    _TRISA 0085  
          ??_Memory_Read 0076                    status 0003                    wtemp0 007E  
        __initialization 0704             __end_of_main 0761             __end_of_tmp1 0701  
           __end_of_tmp2 0702             __end_of_tmp3 0703             __end_of_tmp4 0704  
          ?_Memory_Write 0076                   ??_main 0079                   _EEADRH 0092  
                 _EEDATH 0090                   _EECON2 008E      __end_of_Memory_Read 0795  
          main@read_addr 0079           ??_Memory_Write 0078  __end_of__initialization 070A  
         __pcstackCOMMON 0076             __p_tmp1_text 0700             __p_tmp2_text 0701  
           __p_tmp3_text 0702             __p_tmp4_text 0703              _Memory_Read 0780  
             __pnvCOMMON 007B               __pmaintext 070D       Program_Read@P_Addr 0076  
          _read_rom_data 0074     __end_of_Memory_Write 0780                  _datanum 007B  
                __ptext1 0795                  __ptext2 0761                  __ptext3 0780  
          ?_Program_Read 0076     end_of_initialization 070A           ??_Program_Read 0078  
      Memory_Write@Value 0076      start_initialization 0704    __size_of_Memory_Write 001F  
           ?_Memory_Read 0076             _Memory_Write 0761              __pbssCOMMON 0070  
              ___latbits 0001     __end_of_Program_Read 07A3                __pstrings 0000  
              _read_data 0070         Memory_Write@Addr 0078             _tmp1_absaddr 0700  
           _tmp2_absaddr 0701     __size_of_Memory_Read 0015             _tmp3_absaddr 0702  
           _tmp4_absaddr 0703          Memory_Read@Addr 0078    __size_of_Program_Read 000E  
          __size_of_main 0054             _Program_Read 0795  
