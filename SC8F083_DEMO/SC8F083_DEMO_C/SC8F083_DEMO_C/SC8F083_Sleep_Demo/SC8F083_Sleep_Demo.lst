---- D:\资料\RISC\073-083sleep\SC8F083_Sleep_Demo\SC8F083_Sleep_Demo.c ----------------------------------------------------------------------
1:                /*-------------------------------------------
2:                
3:                程序名称：休眠模式及唤醒程序
4:                日期版本：2023/09/20 <V1.0>
5:                
6:                备注：WDT已被禁止，休眠模式下利用PORTA,PORTB电平变化唤醒 
7:                
8:                *本程序由 &应用支持部& 编写整理
9:                -------------------------------------------*/
10:               
11:               
12:               #include <sc.h>
13:               
14:               void DelayXms(unsigned char x);
15:               void Init_System();
16:               void Sleep_Mode();
17:               
18:               /***********************************************************
19:               函数名称：DelayXms
20:               函数功能：毫秒级非精准延时
21:               入口参数：x - 延时时间
22:               出口参数：
23:               备    注：
24:               ***********************************************************/
25:               void DelayXms(unsigned char x)
  0781    00F0    LD	0x70,A
26:               {
27:               	unsigned char i,j;
28:               	for(i=x;i>0;i--)
  0782    00F1    LD	0x71,A
  0783    0871    LD	A,0x71
  0784    1903    SZB	0x3,2
  0785    0008    RET
  0786    0064    CLRWDT
29:               	{
30:               		asm("clrwdt");
31:               		for(j=153;j>0;j--);
  0787    3099    LDIA	0x99
  0788    00F2    LD	0x72,A
  0789    0BF2    SZDECR	0x72
  078A    2F89    JP	0x789
  078B    03F1    DECR	0x71
  078C    2F83    JP	0x783
32:               	}
33:               }
34:               /***********************************************************
35:               main主函数
36:               ***********************************************************/
37:               void main()
38:               {
39:               	Init_System();
  078D    118A    CLRB	0xA,3
  078E    27DF    CALL	0x7DF
  078F    118A    CLRB	0xA,3
40:               	while(1)
41:               	{
42:               		RB6=1;
  0790    1303    CLRB	0x3,6
  0791    1706    SETB	0x6,6
43:               		DelayXms(100);
  0792    3064    LDIA	0x64
  0793    118A    CLRB	0xA,3
  0794    2781    CALL	0x781
  0795    118A    CLRB	0xA,3
44:               		RB6 = 0;
  0796    1283    CLRB	0x3,5
  0797    1303    CLRB	0x3,6
  0798    1306    CLRB	0x6,6
45:               		DelayXms(100);
  0799    3064    LDIA	0x64
  079A    118A    CLRB	0xA,3
  079B    2781    CALL	0x781
  079C    118A    CLRB	0xA,3
46:               		RB6=1;
  079D    1283    CLRB	0x3,5
  079E    1303    CLRB	0x3,6
  079F    1706    SETB	0x6,6
47:               		DelayXms(100);
  07A0    3064    LDIA	0x64
  07A1    118A    CLRB	0xA,3
  07A2    2781    CALL	0x781
  07A3    118A    CLRB	0xA,3
48:               		Sleep_Mode();
  07A4    118A    CLRB	0xA,3
  07A5    27A8    CALL	0x7A8
  07A6    118A    CLRB	0xA,3
  07A7    2F90    JP	0x790
49:               	}
50:               }
51:               
52:               
53:               /***********************************************
54:               函数名称：Sleep_Mode
55:               函数功能：进入休眠模式
56:               入口参数：无
57:               出口参数：无
58:               备注：
59:               ************************************************/
60:               void Sleep_Mode()
61:               {
62:               	INTCON = 0;		
  07A8    018B    CLR	0xB
63:               	
64:               	OPTION_REG = 0;
  07A9    1283    CLRB	0x3,5
  07AA    1303    CLRB	0x3,6
  07AB    0181    CLR	0x1
65:               
66:               	TRISA = 0B00000001; 		//关闭所有输出，RA0口做唤醒输入
  07AC    3001    LDIA	0x1
  07AD    1683    SETB	0x3,5
  07AE    0085    LD	0x5,A
67:               	PORTA = 0B00000000;
  07AF    0186    CLR	0x6
68:               	WPUA  = 0B00000001;			//RA0 开上拉电阻
  07B0    0088    LD	0x8,A
69:               	
70:               	TRISB = 0B00001000;			//关闭所有输出，RB3口做唤醒输入
  07B1    3008    LDIA	0x8
  07B2    1283    CLRB	0x3,5
  07B3    0085    LD	0x5,A
71:               	PORTB = 0B00000000;
  07B4    0186    CLR	0x6
72:               	WPUB  = 0B00001000;			//RB3 开上拉电阻
  07B5    0088    LD	0x8,A
73:                  		
74:               	TRISC = 0B00000000;
  07B6    1703    SETB	0x3,6
  07B7    0185    CLR	0x5
75:               	PORTC = 0B00000000;	
  07B8    0186    CLR	0x6
76:               			
77:                  	ADCON0 = 0;					//关闭所有模块
  07B9    1683    SETB	0x3,5
  07BA    1303    CLRB	0x3,6
  07BB    0195    CLR	0x15
78:               	ADCON1 = 0;
  07BC    0196    CLR	0x16
79:               	
80:               	PWMCON0 = 0;
  07BD    1283    CLRB	0x3,5
  07BE    0195    CLR	0x15
81:               		
82:               	OSCCON = 0X70;				//配置振荡为8M,关闭WDT，需注意芯片工程选项里WDT必须选为DISABLE,否则无法软件关掉WDT
  07BF    3070    LDIA	0x70
  07C0    0094    LD	0x14,A
83:               	
84:               	IOCA = 0B00000001;			//允许RA0的IO电平变化中断
  07C1    3001    LDIA	0x1
  07C2    1683    SETB	0x3,5
  07C3    0089    LD	0x9,A
85:               	IOCB = 0B00001000;			//允许RB3的IO口电平变化中断
  07C4    3008    LDIA	0x8
  07C5    1283    CLRB	0x3,5
  07C6    0089    LD	0x9,A
86:               	
87:               	RAIE = 1;					//允许PORTA的IO电平变化中断
  07C7    158E    SETB	0xE,3
88:               	PEIE = 1;					//要用RORTA中断唤醒，则PEIE必须设为1
  07C8    170B    SETB	0xB,6
89:               	RBIE = 1;					//允许PORTB电平变化中断
  07C9    158B    SETB	0xB,3
90:               	GIE = 0;					//唤醒后执行SLEEP后程序;
  07CA    138B    CLRB	0xB,7
91:               	
92:               
93:               	PORTA;						//读PORTA值并锁存,用电平变化中断必须执行这一步
  07CB    1683    SETB	0x3,5
  07CC    0806    LD	A,0x6
94:               	RAIF = 0;					//清PORTA中断标志位
  07CD    1283    CLRB	0x3,5
  07CE    118D    CLRB	0xD,3
95:               	PORTB;						//读PORTB值并锁存	
  07CF    0806    LD	A,0x6
96:               	RBIF = 0;					//清PORTB中断标志位		
  07D0    100B    CLRB	0xB,0
  07D1    0064    CLRWDT
  07D2    0063    STOP
  07D3    0000    NOP
  07D4    0064    CLRWDT
97:               	asm("clrwdt");
98:               
99:               	asm("sleep");				//进入休眠模式
100:              	
101:              	asm("nop");
102:              	asm("clrwdt");
103:              	if(RAIF)  RAIF = 0;			//清中断标志
  07D5    1283    CLRB	0x3,5
  07D6    1303    CLRB	0x3,6
  07D7    198D    SZB	0xD,3
  07D8    118D    CLRB	0xD,3
104:              	if(RBIF)  RBIF = 0;			//清中断标志
  07D9    180B    SZB	0xB,0
  07DA    100B    CLRB	0xB,0
105:              	PORTA ^= 0X08;
  07DB    3008    LDIA	0x8
  07DC    1683    SETB	0x3,5
  07DD    0686    XORR	0x6
106:              	Init_System();
  07DE    2FDF    JP	0x7DF
107:              }
108:              
109:              /***********************************************
110:              函数名称：Init_System
111:              函数功能：系统初始化
112:              入口参数：无
113:              出口参数：无
114:              备注：
115:              ************************************************/
116:              void Init_System()
  07DF    0000    NOP
  07E0    0064    CLRWDT
117:              {
118:              	asm("nop");
119:              	asm("clrwdt");
120:              	INTCON = 0;					//系统初始化
  07E1    018B    CLR	0xB
121:              	OSCCON = 0X72;				//配置振荡为8M,开 WDT
  07E2    3072    LDIA	0x72
  07E3    1283    CLRB	0x3,5
  07E4    1303    CLRB	0x3,6
  07E5    0094    LD	0x14,A
122:              	OPTION_REG = 0;
  07E6    0181    CLR	0x1
123:              	
124:                  WPUA  = 0B00000001;			//初始化上拉
  07E7    3001    LDIA	0x1
  07E8    1683    SETB	0x3,5
  07E9    0088    LD	0x8,A
125:                  WPUB  = 0B00001000;			
  07EA    3008    LDIA	0x8
  07EB    1283    CLRB	0x3,5
  07EC    0088    LD	0x8,A
126:              	WPUC  = 0B00000000;
  07ED    1703    SETB	0x3,6
  07EE    0188    CLR	0x8
127:               
128:              	TRISA = 0B00000001;			//初始化IO状态
  07EF    3001    LDIA	0x1
  07F0    1683    SETB	0x3,5
  07F1    1303    CLRB	0x3,6
  07F2    0085    LD	0x5,A
129:              	TRISB = 0B00001000;
  07F3    3008    LDIA	0x8
  07F4    1283    CLRB	0x3,5
  07F5    0085    LD	0x5,A
130:              	TRISC = 0B00000000; 
  07F6    1703    SETB	0x3,6
  07F7    0185    CLR	0x5
131:              
132:                 //PORTA = 0B00000000;         
133:              	PORTB = 0B00000000;			//初始化输出
  07F8    1303    CLRB	0x3,6
  07F9    0186    CLR	0x6
134:              	PORTC = 0B00000000;
  07FA    1703    SETB	0x3,6
  07FB    0186    CLR	0x6
  07FC    0008    RET
135:              }
136:              
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    2FFD    JP	0x7FD
---- start_initialization ------------------------------------------------------------------
---- interrupt_function_enter ----------------------------------------------------------
---- common_function ------------------------------------------------------------------
  07FD    0183    CLR	0x3
  07FE    118A    CLRB	0xA,3
  07FF    2F8D    JP	0x78D
