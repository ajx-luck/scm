

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sun Feb 18 17:28:50 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	pa_nodes0,global,class=CODE,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 1.45
    22                           ; Generated 16/11/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F887 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     
    56                           	psect	nvBANK0
    57  0048                     __pnvBANK0:	
    58  0048                     _test_adc:	
    59  0048                     	ds	1
    60  0014                     _OSCCON	set	20
    61  0013                     _T2CON	set	19
    62  0011                     _PR2	set	17
    63  000B                     _INTCON	set	11
    64  0008                     _WPUB	set	8
    65  0006                     _PORTB	set	6
    66  0005                     _TRISB	set	5
    67  0001                     _OPTION_REG	set	1
    68  0071                     _TMR2IE	set	113
    69  0069                     _TMR2IF	set	105
    70  002F                     _TRISB7	set	47
    71  0099                     _ADRESH	set	153
    72  0098                     _ADRESL	set	152
    73  0096                     _ADCON1	set	150
    74  0095                     _ADCON0	set	149
    75  0094                     _ANSEL1	set	148
    76  0088                     _WPUA	set	136
    77  0086                     _PORTA	set	134
    78  0085                     _TRISA	set	133
    79  04B2                     _LDO_EN	set	1202
    80  04B6                     _CHS4	set	1206
    81  04A9                     _GODONE	set	1193
    82  0108                     _WPUC	set	264
    83  0106                     _PORTC	set	262
    84  0105                     _TRISC	set	261
    85                           
    86                           	psect	cinit
    87  000D                     start_initialization:	
    88                           ; #config settings
    89                           
    90  000D                     __initialization:	
    91                           
    92                           ; Clear objects allocated to COMMON
    93  000D  01FA               	clrf	__pbssCOMMON& (0+127)
    94  000E  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
    95                           
    96                           ; Clear objects allocated to BANK0
    97  000F  1283               	bcf	3,5	;RP0=0, select bank0
    98  0010  1303               	bcf	3,6	;RP1=0, select bank0
    99  0011  01C4               	clrf	__pbssBANK0& (0+127)
   100  0012  01C5               	clrf	(__pbssBANK0+1)& (0+127)
   101  0013  01C6               	clrf	(__pbssBANK0+2)& (0+127)
   102  0014  01C7               	clrf	(__pbssBANK0+3)& (0+127)
   103  0015                     end_of_initialization:	
   104                           ;End of C runtime variable initialization code
   105                           
   106  0015                     __end_of__initialization:	
   107  0015  0183               	clrf	3
   108  0016  118A  29C1         	ljmp	_main	;jump to C main() function
   109                           
   110                           	psect	bssCOMMON
   111  007A                     __pbssCOMMON:	
   112  007A                     _result:	
   113  007A                     	ds	2
   114                           
   115                           	psect	bssBANK0
   116  0044                     __pbssBANK0:	
   117  0044                     _power_ad:	
   118  0044                     	ds	2
   119  0046                     _adresult:	
   120  0046                     	ds	2
   121                           
   122                           	psect	cstackCOMMON
   123  0070                     __pcstackCOMMON:	
   124  0070                     ?_Init_System:	
   125  0070                     ?_AD_Init:	
   126                           ; 1 bytes @ 0x0
   127                           
   128  0070                     ?_main:	
   129                           ; 1 bytes @ 0x0
   130                           
   131  0070                     ?_Isr_Timer:	
   132                           ; 1 bytes @ 0x0
   133                           
   134  0070                     ??_Isr_Timer:	
   135                           ; 1 bytes @ 0x0
   136                           
   137                           
   138                           ; 1 bytes @ 0x0
   139  0070                     	ds	2
   140  0072                     ??_Init_System:	
   141  0072                     ??_AD_Init:	
   142                           ; 1 bytes @ 0x2
   143                           
   144  0072                     ?_ADC_Sample:	
   145                           ; 1 bytes @ 0x2
   146                           
   147  0072                     ?___ftpack:	
   148                           ; 1 bytes @ 0x2
   149                           
   150  0072                     ADC_Sample@adldo:	
   151                           ; 3 bytes @ 0x2
   152                           
   153  0072                     ___ftpack@arg:	
   154                           ; 1 bytes @ 0x2
   155                           
   156                           
   157                           ; 3 bytes @ 0x2
   158  0072                     	ds	1
   159  0073                     ??_ADC_Sample:	
   160                           
   161                           ; 1 bytes @ 0x3
   162  0073                     	ds	2
   163  0075                     ___ftpack@exp:	
   164                           
   165                           ; 1 bytes @ 0x5
   166  0075                     	ds	1
   167  0076                     ___ftpack@sign:	
   168                           
   169                           ; 1 bytes @ 0x6
   170  0076                     	ds	1
   171  0077                     ??___ftpack:	
   172                           
   173                           ; 1 bytes @ 0x7
   174  0077                     	ds	3
   175  007A                     ??___lwtoft:	
   176                           
   177                           	psect	cstackBANK0
   178  0020                     __pcstackBANK0:	
   179                           ; 1 bytes @ 0xA
   180                           
   181  0020                     ?___lwtoft:	
   182  0020                     ADC_Sample@j:	
   183                           ; 3 bytes @ 0x0
   184                           
   185  0020                     ___lwtoft@c:	
   186                           ; 1 bytes @ 0x0
   187                           
   188                           
   189                           ; 2 bytes @ 0x0
   190  0020                     	ds	1
   191  0021                     ADC_Sample@adch:	
   192                           
   193                           ; 1 bytes @ 0x1
   194  0021                     	ds	1
   195  0022                     ADC_Sample@i:	
   196                           
   197                           ; 1 bytes @ 0x2
   198  0022                     	ds	1
   199  0023                     ?___ftdiv:	
   200  0023                     ___ftdiv@f2:	
   201                           ; 3 bytes @ 0x3
   202                           
   203  0023                     ADC_Sample@adsum:	
   204                           ; 3 bytes @ 0x3
   205                           
   206                           
   207                           ; 4 bytes @ 0x3
   208  0023                     	ds	3
   209  0026                     ___ftdiv@f1:	
   210                           
   211                           ; 3 bytes @ 0x6
   212  0026                     	ds	1
   213  0027                     ADC_Sample@admin:	
   214                           
   215                           ; 2 bytes @ 0x7
   216  0027                     	ds	2
   217  0029                     ??___ftdiv:	
   218  0029                     ADC_Sample@admax:	
   219                           ; 1 bytes @ 0x9
   220                           
   221                           
   222                           ; 2 bytes @ 0x9
   223  0029                     	ds	2
   224  002B                     ADC_Sample@ad_temp:	
   225                           
   226                           ; 2 bytes @ 0xB
   227  002B                     	ds	1
   228  002C                     ___ftdiv@cntr:	
   229                           
   230                           ; 1 bytes @ 0xC
   231  002C                     	ds	1
   232  002D                     ___ftdiv@f3:	
   233                           
   234                           ; 3 bytes @ 0xD
   235  002D                     	ds	3
   236  0030                     ___ftdiv@exp:	
   237                           
   238                           ; 1 bytes @ 0x10
   239  0030                     	ds	1
   240  0031                     ___ftdiv@sign:	
   241                           
   242                           ; 1 bytes @ 0x11
   243  0031                     	ds	1
   244  0032                     ?___fttol:	
   245  0032                     ___fttol@f1:	
   246                           ; 4 bytes @ 0x12
   247                           
   248                           
   249                           ; 3 bytes @ 0x12
   250  0032                     	ds	4
   251  0036                     ??___fttol:	
   252                           
   253                           ; 1 bytes @ 0x16
   254  0036                     	ds	3
   255  0039                     ___fttol@sign1:	
   256                           
   257                           ; 1 bytes @ 0x19
   258  0039                     	ds	1
   259  003A                     ___fttol@lval:	
   260                           
   261                           ; 4 bytes @ 0x1A
   262  003A                     	ds	4
   263  003E                     ___fttol@exp1:	
   264                           
   265                           ; 1 bytes @ 0x1E
   266  003E                     	ds	1
   267  003F                     ??_main:	
   268                           
   269                           ; 1 bytes @ 0x1F
   270  003F                     	ds	1
   271  0040                     main@power_temp:	
   272                           
   273                           ; 4 bytes @ 0x20
   274  0040                     	ds	4
   275                           
   276                           	psect	maintext
   277  01C1                     __pmaintext:	
   278 ;;
   279 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   280 ;;
   281 ;; *************** function _main *****************
   282 ;; Defined at:
   283 ;;		line 118 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F083¿ª·¢°ü\SC8F083_DEMO_C\SC8F083_ADC_Demo\SC8F083_ADC.c"
   284 ;; Parameters:    Size  Location     Type
   285 ;;		None
   286 ;; Auto vars:     Size  Location     Type
   287 ;;  power_temp      4   32[BANK0 ] volatile unsigned long 
   288 ;; Return value:  Size  Location     Type
   289 ;;                  1    wreg      void 
   290 ;; Registers used:
   291 ;;		wreg, status,2, status,0, pclath, cstack
   292 ;; Tracked objects:
   293 ;;		On entry : B00/0
   294 ;;		On exit  : 0/0
   295 ;;		Unchanged: 0/0
   296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   297 ;;      Params:         0       0       0       0
   298 ;;      Locals:         0       4       0       0
   299 ;;      Temps:          0       1       0       0
   300 ;;      Totals:         0       5       0       0
   301 ;;Total ram usage:        5 bytes
   302 ;; Hardware stack levels required when called:    3
   303 ;; This function calls:
   304 ;;		_ADC_Sample
   305 ;;		_AD_Init
   306 ;;		_Init_System
   307 ;;		___ftdiv
   308 ;;		___fttol
   309 ;;		___lwtoft
   310 ;; This function is called by:
   311 ;;		Startup code after reset
   312 ;; This function uses a non-reentrant model
   313 ;;
   314                           
   315                           
   316                           ;psect for function _main
   317  01C1                     _main:	
   318                           
   319                           ;SC8F083_ADC.c: 120: Init_System();
   320                           
   321                           ;incstack = 0
   322                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   323  01C1  118A  2282  118A   	fcall	_Init_System
   324                           
   325                           ;SC8F083_ADC.c: 121: AD_Init();
   326  01C4  118A  22B5  118A   	fcall	_AD_Init
   327  01C7                     l852:	
   328                           ;SC8F083_ADC.c: 123: while (1)
   329                           
   330  01C7  0064               	clrwdt	;# 
   331                           
   332                           ;SC8F083_ADC.c: 128: TRISB7 = 1;
   333  01C8  1283               	bcf	3,5	;RP0=0, select bank0
   334  01C9  1303               	bcf	3,6	;RP1=0, select bank0
   335  01CA  1785               	bsf	5,7	;volatile
   336                           
   337                           ;SC8F083_ADC.c: 129: ANSEL1 |= 0X80;
   338  01CB  1683               	bsf	3,5	;RP0=1, select bank1
   339  01CC  1794               	bsf	20,7	;volatile
   340                           
   341                           ;SC8F083_ADC.c: 130: test_adc = ADC_Sample(15, 7);
   342  01CD  3007               	movlw	7
   343  01CE  00F2               	movwf	ADC_Sample@adldo
   344  01CF  300F               	movlw	15
   345  01D0  118A  2018  118A   	fcall	_ADC_Sample
   346  01D3  00C8               	movwf	_test_adc	;volatile
   347                           
   348                           ;SC8F083_ADC.c: 131: if (0xA5 == test_adc)
   349  01D4  30A5               	movlw	165
   350  01D5  0648               	xorwf	_test_adc,w	;volatile
   351  01D6  1903               	btfsc	3,2
   352  01D7  29E2               	goto	l1745
   353                           
   354                           ;SC8F083_ADC.c: 135: else
   355                           ;SC8F083_ADC.c: 136: {
   356                           ;SC8F083_ADC.c: 137: ADCON0 = 0;
   357  01D8  1683               	bsf	3,5	;RP0=1, select bank1
   358  01D9  0195               	clrf	21	;volatile
   359                           
   360                           ;SC8F083_ADC.c: 138: ADCON1 = 0;
   361  01DA  0196               	clrf	22	;volatile
   362                           
   363                           ;SC8F083_ADC.c: 139: _delay((unsigned long)((100)*(16000000/4000000.0)));
   364  01DB  3084               	movlw	132
   365  01DC  1283               	bcf	3,5	;RP0=0, select bank0
   366  01DD  1303               	bcf	3,6	;RP1=0, select bank0
   367  01DE  00BF               	movwf	??_main
   368  01DF                     u787:	
   369  01DF  0BBF               	decfsz	??_main,f
   370  01E0  29DF               	goto	u787
   371  01E1  29E2               	nop2
   372  01E2                     l1745:	
   373  01E2  301F               	movlw	31
   374                           
   375                           ;SC8F083_ADC.c: 140: }
   376                           ;SC8F083_ADC.c: 142: test_adc = ADC_Sample(31, 0);
   377  01E3  01F2               	clrf	ADC_Sample@adldo
   378  01E4  118A  2018  118A   	fcall	_ADC_Sample
   379  01E7  00C8               	movwf	_test_adc	;volatile
   380                           
   381                           ;SC8F083_ADC.c: 143: if (0xA5 == test_adc)
   382  01E8  30A5               	movlw	165
   383  01E9  0648               	xorwf	_test_adc,w	;volatile
   384  01EA  1D03               	btfss	3,2
   385  01EB  2A17               	goto	l1753
   386                           
   387                           ;SC8F083_ADC.c: 144: {
   388                           ;SC8F083_ADC.c: 145: volatile unsigned long power_temp;
   389                           ;SC8F083_ADC.c: 147: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
   390  01EC  3096               	movlw	150
   391  01ED  01A6               	clrf	___ftdiv@f1
   392  01EE  00A7               	movwf	___ftdiv@f1+1
   393  01EF  304A               	movlw	74
   394  01F0  00A8               	movwf	___ftdiv@f1+2
   395  01F1  0847               	movf	_adresult+1,w	;volatile
   396  01F2  00A1               	movwf	___lwtoft@c+1
   397  01F3  0846               	movf	_adresult,w	;volatile
   398  01F4  00A0               	movwf	___lwtoft@c
   399  01F5  118A  2108  118A   	fcall	___lwtoft
   400  01F8  0820               	movf	?___lwtoft,w
   401  01F9  00A3               	movwf	___ftdiv@f2
   402  01FA  0821               	movf	?___lwtoft+1,w
   403  01FB  00A4               	movwf	___ftdiv@f2+1
   404  01FC  0822               	movf	?___lwtoft+2,w
   405  01FD  00A5               	movwf	___ftdiv@f2+2
   406  01FE  118A  2118  118A   	fcall	___ftdiv
   407  0201  0823               	movf	?___ftdiv,w
   408  0202  00B2               	movwf	___fttol@f1
   409  0203  0824               	movf	?___ftdiv+1,w
   410  0204  00B3               	movwf	___fttol@f1+1
   411  0205  0825               	movf	?___ftdiv+2,w
   412  0206  00B4               	movwf	___fttol@f1+2
   413  0207  118A  2222  118A   	fcall	___fttol
   414  020A  0835               	movf	?___fttol+3,w
   415  020B  00C3               	movwf	main@power_temp+3	;volatile
   416  020C  0834               	movf	?___fttol+2,w
   417  020D  00C2               	movwf	main@power_temp+2	;volatile
   418  020E  0833               	movf	?___fttol+1,w
   419  020F  00C1               	movwf	main@power_temp+1	;volatile
   420  0210  0832               	movf	?___fttol,w
   421  0211  00C0               	movwf	main@power_temp	;volatile
   422                           
   423                           ;SC8F083_ADC.c: 148: power_ad = (unsigned int)(power_temp);
   424  0212  0841               	movf	main@power_temp+1,w	;volatile
   425  0213  00C5               	movwf	_power_ad+1	;volatile
   426  0214  0840               	movf	main@power_temp,w	;volatile
   427  0215  00C4               	movwf	_power_ad	;volatile
   428                           
   429                           ;SC8F083_ADC.c: 149: }
   430  0216  29C7               	goto	l852
   431  0217                     l1753:	
   432                           
   433                           ;SC8F083_ADC.c: 150: else
   434                           ;SC8F083_ADC.c: 151: {
   435                           ;SC8F083_ADC.c: 152: ADCON0 = 0;
   436  0217  1683               	bsf	3,5	;RP0=1, select bank1
   437  0218  0195               	clrf	21	;volatile
   438                           
   439                           ;SC8F083_ADC.c: 153: ADCON1 = 0;
   440  0219  0196               	clrf	22	;volatile
   441                           
   442                           ;SC8F083_ADC.c: 154: _delay((unsigned long)((100)*(16000000/4000000.0)));
   443  021A  3084               	movlw	132
   444  021B  1283               	bcf	3,5	;RP0=0, select bank0
   445  021C  1303               	bcf	3,6	;RP1=0, select bank0
   446  021D  00BF               	movwf	??_main
   447  021E                     u797:	
   448  021E  0BBF               	decfsz	??_main,f
   449  021F  2A1E               	goto	u797
   450  0220  2A21               	nop2
   451  0221  29C7               	goto	l852
   452  0222                     __end_of_main:	
   453                           
   454                           	psect	text1
   455  0108                     __ptext1:	
   456 ;; *************** function ___lwtoft *****************
   457 ;; Defined at:
   458 ;;		line 28 in file "H:\MyDownloads\IDE_RAR\SCMCU_IDE_V2.00.15_Beta16\data\sources\common\lwtoft.c"
   459 ;; Parameters:    Size  Location     Type
   460 ;;  c               2    0[BANK0 ] unsigned int 
   461 ;; Auto vars:     Size  Location     Type
   462 ;;		None
   463 ;; Return value:  Size  Location     Type
   464 ;;                  3    0[BANK0 ] float 
   465 ;; Registers used:
   466 ;;		wreg, status,2, status,0, pclath, cstack
   467 ;; Tracked objects:
   468 ;;		On entry : 300/0
   469 ;;		On exit  : 300/0
   470 ;;		Unchanged: 0/0
   471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   472 ;;      Params:         0       3       0       0
   473 ;;      Locals:         0       0       0       0
   474 ;;      Temps:          0       0       0       0
   475 ;;      Totals:         0       3       0       0
   476 ;;Total ram usage:        3 bytes
   477 ;; Hardware stack levels used:    1
   478 ;; Hardware stack levels required when called:    2
   479 ;; This function calls:
   480 ;;		___ftpack
   481 ;; This function is called by:
   482 ;;		_main
   483 ;; This function uses a non-reentrant model
   484 ;;
   485                           
   486                           
   487                           ;psect for function ___lwtoft
   488  0108                     ___lwtoft:	
   489                           
   490                           ;incstack = 0
   491                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
   492  0108  0820               	movf	___lwtoft@c,w
   493  0109  00F2               	movwf	___ftpack@arg
   494  010A  0821               	movf	___lwtoft@c+1,w
   495  010B  00F3               	movwf	___ftpack@arg+1
   496  010C  308E               	movlw	142
   497  010D  01F4               	clrf	___ftpack@arg+2
   498  010E  00F5               	movwf	___ftpack@exp
   499  010F  01F6               	clrf	___ftpack@sign
   500  0110  217A               	fcall	___ftpack
   501  0111  0872               	movf	?___ftpack,w
   502  0112  00A0               	movwf	?___lwtoft
   503  0113  0873               	movf	?___ftpack+1,w
   504  0114  00A1               	movwf	?___lwtoft+1
   505  0115  0874               	movf	?___ftpack+2,w
   506  0116  00A2               	movwf	?___lwtoft+2
   507  0117  0008               	return
   508  0118                     __end_of___lwtoft:	
   509  0118                     __ptext3:	
   510 ;; *************** function ___ftdiv *****************
   511 ;; Defined at:
   512 ;;		line 56 in file "H:\MyDownloads\IDE_RAR\SCMCU_IDE_V2.00.15_Beta16\data\sources\common\ftdiv.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;  f2              3    3[BANK0 ] float 
   515 ;;  f1              3    6[BANK0 ] float 
   516 ;; Auto vars:     Size  Location     Type
   517 ;;  f3              3   13[BANK0 ] float 
   518 ;;  sign            1   17[BANK0 ] unsigned char 
   519 ;;  exp             1   16[BANK0 ] unsigned char 
   520 ;;  cntr            1   12[BANK0 ] unsigned char 
   521 ;; Return value:  Size  Location     Type
   522 ;;                  3    3[BANK0 ] float 
   523 ;; Registers used:
   524 ;;		wreg, status,2, status,0, pclath, cstack
   525 ;; Tracked objects:
   526 ;;		On entry : 300/0
   527 ;;		On exit  : 300/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   530 ;;      Params:         0       6       0       0
   531 ;;      Locals:         0       6       0       0
   532 ;;      Temps:          0       3       0       0
   533 ;;      Totals:         0      15       0       0
   534 ;;Total ram usage:       15 bytes
   535 ;; Hardware stack levels used:    1
   536 ;; Hardware stack levels required when called:    2
   537 ;; This function calls:
   538 ;;		___ftpack
   539 ;; This function is called by:
   540 ;;		_main
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           
   545                           ;psect for function ___ftdiv
   546  0118                     ___ftdiv:	
   547                           
   548                           ;incstack = 0
   549                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
   550  0118  0826               	movf	___ftdiv@f1,w
   551  0119  00A9               	movwf	??___ftdiv
   552  011A  0827               	movf	___ftdiv@f1+1,w
   553  011B  00AA               	movwf	??___ftdiv+1
   554  011C  0828               	movf	___ftdiv@f1+2,w
   555  011D  00AB               	movwf	??___ftdiv+2
   556  011E  1003               	clrc
   557  011F  0D2A               	rlf	??___ftdiv+1,w
   558  0120  0D2B               	rlf	??___ftdiv+2,w
   559  0121  00B0               	movwf	___ftdiv@exp
   560  0122  0830               	movf	___ftdiv@exp,w
   561  0123  1D03               	btfss	3,2
   562  0124  2926               	goto	l1625
   563  0125  29BD               	ljmp	PL12	;call to abstracted procedure
   564  0126                     l1625:	
   565  0126  0823               	movf	___ftdiv@f2,w
   566  0127  00A9               	movwf	??___ftdiv
   567  0128  0824               	movf	___ftdiv@f2+1,w
   568  0129  00AA               	movwf	??___ftdiv+1
   569  012A  0825               	movf	___ftdiv@f2+2,w
   570  012B  00AB               	movwf	??___ftdiv+2
   571  012C  1003               	clrc
   572  012D  0D2A               	rlf	??___ftdiv+1,w
   573  012E  0D2B               	rlf	??___ftdiv+2,w
   574  012F  00B1               	movwf	___ftdiv@sign
   575  0130  0831               	movf	___ftdiv@sign,w
   576  0131  1D03               	btfss	3,2
   577  0132  2934               	goto	l1085
   578  0133  29BD               	ljmp	PL12	;call to abstracted procedure
   579  0134                     l1085:	
   580  0134  3089               	movlw	137
   581  0135  01AD               	clrf	___ftdiv@f3
   582  0136  01AE               	clrf	___ftdiv@f3+1
   583  0137  01AF               	clrf	___ftdiv@f3+2
   584  0138  0731               	addwf	___ftdiv@sign,w
   585  0139  00A9               	movwf	??___ftdiv
   586  013A  02B0               	subwf	___ftdiv@exp,f
   587  013B  0828               	movf	___ftdiv@f1+2,w
   588  013C  00B1               	movwf	___ftdiv@sign
   589  013D  0825               	movf	___ftdiv@f2+2,w
   590  013E  06B1               	xorwf	___ftdiv@sign,f
   591  013F  3080               	movlw	128
   592  0140  05B1               	andwf	___ftdiv@sign,f
   593  0141  3018               	movlw	24
   594  0142  17A7               	bsf	___ftdiv@f1+1,7
   595  0143  01A8               	clrf	___ftdiv@f1+2
   596  0144  17A4               	bsf	___ftdiv@f2+1,7
   597  0145  01A5               	clrf	___ftdiv@f2+2
   598  0146  00AC               	movwf	___ftdiv@cntr
   599  0147                     l1647:	
   600  0147  1003               	clrc
   601  0148  0DAD               	rlf	___ftdiv@f3,f
   602  0149  0DAE               	rlf	___ftdiv@f3+1,f
   603  014A  0DAF               	rlf	___ftdiv@f3+2,f
   604  014B  0825               	movf	___ftdiv@f2+2,w
   605  014C  0228               	subwf	___ftdiv@f1+2,w
   606  014D  1D03               	skipz
   607  014E  2955               	goto	u645
   608  014F  0824               	movf	___ftdiv@f2+1,w
   609  0150  0227               	subwf	___ftdiv@f1+1,w
   610  0151  1D03               	skipz
   611  0152  2955               	goto	u645
   612  0153  0823               	movf	___ftdiv@f2,w
   613  0154  0226               	subwf	___ftdiv@f1,w
   614  0155                     u645:	
   615  0155  1C03               	skipc
   616  0156  2963               	goto	L1
   617  0157  0823               	movf	___ftdiv@f2,w
   618  0158  02A6               	subwf	___ftdiv@f1,f
   619  0159  0824               	movf	___ftdiv@f2+1,w
   620  015A  1C03               	skipc
   621  015B  0F24               	incfsz	___ftdiv@f2+1,w
   622  015C  02A7               	subwf	___ftdiv@f1+1,f
   623  015D  0825               	movf	___ftdiv@f2+2,w
   624  015E  1C03               	skipc
   625  015F  0A25               	incf	___ftdiv@f2+2,w
   626  0160  02A8               	subwf	___ftdiv@f1+2,f
   627  0161  142D               	bsf	___ftdiv@f3,0
   628  0162  1003               	clrc
   629  0163                     L1:	
   630  0163  0DA6               	rlf	___ftdiv@f1,f
   631  0164  0DA7               	rlf	___ftdiv@f1+1,f
   632  0165  0DA8               	rlf	___ftdiv@f1+2,f
   633  0166  0BAC               	decfsz	___ftdiv@cntr,f
   634  0167  2947               	goto	l1647
   635  0168  082D               	movf	___ftdiv@f3,w
   636  0169  00F2               	movwf	___ftpack@arg
   637  016A  082E               	movf	___ftdiv@f3+1,w
   638  016B  00F3               	movwf	___ftpack@arg+1
   639  016C  082F               	movf	___ftdiv@f3+2,w
   640  016D  00F4               	movwf	___ftpack@arg+2
   641  016E  0830               	movf	___ftdiv@exp,w
   642  016F  00F5               	movwf	___ftpack@exp
   643  0170  0831               	movf	___ftdiv@sign,w
   644  0171  00F6               	movwf	___ftpack@sign
   645  0172  217A               	fcall	___ftpack
   646  0173  0872               	movf	?___ftpack,w
   647  0174  00A3               	movwf	?___ftdiv
   648  0175  0873               	movf	?___ftpack+1,w
   649  0176  00A4               	movwf	?___ftdiv+1
   650  0177  0874               	movf	?___ftpack+2,w
   651  0178  00A5               	movwf	?___ftdiv+2
   652  0179  0008               	return
   653  017A                     __end_of___ftdiv:	
   654  017A                     __ptext4:	
   655 ;; *************** function ___ftpack *****************
   656 ;; Defined at:
   657 ;;		line 62 in file "H:\MyDownloads\IDE_RAR\SCMCU_IDE_V2.00.15_Beta16\data\sources\common\float.c"
   658 ;; Parameters:    Size  Location     Type
   659 ;;  arg             3    2[COMMON] unsigned um
   660 ;;  exp             1    5[COMMON] unsigned char 
   661 ;;  sign            1    6[COMMON] unsigned char 
   662 ;; Auto vars:     Size  Location     Type
   663 ;;		None
   664 ;; Return value:  Size  Location     Type
   665 ;;                  3    2[COMMON] float 
   666 ;; Registers used:
   667 ;;		wreg, status,2, status,0
   668 ;; Tracked objects:
   669 ;;		On entry : 300/0
   670 ;;		On exit  : 300/0
   671 ;;		Unchanged: 300/0
   672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   673 ;;      Params:         5       0       0       0
   674 ;;      Locals:         0       0       0       0
   675 ;;      Temps:          3       0       0       0
   676 ;;      Totals:         8       0       0       0
   677 ;;Total ram usage:        8 bytes
   678 ;; Hardware stack levels used:    1
   679 ;; Hardware stack levels required when called:    1
   680 ;; This function calls:
   681 ;;		Nothing
   682 ;; This function is called by:
   683 ;;		___ftdiv
   684 ;;		___lwtoft
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           
   689                           ;psect for function ___ftpack
   690  017A                     ___ftpack:	
   691                           
   692                           ;incstack = 0
   693                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
   694  017A  0875               	movf	___ftpack@exp,w
   695  017B  1903               	btfsc	3,2
   696  017C  2982               	goto	l1031
   697  017D  0874               	movf	___ftpack@arg+2,w
   698  017E  0473               	iorwf	___ftpack@arg+1,w
   699  017F  0472               	iorwf	___ftpack@arg,w
   700  0180  1D03               	skipz
   701  0181  2989               	goto	l1499
   702  0182                     l1031:	
   703  0182  01F2               	clrf	?___ftpack
   704  0183  01F3               	clrf	?___ftpack+1
   705  0184  01F4               	clrf	?___ftpack+2
   706  0185  0008               	return
   707  0186                     l1497:	
   708  0186  0AF5               	incf	___ftpack@exp,f
   709  0187  21B8  118A         	fcall	PL8	;call to abstracted procedure
   710  0189                     l1499:	
   711  0189  30FE               	movlw	254
   712  018A  0574               	andwf	___ftpack@arg+2,w
   713  018B  1903               	btfsc	3,2
   714  018C  2996               	goto	l1503
   715  018D  2986               	goto	l1497
   716  018E                     l1501:	
   717  018E  0AF5               	incf	___ftpack@exp,f
   718  018F  0AF2               	incf	___ftpack@arg,f
   719  0190  1903               	skipnz
   720  0191  0AF3               	incf	___ftpack@arg+1,f
   721  0192  1903               	skipnz
   722  0193  0AF4               	incf	___ftpack@arg+2,f
   723  0194  21B8  118A         	fcall	PL8	;call to abstracted procedure
   724  0196                     l1503:	
   725  0196  30FF               	movlw	255
   726  0197  0574               	andwf	___ftpack@arg+2,w
   727  0198  1903               	btfsc	3,2
   728  0199  29A4               	goto	l1507
   729  019A  298E               	goto	l1501
   730  019B                     l1509:	
   731  019B  3002               	movlw	2
   732  019C  0275               	subwf	___ftpack@exp,w
   733  019D  1C03               	btfss	3,0
   734  019E  29A6               	goto	l1043
   735  019F  03F5               	decf	___ftpack@exp,f
   736  01A0  1003               	clrc
   737  01A1  0DF2               	rlf	___ftpack@arg,f
   738  01A2  0DF3               	rlf	___ftpack@arg+1,f
   739  01A3  0DF4               	rlf	___ftpack@arg+2,f
   740  01A4                     l1507:	
   741  01A4  1FF3               	btfss	___ftpack@arg+1,7
   742  01A5  299B               	goto	l1509
   743  01A6                     l1043:	
   744  01A6  1C75               	btfss	___ftpack@exp,0
   745  01A7  13F3               	bcf	___ftpack@arg+1,7
   746  01A8  1003               	clrc
   747  01A9  0CF5               	rrf	___ftpack@exp,f
   748  01AA  0875               	movf	___ftpack@exp,w
   749  01AB  00F9               	movwf	??___ftpack+2
   750  01AC  01F8               	clrf	??___ftpack+1
   751  01AD  01F7               	clrf	??___ftpack
   752  01AE  0877               	movf	??___ftpack,w
   753  01AF  04F2               	iorwf	___ftpack@arg,f
   754  01B0  0878               	movf	??___ftpack+1,w
   755  01B1  04F3               	iorwf	___ftpack@arg+1,f
   756  01B2  0879               	movf	??___ftpack+2,w
   757  01B3  04F4               	iorwf	___ftpack@arg+2,f
   758  01B4  0876               	movf	___ftpack@sign,w
   759  01B5  1D03               	btfss	3,2
   760  01B6  17F4               	bsf	___ftpack@arg+2,7
   761  01B7  0008               	return
   762  01B8                     __end_of___ftpack:	
   763  01B8                     PL8:	
   764  01B8  1003               	clrc
   765  01B9  0CF4               	rrf	___ftpack@arg+2,f
   766  01BA  0CF3               	rrf	___ftpack@arg+1,f
   767  01BB  0CF2               	rrf	___ftpack@arg,f
   768  01BC  0008               	return
   769  01BD                     __end_ofPL8:	
   770  01BD                     PL12:	
   771  01BD  01A3               	clrf	?___ftdiv
   772  01BE  01A4               	clrf	?___ftdiv+1
   773  01BF  01A5               	clrf	?___ftdiv+2
   774  01C0  0008               	return
   775  01C1                     __end_ofPL12:	
   776                           
   777                           	psect	text2
   778  0222                     __ptext2:	
   779 ;; *************** function ___fttol *****************
   780 ;; Defined at:
   781 ;;		line 44 in file "H:\MyDownloads\IDE_RAR\SCMCU_IDE_V2.00.15_Beta16\data\sources\common\fttol.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;  f1              3   18[BANK0 ] float 
   784 ;; Auto vars:     Size  Location     Type
   785 ;;  lval            4   26[BANK0 ] unsigned long 
   786 ;;  exp1            1   30[BANK0 ] unsigned char 
   787 ;;  sign1           1   25[BANK0 ] unsigned char 
   788 ;; Return value:  Size  Location     Type
   789 ;;                  4   18[BANK0 ] long 
   790 ;; Registers used:
   791 ;;		wreg, status,2, status,0
   792 ;; Tracked objects:
   793 ;;		On entry : 300/0
   794 ;;		On exit  : 300/0
   795 ;;		Unchanged: 0/0
   796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   797 ;;      Params:         0       4       0       0
   798 ;;      Locals:         0       6       0       0
   799 ;;      Temps:          0       3       0       0
   800 ;;      Totals:         0      13       0       0
   801 ;;Total ram usage:       13 bytes
   802 ;; Hardware stack levels used:    1
   803 ;; Hardware stack levels required when called:    1
   804 ;; This function calls:
   805 ;;		Nothing
   806 ;; This function is called by:
   807 ;;		_main
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811                           
   812                           ;psect for function ___fttol
   813  0222                     ___fttol:	
   814                           
   815                           ;incstack = 0
   816                           ; Regs used in ___fttol: [wreg+status,2+status,0]
   817  0222  227B  118A         	fcall	PL6	;call to abstracted procedure
   818  0224  1003               	clrc
   819  0225  0D37               	rlf	??___fttol+1,w
   820  0226  0D38               	rlf	??___fttol+2,w
   821  0227  00BE               	movwf	___fttol@exp1
   822  0228  083E               	movf	___fttol@exp1,w
   823  0229  1D03               	btfss	3,2
   824  022A  2A30               	goto	l1665
   825  022B                     l1663:	
   826  022B  01B2               	clrf	?___fttol
   827  022C  01B3               	clrf	?___fttol+1
   828  022D  01B4               	clrf	?___fttol+2
   829  022E  01B5               	clrf	?___fttol+3
   830  022F  0008               	return
   831  0230                     l1665:	
   832  0230  227B  118A         	fcall	PL6	;call to abstracted procedure
   833  0232  3017               	movlw	23
   834  0233                     u675:	
   835  0233  1003               	clrc
   836  0234  0CB8               	rrf	??___fttol+2,f
   837  0235  0CB7               	rrf	??___fttol+1,f
   838  0236  0CB6               	rrf	??___fttol,f
   839  0237  3EFF               	addlw	-1
   840  0238  1D03               	skipz
   841  0239  2A33               	goto	u675
   842  023A  0836               	movf	??___fttol,w
   843  023B  00B9               	movwf	___fttol@sign1
   844  023C  17B3               	bsf	___fttol@f1+1,7
   845  023D  01B4               	clrf	___fttol@f1+2
   846  023E  0832               	movf	___fttol@f1,w
   847  023F  00BA               	movwf	___fttol@lval
   848  0240  0833               	movf	___fttol@f1+1,w
   849  0241  00BB               	movwf	___fttol@lval+1
   850  0242  0834               	movf	___fttol@f1+2,w
   851  0243  00BC               	movwf	___fttol@lval+2
   852  0244  308E               	movlw	142
   853  0245  01BD               	clrf	___fttol@lval+3
   854  0246  02BE               	subwf	___fttol@exp1,f
   855  0247  1FBE               	btfss	___fttol@exp1,7
   856  0248  2A56               	goto	l1685
   857  0249  083E               	movf	___fttol@exp1,w
   858  024A  3A80               	xorlw	128
   859  024B  3E8F               	addlw	143
   860  024C  1C03               	btfss	3,0
   861  024D  2A2B               	goto	l1663
   862  024E                     l1681:	
   863  024E  1003               	clrc
   864  024F  0CBD               	rrf	___fttol@lval+3,f
   865  0250  0CBC               	rrf	___fttol@lval+2,f
   866  0251  0CBB               	rrf	___fttol@lval+1,f
   867  0252  0CBA               	rrf	___fttol@lval,f
   868  0253  0FBE               	incfsz	___fttol@exp1,f
   869  0254  2A4E               	goto	l1681
   870  0255  2A64               	goto	l1693
   871  0256                     l1685:	
   872  0256  3018               	movlw	24
   873  0257  023E               	subwf	___fttol@exp1,w
   874  0258  1803               	btfsc	3,0
   875  0259  2A2B               	goto	l1663
   876  025A                     l1691:	
   877  025A  083E               	movf	___fttol@exp1,w
   878  025B  1903               	btfsc	3,2
   879  025C  2A64               	goto	l1693
   880  025D  1003               	clrc
   881  025E  0DBA               	rlf	___fttol@lval,f
   882  025F  0DBB               	rlf	___fttol@lval+1,f
   883  0260  0DBC               	rlf	___fttol@lval+2,f
   884  0261  0DBD               	rlf	___fttol@lval+3,f
   885  0262  03BE               	decf	___fttol@exp1,f
   886  0263  2A5A               	goto	l1691
   887  0264                     l1693:	
   888  0264  0839               	movf	___fttol@sign1,w
   889  0265  1903               	btfsc	3,2
   890  0266  2A72               	goto	l1697
   891  0267  09BA               	comf	___fttol@lval,f
   892  0268  09BB               	comf	___fttol@lval+1,f
   893  0269  09BC               	comf	___fttol@lval+2,f
   894  026A  09BD               	comf	___fttol@lval+3,f
   895  026B  0ABA               	incf	___fttol@lval,f
   896  026C  1903               	skipnz
   897  026D  0ABB               	incf	___fttol@lval+1,f
   898  026E  1903               	skipnz
   899  026F  0ABC               	incf	___fttol@lval+2,f
   900  0270  1903               	skipnz
   901  0271  0ABD               	incf	___fttol@lval+3,f
   902  0272                     l1697:	
   903  0272  083D               	movf	___fttol@lval+3,w
   904  0273  00B5               	movwf	?___fttol+3
   905  0274  083C               	movf	___fttol@lval+2,w
   906  0275  00B4               	movwf	?___fttol+2
   907  0276  083B               	movf	___fttol@lval+1,w
   908  0277  00B3               	movwf	?___fttol+1
   909  0278  083A               	movf	___fttol@lval,w
   910  0279  00B2               	movwf	?___fttol
   911  027A  0008               	return
   912  027B                     __end_of___fttol:	
   913  027B                     PL6:	
   914  027B  0832               	movf	___fttol@f1,w
   915  027C  00B6               	movwf	??___fttol
   916  027D  0833               	movf	___fttol@f1+1,w
   917  027E  00B7               	movwf	??___fttol+1
   918  027F  0834               	movf	___fttol@f1+2,w
   919  0280  00B8               	movwf	??___fttol+2
   920  0281  0008               	return
   921  0282                     __end_ofPL6:	
   922                           
   923                           	psect	text5
   924  0282                     __ptext5:	
   925 ;; *************** function _Init_System *****************
   926 ;; Defined at:
   927 ;;		line 168 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F083¿ª·¢°ü\SC8F083_DEMO_C\SC8F083_ADC_Demo\SC8F083_ADC.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;		None
   930 ;; Auto vars:     Size  Location     Type
   931 ;;		None
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      void 
   934 ;; Registers used:
   935 ;;		wreg, status,2
   936 ;; Tracked objects:
   937 ;;		On entry : B00/0
   938 ;;		On exit  : 300/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   941 ;;      Params:         0       0       0       0
   942 ;;      Locals:         0       0       0       0
   943 ;;      Temps:          0       0       0       0
   944 ;;      Totals:         0       0       0       0
   945 ;;Total ram usage:        0 bytes
   946 ;; Hardware stack levels used:    1
   947 ;; Hardware stack levels required when called:    1
   948 ;; This function calls:
   949 ;;		Nothing
   950 ;; This function is called by:
   951 ;;		_main
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           
   956                           ;psect for function _Init_System
   957  0282                     _Init_System:	
   958                           
   959                           ;incstack = 0
   960                           ; Regs used in _Init_System: [wreg+status,2]
   961  0282  0000               	nop	;# 
   962  0283  0064               	clrwdt	;# 
   963                           
   964                           ;SC8F083_ADC.c: 172: OPTION_REG = 0;
   965  0284  1283               	bcf	3,5	;RP0=0, select bank0
   966  0285  1303               	bcf	3,6	;RP1=0, select bank0
   967  0286  0181               	clrf	1	;volatile
   968  0287  0064               	clrwdt	;# 
   969                           
   970                           ;SC8F083_ADC.c: 174: OSCCON = 0X70;
   971  0288  3070               	movlw	112
   972  0289  1283               	bcf	3,5	;RP0=0, select bank0
   973  028A  1303               	bcf	3,6	;RP1=0, select bank0
   974  028B  0094               	movwf	20	;volatile
   975                           
   976                           ;SC8F083_ADC.c: 176: WPUA = 0B00000000;
   977  028C  1683               	bsf	3,5	;RP0=1, select bank1
   978  028D  0188               	clrf	8	;volatile
   979                           
   980                           ;SC8F083_ADC.c: 177: WPUB = 0B00000000;
   981  028E  1283               	bcf	3,5	;RP0=0, select bank0
   982  028F  0188               	clrf	8	;volatile
   983                           
   984                           ;SC8F083_ADC.c: 178: WPUC = 0B00000000;
   985  0290  1703               	bsf	3,6	;RP1=1, select bank2
   986  0291  0188               	clrf	8	;volatile
   987                           
   988                           ;SC8F083_ADC.c: 180: TRISA = 0B00000000;
   989  0292  1683               	bsf	3,5	;RP0=1, select bank1
   990  0293  1303               	bcf	3,6	;RP1=0, select bank1
   991  0294  0185               	clrf	5	;volatile
   992                           
   993                           ;SC8F083_ADC.c: 181: TRISB = 0B00000000;
   994  0295  1283               	bcf	3,5	;RP0=0, select bank0
   995  0296  0185               	clrf	5	;volatile
   996                           
   997                           ;SC8F083_ADC.c: 182: TRISC = 0B00000000;
   998  0297  1703               	bsf	3,6	;RP1=1, select bank2
   999  0298  0185               	clrf	5	;volatile
  1000                           
  1001                           ;SC8F083_ADC.c: 184: PORTA = 0B00000000;
  1002  0299  1683               	bsf	3,5	;RP0=1, select bank1
  1003  029A  1303               	bcf	3,6	;RP1=0, select bank1
  1004  029B  0186               	clrf	6	;volatile
  1005                           
  1006                           ;SC8F083_ADC.c: 185: PORTB = 0B00000000;
  1007  029C  1283               	bcf	3,5	;RP0=0, select bank0
  1008  029D  0186               	clrf	6	;volatile
  1009                           
  1010                           ;SC8F083_ADC.c: 186: PORTC = 0B00000000;
  1011  029E  1703               	bsf	3,6	;RP1=1, select bank2
  1012  029F  0186               	clrf	6	;volatile
  1013                           
  1014                           ;SC8F083_ADC.c: 190: PR2 = 249;
  1015  02A0  30F9               	movlw	249
  1016  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  1017  02A2  0091               	movwf	17	;volatile
  1018                           
  1019                           ;SC8F083_ADC.c: 191: TMR2IF = 0;
  1020  02A3  108D               	bcf	13,1	;volatile
  1021                           
  1022                           ;SC8F083_ADC.c: 192: TMR2IE = 1;
  1023  02A4  148E               	bsf	14,1	;volatile
  1024                           
  1025                           ;SC8F083_ADC.c: 194: T2CON = 0B00000100;
  1026  02A5  3004               	movlw	4
  1027  02A6  0093               	movwf	19	;volatile
  1028                           
  1029                           ;SC8F083_ADC.c: 195: INTCON = 0XC0;
  1030  02A7  30C0               	movlw	192
  1031  02A8  008B               	movwf	11	;volatile
  1032  02A9  0008               	return
  1033  02AA                     __end_of_Init_System:	
  1034                           
  1035                           	psect	text6
  1036  02B5                     __ptext6:	
  1037 ;; *************** function _AD_Init *****************
  1038 ;; Defined at:
  1039 ;;		line 226 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F083¿ª·¢°ü\SC8F083_DEMO_C\SC8F083_ADC_Demo\SC8F083_ADC.c"
  1040 ;; Parameters:    Size  Location     Type
  1041 ;;		None
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;		None
  1044 ;; Return value:  Size  Location     Type
  1045 ;;                  1    wreg      void 
  1046 ;; Registers used:
  1047 ;;		wreg, status,2
  1048 ;; Tracked objects:
  1049 ;;		On entry : 300/0
  1050 ;;		On exit  : 300/100
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1053 ;;      Params:         0       0       0       0
  1054 ;;      Locals:         0       0       0       0
  1055 ;;      Temps:          0       0       0       0
  1056 ;;      Totals:         0       0       0       0
  1057 ;;Total ram usage:        0 bytes
  1058 ;; Hardware stack levels used:    1
  1059 ;; Hardware stack levels required when called:    1
  1060 ;; This function calls:
  1061 ;;		Nothing
  1062 ;; This function is called by:
  1063 ;;		_main
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           
  1068                           ;psect for function _AD_Init
  1069  02B5                     _AD_Init:	
  1070                           
  1071                           ;SC8F083_ADC.c: 259: ADCON0 = 0X41;
  1072                           
  1073                           ;incstack = 0
  1074                           ; Regs used in _AD_Init: [wreg+status,2]
  1075  02B5  3041               	movlw	65
  1076  02B6  1683               	bsf	3,5	;RP0=1, select bank1
  1077  02B7  0095               	movwf	21	;volatile
  1078                           
  1079                           ;SC8F083_ADC.c: 276: ADCON1 = 0;
  1080  02B8  0196               	clrf	22	;volatile
  1081  02B9  0008               	return
  1082  02BA                     __end_of_AD_Init:	
  1083                           
  1084                           	psect	text7
  1085  0018                     __ptext7:	
  1086 ;; *************** function _ADC_Sample *****************
  1087 ;; Defined at:
  1088 ;;		line 46 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F083¿ª·¢°ü\SC8F083_DEMO_C\SC8F083_ADC_Demo\SC8F083_ADC.c"
  1089 ;; Parameters:    Size  Location     Type
  1090 ;;  adch            1    wreg     unsigned char 
  1091 ;;  adldo           1    2[COMMON] unsigned char 
  1092 ;; Auto vars:     Size  Location     Type
  1093 ;;  adch            1    1[BANK0 ] unsigned char 
  1094 ;;  j               1    0[BANK0 ] unsigned char 
  1095 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1096 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1097 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1098 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1099 ;;  i               1    2[BANK0 ] unsigned char 
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  1    wreg      unsigned char 
  1102 ;; Registers used:
  1103 ;;		wreg, status,2, status,0
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/100
  1106 ;;		On exit  : 300/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1109 ;;      Params:         1       0       0       0
  1110 ;;      Locals:         0      13       0       0
  1111 ;;      Temps:          4       0       0       0
  1112 ;;      Totals:         5      13       0       0
  1113 ;;Total ram usage:       18 bytes
  1114 ;; Hardware stack levels used:    1
  1115 ;; Hardware stack levels required when called:    1
  1116 ;; This function calls:
  1117 ;;		Nothing
  1118 ;; This function is called by:
  1119 ;;		_main
  1120 ;; This function uses a non-reentrant model
  1121 ;;
  1122                           
  1123                           
  1124                           ;psect for function _ADC_Sample
  1125  0018                     _ADC_Sample:	
  1126                           
  1127                           ;incstack = 0
  1128                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1129                           ;ADC_Sample@adch stored from wreg
  1130  0018  1283               	bcf	3,5	;RP0=0, select bank0
  1131  0019  1303               	bcf	3,6	;RP1=0, select bank0
  1132  001A  00A1               	movwf	ADC_Sample@adch
  1133                           
  1134                           ;SC8F083_ADC.c: 48: volatile unsigned long adsum = 0;
  1135                           
  1136                           ;SC8F083_ADC.c: 49: volatile unsigned int admin = 0, admax = 0;
  1137  001B  20FA  118A         	fcall	PL4	;call to abstracted procedure
  1138                           
  1139                           ;SC8F083_ADC.c: 50: volatile unsigned int ad_temp = 0;
  1140  001D  01AB               	clrf	ADC_Sample@ad_temp	;volatile
  1141  001E  01AC               	clrf	ADC_Sample@ad_temp+1	;volatile
  1142                           
  1143                           ;SC8F083_ADC.c: 52: if ((!LDO_EN) && (adldo & 0x04) )
  1144  001F  1683               	bsf	3,5	;RP0=1, select bank1
  1145  0020  1D16               	btfss	22,2	;volatile
  1146  0021  1D72               	btfss	ADC_Sample@adldo,2
  1147  0022  282A               	goto	l1527
  1148                           
  1149                           ;SC8F083_ADC.c: 53: {
  1150                           ;SC8F083_ADC.c: 55: ADCON1 = adldo;
  1151  0023  0872               	movf	ADC_Sample@adldo,w
  1152  0024  0096               	movwf	22	;volatile
  1153                           
  1154                           ;SC8F083_ADC.c: 56: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1155  0025  3085               	movlw	133
  1156  0026  00F3               	movwf	??_ADC_Sample
  1157  0027                     u807:	
  1158  0027  0BF3               	decfsz	??_ADC_Sample,f
  1159  0028  2827               	goto	u807
  1160                           
  1161                           ;SC8F083_ADC.c: 57: }
  1162  0029  282C               	goto	l1529
  1163  002A                     l1527:	
  1164                           
  1165                           ;SC8F083_ADC.c: 58: else
  1166                           ;SC8F083_ADC.c: 59: ADCON1 = adldo;
  1167  002A  0872               	movf	ADC_Sample@adldo,w
  1168  002B  0096               	movwf	22	;volatile
  1169  002C                     l1529:	
  1170                           
  1171                           ;SC8F083_ADC.c: 61: if(adch & 0x10)
  1172  002C  1283               	bcf	3,5	;RP0=0, select bank0
  1173  002D  1303               	bcf	3,6	;RP1=0, select bank0
  1174  002E  1E21               	btfss	ADC_Sample@adch,4
  1175  002F  2835               	goto	l1537
  1176                           
  1177                           ;SC8F083_ADC.c: 62: {
  1178                           ;SC8F083_ADC.c: 63: CHS4 = 1;
  1179  0030  1683               	bsf	3,5	;RP0=1, select bank1
  1180  0031  1716               	bsf	22,6	;volatile
  1181                           
  1182                           ;SC8F083_ADC.c: 64: adch &= 0x0f;
  1183  0032  300F               	movlw	15
  1184  0033  1283               	bcf	3,5	;RP0=0, select bank0
  1185  0034  05A1               	andwf	ADC_Sample@adch,f
  1186  0035                     l1537:	
  1187                           
  1188                           ;SC8F083_ADC.c: 67: for (i = 0; i < 10; i++)
  1189  0035  01A2               	clrf	ADC_Sample@i
  1190  0036                     l1543:	
  1191                           
  1192                           ;SC8F083_ADC.c: 68: {
  1193                           ;SC8F083_ADC.c: 69: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1194  0036  0821               	movf	ADC_Sample@adch,w
  1195  0037  00F3               	movwf	??_ADC_Sample
  1196  0038  3001               	movlw	1
  1197  0039  1003               	clrc
  1198  003A                     L2:	
  1199  003A  0DF3               	rlf	??_ADC_Sample,f
  1200  003B  3EFF               	addlw	-1
  1201  003C  1003               	clrc
  1202  003D  1D03               	skipz
  1203  003E  283A               	goto	L2
  1204  003F  0D73               	rlf	??_ADC_Sample,w
  1205  0040  3841               	iorlw	65
  1206  0041  1683               	bsf	3,5	;RP0=1, select bank1
  1207  0042  0095               	movwf	21	;volatile
  1208  0043  0000               	nop	;# 
  1209  0044  0000               	nop	;# 
  1210  0045  0000               	nop	;# 
  1211  0046  0000               	nop	;# 
  1212                           
  1213                           ;SC8F083_ADC.c: 74: GODONE = 1;
  1214  0047  1683               	bsf	3,5	;RP0=1, select bank1
  1215  0048  1303               	bcf	3,6	;RP1=0, select bank1
  1216  0049  1495               	bsf	21,1	;volatile
  1217                           
  1218                           ;SC8F083_ADC.c: 76: unsigned char j = 0;
  1219  004A  1283               	bcf	3,5	;RP0=0, select bank0
  1220  004B  01A0               	clrf	ADC_Sample@j
  1221  004C                     l836:	
  1222                           ;SC8F083_ADC.c: 77: while (GODONE)
  1223                           
  1224  004C  1683               	bsf	3,5	;RP0=1, select bank1
  1225  004D  1C95               	btfss	21,1	;volatile
  1226  004E  2858               	goto	l1553
  1227                           
  1228                           ;SC8F083_ADC.c: 78: {
  1229                           ;SC8F083_ADC.c: 79: _delay((unsigned long)((2)*(16000000/4000000.0)));
  1230  004F  2850               	nop2	;2 cycle nop
  1231  0050  2851               	nop2	;2 cycle nop
  1232  0051  2852               	nop2	;2 cycle nop
  1233  0052  2853               	nop2	;2 cycle nop
  1234                           
  1235                           ;SC8F083_ADC.c: 81: if (0 == (--j))
  1236  0053  1283               	bcf	3,5	;RP0=0, select bank0
  1237  0054  1303               	bcf	3,6	;RP1=0, select bank0
  1238  0055  0BA0               	decfsz	ADC_Sample@j,f
  1239  0056  284C               	goto	l836
  1240                           
  1241                           ;SC8F083_ADC.c: 82: return 0;
  1242  0057  3400               	retlw	0
  1243  0058                     l1553:	
  1244                           
  1245                           ;SC8F083_ADC.c: 83: }
  1246                           ;SC8F083_ADC.c: 85: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  1247  0058  0819               	movf	25,w	;volatile
  1248  0059  1283               	bcf	3,5	;RP0=0, select bank0
  1249  005A  00AB               	movwf	ADC_Sample@ad_temp	;volatile
  1250  005B  01AC               	clrf	ADC_Sample@ad_temp+1	;volatile
  1251  005C  0EAB               	swapf	ADC_Sample@ad_temp,f	;volatile
  1252  005D  0EAC               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  1253  005E  30F0               	movlw	240
  1254  005F  05AC               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  1255  0060  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  1256  0061  390F               	andlw	15
  1257  0062  04AC               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  1258  0063  30F0               	movlw	240
  1259  0064  05AB               	andwf	ADC_Sample@ad_temp,f	;volatile
  1260  0065  1683               	bsf	3,5	;RP0=1, select bank1
  1261  0066  0E18               	swapf	24,w	;volatile
  1262  0067  390F               	andlw	15
  1263  0068  1283               	bcf	3,5	;RP0=0, select bank0
  1264  0069  07AB               	addwf	ADC_Sample@ad_temp,f	;volatile
  1265  006A  1803               	skipnc
  1266  006B  0AAC               	incf	ADC_Sample@ad_temp+1,f	;volatile
  1267                           
  1268                           ;SC8F083_ADC.c: 87: if (0 == admax)
  1269  006C  0829               	movf	ADC_Sample@admax,w	;volatile
  1270  006D  042A               	iorwf	ADC_Sample@admax+1,w	;volatile
  1271  006E  1D03               	btfss	3,2
  1272  006F  2873               	goto	l1561
  1273                           
  1274                           ;SC8F083_ADC.c: 88: {
  1275                           ;SC8F083_ADC.c: 89: admax = ad_temp;
  1276  0070  2103  118A         	fcall	PL10	;call to abstracted procedure
  1277  0072  2886               	goto	l1567
  1278  0073                     l1561:	
  1279                           ;SC8F083_ADC.c: 91: }
  1280                           
  1281                           ;SC8F083_ADC.c: 90: admin = ad_temp;
  1282                           
  1283                           
  1284                           ;SC8F083_ADC.c: 92: else if (ad_temp > admax)
  1285  0073  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1286  0074  022A               	subwf	ADC_Sample@admax+1,w	;volatile
  1287  0075  1D03               	skipz
  1288  0076  2879               	goto	u545
  1289  0077  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  1290  0078  0229               	subwf	ADC_Sample@admax,w	;volatile
  1291  0079                     u545:	
  1292  0079  1803               	skipnc
  1293  007A  287E               	goto	l1565
  1294                           
  1295                           ;SC8F083_ADC.c: 93: admax = ad_temp;
  1296  007B  2103  118A         	fcall	PL10	;call to abstracted procedure
  1297  007D  288A               	goto	l842
  1298  007E                     l1565:	
  1299                           
  1300                           ;SC8F083_ADC.c: 94: else if (ad_temp < admin)
  1301  007E  0828               	movf	ADC_Sample@admin+1,w	;volatile
  1302  007F  022C               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1303  0080  1D03               	skipz
  1304  0081  2884               	goto	u555
  1305  0082  0827               	movf	ADC_Sample@admin,w	;volatile
  1306  0083  022B               	subwf	ADC_Sample@ad_temp,w	;volatile
  1307  0084                     u555:	
  1308  0084  1803               	skipnc
  1309  0085  288A               	goto	l842
  1310  0086                     l1567:	
  1311                           
  1312                           ;SC8F083_ADC.c: 95: admin = ad_temp;
  1313  0086  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1314  0087  00A8               	movwf	ADC_Sample@admin+1	;volatile
  1315  0088  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  1316  0089  00A7               	movwf	ADC_Sample@admin	;volatile
  1317  008A                     l842:	
  1318                           
  1319                           ;SC8F083_ADC.c: 97: adsum += ad_temp;
  1320  008A  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  1321  008B  00F3               	movwf	??_ADC_Sample
  1322  008C  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1323  008D  00F4               	movwf	??_ADC_Sample+1
  1324  008E  01F5               	clrf	??_ADC_Sample+2
  1325  008F  01F6               	clrf	??_ADC_Sample+3
  1326  0090  0873               	movf	??_ADC_Sample,w
  1327  0091  07A3               	addwf	ADC_Sample@adsum,f	;volatile
  1328  0092  0874               	movf	??_ADC_Sample+1,w
  1329  0093  1103               	clrz
  1330  0094  1803               	skipnc
  1331  0095  3E01               	addlw	1
  1332  0096  1D03               	btfss	3,2
  1333  0097  07A4               	addwf	ADC_Sample@adsum+1,f	;volatile
  1334  0098  0875               	movf	??_ADC_Sample+2,w
  1335  0099  1103               	clrz
  1336  009A  1803               	skipnc
  1337  009B  3E01               	addlw	1
  1338  009C  1D03               	btfss	3,2
  1339  009D  07A5               	addwf	ADC_Sample@adsum+2,f	;volatile
  1340  009E  0876               	movf	??_ADC_Sample+3,w
  1341  009F  1103               	clrz
  1342  00A0  1803               	skipnc
  1343  00A1  3E01               	addlw	1
  1344  00A2  1D03               	btfss	3,2
  1345  00A3  07A6               	addwf	ADC_Sample@adsum+3,f	;volatile
  1346  00A4  300A               	movlw	10
  1347  00A5  0AA2               	incf	ADC_Sample@i,f
  1348  00A6  0222               	subwf	ADC_Sample@i,w
  1349  00A7  1C03               	skipc
  1350  00A8  2836               	goto	l1543
  1351                           
  1352                           ;SC8F083_ADC.c: 98: }
  1353                           ;SC8F083_ADC.c: 99: adsum -= admax;
  1354  00A9  0829               	movf	ADC_Sample@admax,w	;volatile
  1355  00AA  00F3               	movwf	??_ADC_Sample
  1356  00AB  082A               	movf	ADC_Sample@admax+1,w	;volatile
  1357  00AC  20EB  118A         	fcall	PL2	;call to abstracted procedure
  1358  00AE  1C03               	skipc
  1359  00AF  0F76               	incfsz	??_ADC_Sample+3,w
  1360  00B0  02A6               	subwf	ADC_Sample@adsum+3,f	;volatile
  1361                           
  1362                           ;SC8F083_ADC.c: 100: if (adsum >= admin)
  1363  00B1  0827               	movf	ADC_Sample@admin,w	;volatile
  1364  00B2  00F3               	movwf	??_ADC_Sample
  1365  00B3  0828               	movf	ADC_Sample@admin+1,w	;volatile
  1366  00B4  00F4               	movwf	??_ADC_Sample+1
  1367  00B5  01F5               	clrf	??_ADC_Sample+2
  1368  00B6  01F6               	clrf	??_ADC_Sample+3
  1369  00B7  0876               	movf	??_ADC_Sample+3,w
  1370  00B8  0226               	subwf	ADC_Sample@adsum+3,w	;volatile
  1371  00B9  1D03               	skipz
  1372  00BA  28C5               	goto	u595
  1373  00BB  0875               	movf	??_ADC_Sample+2,w
  1374  00BC  0225               	subwf	ADC_Sample@adsum+2,w	;volatile
  1375  00BD  1D03               	skipz
  1376  00BE  28C5               	goto	u595
  1377  00BF  0874               	movf	??_ADC_Sample+1,w
  1378  00C0  0224               	subwf	ADC_Sample@adsum+1,w	;volatile
  1379  00C1  1D03               	skipz
  1380  00C2  28C5               	goto	u595
  1381  00C3  0873               	movf	??_ADC_Sample,w
  1382  00C4  0223               	subwf	ADC_Sample@adsum,w	;volatile
  1383  00C5                     u595:	
  1384  00C5  1C03               	skipc
  1385  00C6  28D0               	goto	l846
  1386                           
  1387                           ;SC8F083_ADC.c: 101: adsum -= admin;
  1388  00C7  0827               	movf	ADC_Sample@admin,w	;volatile
  1389  00C8  00F3               	movwf	??_ADC_Sample
  1390  00C9  0828               	movf	ADC_Sample@admin+1,w	;volatile
  1391  00CA  20EB  118A         	fcall	PL2	;call to abstracted procedure
  1392  00CC  1C03               	skipc
  1393  00CD  0F76               	incfsz	??_ADC_Sample+3,w
  1394  00CE  02A6               	subwf	ADC_Sample@adsum+3,f	;volatile
  1395  00CF  28D4               	goto	l1577
  1396  00D0                     l846:	
  1397                           
  1398                           ;SC8F083_ADC.c: 102: else
  1399                           ;SC8F083_ADC.c: 103: adsum = 0;
  1400  00D0  01A3               	clrf	ADC_Sample@adsum	;volatile
  1401  00D1  01A4               	clrf	ADC_Sample@adsum+1	;volatile
  1402  00D2  01A5               	clrf	ADC_Sample@adsum+2	;volatile
  1403  00D3  01A6               	clrf	ADC_Sample@adsum+3	;volatile
  1404  00D4                     l1577:	
  1405                           
  1406                           ;SC8F083_ADC.c: 105: adresult = adsum >> 3;
  1407  00D4  0823               	movf	ADC_Sample@adsum,w	;volatile
  1408  00D5  00F3               	movwf	??_ADC_Sample
  1409  00D6  0824               	movf	ADC_Sample@adsum+1,w	;volatile
  1410  00D7  00F4               	movwf	??_ADC_Sample+1
  1411  00D8  0825               	movf	ADC_Sample@adsum+2,w	;volatile
  1412  00D9  00F5               	movwf	??_ADC_Sample+2
  1413  00DA  0826               	movf	ADC_Sample@adsum+3,w	;volatile
  1414  00DB  00F6               	movwf	??_ADC_Sample+3
  1415  00DC  3003               	movlw	3
  1416  00DD                     u615:	
  1417  00DD  1003               	clrc
  1418  00DE  0CF6               	rrf	??_ADC_Sample+3,f
  1419  00DF  0CF5               	rrf	??_ADC_Sample+2,f
  1420  00E0  0CF4               	rrf	??_ADC_Sample+1,f
  1421  00E1  0CF3               	rrf	??_ADC_Sample,f
  1422  00E2  3EFF               	addlw	-1
  1423  00E3  1D03               	skipz
  1424  00E4  28DD               	goto	u615
  1425  00E5  0874               	movf	??_ADC_Sample+1,w
  1426  00E6  00C7               	movwf	_adresult+1	;volatile
  1427  00E7  0873               	movf	??_ADC_Sample,w
  1428  00E8  00C6               	movwf	_adresult	;volatile
  1429                           
  1430                           ;SC8F083_ADC.c: 107: adsum = 0;
  1431                           
  1432                           ;SC8F083_ADC.c: 108: admin = 0;
  1433                           
  1434                           ;SC8F083_ADC.c: 109: admax = 0;
  1435  00E9  20FA               	fcall	PL4	;call to abstracted procedure
  1436                           
  1437                           ;SC8F083_ADC.c: 110: return 0xA5;
  1438  00EA  34A5               	retlw	165
  1439  00EB                     __end_of_ADC_Sample:	
  1440  00EB                     PL2:	
  1441  00EB  00F4               	movwf	??_ADC_Sample+1
  1442  00EC  01F5               	clrf	??_ADC_Sample+2
  1443  00ED  01F6               	clrf	??_ADC_Sample+3
  1444  00EE  0873               	movf	??_ADC_Sample,w
  1445  00EF  02A3               	subwf	ADC_Sample@adsum,f	;volatile
  1446  00F0  0874               	movf	??_ADC_Sample+1,w
  1447  00F1  1C03               	skipc
  1448  00F2  0F74               	incfsz	??_ADC_Sample+1,w
  1449  00F3  02A4               	subwf	ADC_Sample@adsum+1,f	;volatile
  1450  00F4  0875               	movf	??_ADC_Sample+2,w
  1451  00F5  1C03               	skipc
  1452  00F6  0F75               	incfsz	??_ADC_Sample+2,w
  1453  00F7  02A5               	subwf	ADC_Sample@adsum+2,f	;volatile
  1454  00F8  0876               	movf	??_ADC_Sample+3,w
  1455  00F9  0008               	return
  1456  00FA                     __end_ofPL2:	
  1457  00FA                     PL4:	
  1458  00FA  01A3               	clrf	ADC_Sample@adsum	;volatile
  1459  00FB  01A4               	clrf	ADC_Sample@adsum+1	;volatile
  1460  00FC  01A5               	clrf	ADC_Sample@adsum+2	;volatile
  1461  00FD  01A6               	clrf	ADC_Sample@adsum+3	;volatile
  1462  00FE  01A7               	clrf	ADC_Sample@admin	;volatile
  1463  00FF  01A8               	clrf	ADC_Sample@admin+1	;volatile
  1464  0100  01A9               	clrf	ADC_Sample@admax	;volatile
  1465  0101  01AA               	clrf	ADC_Sample@admax+1	;volatile
  1466  0102  0008               	return
  1467  0103                     __end_ofPL4:	
  1468  0103                     PL10:	
  1469  0103  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1470  0104  00AA               	movwf	ADC_Sample@admax+1	;volatile
  1471  0105  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  1472  0106  00A9               	movwf	ADC_Sample@admax	;volatile
  1473  0107  0008               	return
  1474  0108                     __end_ofPL10:	
  1475                           
  1476                           	psect	text8
  1477  02AA                     __ptext8:	
  1478 ;; *************** function _Isr_Timer *****************
  1479 ;; Defined at:
  1480 ;;		line 207 in file "H:\MyDownloads\ËµÃ÷Êé&²âÊÔ±¨¸æ\¿ª·¢°ü\SC8F083¿ª·¢°ü\SC8F083_DEMO_C\SC8F083_ADC_Demo\SC8F083_ADC.c"
  1481 ;; Parameters:    Size  Location     Type
  1482 ;;		None
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;		None
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  1    wreg      void 
  1487 ;; Registers used:
  1488 ;;		None
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 300/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1494 ;;      Params:         0       0       0       0
  1495 ;;      Locals:         0       0       0       0
  1496 ;;      Temps:          2       0       0       0
  1497 ;;      Totals:         2       0       0       0
  1498 ;;Total ram usage:        2 bytes
  1499 ;; Hardware stack levels used:    1
  1500 ;; This function calls:
  1501 ;;		Nothing
  1502 ;; This function is called by:
  1503 ;;		Interrupt level 1
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           
  1508                           ;psect for function _Isr_Timer
  1509  02AA                     _Isr_Timer:	
  1510                           
  1511                           ;SC8F083_ADC.c: 209: if (TMR2IF)
  1512  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  1513  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  1514  02AC  188D               	btfsc	13,1	;volatile
  1515                           
  1516                           ;SC8F083_ADC.c: 210: {
  1517                           ;SC8F083_ADC.c: 211: TMR2IF = 0;
  1518  02AD  108D               	bcf	13,1	;volatile
  1519  02AE  0871               	movf	??_Isr_Timer+1,w
  1520  02AF  008A               	movwf	10
  1521  02B0  0E70               	swapf	??_Isr_Timer^(0+-128),w
  1522  02B1  0083               	movwf	3
  1523  02B2  0EFE               	swapf	126,f
  1524  02B3  0E7E               	swapf	126,w
  1525  02B4  0009               	retfie
  1526  02B5                     __end_of_Isr_Timer:	
  1527  007E                     btemp	set	126	;btemp
  1528  007E                     wtemp0	set	126
  1529                           
  1530                           	psect	intentry
  1531  0004                     __pintentry:	
  1532                           ;incstack = 0
  1533                           ; Regs used in _Isr_Timer: []
  1534                           
  1535  0004                     interrupt_function:	
  1536  007E                     saved_w	set	btemp
  1537  0004  00FE               	movwf	btemp
  1538  0005  0E03               	swapf	3,w
  1539  0006  00F0               	movwf	??_Isr_Timer
  1540  0007  080A               	movf	10,w
  1541  0008  00F1               	movwf	??_Isr_Timer+1
  1542  0009  118A  2AAA         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     36      41
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    ___lwtoft->___ftpack
    ___ftdiv->___ftpack

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___fttol
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    4695
                                             31 BANK0      5     5      0
                         _ADC_Sample
                            _AD_Init
                        _Init_System
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    1704
                                              0 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             13     9      4     305
                                             18 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2017
                                              3 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1629
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Sample                                          18    17      1     635
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Sample
   _AD_Init
   _Init_System
   ___ftdiv
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     24      29       4       51.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      35       8        0.0%
DATA                 0      0      35       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Feb 18 17:28:50 2024

                     PL2 00EB                       PL4 00FA                       PL6 027B  
                     PL8 01B8                      PL10 0103                      PL12 01BD  
                    l842 008A                      l836 004C                      l852 01C7  
                    l846 00D0                      _PR2 0011                      u615 00DD  
                    u545 0079                      u555 0084                      u645 0155  
                    u807 0027                      u595 00C5                      u675 0233  
                    u787 01DF                      u797 021E      __size_of_ADC_Sample 00D3  
        __end_of_AD_Init 02BA             ___ftdiv@cntr 002C             ___ftdiv@sign 0031  
                   l1031 0182                     l1043 01A6                     l1501 018E  
                   l1085 0134                     l1503 0196                     l1507 01A4  
                   l1509 019B                     l1543 0036                     l1527 002A  
                   l1561 0073                     l1553 0058                     l1537 0035  
                   l1529 002C                     l1625 0126                     l1565 007E  
                   l1567 0086                     l1647 0147                     l1663 022B  
                   l1577 00D4                     l1497 0186                     l1681 024E  
                   l1665 0230                     l1753 0217                     l1745 01E2  
                   l1499 0189                     l1691 025A                     l1693 0264  
                   l1685 0256                     l1697 0272                     _CHS4 04B6  
                   _WPUA 0088                     _WPUB 0008                     _WPUC 0108  
                   _main 01C1             ___ftpack@arg 0072             ___ftpack@exp 0075  
                   btemp 007E                     start 000B             ___fttol@exp1 003E  
          ??_Init_System 0072             ___fttol@lval 003A                    ?_main 0070  
        __end_of___ftdiv 017A          __end_of___fttol 027B                    _T2CON 0013  
                  _PORTA 0086                    _PORTB 0006                    _PORTC 0106  
                  _TRISA 0085                    _TRISB 0005                    _TRISC 0105  
          ___ftpack@sign 0076                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000D             __end_of_main 0222  
                 ??_main 003F            ___fttol@sign1 0039                ??_AD_Init 0072  
    __end_of_Init_System 02AA                   _ADCON0 0095                   _ADCON1 0096  
                 _ADRESH 0099                   _ADRESL 0098                   _ANSEL1 0094  
       __end_of___ftpack 01B8                   _GODONE 04A9                   _LDO_EN 04B2  
                 _INTCON 000B         __end_of___lwtoft 0118                   _OSCCON 0014  
                 _TMR2IE 0071                   _TMR2IF 0069             ??_ADC_Sample 0073  
                 _TRISB7 002F       __size_of_Isr_Timer 000B                ??___ftdiv 0029  
              ??___fttol 0036                   _result 007A       __end_of_ADC_Sample 00EB  
                 saved_w 007E  __end_of__initialization 0015               ___ftdiv@f1 0026  
             ___ftdiv@f2 0023               ___ftdiv@f3 002D               ___fttol@f1 0032  
         __pcstackCOMMON 0070              _Init_System 0282               __end_ofPL2 00FA  
             __end_ofPL4 0103               __end_ofPL6 0282               __end_ofPL8 01BD  
             ___lwtoft@c 0020        __end_of_Isr_Timer 02B5               __pbssBANK0 0044  
             __pmaintext 01C1               __pintentry 0004                ?___ftpack 0072  
                _AD_Init 02B5                ?___lwtoft 0020          ADC_Sample@adldo 0072  
        ADC_Sample@admax 0029          ADC_Sample@admin 0027          ADC_Sample@adsum 0023  
                ___ftdiv 0118                  ___fttol 0222               ??___ftpack 0077  
                __ptext1 0108                  __ptext2 0222                  __ptext3 0118  
                __ptext4 017A                  __ptext5 0282                  __ptext6 02B5  
                __ptext7 0018                  __ptext8 02AA               ??___lwtoft 007A  
   end_of_initialization 0015           main@power_temp 0040              ___ftdiv@exp 0030  
           ?_Init_System 0070              __end_ofPL10 0108              __end_ofPL12 01C1  
    start_initialization 000D                _Isr_Timer 02AA        ADC_Sample@ad_temp 002B  
               ?_AD_Init 0070        __size_of___ftpack 003E              __pbssCOMMON 007A  
              ___latbits 0001        __size_of___lwtoft 0010            __pcstackBANK0 0020  
             ?_Isr_Timer 0070                __pnvBANK0 0048                 ?___ftdiv 0023  
               ?___fttol 0032           ADC_Sample@adch 0021              ADC_Sample@i 0022  
            ADC_Sample@j 0020        interrupt_function 0004     __size_of_Init_System 0028  
       __size_of_AD_Init 0005              ??_Isr_Timer 0070               _ADC_Sample 0018  
       __size_of___ftdiv 0062         __size_of___fttol 0059                 ___ftpack 017A  
               ___lwtoft 0108                 _adresult 0046            __size_of_main 0061  
               _test_adc 0048                 _power_ad 0044                 intlevel1 0000  
            ?_ADC_Sample 0072               _OPTION_REG 0001  
