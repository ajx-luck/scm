---- H:\MyDownloads\说明书&测试报告\开发包\SC8F083开发包\SC8F083_DEMO_C\SC8F083_CMP_C\SC8F083_CMP_C.c ----------------------------------------------------------------------
1:                /*-------------------------------------------
2:                
3:                程序名称：比较器设置示例程序
4:                日期版本：2023/10/14 <V1.0>
5:                
6:                      
7:                *本程序由 &应用支持部& 编写整理
8:                -------------------------------------------*/
9:                
10:               
11:               #include <sc.h>						//芯片头文件，会根据工程选项自动寻找对应型号头文件
12:               
13:               
14:               void main(void)
  0010    0000    NOP
  0011    0064    CLRWDT
15:               {
16:               	asm("nop");
17:               	asm("clrwdt");
18:               	
19:               	OSCCON = 0x72;					//16MHZ,内部振荡器用作系统时钟,CONFIG关闭WDT时必需软件打开WDT
  0012    3072    LDIA	0x72
  0013    1283    CLRB	0x3,5
  0014    1303    CLRB	0x3,6
  0015    0094    LD	0x14,A
20:               	OPTION_REG = 0x09;				//配置WDT时间，09为2分频，即16*2=32ms溢出
  0016    3009    LDIA	0x9
  0017    0081    LD	0x1,A
21:               	
22:               	
23:               	WPUB = 0B00000000;
  0018    0188    CLR	0x8
24:               	WPDB = 0B00000000;
  0019    0187    CLR	0x7
25:               	ODCONB = 0B00000000;			//配置PORTB输出情况
  001A    018C    CLR	0xC
26:               	IOCB = 0B00000000;
  001B    0189    CLR	0x9
27:               		
28:               	TRISB = 0B00000000;
  001C    0185    CLR	0x5
29:               	
30:               	/***************************************************
31:               	比较器控制寄存器 CMPxCON0
32:               	Bit7  CMPxEN:  CMP使能位
33:               		1=  使能CMP
34:               		0=  禁止CMP
35:               	Bit6  CMPxPS:  CMP正端输入选择位
36:               		1=  CMP+端口电压
37:               		0=  VDD经过内部电阻分压后的电压
38:               	Bit5~Bit3  CMPxNS<2:0>:  CMP负端输入选择位
39:               		000=  CMP0- 端口电压
40:               		001=  CMP1- 端口电压
41:               		010=  CMP2-端口电压
42:               		011=  CMP3-端口电压
43:               		100=  VDD经过内部电阻分压后的电压
44:               		101=  BG
45:               		11x=  BG
46:               	Bit2  CMPxNV:  CMPO端口输出取反控制位
47:               		1=  CMPOUT在CMPO端口取反输出
48:               		0=  CMPOUT在CMPO端口正常输出
49:               	Bit1  CMPxOUT:  CMP结果位
50:               	Bit0  CMPxOEN:  CMPO端口输出使能位
51:               		1=  使能CMPO端口输出CMPOUT
52:               		0=  禁止CMPO端口输出CMPOUT
53:               	*****************************************************/
54:               	CMP1CON0 = 0B00111001;			//配置比较器1正端为VDD分压，负端为BG1.2V，使能比较器输出
  001D    3039    LDIA	0x39
  001E    008F    LD	0xF,A
55:               	
56:               	CMP2CON0 = 0B00111001;			//配置比较器2正端为VDD分压，负端为BG1.2V，使能比较器输出
  001F    1683    SETB	0x3,5
  0020    009A    LD	0x1A,A
57:               	/***************************************
58:               	比较器控制寄存器 CMPxCON1(10H)
59:               	Bit7  CMPxIM:  CMP中断触发边沿选择
60:               		1=  CMP输出的下降沿触发中断
61:               		0=  CMP输出的上升沿触发中断
62:               	Bit6  ANx_EN:  模拟选择位，选择CMP+、CMPX-的模拟或数字功能
63:               		1=  模拟口
64:               		0=  数字口
65:               	Bit5  RBIASx_H:  具体用法参考比较器框图
66:               	Bit4  RBIASx_L:  具体用法参考比较器框图
67:               	Bit3~Bit0  LVDSx<3:0>:  内部电阻分压比选择位
68:               	****************************************************/
69:               	
70:               	CMP1CON1 = 0B10010111;			//	测试VDD电压低于3.6V中断，故为下降沿触发
  0021    3097    LDIA	0x97
  0022    1283    CLRB	0x3,5
  0023    0090    LD	0x10,A
71:               									//Bit5~0对应的电压值可参考芯片说明书
72:               	CMP2CON1 = 0B10000000;			//	测试VDD电压低于4.27V中断，故为下降沿触发
  0024    3080    LDIA	0x80
  0025    1683    SETB	0x3,5
  0026    009F    LD	0x1F,A
73:               	
74:               	INTCON = 0XC0;					//允许总中断及外设中断
  0027    30C0    LDIA	0xC0
  0028    008B    LD	0xB,A
75:               	PIE1 = 0X20;					//允许比较器1中断
  0029    3020    LDIA	0x20
  002A    1283    CLRB	0x3,5
  002B    008E    LD	0xE,A
76:               	PIE2 = 0X20;					//允许比较器2中断
  002C    1703    SETB	0x3,6
  002D    0090    LD	0x10,A
77:               	
78:               	CMP1EN = 1;						//比较器使能
  002E    1303    CLRB	0x3,6
  002F    178F    SETB	0xF,7
79:               	CMP1IF =0;						//清比较器中断标志位
  0030    128D    CLRB	0xD,5
80:               	
81:               	CMP2EN = 1;						//比较器使能
  0031    1683    SETB	0x3,5
  0032    179A    SETB	0x1A,7
82:               	CMP2IF =0;						//清比较器中断标志位
  0033    1283    CLRB	0x3,5
  0034    1703    SETB	0x3,6
  0035    128F    CLRB	0xF,5
83:               	while(1)
  0036    0064    CLRWDT
  0037    2836    JP	0x36
84:               	{
85:               		asm("clrwdt");
86:               		
87:               						
88:               	}
89:               }
90:               
91:               /***********************************************
92:               函数名称：PB_Isr
93:               函数功能：INT中断服务
94:               入口参数：无
95:               出口参数：无
96:               备注：
97:               ************************************************/
98:               void interrupt CMP_Isr()
99:               {
100:              	if(CMP1IF)
  0038    1283    CLRB	0x3,5
  0039    1303    CLRB	0x3,6
  003A    1E8D    SNZB	0xD,5
  003B    283F    JP	0x3F
101:              	{
102:              		CMP1IF = 0;			//清中断标志
  003C    128D    CLRB	0xD,5
103:              		PORTB ^= 0X80;
  003D    3080    LDIA	0x80
  003E    0686    XORR	0x6
104:              		
105:              	}
106:              	if(CMP2IF)
  003F    1703    SETB	0x3,6
  0040    1E8F    SNZB	0xF,5
  0041    2846    JP	0x46
107:              	{
108:              		CMP2IF = 0;			//清中断标志
  0042    128F    CLRB	0xF,5
109:              		PORTB ^= 0X40;
  0043    3040    LDIA	0x40
  0044    1303    CLRB	0x3,6
  0045    0686    XORR	0x6
  0046    0871    LD	A,0x71
  0047    008A    LD	0xA,A
  0048    0E70    SWAPA	0x70
  0049    0083    LD	0x3,A
  004A    0EFE    SWAPR	0x7E
  004B    0E7E    SWAPA	0x7E
  004C    0009    RETI
110:              		
111:              	}
112:              }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280B    JP	0xB
  000B    118A    CLRB	0xA,3
  000C    280D    JP	0xD
---- start_initialization ------------------------------------------------------------------
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F0    LD	0x70,A
  0007    080A    LD	A,0xA
  0008    00F1    LD	0x71,A
  0009    118A    CLRB	0xA,3
  000A    2838    JP	0x38
---- common_function ------------------------------------------------------------------
  000D    0183    CLR	0x3
  000E    118A    CLRB	0xA,3
  000F    2810    JP	0x10
