

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sun Aug 02 13:08:00 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F2852
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	pa_nodes0,global,class=CODE,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 1.45
    41                           ; Generated 16/11/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F887 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataBANK0
    76  0000                     __pidataBANK0:	
    77                           
    78                           	psect	strings
    79  0408                     __pstrings:	
    80  0408                     stringtab:	
    81  0408                     __stringtab:	
    82  0408                     stringcode:	
    83                           ;	String table - string pointers are 1 byte each
    84                           
    85  0408                     stringdir:	
    86  0408  3004               	movlw	high stringdir
    87  0409  008A               	movwf	10
    88  040A  0804               	movf	4,w
    89  040B  0A84               	incf	4,f
    90  040C  0782               	addwf	2,f
    91  040D                     __stringbase:	
    92  040D  3400               	retlw	0
    93  040E                     __end_of__stringtab:	
    94  040E                     _Table_KeyFalg:	
    95  040E  3401               	retlw	1
    96  040F  3402               	retlw	2
    97  0410  3404               	retlw	4
    98  0411  3408               	retlw	8
    99  0412  3410               	retlw	16
   100  0413  3420               	retlw	32
   101  0414  3440               	retlw	64
   102  0415  3480               	retlw	128
   103  0416                     __end_of_Table_KeyFalg:	
   104  0416                     _Table_KeyChannel:	
   105  0416  3452               	retlw	82
   106  0417  3453               	retlw	83
   107  0418                     __end_of_Table_KeyChannel:	
   108  0418                     _Table_C_LVBO:	
   109  0418  3480               	retlw	128
   110  0419                     __end_of_Table_C_LVBO:	
   111  0419                     _Table_KeyDown:	
   112  0419  340A               	retlw	10
   113  041A                     __end_of_Table_KeyDown:	
   114  041A                     _Table_KeyCap:	
   115  041A  3402               	retlw	2
   116  041B                     __end_of_Table_KeyCap:	
   117                           
   118                           	psect	nvBANK0
   119  0047                     __pnvBANK0:	
   120  0047                     _PwmData:	
   121  0047                     	ds	2
   122  0016                     _KEYCON2	set	22
   123  0012                     _T2CON	set	18
   124  000D                     _PIE1	set	13
   125  000C                     _PIR1	set	12
   126  000B                     _INTCON	set	11
   127  0008                     _WPUB	set	8
   128  0006                     _PORTB	set	6
   129  0001                     _TMR0	set	1
   130  0058                     _RBIF	set	88
   131  005A                     _T0IF	set	90
   132  0035                     _RB5	set	53
   133  0095                     _KEYDATAH	set	149
   134  0094                     _KEYDATAL	set	148
   135  0093                     _KEYCON1	set	147
   136  0092                     _KEYCON0	set	146
   137  0091                     _PR2	set	145
   138  0088                     _OSCCON	set	136
   139  0087                     _WPDB	set	135
   140  0086                     _TRISB	set	134
   141  0081                     _OPTION_REG	set	129
   142  0435                     _TRISB5	set	1077
   143                           
   144                           	psect	cinit
   145  000B                     start_initialization:	
   146                           ; #config settings
   147                           
   148  000B                     __initialization:	
   149                           
   150                           ;initializer for _lowCount
   151  000B  301A               	movlw	26
   152  000C  00C9               	movwf	__pdataBANK0& (0+127)
   153  000D  3020               	movlw	low __pbssBANK0
   154                           
   155                           ; Clear objects allocated to BANK0
   156  000E  1383               	bcf	3,7	;select IRP bank0
   157  000F  0084               	movwf	4
   158  0010  303A               	movlw	low (__pbssBANK0+26)
   159  0011  2468               	fcall	clear_ram0
   160                           
   161                           ; Clear objects allocated to COMMON
   162  0012  01FA               	clrf	__pbssCOMMON& (0+127)
   163  0013  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   164                           
   165                           ; Clear objects allocated to BITCOMMON
   166  0014  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   167  0015                     end_of_initialization:	
   168                           ;End of C runtime variable initialization code
   169                           
   170  0015                     __end_of__initialization:	
   171  0015  0183               	clrf	3
   172  0016  2C54               	ljmp	_main	;jump to C main() function
   173                           
   174                           	psect	bitbssCOMMON
   175  03C8                     __pbitbssCOMMON:	
   176  03C8                     _b_ksleep:	
   177  03C8                     	ds	1
   178  03C9                     _b_kerr:	
   179  03C9                     	ds	1
   180  03CA                     _b_kclr:	
   181  03CA                     	ds	1
   182  03CB                     _b_kover1:	
   183  03CB                     	ds	1
   184  03CC                     _b_kover:	
   185  03CC                     	ds	1
   186  03CD                     _B_OnOff:	
   187  03CD                     	ds	1
   188  03CE                     _B_MainLoop:	
   189  03CE                     	ds	1
   190                           
   191                           	psect	bssCOMMON
   192  007A                     __pbssCOMMON:	
   193  007A                     _KeyData:	
   194  007A                     	ds	2
   195                           
   196                           	psect	bssBANK0
   197  0020                     __pbssBANK0:	
   198  0020                     CheckValidTime@validtime:	
   199  0020                     	ds	2
   200  0022                     _KeyOldData:	
   201  0022                     	ds	2
   202  0024                     _KeyReference:	
   203  0024                     	ds	2
   204  0026                     _KeyOldValue2:	
   205  0026                     	ds	2
   206  0028                     _KeyOldValue1:	
   207  0028                     	ds	2
   208  002A                     _KeyOldValue0:	
   209  002A                     	ds	2
   210  002C                     _KeyResSum:	
   211  002C                     	ds	2
   212  002E                     _KeyFlag:	
   213  002E                     	ds	2
   214  0030                     TurnKeyFlags@KeyNoTimes:	
   215  0030                     	ds	1
   216  0031                     TurnKeyFlags@KeyHaveTimes:	
   217  0031                     	ds	1
   218  0032                     CheckKeyOldValue@counter:	
   219  0032                     	ds	1
   220  0033                     _KeyMaxSub:	
   221  0033                     	ds	1
   222  0034                     _KeyCounter:	
   223  0034                     	ds	1
   224  0035                     WorkSleep@time:	
   225  0035                     	ds	1
   226  0036                     KeyServer@KeyOldFlag:	
   227  0036                     	ds	1
   228  0037                     _pressKey:	
   229  0037                     	ds	1
   230  0038                     _MainTime:	
   231  0038                     	ds	1
   232  0039                     _KeyUpShake:	
   233  0039                     	ds	1
   234                           
   235                           	psect	dataBANK0
   236  0049                     __pdataBANK0:	
   237  0049                     _lowCount:	
   238  0049                     	ds	1
   239                           
   240                           	psect	clrtext
   241  0468                     clear_ram0:	
   242                           ;	Called with FSR containing the base address, and
   243                           ;	W with the last address+1
   244                           
   245  0468  0064               	clrwdt	;clear the watchdog before getting into this loop
   246  0469                     clrloop0:	
   247  0469  0180               	clrf	0	;clear RAM location pointed to by FSR
   248  046A  0A84               	incf	4,f	;increment pointer
   249  046B  0604               	xorwf	4,w	;XOR with final address
   250  046C  1903               	btfsc	3,2	;have we reached the end yet?
   251  046D  3400               	retlw	0	;all done for this memory range, return
   252  046E  0604               	xorwf	4,w	;XOR again to restore value
   253  046F  2C69               	goto	clrloop0	;do the next byte
   254                           
   255                           	psect	cstackCOMMON
   256  0070                     __pcstackCOMMON:	
   257  0070                     ?_SystemEnterSleep:	
   258  0070                     ?_CheckTouchKey:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_processPress:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?_GetTouchKeyValue_Sleep:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_Init_System:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ?_Refurbish_Sfr:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_KeyServer:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?_Isr_Timer:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ??_Isr_Timer:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?_WorkSleep:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ?_main:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_KeyIsIn:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_KeyClearOne:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_KeyClearIn:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_KeyStopClear:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_ClearResSum:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_GetTouchKeyValue:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_CheckOnceResult:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?_CheckKeyOldValue:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?_TurnKeyFlags:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_CheckValidTime:	
   316                           ; 1 bytes @ 0x0
   317                           
   318                           
   319                           ; 1 bytes @ 0x0
   320  0070                     	ds	2
   321  0072                     ??_processPress:	
   322  0072                     ??_Init_System:	
   323                           ; 1 bytes @ 0x2
   324                           
   325  0072                     ??_Refurbish_Sfr:	
   326                           ; 1 bytes @ 0x2
   327                           
   328  0072                     ??_KeyServer:	
   329                           ; 1 bytes @ 0x2
   330                           
   331  0072                     ??_KeyIsIn:	
   332                           ; 1 bytes @ 0x2
   333                           
   334  0072                     ??_KeyClearOne:	
   335                           ; 1 bytes @ 0x2
   336                           
   337  0072                     ??_ClearResSum:	
   338                           ; 1 bytes @ 0x2
   339                           
   340  0072                     ?_KeyHave:	
   341                           ; 1 bytes @ 0x2
   342                           
   343  0072                     ??_CheckValidTime:	
   344                           ; 1 bytes @ 0x2
   345                           
   346  0072                     KeyIsIn@i:	
   347                           ; 1 bytes @ 0x2
   348                           
   349  0072                     KeyClearOne@cnt:	
   350                           ; 1 bytes @ 0x2
   351                           
   352  0072                     ClearResSum@cnt:	
   353                           ; 1 bytes @ 0x2
   354                           
   355  0072                     KeyHave@flag:	
   356                           ; 1 bytes @ 0x2
   357                           
   358                           
   359                           ; 2 bytes @ 0x2
   360  0072                     	ds	1
   361  0073                     ??_GetTouchKeyValue_Sleep:	
   362  0073                     ??_KeyStopClear:	
   363                           ; 1 bytes @ 0x3
   364                           
   365  0073                     ??_GetTouchKeyValue:	
   366                           ; 1 bytes @ 0x3
   367                           
   368  0073                     KeyIsIn@cnt:	
   369                           ; 1 bytes @ 0x3
   370                           
   371  0073                     KeyStopClear@i:	
   372                           ; 1 bytes @ 0x3
   373                           
   374  0073                     GetTouchKeyValue@wake:	
   375                           ; 1 bytes @ 0x3
   376                           
   377  0073                     GetTouchKeyValue_Sleep@wake:	
   378                           ; 2 bytes @ 0x3
   379                           
   380                           
   381                           ; 2 bytes @ 0x3
   382  0073                     	ds	1
   383  0074                     ??_KeyClearIn:	
   384  0074                     ??_KeyHave:	
   385                           ; 1 bytes @ 0x4
   386                           
   387  0074                     ??_CheckKeyOldValue:	
   388                           ; 1 bytes @ 0x4
   389                           
   390  0074                     KeyClearIn@cnt:	
   391                           ; 1 bytes @ 0x4
   392                           
   393  0074                     KeyHave@cnt:	
   394                           ; 1 bytes @ 0x4
   395                           
   396                           
   397                           ; 1 bytes @ 0x4
   398  0074                     	ds	1
   399  0075                     ??_CheckOnceResult:	
   400  0075                     ??_TurnKeyFlags:	
   401                           ; 1 bytes @ 0x5
   402                           
   403  0075                     GetTouchKeyValue@temp:	
   404                           ; 1 bytes @ 0x5
   405                           
   406  0075                     GetTouchKeyValue_Sleep@temp:	
   407                           ; 1 bytes @ 0x5
   408                           
   409                           
   410                           ; 1 bytes @ 0x5
   411  0075                     	ds	1
   412  0076                     GetTouchKeyValue@cnt:	
   413  0076                     GetTouchKeyValue_Sleep@cnt:	
   414                           ; 1 bytes @ 0x6
   415                           
   416                           
   417                           ; 1 bytes @ 0x6
   418  0076                     	ds	1
   419  0077                     ??_WorkSleep:	
   420                           
   421                           ; 1 bytes @ 0x7
   422  0077                     	ds	2
   423  0079                     ??_CheckTouchKey:	
   424  0079                     ??_main:	
   425                           ; 1 bytes @ 0x9
   426                           
   427                           
   428                           	psect	cstackBANK0
   429  003A                     __pcstackBANK0:	
   430                           ; 1 bytes @ 0x9
   431                           
   432  003A                     ??_SystemEnterSleep:	
   433  003A                     CheckOnceResult@OldValue:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  003A                     CheckKeyOldValue@KeyResTemp:	
   437                           ; 2 bytes @ 0x0
   438                           
   439                           
   440                           ; 2 bytes @ 0x0
   441  003A                     	ds	2
   442  003C                     CheckOnceResult@KeyValue:	
   443  003C                     CheckKeyOldValue@KeyOldTemp:	
   444                           ; 2 bytes @ 0x2
   445                           
   446                           
   447                           ; 2 bytes @ 0x2
   448  003C                     	ds	2
   449  003E                     CheckOnceResult@flag:	
   450  003E                     CheckKeyOldValue@cnt:	
   451                           ; 1 bytes @ 0x4
   452                           
   453  003E                     SystemEnterSleep@KeyValue:	
   454                           ; 1 bytes @ 0x4
   455                           
   456                           
   457                           ; 2 bytes @ 0x4
   458  003E                     	ds	1
   459  003F                     CheckOnceResult@KeyDown:	
   460                           
   461                           ; 1 bytes @ 0x5
   462  003F                     	ds	1
   463  0040                     CheckOnceResult@KeyResTemp:	
   464  0040                     SystemEnterSleep@wake:	
   465                           ; 2 bytes @ 0x6
   466                           
   467                           
   468                           ; 2 bytes @ 0x6
   469  0040                     	ds	2
   470  0042                     CheckOnceResult@cnt:	
   471  0042                     SystemEnterSleep@KeyResTemp:	
   472                           ; 1 bytes @ 0x8
   473                           
   474                           
   475                           ; 2 bytes @ 0x8
   476  0042                     	ds	2
   477  0044                     SystemEnterSleep@KeyOldTemp:	
   478                           
   479                           ; 2 bytes @ 0xA
   480  0044                     	ds	2
   481  0046                     SystemEnterSleep@cnt:	
   482                           
   483                           ; 1 bytes @ 0xC
   484  0046                     	ds	1
   485                           
   486                           	psect	maintext
   487  0454                     __pmaintext:	
   488 ;;
   489 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   490 ;;
   491 ;; *************** function _main *****************
   492 ;; Defined at:
   493 ;;		line 164 in file "C:\Users\hhmm6\Desktop\scm\GN_101bt\main.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;		None
   496 ;; Auto vars:     Size  Location     Type
   497 ;;		None
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      void 
   500 ;; Registers used:
   501 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   502 ;; Tracked objects:
   503 ;;		On entry : B00/0
   504 ;;		On exit  : 300/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   507 ;;      Params:         0       0       0       0
   508 ;;      Locals:         0       0       0       0
   509 ;;      Temps:          0       0       0       0
   510 ;;      Totals:         0       0       0       0
   511 ;;Total ram usage:        0 bytes
   512 ;; Hardware stack levels required when called:    6
   513 ;; This function calls:
   514 ;;		_CheckTouchKey
   515 ;;		_Init_System
   516 ;;		_KeyServer
   517 ;;		_Refurbish_Sfr
   518 ;;		_WorkSleep
   519 ;;		_processPress
   520 ;; This function is called by:
   521 ;;		Startup code after reset
   522 ;; This function uses a non-reentrant model
   523 ;;
   524                           
   525                           
   526                           ;psect for function _main
   527  0454                     _main:	
   528                           
   529                           ;main.c: 166: Init_System();
   530                           
   531                           ;incstack = 0
   532                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   533  0454  2357               	fcall	_Init_System
   534  0455                     l2580:	
   535                           
   536                           ;main.c: 168: {
   537                           ;main.c: 169: if(B_MainLoop)
   538  0455  1F79               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   539  0456  2C55               	goto	l2580
   540                           
   541                           ;main.c: 170: {
   542                           ;main.c: 171: B_MainLoop = 0;
   543  0457  1379               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   544  0458  0064               	clrwdt	;# 
   545                           
   546                           ;main.c: 174: Refurbish_Sfr();
   547  0459  245F               	fcall	_Refurbish_Sfr
   548                           
   549                           ;main.c: 175: CheckTouchKey();
   550  045A  2330               	fcall	_CheckTouchKey
   551                           
   552                           ;main.c: 176: KeyServer();
   553  045B  23B0               	fcall	_KeyServer
   554                           
   555                           ;main.c: 177: WorkSleep();
   556  045C  23C8               	fcall	_WorkSleep
   557                           
   558                           ;main.c: 178: processPress();
   559  045D  242D               	fcall	_processPress
   560  045E  2C55               	goto	l2580
   561  045F                     __end_of_main:	
   562                           
   563                           	psect	text1
   564  042D                     __ptext1:	
   565 ;; *************** function _processPress *****************
   566 ;; Defined at:
   567 ;;		line 184 in file "C:\Users\hhmm6\Desktop\scm\GN_101bt\main.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;		None
   570 ;; Auto vars:     Size  Location     Type
   571 ;;		None
   572 ;; Return value:  Size  Location     Type
   573 ;;                  1    wreg      void 
   574 ;; Registers used:
   575 ;;		wreg, status,2, status,0
   576 ;; Tracked objects:
   577 ;;		On entry : 300/0
   578 ;;		On exit  : 300/0
   579 ;;		Unchanged: 0/0
   580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   581 ;;      Params:         0       0       0       0
   582 ;;      Locals:         0       0       0       0
   583 ;;      Temps:          0       0       0       0
   584 ;;      Totals:         0       0       0       0
   585 ;;Total ram usage:        0 bytes
   586 ;; Hardware stack levels used:    1
   587 ;; Hardware stack levels required when called:    1
   588 ;; This function calls:
   589 ;;		Nothing
   590 ;; This function is called by:
   591 ;;		_main
   592 ;; This function uses a non-reentrant model
   593 ;;
   594                           
   595                           
   596                           ;psect for function _processPress
   597  042D                     _processPress:	
   598                           
   599                           ;main.c: 186: if(pressKey)
   600                           
   601                           ;incstack = 0
   602                           ; Regs used in _processPress: [wreg+status,2+status,0]
   603  042D  0837               	movf	_pressKey,w
   604  042E  1D03               	btfss	3,2
   605                           
   606                           ;main.c: 187: {
   607                           ;main.c: 188: lowCount = 0;
   608  042F  01C9               	clrf	_lowCount
   609                           
   610                           ;main.c: 189: }
   611                           ;main.c: 190: if(++lowCount > 25)
   612  0430  301A               	movlw	26
   613  0431  0AC9               	incf	_lowCount,f
   614  0432  0249               	subwf	_lowCount,w
   615  0433  1C03               	skipc
   616  0434  2C39               	goto	l504
   617                           
   618                           ;main.c: 191: {
   619                           ;main.c: 192: lowCount = 26;
   620  0435  301A               	movlw	26
   621  0436  00C9               	movwf	_lowCount
   622                           
   623                           ;main.c: 193: PORTB |= 0x10;
   624  0437  1606               	bsf	6,4	;volatile
   625                           
   626                           ;main.c: 194: }
   627  0438  0008               	return
   628  0439                     l504:	
   629                           
   630                           ;main.c: 195: else
   631                           ;main.c: 196: {
   632                           ;main.c: 197: PORTB &= 0xEF;
   633  0439  1206               	bcf	6,4	;volatile
   634  043A  0008               	return
   635  043B                     __end_of_processPress:	
   636                           
   637                           	psect	text2
   638  03C8                     __ptext2:	
   639 ;; *************** function _WorkSleep *****************
   640 ;; Defined at:
   641 ;;		line 122 in file "C:\Users\hhmm6\Desktop\scm\GN_101bt\main.c"
   642 ;; Parameters:    Size  Location     Type
   643 ;;		None
   644 ;; Auto vars:     Size  Location     Type
   645 ;;		None
   646 ;; Return value:  Size  Location     Type
   647 ;;                  1    wreg      void 
   648 ;; Registers used:
   649 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   650 ;; Tracked objects:
   651 ;;		On entry : 300/0
   652 ;;		On exit  : 300/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   655 ;;      Params:         0       0       0       0
   656 ;;      Locals:         0       0       0       0
   657 ;;      Temps:          0       0       0       0
   658 ;;      Totals:         0       0       0       0
   659 ;;Total ram usage:        0 bytes
   660 ;; Hardware stack levels used:    1
   661 ;; Hardware stack levels required when called:    4
   662 ;; This function calls:
   663 ;;		_Refurbish_Sfr
   664 ;;		_SystemEnterSleep
   665 ;; This function is called by:
   666 ;;		_main
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           
   671                           ;psect for function _WorkSleep
   672  03C8                     _WorkSleep:	
   673                           
   674                           ;main.c: 125: static unsigned char time;
   675                           ;main.c: 127: if(B_OnOff)
   676                           
   677                           ;incstack = 0
   678                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   679  03C8  1AF9               	btfsc	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
   680                           
   681                           ;main.c: 128: time = 0;
   682  03C9  01B5               	clrf	WorkSleep@time
   683                           
   684                           ;main.c: 130: if(++time >= 250)
   685  03CA  30FA               	movlw	250
   686  03CB  0AB5               	incf	WorkSleep@time,f
   687  03CC  0235               	subwf	WorkSleep@time,w
   688  03CD  1C03               	skipc
   689  03CE  0008               	return
   690                           
   691                           ;main.c: 131: {
   692                           ;main.c: 132: time = 0;
   693  03CF  01B5               	clrf	WorkSleep@time
   694                           
   695                           ;main.c: 133: INTCON = 0;
   696  03D0  018B               	clrf	11	;volatile
   697                           
   698                           ;main.c: 134: PIE1 = 0;
   699  03D1  018D               	clrf	13	;volatile
   700                           
   701                           ;main.c: 135: PIR1 = 0;
   702  03D2  018C               	clrf	12	;volatile
   703                           
   704                           ;main.c: 136: T2CON = 0;
   705  03D3  0192               	clrf	18	;volatile
   706                           
   707                           ;main.c: 137: KEYCON0 = 0;
   708  03D4  1683               	bsf	3,5	;RP0=1, select bank1
   709  03D5  0192               	clrf	18	;volatile
   710                           
   711                           ;main.c: 139: TRISB = 0;
   712  03D6  0186               	clrf	6	;volatile
   713                           
   714                           ;main.c: 140: PORTB = 0;
   715  03D7  1283               	bcf	3,5	;RP0=0, select bank0
   716  03D8  0186               	clrf	6	;volatile
   717                           
   718                           ;main.c: 141: WPUB = 0;
   719  03D9  0188               	clrf	8	;volatile
   720                           
   721                           ;main.c: 153: SystemEnterSleep();
   722  03DA  2100               	fcall	_SystemEnterSleep
   723                           
   724                           ;main.c: 154: if(RBIF) RBIF = 0;
   725  03DB  180B               	btfsc	11,0	;volatile
   726  03DC  100B               	bcf	11,0	;volatile
   727                           
   728                           ;main.c: 156: Refurbish_Sfr();
   729  03DD  2C5F               	ljmp	l2008
   730  03DE                     __end_of_WorkSleep:	
   731                           
   732                           	psect	text3
   733  0100                     __ptext3:	
   734 ;; *************** function _SystemEnterSleep *****************
   735 ;; Defined at:
   736 ;;		line 572 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;		None
   739 ;; Auto vars:     Size  Location     Type
   740 ;;  KeyOldTemp      2   10[BANK0 ] unsigned int 
   741 ;;  KeyResTemp      2    8[BANK0 ] unsigned int 
   742 ;;  wake            2    6[BANK0 ] unsigned int 
   743 ;;  KeyValue        2    4[BANK0 ] unsigned int 
   744 ;;  cnt             1   12[BANK0 ] unsigned char 
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : 300/0
   751 ;;		On exit  : B00/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   754 ;;      Params:         0       0       0       0
   755 ;;      Locals:         0       9       0       0
   756 ;;      Temps:          0       4       0       0
   757 ;;      Totals:         0      13       0       0
   758 ;;Total ram usage:       13 bytes
   759 ;; Hardware stack levels used:    1
   760 ;; Hardware stack levels required when called:    3
   761 ;; This function calls:
   762 ;;		_ClearResSum
   763 ;;		_GetTouchKeyValue_Sleep
   764 ;;		_KeyClearOne
   765 ;; This function is called by:
   766 ;;		_WorkSleep
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           
   771                           ;psect for function _SystemEnterSleep
   772  0100                     _SystemEnterSleep:	
   773  0100                     l942:	
   774                           ;incstack = 0
   775                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   776                           ;CheckTouchKey.c: 582: {
   777                           ;CheckTouchKey.c: 583: while(1)
   778                           
   779  0100  0064               	clrwdt	;# 
   780                           
   781                           ;CheckTouchKey.c: 588: TMR0 = 0;
   782  0101  1283               	bcf	3,5	;RP0=0, select bank0
   783  0102  1303               	bcf	3,6	;RP1=0, select bank0
   784  0103  0181               	clrf	1	;volatile
   785                           
   786                           ;CheckTouchKey.c: 589: OPTION_REG |= 0x07;
   787  0104  3007               	movlw	7
   788  0105  1683               	bsf	3,5	;RP0=1, select bank1
   789  0106  0481               	iorwf	1,f	;volatile
   790                           
   791                           ;CheckTouchKey.c: 591: OPTION_REG |= 0x08;
   792  0107  1581               	bsf	1,3	;volatile
   793  0108  0064               	clrwdt	;# 
   794  0109  21DE               	fcall	PL28	;call to abstracted procedure
   795  010A  0064               	clrwdt	;# 
   796                           
   797                           ;CheckTouchKey.c: 597: KEYCON0 = 0;
   798  010B  1683               	bsf	3,5	;RP0=1, select bank1
   799  010C  1303               	bcf	3,6	;RP1=0, select bank1
   800  010D  0192               	clrf	18	;volatile
   801                           
   802                           ;CheckTouchKey.c: 598: KEYCON2 = 0;
   803  010E  1283               	bcf	3,5	;RP0=0, select bank0
   804  010F  0196               	clrf	22	;volatile
   805                           
   806                           ;CheckTouchKey.c: 599: TRISB5 = 0;
   807  0110  1683               	bsf	3,5	;RP0=1, select bank1
   808  0111  1286               	bcf	6,5	;volatile
   809                           
   810                           ;CheckTouchKey.c: 600: RB5 = 0;
   811  0112  1283               	bcf	3,5	;RP0=0, select bank0
   812  0113  1286               	bcf	6,5	;volatile
   813                           
   814                           ;CheckTouchKey.c: 602: OSCCON = 0x70;
   815  0114  3070               	movlw	112
   816  0115  1683               	bsf	3,5	;RP0=1, select bank1
   817  0116  0088               	movwf	8	;volatile
   818  0117  0063               	sleep	;# 
   819  0118  0000               	nop	;# 
   820  0119  0064               	clrwdt	;# 
   821                           
   822                           ;CheckTouchKey.c: 610: ClearResSum();
   823  011A  2470               	fcall	_ClearResSum
   824                           
   825                           ;CheckTouchKey.c: 611: b_ksleep = 1;
   826  011B  1479               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
   827                           
   828                           ;CheckTouchKey.c: 612: GetTouchKeyValue_Sleep();
   829  011C  225F               	fcall	_GetTouchKeyValue_Sleep
   830                           
   831                           ;CheckTouchKey.c: 614: cnt = 0;
   832  011D  1283               	bcf	3,5	;RP0=0, select bank0
   833  011E  1303               	bcf	3,6	;RP1=0, select bank0
   834                           
   835                           ;CheckTouchKey.c: 615: wake = 1;
   836  011F  21D9               	fcall	PL26	;call to abstracted procedure
   837                           
   838                           ;CheckTouchKey.c: 616: if(INTCON & 0x01)
   839  0120  1C0B               	btfss	11,0	;volatile
   840  0121  2929               	goto	l946
   841  0122                     l2490:	
   842                           
   843                           ;CheckTouchKey.c: 617: {
   844                           ;CheckTouchKey.c: 618: ClearResSum();
   845  0122  2470               	fcall	_ClearResSum
   846                           
   847                           ;CheckTouchKey.c: 619: KeyCounter = 0;
   848  0123  1283               	bcf	3,5	;RP0=0, select bank0
   849  0124  1303               	bcf	3,6	;RP1=0, select bank0
   850  0125  01B4               	clrf	_KeyCounter
   851                           
   852                           ;CheckTouchKey.c: 620: b_kover = 0;
   853  0126  1279               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
   854                           
   855                           ;CheckTouchKey.c: 621: b_kover1 = 0;
   856  0127  11F9               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
   857  0128  0008               	return
   858  0129                     l946:	
   859                           ;CheckTouchKey.c: 624: else
   860                           ;CheckTouchKey.c: 625: do
   861                           
   862  0129  1C40               	btfss	SystemEnterSleep@wake,0
   863  012A  29B3               	goto	l2558
   864                           
   865                           ;CheckTouchKey.c: 628: {
   866                           ;CheckTouchKey.c: 630: KeyValue = KeyResTemp = KeyResSum[cnt];
   867  012B  1003               	clrc
   868  012C  0D46               	rlf	SystemEnterSleep@cnt,w
   869  012D  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
   870  012E  0084               	movwf	4
   871  012F  1383               	bcf	3,7	;select IRP bank0
   872  0130  0800               	movf	0,w
   873  0131  00C2               	movwf	SystemEnterSleep@KeyResTemp
   874  0132  0A84               	incf	4,f
   875  0133  0800               	movf	0,w
   876  0134  00C3               	movwf	SystemEnterSleep@KeyResTemp+1
   877  0135  00BF               	movwf	SystemEnterSleep@KeyValue+1
   878  0136  0842               	movf	SystemEnterSleep@KeyResTemp,w
   879  0137  00BE               	movwf	SystemEnterSleep@KeyValue
   880                           
   881                           ;CheckTouchKey.c: 631: if(KeyResTemp)
   882  0138  0842               	movf	SystemEnterSleep@KeyResTemp,w
   883  0139  0443               	iorwf	SystemEnterSleep@KeyResTemp+1,w
   884  013A  1903               	btfsc	3,2
   885  013B  29B3               	goto	l2558
   886                           
   887                           ;CheckTouchKey.c: 632: {
   888                           ;CheckTouchKey.c: 633: KeyValue += Table_KeyDown[cnt];
   889  013C  0846               	movf	SystemEnterSleep@cnt,w
   890  013D  3E0C               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
   891  013E  0084               	movwf	4
   892  013F  2408               	fcall	stringdir
   893  0140  07BE               	addwf	SystemEnterSleep@KeyValue,f
   894  0141  1803               	skipnc
   895  0142  0ABF               	incf	SystemEnterSleep@KeyValue+1,f
   896                           
   897                           ;CheckTouchKey.c: 635: if(KeyReference[cnt] >= KeyValue)
   898  0143  1003               	clrc
   899  0144  0D46               	rlf	SystemEnterSleep@cnt,w
   900  0145  3E24               	addlw	(low (_KeyReference| 0))& (0+255)
   901  0146  21C8               	fcall	PL12	;call to abstracted procedure
   902  0147  083F               	movf	SystemEnterSleep@KeyValue+1,w
   903  0148  023B               	subwf	??_SystemEnterSleep+1,w
   904  0149  1D03               	skipz
   905  014A  294D               	goto	u1505
   906  014B  083E               	movf	SystemEnterSleep@KeyValue,w
   907  014C  023A               	subwf	??_SystemEnterSleep,w
   908  014D                     u1505:	
   909  014D  1C03               	skipc
   910  014E  295C               	goto	L1
   911                           
   912                           ;CheckTouchKey.c: 636: {
   913                           ;CheckTouchKey.c: 637: cnt = 0;
   914                           
   915                           ;CheckTouchKey.c: 638: wake = 1;
   916  014F  21D9               	fcall	PL26	;call to abstracted procedure
   917  0150                     l2514:	
   918  0150  1840               	btfsc	SystemEnterSleep@wake,0
   919  0151  2954               	goto	l2518
   920                           
   921                           ;CheckTouchKey.c: 642: {
   922                           ;CheckTouchKey.c: 643: KeyClearOne(cnt);
   923  0152  0846               	movf	SystemEnterSleep@cnt,w
   924  0153  2397               	fcall	_KeyClearOne
   925  0154                     l2518:	
   926                           
   927                           ;CheckTouchKey.c: 644: }
   928                           ;CheckTouchKey.c: 645: wake <<= 1;
   929  0154  1283               	bcf	3,5	;RP0=0, select bank0
   930  0155  1303               	bcf	3,6	;RP1=0, select bank0
   931  0156  1003               	clrc
   932  0157  0DC0               	rlf	SystemEnterSleep@wake,f
   933  0158  0DC1               	rlf	SystemEnterSleep@wake+1,f
   934  0159  0FC6               	incfsz	SystemEnterSleep@cnt,f
   935  015A  2922               	goto	l2490
   936  015B  2950               	goto	l2514
   937  015C                     L1:	
   938                           ;CheckTouchKey.c: 653: }
   939                           ;CheckTouchKey.c: 655: KeyOldTemp = KeyOldValue0[cnt] - KeyResTemp;
   940                           
   941  015C  0D46               	rlf	SystemEnterSleep@cnt,w
   942  015D  3E2A               	addlw	(low (_KeyOldValue0| 0))& (0+255)
   943                           
   944                           ;CheckTouchKey.c: 656: if(KeyOldTemp <= 4 || KeyOldTemp >= -4)
   945  015E  21B9               	fcall	PL2	;call to abstracted procedure
   946  015F  1903               	skipnz
   947  0160  0244               	subwf	SystemEnterSleep@KeyOldTemp,w
   948  0161  1C03               	skipc
   949  0162  296B               	goto	L2
   950  0163  30FF               	movlw	255
   951  0164  0245               	subwf	SystemEnterSleep@KeyOldTemp+1,w
   952  0165  30FC               	movlw	252
   953  0166  1903               	skipnz
   954  0167  0244               	subwf	SystemEnterSleep@KeyOldTemp,w
   955  0168  1C03               	skipc
   956  0169  29A1               	goto	L3
   957                           
   958                           ;CheckTouchKey.c: 657: {
   959                           ;CheckTouchKey.c: 658: KeyOldTemp = KeyOldValue1[cnt] - KeyResTemp;
   960  016A  1003               	clrc
   961  016B                     L2:	
   962  016B  0D46               	rlf	SystemEnterSleep@cnt,w
   963  016C  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
   964                           
   965                           ;CheckTouchKey.c: 659: if(KeyOldTemp <= 4 || KeyOldTemp >= -4)
   966  016D  21B9               	fcall	PL2	;call to abstracted procedure
   967  016E  1903               	skipnz
   968  016F  0244               	subwf	SystemEnterSleep@KeyOldTemp,w
   969  0170  1C03               	skipc
   970  0171  297A               	goto	L4
   971  0172  30FF               	movlw	255
   972  0173  0245               	subwf	SystemEnterSleep@KeyOldTemp+1,w
   973  0174  30FC               	movlw	252
   974  0175  1903               	skipnz
   975  0176  0244               	subwf	SystemEnterSleep@KeyOldTemp,w
   976  0177  1C03               	skipc
   977  0178  29A1               	goto	L3
   978                           
   979                           ;CheckTouchKey.c: 660: {
   980                           ;CheckTouchKey.c: 661: KeyOldTemp = KeyOldValue2[cnt] - KeyResTemp;
   981  0179  1003               	clrc
   982  017A                     L4:	
   983  017A  0D46               	rlf	SystemEnterSleep@cnt,w
   984  017B  3E26               	addlw	(low (_KeyOldValue2| 0))& (0+255)
   985                           
   986                           ;CheckTouchKey.c: 662: if(KeyOldTemp <= 4 || KeyOldTemp >= -4)
   987  017C  21B9               	fcall	PL2	;call to abstracted procedure
   988  017D  1903               	skipnz
   989  017E  0244               	subwf	SystemEnterSleep@KeyOldTemp,w
   990  017F  1C03               	skipc
   991  0180  2989               	goto	L6
   992  0181  30FF               	movlw	255
   993  0182  0245               	subwf	SystemEnterSleep@KeyOldTemp+1,w
   994  0183  30FC               	movlw	252
   995  0184  1903               	skipnz
   996  0185  0244               	subwf	SystemEnterSleep@KeyOldTemp,w
   997  0186  1C03               	skipc
   998  0187  29A1               	goto	L3
   999                           
  1000                           ;CheckTouchKey.c: 663: {
  1001                           ;CheckTouchKey.c: 664: KeyReference[cnt] = (KeyResTemp+KeyOldValue2[cnt])>>1;
  1002  0188  1003               	clrc
  1003  0189                     L6:	
  1004  0189  0D46               	rlf	SystemEnterSleep@cnt,w
  1005  018A  3E26               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1006  018B  21C8               	fcall	PL12	;call to abstracted procedure
  1007  018C  0842               	movf	SystemEnterSleep@KeyResTemp,w
  1008  018D  073A               	addwf	??_SystemEnterSleep,w
  1009  018E  00BC               	movwf	??_SystemEnterSleep+2
  1010  018F  0843               	movf	SystemEnterSleep@KeyResTemp+1,w
  1011  0190  1803               	skipnc
  1012  0191  0A43               	incf	SystemEnterSleep@KeyResTemp+1,w
  1013  0192  073B               	addwf	??_SystemEnterSleep+1,w
  1014  0193  00BD               	movwf	??_SystemEnterSleep+3
  1015  0194  1003               	clrc
  1016  0195  0CBD               	rrf	??_SystemEnterSleep+3,f
  1017  0196  0CBC               	rrf	??_SystemEnterSleep+2,f
  1018  0197  1003               	clrc
  1019  0198  0D46               	rlf	SystemEnterSleep@cnt,w
  1020  0199  3E24               	addlw	(low (_KeyReference| 0))& (0+255)
  1021  019A  0084               	movwf	4
  1022  019B  083C               	movf	??_SystemEnterSleep+2,w
  1023  019C  0080               	movwf	0
  1024  019D  0A84               	incf	4,f
  1025  019E  083D               	movf	??_SystemEnterSleep+3,w
  1026  019F  0080               	movwf	0
  1027                           
  1028                           ;CheckTouchKey.c: 665: }
  1029                           ;CheckTouchKey.c: 666: }
  1030                           ;CheckTouchKey.c: 667: }
  1031                           ;CheckTouchKey.c: 671: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  1032  01A0  1003               	clrc
  1033  01A1                     L3:	
  1034  01A1  0D46               	rlf	SystemEnterSleep@cnt,w
  1035  01A2  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1036  01A3  21C8               	fcall	PL12	;call to abstracted procedure
  1037  01A4  1003               	clrc
  1038  01A5  0D46               	rlf	SystemEnterSleep@cnt,w
  1039  01A6  3E26               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1040                           
  1041                           ;CheckTouchKey.c: 672: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  1042  01A7  21CF               	fcall	PL14	;call to abstracted procedure
  1043  01A8  21C8               	fcall	PL12	;call to abstracted procedure
  1044  01A9  1003               	clrc
  1045  01AA  0D46               	rlf	SystemEnterSleep@cnt,w
  1046  01AB  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1047                           
  1048                           ;CheckTouchKey.c: 673: KeyOldValue0[cnt] = KeyResTemp;
  1049  01AC  21CF               	fcall	PL14	;call to abstracted procedure
  1050  01AD  0084               	movwf	4
  1051  01AE  0842               	movf	SystemEnterSleep@KeyResTemp,w
  1052  01AF  0080               	movwf	0
  1053  01B0  0A84               	incf	4,f
  1054  01B1  0843               	movf	SystemEnterSleep@KeyResTemp+1,w
  1055  01B2  0080               	movwf	0
  1056  01B3                     l2558:	
  1057                           
  1058                           ;CheckTouchKey.c: 674: }
  1059                           ;CheckTouchKey.c: 675: }
  1060                           ;CheckTouchKey.c: 676: wake <<= 1;
  1061  01B3  1003               	clrc
  1062  01B4  0DC0               	rlf	SystemEnterSleep@wake,f
  1063  01B5  0DC1               	rlf	SystemEnterSleep@wake+1,f
  1064  01B6  0FC6               	incfsz	SystemEnterSleep@cnt,f
  1065  01B7  2900               	goto	l942
  1066  01B8  2929               	goto	l946
  1067  01B9                     __end_of_SystemEnterSleep:	
  1068  01B9                     PL2:	
  1069  01B9  0084               	movwf	4
  1070  01BA  0800               	movf	0,w
  1071  01BB  00C4               	movwf	SystemEnterSleep@KeyOldTemp
  1072  01BC  0A84               	incf	4,f
  1073  01BD  0800               	movf	0,w
  1074  01BE  00C5               	movwf	SystemEnterSleep@KeyOldTemp+1
  1075  01BF  0842               	movf	SystemEnterSleep@KeyResTemp,w
  1076  01C0  02C4               	subwf	SystemEnterSleep@KeyOldTemp,f
  1077  01C1  0843               	movf	SystemEnterSleep@KeyResTemp+1,w
  1078  01C2  1C03               	skipc
  1079  01C3  03C5               	decf	SystemEnterSleep@KeyOldTemp+1,f
  1080  01C4  02C5               	subwf	SystemEnterSleep@KeyOldTemp+1,f
  1081  01C5  3000               	movlw	0
  1082  01C6  0245               	subwf	SystemEnterSleep@KeyOldTemp+1,w
  1083  01C7  3405               	retlw	5
  1084  01C8                     __end_ofPL2:	
  1085  01C8                     PL12:	
  1086  01C8  0084               	movwf	4
  1087  01C9  0800               	movf	0,w
  1088  01CA  00BA               	movwf	??_SystemEnterSleep
  1089  01CB  0A84               	incf	4,f
  1090  01CC  0800               	movf	0,w
  1091  01CD  00BB               	movwf	??_SystemEnterSleep+1
  1092  01CE  0008               	return
  1093  01CF                     __end_ofPL12:	
  1094  01CF                     PL14:	
  1095  01CF  0084               	movwf	4
  1096  01D0  083A               	movf	??_SystemEnterSleep,w
  1097  01D1  0080               	movwf	0
  1098  01D2  0A84               	incf	4,f
  1099  01D3  083B               	movf	??_SystemEnterSleep+1,w
  1100  01D4  0080               	movwf	0
  1101  01D5  1003               	clrc
  1102  01D6  0D46               	rlf	SystemEnterSleep@cnt,w
  1103  01D7  3E2A               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  1104  01D8  0008               	return
  1105  01D9                     __end_ofPL14:	
  1106  01D9                     PL26:	
  1107  01D9  01C6               	clrf	SystemEnterSleep@cnt
  1108  01DA  01C0               	clrf	SystemEnterSleep@wake
  1109  01DB  0AC0               	incf	SystemEnterSleep@wake,f
  1110  01DC  01C1               	clrf	SystemEnterSleep@wake+1
  1111  01DD  0008               	return
  1112  01DE                     __end_ofPL26:	
  1113  01DE                     PL28:	
  1114  01DE  3009               	movlw	9
  1115  01DF  1683               	bsf	3,5	;RP0=1, select bank1
  1116  01E0  1303               	bcf	3,6	;RP1=0, select bank1
  1117  01E1  0081               	movwf	1	;volatile
  1118  01E2  0008               	return
  1119  01E3                     __end_ofPL28:	
  1120                           
  1121                           	psect	text4
  1122  025F                     __ptext4:	
  1123 ;; *************** function _GetTouchKeyValue_Sleep *****************
  1124 ;; Defined at:
  1125 ;;		line 688 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  1126 ;; Parameters:    Size  Location     Type
  1127 ;;		None
  1128 ;; Auto vars:     Size  Location     Type
  1129 ;;  wake            2    3[COMMON] unsigned int 
  1130 ;;  cnt             1    6[COMMON] unsigned char 
  1131 ;;  temp            1    5[COMMON] unsigned char 
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 800/0
  1138 ;;		On exit  : 800/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1141 ;;      Params:         0       0       0       0
  1142 ;;      Locals:         4       0       0       0
  1143 ;;      Temps:          0       0       0       0
  1144 ;;      Totals:         4       0       0       0
  1145 ;;Total ram usage:        4 bytes
  1146 ;; Hardware stack levels used:    1
  1147 ;; Hardware stack levels required when called:    2
  1148 ;; This function calls:
  1149 ;;		_ClearResSum
  1150 ;; This function is called by:
  1151 ;;		_SystemEnterSleep
  1152 ;; This function uses a non-reentrant model
  1153 ;;
  1154                           
  1155                           
  1156                           ;psect for function _GetTouchKeyValue_Sleep
  1157  025F                     _GetTouchKeyValue_Sleep:	
  1158                           
  1159                           ;CheckTouchKey.c: 690: unsigned char cnt = 0,temp;
  1160                           
  1161                           ;incstack = 0
  1162                           ; Regs used in _GetTouchKeyValue_Sleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  1163  025F  01F6               	clrf	GetTouchKeyValue_Sleep@cnt
  1164                           
  1165                           ;CheckTouchKey.c: 691: unsigned int wake = 1;
  1166  0260  01F3               	clrf	GetTouchKeyValue_Sleep@wake
  1167  0261  0AF3               	incf	GetTouchKeyValue_Sleep@wake,f
  1168  0262  01F4               	clrf	GetTouchKeyValue_Sleep@wake+1
  1169  0263                     l1962:	
  1170                           
  1171                           ;CheckTouchKey.c: 693: {
  1172                           ;CheckTouchKey.c: 694: if((wake && KeyWakeUpEn))
  1173  0263  0873               	movf	GetTouchKeyValue_Sleep@wake,w
  1174  0264  0474               	iorwf	GetTouchKeyValue_Sleep@wake+1,w
  1175  0265  1903               	btfsc	3,2
  1176  0266  2AA0               	goto	l2000
  1177                           
  1178                           ;CheckTouchKey.c: 695: {
  1179                           ;CheckTouchKey.c: 696: KEYCON0 = 0;
  1180  0267  1683               	bsf	3,5	;RP0=1, select bank1
  1181  0268  1303               	bcf	3,6	;RP1=0, select bank1
  1182  0269  0192               	clrf	18	;volatile
  1183                           
  1184                           ;CheckTouchKey.c: 697: KEYCON1 = 0;
  1185  026A  0193               	clrf	19	;volatile
  1186                           
  1187                           ;CheckTouchKey.c: 698: KEYCON2 = Table_C_LVBO[cnt] | 0x01;
  1188  026B  0876               	movf	GetTouchKeyValue_Sleep@cnt,w
  1189  026C  3E0B               	addlw	low ((_Table_C_LVBO-__stringbase)| (0+32768))
  1190  026D  0084               	movwf	4
  1191  026E  2408               	fcall	stringdir
  1192  026F  3801               	iorlw	1
  1193  0270  1283               	bcf	3,5	;RP0=0, select bank0
  1194  0271  0096               	movwf	22	;volatile
  1195                           
  1196                           ;CheckTouchKey.c: 700: KEYCON0 = Table_KeyCap[cnt];
  1197  0272  0876               	movf	GetTouchKeyValue_Sleep@cnt,w
  1198  0273  3E0D               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  1199  0274  0084               	movwf	4
  1200  0275  2408               	fcall	stringdir
  1201  0276  1683               	bsf	3,5	;RP0=1, select bank1
  1202  0277  0092               	movwf	18	;volatile
  1203                           
  1204                           ;CheckTouchKey.c: 701: KEYCON1 = Table_KeyChannel[cnt];
  1205  0278  0876               	movf	GetTouchKeyValue_Sleep@cnt,w
  1206  0279  3E09               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  1207  027A  0084               	movwf	4
  1208  027B  2408               	fcall	stringdir
  1209  027C  0093               	movwf	19	;volatile
  1210                           
  1211                           ;CheckTouchKey.c: 702: INTCON = 0X40;
  1212  027D  3040               	movlw	64
  1213  027E  008B               	movwf	11	;volatile
  1214                           
  1215                           ;CheckTouchKey.c: 703: PIE1 = 1;
  1216  027F  3001               	movlw	1
  1217  0280  1283               	bcf	3,5	;RP0=0, select bank0
  1218  0281  008D               	movwf	13	;volatile
  1219                           
  1220                           ;CheckTouchKey.c: 704: PIR1 = 0;
  1221  0282  018C               	clrf	12	;volatile
  1222                           
  1223                           ;CheckTouchKey.c: 705: TRISB5 = 1;
  1224  0283  1683               	bsf	3,5	;RP0=1, select bank1
  1225  0284  1686               	bsf	6,5	;volatile
  1226  0285  0000               	nop	;# 
  1227  0286  0000               	nop	;# 
  1228                           
  1229                           ;CheckTouchKey.c: 708: KEYCON0 |= 0x1;
  1230  0287  1683               	bsf	3,5	;RP0=1, select bank1
  1231  0288  1303               	bcf	3,6	;RP1=0, select bank1
  1232  0289  1412               	bsf	18,0	;volatile
  1233  028A  0063               	sleep	;# 
  1234  028B  0064               	clrwdt	;# 
  1235                           
  1236                           ;CheckTouchKey.c: 711: PIE1 = 0;
  1237  028C  1283               	bcf	3,5	;RP0=0, select bank0
  1238  028D  1303               	bcf	3,6	;RP1=0, select bank0
  1239  028E  018D               	clrf	13	;volatile
  1240                           
  1241                           ;CheckTouchKey.c: 712: PIR1 = 0;
  1242  028F  018C               	clrf	12	;volatile
  1243                           
  1244                           ;CheckTouchKey.c: 714: temp = 0;
  1245  0290  01F5               	clrf	GetTouchKeyValue_Sleep@temp
  1246  0291                     l969:	
  1247                           ;CheckTouchKey.c: 715: while(!(KEYCON0&0x80))
  1248                           
  1249  0291  1683               	bsf	3,5	;RP0=1, select bank1
  1250  0292  1B92               	btfsc	18,7	;volatile
  1251  0293  2A9A               	goto	l1994
  1252                           
  1253                           ;CheckTouchKey.c: 716: {
  1254                           ;CheckTouchKey.c: 717: if(0 == (--temp))
  1255  0294  0BF5               	decfsz	GetTouchKeyValue_Sleep@temp,f
  1256  0295  2A91               	goto	l969
  1257                           
  1258                           ;CheckTouchKey.c: 718: {
  1259                           ;CheckTouchKey.c: 719: KeyCounter = 255;
  1260  0296  30FF               	movlw	255
  1261  0297  1283               	bcf	3,5	;RP0=0, select bank0
  1262  0298  00B4               	movwf	_KeyCounter
  1263                           
  1264                           ;CheckTouchKey.c: 720: ClearResSum();
  1265  0299  2C70               	ljmp	l1922
  1266  029A                     l1994:	
  1267                           
  1268                           ;CheckTouchKey.c: 722: }
  1269                           ;CheckTouchKey.c: 723: }
  1270                           ;CheckTouchKey.c: 726: KeyResSum[cnt] += (unsigned int)((KEYDATAH<<8) | KEYDATAL);
  1271  029A  1003               	clrc
  1272  029B  0D76               	rlf	GetTouchKeyValue_Sleep@cnt,w
  1273  029C  22AB               	fcall	PL8	;call to abstracted procedure
  1274                           
  1275                           ;CheckTouchKey.c: 727: TRISB5 =0;
  1276  029D  1286               	bcf	6,5	;volatile
  1277                           
  1278                           ;CheckTouchKey.c: 728: RB5 =0;
  1279  029E  1283               	bcf	3,5	;RP0=0, select bank0
  1280  029F  1286               	bcf	6,5	;volatile
  1281  02A0                     l2000:	
  1282                           
  1283                           ;CheckTouchKey.c: 729: }
  1284                           ;CheckTouchKey.c: 730: wake <<= 1;
  1285  02A0  1003               	clrc
  1286  02A1  0DF3               	rlf	GetTouchKeyValue_Sleep@wake,f
  1287  02A2  0DF4               	rlf	GetTouchKeyValue_Sleep@wake+1,f
  1288  02A3  0AF6               	incf	GetTouchKeyValue_Sleep@cnt,f
  1289  02A4  1903               	btfsc	3,2
  1290  02A5  2A63               	goto	l1962
  1291                           
  1292                           ;CheckTouchKey.c: 732: KEYCON2 = 0;
  1293  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  1294  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  1295  02A8  0196               	clrf	22	;volatile
  1296                           
  1297                           ;CheckTouchKey.c: 733: b_ksleep = 0;
  1298  02A9  1079               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  1299  02AA  0008               	return
  1300  02AB                     __end_of_GetTouchKeyValue_Sleep:	
  1301  02AB                     PL8:	
  1302  02AB  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  1303  02AC  0084               	movwf	4
  1304  02AD  0814               	movf	20,w	;volatile
  1305  02AE  1383               	bcf	3,7	;select IRP bank0
  1306  02AF  0780               	addwf	0,f
  1307  02B0  0F84               	incfsz	4,f
  1308  02B1  0800               	movf	0,w
  1309  02B2  1803               	skipnc
  1310  02B3  0A00               	incf	0,w
  1311  02B4  00FF               	movwf	127
  1312  02B5  0815               	movf	21,w	;volatile
  1313  02B6  077F               	addwf	127,w
  1314  02B7  0080               	movwf	0
  1315  02B8  0384               	decf	4,f
  1316  02B9  0008               	return
  1317  02BA                     __end_ofPL8:	
  1318                           
  1319                           	psect	text5
  1320  045F                     __ptext5:	
  1321 ;; *************** function _Refurbish_Sfr *****************
  1322 ;; Defined at:
  1323 ;;		line 55 in file "C:\Users\hhmm6\Desktop\scm\GN_101bt\main.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;		None
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;		None
  1328 ;; Return value:  Size  Location     Type
  1329 ;;                  1    wreg      void 
  1330 ;; Registers used:
  1331 ;;		wreg, status,2
  1332 ;; Tracked objects:
  1333 ;;		On entry : 0/100
  1334 ;;		On exit  : 300/0
  1335 ;;		Unchanged: 0/0
  1336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1337 ;;      Params:         0       0       0       0
  1338 ;;      Locals:         0       0       0       0
  1339 ;;      Temps:          0       0       0       0
  1340 ;;      Totals:         0       0       0       0
  1341 ;;Total ram usage:        0 bytes
  1342 ;; Hardware stack levels used:    1
  1343 ;; Hardware stack levels required when called:    1
  1344 ;; This function calls:
  1345 ;;		Nothing
  1346 ;; This function is called by:
  1347 ;;		_WorkSleep
  1348 ;;		_main
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           
  1353                           ;psect for function _Refurbish_Sfr
  1354  045F                     _Refurbish_Sfr:	
  1355  045F                     l2008:	
  1356                           ;incstack = 0
  1357                           ; Regs used in _Refurbish_Sfr: [wreg+status,2]
  1358                           
  1359                           
  1360                           ;main.c: 58: INTCON = 0XA0;
  1361  045F  30A0               	movlw	160
  1362  0460  008B               	movwf	11	;volatile
  1363                           
  1364                           ;main.c: 59: TRISB = 0;
  1365  0461  1683               	bsf	3,5	;RP0=1, select bank1
  1366  0462  1303               	bcf	3,6	;RP1=0, select bank1
  1367  0463  0186               	clrf	6	;volatile
  1368                           
  1369                           ;main.c: 60: WPUB = 0X10;
  1370  0464  3010               	movlw	16
  1371  0465  1283               	bcf	3,5	;RP0=0, select bank0
  1372  0466  0088               	movwf	8	;volatile
  1373  0467  0008               	return
  1374  0468                     __end_of_Refurbish_Sfr:	
  1375                           
  1376                           	psect	text6
  1377  03B0                     __ptext6:	
  1378 ;; *************** function _KeyServer *****************
  1379 ;; Defined at:
  1380 ;;		line 67 in file "C:\Users\hhmm6\Desktop\scm\GN_101bt\main.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;		None
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;		None
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  1    wreg      void 
  1387 ;; Registers used:
  1388 ;;		wreg, status,2, status,0
  1389 ;; Tracked objects:
  1390 ;;		On entry : 300/0
  1391 ;;		On exit  : 300/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1394 ;;      Params:         0       0       0       0
  1395 ;;      Locals:         0       0       0       0
  1396 ;;      Temps:          0       0       0       0
  1397 ;;      Totals:         0       0       0       0
  1398 ;;Total ram usage:        0 bytes
  1399 ;; Hardware stack levels used:    1
  1400 ;; Hardware stack levels required when called:    1
  1401 ;; This function calls:
  1402 ;;		Nothing
  1403 ;; This function is called by:
  1404 ;;		_main
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           
  1409                           ;psect for function _KeyServer
  1410  03B0                     _KeyServer:	
  1411                           
  1412                           ;main.c: 69: static unsigned char KeyOldFlag = 0;
  1413                           ;main.c: 70: if(KeyFlag[0])
  1414                           
  1415                           ;incstack = 0
  1416                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  1417  03B0  082E               	movf	_KeyFlag,w	;volatile
  1418  03B1  1903               	btfsc	3,2
  1419  03B2  2BC4               	goto	l2366
  1420                           
  1421                           ;main.c: 71: {
  1422                           ;main.c: 72: if(KeyFlag[0] != KeyOldFlag)
  1423  03B3  082E               	movf	_KeyFlag,w	;volatile
  1424  03B4  0636               	xorwf	KeyServer@KeyOldFlag,w
  1425  03B5  1903               	skipnz
  1426  03B6  0008               	return
  1427                           
  1428                           ;main.c: 73: {
  1429                           ;main.c: 75: KeyOldFlag ^= KeyFlag[0];
  1430  03B7  082E               	movf	_KeyFlag,w	;volatile
  1431  03B8  06B6               	xorwf	KeyServer@KeyOldFlag,f
  1432                           
  1433                           ;main.c: 76: if((KeyOldFlag&0x1) && (KeyFlag[0]&0x1))
  1434  03B9  1836               	btfsc	KeyServer@KeyOldFlag,0
  1435  03BA  1C2E               	btfss	_KeyFlag,0	;volatile
  1436  03BB  2BC1               	goto	l473
  1437                           
  1438                           ;main.c: 77: {
  1439                           ;main.c: 79: B_OnOff = !B_OnOff;
  1440  03BC  3020               	movlw	(0+1) shl (_B_OnOff& (0+7))
  1441  03BD  06F9               	xorwf	_B_OnOff/(0+8),f
  1442                           
  1443                           ;main.c: 81: pressKey = 1;
  1444  03BE  01B7               	clrf	_pressKey
  1445  03BF  0AB7               	incf	_pressKey,f
  1446                           
  1447                           ;main.c: 82: B_OnOff = 1;
  1448  03C0  16F9               	bsf	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  1449  03C1                     l473:	
  1450                           
  1451                           ;main.c: 83: }
  1452                           ;main.c: 85: KeyOldFlag = KeyFlag[0];
  1453  03C1  082E               	movf	_KeyFlag,w	;volatile
  1454  03C2  00B6               	movwf	KeyServer@KeyOldFlag
  1455  03C3  0008               	return
  1456  03C4                     l2366:	
  1457                           
  1458                           ;main.c: 88: else
  1459                           ;main.c: 89: {
  1460                           ;main.c: 90: KeyOldFlag = 0;
  1461  03C4  01B6               	clrf	KeyServer@KeyOldFlag
  1462                           
  1463                           ;main.c: 91: pressKey = 0;
  1464  03C5  01B7               	clrf	_pressKey
  1465                           
  1466                           ;main.c: 92: B_OnOff = 0;
  1467  03C6  12F9               	bcf	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  1468  03C7  0008               	return
  1469  03C8                     __end_of_KeyServer:	
  1470                           
  1471                           	psect	text7
  1472  0357                     __ptext7:	
  1473 ;; *************** function _Init_System *****************
  1474 ;; Defined at:
  1475 ;;		line 16 in file "C:\Users\hhmm6\Desktop\scm\GN_101bt\main.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;		None
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;		None
  1480 ;; Return value:  Size  Location     Type
  1481 ;;                  1    wreg      void 
  1482 ;; Registers used:
  1483 ;;		wreg, status,2, status,0
  1484 ;; Tracked objects:
  1485 ;;		On entry : B00/0
  1486 ;;		On exit  : 300/100
  1487 ;;		Unchanged: 0/0
  1488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1489 ;;      Params:         0       0       0       0
  1490 ;;      Locals:         0       0       0       0
  1491 ;;      Temps:          0       0       0       0
  1492 ;;      Totals:         0       0       0       0
  1493 ;;Total ram usage:        0 bytes
  1494 ;; Hardware stack levels used:    1
  1495 ;; Hardware stack levels required when called:    1
  1496 ;; This function calls:
  1497 ;;		Nothing
  1498 ;; This function is called by:
  1499 ;;		_main
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           
  1504                           ;psect for function _Init_System
  1505  0357                     _Init_System:	
  1506                           
  1507                           ;incstack = 0
  1508                           ; Regs used in _Init_System: [wreg+status,2+status,0]
  1509  0357  0000               	nop	;# 
  1510  0358  0064               	clrwdt	;# 
  1511                           
  1512                           ;main.c: 20: OPTION_REG |= 0x07;
  1513  0359  3007               	movlw	7
  1514  035A  1683               	bsf	3,5	;RP0=1, select bank1
  1515  035B  1303               	bcf	3,6	;RP1=0, select bank1
  1516  035C  0481               	iorwf	1,f	;volatile
  1517                           
  1518                           ;main.c: 22: OPTION_REG |= 0x08;
  1519  035D  1581               	bsf	1,3	;volatile
  1520  035E  0064               	clrwdt	;# 
  1521  035F  21DE               	fcall	PL28	;call to abstracted procedure
  1522  0360  0064               	clrwdt	;# 
  1523                           
  1524                           ;main.c: 28: INTCON = 0;
  1525  0361  018B               	clrf	11	;volatile
  1526                           
  1527                           ;main.c: 29: OSCCON = 0X70;
  1528  0362  3070               	movlw	112
  1529  0363  1683               	bsf	3,5	;RP0=1, select bank1
  1530  0364  1303               	bcf	3,6	;RP1=0, select bank1
  1531  0365  0088               	movwf	8	;volatile
  1532                           
  1533                           ;main.c: 31: PORTB = 0;
  1534  0366  1283               	bcf	3,5	;RP0=0, select bank0
  1535  0367  0186               	clrf	6	;volatile
  1536                           
  1537                           ;main.c: 32: TRISB = 0;
  1538  0368  1683               	bsf	3,5	;RP0=1, select bank1
  1539  0369  0186               	clrf	6	;volatile
  1540                           
  1541                           ;main.c: 33: PORTB = 0X10;
  1542  036A  3010               	movlw	16
  1543  036B  1283               	bcf	3,5	;RP0=0, select bank0
  1544  036C  0086               	movwf	6	;volatile
  1545                           
  1546                           ;main.c: 34: WPUB = 0X10;
  1547  036D  0088               	movwf	8	;volatile
  1548                           
  1549                           ;main.c: 36: WPDB = 0;
  1550  036E  1683               	bsf	3,5	;RP0=1, select bank1
  1551  036F  0187               	clrf	7	;volatile
  1552                           
  1553                           ;main.c: 40: TMR0 = 6;
  1554  0370  3006               	movlw	6
  1555  0371  1283               	bcf	3,5	;RP0=0, select bank0
  1556  0372  0081               	movwf	1	;volatile
  1557                           
  1558                           ;main.c: 41: INTCON = 0XA0;
  1559  0373  30A0               	movlw	160
  1560  0374  008B               	movwf	11	;volatile
  1561                           
  1562                           ;main.c: 43: PwmData = 0xF0;
  1563  0375  30F0               	movlw	240
  1564  0376  00C7               	movwf	_PwmData	;volatile
  1565  0377  01C8               	clrf	_PwmData+1	;volatile
  1566                           
  1567                           ;main.c: 44: PR2 =0XFF;
  1568  0378  30FF               	movlw	255
  1569  0379  1683               	bsf	3,5	;RP0=1, select bank1
  1570  037A  0091               	movwf	17	;volatile
  1571  037B  0008               	return
  1572  037C                     __end_of_Init_System:	
  1573                           
  1574                           	psect	text8
  1575  0330                     __ptext8:	
  1576 ;; *************** function _CheckTouchKey *****************
  1577 ;; Defined at:
  1578 ;;		line 523 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;		None
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;		None
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      void 
  1585 ;; Registers used:
  1586 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1587 ;; Tracked objects:
  1588 ;;		On entry : 300/0
  1589 ;;		On exit  : 300/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1592 ;;      Params:         0       0       0       0
  1593 ;;      Locals:         0       0       0       0
  1594 ;;      Temps:          0       0       0       0
  1595 ;;      Totals:         0       0       0       0
  1596 ;;Total ram usage:        0 bytes
  1597 ;; Hardware stack levels used:    1
  1598 ;; Hardware stack levels required when called:    5
  1599 ;; This function calls:
  1600 ;;		_CheckKeyOldValue
  1601 ;;		_CheckOnceResult
  1602 ;;		_CheckValidTime
  1603 ;;		_ClearResSum
  1604 ;;		_GetTouchKeyValue
  1605 ;;		_KeyStopClear
  1606 ;;		_TurnKeyFlags
  1607 ;; This function is called by:
  1608 ;;		_main
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612                           
  1613                           ;psect for function _CheckTouchKey
  1614  0330                     _CheckTouchKey:	
  1615                           
  1616                           ;CheckTouchKey.c: 525: if(!b_kover)
  1617                           
  1618                           ;incstack = 0
  1619                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1620  0330  1A79               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1621  0331  2B3D               	goto	l930
  1622                           
  1623                           ;CheckTouchKey.c: 526: {
  1624                           ;CheckTouchKey.c: 528: GetTouchKeyValue();
  1625  0332  22BA               	fcall	_GetTouchKeyValue
  1626                           
  1627                           ;CheckTouchKey.c: 529: if(++KeyCounter >= 8)
  1628  0333  3008               	movlw	8
  1629  0334  1283               	bcf	3,5	;RP0=0, select bank0
  1630  0335  1303               	bcf	3,6	;RP1=0, select bank0
  1631  0336  0AB4               	incf	_KeyCounter,f
  1632  0337  0234               	subwf	_KeyCounter,w
  1633  0338  1C03               	skipc
  1634  0339  2B56               	goto	l2420
  1635                           
  1636                           ;CheckTouchKey.c: 530: {
  1637                           ;CheckTouchKey.c: 531: KeyCounter = 0;
  1638  033A  01B4               	clrf	_KeyCounter
  1639                           
  1640                           ;CheckTouchKey.c: 532: b_kover = 1;
  1641  033B  1679               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1642  033C  2B56               	goto	l2420
  1643  033D                     l930:	
  1644                           
  1645                           ;CheckTouchKey.c: 535: else if(!b_kover1)
  1646  033D  19F9               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1647  033E  2B52               	goto	l2414
  1648                           
  1649                           ;CheckTouchKey.c: 536: {
  1650                           ;CheckTouchKey.c: 538: CheckOnceResult();
  1651  033F  2017               	fcall	_CheckOnceResult
  1652                           
  1653                           ;CheckTouchKey.c: 541: TurnKeyFlags();
  1654  0340  2301               	fcall	_TurnKeyFlags
  1655                           
  1656                           ;CheckTouchKey.c: 542: b_kover1 = 1;
  1657  0341  15F9               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1658                           
  1659                           ;CheckTouchKey.c: 548: if(b_kerr || KeyCounter > KeyValidNumber)
  1660  0342  18F9               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1661  0343  2B4A               	goto	l2404
  1662  0344  3002               	movlw	2
  1663  0345  1283               	bcf	3,5	;RP0=0, select bank0
  1664  0346  1303               	bcf	3,6	;RP1=0, select bank0
  1665  0347  0234               	subwf	_KeyCounter,w
  1666  0348  1C03               	skipc
  1667  0349  2B4E               	goto	l2412
  1668  034A                     l2404:	
  1669                           
  1670                           ;CheckTouchKey.c: 549: {
  1671                           ;CheckTouchKey.c: 550: KeyStopClear();
  1672  034A  23DE               	fcall	_KeyStopClear
  1673                           
  1674                           ;CheckTouchKey.c: 551: b_kerr = 0;
  1675  034B  10F9               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1676                           
  1677                           ;CheckTouchKey.c: 552: b_kover = 0;
  1678  034C  1279               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1679                           
  1680                           ;CheckTouchKey.c: 553: b_kover1 = 0;
  1681  034D  11F9               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1682  034E                     l2412:	
  1683                           
  1684                           ;CheckTouchKey.c: 554: }
  1685                           ;CheckTouchKey.c: 555: KeyCounter = 0;
  1686  034E  1283               	bcf	3,5	;RP0=0, select bank0
  1687  034F  1303               	bcf	3,6	;RP1=0, select bank0
  1688  0350  01B4               	clrf	_KeyCounter
  1689                           
  1690                           ;CheckTouchKey.c: 556: }
  1691  0351  2B56               	goto	l2420
  1692  0352                     l2414:	
  1693                           
  1694                           ;CheckTouchKey.c: 557: else
  1695                           ;CheckTouchKey.c: 558: {
  1696                           ;CheckTouchKey.c: 560: CheckKeyOldValue();
  1697  0352  21E3               	fcall	_CheckKeyOldValue
  1698                           
  1699                           ;CheckTouchKey.c: 562: ClearResSum();
  1700  0353  2470               	fcall	_ClearResSum
  1701                           
  1702                           ;CheckTouchKey.c: 564: b_kover = 0;
  1703  0354  1279               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1704                           
  1705                           ;CheckTouchKey.c: 565: b_kover1 = 0;
  1706  0355  11F9               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1707  0356                     l2420:	
  1708                           
  1709                           ;CheckTouchKey.c: 566: }
  1710                           ;CheckTouchKey.c: 568: CheckValidTime();
  1711  0356  2BF4               	ljmp	l2310
  1712  0357                     __end_of_CheckTouchKey:	
  1713                           
  1714                           	psect	text9
  1715  0301                     __ptext9:	
  1716 ;; *************** function _TurnKeyFlags *****************
  1717 ;; Defined at:
  1718 ;;		line 410 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;		None
  1721 ;; Auto vars:     Size  Location     Type
  1722 ;;		None
  1723 ;; Return value:  Size  Location     Type
  1724 ;;                  1    wreg      void 
  1725 ;; Registers used:
  1726 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1727 ;; Tracked objects:
  1728 ;;		On entry : B00/0
  1729 ;;		On exit  : 0/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1732 ;;      Params:         0       0       0       0
  1733 ;;      Locals:         0       0       0       0
  1734 ;;      Temps:          0       0       0       0
  1735 ;;      Totals:         0       0       0       0
  1736 ;;Total ram usage:        0 bytes
  1737 ;; Hardware stack levels used:    1
  1738 ;; Hardware stack levels required when called:    4
  1739 ;; This function calls:
  1740 ;;		_KeyClearIn
  1741 ;; This function is called by:
  1742 ;;		_CheckTouchKey
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           
  1747                           ;psect for function _TurnKeyFlags
  1748  0301                     _TurnKeyFlags:	
  1749                           
  1750                           ;CheckTouchKey.c: 412: static unsigned char KeyHaveTimes = 0;
  1751                           ;CheckTouchKey.c: 413: static unsigned char KeyNoTimes = 0;
  1752                           ;CheckTouchKey.c: 415: if(KeyData[0] | KeyData[1])
  1753                           
  1754                           ;incstack = 0
  1755                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1756  0301  087B               	movf	_KeyData+1,w	;volatile
  1757  0302  047A               	iorwf	_KeyData,w	;volatile
  1758  0303  1903               	btfsc	3,2
  1759  0304  2B23               	goto	l2302
  1760                           
  1761                           ;CheckTouchKey.c: 416: {
  1762                           ;CheckTouchKey.c: 417: KeyNoTimes = 0;
  1763  0305  01B0               	clrf	TurnKeyFlags@KeyNoTimes
  1764                           
  1765                           ;CheckTouchKey.c: 419: if(KeyData[0] == KeyOldData[0] && KeyData[1] == KeyOldData[1])
  1766  0306  087A               	movf	_KeyData,w	;volatile
  1767  0307  0622               	xorwf	_KeyOldData,w	;volatile
  1768  0308  1D03               	skipz
  1769  0309  2B1C               	goto	l911
  1770  030A  087B               	movf	_KeyData+1,w	;volatile
  1771  030B  0623               	xorwf	_KeyOldData+1,w	;volatile
  1772  030C  1D03               	skipz
  1773  030D  2B1C               	goto	l911
  1774  030E  3002               	movlw	2
  1775  030F  0AB1               	incf	TurnKeyFlags@KeyHaveTimes,f
  1776  0310  0231               	subwf	TurnKeyFlags@KeyHaveTimes,w
  1777  0311  1C03               	skipc
  1778  0312  0008               	return
  1779                           
  1780                           ;CheckTouchKey.c: 422: {
  1781                           ;CheckTouchKey.c: 423: KeyHaveTimes = 0;
  1782  0313  01B1               	clrf	TurnKeyFlags@KeyHaveTimes
  1783                           
  1784                           ;CheckTouchKey.c: 424: KeyFlag[0] = KeyData[0];
  1785  0314  087A               	movf	_KeyData,w	;volatile
  1786  0315  00AE               	movwf	_KeyFlag	;volatile
  1787                           
  1788                           ;CheckTouchKey.c: 425: KeyFlag[1] = KeyData[1];
  1789  0316  087B               	movf	_KeyData+1,w	;volatile
  1790  0317  00AF               	movwf	_KeyFlag+1	;volatile
  1791                           
  1792                           ;CheckTouchKey.c: 428: {
  1793                           ;CheckTouchKey.c: 429: if(!b_kclr)
  1794  0318  1979               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  1795  0319  0008               	return
  1796                           
  1797                           ;CheckTouchKey.c: 430: {
  1798                           ;CheckTouchKey.c: 431: b_kclr = 1;
  1799  031A  1579               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  1800                           
  1801                           ;CheckTouchKey.c: 432: KeyClearIn();
  1802  031B  2C3B               	ljmp	l1928
  1803  031C                     l911:	
  1804                           
  1805                           ;CheckTouchKey.c: 437: else
  1806                           ;CheckTouchKey.c: 438: {
  1807                           ;CheckTouchKey.c: 439: b_kclr = 0;
  1808  031C  1179               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  1809                           
  1810                           ;CheckTouchKey.c: 440: KeyOldData[0] = KeyData[0];
  1811  031D  087A               	movf	_KeyData,w	;volatile
  1812  031E  00A2               	movwf	_KeyOldData	;volatile
  1813                           
  1814                           ;CheckTouchKey.c: 441: KeyOldData[1] = KeyData[1];
  1815  031F  087B               	movf	_KeyData+1,w	;volatile
  1816  0320  00A3               	movwf	_KeyOldData+1	;volatile
  1817                           
  1818                           ;CheckTouchKey.c: 442: KeyHaveTimes = 0;
  1819  0321  01B1               	clrf	TurnKeyFlags@KeyHaveTimes
  1820                           
  1821                           ;CheckTouchKey.c: 443: }
  1822                           ;CheckTouchKey.c: 444: }
  1823  0322  0008               	return
  1824  0323                     l2302:	
  1825                           
  1826                           ;CheckTouchKey.c: 445: else
  1827                           ;CheckTouchKey.c: 446: {
  1828                           ;CheckTouchKey.c: 447: KeyHaveTimes = 0;
  1829  0323  01B1               	clrf	TurnKeyFlags@KeyHaveTimes
  1830                           
  1831                           ;CheckTouchKey.c: 448: KeyOldData[0] = 0;
  1832  0324  01A2               	clrf	_KeyOldData	;volatile
  1833                           
  1834                           ;CheckTouchKey.c: 449: KeyOldData[1] = 0;
  1835  0325  01A3               	clrf	_KeyOldData+1	;volatile
  1836                           
  1837                           ;CheckTouchKey.c: 451: if(++KeyNoTimes >=2)
  1838  0326  3002               	movlw	2
  1839  0327  0AB0               	incf	TurnKeyFlags@KeyNoTimes,f
  1840  0328  0230               	subwf	TurnKeyFlags@KeyNoTimes,w
  1841  0329  1C03               	skipc
  1842  032A  0008               	return
  1843                           
  1844                           ;CheckTouchKey.c: 452: {
  1845                           ;CheckTouchKey.c: 453: KeyNoTimes = 0;
  1846  032B  01B0               	clrf	TurnKeyFlags@KeyNoTimes
  1847                           
  1848                           ;CheckTouchKey.c: 454: KeyFlag[0] = 0;
  1849  032C  01AE               	clrf	_KeyFlag	;volatile
  1850                           
  1851                           ;CheckTouchKey.c: 455: KeyFlag[1] = 0;
  1852  032D  01AF               	clrf	_KeyFlag+1	;volatile
  1853                           
  1854                           ;CheckTouchKey.c: 457: b_kclr = 0;
  1855  032E  1179               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  1856  032F  0008               	return
  1857  0330                     __end_of_TurnKeyFlags:	
  1858                           
  1859                           	psect	text10
  1860  043B                     __ptext10:	
  1861 ;; *************** function _KeyClearIn *****************
  1862 ;; Defined at:
  1863 ;;		line 97 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;		None
  1866 ;; Auto vars:     Size  Location     Type
  1867 ;;  cnt             1    4[COMMON] unsigned char 
  1868 ;; Return value:  Size  Location     Type
  1869 ;;                  1    wreg      void 
  1870 ;; Registers used:
  1871 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1872 ;; Tracked objects:
  1873 ;;		On entry : B00/0
  1874 ;;		On exit  : 0/0
  1875 ;;		Unchanged: 0/0
  1876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1877 ;;      Params:         0       0       0       0
  1878 ;;      Locals:         1       0       0       0
  1879 ;;      Temps:          0       0       0       0
  1880 ;;      Totals:         1       0       0       0
  1881 ;;Total ram usage:        1 bytes
  1882 ;; Hardware stack levels used:    1
  1883 ;; Hardware stack levels required when called:    3
  1884 ;; This function calls:
  1885 ;;		_KeyClearOne
  1886 ;;		_KeyIsIn
  1887 ;; This function is called by:
  1888 ;;		_TurnKeyFlags
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           
  1893                           ;psect for function _KeyClearIn
  1894  043B                     _KeyClearIn:	
  1895  043B                     l1928:	
  1896                           ;incstack = 0
  1897                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1898                           
  1899                           
  1900                           ;CheckTouchKey.c: 99: unsigned char cnt;
  1901                           ;CheckTouchKey.c: 100: for(cnt=0;cnt < KeyTotalNumber;cnt++)
  1902  043B  01F4               	clrf	KeyClearIn@cnt
  1903  043C                     l1934:	
  1904                           
  1905                           ;CheckTouchKey.c: 101: {
  1906                           ;CheckTouchKey.c: 102: if(!KeyIsIn(cnt))
  1907  043C  0874               	movf	KeyClearIn@cnt,w
  1908  043D  241B               	fcall	_KeyIsIn
  1909  043E  3A00               	xorlw	0
  1910  043F  1D03               	skipz
  1911  0440  2C43               	goto	l1938
  1912                           
  1913                           ;CheckTouchKey.c: 103: {
  1914                           ;CheckTouchKey.c: 104: KeyClearOne(cnt);
  1915  0441  0874               	movf	KeyClearIn@cnt,w
  1916  0442  2397               	fcall	_KeyClearOne
  1917  0443                     l1938:	
  1918  0443  0AF4               	incf	KeyClearIn@cnt,f
  1919  0444  0874               	movf	KeyClearIn@cnt,w
  1920  0445  1D03               	btfss	3,2
  1921  0446  0008               	return
  1922  0447  2C3C               	goto	l1934
  1923  0448                     __end_of_KeyClearIn:	
  1924                           
  1925                           	psect	text11
  1926  03DE                     __ptext11:	
  1927 ;; *************** function _KeyStopClear *****************
  1928 ;; Defined at:
  1929 ;;		line 116 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;		None
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;  i               1    3[COMMON] unsigned char 
  1934 ;; Return value:  Size  Location     Type
  1935 ;;                  1    wreg      void 
  1936 ;; Registers used:
  1937 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1938 ;; Tracked objects:
  1939 ;;		On entry : 0/0
  1940 ;;		On exit  : 800/0
  1941 ;;		Unchanged: 0/0
  1942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1943 ;;      Params:         0       0       0       0
  1944 ;;      Locals:         1       0       0       0
  1945 ;;      Temps:          0       0       0       0
  1946 ;;      Totals:         1       0       0       0
  1947 ;;Total ram usage:        1 bytes
  1948 ;; Hardware stack levels used:    1
  1949 ;; Hardware stack levels required when called:    2
  1950 ;; This function calls:
  1951 ;;		_KeyClearOne
  1952 ;; This function is called by:
  1953 ;;		_CheckTouchKey
  1954 ;; This function uses a non-reentrant model
  1955 ;;
  1956                           
  1957                           
  1958                           ;psect for function _KeyStopClear
  1959  03DE                     _KeyStopClear:	
  1960                           
  1961                           ;CheckTouchKey.c: 118: unsigned char i;
  1962                           ;CheckTouchKey.c: 119: KeyFlag[0] = 0;
  1963                           
  1964                           ;incstack = 0
  1965                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1966  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  1967  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  1968  03E0  01AE               	clrf	_KeyFlag	;volatile
  1969                           
  1970                           ;CheckTouchKey.c: 120: KeyFlag[1] = 0;
  1971  03E1  01AF               	clrf	_KeyFlag+1	;volatile
  1972                           
  1973                           ;CheckTouchKey.c: 121: for(i = 0; i < KeyTotalNumber; i++)
  1974  03E2  01F3               	clrf	KeyStopClear@i
  1975  03E3                     l2122:	
  1976                           
  1977                           ;CheckTouchKey.c: 122: {
  1978                           ;CheckTouchKey.c: 123: KeyResSum[i] = 0;
  1979  03E3  1003               	clrc
  1980  03E4  0D73               	rlf	KeyStopClear@i,w
  1981  03E5  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  1982  03E6  23EE               	fcall	PL20	;call to abstracted procedure
  1983                           
  1984                           ;CheckTouchKey.c: 124: KeyClearOne(i);
  1985  03E7  0873               	movf	KeyStopClear@i,w
  1986  03E8  2397               	fcall	_KeyClearOne
  1987  03E9  0AF3               	incf	KeyStopClear@i,f
  1988  03EA  0873               	movf	KeyStopClear@i,w
  1989  03EB  1D03               	btfss	3,2
  1990  03EC  0008               	return
  1991  03ED  2BE3               	goto	l2122
  1992  03EE                     __end_of_KeyStopClear:	
  1993  03EE                     PL20:	
  1994  03EE  0084               	movwf	4
  1995  03EF  1383               	bcf	3,7	;select IRP bank0
  1996  03F0  0180               	clrf	0
  1997  03F1  0A84               	incf	4,f
  1998  03F2  0180               	clrf	0
  1999  03F3  0008               	return
  2000  03F4                     __end_ofPL20:	
  2001                           
  2002                           	psect	text12
  2003  02BA                     __ptext12:	
  2004 ;; *************** function _GetTouchKeyValue *****************
  2005 ;; Defined at:
  2006 ;;		line 189 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  2007 ;; Parameters:    Size  Location     Type
  2008 ;;		None
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;  wake            2    3[COMMON] unsigned int 
  2011 ;;  cnt             1    6[COMMON] unsigned char 
  2012 ;;  temp            1    5[COMMON] unsigned char 
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  1    wreg      void 
  2015 ;; Registers used:
  2016 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2017 ;; Tracked objects:
  2018 ;;		On entry : 300/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2022 ;;      Params:         0       0       0       0
  2023 ;;      Locals:         4       0       0       0
  2024 ;;      Temps:          0       0       0       0
  2025 ;;      Totals:         4       0       0       0
  2026 ;;Total ram usage:        4 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; Hardware stack levels required when called:    2
  2029 ;; This function calls:
  2030 ;;		_ClearResSum
  2031 ;; This function is called by:
  2032 ;;		_CheckTouchKey
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           
  2037                           ;psect for function _GetTouchKeyValue
  2038  02BA                     _GetTouchKeyValue:	
  2039                           
  2040                           ;CheckTouchKey.c: 191: unsigned char cnt = 0,temp;
  2041                           
  2042                           ;incstack = 0
  2043                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2044  02BA  01F6               	clrf	GetTouchKeyValue@cnt
  2045                           
  2046                           ;CheckTouchKey.c: 192: unsigned int wake = 1;
  2047  02BB  01F3               	clrf	GetTouchKeyValue@wake
  2048  02BC  0AF3               	incf	GetTouchKeyValue@wake,f
  2049  02BD  01F4               	clrf	GetTouchKeyValue@wake+1
  2050  02BE                     l2134:	
  2051  02BE  1C79               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  2052  02BF  2AC2               	goto	l2138
  2053  02C0  1C73               	btfss	GetTouchKeyValue@wake,0
  2054  02C1  2AF9               	goto	l2164
  2055  02C2                     l2138:	
  2056                           
  2057                           ;CheckTouchKey.c: 196: {
  2058                           ;CheckTouchKey.c: 197: KEYCON0 = 0;
  2059  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  2060  02C3  0192               	clrf	18	;volatile
  2061                           
  2062                           ;CheckTouchKey.c: 198: KEYCON1 = 0;
  2063  02C4  0193               	clrf	19	;volatile
  2064                           
  2065                           ;CheckTouchKey.c: 199: KEYCON2 = Table_C_LVBO[cnt] | 0x01;
  2066  02C5  0876               	movf	GetTouchKeyValue@cnt,w
  2067  02C6  3E0B               	addlw	low ((_Table_C_LVBO-__stringbase)| (0+32768))
  2068  02C7  0084               	movwf	4
  2069  02C8  2408               	fcall	stringdir
  2070  02C9  3801               	iorlw	1
  2071  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  2072  02CB  0096               	movwf	22	;volatile
  2073                           
  2074                           ;CheckTouchKey.c: 201: TRISB5 = 0;
  2075  02CC  1683               	bsf	3,5	;RP0=1, select bank1
  2076  02CD  1286               	bcf	6,5	;volatile
  2077                           
  2078                           ;CheckTouchKey.c: 202: RB5 = 0;
  2079  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  2080  02CF  1286               	bcf	6,5	;volatile
  2081  02D0  0000               	nop	;# 
  2082  02D1  0000               	nop	;# 
  2083  02D2  0000               	nop	;# 
  2084  02D3  0000               	nop	;# 
  2085  02D4  0000               	nop	;# 
  2086  02D5  0000               	nop	;# 
  2087  02D6  0000               	nop	;# 
  2088  02D7  0000               	nop	;# 
  2089  02D8  0000               	nop	;# 
  2090  02D9  0000               	nop	;# 
  2091  02DA  0000               	nop	;# 
  2092                           
  2093                           ;CheckTouchKey.c: 215: TRISB5 = 1;
  2094  02DB  1683               	bsf	3,5	;RP0=1, select bank1
  2095  02DC  1303               	bcf	3,6	;RP1=0, select bank1
  2096  02DD  1686               	bsf	6,5	;volatile
  2097                           
  2098                           ;CheckTouchKey.c: 217: KEYCON0 = Table_KeyCap[cnt];
  2099  02DE  0876               	movf	GetTouchKeyValue@cnt,w
  2100  02DF  3E0D               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  2101  02E0  0084               	movwf	4
  2102  02E1  2408               	fcall	stringdir
  2103  02E2  0092               	movwf	18	;volatile
  2104                           
  2105                           ;CheckTouchKey.c: 218: KEYCON1 = Table_KeyChannel[cnt];
  2106  02E3  0876               	movf	GetTouchKeyValue@cnt,w
  2107  02E4  3E09               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  2108  02E5  0084               	movwf	4
  2109  02E6  2408               	fcall	stringdir
  2110  02E7  0093               	movwf	19	;volatile
  2111  02E8  0000               	nop	;# 
  2112  02E9  0000               	nop	;# 
  2113                           
  2114                           ;CheckTouchKey.c: 221: KEYCON0 |= 0x1;
  2115  02EA  1683               	bsf	3,5	;RP0=1, select bank1
  2116  02EB  1303               	bcf	3,6	;RP1=0, select bank1
  2117  02EC  1412               	bsf	18,0	;volatile
  2118                           
  2119                           ;CheckTouchKey.c: 223: temp = 0;
  2120  02ED  01F5               	clrf	GetTouchKeyValue@temp
  2121  02EE                     l852:	
  2122                           ;CheckTouchKey.c: 224: while(!(KEYCON0&0x80))
  2123                           
  2124  02EE  1B92               	btfsc	18,7	;volatile
  2125  02EF  2AF6               	goto	l2162
  2126                           
  2127                           ;CheckTouchKey.c: 225: {
  2128                           ;CheckTouchKey.c: 226: if(0 == (--temp))
  2129  02F0  0BF5               	decfsz	GetTouchKeyValue@temp,f
  2130  02F1  2AEE               	goto	l852
  2131                           
  2132                           ;CheckTouchKey.c: 227: {
  2133                           ;CheckTouchKey.c: 228: KeyCounter = 255;
  2134  02F2  30FF               	movlw	255
  2135  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  2136  02F4  00B4               	movwf	_KeyCounter
  2137                           
  2138                           ;CheckTouchKey.c: 229: ClearResSum();
  2139  02F5  2C70               	ljmp	l1922
  2140  02F6                     l2162:	
  2141                           
  2142                           ;CheckTouchKey.c: 231: }
  2143                           ;CheckTouchKey.c: 232: }
  2144                           ;CheckTouchKey.c: 234: KeyResSum[cnt] += (unsigned int)((KEYDATAH<<8) | KEYDATAL);
  2145  02F6  1003               	clrc
  2146  02F7  0D76               	rlf	GetTouchKeyValue@cnt,w
  2147  02F8  22AB               	fcall	PL8	;call to abstracted procedure
  2148  02F9                     l2164:	
  2149                           
  2150                           ;CheckTouchKey.c: 235: }
  2151                           ;CheckTouchKey.c: 236: wake <<= 1;
  2152  02F9  1003               	clrc
  2153  02FA  0DF3               	rlf	GetTouchKeyValue@wake,f
  2154  02FB  0DF4               	rlf	GetTouchKeyValue@wake+1,f
  2155  02FC  0AF6               	incf	GetTouchKeyValue@cnt,f
  2156  02FD  1903               	btfsc	3,2
  2157  02FE  2ABE               	goto	l2134
  2158                           
  2159                           ;CheckTouchKey.c: 238: b_ksleep = 0;
  2160  02FF  1079               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  2161  0300  0008               	return
  2162  0301                     __end_of_GetTouchKeyValue:	
  2163                           
  2164                           	psect	text13
  2165  0470                     __ptext13:	
  2166 ;; *************** function _ClearResSum *****************
  2167 ;; Defined at:
  2168 ;;		line 135 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;		None
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;  cnt             1    2[COMMON] unsigned char 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      void 
  2175 ;; Registers used:
  2176 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 800/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2182 ;;      Params:         0       0       0       0
  2183 ;;      Locals:         1       0       0       0
  2184 ;;      Temps:          0       0       0       0
  2185 ;;      Totals:         1       0       0       0
  2186 ;;Total ram usage:        1 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    1
  2189 ;; This function calls:
  2190 ;;		Nothing
  2191 ;; This function is called by:
  2192 ;;		_GetTouchKeyValue
  2193 ;;		_CheckTouchKey
  2194 ;;		_SystemEnterSleep
  2195 ;;		_GetTouchKeyValue_Sleep
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           
  2200                           ;psect for function _ClearResSum
  2201  0470                     _ClearResSum:	
  2202  0470                     l1922:	
  2203                           ;incstack = 0
  2204                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  2205                           
  2206                           
  2207                           ;CheckTouchKey.c: 137: unsigned char cnt = 0;
  2208  0470  01F2               	clrf	ClearResSum@cnt
  2209  0471                     l1924:	
  2210                           
  2211                           ;CheckTouchKey.c: 139: {
  2212                           ;CheckTouchKey.c: 140: KeyResSum[cnt] = 0;
  2213  0471  1003               	clrc
  2214  0472  0D72               	rlf	ClearResSum@cnt,w
  2215  0473  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  2216  0474  23EE               	fcall	PL20	;call to abstracted procedure
  2217  0475  0FF2               	incfsz	ClearResSum@cnt,f
  2218  0476  0008               	return
  2219  0477  2C71               	goto	l1924
  2220  0478                     __end_of_ClearResSum:	
  2221                           
  2222                           	psect	text14
  2223  03F4                     __ptext14:	
  2224 ;; *************** function _CheckValidTime *****************
  2225 ;; Defined at:
  2226 ;;		line 495 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;		None
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;		None
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  1    wreg      void 
  2233 ;; Registers used:
  2234 ;;		wreg, status,2, status,0
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 300/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2240 ;;      Params:         0       0       0       0
  2241 ;;      Locals:         0       0       0       0
  2242 ;;      Temps:          0       0       0       0
  2243 ;;      Totals:         0       0       0       0
  2244 ;;Total ram usage:        0 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    1
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_CheckTouchKey
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           
  2255                           ;psect for function _CheckValidTime
  2256  03F4                     _CheckValidTime:	
  2257  03F4                     l2310:	
  2258                           ;incstack = 0
  2259                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  2260                           
  2261                           
  2262                           ;CheckTouchKey.c: 500: {
  2263                           ;CheckTouchKey.c: 501: if(KeyFlag[0] | KeyFlag[1])
  2264  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  2265  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  2266  03F6  082F               	movf	_KeyFlag+1,w	;volatile
  2267  03F7  042E               	iorwf	_KeyFlag,w	;volatile
  2268  03F8  1903               	btfsc	3,2
  2269  03F9  2C05               	goto	l2316
  2270  03FA  0AA0               	incf	CheckValidTime@validtime,f
  2271  03FB  1903               	skipnz
  2272  03FC  0AA1               	incf	CheckValidTime@validtime+1,f
  2273  03FD  303A               	movlw	58
  2274  03FE  0221               	subwf	CheckValidTime@validtime+1,w
  2275  03FF  3098               	movlw	152
  2276  0400  1903               	skipnz
  2277  0401  0220               	subwf	CheckValidTime@validtime,w
  2278  0402  1C03               	skipc
  2279  0403  0008               	return
  2280                           
  2281                           ;CheckTouchKey.c: 504: {
  2282                           ;CheckTouchKey.c: 505: b_kerr = 1;
  2283  0404  14F9               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  2284  0405                     l2316:	
  2285                           
  2286                           ;CheckTouchKey.c: 506: validtime = 0;
  2287  0405  01A0               	clrf	CheckValidTime@validtime
  2288  0406  01A1               	clrf	CheckValidTime@validtime+1
  2289  0407  0008               	return
  2290  0408                     __end_of_CheckValidTime:	
  2291                           
  2292                           	psect	text15
  2293  0017                     __ptext15:	
  2294 ;; *************** function _CheckOnceResult *****************
  2295 ;; Defined at:
  2296 ;;		line 249 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;		None
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;  KeyResTemp      2    6[BANK0 ] unsigned int 
  2301 ;;  KeyValue        2    2[BANK0 ] unsigned int 
  2302 ;;  OldValue        2    0[BANK0 ] unsigned int 
  2303 ;;  cnt             1    8[BANK0 ] unsigned char 
  2304 ;;  KeyDown         1    5[BANK0 ] unsigned char 
  2305 ;;  flag            1    4[BANK0 ] unsigned char 
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      void 
  2308 ;; Registers used:
  2309 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2310 ;; Tracked objects:
  2311 ;;		On entry : 300/0
  2312 ;;		On exit  : B00/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2315 ;;      Params:         0       0       0       0
  2316 ;;      Locals:         0       9       0       0
  2317 ;;      Temps:          4       0       0       0
  2318 ;;      Totals:         4       9       0       0
  2319 ;;Total ram usage:       13 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    3
  2322 ;; This function calls:
  2323 ;;		_KeyClearOne
  2324 ;;		_KeyHave
  2325 ;;		_KeyIsIn
  2326 ;; This function is called by:
  2327 ;;		_CheckTouchKey
  2328 ;; This function uses a non-reentrant model
  2329 ;;
  2330                           
  2331                           
  2332                           ;psect for function _CheckOnceResult
  2333  0017                     _CheckOnceResult:	
  2334                           
  2335                           ;CheckTouchKey.c: 251: unsigned char cnt = 0;
  2336                           
  2337                           ;incstack = 0
  2338                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2339  0017  01C2               	clrf	CheckOnceResult@cnt
  2340                           
  2341                           ;CheckTouchKey.c: 252: unsigned char KeyDown;
  2342                           ;CheckTouchKey.c: 253: unsigned char flag;
  2343                           ;CheckTouchKey.c: 255: unsigned int KeyResTemp;
  2344                           ;CheckTouchKey.c: 256: unsigned int KeyValue;
  2345                           ;CheckTouchKey.c: 257: unsigned int OldValue;
  2346                           ;CheckTouchKey.c: 259: KeyData[0] = 0;
  2347  0018  01FA               	clrf	_KeyData	;volatile
  2348                           
  2349                           ;CheckTouchKey.c: 260: KeyData[1] = 0;
  2350  0019  01FB               	clrf	_KeyData+1	;volatile
  2351                           
  2352                           ;CheckTouchKey.c: 261: KeyMaxSub = 0;
  2353  001A  01B3               	clrf	_KeyMaxSub
  2354  001B                     l2170:	
  2355                           
  2356                           ;CheckTouchKey.c: 265: {
  2357                           ;CheckTouchKey.c: 266: flag = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  2358  001B  0842               	movf	CheckOnceResult@cnt,w
  2359  001C  3907               	andlw	7
  2360  001D  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  2361  001E  0084               	movwf	4
  2362  001F  2408               	fcall	stringdir
  2363  0020  00BE               	movwf	CheckOnceResult@flag
  2364                           
  2365                           ;CheckTouchKey.c: 268: KeyResSum[cnt] >>= 3;
  2366  0021  1003               	clrc
  2367  0022  0D42               	rlf	CheckOnceResult@cnt,w
  2368  0023  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  2369  0024  0084               	movwf	4
  2370  0025  3003               	movlw	3
  2371  0026                     u1005:	
  2372  0026  0A84               	incf	4,f
  2373  0027  1003               	clrc
  2374  0028  1383               	bcf	3,7	;select IRP bank0
  2375  0029  0C80               	rrf	0,f
  2376  002A  0384               	decf	4,f
  2377  002B  0C80               	rrf	0,f
  2378  002C  3EFF               	addlw	-1
  2379  002D  1D03               	skipz
  2380  002E  2826               	goto	u1005
  2381                           
  2382                           ;CheckTouchKey.c: 269: KeyResTemp = KeyResSum[cnt];
  2383  002F  1003               	clrc
  2384  0030  0D42               	rlf	CheckOnceResult@cnt,w
  2385  0031  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  2386  0032  0084               	movwf	4
  2387  0033  0800               	movf	0,w
  2388  0034  00C0               	movwf	CheckOnceResult@KeyResTemp
  2389  0035  0A84               	incf	4,f
  2390  0036  0800               	movf	0,w
  2391  0037  00C1               	movwf	CheckOnceResult@KeyResTemp+1
  2392                           
  2393                           ;CheckTouchKey.c: 270: KeyDown = Table_KeyDown[cnt];
  2394  0038  0842               	movf	CheckOnceResult@cnt,w
  2395  0039  3E0C               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  2396  003A  0084               	movwf	4
  2397  003B  2408               	fcall	stringdir
  2398  003C  00BF               	movwf	CheckOnceResult@KeyDown
  2399                           
  2400                           ;CheckTouchKey.c: 272: KeyValue = KeyResTemp + KeyDown;
  2401  003D  00BC               	movwf	CheckOnceResult@KeyValue
  2402  003E  01BD               	clrf	CheckOnceResult@KeyValue+1
  2403  003F  0840               	movf	CheckOnceResult@KeyResTemp,w
  2404  0040  07BC               	addwf	CheckOnceResult@KeyValue,f
  2405  0041  1803               	skipnc
  2406  0042  0ABD               	incf	CheckOnceResult@KeyValue+1,f
  2407  0043  0841               	movf	CheckOnceResult@KeyResTemp+1,w
  2408  0044  07BD               	addwf	CheckOnceResult@KeyValue+1,f
  2409                           
  2410                           ;CheckTouchKey.c: 274: if(!KeyIsIn(cnt))
  2411  0045  0842               	movf	CheckOnceResult@cnt,w
  2412  0046  241B               	fcall	_KeyIsIn
  2413  0047  3A00               	xorlw	0
  2414                           
  2415                           ;CheckTouchKey.c: 275: {
  2416                           ;CheckTouchKey.c: 277: OldValue = KeyOldValue2[cnt];
  2417  0048  1003               	clrc
  2418  0049  1D03               	skipz
  2419  004A  28A2               	goto	L10
  2420  004B  0D42               	rlf	CheckOnceResult@cnt,w
  2421  004C  3E26               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2422  004D  0084               	movwf	4
  2423  004E  1383               	bcf	3,7	;select IRP bank0
  2424  004F  0800               	movf	0,w
  2425  0050  00BA               	movwf	CheckOnceResult@OldValue
  2426  0051  0A84               	incf	4,f
  2427  0052  0800               	movf	0,w
  2428  0053  00BB               	movwf	CheckOnceResult@OldValue+1
  2429                           
  2430                           ;CheckTouchKey.c: 279: if(KeyReference[cnt] > KeyValue)
  2431  0054  1003               	clrc
  2432  0055  0D42               	rlf	CheckOnceResult@cnt,w
  2433  0056  3E24               	addlw	(low (_KeyReference| 0))& (0+255)
  2434  0057  20F9               	fcall	PL10	;call to abstracted procedure
  2435  0058  023D               	subwf	CheckOnceResult@KeyValue+1,w
  2436  0059  1D03               	skipz
  2437  005A  285D               	goto	u1025
  2438  005B  0875               	movf	??_CheckOnceResult,w
  2439  005C  023C               	subwf	CheckOnceResult@KeyValue,w
  2440  005D                     u1025:	
  2441  005D  1803               	skipnc
  2442  005E  286B               	goto	l2188
  2443                           
  2444                           ;CheckTouchKey.c: 280: {
  2445                           ;CheckTouchKey.c: 281: KeyResTemp = KeyReference[cnt] - KeyResTemp;
  2446  005F  1003               	clrc
  2447  0060  0D42               	rlf	CheckOnceResult@cnt,w
  2448  0061  3E24               	addlw	(low (_KeyReference| 0))& (0+255)
  2449  0062  20F9               	fcall	PL10	;call to abstracted procedure
  2450  0063  0840               	movf	CheckOnceResult@KeyResTemp,w
  2451  0064  0275               	subwf	??_CheckOnceResult,w
  2452  0065  00C0               	movwf	CheckOnceResult@KeyResTemp
  2453  0066  0841               	movf	CheckOnceResult@KeyResTemp+1,w
  2454  0067  1C03               	skipc
  2455  0068  0A41               	incf	CheckOnceResult@KeyResTemp+1,w
  2456  0069  0276               	subwf	??_CheckOnceResult+1,w
  2457  006A  288E               	goto	L8
  2458  006B                     l2188:	
  2459                           ;CheckTouchKey.c: 282: }
  2460                           
  2461                           
  2462                           ;CheckTouchKey.c: 283: else if ((OldValue > KeyValue) && (KeyOldValue1[cnt] > KeyValue))
  2463  006B  083B               	movf	CheckOnceResult@OldValue+1,w
  2464  006C  023D               	subwf	CheckOnceResult@KeyValue+1,w
  2465  006D  1D03               	skipz
  2466  006E  2871               	goto	u1035
  2467  006F  083A               	movf	CheckOnceResult@OldValue,w
  2468  0070  023C               	subwf	CheckOnceResult@KeyValue,w
  2469  0071                     u1035:	
  2470  0071  1803               	skipnc
  2471  0072  28E2               	goto	l2234
  2472  0073  1003               	clrc
  2473  0074  0D42               	rlf	CheckOnceResult@cnt,w
  2474  0075  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2475  0076  20F9               	fcall	PL10	;call to abstracted procedure
  2476  0077  023D               	subwf	CheckOnceResult@KeyValue+1,w
  2477  0078  1D03               	skipz
  2478  0079  287C               	goto	u1045
  2479  007A  0875               	movf	??_CheckOnceResult,w
  2480  007B  023C               	subwf	CheckOnceResult@KeyValue,w
  2481  007C                     u1045:	
  2482  007C  1803               	skipnc
  2483  007D  28E2               	goto	l2234
  2484                           
  2485                           ;CheckTouchKey.c: 284: {
  2486                           ;CheckTouchKey.c: 285: KeyReference[cnt] = OldValue;
  2487  007E  1003               	clrc
  2488  007F  0D42               	rlf	CheckOnceResult@cnt,w
  2489  0080  3E24               	addlw	(low (_KeyReference| 0))& (0+255)
  2490  0081  0084               	movwf	4
  2491  0082  083A               	movf	CheckOnceResult@OldValue,w
  2492  0083  0080               	movwf	0
  2493  0084  0A84               	incf	4,f
  2494  0085  083B               	movf	CheckOnceResult@OldValue+1,w
  2495  0086  0080               	movwf	0
  2496                           
  2497                           ;CheckTouchKey.c: 286: KeyResTemp = OldValue - KeyResTemp;
  2498  0087  0840               	movf	CheckOnceResult@KeyResTemp,w
  2499  0088  023A               	subwf	CheckOnceResult@OldValue,w
  2500  0089  00C0               	movwf	CheckOnceResult@KeyResTemp
  2501  008A  0841               	movf	CheckOnceResult@KeyResTemp+1,w
  2502  008B  1C03               	skipc
  2503  008C  0A41               	incf	CheckOnceResult@KeyResTemp+1,w
  2504  008D  023B               	subwf	CheckOnceResult@OldValue+1,w
  2505  008E                     L8:	
  2506  008E  00C1               	movwf	CheckOnceResult@KeyResTemp+1
  2507                           
  2508                           ;CheckTouchKey.c: 291: }
  2509                           ;CheckTouchKey.c: 293: KeyUpShake[cnt] = 0;
  2510                           
  2511                           ;CheckTouchKey.c: 287: }
  2512  008F  0842               	movf	CheckOnceResult@cnt,w
  2513  0090  3E39               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2514  0091  0084               	movwf	4
  2515  0092  0180               	clrf	0
  2516                           
  2517                           ;CheckTouchKey.c: 296: {
  2518                           ;CheckTouchKey.c: 297: if(KeyResTemp >> 8)
  2519  0093  0841               	movf	CheckOnceResult@KeyResTemp+1,w
  2520  0094  1903               	btfsc	3,2
  2521  0095  2898               	goto	l2202
  2522                           
  2523                           ;CheckTouchKey.c: 298: {
  2524                           ;CheckTouchKey.c: 299: KeyDown = 0xFF;
  2525  0096  30FF               	movlw	255
  2526  0097  2899               	goto	L9
  2527  0098                     l2202:	
  2528                           ;CheckTouchKey.c: 300: }
  2529                           
  2530                           
  2531                           ;CheckTouchKey.c: 301: else
  2532                           ;CheckTouchKey.c: 302: {
  2533                           ;CheckTouchKey.c: 303: KeyDown = KeyResTemp & 0xFF;
  2534  0098  0840               	movf	CheckOnceResult@KeyResTemp,w
  2535  0099                     L9:	
  2536  0099  00BF               	movwf	CheckOnceResult@KeyDown
  2537                           
  2538                           ;CheckTouchKey.c: 304: }
  2539                           ;CheckTouchKey.c: 306: if(KeyMaxSub < KeyDown)
  2540  009A  0233               	subwf	_KeyMaxSub,w
  2541  009B  1803               	skipnc
  2542  009C  28A0               	goto	l2208
  2543                           
  2544                           ;CheckTouchKey.c: 307: {
  2545                           ;CheckTouchKey.c: 308: KeyMaxSub = KeyDown;
  2546  009D  083F               	movf	CheckOnceResult@KeyDown,w
  2547  009E  00B3               	movwf	_KeyMaxSub
  2548  009F  28DD               	goto	l2232
  2549  00A0                     l2208:	
  2550                           ;CheckTouchKey.c: 310: }
  2551                           
  2552                           ;CheckTouchKey.c: 309: KeyHave(cnt,flag);
  2553                           
  2554                           
  2555                           ;CheckTouchKey.c: 311: else
  2556                           ;CheckTouchKey.c: 312: {
  2557                           ;CheckTouchKey.c: 313: KeyCounter++;
  2558  00A0  0AB4               	incf	_KeyCounter,f
  2559  00A1  28E2               	goto	l2234
  2560  00A2                     L10:	
  2561                           ;CheckTouchKey.c: 322: else
  2562                           ;CheckTouchKey.c: 323: {
  2563                           ;CheckTouchKey.c: 326: if(KeyReference[cnt]+1 < KeyValue)
  2564                           
  2565  00A2  0D42               	rlf	CheckOnceResult@cnt,w
  2566  00A3  3E24               	addlw	(low (_KeyReference| 0))& (0+255)
  2567  00A4  0084               	movwf	4
  2568  00A5  1383               	bcf	3,7	;select IRP bank0
  2569  00A6  0800               	movf	0,w
  2570  00A7  00F5               	movwf	??_CheckOnceResult
  2571  00A8  0A84               	incf	4,f
  2572  00A9  0800               	movf	0,w
  2573  00AA  00F6               	movwf	??_CheckOnceResult+1
  2574  00AB  0875               	movf	??_CheckOnceResult,w
  2575  00AC  3E01               	addlw	1
  2576  00AD  00F7               	movwf	??_CheckOnceResult+2
  2577  00AE  0876               	movf	??_CheckOnceResult+1,w
  2578  00AF  1803               	skipnc
  2579  00B0  3E01               	addlw	1
  2580  00B1  00F8               	movwf	??_CheckOnceResult+3
  2581  00B2  083D               	movf	CheckOnceResult@KeyValue+1,w
  2582  00B3  0278               	subwf	??_CheckOnceResult+3,w
  2583  00B4  1D03               	skipz
  2584  00B5  28B8               	goto	u1075
  2585  00B6  083C               	movf	CheckOnceResult@KeyValue,w
  2586  00B7  0277               	subwf	??_CheckOnceResult+2,w
  2587  00B8                     u1075:	
  2588  00B8  1C03               	btfss	3,0
  2589  00B9  28E2               	goto	l2234
  2590                           
  2591                           ;CheckTouchKey.c: 330: else if((KeyOldValue2[cnt]+KeyDown<KeyResTemp) || (KeyOldValue1[c
      +                          nt]+KeyDown<KeyResTemp))
  2592  00BA  1003               	clrc
  2593  00BB  0D42               	rlf	CheckOnceResult@cnt,w
  2594  00BC  3E26               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2595  00BD  0084               	movwf	4
  2596  00BE  0800               	movf	0,w
  2597  00BF  20E7               	fcall	PL6	;call to abstracted procedure
  2598  00C0  1C03               	skipc
  2599  00C1  28CA               	goto	l2222
  2600  00C2  1003               	clrc
  2601  00C3  0D42               	rlf	CheckOnceResult@cnt,w
  2602  00C4  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2603  00C5  0084               	movwf	4
  2604  00C6  0800               	movf	0,w
  2605  00C7  20E7               	fcall	PL6	;call to abstracted procedure
  2606  00C8  1803               	skipnc
  2607  00C9  28D5               	goto	l2226
  2608  00CA                     l2222:	
  2609                           
  2610                           ;CheckTouchKey.c: 331: {
  2611                           ;CheckTouchKey.c: 332: if(++KeyUpShake[cnt] > 8)
  2612  00CA  0842               	movf	CheckOnceResult@cnt,w
  2613  00CB  3E39               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2614  00CC  0084               	movwf	4
  2615  00CD  3009               	movlw	9
  2616  00CE  0A80               	incf	0,f
  2617  00CF  0200               	subwf	0,w
  2618  00D0  1C03               	skipc
  2619  00D1  28D9               	goto	l2230
  2620                           
  2621                           ;CheckTouchKey.c: 333: {
  2622                           ;CheckTouchKey.c: 334: KeyClearOne(cnt);
  2623  00D2  0842               	movf	CheckOnceResult@cnt,w
  2624  00D3  2397               	fcall	_KeyClearOne
  2625                           
  2626                           ;CheckTouchKey.c: 335: continue;
  2627  00D4  28E2               	goto	l2234
  2628  00D5                     l2226:	
  2629                           
  2630                           ;CheckTouchKey.c: 338: else
  2631                           ;CheckTouchKey.c: 339: {
  2632                           ;CheckTouchKey.c: 340: KeyUpShake[cnt] = 0;
  2633  00D5  0842               	movf	CheckOnceResult@cnt,w
  2634  00D6  3E39               	addlw	(low (_KeyUpShake| 0))& (0+255)
  2635  00D7  0084               	movwf	4
  2636  00D8  0180               	clrf	0
  2637  00D9                     l2230:	
  2638                           
  2639                           ;CheckTouchKey.c: 347: else if(!(KeyData[0] | KeyData[1]))
  2640  00D9  087B               	movf	_KeyData+1,w	;volatile
  2641  00DA  047A               	iorwf	_KeyData,w	;volatile
  2642  00DB  1D03               	btfss	3,2
  2643  00DC  28E2               	goto	l2234
  2644  00DD                     l2232:	
  2645                           
  2646                           ;CheckTouchKey.c: 348: {
  2647                           ;CheckTouchKey.c: 349: KeyHave(cnt,flag);
  2648  00DD  083E               	movf	CheckOnceResult@flag,w
  2649  00DE  00F2               	movwf	KeyHave@flag
  2650  00DF  01F3               	clrf	KeyHave@flag+1
  2651  00E0  0842               	movf	CheckOnceResult@cnt,w
  2652  00E1  2448               	fcall	_KeyHave
  2653  00E2                     l2234:	
  2654  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  2655  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  2656  00E4  0FC2               	incfsz	CheckOnceResult@cnt,f
  2657  00E5  0008               	return
  2658  00E6  281B               	goto	l2170
  2659  00E7                     __end_of_CheckOnceResult:	
  2660  00E7                     PL6:	
  2661  00E7  00F5               	movwf	??_CheckOnceResult
  2662  00E8  0A84               	incf	4,f
  2663  00E9  0800               	movf	0,w
  2664  00EA  00F6               	movwf	??_CheckOnceResult+1
  2665  00EB  083F               	movf	CheckOnceResult@KeyDown,w
  2666  00EC  0775               	addwf	??_CheckOnceResult,w
  2667  00ED  00F7               	movwf	??_CheckOnceResult+2
  2668  00EE  0876               	movf	??_CheckOnceResult+1,w
  2669  00EF  1803               	skipnc
  2670  00F0  0A76               	incf	??_CheckOnceResult+1,w
  2671  00F1  00F8               	movwf	??_CheckOnceResult+3
  2672  00F2  0841               	movf	CheckOnceResult@KeyResTemp+1,w
  2673  00F3  0278               	subwf	??_CheckOnceResult+3,w
  2674  00F4  1D03               	skipz
  2675  00F5  0008               	return
  2676  00F6  0840               	movf	CheckOnceResult@KeyResTemp,w
  2677  00F7  0277               	subwf	??_CheckOnceResult+2,w
  2678  00F8  0008               	return
  2679  00F9                     __end_ofPL6:	
  2680  00F9                     PL10:	
  2681  00F9  0084               	movwf	4
  2682  00FA  0800               	movf	0,w
  2683  00FB  00F5               	movwf	??_CheckOnceResult
  2684  00FC  0A84               	incf	4,f
  2685  00FD  0800               	movf	0,w
  2686  00FE  00F6               	movwf	??_CheckOnceResult+1
  2687  00FF  0008               	return
  2688  0100                     __end_ofPL10:	
  2689                           
  2690                           	psect	text16
  2691  0448                     __ptext16:	
  2692 ;; *************** function _KeyHave *****************
  2693 ;; Defined at:
  2694 ;;		line 151 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  2695 ;; Parameters:    Size  Location     Type
  2696 ;;  cnt             1    wreg     unsigned char 
  2697 ;;  flag            2    2[COMMON] unsigned int 
  2698 ;; Auto vars:     Size  Location     Type
  2699 ;;  cnt             1    4[COMMON] unsigned char 
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  1    wreg      void 
  2702 ;; Registers used:
  2703 ;;		wreg, status,2, status,0
  2704 ;; Tracked objects:
  2705 ;;		On entry : B00/0
  2706 ;;		On exit  : B00/0
  2707 ;;		Unchanged: 800/0
  2708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2709 ;;      Params:         2       0       0       0
  2710 ;;      Locals:         1       0       0       0
  2711 ;;      Temps:          0       0       0       0
  2712 ;;      Totals:         3       0       0       0
  2713 ;;Total ram usage:        3 bytes
  2714 ;; Hardware stack levels used:    1
  2715 ;; Hardware stack levels required when called:    1
  2716 ;; This function calls:
  2717 ;;		Nothing
  2718 ;; This function is called by:
  2719 ;;		_CheckOnceResult
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           
  2724                           ;psect for function _KeyHave
  2725  0448                     _KeyHave:	
  2726                           
  2727                           ;incstack = 0
  2728                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  2729                           ;KeyHave@cnt stored from wreg
  2730  0448  00F4               	movwf	KeyHave@cnt
  2731                           
  2732                           ;CheckTouchKey.c: 153: KeyCounter++;
  2733  0449  0AB4               	incf	_KeyCounter,f
  2734                           
  2735                           ;CheckTouchKey.c: 156: {
  2736                           ;CheckTouchKey.c: 157: KeyData[0] = 0;
  2737  044A  01FA               	clrf	_KeyData	;volatile
  2738                           
  2739                           ;CheckTouchKey.c: 158: KeyData[1] = 0;
  2740  044B  01FB               	clrf	_KeyData+1	;volatile
  2741                           
  2742                           ;CheckTouchKey.c: 159: if(cnt&0x8)
  2743  044C  1DF4               	btfss	KeyHave@cnt,3
  2744  044D  2C51               	goto	l1952
  2745                           
  2746                           ;CheckTouchKey.c: 160: {
  2747                           ;CheckTouchKey.c: 161: KeyData[1] = flag;
  2748  044E  0872               	movf	KeyHave@flag,w
  2749  044F  00FB               	movwf	_KeyData+1	;volatile
  2750                           
  2751                           ;CheckTouchKey.c: 162: }
  2752  0450  0008               	return
  2753  0451                     l1952:	
  2754                           
  2755                           ;CheckTouchKey.c: 163: else
  2756                           ;CheckTouchKey.c: 164: {
  2757                           ;CheckTouchKey.c: 165: KeyData[0] = flag;
  2758  0451  0872               	movf	KeyHave@flag,w
  2759  0452  00FA               	movwf	_KeyData	;volatile
  2760  0453  0008               	return
  2761  0454                     __end_of_KeyHave:	
  2762                           
  2763                           	psect	text17
  2764  0397                     __ptext17:	
  2765 ;; *************** function _KeyClearOne *****************
  2766 ;; Defined at:
  2767 ;;		line 89 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;  cnt             1    wreg     unsigned char 
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;  cnt             1    2[COMMON] unsigned char 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  1    wreg      void 
  2774 ;; Registers used:
  2775 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 800/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2781 ;;      Params:         0       0       0       0
  2782 ;;      Locals:         1       0       0       0
  2783 ;;      Temps:          0       0       0       0
  2784 ;;      Totals:         1       0       0       0
  2785 ;;Total ram usage:        1 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; Hardware stack levels required when called:    1
  2788 ;; This function calls:
  2789 ;;		Nothing
  2790 ;; This function is called by:
  2791 ;;		_KeyClearIn
  2792 ;;		_KeyStopClear
  2793 ;;		_CheckOnceResult
  2794 ;;		_SystemEnterSleep
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           
  2799                           ;psect for function _KeyClearOne
  2800  0397                     _KeyClearOne:	
  2801                           
  2802                           ;incstack = 0
  2803                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  2804                           ;KeyClearOne@cnt stored from wreg
  2805  0397  00F2               	movwf	KeyClearOne@cnt
  2806                           
  2807                           ;CheckTouchKey.c: 91: KeyOldValue0[cnt] = 0;
  2808  0398  1003               	clrc
  2809  0399  0D72               	rlf	KeyClearOne@cnt,w
  2810  039A  3E2A               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  2811  039B  23EE               	fcall	PL20	;call to abstracted procedure
  2812                           
  2813                           ;CheckTouchKey.c: 92: KeyOldValue1[cnt] = 0;
  2814  039C  1003               	clrc
  2815  039D  0D72               	rlf	KeyClearOne@cnt,w
  2816  039E  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2817  039F  0084               	movwf	4
  2818                           
  2819                           ;CheckTouchKey.c: 93: KeyOldValue2[cnt] = 0;
  2820  03A0  23AA               	fcall	PL22	;call to abstracted procedure
  2821  03A1  3E26               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2822  03A2  0084               	movwf	4
  2823                           
  2824                           ;CheckTouchKey.c: 94: KeyReference[cnt] = 0;
  2825  03A3  23AA               	fcall	PL22	;call to abstracted procedure
  2826  03A4  3E24               	addlw	(low (_KeyReference| 0))& (0+255)
  2827  03A5  0084               	movwf	4
  2828  03A6  0180               	clrf	0
  2829  03A7  0A84               	incf	4,f
  2830  03A8  0180               	clrf	0
  2831  03A9  0008               	return
  2832  03AA                     __end_of_KeyClearOne:	
  2833  03AA                     PL22:	
  2834  03AA  0180               	clrf	0
  2835  03AB  0A84               	incf	4,f
  2836  03AC  0180               	clrf	0
  2837  03AD  1003               	clrc
  2838  03AE  0D72               	rlf	KeyClearOne@cnt,w
  2839  03AF  0008               	return
  2840  03B0                     __end_ofPL22:	
  2841                           
  2842                           	psect	text18
  2843  01E3                     __ptext18:	
  2844 ;; *************** function _CheckKeyOldValue *****************
  2845 ;; Defined at:
  2846 ;;		line 363 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;		None
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;  KeyOldTemp      2    2[BANK0 ] unsigned int 
  2851 ;;  KeyResTemp      2    0[BANK0 ] unsigned int 
  2852 ;;  cnt             1    4[BANK0 ] unsigned char 
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  1    wreg      void 
  2855 ;; Registers used:
  2856 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 300/0
  2859 ;;		On exit  : 300/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2862 ;;      Params:         0       0       0       0
  2863 ;;      Locals:         0       5       0       0
  2864 ;;      Temps:          2       0       0       0
  2865 ;;      Totals:         2       5       0       0
  2866 ;;Total ram usage:        7 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; Hardware stack levels required when called:    3
  2869 ;; This function calls:
  2870 ;;		_KeyIsIn
  2871 ;; This function is called by:
  2872 ;;		_CheckTouchKey
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           
  2877                           ;psect for function _CheckKeyOldValue
  2878  01E3                     _CheckKeyOldValue:	
  2879  01E3  3004               	movlw	4
  2880                           
  2881                           ;CheckTouchKey.c: 365: static unsigned char counter = 0;
  2882                           ;CheckTouchKey.c: 366: unsigned char cnt = 0;
  2883                           
  2884                           ;incstack = 0
  2885                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2886  01E4  01BE               	clrf	CheckKeyOldValue@cnt
  2887                           
  2888                           ;CheckTouchKey.c: 367: unsigned int KeyResTemp;
  2889                           ;CheckTouchKey.c: 368: unsigned int KeyOldTemp;
  2890                           ;CheckTouchKey.c: 370: if(++counter < 4)
  2891  01E5  0AB2               	incf	CheckKeyOldValue@counter,f
  2892  01E6  0232               	subwf	CheckKeyOldValue@counter,w
  2893  01E7  1C03               	btfss	3,0
  2894  01E8  0008               	return
  2895                           
  2896                           ;CheckTouchKey.c: 372: counter = 0;
  2897  01E9  01B2               	clrf	CheckKeyOldValue@counter
  2898  01EA                     l2244:	
  2899                           
  2900                           ;CheckTouchKey.c: 375: {
  2901                           ;CheckTouchKey.c: 376: KeyResTemp = KeyResSum[cnt];
  2902  01EA  1003               	clrc
  2903  01EB  0D3E               	rlf	CheckKeyOldValue@cnt,w
  2904  01EC  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  2905  01ED  0084               	movwf	4
  2906  01EE  1383               	bcf	3,7	;select IRP bank0
  2907  01EF  0800               	movf	0,w
  2908  01F0  00BA               	movwf	CheckKeyOldValue@KeyResTemp
  2909  01F1  0A84               	incf	4,f
  2910  01F2  0800               	movf	0,w
  2911  01F3  00BB               	movwf	CheckKeyOldValue@KeyResTemp+1
  2912                           
  2913                           ;CheckTouchKey.c: 377: if(!KeyIsIn(cnt))
  2914  01F4  083E               	movf	CheckKeyOldValue@cnt,w
  2915  01F5  241B               	fcall	_KeyIsIn
  2916  01F6  3A00               	xorlw	0
  2917                           
  2918                           ;CheckTouchKey.c: 378: {
  2919                           ;CheckTouchKey.c: 380: KeyOldTemp = KeyOldValue0[cnt] - KeyResTemp;
  2920  01F7  1003               	clrc
  2921  01F8  1D03               	skipz
  2922  01F9  2A2A               	goto	L14
  2923  01FA  0D3E               	rlf	CheckKeyOldValue@cnt,w
  2924  01FB  3E2A               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  2925  01FC  0084               	movwf	4
  2926  01FD  1383               	bcf	3,7	;select IRP bank0
  2927                           
  2928                           ;CheckTouchKey.c: 381: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  2929  01FE  2238               	fcall	PL4	;call to abstracted procedure
  2930  01FF  1903               	skipnz
  2931  0200  023C               	subwf	CheckKeyOldValue@KeyOldTemp,w
  2932  0201  1C03               	skipc
  2933  0202  2A09               	goto	L11
  2934  0203  0F3C               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  2935  0204  2A29               	goto	l893
  2936  0205  0A3D               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  2937                           
  2938                           ;CheckTouchKey.c: 382: {
  2939                           ;CheckTouchKey.c: 383: KeyOldTemp = KeyOldValue1[cnt] - KeyResTemp;
  2940  0206  1003               	clrc
  2941  0207  1D03               	btfss	3,2
  2942  0208  2A2A               	goto	L14
  2943  0209                     L11:	
  2944  0209  0D3E               	rlf	CheckKeyOldValue@cnt,w
  2945  020A  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2946  020B  0084               	movwf	4
  2947                           
  2948                           ;CheckTouchKey.c: 384: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  2949  020C  2238               	fcall	PL4	;call to abstracted procedure
  2950  020D  1903               	skipnz
  2951  020E  023C               	subwf	CheckKeyOldValue@KeyOldTemp,w
  2952  020F  1C03               	skipc
  2953  0210  2A17               	goto	L12
  2954  0211  0F3C               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  2955  0212  2A29               	goto	l893
  2956  0213  0A3D               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  2957                           
  2958                           ;CheckTouchKey.c: 385: {
  2959                           ;CheckTouchKey.c: 386: KeyOldTemp = KeyOldValue2[cnt] - KeyResTemp;
  2960  0214  1003               	clrc
  2961  0215  1D03               	btfss	3,2
  2962  0216  2A2A               	goto	L14
  2963  0217                     L12:	
  2964  0217  0D3E               	rlf	CheckKeyOldValue@cnt,w
  2965  0218  3E26               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  2966  0219  0084               	movwf	4
  2967                           
  2968                           ;CheckTouchKey.c: 387: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  2969  021A  2238               	fcall	PL4	;call to abstracted procedure
  2970  021B  1903               	skipnz
  2971  021C  023C               	subwf	CheckKeyOldValue@KeyOldTemp,w
  2972  021D  1C03               	skipc
  2973  021E  2A25               	goto	L13
  2974  021F  0F3C               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  2975  0220  2A29               	goto	l893
  2976  0221  0A3D               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  2977                           
  2978                           ;CheckTouchKey.c: 388: {
  2979                           ;CheckTouchKey.c: 389: KeyReference[cnt] = KeyResTemp;
  2980  0222  1003               	clrc
  2981  0223  1D03               	btfss	3,2
  2982  0224  2A2A               	goto	L14
  2983  0225                     L13:	
  2984  0225  0D3E               	rlf	CheckKeyOldValue@cnt,w
  2985  0226  3E24               	addlw	(low (_KeyReference| 0))& (0+255)
  2986  0227  0084               	movwf	4
  2987  0228  2259               	fcall	PL24	;call to abstracted procedure
  2988  0229                     l893:	
  2989                           
  2990                           ;CheckTouchKey.c: 390: }
  2991                           ;CheckTouchKey.c: 391: }
  2992                           ;CheckTouchKey.c: 392: }
  2993                           ;CheckTouchKey.c: 393: }
  2994                           ;CheckTouchKey.c: 396: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  2995  0229  1003               	clrc
  2996  022A                     L14:	
  2997  022A  0D3E               	rlf	CheckKeyOldValue@cnt,w
  2998  022B  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  2999  022C  0084               	movwf	4
  3000  022D  1383               	bcf	3,7	;select IRP bank0
  3001  022E  2251               	fcall	PL18	;call to abstracted procedure
  3002  022F  3E26               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3003                           
  3004                           ;CheckTouchKey.c: 397: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  3005  0230  2246               	fcall	PL16	;call to abstracted procedure
  3006  0231  2251               	fcall	PL18	;call to abstracted procedure
  3007  0232  3E28               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3008                           
  3009                           ;CheckTouchKey.c: 398: KeyOldValue0[cnt] = KeyResTemp;
  3010  0233  2246               	fcall	PL16	;call to abstracted procedure
  3011  0234  2259               	fcall	PL24	;call to abstracted procedure
  3012  0235  0FBE               	incfsz	CheckKeyOldValue@cnt,f
  3013  0236  0008               	return
  3014  0237  29EA               	goto	l2244
  3015  0238                     __end_of_CheckKeyOldValue:	
  3016  0238                     PL4:	
  3017  0238  0800               	movf	0,w
  3018  0239  00BC               	movwf	CheckKeyOldValue@KeyOldTemp
  3019  023A  0A84               	incf	4,f
  3020  023B  0800               	movf	0,w
  3021  023C  00BD               	movwf	CheckKeyOldValue@KeyOldTemp+1
  3022  023D  083A               	movf	CheckKeyOldValue@KeyResTemp,w
  3023  023E  02BC               	subwf	CheckKeyOldValue@KeyOldTemp,f
  3024  023F  083B               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3025  0240  1C03               	skipc
  3026  0241  03BD               	decf	CheckKeyOldValue@KeyOldTemp+1,f
  3027  0242  02BD               	subwf	CheckKeyOldValue@KeyOldTemp+1,f
  3028  0243  3000               	movlw	0
  3029  0244  023D               	subwf	CheckKeyOldValue@KeyOldTemp+1,w
  3030  0245  3402               	retlw	2
  3031  0246                     __end_ofPL4:	
  3032  0246                     PL16:	
  3033  0246  0084               	movwf	4
  3034  0247  0874               	movf	??_CheckKeyOldValue,w
  3035  0248  0080               	movwf	0
  3036  0249  0A84               	incf	4,f
  3037  024A  0875               	movf	??_CheckKeyOldValue+1,w
  3038  024B  0080               	movwf	0
  3039  024C  1003               	clrc
  3040  024D  0D3E               	rlf	CheckKeyOldValue@cnt,w
  3041  024E  3E2A               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3042  024F  0084               	movwf	4
  3043  0250  0008               	return
  3044  0251                     __end_ofPL16:	
  3045  0251                     PL18:	
  3046  0251  0800               	movf	0,w
  3047  0252  00F4               	movwf	??_CheckKeyOldValue
  3048  0253  0A84               	incf	4,f
  3049  0254  0800               	movf	0,w
  3050  0255  00F5               	movwf	??_CheckKeyOldValue+1
  3051  0256  1003               	clrc
  3052  0257  0D3E               	rlf	CheckKeyOldValue@cnt,w
  3053  0258  0008               	return
  3054  0259                     __end_ofPL18:	
  3055  0259                     PL24:	
  3056  0259  083A               	movf	CheckKeyOldValue@KeyResTemp,w
  3057  025A  0080               	movwf	0
  3058  025B  0A84               	incf	4,f
  3059  025C  083B               	movf	CheckKeyOldValue@KeyResTemp+1,w
  3060  025D  0080               	movwf	0
  3061  025E  0008               	return
  3062  025F                     __end_ofPL24:	
  3063                           
  3064                           	psect	text19
  3065  041B                     __ptext19:	
  3066 ;; *************** function _KeyIsIn *****************
  3067 ;; Defined at:
  3068 ;;		line 67 in file "D:\ToolsDesign\SCMCU\SCTouch_lib\Sleep\XC8\M1810\CheckTouchKey.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;  cnt             1    wreg     unsigned char 
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;  cnt             1    3[COMMON] unsigned char 
  3073 ;;  i               1    2[COMMON] unsigned char 
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  1    wreg      unsigned char 
  3076 ;; Registers used:
  3077 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 300/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3083 ;;      Params:         0       0       0       0
  3084 ;;      Locals:         2       0       0       0
  3085 ;;      Temps:          0       0       0       0
  3086 ;;      Totals:         2       0       0       0
  3087 ;;Total ram usage:        2 bytes
  3088 ;; Hardware stack levels used:    2
  3089 ;; Hardware stack levels required when called:    1
  3090 ;; This function calls:
  3091 ;;		Nothing
  3092 ;; This function is called by:
  3093 ;;		_KeyClearIn
  3094 ;;		_CheckOnceResult
  3095 ;;		_CheckKeyOldValue
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           
  3100                           ;psect for function _KeyIsIn
  3101  041B                     _KeyIsIn:	
  3102                           
  3103                           ;incstack = 0
  3104                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  3105                           ;KeyIsIn@cnt stored from wreg
  3106  041B  00F3               	movwf	KeyIsIn@cnt
  3107                           
  3108                           ;CheckTouchKey.c: 69: unsigned char i = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  3109  041C  3907               	andlw	7
  3110  041D  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  3111  041E  0084               	movwf	4
  3112  041F  2408               	fcall	stringdir
  3113  0420  00F2               	movwf	KeyIsIn@i
  3114                           
  3115                           ;CheckTouchKey.c: 71: if(cnt&0x8)
  3116  0421  1DF3               	btfss	KeyIsIn@cnt,3
  3117  0422  2C27               	goto	l1914
  3118                           
  3119                           ;CheckTouchKey.c: 72: {
  3120                           ;CheckTouchKey.c: 73: i &= KeyFlag[1];
  3121  0423  1283               	bcf	3,5	;RP0=0, select bank0
  3122  0424  1303               	bcf	3,6	;RP1=0, select bank0
  3123  0425  082F               	movf	_KeyFlag+1,w	;volatile
  3124  0426  2C2A               	goto	L15
  3125  0427                     l1914:	
  3126                           ;CheckTouchKey.c: 74: }
  3127                           
  3128                           
  3129                           ;CheckTouchKey.c: 75: else
  3130                           ;CheckTouchKey.c: 76: {
  3131                           ;CheckTouchKey.c: 77: i &= KeyFlag[0];
  3132  0427  1283               	bcf	3,5	;RP0=0, select bank0
  3133  0428  1303               	bcf	3,6	;RP1=0, select bank0
  3134  0429  082E               	movf	_KeyFlag,w	;volatile
  3135  042A                     L15:	
  3136  042A  05F2               	andwf	KeyIsIn@i,f
  3137                           
  3138                           ;CheckTouchKey.c: 78: }
  3139                           ;CheckTouchKey.c: 79: return i;
  3140  042B  0872               	movf	KeyIsIn@i,w
  3141  042C  0008               	return
  3142  042D                     __end_of_KeyIsIn:	
  3143                           
  3144                           	psect	text20
  3145  037C                     __ptext20:	
  3146 ;; *************** function _Isr_Timer *****************
  3147 ;; Defined at:
  3148 ;;		line 99 in file "C:\Users\hhmm6\Desktop\scm\GN_101bt\main.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;		None
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;		None
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      void 
  3155 ;; Registers used:
  3156 ;;		wreg, status,2, status,0
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 300/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3162 ;;      Params:         0       0       0       0
  3163 ;;      Locals:         0       0       0       0
  3164 ;;      Temps:          2       0       0       0
  3165 ;;      Totals:         2       0       0       0
  3166 ;;Total ram usage:        2 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; This function calls:
  3169 ;;		Nothing
  3170 ;; This function is called by:
  3171 ;;		Interrupt level 1
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           
  3176                           ;psect for function _Isr_Timer
  3177  037C                     _Isr_Timer:	
  3178                           
  3179                           ;main.c: 101: if(T0IF)
  3180  037C  1D0B               	btfss	11,2	;volatile
  3181  037D  2B8B               	goto	i1l2442
  3182                           
  3183                           ;main.c: 102: {
  3184                           ;main.c: 103: TMR0 += 6;
  3185  037E  3006               	movlw	6
  3186  037F  1283               	bcf	3,5	;RP0=0, select bank0
  3187  0380  1303               	bcf	3,6	;RP1=0, select bank0
  3188  0381  0781               	addwf	1,f	;volatile
  3189                           
  3190                           ;main.c: 104: T0IF = 0;
  3191  0382  110B               	bcf	11,2	;volatile
  3192                           
  3193                           ;main.c: 105: if(++MainTime >= 32)
  3194  0383  3020               	movlw	32
  3195  0384  0AB8               	incf	_MainTime,f	;volatile
  3196  0385  0238               	subwf	_MainTime,w	;volatile
  3197  0386  1C03               	skipc
  3198  0387  2B90               	goto	i1l483
  3199                           
  3200                           ;main.c: 106: {
  3201                           ;main.c: 107: MainTime = 0;
  3202  0388  01B8               	clrf	_MainTime	;volatile
  3203                           
  3204                           ;main.c: 108: B_MainLoop = 1;
  3205  0389  1779               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  3206  038A  2B90               	goto	i1l483
  3207  038B                     i1l2442:	
  3208                           
  3209                           ;main.c: 111: else
  3210                           ;main.c: 112: {
  3211                           ;main.c: 113: INTCON = 0XA0;
  3212  038B  30A0               	movlw	160
  3213  038C  008B               	movwf	11	;volatile
  3214                           
  3215                           ;main.c: 114: PIR1 = 0;
  3216  038D  1283               	bcf	3,5	;RP0=0, select bank0
  3217  038E  1303               	bcf	3,6	;RP1=0, select bank0
  3218  038F  018C               	clrf	12	;volatile
  3219  0390                     i1l483:	
  3220  0390  0871               	movf	??_Isr_Timer+1,w
  3221  0391  008A               	movwf	10
  3222  0392  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3223  0393  0083               	movwf	3
  3224  0394  0EFE               	swapf	126,f
  3225  0395  0E7E               	swapf	126,w
  3226  0396  0009               	retfie
  3227  0397                     __end_of_Isr_Timer:	
  3228  007E                     btemp	set	126	;btemp
  3229  007E                     wtemp0	set	126
  3230                           
  3231                           	psect	intentry
  3232  0004                     __pintentry:	
  3233                           ;incstack = 0
  3234                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  3235                           
  3236  0004                     interrupt_function:	
  3237  007E                     saved_w	set	btemp
  3238  0004  00FE               	movwf	btemp
  3239  0005  0E03               	swapf	3,w
  3240  0006  00F0               	movwf	??_Isr_Timer
  3241  0007  080A               	movf	10,w
  3242  0008  00F1               	movwf	??_Isr_Timer+1
  3243  0009  2B7C               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    13
    Data        1
    BSS         28
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      12
    BANK0            80     13      42
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _SystemEnterSleep->_GetTouchKeyValue_Sleep
    _GetTouchKeyValue_Sleep->_ClearResSum
    _CheckTouchKey->_CheckOnceResult
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4061
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                       _processPress
 ---------------------------------------------------------------------------------
 (1) _processPress                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0    1342
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                    13    13      0    1342
                                              0 BANK0     13    13      0
                        _ClearResSum
             _GetTouchKeyValue_Sleep
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue_Sleep                               4     4      0     203
                                              3 COMMON     4     4      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    2719
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _GetTouchKeyValue                                     4     4      0     203
                                              3 COMMON     4     4      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1463
                                              5 COMMON     4     4      0
                                              0 BANK0      9     9      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     304
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue_Sleep
         _ClearResSum
       _KeyClearOne
   _processPress

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK2               50      0       0       9        0.0%
BITBANK2            50      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      D      2A       3       52.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       C       1       85.7%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      36      10        0.0%
ABS                  0      0      36       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Aug 02 13:08:00 2020

                     KeyIsIn@cnt 0073                       KeyHave@cnt 0074                      KeyHave@flag 0072  
 __end_of_GetTouchKeyValue_Sleep 02AB                                pc 0002                               PL2 01B9  
                             PL4 0238                               PL6 00E7                               PL8 02AB  
     SystemEnterSleep@KeyOldTemp 0044                    ??_KeyClearOne 0072            __size_of_TurnKeyFlags 002F  
                             fsr 0004                 ??_CheckValidTime 0072       SystemEnterSleep@KeyResTemp 0042  
                            PL10 00F9                              PL20 03EE                              PL12 01C8  
                            PL22 03AA                              PL14 01CF                              PL24 0259  
                            PL16 0246                              PL26 01D9                              PL18 0251  
                            PL28 01DE                              l504 0439                              l473 03C1  
                            l911 031C                              l930 033D                              l852 02EE  
                            l942 0100                              l946 0129                              l893 0229  
                            l969 0291                              _RB5 0035                              _PR2 0091  
                            fsr0 0004                              indf 0000              CheckOnceResult@flag 003E  
              ?_GetTouchKeyValue 0070         __end_of_Table_KeyChannel 0418               ??_GetTouchKeyValue 0073  
                           l2000 02A0                             l2008 045F                             l2202 0098  
                           l2122 03E3                             l2230 00D9                             l2222 00CA  
                           l2310 03F4                             l2134 02BE                             l2302 0323  
                           l2232 00DD                             l2208 00A0                             l2226 00D5  
                           l2234 00E2                             l2170 001B                             l2162 02F6  
                           l2138 02C2                             l2244 01EA                             l2316 0405  
                           l2164 02F9                             l2412 034E                             l2404 034A  
                           l2420 0356                             l2414 0352                             l2514 0150  
                           l2188 006B                             l2366 03C4                             l2518 0154  
                           l1914 0427                             l1922 0470                             l2490 0122  
                           l1924 0471                             l2580 0455                             l1934 043C  
                           l2558 01B3                             l1952 0451                             l1928 043B  
                           l1938 0443                             l1962 0263                             l1994 029A  
                           _T0IF 005A                             u1005 0026                             u1025 005D  
                           u1035 0071                             u1045 007C                             u1075 00B8  
                           u1505 014D                             _PIE1 000D                             _RBIF 0058  
                           _PIR1 000C                             _TMR0 0001                             _WPDB 0087  
                           _WPUB 0008                             _main 0454                             btemp 007E  
                  ?_KeyStopClear 0070                             start 000A                     _TurnKeyFlags 0301  
                __end_of_KeyIsIn 042D                  __end_of_KeyHave 0454       CheckKeyOldValue@KeyOldTemp 003C  
                  ??_Init_System 0072       CheckKeyOldValue@KeyResTemp 003A                            ?_main 0070  
                          _T2CON 0012         __end_of_SystemEnterSleep 01B9                            i1l483 0390  
                          _PORTB 0006                            _TRISB 0086              __end_of_KeyClearOne 03AA  
                     _KeyClearIn 043B                   __pbitbssCOMMON 03C8                            pclath 000A  
                    _ClearResSum 0470                       _KeyCounter 0034                       _KeyOldData 0022  
                 ??_KeyStopClear 0073                            status 0003                            wtemp0 007E  
                     _KeyUpShake 0039                  __initialization 000B                     __end_of_main 045F  
                         ??_main 0079              __end_of_Init_System 037C                           i1l2442 038B  
                         _INTCON 000B               __size_of_KeyServer 0018                           _OSCCON 0088  
                         _TRISB5 0435                        ??_KeyIsIn 0072                        ??_KeyHave 0074  
             __size_of_Isr_Timer 001B        CheckOnceResult@KeyResTemp 0040           CheckOnceResult@KeyDown 003F  
      __size_of_CheckKeyOldValue 0055                           _b_kclr 03CA                           _b_kerr 03C9  
                    _KeyClearOne 0397                    _Table_KeyFalg 040E                    _Table_KeyDown 0419  
                         saved_w 007E           __size_of_CheckTouchKey 0027                      ?_KeyClearIn 0070  
                _CheckOnceResult 0017          __end_of__initialization 0015               __size_of_WorkSleep 0016  
                 __pcstackCOMMON 0070                     __pidataBANK0 0000                      _Init_System 0357  
                     __end_ofPL2 01C8                       __end_ofPL4 0246                       __end_ofPL6 00F9  
                     __end_ofPL8 02BA                __end_of_KeyServer 03C8             __end_of_KeyStopClear 03EE  
              __end_of_Isr_Timer 0397                       __pbssBANK0 0020        __size_of_GetTouchKeyValue 0047  
                  _CheckTouchKey 0330                       __pmaintext 0454                       __pintentry 0004  
            __size_of_KeyClearIn 000D                __end_of_WorkSleep 03DE                ?_SystemEnterSleep 0070  
        __end_of_CheckOnceResult 00E7                          _KEYCON0 0092                          _KEYCON1 0093  
                        _KEYCON2 0016             __end_of_Table_C_LVBO 0419                    KeyStopClear@i 0073  
             ??_SystemEnterSleep 003A                          _B_OnOff 03CD           __size_of_Refurbish_Sfr 0009  
           __end_of_Table_KeyCap 041B                       __stringtab 0408                     ?_ClearResSum 0070  
                        _KeyData 007A                          _KeyFlag 002E                          _KeyIsIn 041B  
                        _KeyHave 0448                   ClearResSum@cnt 0072                   ?_CheckTouchKey 0070  
                        _PwmData 0047          CheckOnceResult@KeyValue 003C                 _CheckKeyOldValue 01E3  
        CheckOnceResult@OldValue 003A           TurnKeyFlags@KeyNoTimes 0030             GetTouchKeyValue@wake 0073  
           GetTouchKeyValue@temp 0075                          _b_kover 03CC                          __ptext1 042D  
                        __ptext2 03C8                          __ptext3 0100                          __ptext4 025F  
                        __ptext5 045F                          __ptext6 03B0                          __ptext7 0357  
                        __ptext8 0330                          __ptext9 0301          __size_of_CheckValidTime 0014  
                        clrloop0 0469             end_of_initialization 0015         ??_GetTouchKeyValue_Sleep 0073  
                  _Refurbish_Sfr 045F                     _KeyOldValue0 002A                     _KeyOldValue1 0028  
                   _KeyOldValue2 0026            __size_of_KeyStopClear 0010                     ?_KeyClearOne 0070  
                   _KeyReference 0024                    ?_processPress 0070                 ?_CheckOnceResult 0070  
                   ??_KeyClearIn 0074               CheckOnceResult@cnt 0042                  ??_CheckTouchKey 0079  
                   _KeyStopClear 03DE                 _GetTouchKeyValue 02BA                   ?_Refurbish_Sfr 0070  
                   ?_Init_System 0070               __end_of_KeyClearIn 0448                   ??_processPress 0072  
                  WorkSleep@time 0035                        _KeyMaxSub 0033                        _KeyResSum 002C  
                    __end_ofPL10 0100                      __end_ofPL20 03F4                      __end_ofPL12 01CF  
                    __end_ofPL22 03B0                      __end_ofPL14 01D9                      __end_ofPL24 025F  
                    __end_ofPL16 0251                      __end_ofPL26 01DE                      __end_ofPL18 0259  
                    __end_ofPL28 01E3              start_initialization 000B                        _KeyServer 03B0  
                      _Isr_Timer 037C             __size_of_ClearResSum 0008  __size_of_GetTouchKeyValue_Sleep 004C  
                  ?_TurnKeyFlags 0070                     _Table_C_LVBO 0418         TurnKeyFlags@KeyHaveTimes 0031  
                    __pdataBANK0 0049                     _Table_KeyCap 041A                      __pbssCOMMON 007A  
                     ?_KeyServer 0070                        ___latbits 0000                    __pcstackBANK0 003A  
                      _WorkSleep 03C8                   _CheckValidTime 03F4         __end_of_CheckKeyOldValue 0238  
                     ?_Isr_Timer 0070              KeyServer@KeyOldFlag 0036                         ?_KeyIsIn 0070  
                       ?_KeyHave 0072        __size_of_SystemEnterSleep 00B9                  ??_Refurbish_Sfr 0072  
                 ??_TurnKeyFlags 0075                        __pnvBANK0 0047                        __pstrings 0408  
           __size_of_KeyClearOne 0013           _GetTouchKeyValue_Sleep 025F           __end_of_CheckValidTime 0408  
                     ?_WorkSleep 0070              GetTouchKeyValue@cnt 0076                         _KEYDATAH 0095  
                       _KEYDATAL 0094                interrupt_function 0004             __end_of_processPress 043B  
                      clear_ram0 0468              CheckKeyOldValue@cnt 003E                         KeyIsIn@i 0072  
                    __stringbase 040D             __size_of_Init_System 0025            __end_of_Table_KeyFalg 0416  
          __end_of_Table_KeyDown 041A         __end_of_GetTouchKeyValue 0301                  ?_CheckValidTime 0070  
                    ??_KeyServer 0072                      ??_Isr_Timer 0070                         _MainTime 0038  
     GetTouchKeyValue_Sleep@wake 0073       GetTouchKeyValue_Sleep@temp 0075                 __size_of_KeyIsIn 0012  
               __size_of_KeyHave 000C                 _Table_KeyChannel 0416         SystemEnterSleep@KeyValue 003E  
             __end_of__stringtab 040E                         _b_kover1 03CB                         _b_ksleep 03C8  
           __end_of_TurnKeyFlags 0330                      ??_WorkSleep 0077          CheckValidTime@validtime 0020  
                       __ptext10 043B                         __ptext11 03DE                         __ptext20 037C  
                       __ptext12 02BA                         __ptext13 0470                         __ptext14 03F4  
                       __ptext15 0017                         __ptext16 0448                         __ptext17 0397  
                       __ptext18 01E3                         __ptext19 041B         __size_of_CheckOnceResult 00D0  
                  __size_of_main 000B                 _SystemEnterSleep 0100                         _lowCount 0049  
          __end_of_CheckTouchKey 0357                         _pressKey 0037        GetTouchKeyValue_Sleep@cnt 0076  
        CheckKeyOldValue@counter 0032                ?_CheckKeyOldValue 0070            __size_of_processPress 000E  
                       intlevel1 0000                    ??_ClearResSum 0072               ??_CheckKeyOldValue 0074  
                      stringcode 0408             SystemEnterSleep@wake 0040                       _B_MainLoop 03CE  
        ?_GetTouchKeyValue_Sleep 0070                       _OPTION_REG 0081                     _processPress 042D  
                       stringdir 0408              SystemEnterSleep@cnt 0046                         stringtab 0408  
                 KeyClearOne@cnt 0072                    KeyClearIn@cnt 0074            __end_of_Refurbish_Sfr 0468  
            __end_of_ClearResSum 0478                ??_CheckOnceResult 0075  
