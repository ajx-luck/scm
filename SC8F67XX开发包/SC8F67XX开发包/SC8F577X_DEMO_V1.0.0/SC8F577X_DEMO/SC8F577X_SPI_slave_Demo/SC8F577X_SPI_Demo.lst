---- H:\MyDownloads\说明书&测试报告\开发包\SC8F577X开发包\SC8F577X_DEMO\SC8F577X_SPI_slave_Demo\main.c ----------------------------------------------------------------------
1:                /**********************************************************
2:                
3:                **********************************************************/
4:                
5:                #include <sc.h>
6:                
7:                
8:                
9:                volatile unsigned int   result,result1,result2;
10:               volatile unsigned char ReceBuffer;	//接收到的数据
11:               volatile unsigned char SendBuffer;	//待发送的数据
12:               
13:               
14:               void DelayXms(unsigned char x);
15:               
16:               
17:               /***********************************************************
18:               函数名称：DelayXms
19:               函数功能：毫秒级非精准延时
20:               入口参数：x - 延时时间
21:               出口参数：
22:               备    注：
23:               ***********************************************************/
24:               void DelayXms(unsigned char x)
  0055    00FB    LD	0x7B,A
25:               {
26:               	unsigned char i,j;
27:               	for(i=x;i>0;i--)
  0056    00FC    LD	0x7C,A
  0057    087C    LD	A,0x7C
  0058    1903    SZB	0x3,2
  0059    0008    RET
28:               		for(j=153;j>0;j--);
  005A    3099    LDIA	0x99
  005B    00FD    LD	0x7D,A
  005C    0BFD    SZDECR	0x7D
  005D    285C    JP	0x5C
  005E    03FC    DECR	0x7C
  005F    2857    JP	0x57
29:               }
30:               
31:               /***********************************************************
32:               main主函数
33:               ***********************************************************/
34:               
35:               void Init_System();
36:               
37:               volatile unsigned char IICReadData;
38:               void main()
39:               {
40:               	Init_System();
  0019    118A    CLRB	0xA,3
  001A    202E    CALL	0x2E
  001B    118A    CLRB	0xA,3
41:               	
42:               	TRISA |=   0b00000011;  //RA0 RA1输入态，做IIC 引脚
  001C    3003    LDIA	0x3
  001D    1683    SETB	0x3,5
  001E    0485    ORR	0x5
43:               	SPICON =   0B00100100;  // SPI  使能 从动模式
  001F    3024    LDIA	0x24
  0020    1283    CLRB	0x3,5
  0021    1703    SETB	0x3,6
  0022    009D    LD	0x1D,A
44:               	SPICON2 =  0B00000000;  // SPI  4线  从动模式
  0023    019E    CLR	0x1E
45:                   
46:               	 SPIIF =0;
  0024    1303    CLRB	0x3,6
  0025    118C    CLRB	0xC,3
47:               	 SPIIE=1;
  0026    158D    SETB	0xD,3
48:               	 PEIE =1;
  0027    170B    SETB	0xB,6
49:               	 GIE =1;  
  0028    178B    SETB	0xB,7
50:               
51:               	while(1)
52:               	{
53:                        DelayXms(200);
  0029    30C8    LDIA	0xC8
  002A    118A    CLRB	0xA,3
  002B    2055    CALL	0x55
  002C    118A    CLRB	0xA,3
  002D    2829    JP	0x29
54:               
55:               	}
56:               }
57:               
58:               
59:               
60:               /***********************************************
61:               函数名称：Init_System
62:               函数功能：系统初始化
63:               入口参数：无
64:               出口参数：无
65:               备注：
66:               ************************************************/
67:               void Init_System()
  002E    0000    NOP
  002F    0064    CLRWDT
68:               {
69:               	asm("nop");
70:               	asm("clrwdt");
71:               	INTCON = 0;					//系统初始化
  0030    018B    CLR	0xB
72:               	OSCCON = 0X70;				//配置振荡为8M,关WDT
  0031    3070    LDIA	0x70
  0032    1683    SETB	0x3,5
  0033    1303    CLRB	0x3,6
  0034    0088    LD	0x8,A
73:               	OPTION_REG = 0;
  0035    0181    CLR	0x1
74:               	
75:                   WPUA  = 0B00000000;			//初始化上拉
  0036    1283    CLRB	0x3,5
  0037    0187    CLR	0x7
76:                   WPUB  = 0B00001000;			
  0038    3008    LDIA	0x8
  0039    0088    LD	0x8,A
77:                 
78:                
79:               	TRISA = 0B00000000;			//初始化IO状态
  003A    1683    SETB	0x3,5
  003B    0185    CLR	0x5
80:               	TRISB = 0B00110100;
  003C    3034    LDIA	0x34
  003D    0086    LD	0x6,A
81:               
82:               	PORTA = 0B00000000;
  003E    1283    CLRB	0x3,5
  003F    0185    CLR	0x5
83:               	PORTB = 0B00000000;			//初始化输出
  0040    0186    CLR	0x6
  0041    0008    RET
84:               
85:               }
86:               
87:               /***********************************************
88:               函数名称：PB_Isr
89:               函数功能：PB电平变化中断服务
90:               入口参数：无
91:               出口参数：无
92:               备注：
93:               ************************************************/
94:               void interrupt PB_Isr()
95:               {
96:               	if(RBIF)
  0042    180B    SZB	0xB,0
97:               	{
98:               		RBIF = 0;			//清中断标志
  0043    100B    CLRB	0xB,0
99:               		
100:              		//Init_System();
101:              	}
102:              	
103:              	if(SPIIF==1)
  0044    1283    CLRB	0x3,5
  0045    1303    CLRB	0x3,6
  0046    1D8C    SNZB	0xC,3
  0047    284E    JP	0x4E
104:              	{
105:              	   SPIIF = 0;
  0048    118C    CLRB	0xC,3
106:              	   
107:              	   ReceBuffer = SPIBUF;
  0049    1703    SETB	0x3,6
  004A    081C    LD	A,0x1C
  004B    00F8    LD	0x78,A
108:              	   
109:              	   
110:              	   SPIBUF =0x11;	
  004C    3011    LDIA	0x11
  004D    009C    LD	0x1C,A
  004E    087A    LD	A,0x7A
  004F    008A    LD	0xA,A
  0050    0E79    SWAPA	0x79
  0051    0083    LD	0x3,A
  0052    0EFE    SWAPR	0x7E
  0053    0E7E    SWAPA	0x7E
  0054    0009    RETI
111:              	
112:              	}
113:              }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280B    JP	0xB
  000B    118A    CLRB	0xA,3
  000C    280D    JP	0xD
---- start_initialization ------------------------------------------------------------------
  000D    01F0    CLR	0x70
  000E    01F1    CLR	0x71
  000F    01F2    CLR	0x72
  0010    01F3    CLR	0x73
  0011    01F4    CLR	0x74
  0012    01F5    CLR	0x75
  0013    01F6    CLR	0x76
  0014    01F7    CLR	0x77
  0015    01F8    CLR	0x78
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F9    LD	0x79,A
  0007    080A    LD	A,0xA
  0008    00FA    LD	0x7A,A
  0009    118A    CLRB	0xA,3
  000A    2842    JP	0x42
---- common_function ------------------------------------------------------------------
  0016    0183    CLR	0x3
  0017    118A    CLRB	0xA,3
  0018    2819    JP	0x19
