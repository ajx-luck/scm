

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Oct 19 16:38:15 2018

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	89F1232
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	pa_nodes0,global,class=CODE,delta=2
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 1.45
    16                           ; Generated 16/11/2017 GMT
    17                           ; 
    18                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F887 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     
    50                           	psect	text0
    51  0000                     __ptext0:	
    52  000B                     _INTCON	set	11
    53  009F                     _ADRESH	set	159
    54  009E                     _ADRESL	set	158
    55  009D                     _ADCON0	set	157
    56  009C                     _ADCON1	set	156
    57  0088                     _OSCCON	set	136
    58  04E9                     _GODONE	set	1257
    59  0437                     _TRISB7	set	1079
    60                           
    61                           	psect	cinit
    62  07EE                     start_initialization:	
    63                           ; #config settings
    64                           
    65  07EE                     __initialization:	
    66                           
    67                           ; Clear objects allocated to COMMON
    68  07EE  01FB               	clrf	__pbssCOMMON& (0+127)
    69  07EF  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
    70  07F0  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
    71                           
    72                           ; Clear objects allocated to BANK0
    73  07F1  1283               	bcf	3,5	;RP0=0, select bank0
    74  07F2  1303               	bcf	3,6	;RP1=0, select bank0
    75  07F3  01A0               	clrf	__pbssBANK0& (0+127)
    76  07F4  01A1               	clrf	(__pbssBANK0+1)& (0+127)
    77  07F5  01A2               	clrf	(__pbssBANK0+2)& (0+127)
    78  07F6  01A3               	clrf	(__pbssBANK0+3)& (0+127)
    79  07F7  01A4               	clrf	(__pbssBANK0+4)& (0+127)
    80  07F8  01A5               	clrf	(__pbssBANK0+5)& (0+127)
    81  07F9  01A6               	clrf	(__pbssBANK0+6)& (0+127)
    82  07FA  01A7               	clrf	(__pbssBANK0+7)& (0+127)
    83  07FB  01A8               	clrf	(__pbssBANK0+8)& (0+127)
    84  07FC  01A9               	clrf	(__pbssBANK0+9)& (0+127)
    85  07FD                     end_of_initialization:	
    86                           ;End of C runtime variable initialization code
    87                           
    88  07FD                     __end_of__initialization:	
    89  07FD  0183               	clrf	3
    90  07FE  118A  2EC3         	ljmp	_main	;jump to C main() function
    91                           
    92                           	psect	bssCOMMON
    93  007B                     __pbssCOMMON:	
    94  007B                     ADC_Sample@admin:	
    95  007B                     	ds	2
    96  007D                     ADC_Sample@adtimes:	
    97  007D                     	ds	1
    98                           
    99                           	psect	bssBANK0
   100  0020                     __pbssBANK0:	
   101  0020                     ADC_Sample@adsum:	
   102  0020                     	ds	4
   103  0024                     ADC_Sample@admax:	
   104  0024                     	ds	2
   105  0026                     _result:	
   106  0026                     	ds	2
   107  0028                     _adresult:	
   108  0028                     	ds	2
   109                           
   110                           	psect	cstackCOMMON
   111  0070                     __pcstackCOMMON:	
   112  0070                     ?_DelayXms:	
   113  0070                     ??_DelayXms:	
   114                           ; 1 bytes @ 0x0
   115                           
   116  0070                     ?_ADC_Sample:	
   117                           ; 1 bytes @ 0x0
   118                           
   119  0070                     ?_ADC_Result:	
   120                           ; 1 bytes @ 0x0
   121                           
   122  0070                     ??_ADC_Result:	
   123                           ; 1 bytes @ 0x0
   124                           
   125  0070                     ?_main:	
   126                           ; 1 bytes @ 0x0
   127                           
   128  0070                     DelayXms@x:	
   129                           ; 1 bytes @ 0x0
   130                           
   131                           
   132                           ; 1 bytes @ 0x0
   133  0070                     	ds	1
   134  0071                     ADC_Result@adch:	
   135  0071                     DelayXms@i:	
   136                           ; 1 bytes @ 0x1
   137                           
   138                           
   139                           ; 1 bytes @ 0x1
   140  0071                     	ds	1
   141  0072                     ADC_Result@i:	
   142  0072                     DelayXms@j:	
   143                           ; 1 bytes @ 0x2
   144                           
   145                           
   146                           ; 1 bytes @ 0x2
   147  0072                     	ds	1
   148  0073                     ??_ADC_Sample:	
   149                           
   150                           ; 1 bytes @ 0x3
   151  0073                     	ds	4
   152  0077                     ADC_Sample@adch:	
   153                           
   154                           ; 1 bytes @ 0x7
   155  0077                     	ds	1
   156  0078                     ADC_Sample@i:	
   157                           
   158                           ; 1 bytes @ 0x8
   159  0078                     	ds	1
   160  0079                     ADC_Sample@ad_temp:	
   161                           
   162                           ; 2 bytes @ 0x9
   163  0079                     	ds	2
   164  007B                     ??_main:	
   165                           
   166                           	psect	maintext
   167  06C3                     __pmaintext:	
   168                           ; 1 bytes @ 0xB
   169 ;;
   170 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   171 ;;
   172 ;; *************** function _main *****************
   173 ;; Defined at:
   174 ;;		line 109 in file "E:\TEST_CODE\CMS89F12XX\CMS89F12XX_DEMO_C\CMS89F12XX_ADC_Demo\CMS89F12XX_ADC.c"
   175 ;; Parameters:    Size  Location     Type
   176 ;;		None
   177 ;; Auto vars:     Size  Location     Type
   178 ;;		None
   179 ;; Return value:  Size  Location     Type
   180 ;;                  1    wreg      void 
   181 ;; Registers used:
   182 ;;		wreg, status,2, status,0, pclath, cstack
   183 ;; Tracked objects:
   184 ;;		On entry : B00/0
   185 ;;		On exit  : 300/100
   186 ;;		Unchanged: 0/0
   187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   188 ;;      Params:         0       0       0       0
   189 ;;      Locals:         0       0       0       0
   190 ;;      Temps:          0       0       0       0
   191 ;;      Totals:         0       0       0       0
   192 ;;Total ram usage:        0 bytes
   193 ;; Hardware stack levels required when called:    2
   194 ;; This function calls:
   195 ;;		_ADC_Result
   196 ;;		_ADC_Sample
   197 ;;		_DelayXms
   198 ;; This function is called by:
   199 ;;		Startup code after reset
   200 ;; This function uses a non-reentrant model
   201 ;;
   202                           
   203                           
   204                           ;psect for function _main
   205  06C3                     _main:	
   206                           
   207                           ;incstack = 0
   208                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   209  06C3  0000               	nop	;# 
   210  06C4  0064               	clrwdt	;# 
   211                           
   212                           ;CMS89F12XX_ADC.c: 114: INTCON = 0;
   213  06C5  018B               	clrf	11	;volatile
   214                           
   215                           ;CMS89F12XX_ADC.c: 115: OSCCON = 0X70;
   216  06C6  3070               	movlw	112
   217  06C7  1683               	bsf	3,5	;RP0=1, select bank1
   218  06C8  1303               	bcf	3,6	;RP1=0, select bank1
   219  06C9  0088               	movwf	8	;volatile
   220  06CA                     l588:	
   221                           ;CMS89F12XX_ADC.c: 117: while(1)
   222                           
   223  06CA  0064               	clrwdt	;# 
   224                           
   225                           ;CMS89F12XX_ADC.c: 120: DelayXms(1);
   226  06CB  3001               	movlw	1
   227  06CC  118A  27CF  118A   	fcall	_DelayXms
   228                           
   229                           ;CMS89F12XX_ADC.c: 123: TRISB7 = 1;
   230  06CF  1683               	bsf	3,5	;RP0=1, select bank1
   231  06D0  1303               	bcf	3,6	;RP1=0, select bank1
   232  06D1  1786               	bsf	6,7	;volatile
   233                           
   234                           ;CMS89F12XX_ADC.c: 125: ADC_Result(15);
   235  06D2  300F               	movlw	15
   236  06D3  118A  26E6  118A   	fcall	_ADC_Result
   237                           
   238                           ;CMS89F12XX_ADC.c: 128: ADCON1 = 0B00000100;
   239  06D6  3004               	movlw	4
   240  06D7  1683               	bsf	3,5	;RP0=1, select bank1
   241  06D8  009C               	movwf	28	;volatile
   242                           
   243                           ;CMS89F12XX_ADC.c: 129: DelayXms(1);
   244  06D9  3001               	movlw	1
   245  06DA  118A  27CF  118A   	fcall	_DelayXms
   246                           
   247                           ;CMS89F12XX_ADC.c: 131: ADC_Sample(6);
   248  06DD  3006               	movlw	6
   249  06DE  118A  2715  118A   	fcall	_ADC_Sample
   250                           
   251                           ;CMS89F12XX_ADC.c: 132: ADCON1 = 0B00000010;
   252  06E1  3002               	movlw	2
   253  06E2  1683               	bsf	3,5	;RP0=1, select bank1
   254  06E3  1303               	bcf	3,6	;RP1=0, select bank1
   255  06E4  009C               	movwf	28	;volatile
   256  06E5  2ECA               	goto	l588
   257  06E6                     __end_of_main:	
   258                           
   259                           	psect	text1
   260  0715                     __ptext1:	
   261 ;; *************** function _ADC_Sample *****************
   262 ;; Defined at:
   263 ;;		line 25 in file "E:\TEST_CODE\CMS89F12XX\CMS89F12XX_DEMO_C\CMS89F12XX_ADC_Demo\CMS89F12XX_ADC.c"
   264 ;; Parameters:    Size  Location     Type
   265 ;;  adch            1    wreg     unsigned char 
   266 ;; Auto vars:     Size  Location     Type
   267 ;;  adch            1    7[COMMON] unsigned char 
   268 ;;  ad_temp         2    9[COMMON] volatile unsigned int 
   269 ;;  i               1    8[COMMON] unsigned char 
   270 ;; Return value:  Size  Location     Type
   271 ;;                  1    wreg      void 
   272 ;; Registers used:
   273 ;;		wreg, status,2, status,0, pclath, cstack
   274 ;; Tracked objects:
   275 ;;		On entry : 0/100
   276 ;;		On exit  : 0/0
   277 ;;		Unchanged: 0/0
   278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   279 ;;      Params:         0       0       0       0
   280 ;;      Locals:         4       0       0       0
   281 ;;      Temps:          4       0       0       0
   282 ;;      Totals:         8       0       0       0
   283 ;;Total ram usage:        8 bytes
   284 ;; Hardware stack levels used:    1
   285 ;; Hardware stack levels required when called:    1
   286 ;; This function calls:
   287 ;;		_DelayXms
   288 ;; This function is called by:
   289 ;;		_main
   290 ;; This function uses a non-reentrant model
   291 ;;
   292                           
   293                           
   294                           ;psect for function _ADC_Sample
   295  0715                     _ADC_Sample:	
   296                           
   297                           ;incstack = 0
   298                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0+pclath+cstack]
   299                           ;ADC_Sample@adch stored from wreg
   300  0715  00F7               	movwf	ADC_Sample@adch
   301                           
   302                           ;CMS89F12XX_ADC.c: 27: static unsigned long adsum = 0;
   303                           ;CMS89F12XX_ADC.c: 28: static unsigned int admin = 0,admax = 0;
   304                           ;CMS89F12XX_ADC.c: 29: static unsigned char adtimes = 0;
   305                           ;CMS89F12XX_ADC.c: 30: volatile unsigned int ad_temp;
   306                           ;CMS89F12XX_ADC.c: 31: ADCON1 = 0B00000100;
   307  0716  3004               	movlw	4
   308  0717  1683               	bsf	3,5	;RP0=1, select bank1
   309  0718  1303               	bcf	3,6	;RP1=0, select bank1
   310  0719  009C               	movwf	28	;volatile
   311                           
   312                           ;CMS89F12XX_ADC.c: 32: ADCON0 = 0XC1 | (adch << 2);
   313  071A  0877               	movf	ADC_Sample@adch,w
   314  071B  00F3               	movwf	??_ADC_Sample
   315  071C  3001               	movlw	1
   316  071D  1003               	clrc
   317  071E                     L1:	
   318  071E  0DF3               	rlf	??_ADC_Sample,f
   319  071F  3EFF               	addlw	-1
   320  0720  1003               	clrc
   321  0721  1D03               	skipz
   322  0722  2F1E               	goto	L1
   323  0723  0D73               	rlf	??_ADC_Sample,w
   324  0724  38C1               	iorlw	193
   325  0725  009D               	movwf	29	;volatile
   326  0726  0000               	nop	;# 
   327  0727  0000               	nop	;# 
   328                           
   329                           ;CMS89F12XX_ADC.c: 35: GODONE = 1;
   330  0728  1683               	bsf	3,5	;RP0=1, select bank1
   331  0729  1303               	bcf	3,6	;RP1=0, select bank1
   332  072A  149D               	bsf	29,1	;volatile
   333                           
   334                           ;CMS89F12XX_ADC.c: 37: unsigned char i = 0;
   335  072B  01F8               	clrf	ADC_Sample@i
   336  072C                     l557:	
   337                           ;CMS89F12XX_ADC.c: 38: while(GODONE)
   338                           
   339  072C  1683               	bsf	3,5	;RP0=1, select bank1
   340  072D  1303               	bcf	3,6	;RP1=0, select bank1
   341  072E  1C9D               	btfss	29,1	;volatile
   342  072F  2F36               	goto	l1105
   343                           
   344                           ;CMS89F12XX_ADC.c: 39: {
   345                           ;CMS89F12XX_ADC.c: 40: DelayXms(3);
   346  0730  3003               	movlw	3
   347  0731  27CF  118A         	fcall	_DelayXms
   348                           
   349                           ;CMS89F12XX_ADC.c: 41: if(0 == (--i))
   350  0733  0BF8               	decfsz	ADC_Sample@i,f
   351  0734  2F2C               	goto	l557
   352  0735  0008               	return
   353  0736                     l1105:	
   354                           
   355                           ;CMS89F12XX_ADC.c: 43: }
   356                           ;CMS89F12XX_ADC.c: 45: ad_temp=(ADRESH<<4)+(ADRESL>>4);
   357  0736  081F               	movf	31,w	;volatile
   358  0737  00F9               	movwf	ADC_Sample@ad_temp	;volatile
   359  0738  01FA               	clrf	ADC_Sample@ad_temp+1	;volatile
   360  0739  0EF9               	swapf	ADC_Sample@ad_temp,f	;volatile
   361  073A  0EFA               	swapf	ADC_Sample@ad_temp+1,f	;volatile
   362  073B  30F0               	movlw	240
   363  073C  05FA               	andwf	ADC_Sample@ad_temp+1,f	;volatile
   364  073D  0879               	movf	ADC_Sample@ad_temp,w	;volatile
   365  073E  390F               	andlw	15
   366  073F  04FA               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
   367  0740  30F0               	movlw	240
   368  0741  05F9               	andwf	ADC_Sample@ad_temp,f	;volatile
   369  0742  0E1E               	swapf	30,w	;volatile
   370  0743  390F               	andlw	15
   371  0744  07F9               	addwf	ADC_Sample@ad_temp,f	;volatile
   372  0745  1803               	skipnc
   373  0746  0AFA               	incf	ADC_Sample@ad_temp+1,f	;volatile
   374                           
   375                           ;CMS89F12XX_ADC.c: 47: if(0 == admax)
   376  0747  1283               	bcf	3,5	;RP0=0, select bank0
   377  0748  0824               	movf	ADC_Sample@admax,w
   378  0749  0425               	iorwf	ADC_Sample@admax+1,w
   379  074A  1D03               	btfss	3,2
   380  074B  2F4F               	goto	l1113
   381                           
   382                           ;CMS89F12XX_ADC.c: 48: {
   383                           ;CMS89F12XX_ADC.c: 49: admax = ad_temp;
   384  074C  27E9  118A         	fcall	PL4	;call to abstracted procedure
   385  074E  2F62               	goto	l1119
   386  074F                     l1113:	
   387                           ;CMS89F12XX_ADC.c: 51: }
   388                           
   389                           ;CMS89F12XX_ADC.c: 50: admin = ad_temp;
   390                           
   391                           
   392                           ;CMS89F12XX_ADC.c: 52: else if(ad_temp > admax)
   393  074F  087A               	movf	ADC_Sample@ad_temp+1,w	;volatile
   394  0750  0225               	subwf	ADC_Sample@admax+1,w
   395  0751  1D03               	skipz
   396  0752  2F55               	goto	u245
   397  0753  0879               	movf	ADC_Sample@ad_temp,w	;volatile
   398  0754  0224               	subwf	ADC_Sample@admax,w
   399  0755                     u245:	
   400  0755  1803               	skipnc
   401  0756  2F5A               	goto	l1117
   402                           
   403                           ;CMS89F12XX_ADC.c: 53: admax = ad_temp;
   404  0757  27E9  118A         	fcall	PL4	;call to abstracted procedure
   405  0759  2F66               	goto	l563
   406  075A                     l1117:	
   407                           
   408                           ;CMS89F12XX_ADC.c: 54: else if(ad_temp < admin)
   409  075A  087C               	movf	ADC_Sample@admin+1,w
   410  075B  027A               	subwf	ADC_Sample@ad_temp+1,w	;volatile
   411  075C  1D03               	skipz
   412  075D  2F60               	goto	u255
   413  075E  087B               	movf	ADC_Sample@admin,w
   414  075F  0279               	subwf	ADC_Sample@ad_temp,w	;volatile
   415  0760                     u255:	
   416  0760  1803               	skipnc
   417  0761  2F66               	goto	l563
   418  0762                     l1119:	
   419                           
   420                           ;CMS89F12XX_ADC.c: 55: admin = ad_temp;
   421  0762  087A               	movf	ADC_Sample@ad_temp+1,w	;volatile
   422  0763  00FC               	movwf	ADC_Sample@admin+1
   423  0764  0879               	movf	ADC_Sample@ad_temp,w	;volatile
   424  0765  00FB               	movwf	ADC_Sample@admin
   425  0766                     l563:	
   426                           
   427                           ;CMS89F12XX_ADC.c: 57: adsum += ad_temp;
   428  0766  0879               	movf	ADC_Sample@ad_temp,w	;volatile
   429  0767  00F3               	movwf	??_ADC_Sample
   430  0768  087A               	movf	ADC_Sample@ad_temp+1,w	;volatile
   431  0769  00F4               	movwf	??_ADC_Sample+1
   432  076A  01F5               	clrf	??_ADC_Sample+2
   433  076B  01F6               	clrf	??_ADC_Sample+3
   434  076C  0873               	movf	??_ADC_Sample,w
   435  076D  07A0               	addwf	ADC_Sample@adsum,f
   436  076E  0874               	movf	??_ADC_Sample+1,w
   437  076F  1103               	clrz
   438  0770  1803               	skipnc
   439  0771  3E01               	addlw	1
   440  0772  1D03               	btfss	3,2
   441  0773  07A1               	addwf	ADC_Sample@adsum+1,f
   442  0774  0875               	movf	??_ADC_Sample+2,w
   443  0775  1103               	clrz
   444  0776  1803               	skipnc
   445  0777  3E01               	addlw	1
   446  0778  1D03               	btfss	3,2
   447  0779  07A2               	addwf	ADC_Sample@adsum+2,f
   448  077A  0876               	movf	??_ADC_Sample+3,w
   449  077B  1103               	clrz
   450  077C  1803               	skipnc
   451  077D  3E01               	addlw	1
   452  077E  1D03               	btfss	3,2
   453  077F  07A3               	addwf	ADC_Sample@adsum+3,f
   454                           
   455                           ;CMS89F12XX_ADC.c: 58: if(++adtimes >= 10)
   456  0780  300A               	movlw	10
   457  0781  0AFD               	incf	ADC_Sample@adtimes,f
   458  0782  027D               	subwf	ADC_Sample@adtimes,w
   459  0783  1C03               	skipc
   460  0784  0008               	return
   461                           
   462                           ;CMS89F12XX_ADC.c: 59: {
   463                           ;CMS89F12XX_ADC.c: 60: adsum -= admax;
   464  0785  0824               	movf	ADC_Sample@admax,w
   465  0786  00F3               	movwf	??_ADC_Sample
   466  0787  0825               	movf	ADC_Sample@admax+1,w
   467  0788  27DA  118A         	fcall	PL2	;call to abstracted procedure
   468  078A  1C03               	skipc
   469  078B  0F76               	incfsz	??_ADC_Sample+3,w
   470  078C  02A3               	subwf	ADC_Sample@adsum+3,f
   471                           
   472                           ;CMS89F12XX_ADC.c: 61: if(adsum >= admin) adsum -= admin;
   473  078D  087B               	movf	ADC_Sample@admin,w
   474  078E  00F3               	movwf	??_ADC_Sample
   475  078F  087C               	movf	ADC_Sample@admin+1,w
   476  0790  00F4               	movwf	??_ADC_Sample+1
   477  0791  01F5               	clrf	??_ADC_Sample+2
   478  0792  01F6               	clrf	??_ADC_Sample+3
   479  0793  0876               	movf	??_ADC_Sample+3,w
   480  0794  0223               	subwf	ADC_Sample@adsum+3,w
   481  0795  1D03               	skipz
   482  0796  2FA1               	goto	u295
   483  0797  0875               	movf	??_ADC_Sample+2,w
   484  0798  0222               	subwf	ADC_Sample@adsum+2,w
   485  0799  1D03               	skipz
   486  079A  2FA1               	goto	u295
   487  079B  0874               	movf	??_ADC_Sample+1,w
   488  079C  0221               	subwf	ADC_Sample@adsum+1,w
   489  079D  1D03               	skipz
   490  079E  2FA1               	goto	u295
   491  079F  0873               	movf	??_ADC_Sample,w
   492  07A0  0220               	subwf	ADC_Sample@adsum,w
   493  07A1                     u295:	
   494  07A1  1C03               	skipc
   495  07A2  2FAC               	goto	l568
   496  07A3  087B               	movf	ADC_Sample@admin,w
   497  07A4  00F3               	movwf	??_ADC_Sample
   498  07A5  087C               	movf	ADC_Sample@admin+1,w
   499  07A6  27DA  118A         	fcall	PL2	;call to abstracted procedure
   500  07A8  1C03               	skipc
   501  07A9  0F76               	incfsz	??_ADC_Sample+3,w
   502  07AA  02A3               	subwf	ADC_Sample@adsum+3,f
   503  07AB  2FB0               	goto	l1127
   504  07AC                     l568:	
   505                           
   506                           ;CMS89F12XX_ADC.c: 62: else adsum = 0;
   507  07AC  01A0               	clrf	ADC_Sample@adsum
   508  07AD  01A1               	clrf	ADC_Sample@adsum+1
   509  07AE  01A2               	clrf	ADC_Sample@adsum+2
   510  07AF  01A3               	clrf	ADC_Sample@adsum+3
   511  07B0                     l1127:	
   512                           
   513                           ;CMS89F12XX_ADC.c: 64: adresult = adsum >> 3;
   514  07B0  0820               	movf	ADC_Sample@adsum,w
   515  07B1  00F3               	movwf	??_ADC_Sample
   516  07B2  0821               	movf	ADC_Sample@adsum+1,w
   517  07B3  00F4               	movwf	??_ADC_Sample+1
   518  07B4  0822               	movf	ADC_Sample@adsum+2,w
   519  07B5  00F5               	movwf	??_ADC_Sample+2
   520  07B6  0823               	movf	ADC_Sample@adsum+3,w
   521  07B7  00F6               	movwf	??_ADC_Sample+3
   522  07B8  3003               	movlw	3
   523  07B9                     u315:	
   524  07B9  1003               	clrc
   525  07BA  0CF6               	rrf	??_ADC_Sample+3,f
   526  07BB  0CF5               	rrf	??_ADC_Sample+2,f
   527  07BC  0CF4               	rrf	??_ADC_Sample+1,f
   528  07BD  0CF3               	rrf	??_ADC_Sample,f
   529  07BE  3EFF               	addlw	-1
   530  07BF  1D03               	skipz
   531  07C0  2FB9               	goto	u315
   532  07C1  0874               	movf	??_ADC_Sample+1,w
   533  07C2  00A9               	movwf	_adresult+1	;volatile
   534  07C3  0873               	movf	??_ADC_Sample,w
   535  07C4  00A8               	movwf	_adresult	;volatile
   536                           
   537                           ;CMS89F12XX_ADC.c: 66: adsum = 0;
   538  07C5  01A0               	clrf	ADC_Sample@adsum
   539  07C6  01A1               	clrf	ADC_Sample@adsum+1
   540  07C7  01A2               	clrf	ADC_Sample@adsum+2
   541  07C8  01A3               	clrf	ADC_Sample@adsum+3
   542                           
   543                           ;CMS89F12XX_ADC.c: 67: admin = 0;
   544  07C9  01FB               	clrf	ADC_Sample@admin
   545  07CA  01FC               	clrf	ADC_Sample@admin+1
   546                           
   547                           ;CMS89F12XX_ADC.c: 68: admax = 0;
   548  07CB  01A4               	clrf	ADC_Sample@admax
   549  07CC  01A5               	clrf	ADC_Sample@admax+1
   550                           
   551                           ;CMS89F12XX_ADC.c: 69: adtimes = 0;
   552  07CD  01FD               	clrf	ADC_Sample@adtimes
   553  07CE  0008               	return
   554  07CF                     __end_of_ADC_Sample:	
   555  07CF                     __ptext2:	
   556 ;; *************** function _DelayXms *****************
   557 ;; Defined at:
   558 ;;		line 99 in file "E:\TEST_CODE\CMS89F12XX\CMS89F12XX_DEMO_C\CMS89F12XX_ADC_Demo\CMS89F12XX_ADC.c"
   559 ;; Parameters:    Size  Location     Type
   560 ;;  x               1    wreg     unsigned char 
   561 ;; Auto vars:     Size  Location     Type
   562 ;;  x               1    0[COMMON] unsigned char 
   563 ;;  j               1    2[COMMON] unsigned char 
   564 ;;  i               1    1[COMMON] unsigned char 
   565 ;; Return value:  Size  Location     Type
   566 ;;                  1    wreg      void 
   567 ;; Registers used:
   568 ;;		wreg, status,2, status,0
   569 ;; Tracked objects:
   570 ;;		On entry : 0/100
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   574 ;;      Params:         0       0       0       0
   575 ;;      Locals:         3       0       0       0
   576 ;;      Temps:          0       0       0       0
   577 ;;      Totals:         3       0       0       0
   578 ;;Total ram usage:        3 bytes
   579 ;; Hardware stack levels used:    1
   580 ;; This function calls:
   581 ;;		Nothing
   582 ;; This function is called by:
   583 ;;		_ADC_Sample
   584 ;;		_main
   585 ;; This function uses a non-reentrant model
   586 ;;
   587                           
   588                           
   589                           ;psect for function _DelayXms
   590  07CF                     _DelayXms:	
   591                           
   592                           ;incstack = 0
   593                           ; Regs used in _DelayXms: [wreg+status,2+status,0]
   594                           ;DelayXms@x stored from wreg
   595  07CF  00F0               	movwf	DelayXms@x
   596                           
   597                           ;CMS89F12XX_ADC.c: 101: unsigned char i,j;
   598                           ;CMS89F12XX_ADC.c: 102: for(i=x;i>0;i--)
   599  07D0  00F1               	movwf	DelayXms@i
   600  07D1                     l1073:	
   601  07D1  0871               	movf	DelayXms@i,w
   602  07D2  1903               	btfsc	3,2
   603  07D3  0008               	return
   604                           
   605                           ;CMS89F12XX_ADC.c: 103: for(j=153;j>0;j--);
   606  07D4  3099               	movlw	153
   607  07D5  00F2               	movwf	DelayXms@j
   608  07D6                     l1083:	
   609  07D6  0BF2               	decfsz	DelayXms@j,f
   610  07D7  2FD6               	goto	l1083
   611  07D8  03F1               	decf	DelayXms@i,f
   612  07D9  2FD1               	goto	l1073
   613  07DA                     __end_of_DelayXms:	
   614  07DA                     PL2:	
   615  07DA  00F4               	movwf	??_ADC_Sample+1
   616  07DB  01F5               	clrf	??_ADC_Sample+2
   617  07DC  01F6               	clrf	??_ADC_Sample+3
   618  07DD  0873               	movf	??_ADC_Sample,w
   619  07DE  02A0               	subwf	ADC_Sample@adsum,f
   620  07DF  0874               	movf	??_ADC_Sample+1,w
   621  07E0  1C03               	skipc
   622  07E1  0F74               	incfsz	??_ADC_Sample+1,w
   623  07E2  02A1               	subwf	ADC_Sample@adsum+1,f
   624  07E3  0875               	movf	??_ADC_Sample+2,w
   625  07E4  1C03               	skipc
   626  07E5  0F75               	incfsz	??_ADC_Sample+2,w
   627  07E6  02A2               	subwf	ADC_Sample@adsum+2,f
   628  07E7  0876               	movf	??_ADC_Sample+3,w
   629  07E8  0008               	return
   630  07E9                     __end_ofPL2:	
   631  07E9                     PL4:	
   632  07E9  087A               	movf	ADC_Sample@ad_temp+1,w	;volatile
   633  07EA  00A5               	movwf	ADC_Sample@admax+1
   634  07EB  0879               	movf	ADC_Sample@ad_temp,w	;volatile
   635  07EC  00A4               	movwf	ADC_Sample@admax
   636  07ED  0008               	return
   637  07EE                     __end_ofPL4:	
   638                           
   639                           	psect	text3
   640  06E6                     __ptext3:	
   641 ;; *************** function _ADC_Result *****************
   642 ;; Defined at:
   643 ;;		line 75 in file "E:\TEST_CODE\CMS89F12XX\CMS89F12XX_DEMO_C\CMS89F12XX_ADC_Demo\CMS89F12XX_ADC.c"
   644 ;; Parameters:    Size  Location     Type
   645 ;;  adch            1    wreg     unsigned char 
   646 ;; Auto vars:     Size  Location     Type
   647 ;;  adch            1    1[COMMON] unsigned char 
   648 ;;  i               1    2[COMMON] unsigned char 
   649 ;; Return value:  Size  Location     Type
   650 ;;                  1    wreg      unsigned char 
   651 ;; Registers used:
   652 ;;		wreg, status,2, status,0
   653 ;; Tracked objects:
   654 ;;		On entry : 300/100
   655 ;;		On exit  : 200/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   658 ;;      Params:         0       0       0       0
   659 ;;      Locals:         2       0       0       0
   660 ;;      Temps:          1       0       0       0
   661 ;;      Totals:         3       0       0       0
   662 ;;Total ram usage:        3 bytes
   663 ;; Hardware stack levels used:    1
   664 ;; This function calls:
   665 ;;		Nothing
   666 ;; This function is called by:
   667 ;;		_main
   668 ;; This function uses a non-reentrant model
   669 ;;
   670                           
   671                           
   672                           ;psect for function _ADC_Result
   673  06E6                     _ADC_Result:	
   674                           
   675                           ;incstack = 0
   676                           ; Regs used in _ADC_Result: [wreg+status,2+status,0]
   677                           ;ADC_Result@adch stored from wreg
   678  06E6  00F1               	movwf	ADC_Result@adch
   679                           
   680                           ;CMS89F12XX_ADC.c: 78: ADCON1 = 0B00000010;
   681  06E7  3002               	movlw	2
   682  06E8  009C               	movwf	28	;volatile
   683                           
   684                           ;CMS89F12XX_ADC.c: 79: ADCON0 = 0X81 | (adch << 2);
   685  06E9  0871               	movf	ADC_Result@adch,w
   686  06EA  00F0               	movwf	??_ADC_Result
   687  06EB  3001               	movlw	1
   688  06EC  1003               	clrc
   689  06ED                     L2:	
   690  06ED  0DF0               	rlf	??_ADC_Result,f
   691  06EE  3EFF               	addlw	-1
   692  06EF  1003               	clrc
   693  06F0  1D03               	skipz
   694  06F1  2EED               	goto	L2
   695  06F2  0D70               	rlf	??_ADC_Result,w
   696  06F3  3881               	iorlw	129
   697  06F4  009D               	movwf	29	;volatile
   698  06F5  0000               	nop	;# 
   699  06F6  0000               	nop	;# 
   700                           
   701                           ;CMS89F12XX_ADC.c: 82: GODONE = 1;
   702  06F7  1683               	bsf	3,5	;RP0=1, select bank1
   703  06F8  1303               	bcf	3,6	;RP1=0, select bank1
   704  06F9  149D               	bsf	29,1	;volatile
   705                           
   706                           ;CMS89F12XX_ADC.c: 84: unsigned char i = 0;
   707  06FA  01F2               	clrf	ADC_Result@i
   708  06FB                     l572:	
   709                           ;CMS89F12XX_ADC.c: 85: while(GODONE)
   710                           
   711  06FB  1C9D               	btfss	29,1	;volatile
   712  06FC  2F00               	goto	l1147
   713                           
   714                           ;CMS89F12XX_ADC.c: 86: {
   715                           ;CMS89F12XX_ADC.c: 87: if(0 == (--i))
   716  06FD  0BF2               	decfsz	ADC_Result@i,f
   717  06FE  2EFB               	goto	l572
   718  06FF  0008               	return
   719  0700                     l1147:	
   720                           
   721                           ;CMS89F12XX_ADC.c: 89: }
   722                           ;CMS89F12XX_ADC.c: 90: result=(ADRESH<<4)+(ADRESL>>4);
   723  0700  081F               	movf	31,w	;volatile
   724  0701  1283               	bcf	3,5	;RP0=0, select bank0
   725  0702  00A6               	movwf	_result	;volatile
   726  0703  01A7               	clrf	_result+1	;volatile
   727  0704  0EA6               	swapf	_result,f	;volatile
   728  0705  0EA7               	swapf	_result+1,f	;volatile
   729  0706  30F0               	movlw	240
   730  0707  05A7               	andwf	_result+1,f	;volatile
   731  0708  0826               	movf	_result,w	;volatile
   732  0709  390F               	andlw	15
   733  070A  04A7               	iorwf	_result+1,f	;volatile
   734  070B  30F0               	movlw	240
   735  070C  05A6               	andwf	_result,f	;volatile
   736  070D  1683               	bsf	3,5	;RP0=1, select bank1
   737  070E  0E1E               	swapf	30,w	;volatile
   738  070F  390F               	andlw	15
   739  0710  1283               	bcf	3,5	;RP0=0, select bank0
   740  0711  07A6               	addwf	_result,f	;volatile
   741  0712  1803               	skipnc
   742  0713  0AA7               	incf	_result+1,f	;volatile
   743  0714  0008               	return
   744  0715                     __end_of_ADC_Result:	
   745  007E                     btemp	set	126	;btemp
   746  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80      0      10
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC_Sample
    _ADC_Sample->_DelayXms

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     475
                         _ADC_Result
                         _ADC_Sample
                           _DelayXms
 ---------------------------------------------------------------------------------
 (1) _ADC_Sample                                           8     8      0     316
                                              3 COMMON     8     8      0
                           _DelayXms
 ---------------------------------------------------------------------------------
 (1) _DelayXms                                             3     3      0     114
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Result                                           3     3      0      45
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Result
   _ADC_Sample
     _DelayXms
   _DelayXms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       A       3       12.5%
ABS                  0      0      18       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
DATA                 0      0      18      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Oct 19 16:38:15 2018

                     PL2 07DA                       PL4 07E9                      l563 0766  
                    l572 06FB                      l557 072C                      l568 07AC  
                    l588 06CA                      u315 07B9                      u245 0755  
                    u255 0760                      u295 07A1      __size_of_ADC_Sample 00BA  
    __size_of_ADC_Result 002F                     l1113 074F                     l1105 0736  
                   l1117 075A                     l1127 07B0                     l1119 0762  
                   l1073 07D1                     l1147 0700                     l1083 07D6  
                   _main 06C3                     btemp 007E                     start 0000  
                  ?_main 0070                    status 0003                    wtemp0 007E  
       __end_of_DelayXms 07DA          __initialization 07EE             __end_of_main 06E6  
                 ??_main 007B                   _ADCON0 009D                   _ADCON1 009C  
                 _ADRESH 009F                   _ADRESL 009E                   _GODONE 04E9  
                 _INTCON 000B                   _OSCCON 0088             ??_ADC_Sample 0073  
                 _TRISB7 0437             ??_ADC_Result 0070                   _result 0026  
     __end_of_ADC_Sample 07CF       __end_of_ADC_Result 0715  __end_of__initialization 07FD  
         __pcstackCOMMON 0070               __end_ofPL2 07E9               __end_ofPL4 07EE  
              ?_DelayXms 0070               __pbssBANK0 0020               __pmaintext 06C3  
             ??_DelayXms 0070          ADC_Sample@admax 0024          ADC_Sample@admin 007B  
        ADC_Sample@adsum 0020                  __ptext0 0000                  __ptext1 0715  
                __ptext2 07CF                  __ptext3 06E6     end_of_initialization 07FD  
              DelayXms@i 0071                DelayXms@j 0072                DelayXms@x 0070  
    start_initialization 07EE        __size_of_DelayXms 000B        ADC_Sample@ad_temp 0079  
      ADC_Sample@adtimes 007D              __pbssCOMMON 007B                ___latbits 0001  
         ADC_Sample@adch 0077              ADC_Sample@i 0078              ADC_Result@i 0072  
         ADC_Result@adch 0071                 _DelayXms 07CF               _ADC_Sample 0715  
             _ADC_Result 06E6                 _adresult 0028            __size_of_main 0023  
            ?_ADC_Sample 0070              ?_ADC_Result 0070  
