---- H:\MyDownloads\说明书&测试报告\开发包\SC8F577X开发包\SC8F577X_DEMO\SC8F577X_IIC_Master_Demo\main.c ----------------------------------------------------------------------
1:                /**********************************************************
2:                
3:                **********************************************************/
4:                
5:                #include <sc.h>
6:                
7:                
8:                
9:                volatile unsigned int   result,result1,result2;
10:               
11:               
12:               void DelayXms(unsigned char x);
13:               
14:               
15:               /***********************************************************
16:               函数名称：DelayXms
17:               函数功能：毫秒级非精准延时
18:               入口参数：x - 延时时间
19:               出口参数：
20:               备    注：
21:               ***********************************************************/
22:               void DelayXms(unsigned char x)
  009C    00F9    LD	0x79,A
23:               {
24:               	unsigned char i,j;
25:               	for(i=x;i>0;i--)
  009D    00FA    LD	0x7A,A
  009E    087A    LD	A,0x7A
  009F    1903    SZB	0x3,2
  00A0    0008    RET
26:               		for(j=153;j>0;j--);
  00A1    3099    LDIA	0x99
  00A2    00FB    LD	0x7B,A
  00A3    0BFB    SZDECR	0x7B
  00A4    28A3    JP	0xA3
  00A5    03FA    DECR	0x7A
  00A6    289E    JP	0x9E
27:               }
28:               
29:               /***********************************************************
30:               main主函数
31:               ***********************************************************/
32:               
33:               #define  SLAVE_ADRSS   0xa0
34:               
35:                
36:               void Init_System();
37:               
38:               /******************************************
39:                 Adress  从机地址
40:                 data    待发数据
41:               ********************************************/
42:               void Write_IIC(unsigned char Adress,unsigned char data)
  0066    00FA    LD	0x7A,A
43:               {
44:               	SEN =1;  //起始信号
  0067    1703    SETB	0x3,6
  0068    140D    SETB	0xD,0
45:               	while(IICIF==0);  //等待发送完成
  0069    1E07    SNZB	0x7,4
  006A    2869    JP	0x69
46:               	IICIF = 0;
  006B    1207    CLRB	0x7,4
47:               	IICBUF = Adress;   //发送地址
  006C    087A    LD	A,0x7A
  006D    008E    LD	0xE,A
48:               	while(IICIF==0);
  006E    1E07    SNZB	0x7,4
  006F    286E    JP	0x6E
49:               	IICIF = 0;
  0070    1207    CLRB	0x7,4
50:               	IICBUF = data;    //发送数据
  0071    0879    LD	A,0x79
  0072    008E    LD	0xE,A
51:               	while(IICIF==0);
  0073    1E07    SNZB	0x7,4
  0074    2873    JP	0x73
52:               	IICIF = 0;
  0075    1207    CLRB	0x7,4
53:               	PEN =1;           //发送停止
  0076    150D    SETB	0xD,2
54:                   while(IICIF==0);
  0077    1E07    SNZB	0x7,4
  0078    2877    JP	0x77
55:               	IICIF = 0;
  0079    1207    CLRB	0x7,4
  007A    0008    RET
56:               	
57:               }
58:               
59:               /******************************************
60:                  Adress   从机地址
61:                  data     待发数据
62:                  返回 ReadData
63:                 
64:               ********************************************/
65:               unsigned char  Read_IIC(unsigned char Adress,unsigned char data)
  0041    00FB    LD	0x7B,A
66:               {
67:               	unsigned char ReadData;
68:               
69:               	SEN =1;  //起始信号
  0042    140D    SETB	0xD,0
70:               	while(IICIF==0); //等待发送完成
  0043    1E07    SNZB	0x7,4
  0044    2843    JP	0x43
71:               	IICIF = 0;
  0045    1207    CLRB	0x7,4
72:               	IICBUF = Adress;  
  0046    087B    LD	A,0x7B
  0047    008E    LD	0xE,A
73:               	while(IICIF==0);
  0048    1E07    SNZB	0x7,4
  0049    2848    JP	0x48
74:               
75:               	IICIF = 0;
  004A    1207    CLRB	0x7,4
76:               	IICBUF = data;
  004B    0879    LD	A,0x79
  004C    008E    LD	0xE,A
77:               	while(IICIF==0);
  004D    1E07    SNZB	0x7,4
  004E    284D    JP	0x4D
78:               	IICIF = 0;
  004F    1207    CLRB	0x7,4
79:               	
80:               	RSEN =1;  //重复起始信号
  0050    148D    SETB	0xD,1
81:               	while(IICIF==0);
  0051    1E07    SNZB	0x7,4
  0052    2851    JP	0x51
82:               
83:               	IICIF = 0;
  0053    1207    CLRB	0x7,4
84:               	
85:               	IICBUF = Adress+1;  //发送地址+1 读取数据
  0054    087B    LD	A,0x7B
  0055    3E01    ADDIA	0x1
  0056    008E    LD	0xE,A
86:               	while(IICIF==0);
  0057    1E07    SNZB	0x7,4
  0058    2857    JP	0x57
87:               	IICIF = 0;    
  0059    1207    CLRB	0x7,4
88:               	RCEN = 1;           //开始接收数据
  005A    158D    SETB	0xD,3
89:               	while(IICIF==0);
  005B    1E07    SNZB	0x7,4
  005C    285B    JP	0x5B
90:               	IICIF = 0;
  005D    1207    CLRB	0x7,4
91:               	ReadData = IICBUF;  //读取接收的数据
  005E    080E    LD	A,0xE
  005F    00FA    LD	0x7A,A
92:               	
93:               	PEN =1;                //发送停止
  0060    150D    SETB	0xD,2
94:                   while(IICIF==0); 
  0061    1E07    SNZB	0x7,4
  0062    2861    JP	0x61
95:               	IICIF = 0;
  0063    1207    CLRB	0x7,4
96:               	
97:               	return ReadData;
  0064    087A    LD	A,0x7A
  0065    0008    RET
98:               	
99:               
100:              }
101:              volatile unsigned char IICReadData;
102:              void main()
103:              {
104:              	Init_System();
  0017    118A    CLRB	0xA,3
  0018    207B    CALL	0x7B
  0019    118A    CLRB	0xA,3
105:              	TRISA |=  0b00000011;  //RA0 RA1输入态，做IIC 引脚
  001A    3003    LDIA	0x3
  001B    1683    SETB	0x3,5
  001C    0485    ORR	0x5
106:              	IICCON =  0B00100000;  // IIC 使能  主动模式
  001D    3020    LDIA	0x20
  001E    1283    CLRB	0x3,5
  001F    1703    SETB	0x3,6
  0020    008C    LD	0xC,A
107:                  IICADD = 159;          // 100K 频率 = 16M /159+1
  0021    309F    LDIA	0x9F
  0022    0089    LD	0x9,A
108:              	
109:              	
110:                  Write_IIC(0xa0,5);
  0023    3005    LDIA	0x5
  0024    00F9    LD	0x79,A
  0025    30A0    LDIA	0xA0
  0026    118A    CLRB	0xA,3
  0027    2066    CALL	0x66
  0028    118A    CLRB	0xA,3
111:                  Write_IIC(0xa0,5);
  0029    3005    LDIA	0x5
  002A    00F9    LD	0x79,A
  002B    30A0    LDIA	0xA0
  002C    118A    CLRB	0xA,3
  002D    2066    CALL	0x66
  002E    118A    CLRB	0xA,3
112:              	while(1)
113:              	{
114:                       DelayXms(200);
  002F    30C8    LDIA	0xC8
  0030    118A    CLRB	0xA,3
  0031    209C    CALL	0x9C
  0032    118A    CLRB	0xA,3
115:              		 Write_IIC(0xa0,0x80);
  0033    3080    LDIA	0x80
  0034    00F9    LD	0x79,A
  0035    30A0    LDIA	0xA0
  0036    118A    CLRB	0xA,3
  0037    2066    CALL	0x66
  0038    118A    CLRB	0xA,3
116:              			
117:              		 IICReadData =  Read_IIC(0xa0,0x80);
  0039    3080    LDIA	0x80
  003A    00F9    LD	0x79,A
  003B    30A0    LDIA	0xA0
  003C    118A    CLRB	0xA,3
  003D    2041    CALL	0x41
  003E    118A    CLRB	0xA,3
  003F    00F6    LD	0x76,A
  0040    282F    JP	0x2F
118:              	}
119:              }
120:              
121:              
122:              
123:              /***********************************************
124:              函数名称：Init_System
125:              函数功能：系统初始化
126:              入口参数：无
127:              出口参数：无
128:              备注：
129:              ************************************************/
130:              void Init_System()
131:              {
132:              	asm("nop");
133:              	asm("clrwdt");
134:              	INTCON = 0;					//系统初始化
  007D    018B    CLR	0xB
135:              	OSCCON = 0X70;				//配置振荡为8M,关闭WDT
  007E    3070    LDIA	0x70
  007F    1683    SETB	0x3,5
  0080    1303    CLRB	0x3,6
  0081    0088    LD	0x8,A
136:              	OPTION_REG = 0;
  0082    0181    CLR	0x1
137:              	
138:                  WPUA  = 0B00000000;			//初始化上拉
  0083    1283    CLRB	0x3,5
  0084    0187    CLR	0x7
139:                  WPUB  = 0B00001000;			
  0085    3008    LDIA	0x8
  0086    0088    LD	0x8,A
140:                
141:               
142:              	TRISA = 0B00000000;			//初始化IO状态
  0087    1683    SETB	0x3,5
  0088    0185    CLR	0x5
143:              	TRISB = 0B00001000;
  0089    0086    LD	0x6,A
144:              
145:              	PORTA = 0B00000000;
  008A    1283    CLRB	0x3,5
  008B    0185    CLR	0x5
146:              	PORTB = 0B00000000;			//初始化输出
  008C    0186    CLR	0x6
  008D    0008    RET
147:              
148:              }
149:              
150:              /***********************************************
151:              函数名称：PB_Isr
152:              函数功能：PB电平变化中断服务
153:              入口参数：无
154:              出口参数：无
155:              备注：
156:              ************************************************/
157:              void interrupt PB_Isr()
158:              {
159:              	if(RBIF)
  008E    1C0B    SNZB	0xB,0
  008F    2895    JP	0x95
160:              	{
161:              		RBIF = 0;			//清中断标志
  0090    100B    CLRB	0xB,0
162:              		RB6 = ~RB6;
  0091    3040    LDIA	0x40
  0092    1283    CLRB	0x3,5
  0093    1303    CLRB	0x3,6
  0094    0686    XORR	0x6
  0095    0878    LD	A,0x78
  0096    008A    LD	0xA,A
  0097    0E77    SWAPA	0x77
  0098    0083    LD	0x3,A
  0099    0EFE    SWAPR	0x7E
  009A    0E7E    SWAPA	0x7E
  009B    0009    RETI
163:              		//Init_System();
164:              	}
165:              }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280B    JP	0xB
  000B    118A    CLRB	0xA,3
  000C    280D    JP	0xD
---- start_initialization ------------------------------------------------------------------
  000D    01F0    CLR	0x70
  000E    01F1    CLR	0x71
  000F    01F2    CLR	0x72
  0010    01F3    CLR	0x73
  0011    01F4    CLR	0x74
  0012    01F5    CLR	0x75
  0013    01F6    CLR	0x76
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F7    LD	0x77,A
  0007    080A    LD	A,0xA
  0008    00F8    LD	0x78,A
  0009    118A    CLRB	0xA,3
  000A    288E    JP	0x8E
---- common_function ------------------------------------------------------------------
  0014    0183    CLR	0x3
  0015    118A    CLRB	0xA,3
  0016    2817    JP	0x17
  007B    0000    NOP
  007C    0064    CLRWDT
