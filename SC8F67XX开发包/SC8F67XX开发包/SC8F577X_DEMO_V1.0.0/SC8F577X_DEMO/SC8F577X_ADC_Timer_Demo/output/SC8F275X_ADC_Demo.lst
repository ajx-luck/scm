

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Dec 10 14:32:10 2019

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F5776
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	pa_nodes0,global,class=CODE,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 1.45
    18                           ; Generated 16/11/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     
    52                           	psect	text0
    53  0000                     __ptext0:	
    54  000B                     _INTCON	set	11
    55  0008                     _WPUB	set	8
    56  0006                     _PORTB	set	6
    57  0001                     _TMR0	set	1
    58  0059                     _INTF	set	89
    59  005A                     _T0IF	set	90
    60  005C                     _INTE	set	92
    61  005D                     _T0IE	set	93
    62  005F                     _GIE	set	95
    63  0030                     _RB0	set	48
    64  0031                     _RB1	set	49
    65  0034                     _RB4	set	52
    66  0029                     _RA1	set	41
    67  002A                     _RA2	set	42
    68  009F                     _ADRESL	set	159
    69  009E                     _ADRESH	set	158
    70  009D                     _ADCON0	set	157
    71  009C                     _ADCON1	set	156
    72  0088                     _OSCCON	set	136
    73  0086                     _TRISB	set	134
    74  0085                     _TRISA	set	133
    75  0081                     _OPTION_REG	set	129
    76  04E9                     _GODONE	set	1257
    77  0431                     _TRISB1	set	1073
    78  0434                     _TRISB4	set	1076
    79  0428                     _TRISA0	set	1064
    80  0429                     _TRISA1	set	1065
    81  042A                     _TRISA2	set	1066
    82                           
    83                           	psect	cinit
    84  000D                     start_initialization:	
    85                           ; #config settings
    86                           
    87  000D                     __initialization:	
    88                           
    89                           ; Clear objects allocated to BITCOMMON
    90  000D  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
    91                           
    92                           ; Clear objects allocated to COMMON
    93  000E  01F0               	clrf	__pbssCOMMON& (0+127)
    94  000F  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
    95  0010  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
    96  0011  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
    97  0012  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
    98  0013  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
    99  0014  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
   100  0015  01F7               	clrf	(__pbssCOMMON+7)& (0+127)
   101                           
   102                           ; Clear objects allocated to BANK0
   103  0016  1283               	bcf	3,5	;RP0=0, select bank0
   104  0017  1303               	bcf	3,6	;RP1=0, select bank0
   105  0018  01A0               	clrf	__pbssBANK0& (0+127)
   106  0019  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   107  001A  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   108  001B  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   109  001C                     end_of_initialization:	
   110                           ;End of C runtime variable initialization code
   111                           
   112  001C                     __end_of__initialization:	
   113  001C  0183               	clrf	3
   114  001D  118A  281F         	ljmp	_main	;jump to C main() function
   115                           
   116                           	psect	bitbssCOMMON
   117  03E8                     __pbitbssCOMMON:	
   118  03E8                     _Led_f:	
   119  03E8                     	ds	1
   120  03E9                     _Start_f:	
   121  03E9                     	ds	1
   122  03EA                     _Ms500_f:	
   123  03EA                     	ds	1
   124  03EB                     _Ms20_f:	
   125  03EB                     	ds	1
   126                           
   127                           	psect	bssCOMMON
   128  0070                     __pbssCOMMON:	
   129  0070                     _result:	
   130  0070                     	ds	2
   131  0072                     _adresult:	
   132  0072                     	ds	2
   133  0074                     Timer0_Isr@Ms2_Cnt:	
   134  0074                     	ds	1
   135  0075                     Timer0_Isr@Led_Cn:	
   136  0075                     	ds	1
   137  0076                     _Key_Cnt:	
   138  0076                     	ds	1
   139  0077                     _Ms200_Cnt:	
   140  0077                     	ds	1
   141                           
   142                           	psect	bssBANK0
   143  0020                     __pbssBANK0:	
   144  0020                     _Tempadresult1:	
   145  0020                     	ds	2
   146  0022                     _Tempadresult:	
   147  0022                     	ds	2
   148                           
   149                           	psect	cstackCOMMON
   150  0078                     __pcstackCOMMON:	
   151  0078                     ?_ADC_Result:	
   152  0078                     ?_main:	
   153                           ; 1 bytes @ 0x0
   154                           
   155  0078                     ?_Timer0_Isr:	
   156                           ; 1 bytes @ 0x0
   157                           
   158  0078                     ??_Timer0_Isr:	
   159                           ; 1 bytes @ 0x0
   160                           
   161                           
   162                           ; 1 bytes @ 0x0
   163  0078                     	ds	2
   164  007A                     ??_ADC_Result:	
   165                           
   166                           ; 1 bytes @ 0x2
   167  007A                     	ds	1
   168  007B                     ADC_Result@adch:	
   169                           
   170                           ; 1 bytes @ 0x3
   171  007B                     	ds	1
   172  007C                     ADC_Result@i:	
   173                           
   174                           ; 1 bytes @ 0x4
   175  007C                     	ds	1
   176  007D                     ??_main:	
   177                           
   178                           	psect	maintext
   179  001F                     __pmaintext:	
   180                           ; 1 bytes @ 0x5
   181 ;;
   182 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   183 ;;
   184 ;; *************** function _main *****************
   185 ;; Defined at:
   186 ;;		line 112 in file "E:\CMS_WORK\democode\SC8F577X_DEMO\SC8F275X_ADC_Demo\SC8F577X_ADC.c"
   187 ;; Parameters:    Size  Location     Type
   188 ;;		None
   189 ;; Auto vars:     Size  Location     Type
   190 ;;		None
   191 ;; Return value:  Size  Location     Type
   192 ;;                  1    wreg      void 
   193 ;; Registers used:
   194 ;;		wreg, status,2, status,0, pclath, cstack
   195 ;; Tracked objects:
   196 ;;		On entry : B00/0
   197 ;;		On exit  : 300/0
   198 ;;		Unchanged: 0/0
   199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   200 ;;      Params:         0       0       0       0
   201 ;;      Locals:         0       0       0       0
   202 ;;      Temps:          0       0       0       0
   203 ;;      Totals:         0       0       0       0
   204 ;;Total ram usage:        0 bytes
   205 ;; Hardware stack levels required when called:    2
   206 ;; This function calls:
   207 ;;		_ADC_Result
   208 ;; This function is called by:
   209 ;;		Startup code after reset
   210 ;; This function uses a non-reentrant model
   211 ;;
   212                           
   213                           
   214                           ;psect for function _main
   215  001F                     _main:	
   216                           
   217                           ;incstack = 0
   218                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   219  001F  0000               	nop	;# 
   220  0020  0064               	clrwdt	;# 
   221                           
   222                           ;SC8F577X_ADC.c: 117: INTCON = 0;
   223  0021  018B               	clrf	11	;volatile
   224                           
   225                           ;SC8F577X_ADC.c: 118: OSCCON = 0X70;
   226  0022  3070               	movlw	112
   227  0023  1683               	bsf	3,5	;RP0=1, select bank1
   228  0024  1303               	bcf	3,6	;RP1=0, select bank1
   229  0025  0088               	movwf	8	;volatile
   230                           
   231                           ;SC8F577X_ADC.c: 119: TRISA0 = 1;
   232  0026  1405               	bsf	5,0	;volatile
   233                           
   234                           ;SC8F577X_ADC.c: 121: WPUB = 0B00000001;
   235  0027  3001               	movlw	1
   236  0028  1283               	bcf	3,5	;RP0=0, select bank0
   237  0029  0088               	movwf	8	;volatile
   238                           
   239                           ;SC8F577X_ADC.c: 122: ADCON0 = 0B01111101;
   240  002A  307D               	movlw	125
   241  002B  1683               	bsf	3,5	;RP0=1, select bank1
   242  002C  009D               	movwf	29	;volatile
   243                           
   244                           ;SC8F577X_ADC.c: 123: ADCON1 = 0B00000111;
   245  002D  3007               	movlw	7
   246  002E  009C               	movwf	28	;volatile
   247                           
   248                           ;SC8F577X_ADC.c: 126: OPTION_REG = 0B00000011;
   249  002F  3003               	movlw	3
   250  0030  0081               	movwf	1	;volatile
   251                           
   252                           ;SC8F577X_ADC.c: 127: TMR0 = 6;
   253  0031  3006               	movlw	6
   254  0032  1283               	bcf	3,5	;RP0=0, select bank0
   255  0033  0081               	movwf	1	;volatile
   256                           
   257                           ;SC8F577X_ADC.c: 128: T0IF = 0;
   258  0034  110B               	bcf	11,2	;volatile
   259                           
   260                           ;SC8F577X_ADC.c: 129: T0IE = 1;
   261  0035  168B               	bsf	11,5	;volatile
   262                           
   263                           ;SC8F577X_ADC.c: 132: TRISA = 0b11111011;
   264  0036  30FB               	movlw	251
   265  0037  1683               	bsf	3,5	;RP0=1, select bank1
   266  0038  0085               	movwf	5	;volatile
   267                           
   268                           ;SC8F577X_ADC.c: 133: RA2= 0;
   269  0039  1283               	bcf	3,5	;RP0=0, select bank0
   270  003A  1105               	bcf	5,2	;volatile
   271                           
   272                           ;SC8F577X_ADC.c: 134: RA2= 1;
   273  003B  1505               	bsf	5,2	;volatile
   274  003C  30E9               	movlw	233
   275                           
   276                           ;SC8F577X_ADC.c: 136: Key_Cnt = 0;
   277  003D  01F6               	clrf	_Key_Cnt
   278                           
   279                           ;SC8F577X_ADC.c: 137: TRISB = 0b11101001;
   280  003E  1683               	bsf	3,5	;RP0=1, select bank1
   281  003F  0086               	movwf	6	;volatile
   282                           
   283                           ;SC8F577X_ADC.c: 138: PORTB = 0b00000000;
   284  0040  1283               	bcf	3,5	;RP0=0, select bank0
   285  0041  0186               	clrf	6	;volatile
   286                           
   287                           ;SC8F577X_ADC.c: 139: PORTB = 0b00010111;
   288  0042  3017               	movlw	23
   289  0043  0086               	movwf	6	;volatile
   290                           
   291                           ;SC8F577X_ADC.c: 141: INTF = 0;
   292  0044  108B               	bcf	11,1	;volatile
   293                           
   294                           ;SC8F577X_ADC.c: 144: GIE =1;
   295  0045  178B               	bsf	11,7	;volatile
   296  0046                     l867:	
   297                           ;SC8F577X_ADC.c: 146: while(1)
   298                           
   299  0046  0064               	clrwdt	;# 
   300                           
   301                           ;SC8F577X_ADC.c: 154: ADC_Result(15);
   302  0047  300F               	movlw	15
   303  0048  118A  20B3  118A   	fcall	_ADC_Result
   304                           
   305                           ;SC8F577X_ADC.c: 165: }
   306                           ;SC8F577X_ADC.c: 166: }
   307                           ;SC8F577X_ADC.c: 168: if(Ms20_f ==1)
   308                           
   309                           ;SC8F577X_ADC.c: 157: {
   310                           ;SC8F577X_ADC.c: 160: {
   311  004B  1DFD               	btfss	_Ms20_f/(0+8),_Ms20_f& (0+7)
   312  004C  2846               	goto	l867
   313  004D  3019               	movlw	25
   314                           
   315                           ;SC8F577X_ADC.c: 169: {
   316                           ;SC8F577X_ADC.c: 170: Ms20_f = 0;
   317  004E  11FD               	bcf	_Ms20_f/(0+8),_Ms20_f& (0+7)
   318                           
   319                           ;SC8F577X_ADC.c: 171: Ms200_Cnt++;
   320  004F  0AF7               	incf	_Ms200_Cnt,f
   321                           
   322                           ;SC8F577X_ADC.c: 172: if(Ms200_Cnt < 25)
   323  0050  0277               	subwf	_Ms200_Cnt,w
   324  0051  1803               	skipnc
   325  0052  2855               	goto	l870
   326                           
   327                           ;SC8F577X_ADC.c: 173: Ms500_f =0;
   328  0053  117D               	bcf	_Ms500_f/(0+8),_Ms500_f& (0+7)
   329  0054  2856               	goto	l1343
   330  0055                     l870:	
   331                           
   332                           ;SC8F577X_ADC.c: 174: else
   333                           ;SC8F577X_ADC.c: 175: Ms500_f =1;
   334  0055  157D               	bsf	_Ms500_f/(0+8),_Ms500_f& (0+7)
   335  0056                     l1343:	
   336                           
   337                           ;SC8F577X_ADC.c: 176: if(Ms200_Cnt >= 50)
   338  0056  3032               	movlw	50
   339  0057  0277               	subwf	_Ms200_Cnt,w
   340  0058  1803               	btfsc	3,0
   341                           
   342                           ;SC8F577X_ADC.c: 177: {
   343                           ;SC8F577X_ADC.c: 178: Ms200_Cnt = 0;
   344  0059  01F7               	clrf	_Ms200_Cnt
   345                           
   346                           ;SC8F577X_ADC.c: 180: }
   347                           ;SC8F577X_ADC.c: 182: if(RB0==0)
   348  005A  1283               	bcf	3,5	;RP0=0, select bank0
   349  005B  1806               	btfsc	6,0	;volatile
   350  005C  2863               	goto	l1353
   351                           
   352                           ;SC8F577X_ADC.c: 183: {
   353                           ;SC8F577X_ADC.c: 184: if(Key_Cnt <200)
   354  005D  30C8               	movlw	200
   355  005E  0276               	subwf	_Key_Cnt,w
   356  005F  1803               	skipnc
   357  0060  2846               	goto	l867
   358                           
   359                           ;SC8F577X_ADC.c: 185: Key_Cnt++;
   360  0061  0AF6               	incf	_Key_Cnt,f
   361  0062  2846               	goto	l867
   362  0063                     l1353:	
   363                           
   364                           ;SC8F577X_ADC.c: 187: else
   365                           ;SC8F577X_ADC.c: 188: {
   366                           ;SC8F577X_ADC.c: 189: if(Key_Cnt >5)
   367  0063  3006               	movlw	6
   368  0064  0276               	subwf	_Key_Cnt,w
   369  0065  1803               	btfsc	3,0
   370                           
   371                           ;SC8F577X_ADC.c: 190: {
   372                           ;SC8F577X_ADC.c: 191: if(Start_f==0)
   373  0066  18FD               	btfsc	_Start_f/(0+8),_Start_f& (0+7)
   374  0067  286F               	goto	l1359
   375                           
   376                           ;SC8F577X_ADC.c: 192: {
   377                           ;SC8F577X_ADC.c: 193: Start_f = 1;
   378  0068  14FD               	bsf	_Start_f/(0+8),_Start_f& (0+7)
   379                           
   380                           ;SC8F577X_ADC.c: 194: Led_f = 1;
   381  0069  147D               	bsf	_Led_f/(0+8),_Led_f& (0+7)
   382                           
   383                           ;SC8F577X_ADC.c: 195: RA1 = 0;
   384  006A  1085               	bcf	5,1	;volatile
   385                           
   386                           ;SC8F577X_ADC.c: 196: TRISA1 = 0;
   387  006B  1683               	bsf	3,5	;RP0=1, select bank1
   388  006C  1085               	bcf	5,1	;volatile
   389                           
   390                           ;SC8F577X_ADC.c: 197: INTF = 0;
   391  006D  108B               	bcf	11,1	;volatile
   392                           
   393                           ;SC8F577X_ADC.c: 198: INTE = 1;
   394  006E  160B               	bsf	11,4	;volatile
   395  006F                     l1359:	
   396                           
   397                           ;SC8F577X_ADC.c: 200: }
   398                           ;SC8F577X_ADC.c: 201: }
   399                           ;SC8F577X_ADC.c: 202: Key_Cnt = 0;
   400  006F  01F6               	clrf	_Key_Cnt
   401  0070  2846               	goto	l867
   402  0071                     __end_of_main:	
   403                           
   404                           	psect	text1
   405  00B3                     __ptext1:	
   406 ;; *************** function _ADC_Result *****************
   407 ;; Defined at:
   408 ;;		line 78 in file "E:\CMS_WORK\democode\SC8F577X_DEMO\SC8F275X_ADC_Demo\SC8F577X_ADC.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;  adch            1    wreg     unsigned char 
   411 ;; Auto vars:     Size  Location     Type
   412 ;;  adch            1    3[COMMON] unsigned char 
   413 ;;  i               1    4[COMMON] unsigned char 
   414 ;; Return value:  Size  Location     Type
   415 ;;                  1    wreg      unsigned char 
   416 ;; Registers used:
   417 ;;		wreg, status,2, status,0
   418 ;; Tracked objects:
   419 ;;		On entry : 0/0
   420 ;;		On exit  : 300/100
   421 ;;		Unchanged: 0/0
   422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   423 ;;      Params:         0       0       0       0
   424 ;;      Locals:         2       0       0       0
   425 ;;      Temps:          1       0       0       0
   426 ;;      Totals:         3       0       0       0
   427 ;;Total ram usage:        3 bytes
   428 ;; Hardware stack levels used:    1
   429 ;; Hardware stack levels required when called:    1
   430 ;; This function calls:
   431 ;;		Nothing
   432 ;; This function is called by:
   433 ;;		_main
   434 ;; This function uses a non-reentrant model
   435 ;;
   436                           
   437                           
   438                           ;psect for function _ADC_Result
   439  00B3                     _ADC_Result:	
   440                           
   441                           ;incstack = 0
   442                           ; Regs used in _ADC_Result: [wreg+status,2+status,0]
   443                           ;ADC_Result@adch stored from wreg
   444  00B3  00FB               	movwf	ADC_Result@adch
   445                           
   446                           ;SC8F577X_ADC.c: 80: unsigned char i = 0;
   447  00B4  01FC               	clrf	ADC_Result@i
   448                           
   449                           ;SC8F577X_ADC.c: 82: ADCON0 = 0X81 | (adch << 2);
   450  00B5  00FA               	movwf	??_ADC_Result
   451  00B6  3001               	movlw	1
   452  00B7  1003               	clrc
   453  00B8                     L1:	
   454  00B8  0DFA               	rlf	??_ADC_Result,f
   455  00B9  3EFF               	addlw	-1
   456  00BA  1003               	clrc
   457  00BB  1D03               	skipz
   458  00BC  28B8               	goto	L1
   459  00BD  0D7A               	rlf	??_ADC_Result,w
   460  00BE  3881               	iorlw	129
   461  00BF  1683               	bsf	3,5	;RP0=1, select bank1
   462  00C0  1303               	bcf	3,6	;RP1=0, select bank1
   463  00C1  009D               	movwf	29	;volatile
   464  00C2  0000               	nop	;# 
   465  00C3  0000               	nop	;# 
   466                           
   467                           ;SC8F577X_ADC.c: 85: GODONE = 1;
   468  00C4  1683               	bsf	3,5	;RP0=1, select bank1
   469  00C5  1303               	bcf	3,6	;RP1=0, select bank1
   470  00C6  149D               	bsf	29,1	;volatile
   471  00C7                     l851:	
   472                           ;SC8F577X_ADC.c: 88: while(GODONE)
   473                           
   474  00C7  1C9D               	btfss	29,1	;volatile
   475  00C8  28CC               	goto	l1289
   476                           
   477                           ;SC8F577X_ADC.c: 89: {
   478                           ;SC8F577X_ADC.c: 90: if(0 == (--i))
   479  00C9  0BFC               	decfsz	ADC_Result@i,f
   480  00CA  28C7               	goto	l851
   481  00CB  0008               	return
   482  00CC                     l1289:	
   483                           
   484                           ;SC8F577X_ADC.c: 92: }
   485                           ;SC8F577X_ADC.c: 93: result=(ADRESH<<4)+(ADRESL>>4);
   486  00CC  081E               	movf	30,w	;volatile
   487  00CD  00F0               	movwf	_result	;volatile
   488  00CE  01F1               	clrf	_result+1	;volatile
   489  00CF  0EF0               	swapf	_result,f	;volatile
   490  00D0  0EF1               	swapf	_result+1,f	;volatile
   491  00D1  30F0               	movlw	240
   492  00D2  05F1               	andwf	_result+1,f	;volatile
   493  00D3  0870               	movf	_result,w	;volatile
   494  00D4  390F               	andlw	15
   495  00D5  04F1               	iorwf	_result+1,f	;volatile
   496  00D6  30F0               	movlw	240
   497  00D7  05F0               	andwf	_result,f	;volatile
   498  00D8  0E1F               	swapf	31,w	;volatile
   499  00D9  390F               	andlw	15
   500  00DA  07F0               	addwf	_result,f	;volatile
   501  00DB  1803               	skipnc
   502  00DC  0AF1               	incf	_result+1,f	;volatile
   503  00DD  0008               	return
   504  00DE                     __end_of_ADC_Result:	
   505                           
   506                           	psect	text2
   507  0071                     __ptext2:	
   508 ;; *************** function _Timer0_Isr *****************
   509 ;; Defined at:
   510 ;;		line 211 in file "E:\CMS_WORK\democode\SC8F577X_DEMO\SC8F275X_ADC_Demo\SC8F577X_ADC.c"
   511 ;; Parameters:    Size  Location     Type
   512 ;;		None
   513 ;; Auto vars:     Size  Location     Type
   514 ;;		None
   515 ;; Return value:  Size  Location     Type
   516 ;;                  1    wreg      void 
   517 ;; Registers used:
   518 ;;		wreg, status,2, status,0
   519 ;; Tracked objects:
   520 ;;		On entry : 0/0
   521 ;;		On exit  : 0/0
   522 ;;		Unchanged: 0/0
   523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   524 ;;      Params:         0       0       0       0
   525 ;;      Locals:         0       0       0       0
   526 ;;      Temps:          2       0       0       0
   527 ;;      Totals:         2       0       0       0
   528 ;;Total ram usage:        2 bytes
   529 ;; Hardware stack levels used:    1
   530 ;; This function calls:
   531 ;;		Nothing
   532 ;; This function is called by:
   533 ;;		Interrupt level 1
   534 ;; This function uses a non-reentrant model
   535 ;;
   536                           
   537                           
   538                           ;psect for function _Timer0_Isr
   539  0071                     _Timer0_Isr:	
   540                           
   541                           ;SC8F577X_ADC.c: 222: }
   542                           ;SC8F577X_ADC.c: 223: if(T0IF)
   543                           
   544                           ;SC8F577X_ADC.c: 213: static unsigned char Led_Cn=0;
   545                           ;SC8F577X_ADC.c: 214: static unsigned char Ms2_Cnt=0;
   546                           ;SC8F577X_ADC.c: 216: if(INTF)
   547                           ;SC8F577X_ADC.c: 217: {
   548  0071  1D0B               	btfss	11,2	;volatile
   549  0072  28AC               	goto	i1l901
   550                           
   551                           ;SC8F577X_ADC.c: 224: {
   552                           ;SC8F577X_ADC.c: 225: TMR0 += 6;
   553  0073  3006               	movlw	6
   554  0074  1283               	bcf	3,5	;RP0=0, select bank0
   555  0075  1303               	bcf	3,6	;RP1=0, select bank0
   556  0076  0781               	addwf	1,f	;volatile
   557                           
   558                           ;SC8F577X_ADC.c: 226: T0IF = 0;
   559  0077  110B               	bcf	11,2	;volatile
   560  0078  300A               	movlw	10
   561                           
   562                           ;SC8F577X_ADC.c: 228: Ms2_Cnt++;
   563  0079  0AF4               	incf	Timer0_Isr@Ms2_Cnt,f
   564                           
   565                           ;SC8F577X_ADC.c: 229: if(Ms2_Cnt >=10 )
   566  007A  0274               	subwf	Timer0_Isr@Ms2_Cnt,w
   567  007B  1C03               	skipc
   568  007C  287F               	goto	i1l1373
   569                           
   570                           ;SC8F577X_ADC.c: 230: {
   571                           ;SC8F577X_ADC.c: 231: Ms2_Cnt = 0;
   572  007D  01F4               	clrf	Timer0_Isr@Ms2_Cnt
   573                           
   574                           ;SC8F577X_ADC.c: 232: Ms20_f =1;
   575  007E  15FD               	bsf	_Ms20_f/(0+8),_Ms20_f& (0+7)
   576  007F                     i1l1373:	
   577  007F  3003               	movlw	3
   578                           
   579                           ;SC8F577X_ADC.c: 233: }
   580                           ;SC8F577X_ADC.c: 235: Led_Cn++;
   581  0080  0AF5               	incf	Timer0_Isr@Led_Cn,f
   582                           
   583                           ;SC8F577X_ADC.c: 236: if(Led_Cn >= 3)
   584  0081  0275               	subwf	Timer0_Isr@Led_Cn,w
   585  0082  1803               	btfsc	3,0
   586                           
   587                           ;SC8F577X_ADC.c: 237: {
   588                           ;SC8F577X_ADC.c: 238: Led_Cn = 0;
   589  0083  01F5               	clrf	Timer0_Isr@Led_Cn
   590                           
   591                           ;SC8F577X_ADC.c: 239: }
   592                           ;SC8F577X_ADC.c: 241: if(Led_Cn==0)
   593  0084  0875               	movf	Timer0_Isr@Led_Cn,w
   594  0085  1D03               	btfss	3,2
   595  0086  2897               	goto	i1l1385
   596                           
   597                           ;SC8F577X_ADC.c: 242: {
   598                           ;SC8F577X_ADC.c: 243: RA2= 0;
   599  0087  1105               	bcf	5,2	;volatile
   600                           
   601                           ;SC8F577X_ADC.c: 244: TRISA2 = 0;
   602  0088  1683               	bsf	3,5	;RP0=1, select bank1
   603  0089  1105               	bcf	5,2	;volatile
   604                           
   605                           ;SC8F577X_ADC.c: 246: RB1= 1;
   606  008A  1283               	bcf	3,5	;RP0=0, select bank0
   607  008B  1486               	bsf	6,1	;volatile
   608                           
   609                           ;SC8F577X_ADC.c: 247: TRISB1 = 0;
   610  008C  1683               	bsf	3,5	;RP0=1, select bank1
   611  008D  1086               	bcf	6,1	;volatile
   612                           
   613                           ;SC8F577X_ADC.c: 248: if(Led_f==0)
   614  008E  187D               	btfsc	_Led_f/(0+8),_Led_f& (0+7)
   615  008F  2893               	goto	i1l894
   616                           
   617                           ;SC8F577X_ADC.c: 249: {
   618                           ;SC8F577X_ADC.c: 250: RB4= 1;
   619  0090  1283               	bcf	3,5	;RP0=0, select bank0
   620  0091  1606               	bsf	6,4	;volatile
   621  0092  2895               	goto	L2
   622  0093                     i1l894:	
   623                           ;SC8F577X_ADC.c: 252: }else
   624                           
   625                           ;SC8F577X_ADC.c: 251: TRISB4 = 0;
   626                           
   627                           
   628                           ;SC8F577X_ADC.c: 253: {
   629                           ;SC8F577X_ADC.c: 254: RB4= 0;
   630  0093  1283               	bcf	3,5	;RP0=0, select bank0
   631  0094  1206               	bcf	6,4	;volatile
   632  0095                     L2:	
   633                           
   634                           ;SC8F577X_ADC.c: 255: TRISB4 = 0;
   635  0095  1683               	bsf	3,5	;RP0=1, select bank1
   636  0096  1206               	bcf	6,4	;volatile
   637  0097                     i1l1385:	
   638                           
   639                           ;SC8F577X_ADC.c: 256: }
   640                           ;SC8F577X_ADC.c: 257: }
   641                           ;SC8F577X_ADC.c: 258: if(Led_Cn==1)
   642  0097  0B75               	decfsz	Timer0_Isr@Led_Cn,w
   643  0098  28AC               	goto	i1l901
   644                           
   645                           ;SC8F577X_ADC.c: 259: {
   646                           ;SC8F577X_ADC.c: 260: RA2= 1;
   647  0099  1283               	bcf	3,5	;RP0=0, select bank0
   648  009A  1505               	bsf	5,2	;volatile
   649                           
   650                           ;SC8F577X_ADC.c: 261: TRISA2 = 0;
   651  009B  1683               	bsf	3,5	;RP0=1, select bank1
   652  009C  1105               	bcf	5,2	;volatile
   653                           
   654                           ;SC8F577X_ADC.c: 263: RB1= 0;
   655  009D  1283               	bcf	3,5	;RP0=0, select bank0
   656  009E  1086               	bcf	6,1	;volatile
   657                           
   658                           ;SC8F577X_ADC.c: 264: TRISB1 = 0;
   659  009F  1683               	bsf	3,5	;RP0=1, select bank1
   660  00A0  1086               	bcf	6,1	;volatile
   661                           
   662                           ;SC8F577X_ADC.c: 266: if(Ms500_f==1||Start_f==1)
   663  00A1  197D               	btfsc	_Ms500_f/(0+8),_Ms500_f& (0+7)
   664  00A2  28A5               	goto	i1l899
   665  00A3  1CFD               	btfss	_Start_f/(0+8),_Start_f& (0+7)
   666  00A4  28A8               	goto	i1l897
   667  00A5                     i1l899:	
   668                           
   669                           ;SC8F577X_ADC.c: 267: {
   670                           ;SC8F577X_ADC.c: 268: RB4= 0;
   671  00A5  1283               	bcf	3,5	;RP0=0, select bank0
   672  00A6  1206               	bcf	6,4	;volatile
   673  00A7  28AA               	goto	L3
   674  00A8                     i1l897:	
   675                           ;SC8F577X_ADC.c: 270: }
   676                           
   677                           ;SC8F577X_ADC.c: 269: TRISB4 = 0;
   678                           
   679                           
   680                           ;SC8F577X_ADC.c: 271: else
   681                           ;SC8F577X_ADC.c: 272: {
   682                           ;SC8F577X_ADC.c: 273: RB4= 1;
   683  00A8  1283               	bcf	3,5	;RP0=0, select bank0
   684  00A9  1606               	bsf	6,4	;volatile
   685  00AA                     L3:	
   686                           
   687                           ;SC8F577X_ADC.c: 274: TRISB4 = 0;
   688  00AA  1683               	bsf	3,5	;RP0=1, select bank1
   689  00AB  1206               	bcf	6,4	;volatile
   690  00AC                     i1l901:	
   691  00AC  0879               	movf	??_Timer0_Isr+1,w
   692  00AD  008A               	movwf	10
   693  00AE  0E78               	swapf	??_Timer0_Isr^(0+-128),w
   694  00AF  0083               	movwf	3
   695  00B0  0EFE               	swapf	126,f
   696  00B1  0E7E               	swapf	126,w
   697  00B2  0009               	retfie
   698  00B3                     __end_of_Timer0_Isr:	
   699  007E                     btemp	set	126	;btemp
   700  007E                     wtemp0	set	126
   701                           
   702                           	psect	intentry
   703  0004                     __pintentry:	
   704                           ;incstack = 0
   705                           ; Regs used in _Timer0_Isr: [wreg+status,2+status,0]
   706                           
   707  0004                     interrupt_function:	
   708  007E                     saved_w	set	btemp
   709  0004  00FE               	movwf	btemp
   710  0005  0E03               	swapf	3,w
   711  0006  00F8               	movwf	??_Timer0_Isr
   712  0007  080A               	movf	10,w
   713  0008  00F9               	movwf	??_Timer0_Isr+1
   714  0009  118A  2871         	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      14
    BANK0            80      0       4
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC_Result

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Timer0_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer0_Isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Timer0_Isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      30
                         _ADC_Result
 ---------------------------------------------------------------------------------
 (1) _ADC_Result                                           3     3      0      30
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Timer0_Isr                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Result

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      0       4       4        5.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      12       8        0.0%
DATA                 0      0      12       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Dec 10 14:32:10 2019

                    l851 00C7                      l870 0055                      l867 0046  
                    _GIE 005F                      _RA1 0029                      _RA2 002A  
                    _RB0 0030                      _RB1 0031                      _RB4 0034  
    __size_of_ADC_Result 002B                     l1343 0056                     l1353 0063  
                   l1359 006F                     l1289 00CC                     _T0IE 005D  
                   _T0IF 005A                     _INTE 005C                     _INTF 0059  
                   _TMR0 0001                     _WPUB 0008                     _main 001F  
                   btemp 007E                     start 000B        Timer0_Isr@Ms2_Cnt 0074  
                  ?_main 0078                    i1l901 00AC                    i1l894 0093  
                  i1l897 00A8                    i1l899 00A5                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0086                    _Led_f 03E8  
         __pbitbssCOMMON 03E8                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000D             __end_of_main 0071  
                 ??_main 007D                   _ADCON0 009D                   _ADCON1 009C  
                 _ADRESH 009E                   _ADRESL 009F                   _GODONE 04E9  
                 i1l1373 007F                   i1l1385 0097                   _INTCON 000B  
                 _OSCCON 0088                   _TRISA0 0428                   _TRISA1 0429  
                 _TRISA2 042A                   _TRISB1 0431                   _TRISB4 0434  
           ??_ADC_Result 007A                   _Ms20_f 03EB               _Timer0_Isr 0071  
                 _result 0070       __end_of_ADC_Result 00DE                   saved_w 007E  
__end_of__initialization 001C           __pcstackCOMMON 0078               __pbssBANK0 0020  
            ?_Timer0_Isr 0078               __pmaintext 001F               __pintentry 0004  
                _Ms500_f 03EA                  _Key_Cnt 0076                  _Start_f 03E9  
                __ptext0 0000                  __ptext1 00B3                  __ptext2 0071  
    __size_of_Timer0_Isr 0042     end_of_initialization 001C                _Ms200_Cnt 0077  
       Timer0_Isr@Led_Cn 0075      start_initialization 000D             ??_Timer0_Isr 0078  
          _Tempadresult1 0020              __pbssCOMMON 0070                ___latbits 0001  
     __end_of_Timer0_Isr 00B3        interrupt_function 0004              ADC_Result@i 007C  
         ADC_Result@adch 007B               _ADC_Result 00B3             _Tempadresult 0022  
               _adresult 0072            __size_of_main 0052                 intlevel1 0000  
            ?_ADC_Result 0078               _OPTION_REG 0081  
