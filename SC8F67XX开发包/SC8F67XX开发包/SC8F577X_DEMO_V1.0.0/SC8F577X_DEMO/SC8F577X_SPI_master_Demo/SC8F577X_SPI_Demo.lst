---- H:\MyDownloads\说明书&测试报告\开发包\SC8F577X开发包\SC8F577X_DEMO\SC8F577X_SPI_master_Demo\main.c ----------------------------------------------------------------------
1:                /**********************************************************
2:                
3:                **********************************************************/
4:                
5:                #include <sc.h>
6:                
7:                
8:                
9:                volatile unsigned int   result,result1,result2;
10:               volatile unsigned char ReceBuffer;	//接收到的数据
11:               volatile unsigned char SendBuffer;	//待发送的数据
12:               
13:               
14:               void DelayXms(unsigned char x);
15:               
16:               
17:               /***********************************************************
18:               函数名称：DelayXms
19:               函数功能：毫秒级非精准延时
20:               入口参数：x - 延时时间
21:               出口参数：
22:               备    注：
23:               ***********************************************************/
24:               void DelayXms(unsigned char x)
  0054    00FB    LD	0x7B,A
25:               {
26:               	unsigned char i,j;
27:               	for(i=x;i>0;i--)
  0055    00FC    LD	0x7C,A
  0056    087C    LD	A,0x7C
  0057    1903    SZB	0x3,2
  0058    0008    RET
28:               		for(j=153;j>0;j--);
  0059    3099    LDIA	0x99
  005A    00FD    LD	0x7D,A
  005B    0BFD    SZDECR	0x7D
  005C    285B    JP	0x5B
  005D    03FC    DECR	0x7C
  005E    2856    JP	0x56
29:               }
30:               
31:               /***********************************************************
32:               main主函数
33:               ***********************************************************/
34:               
35:               #include <sc.h>
36:               
37:                
38:               void Init_System();
39:               
40:               volatile unsigned char IICReadData;
41:               void main()
42:               {
43:               	Init_System();
  0019    118A    CLRB	0xA,3
  001A    2033    CALL	0x33
  001B    118A    CLRB	0xA,3
44:               	
45:               
46:               	 SPICON =   0B00100010;  // SPI  使能 主动模式
  001C    3022    LDIA	0x22
  001D    1703    SETB	0x3,6
  001E    009D    LD	0x1D,A
47:                    SPICON2 =  0B00000000;  // SPI  4线  主动模式
  001F    019E    CLR	0x1E
48:                   
49:               	 SPIIF =0;
  0020    1303    CLRB	0x3,6
  0021    118C    CLRB	0xC,3
50:               	// SPIIE=1;
51:               	 PEIE =1;
  0022    170B    SETB	0xB,6
52:               	 GIE =1;  
  0023    178B    SETB	0xB,7
53:               
54:               	while(1)
55:               	{
56:                        DelayXms(200);
  0024    30C8    LDIA	0xC8
  0025    118A    CLRB	0xA,3
  0026    2054    CALL	0x54
  0027    118A    CLRB	0xA,3
57:               		 SPIBUF = 0x21;  //待发送数据
  0028    3021    LDIA	0x21
  0029    1703    SETB	0x3,6
  002A    009C    LD	0x1C,A
58:               		 while(SPIIF==0);  //等待发送完成
  002B    1303    CLRB	0x3,6
  002C    1D8C    SNZB	0xC,3
  002D    282B    JP	0x2B
59:               		 SPIIF = 0;
  002E    118C    CLRB	0xC,3
60:               	    	ReceBuffer = SPIBUF; //读取从机数据
  002F    1703    SETB	0x3,6
  0030    081C    LD	A,0x1C
  0031    00F8    LD	0x78,A
  0032    2824    JP	0x24
61:               
62:               	}
63:               }
64:               
65:               
66:               
67:               /***********************************************
68:               函数名称：Init_System
69:               函数功能：系统初始化
70:               入口参数：无
71:               出口参数：无
72:               备注：
73:               ************************************************/
74:               void Init_System()
  0033    0000    NOP
  0034    0064    CLRWDT
75:               {
76:               	asm("nop");
77:               	asm("clrwdt");
78:               	INTCON = 0;					//系统初始化
  0035    018B    CLR	0xB
79:               	OSCCON = 0X70;				//配置振荡为8M,关WDT
  0036    3070    LDIA	0x70
  0037    1683    SETB	0x3,5
  0038    1303    CLRB	0x3,6
  0039    0088    LD	0x8,A
80:               	OPTION_REG = 0;
  003A    0181    CLR	0x1
81:               	
82:                   WPUA  = 0B00000000;			//初始化上拉
  003B    1283    CLRB	0x3,5
  003C    0187    CLR	0x7
83:                   WPUB  = 0B00000000;			
  003D    0188    CLR	0x8
84:                 
85:                
86:               	TRISA = 0B00000000;			//初始化IO状态
  003E    1683    SETB	0x3,5
  003F    0185    CLR	0x5
87:               	TRISB = 0B00100100;
  0040    3024    LDIA	0x24
  0041    0086    LD	0x6,A
88:               
89:               	PORTA = 0B00000000;
  0042    1283    CLRB	0x3,5
  0043    0185    CLR	0x5
90:               	PORTB = 0B00000000;			//初始化输出
  0044    0186    CLR	0x6
  0045    0008    RET
91:               
92:               }
93:               
94:               /***********************************************
95:               函数名称：PB_Isr
96:               函数功能：PB电平变化中断服务
97:               入口参数：无
98:               出口参数：无
99:               备注：
100:              ************************************************/
101:              void interrupt PB_Isr()
102:              {
103:              	if(RBIF)
  0046    1C0B    SNZB	0xB,0
  0047    284D    JP	0x4D
104:              	{
105:              		RBIF = 0;			//清中断标志
  0048    100B    CLRB	0xB,0
106:              		RB6 = ~RB6;
  0049    3040    LDIA	0x40
  004A    1283    CLRB	0x3,5
  004B    1303    CLRB	0x3,6
  004C    0686    XORR	0x6
  004D    087A    LD	A,0x7A
  004E    008A    LD	0xA,A
  004F    0E79    SWAPA	0x79
  0050    0083    LD	0x3,A
  0051    0EFE    SWAPR	0x7E
  0052    0E7E    SWAPA	0x7E
  0053    0009    RETI
107:              		//Init_System();
108:              	}
109:              	
110:              	//if(SPIIF==1)
111:              	//{
112:              	   //SPIIF = 0;
113:              	   
114:              	  // if(SPIBF==1)
115:              	 //  {
116:              		//	ReceBuffer = SPIBUF;
117:              	 //  }
118:              	     
119:              	  // SPIBUF =0x11;	
120:              	
121:              	//}
122:              }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280B    JP	0xB
  000B    118A    CLRB	0xA,3
  000C    280D    JP	0xD
---- start_initialization ------------------------------------------------------------------
  000D    01F0    CLR	0x70
  000E    01F1    CLR	0x71
  000F    01F2    CLR	0x72
  0010    01F3    CLR	0x73
  0011    01F4    CLR	0x74
  0012    01F5    CLR	0x75
  0013    01F6    CLR	0x76
  0014    01F7    CLR	0x77
  0015    01F8    CLR	0x78
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F9    LD	0x79,A
  0007    080A    LD	A,0xA
  0008    00FA    LD	0x7A,A
  0009    118A    CLRB	0xA,3
  000A    2846    JP	0x46
---- common_function ------------------------------------------------------------------
  0016    0183    CLR	0x3
  0017    118A    CLRB	0xA,3
  0018    2819    JP	0x19
