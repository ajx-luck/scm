

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb 22 17:07:33 2021

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F5773
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	pa_nodes0,global,class=CODE,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 1.45
    15                           ; Generated 16/11/2017 GMT
    16                           ; 
    17                           ; Copyright 漏 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F887 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     
    49                           	psect	nvCOMMON
    50  0077                     __pnvCOMMON:	
    51  0077                     _Adc_Result2:	
    52  0077                     	ds	2
    53  0079                     _Adc_Result1:	
    54  0079                     	ds	2
    55  000B                     _INTCON	set	11
    56  0008                     _WPUB	set	8
    57  0007                     _WPUA	set	7
    58  0006                     _PORTB	set	6
    59  0005                     _PORTA	set	5
    60  009F                     _ADRESL	set	159
    61  009E                     _ADRESH	set	158
    62  009D                     _ADCON0	set	157
    63  009C                     _ADCON1	set	156
    64  009A                     _PGACON	set	154
    65  0088                     _OSCCON	set	136
    66  0086                     _TRISB	set	134
    67  0085                     _TRISA	set	133
    68  0081                     _OPTION_REG	set	129
    69  04E9                     _GODONE	set	1257
    70  04E6                     _CHS4	set	1254
    71  04DF                     _ECIGEN	set	1247
    72  04D6                     _PGACH	set	1238
    73                           
    74                           	psect	cinit
    75  07FB                     start_initialization:	
    76                           ; #config settings
    77                           
    78  07FB                     __initialization:	
    79                           
    80                           ; Clear objects allocated to COMMON
    81  07FB  01FB               	clrf	__pbssCOMMON& (0+127)
    82  07FC  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
    83  07FD                     end_of_initialization:	
    84                           ;End of C runtime variable initialization code
    85                           
    86  07FD                     __end_of__initialization:	
    87  07FD  0183               	clrf	3
    88  07FE  118A  2F8D         	ljmp	_main	;jump to C main() function
    89                           
    90                           	psect	bssCOMMON
    91  007B                     __pbssCOMMON:	
    92  007B                     _Adc_Result0:	
    93  007B                     	ds	2
    94                           
    95                           	psect	cstackCOMMON
    96  0070                     __pcstackCOMMON:	
    97  0070                     ?_Init_System:	
    98  0070                     ??_Init_System:	
    99                           ; 1 bytes @ 0x0
   100                           
   101  0070                     ?_main:	
   102                           ; 1 bytes @ 0x0
   103                           
   104  0070                     ?_Read_ADC:	
   105                           ; 1 bytes @ 0x0
   106                           
   107  0070                     Read_ADC@ADCLDORef:	
   108                           ; 2 bytes @ 0x0
   109                           
   110                           
   111                           ; 1 bytes @ 0x0
   112  0070                     	ds	2
   113  0072                     ??_Read_ADC:	
   114                           
   115                           ; 1 bytes @ 0x2
   116  0072                     	ds	1
   117  0073                     Read_ADC@Adc_Result:	
   118                           
   119                           ; 2 bytes @ 0x3
   120  0073                     	ds	2
   121  0075                     Read_ADC@i:	
   122                           
   123                           ; 1 bytes @ 0x5
   124  0075                     	ds	1
   125  0076                     Read_ADC@ADCchannel:	
   126                           
   127                           ; 1 bytes @ 0x6
   128  0076                     	ds	1
   129  0077                     ??_main:	
   130                           
   131                           	psect	maintext
   132  078D                     __pmaintext:	
   133                           ; 1 bytes @ 0x7
   134 ;;
   135 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   136 ;;
   137 ;; *************** function _main *****************
   138 ;; Defined at:
   139 ;;		line 18 in file "H:\MyDownloads\说明书&测试报告\开发包\SC8F577X开发包\SC8F577X_DEMO\SC8F577X_PGA+恒流源_Demo\main.c"
   140 ;; Parameters:    Size  Location     Type
   141 ;;		None
   142 ;; Auto vars:     Size  Location     Type
   143 ;;		None
   144 ;; Return value:  Size  Location     Type
   145 ;;                  1    wreg      void 
   146 ;; Registers used:
   147 ;;		wreg, status,2, status,0, pclath, cstack
   148 ;; Tracked objects:
   149 ;;		On entry : B00/0
   150 ;;		On exit  : 300/100
   151 ;;		Unchanged: 0/0
   152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   153 ;;      Params:         0       0       0       0
   154 ;;      Locals:         0       0       0       0
   155 ;;      Temps:          0       0       0       0
   156 ;;      Totals:         0       0       0       0
   157 ;;Total ram usage:        0 bytes
   158 ;; Hardware stack levels required when called:    1
   159 ;; This function calls:
   160 ;;		_Init_System
   161 ;;		_Read_ADC
   162 ;; This function is called by:
   163 ;;		Startup code after reset
   164 ;; This function uses a non-reentrant model
   165 ;;
   166                           
   167                           
   168                           ;psect for function _main
   169  078D                     _main:	
   170                           
   171                           ;main.c: 20: Init_System();
   172                           
   173                           ;incstack = 0
   174                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   175  078D  118A  2773  118A   	fcall	_Init_System
   176                           
   177                           ;main.c: 22: TRISA |= 0x01;
   178  0790  1405               	bsf	5,0	;volatile
   179                           
   180                           ;main.c: 23: PGACON = 0b10000011;
   181  0791  3083               	movlw	131
   182  0792  009A               	movwf	26	;volatile
   183                           
   184                           ;main.c: 25: ECIGEN =1;
   185  0793  179B               	bsf	27,7	;volatile
   186  0794                     l1390:	
   187                           
   188                           ;main.c: 27: {
   189                           ;main.c: 29: PGACH =0;
   190  0794  131A               	bcf	26,6	;volatile
   191  0795  3014               	movlw	20
   192                           
   193                           ;main.c: 30: Adc_Result1 = Read_ADC(20,1);
   194  0796  01F0               	clrf	Read_ADC@ADCLDORef
   195  0797  0AF0               	incf	Read_ADC@ADCLDORef,f
   196  0798  118A  27B4  118A   	fcall	_Read_ADC
   197  079B  0871               	movf	?_Read_ADC+1,w
   198  079C  00FA               	movwf	_Adc_Result1+1	;volatile
   199  079D  0870               	movf	?_Read_ADC,w
   200  079E  00F9               	movwf	_Adc_Result1	;volatile
   201                           
   202                           ;main.c: 31: PGACH =1;
   203  079F  171A               	bsf	26,6	;volatile
   204  07A0  3014               	movlw	20
   205                           
   206                           ;main.c: 32: Adc_Result2 = Read_ADC(20,1);
   207  07A1  01F0               	clrf	Read_ADC@ADCLDORef
   208  07A2  0AF0               	incf	Read_ADC@ADCLDORef,f
   209  07A3  118A  27B4  118A   	fcall	_Read_ADC
   210  07A6  0871               	movf	?_Read_ADC+1,w
   211  07A7  00F8               	movwf	_Adc_Result2+1	;volatile
   212  07A8  0870               	movf	?_Read_ADC,w
   213  07A9  00F7               	movwf	_Adc_Result2	;volatile
   214                           
   215                           ;main.c: 34: Adc_Result1 += Adc_Result2;
   216  07AA  0877               	movf	_Adc_Result2,w	;volatile
   217  07AB  07F9               	addwf	_Adc_Result1,f	;volatile
   218  07AC  1803               	skipnc
   219  07AD  0AFA               	incf	_Adc_Result1+1,f	;volatile
   220  07AE  0878               	movf	_Adc_Result2+1,w	;volatile
   221  07AF  07FA               	addwf	_Adc_Result1+1,f	;volatile
   222                           
   223                           ;main.c: 35: Adc_Result1 >>=1;
   224  07B0  1003               	clrc
   225  07B1  0CFA               	rrf	_Adc_Result1+1,f	;volatile
   226  07B2  0CF9               	rrf	_Adc_Result1,f	;volatile
   227  07B3  2F94               	goto	l1390
   228  07B4                     __end_of_main:	
   229                           
   230                           	psect	text1
   231  07B4                     __ptext1:	
   232 ;; *************** function _Read_ADC *****************
   233 ;; Defined at:
   234 ;;		line 53 in file "H:\MyDownloads\说明书&测试报告\开发包\SC8F577X开发包\SC8F577X_DEMO\SC8F577X_PGA+恒流源_Demo\main.c"
   235 ;; Parameters:    Size  Location     Type
   236 ;;  ADCchannel      1    wreg     unsigned char 
   237 ;;  ADCLDORef       1    0[COMMON] unsigned char 
   238 ;; Auto vars:     Size  Location     Type
   239 ;;  ADCchannel      1    6[COMMON] unsigned char 
   240 ;;  Adc_Result      2    3[COMMON] unsigned int 
   241 ;;  i               1    5[COMMON] unsigned char 
   242 ;; Return value:  Size  Location     Type
   243 ;;                  2    0[COMMON] unsigned int 
   244 ;; Registers used:
   245 ;;		wreg, status,2, status,0
   246 ;; Tracked objects:
   247 ;;		On entry : 300/100
   248 ;;		On exit  : 300/100
   249 ;;		Unchanged: 0/0
   250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   251 ;;      Params:         2       0       0       0
   252 ;;      Locals:         4       0       0       0
   253 ;;      Temps:          1       0       0       0
   254 ;;      Totals:         7       0       0       0
   255 ;;Total ram usage:        7 bytes
   256 ;; Hardware stack levels used:    1
   257 ;; This function calls:
   258 ;;		Nothing
   259 ;; This function is called by:
   260 ;;		_main
   261 ;; This function uses a non-reentrant model
   262 ;;
   263                           
   264                           
   265                           ;psect for function _Read_ADC
   266  07B4                     _Read_ADC:	
   267                           
   268                           ;incstack = 0
   269                           ; Regs used in _Read_ADC: [wreg+status,2+status,0]
   270                           ;Read_ADC@ADCchannel stored from wreg
   271  07B4  00F6               	movwf	Read_ADC@ADCchannel
   272                           
   273                           ;main.c: 55: unsigned int Adc_Result;
   274                           ;main.c: 56: unsigned char i=200;
   275  07B5  30C8               	movlw	200
   276  07B6  00F5               	movwf	Read_ADC@i
   277                           
   278                           ;main.c: 59: if(ADCLDORef==0)
   279  07B7  0870               	movf	Read_ADC@ADCLDORef,w
   280  07B8  1D03               	btfss	3,2
   281  07B9  2FBC               	goto	l1354
   282                           
   283                           ;main.c: 60: {
   284                           ;main.c: 61: ADCON1 = 0B00000000;
   285  07BA  019C               	clrf	28	;volatile
   286                           
   287                           ;main.c: 62: }
   288  07BB  2FC2               	goto	l1360
   289  07BC                     l1354:	
   290                           
   291                           ;main.c: 63: else if(ADCLDORef==1)
   292  07BC  0B70               	decfsz	Read_ADC@ADCLDORef,w
   293  07BD  2FC0               	goto	l1358
   294                           
   295                           ;main.c: 64: {
   296                           ;main.c: 65: ADCON1 = 0B00000101;
   297  07BE  3005               	movlw	5
   298  07BF  2FC1               	goto	L2
   299  07C0                     l1358:	
   300                           ;main.c: 66: }
   301                           
   302                           
   303                           ;main.c: 67: else
   304                           ;main.c: 68: {
   305                           ;main.c: 69: ADCON1 = 0B00000110;
   306  07C0  3006               	movlw	6
   307  07C1                     L2:	
   308  07C1  009C               	movwf	28	;volatile
   309  07C2                     l1360:	
   310                           
   311                           ;main.c: 70: }
   312                           ;main.c: 72: CHS4 = 0;
   313  07C2  131C               	bcf	28,6	;volatile
   314                           
   315                           ;main.c: 73: if(ADCchannel >=16)
   316  07C3  3010               	movlw	16
   317  07C4  0276               	subwf	Read_ADC@ADCchannel,w
   318  07C5  1C03               	skipc
   319  07C6  2FCA               	goto	l889
   320                           
   321                           ;main.c: 74: {
   322                           ;main.c: 75: ADCchannel -= 16;
   323  07C7  3010               	movlw	16
   324  07C8  02F6               	subwf	Read_ADC@ADCchannel,f
   325                           
   326                           ;main.c: 76: CHS4 = 1;
   327  07C9  171C               	bsf	28,6	;volatile
   328  07CA                     l889:	
   329                           
   330                           ;main.c: 77: }
   331                           ;main.c: 79: ADCON0 &= 0b11000011;
   332  07CA  30C3               	movlw	195
   333  07CB  059D               	andwf	29,f	;volatile
   334                           
   335                           ;main.c: 80: ADCON0 |= ADCchannel<<2;
   336  07CC  0876               	movf	Read_ADC@ADCchannel,w
   337  07CD  00F2               	movwf	??_Read_ADC
   338  07CE  3001               	movlw	1
   339  07CF  1003               	clrc
   340  07D0                     L1:	
   341  07D0  0DF2               	rlf	??_Read_ADC,f
   342  07D1  3EFF               	addlw	-1
   343  07D2  1003               	clrc
   344  07D3  1D03               	skipz
   345  07D4  2FD0               	goto	L1
   346  07D5  0D72               	rlf	??_Read_ADC,w
   347  07D6  049D               	iorwf	29,f	;volatile
   348  07D7  0000               	nop	;# 
   349                           
   350                           ;main.c: 82: GODONE =1;
   351  07D8  1683               	bsf	3,5	;RP0=1, select bank1
   352  07D9  1303               	bcf	3,6	;RP1=0, select bank1
   353  07DA  149D               	bsf	29,1	;volatile
   354                           
   355                           ;main.c: 83: while(GODONE==1&&i>0)
   356  07DB  2FE1               	goto	l1370
   357  07DC                     l1372:	
   358  07DC  0875               	movf	Read_ADC@i,w
   359  07DD  1903               	btfsc	3,2
   360  07DE  2FE5               	goto	l1374
   361                           
   362                           ;main.c: 84: {
   363                           ;main.c: 85: i--;
   364  07DF  03F5               	decf	Read_ADC@i,f
   365  07E0  0000               	nop	;# 
   366  07E1                     l1370:	
   367  07E1  1683               	bsf	3,5	;RP0=1, select bank1
   368  07E2  1303               	bcf	3,6	;RP1=0, select bank1
   369  07E3  189D               	btfsc	29,1	;volatile
   370  07E4  2FDC               	goto	l1372
   371  07E5                     l1374:	
   372                           
   373                           ;main.c: 87: }
   374                           ;main.c: 88: Adc_Result = ADRESH<<4;
   375  07E5  081E               	movf	30,w	;volatile
   376  07E6  00F3               	movwf	Read_ADC@Adc_Result
   377  07E7  30F0               	movlw	240
   378  07E8  01F4               	clrf	Read_ADC@Adc_Result+1
   379  07E9  0EF3               	swapf	Read_ADC@Adc_Result,f
   380  07EA  0EF4               	swapf	Read_ADC@Adc_Result+1,f
   381  07EB  05F4               	andwf	Read_ADC@Adc_Result+1,f
   382  07EC  0873               	movf	Read_ADC@Adc_Result,w
   383  07ED  390F               	andlw	15
   384  07EE  04F4               	iorwf	Read_ADC@Adc_Result+1,f
   385  07EF  30F0               	movlw	240
   386  07F0  05F3               	andwf	Read_ADC@Adc_Result,f
   387                           
   388                           ;main.c: 89: Adc_Result += ADRESL>>4;
   389  07F1  0E1F               	swapf	31,w	;volatile
   390  07F2  390F               	andlw	15
   391  07F3  07F3               	addwf	Read_ADC@Adc_Result,f
   392  07F4  1803               	skipnc
   393  07F5  0AF4               	incf	Read_ADC@Adc_Result+1,f
   394                           
   395                           ;main.c: 91: return Adc_Result;
   396  07F6  0874               	movf	Read_ADC@Adc_Result+1,w
   397  07F7  00F1               	movwf	?_Read_ADC+1
   398  07F8  0873               	movf	Read_ADC@Adc_Result,w
   399  07F9  00F0               	movwf	?_Read_ADC
   400  07FA  0008               	return
   401  07FB                     __end_of_Read_ADC:	
   402                           
   403                           	psect	text2
   404  0773                     __ptext2:	
   405 ;; *************** function _Init_System *****************
   406 ;; Defined at:
   407 ;;		line 103 in file "H:\MyDownloads\说明书&测试报告\开发包\SC8F577X开发包\SC8F577X_DEMO\SC8F577X_PGA+恒流源_Demo\main.c
      +"
   408 ;; Parameters:    Size  Location     Type
   409 ;;		None
   410 ;; Auto vars:     Size  Location     Type
   411 ;;		None
   412 ;; Return value:  Size  Location     Type
   413 ;;                  1    wreg      void 
   414 ;; Registers used:
   415 ;;		wreg, status,2
   416 ;; Tracked objects:
   417 ;;		On entry : B00/0
   418 ;;		On exit  : 300/100
   419 ;;		Unchanged: 0/0
   420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   421 ;;      Params:         0       0       0       0
   422 ;;      Locals:         0       0       0       0
   423 ;;      Temps:          0       0       0       0
   424 ;;      Totals:         0       0       0       0
   425 ;;Total ram usage:        0 bytes
   426 ;; Hardware stack levels used:    1
   427 ;; This function calls:
   428 ;;		Nothing
   429 ;; This function is called by:
   430 ;;		_main
   431 ;; This function uses a non-reentrant model
   432 ;;
   433                           
   434                           
   435                           ;psect for function _Init_System
   436  0773                     _Init_System:	
   437                           
   438                           ;incstack = 0
   439                           ; Regs used in _Init_System: [wreg+status,2]
   440  0773  0000               	nop	;# 
   441  0774  0064               	clrwdt	;# 
   442                           
   443                           ;main.c: 107: INTCON = 0;
   444  0775  018B               	clrf	11	;volatile
   445                           
   446                           ;main.c: 108: OSCCON = 0X70;
   447  0776  3070               	movlw	112
   448  0777  1683               	bsf	3,5	;RP0=1, select bank1
   449  0778  1303               	bcf	3,6	;RP1=0, select bank1
   450  0779  0088               	movwf	8	;volatile
   451                           
   452                           ;main.c: 109: OPTION_REG = 0;
   453  077A  0181               	clrf	1	;volatile
   454                           
   455                           ;main.c: 111: WPUA = 0B00000000;
   456  077B  1283               	bcf	3,5	;RP0=0, select bank0
   457  077C  0187               	clrf	7	;volatile
   458                           
   459                           ;main.c: 112: WPUB = 0B00001000;
   460  077D  3008               	movlw	8
   461  077E  0088               	movwf	8	;volatile
   462                           
   463                           ;main.c: 115: TRISA = 0B00000001;
   464  077F  3001               	movlw	1
   465  0780  1683               	bsf	3,5	;RP0=1, select bank1
   466  0781  0085               	movwf	5	;volatile
   467                           
   468                           ;main.c: 116: TRISB = 0B00001000;
   469  0782  3008               	movlw	8
   470  0783  0086               	movwf	6	;volatile
   471                           
   472                           ;main.c: 118: PORTA = 0B00000000;
   473  0784  1283               	bcf	3,5	;RP0=0, select bank0
   474  0785  0185               	clrf	5	;volatile
   475                           
   476                           ;main.c: 119: PORTB = 0B00000000;
   477  0786  0186               	clrf	6	;volatile
   478                           
   479                           ;main.c: 121: ADCON0 = 0B10000001;
   480  0787  3081               	movlw	129
   481  0788  1683               	bsf	3,5	;RP0=1, select bank1
   482  0789  009D               	movwf	29	;volatile
   483                           
   484                           ;main.c: 122: ADCON1 = 0B00000011;
   485  078A  3003               	movlw	3
   486  078B  009C               	movwf	28	;volatile
   487  078C  0008               	return
   488  078D                     __end_of_Init_System:	
   489  007E                     btemp	set	126	;btemp
   490  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Read_ADC

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     224
                        _Init_System
                           _Read_ADC
 ---------------------------------------------------------------------------------
 (1) _Read_ADC                                             7     5      2     224
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_System
   _Read_ADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0       D       8        0.0%
DATA                 0      0       D       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb 22 17:07:33 2021

                    l889 07CA                     l1360 07C2                     l1370 07E1  
                   l1354 07BC                     l1372 07DC                     l1374 07E5  
                   l1358 07C0                     l1390 0794                     _CHS4 04E6  
                   _WPUA 0007                     _WPUB 0008                     _main 078D  
                   btemp 007E                     start 0000            ??_Init_System 0070  
                  ?_main 0070                    _PGACH 04D6                    _PORTA 0005  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  status 0003       Read_ADC@ADCchannel 0076                    wtemp0 007E  
        __initialization 07FB             __end_of_main 07B4         __end_of_Read_ADC 07FB  
                 ??_main 0077      __end_of_Init_System 078D                   _ADCON0 009D  
                 _ADCON1 009C                   _ADRESH 009E                   _ADRESL 009F  
                 _ECIGEN 04DF                   _GODONE 04E9                   _PGACON 009A  
                 _INTCON 000B                   _OSCCON 0088  __end_of__initialization 07FD  
         __pcstackCOMMON 0070              _Init_System 0773       Read_ADC@Adc_Result 0073  
              ?_Read_ADC 0070               __pnvCOMMON 0077               __pmaintext 078D  
             ??_Read_ADC 0072                  __ptext1 07B4                  __ptext2 0773  
   end_of_initialization 07FD                Read_ADC@i 0075        Read_ADC@ADCLDORef 0070  
           ?_Init_System 0070      start_initialization 07FB        __size_of_Read_ADC 0047  
            __pbssCOMMON 007B                ___latbits 0001     __size_of_Init_System 001A  
               _Read_ADC 07B4            __size_of_main 0027               _OPTION_REG 0081  
            _Adc_Result0 007B              _Adc_Result1 0079              _Adc_Result2 0077  
