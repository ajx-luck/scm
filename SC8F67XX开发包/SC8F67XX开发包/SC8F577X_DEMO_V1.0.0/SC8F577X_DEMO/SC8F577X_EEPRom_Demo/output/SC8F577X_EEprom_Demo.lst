

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb 22 14:20:21 2021

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F5773
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	pa_nodes0,global,class=CODE,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 1.45
    15                           ; Generated 16/11/2017 GMT
    16                           ; 
    17                           ; Copyright 漏 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F887 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     
    49                           	psect	text0
    50  0000                     __ptext0:	
    51  005F                     _GIE	set	95
    52  0028                     _RA0	set	40
    53  0090                     _EEADR	set	144
    54  008E                     _EEDAT	set	142
    55  008D                     _EECON2	set	141
    56  0085                     _TRISA	set	133
    57  0460                     _RD	set	1120
    58  0461                     _WR	set	1121
    59  0462                     _WREN	set	1122
    60  0467                     _EEPGD	set	1127
    61                           
    62                           	psect	cinit
    63  07FB                     start_initialization:	
    64                           ; #config settings
    65                           
    66  07FB                     __initialization:	
    67                           
    68                           ; Clear objects allocated to COMMON
    69  07FB  01F4               	clrf	__pbssCOMMON& (0+127)
    70  07FC  01F5               	clrf	(__pbssCOMMON+1)& (0+127)
    71  07FD                     end_of_initialization:	
    72                           ;End of C runtime variable initialization code
    73                           
    74  07FD                     __end_of__initialization:	
    75  07FD  0183               	clrf	3
    76  07FE  118A  2FDC         	ljmp	_main	;jump to C main() function
    77                           
    78                           	psect	bssCOMMON
    79  0074                     __pbssCOMMON:	
    80  0074                     _t:	
    81  0074                     	ds	2
    82                           
    83                           	psect	cstackCOMMON
    84  0070                     __pcstackCOMMON:	
    85  0070                     ?_Memory_Write:	
    86  0070                     ?_main:	
    87                           ; 1 bytes @ 0x0
    88                           
    89  0070                     ?_Memory_Read:	
    90                           ; 1 bytes @ 0x0
    91                           
    92  0070                     Memory_Write@Value:	
    93                           ; 2 bytes @ 0x0
    94                           
    95                           
    96                           ; 1 bytes @ 0x0
    97  0070                     	ds	1
    98  0071                     ??_Memory_Write:	
    99  0071                     Memory_Write@Addr:	
   100                           ; 1 bytes @ 0x1
   101                           
   102                           
   103                           ; 1 bytes @ 0x1
   104  0071                     	ds	2
   105  0073                     ??_Memory_Read:	
   106  0073                     Memory_Read@Addr:	
   107                           ; 1 bytes @ 0x3
   108                           
   109                           
   110                           ; 1 bytes @ 0x3
   111  0073                     	ds	1
   112  0074                     ??_main:	
   113                           
   114                           	psect	maintext
   115  07DC                     __pmaintext:	
   116                           ; 1 bytes @ 0x4
   117 ;;
   118 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   119 ;;
   120 ;; *************** function _main *****************
   121 ;; Defined at:
   122 ;;		line 15 in file "H:\MyDownloads\说明书&测试报告\开发包\SC8F577X开发包\SC8F577X_DEMO\SC8F577X_EEPRom_Demo\main.c"
   123 ;; Parameters:    Size  Location     Type
   124 ;;		None
   125 ;; Auto vars:     Size  Location     Type
   126 ;;		None
   127 ;; Return value:  Size  Location     Type
   128 ;;                  1    wreg      void 
   129 ;; Registers used:
   130 ;;		wreg, status,2, status,0, pclath, cstack
   131 ;; Tracked objects:
   132 ;;		On entry : B00/0
   133 ;;		On exit  : 0/0
   134 ;;		Unchanged: 0/0
   135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   136 ;;      Params:         0       0       0       0
   137 ;;      Locals:         0       0       0       0
   138 ;;      Temps:          0       0       0       0
   139 ;;      Totals:         0       0       0       0
   140 ;;Total ram usage:        0 bytes
   141 ;; Hardware stack levels required when called:    1
   142 ;; This function calls:
   143 ;;		_Memory_Read
   144 ;;		_Memory_Write
   145 ;; This function is called by:
   146 ;;		Startup code after reset
   147 ;; This function uses a non-reentrant model
   148 ;;
   149                           
   150                           
   151                           ;psect for function _main
   152  07DC                     _main:	
   153                           
   154                           ;incstack = 0
   155                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   156  07DC  0000               	nop	;# 
   157  07DD  0064               	clrwdt	;# 
   158                           
   159                           ;main.c: 19: TRISA = 0;
   160  07DE  1683               	bsf	3,5	;RP0=1, select bank1
   161  07DF  1303               	bcf	3,6	;RP1=0, select bank1
   162  07E0  0185               	clrf	5	;volatile
   163                           
   164                           ;main.c: 21: Memory_Write(0x08,120);
   165  07E1  3078               	movlw	120
   166  07E2  00F0               	movwf	Memory_Write@Value
   167  07E3  3008               	movlw	8
   168  07E4  118A  27C4  118A   	fcall	_Memory_Write
   169                           
   170                           ;main.c: 22: t = Memory_Read(0x08);
   171  07E7  3008               	movlw	8
   172  07E8  118A  27B8  118A   	fcall	_Memory_Read
   173  07EB  0871               	movf	?_Memory_Read+1,w
   174  07EC  00F5               	movwf	_t+1	;volatile
   175  07ED  0870               	movf	?_Memory_Read,w
   176  07EE  00F4               	movwf	_t	;volatile
   177                           
   178                           ;main.c: 23: if ( t!= 0x96 ) RA0 = 1;
   179  07EF  3096               	movlw	150
   180  07F0  0674               	xorwf	_t,w	;volatile
   181  07F1  0475               	iorwf	_t+1,w	;volatile
   182  07F2  1903               	btfsc	3,2
   183  07F3  2FF7               	goto	l875
   184  07F4  1283               	bcf	3,5	;RP0=0, select bank0
   185  07F5  1405               	bsf	5,0	;volatile
   186  07F6  2FF9               	goto	l877
   187  07F7                     l875:	
   188                           
   189                           ;main.c: 24: else RA0 = 0 ;
   190  07F7  1283               	bcf	3,5	;RP0=0, select bank0
   191  07F8  1005               	bcf	5,0	;volatile
   192  07F9                     l877:	
   193                           ;main.c: 25: while(1)
   194                           
   195  07F9  0064               	clrwdt	;# 
   196  07FA  2FF9               	goto	l877
   197  07FB                     __end_of_main:	
   198                           
   199                           	psect	text1
   200  07C4                     __ptext1:	
   201 ;; *************** function _Memory_Write *****************
   202 ;; Defined at:
   203 ;;		line 40 in file "H:\MyDownloads\说明书&测试报告\开发包\SC8F577X开发包\SC8F577X_DEMO\SC8F577X_EEPRom_Demo\main.c"
   204 ;; Parameters:    Size  Location     Type
   205 ;;  Addr            1    wreg     unsigned char 
   206 ;;  Value           1    0[COMMON] unsigned char 
   207 ;; Auto vars:     Size  Location     Type
   208 ;;  Addr            1    1[COMMON] unsigned char 
   209 ;; Return value:  Size  Location     Type
   210 ;;                  1    wreg      void 
   211 ;; Registers used:
   212 ;;		wreg
   213 ;; Tracked objects:
   214 ;;		On entry : 300/100
   215 ;;		On exit  : 300/100
   216 ;;		Unchanged: 0/0
   217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   218 ;;      Params:         1       0       0       0
   219 ;;      Locals:         1       0       0       0
   220 ;;      Temps:          0       0       0       0
   221 ;;      Totals:         2       0       0       0
   222 ;;Total ram usage:        2 bytes
   223 ;; Hardware stack levels used:    1
   224 ;; This function calls:
   225 ;;		Nothing
   226 ;; This function is called by:
   227 ;;		_main
   228 ;; This function uses a non-reentrant model
   229 ;;
   230                           
   231                           
   232                           ;psect for function _Memory_Write
   233  07C4                     _Memory_Write:	
   234                           
   235                           ;incstack = 0
   236                           ; Regs used in _Memory_Write: [wreg]
   237                           ;Memory_Write@Addr stored from wreg
   238  07C4  00F1               	movwf	Memory_Write@Addr
   239                           
   240                           ;main.c: 43: EEADR = Addr;
   241  07C5  0090               	movwf	16	;volatile
   242                           
   243                           ;main.c: 44: EEPGD = 0;
   244  07C6  138C               	bcf	12,7	;volatile
   245                           
   246                           ;main.c: 47: EEDAT = Value;
   247  07C7  0870               	movf	Memory_Write@Value,w
   248  07C8  008E               	movwf	14	;volatile
   249                           
   250                           ;main.c: 49: WREN = 1;
   251  07C9  150C               	bsf	12,2	;volatile
   252  07CA                     l1307:	
   253                           
   254                           ;main.c: 52: while(GIE) GIE = 0;
   255                           
   256                           ;main.c: 50: GIE = 0;
   257  07CA  138B               	bcf	11,7	;volatile
   258  07CB  1B8B               	btfsc	11,7	;volatile
   259  07CC  2FCA               	goto	l1307
   260  07CD  0064               	clrwdt	;# 
   261                           
   262                           ;main.c: 56: EECON2 = 0x55;
   263  07CE  3055               	movlw	85
   264  07CF  1683               	bsf	3,5	;RP0=1, select bank1
   265  07D0  1303               	bcf	3,6	;RP1=0, select bank1
   266  07D1  008D               	movwf	13	;volatile
   267                           
   268                           ;main.c: 57: EECON2 = 0xaa;
   269  07D2  30AA               	movlw	170
   270  07D3  008D               	movwf	13	;volatile
   271                           
   272                           ;main.c: 58: WR = 1;
   273  07D4  148C               	bsf	12,1	;volatile
   274  07D5  0000               	nop	;# 
   275  07D6  0000               	nop	;# 
   276                           
   277                           ;main.c: 61: WREN = 0;
   278  07D7  1683               	bsf	3,5	;RP0=1, select bank1
   279  07D8  1303               	bcf	3,6	;RP1=0, select bank1
   280  07D9  110C               	bcf	12,2	;volatile
   281                           
   282                           ;main.c: 62: GIE = 1;
   283  07DA  178B               	bsf	11,7	;volatile
   284  07DB  0008               	return
   285  07DC                     __end_of_Memory_Write:	
   286                           
   287                           	psect	text2
   288  07B8                     __ptext2:	
   289 ;; *************** function _Memory_Read *****************
   290 ;; Defined at:
   291 ;;		line 74 in file "H:\MyDownloads\说明书&测试报告\开发包\SC8F577X开发包\SC8F577X_DEMO\SC8F577X_EEPRom_Demo\main.c"
   292 ;; Parameters:    Size  Location     Type
   293 ;;  Addr            1    wreg     unsigned char 
   294 ;; Auto vars:     Size  Location     Type
   295 ;;  Addr            1    3[COMMON] unsigned char 
   296 ;; Return value:  Size  Location     Type
   297 ;;                  2    0[COMMON] unsigned int 
   298 ;; Registers used:
   299 ;;		wreg
   300 ;; Tracked objects:
   301 ;;		On entry : 300/100
   302 ;;		On exit  : 300/100
   303 ;;		Unchanged: 0/0
   304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   305 ;;      Params:         3       0       0       0
   306 ;;      Locals:         1       0       0       0
   307 ;;      Temps:          0       0       0       0
   308 ;;      Totals:         4       0       0       0
   309 ;;Total ram usage:        4 bytes
   310 ;; Hardware stack levels used:    1
   311 ;; This function calls:
   312 ;;		Nothing
   313 ;; This function is called by:
   314 ;;		_main
   315 ;; This function uses a non-reentrant model
   316 ;;
   317                           
   318                           
   319                           ;psect for function _Memory_Read
   320  07B8                     _Memory_Read:	
   321                           
   322                           ;incstack = 0
   323                           ; Regs used in _Memory_Read: [wreg]
   324                           ;Memory_Read@Addr stored from wreg
   325  07B8  00F3               	movwf	Memory_Read@Addr
   326                           
   327                           ;main.c: 77: EEADR = Addr;
   328  07B9  0090               	movwf	16	;volatile
   329                           
   330                           ;main.c: 78: EEPGD = 0;
   331  07BA  138C               	bcf	12,7	;volatile
   332                           
   333                           ;main.c: 80: RD=1;
   334  07BB  140C               	bsf	12,0	;volatile
   335  07BC  0000               	nop	;# 
   336  07BD  0000               	nop	;# 
   337                           
   338                           ;main.c: 84: return EEDAT;
   339  07BE  1683               	bsf	3,5	;RP0=1, select bank1
   340  07BF  1303               	bcf	3,6	;RP1=0, select bank1
   341  07C0  080E               	movf	14,w	;volatile
   342  07C1  00F0               	movwf	?_Memory_Read
   343  07C2  01F1               	clrf	?_Memory_Read+1
   344  07C3  0008               	return
   345  07C4                     __end_of_Memory_Read:	
   346  007E                     btemp	set	126	;btemp
   347  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       6
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Memory_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     109
                        _Memory_Read
                       _Memory_Write
 ---------------------------------------------------------------------------------
 (1) _Memory_Write                                         2     1      1      87
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _Memory_Read                                          4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Memory_Read
   _Memory_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      4       6       1       42.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0       6       8        0.0%
DATA                 0      0       6       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb 22 14:20:21 2021

                      _t 0074                       _RD 0460                       _WR 0461  
                    l875 07F7                      l877 07F9                      _GIE 005F  
                    _RA0 0028                     l1307 07CA                     _WREN 0462  
                   _main 07DC                     btemp 007E                     start 0000  
                  ?_main 0070                    _EEADR 0090                    _EEDAT 008E  
                  _EEPGD 0467                    _TRISA 0085            ??_Memory_Read 0073  
                  status 0003                    wtemp0 007E          __initialization 07FB  
           __end_of_main 07FB            ?_Memory_Write 0070                   ??_main 0074  
                 _EECON2 008D      __end_of_Memory_Read 07C4           ??_Memory_Write 0071  
__end_of__initialization 07FD           __pcstackCOMMON 0070              _Memory_Read 07B8  
             __pmaintext 07DC     __end_of_Memory_Write 07DC                  __ptext0 0000  
                __ptext1 07C4                  __ptext2 07B8     end_of_initialization 07FD  
      Memory_Write@Value 0070      start_initialization 07FB    __size_of_Memory_Write 0018  
           ?_Memory_Read 0070             _Memory_Write 07C4              __pbssCOMMON 0074  
              ___latbits 0001         Memory_Write@Addr 0071     __size_of_Memory_Read 000C  
        Memory_Read@Addr 0073            __size_of_main 001F  
