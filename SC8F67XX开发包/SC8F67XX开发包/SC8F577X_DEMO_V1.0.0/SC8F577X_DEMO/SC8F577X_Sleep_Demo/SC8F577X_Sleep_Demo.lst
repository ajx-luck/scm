---- C:\mcuproject\scm\SC8F67XX开发包\SC8F67XX开发包\SC8F577X_DEMO_V1.0.0\SC8F577X_DEMO\SC8F577X_Sleep_Demo\main.c ----------------------------------------------------------------------
1:                /**********************************************************
2:                
3:                **********************************************************/
4:                
5:                #include <sc.h>
6:                
7:                
8:                
9:                void DelayXms(unsigned char x);
10:               
11:               
12:               /***********************************************************
13:               函数名称：DelayXms
14:               函数功能：毫秒级非精准延时
15:               入口参数：x - 延时时间
16:               出口参数：
17:               备    注：
18:               ***********************************************************/
19:               void DelayXms(unsigned char x)
20:               {
21:               	unsigned char i,j;
22:               	for(i=x;i>0;i--)
  006A    00F3    LD	0x73,A
  006B    0873    LD	A,0x73
  006C    1903    SZB	0x3,2
  006D    0008    RET
23:               		for(j=153;j>0;j--);
  006E    3099    LDIA	0x99
  006F    00F4    LD	0x74,A
  0070    0BF4    SZDECR	0x74
  0071    2870    JP	0x70
  0072    03F3    DECR	0x73
  0073    286B    JP	0x6B
24:               }
25:               
26:               /***********************************************************
27:               main主函数
28:               ***********************************************************/
29:               
30:               void Init_System();
31:               void Sleep_Mode();
32:               
33:               void main()
34:               {
35:               	Init_System();
  0044    118A    CLRB	0xA,3
  0045    2031    CALL	0x31
  0046    118A    CLRB	0xA,3
36:               	while(1)
37:               	{
38:               		RB6=1;
  0047    1706    SETB	0x6,6
39:               		DelayXms(100);
  0048    3064    LDIA	0x64
  0049    118A    CLRB	0xA,3
  004A    2069    CALL	0x69
  004B    118A    CLRB	0xA,3
40:               		RB6 = 0;
  004C    1306    CLRB	0x6,6
41:               		DelayXms(100);
  004D    3064    LDIA	0x64
  004E    118A    CLRB	0xA,3
  004F    2069    CALL	0x69
  0050    118A    CLRB	0xA,3
42:               		RB6=1;
  0051    1706    SETB	0x6,6
43:               		DelayXms(100);
  0052    3064    LDIA	0x64
  0053    118A    CLRB	0xA,3
  0054    2069    CALL	0x69
  0055    118A    CLRB	0xA,3
44:               		
45:               		Sleep_Mode();
  0056    118A    CLRB	0xA,3
  0057    2010    CALL	0x10
  0058    118A    CLRB	0xA,3
  0059    2847    JP	0x47
46:               	}
47:               }
48:               
49:               
50:               /***********************************************
51:               函数名称：Sleep_Mode
52:               函数功能：进入休眠模式
53:               入口参数：无
54:               出口参数：无
55:               备注：
56:               ************************************************/
57:               void Sleep_Mode()
58:               {
59:               	INTCON = 0;		
  0010    018B    CLR	0xB
60:               	
61:               	OPTION_REG = 0;
  0011    1683    SETB	0x3,5
  0012    0181    CLR	0x1
62:               
63:               	TRISA = 0B00000000; 		//关闭所有输出
  0013    0185    CLR	0x5
64:               	PORTA = 0B00000000;
  0014    1283    CLRB	0x3,5
  0015    0185    CLR	0x5
65:               	WPUA  = 0B00000000;
  0016    0187    CLR	0x7
66:               	
67:               	TRISB = 0B00001000;	
  0017    3008    LDIA	0x8
  0018    1683    SETB	0x3,5
  0019    0086    LD	0x6,A
68:               	PORTB = 0B00000000;
  001A    1283    CLRB	0x3,5
  001B    0186    CLR	0x6
69:               	
70:               	PORTB = 0;
  001C    0186    CLR	0x6
71:               	WPUB  = 0B00001000;		 //RB3 上拉
  001D    0088    LD	0x8,A
72:               	
73:               	ADCON0 = 0;					//关闭所有模块
  001E    1683    SETB	0x3,5
  001F    019D    CLR	0x1D
74:               	PWMCON0 = 0;
  0020    1283    CLRB	0x3,5
  0021    0193    CLR	0x13
75:               	
76:               	EECON1 = 0;					//清此寄存器,有好处
  0022    1683    SETB	0x3,5
  0023    018C    CLR	0xC
77:               
78:                  			
79:                  	IOCB = 0B00001000;			//允许RB3的IO口电平变化中断
  0024    1283    CLRB	0x3,5
  0025    0089    LD	0x9,A
80:               	RBIE = 1;					//允许PORTB电平变化中断
  0026    158B    SETB	0xB,3
81:               	GIE = 1;					//GIE = 0时，唤醒后执行SLEEP后程序;GIE = 1时，唤醒后跳至中断服务
  0027    178B    SETB	0xB,7
82:               	
83:               	
84:               	OSCCON = 0X70;				//配置振荡为16M,关闭WDT
  0028    3070    LDIA	0x70
  0029    1683    SETB	0x3,5
  002A    0088    LD	0x8,A
85:               	
86:               	PORTB;						//读PORTB值并锁存			
  002B    1283    CLRB	0x3,5
  002C    0806    LD	A,0x6
  002D    0064    CLRWDT
  002E    0063    STOP
  002F    0000    NOP
87:               	asm("clrwdt");
88:               
89:               	asm("sleep");				//进入休眠模式
90:               	
91:               	asm("nop");
92:               	Init_System();
  0030    2831    JP	0x31
93:               	
94:               }
95:               
96:               /***********************************************
97:               函数名称：Init_System
98:               函数功能：系统初始化
99:               入口参数：无
100:              出口参数：无
101:              备注：
102:              ************************************************/
103:              void Init_System()
104:              {
105:              	asm("nop");
106:              	asm("clrwdt");
107:              	INTCON = 0;					//系统初始化
  0033    018B    CLR	0xB
108:              	OSCCON = 0X70;				//配置振荡为8M,关WDT
  0034    3070    LDIA	0x70
  0035    1683    SETB	0x3,5
  0036    1303    CLRB	0x3,6
  0037    0088    LD	0x8,A
109:              	OPTION_REG = 0;
  0038    0181    CLR	0x1
110:              	
111:                  WPUA  = 0B00000000;			//初始化上拉
  0039    1283    CLRB	0x3,5
  003A    0187    CLR	0x7
112:                  WPUB  = 0B00001000;			
  003B    3008    LDIA	0x8
  003C    0088    LD	0x8,A
113:                
114:               
115:              	TRISA = 0B00000000;			//初始化IO状态
  003D    1683    SETB	0x3,5
  003E    0185    CLR	0x5
116:              	TRISB = 0B00001000;
  003F    0086    LD	0x6,A
117:              
118:              	PORTA = 0B00000000;
  0040    1283    CLRB	0x3,5
  0041    0185    CLR	0x5
119:              	PORTB = 0B00000000;			//初始化输出
  0042    0186    CLR	0x6
  0043    0008    RET
120:              
121:              }
122:              
123:              /***********************************************
124:              函数名称：PB_Isr
125:              函数功能：PB电平变化中断服务
126:              入口参数：无
127:              出口参数：无
128:              备注：
129:              ************************************************/
130:              void interrupt PB_Isr()
131:              {
132:              	if(RBIF)
  005A    1C0B    SNZB	0xB,0
  005B    2862    JP	0x62
133:              	{
134:              		RBIF = 0;			//清中断标志
  005C    100B    CLRB	0xB,0
135:              		RB6 = ~RB6;
  005D    3040    LDIA	0x40
  005E    1283    CLRB	0x3,5
  005F    1303    CLRB	0x3,6
  0060    0686    XORR	0x6
136:              		PORTB;				//如不关闭PB中断，则需再读取一遍PB，否则会频繁进入中断
  0061    0806    LD	A,0x6
  0062    0871    LD	A,0x71
  0063    008A    LD	0xA,A
  0064    0E70    SWAPA	0x70
  0065    0083    LD	0x3,A
  0066    0EFE    SWAPR	0x7E
  0067    0E7E    SWAPA	0x7E
  0068    0009    RETI
137:              		//Init_System();
138:              	}
139:              }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280B    JP	0xB
  000B    118A    CLRB	0xA,3
  000C    280D    JP	0xD
---- start_initialization ------------------------------------------------------------------
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F0    LD	0x70,A
  0007    080A    LD	A,0xA
  0008    00F1    LD	0x71,A
  0009    118A    CLRB	0xA,3
  000A    285A    JP	0x5A
---- common_function ------------------------------------------------------------------
  000D    0183    CLR	0x3
  000E    118A    CLRB	0xA,3
  000F    2844    JP	0x44
  0031    0000    NOP
  0032    0064    CLRWDT
  0069    00F2    LD	0x72,A
