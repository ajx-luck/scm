---- H:\MyDownloads\说明书&测试报告\开发包\SC8F577X开发包\SC8F577X_DEMO\SC8F577X_Uart_Demo\main.c ----------------------------------------------------------------------
1:                /**********************************************************
2:                   波特率9600
3:                   8位数据格式，无校验
4:                   接收10个字节数字，然后发送出来
5:                **********************************************************/
6:                
7:                #include <sc.h>
8:                
9:                
10:               
11:               volatile unsigned int   result,result1,result2;
12:               
13:               
14:               unsigned int  Read_ADC(unsigned char  ADCchannel,unsigned char  ADCLDORef);
15:               void DelayXms(unsigned char x);
16:               
17:               
18:               /***********************************************************
19:               函数名称：DelayXms
20:               函数功能：毫秒级非精准延时
21:               入口参数：x - 延时时间
22:               出口参数：
23:               备    注：
24:               ***********************************************************/
25:               void DelayXms(unsigned char x)
26:               {
27:               	unsigned char i,j;
28:               	for(i=x;i>0;i--)
29:               		for(j=153;j>0;j--);
30:               }
31:               
32:               /***********************************************************
33:               main主函数
34:               ***********************************************************/
35:               
36:               #include <sc.h>
37:               
38:               
39:               void Init_System();
40:               
41:               unsigned char RxTable[10],rxDADA;
42:               bit RXOK_f;
43:               
44:               void main()
45:               {
46:               	unsigned char i =0 ;
47:               	Init_System();
  004E    118A    CLRB	0xA,3
  004F    206F    CALL	0x6F
  0050    118A    CLRB	0xA,3
48:               	
49:               	TXREG =0x55;
  0051    3055    LDIA	0x55
  0052    1703    SETB	0x3,6
  0053    009A    LD	0x1A,A
50:               
51:               	while(TRMT==0);
  0054    1C97    SNZB	0x17,1
  0055    2854    JP	0x54
52:               	TXREG =0xaa;
  0056    30AA    LDIA	0xAA
  0057    009A    LD	0x1A,A
53:               
54:               	while(TRMT==0);
  0058    1C97    SNZB	0x17,1
  0059    2858    JP	0x58
55:               	
56:               	while(1)
57:               	{
58:                
59:               		
60:               		if(RXOK_f==1)
  005A    1C7A    SNZB	0x7A,0
  005B    285A    JP	0x5A
61:               		{
62:               			for(i=0;i<10;i++)
  005C    1303    CLRB	0x3,6
  005D    01AA    CLR	0x2A
63:               			{
64:               					
65:               				TXREG =RxTable[i];
  005E    082A    LD	A,0x2A
  005F    3E20    ADDIA	0x20
  0060    0084    LD	0x4,A
  0061    1383    CLRB	0x3,7
  0062    0800    LD	A,0x0
  0063    1703    SETB	0x3,6
  0064    009A    LD	0x1A,A
66:               
67:               				while(TRMT==0);
  0065    1C97    SNZB	0x17,1
  0066    2865    JP	0x65
  0067    300A    LDIA	0xA
  0068    1303    CLRB	0x3,6
  0069    0AAA    INCR	0x2A
  006A    022A    SUBA	0x2A
  006B    1C03    SNZB	0x3,0
  006C    285E    JP	0x5E
68:               			}
69:               
70:               			RXOK_f = 0;
  006D    107A    CLRB	0x7A,0
  006E    285A    JP	0x5A
71:               		}
72:               
73:               	}
74:               }
75:               
76:               
77:               /***********************************************
78:               函数名称：Init_System
79:               函数功能：系统初始化
80:               入口参数：无
81:               出口参数：无
82:               备注：
83:               ************************************************/
84:               void Init_System()
  006F    0000    NOP
  0070    0064    CLRWDT
85:               {
86:               	asm("nop");
87:               	asm("clrwdt");
88:               	INTCON = 0;					//系统初始化
  0071    018B    CLR	0xB
89:               	OSCCON = 0X70;				//配置振荡为8M,关WDT
  0072    3070    LDIA	0x70
  0073    1683    SETB	0x3,5
  0074    1303    CLRB	0x3,6
  0075    0088    LD	0x8,A
90:               	OPTION_REG = 0;
  0076    0181    CLR	0x1
91:               	
92:                   WPUA  = 0B00000000;			//初始化上拉
  0077    1283    CLRB	0x3,5
  0078    0187    CLR	0x7
93:                   WPUB  = 0B00001000;			
  0079    3008    LDIA	0x8
  007A    0088    LD	0x8,A
94:                 
95:                
96:               	TRISA = 0B00000000;			//初始化IO状态
  007B    1683    SETB	0x3,5
  007C    0185    CLR	0x5
97:               	TRISB = 0B00011000;
  007D    3018    LDIA	0x18
  007E    0086    LD	0x6,A
98:               
99:               	PORTA = 0B00000000;
  007F    1283    CLRB	0x3,5
  0080    0185    CLR	0x5
100:              	PORTB = 0B00000000;			//初始化输出
  0081    0186    CLR	0x6
101:              	
102:              	TXSTA =   0b10100000;
  0082    30A0    LDIA	0xA0
  0083    1703    SETB	0x3,6
  0084    0097    LD	0x17,A
103:              	RCSTA =   0b10010000;
  0085    3090    LDIA	0x90
  0086    0098    LD	0x18,A
104:              	SPBRG =   103;         //波特率9600
  0087    3067    LDIA	0x67
  0088    0099    LD	0x19,A
105:              	
106:              	PEIE =1;
  0089    170B    SETB	0xB,6
107:              	RCIE =1;
  008A    1303    CLRB	0x3,6
  008B    168D    SETB	0xD,5
108:              	GIE =1;
  008C    178B    SETB	0xB,7
  008D    0008    RET
109:              
110:              }
111:              
112:              /***********************************************
113:              函数名称：PB_Isr
114:              函数功能：PB电平变化中断服务
115:              入口参数：无
116:              出口参数：无
117:              备注：
118:              ************************************************/
119:              void interrupt PB_Isr()
120:              {
121:              	static unsigned char RxNum=0,TEMP;
122:              	if(RBIF)
  0026    1C0B    SNZB	0xB,0
  0027    282D    JP	0x2D
123:              	{
124:              		RBIF = 0;			//清中断标志
  0028    100B    CLRB	0xB,0
125:              		RB6 = ~RB6;
  0029    3040    LDIA	0x40
  002A    1283    CLRB	0x3,5
  002B    1303    CLRB	0x3,6
  002C    0686    XORR	0x6
126:              	
127:              	}
128:              	
129:              	if(RCIF==1)
  002D    1283    CLRB	0x3,5
  002E    1303    CLRB	0x3,6
  002F    1E8C    SNZB	0xC,5
  0030    2845    JP	0x45
130:              	{
131:              		RCIF = 0;
  0031    128C    CLRB	0xC,5
132:              	    
133:              		if(RXOK_f==0)	
  0032    187A    SZB	0x7A,0
  0033    2843    JP	0x43
134:              		{
135:              			RxTable[RxNum] = RCREG;
  0034    0876    LD	A,0x76
  0035    3E20    ADDIA	0x20
  0036    0084    LD	0x4,A
  0037    1703    SETB	0x3,6
  0038    081B    LD	A,0x1B
  0039    1383    CLRB	0x3,7
  003A    0080    LD	0x0,A
  003B    300A    LDIA	0xA
136:              			RxNum++;
  003C    0AF6    INCR	0x76
137:              			if(RxNum > 9)
  003D    0276    SUBA	0x76
  003E    1C03    SNZB	0x3,0
  003F    2845    JP	0x45
138:              			{
139:              				RxNum =0;
  0040    01F6    CLR	0x76
140:              				RXOK_f =1;
  0041    147A    SETB	0x7A,0
  0042    2845    JP	0x45
141:              			}
142:              		}
143:              		else
144:              		TEMP =  RCREG;
  0043    1703    SETB	0x3,6
  0044    081B    LD	A,0x1B
  0045    0879    LD	A,0x79
  0046    008A    LD	0xA,A
  0047    0878    LD	A,0x78
  0048    0084    LD	0x4,A
  0049    0E77    SWAPA	0x77
  004A    0083    LD	0x3,A
  004B    0EFE    SWAPR	0x7E
  004C    0E7E    SWAPA	0x7E
  004D    0009    RETI
145:              		
146:              	}
147:              }
---- stringtab ------------------------------------------------------------------
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280D    JP	0xD
  000D    118A    CLRB	0xA,3
  000E    280F    JP	0xF
---- start_initialization ------------------------------------------------------------------
  000F    01FA    CLR	0x7A
  0010    01F0    CLR	0x70
  0011    01F1    CLR	0x71
  0012    01F2    CLR	0x72
  0013    01F3    CLR	0x73
  0014    01F4    CLR	0x74
  0015    01F5    CLR	0x75
  0016    01F6    CLR	0x76
  0017    1283    CLRB	0x3,5
  0018    1303    CLRB	0x3,6
  0019    01A0    CLR	0x20
  001A    01A1    CLR	0x21
  001B    01A2    CLR	0x22
  001C    01A3    CLR	0x23
  001D    01A4    CLR	0x24
  001E    01A5    CLR	0x25
  001F    01A6    CLR	0x26
  0020    01A7    CLR	0x27
  0021    01A8    CLR	0x28
  0022    01A9    CLR	0x29
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F7    LD	0x77,A
  0007    0804    LD	A,0x4
  0008    00F8    LD	0x78,A
  0009    080A    LD	A,0xA
  000A    00F9    LD	0x79,A
  000B    118A    CLRB	0xA,3
  000C    2826    JP	0x26
---- common_function ------------------------------------------------------------------
  0023    0183    CLR	0x3
  0024    118A    CLRB	0xA,3
  0025    284E    JP	0x4E
