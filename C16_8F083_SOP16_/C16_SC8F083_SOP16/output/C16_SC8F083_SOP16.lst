

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Nov 14 14:42:17 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text16,local,class=CODE,merge=1,delta=2
    19                           	psect	text20,local,class=CODE,merge=1,delta=2
    20                           	psect	text21,local,class=CODE,merge=1,delta=2
    21                           	psect	text34,local,class=CODE,merge=1,delta=2
    22                           	psect	intentry,global,class=CODE,delta=2
    23                           	psect	pa_nodes0,global,class=CODE,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F887 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	strings
    62  0800                     __pstrings:	
    63  0800                     stringtab:	
    64  0800                     __stringtab:	
    65  0800                     stringcode:	
    66                           ;	String table - string pointers are 1 byte each
    67                           
    68  0800                     stringdir:	
    69  0800  3008               	movlw	high stringdir
    70  0801  008A               	movwf	10
    71  0802  0804               	movf	4,w
    72  0803  0A84               	incf	4,f
    73  0804  0782               	addwf	2,f
    74  0805                     __stringbase:	
    75  0805  3400               	retlw	0
    76  0806                     __end_of__stringtab:	
    77  0806                     _Table_KeyFalg:	
    78  0806  3401               	retlw	1
    79  0807  3402               	retlw	2
    80  0808  3404               	retlw	4
    81  0809  3408               	retlw	8
    82  080A  3410               	retlw	16
    83  080B  3420               	retlw	32
    84  080C  3440               	retlw	64
    85  080D  3480               	retlw	128
    86  080E                     __end_of_Table_KeyFalg:	
    87  080E                     _Table_KeyDown:	
    88  080E  340A               	retlw	10
    89  080F  340A               	retlw	10
    90  0810                     __end_of_Table_KeyDown:	
    91  0810                     _Table_KeyCap:	
    92  0810  3402               	retlw	2
    93  0811  3402               	retlw	2
    94  0812                     __end_of_Table_KeyCap:	
    95  0812                     _Table_KeyChannel:	
    96  0812  3442               	retlw	66
    97  0813  3443               	retlw	67
    98  0814                     __end_of_Table_KeyChannel:	
    99                           
   100                           	psect	nvBANK0
   101  006E                     __pnvBANK0:	
   102  006E                     _firstTime:	
   103  006E                     	ds	1
   104                           
   105                           	psect	nvBANK1
   106  00B6                     __pnvBANK1:	
   107  00B6                     _firstLock:	
   108  00B6                     	ds	1
   109  001E                     _PWMD01H	set	30
   110  001D                     _PWMCON2	set	29
   111  001A                     _PWMD1L	set	26
   112  0019                     _PWMD0L	set	25
   113  0018                     _PWMTH	set	24
   114  0017                     _PWMTL	set	23
   115  0016                     _PWMCON1	set	22
   116  0015                     _PWMCON0	set	21
   117  0014                     _OSCCON	set	20
   118  0013                     _T2CON	set	19
   119  0011                     _PR2	set	17
   120  000E                     _PIE1	set	14
   121  000D                     _PIR1	set	13
   122  000B                     _INTCON	set	11
   123  0008                     _WPUB	set	8
   124  0006                     _PORTB	set	6
   125  0005                     _TRISB	set	5
   126  0001                     _OPTION_REG	set	1
   127  0069                     _TMR2IF	set	105
   128  006B                     _RAIF	set	107
   129  0058                     _RBIF	set	88
   130  0059                     _INTF	set	89
   131  005B                     _RBIE	set	91
   132  0048                     _IOCB0	set	72
   133  0036                     _RB6	set	54
   134  0028                     _TRISB0	set	40
   135  002E                     _TRISB6	set	46
   136  0099                     _ADRESH	set	153
   137  0098                     _ADRESL	set	152
   138  0096                     _ADCON1	set	150
   139  0095                     _ADCON0	set	149
   140  0086                     _PORTA	set	134
   141  0085                     _TRISA	set	133
   142  0081                     _TMR0	set	129
   143  04B2                     _LDO_EN	set	1202
   144  04B6                     _CHS4	set	1206
   145  04A8                     _ADON	set	1192
   146  04A9                     _GODONE	set	1193
   147  0431                     _RA1	set	1073
   148  0117                     _KEYDATAH	set	279
   149  0116                     _KEYDATAL	set	278
   150  0113                     _KEYCON2	set	275
   151  0112                     _KEYCON1	set	274
   152  0111                     _KEYCON0	set	273
   153  0110                     _PIE2	set	272
   154  010F                     _PIR2	set	271
   155  0106                     _PORTC	set	262
   156  0105                     _TRISC	set	261
   157                           
   158                           	psect	cinit
   159  000D                     start_initialization:	
   160                           ; #config settings
   161                           
   162  000D                     __initialization:	
   163  000D  3020               	movlw	low __pbssBANK0
   164                           
   165                           ; Clear objects allocated to BITCOMMON
   166  000E  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   167                           
   168                           ; Clear objects allocated to COMMON
   169  000F  01F9               	clrf	__pbssCOMMON& (0+127)
   170  0010  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   171  0011  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   172                           
   173                           ; Clear objects allocated to BANK0
   174  0012  1383               	bcf	3,7	;select IRP bank0
   175  0013  0084               	movwf	4
   176  0014  304C               	movlw	low (__pbssBANK0+44)
   177  0015  158A  2759  118A   	fcall	clear_ram0
   178                           
   179                           ; Clear objects allocated to BANK1
   180  0018  30A0               	movlw	low __pbssBANK1
   181  0019  0084               	movwf	4
   182  001A  30B2               	movlw	low (__pbssBANK1+18)
   183  001B  158A  2759         	fcall	clear_ram0
   184  001D                     end_of_initialization:	
   185                           ;End of C runtime variable initialization code
   186                           
   187  001D                     __end_of__initialization:	
   188  001D  0183               	clrf	3
   189  001E  158A  2F7C         	ljmp	_main	;jump to C main() function
   190                           
   191                           	psect	bitbssCOMMON
   192  03C0                     __pbitbssCOMMON:	
   193  03C0                     _b_ksleep:	
   194  03C0                     	ds	1
   195  03C1                     _b_kerr:	
   196  03C1                     	ds	1
   197  03C2                     _b_kclr:	
   198  03C2                     	ds	1
   199  03C3                     _b_kover1:	
   200  03C3                     	ds	1
   201  03C4                     _b_kover:	
   202  03C4                     	ds	1
   203  03C5                     _B_OnOff:	
   204  03C5                     	ds	1
   205  03C6                     _B_MainLoop:	
   206  03C6                     	ds	1
   207                           
   208                           	psect	bssCOMMON
   209  0079                     __pbssCOMMON:	
   210  0079                     _KeyData:	
   211  0079                     	ds	2
   212  007B                     _workStep:	
   213  007B                     	ds	1
   214                           
   215                           	psect	bssBANK0
   216  0020                     __pbssBANK0:	
   217  0020                     _KeyOldValue2:	
   218  0020                     	ds	4
   219  0024                     _KeyOldValue1:	
   220  0024                     	ds	4
   221  0028                     _KeyResSum:	
   222  0028                     	ds	4
   223  002C                     _KeyOldData:	
   224  002C                     	ds	2
   225  002E                     _power_ad:	
   226  002E                     	ds	2
   227  0030                     _shanshuoTime2:	
   228  0030                     	ds	2
   229  0032                     _shanshuoTime:	
   230  0032                     	ds	2
   231  0034                     _KeyFlag:	
   232  0034                     	ds	2
   233  0036                     TurnKeyFlags@F84:	
   234  0036                     	ds	1
   235  0037                     TurnKeyFlags@F83:	
   236  0037                     	ds	1
   237  0038                     CheckKeyOldValue@F77:	
   238  0038                     	ds	1
   239  0039                     _KeyMaxSub:	
   240  0039                     	ds	1
   241  003A                     _KeyCounter:	
   242  003A                     	ds	1
   243  003B                     WorkSleep@time:	
   244  003B                     	ds	1
   245  003C                     KeyServer@KeyOldFlag:	
   246  003C                     	ds	1
   247  003D                     _test_adc:	
   248  003D                     	ds	1
   249  003E                     _lowFanTime:	
   250  003E                     	ds	1
   251  003F                     _lowBatTime:	
   252  003F                     	ds	1
   253  0040                     _lowBatLock:	
   254  0040                     	ds	1
   255  0041                     _chrgFullTime:	
   256  0041                     	ds	1
   257  0042                     _chrgFullFlag:	
   258  0042                     	ds	1
   259  0043                     _chrgFlag:	
   260  0043                     	ds	1
   261  0044                     _fanOverTime:	
   262  0044                     	ds	1
   263  0045                     _count10s:	
   264  0045                     	ds	1
   265  0046                     _fanDuty:	
   266  0046                     	ds	1
   267  0047                     _wuhuaFlag:	
   268  0047                     	ds	1
   269  0048                     _count1s:	
   270  0048                     	ds	1
   271  0049                     _MainTime:	
   272  0049                     	ds	1
   273  004A                     _adresult:	
   274  004A                     	ds	2
   275                           
   276                           	psect	bssBANK1
   277  00A0                     __pbssBANK1:	
   278  00A0                     _KeyReference:	
   279  00A0                     	ds	4
   280  00A4                     _KeyOldValue0:	
   281  00A4                     	ds	4
   282  00A8                     CheckValidTime@F87:	
   283  00A8                     	ds	2
   284  00AA                     _result:	
   285  00AA                     	ds	2
   286  00AC                     _wuhuaValue:	
   287  00AC                     	ds	2
   288  00AE                     _fanValue:	
   289  00AE                     	ds	2
   290  00B0                     _KeyUpShake:	
   291  00B0                     	ds	2
   292                           
   293                           	psect	clrtext
   294  0F59                     clear_ram0:	
   295                           ;	Called with FSR containing the base address, and
   296                           ;	W with the last address+1
   297                           
   298  0F59  0064               	clrwdt	;clear the watchdog before getting into this loop
   299  0F5A                     clrloop0:	
   300  0F5A  0180               	clrf	0	;clear RAM location pointed to by FSR
   301  0F5B  0A84               	incf	4,f	;increment pointer
   302  0F5C  0604               	xorwf	4,w	;XOR with final address
   303  0F5D  1903               	btfsc	3,2	;have we reached the end yet?
   304  0F5E  3400               	retlw	0	;all done for this memory range, return
   305  0F5F  0604               	xorwf	4,w	;XOR again to restore value
   306  0F60  2F5A               	goto	clrloop0	;do the next byte
   307                           
   308                           	psect	cstackBANK1
   309  00B2                     __pcstackBANK1:	
   310  00B2                     workCtr@power_temp:	
   311                           
   312                           ; 4 bytes @ 0x0
   313  00B2                     	ds	4
   314                           
   315                           	psect	cstackCOMMON
   316  0070                     __pcstackCOMMON:	
   317  0070                     ?_SystemEnterSleep:	
   318  0070                     ?_CheckTouchKey:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_Init_System:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?_Refurbish_Sfr:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_KeyServer:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?_Isr_Timer:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ??_Isr_Timer:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_WorkSleep:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_chrgCtr:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_keyLedCtr:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ?_pwmInit:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_pwmStop:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_fanInit:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_fanStop:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_fanCtr:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_wuhuaCtr:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_workCtr:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_main:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_KeyIsIn:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_KeyClearOne:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_KeyClearIn:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_KeyStopClear:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_ClearResSum:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_GetTouchKeyValue:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_CheckOnceResult:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_CheckKeyOldValue:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_TurnKeyFlags:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_CheckValidTime:	
   397                           ; 1 bytes @ 0x0
   398                           
   399                           
   400                           ; 1 bytes @ 0x0
   401  0070                     	ds	2
   402  0072                     ??_Init_System:	
   403  0072                     ??_Refurbish_Sfr:	
   404                           ; 1 bytes @ 0x2
   405                           
   406  0072                     ??_KeyServer:	
   407                           ; 1 bytes @ 0x2
   408                           
   409  0072                     ?_ADC_Sample:	
   410                           ; 1 bytes @ 0x2
   411                           
   412  0072                     ??_chrgCtr:	
   413                           ; 1 bytes @ 0x2
   414                           
   415  0072                     ??_pwmInit:	
   416                           ; 1 bytes @ 0x2
   417                           
   418  0072                     ??_pwmStop:	
   419                           ; 1 bytes @ 0x2
   420                           
   421  0072                     ??_fanInit:	
   422                           ; 1 bytes @ 0x2
   423                           
   424  0072                     ??_fanStop:	
   425                           ; 1 bytes @ 0x2
   426                           
   427  0072                     ??_KeyIsIn:	
   428                           ; 1 bytes @ 0x2
   429                           
   430  0072                     ??_KeyClearOne:	
   431                           ; 1 bytes @ 0x2
   432                           
   433  0072                     ??_ClearResSum:	
   434                           ; 1 bytes @ 0x2
   435                           
   436  0072                     ?_KeyHave:	
   437                           ; 1 bytes @ 0x2
   438                           
   439  0072                     ??_CheckValidTime:	
   440                           ; 1 bytes @ 0x2
   441                           
   442  0072                     ??___lmul:	
   443                           ; 1 bytes @ 0x2
   444                           
   445  0072                     ?___lwmod:	
   446                           ; 1 bytes @ 0x2
   447                           
   448  0072                     ?___ftpack:	
   449                           ; 2 bytes @ 0x2
   450                           
   451  0072                     ADC_Sample@adldo:	
   452                           ; 3 bytes @ 0x2
   453                           
   454  0072                     KeyIsIn@46:	
   455                           ; 1 bytes @ 0x2
   456                           
   457  0072                     KeyClearOne@49:	
   458                           ; 1 bytes @ 0x2
   459                           
   460  0072                     ClearResSum@56:	
   461                           ; 1 bytes @ 0x2
   462                           
   463  0072                     KeyHave@59:	
   464                           ; 1 bytes @ 0x2
   465                           
   466  0072                     ___lwmod@divisor:	
   467                           ; 2 bytes @ 0x2
   468                           
   469  0072                     ___ftpack@arg:	
   470                           ; 2 bytes @ 0x2
   471                           
   472  0072                     ___lmul@product:	
   473                           ; 3 bytes @ 0x2
   474                           
   475                           
   476                           ; 4 bytes @ 0x2
   477  0072                     	ds	1
   478  0073                     ??_ADC_Sample:	
   479  0073                     ??_KeyStopClear:	
   480                           ; 1 bytes @ 0x3
   481                           
   482  0073                     ??_GetTouchKeyValue:	
   483                           ; 1 bytes @ 0x3
   484                           
   485  0073                     KeyIsIn@45:	
   486                           ; 1 bytes @ 0x3
   487                           
   488  0073                     KeyStopClear@53:	
   489                           ; 1 bytes @ 0x3
   490                           
   491  0073                     GetTouchKeyValue@64:	
   492                           ; 1 bytes @ 0x3
   493                           
   494                           
   495                           ; 2 bytes @ 0x3
   496  0073                     	ds	1
   497  0074                     ??_KeyClearIn:	
   498  0074                     ??_KeyHave:	
   499                           ; 1 bytes @ 0x4
   500                           
   501  0074                     ??_CheckKeyOldValue:	
   502                           ; 1 bytes @ 0x4
   503                           
   504  0074                     KeyClearIn@51:	
   505                           ; 1 bytes @ 0x4
   506                           
   507  0074                     KeyHave@58:	
   508                           ; 1 bytes @ 0x4
   509                           
   510  0074                     ___lwmod@dividend:	
   511                           ; 1 bytes @ 0x4
   512                           
   513                           
   514                           ; 2 bytes @ 0x4
   515  0074                     	ds	1
   516  0075                     ??_TurnKeyFlags:	
   517  0075                     ___ftpack@exp:	
   518                           ; 1 bytes @ 0x5
   519                           
   520  0075                     GetTouchKeyValue@63:	
   521                           ; 1 bytes @ 0x5
   522                           
   523                           
   524                           ; 2 bytes @ 0x5
   525  0075                     	ds	1
   526  0076                     ??___lwmod:	
   527  0076                     ___ftpack@sign:	
   528                           ; 1 bytes @ 0x6
   529                           
   530  0076                     ___lwmod@counter:	
   531                           ; 1 bytes @ 0x6
   532                           
   533                           
   534                           ; 1 bytes @ 0x6
   535  0076                     	ds	1
   536  0077                     ??_keyLedCtr:	
   537  0077                     ??_fanCtr:	
   538                           ; 1 bytes @ 0x7
   539                           
   540  0077                     ??_wuhuaCtr:	
   541                           ; 1 bytes @ 0x7
   542                           
   543  0077                     ??_workCtr:	
   544                           ; 1 bytes @ 0x7
   545                           
   546  0077                     ??___lwtoft:	
   547                           ; 1 bytes @ 0x7
   548                           
   549  0077                     GetTouchKeyValue@62:	
   550                           ; 1 bytes @ 0x7
   551                           
   552                           
   553                           ; 1 bytes @ 0x7
   554  0077                     	ds	1
   555  0078                     ??_CheckTouchKey:	
   556  0078                     ??_WorkSleep:	
   557                           ; 1 bytes @ 0x8
   558                           
   559  0078                     ??_main:	
   560                           ; 1 bytes @ 0x8
   561                           
   562                           
   563                           	psect	cstackBANK0
   564  004C                     __pcstackBANK0:	
   565                           ; 1 bytes @ 0x8
   566                           
   567  004C                     ??_SystemEnterSleep:	
   568  004C                     ??___ftpack:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  004C                     ??_CheckOnceResult:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  004C                     ?___lmul:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  004C                     ADC_Sample@j:	
   578                           ; 4 bytes @ 0x0
   579                           
   580  004C                     CheckKeyOldValue@79:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  004C                     ___lmul@multiplier:	
   584                           ; 2 bytes @ 0x0
   585                           
   586                           
   587                           ; 4 bytes @ 0x0
   588  004C                     	ds	1
   589  004D                     ADC_Sample@adch:	
   590                           
   591                           ; 1 bytes @ 0x1
   592  004D                     	ds	1
   593  004E                     ADC_Sample@i:	
   594  004E                     CheckKeyOldValue@80:	
   595                           ; 1 bytes @ 0x2
   596                           
   597  004E                     SystemEnterSleep@94:	
   598                           ; 2 bytes @ 0x2
   599                           
   600                           
   601                           ; 2 bytes @ 0x2
   602  004E                     	ds	1
   603  004F                     ?___lwtoft:	
   604  004F                     ___lwtoft@c:	
   605                           ; 3 bytes @ 0x3
   606                           
   607  004F                     ADC_Sample@adsum:	
   608                           ; 2 bytes @ 0x3
   609                           
   610                           
   611                           ; 4 bytes @ 0x3
   612  004F                     	ds	1
   613  0050                     CheckKeyOldValue@78:	
   614  0050                     CheckOnceResult@73:	
   615                           ; 1 bytes @ 0x4
   616                           
   617  0050                     SystemEnterSleep@93:	
   618                           ; 2 bytes @ 0x4
   619                           
   620  0050                     ___lmul@multiplicand:	
   621                           ; 2 bytes @ 0x4
   622                           
   623                           
   624                           ; 4 bytes @ 0x4
   625  0050                     	ds	2
   626  0052                     ?___ftdiv:	
   627  0052                     CheckOnceResult@70:	
   628                           ; 3 bytes @ 0x6
   629                           
   630  0052                     SystemEnterSleep@92:	
   631                           ; 1 bytes @ 0x6
   632                           
   633  0052                     ___ftdiv@f2:	
   634                           ; 2 bytes @ 0x6
   635                           
   636                           
   637                           ; 3 bytes @ 0x6
   638  0052                     	ds	1
   639  0053                     ADC_Sample@admin:	
   640  0053                     CheckOnceResult@72:	
   641                           ; 2 bytes @ 0x7
   642                           
   643                           
   644                           ; 2 bytes @ 0x7
   645  0053                     	ds	1
   646  0054                     SystemEnterSleep@91:	
   647                           
   648                           ; 1 bytes @ 0x8
   649  0054                     	ds	1
   650  0055                     CheckOnceResult@69:	
   651  0055                     ADC_Sample@admax:	
   652                           ; 1 bytes @ 0x9
   653                           
   654  0055                     ___ftdiv@f1:	
   655                           ; 2 bytes @ 0x9
   656                           
   657                           
   658                           ; 3 bytes @ 0x9
   659  0055                     	ds	1
   660  0056                     CheckOnceResult@71:	
   661                           
   662                           ; 2 bytes @ 0xA
   663  0056                     	ds	1
   664  0057                     ADC_Sample@ad_temp:	
   665                           
   666                           ; 2 bytes @ 0xB
   667  0057                     	ds	1
   668  0058                     ??___ftdiv:	
   669  0058                     CheckOnceResult@68:	
   670                           ; 1 bytes @ 0xC
   671                           
   672                           
   673                           ; 1 bytes @ 0xC
   674  0058                     	ds	1
   675  0059                     fanCtr@maxFanValue:	
   676  0059                     wuhuaCtr@wuhua_temp:	
   677                           ; 1 bytes @ 0xD
   678                           
   679                           
   680                           ; 4 bytes @ 0xD
   681  0059                     	ds	1
   682  005A                     fanCtr@fan_temp:	
   683                           
   684                           ; 4 bytes @ 0xE
   685  005A                     	ds	1
   686  005B                     ___ftdiv@cntr:	
   687                           
   688                           ; 1 bytes @ 0xF
   689  005B                     	ds	1
   690  005C                     ___ftdiv@f3:	
   691                           
   692                           ; 3 bytes @ 0x10
   693  005C                     	ds	3
   694  005F                     ___ftdiv@exp:	
   695                           
   696                           ; 1 bytes @ 0x13
   697  005F                     	ds	1
   698  0060                     ___ftdiv@sign:	
   699                           
   700                           ; 1 bytes @ 0x14
   701  0060                     	ds	1
   702  0061                     ?___fttol:	
   703  0061                     ___fttol@f1:	
   704                           ; 4 bytes @ 0x15
   705                           
   706                           
   707                           ; 3 bytes @ 0x15
   708  0061                     	ds	4
   709  0065                     ??___fttol:	
   710                           
   711                           ; 1 bytes @ 0x19
   712  0065                     	ds	3
   713  0068                     ___fttol@sign1:	
   714                           
   715                           ; 1 bytes @ 0x1C
   716  0068                     	ds	1
   717  0069                     ___fttol@lval:	
   718                           
   719                           ; 4 bytes @ 0x1D
   720  0069                     	ds	4
   721  006D                     ___fttol@exp1:	
   722                           
   723                           ; 1 bytes @ 0x21
   724  006D                     	ds	1
   725                           
   726                           	psect	maintext
   727  0F7C                     __pmaintext:	
   728 ;;
   729 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   730 ;;
   731 ;; *************** function _main *****************
   732 ;; Defined at:
   733 ;;		line 607 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
   734 ;; Parameters:    Size  Location     Type
   735 ;;		None
   736 ;; Auto vars:     Size  Location     Type
   737 ;;		None
   738 ;; Return value:  Size  Location     Type
   739 ;;                  1    wreg      void 
   740 ;; Registers used:
   741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   742 ;; Tracked objects:
   743 ;;		On entry : B00/0
   744 ;;		On exit  : 200/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   747 ;;      Params:         0       0       0       0
   748 ;;      Locals:         0       0       0       0
   749 ;;      Temps:          0       0       0       0
   750 ;;      Totals:         0       0       0       0
   751 ;;Total ram usage:        0 bytes
   752 ;; Hardware stack levels required when called:    6
   753 ;; This function calls:
   754 ;;		_CheckTouchKey
   755 ;;		_Init_System
   756 ;;		_KeyServer
   757 ;;		_Refurbish_Sfr
   758 ;;		_WorkSleep
   759 ;;		_chrgCtr
   760 ;;		_workCtr
   761 ;; This function is called by:
   762 ;;		Startup code after reset
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           
   767                           ;psect for function _main
   768  0F7C                     _main:	
   769                           
   770                           ;main.c: 609: Init_System();
   771                           
   772                           ;incstack = 0
   773                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   774  0F7C  118A  23FE  158A   	fcall	_Init_System
   775  0F7F  30C8               	movlw	200
   776                           
   777                           ;main.c: 610: firstLock = 1;
   778  0F80  01B6               	clrf	_firstLock^(0+128)
   779  0F81  0AB6               	incf	_firstLock^(0+128),f
   780                           
   781                           ;main.c: 611: firstTime = 200;
   782  0F82  1283               	bcf	3,5	;RP0=0, select bank0
   783  0F83  00EE               	movwf	_firstTime
   784  0F84                     l4274:	
   785                           
   786                           ;main.c: 613: {
   787                           ;main.c: 614: if(B_MainLoop)
   788  0F84  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   789  0F85  2F84               	goto	l4274
   790                           
   791                           ;main.c: 615: {
   792                           ;main.c: 616: B_MainLoop = 0;
   793  0F86  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   794  0F87  0064               	clrwdt	;# 
   795                           
   796                           ;main.c: 619: CheckTouchKey();
   797  0F88  118A  2449  158A   	fcall	_CheckTouchKey
   798                           
   799                           ;main.c: 620: chrgCtr();
   800  0F8B  118A  27D6  158A   	fcall	_chrgCtr
   801                           
   802                           ;main.c: 621: Refurbish_Sfr();
   803  0F8E  118A  2760  158A   	fcall	_Refurbish_Sfr
   804                           
   805                           ;main.c: 622: KeyServer();
   806  0F91  158A  27B0  158A   	fcall	_KeyServer
   807                           
   808                           ;main.c: 623: workCtr();
   809  0F94  118A  20EF  158A   	fcall	_workCtr
   810                           
   811                           ;main.c: 624: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && s
      +                          hanshuoTime == 0 && shanshuoTime2 == 0)
   812  0F97  1283               	bcf	3,5	;RP0=0, select bank0
   813  0F98  086E               	movf	_firstTime,w
   814  0F99  1D03               	btfss	3,2
   815  0F9A  2F84               	goto	l4274
   816  0F9B  0843               	movf	_chrgFlag,w
   817  0F9C  1D03               	btfss	3,2
   818  0F9D  2F84               	goto	l4274
   819  0F9E  087B               	movf	_workStep,w
   820  0F9F  1D03               	btfss	3,2
   821  0FA0  2F84               	goto	l4274
   822  0FA1  0847               	movf	_wuhuaFlag,w
   823  0FA2  1D03               	btfss	3,2
   824  0FA3  2F84               	goto	l4274
   825  0FA4  0832               	movf	_shanshuoTime,w
   826  0FA5  0433               	iorwf	_shanshuoTime+1,w
   827  0FA6  1D03               	btfss	3,2
   828  0FA7  2F84               	goto	l4274
   829  0FA8  0830               	movf	_shanshuoTime2,w
   830  0FA9  0431               	iorwf	_shanshuoTime2+1,w
   831  0FAA  1D03               	btfss	3,2
   832  0FAB  2F84               	goto	l4274
   833                           
   834                           ;main.c: 625: {
   835                           ;main.c: 626: WorkSleep();
   836  0FAC  118A  241D  158A   	fcall	_WorkSleep
   837  0FAF  2F84               	goto	l4274
   838  0FB0                     __end_of_main:	
   839                           
   840                           	psect	text2
   841  0020                     __ptext2:	
   842 ;; *************** function _wuhuaCtr *****************
   843 ;; Defined at:
   844 ;;		line 506 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;		None
   847 ;; Auto vars:     Size  Location     Type
   848 ;;  wuhua_temp      4   13[BANK0 ] volatile unsigned long 
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, status,2, status,0, pclath, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : 200/100
   855 ;;		On exit  : 200/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   858 ;;      Params:         0       0       0       0
   859 ;;      Locals:         0       4       0       0
   860 ;;      Temps:          0       0       0       0
   861 ;;      Totals:         0       4       0       0
   862 ;;Total ram usage:        4 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; Hardware stack levels required when called:    2
   865 ;; This function calls:
   866 ;;		_ADC_Sample
   867 ;;		___lmul
   868 ;;		_pwmInit
   869 ;;		_pwmStop
   870 ;; This function is called by:
   871 ;;		_workCtr
   872 ;; This function uses a non-reentrant model
   873 ;;
   874                           
   875                           
   876                           ;psect for function _wuhuaCtr
   877  0020                     _wuhuaCtr:	
   878  0020                     l3970:	
   879                           ;incstack = 0
   880                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
   881                           
   882                           
   883                           ;main.c: 508: if(count1s == 0)
   884  0020  1283               	bcf	3,5	;RP0=0, select bank0
   885  0021  0848               	movf	_count1s,w
   886  0022  1D03               	btfss	3,2
   887  0023  2829               	goto	l3976
   888                           
   889                           ;main.c: 509: {
   890                           ;main.c: 510: if(++count10s >= 10)
   891  0024  300A               	movlw	10
   892  0025  0AC5               	incf	_count10s,f
   893  0026  0245               	subwf	_count10s,w
   894  0027  1803               	btfsc	3,0
   895                           
   896                           ;main.c: 511: {
   897                           ;main.c: 512: count10s = 0;
   898  0028  01C5               	clrf	_count10s
   899  0029                     l3976:	
   900                           
   901                           ;main.c: 513: }
   902                           ;main.c: 514: }
   903                           ;main.c: 515: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 5))
   904  0029  0347               	decf	_wuhuaFlag,w
   905  002A  1903               	btfsc	3,2
   906  002B  2834               	goto	l3982
   907  002C  3002               	movlw	2
   908  002D  0647               	xorwf	_wuhuaFlag,w
   909  002E  1D03               	btfss	3,2
   910  002F  2860               	goto	l3996
   911  0030  3005               	movlw	5
   912  0031  0245               	subwf	_count10s,w
   913  0032  1803               	skipnc
   914  0033  2860               	goto	l3996
   915  0034                     l3982:	
   916                           
   917                           ;main.c: 516: {
   918                           ;main.c: 517: pwmInit();
   919  0034  23A2  118A         	fcall	_pwmInit
   920  0036  3003               	movlw	3
   921                           
   922                           ;main.c: 531: test_adc = ADC_Sample(3, 0);
   923  0037  01F2               	clrf	ADC_Sample@adldo
   924  0038  2267  118A         	fcall	_ADC_Sample
   925  003A  00BD               	movwf	_test_adc	;volatile
   926                           
   927                           ;main.c: 532: if (0xA5 == test_adc)
   928  003B  30A5               	movlw	165
   929  003C  063D               	xorwf	_test_adc,w	;volatile
   930  003D  1D03               	btfss	3,2
   931  003E  0008               	return
   932                           
   933                           ;main.c: 533: {
   934                           ;main.c: 534: volatile unsigned long wuhua_temp;
   935                           ;main.c: 535: if(power_ad > 0)
   936  003F  082E               	movf	_power_ad,w	;volatile
   937  0040  042F               	iorwf	_power_ad+1,w	;volatile
   938  0041  1903               	btfsc	3,2
   939  0042  0008               	return
   940                           
   941                           ;main.c: 536: {
   942                           ;main.c: 537: wuhua_temp = (unsigned long)(1UL*adresult * power_ad)/4096;
   943  0043  23D3  118A         	fcall	PL10	;call to abstracted procedure
   944  0045  20BC  118A         	fcall	___lmul
   945  0047  084F               	movf	?___lmul+3,w
   946  0048  00DC               	movwf	wuhuaCtr@wuhua_temp+3	;volatile
   947  0049  084E               	movf	?___lmul+2,w
   948  004A  00DB               	movwf	wuhuaCtr@wuhua_temp+2	;volatile
   949  004B  084D               	movf	?___lmul+1,w
   950  004C  00DA               	movwf	wuhuaCtr@wuhua_temp+1	;volatile
   951  004D  084C               	movf	?___lmul,w
   952  004E  00D9               	movwf	wuhuaCtr@wuhua_temp	;volatile
   953  004F  300C               	movlw	12
   954  0050                     u3795:	
   955  0050  1003               	clrc
   956  0051  0CDC               	rrf	wuhuaCtr@wuhua_temp+3,f	;volatile
   957  0052  0CDB               	rrf	wuhuaCtr@wuhua_temp+2,f	;volatile
   958  0053  0CDA               	rrf	wuhuaCtr@wuhua_temp+1,f	;volatile
   959  0054  0CD9               	rrf	wuhuaCtr@wuhua_temp,f	;volatile
   960  0055  3EFF               	addlw	-1
   961  0056  1D03               	skipz
   962  0057  2850               	goto	u3795
   963                           
   964                           ;main.c: 538: wuhuaValue = (unsigned int)(wuhua_temp);
   965  0058  085A               	movf	wuhuaCtr@wuhua_temp+1,w	;volatile
   966  0059  1683               	bsf	3,5	;RP0=1, select bank1
   967  005A  00AD               	movwf	(_wuhuaValue+1)^(0+128)
   968  005B  1283               	bcf	3,5	;RP0=0, select bank0
   969  005C  0859               	movf	wuhuaCtr@wuhua_temp,w	;volatile
   970  005D  1683               	bsf	3,5	;RP0=1, select bank1
   971  005E  00AC               	movwf	_wuhuaValue^(0+128)
   972                           
   973                           ;main.c: 544: }
   974                           ;main.c: 545: }
   975  005F  0008               	return
   976  0060                     l3996:	
   977                           
   978                           ;main.c: 546: else
   979                           ;main.c: 547: {
   980                           ;main.c: 548: pwmStop();
   981  0060  2BBF               	ljmp	l3734
   982  0061                     __end_of_wuhuaCtr:	
   983  0061                     __ptext7:	
   984 ;; *************** function _fanCtr *****************
   985 ;; Defined at:
   986 ;;		line 455 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;		None
   989 ;; Auto vars:     Size  Location     Type
   990 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
   991 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
   992 ;; Return value:  Size  Location     Type
   993 ;;                  1    wreg      void 
   994 ;; Registers used:
   995 ;;		wreg, status,2, status,0, pclath, cstack
   996 ;; Tracked objects:
   997 ;;		On entry : 300/100
   998 ;;		On exit  : 200/0
   999 ;;		Unchanged: 0/0
  1000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1001 ;;      Params:         0       0       0       0
  1002 ;;      Locals:         0       5       0       0
  1003 ;;      Temps:          0       0       0       0
  1004 ;;      Totals:         0       5       0       0
  1005 ;;Total ram usage:        5 bytes
  1006 ;; Hardware stack levels used:    1
  1007 ;; Hardware stack levels required when called:    2
  1008 ;; This function calls:
  1009 ;;		_ADC_Sample
  1010 ;;		___lmul
  1011 ;;		_fanInit
  1012 ;;		_fanStop
  1013 ;; This function is called by:
  1014 ;;		_workCtr
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           
  1019                           ;psect for function _fanCtr
  1020  0061                     _fanCtr:	
  1021                           
  1022                           ;main.c: 457: if(workStep > 0)
  1023                           
  1024                           ;incstack = 0
  1025                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1026  0061  087B               	movf	_workStep,w
  1027  0062  1903               	btfsc	3,2
  1028  0063  28B7               	goto	l3964
  1029                           
  1030                           ;main.c: 458: {
  1031                           ;main.c: 459: PORTA |= 0x04;
  1032  0064  1506               	bsf	6,2	;volatile
  1033                           
  1034                           ;main.c: 460: unsigned char maxFanValue = 52;
  1035  0065  3034               	movlw	52
  1036  0066  1283               	bcf	3,5	;RP0=0, select bank0
  1037  0067  00D9               	movwf	fanCtr@maxFanValue
  1038                           
  1039                           ;main.c: 461: if(workStep == 1)
  1040  0068  0B7B               	decfsz	_workStep,w
  1041  0069  286C               	goto	l3932
  1042                           
  1043                           ;main.c: 462: {
  1044                           ;main.c: 463: maxFanValue = 40;
  1045  006A  3028               	movlw	40
  1046  006B  00D9               	movwf	fanCtr@maxFanValue
  1047  006C                     l3932:	
  1048  006C  300D               	movlw	13
  1049                           
  1050                           ;main.c: 464: }
  1051                           ;main.c: 465: test_adc = ADC_Sample(13, 0);
  1052  006D  01F2               	clrf	ADC_Sample@adldo
  1053  006E  2267  118A         	fcall	_ADC_Sample
  1054  0070  00BD               	movwf	_test_adc	;volatile
  1055                           
  1056                           ;main.c: 466: if (0xA5 == test_adc)
  1057  0071  30A5               	movlw	165
  1058  0072  063D               	xorwf	_test_adc,w	;volatile
  1059  0073  1D03               	btfss	3,2
  1060  0074  2895               	goto	l3944
  1061                           
  1062                           ;main.c: 467: {
  1063                           ;main.c: 468: volatile unsigned long fan_temp;
  1064                           ;main.c: 469: if(power_ad > 0)
  1065  0075  082E               	movf	_power_ad,w	;volatile
  1066  0076  042F               	iorwf	_power_ad+1,w	;volatile
  1067  0077  1903               	btfsc	3,2
  1068  0078  2895               	goto	l3944
  1069                           
  1070                           ;main.c: 470: {
  1071                           ;main.c: 471: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  1072  0079  23D3  118A         	fcall	PL10	;call to abstracted procedure
  1073  007B  20BC  118A         	fcall	___lmul
  1074  007D  084F               	movf	?___lmul+3,w
  1075  007E  00DD               	movwf	fanCtr@fan_temp+3	;volatile
  1076  007F  084E               	movf	?___lmul+2,w
  1077  0080  00DC               	movwf	fanCtr@fan_temp+2	;volatile
  1078  0081  084D               	movf	?___lmul+1,w
  1079  0082  00DB               	movwf	fanCtr@fan_temp+1	;volatile
  1080  0083  084C               	movf	?___lmul,w
  1081  0084  00DA               	movwf	fanCtr@fan_temp	;volatile
  1082  0085  300C               	movlw	12
  1083  0086                     u3675:	
  1084  0086  1003               	clrc
  1085  0087  0CDD               	rrf	fanCtr@fan_temp+3,f	;volatile
  1086  0088  0CDC               	rrf	fanCtr@fan_temp+2,f	;volatile
  1087  0089  0CDB               	rrf	fanCtr@fan_temp+1,f	;volatile
  1088  008A  0CDA               	rrf	fanCtr@fan_temp,f	;volatile
  1089  008B  3EFF               	addlw	-1
  1090  008C  1D03               	skipz
  1091  008D  2886               	goto	u3675
  1092                           
  1093                           ;main.c: 472: fanValue = (unsigned int)(fan_temp);
  1094  008E  085B               	movf	fanCtr@fan_temp+1,w	;volatile
  1095  008F  1683               	bsf	3,5	;RP0=1, select bank1
  1096  0090  00AF               	movwf	(_fanValue+1)^(0+128)
  1097  0091  1283               	bcf	3,5	;RP0=0, select bank0
  1098  0092  085A               	movf	fanCtr@fan_temp,w	;volatile
  1099  0093  1683               	bsf	3,5	;RP0=1, select bank1
  1100  0094  00AE               	movwf	_fanValue^(0+128)
  1101  0095                     l3944:	
  1102                           
  1103                           ;main.c: 473: }
  1104                           ;main.c: 474: }
  1105                           ;main.c: 475: if(fanValue > 1300)
  1106  0095  3005               	movlw	5
  1107  0096  1683               	bsf	3,5	;RP0=1, select bank1
  1108  0097  022F               	subwf	(_fanValue+1)^(0+128),w
  1109  0098  3015               	movlw	21
  1110  0099  1903               	skipnz
  1111  009A  022E               	subwf	_fanValue^(0+128),w
  1112  009B  1C03               	skipc
  1113  009C  28AA               	goto	l3952
  1114                           
  1115                           ;main.c: 476: {
  1116                           ;main.c: 477: if(++fanOverTime > 50)
  1117  009D  3033               	movlw	51
  1118  009E  1283               	bcf	3,5	;RP0=0, select bank0
  1119  009F  0AC4               	incf	_fanOverTime,f
  1120  00A0  0244               	subwf	_fanOverTime,w
  1121  00A1  1C03               	skipc
  1122  00A2  28AC               	goto	l3954
  1123  00A3  30C2               	movlw	194
  1124                           
  1125                           ;main.c: 478: {
  1126                           ;main.c: 479: fanOverTime = 0;
  1127  00A4  01C4               	clrf	_fanOverTime
  1128                           
  1129                           ;main.c: 480: workStep = 0;
  1130  00A5  01FB               	clrf	_workStep
  1131                           
  1132                           ;main.c: 481: shanshuoTime = 450;
  1133  00A6  00B2               	movwf	_shanshuoTime
  1134  00A7  3001               	movlw	1
  1135  00A8  00B3               	movwf	_shanshuoTime+1
  1136  00A9  28AC               	goto	l3954
  1137  00AA                     l3952:	
  1138                           
  1139                           ;main.c: 484: else
  1140                           ;main.c: 485: {
  1141                           ;main.c: 486: fanOverTime = 0;
  1142  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  1143  00AB  01C4               	clrf	_fanOverTime
  1144  00AC                     l3954:	
  1145                           
  1146                           ;main.c: 487: }
  1147                           ;main.c: 488: if(fanDuty < maxFanValue)
  1148  00AC  0859               	movf	fanCtr@maxFanValue,w
  1149  00AD  0246               	subwf	_fanDuty,w
  1150  00AE  1803               	skipnc
  1151  00AF  28B2               	goto	l3958
  1152                           
  1153                           ;main.c: 489: {
  1154                           ;main.c: 490: fanDuty++;
  1155  00B0  0AC6               	incf	_fanDuty,f
  1156                           
  1157                           ;main.c: 491: }
  1158  00B1  28B6               	goto	l3962
  1159  00B2                     l3958:	
  1160                           
  1161                           ;main.c: 492: else if(fanDuty > maxFanValue)
  1162  00B2  0846               	movf	_fanDuty,w
  1163  00B3  0259               	subwf	fanCtr@maxFanValue,w
  1164  00B4  1C03               	btfss	3,0
  1165                           
  1166                           ;main.c: 493: {
  1167                           ;main.c: 494: fanDuty--;
  1168  00B5  03C6               	decf	_fanDuty,f
  1169  00B6                     l3962:	
  1170                           
  1171                           ;main.c: 495: }
  1172                           ;main.c: 496: fanInit();
  1173  00B6  2BAE               	ljmp	l3740
  1174  00B7                     l3964:	
  1175                           ;main.c: 497: }
  1176                           
  1177                           
  1178                           ;main.c: 498: else
  1179                           ;main.c: 499: {
  1180                           ;main.c: 500: fanStop();
  1181  00B7  23BA               	fcall	_fanStop
  1182                           
  1183                           ;main.c: 501: fanDuty = 0;
  1184  00B8  01C6               	clrf	_fanDuty
  1185                           
  1186                           ;main.c: 502: PORTA &= 0xFB;
  1187  00B9  1683               	bsf	3,5	;RP0=1, select bank1
  1188  00BA  1106               	bcf	6,2	;volatile
  1189  00BB  0008               	return
  1190  00BC                     __end_of_fanCtr:	
  1191  00BC                     __ptext10:	
  1192 ;; *************** function ___lmul *****************
  1193 ;; Defined at:
  1194 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1197 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;  product         4    2[COMMON] unsigned long 
  1200 ;; Return value:  Size  Location     Type
  1201 ;;                  4    0[BANK0 ] unsigned long 
  1202 ;; Registers used:
  1203 ;;		wreg, status,2, status,0
  1204 ;; Tracked objects:
  1205 ;;		On entry : 300/0
  1206 ;;		On exit  : 300/0
  1207 ;;		Unchanged: 0/0
  1208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1209 ;;      Params:         0       8       0       0
  1210 ;;      Locals:         4       0       0       0
  1211 ;;      Temps:          0       0       0       0
  1212 ;;      Totals:         4       8       0       0
  1213 ;;Total ram usage:       12 bytes
  1214 ;; Hardware stack levels used:    1
  1215 ;; Hardware stack levels required when called:    1
  1216 ;; This function calls:
  1217 ;;		Nothing
  1218 ;; This function is called by:
  1219 ;;		_fanCtr
  1220 ;;		_wuhuaCtr
  1221 ;; This function uses a non-reentrant model
  1222 ;;
  1223                           
  1224                           
  1225                           ;psect for function ___lmul
  1226  00BC                     ___lmul:	
  1227                           
  1228                           ;incstack = 0
  1229                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1230  00BC  01F2               	clrf	___lmul@product
  1231  00BD  01F3               	clrf	___lmul@product+1
  1232  00BE  01F4               	clrf	___lmul@product+2
  1233  00BF  01F5               	clrf	___lmul@product+3
  1234  00C0                     l1307:	
  1235  00C0  1C4C               	btfss	___lmul@multiplier,0
  1236  00C1  28D6               	goto	l3760
  1237  00C2  0850               	movf	___lmul@multiplicand,w
  1238  00C3  07F2               	addwf	___lmul@product,f
  1239  00C4  0851               	movf	___lmul@multiplicand+1,w
  1240  00C5  1103               	clrz
  1241  00C6  1803               	skipnc
  1242  00C7  3E01               	addlw	1
  1243  00C8  1D03               	btfss	3,2
  1244  00C9  07F3               	addwf	___lmul@product+1,f
  1245  00CA  0852               	movf	___lmul@multiplicand+2,w
  1246  00CB  1103               	clrz
  1247  00CC  1803               	skipnc
  1248  00CD  3E01               	addlw	1
  1249  00CE  1D03               	btfss	3,2
  1250  00CF  07F4               	addwf	___lmul@product+2,f
  1251  00D0  0853               	movf	___lmul@multiplicand+3,w
  1252  00D1  1103               	clrz
  1253  00D2  1803               	skipnc
  1254  00D3  3E01               	addlw	1
  1255  00D4  1D03               	btfss	3,2
  1256  00D5  07F5               	addwf	___lmul@product+3,f
  1257  00D6                     l3760:	
  1258  00D6  1003               	clrc
  1259  00D7  0DD0               	rlf	___lmul@multiplicand,f
  1260  00D8  0DD1               	rlf	___lmul@multiplicand+1,f
  1261  00D9  0DD2               	rlf	___lmul@multiplicand+2,f
  1262  00DA  0DD3               	rlf	___lmul@multiplicand+3,f
  1263  00DB  1003               	clrc
  1264  00DC  0CCF               	rrf	___lmul@multiplier+3,f
  1265  00DD  0CCE               	rrf	___lmul@multiplier+2,f
  1266  00DE  0CCD               	rrf	___lmul@multiplier+1,f
  1267  00DF  0CCC               	rrf	___lmul@multiplier,f
  1268  00E0  084F               	movf	___lmul@multiplier+3,w
  1269  00E1  044E               	iorwf	___lmul@multiplier+2,w
  1270  00E2  044D               	iorwf	___lmul@multiplier+1,w
  1271  00E3  044C               	iorwf	___lmul@multiplier,w
  1272  00E4  1D03               	skipz
  1273  00E5  28C0               	goto	l1307
  1274  00E6  0875               	movf	___lmul@product+3,w
  1275  00E7  00CF               	movwf	?___lmul+3
  1276  00E8  0874               	movf	___lmul@product+2,w
  1277  00E9  00CE               	movwf	?___lmul+2
  1278  00EA  0873               	movf	___lmul@product+1,w
  1279  00EB  00CD               	movwf	?___lmul+1
  1280  00EC  0872               	movf	___lmul@product,w
  1281  00ED  00CC               	movwf	?___lmul
  1282  00EE  0008               	return
  1283  00EF                     __end_of___lmul:	
  1284  00EF                     __ptext1:	
  1285 ;; *************** function _workCtr *****************
  1286 ;; Defined at:
  1287 ;;		line 553 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;		None
  1290 ;; Auto vars:     Size  Location     Type
  1291 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  1    wreg      void 
  1294 ;; Registers used:
  1295 ;;		wreg, status,2, status,0, pclath, cstack
  1296 ;; Tracked objects:
  1297 ;;		On entry : 300/0
  1298 ;;		On exit  : 200/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1301 ;;      Params:         0       0       0       0
  1302 ;;      Locals:         0       0       4       0
  1303 ;;      Temps:          0       0       0       0
  1304 ;;      Totals:         0       0       4       0
  1305 ;;Total ram usage:        4 bytes
  1306 ;; Hardware stack levels used:    1
  1307 ;; Hardware stack levels required when called:    3
  1308 ;; This function calls:
  1309 ;;		_ADC_Sample
  1310 ;;		___ftdiv
  1311 ;;		___fttol
  1312 ;;		___lwtoft
  1313 ;;		_fanCtr
  1314 ;;		_keyLedCtr
  1315 ;;		_wuhuaCtr
  1316 ;; This function is called by:
  1317 ;;		_main
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321                           
  1322                           ;psect for function _workCtr
  1323  00EF                     _workCtr:	
  1324                           
  1325                           ;incstack = 0
  1326                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
  1327  00EF  301F               	movlw	31
  1328                           
  1329                           ;main.c: 555: test_adc = ADC_Sample(31, 0);
  1330  00F0  01F2               	clrf	ADC_Sample@adldo
  1331  00F1  2267  118A         	fcall	_ADC_Sample
  1332  00F3  00BD               	movwf	_test_adc	;volatile
  1333                           
  1334                           ;main.c: 556: if (0xA5 == test_adc)
  1335  00F4  30A5               	movlw	165
  1336  00F5  063D               	xorwf	_test_adc,w	;volatile
  1337  00F6  1D03               	btfss	3,2
  1338  00F7  2929               	goto	l4200
  1339                           
  1340                           ;main.c: 557: {
  1341                           ;main.c: 558: volatile unsigned long power_temp;
  1342                           ;main.c: 560: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  1343  00F8  3096               	movlw	150
  1344  00F9  01D5               	clrf	___ftdiv@f1
  1345  00FA  00D6               	movwf	___ftdiv@f1+1
  1346  00FB  304A               	movlw	74
  1347  00FC  00D7               	movwf	___ftdiv@f1+2
  1348  00FD  084B               	movf	_adresult+1,w	;volatile
  1349  00FE  00D0               	movwf	___lwtoft@c+1
  1350  00FF  084A               	movf	_adresult,w	;volatile
  1351  0100  00CF               	movwf	___lwtoft@c
  1352  0101  2219  118A         	fcall	___lwtoft
  1353  0103  084F               	movf	?___lwtoft,w
  1354  0104  00D2               	movwf	___ftdiv@f2
  1355  0105  0850               	movf	?___lwtoft+1,w
  1356  0106  00D3               	movwf	___ftdiv@f2+1
  1357  0107  0851               	movf	?___lwtoft+2,w
  1358  0108  00D4               	movwf	___ftdiv@f2+2
  1359  0109  215E  118A         	fcall	___ftdiv
  1360  010B  0852               	movf	?___ftdiv,w
  1361  010C  00E1               	movwf	___fttol@f1
  1362  010D  0853               	movf	?___ftdiv+1,w
  1363  010E  00E2               	movwf	___fttol@f1+1
  1364  010F  0854               	movf	?___ftdiv+2,w
  1365  0110  00E3               	movwf	___fttol@f1+2
  1366  0111  21C0  118A         	fcall	___fttol
  1367  0113  0864               	movf	?___fttol+3,w
  1368  0114  1683               	bsf	3,5	;RP0=1, select bank1
  1369  0115  00B5               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
  1370  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1371  0117  0863               	movf	?___fttol+2,w
  1372  0118  1683               	bsf	3,5	;RP0=1, select bank1
  1373  0119  00B4               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
  1374  011A  1283               	bcf	3,5	;RP0=0, select bank0
  1375  011B  0862               	movf	?___fttol+1,w
  1376  011C  1683               	bsf	3,5	;RP0=1, select bank1
  1377  011D  00B3               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
  1378  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1379  011F  0861               	movf	?___fttol,w
  1380  0120  1683               	bsf	3,5	;RP0=1, select bank1
  1381  0121  00B2               	movwf	workCtr@power_temp^(0+128)	;volatile
  1382                           
  1383                           ;main.c: 561: power_ad = (unsigned int)(power_temp);
  1384  0122  0833               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
  1385  0123  1283               	bcf	3,5	;RP0=0, select bank0
  1386  0124  00AF               	movwf	_power_ad+1	;volatile
  1387  0125  1683               	bsf	3,5	;RP0=1, select bank1
  1388  0126  0832               	movf	workCtr@power_temp^(0+128),w	;volatile
  1389  0127  1283               	bcf	3,5	;RP0=0, select bank0
  1390  0128  00AE               	movwf	_power_ad	;volatile
  1391  0129                     l4200:	
  1392                           
  1393                           ;main.c: 562: }
  1394                           ;main.c: 563: if(workStep == 2 && power_ad < 2900)
  1395  0129  3002               	movlw	2
  1396  012A  067B               	xorwf	_workStep,w
  1397  012B  1D03               	btfss	3,2
  1398  012C  293D               	goto	l4210
  1399  012D  300B               	movlw	11
  1400  012E  022F               	subwf	_power_ad+1,w	;volatile
  1401  012F  3054               	movlw	84
  1402  0130  1903               	skipnz
  1403  0131  022E               	subwf	_power_ad,w	;volatile
  1404  0132  1803               	skipnc
  1405  0133  293D               	goto	l4210
  1406                           
  1407                           ;main.c: 564: {
  1408                           ;main.c: 565: if(++lowFanTime > 200)
  1409  0134  30C9               	movlw	201
  1410  0135  0ABE               	incf	_lowFanTime,f
  1411  0136  023E               	subwf	_lowFanTime,w
  1412  0137  1C03               	skipc
  1413  0138  293E               	goto	l4212
  1414                           
  1415                           ;main.c: 566: {
  1416                           ;main.c: 567: lowFanTime = 0;
  1417  0139  01BE               	clrf	_lowFanTime
  1418                           
  1419                           ;main.c: 568: workStep = 1;
  1420  013A  01FB               	clrf	_workStep
  1421  013B  0AFB               	incf	_workStep,f
  1422  013C  293E               	goto	l4212
  1423  013D                     l4210:	
  1424                           
  1425                           ;main.c: 571: else
  1426                           ;main.c: 572: {
  1427                           ;main.c: 573: lowFanTime = 0;
  1428  013D  01BE               	clrf	_lowFanTime
  1429  013E                     l4212:	
  1430                           
  1431                           ;main.c: 574: }
  1432                           ;main.c: 575: if(power_ad < 2700)
  1433  013E  300A               	movlw	10
  1434  013F  022F               	subwf	_power_ad+1,w	;volatile
  1435  0140  308C               	movlw	140
  1436  0141  1903               	skipnz
  1437  0142  022E               	subwf	_power_ad,w	;volatile
  1438  0143  1803               	skipnc
  1439  0144  2950               	goto	l4220
  1440                           
  1441                           ;main.c: 576: {
  1442                           ;main.c: 577: if(++lowBatTime > 200)
  1443  0145  30C9               	movlw	201
  1444  0146  0ABF               	incf	_lowBatTime,f
  1445  0147  023F               	subwf	_lowBatTime,w
  1446  0148  1C03               	skipc
  1447  0149  2951               	goto	l4222
  1448                           
  1449                           ;main.c: 578: {
  1450                           ;main.c: 579: lowBatTime = 0;
  1451  014A  01BF               	clrf	_lowBatTime
  1452                           
  1453                           ;main.c: 580: lowBatLock = 1;
  1454  014B  01C0               	clrf	_lowBatLock
  1455  014C  0AC0               	incf	_lowBatLock,f
  1456                           
  1457                           ;main.c: 581: workStep = 0;
  1458  014D  01FB               	clrf	_workStep
  1459                           
  1460                           ;main.c: 582: wuhuaFlag = 0;
  1461  014E  01C7               	clrf	_wuhuaFlag
  1462  014F  2951               	goto	l4222
  1463  0150                     l4220:	
  1464                           
  1465                           ;main.c: 585: else
  1466                           ;main.c: 586: {
  1467                           ;main.c: 587: lowBatTime = 0;
  1468  0150  01BF               	clrf	_lowBatTime
  1469  0151                     l4222:	
  1470                           
  1471                           ;main.c: 588: }
  1472                           ;main.c: 589: if(firstTime > 0)
  1473  0151  086E               	movf	_firstTime,w
  1474  0152  1903               	btfsc	3,2
  1475  0153  2959               	goto	l4230
  1476                           
  1477                           ;main.c: 590: {
  1478                           ;main.c: 591: firstTime--;
  1479  0154  03EE               	decf	_firstTime,f
  1480                           
  1481                           ;main.c: 592: PORTB = 0x00;
  1482  0155  0186               	clrf	6	;volatile
  1483                           
  1484                           ;main.c: 593: PORTA = 0x00;
  1485  0156  1683               	bsf	3,5	;RP0=1, select bank1
  1486  0157  0186               	clrf	6	;volatile
  1487                           
  1488                           ;main.c: 594: }
  1489  0158  0008               	return
  1490  0159                     l4230:	
  1491                           
  1492                           ;main.c: 595: else
  1493                           ;main.c: 596: {
  1494                           ;main.c: 597: keyLedCtr();
  1495  0159  2337  118A         	fcall	_keyLedCtr
  1496                           
  1497                           ;main.c: 598: fanCtr();
  1498  015B  2061  118A         	fcall	_fanCtr
  1499                           
  1500                           ;main.c: 599: wuhuaCtr();
  1501  015D  2820               	ljmp	l3970
  1502  015E                     __end_of_workCtr:	
  1503  015E                     __ptext14:	
  1504 ;; *************** function ___ftdiv *****************
  1505 ;; Defined at:
  1506 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;  f2              3    6[BANK0 ] float 
  1509 ;;  f1              3    9[BANK0 ] float 
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;  f3              3   16[BANK0 ] float 
  1512 ;;  sign            1   20[BANK0 ] unsigned char 
  1513 ;;  exp             1   19[BANK0 ] unsigned char 
  1514 ;;  cntr            1   15[BANK0 ] unsigned char 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  3    6[BANK0 ] float 
  1517 ;; Registers used:
  1518 ;;		wreg, status,2, status,0, pclath, cstack
  1519 ;; Tracked objects:
  1520 ;;		On entry : 300/0
  1521 ;;		On exit  : 300/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1524 ;;      Params:         0       6       0       0
  1525 ;;      Locals:         0       6       0       0
  1526 ;;      Temps:          0       3       0       0
  1527 ;;      Totals:         0      15       0       0
  1528 ;;Total ram usage:       15 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; Hardware stack levels required when called:    2
  1531 ;; This function calls:
  1532 ;;		___ftpack
  1533 ;; This function is called by:
  1534 ;;		_workCtr
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           
  1539                           ;psect for function ___ftdiv
  1540  015E                     ___ftdiv:	
  1541                           
  1542                           ;incstack = 0
  1543                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1544  015E  0855               	movf	___ftdiv@f1,w
  1545  015F  00D8               	movwf	??___ftdiv
  1546  0160  0856               	movf	___ftdiv@f1+1,w
  1547  0161  00D9               	movwf	??___ftdiv+1
  1548  0162  0857               	movf	___ftdiv@f1+2,w
  1549  0163  00DA               	movwf	??___ftdiv+2
  1550  0164  1003               	clrc
  1551  0165  0D59               	rlf	??___ftdiv+1,w
  1552  0166  0D5A               	rlf	??___ftdiv+2,w
  1553  0167  00DF               	movwf	___ftdiv@exp
  1554  0168  085F               	movf	___ftdiv@exp,w
  1555  0169  1D03               	btfss	3,2
  1556  016A  296C               	goto	l4072
  1557  016B  2BFA               	ljmp	PL38	;call to abstracted procedure
  1558  016C                     l4072:	
  1559  016C  0852               	movf	___ftdiv@f2,w
  1560  016D  00D8               	movwf	??___ftdiv
  1561  016E  0853               	movf	___ftdiv@f2+1,w
  1562  016F  00D9               	movwf	??___ftdiv+1
  1563  0170  0854               	movf	___ftdiv@f2+2,w
  1564  0171  00DA               	movwf	??___ftdiv+2
  1565  0172  1003               	clrc
  1566  0173  0D59               	rlf	??___ftdiv+1,w
  1567  0174  0D5A               	rlf	??___ftdiv+2,w
  1568  0175  00E0               	movwf	___ftdiv@sign
  1569  0176  0860               	movf	___ftdiv@sign,w
  1570  0177  1D03               	btfss	3,2
  1571  0178  297A               	goto	l1506
  1572  0179  2BFA               	ljmp	PL38	;call to abstracted procedure
  1573  017A                     l1506:	
  1574  017A  3089               	movlw	137
  1575  017B  01DC               	clrf	___ftdiv@f3
  1576  017C  01DD               	clrf	___ftdiv@f3+1
  1577  017D  01DE               	clrf	___ftdiv@f3+2
  1578  017E  0760               	addwf	___ftdiv@sign,w
  1579  017F  00D8               	movwf	??___ftdiv
  1580  0180  02DF               	subwf	___ftdiv@exp,f
  1581  0181  0857               	movf	___ftdiv@f1+2,w
  1582  0182  00E0               	movwf	___ftdiv@sign
  1583  0183  0854               	movf	___ftdiv@f2+2,w
  1584  0184  06E0               	xorwf	___ftdiv@sign,f
  1585  0185  3080               	movlw	128
  1586  0186  05E0               	andwf	___ftdiv@sign,f
  1587  0187  3018               	movlw	24
  1588  0188  17D6               	bsf	___ftdiv@f1+1,7
  1589  0189  01D7               	clrf	___ftdiv@f1+2
  1590  018A  17D3               	bsf	___ftdiv@f2+1,7
  1591  018B  01D4               	clrf	___ftdiv@f2+2
  1592  018C  00DB               	movwf	___ftdiv@cntr
  1593  018D                     l4094:	
  1594  018D  1003               	clrc
  1595  018E  0DDC               	rlf	___ftdiv@f3,f
  1596  018F  0DDD               	rlf	___ftdiv@f3+1,f
  1597  0190  0DDE               	rlf	___ftdiv@f3+2,f
  1598  0191  0854               	movf	___ftdiv@f2+2,w
  1599  0192  0257               	subwf	___ftdiv@f1+2,w
  1600  0193  1D03               	skipz
  1601  0194  299B               	goto	u3955
  1602  0195  0853               	movf	___ftdiv@f2+1,w
  1603  0196  0256               	subwf	___ftdiv@f1+1,w
  1604  0197  1D03               	skipz
  1605  0198  299B               	goto	u3955
  1606  0199  0852               	movf	___ftdiv@f2,w
  1607  019A  0255               	subwf	___ftdiv@f1,w
  1608  019B                     u3955:	
  1609  019B  1C03               	skipc
  1610  019C  29A9               	goto	L4
  1611  019D  0852               	movf	___ftdiv@f2,w
  1612  019E  02D5               	subwf	___ftdiv@f1,f
  1613  019F  0853               	movf	___ftdiv@f2+1,w
  1614  01A0  1C03               	skipc
  1615  01A1  0F53               	incfsz	___ftdiv@f2+1,w
  1616  01A2  02D6               	subwf	___ftdiv@f1+1,f
  1617  01A3  0854               	movf	___ftdiv@f2+2,w
  1618  01A4  1C03               	skipc
  1619  01A5  0A54               	incf	___ftdiv@f2+2,w
  1620  01A6  02D7               	subwf	___ftdiv@f1+2,f
  1621  01A7  145C               	bsf	___ftdiv@f3,0
  1622  01A8  1003               	clrc
  1623  01A9                     L4:	
  1624  01A9  0DD5               	rlf	___ftdiv@f1,f
  1625  01AA  0DD6               	rlf	___ftdiv@f1+1,f
  1626  01AB  0DD7               	rlf	___ftdiv@f1+2,f
  1627  01AC  0BDB               	decfsz	___ftdiv@cntr,f
  1628  01AD  298D               	goto	l4094
  1629  01AE  085C               	movf	___ftdiv@f3,w
  1630  01AF  00F2               	movwf	___ftpack@arg
  1631  01B0  085D               	movf	___ftdiv@f3+1,w
  1632  01B1  00F3               	movwf	___ftpack@arg+1
  1633  01B2  085E               	movf	___ftdiv@f3+2,w
  1634  01B3  00F4               	movwf	___ftpack@arg+2
  1635  01B4  085F               	movf	___ftdiv@exp,w
  1636  01B5  00F5               	movwf	___ftpack@exp
  1637  01B6  0860               	movf	___ftdiv@sign,w
  1638  01B7  00F6               	movwf	___ftpack@sign
  1639  01B8  2229               	fcall	___ftpack
  1640  01B9  0872               	movf	?___ftpack,w
  1641  01BA  00D2               	movwf	?___ftdiv
  1642  01BB  0873               	movf	?___ftpack+1,w
  1643  01BC  00D3               	movwf	?___ftdiv+1
  1644  01BD  0874               	movf	?___ftpack+2,w
  1645  01BE  00D4               	movwf	?___ftdiv+2
  1646  01BF  0008               	return
  1647  01C0                     __end_of___ftdiv:	
  1648  01C0                     __ptext13:	
  1649 ;; *************** function ___fttol *****************
  1650 ;; Defined at:
  1651 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;  f1              3   21[BANK0 ] float 
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;  lval            4   29[BANK0 ] unsigned long 
  1656 ;;  exp1            1   33[BANK0 ] unsigned char 
  1657 ;;  sign1           1   28[BANK0 ] unsigned char 
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  4   21[BANK0 ] long 
  1660 ;; Registers used:
  1661 ;;		wreg, status,2, status,0
  1662 ;; Tracked objects:
  1663 ;;		On entry : 300/0
  1664 ;;		On exit  : 300/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1667 ;;      Params:         0       4       0       0
  1668 ;;      Locals:         0       6       0       0
  1669 ;;      Temps:          0       3       0       0
  1670 ;;      Totals:         0      13       0       0
  1671 ;;Total ram usage:       13 bytes
  1672 ;; Hardware stack levels used:    1
  1673 ;; Hardware stack levels required when called:    1
  1674 ;; This function calls:
  1675 ;;		Nothing
  1676 ;; This function is called by:
  1677 ;;		_workCtr
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           
  1682                           ;psect for function ___fttol
  1683  01C0                     ___fttol:	
  1684                           
  1685                           ;incstack = 0
  1686                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1687  01C0  23E9  118A         	fcall	PL26	;call to abstracted procedure
  1688  01C2  1003               	clrc
  1689  01C3  0D66               	rlf	??___fttol+1,w
  1690  01C4  0D67               	rlf	??___fttol+2,w
  1691  01C5  00ED               	movwf	___fttol@exp1
  1692  01C6  086D               	movf	___fttol@exp1,w
  1693  01C7  1D03               	btfss	3,2
  1694  01C8  29CE               	goto	l4112
  1695  01C9                     l4110:	
  1696  01C9  01E1               	clrf	?___fttol
  1697  01CA  01E2               	clrf	?___fttol+1
  1698  01CB  01E3               	clrf	?___fttol+2
  1699  01CC  01E4               	clrf	?___fttol+3
  1700  01CD  0008               	return
  1701  01CE                     l4112:	
  1702  01CE  23E9  118A         	fcall	PL26	;call to abstracted procedure
  1703  01D0  3017               	movlw	23
  1704  01D1                     u3985:	
  1705  01D1  1003               	clrc
  1706  01D2  0CE7               	rrf	??___fttol+2,f
  1707  01D3  0CE6               	rrf	??___fttol+1,f
  1708  01D4  0CE5               	rrf	??___fttol,f
  1709  01D5  3EFF               	addlw	-1
  1710  01D6  1D03               	skipz
  1711  01D7  29D1               	goto	u3985
  1712  01D8  0865               	movf	??___fttol,w
  1713  01D9  00E8               	movwf	___fttol@sign1
  1714  01DA  17E2               	bsf	___fttol@f1+1,7
  1715  01DB  01E3               	clrf	___fttol@f1+2
  1716  01DC  0861               	movf	___fttol@f1,w
  1717  01DD  00E9               	movwf	___fttol@lval
  1718  01DE  0862               	movf	___fttol@f1+1,w
  1719  01DF  00EA               	movwf	___fttol@lval+1
  1720  01E0  0863               	movf	___fttol@f1+2,w
  1721  01E1  00EB               	movwf	___fttol@lval+2
  1722  01E2  308E               	movlw	142
  1723  01E3  01EC               	clrf	___fttol@lval+3
  1724  01E4  02ED               	subwf	___fttol@exp1,f
  1725  01E5  1FED               	btfss	___fttol@exp1,7
  1726  01E6  29F4               	goto	l4132
  1727  01E7  086D               	movf	___fttol@exp1,w
  1728  01E8  3A80               	xorlw	128
  1729  01E9  3E8F               	addlw	143
  1730  01EA  1C03               	btfss	3,0
  1731  01EB  29C9               	goto	l4110
  1732  01EC                     l4128:	
  1733  01EC  1003               	clrc
  1734  01ED  0CEC               	rrf	___fttol@lval+3,f
  1735  01EE  0CEB               	rrf	___fttol@lval+2,f
  1736  01EF  0CEA               	rrf	___fttol@lval+1,f
  1737  01F0  0CE9               	rrf	___fttol@lval,f
  1738  01F1  0FED               	incfsz	___fttol@exp1,f
  1739  01F2  29EC               	goto	l4128
  1740  01F3  2A02               	goto	l4140
  1741  01F4                     l4132:	
  1742  01F4  3018               	movlw	24
  1743  01F5  026D               	subwf	___fttol@exp1,w
  1744  01F6  1803               	btfsc	3,0
  1745  01F7  29C9               	goto	l4110
  1746  01F8                     l4138:	
  1747  01F8  086D               	movf	___fttol@exp1,w
  1748  01F9  1903               	btfsc	3,2
  1749  01FA  2A02               	goto	l4140
  1750  01FB  1003               	clrc
  1751  01FC  0DE9               	rlf	___fttol@lval,f
  1752  01FD  0DEA               	rlf	___fttol@lval+1,f
  1753  01FE  0DEB               	rlf	___fttol@lval+2,f
  1754  01FF  0DEC               	rlf	___fttol@lval+3,f
  1755  0200  03ED               	decf	___fttol@exp1,f
  1756  0201  29F8               	goto	l4138
  1757  0202                     l4140:	
  1758  0202  0868               	movf	___fttol@sign1,w
  1759  0203  1903               	btfsc	3,2
  1760  0204  2A10               	goto	l4144
  1761  0205  09E9               	comf	___fttol@lval,f
  1762  0206  09EA               	comf	___fttol@lval+1,f
  1763  0207  09EB               	comf	___fttol@lval+2,f
  1764  0208  09EC               	comf	___fttol@lval+3,f
  1765  0209  0AE9               	incf	___fttol@lval,f
  1766  020A  1903               	skipnz
  1767  020B  0AEA               	incf	___fttol@lval+1,f
  1768  020C  1903               	skipnz
  1769  020D  0AEB               	incf	___fttol@lval+2,f
  1770  020E  1903               	skipnz
  1771  020F  0AEC               	incf	___fttol@lval+3,f
  1772  0210                     l4144:	
  1773  0210  086C               	movf	___fttol@lval+3,w
  1774  0211  00E4               	movwf	?___fttol+3
  1775  0212  086B               	movf	___fttol@lval+2,w
  1776  0213  00E3               	movwf	?___fttol+2
  1777  0214  086A               	movf	___fttol@lval+1,w
  1778  0215  00E2               	movwf	?___fttol+1
  1779  0216  0869               	movf	___fttol@lval,w
  1780  0217  00E1               	movwf	?___fttol
  1781  0218  0008               	return
  1782  0219                     __end_of___fttol:	
  1783  0219                     __ptext12:	
  1784 ;; *************** function ___lwtoft *****************
  1785 ;; Defined at:
  1786 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;  c               2    3[BANK0 ] unsigned int 
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;		None
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  3    3[BANK0 ] float 
  1793 ;; Registers used:
  1794 ;;		wreg, status,2, status,0, pclath, cstack
  1795 ;; Tracked objects:
  1796 ;;		On entry : 300/0
  1797 ;;		On exit  : 300/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1800 ;;      Params:         0       3       0       0
  1801 ;;      Locals:         0       0       0       0
  1802 ;;      Temps:          0       0       0       0
  1803 ;;      Totals:         0       3       0       0
  1804 ;;Total ram usage:        3 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; Hardware stack levels required when called:    2
  1807 ;; This function calls:
  1808 ;;		___ftpack
  1809 ;; This function is called by:
  1810 ;;		_workCtr
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           
  1815                           ;psect for function ___lwtoft
  1816  0219                     ___lwtoft:	
  1817                           
  1818                           ;incstack = 0
  1819                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1820  0219  084F               	movf	___lwtoft@c,w
  1821  021A  00F2               	movwf	___ftpack@arg
  1822  021B  0850               	movf	___lwtoft@c+1,w
  1823  021C  00F3               	movwf	___ftpack@arg+1
  1824  021D  308E               	movlw	142
  1825  021E  01F4               	clrf	___ftpack@arg+2
  1826  021F  00F5               	movwf	___ftpack@exp
  1827  0220  01F6               	clrf	___ftpack@sign
  1828  0221  2229               	fcall	___ftpack
  1829  0222  0872               	movf	?___ftpack,w
  1830  0223  00CF               	movwf	?___lwtoft
  1831  0224  0873               	movf	?___ftpack+1,w
  1832  0225  00D0               	movwf	?___lwtoft+1
  1833  0226  0874               	movf	?___ftpack+2,w
  1834  0227  00D1               	movwf	?___lwtoft+2
  1835  0228  0008               	return
  1836  0229                     __end_of___lwtoft:	
  1837  0229                     __ptext15:	
  1838 ;; *************** function ___ftpack *****************
  1839 ;; Defined at:
  1840 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;  arg             3    2[COMMON] unsigned um
  1843 ;;  exp             1    5[COMMON] unsigned char 
  1844 ;;  sign            1    6[COMMON] unsigned char 
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;		None
  1847 ;; Return value:  Size  Location     Type
  1848 ;;                  3    2[COMMON] float 
  1849 ;; Registers used:
  1850 ;;		wreg, status,2, status,0
  1851 ;; Tracked objects:
  1852 ;;		On entry : 300/0
  1853 ;;		On exit  : 300/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1856 ;;      Params:         5       0       0       0
  1857 ;;      Locals:         0       0       0       0
  1858 ;;      Temps:          0       3       0       0
  1859 ;;      Totals:         5       3       0       0
  1860 ;;Total ram usage:        8 bytes
  1861 ;; Hardware stack levels used:    1
  1862 ;; Hardware stack levels required when called:    1
  1863 ;; This function calls:
  1864 ;;		Nothing
  1865 ;; This function is called by:
  1866 ;;		___ftdiv
  1867 ;;		___lwtoft
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           
  1872                           ;psect for function ___ftpack
  1873  0229                     ___ftpack:	
  1874                           
  1875                           ;incstack = 0
  1876                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1877  0229  0875               	movf	___ftpack@exp,w
  1878  022A  1903               	btfsc	3,2
  1879  022B  2A31               	goto	l1452
  1880  022C  0874               	movf	___ftpack@arg+2,w
  1881  022D  0473               	iorwf	___ftpack@arg+1,w
  1882  022E  0472               	iorwf	___ftpack@arg,w
  1883  022F  1D03               	skipz
  1884  0230  2A38               	goto	l3774
  1885  0231                     l1452:	
  1886  0231  01F2               	clrf	?___ftpack
  1887  0232  01F3               	clrf	?___ftpack+1
  1888  0233  01F4               	clrf	?___ftpack+2
  1889  0234  0008               	return
  1890  0235                     l3772:	
  1891  0235  0AF5               	incf	___ftpack@exp,f
  1892  0236  23F0  118A         	fcall	PL32	;call to abstracted procedure
  1893  0238                     l3774:	
  1894  0238  30FE               	movlw	254
  1895  0239  0574               	andwf	___ftpack@arg+2,w
  1896  023A  1903               	btfsc	3,2
  1897  023B  2A45               	goto	l3778
  1898  023C  2A35               	goto	l3772
  1899  023D                     l3776:	
  1900  023D  0AF5               	incf	___ftpack@exp,f
  1901  023E  0AF2               	incf	___ftpack@arg,f
  1902  023F  1903               	skipnz
  1903  0240  0AF3               	incf	___ftpack@arg+1,f
  1904  0241  1903               	skipnz
  1905  0242  0AF4               	incf	___ftpack@arg+2,f
  1906  0243  23F0  118A         	fcall	PL32	;call to abstracted procedure
  1907  0245                     l3778:	
  1908  0245  30FF               	movlw	255
  1909  0246  0574               	andwf	___ftpack@arg+2,w
  1910  0247  1903               	btfsc	3,2
  1911  0248  2A53               	goto	l3782
  1912  0249  2A3D               	goto	l3776
  1913  024A                     l3784:	
  1914  024A  3002               	movlw	2
  1915  024B  0275               	subwf	___ftpack@exp,w
  1916  024C  1C03               	btfss	3,0
  1917  024D  2A55               	goto	l1464
  1918  024E  03F5               	decf	___ftpack@exp,f
  1919  024F  1003               	clrc
  1920  0250  0DF2               	rlf	___ftpack@arg,f
  1921  0251  0DF3               	rlf	___ftpack@arg+1,f
  1922  0252  0DF4               	rlf	___ftpack@arg+2,f
  1923  0253                     l3782:	
  1924  0253  1FF3               	btfss	___ftpack@arg+1,7
  1925  0254  2A4A               	goto	l3784
  1926  0255                     l1464:	
  1927  0255  1C75               	btfss	___ftpack@exp,0
  1928  0256  13F3               	bcf	___ftpack@arg+1,7
  1929  0257  1003               	clrc
  1930  0258  0CF5               	rrf	___ftpack@exp,f
  1931  0259  0875               	movf	___ftpack@exp,w
  1932  025A  00CE               	movwf	??___ftpack+2
  1933  025B  01CD               	clrf	??___ftpack+1
  1934  025C  01CC               	clrf	??___ftpack
  1935  025D  084C               	movf	??___ftpack,w
  1936  025E  04F2               	iorwf	___ftpack@arg,f
  1937  025F  084D               	movf	??___ftpack+1,w
  1938  0260  04F3               	iorwf	___ftpack@arg+1,f
  1939  0261  084E               	movf	??___ftpack+2,w
  1940  0262  04F4               	iorwf	___ftpack@arg+2,f
  1941  0263  0876               	movf	___ftpack@sign,w
  1942  0264  1D03               	btfss	3,2
  1943  0265  17F4               	bsf	___ftpack@arg+2,7
  1944  0266  0008               	return
  1945  0267                     __end_of___ftpack:	
  1946  0267                     __ptext11:	
  1947 ;; *************** function _ADC_Sample *****************
  1948 ;; Defined at:
  1949 ;;		line 264 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;  adch            1    wreg     unsigned char 
  1952 ;;  adldo           1    2[COMMON] unsigned char 
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;  adch            1    1[BANK0 ] unsigned char 
  1955 ;;  j               1    0[BANK0 ] unsigned char 
  1956 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1957 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1958 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1959 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1960 ;;  i               1    2[BANK0 ] unsigned char 
  1961 ;; Return value:  Size  Location     Type
  1962 ;;                  1    wreg      unsigned char 
  1963 ;; Registers used:
  1964 ;;		wreg, status,2, status,0
  1965 ;; Tracked objects:
  1966 ;;		On entry : 300/0
  1967 ;;		On exit  : 300/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1970 ;;      Params:         1       0       0       0
  1971 ;;      Locals:         0      13       0       0
  1972 ;;      Temps:          4       0       0       0
  1973 ;;      Totals:         5      13       0       0
  1974 ;;Total ram usage:       18 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:    1
  1977 ;; This function calls:
  1978 ;;		Nothing
  1979 ;; This function is called by:
  1980 ;;		_fanCtr
  1981 ;;		_wuhuaCtr
  1982 ;;		_workCtr
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           
  1987                           ;psect for function _ADC_Sample
  1988  0267                     _ADC_Sample:	
  1989                           
  1990                           ;incstack = 0
  1991                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1992                           ;ADC_Sample@adch stored from wreg
  1993  0267  00CD               	movwf	ADC_Sample@adch
  1994                           
  1995                           ;main.c: 266: volatile unsigned long adsum = 0;
  1996                           
  1997                           ;main.c: 267: volatile unsigned int admin = 0, admax = 0;
  1998  0268  23E0  118A         	fcall	PL18	;call to abstracted procedure
  1999                           
  2000                           ;main.c: 268: volatile unsigned int ad_temp = 0;
  2001  026A  01D7               	clrf	ADC_Sample@ad_temp	;volatile
  2002  026B  01D8               	clrf	ADC_Sample@ad_temp+1	;volatile
  2003                           
  2004                           ;main.c: 270: if ((!LDO_EN) && (adldo & 0x04) )
  2005  026C  1683               	bsf	3,5	;RP0=1, select bank1
  2006  026D  1D16               	btfss	22,2	;volatile
  2007  026E  1D72               	btfss	ADC_Sample@adldo,2
  2008  026F  2A78               	goto	l3662
  2009                           
  2010                           ;main.c: 271: {
  2011                           ;main.c: 273: ADCON1 = adldo;
  2012  0270  0872               	movf	ADC_Sample@adldo,w
  2013  0271  0096               	movwf	22	;volatile
  2014                           
  2015                           ;main.c: 274: _delay((unsigned long)((100)*(8000000/4000000.0)));
  2016  0272  3042               	movlw	66
  2017  0273  00F3               	movwf	??_ADC_Sample
  2018  0274                     u4277:	
  2019  0274  0BF3               	decfsz	??_ADC_Sample,f
  2020  0275  2A74               	goto	u4277
  2021  0276  0000               	nop
  2022                           
  2023                           ;main.c: 275: }
  2024  0277  2A7A               	goto	l3664
  2025  0278                     l3662:	
  2026                           
  2027                           ;main.c: 276: else
  2028                           ;main.c: 277: ADCON1 = adldo;
  2029  0278  0872               	movf	ADC_Sample@adldo,w
  2030  0279  0096               	movwf	22	;volatile
  2031  027A                     l3664:	
  2032                           
  2033                           ;main.c: 279: if(adch & 0x10)
  2034  027A  1283               	bcf	3,5	;RP0=0, select bank0
  2035  027B  1303               	bcf	3,6	;RP1=0, select bank0
  2036  027C  1E4D               	btfss	ADC_Sample@adch,4
  2037  027D  2A83               	goto	l3672
  2038                           
  2039                           ;main.c: 280: {
  2040                           ;main.c: 281: CHS4 = 1;
  2041  027E  1683               	bsf	3,5	;RP0=1, select bank1
  2042  027F  1716               	bsf	22,6	;volatile
  2043                           
  2044                           ;main.c: 282: adch &= 0x0f;
  2045  0280  300F               	movlw	15
  2046  0281  1283               	bcf	3,5	;RP0=0, select bank0
  2047  0282  05CD               	andwf	ADC_Sample@adch,f
  2048  0283                     l3672:	
  2049                           
  2050                           ;main.c: 285: for (i = 0; i < 10; i++)
  2051  0283  01CE               	clrf	ADC_Sample@i
  2052  0284                     l3678:	
  2053                           
  2054                           ;main.c: 286: {
  2055                           ;main.c: 287: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2056  0284  084D               	movf	ADC_Sample@adch,w
  2057  0285  00F3               	movwf	??_ADC_Sample
  2058  0286  3001               	movlw	1
  2059  0287  1003               	clrc
  2060  0288                     L3:	
  2061  0288  0DF3               	rlf	??_ADC_Sample,f
  2062  0289  3EFF               	addlw	-1
  2063  028A  1003               	clrc
  2064  028B  1D03               	skipz
  2065  028C  2A88               	goto	L3
  2066  028D  0D73               	rlf	??_ADC_Sample,w
  2067  028E  3841               	iorlw	65
  2068  028F  1683               	bsf	3,5	;RP0=1, select bank1
  2069  0290  0095               	movwf	21	;volatile
  2070  0291  0000               	nop	;# 
  2071  0292  0000               	nop	;# 
  2072  0293  0000               	nop	;# 
  2073  0294  0000               	nop	;# 
  2074                           
  2075                           ;main.c: 292: GODONE = 1;
  2076  0295  1683               	bsf	3,5	;RP0=1, select bank1
  2077  0296  1303               	bcf	3,6	;RP1=0, select bank1
  2078  0297  1495               	bsf	21,1	;volatile
  2079                           
  2080                           ;main.c: 294: unsigned char j = 0;
  2081  0298  1283               	bcf	3,5	;RP0=0, select bank0
  2082  0299  01CC               	clrf	ADC_Sample@j
  2083  029A                     l968:	
  2084                           ;main.c: 295: while (GODONE)
  2085                           
  2086  029A  1683               	bsf	3,5	;RP0=1, select bank1
  2087  029B  1C95               	btfss	21,1	;volatile
  2088  029C  2AA4               	goto	l3688
  2089                           
  2090                           ;main.c: 296: {
  2091                           ;main.c: 297: _delay((unsigned long)((2)*(8000000/4000000.0)));
  2092  029D  2A9E               	nop2	;2 cycle nop
  2093  029E  2A9F               	nop2	;2 cycle nop
  2094                           
  2095                           ;main.c: 299: if (0 == (--j))
  2096  029F  1283               	bcf	3,5	;RP0=0, select bank0
  2097  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  2098  02A1  0BCC               	decfsz	ADC_Sample@j,f
  2099  02A2  2A9A               	goto	l968
  2100                           
  2101                           ;main.c: 300: return 0;
  2102  02A3  3400               	retlw	0
  2103  02A4                     l3688:	
  2104                           
  2105                           ;main.c: 301: }
  2106                           ;main.c: 303: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2107  02A4  0819               	movf	25,w	;volatile
  2108  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  2109  02A6  00D7               	movwf	ADC_Sample@ad_temp	;volatile
  2110  02A7  01D8               	clrf	ADC_Sample@ad_temp+1	;volatile
  2111  02A8  0ED7               	swapf	ADC_Sample@ad_temp,f	;volatile
  2112  02A9  0ED8               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2113  02AA  30F0               	movlw	240
  2114  02AB  05D8               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2115  02AC  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2116  02AD  390F               	andlw	15
  2117  02AE  04D8               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2118  02AF  30F0               	movlw	240
  2119  02B0  05D7               	andwf	ADC_Sample@ad_temp,f	;volatile
  2120  02B1  1683               	bsf	3,5	;RP0=1, select bank1
  2121  02B2  0E18               	swapf	24,w	;volatile
  2122  02B3  390F               	andlw	15
  2123  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  2124  02B5  07D7               	addwf	ADC_Sample@ad_temp,f	;volatile
  2125  02B6  1803               	skipnc
  2126  02B7  0AD8               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2127                           
  2128                           ;main.c: 305: if (0 == admax)
  2129  02B8  0855               	movf	ADC_Sample@admax,w	;volatile
  2130  02B9  0456               	iorwf	ADC_Sample@admax+1,w	;volatile
  2131  02BA  1D03               	btfss	3,2
  2132  02BB  2ABF               	goto	l3696
  2133                           
  2134                           ;main.c: 306: {
  2135                           ;main.c: 307: admax = ad_temp;
  2136  02BC  23F5  118A         	fcall	PL36	;call to abstracted procedure
  2137  02BE  2AD2               	goto	l3702
  2138  02BF                     l3696:	
  2139                           ;main.c: 309: }
  2140                           
  2141                           ;main.c: 308: admin = ad_temp;
  2142                           
  2143                           
  2144                           ;main.c: 310: else if (ad_temp > admax)
  2145  02BF  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2146  02C0  0256               	subwf	ADC_Sample@admax+1,w	;volatile
  2147  02C1  1D03               	skipz
  2148  02C2  2AC5               	goto	u3255
  2149  02C3  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2150  02C4  0255               	subwf	ADC_Sample@admax,w	;volatile
  2151  02C5                     u3255:	
  2152  02C5  1803               	skipnc
  2153  02C6  2ACA               	goto	l3700
  2154                           
  2155                           ;main.c: 311: admax = ad_temp;
  2156  02C7  23F5  118A         	fcall	PL36	;call to abstracted procedure
  2157  02C9  2AD6               	goto	l974
  2158  02CA                     l3700:	
  2159                           
  2160                           ;main.c: 312: else if (ad_temp < admin)
  2161  02CA  0854               	movf	ADC_Sample@admin+1,w	;volatile
  2162  02CB  0258               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2163  02CC  1D03               	skipz
  2164  02CD  2AD0               	goto	u3265
  2165  02CE  0853               	movf	ADC_Sample@admin,w	;volatile
  2166  02CF  0257               	subwf	ADC_Sample@ad_temp,w	;volatile
  2167  02D0                     u3265:	
  2168  02D0  1803               	skipnc
  2169  02D1  2AD6               	goto	l974
  2170  02D2                     l3702:	
  2171                           
  2172                           ;main.c: 313: admin = ad_temp;
  2173  02D2  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2174  02D3  00D4               	movwf	ADC_Sample@admin+1	;volatile
  2175  02D4  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2176  02D5  00D3               	movwf	ADC_Sample@admin	;volatile
  2177  02D6                     l974:	
  2178                           
  2179                           ;main.c: 315: adsum += ad_temp;
  2180  02D6  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2181  02D7  00F3               	movwf	??_ADC_Sample
  2182  02D8  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2183  02D9  00F4               	movwf	??_ADC_Sample+1
  2184  02DA  01F5               	clrf	??_ADC_Sample+2
  2185  02DB  01F6               	clrf	??_ADC_Sample+3
  2186  02DC  0873               	movf	??_ADC_Sample,w
  2187  02DD  07CF               	addwf	ADC_Sample@adsum,f	;volatile
  2188  02DE  0874               	movf	??_ADC_Sample+1,w
  2189  02DF  1103               	clrz
  2190  02E0  1803               	skipnc
  2191  02E1  3E01               	addlw	1
  2192  02E2  1D03               	btfss	3,2
  2193  02E3  07D0               	addwf	ADC_Sample@adsum+1,f	;volatile
  2194  02E4  0875               	movf	??_ADC_Sample+2,w
  2195  02E5  1103               	clrz
  2196  02E6  1803               	skipnc
  2197  02E7  3E01               	addlw	1
  2198  02E8  1D03               	btfss	3,2
  2199  02E9  07D1               	addwf	ADC_Sample@adsum+2,f	;volatile
  2200  02EA  0876               	movf	??_ADC_Sample+3,w
  2201  02EB  1103               	clrz
  2202  02EC  1803               	skipnc
  2203  02ED  3E01               	addlw	1
  2204  02EE  1D03               	btfss	3,2
  2205  02EF  07D2               	addwf	ADC_Sample@adsum+3,f	;volatile
  2206  02F0  300A               	movlw	10
  2207  02F1  0ACE               	incf	ADC_Sample@i,f
  2208  02F2  024E               	subwf	ADC_Sample@i,w
  2209  02F3  1C03               	skipc
  2210  02F4  2A84               	goto	l3678
  2211                           
  2212                           ;main.c: 316: }
  2213                           ;main.c: 317: adsum -= admax;
  2214  02F5  0855               	movf	ADC_Sample@admax,w	;volatile
  2215  02F6  00F3               	movwf	??_ADC_Sample
  2216  02F7  0856               	movf	ADC_Sample@admax+1,w	;volatile
  2217  02F8  23C4  118A         	fcall	PL6	;call to abstracted procedure
  2218  02FA  1C03               	skipc
  2219  02FB  0F76               	incfsz	??_ADC_Sample+3,w
  2220  02FC  02D2               	subwf	ADC_Sample@adsum+3,f	;volatile
  2221                           
  2222                           ;main.c: 318: if (adsum >= admin)
  2223  02FD  0853               	movf	ADC_Sample@admin,w	;volatile
  2224  02FE  00F3               	movwf	??_ADC_Sample
  2225  02FF  0854               	movf	ADC_Sample@admin+1,w	;volatile
  2226  0300  00F4               	movwf	??_ADC_Sample+1
  2227  0301  01F5               	clrf	??_ADC_Sample+2
  2228  0302  01F6               	clrf	??_ADC_Sample+3
  2229  0303  0876               	movf	??_ADC_Sample+3,w
  2230  0304  0252               	subwf	ADC_Sample@adsum+3,w	;volatile
  2231  0305  1D03               	skipz
  2232  0306  2B11               	goto	u3305
  2233  0307  0875               	movf	??_ADC_Sample+2,w
  2234  0308  0251               	subwf	ADC_Sample@adsum+2,w	;volatile
  2235  0309  1D03               	skipz
  2236  030A  2B11               	goto	u3305
  2237  030B  0874               	movf	??_ADC_Sample+1,w
  2238  030C  0250               	subwf	ADC_Sample@adsum+1,w	;volatile
  2239  030D  1D03               	skipz
  2240  030E  2B11               	goto	u3305
  2241  030F  0873               	movf	??_ADC_Sample,w
  2242  0310  024F               	subwf	ADC_Sample@adsum,w	;volatile
  2243  0311                     u3305:	
  2244  0311  1C03               	skipc
  2245  0312  2B1C               	goto	l978
  2246                           
  2247                           ;main.c: 319: adsum -= admin;
  2248  0313  0853               	movf	ADC_Sample@admin,w	;volatile
  2249  0314  00F3               	movwf	??_ADC_Sample
  2250  0315  0854               	movf	ADC_Sample@admin+1,w	;volatile
  2251  0316  23C4  118A         	fcall	PL6	;call to abstracted procedure
  2252  0318  1C03               	skipc
  2253  0319  0F76               	incfsz	??_ADC_Sample+3,w
  2254  031A  02D2               	subwf	ADC_Sample@adsum+3,f	;volatile
  2255  031B  2B20               	goto	l3712
  2256  031C                     l978:	
  2257                           
  2258                           ;main.c: 320: else
  2259                           ;main.c: 321: adsum = 0;
  2260  031C  01CF               	clrf	ADC_Sample@adsum	;volatile
  2261  031D  01D0               	clrf	ADC_Sample@adsum+1	;volatile
  2262  031E  01D1               	clrf	ADC_Sample@adsum+2	;volatile
  2263  031F  01D2               	clrf	ADC_Sample@adsum+3	;volatile
  2264  0320                     l3712:	
  2265                           
  2266                           ;main.c: 323: adresult = adsum >> 3;
  2267  0320  084F               	movf	ADC_Sample@adsum,w	;volatile
  2268  0321  00F3               	movwf	??_ADC_Sample
  2269  0322  0850               	movf	ADC_Sample@adsum+1,w	;volatile
  2270  0323  00F4               	movwf	??_ADC_Sample+1
  2271  0324  0851               	movf	ADC_Sample@adsum+2,w	;volatile
  2272  0325  00F5               	movwf	??_ADC_Sample+2
  2273  0326  0852               	movf	ADC_Sample@adsum+3,w	;volatile
  2274  0327  00F6               	movwf	??_ADC_Sample+3
  2275  0328  3003               	movlw	3
  2276  0329                     u3325:	
  2277  0329  1003               	clrc
  2278  032A  0CF6               	rrf	??_ADC_Sample+3,f
  2279  032B  0CF5               	rrf	??_ADC_Sample+2,f
  2280  032C  0CF4               	rrf	??_ADC_Sample+1,f
  2281  032D  0CF3               	rrf	??_ADC_Sample,f
  2282  032E  3EFF               	addlw	-1
  2283  032F  1D03               	skipz
  2284  0330  2B29               	goto	u3325
  2285  0331  0874               	movf	??_ADC_Sample+1,w
  2286  0332  00CB               	movwf	_adresult+1	;volatile
  2287  0333  0873               	movf	??_ADC_Sample,w
  2288  0334  00CA               	movwf	_adresult	;volatile
  2289                           
  2290                           ;main.c: 325: adsum = 0;
  2291                           
  2292                           ;main.c: 326: admin = 0;
  2293                           
  2294                           ;main.c: 327: admax = 0;
  2295  0335  23E0               	fcall	PL18	;call to abstracted procedure
  2296                           
  2297                           ;main.c: 328: return 0xA5;
  2298  0336  34A5               	retlw	165
  2299  0337                     __end_of_ADC_Sample:	
  2300  0337                     __ptext5:	
  2301 ;; *************** function _keyLedCtr *****************
  2302 ;; Defined at:
  2303 ;;		line 371 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2304 ;; Parameters:    Size  Location     Type
  2305 ;;		None
  2306 ;; Auto vars:     Size  Location     Type
  2307 ;;		None
  2308 ;; Return value:  Size  Location     Type
  2309 ;;                  1    wreg      void 
  2310 ;; Registers used:
  2311 ;;		wreg, status,2, status,0, pclath, cstack
  2312 ;; Tracked objects:
  2313 ;;		On entry : 300/0
  2314 ;;		On exit  : 300/100
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2317 ;;      Params:         0       0       0       0
  2318 ;;      Locals:         0       0       0       0
  2319 ;;      Temps:          0       0       0       0
  2320 ;;      Totals:         0       0       0       0
  2321 ;;Total ram usage:        0 bytes
  2322 ;; Hardware stack levels used:    1
  2323 ;; Hardware stack levels required when called:    2
  2324 ;; This function calls:
  2325 ;;		___lwmod
  2326 ;; This function is called by:
  2327 ;;		_workCtr
  2328 ;; This function uses a non-reentrant model
  2329 ;;
  2330                           
  2331                           
  2332                           ;psect for function _keyLedCtr
  2333  0337                     _keyLedCtr:	
  2334                           
  2335                           ;main.c: 373: if(shanshuoTime > 0)
  2336                           
  2337                           ;incstack = 0
  2338                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2339  0337  0832               	movf	_shanshuoTime,w
  2340  0338  0433               	iorwf	_shanshuoTime+1,w
  2341  0339  1903               	btfsc	3,2
  2342  033A  2B54               	goto	l3906
  2343                           
  2344                           ;main.c: 374: {
  2345                           ;main.c: 375: shanshuoTime--;
  2346  033B  3001               	movlw	1
  2347  033C  02B2               	subwf	_shanshuoTime,f
  2348  033D  3000               	movlw	0
  2349  033E  1C03               	skipc
  2350  033F  03B3               	decf	_shanshuoTime+1,f
  2351  0340  02B3               	subwf	_shanshuoTime+1,f
  2352                           
  2353                           ;main.c: 376: if((shanshuoTime % 150) < 75)
  2354  0341  3096               	movlw	150
  2355  0342  00F2               	movwf	___lwmod@divisor
  2356  0343  01F3               	clrf	___lwmod@divisor+1
  2357  0344  0833               	movf	_shanshuoTime+1,w
  2358  0345  00F5               	movwf	___lwmod@dividend+1
  2359  0346  0832               	movf	_shanshuoTime,w
  2360  0347  00F4               	movwf	___lwmod@dividend
  2361  0348  237E  118A         	fcall	___lwmod
  2362  034A  3000               	movlw	0
  2363  034B  0273               	subwf	?___lwmod+1,w
  2364  034C  304B               	movlw	75
  2365  034D  1903               	skipnz
  2366  034E  0272               	subwf	?___lwmod,w
  2367  034F  1803               	skipnc
  2368  0350  2B57               	goto	l996
  2369  0351                     l3904:	
  2370                           
  2371                           ;main.c: 377: {
  2372                           ;main.c: 378: PORTA |= 0x01;
  2373  0351  1683               	bsf	3,5	;RP0=1, select bank1
  2374  0352  1406               	bsf	6,0	;volatile
  2375                           
  2376                           ;main.c: 379: }
  2377  0353  2B59               	goto	l3910
  2378  0354                     l3906:	
  2379                           
  2380                           ;main.c: 385: else if(workStep > 0)
  2381  0354  087B               	movf	_workStep,w
  2382  0355  1903               	btfsc	3,2
  2383  0356  2B51               	goto	l3904
  2384  0357                     l996:	
  2385                           
  2386                           ;main.c: 380: else
  2387                           ;main.c: 381: {
  2388                           ;main.c: 382: PORTA &= 0xFE;
  2389  0357  1683               	bsf	3,5	;RP0=1, select bank1
  2390  0358  1006               	bcf	6,0	;volatile
  2391  0359                     l3910:	
  2392                           
  2393                           ;main.c: 392: }
  2394                           ;main.c: 394: if(shanshuoTime2 > 0)
  2395  0359  1283               	bcf	3,5	;RP0=0, select bank0
  2396  035A  0830               	movf	_shanshuoTime2,w
  2397  035B  0431               	iorwf	_shanshuoTime2+1,w
  2398  035C  1903               	btfsc	3,2
  2399  035D  2B7A               	goto	l3918
  2400                           
  2401                           ;main.c: 395: {
  2402                           ;main.c: 396: shanshuoTime2--;
  2403  035E  3001               	movlw	1
  2404  035F  02B0               	subwf	_shanshuoTime2,f
  2405  0360  3000               	movlw	0
  2406  0361  1C03               	skipc
  2407  0362  03B1               	decf	_shanshuoTime2+1,f
  2408  0363  02B1               	subwf	_shanshuoTime2+1,f
  2409                           
  2410                           ;main.c: 397: if((shanshuoTime2 % 150) < 75)
  2411  0364  3096               	movlw	150
  2412  0365  00F2               	movwf	___lwmod@divisor
  2413  0366  01F3               	clrf	___lwmod@divisor+1
  2414  0367  0831               	movf	_shanshuoTime2+1,w
  2415  0368  00F5               	movwf	___lwmod@dividend+1
  2416  0369  0830               	movf	_shanshuoTime2,w
  2417  036A  00F4               	movwf	___lwmod@dividend
  2418  036B  237E  118A         	fcall	___lwmod
  2419  036D  3000               	movlw	0
  2420  036E  0273               	subwf	?___lwmod+1,w
  2421  036F  304B               	movlw	75
  2422  0370  1903               	skipnz
  2423  0371  0272               	subwf	?___lwmod,w
  2424  0372  1803               	skipnc
  2425  0373  2B77               	goto	l1002
  2426  0374                     l3916:	
  2427                           
  2428                           ;main.c: 398: {
  2429                           ;main.c: 399: PORTA |= 0x10;
  2430  0374  1683               	bsf	3,5	;RP0=1, select bank1
  2431  0375  1606               	bsf	6,4	;volatile
  2432                           
  2433                           ;main.c: 400: }
  2434  0376  0008               	return
  2435  0377                     l1002:	
  2436                           
  2437                           ;main.c: 401: else
  2438                           ;main.c: 402: {
  2439                           ;main.c: 403: PORTA &= 0xEF;
  2440  0377  1683               	bsf	3,5	;RP0=1, select bank1
  2441  0378  1206               	bcf	6,4	;volatile
  2442  0379  0008               	return
  2443  037A                     l3918:	
  2444                           
  2445                           ;main.c: 406: else if(wuhuaFlag > 0)
  2446  037A  0847               	movf	_wuhuaFlag,w
  2447  037B  1D03               	btfss	3,2
  2448  037C  2B77               	goto	l1002
  2449  037D  2B74               	goto	l3916
  2450  037E                     __end_of_keyLedCtr:	
  2451  037E                     __ptext6:	
  2452 ;; *************** function ___lwmod *****************
  2453 ;; Defined at:
  2454 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;  divisor         2    2[COMMON] unsigned int 
  2457 ;;  dividend        2    4[COMMON] unsigned int 
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;  counter         1    6[COMMON] unsigned char 
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  2    2[COMMON] unsigned int 
  2462 ;; Registers used:
  2463 ;;		wreg, status,2, status,0
  2464 ;; Tracked objects:
  2465 ;;		On entry : 300/0
  2466 ;;		On exit  : 300/0
  2467 ;;		Unchanged: 300/0
  2468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2469 ;;      Params:         4       0       0       0
  2470 ;;      Locals:         1       0       0       0
  2471 ;;      Temps:          0       0       0       0
  2472 ;;      Totals:         5       0       0       0
  2473 ;;Total ram usage:        5 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    1
  2476 ;; This function calls:
  2477 ;;		Nothing
  2478 ;; This function is called by:
  2479 ;;		_keyLedCtr
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           
  2484                           ;psect for function ___lwmod
  2485  037E                     ___lwmod:	
  2486                           
  2487                           ;incstack = 0
  2488                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2489  037E  0872               	movf	___lwmod@divisor,w
  2490  037F  0473               	iorwf	___lwmod@divisor+1,w
  2491  0380  1903               	btfsc	3,2
  2492  0381  2B9D               	goto	l3808
  2493  0382  01F6               	clrf	___lwmod@counter
  2494  0383                     L1:	
  2495  0383  0AF6               	incf	___lwmod@counter,f
  2496  0384  1BF3               	btfsc	___lwmod@divisor+1,7
  2497  0385  2B8A               	goto	l3800
  2498  0386  1003               	clrc
  2499  0387  0DF2               	rlf	___lwmod@divisor,f
  2500  0388  0DF3               	rlf	___lwmod@divisor+1,f
  2501  0389  2B83               	goto	L1
  2502  038A                     l3800:	
  2503  038A  0873               	movf	___lwmod@divisor+1,w
  2504  038B  0275               	subwf	___lwmod@dividend+1,w
  2505  038C  1D03               	skipz
  2506  038D  2B90               	goto	u3465
  2507  038E  0872               	movf	___lwmod@divisor,w
  2508  038F  0274               	subwf	___lwmod@dividend,w
  2509  0390                     u3465:	
  2510  0390  1C03               	skipc
  2511  0391  2B99               	goto	L2
  2512  0392  0872               	movf	___lwmod@divisor,w
  2513  0393  02F4               	subwf	___lwmod@dividend,f
  2514  0394  0873               	movf	___lwmod@divisor+1,w
  2515  0395  1C03               	skipc
  2516  0396  03F5               	decf	___lwmod@dividend+1,f
  2517  0397  02F5               	subwf	___lwmod@dividend+1,f
  2518  0398  1003               	clrc
  2519  0399                     L2:	
  2520  0399  0CF3               	rrf	___lwmod@divisor+1,f
  2521  039A  0CF2               	rrf	___lwmod@divisor,f
  2522  039B  0BF6               	decfsz	___lwmod@counter,f
  2523  039C  2B8A               	goto	l3800
  2524  039D                     l3808:	
  2525  039D  0875               	movf	___lwmod@dividend+1,w
  2526  039E  00F3               	movwf	?___lwmod+1
  2527  039F  0874               	movf	___lwmod@dividend,w
  2528  03A0  00F2               	movwf	?___lwmod
  2529  03A1  0008               	return
  2530  03A2                     __end_of___lwmod:	
  2531  03A2                     __ptext4:	
  2532 ;; *************** function _pwmInit *****************
  2533 ;; Defined at:
  2534 ;;		line 417 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;		None
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;		None
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  1    wreg      void 
  2541 ;; Registers used:
  2542 ;;		wreg, status,2, status,0
  2543 ;; Tracked objects:
  2544 ;;		On entry : 300/0
  2545 ;;		On exit  : 300/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2548 ;;      Params:         0       0       0       0
  2549 ;;      Locals:         0       0       0       0
  2550 ;;      Temps:          0       0       0       0
  2551 ;;      Totals:         0       0       0       0
  2552 ;;Total ram usage:        0 bytes
  2553 ;; Hardware stack levels used:    1
  2554 ;; Hardware stack levels required when called:    1
  2555 ;; This function calls:
  2556 ;;		Nothing
  2557 ;; This function is called by:
  2558 ;;		_wuhuaCtr
  2559 ;; This function uses a non-reentrant model
  2560 ;;
  2561                           
  2562                           
  2563                           ;psect for function _pwmInit
  2564  03A2                     _pwmInit:	
  2565                           
  2566                           ;main.c: 420: PWMTH = 0x00;
  2567                           
  2568                           ;incstack = 0
  2569                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2570  03A2  0198               	clrf	24	;volatile
  2571                           
  2572                           ;main.c: 421: PWMTL = 73;
  2573  03A3  3049               	movlw	73
  2574  03A4  0097               	movwf	23	;volatile
  2575                           
  2576                           ;main.c: 422: PWMD01H = 0x00;
  2577  03A5  019E               	clrf	30	;volatile
  2578                           
  2579                           ;main.c: 423: PWMD0L = 32;
  2580  03A6  3020               	movlw	32
  2581  03A7  0099               	movwf	25	;volatile
  2582                           
  2583                           ;main.c: 424: PWMCON1 = 0x40;
  2584  03A8  3040               	movlw	64
  2585  03A9  0096               	movwf	22	;volatile
  2586                           
  2587                           ;main.c: 425: PWMCON2 = 0x00;
  2588  03AA  019D               	clrf	29	;volatile
  2589                           
  2590                           ;main.c: 426: PWMCON0 |= 0x21;
  2591  03AB  3021               	movlw	33
  2592  03AC  0495               	iorwf	21,f	;volatile
  2593  03AD  0008               	return
  2594  03AE                     __end_of_pwmInit:	
  2595  03AE                     __ptext9:	
  2596 ;; *************** function _fanInit *****************
  2597 ;; Defined at:
  2598 ;;		line 436 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;		None
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;		None
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      void 
  2605 ;; Registers used:
  2606 ;;		wreg, status,2, status,0
  2607 ;; Tracked objects:
  2608 ;;		On entry : 300/0
  2609 ;;		On exit  : 300/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2612 ;;      Params:         0       0       0       0
  2613 ;;      Locals:         0       0       0       0
  2614 ;;      Temps:          0       0       0       0
  2615 ;;      Totals:         0       0       0       0
  2616 ;;Total ram usage:        0 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    1
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_fanCtr
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           
  2627                           ;psect for function _fanInit
  2628  03AE                     _fanInit:	
  2629  03AE                     l3740:	
  2630                           ;incstack = 0
  2631                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2632                           
  2633                           
  2634                           ;main.c: 439: PWMTH = 0x00;
  2635  03AE  0198               	clrf	24	;volatile
  2636                           
  2637                           ;main.c: 440: PWMTL = 73;
  2638  03AF  3049               	movlw	73
  2639  03B0  0097               	movwf	23	;volatile
  2640                           
  2641                           ;main.c: 441: PWMD01H = 0x00;
  2642  03B1  019E               	clrf	30	;volatile
  2643                           
  2644                           ;main.c: 442: PWMD1L = fanDuty;
  2645  03B2  0846               	movf	_fanDuty,w
  2646  03B3  009A               	movwf	26	;volatile
  2647                           
  2648                           ;main.c: 443: PWMCON1 = 0x40;
  2649  03B4  3040               	movlw	64
  2650  03B5  0096               	movwf	22	;volatile
  2651                           
  2652                           ;main.c: 444: PWMCON2 = 0x00;
  2653  03B6  019D               	clrf	29	;volatile
  2654                           
  2655                           ;main.c: 445: PWMCON0 |= 0x22;
  2656  03B7  3022               	movlw	34
  2657  03B8  0495               	iorwf	21,f	;volatile
  2658  03B9  0008               	return
  2659  03BA                     __end_of_fanInit:	
  2660  03BA                     __ptext8:	
  2661 ;; *************** function _fanStop *****************
  2662 ;; Defined at:
  2663 ;;		line 448 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;		None
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;		None
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  1    wreg      void 
  2670 ;; Registers used:
  2671 ;;		status,2
  2672 ;; Tracked objects:
  2673 ;;		On entry : 300/100
  2674 ;;		On exit  : 300/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2677 ;;      Params:         0       0       0       0
  2678 ;;      Locals:         0       0       0       0
  2679 ;;      Temps:          0       0       0       0
  2680 ;;      Totals:         0       0       0       0
  2681 ;;Total ram usage:        0 bytes
  2682 ;; Hardware stack levels used:    1
  2683 ;; Hardware stack levels required when called:    1
  2684 ;; This function calls:
  2685 ;;		Nothing
  2686 ;; This function is called by:
  2687 ;;		_fanCtr
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           
  2692                           ;psect for function _fanStop
  2693  03BA                     _fanStop:	
  2694                           
  2695                           ;main.c: 450: PWMD1L = 0;
  2696                           
  2697                           ;incstack = 0
  2698                           ; Regs used in _fanStop: [status,2]
  2699  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  2700  03BB  019A               	clrf	26	;volatile
  2701                           
  2702                           ;main.c: 451: PWMCON0 &= 0xFD;
  2703  03BC  1095               	bcf	21,1	;volatile
  2704                           
  2705                           ;main.c: 452: PORTB &= 0x7F;
  2706  03BD  1386               	bcf	6,7	;volatile
  2707  03BE  0008               	return
  2708  03BF                     __end_of_fanStop:	
  2709  03BF                     __ptext3:	
  2710 ;; *************** function _pwmStop *****************
  2711 ;; Defined at:
  2712 ;;		line 429 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;		None
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;		None
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  1    wreg      void 
  2719 ;; Registers used:
  2720 ;;		status,2
  2721 ;; Tracked objects:
  2722 ;;		On entry : 300/0
  2723 ;;		On exit  : 300/100
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2726 ;;      Params:         0       0       0       0
  2727 ;;      Locals:         0       0       0       0
  2728 ;;      Temps:          0       0       0       0
  2729 ;;      Totals:         0       0       0       0
  2730 ;;Total ram usage:        0 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    1
  2733 ;; This function calls:
  2734 ;;		Nothing
  2735 ;; This function is called by:
  2736 ;;		_wuhuaCtr
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           
  2741                           ;psect for function _pwmStop
  2742  03BF                     _pwmStop:	
  2743  03BF                     l3734:	
  2744                           ;incstack = 0
  2745                           ; Regs used in _pwmStop: [status,2]
  2746                           
  2747                           
  2748                           ;main.c: 431: PWMD0L = 0;
  2749  03BF  0199               	clrf	25	;volatile
  2750                           
  2751                           ;main.c: 432: PWMCON0 &= 0xFE;
  2752  03C0  1015               	bcf	21,0	;volatile
  2753                           
  2754                           ;main.c: 433: PORTA &= 0xDF;
  2755  03C1  1683               	bsf	3,5	;RP0=1, select bank1
  2756  03C2  1286               	bcf	6,5	;volatile
  2757  03C3  0008               	return
  2758  03C4                     __end_of_pwmStop:	
  2759  03C4                     PL6:	
  2760  03C4  00F4               	movwf	??_ADC_Sample+1
  2761  03C5  01F5               	clrf	??_ADC_Sample+2
  2762  03C6  01F6               	clrf	??_ADC_Sample+3
  2763  03C7  0873               	movf	??_ADC_Sample,w
  2764  03C8  02CF               	subwf	ADC_Sample@adsum,f	;volatile
  2765  03C9  0874               	movf	??_ADC_Sample+1,w
  2766  03CA  1C03               	skipc
  2767  03CB  0F74               	incfsz	??_ADC_Sample+1,w
  2768  03CC  02D0               	subwf	ADC_Sample@adsum+1,f	;volatile
  2769  03CD  0875               	movf	??_ADC_Sample+2,w
  2770  03CE  1C03               	skipc
  2771  03CF  0F75               	incfsz	??_ADC_Sample+2,w
  2772  03D0  02D1               	subwf	ADC_Sample@adsum+2,f	;volatile
  2773  03D1  0876               	movf	??_ADC_Sample+3,w
  2774  03D2  0008               	return
  2775  03D3                     __end_ofPL6:	
  2776  03D3                     PL10:	
  2777  03D3  084A               	movf	_adresult,w	;volatile
  2778  03D4  00CC               	movwf	___lmul@multiplier
  2779  03D5  084B               	movf	_adresult+1,w	;volatile
  2780  03D6  00CD               	movwf	___lmul@multiplier+1
  2781  03D7  01CE               	clrf	___lmul@multiplier+2
  2782  03D8  01CF               	clrf	___lmul@multiplier+3
  2783  03D9  082E               	movf	_power_ad,w	;volatile
  2784  03DA  00D0               	movwf	___lmul@multiplicand
  2785  03DB  082F               	movf	_power_ad+1,w	;volatile
  2786  03DC  00D1               	movwf	___lmul@multiplicand+1
  2787  03DD  01D2               	clrf	___lmul@multiplicand+2
  2788  03DE  01D3               	clrf	___lmul@multiplicand+3
  2789  03DF  0008               	return
  2790  03E0                     __end_ofPL10:	
  2791  03E0                     PL18:	
  2792  03E0  01CF               	clrf	ADC_Sample@adsum	;volatile
  2793  03E1  01D0               	clrf	ADC_Sample@adsum+1	;volatile
  2794  03E2  01D1               	clrf	ADC_Sample@adsum+2	;volatile
  2795  03E3  01D2               	clrf	ADC_Sample@adsum+3	;volatile
  2796  03E4  01D3               	clrf	ADC_Sample@admin	;volatile
  2797  03E5  01D4               	clrf	ADC_Sample@admin+1	;volatile
  2798  03E6  01D5               	clrf	ADC_Sample@admax	;volatile
  2799  03E7  01D6               	clrf	ADC_Sample@admax+1	;volatile
  2800  03E8  0008               	return
  2801  03E9                     __end_ofPL18:	
  2802  03E9                     PL26:	
  2803  03E9  0861               	movf	___fttol@f1,w
  2804  03EA  00E5               	movwf	??___fttol
  2805  03EB  0862               	movf	___fttol@f1+1,w
  2806  03EC  00E6               	movwf	??___fttol+1
  2807  03ED  0863               	movf	___fttol@f1+2,w
  2808  03EE  00E7               	movwf	??___fttol+2
  2809  03EF  0008               	return
  2810  03F0                     __end_ofPL26:	
  2811  03F0                     PL32:	
  2812  03F0  1003               	clrc
  2813  03F1  0CF4               	rrf	___ftpack@arg+2,f
  2814  03F2  0CF3               	rrf	___ftpack@arg+1,f
  2815  03F3  0CF2               	rrf	___ftpack@arg,f
  2816  03F4  0008               	return
  2817  03F5                     __end_ofPL32:	
  2818  03F5                     PL36:	
  2819  03F5  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2820  03F6  00D6               	movwf	ADC_Sample@admax+1	;volatile
  2821  03F7  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2822  03F8  00D5               	movwf	ADC_Sample@admax	;volatile
  2823  03F9  0008               	return
  2824  03FA                     __end_ofPL36:	
  2825  03FA                     PL38:	
  2826  03FA  01D2               	clrf	?___ftdiv
  2827  03FB  01D3               	clrf	?___ftdiv+1
  2828  03FC  01D4               	clrf	?___ftdiv+2
  2829  03FD  0008               	return
  2830  03FE                     __end_ofPL38:	
  2831                           
  2832                           	psect	text16
  2833  07D6                     __ptext16:	
  2834 ;; *************** function _chrgCtr *****************
  2835 ;; Defined at:
  2836 ;;		line 333 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;		None
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;		None
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  1    wreg      void 
  2843 ;; Registers used:
  2844 ;;		wreg, status,2, status,0
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 200/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2850 ;;      Params:         0       0       0       0
  2851 ;;      Locals:         0       0       0       0
  2852 ;;      Temps:          0       0       0       0
  2853 ;;      Totals:         0       0       0       0
  2854 ;;Total ram usage:        0 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:    1
  2857 ;; This function calls:
  2858 ;;		Nothing
  2859 ;; This function is called by:
  2860 ;;		_main
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           
  2865                           ;psect for function _chrgCtr
  2866  07D6                     _chrgCtr:	
  2867                           
  2868                           ;main.c: 335: if(PORTB & 0x01)
  2869                           
  2870                           ;incstack = 0
  2871                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  2872  07D6  1283               	bcf	3,5	;RP0=0, select bank0
  2873  07D7  1303               	bcf	3,6	;RP1=0, select bank0
  2874  07D8  1C06               	btfss	6,0	;volatile
  2875  07D9  2FF9               	goto	l3520
  2876                           
  2877                           ;main.c: 336: {
  2878                           ;main.c: 337: chrgFlag = 1;
  2879  07DA  01C3               	clrf	_chrgFlag
  2880  07DB  0AC3               	incf	_chrgFlag,f
  2881                           
  2882                           ;main.c: 338: firstLock = 0;
  2883  07DC  1683               	bsf	3,5	;RP0=1, select bank1
  2884  07DD  01B6               	clrf	_firstLock^(0+128)
  2885                           
  2886                           ;main.c: 339: lowBatLock = 0;
  2887  07DE  1283               	bcf	3,5	;RP0=0, select bank0
  2888  07DF  01C0               	clrf	_lowBatLock
  2889                           
  2890                           ;main.c: 340: if(PORTB & 0x10)
  2891  07E0  1E06               	btfss	6,4	;volatile
  2892  07E1  2FEB               	goto	l3514
  2893                           
  2894                           ;main.c: 341: {
  2895                           ;main.c: 342: if(++chrgFullTime > 200)
  2896  07E2  30C9               	movlw	201
  2897  07E3  0AC1               	incf	_chrgFullTime,f
  2898  07E4  0241               	subwf	_chrgFullTime,w
  2899  07E5  1C03               	skipc
  2900  07E6  2FEC               	goto	l3516
  2901                           
  2902                           ;main.c: 343: {
  2903                           ;main.c: 344: chrgFullTime = 0;
  2904  07E7  01C1               	clrf	_chrgFullTime
  2905                           
  2906                           ;main.c: 345: chrgFullFlag = 1;
  2907  07E8  01C2               	clrf	_chrgFullFlag
  2908  07E9  0AC2               	incf	_chrgFullFlag,f
  2909  07EA  2FEC               	goto	l3516
  2910  07EB                     l3514:	
  2911                           
  2912                           ;main.c: 348: else
  2913                           ;main.c: 349: {
  2914                           ;main.c: 350: chrgFullTime = 0;
  2915  07EB  01C1               	clrf	_chrgFullTime
  2916  07EC                     l3516:	
  2917                           
  2918                           ;main.c: 351: }
  2919                           ;main.c: 352: if(chrgFullFlag || count1s < 125)
  2920  07EC  0842               	movf	_chrgFullFlag,w
  2921  07ED  1D03               	btfss	3,2
  2922  07EE  2FF3               	goto	l988
  2923  07EF  307D               	movlw	125
  2924  07F0  0248               	subwf	_count1s,w
  2925  07F1  1803               	skipnc
  2926  07F2  2FF6               	goto	l986
  2927  07F3                     l988:	
  2928                           
  2929                           ;main.c: 353: {
  2930                           ;main.c: 354: RA1 = 0;
  2931  07F3  1683               	bsf	3,5	;RP0=1, select bank1
  2932  07F4  1086               	bcf	6,1	;volatile
  2933                           
  2934                           ;main.c: 355: }
  2935  07F5  0008               	return
  2936  07F6                     l986:	
  2937                           
  2938                           ;main.c: 356: else
  2939                           ;main.c: 357: {
  2940                           ;main.c: 358: RA1 = 1;
  2941  07F6  1683               	bsf	3,5	;RP0=1, select bank1
  2942  07F7  1486               	bsf	6,1	;volatile
  2943  07F8  0008               	return
  2944  07F9                     l3520:	
  2945                           
  2946                           ;main.c: 361: else
  2947                           ;main.c: 362: {
  2948                           ;main.c: 363: chrgFlag = 0;
  2949  07F9  01C3               	clrf	_chrgFlag
  2950                           
  2951                           ;main.c: 364: chrgFullTime = 0;
  2952  07FA  01C1               	clrf	_chrgFullTime
  2953                           
  2954                           ;main.c: 365: chrgFullFlag = 0;
  2955  07FB  01C2               	clrf	_chrgFullFlag
  2956                           
  2957                           ;main.c: 366: if(firstTime == 0)
  2958  07FC  086E               	movf	_firstTime,w
  2959  07FD  1D03               	btfss	3,2
  2960  07FE  0008               	return
  2961  07FF  2FF6               	goto	l986
  2962  0800                     __end_of_chrgCtr:	
  2963                           
  2964                           	psect	text20
  2965  0FB0                     __ptext20:	
  2966 ;; *************** function _KeyServer *****************
  2967 ;; Defined at:
  2968 ;;		line 99 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;		None
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;		None
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  1    wreg      void 
  2975 ;; Registers used:
  2976 ;;		wreg, status,2, status,0
  2977 ;; Tracked objects:
  2978 ;;		On entry : 300/0
  2979 ;;		On exit  : 300/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2982 ;;      Params:         0       0       0       0
  2983 ;;      Locals:         0       0       0       0
  2984 ;;      Temps:          0       0       0       0
  2985 ;;      Totals:         0       0       0       0
  2986 ;;Total ram usage:        0 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; Hardware stack levels required when called:    1
  2989 ;; This function calls:
  2990 ;;		Nothing
  2991 ;; This function is called by:
  2992 ;;		_main
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           
  2997                           ;psect for function _KeyServer
  2998  0FB0                     _KeyServer:	
  2999                           
  3000                           ;main.c: 101: static unsigned char KeyOldFlag = 0;
  3001                           ;main.c: 102: if (KeyFlag[0])
  3002                           
  3003                           ;incstack = 0
  3004                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3005  0FB0  0834               	movf	_KeyFlag,w	;volatile
  3006  0FB1  1903               	btfsc	3,2
  3007  0FB2  2FF9               	goto	l3458
  3008                           
  3009                           ;main.c: 103: {
  3010                           ;main.c: 104: if (KeyFlag[0] != KeyOldFlag)
  3011  0FB3  0834               	movf	_KeyFlag,w	;volatile
  3012  0FB4  063C               	xorwf	KeyServer@KeyOldFlag,w
  3013  0FB5  1903               	skipnz
  3014  0FB6  0008               	return
  3015                           
  3016                           ;main.c: 105: {
  3017                           ;main.c: 107: KeyOldFlag ^= KeyFlag[0];
  3018  0FB7  0834               	movf	_KeyFlag,w	;volatile
  3019  0FB8  06BC               	xorwf	KeyServer@KeyOldFlag,f
  3020                           
  3021                           ;main.c: 108: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0)
  3022  0FB9  183C               	btfsc	KeyServer@KeyOldFlag,0
  3023  0FBA  1C34               	btfss	_KeyFlag,0	;volatile
  3024  0FBB  2FD4               	goto	l3434
  3025  0FBC  1683               	bsf	3,5	;RP0=1, select bank1
  3026  0FBD  0836               	movf	_firstLock^(0+128),w
  3027  0FBE  1D03               	btfss	3,2
  3028  0FBF  2FD4               	goto	l3434
  3029                           
  3030                           ;main.c: 109: {
  3031                           ;main.c: 111: if(lowBatLock == 1)
  3032  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  3033  0FC1  0B40               	decfsz	_lowBatLock,w
  3034  0FC2  2FC6               	goto	l3424
  3035                           
  3036                           ;main.c: 112: {
  3037                           ;main.c: 113: shanshuoTime = 450;
  3038  0FC3  27FB  158A         	fcall	PL34	;call to abstracted procedure
  3039                           
  3040                           ;main.c: 114: }
  3041  0FC5  2FCB               	goto	l3428
  3042  0FC6                     l3424:	
  3043                           
  3044                           ;main.c: 115: else if(++workStep > 2)
  3045  0FC6  3003               	movlw	3
  3046  0FC7  0AFB               	incf	_workStep,f
  3047  0FC8  027B               	subwf	_workStep,w
  3048  0FC9  1803               	btfsc	3,0
  3049                           
  3050                           ;main.c: 116: {
  3051                           ;main.c: 117: workStep = 0;
  3052  0FCA  01FB               	clrf	_workStep
  3053  0FCB                     l3428:	
  3054                           
  3055                           ;main.c: 118: }
  3056                           ;main.c: 119: if(workStep == 2)
  3057  0FCB  3002               	movlw	2
  3058  0FCC  067B               	xorwf	_workStep,w
  3059  0FCD  1D03               	btfss	3,2
  3060  0FCE  2FD2               	goto	l3432
  3061                           
  3062                           ;main.c: 120: {
  3063                           ;main.c: 121: shanshuoTime = 450;
  3064  0FCF  27FB  158A         	fcall	PL34	;call to abstracted procedure
  3065                           
  3066                           ;main.c: 122: }
  3067  0FD1  2FD4               	goto	l3434
  3068  0FD2                     l3432:	
  3069                           
  3070                           ;main.c: 123: else
  3071                           ;main.c: 124: {
  3072                           ;main.c: 125: shanshuoTime = 0;
  3073  0FD2  01B2               	clrf	_shanshuoTime
  3074  0FD3  01B3               	clrf	_shanshuoTime+1
  3075  0FD4                     l3434:	
  3076                           
  3077                           ;main.c: 126: }
  3078                           ;main.c: 127: }
  3079                           ;main.c: 128: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0)
  3080  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  3081  0FD5  18BC               	btfsc	KeyServer@KeyOldFlag,1
  3082  0FD6  1CB4               	btfss	_KeyFlag,1	;volatile
  3083  0FD7  2FF5               	goto	l3456
  3084  0FD8  1683               	bsf	3,5	;RP0=1, select bank1
  3085  0FD9  0836               	movf	_firstLock^(0+128),w
  3086  0FDA  1D03               	btfss	3,2
  3087  0FDB  2FF5               	goto	l3456
  3088                           
  3089                           ;main.c: 129: {
  3090                           ;main.c: 131: if(lowBatLock == 1)
  3091  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  3092  0FDD  0B40               	decfsz	_lowBatLock,w
  3093  0FDE  2FE4               	goto	l3444
  3094                           
  3095                           ;main.c: 132: {
  3096                           ;main.c: 133: shanshuoTime2 = 450;
  3097  0FDF  30C2               	movlw	194
  3098  0FE0  00B0               	movwf	_shanshuoTime2
  3099  0FE1  3001               	movlw	1
  3100  0FE2  00B1               	movwf	_shanshuoTime2+1
  3101                           
  3102                           ;main.c: 134: }
  3103  0FE3  2FE9               	goto	l3448
  3104  0FE4                     l3444:	
  3105                           
  3106                           ;main.c: 135: else if(++wuhuaFlag > 2)
  3107  0FE4  3003               	movlw	3
  3108  0FE5  0AC7               	incf	_wuhuaFlag,f
  3109  0FE6  0247               	subwf	_wuhuaFlag,w
  3110  0FE7  1803               	btfsc	3,0
  3111                           
  3112                           ;main.c: 136: {
  3113                           ;main.c: 137: wuhuaFlag = 0;
  3114  0FE8  01C7               	clrf	_wuhuaFlag
  3115  0FE9                     l3448:	
  3116                           
  3117                           ;main.c: 138: }
  3118                           ;main.c: 139: if(wuhuaFlag == 2)
  3119  0FE9  3002               	movlw	2
  3120  0FEA  0647               	xorwf	_wuhuaFlag,w
  3121  0FEB  1D03               	btfss	3,2
  3122  0FEC  2FF3               	goto	l3454
  3123                           
  3124                           ;main.c: 140: {
  3125                           ;main.c: 141: shanshuoTime2 = 450;
  3126  0FED  30C2               	movlw	194
  3127  0FEE  00B0               	movwf	_shanshuoTime2
  3128  0FEF  3001               	movlw	1
  3129  0FF0  00B1               	movwf	_shanshuoTime2+1
  3130                           
  3131                           ;main.c: 142: count10s = 0;
  3132  0FF1  01C5               	clrf	_count10s
  3133                           
  3134                           ;main.c: 143: }
  3135  0FF2  2FF5               	goto	l3456
  3136  0FF3                     l3454:	
  3137                           
  3138                           ;main.c: 144: else
  3139                           ;main.c: 145: {
  3140                           ;main.c: 146: shanshuoTime2 = 0;
  3141  0FF3  01B0               	clrf	_shanshuoTime2
  3142  0FF4  01B1               	clrf	_shanshuoTime2+1
  3143  0FF5                     l3456:	
  3144                           
  3145                           ;main.c: 147: }
  3146                           ;main.c: 148: }
  3147                           ;main.c: 151: KeyOldFlag = KeyFlag[0];
  3148  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  3149  0FF6  0834               	movf	_KeyFlag,w	;volatile
  3150  0FF7  00BC               	movwf	KeyServer@KeyOldFlag
  3151  0FF8  0008               	return
  3152  0FF9                     l3458:	
  3153                           
  3154                           ;main.c: 154: else
  3155                           ;main.c: 155: {
  3156                           ;main.c: 156: KeyOldFlag = 0;
  3157  0FF9  01BC               	clrf	KeyServer@KeyOldFlag
  3158  0FFA  0008               	return
  3159  0FFB                     __end_of_KeyServer:	
  3160  0FFB                     PL34:	
  3161  0FFB  30C2               	movlw	194
  3162  0FFC  00B2               	movwf	_shanshuoTime
  3163  0FFD  3001               	movlw	1
  3164  0FFE  00B3               	movwf	_shanshuoTime+1
  3165  0FFF  0008               	return
  3166  1000                     __end_ofPL34:	
  3167                           
  3168                           	psect	text21
  3169  03FE                     __ptext21:	
  3170 ;; *************** function _Init_System *****************
  3171 ;; Defined at:
  3172 ;;		line 48 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;		None
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;		None
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      void 
  3179 ;; Registers used:
  3180 ;;		wreg, status,2
  3181 ;; Tracked objects:
  3182 ;;		On entry : B00/0
  3183 ;;		On exit  : 300/100
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3186 ;;      Params:         0       0       0       0
  3187 ;;      Locals:         0       0       0       0
  3188 ;;      Temps:          0       0       0       0
  3189 ;;      Totals:         0       0       0       0
  3190 ;;Total ram usage:        0 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    1
  3193 ;; This function calls:
  3194 ;;		Nothing
  3195 ;; This function is called by:
  3196 ;;		_main
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           
  3201                           ;psect for function _Init_System
  3202  03FE                     _Init_System:	
  3203                           
  3204                           ;incstack = 0
  3205                           ; Regs used in _Init_System: [wreg+status,2]
  3206  03FE  0000               	nop	;# 
  3207  03FF  0064               	clrwdt	;# 
  3208                           
  3209                           ;main.c: 52: INTCON = 0;
  3210  0400  018B               	clrf	11	;volatile
  3211                           
  3212                           ;main.c: 53: OSCCON = 0X72;
  3213  0401  3072               	movlw	114
  3214  0402  1283               	bcf	3,5	;RP0=0, select bank0
  3215  0403  1303               	bcf	3,6	;RP1=0, select bank0
  3216  0404  0094               	movwf	20	;volatile
  3217                           
  3218                           ;main.c: 54: OPTION_REG = 0;
  3219  0405  0181               	clrf	1	;volatile
  3220                           
  3221                           ;main.c: 59: TRISA = 0x08;
  3222  0406  3008               	movlw	8
  3223  0407  1683               	bsf	3,5	;RP0=1, select bank1
  3224  0408  0085               	movwf	5	;volatile
  3225                           
  3226                           ;main.c: 60: PORTA = 0;
  3227  0409  0186               	clrf	6	;volatile
  3228                           
  3229                           ;main.c: 61: TRISB = 0x31;
  3230  040A  3031               	movlw	49
  3231  040B  1283               	bcf	3,5	;RP0=0, select bank0
  3232  040C  0085               	movwf	5	;volatile
  3233                           
  3234                           ;main.c: 62: PORTB = 0;
  3235  040D  0186               	clrf	6	;volatile
  3236                           
  3237                           ;main.c: 63: WPUB = 0x10;
  3238  040E  3010               	movlw	16
  3239  040F  0088               	movwf	8	;volatile
  3240                           
  3241                           ;main.c: 64: TRISC = 0;
  3242  0410  1703               	bsf	3,6	;RP1=1, select bank2
  3243  0411  0185               	clrf	5	;volatile
  3244                           
  3245                           ;main.c: 65: PORTC = 0;
  3246  0412  0186               	clrf	6	;volatile
  3247                           
  3248                           ;main.c: 67: PIE1 = 2;
  3249  0413  3002               	movlw	2
  3250  0414  1303               	bcf	3,6	;RP1=0, select bank0
  3251  0415  008E               	movwf	14	;volatile
  3252                           
  3253                           ;main.c: 68: PR2 = 250;
  3254  0416  30FA               	movlw	250
  3255  0417  0091               	movwf	17	;volatile
  3256                           
  3257                           ;main.c: 69: T2CON = 4;
  3258  0418  3004               	movlw	4
  3259  0419  0093               	movwf	19	;volatile
  3260                           
  3261                           ;main.c: 71: INTCON = 0XC0;
  3262  041A  30C0               	movlw	192
  3263  041B  008B               	movwf	11	;volatile
  3264                           
  3265                           ;main.c: 72: ADCON0 = 0X41;
  3266                           
  3267                           ;main.c: 73: ADON = 1;
  3268                           
  3269                           ;main.c: 74: ADCON1 = 0x00;
  3270  041C  2FC0               	ljmp	PL24	;call to abstracted procedure
  3271  041D                     __end_of_Init_System:	
  3272  041D                     __ptext17:	
  3273 ;; *************** function _WorkSleep *****************
  3274 ;; Defined at:
  3275 ;;		line 186 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3276 ;; Parameters:    Size  Location     Type
  3277 ;;		None
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;		None
  3280 ;; Return value:  Size  Location     Type
  3281 ;;                  1    wreg      void 
  3282 ;; Registers used:
  3283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3284 ;; Tracked objects:
  3285 ;;		On entry : 300/0
  3286 ;;		On exit  : 200/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3289 ;;      Params:         0       0       0       0
  3290 ;;      Locals:         0       0       0       0
  3291 ;;      Temps:          0       0       0       0
  3292 ;;      Totals:         0       0       0       0
  3293 ;;Total ram usage:        0 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    4
  3296 ;; This function calls:
  3297 ;;		_Refurbish_Sfr
  3298 ;;		_SystemEnterSleep
  3299 ;; This function is called by:
  3300 ;;		_main
  3301 ;; This function uses a non-reentrant model
  3302 ;;
  3303                           
  3304                           
  3305                           ;psect for function _WorkSleep
  3306  041D                     _WorkSleep:	
  3307                           
  3308                           ;main.c: 189: static unsigned char time;
  3309                           ;main.c: 191: if(B_OnOff)time = 0;
  3310                           
  3311                           ;incstack = 0
  3312                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3313  041D  1AF8               	btfsc	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  3314  041E  01BB               	clrf	WorkSleep@time
  3315                           
  3316                           ;main.c: 193: if(++time >= 125)
  3317  041F  307D               	movlw	125
  3318  0420  0ABB               	incf	WorkSleep@time,f
  3319  0421  023B               	subwf	WorkSleep@time,w
  3320  0422  1C03               	skipc
  3321  0423  0008               	return
  3322                           
  3323                           ;main.c: 194: {
  3324                           ;main.c: 195: time = 0;
  3325  0424  01BB               	clrf	WorkSleep@time
  3326                           
  3327                           ;main.c: 196: INTCON = 0;
  3328  0425  018B               	clrf	11	;volatile
  3329                           
  3330                           ;main.c: 197: PIE1 = 0;
  3331  0426  018E               	clrf	14	;volatile
  3332                           
  3333                           ;main.c: 198: PIE2 = 0;
  3334  0427  1703               	bsf	3,6	;RP1=1, select bank2
  3335  0428  0190               	clrf	16	;volatile
  3336                           
  3337                           ;main.c: 199: PIR1 = 0;
  3338  0429  1303               	bcf	3,6	;RP1=0, select bank0
  3339  042A  018D               	clrf	13	;volatile
  3340                           
  3341                           ;main.c: 200: PIR2 = 0;
  3342  042B  1703               	bsf	3,6	;RP1=1, select bank2
  3343  042C  018F               	clrf	15	;volatile
  3344                           
  3345                           ;main.c: 201: T2CON = 0;
  3346  042D  1303               	bcf	3,6	;RP1=0, select bank0
  3347  042E  0193               	clrf	19	;volatile
  3348                           
  3349                           ;main.c: 202: ADCON1 = 0;
  3350  042F  1683               	bsf	3,5	;RP0=1, select bank1
  3351  0430  0196               	clrf	22	;volatile
  3352                           
  3353                           ;main.c: 205: ADCON0 = 0;
  3354  0431  0195               	clrf	21	;volatile
  3355                           
  3356                           ;main.c: 208: PORTA = 0x13;
  3357  0432  3013               	movlw	19
  3358  0433  0086               	movwf	6	;volatile
  3359                           
  3360                           ;main.c: 209: PORTB = 0x00;
  3361  0434  1283               	bcf	3,5	;RP0=0, select bank0
  3362  0435  0186               	clrf	6	;volatile
  3363                           
  3364                           ;main.c: 210: TRISC = 0;
  3365  0436  1703               	bsf	3,6	;RP1=1, select bank2
  3366  0437  0185               	clrf	5	;volatile
  3367                           
  3368                           ;main.c: 211: PORTC = 0;
  3369  0438  0186               	clrf	6	;volatile
  3370                           
  3371                           ;main.c: 213: TRISB0 =1;
  3372  0439  1303               	bcf	3,6	;RP1=0, select bank0
  3373  043A  1405               	bsf	5,0	;volatile
  3374                           
  3375                           ;main.c: 215: RBIF = 0;
  3376  043B  100B               	bcf	11,0	;volatile
  3377                           
  3378                           ;main.c: 216: RBIE = 1;
  3379  043C  158B               	bsf	11,3	;volatile
  3380                           
  3381                           ;main.c: 217: IOCB0= 1;
  3382  043D  1409               	bsf	9,0	;volatile
  3383                           
  3384                           ;main.c: 218: PORTB;
  3385  043E  0806               	movf	6,w	;volatile
  3386                           
  3387                           ;main.c: 230: SystemEnterSleep();
  3388  043F  2476  118A         	fcall	_SystemEnterSleep
  3389                           
  3390                           ;main.c: 231: if(RAIF)
  3391  0441  1D8D               	btfss	13,3	;volatile
  3392  0442  2C46               	goto	l4184
  3393                           
  3394                           ;main.c: 232: {
  3395                           ;main.c: 233: RAIF = 0;
  3396  0443  118D               	bcf	13,3	;volatile
  3397                           
  3398                           ;main.c: 234: PORTA;
  3399  0444  1683               	bsf	3,5	;RP0=1, select bank1
  3400  0445  0806               	movf	6,w	;volatile
  3401  0446                     l4184:	
  3402                           
  3403                           ;main.c: 235: }
  3404                           ;main.c: 237: Refurbish_Sfr();
  3405  0446  2760  118A         	fcall	_Refurbish_Sfr
  3406                           
  3407                           ;main.c: 238: ADCON0 = 0X41;
  3408                           
  3409                           ;main.c: 239: ADON = 1;
  3410                           
  3411                           ;main.c: 240: ADCON1 = 0x00;
  3412  0448  2FC0               	ljmp	PL24	;call to abstracted procedure
  3413  0449                     __end_of_WorkSleep:	
  3414  0449                     __ptext22:	
  3415 ;; *************** function _CheckTouchKey *****************
  3416 ;; Defined at:
  3417 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;		None
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  1    wreg      void 
  3424 ;; Registers used:
  3425 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3431 ;;      Params:         0       0       0       0
  3432 ;;      Locals:         0       0       0       0
  3433 ;;      Temps:          0       0       0       0
  3434 ;;      Totals:         0       0       0       0
  3435 ;;Total ram usage:        0 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    5
  3438 ;; This function calls:
  3439 ;;		_CheckKeyOldValue
  3440 ;;		_CheckOnceResult
  3441 ;;		_CheckValidTime
  3442 ;;		_ClearResSum
  3443 ;;		_GetTouchKeyValue
  3444 ;;		_KeyStopClear
  3445 ;;		_TurnKeyFlags
  3446 ;; This function is called by:
  3447 ;;		_main
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           
  3452                           ;psect for function _CheckTouchKey
  3453  0449                     _CheckTouchKey:	
  3454                           
  3455                           ;incstack = 0
  3456                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3457  0449  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3458  044A  2C57               	goto	l1265
  3459  044B  2506  118A         	fcall	_GetTouchKeyValue
  3460  044D  3008               	movlw	8
  3461  044E  1283               	bcf	3,5	;RP0=0, select bank0
  3462  044F  1303               	bcf	3,6	;RP1=0, select bank0
  3463  0450  0ABA               	incf	_KeyCounter,f
  3464  0451  023A               	subwf	_KeyCounter,w
  3465  0452  1C03               	skipc
  3466  0453  2C75               	goto	l4266
  3467  0454  01BA               	clrf	_KeyCounter
  3468  0455  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3469  0456  2C75               	goto	l4266
  3470  0457                     l1265:	
  3471  0457  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3472  0458  2C6F               	goto	l4260
  3473  0459  2575  118A         	fcall	_CheckOnceResult
  3474  045B  2707  118A         	fcall	_TurnKeyFlags
  3475  045D  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3476  045E  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  3477  045F  2C66               	goto	l4250
  3478  0460  3002               	movlw	2
  3479  0461  1283               	bcf	3,5	;RP0=0, select bank0
  3480  0462  1303               	bcf	3,6	;RP1=0, select bank0
  3481  0463  023A               	subwf	_KeyCounter,w
  3482  0464  1C03               	skipc
  3483  0465  2C6B               	goto	l4258
  3484  0466                     l4250:	
  3485  0466  26F1  118A         	fcall	_KeyStopClear
  3486  0468  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  3487  0469  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3488  046A  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3489  046B                     l4258:	
  3490  046B  1283               	bcf	3,5	;RP0=0, select bank0
  3491  046C  1303               	bcf	3,6	;RP1=0, select bank0
  3492  046D  01BA               	clrf	_KeyCounter
  3493  046E  2C75               	goto	l4266
  3494  046F                     l4260:	
  3495  046F  268D  118A         	fcall	_CheckKeyOldValue
  3496  0471  2566  118A         	fcall	_ClearResSum
  3497  0473  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3498  0474  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3499  0475                     l4266:	
  3500  0475  2F3A               	ljmp	l3284	;# 
  3501  0476                     __end_of_CheckTouchKey:	
  3502  0476                     __ptext18:	
  3503 ;; *************** function _SystemEnterSleep *****************
  3504 ;; Defined at:
  3505 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;		None
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  92              2    6[BANK0 ] unsigned int 
  3510 ;;  93              2    4[BANK0 ] unsigned int 
  3511 ;;  94              2    2[BANK0 ] unsigned int 
  3512 ;;  91              1    8[BANK0 ] unsigned char 
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  1    wreg      void 
  3515 ;; Registers used:
  3516 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3517 ;; Tracked objects:
  3518 ;;		On entry : 300/0
  3519 ;;		On exit  : 300/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3522 ;;      Params:         0       0       0       0
  3523 ;;      Locals:         0       7       0       0
  3524 ;;      Temps:          0       2       0       0
  3525 ;;      Totals:         0       9       0       0
  3526 ;;Total ram usage:        9 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    3
  3529 ;; This function calls:
  3530 ;;		_ClearResSum
  3531 ;;		_GetTouchKeyValue
  3532 ;;		_KeyClearOne
  3533 ;; This function is called by:
  3534 ;;		_WorkSleep
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           
  3539                           ;psect for function _SystemEnterSleep
  3540  0476                     _SystemEnterSleep:	
  3541  0476                     l1277:	
  3542                           ;incstack = 0
  3543                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3544                           
  3545  0476  0064               	clrwdt	;# 
  3546  0477  1683               	bsf	3,5	;RP0=1, select bank1
  3547  0478  1303               	bcf	3,6	;RP1=0, select bank1
  3548  0479  0181               	clrf	1	;volatile
  3549  047A  3007               	movlw	7
  3550  047B  1283               	bcf	3,5	;RP0=0, select bank0
  3551  047C  0481               	iorwf	1,f	;volatile
  3552  047D  1581               	bsf	1,3	;volatile
  3553  047E  0064               	clrwdt	;# 
  3554  047F  300A               	movlw	10
  3555  0480  1283               	bcf	3,5	;RP0=0, select bank0
  3556  0481  1303               	bcf	3,6	;RP1=0, select bank0
  3557  0482  0081               	movwf	1	;volatile
  3558  0483  0064               	clrwdt	;# 
  3559  0484  1283               	bcf	3,5	;RP0=0, select bank2
  3560  0485  1703               	bsf	3,6	;RP1=1, select bank2
  3561  0486  0191               	clrf	17	;volatile
  3562  0487  0193               	clrf	19	;volatile
  3563  0488  3002               	movlw	2
  3564  0489  1303               	bcf	3,6	;RP1=0, select bank0
  3565  048A  0094               	movwf	20	;volatile
  3566  048B  0063               	sleep	;# 
  3567  048C  0000               	nop	;# 
  3568  048D  0064               	clrwdt	;# 
  3569  048E  3072               	movlw	114
  3570  048F  1283               	bcf	3,5	;RP0=0, select bank0
  3571  0490  1303               	bcf	3,6	;RP1=0, select bank0
  3572  0491  0094               	movwf	20	;volatile
  3573  0492  3079               	movlw	121
  3574  0493  1703               	bsf	3,6	;RP1=1, select bank2
  3575  0494  0093               	movwf	19	;volatile
  3576  0495  2566  118A         	fcall	_ClearResSum
  3577  0497  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3578  0498  2506  118A         	fcall	_GetTouchKeyValue
  3579  049A  1283               	bcf	3,5	;RP0=0, select bank0
  3580  049B  1303               	bcf	3,6	;RP1=0, select bank0
  3581  049C  27D1  118A         	fcall	PL40	;call to abstracted procedure
  3582  049E  1C0B               	btfss	11,0	;volatile
  3583  049F  188B               	btfsc	11,1	;volatile
  3584  04A0  2CA3               	goto	l3848
  3585  04A1  1D8D               	btfss	13,3	;volatile
  3586  04A2  2CAA               	goto	l3860
  3587  04A3                     l3848:	
  3588  04A3  2566               	fcall	_ClearResSum
  3589  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  3590  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  3591  04A6  01BA               	clrf	_KeyCounter
  3592  04A7  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3593  04A8  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3594  04A9  0008               	return
  3595  04AA                     l3860:	
  3596  04AA  0852               	movf	SystemEnterSleep@92,w
  3597  04AB  3903               	andlw	3
  3598  04AC  1003               	clrc
  3599  04AD  1903               	btfsc	3,2
  3600  04AE  2D00               	goto	L7
  3601  04AF  0D54               	rlf	SystemEnterSleep@91,w
  3602  04B0  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  3603  04B1  0084               	movwf	4
  3604  04B2  1383               	bcf	3,7	;select IRP bank0
  3605  04B3  0800               	movf	0,w
  3606  04B4  00D0               	movwf	SystemEnterSleep@93
  3607  04B5  0A84               	incf	4,f
  3608  04B6  0800               	movf	0,w
  3609  04B7  00D1               	movwf	SystemEnterSleep@93+1
  3610  04B8  00CF               	movwf	SystemEnterSleep@94+1
  3611  04B9  0850               	movf	SystemEnterSleep@93,w
  3612  04BA  00CE               	movwf	SystemEnterSleep@94
  3613  04BB  0850               	movf	SystemEnterSleep@93,w
  3614  04BC  0451               	iorwf	SystemEnterSleep@93+1,w
  3615  04BD  1903               	btfsc	3,2
  3616  04BE  2CFF               	goto	l3894
  3617  04BF  0854               	movf	SystemEnterSleep@91,w
  3618  04C0  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  3619  04C1  0084               	movwf	4
  3620  04C2  158A  2000  118A   	fcall	stringdir
  3621  04C5  07CE               	addwf	SystemEnterSleep@94,f
  3622  04C6  1803               	skipnc
  3623  04C7  0ACF               	incf	SystemEnterSleep@94+1,f
  3624  04C8  1003               	clrc
  3625  04C9  0D54               	rlf	SystemEnterSleep@91,w
  3626  04CA  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3627  04CB  27AB  118A         	fcall	PL16	;call to abstracted procedure
  3628  04CD  084F               	movf	SystemEnterSleep@94+1,w
  3629  04CE  024D               	subwf	??_SystemEnterSleep+1,w
  3630  04CF  1D03               	skipz
  3631  04D0  2CD3               	goto	u3535
  3632  04D1  084E               	movf	SystemEnterSleep@94,w
  3633  04D2  024C               	subwf	??_SystemEnterSleep,w
  3634  04D3                     u3535:	
  3635  04D3  1C03               	skipc
  3636  04D4  2CE7               	goto	L6
  3637  04D5  27D1  118A         	fcall	PL40	;call to abstracted procedure
  3638  04D7                     l3874:	
  3639  04D7  0852               	movf	SystemEnterSleep@92,w
  3640  04D8  3903               	andlw	3
  3641  04D9  1D03               	btfss	3,2
  3642  04DA  2CDE               	goto	l3878
  3643  04DB  0854               	movf	SystemEnterSleep@91,w
  3644  04DC  266A  118A         	fcall	_KeyClearOne
  3645  04DE                     l3878:	
  3646  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  3647  04DF  3002               	movlw	2
  3648  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  3649  04E1  1003               	clrc
  3650  04E2  27CC  118A         	fcall	PL30	;call to abstracted procedure
  3651  04E4  1803               	btfsc	3,0
  3652  04E5  2CA3               	goto	l3848
  3653  04E6  2CD7               	goto	l3874
  3654  04E7                     L6:	
  3655  04E7  0D54               	rlf	SystemEnterSleep@91,w
  3656  04E8  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3657  04E9  27AB  118A         	fcall	PL16	;call to abstracted procedure
  3658  04EB  1003               	clrc
  3659  04EC  0D54               	rlf	SystemEnterSleep@91,w
  3660  04ED  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3661  04EE  2795  118A         	fcall	PL12	;call to abstracted procedure
  3662  04F0  0800               	movf	0,w
  3663  04F1  00CC               	movwf	??_SystemEnterSleep
  3664  04F2  0A84               	incf	4,f
  3665  04F3  0800               	movf	0,w
  3666  04F4  00CD               	movwf	??_SystemEnterSleep+1
  3667  04F5  1003               	clrc
  3668  04F6  0D54               	rlf	SystemEnterSleep@91,w
  3669  04F7  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3670  04F8  2795  118A         	fcall	PL12	;call to abstracted procedure
  3671  04FA  0850               	movf	SystemEnterSleep@93,w
  3672  04FB  0080               	movwf	0
  3673  04FC  0A84               	incf	4,f
  3674  04FD  0851               	movf	SystemEnterSleep@93+1,w
  3675  04FE  0080               	movwf	0
  3676  04FF                     l3894:	
  3677  04FF  1003               	clrc
  3678  0500                     L7:	
  3679  0500  3002               	movlw	2
  3680  0501  27CC  118A         	fcall	PL30	;call to abstracted procedure
  3681  0503  1803               	btfsc	3,0
  3682  0504  2C76               	goto	l1277
  3683  0505  2CAA               	goto	l3860
  3684  0506                     __end_of_SystemEnterSleep:	
  3685  0506                     __ptext26:	
  3686 ;; *************** function _GetTouchKeyValue *****************
  3687 ;; Defined at:
  3688 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;		None
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  63              2    5[COMMON] unsigned int 
  3693 ;;  64              2    3[COMMON] unsigned int 
  3694 ;;  62              1    7[COMMON] unsigned char 
  3695 ;; Return value:  Size  Location     Type
  3696 ;;                  1    wreg      void 
  3697 ;; Registers used:
  3698 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3699 ;; Tracked objects:
  3700 ;;		On entry : 0/200
  3701 ;;		On exit  : 0/0
  3702 ;;		Unchanged: 0/0
  3703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3704 ;;      Params:         0       0       0       0
  3705 ;;      Locals:         5       0       0       0
  3706 ;;      Temps:          0       0       0       0
  3707 ;;      Totals:         5       0       0       0
  3708 ;;Total ram usage:        5 bytes
  3709 ;; Hardware stack levels used:    1
  3710 ;; Hardware stack levels required when called:    2
  3711 ;; This function calls:
  3712 ;;		_ClearResSum
  3713 ;; This function is called by:
  3714 ;;		_CheckTouchKey
  3715 ;;		_SystemEnterSleep
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719                           
  3720                           ;psect for function _GetTouchKeyValue
  3721  0506                     _GetTouchKeyValue:	
  3722                           
  3723                           ;incstack = 0
  3724                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3725  0506  01F7               	clrf	GetTouchKeyValue@62
  3726  0507  01F5               	clrf	GetTouchKeyValue@63
  3727  0508  0AF5               	incf	GetTouchKeyValue@63,f
  3728  0509  01F6               	clrf	GetTouchKeyValue@63+1
  3729  050A                     l2834:	
  3730  050A  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3731  050B  2D10               	goto	l2838
  3732  050C  0875               	movf	GetTouchKeyValue@63,w
  3733  050D  3903               	andlw	3
  3734  050E  1903               	btfsc	3,2
  3735  050F  2D5C               	goto	l2866
  3736  0510                     l2838:	
  3737  0510  1283               	bcf	3,5	;RP0=0, select bank2
  3738  0511  1703               	bsf	3,6	;RP1=1, select bank2
  3739  0512  0191               	clrf	17	;volatile
  3740  0513  0192               	clrf	18	;volatile
  3741  0514  3079               	movlw	121
  3742  0515  0093               	movwf	19	;volatile
  3743  0516  1303               	bcf	3,6	;RP1=0, select bank0
  3744  0517  1305               	bcf	5,6	;volatile
  3745  0518  1306               	bcf	6,6	;volatile
  3746  0519  0000               	nop	;# 
  3747  051A  0000               	nop	;# 
  3748  051B  0000               	nop	;# 
  3749  051C  0000               	nop	;# 
  3750  051D  0000               	nop	;# 
  3751  051E  0000               	nop	;# 
  3752  051F  0000               	nop	;# 
  3753  0520  0000               	nop	;# 
  3754  0521  1283               	bcf	3,5	;RP0=0, select bank0
  3755  0522  1303               	bcf	3,6	;RP1=0, select bank0
  3756  0523  1705               	bsf	5,6	;volatile
  3757  0524  0877               	movf	GetTouchKeyValue@62,w
  3758  0525  3E0B               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  3759  0526  0084               	movwf	4
  3760  0527  158A  2000  118A   	fcall	stringdir
  3761  052A  1703               	bsf	3,6	;RP1=1, select bank2
  3762  052B  0091               	movwf	17	;volatile
  3763  052C  0877               	movf	GetTouchKeyValue@62,w
  3764  052D  3E0D               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  3765  052E  0084               	movwf	4
  3766  052F  158A  2000  118A   	fcall	stringdir
  3767  0532  0092               	movwf	18	;volatile
  3768  0533  0000               	nop	;# 
  3769  0534  0000               	nop	;# 
  3770  0535  0000               	nop	;# 
  3771  0536  0000               	nop	;# 
  3772  0537  1283               	bcf	3,5	;RP0=0, select bank2
  3773  0538  1703               	bsf	3,6	;RP1=1, select bank2
  3774  0539  1411               	bsf	17,0	;volatile
  3775  053A  30D0               	movlw	208
  3776  053B  00F3               	movwf	GetTouchKeyValue@64
  3777  053C  3007               	movlw	7
  3778  053D  00F4               	movwf	GetTouchKeyValue@64+1
  3779  053E                     l1187:	
  3780  053E  1B91               	btfsc	17,7	;volatile
  3781  053F  2D4C               	goto	l2864
  3782  0540  3001               	movlw	1
  3783  0541  02F3               	subwf	GetTouchKeyValue@64,f
  3784  0542  1C03               	skipc
  3785  0543  03F4               	decf	GetTouchKeyValue@64+1,f
  3786  0544  0873               	movf	GetTouchKeyValue@64,w
  3787  0545  0474               	iorwf	GetTouchKeyValue@64+1,w
  3788  0546  1D03               	btfss	3,2
  3789  0547  2D3E               	goto	l1187
  3790  0548  30FF               	movlw	255
  3791  0549  1303               	bcf	3,6	;RP1=0, select bank0
  3792  054A  00BA               	movwf	_KeyCounter
  3793  054B  2D66               	ljmp	l2684
  3794  054C                     l2864:	
  3795  054C  1003               	clrc
  3796  054D  0D77               	rlf	GetTouchKeyValue@62,w
  3797  054E  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  3798  054F  0084               	movwf	4
  3799  0550  0816               	movf	22,w	;volatile
  3800  0551  1383               	bcf	3,7	;select IRP bank0
  3801  0552  0780               	addwf	0,f
  3802  0553  0F84               	incfsz	4,f
  3803  0554  0800               	movf	0,w
  3804  0555  1803               	skipnc
  3805  0556  0A00               	incf	0,w
  3806  0557  00FF               	movwf	127
  3807  0558  0817               	movf	23,w	;volatile
  3808  0559  077F               	addwf	127,w
  3809  055A  0080               	movwf	0
  3810  055B  0384               	decf	4,f
  3811  055C                     l2866:	
  3812  055C  3002               	movlw	2
  3813  055D  1003               	clrc
  3814  055E  0DF5               	rlf	GetTouchKeyValue@63,f
  3815  055F  0DF6               	rlf	GetTouchKeyValue@63+1,f
  3816  0560  0AF7               	incf	GetTouchKeyValue@62,f
  3817  0561  0277               	subwf	GetTouchKeyValue@62,w
  3818  0562  1C03               	skipc
  3819  0563  2D0A               	goto	l2834
  3820  0564  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  3821  0565  0008               	return
  3822  0566                     __end_of_GetTouchKeyValue:	
  3823  0566                     __ptext27:	
  3824 ;; *************** function _ClearResSum *****************
  3825 ;; Defined at:
  3826 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;		None
  3829 ;; Auto vars:     Size  Location     Type
  3830 ;;  56              1    2[COMMON] unsigned char 
  3831 ;; Return value:  Size  Location     Type
  3832 ;;                  1    wreg      void 
  3833 ;; Registers used:
  3834 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3835 ;; Tracked objects:
  3836 ;;		On entry : 0/200
  3837 ;;		On exit  : 0/0
  3838 ;;		Unchanged: 0/0
  3839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3840 ;;      Params:         0       0       0       0
  3841 ;;      Locals:         1       0       0       0
  3842 ;;      Temps:          0       0       0       0
  3843 ;;      Totals:         1       0       0       0
  3844 ;;Total ram usage:        1 bytes
  3845 ;; Hardware stack levels used:    1
  3846 ;; Hardware stack levels required when called:    1
  3847 ;; This function calls:
  3848 ;;		Nothing
  3849 ;; This function is called by:
  3850 ;;		_GetTouchKeyValue
  3851 ;;		_CheckTouchKey
  3852 ;;		_SystemEnterSleep
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           
  3857                           ;psect for function _ClearResSum
  3858  0566                     _ClearResSum:	
  3859  0566                     l2684:	
  3860                           ;incstack = 0
  3861                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  3862                           
  3863  0566  01F2               	clrf	ClearResSum@56
  3864  0567                     l2686:	
  3865  0567  1003               	clrc
  3866  0568  0D72               	rlf	ClearResSum@56,w
  3867  0569  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  3868  056A  0084               	movwf	4
  3869  056B  3002               	movlw	2
  3870  056C  1383               	bcf	3,7	;select IRP bank0
  3871  056D  0180               	clrf	0
  3872  056E  0A84               	incf	4,f
  3873  056F  0180               	clrf	0
  3874  0570  0AF2               	incf	ClearResSum@56,f
  3875  0571  0272               	subwf	ClearResSum@56,w
  3876  0572  1803               	btfsc	3,0
  3877  0573  0008               	return
  3878  0574  2D67               	goto	l2686
  3879  0575                     __end_of_ClearResSum:	
  3880  0575                     __ptext29:	
  3881 ;; *************** function _CheckOnceResult *****************
  3882 ;; Defined at:
  3883 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;		None
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;  71              2   10[BANK0 ] unsigned int 
  3888 ;;  72              2    7[BANK0 ] unsigned int 
  3889 ;;  73              2    4[BANK0 ] unsigned int 
  3890 ;;  68              1   12[BANK0 ] unsigned char 
  3891 ;;  69              1    9[BANK0 ] unsigned char 
  3892 ;;  70              1    6[BANK0 ] unsigned char 
  3893 ;; Return value:  Size  Location     Type
  3894 ;;                  1    wreg      void 
  3895 ;; Registers used:
  3896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3897 ;; Tracked objects:
  3898 ;;		On entry : 0/0
  3899 ;;		On exit  : 0/0
  3900 ;;		Unchanged: 0/0
  3901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3902 ;;      Params:         0       0       0       0
  3903 ;;      Locals:         0       9       0       0
  3904 ;;      Temps:          0       4       0       0
  3905 ;;      Totals:         0      13       0       0
  3906 ;;Total ram usage:       13 bytes
  3907 ;; Hardware stack levels used:    1
  3908 ;; Hardware stack levels required when called:    3
  3909 ;; This function calls:
  3910 ;;		_KeyClearOne
  3911 ;;		_KeyHave
  3912 ;;		_KeyIsIn
  3913 ;; This function is called by:
  3914 ;;		_CheckTouchKey
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           
  3919                           ;psect for function _CheckOnceResult
  3920  0575                     _CheckOnceResult:	
  3921                           
  3922                           ;incstack = 0
  3923                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3924  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3925  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3926  0577  01D8               	clrf	CheckOnceResult@68
  3927  0578  01F9               	clrf	_KeyData	;volatile
  3928  0579  01FA               	clrf	_KeyData+1	;volatile
  3929  057A  01B9               	clrf	_KeyMaxSub
  3930  057B                     l4002:	
  3931  057B  0858               	movf	CheckOnceResult@68,w
  3932  057C  3907               	andlw	7
  3933  057D  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  3934  057E  0084               	movwf	4
  3935  057F  158A  2000  118A   	fcall	stringdir
  3936  0582  00D2               	movwf	CheckOnceResult@70
  3937  0583  1003               	clrc
  3938  0584  0D58               	rlf	CheckOnceResult@68,w
  3939  0585  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  3940  0586  0084               	movwf	4
  3941  0587  3003               	movlw	3
  3942  0588                     u3805:	
  3943  0588  0A84               	incf	4,f
  3944  0589  1003               	clrc
  3945  058A  1383               	bcf	3,7	;select IRP bank0
  3946  058B  0C80               	rrf	0,f
  3947  058C  0384               	decf	4,f
  3948  058D  0C80               	rrf	0,f
  3949  058E  3EFF               	addlw	-1
  3950  058F  1D03               	skipz
  3951  0590  2D88               	goto	u3805
  3952  0591  1003               	clrc
  3953  0592  0D58               	rlf	CheckOnceResult@68,w
  3954  0593  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  3955  0594  0084               	movwf	4
  3956  0595  0800               	movf	0,w
  3957  0596  00D6               	movwf	CheckOnceResult@71
  3958  0597  0A84               	incf	4,f
  3959  0598  0800               	movf	0,w
  3960  0599  00D7               	movwf	CheckOnceResult@71+1
  3961  059A  0858               	movf	CheckOnceResult@68,w
  3962  059B  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  3963  059C  0084               	movwf	4
  3964  059D  158A  2000  118A   	fcall	stringdir
  3965  05A0  00D5               	movwf	CheckOnceResult@69
  3966  05A1  00D3               	movwf	CheckOnceResult@72
  3967  05A2  01D4               	clrf	CheckOnceResult@72+1
  3968  05A3  0856               	movf	CheckOnceResult@71,w
  3969  05A4  07D3               	addwf	CheckOnceResult@72,f
  3970  05A5  1803               	skipnc
  3971  05A6  0AD4               	incf	CheckOnceResult@72+1,f
  3972  05A7  0857               	movf	CheckOnceResult@71+1,w
  3973  05A8  07D4               	addwf	CheckOnceResult@72+1,f
  3974  05A9  0858               	movf	CheckOnceResult@68,w
  3975  05AA  2656  118A         	fcall	_KeyIsIn
  3976  05AC  3A00               	xorlw	0
  3977  05AD  1003               	clrc
  3978  05AE  1D03               	skipz
  3979  05AF  2E0A               	goto	L10
  3980  05B0  0D58               	rlf	CheckOnceResult@68,w
  3981  05B1  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3982  05B2  0084               	movwf	4
  3983  05B3  1383               	bcf	3,7	;select IRP bank0
  3984  05B4  0800               	movf	0,w
  3985  05B5  00D0               	movwf	CheckOnceResult@73
  3986  05B6  0A84               	incf	4,f
  3987  05B7  0800               	movf	0,w
  3988  05B8  00D1               	movwf	CheckOnceResult@73+1
  3989  05B9  1003               	clrc
  3990  05BA  0D58               	rlf	CheckOnceResult@68,w
  3991  05BB  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  3992  05BC  278E  118A         	fcall	PL8	;call to abstracted procedure
  3993  05BE  0254               	subwf	CheckOnceResult@72+1,w
  3994  05BF  1D03               	skipz
  3995  05C0  2DC3               	goto	u3825
  3996  05C1  084C               	movf	??_CheckOnceResult,w
  3997  05C2  0253               	subwf	CheckOnceResult@72,w
  3998  05C3                     u3825:	
  3999  05C3  1803               	skipnc
  4000  05C4  2DD2               	goto	l4020
  4001  05C5  1003               	clrc
  4002  05C6  0D58               	rlf	CheckOnceResult@68,w
  4003  05C7  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4004  05C8  278E  118A         	fcall	PL8	;call to abstracted procedure
  4005  05CA  0856               	movf	CheckOnceResult@71,w
  4006  05CB  024C               	subwf	??_CheckOnceResult,w
  4007  05CC  00D6               	movwf	CheckOnceResult@71
  4008  05CD  0857               	movf	CheckOnceResult@71+1,w
  4009  05CE  1C03               	skipc
  4010  05CF  0A57               	incf	CheckOnceResult@71+1,w
  4011  05D0  024D               	subwf	??_CheckOnceResult+1,w
  4012  05D1  2DF6               	goto	L8
  4013  05D2                     l4020:	
  4014  05D2  0851               	movf	CheckOnceResult@73+1,w
  4015  05D3  0254               	subwf	CheckOnceResult@72+1,w
  4016  05D4  1D03               	skipz
  4017  05D5  2DD8               	goto	u3835
  4018  05D6  0850               	movf	CheckOnceResult@73,w
  4019  05D7  0253               	subwf	CheckOnceResult@72,w
  4020  05D8                     u3835:	
  4021  05D8  1803               	skipnc
  4022  05D9  2E4E               	goto	l4066
  4023  05DA  1003               	clrc
  4024  05DB  0D58               	rlf	CheckOnceResult@68,w
  4025  05DC  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4026  05DD  278E  118A         	fcall	PL8	;call to abstracted procedure
  4027  05DF  0254               	subwf	CheckOnceResult@72+1,w
  4028  05E0  1D03               	skipz
  4029  05E1  2DE4               	goto	u3845
  4030  05E2  084C               	movf	??_CheckOnceResult,w
  4031  05E3  0253               	subwf	CheckOnceResult@72,w
  4032  05E4                     u3845:	
  4033  05E4  1803               	skipnc
  4034  05E5  2E4E               	goto	l4066
  4035  05E6  1003               	clrc
  4036  05E7  0D58               	rlf	CheckOnceResult@68,w
  4037  05E8  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4038  05E9  0084               	movwf	4
  4039  05EA  0850               	movf	CheckOnceResult@73,w
  4040  05EB  0080               	movwf	0
  4041  05EC  0A84               	incf	4,f
  4042  05ED  0851               	movf	CheckOnceResult@73+1,w
  4043  05EE  0080               	movwf	0
  4044  05EF  0856               	movf	CheckOnceResult@71,w
  4045  05F0  0250               	subwf	CheckOnceResult@73,w
  4046  05F1  00D6               	movwf	CheckOnceResult@71
  4047  05F2  0857               	movf	CheckOnceResult@71+1,w
  4048  05F3  1C03               	skipc
  4049  05F4  0A57               	incf	CheckOnceResult@71+1,w
  4050  05F5  0251               	subwf	CheckOnceResult@73+1,w
  4051  05F6                     L8:	
  4052  05F6  00D7               	movwf	CheckOnceResult@71+1
  4053  05F7  0858               	movf	CheckOnceResult@68,w
  4054  05F8  3EB0               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4055  05F9  0084               	movwf	4
  4056  05FA  0180               	clrf	0
  4057  05FB  0857               	movf	CheckOnceResult@71+1,w
  4058  05FC  1903               	btfsc	3,2
  4059  05FD  2E00               	goto	l4034
  4060  05FE  30FF               	movlw	255
  4061  05FF  2E01               	goto	L9
  4062  0600                     l4034:	
  4063  0600  0856               	movf	CheckOnceResult@71,w
  4064  0601                     L9:	
  4065  0601  00D5               	movwf	CheckOnceResult@69
  4066  0602  0239               	subwf	_KeyMaxSub,w
  4067  0603  1803               	skipnc
  4068  0604  2E08               	goto	l4040
  4069  0605  0855               	movf	CheckOnceResult@69,w
  4070  0606  00B9               	movwf	_KeyMaxSub
  4071  0607  2E48               	goto	l4064
  4072  0608                     l4040:	
  4073  0608  0ABA               	incf	_KeyCounter,f
  4074  0609  2E4E               	goto	l4066
  4075  060A                     L10:	
  4076  060A  0D58               	rlf	CheckOnceResult@68,w
  4077  060B  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4078  060C  0084               	movwf	4
  4079  060D  1383               	bcf	3,7	;select IRP bank1
  4080  060E  0800               	movf	0,w
  4081  060F  00CC               	movwf	??_CheckOnceResult
  4082  0610  0A84               	incf	4,f
  4083  0611  0800               	movf	0,w
  4084  0612  00CD               	movwf	??_CheckOnceResult+1
  4085  0613  084C               	movf	??_CheckOnceResult,w
  4086  0614  3E01               	addlw	1
  4087  0615  00CE               	movwf	??_CheckOnceResult+2
  4088  0616  084D               	movf	??_CheckOnceResult+1,w
  4089  0617  1803               	skipnc
  4090  0618  3E01               	addlw	1
  4091  0619  00CF               	movwf	??_CheckOnceResult+3
  4092  061A  0854               	movf	CheckOnceResult@72+1,w
  4093  061B  024F               	subwf	??_CheckOnceResult+3,w
  4094  061C  1D03               	skipz
  4095  061D  2E20               	goto	u3875
  4096  061E  0853               	movf	CheckOnceResult@72,w
  4097  061F  024E               	subwf	??_CheckOnceResult+2,w
  4098  0620                     u3875:	
  4099  0620  1C03               	btfss	3,0
  4100  0621  2E4E               	goto	l4066
  4101  0622  1003               	clrc
  4102  0623  0D58               	rlf	CheckOnceResult@68,w
  4103  0624  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4104  0625  0084               	movwf	4
  4105  0626  0800               	movf	0,w
  4106  0627  277C  118A         	fcall	PL4	;call to abstracted procedure
  4107  0629  1C03               	skipc
  4108  062A  2E34               	goto	l4054
  4109  062B  1003               	clrc
  4110  062C  0D58               	rlf	CheckOnceResult@68,w
  4111  062D  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4112  062E  0084               	movwf	4
  4113  062F  0800               	movf	0,w
  4114  0630  277C  118A         	fcall	PL4	;call to abstracted procedure
  4115  0632  1803               	skipnc
  4116  0633  2E40               	goto	l4058
  4117  0634                     l4054:	
  4118  0634  0858               	movf	CheckOnceResult@68,w
  4119  0635  3EB0               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4120  0636  0084               	movwf	4
  4121  0637  3009               	movlw	9
  4122  0638  0A80               	incf	0,f
  4123  0639  0200               	subwf	0,w
  4124  063A  1C03               	skipc
  4125  063B  2E44               	goto	l4062
  4126  063C  0858               	movf	CheckOnceResult@68,w
  4127  063D  266A  118A         	fcall	_KeyClearOne
  4128  063F  2E4E               	goto	l4066
  4129  0640                     l4058:	
  4130  0640  0858               	movf	CheckOnceResult@68,w
  4131  0641  3EB0               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4132  0642  0084               	movwf	4
  4133  0643  0180               	clrf	0
  4134  0644                     l4062:	
  4135  0644  087A               	movf	_KeyData+1,w	;volatile
  4136  0645  0479               	iorwf	_KeyData,w	;volatile
  4137  0646  1D03               	btfss	3,2
  4138  0647  2E4E               	goto	l4066
  4139  0648                     l4064:	
  4140  0648  0852               	movf	CheckOnceResult@70,w
  4141  0649  00F2               	movwf	KeyHave@59
  4142  064A  01F3               	clrf	KeyHave@59+1
  4143  064B  0858               	movf	CheckOnceResult@68,w
  4144  064C  267F  118A         	fcall	_KeyHave
  4145  064E                     l4066:	
  4146  064E  3002               	movlw	2
  4147  064F  1283               	bcf	3,5	;RP0=0, select bank0
  4148  0650  1303               	bcf	3,6	;RP1=0, select bank0
  4149  0651  0AD8               	incf	CheckOnceResult@68,f
  4150  0652  0258               	subwf	CheckOnceResult@68,w
  4151  0653  1803               	btfsc	3,0
  4152  0654  0008               	return
  4153  0655  2D7B               	goto	l4002
  4154  0656                     __end_of_CheckOnceResult:	
  4155  0656                     __ptext33:	
  4156 ;; *************** function _KeyIsIn *****************
  4157 ;; Defined at:
  4158 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  45              1    wreg     unsigned char 
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  45              1    3[COMMON] unsigned char 
  4163 ;;  46              1    2[COMMON] unsigned char 
  4164 ;; Return value:  Size  Location     Type
  4165 ;;                  1    wreg      unsigned char 
  4166 ;; Registers used:
  4167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 300/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4173 ;;      Params:         0       0       0       0
  4174 ;;      Locals:         2       0       0       0
  4175 ;;      Temps:          0       0       0       0
  4176 ;;      Totals:         2       0       0       0
  4177 ;;Total ram usage:        2 bytes
  4178 ;; Hardware stack levels used:    2
  4179 ;; Hardware stack levels required when called:    1
  4180 ;; This function calls:
  4181 ;;		Nothing
  4182 ;; This function is called by:
  4183 ;;		_KeyClearIn
  4184 ;;		_CheckOnceResult
  4185 ;;		_CheckKeyOldValue
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           
  4190                           ;psect for function _KeyIsIn
  4191  0656                     _KeyIsIn:	
  4192                           
  4193                           ;incstack = 0
  4194                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4195                           ;KeyIsIn@45 stored from wreg
  4196  0656  00F3               	movwf	KeyIsIn@45
  4197  0657  3907               	andlw	7
  4198  0658  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4199  0659  0084               	movwf	4
  4200  065A  158A  2000  118A   	fcall	stringdir
  4201  065D  00F2               	movwf	KeyIsIn@46
  4202  065E  1DF3               	btfss	KeyIsIn@45,3
  4203  065F  2E64               	goto	l2670
  4204  0660  1283               	bcf	3,5	;RP0=0, select bank0
  4205  0661  1303               	bcf	3,6	;RP1=0, select bank0
  4206  0662  0835               	movf	_KeyFlag+1,w	;volatile
  4207  0663  2E67               	goto	L15
  4208  0664                     l2670:	
  4209  0664  1283               	bcf	3,5	;RP0=0, select bank0
  4210  0665  1303               	bcf	3,6	;RP1=0, select bank0
  4211  0666  0834               	movf	_KeyFlag,w	;volatile
  4212  0667                     L15:	
  4213  0667  05F2               	andwf	KeyIsIn@46,f
  4214  0668  0872               	movf	KeyIsIn@46,w
  4215  0669  0008               	return
  4216  066A                     __end_of_KeyIsIn:	
  4217  066A                     __ptext31:	
  4218 ;; *************** function _KeyClearOne *****************
  4219 ;; Defined at:
  4220 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  49              1    wreg     unsigned char 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  49              1    2[COMMON] unsigned char 
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  1    wreg      void 
  4227 ;; Registers used:
  4228 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4234 ;;      Params:         0       0       0       0
  4235 ;;      Locals:         1       0       0       0
  4236 ;;      Temps:          0       0       0       0
  4237 ;;      Totals:         1       0       0       0
  4238 ;;Total ram usage:        1 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    1
  4241 ;; This function calls:
  4242 ;;		Nothing
  4243 ;; This function is called by:
  4244 ;;		_KeyClearIn
  4245 ;;		_KeyStopClear
  4246 ;;		_CheckOnceResult
  4247 ;;		_SystemEnterSleep
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           
  4252                           ;psect for function _KeyClearOne
  4253  066A                     _KeyClearOne:	
  4254                           
  4255                           ;incstack = 0
  4256                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  4257                           ;KeyClearOne@49 stored from wreg
  4258  066A  00F2               	movwf	KeyClearOne@49
  4259  066B  1003               	clrc
  4260  066C  0D72               	rlf	KeyClearOne@49,w
  4261  066D  3EA4               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4262  066E  0084               	movwf	4
  4263  066F  1383               	bcf	3,7	;select IRP bank1
  4264  0670  27BA  118A         	fcall	PL22	;call to abstracted procedure
  4265  0672  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4266  0673  0084               	movwf	4
  4267  0674  27BA  118A         	fcall	PL22	;call to abstracted procedure
  4268  0676  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4269  0677  0084               	movwf	4
  4270  0678  27BA               	fcall	PL22	;call to abstracted procedure
  4271  0679  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4272  067A  0084               	movwf	4
  4273  067B  0180               	clrf	0
  4274  067C  0A84               	incf	4,f
  4275  067D  0180               	clrf	0	;# 
  4276  067E  0008               	return
  4277  067F                     __end_of_KeyClearOne:	
  4278  067F                     __ptext30:	
  4279 ;; *************** function _KeyHave *****************
  4280 ;; Defined at:
  4281 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;  58              1    wreg     unsigned char 
  4284 ;;  59              2    2[COMMON] unsigned int 
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;  58              1    4[COMMON] unsigned char 
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  1    wreg      void 
  4289 ;; Registers used:
  4290 ;;		wreg, status,2, status,0
  4291 ;; Tracked objects:
  4292 ;;		On entry : B00/0
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4296 ;;      Params:         2       0       0       0
  4297 ;;      Locals:         1       0       0       0
  4298 ;;      Temps:          0       0       0       0
  4299 ;;      Totals:         3       0       0       0
  4300 ;;Total ram usage:        3 bytes
  4301 ;; Hardware stack levels used:    1
  4302 ;; Hardware stack levels required when called:    1
  4303 ;; This function calls:
  4304 ;;		Nothing
  4305 ;; This function is called by:
  4306 ;;		_CheckOnceResult
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           
  4311                           ;psect for function _KeyHave
  4312  067F                     _KeyHave:	
  4313                           
  4314                           ;incstack = 0
  4315                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  4316                           ;KeyHave@58 stored from wreg
  4317  067F  00F4               	movwf	KeyHave@58
  4318  0680  1283               	bcf	3,5	;RP0=0, select bank0
  4319  0681  1303               	bcf	3,6	;RP1=0, select bank0
  4320  0682  0ABA               	incf	_KeyCounter,f
  4321  0683  01F9               	clrf	_KeyData	;volatile
  4322  0684  01FA               	clrf	_KeyData+1	;volatile
  4323  0685  1DF4               	btfss	KeyHave@58,3
  4324  0686  2E8A               	goto	l2822
  4325  0687  0872               	movf	KeyHave@59,w
  4326  0688  00FA               	movwf	_KeyData+1	;volatile
  4327  0689  0008               	return
  4328  068A                     l2822:	
  4329  068A  0872               	movf	KeyHave@59,w
  4330  068B  00F9               	movwf	_KeyData	;volatile
  4331  068C  0008               	return
  4332  068D                     __end_of_KeyHave:	
  4333  068D                     __ptext32:	
  4334 ;; *************** function _CheckKeyOldValue *****************
  4335 ;; Defined at:
  4336 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;		None
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;  80              2    2[BANK0 ] unsigned int 
  4341 ;;  79              2    0[BANK0 ] unsigned int 
  4342 ;;  78              1    4[BANK0 ] unsigned char 
  4343 ;; Return value:  Size  Location     Type
  4344 ;;                  1    wreg      void 
  4345 ;; Registers used:
  4346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4352 ;;      Params:         0       0       0       0
  4353 ;;      Locals:         0       5       0       0
  4354 ;;      Temps:          2       0       0       0
  4355 ;;      Totals:         2       5       0       0
  4356 ;;Total ram usage:        7 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    3
  4359 ;; This function calls:
  4360 ;;		_KeyIsIn
  4361 ;; This function is called by:
  4362 ;;		_CheckTouchKey
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           
  4367                           ;psect for function _CheckKeyOldValue
  4368  068D                     _CheckKeyOldValue:	
  4369                           
  4370                           ;incstack = 0
  4371                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4372  068D  1283               	bcf	3,5	;RP0=0, select bank0
  4373  068E  3004               	movlw	4
  4374  068F  1303               	bcf	3,6	;RP1=0, select bank0
  4375  0690  01D0               	clrf	CheckKeyOldValue@78
  4376  0691  0AB8               	incf	CheckKeyOldValue@F77,f
  4377  0692  0238               	subwf	CheckKeyOldValue@F77,w
  4378  0693  1C03               	btfss	3,0
  4379  0694  0008               	return
  4380  0695  01B8               	clrf	CheckKeyOldValue@F77
  4381  0696                     l3214:	
  4382  0696  1003               	clrc
  4383  0697  0D50               	rlf	CheckKeyOldValue@78,w
  4384  0698  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  4385  0699  0084               	movwf	4
  4386  069A  1383               	bcf	3,7	;select IRP bank0
  4387  069B  0800               	movf	0,w
  4388  069C  00CC               	movwf	CheckKeyOldValue@79
  4389  069D  0A84               	incf	4,f
  4390  069E  0800               	movf	0,w
  4391  069F  00CD               	movwf	CheckKeyOldValue@79+1
  4392  06A0  0850               	movf	CheckKeyOldValue@78,w
  4393  06A1  2656  118A         	fcall	_KeyIsIn
  4394  06A3  3A00               	xorlw	0
  4395  06A4  1003               	clrc
  4396  06A5  1D03               	skipz
  4397  06A6  2EDB               	goto	L14
  4398  06A7  0D50               	rlf	CheckKeyOldValue@78,w
  4399  06A8  3EA4               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4400  06A9  0084               	movwf	4
  4401  06AA  1383               	bcf	3,7	;select IRP bank1
  4402  06AB  276E  118A         	fcall	PL2	;call to abstracted procedure
  4403  06AD  1903               	skipnz
  4404  06AE  024E               	subwf	CheckKeyOldValue@80,w
  4405  06AF  1C03               	skipc
  4406  06B0  2EB7               	goto	L11
  4407  06B1  0F4E               	incfsz	CheckKeyOldValue@80,w
  4408  06B2  2EDA               	goto	l1228
  4409  06B3  0A4F               	incf	CheckKeyOldValue@80+1,w
  4410  06B4  1003               	clrc
  4411  06B5  1D03               	btfss	3,2
  4412  06B6  2EDB               	goto	L14
  4413  06B7                     L11:	
  4414  06B7  0D50               	rlf	CheckKeyOldValue@78,w
  4415  06B8  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4416  06B9  0084               	movwf	4
  4417  06BA  276E  118A         	fcall	PL2	;call to abstracted procedure
  4418  06BC  1903               	skipnz
  4419  06BD  024E               	subwf	CheckKeyOldValue@80,w
  4420  06BE  1C03               	skipc
  4421  06BF  2EC6               	goto	L12
  4422  06C0  0F4E               	incfsz	CheckKeyOldValue@80,w
  4423  06C1  2EDA               	goto	l1228
  4424  06C2  0A4F               	incf	CheckKeyOldValue@80+1,w
  4425  06C3  1003               	clrc
  4426  06C4  1D03               	btfss	3,2
  4427  06C5  2EDB               	goto	L14
  4428  06C6                     L12:	
  4429  06C6  0D50               	rlf	CheckKeyOldValue@78,w
  4430  06C7  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4431  06C8  0084               	movwf	4
  4432  06C9  276E  118A         	fcall	PL2	;call to abstracted procedure
  4433  06CB  1903               	skipnz
  4434  06CC  024E               	subwf	CheckKeyOldValue@80,w
  4435  06CD  1C03               	skipc
  4436  06CE  2ED5               	goto	L13
  4437  06CF  0F4E               	incfsz	CheckKeyOldValue@80,w
  4438  06D0  2EDA               	goto	l1228
  4439  06D1  0A4F               	incf	CheckKeyOldValue@80+1,w
  4440  06D2  1003               	clrc
  4441  06D3  1D03               	btfss	3,2
  4442  06D4  2EDB               	goto	L14
  4443  06D5                     L13:	
  4444  06D5  0D50               	rlf	CheckKeyOldValue@78,w
  4445  06D6  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4446  06D7  0084               	movwf	4
  4447  06D8  27C6  118A         	fcall	PL28	;call to abstracted procedure
  4448  06DA                     l1228:	
  4449  06DA  1003               	clrc
  4450  06DB                     L14:	
  4451  06DB  0D50               	rlf	CheckKeyOldValue@78,w
  4452  06DC  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4453  06DD  0084               	movwf	4
  4454  06DE  1383               	bcf	3,7	;select IRP bank0
  4455  06DF  27B2  118A         	fcall	PL20	;call to abstracted procedure
  4456  06E1  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4457  06E2  27A0  118A         	fcall	PL14	;call to abstracted procedure
  4458  06E4  27B2  118A         	fcall	PL20	;call to abstracted procedure
  4459  06E6  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4460  06E7  27A0  118A         	fcall	PL14	;call to abstracted procedure
  4461  06E9  27C6  118A         	fcall	PL28	;call to abstracted procedure
  4462  06EB  3002               	movlw	2
  4463  06EC  0AD0               	incf	CheckKeyOldValue@78,f
  4464  06ED  0250               	subwf	CheckKeyOldValue@78,w
  4465  06EE  1803               	btfsc	3,0
  4466  06EF  0008               	return
  4467  06F0  2E96               	goto	l3214
  4468  06F1                     __end_of_CheckKeyOldValue:	
  4469  06F1                     __ptext25:	
  4470 ;; *************** function _KeyStopClear *****************
  4471 ;; Defined at:
  4472 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;		None
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;  53              1    3[COMMON] unsigned char 
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  1    wreg      void 
  4479 ;; Registers used:
  4480 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4486 ;;      Params:         0       0       0       0
  4487 ;;      Locals:         1       0       0       0
  4488 ;;      Temps:          0       0       0       0
  4489 ;;      Totals:         1       0       0       0
  4490 ;;Total ram usage:        1 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    2
  4493 ;; This function calls:
  4494 ;;		_KeyClearOne
  4495 ;; This function is called by:
  4496 ;;		_CheckTouchKey
  4497 ;; This function uses a non-reentrant model
  4498 ;;
  4499                           
  4500                           
  4501                           ;psect for function _KeyStopClear
  4502  06F1                     _KeyStopClear:	
  4503                           
  4504                           ;incstack = 0
  4505                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4506  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  4507  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  4508  06F3  01B4               	clrf	_KeyFlag	;volatile
  4509  06F4  01B5               	clrf	_KeyFlag+1	;volatile
  4510  06F5  01F3               	clrf	KeyStopClear@53
  4511  06F6                     l3126:	
  4512  06F6  1003               	clrc
  4513  06F7  0D73               	rlf	KeyStopClear@53,w
  4514  06F8  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  4515  06F9  0084               	movwf	4
  4516  06FA  1383               	bcf	3,7	;select IRP bank0
  4517  06FB  0180               	clrf	0
  4518  06FC  0A84               	incf	4,f
  4519  06FD  0180               	clrf	0
  4520  06FE  0873               	movf	KeyStopClear@53,w
  4521  06FF  266A  118A         	fcall	_KeyClearOne
  4522  0701  3002               	movlw	2
  4523  0702  0AF3               	incf	KeyStopClear@53,f
  4524  0703  0273               	subwf	KeyStopClear@53,w
  4525  0704  1803               	btfsc	3,0
  4526  0705  0008               	return
  4527  0706  2EF6               	goto	l3126
  4528  0707                     __end_of_KeyStopClear:	
  4529  0707                     __ptext23:	
  4530 ;; *************** function _TurnKeyFlags *****************
  4531 ;; Defined at:
  4532 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4533 ;; Parameters:    Size  Location     Type
  4534 ;;		None
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;		None
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      void 
  4539 ;; Registers used:
  4540 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4546 ;;      Params:         0       0       0       0
  4547 ;;      Locals:         0       0       0       0
  4548 ;;      Temps:          0       0       0       0
  4549 ;;      Totals:         0       0       0       0
  4550 ;;Total ram usage:        0 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; Hardware stack levels required when called:    4
  4553 ;; This function calls:
  4554 ;;		_KeyClearIn
  4555 ;; This function is called by:
  4556 ;;		_CheckTouchKey
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           
  4561                           ;psect for function _TurnKeyFlags
  4562  0707                     _TurnKeyFlags:	
  4563                           
  4564                           ;incstack = 0
  4565                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4566  0707  087A               	movf	_KeyData+1,w	;volatile
  4567  0708  0479               	iorwf	_KeyData,w	;volatile
  4568  0709  1903               	btfsc	3,2
  4569  070A  2F2B               	goto	l3274
  4570  070B  1283               	bcf	3,5	;RP0=0, select bank0
  4571  070C  1303               	bcf	3,6	;RP1=0, select bank0
  4572  070D  01B6               	clrf	TurnKeyFlags@F84
  4573  070E  0879               	movf	_KeyData,w	;volatile
  4574  070F  062C               	xorwf	_KeyOldData,w	;volatile
  4575  0710  1D03               	skipz
  4576  0711  2F24               	goto	l1246
  4577  0712  087A               	movf	_KeyData+1,w	;volatile
  4578  0713  062D               	xorwf	_KeyOldData+1,w	;volatile
  4579  0714  1D03               	skipz
  4580  0715  2F24               	goto	l1246
  4581  0716  3002               	movlw	2
  4582  0717  0AB7               	incf	TurnKeyFlags@F83,f
  4583  0718  0237               	subwf	TurnKeyFlags@F83,w
  4584  0719  1C03               	skipc
  4585  071A  0008               	return
  4586  071B  01B7               	clrf	TurnKeyFlags@F83
  4587  071C  0879               	movf	_KeyData,w	;volatile
  4588  071D  00B4               	movwf	_KeyFlag	;volatile
  4589  071E  087A               	movf	_KeyData+1,w	;volatile
  4590  071F  00B5               	movwf	_KeyFlag+1	;volatile
  4591  0720  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4592  0721  0008               	return
  4593  0722  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4594  0723  2F50               	ljmp	l2796
  4595  0724                     l1246:	
  4596  0724  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4597  0725  0879               	movf	_KeyData,w	;volatile
  4598  0726  00AC               	movwf	_KeyOldData	;volatile
  4599  0727  087A               	movf	_KeyData+1,w	;volatile
  4600  0728  00AD               	movwf	_KeyOldData+1	;volatile
  4601  0729  01B7               	clrf	TurnKeyFlags@F83
  4602  072A  0008               	return
  4603  072B                     l3274:	
  4604  072B  1283               	bcf	3,5	;RP0=0, select bank0
  4605  072C  1303               	bcf	3,6	;RP1=0, select bank0
  4606  072D  01B7               	clrf	TurnKeyFlags@F83
  4607  072E  01AC               	clrf	_KeyOldData	;volatile
  4608  072F  01AD               	clrf	_KeyOldData+1	;volatile
  4609  0730  3002               	movlw	2
  4610  0731  0AB6               	incf	TurnKeyFlags@F84,f
  4611  0732  0236               	subwf	TurnKeyFlags@F84,w
  4612  0733  1C03               	skipc
  4613  0734  0008               	return
  4614  0735  01B6               	clrf	TurnKeyFlags@F84
  4615  0736  01B4               	clrf	_KeyFlag	;volatile
  4616  0737  01B5               	clrf	_KeyFlag+1	;volatile
  4617  0738  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4618  0739  0008               	return
  4619  073A                     __end_of_TurnKeyFlags:	
  4620  073A                     __ptext28:	
  4621 ;; *************** function _CheckValidTime *****************
  4622 ;; Defined at:
  4623 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4624 ;; Parameters:    Size  Location     Type
  4625 ;;		None
  4626 ;; Auto vars:     Size  Location     Type
  4627 ;;		None
  4628 ;; Return value:  Size  Location     Type
  4629 ;;                  1    wreg      void 
  4630 ;; Registers used:
  4631 ;;		wreg, status,2, status,0
  4632 ;; Tracked objects:
  4633 ;;		On entry : 0/0
  4634 ;;		On exit  : 0/0
  4635 ;;		Unchanged: 0/0
  4636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4637 ;;      Params:         0       0       0       0
  4638 ;;      Locals:         0       0       0       0
  4639 ;;      Temps:          0       0       0       0
  4640 ;;      Totals:         0       0       0       0
  4641 ;;Total ram usage:        0 bytes
  4642 ;; Hardware stack levels used:    1
  4643 ;; Hardware stack levels required when called:    1
  4644 ;; This function calls:
  4645 ;;		Nothing
  4646 ;; This function is called by:
  4647 ;;		_CheckTouchKey
  4648 ;; This function uses a non-reentrant model
  4649 ;;
  4650                           
  4651                           
  4652                           ;psect for function _CheckValidTime
  4653  073A                     _CheckValidTime:	
  4654  073A                     l3284:	
  4655                           ;incstack = 0
  4656                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  4657                           
  4658  073A  1283               	bcf	3,5	;RP0=0, select bank0
  4659  073B  1303               	bcf	3,6	;RP1=0, select bank0
  4660  073C  0835               	movf	_KeyFlag+1,w	;volatile
  4661  073D  0434               	iorwf	_KeyFlag,w	;volatile
  4662  073E  1903               	btfsc	3,2
  4663  073F  2F4C               	goto	l3290
  4664  0740  1683               	bsf	3,5	;RP0=1, select bank1
  4665  0741  0AA8               	incf	CheckValidTime@F87^(0+128),f
  4666  0742  1903               	skipnz
  4667  0743  0AA9               	incf	(CheckValidTime@F87+1)^(0+128),f
  4668  0744  303A               	movlw	58
  4669  0745  0229               	subwf	(CheckValidTime@F87+1)^(0+128),w
  4670  0746  3098               	movlw	152
  4671  0747  1903               	skipnz
  4672  0748  0228               	subwf	CheckValidTime@F87^(0+128),w
  4673  0749  1C03               	skipc
  4674  074A  0008               	return
  4675  074B  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4676  074C                     l3290:	
  4677  074C  1683               	bsf	3,5	;RP0=1, select bank1
  4678  074D  01A8               	clrf	CheckValidTime@F87^(0+128)
  4679  074E  01A9               	clrf	(CheckValidTime@F87+1)^(0+128)
  4680  074F  0008               	return
  4681  0750                     __end_of_CheckValidTime:	
  4682  0750                     __ptext24:	
  4683 ;; *************** function _KeyClearIn *****************
  4684 ;; Defined at:
  4685 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;		None
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;  51              1    4[COMMON] unsigned char 
  4690 ;; Return value:  Size  Location     Type
  4691 ;;                  1    wreg      void 
  4692 ;; Registers used:
  4693 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4694 ;; Tracked objects:
  4695 ;;		On entry : 300/0
  4696 ;;		On exit  : 0/0
  4697 ;;		Unchanged: 0/0
  4698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4699 ;;      Params:         0       0       0       0
  4700 ;;      Locals:         1       0       0       0
  4701 ;;      Temps:          0       0       0       0
  4702 ;;      Totals:         1       0       0       0
  4703 ;;Total ram usage:        1 bytes
  4704 ;; Hardware stack levels used:    1
  4705 ;; Hardware stack levels required when called:    3
  4706 ;; This function calls:
  4707 ;;		_KeyClearOne
  4708 ;;		_KeyIsIn
  4709 ;; This function is called by:
  4710 ;;		_TurnKeyFlags
  4711 ;; This function uses a non-reentrant model
  4712 ;;
  4713                           
  4714                           
  4715                           ;psect for function _KeyClearIn
  4716  0750                     _KeyClearIn:	
  4717  0750                     l2796:	
  4718                           ;incstack = 0
  4719                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4720                           
  4721  0750  01F4               	clrf	KeyClearIn@51
  4722  0751                     l2802:	
  4723  0751  0874               	movf	KeyClearIn@51,w
  4724  0752  2656  118A         	fcall	_KeyIsIn
  4725  0754  3A00               	xorlw	0
  4726  0755  1D03               	skipz
  4727  0756  2F5A               	goto	l2806
  4728  0757  0874               	movf	KeyClearIn@51,w
  4729  0758  266A  118A         	fcall	_KeyClearOne
  4730  075A                     l2806:	
  4731  075A  3002               	movlw	2
  4732  075B  0AF4               	incf	KeyClearIn@51,f
  4733  075C  0274               	subwf	KeyClearIn@51,w
  4734  075D  1803               	btfsc	3,0
  4735  075E  0008               	return
  4736  075F  2F51               	goto	l2802
  4737  0760                     __end_of_KeyClearIn:	
  4738  0760                     __ptext19:	
  4739 ;; *************** function _Refurbish_Sfr *****************
  4740 ;; Defined at:
  4741 ;;		line 85 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;		None
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;		None
  4746 ;; Return value:  Size  Location     Type
  4747 ;;                  1    wreg      void 
  4748 ;; Registers used:
  4749 ;;		wreg, status,2, status,0
  4750 ;; Tracked objects:
  4751 ;;		On entry : 200/0
  4752 ;;		On exit  : 300/0
  4753 ;;		Unchanged: 0/0
  4754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4755 ;;      Params:         0       0       0       0
  4756 ;;      Locals:         0       0       0       0
  4757 ;;      Temps:          0       0       0       0
  4758 ;;      Totals:         0       0       0       0
  4759 ;;Total ram usage:        0 bytes
  4760 ;; Hardware stack levels used:    1
  4761 ;; Hardware stack levels required when called:    1
  4762 ;; This function calls:
  4763 ;;		Nothing
  4764 ;; This function is called by:
  4765 ;;		_WorkSleep
  4766 ;;		_main
  4767 ;; This function uses a non-reentrant model
  4768 ;;
  4769                           
  4770                           
  4771                           ;psect for function _Refurbish_Sfr
  4772  0760                     _Refurbish_Sfr:	
  4773                           
  4774                           ;main.c: 88: PIE1 = 2;
  4775                           
  4776                           ;incstack = 0
  4777                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  4778  0760  3002               	movlw	2
  4779  0761  1283               	bcf	3,5	;RP0=0, select bank0
  4780  0762  008E               	movwf	14	;volatile
  4781                           
  4782                           ;main.c: 89: PR2 = 250;
  4783  0763  30FA               	movlw	250
  4784  0764  0091               	movwf	17	;volatile
  4785                           
  4786                           ;main.c: 90: INTCON = 0XC0;
  4787  0765  30C0               	movlw	192
  4788  0766  008B               	movwf	11	;volatile
  4789                           
  4790                           ;main.c: 91: if (4 != T2CON)
  4791  0767  3004               	movlw	4
  4792  0768  0613               	xorwf	19,w	;volatile
  4793  0769  1903               	btfsc	3,2
  4794  076A  0008               	return
  4795                           
  4796                           ;main.c: 92: T2CON = 4;
  4797  076B  3004               	movlw	4
  4798  076C  0093               	movwf	19	;volatile
  4799  076D  0008               	return
  4800  076E                     __end_of_Refurbish_Sfr:	
  4801  076E                     PL2:	
  4802  076E  0800               	movf	0,w
  4803  076F  00CE               	movwf	CheckKeyOldValue@80
  4804  0770  0A84               	incf	4,f
  4805  0771  0800               	movf	0,w
  4806  0772  00CF               	movwf	CheckKeyOldValue@80+1
  4807  0773  084C               	movf	CheckKeyOldValue@79,w
  4808  0774  02CE               	subwf	CheckKeyOldValue@80,f
  4809  0775  084D               	movf	CheckKeyOldValue@79+1,w
  4810  0776  1C03               	skipc
  4811  0777  03CF               	decf	CheckKeyOldValue@80+1,f
  4812  0778  02CF               	subwf	CheckKeyOldValue@80+1,f
  4813  0779  3000               	movlw	0
  4814  077A  024F               	subwf	CheckKeyOldValue@80+1,w
  4815  077B  3402               	retlw	2
  4816  077C                     __end_ofPL2:	
  4817  077C                     PL4:	
  4818  077C  00CC               	movwf	??_CheckOnceResult
  4819  077D  0A84               	incf	4,f
  4820  077E  0800               	movf	0,w
  4821  077F  00CD               	movwf	??_CheckOnceResult+1
  4822  0780  0855               	movf	CheckOnceResult@69,w
  4823  0781  074C               	addwf	??_CheckOnceResult,w
  4824  0782  00CE               	movwf	??_CheckOnceResult+2
  4825  0783  084D               	movf	??_CheckOnceResult+1,w
  4826  0784  1803               	skipnc
  4827  0785  0A4D               	incf	??_CheckOnceResult+1,w
  4828  0786  00CF               	movwf	??_CheckOnceResult+3
  4829  0787  0857               	movf	CheckOnceResult@71+1,w
  4830  0788  024F               	subwf	??_CheckOnceResult+3,w
  4831  0789  1D03               	skipz
  4832  078A  0008               	return
  4833  078B  0856               	movf	CheckOnceResult@71,w
  4834  078C  024E               	subwf	??_CheckOnceResult+2,w
  4835  078D  0008               	return
  4836  078E                     __end_ofPL4:	
  4837  078E                     PL8:	
  4838  078E  0084               	movwf	4
  4839  078F  0800               	movf	0,w
  4840  0790  00CC               	movwf	??_CheckOnceResult
  4841  0791  0A84               	incf	4,f
  4842  0792  0800               	movf	0,w
  4843  0793  00CD               	movwf	??_CheckOnceResult+1
  4844  0794  0008               	return
  4845  0795                     __end_ofPL8:	
  4846  0795                     PL12:	
  4847  0795  0084               	movwf	4
  4848  0796  084C               	movf	??_SystemEnterSleep,w
  4849  0797  0080               	movwf	0
  4850  0798  0A84               	incf	4,f
  4851  0799  084D               	movf	??_SystemEnterSleep+1,w
  4852  079A  0080               	movwf	0
  4853  079B  1003               	clrc
  4854  079C  0D54               	rlf	SystemEnterSleep@91,w
  4855  079D  3EA4               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4856  079E  0084               	movwf	4
  4857  079F  0008               	return
  4858  07A0                     __end_ofPL12:	
  4859  07A0                     PL14:	
  4860  07A0  0084               	movwf	4
  4861  07A1  0874               	movf	??_CheckKeyOldValue,w
  4862  07A2  0080               	movwf	0
  4863  07A3  0A84               	incf	4,f
  4864  07A4  0875               	movf	??_CheckKeyOldValue+1,w
  4865  07A5  0080               	movwf	0
  4866  07A6  1003               	clrc
  4867  07A7  0D50               	rlf	CheckKeyOldValue@78,w
  4868  07A8  3EA4               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4869  07A9  0084               	movwf	4
  4870  07AA  0008               	return
  4871  07AB                     __end_ofPL14:	
  4872  07AB                     PL16:	
  4873  07AB  0084               	movwf	4
  4874  07AC  0800               	movf	0,w
  4875  07AD  00CC               	movwf	??_SystemEnterSleep
  4876  07AE  0A84               	incf	4,f
  4877  07AF  0800               	movf	0,w
  4878  07B0  00CD               	movwf	??_SystemEnterSleep+1
  4879  07B1  0008               	return
  4880  07B2                     __end_ofPL16:	
  4881  07B2                     PL20:	
  4882  07B2  0800               	movf	0,w
  4883  07B3  00F4               	movwf	??_CheckKeyOldValue
  4884  07B4  0A84               	incf	4,f
  4885  07B5  0800               	movf	0,w
  4886  07B6  00F5               	movwf	??_CheckKeyOldValue+1
  4887  07B7  1003               	clrc
  4888  07B8  0D50               	rlf	CheckKeyOldValue@78,w
  4889  07B9  0008               	return
  4890  07BA                     __end_ofPL20:	
  4891  07BA                     PL22:	
  4892  07BA  0180               	clrf	0
  4893  07BB  0A84               	incf	4,f
  4894  07BC  0180               	clrf	0
  4895  07BD  1003               	clrc
  4896  07BE  0D72               	rlf	KeyClearOne@49,w
  4897  07BF  0008               	return
  4898  07C0                     __end_ofPL22:	
  4899  07C0                     PL24:	
  4900  07C0  3041               	movlw	65
  4901  07C1  1683               	bsf	3,5	;RP0=1, select bank1
  4902  07C2  0095               	movwf	21	;volatile
  4903  07C3  1415               	bsf	21,0	;volatile
  4904  07C4  0196               	clrf	22	;volatile
  4905  07C5  0008               	return
  4906  07C6                     __end_ofPL24:	
  4907  07C6                     PL28:	
  4908  07C6  084C               	movf	CheckKeyOldValue@79,w
  4909  07C7  0080               	movwf	0
  4910  07C8  0A84               	incf	4,f
  4911  07C9  084D               	movf	CheckKeyOldValue@79+1,w
  4912  07CA  0080               	movwf	0
  4913  07CB  0008               	return
  4914  07CC                     __end_ofPL28:	
  4915  07CC                     PL30:	
  4916  07CC  0DD2               	rlf	SystemEnterSleep@92,f
  4917  07CD  0DD3               	rlf	SystemEnterSleep@92+1,f
  4918  07CE  0AD4               	incf	SystemEnterSleep@91,f
  4919  07CF  0254               	subwf	SystemEnterSleep@91,w
  4920  07D0  0008               	return
  4921  07D1                     __end_ofPL30:	
  4922  07D1                     PL40:	
  4923  07D1  01D4               	clrf	SystemEnterSleep@91
  4924  07D2  01D2               	clrf	SystemEnterSleep@92
  4925  07D3  0AD2               	incf	SystemEnterSleep@92,f
  4926  07D4  01D3               	clrf	SystemEnterSleep@92+1
  4927  07D5  0008               	return
  4928  07D6                     __end_ofPL40:	
  4929                           
  4930                           	psect	text34
  4931  0F61                     __ptext34:	
  4932 ;; *************** function _Isr_Timer *****************
  4933 ;; Defined at:
  4934 ;;		line 164 in file "C:\mcuproject\scm\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;		None
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;		None
  4939 ;; Return value:  Size  Location     Type
  4940 ;;                  1    wreg      void 
  4941 ;; Registers used:
  4942 ;;		wreg, status,2, status,0
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 300/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4948 ;;      Params:         0       0       0       0
  4949 ;;      Locals:         0       0       0       0
  4950 ;;      Temps:          2       0       0       0
  4951 ;;      Totals:         2       0       0       0
  4952 ;;Total ram usage:        2 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; This function calls:
  4955 ;;		Nothing
  4956 ;; This function is called by:
  4957 ;;		Interrupt level 1
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           
  4962                           ;psect for function _Isr_Timer
  4963  0F61                     _Isr_Timer:	
  4964                           
  4965                           ;main.c: 166: if(TMR2IF)
  4966  0F61  1283               	bcf	3,5	;RP0=0, select bank0
  4967  0F62  1303               	bcf	3,6	;RP1=0, select bank0
  4968  0F63  1C8D               	btfss	13,1	;volatile
  4969  0F64  2F74               	goto	i1l3616
  4970                           
  4971                           ;main.c: 167: {
  4972                           ;main.c: 168: TMR2IF = 0;
  4973  0F65  108D               	bcf	13,1	;volatile
  4974                           
  4975                           ;main.c: 169: if(++MainTime >= 32)
  4976  0F66  3020               	movlw	32
  4977  0F67  0AC9               	incf	_MainTime,f	;volatile
  4978  0F68  0249               	subwf	_MainTime,w	;volatile
  4979  0F69  1C03               	skipc
  4980  0F6A  2F75               	goto	i1l952
  4981                           
  4982                           ;main.c: 170: {
  4983                           ;main.c: 171: MainTime = 0;
  4984  0F6B  01C9               	clrf	_MainTime	;volatile
  4985                           
  4986                           ;main.c: 172: B_MainLoop = 1;
  4987  0F6C  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  4988                           
  4989                           ;main.c: 173: if(++count1s >= 250)
  4990  0F6D  30FA               	movlw	250
  4991  0F6E  0AC8               	incf	_count1s,f
  4992  0F6F  0248               	subwf	_count1s,w
  4993  0F70  1C03               	skipc
  4994  0F71  2F75               	goto	i1l952
  4995                           
  4996                           ;main.c: 174: {
  4997                           ;main.c: 175: count1s = 0;
  4998  0F72  01C8               	clrf	_count1s
  4999  0F73  2F75               	goto	i1l952
  5000  0F74                     i1l3616:	
  5001                           
  5002                           ;main.c: 179: else
  5003                           ;main.c: 180: {
  5004                           ;main.c: 181: PIR1 = 0;
  5005  0F74  018D               	clrf	13	;volatile
  5006  0F75                     i1l952:	
  5007  0F75  0871               	movf	??_Isr_Timer+1,w
  5008  0F76  008A               	movwf	10
  5009  0F77  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5010  0F78  0083               	movwf	3
  5011  0F79  0EFE               	swapf	126,f
  5012  0F7A  0E7E               	swapf	126,w
  5013  0F7B  0009               	retfie
  5014  0F7C                     __end_of_Isr_Timer:	
  5015  007E                     btemp	set	126	;btemp
  5016  007E                     wtemp0	set	126
  5017                           
  5018                           	psect	intentry
  5019  0004                     __pintentry:	
  5020                           ;incstack = 0
  5021                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  5022                           
  5023  0004                     interrupt_function:	
  5024  007E                     saved_w	set	btemp
  5025  0004  00FE               	movwf	btemp
  5026  0005  0E03               	swapf	3,w
  5027  0006  00F0               	movwf	??_Isr_Timer
  5028  0007  080A               	movf	10,w
  5029  0008  00F1               	movwf	??_Isr_Timer+1
  5030  0009  158A  2F61         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    14
    Data        0
    BSS         65
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     34      79
    BANK1            80      4      23
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _wuhuaCtr->_ADC_Sample
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_GetTouchKeyValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _wuhuaCtr->_ADC_Sample
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   13378
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    9375
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             4     4      0    1410
                                             13 BANK0      4     4      0
                         _ADC_Sample
                             ___lmul
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     492
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     492
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1478
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     396
                                              2 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     977
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     837
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     837
                                              0 BANK0      9     9      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3166
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     181
                                              3 COMMON     5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _ADC_Sample
       ___lmul
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     22      4F       4       98.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      4      17       6       28.8%
BANK2               50      0       0       7        0.0%
ABS                  0      0      72       8        0.0%
DATA                 0      0      72       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Nov 14 14:42:17 2024

                        pc 0002                         PL2 076E                         PL4 077C  
                       PL6 03C4                         PL8 078E              ??_KeyClearOne 0072  
    __size_of_TurnKeyFlags 0033                         fsr 0004           ??_CheckValidTime 0072  
                      PL10 03D3                        PL20 07B2                        PL12 0795  
                      PL30 07CC                        PL22 07BA                        PL14 07A0  
                      PL40 07D1                        PL32 03F0                        PL24 07C0  
                      PL16 07AB                        PL34 0FFB                        PL26 03E9  
                      PL18 03E0                        PL36 03F5                        PL28 07C6  
                      PL38 03FA                        l974 02D6                        l968 029A  
                      l986 07F6                        l978 031C                        l988 07F3  
                      l996 0357                        _RA1 0431                        _RB6 0036  
                      _PR2 0011        __size_of_ADC_Sample 00D0                        fsr0 0004  
                      indf 0000          ?_GetTouchKeyValue 0070   __end_of_Table_KeyChannel 0814  
       ??_GetTouchKeyValue 0073               ___ftdiv@cntr 005B               ___ftdiv@sign 0060  
                     l1002 0377                       l1307 00C0                       l1228 06DA  
                     l1246 0724                       l1265 0457                       l4002 057B  
                     l1506 017A                       l1187 053E                       l4020 05D2  
                     l1452 0231                       l1277 0476                       l3214 0696  
                     l3126 06F6                       l4110 01C9                       l4040 0608  
                     l1464 0255                       l4112 01CE                       l4200 0129  
                     l4034 0600                       l4210 013D                       l4140 0202  
                     l4132 01F4                       l4220 0150                       l4212 013E  
                     l4062 0644                       l4054 0634                       l4230 0159  
                     l4222 0151                       l4064 0648                       l3432 0FD2  
                     l3424 0FC6                       l3520 07F9                       l4072 016C  
                     l4144 0210                       l4128 01EC                       l4058 0640  
                     l4066 064E                       l3290 074C                       l2802 0751  
                     l3274 072B                       l4250 0466                       l3434 0FD4  
                     l3514 07EB                       l4138 01F8                       l3284 073A  
                     l4260 046F                       l3444 0FE4                       l3428 0FCB  
                     l3516 07EC                       l3700 02CA                       l2670 0664  
                     l2822 068A                       l2806 075A                       l3454 0FF3  
                     l4094 018D                       l3702 02D2                       l3448 0FE9  
                     l3456 0FF5                       l4184 0446                       l3712 0320  
                     l3800 038A                       l2834 050A                       l4258 046B  
                     l4266 0475                       l3458 0FF9                       l4274 0F84  
                     l2684 0566                       l3740 03AE                       l2686 0567  
                     l2838 0510                       l3662 0278                       l3910 0359  
                     l3734 03BF                       l2864 054C                       l3672 0283  
                     l3664 027A                       l3760 00D6                       l3808 039D  
                     l3904 0351                       l2866 055C                       l3906 0354  
                     l2796 0750                       l3860 04AA                       l3772 0235  
                     l3932 006C                       l3916 0374                       l3782 0253  
                     l3774 0238                       l3678 0284                       l3918 037A  
                     l3848 04A3                       l3784 024A                       l3776 023D  
                     l3696 02BF                       l3688 02A4                       l3952 00AA  
                     l3944 0095                       l3874 04D7                       l3778 0245  
                     l3962 00B6                       l3954 00AC                       l3970 0020  
                     l3964 00B7                       l3878 04DE                       l3894 04FF  
                     l3958 00B2                       l3982 0034                       l3976 0029  
                     l3996 0060                       _ADON 04A8                       _CHS4 04B6  
                     u3305 0311                       u3325 0329                       u3255 02C5  
                     _PIE1 000E                       _PIE2 0110                       u3265 02D0  
                     u3535 04D3                       u3465 0390                       _RAIF 006B  
                     u3805 0588                       u4277 0274                       _INTF 0059  
                     _RBIE 005B                       _RBIF 0058                       u3825 05C3  
                     u3835 05D8                       u3675 0086                       u3845 05E4  
                     _PIR1 000D                       _PIR2 010F                       u3875 0620  
                     u3955 019B                       u3795 0050                       u3985 01D1  
                     _TMR0 0081                       _WPUB 0008                       _main 0F7C  
             ___ftpack@arg 0072               ___ftpack@exp 0075                       btemp 007E  
            ?_KeyStopClear 0070                       start 000B               _TurnKeyFlags 0707  
          __end_of_KeyIsIn 066A            __end_of_KeyHave 068D               ___fttol@exp1 006D  
            ??_Init_System 0072               ___fttol@lval 0069            TurnKeyFlags@F83 0037  
          TurnKeyFlags@F84 0036                      ?_main 0070            __end_of___ftdiv 01C0  
          __end_of___fttol 0219                      _IOCB0 0048                      _T2CON 0013  
 __end_of_SystemEnterSleep 0506            __end_of___lwmod 03A2                      i1l952 0F75  
                    _PORTA 0086                      _PORTB 0006                      _PORTC 0106  
          __end_of_fanInit 03BA                      _TRISA 0085                      _TRISB 0005  
                    _PWMTH 0018                      _TRISC 0105                      _PWMTL 0017  
          __end_of_fanStop 03BF            __end_of_chrgCtr 0800        ___lmul@multiplicand 0050  
      __end_of_KeyClearOne 067F                 _KeyClearIn 0750             fanCtr@fan_temp 005A  
            ___ftpack@sign 0076             __pbitbssCOMMON 03C0                      pclath 000A  
          __end_of_pwmInit 03AE                _ClearResSum 0566                 _KeyCounter 003A  
               _KeyOldData 002C            __end_of_pwmStop 03C4             ??_KeyStopClear 0073  
                    status 0003                      wtemp0 007E            __end_of_workCtr 015E  
               _KeyUpShake 00B0            __initialization 000D               __end_of_main 0FB0  
                   ??_main 0078              ___fttol@sign1 0068        __end_of_Init_System 041D  
                   _ADCON0 0095                     _ADCON1 0096                     _ADRESH 0099  
                   _ADRESL 0098           __end_of___ftpack 0267                     _GODONE 04A9  
                   i1l3616 0F74                     _LDO_EN 04B2                     _INTCON 000B  
         __end_of___lwtoft 0229         __size_of_KeyServer 004B                     _OSCCON 0014  
                   _TMR2IF 0069                     _PWMD0L 0019                     _PWMD1L 001A  
             ??_ADC_Sample 0073                     _TRISB0 0028                     _TRISB6 002E  
                ??_KeyIsIn 0072                  ??_KeyHave 0074              ClearResSum@56 0072  
       __size_of_Isr_Timer 001B  __size_of_CheckKeyOldValue 0064                     ___lmul 00BC  
                   _b_kclr 03C2                     _b_kerr 03C1                     _fanCtr 0061  
                ??___ftdiv 0058                  ??___fttol 0065                  ??___lwmod 0076  
                ??_fanInit 0072                  ??_fanStop 0072                _KeyClearOne 066A  
                ??_chrgCtr 0072                     _result 00AA              _Table_KeyFalg 0806  
            _Table_KeyDown 080E         __end_of_ADC_Sample 0337                     saved_w 007E  
   __size_of_CheckTouchKey 002D                  ??_pwmInit 0072                  ??_pwmStop 0072  
              ?_KeyClearIn 0070                  ??_workCtr 0077            _CheckOnceResult 0575  
         __end_of_wuhuaCtr 0061    __end_of__initialization 001D         __size_of_WorkSleep 002C  
        CheckOnceResult@70 0052          CheckOnceResult@71 0056          CheckOnceResult@72 0053  
        CheckOnceResult@73 0050          CheckOnceResult@68 0058          CheckOnceResult@69 0055  
               ___ftdiv@f1 0055                 ___ftdiv@f2 0052                 ___ftdiv@f3 005C  
               ___fttol@f1 0061             __pcstackCOMMON 0070                _Init_System 03FE  
               __end_ofPL2 077C                 __end_ofPL4 078E                 __end_ofPL6 03D3  
               __end_ofPL8 0795          __end_of_KeyServer 0FFB                 ___lwtoft@c 004F  
     __end_of_KeyStopClear 0707          __end_of_Isr_Timer 0F7C         __size_of_keyLedCtr 0047  
               __pbssBANK0 0020                 __pbssBANK1 00A0               _chrgFullFlag 0042  
__size_of_GetTouchKeyValue 0060               _chrgFullTime 0041         wuhuaCtr@wuhua_temp 0059  
            _CheckTouchKey 0449                 __pmaintext 0F7C                    ?___lmul 004C  
                  ?_fanCtr 0070                 __pintentry 0004        __size_of_KeyClearIn 0010  
           ___lmul@product 0072                  ?___ftpack 0072          __end_of_WorkSleep 0449  
                ?___lwtoft 004F          ?_SystemEnterSleep 0070    __end_of_CheckOnceResult 0656  
                  _KEYCON0 0111                    _KEYCON1 0112                    _KEYCON2 0113  
       ??_SystemEnterSleep 004C                    _B_OnOff 03C5                    _PWMD01H 001E  
   __size_of_Refurbish_Sfr 000E                    _PWMCON0 0015                    _PWMCON1 0016  
                  _PWMCON2 001D       __end_of_Table_KeyCap 0812                 __stringtab 0800  
             ?_ClearResSum 0070                    _KeyData 0079                    _KeyFlag 0034  
                  _KeyIsIn 0656                    _KeyHave 067F             ?_CheckTouchKey 0070  
          ADC_Sample@adldo 0072            ADC_Sample@admax 0055            ADC_Sample@admin 0053  
          ADC_Sample@adsum 004F           _CheckKeyOldValue 068D            __size_of___lmul 0033  
                  ___ftdiv 015E            __size_of_fanCtr 005B                    ___fttol 01C0  
                  ___lwmod 037E          __end_of_keyLedCtr 037E                    _b_kover 03C4  
                  _fanInit 03AE                    _fanDuty 0046                    _fanStop 03BA  
               ??___ftpack 004C                    _chrgCtr 07D6                    __ptext1 00EF  
                  __ptext2 0020                    __ptext3 03BF                    __ptext4 03A2  
                  __ptext5 0337                    __ptext6 037E                    __ptext7 0061  
                  __ptext8 03BA                    __ptext9 03AE                 _lowBatLock 0040  
               _lowBatTime 003F                  ?_wuhuaCtr 0070                 ??___lwtoft 0077  
                  _count1s 0048                 _lowFanTime 003E                    _pwmInit 03A2  
                  _pwmStop 03BF    __size_of_CheckValidTime 0016                    clrloop0 0F5A  
                  _workCtr 00EF       end_of_initialization 001D              _Refurbish_Sfr 0760  
             _KeyOldValue0 00A4               _KeyOldValue1 0024               _KeyOldValue2 0020  
    __size_of_KeyStopClear 0016         SystemEnterSleep@91 0054         SystemEnterSleep@92 0052  
       SystemEnterSleep@93 0050         SystemEnterSleep@94 004E               ?_KeyClearOne 0070  
             _KeyReference 00A0                 ??_wuhuaCtr 0077          CheckValidTime@F87 00A8  
         ?_CheckOnceResult 0070                  KeyIsIn@45 0073                  KeyIsIn@46 0072  
                KeyHave@58 0074                  KeyHave@59 0072               ??_KeyClearIn 0074  
              ___ftdiv@exp 005F            ??_CheckTouchKey 0078               _KeyStopClear 06F1  
         _GetTouchKeyValue 0506             ?_Refurbish_Sfr 0070               ?_Init_System 0070  
           __end_of___lmul 00EF             __end_of_fanCtr 00BC         __end_of_KeyClearIn 0760  
            WorkSleep@time 003B                 _wuhuaValue 00AC                  _KeyMaxSub 0039  
                _KeyResSum 0028                __end_ofPL10 03E0                __end_ofPL20 07BA  
              __end_ofPL12 07A0                __end_ofPL30 07D1                __end_ofPL22 07C0  
              __end_ofPL14 07AB                __end_ofPL40 07D6                __end_ofPL32 03F5  
              __end_ofPL24 07C6                __end_ofPL16 07B2                __end_ofPL34 1000  
              __end_ofPL26 03F0                __end_ofPL18 03E9                __end_ofPL36 03FA  
              __end_ofPL28 07CC                __end_ofPL38 03FE        start_initialization 000D  
                _KeyServer 0FB0                  _Isr_Timer 0F61          workCtr@power_temp 00B2  
     __size_of_ClearResSum 000F              ?_TurnKeyFlags 0070                   ??___lmul 0072  
                 ??_fanCtr 0077          ADC_Sample@ad_temp 0057               _Table_KeyCap 0810  
        __size_of___ftpack 003E                __pbssCOMMON 0079                _fanOverTime 0044  
               ?_KeyServer 0070                  ___latbits 0001          __size_of___lwtoft 0010  
            __pcstackBANK0 004C              __pcstackBANK1 00B2                  _WorkSleep 041D  
           _CheckValidTime 073A   __end_of_CheckKeyOldValue 06F1                 ?_Isr_Timer 0070  
      KeyServer@KeyOldFlag 003C                   ?_KeyIsIn 0070                   ?_KeyHave 0072  
__size_of_SystemEnterSleep 0090            ??_Refurbish_Sfr 0072             ??_TurnKeyFlags 0075  
                __pnvBANK0 006E                  __pnvBANK1 00B6                   ?___ftdiv 0052  
                 ?___fttol 0061                   ?___lwmod 0072                   ?_fanInit 0070  
                 ?_fanStop 0070                   ?_chrgCtr 0070              _shanshuoTime2 0030  
                __pstrings 0800       __size_of_KeyClearOne 0015                  _keyLedCtr 0337  
                _firstLock 00B6     __end_of_CheckValidTime 0750                  _firstTime 006E  
        __size_of_wuhuaCtr 0041                 ?_WorkSleep 0070             ADC_Sample@adch 004D  
                 ?_pwmInit 0070                   ?_pwmStop 0070                   ?_workCtr 0070  
              ADC_Sample@i 004E                ADC_Sample@j 004C                   _KEYDATAH 0117  
                 _KEYDATAL 0116          interrupt_function 0004                  clear_ram0 0F59  
           KeyStopClear@53 0073        CheckKeyOldValue@F77 0038                __stringbase 0805  
     __size_of_Init_System 001F      __end_of_Table_KeyFalg 080E      __end_of_Table_KeyDown 0810  
               ?_keyLedCtr 0070   __end_of_GetTouchKeyValue 0566            ?_CheckValidTime 0070  
              ??_KeyServer 0072          ___lmul@multiplier 004C                  _wuhuaFlag 0047  
              ??_Isr_Timer 0070                   _MainTime 0049                 _ADC_Sample 0267  
         __size_of_KeyIsIn 0014           __size_of_KeyHave 000E           _Table_KeyChannel 0812  
         __size_of___ftdiv 0062           __size_of___fttol 0059           __size_of___lwmod 0024  
                 ___ftpack 0229           __size_of_fanInit 000C         __end_of__stringtab 0806  
         __size_of_fanStop 0005           __size_of_chrgCtr 002A                   ___lwtoft 0219  
                 _b_kover1 03C3                   _b_ksleep 03C0       __end_of_TurnKeyFlags 073A  
                 _fanValue 00AE                   _adresult 004A                   _chrgFlag 0043  
              ??_WorkSleep 0078                   __ptext10 00BC                   __ptext11 0267  
                 __ptext20 0FB0                   __ptext12 0219                   __ptext21 03FE  
                 __ptext13 01C0                   __ptext30 067F                   __ptext22 0449  
                 __ptext14 015E                   __ptext31 066A                   __ptext23 0707  
                 __ptext15 0229                   __ptext32 068D                   __ptext24 0750  
                 __ptext16 07D6                   __ptext33 0656                   __ptext25 06F1  
                 __ptext17 041D                   __ptext34 0F61                   __ptext26 0506  
                 __ptext18 0476                   __ptext27 0566                   __ptext19 0760  
                 __ptext28 073A                   __ptext29 0575           __size_of_pwmInit 000C  
         __size_of_pwmStop 0005               _shanshuoTime 0032                   _count10s 0045  
         __size_of_workCtr 006F   __size_of_CheckOnceResult 00E1         GetTouchKeyValue@62 0077  
       GetTouchKeyValue@63 0075         GetTouchKeyValue@64 0073              __size_of_main 0034  
         _SystemEnterSleep 0476      __end_of_CheckTouchKey 0476         CheckKeyOldValue@80 004E  
       CheckKeyOldValue@78 0050         CheckKeyOldValue@79 004C                   _test_adc 003D  
                 _power_ad 002E                   _workStep 007B                   _wuhuaCtr 0020  
              ??_keyLedCtr 0077          ?_CheckKeyOldValue 0070                   intlevel1 0000  
            ??_ClearResSum 0072         ??_CheckKeyOldValue 0074           ___lwmod@dividend 0074  
              ?_ADC_Sample 0072                  stringcode 0800                 _B_MainLoop 03C6  
        fanCtr@maxFanValue 0059                 _OPTION_REG 0001            ___lwmod@divisor 0072  
          ___lwmod@counter 0076                   stringdir 0800                   stringtab 0800  
            KeyClearOne@49 0072               KeyClearIn@51 0074      __end_of_Refurbish_Sfr 076E  
      __end_of_ClearResSum 0575          ??_CheckOnceResult 004C  
