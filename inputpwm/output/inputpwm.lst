

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Apr 17 12:55:40 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1152A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	pa_nodes0,global,class=CODE,delta=2
    20                           	dabs	1,0x4E,2
    21  0000                     
    22                           ; Version 1.45
    23                           ; Generated 16/11/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F887 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	text0
    58  0000                     __ptext0:	
    59  0014                     _PWM_PRD	set	20
    60  0013                     _PWMR	set	19
    61  000F                     _TMR0PRD	set	15
    62  000E                     _IOCB	set	14
    63  000D                     _WPUB	set	13
    64  0009                     _INTCON	set	9
    65  0008                     _OSCCON	set	8
    66  0007                     _OPTION_REG	set	7
    67  0006                     _TRISB	set	6
    68  0005                     _PORTB	set	5
    69  0001                     _TMR0	set	1
    70  0090                     _PWMS0	set	144
    71  0091                     _PWMS1	set	145
    72  0092                     _PWMS2	set	146
    73  0094                     _PWMCK0	set	148
    74  0095                     _PWMCK1	set	149
    75  0096                     _PWMPRD8	set	150
    76  0097                     _PWMPRD9	set	151
    77  0088                     _PWMR08	set	136
    78  0089                     _PWMR09	set	137
    79  0080                     _PWMEN0	set	128
    80  0081                     _PWMEN1	set	129
    81  0082                     _PWMEN2	set	130
    82  004A                     _T0IF	set	74
    83                           
    84                           	psect	cinit
    85  000B                     start_initialization:	
    86                           ; #config settings
    87                           
    88  000B                     __initialization:	
    89                           
    90                           ; Clear objects allocated to COMMON
    91  000B  01C0               	clrf	__pbssCOMMON& (0+127)
    92  000C  01C1               	clrf	(__pbssCOMMON+1)& (0+127)
    93  000D  01C2               	clrf	(__pbssCOMMON+2)& (0+127)
    94  000E  01C3               	clrf	(__pbssCOMMON+3)& (0+127)
    95  000F  01C4               	clrf	(__pbssCOMMON+4)& (0+127)
    96  0010  01C5               	clrf	(__pbssCOMMON+5)& (0+127)
    97  0011  01C6               	clrf	(__pbssCOMMON+6)& (0+127)
    98                           
    99                           ; Clear objects allocated to BANK0
   100  0012  01A3               	clrf	__pbssBANK0& (0+127)
   101  0013                     end_of_initialization:	
   102                           ;End of C runtime variable initialization code
   103                           
   104  0013                     __end_of__initialization:	
   105  0013  0183               	clrf	3
   106  0014  2874               	ljmp	_main	;jump to C main() function
   107                           
   108                           	psect	bssCOMMON
   109  0040                     __pbssCOMMON:	
   110  0040                     _pb3h:	
   111  0040                     	ds	1
   112  0041                     _pb4max:	
   113  0041                     	ds	1
   114  0042                     _pb4h:	
   115  0042                     	ds	1
   116  0043                     _pb5max:	
   117  0043                     	ds	1
   118  0044                     _pb5h:	
   119  0044                     	ds	1
   120  0045                     _prenub:	
   121  0045                     	ds	1
   122  0046                     _nub:	
   123  0046                     	ds	1
   124                           
   125                           	psect	bssBANK0
   126  0023                     __pbssBANK0:	
   127  0023                     _pb3max:	
   128  0023                     	ds	1
   129                           
   130                           	psect	cstackCOMMON
   131  0047                     __pcstackCOMMON:	
   132  0047                     ?_Init_System:	
   133  0047                     ?_checkPB5:	
   134                           ; 1 bytes @ 0x0
   135                           
   136  0047                     ?_checkPB4:	
   137                           ; 1 bytes @ 0x0
   138                           
   139  0047                     ?_checkPB3:	
   140                           ; 1 bytes @ 0x0
   141                           
   142  0047                     ?_setPWM:	
   143                           ; 1 bytes @ 0x0
   144                           
   145  0047                     ?_main:	
   146                           ; 1 bytes @ 0x0
   147                           
   148  0047                     ?_Timer0_Isr:	
   149                           ; 1 bytes @ 0x0
   150                           
   151  0047                     ??_Timer0_Isr:	
   152                           ; 1 bytes @ 0x0
   153                           
   154                           
   155                           ; 1 bytes @ 0x0
   156  0047                     	ds	2
   157  0049                     ??_Init_System:	
   158  0049                     ??_checkPB5:	
   159                           ; 1 bytes @ 0x2
   160                           
   161  0049                     ??_checkPB4:	
   162                           ; 1 bytes @ 0x2
   163                           
   164  0049                     ??_checkPB3:	
   165                           ; 1 bytes @ 0x2
   166                           
   167  0049                     ??_setPWM:	
   168                           ; 1 bytes @ 0x2
   169                           
   170  0049                     ?___lbmod:	
   171                           ; 1 bytes @ 0x2
   172                           
   173  0049                     ___lbmod@divisor:	
   174                           ; 1 bytes @ 0x2
   175                           
   176                           
   177                           ; 1 bytes @ 0x2
   178  0049                     	ds	1
   179  004A                     ??___lbmod:	
   180                           
   181                           ; 1 bytes @ 0x3
   182  004A                     	ds	1
   183  004B                     ??_main:	
   184                           
   185                           	psect	cstackBANK0
   186  0020                     __pcstackBANK0:	
   187                           ; 1 bytes @ 0x4
   188                           
   189  0020                     ___lbmod@dividend:	
   190                           
   191                           ; 1 bytes @ 0x0
   192  0020                     	ds	1
   193  0021                     ___lbmod@counter:	
   194                           
   195                           ; 1 bytes @ 0x1
   196  0021                     	ds	1
   197  0022                     ___lbmod@rem:	
   198                           
   199                           ; 1 bytes @ 0x2
   200  0022                     	ds	1
   201                           
   202                           	psect	maintext
   203  0074                     __pmaintext:	
   204 ;;
   205 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   206 ;;
   207 ;; *************** function _main *****************
   208 ;; Defined at:
   209 ;;		line 17 in file "C:\SCMCU WorkSpace\inputpwm\inputpwm.c"
   210 ;; Parameters:    Size  Location     Type
   211 ;;		None
   212 ;; Auto vars:     Size  Location     Type
   213 ;;		None
   214 ;; Return value:  Size  Location     Type
   215 ;;                  1    wreg      void 
   216 ;; Registers used:
   217 ;;		wreg, status,2, status,0, pclath, cstack
   218 ;; Tracked objects:
   219 ;;		On entry : B00/0
   220 ;;		On exit  : 0/0
   221 ;;		Unchanged: 0/0
   222 ;; Data sizes:     COMMON   BANK0
   223 ;;      Params:         0       0
   224 ;;      Locals:         0       0
   225 ;;      Temps:          0       0
   226 ;;      Totals:         0       0
   227 ;;Total ram usage:        0 bytes
   228 ;; Hardware stack levels required when called:    2
   229 ;; This function calls:
   230 ;;		_Init_System
   231 ;;		___lbmod
   232 ;;		_checkPB3
   233 ;;		_checkPB4
   234 ;;		_checkPB5
   235 ;;		_setPWM
   236 ;; This function is called by:
   237 ;;		Startup code after reset
   238 ;; This function uses a non-reentrant model
   239 ;;
   240                           
   241                           
   242                           ;psect for function _main
   243  0074                     _main:	
   244                           
   245                           ;inputpwm.c: 20: Init_System();
   246                           
   247                           ;incstack = 0
   248                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   249  0074  2037               	fcall	_Init_System
   250  0075                     l987:	
   251                           
   252                           ;inputpwm.c: 22: {
   253                           ;inputpwm.c: 24: if(prenub != nub)
   254  0075  0845               	movf	_prenub,w
   255  0076  0646               	xorwf	_nub,w
   256  0077  1903               	skipnz
   257  0078  287E               	goto	l997
   258                           
   259                           ;inputpwm.c: 25: {
   260                           ;inputpwm.c: 26: prenub = nub;
   261  0079  0846               	movf	_nub,w
   262  007A  00C5               	movwf	_prenub
   263                           
   264                           ;inputpwm.c: 27: checkPB5();
   265  007B  208B               	fcall	_checkPB5
   266                           
   267                           ;inputpwm.c: 28: checkPB4();
   268  007C  209E               	fcall	_checkPB4
   269                           
   270                           ;inputpwm.c: 29: checkPB3();
   271  007D  20B1               	fcall	_checkPB3
   272  007E                     l997:	
   273                           
   274                           ;inputpwm.c: 30: }
   275                           ;inputpwm.c: 31: if(nub >=201)
   276  007E  30C9               	movlw	201
   277  007F  0246               	subwf	_nub,w
   278  0080  1803               	btfsc	3,0
   279                           
   280                           ;inputpwm.c: 32: {
   281                           ;inputpwm.c: 33: nub = 0;
   282  0081  01C6               	clrf	_nub
   283                           
   284                           ;inputpwm.c: 34: }
   285                           ;inputpwm.c: 36: if(nub % 100 ==0)
   286  0082  3064               	movlw	100
   287  0083  00C9               	movwf	___lbmod@divisor
   288  0084  0846               	movf	_nub,w
   289  0085  2058               	fcall	___lbmod
   290  0086  3A00               	xorlw	0
   291  0087  1D03               	skipz
   292  0088  2875               	goto	l987
   293                           
   294                           ;inputpwm.c: 37: {
   295                           ;inputpwm.c: 38: setPWM();
   296  0089  2015               	fcall	_setPWM
   297  008A  2875               	goto	l987
   298  008B                     __end_of_main:	
   299                           
   300                           	psect	text1
   301  0015                     __ptext1:	
   302 ;; *************** function _setPWM *****************
   303 ;; Defined at:
   304 ;;		line 43 in file "C:\SCMCU WorkSpace\inputpwm\inputpwm.c"
   305 ;; Parameters:    Size  Location     Type
   306 ;;		None
   307 ;; Auto vars:     Size  Location     Type
   308 ;;		None
   309 ;; Return value:  Size  Location     Type
   310 ;;                  1    wreg      void 
   311 ;; Registers used:
   312 ;;		wreg, status,2, status,0
   313 ;; Tracked objects:
   314 ;;		On entry : 0/0
   315 ;;		On exit  : 0/0
   316 ;;		Unchanged: 0/0
   317 ;; Data sizes:     COMMON   BANK0
   318 ;;      Params:         0       0
   319 ;;      Locals:         0       0
   320 ;;      Temps:          0       0
   321 ;;      Totals:         0       0
   322 ;;Total ram usage:        0 bytes
   323 ;; Hardware stack levels used:    1
   324 ;; Hardware stack levels required when called:    1
   325 ;; This function calls:
   326 ;;		Nothing
   327 ;; This function is called by:
   328 ;;		_main
   329 ;; This function uses a non-reentrant model
   330 ;;
   331                           
   332                           
   333                           ;psect for function _setPWM
   334  0015                     _setPWM:	
   335                           
   336                           ;inputpwm.c: 46: PWMS0 = 0;
   337                           
   338                           ;incstack = 0
   339                           ; Regs used in _setPWM: [wreg+status,2+status,0]
   340                           
   341                           ;inputpwm.c: 47: PWMS1 = 0;
   342                           
   343                           ;inputpwm.c: 48: PWMS2 = 0;
   344                           
   345                           ;inputpwm.c: 51: PWMR08 = 0;
   346                           
   347                           ;inputpwm.c: 52: PWMR09 = 0;
   348  0015  2031               	fcall	PL6	;call to abstracted procedure
   349                           
   350                           ;inputpwm.c: 53: PWMR = pb5max * 2;
   351  0016  1003               	clrc
   352  0017  0D43               	rlf	_pb5max,w
   353  0018  0093               	movwf	19	;volatile
   354                           
   355                           ;inputpwm.c: 54: PWMEN0 = 1;
   356                           
   357                           ;inputpwm.c: 57: PWMS0 = 1;
   358                           
   359                           ;inputpwm.c: 58: PWMS1 = 0;
   360                           
   361                           ;inputpwm.c: 59: PWMS2 = 0;
   362                           
   363                           ;inputpwm.c: 62: PWMR08 = 0;
   364                           
   365                           ;inputpwm.c: 63: PWMR09 = 0;
   366  0019  2023               	fcall	PL2	;call to abstracted procedure
   367                           
   368                           ;inputpwm.c: 64: PWMR = pb4max * 2;
   369  001A  1003               	clrc
   370  001B  0D41               	rlf	_pb4max,w
   371  001C  0093               	movwf	19	;volatile
   372                           
   373                           ;inputpwm.c: 65: PWMEN1 = 1;
   374                           
   375                           ;inputpwm.c: 68: PWMS0 = 0;
   376                           
   377                           ;inputpwm.c: 69: PWMS1 = 1;
   378                           
   379                           ;inputpwm.c: 70: PWMS2 = 0;
   380                           
   381                           ;inputpwm.c: 73: PWMR08 = 0;
   382                           
   383                           ;inputpwm.c: 74: PWMR09 = 0;
   384  001D  202A               	fcall	PL4	;call to abstracted procedure
   385                           
   386                           ;inputpwm.c: 75: PWMR = pb3max * 2;
   387  001E  1003               	clrc
   388  001F  0D23               	rlf	_pb3max,w
   389  0020  0093               	movwf	19	;volatile
   390                           
   391                           ;inputpwm.c: 76: PWMEN2 = 1;
   392  0021  1510               	bsf	16,2	;volatile
   393  0022  0008               	return
   394  0023                     __end_of_setPWM:	
   395  0023                     PL2:	
   396  0023  1410               	bsf	16,0	;volatile
   397  0024  1412               	bsf	18,0	;volatile
   398  0025  1092               	bcf	18,1	;volatile
   399  0026  1112               	bcf	18,2	;volatile
   400  0027  1011               	bcf	17,0	;volatile
   401  0028  1091               	bcf	17,1	;volatile
   402  0029  0008               	return
   403  002A                     __end_ofPL2:	
   404  002A                     PL4:	
   405  002A  1490               	bsf	16,1	;volatile
   406  002B  1012               	bcf	18,0	;volatile
   407  002C  1492               	bsf	18,1	;volatile
   408  002D  1112               	bcf	18,2	;volatile
   409  002E  1011               	bcf	17,0	;volatile
   410  002F  1091               	bcf	17,1	;volatile
   411  0030  0008               	return
   412  0031                     __end_ofPL4:	
   413  0031                     PL6:	
   414  0031  1012               	bcf	18,0	;volatile
   415  0032  1092               	bcf	18,1	;volatile
   416  0033  1112               	bcf	18,2	;volatile
   417  0034  1011               	bcf	17,0	;volatile
   418  0035  1091               	bcf	17,1	;volatile
   419  0036  0008               	return
   420  0037                     __end_ofPL6:	
   421                           
   422                           	psect	text2
   423  008B                     __ptext2:	
   424 ;; *************** function _checkPB5 *****************
   425 ;; Defined at:
   426 ;;		line 80 in file "C:\SCMCU WorkSpace\inputpwm\inputpwm.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;		None
   429 ;; Auto vars:     Size  Location     Type
   430 ;;		None
   431 ;; Return value:  Size  Location     Type
   432 ;;                  1    wreg      void 
   433 ;; Registers used:
   434 ;;		wreg, status,2, status,0
   435 ;; Tracked objects:
   436 ;;		On entry : 0/0
   437 ;;		On exit  : 0/0
   438 ;;		Unchanged: 0/0
   439 ;; Data sizes:     COMMON   BANK0
   440 ;;      Params:         0       0
   441 ;;      Locals:         0       0
   442 ;;      Temps:          1       0
   443 ;;      Totals:         1       0
   444 ;;Total ram usage:        1 bytes
   445 ;; Hardware stack levels used:    1
   446 ;; Hardware stack levels required when called:    1
   447 ;; This function calls:
   448 ;;		Nothing
   449 ;; This function is called by:
   450 ;;		_main
   451 ;; This function uses a non-reentrant model
   452 ;;
   453                           
   454                           
   455                           ;psect for function _checkPB5
   456  008B                     _checkPB5:	
   457                           
   458                           ;inputpwm.c: 82: if(((PORTB) >> (3)&1) == 1)
   459                           
   460                           ;incstack = 0
   461                           ; Regs used in _checkPB5: [wreg+status,2+status,0]
   462  008B  0805               	movf	5,w	;volatile
   463  008C  00C9               	movwf	??_checkPB5
   464  008D  1003               	clrc
   465  008E  0CC9               	rrf	??_checkPB5,f
   466  008F  1003               	clrc
   467  0090  0CC9               	rrf	??_checkPB5,f
   468  0091  1003               	clrc
   469  0092  0CC9               	rrf	??_checkPB5,f
   470  0093  1C49               	btfss	??_checkPB5,0
   471  0094  2897               	goto	l787
   472                           
   473                           ;inputpwm.c: 83: {
   474                           ;inputpwm.c: 84: pb5h++;
   475  0095  0AC4               	incf	_pb5h,f
   476                           
   477                           ;inputpwm.c: 85: }
   478  0096  0008               	return
   479  0097                     l787:	
   480                           
   481                           ;inputpwm.c: 86: else
   482                           ;inputpwm.c: 87: {
   483                           ;inputpwm.c: 88: if(pb5h !=0)
   484  0097  0844               	movf	_pb5h,w
   485  0098  1903               	btfsc	3,2
   486  0099  289C               	goto	l791
   487                           
   488                           ;inputpwm.c: 89: {
   489                           ;inputpwm.c: 90: pb5max = pb5h;
   490  009A  0844               	movf	_pb5h,w
   491  009B  00C3               	movwf	_pb5max
   492  009C                     l791:	
   493                           
   494                           ;inputpwm.c: 91: }
   495                           ;inputpwm.c: 92: pb5h = 0;
   496  009C  01C4               	clrf	_pb5h
   497  009D  0008               	return
   498  009E                     __end_of_checkPB5:	
   499                           
   500                           	psect	text3
   501  009E                     __ptext3:	
   502 ;; *************** function _checkPB4 *****************
   503 ;; Defined at:
   504 ;;		line 96 in file "C:\SCMCU WorkSpace\inputpwm\inputpwm.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;		None
   507 ;; Auto vars:     Size  Location     Type
   508 ;;		None
   509 ;; Return value:  Size  Location     Type
   510 ;;                  1    wreg      void 
   511 ;; Registers used:
   512 ;;		wreg, status,2, status,0
   513 ;; Tracked objects:
   514 ;;		On entry : 0/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMMON   BANK0
   518 ;;      Params:         0       0
   519 ;;      Locals:         0       0
   520 ;;      Temps:          1       0
   521 ;;      Totals:         1       0
   522 ;;Total ram usage:        1 bytes
   523 ;; Hardware stack levels used:    1
   524 ;; Hardware stack levels required when called:    1
   525 ;; This function calls:
   526 ;;		Nothing
   527 ;; This function is called by:
   528 ;;		_main
   529 ;; This function uses a non-reentrant model
   530 ;;
   531                           
   532                           
   533                           ;psect for function _checkPB4
   534  009E                     _checkPB4:	
   535                           
   536                           ;inputpwm.c: 98: if(((PORTB) >> (4)&1) == 1)
   537                           
   538                           ;incstack = 0
   539                           ; Regs used in _checkPB4: [wreg+status,2+status,0]
   540  009E  0805               	movf	5,w	;volatile
   541  009F  00C9               	movwf	??_checkPB4
   542  00A0  3004               	movlw	4
   543  00A1                     u35:	
   544  00A1  1003               	clrc
   545  00A2  0CC9               	rrf	??_checkPB4,f
   546  00A3  3EFF               	addlw	-1
   547  00A4  1D03               	skipz
   548  00A5  28A1               	goto	u35
   549  00A6  1C49               	btfss	??_checkPB4,0
   550  00A7  28AA               	goto	l797
   551                           
   552                           ;inputpwm.c: 99: {
   553                           ;inputpwm.c: 100: pb4h++;
   554  00A8  0AC2               	incf	_pb4h,f
   555                           
   556                           ;inputpwm.c: 101: }
   557  00A9  0008               	return
   558  00AA                     l797:	
   559                           
   560                           ;inputpwm.c: 102: else
   561                           ;inputpwm.c: 103: {
   562                           ;inputpwm.c: 104: if(pb4h !=0)
   563  00AA  0842               	movf	_pb4h,w
   564  00AB  1903               	btfsc	3,2
   565  00AC  28AF               	goto	l801
   566                           
   567                           ;inputpwm.c: 105: {
   568                           ;inputpwm.c: 106: pb4max = pb4h;
   569  00AD  0842               	movf	_pb4h,w
   570  00AE  00C1               	movwf	_pb4max
   571  00AF                     l801:	
   572                           
   573                           ;inputpwm.c: 107: }
   574                           ;inputpwm.c: 108: pb4h = 0;
   575  00AF  01C2               	clrf	_pb4h
   576  00B0  0008               	return
   577  00B1                     __end_of_checkPB4:	
   578                           
   579                           	psect	text4
   580  00B1                     __ptext4:	
   581 ;; *************** function _checkPB3 *****************
   582 ;; Defined at:
   583 ;;		line 112 in file "C:\SCMCU WorkSpace\inputpwm\inputpwm.c"
   584 ;; Parameters:    Size  Location     Type
   585 ;;		None
   586 ;; Auto vars:     Size  Location     Type
   587 ;;		None
   588 ;; Return value:  Size  Location     Type
   589 ;;                  1    wreg      void 
   590 ;; Registers used:
   591 ;;		wreg, status,2, status,0
   592 ;; Tracked objects:
   593 ;;		On entry : 0/0
   594 ;;		On exit  : 0/0
   595 ;;		Unchanged: 0/0
   596 ;; Data sizes:     COMMON   BANK0
   597 ;;      Params:         0       0
   598 ;;      Locals:         0       0
   599 ;;      Temps:          1       0
   600 ;;      Totals:         1       0
   601 ;;Total ram usage:        1 bytes
   602 ;; Hardware stack levels used:    1
   603 ;; Hardware stack levels required when called:    1
   604 ;; This function calls:
   605 ;;		Nothing
   606 ;; This function is called by:
   607 ;;		_main
   608 ;; This function uses a non-reentrant model
   609 ;;
   610                           
   611                           
   612                           ;psect for function _checkPB3
   613  00B1                     _checkPB3:	
   614                           
   615                           ;inputpwm.c: 114: if(((PORTB) >> (3)&1) == 1)
   616                           
   617                           ;incstack = 0
   618                           ; Regs used in _checkPB3: [wreg+status,2+status,0]
   619  00B1  0805               	movf	5,w	;volatile
   620  00B2  00C9               	movwf	??_checkPB3
   621  00B3  1003               	clrc
   622  00B4  0CC9               	rrf	??_checkPB3,f
   623  00B5  1003               	clrc
   624  00B6  0CC9               	rrf	??_checkPB3,f
   625  00B7  1003               	clrc
   626  00B8  0CC9               	rrf	??_checkPB3,f
   627  00B9  1C49               	btfss	??_checkPB3,0
   628  00BA  28BD               	goto	l893
   629                           
   630                           ;inputpwm.c: 115: {
   631                           ;inputpwm.c: 116: pb3h++;
   632  00BB  0AC0               	incf	_pb3h,f
   633                           
   634                           ;inputpwm.c: 117: }
   635  00BC  0008               	return
   636  00BD                     l893:	
   637                           
   638                           ;inputpwm.c: 118: else
   639                           ;inputpwm.c: 119: {
   640                           ;inputpwm.c: 120: if(pb3h !=0)
   641  00BD  0840               	movf	_pb3h,w
   642  00BE  1903               	btfsc	3,2
   643  00BF  28C2               	goto	l897
   644                           
   645                           ;inputpwm.c: 121: {
   646                           ;inputpwm.c: 122: pb3max = pb3h;
   647  00C0  0840               	movf	_pb3h,w
   648  00C1  00A3               	movwf	_pb3max
   649  00C2                     l897:	
   650                           
   651                           ;inputpwm.c: 123: }
   652                           ;inputpwm.c: 124: pb3h = 0;
   653  00C2  01C0               	clrf	_pb3h
   654  00C3  0008               	return
   655  00C4                     __end_of_checkPB3:	
   656                           
   657                           	psect	text5
   658  0058                     __ptext5:	
   659 ;; *************** function ___lbmod *****************
   660 ;; Defined at:
   661 ;;		line 4 in file "C:\¹¤¾ß\µ¥Æ¬»úÑ§Ï°×ÊÁÏ\SC8P\SCMCU_IDE_V2.00.07\data\sources\common\lbmod.c"
   662 ;; Parameters:    Size  Location     Type
   663 ;;  dividend        1    wreg     unsigned char 
   664 ;;  divisor         1    2[COMMON] unsigned char 
   665 ;; Auto vars:     Size  Location     Type
   666 ;;  dividend        1    0[BANK0 ] unsigned char 
   667 ;;  rem             1    2[BANK0 ] unsigned char 
   668 ;;  counter         1    1[BANK0 ] unsigned char 
   669 ;; Return value:  Size  Location     Type
   670 ;;                  1    wreg      unsigned char 
   671 ;; Registers used:
   672 ;;		wreg, status,2, status,0
   673 ;; Tracked objects:
   674 ;;		On entry : 0/0
   675 ;;		On exit  : 0/0
   676 ;;		Unchanged: 0/0
   677 ;; Data sizes:     COMMON   BANK0
   678 ;;      Params:         1       0
   679 ;;      Locals:         0       3
   680 ;;      Temps:          1       0
   681 ;;      Totals:         2       3
   682 ;;Total ram usage:        5 bytes
   683 ;; Hardware stack levels used:    1
   684 ;; Hardware stack levels required when called:    1
   685 ;; This function calls:
   686 ;;		Nothing
   687 ;; This function is called by:
   688 ;;		_main
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692                           
   693                           ;psect for function ___lbmod
   694  0058                     ___lbmod:	
   695                           
   696                           ;incstack = 0
   697                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
   698                           ;___lbmod@dividend stored from wreg
   699  0058  00A0               	movwf	___lbmod@dividend
   700  0059  3008               	movlw	8
   701  005A  00A1               	movwf	___lbmod@counter
   702  005B  01A2               	clrf	___lbmod@rem
   703  005C                     l971:	
   704  005C  0820               	movf	___lbmod@dividend,w
   705  005D  00CA               	movwf	??___lbmod
   706  005E  3007               	movlw	7
   707  005F  1003               	clrc
   708  0060                     L1:	
   709  0060  0CCA               	rrf	??___lbmod,f
   710  0061  3EFF               	addlw	-1
   711  0062  1003               	clrc
   712  0063  1D03               	skipz
   713  0064  2860               	goto	L1
   714  0065  0D22               	rlf	___lbmod@rem,w
   715  0066  044A               	iorwf	??___lbmod,w
   716  0067  00A2               	movwf	___lbmod@rem
   717  0068  1003               	clrc
   718  0069  0DA0               	rlf	___lbmod@dividend,f
   719  006A  0849               	movf	___lbmod@divisor,w
   720  006B  0222               	subwf	___lbmod@rem,w
   721  006C  1C03               	skipc
   722  006D  2870               	goto	l979
   723  006E  0849               	movf	___lbmod@divisor,w
   724  006F  02A2               	subwf	___lbmod@rem,f
   725  0070                     l979:	
   726  0070  0BA1               	decfsz	___lbmod@counter,f
   727  0071  285C               	goto	l971
   728  0072  0822               	movf	___lbmod@rem,w
   729  0073  0008               	return
   730  0074                     __end_of___lbmod:	
   731                           
   732                           	psect	text6
   733  0037                     __ptext6:	
   734 ;; *************** function _Init_System *****************
   735 ;; Defined at:
   736 ;;		line 135 in file "C:\SCMCU WorkSpace\inputpwm\inputpwm.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;		None
   739 ;; Auto vars:     Size  Location     Type
   740 ;;		None
   741 ;; Return value:  Size  Location     Type
   742 ;;                  1    wreg      void 
   743 ;; Registers used:
   744 ;;		wreg, status,2
   745 ;; Tracked objects:
   746 ;;		On entry : B00/0
   747 ;;		On exit  : 0/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMMON   BANK0
   750 ;;      Params:         0       0
   751 ;;      Locals:         0       0
   752 ;;      Temps:          0       0
   753 ;;      Totals:         0       0
   754 ;;Total ram usage:        0 bytes
   755 ;; Hardware stack levels used:    1
   756 ;; Hardware stack levels required when called:    1
   757 ;; This function calls:
   758 ;;		Nothing
   759 ;; This function is called by:
   760 ;;		_main
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764                           
   765                           ;psect for function _Init_System
   766  0037                     _Init_System:	
   767                           
   768                           ;incstack = 0
   769                           ; Regs used in _Init_System: [wreg+status,2]
   770  0037  0000               	nop	;# 
   771  0038  0064               	clrwdt	;# 
   772                           
   773                           ;inputpwm.c: 139: INTCON = 0;
   774  0039  0189               	clrf	9	;volatile
   775                           
   776                           ;inputpwm.c: 140: OSCCON = 0X71;
   777  003A  3071               	movlw	113
   778  003B  0088               	movwf	8	;volatile
   779                           
   780                           ;inputpwm.c: 141: WPUB = 0xFF;
   781  003C  30FF               	movlw	255
   782  003D  008D               	movwf	13	;volatile
   783                           
   784                           ;inputpwm.c: 142: OPTION_REG = 0xD0;
   785  003E  30D0               	movlw	208
   786  003F  0087               	movwf	7	;volatile
   787                           
   788                           ;inputpwm.c: 143: TMR0 = 0;
   789  0040  0181               	clrf	1	;volatile
   790                           
   791                           ;inputpwm.c: 144: INTCON = 0xE0;
   792  0041  30E0               	movlw	224
   793  0042  0089               	movwf	9	;volatile
   794                           
   795                           ;inputpwm.c: 145: TMR0PRD = 100;
   796  0043  3064               	movlw	100
   797  0044  008F               	movwf	15	;volatile
   798                           
   799                           ;inputpwm.c: 148: TRISB = 0B00111000;
   800  0045  3038               	movlw	56
   801  0046  0086               	movwf	6	;volatile
   802                           
   803                           ;inputpwm.c: 149: PORTB = 0B00111000;
   804  0047  0085               	movwf	5	;volatile
   805                           
   806                           ;inputpwm.c: 150: IOCB = 0xFF;
   807  0048  30FF               	movlw	255
   808  0049  008E               	movwf	14	;volatile
   809                           
   810                           ;inputpwm.c: 153: PWMCK0 = 0;
   811  004A  1212               	bcf	18,4	;volatile
   812                           
   813                           ;inputpwm.c: 154: PWMCK1 = 1;
   814  004B  1692               	bsf	18,5	;volatile
   815                           
   816                           ;inputpwm.c: 155: PWMPRD8 = 0;
   817  004C  1312               	bcf	18,6	;volatile
   818                           
   819                           ;inputpwm.c: 156: PWMPRD9 = 0;
   820  004D  1392               	bcf	18,7	;volatile
   821                           
   822                           ;inputpwm.c: 157: PWM_PRD = 199;
   823  004E  30C7               	movlw	199
   824  004F  0094               	movwf	20	;volatile
   825                           
   826                           ;inputpwm.c: 160: PWMS0 = 0;
   827                           
   828                           ;inputpwm.c: 161: PWMS1 = 0;
   829                           
   830                           ;inputpwm.c: 162: PWMS2 = 0;
   831                           
   832                           ;inputpwm.c: 165: PWMR08 = 0;
   833                           
   834                           ;inputpwm.c: 166: PWMR09 = 0;
   835  0050  2031               	fcall	PL6	;call to abstracted procedure
   836                           
   837                           ;inputpwm.c: 167: PWMR = 0;
   838  0051  0193               	clrf	19	;volatile
   839                           
   840                           ;inputpwm.c: 168: PWMEN0 = 1;
   841                           
   842                           ;inputpwm.c: 170: PWMS0 = 1;
   843                           
   844                           ;inputpwm.c: 171: PWMS1 = 0;
   845                           
   846                           ;inputpwm.c: 172: PWMS2 = 0;
   847                           
   848                           ;inputpwm.c: 173: PWMR08 = 0;
   849                           
   850                           ;inputpwm.c: 174: PWMR09 = 0;
   851  0052  2023               	fcall	PL2	;call to abstracted procedure
   852                           
   853                           ;inputpwm.c: 175: PWMR = 0;
   854  0053  0193               	clrf	19	;volatile
   855                           
   856                           ;inputpwm.c: 176: PWMEN1 = 1;
   857                           
   858                           ;inputpwm.c: 179: PWMS0 = 0;
   859                           
   860                           ;inputpwm.c: 180: PWMS1 = 1;
   861                           
   862                           ;inputpwm.c: 181: PWMS2 = 0;
   863                           
   864                           ;inputpwm.c: 182: PWMR08 = 0;
   865                           
   866                           ;inputpwm.c: 183: PWMR09 = 0;
   867  0054  202A               	fcall	PL4	;call to abstracted procedure
   868                           
   869                           ;inputpwm.c: 184: PWMR = 0;
   870  0055  0193               	clrf	19	;volatile
   871                           
   872                           ;inputpwm.c: 185: PWMEN2 = 1;
   873  0056  1510               	bsf	16,2	;volatile
   874  0057  0008               	return
   875  0058                     __end_of_Init_System:	
   876                           
   877                           	psect	text7
   878  00C4                     __ptext7:	
   879 ;; *************** function _Timer0_Isr *****************
   880 ;; Defined at:
   881 ;;		line 195 in file "C:\SCMCU WorkSpace\inputpwm\inputpwm.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;		None
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      void 
   888 ;; Registers used:
   889 ;;		wreg, status,2, status,0
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMMON   BANK0
   895 ;;      Params:         0       0
   896 ;;      Locals:         0       0
   897 ;;      Temps:          2       0
   898 ;;      Totals:         2       0
   899 ;;Total ram usage:        2 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; This function calls:
   902 ;;		Nothing
   903 ;; This function is called by:
   904 ;;		Interrupt level 1
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908                           
   909                           ;psect for function _Timer0_Isr
   910  00C4                     _Timer0_Isr:	
   911                           
   912                           ;inputpwm.c: 197: if(T0IF)
   913  00C4  1D09               	btfss	9,2	;volatile
   914  00C5  28CA               	goto	i1l345
   915                           
   916                           ;inputpwm.c: 198: {
   917                           ;inputpwm.c: 200: TMR0 += 50;
   918  00C6  3032               	movlw	50
   919  00C7  0781               	addwf	1,f	;volatile
   920                           
   921                           ;inputpwm.c: 203: T0IF = 0;
   922  00C8  1109               	bcf	9,2	;volatile
   923                           
   924                           ;inputpwm.c: 204: nub++;
   925  00C9  0AC6               	incf	_nub,f
   926  00CA                     i1l345:	
   927  00CA  0848               	movf	??_Timer0_Isr+1,w
   928  00CB  008A               	movwf	10
   929  00CC  0E47               	swapf	??_Timer0_Isr^(0+-128),w
   930  00CD  0083               	movwf	3
   931  00CE  0ECE               	swapf	78,f
   932  00CF  0E4E               	swapf	78,w
   933  00D0  0009               	retfie
   934  00D1                     __end_of_Timer0_Isr:	
   935  004E                     btemp	set	78	;btemp
   936  004E                     wtemp0	set	78
   937                           
   938                           	psect	intentry
   939  0004                     __pintentry:	
   940                           ;incstack = 0
   941                           ; Regs used in _Timer0_Isr: [wreg+status,2+status,0]
   942                           
   943  0004                     interrupt_function:	
   944  004E                     saved_w	set	btemp
   945  0004  00CE               	movwf	btemp
   946  0005  0E03               	swapf	3,w
   947  0006  00C7               	movwf	??_Timer0_Isr
   948  0007  080A               	movf	10,w
   949  0008  00C8               	movwf	??_Timer0_Isr+1
   950  0009  28C4               	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4      11
    BANK0            32      3       4

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___lbmod

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___lbmod

Critical Paths under _Timer0_Isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     286
                        _Init_System
                            ___lbmod
                           _checkPB3
                           _checkPB4
                           _checkPB5
                             _setPWM
 ---------------------------------------------------------------------------------
 (1) _setPWM                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkPB5                                             1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _checkPB4                                             1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _checkPB3                                             1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___lbmod                                              5     4      1     286
                                              2 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Timer0_Isr                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_System
   ___lbmod
   _checkPB3
   _checkPB4
   _checkPB5
   _setPWM

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      4       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               20      3       4       3       12.5%
ABS                  0      0       F       4        0.0%
BITBANK0            20      0       0       5        0.0%
DATA                 0      0       F       6        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Apr 17 12:55:40 2020

                     PL2 0023                       PL4 002A                       PL6 0031  
                     u35 00A1                      l801 00AF                      l791 009C  
                    l971 005C                      l787 0097                      l893 00BD  
                    l797 00AA                      l897 00C2                      l979 0070  
                    l987 0075                      l997 007E                      _nub 0046  
                   _T0IF 004A                     _IOCB 000E                     _TMR0 0001  
                   _PWMR 0013                     _WPUB 000D                     _pb3h 0040  
                   _pb4h 0042                     _pb5h 0044                     _main 0074  
                   btemp 004E                     start 000A            ??_Init_System 0049  
                  ?_main 0047          __end_of___lbmod 0074                    i1l345 00CA  
                  _PORTB 0005                    _PWMS0 0090                    _PWMS1 0091  
                  _PWMS2 0092                    _TRISB 0006                    pclath 000A  
                  status 0003                    wtemp0 004E          __initialization 000B  
           __end_of_main 008B                   ??_main 004B      __end_of_Init_System 0058  
                 _INTCON 0009                   _OSCCON 0008                   _PWMCK0 0094  
                 _PWMCK1 0095         __end_of_checkPB3 00C4         __end_of_checkPB4 00B1  
       __end_of_checkPB5 009E                   _PWMEN0 0080                   _PWMR08 0088  
                 _PWMEN1 0081                   _PWMR09 0089                   _PWMEN2 0082  
             _Timer0_Isr 00C4                   _pb3max 0023                   _pb4max 0041  
                 _pb5max 0043                ??___lbmod 004A                   _setPWM 0015  
                 _prenub 0045                   saved_w 004E          ___lbmod@divisor 0049  
__end_of__initialization 0013          ___lbmod@counter 0021           __pcstackCOMMON 0047  
            _Init_System 0037               __end_ofPL2 002A               __end_ofPL4 0031  
             __end_ofPL6 0037               __pbssBANK0 0023              ?_Timer0_Isr 0047  
             __pmaintext 0074               __pintentry 0004                  ?_setPWM 0047  
              ?_checkPB3 0047                ?_checkPB4 0047                ?_checkPB5 0047  
                _TMR0PRD 000F                  _PWMPRD8 0096                  _PWMPRD9 0097  
                _PWM_PRD 0014                  ___lbmod 0058          __size_of_setPWM 000E  
                __ptext0 0000                  __ptext1 0015                  __ptext2 008B  
                __ptext3 009E                  __ptext4 00B1                  __ptext5 0058  
                __ptext6 0037                  __ptext7 00C4               ??_checkPB3 0049  
             ??_checkPB4 0049               ??_checkPB5 0049      __size_of_Timer0_Isr 000D  
   end_of_initialization 0013         ___lbmod@dividend 0020              ___lbmod@rem 0022  
           ?_Init_System 0047           __end_of_setPWM 0023      start_initialization 000B  
           ??_Timer0_Isr 0047                 ??_setPWM 0049              __pbssCOMMON 0040  
              ___latbits 0000            __pcstackBANK0 0020        __size_of_checkPB3 0013  
      __size_of_checkPB4 0013        __size_of_checkPB5 0013       __end_of_Timer0_Isr 00D1  
               ?___lbmod 0049        interrupt_function 0004     __size_of_Init_System 0021  
       __size_of___lbmod 001C                 _checkPB3 00B1                 _checkPB4 009E  
               _checkPB5 008B            __size_of_main 0017                 intlevel1 0000  
             _OPTION_REG 0007  
