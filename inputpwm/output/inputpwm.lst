

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Apr 17 23:23:42 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1152A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	pa_nodes0,global,class=CODE,delta=2
    18                           	dabs	1,0x4E,2
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	text0
    56  0000                     __ptext0:	
    57  0014                     _PWM_PRD	set	20
    58  0013                     _PWMR	set	19
    59  000F                     _TMR0PRD	set	15
    60  000E                     _IOCB	set	14
    61  000D                     _WPUB	set	13
    62  0009                     _INTCON	set	9
    63  0008                     _OSCCON	set	8
    64  0007                     _OPTION_REG	set	7
    65  0006                     _TRISB	set	6
    66  0005                     _PORTB	set	5
    67  0001                     _TMR0	set	1
    68  0090                     _PWMS0	set	144
    69  0091                     _PWMS1	set	145
    70  0092                     _PWMS2	set	146
    71  0094                     _PWMCK0	set	148
    72  0095                     _PWMCK1	set	149
    73  0096                     _PWMPRD8	set	150
    74  0097                     _PWMPRD9	set	151
    75  0088                     _PWMR08	set	136
    76  0089                     _PWMR09	set	137
    77  0080                     _PWMEN0	set	128
    78  0081                     _PWMEN1	set	129
    79  0082                     _PWMEN2	set	130
    80  004A                     _T0IF	set	74
    81                           
    82                           	psect	cinit
    83  000B                     start_initialization:	
    84                           ; #config settings
    85                           
    86  000B                     __initialization:	
    87                           
    88                           ; Clear objects allocated to COMMON
    89  000B  01C0               	clrf	__pbssCOMMON& (0+127)
    90  000C  01C1               	clrf	(__pbssCOMMON+1)& (0+127)
    91  000D  01C2               	clrf	(__pbssCOMMON+2)& (0+127)
    92  000E  01C3               	clrf	(__pbssCOMMON+3)& (0+127)
    93  000F  01C4               	clrf	(__pbssCOMMON+4)& (0+127)
    94  0010  01C5               	clrf	(__pbssCOMMON+5)& (0+127)
    95  0011  01C6               	clrf	(__pbssCOMMON+6)& (0+127)
    96                           
    97                           ; Clear objects allocated to BANK0
    98  0012  01A3               	clrf	__pbssBANK0& (0+127)
    99  0013                     end_of_initialization:	
   100                           ;End of C runtime variable initialization code
   101                           
   102  0013                     __end_of__initialization:	
   103  0013  0183               	clrf	3
   104  0014  283C               	ljmp	_main	;jump to C main() function
   105                           
   106                           	psect	bssCOMMON
   107  0040                     __pbssCOMMON:	
   108  0040                     _nub:	
   109  0040                     	ds	1
   110  0041                     _pb3max:	
   111  0041                     	ds	1
   112  0042                     _pb3h:	
   113  0042                     	ds	1
   114  0043                     _pb4max:	
   115  0043                     	ds	1
   116  0044                     _pb4h:	
   117  0044                     	ds	1
   118  0045                     _pb5max:	
   119  0045                     	ds	1
   120  0046                     _pb5h:	
   121  0046                     	ds	1
   122                           
   123                           	psect	bssBANK0
   124  0023                     __pbssBANK0:	
   125  0023                     _timeoutFlag:	
   126  0023                     	ds	1
   127                           
   128                           	psect	cstackCOMMON
   129  0047                     __pcstackCOMMON:	
   130  0047                     ?_Init_System:	
   131  0047                     ?_setPWM:	
   132                           ; 1 bytes @ 0x0
   133                           
   134  0047                     ?_main:	
   135                           ; 1 bytes @ 0x0
   136                           
   137  0047                     ?_Timer0_Isr:	
   138                           ; 1 bytes @ 0x0
   139                           
   140  0047                     ??_Timer0_Isr:	
   141                           ; 1 bytes @ 0x0
   142                           
   143                           
   144                           ; 1 bytes @ 0x0
   145  0047                     	ds	2
   146  0049                     ??_Init_System:	
   147  0049                     ?_checkPB:	
   148                           ; 1 bytes @ 0x2
   149                           
   150  0049                     ??_setPWM:	
   151                           ; 1 bytes @ 0x2
   152                           
   153  0049                     ?___lbmod:	
   154                           ; 1 bytes @ 0x2
   155                           
   156  0049                     checkPB@pbCountmax:	
   157                           ; 1 bytes @ 0x2
   158                           
   159  0049                     ___lbmod@divisor:	
   160                           ; 1 bytes @ 0x2
   161                           
   162                           
   163                           ; 1 bytes @ 0x2
   164  0049                     	ds	1
   165  004A                     ??___lbmod:	
   166  004A                     checkPB@bitNub:	
   167                           ; 1 bytes @ 0x3
   168                           
   169                           
   170                           ; 1 bytes @ 0x3
   171  004A                     	ds	1
   172  004B                     ??_checkPB:	
   173                           
   174                           ; 1 bytes @ 0x4
   175  004B                     	ds	1
   176  004C                     ??_main:	
   177                           
   178                           	psect	cstackBANK0
   179  0020                     __pcstackBANK0:	
   180                           ; 1 bytes @ 0x5
   181                           
   182  0020                     checkPB@pbCount:	
   183  0020                     ___lbmod@dividend:	
   184                           ; 1 bytes @ 0x0
   185                           
   186                           
   187                           ; 1 bytes @ 0x0
   188  0020                     	ds	1
   189  0021                     ___lbmod@counter:	
   190                           
   191                           ; 1 bytes @ 0x1
   192  0021                     	ds	1
   193  0022                     ___lbmod@rem:	
   194                           
   195                           ; 1 bytes @ 0x2
   196  0022                     	ds	1
   197                           
   198                           	psect	maintext
   199  003C                     __pmaintext:	
   200 ;;
   201 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   202 ;;
   203 ;; *************** function _main *****************
   204 ;; Defined at:
   205 ;;		line 15 in file "C:\SCMCU WorkSpace\inputpwm\inputpwm.c"
   206 ;; Parameters:    Size  Location     Type
   207 ;;		None
   208 ;; Auto vars:     Size  Location     Type
   209 ;;		None
   210 ;; Return value:  Size  Location     Type
   211 ;;                  1    wreg      void 
   212 ;; Registers used:
   213 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   214 ;; Tracked objects:
   215 ;;		On entry : B00/0
   216 ;;		On exit  : 0/0
   217 ;;		Unchanged: 0/0
   218 ;; Data sizes:     COMMON   BANK0
   219 ;;      Params:         0       0
   220 ;;      Locals:         0       0
   221 ;;      Temps:          0       0
   222 ;;      Totals:         0       0
   223 ;;Total ram usage:        0 bytes
   224 ;; Hardware stack levels required when called:    2
   225 ;; This function calls:
   226 ;;		_Init_System
   227 ;;		___lbmod
   228 ;;		_checkPB
   229 ;;		_setPWM
   230 ;; This function is called by:
   231 ;;		Startup code after reset
   232 ;; This function uses a non-reentrant model
   233 ;;
   234                           
   235                           
   236                           ;psect for function _main
   237  003C                     _main:	
   238                           
   239                           ;inputpwm.c: 18: Init_System();
   240                           
   241                           ;incstack = 0
   242                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   243  003C  2083               	fcall	_Init_System
   244  003D                     l1039:	
   245                           
   246                           ;inputpwm.c: 20: {
   247                           ;inputpwm.c: 22: if(timeoutFlag)
   248  003D  0823               	movf	_timeoutFlag,w
   249  003E  1903               	btfsc	3,2
   250  003F  283D               	goto	l1039
   251  0040  3041               	movlw	(low (_pb3max| 0))& (0+255)
   252                           
   253                           ;inputpwm.c: 23: {
   254                           ;inputpwm.c: 24: nub++;
   255  0041  0AC0               	incf	_nub,f
   256                           
   257                           ;inputpwm.c: 25: checkPB(&pb3h,&pb3max,3);
   258  0042  00C9               	movwf	checkPB@pbCountmax
   259  0043  3003               	movlw	3
   260  0044  00CA               	movwf	checkPB@bitNub
   261  0045  3042               	movlw	(low (_pb3h| 0))& (0+255)
   262  0046  2015               	fcall	_checkPB
   263                           
   264                           ;inputpwm.c: 26: checkPB(&pb4h,&pb4max,4);
   265  0047  3043               	movlw	(low (_pb4max| 0))& (0+255)
   266  0048  00C9               	movwf	checkPB@pbCountmax
   267  0049  3004               	movlw	4
   268  004A  00CA               	movwf	checkPB@bitNub
   269  004B  3044               	movlw	(low (_pb4h| 0))& (0+255)
   270  004C  2015               	fcall	_checkPB
   271                           
   272                           ;inputpwm.c: 27: checkPB(&pb5h,&pb5max,5);
   273  004D  3045               	movlw	(low (_pb5max| 0))& (0+255)
   274  004E  00C9               	movwf	checkPB@pbCountmax
   275  004F  3005               	movlw	5
   276  0050  00CA               	movwf	checkPB@bitNub
   277  0051  3046               	movlw	(low (_pb5h| 0))& (0+255)
   278  0052  2015               	fcall	_checkPB
   279  0053  30C9               	movlw	201
   280                           
   281                           ;inputpwm.c: 28: timeoutFlag = 0;
   282  0054  01A3               	clrf	_timeoutFlag
   283                           
   284                           ;inputpwm.c: 29: if(nub >=201)
   285  0055  0240               	subwf	_nub,w
   286  0056  1803               	btfsc	3,0
   287                           
   288                           ;inputpwm.c: 30: {
   289                           ;inputpwm.c: 31: nub = 0;
   290  0057  01C0               	clrf	_nub
   291                           
   292                           ;inputpwm.c: 32: }
   293                           ;inputpwm.c: 34: if(nub % 100 ==0)
   294  0058  3064               	movlw	100
   295  0059  00C9               	movwf	___lbmod@divisor
   296  005A  0840               	movf	_nub,w
   297  005B  20A4               	fcall	___lbmod
   298  005C  3A00               	xorlw	0
   299  005D  1D03               	skipz
   300  005E  283D               	goto	l1039
   301                           
   302                           ;inputpwm.c: 35: {
   303                           ;inputpwm.c: 36: setPWM();
   304  005F  2061               	fcall	_setPWM
   305  0060  283D               	goto	l1039
   306  0061                     __end_of_main:	
   307                           
   308                           	psect	text1
   309  0061                     __ptext1:	
   310 ;; *************** function _setPWM *****************
   311 ;; Defined at:
   312 ;;		line 44 in file "C:\SCMCU WorkSpace\inputpwm\inputpwm.c"
   313 ;; Parameters:    Size  Location     Type
   314 ;;		None
   315 ;; Auto vars:     Size  Location     Type
   316 ;;		None
   317 ;; Return value:  Size  Location     Type
   318 ;;                  1    wreg      void 
   319 ;; Registers used:
   320 ;;		wreg, status,2, status,0
   321 ;; Tracked objects:
   322 ;;		On entry : 0/0
   323 ;;		On exit  : 0/0
   324 ;;		Unchanged: 0/0
   325 ;; Data sizes:     COMMON   BANK0
   326 ;;      Params:         0       0
   327 ;;      Locals:         0       0
   328 ;;      Temps:          0       0
   329 ;;      Totals:         0       0
   330 ;;Total ram usage:        0 bytes
   331 ;; Hardware stack levels used:    1
   332 ;; Hardware stack levels required when called:    1
   333 ;; This function calls:
   334 ;;		Nothing
   335 ;; This function is called by:
   336 ;;		_main
   337 ;; This function uses a non-reentrant model
   338 ;;
   339                           
   340                           
   341                           ;psect for function _setPWM
   342  0061                     _setPWM:	
   343                           
   344                           ;inputpwm.c: 47: PWMS0 = 0;
   345                           
   346                           ;incstack = 0
   347                           ; Regs used in _setPWM: [wreg+status,2+status,0]
   348                           
   349                           ;inputpwm.c: 48: PWMS1 = 0;
   350                           
   351                           ;inputpwm.c: 49: PWMS2 = 0;
   352                           
   353                           ;inputpwm.c: 52: PWMR08 = 0;
   354                           
   355                           ;inputpwm.c: 53: PWMR09 = 0;
   356  0061  207D               	fcall	PL6	;call to abstracted procedure
   357                           
   358                           ;inputpwm.c: 54: PWMR = pb5max * 2;
   359  0062  1003               	clrc
   360  0063  0D45               	rlf	_pb5max,w
   361  0064  0093               	movwf	19	;volatile
   362                           
   363                           ;inputpwm.c: 55: PWMEN0 = 1;
   364                           
   365                           ;inputpwm.c: 58: PWMS0 = 1;
   366                           
   367                           ;inputpwm.c: 59: PWMS1 = 0;
   368                           
   369                           ;inputpwm.c: 60: PWMS2 = 0;
   370                           
   371                           ;inputpwm.c: 63: PWMR08 = 0;
   372                           
   373                           ;inputpwm.c: 64: PWMR09 = 0;
   374  0065  206F               	fcall	PL2	;call to abstracted procedure
   375                           
   376                           ;inputpwm.c: 65: PWMR = pb4max * 2;
   377  0066  1003               	clrc
   378  0067  0D43               	rlf	_pb4max,w
   379  0068  0093               	movwf	19	;volatile
   380                           
   381                           ;inputpwm.c: 66: PWMEN1 = 1;
   382                           
   383                           ;inputpwm.c: 69: PWMS0 = 0;
   384                           
   385                           ;inputpwm.c: 70: PWMS1 = 1;
   386                           
   387                           ;inputpwm.c: 71: PWMS2 = 0;
   388                           
   389                           ;inputpwm.c: 74: PWMR08 = 0;
   390                           
   391                           ;inputpwm.c: 75: PWMR09 = 0;
   392  0069  2076               	fcall	PL4	;call to abstracted procedure
   393                           
   394                           ;inputpwm.c: 76: PWMR = pb3max * 2;
   395  006A  1003               	clrc
   396  006B  0D41               	rlf	_pb3max,w
   397  006C  0093               	movwf	19	;volatile
   398                           
   399                           ;inputpwm.c: 77: PWMEN2 = 1;
   400  006D  1510               	bsf	16,2	;volatile
   401  006E  0008               	return
   402  006F                     __end_of_setPWM:	
   403  006F                     PL2:	
   404  006F  1410               	bsf	16,0	;volatile
   405  0070  1412               	bsf	18,0	;volatile
   406  0071  1092               	bcf	18,1	;volatile
   407  0072  1112               	bcf	18,2	;volatile
   408  0073  1011               	bcf	17,0	;volatile
   409  0074  1091               	bcf	17,1	;volatile
   410  0075  0008               	return
   411  0076                     __end_ofPL2:	
   412  0076                     PL4:	
   413  0076  1490               	bsf	16,1	;volatile
   414  0077  1012               	bcf	18,0	;volatile
   415  0078  1492               	bsf	18,1	;volatile
   416  0079  1112               	bcf	18,2	;volatile
   417  007A  1011               	bcf	17,0	;volatile
   418  007B  1091               	bcf	17,1	;volatile
   419  007C  0008               	return
   420  007D                     __end_ofPL4:	
   421  007D                     PL6:	
   422  007D  1012               	bcf	18,0	;volatile
   423  007E  1092               	bcf	18,1	;volatile
   424  007F  1112               	bcf	18,2	;volatile
   425  0080  1011               	bcf	17,0	;volatile
   426  0081  1091               	bcf	17,1	;volatile
   427  0082  0008               	return
   428  0083                     __end_ofPL6:	
   429                           
   430                           	psect	text2
   431  0015                     __ptext2:	
   432 ;; *************** function _checkPB *****************
   433 ;; Defined at:
   434 ;;		line 81 in file "C:\SCMCU WorkSpace\inputpwm\inputpwm.c"
   435 ;; Parameters:    Size  Location     Type
   436 ;;  pbCount         1    wreg     PTR unsigned char 
   437 ;;		 -> pb5h(1), pb4h(1), pb3h(1), 
   438 ;;  pbCountmax      1    2[COMMON] PTR unsigned char 
   439 ;;		 -> pb5max(1), pb4max(1), pb3max(1), 
   440 ;;  bitNub          1    3[COMMON] unsigned char 
   441 ;; Auto vars:     Size  Location     Type
   442 ;;  pbCount         1    0[BANK0 ] PTR unsigned char 
   443 ;;		 -> pb5h(1), pb4h(1), pb3h(1), 
   444 ;; Return value:  Size  Location     Type
   445 ;;                  1    wreg      void 
   446 ;; Registers used:
   447 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   448 ;; Tracked objects:
   449 ;;		On entry : 0/0
   450 ;;		On exit  : 0/0
   451 ;;		Unchanged: 0/0
   452 ;; Data sizes:     COMMON   BANK0
   453 ;;      Params:         2       0
   454 ;;      Locals:         0       1
   455 ;;      Temps:          1       0
   456 ;;      Totals:         3       1
   457 ;;Total ram usage:        4 bytes
   458 ;; Hardware stack levels used:    1
   459 ;; Hardware stack levels required when called:    1
   460 ;; This function calls:
   461 ;;		Nothing
   462 ;; This function is called by:
   463 ;;		_main
   464 ;; This function uses a non-reentrant model
   465 ;;
   466                           
   467                           
   468                           ;psect for function _checkPB
   469  0015                     _checkPB:	
   470                           
   471                           ;incstack = 0
   472                           ; Regs used in _checkPB: [wreg-fsr0h+status,2+status,0]
   473                           ;checkPB@pbCount stored from wreg
   474  0015  00A0               	movwf	checkPB@pbCount
   475                           
   476                           ;inputpwm.c: 83: if(((PORTB) >> (bitNub)&1) == 1)
   477  0016  0805               	movf	5,w	;volatile
   478  0017  00CB               	movwf	??_checkPB
   479  0018  0A4A               	incf	checkPB@bitNub,w
   480  0019  281C               	goto	u214
   481  001A                     u215:	
   482  001A  1003               	clrc
   483  001B  0CCB               	rrf	??_checkPB,f
   484  001C                     u214:	
   485  001C  3EFF               	addlw	-1
   486  001D  1D03               	skipz
   487  001E  281A               	goto	u215
   488  001F  1C4B               	btfss	??_checkPB,0
   489  0020  282B               	goto	l1013
   490                           
   491                           ;inputpwm.c: 84: {
   492                           ;inputpwm.c: 85: *pbCount = *pbCount + 1;
   493  0021  0820               	movf	checkPB@pbCount,w
   494  0022  0084               	movwf	4
   495  0023  0800               	movf	0,w
   496  0024  3E01               	addlw	1
   497  0025  00CB               	movwf	??_checkPB
   498  0026  0820               	movf	checkPB@pbCount,w
   499  0027  0084               	movwf	4
   500  0028  084B               	movf	??_checkPB,w
   501  0029  0080               	movwf	0
   502                           
   503                           ;inputpwm.c: 86: }
   504  002A  0008               	return
   505  002B                     l1013:	
   506                           
   507                           ;inputpwm.c: 87: else
   508                           ;inputpwm.c: 88: {
   509                           ;inputpwm.c: 89: if(*pbCount !=0)
   510  002B  0820               	movf	checkPB@pbCount,w
   511  002C  0084               	movwf	4
   512  002D  0800               	movf	0,w
   513  002E  1903               	btfsc	3,2
   514  002F  2838               	goto	l1017
   515                           
   516                           ;inputpwm.c: 90: {
   517                           ;inputpwm.c: 91: *pbCountmax = *pbCount;
   518  0030  0820               	movf	checkPB@pbCount,w
   519  0031  0084               	movwf	4
   520  0032  0800               	movf	0,w
   521  0033  00CB               	movwf	??_checkPB
   522  0034  0849               	movf	checkPB@pbCountmax,w
   523  0035  0084               	movwf	4
   524  0036  084B               	movf	??_checkPB,w
   525  0037  0080               	movwf	0
   526  0038                     l1017:	
   527                           
   528                           ;inputpwm.c: 92: }
   529                           ;inputpwm.c: 93: *pbCount = 0;
   530  0038  0820               	movf	checkPB@pbCount,w
   531  0039  0084               	movwf	4
   532  003A  0180               	clrf	0
   533  003B  0008               	return
   534  003C                     __end_of_checkPB:	
   535                           
   536                           	psect	text3
   537  00A4                     __ptext3:	
   538 ;; *************** function ___lbmod *****************
   539 ;; Defined at:
   540 ;;		line 4 in file "C:\¹¤¾ß\µ¥Æ¬»úÑ§Ï°×ÊÁÏ\SC8P\SCMCU_IDE_V2.00.07\data\sources\common\lbmod.c"
   541 ;; Parameters:    Size  Location     Type
   542 ;;  dividend        1    wreg     unsigned char 
   543 ;;  divisor         1    2[COMMON] unsigned char 
   544 ;; Auto vars:     Size  Location     Type
   545 ;;  dividend        1    0[BANK0 ] unsigned char 
   546 ;;  rem             1    2[BANK0 ] unsigned char 
   547 ;;  counter         1    1[BANK0 ] unsigned char 
   548 ;; Return value:  Size  Location     Type
   549 ;;                  1    wreg      unsigned char 
   550 ;; Registers used:
   551 ;;		wreg, status,2, status,0
   552 ;; Tracked objects:
   553 ;;		On entry : 0/0
   554 ;;		On exit  : 0/0
   555 ;;		Unchanged: 0/0
   556 ;; Data sizes:     COMMON   BANK0
   557 ;;      Params:         1       0
   558 ;;      Locals:         0       3
   559 ;;      Temps:          1       0
   560 ;;      Totals:         2       3
   561 ;;Total ram usage:        5 bytes
   562 ;; Hardware stack levels used:    1
   563 ;; Hardware stack levels required when called:    1
   564 ;; This function calls:
   565 ;;		Nothing
   566 ;; This function is called by:
   567 ;;		_main
   568 ;; This function uses a non-reentrant model
   569 ;;
   570                           
   571                           
   572                           ;psect for function ___lbmod
   573  00A4                     ___lbmod:	
   574                           
   575                           ;incstack = 0
   576                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
   577                           ;___lbmod@dividend stored from wreg
   578  00A4  00A0               	movwf	___lbmod@dividend
   579  00A5  3008               	movlw	8
   580  00A6  00A1               	movwf	___lbmod@counter
   581  00A7  01A2               	clrf	___lbmod@rem
   582  00A8                     l1023:	
   583  00A8  0820               	movf	___lbmod@dividend,w
   584  00A9  00CA               	movwf	??___lbmod
   585  00AA  3007               	movlw	7
   586  00AB  1003               	clrc
   587  00AC                     L1:	
   588  00AC  0CCA               	rrf	??___lbmod,f
   589  00AD  3EFF               	addlw	-1
   590  00AE  1003               	clrc
   591  00AF  1D03               	skipz
   592  00B0  28AC               	goto	L1
   593  00B1  0D22               	rlf	___lbmod@rem,w
   594  00B2  044A               	iorwf	??___lbmod,w
   595  00B3  00A2               	movwf	___lbmod@rem
   596  00B4  1003               	clrc
   597  00B5  0DA0               	rlf	___lbmod@dividend,f
   598  00B6  0849               	movf	___lbmod@divisor,w
   599  00B7  0222               	subwf	___lbmod@rem,w
   600  00B8  1C03               	skipc
   601  00B9  28BC               	goto	l1031
   602  00BA  0849               	movf	___lbmod@divisor,w
   603  00BB  02A2               	subwf	___lbmod@rem,f
   604  00BC                     l1031:	
   605  00BC  0BA1               	decfsz	___lbmod@counter,f
   606  00BD  28A8               	goto	l1023
   607  00BE  0822               	movf	___lbmod@rem,w
   608  00BF  0008               	return
   609  00C0                     __end_of___lbmod:	
   610                           
   611                           	psect	text4
   612  0083                     __ptext4:	
   613 ;; *************** function _Init_System *****************
   614 ;; Defined at:
   615 ;;		line 105 in file "C:\SCMCU WorkSpace\inputpwm\inputpwm.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;		None
   618 ;; Auto vars:     Size  Location     Type
   619 ;;		None
   620 ;; Return value:  Size  Location     Type
   621 ;;                  1    wreg      void 
   622 ;; Registers used:
   623 ;;		wreg, status,2
   624 ;; Tracked objects:
   625 ;;		On entry : B00/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMMON   BANK0
   629 ;;      Params:         0       0
   630 ;;      Locals:         0       0
   631 ;;      Temps:          0       0
   632 ;;      Totals:         0       0
   633 ;;Total ram usage:        0 bytes
   634 ;; Hardware stack levels used:    1
   635 ;; Hardware stack levels required when called:    1
   636 ;; This function calls:
   637 ;;		Nothing
   638 ;; This function is called by:
   639 ;;		_main
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643                           
   644                           ;psect for function _Init_System
   645  0083                     _Init_System:	
   646                           
   647                           ;incstack = 0
   648                           ; Regs used in _Init_System: [wreg+status,2]
   649  0083  0000               	nop	;# 
   650  0084  0064               	clrwdt	;# 
   651                           
   652                           ;inputpwm.c: 109: INTCON = 0;
   653  0085  0189               	clrf	9	;volatile
   654                           
   655                           ;inputpwm.c: 110: OSCCON = 0X71;
   656  0086  3071               	movlw	113
   657  0087  0088               	movwf	8	;volatile
   658                           
   659                           ;inputpwm.c: 111: WPUB = 0xFF;
   660  0088  30FF               	movlw	255
   661  0089  008D               	movwf	13	;volatile
   662                           
   663                           ;inputpwm.c: 112: OPTION_REG = 0xD0;
   664  008A  30D0               	movlw	208
   665  008B  0087               	movwf	7	;volatile
   666                           
   667                           ;inputpwm.c: 113: TMR0 = 0;
   668  008C  0181               	clrf	1	;volatile
   669                           
   670                           ;inputpwm.c: 114: INTCON = 0xE0;
   671  008D  30E0               	movlw	224
   672  008E  0089               	movwf	9	;volatile
   673                           
   674                           ;inputpwm.c: 115: TMR0PRD = 100;
   675  008F  3064               	movlw	100
   676  0090  008F               	movwf	15	;volatile
   677                           
   678                           ;inputpwm.c: 118: TRISB = 0B00111000;
   679  0091  3038               	movlw	56
   680  0092  0086               	movwf	6	;volatile
   681                           
   682                           ;inputpwm.c: 119: PORTB = 0B00111000;
   683  0093  0085               	movwf	5	;volatile
   684                           
   685                           ;inputpwm.c: 120: IOCB = 0xFF;
   686  0094  30FF               	movlw	255
   687  0095  008E               	movwf	14	;volatile
   688                           
   689                           ;inputpwm.c: 123: PWMCK0 = 0;
   690  0096  1212               	bcf	18,4	;volatile
   691                           
   692                           ;inputpwm.c: 124: PWMCK1 = 1;
   693  0097  1692               	bsf	18,5	;volatile
   694                           
   695                           ;inputpwm.c: 125: PWMPRD8 = 0;
   696  0098  1312               	bcf	18,6	;volatile
   697                           
   698                           ;inputpwm.c: 126: PWMPRD9 = 0;
   699  0099  1392               	bcf	18,7	;volatile
   700                           
   701                           ;inputpwm.c: 127: PWM_PRD = 199;
   702  009A  30C7               	movlw	199
   703  009B  0094               	movwf	20	;volatile
   704                           
   705                           ;inputpwm.c: 130: PWMS0 = 0;
   706                           
   707                           ;inputpwm.c: 131: PWMS1 = 0;
   708                           
   709                           ;inputpwm.c: 132: PWMS2 = 0;
   710                           
   711                           ;inputpwm.c: 135: PWMR08 = 0;
   712                           
   713                           ;inputpwm.c: 136: PWMR09 = 0;
   714  009C  207D               	fcall	PL6	;call to abstracted procedure
   715                           
   716                           ;inputpwm.c: 137: PWMR = 0;
   717  009D  0193               	clrf	19	;volatile
   718                           
   719                           ;inputpwm.c: 138: PWMEN0 = 1;
   720                           
   721                           ;inputpwm.c: 140: PWMS0 = 1;
   722                           
   723                           ;inputpwm.c: 141: PWMS1 = 0;
   724                           
   725                           ;inputpwm.c: 142: PWMS2 = 0;
   726                           
   727                           ;inputpwm.c: 143: PWMR08 = 0;
   728                           
   729                           ;inputpwm.c: 144: PWMR09 = 0;
   730  009E  206F               	fcall	PL2	;call to abstracted procedure
   731                           
   732                           ;inputpwm.c: 145: PWMR = 0;
   733  009F  0193               	clrf	19	;volatile
   734                           
   735                           ;inputpwm.c: 146: PWMEN1 = 1;
   736                           
   737                           ;inputpwm.c: 149: PWMS0 = 0;
   738                           
   739                           ;inputpwm.c: 150: PWMS1 = 1;
   740                           
   741                           ;inputpwm.c: 151: PWMS2 = 0;
   742                           
   743                           ;inputpwm.c: 152: PWMR08 = 0;
   744                           
   745                           ;inputpwm.c: 153: PWMR09 = 0;
   746  00A0  2076               	fcall	PL4	;call to abstracted procedure
   747                           
   748                           ;inputpwm.c: 154: PWMR = 0;
   749  00A1  0193               	clrf	19	;volatile
   750                           
   751                           ;inputpwm.c: 155: PWMEN2 = 1;
   752  00A2  1510               	bsf	16,2	;volatile
   753  00A3  0008               	return
   754  00A4                     __end_of_Init_System:	
   755                           
   756                           	psect	text5
   757  00C0                     __ptext5:	
   758 ;; *************** function _Timer0_Isr *****************
   759 ;; Defined at:
   760 ;;		line 165 in file "C:\SCMCU WorkSpace\inputpwm\inputpwm.c"
   761 ;; Parameters:    Size  Location     Type
   762 ;;		None
   763 ;; Auto vars:     Size  Location     Type
   764 ;;		None
   765 ;; Return value:  Size  Location     Type
   766 ;;                  1    wreg      void 
   767 ;; Registers used:
   768 ;;		wreg, status,2, status,0
   769 ;; Tracked objects:
   770 ;;		On entry : 0/0
   771 ;;		On exit  : 0/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMMON   BANK0
   774 ;;      Params:         0       0
   775 ;;      Locals:         0       0
   776 ;;      Temps:          2       0
   777 ;;      Totals:         2       0
   778 ;;Total ram usage:        2 bytes
   779 ;; Hardware stack levels used:    1
   780 ;; This function calls:
   781 ;;		Nothing
   782 ;; This function is called by:
   783 ;;		Interrupt level 1
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           
   788                           ;psect for function _Timer0_Isr
   789  00C0                     _Timer0_Isr:	
   790                           
   791                           ;inputpwm.c: 167: if(T0IF)
   792  00C0  1D09               	btfss	9,2	;volatile
   793  00C1  28C7               	goto	i1l329
   794                           
   795                           ;inputpwm.c: 168: {
   796                           ;inputpwm.c: 170: TMR0 += 50;
   797  00C2  3032               	movlw	50
   798  00C3  0781               	addwf	1,f	;volatile
   799                           
   800                           ;inputpwm.c: 173: T0IF = 0;
   801  00C4  1109               	bcf	9,2	;volatile
   802                           
   803                           ;inputpwm.c: 174: timeoutFlag = 1;
   804  00C5  01A3               	clrf	_timeoutFlag
   805  00C6  0AA3               	incf	_timeoutFlag,f
   806  00C7                     i1l329:	
   807  00C7  0848               	movf	??_Timer0_Isr+1,w
   808  00C8  008A               	movwf	10
   809  00C9  0E47               	swapf	??_Timer0_Isr^(0+-128),w
   810  00CA  0083               	movwf	3
   811  00CB  0ECE               	swapf	78,f
   812  00CC  0E4E               	swapf	78,w
   813  00CD  0009               	retfie
   814  00CE                     __end_of_Timer0_Isr:	
   815  004E                     btemp	set	78	;btemp
   816  004E                     wtemp0	set	78
   817                           
   818                           	psect	intentry
   819  0004                     __pintentry:	
   820                           ;incstack = 0
   821                           ; Regs used in _Timer0_Isr: [wreg+status,2+status,0]
   822                           
   823  0004                     interrupt_function:	
   824  004E                     saved_w	set	btemp
   825  0004  00CE               	movwf	btemp
   826  0005  0E03               	swapf	3,w
   827  0006  00C7               	movwf	??_Timer0_Isr
   828  0007  080A               	movf	10,w
   829  0008  00C8               	movwf	??_Timer0_Isr+1
   830  0009  28C0               	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      12
    BANK0            32      3       4

Pointer List with Targets:

    checkPB@pbCountmax	PTR unsigned char  size(1) Largest target is 1
		 -> pb5max(COMMON[1]), pb4max(COMMON[1]), pb3max(COMMON[1]), 

    checkPB@pbCount	PTR unsigned char  size(1) Largest target is 1
		 -> pb5h(COMMON[1]), pb4h(COMMON[1]), pb3h(COMMON[1]), 


Critical Paths under _main in COMMON

    _main->_checkPB

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___lbmod

Critical Paths under _Timer0_Isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     994
                        _Init_System
                            ___lbmod
                            _checkPB
                             _setPWM
 ---------------------------------------------------------------------------------
 (1) _setPWM                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkPB                                              4     2      2     697
                                              2 COMMON     3     1      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) ___lbmod                                              5     4      1     297
                                              2 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Timer0_Isr                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_System
   ___lbmod
   _checkPB
   _setPWM

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0               20      3       4       3       12.5%
ABS                  0      0      10       4        0.0%
BITBANK0            20      0       0       5        0.0%
DATA                 0      0      10       6        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Apr 17 23:23:42 2020

                     PL2 006F                       PL4 0076                       PL6 007D  
                    u214 001C                      u215 001A                      _nub 0040  
                    fsr0 0004                      indf 0000                     l1013 002B  
                   l1031 00BC                     l1023 00A8                     l1017 0038  
                   l1039 003D                     _T0IF 004A                     _IOCB 000E  
                   _TMR0 0001                     _PWMR 0013                     _WPUB 000D  
                   _pb3h 0042                     _pb4h 0044                     _pb5h 0046  
                   _main 003C                     btemp 004E                     start 000A  
          ??_Init_System 0049                    ?_main 0047          __end_of___lbmod 00C0  
                  i1l329 00C7                    _PORTB 0005          __end_of_checkPB 003C  
                  _PWMS0 0090                    _PWMS1 0091                    _PWMS2 0092  
                  _TRISB 0006            checkPB@bitNub 004A                    pclath 000A  
                  status 0003                    wtemp0 004E          __initialization 000B  
           __end_of_main 0061                   ??_main 004C      __end_of_Init_System 00A4  
                 _INTCON 0009                   _OSCCON 0008                   _PWMCK0 0094  
                 _PWMCK1 0095                   _PWMEN0 0080                   _PWMR08 0088  
                 _PWMEN1 0081                   _PWMR09 0089                   _PWMEN2 0082  
             _Timer0_Isr 00C0                   _pb3max 0041                   _pb4max 0043  
                 _pb5max 0045                ??___lbmod 004A           checkPB@pbCount 0020  
              ??_checkPB 004B                   _setPWM 0061                   saved_w 004E  
        ___lbmod@divisor 0049  __end_of__initialization 0013          ___lbmod@counter 0021  
         __pcstackCOMMON 0047              _Init_System 0083               __end_ofPL2 0076  
             __end_ofPL4 007D               __end_ofPL6 0083               __pbssBANK0 0023  
            ?_Timer0_Isr 0047               __pmaintext 003C               __pintentry 0004  
                ?_setPWM 0047                  _TMR0PRD 000F                  _PWMPRD8 0096  
                _PWMPRD9 0097                  _PWM_PRD 0014                  ___lbmod 00A4  
                _checkPB 0015          __size_of_setPWM 000E                  __ptext0 0000  
                __ptext1 0061                  __ptext2 0015                  __ptext3 00A4  
                __ptext4 0083                  __ptext5 00C0      __size_of_Timer0_Isr 000E  
   end_of_initialization 0013         ___lbmod@dividend 0020              ___lbmod@rem 0022  
           ?_Init_System 0047           __end_of_setPWM 006F      start_initialization 000B  
           ??_Timer0_Isr 0047                 ??_setPWM 0049              __pbssCOMMON 0040  
              ___latbits 0000            __pcstackBANK0 0020       __end_of_Timer0_Isr 00CE  
      checkPB@pbCountmax 0049                 ?___lbmod 0049                 ?_checkPB 0049  
      interrupt_function 0004     __size_of_Init_System 0021         __size_of___lbmod 001C  
       __size_of_checkPB 0027            __size_of_main 0025                 intlevel1 0000  
             _OPTION_REG 0007              _timeoutFlag 0023  
